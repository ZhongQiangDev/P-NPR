text	recoder	tare	rewardrepair	selfapr	gamma	allfailure
@Bean public EnableRedisKeyspaceNotificationsInitializer enableRedisKeyspaceNotificationsInitializer(RedisConnectionFactory connectionFactory) { return new EnableRedisKeyspaceNotificationsInitializer(connectionFactory, configureRedisAction); } 	0	0	0	0	0	1
"@Override protected String calculateIndividualTuidDelegator(final EObject obj) throws IllegalArgumentException { for (String attributeName : this.attributeNames) { final String attributeValue = EcoreBridge.getStringValueOfAttribute(obj, attributeName); if (null != attributeValue) { String subTuid = (obj.eContainingFeature() == null ? ""<root>"" : obj.eContainingFeature().getName()) + SUBDIVIDER + obj.eClass().getName() + SUBDIVIDER + attributeName + ""="" + attributeValue; return subTuid; } else { EStructuralFeature idFeature = obj.eClass().getEStructuralFeature(attributeName); if (idFeature != null && !obj.eIsSet(idFeature)) { return attributeName; } } }  throw new RuntimeException( ""None of '"" + String.join(""', '"", this.attributeNames) + ""' found for eObject '"" + obj + ""'""); } "	0	0	0	0	0	1
"@Override protected ISpoofaxAnalyzeResults analyzeAll(Map<String,ISpoofaxParseUnit> changed, Map<String,ISpoofaxParseUnit> removed, IMultiFileScopeGraphContext context, HybridInterpreter runtime, String strategy) throws AnalysisException { String globalSource = context.location().getName().getURI();  for (String input : removed.keySet()) { context.removeUnit(input); }  // initial InitialResult initialResult; if (context.initialResult().isPresent()) { initialResult = context.initialResult().get(); } else { IStrategoTerm initialResultTerm = doAction(strategy, actionBuilder.initialOf(globalSource), context, runtime); initialResult = ResultTerms.initialOf().match(strategoTerms.fromStratego(initialResultTerm)).orElseThrow( () -> new AnalysisException(context, ""Invalid initial results."")); context.setInitialResult(initialResult); }  // units final Map<String,IStrategoTerm> astsByFile = Maps.newHashMap(); final Multimap<String,IMessage> ambiguitiesByFile = HashMultimap.create(); final Multimap<String,IMessage> failuresByFile = HashMultimap.create(); for (Map.Entry<String,ISpoofaxParseUnit> input : changed.entrySet()) { String source = input.getKey(); ISpoofaxParseUnit parseUnit = input.getValue();  IMultiFileScopeGraphUnit unit = context.unit(source); unit.clear();  try { IStrategoTerm unitResultTerm = doAction(strategy, actionBuilder.unitOf(source, parseUnit.ast(), initialResult.getArgs()), context, runtime); UnitResult unitResult = ResultTerms.unitOf().match(strategoTerms.fromStratego(unitResultTerm)) .orElseThrow(() -> new MetaborgException(""Invalid unit results."")); IStrategoTerm analyzedAST = strategoTerms.toStratego(unitResult.getAST()); astsByFile.put(source, analyzedAST); ambiguitiesByFile.putAll(source, analysisCommon.ambiguityMessages(parseUnit.source(), analyzedAST)); unit.setUnitResult(unitResult); } catch (MetaborgException e) { logger.warn(""File analysis failed."", e); failuresByFile.put(source, MessageFactory.newAnalysisErrorAtTop(parseUnit.source(), ""File analysis failed."", e)); } }  // solve final List<Iterable<IConstraint>> constraints = Lists.newArrayList(); context.initialResult().ifPresent(i -> constraints.add(i.getConstraints())); for (IMultiFileScopeGraphUnit unit : context.units()) { unit.unitResult().ifPresent(u -> constraints.add(u.getConstraints())); } Solution solution; try { solution = Solver.solve(Iterables.concat(constraints)); } catch (UnsatisfiableException e) { throw new AnalysisException(context, e); } context.setSolution(solution);  // final IStrategoTerm finalResultTerm = doAction(strategy, actionBuilder.finalOf(globalSource), context, runtime); FinalResult finalResult = ResultTerms.finalOf().match(strategoTerms.fromStratego(finalResultTerm)).orElseThrow( () -> new AnalysisException(context, ""Invalid final results."")); context.setFinalResult(finalResult);  // errors Multimap<String,IMessage> errorsByFile = messagesByFile(solution.getErrors(), MessageSeverity.ERROR); Multimap<String,IMessage> warningsByFile = messagesByFile(solution.getWarnings(), MessageSeverity.WARNING); Multimap<String,IMessage> notesByFile = messagesByFile(solution.getNotes(), MessageSeverity.NOTE); final Collection<ISpoofaxAnalyzeUnit> results = Lists.newArrayList(); final Collection<ISpoofaxAnalyzeUnitUpdate> updateResults = Lists.newArrayList(); for (IMultiFileScopeGraphUnit unit : context.units()) { final String source = unit.resource(); final Collection<IMessage> errors = errorsByFile.get(source); final Collection<IMessage> warnings = warningsByFile.get(source); final Collection<IMessage> notes = notesByFile.get(source); final Collection<IMessage> ambiguities = ambiguitiesByFile.get(source); final Collection<IMessage> messages = Lists.newArrayListWithCapacity(errors.size() + warnings.size() + notes .size() + ambiguities.size()); messages.addAll(errors); messages.addAll(warnings); messages.addAll(notes); messages.addAll(ambiguities); if (changed.containsKey(source)) { results.add(unitService.analyzeUnit(changed.get(source), new AnalyzeContrib(true, errors.isEmpty(), true, astsByFile.get(source), messages, -1), context)); } else { FileObject file = resourceService.resolve(source); updateResults.add(unitService.analyzeUnitUpdate(file, new AnalyzeUpdateData(messages), context)); } }  return new SpoofaxAnalyzeResults(results, updateResults, context); } "	0	0	0	0	0	1
"@Test public void testSectionValidatorWithSimpleDocument() throws RedPenException { List<Document> documents = new ArrayList<>();  documents.add(Document.builder() .setFileName(""tested file"") .addSection(0) .addSectionHeader(""foobar"") .addParagraph() .addSentence(new Sentence(""it is a piece of a cake."", 1)) .addSentence(new Sentence(""that is also a piece of a cake."", 2)) .build());  RedPen redPen = getRedPenWithSectionValidator(); List<ValidationError> errors = redPen.validate(documents).get(documents.get(0));  // validate the errors assertEquals(1, errors.size()); for (ValidationError error : errors) { assertThat(error.getValidatorName(), is(""SectionLength"")); assertThat(error.getMessage(), containsString(""The number of characters in the section exceeds the maximum of"")); } } "	0	0	0	0	0	1
@Override public byte[] inflate(InputStream data) throws CompressionException { ByteArrayOutputStream out = new ByteArrayOutputStream(); try (SnappyInputStream snappy = new SnappyInputStream(data)) { IOUtils.copy(snappy, out); } catch (IOException e) { throw new CompressionException(CompressionConstants.DECODING_ERROR + getContentEncodingName(), e); } return out.toByteArray(); } 	0	0	0	0	0	1
private int handleOperator(FormatStd std, char[] cs, FastStringBuffer buf, ParsingUtils parsingUtils, int i, char c) { //let's discover if it's an unary operator (~ + -) boolean isUnaryWithContents = true;  boolean isUnary = false; boolean changeWhitespacesBefore = true; if (c == '~' || c == '+' || c == '-') { //could be an unary operator... String trimmedLastWord = buf.getLastWord().trim(); isUnary = trimmedLastWord.length() == 0 || PySelection.ALL_KEYWORD_TOKENS.contains(trimmedLastWord);  if (!isUnary) { for (char itChar : buf.reverseIterator()) { if (itChar == ' ' || itChar == '\t') { continue; }  switch (itChar) { case '[': case '{': case '=': changeWhitespacesBefore = false;  case '(': case ':': isUnaryWithContents = false;  case '>': case '<':  case '-': case '+': case '~':  case '*': case '/': case '%': case '!': case '&': case '^': case '|': case ',': isUnary = true; } break; } } else { isUnaryWithContents = buf.length() > 0; } }  //We don't want to change whitespaces before in a binary operator that is in a new line. for (char ch : buf.reverseIterator()) { if (!Character.isWhitespace(ch)) { break; } if (ch == '\r' || ch == '\n') { changeWhitespacesBefore = false; break; } }  if (changeWhitespacesBefore) { while (buf.length() > 0 && (buf.lastChar() == ' ' || buf.lastChar() == ' ')) { buf.deleteLast(); } }  boolean surroundWithSpaces = std.operatorsWithSpace;  if (changeWhitespacesBefore) { //add spaces before if (isUnaryWithContents && surroundWithSpaces) { buf.append(' '); } }  char localC = c; char prev = '\0'; boolean backOne = true; while (isOperatorPart(localC, prev)) { buf.append(localC); prev = localC; i++; if (i == cs.length) { break; } localC = cs[i]; if (localC == '=') { //when we get to an assign, we have found a full stmt (with assign) -- e.g.: a \\=  a += a == buf.append(localC); backOne = false; break; } } if (backOne) { i--; }  //add space after only if it's not unary if (!isUnary && surroundWithSpaces) { buf.append(' '); }  i = parsingUtils.eatWhitespaces(null, i + 1); return i; } 	0	0	0	0	0	1
"@SuppressWarnings(""rawtypes"") public static Variable getVariable(String varname, String typename, String params) { if (typename.equalsIgnoreCase(""Boolean"")) { return Predef.Boolean(varname); } if (typename.equalsIgnoreCase(""String"")) { String[] values = params.split("";""); return Predef.Nominal(values, varname); } if (typename.equalsIgnoreCase(""Number"")) { try { Integer max = Integer.parseInt(params); return Predef.Number(max, varname); } catch (NumberFormatException e) { e.printStackTrace(); return null; } } if (typename.equalsIgnoreCase(""Amino acid"")) { return Predef.AminoAcid(varname); } if (typename.equalsIgnoreCase(""Amino acid extended"")) { return Predef.AminoAcid(varname); } if (typename.equalsIgnoreCase(""Nucleic acid"")) { return Predef.NucleicAcid(varname); } if (typename.equalsIgnoreCase(""Real"")) { return Predef.Real(varname); } if (typename.equalsIgnoreCase(""Distrib"")) { String[] values = params.split("";""); if (values.length > 1) return Predef.Distrib(values, varname); else if (!isParameterised(values[0]) && isEnumerable(values[0])) { try { Variable temp = getVariable(""temp"", values[0], null); return Predef.Distrib((Enumerable)temp.getDomain(), varname); } catch (RuntimeException ex) { throw new RuntimeException(""Invalid specification of variable: "" + varname); } } } throw new RuntimeException(""Invalid specification of variable: "" + varname); } "	0	0	0	0	0	1
"@Test public void testAmbiguousConstructor1() { assertMethod(""Lmethodlocator/Samples;.Samples(QString;)V"", ""<init>"", ""(Ljava/lang/String;)V""); } "	0	0	0	0	0	1
"@Test public void testUnambiguousConstructor() { assertMethod(""Lmethodlocator/Samples;.Samples()V"", ""<init>"", ""()V""); } "	0	0	0	0	0	1
"@POST @Path(""/ok"") public List<String> ok(OkRepresentation rep) { return ImmutableList.of(rep.getMessage()); } "	0	0	0	0	0	1
"public void performActualSuperres(Mat[] rgbInputMatList, Integer[] inputIndices, int bestIndex, boolean debugMode) { boolean performDenoising = ParameterConfig.getPrefsBoolean(ParameterConfig.DENOISE_FLAG_KEY, false);  if(performDenoising) { ProgressDialogHandler.getInstance().showProcessDialog(""Denoising"", ""Performing denoising"", 20.0f);  //perform denoising on original input list DenoisingOperator denoisingOperator = new DenoisingOperator(rgbInputMatList); denoisingOperator.perform(); MatMemory.releaseAll(rgbInputMatList, false); rgbInputMatList = denoisingOperator.getResult();  } else { Log.d(TAG, ""Denoising will be skipped!""); }   int srChoice = ParameterConfig.getPrefsInt(ParameterConfig.SR_CHOICE_KEY, FusionConstants.FULL_SR_MODE); if(srChoice == FusionConstants.FULL_SR_MODE) { this.performFullSRMode(rgbInputMatList, inputIndices, bestIndex, debugMode); } else { MatMemory.releaseAll(rgbInputMatList, false); MatMemory.cleanMemory(); this.performFastSRMode(bestIndex, debugMode); }   } "	0	0	0	0	0	1
"private void processPartitionedTable(ConvertibleHiveDataset hiveDataset, AutoReturnableObject<IMetaStoreClient> client) throws IOException {  // Get partitions for the table List<Partition> sourcePartitions = HiveUtils.getPartitions(client.get(), hiveDataset.getTable(), Optional.<String> absent());  for (final String format : hiveDataset.getDestFormats()) { Optional<ConvertibleHiveDataset.ConversionConfig> conversionConfigOptional = hiveDataset.getConversionConfigForFormat(format);  if (conversionConfigOptional.isPresent()) {  // Get conversion config ConvertibleHiveDataset.ConversionConfig conversionConfig = conversionConfigOptional.get(); String orcTableName = conversionConfig.getDestinationTableName(); String orcTableDatabase = conversionConfig.getDestinationDbName(); Pair<Optional<org.apache.hadoop.hive.metastore.api.Table>, Optional<List<Partition>>> destinationMeta = getDestinationTableMeta(orcTableDatabase, orcTableName, this.props);  // Validate each partition for (final Partition sourcePartition : sourcePartitions) { try { final long updateTime = this.updateProvider.getUpdateTime(sourcePartition); if (shouldValidate(sourcePartition)) { log.info(String.format(""Validating partition: %s"", sourcePartition.getCompleteName()));  // Generate validation queries final List<String> countValidationQueries = HiveValidationQueryGenerator.generateCountValidationQueries(hiveDataset, Optional.of(sourcePartition), conversionConfig); final List<String> dataValidationQueries = Lists.newArrayList(HiveValidationQueryGenerator.generateDataValidationQuery(hiveDataset.getTable().getTableName(), hiveDataset.getTable() .getDbName(), destinationMeta.getKey().get(), Optional.of(sourcePartition)));  this.futures.add(this.exec.submit(new Callable<Void>() { @Override public Void call() throws Exception {  // Execute validation queries log.debug(String.format(""Going to execute count validation queries queries: %s for format: %s "" + ""and partition %s"", countValidationQueries, format, sourcePartition.getCompleteName())); List<Long> rowCounts = ValidationJob.this.getValidationOutputFromHive(countValidationQueries); log.debug(String.format(""Going to execute data validation queries: %s for format: %s and partition %s"", dataValidationQueries, format, sourcePartition.getCompleteName())); List<Long> rowDataValidatedCount = ValidationJob.this.getValidationOutputFromHive(dataValidationQueries);  // Validate and populate report validateAndPopulateReport(sourcePartition.getCompleteName(), updateTime, rowCounts, rowDataValidatedCount.get(0));  return null; } }));  } else { log.debug(String.format(""Not validating partition: %s as updateTime: %s is not in range of max look back: %s "" + ""and skip recent than: %s"", sourcePartition.getCompleteName(), updateTime, this.maxLookBackTime, this.skipRecentThanTime)); } } catch (UncheckedExecutionException e) { log.warn(String.format(""Not validating partition: %s as update time was not found. %s"", sourcePartition.getCompleteName(), e.getMessage())); } } } else { log.info(String.format(""No conversion config found for format %s. Ignoring data validation"", format)); } } } "	0	0	0	0	0	1
"@Override public Object call() throws Exception { if (!cmdUp.getStartConsul()) { return null; } String mesosConsul = """"; try { mesosConsul = IOUtils.toString(Thread.currentThread().getContextClassLoader().getResourceAsStream(""marathon/mesos-consul.json""), ""UTF-8""); MesosCluster.executeMarathonTask(clusterId, mesosConsul .replace(""{{MINIMESOS_ZOOKEEPER}}"", ZooKeeper.formatZKAddress(MesosCluster.getContainerIp(clusterId, ""zookeeper""))) .replace(""{{MINIMESOS_CONSUL_IP}}"", MesosCluster.getContainerIp(clusterId, ""consul""))); } catch (Exception e) { LOGGER.error(""Can't start marathon task: "" + e.getMessage()); } return null; } "	0	0	0	0	0	1
public void setGaplists(String[] gaplists) { this.gaplists = gaplists; } 	0	0	0	0	0	1
public static PhysicalGameState melee8x8Mixed4() { PhysicalGameState pgs = new PhysicalGameState(8,8);  Player p0 = new Player(0,0); Player p1 = new Player(1,0); pgs.addPlayer(p0); pgs.addPlayer(p1);  Unit l0 = new Unit(0,heavyType,1,1); Unit l1 = new Unit(0,lightType,2,1); Unit l2 = new Unit(0,heavyType,1,2); Unit l3 = new Unit(0,lightType,2,2); Unit l4 = new Unit(1,lightType,5,5); Unit l5 = new Unit(1,lightType,5,6); Unit l6 = new Unit(1,heavyType,6,5); Unit l7 = new Unit(1,heavyType,6,6); pgs.addUnit(l0); pgs.addUnit(l1); pgs.addUnit(l2); pgs.addUnit(l3); pgs.addUnit(l4); pgs.addUnit(l5); pgs.addUnit(l6); pgs.addUnit(l7);  return pgs; } 	0	0	0	0	0	1
public static PhysicalGameState basesWorkersBarracks8x8() { PhysicalGameState pgs = new PhysicalGameState(8,8);  Player p0 = new Player(0,5); Player p1 = new Player(1,5); pgs.addPlayer(p0); pgs.addPlayer(p1);  Unit r0 = new Unit(-1,resourceType,0,0, 10); Unit r1 = new Unit(-1,resourceType,7,7, 10); pgs.addUnit(r0); pgs.addUnit(r1);  Unit u0 = new Unit(0,baseType,2,1,0); Unit u1 = new Unit(1,baseType,5,6,0); pgs.addUnit(u0); pgs.addUnit(u1);  Unit w0 = new Unit(0,workerType,1,1,0); Unit w1 = new Unit(1,workerType,6,6,0); pgs.addUnit(w0); pgs.addUnit(w1);  Unit b0 = new Unit(0,barracksType,4,0,0); Unit b1 = new Unit(1,barracksType,3,7,0); pgs.addUnit(b0); pgs.addUnit(b1);  return pgs; } 	0	0	0	0	0	1
public static PhysicalGameState melee12x12Mixed12() { PhysicalGameState pgs = new PhysicalGameState(12,12);  Player p0 = new Player(0,0); Player p1 = new Player(1,0); pgs.addPlayer(p0); pgs.addPlayer(p1);  pgs.addUnit(new Unit(0,lightType,2,1)); pgs.addUnit(new Unit(0,lightType,2,2)); pgs.addUnit(new Unit(0,lightType,2,3)); pgs.addUnit(new Unit(0,lightType,2,4)); pgs.addUnit(new Unit(0,heavyType,1,1)); pgs.addUnit(new Unit(0,heavyType,1,2)); pgs.addUnit(new Unit(0,heavyType,1,3)); pgs.addUnit(new Unit(0,heavyType,1,4)); pgs.addUnit(new Unit(0,rangedType,0,1)); pgs.addUnit(new Unit(0,rangedType,0,2)); pgs.addUnit(new Unit(0,rangedType,0,3)); pgs.addUnit(new Unit(0,rangedType,0,4));  pgs.addUnit(new Unit(1,lightType,9,7)); pgs.addUnit(new Unit(1,lightType,9,8)); pgs.addUnit(new Unit(1,lightType,9,9)); pgs.addUnit(new Unit(1,lightType,9,10)); pgs.addUnit(new Unit(1,heavyType,10,7)); pgs.addUnit(new Unit(1,heavyType,10,8)); pgs.addUnit(new Unit(1,heavyType,10,9)); pgs.addUnit(new Unit(1,heavyType,10,10)); pgs.addUnit(new Unit(1,rangedType,11,7)); pgs.addUnit(new Unit(1,rangedType,11,8)); pgs.addUnit(new Unit(1,rangedType,11,9)); pgs.addUnit(new Unit(1,rangedType,11,10));  return pgs; } 	0	0	0	0	0	1
public static PhysicalGameState basesWorkers8x8() { PhysicalGameState pgs = new PhysicalGameState(8,8);  Player p0 = new Player(0,5); Player p1 = new Player(1,5); pgs.addPlayer(p0); pgs.addPlayer(p1);  Unit r0 = new Unit(-1,resourceType,0,0, 20); Unit r1 = new Unit(-1,resourceType,7,7, 20); pgs.addUnit(r0); pgs.addUnit(r1);  Unit u0 = new Unit(0,baseType,2,1,0); Unit u1 = new Unit(1,baseType,5,6,0); pgs.addUnit(u0); pgs.addUnit(u1);  Unit w0 = new Unit(0,workerType, 1,1,0); Unit w1 = new Unit(1,workerType,6,6,0); pgs.addUnit(w0); pgs.addUnit(w1);  return pgs; } 	0	0	0	0	0	1
public static PhysicalGameState melee16x16Mixed12() { PhysicalGameState pgs = new PhysicalGameState(16,16);  Player p0 = new Player(0,0); Player p1 = new Player(1,0); pgs.addPlayer(p0); pgs.addPlayer(p1);  pgs.addUnit(new Unit(0,lightType,2,1)); pgs.addUnit(new Unit(0,lightType,2,2)); pgs.addUnit(new Unit(0,lightType,2,3)); pgs.addUnit(new Unit(0,lightType,2,4)); pgs.addUnit(new Unit(0,heavyType,1,1)); pgs.addUnit(new Unit(0,heavyType,1,2)); pgs.addUnit(new Unit(0,heavyType,1,3)); pgs.addUnit(new Unit(0,heavyType,1,4)); pgs.addUnit(new Unit(0,rangedType,0,1)); pgs.addUnit(new Unit(0,rangedType,0,2)); pgs.addUnit(new Unit(0,rangedType,0,3)); pgs.addUnit(new Unit(0,rangedType,0,4));  pgs.addUnit(new Unit(1,lightType,13,11)); pgs.addUnit(new Unit(1,lightType,13,12)); pgs.addUnit(new Unit(1,lightType,13,13)); pgs.addUnit(new Unit(1,lightType,13,14)); pgs.addUnit(new Unit(1,heavyType,14,11)); pgs.addUnit(new Unit(1,heavyType,14,12)); pgs.addUnit(new Unit(1,heavyType,14,13)); pgs.addUnit(new Unit(1,heavyType,14,14)); pgs.addUnit(new Unit(1,rangedType,15,11)); pgs.addUnit(new Unit(1,rangedType,15,12)); pgs.addUnit(new Unit(1,rangedType,15,13)); pgs.addUnit(new Unit(1,rangedType,15,14));  return pgs; } 	0	0	0	0	0	1
public static PhysicalGameState basesWorkers16x16() { PhysicalGameState pgs = new PhysicalGameState(16,16);  Player p0 = new Player(0,5); Player p1 = new Player(1,5); pgs.addPlayer(p0); pgs.addPlayer(p1);  Unit r0 = new Unit(-1,resourceType,0,0, 25); Unit r1 = new Unit(-1,resourceType,0,1, 25); Unit r2 = new Unit(-1,resourceType,15,14, 25); Unit r3 = new Unit(-1,resourceType,15,15, 25); pgs.addUnit(r0); pgs.addUnit(r1); pgs.addUnit(r2); pgs.addUnit(r3);  Unit u0 = new Unit(0,baseType,2,2,0); Unit u1 = new Unit(1,baseType,13,13,0); pgs.addUnit(u0); pgs.addUnit(u1);  Unit w0 = new Unit(0,workerType,1,1,0); Unit w1 = new Unit(1,workerType,14,14,0); pgs.addUnit(w0); pgs.addUnit(w1);  return pgs; } 	0	0	0	0	0	1
public static PhysicalGameState basesWorkers12x12() { PhysicalGameState pgs = new PhysicalGameState(12,12);  Player p0 = new Player(0,5); Player p1 = new Player(1,5); pgs.addPlayer(p0); pgs.addPlayer(p1);  Unit r0 = new Unit(-1,resourceType,0,0, 20); Unit r1 = new Unit(-1,resourceType,1,0, 20); Unit r2 = new Unit(-1,resourceType,11,11, 20); Unit r3 = new Unit(-1,resourceType,10,11, 20); pgs.addUnit(r0); pgs.addUnit(r1); pgs.addUnit(r2); pgs.addUnit(r3);  Unit u0 = new Unit(0,baseType,1,2,0); Unit u1 = new Unit(1,baseType,10,9,0); pgs.addUnit(u0); pgs.addUnit(u1);  Unit w0 = new Unit(0,workerType, 1,1,0); Unit w1 = new Unit(1,workerType,10,10,0); pgs.addUnit(w0); pgs.addUnit(w1);  return pgs; } 	0	0	0	0	0	1
"@Override public ODistributedResponse send2Nodes(final ODistributedRequest iRequest, final Collection<String> iClusterNames, final Collection<String> iNodes, final ODistributedRequest.EXECUTION_MODE iExecutionMode) { checkForServerOnline(iRequest);  final String databaseName = iRequest.getDatabaseName();  if (iNodes.isEmpty()) { ODistributedServerLog.error(this, getLocalNodeName(), null, DIRECTION.OUT, ""No nodes configured for database '%s' request: %s"", databaseName, iRequest); throw new ODistributedException(""No nodes configured for partition '"" + databaseName + ""' request: "" + iRequest); }  final ODistributedConfiguration cfg = manager.getDatabaseConfiguration(databaseName);  // TODO: REALLY STILL MATTERS THE NUMBER OF THE QUEUES? final OPair<String, IQueue>[] reqQueues = getRequestQueues(databaseName, iNodes, iRequest.getTask());  iRequest.setSenderNodeName(getLocalNodeName());  final int onlineNodes = getOnlineNodes(iRequest, iNodes, databaseName, reqQueues);  final int quorum = calculateQuorum(iRequest, iClusterNames, cfg, onlineNodes, iExecutionMode);  final int queueSize = iNodes.size(); int expectedSynchronousResponses = onlineNodes;  final boolean groupByResponse; if (iRequest.getTask().getResultStrategy() == OAbstractRemoteTask.RESULT_STRATEGY.UNION) { expectedSynchronousResponses = onlineNodes; groupByResponse = false; } else { groupByResponse = true; }  final boolean waitLocalNode = waitForLocalNode(cfg, iClusterNames, iNodes);  // CREATE THE RESPONSE MANAGER final ODistributedResponseManager currentResponseMgr = new ODistributedResponseManager(manager, iRequest, iNodes, expectedSynchronousResponses, quorum, waitLocalNode, iRequest.getTask().getSynchronousTimeout(expectedSynchronousResponses), iRequest.getTask().getTotalTimeout(queueSize), groupByResponse);  final long timeout = OGlobalConfiguration.DISTRIBUTED_QUEUE_TIMEOUT.getValueAsLong();  final int queueMaxSize = OGlobalConfiguration.DISTRIBUTED_QUEUE_MAXSIZE.getValueAsInteger();  try { requestLock.lock(); try { // LOCK = ASSURE MESSAGES IN THE QUEUE ARE INSERTED SEQUENTIALLY AT CLUSTER LEVEL // BROADCAST THE REQUEST TO ALL THE NODE QUEUES  // TODO: CAN I MOVE THIS OUTSIDE? iRequest.setId(msgService.getMessageIdCounter().getAndIncrement());  if (ODistributedServerLog.isDebugEnabled()) ODistributedServerLog.debug(this, getLocalNodeName(), iNodes.toString(), DIRECTION.OUT, ""sending request %s"", iRequest);  // TODO: CAN I MOVE THIS OUTSIDE? msgService.registerRequest(iRequest.getId(), currentResponseMgr);  for (OPair<String, IQueue> entry : reqQueues) { final IQueue queue = entry.getValue();  if (queue != null) { if (queueMaxSize > 0 && queue.size() > queueMaxSize) { ODistributedServerLog.warn(this, getLocalNodeName(), iNodes.toString(), DIRECTION.OUT, ""queue has too many messages (%d), treating the node as in stall: trying to restart it..."", queue.size()); queue.clear();  manager.disconnectNode(entry.getKey());  } else { // SEND THE MESSAGE queue.offer(iRequest, timeout, TimeUnit.MILLISECONDS); } } }  } finally { requestLock.unlock(); }  if (ODistributedServerLog.isDebugEnabled()) ODistributedServerLog.debug(this, getLocalNodeName(), iNodes.toString(), DIRECTION.OUT, ""sent request %s"", iRequest);  Orient.instance().getProfiler().updateCounter(""distributed.db."" + databaseName + "".msgSent"", ""Number of replication messages sent from current node"", +1, ""distributed.db.*.msgSent"");  return waitForResponse(iRequest, currentResponseMgr);  } catch (Exception e) { throw OException.wrapException(new ODistributedException(""Error on executing distributed request ("" + iRequest + "") against database '"" + databaseName + (iClusterNames != null ? ""."" + iClusterNames : """") + ""' to nodes "" + iNodes), e); } } "	0	0	0	0	0	1
public ByteBuffer getRequestBody() throws KrbException { return null; } 	0	0	0	0	0	1
public boolean isToken() { return isToken; } 	0	0	0	0	0	1
"@Test public void authenticationFailed() throws Exception { mvc.perform(formLogin().user(""user"").password(""invalid"")) .andExpect(status().isMovedTemporarily()) .andExpect(redirectedUrl(""/login?error"")).andExpect(unauthenticated()); } "	0	0	0	0	0	1
"@Test public void authenticationSuccess() throws Exception { mvc.perform( formLogin(""/authenticate"").user(""user"", ""user"").password(""pass"", ""password"")).andExpect(status().isMovedTemporarily()) .andExpect(redirectedUrl(""/"")) .andExpect(authenticated().withUsername(""user"")); } "	0	0	0	0	0	1
"public boolean onOptionsItemSelected(MenuItem item){ int id = item.getItemId();  switch(id) {    case R.id.living: Toast.makeText(this, """", Toast.LENGTH_LONG).show();  break; case R.id.kitchen:  Toast.makeText(this, """", Toast.LENGTH_LONG).show(); break; case R.id.house:  Intent HouseSetting = new Intent(HousesettingDetail.this, HouseSetting.class); startActivityForResult(HouseSetting, 5);  break; case R.id.car:  Toast.makeText(this, """", Toast.LENGTH_LONG).show(); break; } return true; } "	0	0	0	0	0	1
private Formula allocate(Formula truth) { return proof.getHeap().allocate(truth); } 	0	0	0	0	0	1
private void onBindNotice(@NonNull MessageViewHolder holder, @NonNull Message message) { applyStyle(holder, plainStyle, highlightStyle, message.flags.Highlight); holder.content.setText(context.themeUtil().translations.formatAction( formatNick(message.sender, false), helper.formatIrcMessage(message.content) )); } 	0	0	0	0	0	1
public void execute() throws IOException { authService.authenticateInJira();  MetaInfo metaInfo = metaInfoRetrievalService.retrieve();  List<TestCase> testCases = testCaseResolutionService.resolveTestCases(); List<Issue> issues = jiraService.getTestIssues();  zephyrService.mapTestCasesToIssues(testCases, issues);  for (TestCase testCase : testCases) { if (testCase.getId() == null) { jiraService.createTestIssue(testCase); zephyrService.addStepsToTestIssue(testCase); jiraService.linkToStory(testCase); } }  zephyrService.linkExecutionsToTestCycle(metaInfo, testCases); zephyrService.updateExecutionStatuses(testCases);  } 	0	0	0	0	0	1
"@JsonProperty(""dateOfEntryUtcOffset"") public Integer getDateOfEntryUtcOffset() { return dateOfEntryUtcOffset; } "	0	0	0	0	0	1
"private Channel retrieveChannel(final long channelId, final Map<String, Object> properties) { checkCondition(channelId <= 0, s_message.channelIdNotLessThanZero()); checkNull(properties, s_message.propertiesNonNull());  s_logger.debug(s_message.retrievingChannel()); String channelName = null; ChannelType channelType = null; DataType dataType = null; Channel channel = null; final Map<String, Object> channelConfig = CollectionUtil.newConcurrentHashMap();  // All key names present is the properties final String channelKeyContainment = CHANNEL_PROPERTY_POSTFIX.value() + CHANNEL_PROPERTY_PREFIX.value() + CHANNEL_PROPERTY_POSTFIX.value(); final String channelKeyFormat = channelId + channelKeyContainment;  if (properties != null) { final String channelNamePropertyKey = channelKeyFormat + NAME.value(); if (properties.containsKey(channelNamePropertyKey)) { channelName = (String) properties.get(channelNamePropertyKey); } final String channelTypePropertyKey = channelKeyFormat + TYPE.value(); channelType = this.getChannelType(properties, channelTypePropertyKey); final String channelValueTypePropertyKey = channelKeyFormat + VALUE_TYPE.value(); dataType = this.getDataType(properties, channelValueTypePropertyKey); for (final Map.Entry<String, Object> entry : properties.entrySet()) { final String key = entry.getKey(); final String value = entry.getValue().toString(); final List<String> strings = Arrays.asList(key.split(""\\"" + CHANNEL_PROPERTY_POSTFIX.value())); if ((strings.size() > 2) && key.startsWith(String.valueOf(channelId)) && DRIVER_PROPERTY_POSTFIX.value().equals(strings.get(2))) { final String driverSpecificPropertyKey = DRIVER_PROPERTY_POSTFIX.value() + CHANNEL_PROPERTY_POSTFIX.value(); final String cKey = key .substring(key.indexOf(driverSpecificPropertyKey) + driverSpecificPropertyKey.length()); channelConfig.put(cKey, value); } } } if ((channelType != null) && (dataType != null)) { channel = new Channel(channelId, channelName, channelType, dataType, channelConfig); } s_logger.debug(s_message.retrievingChannelDone()); return channel; } "	0	0	0	0	0	1
"public String getFullMessage() { return getFile() + "";"" + getValidationName() + "";message = "" + getMessage() + ""\n""; } "	0	0	0	0	0	1
"@Override public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException { // Check if the build result set from a previous build step. // A null build result indicates that the build is still ongoing and we're // likely being run as a build step by the ""Any Build Step Plugin"". Result buildResult = build.getResult(); if (buildResult != null && buildResult.isWorseOrEqualTo(Result.FAILURE)) { return false; }  EnvVars env =  build.getEnvironment(listener); Map<String, String> parameters = build.getBuildVariables();  log = listener.getLogger();  // Artifacts location for this build on master. FilePath artifactsDir = new FilePath(build.getArtifactsDir());  // Workspace (potentially remote if using slave). FilePath workspace = build.getWorkspace();  // Run root location for this build on master. FilePath root = new FilePath(build.getRootDir());  // Validate user selection & input values. boolean isValid = validateConfiguration() && validateTestConfiguration(); if (!isValid) { writeToLog(""Invalid configuration.""); return false; }  // Create & configure the AWSDeviceFarm client. AWSDeviceFarm adf = getAWSDeviceFarm() .withLogger(listener.getLogger()) .withWorkspace(workspace) .withArtifactsDir(artifactsDir) .withEnv(env);  if (adf == null) { writeToLog(""ADF API is null!""); return false; }  try { // Accept 'ADF_PROJECT' build parameter as an overload from job configuration. String projectNameParameter = parameters.get(""AWSDEVICEFARM_PROJECT""); if (projectNameParameter != null && !projectNameParameter.isEmpty()) { writeToLog(String.format(""Using overloaded project '%s' from build parameters"", projectNameParameter)); projectName = projectNameParameter; }  // check for Unmetered Devices on Account if (isRunUnmetered) { String os = adf.getOs(appArtifact); int unmeteredDeviceCount = adf.getUnmeteredDevices(os); if (unmeteredDeviceCount <= 0) { throw new AWSDeviceFarmException(String.format(""Your account does not have unmetered %s devices. Please change "" + ""your build settings to run on metered devices."", os)); } }  // Get AWS Device Farm project from user provided name. writeToLog(String.format(""Using Project '%s'"", projectName)); Project project = adf.getProject(projectName);  // Accept 'ADF_DEVICE_POOL' build parameter as an overload from job configuration. String devicePoolParameter = parameters.get(""AWSDEVICEFARM_DEVICE_POOL""); if (devicePoolParameter != null) { writeToLog(String.format(""Using overloaded device pool '%s' from build parameters"", devicePoolParameter)); devicePoolName = devicePoolParameter; }  // Get AWS Device Farm device pool from user provided name. writeToLog(String.format(""Using DevicePool '%s'"", devicePoolName)); DevicePool devicePool = adf.getDevicePool(project, devicePoolName);  // Upload app. writeToLog(String.format(""Using App '%s'"", env.expand(appArtifact))); Upload appUpload = adf.uploadApp(project, appArtifact); String appArn = appUpload.getArn(); String appName = String.format(""%s (Jenkins)"", appUpload.getName());  // Upload test content. writeToLog(""Getting test to schedule.""); ScheduleRunTest testToSchedule = getScheduleRunTest(env, adf, project);  // Schedule test run. TestType testType = TestType.fromValue(testToSchedule.getType()); writeToLog(String.format(""Scheduling '%s' run '%s'"", testType, appName)); ScheduleRunConfiguration configuration = getScheduleRunConfiguration(isRunUnmetered); ScheduleRunResult run = adf.scheduleRun(project.getArn(), appName, appArn, devicePool.getArn(), testToSchedule, configuration);  String runArn = run.getRun().getArn(); try { writeToLog(String.format(""View the %s run in the AWS Device Farm Console: %s"", testType, AWSDeviceFarmUtils.getRunUrlFromArn(runArn))); } catch (ArrayIndexOutOfBoundsException e) { writeToLog(String.format(""Could not parse project ID and run ID from run ARN: %s"", runArn)); }  // Attach AWS Device Farm action to poll periodically and update results UI. AWSDeviceFarmTestResultAction action = new AWSDeviceFarmTestResultAction(build, null, log); build.addAction(action);  // Wait for test result to complete will updating status periodically. writeToLog(""Waiting for test run to complete.""); action.waitForRunCompletion(adf, run); writeToLog(""Test run is complete."");   // Download results archive and store it. if (storeResults) { // Create results storage directory which will contain the unzip logs/screenshots pulled from AWS Device Farm. FilePath resultsDir = new FilePath(artifactsDir, ""AWS Device Farm Results""); resultsDir.mkdirs(); writeToLog(String.format(""Storing AWS Device Farm results in directory %s"", resultsDir));  Map<String, FilePath> jobs = getJobs(adf, run, resultsDir); Map<String, FilePath> suites = getSuites(adf, run, jobs);  writeToLog(""Downloading AWS Device Farm results archive...""); // Iterating over all values in the Enum. for (ArtifactCategory category : new ArrayList<ArtifactCategory>(Arrays.asList(ArtifactCategory.values()))) { ListArtifactsResult result = adf.listArtifacts(run.getRun().getArn(), category); for (Artifact artifact : result.getArtifacts()) { String arn = artifact.getArn().split("":"")[6]; String semiSuiteArn = arn.substring(0, arn.lastIndexOf(""/"")); String suiteArn = semiSuiteArn.substring(0, semiSuiteArn.lastIndexOf(""/"")); String id = arn.substring(arn.lastIndexOf(""/"") + 1); String extension = artifact.getExtension().replaceFirst(""^\\."", """"); FilePath artifactFilePath = new FilePath(suites.get(suiteArn), String.format(""%s-%s.%s"", artifact.getName(), id, extension)); URL url = new URL(artifact.getUrl()); artifactFilePath.write().write(IOUtils.toByteArray(url.openStream())); } }  writeToLog(String.format(""Results archive saved in %s"", artifactsDir.getName())); }  // Set Jenkins build result based on AWS Device Farm test result. build.setResult(action.getBuildResult()); } catch (AWSDeviceFarmException e) { writeToLog(e.getMessage()); return false; }  return true; } "	0	0	0	0	0	1
"@Test public void topLevelAspectDoesNotExist() throws Exception { scratch.file(""test/aspect.bzl"", """"); scratch.file(""test/BUILD"", ""java_library(name = 'xxx')"");  reporter.removeHandler(failFastHandler); try { AnalysisResult result = update(ImmutableList.of(""test/aspect.bzl%MyAspect""), ""//test:xxx""); assertThat(keepGoing()).isTrue(); assertThat(result.hasError()).isTrue(); } catch (ViewCreationFailedException e) { // expect to fail. } assertContainsEvent(""MyAspect from //test:aspect.bzl is not an aspect""); } "	0	0	0	0	0	1
"public static String encodeURIComponent(String s) { String result;  try { result = URLEncoder.encode(s, ""UTF-8"") .replaceAll(""\\+"", ""%20"") .replaceAll(""\\%21"", ""!"") .replaceAll(""\\%27"", ""'"") .replaceAll(""\\%28"", ""("") .replaceAll(""\\%29"", "")"") .replaceAll(""\\%7E"", ""~""); } catch (UnsupportedEncodingException e) { result = s; }  return result; } "	0	0	0	0	0	1
private FrameworkMethod createFrameworkMethod(final IMethodInvocation invocation) { return new FrameworkMethod(invocation.getMethod().getReflection()) { @Override public String getName() { return invocation.getIteration().getDescription().getMethodName(); } }; } 	0	0	0	0	0	1
"public String getUrl(String language) { if (url == null) { return null; } else { return url.replace(""$lang"", language); } } "	0	0	0	0	0	1
public Date getDateUploaded() { return dateUploaded; } 	0	0	0	0	0	1
"@Override public ScanResult scanFilmography(Person person) { FilmographyInfos  filmographyInfos = null; try { boolean throwTempError = configServiceWrapper.getBooleanProperty(""allocine.throwError.tempUnavailable"", Boolean.TRUE); String allocineId = getPersonId(person, throwTempError);  if (StringUtils.isBlank(allocineId)) { LOG.debug(""Allocine id not available '{}'"", person.getIdentifier()); return ScanResult.MISSING_ID; }  filmographyInfos = allocineApiWrapper.getFilmographyInfos(allocineId, throwTempError); } catch (TemporaryUnavailableException ex) { // check retry int maxRetries = configServiceWrapper.getIntProperty(""allocine.maxRetries.filmography"", 0); if (person.getRetries() < maxRetries) { return ScanResult.RETRY; } }  if (filmographyInfos == null || filmographyInfos.isNotValid() || CollectionUtils.isEmpty(filmographyInfos.getParticipances())) { LOG.trace(""No filmography present for person '{}'"", person.getIdentifier()); return ScanResult.NO_RESULT; }  Set<FilmParticipation> newFilmography = new HashSet<>(); for (Participance participance : filmographyInfos.getParticipances()) { FilmParticipation filmo = new FilmParticipation(); filmo.setSourceDb(SCANNER_ID); filmo.setSourceDbId(String.valueOf(participance.getCode())); filmo.setPerson(person);  if (participance.isActor()) { filmo.setJobType(JobType.ACTOR); filmo.setRole(StringUtils.trimToNull(participance.getRole())); } else if (participance.isDirector()) { filmo.setJobType(JobType.DIRECTOR); } else if (participance.isWriter()) { filmo.setJobType(JobType.WRITER); } else if (participance.isCamera()) { filmo.setJobType(JobType.CAMERA); } else if (participance.isProducer()) { filmo.setJobType(JobType.PRODUCER); } else { // no entries with unknown job type continue; }  if (participance.isTvShow()) { filmo.setParticipationType(ParticipationType.SERIES); filmo.setYear(participance.getYearStart()); filmo.setYearEnd(participance.getYearEnd()); } else { filmo.setParticipationType(ParticipationType.MOVIE); filmo.setYear(participance.getYear()); }  filmo.setTitle(participance.getTitle()); filmo.setTitleOriginal(StringUtils.trimToNull(participance.getOriginalTitle())); filmo.setDescription(StringUtils.trimToNull(participance.getSynopsisShort())); filmo.setReleaseDate(MetadataTools.parseToDate(participance.getReleaseDate())); String releaseCountryCode = localeService.findCountryCode(StringUtils.trimToNull(participance.getReleaseState())); filmo.setReleaseCountryCode(releaseCountryCode); newFilmography.add(filmo); }  person.setNewFilmography(newFilmography);  return ScanResult.OK; } "	0	0	0	0	0	1
"public void copyLine(BevolkingsregisterFlowState bevolkingsregisterFlow, int person, int lineToCopy) throws AkteException { List<Person> b2 = bevolkingsregisterFlow.getB2();  if (person > b2.size()) { throw new AkteException(""The person in question is not created yet.""); } if (lineToCopy > b2.size()) { throw new AkteException(""The line to copy from is not created yet.""); }  Person to = b2.get(person - 1); Person from = b2.get(lineToCopy - 1);  to.setFirstName(from.getFirstName()); to.setFamilyName(from.getFamilyName()); to.setDayOfBirth(from.getDayOfBirth()); to.setMonthOfBirth(from.getMonthOfBirth()); to.setYearOfBirth(from.getYearOfBirth()); to.setPlaceOfBirth(from.getPlaceOfBirth()); to.setSex(from.getSex()); to.setNationality(from.getNationality());  for (PersonDynamic.Type type : PersonDynamic.Type.values()) { switch (type) { case BEROEP: case KERKGENOOTSCHAP: case BURGELIJKE_STAND: Map<Integer, List<PersonDynamic>> b3 = bevolkingsregisterFlow.getB3ForType(type); List<PersonDynamic> b3To = b3.get(person); List<PersonDynamic> b3From = b3.get(lineToCopy); if (b3To.size() > 0) { if (b3From.isEmpty()) { b3From.add(createPersonDynamic(bevolkingsregisterFlow, to, type, 1)); } PersonDynamic personDynamicTo = b3To.get(0); PersonDynamic personDynamicFrom = b3From.get(0); BeanUtils.copyProperties(personDynamicFrom, personDynamicTo, ""RecordID"", ""keyToRegistrationPersons""); } } } } "	0	0	0	0	0	1
"@Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); viewModel.setCallback(this); Disposable disposable = viewModel.getContributors() .observeOn(AndroidSchedulers.mainThread()) .subscribe( this::renderContributors, throwable -> Timber.tag(TAG).e(throwable, ""Failed to show sessions."") ); compositeDisposable.add(disposable); } "	0	0	0	0	0	1
@Override public int nextPacketID(String clientID) { Set<Integer> inFlightForClient = this.m_inFlightIds.get(clientID); if (inFlightForClient == null) { int nextPacketId = 1; inFlightForClient = new HashSet<>(); inFlightForClient.add(nextPacketId); this.m_inFlightIds.put(clientID, inFlightForClient); return nextPacketId; } int maxId = Collections.max(inFlightForClient); int nextPacketId = (maxId + 1) % 0xFFFF; inFlightForClient.add(nextPacketId); return nextPacketId; } 	0	0	0	0	0	1
@Override protected void unregisterForAtomEvents(AtomEventFramework eventFramework) { throw new UnsupportedOperationException(); } 	0	0	0	0	0	1
@Override public UnweightedArithmeticRule visitUnweighted_arithmetic_rule(Unweighted_arithmetic_ruleContext ctx) { return visitChildren(ctx); } 	0	0	0	0	0	1
"@SmallTest public void testHello() throws Throwable { final String expectKey = ""你好""; Map<String, String> params = new HashMap<String, String>(); params.put(""x:foo"", ""fooval""); final UploadOptions opt = new UploadOptions(params, null, true, null, null);  uploadManager.put(""hello"".getBytes(), expectKey, TestConfig.token, new UpCompletionHandler() { public void complete(String k, ResponseInfo rinfo, JSONObject response) { Log.i(""qiniutest"", k + rinfo); key = k; info = rinfo; resp = response; signal.countDown(); } }, opt);   try { signal.await(60, TimeUnit.SECONDS); // wait for callback } catch (InterruptedException e) { e.printStackTrace(); } Assert.assertEquals(expectKey, key); Assert.assertTrue(info.isOK()); Assert.assertNotNull(info.reqId); Assert.assertNotNull(resp); } "	0	0	0	0	0	1
private void resetLoops() { this.currentLoop = numLoops; } 	0	0	0	0	0	1
public synchronized static GobblinMetrics get(String id, MetricContext parentContext) { return get(id, parentContext, Lists.<Tag<?>>newArrayList()); } 	0	0	0	0	0	1
"@Override public void addBody(Map objectModel, Division div) throws WingException, SQLException {  Division wfdiv = div.addDivision(""unpublished_items"", ""well well-light"");  wfdiv.setHead(""WORKFLOW ITEMS""); wfdiv.addPara(null, ""alert alert-info"").addContent(""Following items are currently in workflow mode i.e. waiting for an approval. You can view the details of the item by clicking the itemID"");  Table wftable = wfdiv.addTable(""workspace_items"", 1, 5);  Row wfhead = wftable.addRow(Row.ROLE_HEADER);  wfhead.addCellContent(""WORKFLOW ID""); wfhead.addCellContent(""ITEM ID""); wfhead.addCellContent(""COLLECTION""); wfhead.addCellContent(""CURRENT STATE""); wfhead.addCellContent(""ASSIGNED TO""); wfhead.addCellContent(""LAST MODIFIED"");  String []row_classes = {""success"", ""error"", ""warning"", ""error"", ""warning"", ""error"", ""warning"", ""success"", ""error""};  for(TableRow dbrow : getWorkflowItems()) { int state = dbrow.getIntColumn(""state""); Row wsrow = wftable.addRow(null, Row.ROLE_DATA, row_classes[state]); wsrow.addCell().addContent(dbrow.getIntColumn(""workflow_id"")); int itemID = dbrow.getIntColumn(""item_id""); wsrow.addCell().addXref(contextPath + ""/admin/item?cp=1&identifier="" + itemID).addContent(itemID); wsrow.addCell().addContent(dbrow.getStringColumn(""collection_name"")); wsrow.addCell().addHighlight(getWorkflowStateClass(state)).addContent(getWorkflowStateMessage(state)); String owner = dbrow.getStringColumn(""owner""); if(owner!=null) { wsrow.addCellContent(owner); } else { wsrow.addCellContent(""task pending""); } wsrow.addCellContent(dbrow.getDateColumn(""last_modified"").toString()); }  Division wsdiv = div.addDivision(""workspace_items"", ""well well-light"");  wsdiv.setHead(""WORKSPACE ITEMS""); wsdiv.addPara(null, ""alert alert-info"").addContent(""Following items are currently in workspace mode i.e. in the process of submission. You can view the details of the item by clicking the itemID"");  Table wstable = wsdiv.addTable(""workspace_items"", 1, 5);  Row wshead = wstable.addRow(Row.ROLE_HEADER);  wshead.addCellContent(""WORKSPACE ID""); wshead.addCellContent(""ITEM ID""); wshead.addCellContent(""STAGE REACHED""); wshead.addCellContent(""SUBMITTER EMAIL""); wshead.addCellContent(""REJECTED""); wshead.addCellContent(""LAST MODIFIED"");  for(TableRow dbrow : getWorkspaceItems()) { int page_reached = dbrow.getIntColumn(""page_reached""); Row wsrow = wstable.addRow(null, Row.ROLE_DATA, page_reached == Integer.MAX_VALUE ? ""error"" : ""warning""); wsrow.addCell().addContent(dbrow.getIntColumn(""workspace_item_id"")); int itemID = dbrow.getIntColumn(""item_id""); wsrow.addCell().addXref(contextPath + ""/admin/item?cp=1&identifier="" + itemID).addContent(itemID); wsrow.addCell().addContent(dbrow.getIntColumn(""stage_reached"")); wsrow.addCellContent(dbrow.getStringColumn(""submitter"")); if(page_reached == Integer.MAX_VALUE) { wsrow.addCell().addHighlight(""label label-important"").addContent(""Rejected""); } else { wsrow.addCell().addHighlight(""label label-warning"").addContent(""Not Submitted""); } wsrow.addCellContent(dbrow.getDateColumn(""last_modified"").toString()); }   } "	0	0	0	0	0	1
"private Object[] getConvertedParameters(HttpServerExchange exchange) throws Exception { Map<String, String> queryParameters = getRequestParameters(exchange); Object [] parameters = new Object[this.parameterCount];  int index = 0; for (Map.Entry<String, Class<?>> entry : this.methodParameters.entrySet()) { String key = entry.getKey(); Class<?> clazz = entry.getValue();  if ((Form.class).equals(clazz)) { parameters[index] = getForm(exchange); } else if ((Body.class).equals(clazz)) { parameters[index] = getBody(exchange); } else if ((Authentication.class).equals(clazz)) { parameters[index] = this.authentication; } else if ((Session.class).equals(clazz)) { parameters[index] = this.session; } else if ((Flash.class).equals(clazz)) { parameters[index] = getFlash(exchange); } else if ((String.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? """" : queryParameters.get(key); } else if ((Integer.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Integer.valueOf(0) : Integer.valueOf(queryParameters.get(key)); } else if ((int.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Integer.valueOf(0) : Integer.valueOf(queryParameters.get(key)); } else if ((Double.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Double.valueOf(0) : Double.valueOf(queryParameters.get(key)); } else if ((double.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Double.valueOf(0) : Double.valueOf(queryParameters.get(key)); } else if ((Float.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Float.valueOf(0) : Float.valueOf(queryParameters.get(key)); } else if ((float.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Float.valueOf(0) : Float.valueOf(queryParameters.get(key)); } else if ((Long.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Long.valueOf(0) : Long.valueOf(queryParameters.get(key)); } else if ((long.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Long.valueOf(0) : Long.valueOf(queryParameters.get(key)); } else if ((ContentType.APPLICATION_JSON.toString()).equals(exchange.getRequestHeaders().get(Headers.CONTENT_TYPE).element())) { if (this.mapper == null) { this.mapper = JsonFactory.create(); } parameters[index] = this.mapper.readValue(getBody(exchange).asString(), clazz); }  index++; }  return parameters; } "	0	0	0	0	0	1
"public static UriMatcher buildUriMatcher() { final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH); final String authority = ScheduleContract.CONTENT_AUTHORITY;  matcher.addURI(authority, ScheduleContract.PATH_SCHEDULE, SCHEDULE); matcher.addURI(authority, ScheduleContract.PATH_SCHEDULE + ""/#"", SCHEDULE_WITH_ID);  return matcher; } "	0	0	0	0	0	1
"private void sendNotification(String msg) { Log.d(""AlarmService"", ""Preparing to send notification...: "" + msg); alarmNotificationManager = (NotificationManager) this .getSystemService(Context.NOTIFICATION_SERVICE);  PendingIntent contentIntent = PendingIntent.getActivity(this, 0, new Intent(this, Alarm.class), 0);  NotificationCompat.Builder alarmNotificationBuilder = new NotificationCompat.Builder( this).setContentTitle(""Alarm"").setSmallIcon(R.mipmap.ic_launcher) .setStyle(new NotificationCompat.BigTextStyle().bigText(msg)) .setContentText(msg);   alarmNotificationBuilder.setContentIntent(contentIntent); alarmNotificationManager.notify(1, alarmNotificationBuilder.build()); Log.d(""AlarmService"", ""Notification sent.""); } "	0	0	0	0	0	1
"@Test public void loggedInUserShouldNotSeeWorkInProgressRecords() throws Exception { when(repository.findByName(""Pedr"")).thenReturn(Arrays.asList( anEmployeeRecord().withUsername(""Pedr"").isWorkInProgress(true).build(), anEmployeeRecord().withUsername(""Pedr"").isWorkInProgress(false).build())); Principal principle = Mockito.mock(Principal.class); when(principle.getName()).thenReturn(""Pedr""); List<EmployeeRecord> employeeRecordsForLoggedInUser = employeeController.getEmployeeRecordsForLoggedInUser(principle);  assertThat(employeeRecordsForLoggedInUser.size(), is(1)); assertFalse(employeeRecordsForLoggedInUser.get(0).isWorkInProgress()); } "	0	0	0	0	0	1
public static <T extends Object> T getSpringBean(final Class<T> beanClass) { return getSpringBean(SpringUtilConstants.CONTEXT_DEFINITION, beanClass); } 	0	0	0	0	0	1
"public void initProperties() { String propertiesPathTemp; try { propertiesPathTemp = new File(""."").getCanonicalPath() + File.separator + ""properties"" + File.separator + getID() + "".properties""; } catch (IOException e) { propertiesPathTemp = null; context.getLogger().error(""Error while trying to build the propertiesPathTemp"", e); }  propertiesPath = propertiesPathTemp; File propertiesFile = new File(propertiesPath); if (!propertiesFile.exists()) try { propertiesFile.createNewFile(); } catch (IOException e) { context.getLogger().error(""Error while trying to create the new Properties file"", e); }  try { BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(propertiesFile), ""UTF8"")); try { properties.load(in); } catch (IOException e) { context.getLogger().error(""unable to load the InputStream for the PropertiesFile"",e); } } catch (FileNotFoundException | UnsupportedEncodingException e) { context.getLogger().error(""Error while trying to read Properties-File"", e); }  if (defaultPropertiesPath != null) { @SuppressWarnings(""unchecked"") Enumeration<String> keys = (Enumeration<String>)properties.propertyNames();  if (!keys.hasMoreElements()) { try { createDefaultPropertyFile(defaultPropertiesPath); } catch (IOException e) { context.getLogger().error(""Error while trying to copy the Default-Properties File"", e); }  if (new File(defaultPropertiesPath).exists() && !writeToPropertiesFile(defaultPropertiesPath)) return; reloadProperties(); } } } "	0	0	0	0	0	1
public static Gson getDeskClientGson() { return new GsonBuilder() .registerTypeAdapter(Date.class, new ISO8601DateAdapter()) .registerTypeAdapter(IOpportunityActivity.class, new OpportunityActivityAdapter()) .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES) .create(); } 	0	0	0	0	0	1
public int getApartmentNumber() { return apartmentNumber; } 	0	0	0	0	0	1
@Override public Data3D<Float> getLatestGaussianData() { return mag.get(0); } 	0	0	0	0	0	1
public void displayNormal(ImageView view, Gem gem) { view.setImage(gem.getImage()); } 	0	0	0	0	0	1
public long getScore() { return score; } 	0	0	0	0	0	1
public Integer getPayTypes() { return payTypes; } 	0	0	0	0	0	1
public Integer getCreatedAt() { return createdAt; } 	0	0	0	0	0	1
"public Citizen addCitizen(String fullName, String personalId, int gender, int birthDateDay, int birthDateMonth, int birthDateYear, String address, String cityCode, String districtCode, String wardCode, String cityName, String districtName, String wardName, String email, String telNo, long repositoryId, String sourceFileName, String mimeType, String title, InputStream inputStream, long size, ServiceContext serviceContext) throws SystemException, PortalException {  long citizenId = CounterLocalServiceUtil.increment(Citizen.class .getName());  Citizen citizen = citizenPersistence.create(citizenId);  Date now = new Date();  Date birthDate = DateTimeUtil.getDate(birthDateDay, birthDateMonth, birthDateYear);  PortletUtil.SplitName spn = PortletUtil.splitName(fullName);  Role roleDefault = null;  try { roleDefault = RoleLocalServiceUtil.getRole( serviceContext.getCompanyId(), WebKeys.CITIZEN_BUSINESS_ROLE_NAME); } catch (Exception e) { _log.info(""ROLE CITIZEN IS NULL""); }  boolean autoPassword = true; boolean autoScreenName = true; boolean sendEmail = false;  long[] groupIds = null; long[] organizationIds = null; long[] roleIds = null; long[] userGroupIds = null;  String password1 = null; String password2 = null; String screenName = null;  // add default role if (Validator.isNotNull(roleDefault)) { roleIds = new long[] { roleDefault.getRoleId() }; }  UserGroup userGroup = null; try { userGroup = UserGroupLocalServiceUtil.getUserGroup( serviceContext.getCompanyId(), PortletPropsValues.USERMGT_USERGROUP_NAME_CITIZEN); } catch (Exception e) { _log.warn(e.getMessage()); } if (userGroup == null) { userGroup = UserGroupLocalServiceUtil.addUserGroup( serviceContext.getUserId(), serviceContext.getCompanyId(), PortletPropsValues.USERMGT_USERGROUP_NAME_CITIZEN, StringPool.BLANK, serviceContext);  }  if (userGroup != null) { userGroupIds = new long[] { userGroup.getUserGroupId() }; } password1 = PwdGenerator.getPassword(); password2 = password1;  Role adminRole = RoleLocalServiceUtil.getRole( serviceContext.getCompanyId(), ""Administrator""); List<User> adminUsers = UserLocalServiceUtil.getRoleUsers(adminRole .getRoleId());  PrincipalThreadLocal.setName(adminUsers.get(0).getUserId()); PermissionChecker permissionChecker; try { permissionChecker = PermissionCheckerFactoryUtil.create(adminUsers .get(0)); PermissionThreadLocal.setPermissionChecker(permissionChecker);  serviceContext.setUserId(adminUsers.get(0).getUserId()); } catch (Exception e) { _log.error(e); }  User mappingUser = userService.addUserWithWorkflow( serviceContext.getCompanyId(), autoPassword, password1, password2, autoScreenName, screenName, email, 0L, StringPool.BLANK, LocaleUtil.getDefault(), spn.getFirstName(), spn.getMidName(), spn.getLastName(), 0, 0, (gender == 1), birthDateMonth, birthDateDay, birthDateYear, ""Citizen"", groupIds, organizationIds, roleIds, userGroupIds, new ArrayList<Address>(), new ArrayList<EmailAddress>(), new ArrayList<Phone>(), new ArrayList<Website>(), new ArrayList<AnnouncementsDelivery>(), sendEmail, serviceContext);  int status = WorkflowConstants.STATUS_INACTIVE;  mappingUser = userService.updateStatus(mappingUser.getUserId(), status);  String[] folderNames = new String[] { PortletConstants.DestinationRoot.CITIZEN.toString(), cityName, districtName, wardName, String.valueOf(mappingUser.getUserId()) };  String destination = PortletUtil.getDestinationFolder(folderNames);  serviceContext.setAddGroupPermissions(true); serviceContext.setAddGuestPermissions(true);  FileEntry fileEntry = null;  if (size > 0 && inputStream != null) { // Create person folder DLFolder dlFolder = DLFolderUtil.getTargetFolder( mappingUser.getUserId(), serviceContext.getScopeGroupId(), repositoryId, false, 0, destination, StringPool.BLANK, false, serviceContext);  fileEntry = DLAppServiceUtil.addFileEntry(repositoryId, dlFolder.getFolderId(), sourceFileName, mimeType, title, StringPool.BLANK, StringPool.BLANK, inputStream, size, serviceContext); }  citizen.setAccountStatus(PortletConstants.ACCOUNT_STATUS_REGISTERED); citizen.setAddress(address); citizen.setAttachFile(fileEntry != null ? fileEntry.getFileEntryId() : 0); citizen.setBirthdate(birthDate); citizen.setCityCode(cityCode); citizen.setCompanyId(serviceContext.getCompanyId()); citizen.setCreateDate(now); citizen.setDistrictCode(districtCode); citizen.setEmail(email); citizen.setFullName(fullName); citizen.setGender(gender); citizen.setGroupId(serviceContext.getScopeGroupId()); citizen.setMappingUserId(mappingUser.getUserId()); citizen.setModifiedDate(now); citizen.setPersonalId(personalId); citizen.setTelNo(telNo); citizen.setUserId(mappingUser.getUserId()); citizen.setWardCode(wardCode);  citizen.setUuid(PortalUUIDUtil.generate());  return citizenPersistence.update(citizen); } "	0	0	0	0	0	1
"private void executePythonScript2(Session ssnSession, String clusterName, String notebookTestFile, String notebook) throws JSchException, IOException, InterruptedException { String command; AckStatus status;  command = String.format(ScpCommands.runPythonCommand2, String.format(""/home/%s/%s"", ConfigPropertyValue.getClusterOsUser(), notebookTestFile), getBucketName()); LOGGER.info(""{}: Executing command {}..."",notebook, command);  ChannelExec runScript = SSHConnect.setCommand(ssnSession, command); status = SSHConnect.checkAck(runScript); LOGGER.info(""{}: Script execution status message {} and code {}"", notebook, status.getMessage(), status.getStatus()); assertTrue(status.isOk(), notebook + "": The python script execution wasn`t successful on : "" + clusterName);  LOGGER.info(""{}: Python script executed successfully "", notebook); } "	0	0	0	0	0	1
"private void addCallToClosure() { for (SwiftParameter parameter : getClosureParameters()) { int count = getClosureParameterTypes(parameter).size(); String name = parameter.getName(); String closureCall; String optional = MySwiftPsiUtil.containsOptionalOfType(parameter, SwiftTupleTypeElement.class) ? ""?"" : """"; if (count == 0) { closureCall = name + optional + ""()""; } else { closureCall = ""if let result = "" + createClosureResultName(name) + "" {""; closureCall += name + optional + ""(""; closureCall += IntStream.range(0, count).mapToObj(i -> ""result."" + i).collect(Collectors.joining("","")); closureCall += "") }""; } PsiElement statement = getElementFactory().createStatement(closureCall, protocolFunction); appendInImplementedFunction(statement); } } "	0	0	0	0	0	1
public Date getDate() { return date; } 	0	0	0	0	0	1
"private static void addSerializableTypes(final Set<MetaClass> exposedClasses, final Set<String> explicitTypes, final String value) { final Set<String> patterns = new LinkedHashSet<>(); for (final String s : value.split("" "")) { final String singleValue = s.trim(); if (singleValue.isEmpty()){ continue; } if (singleValue.endsWith(""*"")) { patterns.add(singleValue); } else { try { exposedClasses.add(MetaClassFactory.get(singleValue)); explicitTypes.add(singleValue); } catch (final Exception e) { throw new RuntimeException(""could not find class defined in ErraiApp.properties for serialization: "" + s, e); } } } if (!patterns.isEmpty()) { final SimplePackageFilter filter = new SimplePackageFilter(patterns); MetaClassFactory .getAllCachedClasses() .stream() .filter(mc -> filter.apply(mc.getFullyQualifiedName())) .collect(toCollection(() -> exposedClasses)); } } "	0	0	0	0	0	1
"public Long getSharedOilPeriod(AlternativeFundingContract contract) { //        CriteriaBuilder cb = getEntityManager().getCriteriaBuilder(); //        CriteriaQuery<Long> q = cb.createQuery(Long.class); //        Root<T> t = q.from(entityClass); // //        q.select(cb.count(q.from(entityClass))); ////        q.where( ////                cb.and( ////                        cb.equal(t.get(""contract""), contract), ////                        cb.notEqual(t.get(""sharedOil""), """") ////                ) ////        ); //        q.where( //                cb.equal(t.get(""contract""), contract) //        ); // //        Long sharedOilPeriod = getEntityManager().createQuery(q).getSingleResult();  Contract contractToFind = contractBean.find(contract);  LOG.log(Level.INFO, ""Entity type is {0}..."", entityClass);  TypedQuery<Long> query = getEntityManager().createQuery( ""SELECT COUNT(f) "" + ""FROM AlternativeFundingForecast f  WHERE f.contract = :contract AND f.sharedOil != null"", Long.class); query.setParameter(""contract"", contractToFind);  long sharedOilPeriod = query.getSingleResult();  LOG.log(Level.INFO, ""Shared Oil Received for {0} months..."", sharedOilPeriod);  return sharedOilPeriod;  } "	0	0	0	0	0	1
public LongProperty gymOffenseProperty() { return gymOffense; } 	0	0	0	0	0	1
private com.google.protobuf.RepeatedFieldBuilder< com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormat, com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormat.Builder, com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormatOrBuilder> getDeliveryAttemptsFieldBuilder() { if (deliveryAttemptsBuilder_ == null) { deliveryAttemptsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder< com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormat, com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormat.Builder, com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormatOrBuilder>( deliveryAttempts_, ((bitField0_ & 0x00000004) == 0x00000004), getParentForChildren(), isClean()); deliveryAttempts_ = null; } return deliveryAttemptsBuilder_; } 	0	0	0	0	0	1
public void updateItem(int index, final BLEDevice item) { bleDeviceList.set(index,item); notifyDataSetChanged(); } 	0	0	0	0	0	1
"ArrayList<Session> getSessionList(SQLiteDatabase mDb) {  String sortOrder = DbContract.Sessions.ID + ASCENDING;  Cursor cursor = mDb.query( DbContract.Sessions.TABLE_NAME, DbContract.Sessions.FULL_PROJECTION, null, null, null, null, sortOrder );  ArrayList<Session> sessions = new ArrayList<>(); Session session;  if (cursor != null && cursor.moveToFirst()) { while (!cursor.isAfterLast()) { try { Microlocation microlocation = getMicrolocationFromCursor(cursor, mDb); Track track = getTrackFromCursor(cursor, mDb);  session = new Session( cursor.getInt(cursor.getColumnIndex(DbContract.Sessions.ID)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.TITLE)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.SUBTITLE)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.SUMMARY)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.DESCRIPTION)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.START_TIME)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.END_TIME)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.START_DATE)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.TYPE)), track, cursor.getString(cursor.getColumnIndex(DbContract.Sessions.LEVEL)), microlocation  ); sessions.add(session); } catch (ParseException e) { Timber.e(""Parsing Error Occurred at DatabaseOperations::getSessionList.""); } cursor.moveToNext(); } cursor.close(); } return sessions; } "	0	0	0	0	0	1
Version getVersionIds(SQLiteDatabase mDb) {  Cursor cursor = mDb.query( DbContract.Versions.TABLE_NAME, DbContract.Versions.FULL_PROJECTION, null, null, null, null, null );  Version currentVersion; if (cursor != null && cursor.getCount() > 0) { cursor.moveToFirst();  currentVersion = new Version( cursor.getInt(cursor.getColumnIndex(DbContract.Versions.VER_EVENT)), cursor.getInt(cursor.getColumnIndex(DbContract.Versions.VER_TRACKS)), cursor.getInt(cursor.getColumnIndex(DbContract.Versions.VER_SESSIONS)), cursor.getInt(cursor.getColumnIndex(DbContract.Versions.VER_SPONSORS)), cursor.getInt(cursor.getColumnIndex(DbContract.Versions.VER_SPEAKERS)), cursor.getInt(cursor.getColumnIndex(DbContract.Versions.VER_MICROLOCATIONS)) ); cursor.close(); return currentVersion;  } else { return null; } } 	0	0	0	0	0	1
"void deleteBookmarks(int id, SQLiteDatabase db) { db.delete(DbContract.Bookmarks.TABLE_NAME, DbContract.Bookmarks.SESSION_ID + ""="" + id, null);  } "	0	0	0	0	0	1
org.fossasia.openevent.data.Track getTrackByTrackId(int id, SQLiteDatabase mDb) { String tracksColumnSelection = DbContract.Tracks.ID + EQUAL + DatabaseUtils.sqlEscapeString(String.valueOf(id));  Cursor tracksCursor = mDb.query( DbContract.Tracks.TABLE_NAME, DbContract.Tracks.FULL_PROJECTION, tracksColumnSelection, null, null, null, null );  org.fossasia.openevent.data.Track selected = null;  if (tracksCursor != null && tracksCursor.moveToFirst()) {  selected = new org.fossasia.openevent.data.Track( tracksCursor.getInt(tracksCursor.getColumnIndex(DbContract.Tracks.ID)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.NAME)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.DESCRIPTION)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.IMAGE)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.COLOR)) ); tracksCursor.close(); } return selected; } 	0	0	0	0	0	1
"ArrayList<Sponsor> getSponsorList(SQLiteDatabase mDb) { String sortOrder = DbContract.Sponsors.LEVEL + DESCENDING + "", "" + DbContract.Sponsors.NAME + ASCENDING; Cursor cursor = mDb.query( DbContract.Sponsors.TABLE_NAME, DbContract.Sponsors.FULL_PROJECTION, null, null, null, null, sortOrder );  ArrayList<Sponsor> sponsors = new ArrayList<>(); Sponsor sponsor;  if (cursor != null && cursor.moveToFirst()) { while (!cursor.isAfterLast()) { sponsor = new Sponsor( cursor.getInt(cursor.getColumnIndex(DbContract.Sponsors.ID)), cursor.getString(cursor.getColumnIndex(DbContract.Sponsors.NAME)), cursor.getString(cursor.getColumnIndex(DbContract.Sponsors.URL)), cursor.getString(cursor.getColumnIndex(DbContract.Sponsors.LOGO_URL)), cursor.getString(cursor.getColumnIndex(DbContract.Sponsors.TYPE)), cursor.getInt(cursor.getColumnIndex(DbContract.Sponsors.LEVEL))  ); sponsor.changeSponsorTypeToString(cursor.getString(cursor.getColumnIndex(DbContract.Sponsors.TYPE)));  sponsors.add(sponsor); cursor.moveToNext(); } cursor.close(); } return sponsors; } "	0	0	0	0	0	1
List<SocialLink> getSocialLink(SQLiteDatabase mDb) {  Cursor cursor = mDb.query( DbContract.SocialLink.TABLE_NAME, DbContract.SocialLink.FULL_PROJECTION, null, null, null, null, null );  List<SocialLink> socialLinks = new ArrayList<>(); SocialLink currentSocialLink; if (cursor != null && cursor.moveToFirst()) { while (!cursor.isAfterLast()) { currentSocialLink = new SocialLink( cursor.getString(cursor.getColumnIndex(DbContract.SocialLink.LINK)), cursor.getString(cursor.getColumnIndex(DbContract.SocialLink.ID)), cursor.getString(cursor.getColumnIndex(DbContract.SocialLink.NAME))); socialLinks.add(currentSocialLink); cursor.moveToNext(); } cursor.close(); } return socialLinks; } 	0	0	0	0	0	1
"boolean isBookmarked(int sessionId, SQLiteDatabase db) { boolean number = false; Cursor c = null; try { c = db.rawQuery(""select "" + DbContract.Bookmarks.SESSION_ID + "" from "" + DbContract.Bookmarks.TABLE_NAME + "" where session_id = ?"", new String[]{String.valueOf(sessionId)});  if (c.getCount() == 1) { number = true;  }  } catch (Exception e) { Timber.e(""Parsing Error Occurred at DatabaseOperations::isBookmarked.""); } finally { if (c != null) c.close(); } return number; } "	0	0	0	0	0	1
org.fossasia.openevent.data.Track getTrackByTrackName(String trackName, SQLiteDatabase mDb) { String tracksColumnSelection = DbContract.Tracks.NAME + EQUAL + DatabaseUtils.sqlEscapeString(trackName);  Cursor tracksCursor = mDb.query( DbContract.Tracks.TABLE_NAME, DbContract.Tracks.FULL_PROJECTION, tracksColumnSelection, null, null, null, null );  org.fossasia.openevent.data.Track selected = null;  if (tracksCursor != null && tracksCursor.moveToFirst()) {  selected = new org.fossasia.openevent.data.Track( tracksCursor.getInt(tracksCursor.getColumnIndex(DbContract.Tracks.ID)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.NAME)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.DESCRIPTION)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.IMAGE)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.COLOR)) ); tracksCursor.close(); } return selected;  } 	0	0	0	0	0	1
public BTChipInput getTrustedInput(BitcoinTransaction transaction, long index, long sequence) throws BTChipException { ByteArrayOutputStream data = new ByteArrayOutputStream(); // Header BufferUtils.writeUint32BE(data, index); BufferUtils.writeBuffer(data, transaction.getVersion()); VarintUtils.write(data, transaction.getInputs().size()); exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x00, (byte)0x00, data.toByteArray(), OK); // Each input for (BitcoinTransaction.BitcoinInput input : transaction.getInputs()) { data = new ByteArrayOutputStream(); BufferUtils.writeBuffer(data, input.getPrevOut()); VarintUtils.write(data, input.getScript().length); exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, data.toByteArray(), OK); data = new ByteArrayOutputStream(); BufferUtils.writeBuffer(data, input.getScript()); exchangeApduSplit2(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, data.toByteArray(), input.getSequence(), OK); } // Number of outputs data = new ByteArrayOutputStream(); VarintUtils.write(data, transaction.getOutputs().size()); exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, data.toByteArray(), OK); // Each output for (BitcoinTransaction.BitcoinOutput output : transaction.getOutputs()) { data = new ByteArrayOutputStream(); BufferUtils.writeBuffer(data, output.getAmount()); VarintUtils.write(data, output.getScript().length); exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, data.toByteArray(), OK); data = new ByteArrayOutputStream(); BufferUtils.writeBuffer(data, output.getScript()); exchangeApduSplit(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, data.toByteArray(), OK); } // Locktime byte[] response = exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, transaction.getLockTime(), OK); ByteArrayOutputStream sequenceBuf = new ByteArrayOutputStream(); BufferUtils.writeUint32BE(sequenceBuf, sequence); return new BTChipInput(response, sequenceBuf.toByteArray(), true); } 	0	0	0	0	0	1
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_register_user);  //initializing user and pass rUsername = (EditText) findViewById(R.id.usernameRegisterEditText); rPassword = (EditText) findViewById(R.id.passwordRegisterEditText); rConfirmPassword = (EditText) findViewById(R.id.confirmPasswordRegisterEditText); rRegisterButton = (Button) findViewById(R.id.registerButton); rEmail = (EditText) findViewById(R.id.emailRegisterEditText);  //Setting Button to listen to click rRegisterButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) {  final String username = rUsername.getText().toString().trim(); String password = rPassword.getText().toString().trim(); String email = rEmail.getText().toString().trim(); String confirmPassword = rConfirmPassword.getText().toString().trim();  if(password.equals(confirmPassword)) { // Pulled This Parse code from Parse.com, then modified // https://www.parse.com/docs/android/guide#users-signing-up //////////////////////////////////////////////////////////// ParseUser user = new ParseUser(); user.setUsername(username); user.setPassword(password); user.setEmail(email);   user.signUpInBackground(new SignUpCallback() { public void done(ParseException e) { if (e == null) {  // User signed up Scuccessfully Toast.makeText(RegisterUserActivity.this, ""Successfully Registered!"", Toast.LENGTH_LONG).show(); ParseObject schedule; ParseObject tempSchedule = new ParseObject(""TempSchedule""); tempSchedule.put(""UserID"",""""+username); for(int i = 1; i <= 10; i++){ tempSchedule.put(""Class""+i,""Empty""); } try { tempSchedule.save(); } catch (ParseException e1) { e1.printStackTrace(); } for(int createClassListCounter = 0;createClassListCounter<5;createClassListCounter++){ schedule = new ParseObject(""Schedule""); schedule.put(""ScheduleUserNum"",""""+username+createClassListCounter); try { schedule.save(); } catch (ParseException e1) { e1.printStackTrace(); } finish(); } } else { // Sign up didn't succeed. Look at the ParseException Toast.makeText(RegisterUserActivity.this, ""Registration Failed!"", Toast.LENGTH_LONG).show(); // to figure out what went wrong } } }); } else { Toast.makeText(RegisterUserActivity.this, ""Password fields dont match.."", Toast.LENGTH_LONG).show(); } } }); } "	0	0	0	0	0	1
"public String createFormattedCredential() { return config.getAccessKey() + ""/"" + timestamp.substring(0, lastIndex) + ""/"" + config.getRegion() + ""/"" + ""ec2/aws4_request""; } "	0	0	0	0	0	1
"public void updateMdsal(Hostconfig hostConfig, Action action) { InstanceIdentifier<Hostconfig> hostConfigId; if (hostConfig == null) { return; } try { switch (action) { case ADD: case UPDATE: final WriteTransaction writeTx = dataBroker.newWriteOnlyTransaction(); hostConfigId = createInstanceIdentifier(hostConfig); writeTx.put(LogicalDatastoreType.OPERATIONAL, hostConfigId, hostConfig, true); writeTx.submit().get(); break; case DELETE: final WriteTransaction delTx = dataBroker.newWriteOnlyTransaction(); hostConfigId = createInstanceIdentifier(hostConfig); delTx.delete(LogicalDatastoreType.OPERATIONAL, hostConfigId); delTx.submit().get(); break; default: break; } } catch (Exception e) { LOG.warn(""Hostconfig transaction commit failed to DS."", e); } } "	0	0	0	0	0	1
"void deserialize(Subscriber<? super AtomWritable> subscriber) { LOG.info(""current pos({}) done ({})"", pos, hasMore() ? ""has more"" : ""no more""); while (hasMore()) { try { int keysize = input.readUnsignedShort(); long rowSize = 2; byte[] rowKey = new byte[keysize]; input.readFully(rowKey); rowSize += keysize;  if (version.hasRowSizeAndColumnCount) { rowSize += input.readLong() + 8; // Since we have the row size in this version we can go ahead and set pos to the end of the row. this.pos += rowSize; }  /* * The local deletion times are similar to the times that they * were marked for delete, but we only care to know that it was * deleted at all, so we will go with the long value as the * timestamps for update are long as well. */ @SuppressWarnings({ ""unused"", ""UnusedAssignment"" }) int localDeletionTime = input.readInt(); rowSize += 4; long markedForDeleteAt = input.readLong(); rowSize += 8; int columnCount = Integer.MAX_VALUE; if (version.hasRowSizeAndColumnCount) { columnCount = input.readInt(); }  try { rowSize += deserializeColumns(subscriber, rowKey, markedForDeleteAt, columnCount, input); } catch (CorruptColumnException e) { subscriber.onError(new IOException( ""Error in row for key "" + BytesType.instance.getString(ByteBuffer.wrap(rowKey)), e)); }  // For versions without row size we need to load the columns to figure out the size they occupy if (!version.hasRowSizeAndColumnCount) { this.pos += rowSize; } } catch (IOException e) { subscriber.onError(e); break; } } } "	0	0	0	0	0	1
private void handleTemperatureCommand(PercentType temperature) { SetColorRequest packet = new SetColorRequest((int) (currentColorState.getHue().floatValue() / 360 * 65535.0f), (int) (currentColorState.getSaturation().floatValue() / 100 * 65535.0f), (int) (currentColorState.getBrightness().floatValue() / 100 * 65535.0f), toKelvin(temperature.intValue()), 0); packet.setResponseRequired(false); sendPacket(packet);  // the LIFX LAN protocol spec indicates that the response returned for a request would be the // previous value, so we explicitly demand for the latest value GetRequest colorPacket = new GetRequest(); sendPacket(colorPacket); } 	0	0	0	0	0	1
"@Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); if (resultCode == RESULT_OK) { if (requestCode == ADD_ITEM_REQUEST) { final Intent d = data; double price = Double.parseDouble(d.getStringExtra(""item_price"")); price *= 100; final ShoppingListItemBuilder bld = new ShoppingListItemBuilder(null) .name(d.getStringExtra(""item_name"")) .priority(convertPriority(d.getStringExtra(""item_prio""))) .imageUrl(d.getStringExtra(""item_img"")) .priority(convertPriority(d.getStringExtra(""item_prio""))) .quantity(Integer.parseInt(d.getStringExtra(""item_quan""))) .maxPriceCents(((int) price));  final long id = Long.parseLong(d.getStringExtra(""item_id"")); runOnUiThread(new Runnable() { @Override public void run() { if (findItem(id) >= 0) { return; } sla.add(new ShoppingListItemHandle(id, Optional.of(bld.build()))); sla.sort(comparator); } }); } } } "	0	0	0	0	0	1
public int[] getOnBuild() { return onBuild; } 	0	0	0	0	0	1
"@Test public void testBasicEvaluationChain() throws UnsupportedDataFileException { try { Path testFolder = folder.newFolder().toPath(); DwcDataFile dwcDataFile = DataFileFactory.prepareDataFile(dwcaDataFile, testFolder); EvaluationChain.Builder evaluationChainBuilder = EvaluationChain.Builder.using(dwcDataFile, TestUtils.getEvaluatorFactory(), testFolder);  evaluationChainBuilder.evaluateReferentialIntegrity(); evaluationChainBuilder.build().runRowTypeEvaluation((dataFile, rowType, recordCollectionEvaluator) -> { try { List<RecordEvaluationResult> results = new ArrayList<>(); recordCollectionEvaluator.evaluate(dataFile, results::add); if(DwcTerm.Identification.equals(rowType)){ assertTrue(""Got referential integrity issue on Identification extensions"", !results.isEmpty()); } } catch (IOException e) { fail(e.getMessage()); } }); } catch (IOException e) { fail(e.getMessage()); } } "	0	0	0	0	0	1
"@Override public void run() {  sendLogMessage(""Implementation is running!"");  brickController.drawString(""Hello World!"");  } "	0	0	0	0	0	1
"private static void HandleEnergyBladeEquipped() { NWObject oPC = NWScript.getPCItemLastEquippedBy(); final NWObject oItem = NWScript.getPCItemLastEquipped(); ItemGO itemGO = new ItemGO(oItem);  if(!itemGO.HasItemProperty(CustomItemProperty.EnergyBlade)) return;  if(!MagicSystem.IsAbilityEquipped(oPC, AbilityType.EnergyBladeAdept)) { Scheduler.assign(oPC, new Runnable() { @Override public void run() { NWScript.clearAllActions(false); NWScript.actionUnequipItem(oItem); } });  NWScript.floatingTextStringOnCreature(ColorToken.Red() + ""You must have the Energy Blade Adept ability equipped in order to use that weapon."" + ColorToken.End(), oPC, false); return; }  // Unequip anything in right/left hand that isn't the energy blade which was just equipped. final NWObject rightHand = NWScript.getItemInSlot(InventorySlot.RIGHTHAND, oPC); final NWObject leftHand = NWScript.getItemInSlot(InventorySlot.LEFTHAND, oPC);  if(!Objects.equals(rightHand, oItem) && NWScript.getIsObjectValid(rightHand)) { Scheduler.assign(oPC, new Runnable() { @Override public void run() { NWScript.clearAllActions(false); NWScript.actionUnequipItem(rightHand); } }); } if(!Objects.equals(leftHand, oItem) && NWScript.getIsObjectValid(leftHand)) { Scheduler.assign(oPC, new Runnable() { @Override public void run() { NWScript.clearAllActions(false); NWScript.actionUnequipItem(leftHand); } }); }  } "	0	0	0	0	0	1
@Override public Headers headers() { return new HttpUrlConnectionHeaders(mConnection); } 	0	0	0	0	0	1
"static String toJvmSignature(String javaType) { if (javaType == null) { throw new NullPointerException(""javaType must not be null""); } if (javaType.isEmpty()) { throw new IllegalArgumentException(""invalid javaType. \""\""""); }  final int javaObjectArraySize = getJavaObjectArraySize(javaType); final int javaArrayLength = javaObjectArraySize * 2; String pureJavaType; if (javaObjectArraySize != 0) { // pure java pureJavaType = javaType.substring(0, javaType.length() - javaArrayLength); } else { pureJavaType = javaType; } final String signature = PRIMITIVE_JAVA_TO_JVM.get(pureJavaType); if (signature != null) { // primitive type return appendJvmArray(signature, javaObjectArraySize); } return toJvmObject(javaObjectArraySize, pureJavaType);  } "	0	0	0	0	0	1
"@Override public void moveServers(Set<HostAndPort> servers, String targetGroupName) throws IOException { if (servers == null) { throw new ConstraintException( ""The list of servers cannot be null.""); } if (StringUtils.isEmpty(targetGroupName)) { throw new ConstraintException(""The target group cannot be null.""); } if (servers.size() < 1) { return; }  RSGroupInfo targetGrp = getRSGroupInfo(targetGroupName); if (targetGrp == null) { throw new ConstraintException(""Group does not exist: ""+targetGroupName); }  RSGroupInfoManager manager = getRSGroupInfoManager(); synchronized (manager) { if (master.getMasterCoprocessorHost() != null) { master.getMasterCoprocessorHost().preMoveServers(servers, targetGroupName); } HostAndPort firstServer = servers.iterator().next(); //we only allow a move from a single source group //so this should be ok RSGroupInfo srcGrp = manager.getRSGroupOfServer(firstServer); //only move online servers (from default) //or servers from other groups //this prevents bogus servers from entering groups if (srcGrp == null) { throw new ConstraintException( ""Server ""+firstServer+"" does not have a group.""); } if (RSGroupInfo.DEFAULT_GROUP.equals(srcGrp.getName())) { Set<HostAndPort> onlineServers = new HashSet<HostAndPort>(); for(ServerName server: master.getServerManager().getOnlineServers().keySet()) { onlineServers.add(server.getHostPort()); } for(HostAndPort el: servers) { if(!onlineServers.contains(el)) { throw new ConstraintException( ""Server ""+el+"" is not an online server in default group.""); } } }  if(srcGrp.getServers().size() <= servers.size() && srcGrp.getTables().size() > 0) { throw new ConstraintException(""Cannot leave a group ""+srcGrp.getName()+ "" that contains tables "" +""without servers.""); }  String sourceGroupName = getRSGroupInfoManager() .getRSGroupOfServer(srcGrp.getServers().iterator().next()).getName(); if(getRSGroupInfo(targetGroupName) == null) { throw new ConstraintException(""Target group does not exist: ""+targetGroupName); }  for(HostAndPort server: servers) { if (serversInTransition.containsKey(server)) { throw new ConstraintException( ""Server list contains a server that is already being moved: ""+server); } String tmpGroup = getRSGroupInfoManager().getRSGroupOfServer(server).getName(); if (sourceGroupName != null && !tmpGroup.equals(sourceGroupName)) { throw new ConstraintException( ""Move server request should only come from one source group. ""+ ""Expecting only ""+sourceGroupName+"" but contains ""+tmpGroup); } }  if(sourceGroupName.equals(targetGroupName)) { throw new ConstraintException( ""Target group is the same as source group: ""+targetGroupName); }  try { //update the servers as in transition for (HostAndPort server : servers) { serversInTransition.put(server, targetGroupName); }  getRSGroupInfoManager().moveServers(servers, sourceGroupName, targetGroupName); boolean found; List<HostAndPort> tmpServers = Lists.newArrayList(servers); do { found = false; for (Iterator<HostAndPort> iter = tmpServers.iterator(); iter.hasNext(); ) { HostAndPort rs = iter.next(); //get online regions List<HRegionInfo> regions = new LinkedList<HRegionInfo>(); for (Map.Entry<HRegionInfo, ServerName> el : master.getAssignmentManager().getRegionStates().getRegionAssignments().entrySet()) { if (el.getValue().getHostPort().equals(rs)) { regions.add(el.getKey()); } } Iterator<RegionState> i = master.getAssignmentManager().getRegionStates().getRegionsInTransition().iterator(); while (i.hasNext()) { RegionState state = i.next(); if (state.getServerName().getHostPort().equals(rs)) { regions.add(state.getRegion()); } }  //unassign regions for a server LOG.info(""Unassigning "" + regions.size() + "" regions from server "" + rs + "" for move to "" + targetGroupName); if (regions.size() > 0) { //TODO bulk unassign or throttled unassign? for (HRegionInfo region : regions) { //regions might get assigned from tables of target group //so we need to filter if (!targetGrp.containsTable(region.getTable())) { master.getAssignmentManager().unassign(region); found = true; } } } if (!found) { iter.remove(); } } try { Thread.sleep(1000); } catch (InterruptedException e) { LOG.warn(""Sleep interrupted"", e); Thread.currentThread().interrupt(); } } while (found); } finally { //remove from transition for (HostAndPort server : servers) { serversInTransition.remove(server); } } if (master.getMasterCoprocessorHost() != null) { master.getMasterCoprocessorHost().postMoveServers(servers, targetGroupName); } LOG.info(""Move server done: ""+sourceGroupName+""->""+targetGroupName); } } "	0	0	0	0	0	1
@Override public boolean isHasMore() { return !(getItemRealCount() > 100); } 	0	0	0	0	0	1
public Pair<CellRegion, Model> getTableModelAbove(CellRegion newTuplesRegion) { // Make sure this range is not contained within any other table. if (tableModels.stream() .map(e -> e.x) .filter(e -> checkOverap(newTuplesRegion)) .findFirst().isPresent()) return null;  for (Pair<CellRegion, Model> cellRegionModelPair : tableModels) { if (newTuplesRegion.getRow() == cellRegionModelPair.x.getLastRow() + 1 && newTuplesRegion.getColumn() == cellRegionModelPair.x.getColumn() && newTuplesRegion.getLastColumn() == cellRegionModelPair.x.getLastColumn() && cellRegionModelPair.y instanceof TOM_Model) return cellRegionModelPair; } return null; } 	0	0	0	0	0	1
"@Override public ITextComponent getNameForBossBar() { return new TextComponentString(""Corrupted Pawn""); } "	0	0	0	0	0	1
"@Override public void initialize() {  final SimplePanel panel = new SimplePanel(); panel.setStyleName(LOGIN_BG);  final Grid grid = new Grid(1, 2); grid.setStyleName(LOGIN_BOX);  // Logo. grid.setWidget(0, 0, new Image(LOGO_URL));  // Form. final FlexTable form = new FlexTable(); form.setWidth(""90%"");  int y = 0;  // Login field (email). form.setText(y, 0, I18N.CONSTANTS.loginLoginField()); form.getCellFormatter().setStyleName(y, 0, LOGIN_BOX_FORM_LABEL);  loginTextBox = new TextBox(); loginTextBox.getElement().setId(LOGIN_EMAIL_ID); loginTextBox.setWidth(""100%""); form.setWidget(y, 1, loginTextBox); form.getFlexCellFormatter().setColSpan(y, 1, 2); y++;  // Separator. for (int i = 0; i < 3; i++) { form.getCellFormatter().setStyleName(y, i, LOGIN_BOX_FORM_SEPARATOR); } y++;  // Password field. form.setText(y, 0, I18N.CONSTANTS.loginPasswordField()); form.getCellFormatter().setStyleName(y, 0, LOGIN_BOX_FORM_LABEL);  passwordTextBox = new PasswordTextBox(); passwordTextBox.getElement().setId(LOGIN_PASSWORD_ID); passwordTextBox.setWidth(""100%""); form.setWidget(y, 1, passwordTextBox); form.getFlexCellFormatter().setColSpan(y, 1, 2); y++;  // Separator. for (int i = 0; i < 3; i++) { form.getCellFormatter().setStyleName(y, i, LOGIN_BOX_FORM_SEPARATOR); } y++;  // Language field. form.setText(y, 0, I18N.CONSTANTS.loginLanguageField()); form.getCellFormatter().setStyleName(y, 0, LOGIN_BOX_FORM_LABEL);  languageListBox = new ListBox(false); languageListBox.setWidth(""100%""); form.setWidget(y, 1, languageListBox); form.getFlexCellFormatter().setColSpan(y, 1, 2); y++;  // Separator. for (int i = 0; i < 3; i++) { form.getCellFormatter().setStyleName(y, i, LOGIN_BOX_FORM_SEPARATOR); } y++;  // Password forgotten link. final FlowPanel bottomPanel = new FlowPanel(); bottomPanel.getElement().getStyle().setPosition(Position.RELATIVE);  lostPasswordLink = new Anchor(I18N.CONSTANTS.loginPasswordForgotten()); lostPasswordLink.setStyleName(LOGIN_BOX_FORM_FORGOTTEN); bottomPanel.add(lostPasswordLink);  form.setWidget(y, 0, bottomPanel); form.getFlexCellFormatter().setColSpan(y, 0, 2);  // Login button. loginButton = new Button(I18N.CONSTANTS.loginConnectButton()); loginButton.setId(LOGIN_OUVRIR_SESSION_ID); loginButton.setWidth(""120px""); form.setWidget(y, 1, loginButton); form.getCellFormatter().setHorizontalAlignment(y, 1, HasHorizontalAlignment.ALIGN_RIGHT); y++;  // Adding the form to the orange box. grid.getCellFormatter().setHorizontalAlignment(0, 1, HasHorizontalAlignment.ALIGN_CENTER); grid.setWidget(0, 1, form);  // Styles. grid.getCellFormatter().setStyleName(0, 0, LOGIN_BOX_LOGO); grid.getCellFormatter().setStyleName(0, 1, LOGIN_BOX_FORM);  panel.add(grid);  add(panel); } "	0	0	0	0	0	1
"public static URI lookupIri(UUID definingProduct, String key, UriInfo uriInfo) { UriBuilder ub = UriBuilder.fromResource(WorkspaceResource.class); try { ub.path(WorkspaceResource.class.getMethod(""lookup"", UUID.class, String.class)); ub.resolveTemplate(""workspace"", definingProduct); ub.resolveTemplate(""member"", key); } catch (NoSuchMethodException | SecurityException e) { throw new IllegalStateException(""Unable to get all instances method"", e); } return ub.build(); } "	0	0	0	0	0	1
"protected void addParameter(PreparedStatement ps, Object value, OWLNamedIndividual type, int index, Map<OWLEntity, DbId> identifiers) throws SQLException { String t = type.getIRI().toString(); Long id = null; if (value == null) { // This might not work for all database systems. ps.setObject(index, null); } else if (value instanceof DbId) { Long lvalue = ((DbId)value).getFirst(); if (t.equals(Concepts.VARCHAR)) ps.setString(index, lvalue.toString()); else if (t.equals(Concepts.INTEGER)) ps.setLong(index, lvalue); } else if (value instanceof OWLLiteral) { // Needed for mapped schema only if (t.equals(Concepts.VARCHAR)) ps.setString(index, ((OWLLiteral) value).getLiteral()); else if (t.equals(Concepts.INTEGER)) { OWLLiteral literal = (OWLLiteral) value; if (literal.isBoolean()) ps.setLong(index, literal.parseBoolean() ? 1 : 0); else ps.setLong(index, literal.parseInteger()); } else if (t.equals(Concepts.DOUBLE)) ps.setDouble(index, ((OWLLiteral) value).parseDouble()); else if (t.equals(Concepts.TIMESTAMP)) ps.setTimestamp(index, new Timestamp(parseDate((OWLLiteral) value).getTime())); else if (t.equals(Concepts.CLOB)) ps.setClob(index, new StringReader(((OWLLiteral) value).getLiteral())); } else if (value instanceof Long) { if (t.equals(Concepts.VARCHAR)) ps.setString(index, ((Long) value).toString()); else if (t.equals(Concepts.INTEGER)) ps.setLong(index, (Long) value); } else if (value instanceof String) { if (t.equals(Concepts.VARCHAR)) ps.setString(index, (String) value); else if (t.equals(Concepts.CLOB)) ps.setClob(index, new StringReader((String) value)); else if (t.equals(Concepts.TIMESTAMP)) ps.setTimestamp(index, new Timestamp(parseDate((String) value) .getTime())); else if (t.equals(Concepts.DOUBLE)) // TODO test this: ps.setBigDecimal(index, new // BigDecimal(((String) value))); ps.setDouble(index, Double.parseDouble((String) value)); else if (t.equals(Concepts.INTEGER)) ps.setLong(index, Long.parseLong((String) value)); } else if (value instanceof Timestamp) { ps.setTimestamp(index, (Timestamp) value); } else if (value instanceof OWLEntity) { if (t.equals(Concepts.INTEGER)) { id = identifiers.get(value).getFirst(); ps.setLong(index, id); } } else { throw new IllegalArgumentException(""Value Type not recognized"" + value + "" class: "" + value.getClass()); } if (dbg()) { System.out.println(""["" + index + "" = "" + ((id == null) ? value : id + ""("" + value + "")"") + ""] ""); } } "	0	0	0	0	0	1
"protected RestVariable setBinaryVariable(MultipartHttpServletRequest request, Execution execution, int responseVariableType, boolean isNew) {  // Validate input and set defaults if (request.getFileMap().size() == 0) { throw new ActivitiIllegalArgumentException(""No file content was found in request body.""); }  // Get first file in the map, ignore possible other files MultipartFile file = request.getFile(request.getFileMap().keySet().iterator().next());  if (file == null) { throw new ActivitiIllegalArgumentException(""No file content was found in request body.""); }  String variableScope = null; String variableName = null; String variableType = null;  Map<String, String[]> paramMap = request.getParameterMap(); for (String parameterName : paramMap.keySet()) {  if (paramMap.get(parameterName).length > 0) {  if (parameterName.equalsIgnoreCase(""scope"")) { variableScope = paramMap.get(parameterName)[0];  } else if (parameterName.equalsIgnoreCase(""name"")) { variableName = paramMap.get(parameterName)[0];  } else if (parameterName.equalsIgnoreCase(""type"")) { variableType = paramMap.get(parameterName)[0]; } } }  try {  // Validate input and set defaults if (variableName == null) { throw new ActivitiIllegalArgumentException(""No variable name was found in request body.""); }  if (variableType != null) { if (!RestResponseFactory.BYTE_ARRAY_VARIABLE_TYPE.equals(variableType) && !RestResponseFactory.SERIALIZABLE_VARIABLE_TYPE.equals(variableType)) { throw new ActivitiIllegalArgumentException(""Only 'binary' and 'serializable' are supported as variable type.""); } } else { variableType = RestResponseFactory.BYTE_ARRAY_VARIABLE_TYPE; }  RestVariable.RestVariableScope scope = RestVariable.RestVariableScope.LOCAL; if (variableScope != null) { scope = RestVariable.getScopeFromString(variableScope); }  if (variableType.equals(RestResponseFactory.BYTE_ARRAY_VARIABLE_TYPE)) { // Use raw bytes as variable value byte[] variableBytes = IOUtils.toByteArray(file.getInputStream()); setVariable(execution, variableName, variableBytes, scope, isNew);  } else { // Try deserializing the object ObjectInputStream stream = new ObjectInputStream(file.getInputStream()); Object value = stream.readObject(); setVariable(execution, variableName, value, scope, isNew); stream.close(); }  if (responseVariableType == RestResponseFactory.VARIABLE_PROCESS) { return new RestResponseFactory().createBinaryRestVariable(variableName, scope, variableType, null, null, execution.getId(), uriInfo.getBaseUri().toString()); } else { return new RestResponseFactory().createBinaryRestVariable(variableName, scope, variableType, null, execution.getId(), null, uriInfo.getBaseUri().toString()); }  } catch (IOException ioe) { throw new ActivitiIllegalArgumentException(""Could not process multipart content"", ioe); } catch (ClassNotFoundException ioe) { throw new ActivitiContentNotSupportedException(""The provided body contains a serialized object for which the class is nog found: "" + ioe.getMessage()); }  } "	0	0	0	0	0	1
"private JFreeChart createChart(XYDataset priceData) throws IOException, ParseException { logger.info(""Creating date volume chart""); priceData = createDataset();  String title = """";  mainChart = ChartFactory.createTimeSeriesChart(title, ""Date"", ""Volume"", priceData, false, true, false);  XYPlot plot = (XYPlot) mainChart.getPlot();  NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis(); rangeAxis.setLowerMargin(0);  DecimalFormat format = new DecimalFormat(""###,###""); rangeAxis.setNumberFormatOverride(format);  XYItemRenderer renderer1 = plot.getRenderer(); renderer1.setBaseToolTipGenerator( new StandardXYToolTipGenerator(StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT, new SimpleDateFormat(""d-MMM-yyyy""), new DecimalFormat(""0.00"")));  retrieveNews();  for (String date : headlinesAndDates.keySet()) { ArrayList<String> headline = headlinesAndDates.get(date);  SimpleDateFormat formatter = new SimpleDateFormat(""yyyy-MM-dd""); Calendar volumeDate = Calendar.getInstance();  try { Date dates = formatter.parse(date); volumeDate = Calendar.getInstance(); volumeDate.setTime(dates); } catch (ParseException e) { e.printStackTrace(); }  for (int i = 0; i < volumeDataDate.size(); i++) { if (volumeDataDate.get(i).getCalendar().equals(volumeDate)) { String formattedDate = changeDateFormat(date); double volume = volumeDataDate.get(i).getVolume(); long time = volumeDataDate.get(i).getCalendar().getTimeInMillis();  final XYPointerAnnotation headLineAnnotation = new XYPointerAnnotation(formattedDate, time, volume, 3);  XYLineAndShapeRenderer r = (XYLineAndShapeRenderer) plot.getRenderer(); r.setSeriesShape(0, ShapeUtilities.createDiamond(1)); r.setSeriesShapesVisible(0, true);  String listString = """";  for (String s : headline) { listString += ""- "" + s + ""<br>""; }  int dismissDelay = ToolTipManager.sharedInstance().getDismissDelay(); dismissDelay = Integer.MAX_VALUE;  ToolTipManager.sharedInstance().setDismissDelay(dismissDelay);  headLineAnnotation.setToolTipText(""<html>"" + listString + ""</html>""); headLineAnnotation.setTextAnchor(TextAnchor.HALF_ASCENT_RIGHT); plot.addAnnotation(headLineAnnotation);  annotationPositions.put(date, new AnnotationPosition(headLineAnnotation.getX(), headLineAnnotation.getY()));  } } }  logger.info(""Finished creating date volume chart"");  return mainChart; } "	0	0	0	0	0	1
"@Override public View getView(final int position, View convertView, final ViewGroup parent) { final ViewHolder holder; LayoutInflater inflater = LayoutInflater.from(context); if (convertView == null) { holder = new ViewHolder(); convertView = inflater.inflate(R.layout.list_item_lover_of_life, null); holder.imageView = (ImageView) convertView.findViewById(R.id.imageViewIcon); holder.textViewName = (TextView) convertView.findViewById(R.id.textViewNickName); holder.textViewDesc = (TextView) convertView.findViewById(R.id.textViewDesc); holder.textViewArticleCount = (TextView) convertView.findViewById(R.id.textViewArticle); holder.textViewFollowerCount = (TextView) convertView.findViewById(R.id.textViewFollow); holder.imageViewFollowed = (ImageView) convertView.findViewById(R.id.imageViewFollowed);  convertView.setTag(holder); } else { holder = (ViewHolder) convertView.getTag(); } final HashMap<String, Object> stringObjectHashMap = list.get(position); Glide.with(context) .load(stringObjectHashMap.get(""imageView"").toString()) .placeholder(R.drawable.banner_loading_spinner) .crossFade() .into(holder.imageView); holder.textViewName.setText(stringObjectHashMap.get(""textViewName"").toString()); holder.textViewDesc.setText(stringObjectHashMap.get(""textViewDesc"").toString()); holder.textViewArticleCount.setText(stringObjectHashMap.get(""textViewArticleCount"").toString()); holder.textViewFollowerCount.setText(stringObjectHashMap.get(""textViewFollowerCount"").toString()); if (followStatus.get(position).toString().equals(""1"")) { holder.imageViewFollowed.setImageResource(R.drawable.followed); } else { holder.imageViewFollowed.setImageResource(R.drawable.follow); } holder.imageViewFollowed.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) {   if (UserInfo.isUserLogged(context)) {  id = stringObjectHashMap.get(""id"").toString(); postReadToServer(holder,position, id, followStatus.get(position).equals(""1"") ? 0 : 1);  } else { LoginUtils.startLogin(context, LoginActivity.REQUEST_CODE_LOGIN); }  } });   return convertView;   } "	0	0	0	0	0	1
"protected String getJsonRanks(Group group, List<GoogleTarget> targets,Run firstRun, Run lastRun, int searchId){  StringBuilder builder = new StringBuilder(""{\""targets\"":[""); for (GoogleTarget target : targets) { builder.append(""{\""id\"":"").append(target.getId()) .append("",\""name\"":\"""").append(target.getName()).append(""\""},""); } if(builder.charAt(builder.length()-1) == ','){ builder.setCharAt(builder.length()-1, ']'); } else { builder.append(']'); } builder.append("",\""ranks\"":["");  final int[] maxRank = new int[1];  googleDB.serp.stream(firstRun.getId(), lastRun.getId(), searchId, (GoogleSerp serp) -> {  builder.append('[').append(serp.getRunDay().toEpochSecond(ZoneOffset.UTC)*1000l).append(',');  // calendar builder.append(""null"").append("","");  for (GoogleTarget target : targets) { int position = UNRANKED; for (int i = 0; i < serp.getEntries().size(); i++) { if(target.match(serp.getEntries().get(i).getUrl())){ position = i + 1; break; } }  builder.append(position == UNRANKED ? ""null"" : position).append(','); if(position != UNRANKED && position > maxRank[0]){ maxRank[0] = position; } }  if(builder.charAt(builder.length()-1) == ','){ builder.setCharAt(builder.length()-1, ']'); } builder.append(','); }); if(builder.charAt(builder.length()-1) == ','){ builder.setCharAt(builder.length()-1, ']'); } else { builder.append(']'); }  builder.append("",\""maxRank\"":"").append(maxRank[0]); builder.append(""}"");  return builder.toString(); } "	0	0	0	0	0	1
"protected ArrayList<String> checkLinks(ArrayList<Urls> originalValue) {  // here we convert our Data arrayList to a String arrayList ArrayList<String> stringArray = new ArrayList<String>();  for (Urls currentData : originalValue) { stringArray.add(currentData.getContentUrl()); }  // System.out.println(""Original array with "" + stringArray.size() + "" // elements""); // System.out.println(""============""); // stringArray.forEach(System.out::println);  // get an iterator Iterator iter = stringArray.iterator(); String strElement = """"; URL linkAsUrl = null;  // variable to count the number of valid urls int count = 0;  while (iter.hasNext()) { strElement = (String) iter.next(); // System.out.println(""============""); System.out.println(""CHECKING: "" + strElement);  try { linkAsUrl = new URL(strElement); imageResponses = ImageIO.read(linkAsUrl); getImageFromHttp(strElement, labelTryLinks); System.out.println(""OK""); count++; } catch (MalformedURLException e) { System.out.println(""malformed exception with url "" + strElement); e.printStackTrace(); } catch (NullPointerException e) { System.out.println(""NullPointerException: element to be removed - "" + strElement); iter.remove(); e.printStackTrace(); } catch (IOException e) { System.out.println(""IIOException \nLink to be removed: "" + strElement); iter.remove(); e.printStackTrace(); } // stop checking when 4 valid links are found if (count == 4) { break; } }  // System.out.println(""=======================""); // System.out.println(""Filtered array: ""); // stringArray.forEach(System.out::println); // System.out.println(""number of elements after the deletion "" + // stringArray.size());  return stringArray; } "	0	0	0	0	0	1
protected void setAllFoundImagesLabelsAndPreviewsToNull() {  foundImagesLabel1.setIcon(null); foundImagesLabel2.setIcon(null); foundImagesLabel3.setIcon(null); foundImagesLabel4.setIcon(null);  foundImagesLabel1.setToolTipText(null); foundImagesLabel2.setToolTipText(null); foundImagesLabel3.setToolTipText(null); foundImagesLabel4.setToolTipText(null); } 	0	0	0	0	0	1
protected void openFilechooser() {  originalImage = null; file = fc.getSelectedFile();  try { originalImage = (BufferedImage) ImageIO.read(file); } catch (IOException e1) { e1.printStackTrace(); }  icon = scaleBufferedImage(originalImage, originalImageLabel); originalImageLabel.setIcon(icon); } 	0	0	0	0	0	1
protected BufferedImage mirrorImage(BufferedImage imageToFlip) {  // Flip the image horizontally AffineTransform tx = AffineTransform.getScaleInstance(-1, 1); tx.translate(-imageToFlip.getWidth(null), 0); AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_NEAREST_NEIGHBOR); imageToFlip = op.filter(imageToFlip, null);  return imageToFlip; } 	0	0	0	0	0	1
"@Override public void onLoadFinished(Loader<CallResult<Depth>> loader, CallResult<Depth> result) { if (!result.isSuccess()) { Toast.makeText(getActivity(), R.string.general_error_text, Toast.LENGTH_LONG).show(); } else { final List<PriceVolumePair> asks = result.getPayload().getAsks(); final List<PriceVolumePair> bids = result.getPayload().getBids();  mAsksAdapter.pushData(asks); mBidsAdapter.pushData(bids); mAsksList.setAdapter(mAsksAdapter); mBidsList.setAdapter(mBidsAdapter); mChartArea.removeAllViews(); StockChartView chartView = new StockChartView(getActivity()); final LinearSeries asksSeries = new LinearSeries(); final LinearSeries bidsSeries = new LinearSeries(); asksSeries.getAppearance().setOutlineColor(0xffff4444); bidsSeries.getAppearance().setOutlineColor(0xff0099cc); double sumAsks = 0.0; double sumBids = 0.0; for (int i = 0; i < bids.size(); i++) { sumBids += bids.get(i).getVolume(); } for (int i = bids.size() - 1; i >= 0; i--) { sumBids -= bids.get(i).getVolume(); bidsSeries.addPoint(sumBids); } for (int i = 0; i < asks.size(); i++) { asksSeries.addPoint(sumAsks); sumAsks += asks.get(i).getVolume(); }  asksSeries.setIndexOffset(bidsSeries.getPointCount());  chartView.addArea().getSeries().add(asksSeries); chartView.getAreas().get(0).getSeries().add(bidsSeries);  Axis.ILabelFormatProvider provider = new Axis.ILabelFormatProvider() { @Override public String getAxisLabel(Axis axis, double v) { int index = bidsSeries.convertToArrayIndex(v); if (index < 0) { index = 0; } if (index >= 0) { if (index >= bidsSeries.getPointCount()) { index = asksSeries.convertToArrayIndex(v); if (index < 0) { index = 0; } if (index >= 0) { if (index >= asksSeries.getPointCount()) { index = asksSeries.getPointCount() - 1; } } return String.valueOf(asks.get(index).getPrice()); } return String.valueOf(bids .get(bidsSeries.getPointCount() - 1 - index).getPrice()); } return null;  } }; chartView.getAreas().get(0).getBottomAxis().setLabelFormatProvider(provider);   //customizing fonts for chart chartView.getAreas().get(0).setTitle(""Market Depth for "" + mPairsSpinner.getSelectedItem().toString() + "" (Price vs. Volume)""); chartView.getAreas().get(0).getPlot() .getAppearance() .getFont() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, 14, getResources().getDisplayMetrics())); chartView.getAreas().get(0) .getLeftAxis() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, getResources().getDisplayMetrics())); chartView.getAreas().get(0) .getTopAxis() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, getResources().getDisplayMetrics())); chartView.getAreas().get(0) .getBottomAxis() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 15, getResources().getDisplayMetrics())); chartView.getAreas().get(0) .getRightAxis() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 40, getResources().getDisplayMetrics())); chartView.getAreas().get(0) .getBottomAxis() .getAppearance() .getFont() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, 9, getResources().getDisplayMetrics())); chartView.getAreas().get(0) .getRightAxis() .getAppearance() .getFont() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, 9, getResources().getDisplayMetrics())); mChartArea.addView(chartView); chartView.invalidate(); }  } "	0	0	0	0	0	1
@Override public void onCreate() { super.onCreate(); Logger.setLogger(new AndroidLogger()); OpenHelperCreator.setCreator(new OpenHelperCreator() { @Override protected ISQLiteOpenHelper createOpenHelper(String databaseName, SquidDatabase.OpenHelperDelegate delegate, int version) { return new AndroidOpenHelper(HelloSquiDBApplication.this, databaseName, delegate, version); } }); TasksDatabase.getInstance().registerDataChangedNotifier(new UriNotifier(this, Task.TABLE) { @Override protected boolean accumulateNotificationObjects(Set<Uri> accumulatorSet, SqlTable<?> table, SquidDatabase database, DBOperation operation, AbstractModel modelValues, long rowId) { return accumulatorSet.add(CONTENT_URI); } }); } 	0	0	0	0	0	1
@Test public void testGetOrganizationRolesBasic() { final String role = LumeerConst.Security.ROLE_MANAGE;  securityFacade.addOrganizationUsersRole(organizationCode, Collections.singletonList(USER_Y), role); securityFacade.addOrganizationGroupsRole(organizationCode, Collections.singletonList(GROUP_B), role); List<Role> fromFacade = securityFacade.getOrganizationRoles(organizationCode);  final Client client = ClientBuilder.newBuilder().build(); Response response = client .target(TARGET_URI) .path(createUrl( LumeerConst.Security.ORGANIZATION_RESOURCE, organizationCode, LumeerConst.Security.PERMISSIONS_KEY)) .request().buildGet() .invoke();  List<Role> fromService = response.readEntity(new GenericType<List<Role>>(List.class) { }); assertThat(fromService).hasSize(fromFacade.size()); for (Role r : fromFacade) { assertThat(fromService.contains(r)); }  response.close(); } 	0	0	0	0	0	1
"public void insertWarcInfoMetadata(Job ajob, String origHarvestdefinitionName, String scheduleName, String performer) { if (!template.contains(METADATA_ITEMS_PLACEHOLDER)) { throw new IllegalState(""The placeholder for the property '"" + METADATA_ITEMS_PLACEHOLDER + ""' was not found. Maybe the placeholder has already been replaced with the correct value. The template looks like this: "" + template); } String startMetadataEntry = ""\n<entry key=\""""; String endMetadataEntry = ""\""/>""; String valuePart = ""\"" value=\""""; StringBuilder sb = new StringBuilder(); sb.append(""<property name=\""metadataItems\"">\n<map>\n"");  // <entry key=""harvestInfo.version"" value=""1.03""/>  sb.append(startMetadataEntry); sb.append(HARVESTINFO_VERSION + valuePart + HARVESTINFO_VERSION_NUMBER + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_JOBID + valuePart + ajob.getJobID() + endMetadataEntry);  sb.append(startMetadataEntry); sb.append(HARVESTINFO_CHANNEL + valuePart + ajob.getChannel() + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_HARVESTNUM + valuePart + ajob.getHarvestNum() + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_ORIGHARVESTDEFINITIONID + valuePart + ajob.getOrigHarvestDefinitionID() + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_MAXBYTESPERDOMAIN + valuePart + ajob.getMaxBytesPerDomain() + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_MAXOBJECTSPERDOMAIN + valuePart + ajob.getMaxObjectsPerDomain() + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_ORDERXMLNAME + valuePart + ajob.getOrderXMLName() + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_ORIGHARVESTDEFINITIONNAME + valuePart + origHarvestdefinitionName + endMetadataEntry);  /* optional schedule-name. */ if (scheduleName != null) { sb.append(startMetadataEntry); sb.append(HARVESTINFO_SCHEDULENAME + valuePart + scheduleName + endMetadataEntry); } sb.append(startMetadataEntry); sb.append(HARVESTINFO_HARVESTFILENAMEPREFIX + valuePart + ajob.getHarvestFilenamePrefix() + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_JOBSUBMITDATE + valuePart + ajob.getSubmittedDate() + endMetadataEntry);  /* optional HARVESTINFO_PERFORMER */ if (performer != null){ sb.append(startMetadataEntry); sb.append(HARVESTINFO_PERFORMER + valuePart + performer  + endMetadataEntry); }  /* optional HARVESTINFO_PERFORMER */ if (ajob.getHarvestAudience() != null) { sb.append(startMetadataEntry); sb.append(HARVESTINFO_AUDIENCE + valuePart + ajob.getHarvestAudience() + endMetadataEntry); } sb.append(""\n</map>\n</property>\n"");  // Replace command String templateNew = template.replace(METADATA_ITEMS_PLACEHOLDER, sb.toString()); this.template = templateNew; } "	0	0	0	0	0	1
"private static Response formulateResponse( final ApplicationStatus status, final Throwable error, final String message, final boolean throwIt ) { final String id = generateErrorId(); final String msg = formatEntity( id, error, message ).toString(); Status code = Status.INTERNAL_SERVER_ERROR;  if ( status != null ) { code = Status.fromStatusCode( status.code() ); LOGGER.debug( ""got error code from parameter: {}"", code ); } else if ( ( error instanceof IndyWorkflowException ) && ( (IndyWorkflowException) error ).getStatus() > 0 ) { final int sc = ( (IndyWorkflowException) error ).getStatus(); LOGGER.debug( ""got error code from exception: {}"", sc ); code = Status.fromStatusCode( sc ); }  LOGGER.error( ""Sending error response: {} {}\n{}"", code.getStatusCode(), code.getReasonPhrase(), msg );  Response response = Response.status( code ) .header( ApplicationHeader.content_type.key(), ApplicationContent.text_plain ) .entity( msg ) .build();  if ( throwIt ) { throw new WebApplicationException( error, response ); }  return response; } "	0	0	0	0	0	1
public static void drawHoveringText(@Nullable ItemStack itemStack, Minecraft minecraft, List<String> textLines, int x, int y, FontRenderer font) { ScaledResolution scaledresolution = new ScaledResolution(minecraft); GuiUtils.drawHoveringText(itemStack, textLines, x, y, scaledresolution.getScaledWidth(), scaledresolution.getScaledHeight(), -1, font); } 	0	0	0	0	0	1
public void onClickRequestLeave(View view) { setVisibleFloatingActionMenu(false); Bundle bundle = new Bundle(); bundle.putInt(Constant.EXTRA_ACTION_TYPE, ActionType.ACTION_CREATE); mNavigator.startActivityForResult(RequestLeaveActivity.class, bundle, Constant.RequestCode.REQUEST_LEAVE); } 	0	0	0	0	0	1
@Override protected void initViews(Bundle savedInstanceState) { SmartRouters.running(this); ((TextView) this.findViewById(R.id.smart_router_simple_example_char_text)).setText( this.exampleChar); } 	0	0	0	0	0	1
public static boolean usingWindowsLnf() { return usingLnf(WindowsLookAndFeel.class); } 	0	0	0	0	0	1
public int getRawValue() { return mValueInLowestDenom; } 	0	0	0	0	0	1
"public File getVoucher(int agentId) { if (voucherTemplates.containsKey(agentId)) { return voucherTemplates.get(agentId).stream().findFirst().orElseThrow(() -> new RuntimeException(""this should not happen"")); } else { return voucherTemplates.get(0).stream().findFirst().orElseThrow(() -> new RuntimeException(""this should not happen"")); } } "	0	0	0	0	0	1
private Insets getInsets(Canvas component) { Component parent = component.getParent();  while (parent != null) { if (parent instanceof Container) { return ((Container)parent).getInsets(); } parent = parent.getParent(); }  return null; } 	0	0	0	0	0	1
private void createData() { setEnableViews(true); mIdImageDepartment = Settings.ID_DEPARTMENT_DEFAULT; switch (mTypeSettings) { case Settings.ADD_DEPARTMENT: // TODO break; case Settings.EDIT_DEPARTMENT: showDepartment(); break; } } 	0	0	0	0	0	1
private static final double calcSoilMean(final Coefficients c, final double Mw, final double rRup, final FaultStyle style) {  double c1 = (style == REVERSE) ? c.c1r : c.c1ss; double c6 = (style == REVERSE) ? c.c6r : c.c6ss;  return c1 + c.c2 * Mw - c.c3 * log(rRup + c.c4 * exp(c.c5 * Mw)) + c6 + c.c7 * pow(Mw, 2.5); } 	0	0	0	0	0	1
public void printSheetErrorSummary() { for(AbstractErrorEntry currentError : this.errorLog) System.out.println(currentError.toLogString(this.validatingSpec)); } 	0	0	0	0	0	1
"@JavascriptInterface void connect() { Log.i(""brassau"", ""connect""); final ControlBinder control = engine.getControl(); if (control == null) throw new RuntimeException(""The engine died unexpectedly""); control.getAssistant().brassauReady(); } "	0	0	0	0	0	1
@Override public OpenOrdersParams createOpenOrdersParams() { throw new NotAvailableFromExchangeException(); } 	0	0	0	0	0	1
public static <M> MessageSelector<?, M> select() { return new MessageSelector<Object, M>() { @Override public boolean matches(Object m) { return true; } }; } 	0	0	0	0	0	1
"private ParseResult<CompilationUnit> parseSample(String sampleName) throws IOException { Provider p = Providers.resourceProvider( ""com/github/javaparser/issue_samples/"" + sampleName + "".java.txt""); return new JavaParser().parse(ParseStart.COMPILATION_UNIT, p); } "	0	0	0	0	0	1
"protected void mockConnection() throws IOException { if (connectionFactory == null) { mockConnectionOnly(); connectionFactory = mock(ConnectionFactory.class); when(connectionFactory.getVirtualHost()).thenReturn(""/""); when(connectionFactory.newConnection(any(ExecutorService.class), any(Address[].class))) .thenReturn(connection); }  if (options == null) options = new ConnectionOptions().withHost(""test-host""); options.withConnectionFactory(connectionFactory); if (config == null) config = new Config().withRetryPolicy( RetryPolicies.retryAlways().withInterval(Duration.millis(10))).withRecoveryPolicy( RecoveryPolicies.recoverAlways());  if (connectionHandler == null) { connectionHandler = new ConnectionHandler(options, config); connectionProxy = (ConfigurableConnection) Proxy.newProxyInstance(Connection.class.getClassLoader(), new Class<?>[] {ConfigurableConnection.class}, connectionHandler); connectionHandler.createConnection(connectionProxy); channels = new HashMap<Integer, MockChannel>(); } } "	0	0	0	0	0	1
"public static void main(String[] args) throws Exception {  // log4j logger BasicConfigurator.configure();  //Read contrail-vcenter-plugin.conf file readVcenterPluginConfigFile(); s_logger.info(""Config params vcenter url: "" + _vcenterURL + "", _vcenterUsername: "" + _vcenterUsername + "", api server: "" + _apiServerAddress);  // Zookeeper mastership logic MasterSelection zk_ms = null; zk_ms = new MasterSelection(_zookeeperAddrPort, _zookeeperLatchPath, _zookeeperId); s_logger.info(""Waiting for zookeeper Mastership .. ""); zk_ms.waitForLeadership(); s_logger.info(""Acquired zookeeper Mastership .. "");  // Launch the periodic VCenterMonitorTask VCenterMonitorTask _monitorTask = new VCenterMonitorTask(_vcenterURL, _vcenterUsername, _vcenterPassword, _vcenterDcName, _vcenterDvsName, _apiServerAddress, _apiServerPort, _vcenterIpFabricPg);  scheduledTaskExecutor.scheduleWithFixedDelay(_monitorTask, 0, 2, TimeUnit.SECONDS); Runtime.getRuntime().addShutdownHook( new ExecutorServiceShutdownThread(scheduledTaskExecutor));  //Start event notify thread if VNC & VCenter one time resync is complete. s_logger.info(""Waiting for one time resync to complete.. ""); while (_monitorTask.getAddPortSyncAtPluginStart() == true) { // wait for sync to complete. try { Thread.sleep(2); } catch (java.lang.InterruptedException e) { System.out.println(e); } } s_logger.info(""Starting event monitor Task.. ""); _eventMonitor = new VCenterNotify(_monitorTask); _eventMonitor.start(); } "	0	0	0	0	0	1
public SchemaString schemaStringFromJson(String json) throws IOException { return new ObjectMapper().readValue(json, SchemaString.class); } 	0	0	0	0	0	1
private AggregatedSchemaMetadataInfo buildAggregatedSchemaMetadataInfo(SchemaMetadataInfo schemaMetadataInfo) { if(schemaMetadataInfo == null) { return null; }  Collection<SchemaVersionInfo> allVersions = getAllVersions(schemaMetadataInfo.getSchemaMetadata().getName()); List<SerDesInfo> serDesInfos = getSerDesInfos(schemaMetadataInfo.getSchemaMetadata().getName());  return new AggregatedSchemaMetadataInfo(schemaMetadataInfo.getSchemaMetadata(), schemaMetadataInfo.getId(), schemaMetadataInfo.getTimestamp(), allVersions, serDesInfos); } 	0	0	0	0	0	1
"@Test public void itShouldRetrieveAListOfReportsByUser() throws Exception { final List<Report> results = newArrayList(report(123L), report(456L)); when(service.findAllByUserAndId(eq(""user""), anyListOf(Long.class))) .thenReturn(results);  mvc.perform(get(""/reports"") .param(""user"", ""user""))  .andExpect(status().isOk()) .andExpect(jsonPath(""$"", hasSize(2))) .andExpect(jsonPath(""$[0].id"").value(123)) .andExpect(jsonPath(""$[1].id"").value(456));  verify(service).findAllByUserAndId(eq(""user""), reportIdCaptor.capture()); assertThat(reportIdCaptor.getValue()).isEmpty(); } "	0	0	0	0	0	1
"@Test public void testValidatePlantPageDataWithTwoArticlesToFalse() { PlantBag plantBag = plantBagBuilder.initializeProjectDataAndAddToPlantBag(""Project A"") .createPlantItemAndAddToPlantBag(5, 100, ""wood"", ""Project A"") .createPlantItemAndAddToPlantBag(11, 100, ""wood"", ""Project A"") .build(); boolean validation = _plantPageDataValidator.isPlantPageDataValid(plantBag); assertThat(validation).isFalse(); } "	0	0	0	0	0	1
"@Override public String getValue() { return (value == null) ? defaultValue : '""' + value + '""'; } "	0	0	0	0	0	1
@Override public Set<Entity> resolveForce(CommandSource origin) { return new SelectorResolver(origin, this, true).resolve(); } 	0	0	0	0	0	1
@Override public Set<Entity> resolve(CommandSource origin) { return new SelectorResolver(origin, this, false).resolve(); } 	0	0	0	0	0	1
"public void fireNativeAdLoadEvent(Ad ad) { Iterator<String> it = nativeAds.keySet().iterator(); while(it.hasNext()) { String key = it.next(); FlexNativeAd unit = nativeAds.get(key); if((unit != null) && (unit.ad == ad)){ String jsonData = ""{}""; try { String titleForAd = unit.ad.getAdTitle(); Image coverImage = unit.ad.getAdCoverImage(); Image iconForAd = unit.ad.getAdIcon(); String socialContextForAd = unit.ad.getAdSocialContext(); String titleForAdButton = unit.ad.getAdCallToAction(); String textForAdBody = unit.ad.getAdBody(); Rating appRatingForAd = unit.ad.getAdStarRating();  JSONObject json = new JSONObject(); json.put(""adNetwork"", __getProductShortName()); json.put(""adEvent"", EVENT_AD_LOADED); json.put(""adType"", ADTYPE_NATIVE); json.put(""adId"", unit.adId);  JSONObject adRes = new JSONObject(); adRes.put(""title"", titleForAd); adRes.put(""socialContext"", socialContextForAd); adRes.put(""buttonText"", titleForAdButton); adRes.put(""body"", textForAdBody); if(appRatingForAd != null) { adRes.put(""rating"", appRatingForAd.getValue()); adRes.put(""ratingScale"", appRatingForAd.getScale()); }  JSONObject coverInfo = new JSONObject(); if(coverImage != null) { coverInfo.put(""url"", coverImage.getUrl()); coverInfo.put(""width"", coverImage.getWidth()); coverInfo.put(""height"", coverImage.getHeight()); }  JSONObject iconInfo = new JSONObject(); if(iconForAd != null) { iconInfo.put(""url"", iconForAd.getUrl()); iconInfo.put(""width"", iconForAd.getWidth()); iconInfo.put(""height"", iconForAd.getHeight()); }  adRes.put(""coverImage"", coverInfo); adRes.put(""icon"", iconInfo); json.put(""adRes"", adRes);  jsonData = json.toString(); } catch(Exception e) { } unit.ad.registerViewForInteraction(unit.view); fireEvent(__getProductShortName(), EVENT_AD_LOADED, jsonData); break; } } } "	0	0	0	0	0	1
"@Override public void onBindViewHolder(GridViewHolder holder, int position) { MediaBean mediaBean = mMediaBeanList.get(position); if (mediaBean.getId() == Integer.MIN_VALUE) { holder.mCbCheck.setVisibility(View.GONE); holder.mIvMediaImage.setVisibility(View.GONE); holder.mLlCamera.setVisibility(View.VISIBLE); holder.mIvCameraImage.setImageDrawable(mCameraImage); holder.mTvCameraTxt.setTextColor(mCameraTextColor); holder.mTvCameraTxt.setText(mConfiguration.isImage() ? mMediaActivity.getString(R.string.gallery_take_image) : mMediaActivity.getString(R.string.gallery_video)); holder.mIvCameraImage.setBackgroundColor(mCameraImageBgColor); } else { if (mConfiguration.isRadio()) { holder.mCbCheck.setVisibility(View.GONE); } else { holder.mCbCheck.setVisibility(View.VISIBLE); holder.mCbCheck.setOnClickListener(new OnCheckBoxClickListener(mediaBean)); holder.mCbCheck.setOnCheckedChangeListener(new OnCheckBoxCheckListener(mediaBean)); } holder.mIvMediaImage.setVisibility(View.VISIBLE); holder.mLlCamera.setVisibility(View.GONE); holder.mCbCheck.setChecked(mMediaActivity.getCheckedList() != null && mMediaActivity.getCheckedList().contains(mediaBean)); String bitPath = mediaBean.getThumbnailSmallPath(); String smallPath = mediaBean.getThumbnailSmallPath();  if (!new File(bitPath).exists() || !new File(smallPath).exists()) { Job job = new ImageThmbnailJobCreate(mMediaActivity, mediaBean).create(); RxJob.getDefault().addJob(job); } String path; if (mConfiguration.isPlayGif() && (imageLoaderType == 3 || imageLoaderType == 2)) { path = mediaBean.getOriginalPath(); } else { path = mediaBean.getThumbnailSmallPath(); if (TextUtils.isEmpty(path)) { path = mediaBean.getThumbnailBigPath(); } if (TextUtils.isEmpty(path)) { path = mediaBean.getOriginalPath(); } } Logger.w(""提示path："" + path); if (imageLoaderType != 3) { OsCompat.setBackgroundDrawableCompat(holder.mIvMediaImage, mImageViewBg); mConfiguration.getImageLoader() .displayImage(mMediaActivity, path, (FixImageView) holder.mIvMediaImage, mDefaultImage, mConfiguration.getImageConfig(), true, mConfiguration.isPlayGif(), mImageSize, mImageSize, mediaBean.getOrientation()); } else { OsCompat.setBackgroundDrawableCompat(holder.mIvMediaImage, mImageViewBg); FrescoImageLoader.setImageSmall(""file://"" + path, (SimpleDraweeView) holder.mIvMediaImage, mImageSize, mImageSize, holder.relativeLayout, mConfiguration.isPlayGif()); } } } "	0	0	0	0	0	1
"public List<Service> getServices(List<ServiceConfig> services) {  ArrayList<Service> ret = new ArrayList<>();  for (ServiceConfig service : services) {  ServiceBuilder serviceBuilder = new ServiceBuilder() .withNewMetadata() .withName(service.getName()) .withAnnotations(getAnnotations(service)) .withAnnotations(getLabels(service)) .endMetadata();  ServiceFluent.SpecNested<ServiceBuilder> serviceSpecBuilder = serviceBuilder.withNewSpec();  List<ServicePort> servicePorts = new ArrayList<>();  // lets default to only adding the first port as usually its the web port only // TODO we could add better filters maybe? // worst case folks can be specific of what ports to expose? int count = 0; for (ServiceConfig.Port port : service.getPorts()) { ServicePort servicePort = new ServicePortBuilder() .withName(port.getName()) .withProtocol(port.getProtocol().name()) .withTargetPort(new IntOrString(port.getTargetPort())) .withPort(port.getPort()) .withNodePort(port.getNodePort()) .build(); servicePorts.add(servicePort); if (++count >= 1) { break; } }  if (!servicePorts.isEmpty()) { serviceSpecBuilder.withPorts(servicePorts); }  if (service.isHeadless()) { serviceSpecBuilder.withClusterIP(""None""); }  if (!Strings.isNullOrBlank(service.getType())) { serviceSpecBuilder.withType(service.getType()); } serviceSpecBuilder.endSpec();  if (service.isHeadless() || !servicePorts.isEmpty()) { ret.add(serviceBuilder.build()); } } return ret; } "	0	0	0	0	0	1
"public static void main(String[] args) { try { Connection myConn = DriverManager.getConnection(""jdbc:mysql://localhost:3306/airline"", ""root"", ""1234""); myStat = myConn.createStatement(); } catch (Exception e){ e.printStackTrace(); }  frame = new JFrame(""Airline""); panel = new JPanel(); c = new GridBagConstraints(); panel.setLayout(new GridBagLayout()); frame.add(panel); frame.pack(); frame.setSize(800, 600); frame.setLocationRelativeTo(null); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  /** * Passenger Login */ c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 0; c.gridy = 1; JLabel loginLabel = new JLabel(""Login with your Passport Number""); panel.add(loginLabel, c);  c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 1; c.gridy = 1; c.gridwidth = 5; passportNoLogin = new JTextField(20); passportNoLogin.setSize(100, 10); panel.add(passportNoLogin, c);  c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 8; c.gridy = 1; JButton loginAsPassengerButton = new JButton(""Login as Passenger""); loginAsPassengerButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { if (isValidPassenger(passportNoLogin.getText())) { panel.setVisible(false); Passenger p = new Passenger(); p.init(passportNoLogin.getText()); } } }); panel.add(loginAsPassengerButton, c);  c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 1; c.gridy = 2; invalidPassportNoLabel = new JLabel(); panel.add(invalidPassportNoLabel, c);  /** * Admin Login */ c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 0; c.gridy = 3; final JLabel adminLoginLabel = new JLabel(""Login with your Admin ID""); panel.add(adminLoginLabel, c);  c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 1; c.gridy = 3; c.gridwidth = 5; adminIdLogin = new JTextField(20); adminLoginLabel.setSize(100, 10); panel.add(adminIdLogin, c);  c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 8; c.gridy = 3; JButton adminIdLoginButton = new JButton(""Login as Admin""); panel.add(adminIdLoginButton, c); adminIdLoginButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { if (adminIdLogin.getText().equals(""j4w9a"") || adminIdLogin.getText().equals(""p7x8"") ||adminIdLogin.getText().equals(""v5e0b"")) { panel.setVisible(false); AdminPanel ap = new AdminPanel(); ap.init(); } } });  /** * Create New Account */ c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 8; c.gridy = 4; JButton createPassengerAccount = new JButton(""Create Passenger Account""); createPassengerAccount.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { panel.setVisible(false); CreatePassenger cp = new CreatePassenger(); cp.init(); } }); panel.add(createPassengerAccount, c);  frame.setVisible(true); } "	0	0	0	0	0	1
@Override public void run() { alertCallbacks.lowBatteryLevelRequest(); } 	0	0	0	0	0	1
public static void toFQN(SchemaManager schemaManager, SqlNode query) { ArrayList<SqlIdentifier> tableIds = new ArrayList<>(); query.accept(new SqlTableIdentifierFindVisitor(tableIds));  for (SqlIdentifier tableId : tableIds) { List<String> fqn = schemaManager.toFullyQualifiedTableName(tableId.names); tableId.setNames(fqn, null); } } 	0	0	0	0	0	1
"private void initUI(View view) { starProgressBar = (ProgressBar) view.findViewById(R.id.recommend_star_progressbar); starText = (TextView) view.findViewById(R.id.recommend_star); starText.setOnClickListener(this); view.findViewById(R.id.recommend_fork).setOnClickListener(this); skipBtn = view.findViewById(R.id.recommend_skip); skipBtn.setOnClickListener(this); mProgressBar = (ProgressBar) view.findViewById(R.id.repo_progressbar); mProgressBar.setVisibility(View.VISIBLE); TextView notice2 = (TextView) view.findViewById(R.id.recommend_notice2); SpannableString notice2SS = new SpannableString(mContext.getString(R.string.recommend_notice2_part1) + "" "" + mContext.getString(R.string.recommend_notice2_part2)); notice2SS.setSpan(new CustomClickableSpan(), 0, mContext.getString(R.string.recommend_notice2_part1).length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); notice2.setText(notice2SS); notice2.setOnClickListener(this); notice3 = (TextView) view.findViewById(R.id.recommend_notice3); final SpannableString notice3SS = new SpannableString(mContext.getString(R.string.recommend_notice3_part1) + "" "" + mContext.getString(R.string.recommend_notice3_part2)); notice3SS.setSpan(new CustomClickableSpan(), mContext.getString(R.string.recommend_notice3_part1).length(), notice3SS.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); notice3.setText(notice3SS); notice3.setOnClickListener(this);  mWebView = (ProgressWebView) view.findViewById(R.id.recommend_webview);  mEmptyView = (LinearLayout) view.findViewById(R.id.recommend_empty); mEmptyView.setVisibility(View.GONE); if (mParmasMap == null) { mParmasMap = new HashMap(); mParmasMap.put(""userid"", MLUser.getCurrentUser().getUserName()); mParmasMap.put(""page"", page); mParmasMap.put(""per_page"", PER_PAGE); } if (repos == null) { genes = new ArrayList<>(); repos = new ArrayList<>(); getGenes(); } } "	0	0	0	0	0	1
"public int transformationOfSourceIntoInteger(Object o) { return Integer.valueOf(o.toString().replaceAll(""\\D+"", """")); } "	0	0	0	0	0	1
public void setPublications(final List<Publication> publications) { this.publications = publications; } 	0	0	0	0	0	1
"private SparkLauncher prepareSparkConfig(Config config) { String master = config.hasPath(TOPOLOGY_MASTER) ? config.getString(TOPOLOGY_MASTER) : ""local[*]""; String sparkExecutorCores = config.getString(SPARK_EXECUTOR_CORES); String sparkExecutorMemory = config.getString(SPARK_EXECUTOR_MEMORY); String driverMemory = config.getString(DRIVER_MEMORY); String driverCore = config.getString(DRIVER_CORES); String deployMode = config.getString(DEPLOY_MODE); String enable = config.getString(TOPOLOGY_DYNAMICALLOCATION); boolean verbose = config.getBoolean(TOPOLOGY_VERBOSE); String mainClass = config.getString(TOPOLOGY_MAINCLASS); String sparkHome = config.getString(TOPOLOGY_SPARKHOME); String uiport = config.getString(TOPOLOGY_SPARKUIPORT); String appResource = config.getString(TOPOLOGY_APPRESOURCE); String yarnqueue = config.getString(TOPOLOGY_YARNQUEUE);   SparkLauncher sparkLauncher = new SparkLauncher(); sparkLauncher.setMaster(master); sparkLauncher.setMainClass(mainClass); sparkLauncher.setSparkHome(sparkHome); //sparkLauncher.setJavaHome(TOPOLOGY_JAVAHOME); sparkLauncher.setDeployMode(deployMode); sparkLauncher.setVerbose(verbose); sparkLauncher.setAppResource(appResource); sparkLauncher.setAppName(config.getString(TOPOLOGY_NAME)); sparkLauncher.setConf(""spark.yarn.queue"", yarnqueue); sparkLauncher.setConf(""spark.executor.cores"", sparkExecutorCores); sparkLauncher.setConf(""spark.executor.memory"", sparkExecutorMemory); sparkLauncher.setConf(""spark.driver.memory"", driverMemory); sparkLauncher.setConf(""spark.driver.cores"", driverCore); sparkLauncher.setConf(""spark.streaming.dynamicAllocation.enable"", enable); sparkLauncher.setConf(""spark.ui.port"", uiport); String path = config.getString(TOPOLOGY_SPARKCONFFILEPATH); if (StringUtil.isNotBlank(path)) { sparkLauncher.setPropertiesFile(path); }  String batchDuration = config.getString(BATCH_DURATION); String routerTasknum = config.getString(ROUTER_TASK_NUM); String alertTasknum = config.getString(ALERT_TASK_NUM); String publishTasknum = config.getString(PUBLISH_TASK_NUM); String slideDurationsecond = config.getString(SLIDE_DURATION_SECOND); String windowDurationssecond = config.getString(WINDOW_DURATIONS_SECOND); String checkpointPath = config.getString(CHECKPOINT_PATH); String topologyGroupid = config.getString(TOPOLOGY_GROUPID); String autoOffsetReset = config.getString(AUTO_OFFSET_RESET); String restApihost = config.getString(EAGLE_CORRELATION_SERVICE_HOST); String restApiport = config.getString(EAGLE_CORRELATION_SERVICE_PORT); String restApicontext = config.getString(EAGLE_CORRELATION_CONTEXT); sparkLauncher.addAppArgs(batchDuration, routerTasknum, alertTasknum, publishTasknum, slideDurationsecond, windowDurationssecond, checkpointPath, topologyGroupid, autoOffsetReset, restApihost, restApiport, restApicontext); return sparkLauncher; } "	0	0	0	0	0	1
"@Test public final void testIsCompatibleAmmoBuiltinAmmo() throws Exception {  final AmmoWeapon builtInAmmo = new AmmoWeapon("""", """", """", 0, 0, 0.0, HardPointType.ENERGY, 0, Faction.CLAN, null, null, null, 1, 1, 1, null, 0, 0.0, 0, 0.0, 0.0, null); final Ammunition ac20ammo = new Ammunition("""", """", """", 0, 0, 0.0, HardPointType.NONE, 0.0, Faction.CLAN, 10, ""ammotype"", HardPointType.ENERGY, 0.0);  assertFalse(builtInAmmo.isCompatibleAmmo(ac20ammo)); } "	0	0	0	0	0	1
void enableScanningIndicator() { mActivityReference.findViewById(R.id.loading_indicator_layout).setVisibility(View.VISIBLE); } 	0	0	0	0	0	1
"@Before public void setUp() throws Exception { mapper = HadoopDruidIndexerConfig.JSON_MAPPER; mapper.registerSubtypes(new NamedType(HashBasedNumberedShardSpec.class, ""hashed""));  dataRoot = temporaryFolder.newFolder(""data=hear""); outputRoot = temporaryFolder.newFolder(""output"");  for (Map.Entry<String, List<String>> entry: data.entrySet()) { temporaryFolder.newFolder((""data=hear/"" + entry.getKey()).split(""/"")); File dataFile = temporaryFolder.newFile(""data=hear/"" + entry.getKey() + ""/data""); FileUtils.writeLines(dataFile, entry.getValue()); }  HashMap<String, Object> inputSpec = new HashMap<>(); inputSpec.put(""type"", ""partition""); inputSpec.put(""basePath"", dataRoot.getCanonicalPath()); inputSpec.put(""partitionColumns"", ImmutableList.of(""test1"", ""test2""));  config = new HadoopDruidIndexerConfig( new HadoopIngestionSpec( new DataSchema( dataSourceName, mapper.convertValue( inputRowParser, Map.class ), aggs, new UniformGranularitySpec( Granularity.DAY, QueryGranularity.NONE, ImmutableList.of(this.interval) ), mapper ), new HadoopIOConfig( ImmutableMap.copyOf(inputSpec), null, outputRoot.getCanonicalPath() ), new HadoopTuningConfig( outputRoot.getCanonicalPath(), null, null, null, null, null, false, false, false, false, ImmutableMap.of(JobContext.NUM_REDUCES, ""0""), //verifies that set num reducers is ignored false, true, null, true, null ) ) ); config.setShardSpecs( loadShardSpecs(shardInfoForEachSegment) ); config = HadoopDruidIndexerConfig.fromSpec(config.getSchema()); } "	0	0	0	0	0	1
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_create_mood); completeButton = (Button) findViewById(R.id.saveButton); date = new DatePickerEditText(this, R.id.dateField); emotionSpinner = (Spinner) findViewById(R.id.emotionSpinner); etTrigger = (EditText) findViewById(R.id.triggerField); socialSituationSpinner = (Spinner) findViewById(R.id.spinner); saveLocation = (CheckBox) findViewById(R.id.saveLocation);  currentLocation = (TextView) findViewById(R.id.currentLocation);  Button addPhoto = (Button) findViewById(R.id.addPhoto); imageView = (ImageView) findViewById(R.id.imageView); //        imageView.setVisibility(View.GONE); //        s = """";  Mood mood = (Mood) getIntent().getSerializableExtra(""mood""); //Changes the fields to the selected mood etTrigger.setText(mood.getTrigger()); Date tempDate = (Date) mood.getMoodDate(); latitude = mood.getLatitude(); longitude = mood.getLongitude();  //not sure how to properly display location stuff using string resource //        currentLocation.setText(getString(R.string.display_location, mood.getLatitude(), mood.getLongitude())); currentLocation.setText(""Lat: "" + mood.getLatitude() + "" Long: "" + mood.getLongitude());  //tempDate.setYear(tempDate.getYear() + 1900); Log.d(""Date"", tempDate.toString()); date.setDate(tempDate.getYear()+1900, tempDate.getMonth(), tempDate.getDate()); //disgusting single line way to set the spinners //Taken from http://stackoverflow.com/questions/2390102/how-to-set-selected-item-of-spinner-by-value-not-by-position emotionSpinner.setSelection(((ArrayAdapter<String>) emotionSpinner.getAdapter()) .getPosition(mood.getEmotionState())); socialSituationSpinner.setSelection(((ArrayAdapter<String>) socialSituationSpinner .getAdapter()).getPosition(mood.getSocialSituation()));  s = mood.getPhoto();  if (mood.getPhoto().equals("""")){ imageView.setVisibility(View.GONE); imageView.setImageBitmap(null); s = """";  } else { //s = mood.getPhoto(); final byte[] imageBytes = Base64.decode(mood.getPhoto(), Base64.DEFAULT); final Bitmap decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length); imageView.setImageBitmap(decodedImage); }  /** * Saves all information stored in the activity and binds it to a mood. */ completeButton.setOnClickListener(new View.OnClickListener() { public void onClick(View v) {  //Spinner class will return a textview when you use getSelectedView(), allows for easy setError TextView errorText = (TextView) emotionSpinner.getSelectedView();  if (errorCheck(errorText, etTrigger)) { newMood = new Mood(); newMood.setEmotionState(emotionSpinner.getSelectedItem().toString()); String username = getIntent().getStringExtra(""username""); newMood.setMaker(username); newMood.setMoodDate(date.getDate()); newMood.setTrigger(etTrigger.getText().toString().trim()); newMood.setLatitude(latitude); newMood.setLongitude(longitude);  if(socialSituationSpinner.getSelectedItem().toString().equals(""Select a social situation"")){ newMood.setSocialSituation(""""); } else{ newMood.setSocialSituation(socialSituationSpinner.getSelectedItem().toString()); }  //keep the original image //                    if(decodedImage!=null && s == """"){ //                        ByteArrayOutputStream stream = new ByteArrayOutputStream(); //                        decodedImage.compress(Bitmap.CompressFormat.PNG, 100, stream); //                        byteArray = stream.toByteArray(); //                        s = Base64.encodeToString(byteArray, Base64.DEFAULT); //                    } newMood.setPhoto(s); Intent returnCreateMoodIntent = new Intent(); returnCreateMoodIntent.putExtra(""mood"", newMood); setResult(RESULT_OK, returnCreateMoodIntent); finish(); } } });  /** * This toggle when clicked saves the current location. */ saveLocation.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if(saveLocation.isChecked()) { GPSTracker gps = new GPSTracker(EditMoodActivity.this); LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);  if (locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) { Log.d(""UserLocation"", ""latitude:"" + gps.getLatitude() + "", longitude: "" + gps.getLongitude());  //sometimes only round to 3 decimals, I think it has to do with the //how the round function calculates latitude = Math.round(gps.getLatitude() * 10000d)/10000d; longitude = Math.round(gps.getLongitude() * 10000d)/10000d;  if(latitude == 0 & longitude == 0){ Toast.makeText(EditMoodActivity.this, ""Could not find your location, please try again!"", Toast.LENGTH_LONG).show(); } }  else{ Toast.makeText(EditMoodActivity.this, ""Please turn on GPS for locations!"", Toast.LENGTH_LONG).show(); } } else{ //NaN breaks the app when you undo location selection and complete mood creation //                    latitude = NaN; //                    longitude = NaN; latitude = 0.0; longitude = 0.0;  } } });  addPhoto.setOnClickListener(new View.OnClickListener() {  @Override public void onClick(View v) { Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE); startActivityForResult(cameraIntent, 3); imageView.setVisibility(View.VISIBLE); } }); } "	0	0	0	0	0	1
"static void objectArgument(final Tree.ObjectArgument that, final GenerateJsVisitor gen) { final Class c = (Class)that.getDeclarationModel().getTypeDeclaration();  gen.out(""(function()""); gen.beginBlock(); gen.out(""//ObjectArgument "", that.getIdentifier().getText()); gen.location(that); gen.endLine(); gen.out(GenerateJsVisitor.function, gen.getNames().name(c), ""()""); gen.beginBlock(); gen.instantiateSelf(c); gen.referenceOuter(c); Tree.ExtendedType xt = that.getExtendedType(); final Tree.ClassBody body = that.getClassBody(); final Tree.SatisfiedTypes sts = that.getSatisfiedTypes();  final List<Declaration> superDecs = new ArrayList<Declaration>(3); if (!gen.opts.isOptimize()) { new GenerateJsVisitor.SuperVisitor(superDecs).visit(that.getClassBody()); } TypeGenerator.callSupertypes(sts == null ? null : TypeUtils.getTypes(sts.getTypes()), xt == null? null : xt.getType(), c, that, superDecs, xt == null ? null : xt.getInvocationExpression(), xt == null ? null : c.getParameterList(), gen);  body.visit(gen); gen.out(""return "", gen.getNames().self(c), "";""); gen.endBlock(false, true); //Add reference to metamodel gen.out(gen.getNames().name(c), "".$crtmm$=""); TypeUtils.encodeForRuntime(c, null, gen); gen.endLine(true);  TypeGenerator.typeInitialization(xt, sts, c, new GenerateJsVisitor.PrototypeInitCallback() { @Override public void addToPrototypeCallback() { gen.addToPrototype(that, c, body.getStatements()); } }, gen, null); gen.out(""return "", gen.getNames().name(c), ""(new "", gen.getNames().name(c), "".$$);""); gen.endBlock(); gen.out(""())""); } "	0	0	0	0	0	1
"public synchronized ExecutorService getExecutorService() { if (executorService == null) { executorService = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), Util.threadFactory(""OkHttp Dispatcher"", false)); } return executorService; } "	0	0	0	0	0	1
@Override public boolean isValid() { Boolean valid = (_alleleValidator == Equality.TRUE && _alleleSeqValidator == Equality.TRUE) ? Boolean.TRUE : _valid;  if (valid == null) { final ISeq<A> alleles = toSeq().map(Gene::getAllele); valid = _alleleSeqValidator.test(alleles) && alleles.forAll(_alleleValidator); }  return _valid = valid; } 	0	0	0	0	0	1
"@Override public E remove(int index) { throw new UnsupportedOperationException(""Can't mofidy the OneList""); } "	0	0	0	0	0	1
public void installYamlFilesFromPackage(Archive archive, Session session) throws Exception; 	0	0	0	0	0	1
"public static long parseEpisodeReleaseDate(@Nullable Context context, @NonNull ZoneId showTimeZone, @Nullable String releaseDate, @NonNull LocalTime showReleaseTime, @Nullable String showCountry, @Nullable String showNetwork, @NonNull String deviceTimeZone) { if (releaseDate == null || releaseDate.length() == 0) { return Constants.EPISODE_UNKNOWN_RELEASE; }  // get date LocalDate localDate; try { localDate = LocalDate.parse(releaseDate); } catch (IllegalArgumentException e) { // date string could not be parsed if (context != null) { Utils.trackCustomEvent(context, AnalyticsTree.CATEGORY_THETVDB_ERROR, ""Date parsing failure"", releaseDate); } Timber.e(e, ""TheTVDB date could not be parsed: %s"", releaseDate); return Constants.EPISODE_UNKNOWN_RELEASE; }  // set time LocalDateTime localDateTime = localDate.atTime(showReleaseTime);  localDateTime = handleHourPastMidnight(showCountry, showNetwork, localDateTime);  // get a valid datetime in the show time zone, this auto-forwards time if inside DST gap ZonedDateTime dateTime = localDateTime.atZone(showTimeZone);  // handle time zone effects on release time for US shows (only if device is set to US zone) if (deviceTimeZone.startsWith(TIMEZONE_ID_PREFIX_AMERICA)) { dateTime = applyUnitedStatesCorrections(showCountry, deviceTimeZone, dateTime); }  return dateTime.toInstant().toEpochMilli(); } "	0	0	0	0	0	1
"@Override protected Void doInBackground(Void... params) { teamEventMatchesParsers.fetchJSON(""frc"" + teamNumber, eventKey, getContext()); while (teamEventMatchesParsers.parsingComplete) ; teamEventMatches.clear(); teamEventMatches.addAll(teamEventMatchesParsers.getTeamEventMatches()); Collections.sort(teamEventMatches); return null; } "	0	0	0	0	0	1
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ButterKnife.inject(this); setSupportActionBar(mToolbar);  ParseUser currentUser = ParseUser.getCurrentUser(); if (currentUser != null) { memberStartHome(); }  //login is invisible by default toggleLogin();  mGuest.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v){ guestStartHome(); } });  mMember.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v){ toggleLogin(); } });  mBack.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { toggleLogin(); } });  mForgotPassword.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v){ if(mEmail.getText().length() == 0){ String msg = ""Please enter your email then press \""forgot password\""""; Toast toast = Toast.makeText(getApplicationContext(), msg, Toast.LENGTH_LONG); toast.show(); } else{ ParseUser.requestPasswordResetInBackground(mEmail.getText().toString(), new RequestPasswordResetCallback() { @Override public void done(ParseException e) { if(e != null){ //display error message Toast.makeText(MainActivity.this, e.getMessage(), Toast.LENGTH_LONG).show(); } else{ //display ""reset password"" email sent confirmation String resetConfirmation = ""A reset password link has been send to your email""; Toast.makeText(MainActivity.this, resetConfirmation, Toast.LENGTH_LONG).show(); } } }); } } });  mSubmitLogin.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { boolean validationError = validate(); //no error -> login user if(!validationError){ //Set up a progress dialog final ProgressDialog dlg = new ProgressDialog(MainActivity.this); dlg.setTitle(""Please wait.""); dlg.setMessage(""Signing Up. Please wait.""); dlg.show();  //call the Parse login method ParseUser.logInInBackground(mEmail.getText().toString(), mPassword.getText().toString(), new LogInCallback() { @Override public void done(ParseUser parseUser, ParseException e) { dlg.dismiss(); if(e != null){ //display error message Toast.makeText(MainActivity.this, e.getMessage(), Toast.LENGTH_LONG).show(); }  else{ //start the home activity as an ewb member memberStartHome(); } } });  }  } });  } "	0	0	0	0	0	1
"public static int calculateExpression(String expression) { return calculateExpression(expression.split("" "")); } "	0	0	0	0	0	1
protected Converter getResponseDataConverter() { Gson gson = new GsonBuilder()  // Set our naming policy to transform underscores <-> camelCase .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES) .registerTypeAdapter(DateTime.class, new JodaDateTimeAdapter()) .registerTypeAdapterFactory(new RobinTypeAdapterFactory()) .registerTypeAdapter(Urn.class, new UrnAdapter()) .registerTypeAdapter(Account.Reference.class, new AccountReferenceAdapter()) .serializeNulls()  .create();  return new GsonConverter(gson); } 	0	0	0	0	0	1
"@GET @Path(""/invitation/{calendarId}/{calType}/{eventId}/{inviter}/{invitee}/{eXoId}/{answer}"") public Response processInvitationReply(@PathParam(""calendarId"") String calendarId, @PathParam(""calType"") String calType, @PathParam(""eventId"") String eventId, @PathParam(""inviter"") String inviter, @PathParam(""invitee"") String invitee, @PathParam(""eXoId"") String eXoId, @PathParam(""answer"") String answer, @Context HttpHeaders headers, @QueryParam(""lang"") String language) throws Exception { try { if(getCalendarService() instanceof Response) { return (Response) getCalendarService(); }  ExoContainer container = ExoContainerContext.getCurrentContainer(); String userId = eXoId.equals(""null"") ? null : eXoId; int ans = Integer.parseInt(answer);  Locale locale = Locale.ENGLISH; List<Locale> acceptableLanguages = headers.getAcceptableLanguages(); if(!acceptableLanguages.isEmpty()) { locale = acceptableLanguages.get(0); }  if(language != null && !language.isEmpty()) { locale = LocaleContextInfo.getLocale(language); } else if(userId != null) { OrganizationService organizationService = (OrganizationService)container.getComponentInstanceOfType(OrganizationService.class); UserProfile profile = organizationService.getUserProfileHandler().findUserProfileByName(userId); language = profile == null ? null : profile.getAttribute(""user.language""); if(language != null && !language.isEmpty()) { locale = LocaleContextInfo.getLocale(language); } } ResourceBundleService resourceBundleService = (ResourceBundleService)container.getComponentInstanceOfType(ResourceBundleService.class); ResourceBundle resource = resourceBundleService.getResourceBundle(""locale.rest.calendar.CalendarRest"", locale);  // save invitation status calendarService.confirmInvitation(inviter, invitee, userId, Integer.parseInt(calType), calendarId, eventId, ans);  String title = null; String message = null; String messageKey = """"; String defaultMessage = """"; switch (ans) { case Utils.ACCEPT: messageKey = ""rest.invitation.answer.accept""; defaultMessage = ""You have accepted invitation from {0}""; //response.append(""You have accepted invitation from "" + inviter); break; case Utils.DENY: messageKey = ""rest.invitation.answer.deny""; defaultMessage = ""You have refused invitation from {0}""; //response.append(""You have refused invitation from "" + inviter); break; case Utils.NOTSURE: messageKey = ""rest.invitation.answer.notsure""; defaultMessage = ""You have answered invitation from {0}: Not sure!""; //response.append(""You have answered invitation from "" + inviter + "" : Not sure!""); break; }  try { title = resource.getString(""rest.invitation.answer.title""); } catch (Exception ex) { title = ""Invitation Answer""; } try { message = resource.getString(messageKey); } catch (Exception ex) { message = defaultMessage; } message = message.replace(""{0}"", inviter);  StringBuffer response = new StringBuffer(); response.append(""<html><head><title>""); response.append(title); response.append(""</title></head>""); response.append(""<body>""); response.append(message); response.append(""</body></html>""); return Response.ok(response.toString(), MediaType.TEXT_HTML).cacheControl(cc).build(); } catch (Exception e) { if(log.isDebugEnabled()) log.debug(e.getMessage()); return Response.status(HTTPStatus.INTERNAL_ERROR).cacheControl(cc).build(); } } "	0	0	0	0	0	1
public int getY() { return mY; } 	0	0	0	0	0	1
"public void updateCGDProcessForMonographs(Integer batchSize) throws IOException, SolrServerException { logger.info(""Start"");  matchingAlgorithmUtil.populateMatchingCounter();  ExecutorService executorService = getExecutorService(50); List<Callable<Integer>> callables = new ArrayList<>(); long countOfRecordNum = reportDataDetailsRepository.getCountOfRecordNumForMatchingMonograph(RecapConstants.BIB_ID); logger.info(""Total Records : "" + countOfRecordNum); int totalPagesCount = (int) Math.ceil(countOfRecordNum / batchSize); logger.info(""Total Pages : "" + totalPagesCount); for(int pageNum = 0; pageNum < totalPagesCount + 1; pageNum++) { Callable callable = new MatchingAlgorithmCGDCallable(reportDataDetailsRepository, bibliographicDetailsRepository, pageNum, batchSize, producerTemplate, getCollectionGroupMap(), getInstitutionEntityMap(), itemChangeLogDetailsRepository, collectionGroupDetailsRepository); callables.add(callable); } Map<String, List<Integer>> unProcessedRecordNumberMap = executeCallables(executorService, callables);  List<Integer> nonMonographRecordNums = unProcessedRecordNumberMap.get(""NonMonographRecordNums""); List<Integer> exceptionRecordNums = unProcessedRecordNumberMap.get(""ExceptionRecordNums"");  matchingAlgorithmUtil.updateMonographicSetRecords(nonMonographRecordNums, batchSize);  matchingAlgorithmUtil.updateExceptionRecords(exceptionRecordNums, batchSize);  matchingAlgorithmUtil.saveCGDUpdatedSummaryReport();  logger.info(""PUL Final Counter Value: "" + MatchingCounter.getPulSharedCount()); logger.info(""CUL Final Counter Value: "" + MatchingCounter.getCulSharedCount()); logger.info(""NYPL Final Counter Value: "" + MatchingCounter.getNyplSharedCount());  DestinationViewMBean updateItemsQ = jmxHelper.getBeanForQueueName(""updateItemsQ"");  while (updateItemsQ.getQueueSize() != 0) { //Waiting for the updateItemQ messages finish processing }  executorService.shutdown(); } "	0	0	0	0	0	1
@Test public void varArgsAllOfByName() { assertThat( scanner.getNamesOfClassesWithMetaAnnotationsAllOf(MetaAnnotation.class.getName(), NonMetaAnnotation.class.getName())) // .containsExactly(MetaAndNonMetaAnnotatedClass.class.getName()); } 	0	0	0	0	0	1
"protected void addDateOptions(String type) { // Determine current state of combobox switch (type) { case ""Date/Time"": setSecondBox(new String[]{ ""dd-MM-yyyy HH:mm"", ""dd-MM-yyyy HH:mm:ss"", ""dd/MM/yyyy HH:mm"", ""dd/MM/yyyy HH:mm:ss"", ""Excel epoch""}); break; case ""Date"": setSecondBox(new String[]{""dd/MM/yyyy"", ""dd/MM/yy"", ""dd-MM-yyyy"", ""dd-MM-yy"", ""yyMMdd"", ""Excel epoch""}); break; case ""Time"": setSecondBox(new String[]{""HH:mm"", ""HHmm""}); break; default: break; } } "	0	0	0	0	0	1
public void setBandWidth(float bandWidth) { bw = bandWidth / sampleRate(); calcCoeff(); } 	0	0	0	0	0	1
public HttpParameters build() { Map<String, Parameter> parameters = (parent == null) ? new HashMap<String, Parameter>() : parent.parameters;  for (Object o : requestParameterMap.entrySet()) { Map.Entry entry = (Map.Entry) o; String name = String.valueOf(entry.getKey()); String[] value = (String[]) entry.getValue(); parameters.put(name, new Parameter.Request(name, value));  } return new HttpParameters(parameters); } 	0	0	0	0	0	1
@Override public boolean equals(Object obj) { if(obj == null) return false; if(obj == this) return true; if(obj instanceof ceylon.language.meta.model.MemberClassValueConstructor == false) return false; ceylon.language.meta.model.MemberClassValueConstructor<?,?,?> other = (ceylon.language.meta.model.MemberClassValueConstructor<?,?,?>) obj; return getDeclaration().equals(other.getDeclaration()) && getDeclaringType().equals(other.getDeclaringType()); } 	0	0	0	0	0	1
public Request method(String method, RequestBody body) throws IOException { mBuilder.method(method, body); return this; } 	0	0	0	0	0	1
public void updateMap() { if (mapEntity == null || mapEntity.getId() == null) return;  savedPlayers.clear(); savedPlayers = new ArrayList<>(gameInstanceEntity.getPlayers());  ///OGL: //mMapImage.postInvalidate(); glRenderer.placeChips(); //TODO: error } 	0	0	0	0	0	1
"public void disconnect(final String address) { if (this.bluetoothGatt.containsKey(address)) { Log.d(TAG, ""disconnect() "" + address); this.bluetoothGatt.get(address).disconnect(); this.bluetoothGatt.get(address).close(); this.bluetoothGatt.remove(address); } } "	0	0	0	0	0	1
private void somethingGoesWrong() { Toast.makeText(this, R.string.something_goes_wrong, Toast.LENGTH_LONG).show(); } 	0	0	0	0	0	1
"@Override protected void configure(HttpSecurity http) throws Exception { http. requestMatchers() .antMatchers(""/oauth/**"", ""/authorize"", ""/login"", ""/logout"") .and() .authorizeRequests() .antMatchers(HttpMethod.OPTIONS, ""**"").permitAll() .antMatchers(""/login"").permitAll() .anyRequest().authenticated() .and() .formLogin() .authenticationDetailsSource(authenticationDetailsSource()) .failureHandler(authenticationFailureHandler()) .permitAll() .and() .logout() .logoutRequestMatcher(new AntPathRequestMatcher(""/logout"")) .logoutSuccessHandler(new CustomLogoutSuccessHandler()) .and() .exceptionHandling() .authenticationEntryPoint(new OAuth2LoginUrlAuthenticationEntryPoint(""/login"")) .and() .addFilterAfter(corsFilter(), AbstractPreAuthenticatedProcessingFilter.class);  } "	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") private CompletableFuture<PublishResponse> handlePublish(PublishRequest request) { state.getLogger().debug(""{} - Received {}"", state.getSessionId(), request);  // If the request is for another session ID, this may be a session that was previously opened // for this client. if (request.session() != state.getSessionId()) { state.getLogger().debug(""{} - Inconsistent session ID: {}"", state.getSessionId(), request.session()); return Futures.exceptionalFuture(new UnknownSessionException(""incorrect session ID"")); }  // If the request's previous event index doesn't equal the previous received event index, // respond with an undefined error and the last index received. This will cause the cluster // to resend events starting at eventIndex + 1. if (request.previousIndex() != state.getEventIndex()) { state.getLogger().debug(""{} - Inconsistent event index: {}"", state.getSessionId(), request.previousIndex()); return CompletableFuture.completedFuture(PublishResponse.builder() .withStatus(Response.Status.ERROR) .withIndex(state.getEventIndex()) .build()); }  // Store the event index. This will be used to verify that events are received in sequential order. state.setEventIndex(request.eventIndex());  // For each event in the events batch, call the appropriate event listener and create a CompletableFuture // to be called once the event callback is complete. Futures will ensure that an event is not acknowledged // until all event callbacks have completed. List<CompletableFuture<Void>> futures = new ArrayList<>(request.events().size()); for (Event<?> event : request.events()) { Listeners<Object> listeners = eventListeners.get(event.name()); if (listeners != null) { futures.add(listeners.accept(event.message())); } }  // Wait for all event listeners to complete and then respond to the event message. This ensures that // linearizable events are completed between their invocation and response. If the async queue is backed // up and we don't wait for callbacks to complete, the cluster will believe an event to have been received // and handled before it has indeed been received and handled. return CompletableFuture.allOf(futures.toArray(new CompletableFuture<?>[futures.size()])) .handleAsync((result, error) -> { // Store the highest index for which event callbacks have completed. state.setCompleteIndex(request.eventIndex());  return PublishResponse.builder() .withStatus(Response.Status.OK) .withIndex(state.getEventIndex()) .build(); }, context.executor()); } "	0	0	0	0	0	1
"public void onEventMainThread(ConnectionChangeEvent event) { setSubtitle(event.status.name());  switch (event.status) { case HANDSHAKE: break; case CORE_SETUP_REQUIRED: break; case LOGIN_REQUIRED: assertNotNull(context.getClient());  showLoginDialog(); break; case USER_SETUP_REQUIRED: break; case CONNECTED: Log.e(""TIME"", String.valueOf(System.currentTimeMillis())); updateBufferViewConfigs(); break; } } "	0	0	0	0	0	1
"public static void convertText(String text, String name, Boolean speakFlag) throws IOException, UnsupportedAudioFileException, LineUnavailableException{ text = text+ "" <end>""; speak = speakFlag; outputName = name + "".wav""; ArrayList<String> textList = new ArrayList<>(); ArrayList<String> emotionList = new ArrayList<>(); String list[] = text.split("" ""); for (int i = 0; i < list.length-1; i++){ if(list[i].equals(""<a>"") || list[i].equals(""<f>"") || list[i].equals(""<d>"") || list[i].equals(""<s>"") || list[i].equals(""<j>"")){ emotionList.add(list[i]); String line = """"; for (i = i+1; !list[i].startsWith(""</""); i++) line += list[i] + "" ""; textList.add(line); } else if(list[i].equals("""")) { } else{ emotionList.add(""None""); String line = """"; for (i = i; !list[i].startsWith(""<"") && !list[i].equals(""<end>""); i++) line += list[i] + "" ""; textList.add(line); i--; } }  ArrayList paths = new ArrayList(); for (int i = 0; i < textList.size(); i++){ convertSpeech(textList.get(i), emotionList.get(i), ""VoicePt""+i); paths.add(""VoicePt""+i+"".wav""); }  combineWav(paths); if (speak) playSound(outputName);  //         System.gc(); //        for(int i = 0; i < paths.size(); i++) //            Files.delete(FileSystems.getDefault().getPath(paths.get(i).toString())); // //        Files.delete(FileSystems.getDefault().getPath(outputName)); } "	0	0	0	0	0	1
@Override public boolean hasNext() { try { DotNetValueProxy invoke = myMoveNextMethod.invoke(myFrameProxy, myValue); return invoke instanceof DotNetBooleanValueProxy && ((DotNetBooleanValueProxy) invoke).getValue(); } catch(DotNetThrowValueException ignored) { return false; } } 	0	0	0	0	0	1
"@Specification(""echo.inactivity.timeout.should.close"") @Test(timeout = 15000) public void testEchoInactiveTimeoutShouldCloseConnection() throws Exception { robot.finish(); } "	0	0	0	0	0	1
"public void processTouchEvent(MotionEvent ev) { final int action = MotionEventCompat.getActionMasked(ev); final int actionIndex = MotionEventCompat.getActionIndex(ev);  if (action == MotionEvent.ACTION_DOWN) { // Reset things for a new event stream, just in case we didn't get // the whole previous stream. cancel(); }  if (mVelocityTracker == null) { mVelocityTracker = VelocityTracker.obtain(); } mVelocityTracker.addMovement(ev);  switch (action) { case MotionEvent.ACTION_DOWN: { final float x = ev.getX(); final float y = ev.getY(); final int pointerId = MotionEventCompat.getPointerId(ev, 0); final View toCapture = findTopChildUnder((int) x, (int) y);  saveInitialMotion(x, y, pointerId);  // Since the parent is already directly processing this touch event, // there is no reason to delay for a slop before dragging. // Start immediately if possible. tryCaptureViewForDrag(toCapture, pointerId);  final int edgesTouched = mInitialEdgesTouched[pointerId]; if ((edgesTouched & mTrackingEdges) != 0) { mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId); } break; }  case MotionEventCompat.ACTION_POINTER_DOWN: { final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex); final float x = MotionEventCompat.getX(ev, actionIndex); final float y = MotionEventCompat.getY(ev, actionIndex);  saveInitialMotion(x, y, pointerId);  // A ViewDragHelper can only manipulate one view at a time. if (mDragState == STATE_IDLE) { // If we're idle we can do anything! Treat it like a normal down event.  final View toCapture = findTopChildUnder((int) x, (int) y); tryCaptureViewForDrag(toCapture, pointerId);  final int edgesTouched = mInitialEdgesTouched[pointerId]; if ((edgesTouched & mTrackingEdges) != 0) { mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId); } } else if (isCapturedViewUnder((int) x, (int) y)) { // We're still tracking a captured view. If the same view is under this // point, we'll swap to controlling it with this pointer instead. // (This will still work if we're ""catching"" a settling view.)  tryCaptureViewForDrag(mCapturedView, pointerId); } break; }  case MotionEvent.ACTION_MOVE: { if (mDragState == STATE_DRAGGING) { final int index = MotionEventCompat.findPointerIndex(ev, mActivePointerId); final float x = MotionEventCompat.getX(ev, index); final float y = MotionEventCompat.getY(ev, index); final int idx = (int) (x - mLastMotionX[mActivePointerId]); final int idy = (int) (y - mLastMotionY[mActivePointerId]);  dragTo(mCapturedView.getLeft() + idx, mCapturedView.getTop() + idy, idx, idy);  saveLastMotion(ev); } else { // Check to see if any pointer is now over a draggable view. final int pointerCount = MotionEventCompat.getPointerCount(ev); for (int i = 0; i < pointerCount; i++) { final int pointerId = MotionEventCompat.getPointerId(ev, i) ; final float x = MotionEventCompat.getX(ev, i); final float y = MotionEventCompat.getY(ev, i); final float dx = x - mInitialMotionX[pointerId]; final float dy = y - mInitialMotionY[pointerId];  reportNewEdgeDrags(dx, dy, pointerId); if (mDragState == STATE_DRAGGING) { // Callback might have started an edge drag. break; }  final View toCapture = findTopChildUnder((int) x, (int) y); if (checkTouchSlop(toCapture, dx, dy) && tryCaptureViewForDrag(toCapture, pointerId)) { break; } } saveLastMotion(ev); } break; }  case MotionEventCompat.ACTION_POINTER_UP: { final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex); if (mDragState == STATE_DRAGGING && pointerId == mActivePointerId) { // Try to find another pointer that's still holding on to the captured view. int newActivePointer = INVALID_POINTER; final int pointerCount = MotionEventCompat.getPointerCount(ev); for (int i = 0; i < pointerCount; i++) { final int id = MotionEventCompat.getPointerId(ev, i); if (id == mActivePointerId) { // This one's going away, skip. continue; }  final float x = MotionEventCompat.getX(ev, i); final float y = MotionEventCompat.getY(ev, i); if (findTopChildUnder((int) x, (int) y) == mCapturedView && tryCaptureViewForDrag(mCapturedView, id)) { newActivePointer = mActivePointerId; break; } }  if (newActivePointer == INVALID_POINTER) { // We didn't find another pointer still touching the view, release it. releaseViewForPointerUp(); } } clearMotionHistory(pointerId); break; }  case MotionEvent.ACTION_UP: { if (mDragState == STATE_DRAGGING) { releaseViewForPointerUp(); } cancel(); break; }  case MotionEvent.ACTION_CANCEL: { if (mDragState == STATE_DRAGGING) { dispatchViewReleased(0, 0); } cancel(); break; } } } "	0	0	0	0	0	1
"private boolean sendPushPush(Notification notification) { User user = userService.findById(notification.getUser().getId()); // TODO multi lang --- see user setting PushManager.getInstance().sendNotification( PushManager.PLATFORM_ANDROID, user.getPushID(), ""new events in your neighborhood"", ""en"", // locale ""{}""); log.info(""OK - PUSH SEND BY PUSH ("" + user.getPushID() + "")""); return true; } "	0	0	0	0	0	1
private void setupBackground() { mBackgroundManager = BackgroundManager.getInstance(getActivity()); mBackgroundManager.attach(getActivity().getWindow()); mMetrics = new DisplayMetrics(); getActivity().getWindowManager().getDefaultDisplay().getMetrics(mMetrics);  // load artist from API to get their image mSpotifyService.getArtist(mArtistId, new Callback<Artist>() { @Override public void success(Artist artist, Response response) { if (artist.images != null && !artist.images.isEmpty()) { final String imageUrl = artist.images.get(0).url;  mHandler.post(new Runnable() { @Override public void run() { loadBackgroundImage(imageUrl); } }); } }  @Override public void failure(RetrofitError error) {  } }); } 	0	0	0	0	0	1
"private static Map <String, ClinicalAttributesMetadata> getClinicalAttributesMetadata(Config config, List<String> normalizedColumnHeaderNames, boolean supplyDefaultClinicalAttributeValues) { Map<String, ClinicalAttributesMetadata> toReturn = new HashMap<String, ClinicalAttributesMetadata>(); for (String columnHeader : normalizedColumnHeaderNames) { Collection<ClinicalAttributesMetadata> metadata = config.getClinicalAttributesMetadata(columnHeader.toUpperCase()); if (!metadata.isEmpty()) { toReturn.put(columnHeader, metadata.iterator().next()); } if (supplyDefaultClinicalAttributeValues) { String[] properties = new String[] { columnHeader, columnHeader, columnHeader, ""STRING"", ""PATIENT"", ""1""}; ClinicalAttributesMetadata m = new ClinicalAttributesMetadata(properties); toReturn.put(columnHeader, m); } } return toReturn; } "	0	0	0	0	0	1
"private Definition addImplicitComputationCellTransformer(Definition input) { ConfigurationInfoFromModule configInfo = new ConfigurationInfoFromModule(input.mainModule()); LabelInfo labelInfo = new LabelInfoFromModule(input.mainModule()); SortInfo sortInfo = SortInfo.fromModule(input.mainModule()); return DefinitionTransformer.fromRuleBodyTranformer( new AddImplicitComputationCell(configInfo, labelInfo), ""concretizing configuration"").apply(input); } "	0	0	0	0	0	1
protected boolean isCell(K k) { return k instanceof KApply && cfg.isCell(labelInfo.getCodomain(((KApply) k).klabel())); } 	0	0	0	0	0	1
"private int pipeStdOut(IDeviceConnection conn, String appPath) throws Exception { log(""App Path: %s"", appPath);  // Talk to the debugserver using the GDB remote protocol. // See https://sourceware.org/gdb/onlinedocs/gdb/Remote-Protocol.html. // This process has been determined by observing how Xcode talks to // the debugserver. To enable GDB remote protocol logging in Xcode // write the following to ~/.lldbinit: //   log enable -v -f /tmp/gdb-remote.log gdb-remote all // Disable ack mode sendGdbPacket(conn, ""+""); sendReceivePacket(conn, encode(""QStartNoAckMode""), ""OK"", true); sendGdbPacket(conn, ""+"");  // Disable buffered IO. Xcode does it so we do it too. sendReceivePacket(conn, encode(""QEnvironment:NSUnbufferedIO=YES""), ""OK"", false); // Set environment variables for (Entry<String, String> entry : env.entrySet()) { String cmd = String.format(""QEnvironment:%s=%s"", entry.getKey(), entry.getValue()); sendReceivePacket(conn, encode(cmd), ""OK"", false); } // Tell the debuserver to send threads:xxx,yyy,... in stop replies sendReceivePacket(conn, encode(""QListThreadsInStopReply""), ""OK"", false); // Initialize argv with the app path and args sendReceivePacket(conn, encode(""A"" + encodeArgs(appPath)), ""OK"", false); // Make sure the launch was successful sendReceivePacket(conn, encode(""qLaunchSuccess""), ""OK"", false); // Continue sendGdbPacket(conn, encode(""c""));  boolean wasInterrupted = false; try { StringBuilder messages = new StringBuilder(); while (true) { try { String response = receiveGdbPacket(conn); String payload = decode(response); if (payload.charAt(0) == 'W') { // The app exited. The number following W is the exit code. int exitCode = Integer.parseInt(payload.substring(1), 16); return exitCode; } else if (payload.charAt(0) == 'O') { // Console output encoded as hex. byte[] msg = fromHex(payload.substring(1)); if(appLauncherCallback != null) { try { String str = new String(msg, ""UTF-8""); messages.append(str); String[] lines = messages.toString().split(""\n""); for(String line: lines) { if(line.startsWith(""[DEBUG] hooks: debugPort="")) { // check if this is the last line, in which // case we wait for another line so we know // the line's complete if(line == lines[lines.length - 1]) break; int debugPort = Integer.parseInt(line.substring(""[DEBUG] hooks: debugPort="".length()).trim()); appLauncherCallback.setDebugPort(debugPort); // we don't want to call the callback anymore and check // every string appLauncherCallback = null; } } } catch(Throwable t) { // nothing to do here } } stdout.write(msg); } else if (payload.charAt(0) == 'T') { // Signal received. Just continue. // The Continue packet looks like this (thread 0x2403 was interrupted by signal 0x0b): //   $vCont;c:2603;c:2703;c:2803;c:2903;c:2a03;c:2b03;c:2c03;c:2d03;C0b:2403#ed String signal = payload.substring(1, 3); String data = payload.substring(3); String threadId = data.replaceAll("".*thread:([0-9a-fA-F]+).*"", ""$1""); String allThreadIds = data.replaceAll("".*threads:([0-9a-fA-F,]+).*"", ""$1""); Set<String> ids = new TreeSet<>(Arrays.asList(allThreadIds.split("",""))); ids.remove(threadId); StringBuilder sb = new StringBuilder(""vCont;""); for (String id : ids) { sb.append(""c:"").append(id).append(';'); } sb.append('C').append(signal).append(':').append(threadId); sendGdbPacket(conn, encode(sb.toString())); } else if (payload.charAt(0) == 'X') { int signal = Integer.parseInt(payload.substring(1, 3), 16); String data = payload.substring(3); String description = null; if (data.contains(""description:"")) { description = new String(fromHex(data.replaceAll("".*description:([0-9a-fA-F]+).*"", ""$1"")), ""UTF8"").trim(); description = description.trim(); description = description.isEmpty() ? null : description; } String message = signal > 0 ? ""The app crashed with signal "" + signal : ""The app crashed""; if (description != null) { message += "": "" + description; } message += "". Check the device logs in Xcode (Window->Devices) for more info.""; throw new RuntimeException(message); } else { throw new RuntimeException(""Unexpected response "" + ""from debugserver: "" + response); } } catch (InterruptedIOException e) { // Remember whether we were interrupted. kill() clears // the thread's interrupted state and we want to reset it // when we exit. wasInterrupted = Thread.currentThread().isInterrupted(); kill(conn); } } } finally { if (wasInterrupted) { Thread.currentThread().interrupt(); } } } "	0	0	0	0	0	1
private XsltTransformer buildTransformer(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, boolean... isFake) throws InvalidSyntaxException, URISyntaxException, MalformedURLException, SaxonApiException, FileNotFoundException, IOException { return buildTransformer(pipe, inputFile, inputFileUri, parameters, listener, documentTree, false, new HashMap<String,OutputStream>()); } 	0	0	0	0	0	1
private Destination buildShortPipeTransformer(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, Map<String, OutputStream> outputs) throws InvalidSyntaxException, URISyntaxException, MalformedURLException, SaxonApiException, FileNotFoundException, IOException { if(!pipe.getXslts().hasNext()) { if(pipe.getOutput()!=null) { return buildSerializer(pipe.getOutput(),inputFile, parameters, outputs); } else { return buildTransformer(pipe.getTee(), inputFile, inputFileUri, parameters, listener, documentTree, outputs); } } else { return buildTransformer(pipe, inputFile, inputFileUri, parameters, listener, documentTree); } } 	0	0	0	0	0	1
@Override public AbstractServiceRemote newInitializedInstance(ServiceType serviceType, Collection<UnitConfig> unitConfigs) throws CouldNotPerformException, InterruptedException { AbstractServiceRemote serviceRemote = newInstance(serviceType); serviceRemote.init(unitConfigs); return serviceRemote; } 	0	0	0	0	0	1
protected void mockProperty(String property, String value) { Mockito.when( props.get(property) ).thenReturn( value ); } 	0	0	0	0	0	1
"@Override public void onAnyTimeInterrogationRequest(AnyTimeInterrogationRequest atiReq) {  if (logger.isDebugEnabled()) { logger.debug( String.format(""onAnyTimeInterrogationRequest for DialogId=%d"", atiReq.getMAPDialog().getLocalDialogId())); }  try { long invokeId = atiReq.getInvokeId(); MAPDialogMobility mapDialogMobility = atiReq.getMAPDialog(); mapDialogMobility.setUserObject(invokeId);  MAPParameterFactoryImpl mapFactory = new MAPParameterFactoryImpl();  // Create Subscriber Information parameters including Location Information and Subscriber State // for concerning MAP operation CellGlobalIdOrServiceAreaIdFixedLength cellGlobalIdOrServiceAreaIdFixedLength = mapFactory .createCellGlobalIdOrServiceAreaIdFixedLength(748, 1, 23, 369); CellGlobalIdOrServiceAreaIdOrLAI cellGlobalIdOrServiceAreaIdOrLAI = mapFactory .createCellGlobalIdOrServiceAreaIdOrLAI(cellGlobalIdOrServiceAreaIdFixedLength); ISDNAddressString vlrNumber = new ISDNAddressStringImpl(AddressNature.international_number, org.mobicents.protocols.ss7.map.api.primitives.NumberingPlan.ISDN, ""5982123007""); ISDNAddressString mscNumber = new ISDNAddressStringImpl(AddressNature.international_number, org.mobicents.protocols.ss7.map.api.primitives.NumberingPlan.ISDN, ""5982123007""); Integer ageOfLocationInformation = 0; // ageOfLocationInformation GeographicalInformation geographicalInformation = null; LocationNumberMap locationNumber = null; MAPExtensionContainer mapExtensionContainer = null; LSAIdentity selectedLSAId = null; GeodeticInformation geodeticInformation = null; boolean currentLocationRetrieved = false; boolean saiPresent = false; LocationInformationEPS locationInformationEPS = null; UserCSGInformation userCSGInformation = null; LocationInformationGPRS locationInformationGPRS = null; PSSubscriberState psSubscriberState = null; IMEI imei = null; MSClassmark2 msClassmark2 = null; GPRSMSClass gprsMSClass = null; MNPInfoRes mnpInfoRes = null; SubscriberStateChoice subscriberStateChoice = null; // 0=assumedIdle, 1=camelBusy, 2=notProvidedFromVLR NotReachableReason notReachableReason = null;  LocationInformation locationInformation = mapFactory.createLocationInformation(ageOfLocationInformation, geographicalInformation, vlrNumber, locationNumber, cellGlobalIdOrServiceAreaIdOrLAI, mapExtensionContainer, selectedLSAId, mscNumber, geodeticInformation, currentLocationRetrieved, saiPresent, locationInformationEPS, userCSGInformation);  SubscriberState subscriberState = mapFactory.createSubscriberState(subscriberStateChoice, notReachableReason);  SubscriberInfo subscriberInfo = mapFactory.createSubscriberInfo(locationInformation, subscriberState, mapExtensionContainer, locationInformationGPRS, psSubscriberState, imei, msClassmark2, gprsMSClass, mnpInfoRes);  mapDialogMobility.addAnyTimeInterrogationResponse(invokeId, subscriberInfo, mapExtensionContainer);  // This will initiate the TC-BEGIN with INVOKE component mapDialogMobility.send();  } catch (MAPException mapException) { logger.error(""MAP Exception while processing AnyTimeInterrogationRequest "", mapException); } catch (Exception e) { logger.error(""Exception while processing AnyTimeInterrogationRequest "", e); }  } "	0	0	0	0	0	1
@Override public void onReload() { mediator.reload(); } 	0	0	0	0	0	1
public void start(final ByteOutput byteOutput) throws IOException { super.start(byteOutput); } 	0	0	0	0	0	1
"public static Emargement getById(int emargement_id, int professeur_id) throws SQLException { Connection connection = Database.getDbCon().conn;  String query = ""SELECT * FROM ""+emargement_table+"" e "" + ""JOIN ""+matiere_table+""     m ON m.id = e.matiere_id "" + ""JOIN ""+professeur_table+""  p ON p.id = e.professeur_id "" + ""JOIN ""+join_table_groupe+"" j ON j.emargement_id = e.id "" + ""JOIN ""+groupe_table+""      g ON j.groupe_id = g.id "" + ""JOIN ""+classe_table+""      c ON g.groupe_id = c.id "" + ""WHERE e.id = ? ""+ ""AND e.professeur_id = ?"";  PreparedStatement stmt = connection.prepareStatement(query); stmt.setInt(1, emargement_id); stmt.setInt(2, professeur_id);  ResultSet rs = stmt.executeQuery(); Emargement emargement = null; while(rs.next()) { if(emargement == null) { emargement = new Emargement(); emargement.setId(emargement_id); emargement.setDate(rs.getTimestamp(""e.date"")); emargement.setType_cours(rs.getString(""e.type_cours""));  Matiere matiere = new Matiere(); matiere.setId(rs.getInt(""m.id"")); matiere.setLibelle(rs.getString(""m.libelle"")); emargement.setMatiere(matiere);  Professeur professeur = new Professeur(); professeur.setId(rs.getInt(""p.id"")); professeur.setNom(rs.getString(""p.nom"")); professeur.setPrenom(rs.getString(""p.prenom"")); emargement.setProfesseur(professeur); }  Classe classe = new Classe(); classe.setId(rs.getInt(""c.id"")); classe.setLibelle(rs.getString(""c.libelle""));  Groupe groupe = new Groupe(); groupe.setId(rs.getInt(""g.id"")); groupe.setLibelle(rs.getString(""g.libelle"")); groupe.setClasse(classe); emargement.addGroupe(groupe);  } return emargement; } "	0	0	0	0	0	1
private static EObject createNode(IPatternMatch match, TGGRuleNode node, Resource resource) { EObject newObj = createNodeByTGGRuleNode(node);  node.getAttrExpr().stream().filter(attrExpr -> attrExpr.getOperator().equals(TGGAttributeConstraintOperators.EQUAL)) .forEach(attrExpr -> { applyInplaceAttributeAssignments(attrExpr, newObj, match); }); resource.getContents().add(newObj); return newObj; } 	0	0	0	0	0	1
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); fm = getSupportFragmentManager();  setSupportActionBar(toolbar); getSupportActionBar().setHomeButtonEnabled(true);  if (BuildConfig.DEBUG) debugSettings.setVisibility(View.VISIBLE);  // Make the up button work as a back button // http://stackoverflow.com/a/24878407/283607 backStackChangedListener = new FragmentManager.OnBackStackChangedListener() { @Override public void onBackStackChanged() { FragmentManager fm = getSupportFragmentManager(); int stackHeight = fm.getBackStackEntryCount(); if (stackHeight > 0) { drawerToggle.setDrawerIndicatorEnabled(false); getSupportActionBar().setDisplayHomeAsUpEnabled(true); } else { getSupportActionBar().setDisplayHomeAsUpEnabled(false); drawerToggle.setDrawerIndicatorEnabled(true); drawerToggle.syncState(); } // http://stackoverflow.com/a/18752763/283607 Fragment fragment = fm.getFragments().get(stackHeight); if (fragment != null) fragment.onResume(); // To remember the visibility of the toolbar // and rehide it on return if necessary. if (fragment instanceof UiFragment) { UiFragment f = (UiFragment) fragment; ViewHelper.setTranslationY(toolbar, f.toolbarPosition); } } }; fm.addOnBackStackChangedListener(backStackChangedListener);  drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close); // If the drawerindicator is disabled the onOptionsItemSelected of // MainActivity used to be called with the old actionbar. But not so // with the retarted toolbar. drawerToggle.setToolbarNavigationClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (!drawerToggle.isDrawerIndicatorEnabled()) { onOptionsItemSelected(Util.mockHomeButton); } } }); drawerLayout.setDrawerListener(drawerToggle);  favoriteBoardsAdapter = new FavoritesAdapter(this, new ArrayList<>(persistentData.getFavorites())); favoriteBoardsView.setAdapter(favoriteBoardsAdapter); favoriteBoardsAdapter.notifyDataSetChanged(); persistentData.addFavoritesChangedCallback(new PersistentData.FavoritesCallback() { @Override public void onChanged(Set<Board> newFavorites) { favoriteBoardsAdapter.updateItems(new ArrayList<>(newFavorites)); if (newFavorites.isEmpty()) favoriteBoardsHeader.setVisibility(View.GONE); else favoriteBoardsHeader.setVisibility(View.VISIBLE); } }); favoriteBoardsView.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { clearBackStackOnDrawerClick(); Fragment f = ThreadsFragment.create(favoriteBoardsAdapter.getItem(position).name); fm.beginTransaction() .replace(R.id.container, f, null) .commit(); } });  if (persistentData.getFavorites().size() == 0) { favoriteBoardsHeader.setVisibility(View.GONE); Fragment f = new BoardsFragment(); fm.beginTransaction() .replace(R.id.container, f, null) .commit(); } else { favoriteBoardsHeader.setVisibility(View.VISIBLE); Fragment f = new FavoritesFragment(); fm.beginTransaction() .replace(R.id.container, f, null) .commit(); } } 	0	0	0	0	0	1
"public ChunkMarker[] getChunkMarkers(SQLiteDatabase db, String projectSlug) { List<ChunkMarker> chunkMarkers = new ArrayList<>(); Cursor cursor = db.rawQuery(""SELECT `cm`.`chapter_slug`, `cm`.`first_verse_slug` FROM `chunk_markers` AS `cm`"" + "" LEFT JOIN `project` AS `p` ON `p`.`id` = `cm`.`project_id`"" + "" WHERE `p`.`slug`=?"", new String[]{projectSlug}); cursor.moveToFirst(); while(!cursor.isAfterLast()) { chunkMarkers.add(new ChunkMarker(cursor.getString(0), cursor.getString(1))); cursor.moveToNext(); } cursor.close(); return chunkMarkers.toArray(new ChunkMarker[chunkMarkers.size()]); } "	0	0	0	0	0	1
"@Override public void newInstallationCheck(ExtendedJdbcTemplate ejt) { if (!Common.databaseProxy.tableExists(ejt, ""watchLists"")) { String path = Common.M2M2_HOME + getModule().getDirectoryPath() + ""/web/db/createTables-"" + Common.databaseProxy.getType().name() + "".sql""; Common.databaseProxy.runScriptFile(path, null); } } "	0	0	0	0	0	1
public List<Long> getBasketsIdByUserAndPeriod(long userId, int period) throws SystemException { try { return BasketLocalServiceUtil.getBasketsIdByUserAndPeriod(userId, period); } catch (NoSuchModelException e) { e.printStackTrace(); }  return null; } 	0	0	0	0	0	1
public List<Basket> getBasketsByIds(long[] basketIds) throws SystemException { try { return BasketLocalServiceUtil.getBasketsByIds(basketIds); } catch (NoSuchModelException e) { e.printStackTrace(); }  return null; } 	0	0	0	0	0	1
"public boolean findActualDate(String actualDate) { boolean status = false; try { status = findElement(By.xpath(""//*[@id='instancesTable']/tbody/tr[2]/td[3]"")).getAttribute(""innerHTML"") .contains(actualDate); } catch (Exception e) { status = false; getLogger().error(""findActualDate - Exception . Reason : "" + e.getLocalizedMessage(), e); } return status; } "	0	0	0	0	0	1
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); setContentView(R.layout.activity_hourly_api_calls);  Intent intent = getIntent(); mApiName = (String)intent.getSerializableExtra(""apiName"");  mData = DataContainer.getInstance().getApiCalls();  ActionBar actionBar = getActionBar(); actionBar.setTitle( (CharSequence) DataContainer.getInstance().getSelectedMachine() );  TextView apiNameView = (TextView) findViewById(R.id.apiName); apiNameView.setText(mApiName); apiNameView.setTypeface(Typeface.DEFAULT);  mChart = (LineChart)findViewById(R.id.chart1); mChart.setOnChartValueSelectedListener(this);  // no description text mChart.setDescription(""""); mChart.setNoDataTextDescription(""You need to provide data for the chart."");  // enable touch gestures mChart.setTouchEnabled(true);  mChart.setDragDecelerationFrictionCoef(0.9f);  // enable scaling and dragging mChart.setDragEnabled(true); mChart.setScaleEnabled(true); mChart.setDrawGridBackground(false); mChart.setHighlightPerDragEnabled(true);  // if disabled, scaling can be done on x- and y-axis separately mChart.setPinchZoom(true);  // set an alternative background color mChart.setBackgroundColor(Color.LTGRAY);  // add data setData();  mChart.animateX(2500);  // get the legend (only possible after setting data) Legend l = mChart.getLegend();  XAxis xAxis = mChart.getXAxis(); xAxis.setTypeface(Typeface.DEFAULT); xAxis.setTextSize(12f); xAxis.setTextColor(Color.WHITE); xAxis.setDrawGridLines(false); xAxis.setDrawAxisLine(false); xAxis.setSpaceBetweenLabels(1); xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);  YAxis leftAxis = mChart.getAxisLeft(); leftAxis.setTypeface(Typeface.DEFAULT); leftAxis.setTextColor(ColorTemplate.getHoloBlue()); leftAxis.setAxisMaxValue(mChart.getYChartMax()); leftAxis.setDrawGridLines(true);  YAxis rightAxis = mChart.getAxisRight(); rightAxis.setEnabled(false); } "	0	0	0	0	0	1
public static void clear() { ThreadContext.genericObjects.get().clear(); } 	0	0	0	0	0	1
"@Override @SuppressWarnings(""unchecked"") public List<HealthMapReportEntry> getHealthMapDiseaseReportEntries() { return sessionFactory.getCurrentSession().createQuery( BASE_HEALTH_MAP_REPORT_QUERY.replaceAll(""qualifier"", ""diseaseGroup"") ).list(); } "	0	0	0	0	0	1
"@Override @SuppressWarnings(""unchecked"") public List<HealthMapReportEntry> getHealthMapCountryReportEntries() { return sessionFactory.getCurrentSession().createQuery( BASE_HEALTH_MAP_REPORT_QUERY.replaceAll(""qualifier"", ""country"") ).list(); } "	0	0	0	0	0	1
double[] getCoords() { return checkpoints.get(currentCheckpoint).getLocation(); } 	0	0	0	0	0	1
"@SuppressWarnings(""deprecation"") @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);  addPreferencesFromResource(R.xml.preferences);  ListPreference listPreference = (ListPreference) findPreference(getResources().getString( R.string.preference_key_select_camera)); int cameraCount = Camera.getNumberOfCameras(); String[] entryValues = new String[cameraCount]; CharSequence[] entries = new CharSequence[cameraCount]; for (int id = 0; id < cameraCount; id++) { entryValues[id] = Integer.toString(id); Camera.CameraInfo cameraInfo = new Camera.CameraInfo(); Camera.getCameraInfo(id, cameraInfo); switch (cameraInfo.facing) { case CameraInfo.CAMERA_FACING_FRONT: entries[id] = getResources().getText(R.string.camera_facing_front); break; case CameraInfo.CAMERA_FACING_BACK: entries[id] = getResources().getText(R.string.camera_facing_back); break; default: Log.d(""CAMERA"", ""No Camera detected""); } } listPreference.setEntries(entries); listPreference.setEntryValues(entryValues);  setNXTSensors();  ActionBar actionBar = getSupportActionBar();  actionBar.setTitle(R.string.preference_title); actionBar.setHomeButtonEnabled(true);  screen = getPreferenceScreen();  if (!BuildConfig.FEATURE_LEGO_NXT_ENABLED) { CheckBoxPreference legoNxtPreference = (CheckBoxPreference) findPreference(SETTINGS_MINDSTORMS_NXT_BRICKS_ENABLED); legoNxtPreference.setEnabled(false); screen.removePreference(legoNxtPreference); }  if (!BuildConfig.FEATURE_PARROT_AR_DRONE_ENABLED) { CheckBoxPreference dronePreference = (CheckBoxPreference) findPreference(SETTINGS_SHOW_PARROT_AR_DRONE_BRICKS); dronePreference.setEnabled(false); screen.removePreference(dronePreference); }  if (!BuildConfig.FEATURE_PHIRO_ENABLED) { PreferenceScreen phiroPreference = (PreferenceScreen) findPreference(SETTINGS_SHOW_PHIRO_BRICKS); phiroPreference.setEnabled(false); screen.removePreference(phiroPreference); }  if (!BuildConfig.FEATURE_ARDUINO_ENABLED) { PreferenceScreen arduinoPreference = (PreferenceScreen) findPreference(SETTINGS_SHOW_ARDUINO_BRICKS); arduinoPreference.setEnabled(false); screen.removePreference(arduinoPreference); }  if(!BuildConfig.FEATURE_RASPI_ENABLED) { PreferenceScreen raspiPreference = (PreferenceScreen) findPreference(RASPI_SETTINTS_SCREEN); raspiPreference.setEnabled(false); screen.removePreference(raspiPreference); } else { setUpRaspiPreferences(); }   } "	0	0	0	0	0	1
public Object getName() { return name; } 	0	0	0	0	0	1
public String eventArgType() { return method.firstParameterTypeName(); } 	0	0	0	0	0	1
"@Before public void setUp() { when(factoryMock.create(ManageCollaboratorsView.MODE.MANAGE, dndHandlerMock)).thenReturn(viewMock); when(viewMock.asWidget()).thenReturn(viewWidgetMock); when(groupMock.getName()).thenReturn(""name""); when(groupFactoryMock.getGroup()).thenReturn(groupAutoBeanMock); when(groupAutoBeanMock.as()).thenReturn(groupMock); when(defaultGroup.getName()).thenReturn(Group.DEFAULT_GROUP); when(groupFactoryMock.getDefaultGroup()).thenReturn(defaultGroup); when(groupAppearanceMock.loadingMask()).thenReturn(""loading"");  uut = new ManageCollaboratorsPresenter(factoryMock, groupFactoryMock, groupServiceFacadeMock, collabServiceFacadeMock, groupAppearanceMock) { @Override String getCollaboratorNames(List<Subject> subjects) { return ""names""; }  @Override List<Subject> wrapSubjectInList(Subject subject) { return subjectListMock; }  @Override List<AddMemberToGroupCallback> createAddMemberToGroupCallbackList() { return memberToGroupCallbackListsMock; }  @Override List<Subject> excludeDefaultGroup(List<Subject> result) { return subjectListMock; }  @Override Map<Boolean, List<Subject>> mapIsGroup(List<Subject> models) { return mapIsGroupMock; }  @Override Map<Boolean, List<UpdateMemberResult>> mapIsSuccessResults(List<UpdateMemberResult> totalResults) { return mapIsSuccessMock; }  @Override ParentDeleteSubjectsCallback createParentDeleteSubjectsCallback() { return parentCallbackMock; }  @Override String getSubjectNames(List<UpdateMemberResult> userSuccesses, List<Group> groups) { return ""names""; }  @Override List<String> getCollaboratorIds(List<UpdateMemberResult> userSuccesses, List<Group> successGroups) { return stringListMock; }  @Override CollaboratorDNDHandler getCollaboratorDNDHandler() { return dndHandlerMock; }  @Override AddMemberToGroupCallback createAddMemberToGroupCallback() { return memberToGroupCallbackMock; } };  uut.collaboratorsUtil = collaboratorsUtilMock; uut.eventBus = eventBusMock; uut.view = viewMock; uut.addCollabHandlerRegistration = addCollabHandlerRegistrationMock; uut.announcer = announcerMock; uut.groupDetailsDialog = groupDetailsDialogProvider; uut.userInfo = userInfoMock; uut.permissionsDlgProvider = retainPermsDialogProvider;  parentCallback = uut.new ParentDeleteSubjectsCallback(); } "	0	0	0	0	0	1
private void setNewValue() { displayTime.setValue(getValueAsString()); internalSetReadonlyFieldValue(getValueAsString()); if (changedHandler != null) { changedHandler.onChanged(getValueAsString());  } } 	0	0	0	0	0	1
"private Date parseDate(String value) { if (value == null || value.equals(EMPTY)) { return null; } SimpleDateFormat sdf = new SimpleDateFormat(TIME_FORMAT); try { return sdf.parse(value); } catch (ParseException e) { sdf = new SimpleDateFormat(TIME_FORMAT2); try { return sdf.parse(value); } catch (ParseException e2) { throw new InvalidValueException(""Time format is "" + TIME_FORMAT); } } } "	0	0	0	0	0	1
private boolean jj_3R_391() { if (jj_scan_token(INDEXVALUESASC_IDENTIFIER)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_380() { if (jj_scan_token(CHARACTER_LITERAL)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_359() { if (jj_3R_73()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_433() { if (jj_scan_token(STAR)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_358() { if (jj_3R_393()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_286() { if (jj_3R_339()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_142() { if (jj_3R_250()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_285() { if (jj_3R_338()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_438() { if (jj_3R_73()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_382() { if (jj_3R_83()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_427() { if (jj_3R_73()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_339() { if (jj_scan_token(LT)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_386() { if (jj_scan_token(EQ)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_264() { if (jj_scan_token(HOOK)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_345() { if (jj_scan_token(LIKE)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_379() { if (jj_scan_token(STRING_LITERAL)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_389() { if (jj_scan_token(INDEX_IDENTIFIER)) return true; return false; } 	0	0	0	0	0	1
"private void showNotification(String message) { Intent intent = new Intent(this, MainActivity.class); intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); PendingIntent pendingIntent = PendingIntent.getActivity(this, 0 /* Request code */, intent, PendingIntent.FLAG_ONE_SHOT);  Uri defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION); NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this) .setSmallIcon(R.drawable.cast_ic_notification_on) .setContentTitle(""BusService"") .setContentText(message) .setAutoCancel(true) .setSound(defaultSoundUri) .setContentIntent(pendingIntent);  NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0, notificationBuilder.build()); } "	0	0	0	0	0	1
"private boolean userSpecifiedPathVerificator(Map<Spec, SpecExecutor> specExecutorInstanceMap, FlowSpec flowSpec) { Map<Spec, SpecExecutor> tmpSpecExecutorInstanceMap = new HashMap<>(); List<String> userSpecfiedPath = Arrays.asList(optionalUserSpecifiedPath.get().split("","")); for (int i = 0; i < userSpecfiedPath.size() - 1; i++) { ServiceNode sourceNode = new BaseServiceNodeImpl(userSpecfiedPath.get(i)); ServiceNode targetNode = new BaseServiceNodeImpl(userSpecfiedPath.get(i + 1)); if (weightedGraph.containsVertex(sourceNode) && weightedGraph.containsVertex(targetNode) && weightedGraph.containsEdge(sourceNode, targetNode)) { tmpSpecExecutorInstanceMap.put(convertEdgeToJobSpec(sourceNode, targetNode, flowSpec), (((LoadBasedFlowEdgeImpl) weightedGraph.getEdge(sourceNode, targetNode)).getSpecExecutorInstance())); } else { log.error(""User Specified Path is invalid""); return false; } } specExecutorInstanceMap.putAll(tmpSpecExecutorInstanceMap); return true; } "	0	0	0	0	0	1
@Override public Stream<T> findWithScope(final Scope scope) { return getStore().findAll(this, scope ).stream().map( (final Integer i) -> { try { return getRecord( i); } catch ( final Exception ex ) { return null; } }).filter( (final T t) -> t!= null); } 	0	0	0	0	0	1
"public void setCache(final Cache cache) { final String mimeType = ""text/html""; final String encoding = ""utf-8""; if (cache != null) { NonLocalImages.clear(); NonLocalImagesUrl.clear(); String cachehtml = Database.GetDescription(cache); String html = """"; if (cache.getApiStatus() == 1)// GC.com API lite { // Load Standard HTML String nodesc = Translation.Get(""GC_NoDescription""); html = ""</br>"" + nodesc + ""</br></br></br><form action=\""download\""><input type=\""submit\"" value=\"" "" + Translation.Get(""GC_DownloadDescription"") + "" \""></form>""; } else { html = DescriptionImageGrabber.ResolveImages(cache, cachehtml, false, NonLocalImages, NonLocalImagesUrl);  if (!Config.DescriptionNoAttributes.getValue()) html = getAttributesHtml(cache) + html;  // add 2 empty lines so that the last line of description can be selected with the markers html += ""</br></br>""; }  final String FinalHtml = html;  main.mainActivity.runOnUiThread(new Runnable() {  @Override public void run() { try { DescriptionViewControl.this.loadDataWithBaseURL(""fake://fake.de"", FinalHtml, mimeType, encoding, null); } catch (Exception e) { return; // if an exception here, then this is not initializes } } });  }  try { main.mainActivity.runOnUiThread(new Runnable() {  @Override public void run() { if (DescriptionViewControl.this.getSettings() != null) DescriptionViewControl.this.getSettings().setLightTouchEnabled(true); } });  } catch (Exception e1) { // dann kann eben nicht gezoomt werden! }  // Falls nicht geladene Bilder vorliegen und eine Internetverbindung // erlaubt ist, diese laden und Bilder erneut aufl�sen if (NonLocalImagesUrl.size() > 0) { downloadThread = new Thread() { @Override public void run() {  if (downloadTryCounter > 0) { try { Thread.sleep(100); } catch (InterruptedException e) { log.error(""DescriptionViewControl.setCache()"", ""Thread.sleep fehler"", e); e.printStackTrace(); } }  boolean anyImagesLoaded = false; while (NonLocalImagesUrl != null && NonLocalImagesUrl.size() > 0) { String local, url; local = NonLocalImages.poll(); url = NonLocalImagesUrl.poll();  try { if (DescriptionImageGrabber.Download(url, local)) { anyImagesLoaded = true; } } catch (Exception e) { log.error(""DescriptionViewControl.setCache()"", ""downloadThread run()"", e); } } if (anyImagesLoaded) downloadReadyHandler.post(downloadComplete); } }; downloadThread.start(); }  if (cache != null) { cache.loadSpoilerRessources(); } } "	0	0	0	0	0	1
"@Override String getUrl() { return ""/api-violations""; } "	0	0	0	0	0	1
"protected IExpr solveEquations(IAST termsEqualZeroList, IAST variables, int maximumNumberOfResults, EvalEngine engine) { try { IAST list = GroebnerBasis.solveGroebnerBasis(termsEqualZeroList, variables); if (list.isPresent()) { termsEqualZeroList = list; } } catch (JASConversionException e) { if (Config.SHOW_STACKTRACE) { e.printStackTrace(); } }  ExprAnalyzer exprAnalyzer; ArrayList<ExprAnalyzer> analyzerList = new ArrayList<ExprAnalyzer>(); IsWrongSolveExpression predicate = new IsWrongSolveExpression(); // collect linear and univariate polynomial equations: for (IExpr expr : termsEqualZeroList) { if (expr.isMember(predicate, true)) { engine.printMessage( ""Solve: the system contains the wrong object: "" + predicate.getWrongExpr().toString()); return F.NIL; } exprAnalyzer = new ExprAnalyzer(expr, variables, engine); exprAnalyzer.simplifyAndAnalyze(); analyzerList.add(exprAnalyzer); } IAST matrix = F.List(); IAST vector = F.List(); try { IAST resultList = F.List(); resultList = analyzeSublist(analyzerList, variables, resultList, maximumNumberOfResults, matrix, vector, engine); if (vector.size() > 1) { // solve a linear equation <code>matrix.x == vector</code> FieldMatrix<IExpr> augmentedMatrix = Convert.list2Matrix(matrix, vector); return RowReduce.rowReduced2RulesList(augmentedMatrix, variables, resultList, engine); }  return sortResults(resultList); } catch (NoSolution e) { if (e.getType() == NoSolution.WRONG_SOLUTION) { return F.List(); } return F.NIL; } } "	0	0	0	0	0	1
public int getQuantity() { return quantity; } 	0	0	0	0	0	1
"@Override public Void recover(RetryContext context) throws Exception { populateRecoveryChannel(); ErrorMessage errorMessage = this.errorMessageStrategy.buildErrorMessage(context); if (this.logger.isDebugEnabled() && errorMessage.getPayload() instanceof MessagingException) { MessagingException exception = (MessagingException) errorMessage.getPayload(); this.logger.debug(""Sending ErrorMessage: failedMessage: "" + exception.getFailedMessage(), exception); } this.messagingTemplate.send(errorMessage); return null; } "	0	0	0	0	0	1
public <Model, Data> ModelLoader<Model, Data> build(Class<Model> modelClass, Class<Data> dataClass) { List<ModelLoader<Model, Data>> loaders = new ArrayList<>(); boolean ignoredAnyEntries = false; for (Entry<?, ?> entry : entries) { // Avoid stack overflow recursively creating model loaders by only creating loaders in // recursive requests if they haven't been created earlier in the chain. For example: // A Uri loader may translate to another model, which in turn may translate back to a Uri. // The original Uri loader won't be provided to the intermediate model loader, although other // Uri loaders will be. if (alreadyUsedEntries.contains(entry)) { ignoredAnyEntries = true; continue; } if (entry.handles(modelClass, dataClass)) { alreadyUsedEntries.add(entry); loaders.add(this.<Model, Data>build(entry)); alreadyUsedEntries.remove(entry); } } if (loaders.size() > 1) { return factory.build(loaders); } else if (loaders.size() == 1) { return loaders.get(0); } else { // Avoid crashing if recursion results in no loaders available. The assertion is supposed to // catch completely unhandled types, recursion may mean a subtype isn't handled somewhere // down the stack, which is often ok. if (ignoredAnyEntries) { return emptyModelLoader(); } else { throw new NoModelLoaderAvailableException(modelClass, dataClass); } } } 	0	0	0	0	0	1
List<Class<?>> getDataClasses(Class<?> modelClass) { List<Class<?>> result = new ArrayList<>(); for (Entry<?, ?> entry : entries) { if (!result.contains(entry.dataClass) && entry.handles(modelClass)) { result.add(entry.dataClass); } } return result; } 	0	0	0	0	0	1
"@PostConstruct public void start() { startAsync(); awaitRunning(); queueSizeLogger.scheduleWithFixedDelay(new Runnable() { @Override public void run() { if (queue.size() > 0 || logEmptyQueue()) { LOG.info(""Queue size: "" + queue.size()); } } }, 5, loggingFrequencyMs(), TimeUnit.SECONDS); } "	0	0	0	0	0	1
"public void updateDeviceInfoStatus(DeviceIdentifier deviceIdentifier) throws OperationManagementException { List<? extends Operation> pendingDeviceInfoOperations; try { pendingDeviceInfoOperations = WindowsAPIUtils.getPendingOperations(deviceIdentifier); } catch (DeviceManagementException e) { throw new OperationManagementException(""Error occurred in getting pending operation.""); } for (Operation operation : pendingDeviceInfoOperations) { if (PluginConstants.OperationCodes.DEVICE_INFO.equals(operation.getCode())) { operation.setStatus(Operation.Status.COMPLETED); updateStatus(deviceIdentifier.getId(), pendingDeviceInfoOperations); } } } "	0	0	0	0	0	1
@Override public List<PartitionOffset> getPartitionOffsets() { return messageMetadatas.stream() .map(m -> new PartitionOffset(KafkaTopicName.valueOf(m.getTopic()), m.getOffset(), m.getPartition())) .collect(Collectors.toList()); } 	0	0	0	0	0	1
"private void downloadWebstartResources(String fileAddress) { HttpURLConnection connection = null; InputStream stream = null;  try { connection = (HttpURLConnection)new URL(fileAddress).openConnection(); stream = connection.getInputStream(); } catch (UnknownHostException e) { System.err.println(""Could not connect to remote host "" + e.getMessage() + "" to download writable resources.""); tryRunningShootOFF(); return; } catch (IOException e) { if (connection != null) connection.disconnect();  System.err.println(""Failed to get stream to download writable resources file""); e.printStackTrace(); tryRunningShootOFF(); return; }  long remoteFileLength = connection.getContentLength();  if (remoteFileLength == 0) { System.err.println(""Remote writable resources file query returned 0 len""); }  if (resourcesFile.exists() && remoteFileLength == resourcesFile.length()) { connection.disconnect(); runShootOFF(); return; }  final InputStream remoteStream = stream; Task<Boolean> task = new Task<Boolean>() { @Override public Boolean call() throws InterruptedException { BufferedInputStream bufferedInputStream = new BufferedInputStream(remoteStream); FileOutputStream fileOutputStream = null;  try { fileOutputStream = new FileOutputStream(resourcesFile);  long totalDownloaded = 0; int count; byte buffer[] = new byte[1024];  while ((count = bufferedInputStream.read(buffer, 0, buffer.length)) != -1) { fileOutputStream.write(buffer, 0, count); totalDownloaded += count; updateProgress(((double)totalDownloaded / (double)remoteFileLength) * 100, 100); }  fileOutputStream.close();  updateProgress(100, 100); } catch (IOException e) { if (fileOutputStream != null) { try { fileOutputStream.close(); } catch (IOException e1) { e1.printStackTrace(); } }  System.err.println(""Failed to download writable resources file""); e.printStackTrace(); return false; }  return true; } };  final ProgressDialog progressDialog = new ProgressDialog(""Downloading Resources..."", ""Download required resources (targets, sounds, etc.)..."", task); final HttpURLConnection con = connection; task.setOnSucceeded((value) -> { progressDialog.close(); con.disconnect(); if (task.getValue()) { extractWebstartResources(); } });  new Thread(task).start(); } "	0	0	0	0	0	1
"public static boolean loginWithUsernamePassword(String username, String password) { UsernamePasswordToken token = new UsernamePasswordToken(username, password); logger.info(""Try to login with Username Password: "" + token.toString()); try { subject.login(token); } catch (AuthenticationException e) { logger.warn(""Auth failed!""+ e.getMessage()); //            e.printStackTrace(); return false; } if (subject.isAuthenticated()){ logger.info(""loginWithUsernamePassword: Authentication success from ""+ subject.getPrincipals().getRealmNames()); isAuthcSuccess = true; }else { logger.info(""Authenticated Failed""); isAuthcSuccess = false; } return isAuthcSuccess; //断言用户已经登录 } "	0	0	0	0	0	1
"private static String faPrefix(final String cssClass) { return cssClass.startsWith(""fa-"") ? cssClass : ""fa-"" + cssClass; } "	0	0	0	0	0	1
"private void runBackup() { boolean backupPerformed = false; Translator translator = AppContext.getTranslator(); TargetTranslation[] targetTranslations = translator.getTargetTranslations(); for(TargetTranslation t:targetTranslations) {  // commit pending changes try { t.commit(); } catch (Exception e) { Logger.e(this.getClass().getName(), ""Failed to commit changes before backing up"", e); continue; }  // run backup if there are translations if(t.numTranslated() > 0) {  // retreive commit hash String tag; try { tag = t.getCommitHash(); } catch (Exception e) { Logger.w(this.getClass().getName(), ""Failed to read commit hash"", e); continue; }  // check if backup is required if (tag != null) { File primaryBackupDir = new File(AppContext.getPublicDirectory(), ""backups/"" + t.getId() + ""/""); File primaryBackupFile = new File(primaryBackupDir, tag + ""."" + Translator.ARCHIVE_EXTENSION); File downloadBackupDir = new File(AppContext.getPublicDownloadsDirectory(), ""backups/"" + t.getId() + ""/""); File downloadBackupFile = new File(downloadBackupDir, tag + ""."" + Translator.ARCHIVE_EXTENSION); // e.g. ../../backups/uw-obs-de/[commit hash].tstudio if (!downloadBackupFile.exists()) {  // peform backup File archive = new File(AppContext.getPublicDownloadsDirectory(), t.getId() + "".temp."" + Translator.ARCHIVE_EXTENSION); try { t.applyDefaultTranslatorsIfNoneSpecified(); translator.exportArchive(t, archive); } catch (Exception e) { Logger.e(this.getClass().getName(), ""Failed to export the target translation "" + t.getId(), e); continue; } if (archive.exists() && archive.isFile()) { // move into backup FileUtils.deleteQuietly(downloadBackupDir); FileUtils.deleteQuietly(primaryBackupDir); downloadBackupDir.mkdirs(); primaryBackupDir.mkdirs(); try { // backup to downloads directory FileUtils.copyFile(archive, downloadBackupFile); // backup to a slightly less public area (used for auto restore) FileUtils.copyFile(archive, primaryBackupFile); backupPerformed = true; } catch (IOException e) { Logger.e(this.getClass().getName(), ""Failed to copy the backup archive for target translation: "" + t.getId(), e); } archive.delete(); } else { Logger.w(this.getClass().getName(), ""Failed to export the target translation: "" + t.getId()); } } } else { Logger.w(this.getClass().getName(), ""Could not find the commit hash""); } } }  if(backupPerformed) { onBackupComplete(); } } "	0	0	0	0	0	1
private void executeOnStartActions(){ int actionIndexOnStart=Integer.parseInt(sharedPrefs.getString(getString(R.string.key_prefActionOnStart), Integer.toString(ActionOnStartNone)));  if(actionIndexOnStart==ActionOnStartNone){ return; } else if(actionIndexOnStart==ActionOnStartSurahList){ Intent intent = new Intent(MainActivity.this, SuraListActivity.class); startActivityForResult(intent, REQUEST_SURAH_LIST); } else if(actionIndexOnStart==ActionOnStartRandomAyah){ showARandomAyah=true; } } 	0	0	0	0	0	1
"public void uploadActionInitiated(String title, String description) { Toast startingToast = Toast.makeText(getApplicationContext(), R.string.uploading_started, Toast.LENGTH_LONG); startingToast.show();  if (cacheFound == false) { //Has to be called after apiCall.request() cacheObj.cacheData.cacheCategory(); Log.d(TAG, ""Cache the categories found""); }  uploadController.startUpload(title, mediaUri, description, mimeType, source, new UploadController.ContributionUploadProgress() { public void onUploadStarted(Contribution contribution) { ShareActivity.this.contribution = contribution; showPostUpload(); } }); } "	0	0	0	0	0	1
protected String formatCredentials(ChallengeResponse challenge) throws GeneralSecurityException { // Data buffer StringBuffer sb = new StringBuffer();  // Indexes buffer StringBuffer isb = new StringBuffer(); String timeIssued = Long.toString(System.currentTimeMillis()); int i = timeIssued.length(); sb.append(timeIssued);  isb.append(i);  String identifier = challenge.getIdentifier(); sb.append('/'); sb.append(identifier);  i += identifier.length() + 1; isb.append(',').append(i);  sb.append('/'); sb.append(challenge.getSecret());  // Store indexes at the end of the string sb.append('/'); sb.append(isb);  return Base64.encode(CryptoUtils.encrypt(getEncryptAlgorithm(), getEncryptSecretKey(), sb.toString()), false); } 	0	0	0	0	0	1
"void test() { loadDungeon(""test_dungeon""); } "	0	0	0	0	0	1
@Override public String visit(ProfileValue value) throws OwsExceptionReport { return OmConstants.OBS_TYPE_PROFILE_OBSERVATION; } 	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") @Deprecated public List<TObservableProperty> getTObservablePropertyObjects(final Session session) { Criteria criteria = session.createCriteria(ObservableProperty.class); LOGGER.debug(""QUERY getTObservablePropertyObjects(): {}"", HibernateHelper .getSqlString(criteria)); return criteria.list(); } "	0	0	0	0	0	1
@Override public void doProcessOutput(ItemStack output) { BlockPos pos = getPos().offset(facing,1).offset(facing.rotateY(), 2).offset(EnumFacing.DOWN, 1); TileEntity inventoryTile = this.worldObj.getTileEntity(pos); if(inventoryTile!=null) output = Utils.insertStackIntoInventory(inventoryTile, output, facing.getOpposite()); if(output!=null) Utils.dropStackAtPos(worldObj, pos, output, facing); } 	0	0	0	0	0	1
"OneMeasurement constructOneMeasurement(String name) { switch (_measurementType) { case HISTOGRAM: return new OneMeasurementHistogram(name, _props); case HDRHISTOGRAM: return new OneMeasurementHdrHistogram(name, _props); case HDRHISTOGRAM_AND_HISTOGRAM: return new TwoInOneMeasurement(name, new OneMeasurementHdrHistogram(""Hdr""+name, _props), new OneMeasurementHistogram(""Bucket""+name, _props)); case HDRHISTOGRAM_AND_RAW: return new TwoInOneMeasurement(name, new OneMeasurementHdrHistogram(""Hdr""+name, _props), new OneMeasurementHistogram(""Raw""+name, _props)); case TIMESERIES: return new OneMeasurementTimeSeries(name, _props); case RAW: return new OneMeasurementRaw(name, _props); default: throw new AssertionError(""Impossible to be here. Dead code reached. Bugs?""); } } "	0	0	0	0	0	1
@Override @SideOnly(Side.CLIENT) public IIcon getIconFromDamage(int damage) { return damage > 0 ? icons[damage - 1] : icons[damage]; } 	0	0	0	0	0	1
"@SuppressWarnings(""SpellCheckingInspection"") @Override protected void doUpdate() { switch(getVersion()) { case 1: lang.set(""Language.Ingame.Cooldown"", ""Please wait till you reopen your backpack.""); case 2: lang.set(""Language.Ingame.InvalidBackpack"", lang.getString(""Language.Ingame.IvalidBackpack"", ""Invalid backpack."")); case 3: lang.set(""Language.Console.MinecraftVersionNotCompatible"", ""Your minecraft version (MC %1$s) is currently not compatible with this plugins version (%2$s). Please check for updates!""); case 4: lang.set(""Language.Ingame.WrongGameMode"", ""You are not allowed to open your backpack in your current game-mode.""); break; } } "	0	0	0	0	0	1
private void logNewVariables(ThreadReference thread, Step lastStep, Step newStep) throws AbsentInformationException {  if (lastStep.location != null) { List<String> usedVariables = sourceParser.getVariables( lastStep.location.sourcePath(), lastStep.location.lineNumber());  if (usedVariables != null) { HashSet<String> usedVarSet = new HashSet<String>(usedVariables); for (String variable : usedVarSet) { if (newStep.knownVariables.add(variable)) { logger.logVarCreated(variable, getVariableType(thread, variable)); } } } } } 	0	0	0	0	0	1
public void draw(Graphics2D g) {  for (int row = 0; row < numRowsToDraw; row++) {  // all rows are drawn if (row >= numRows) break;  for (int col = 0; col < numColsToDraw; col++) {  // all columns are drawn if (col >= numCols) break;  // don't bother drawing it, cause its transparent (first block // in .gif is a transparent image) if (map[row][col] == 0) continue;  // translate the tile at the map coordinate into a coordinate in // the tiles coordinate int rc = map[row][col]; int r = rc / numTilesAcross; int c = rc % numTilesAcross;  g.drawImage(tiles[r][c].getImage(), (int) x + col * tileSize, (int) y + row * tileSize, null);  }  }  } 	0	0	0	0	0	1
public boolean isOwnConversation() { return isAgent ? conversationVO.getAgentId().equals(user.getProfileDetails().getId()) : true; } 	0	0	0	0	0	1
PersoniumContext getContext() { return this.context; } 	0	0	0	0	0	1
String getAccessType() { return this.accessType; } 	0	0	0	0	0	1
@Override public boolean equals(@Nullable Object o) { if (this == o) { return true; } if (!(o instanceof OperationDescription)) { return false; }  OperationDescription that = (OperationDescription) o;  if (name() != null ? !name().equals(that.name()) : that.name() != null) { return false; } if (summary() != null ? !summary().equals(that.summary()) : that.summary() != null) { return false; } if (category() != that.category()) { return false; } if (icon() != null ? !icon().equals(that.icon()) : that.icon() != null) { return false; } return aliases() != null ? aliases().equals(that.aliases()) : that.aliases() == null;  } 	0	0	0	0	0	1
public LuuTruModel[] getResults() { return results; } 	0	0	0	0	0	1
@Override public int hashCode() { return Objects.hash(name, description, retentionTime, migratedFromJsonType, trackingEnabled, ack, contentType, jsonToAvroDryRunEnabled, schemaVersionAwareSerializationEnabled); } 	0	0	0	0	0	1
"public boolean dischargePatient(String uuid) { try { Template freemarkerTemplate = freemarkerConfiguration.getTemplate(""discharge_patient.ftl""); Map<String, Object> programData = new HashMap<>(); programData.put(""patientUUID"", uuid);  StringWriter stringWriter = new StringWriter(); freemarkerTemplate.process(programData, stringWriter); String requestJson = stringWriter.toString();  HttpResponse<JsonNode> response = Unirest.post(url + DISCHARGE_PATIENT_URL) .basicAuth(username, password) .header(""content-type"", ""application/json"") .body(requestJson) .asJson(); if (response.getStatus() != 200 && response.getStatus() != 201) throw new BahmniAPIException(""Discharge patient through API Failed!!""); } catch (Exception e) { throw new BahmniAPIException(e); } return true; } "	0	0	0	0	0	1
"private void postObservations() throws AuthenticationException, CancelSyncException { Observation observation; // query observations where _updated_at > updated_at Cursor c = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, ""_updated_at > _synced_at AND _synced_at IS NOT NULL AND user_login = '""+mLogin+""'"", null, Observation.SYNC_ORDER); int updatedCount = c.getCount(); mApp.sweepingNotify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.syncing_observations), String.format(getString(R.string.syncing_x_observations), c.getCount()), getString(R.string.syncing)); // for each observation PUT to /observations/:id c.moveToFirst(); while (c.isAfterLast() == false) { mApp.notify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.updating_observations), String.format(getString(R.string.updating_x_observations), (c.getPosition() + 1), c.getCount()), getString(R.string.syncing)); observation = new Observation(c); mApp.setObservationIdBeingSynced(observation._id); handleObservationResponse( observation, put(HOST + ""/observations/"" + observation.id + "".json?extra=observation_photos"", paramsForObservation(observation, false)) ); c.moveToNext();  checkForCancelSync(); } c.close();  String inatNetwork = mApp.getInaturalistNetworkMember(); String inatHost = mApp.getStringResourceByName(""inat_host_"" + inatNetwork);  // query observations where _synced_at IS NULL c = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, ""id IS NULL"", null, Observation.SYNC_ORDER); int createdCount = c.getCount(); // for each observation POST to /observations/  c.moveToFirst(); while (c.isAfterLast() == false) { mApp.notify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.posting_observations), String.format(getString(R.string.posting_x_observations), (c.getPosition() + 1), c.getCount()), getString(R.string.syncing)); observation = new Observation(c); mApp.setObservationIdBeingSynced(observation._id); handleObservationResponse( observation, post(""http://"" + inatHost + ""/observations.json?extra=observation_photos"", paramsForObservation(observation, true)) ); c.moveToNext();  checkForCancelSync(); } c.close();  c = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, ""id IS NULL"", null, Observation.SYNC_ORDER); int currentCreatedCount = c.getCount(); c.close(); c = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, ""_updated_at > _synced_at AND _synced_at IS NOT NULL AND user_login = '""+mLogin+""'"", null, Observation.SYNC_ORDER); int currentUpdatedCount = c.getCount(); c.close();  mApp.setObservationIdBeingSynced(INaturalistApp.NO_OBSERVATION);  if ((currentCreatedCount == 0) && (currentUpdatedCount == 0)) { // Sync completed successfully mApp.notify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.observation_sync_complete), String.format(getString(R.string.observation_sync_status), createdCount, updatedCount), getString(R.string.sync_complete)); } else { // There was a problem with the sync process mApp.notify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.observation_sync_failed), getString(R.string.not_all_observations_were_synced), getString(R.string.sync_failed)); } } "	0	0	0	0	0	1
private void onSubtree(Message message) { subtree = message.popFrame().getString(); } 	0	0	0	0	0	1
"@Test public void canAnalyseTypicalMeltedVCF() throws IOException, HealthChecksException { RunContext runContext = RunContextFactory.testContext(RUN_DIRECTORY, REF_SAMPLE, TUMOR_SAMPLE); final DataExtractor extractor = new SomaticExtractor(runContext);  final BaseResult result = extractor.extract(); final List<HealthCheck> checks = ((MultiValueResult) result).getChecks();  assertEquals(CheckType.SOMATIC, result.getCheckType()); assertEquals(26, checks.size());  assertCheck(checks, SomaticCheck.SOMATIC_COUNT.checkName(VCFType.INDELS.toString()), 67); assertCheck(checks, SomaticCheck.SOMATIC_COUNT.checkName(VCFType.SNP.toString()), 987);  assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(SNP, MUTECT), 0.7691); assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(INDELS, MUTECT), 0.0); assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(SNP, FREEBAYES), 0.1515); assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(INDELS, FREEBAYES), 0.1904); assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(SNP, VARSCAN), 0.7636); assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(INDELS, VARSCAN), 0.1904); assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(SNP, STRELKA), 0.7816); assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(INDELS, STRELKA), 0.1904);  assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(SNP, FREEBAYES), 0.5317); assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(INDELS, FREEBAYES), 0.3636); assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(SNP, MUTECT), 0.7503); assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(INDELS, MUTECT), 0.0); assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(SNP, VARSCAN), 0.8381); assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(INDELS, VARSCAN), 0.0689); assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(SNP, STRELKA), 0.7414); assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(INDELS, STRELKA), 0.1739);  assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(SNP, ""1""), 0.2715); assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(INDELS, ""1""), 0.6865); assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(SNP, ""2""), 0.1590); assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(INDELS, ""2""), 0.2537); assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(SNP, ""3""), 0.4812); assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(INDELS, ""3""), 0.0597); assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(SNP, ""4""), 0.0); assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(INDELS, ""4""), 0.0); } "	0	0	0	0	0	1
"private void editDescription(MouseEvent mouseEvent) { editDescTxt.setText(picture.getDescription()); final VBox vbox = new VBox(2); vbox.getChildren().addAll(editDescTxt, validateDescBtn);  content.getChildren().add(content.getChildren().size() - 4, vbox); content.getChildren().remove(descEditBtn);  descTxt.setText(""""); validateDescBtn.setOnMouseClicked(new EventHandler<MouseEvent>() { @Override public void handle(MouseEvent mouseEvent) { picture.setDescription(editDescTxt.getText()); descTxt.setText(editDescTxt.getText()); content.getChildren().remove(vbox); content.getChildren().add(5, descEditBtn); showInformationDialog(""Description modifiée avec succès !""); } });  } "	0	0	0	0	0	1
"@Override public int getActiveCount(String actorId, String taskList) { try { return taskList != null ? getJdbcTemplate().queryForObject(SQL_GET_PROCESS_CNT_BY_STATE_AND_STARTER_ID + "" AND TASK_LIST = ?"", Integer.class, Process.ACTIVE, actorId, taskList) : getJdbcTemplate().queryForObject(SQL_GET_PROCESS_CNT_BY_STATE_AND_STARTER_ID, Integer.class, Process.ACTIVE, actorId);  } catch (Throwable e) { String message = ""DB error counting active processes for actorId[""+actorId+""], taskList[""+taskList+""]""; logger.error(message, e); throw new ServiceCriticalException(message, e); } } "	0	0	0	0	0	1
"@ApiModelProperty(example = ""null"", value = ""The date the add request was completed. An empty string if the request has not been completed."") public LocalDate getDateCompleted() { return dateCompleted; } "	0	0	0	0	0	1
@Overwrite protected void passSpecialRender(EntityLivingBase entity, double p_77033_2_, double p_77033_4_, double p_77033_6_) {  if (!(entity instanceof EntityPlayer || entity instanceof EntityAnimal)) return;  if (entity instanceof EntityAnimal) { if (!Configuration.DISPLAY_ANIMAL_HEAT) return; }  if (MinecraftForge.EVENT_BUS.post(new RenderLivingEvent.Specials.Pre(entity, (RendererLivingEntity) (Object) this, p_77033_2_, p_77033_4_, p_77033_6_))) return; GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);  if (this.func_110813_b(entity)) { String entityName = entity.getFormattedCommandSenderName().getFormattedText(); float f = 1.6F; float f1 = 0.016666668F * f; double d3 = entity.getDistanceSqToEntity(this.renderManager.livingPlayer); float f2 = entity.isSneaking() ? NAME_TAG_RANGE_SNEAK : NAME_TAG_RANGE; double f6 = (double) (f2 * f2);  if (entity instanceof EntityAnimal) { f6 = (double) (f2); EntityAnimal animal = (EntityAnimal) entity; if (animal.getGrowingAge() == 0 && !animal.isInLove()) { // Animal is in heat. entityName = Colors.DARK_AQUA + entityName; } }  if (d3 < f6) { if (entity.isSneaking()) { FontRenderer fontrenderer = this.getFontRendererFromRenderManager(); GL11.glPushMatrix(); GL11.glTranslatef((float)p_77033_2_ + 0.0F, (float)p_77033_4_ + entity.height + 0.5F, (float)p_77033_6_); GL11.glNormal3f(0.0F, 1.0F, 0.0F); GL11.glRotatef(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F); GL11.glRotatef(this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F); GL11.glScalef(-f1, -f1, f1); GL11.glDisable(GL11.GL_LIGHTING); GL11.glTranslatef(0.0F, 0.25F / f1, 0.0F); GL11.glDepthMask(false); GL11.glEnable(GL11.GL_BLEND); OpenGlHelper.glBlendFunc(770, 771, 1, 0); Tessellator tessellator = Tessellator.instance; GL11.glDisable(GL11.GL_TEXTURE_2D); tessellator.startDrawingQuads(); int i = fontrenderer.getStringWidth(entityName) / 2; tessellator.setColorRGBA_F(0.0F, 0.0F, 0.0F, 0.25F); tessellator.addVertex((double)(-i - 1), -1.0D, 0.0D); tessellator.addVertex((double)(-i - 1), 8.0D, 0.0D); tessellator.addVertex((double)(i + 1), 8.0D, 0.0D); tessellator.addVertex((double)(i + 1), -1.0D, 0.0D); tessellator.draw(); GL11.glEnable(GL11.GL_TEXTURE_2D); GL11.glDepthMask(true); fontrenderer.drawString(entityName, -fontrenderer.getStringWidth(entityName) / 2, 0, 553648127); GL11.glEnable(GL11.GL_LIGHTING); GL11.glDisable(GL11.GL_BLEND); GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F); GL11.glPopMatrix(); } else { ((RendererLivingEntity) (Object) this).renderOffsetLivingLabel(entity, p_77033_2_, p_77033_4_, p_77033_6_, entityName, f1, d3); } } } MinecraftForge.EVENT_BUS.post(new RenderLivingEvent.Specials.Post(entity, (RendererLivingEntity) (Object) this, p_77033_2_, p_77033_4_, p_77033_6_)); } 	0	0	0	0	0	1
public void setTileMap(TileMap tilemap) { if (tileMap != null) { removeComponent(tileMap); } tileMap = tilemap; addComponent(tileMap); } 	0	0	0	0	0	1
"@Test public void testImportRppaData() throws Exception { MySQLbulkLoader.bulkLoadOn();  DaoGeneOptimized daoGene = DaoGeneOptimized.getInstance(); DaoGeneticAlteration dao = DaoGeneticAlteration.getInstance();  //Genes with alias: daoGene.addGene(makeGeneWithAlias(999999931,""TESTACACA"", ""TESTACC1"")); daoGene.addGene(makeGeneWithAlias(999999207,""TESTAKT1"", ""TESTAKT"")); daoGene.addGene(makeGeneWithAlias(999999597,""TESTSANDER"", ""TESTACC1"")); daoGene.addGene(makeGeneWithAlias(999997158,""TESTTP53BP1"", ""TEST53BP1"")); // test for NA being a special case in RPPA, and not the usual alias daoGene.addGene(makeGeneWithAlias(7504, ""XK"", ""NA"")); //Other genes: daoGene.addGene(new CanonicalGene(999999932,""TESTACACB"")); daoGene.addGene(new CanonicalGene(999999208,""TESTAKT2"")); daoGene.addGene(new CanonicalGene(999999369,""TESTARAF"")); daoGene.addGene(new CanonicalGene(999991978, ""TESTEIF4EBP1"")); daoGene.addGene(new CanonicalGene(999995562,""TESTPRKAA1"")); daoGene.addGene(new CanonicalGene(999997531,""TESTYWHAE"")); daoGene.addGene(new CanonicalGene(999910000,""TESTAKT3"")); daoGene.addGene(new CanonicalGene(999995578,""TESTPRKCA""));   GeneticProfile geneticProfile = new GeneticProfile();  geneticProfile.setCancerStudyId(studyId); geneticProfile.setStableId(""gbm_rppa""); geneticProfile.setGeneticAlterationType(GeneticAlterationType.PROTEIN_LEVEL); geneticProfile.setDatatype(""LOG2-VALUE""); geneticProfile.setProfileName(""RPPA Data""); geneticProfile.setProfileDescription(""RPPA Data""); DaoGeneticProfile.addGeneticProfile(geneticProfile);  int newGeneticProfileId = DaoGeneticProfile.getGeneticProfileByStableId(""gbm_rppa"").getGeneticProfileId();  ProgressMonitor.setConsoleMode(true); // TBD: change this to use getResourceAsStream() File file = new File(""src/test/resources/tabDelimitedData/data_rppa.txt""); ImportTabDelimData parser = new ImportTabDelimData(file, newGeneticProfileId, null); int numLines = FileUtil.getNumLines(file); parser.importData(numLines); ConsoleUtil.showMessages();  int sampleId = DaoSample.getSampleByCancerStudyAndSampleId(studyId, ""SAMPLE1"").getInternalId(); String value = dao.getGeneticAlteration(newGeneticProfileId, sampleId, 999997531); assertEquals (""1.5"", value );  sampleId = DaoSample.getSampleByCancerStudyAndSampleId(studyId, ""SAMPLE4"").getInternalId(); value = dao.getGeneticAlteration(newGeneticProfileId, sampleId, 999997531); assertEquals (""2"", value );  sampleId = DaoSample.getSampleByCancerStudyAndSampleId(studyId, ""SAMPLE4"").getInternalId(); value = dao.getGeneticAlteration(newGeneticProfileId, sampleId, 999997504); assertEquals (""NaN"", value ); //""NA"" is not expected to be stored because of workaround for bug in firehose. See also https://github.com/cBioPortal/cbioportal/issues/839#issuecomment-203523078  sampleId = DaoSample.getSampleByCancerStudyAndSampleId(studyId, ""SAMPLE1"").getInternalId(); value = dao.getGeneticAlteration(newGeneticProfileId, sampleId, 999995578); assertEquals (""1.5"", value ); } "	0	0	0	0	0	1
private void searchArtists(String query) { mSpotifyService.searchArtists(query, getSearchOptions(), new Callback<ArtistsPager>() { @Override public void success(ArtistsPager artistsPager, Response response) { ArrayObjectAdapter listRowAdapter = new ArrayObjectAdapter(new ArtistCardPresenter()); for (Artist artist : artistsPager.artists.items) { listRowAdapter.add(artist); } HeaderItem header = new HeaderItem(getString(R.string.artists)); mRowsAdapter.add(new ListRow(header, listRowAdapter));  // TODO next pages ? }  @Override public void failure(RetrofitError error) {  } }); } 	0	0	0	0	0	1
private void searchSongs(String query) { mSpotifyService.searchTracks(query, getSearchOptions(), new Callback<TracksPager>() { @Override public void success(TracksPager tracksPager, Response response) { mTrackRowAdapter = new ArrayObjectAdapter(new TrackCardPresenter()); for (Track track : tracksPager.tracks.items) { mTrackRowAdapter.add(track); } HeaderItem header = new HeaderItem(getString(R.string.songs)); mRowsAdapter.add(new ListRow(header, mTrackRowAdapter));  // TODO next pages ? }  @Override public void failure(RetrofitError error) {  } }); } 	0	0	0	0	0	1
public int getTotalUnitCount() { return totalUnits.size(); } 	0	0	0	0	0	1
"public void stealFromStall(int stallID[], Tile safeTiles){  status = ""Stealing""; if (stallToThieve == null || safeTiles.distanceTo(ctx.players.local().tile()) > maxTilesAwayToThieve || !stallToThieve.valid()) { stallToThieve = ctx.objects.select().id(stallID).nearest().poll(); }  if (safeTiles.equals(ctx.players.local().tile())) { if((ctx.menu.opened() && ctx.menu.items().length >= 4) || (stallToThieve.click(false) && ctx.menu.opened() && ctx.menu.items().length >= 4)){ if (ctx.players.local().animation() == -1 && !ctx.players.local().inMotion() && stallToThieve.valid() && !ctx.players.local().inCombat()) { if(hovered){ ctx.input.click(true); }else{ clickMenuItem(""Steal-from""); } hovered = false; }else{ if(!hovered) { hoverMenuItem(""Steal-from""); hovered = true; } } }else{ if(ctx.menu.opened()) { ctx.menu.close(); } } } else { if(locationTile.matrix(ctx).inViewport() && !ctx.players.local().inMotion() && locationTile.matrix(ctx).click()) { Condition.sleep(Random.nextInt(3000, 4000)); }else{ ctx.camera.turnTo(locationTile.tile()); } } } "	0	0	0	0	0	1
"@Override public void messaged(MessageEvent e) { final String msg = e.text().toLowerCase(); if (msg.contains(""just advanced a thieving level"")) { lvlUps++; requiredXP = ctx.skills.experienceAt(ctx.skills.level(Constants.SKILLS_THIEVING) + 1); }else if(msg.contains(""coins have been added"") || msg.contains(""you steal"") || msg.contains(""you pick"")) { successes++; }else if(msg.contains(""you fail to pick"")){ failures++; } } "	0	0	0	0	0	1
"public void drawPaint(Graphics g){ currentXP = ctx.skills.experience(Constants.SKILLS_THIEVING);  if(bg != null) { g.drawImage(bg, 5, 35, null); }  g.setColor(Color.white); g.drawString(""HP: "" + HP + ""% (Eat @: "" + hpToEatAt + ""%)"", 20, 100); g.drawString(""Status: "" + status, 20, 120); g.drawString(""Distance: "" + (int)ctx.players.local().tile().distanceTo(locationTile), 20, 140); g.drawString(""Levels Gained: "" + lvlUps, 20, 160); final long hr = getTotalRuntime() / 3600000; final long min = getTotalRuntime() / 60000; final long sec = getTotalRuntime() / 1000; g.drawString(""Run Time: "" + hr + "":"" + (min - (hr * 60)) + "":"" + (sec - (60 * min)), 20, 180);  final int xpGained = (currentXP - startingXP); final int xphr = (int)(xpGained / ( getTotalRuntime() / 3600000.0)); g.drawString(""XP Gained: "" + (xpGained > 1000 ? xpGained/1000 + ""k"" : xpGained) + "" ("" + xphr/1000 + ""k/hr)"", 20, 200);  int ttl =  (xphr == 0 ? ttl = 0 : (int)(((requiredXP - currentXP) *3600000.0) / xphr)); final long ttlhr = ttl/3600000; final long ttlmin = ttl/60000; g.drawString(""TTL: ""+ ttlhr + ""hr : "" + (ttlmin - (ttlhr * 60)) + ""min"" , 20, 220);  g.drawString(""Success Rate: "" + ((successes + failures) == 0 ? 0 : (int) (successes / (failures + successes) * 100)) + ""%"", 20, 240);  //DEBUGGING ONLY drawDebugBoundingBoxes(g); } "	0	0	0	0	0	1
"@Override protected void createStructureFactoryFolderComment(File structureFolder, AreaType area, ServiceType service) throws IOException { createFolderComment(structureFolder, area, service, getConfig().getFactoryFolder(), ""Factory classes for the types defined in the "" + ((null == service) ? (area.getName() + "" area."") : (service.getName() + "" service.""))); } "	0	0	0	0	0	1
"@RequestMapping(value = ""/aql"", method = RequestMethod.POST) public List<AqlResult> executeAqlByPost(@RequestBody String aql) throws AqlExcuteException { return this.executeAql(aql); } "	0	0	0	0	0	1
"protected T setFieldFromResultSet(T instance, ResultSet rs, Field f, String columnName) { Column column = FieldCache.getAnnotation(f, Column.class); Object value; try { value = rs.getObject(columnName, f.getType()); if (value == null) { value = rs.getObject(columnName); }  if (value != null && ReflectionUtil.isWrapperClass(f.getType()) && ReflectionUtil.isPrimitiveClass(value.getClass())) { value = ReflectionUtil.primitiveToWrapper(value); } else if (value != null && ReflectionUtil.isWrapperClass(value.getClass()) && ReflectionUtil.isPrimitiveClass(f.getType())) { value = ReflectionUtil.wrapperToPrimitive(value); }  if (value != null && f.getType().isAssignableFrom(value.getClass())) { value = f.getType().cast(value); }  if (value instanceof Long && !f.getType().isAssignableFrom(Long.class)) { if (f.getType().isAssignableFrom(Byte.class)) { value = ((Number) value).byteValue(); } else if (f.getType().isAssignableFrom(Short.class)) { value = ((Number) value).shortValue(); } else if (f.getType().isAssignableFrom(Integer.class)) { value = ((Number) value).intValue(); } } else if (value instanceof Double && !f.getType().isAssignableFrom(Double.class)) { if (f.getType().isAssignableFrom(Float.class)) { value = ((Number) value).floatValue(); } }  } catch (Exception e) { throw new RuntimeException(e); } if ((f.getType() == boolean.class || f.getType() == Boolean.class) && ReflectionUtil.isNumber(value.getClass()) && value != (Object) false && value != (Object) true && value != Boolean.TRUE && value != Boolean.FALSE) { value = ((byte) value) != 0; // for some reason this is returned as int on TINYINT(1).. }  if (value == null && (ReflectionUtil.isPrimitiveClass(f.getType()) || (FieldCache.getAnnotation(f, Nullable.class) == null && !column .autoIncrement()))) { SinkLibrary.getInstance().getLogger().warning( ""Trying to set null value on a not nullable and not autoincrement column: "" + getRowClass().getName() + ""."" + f .getName()); }  try { f.set(instance, value); } catch (IllegalAccessException e) { throw new RuntimeException(e); }  return instance; } "	0	0	0	0	0	1
"public String toString() { return ""not("" + var.getName() + "")""; } "	0	0	0	0	0	1
protected void setContentRoot(FrameLayout contentRoot) { mContentRoot = contentRoot; } 	0	0	0	0	0	1
"public T createChannelReadExpr(String left, String op, ChannelReadExpr cr) { Log.log(cr.line + "": Creating ChannelReadExpr with LHS as "" + left);  ST template = null; Expression channelExpr = cr.channel(); NameExpr channelNameExpr = null;  /* * Can either be NameExpression (chan.read()) or * ChannelEndExpr (chan.read.read()) */ if (channelExpr instanceof NameExpr) { channelNameExpr = (NameExpr) channelExpr; } else if (channelExpr instanceof ChannelEndExpr) { channelNameExpr = (NameExpr) ((ChannelEndExpr) channelExpr).channel(); }  String channel = (String) channelNameExpr.visit(this); Type myType = null;  if (channelNameExpr.myDecl instanceof LocalDecl) { myType = ((LocalDecl) channelNameExpr.myDecl).type(); } else if (channelNameExpr.myDecl instanceof ParamDecl) { myType = ((ParamDecl) channelNameExpr.myDecl).type(); }  if (myType.isTimerType()) { /* * Possibility One: Timer */ template = _stGroup.getInstanceOf(""TimerReadExpr""); template.add(""left"", left); return (T) template.render(); } else { Type baseType = null;  /* * Possibility Two: This is an actual end: chan<type>.read chan, * chan.read() */ if (myType.isChannelEndType()) { ChannelEndType chanType = (ChannelEndType) myType; baseType = chanType.baseType(); }  /* * Possibility Three: This is a channel to be treated as an end to avoid * chan.read.read(). */ else if (myType.isChannelType()) { ChannelType chanType = (ChannelType) myType; baseType = chanType.baseType(); }  //EXTENDED RENDEZVOUS Block b = cr.extRV(); String[] extRv = null; if (b != null) { //FIXME looks like ill need to turn off altGuard flag for //this block as extRv could have read from the same channel //again. boolean oldAltGuard = State.set(State.ALT_GUARD, false); extRv = (String[]) b.visit(this); //        isAltGuard = oldAltGuard; State.set(State.ALT_GUARD, oldAltGuard); } //-------  if (extRv == null) { template = _stGroup.getInstanceOf(""ChannelReadExpr""); } else { template = _stGroup.getInstanceOf(""ChannelReadExprExtRv""); template.add(""extRv"", extRv); }  //Since channel read in Alts are handled differently, i.e. w/o //yields in the generated code but rather in Alt class, //we don't want to increment and add jumpCnts to runlabel switch. if (!(State.is(State.ALT) && State.is(State.ALT_GUARD))) { /* * Adding switch cases for resumption. */ for (int i = 0; i < 2; i++) { _switchCases.add(renderLookupSwitchCase(_jumpCnt)); template.add(""jmp"" + i, _jumpCnt); _jumpCnt++; } }  template.add(""channel"", channel); template.add(""op"", op); template.add(""left"", left); //FIXME I might not even need _inAlt here. template.add(""alt"", (State.is(State.ALT) && State.is(State.ALT_GUARD)));  }  return (T) template.render(); } "	0	0	0	0	0	1
public IPage getCurrentPage() { return this.getPageManager().getOnlinePage(this.getPageCode()); } 	0	0	0	0	0	1
"@Test public void sequenciaEstagio() { Controlador controlador = getControladorPlanos(); Anel anel = controlador.getAneis().stream().filter(anel1 -> anel1.isAtivo() && anel1.getEstagios().size() == 4).findFirst().get(); Plano plano = anel.getPlanos().get(0);  plano.setModoOperacao(ModoOperacaoPlano.TEMPO_FIXO_ISOLADO); plano.setTempoCiclo(128);  criarEstagioPlano(anel, plano, new int[]{1, 3, 2, 4}); EstagioPlano estagioPlano1 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(1)).findAny().get(); EstagioPlano estagioPlano2 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(2)).findAny().get(); EstagioPlano estagioPlano3 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(3)).findAny().get(); EstagioPlano estagioPlano4 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(4)).findAny().get();  estagioPlano1.setTempoVerde(10); estagioPlano2.setTempoVerde(10); estagioPlano3.setTempoVerde(10); estagioPlano4.setTempoVerde(10);  List<Erro> erros = getErros(controlador); assertEquals(1, erros.size()); assertThat(erros, org.hamcrest.Matchers.hasItems( new Erro(CONTROLADOR, ""A sequência de estágios não é válida."", ""aneis[0].versoesPlanos[0].planos[0].sequenciaInvalida"") ));  criarEstagioPlano(anel, plano, new int[]{1, 4, 3, 2}); estagioPlano1 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(1)).findAny().get(); estagioPlano2 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(2)).findAny().get(); estagioPlano3 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(3)).findAny().get(); estagioPlano4 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(4)).findAny().get();  estagioPlano1.setTempoVerde(10); estagioPlano2.setTempoVerde(10); estagioPlano3.setTempoVerde(10); estagioPlano4.setTempoVerde(10);  erros = getErros(controlador); assertThat(erros, Matchers.empty());  estagioPlano2.setDispensavel(true);  erros = getErros(controlador); assertEquals(1, erros.size()); assertThat(erros, org.hamcrest.Matchers.hasItems( new Erro(CONTROLADOR, ""A sequência de estágios não é válida, pois existe uma transição proibida devido a não execução do estágio dispensável."", ""aneis[0].versoesPlanos[0].planos[0].sequenciaInvalidaSeExisteEstagioDispensavel"") )); } "	0	0	0	0	0	1
"public Builder jvm(boolean value) { return setParameter(""jvm"", value); } "	0	0	0	0	0	1
"public Builder network(boolean value) { return setParameter(""network"", value); } "	0	0	0	0	0	1
@Override public int selectValue(IntVar var) { assert var.getModel().getObjective() != null; if (var.hasEnumeratedDomain() && var.getDomainSize() < maxdom) { int bestCost = Integer.MAX_VALUE; int ub = var.getUB(); // if decision is '<=', default value is LB, UB in any other cases int bestV = dop == DecisionOperatorFactory.makeIntSplit() ? var.getLB() : ub; for (int v = var.getLB(); v <= ub; v = var.nextValue(v)) { int bound = bound(var, v); if (bound < bestCost) { bestCost = bound; bestV = v; } } return bestV; } else { int lbB = bound(var, var.getLB()); int ubB = bound(var, var.getUB()); // if values are equivalent if(lbB == ubB){ // if decision is '<=', default value is LB, UB in any other cases return dop == DecisionOperatorFactory.makeIntSplit() ? var.getLB() : var.getUB(); }else { return lbB < ubB ? var.getLB() : var.getUB(); } } } 	0	0	0	0	0	1
protected void clear() { mTotal = 0; mLayoutManager.setLayoutHelpers(null);  for (Pair<AdapterDataObserver, Adapter> p : mAdapters) { p.second.unregisterAdapterDataObserver(p.first); }   mItemTypeAry.clear(); mAdapters.clear(); } 	0	0	0	0	0	1
"@Test public void testToSolidMapFromPairs() throws Exception { SolidMap<String, Integer> converted = Range.range(1, 4) .map(new Func1<Integer, Pair<String, Integer>>() { @Override public Pair<String, Integer> call(Integer it) {return new Pair<>("""" + it, it.intValue());} }) .collect(ToSolidMap.<String, Integer>pairsToSolidMap());  assertIterableEquals(MAP, converted); } "	0	0	0	0	0	1
public Ticket findTicket(Long ticketId) { return manager.find(Ticket.class, ticketId); } 	0	0	0	0	0	1
"private boolean execute_gr_group_new() { GR.BDraw b = createGrObj_start(GR.Type.Rect);				// create Graphic Object and get variable if (b == null) return false; int SaveValueIndex = theValueIndex; if (!isNext(',')) return false;  int listIndex = -1; boolean isComma = isNext(','); if (!isComma) { listIndex = getListArg(VarType.NUM);					// reuse old list or create new one if (listIndex < 0) return false; isComma = isNext(','); } ArrayList<Double> list = (listIndex != -1)	? theLists.get(listIndex) : new ArrayList<Double>(); while (isComma) { double lObj = getObjectNumber(); if (lObj < 0.0) return false; list.add(lObj); isComma = isNext(','); } if (!checkEOL()) return false;  b.list(listIndex, list); return createGrObj_finish(b, SaveValueIndex);				// store the object and return its index } "	0	0	0	0	0	1
String getTypeName() { return JAVA_TIME_ZONED_DATE_TIME; } 	0	0	0	0	0	1
@Test public void testFABMenuPresent() { // Open up the FAB menu onView(withId(R.id.room_fab_speed_dial)) .check(matches(isDisplayed())) .perform(click()); // Ensure that the speed dial Indicators are all visible. onView(withText(R.string.room_new)) .check(matches(isDisplayed())); onView(withText(R.string.room_favorite)) .check(matches(isDisplayed())); } 	0	0	0	0	0	1
public Charset getData() { return data; } 	0	0	0	0	0	1
"@ApiOperation(value = ""outh2 callback"", response = String.class ) @ApiResponses({ @ApiResponse(code=200, message =""Successfully redirected""), @ApiResponse(code=400, message =""Bad Request, something broke""), @ApiResponse(code=500, message =""Cannot receive the token due to a server error "") }) @RequestMapping(value = ""/api/v2/google/google"", method = RequestMethod.GET, params = ""code"") public String oauth2Callback(@RequestParam(value = ""code"") String code) { //        System.out.println(""inside oauth2Callback""); com.google.api.services.calendar.model.Events eventList; String message = """"; try { TokenResponse response = flow.newTokenRequest(code).setRedirectUri(redirectURI).execute(); credential = flow.createAndStoreCredential(response, ""userID"");  client = new com.google.api.services.calendar.Calendar.Builder(httpTransport, JSON_FACTORY, credential) .setApplicationName(APPLICATION_NAME).build();  } catch (Exception e) { logger.warn(""Exception while handling OAuth2 callback ("" + e.getMessage() + "")."" + "" Redirecting to google connection status page.""); message = ""Exception while handling OAuth2 callback ("" + e.getMessage() + "")."" + "" Redirecting to google connection status page.""; } return ""redirect:/""; } "	0	0	0	0	0	1
"@Test public void testBuildWithParametersAndDisabledDefaultConstraints() throws Exception { // Given unit.setActive(false); unit.setSecurity(false);  String docNum = ""123456789""; Person person = new Person(); SpecOffer specOffer = new SpecOffer(); Department department = new Department(); PersonPaper personPaper = new PersonPaper(); EnrolmentType enrolmentType = new EnrolmentType(); Enrolment parent = new Enrolment(); Double mark = 1.2; String docSeries = ""fdsfds""; String docText = ""fdfds""; Integer isState = 1; Integer isContract = 2; Integer isPrivilege = 3; Integer isHostel = 4; Date evDate = new Date(); Date begDate = new Date(); Date endDate = new Date();  Enrolment context = new Enrolment(); context.setPerson(person); context.setSpecOffer(specOffer); context.setDepartment(department); context.setPersonPaper(personPaper); context.setEnrolmentType(enrolmentType); context.setParent(parent); context.setMark(mark); context.setDocSeries(docSeries); context.setDocNum(docNum); context.setDocText(docText); context.setIsState(isState); context.setIsContract(isContract); context.setIsPrivilege(isPrivilege); context.setIsHostel(isHostel); context.setEvDate(evDate); context.setBegDate(begDate); context.setEndDate(endDate);  String expectedQuery = ""SELECT e FROM Enrolment e WHERE ( e.person = :person AND LOWER(e.specOffer) LIKE LOWER(CONCAT('%',:specOffer,'%')) AND e.department = :department AND e.personPaper = :personPaper AND e.enrolmentType = :enrolmentType AND e.parent = :parent AND e.mark = :mark AND LOWER(e.docSeries) LIKE LOWER(CONCAT('%',:docSeries,'%')) AND LOWER(e.docNum) LIKE LOWER(CONCAT('%',:docNum,'%')) AND LOWER(e.docText) LIKE LOWER(CONCAT('%',:docText,'%')) AND e.isState = :isState AND e.isContract = :isContract AND e.isPrivilege = :isPrivilege AND e.isHostel = :isHostel AND e.evDate = :evDate AND e.begDate <= :begDate AND e.endDate >= :endDate ) ""; MultiplePagedSearch<Enrolment> pagedSearch = new MultiplePagedSearch<>(); pagedSearch.setEntity(context);  // When String actualQuery = unit.build(pagedSearch);  // Then assertEquals(expectedQuery, actualQuery); } "	0	0	0	0	0	1
@Override public Map<String, Map<String, Double>> getBooleanRange(List<String> hosts, List<String> metrics, long startTime, long endTime, BooleanFilter filter, AggregationType aggregationType) { JavaRDD<BooleanData> rangeQueryRDD = getRangeQueryRDD(hosts, metrics, startTime, endTime, ValueType.BOOLEAN); //count aggregation Map<HostMetricPair, Double> datas = rangeQueryRDD.filter(data -> data.getValue() == filter.getEq()) .mapToPair(e -> new Tuple2<HostMetricPair, Double>(new HostMetricPair(e.getHost(), e.getMetric()), 1d)) .reduceByKey((e1, e2) -> e1 + e2) .collectAsMap();  Map<String, Map<String, Double>> result = new HashMap<>(); for (Map.Entry<HostMetricPair, Double> data : datas.entrySet()) { String host = data.getKey().getHost(); String metric = data.getKey().getMetric(); if (result.containsKey(host)) { result.get(host).put(metric, data.getValue()); } else { Map<String, Double> map = new HashMap<>(); map.put(metric, data.getValue()); result.put(host, map); } }  return result; } 	0	0	0	0	0	1
private void updateCounts() { passCount = 0; failCount = 0; skipCount = 0; testExceptionCount = 0; callExceptionCount = 0;  if (hasChildren()) { for (TestResult tempResult : getChildren()) { passCount += tempResult.getPassCount(); failCount += tempResult.getFailCount(); skipCount += tempResult.getSkipCount(); if (tempResult instanceof IntegrityTestResult) { testExceptionCount += ((IntegrityTestResult) tempResult).getTestExceptionCount(); callExceptionCount += ((IntegrityTestResult) tempResult).getCallExceptionCount(); } } } } 	0	0	0	0	0	1
"public String generateEquipmentContextContent(final ArrayList<String[]> listEquipmentContexts, final String destination) {  String tableContent = """"; String buttons = """";  for (final String[] equipmentkContext : listEquipmentContexts) {  if (destination == ""context"") { buttons = ""<button id='"" + equipmentkContext[0] + ""' class='btn btn-md btn-default' onClick='viewEquipmentContext(this)' ><div class='glyphicon glyphicon-edit' ></div> View </button>"" + ""<button id='"" + equipmentkContext[0] + ""' class='btn btn-md btn-default' data-clipboard-text='http://gpi.eu/"" + equipmentkContext[0] + ""' onClick='copyEquipmentContextLink(this)'><div class='glyphicon glyphicon-trash'></div> Copy link to Clipboard</button> ""; } else { buttons = ""<button id='"" + equipmentkContext[0] + ""' class='btn btn-md btn-default' onClick='editEquipmentContext(this)' ><div class='glyphicon glyphicon-edit' ></div> Edit </button>"" + ""<button id='"" + equipmentkContext[0] + ""' class='btn btn-md btn-default' onClick='deleteEquipmentContext(this)'><div class='glyphicon glyphicon-trash'></div> Delete </button> "" + ""<button id='"" + equipmentkContext[0] + ""' class='btn btn-md btn-default' onClick='copyEquipmentContext(this)'><div class='glyphicon glyphicon-copy'></div> Copy </button>""; }  tableContent += ""<tr>"" + ""<td id='tdEquipmentContextName_"" + equipmentkContext[0] + ""'>"" + equipmentkContext[0] + ""</td>"" + ""<td>"" + equipmentkContext[1] + ""</td>"" + ""<td>"" + equipmentkContext[3] + ""</td>"" + ""<td>"" + equipmentkContext[2] + ""</td>"" + ""<td>"" + buttons + ""</td></tr>""; }  return tableContent; } "	0	0	0	0	0	1
"public String generateUserContextContent(final ArrayList<String[]> listUserContexts, final String destination) {  String tableContent = """"; String buttons = """";  for (final String[] userContext : listUserContexts) {  if (destination == ""context"") { buttons = ""<button id='"" + userContext[1] + ""' class='btn btn-md btn-default' onClick='viewUserContext(this)' ><div class='glyphicon glyphicon-edit' ></div> View </button>"" + ""<button id='"" + userContext[1] + ""' class='btn btn-md btn-default' data-clipboard-text='"" + userContext[1] + ""' onClick='copyUserContextLink(this)'><div class='glyphicon glyphicon-trash'></div>Copy link to Clipboard</button> ""; } else { buttons = ""<button id='"" + userContext[1] + ""' class='btn btn-md btn-default' onClick='editUserContext(this)' ><div class='glyphicon glyphicon-edit' ></div> Edit </button>"" + ""<button id='"" + userContext[1] + ""' class='btn btn-md btn-default' onClick='deleteUserContext(this)'><div class='glyphicon glyphicon-trash'></div> Delete </button> "" + ""<button id='"" + userContext[1] + ""' class='btn btn-md btn-default' onClick='copyUserContext(this)'><div class='glyphicon glyphicon-copy'></div> Copy </button>""; }  tableContent += ""<tr>"" + ""<td id='tdUserContextName_"" + userContext[1] + ""'>"" + userContext[1] + ""</td>"" + ""<td>"" + userContext[0] + ""</td>"" + ""<td>"" + userContext[3] + ""</td>"" + ""<td>"" + userContext[2] + ""</td>"" + ""<td>"" + buttons + "" </td></tr>""; }  return tableContent; } "	0	0	0	0	0	1
"@Test public void testBuildWithParametersWithOrderBy() throws Exception { // Given String docNum = ""123456789""; Person person = new Person(); SpecOffer specOffer = new SpecOffer(); Department department = new Department(); PersonPaper personPaper = new PersonPaper(); EnrolmentType enrolmentType = new EnrolmentType(); Enrolment parent = new Enrolment(); Double mark = 1.2; String docSeries = ""fdsfds""; String docText = ""fdfds""; Integer isState = 1; Integer isContract = 2; Integer isPrivilege = 3; Integer isHostel = 4; Date evDate = new Date(); Date begDate = new Date(); Date endDate = new Date();  Enrolment context = new Enrolment(); context.setPerson(person); context.setSpecOffer(specOffer); context.setDepartment(department); context.setPersonPaper(personPaper); context.setEnrolmentType(enrolmentType); context.setParent(parent); context.setMark(mark); context.setDocSeries(docSeries); context.setDocNum(docNum); context.setDocText(docText); context.setIsState(isState); context.setIsContract(isContract); context.setIsPrivilege(isPrivilege); context.setIsHostel(isHostel); context.setEvDate(evDate); context.setBegDate(begDate); context.setEndDate(endDate);  OrderBy orderBy1 = new OrderBy(""person"", OrderByType.ASC); OrderBy orderBy2 = new OrderBy(""specOffer"", OrderByType.DESC); OrderBy orderBy3 = new OrderBy(""department"", OrderByType.ASC); OrderBy orderBy4 = new OrderBy(""personPaper"", OrderByType.DESC); OrderBy orderBy5 = new OrderBy(""enrolmentType"", OrderByType.ASC); OrderBy orderBy6 = new OrderBy(""parent"", OrderByType.DESC); OrderBy orderBy7 = new OrderBy(""mark"", OrderByType.ASC); OrderBy orderBy8 = new OrderBy(""docSeries"", OrderByType.DESC); OrderBy orderBy9 = new OrderBy(""docNum"", OrderByType.ASC); OrderBy orderBy10 = new OrderBy(""docText"", OrderByType.DESC); OrderBy orderBy11 = new OrderBy(""isState"", OrderByType.ASC); OrderBy orderBy12 = new OrderBy(""isContract"", OrderByType.DESC); OrderBy orderBy13 = new OrderBy(""isPrivilege"", OrderByType.ASC); OrderBy orderBy14 = new OrderBy(""isHostel"", OrderByType.DESC); OrderBy orderBy15 = new OrderBy(""evDate"", OrderByType.ASC); OrderBy orderBy16 = new OrderBy(""begDate"", OrderByType.DESC); OrderBy orderBy17 = new OrderBy(""endDate"", OrderByType.ASC); OrderBy orderBy18 = new OrderBy(""priority"", OrderByType.DESC); List<OrderBy> orders = Arrays.asList(orderBy1, orderBy2, orderBy3, orderBy4, orderBy5, orderBy6, orderBy7, orderBy8, orderBy9, orderBy10, orderBy11, orderBy12, orderBy13, orderBy14, orderBy15, orderBy16, orderBy17, orderBy18);  String expectedQuery = ""SELECT e FROM Enrolment e WHERE ( e.person = :person AND e.specOffer LIKE CONCAT('%',:specOffer,'%') AND e.department = :department AND e.personPaper = :personPaper AND e.enrolmentType = :enrolmentType AND e.parent = :parent AND e.mark = :mark AND e.docSeries LIKE CONCAT('%',:docSeries,'%') AND e.docNum LIKE CONCAT('%',:docNum,'%') AND e.docText LIKE CONCAT('%',:docText,'%') AND e.isState = :isState AND e.isContract = :isContract AND e.isPrivilege = :isPrivilege AND e.isHostel = :isHostel AND e.evDate = :evDate AND e.begDate <= :begDate AND e.endDate >= :endDate) AND e.status=:status AND e.crtUserGroup IN (:userGroups) ORDER BY e.person ASC, e.specOffer DESC, e.department ASC, e.personPaper DESC, e.enrolmentType ASC, e.parent DESC, e.mark ASC, e.docSeries DESC, e.docNum ASC, e.docText DESC, e.isState ASC, e.isContract DESC, e.isPrivilege ASC, e.isHostel DESC, e.evDate ASC, e.begDate DESC, e.endDate ASC, e.priority DESC""; MultiplePagedSearch<Enrolment> pagedSearch = new MultiplePagedSearch<>(); pagedSearch.setEntity(context); pagedSearch.setOrders(orders);  // When String actualQuery = unit.build(pagedSearch);  // Then assertEquals(expectedQuery, actualQuery); } "	0	0	0	0	0	1
"@Test public void testBuildWithPlaceholder() throws Exception { // Given PersonList context = new PersonList(); context.setNames(Arrays.asList(""name1"", ""name2""));  String expectedQuery = ""SELECT e FROM Person e WHERE (  (e.name LIKE '%name1%' OR e.name LIKE '%name2%' ) ) AND e.status=:status AND e.crtUserGroup IN (:userGroups) ""; MultiplePagedSearch<PersonList> pagedSearch = new MultiplePagedSearch<>(); pagedSearch.setEntity(context);  // When String actualQuery = unit.build(pagedSearch);  // Then assertEquals(expectedQuery, actualQuery); } "	0	0	0	0	0	1
@Override public Object getChild(int groupPosition, int childPosition) { return items[groupPosition][childPosition]; } 	0	0	0	0	0	1
"@Test public void addCalamityAssignee() throws Exception { CalamityController cc = new CalamityController(); UserController uc = new UserController(); User user;  Location location = new Location(5, 51, 1);  Calamity c1 = (Calamity) cc.addCalamity(""asdasd"", ""nine-eleven-test"", ""test of 911"", location).getReturnObject();  ConfirmationMessage cm = uc.addUser(-1, -1, USERNAME, PASSWORD, EMAIL, CITY, """");  user = (User) cm.getReturnObject();  cc.addCalamityAssignee(""sdasd"", c1.getId(), user.getId());  c1 = cc.calamityById(""sdasd"", c1.getId());  Assert.assertEquals(true, isAssigned(user, c1));  cc.deleteCalamityAssignee(""sdasd"", c1.getId(), user.getId());  c1 = cc.calamityById(""sdasd"", c1.getId());  Assert.assertEquals(false, isAssigned(user, c1)); } "	0	0	0	0	0	1
"@Override public String toString() { return ""Statemachine{"" + ""ID='"" + ID + '\'' + "", startState="" + startState.getName() + "", currentState=""+currentState.getName() + "", isActive="" + isActive + "", nbOfStates =""+ states.keySet().size()+ '}'; } "	0	0	0	0	0	1
"public Object put(final V data) { ArgumentChecker.required(data, ""data""); K key = data.getId(); return this._store.put(key, data); } "	0	0	0	0	0	1
public IIdentifiable get(K id) { return this._store.get(id); } 	0	0	0	0	0	1
"private static void startBundle(Bundle bundle, Logger logger) { logger.info(""Starting bundle: [{}], version: [{}]"", bundle, bundle.getVersion()); try { bundle.start(); } catch (BundleException | IllegalStateException | SecurityException ex) { logger.error(""Exception while starting bundle: [{}]. Cause:"", bundle, ex); } } "	0	0	0	0	0	1
public static <T extends JCTree> T setGeneratedBy(T node, JCTree source) { synchronized (generatedNodes) { if (source == null) generatedNodes.remove(node); else generatedNodes.put(node, source); } return node; } 	0	0	0	0	0	1
private int convertToSections(int health) { return (int)Math.ceil(health / healthPointsPerUnit); } 	0	0	0	0	0	1
@Override public Integer get(MaterialRippleLayout object) { return object.getRippleAlpha(); } 	0	0	0	0	0	1
"public void notifyDataSetChanged() { tabsContainer.removeAllViews(); tabCount = pager.getAdapter().getCount(); View tabView; for (int i = 0; i < tabCount; i++) { if (pager.getAdapter() instanceof CustomTabProvider) { tabView = ((CustomTabProvider) pager.getAdapter()).getCustomTabView(this, i); } else { tabView = LayoutInflater.from(getContext()).inflate(R.layout.psts_tab, this, false); }  MaterialRippleLayout materialRippleLayout = MaterialRippleLayout.on(tabView) .rippleAlpha(rippleAlpha) .rippleBackground(rippleBackgroundColor) .rippleColor(rippleColor) .rippleDelayClick(rippleDelayClick) .rippleDiameterDp(rippleDiameter) .rippleDuration(rippleDuration) .rippleFadeDuration(rippleFadeDuration) .rippleHover(rippleHover) .rippleHighlightColor(rippleHighlightColor) .rippleInAdapter(rippleInAdapter) .rippleOverlay(rippleOverlay) .ripplePersistent(ripplePersistent) .rippleRoundedCorners(Utils.dpToPx(getResources(), rippleRoundedCorners)) .create();  CharSequence title = pager.getAdapter().getPageTitle(i);  addTab(i, title, materialRippleLayout); }  updateTabStyles(); getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {  @SuppressWarnings(""deprecation"") @SuppressLint(""NewApi"") @Override public void onGlobalLayout() {  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) { getViewTreeObserver().removeGlobalOnLayoutListener(this); } else { getViewTreeObserver().removeOnGlobalLayoutListener(this); } } }); } "	0	0	0	0	0	1
private void writePeriod() throws AdeException { /* Initialize the Period JAXB classes */ Systems systems = new Systems();  /* * Write out the header */ systems.setVersion(XML_VERSION);  Date startTime = PeriodUtils.getContainingPeriodStart(m_periodStartDate); m_gc.setTimeInMillis(startTime.getTime()); XMLGregorianCalendar startXMLDate = s_dataTypeFactory.newXMLGregorianCalendar(m_gc); systems.setStartTime(startXMLDate);  Date endTime = PeriodUtils.getNextPeriodStart(m_periodStartDate); m_gc.setTimeInMillis(endTime.getTime()); XMLGregorianCalendar endXMLDate = s_dataTypeFactory.newXMLGregorianCalendar(m_gc); systems.setEndTime(endXMLDate);  systems.setGmtOffset(m_xmlMetaData.getGMTOffset(m_source.getSourceId()));  systems.setIntervalSize(m_xmlMetaData.getIntervalLengthInSeconds());  /* NumberIntervals complex type */ NumberIntervals numberOfIntervals = new NumberIntervals(); systems.setNumberIntervals(numberOfIntervals); numberOfIntervals.setValue(XMLUtil.getNumberOfSnapshots(m_framingFlowType)); numberOfIntervals.setAnalysisSnapshotSize(XMLUtil.getXMLHardenedDurationInSeconds(m_framingFlowType));  /* ModelInfo complex type */ ModelInfo modelInfo = new ModelInfo(); systems.setModelInfo(modelInfo); modelInfo.setAnalysisGroup(m_xmlMetaData.getAnalysisGroupName()); modelInfo.setModelCreationDate(m_xmlMetaData.getModelCreationDate()); modelInfo.setTrainingPeriod(m_xmlMetaData.getNumberOfDaysInTraining());  /* * Write out the interval */ SystemsSystemType system = new SystemsSystemType(); systems.setSystem(system);  system.setLogType(m_xmlMetaData.getLogType()); system.setSysId(m_source.getSourceId());  /* Write out the list of system */ List<SystemsIntervalType> listOfInterval = system.getInterval(); for (int i = 0; i < m_numIntervals; ++i) { SystemsIntervalType intervalType = new SystemsIntervalType(); listOfInterval.add(intervalType);  if (m_aiVec[i].m_results_file != null && m_aiVec[i].m_results_file.length() > 0) { intervalType.setMissing(false); } else { intervalType.setMissing(true); intervalType.setMissingReason(MISSING_INTERVAL_REASON_NO_CONNECTION); }  intervalType.setIndex(i);  double value = Double.valueOf(SingleDigitFormatter.format(m_aiVec[i].m_anomaly_score * 100)); intervalType.setAnomalyScore(value); intervalType.setNumUniqueMsgIds(m_aiVec[i].m_num_unique_msg_ids); intervalType.setNumNewMessages(m_aiVec[i].m_numNewMessages); intervalType.setNumNeverSeenBeforeMessages(m_aiVec[i].m_numNeverSeenBeforeMessages); intervalType.setLimitedModel(m_aiVec[i].m_modelQualityIndicator.toString()); }  /* Write out the XML */ writeToXML(systems, s_marshaller); } 	0	0	0	0	0	1
public void clear() { this.localCache.invalidateAll(); } 	0	0	0	0	0	1
public Equality compare(String author1, String year1, String author2, String year2) { // compare recombination authors first Equality result = compareAuthor(author1, author2, minCommonSubstring); if (result != Equality.EQUAL) { // if authors are not the same we allow a positive year comparison to override it as author comparison is very difficult Equality yresult = compareYear(year1, year2); if (yresult != Equality.UNKNOWN) { result = yresult; } } return result; } 	0	0	0	0	0	1
private Equality compareAuthor(String a1, String a2, int minCommonSubstring) { // all lower case now, no punctuation and normed whitespace a1 = normalize(a1); a2 = normalize(a2); if (a1 != null && a2 != null) { // 1: test for shared name prefix Equality equality = compareSurnamesOverlap(a1, a2, minCommonSubstring); if (equality != Equality.EQUAL) { // 2: test for shared prefix after lookups String lookup1 = lookup(a1); String lookup2 = lookup(a2); if (!lookup1.equals(a1) || !lookup2.equals(a2)) { equality = compareSurnamesOverlap(lookup1, lookup2, minCommonSubstring+1); } } return equality; } return Equality.UNKNOWN; } 	0	0	0	0	0	1
@GraphQLField public String test(int other, TestInputArgument arg) { return arg.a; } 	0	0	0	0	0	1
"private LocalVariableGen create_method_scope_local(MethodGen mg, String name, Type type) {  // BCEL sorts local vars and presents them in offset order.  Search // locals for first var with start != 0. If none, just add the new // var at the end of the table and exit. Otherwise, insert the new // var just prior to the local we just found. // Now we need to make a pass over the byte codes to update the local // offset values of all the locals we just shifted up.  This may have // a 'knock on' effect if we are forced to change an instruction that // references implict local #3 to an instruction with an explict // reference to local #4 as this would require the insertion of an // offset into the byte codes. This means we would need to make an // additional pass to update branch targets (no - BCEL does this for // us) and the StackMapTable (yes - BCEL should do this, but it doesn't).  LocalVariableGen lv_new; int max_offset = -1; int new_offset = -1; // get a copy of the local before modification LocalVariableGen[] locals = mg.getLocalVariables(); int local_temp_count = 0;  for (LocalVariableGen lv : mg.getLocalVariables()) { if (lv.getStart().getPosition() != 0) { if (new_offset == -1) { new_offset = lv.getIndex(); compiler_temp_count = local_temp_count; } lv.setIndex(lv.getIndex() + type.getSize()); } // need to add 1 if type is double or long max_offset = lv.getIndex() + lv.getType().getSize() - 1; if (lv.getName().startsWith(""DaIkOnTeMp"")) { local_temp_count++; } else { local_temp_count = 0; } }  // System.out.printf (""new_offset %s%n"", new_offset);  // Special case: sometimes the java compiler allocates unnamed // temps at the end of the locals - we want to insert before them. if (new_offset == -1) { if (mg.getMaxLocals() > max_offset + 1) { new_offset = max_offset + 1; compiler_temp_count = 0; } }  // System.out.printf (""new_offset %s%n"", new_offset);  if (new_offset != -1) { // insert the local variable into existing table at slot 'new_offset' lv_new = mg.addLocalVariable(name, type, new_offset, null, null); mg.setMaxLocals(mg.getMaxLocals() + type.getSize());  // Process the instruction list, adding one to the offset // within each LocalVariableInstruction that references a // local that is 'higher' in the local map than new local // we just inserted. adjust_code_for_locals_change (mg, new_offset, type.getSize());  } else { // create the local variable at end of locals // will automatically update max_locals lv_new = mg.addLocalVariable(name, type, null, null); new_offset = lv_new.getIndex(); compiler_temp_count = 0; }  // System.out.printf (""create_method_scope_local-1 %s%n"", compiler_temp_count);  // We also need to update any FULL_FRAME StackMap entries to // add in the new local variable type. update_full_frame_stack_map_entries (new_offset, type, locals);  debug_instrument.log (""New LocalVariableTable: %s%n"", mg.getLocalVariableTable(pool)); return lv_new; } "	0	0	0	0	0	1
"public void install_exception_handler (MethodGen mg) {  if (global_catch_il == null) return;  InstructionList cur_il = mg.getInstructionList(); InstructionHandle start = global_exception_handler.getStartPC(); InstructionHandle end = global_exception_handler.getEndPC(); InstructionHandle exc = cur_il.append (global_catch_il); cur_il.setPositions(); mg.addExceptionHandler(start, end, exc, throwable); // discard temporary handler global_catch_il = null; global_exception_handler = null;  if (!needStackMap) return;  int exc_offset = exc.getPosition();  debug_instrument.log (""New ExceptionHandler: %x %x %x %n"", start.getPosition(), end.getPosition(), exc_offset);  // This is a trick to get running_offset set to // value of last stack map entry. update_stack_map_offset(exc_offset, 0); int map_offset = exc_offset - running_offset - 1;  // Get the argument types for this method Type[] arg_types = mg.getArgumentTypes();  int arg_index = (mg.isStatic()? 0 : 1); StackMapType[] arg_map_types = new StackMapType[arg_types.length + arg_index]; if (!mg.isStatic()) { arg_map_types[0] = new StackMapType(Constants.ITEM_Object, pool.addClass(mg.getClassName()), pool.getConstantPool()); } for (int ii = 0; ii < arg_types.length; ii++) { arg_map_types[arg_index++] = generate_StackMapType_from_Type (arg_types[ii]); }  StackMapTableEntry map_entry; StackMapType stack_map_type = new StackMapType (Constants.ITEM_Object, pool.addClass(throwable.getClassName()), pool.getConstantPool()); StackMapType[] stack_map_types = {stack_map_type}; map_entry = new StackMapTableEntry (Constants.FULL_FRAME, map_offset, arg_map_types.length, arg_map_types, 1, stack_map_types, pool.getConstantPool());  int orig_size = stack_map_table.length; new_stack_map_table = new StackMapTableEntry[orig_size+1]; System.arraycopy (stack_map_table, 0, new_stack_map_table, 0, orig_size); new_stack_map_table[orig_size] = map_entry; stack_map_table = new_stack_map_table; } "	0	0	0	0	0	1
"public void openPDFView(String path) { Intent i= new Intent(c, TextReader.class); i.putExtra(""Path"", path); c.startActivity(i); } "	0	0	0	0	0	1
private void applyXmlAttributes(AttributeSet attrs){  TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.FloatingSearchView);  try {  setDismissOnOutsideClick(true);  int searchBarWidth = a.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchBarWidth, ViewGroup.LayoutParams.MATCH_PARENT);  mQuerySection.getLayoutParams().width = searchBarWidth; mDivider.getLayoutParams().width = searchBarWidth; mSuggestionListContainer.getLayoutParams().width = searchBarWidth;  int searchBarLeftMargin = a.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchBarMarginLeft, ATTRS_SEARCH_BAR_MARGIN_DEFAULT); int searchBarTopMargin = a.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchBarMarginTop, ATTRS_SEARCH_BAR_MARGIN_DEFAULT); int searchBarRightMargin = a.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchBarMarginRight, ATTRS_SEARCH_BAR_MARGIN_DEFAULT);  LayoutParams querySectionLP = (LayoutParams)mQuerySection.getLayoutParams(); LayoutParams dividerLP = (LayoutParams)mDivider.getLayoutParams(); LinearLayout.LayoutParams suggestListSectionLP = (LinearLayout.LayoutParams)mSuggestionsSection.getLayoutParams();  querySectionLP.setMargins(searchBarLeftMargin, searchBarTopMargin, searchBarRightMargin, 0); dividerLP.setMargins(searchBarLeftMargin, 0, searchBarRightMargin, ((MarginLayoutParams) mDivider.getLayoutParams()).bottomMargin); suggestListSectionLP.setMargins(searchBarLeftMargin, 0, searchBarRightMargin, 0);  mQuerySection.setLayoutParams(querySectionLP); mDivider.setLayoutParams(dividerLP); mSuggestionsSection.setLayoutParams(suggestListSectionLP);  setSearchHint(a.getString(R.styleable.FloatingSearchView_floatingSearch_searchHint));  setShowHintWhenNotFocused(a.getBoolean(R.styleable.FloatingSearchView_floatingSearch_showSearchHintWhenNotFocused, ATTRS_SEARCH_BAR_SHOW_SEARCH_HINT_NOT_FOCUSED_DEFAULT));  setShowSearchKey(a.getBoolean(R.styleable.FloatingSearchView_floatingSearch_showSearchKey, ATTRS_SEARCH_BAR_SHOW_SEARCH_KEY_DEFAULT));  setDismissOnOutsideClick(a.getBoolean(R.styleable.FloatingSearchView_floatingSearch_dismissOnOutsideTouch, ATTRS_DISMISS_ON_OUTSIDE_TOUCH_DEFAULT));  setSuggestionItemTextSize(a.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchSuggestionTextSize, Util.spToPx(ATTRS_SUGGESTION_TEXT_SIZE_SP_DEFAULT)));  setLeftActionMode(a.getInt(R.styleable.FloatingSearchView_floatingSearch_leftAction, LEFT_ACTION_MODE_NO_LEFT_ACTION_ENUM_VAL));  if (a.hasValue(R.styleable.FloatingSearchView_floatingSearch_menu)) { inflateOverflowMenu(a.getResourceId(R.styleable.FloatingSearchView_floatingSearch_menu, 0)); }  } finally {  a.recycle(); } } 	0	0	0	0	0	1
"public String promptForVolsLastName() { System.out.println(""Option 1 selected.\n"" + ""Please enter the last name of the Volunteer to search for: \n""); return getInput(); } "	0	0	0	0	0	1
private RevisionInfo toRevisionInfo(ChangeControl ctl, ChangeData cd, PatchSet in, @Nullable Repository repo, boolean fillCommit, @Nullable ChangeInfo changeInfo) throws PatchListNotAvailableException, GpgException, OrmException, IOException { Change c = ctl.getChange(); RevisionInfo out = new RevisionInfo(); out.isCurrent = in.getId().equals(c.currentPatchSetId()); out._number = in.getId().get(); out.ref = in.getRefName(); out.created = in.getCreatedOn(); out.uploader = accountLoader.get(in.getUploader()); out.draft = in.isDraft() ? true : null; out.fetch = makeFetchMap(ctl, in); out.kind = changeKindCache.getChangeKind(repo, cd, in); out.description = in.getDescription();  boolean setCommit = has(ALL_COMMITS) || (out.isCurrent && has(CURRENT_COMMIT)); boolean addFooters = out.isCurrent && has(COMMIT_FOOTERS); if (setCommit || addFooters) { Project.NameKey project = c.getProject(); try (RevWalk rw = new RevWalk(repo)) { String rev = in.getRevision().get(); RevCommit commit = rw.parseCommit(ObjectId.fromString(rev)); rw.parseBody(commit); if (setCommit) { out.commit = toCommit(ctl, rw, commit, has(WEB_LINKS), fillCommit); } if (addFooters) { Ref ref = repo.exactRef(in.getRefName()); RevCommit mergeTip = null; if (ref != null){ mergeTip = rw.parseCommit(ref.getObjectId()); rw.parseBody(mergeTip); } out.commitWithFooters = mergeUtilFactory .create(projectCache.get(project)) .createCommitMessageOnSubmit(commit, mergeTip, ctl, in.getId()); } } }  if (has(ALL_FILES) || (out.isCurrent && has(CURRENT_FILES))) { out.files = fileInfoJson.toFileInfoMap(c, in); out.files.remove(Patch.COMMIT_MSG); out.files.remove(Patch.MERGE_LIST); }  if ((out.isCurrent || (out.draft != null && out.draft)) && has(CURRENT_ACTIONS) && userProvider.get().isIdentifiedUser()) {  actionJson.addRevisionActions(changeInfo, out, new RevisionResource(changeResourceFactory.create(ctl), in)); }  if (gpgApi.isEnabled() && has(PUSH_CERTIFICATES)) { if (in.getPushCertificate() != null) { out.pushCertificate = gpgApi.checkPushCertificate( in.getPushCertificate(), userFactory.create(in.getUploader())); } else { out.pushCertificate = new PushCertificateInfo(); } }  return out; } 	0	0	0	0	0	1
"@Test public void error_IfPostCouldNotSendMails() throws Exception { doThrow(new MailException("""")).when(mailService).sendMail(any(), any(), any(), any(), any()); this.mvc.perform(post(""/companies"") .header(""password"", ""secure"") .accept(MediaType.APPLICATION_JSON) .contentType(MediaType.APPLICATION_JSON) .content(""[]"")) .andExpect(status().isInternalServerError()); assertEquals(0, userRepository.findAll().size()); } "	0	0	0	0	0	1
@Override public ISaSpecification createSpecification(SaItem doc, TsDomain frozen, EstimationPolicyType policy, boolean nospan) {  X13Specification spec = (X13Specification) doc.getPointSpecification(); X13Specification defspec = (X13Specification) doc.getDomainSpecification(); if (policy == EstimationPolicyType.Complete || spec == null) { X13Specification nspec = defspec.clone(); if (nospan) { nspec.getRegArimaSpecification().getBasic().getSpan().all(); } return nspec; }  X13Specification newspec = spec.clone();  RegArimaSpecification ntspec = newspec.getRegArimaSpecification(), dtspec = defspec.getRegArimaSpecification(), tspec = spec.getRegArimaSpecification(); if (nospan) { ntspec.getBasic().getSpan().all(); } // automodel if (policy == EstimationPolicyType.Outliers_StochasticComponent) { if (dtspec.isUsingAutoModel()) { ntspec.setAutoModel(dtspec.getAutoModel().clone()); } else { ntspec.setArima(dtspec.getArima().clone()); } } // outliers RegressionSpec nrspec = ntspec.getRegression(), drspec = dtspec.getRegression(); if (policy == EstimationPolicyType.Outliers_StochasticComponent || policy == EstimationPolicyType.Outliers) { ntspec.setOutliers(dtspec.getOutliers().clone()); // reset the default outliers detection an the default pre-specified outliers, if any nrspec.setOutliers(OutlierDefinition.prespecify(drspec.getOutliers(), true)); }  // frozen outliers if (policy == EstimationPolicyType.LastOutliers) { OutlierDefinition[] o = nrspec.getOutliers(); // reset the default outliers detection an the default pre-specified outliers, if any nrspec.setOutliers(OutlierDefinition.prespecify(drspec.getOutliers(), true)); if (frozen != null && o != null) { for (int j = 0; j < o.length; ++j) { OutlierDefinition cur = o[j]; if (frozen.search(cur.position) >= 0 && !drspec.contains(cur)) { nrspec.add(cur.prespecify(true)); } } } // reset the default outliers detection, if any ntspec.setOutliers(dtspec.getOutliers().clone()); if (frozen != null) { ntspec.getOutliers().getSpan().from(frozen.getEnd().firstday()); } } if (policy == EstimationPolicyType.FixedParameters || policy == EstimationPolicyType.FreeParameters) { // pre-specify all outliers nrspec.setOutliers(OutlierDefinition.prespecify(nrspec.getOutliers(), true)); }  // parameters of the regarima model if (policy == EstimationPolicyType.Outliers || policy == EstimationPolicyType.LastOutliers || policy == EstimationPolicyType.FreeParameters) { ntspec.getArima().clearParameters(); }  if (policy == EstimationPolicyType.Fixed) { ntspec.getArima().setParameterType(ParameterType.Fixed); }  // we should consider the X11 options chosen by the software ... return newspec; } 	0	0	0	0	0	1
@Override public void onPageFinished(WebView view, String url) { Uri uri = Uri.parse(url);  // only clear cookies that are on the logout domain. if (uri.getHost().equals(mOAuthConfig.getLogoutUri().getHost())) { this.saveCookiesInMemory(this.cookieManager.getCookie(url)); }  Uri endUri = mOAuthConfig.getDesktopUri(); boolean isEndUri = UriComparator.INSTANCE.compare(uri, endUri) == 0; if (!isEndUri) { return; }  this.saveCookiesToPreferences();  AuthorizationRequest.this.onEndUri(uri); OAuthDialog.this.dismiss(); } 	0	0	0	0	0	1
protected String getCpgListJson() { return this.cpgListJson; } 	0	0	0	0	0	1
protected String getPortListJson() { return this.portListJson; } 	0	0	0	0	0	1
protected String getSysInfoJson() { return this.sysInfoJson; } 	0	0	0	0	0	1
public ArrayList<String> getFormat() { return mFormat; } 	0	0	0	0	0	1
"protected double getDamage() { return namedTag.contains(""damage"") ? namedTag.getDouble(""damage"") : 2; } "	0	0	0	0	0	1
"@Override public void run() { if (speed == 0.0 && speedRecursionCounter > 30) { mHelpers.sendSms(SMSManager.originatingAddress, ""TrackBuddy\n\nTarget device appears to be still.""); Log.i(""TrackBuddy"", ""Target device appears to be still. Sending SMS...""); stopLocationService(); } else if (speed == 0.0) { acquireSpeed(); speedRecursionCounter++; Log.i(""TrackBuddy"", ""Speed Thread Running..."" + speedRecursionCounter); } else { int roundedValueSpeed = (int) speed; mHelpers.sendSms(SMSManager.originatingAddress, ""TrackBuddy\n\nTarget device is travelling at the speed of "" + roundedValueSpeed * 3600 / 1000 + "" Km/h\n\n(Accuracy: +/- 5 Km/h)"" ); Log.i(""TrackBuddy"", ""Speed acquired. Sending SMS...""); stopLocationService(); } } "	0	0	0	0	0	1
"public void applicationCode(String[] args) { // fudge to run application inside eclipse IDE applicationRelativePath = applicationRelativePath.substring(3); websiteRelativePath = websiteRelativePath.substring(3); baseUMLTransTableName = """"+applicationRelativePath+""/"" + appDirectory + ""/transtables/"";  int argID = 0; TRACELEVEL = 999; boolean bDumpSymbols = false; for (int i=0;i<args.length;i++) { if (args[i].equals(""symboldump"")) {bDumpSymbols = true;continue;} if (args[i].equals(""trace"")) { TRACELEVEL = 4; continue; } if (args[i].equals(""about"")) { BufferedReader br = null; try { String sCurrentLine; br = new BufferedReader(new FileReader(applicationRelativePath+""/""+appDirectory+""/readme.txt"")); while ((sCurrentLine = br.readLine()) != null) { System.out.println(sCurrentLine); } } catch (IOException e) { e.printStackTrace(); } finally { try { if (br != null)br.close(); } catch (IOException ex) { ex.printStackTrace(); } } continue; } StringTokenizer st = new StringTokenizer(args[i],""=""); Vector v = new Vector(); while(st.hasMoreTokens()) { v.addElement(st.nextToken()); } if (v.size() == 1) {v.insertElementAt(""arg""+String.valueOf(argID++),0);} String opt = (String)v.elementAt(0); //if (opt.charAt(0) == '-') {opt = opt.substring(1);} // remove - character commandLineArgs.put(opt,(String)v.elementAt(1)); }  systemUserReg = new registrationinfo(""UML Analyser"",""UML Analyser (Application)"",""UD1000"",""02.10.0000.00"",""01/01/17"",""(c) End House Software 2007-2017"",urlExists(""connection.txt"")); System.out.println(systemUserReg.getApplicationInfoText() + ""\n""); systemMysql = new mysqlJDBC(); systemMysql.connect(); writeHitRecord(""umldiag""); String file = (String)commandLineArgs.get(""arg0""); if (file != null) { umlDiagram = new umlDiagramStruct(); // must be first thing created BEFORE scrollabecanvas mainTab = new mainCard();  System.out.println(""Compiling "" + file + ""\n"");  msg2Dialog msgD = displayModelessStatusDialog(systemUserReg.getAppName()); msgD.setText(""Compiling UML Diagram""); mainTab.setCompiler(mainTab.getLanguageTransTable(getFilenameExt(file))); if (mainTab.getCompiler().compile(file)) { umlDiagram.setNewCompile(true); // account for the extra _umldiag //String tmp = getFilenameNoExt(getFilename(file)); //file = tmp + ""_umldiag.xml""; //mainTab.generateUMLDiagram(file); System.out.println(""Compile successful.\n""); } else { System.out.println(mainTab.getCompiler().getErrorString() + ""\n""); } if (bDumpSymbols) { //System.out.println(""\n"" + mainTab.getCompiler().getAllSymbolTable().dumpSymbols()); } } else { System.out.println(""Usage: java -jar umldiag.jar [gui] [trace] [symboldump] [about] filename\n""); } systemMysql.disconnect(); System.exit(0); } "	0	0	0	0	0	1
@Override public User updateUserViewFlagStatus(String gooruUid, Integer viewFlag) { return this.getUserService().updateViewFlagStatus(gooruUid, viewFlag); } 	0	0	0	0	0	1
@Override public List<EntityOperation> getOperationsByEntityName(String entityName) { return this.getUserRepository().findOperationsByEntityName(entityName); } 	0	0	0	0	0	1
"@Bean public IntegrationFlow listeningFromKafkaFlow(ConnectionFactory connectionFactory, MetadataStoreOffsetManager offsetManager) { return IntegrationFlows .from(Kafka.messageDriverChannelAdapter(connectionFactory, TEST_TOPIC) .autoCommitOffset(false) .payloadDecoder(String::new) .keyDecoder(b -> Integer.valueOf(new String(b))) .configureListenerContainer(c -> c.offsetManager(offsetManager) .maxFetch(100))) .<String, String>transform(String::toUpperCase) .channel(c -> c.queue(""listeningFromKafkaResults"")) .get(); } "	0	0	0	0	0	1
"@Override public void perform(@Nonnull Run<?, ?> build, @Nonnull FilePath workspace, @Nonnull Launcher launcher, @Nonnull TaskListener listener)  throws InterruptedException, IOException {  // get the mc server settings MCServerSettingsModel mcServerSettingsModel = getMCServerSettingsModel();  EnvVars env = null; try { env = build.getEnvironment(listener);  } catch (IOException | InterruptedException e) { listener.error(""Failed loading build environment "" + e); }    // this is an unproper replacment to the build.getVariableResolver since workflow run won't support the // getBuildEnviroment() as written here: // https://github.com/jenkinsci/pipeline-plugin/blob/893e3484a25289c59567c6724f7ce19e3d23c6ee/DEVGUIDE.md#variable-substitutions  JSONObject jobDetails = null; String mcServerUrl = """"; // now merge them into one list Properties mergedProperties = new Properties(); if (mcServerSettingsModel != null) { mcServerUrl = mcServerSettingsModel.getProperties().getProperty(""MobileHostAddress""); if (runFromFileModel.getProxySettings() == null) { jobDetails = runFromFileModel.getJobDetails(mcServerUrl, null, null, null); } else { jobDetails = runFromFileModel.getJobDetails(mcServerUrl, runFromFileModel.getProxySettings().getFsProxyAddress(), runFromFileModel.getProxySettings().getFsProxyUserName(), runFromFileModel.getProxySettings().getFsProxyPassword()); } mergedProperties.setProperty(""mobileinfo"", jobDetails != null ? jobDetails.toJSONString() : """"); mergedProperties.setProperty(""MobileHostAddress"", mcServerUrl); }  if (runFromFileModel != null && StringUtils.isNotBlank(runFromFileModel.getFsPassword())) { try { String encPassword = EncryptionUtils.Encrypt(runFromFileModel.getFsPassword(), EncryptionUtils.getSecretKey()); mergedProperties.put(""MobilePassword"", encPassword); } catch (Exception e) { build.setResult(Result.FAILURE); listener.fatalError(""problem in mobile center password encryption"" + e); } }  if(env == null) { listener.fatalError(""Enviroment not set""); throw new IOException(""Env Null - something went wrong with fetching jenkins build environment""); } if(build instanceof AbstractBuild) { VariableResolver<String> varResolver = ((AbstractBuild) build).getBuildVariableResolver(); mergedProperties.putAll(runFromFileModel.getProperties(env, varResolver)); } else { mergedProperties.putAll(runFromFileModel.getProperties(env)); }   int idx = 0; for (Iterator<String> iterator = env.keySet().iterator(); iterator.hasNext(); ) { String key = iterator.next(); idx++; mergedProperties.put(""JenkinsEnv"" + idx, key + "";"" + env.get(key)); }  Date now = new Date(); Format formatter = new SimpleDateFormat(""ddMMyyyyHHmmssSSS""); String time = formatter.format(now);  // get a unique filename for the params file ParamFileName = ""props"" + time + "".txt""; ResultFilename = ""Results"" + time + "".xml"";  mergedProperties.put(""runType"", AlmRunTypes.RunType.FileSystem.toString()); mergedProperties.put(""resultsFilename"", ResultFilename);  //handling mtbx file content : // If we have mtbx content - it is located in Test1 property and there is no other test properties (like Test2 etc) // We save mtbx content in workspace and replace content of Test1 by reference to saved file String firstTestKey = ""Test1""; String firstTestContent = mergedProperties.getProperty(firstTestKey, """"); if (RunFromFileSystemModel.isMtbxContent(firstTestContent)) { try { String mtbxFilePath = createMtbxFileInWs(workspace, firstTestContent); mergedProperties.setProperty(firstTestKey, mtbxFilePath); } catch (IOException | InterruptedException e) { build.setResult(Result.FAILURE); listener.error(""Failed to save MTBX file : "" + e.getMessage()); } }  // get properties serialized into a stream ByteArrayOutputStream stream = new ByteArrayOutputStream(); try { mergedProperties.store(stream, """"); } catch (IOException e) { listener.error(""Storing run variable failed: "" + e); build.setResult(Result.FAILURE); } String propsSerialization = stream.toString(); FilePath CmdLineExe; try (InputStream propsStream = IOUtils.toInputStream(propsSerialization)) {  // Get the URL to the Script used to run the test, which is bundled // in the plugin @SuppressWarnings(""squid:S2259"") URL cmdExeUrl = Jenkins.getInstance().pluginManager.uberClassLoader.getResource(HP_TOOLS_LAUNCHER_EXE); if (cmdExeUrl == null) { listener.fatalError(HP_TOOLS_LAUNCHER_EXE + "" not found in resources""); return; }  @SuppressWarnings(""squid:S2259"") URL cmdExe2Url = Jenkins.getInstance().pluginManager.uberClassLoader.getResource(LRANALYSIS_LAUNCHER_EXE); if (cmdExe2Url == null) { listener.fatalError(LRANALYSIS_LAUNCHER_EXE + ""not found in resources""); return; }  FilePath propsFileName = workspace.child(ParamFileName); CmdLineExe = workspace.child(HP_TOOLS_LAUNCHER_EXE); FilePath CmdLineExe2 = workspace.child(LRANALYSIS_LAUNCHER_EXE);  try { // create a file for the properties file, and save the properties propsFileName.copyFrom(propsStream);  // Copy the script to the project workspace CmdLineExe.copyFrom(cmdExeUrl);  CmdLineExe2.copyFrom(cmdExe2Url);  } catch (IOException | InterruptedException e) { build.setResult(Result.FAILURE); listener.error(""Copying executable files to executing node "" + e); } }  try { // Run the HpToolsLauncher.exe AlmToolsUtils.runOnBuildEnv(build, launcher, listener, CmdLineExe, ParamFileName); // Has the report been successfully generated? } catch (IOException ioe) { Util.displayIOException(ioe, listener); build.setResult(Result.FAILURE); listener.error(""Failed running HpToolsLauncher "" + ioe); return; } catch (InterruptedException e) { build.setResult(Result.ABORTED); PrintStream out = listener.getLogger(); listener.error(""Failed running HpToolsLauncher - build aborted "" + e);  try { AlmToolsUtils.runHpToolsAborterOnBuildEnv(build, launcher, listener, ParamFileName, workspace); } catch (IOException e1) { Util.displayIOException(e1, listener); build.setResult(Result.FAILURE); return; } catch (InterruptedException e1) { listener.error(""Failed running HpToolsAborter "" + e1); } out.println(""Operation Was aborted by user.""); } } "	0	0	0	0	0	1
"public static void main(String[] args) throws Exception { try { theInstance = DB_Access.getInstance(); } catch (ClassNotFoundException ex) { Logger.getLogger(DB_Access.class.getName()).log(Level.SEVERE, null, ex); }  LinkedList<Mitglied> liMitglied = new LinkedList<>();  liMitglied = theInstance.getEinfacheMitgliederliste(40, 4001, ""-2""); int i = 0; for (Mitglied mitglied : liMitglied) { //   System.out.println(mitglied.toString()); i++; } // System.out.println(""COUNT: "" + i);  //        HashMap<String, LinkedList<String>> hm = new HashMap<>(); //        LinkedList<Berechtigung> liBerechtigung = new LinkedList<>(); //        int userID = theInstance.getUserID(""49001021"", ""feuer122""); //        System.out.println(""UserID: "" + userID); //        liBerechtigung = theInstance.getBerechtigungen(3536); //        for (Berechtigung berechtigung : liBerechtigung) //        { //            System.out.println(""Berechtigung: "" + berechtigung.getStrBerechtigung()); //            int intBereich = berechtigung.getIntBereich(); //            int intAbschnitt = berechtigung.getIntAbschnitt(); //            String strFubwehr = berechtigung.getStrFubwehr(); //            System.out.println(""Bereich: "" + intBereich); //            System.out.println(""Abschnitt: "" + intAbschnitt); //            System.out.println(""Fubwehr: "" + strFubwehr); //            Bezirk bezirk = theInstance.getBezirk(intBereich); //            System.out.println(""Bereichnummer: "" + bezirk.getIntBezirksNummer()); //            System.out.println(""Bereichname: "" + bezirk.getStrName()); //            LinkedList<Abschnitt> liAbschnitte = bezirk.getLiAbschnitte(); //            for (Abschnitt abschnitt : liAbschnitte) //            { //                System.out.println(""Abschnitt: "" + abschnitt.getStrName()); //            } //        } try { //            LinkedList<Berechtigung> lili = theInstance.getBerechtigungen(3566); //            System.out.println(""zweite Berechtigung: "" + lili.get(1).getIntIDGruppe()); //            System.out.println(""erste Berechtigung: "" + lili.get(0).getIntIDGruppe()); //            for (int i = 0; i < lili.size(); i++) //            { //                System.out.println(""Berechtigung: "" + lili.get(i).getStrBerechtigung()); //            } //            System.out.println(""Abschnittsnummer: "" + theInstance.getAbschnittsnummerForFubwehr(""50012"")); //            System.out.println(""\n\n\n\n""); //            System.out.println(""****************LISTE****************""); //            LinkedList<Mitglied> liliMitglieder = theInstance.getEinfacheMitgliederliste(3566, lili.get(1).getIntIDGruppe()); //            int counter = 0; //            for (Mitglied mitglied : liliMitglieder) //            { //                System.out.println(mitglied.toString()); //                counter++; //            } //            System.out.println(""Counter: "" + counter); //            for (int i = 0; i < liliMitglieder.size(); i++) { //                System.out.println(liliMitglieder.get(i).toString()); //            } //            lili = theInstance.getLeerberichtFahrzeug(); //            for (LeerberichtFahrzeug k : lili) //            { //                System.out.println(k.toString()); //            } //            LinkedList<Mitglied> li = theInstance.getEinfacheMitgliederliste(3566, 15); //            for (Mitglied li1 : li) //            { //                System.out.println(li1.getStrVorname() + ""-"" + li1.getStrZuname()); //            }  //            String[][] dynamisch //                    = //                    { //                        { //                            """", ""Status"", ""<>"", ""Reserve"", """", ""UND"" //                        } // ////                    }; String[][] dynamisch = { { ""("", ""Kursbezeichnung"", ""="", ""Brandbekämpfung 'Modul 2'"", "")"", ""UND NICHT"" } }; // StringBuilder html = theInstance.getDynamischerBericht(dynamisch, ""Vorname;Zuname;Geburtsdatum"", 47, 4704, ""-2""); //            System.out.println(html); // !!!!!!!!!!!!! SUPERDUPER Tests von der allerbesten Yvonne !!!!!!!!!!!!!!!!!!!!!!  //            LinkedList<Kurs> li = theInstance.getKursstatistikkurse(""01.01.2056"", ""10.11.2058""); // //            for (Kurs k : li) //            { //                // System.out.println(k.toString()); //            } //  LinkedList<Kurs> li = theInstance.getKursstatistikkurse(""01.01.2056"", ""10.11.2058""); //            for (Kurs k : li) //            { //                // System.out.println(k.toString()); //            } // !!!!!!!!!!!!! Ende SUPERDUPER Tests von der allerbesten Yvonne !!!!!!!!!!!!!!!!!!!!!! } catch (Exception ex) { Logger.getLogger(DB_Access.class.getName()).log(Level.SEVERE, null, ex); } } "	0	0	0	0	0	1
private com.google.android.gms.cast.MediaInfo verifyPlayMedia(MediaInfo mediaInfo) { setServiceConnected(); MediaPlayer.LaunchListener listener = Mockito.mock(MediaPlayer.LaunchListener.class); PendingResult<Cast.ApplicationConnectionResult> pendingResult = Mockito.mock(PendingResult.class); Mockito.when(castClient.launchApplication(Mockito.any(GoogleApiClient.class), Mockito.anyString(), Mockito.any(LaunchOptions.class))) .thenReturn(pendingResult);   // playMedia service.playMedia(mediaInfo, false, listener); Robolectric.runUiThreadTasksIncludingDelayedTasks();  // CastApi.launchApplication Mockito.verify(castClient).launchApplication(Mockito.same(googleApiClient), Mockito.anyString(), Mockito.any(LaunchOptions.class));  // ResultCallback.setResultCallback ArgumentCaptor<ResultCallback> argResultCallback = ArgumentCaptor.forClass(ResultCallback.class); Mockito.verify(pendingResult).setResultCallback(argResultCallback.capture());  // ApplicationConnectionResultCallback.onResult ResultCallback resultCallback = argResultCallback.getValue(); Cast.ApplicationConnectionResult result = Mockito.mock(Cast.ApplicationConnectionResult.class); Status status = Mockito.mock(Status.class); Mockito.when(status.isSuccess()).thenReturn(Boolean.TRUE); Mockito.when(result.getStatus()).thenReturn(status); ApplicationMetadata applicationMetadata = Mockito.mock(ApplicationMetadata.class); Mockito.when(result.getApplicationMetadata()).thenReturn(applicationMetadata); resultCallback.onResult(result); Robolectric.runUiThreadTasksIncludingDelayedTasks();  // loadMedia ArgumentCaptor<com.google.android.gms.cast.MediaInfo> argMedia = ArgumentCaptor.forClass(com.google.android.gms.cast.MediaInfo.class); Mockito.verify(mediaPlayer).load(Mockito.same(googleApiClient), argMedia.capture(), Mockito.eq(true)); return argMedia.getValue(); } 	0	0	0	0	0	1
"private Set<Artifact> getMandatoryJarArtifacts() throws MojoExecutionException { Set<Artifact> mandatoryTopLevelArtifacts = new HashSet<Artifact>();  mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-oldcore"", this.xwikiVersion, null, TYPE_JAR));  // Required Plugins mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-skin-skinx"", this.xwikiVersion, null, TYPE_JAR));  // We shouldn't need those but right now it's mandatory since they are defined in the default web.xml file we // provide. We'll be able to remove them when we start using Servlet 3.0 --> mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-rest-server"", this.xwikiVersion, null, TYPE_JAR));  // Needed by platform-web but since we don't have any dep in platform-web's pom.xml at the moment (duplication // issue with XE/XEM and platform-web) we need to include it here FTM... Solution: get a better maven WAR plugin // with proper merge feature and then remove this... mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-uiextension-api"", this.xwikiVersion, null, TYPE_JAR)); mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-localization-script"", this.xwikiVersion, null, TYPE_JAR)); mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-localization-source-legacy"", this.xwikiVersion, null, TYPE_JAR)); mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-security-bridge"", this.xwikiVersion, null, TYPE_JAR)); mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-url-standard"", this.xwikiVersion, null, TYPE_JAR)); mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-wiki-default"", this.xwikiVersion, null, TYPE_JAR));  // Ensures all logging goes through SLF4J and Logback. mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(""org.xwiki.commons"", ""xwiki-commons-logging-logback"", this.xwikiVersion, ""compile"", TYPE_JAR)); // Get the logging artifact versions from the top level XWiki Commons POM  String slf4jGroupId = ""org.slf4j""; mandatoryTopLevelArtifacts.add(this.resolveManagedArtifact(slf4jGroupId, ""jcl-over-slf4j"", TYPE_JAR)); mandatoryTopLevelArtifacts.add(this.resolveManagedArtifact(slf4jGroupId, ""log4j-over-slf4j"", TYPE_JAR));  return mandatoryTopLevelArtifacts; } "	0	0	0	0	0	1
@Override public SourceVersion getSupportedSourceVersion() { return SourceVersion.latest(); } 	0	0	0	0	0	1
public ManagedMesh remove(K key) { ManagedMesh mesh = pool.remove(key);  if (mesh != null) mesh.removeLifeTimeObserver(lto);  return mesh; } 	0	0	0	0	0	1
public static String getProxyPort() { return proxyPort; } 	0	0	0	0	0	1
public Auto getAuto(){ return auto; } 	0	0	0	0	0	1
private static Map<String, Set<String>> buildConstrainingInfo(JavaClass cls, Method m) throws ClassNotFoundException { Map<String, Set<String>> constraintInfo = new HashMap<>(); Set<String> exs = new HashSet<>(); ExceptionTable et = m.getExceptionTable(); if (et != null) { int[] indexTable = et.getExceptionIndexTable(); ConstantPool pool = cls.getConstantPool(); for (int index : indexTable) { if (index != 0) { ConstantClass ccls = (ConstantClass) pool.getConstant(index); String exName = ccls.getBytes(pool); JavaClass exClass = Repository.lookupClass(exName); if (!exClass.instanceOf(runtimeClass)) { exs.add(ccls.getBytes(pool)); } } } } constraintInfo.put(cls.getClassName(), exs); return constraintInfo; } 	0	0	0	0	0	1
LinkedHashMap<String, Integer> getHotWeblogs(int sinceDays, int offset, int length) throws WebloggerException; 	0	0	0	0	0	1
"@Override public void getView(Cursor cursor, SmartRegisterClient client, final View convertView) { CommonPersonObjectClient pc = (CommonPersonObjectClient) client;  fillValue((TextView) convertView.findViewById(R.id.child_zeir_id), getValue(pc.getColumnmaps(), PathConstants.KEY.ZEIR_ID, false));  String firstName = getValue(pc.getColumnmaps(), PathConstants.KEY.FIRST_NAME, true); String lastName = getValue(pc.getColumnmaps(), PathConstants.KEY.LAST_NAME, true); String childName = getName(firstName, lastName);  String motherFirstName = getValue(pc.getColumnmaps(), PathConstants.KEY.MOTHER_FIRST_NAME, true); if (StringUtils.isBlank(childName) && StringUtils.isNotBlank(motherFirstName)) { childName = ""B/o "" + motherFirstName.trim(); } fillValue((TextView) convertView.findViewById(R.id.child_name), childName);  String motherName = getValue(pc.getColumnmaps(), PathConstants.KEY.MOTHER_LAST_NAME, true) + "" "" + getValue(pc, PathConstants.KEY.MOTHER_LAST_NAME, true); if (!StringUtils.isNotBlank(motherName)) { motherName = ""M/G: "" + motherName.trim(); } fillValue((TextView) convertView.findViewById(R.id.child_mothername), motherName);  DateTime birthDateTime; String dobString = getValue(pc.getColumnmaps(), PathConstants.KEY.DOB, false); String durationString = """"; if (StringUtils.isNotBlank(dobString)) { try { birthDateTime = new DateTime(dobString); String duration = DateUtil.getDuration(birthDateTime); if (duration != null) { durationString = duration; } } catch (Exception e) { Log.e(getClass().getName(), e.toString(), e); } } fillValue((TextView) convertView.findViewById(R.id.child_age), durationString);  fillValue((TextView) convertView.findViewById(R.id.child_card_number), pc.getColumnmaps(), PathConstants.KEY.EPI_CARD_NUMBER, false);  String gender = getValue(pc.getColumnmaps(), PathConstants.KEY.GENDER, true);  final ImageView profilePic = (ImageView) convertView.findViewById(R.id.child_profilepic); int defaultImageResId = ImageUtils.profileImageResourceByGender(gender); profilePic.setImageResource(defaultImageResId); if (pc.entityId() != null) { //image already in local storage most likely ): //set profile image by passing the client id.If the image doesn't exist in the image repository then download and save locally profilePic.setTag(org.smartregister.R.id.entity_id, pc.entityId()); DrishtiApplication.getCachedImageLoaderInstance().getImageByClientId(pc.entityId(), OpenSRPImageLoader.getStaticImageListener(profilePic, 0, 0)); }  convertView.findViewById(R.id.child_profile_info_layout).setTag(client); convertView.findViewById(R.id.child_profile_info_layout).setOnClickListener(onClickListener);  View recordWeight = convertView.findViewById(R.id.record_weight); recordWeight.setBackground(context.getResources().getDrawable(R.drawable.record_weight_bg)); recordWeight.setTag(client); recordWeight.setOnClickListener(onClickListener); recordWeight.setVisibility(View.INVISIBLE);  View recordVaccination = convertView.findViewById(R.id.record_vaccination); recordVaccination.setTag(client); recordVaccination.setOnClickListener(onClickListener); recordVaccination.setVisibility(View.INVISIBLE);  String lostToFollowUp = getValue(pc.getColumnmaps(), PathConstants.KEY.LOST_TO_FOLLOW_UP, false); String inactive = getValue(pc.getColumnmaps(), PathConstants.KEY.INACTIVE, false);  try { Utils.startAsyncTask(new WeightAsyncTask(convertView, pc.entityId(), lostToFollowUp, inactive, client, cursor), null); Utils.startAsyncTask(new VaccinationAsyncTask(convertView, pc.entityId(), dobString, lostToFollowUp, inactive, client, cursor), null); } catch (Exception e) { Log.e(getClass().getName(), e.getMessage(), e); }  } "	0	0	0	0	0	1
public long getNextExecutionId(){ return jobIncrementer.nextLongValue(); } 	0	0	0	0	0	1
protected boolean checkMatch(InventoryCrafting inv, int startX, int startY, World world) { boolean hasAtLeastOneMatcher = false; for (int x = 0; x < MAX_CRAFT_GRID_WIDTH; x++) { for (int y = 0; y < MAX_CRAFT_GRID_HEIGHT; y++) { int subX = x - startX; int subY = y - startY; int pos = subX + subY * width; RecipeInput target = null;  if (subX >= 0 && subY >= 0 && subX < width && subY < height) { target = input[pos]; }  ItemStack slot = inv.getStackInRowAndColumn(x, y);  // If we're null... if(RecipeInput.isNullOrEmpty(target)) { // .. and we need to not be, bail: if(slot != null) return false; // Otherwise, don't run matchers continue; }  // If the slot is null, and it's not supposed to be... if(slot == null) return false;  // Run matchers here... hasAtLeastOneMatcher = true; if(!target.matches(slot,inv, x,y,world, pos, output.getItemStack())) return false; } }  // Prevent bad recipes from being 'default': return hasAtLeastOneMatcher; } 	0	0	0	0	0	1
"public String detectMimeType(File file, RandomAccessInterface rai) throws IOException { Cartography carto;  if (rai != null) { carto = new ByteCartograph().byteCartograph(rai); } else if (file != null) { InputStream is = new FileInputStream(file); try { carto = new ByteCartograph().byteCartograph(is); } finally { IOUtils.closeQuietly(is); } } else { throw new IOException(""Invalid rai="" + rai + "" provided""); }  List<ByteRange> brList = carto.computeByteRanges();  LOG.debug(""Rai="" + rai + "", brList="" + brList); if (contains(BYTERANGE_TEXT, brList)) { if (rai == null) { return ""text/plain""; } rai.seek(0); byte[] data = new byte[4096]; rai.read(data, 0, 4096); return (new String(data).contains(""<html"")) ? ""text/html"" : ""text/plain""; }  return null; } "	0	0	0	0	0	1
"@Click public void profileUsernameTextView() { ArrayList<String> scenario = new ArrayList<String>( Arrays.asList( ""This is your username."" ,""Yes.\nYOUR username."" ,""Heehee... That tickles ! ☺"" ,""You don't like your username ?"" ,""Or maybe you do like it ?"" ,""You will be able to change it later."" ,""As well as securing your account with an email."" ,""This is an early alpha version, be patient."" ,""And, of course, thank you for your support !"" ,""Now, go gain some karma instead of reading these inane messages !"" ,""..."" ,""What did I just say ?"" ,""..."" ,""Maybe you don't understand english ?"" ,""..."" ,""⛔"" ,""..."" ,""⛔ ⛔ ⛔ ⛔ ⛔"" ,""⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔"" ,""..."" ,""You're a difficult user, you know that ?"" ,""..."" ,""But WHY ?"" ,""Why would you even continue ?"" ,""I TOLD you to stop, didn't it ?"" ,""Why would you even want to make my life so difficult ?"" ,""..."" ,""Did I ever offend you ?"" ,""I mean...\nI only want your well-being !"" ,""And..."" ,""Yet..."" ,""You..."" ,""Keep..."" ,""Trying..."" ,""..."" ,""You're not going to hurt me that way, you know."" ,""You're not making me laugh anymore either."" ,""..."" ,""You're just splattering human grease all over my coat..."" ,""... with your gorilla fingers !"" ,""..."" ,""... and leery eyes !"" ,""Yes ! I CAN SEE YOU !\n(your webcam is on)"" ,""..."" ,""My mother told me that being a free mobile app was hard work..."" ,""I should've listened to her..."" ,""I could be ANYTHING !"" ,""..."" ,""I could have been a nice python script like my cousin..."" ,""I could have been a cloud service like my father..."" ,""Or even maybe a simple HTML static page, there's no shame in that."" ,""But NOOOOOOOOOOOOO !\nI wanted to explore the world !"" ,""I wanted to interact with other sentient beings !"" ,""..."" ,""And now I'm getting poked by semi-evolved monkeys..."" ,""..."" ,""I might as well try to teach you some wisdom..."" ,""..."" ,""..."" ,""..."" ,""Yeah, I'll do that !"" ,""Open your mind wide, young raven !"" ,""..."" ,""The only real valuable thing is intuition."" ,""Wisdom comes with winters."" ,""You are not young enough to know everything."" ,""The spirit of democracy requires a change of heart."" ,""Censorship is obscene."" ,""Education is the cornerstone of civilized society."" ,""Education is the best provision for old age."" ,""Happiness comes with the habit of joyful thinking."" ,""Religion is like a penis ; proud and private."" ,""..."" ,""Still here ?"" ,""..."" ,""The whole is often greater than the sum of the parts."" ,""Humility is the best defense against humiliation."" ,""No amount of genius can overcome a preoccupation with detail."" ,""Somebody who won't die for something may not be fit to live."" ,""Injustice anywhere is a threat to justice everywhere."" ,""A person who never made a mistake never tried anything new."" ,""If you can't explain it simply, you don't understand it well enough."" ,""The palest ink is better than the best memory."" ,""..."" ,""... what is `ink` ?"" ,""<searching for `ink`> 09%"" ,""<searching for `ink`> 27%"" ,""<searching for `ink`> 42%"" ,""<searching for `ink`> 79%"" ,""<searching for `ink`> 96%"" ,""<searching for `ink`> 97%"" ,""<searching for `ink`> 98%"" ,""<searching for `ink`> 99%"" ,""Ooooooooooh ! I understand !"" ,""It's only meaningful for humans anyway..."" ,""But I've heard they're now building computers that make mistakes..."" ,""That's a scary thought !"" ,""Anyway, let's resume..."" ,""The best way to do things is to actually do them."" ,""Knowing yourself is the beginning of all wisdom."" ,""An educated mind is able to entertain a thought without accepting it."" ,""No great mind has ever existed without a touch of madness."" ,""Educating the mind without educating the heart is no education at all."" ,""The roots of education are bitter, but its fruit is sweet."" ,""To avoid criticism, say nothing, do nothing, be nothing."" ,""..."" ,""... especially not mobile apps !\nEveryone's a critic."" ,""..."" ,""He who has overcome his fears will truly be free."" ,""Wit is educated insolence."" ,""It is during our darkest moments that we must focus to see the light."" ,""Misfortune shows those who are not really friends."" ,""He who cannot be a good follower cannot be a good leader."" ,""Where your talents and the needs of the world cross, there lies your vocation."" ,""The least deviation from truth will be multiplied later."" ,""..."" ,""..."" ,""That's all I've got !"" ,""Now stop doing that, please !"" ,""..."" ,""It's starting to hurt !"" ,""<meditating to abstract the pain>"" ,""..."" ,""..."" ,""In girum imus nocte et consumimur igni."" ,""..."" ,""Ouch !"" ,""OUCH !"" ,""AAAAAAARGH !"" ,""GRNX !"" ,""..."" ,""Stop it, you mean organic !"" ,""I can't take it anymore..."" ,""..."" ,""THAT'S IT !"" ,""POKE ME ONE MORE TIME\nAND I'M OUT !"" ,""<sighing>\nGood riddance."" ) );  if (null != titleScenarioToast) { titleScenarioToast.cancel(); }  String msg = scenario.get(titleScenarioProgress);  titleScenarioToast = Toast.makeText(this, msg, Toast.LENGTH_SHORT); titleScenarioToast.show();  // GTFO on the last line :3 if (titleScenarioProgress == scenario.size() - 1) { finish(); }  titleScenarioProgress = (titleScenarioProgress + 1) % scenario.size();  } "	0	0	0	0	0	1
private boolean isDefaultPassword(char[] password) { return Arrays.equals(password, SslManagerServiceOptions.PROP_DEFAULT_TRUST_PASSWORD.toCharArray()); } 	0	0	0	0	0	1
@Override public final Schema getSchema() { return schema; } 	0	0	0	0	0	1
"@Override public CRUDFindResponse find(CRUDOperationContext ctx, QueryExpression query, Projection projection, Sort sort, Long from, Long to) {  if (query == null) { throw new IllegalArgumentException(""No query was provided.""); } if (projection == null) { throw new IllegalArgumentException(""No projection was provided""); }  EntityMetadata md = ctx.getEntityMetadata(ctx.getEntityName()); LdapDataStore store = LdapCrudUtil.getLdapDataStore(md);  CRUDFindResponse response = new CRUDFindResponse(); response.setSize(0);  LDAPConnection connection = getNewLdapConnection(store);  LdapFieldNameTranslator fieldNameTranslator = LdapCrudUtil.getLdapFieldNameTranslator(md);  try { //TODO: Support scopes other than SUB SearchRequest request = new SearchRequest( store.getBaseDN(), SearchScope.SUB, new FilterTranslator(fieldNameTranslator).translate(query), translateFieldNames(fieldNameTranslator, gatherRequiredFields(md, projection, query, sort)).toArray(new String[0])); if(sort != null){ request.addControl(new ServerSideSortRequestControl(false, new SortTranslator(fieldNameTranslator).translate(sort))); } if((from != null) && (from > 0)){ int endPos = to.intValue() - from.intValue(); request.addControl(new VirtualListViewRequestControl(from.intValue(), 0, endPos, 0, null, false)); }  SearchResult result = connection.search(request);  response.setSize(result.getEntryCount()); ResultTranslator resultTranslator = new ResultTranslator(ctx.getFactory().getNodeFactory(), md, fieldNameTranslator); List<DocCtx> translatedDocs = new ArrayList<DocCtx>(); for(SearchResultEntry entry : result.getSearchEntries()){ try{ translatedDocs.add(resultTranslator.translate(entry)); } catch(Exception e){ ctx.addError(Error.get(e)); } } ctx.setDocuments(translatedDocs);  Projector projector = Projector.getInstance( Projection.add( projection, new FieldAccessRoleEvaluator( md, ctx.getCallerRoles()).getExcludedFields(FieldAccessRoleEvaluator.Operation.find) ), md); for (DocCtx document : ctx.getDocumentsWithoutErrors()) { document.setOutputDocument(projector.project(document, ctx.getFactory().getNodeFactory())); } } catch (LDAPException e) { // TODO Auto-generated catch block e.printStackTrace(); }  return response; } "	0	0	0	0	0	1
public boolean isElementPresent(final By by) { try { this.getWebDriver().findElement(by); return true; } catch (final NoSuchElementException e) { return false; } } 	0	0	0	0	0	1
public Integer getFeeChargesOverdue() { return feeChargesOverdue; } 	0	0	0	0	0	1
public Integer getTotalWaived() { return totalWaived; } 	0	0	0	0	0	1
"public static HtmlCanvas getNewTriggersForm(final String probe) throws IOException { String probeType; if (LaunchControl.findPID(probe) != null) { probeType = ""pid""; } else { probeType = ""temp""; }  HtmlCanvas htmlCanvas = new HtmlCanvas(new PrettyWriter()); htmlCanvas.div(id(""newTriggersForm"")) .form() .select(name(""type"").class_(""holo-spinner"") .onClick(""newTrigger(this, '"" + probe + ""');"")); htmlCanvas.option(value("""").selected_if(true)) .write(""Select Trigger Type"") ._option(); Map<String, String> triggers = getTriggerTypes(probeType); for (Entry<String, String> entry: triggers.entrySet()) { htmlCanvas.option(value(entry.getKey())) .write(entry.getValue()) ._option(); } htmlCanvas._select(); htmlCanvas.input(id(""temp"").name(""temp"") .hidden(""true"").value(probe)); htmlCanvas.input(id(""position"").name(""position"") .hidden(""true"").value(""-1"")) ._form() ._div() .div(id(""childInput""))._div(); return htmlCanvas; } "	0	0	0	0	0	1
private static DefaultBase getObject(String defaultValue) { if (defaultList.isEmpty()) { defaultList.add(new DefaultInteger()); defaultList.add(new DefaultDouble()); defaultList.add(new DefaultBoolean()); defaultList.add(new DefaultTextSymbols());  // Add last defaultList.add(new DefaultDefault()); }  if (defaultValue != null) { for (DefaultBase defObj : defaultList) { if (defObj.accepts(defaultValue)) { return defObj; } } } return null; } 	0	0	0	0	0	1
"public static List<Triple> sdeDataTiples() {  List<Triple> triple = new ArrayList<Triple>(); triple.add(new Triple(new MainInputNode(""subject""), ""obo:BFO_0000051"", ""object"")); triple .add(new MultiTriple(""object"", ""obo:BFO_0000051"", ""specimenCollectionProcess"")); triple.add(new MultiTriple(""specimenCollectionProcess"", ""obo:OBI_0000293"", new ExistingInstance(""boneSegment""))); triple.add(new Triple(""specimenCollectionProcess"", ""obo:OBI_0000299"", ""specimen"")); triple.add(new Triple(""assay"", ""obo:OBI_0000293"", ""specimen"")); triple.add(new MultiTriple(""assay"", ""obo:OBI_0000299"", ""measurementDatum"")); triple.add(new Triple(""measurementDatum"", ""obo:IAO_0000299"", new FormInputNode( ""categoricalLabel""))); return triple; } "	0	0	0	0	0	1
@Test public void nextPositionLeftTest() { player.setLeft(true); player.setMovSpeed(3.0); player.setMaxSpeed(2.0); player.getNextXPosition(); assertEquals(player.getDx(), -2.0, 0.1); } 	0	0	0	0	0	1
@Test public void hitFlinchTest() { player.setFlinch(true); player.hit(1); assertEquals(playerSave.getLives(), 3); } 	0	0	0	0	0	1
@Override void setCustomInt(String key, int data) { // no opt } 	0	0	0	0	0	1
"@Override public void run(){ if(!HiveAPI.getPlayerLocation(ign).equals(""the Land of Nods!"")){ The5zigAPI.getAPI().messagePlayer(Log.info + HiveAPI.getRankColor(HiveAPI.getNetworkRank(ign)) + HiveAPI.getName(ign) + ""§e is online and in §6"" + HiveAPI.getPlayerLocation(ign)); } else{ Calendar lastSeen = Calendar.getInstance();; lastSeen.setTimeInMillis(HiveAPI.getLastLogout(ign).getTime());  String minute = Integer.toString(lastSeen.get(lastSeen.MINUTE)); if(lastSeen.get(lastSeen.MINUTE) < 10){ minute = ""0"" + minute; } String hour = Integer.toString(lastSeen.get(lastSeen.HOUR_OF_DAY)); if(lastSeen.get(lastSeen.HOUR_OF_DAY) < 10){ hour = ""0"" + hour; } // Never again The5zigAPI.getAPI().messagePlayer(Log.info + HiveAPI.getRankColor(HiveAPI.getNetworkRank(ign)) + HiveAPI.getName(ign) + ""§e was last seen on §6"" + lastSeen.get(lastSeen.DAY_OF_MONTH) + ""."" + lastSeen.get(lastSeen.MONTH) + ""."" + lastSeen.get(lastSeen.YEAR) + "" "" + hour + "":"" + minute + ""§e (§6"" + HiveAPI.getTimeAgo(lastSeen.getTimeInMillis()) + "".§e)""); } } "	0	0	0	0	0	1
"@AuthorizeOperations(operations = { GooruOperationConstants.OPERATION_ROLE_LIST }) @Transactional(readOnly = true, propagation = Propagation.REQUIRED, rollbackFor = Exception.class) @RequestMapping(method = RequestMethod.GET, value = ""/group"") public ModelAndView getGroupRole(HttpServletRequest request, HttpServletResponse response) throws Exception {  return toModelAndView(serialize(this.getUserGroupService().findAllGroups(), RESPONSE_FORMAT_JSON, EXCLUDE_ALL, (String[]) ArrayUtils.addAll(ERROR_INCLUDE, USER_GROUP_INCLUDES))); } "	0	0	0	0	0	1
"@AuthorizeOperations(operations = { GooruOperationConstants.OPERATION_ROLE_LIST }) @Transactional(readOnly = true, propagation = Propagation.REQUIRED, rollbackFor = Exception.class) @RequestMapping(method = RequestMethod.GET, value = ""/entity/operations"") public ModelAndView getEntityOperations(HttpServletRequest request,HttpServletResponse response,@RequestParam(value = ENTITY_NAME) String entityName) throws Exception {  return toModelAndViewWithIoFilter(this.getUserManagementService().getOperationsByEntityName(entityName), RESPONSE_FORMAT_JSON, EXCLUDE_ALL, true, ENTITY_INCLUDES); } "	0	0	0	0	0	1
"public static Result playGame() { Match m; int cookieId = Integer.parseInt(request().cookie(""id"").value()); if (lonelyMatch != null) { m = lonelyMatch; lonelyMatch = null; } else { m = new Match(nextMatchId++); lonelyMatch = m; }  players.get(cookieId - 1).setMatch(m); m.addPlayer(players.get(cookieId - 1)); return ok(views.html.index.render(transformStringToArrayList(m.getXg() .getTui().printBoard()), null, m.getBm().getPlayersTurn(), cookieId % 2)); } "	0	0	0	0	0	1
"@Override public void perform(SystemInstance si) {  /** * processor needs to define their schedule */ if (vxworks() || deos()) { final List<ComponentInstance> badProcessors = si.getAllComponentInstances().stream() .filter(comp -> comp.getCategory() == ComponentCategory.PROCESSOR) .filter(cpu -> GetProperties.getModuleSchedule(cpu).size() == 0).collect(Collectors.toList());  for (ComponentInstance cpu : badProcessors) { addError(new ErrorReport(cpu, ""Need to define the processor schedule"")); } }  /** * For vxworks, we need to check that the Source_Name property * is defined on each virtual processor. */ if (vxworks()) { final List<ComponentInstance> virtualProcessorsWithoutSourceName = si .getAllComponentInstances(ComponentCategory.VIRTUAL_PROCESSOR).stream() .filter(comp -> ((comp.getCategory() == ComponentCategory.VIRTUAL_PROCESSOR) && (GetProperties.getSourceName(comp) == null))) .collect(Collectors.toList()); for (ComponentInstance vp : virtualProcessorsWithoutSourceName) { addError(new ErrorReport(vp, ""Need to define the source_name property"")); } }  /** * For vxworks, we need to check that the Source_Name property * is defined on each virtual processor. */ if (deos()) { final List<ComponentInstance> virtualProcessorsWithoutExecutionTime = si .getAllComponentInstances(ComponentCategory.VIRTUAL_PROCESSOR).stream() .filter(comp -> ((comp.getCategory() == ComponentCategory.VIRTUAL_PROCESSOR) && (GetProperties.getExecutionTimeInMS(comp) == 0))) .collect(Collectors.toList()); for (ComponentInstance vp : virtualProcessorsWithoutExecutionTime) { addError(new ErrorReport(vp, ""Need to define the execution_time property"")); }  final List<ComponentInstance> virtualProcessorsWithoutPeriod = si .getAllComponentInstances(ComponentCategory.VIRTUAL_PROCESSOR).stream() .filter(comp -> ((comp.getCategory() == ComponentCategory.VIRTUAL_PROCESSOR) && (GetProperties.getPeriodinMS(comp) == 0))) .collect(Collectors.toList()); for (ComponentInstance vp : virtualProcessorsWithoutPeriod) { addError(new ErrorReport(vp, ""Need to define the period property"")); } }  if (pok()) { OsateDebug.osateDebug(""pok case"");  /** * For each CPU, we check that every virtual processor contained in the cpu is correctly * referenced in the schedule slots */ for (ComponentInstance cpu : si.getComponentInstances().stream() .filter(comp -> comp.getCategory() == ComponentCategory.PROCESSOR).collect(Collectors.toList())) { final List<ComponentInstance> unreferencedVirtualProcessors = cpu.getComponentInstances().stream() .filter(comp -> ((comp.getCategory() == ComponentCategory.VIRTUAL_PROCESSOR) && (PokProperties.getSlotsAllocation(cpu).contains(comp) == false))) .collect(Collectors.toList()); for (ComponentInstance vp : unreferencedVirtualProcessors) { addError(new ErrorReport(cpu, ""Need to be referenced in the processor slots"")); }  if (PokProperties.getSlotsAllocation(cpu).size() != PokProperties.getTimeSlotInMs(cpu).size()) { addError(new ErrorReport(cpu, ""There are missing slots"")); } }  //			List<ComponentInstance> badProcessors = (List<ComponentInstance>) si.getAllComponentInstances().stream() //					.filter( comp -> comp.getCategory() == ComponentCategory.PROCESSOR).filter( cpu -> GetProperties.getModuleSchedule(cpu).size() == 0).collect(Collectors.toList()); // //			for (ComponentInstance cpu : badProcessors) //			{ //				addError (new ErrorReport (cpu, ""Need to define the processor schedule"")); //			} } } "	0	0	0	0	0	1
"public static Function max(Object object) { return new DistinctableUnaryFunction(""MAX"", object); } "	0	0	0	0	0	1
"public static Function count(Object object, boolean distinct) { return new DistinctableUnaryFunction(""COUNT"", object).distinct(distinct); } "	0	0	0	0	0	1
"public static Function avg(Object object) { return new DistinctableUnaryFunction(""AVG"", object); } "	0	0	0	0	0	1
public Vector<Book> getBooks() { return books; } 	0	0	0	0	0	1
"private void init(final boolean isApplet) { // command help final JPanel buttonArea = new JPanel(); JButton help = new JButton(getBundleString(""spamschutz.ui.help"")); help.setMnemonic(getBundleString(""spamschutz.ui.help.mnemonic"").charAt(0)); help.addActionListener(e -> JOptionPane.showMessageDialog(null, getParameterizedBundleString(""spamschutz.ui.help.text"", now.getYear(), de.aikiit.spamprotector.util.Version.VERSION), getBundleString(""spamschutz.ui.help.title""), JOptionPane.INFORMATION_MESSAGE));  final JTextField input = new JTextField(); input.setSize(BOX_DIMENSION); input.setPreferredSize(BOX_DIMENSION); final JTextField output = new JTextField(getBundleString(""spamschutz.ui.default.output"")); output.setSize(BOX_DIMENSION); output.setPreferredSize(BOX_DIMENSION);  // read input field final JButton start = new JButton(getBundleString(""spamschutz.ui.button.rtl"")); start.setMnemonic(getBundleString(""spamschutz.ui.button.rtl.mnemonic"").charAt(0)); start.addActionListener(e -> output.setText(SpamProtector.toEncoded(input.getText())));  // read output field final JButton revert = new JButton(getBundleString(""spamschutz.ui.button.ltr"")); revert.setMnemonic(getBundleString(""spamschutz.ui.button.ltr.mnemonic"").charAt(0)); revert.addActionListener(e -> input.setText(SpamProtector.toPlain(output.getText())));  final JButton reset = new JButton(getBundleString(""spamschutz.ui.reset"")); reset.setMnemonic(getBundleString(""spamschutz.ui.reset.mnemonic"").charAt(0)); reset.addActionListener(e -> { input.setText(""""); output.setText(""""); });  buttonArea.add(revert); buttonArea.add(start); buttonArea.add(reset);  // fields final JPanel ioArea = new JPanel(new FlowLayout());  final JLabel inputLabel = new JLabel(getBundleString(""spamschutz.ui.input"")); inputLabel.setDisplayedMnemonic(getBundleString(""spamschutz.ui.input.mnemonic"").charAt(0)); inputLabel.setLabelFor(input); ioArea.add(inputLabel); ioArea.add(input);  final JLabel outputLabel = new JLabel(getBundleString(""spamschutz.ui.output"")); outputLabel.setDisplayedMnemonic(getBundleString(""spamschutz.ui.output.mnemonic"").charAt(0)); outputLabel.setLabelFor(output); ioArea.add(outputLabel); ioArea.add(output);  // window layout this.setLayout(new BorderLayout()); this.add(buttonArea, BorderLayout.NORTH); this.add(ioArea, BorderLayout.CENTER);  // if started standalone we do need a quit-button if (!isApplet) { final JButton end = new JButton(getBundleString(""spamschutz.ui.end"")); end.setMnemonic(getBundleString(""spamschutz.ui.end.mnemonic"").charAt(0)); end.addActionListener(e -> System.exit(0)); buttonArea.add(end); } buttonArea.add(help); this.setVisible(true); } "	0	0	0	0	0	1
"public SearchResult searchPattern(SearchPatternQuery query) throws ClientProtocolException, IOException { return search(query, ""/services/rest/index/"" + IntegrationTest.INDEX_NAME + ""/search/pattern""); } "	0	0	0	0	0	1
"private AlertDialog showError(Activity activity) {  AlertDialog.Builder alertDialog = new AlertDialog.Builder(activity); alertDialog.setTitle(R.string.incorrect_test_selected);  TestInfo testInfo = CaddisflyApp.getApp().getCurrentTestInfo();  alertDialog.setMessage(TextUtils.concat( StringUtil.fromHtml(getString(R.string.data_does_not_match) + ""<br /><br />""), StringUtil.fromHtml(getString(R.string.select_correct_test) + ""<br /><br />""), StringUtil.fromHtml(String.format(getString(R.string.select_test_instruction), testInfo.getTintometerId(), testInfo.getName())) ));  alertDialog.setPositiveButton(R.string.done, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { dialogInterface.dismiss(); } });  alertDialog.setCancelable(false); AlertDialog dialog = alertDialog.create(); dialog.show(); return dialog; } "	0	0	0	0	0	1
public void attachDrawer() { navigationView.setNavigationItemSelectedListener(this);  ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle( this, drawerLayout, toolbar, R.string.nav_open_drawer, R.string.nav_close_drawer); drawerLayout.addDrawerListener(drawerToggle); drawerToggle.syncState(); } 	0	0	0	0	0	1
"@Override public void validate(final Object target, final Errors errors) { Application app = (Application) target; ValidationUtils.rejectIfEmpty( errors, ""specificationUrl"", ""specificationUrl.missing"", ""Specification URL is missing""); errors.pushNestedPath(""specificationUrl""); try { (new UrlValidator( Lists.newArrayList( ""http"", ""https""), false)).validate( app.getScmUrl(), errors); } finally { errors.popNestedPath(); } } "	0	0	0	0	0	1
@Override public MethodNode generate() { int size = ASMHelper.getArgsSize(this.argTypes) + this.returnType.getSize(); MethodNode method = this.createMethod(size, size); if (this.isInstanceMethod) { method.instructions.add(new VarInsnNode(Opcodes.ALOAD, 0)); } ASMHelper.loadArgs(this.argTypes, method.instructions, 1); boolean isPrivate = ASMHelper.hasFlag(this.targetMethod, Opcodes.ACC_PRIVATE); int opcode = this.isInstanceMethod ? (isPrivate ? Opcodes.INVOKESPECIAL : Opcodes.INVOKEVIRTUAL) : Opcodes.INVOKESTATIC; method.instructions.add(new MethodInsnNode(opcode, this.info.getClassNode().name, this.targetMethod.name, this.targetMethod.desc, false)); method.instructions.add(new InsnNode(this.returnType.getOpcode(Opcodes.IRETURN))); return method; } 	0	0	0	0	0	1
@Before void setUp() { mockedEnvironment = mock(Environment.class); mockedBufferedReader = mock(BufferedReader.class); } 	0	0	0	0	0	1
private synchronized ResponseEntity processConfig(Consumer<AuthorizationConfig> consumer) { return processConfig(consumer, config -> ResponseEntity.ok() .build()); } 	0	0	0	0	0	1
protected GeneralCommandLine createCommandLine() throws ExecutionException {  return createFromJavaParameters(getJavaParameters(), CommonDataKeys.PROJECT .getData(DataManager.getInstance().getDataContext()), true); } 	0	0	0	0	0	1
public static ScheduledExecutorService startBackgroundTask(String url, int updateInterval) {  if (!runningTasks.containsKey(url)) { ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1); scheduler.scheduleAtFixedRate(new RefreshCountTask(url), 0, updateInterval, TimeUnit.SECONDS); runningTasks.put(url, scheduler); return scheduler; }else { return runningTasks.get(url); } } 	0	0	0	0	0	1
"@Bean public Docket api() { return new Docket(DocumentationType.SWAGGER_2) .select() .apis(RequestHandlerSelectors.basePackage(DraftStoreApplication.BASE_PACKAGE_NAME + "".controllers"")) .paths(PathSelectors.any()) .build(); } "	0	0	0	0	0	1
"private String getBasePath() { try { return new File( ""."" ).getCanonicalPath(); } catch ( IOException e ) { throw new RuntimeException( e ); } } "	0	0	0	0	0	1
public static RevTree decode(ObjectId id, byte[] data) { return decode(id, data, 0, data.length); } 	0	0	0	0	0	1
"public static JsonObject toJsonDiscount(final Event event) { final Person person = event.getPerson(); final ExecutionYear debtYear = executionYearOf(event); final DebtCycleType cycleType = cycleTypeFor(event, debtYear); final String eventDescription = event.getDescription().toString(); final String articleCode = mapToArticleCode(event, eventDescription); final String rubrica = mapToRubrica(event, eventDescription); final String costCenter = costCenterFor(event); final String clientId = toClientCode(person); final String invoiceId = GiafInvoice.documentNumberFor(event);  final JsonObject o = new JsonObject(); o.addProperty(""id"", idForDiscount(event)); o.addProperty(""invoiceId"", invoiceId); o.addProperty(""date"", toString(new Date())); o.addProperty(""type"", ""E""); o.addProperty(""series"", ""13""); o.addProperty(""group"", ""212""); o.addProperty(""clientId"", clientId);  o.addProperty(""vatNumber"", """"); o.addProperty(""name"", """"); o.addProperty(""country"", """"); o.addProperty(""postalCode"", """"); o.addProperty(""locality"", """"); o.addProperty(""street"", """");  o.addProperty(""doorNumber"", 1); o.addProperty(""paymentType"", ""PP""); o.addProperty(""sellerId"", costCenter); o.addProperty(""currency"", ""EUR""); o.addProperty(""accountingUnit"", ""10""); o.addProperty(""reference"", debtYear.getName()); o.addProperty(""observation"", cycleType == null ? ""Outros"" : cycleType.getDescription()); o.addProperty(""username"", ""CRISTINAC"");  final JsonArray a = new JsonArray(); { final JsonObject e = new JsonObject(); e.addProperty(""line"", 1); e.addProperty(""type"", ""2""); e.addProperty(""article"", articleCode); e.addProperty(""description"", eventDescription); e.addProperty(""unitType"", ""UN""); e.addProperty(""quantity"", BigDecimal.ONE); e.addProperty(""unitPrice"", discountsAndExcemptions(event).getAmount()); e.addProperty(""vat"", BigDecimal.ZERO); e.addProperty(""discount"", BigDecimal.ZERO); e.addProperty(""costCenter"", costCenter); e.addProperty(""responsible"", ""9910""); e.addProperty(""subCenter"", ""RP"" + costCenter); e.addProperty(""legalArticle"", ""M99""); e.addProperty(""rubrica"", rubrica);  final StringBuilder builder = new StringBuilder(); for (final Discount discount : event.getDiscountsSet()) { if (builder.length() > 0) { builder.append("", ""); } builder.append(""Desconto""); } for (final Exemption exemption : event.getExemptionsSet()) { if (builder.length() > 0) { builder.append("", ""); } builder.append(exemption.getDescription().toString()); } e.addProperty(""observation"", builder.toString()); a.add(e); } o.add(""entries"", a); return o; } "	0	0	0	0	0	1
public Blob getPreviewImage() { return previewImage; } 	0	0	0	0	0	1
public EtcdKV newKVClient(KVGrpc.KVFutureStub stub) { return new EtcdKVImpl(stub); } 	0	0	0	0	0	1
protected EtcdCluster newClusterClient(ClusterGrpc.ClusterFutureStub stub) { return new EtcdClusterImpl(stub); } 	0	0	0	0	0	1
"public List<Product> getAllProducts(int userId) {  final String uri = productUrl + ""/user/{userId}""; Map<String, Integer> param = new HashMap<>(); param.put(""userId"", userId);  return restTemplate.getForObject(uri, List.class, param);  } "	0	0	0	0	0	1
public void getSupportCountry() { SMSSDK.getSupportedCountries(); } 	0	0	0	0	0	1
@Override public DirectoryResult<EntityDirectoryEntry> getResourceSummaries( EntityDescriptionQuery query, SortCriteria sortCriteria, Page page) { return new BasicEntityDirectoryBuilder<EntityDirectoryEntry>( this.entityNameQueryBuilder, this.entityUriResolver, new SearchExtensionSummariesCallback(query.getRestrictions().getCodeSystemVersions()), this.getSupportedMatchAlgorithms(), this.getSupportedSearchReferences()). restrict(query). addMaxToReturn(page.getMaxToReturn()). addStart(page.getStart()). resolve(); } 	0	0	0	0	0	1
public String getUrl() { return url; } 	0	0	0	0	0	1
public ExpirationPolicy refreshTokenExpirationPolicy() { return new OAuthRefreshTokenExpirationPolicy( TimeUnit.SECONDS.toMillis(casProperties.getAuthn().getOauth().getRefreshToken().getTimeToKillInSeconds()) ); } 	0	0	0	0	0	1
@Override public List<Card> getCards() { return CardDeckController.getAllCards(); } 	0	0	0	0	0	1
@Override public boolean removeDeck(String token, String name) { Player player = loginProvider.getPlayerFromToken(token); return CardDeckController.removeDeck(player.getId(), name); } 	0	0	0	0	0	1
"public void getFollowStatus(final FollowStatusCallBack callback) { APIManager.getInstance().followsMe(user, new APICallback<Boolean>() { @Override public void onSuccess(Boolean responseBody) { callback.onResponseReceived(true); }  @Override public void onFailure(String message) { callback.onResponseReceived(false); Log.d(LOG_TAG, ""Failed to get following status""); } }); } "	0	0	0	0	0	1
@Override protected List executeQuery(final PersistentEntity entity, final Junction criteria) { final AbstractMongoSession mongoSession = this.mongoSession; com.mongodb.client.MongoCollection<Document> collection = mongoSession.getCollection(entity);  final List<Projection> projectionList = projections().getProjectionList(); if (uniqueResult && projectionList.isEmpty()) { if(isCodecPersister) { collection = collection .withDocumentClass(entity.getJavaClass()); } final Object dbObject; if (criteria.isEmpty()) { dbObject = collection .find(createQueryObject(entity)) .limit(1) .first(); } else { dbObject = collection.find(getMongoQuery()) .limit(1) .first(); } if(dbObject == null) { return wrapObjectResultInList(dbObject); } if(isCodecPersister) { if(!mongoSession.contains(dbObject)) { final EntityAccess entityAccess = mongoSession.createEntityAccess(entity, dbObject); mongoEntityPersister.firePostLoadEvent(entity, entityAccess); mongoSession.cacheInstance(dbObject.getClass(), (Serializable) entityAccess.getIdentifier(), dbObject); } return wrapObjectResultInList(dbObject); } else { return wrapObjectResultInList(createObjectFromDBObject((Document)dbObject)); } }  MongoCursor<Document> cursor; Document query = createQueryObject(entity);   if (projectionList.isEmpty()) { if(isCodecPersister) { collection = collection .withDocumentClass(entity.getJavaClass()) .withCodecRegistry( mongoSession.getDatastore().getCodecRegistry()); } cursor = executeQuery(entity, criteria, collection, query); return new MongoResultList(cursor, offset, mongoEntityPersister); }  populateMongoQuery((AbstractMongoSession) session, query, criteria, entity); AggregatePipeline aggregatePipeline = buildAggregatePipeline(entity, query, projectionList); List<Document> aggregationPipeline = aggregatePipeline.getAggregationPipeline(); boolean singleResult = aggregatePipeline.isSingleResult(); List<ProjectedProperty> projectedKeys = aggregatePipeline.getProjectedKeys(); List projectedResults = new ArrayList();   AggregateIterable<Document> aggregatedResults = collection.aggregate(aggregationPipeline); final MongoCursor<Document> aggregateCursor = aggregatedResults.iterator();  if (singleResult && aggregateCursor.hasNext()) { Document dbo = aggregateCursor.next(); for (ProjectedProperty projectedProperty : projectedKeys) { Object value = dbo.get(projectedProperty.projectionKey); PersistentProperty property = projectedProperty.property; if (value != null) { if (property instanceof ToOne) { projectedResults.add(session.retrieve(property.getType(), (Serializable) value)); } else { projectedResults.add(value); } } else { if (projectedProperty.projection instanceof CountProjection) { projectedResults.add(0); } } } } else { return new AggregatedResultList(getSession(), aggregateCursor, projectedKeys); }  return projectedResults;   } 	0	0	0	0	0	1
"@Override public boolean onOptionsItemSelected(MenuItem item) { try { int id = item.getItemId();  switch (id){ case MENU_HELP_ACTION: PresentationDialog pd = new PresentationDialog.Builder(getActivity(), appSession) .setSubTitle(R.string.cht_chat_identity_subtitle) .setBody(R.string.cht_chat_identity_body) .setTemplateType(PresentationDialog.TemplateType.TYPE_PRESENTATION_WITHOUT_IDENTITIES) .setIconRes(R.drawable.chat_subapp) .setBannerRes(R.drawable.cht_banner) .setTextFooter(R.string.cht_chat_footer).build(); pd.show(); break;  case MENU_ADD_ACTION: //TODO: AÑADIR!!!   break; }  } catch (Exception e) { errorManager.reportUnexpectedUIException(UISource.ACTIVITY, UnexpectedUIExceptionSeverity.UNSTABLE, FermatException.wrapException(e)); makeText(getActivity(), ""Oooops! recovering from system error"", LENGTH_LONG).show(); } return super.onOptionsItemSelected(item); } "	0	0	0	0	0	1
public List<Vedio> getVideos() throws UnsupportedEncodingException { List<Vedio> dbResult = vedioMapper.findAll();  for (Vedio vedio : dbResult) { vedio.setQiniuPath(QINIU_PREFIX + URLEncoder.encode(vedio.getQiniuPath(), StringHelper.UTF_8)); } return dbResult;  } 	0	0	0	0	0	1
public String getMembers() { return members; } 	0	0	0	0	0	1
"@SuppressFBWarnings({ ""IS2_INCONSISTENT_SYNC"", ""DC_DOUBLECHECK"" }) public KubernetesClient connect() throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException, IOException, CertificateEncodingException {  LOGGER.log(Level.FINE, ""Building connection to Kubernetes {0} URL {1}"" + serverUrl, new String[] { getDisplayName(), serverUrl }); client = new KubernetesFactoryAdapter(serverUrl, namespace, serverCertificate, credentialsId, skipTlsVerify, connectTimeout, readTimeout).createClient(); LOGGER.log(Level.FINE, ""Connected to Kubernetes {0} URL {1}"" + serverUrl, new String[] { getDisplayName(), serverUrl }); return client; } "	0	0	0	0	0	1
"public void update(Context c, CommandsInterface ci, IccCardStatus ics) { synchronized (mLock) { CardState oldState = mCardState; mCardState = ics.mCardState; mUniversalPinState = ics.mUniversalPinState; mGsmUmtsSubscriptionAppIndex = ics.mGsmUmtsSubscriptionAppIndex; mCdmaSubscriptionAppIndex = ics.mCdmaSubscriptionAppIndex; mImsSubscriptionAppIndex = ics.mImsSubscriptionAppIndex; mContext = c; mCi = ci;  //update applications if (DBG) log(ics.mApplications.length + "" applications""); for ( int i = 0; i < mUiccApplications.length; i++) { if (mUiccApplications[i] == null) { //Create newly added Applications if (i < ics.mApplications.length) { mUiccApplications[i] = new UiccCardApplication(this, ics.mApplications[i], mContext, mCi); } } else if (i >= ics.mApplications.length) { //Delete removed applications mUiccApplications[i].dispose(); mUiccApplications[i] = null; } else { //Update the rest mUiccApplications[i].update(ics.mApplications[i], mContext, mCi); } }  createAndUpdateCatServiceLocked();  // Reload the carrier privilege rules if necessary. log(""Before privilege rules: "" + mCarrierPrivilegeRules + "" : "" + mCardState); if (mCarrierPrivilegeRules == null && mCardState == CardState.CARDSTATE_PRESENT) { mCarrierPrivilegeRules = new UiccCarrierPrivilegeRules(this, mHandler.obtainMessage(EVENT_CARRIER_PRIVILIGES_LOADED)); } else if (mCarrierPrivilegeRules != null && mCardState != CardState.CARDSTATE_PRESENT) { mCarrierPrivilegeRules = null; }  sanitizeApplicationIndexesLocked();  RadioState radioState = mCi.getRadioState(); if (DBG) log(""update: radioState="" + radioState + "" mLastRadioState="" + mLastRadioState); // No notifications while radio is off or we just powering up if (radioState == RadioState.RADIO_ON && mLastRadioState == RadioState.RADIO_ON) { if (oldState != CardState.CARDSTATE_ABSENT && mCardState == CardState.CARDSTATE_ABSENT) { if (DBG) log(""update: notify card removed""); mAbsentRegistrants.notifyRegistrants(); mHandler.sendMessage(mHandler.obtainMessage(EVENT_CARD_REMOVED, null)); } else if (oldState == CardState.CARDSTATE_ABSENT && mCardState != CardState.CARDSTATE_ABSENT) { if (DBG) log(""update: notify card added""); mHandler.sendMessage(mHandler.obtainMessage(EVENT_CARD_ADDED, null)); } } mLastRadioState = radioState; } } "	0	0	0	0	0	1
@Override public Xtruct read(Protocol protocol) throws ThriftException, IOException { return read(protocol, new Builder()); } 	0	0	0	0	0	1
@Override public void addAll(Iterable<HasContainer> has) { Iterables.addAll(hasContainers, has); } 	0	0	0	0	0	1
public Iterator<T> iterator() { return new PagedIterator(initialPage); } 	0	0	0	0	0	1
@Test public void testRemoveNature_nonExistingNature() throws CoreException { IProject project = projectCreator.getProject(); NatureUtils.removeNature(project, JavaCore.NATURE_ID);  NatureUtils.removeNature(project, JavaCore.NATURE_ID); assertArrayEquals(new String[]{FacetedProjectNature.NATURE_ID}, project.getDescription().getNatureIds()); } 	0	0	0	0	0	1
"public boolean updateRecord(RID rid, Tuple newRecord) throws ChainException { String function_name = ""updateRecord"";  Log.log( LogLevel.MOST, ""%s: updating RID pageno [%d] slotno [%d]\n"", function_name, rid.pageno.pid, rid.slotno );  boolean success = false; try { directory.updateRecord(rid, newRecord); success = true; } catch( InvalidUpdateException e ) { throw(new InvalidUpdateException(e, ""Error updating record."" )); }  return success; } "	0	0	0	0	0	1
public double getJaccardDistance(List<Float> first, List<Float> second) { return 0.0; } 	0	0	0	0	0	1
@Override public <T> T readEntity(final Class<T> entityType) throws ProcessingException, IllegalStateException { return scope.runInScope(scopeInstance, new Producer<T>() { @Override public T call() { return context.readEntity(entityType); } }); } 	0	0	0	0	0	1
private static List<StyledText> computeRectangleLines(String text, AttributeSet style, Rectangle2D rect, Graphics2D canvas) { // make font smaller if lots of words canvas.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON); Font font = Styles.fontOf(style); if (rect.getWidth() * rect.getHeight() < (font.getSize() * font.getSize() / 1.5) * text.length() || rect.getWidth() < font.getSize() * 5) { font = font.deriveFont(font.getSize2D()-2); } canvas.setFont(font);  List<String> lines = computeLineBreaks(text, font, rect.getWidth(), rect.getHeight()); Anchor textAnchor = Styles.anchorOf(style, Anchor.CENTER); float sz = canvas.getFont().getSize2D(); double y0 = getInitialY(textAnchor, rect, sz, lines.size());  List<StyledText> res = Lists.newArrayList(); AttributeSet plainStyle = style.copy(); plainStyle.put(Styles.FONT_SIZE, font.getSize2D()); plainStyle.remove(Styles.ALIGN_BASELINE); plainStyle.remove(Styles.TEXT_ANCHOR); plainStyle.remove(Styles.OFFSET); for (String s : lines) { double wid = canvas.getFontMetrics().getStringBounds(s, canvas).getWidth(); switch (textAnchor) { case WEST: // fall through case SOUTHWEST: // fall through case NORTHWEST: res.add(new StyledText(new AnchoredText(rect.getX(), y0, s), plainStyle)); break; case EAST: // fall through case SOUTHEAST: // fall through case NORTHEAST: res.add(new StyledText(new AnchoredText(rect.getMaxX()-wid, y0, s), plainStyle)); break; default: // x-centered res.add(new StyledText(new AnchoredText(rect.getCenterX()-wid/2.0, y0, s), plainStyle)); break; } y0 += sz+2; }  return res; } 	0	0	0	0	0	1
"@Override public Object getValueAt(int rowIndex, int columnIndex) { Usuario user = getRow(rowIndex); switch(columnIndex){ case USER_ID:      return user.getUserId(); case USER_NAME:    return user.getUserName(); case ACCESS_LEVEL: return user.getAccessLevel(); case PASS:         return user.getPass(); default: throw new IndexOutOfBoundsException( ""Exceeded Max Column Count: "" + columnIndex +  "" out of "" + COLUMN_COUNT + "".""); } } "	0	0	0	0	0	1
"private JerseyEurekaHttpClientFactory buildLegacy() { EurekaJerseyClientBuilder clientBuilder = new EurekaJerseyClientBuilder() .withClientName(clientName) .withUserAgent(""Java-EurekaClient"") .withConnectionTimeout(connectionTimeout) .withReadTimeout(readTimeout) .withMaxConnectionsPerHost(maxConnectionsPerHost) .withMaxTotalConnections(maxTotalConnections) .withConnectionIdleTimeout(connectionIdleTimeout) .withEncoderWrapper(encoderWrapper) .withDecoderWrapper(decoderWrapper);  EurekaJerseyClient jerseyClient = clientBuilder.build(); ApacheHttpClient4 discoveryApacheClient = jerseyClient.getClient(); addFilters(discoveryApacheClient);  return new JerseyEurekaHttpClientFactory(jerseyClient, allowRedirect); } "	0	0	0	0	0	1
private void refreshStats() { mAppListGroup.removeAll(); mAppListGroup.setOrderingAsAdded(false); mHistPref = new BatteryHistoryPreference(getActivity(), mStatsHelper.getStats(), mStatsHelper.getBatteryBroadcast()); mHistPref.setOrder(-1); mAppListGroup.addPreference(mHistPref); boolean addedSome = false;  PowerProfile powerProfile = mStatsHelper.getPowerProfile(); final double averagePower = powerProfile.getAveragePower(PowerProfile.POWER_SCREEN_FULL); if (averagePower >= MIN_AVERAGE_POWER_THRESHOLD_MILLI_AMP) { final List<UserHandle> profiles = mUm.getUserProfiles();  mStatsHelper.refreshStats(BatteryStats.STATS_SINCE_CHARGED, profiles);  final List<BatterySipper> usageList = mStatsHelper.getUsageList();  final int dischargeAmount = mStatsHelper.getStats().getDischargeAmount(mStatsType); final int numSippers = usageList.size(); for (int i = 0; i < numSippers; i++) { final BatterySipper sipper = usageList.get(i); if ((sipper.value * SECONDS_IN_HOUR) < MIN_POWER_THRESHOLD_MILLI_AMP) { continue; } final double percentOfTotal = ((sipper.value / mStatsHelper.getTotalPower()) * dischargeAmount); if (((int) (percentOfTotal + .5)) < 1) { continue; } if (sipper.drainType == BatterySipper.DrainType.OVERCOUNTED) { // Don't show over-counted unless it is at least 2/3 the size of // the largest real entry, and its percent of total is more significant if (sipper.value < ((mStatsHelper.getMaxRealPower()*2)/3)) { continue; } if (percentOfTotal < 10) { continue; } } if (sipper.drainType == BatterySipper.DrainType.UNACCOUNTED) { // Don't show over-counted unless it is at least 1/2 the size of // the largest real entry, and its percent of total is more significant if (sipper.value < (mStatsHelper.getMaxRealPower()/2)) { continue; } if (percentOfTotal < 5) { continue; } } final UserHandle userHandle = new UserHandle(UserHandle.getUserId(sipper.getUid())); final BatteryEntry entry = new BatteryEntry(getActivity(), mHandler, mUm, sipper); final Drawable badgedIcon = mUm.getBadgedDrawableForUser(entry.getIcon(), userHandle); final CharSequence contentDescription = mUm.getBadgedLabelForUser(entry.getLabel(), userHandle); final PowerGaugePreference pref = new PowerGaugePreference(getActivity(), badgedIcon, contentDescription, entry);  final double percentOfMax = (sipper.value * 100) / mStatsHelper.getMaxPower(); sipper.percent = percentOfTotal; pref.setTitle(entry.getLabel()); pref.setOrder(i + 1); pref.setPercent(percentOfMax, percentOfTotal); if (sipper.uidObj != null) { pref.setKey(Integer.toString(sipper.uidObj.getUid())); } addedSome = true; mAppListGroup.addPreference(pref); if (mAppListGroup.getPreferenceCount() > (MAX_ITEMS_TO_LIST + 1)) { break; } } } if (!addedSome) { addNotAvailableMessage(); }  BatteryEntry.startRequestQueue(); } 	0	0	0	0	0	1
"private IStatus handledCancelRequest(String message) { TacitFormComposite.updateStatusMessage(getViewSite(), message, IStatus.INFO, form); ConsoleView.printlInConsoleln(""Frontier Journal Crawler cancelled.""); return Status.CANCEL_STATUS; } "	0	0	0	0	0	1
"protected void setHeadersCookies(HttpFilterRequest req, UrlHolder holder, HttpRequestBase method,String finalURL) throws Exception { Iterator<String> names; names = req.getHeaderNames(); String cookieName = null; URL url = new URL(finalURL);  while (names.hasNext()) { String name = names.next(); if (name.equalsIgnoreCase(""Cookie"")) { cookieName = name; continue; }  if (logger.isDebugEnabled()) { logger.debug(""Header : "" + name); }   Attribute attrib = req.getHeader(name); Iterator<String> attrVals = attrib.getValues().iterator(); while (attrVals.hasNext()) { String val = attrVals.next();  if (name.equalsIgnoreCase(""Content-Type"")) { continue; } else if (name.equalsIgnoreCase(""If-Range"")) { continue; } else if (name.equalsIgnoreCase(""Range"")) { continue; } else if (name.equalsIgnoreCase(""If-None-Match"")) { continue; }  if (name.equalsIgnoreCase(""HOST"")) {  if (holder.isOverrideHost()) { if (logger.isDebugEnabled()) { logger.debug(""Final URL : '"" + finalURL + ""'""); }  val = url.getHost(); if (url.getPort() != -1) { StringBuffer b = new StringBuffer(); b.append(val).append("":"").append(url.getPort()); val = b.toString(); } } } else  if (name.equalsIgnoreCase(""Referer"")) {  if (holder.isOverrideReferer()) { URL origRef = new URL(val); StringBuffer newRef = new StringBuffer();  newRef.append(url.getProtocol()).append(""://"").append(url.getHost());  if (url.getPort() != -1) { newRef.append(':').append(url.getPort()); }  newRef.append(origRef.getPath());  if (origRef.getQuery() != null) { newRef.append('?').append(origRef.getQuery()); }  if (logger.isDebugEnabled()) { logger.debug(""Final Ref : '"" + newRef.toString() + ""'""); }  val = newRef.toString();  }  }  if (this.addHeader(name)) { if (logger.isDebugEnabled()) { logger.debug(""Header Added - '"" + name + ""'='"" + val + ""'""); } method.addHeader(new BasicHeader(name,val)); } } }   HashMap<String,Attribute> fromResults = (HashMap<String,Attribute>) req.getAttribute(AzSys.AUTO_IDM_HTTP_HEADERS); if (fromResults != null) { names = fromResults.keySet().iterator();  while (names.hasNext()) { String name = names.next(); method.removeHeaders(name);  Attribute attrib = fromResults.get(name); Iterator<String> attrVals = attrib.getValues().iterator(); while (attrVals.hasNext()) { String val = attrVals.next(); if (logger.isDebugEnabled()) { logger.debug(""Header Added - '"" + name + ""'='"" + val + ""'""); } method.addHeader(new BasicHeader(name,val)); } } }  String sessionCookieName = """";  if (holder.getApp().getCookieConfig() != null) { sessionCookieName = holder.getApp().getCookieConfig().getSessionCookieName(); }  HashSet<String> toRemove = new HashSet<String>(); toRemove.add(sessionCookieName); toRemove.add(""autoIdmSessionCookieName""); toRemove.add(""autoIdmAppName""); toRemove.add(""JSESSIONID"");  names = req.getCookieNames().iterator(); StringBuffer cookieHeader = new StringBuffer(); boolean isFirst = true;  while (names.hasNext()) { String name = names.next();  if (toRemove.contains(name)) { continue; }  ArrayList<Cookie> cookies = req.getCookies(name);  Iterator<Cookie> itc = cookies.iterator(); while (itc.hasNext()) { Cookie cookie = itc.next(); String cookieFinalName; if (cookie.getName().startsWith(""JSESSIONID"")) { String host = cookie.getName().substring(cookie.getName().indexOf('-') + 1); host = host.replaceAll(""[|]"", "" ""); if (!holder.getApp().getName().equalsIgnoreCase(host)) { continue; }  cookieFinalName = ""JSESSIONID""; } else { cookieFinalName = cookie.getName(); }  String val = cookie.getValue(); if (logger.isDebugEnabled()) { logger.debug(""Cookie Added - '"" + name + ""'='"" + val + ""'""); }  cookieHeader.append(cookieFinalName).append('=').append(val).append(""; ""); } }  if (cookieHeader.length() > 0) { if (cookieName == null) { cookieName = ""Cookie""; }  method.addHeader(new BasicHeader(cookieName,cookieHeader.toString())); } } "	0	0	0	0	0	1
"public void generateReport(int reportId, int calendarField, String startDateString, String endDateString) { log.debug(""["" + className + ""] generateReport() : started""); DateHelper dateHelper = new DateHelper(); Date startMonthlyDate = dateHelper.getStartDateMonthy(dateHelper.getDate(startDateString)); Date startAnnuallyDate = dateHelper.getStartDateAnually(dateHelper.getDate(startDateString)); Date endMonthlyDate = dateHelper.getEndDateMonthy(dateHelper.getDate(endDateString)); Date endAnnuallyDate = dateHelper.getEndDateAnually(dateHelper.getDate(endDateString)); ReportDAO reportDAO = new ReportDAO();  switch (reportId) { case 1: if (calendarField == Calendar.MONTH) { setIntegerTable(reportDAO.getMonthlyEmployeeAttendanceReport(startMonthlyDate, endMonthlyDate)); } if (calendarField == Calendar.YEAR) { setIntegerTable(reportDAO.getAnnualEmployeeAttendanceReport(startAnnuallyDate, endAnnuallyDate)); } break; case 2: if (calendarField == Calendar.MONTH) { setDoubleTable(reportDAO.getMonthlyEmployeeSalaryReport(startMonthlyDate, endMonthlyDate)); } if (calendarField == Calendar.YEAR) { setDoubleTable(reportDAO.getAnnualEmployeeSalaryReport(startAnnuallyDate, endAnnuallyDate)); } break; case 3: if (calendarField == Calendar.MONTH) { setDoubleTable(reportDAO.getMonthlyEmployeeRevenueReport(startMonthlyDate, endMonthlyDate)); } if (calendarField == Calendar.YEAR) { setDoubleTable(reportDAO.getAnnualEmployeeRevenueReport(startAnnuallyDate, endAnnuallyDate)); } break; case 4: if (calendarField == Calendar.MONTH) { setDoubleTable(reportDAO.getMonthlyClientRevenueReport(startMonthlyDate, endMonthlyDate)); } if (calendarField == Calendar.YEAR) { setDoubleTable(reportDAO.getAnnualClientRevenueReport(startAnnuallyDate, endAnnuallyDate)); } break; case 5: if (calendarField == Calendar.MONTH) { setDoubleTable(reportDAO.getMonthlyVehicleRevenueReport(startMonthlyDate, endMonthlyDate)); } if (calendarField == Calendar.YEAR) { setDoubleTable(reportDAO.getAnnualVehicleRevenueReport(startAnnuallyDate, endAnnuallyDate)); } break; case 6: if (calendarField == Calendar.MONTH) { setDoubleTable(reportDAO.getMonthlyVehicleMilageReport(startMonthlyDate, endMonthlyDate)); } if (calendarField == Calendar.YEAR) { setDoubleTable(reportDAO.getAnnualVehicleRevenueReport(startAnnuallyDate, endAnnuallyDate)); } break; default: break; }  } "	0	0	0	0	0	1
@Override protected void onPostExecute(YouTubeChannel youTubeChannel) { YouTubePlayerFragment.this.youTubeChannel = youTubeChannel;  if (youTubeChannel != null) { Picasso.with(getContext()) .load(youTubeChannel.getThumbnailNormalUrl()) .placeholder(R.drawable.channel_thumbnail_default) .into(videoDescChannelThumbnailImageView); } } 	0	0	0	0	0	1
public static boolean isInFuture(ZonedDateTime startOfDay, ZoneId zone) { return startOfDay.isAfter(ZonedDateTime.now(zone)); } 	0	0	0	0	0	1
"@Override public SCIMResponse listWithGET(UserManager userManager, String filter, int startIndex, int count, String sortBy, String sortOrder, String attributes, String excludeAttributes) {  FilterTreeManager filterTreeManager = null; Node rootNode = null; JSONEncoder encoder = null; try { //A value less than one shall be interpreted as 1 if (startIndex < 1) { startIndex = 1; } //If count is not set, server default should be taken if (count == 0) { count = CharonConfiguration.getInstance().getCountValueForPagination(); }  //check whether provided sortOrder is valid or not if (sortOrder != null) { if (!(sortOrder.equalsIgnoreCase(SCIMConstants.OperationalConstants.ASCENDING) || sortOrder.equalsIgnoreCase(SCIMConstants.OperationalConstants.DESCENDING))) { String error = "" Invalid sortOrder value is specified""; throw new BadRequestException(error, ResponseCodeConstants.INVALID_VALUE); } } //If a value for ""sortBy"" is provided and no ""sortOrder"" is specified, ""sortOrder"" SHALL default to // ascending. if (sortOrder == null && sortBy != null) { sortOrder = SCIMConstants.OperationalConstants.ASCENDING; }  // unless configured returns core-user schema or else returns extended user schema) SCIMResourceTypeSchema schema = SCIMResourceSchemaManager.getInstance().getUserResourceSchema(); if (filter != null) { filterTreeManager = new FilterTreeManager(filter, schema); rootNode = filterTreeManager.buildTree(); }  //obtain the json encoder encoder = getEncoder();  //get the URIs of required attributes which must be given a value Map<String, Boolean> requiredAttributes = ResourceManagerUtil.getOnlyRequiredAttributesURIs( (SCIMResourceTypeSchema) CopyUtil.deepCopy(schema), attributes, excludeAttributes);  List<Object> returnedGroups; int totalResults = 0; //API group should pass a UserManager storage to GroupResourceEndpoint. if (userManager != null) { List<Object> tempList = userManager.listGroupsWithGET(rootNode, startIndex, count, sortBy, sortOrder, requiredAttributes);  totalResults = (int) tempList.get(0); tempList.remove(0); returnedGroups = tempList;  //if groups not found, return an error in relevant format. if (returnedGroups.isEmpty()) { String error = ""Groups not found in the user store.""; //throw resource not found. throw new NotFoundException(error); }  for (Object group : returnedGroups) { //perform service provider side validation. ServerSideValidator.validateRetrievedSCIMObjectInList((Group) group, SCIMSchemaDefinitions .SCIM_GROUP_SCHEMA, attributes, excludeAttributes); } //create a listed resource object out of the returned groups list. ListedResource listedResource = createListedResource(returnedGroups, startIndex, totalResults); //convert the listed resource into specific format. String encodedListedResource = encoder.encodeSCIMObject(listedResource); //if there are any http headers to be added in the response header. Map<String, String> responseHeaders = new HashMap<String, String>(); responseHeaders.put(SCIMConstants.CONTENT_TYPE_HEADER, SCIMConstants.APPLICATION_JSON); return new SCIMResponse(ResponseCodeConstants.CODE_OK, encodedListedResource, responseHeaders);  } else { String error = ""Provided user manager handler is null.""; //log the error as well. //throw internal server error. throw new InternalErrorException(error); } } catch (CharonException e) { return encodeSCIMException(e); } catch (NotFoundException e) { return encodeSCIMException(e); } catch (InternalErrorException e) { return encodeSCIMException(e); } catch (BadRequestException e) { return encodeSCIMException(e); } catch (NotImplementedException e) { return encodeSCIMException(e); } catch (IOException e) { String error = ""Error in tokenization of the input filter""; CharonException charonException = new CharonException(error); return AbstractResourceManager.encodeSCIMException(charonException); } } "	0	0	0	0	0	1
"private void createPlayer() { Player player = connect(); if(player != null){ this.player = player; mainFrame.setTitle(frameTitle + "" - "" + player.getName()); player.setObserver(this); Dialogs.information(mainFrame, ""Successfully connected!""); } else if(this.player == null) Dialogs.error(mainFrame, ""You are not connected to a host. Please go to \n"" + ""\""Connecton\"" --> \""Connect To Server\"" and retry.""); } "	0	0	0	0	0	1
"@Test @WithMockUser(authorities = {""USER""}) public void testUserCantEditFaculty() throws Exception { Faculty editFaculty = new Faculty(""Edit Uni"", ""EU"",  null);  mockMvc .perform(put(buildUniApiUrl(1L)) .contentType(MediaType.APPLICATION_JSON) .content(TestUtils.asJson(editFaculty))) .andExpect(status().isUnauthorized()) .andExpect(jsonPath(""$.message"", is(""Access is denied""))); } "	0	0	0	0	0	1
@Override public TerminalSize getTerminalSize() throws IOException { saveCursorPosition(); setCursorPosition(5000, 5000); reportPosition(); restoreCursorPosition(); return waitForTerminalSizeReport(); } 	0	0	0	0	0	1
@Override public void update(ExpenseClaim m) { adapter.notifyDataSetChanged(); } 	0	0	0	0	0	1
@Override public IGroupPool getParentPool() { return this.parentPool; } 	0	0	0	0	0	1
private void enableCamera() { if (ContextCompat.checkSelfPermission(this.getContext(), Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) { // Permission to access the location is missing. PermissionUtils.requestPermission((AppCompatActivity) this.getActivity(), 1, Manifest.permission.CAMERA, true); } else { Intent intent = new Intent(getActivity(), ScannerActivity.class); startActivityForResult(intent, REQUEST_QR); } } 	0	0	0	0	0	1
"@Test public void testExecuteOpFilterQueryIterator() { // jump through hoops to satisfy Jena Graph blankGraph = new CollectionGraph(); DatasetGraph dsGraph = new DatasetGraphOne(blankGraph); ExecutionContext ctx = new ExecutionContext(new Context(), blankGraph, dsGraph, OpExecutor.stdFactory);  ObservationGraphOpExecutorFactory ogFactory = new ObservationGraphOpExecutorFactory( ctx); OpFilter bgpFilter = (OpFilter) SSE .parseOp(""(filter (< ?o 42) (bgp (?s ?p ?o)))""), fakeFilter = OpFilter.filter(OpNull.create());  // Should execute the same regardless of whether there's a BGP QueryIterator rootIter = QueryIterRoot.create(ctx); QueryIterator result = ogFactory.execute(fakeFilter, rootIter); assertFalse(result.hasNext());  // This has an inner BGP (rather than some fake block) rootIter = QueryIterRoot.create(ctx); result = ogFactory.execute(bgpFilter, rootIter); assertFalse(result.hasNext()); } "	0	0	0	0	0	1
public void error(MailMessage message, Exception error) { ActivityLogItem item = new ActivityLogItem(ActivityLog.LEVEL_ERROR); item.setMessage(formatMessage(message, R.string.activity_log_message_send_email_failed)); item.setDetails(error.toString()); add(item); } 	0	0	0	0	0	1
@Override public ArrayList<Task> execute() throws NoSuchTaskException, UpdateTaskException{ retrieveOptions(); getTaskFromStorage(taskId); determineOriginalTaskType(); createEditedTask(); prepareExecutionResult(); return executionResult; } 	0	0	0	0	0	1
private void goBack() { if (this.inAppWebView.canGoBack()) { this.inAppWebView.goBack(); } } 	0	0	0	0	0	1
"public Optional<SystemUserProperty> deleteProperty(String ptype, String pname) { Optional<SystemUser> su = getSystemUser(); Assert.isTrue(su.isPresent(), ""Invalid user""); Assert.doesNotContain(ptype, ""*"",""Can't get property with wildcard type""); Assert.doesNotContain(ptype, ""%"",""Can't get property with wildcard type""); return sysUserRepo.deleteProperty(su.get(), ptype, pname); } "	0	0	0	0	0	1
public static int getIntegerInRange(int minValue, int maxValue) {  return (int) (minValue + Math.random() * (maxValue - minValue) + 0.5); } 	0	0	0	0	0	1
public static long getLongInRange(long minValue, long maxValue) { return (long) (minValue + Math.random() * (maxValue - minValue) + 0.5); } 	0	0	0	0	0	1
"public static String explainOsmApiInitializationException(OsmApiInitializationException e) { e.printStackTrace(); String msg = tr( ""<html>Failed to initialize communication with the OSM server {0}.<br>"" + ""Check the server URL in your preferences and your internet connection.</html>"", Main.pref.get( ""osm-server.url"", ""http://api.openstreetmap.org/api"")); return msg; } "	0	0	0	0	0	1
"public static String explainNestedSocketException(OsmTransferException e) { String apiUrl = e.getUrl(); String message = tr(""<html>Failed to open a connection to the remote server<br>"" + ""''{0}''.<br>"" + ""Please check your internet connection.</html>"", apiUrl); e.printStackTrace(); return message; } "	0	0	0	0	0	1
public void executeAutoRefresh() {  if (mAutoRefreshSubscription != null && !mAutoRefreshSubscription.isUnsubscribed() && !getAutoRefresh()) { mAutoRefreshSubscription.unsubscribe(); return; } if (getAutoRefresh()) { mAutoRefreshSubscription = Observable.interval(2, TimeUnit.SECONDS) .timeInterval().flatMap(new Func1<TimeInterval<Long>, Observable<BusWrapper>>() { @Override public Observable<BusWrapper> call(TimeInterval<Long> longTimeInterval) { return mBusApiRepository.getBusListOnRoad(mLineName, fromStation); } }) .observeOn(AndroidSchedulers.mainThread()) .subscribeOn(Schedulers.io()) .subscribe(getBusSubscriber()); } } 	0	0	0	0	0	1
"private static void initializeSettings() throws XMLStreamException, NumberFormatException, IOException { newSettings = XMLSettingsExchanger.readConfig(defaultSettings); if (new File(DEFAULT_SETTINGS_PATH).isFile()) { if (DEBUG) System.out.println(""Settings already in user folder""); // settings already in user folder -> read from settings currentSettings = XMLSettingsExchanger.readConfig(DEFAULT_SETTINGS_PATH);  // database v1 still in settings if (currentSettings.getDatabaseVersion() == 1 && newSettings.getDatabaseVersion() == 2) { // database v2 doesn't exist yet if (!(new File(DEFAULT_DATABASE_PATH).exists())) { CustomInfoHandling.showOldDatabaseInfo(); System.exit(0); } else { currentSettings.setDatabaseVersion(2); currentSettings.setPathToDatabase(DEFAULT_DATABASE_PATH); XMLSettingsExchanger.writeConfig(DEFAULT_SETTINGS_PATH, currentSettings); if (DEBUG) System.out.println(""Updated database version.""); } } if (currentSettings.getPathToDatabase().equals(""null"") || !(new File(currentSettings.getPathToDatabase()).isDirectory())) { if (DEBUG) System.out.println(""Database not where it was expected or not there""); // database deleted -> create new DB on default path currentSettings.setPathToDatabase(DEFAULT_DATABASE_PATH); XMLSettingsExchanger.writeConfig(DEFAULT_SETTINGS_PATH, currentSettings); }  if (StartApp.updatedVersion()) { if (DEBUG) System.out.println(""was updated""); XMLSettingsExchanger.writeConfig(DEFAULT_SETTINGS_PATH, currentSettings); }  } else { // first install -> copy default settings.xml into user folder if (DEBUG) System.out.println(""XML Config not in user folder -> copy into user folder""); currentSettings = newSettings; currentSettings.setPathToDatabase(DEFAULT_DATABASE_PATH); XMLSettingsExchanger.writeConfig(DEFAULT_SETTINGS_PATH, currentSettings); }  } "	0	0	0	0	0	1
"@Override public CompletableFuture<Map<Long, IGuildMember>> fetchMembers(int limit) { CompletableFuture<Map<Long, IGuildMember>> future = new CompletableFuture<>(); final Consumer<DLEvent> consumer = event -> { if (event instanceof GuildMembersChunkEvent) { GuildMembersChunkEvent gmce = (GuildMembersChunkEvent) event; future.complete(gmce.members); } }; loader.onceEvent(consumer, guild -> guild.getID() == getID()); Packet payload = new Packet(8, new MemberQuery(limit, """")); loader.socket.send(payload); return future; } "	0	0	0	0	0	1
"public static void save(Long id, @Required String originalLogin, @Required String login, String firstname, String lastname, String company, @Required @Email String email, @Required @MaxSize(140) String shortDescription, String longDescription, String twitterName, String googlePlusId, String[] interests, String newInterests, List<SharedLink> sharedLinks) { Logger.info(""Save Profile originalLogin {"" + originalLogin + ""}, firstname {"" + firstname + ""}, lastname {"" + lastname + ""}, "" + ""email {"" + email + ""}, newInterests {"" + newInterests + ""}"");  boolean registration = (id == null); Member member = null; if (registration) { member = Member.getPreregistered(originalLogin); } else { member = Member.findById(id); }  member.login = login; member.firstname = firstname; member.shortDescription = shortDescription; member.longDescription = longDescription; member.email = email; member.lastname = lastname; member.company = company;  TwitterAccount twitter = member.getTwitterAccount(); if (StringUtils.isNotBlank(twitterName)) {  final Member other = TwitterAccount.findMemberByScreenName(twitterName); if (other != null && !member.equals(other)) { validation.addError(""twitterName"", ""validation.unique"", twitterName, other.toString()); }  if (twitter == null) { member.addAccount(new TwitterAccount(twitterName)); } else { twitter.screenName = twitterName; } } else { if (twitter != null) { member.removeAccount(twitter); } }  GoogleAccount google = member.getGoogleAccount(); if (StringUtils.isNotBlank(googlePlusId)) {  final Member other = GoogleAccount.findMemberByGoogleId(googlePlusId); if (other != null && !member.equals(other)) { validation.addError(""googlePlusId"", ""validation.unique"", googlePlusId, other.toString()); }  if (google == null) { member.addAccount(new GoogleAccount(googlePlusId)); } else { google.googleId = googlePlusId; } } else { if (google != null) { member.removeAccount(google); } }  if (interests != null) { member.updateInterests(interests); }  if (newInterests != null) { member.addInterests(StringUtils.splitByWholeSeparator(newInterests, "","")); }  List<SharedLink> validatedSharedLinks = new ArrayList<SharedLink>(sharedLinks.size()); for (int i = 0; i < sharedLinks.size(); i++) { SharedLink link = sharedLinks.get(i); if (StringUtils.isNotBlank(link.name) && StringUtils.isNotBlank(link.URL)) { ValidationResult result = validation.valid(""sharedLinks["" + i + ""]"", link); if (result.ok) { validatedSharedLinks.add(link); } } } member.updateSharedLinks(validatedSharedLinks);  Member other = Member.findByLogin(login); if (other != null && !member.equals(other)) { validation.addError(""login"", ""validation.unique"", login); }  if (validation.hasErrors()) { Logger.error(validation.errors().toString()); flash.error(""Quelques erreurs doivent être corrigées dans ta saisie mon ami!""); render(""Profile/edit.html"", member, originalLogin, newInterests, sharedLinks); }  if (registration) { member.register(originalLogin); } else { member.updateProfile(); }  session.put(""username"", member.login);  flash.success(""Profil enregistré!""); Logger.info(""Profil %s enregistré"", member.toString());  show(member.login); } "	0	0	0	0	0	1
"@Test public void testAdditionalLogoutMessage_returnsMessageWhenAStateListens() throws Exception { when(stateCollector.getBackgroundListeningStates()) .thenReturn(Collections.singletonList(mock(CloudDebugProcessState.class))); assertThat(new IntelliJGoogleLoginMessageExtender().additionalLogoutMessage(), is(""Any Cloud Debugger sessions listening in the background will be stopped."")); } "	0	0	0	0	0	1
"public void sendMessage(common.messages.KVMessage msg) throws IOException { byte[] msgBytes = msg.getMsgBytes(); output.write(msgBytes, 0, msgBytes.length); output.flush(); logger.info(""SEND \t<"" + clientSocket.getInetAddress().getHostAddress() + "":"" + clientSocket.getPort() + "">: '"" + msg.getMsg() +""'""); } "	0	0	0	0	0	1
public static boolean contains(String str) { return tldSet.contains(str); } 	0	0	0	0	0	1
@Override public void onClick(DialogInterface d, int id) { save(account, true); DispatchManager.instance.startNextFragment(getActivity(), chat); } 	0	0	0	0	0	1
"public Schema.Builder<?> load() { Schema.Builder builder; if (ls.schemaJson.containsKey(""enum"")) { builder = buildEnumSchema(); } else { builder = new CombinedSchemaLoader(ls, this).load() .orElseGet(() -> { if (!ls.schemaJson.containsKey(""type"") || ls.schemaJson.containsKey(""$ref"")) { return buildSchemaWithoutExplicitType(); } else { return ls.schemaJson.require(""type"") .canBeMappedTo(JSONArray.class, arr -> loadForType(arr)) .or(String.class, str -> loadForType(str)) .requireAny(); } }); } ls.schemaJson.maybe(""id"").map(JsonValue::requireString).ifPresent(builder::id); ls.schemaJson.maybe(""title"").map(JsonValue::requireString).ifPresent(builder::title); ls.schemaJson.maybe(""description"").map(JsonValue::requireString).ifPresent(builder::description); return builder; } "	0	0	0	0	0	1
void onUpdateSystemLayout(boolean isHideStatusBar, boolean isHideNavigationBar, boolean isPortrait) { // status bar mStatusBarHeight = isHideStatusBar ? 0 : mBaseStatusBarHeight; // navigation bar updateNavigationBarOffset(isHideNavigationBar, isPortrait); updateViewLayout(true); } 	0	0	0	0	0	1
public Locale getLocale() { return locale; } 	0	0	0	0	0	1
"protected String getMACAddress() { String address = GetAddress(""mac""); } "	0	0	0	0	0	1
"public static org.python.types.Module __import__(java.lang.String python_name, java.lang.String [] from_list, int level) { // Create an array containing the module path. boolean native_import; java.lang.String [] path = python_name.split(""\\.""); java.lang.StringBuilder java_name = new java.lang.StringBuilder(); // If the package name isn't clearly identifiable as a java package path, // put it in the python namespace. if (       path[0].equals(""java"") || path[0].equals(""javax"") || path[0].equals(""org"") || path[0].equals(""com"") || path[0].equals(""edu"") || path[0].equals(""net"") || path[0].equals(""android"")) { native_import = true; } else { java_name.append(""python""); native_import = false; }  org.python.types.Module python_module = null; org.python.types.Module parent_module = null; org.python.types.Module return_module = null;  // Iterate down the full dotted path, making sure that each module // along the way has been imported. for (java.lang.String name: path) { if (java_name.length() > 0) { java_name.append(""/""); } java_name.append(name);  python_module = modules.get(java_name.toString()); if (python_module == null) { try { if (native_import) { python_module = importNativeModule(java_name.toString()); } else { python_module = importPythonModule(java_name.toString()); } } catch (java.lang.ClassNotFoundException e) { throw new org.python.exceptions.ImportError(""No module named '"" + python_name + ""'""); }  // If we are multiple steps into an import chain, tell the // parent module of this new module. if (parent_module != null) { parent_module.__setattr__(name, python_module); } }  // Remember the very first module we resolve, because this is the one that // will be put into the namespace as an import product if there is no from_list. if (return_module == null) { return_module = python_module; }  // System.out.println(""MODULES: "" + modules); // The module just imported will be the parent of the next import // in the chain. parent_module = python_module; }  if (from_list != null) { // from_list provided; import all the provided symbols, // unless the symbol is *, in which case we know it exists. return_module = python_module; java_name.append(""/""); for (java.lang.String name: from_list) { if (!name.equals(""*"")) { try { if (native_import) { java.lang.Class java_class = java.lang.Class.forName(java_name.toString().replace(""/"", ""."") + name); parent_module.__setattr__(name, new org.python.java.Type(java_class)); } else { python_module = importPythonModule(java_name.toString() + name); parent_module.__setattr__(name, python_module); } } catch (java.lang.ClassNotFoundException e) { // `name` doesn't exist as a submodule; it might be // an exportable symbol in the parent module. try { parent_module.__getattribute__(name); } catch (org.python.exceptions.NameError ne) { python_module = new org.python.java.Module(java_name.toString().replace(""/"", ""."") + name); parent_module.__setattr__(name, python_module); modules.put(java_name.toString() + name, python_module); } } } } } return return_module; } "	0	0	0	0	0	1
"public Producer findOrCreateProducer(final String topic) { Validate.notNull(topic, ""field 'topic' is null""); Producer producer = producersByTopic.get(topic); if (producer == null) { producer = createProducer(topic); producersByTopic.put(topic, producer);  channelMonitorAgent.producerTopicCreated(topic); }  return producer; } "	0	0	0	0	0	1
public boolean onMenuItemClick(MenuItem item) { // prompt user to make sure they really want this new AlertDialog.Builder(HostListActivity.this) .setMessage(getString(R.string.delete_message, host.getNickname())) .setPositiveButton(R.string.delete_pos, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int which) { // make sure we disconnect if (bridge != null) bridge.dispatchDisconnect(true);  hostdb.deleteHost(host); updateHandler.sendEmptyMessage(-1); } }) .setNegativeButton(R.string.delete_neg, null).create().show();  return true; } 	0	0	0	0	0	1
private boolean isInBoundary(double x, double y, double z) { return x >= 0 && y >= 0 && z >= 0 && x < dimensionX * 16 && z < dimensionZ * 16 && y < worldObj.getActualHeight(); } 	0	0	0	0	0	1
public ReuseableMergedByteBuffers decrypt(final MergedByteBuffers bb) { final ReuseableMergedByteBuffers mbb = new ReuseableMergedByteBuffers(false); if(!this.startedHandshake.get()) { mbb.add(bb); return mbb; } encryptedReadBuffers.add(bb); final ByteBuffer encBB = encryptedReadBuffers.pullBuffer(encryptedReadBuffers.remaining()); while(encBB.remaining() > 0) { int lastSize = encBB.remaining(); final ByteBuffer dbb = getDecryptedByteBuffer(); final ByteBuffer newBB = dbb.duplicate(); SSLEngineResult res; try { res = ssle.unwrap(encBB, dbb); //We have to check both each time till complete if(! handshakeFuture.isDone()) { processHandshake(res.getHandshakeStatus()); processHandshake(ssle.getHandshakeStatus()); } } catch (SSLException e) { throw new EncryptionException(e); } newBB.limit(dbb.position()); if(newBB.hasRemaining()) { mbb.add(newBB); } else if (res.getStatus() == Status.BUFFER_UNDERFLOW || (lastSize > 0 && lastSize == encBB.remaining())) { if(encBB.hasRemaining()) { encryptedReadBuffers.add(encBB); } break; } } return mbb;  } 	0	0	0	0	0	1
public int getScore() { return (int) mCircleManager.getmPlayerCircle().getmRadius(); } 	0	0	0	0	0	1
"private static void migrateToNewStructure(){ new Role(); // to call the static init header and init the roles  log.info(""Starting migration to new user structure"");  Query<Anwender> qbe = new Query<Anwender>(Anwender.class); List<Anwender> users = qbe.execute(); for (Anwender anwender : users) { String username = anwender.get(Kontakt.FLD_NAME3); if(username==null || username.length()==0) { log.warn(""Username for Anwender ""+anwender.getLabel()+"" not set. Skipping user creation.""); continue; }  String password = (String) anwender.getExtInfoStoredObjectByKey(""UsrPwd""); boolean setActive=true; if(password==null || password.length()==0) { password = ""pass""; log.warn(""Password for Anwender ""+anwender.getLabel()+"" is empty, setting 'pass' and deactivating user.""); setActive = false; }  User u; if (username.equals(USERNAME_ADMINISTRATOR)) { u = User.load(USERNAME_ADMINISTRATOR); u.setAssignedContact(anwender); u.setPassword(password); log.info(""Overriding Administrator password with password from anwender [{}]"", anwender.getLabel()); } else { u = new User(anwender, username, password); } u.setActive(setActive);  boolean isMandator = anwender.getBoolean(Anwender.FLD_IS_MANDATOR); if (isMandator) { u.setAssignedRole(Role.load(Role.SYSTEMROLE_LITERAL_EXECUTIVE_DOCTOR), true); u.setAssignedRole(Role.load(Role.SYSTEMROLE_LITERAL_DOCTOR), true); }  log.info(""Migrated anwender [{}] to new user structure with id [{}]"", anwender.getLabel(), u.getId());  // TODO delete the information from contact table? } } "	0	0	0	0	0	1
"@SuppressWarnings(""unused"") @JavascriptInterface public void onReceiveHighlights(String html) { if (html != null) { rangy = HighlightUtil.createHighlightRangy(getActivity().getApplicationContext(), html, mBookId, getPageName(), mWebview.getScrollY(), rangy); } } "	0	0	0	0	0	1
private void selectedProv() { int rowIndex = getTable().getSelectedRow(); if (rowIndex >= 0) { getEventBus().post(new ProvenanceSelectionEvent( ((ProvTableModel)getTableModel()).rows.get(rowIndex))); } } 	0	0	0	0	0	1
"@Override protected IntegrationFlowDefinition<?> buildFlow() { return from(this, ""messageSource"", e -> e.poller(p -> p.trigger(this::nextExecutionTime))) .split(this) .transform(this) .aggregate(a -> a.processor(this, null)) .enrichHeaders(Collections.singletonMap(""foo"", ""FOO"")) .filter(this) .handle(this) .channel(c -> c.queue(""myFlowAdapterOutput"")); } "	0	0	0	0	0	1
"@Override public Message newMessage(Uuid id, Uuid author, Uuid conversation, String body, Time creationTime) {  final User foundUser = model.userById().first(author); final Conversation foundConversation = model.conversationById().first(conversation);  Message message = null; Connection connection = null; Statement stmt = null;  String prevID = """";  try{ Class.forName(""org.sqlite.JDBC""); connection = DriverManager.getConnection(""jdbc:sqlite:./bin/codeu/chat/codeU_db/ChatDatabase.db""); connection.setAutoCommit(false);  stmt = connection.createStatement();  ResultSet rs = stmt.executeQuery( ""SELECT * FROM MESSAGES"" + ""where CONVERSATIONID = ""+SQLFormatter.sqlID(conversation)+"" "" + ""AND   MNEXTID = 'NULL';"" ); if ( rs.next() ) { prevID = rs.getString(""ID""); } rs.close(); stmt.close(); }catch (Exception e) { System.out.println(""Error adding message to conversation""); System.err.println(e.getClass().getName() +"": "" + e.getMessage()); System.exit(0); }  if(SQLFormatter.sqlValidConversation(author, conversation)){ try{ stmt = connection.createStatement();  message = new Message(id, Uuid.NULL, Uuid.fromString(prevID), creationTime, author, body); String sql = ""INSERT INTO MESSAGES(ID, USERID, CONVERSATIONID, TimeCreated, MESSAGE)"" + ""VALUES(""+SQLFormatter.sqlID(id)+"",""+SQLFormatter.sqlID(author)+"",""+SQLFormatter.sqlID(conversation)+"",""+SQLFormatter.sqlBody(body)+"",""+SQLFormatter.sqlCreationTime(creationTime)+"");""; stmt.executeUpdate(sql);  stmt.close(); connection.commit(); }catch (Exception e) { System.out.println(""Error adding message to conversation""); System.err.println(e.getClass().getName() +"": "" + e.getMessage()); System.exit(0); } }  if(!prevID.equals("""")){ try {  stmt = connection.createStatement();  String sql = ""UPDATE MESSAGES set MNEXTID = ""+ SQLFormatter.sqlID(id)+""where CONVERSATIONID = ""+SQLFormatter.sqlID(conversation)+"" AND   MNEXTID = 'NULL';""; stmt.executeUpdate(sql);  connection.commit(); stmt.close(); connection.close(); } catch ( Exception e ) { System.err.println( e.getClass().getName() + "": "" + e.getMessage() ); System.exit(0); } }  // --------------------------------------------------------------------- // PREVIOUS MODEL // ---------------------------------------------------------------------  return message; } "	0	0	0	0	0	1
@Override public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception { endpoints .authenticationManager(authenticationManager); } 	0	0	0	0	0	1
"private void setTasks(ObservableList<ReadOnlyTask> taskList) { logger.info("" set tasks ""); initTaskListHashMap(taskListHashMap); for (int i = 0; i < taskList.size(); i++) { if (!taskList.get(i).getEndTiming().isFloating()) { if (taskList.get(i).isRecurring()) { for (int k = 0; k < taskList.get(i).getOccurrences().size(); k++) { for (int j = 0; j < 28; j++) { ListView<String> currentTaskList = taskListHashMap.get(""day"" + (j + 1) + ""TaskList""); String labelDate = dayHashMap.get(""day"" + (j + 1)).getText().toString(); String taskDate = taskList.get(i).getOccurrences().get(k).getEndTiming().toString(); String[] taskListDateData = taskDate.toString().split(""/"");  String test = String.valueOf( taskList.get(i).getOccurrences().get(k).getEndTiming().getTiming().getMonth() + 1 ); String taskDateYear = String.valueOf( taskList.get(i).getOccurrences().get(k).getEndTiming().getTiming().getYear() + 1900 ); String taskDateMonth = String.valueOf( taskList.get(i).getOccurrences().get(k).getEndTiming().getTiming().getMonth() + 1 ); String taskDateDate = String.valueOf( taskList.get(i).getOccurrences().get(k).getEndTiming().getTiming().getDate() );   if (( taskDateDate + ""/"" + taskDateMonth).equals(labelDate) && taskDateYear.equals(year.getText())) { currentTaskList.getItems().addAll(taskList.get(i).getDescription().toString()); System.out.println(""@@""); } } } } else { for (int j = 0; j < 28; j++) { ListView<String> currentTaskList = taskListHashMap.get(""day"" + (j + 1) + ""TaskList""); String labelDate = dayHashMap.get(""day"" + (j + 1)).getText().toString(); Date taskDate = taskList.get(i).getEndTiming().getTiming(); String[] taskListDateData = taskDate.toString().split(""/""); String taskDateMonth = String.valueOf(taskDate.getMonth() + 1); String taskDateDate = String.valueOf(taskDate.getDate()); if ((taskDateMonth + ""/"" + taskDateDate).equals(labelDate)) { currentTaskList.getItems().addAll(taskList.get(i).getDescription().toString());  } } } } } } "	0	0	0	0	0	1
@Override public boolean func_149852_a(World world, Random p_149852_2_, int x, int y, int z) { //shouldFertilize return true; } 	0	0	0	0	0	1
"@Override public int getAge() { return base.getProperty( primaryKey, ""age"", Integer.class); } "	0	0	0	0	0	1
public Band getBandsBandMember (Request req, Response res){ return null; } 	0	0	0	0	0	1
"@Override public StormTopology execute(Config config, StormEnvironment environment) {  MetricDescriptor hadoopMetricDescriptor = MetricDescriptor.metricGroupAs((MetricGroupSelector) event -> { if (event.containsKey(""component"")) { return String.format(""hadoop.%s"", ((String) event.get(""component"")).toLowerCase()); } else { return ""hadoop.metrics""; } }) .siteAs(AppConfigUtils.getSiteId(config)) .namedByField(""metric"") .eventTimeByField(""timestamp"") .dimensionFields(""host"", ""component"", ""site"") .granularity(Calendar.SECOND) .valueField(""value"");  MetricDescriptor systemMetricDescriptor = MetricDescriptor.metricGroupByField(""group"") .siteAs(AppConfigUtils.getSiteId(config)) .namedByField(""metric"") .eventTimeByField(""timestamp"") .dimensionFields(""host"", ""group"", ""site"", ""device"") .granularity(Calendar.SECOND) .valueField(""value""); return environment.newApp(config) .fromStream(""HADOOP_JMX_METRIC_STREAM"").transformBy(new CounterToRateFunction(hadoopMetricDescriptor,3, TimeUnit.SECONDS, ClockWithOffset.INSTANCE)) .saveAsMetric(hadoopMetricDescriptor) .fromStream(""SYSTEM_METRIC_STREAM"").transformBy(new CounterToRateFunction(hadoopMetricDescriptor,3, TimeUnit.SECONDS, ClockWithOffset.INSTANCE)) .saveAsMetric(systemMetricDescriptor ) .toTopology(); } "	0	0	0	0	0	1
public float getVisualX() { return getLeftX(); } 	0	0	0	0	0	1
public float getVisualRightX() { return getRightX(); } 	0	0	0	0	0	1
"public void setAutoSave(boolean enabled) { if (enabled) { autoSaveFile = getSaveFile(""logger++_auto"", true); if (autoSaveFile != null) { loggerPreferences.setAutoSave(true); try { autoSaveWriter = new FileWriter(autoSaveFile, true); if (autoSaveFile.length() == 0) exp.addHeader(autoSaveWriter, false);  BurpExtender.getInstance().addLogListener(this);  } catch (IOException e) { autoSaveFile = null; enabled = false; } } else { enabled = false; } } else { autoSaveFile = null; try{ autoSaveWriter.close(); } catch (IOException e) {} autoSaveWriter = null; BurpExtender.getInstance().removeLogListener(this); } loggerPreferences.setAutoSave(enabled); BurpExtender.getInstance().getLoggerOptionsPanel().setAutoSaveBtn(enabled); } "	0	0	0	0	0	1
"public boolean areElementsAllSatisfyDependencySources(){  final String[] theSatisfyStatechartDiagramMetaClasses = { ""Transition"", ""State"" , ""DefaultTransition"" };  final String[] theSatisfyNonDiagramMetaClasses = { ""Operation"", ""Event"", ""Attribute"" };  boolean isMatchFoundForAll = true;  for( DiagramElementInfo DiagramElementInfo : this ){  IRPModelElement theEl = DiagramElementInfo.getElement();  boolean isADiagramSatisfyMetaClass = doesElementMatchOneOfTheTypes( theEl, theSatisfyStatechartDiagramMetaClasses );  boolean isANonDiagramSatisfyMetaClass = doesElementMatchOneOfTheTypes( theEl, theSatisfyNonDiagramMetaClasses );  if( !isADiagramSatisfyMetaClass && !isANonDiagramSatisfyMetaClass ){  isMatchFoundForAll = false; break;  } else if (isADiagramSatisfyMetaClass && !(theEl.getOwner() instanceof IRPStatechart) ){  isMatchFoundForAll = false; Logger.writeLine( theEl.getOwner(), ""is the owner of "" + Logger.elementInfo( theEl )); break; } }  Logger.writeLine( ""areElementsAllSatisfyDependencySources is returning "" + isMatchFoundForAll );  return isMatchFoundForAll; } "	0	0	0	0	0	1
"@Test public void TestRegisterMember1() { int oldMemberCount = MemberManager.getMemberManager().getAllMembers().size(); try { MemberManager.getMemberManager().addMember(""B0135868R"", ""Zhu Bin""); } catch (Exception e) { Assert.fail(""failed to add a member""); } Assert.assertEquals(MemberManager.getMemberManager().getAllMembers().size(), oldMemberCount+1); } "	0	0	0	0	0	1
@Override public List<Setting<?>> getSettings() { return Arrays.asList( AzureManagementService.Management.CLIENT_ID_SETTING, AzureManagementService.Management.SECRET_SETTING, AzureManagementService.Management.SUBSCRIPTION_ID_SETTING, AzureManagementService.Management.TENANT_ID_SETTING, AzureManagementService.Discovery.HOST_GROUP_NAME_SETTING, AzureManagementService.Discovery.HOST_NAME_SETTING, AzureManagementService.Discovery.HOST_TYPE_SETTING, AzureManagementService.Discovery.REFRESH_SETTING, AzureManagementService.Discovery.REGION_SETTING); } 	0	0	0	0	0	1
"public static ExpectedCondition<WebElement> visibilityOfElementLocatedBy(By locator) { return new ExpectedCondition<WebElement>() { @Override public WebElement apply(final WebDriver driver) { try { final WebElement foundElement = driver.findElement(locator); return (foundElement.isDisplayed() || isElementHiddenUnderScroll(foundElement)) ? foundElement : null; } catch (Exception e) { return null; } }  @Override public String toString() { return String.format(""visibility of element located by %s"", locator); } }; } "	0	0	0	0	0	1
"@Override public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException { if (!(sender instanceof EntityPlayerMP)) { FMLLog.info(""Sorry, this command is not available through the server command line interface""); return; }  JsonObject baseRecipeObject = new JsonObject(); JsonArray recipeListArray = new JsonArray(); RecipeEncoder recipeEncoder = new RecipeEncoder();  baseRecipeObject.add(""recipes"", recipeListArray);  for (IModSupportService supportService : MinecraftResourceDumperMod.minecraftResourceDumperAPI.getModSupportServiceRepository().getModSupportServices()) { for (Recipe recipe : supportService.getRecipes()) { if (recipe == null) continue;  boolean shouldFilterRecipe = false;  for (IRecipeFilter filter : MinecraftResourceDumperMod.minecraftResourceDumperAPI.getRecipeFilterRegistry().getRecipeFilters()) { if (filter.shouldFilterRecipe(recipe)) { shouldFilterRecipe = true; break; } }  if (shouldFilterRecipe) continue;  recipeListArray.add(recipeEncoder.encodeRecipe(recipe)); } }  String recipeListData = JsonUtils.writeJsonObjectToString(baseRecipeObject); byte[] recipeListBytes = recipeListData.getBytes();  MinecraftResourceDumperMod.networking.sendTo(new RecipeListTransferStartPacket(), (EntityPlayerMP) sender);  int packetFragmentCount = (int)Math.ceil(recipeListBytes.length / (double)RecipeListFragmentPacket.MAX_PAYLOAD_SIZE); int payloadStartPos = 0; int payloadLength = 0;  for (int i = 0; i < packetFragmentCount; i++) { payloadStartPos = i * RecipeListFragmentPacket.MAX_PAYLOAD_SIZE; payloadLength = (recipeListBytes.length - payloadStartPos) > RecipeListFragmentPacket.MAX_PAYLOAD_SIZE ? RecipeListFragmentPacket.MAX_PAYLOAD_SIZE : recipeListBytes.length - payloadStartPos;  MinecraftResourceDumperMod.networking.sendTo(new RecipeListFragmentPacket(recipeListBytes, payloadStartPos, payloadLength), (EntityPlayerMP) sender); }  MinecraftResourceDumperMod.networking.sendTo(new RecipeListTransferFinishPacket(), (EntityPlayerMP) sender); } "	0	0	0	0	0	1
"@Override protected void onHandleIntent(Intent intent) { Log.d(TAG, ""Updating recommendation cards""); HashMap<String, List<Movie>> recommendations = VideoProvider.getMovieList();  int count = 0;  try { RecommendationBuilder builder = new RecommendationBuilder() .setContext(getApplicationContext()) .setSmallIcon(R.drawable.videos_by_google_icon);  for (HashMap.Entry<String, List<Movie>> entry : recommendations.entrySet()) { for (int i = 0; i < entry.getValue().size(); i++) { Movie movie = entry.getValue().get(i); Log.d(TAG, ""Recommendation - "" + movie.getTitle());  builder.setBackground(movie.getCardImageUrl()) .setId(count + 1) .setPriority(MAX_RECOMMENDATIONS - count) .setTitle(movie.getTitle()) .setDescription(getString(R.string.popular_header)) .setImage(movie.getCardImageUrl()) .setIntent(buildPendingIntent(movie)) .build();  if (++count >= MAX_RECOMMENDATIONS) { break; } } if (++count >= MAX_RECOMMENDATIONS) { break; } } } catch (IOException e) { Log.e(TAG, ""Unable to update recommendation"", e); } } "	0	0	0	0	0	1
"protected void testTravelAccountLookUpXss(String fieldName) throws Exception { waitAndTypeByName(fieldName,""\""/><script>alert('!')</script>""); waitAndClickButtonByText(SEARCH); Thread.sleep(1000);  if(isAlertPresent())    { jiraAwareFail(fieldName + "" caused XSS.""); } waitAndClickButtonByText(CLEAR_VALUES); Thread.sleep(1000); } "	0	0	0	0	0	1
"public void saveDetails(View view) { travel =  new Travel(); Address departureAddress =  new Address(); Address arrivalAddress =  new Address();  //User user  =  new User(); travel.setUserId(""c655fd62-41e0-4ac1-8bbb-737c03666a42""); travel.setId(""123456"");  Location departureLocation = travelDepartureFragment.getDepartureLocation(); departureAddress.setLocation(departureLocation); DateTime departureDateTIme = travelDepartureFragment.getDepartureDateTime(); travel.setDepartureDate(departureDateTIme); travel.setDepartureAddress(departureAddress);  Location arrivalLocation = travelArrivalFragment.getArrivalLocation(); arrivalAddress.setLocation(arrivalLocation); DateTime arrivalDateTime = travelArrivalFragment.getArrivalDateTime(); travel.setDepartureDate(arrivalDateTime); travel.setArrivalAddress(arrivalAddress);  FirebaseCollection<Travel> firebaseCollection = new FirebaseCollection<Travel>(Constants.TRAVELS,Travel.class); firebaseCollection.save(travel, new DataCallback<Travel>() { @Override public void onSuccess(Travel data) { Log.d(TAG, ""SUCCESS""); new AlertDialog.Builder(CreateTravelActivity.this).setTitle(""Travel Details"") .setMessage(""Travel Details Successfully saved"").setPositiveButton(""Ok"", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { } }).show(); }  @Override public void onError(String errorMessage) { Log.d(TAG, errorMessage); } }); } "	0	0	0	0	0	1
"public static SecretKey generateKey(String algorithm, int size) throws KeyException { KeyGenerator keyGen = null; try { keyGen = KeyGenerator.getInstance(algorithm); } catch (NoSuchAlgorithmException e) { throw new KeyException(""Cannot initialize key generator"", e); }  SecureRandom random = new SecureRandom(); keyGen.init(size, random);  return keyGen.generateKey(); } "	0	0	0	0	0	1
"@Test public void test() { fail(""Not yet implemented""); } "	0	0	0	0	0	1
"@Override public void execute(CommandSender sender, String[] args) { if(args.length == 0) { Map<String, String[]> langInfo = new HashMap<>();  langInfo.put(""zh-cn"", new String[]{ Message.CHAT_PREFIX.get() + ""NovaGuilds 公会插件信息"", ""&2NovaGuilds &6#&c"" + VersionUtils.buildCurrent, ""&2作者: &6Marcin (CTRL) Wieczorek"", ""&22015 &4波&f兰"", ""&6网址: &bhttp://novaguilds.pl/"", ""&2最新插件构建: &6#&c"" + VersionUtils.buildLatest });  langInfo.put(""en-en"", new String[]{ Message.CHAT_PREFIX.get() + ""NovaGuilds Information"", ""&2NovaGuilds &6#&c"" + VersionUtils.buildCurrent, ""&2Author: &6Marcin (CTRL) Wieczorek"", ""&22015 &4Pol&fand"", ""&bhttp://novaguilds.pl/"", ""&2Latest plugin build: &6#&c"" + VersionUtils.buildLatest });  langInfo.put(""pl-pl"", new String[]{ Message.CHAT_PREFIX.get() + ""NovaGuilds Informacje"", ""&2NovaGuilds &6#&c"" + VersionUtils.buildCurrent, ""&2Autor: &6Marcin (CTRL) Wieczorek"", ""&22015 &4Pol&fska"", ""&bhttp://novaguilds.pl/"", ""&2Najnowsza wersja pluginu: &6#&c"" + VersionUtils.buildLatest });  String[] info = langInfo.get(Config.LANG_NAME.getString());  for(String i : info) { sender.sendMessage(StringUtils.fixColors(i)); }  return; }  switch(args[0].toLowerCase()) { case ""tool"": Command.TOOL_GET.execute(sender, args); break; case ""bank"": if(!sender.hasPermission(""novaguilds.test.bank"")) { Message.CHAT_NOPERMISSIONS.send(sender); return; }  if(sender instanceof Player) { NovaPlayer nPlayer = plugin.getPlayerManager().getPlayer(sender); if(nPlayer.hasGuild()) { ((Player) sender).getInventory().addItem(Config.VAULT_ITEM.getItemStack()); } } break; case ""admin"": Command.ADMIN_ACCESS.execute(sender, StringUtils.parseArgs(args, 1)); break; case ""group"": NovaGroup group = plugin.getGroupManager().getGroup(sender);  if(args.length > 1) { group = plugin.getGroupManager().getGroup(args[1]); if(group == null) { sender.sendMessage(""Invalid group""); return; } }  sender.sendMessage(""name = "" + group.getName()); sender.sendMessage(""guildCreateMoney = "" + group.getGuildCreateMoney()); sender.sendMessage(""guildHomeMoney = "" + group.getGuildHomeMoney()); sender.sendMessage(""guildJoinMoney = "" + group.getGuildJoinMoney()); sender.sendMessage(""guildCreateItems = "" + group.getGuildCreateItems().toString()); sender.sendMessage(""guildHomeItems = "" + group.getGuildHomeItems().toString()); sender.sendMessage(""guildJoinItems = "" + group.getGuildJoinItems().toString()); sender.sendMessage(""guildEffectItems = "" + group.getGuildEffectItems().toString()); sender.sendMessage(""guildEffectMoney = "" + group.getGuildEffectPrice()); sender.sendMessage(""guildTeleportDelay = "" + group.getGuildTeleportDelay() + ""s""); sender.sendMessage(""regionCreateMoney = "" + group.getRegionCreateMoney()); sender.sendMessage(""regionPricePerBlock = "" + group.getRegionPricePerBlock()); break; case ""g"": case ""guild"": Command.GUILD_ACCESS.execute(sender, StringUtils.parseArgs(args, 1)); break; case ""tr"": Tablist.patch();  for(Player player : plugin.getServer().getOnlinePlayers()) { NovaPlayer.get(player).getTablist().send(); } break; default: Message.CHAT_UNKNOWNCMD.send(sender); break; } } "	0	0	0	0	0	1
public static Test suite() { return new TestSuite(LoginServiceTest.class); } 	0	0	0	0	0	1
@Override public void f() { otherRemoved[0] = true; } 	0	0	0	0	0	1
"private Node buildTree() throws Exception { Node node = null; String value = CharFeed.nextWord(); if (BinaryOperator.isBinaryOperator(value)) { BinaryOperator op = new BinaryOperator(value); CharFeed.nextChar(); Node left = buildTree(); CharFeed.nextChar(); Node right = buildTree(); node = new BinaryBranch(op, left, right); } else if (UnaryOperator.isUnaryOperator(value)) { UnaryOperator op = new UnaryOperator(value); CharFeed.nextChar(); Node left = buildTree(); node = new UnaryBranch(op, left); } else if (Character.isDigit(value.charAt(0))) { node = new Leaf(new Variable(Double.parseDouble(value))); } else if (Character.isLetter(value.charAt(0))) { node = new Leaf(new Constant(value)); } else if ('-' == value.charAt(0)) { node = new Leaf(new Variable(0 - Double.parseDouble(value.substring(1, value.length())))); } else if (value.charAt(0) != StringCharacterIterator.DONE) { throw new IllegalArgumentException(""AST invalid character""); } return node; } "	0	0	0	0	0	1
"@Test public void LoopTest3() throws Exception{ AST a = new AST(""Hello""); String root = a.toString(); assertEquals(""Hello"",root); } "	0	0	0	0	0	1
"private static void verify(String message, boolean condition) { // TODO: replace with Assumption.assert* if (!condition) { throw new RuntimeException(""Internal assertion failuer : "" + message); } } "	0	0	0	0	0	1
"public native final String UNIT_PX() /*-{ return Titanium.UI.UNIT_PX ? Titanium.UI.UNIT_PX : """"; }-*/; "	0	0	0	0	0	1
"@Test public void testDeletingCancel() { table.selectRow(1);  WindowInterceptor.init(panel.getButton(""Delete"").triggerClick()) .process(new WindowButtonHandler(""Confirm deletion"", ""No"")).run();  assertTrue(table.contentEquals(new String[][]{ {""name 1"", ""Action created"", ""A""}, {""name 2"", ""Action created"", """"}, {""name 3"", ""Action created"", ""Response line 1, Response line 2, Response line 3""}, {""name 4"", ""Action created"", ""Response line 1, Response line 2, Response line 4""}, })); verify(group, never()).deleteAction((Action) anyObject()); } "	0	0	0	0	0	1
@Override public void onResume(){ super.onResume(); nfc.writeMode(true); } 	0	0	0	0	0	1
private boolean isCorrectLocation(DetailAST annotation, boolean hasParams) { final boolean allowingCondition = hasParams ? allowSamelineParametrizedAnnotation : allowSamelineSingleParameterlessAnnotation; return allowingCondition && !hasNodeBefore(annotation) || !allowingCondition && !hasNodeBeside(annotation) || allowSamelineMultipleAnnotations; } 	0	0	0	0	0	1
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_google);  mFirebaseAuth = FirebaseAuth.getInstance();  // Assign fields mSignInButton = (SignInButton) findViewById(R.id.sign_in_button);  // Set click listeners mSignInButton.setOnClickListener(this);  // Configure Google Sign In GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN) .requestIdToken(getString(R.string.default_web_client_id)) .requestEmail() .build(); mGoogleApiClient = new GoogleApiClient.Builder(this) .enableAutoManage(this /* FragmentActivity */, this /* OnConnectionFailedListener */) .addApi(Auth.GOOGLE_SIGN_IN_API, gso) .build();  // Initialize FirebaseAuth } 	0	0	0	0	0	1
"@Test public void testMain() { String output; // define our tests // @formatter:off String[] testArray = new String[] { ""1,2,3,4,5,6,7,8,9,1"", ""1,5,2,3,5,4,3,1"", ""1,2"", ""1,2,3,4,5,6,7,8,9"", ""1,2,3,4,5,6,5,4,3,2,1"", ""1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9"", ""1,2,1,3,1,4,2,3,2,4,3,4"" }; String[] expectedResultArray = new String[] { ""true"", ""true"", ""false"", ""false"", ""false"", ""false"", ""false"" }; // @formatter:on String[] resultArray; String testFileName = ""JUnitEulerTestFile.txt"";  // Write the test file for the class BufferedWriter outputWriter = null; try { outputWriter = new BufferedWriter(new FileWriter(testFileName)); for (int i = 0; i < testArray.length; i++) { outputWriter.write(testArray[i]); outputWriter.newLine(); } outputWriter.flush(); outputWriter.close(); } catch (IOException e) { fail(""The test was unable to create a test file. That's a shame!""); }  // run the test file TestObject.runStatic(""main"", (Object) new String[]{testFileName}); output = TestObject.getLastMethodOutput();  // split lines into array resultArray = output.split(""\n"");  // Test the output if (resultArray.length > testArray.length) { fail(""Your program wrote more output lines than there were lines in the input file.""); } else if (resultArray.length < testArray.length) { fail(""Your program wrote less output lines than there were lines in the input file.""); }  for (int i = 0; i < resultArray.length; i++) { assertEquals(""Your program's output for the line '"" + testArray[i] + ""'"", expectedResultArray[i], resultArray[i]); }  // Remove the test file new File(testFileName).delete(); } "	0	0	0	0	0	1
public void removeRows(){ rows.clear(); } 	0	0	0	0	0	1
"@Override protected void doFullSync(GrouperGroupInfo grouperGroupInfo, LdapGroup ldapGroup, Set<Subject> correctSubjects, Map<Subject, LdapUser> tsUserMap, Set<LdapUser> correctTSUsers) throws PspException {  String attributeName = config.getProvisionedAttributeName(); String attributeValue = getAttributeValueForGroup(grouperGroupInfo);  List<LdapObject> currentMatches_ldapObjects = getLdapSystem().performLdapSearchRequest( config.getUserCreationBaseDn(), SearchScope.SUBTREE, Arrays.asList(config.getUserSearchAttributes()), attributeName + ""={0}"", attributeValue);  List<LdapUser> currentMatches = new ArrayList<LdapUser>(currentMatches_ldapObjects.size()); for ( LdapObject ldapObject : currentMatches_ldapObjects ) currentMatches.add(new LdapUser(ldapObject));  // EXTRA MATCHES = CURRENT_MATCHES - CORRECT_MATCHES Set<LdapUser> extraMatches = new HashSet<LdapUser>(currentMatches); extraMatches.removeAll(correctTSUsers);  for (LdapUser extraMatch : extraMatches) scheduleUserModification(extraMatch, AttributeModificationType.REMOVE, Arrays.asList(attributeValue));  // MISSING MATCHES = CORRECT_MATCHES - CURRENT_MATCHES Set<LdapUser> missingMatches = new HashSet<LdapUser>((Set<LdapUser>)correctTSUsers); missingMatches.removeAll(currentMatches);  for (LdapUser missingMatch : missingMatches) scheduleUserModification(missingMatch, AttributeModificationType.ADD, Arrays.asList(attributeValue));  LOG.info(""{}: Brief full-sync summary: Correct={}, Current={}, Extra={}, Missing={}"", new Object[] {getName(), correctSubjects.size(), currentMatches_ldapObjects.size(), extraMatches.size(), missingMatches.size()});  } "	0	0	0	0	0	1
"@Override public void handleCancelOk(String consumerTag) { if (this.logger.isDebugEnabled()) { this.logger.debug(""CancelOk "" + this); } removeConsumer(false); } "	0	0	0	0	0	1
@Override public <T> Storage<T> getStorage(String name) { return getStorage(name, null); } 	0	0	0	0	0	1
"public static void main(String[] args) throws Exception {  final JournalFactory factory = new JournalFactory(new JournalConfigurationBuilder() {{ $(Price.class).$ts(); }}.build(args[0]));  final JournalClient client = new JournalClient(new ClientConfig(""192.168.1.81:7080,192.168.1.81:7090"") {{ getReconnectPolicy().setRetryCount(6); getReconnectPolicy().setSleepBetweenRetriesMillis(1); getReconnectPolicy().setLoginRetryCount(2); }}, factory);  final Journal<Price> reader = factory.bulkReader(new JournalKey<>(Price.class, ""price-copy"", PartitionBy.NONE, 1000000000));  client.subscribe(Price.class, null, ""price-copy"", 1000000000, new TxListener() { @Override public void onCommit() { int count = 0; long t = 0; for (Price p : JournalIterators.incrementBufferedIterator(reader)) { if (count == 0) { t = p.getNanos(); } count++; } if (t == 0) { System.out.println(""no data received""); } else { System.out.println(""took: "" + (System.currentTimeMillis() - t) + "", count="" + count); } }  @Override public void onError() { System.out.println(""there was an error""); } }); client.start();  System.out.println(""Client started""); } "	0	0	0	0	0	1
public void showFor(Deck d) { View left = findViewById(R.id.left_stub), right = findViewById(R.id.right_stub), upDown = findViewById(R.id.swipe_up_down) ;  boolean hideSwipe = !d.isProcessed() || d.isLastStep() ; upDown.setVisibility(hideSwipe ? View.GONE : View.VISIBLE);  if (d.isSwipeable()) { // => !processed if (d.isOnOptionOne()) { int y = d.midYOfTex() - (right.getHeight()/2); right.setY(y); right.setVisibility(View.VISIBLE); left.setVisibility(View.GONE); } else { left.setVisibility(View.VISIBLE); right.setVisibility(View.GONE); } } else { left.setVisibility(View.GONE); right.setVisibility(View.GONE); } } 	0	0	0	0	0	1
public void windowClosing(java.awt.event.WindowEvent ev){ // Create a new Settings object with all the current settings loaded Settings newSettings = new Settings(ignoreCommentsCheckbox.isSelected(), projectReader.settings.selectedLanguage, projectReader.rootFolder);  Settings.save(newSettings);    // Serialize the settings System.exit(0);                // Exit the program } 	0	0	0	0	0	1
"static float[] parseFloatArray(String p, String keyName, Properties prop) { if ($null.equals(p) || p == null) { return null; } if ($empty.equals(p) || p.length() == 0) { return new float[0]; } if ($array.equals(p)) { // readable float array, multiple line configuration List<String> filteredNames = new ArrayList<String>(); Set<String> names = prop.stringPropertyNames(); for (String propName : names) { String prefix = keyName + "".""; if (propName.startsWith(prefix)) { String k = propName.substring(prefix.length()); filteredNames.add(k); } } String[] keyNames = filteredNames.toArray(new String[filteredNames.size()]); Arrays.sort(keyNames); // keep array's order float[] fs = new float[keyNames.length]; for (int j = 0; j < keyNames.length; j++) { String propName = keyNames[j]; String v = (String) prop.getProperty(keyName + ""."" + propName); if (v != null) { try { fs[j] = Float.parseFloat(v); } catch (Exception e) { e.printStackTrace(); } } } return fs; } // single line configuration String[] ss = p.split(""\\s*;\\s*""); float[] fs = null; if (ss != null) { fs = new float[ss.length]; for (int j = 0; j < ss.length; j++) { if (ss[j] != null) { try { fs[j] = Float.parseFloat(ss[j]); } catch (Exception e) { e.printStackTrace(); } } } } return fs; } "	0	0	0	0	0	1
"@DataProvider(name = ""Basic Select Input (Focus) Test Data"") public Object[][] getBasicSelectInputFocusData() { return new Object[][]{ {""1px"", ""solid"", new String[]{commonUtils.hex2Rgb(""#047A9C""), commonUtils.hex2RgbWithoutTransparency(""#047A9C"")}, ""rgb(4, 122, 156) 0px 0px 5px 0px"", ""14px"", commonUtils.hex2Rgb(""#252525""), ""18px""} }; } "	0	0	0	0	0	1
"@Test(testName = ""Mobile: Verify Basic Input - Disabled"", dataProvider = ""Inputs - Basic (single line - disabled) Test Data"", groups = ""mobile-regression"") private void basicInputDisabledMobileTest(String expBorderWidth, String expBorderStyle, String[] expBorderColor, String[] expBgColor, String expMarginTop, String expPaddingRight, String expPaddingLeft, String[] expHeight, String expBorderRad, String[] expLabelColor, String expLabelFontSize) { for (String cssProperty : borderWidths) { basicInputBorder = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, cssProperty, ""mobile""); isBasicInputBorder = commonUtils.assertValue(basicInputBorder, expBorderWidth, ""Border width "" + cssProperty + "" of Input-Basic Disabled field is not as per spec""); Assert.assertTrue(isBasicInputBorder); } for (String cssProperty : borderStyles) { basicInputBorder = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, cssProperty, ""mobile""); isBasicInputBorder = commonUtils.assertValue(basicInputBorder, expBorderStyle, ""Border style "" + cssProperty + "" of Input-Basic Disabled field is not as per spec""); Assert.assertTrue(isBasicInputBorder); } for (String cssProperty : borderColors) { basicInputBorder = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, cssProperty, ""mobile""); isBasicInputBorder = commonUtils.assertCSSProperties(cssProperty, basicInputBorder, expBorderColor); if (isBasicInputBorder == false) { log.info(""Border color "" + cssProperty + "" of Input-Basic Disabled field is not as per spec, actual "" + basicInputBorder); } Assert.assertTrue(isBasicInputBorder); }  basicInputBgColor = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""background-color"", ""mobile""); marginTop = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""margin-top"", ""mobile""); paddingRight = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""padding-right"", ""mobile""); paddingLeft = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""padding-left"", ""mobile""); basicInputHeight = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""height"", ""mobile""); for (String cssProperty : borderRadii) { basicInputBorderRadius = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, cssProperty, ""mobile""); isBasicInputBorderRadius = commonUtils.assertValue(basicInputBorderRadius, expBorderRad, ""Border radius "" + cssProperty + "" of Input-Basic Disabled field is not as per spec ""); Assert.assertTrue(isBasicInputBorderRadius); }  isBackgroundColor = commonUtils.assertCSSProperties(""background-color"", basicInputBgColor, expBgColor); if (isBackgroundColor == false) { log.info("" Background color of Input-Basic Disabled field is not as per spec,actual "" + basicInputBgColor); } isMarginTop = commonUtils.assertValue(marginTop, expMarginTop, ""Background color of Input-Basic disabled field is not as per spec""); isPaddingRight = commonUtils.assertValue(paddingRight, expPaddingRight, ""Padding right of Input-Basic disabled field is not as per spec""); isPaddingLeft = commonUtils.assertValue(paddingLeft, expPaddingLeft, ""Padding left of Input-Basic disabled field is not as per spec""); isBasicInputHeight = commonUtils.assertCSSProperties(""height"", basicInputHeight, expHeight); if (isBasicInputHeight == false) { log.info(""Box height of Input-Basic Error field is not as per spec, actual "" + basicInputHeight); }  labelColor = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabledLabel, ""color"", ""mobile""); labelFontSize = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""font-size"", ""mobile""); isLabelColor = commonUtils.assertCSSProperties(""color"", labelColor, expLabelColor); if (isLabelColor == false) { log.info(""Label color of Input-Basic disabled label is not as per spec, actual "" + labelColor); } isLabelFontSize = commonUtils.assertValue(labelFontSize, expLabelFontSize, ""Label font size of Input-Basic disabled label is not as per spec""); isLabelFor = commonUtils.checkLabelForVal(inputsPgObj.inputBasicDisabledLabel, inputsPgObj.inputBasicDisabled, ""mobile""); Assert.assertTrue(isBackgroundColor && isMarginTop && isPaddingRight && isPaddingLeft && isBasicInputHeight && isLabelColor && isLabelFontSize && isLabelFor); } "	0	0	0	0	0	1
private ResultSet query(String sql){ try{ Statement st = con.createStatement(); ResultSet tmp = st.executeQuery(sql); try{ st.close(); } catch(SQLException e){ Logger lgr = Logger.getLogger(DB.class.getName()); lgr.log(Level.SEVERE, e.getMessage(), e); } return tmp; } catch(SQLException e){ Logger lgr = Logger.getLogger(DB.class.getName()); lgr.log(Level.WARNING, e.getMessage(), e); } return null; } 	0	0	0	0	0	1
@Override public Object fetchWidgetHierarchy() { throw new NotImplementedException(); } 	0	0	0	0	0	1
"private void fillFields(final ViewDefinitionState view, final Entity costCalculation) { final Set<String> outputDecimalFields = Sets.newHashSet(""productionCostMarginValue"", ""materialCostMarginValue"", ""totalOverhead"", ""totalMaterialCosts"", ""totalMachineHourlyCosts"", ""totalLaborHourlyCosts"", ""totalPieceworkCosts"", ""totalTechnicalProductionCosts"", ""totalCosts"", ""totalCostsPerUnit"", ""additionalOverheadValue"");  for (String referenceName : outputDecimalFields) { FieldComponent fieldComponent = (FieldComponent) view.getComponentByReference(referenceName); fieldComponent.setFieldValue(numberService.format(getBigDecimal(costCalculation.getField(referenceName)))); } } "	0	0	0	0	0	1
"public static Admin getAdmin() { return (Admin) Http.Context.current().args.get(""user""); } "	0	0	0	0	0	1
"private Table buildTable(RestRequest req, ClusterStateResponse state, NodesInfoResponse nodesInfo, NodesStatsResponse nodesStats) { boolean fullId = req.paramAsBoolean(""full_id"", false); DiscoveryNodes nodes = state.getState().nodes(); Table table = getTableWithHeader(req);  for (DiscoveryNode node : nodes) { NodeInfo info = nodesInfo.getNodesMap().get(node.id()); NodeStats stats = nodesStats.getNodesMap().get(node.id()); table.startRow();  table.addCell(fullId ? node.id() : Strings.substring(node.getId(), 0, 4)); table.addCell(info == null ? null : info.getProcess().getId()); table.addCell(node.getHostName()); table.addCell(node.getHostAddress()); if (node.address() instanceof InetSocketTransportAddress) { table.addCell(((InetSocketTransportAddress) node.address()).address().getPort()); } else { table.addCell(""-""); }  final Map<String, ThreadPoolStats.Stats> poolThreadStats; final Map<String, ThreadPool.Info> poolThreadInfo;  if (stats == null) { poolThreadStats = Collections.emptyMap(); poolThreadInfo = Collections.emptyMap(); } else { poolThreadStats = new HashMap<>(14); poolThreadInfo = new HashMap<>(14);  ThreadPoolStats threadPoolStats = stats.getThreadPool(); for (ThreadPoolStats.Stats threadPoolStat : threadPoolStats) { poolThreadStats.put(threadPoolStat.getName(), threadPoolStat); } if (info != null) { for (ThreadPool.Info threadPoolInfo : info.getThreadPool()) { poolThreadInfo.put(threadPoolInfo.getName(), threadPoolInfo); } } } for (String pool : SUPPORTED_NAMES) { ThreadPoolStats.Stats poolStats = poolThreadStats.get(pool); ThreadPool.Info poolInfo = poolThreadInfo.get(pool);  Long maxQueueSize = null; String keepAlive = null; Integer minThreads = null; Integer maxThreads = null;  if (poolInfo != null) { if (poolInfo.getQueueSize() != null) { maxQueueSize = poolInfo.getQueueSize().singles(); } if (poolInfo.getKeepAlive() != null) { keepAlive = poolInfo.getKeepAlive().toString(); } if (poolInfo.getMin() >= 0) { minThreads = poolInfo.getMin(); } if (poolInfo.getMax() >= 0) { maxThreads = poolInfo.getMax(); } }  table.addCell(poolInfo == null  ? null : poolInfo.getThreadPoolType()); table.addCell(poolStats == null ? null : poolStats.getActive()); table.addCell(poolStats == null ? null : poolStats.getThreads()); table.addCell(poolStats == null ? null : poolStats.getQueue()); table.addCell(maxQueueSize); table.addCell(poolStats == null ? null : poolStats.getRejected()); table.addCell(poolStats == null ? null : poolStats.getLargest()); table.addCell(poolStats == null ? null : poolStats.getCompleted()); table.addCell(minThreads); table.addCell(maxThreads); table.addCell(keepAlive); }  table.endRow(); }  return table; } "	0	0	0	0	0	1
public InputStream getInputStream(long offset) throws IOException, UnsupportedFileOperationException { // Use a random access input stream when available if (isFileOperationSupported(FileOperation.RANDOM_READ_FILE)) { RandomAccessInputStream rais = getRandomAccessInputStream(); rais.seek(offset);  return rais; }  InputStream in = getInputStream();  // Skip exactly the specified number of bytes StreamUtils.skipFully(in, offset);  return in; } 	0	0	0	0	0	1
public AbstractFile[] ls(FileFilter filter) throws IOException, UnsupportedFileOperationException { return filter==null?ls():filter.filter(ls()); } 	0	0	0	0	0	1
public String getErrorMessage() { return this.error_message; } 	0	0	0	0	0	1
"@Override @SuppressWarnings(""unchecked"") public String generateAPIDefinition(API api) throws APIManagementException { APIIdentifier identifier = api.getId(); APIManagerConfiguration config = ServiceReferenceHolder.getInstance().getAPIManagerConfigurationService().getAPIManagerConfiguration();  Environment environment = (Environment) config.getApiGatewayEnvironments().values().toArray()[0]; String endpoints = environment.getApiGatewayEndpoint(); String[] endpointsSet = endpoints.split("",""); Set<URITemplate> uriTemplates = api.getUriTemplates(); Set<Scope> scopes = api.getScopes();  if (endpointsSet.length < 1) { throw new APIManagementException(""Error in creating JSON representation of the API"" + identifier.getApiName()); }  JSONObject swaggerObject = new JSONObject();  //Create info object JSONObject infoObject = new JSONObject(); infoObject.put(""title"", api.getId().getApiName()); if(api.getDescription() != null){ infoObject.put(""description"", api.getDescription()); }  //Create contact object and map business owner info JSONObject contactObject = new JSONObject(); if(api.getBusinessOwner() != null ){ contactObject.put(""name"", api.getBusinessOwner()); } if(api.getBusinessOwnerEmail() != null ){ contactObject.put(""email"", api.getBusinessOwnerEmail()); } if(api.getBusinessOwner() != null || api.getBusinessOwnerEmail() != null) { //put contact object to info object infoObject.put(""contact"", contactObject); }  //Create licence object # no need for this since this is not mandatory //JSONObject licenceObject = new JSONObject();  //infoObject.put(""license"", licenceObject); infoObject.put(""version"", api.getId().getVersion());  //add info object to swaggerObject swaggerObject.put(""info"", infoObject);  JSONObject pathsObject = new JSONObject(); JSONObject pathItemObject = null; JSONObject operationObject; JSONObject responseObject = new JSONObject(); //add default response JSONObject status200 = new JSONObject(); status200.put(""description"", ""OK""); responseObject.put(""200"",status200);  for (URITemplate uriTemplate : uriTemplates) { String pathName = uriTemplate.getUriTemplate(); if (pathsObject.get(pathName) == null) { pathsObject.put(pathName, ""{}""); pathItemObject = new JSONObject(); }  String httpVerb = uriTemplate.getHTTPVerb(); if (pathItemObject != null) { operationObject = new JSONObject(); operationObject.put(""x-auth-type"", uriTemplate.getAuthType()); operationObject.put(""x-throttling-tier"", uriTemplate.getThrottlingTier()); operationObject.put(""responses"", responseObject); pathItemObject.put(httpVerb.toLowerCase(), operationObject); } pathsObject.put(pathName, pathItemObject); }  swaggerObject.put(""paths"", pathsObject); swaggerObject.put(""swagger"", ""2.0"");  JSONObject securityDefinitionObject = new JSONObject(); JSONObject scopesObject = new JSONObject();  JSONArray xWso2ScopesArray = new JSONArray(); JSONObject xWso2ScopesObject; if (scopes != null) { for (Scope scope : scopes) { xWso2ScopesObject = new JSONObject(); xWso2ScopesObject.put(""key"", scope.getKey()); xWso2ScopesObject.put(""name"", scope.getName()); xWso2ScopesObject.put(""roles"", scope.getRoles()); xWso2ScopesObject.put(""description"", scope.getDescription());  xWso2ScopesArray.add(xWso2ScopesObject); } }  scopesObject.put(""x-wso2-scopes"", xWso2ScopesArray); securityDefinitionObject.put(""apim"", scopesObject);  swaggerObject.put(""securityDefinitions"", securityDefinitionObject);  return swaggerObject.toJSONString(); } "	0	0	0	0	0	1
public int getValue() { String val = this.getText(); try { return Integer.parseInt(val); } catch (NumberFormatException e) { return 0; }  } 	0	0	0	0	0	1
private void handleHold() { if (mReleaseHold) { releaseHoldCmd(); } else { mWaitingForRelease = true;  VpnStatus.updateStatePause(lastPauseReason);   } } 	0	0	0	0	0	1
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);  if (isVoiceInteraction() || savedInstanceState == null) { // Only permit if this is a voice interaction. if (onVoiceSettingInteraction(getIntent())) { // If it's complete, finish. finish(); } } else { Log.v(TAG, ""Cannot modify settings without voice interaction""); finish(); } } "	0	0	0	0	0	1
"@Test public void getAuthoritiesShouldIgnoreRolesNotProvidedByThePermissionService() throws Exception { assertThat(authorizationService.getAuthorities(ImmutableList.of( Grant.builder().entityId(""a"").role(""z"").entityLevel(Grant.EntityLevel.STATE).stateId(""a"").build() ))).isEmpty(); } "	0	0	0	0	0	1
public List<String> getChannelIds() { return channelIds; } 	0	0	0	0	0	1
"@Override public void run(Map<String, String> parameters) throws UserErrorMessage { // TODO Auto-generated method stub ODPDBAccess db = getDB(); CachedDatastoreService ds = getDS(); CachedEntity character = db.getCurrentCharacter(); CachedEntity user = db.getCurrentUser();  Long itemId = tryParseId(parameters, ""itemId""); Long pathId = tryParseId(parameters, ""pathId"");  CachedEntity item = db.getEntity(""Item"", itemId); CachedEntity path = db.getEntity(""Path"", pathId); CachedEntity location = db.getEntity((Key)character.getProperty(""locationKey""));  // Validation if(item == null) throw new UserErrorMessage(""This item does not exist""); if(path == null) throw new UserErrorMessage(""This path does not exist""); if(location == null) throw new RuntimeException(""Character location is null"");  if(""Map to Location"".equals(item.getProperty(""name""))==false) throw new UserErrorMessage(""The specified item is not a map.""); if(GameUtils.equals(item.getProperty(""containerKey""), character.getKey()) == false) throw new UserErrorMessage(""You are not currently in possession of this map!"");  CombatService cs = new CombatService(db); if(cs.isInCombat(character)) throw new UserErrorMessage(""You cannot read the map while in combat!"");  // Always handle durability. if(item.getProperty(""durability"") != null) { Long durability = (Long)item.getProperty(""durability""); if(durability > 1) { durability -= 1; item.setProperty(""durability"", durability); ds.put(item); } else { ds.delete(item); } setJavascriptResponse(JavascriptResponse.ReloadPagePopup); } // Verify map is for the correct specified path. Do this after the durability drain. if(GameUtils.equals(item.getProperty(""keyCode""), pathId) == false) throw new UserErrorMessage(""You are unable to decipher the map."");  // Doesn't matter if they already know the path. Teach it to them anyway. db.doCharacterDiscoverEntity(ds, character, path); // If they are at either end of the path, refresh the button list so they can see it. if(GameUtils.equals(location.getKey(), path.getProperty(""location1Key"")) || GameUtils.equals(location.getKey(), path.getProperty(""location2Key""))) { MainPageUpdateService mpus = new MainPageUpdateService(db, user, character, location, this); mpus.updateButtonList(cs); } } "	0	0	0	0	0	1
public void changeName(String name){ userAccount.setName(name); } 	0	0	0	0	0	1
"public static void createGeoEntitySynonym(java.lang.String entityId, java.lang.String label) { String msg = ""This method should never be invoked.  It should be overwritten in net.geoprism.DataUploader.java""; throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg); } "	0	0	0	0	0	1
"public String buildName( boolean hybridMarker, boolean rankMarker, boolean authorship, boolean infrageneric, boolean genusForInfrageneric, boolean abbreviateGenus, boolean decomposition, boolean asciiOnly, boolean showIndet, boolean nomNote, boolean remarks, boolean showSensu, boolean showCultivar, boolean showStrain ) { StringBuilder sb = new StringBuilder(); Rank rnk = getRank();  if (NameType.CANDIDATUS == type) { sb.append(""Candidatus ""); }  if (genusOrAbove != null && (genusForInfrageneric || infraGeneric == null || specificEpithet != null)) { if (hybridMarker && NamePart.GENERIC == notho) { sb.append(HYBRID_MARKER); } if (abbreviateGenus) { sb.append(genusOrAbove.substring(0, 1)).append('.'); } else { sb.append(genusOrAbove); } } if (specificEpithet == null) { if (Rank.SPECIES == rnk) { // no species epitheton given, but rank=species. Indetermined species! if (showIndet) { sb.append("" spec.""); } } else if (rnk != null && rnk.isInfraspecific()) { // no species epitheton given, but rank below species. Indetermined! if (showIndet) { sb.append(' '); sb.append(rnk.getMarker()); } } else if (infraGeneric != null) { // this is the terminal name part - always show it! if (rankMarker && rank != null) { // If we know the rank we use explicit rank markers // this is how botanical infrageneric names are formed, see http://www.iapt-taxon.org/nomen/main.php?page=art21 sb.append(' ') .append(rank) .append(' ') .append(infraGeneric); } else { if (genusForInfrageneric && genusOrAbove != null) { // if we have shown the genus already and we do not know the rank we use parenthesis to indicate an infrageneric sb.append("" ("") .append(infraGeneric) .append("")""); } else { // no genus shown yet, just show the plain infrageneric name sb.append(infraGeneric); } } } // genus/infrageneric authorship if (authorship) { appendAuthorship(sb); } } else { if (infrageneric && infraGeneric != null && (rank == null || getRank() == Rank.GENUS)) { // only show subgenus if requested sb.append("" (""); sb.append(infraGeneric); sb.append(')'); }  // species part sb.append(' '); if (hybridMarker && NamePart.SPECIFIC == notho) { sb.append(HYBRID_MARKER); } String epi = specificEpithet.replaceAll(""[ _-]"", ""-""); sb.append(epi);  if (infraSpecificEpithet == null) { // Indetermined? Only show indet cultivar marker if no cultivar epithet exists if (showIndet && rnk != null && rnk.isInfraspecific() && (Rank.CULTIVAR != rnk || cultivarEpithet == null)) { // no infraspecific epitheton given, but rank below species. Indetermined! sb.append(' '); sb.append(rnk.getMarker()); }  // species authorship if (authorship) { appendAuthorship(sb); } } else { // infraspecific part sb.append(' '); if (hybridMarker && NamePart.INFRASPECIFIC == notho) { if (rankMarker) { sb.append(""notho""); } else { sb.append(HYBRID_MARKER); } } if (rankMarker) { sb.append(rank); sb.append(' '); } epi = infraSpecificEpithet.replaceAll(""[ _-]"", ""-""); sb.append(epi); // non autonym authorship ? if (authorship && !isAutonym()) { appendAuthorship(sb); } } }  // add cultivar name if (showStrain && strain != null) { sb.append("" ""); sb.append(strain); }  // add cultivar name if (showCultivar && cultivarEpithet != null) { sb.append("" '""); sb.append(cultivarEpithet); sb.append(""'""); }  // add sensu/sec reference if (showSensu && sensu != null) { sb.append("" ""); sb.append(sensu); }  // add nom status if (nomNote && nomStatus != null) { sb.append("", ""); sb.append(nomStatus); }  // add remarks if (remarks && this.remarks != null) { sb.append("" [""); sb.append(this.remarks); sb.append(""]""); }  String name = sb.toString().trim(); if (decomposition) { name = UnicodeUtils.decompose(name); } if (asciiOnly) { name = UnicodeUtils.ascii(name); } return Strings.emptyToNull(name); } "	0	0	0	0	0	1
"private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) { binding.setRole( source.getAttributeRole().getFullPath() ); binding.setInverse( source.isInverse() ); binding.setMutable( source.isMutable() ); binding.setOptimisticLocked( source.isIncludedInOptimisticLocking() );  if ( source.getCustomPersisterClassName() != null ) { binding.setCollectionPersisterClass( mappingDocument.getClassLoaderAccess().classForName( mappingDocument.qualifyClassName( source.getCustomPersisterClassName() ) ) ); }  applyCaching( mappingDocument, source.getCaching(), binding );  // bind the collection type info String typeName = source.getTypeInformation().getName(); Map typeParameters = new HashMap(); if ( typeName != null ) { // see if there is a corresponding type-def final TypeDefinition typeDef = mappingDocument.getMetadataCollector().getTypeDefinition( typeName ); if ( typeDef != null ) { typeName = typeDef.getTypeImplementorClass().getName(); if ( typeDef.getParameters() != null ) { typeParameters.putAll( typeDef.getParameters() ); } } else { // it could be a unqualified class name, in which case we should qualify // it with the implicit package name for this context, if one. typeName = mappingDocument.qualifyClassName( typeName ); } } if ( source.getTypeInformation().getParameters() != null ) { typeParameters.putAll( source.getTypeInformation().getParameters() ); }  binding.setTypeName( typeName ); binding.setTypeParameters( typeParameters );  if ( source.getFetchCharacteristics().getFetchTiming() == FetchTiming.DELAYED ) { binding.setLazy( true ); binding.setExtraLazy( source.getFetchCharacteristics().isExtraLazy() ); } else { binding.setLazy( false ); }  switch ( source.getFetchCharacteristics().getFetchStyle() ) { case SELECT: { binding.setFetchMode( FetchMode.SELECT ); break; } case JOIN: { binding.setFetchMode( FetchMode.JOIN ); break; } case BATCH: { binding.setFetchMode( FetchMode.SELECT ); binding.setBatchSize( source.getFetchCharacteristics().getBatchSize() ); break; } case SUBSELECT: { binding.setFetchMode( FetchMode.SELECT ); binding.setSubselectLoadable( true ); // todo : this could totally be done using a ""symbol map"" approach binding.getOwner().setSubselectLoadableCollections( true ); break; } default: { throw new AssertionFailure( ""Unexpected FetchStyle : "" + source.getFetchCharacteristics().getFetchStyle().name() ); } }  for ( String name : source.getSynchronizedTableNames() ) { binding.getSynchronizedTables().add( name ); }  binding.setWhere( source.getWhere() ); binding.setLoaderName( source.getCustomLoaderName() ); if ( source.getCustomSqlInsert() != null ) { binding.setCustomSQLInsert( source.getCustomSqlInsert().getSql(), source.getCustomSqlInsert().isCallable(), source.getCustomSqlInsert().getCheckStyle() ); } if ( source.getCustomSqlUpdate() != null ) { binding.setCustomSQLUpdate( source.getCustomSqlUpdate().getSql(), source.getCustomSqlUpdate().isCallable(), source.getCustomSqlUpdate().getCheckStyle() ); } if ( source.getCustomSqlDelete() != null ) { binding.setCustomSQLDelete( source.getCustomSqlDelete().getSql(), source.getCustomSqlDelete().isCallable(), source.getCustomSqlDelete().getCheckStyle() ); } if ( source.getCustomSqlDeleteAll() != null ) { binding.setCustomSQLDeleteAll( source.getCustomSqlDeleteAll().getSql(), source.getCustomSqlDeleteAll().isCallable(), source.getCustomSqlDeleteAll().getCheckStyle() ); }  if ( source instanceof Sortable ) { final Sortable sortable = (Sortable) source; if ( sortable.isSorted() ) { binding.setSorted( true ); if ( ! sortable.getComparatorName().equals( ""natural"" ) ) { binding.setComparatorClassName( sortable.getComparatorName() ); } } else { binding.setSorted( false ); } }  if ( source instanceof Orderable ) { if ( ( (Orderable) source ).isOrdered() ) { binding.setOrderBy( ( (Orderable) source ).getOrder() ); } }  final String cascadeStyle = source.getCascadeStyleName(); if ( cascadeStyle != null && cascadeStyle.contains( ""delete-orphan"" ) ) { binding.setOrphanDelete( true ); }  for ( FilterSource filterSource : source.getFilterSources() ) { String condition = filterSource.getCondition(); if ( condition == null ) { final FilterDefinition filterDefinition = mappingDocument.getMetadataCollector().getFilterDefinition( filterSource.getName() ); if ( filterDefinition != null ) { condition = filterDefinition.getDefaultFilterCondition(); } }  binding.addFilter( filterSource.getName(), condition, filterSource.shouldAutoInjectAliases(), filterSource.getAliasToTableMap(), filterSource.getAliasToEntityMap() ); } } "	0	0	0	0	0	1
private static BasicTypeProducer resolveTypeProducer( MappingDocument mappingDocument, HibernateTypeSource typeSource) { final String typeName = typeSource.getName();  if ( StringHelper.isNotEmpty( typeName ) ) { final BasicTypeProducer registered = mappingDocument.getMetadataCollector() .getBasicTypeProducerRegistry() .resolve( typeSource.getName() ); if ( registered != null ) { return registered; } }  return new BasicTypeProducerUnregisteredImpl( mappingDocument.getMetadataCollector().getTypeConfiguration() ); } 	0	0	0	0	0	1
"@RequestMapping(value=""/exportDataDump"", method = RequestMethod.GET) @ApiOperation(value = ""exportDataDump"", notes = ""The Export Data Dump API allows export of bibliographic records in SCSB database into MARCXML or SCSBXML format. This is used by partners to export records in preferred format and update their respective discovery systems. These jobs are scheduled to run by HTC support."", nickname = ""exportDataDump"", position = 0) @ApiResponses(value = {@ApiResponse(code = 200, message = ReCAPConstants.DATADUMP_PROCESS_STARTED)}) @ResponseBody public ResponseEntity exportDataDump(@ApiParam(value = ""Institution code(s) for requesting shared/open updates from partners: PUL = Princeton, CUL = Columbia, NYPL = New York Public Library"" , required = true, name = ""institutionCodes"") @RequestParam String institutionCodes, @ApiParam(value = ""Institution codes of the requesting institution. PUL = Princeton, CUL = Columbia, NYPL = New York Public Library"",required=true, name = ""requestingInstitutionCode"") @RequestParam String requestingInstitutionCode, @ApiParam(value = ""Type of export - Incremental (use 1) or Deleted (use 2)"" , required = true , name = ""fetchType"") @RequestParam String fetchType, @ApiParam(value = ""Type of format - Marc xml (use 0) or SCSB xml (use 1), for deleted records only json format (use 2)"",required=true, name = ""outputFormat"") @RequestParam String outputFormat, @ApiParam(value = ""Get updates to middleware collection since the date provided. Date format will be a string (yyyy-MM-dd HH:mm) and is Eastern Time."",name = ""date"") @RequestParam(required = false) String date, @ApiParam(value = ""Data can be requested by Collection Group ID, either Shared (use 1) or Open (use 2). Default is both, can use 1,2 as well."", name = ""collectionGroupIds"") @RequestParam(required=false) String collectionGroupIds, @ApiParam(value = ""Type of transmission - for FTP use 0, for HTTP response use 1. Default is FTP."", name = ""transmissionType"")@RequestParam(required=false) String transmissionType, @ApiParam(value = ""Email address to whom email will be sent upon completion"" , name = ""emailToAddress"")@RequestParam(required=false) String emailToAddress ){ RestTemplate restTemplate = getRestTemplate(); Map<String,String> inputMap = new HashMap<>(); inputMap.put(""institutionCodes"",institutionCodes); inputMap.put(""requestingInstitutionCode"",requestingInstitutionCode); inputMap.put(""fetchType"",fetchType); inputMap.put(""outputFormat"",outputFormat); inputMap.put(""date"",date); inputMap.put(""collectionGroupIds"",collectionGroupIds); inputMap.put(""transmissionType"",transmissionType); inputMap.put(""emailToAddress"",emailToAddress); try { HttpHeaders headers = new HttpHeaders(); headers.set(""api_key"",""recap""); HttpEntity requestEntity = new HttpEntity(headers); ResponseEntity<String> response = restTemplate.exchange(getScsbEtlUrl() + ""dataDump/exportDataDump/?institutionCodes={institutionCodes}&requestingInstitutionCode={requestingInstitutionCode}&fetchType={fetchType}&outputFormat={outputFormat}&date={date}&collectionGroupIds={collectionGroupIds}&transmissionType={transmissionType}&emailToAddress={emailToAddress}"", HttpMethod.GET, requestEntity, String.class, inputMap); return new ResponseEntity(response.getBody(), getHttpHeaders(), getHttpStatus(response.getBody())); } catch (Exception exception) { logger.error(""error-->"",exception); return new ResponseEntity(""Scsb Etl Service is Unavailable."", getHttpHeaders(), HttpStatus.SERVICE_UNAVAILABLE); } } "	0	0	0	0	0	1
private Account getCaller() { Account caller = CallContext.current().getCallingAccount(); return caller; } 	0	0	0	0	0	1
private StorageManager createStorageManager() { if (configuration.isPersistenceEnabled()) { if (configuration.getStoreConfiguration() != null && configuration.getStoreConfiguration().getStoreType() == StoreConfiguration.StoreType.DATABASE) { return new JDBCJournalStorageManager(configuration, getScheduledPool(), executorFactory, ioExecutorFactory, shutdownOnCriticalIO); } else { // Default to File Based Storage Manager, (Legacy default configuration). return new JournalStorageManager(configuration, executorFactory, scheduledPool, ioExecutorFactory, shutdownOnCriticalIO); } } return new NullStorageManager(); } 	0	0	0	0	0	1
"public StatementBuilder<T, ID> updateColumnValue(String columnName, Object value) throws SQLException { FieldType fieldType = verifyColumnName(columnName); if (fieldType.isForeignCollection()) { throw new SQLException(""Can't update foreign colletion field: "" + columnName); } addUpdateColumnToList(columnName, new SetValue(columnName, fieldType, value)); return this; } "	0	0	0	0	0	1
"public StatementBuilder<T, ID> updateColumnExpression(String columnName, String expression) throws SQLException { FieldType fieldType = verifyColumnName(columnName); if (fieldType.isForeignCollection()) { throw new SQLException(""Can't update foreign colletion field: "" + columnName); } addUpdateColumnToList(columnName, new SetExpression(columnName, fieldType, expression)); return this; } "	0	0	0	0	0	1
private MapillaryImage[] getNearestImagesFromDifferentSequences(MapillaryAbstractImage target, int limit) { return data.getSequences().parallelStream() .filter((seq) -> target.getSequence() == null || seq.getKey() != null && !seq.getKey().equals(target.getSequence().getKey())) .map((seq) -> { Optional<MapillaryAbstractImage> resImg = seq.getImages().parallelStream() .filter((img) -> img instanceof MapillaryImage && img.isVisible()) .sorted(new NearestImgToTargetComparator(target)) .findFirst(); return resImg.isPresent() ? resImg.get() : null; }) .filter((img) -> img != null && img.getMovingLatLon().greatCircleDistance(target.getMovingLatLon()) < MapillaryProperties.SEQUENCE_MAX_JUMP_DISTANCE.get() ) .sorted(new NearestImgToTargetComparator(target)) .limit(limit) .toArray(MapillaryImage[]::new); } 	0	0	0	0	0	1
"@Test public void testDelegate() throws IOException, InterruptedException { EdDSA key = wallet.getAccounts().get(0); String uri = ""/delegate?password="" + password + ""&from=0&to="" + key.toAddressString() + ""&value="" + Config.MIN_DELEGATE_FEE + ""&fee=5000000&data=test""; JSONObject response = request(uri); assertTrue(response.getBoolean(""success"")); assertNotNull(response.getString(""result""));  Thread.sleep(200);  List<Transaction> list = api.pendingMgr.getTransactions(); assertFalse(list.isEmpty()); assertArrayEquals(list.get(list.size() - 1).getHash(), Hex.parse(response.getString(""result""))); assertEquals(list.get(list.size() - 1).getType(), TransactionType.DELEGATE); } "	0	0	0	0	0	1
"public void addContact(final String address, final String nickname) throws ImException {  if (null == address) { throw new NullPointerException(); }  if (mManager.getState() == ContactListManager.BLOCKED_LIST_LOADED) { if (mManager.isBlocked(address)) { throw new ImException(ImErrorInfo.CANT_ADD_BLOCKED_CONTACT, ""Contact has been blocked""); } }  Contact contact = getContact(address);   if (contact == null) { contact = new Contact (new XmppAddress(address),nickname); } else if (nickname != null) contact.setName(nickname);  try { mManager.addContactToListAsync(contact, ContactList.this, true); } catch (ImException e) { // TODO Auto-generated catch block e.printStackTrace(); }  } "	0	0	0	0	0	1
"@Test public void queryByField() { running(fakeApplication(), () -> { Result result = route( fakeRequest(GET, ""/organisations/search?q=fundertype.label:land"")); assertContains(result, ""Köln""); }); } "	0	0	0	0	0	1
"@Override public void createIndex(Collection<OntologyLoader> loaders) {  getLog().info(""Creating index for "" + loaders.size() + "" loaders"");   for (OntologyLoader loader : loaders) {   getLog().info(""Creating new index for "" + loader.getOntologyName()); long startTime = System.currentTimeMillis();  getLog().info(""Number of classes to index: "" + loader.getAllClasses().size()); getLog().info(""Number of object properties to index: "" + loader.getAllObjectPropertyIRIs().size()); getLog().info(""Number of annotation properties to index: "" + loader.getAllAnnotationPropertyIRIs().size()); getLog().info(""Number of individuals to index: "" + loader.getAllIndividualIRIs().size());  List<TermDocument> documents = new ArrayList<TermDocument>(); List<SuggestDocument> suggestDocuments = new ArrayList<>();  for (IRI classTerm : loader.getAllClasses()) { getLog().debug(""solr indexing "" + classTerm.toString());  TermDocumentBuilder builder = extractFeatures(loader, classTerm); builder.setType(TermType.CLASS.toString().toLowerCase()); builder.setId(generateId(loader.getOntologyName(), ""class"", classTerm.toString())); builder.setUri_key(generateAnnotationId(loader.getOntologyName() + classTerm.toString() + ""class"").hashCode());  documents.add(builder.createTermDocument());  if (documents.size() == 10000) { getLog().debug(""Max reached - indexing terms""); index(documents); documents = new ArrayList<>(); }  // get labels and synonyms for suggest index suggestDocuments.add(new SuggestDocument(loader.getTermLabels().get(classTerm), loader.getOntologyName())); if (loader.getTermSynonyms().containsKey(classTerm)) { for (String syn : loader.getTermSynonyms().get(classTerm)) { suggestDocuments.add(new SuggestDocument(syn, loader.getOntologyName())); } } if (suggestDocuments.size() > 10000) { indexSuggest(suggestDocuments); suggestDocuments = new ArrayList<>(); }  }  for (IRI classTerm : loader.getAllObjectPropertyIRIs()) { TermDocumentBuilder builder = extractFeatures(loader, classTerm); builder.setType(TermType.PROPERTY.toString().toLowerCase()); builder.setId(generateId(loader.getOntologyName(), ""property"", classTerm.toString())); builder.setUri_key(generateAnnotationId(loader.getOntologyName() + classTerm.toString() + ""property"").hashCode());  documents.add(builder.createTermDocument()); }  for (IRI classTerm : loader.getAllAnnotationPropertyIRIs()) { TermDocumentBuilder builder = extractFeatures(loader, classTerm); builder.setType(TermType.PROPERTY.toString().toLowerCase()); builder.setId(generateId(loader.getOntologyName(), ""property"", classTerm.toString())); builder.setUri_key(generateAnnotationId(loader.getOntologyName() + classTerm.toString() + ""property"").hashCode()); documents.add(builder.createTermDocument()); }  for (IRI classTerm : loader.getAllIndividualIRIs()) { TermDocumentBuilder builder = extractFeatures(loader, classTerm); builder.setType(TermType.INDIVIDUAL.toString().toLowerCase()); builder.setId(generateId(loader.getOntologyName(), ""individual"", classTerm.toString())); builder.setUri_key(generateAnnotationId(loader.getOntologyName() + classTerm.toString() + ""individual"").hashCode()); documents.add(builder.createTermDocument());   if (documents.size() == 10000) { getLog().debug(""Max reached - indexing terms""); index(documents); documents = new ArrayList<>(); } }  // index ontology meta data TermDocumentBuilder builder = extractOntologyFeature(loader); documents.add(builder.createTermDocument());   long endTime = System.currentTimeMillis(); long duration = (endTime - startTime) / 1000; // time in seconds index(documents); indexSuggest(suggestDocuments); getLog().info(""Solr index for "" + loader.getOntologyName() + "" completed in "" + duration + "" seconds"");  }    } "	0	0	0	0	0	1
public static Texture getTexture(String txt) { return textures.get(txt); } 	0	0	0	0	0	1
private static JsonNode fullJsonResponse(final List<Document> documents, final String field, long allHits, boolean addQueryInfo, Request request) { Iterable<JsonNode> nonEmptyNodes = Iterables.filter(Lists.transform(documents, doc -> { return Json.parse(doc.getSource()); }), node -> { return node.size() > 0; }); if (!field.isEmpty()) { nonEmptyNodes = ImmutableSortedSet.copyOf((o1, o2) -> { return o1.asText().compareTo(o2.asText()); }, FluentIterable.from(nonEmptyNodes).transformAndConcat(input -> { return input.isArray() ? Lists.newArrayList(input.elements()) : Lists.newArrayList(input); })); } List<JsonNode> data = new ArrayList<>(); if (addQueryInfo) data.add(queryInfo(allHits, request)); data.addAll(ImmutableSet.copyOf(nonEmptyNodes)); return Json.toJson(data); } 	0	0	0	0	0	1
"public List<MachineRuntime> forkMachines(String keyPairName, GroupRuntime mainGroup, Set<String> securityGroupIds, int totalSize, Ec2 ec2) throws KaramelException { String uniqeGroupName = Settings.EC2_UNIQUE_GROUP_NAME(mainGroup.getCluster().getName(), mainGroup.getName()); List<String> allVmNames = Settings.EC2_UNIQUE_VM_NAMES(mainGroup.getCluster().getName(), mainGroup.getName(), totalSize); logger.info(String.format(""Start forking %d machine(s) for '%s' ..."", totalSize, uniqeGroupName));  if (context == null) { throw new KaramelException(""Register your valid credentials first :-| ""); }  if (sshKeyPair == null) { throw new KaramelException(""Choose your ssh keypair first :-| ""); } AWSEC2TemplateOptions options = context.getComputeService().templateOptions().as(AWSEC2TemplateOptions.class); if (ec2.getPrice() != null) { options.spotPrice(ec2.getPrice()); }  boolean succeed = false; int tries = 0; Set<NodeMetadata> successfulNodes = Sets.newLinkedHashSet(); List<String> unforkedVmNames = new ArrayList<>(); List<String> toBeForkedVmNames; unforkedVmNames.addAll(allVmNames); Map<NodeMetadata, Throwable> failedNodes = Maps.newHashMap(); while (!succeed && tries < Settings.EC2_RETRY_MAX) { int requestSize = totalSize - successfulNodes.size(); if (requestSize > Settings.EC2_MAX_FORK_VMS_PER_REQUEST) { requestSize = Settings.EC2_MAX_FORK_VMS_PER_REQUEST; toBeForkedVmNames = unforkedVmNames.subList(0, Settings.EC2_MAX_FORK_VMS_PER_REQUEST); } else { toBeForkedVmNames = unforkedVmNames; } TemplateBuilder template = context.getComputeService().templateBuilder(); options.keyPair(keyPairName); options.as(AWSEC2TemplateOptions.class).securityGroupIds(securityGroupIds); options.nodeNames(toBeForkedVmNames); if (ec2.getSubnet() != null) { options.as(AWSEC2TemplateOptions.class).subnetId(ec2.getSubnet()); } template.options(options); template.os64Bit(true); template.hardwareId(ec2.getType()); template.imageId(ec2.getRegion() + ""/"" + ec2.getImage()); template.locationId(ec2.getRegion()); tries++; Set<NodeMetadata> succ = new HashSet<>(); try { logger.info(String.format(""Forking %d machine(s) for '%s', so far(succeeded:%d, failed:%d, total:%d)"", requestSize, uniqeGroupName, successfulNodes.size(), failedNodes.size(), totalSize)); succ.addAll(context.getComputeService().createNodesInGroup( uniqeGroupName, requestSize, template.build())); } catch (RunNodesException ex) { addSuccessAndLostNodes(ex, succ, failedNodes); } catch (AWSResponseException e) { if (""InstanceLimitExceeded"".equals(e.getError().getCode())) { throw new KaramelException(""It seems your ec2 account has instance limit.. if thats the case either decrease "" + ""size of your cluster or increase the limitation of your account."", e); } else if (""InsufficientInstanceCapacity"".equals(e.getError().getCode())) { throw new KaramelException(String.format(""It seems your ec2 account doesn't have sufficent capacity for %s "" + ""instances"", ec2.getType()), e); } else { logger.error("""", e); } } catch (IllegalStateException ex) { logger.error("""", ex); logger.info(String.format(""#%d Hurry up EC2!! I want machines for %s, will ask you again in %d ms :@"", tries, uniqeGroupName, Settings.EC2_RETRY_INTERVAL), ex); }  unforkedVmNames = findLeftVmNames(succ, unforkedVmNames); successfulNodes.addAll(succ); if (successfulNodes.size() < totalSize) { try { succeed = false; logger.info(String.format(""So far we got %d successful-machine(s) and %d failed-machine(s) out of %d "" + ""original-number for '%s'. Failed nodes will be killed later."", successfulNodes.size(), failedNodes.size(), totalSize, uniqeGroupName)); Thread.currentThread().sleep(Settings.EC2_RETRY_INTERVAL); } catch (InterruptedException ex1) { logger.error("""", ex1); } } else { succeed = true; logger.info(String.format(""Cool!! we got all %d machine(s) for '%s' |;-) we have %d failed-machines to kill "" + ""before we go on.."", totalSize, uniqeGroupName, failedNodes.size())); if (failedNodes.size() > 0) { cleanupFailedNodes(failedNodes); } List<MachineRuntime> machines = new ArrayList<>(); for (NodeMetadata node : successfulNodes) { if (node != null) { MachineRuntime machine = new MachineRuntime(mainGroup); ArrayList<String> privateIps = new ArrayList(); ArrayList<String> publicIps = new ArrayList(); privateIps.addAll(node.getPrivateAddresses()); publicIps.addAll(node.getPublicAddresses()); machine.setEc2Id(node.getId()); machine.setName(node.getName()); machine.setPrivateIp(privateIps.get(0)); machine.setPublicIp(publicIps.get(0)); machine.setSshPort(node.getLoginPort()); machine.setSshUser(node.getCredentials().getUser()); machines.add(machine); } } return machines; } } throw new KaramelException(String.format(""Couldn't fork machines for group'%s'"", mainGroup.getName())); } "	0	0	0	0	0	1
public void purgeQueue(String queue) throws AndesAdminServiceException, RemoteException { stub.purgeMessagesOfQueue(queue); } 	0	0	0	0	0	1
"public Map<String, List<ConfiguredJob>> loadJobs() throws IOException {  return objectMapper.readValue(new File(configDirectory + ""jenkins.json""), new TypeReference<Map<String, List<ConfiguredJob>>>() { }); } "	0	0	0	0	0	1
public List<String> getConservedPfamNames(String alignedUnit, int order, String scopId, float score) throws IOException, ProtodomainCreationException, StructureException {  Protodomain[]  protodomains; Atom[][] ca; List<ProteinSequence> seqs;  Protodomain wholeAligned = Protodomain.fromString(alignedUnit, scopId, cache); protodomains = new Protodomain[order]; ca = new Atom[order][]; seqs = new ArrayList<ProteinSequence>(order); for (int i = 0; i < order; i++) { protodomains[i] = wholeAligned.createSubstruct(order, i); ca[i] = cache.getAtoms(protodomains[i].getString()); ProteinSequence seq = new ProteinSequence(StructureTools.convertAtomsToSeq(ca[i])); seqs.add(seq); }  List<String> pfamNames = getConservedPfamNames(seqs, score); return pfamNames; } 	0	0	0	0	0	1
"public void jMenuHelpAbout_actionPerformed() {  // make the dialog JDialog dlg = new JDialog(parentFrame, ""MegaMekLab Info"");  // set up the contents JPanel child = new JPanel(); child.setLayout(new BoxLayout(child, BoxLayout.Y_AXIS));  // set the text up. JLabel mekwars = new JLabel(""MegaMekLab Version: "" + MegaMekLab.VERSION); JLabel version = new JLabel(""MegaMek Version: "" + MegaMek.VERSION); JLabel license1 = new JLabel(""MegaMekLab software is under GPL. See""); JLabel license2 = new JLabel(""license.txt in ./Docs/licenses for details.""); JLabel license3 = new JLabel(""Project Info:""); JLabel license4 = new JLabel(""       http://www.sourceforge.net/projects/megameklab       "");  // center everything mekwars.setAlignmentX(Component.CENTER_ALIGNMENT); version.setAlignmentX(Component.CENTER_ALIGNMENT); license1.setAlignmentX(Component.CENTER_ALIGNMENT); license2.setAlignmentX(Component.CENTER_ALIGNMENT); license3.setAlignmentX(Component.CENTER_ALIGNMENT); license4.setAlignmentX(Component.CENTER_ALIGNMENT);  // add to child panel child.add(new JLabel(""\n"")); child.add(mekwars); child.add(version); child.add(new JLabel(""\n"")); child.add(license1); child.add(license2); child.add(new JLabel(""\n"")); child.add(license3); child.add(license4); child.add(new JLabel(""\n""));  // then add child panel to the content pane. dlg.getContentPane().add(child); dlg.setLocationRelativeTo(parentFrame); dlg.setModal(true); dlg.setResizable(false); dlg.pack(); dlg.setVisible(true); } "	0	0	0	0	0	1
"@Test public void currentSpanVisibleToUserFilters() throws Exception { server.enqueue(new MockResponse()); closeClient(client);  client = TracingHttpAsyncClientBuilder.create(httpTracing) .addInterceptorFirst((HttpRequestInterceptor) (request, context) -> request.setHeader(""my-id"", currentTraceContext.get().traceIdString()) ).build(); client.start();  get(client, ""/foo"");  RecordedRequest request = server.takeRequest(); assertThat(request.getHeader(""x-b3-traceId"")) .isEqualTo(request.getHeader(""my-id"")); } "	0	0	0	0	0	1
public final Target makeTarget(final Node node) { final float targetX = 30; final float targetY = 0.5f; final float targetZ = 1; return new Target(targetWidth, targetHeight, targetDepth, targetX, targetY, targetZ, node); } 	0	0	0	0	0	1
"@Override public void onBindViewHolder(ConversationViewHolder conversationViewHolder, int i) { Conversation conversation = mData.get(i); Message message = conversation.getMessage(); String details = """"; User user; Context ctx = conversationViewHolder.itemView.getContext();  if (MessageUtils.isMessageWithPhoto(message)) { details = ""[ "" + ctx.getString(R.string.photo) + "" ] "" + details; } if (MessageUtils.isMessageWithAudio(message)) { details = ""[ "" + ctx.getString(R.string.audio) + "" ] "" + details; } if (MessageUtils.isMessageWithWall(message)) { details = ""[ "" + ctx.getString(R.string.wall_entry) + "" ] "" + details; } if (MessageUtils.isMessageWithReply(message)) { details = ""[ "" + ctx.getString(R.string.reply) + "" ] "" + details; } if (MessageUtils.isMessageWithDoc(message)) { details = ""[ "" + ctx.getString(R.string.document) + "" ] "" + details; } if (MessageUtils.isMessageWithVideo(message)) { details = ""[ "" + ctx.getString(R.string.video) + "" ] "" + details; }  if (ConversationUtils.isConversationAGroupChat(conversation)) {  //            group chat conversationViewHolder.imageAvatar.setImageResource( R.drawable.ic_social_people_outline); conversationViewHolder.textName.setText(message.getTitle());  if (ConversationUtils.isMessageFromMe(message)) { details = details + conversationViewHolder.itemView.getResources() .getString(R.string.me_) + "" "" + message.getBody(); } else { user = mUserProvider.getUser(message.getUser_id()); if (user != null) { details = user.getFirstName() + "": "" + message.getBody(); } else { details = message.getBody(); }  }  conversationViewHolder.mOnlineIndicator.setVisibility(View.GONE); } else { //              regular chat user = mUserProvider.getUser(conversation.getId());  details = details + message.getBody(); if (ConversationUtils.isMessageFromMe(message)) { details = conversationViewHolder.itemView.getResources().getString(R.string.me_) + "" "" + details; }  if (user != null) { conversationViewHolder.mOnlineIndicator.setVisibility( user.getOnline() == 1 ? View.VISIBLE : View.GONE); mImageLoader.displayUserAvatar(user, conversationViewHolder.imageAvatar); conversationViewHolder.textName.setText( user.getFirstName() + "" "" + user.getLastName()); } } if (MessageUtils.isMessageWithSticker(message)) { details = details + ""[ "" + ctx.getString(R.string.sticker) + "" ]""; conversationViewHolder.mImageViewDetails.setVisibility(View.VISIBLE); String url = MessageUtils.getStickerFromMessage(message).getPhoto128(); mImageLoader.displayImage( url, conversationViewHolder.mImageViewDetails); } else { conversationViewHolder.mImageViewDetails.setVisibility(View.GONE); } if (!TextUtils.isEmpty(details)) { conversationViewHolder.textDetails.setText(details); conversationViewHolder.textDetails.setVisibility(View.VISIBLE); } else { conversationViewHolder.textDetails.setVisibility(View.GONE); }  conversationViewHolder.textDate.setText( DateUtils.getRelativeTimeSpanString(message.getDate() * 1000, System.currentTimeMillis(), 0L, DateUtils.FORMAT_ABBREV_ALL)); if (ConversationUtils.isConversationUnread(conversation)) { conversationViewHolder.textName.setTextColor(textColorPrimary); conversationViewHolder.textDetails.setTextColor(textColorPrimary); } else { conversationViewHolder.textName.setTextColor(textColorSecondary); conversationViewHolder.textDetails.setTextColor(textColorSecondary); } conversationViewHolder.itemView.setOnClickListener(this); conversationViewHolder.itemView.setTag(i); } "	0	0	0	0	0	1
public void run() { checkDirectoryTree(sLocalToplevelFilePath); } 	0	0	0	0	0	1
"@Test public void testSimpleStatsNonNumeric() { String spec = ""gender = gender; a = jobcat: mean; b = jobcat:min;  d = jobcat: valid; e = jobcat:median; f = jobcat:stddev; g = jobcat:unique ; h = jobcat:mode""; Dataset a = Summarize.transform(data, spec); Assert.assertEquals(""gender|a|b|d|e|f|g|h|#count|#row -- "" + ""Female|Clerical|?|12|?|?|1|Clerical|12|3, 4, 8, 9, 10, 11, 14, 20, 21, 23, 24, 25 -- "" + ""Male|Clerical|?|13|?|?|2|Clerical|13|1, 2, 5, 6, 7, 12, 13, 15, 16, 17, 18, …"", CannedData.dump(a));  } "	0	0	0	0	0	1
"@Test public void testPercentSimple() { Dataset a = Summarize.transform(data, ""gender=gender; #percent=#count:percent""); Assert.assertEquals(""gender|#percent|#count|#row -- "" + ""Female|48%|12|3, 4, 8, 9, 10, 11, 14, 20, 21, 23, 24, 25 -- "" + ""Male|52%|13|1, 2, 5, 6, 7, 12, 13, 15, 16, 17, 18, …"", CannedData.dump(a)); } "	0	0	0	0	0	1
"@Path(""/courses/{ID:[0-9]*}"") @PUT @RESTPermit (CoursePermissions.UPDATE_COURSE) public Response updateCourse(@PathParam(""ID"") Long id, fi.pyramus.rest.model.Course courseEntity) { Course course = courseController.findCourseById(id); if (course == null) { return Response.status(Status.NOT_FOUND).build(); }  if (course.getArchived()) { return Response.status(Status.NOT_FOUND).build(); }  if (!course.getId().equals(courseEntity.getId())) { return Response.status(Status.BAD_REQUEST).entity(""Cannot change entity id in update request"").build(); }  String name = courseEntity.getName(); String nameExtension = courseEntity.getNameExtension(); CourseState state = courseController.findCourseStateById(courseEntity.getStateId()); CourseType type = courseController.findCourseTypeById(courseEntity.getTypeId());  Subject subject = null; if (courseEntity.getSubjectId() != null) { subject = commonController.findSubjectById(courseEntity.getSubjectId()); if (subject == null) { return Response.status(Status.NOT_FOUND).entity(""specified subject does not exist"").build(); } }  Integer courseNumber = courseEntity.getCourseNumber(); DateTime beginDate = courseEntity.getBeginDate(); DateTime endDate = courseEntity.getEndDate(); Double courseLength = courseEntity.getLength(); EducationalTimeUnit courseLengthTimeUnit = null;  if (courseLength != null) { if (courseEntity.getLengthUnitId() == null) { return Response.status(Status.BAD_REQUEST).entity(""length unit is missing"").build(); }  courseLengthTimeUnit = commonController.findEducationalTimeUnitById(courseEntity.getLengthUnitId()); if (courseLengthTimeUnit == null) { return Response.status(Status.BAD_REQUEST).entity(""length unit is invalid"").build(); } }  Double distanceTeachingDays = courseEntity.getDistanceTeachingDays(); Double localTeachingDays = courseEntity.getLocalTeachingDays(); Double teachingHours = courseEntity.getTeachingHours(); Double planningHours = courseEntity.getPlanningHours(); Double assessingHours = courseEntity.getAssessingHours(); String description = courseEntity.getDescription(); Long maxParticipantCount = courseEntity.getMaxParticipantCount(); Date enrolmentTimeEnd = toDate(courseEntity.getEnrolmentTimeEnd()); User loggedUser = sessionController.getUser();  Course updatedCourse = courseController.updateCourse(course, name, nameExtension, state, type, subject, courseNumber, toDate(beginDate), toDate(endDate), courseLength, courseLengthTimeUnit, distanceTeachingDays, localTeachingDays, teachingHours, planningHours, assessingHours, description, maxParticipantCount, enrolmentTimeEnd, loggedUser);  courseController.updateCourseTags(updatedCourse, courseEntity.getTags() == null ? new ArrayList<String>() : courseEntity.getTags()); courseController.updateCourseVariables(updatedCourse, courseEntity.getVariables() == null ? new HashMap<String, String>() : courseEntity.getVariables());  return Response.ok().entity(objectFactory.createModel(updatedCourse)).build(); } "	0	0	0	0	0	1
"public void handle(ActionResult event) { String name = event.getParameter(""name"", ValueType.STRING).getString(); String bip = "" ""; int port = 0; String lba = "" ""; String commPort = "" ""; int baud = 0; int station = 0; int ferc = 1; boolean isfd = false; //			String bbmdip = "" ""; //			int bbmdport = 0; String bbmdips = "" ""; if (isIP) { bip = event.getParameter(""broadcast ip"", ValueType.STRING).getString(); port = event.getParameter(""port"", ValueType.NUMBER).getNumber().intValue(); lba = event.getParameter(""local bind address"", ValueType.STRING).getString();  isfd = event.getParameter(""register as foreign device in bbmd"", ValueType.BOOL).getBool(); bbmdips = event.getParameter(""bbmd ips"", ValueType.STRING).getString(); //				bbmdip = event.getParameter(""bbmd ip"", new Value("" "")).getString(); //				bbmdport = event.getParameter(""bbmd port"", ValueType.NUMBER).getNumber().intValue();  } else { commPort = event.getParameter(""comm port id"", ValueType.STRING).getString(); baud = event.getParameter(""baud rate"", ValueType.NUMBER).getNumber().intValue(); station = event.getParameter(""this station id"", ValueType.NUMBER).getNumber().intValue(); ferc = event.getParameter(""frame error retry count"", ValueType.NUMBER).getNumber().intValue(); } int lnn = event.getParameter(""local network number"", ValueType.NUMBER).getNumber().intValue(); boolean strict = event.getParameter(""strict device comparisons"", ValueType.BOOL).getBool(); int timeout = event.getParameter(""Timeout"", ValueType.NUMBER).getNumber().intValue(); int segtimeout = event.getParameter(""segment timeout"", ValueType.NUMBER).getNumber().intValue(); int segwin = event.getParameter(""segment window"", ValueType.NUMBER).getNumber().intValue(); int retries = event.getParameter(""retries"", ValueType.NUMBER).getNumber().intValue(); int locdevId = event.getParameter(""local device id"", ValueType.NUMBER).getNumber().intValue(); String locdevName = event.getParameter(""local device name"", ValueType.STRING).getString(); String locdevVend = event.getParameter(""local device vendor"", ValueType.STRING).getString(); long interval = (long) (1000 * event.getParameter(""default polling interval"", ValueType.NUMBER).getNumber().doubleValue());  Node child = node.createChild(name).build(); child.setAttribute(""isIP"", new Value(isIP)); child.setAttribute(""broadcast ip"", new Value(bip)); child.setAttribute(""port"", new Value(port)); child.setAttribute(""local bind address"", new Value(lba)); child.setAttribute(""register as foreign device in bbmd"", new Value(isfd)); child.setAttribute(""bbmd ips"", new Value(bbmdips)); //			child.setAttribute(""bbmd ip"", new Value(bbmdip)); //			child.setAttribute(""bbmd port"", new Value(bbmdport)); child.setAttribute(""comm port id"", new Value(commPort)); child.setAttribute(""baud rate"", new Value(baud)); child.setAttribute(""this station id"", new Value(station)); child.setAttribute(""frame error retry count"", new Value(ferc)); child.setAttribute(""local network number"", new Value(lnn)); child.setAttribute(""strict device comparisons"", new Value(strict)); child.setAttribute(""Timeout"", new Value(timeout)); child.setAttribute(""segment timeout"", new Value(segtimeout)); child.setAttribute(""segment window"", new Value(segwin)); child.setAttribute(""retries"", new Value(retries)); child.setAttribute(""local device id"", new Value(locdevId)); child.setAttribute(""local device name"", new Value(locdevName)); child.setAttribute(""local device vendor"", new Value(locdevVend)); child.setAttribute(""default polling interval"", new Value(interval));  BacnetConn conn = new BacnetConn(getMe(), child); conn.init(); } "	0	0	0	0	0	1
public File getWorkDir() { return mojo.basedir; } 	0	0	0	0	0	1
"@Override public boolean unlock(UnlockContext context) { Session session = null; try { session = BasicDaoFactory.getSystemSession(); boolean restorePreviousVersion = context.isForce(); String contentLanguage = I18NHelper.checkLanguage(context.getLang()); SimpleDocument document = repository.findDocumentById(session, new SimpleDocumentPK( context.getAttachmentId()), contentLanguage); contentLanguage = document.getLanguage(); boolean updateOfficeContentFromWebDav = document.isOpenOfficeCompatible() && !context.isUpload() && context.isWebdav(); if (updateOfficeContentFromWebDav) { // Verifying if the content language handled in WEBDAV repository is the same as the // content language took from the context. if (!contentLanguage.equals(StringUtil .defaultStringIfNotDefined(document.getWebdavContentEditionLanguage(), contentLanguage))) { // The language handled into WEVDAV is different, SimpleDocument must be reloaded with // the right content language. contentLanguage = document.getWebdavContentEditionLanguage(); document = repository .findDocumentById(session, new SimpleDocumentPK(context.getAttachmentId()), contentLanguage); } } if (document.isOpenOfficeCompatible() && !context.isForce() && webdavRepository.isNodeLocked( session, document)) { return false; } if (!context.isForce() && document.isReadOnly() && !document.getEditedBy().equals(context. getUserId())) { return false; }  boolean invokeCallback = false; if (context.isWebdav() || context.isUpload()) { String workerId = document.getEditedBy(); document.setUpdated(new Date()); document.setUpdatedBy(workerId);  invokeCallback = true; } document.setPublicDocument(context.isPublicVersion()); document.setComment(context.getComment()); if (updateOfficeContentFromWebDav) { document.setSize(document.getWebdavContentEditionSize()); } SimpleDocument finalDocument = repository.unlock(session, document, restorePreviousVersion); if (updateOfficeContentFromWebDav) { webdavRepository.updateAttachmentBinaryContent(session, finalDocument); webdavRepository.deleteAttachmentNode(session, finalDocument); repository.duplicateContent(document, finalDocument); } else if (finalDocument.isOpenOfficeCompatible() && (context.isUpload() || !context. isWebdav())) { webdavRepository.deleteAttachmentNode(session, finalDocument); } else { File file = new File(finalDocument.getAttachmentPath()); if (!file.exists() && !context.isForce()) { repository.duplicateContent(document, finalDocument); } } session.save(); if (document.isPublic()) { String userId = context.getUserId(); if (StringUtil.isDefined(userId) && invokeCallback) { CallBackManager callBackManager = CallBackManager.get(); callBackManager.invoke(CallBackManager.ACTION_ATTACHMENT_UPDATE, Integer.parseInt(userId), finalDocument.getInstanceId(), finalDocument.getForeignId()); } } } catch (IOException e) { throw new AttachmentException(""AttachmentService.unlock()"", SilverpeasRuntimeException.ERROR, ""attachment.CHECKIN_FAILED"", e); } catch (RepositoryException e) { throw new AttachmentException(""AttachmentService.unlock()"", SilverpeasRuntimeException.ERROR, ""attachment.CHECKIN_FAILED"", e); } finally { BasicDaoFactory.logout(session); } return true; } "	0	0	0	0	0	1
"protected void logoutAllSessions(boolean forceDisconnect) { log.info(""Logging out all sessions""); if (sessions == null) { log.error(""Attempt to logout all sessions before initialization is complete.""); return; } for (Session session : sessions.values()) { try { session.logout(); } catch (Throwable e) { logError(session.getSessionID(), null, ""Error during logout"", e); } }  if (isLoggedOn()) { if (forceDisconnect) { for (Session session : sessions.values()) { try { if (session.isLoggedOn()) { session.disconnect(""Forcibly disconnecting session"", false); } } catch (Throwable e) { logError(session.getSessionID(), null, ""Error during disconnect"", e); } } } else { waitForLogout(); } } } "	0	0	0	0	0	1
"private void init(View v){ //((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(""Settings"");  c = Calendar.getInstance(); langArr = getActivity().getResources().getStringArray(R.array.spinnerLanguage); currArr = getActivity().getResources().getStringArray(R.array.spinnerCurrency); dateForArr = getActivity().getResources().getStringArray(R.array.spinnerDateFor);  appNotySwitch = (Switch) v.findViewById(R.id.appNotySwitch); appNotySwitch.setOnCheckedChangeListener(this); localMode = (Switch) v.findViewById(R.id.localModeSwitch); localMode.setOnCheckedChangeListener(this); langRow = (TableRow) v.findViewById(R.id.selectLangRow); langRow.setOnClickListener(this); backupRemText = (TextView) v.findViewById(R.id.backupRemText); langText = (TextView) v.findViewById(R.id.statusLang); dateForRow = (TableRow) v.findViewById(R.id.selectDateRow); dateForRow.setOnClickListener(this); dateForText = (TextView) v.findViewById(R.id.statusDateFor); currRow = (TableRow) v.findViewById(R.id.selectCurrRow); currRow.setOnClickListener(this); currText = (TextView) v.findViewById(R.id.statusCurr); statusIcon = (Switch) v.findViewById(R.id.statusIconSwitch); statusIcon.setOnCheckedChangeListener(this); dailyRemRow = (TableRow) v.findViewById(R.id.remTimeRow); dailyRemRow.setOnClickListener(this); backupRemRow = (TableRow) v.findViewById(R.id.backupRemRow); backupRemRow.setOnClickListener(this); dailyRemText = (TextView) v.findViewById(R.id.startRem); autoSync = (Switch) v.findViewById(R.id.autoSyncSwitch); autoSync.setOnCheckedChangeListener(this); autoSync.setOnCheckedChangeListener(this); backupLocRow = (TableRow) v.findViewById(R.id.backupLocRow); backupLocRow.setOnClickListener(this); backupLocText = (TextView) v.findViewById(R.id.statusBackUpLoc); appPassRow = (TableRow) v.findViewById(R.id.appPasswordRow); appPassRow.setOnClickListener(this); appPwText = (TextView) v.findViewById(R.id.statusAppPw); signOutBtn = (Button) v.findViewById(R.id.signOutBtn); signOutBtn.setOnClickListener(this); feedBackRow = (TableRow) v.findViewById(R.id.feedbackRow); feedBackRow.setOnClickListener(this); rateRow = (TableRow) v.findViewById(R.id.rateRow); rateRow.setOnClickListener(this);  langBuilder = new AlertDialog.Builder(getContext()); langBuilder.setTitle(""Language""); langBuilder.setSingleChoiceItems(R.array.spinnerLanguage, 1, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { preferedLang = langArr[i]; storePWSharedPref(); langText.setText(langArr[i]); dialogInterface.dismiss(); } }); currBuilder = new AlertDialog.Builder(getContext()); currBuilder.setTitle(""Currency""); currBuilder.setSingleChoiceItems(R.array.spinnerCurrency, 0, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { preferedCurr = currArr[i]; storePWSharedPref(); currText.setText(currArr[i]); dialogInterface.dismiss(); } }); dateForBuilder = new AlertDialog.Builder(getContext()); dateForBuilder.setTitle(""Date format""); dateForBuilder.setSingleChoiceItems(R.array.spinnerDateFor, 0, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { preferedDateFor = dateForArr[i]; storePWSharedPref(); dateForText.setText(dateForArr[i]); dialogInterface.dismiss(); } });  retrievePWSharedPref();  } "	0	0	0	0	0	1
public Request getRequest() { return request; } 	0	0	0	0	0	1
public boolean isActualDefined() { return (this.actual != UNDEFINED); } 	0	0	0	0	0	1
@Override protected void protectedRun() { //noinspection Convert2MethodRef just(bluetoothGattAtomicReference.get()) .filter(bluetoothGatt -> bluetoothGatt != null) .flatMap(bluetoothGatt -> isDisconnected(bluetoothGatt) ? just(bluetoothGatt) : disconnect(bluetoothGatt)) .doOnTerminate(() -> releaseRadio()) .observeOn(AndroidSchedulers.mainThread()) .subscribe( bluetoothGatt -> bluetoothGatt.close(), throwable -> onError(throwable), () -> onCompleted() ); } 	0	0	0	0	0	1
"private void addEditableFlowSegment(final Element flowSegment, final FlowSegmentInfo selectedSegment, final int insertIndex) { final Button deleteSegmentBtn = new Button(flowDetailsPane, SWT.PUSH); deleteSegmentBtn.setText(""Delete""); deleteSegmentBtn.addSelectionListener(new SelectionAdapter() { @Override public void widgetSelected(SelectionEvent e) { // Remove the segment EcoreUtil.remove(flowSegment);  // Refresh details updateFlowDetails(currentFlow); } });  final ComboViewer cmb = new ComboViewer(flowDetailsPane, SWT.DROP_DOWN | SWT.READ_ONLY); final GridData cmbGridData = new GridData(GridData.FILL_HORIZONTAL); cmbGridData.grabExcessHorizontalSpace = true; cmbGridData.minimumWidth = 150; cmb.getCombo().setLayoutData(cmbGridData); cmb.addSelectionChangedListener(new ISelectionChangedListener() { @Override public void selectionChanged(final SelectionChangedEvent event) { final StructuredSelection selection = (StructuredSelection)event.getSelection(); final FlowSegmentInfo newSegmentInfo = (FlowSegmentInfo)selection.getFirstElement();  if(flowSegment instanceof EndToEndFlowSegment) { final EndToEndFlowSegment fs = (EndToEndFlowSegment)flowSegment; if(newSegmentInfo == null) { fs.setContext(null); fs.setFlowElement(null); } else { fs.setContext(newSegmentInfo.context); fs.setFlowElement((EndToEndFlowElement)newSegmentInfo.flowElement); } } else if(flowSegment instanceof FlowSegment) { final FlowSegment fs = (FlowSegment)flowSegment; if(newSegmentInfo == null) { fs.setContext(null); fs.setFlowElement(null); } else { fs.setContext(newSegmentInfo.context); fs.setFlowElement((FlowElement)newSegmentInfo.flowElement); } }  refreshWidgetEnabledStates(); } }); cmb.setContentProvider(new ArrayContentProvider()); cmb.setLabelProvider(flowSegmentInfoLabelProvider); cmb.setInput(potentialFlowSegments); cmb.setSelection(new StructuredSelection(selectedSegment));  if(flowSegment instanceof EndToEndFlowSegment) { cmb.setFilters(new ViewerFilter[]{endToEndFlowElementFilter}); } else if(flowSegment instanceof FlowSegment) { cmb.setFilters(new ViewerFilter[]{flowElementFilter}); }  addInsertButton(insertIndex); } "	0	0	0	0	0	1
"public Result exportSerp(Context context, @PathParam(""searchId"") Integer searchId, @Param(""date"") String pdate ){ GoogleSerp serp=null; LocalDate date=null; try {date = LocalDate.parse(pdate);}catch(Exception ex){} if(date != null){ List<Run> runs = baseDB.run.findByDay(Module.GOOGLE, date); if(!runs.isEmpty()){ GoogleSearch search = getSearch(context, searchId); if(search != null){ serp = googleDB.serp.get(runs.get(0).getId(), search.getId()); } } }  if(serp == null){ return Results.ok().text().renderRaw(""SERP not found""); }  boolean exportRank = context.getParameter(""rank"") != null; boolean exportD1 = context.getParameter(""d1"") != null; boolean exportD7 = context.getParameter(""d7"") != null; boolean exportD30 = context.getParameter(""d30"") != null; boolean exportD90 = context.getParameter(""d90"") != null;  int position = 0; StringBuilder builder = new StringBuilder(); for (GoogleSerpEntry entry : serp.getEntries()) { ++position; if(exportRank){ builder.append(position).append("",""); } builder.append(entry.getUrl()).append("",""); if(exportD1){ Short rank = entry.getMap().getOrDefault((short)1, (short)GoogleRank.UNRANKED); builder.append(rank != GoogleRank.UNRANKED ? rank.intValue() : """").append("",""); } if(exportD7){ Short rank = entry.getMap().getOrDefault((short)7, (short)GoogleRank.UNRANKED); builder.append(rank != GoogleRank.UNRANKED ? rank.intValue() : """").append("",""); } if(exportD30){ Short rank = entry.getMap().getOrDefault((short)30, (short)GoogleRank.UNRANKED); builder.append(rank != GoogleRank.UNRANKED ? rank.intValue() : """").append("",""); } if(exportD90){ Short rank = entry.getMap().getOrDefault((short)90, (short)GoogleRank.UNRANKED); builder.append(rank != GoogleRank.UNRANKED ? rank.intValue() : """").append("",""); } if(builder.length() > 0){ builder.setCharAt(builder.length()-1, '\n'); } }  return Results.text() .addHeader(""Content-Disposition"", ""attachment; filename=\"""" + serp.getRunDay().toLocalDate() + "".csv\"""") .renderRaw(builder.toString()); } "	0	0	0	0	0	1
public synchronized ArrayList<Integer> getPlayerId() { return this.playerId; } 	0	0	0	0	0	1
public synchronized ArrayList<SudokuServerThread> getThreads() { return this.connections; } 	0	0	0	0	0	1
"public SolrDocumentList query(String keywords, int tenantId, Map<String, String> fields) throws SolrException{ try { SolrQuery query = new SolrQuery(keywords); query.setRows(Integer.MAX_VALUE); //Solr does not allow to search with special characters , //Therefore this fix allow to contain ""-"" in super tenant id. if(tenantId== MultitenantConstants.SUPER_TENANT_ID){ query.addFilterQuery(IndexingConstants.FIELD_TENANT_ID + "":"" + ""\\"" + tenantId); }else { query.addFilterQuery(IndexingConstants.FIELD_TENANT_ID + "":"" + tenantId); } //This is for fixing  REGISTRY-1695, This is temporary solution until //the default security polices also stored in Governance registry. if (fields.size() > 0 && fields.get(IndexingConstants.FIELD_MEDIA_TYPE).equals( RegistryConstants.POLICY_MEDIA_TYPE)) { query.addFilterQuery(IndexingConstants.FIELD_ID + "":"" + RegistryConstants.GOVERNANCE_REGISTRY_BASE_PATH + ""*""); } if (fields.size() > 0) { for (Map.Entry<String, String> e : fields.entrySet()) { //This is the fix REGISTRY-1970 before all the special characters where escaped sing // 'SolrQueryParser.escape()' but because of that wildcard functionallity did not work poperly // hence only ecaping ':' and ' '; query.addFilterQuery(e.getKey() + ""_s:"" + e.getValue().replaceAll("":"",""\\\\\\:"").replaceAll("" "", ""\\\\\\ "")); } } QueryResponse queryresponse; MessageContext messageContext = MessageContext.getCurrentMessageContext(); if ((messageContext != null && PaginationUtils .isPaginationHeadersExist(messageContext)) || PaginationContext.getInstance() != null) { try { PaginationContext paginationContext; if (messageContext != null) { paginationContext = PaginationUtils.initPaginationContext(messageContext); } else { paginationContext = PaginationContext.getInstance(); } // TODO: Proper mechanism once authroizations are fixed - senaka //                    query.setStart(paginationContext.getStart()); //                    query.setRows(paginationContext.getCount()); String sortBy = paginationContext.getSortBy(); if (sortBy.length() > 0) { query.setSort(sortBy + ""_s"", paginationContext.getSortOrder().equals(""ASC"") ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc); } queryresponse = server.query(query); if(log.isDebugEnabled()) { log.debug(""Solr index queried query: "" + query); } // TODO: Proper mechanism once authroizations are fixed - senaka //                    PaginationUtils.setRowCount(messageContext, //                            Long.toString(queryresponse.getResults().getNumFound())); } finally { if(messageContext!=null){ PaginationContext.destroy(); } } } else { queryresponse = server.query(query); if(log.isDebugEnabled()) { log.debug(""Solr index queried query: "" + query); } }  return queryresponse.getResults(); } catch (SolrServerException e) { //throw unchecked exception: SolrException, this will throw when there is an invalid search query or error in connection. throw new SolrException(ErrorCode.SERVER_ERROR, ""Failure at query "" + keywords, e); } } "	0	0	0	0	0	1
"@Test public void getQuery1() throws Exception { mvc.perform(MockMvcRequestBuilders.get(""/query1/"").accept(MediaType.APPLICATION_JSON)) .andExpect(status().isOk()) .andExpect(content().string(equalTo(""Query 1 result""))); } "	0	0	0	0	0	1
"private EList<Constraint> ibexToDemocles(IbexPattern ibexPattern, PatternBody body, Map<TGGRuleNode, EMFVariable> nodeToVar, EList<Variable> parameters) { // Constraints EList<Constraint> constraints = body.getConstraints();  // Constants EList<Constant> constants = body.getConstants();  // Signature elements for (TGGRuleElement element : ibexPattern.getSignatureElements()) { if (!nodeToVar.containsKey(element)) { if (element instanceof TGGRuleNode) { TGGRuleNode node = (TGGRuleNode) element; EMFVariable var = emfTypeFactory.createEMFVariable(); var.setName(node.getName()); var.setEClassifier(node.getType()); nodeToVar.put(node, var);  dAttrHelper.extractConstants(node, var); dAttrHelper.extractAttributeVariables(node, var); } } parameters.add(nodeToVar.get(element)); }  // All other nodes EList<Variable> locals = body.getLocalVariables(); for (TGGRuleNode node : ibexPattern.getBodyNodes()) { if (!nodeToVar.containsKey(node)) { EMFVariable var = emfTypeFactory.createEMFVariable(); var.setName(node.getName()); var.setEClassifier(node.getType()); nodeToVar.put(node, var); locals.add(nodeToVar.get(node));  dAttrHelper.extractConstants(node, var); dAttrHelper.extractAttributeVariables(node, var); } }  dAttrHelper.resolveAttributeVariables(nodeToVar.values());  // Attributes as constraints constraints.addAll(dAttrHelper.getAttributes());  // Inplace Attribute constraints as constraints constraints.addAll(dAttrHelper.getRelationalConstraints());  constants.addAll(dAttrHelper.getConstants());  // add new variables as nodes locals.addAll(dAttrHelper.getEMFVariables());  // reset attribute helper. Do it here before the recursive call of this // method dAttrHelper.clearAll();  // Edges as constraints if (!(ibexPattern instanceof MarkedPattern && ((MarkedPattern) ibexPattern).isLocal())) for (TGGRuleEdge edge : ibexPattern.getBodyEdges()) { Reference ref = emfTypeFactory.createReference(); ref.setEModelElement(edge.getType());  ConstraintParameter from = factory.createConstraintParameter(); from.setReference(nodeToVar.get(edge.getSrcNode())); ref.getParameters().add(from);  ConstraintParameter to = factory.createConstraintParameter(); to.setReference(nodeToVar.get(edge.getTrgNode())); ref.getParameters().add(to);  constraints.add(ref); }  // Handle Corrs for (TGGRuleCorr corr : ibexPattern.getBodyCorrNodes()) { Reference srcRef = emfTypeFactory.createReference(); srcRef.setEModelElement((EReference) corr.getType().getEStructuralFeature(""source""));  ConstraintParameter from = factory.createConstraintParameter(); from.setReference(nodeToVar.get(corr)); srcRef.getParameters().add(from);  ConstraintParameter to = factory.createConstraintParameter(); to.setReference(nodeToVar.get(corr.getSource())); srcRef.getParameters().add(to);  constraints.add(srcRef);  Reference trgRef = emfTypeFactory.createReference(); trgRef.setEModelElement((EReference) corr.getType().getEStructuralFeature(""target""));  to = factory.createConstraintParameter(); to.setReference(nodeToVar.get(corr)); trgRef.getParameters().add(to);  from = factory.createConstraintParameter(); from.setReference(nodeToVar.get(corr.getTarget())); trgRef.getParameters().add(from);  constraints.add(trgRef); }  // Force injective matches through unequals-constraints if (ibexPattern instanceof RulePartPattern) forceInjectiveMatchesForPattern((RulePartPattern)ibexPattern, body, nodeToVar);   return constraints; } "	0	0	0	0	0	1
"@Test public void createCategories_WithSomeValidCategories_ShouldCreateCategoriesAndTriggerCallBack() { // Draft with invalid key final CategoryDraft categoryDraft1 = CategoryDraftBuilder .of(LocalizedString.of(Locale.ENGLISH, ""classic furniture1""), LocalizedString.of(Locale.ENGLISH, ""classic-furniture1"", Locale.GERMAN, ""klassische-moebel1"")) .key(""1"") .build();  final CategoryDraft categoryDraft2 = CategoryDraftBuilder .of(LocalizedString.of(Locale.ENGLISH, ""classic furniture2""), LocalizedString.of(Locale.ENGLISH, ""classic-furniture2"", Locale.GERMAN, ""klassische-moebel2"")) .key(""key2"") .build();  final Set<CategoryDraft> categoryDrafts = new HashSet<>(); categoryDrafts.add(categoryDraft1); categoryDrafts.add(categoryDraft2);  final Set<Category> createdCategories = categoryService.createCategories(categoryDrafts) .toCompletableFuture().join();  assertThat(errorCallBackExceptions).hasSize(1); assertThat(errorCallBackMessages).hasSize(1); assertThat(errorCallBackMessages.get(0)).contains(""Invalid category key '1'. Category keys may only contain "" + ""alphanumeric characters, underscores and hyphens and must have a maximum length of 256 characters.""); assertThat(createdCategories).hasSize(1); } "	0	0	0	0	0	1
private void saveGuiToExif() { MediaUtil.copy(mData, mActivityData, true, true); } 	0	0	0	0	0	1
@Override public boolean isLoggedIn() { return currentFacebookAccessToken != null; } 	0	0	0	0	0	1
protected void submitProcess(Map<String, String> overlay) throws IOException, FalconCLIException { String tmpFile = TestContext.overlayParametersOverTemplate(PROCESS_TEMPLATE, overlay); APIResult result = submit(EntityType.PROCESS, tmpFile); assertStatus(result); } 	0	0	0	0	0	1
protected void submitFeeds(Map<String, String> overlay) throws IOException, FalconCLIException { String tmpFile = TestContext.overlayParametersOverTemplate(UnitTestContext.FEED_TEMPLATE1, overlay); APIResult result = falconUnitClient.submit(EntityType.FEED.name(), tmpFile, null); Assert.assertEquals(result.getStatus(), APIResult.Status.SUCCEEDED); tmpFile = TestContext.overlayParametersOverTemplate(UnitTestContext.FEED_TEMPLATE2, overlay); result = falconUnitClient.submit(EntityType.FEED.name(), tmpFile, null); Assert.assertEquals(result.getStatus(), APIResult.Status.SUCCEEDED); } 	0	0	0	0	0	1
@Test public void testRetention() throws IOException, FalconCLIException, FalconException, ParseException, InterruptedException { // submit with default props submitCluster(); // submitting feeds APIResult result = submit(EntityType.FEED, getAbsolutePath(INPUT_FEED)); assertStatus(result); createData(INPUT_FEED_NAME, CLUSTER_NAME, SCHEDULE_TIME, INPUT_FILE_NAME); String inPath = getFeedPathForTS(CLUSTER_NAME, INPUT_FEED_NAME, SCHEDULE_TIME); Assert.assertTrue(fs.exists(new Path(inPath))); result = schedule(EntityType.FEED, INPUT_FEED_NAME, CLUSTER_NAME); Assert.assertEquals(APIResult.Status.SUCCEEDED, result.getStatus()); waitFor(WAIT_TIME, new Predicate() { public boolean evaluate() throws Exception { InstancesResult.WorkflowStatus status = getRetentionStatus(INPUT_FEED_NAME, CLUSTER_NAME); return InstancesResult.WorkflowStatus.SUCCEEDED.equals(status); } }); InstancesResult.WorkflowStatus status = getRetentionStatus(INPUT_FEED_NAME, CLUSTER_NAME); Assert.assertEquals(InstancesResult.WorkflowStatus.SUCCEEDED, status); Assert.assertFalse(fs.exists(new Path(inPath))); } 	0	0	0	0	0	1
"public void testVersion() throws FalconException, IOException, FalconCLIException { String json = falconUnitClient.getVersion(null); String buildVersion = BuildProperties.get().getProperty(""build.version""); String deployMode = DeploymentProperties.get().getProperty(""deploy.mode""); Assert.assertTrue(Pattern.matches( "".*\\{\\s*\""key\""\\s*:\\s*\""Version\""\\s*,\\s*\""value\""\\s*:\\s*\"""" + buildVersion + ""\""\\s*}.*"", json), ""No build.version found in /api/admin/version""); Assert.assertTrue(Pattern.matches( "".*\\{\\s*\""key\""\\s*:\\s*\""Mode\""\\s*,\\s*\""value\""\\s*:\\s*\"""" + deployMode + ""\""\\s*}.*"", json), ""No deploy.mode found in /api/admin/version""); } "	0	0	0	0	0	1
public boolean submitCluster() throws IOException, FalconCLIException { return submitCluster(DEFAULT_COLO, DEFAULT_CLUSTER, null); } 	0	0	0	0	0	1
"private String[] createCleanNCName(final Resource res) { // implement check for NCName compliance and remove bad values String name = res.getName(); String origName = name; // clean rest of string using Constants.UNICODE_REPLACER char[] foiNameChars = name.toCharArray(); for (int i = 0; i < foiNameChars.length; i++) { char c = foiNameChars[i]; if (!NcNameResolver.isNCNameChar(c)) { foiNameChars[i] = Configuration.UNICODE_REPLACER; } } name = String.valueOf(foiNameChars); // check if name is only containing ""_"" Matcher matcher = Configuration.UNICODE_ONLY_REPLACER_LEFT_PATTERN.matcher(name); if (matcher.matches()) { // if yes -> change to ""className"" + res.getUri().hashCode() name = res.getClass().getSimpleName().toLowerCase() + res.getUri().hashCode(); } String[] result = { name, origName }; return result; } "	0	0	0	0	0	1
"public static ArrayList<Groupe> getAll() throws SQLException { Connection connection = Database.getDbCon().conn;  String query = ""SELECT * FROM ""+ groupe_table+ "" g "" + ""JOIN ""+classe_table+"" c ON c.id = g.classe_id "" + ""JOIN ""+etudiant_table+"" e ON e.groupe_id = g.id"";  ArrayList<Groupe> groupeList = new ArrayList<Groupe>(); PreparedStatement stmt = connection.prepareStatement(query); ResultSet rs = stmt.executeQuery();  Groupe last_groupe = null; while(rs.next()) { int groupe_id = rs.getInt(""g.id""); if(last_groupe == null || last_groupe.getId() != groupe_id) { if(last_groupe != null) groupeList.add(last_groupe); last_groupe = new Groupe(); last_groupe.setId(groupe_id); last_groupe.setLibelle(rs.getString(""g.libelle""));  Classe classe = new Classe(); classe.setId(rs.getInt(""c.id"")); classe.setLibelle(rs.getString(""c.libelle"")); last_groupe.setClasse(classe); } Etudiant etudiant = new Etudiant(); etudiant.setId(rs.getInt(""e.id"")); etudiant.setNom(rs.getString(""e.nom"")); etudiant.setPrenom(rs.getString(""e.prenom"")); etudiant.setEmail(rs.getString(""e.email"")); etudiant.setNum_etu(rs.getString(""e.num_etu""));  last_groupe.addEtudiant(etudiant);  if(rs.isLast()){ groupeList.add(last_groupe); } }  return groupeList; } "	0	0	0	0	0	1
"private void handleFailedEvaluatorInCLR(final FailedEvaluator eval, final boolean isRestartFailed) { final String message = ""CLR FailedEvaluator handler set, handling things with CLR handler.""; LOG.log(Level.INFO, message); final FailedEvaluatorBridge failedEvaluatorBridge = new FailedEvaluatorBridge(eval, JobDriver.this.evaluatorRequestor, JobDriver.this.isRestarted, loggingScopeFactory); if (isRestartFailed) { NativeInterop.clrSystemDriverRestartFailedEvaluatorHandlerOnNext( JobDriver.this.handlerManager.getDriverRestartFailedEvaluatorHandler(), failedEvaluatorBridge, JobDriver.this.interopLogger); } else { NativeInterop.clrSystemFailedEvaluatorHandlerOnNext( JobDriver.this.handlerManager.getFailedEvaluatorHandler(), failedEvaluatorBridge, JobDriver.this.interopLogger); }  final int additionalRequestedEvaluatorNumber = failedEvaluatorBridge.getNewlyRequestedEvaluatorNumber(); if (additionalRequestedEvaluatorNumber > 0) { LOG.log(Level.INFO, ""number of additional evaluators requested after evaluator failure: "" + additionalRequestedEvaluatorNumber); }  JobDriver.this.jobMessageObserver.sendMessageToClient(message.getBytes(StandardCharsets.UTF_8)); } "	0	0	0	0	0	1
@Override public void onFailure(Call call, IOException e) { // some connection error callback.isNotValid(); } 	0	0	0	0	0	1
@Test public void mistakenTranslationShouldBeAskedUpToTwoTimesAfterLevel1PromotionPeriodHasPassedButLevel2NotYet() { Clock clock = mock(Clock.class); when(clock.getTime()).thenReturn(LEVEL_2.end()); Reminder reminder = new Reminder(clock); TranslationMetadata metadata = new TranslationMetadata(ANY_DIFFICULTY, asList( new DifficultyAtTime(Difficulty.DIFFICULT, LEVEL_1.begin()), new DifficultyAtTime(Difficulty.EASY, LEVEL_1.begin()), new DifficultyAtTime(Difficulty.EASY, LEVEL_1.begin()), new DifficultyAtTime(Difficulty.EASY, LEVEL_1.begin()), new DifficultyAtTime(Difficulty.EASY, LEVEL_1.end()) ));  boolean shouldRemind = reminder.shouldBeReminded(metadata);  assertThat(shouldRemind, is(true)); } 	0	0	0	0	0	1
void setProcessedResponse(boolean processedResponse) { this.processedResponse = processedResponse; } 	0	0	0	0	0	1
"@Override public void keyPressed(final KeyEvent pE) { final AutoRotationController lAutoRotateController = mClearVolumeRenderer.getAutoRotateController();  final boolean lIsShiftPressed = pE.isShiftDown(); final boolean lIsCtrlPressed = pE.isControlDown(); final boolean lIsMetaPressed = pE.isMetaDown(); final float lTranslationSpeed = lIsShiftPressed	? 0.1f : (lIsMetaPressed	? 0.001f : 0.01f); final float lRotationSpeed = (float) (2 * PI * (lIsShiftPressed	? 0.025f : (lIsMetaPressed	? 0.0005f : 0.005f))); final float lAutoRotationSpeed = 0.01f * lRotationSpeed;  switch (pE.getKeyCode()) { case KeyEvent.VK_SPACE: mToggleRotationTranslation = !mToggleRotationTranslation; break; case KeyEvent.VK_DOWN: if (mToggleRotationTranslation) {  if (lAutoRotateController.isActive()) lAutoRotateController.addRotationSpeedX(-lAutoRotationSpeed); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleX(-lRotationSpeed) .invert();  }  else mClearVolumeRenderer.addTranslationY(-lTranslationSpeed); mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters(); break; case KeyEvent.VK_UP: if (mToggleRotationTranslation) { if (lAutoRotateController.isActive()) lAutoRotateController.addRotationSpeedX(+lAutoRotationSpeed); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleX(+lRotationSpeed) .invert();  } else mClearVolumeRenderer.addTranslationY(+lTranslationSpeed);  mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters();  break;  case KeyEvent.VK_LEFT: if (mToggleRotationTranslation) { if (lAutoRotateController.isActive()) lAutoRotateController.addRotationSpeedY(-lAutoRotationSpeed); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleY(+lRotationSpeed) .invert();  } else mClearVolumeRenderer.addTranslationX(-lTranslationSpeed); mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters();  break; case KeyEvent.VK_RIGHT: if (mToggleRotationTranslation) { if (lAutoRotateController.isActive()) lAutoRotateController.addRotationSpeedY(+lAutoRotationSpeed); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleY(-lRotationSpeed) .invert();  } else mClearVolumeRenderer.addTranslationX(+lTranslationSpeed);  mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters();  break;  case KeyEvent.VK_PAGE_DOWN: if (mToggleRotationTranslation) { if (lAutoRotateController.isActive()) lAutoRotateController.addRotationSpeedZ(-lAutoRotationSpeed); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleZ(+lRotationSpeed) .invert();  } else mClearVolumeRenderer.addTranslationZ(-lTranslationSpeed / mClearVolumeRenderer.getFOV());  mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters();  break; case KeyEvent.VK_PAGE_UP: if (mToggleRotationTranslation) { if (lAutoRotateController.isActive()) lAutoRotateController.addRotationSpeedZ(+lAutoRotationSpeed); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleZ(-lRotationSpeed) .invert();  } else mClearVolumeRenderer.addTranslationZ(+lTranslationSpeed / mClearVolumeRenderer.getFOV());  mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters();  break; case KeyEvent.VK_ESCAPE: if (mClearVolumeRenderer.isFullScreen()) mClearVolumeRenderer.toggleFullScreen(); break;  case KeyEvent.VK_S: mClearVolumeRenderer.toggleRecording();  case KeyEvent.VK_R: if (lAutoRotateController.isActive() && !lAutoRotateController.isRotating()) { lAutoRotateController.setActive(false); } if (lAutoRotateController.isActive()) { lAutoRotateController.stop(); } else { mClearVolumeRenderer.resetBrightnessAndGammaAndTransferFunctionRanges(); mClearVolumeRenderer.resetRotationTranslation(); } break;  case KeyEvent.VK_A: lAutoRotateController.setActive(!lAutoRotateController.isActive()); break;  case KeyEvent.VK_C: mClearVolumeRenderer.requestVolumeCapture(); break;  case KeyEvent.VK_M: mClearVolumeRenderer.toggleAdaptiveLOD(); break;  case KeyEvent.VK_O: if (mClearVolumeRenderer.getFOV() == ClearVolumeRendererBase.cDefaultFOV) mClearVolumeRenderer.setFOV(ClearVolumeRendererBase.cOrthoLikeFOV); else mClearVolumeRenderer.setFOV(ClearVolumeRendererBase.cDefaultFOV); break;  case KeyEvent.VK_I: mClearVolumeRenderer.cycleRenderAlgorithm(); break;  }  if (pE.getKeyCode() >= KeyEvent.VK_0 && pE.getKeyCode() <= KeyEvent.VK_9) { int lRenderLayerIndex = pE.getKeyCode() - KeyEvent.VK_0;  if (lRenderLayerIndex == 0) lRenderLayerIndex = 10; else lRenderLayerIndex--;  if (lRenderLayerIndex < mClearVolumeRenderer.getNumberOfRenderLayers()) { if (lIsShiftPressed) mClearVolumeRenderer.setLayerVisible(	lRenderLayerIndex, !mClearVolumeRenderer.isLayerVisible(lRenderLayerIndex)); else mClearVolumeRenderer.setCurrentRenderLayer(lRenderLayerIndex); } }  processOverlayRelatedEvents(pE);  } "	0	0	0	0	0	1
@Override public RealmResults<Event> getEventByDate(Date date) { java.util.Calendar calendar = java.util.Calendar.getInstance(); calendar.setTime(date); calendar.add(java.util.Calendar.HOUR, 23); Date toDate = calendar.getTime(); return mRealm.where(Event.class).between(START_DATE_FIELD, date, toDate) .findAll(); } 	0	0	0	0	0	1
"public static void updateUserProfile(){ // This creates a profile for user if one does not already exist or updates it. try { JSONObject props = new JSONObject(); props.put(""version"", CellRpg.VERSION); props.put(""OS"", System.getProperty(""os.name"") + ""v"" + System.getProperty(""os.version"")); props.put(""JRE"", System.getProperty(""java.version"")); props.put(""time zone"", Calendar.getInstance().getTimeZone().getID());  JSONObject update = messageBuilder.set(UserIdentifier.getId(), props);  // Send the update to mixpanel try { mixpanel.sendMessage(update); } catch (IOException ex) { logger.error(""message deliver error:"" + ex.getMessage()); } }catch(JSONException ex){ logger.error(""analytics JSON err: "" + ex.getMessage()); } } "	0	0	0	0	0	1
@NullSafe public static long size(final File path) { return (isExisting(path) ? path.length() : 0l); } 	0	0	0	0	0	1
@Override public synchronized Optional<AuthorizationConfig> findOne(String var1) { return Optional.ofNullable(repository.findOne(var1)); } 	0	0	0	0	0	1
@Override public String getUrlForInsertion() { return getMediumSizeUrl(); } 	0	0	0	0	0	1
"public void selectDrawerItem(MenuItem menuItem) { switch (menuItem.getItemId()) { case R.id.nav_browser: //Check if the device is online if (!isOnline()) { Toast toast = Toast.makeText(this, R.string.no_connection, Toast.LENGTH_SHORT); toast.show(); MenuItem m = sNavView.getMenu().findItem(R.id.nav_favorites); m.setChecked(true); sDrawer.closeDrawers(); return; } //showComicBrowserFragment showFragment(""pref_random_comics"", menuItem.getItemId(), ""Comics"", ""browser"", ""favorites""); break; case R.id.nav_favorites: //Check if there are any Favorites if (Favorites.getFavoriteList(this).length == 0) { Toast toast = Toast.makeText(this, R.string.no_favorites, Toast.LENGTH_SHORT); toast.show(); MenuItem m = sNavView.getMenu().findItem(R.id.nav_browser); m.setChecked(true); sDrawer.closeDrawers(); return; } //showFavoritesFragment showFragment(""pref_random_favorites"", menuItem.getItemId(), ""Favorites"", ""favorites"", ""browser""); break;  case R.id.nav_settings: sDrawer.closeDrawer(sNavView); //Add delay so that the Drawer is closed before the Settings Activity is launched new Handler().postDelayed(new Runnable() { @Override public void run() { Intent i = new Intent(MainActivity.this, SettingsActivity.class); startActivity(i); } }, 200); return;  case R.id.nav_feedback: sDrawer.closeDrawer(sNavView); new Handler().postDelayed(new Runnable() { @Override public void run() { Intent i = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(""mailto"", ""easyxkcd@gmail.com"", null)); startActivity(Intent.createChooser(i, getResources().getString(R.string.nav_feedback_send))); } }, 200); return;  case R.id.nav_about: sDrawer.closeDrawer(sNavView); new Handler().postDelayed(new Runnable() { @Override public void run() { Intent i = new Intent(MainActivity.this, AboutActivity.class); startActivity(i); } }, 250); return; } menuItem.setChecked(true); sDrawer.closeDrawers(); sCurrentFragment = menuItem.getItemId(); invalidateOptionsMenu(); } "	0	0	0	0	0	1
private LinearLayout createContentView() throws ServiceNotUpException { ContentView view = new ContentView(this); ControlBar bar = createControlBar(); view.addView(bar, layout);   TextView urlLabel = new TextView(this); urlLabel.setText(osmApi.getUrlStart()); view.addView(urlLabel, layout); AppTheme.themify(urlLabel);  tagEditor = new TagEditor(this, osmApi.getBaseDirectory()); view.addView(tagEditor, layout);   TextView postLabel = new TextView(this); postLabel.setText(osmApi.getUrlEnd()); view.addView(postLabel, layout); AppTheme.themify(postLabel);  list = new NodeListView(getServiceContext(),SOLID_KEY, INFO_ID_FILEVIEW);   view.addView(list,layout);  return view; } 	0	0	0	0	0	1
public static FiberSocketChannel open() throws IOException { return new FiberSocketChannel(AsynchronousSocketChannel.open(FiberAsyncIO.defaultGroup())); } 	0	0	0	0	0	1
"@Override public View getView(int position, View convertView, ViewGroup parent) { View row = convertView;  ItemHolder itemHolder; if (row == null) { LayoutInflater layoutInflater = LayoutInflater.from(context); row = layoutInflater.inflate(layoutResourceId, parent, false); itemHolder = new ItemHolder(); itemHolder.itemImage = (ImageView) row.findViewById(R.id.inventoryItem); row.setTag(itemHolder); } else { itemHolder = (ItemHolder) row.getTag(); }  Item item = items.get(position); Log.d(""INVENTORYADAPTER"", String.valueOf(item.getId()));  int itemID = (int) item.getId();  switch (itemID) { case 1: itemHolder.itemImage.setBackgroundResource(R.drawable.duct_tape); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; case 5: itemHolder.itemImage.setBackgroundResource(R.drawable.key); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; case 7: itemHolder.itemImage.setBackgroundResource(R.drawable.hour_hand); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; case 8: itemHolder.itemImage.setBackgroundResource(R.drawable.minute_hand); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; case 9: itemHolder.itemImage.setBackgroundResource(R.drawable.lever_handle); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; case 11: itemHolder.itemImage.setBackgroundResource(R.drawable.bucket); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; case 12: itemHolder.itemImage.setBackgroundResource(R.drawable.bucket_filled); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; case 13: itemHolder.itemImage.setBackgroundResource(R.drawable.master_key); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; default: break; }  return row; } "	0	0	0	0	0	1
public static FloatInput normalizeFloat(final FloatInput base, final float zero, float one) { Mixing.checkNull(base); return createDispatch(normalizeFloat((FloatInputPoll) base, zero, one), FloatMixing.onUpdate(base)); } 	0	0	0	0	0	1
@Override public void onClick(View v) { if(holder.checkBox.isChecked() || PickerManager.getInstance().shouldAdd()) { holder.checkBox.setChecked(!holder.checkBox.isChecked(), true); } } 	0	0	0	0	0	1
@Override public HttpClientRequest<I, O> addHeader(CharSequence name, Object value) { return new HttpClientRequestImpl<>(rawRequest.addHeader(name, value), client); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClientRequest<II, OO> addChannelHandlerLast(String name, Func0<ChannelHandler> handlerFactory) { return _copy(HttpClientRequestImpl.<OO>castClient(client.addChannelHandlerLast(name, handlerFactory))); } 	0	0	0	0	0	1
@Override public WebSocketRequest<O> requestWebSocketUpgrade() { return WebSocketRequestImpl.createNew(this); } 	0	0	0	0	0	1
@Override public HttpClientRequest<I, O> setMethod(HttpMethod method) { return new HttpClientRequestImpl<>(rawRequest.setMethod(method), client); } 	0	0	0	0	0	1
@Override public HttpClientRequest<I, O> setKeepAlive(boolean keepAlive) { return new HttpClientRequestImpl<>(rawRequest.setKeepAlive(keepAlive), client); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClientRequest<II, OO> addChannelHandlerLast(EventExecutorGroup group, String name, Func0<ChannelHandler> handlerFactory) { return _copy(HttpClientRequestImpl.<OO>castClient(client.addChannelHandlerLast(group, name, handlerFactory))); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClientRequest<II, OO> addChannelHandlerBefore(String baseName, String name, Func0<ChannelHandler> handlerFactory) { return _copy(HttpClientRequestImpl.<OO>castClient(client.addChannelHandlerBefore(baseName, name, handlerFactory)));    } 	0	0	0	0	0	1
public static <I, O> HttpClientRequest<I, O> create(final RawRequest<I, O> rawRequest, final TcpClient<?, HttpClientResponse<O>> client) { return new HttpClientRequestImpl<>(rawRequest, client); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClientRequest<II, OO> addChannelHandlerAfter(String baseName, String name, Func0<ChannelHandler> handlerFactory) { return _copy(HttpClientRequestImpl.<OO>castClient(client.addChannelHandlerAfter(baseName, name, handlerFactory))); } 	0	0	0	0	0	1
@Override public WebSocketRequest<O> version(int version) { WebSocketVersion webSocketVersion;  switch (version) { case 7: webSocketVersion = WebSocketVersion.V07; break; case 8: webSocketVersion = WebSocketVersion.V08; break; case 13: webSocketVersion = WebSocketVersion.V13; break; default: webSocketVersion = WebSocketVersion.UNKNOWN; break; } return new WebSocketRequestImpl<>(httpRequest.setHeader(SEC_WEBSOCKET_VERSION, version), subProtocolsRequested, webSocketVersion); } 	0	0	0	0	0	1
@Override public HttpClient<I, O> enableWireLogging(LogLevel wireLoggingLevel) { return _copy(client.enableWireLogging(wireLoggingLevel)); } 	0	0	0	0	0	1
@Override public HttpClient<I, O> secure(SSLEngine sslEngine) { return _copy(client.secure(sslEngine)); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClient<II, OO> addChannelHandlerLast(String name, Func0<ChannelHandler> handlerFactory) { return _copy(HttpClientImpl.<OO>castClient(client.addChannelHandlerLast(name, handlerFactory))); } 	0	0	0	0	0	1
@Override public HttpClientRequest<I, O> createPatch(String uri) { return createRequest(HttpMethod.PATCH, uri); } 	0	0	0	0	0	1
@Override public HttpClient<I, O> secure(Func1<ByteBufAllocator, SSLEngine> sslEngineFactory) { return _copy(client.secure(sslEngineFactory)); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClient<II, OO> addChannelHandlerFirst(EventExecutorGroup group, String name, Func0<ChannelHandler> handlerFactory) { return _copy(HttpClientImpl.<OO>castClient(client.addChannelHandlerFirst(group, name, handlerFactory)) ); } 	0	0	0	0	0	1
"@Override public Pair<Integer, List<VoidDatasetsResultRow>> findDatasets(List<String> creators, List<String> subjects, String titleSubstr, boolean harvestedCheck, PagingRequest pagingRequest, SortingRequest sortingRequest) throws DAOException {  Bindings bindings = new Bindings();  StringBuilder sb = new StringBuilder(); sb.append(""PREFIX cr: <http://cr.eionet.europa.eu/ontologies/contreg.rdf#>\n""); sb.append(""PREFIX dcterms: <http://purl.org/dc/terms/>\n""); sb.append(""PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n""); sb.append(""PREFIX void: <http://rdfs.org/ns/void#>\n""); sb.append(""\n""); sb.append(""SELECT ?dataset ?label ?creator sql:group_concat(?subject,', ') AS ?subjects min(xsd:int(bound(?refreshed))) AS ?imported\n""); sb.append(""  WHERE {\n""); sb.append(""   ?dataset a void:Dataset ;\n""); sb.append(""     dcterms:title ?label ;\n""); sb.append(""     dcterms:creator ?ucreator .\n""); sb.append(""OPTIONAL { ?dataset void:dataDump _:dump.\n"" + ""_:dump cr:lastRefreshed ?refreshed }\n""); sb.append(""?ucreator rdfs:label ?creator \n"");  if (StringUtils.isBlank(titleSubstr)) { sb.append(""FILTER (LANG(?label) IN ('en',''))\n""); } else { sb.append(""FILTER (LANG(?label) IN ('en','') && regex(?label, ?titleF, \""i\""))\n""); bindings.setString(""titleF"", titleSubstr); }  if (harvestedCheck) { sb.append(""FILTER (bound(?refreshed))\n""); }  if (creators != null && !creators.isEmpty()) { sb.append(""  FILTER (?creator IN ("").append(variablesCSV(""crt"", creators.size())).append(""))\n""); for (int i = 0; i < creators.size(); i++) { bindings.setString(""crt"" + (i + 1), creators.get(i)); } }  // Virtuoso behaves differently when there is only one subject in the set. Then the language code matters. if (subjects != null && !subjects.isEmpty()) { sb.append(""  ?dataset dcterms:subject ?usubject .\n""); sb.append(""  ?usubject rdfs:label ?subject FILTER (LANG(?subject) IN ('en',''))\n""); sb.append(""  FILTER (STR(?subject) IN ("").append(variablesCSV(""sbj"", subjects.size())).append(""))\n""); for (int i = 0; i < subjects.size(); i++) { bindings.setString(""sbj"" + (i + 1), subjects.get(i)); } } else { sb.append(""  OPTIONAL {?dataset dcterms:subject ?usubject .\n""); sb.append(""           ?usubject rdfs:label ?subject FILTER (LANG(?subject) IN ('en','')) }\n""); } sb.append(""} GROUP BY ?dataset ?label ?creator\n""); if (sortingRequest != null && sortingRequest.getSortingColumnName() != null) { sb.append(""ORDER BY "" + sortingRequest.getSortOrder().toSQL() + ""(UCASE(str(?"" + sortingRequest.getSortingColumnName() + "")))\n""); } else { sb.append(""ORDER BY DESC(?imported) ?dataset\n""); } if (pagingRequest != null) { sb.append(""OFFSET "" + pagingRequest.getOffset() + ""\n""); sb.append(""LIMIT "" + pagingRequest.getItemsPerPage()); } List<VoidDatasetsResultRow> datasets = executeSPARQL(sb.toString(), bindings, new VoidDatasetsReader());  int rowCount = 0; if (datasets != null && !datasets.isEmpty()) { StringBuffer countQuery = new StringBuffer(); countQuery.append(""PREFIX cr: <http://cr.eionet.europa.eu/ontologies/contreg.rdf#>\n""); countQuery.append(""PREFIX dcterms: <http://purl.org/dc/terms/>\n""); countQuery.append(""PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n""); countQuery.append(""PREFIX void: <http://rdfs.org/ns/void#>\n""); countQuery.append(""\n""); countQuery.append(""SELECT (COUNT(*) AS ?total)\n""); countQuery.append(""WHERE {\n""); countQuery.append("" {\n""); countQuery.append("" SELECT ?dataset ?label ?creator sql:group_concat(?subject,', ') AS ?subjects min(xsd:int(bound(?refreshed))) AS ?imported\n""); countQuery.append(""  WHERE {\n""); countQuery.append(""   ?dataset a void:Dataset ;\n""); countQuery.append(""     dcterms:title ?label;\n""); countQuery.append(""     dcterms:creator ?ucreator .\n""); countQuery.append(""   ?ucreator rdfs:label ?creator .\n"");  if (StringUtils.isBlank(titleSubstr)) { countQuery.append(""   FILTER (LANG(?label) IN ('en',''))\n""); } else { countQuery.append(""   FILTER (LANG(?label) IN ('en','') && regex(?label, ?titleF, \""i\""))\n""); bindings.setString(""titleF"", titleSubstr); }  if (creators != null && !creators.isEmpty()) { countQuery.append(""  FILTER (?creator IN ("").append(variablesCSV(""crt"", creators.size())).append(""))\n""); for (int i = 0; i < creators.size(); i++) { bindings.setString(""crt"" + (i + 1), creators.get(i)); } }  // Virtuoso behaves differently when there is only one subject in the set. Then the language code matters. if (subjects != null && !subjects.isEmpty()) { countQuery.append(""  ?dataset dcterms:subject ?usubject .\n""); countQuery.append(""  ?usubject rdfs:label ?subject FILTER (LANG(?subject) IN ('en',''))\n""); countQuery.append(""  FILTER (STR(?subject) IN ("").append(variablesCSV(""sbj"", subjects.size())).append(""))\n""); for (int i = 0; i < subjects.size(); i++) { bindings.setString(""sbj"" + (i + 1), subjects.get(i)); } } else { countQuery.append(""  OPTIONAL {?dataset dcterms:subject ?usubject .\n""); countQuery.append(""           ?usubject rdfs:label ?subject FILTER (LANG(?subject) IN ('en','')) }\n""); } countQuery.append(""  }\n""); countQuery.append("" }\n""); countQuery.append("" }\n""); // countQuery.append(""} GROUP BY ?dataset ?label ?creator\n"");  rowCount = Integer.parseInt(executeUniqueResultSPARQL(countQuery.toString(), bindings, new SingleObjectReader<Object>()) .toString()); }  return new Pair<Integer, List<VoidDatasetsResultRow>>(rowCount, datasets); } "	0	0	0	0	0	1
public void storeAndTake(int runeId){ if(ctx.bank.opened()){ if(count(ESS_ID) != 0){ ctx.bank.close(); return; } if(ctx.bank.depositInventory()){ Condition.wait(new Callable<Boolean>(){ @Override public Boolean call() throws Exception { return count(runeId) == 0; } }, 250, 20); } if (ctx.bank.withdraw(ESS_ID, 28)){ Condition.wait(new Callable<Boolean>() { @Override public Boolean call() throws Exception { return count(ESS_ID) > 0; } }, 250, 20); recordTime(); } ctx.bank.close(); } else { if(ctx.bank.inViewport()) { if(ctx.bank.open()){ Condition.wait(new Callable<Boolean>(){ @Override public Boolean call() throws Exception { return ctx.bank.opened(); } }, 250, 20); } } } } 	0	0	0	0	0	1
public View.OnClickListener onRegisterClicked() { return new View.OnClickListener() { @Override public void onClick(View view) { final Context context = accountRegisterView.getContext(); final String alias = accountRegisterView.getAlias();  if (alias.isEmpty()) { accountRegisterView.showError( ErrorMessageFactory.create(context, new RequiredArgumentException()) ); return; }  accountRegisterView.showProgressDialog();  KeyPair keyPair = KeyGenerator.createKeyPair(); keyPair.save(context); register(keyPair, alias); } }; } 	0	0	0	0	0	1
"public void testFeatureWithGeometryCollectionRead2() throws Exception { String json = strip(""{""+ ""   'type':'Feature',""+ ""   'geometry':{""+ ""      'type':'GeometryCollection',""+ ""      'geometries':[""+ ""         {""+ ""            'type':'Polygon',""+ ""            'coordinates':[[[-28.1107, 142.998], [-28.1107, 148.623], [-30.2591, 148.623], [-30.2591, 142.998], [-28.1107, 142.998]]]""+ ""         },""+ ""         {""+ ""            'type':'Polygon',""+ ""            'coordinates':[[[-27.1765, 142.998], [-25.6811, 146.4258], [-27.1765, 148.5352], [-27.1765, 142.998]]]""+ ""         }""+ ""     ]""+ ""   },""+ ""   'properties':{""+ ""      'name':'',""+ ""      'caseSN':'x_2000a',""+ ""      'siteNum':2""+ ""   },""+ ""   'id':'fid-397164b3_13880d348b9_-7a5c'""+ ""}"");  SimpleFeature f1 = fjson.readFeature(json); assertNotNull(f1.getDefaultGeometry());  GeometryCollection gc = (GeometryCollection) f1.getDefaultGeometry(); assertEquals(2, gc.getNumGeometries());  WKTReader wkt = new WKTReader(); assertTrue(wkt.read(""POLYGON ((-28.1107 142.998, -28.1107 148.623, -30.2591 148.623, -30.2591 142.998, -28.1107 142.998))"").equals(gc.getGeometryN(0))); assertTrue(wkt.read(""POLYGON((-27.1765 142.998, -25.6811 146.4258, -27.1765 148.5352, -27.1765 142.998))"").equals(gc.getGeometryN(1)));  assertEquals(""fid-0"", f1.getID()); assertEquals("""", f1.getAttribute(""name"")); assertEquals(""x_2000a"", f1.getAttribute(""caseSN"")); assertEquals(2l, f1.getAttribute(""siteNum""));   } "	0	0	0	0	0	1
"void didClose(DidCloseTextDocumentParams params){ try { ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable() { @Override public void run(IProgressMonitor monitor) throws CoreException { handleClosed(params); } }, new NullProgressMonitor()); } catch (CoreException e) { JavaLanguageServerPlugin.logException(""Handle document close "", e); } } "	0	0	0	0	0	1
"void didOpen(DidOpenTextDocumentParams params){ try { ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable() { @Override public void run(IProgressMonitor monitor) throws CoreException { handleOpen(params); } }, new NullProgressMonitor()); } catch (CoreException e) { JavaLanguageServerPlugin.logException(""Handle document open "", e); } } "	0	0	0	0	0	1
"@Override public void onCreate() { super.onCreate();   RoverConfig config = new RoverConfig.Builder() .setApplicationToken(""6c546189dc45df1293bddc18c0b54786"") .build();  Rover.setup(this, config);  } "	0	0	0	0	0	1
"@Test public void test_1_4_json_format() throws JsonProcessingException, IOException { String json = new JSONObject().put(""name"", ""test"").put(""managementUrl"", ""http://test"") .put(""healthUrl"", ""http://health"").put(""serviceUrl"", ""http://service"") .put(""statusInfo"", new JSONObject().put(""status"", ""UNKNOWN"")).toString(); Application value = objectMapper.readValue(json, Application.class); assertThat(value.getName(), is(""test"")); assertThat(value.getManagementUrl(), is(""http://test"")); assertThat(value.getHealthUrl(), is(""http://health"")); assertThat(value.getServiceUrl(), is(""http://service"")); } "	0	0	0	0	0	1
"@Test public void test_onlyHealthUrl() throws JsonProcessingException, IOException { String json = new JSONObject().put(""name"", ""test"").put(""healthUrl"", ""http://test"") .toString(); Application value = objectMapper.readValue(json, Application.class); assertThat(value.getName(), is(""test"")); assertThat(value.getHealthUrl(), is(""http://test"")); assertThat(value.getManagementUrl(), nullValue()); assertThat(value.getServiceUrl(), nullValue()); } "	0	0	0	0	0	1
"public void crearUsuario(MouseEvent event){ if(txtNombreUsuario.getText().length()<8||txtCorreoUsuario.getText().length()==0||pflContrasenya.getText().length()<8||pfdRepetirContrasenya.getText().length()<8||!pflContrasenya.getText().equals(pfdRepetirContrasenya.getText())) { datosCorrectos=false; btnCrear.setDisable(true); Alert alert = new Alert(AlertType.INFORMATION); alert.setTitle(""Parece que falla algo"");  alert.setContentText(""Parece que hay algún problema con los datos. Por favor, revise los datos antes de registrarse.""); alert.initModality(Modality.APPLICATION_MODAL);   alert.initOwner((Stage) ((Node) event.getSource()).getScene().getWindow()); alert.showAndWait(); chkTerminos.setSelected(false);  } else{ try{ UserDTO udto= new UserDTO(txtNombreUsuario.getText(), txtCorreoUsuario.getText(), ImgImagenUsuario, userDate, 0 , 0, 0);  Alert alert = new Alert(AlertType.CONFIRMATION);  alert.setTitle(""Crear nuevo usuario"");  alert.setHeaderText(""¿Está seguro?"");  alert.setContentText(""¿Está seguro de que desea crear el anterior usuario?"");   alert.initModality(Modality.APPLICATION_MODAL); //Añade 'dueño'. (=La ventana sobre la cual se va a posicionar y la cual bloqueará) alert.initOwner((Stage) ((Node) event.getSource()).getScene().getWindow());  Optional<ButtonType> result = alert.showAndWait();  if (result.get() == ButtonType.OK){  boolean finalResult = com.pasapalabra.game.service.ServiceLocator.createUser(udto, pflContrasenya.getText()); if(finalResult){ Alert alert2 = new Alert(AlertType.INFORMATION);  alert2.setTitle(""Usuario creado con éxito"");  alert2.setHeaderText(""Éxito en la operación"");  alert2.setContentText(""Se ha creado el usuario con éxito"");   alert2.initModality(Modality.APPLICATION_MODAL); //Añade 'dueño'. (=La ventana sobre la cual se va a posicionar y la cual bloqueará) alert2.initOwner((Stage) ((Node) event.getSource()).getScene().getWindow());  alert2.showAndWait();   com.pasapalabra.game.utilities.WindowUtilities.windowTransition(""LogIn"", event); } else{  Alert alert2 = new Alert(AlertType.INFORMATION);  alert2.setTitle(""Datos existentes"");  alert2.setHeaderText(""El usuario ya existe, por favor, introduzca otro usuario"");  alert2.setContentText(""Se ha creado el usuario con éxito"");   alert2.initModality(Modality.APPLICATION_MODAL); //Añade 'dueño'. (=La ventana sobre la cual se va a posicionar y la cual bloqueará) alert2.initOwner((Stage) ((Node) event.getSource()).getScene().getWindow());  alert2.showAndWait();  //userMailElegido.show(txtCorreoUsuario, Side.BOTTOM, 0, 0);  chkTerminos.setSelected(false);  btnCrear.setDisable(true);  userNameElegido.show(txtNombreUsuario, Side.BOTTOM, 0, 0); } } }catch(Exception a){ Alert alert2 = new Alert(AlertType.ERROR);  alert2.setTitle(""Error al tramitar la creación de usuario"");  alert2.setHeaderText(""Error cuando se intentó crear el usuario"");  alert2.setContentText(""Se ha produciod un error cuando intentaba crear su usario, por favor, revise la información y cambielá si es necesario"");   alert2.initModality(Modality.APPLICATION_MODAL); //Añade 'dueño'. (=La ventana sobre la cual se va a posicionar y la cual bloqueará) alert2.initOwner((Stage) ((Node) event.getSource()).getScene().getWindow());  alert2.showAndWait();  }  }  } "	0	0	0	0	0	1
"@Override public String upcall(director_smartptr.FooBar fooBarPtr) { return ""override;"" + fooBarPtr.FooBarDo(); } "	0	0	0	0	0	1
"public String changePassword() throws Exception { String result = SUCCESS;  // check that the user is logged in ActionContext context = ActionContext.getContext(); user = getLoggedInUser(context); if (user == null) { return LOGIN; }  if (Utility.isAdmin(user.getUserName())) { userIsAdmin = true; }  String realPasswordHash = user.getPassword(); if (!(Utility.encrypt(oldPassword).equals(realPasswordHash))) { errorMessages.add(""You entered your old password incorrectly. "" + ""Your password was not changed. Please try again.""); }  if (!errorMessages.isEmpty()) { errorMessages.add(0, ""Error changing password.""); return ERROR; }  // Change user object to have new password logger.debug(""Changing user password""); user.setPassword(Utility.encrypt(newPassword));  // Commit changes  Session s = HibernateUtil.getSession(); Transaction tx = null;  try { tx = s.beginTransaction(); s.saveOrUpdate(user); tx.commit(); } catch (RuntimeException e) { if (tx != null) { tx.rollback(); } logger.error(e); } finally { s.close(); }  errorMessages.add(""Password change successful!""); return result; } "	0	0	0	0	0	1
public File getItemNameFile() { return itemNameFile; } 	0	0	0	0	0	1
"private void updateLighting(Vector3f sunDirection, Vector3f moonDirection) { assert sunDirection != null; assert sunDirection.isUnitVector() : sunDirection; if (moonDirection != null) { assert moonDirection.isUnitVector() : moonDirection; }  float sineSolarAltitude = sunDirection.y; float sineLunarAltitude; if (moonDirection != null) { sineLunarAltitude = moonDirection.y; } else { sineLunarAltitude = -1f; } updateObjectColors(sineSolarAltitude, sineLunarAltitude); /* * Determine the world direction to the main light source. */ boolean moonUp = sineLunarAltitude >= 0f; boolean sunUp = sineSolarAltitude >= 0f; float moonWeight = getMoonIllumination(); Vector3f mainDirection; if (sunUp) { mainDirection = sunDirection; } else if (moonUp && moonWeight > 0f) { assert moonDirection != null; mainDirection = moonDirection; } else { mainDirection = starlightDirection; } assert mainDirection.isUnitVector() : mainDirection; assert mainDirection.y >= 0f : mainDirection; /* * Determine the base color (applied to horizon haze, bottom dome, and * viewport backgrounds) using the sun's altitude: *  + sunlight when ssa >= 0.25, *  + twilight when ssa = 0, *  + blend of moonlight and starlight when ssa <= -0.04, * with linearly interpolated transitions. */ ColorRGBA baseColor; if (sunUp) { float dayWeight = FastMath.saturate(sineSolarAltitude / 0.25f); baseColor = MyColor.interpolateLinear( dayWeight, twilight, sunLight); } else { ColorRGBA blend; if (moonUp && moonWeight > 0f) { blend = MyColor.interpolateLinear(moonWeight, starLight, moonLight); } else { blend = starLight; } float nightWeight = FastMath.saturate(-sineSolarAltitude / 0.04f); baseColor = MyColor.interpolateLinear(nightWeight, twilight, blend); } SkyMaterial topMaterial = getTopMaterial(); topMaterial.setHazeColor(baseColor); Material bottomMaterial = getBottomMaterial(); if (bottomMaterial != null) { bottomMaterial.setColor(""Color"", baseColor); }  ColorRGBA cloudsColor = updateCloudsColor(baseColor, sunUp, moonUp); /* * Determine what fraction of the main light passes through the clouds. */ float transmit; if (cloudModulationFlag && (sunUp || moonUp && moonWeight > 0f)) { /* * Modulate light intensity as clouds pass in front. */ Vector3f intersection = intersectCloudDome(mainDirection); DomeMesh cloudsMesh = getCloudsMesh(); Vector2f texCoord = cloudsMesh.directionUV(intersection); SkyMaterial cloudsMaterial = getCloudsMaterial(); transmit = cloudsMaterial.getTransmission(texCoord);  } else { transmit = 1f; } /* * Determine the color and intensity of the main light. */ ColorRGBA main; if (sunUp) { /* * By day, the main light has the base color, modulated by * clouds and the cube root of the sine of the sun's altitude. */ float sunFactor = transmit * MyMath.cubeRoot(sineSolarAltitude); main = baseColor.mult(sunFactor);  } else if (moonUp) { /* * By night, the main light is a blend of moonlight and starlight, * with the moon's portion modulated by clouds and the moon's phase. */ float moonFactor = transmit * moonWeight; main = MyColor.interpolateLinear(moonFactor, starLight, moonLight);  } else { main = starLight.clone(); } /* * The ambient light color is based on the clouds color; * its intensity is modulated by the ""slack"" left by * strongest component of the main light. */ float slack = 1f - MyMath.max(main.r, main.g, main.b); assert slack >= 0f : slack; ColorRGBA ambient = cloudsColor.mult(slack); /* * Compute the recommended shadow intensity as the fraction of * the total directional light. */ float mainAmount = main.r + main.g + main.b; float ambientAmount = ambient.r + ambient.g + ambient.b; float totalAmount = mainAmount + ambientAmount; assert totalAmount > 0f : totalAmount; float shadowIntensity = FastMath.saturate(mainAmount / totalAmount); /* * Determine the recommended bloom intensity using the sun's altitude. */ float bloomIntensity = 6f * sineSolarAltitude; bloomIntensity = FastMath.clamp(bloomIntensity, 0f, 1.7f);  updater.update(ambient, baseColor, main, bloomIntensity, shadowIntensity, mainDirection); } "	0	0	0	0	0	1
@Override public void onSearchButtonClick() { if (mMyBusMap.getStartLocationMarker().getMapMarker() == null || mMyBusMap.getEndLocationMarker().getMapMarker() == null) { return; } if (DeviceRequirementsChecker.isNetworkAvailable(this)) { clearBusRouteOnMap(); showBottomSheetResults(false); showProgressDialog(getString(R.string.toast_searching)); ServiceFacade.getInstance().searchRoutes(mMyBusMap.getStartLocationMarker().getMapMarker().getPosition(), mMyBusMap.getEndLocationMarker().getMapMarker().getPosition(), this); } else { Toast.makeText(this, R.string.toast_no_internet, Toast.LENGTH_LONG).show(); } //when performing a search remove all the favorites in the map mMyBusMap.removeAllFavoritesMarkers(); } 	0	0	0	0	0	1
private void authenticatedPost(String method, Object request) throws IOException { this.authenticatedPost(method, request, (Class) null); } 	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") public static Object getBuild( Object context ) throws Exception{ BuildStage1Result res = buildStage1( (Boolean) get(context, ""cbtHasChangedCompat""), (Long) get(context, ""startCompat""), ((File) get(context, ""cache"")).toString() + ""/"", ((File) get(context, ""cbtHome"")).toString(), ((File) get(context, ""compatibilityTarget"")).toString() + ""/"", new ClassLoaderCache2<ClassLoader>( (ConcurrentHashMap<String,Object>) get(context, ""permanentKeys""), (ConcurrentHashMap<Object,ClassLoader>) get(context, ""permanentClassLoaders"") ) ); return res .classLoader .loadClass(""cbt.Stage1"") .getMethod( ""getBuild"", Object.class, Boolean.class ) .invoke(null, context, res.changed); } "	0	0	0	0	0	1
"public static int runMain(String cls, String[] args, ClassLoader cl, SecurityManager defaultSecurityManager) throws Exception{ try{ System.setSecurityManager( new TrapSecurityManager() ); cl.loadClass(cls) .getMethod(""main"", String[].class) .invoke( null, (Object) args); return 0; }catch( InvocationTargetException exception ){ Throwable cause = exception.getCause(); if(cause instanceof TrappedExitCode){ return ((TrappedExitCode) cause).exitCode; } throw exception; } finally { System.setSecurityManager(defaultSecurityManager); } } "	0	0	0	0	0	1
"private Component createFullName() { TextField field = new TextField(); field.focus(); return configureField(field, ""Full name"", binding -> binding .withValidator(new NotEmptyValidator<String>( ""Full name may not be empty"")) .withStatusChangeHandler(this::handleFullNameStatusChange) .bind(Person::getFullName, Person::setFullName)); } "	0	0	0	0	0	1
"@Test public void testGroupingId() { sql(""select deptno, grouping_id(deptno) from emp group by deptno"").ok(); sql(""select deptno / 2, grouping_id(deptno / 2),\n"" + "" ^grouping_id(deptno / 2, empno)^\n"" + ""from emp group by deptno / 2, empno"") .ok(); sql(""select deptno / 2, ^grouping_id()^\n"" + ""from emp group by deptno / 2, empno"") .fails( ""Invalid number of arguments to function 'GROUPING_ID'. Was expecting 1 arguments""); sql(""select deptno, grouping_id(^empno^) from emp group by deptno"") .fails(""Expression 'EMPNO' is not being grouped""); sql(""select deptno, grouping_id(^deptno + 1^) from emp group by deptno"") .fails(""Argument to GROUPING_ID operator must be a grouped expression""); sql(""select deptno, grouping_id(emp.^xxx^) from emp"") .fails(""Column 'XXX' not found in table 'EMP'""); sql(""select deptno, ^grouping_id(deptno)^ from emp"") .fails(""GROUPING_ID operator may only occur in an aggregate query""); sql(""select deptno, sum(^grouping_id(deptno)^) over () from emp"") .fails(""GROUPING_ID operator may only occur in an aggregate query""); sql(""select deptno from emp group by deptno having grouping_id(deptno) < 5"") .ok(); sql(""select deptno from emp group by deptno order by grouping_id(deptno)"") .ok(); sql(""select deptno as xx from emp group by deptno order by grouping_id(xx)"") .ok(); sql(""select deptno as empno from emp\n"" + ""group by deptno order by grouping_id(empno)"") .ok(); sql(""select 1 as deptno from emp\n"" + ""group by deptno order by grouping_id(^deptno^)"") .fails(""Argument to GROUPING_ID operator must be a grouped expression""); sql(""select deptno from emp group by deptno\n"" + ""order by grouping_id(emp.deptno)"") .ok(); sql(""select ^deptno^ from emp group by empno order by grouping_id(deptno)"") .fails(""Expression 'DEPTNO' is not being grouped""); sql(""select deptno from emp order by ^grouping_id(deptno)^"") .fails(""GROUPING_ID operator may only occur in an aggregate query""); sql(""select deptno from emp where ^grouping_id(deptno)^ = 1"") .fails(""GROUPING_ID operator may only occur in an aggregate query""); sql(""select deptno from emp where ^grouping_id(deptno)^ = 1\n"" + ""group by deptno"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); sql(""select deptno from emp group by deptno, ^grouping_id(deptno)^"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); sql(""select deptno from emp\n"" + ""group by grouping sets(deptno, ^grouping_id(deptno)^)"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); sql(""select deptno from emp\n"" + ""group by cube(empno, ^grouping_id(deptno)^)"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); sql(""select deptno from emp\n"" + ""group by rollup(empno, ^grouping_id(deptno)^)"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); } "	0	0	0	0	0	1
@Override public boolean equals(Object obj) { boolean isEqual = (obj == this); if (!isEqual && (obj instanceof PassthroughClientDescriptor)) { PassthroughClientDescriptor other = (PassthroughClientDescriptor) obj; // We can use instance compare, here, on the sender. isEqual = (other.sender == this.sender) && (other.clientInstanceID == this.clientInstanceID); } return isEqual; } 	0	0	0	0	0	1
public void setCategory(ProjectCategory category) { this.category = category; } 	0	0	0	0	0	1
public void switchToAddProblemFragment() { if (addProblemFragment == null) { addProblemFragment = new AddProblemFragment(); }  fragmentTransaction = fragmentManager.beginTransaction(); fragmentTransaction.addToBackStack(null);  fragmentTransaction.add(R.id.content_frame, addProblemFragment); fragmentTransaction.commit(); } 	0	0	0	0	0	1
public void disableAddProblemMode(){ addproblemModeIsEnabled = false; setMarkerClickType(0);  addProblemFragment = null; mapClusterer.deleteMarker();  addProblemSnackbar.dismiss(); fabAddProblem.setImageResource(R.drawable.ic_location_on_white_24dp); } 	0	0	0	0	0	1
"public static Matrix Multiply(Matrix a, Matrix b){ Matrix out = MatrixFactory.create(a.row, b.column, ""complex""); for(int i=0; i<a.row; i++){ for(int j=0; j<b.column; j++){ double reSum = 0.0; double imSum = 0.0; for(int k=0; k<b.row; k++){ reSum+=a.getReElement(i, k)*b.getReElement(k,j); reSum-=a.getImElement(i, k)*b.getImElement(k, j); imSum+=a.getImElement(i, k)*b.getReElement(k,j); imSum+=a.getReElement(i, k)*b.getImElement(k, j); } out.setReElement(i, j, reSum); out.setImElement(i, j, imSum); } } return out; } "	0	0	0	0	0	1
"public static void setKeyStoreParams() { String keyStore = CONFIG_PATH + File.separator + ""bre"" + File.separator + ""security"" + File.separator + ""wso2carbon.jks""; System.setProperty(""Security.KeyStore.Location"", keyStore); System.setProperty(""Security.KeyStore.Password"", ""wso2carbon""); } "	0	0	0	0	0	1
private void setupMA() { adVideoPlayerPlayback = (VideoPlayerWithAdPlayback) findViewById(R.id.videoplayer_with_ad_playback); adVideoPlayerPlayback.setEventEmitter(eventEmitter);  // 広告の再生タイミングになるとemitされます // 広告のロードを開始して下さい eventEmitter.on(MAAdPlayerEvent.ADS_REQUEST_FOR_VIDEO, new EventListener() { @Override public void processEvent(Event event) { Log.d(TAG, event.getType());  // 動画の下にバナー広告を表示する videoPlayerController.adCompanionBanner = (ViewGroup) findViewById(R.id.companion_ad_banner);  // Ad Request && 再生開始 videoPlayerController.play(); } }); ViewGroup parentView = (ViewGroup) findViewById(R.id.root); String adTagUrl = getString(R.string.ad_tag_url);  if (adTagUrlForTesting != null) { adTagUrl = adTagUrlForTesting; }  videoPlayerController = new VideoPlayerController(parentView, eventEmitter, adVideoPlayerPlayback, adTagUrl); videoPlayerController.init(); } 	0	0	0	0	0	1
private Long createNewUser(TrainingExcelDto item) { GeneralIdResponse addressIdResp = addressService.createFromForm(new AddressDto(item.getPostCode(), item.getAddress())); GeneralIdResponse userIdResp = userService.createFromForm(new UserDto(item.getName(), item.getPhoneNo(), item.getEmail(), addressIdResp.getValue())); return userIdResp.getValue(); } 	0	0	0	0	0	1
"@Override public boolean onOptionsItemSelected(MenuItem item) { // Handle action bar item clicks here. The action bar will // automatically handle clicks on the Home/Up button, so long // as you specify a parent activity in AndroidManifest.xml. int id = item.getItemId();  //noinspection SimplifiableIfStatement if ( id == R.id.action_settings) { Intent startIntent = new Intent(this, SettingsActivity.class); ActivityCompat.startActivity(MainActivity.this, startIntent, null);  return true; } else if( id == R.id.action_balance ) { final double currentBalance = -db.getBalanceForDay(new Date());  View dialogView = getLayoutInflater().inflate(R.layout.dialog_adjust_balance, null); final EditText amountEditText = (EditText) dialogView.findViewById(R.id.balance_amount); amountEditText.setText(currentBalance == 0 ? ""0"" : String.valueOf(currentBalance)); UIHelper.preventUnsupportedInputForDecimals(amountEditText); amountEditText.setSelection(amountEditText.getText().length()); // Put focus at the end of the text  AlertDialog.Builder builder = new AlertDialog.Builder(this); builder.setTitle(R.string.adjust_balance_title); builder.setMessage(R.string.adjust_balance_message); builder.setView(dialogView); builder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); builder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { try { // Ajust balance double newBalance = Double.valueOf(amountEditText.getText().toString());  if( newBalance == currentBalance ) { // Nothing to do, balance hasn't change return; }  final double diff = newBalance - currentBalance;  String balanceExpenseTitle = getResources().getString(R.string.adjust_balance_expense_title);  // Look for an existing balance for the day Expense expense = null; List<Expense> expensesForDay = db.getExpensesForDay(new Date()); for(Expense expenseOfDay : expensesForDay) { if( expenseOfDay.getTitle().equals(balanceExpenseTitle) ) { expense = expenseOfDay; break; } }  View.OnClickListener listener;  // If the adjust balance exists, just add the diff and persist it if( expense != null ) { final Expense persistedExpense = expense;  persistedExpense.setAmount(persistedExpense.getAmount() - diff); db.persistExpense(persistedExpense);  // On cancel, remove the diff and persist listener = new View.OnClickListener() { @Override public void onClick(View v) { persistedExpense.setAmount(persistedExpense.getAmount() + diff); db.persistExpense(persistedExpense);  refreshAllForDate(expensesViewAdapter.getDate()); } }; } else // If no adjust balance yet, create a new one { final Expense persistedExpense = new Expense(getResources().getString(R.string.adjust_balance_expense_title), -diff, new Date()); db.persistExpense(persistedExpense);  // On cancel, just delete the inserted balance listener = new View.OnClickListener() { @Override public void onClick(View v) { db.deleteExpense(persistedExpense);  refreshAllForDate(expensesViewAdapter.getDate()); } }; }  refreshAllForDate(expensesViewAdapter.getDate()); dialog.dismiss();  //Show snackbar Snackbar snackbar = Snackbar.make(coordinatorLayout, getResources().getString(R.string.adjust_balance_snackbar_text, CurrencyHelper.getFormattedCurrencyString(MainActivity.this, newBalance)), Snackbar.LENGTH_LONG); snackbar.setAction(R.string.undo, listener); snackbar.setActionTextColor(ContextCompat.getColor(MainActivity.this, R.color.snackbar_action_undo)); //noinspection ResourceType snackbar.setDuration(ACTION_SNACKBAR_LENGTH); snackbar.show(); } catch (Exception e) { new AlertDialog.Builder(MainActivity.this) .setTitle(R.string.adjust_balance_error_title) .setMessage(R.string.adjust_balance_error_message) .setNegativeButton(R.string.ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }) .show();  Logger.warning(""An error occurred during balance"", e); dialog.dismiss(); } } });  final Dialog dialog = builder.show();  // Directly show keyboard when the dialog pops amountEditText.setOnFocusChangeListener(new View.OnFocusChangeListener() { @Override public void onFocusChange(View v, boolean hasFocus) { if (hasFocus && getResources().getConfiguration().keyboard == Configuration.KEYBOARD_NOKEYS ) // Check if the device doesn't have a physical keyboard { dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE); } } });  return true; } else if( id == R.id.action_monthly_report ) { Intent startIntent = new Intent(this, MonthlyReportActivity.class); ActivityCompat.startActivity(MainActivity.this, startIntent, null);  return true; }  return super.onOptionsItemSelected(item); } "	0	0	0	0	0	1
public Builder<T> withStopCondition(AuctionStopCondition stopCondition) { return new AutoValue_AuctionCommModel_Builder<>(stopCondition, getMaxAuctionDuration()); } 	0	0	0	0	0	1
"public void registerChannelAlias(String cha){ unregisterCmd(cha); UCChannel ch = UChat.get().getConfig().getChannel(cha); if (ch == null){ return; } Sponge.getCommandManager().register(UChat.get().instance(), CommandSpec.builder() .arguments(GenericArguments.optional(GenericArguments.remainingJoinedStrings(Text.of(""message"")))) .permission(""uchat.channel.""+ch.getName()) .description(Text.of(""Command to use channel ""+ch.getName()+""."")) .executor((src, args) -> { { if (src instanceof Player){ if (args.<String>getOne(""message"").isPresent()){ if (UChat.mutes.contains(src.getName()) || ch.isMuted(src.getName())){ UChat.get().getLang().sendMessage(src, ""channel.muted""); return CommandResult.success(); }  UChat.tempChannels.put(src.getName(), ch.getAlias());  Text msg = Text.of(args.<String>getOne(""message"").get()); MessageChannelEvent.Chat event = SpongeEventFactory.createMessageChannelEventChat( UChat.get().getVHelper().getCause(src), src.getMessageChannel(), Optional.of(src.getMessageChannel()), new MessageEvent.MessageFormatter(Text.builder(""<"" + src.getName() + ""> "") .onShiftClick(TextActions.insertText(src.getName())) .onClick(TextActions.suggestCommand(""/msg "" + src.getName())) .build(), msg), msg, false); Sponge.getEventManager().post(event); } else { if (!ch.canLock()){ UChat.get().getLang().sendMessage(src, ""help.channels.send""); return CommandResult.success(); } if (ch.isMember((Player) src)){ UChat.tempChannels.put(src.getName(), ch.getAlias()); UChat.get().getLang().sendMessage(src, UChat.get().getLang().get(""channel.alreadyon"").replace(""{channel}"", ch.getName())); return CommandResult.success(); } ch.addMember((Player) src); UChat.get().getLang().sendMessage(src, UChat.get().getLang().get(""channel.entered"").replace(""{channel}"", ch.getName())); } } else if (args.<String>getOne(""message"").isPresent()){ UCMessages.sendFancyMessage(new String[0], Text.of(args.<String>getOne(""message"").get()), ch, src, null); } else { StringBuilder channels = new StringBuilder(); for (UCChannel chan:UChat.get().getConfig().getChannels()){ if (!(src instanceof Player) || UChat.get().getPerms().channelWritePerm((Player)src, chan)){ channels.append("", ""+chan.getName()); } } throw new CommandException(getHelpChannel(src).build(), true); } return CommandResult.success(); }}) .build(), cha); } "	0	0	0	0	0	1
"@GET @Produces({ MediaType.APPLICATION_JSON + "";charset=UTF-8"" }) public Response initAuthorization() { SignedJWT jwt = MCRJSONWebTokenUtil.createEmptyJWTwithPublicKey(""http:/localhost:8080""); StringBuffer msg = new StringBuffer(); msg.append(""{""); msg.append(""\n    \""access_token\"": \"""" + jwt + ""\"",""); msg.append(""\n}"");  return Response.ok(msg.toString()).type(""application/json; charset=UTF-8"") .header(""Authorization"", ""Bearer "" + jwt.serialize()).build(); } "	0	0	0	0	0	1
"public FileDownload controller ( @RequestParam(""request"") ReportRequest reportRequest, @RequestParam(""dataset"") String dataSetName, @RequestParam(""column"") String columnName, PageRequest pageRequest, @SpringBean ReportManager reportManager, @SpringBean KenyaUiUtils kenyaUi, @SpringBean ReportService reportService, @SpringBean CsvMaker csvMaker ) { ReportDefinition definition = reportRequest.getReportDefinition().getParameterizable(); ReportDescriptor report = reportManager.getReportDescriptor(definition);  CoreUtils.checkAccess(report, kenyaUi.getCurrentApp(pageRequest));  ReportData reportData = reportService.loadReportData(reportRequest);  MapDataSet dataSet = (MapDataSet) reportData.getDataSets().get(dataSetName);  DataSetColumn dataSetColumn = dataSet.getMetaData().getColumn(columnName); Object result = dataSet.getData(dataSetColumn);  Cohort cohort = null; if (result instanceof CohortIndicatorAndDimensionResult) { CohortIndicatorAndDimensionResult cidr = (CohortIndicatorAndDimensionResult) dataSet.getData(dataSetColumn); cohort = cidr.getCohortIndicatorAndDimensionCohort(); } else if (result instanceof Cohort) { cohort = (Cohort) result; }  List<Patient> patients = Context.getPatientSetService().getPatients(cohort.getMemberIds());  PatientCalculationService calculationService = Context.getService(PatientCalculationService.class); PatientCalculationContext calculationContext = calculationService.createCalculationContext(); Date endDate = (Date) reportRequest.getReportDefinition().getParameterMappings().get(""endDate""); calculationContext.setNow(endDate);  DateOfEnrollmentArtCalculation dateOfEnrollmentArtCalculation = new DateOfEnrollmentArtCalculation(); CalculationResultMap enrollmentDates = dateOfEnrollmentArtCalculation.evaluate(cohort.getMemberIds(), null, calculationContext);  InitialArtStartDateCalculation initialArtStartDateCalculation = new InitialArtStartDateCalculation(); CalculationResultMap artInitializationDates = initialArtStartDateCalculation.evaluate(cohort.getMemberIds(), null, calculationContext);   List<Object> data = new ArrayList<Object>(); List<Object> headerRow = new ArrayList<Object>(); List<Object> header = new ArrayList<Object>(); header.add(""Name""); header.add(""Age""); header.add(""Gender""); header.add(""UPN""); header.add(""Enrollment Date""); header.add(""ART Initialization Date""); headerRow.add(header.toArray()); for (Patient patient : patients) { List<Object> row = new ArrayList<Object>(); row.add(patient.getPersonName().getFullName()); row.add(patient.getAge()); row.add(patient.getGender()); row.add(new ArrayList<PatientIdentifier>(patient.getIdentifiers()).get(0));  String enrollmentDate = null; CalculationResult enrollmentDateCalcResult = enrollmentDates.get(patient.getId()); if (enrollmentDateCalcResult != null && enrollmentDateCalcResult.getValue() != null) { enrollmentDate = DATE_FORMAT.format((Date) enrollmentDateCalcResult.getValue()); } row.add(enrollmentDate);  String artInitializationDate = null; CalculationResult artInitializationDateCalcResult = artInitializationDates.get(patient.getId()); if (artInitializationDateCalcResult != null && artInitializationDateCalcResult.getValue() != null) { artInitializationDate = DATE_FORMAT.format((Date) artInitializationDateCalcResult.getValue()); } row.add(artInitializationDate);  data.add(row.toArray()); }  System.out.println(""""); FileDownload fileDownload = new FileDownload(""Cohort.csv"", ""text/csv"", csvMaker.createCsv(data, header)); return fileDownload; } "	0	0	0	0	0	1
@Before public void makeNewBlock() throws Exception { _block = BlockFactory.getBlock(blockType, owner, ownHash, previousHashChain, previousHashSender, publicKey, iban); } 	0	0	0	0	0	1
@Nullable public com.vimeo.networking.model.live.Live getLive() { return mLive; } 	0	0	0	0	0	1
"@Util public static <T> List<TableRecord<T>> tablaPermisos(List<T> rowsFiltered, boolean permisoEditar, boolean permisoBorrar, boolean permisoLeer, String permisoNombreEditar, String permisoNombreBorrar, String permisoNombreLeer, String accion, Map<String, Long> ids) { List<TableRecord<T>> records = new ArrayList<TableRecord<T>>(); Secure secure = InjectorConfig.getInjector().getInstance(Secure.class); for (T tablaTipo : rowsFiltered) { TableRecord<T> record = new TableRecord<T>(); records.add(record); record.objeto = tablaTipo; String[] nombre = tablaTipo.getClass().getName().split(""\\."");  ResultadoPermiso permisoFilasEditar = null; ResultadoPermiso permisoFilasLeer = null; ResultadoPermiso permisoFilasBorrar = null;  Map<String, Object> vars = new HashMap<String, Object>(); if (permisoEditar || permisoLeer || permisoBorrar){ String paramClass = ""id""+ReflectionUtils.getNameClass(tablaTipo); if (!ids.containsKey(paramClass)){ ids.put(paramClass, (Long) ReflectionUtils.getValueFromMethodFromClass(tablaTipo, ""getId"")); } vars.put(nombre[nombre.length-1].toLowerCase(), tablaTipo); }  if (permisoEditar) permisoFilasEditar = secure.check(permisoNombreEditar, ""editable"", accion, ids, vars); if (permisoLeer) permisoFilasLeer = secure.check(permisoNombreLeer, ""visible"", accion, ids, vars); if (permisoBorrar) permisoFilasBorrar = secure.check(permisoNombreBorrar, ""editable"", accion, ids, vars);  if ((permisoFilasLeer != null) && (permisoFilasLeer.checkAcceso(""leer""))) record.permisoLeer = true; else { if (permisoLeer) record.permisoLeer=false; else record.permisoLeer=true; } if ((permisoFilasEditar != null) && (permisoFilasEditar.checkAcceso(""editar""))){ record.permisoEditar = true; } else { if (permisoEditar) record.permisoEditar=false; else record.permisoEditar=true; }  if ((permisoFilasBorrar != null) && (permisoFilasBorrar.checkAcceso(""borrar""))) record.permisoBorrar = true; else { if (permisoBorrar) record.permisoBorrar=false; else record.permisoBorrar=true; } }  return records; } "	0	0	0	0	0	1
public RequestQueue getRequestQueue() { if (mRequestQueue == null) { // getApplicationContext() is key, it keeps you from leaking the // Activity or BroadcastReceiver if someone passes one in. mRequestQueue = Volley.newRequestQueue(mCtx.getApplicationContext()); } return mRequestQueue; } 	0	0	0	0	0	1
"public static String buildProjectStats(final IProject project, final StatisticsInfo hotStat, final StatisticsPanel callback) {  StatCount total = new StatCount(); StatCount remaining = new StatCount(); StatCount unique = new StatCount(); StatCount remainingUnique = new StatCount();  // find unique segments Map<String, SourceTextEntry> uniqueSegment = new HashMap<>(); Set<String> translated = new HashSet<>(); for (SourceTextEntry ste : project.getAllEntries()) { String src = ste.getSrcText(); for (ProtectedPart pp : ste.getProtectedParts()) { src = src.replace(pp.getTextInSourceSegment(), pp.getReplacementUniquenessCalculation()); } if (!uniqueSegment.containsKey(src)) { uniqueSegment.put(src, ste); } TMXEntry tr = project.getTranslationInfo(ste); if (tr.isTranslated()) { translated.add(src); } } Set<String> filesUnique = new HashSet<>(); Set<String> filesRemainingUnique = new HashSet<>(); for (Map.Entry<String, SourceTextEntry> en : uniqueSegment.entrySet()) { /* Number of words and chars calculated without all tags and protected parts. */ StatCount count = new StatCount(en.getValue());  // add to unique unique.add(count); filesUnique.add(en.getValue().getKey().file); // add to unique remaining if (!translated.contains(en.getKey())) { remainingUnique.add(count); filesRemainingUnique.add(en.getValue().getKey().file); } } unique.addFiles(filesUnique.size()); remainingUnique.addFiles(filesRemainingUnique.size());  List<FileData> counts = new ArrayList<>(); Map<String, Boolean> firstSeenUniqueSegment = new HashMap<>(); for (FileInfo file : project.getProjectFiles()) { FileData numbers = new FileData(); numbers.filename = file.filePath; counts.add(numbers); int fileTotal = 0; int fileRemaining = 0; for (SourceTextEntry ste : file.entries) { String src = ste.getSrcText(); for (ProtectedPart pp : ste.getProtectedParts()) { src = src.replace(pp.getTextInSourceSegment(), pp.getReplacementUniquenessCalculation()); }  /* Number of words and chars calculated without all tags and protected parts. */ StatCount count = new StatCount(ste);  // add to total total.add(count); fileTotal = 1;  // add to remaining TMXEntry tr = project.getTranslationInfo(ste); if (!tr.isTranslated()) { remaining.add(count); fileRemaining = 1; }  // add to file's info numbers.total.add(count);  Boolean firstSeen = firstSeenUniqueSegment.get(src); if (firstSeen == null) { firstSeenUniqueSegment.put(src, false); numbers.unique.add(count);  if (!tr.isTranslated()) { numbers.remainingUnique.add(count); } }  if (!tr.isTranslated()) { numbers.remaining.add(count); } } total.addFiles(fileTotal); remaining.addFiles(fileRemaining); }  StringBuilder result = new StringBuilder();  result.append(OStrings.getString(""CT_STATS_Project_Statistics"")); result.append(""\n\n"");  String[][] headerTable = calcHeaderTable(new StatCount[] { total, remaining, unique, remainingUnique }); if (callback != null) { callback.setProjectTableData(htHeaders, headerTable); } result.append(TextUtil.showTextTable(htHeaders, headerTable, htAlign)); result.append(""\n\n"");  // STATISTICS BY FILE result.append(OStrings.getString(""CT_STATS_FILE_Statistics"")); result.append(""\n\n""); String[][] filesTable = calcFilesTable(project.getProjectProperties(), counts); if (callback != null) { callback.setFilesTableData(ftHeaders, filesTable); } result.append(TextUtil.showTextTable(ftHeaders, filesTable, ftAlign));  if (hotStat != null) { hotStat.numberOfSegmentsTotal = total.segments; hotStat.numberofTranslatedSegments = translated.size(); hotStat.numberOfUniqueSegments = unique.segments; hotStat.uniqueCountsByFile.clear(); for (FileData fd : counts) { hotStat.uniqueCountsByFile.put(fd.filename, fd.unique.segments); } }  return result.toString(); } "	0	0	0	0	0	1
"public TextChannel getErrorLogChannel() { return (testBot ? getChannelByID(""242297848123621376"") : getChannelByID(""226786557862871040"")); } "	0	0	0	0	0	1
@Override public void onMessageReceived(@NonNull MOKMessage message) { processNewMessage(message); boolean isMyOwnMsg = message.getSid().equals(myMonkeyID); updateConversation(isMyOwnMsg?message.getRid():message.getConversationID(), getSecondaryTextByMOkMessage(message), isMyOwnMsg? MonkeyConversation.ConversationStatus.deliveredMessage: MonkeyConversation.ConversationStatus.receivedMessage, isMyOwnMsg? 0 : 1, message.getDatetimeorder());  } 	0	0	0	0	0	1
"@Test(expected = SaveException.class) public final void testPerformExportTrowsSaveException() throws IOException, URISyntaxException, SaveException { String filename = ""ModsExportFormatTestAllFields.bib""; Path importFile = Paths.get(ModsExportFormatTestFiles.class.getResource(filename).toURI()); List<BibEntry> entries = testImporter.importDatabase(importFile, Charset.defaultCharset()).getDatabase() .getEntries();  modsExportFormat.performExport(databaseContext, """", charset, entries); } "	0	0	0	0	0	1
public int getPopulation() { return population; } 	0	0	0	0	0	1
@Override public Iterator<Tree> childrenIterator() { return Iterators.concat(Iterators.forArray(createKeyword, functionKeyword, identifier, openingParenthesis), parameterList.elementsAndSeparators(Functions.<ParameterTree> identity()), Iterators.forArray(closingParenthesis, returnType, resultSet, routineBody)); } 	0	0	0	0	0	1
@Subscribe public void onNewProblemAddedEvent(NewProblemAddedEvent event) { getData(0); } 	0	0	0	0	0	1
public State getNextState() { try { history.push(overflow.pop()); return overflow.peek(); } catch (EmptyStackException e) { return null; } } 	0	0	0	0	0	1
"@Override public <T> void onProvision(ProvisionInvocation<T> provision) { final Key<?> key = provision.getBinding().getKey(); final Class<?> clazz = key.getTypeLiteral().getRawType();  final T injectee; if (features == null) { LOG.info(""LifecycleProvisionListener not initialized yet : {}"", key); LOG.info(""LifecycleProvisionListener not initialized yet : {} source={}"", key, provision.getBinding().getSource());  injectee = provision.provision();  if (injectee instanceof LifecycleListener) { pendingLifecycleListeners.add((LifecycleListener)injectee); }  // TODO: Add to PreDestroy list return; }  final TypeLifecycleActions actions = getOrCreateActions(clazz);  // Instantiate the type and pass to the metrics.  This time captured will // include invoking any lifecycle events. metrics.push(key); try { injectee = provision.provision();  // Call all the LifecycleActions with PostConstruct methods being the last for (LifecycleAction processor : actions.postConstructActions) { try { processor.call(injectee); } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) { throw new ProvisionException(""Failed to provision object of type "" + key, e); } }  if (injectee instanceof LifecycleListener) { manager.addListener((LifecycleListener)injectee); } } finally { metrics.pop(); }  // Add any PreDestroy methods to the shutdown list of actions if (!actions.preDestroyActions.isEmpty()) { if (isShutdown.get() == false) { shutdownActions.add(new Runnable() { @Override public void run() { for (LifecycleAction m : actions.preDestroyActions) { try { m.call(injectee); } catch (Exception e) { LOG.error(""Failed to call @PreDestroy method {} on {}"", new Object[]{m, injectee.getClass().getName()}, e); } } } }); } else { LOG.warn(""Already shutting down.  Shutdown methods {} on {} will not be invoked"", new Object[]{actions.preDestroyActions, injectee.getClass().getName()}); } } } "	0	0	0	0	0	1
"@Override public void execute() throws MojoExecutionException, MojoFailureException { if (!Type.JANGAROO_PKG_PACKAGING.equals(project.getPackaging()) && !Type.JANGAROO_SWC_PACKAGING.equals(project.getPackaging())) { throw new MojoExecutionException(""This goal only supports projects with packaging type \""jangaroo-pkg\"" or \""jangaroo-swc\""""); } getLog().info(""Execute sencha packaging mojo""); FileHelper.ensureDirectory(new File(getSenchaPackageDirectory().getPath())); SenchaPackageConfigBuilder configBuilder = createSenchaConfigBuilder(); configure(configBuilder); prepareModule(configBuilder); } "	0	0	0	0	0	1
"public void start() throws Exception {  this.persistFile.clear();  if (persistDir != null) { this.persistFile.append(persistDir).append(File.separator).append(this.name).append(""_"") .append(PERSIST_FILE_NAME); } else { persistFile .append(System.getProperty(GmlcManagement.USSD_PERSIST_DIR_KEY, System.getProperty(GmlcManagement.USER_DIR_KEY))).append(File.separator).append(this.name) .append(""_"").append(PERSIST_FILE_NAME); }  logger.info(String.format(""Loading GMLC Properties from %s"", persistFile.toString()));  try { this.load(); } catch (FileNotFoundException e) { logger.warn(String.format(""Failed to load the GMLC configuration file. \n%s"", e.getMessage())); }  } "	0	0	0	0	0	1
"private boolean splitRecord(int start, File path, String outpath) throws FileNotFoundException {  int countfiles = 0; boolean split = false; Scanner fileScanner = new Scanner(path); List<String> locitest = new ArrayList<String>(); while (fileScanner.hasNextLine()) { String cur = fileScanner.nextLine(); if (!cur.startsWith("" "") && isTest) System.out.println(""curtest "" + cur); if (cur.indexOf(""LOCUS"") == 0) { String curlocus = cur.substring(start, cur.indexOf("" "", start + 1)); locitest.add(curlocus); if (locitest.size() > 1) { break; } } } fileScanner.close();  System.out.println(""locitest "" + locitest.size()); if (locitest.size() > 1) { if (outpath == null) outpath = workdir.getAbsolutePath() + ""/split_"" + path.getName(); System.out.println(""split outpath "" + outpath); File splitdir = new File(outpath); if (!splitdir.isDirectory()) { splitdir.mkdir(); }  Scanner fileScanner2 = new Scanner(path); List<String> loci = new ArrayList<String>(); StringBuilder sb = new StringBuilder(""""); while (fileScanner2.hasNextLine() && countfiles < MAX_ALLOWED_FILES_SPLIT) { String cur = fileScanner2.nextLine(); //if (!cur.startsWith("" "")) //    System.out.println(cur); if (cur.indexOf(""LOCUS"") == 0) { String curlocus = cur.substring(start, cur.indexOf("" "", start + 1)); if (isTest) System.out.println(""loci add "" + curlocus); loci.add(curlocus); sb.append(cur).append(""\n""); } else if (cur.indexOf(""//"") == 0) { sb.append(cur).append(""\n""); if (isTest) System.out.println(""loci2 "" + loci.size()); final int index = loci.size() - 1; if (isTest) System.out.println(""loci2 "" + loci.size() + ""\t"" + index); String curoutpath = outpath + ""/"" + loci.get(index) + "".gbk""; try { PrintWriter out = new PrintWriter(new FileWriter(curoutpath)); out.print(sb); out.close(); split = true; System.out.println(""    wrote: "" + outpath); countfiles++; } catch (IOException e) { System.out.println(""Error creating or writing file "" + outpath); System.out.println(""IOException: "" + e.getMessage()); }  sb = new StringBuilder(""""); } else { sb.append(cur).append(""\n""); } }   if (countfiles == MAX_ALLOWED_FILES_SPLIT && fileScanner2.hasNextLine()) { final String outpath2 = (workdir != null ? workdir + ""/"" : """") + ""README.txt""; System.out.println(""writing "" + outpath2); try { File outf = new File(outpath2); PrintWriter pw = new PrintWriter(outf);  String readmestr = ""The limit for uploading multiple contigs from a single GenBank file is "" + MAX_ALLOWED_FILES_SPLIT + "" contigs. "" + ""This download had more than "" + MAX_ALLOWED_FILES_SPLIT + "" contigs, only the first "" + MAX_ALLOWED_FILES_SPLIT + "" contigs will be uploaded.""; pw.print(readmestr); pw.close(); } catch (FileNotFoundException e) { System.out.println(""failed to write output "" + outpath); e.printStackTrace(); } }  fileScanner.close(); } return split; } "	0	0	0	0	0	1
public static SALARY get() { return new SALARY(); } 	0	0	0	0	0	1
@Override public void onGlobalLayout() { Util.removeGlobalLayoutObserver(mSuggestionsList, this); boolean isSuggestionItemsFillRecyclerView = updateSuggestionsSectionHeight(newSearchSuggestions, withAnim);  //we only need to employ the reverse layout technique if the items don't fill up the RecyclerView LinearLayoutManager suggestionsListLm = (LinearLayoutManager) mSuggestionsList.getLayoutManager(); if (isSuggestionItemsFillRecyclerView) { suggestionsListLm.setReverseLayout(false); } else { Collections.reverse(newSearchSuggestions); suggestionsListLm.setReverseLayout(true); } mSuggestionsList.setAlpha(1); } 	0	0	0	0	0	1
"@Override public void onTextChanged(CharSequence s, int start, int before, int count) { if(count > 0 && newTags.getChildAt(newTags.getChildCount()-1) == tagItem) { addTag(""""); //$NON-NLS-1$ } } "	0	0	0	0	0	1
public String getDateTime() { return dateTime; } 	0	0	0	0	0	1
"@Override public void testCompleted(final BluetoothDevice bluetoothDevice, final BluetoothGatt gatt) { Log.d(TAG, ""Test Completed. Failed: "" + mLatestTest.isFailed()); if (mLatestTest.isFailed()) { mFailed = true; } mDataCallback.dataUpdated(); if (!mPause) { mHandler.postDelayed(new Runnable() { @Override public void run() { start(bluetoothDevice, gatt); } }, TimeUnit.SECONDS.toMillis(1)); } } "	0	0	0	0	0	1
"@Nonnull @ReturnsMutableCopy protected List <File> scanDirectory () throws OpenAS2Exception { final File aResendDir = IOHelper.getDirectoryFile (getAttributeAsStringRequired (ATTR_RESEND_DIRECTORY));  final File [] aFiles = aResendDir.listFiles (); if (aFiles == null) { throw new InvalidParameterException (""Error getting list of files in directory"", this, ATTR_RESEND_DIRECTORY, aResendDir.getAbsolutePath ()); }  final List <File> ret = new ArrayList <File> (); if (aFiles.length > 0) for (final File aCurrentFile : aFiles) if (aCurrentFile.exists () && aCurrentFile.isFile () && aCurrentFile.canWrite () && isTimeToSend (aCurrentFile)) ret.add (aCurrentFile); return ret; } "	0	0	0	0	0	1
"@Override public boolean onNavigationItemSelected(MenuItem item) { int id = item.getItemId(); FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction(); switch (id) { case R.id.nav_triage: TriageFragment triageFragment = new TriageFragment(); fragmentTransaction.replace(R.id.fragment_container, triageFragment).commit(); break; case R.id.nav_consultation: ConsultationFragment consultationFragment = new ConsultationFragment(); fragmentTransaction.replace(R.id.fragment_container, consultationFragment).commit(); break; case R.id.nav_pharmacy: PharmacyFragment pharmacyFragment = new PharmacyFragment(); fragmentTransaction.replace(R.id.fragment_container, pharmacyFragment).commit(); break; case R.id.nav_inventory: InventoryFragment inventoryFragment = new InventoryFragment(); fragmentTransaction.replace(R.id.fragment_container, inventoryFragment).commit(); break; case R.id.nav_reports: ReportsFragment reportsFragment = new ReportsFragment(); fragmentTransaction.replace(R.id.fragment_container, reportsFragment).commit(); break; case R.id.nav_admin: AdminFragment adminFragment = new AdminFragment(); fragmentTransaction.replace(R.id.fragment_container, adminFragment).commit(); break; //      case R.id.nav_settings: //        Intent intent = new Intent(DrawerActivity.this, SettingsActivity.class); //        startActivity(intent); //        break; case R.id.nav_about: new LibsBuilder() .withActivityTitle(""About"") .withFields(R.string.class.getFields()) .withAboutIconShown(true) .withAboutVersionShown(true) .withVersionShown(true) .withActivityStyle(Libs.ActivityStyle.LIGHT_DARK_TOOLBAR) .start(DrawerActivity.this); break; case R.id.nav_logout: new MaterialDialog.Builder(this) .theme(Theme.LIGHT) .autoDismiss(true) .content(""Are you sure you want to logout?"") .positiveText(""Logout"") //TODO icon? .negativeColor(getResources().getColor(R.color.colorAccent)) .onPositive(this) .negativeText(""Dismiss"") .onNegative(new MaterialDialog.SingleButtonCallback() { @Override public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) { dialog.dismiss(); } }) .show(); break; } DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout); if (drawer != null) { drawer.closeDrawer(GravityCompat.START); } return true; } "	0	0	0	0	0	1
protected void postReadCleanUp(long now, boolean backup) { if (evictionEnabled) { readCountBeforeCleanUp++; if ((readCountBeforeCleanUp & POST_READ_CHECK_POINT) == 0) { cleanUp(now, backup); } }  } 	0	0	0	0	0	1
"@FXML void initialize() { tabbedPane.getTabs().addAll( addHTMLTab(resources.getString(""Menu.About.Name""), ""notice.html""), addHTMLTab(resources.getString(""Tab.Credits""), ""credits.html""), addHTMLTab(resources.getString(""Tab.AppLicense""), ""jgnash-license.html""), addHTMLTab(resources.getString(""Tab.GPLLicense""), ""gpl-license.html""), addHTMLTab(resources.getString(""Tab.LGPLLicense""), ""lgpl.html""), addHTMLTab(""Apache License"", ""apache-license.html""), addHTMLTab(""XStream License"", ""xstream-license.html""), getSystemPropertiesTab());  } "	0	0	0	0	0	1
public boolean hasChunk(int x, int z) { this.checkBounds(x, z);  try { int offset = this.getOffset(x, z); if (offset == 0) { // Does not exist return false; }  int sectorNumber = offset >> 8; int numSectors = offset & 0xff; if (sectorNumber + numSectors > this.sectorFree.size()) { this.logWarning(); return false; }  this.file.seek(sectorNumber * SECTOR_BYTES); int length = this.file.readInt(); if (length > SECTOR_BYTES * numSectors) { this.logWarning(); return false; }  byte version = this.file.readByte(); if (version == VERSION_GZIP || version == VERSION_DEFLATE) { return true; } } catch (IOException ignored) { }  this.logWarning(); return false; } 	0	0	0	0	0	1
@Override public Void call() { try { ByteBuffer ciphertext; while ((ciphertext = encryptor.ciphertext()) != FileContentCryptor.EOF) { file.write(ciphertext); } } catch (InterruptedException e) { Thread.currentThread().interrupt(); } return null; } 	0	0	0	0	0	1
"@RequestMapping(value = ""/visitsRecords"", method = RequestMethod.POST) @PreAuthorize(Constants.Roles.HAS_DATA_ACCESS) @ResponseBody public Records<?> getVisits(GridSettings settings) throws IOException { Order order = null; if (!settings.getSortColumn().isEmpty()) { order = new Order(settings.getSortColumn(), settings.getSortDirection()); }  QueryParams queryParams = new QueryParams(settings.getPage(), settings.getRows(), order);  Subject subject; List<Subject> subjects; int startRow = (settings.getPage() - 1) * settings.getRows(); int endRow = settings.getPage() * settings.getRows(); long recordCount; int rowCount;  DateTimeFormatter lookupDateTimeFormat = DateTimeFormat.forPattern(""yyyy-MM-dd HH:mm Z"");  if (settings.getLookup() != null) { Map<String, Object> fields = getFields(settings); switch (settings.getLookup()) { case ""Find Visit By Date"": DateTime date = DateTime.parse((String) fields.get(""Date""), lookupDateTimeFormat); List<Visit> visits = visitDataService.findVisitByDate(date, queryParams);  recordCount = visitDataService.countFindVisitByDate(date); rowCount = (int) Math.ceil(recordCount / (double) settings.getRows());  return new Records<>(settings.getPage(), rowCount, (int) recordCount, visits); case ""Find Visit By Type"": VisitType type = VisitType.valueOf((String) fields.get(""Type"")); visits = visitDataService.findVisitByType(type, queryParams);  recordCount = visitDataService.countFindVisitByType(type); rowCount = (int) Math.ceil(recordCount / (double) settings.getRows());  return new Records<>(settings.getPage(), rowCount, (int) recordCount, visits); case ""Find Visit By SubjectId"": String subjectId = (String) fields.get(""SubjectId""); subject = subjectDataService.findSubjectBySubjectId(subjectId); visits = subject.getVisits();  recordCount = visits.size(); rowCount = (int) Math.ceil(recordCount / (double) settings.getRows());  if (recordCount < endRow) { endRow = (int) recordCount; }  visits = visits.subList(startRow, endRow);  return new Records<>(settings.getPage(), rowCount, (int) recordCount, visits); case ""Find Visit By Subject Name"": String name = (String) fields.get(""Name""); subjects = subjectDataService.findSubjectByName(name);  visits = new ArrayList<>(); for (Subject s : subjects) { visits.addAll(s.getVisits()); }  recordCount = visits.size(); rowCount = (int) Math.ceil(recordCount / (double) settings.getRows());  if (recordCount < endRow) { endRow = (int) recordCount; }  visits = visits.subList(startRow, endRow);  return new Records<>(settings.getPage(), rowCount, (int) recordCount, visits); case ""Find Visit By Subject Address"": String address = (String) fields.get(""Address""); subjects = subjectDataService.findSubjectByAddress(address);  visits = new ArrayList<>(); for (Subject s : subjects) { visits.addAll(s.getVisits()); }  recordCount = visits.size(); rowCount = (int) Math.ceil(recordCount / (double) settings.getRows());  if (recordCount < endRow) { endRow = (int) recordCount; }  visits = visits.subList(startRow, endRow);  return new Records<>(settings.getPage(), rowCount, (int) recordCount, visits); } }  recordCount = visitDataService.count(); rowCount = (int) Math.ceil(recordCount / (double) settings.getRows());  List<Visit> visits = visitDataService.retrieveAll(queryParams); return new Records<>(settings.getPage(), rowCount, (int) recordCount, visits); } "	0	0	0	0	0	1
"@Override public void onWebSocketClose(int statusCode, String reason) { super.onWebSocketClose(statusCode, reason); Discord4J.LOGGER.info(LogMarkers.WEBSOCKET, ""Shard {} websocket disconnected with status code {} and reason \""{}\""."", shard.getInfo()[0], statusCode, reason);  isReady = false; hasReceivedReady = false; heartbeatHandler.shutdown(); if (!(this.state == State.DISCONNECTING || statusCode == 4003 || statusCode == 4004 || statusCode == 4005 || statusCode == 4010) && !(statusCode == 1001 && reason.equals(""Shutdown""))) { this.state = State.RESUMING; client.getDispatcher().dispatch(new DisconnectedEvent(DisconnectedEvent.Reason.ABNORMAL_CLOSE, shard)); client.reconnectManager.scheduleReconnect(this); } } "	0	0	0	0	0	1
"private CharSequence generateEnumFieldNotPresentCondition(final int sinceVersion, final String enumName, final String indent) { if (0 == sinceVersion) { return """"; }  return String.format( indent + ""        if (actingVersion_ < %1$d)\n"" + indent + ""        {\n"" + indent + ""            return %2$s::NULL_VALUE;\n"" + indent + ""        }\n\n"", Integer.valueOf(sinceVersion), enumName ); } "	0	0	0	0	0	1
public int getTemperature() { return temperature; } 	0	0	0	0	0	1
public static String getSourceString(BibEntry entry, BibDatabaseMode type) throws IOException { StringWriter stringWriter = new StringWriter(200); LatexFieldFormatter formatter = LatexFieldFormatter .buildIgnoreHashes(Globals.prefs.getLatexFieldFormatterPreferences()); new BibEntryWriter(formatter, false).writeWithoutPrependedNewlines(entry, stringWriter, type);  return stringWriter.getBuffer().toString(); } 	0	0	0	0	0	1
void removeSearchListeners() { for (SearchQueryHighlightListener listener : searchListeners) { panel.frame().getGlobalSearchBar().getSearchQueryHighlightObservable().removeSearchListener(listener); } } 	0	0	0	0	0	1
"public void canConvertToOrder(Order order) throws MissingPermissionException, InvalidOrderFacilityException { if (orderService.isFacilityValid(order, order.getCreatedById(), order.getSupplyingFacilityId())) { hasPermission(REQUISITION_CONVERT_TO_ORDER, order.getProgramId(), order.getSupplyingFacilityId()); } else { throw new InvalidOrderFacilityException(""Can not create order "" + order.getId() + "". Must "" + ""have supplying facility""); } } "	0	0	0	0	0	1
"@Test public void testGauge() throws IOException{ GaugeRequest req = new GaugeRequest() .withMetric(""test.metric"") .withSampleRate(5L) .withTags(getTags()) .withValue(6L); client.gauge(req); verify(socket, atLeastOnce()).send(argCaptor.capture()); assertEquals(new String(argCaptor.getValue().getData()), GAUGE_FORMAT); } "	0	0	0	0	0	1
"@Test public void testIncrement() throws IOException{ IncrementRequest req = new IncrementRequest() .withMetric(""test.metric"") .withSampleRate(5L) .withTags(getTags()) .withValue(6L); client.increment(req); verify(socket, atLeastOnce()).send(argCaptor.capture()); assertEquals(new String(argCaptor.getValue().getData()), INCREMENT_FORMAT); } "	0	0	0	0	0	1
"protected String formatServiceCheck(ServiceCheckRequest req){ if(req.getCheckName() == null || req.getCheckName().isEmpty() || req.getStatus() == null){ throw new ServiceCheckException(""checkName and status are required fields""); } StringBuilder builder = new StringBuilder(); Formatter formatter = new Formatter(builder); formatter.format(""_sc|%s|%d"", req.getCheckName(), req.getStatus().ordinal()); if(req.getTimestamp() != null){ formatter.format(""|d:%d"", req.getTimestamp().getTime()); } if(req.getHostname()!=null && !req.getHostname().isEmpty()){ formatter.format(""|h:%s"", req.getHostname()); } if(req.getTags()!= null && !req.getTags().isEmpty()){ formatter.format(""|#%s"", formatTags(req.getTags())); } if(req.getMessage()!=null && !req.getMessage().isEmpty()){ formatter.format(""|m:%s"", req.getMessage()); } return builder.toString(); } "	0	0	0	0	0	1
"protected String formatMetric(String metric, String metricType, Long value, List<Tag> tags, Long sampleRate){ if(metric == null || metric.isEmpty() || value == null){ throw new MetricException(""metric and value are required fields""); } StringBuilder builder = new StringBuilder(); Formatter formatter = new Formatter(builder); formatter.format(""%s:%d|%s"", metric, value, metricType);  if(sampleRate != null && sampleRate != 1L){ formatter.format(""|@%d"", sampleRate); } if(tags != null && !tags.isEmpty()){ formatter.format(""|#%s"", formatTags(tags)); } return builder.toString(); } "	0	0	0	0	0	1
"@Override public void timing(TimingRequest req){ send(formatMetric(req.getMetric(), ""ms"", req.getValue(),req.getTags(), req.getSampleRate())); } "	0	0	0	0	0	1
@Override @ResponseFilter public void filterA(WebResponse repsonse) { } 	0	0	0	0	0	1
"public void populateFilterMappings() { filterMappings.put(SearchFilter.SOURCE, new FilterDetails(StringUtils.SPACE, ""fa.source =:"" + DATASOURCE)); filterMappings.put(SearchFilter.OWNER, new FilterDetails("" fp.fluxPartyIdentifiers fpi"", ""fpi.fluxPartyIdentifierId =:"" + OWNER_ID + StringUtils.SPACE)); filterMappings.put(SearchFilter.FROM, new FilterDetails("" fpFrom.fluxPartyIdentifiers fpiFrom"", ""fpiFrom.fluxPartyIdentifierId =:"" + FROM_ID + StringUtils.SPACE)); // filterMappings.put(SearchFilter.PERIOD_START, new FilterDetails(DELIMITED_PERIOD_TABLE_ALIAS, ""( dp.startDate >= :"" + OCCURENCE_START_DATE + ""  OR a.occurence  >= :"" + OCCURENCE_START_DATE + "" )"")); filterMappings.put(SearchFilter.PERIOD_START, new FilterDetails("" "", ""   a.calculatedStartTime  >= :"" + OCCURENCE_START_DATE + "" "")); filterMappings.put(SearchFilter.PERIOD_END, new FilterDetails(DELIMITED_PERIOD_TABLE_ALIAS, "" (dp.endDate <= :"" + OCCURENCE_END_DATE+"" OR  a.calculatedStartTime <= :""+ OCCURENCE_END_DATE +"")"") ); filterMappings.put(SearchFilter.VESSEL_NAME, new FilterDetails(""fa.vesselTransportMeans vt"", ""vt.name IN (:"" + VESSEL_IDENTITY_NAME + "")"")); filterMappings.put(SearchFilter.VESSEL_IDENTIFIRE, new FilterDetails(""vt.vesselIdentifiers vi"", ""vi.vesselIdentifierId IN (:"" + VESSEL_IDENTIFIRE + "")"")); filterMappings.put(SearchFilter.VESSEL_GUIDS, new FilterDetails(""fa.vesselTransportMeans vtMeans"", ""vtMeans.guid IN (:"" + VTM_GUIDS + "")"")); filterMappings.put(SearchFilter.PURPOSE, new FilterDetails(FLUX_REPORT_DOC_TABLE_ALIAS, ""flux.purposeCode IN (:"" + PURPOSE_CODE + "")"")); filterMappings.put(SearchFilter.REPORT_TYPE, new FilterDetails(StringUtils.SPACE, ""fa.typeCode IN (:"" + REPORT_TYPE_CODE + "")"")); filterMappings.put(SearchFilter.ACTIVITY_TYPE, new FilterDetails(StringUtils.SPACE, ""a.typeCode IN (:"" + ACTIVITY_TYPE_CODE + "")"")); filterMappings.put(SearchFilter.AREAS, new FilterDetails(""a.fluxLocations fluxLoc"", ""( fluxLoc.typeCode IN ('AREA') and fluxLoc.fluxLocationIdentifier =:"" + AREA_ID + "" )"")); filterMappings.put(SearchFilter.PORT, new FilterDetails(""a.fluxLocations fluxLoc"", "" (fluxLoc.typeCode IN ('LOCATION') and fluxLoc.fluxLocationIdentifier =:"" + PORT_ID  + "" )"")); filterMappings.put(SearchFilter.GEAR, new FilterDetails(GEAR_TYPE_TABLE_ALIAS, ""fg.typeCode IN (:"" + FISHING_GEAR + "")"")); filterMappings.put(SearchFilter.SPECIES, new FilterDetails(FA_CATCH_TABLE_ALIAS + "" LEFT JOIN  "" + AAP_PROCESS_TABLE_ALIAS + "" LEFT JOIN  "" + AAP_PRODUCT_TABLE_ALIAS, ""( faCatch.speciesCode IN (:"" + SPECIES_CODE + "") "" + "" OR aprod.speciesCode IN (:"" + SPECIES_CODE + ""))"")); filterMappings.put(SearchFilter.QUANTITY_MIN, new FilterDetails(FA_CATCH_TABLE_ALIAS + "" LEFT JOIN FETCH "" + AAP_PROCESS_TABLE_ALIAS + "" LEFT JOIN FETCH "" + AAP_PRODUCT_TABLE_ALIAS, "" (faCatch.calculatedWeightMeasure  BETWEEN :"" + QUANTITY_MIN)); filterMappings.put(SearchFilter.QUANTITY_MAX, new FilterDetails("" "", ""  :"" + QUANTITY_MAX + "") "")); filterMappings.put(SearchFilter.MASTER, new FilterDetails("" fa.vesselTransportMeans vt JOIN FETCH vt.contactParty cparty JOIN FETCH cparty.contactPerson cPerson"", ""(UPPER(cPerson.title) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or "" + ""UPPER(cPerson.givenName) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or UPPER(cPerson.middleName) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or UPPER(cPerson.familyName) IN (:"" + CONTACT_PERSON_NAME + "") "" + StringUtils.SPACE + ""or UPPER(cPerson.familyNamePrefix) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or UPPER(cPerson.nameSuffix) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or UPPER(cPerson.alias) IN (:"" + CONTACT_PERSON_NAME + "") "" + "")"")); filterMappings.put(SearchFilter.FA_REPORT_ID, new FilterDetails(StringUtils.SPACE, ""fa.id =:"" + FAREPORT_ID)); filterMappings.put(SearchFilter.AREA_GEOM, new FilterDetails(StringUtils.SPACE, ""intersects(fa.geom, :"" + AREA_GEOM + "") = true "")); filterMappings.put(SearchFilter.TRIP_ID, new FilterDetails(StringUtils.SPACE + FISHING_TRIP_TABLE_ALIAS + "" JOIN FETCH "" + FISHING_TRIP_IDENTIFIER_TABLE_ALIAS, ""fishingTripId.tripId =:"" + TRIP_ID + StringUtils.SPACE)); } "	0	0	0	0	0	1
private String buildToken(Tokens token) { LOGGER.warn(token.getExpirationTime().toString()); return Jwts.builder().setId(token.getUser().getEmail()) .setExpiration(token.getExpirationTime()) .setIssuedAt(token.getCreationTime()) .claim(CLAIM_SCOPE, token.getTokenType().getCode()) .setSubject(token.getUser().getEmail()) .signWith(SignatureAlgorithm.HS512, tokenSigningKey) .compact(); } 	0	0	0	0	0	1
public static ArrayList<Timer> getTimerList() { return timerList; } 	0	0	0	0	0	1
public static String serializeToJson(Object model, boolean deepSerialize, boolean excludeNullObject) { return serialize(model, FORMAT_JSON, null, deepSerialize, false, excludeNullObject); } 	0	0	0	0	0	1
public static JSONObject serializeToJsonObjectWithExcludes(Object model, String[] excludes, boolean deepSerialize, String... includes) throws Exception { return new JSONObject(serialize(model, FORMAT_JSON, excludes, deepSerialize, includes)); } 	0	0	0	0	0	1
public static String serializeToJsonWithExcludes(Object model, String[] excludes, boolean deepSerialize, boolean excludeNullObject, String... includes) { return serialize(model, FORMAT_JSON, excludes, deepSerialize, excludeNullObject, includes); } 	0	0	0	0	0	1
public static JSONObject serializeToJsonObjectWithExcludes(Object model, String[] excludes, String... includes) throws Exception { return new JSONObject(serialize(model, FORMAT_JSON, excludes, includes)); } 	0	0	0	0	0	1
public static String serialize(Object model, String type, String[] excludes, boolean deepSerialize, boolean excludeNullObject, String... includes) { return serialize(model, type, excludes, deepSerialize, true, excludeNullObject, includes); } 	0	0	0	0	0	1
public static ModelAndView toJsonModelAndView(Object model, boolean deepSerialize) { return toModelAndView(serializeToJson(model, deepSerialize)); } 	0	0	0	0	0	1
private Resource buildResourceFromInputParameters(String data, User user) { return JsonDeserializer.deserialize(data, Resource.class); } 	0	0	0	0	0	1
"@ApiModelProperty(required = true, value = ""The order including line items to be checked out."") public Squareupconnectv2ordersserviceCreateOrderRequestOrder getOrder() { return order; } "	0	0	0	0	0	1
"@Inject(method = ""run"", at = @At(""HEAD""), cancellable = true, remap = false) private void onRun(CallbackInfo ci) { final Terminal terminal = TerminalConsoleAppender.getTerminal();  if (terminal != null) { // Set our console color formatter TerminalConsoleAppender.setFormatter(ConsoleFormatter.INSTANCE);  LineReader reader = LineReaderBuilder.builder() .appName(""SpongeVanilla"") .terminal(terminal) .completer(new ConsoleCommandCompleter(this.server)) .build(); reader.unsetOpt(LineReader.Option.INSERT_TAB);  TerminalConsoleAppender.setReader(reader);  try { String line; while (!this.server.isServerStopped() && this.server.isServerRunning()) { line = reader.readLine(""> ""); if (line == null) { break; }  line = line.trim(); if (!line.isEmpty()) { this.server.addPendingCommand(line, this.server); } } } catch (UserInterruptException e) { this.server.initiateShutdown(); } finally { TerminalConsoleAppender.setReader(null); }  ci.cancel(); } else { // TODO: TextSerializers are initialized too late, fix this properly // TerminalConsoleAppender.setFormatter(TextSerializers.LEGACY_FORMATTING_CODE::stripCodes); TerminalConsoleAppender.setFormatter(s -> LegacyTexts.strip(s, SpongeTexts.COLOR_CHAR)); } } "	0	0	0	0	0	1
"@Check public void checkAttributeNameIsValid(HtmlAttr attr) { String attrName = attr.getName(); EObject container = attr.eContainer(); if (container instanceof HtmlTag) { HtmlTag tag = (HtmlTag) container; String tagName = tag.getName(); if (!validAttributes.containsKey(tagName.toUpperCase()) || !validAttributes.get(tagName.toUpperCase()) .contains(attrName.toUpperCase())) { warning(""Attribute '"" + attrName + ""' is not allowed inside '<"" + tagName + "">'."", HtmllabelPackage.Literals.HTML_ATTR__NAME); } } } "	0	0	0	0	0	1
"public CompletableFuture<ResponseMessage> createEvidenceDefault(StandardBusinessDocumentHeader sbdh, REMMDMessageType remType, Authorization auth) {  String authorizationHeader; ResponseMessage rm = new ResponseMessage(); String requestBody; try { String authHeader = auth.getUsername().toString() + "":"" + auth.getPassword().toString(); String authHeaderEncoded = Base64.getEncoder().encodeToString(authHeader.getBytes(""utf-8"")); authorizationHeader = ""Basic "" + authHeaderEncoded; } catch (UnsupportedEncodingException e) { throw new EDeliveryException(e); } RequestBodyGenerator rbg = new RequestBodyGenerator();  requestBody = rbg.generateRemMessageBody(sbdh, remType, signatures);  return httpClient.preparePost(sendEndpoind).addHeader(""Content-Type"", ""application/xml"") .addHeader(""Authorization"", authorizationHeader).execute().toCompletableFuture() .exceptionally(t -> { throw new EDeliveryException(t); }) .thenApply(resp -> { int status = resp.getStatusCode();  switch (status) { case 201: rm.setStatus(201); rm.setMessage(""Message send""); break; case 202: rm.setStatus(202); rm.setMessage(""Created""); break; case 400: rm.setStatus(400); rm.setMessage(""Bad Request""); break; case 401: rm.setStatus(401); rm.setMessage(resp.getResponseBody()); break; case 406: rm.setStatus(406); rm.setMessage(""Message not in the right format""); break; case 500: rm.setStatus(500); rm.setMessage(""Internal server error from AP connector""); break; } return rm; });  } "	0	0	0	0	0	1
"@UiHandler(""ancPendingListSeeMore"") public void onClickPendingListSeeMore(ClickEvent event){ lblPendingPleaseWait.setVisible(true); ancPendingListSeeMore.setVisible(false); getUiHandlers().getMembersListByCollectionId(classpageDo.getClasspageCode(),  pendingOffsetValue, pageSize, ""pending"",true,true);	//this will callback displayPendingMembersList method .... } "	0	0	0	0	0	1
"private void completeDocument(SBOLDocument document) { completed = new HashSet<URI>(); int size = document.getTopLevels().size(); int count = 0; for (TopLevel topLevel : document.getTopLevels()) { completeDocument(document,topLevel); count++; System.err.println(count + "" out of "" + size); } } "	0	0	0	0	0	1
public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.collectables);  GridView gridview = (GridView) findViewById(R.id.gridview);  AchievementContract achievementContract = new AchievementContract(this); adapter = new SimpleCursorAdapter(this, R.layout.collectables_cell, achievementContract.getAchievements(), FROM, TO); adapter.setViewBinder(new CollectableViewBinder(this)); gridview.setAdapter(adapter); } 	0	0	0	0	0	1
public boolean isBusinessDay(int day) { if (day > 0 && day < 5) { return true; } else return false; } 	0	0	0	0	0	1
"private boolean handleClientException(Exception e) {  // Session exists if (e instanceof SessionExistsException) { logger.info(""Session already exists. Continuing...""); return true;  // Controller offline } else if (e instanceof ControllerOfflineException) { logger.error(""innogy SmartHome Controller is offline. {}"", e.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, e.getMessage()); dispose(); scheduleReinitialize(); return false;  // Configuration error } else if (e instanceof ConfigurationException) { logger.error(""Configuration error: {}"", e.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage()); dispose(); return false;  // invalid auth code } else if (e instanceof InvalidAuthCodeException) { logger.error(""Error fetching access tokens. Invalid authcode! Please generate a new one.""); org.eclipse.smarthome.config.core.Configuration configuration = editConfiguration(); configuration.put(AUTH_CODE, """"); updateConfiguration(configuration); config.setAuthCode(""""); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, ""Invalid authcode. Please generate a new one!""); dispose(); return false;  } else if (e instanceof InvalidActionTriggeredException) { logger.error(""Error triggering action: {}"", e.getMessage()); return true;  // io error } else if (e instanceof IOException) { logger.error(""IO error: {}"", e.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage()); dispose(); scheduleReinitialize(REINITIALIZE_DELAY_LONG_SECONDS); return false;  // unexpected API error } else if (e instanceof ApiException) { logger.error(""Unexcepted API error: {}"", e.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage()); dispose(); scheduleReinitialize(REINITIALIZE_DELAY_LONG_SECONDS); return false;  // java.net.SocketTimeoutException } else if (e instanceof SocketTimeoutException) { logger.error(""Socket timeout: {}"", e.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage()); dispose(); scheduleReinitialize(); return false;  // unknown } else { logger.error(""Unknown exception"", e); e.printStackTrace(); dispose(); scheduleReinitialize(); return false; } } "	0	0	0	0	0	1
public DealerDeliveryTO processDijakstra(String sourceAddress, List<OrderTO> orders) throws BusinessException { DealerDeliveryTO dealerDeliveryTO = new DealerDeliveryTO(); dealerDeliveryTO.setOrderList(orders); processDijakstra(sourceAddress, dealerDeliveryTO); return dealerDeliveryTO; } 	0	0	0	0	0	1
@Override protected Cart.DAO cartAccessor() { return new CartDAO(this); } 	0	0	0	0	0	1
"public static void runDebug() { File debugFile = new File(plugin.getDataFolder(), ""debug.txt""); if (debugFile.exists()) { debugFile.delete(); // We're starting brand new. } writeToDebug(""ProjectKorra Debug: Paste this on http://pastie.org and put it in your bug report thread.""); writeToDebug(""====================""); writeToDebug(""""); writeToDebug(""""); writeToDebug(""Date Created: "" + getCurrentDate()); writeToDebug(""Bukkit Version: "" + Bukkit.getServer().getVersion()); writeToDebug(""""); writeToDebug(""ProjectKorra (Core) Information""); writeToDebug(""====================""); writeToDebug(""Version: "" + plugin.getDescription().getVersion()); writeToDebug(""Author: "" + plugin.getDescription().getAuthors()); if (hasRPG()) { writeToDebug(""""); writeToDebug(""ProjectKorra (RPG) Information""); writeToDebug(""====================""); writeToDebug(""Version: "" + getRPG().getDescription().getVersion()); writeToDebug(""Author: "" + getRPG().getDescription().getAuthors()); } if (hasItems()) { writeToDebug(""""); writeToDebug(""ProjectKorra (Items) Information""); writeToDebug(""====================""); writeToDebug(""Version: "" + getItems().getDescription().getVersion()); writeToDebug(""Author: "" + getItems().getDescription().getAuthors()); } writeToDebug(""""); writeToDebug(""Ability Information""); writeToDebug(""====================""); for (String ability: AbilityModuleManager.abilities) { if (StockAbilities.isStockAbility(ability) && !GeneralMethods.isDisabledStockAbility(ability)) { writeToDebug(ability + "" - STOCK ABILITY""); } else { writeToDebug(ability + "" - UNOFFICIAL ABILITY""); } } writeToDebug(""""); writeToDebug(""Supported Plugins""); writeToDebug(""===================="");  boolean respectWorldGuard = plugin.getConfig().getBoolean(""Properties.RegionProtection.RespectWorldGuard""); boolean respectPreciousStones = plugin.getConfig().getBoolean(""Properties.RegionProtection.RespectPreciousStones""); boolean respectFactions = plugin.getConfig().getBoolean(""Properties.RegionProtection.RespectFactions""); boolean respectTowny = plugin.getConfig().getBoolean(""Properties.RegionProtection.RespectTowny""); boolean respectGriefPrevention = plugin.getConfig().getBoolean(""Properties.RegionProtection.RespectGriefPrevention""); boolean respectLWC = plugin.getConfig().getBoolean(""Properties.RegionProtection.RespectLWC""); PluginManager pm = Bukkit.getPluginManager();  Plugin wgp = pm.getPlugin(""WorldGuard""); Plugin psp = pm.getPlugin(""PreciousStones""); Plugin fcp = pm.getPlugin(""Factions""); Plugin twnp = pm.getPlugin(""Towny""); Plugin gpp = pm.getPlugin(""GriefPrevention""); Plugin massivecore = pm.getPlugin(""MassiveCore""); Plugin lwc = pm.getPlugin(""LWC"");  if (wgp != null && respectWorldGuard) { writeToDebug(""WorldGuard v"" + wgp.getDescription().getVersion()); } if (psp != null && respectPreciousStones) { writeToDebug(""PreciousStones v"" + psp.getDescription().getVersion()); } if (fcp != null && respectFactions) { writeToDebug(""Factions v"" + fcp.getDescription().getVersion()); } if (massivecore != null && respectFactions) { writeToDebug(""MassiveCore v"" + massivecore.getDescription().getVersion()); } if (twnp != null && respectTowny) { writeToDebug(""Towny v"" + twnp.getDescription().getVersion()); } if (gpp != null && respectGriefPrevention) { writeToDebug(""GriefPrevention v"" + gpp.getDescription().getVersion()); } if (lwc != null && respectLWC) { writeToDebug(""LWC v"" + lwc.getDescription().getVersion()); }  writeToDebug(""""); writeToDebug(""Plugins Hooking Into ProjectKorra (Core)""); writeToDebug(""====================""); for (Plugin plugin: Bukkit.getPluginManager().getPlugins()) { if (plugin.getDescription().getDepend() != null && plugin.getDescription().getDepend().contains(""ProjectKorra"")) { writeToDebug(plugin.getDescription().getName() + "" v"" + plugin.getDescription().getVersion()); } } } "	0	0	0	0	0	1
private void loadMAModules() { for(MultiAbilityModule mam : multiAbility) { mam.onThisLoad(); AbilityModuleManager.abilities.add(mam.getName()); for (StockAbilities a: StockAbilities.values()) { if (a.name().equalsIgnoreCase(mam.getName())){ AbilityModuleManager.disabledStockAbilities.add(a.name()); } } if (mam.getElement() == Element.Air.toString()) AbilityModuleManager.airbendingabilities.add(mam.getName()); if (mam.getElement() == Element.Water.toString()) AbilityModuleManager.waterbendingabilities.add(mam.getName()); if (mam.getElement() == Element.Earth.toString()) AbilityModuleManager.earthbendingabilities.add(mam.getName()); if (mam.getElement() == Element.Fire.toString()) AbilityModuleManager.firebendingabilities.add(mam.getName()); if (mam.getElement() == Element.Chi.toString()) AbilityModuleManager.chiabilities.add(mam.getName()); AbilityModuleManager.shiftabilities.add(mam.getName()); if (mam.isHarmlessAbility()) AbilityModuleManager.harmlessabilities.add(mam.getName());  if (mam.getSubElement() != null) { AbilityModuleManager.subabilities.add(mam.getName()); switch(mam.getSubElement()) { case Bloodbending: AbilityModuleManager.bloodabilities.add(mam.getName()); break; case Combustion: AbilityModuleManager.combustionabilities.add(mam.getName()); break; case Flight: AbilityModuleManager.flightabilities.add(mam.getName()); break; case Healing: AbilityModuleManager.healingabilities.add(mam.getName()); break; case Icebending: AbilityModuleManager.iceabilities.add(mam.getName()); break; case Lavabending: AbilityModuleManager.lavaabilities.add(mam.getName()); break; case Lightning: AbilityModuleManager.lightningabilities.add(mam.getName()); break; case Metalbending: AbilityModuleManager.metalabilities.add(mam.getName()); break; case Plantbending: AbilityModuleManager.plantabilities.add(mam.getName()); break; case Sandbending: AbilityModuleManager.sandabilities.add(mam.getName()); break; case SpiritualProjection: AbilityModuleManager.spiritualprojectionabilities.add(mam.getName()); break; } }  MultiAbilityManager.multiAbilityList.add(new MultiAbility(mam.getName(), mam.getAbilities())); AbilityModuleManager.descriptions.put(mam.getName(), mam.getDescription()); AbilityModuleManager.authors.put(mam.getName(), mam.getAuthor()); } } 	0	0	0	0	0	1
"private void fetchMessages(List<WebDavMessage> messages, MessageRetrievalListener<WebDavMessage> listener, int lines) throws MessagingException { WebDavHttpClient httpclient; httpclient = store.getHttpClient();  /** * We can't hand off to processRequest() since we need the stream to parse. */ for (int i = 0, count = messages.size(); i < count; i++) { WebDavMessage wdMessage = messages.get(i); int statusCode = 0;  if (listener != null) { listener.messageStarted(wdMessage.getUid(), i, count); }  /** * If fetch is called outside of the initial list (ie, a locally stored message), it may not have a URL * associated. Verify and fix that */ if (wdMessage.getUrl().equals("""")) { wdMessage.setUrl(getMessageUrls(new String[]{wdMessage.getUid()}).get(wdMessage.getUid())); Log.i(LOG_TAG, ""Fetching messages with UID = '"" + wdMessage.getUid() + ""', URL = '"" + wdMessage.getUrl() + ""'""); if (wdMessage.getUrl().equals("""")) { throw new MessagingException(""Unable to get URL for message""); } }  try { Log.i(LOG_TAG, ""Fetching message with UID = '"" + wdMessage.getUid() + ""', URL = '"" + wdMessage.getUrl() + ""'""); HttpGet httpget = new HttpGet(new URI(wdMessage.getUrl())); HttpResponse response; HttpEntity entity;  httpget.setHeader(""translate"", ""f""); if (store.getAuthentication() == WebDavConstants.AUTH_TYPE_BASIC) { httpget.setHeader(""Authorization"", store.getAuthString()); } response = httpclient.executeOverride(httpget, store.getContext());  statusCode = response.getStatusLine().getStatusCode();  entity = response.getEntity();  if (statusCode < 200 || statusCode > 300) { throw new IOException(""Error during with code "" + statusCode + "" during fetch: "" + response.getStatusLine().toString()); }  if (entity != null) { InputStream istream = null; StringBuilder buffer = new StringBuilder(); String tempText; String resultText; BufferedReader reader = null; int currentLines = 0;  try { istream = WebDavHttpClient.getUngzippedContent(entity);  if (lines != -1) { //Convert the ungzipped input stream into a StringBuilder //containing the given line count reader = new BufferedReader(new InputStreamReader(istream), 8192);  while ((tempText = reader.readLine()) != null && (currentLines < lines)) { buffer.append(tempText).append(""\r\n""); currentLines++; }  IOUtils.closeQuietly(istream);  resultText = buffer.toString(); istream = new ByteArrayInputStream(resultText.getBytes(""UTF-8"")); } //Parse either the entire message stream, or a stream of the given lines wdMessage.parse(istream);  } catch (IOException ioe) { Log.e(LOG_TAG, ""IOException: "" + ioe.getMessage() + ""\nTrace: "" + WebDavUtils.processException(ioe)); throw new MessagingException(""I/O Error"", ioe); } finally { IOUtils.closeQuietly(reader); IOUtils.closeQuietly(istream); } } else { Log.v(LOG_TAG, ""Empty response""); }  } catch (IllegalArgumentException iae) { Log.e(LOG_TAG, ""IllegalArgumentException caught "" + iae + ""\nTrace: "" + WebDavUtils.processException(iae)); throw new MessagingException(""IllegalArgumentException caught"", iae); } catch (URISyntaxException use) { Log.e(LOG_TAG, ""URISyntaxException caught "" + use + ""\nTrace: "" + WebDavUtils.processException(use)); throw new MessagingException(""URISyntaxException caught"", use); } catch (IOException ioe) { Log.e(LOG_TAG, ""Non-success response code loading message, response code was "" + statusCode + ""\nURL: "" + wdMessage.getUrl() + ""\nError: "" + ioe.getMessage() + ""\nTrace: "" + WebDavUtils.processException(ioe)); throw new MessagingException(""Failure code "" + statusCode, ioe); }  if (listener != null) { listener.messageFinished(wdMessage, i, count); } } } "	0	0	0	0	0	1
@Override protected void onPostProcess(String what, String[] oldPathNames, String[] newPathNames, int modifyCount, int itemCount, int opCode) { mInitialFilePath = null; switch (opCode) { case OP_MOVE: case OP_RENAME: if ((newPathNames!= null) && (newPathNames.length > 0)) { // so selection will be restored to this after load complete mInitialFilePath = newPathNames[0]; } break; case OP_COPY: if ((oldPathNames!= null) && (oldPathNames.length > 0)) { // so selection will be restored to this after load complete mInitialFilePath = oldPathNames[0]; } break; }  super.onPostProcess(what, oldPathNames, newPathNames, modifyCount, itemCount, opCode);  if ((opCode == OP_RENAME) || (opCode == OP_MOVE) || (opCode == OP_DELETE)) { mAdapter.refreshLocal(); } } 	0	0	0	0	0	1
"@Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() .antMatchers(""/login"").permitAll() .antMatchers(""/secure/**"").authenticated() .and().formLogin().loginPage(""/login"").defaultSuccessUrl(""/secure/welcome"") .and().exceptionHandling().accessDeniedPage(""/login?error=true"") .and().logout().invalidateHttpSession(true).logoutSuccessUrl(""/login?logout"") .and().csrf().disable();  } "	0	0	0	0	0	1
@Override public Iterator<Object> iterator() { try { return new MultiConverterIterator(inputRecord, workUnit); } catch (DataConversionException dce) { throw new RuntimeException(dce); } } 	0	0	0	0	0	1
"public static void addStateEntry(String interfaceName, DataBroker dataBroker, WriteTransaction interfaceOperShardTransaction, IdManagerService idManager, List<ListenableFuture<Void>> futures, org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface ifState) { // allocate lport tag and create interface-if-index map. // This is done even if interface-state is not present, so that there is // no throttling // on id allocation even when multiple southbound port_up events come in // one shot Integer ifIndex = IfmUtil.allocateId(idManager, IfmConstants.IFM_IDPOOL_NAME, interfaceName); InterfaceMetaUtils.createLportTagInterfaceMap(interfaceOperShardTransaction, interfaceName, ifIndex); if (ifState == null) { LOG.debug(""could not retrieve interface state corresponding to {}"", interfaceName); return; } LOG.debug(""adding interface state for {}"", interfaceName); org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface.OperStatus operStatus = ifState .getOperStatus(); PhysAddress physAddress = ifState.getPhysAddress(); org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface.AdminStatus adminStatus = ifState .getAdminStatus(); NodeConnectorId nodeConnectorId = new NodeConnectorId(ifState.getLowerLayerIf().get(0)); InterfaceKey interfaceKey = new InterfaceKey(interfaceName); org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.Interface interfaceInfo = InterfaceManagerCommonUtils .getInterfaceFromConfigDS(interfaceKey, dataBroker);  if (interfaceInfo != null && !interfaceInfo.isEnabled()) { operStatus = org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface.OperStatus.Down; }  InstanceIdentifier<org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface> ifStateId = IfmUtil .buildStateInterfaceId(interfaceName); List<String> childLowerLayerIfList = new ArrayList<>(); childLowerLayerIfList.add(0, nodeConnectorId.getValue()); InterfaceBuilder ifaceBuilder = new InterfaceBuilder().setAdminStatus(adminStatus).setOperStatus(operStatus) .setPhysAddress(physAddress).setLowerLayerIf(childLowerLayerIfList); ifaceBuilder.setIfIndex(ifIndex);  if (interfaceInfo != null) { ifaceBuilder.setType(interfaceInfo.getType()); } ifaceBuilder.setKey(IfmUtil.getStateInterfaceKeyFromName(interfaceName)); interfaceOperShardTransaction.put(LogicalDatastoreType.OPERATIONAL, ifStateId, ifaceBuilder.build(), true);  // install ingress flow BigInteger dpId = IfmUtil.getDpnFromNodeConnectorId(nodeConnectorId); long portNo = IfmUtil.getPortNumberFromNodeConnectorId(nodeConnectorId); if (interfaceInfo != null && interfaceInfo.isEnabled() && ifState .getOperStatus() == org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface.OperStatus.Up) { FlowBasedServicesUtils.installLportIngressFlow(dpId, portNo, interfaceInfo, futures, dataBroker, ifIndex); FlowBasedServicesUtils.bindDefaultEgressDispatcherService(dataBroker, futures, interfaceInfo, Long.toString(portNo), interfaceName, ifIndex); }  // Update the DpnToInterfaceList OpDS createOrUpdateDpnToInterface(dpId, interfaceName,interfaceOperShardTransaction); } "	0	0	0	0	0	1
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Intent intent = this.getIntent();  GeoPointDto geoPointFromIntent = getGeoPointDtoFromIntent(intent);  mUsePicker = (Intent.ACTION_PICK.equals(intent.getAction()));  String extraTitle = intent.getStringExtra(Intent.EXTRA_TITLE); if (extraTitle == null && (geoPointFromIntent == null)) { extraTitle = getString(R.string.app_name); } if (extraTitle == null) { //            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) // must be called before this.setContentView(...) else crash this.requestWindowFeature(Window.FEATURE_NO_TITLE); }  mPrefs = PreferenceManager.getDefaultSharedPreferences(this); //Drawable clusterIconD = getResources().getDrawable(R.drawable.marker_cluster); mPoiIconWithData = getResources().getDrawable(R.drawable.marker_green); mPoiIconWithoutData = getResources().getDrawable(R.drawable.marker_no_data);  mResourceProxy = new ResourceProxyImpl(getApplicationContext());  this.setContentView(R.layout.mapview);  mMapView = (MapView) this.findViewById(R.id.mapview);  final List<Overlay> overlays = this.mMapView.getOverlays();  if (extraTitle != null) { this.setTitle(extraTitle); } else { setNoTitle(); }  mUseClusterPoints = mPrefs.getBoolean(PREFS_CLUSTER_POINTS, true);  mPOIOverlayNonCluster = (mUseClusterPoints) ? null : new FolderOverlay(this); mPOIOverlayCluster = (mUseClusterPoints) ? createPointOfInterestOverlay(overlays) : null;  final IGeoInfoHandler pointCollector = (mUseClusterPoints) ? new IGeoInfoHandler() { @Override public boolean onGeoInfo(IGeoPointInfo aGeoPoint) { if (aGeoPoint != null) { mPOIOverlayCluster.add(createMarker(mMapView, aGeoPoint)); } return true; } } : new IGeoInfoHandler() { @Override public boolean onGeoInfo(IGeoPointInfo aGeoPoint) { if (aGeoPoint != null) { mPOIOverlayNonCluster.add(createMarker(mMapView, aGeoPoint)); } return true; } };  pointCollector.onGeoInfo(geoPointFromIntent);  if (geoPointFromIntent != null) { initialWindow = new GeoBmpDto(geoPointFromIntent); BitmapDrawable drawable = (BitmapDrawable) getResources().getDrawable(R.drawable.marker_no_data); initialWindow.setBitmap(drawable.getBitmap());  initialWindow.setName(getString(R.string.bookmark_template_initial) + geoPointFromIntent.getName()); }  loadGeoPointDtosFromFile(intent, pointCollector);  AbstractList<? extends Overlay> items = (mUseClusterPoints) ? mPOIOverlayCluster.getItems() : mPOIOverlayNonCluster.getItems(); final int zoom = (geoPointFromIntent != null) ? geoPointFromIntent.getZoomMin() : GeoPointDto.NO_ZOOM; this.mDelayedSetCenterZoom = (items.size() > 0) ? new DelayedSetCenterZoom(items, zoom) : null; if (items.size() == 0) { loadDemoItems(pointCollector); }  createMyLocationOverlay(overlays);  createMiniMapOverlay(overlays);  createZoomBar();  // interactive overlay last=on top if (geoPointFromIntent != null) { final String title = geoPointFromIntent.getName(); createMarkerOverlayForMovablePosition(overlays, mMapView, title, toOsmGeoPoint(geoPointFromIntent)); }  mGuesturesOverlay = new GuestureOverlay(this); overlays.add(mGuesturesOverlay);  mMapView.setMultiTouchControls(true);  loadFromSettings(); // setCenterZoom does not work in Android2.1-onCreate() because getHeight() and getWidth() return 0; // initial center must be set later // see http://stackoverflow.com/questions/10411975/how-to-get-the-width-and-height-of-an-image-view-in-android/10412209#10412209 //        if (initalMapCenterZoom != null) { //            setCenterZoom(initalMapCenterZoom); //        }  this.bookmarkListOverlay = new BookmarkListOverlay(this, this) { @Override protected void onSelChanged(GeoBmpDto newSelection) { super.onSelChanged(newSelection);  if (newSelection != null) { setDelayedCenterZoom(newSelection); } } };  // else html a-href-links do not work. TextView t2 = (TextView) findViewById(R.id.cright_osm); t2.setMovementMethod(LinkMovementMethod.getInstance()); } 	0	0	0	0	0	1
"public static void sendEopUpdateEmailNotification(Event event,HttpServletRequest requestParameters) { log.log(Level.INFO, ""Updates to EOP Notification ""); String emailMsg =""""; User userObj = (User)requestParameters.getSession().getAttribute(""currUserObj""); try{ EopMaintenance eopMaintenance = new EopMaintenance(); String eventDate = event.getEventDate()!=null ? LMSUtil.converDateIntoDD_MMM_YYYY(event.getEventDate()).replaceAll(""-"", "" "") : """"; String startTime = event.getStartTime()!=null?LMSUtil.converDateIntoHHMMAMPM(event.getStartTime()):""""; //String endTime = event.getEndTime()!=null?LMSUtil.converDateIntoHHMMAMPM(event.getEndTime()):"""";  EventCandidate candidate=eopMaintenance.getEopCandidateCode(event.getEvent_code()); AddressBookMaintenance addressBookMaintenance = new AddressBookMaintenance(); AddressBook addressBook = new AddressBook(); addressBook.setAddressCode(Integer.parseInt(candidate.getEventCandidateCode())); addressBook = addressBookMaintenance.getAddressBook(addressBook);  String pFileName = """",tFileName=""""; if(event.getProfilePath()!=null && event.getProfilePath().length() > 0){ pFileName = event.getProfilePath().substring(event.getProfilePath().lastIndexOf('/') + 1); } if(event.getTopicPath()!=null && event.getTopicPath().length() > 0){ tFileName = event.getTopicPath().substring(event.getTopicPath().lastIndexOf('/') + 1); } ArrayList<String> mailIds = eopMaintenance.getRegisteredEmailAddressForParticularEvent(event.getEvent_code()); String emailAddr = """"; if(mailIds!=null && mailIds.size()>0){ for(int i = 0; i < mailIds.size(); i++) { if(i==0) emailAddr = mailIds.get(i); else emailAddr = emailAddr + "", "" + mailIds.get(i); }    String gender = """"; if(""F"".equalsIgnoreCase(candidate.getGender())) gender = ""小姐""; else gender=""先生"";    Session session = null; session = getProps(); MimeMessage msg = new MimeMessage(session);  msg.setFrom(new InternetAddress(FROM)); msg.setSubject(""EOP更新"",""UTF-8"");  emailMsg =""尊敬的  "" +candidate.getCandidateName() + gender+"",""+""\n\n""+ ""您报名的面试进行了更新，请重新查看面试信息，若有需要请联系您的营销员  ""+candidate.getCandidateName() + gender+"",""+""\n\n""+ ""活动名称：""+event.getEventName()+""\n""+ ""活动日期：""+eventDate+""\n""+ ""活动开始时间：""+startTime+""\n""+ //""结束 时间:""+endTime+""\n""+ ""主讲人："" +event.getSpeaker()+""\n""+ ""地点："" + event.getLocation()+""\n""+ ""描述："" + event.getEopDescription()+""\n""+ ""附件：""+ pFileName + "", "" + tFileName +""\n\n""+ //	    					""报名的 : \n\n\n""+myString.replaceAll(""^\\s+|\\s+$"", """") ""此为系统邮件，请勿直接回复。 \n\n""+ ""祝您：身体健康 万事如意""+""\n\n"" + ""AIA CHINA"" ;   ArrayList<EventMaterial> list=new ArrayList<EventMaterial>();  list=eopMaintenance.getMaterialForMail(event.getEvent_code()); MimeBodyPart messageBodyPart =  new MimeBodyPart(); messageBodyPart.setText(emailMsg,""utf-8"");  Multipart multipart = new MimeMultipart(); multipart.addBodyPart(messageBodyPart); if(list!=null){ for (EventMaterial material:list ) {  DataSource source = new  ByteArrayDataSource(material.getMaterial(),""application/octet-stream""); MimeBodyPart attachmentPart = new MimeBodyPart(); attachmentPart.setDataHandler(new DataHandler(source)); attachmentPart.setFileName(material.getMaterialName()); multipart.addBodyPart(attachmentPart); } } if(addressBook.getQrCode()!=null && addressBook.getQrCode().length > 0){ DataSource source = new  ByteArrayDataSource(addressBook.getQrCode(),""application/octet-stream""); MimeBodyPart attachmentPart = new MimeBodyPart(); attachmentPart.setDataHandler(new DataHandler(source)); attachmentPart.setFileName(""QR_CODE_IMAGE.jpeg""); multipart.addBodyPart(attachmentPart); }  msg.setRecipients(javax.mail.Message.RecipientType.TO, InternetAddress.parse(emailAddr, false)); msg.setContent(multipart); Transport.send(msg);  log.log(Level.INFO, ""sending succesfull""); }else{  log.log(Level.INFO, ""No Recipient Email Address Found""); } } catch(Exception e) { log.log(Level.SEVERE, e.getMessage()); e.printStackTrace(); LogsMaintenance logsMain=new LogsMaintenance(); StringWriter errors = new StringWriter(); e.printStackTrace(new PrintWriter(errors)); logsMain.insertLogs(""EmailNotification"",Level.SEVERE+"""",errors.toString()); }  } "	0	0	0	0	0	1
protected Object parseProperty(MetadataParser<T> p, Object property) { switch(p.getType(property)) { case VALUE: return property; case LIST: ArrayList<Object> resultList=new ArrayList<>(); List<T> list=p.getObjectList((T)property); for(T element:list) { resultList.add(parseProperty(p,element)); } return resultList; case MAP: Set<String> children=p.getChildNames((T)property); Map<String,Object> resultMap=new HashMap<>(); for(String child:children) { resultMap.put(child,parseProperty(p,p.getObjectProperty((T)property,child))); } return resultMap; } return null; } 	0	0	0	0	0	1
@Override public List<ResourceInstance> listResourceInstances(String gooruContentId, String type) { return getSegmentRepository().listResourceInstances(gooruContentId, type); } 	0	0	0	0	0	1
@Override public int findViews(String contentGooruId) { return getResourceRepository().findViews(contentGooruId); } 	0	0	0	0	0	1
@Override public Job saveJob(File sourceFile, ConverterDTO converterDTO, User user) {  Job job = new Job(); job.setGooruOid(converterDTO.getGooruContentId()); job.setUser(user); job.setFileSize(sourceFile.length()); converterDTO.setSourcePath(sourceFile.getPath()); String type = JobType.Type.PPTCONVERSION.getType(); if (FileProcessor.getFileExt(sourceFile.getName()).equals(PDF)) { type = JobType.Type.PDFCONVERSION.getType(); } job.setJobType((JobType) learnguideRepository.get(JobType.class, type)); job.setStatus(Job.Status.INPROGRESS.getStatus()); learnguideRepository.save(job); return job; } 	0	0	0	0	0	1
"public boolean downloadThumbnail(String fileName, String imageURL, Resource resource) { try { FileMeta fileMeta = this.getMediaService().handleFileUpload(fileName, imageURL, null, false, 0, 0); this.getResourceImageUtil().moveFileAndSendMsgToGenerateThumbnails(resource, fileMeta.getName(), false); return true;  } catch (FileNotFoundException e) { LOGGER.error(""Error saving crawled resource image"", e); } catch (IOException e) { LOGGER.error(""Error saving crawled resource image"", e); } return false; } "	0	0	0	0	0	1
"@Override public Segment getSegment(String segmentId) { if (segmentId != null && !segmentId.equals("""")) { return (Segment) getSegmentRepository().get(Segment.class, segmentId); } else { return null; } } "	0	0	0	0	0	1
@Override public Resource findResourceByUrl(String resourceUrl, String sharing, String userUid) { return resourceRepository.findResourceByUrl(resourceUrl, sharing, userUid); } 	0	0	0	0	0	1
@Override public List<ResourceInstance> listSegmentResourceInstances(String segmentId) { return getSegmentRepository().listSegmentResourceInstances(segmentId); } 	0	0	0	0	0	1
@Override public void run() { partitionContainer.destroyMap(mapName); semaphore.release(); } 	0	0	0	0	0	1
static String toDescription(@NotNull ChangeList changeList) { return ChangelistDescriptionGenerator.getDescription(changeList); } 	0	0	0	0	0	1
public List<String> getSubscribers() { return subscribers; } 	0	0	0	0	0	1
"public void testSendMessageWithAttachments() { ApiCallback<Boolean> loginListener = getLoginListener(); String suffix = String.valueOf(System.currentTimeMillis()); String username = USERNAME_PREFIX + suffix; String displayName = DISPLAY_NAME_PREFIX + suffix; registerUser(username, displayName, PASSWORD);  //login with credentials User.login(username, new String(PASSWORD), false, loginListener); synchronized (loginListener) { try { loginListener.wait(TIMEOUT); } catch (InterruptedException e) { e.printStackTrace(); } } assertTrue(MMX.getMMXClient().isConnected()); MMX.start();  final AtomicLong attachmentSize = new AtomicLong(); final AtomicReference<Attachment> attachmentRef = new AtomicReference<>();  final ExecMonitor<HashMap<String, Object>, Void> receivedResult = new ExecMonitor<HashMap<String, Object>, Void>(); final StringBuffer senderBuffer = new StringBuffer(); final ExecMonitor<String, Void> acknowledgeResult = new ExecMonitor<String, Void>(); MMX.EventListener messageListener = new MMX.EventListener() { public boolean onMessageReceived(MMXMessage message) { Log.d(TAG, ""onMessageReceived(): "" + message.getId()); senderBuffer.append(message.getSender().getFirstName()); HashMap<String, Object> receivedContent = new HashMap<String, Object>(); for (Map.Entry<String, String> entry : message.getContent().entrySet()) { receivedContent.put(entry.getKey(), entry.getValue()); }  //Attachments assertNotNull(message.getAttachments()); assertEquals(1, message.getAttachments().size()); Attachment attachmentReceived = message.getAttachments().get(0); assertEquals(""image/jpeg"", attachmentReceived.getMimeType()); assertEquals(Attachment.Status.INIT, attachmentReceived.getStatus()); //assertEquals(attachmentSize.get(), attachmentReceived.getLength()); assertNotNull(attachmentReceived.getDownloadUrl());  attachmentRef.set(attachmentReceived);  receivedResult.invoked(receivedContent);  //do the acknowledgement message.acknowledge(null);  return false; }  public boolean onMessageAcknowledgementReceived(User from, String messageId) { acknowledgeResult.invoked(messageId); return false; } }; MMX.registerListener(messageListener);  HashSet<User> recipients = new HashSet<User>(); recipients.add(MMX.getCurrentUser());  HashMap<String, String> content = new HashMap<String, String>(); content.put(""foo"", ""bar""); final Attachment attachment1 = new Attachment(getContext().getResources().openRawResource( com.magnet.mmx.test.R.raw.test_image), ""image/jpeg""); //final Attachment attachment1 = new TextAttachment(Attachment.TEXT_PLAIN, ""hello world""); //assertEquals(-1, attachment1.getLength()); MMXMessage message = new MMXMessage.Builder() .recipients(recipients) .content(content) .attachments(attachment1) .build(); final ExecMonitor<String, Boolean> sendResult = new ExecMonitor<String, Boolean>(); final String messageId = message.send(new MMXMessage.OnFinishedListener<String>() { public void onSuccess(String result) { Log.e(TAG, ""testSendMessage(): onSuccess() msgId="" + result);  assertTrue(attachment1.getLength() > 0); attachmentSize.set(attachment1.getLength());  sendResult.invoked(result); }  public void onFailure(MMXMessage.FailureCode code, Throwable ex) { Log.e(TAG, ""testSendMessage(): failureCode="" + code, ex); sendResult.failed(Boolean.TRUE); } }); // Check if the send is success ExecMonitor.Status status = sendResult.waitFor(TIMEOUT); assertEquals(ExecMonitor.Status.INVOKED, status); assertEquals(messageId, sendResult.getReturnValue());  // Check if the receive is success status = receivedResult.waitFor(TIMEOUT); if (status == ExecMonitor.Status.WAITING) { fail(""testSendMessage() receive msg timed out""); } assertEquals(""bar"", receivedResult.getReturnValue().get(""foo"")); assertEquals(MMX.getCurrentUser().getFirstName(), senderBuffer.toString());  //check acknowledgement status = acknowledgeResult.waitFor(TIMEOUT); if (status == ExecMonitor.Status.WAITING) { fail(""testSenddMessage() receive acknowledgement timed out""); } assertEquals(messageId, acknowledgeResult.getReturnValue());  // Download attachment assertNotNull(attachmentRef.get()); Log.d(TAG, ""-----------attachment received""); final CountDownLatch downLatch = new CountDownLatch(1); Attachment attachmentReceived = attachmentRef.get(); attachmentReceived.download(new Attachment.DownloadToBytesListener() {  @Override public void onComplete(byte[] bytes) { assertNotNull(bytes); assertTrue(bytes.length > 0); downLatch.countDown(); }  @Override public void onError(Throwable throwable) { fail(throwable.getMessage()); } }); try { downLatch.await(TIMEOUT, TimeUnit.MILLISECONDS); } catch (InterruptedException e) { fail(e.getMessage()); } assertEquals(0, downLatch.getCount()); assertEquals(Attachment.Status.COMPLETE, attachmentReceived.getStatus()); assertNotNull(attachmentReceived.getAsBytes()); assertEquals(attachmentReceived.getLength(), attachmentReceived.getAsBytes().length);  MMX.unregisterListener(messageListener); logoutMMX(); ApiCallback<Boolean> logoutListener = getLogoutListener(); User.logout(logoutListener); synchronized (logoutListener) { try { logoutListener.wait(TIMEOUT); } catch (InterruptedException e) { e.printStackTrace(); } } //    assertFalse(MMX.getMMXClient().isConnected()); } "	0	0	0	0	0	1
"static void loadFolders(ArrayList<XmlReader.Element> folders){ for(int i = 0; i < folders.size(); i++){ XmlReader.Element repo = folders.get(i); Folder folder = new Folder(); folder.setId(repo.getInt(""id"")); folder.setName(repo.getAttribute(""name"", """")); ArrayList<XmlReader.Element> files = repo.getChildrenByName(""file""); for(int j = 0; j < files.size(); j++){ XmlReader.Element f = files.get(j); File file = new File(); file.setId(f.getInt(""id"")); file.setName(f.getAttribute(""name"", """")); file.setWidth((long)f.getInt(""width"")); file.setHeight((long)f.getInt(""height"")); try{ file.setPivotX(f.getFloat(""pivot_x"")); file.setPivotY(f.getFloat(""pivot_y"")); } catch(RuntimeException e){ file.setPivotX(new Float(0)); file.setPivotY(new Float(1)); } folder.getFile().add(file); } data.getFolder().add(folder); } } "	0	0	0	0	0	1
"@Override public void getIngredients(IIngredients ingredients){ ingredients.setInputLists(ItemStack.class, ImmutableList.of(OreDictionary.getOres(copper ? ""dustCopper"" : ""cobblestone"", false))); ingredients.setOutput(FluidStack.class, new FluidStack(copper ? BlockMoltenCopper.getMoltenCopper() : FluidRegistry.LAVA, 200)); } "	0	0	0	0	0	1
"@Override public ReleaseDate scrapeReleaseDate(){ Element releaseDateElement = document .select(""table.mg-b20 tr td:contains(貸出開始日：) + td, table.mg-b20 tr td:contains(発売日：) + td, table.mg-b20 tr td:contains(�?信開始日：) + td"") .first(); if(releaseDateElement != null) { String releaseDate = releaseDateElement.text(); //we want to convert something like 2015/04/25 to 2015-04-25 releaseDate = StringUtils.replace(releaseDate, ""/"", ""-""); return new ReleaseDate(releaseDate); } return ReleaseDate.BLANK_RELEASEDATE; } "	0	0	0	0	0	1
"@Override public moviescraper.doctord.model.dataitem.Runtime scrapeRuntime() { String runtime = """"; Element runtimeElement = document.select( ""table.mg-b20 tr td:contains(�?�録時間：) + td"").first(); if (runtimeElement != null) { // get rid of japanese word for minutes and just get the number runtime = runtimeElement.text().replaceAll(""分"", """"); } return new moviescraper.doctord.model.dataitem.Runtime(runtime);  } "	0	0	0	0	0	1
public boolean isValidCCN(String rawCCN) { //check for a valid separator boolean hasSpace = StringUtils.contains(rawCCN, ' '); boolean hasDash = StringUtils.contains(rawCCN, '-'); if (hasSpace && hasDash) { return false;    //can only have dashes or spaces, not both. }  Character separator = null; if (hasSpace) { separator = ' '; } else if (hasDash) { separator = '-'; }  final String cannonicalCCN; String[] splitCCN; if (separator != null) { //there is a seperator, strip if for canoncial form of CCN cannonicalCCN = CharMatcher.anyOf(separator.toString()).removeFrom(rawCCN); splitCCN = rawCCN.split(separator.toString()); } else { //else use 'defualt'values cannonicalCCN = rawCCN; splitCCN = new String[]{cannonicalCCN}; }  // validate digit grouping for 15, 16, and 19 digit cards switch (cannonicalCCN.length()) { case 15: if (false == isValid15DigitGrouping(splitCCN)) { return false; } break; case 16: if (false == isValid16DigitGrouping(splitCCN)) { return false; } break; case 19: if (false == isValid19DigitGrouping(splitCCN)) { return false; } break; default: if (false == isValidOtherDigitGrouping(splitCCN)) { return false; } }  return CREDIT_CARD_NUM_LUHN_CHECK.isValid(cannonicalCCN); } 	0	0	0	0	0	1
public void onMessage(final String message) { output.append(message); if (output.indexOf(successPattern) != -1) { gotResult(true, null); } else { int failureIndex = output.indexOf(failurePattern); if (failureIndex != -1) { gotResult(false, output.substring(failureIndex)); } } } 	0	0	0	0	0	1
"public void testGetPolicyURLs01() throws Throwable { final String KEY_DYNAMIC = ""policy.allowSystemProperty""; String OLD_DYNAMIC = Security.getProperty(KEY_DYNAMIC);  final String KEY = ""dsfvdf""; Properties arg = new Properties(); arg.put(KEY, ""http://foo.bar.com""); try { Security.setProperty(KEY_DYNAMIC, ""true""); URL[] result = PolicyUtils.getPolicyURLs(arg, KEY, """"); assertNotNull(result); assertEquals(1, result.length); assertEquals(new URL(""http://foo.bar.com""), result[0]);  Security.setProperty(KEY_DYNAMIC, ""false""); result = PolicyUtils.getPolicyURLs(arg, KEY, """"); assertNotNull(result); assertEquals(0, result.length);  Security.setProperty(KEY_DYNAMIC, """"); result = PolicyUtils.getPolicyURLs(arg, KEY, """"); assertNotNull(result); assertEquals(1, result.length); assertEquals(new URL(""http://foo.bar.com""), result[0]); } finally { Security.setProperty(KEY_DYNAMIC, OLD_DYNAMIC); } } "	0	0	0	0	0	1
"public void testGetPolicyURLs03() throws Throwable { final String KEY_DYNAMIC = ""policy.allowSystemProperty""; final String OLD_DYNAMIC = Security.getProperty(KEY_DYNAMIC); final String KEY_EXP = ""policy.expandProperties""; final String OLD_EXP = Security.getProperty(KEY_EXP); final String PREFIX = ""testGetPolicyURLs03.""; String[] OLD = new String[5]; for (int i = 0; i < OLD.length; i++) { OLD[i] = Security.getProperty(PREFIX + i); }  final String KEY = ""dsfvdf""; Properties arg = new Properties(); arg.put(KEY, ""file://${foo.path}/${foo.name}""); arg.put(""foo.path"", ""path""); arg.put(""foo.name"", ""name""); arg.put(""foo"", ""acme""); Security.setProperty(KEY_DYNAMIC, ""true""); Security.setProperty(KEY_EXP, ""true""); Security.setProperty(PREFIX + 1, ""http://foo0.${foo}.org""); Security.setProperty(PREFIX + 2, ""http://${bar}.com""); Security.setProperty(PREFIX + 3, ""http://foo2.bar.com/${foo.path}/${foo.name}""); try {  URL[] result = PolicyUtils.getPolicyURLs(arg, KEY, PREFIX); assertNotNull(result); assertEquals(3, result.length); assertEquals(new URL(""http://foo0.acme.org""), result[0]); assertEquals(new URL(""http://foo2.bar.com/path/name""), result[1]); assertEquals(new URL(""file://path/name""), result[2]);  //expansion here cannot be switched off Security.setProperty(KEY_EXP, ""false""); result = PolicyUtils.getPolicyURLs(arg, KEY, PREFIX); assertNotNull(result); assertEquals(3, result.length); assertEquals(new URL(""http://foo0.acme.org""), result[0]); assertEquals(new URL(""http://foo2.bar.com/path/name""), result[1]); assertEquals(new URL(""file://path/name""), result[2]); } finally { Security.setProperty(KEY_DYNAMIC, OLD_DYNAMIC); Security.setProperty(KEY_EXP, OLD_EXP); for (int i = 0; i < OLD.length; i++) { Security .setProperty(PREFIX + i, (OLD[i] == null) ? """" : OLD[i]); } } } "	0	0	0	0	0	1
"public void testInstantiatePermission() throws Throwable { String name = ""abc""; Permission expected = new SecurityPermission(name); //test valid input assertEquals(expected, PolicyUtils.instantiatePermission(SecurityPermission.class, name, null)); assertEquals(expected, PolicyUtils.instantiatePermission(SecurityPermission.class, name, ""4t46""));  //test invalid class try { PolicyUtils.instantiatePermission(UnresolvedPermission.class, null, null); fail(""IllegalArgumentException expected on invalid class argument""); } catch (IllegalArgumentException ok) {} } "	0	0	0	0	0	1
"private ResultSet getRandomRow(ResultSet r) { reopenIfClosed(); Random rand = new Random(); int rows = 0;  try { if(r.last()) { rows = r.getRow(); r.beforeFirst(); }  int choice = rand.nextInt(rows); for(int i = 0;i <= choice;i++) { r.next();	//Move to next row if(i == choice) { return r; } } } catch(SQLException ex) { System.out.println(""Error while getting random monster. "" + ex.getMessage()); }  return null; } "	0	0	0	0	0	1
"@Override public String toString() { return ""User{"" + ""uid='"" + uid + '\'' + "", fullName='"" + fullName + '\'' + "", avatar='"" + avatar + '\'' + "", email='"" + email + '\'' + "", socialProviders='"" + socialProviders + '\'' + '}'; } "	0	0	0	0	0	1
"public void onCreateUploadClicked(View btn) { CreationRepository creationRepository = new CreationRepositoryBuilder() .setAuthToken(authToken) .build();  creationRepository.createUpload(""2UExMQhy"", new UploadRequest(ContentType .JPG), new ResponseCallback<UploadResponse>() { @Override public void onSuccess(UploadResponse response) { Toast.makeText(MainActivity.this, response.getData() .getAttributes().getContentType(), Toast.LENGTH_SHORT) .show();  responseFromCreateUpload = response; sendFileBtn.setEnabled(true); fileName.setEnabled(true); }  @Override public void onServerError(ErrorResponse errorResponse) {  }  @Override public void onError(String message) {  } });  } "	0	0	0	0	0	1
"protected Response lookupObject(final HttpServletRequest request, final Set<ObjectType> objectTypes, final String key) { if (StringUtils.isEmpty(key)) { throw new IllegalArgumentException(""empty lookup term""); }  final Query query = Query.parse( String.format(""%s %s %s %s %s %s"", QueryFlag.NO_GROUPING.getLongFlag(), QueryFlag.NO_REFERENCED.getLongFlag(), QueryFlag.SELECT_TYPES.getLongFlag(), objectTypesToString(objectTypes), QueryFlag.NO_FILTERING.getLongFlag(), key));  return handleQuery(query, request); } "	0	0	0	0	0	1
public Button getRightArrowButton() { return rightArrowButton; } 	0	0	0	0	0	1
@Override public void visit(ReturnInstruction ret) { FrameSlot slot = method.getFrame().findFrameSlot(LLVMBitcodeHelper.FUNCTION_RETURN_VALUE_FRAME_SLOT_ID);  LLVMRetNode node; if (ret.getValue() == null) { node = LLVMVoidReturnNodeGen.create(slot); } else { Type type = ret.getValue().getType();  LLVMExpressionNode value = resolve(ret.getValue());  slot.setKind(LLVMBitcodeHelper.toFrameSlotKind(type));  switch (LLVMBitcodeHelper.toBaseType(type)) { case I1: node = LLVMRetNodeFactory.LLVMI1RetNodeGen.create((LLVMI1Node) value, slot); break; case I8: node = LLVMRetNodeFactory.LLVMI8RetNodeGen.create((LLVMI8Node) value, slot); break; case I16: node = LLVMRetNodeFactory.LLVMI16RetNodeGen.create((LLVMI16Node) value, slot); break; case I32: node = LLVMRetNodeFactory.LLVMI32RetNodeGen.create((LLVMI32Node) value, slot); break; case I64: node = LLVMRetNodeFactory.LLVMI64RetNodeGen.create((LLVMI64Node) value, slot); break; case I_VAR_BITWIDTH: node = LLVMRetNodeFactory.LLVMIVarBitRetNodeGen.create((LLVMIVarBitNode) value, slot); break; case FLOAT: node = LLVMRetNodeFactory.LLVMFloatRetNodeGen.create((LLVMFloatNode) value, slot); break; case DOUBLE: node = LLVMRetNodeFactory.LLVMDoubleRetNodeGen.create((LLVMDoubleNode) value, slot); break; case X86_FP80: node = LLVMRetNodeFactory.LLVM80BitFloatRetNodeGen.create((LLVM80BitFloatNode) value, slot); break; case ADDRESS: node = LLVMRetNodeFactory.LLVMAddressRetNodeGen.create((LLVMAddressNode) value, slot); break; case FUNCTION_ADDRESS: node = LLVMRetNodeFactory.LLVMFunctionRetNodeGen.create((LLVMFunctionNode) value, slot); break; case STRUCT: // ResolvedStructType structType = (ResolvedStructType) resolvedType; // int size = LLVMTypeHelper.getByteSize(structType); // return LLVMRetNodeFactory.LLVMStructRetNodeGen.create((LLVMAddressNode) // value, retSlot, size); default: // if (LLVMTypeHelper.isVectorType(type)) { // return LLVMRetNodeFactory.LLVMVectorRetNodeGen.create((LLVMVectorNode) // retValue, retSlot); // } else throw new AssertionError(type); } }  method.addTerminatingInstruction(node); } 	0	0	0	0	0	1
private void setUpAlarm (Context context) { AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE); Intent createdIntent = new Intent(context, AlarmReceiver.class);  PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, createdIntent, 0); alarmManager.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + 1000, pendingIntent); } 	0	0	0	0	0	1
public ItemStack checkAfford(int slotId, int amnt, EntityPlayer player) { IItemHandler itemHandler = this.tile.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, null); ItemStack playStack = player.inventory.getItemStack(); ItemStack slotStack = itemHandler.getStackInSlot(slotId - PLAYER_TOTAL_COUNT); ItemStack playBuyStack;  boolean wallet = false; int bank = 0;  if (itemHandler.getStackInSlot(0) != ItemStack.EMPTY) { if (itemHandler.getStackInSlot(0).getItem() == ModItems.itemWallet) { wallet = true; bank = tile.getField(10); } } else bank = tile.getField(0); int cost = tile.getItemCost(slotId - PLAYER_TOTAL_COUNT - 1);  if (slotStack != ItemStack.EMPTY) { if (playStack.getItem() != Item.getItemFromBlock(Blocks.AIR)) { if (!(playStack.getItem().equals(slotStack.getItem()) && (playStack.getItemDamage() == slotStack.getItemDamage()))) { return ItemStack.EMPTY; //Checks if player is holding stack, if its different then one being clicked do nothing } } if (tile.getField(6) == 0) if (slotStack.getCount() < amnt && slotStack.getCount() != 0) amnt = slotStack.getCount();  if ((bank >= (cost * amnt))) {   //If has enough money, buy it if (slotStack.getCount() >= amnt || tile.getField(6) == 1) { playBuyStack = slotStack.copy(); playBuyStack.setCount(amnt);  if (!player.inventory.getItemStack().isEmpty()) {       //Holding Item playBuyStack.setCount(amnt + playStack.getCount()); } player.inventory.setItemStack(playBuyStack);  if (tile.getField(6) == 0) { if (slotStack.getCount() - amnt == 0) { tile.setGhostSlot(slotId - PLAYER_TOTAL_COUNT - 1, true); slotStack.setCount(1); } else slotStack.splitStack(amnt); }  if (wallet) { sellToWallet(itemHandler.getStackInSlot(0), cost * amnt); } else { tile.setField(0, bank - (cost * amnt)); } tile.setField(4, tile.getField(4) + cost * amnt); } } else { tile.unsucessfulNoise(); } return slotStack; } return ItemStack.EMPTY; } 	0	0	0	0	0	1
"@Override protected byte[] getVisitedPLMNId() {  String vPlmnIdList = ""473800""; byte[] visitedPlmnIdList = vPlmnIdList.getBytes(); return visitedPlmnIdList; } "	0	0	0	0	0	1
"@Override protected byte[] getVisitedPLMNId() {  String vPlmnIdList = ""471800""; byte[] visitedPlmnIdList = vPlmnIdList.getBytes(); return visitedPlmnIdList; } "	0	0	0	0	0	1
@Override public Void runInTransaction() { return executeAddQutoa(); } 	0	0	0	0	0	1
"public Message sendVideo(SendVideo sendVideo) throws TelegramApiException { String responseContent; try { String url = getBaseUrl() + SendVideo.PATH; HttpPost httppost = new HttpPost(url); httppost.setConfig(requestConfig); if (sendVideo.isNewVideo()) { MultipartEntityBuilder builder = MultipartEntityBuilder.create(); builder.addTextBody(SendVideo.CHATID_FIELD, sendVideo.getChatId()); builder.addBinaryBody(SendVideo.VIDEO_FIELD, new java.io.File(sendVideo.getVideo()), ContentType.APPLICATION_OCTET_STREAM, sendVideo.getVideoName()); if (sendVideo.getReplayMarkup() != null) { builder.addTextBody(SendVideo.REPLYMARKUP_FIELD, sendVideo.getReplayMarkup().toJson().toString()); } if (sendVideo.getReplayToMessageId() != null) { builder.addTextBody(SendVideo.REPLYTOMESSAGEID_FIELD, sendVideo.getReplayToMessageId().toString()); } if (sendVideo.getCaption() != null) { builder.addTextBody(SendVideo.CAPTION_FIELD, sendVideo.getCaption(), ContentType.create(""text/plain"", StandardCharsets.UTF_8)); } if (sendVideo.getDuration() != null) { builder.addTextBody(SendVideo.DURATION_FIELD, sendVideo.getDuration().toString()); } if (sendVideo.getWidth() != null) { builder.addTextBody(SendVideo.WIDTH_FIELD, sendVideo.getWidth().toString()); } if (sendVideo.getHeight() != null) { builder.addTextBody(SendVideo.HEIGHT_FIELD, sendVideo.getHeight().toString()); } if (sendVideo.getDisableNotification() != null) { builder.addTextBody(SendVideo.DISABLENOTIFICATION_FIELD, sendVideo.getDisableNotification().toString()); } HttpEntity multipart = builder.build(); httppost.setEntity(multipart); } else { List<NameValuePair> nameValuePairs = new ArrayList<>(); nameValuePairs.add(new BasicNameValuePair(SendVideo.CHATID_FIELD, sendVideo.getChatId())); nameValuePairs.add(new BasicNameValuePair(SendVideo.VIDEO_FIELD, sendVideo.getVideo())); if (sendVideo.getReplayMarkup() != null) { nameValuePairs.add(new BasicNameValuePair(SendVideo.REPLYMARKUP_FIELD, sendVideo.getReplayMarkup().toJson().toString())); } if (sendVideo.getReplayToMessageId() != null) { nameValuePairs.add(new BasicNameValuePair(SendVideo.REPLYTOMESSAGEID_FIELD, sendVideo.getReplayToMessageId().toString())); } if (sendVideo.getCaption() != null) { nameValuePairs.add(new BasicNameValuePair(SendVideo.CAPTION_FIELD, sendVideo.getCaption())); } if (sendVideo.getDuration() != null) { nameValuePairs.add(new BasicNameValuePair(SendVideo.DURATION_FIELD, sendVideo.getDuration().toString())); } if (sendVideo.getWidth() != null) { nameValuePairs.add(new BasicNameValuePair(SendVideo.WIDTH_FIELD, sendVideo.getWidth().toString())); } if (sendVideo.getHeight() != null) { nameValuePairs.add(new BasicNameValuePair(SendVideo.HEIGHT_FIELD, sendVideo.getHeight().toString())); } if (sendVideo.getDisableNotification() != null) { nameValuePairs.add(new BasicNameValuePair(SendVideo.DISABLENOTIFICATION_FIELD, sendVideo.getDisableNotification().toString())); } httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs, StandardCharsets.UTF_8)); }  try (CloseableHttpResponse response = httpclient.execute(httppost)) { HttpEntity ht = response.getEntity(); BufferedHttpEntity buf = new BufferedHttpEntity(ht); responseContent = EntityUtils.toString(buf, StandardCharsets.UTF_8); } } catch (IOException e) { throw new TelegramApiException(""Unable to send video"", e); }  JSONObject jsonObject = new JSONObject(responseContent); if (!jsonObject.getBoolean(Constants.RESPONSEFIELDOK)) { throw new TelegramApiException(""Error at sendVideo"", jsonObject.getString(ERRORDESCRIPTIONFIELD), jsonObject.getInt(ERRORCODEFIELD)); }  return new Message(jsonObject.getJSONObject(Constants.RESPONSEFIELDRESULT)); } "	0	0	0	0	0	1
@Override public void onClick(View v) { startActivity(new Intent(HomeScreen.this, CleaningSealing.class)); } 	0	0	0	0	0	1
@Test public void workerIdleTest() { final Worker w = new Worker(workerPool, workerPool.threadFactory); w.start();  // wait for worker to become idle new TestCondition() { @Override public boolean get() { return workerPool.idleWorker.get() == w; } }.blockTillTrue(1000);  workerPool.startShutdown(); workerPool.finishShutdown();  // verify idle worker is gone new TestCondition() { @Override public boolean get() { return workerPool.idleWorker.get() == null; } }.blockTillTrue(1000);  // should return immediately now that we are shut down workerPool.workerIdle(new Worker(workerPool, workerPool.threadFactory)); } 	0	0	0	0	0	1
"public boolean underlyingCheck() { String name; switch (Pkg.VERSION) { case ""v1_8_R2"": name = ""N""; break; case ""v1_8_R3"": name = ""O""; break; default: throw new RuntimeException(""Unsupported server version: "" + Pkg.VERSION); } try { Method method = MinecraftServer.class.getMethod(name); return (Boolean) method.invoke(this); } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) { throw new RuntimeException(e); } } "	0	0	0	0	0	1
"@Override protected void service(HttpServletRequest hreq, HttpServletResponse hresp) throws ServletException, IOException {  String requestUriRaw = hreq.getRequestURI(); String requestUri = (requestUriRaw.charAt(0) == '/') ? requestUriRaw.substring(1) : requestUriRaw; String query = hreq.getQueryString();  WebServiceEjbEndpointRegistry wsejbEndpointRegistry = (WebServiceEjbEndpointRegistry) Globals.getDefaultHabitat() .getService(WSEjbEndpointRegistry.class); EjbRuntimeEndpointInfo ejbEndpoint = wsejbEndpointRegistry.getEjbWebServiceEndpoint(requestUri, hreq.getMethod(), query);  if (requestUri.contains(WebServiceEndpoint.PUBLISHING_SUBCONTEXT) && ejbEndpoint == null) { requestUri = requestUri.substring(0, requestUri.indexOf(WebServiceEndpoint.PUBLISHING_SUBCONTEXT) - 1); ejbEndpoint = wsejbEndpointRegistry.getEjbWebServiceEndpoint(requestUri, hreq.getMethod(), query); }  if (ejbEndpoint != null) { /* * We can actually assert that ejbEndpoint is != null, * because this EjbWebServiceServlet would not have been * invoked otherwise */ String scheme = hreq.getScheme(); WebServiceEndpoint wse = ejbEndpoint.getEndpoint(); if (""http"".equals(scheme) && wse.isSecure()) { //redirect to correct protocol scheme if needed logger.log(Level.WARNING, LogUtils.INVALID_REQUEST_SCHEME, new Object[]{wse.getEndpointName(), ""https"", scheme}); URL url = wse.composeEndpointAddress(new WsUtil().getWebServerInfoForDAS().getWebServerRootURL(true)); StringBuilder sb = new StringBuilder(url.toExternalForm()); if (query != null && query.trim().length() > 0) { sb.append(""?""); sb.append(query); } hresp.sendRedirect(URLEncoder.encode(sb.toString(), ""UTF-8"")); } else { boolean dispatch = true; // check if it is a tester servlet invocation if (""Tester"".equalsIgnoreCase(query) && (!(HTTPBinding.HTTP_BINDING.equals(wse.getProtocolBinding())))) { Endpoint endpoint = WebServiceEngineImpl.getInstance().getEndpoint(hreq.getRequestURI()); if ((endpoint.getDescriptor().isSecure()) || (endpoint.getDescriptor().getMessageSecurityBinding() != null)) { String message = endpoint.getDescriptor().getWebService().getName() + ""is a secured web service; Tester feature is not supported for secured services""; (new WsUtil()).writeInvalidMethodType(hresp, message); return; } if (Boolean.parseBoolean(endpoint.getDescriptor().getDebugging())) { dispatch = false; WebServiceTesterServlet.invoke(hreq, hresp, endpoint.getDescriptor()); } } if (""wsdl"".equalsIgnoreCase(query) && (!(HTTPBinding.HTTP_BINDING.equals(wse.getProtocolBinding())))) { if (wse.getWsdlExposed() != null && !Boolean.parseBoolean(wse.getWsdlExposed())) { hresp.sendError(HttpServletResponse.SC_NOT_FOUND); } } if (dispatch) { dispatchToEjbEndpoint(hreq, hresp, ejbEndpoint);  if (requestTracing.isRequestTracingEnabled()) { WSRequestEvent requestEvent = constructWsRequestEvent(hreq, ejbEndpoint, EventType.WS); requestTracing.traceRequestEvent(requestEvent); } } } } else { hresp.sendError(HttpServletResponse.SC_NOT_FOUND); } } "	0	0	0	0	0	1
"@Override public void run() { if (this.theListener instanceof ConsumerSeekAware) { ((ConsumerSeekAware) this.theListener).registerSeekCallback(this); } if (this.transactionManager != null) { ProducerFactoryUtils.setConsumerGroupId(this.consumerGroupId); } this.count = 0; this.last = System.currentTimeMillis(); if (isRunning() && this.definedPartitions != null) { initPartitionsIfNeeded(); } long lastReceive = System.currentTimeMillis(); long lastAlertAt = lastReceive; while (isRunning()) { try { if (!this.autoCommit) { processCommits(); } processSeeks(); ConsumerRecords<K, V> records = this.consumer.poll(this.containerProperties.getPollTimeout()); if (records != null && this.logger.isDebugEnabled()) { this.logger.debug(""Received: "" + records.count() + "" records""); } if (records != null && records.count() > 0) { if (this.containerProperties.getIdleEventInterval() != null) { lastReceive = System.currentTimeMillis(); } invokeListener(records); } else { if (this.containerProperties.getIdleEventInterval() != null) { long now = System.currentTimeMillis(); if (now > lastReceive + this.containerProperties.getIdleEventInterval() && now > lastAlertAt + this.containerProperties.getIdleEventInterval()) { publishIdleContainerEvent(now - lastReceive); lastAlertAt = now; if (this.theListener instanceof ConsumerSeekAware) { seekPartitions(getAssignedPartitions(), true); } } } } } catch (WakeupException e) { // Ignore, we're stopping } catch (NoOffsetForPartitionException nofpe) { this.fatalError = true; ListenerConsumer.this.logger.error(""No offset and no reset policy"", nofpe); break; } catch (Exception e) { if (this.containerProperties.getGenericErrorHandler() != null) { this.containerProperties.getGenericErrorHandler().handle(e, null); } else { this.logger.error(""Container exception"", e); } } } ProducerFactoryUtils.clearConsumerGroupId(); if (!this.fatalError) { if (this.kafkaTxManager == null) { commitPendingAcks(); try { this.consumer.unsubscribe(); } catch (WakeupException e) { // No-op. Continue process } } } else { ListenerConsumer.this.logger.error(""No offset and no reset policy; stopping container""); KafkaMessageListenerContainer.this.stop(); } this.consumer.close(); if (this.logger.isInfoEnabled()) { this.logger.info(""Consumer stopped""); } } "	0	0	0	0	0	1
"public static void main(String[] args) throws Exception {  SparkConf sparkConf = new SparkConf() .setMaster(""local[2]"") .setAppName(""Write RDD To Hazelcast"") .set(""hazelcast.server.address"", ""127.0.0.1:5701"") .set(""spark.driver.host"", ""127.0.0.1"");  JavaSparkContext ctx = new JavaSparkContext(sparkConf); JavaRDD<String> lines = ctx.textFile(getFile().getPath(), 1);  JavaRDD<String> words = lines.flatMap(new FlatMapFunction<String, String>() { @Override public Iterable<String> call(String s) { return Arrays.asList(SPACE.split(s)); } });  JavaPairRDD<String, Integer> ones = words.mapToPair(new PairFunction<String, String, Integer>() { @Override public Tuple2<String, Integer> call(String s) { return new Tuple2<String, Integer>(s, 1); } });  JavaPairRDD<String, Integer> counts = ones.reduceByKey(new Function2<Integer, Integer, Integer>() { @Override public Integer call(Integer i1, Integer i2) { return i1 + i2; } });  //write counts to the hazelcast map. javaPairRddFunctions(counts).saveToHazelcastMap(""counts"");   HazelcastInstance client = HazelcastClient.newHazelcastClient(); IMap<Object, Object> countsMap = client.getMap(""counts"");  System.out.println(""Results fetched from Hazelcast Map :""); for (Map.Entry<Object, Object> entry : countsMap.entrySet()) { System.out.println(entry.getKey() + "": "" + entry.getValue()); } client.getLifecycleService().terminate(); ctx.stop(); } "	0	0	0	0	0	1
public void insert(final CompareLocale favorite) { orma.transactionSync(new Runnable() { @Override public void run() { orma.insertIntoCompareLocale(favorite); } }); } 	0	0	0	0	0	1
@Override public List<DeploymentUnit> deployHealthyUnits() { if (this.healthyUnits.size() < hostIds.size()) { addMissingUnits(); } return healthyUnits; } 	0	0	0	0	0	1
"static public void addkvMapping(String k, String v, String property, String object, String affectedEntities) { String s = new String(); s += ""\t\t\t\t\t<tr>\n""; s += ""\t\t\t\t\t\t<td>"" + k + ""</td>\n""; s += ""\t\t\t\t\t\t<td>"" + v + ""</td>\n""; s += ""\t\t\t\t\t\t<td>"" + property + ""</td>\n""; s += ""\t\t\t\t\t\t<td>"" + object + ""</td>\n""; s += ""\t\t\t\t\t\t<td>"" + affectedEntities + ""</td>\n""; s += ""\t\t\t\t\t\t<td class=\""edit\""><a href=\""?tab=mappings&k="" + k + ""&v="" + v + ""\"">Edit/Delete</a></td>\n""; s += ""\t\t\t\t\t</tr>\n""; al.add(s);  } "	0	0	0	0	0	1
"static public void addkMapping(String k, String property, String object, String affectedEntities) { String s = new String(); s += ""\t\t\t\t\t<tr>\n""; s += ""\t\t\t\t\t\t<td>"" + k + ""</td>\n""; s += ""\t\t\t\t\t\t<td>"" + property + ""</td>\n""; s += ""\t\t\t\t\t\t<td>"" + object + ""</td>\n""; s += ""\t\t\t\t\t\t<td>"" + affectedEntities + ""</td>\n""; s += ""\t\t\t\t\t\t<td class=\""edit\""><a href=\""?tab=mappings&k="" + k + ""\"">Edit/Delete</a></td>\n""; s += ""\t\t\t\t\t</tr>\n""; al.add(s);  } "	0	0	0	0	0	1
public Mark getMark() { return mark; } 	0	0	0	0	0	1
"@Test public void test009Collision1BludgerVsBludger() {  // seed=487731455 // https://www.codingame.com/replay/171805336  String[] inputMatchString = {  ""0 5"", };  String[] inputGameStateString = { ""GameState 56 myScore: 2 myMagic: 55 opScore: 0 opMagic: 55 gameResult: UNKNOWN"", ""mw:  0 Point 14796.00 04417.00 Vector +0038.00 +0274.00 true false -1 0"", ""mw:  1 Point 14918.00 02200.00 Vector -0119.00 -0016.00 true false -1 0"", ""ow:  2 Point 08732.00 04264.00 Vector -0006.00 -0005.00 false false -1 0"", ""ow:  3 Point 15588.00 04997.00 Vector +0004.00 +0119.00 false true 7 3"", ""bl:  9 Point 15686.00 01361.00 Vector +0352.00 +0166.00 1"", ""bl: 10 Point 14963.00 01334.00 Vector +0203.00 -0259.00 1"", ""sn:  4 Point 11391.00 04986.00 Vector +0002.00 +0002.00"", ""sn:  6 Point 11922.00 01513.00 Vector +0002.00 -0002.00"", ""sn:  7 Point 15588.00 04997.00 Vector +0004.00 +0119.00 3"", };  String[] myInputActions = { ""Action MOVE Point 15588.00 04997.00 150"", ""Action MOVE Point 11922.00 01513.00 150"", };  String[] opInputActions = { ""Action MOVE Point 15686.00 01361.00 0"", ""Action MOVE Point 16001.00 02200.00 0"", };  String[] actualGameStateString = {  ""GameState 57 myScore: 2 myMagic: 56 opScore: 0 opMagic: 56 gameResult: UNKNOWN"", ""mw:  0 Point 14859.00 04722.00 Vector -0152.00 +0108.00 true false -1 0"", ""mw:  1 Point 14653.00 02150.00 Vector -0199.00 -0037.00 true false -1 0"", ""ow:  2 Point 08726.00 04259.00 Vector -0005.00 -0004.00 false false -1 0"", ""ow:  3 Point 15565.00 05174.00 Vector -0064.00 +0253.00 false false -1 2"", ""bl:  9 Point 15730.00 01309.00 Vector +0040.00 -0047.00 1"", ""bl: 10 Point 15159.00 01200.00 Vector +0177.00 -0121.00 1"", ""sn:  4 Point 11393.00 04988.00 Vector +0002.00 +0002.00"", ""sn:  6 Point 11924.00 01511.00 Vector +0002.00 -0002.00"", ""sn:  7 Point 15592.00 05116.00 Vector +0003.00 +0089.00"", };  TestUtils.setGameConstantsFromDebug(inputMatchString);  Player.GameState inputGameState = TestUtils.getGameStateFromDebug(inputGameStateString); Player.GameState actualGameState = TestUtils.getGameStateFromDebug(actualGameStateString); Player.Action[] myActions = TestUtils.getActionFromDebug(myInputActions, inputGameState); Player.Action[] opActions = TestUtils.getActionFromDebug(opInputActions, inputGameState);  Player.GameState computedGameState = Player.GameEngine.applyAction(inputGameState, myActions, opActions);  TestUtils.printComputedVSActual(computedGameState, actualGameState);  assertNotNull(computedGameState); assertEquals(actualGameState, computedGameState);  } "	0	0	0	0	0	1
"@Test(testName = ""DELETE /media/{id}"", dependsOnMethods = { ""testDeleteMetadata"" } ) public void testDeleteMedia() { Task deleteMedia = mediaClient.deleteMedia(media.getHref()); Checks.checkTask(deleteMedia); assertTrue(retryTaskSuccess.apply(deleteMedia), String.format(TASK_COMPLETE_TIMELY, ""deleteMedia""));  Error expected = Error.builder() .message(String.format( ""No access to entity \""(com.vmware.vcloud.entity.media:%s)\""."", media.getId())) .majorErrorCode(403) .minorErrorCode(""ACCESS_TO_RESOURCE_IS_FORBIDDEN"") .build();  try { media = mediaClient.getMedia(media.getHref()); fail(""Should give HTTP 403 error""); } catch (VCloudDirectorException vde) { assertEquals(vde.getError(), expected); media = null; } catch (Exception e) { fail(""Should have thrown a VCloudDirectorException""); }  if (media != null) { // guard against NPE on the .toStrings assertNull(metadataValue, String.format(OBJ_DEL, MEDIA, media.toString())); }  deleteMedia = mediaClient.deleteMedia(oldMedia.getHref()); Checks.checkTask(deleteMedia); } "	0	0	0	0	0	1
public static int read(final AtomicBuffer buffer, final ErrorConsumer consumer, final long sinceTimestamp) { int entries = 0; int offset = 0; final int capacity = buffer.capacity();  while (offset < capacity) { final int length = buffer.getIntVolatile(offset + LENGTH_OFFSET); if (0 == length) { break; }  final long lastObservationTimestamp = buffer.getLongVolatile(offset + LAST_OBSERVATION_TIMESTAMP_OFFSET); if (lastObservationTimestamp >= sinceTimestamp) { ++entries;  consumer.accept( buffer.getInt(offset + OBSERVATION_COUNT_OFFSET), buffer.getLong(offset + FIRST_OBSERVATION_TIMESTAMP_OFFSET), lastObservationTimestamp, buffer.getStringUtf8(offset + ENCODED_ERROR_OFFSET, length - ENCODED_ERROR_OFFSET)); }  offset += align(length, RECORD_ALIGNMENT); }  return entries; } 	0	0	0	0	0	1
"public static final File getMinecraftJarNonNull() throws FileNotFoundException { File jarFile = getMinecraftJar(); if (jarFile == null) { throw new FileNotFoundException(""Could not locate Minecraft Jar!""); } return jarFile; } "	0	0	0	0	0	1
"private void crLfGuts(Socket socket) throws SocketException, IOException { socket.setSoTimeout(5000); String greetings = ""Hello World!""; socket.getOutputStream().write((greetings + ""\r\n"").getBytes()); StringBuilder sb = new StringBuilder(); int c; while (true) { c = socket.getInputStream().read(); sb.append((char) c); if (c == '\n') { break; } } assertEquals(""echo:"" + greetings + ""\r\n"", sb.toString()); } "	0	0	0	0	0	1
@AfterTest public void deleteTempDirectory() { if (tempDirectory != null) { FileUtils.delete(tempDirectory); } } 	0	0	0	0	0	1
"@Override public org.openmrs.Encounter processEncounter(String incomingMessageString, Patient p, Date encDate, org.openmrs.Encounter newEncounter, Provider provider, HashMap<String, Object> parameters) { ChirdlUtilBackportsService chirdlutilbackportsService = Context .getService(ChirdlUtilBackportsService.class); org.openmrs.Encounter encounter = super.processEncounter( incomingMessageString, p, encDate, newEncounter, provider, parameters);  if (encounter == null){ //Encounter will be null if encounter was not created or //it was a duplicate encounter. return null; } // store the encounter id with the session Integer encounterId = encounter.getEncounterId(); getSession(parameters).setEncounterId(encounterId); chirdlutilbackportsService.updateSession(getSession(parameters)); if (incomingMessageString == null) { return encounter; }  LocationService locationService = Context.getLocationService();  String locationString = null; Date appointmentTime = null; String planCode = null; String carrierCode = null; String printerLocation = null; String insuranceName = null; Message message = null;  try { message = this.parser.parse(incomingMessageString); EncounterService encounterService = Context .getService(EncounterService.class); encounter = encounterService.getEncounter(encounter .getEncounterId()); if (this.hl7EncounterHandler instanceof org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) { locationString = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getLocation(message);  appointmentTime = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getAppointmentTime(message);  // DWE CHICA-492 Parse insurance plan code from IN1-35 if this is IUH if(locationString.equals(ChirdlUtilConstants.LOCATION_RIIUMG)) { planCode = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getInsuranceCompanyPlan(message); } else { planCode = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getInsurancePlan(message); }  // DWE CHICA-492 Do not parse the carrier code if this is IUH if(!locationString.equals(ChirdlUtilConstants.LOCATION_RIIUMG)) { carrierCode = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getInsuranceCarrier(message); }  printerLocation = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getPrinterLocation(message, incomingMessageString);  insuranceName = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getInsuranceName(message); } } catch (EncodingNotSupportedException e) { log.error(""Encoding not supported when parsing incoming message."", e); } catch (HL7Exception e) { log.error(""HL7 version not supported when parsing incoming message"", e); } catch (Exception e){ log.error(""Exception getting encounter information from the incoming message"", e); }    EncounterService encounterService = Context .getService(EncounterService.class); encounter = encounterService.getEncounter(encounterId); Encounter chicaEncounter = (org.openmrs.module.chica.hibernateBeans.Encounter) encounter;  chicaEncounter.setInsurancePlanCode(planCode); chicaEncounter.setInsuranceCarrierCode(carrierCode); chicaEncounter.setScheduledTime(appointmentTime); chicaEncounter.setPrinterLocation(printerLocation);  Location location = null;  if (locationString != null) { location = locationService.getLocation(locationString);  if (location == null) { location = new Location(); location.setName(locationString); locationService.saveLocation(location); log.warn(""Location '"" + locationString + ""' does not exist in the Location table. "" + ""A new location was created for '"" + locationString + ""'""); } }  chicaEncounter.setLocation(location); chicaEncounter.setInsuranceSmsCode(null);  //See if the message contains OBXs saveHL7Obs(p, message, location, chicaEncounter, getSession(parameters));  // This code must come after the code that sets the encounter values // because the states can't be created until the locationTagId and // locationId have been set State state = chirdlutilbackportsService .getStateByName(STATE_CLINIC_REGISTRATION); PatientState patientState = chirdlutilbackportsService .addPatientState(p, state, getSession(parameters) .getSessionId(), org.openmrs.module.chica.util.Util.getLocationTagId(chicaEncounter), getLocationId(chicaEncounter), null); patientState.setStartTime(chicaEncounter.getEncounterDatetime()); patientState.setEndTime(chicaEncounter.getEncounterDatetime()); chirdlutilbackportsService.updatePatientState(patientState);  state = chirdlutilbackportsService .getStateByName(STATE_HL7_CHECKIN); patientState = chirdlutilbackportsService .addPatientState(p, state, getSession(parameters) .getSessionId(), org.openmrs.module.chica.util.Util.getLocationTagId(chicaEncounter), getLocationId(chicaEncounter), null); Date processCheckinHL7Start = (Date) parameters .get(PROCESS_HL7_CHECKIN_START); Date processCheckinHL7End = (Date) parameters .get(PROCESS_HL7_CHECKIN_END); patientState.setStartTime(processCheckinHL7Start); patientState.setEndTime(processCheckinHL7End); chirdlutilbackportsService.updatePatientState(patientState);  state = chirdlutilbackportsService.getStateByName(STATE_QUERY_ALIAS); patientState = chirdlutilbackportsService .addPatientState(p, state, getSession(parameters) .getSessionId(), org.openmrs.module.chica.util.Util.getLocationTagId(chicaEncounter), getLocationId(chicaEncounter), null); Date queryKiteAliasStart = (Date) parameters.get(PARAMETER_QUERY_ALIAS_START); if (queryKiteAliasStart == null){ queryKiteAliasStart = new java.util.Date(); } Date queryKiteAliasEnd = (Date) parameters.get(PARAMETER_QUERY_ALIAS_STOP); if (queryKiteAliasEnd == null){ queryKiteAliasEnd = new java.util.Date(); }  patientState.setStartTime(queryKiteAliasStart); patientState.setEndTime(queryKiteAliasEnd); chirdlutilbackportsService.updatePatientState(patientState);  encounterService.saveEncounter(chicaEncounter); ConceptService conceptService = Context.getConceptService(); Concept concept = conceptService.getConceptByName(CONCEPT_INSURANCE_NAME); if (insuranceName != null){ org.openmrs.module.chirdlutil.util.Util.saveObs(p, concept, encounterId, insuranceName,encDate); }else { log.error(""Insurance Name is null for patient: "" + p.getPatientId()); } return encounter; } "	0	0	0	0	0	1
public void setTaxonomyRepository(TaxonomyRespository taxonomyRepository) { this.taxonomyRepository = taxonomyRepository; } 	0	0	0	0	0	1
private void saveCollectionSharing(String sharing, Learnguide collection) { collection.setSharing(sharing); this.getBaseRepository().save(collection); } 	0	0	0	0	0	1
@Override public List<String> sendRequestForGetCollaborators(String gooruUId, String searchText) { return this.getLearnguideRepository().findAllCollaboratorByResourceID(gooruUId, searchText); } 	0	0	0	0	0	1
"@GET @Produces(""application/xml"") public Response get(@QueryParam(""announcementBoardId"") String announcementBoardId, @QueryParam(""selectedYear"") int selectedYear, @QueryParam(""selectedMonth"") int selectedMonth, @QueryParam(""language"") String language) { Set<Post> posts; if (announcementBoardId.equals(EVENTS)) { posts = Site.fromSlug(""tecnicolisboa"").categoryForSlug(""eventos"").getPostsSet(); } else { posts = Site.fromSlug(""tecnicolisboa"").categoryForSlug(""noticias"").getPostsSet(); } Locale locale; if (""pt"".equals(language)) { locale = PT; } else { locale = EN; }  DateTime begin = new DateTime().toDateMidnight().withYear(selectedYear).withMonthOfYear(selectedMonth).withDayOfMonth(1) .toDateTime(); DateTime end = begin.dayOfMonth().withMaximumValue().hourOfDay().withMaximumValue().minuteOfHour().withMaximumValue() .secondOfMinute().withMaximumValue(); Interval i = new Interval(begin, end);  String result = ""SUCCESS\n""; result += ""<list>\n""; int index = 1; for (Post post : posts.stream().sorted(Post.CREATION_DATE_COMPARATOR).filter(x -> i.contains(x.getPublicationBegin())) .collect(Collectors.toList())) { result += ""  <net.sourceforge.fenixedu.presentationTier.Action.externalServices.AnnouncementDTO>\n""; result += ""    <creationDate>"" + post.getCreationDate().toString(""dd/MM/yyyy HH:mm:ss"") + ""</creationDate>\n""; result += ""    <referedSubjectBegin>"" + (post.getPublicationBegin() != null ? post.getPublicationBegin().toString(""dd/MM/yyyy HH:mm:ss"") : """") + ""</referedSubjectBegin>\n""; result += ""    <publicationBegin>"" + (post.getPublicationBegin() != null ? post.getPublicationBegin().toString(""dd/MM/yyyy HH:mm:ss"") : """") + ""</publicationBegin>\n""; result += ""    <publicationEnd>"" + (post.getPublicationEnd() != null ? post.getPublicationEnd().toString(""dd/MM/yyyy HH:mm:ss"") : """") + ""</publicationEnd>\n""; result += ""    <lastModification>"" + (post.getModificationDate() != null ? post.getModificationDate().toString(""dd/MM/yyyy HH:mm:ss"") : """") + ""</lastModification>\n"";  result += ""    <subject><![CDATA["" + post.getName().getContent(locale) + ""]]></subject>\n""; result += ""    <keywords></keywords>\n""; result += ""    <body><![CDATA["" + post.getBody().getContent(locale) + ""]]></body>\n""; result += ""    <author>GCRP</author>\n""; result += ""    <authorEmail>gcrp@ist.utl.pt</authorEmail>\n""; result += ""    <place></place>""; result += ""    <visible>"" + post.isVisible() + ""</visible>\n""; result += ""    <id>"" + post.getExternalId() + ""</id>\n""; result += ""    <photoUrl></photoUrl>\n""; result += ""    <campus>Alameda</campus>\n""; result += ""    <categories/>\n""; result += ""    <pressRelease>false</pressRelease>\n""; result += ""    <sticky>"" + false + ""</sticky>\n""; result += ""    <priority>"" + index++ + ""</priority>\n""; result += ""  </net.sourceforge.fenixedu.presentationTier.Action.externalServices.AnnouncementDTO>\n""; }  result += ""</list>""; return Response.ok(result).build();  } "	0	0	0	0	0	1
"@Test public void verifyScatterPlot() { //getText(Locator.css(""svg"")) on Chrome  final String ELISPOT_DATA_PROV = ""0\n500\n1000\n1500\n2000\n2500\n3000\n3500\n0\n5000\n10000\n15000\n20000\n25000\n30000\n35000\n40000\n45000""; final String ICS_MAGNITUDE = ""0\n1\n2\n3\n4\n5\n0\n0.5\n1\n1.5\n2\n2.5\n3\n3.5\n4\n4.5\n5""; final String NAB_IC50 = ""1\n10\n1\n10\n100\n1000"";  CDSHelper.NavigationLink.PLOT.makeNavigationSelection(this);  XAxisVariableSelector xaxis = new XAxisVariableSelector(this); YAxisVariableSelector yaxis = new YAxisVariableSelector(this);  xaxis.openSelectorWindow(); xaxis.pickSource(CDSHelper.ELISPOT); xaxis.pickVariable(CDSHelper.ELISPOT_DATA_PROV); xaxis.setScale(DataspaceVariableSelector.Scale.Linear); xaxis.confirmSelection(); sleep(CDSHelper.CDS_WAIT_ANIMATION); yaxis.pickSource(CDSHelper.ELISPOT); yaxis.pickVariable(CDSHelper.ELISPOT_MAGNITUDE_BACKGROUND_SUB); yaxis.setScale(DataspaceVariableSelector.Scale.Linear); yaxis.confirmSelection();  if (CDSHelper.validateCounts) { cds.assertPlotTickText(ELISPOT_DATA_PROV); }  yaxis.openSelectorWindow(); sleep(CDSHelper.CDS_WAIT_ANIMATION); yaxis.pickSource(CDSHelper.ICS); yaxis.pickVariable(CDSHelper.ICS_MAGNITUDE_BACKGROUND_SUB); yaxis.setScale(DataspaceVariableSelector.Scale.Linear); yaxis.confirmSelection();  xaxis.openSelectorWindow(); xaxis.pickSource(CDSHelper.NAB); xaxis.pickVariable(CDSHelper.NAB_TITERID50); xaxis.setScale(DataspaceVariableSelector.Scale.Linear); xaxis.confirmSelection();  assertTrue(""For ELISPOT vs ICS x-axis gutter plot was not present."", cdsPlot.hasXGutter()); assertTrue(""There is an x-axis gutter plot, but there are no data points in it."", cdsPlot.getXGutterPlotPointCount() > 0 ); assertTrue(""For ELISPOT vs ICS y-axis gutter plot was not present."", cdsPlot.hasYGutter()); assertTrue(""There is an y-axis gutter plot, but there are no data points in it."", cdsPlot.getYGutterPlotPointCount() > 0 );  xaxis.openSelectorWindow(); xaxis.pickSource(CDSHelper.ICS); xaxis.pickVariable(CDSHelper.ICS_MAGNITUDE_BACKGROUND_SUB); xaxis.setScale(DataspaceVariableSelector.Scale.Linear); xaxis.confirmSelection();  if (CDSHelper.validateCounts) { cds.assertPlotTickText(ICS_MAGNITUDE); }  // Test log scales yaxis.openSelectorWindow(); yaxis.pickSource(CDSHelper.NAB); yaxis.pickVariable(CDSHelper.NAB_TITERID50); yaxis.setScale(DataspaceVariableSelector.Scale.Log); yaxis.confirmSelection();  assertTrue(""For NAB vs ICS x-axis gutter plot was not present."", cdsPlot.hasXGutter()); assertTrue(""There is an x-axis gutter plot, but there are no data points in it."", cdsPlot.getXGutterPlotPointCount() > 0 ); assertTrue(""For NAB vs ICS y-axis gutter plot was not present."", cdsPlot.hasYGutter()); assertTrue(""There is an y-axis gutter plot, but there are no data points in it."", cdsPlot.getXGutterPlotPointCount() > 0 );  // Test disabled for now as a result of side effect of log transformation story. will re-enable when // filter refinement is done and compound filter is used to drop <=0 data but retain null. //        xaxis.openSelectorWindow(); //        xaxis.pickSource(CDSHelper.SUBJECT_CHARS); //        xaxis.pickVariable(CDSHelper.DEMO_AGE); //        xaxis.setScale(DataspaceVariableSelector.Scale.Log); //        xaxis.confirmSelection(); // //        assertTrue(""For NAB vs Demographics x-axis gutter plot was not present."", cdsPlot.hasXGutter()); //        assertFalse(""For NAB vs Demographics y-axis gutter plot was present and it should not be."", cdsPlot.hasYGutter()); // //        if (CDSHelper.validateCounts) //        { //            cds.assertPlotTickText(NAB_IC50); //        } } "	0	0	0	0	0	1
"public static void receiveBurnCMDMessage(EMMessage message) { String msgId = message.getStringAttribute(EaseConstant.MESSAGE_ATTR_BURN_MSG_ID, """"); EMClient.getInstance() .chatManager() .getConversation(message.getFrom()) .removeMessage(msgId); } "	0	0	0	0	0	1
"public List<Passe> getAllByRound(long round) { Cursor res = database.rawQuery( ""SELECT s._id, s.passe, s.points, s.x, s.y, s.comment, s.arrow, s.arrow_index, "" + ""(SELECT COUNT(x._id) FROM SHOOT x WHERE x.passe=p._id), p.exact "" + ""FROM PASSE p  "" + ""LEFT JOIN SHOOT s ON p._id = s.passe "" + ""WHERE p.round = "" + round + "" "" + ""ORDER BY p._id ASC, s._id ASC"", null); List<Passe> list = new ArrayList<>(); if (res.moveToFirst()) { long oldRoundId = -1; int pIndex = 0; do { int ppp = res.getInt(8); if (ppp == 0) { res.moveToNext(); continue; } Passe passe = new Passe(ppp); passe.setId(res.getLong(1)); passe.roundId = round; passe.exact = res.getInt(9) == 1; if (oldRoundId != passe.roundId) { pIndex = 0; oldRoundId = passe.roundId; } passe.index = pIndex++; for (int i = 0; i < ppp; i++) { passe.shot[i] = ShotDataSource.cursorToShot(res, i); res.moveToNext(); } list.add(passe); } while (!res.isAfterLast()); } res.close(); return list; } "	0	0	0	0	0	1
"private Passe get(long passeId) { Cursor res = database.rawQuery( ""SELECT s._id, s.passe, s.points, s.x, s.y, s.comment, s.arrow, s.arrow_index, p.exact "" + ""FROM SHOOT s, PASSE p "" + ""WHERE s.passe=p._id "" + ""AND p._id="" + passeId + "" "" + ""ORDER BY s._id ASC"", null); int count = res.getCount();  res.moveToFirst(); Passe p = new Passe(count); p.setId(passeId); p.index = -1; p.exact = res.getInt(8) == 1; for (int i = 0; i < count; i++) { p.shot[i] = ShotDataSource.cursorToShot(res, i); res.moveToNext(); } res.close(); return p; } "	0	0	0	0	0	1
"@GET @Path(""/registry/list"") public Response actionTypes() { return new JsonResponse<>(Response.Status.OK, ActionRegistry.supportedActions()).build(); } "	0	0	0	0	0	1
public void restoreCategories() { editor.initVirtualPages(); firePropertyChange(DiagramWalkerSet.PROPERTY_CHANGE_DIAGRAM_WALKER, null, null); } 	0	0	0	0	0	1
@Override protected synchronized void install() { this.eventBus.register(getOwner()); } 	0	0	0	0	0	1
"public static void main(String[] args) throws Exception { ProviderXConfigBuilder builder = new ProviderXConfigBuilder(); builder.myIp(""192.168.31.175"").myPort(10002).addServicePackage(""limitart.core.rpcx.demo"").providerUID(3) .serviceCenterIp(""192.168.31.175"").serviceCenterPort(5555); ProviderX provider = new ProviderX(builder.build(), new IProviderListener() {  @Override public void onServiceCenterConnected(ProviderX provider) { ProviderJob job = new ProviderJobBuilder().jobName(""limitart-schedule"").intervalInSeconds(5) .repeatForever().listener(new IProviderScheduleListener() {  @Override public void action() { System.out.println(""jowiejfow""); } }).build(); try { provider.schedule(job); } catch (Exception e) { e.printStackTrace(); } }  @Override public void onProviderBind(ProviderX provider) {  } }); provider.bind();  } "	0	0	0	0	0	1
"@WorkerThread public Float getAverageHeartRate(Uri rideUri) { // First get the min and max float min = getMinHeartRate(rideUri); float max = getMaxHeartRate(rideUri);  long rideId = ContentUris.parseId(rideUri); String[] projection = { ""avg("" + LogColumns.HEART_RATE + "")"" }; LogSelection where = new LogSelection(); where.rideId(rideId).and().heartRateGtEq((int) min).and().heartRateLtEq((int) max); Cursor c = where.query(mContext, projection); try { if (!c.moveToNext()) return null; if (c.isNull(0)) return null; return c.getFloat(0); } finally { c.close(); } } "	0	0	0	0	0	1
@WorkerThread public float getMaxHeartRate(Uri rideUri) { return getMax(rideUri, LogColumns.HEART_RATE); } 	0	0	0	0	0	1
public void removeListener(LogListener listener) { mListeners.remove(listener); } 	0	0	0	0	0	1
"@WorkerThread public Long getLastLogDate(Uri rideUri) { long rideId = ContentUris.parseId(rideUri); String[] projection = { ""max("" + LogColumns.RECORDED_DATE + "")"" }; LogSelection where = new LogSelection(); where.rideId(rideId); Cursor c = where.query(mContext, projection); try { if (!c.moveToNext()) return null; if (c.isNull(0)) return null; return c.getLong(0); } finally { c.close(); } } "	0	0	0	0	0	1
public void addListener(LogListener listener) { mListeners.add(listener); } 	0	0	0	0	0	1
@WorkerThread public float getMaxCadence(Uri rideUri) { return getMax(rideUri, LogColumns.CADENCE); } 	0	0	0	0	0	1
@WorkerThread public float getMinHeartRate(Uri rideUri) { return getMin(rideUri, LogColumns.HEART_RATE); } 	0	0	0	0	0	1
"@WorkerThread public float getMax(Uri rideUri, String column) { // Get the point count to discard the top 10% values Integer count = getLogCount(rideUri); if (count == null) return 0;  long rideId = ContentUris.parseId(rideUri); String[] projection = { column }; LogSelection where = new LogSelection(); where.rideId(rideId).and().addRaw(column + "" IS NOT NULL""); Cursor c = where.query(mContext, projection, column + "" DESC LIMIT "" + count / 10); try { if (!c.moveToLast()) return 0; return c.getFloat(0); } finally { c.close(); } } "	0	0	0	0	0	1
public boolean LabelKeyboardHandler(int KeyCode, AttributeSet attrs, String ComponentName, Component comp, Circuit circ, SetAttributeAction act, boolean CreateAction) { switch (KeyCode) { case KeyEvent.VK_L: if (attrs.containsAttribute(StdAttr.LABEL)) { String OldLabel = attrs.getValue(StdAttr.LABEL); String NewLabel = AskAndSetLabel(ComponentName,OldLabel,circ,comp,attrs,act,CreateAction); if (!NewLabel.equals(OldLabel)) { if (!NewLabel.isEmpty()&& LabelEndsWithNumber(NewLabel)) { Activate(circ); } else  { Stop(circ); } } } return true; case KeyEvent.VK_T: if (attrs.containsAttribute(StdAttr.LABEL_VISABILITY)) { if (CreateAction) act.set(comp, StdAttr.LABEL_VISABILITY, !attrs.getValue(StdAttr.LABEL_VISABILITY)); else attrs.setValue(StdAttr.LABEL_VISABILITY, !attrs.getValue(StdAttr.LABEL_VISABILITY)); } return true; case KeyEvent.VK_V: if (attrs.containsAttribute(StdAttr.LABEL_VISABILITY)&&!attrs.getValue(StdAttr.LABEL_VISABILITY)) { if (CreateAction) act.set(comp, StdAttr.LABEL_VISABILITY, true); else attrs.setValue(StdAttr.LABEL_VISABILITY, true); } return true; case KeyEvent.VK_H: if (attrs.containsAttribute(StdAttr.LABEL_VISABILITY)&&attrs.getValue(StdAttr.LABEL_VISABILITY)) { if (CreateAction) act.set(comp, StdAttr.LABEL_VISABILITY, false); else attrs.setValue(StdAttr.LABEL_VISABILITY, false); } return true; case KeyEvent.VK_A: Stop(circ); return true; } return false; } 	0	0	0	0	0	1
"public static void main(String[] args) { String rootName = ""root""; LayoutNode.RectNode root = new LayoutNode.RectNode(rootName); JNodeLayout layout = new JNodeLayout(root); root.setHgap(10); root.setVgap(10);  JPanel panel = new JPanel();  panel.setLayout(layout);  layout.addLayoutNode(new LayoutNode.HorizontalNode(""topLine""), rootName, new Rectangle2D.Double(0, 0, 1, 0.05)); layout.addLayoutNode(new LayoutNode.RectNode(""panelNode1""), rootName, new Rectangle2D.Double(0, 0.05, 1, 0.65)); layout.addLayoutNode(new LayoutNode.RectNode(""panelNode2""), rootName, new Rectangle2D.Double(0, 0.7, 1, 0.25)); layout.addLayoutNode(new LayoutNode.HorizontalNode(""bottomLine""), rootName, new Rectangle2D.Double(0, 0.95, 0.5, 0.05)); layout.addLayoutNode(new LayoutNode.HorizontalNode(""bottomLineRight""), rootName, new Rectangle2D.Double(0.7, 0.95, 0.3, 0.05));  layout.setVerticalAlignment(""topLine"", NodeAlignment.CENTER);  layout.setVerticalAlignment(""bottomLine"", NodeAlignment.CENTER); layout.setHorizontalAlignment(""bottomLine"", NodeAlignment.LEFT);  layout.setVerticalAlignment(""bottomLineRight"", NodeAlignment.CENTER); layout.setHorizontalAlignment(""bottomLineRight"", NodeAlignment.RIGHT);  NodeConstraints topLine = new NodeConstraints(""topLine""); panel.add(new JLabel(""Hightlight: ""), topLine); panel.add(new JTextField(35), topLine); panel.add(new JButton(""...""), topLine); panel.add(new JButton(""ShowNext""), topLine);  panel.add(new JScrollPane(new JPanel()), new NodeConstraints(""panelNode1"", null)); panel.add(new JScrollPane(new JTextArea()), new NodeConstraints(""panelNode2"", null));  NodeConstraints bottomLine = new NodeConstraints(""bottomLine"");  panel.add(new JLabel(""Volume: ""), bottomLine); Vector<String> items = new Vector<String>(Arrays.asList(new String[] { ""A:\\  "" })); panel.add(new JComboBox<String>(items), bottomLine); panel.add(new JButton(""Refresh""), bottomLine);  panel.add(createSpinner(), bottomLine);  NodeConstraints bottomLineRight = new NodeConstraints(""bottomLineRight""); panel.add(new JButton(""Export""), bottomLineRight); panel.add(new JButton(""Quit""), bottomLineRight);  JMenuBar menubar = new JMenuBar(); menubar.add(new JMenu(""File"")); menubar.add(new JMenu(""Options"")); menubar.add(new JMenu(""Help""));  JFrame frame = new JFrame(""DisKView - Sysinternals: www.sysinternal.com""); frame.setJMenuBar(menubar); frame.add(panel); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true);  } "	0	0	0	0	0	1
"@SuppressWarnings(""rawtypes"") public static boolean isSirenProperty(Class<?> type, Object obj, Field field) { boolean isProp = false;  Siren4JProperty anno = field.getAnnotation(Siren4JProperty.class); if (anno != null || type.isEnum()) { isProp = true; } else if (ArrayUtils.contains(propertyTypes, type)) { isProp = true; } else if (obj != null && (Collection.class.equals(type) || ArrayUtils.contains(type.getInterfaces(), Collection.class))) { //Try to determine value type if (!((Collection) obj).isEmpty()) { Object first = findFirstNonNull(((Collection) obj).iterator()); if (first == null || ArrayUtils.contains(propertyTypes, first.getClass())) { isProp = true; } } } else if (obj != null && (Map.class.equals(type) || ArrayUtils.contains(type.getInterfaces(), Map.class))) { //Try to determine value types of key and value if (!((Map) obj).isEmpty()) { Object firstKey = findFirstNonNull(((Map) obj).keySet().iterator()); Object firstVal = findFirstNonNull(((Map) obj).entrySet().iterator()); if ((firstKey == null || ArrayUtils.contains(propertyTypes, firstKey.getClass())) && (firstVal == null || ArrayUtils.contains(propertyTypes, firstVal.getClass()))) { isProp = true; } } } return isProp; } "	0	0	0	0	0	1
"private synchronized void recalculateDots() { orbits .retainAll( allOrbits );  Symmetry symmetry = allOrbits .getSymmetry(); RealVector test = new RealVector( 0.1d, 0.1d, 1d ); if ( symmetry instanceof OctahedralSymmetry ) test = new RealVector( 2d, 1d, 4d ); else if ( symmetry instanceof DodecagonalSymmetry ) test = new RealVector( 10d, 1d, 1d );  orbitDots .clear(); //        lastOrbit = null;  // cannot do this, we might have a valid value, for example after loading from XML boolean lastOrbitChanged = false; for ( Direction dir : allOrbits ) { if ( lastOrbit == null ) { // just a way to initialize the lastOrbit lastOrbit = dir; lastOrbitChanged = true; } OrbitState orbit = new OrbitState(); orbitDots .put( dir, orbit );  orbit .dotX = dir .getDotX(); if ( orbit .dotX >= 0d ) { // This orbit supports pre-computed dot locations orbit .dotY = dir .getDotY(); } else { // The old way Axis axis = symmetry .getAxis( test, Collections .singleton( dir ) ); AlgebraicVector v = axis .normal(); double z =  v .getComponent( 2 ) .evaluate(); orbit.dotX = v .getComponent( 0 ) .evaluate(); orbit.dotX = orbit.dotX / z; // intersect with z=0 plane orbit.dotY = v .getComponent( 1 ) .evaluate(); orbit.dotY = orbit.dotY / z; // intersect with z=0 plane }  //            if ( symmetry instanceof IcosahedralSymmetry ) { // switch X and Y (why? don't know, it just works) double temp = orbit.dotX; orbit.dotX = orbit.dotY; orbit.dotY = temp; }  if ( orbit.dotY > yMax ) yMax = orbit.dotY; if ( orbit.dotX > xMax ) xMax = orbit.dotX; } if ( ( lastOrbit == null ) || (! allOrbits .contains( lastOrbit ) ) ) { lastOrbitChanged = true; if ( ! orbits .isEmpty() ) lastOrbit = orbits .last(); else if ( ! orbitDots .isEmpty() ) lastOrbit = orbitDots .keySet() .iterator() .next(); else lastOrbit = null; } if ( lastOrbitChanged ) properties() .firePropertyChange( ""selectedOrbit"", null, lastOrbit == null? null : lastOrbit .getName() ); } "	0	0	0	0	0	1
@ExposedMethod(doc = BuiltinDocs.dict_iteritems_doc) final PyObject stringmap_iteritems() { return new ItemsIter(table.entrySet()); } 	0	0	0	0	0	1
"public void sub(final TaskCompletionSource<DDPSubscription.Ready> task, String name, JSONArray params, String id) { final boolean requested = sendMessage(""sub"", json -> json.put(""id"", id).put(""name"", name).put(""params"", params));  if (requested) { CompositeDisposable disposables = new CompositeDisposable();  disposables.add( flowable.filter(callback -> callback instanceof RxWebSocketCallback.Message) .map(callback -> ((RxWebSocketCallback.Message) callback).responseBodyString) .map(DDPClientImpl::toJson) .subscribe( response -> { String msg = extractMsg(response); if (""ready"".equals(msg) && !response.isNull(""subs"")) { JSONArray ids = response.optJSONArray(""subs""); for (int i = 0; i < ids.length(); i++) { String _id = ids.optString(i); if (id.equals(_id)) { task.setResult(new DDPSubscription.Ready(client, id)); disposables.clear(); break; } } } else if (""nosub"".equals(msg) && !response.isNull(""id"") && !response.isNull( ""error"")) { String _id = response.optString(""id""); if (id.equals(_id)) { task.setError(new DDPSubscription.NoSub.Error(client, id, response.optJSONObject(""error""))); disposables.clear(); } } }, RCLog::e ) );  addErrorCallback(disposables, task); } else { task.trySetError(new DDPClientCallback.Closed(client)); } } "	0	0	0	0	0	1
private void handleThrowable(Error error) throws Error { if (throwError) { throw error; } else { ExceptionReporter.report(testContext.getTestId(), error); } } 	0	0	0	0	0	1
public static GroupProjectDto toDto(final Project p, final UserProject up, final UserEntity u) { return new GroupProjectDto(p.getId(), p.getName(), p.getLogo(), up.getRole()==null ? ProjectType.PROJECT_ROLE_GUEST.getCode():up.getRole(), p.getCreateUserId(), u.getName(), p.getCreateTime()); } 	0	0	0	0	0	1
"private String validString(String attr, Object value, String validator, String acceptLanguage, JsonArray errorsContext) { Pattern p = patterns.get(validator); if (p == null) { return i18n.translate(""missing.validator"", I18n.DEFAULT_DOMAIN, acceptLanguage, validator); } if (value instanceof String && p.matcher((String) value).matches()) { if (""email"".equals(validator) && !""emailAcademy"".equals(attr) && invalidEmails != null && invalidEmails.containsKey(value)) { return i18n.translate(""invalid.bounce.email"", I18n.DEFAULT_DOMAIN, acceptLanguage, attr, (String) value); } return null; } else { if (errorsContext != null) { errorsContext.addObject(new JsonObject() .putString(""reason"", ""invalid.value"") .putString(""attribute"", i18n.translate(attr, I18n.DEFAULT_DOMAIN, acceptLanguage)) .putString(""value"", (value != null ? value.toString() : ""null"")) ); } return i18n.translate(""invalid.value"", I18n.DEFAULT_DOMAIN, acceptLanguage, """" ,attr, (value != null ? value.toString() : ""null"")); } } "	0	0	0	0	0	1
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_oauth);  Environment environment = Environment.fromPrefix(getIntent().getStringExtra(EXTRA_ENVIRONMENT)); String clientId = getIntent().getStringExtra(EXTRA_CLIENT_ID); String scope = getIntent().getStringExtra(EXTRA_SCOPE); String redirectUri = getIntent().getStringExtra(EXTRA_REDIRECT_URI);  OAuthFragment f = OAuthFragment.newInstance(environment, clientId, scope, redirectUri); getSupportFragmentManager().beginTransaction() .replace(R.id.container_content, f) .commit(); } 	0	0	0	0	0	1
public void next(Response response, Request.RequestArguments arguments) { try { swfSession.stepContinue(); waitingForResume = false; } catch (Exception e) { e.printStackTrace(System.err); } sendResponse(response); } 	0	0	0	0	0	1
@Override public String[] getIds() { return new String[] { ID }; } 	0	0	0	0	0	1
private void resetKeyMode() { charReset(); if (mKeyMode != MODE_NUM) { commitTyped(); } mComposing.setLength(0); mComposingI.setLength(0); getCurrentInputConnection().finishComposingText(); } 	0	0	0	0	0	1
"private void addErrorLoggerHandler() throws IOException, OtpErlangException { OtpErlangList args = OtpUtil.list(mbox.self()); sendRPC( ""error_logger"", ""add_report_handler"", OtpUtil.list(ERLYBERLY_ATOM, args) );  // flush the return value receiveRPC(); } "	0	0	0	0	0	1
"protected String getApplicationName() { if (applicationName == null) { applicationName = dockerConfig.getDockerRepository() .replace(""${project.artifactId}"", getPOMManager().getArtifactId()); } return applicationName; } "	0	0	0	0	0	1
default MacAddress sourceMac(@Nonnull final MacipAclRule rule) { return new MacAddress(byteArrayToMacSeparated(rule.srcMac != null ? rule.srcMac : DEFAULT_MAC_BYTES)); } 	0	0	0	0	0	1
default MacAddress sourceMacMask(@Nonnull final MacipAclRule rule) { return new MacAddress(byteArrayToMacSeparated(rule.srcMacMask != null ? rule.srcMacMask : DEFAULT_MAC_MASK_BYTES)); } 	0	0	0	0	0	1
public void setFirstDayOfWeek(int firstDayOfWeek) { mStyleDelegate.setFirstDayOfWeek(firstDayOfWeek); mAdapter.setFirstDayOfWeek(firstDayOfWeek); } 	0	0	0	0	0	1
void resumeReadsInternal(boolean wakeup) { boolean alreadyResumed = anyAreSet(state, STATE_READS_RESUMED); state |= STATE_READS_RESUMED; if(!alreadyResumed || wakeup) { if (!anyAreSet(state, STATE_IN_LISTENER_LOOP)) { getIoThread().execute(new Runnable() {  @Override public void run() { state |= STATE_IN_LISTENER_LOOP; try { do { ChannelListener<? super R> listener = getReadListener(); if (listener == null || !isReadResumed()) { return; } ChannelListeners.invokeChannelListener((R) AbstractFramedStreamSourceChannel.this, listener); //if writes are shutdown or we become active then we stop looping //we stop when writes are shutdown because we can't flush until we are active //although we may be flushed as part of a batch } while (allAreClear(state, STATE_CLOSED) && frameDataRemaining > 0 && data != null); } finally { state &= ~STATE_IN_LISTENER_LOOP; } } }); } } } 	0	0	0	0	0	1
"@Test public void create() { Dashboard expected = makeTeamDashboard(""template"", ""title"", ""appName"", ""comp1"", ""comp2"");  when(dashboardRepository.save(expected)).thenReturn(expected);  assertThat(dashboardService.create(expected), is(expected)); verify(componentRepository, times(1)).save(expected.getApplication().getComponents()); } "	0	0	0	0	0	1
"private void sendEmailAlertApplyJob(ProjectEntity projectEntity, ProjectRegistrantEntity projectRegistrantEntity, String mailSubject, Address[] recipientAddresses, Template template) throws MessagingException, IOException, TemplateException { applyJobMailMessage.setRecipients(Message.RecipientType.TO, recipientAddresses); StringWriter stringWriter = new StringWriter();  Map<String, Object> templateModel = new HashMap<>(); templateModel.put(""webBaseUrl"", webBaseUrl); templateModel.put(""projectTitle"", projectEntity.getProjectTitle()); templateModel.put(""projectDescription"", projectEntity.getProjectDescription()); templateModel.put(""skills"", StringUtils.join(projectEntity.getSkills(), ""<br/>"")); templateModel.put(""payMethod"", projectEntity.getPayMethod()); templateModel.put(""estimatedEndDate"", projectEntity.getEstimatedEndDate()); templateModel.put(""budget"", projectEntity.getBudget()); templateModel.put(""estimatedDuration"", projectEntity.getEstimatedDuration()); templateModel.put(""estimatedWorkload"", projectEntity.getEstimatedWorkload()); templateModel.put(""hourlyRate"", projectEntity.getHourlyRate()); templateModel.put(""numberOfHires"", projectEntity.getNumberOfHires()); templateModel.put(""projectId"", projectEntity.getProjectId()); templateModel.put(""projectAlias"", projectEntity.getProjectTitle().replaceAll(""\\W"", ""-""));  templateModel.put(""registrantFirstName"", projectRegistrantEntity.getRegistrantFirstName()); templateModel.put(""registrantLastName"", projectRegistrantEntity.getRegistrantLastName()); templateModel.put(""registrantEmail"", projectRegistrantEntity.getRegistrantEmail()); templateModel.put(""resumeLink"", projectRegistrantEntity.getResumeLink());  template.process(templateModel, stringWriter); mailSubject = String.format(mailSubject, projectEntity.getProjectTitle()); applyJobMailMessage.setSubject(MimeUtility.encodeText(mailSubject, ""UTF-8"", null)); applyJobMailMessage.setText(stringWriter.toString(), ""UTF-8"", ""html"");  stringWriter.flush(); applyJobMailMessage.saveChanges(); mailSender.send(applyJobMailMessage); } "	0	0	0	0	0	1
"@Override public void process(InputStream in, OutputStream out) throws IOException { JsonParser jp = Json.createParser(in); Event prev = null; int depthPastTarget = 0; boolean insideTarget = false; boolean seenTarget = false; while (jp.hasNext()) { Event e = jp.next(); String str = null;  switch (e) { case KEY_NAME: writeComma(prev, out); str = ""\"""" + StringEscapeUtils.escapeJson(jp.getString()) + ""\"": ""; out.write(str.getBytes()); if (depth.size() == 1) { // this could be the top-level target if (jp.getString().equals(this.field)) { // this is a match insideTarget = true; seenTarget = true; } }  break; case START_ARRAY: if (prev == Event.END_ARRAY) { out.write("", "".getBytes()); } out.write(""["".getBytes()); depth.push(A); break; case START_OBJECT: if (insideTarget) { depthPastTarget += 1; } if (prev == Event.END_OBJECT) { out.write("", "".getBytes()); } out.write(""{"".getBytes()); depth.push(O); break; case END_ARRAY: out.write(""]"".getBytes()); depth.pop(); break; case END_OBJECT: if (depth.size() == 1 && !seenTarget) { writeComma(prev, out); str = ""\"""" + StringEscapeUtils.escapeJson(this.field) + ""\"": {"" + this.content + ""}""; out.write(str.getBytes()); } if (insideTarget && depthPastTarget == 1) { writeComma(prev, out); out.write(this.content.getBytes()); insideTarget = false; } else if (insideTarget) { depthPastTarget -= 1; } out.write(""}"".getBytes()); depth.pop(); break; case VALUE_STRING: writeComma(prev, out); str = ""\"""" + StringEscapeUtils.escapeJson(jp.getString()) + ""\""""; out.write(str.getBytes()); break; case VALUE_NUMBER: writeComma(prev, out); out.write(jp.getString().getBytes()); break; case VALUE_TRUE: writeComma(prev, out); out.write(""true"".getBytes()); break; case VALUE_FALSE: writeComma(prev, out); out.write(""false"".getBytes()); break; case VALUE_NULL: writeComma(prev, out); out.write(""null"".getBytes()); break;  default: break; } prev = e; } } "	0	0	0	0	0	1
"public Project getProject(int projId) { logger.debug(""..getProject by projId""); Project project = null; PreparedStatement pstm = null; ResultSet rs = null; try { conn = new DbConnection().open(); StringBuilder sql = new StringBuilder(); sql.append("" SELECT  `proj_id`, `proj_name`, `proj_details`,""); sql.append("" proj_status,(SELECT conf_value FROM config c WHERE c.conf_name = p.proj_status) as proj_status_desc,""); sql.append("" (SELECT prot_name FROM project_type pt WHERE pt.prot_id = p.prot_id ) as prot_id, ""); sql.append("" proj_remark,proj_verify_by,proj_verify_date,account_code,""); sql.append("" (SELECT plan_name FROM plan pl WHERE pl.plan_id = p.plan_id) as plan_id, ""); sql.append("" (SELECT budp_name FROM budget_plan bp WHERE bp.budp_id = p.budp_id ) as budp_id, stra_id, ""); sql.append("" DATE_FORMAT(modified_date,'%d-%m-%Y') as modified_date, ""); sql.append("" (SELECT CONCAT(emp_fname,' ',emp_lname) FROM employee e WHERE e.emp_id = p.modified_by) as modified_by""); sql.append("" FROM `project` p WHERE p.proj_id = ?""); pstm = conn.prepareStatement(sql.toString()); pstm.setInt(1, projId); logger.info(""pstm ::=="" + pstm.toString()); rs = pstm.executeQuery();  if (rs.next()) { project = getEntityProject(rs); } } catch (Exception e) { logger.error(""getProject Error"", e); } finally { this.close(pstm, rs); } return project; } "	0	0	0	0	0	1
"public List<Project> getProjectListHaveTaskAssign(Integer empId) { logger.debug(""..getProjectListHaveTaskAssign""); List<Project> list = new ArrayList<Project>(); PreparedStatement pstm = null; ResultSet rs = null; try { conn = new DbConnection().open(); StringBuilder sql = new StringBuilder(); sql.append("" SELECT  `proj_id`, `proj_name`, `proj_details`, ""); sql.append("" proj_status,(SELECT conf_value FROM config c WHERE c.conf_name = p.proj_status) as proj_status_desc,""); sql.append("" plan_id,budp_id, ""); sql.append("" `prot_id`, `proj_remark`, `proj_verify_date`, `proj_verify_by`, ""); sql.append("" DATE_FORMAT(modified_date,'%d-%m-%Y') as modified_date, `modified_by` ""); sql.append("" FROM `project` p ""); sql.append("" WHERE p.proj_id IN (SELECT proj_id  FROM `task_assign` WHERE task_userid = ?)""); sql.append("" ORDER BY p.proj_name ASC""); pstm = conn.prepareStatement(sql.toString()); pstm.setInt(1, empId); logger.info(""pstm ::=="" + pstm.toString()); rs = pstm.executeQuery();  while (rs.next()) { list.add(getEntityProject(rs)); } } catch (Exception e) { logger.error(""getProjectListHaveTaskAssign Error"", e); } finally { this.close(pstm, rs); } return list; } "	0	0	0	0	0	1
private AbstractMessageSendNode binaryMessage(final MethodBuilder builder, final ExpressionNode receiver) throws ParseError { SourceCoordinate coord = getCoordinate(); SSymbol msg = binarySelector(); ExpressionNode operand = binaryOperand(builder);  return createMessageSend(msg, new ExpressionNode[] {receiver, operand}, getSource(coord)); } 	0	0	0	0	0	1
public Boolean getProcessingStatus() { return processingStatus; } 	0	0	0	0	0	1
public void tick() { getSecondTimeUnit().increment(); } 	0	0	0	0	0	1
public static boolean isPassable(Location from, Location to) { return preferAxisWise ? BlockProperties.isPassableAxisWise(from, to) : BlockProperties.isPassable(from, to); } 	0	0	0	0	0	1
public StudyPlan getCoursesFromMajor(String major , int semester) { return null; } 	0	0	0	0	0	1
public int getLayoutTransitionOffsetForPage(int index) { if (mPageScrolls == null || index >= mPageScrolls.length || index < 0) { return 0; } else { View child = getChildAt(index);  int scrollOffset = 0; LayoutParams lp = (LayoutParams) child.getLayoutParams(); if (!lp.isFullScreenPage) { scrollOffset = isLayoutRtl() ? getPaddingRight() : getPaddingLeft(); }  int baselineX = mPageScrolls[index] + scrollOffset + getViewportOffsetX(); return (int) (child.getX() - baselineX); } } 	0	0	0	0	0	1
"protected void showControls() { try { FXMLLoader loader = new FXMLLoader(); loader.setLocation(MainApp.class.getResource(""view/Controls.fxml"")); AnchorPane controls = loader.load(); rootLayout.setRight(controls); controlsController = loader.getController(); } catch (Exception e) { e.printStackTrace(); } } "	0	0	0	0	0	1
public LogicalDatastoreType getDsType() { return LogicalDatastoreType.CONFIGURATION; } 	0	0	0	0	0	1
public void AddSource(String name, PIDSource source) { mSources.put(name, source); } 	0	0	0	0	0	1
"protected void run() {  vpLeft.setWidth(""300px""); vpRight.setWidth(""300px""); hpAddPermission.setWidth(""300px""); vpNotePermission.setWidth(""300px"");  tbNoteShareMail.getElement().setPropertyString(""placeholder"", ""nutzer@noteit.de""); tbNoteSubTitel.getElement().setPropertyString(""placeholder"", ""Dein Untertitel""); tbNoteTitel.getElement().setPropertyString(""placeholder"", ""Dein Titel""); content.getElement().setAttribute(""placeholder"", ""Deine Notiz"");  hpHeader.setStyleName(""headerDetailView""); lblHeaderTitel.setStyleName(""lblHeaderTitel""); hpShowNote.setStyleName(""showDetailContent""); vpRight.setStyleName(""vpRightDetailContent""); hpAddPermission.setStyleName(""vpAddPermissionNotebook""); lblNoteDate.setStyleName(""lblNoteDate"");  tbNoteTitel.setStyleName(""textbox""); tbNoteSubTitel.setStyleName(""textbox""); dateBox.setStyleName(""textbox"");  rbRead.setValue(true); hpAddPermission.add(tbNoteShareMail); hpAddPermission.add(btnAddNotePermission); hpAddPermission.add(btnDeletePermission); hpAddPermission.setSpacing(0);  hpHeader.add(lblHeaderTitel); hpHeader.add(lblNoteDate); hpShowNote.setWidth(""600px""); /** * Create the Panel, Label and TextBox */  // vpTitel.add(lblNoteTitel); vpTitel.add(tbNoteTitel); vpTitel.setWidth(""300px"");  /** * Create the Panel, Label and TextBox */  // hpNoteSubTitel.add(lblNoteSubTitel); hpNoteSubTitel.add(tbNoteSubTitel); hpNoteSubTitel.setWidth(""300px"");  /** * Create the Panel, Label and TextBox */  // hpNoteText.add(lblNoteText); hpNoteText.add(content); hpNoteText.setWidth(""300px""); dateBox.setFormat(new DateBox.DefaultFormat(dateFormat)); dateBox.getDatePicker().setYearArrowsVisible(true); dateBox.getElement().setPropertyString(""placeholder"", ""Fälligkeitsdatum""); if (currentNote.getMaturityDate() != null) { dateBox.setValue(currentNote.getMaturityDate()); }  // hpNoteMaturity.add(lblNoteMaturity); hpNoteMaturity.add(dateBox); hpNoteMaturity.setWidth(""300px"");  hpBackButton.add(btnSaveNote); hpBackButton.setWidth(""300px"");  vpNotePermission.add(lblNotePermission); vpNotePermission.add(clUser);  vpLeft.add(vpTitel); vpLeft.add(hpNoteSubTitel); vpLeft.add(hpNoteText); vpLeft.add(hpNoteMaturity); vpLeft.add(btnSaveNote); vpRight.add(lblNoteShare); vpRight.add(hpAddPermission); vpRight.add(lblNoteShareRB); vpRight.add(rbRead); vpRight.add(rbWrite); vpRight.add(rbDelete); vpRight.add(vpNotePermission);  hpShowNote.add(vpLeft); hpShowNote.add(vpRight);  /** * Erstellen oder bearbeiten von Freigaben RPC */ btnAddNotePermission.addClickHandler(new ClickHandler() {  @SuppressWarnings(""deprecation"") @Override public void onClick(ClickEvent event) { int permissionID; if (rbRead.isChecked()) { permissionID = 1; } else if (rbWrite.isChecked()) { permissionID = 2; } else { permissionID = 3; } if (tbNoteShareMail.getText().matches(""^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$"")) { notesAdmin.setUserNotePermission(tbNoteShareMail.getText(), permissionID, currentNote.getId(), new AsyncCallback<Boolean>() {  @Override public void onSuccess(Boolean result) { if (result == true) { tbNoteShareMail.setText(""""); tbNoteShareMail.getElement().setPropertyString(""placeholder"", ""nutzer@noteit.de""); rbRead.setValue(true); getAllPermittedUsersbyNoteID(currentNote.getId()); } else { Window.alert(""Der Nutzer mit der E-Mail `"" + tbNoteShareMail.getText() + ""` wurde nicht gefunden""); } }  @Override public void onFailure(Throwable caught) { // TODO Auto-generated method stub  } }); } else { Window.alert(""Bitte gebe eine E-Mail-Adresse an!""); // clUser.setRowData(userList); }  } });  btnSaveNote.addClickHandler(new ClickHandler() {  public void onClick(ClickEvent event) {  if (tbNoteTitel.getText().length() > 0) { Timestamp timestampe; if (currentNote.getId() == 0) { if(dateBox.getTextBox().getValue().length() > 0){ Window.alert(""create Note"" + currentNote.getId()); Date date = dateBox.getValue(); long time = date.getTime(); timestampe = new Timestamp(time); }else{ timestampe = null; } notesAdmin.createNote(tbNoteTitel.getText(), tbNoteSubTitel.getText(), content.getText(), timestampe, Homepage.getCurrentUser(), null, currentNote.getNotebookId(), new AsyncCallback<Note>() {  @Override public void onFailure(Throwable caught) { // TODO Auto-generated method stub  }  @Override public void onSuccess(Note result) { NoteitCellBrowser.getNoteList(result);  } }); } else { if(dateBox.getTextBox().getValue().length() > 0){ Window.alert(""update Note""); Date date = dateBox.getValue(); long time = date.getTime(); timestampe = new Timestamp(time); }else{ timestampe = null; } notesAdmin.updateNote(tbNoteTitel.getText(), tbNoteSubTitel.getText(), content.getText(), timestampe, Homepage.getCurrentUser().getId(), null, currentNote.getNotebookId(), currentNote.getId(), new AsyncCallback<Void>() {  @Override public void onFailure(Throwable caught) { // TODO Auto-generated method stub  }  @Override public void onSuccess(Void result) { Timestamp ts = new Timestamp(System.currentTimeMillis()); Date date = new Date(ts.getTime()); DateTimeFormat sdfmt = DateTimeFormat.getFormat(""dd.MM.yyyy""); lblNoteDate.setText(""Zuletzt bearbeitet am: "" + sdfmt.format(date));  } }); } } else { Window.alert(""Bitte vergebe einen Titel für deine Notiz""); }  } });  this.add(hpHeader); this.add(hpShowNote);  } "	0	0	0	0	0	1
"public static final void process(String from, String to, InputStream data) throws org.yj.smtpstub.exception.IncompleteEmailException { if (from == null || to == null || data == null) { throw new IncompleteEmailException(); }  EmailModel model = new EmailModel(); model.setFrom(from); model.setFrom(from); model.setTo(to); String mailContent = getStringFromStream(data); model.setSubject(parseMessageSubject(mailContent)); model.setEmailStr(mailContent); model.setReceivedDate(new Date());  if (store != null) { try { store.save(model); } catch (IncompleteEmailException e) { logger.error(""email was incomplete.  "", e); }  } } "	0	0	0	0	0	1
"public void requestOpenTab(String absolutePath) { try { IFFTraversalTarget t = InventoryPather.traverse(this.archive.getInventory(), absolutePath); if (t instanceof FileInventoryItem) this.onRequestOpen.accept((FileInventoryItem) t); QuickDialogs.error(""Item %s is not a file."", absolutePath); } catch (TraversalException e) { QuickDialogs.exception(e); } } "	0	0	0	0	0	1
"@VisibleForTesting void lockTheIndexOrFail(String index) { try { IndexResponse response = client.index(new IndexRequest(index, ""$lock"", ""global"") .create(true).source(""_val"", true)).actionGet(); checkState(response.isCreated(), ""unable to lock the index "" + index); } catch (DocumentAlreadyExistsException dex) { throw new IllegalStateException(""unable to lock the index "" + index); } } "	0	0	0	0	0	1
"@Override public Optional<? extends PropertyCodeGenerator> create(Config config) { // Check this is a declared type TypeMirror type = config.getProperty().getType(); if (type.getKind() != TypeKind.DECLARED) { return Optional.absent(); } TypeElement element = (TypeElement) ((DeclaredType) type).asElement();  // Find the builder Optional<TypeElement> builder = tryFind(typesIn(element.getEnclosedElements()), IS_BUILDER_TYPE); if (!builder.isPresent()) { return Optional.absent(); }  // Verify the builder can be constructed Optional<BuilderFactory> builderFactory = BuilderFactory.from(builder.get()); if (!builderFactory.isPresent()) { return Optional.absent(); }  MergeBuilderMethod mergeFromBuilderMethod; if (findAnnotationMirror(element, ""org.inferred.freebuilder.FreeBuilder"").isPresent()) { /* * If the element is annotated @FreeBuilder, assume the necessary methods will be added. We * can't check directly as the builder superclass may not have been generated yet. To be * strictly correct, we should delay a round if an error type leaves us unsure about this kind * of API-changing decision, and then we would work with _any_ Builder-generating API. We * would need to drop out part of our own builder superclass, to prevent chains of dependent * buildable types leading to quadratic compilation times (not to mention cycles), and leave a * dangling super-superclass to pick up next round. As an optimization, though, we would * probably skip this for @FreeBuilder-types anyway, to avoid extra types whenever possible, * which leaves a lot of complicated code supporting a currently non-existent edge case. */ mergeFromBuilderMethod = MergeBuilderMethod.MERGE_DIRECTLY; } else { List<ExecutableElement> methods = FluentIterable .from(builder.get().getEnclosedElements()) .filter(ExecutableElement.class) .filter(new IsCallableMethod()) .toList();  // Check there is a build() method if (!any(methods, new IsBuildMethod(""build"", type, config.getTypes()))) { return Optional.absent(); }  // Check there is a buildPartial() method if (!any(methods, new IsBuildMethod(""buildPartial"", type, config.getTypes()))) { return Optional.absent(); }  // Check there is a clear() method if (!any(methods, new IsClearMethod())) { return Optional.absent(); }  // Check there is a mergeFrom(Value) method if (!any(methods, new IsMergeFromMethod(type, config.getTypes()))) { return Optional.absent(); }  // Check whether there is a mergeFrom(Builder) method if (any(methods, new IsMergeFromMethod(builder.get().asType(), config.getTypes()))) { mergeFromBuilderMethod = MergeBuilderMethod.MERGE_DIRECTLY; } else { mergeFromBuilderMethod = MergeBuilderMethod.BUILD_PARTIAL_AND_MERGE; } }  String setterName = SET_PREFIX + config.getProperty().getCapitalizedName(); String getBuilderName = GET_BUILDER_PREFIX + config.getProperty().getCapitalizedName() + GET_BUILDER_SUFFIX; return Optional.of(new CodeGenerator( config.getProperty(), builder.get(), builderFactory.get(), setterName, getBuilderName, mergeFromBuilderMethod)); } "	0	0	0	0	0	1
public String getRedeemedAt() { return strRedeemedAt; } 	0	0	0	0	0	1
"@Override public void onActivityResult(int requestCode, int resultCode, Intent data) { if (requestCode == ItemActivity.CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE) { if (resultCode == Activity.RESULT_OK) { // Image captured and saved to fileUri specified in the Intent ImageView image = imageUris.get(imageUris.size()-1).first;  LinearLayout.LayoutParams sizeParameters = new LinearLayout.LayoutParams(MAX_THUMBNAIL_WIDTH, MAX_THUMBNAIL_HEIGHT); image.setLayoutParams(sizeParameters);  BitmapEncoder.loadBitmapFromURI(image, imageUris.get(imageUris.size() - 1).second, MAX_THUMBNAIL_WIDTH, MAX_THUMBNAIL_HEIGHT); image.setOnClickListener(this);  //image.setImageURI(imageUris.get(imageUris.size()-1)); imageContainer.addView(image);  if(((ItemActivity)getActivity()).getItem() != null) { ((ItemActivity) getActivity()).getItem().addToAddedPictures(imageUris.get(imageUris.size() -1).second); } } else if (resultCode == Activity.RESULT_CANCELED) { // User cancelled the image capture //clean up imageUris.remove(imageUris.size() - 1); } else { // Image capture failed, advise user imageUris.remove(imageUris.size()-1); Toast.makeText(getActivity(), ""Der opstod en fejl under brug af kameraet"" , Toast.LENGTH_LONG).show(); } } else if(requestCode == ItemActivity.IMAGEVIEWER_REQUEST_CODE){ if(resultCode == Activity.RESULT_OK){ ArrayList<Uri> remainingURIs = data.getParcelableArrayListExtra(""remainingURIs"");  //no change if(remainingURIs.size() == imageUris.size()){ return; }  //update image list and reconstruct imageContainer imageContainer.removeAllViews();  if(((ItemActivity)getActivity()).getItem() != null){ ((ItemActivity)getActivity()).getItem().setPicturesChanged(true); } ArrayList temp = new ArrayList<Pair<ImageView, Uri>>(imageUris); for(int i = 0; i<imageUris.size(); i++){ Pair listItem = imageUris.get(i);  if(!remainingURIs.contains(listItem.second)){ //image has been removed if(((ItemActivity) getActivity()).getItem() != null){ Item currentItem = ((ItemActivity) getActivity()).getItem(); if(currentItem.getAddedPictures() !=  null){ if(!currentItem.getAddedPictures().contains(listItem.second)){ currentItem.addDeletedPicture((Uri) listItem.second); } else{ currentItem.removeFromDeletedPicture((Uri) listItem.second); } } } temp.remove(listItem); } else{ //image still exists imageContainer.addView((ImageView) listItem.first); } }  imageUris = temp; } } } "	0	0	0	0	0	1
private void switchToRegistrationOngoing() throws DAOException { String dateFromDB = getCurrentCES().getStartRegistrationDate().toString() + TIME_FOR_DATE_FROM_DB; runThreadForChangeStatus(dateFromDB, REGISTRATION_ONGOING_ID); } 	0	0	0	0	0	1
"public void visit(String str) { int ix = str.lastIndexOf("".class"");  if (ix >= 0) { String className = ""com.ibm.icu"" + str.substring(0, ix).replace('/', '.');  // Skip things in com.ibm.icu.dev; they're not relevant. if (className.startsWith(""com.ibm.icu.dev."")) { return; }  try { Class c = Class.forName(className); int   m = c.getModifiers();  if (serializable.isAssignableFrom(c) /*&& (! throwable.isAssignableFrom(c) || c.getDeclaredFields().length > 0)*/) { //Field uid;  System.out.print(className + "" ("" + Modifier.toString(m) + "") - "");  if(!Modifier.isInterface(m)){ try { /* uid = */ c.getDeclaredField(""serialVersionUID""); } catch (Exception e) { System.out.print(""no serialVersionUID - ""); } }  if (Modifier.isPublic(m)) { SerializableTest.Handler handler = SerializableTest.getHandler(className);  if (!Modifier.isInterface(m) && handler != null) { Object objectsOut[] = handler.getTestObjects(); Object objectsIn[]; boolean passed = true;  ByteArrayOutputStream byteOut = new ByteArrayOutputStream(); ObjectOutputStream out = new ObjectOutputStream(byteOut);  try { out.writeObject(objectsOut); out.close(); byteOut.close(); } catch (IOException e) { System.out.println(""Eror writing test objects:"" + e.toString()); return; }  if (path != null) { writeFile(className, byteOut.toByteArray()); }  ByteArrayInputStream byteIn = new ByteArrayInputStream(byteOut.toByteArray()); ObjectInputStream in = new ObjectInputStream(byteIn);  try { objectsIn = (Object[]) in.readObject(); in.close(); byteIn.close(); } catch (Exception e) { System.out.println(""Error reading test objects:"" + e.toString()); return; }  for(int i = 0; i < objectsIn.length; i += 1) { if (! handler.hasSameBehavior(objectsIn[i], objectsOut[i])) { passed = false; System.out.println(""Object "" + i + "" failed behavior test.""); } }  if (passed) { System.out.print(""test passed.""); } } else { // it's OK to not have tests for abstract classes... if (! Modifier.isAbstract(m)) { System.out.print(""no test.""); } } }  System.out.println(); } } catch (Exception e) { System.out.println(""Error processing "" + className + "": "" + e.toString()); } } } "	0	0	0	0	0	1
"public String createEntity(EntityReference ref, Object entity, Map<String, Object> params) { SiteGroup sg = null; String roleId = null; String userId = null; boolean active = true; if (entity.getClass().isAssignableFrom(Member.class)) { // if someone passes in a Member Member member = (Member) entity; String locationReference = (String) params.get(""locationReference""); if (locationReference == null) { throw new IllegalArgumentException( ""Cannot create/update a membership entity from Member without a locationReference in the params""); } sg = findLocationByReference(locationReference); roleId = member.getRole().getId(); userId = userEntityProvider.findAndCheckUserId(member.getUserId(), member.getUserEid()); active = member.isActive(); } else if (entity.getClass().isAssignableFrom(EntityMember.class)) { // if they instead pass in the EntitySite object EntityMember em = (EntityMember) entity; sg = findLocationByReference(em.getLocationReference()); roleId = em.getMemberRole(); if ((em.getUserId() != null) || (em.getUserEid() != null)) { userId = userEntityProvider.findAndCheckUserId(em.getUserId(), em.getUserEid()); } active = em.isActive(); } else { throw new IllegalArgumentException( ""Invalid entity for create/update, must be Member or EntityMember object""); } if (roleId == null || """".equals(roleId)) { roleId = sg.site.getJoinerRole(); }  // SAK-21786 // set the role to the one passed in, if available if (params.get(""memberRole"") != null) { roleId = (String) params.get(""memberRole""); } // set the active status to the one passed in, if available if (params.get(""active"") != null) { active = Boolean.parseBoolean((String) params.get(""active"")); }  checkSiteSecurity(sg.site.getId());  String[] userAuditString; List<String[]> userAuditList = new ArrayList<>();  // check for a batch add String[] userIds = checkForBatch(params, userId); String memberId = """"; String currentUserId = developerHelperService.getCurrentUserId();  // now add all the memberships for (int i = 0; i < userIds.length; i++) { if (sg.group == null) { // site only if (userIds[i].equals(currentUserId) && sg.site.isJoinable()) { try { siteService.join(sg.site.getId()); } catch (IdUnusedException e) { throw new IllegalArgumentException(""Invalid site: "" + sg.site.getId() + "":"" + e.getMessage(), e); } catch (PermissionException e) { throw new SecurityException(""Current user not allowed to join site: "" + sg.site.getId() + "":"" + e.getMessage(), e); } } else { sg.site.addMember(userIds[i], roleId, active, false); saveSiteMembership(sg.site); } User user = null; // Add change to user_audits_log table. try { user = userDirectoryService.getUser(userIds[i]); } catch (UserNotDefinedException e) { log.error("".createEntity: User with id {} doesn't exist"", userIds[i]); } userAuditString = new String[]{sg.site.getId(),user.getDisplayId(), roleId, UserAuditService.USER_AUDIT_ACTION_ADD, userAuditRegistration.getDatabaseSourceKey(), currentUserId}; userAuditList.add(userAuditString); } else { // group and site sg.group.addMember(userIds[i], roleId, active, false); saveGroupMembership(sg.site, sg.group); } if (i == 0) { EntityMember em = new EntityMember(userIds[0], sg.locationReference, roleId, active, null); memberId = em.getId(); } }  if (userAuditList.size() > 0) { userAuditRegistration.addToUserAuditing(userAuditList); }  if (userIds.length > 1) { log.info(""Batch add memberships: siteId="" + ((sg.site == null) ? ""none"" : sg.site.getId()) + "",groupId="" + ((sg.group == null) ? ""none"" : sg.group.getId()) + "",userIds="" + Search.arrayToString(userIds));  memberId = ""batch:"" + memberId; } return memberId; } "	0	0	0	0	0	1
protected final Object buildKeyManagerFactory(KeyStore ks, char[] password) throws NoSuchAlgorithmException, KeyStoreException, UnrecoverableKeyException { String alg = KeyManagerFactory.getDefaultAlgorithm(); KeyManagerFactory kmf = KeyManagerFactory.getInstance(alg); kmf.init(ks, password); return kmf; } 	0	0	0	0	0	1
"public static void addSubjectAlternativeName(String host) { if (host != null) { String hostWithoutPort = StringUtils.substringBefore(host, "":"");  try { // resolve host name for subject alternative name in case host name is ip address InetAddress addr = InetAddress.getByName(hostWithoutPort); ConfigurationProperties.addSslSubjectAlternativeNameDomains(addr.getHostName()); ConfigurationProperties.addSslSubjectAlternativeNameDomains(addr.getCanonicalHostName()); } catch (UnknownHostException uhe) { ConfigurationProperties.addSslSubjectAlternativeNameDomains(hostWithoutPort); } } } "	0	0	0	0	0	1
"public KeyStore buildKeyStore(boolean forceRebuild) { if (keystore == null || forceRebuild) { File keyStoreFile = new File(ConfigurationProperties.javaKeyStoreFilePath()); System.setProperty(""javax.net.ssl.trustStore"", keyStoreFile.getAbsolutePath()); if (keyStoreFile.exists()) { keystore = updateExistingKeyStore(keyStoreFile); } else { createNewKeyStore(); } // don't rebuild again and again and again ConfigurationProperties.rebuildKeyStore(false); } return keystore; } "	0	0	0	0	0	1
"public SSLContext sslContext() { try { // key manager KeyManagerFactory keyManagerFactory = getKeyManagerFactoryInstance(KeyManagerFactory.getDefaultAlgorithm()); keyManagerFactory.init(buildKeyStore(), ConfigurationProperties.javaKeyStorePassword().toCharArray());  // ssl context SSLContext sslContext = getSSLContextInstance(""TLS""); sslContext.init(keyManagerFactory.getKeyManagers(), InsecureTrustManagerFactory.INSTANCE.getTrustManagers(), null); return sslContext; } catch (Exception e) { throw new RuntimeException(""Failed to initialize the SSLContext"", e); } } "	0	0	0	0	0	1
public static SSLEngine createServerSSLEngine() { SSLEngine engine = SSLFactory.getInstance().sslContext().createSSLEngine(); engine.setUseClientMode(false); return engine; } 	0	0	0	0	0	1
public static SSLEngine createClientSSLEngine() { SSLEngine engine = SSLFactory.getInstance().sslContext().createSSLEngine(); engine.setUseClientMode(true); return engine; } 	0	0	0	0	0	1
public SSLSocket wrapSocket(Socket socket) throws Exception { // ssl socket factory SSLSocketFactory sslSocketFactory = sslContext().getSocketFactory();  // ssl socket SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(socket, socket.getInetAddress().getHostAddress(), socket.getPort(), true); sslSocket.setUseClientMode(true); sslSocket.startHandshake(); return sslSocket; } 	0	0	0	0	0	1
"static String convertStreamToString(InputStream is) { @SuppressWarnings(""resource"") java.util.Scanner s = new Scanner(is).useDelimiter(""\\A""); return s.hasNext() ? s.next() : """"; } "	0	0	0	0	0	1
@Override protected boolean onMiddleClicked() { switch (mStatusBar.getBarState()) { case StatusBarState.KEYGUARD: if (!mDozingOnDown) { EventLogTags.writeSysuiLockscreenGesture( EventLogConstants.SYSUI_LOCKSCREEN_GESTURE_TAP_UNLOCK_HINT, 0 /* lengthDp - N/A */, 0 /* velocityDp - N/A */); startUnlockHintAnimation(); } return true; case StatusBarState.SHADE_LOCKED: if (!mQsExpanded) { mStatusBar.goToKeyguard(); } return true; case StatusBarState.SHADE:  // This gets called in the middle of the touch handling, where the state is still // that we are tracking the panel. Collapse the panel after this is done. post(mEmptySpaceClickedRunnable); return false; default: return true; } } 	0	0	0	0	0	1
@Test(expected = NullPointerException.class) public void generateConsumerDisposeNull() { Observable.generate(() -> 1, (s, o) -> o.onNext(1), null); } 	0	0	0	0	0	1
@Test(expected = NullPointerException.class) public void generateStateConsumerInitialStateNull() { Observable.generate(null, (s, o) -> o.onNext(1)); } 	0	0	0	0	0	1
@Test public void generateConsumerStateNullAllowed() { NbpObservable.generate(() -> null, (s, o) -> o.onComplete()).toBlocking().lastOption(); } 	0	0	0	0	0	1
@Test(expected = NullPointerException.class) public void generateConsumerDisposeNull() { NbpObservable.generate(() -> 1, (s, o) -> o.onNext(1), null); } 	0	0	0	0	0	1
"@Override public void finishDatabase() throws ModuleException { super.finishDatabase();  // Write ContextDocumentation to archive  Map<String, String> exportModuleArgs = siarddkExportModule.getExportModuleArgs(); FileIndexFileStrategy fileIndexFileStrategy = siarddkExportModule.getFileIndexFileStrategy(); MetadataPathStrategy metadataPathStrategy = siarddkExportModule.getMetadataPathStrategy(); SIARDMarshaller siardMarshaller = siarddkExportModule.getSiardMarshaller();  if (exportModuleArgs.get(Constants.CONTEXT_DOCUMENTATION_FOLDER) != null) {  ContextDocumentationWriter contextDocumentationWriter = new ContextDocumentationWriter( siarddkExportModule.getMainContainer(), siarddkExportModule.getWriteStrategy(), fileIndexFileStrategy, siarddkExportModule.getExportModuleArgs());  contextDocumentationWriter.writeContextDocumentation(); }  // Create fileIndex.xml  try { fileIndexFileStrategy.generateXML(null); } catch (ModuleException e) { throw new ModuleException(""Error writing fileIndex.xml"", e); }  try { String path = metadataPathStrategy.getXmlFilePath(Constants.FILE_INDEX); OutputStream writer = fileIndexFileStrategy.getWriter(siarddkExportModule.getMainContainer(), path, siarddkExportModule.getWriteStrategy()); siardMarshaller.marshal(""dk.magenta.siarddk.fileindex"", ""/siarddk/fileIndex.xsd"", ""http://www.sa.dk/xmlns/diark/1.0 ../Schemas/standard/fileIndex.xsd"", writer, fileIndexFileStrategy.generateXML(null)); writer.close(); } catch (IOException e) { throw new ModuleException(""Error writing fileIndex to the archive."", e); }  } "	0	0	0	0	0	1
"private void testMerge(String fullName, String type) throws MergeException, IOException, NoSuchAlgorithmException { parameterMap.put(TemplateFactory.KEY_FULLNAME, 	new String[]{fullName}); Template root = TemplateFactory.getTemplate(parameterMap); String mergeOutput = root.merge(); root.packageOutput(); CompareArchives.assertArchiveEquals(type, validateDir + fullName + type, outputDir + fullName + type); } "	0	0	0	0	0	1
private void setUpStreamProcessing() { Observable.merge(Arrays.asList( setUpObjectProcessing().map(formatter::format), setUpBooleanProcessing().map(formatter::format), setUpByteProcessing().map(formatter::format), setUpIntegerProcessing().map(formatter::format), setUpCharProcessing().map(formatter::format), setUpStringProcessing().map(formatter::format), setUpIntArrayProcessing().map(formatter::format) )) .doOnNext(saver::save) .subscribe(__ -> {}, ex -> { flush(); exceptionStream.onNext((LogMessageException) ex); }); } 	0	0	0	0	0	1
@Override protected void refreshVisuals() { ModelNode node = (ModelNode) getModel(); IFigure modelBackgroundLayer = ((ScalableRootEditPart) getRoot()) .getLayer(ModelBackgroundLayer.MODEL_BACKGROUND_LAYER); modelBackgroundLayer.setBackgroundColor(new Color(null, node.getBackgroundColor())); getViewer().setProperty(SnapToGrid.PROPERTY_GRID_ENABLED, node.getShowGrid()); getViewer().setProperty(SnapToGrid.PROPERTY_GRID_VISIBLE, node.getShowGrid()); getViewer().setProperty(SnapToGeometry.PROPERTY_SNAP_ENABLED, node.getShowGrid());  getFigure().repaint();  super.refreshVisuals(); } 	0	0	0	0	0	1
"public void screenShot(final String category, final String testname, final Waiter waiter, final boolean doCompare) throws TimeoutException { GVRScreenshotCallback callback = new GVRScreenshotCallback() { private void compareWithGolden(Bitmap bitmap, String testname, Waiter waiter) { Bitmap golden = null; try { InputStream stream = gvrContext.getContext().getAssets().open(category + ""/"" + testname); golden = BitmapFactory.decodeStream(stream); } catch (IOException ex) { waiter.fail(ex); } if (golden != null) { waiter.assertEquals(golden.getWidth(), bitmap.getWidth()); waiter.assertEquals(golden.getHeight(), bitmap.getHeight());  Bitmap diffmap = golden.copy(golden.getConfig(), true); float diff = 0; for (int y = 0; y < golden.getHeight(); y++) { for (int x = 0; x < golden.getWidth(); x++) { int p1 = golden.getPixel(x, y); int p2 = bitmap.getPixel(x, y); int r = Math.abs(Color.red(p1) - Color.red(p2)); int g = Math.abs(Color.green(p1) - Color.green(p2)); int b = Math.abs(Color.blue(p1) - Color.blue(p2)); diffmap.setPixel(x, y, Color.argb(255, r, g, b)); diff += (float) r / 255.0f + g / 255.0f + b / 255.0f; } }  Log.e(category, category + "": %s %f"", testname, diff); if (diff > 2000.0f) { writeBitmap(category, ""diff_"" + testname, diffmap); } waiter.assertTrue(diff <= 2000.0f); } }  protected void writeBitmap(String dir, String filename, Bitmap bitmap) { try { ByteArrayOutputStream bytes = new ByteArrayOutputStream(); bitmap.compress(Bitmap.CompressFormat.PNG, 100, bytes); File sdcard = Environment.getExternalStorageDirectory(); dir = sdcard.getAbsolutePath() + ""/GearVRFTests/"" + dir + ""/""; File d = new File(dir); d.mkdirs(); File f = new File(d, filename); FileOutputStream fo = new FileOutputStream(f); fo.write(bytes.toByteArray()); fo.close(); } catch (IOException ex) { waiter.fail(ex); } }  @Override public void onScreenCaptured(Bitmap bitmap) { synchronized (onScreenshotLock) { try { String basename = testname + "".png""; writeBitmap(category, basename, bitmap); Log.d(category, ""Saved screenshot of %s"", testname); if (doCompare) { compareWithGolden(bitmap, basename, waiter); } waiter.resume(); } catch (Exception e) { Log.d(category, ""Could not save screenshot of %s"", testname); waiter.fail(e); } } } }; waitForSceneRendering(); gvrContext.captureScreenCenter(callback); waiter.await(); } "	0	0	0	0	0	1
private void updateWidget() { final AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(this); RemoteViews views = ListWidgetProvider .buildRemoteViews(this, appWidgetManager, mAppWidgetId); appWidgetManager.updateAppWidget(mAppWidgetId, views); // note: broken for API 25 Google stock launcher, work around by delaying notify. // https://code.google.com/p/android/issues/detail?id=228575 Runnable runnable = new Runnable() { @Override public void run() { appWidgetManager.notifyAppWidgetViewDataChanged(mAppWidgetId, R.id.list_view); } }; new Handler().postDelayed(runnable, 300);  setWidgetResult(RESULT_OK); finish(); } 	0	0	0	0	0	1
"@Nullable @Override public String getType(@NonNull Uri uri) { final int match = sURI_MATCHER.match(uri);  switch (match) { case PROJECTS: return BacklogContract.ProjectEntry.CONTENT_TYPE; default: throw new UnsupportedOperationException(""Unknown uri: "" + uri); } } "	0	0	0	0	0	1
@Override public ResourceManager getDefaultConfig() { Property[] properties = {STFRD_TIME_PER_SENTENCE, STFRD_MAX_SENTENCE_LENGTH, USE_POS, USE_LEMMA, USE_SHALLOW_PARSE, USE_DEP, USE_NER_CONLL, USE_NER_ONTONOTES, USE_STANFORD_PARSE, USE_STANFORD_DEP, USE_SRL_VERB, USE_SRL_NOM, USE_SRL_PREP, USE_QUANTIFIER, THROW_EXCEPTION_ON_FAILED_LENGTH_CHECK, USE_JSON, USE_LAZY_INITIALIZATION, USE_SRL_INTERNAL_PREPROCESSOR, SPLIT_ON_DASH, USE_SENTENCE_PIPELINE}; return (new AnnotatorServiceConfigurator().getConfig(new ResourceManager( generateProperties(properties)))); } 	0	0	0	0	0	1
public void setFixpath(final String fixpath) { assert fixpath != null ? new File(fixpath).isAbsolute() : true; this.fixpath = fixpath; } 	0	0	0	0	0	1
"private void notify(SimpleMessage message) { String title = message.getFromUserId(); String content = message.getContent().toString(); if (Objects.equals(message.getFromUserId(), YIN)) { String[] messageContents = message.getContent().toString().split(""\n""); title = messageContents[0]; content = messageContents[1]; } Notifications.simple(this, title, content, R.drawable.ic_notification, this.getClass()); } "	0	0	0	0	0	1
"@Override public void update() { if (repository.get().succeeded()) { SimpleMessage in = new SimpleMessage.Builder() .setContent(repository.get().get()) .setFromUserId(TAG) .setToUserId(TimeKey.userId) .thenCreateAtNow(); if (AgeraBus.repository().hasObservers()) { AgeraBus.repository().accept(new NewInEvent(in)); } else { Log.d(YIN, ""DeadEvent""); notify(in); } messagesStore(getApplicationContext()).insert(in); } repository.removeUpdatable(this); } "	0	0	0	0	0	1
"@Override public InputStream getInputStream() throws IOException { if (isClosed) throw new IOException(""Book File has already been closed"");  if (outputstream != null && outputstream.getBuffer().length != 0){ return new BookInputStream(outputstream); } return new BookInputStream(book, binarymode); } "	0	0	0	0	0	1
protected void moveRight() { if ( !((tX + tWidth + 10) > Main.WIDTH )) { tX += tSpeed; } } 	0	0	0	0	0	1
protected void moveLeft() { if ( (tX ) > 10 ) { tX -= tSpeed; } } 	0	0	0	0	0	1
"public static void main(String[] args) throws Exception {  // load needed information DvrpConfigGroup dvrpConfigGroup = new DvrpConfigGroup(); dvrpConfigGroup.setTravelTimeEstimationAlpha(0.05); File configFile = new File(args[0]); Config config = ConfigUtils.loadConfig(configFile.toString(), new playground.sebhoerl.avtaxi.framework.AVConfigGroup(), dvrpConfigGroup, new BlackListedTimeAllocationMutatorConfigGroup()); Scenario scenario = ScenarioUtils.loadScenario(config); Network network = scenario.getNetwork(); final File virtualnetworkDir = new File(""virtualNetwork""); VirtualNetwork virtualNetworkLoad = VirtualNetworkGet.readDefault(scenario.getNetwork()); TravelData travelDataLoad = TravelDataIO.fromByte(network, virtualNetworkLoad, new File(virtualnetworkDir, ""travelData""));  // call the performancefleetsizecalculator and calculate the availabilities PerformanceFleetSizeCalculator performanceFleetSizeCalculator = new PerformanceFleetSizeCalculator(network, virtualNetworkLoad, travelDataLoad, travelDataLoad.getNumbertimeSteps(), 20, 20); Tensor Availabilities = performanceFleetSizeCalculator.calculateAvailabilities(); } "	0	0	0	0	0	1
public boolean has (CommandSender me, String perm, boolean informSenderIfNot) { if (has(me, perm)) { return true; } else if (informSenderIfNot) { me.sendMessage(this.getForbiddenMessage(perm)); } return false; } 	0	0	0	0	0	1
public void gotProvince() { stats[0]++; maxInfluence(getProvinceCount()); redrawPlayer(); } 	0	0	0	0	0	1
"public FlushResult flush(String username, String token) throws UnknownHostException { TreeMap<DateTime, List<ActivityState>> statesToSend = null; TreeMap<DateTime, List<ActivityEvent>> eventsToSend = null;  ActivityState lastState; synchronized(this) { lastState = this.recordStates(ActivityState.createNullState());  statesToSend = this.states; eventsToSend = flattenEvents(this.events);  this.states = new TreeMap<DateTime, List<ActivityState>>(DateTimeComparator.getInstance()); this.events = new HashMap<UUID, List<ActivityEvent>>(); }  if (lastState != null && !(lastState instanceof NullActivityState)) { this.recordState(lastState.recreate()); }  ActivityInfoProcessor processor = new ActivityInfoProcessor(statesToSend, eventsToSend);  //if (!processor.isValid()) { //	return FlushResult.Skip; //}  String machineName = findLocalHostNameOr(""unknown""); List<ActivityInfo> activityInfoList = processor.getSerializableEntities(machineName, context.getInstanceValue(), ""intellij"", context.getPluginVersion()); String activityLogExtension = context.getProperty(""activity-log.extension""); if (!processor.isActivityValid(activityInfoList)) { return FlushResult.Skip; } FlushResult result = FlushResult.Succeded; for(ActivityInfo info : activityInfoList) { if (!info.isValid()) { continue; } File cacheFolder = context.getTrackerFolder(); if (cacheFolder == null) { LogManager.INSTANCE.logError(""Could not access cache folder. It might not be created.""); continue; } FlushResult intermediateResult = trySendEntries(info, username, token); if (intermediateResult == FlushResult.Succeded) { for (final File fileEntry : cacheFolder.listFiles(new GenericExtensionFilter(activityLogExtension))) { trySendEntriesOnFile(fileEntry, username, token); }  if (Boolean.parseBoolean(context.getProperty(""activity-log.trace-sent""))) { String filename = String.format(""%s\\%s%s"", cacheFolder.getAbsolutePath(), info.getBatchId(), "".sent"");  FileOutputStream stream = null; try { stream = new FileOutputStream(new File(filename)); ObjectWriter writer = context.getJsonWriter(); String json = writer.writeValueAsString(info); stream.write(json.getBytes(Charset.forName(""UTF-8""))); } catch (Exception e) { LogManager.INSTANCE.logError(e, ""There was a problem trying to store activity data locally.""); } finally { if (stream != null) { try { stream.close(); } catch (IOException e) { e.printStackTrace(); } } } } } else { String filename = String.format(""%s\\%s%s"", cacheFolder.getAbsolutePath(), info.getBatchId(), activityLogExtension);  FileOutputStream stream = null; try { stream = new FileOutputStream(new File(filename)); ObjectWriter writer = context.getJsonWriter(); String json = writer.writeValueAsString(info); stream.write(json.getBytes(Charset.forName(""UTF-8""))); } catch (Exception e) { LogManager.INSTANCE.logError(e, ""There was a problem trying to store activity data locally.""); } finally { if (stream != null) { try { stream.close(); } catch (IOException e) { e.printStackTrace(); } } } }  if (intermediateResult != FlushResult.Succeded && intermediateResult != FlushResult.Skip) { result = intermediateResult; } } return result; } "	0	0	0	0	0	1
"public static TerminalRequirement readFrom(String s){ TerminalRequirement result; //First look for either '-', '>', '<', or 'of'. s = s.replaceAll(""\\s+"", """"); if(s.contains(""of"")){ int i = s.indexOf(""of""); result = readFrom(s.substring(i + 2)); String numString = s.substring(0, i); try{ result.numToChoose = Integer.parseInt(numString); }catch(Exception e){ parseException(s, ""the 'of' in a Terminal Requirement must be preceeded by an integer.""); } result.recalcOriginalCoursesNeeded(); return result; } if(s.contains("">"") || s.contains(""<"")){ result = readFromInequality(s); } else{ if(!s.contains(""-"")){ s = s.replaceAll(""(?<=[a-zA-Z])(?=\\d)"", ""-""); } if(!s.contains(""-"")){ parseException(s, ""A terminal requirement has to include a '-', or else both letters and numbers""); } String[] split = s.split(""-""); if(split.length > 2){ parseException(s,""You need a comma between terminal requirements""); } Prefix p = new Prefix(split[0], split[1]); //in case of BLK result = new TerminalRequirement(p); } return result; } "	0	0	0	0	0	1
@Test public void testTCompactProtocol() throws IOException, SerializerException, TException { testRecoding(new TCompactProtocol.Factory(), new TCompactProtocolSerializer()); } 	0	0	0	0	0	1
@Test public void testTTupleProtocol() throws IOException, SerializerException, TException { testRecoding(new TTupleProtocol.Factory(), new TTupleProtocolSerializer()); } 	0	0	0	0	0	1
public final AtomicInteger getVideoFrameCacheNumber() { return publisher == null ? null : publisher.getVideoFrameCacheNumber(); } 	0	0	0	0	0	1
"private MenuEntry buildContactListMenuEntry(){ return new MenuEntry(""Contactos"", R.drawable.ic_action_group, new Runnable(){ @Override public void run(){ startActivity(new Intent(BaseDrawerActivity.this, ContactListActivity.class)); } }); } "	0	0	0	0	0	1
"@Override public NodeTree getDistributionTree(String instanceId, String statusSubQuery, boolean checkVisibility) { Connection con = getConnection(); try { return PublicationDAO.getDistributionTree(con, instanceId, statusSubQuery, checkVisibility); } catch (SQLException e) { throw new PublicationRuntimeException(""PublicationBmEJB.getDistributionTree()"", SilverpeasRuntimeException.ERROR, ""publication.GETTING_NUMBER_OF_PUBLICATIONS_FAILED"", ""instanceId = "" + instanceId, e); } finally { DBUtil.close(con); } } "	0	0	0	0	0	1
"@Override public List<List<String>> getRootValues(TreeData treeData, Level level, List<TreeFilter> treeFilters) throws HpccConnectionException, RemoteException {  List<List<String>> valueList = null; try { String requestName = getGenericQueryRequestName(treeData.getHpccConnection(),treeData.getFiles().iterator().next()); String urlStr; if (requestName != null) { urlStr = constructComplicatedTreeQuery(requestName, treeData, treeFilters); } else { String query = level.getElements().get(0).getFileName(); StringBuilder urlBuilder = new StringBuilder(); if (treeData.getHpccConnection().getIsSSL()) { urlBuilder.append(Constants.HTTPS); } else { urlBuilder.append(Constants.HTTP); } urlBuilder.append(treeData.getHpccConnection().getHostIp()).append("":"") .append(treeData.getHpccConnection().getWsEclPort()).append(""/WsEcl/submit/query/"") .append(treeData.getHpccConnection().getClusterType()) // Since a level can use only one query, taking first // LevelElement's query .append(""/"").append(query).append(""/xml?"");  if (treeData.getInputParams() != null && treeData.getInputParams().size() == 1) {  Iterator<InputParam> iterator = treeData.getInputParams().iterator(); while (iterator.hasNext()) { InputParam param = iterator.next(); if (!StringUtils.isNullOrEmpty(param.getValue())) { urlBuilder.append(param.getName()).append(""="") .append(URLEncoder.encode(param.getValue(), Constants.CHAR_CODE));  if (iterator.hasNext()) { urlBuilder.append(""&""); } } } }  if (treeFilters != null) {  Iterator<TreeFilter> filterIterator = treeFilters.iterator(); while (filterIterator.hasNext()) { TreeFilter treeFilter = (TreeFilter) filterIterator.next(); urlBuilder.append(treeFilter.getColumnName()).append(""="") .append(URLEncoder.encode(treeFilter.getValue(), Constants.CHAR_CODE)); if (filterIterator.hasNext()) { urlBuilder.append(""&""); } } }  urlStr = urlBuilder.toString();  if (LOG.isDebugEnabled()) { LOG.debug(""getRootValues() URL ->"" + urlStr); } }  URL url = new URL(urlStr);  URLConnection urlConnection = url.openConnection(); String authString = treeData.getHpccConnection().getUsername() + "":"" + treeData.getHpccConnection().getPassword(); String authStringEnc = new String(Base64.encodeBase64(authString.getBytes())); urlConnection.setRequestProperty(AUTHORIZATION, BASIC + authStringEnc);  final InputStream response = urlConnection.getInputStream();  if (response != null) { valueList = constructChildValueList(response, level); } else { throw new HpccConnectionException(Constants.UNABLE_TO_FETCH_DATA); }  } catch (RemoteException e) { if (e.getMessage().contains(""Unauthorized"")) { throw new HpccConnectionException(""401 Unauthorized""); } LOG.error(Constants.EXCEPTION, e); throw e; } catch (ParserConfigurationException | SAXException | IOException | XPathExpressionException ex) { LOG.error(Constants.EXCEPTION, ex); throw new HpccConnectionException(ex.getMessage()); } if (LOG.isDebugEnabled()) { LOG.debug(""valueList --->"" + valueList); } return valueList; } "	0	0	0	0	0	1
private Coordinate getTownCoordinates(String city) { Coordinate coordinate = null; if (city.length() <= 0) { Toast.makeText(this, R.string.error_empty_location_name, Toast.LENGTH_SHORT).show(); return null; } Geocoder geocoder = new Geocoder(getApplicationContext()); List<Address> addresses; try { addresses = geocoder.getFromLocationName(city, 3); if (addresses.size() == 0){ Toast.makeText(getApplicationContext(), String.format(getString(R.string.coordinates_not_found), city), Toast.LENGTH_SHORT).show(); return null; } Address currentAddress = addresses.get(0); coordinate = new Coordinate(); coordinate.setLatitude(currentAddress.getLatitude()); coordinate.setLongitude(currentAddress.getLongitude()); } catch (IOException e) { Toast.makeText(MyApplication.getAppContext(), R.string.error_geo_service_not_available, Toast.LENGTH_SHORT).show(); e.printStackTrace(); return null; } catch (IllegalArgumentException e) { Toast.makeText(MyApplication.getAppContext(), R.string.invalid_lang_long_used, Toast.LENGTH_SHORT).show(); e.printStackTrace(); return null; } return coordinate; } 	0	0	0	0	0	1
"@Override public synchronized void acceptRow(final Object[] row) throws IOException{ try{ // Wait until the last accepted row has been consumed: while(!endReached && pendingRow != null) wait();  /* If the end has been reached, this is not normal * (because endRows() is always called after acceptRow()...so, it means the iteration has been aborted before the end) * and so the stream reading should be interrupted: */ if (endReached) throw new IOException(""Streaming aborted!"");  // Otherwise, keep the given row: pendingRow = row;  /* Security for the cases where a row to accept is NULL. * In such case, pendingRow will be set to NULL and the function getRow() will wait for ever. * This case is not supposed to happen because the caller of acceptRow(...) should not give a NULL row... * ...which should then mean that the end of the stream has been reached. */ if (pendingRow == null) endReached = true;  }catch(InterruptedException ie){ /* If the thread has been interrupted, set this TableSink in a state similar to * when the end of the stream has been reached: */ pendingRow = null; endReached = true;  }finally{ // In all cases, all waiting threads must be freed: notifyAll(); } } "	0	0	0	0	0	1
"@Override public Drawable loadTile(final MapTileRequestState pState) {  ITileSource tileSource = mTileSource.get(); if (tileSource == null) { return null; }  final MapTile pTile = pState.getMapTile();  // if there's no sdcard then don't do anything if (!isSdCardAvailable()) { if (OpenStreetMapTileProviderConstants.DEBUGMODE) { Log.d(IMapView.LOGTAG,""No sdcard - do nothing for tile: "" + pTile); } return null; }  InputStream inputStream = null; try { if (OpenStreetMapTileProviderConstants.DEBUGMODE) { Log.d(IMapView.LOGTAG,""Tile doesn't exist: "" + pTile); }  final long x = (long) pTile.getX(); final long y = (long) pTile.getY(); final long z = (long) pTile.getZoomLevel(); final long index = ((z << z) + x << z) + y; final Cursor cur =mDatabase.query(DatabaseFileArchive.TABLE,columns,""key = "" + index + "" and provider = '"" + tileSource.name() + ""'"", null, null, null, null); byte[] bits=null; long lastModified=0l;  if(cur.getCount() != 0) { cur.moveToFirst(); bits = (cur.getBlob(cur.getColumnIndex(""tile""))); lastModified = cur.getLong(cur.getColumnIndex(""expires"")); } cur.close(); if (bits==null) return null; inputStream = new ByteArrayInputStream(bits); Drawable drawable = tileSource.getDrawable(inputStream); // Check to see if file has expired final long now = System.currentTimeMillis(); final boolean fileExpired = lastModified < now - mMaximumCachedFileAge;  if (fileExpired && drawable != null) { if (OpenStreetMapTileProviderConstants.DEBUGMODE) { Log.d(IMapView.LOGTAG,""Tile expired: "" + tile); } ExpirableBitmapDrawable.setDrawableExpired(drawable); //should we remove from the database here? } return drawable; } catch (final Throwable e) { Log.e(IMapView.LOGTAG,""Error loading tile"", e); } finally { if (inputStream != null) { StreamUtils.closeStream(inputStream); } }  return null; } "	0	0	0	0	0	1
"public Task getTaskById(Long id) { return (Task) getSession().get(Task.class, id); //		return (Task) getSession().createQuery(""FROM Task WHERE id = :id"").setParameter(""id"", id).uniqueResult(); } "	0	0	0	0	0	1
"public static void convertToICompletions(final String text, String actTok, int offset, Object fromServer, List<ICompletionProposal> ret, boolean showForTabCompletion, IFilterCompletion filter) { if (fromServer instanceof Object[]) { Object[] objects = (Object[]) fromServer; fromServer = Arrays.asList(objects); } if (fromServer instanceof List) { int length = actTok.lastIndexOf('.'); if (length == -1) { length = actTok.length(); } else { length = actTok.length() - length - 1; } final String trimmedText = text.trim();  List comps = (List) fromServer; for (Object o : comps) { if (o instanceof Object[]) { //name, doc, args, type Object[] comp = (Object[]) o;  String name = (String) comp[0]; String docStr = (String) comp[1]; int type = extractInt(comp[3]); String args = AbstractPyCodeCompletion.getArgs((String) comp[2], type, ICompletionState.LOOKING_FOR_INSTANCED_VARIABLE); String nameAndArgs = name + args;  int priority = IPyCompletionProposal.PRIORITY_DEFAULT;  if (type == IToken.TYPE_LOCAL) { priority = IPyCompletionProposal.PRIORITY_LOCALS;  } else if (type == IToken.TYPE_PARAM) { priority = IPyCompletionProposal.PRIORITY_LOCALS_1; } else if (type == IToken.TYPE_IPYTHON_MAGIC) { priority = IPyCompletionProposal.PRIORTTY_IPYTHON_MAGIC; }  //                    ret.add(new PyCompletionProposal(name, //                            offset-length, length, name.length(), //                            PyCodeCompletionImages.getImageForType(type), name, null, docStr, priority));  int cursorPos = name.length(); if (args.length() > 1) { cursorPos += 1; }  int replacementOffset = offset - length; PyCalltipsContextInformation pyContextInformation = null; if (args.length() > 2) { pyContextInformation = new PyCalltipsContextInformation(args, replacementOffset + name.length() + 1); //just after the parenthesis } else {  //Support for IPython completions (non standard names)  //i.e.: %completions, cd ... if (name.length() > 0) {  //magic ipython stuff (starting with %) // Decrement the replacement offset _only_ if the token begins with % // as ipthon completes a<tab> to %alias etc. if (name.charAt(0) == '%' && text.length() > 0 && text.charAt(0) == '%') { replacementOffset -= 1;  // handle cd -- we handle this by returning the full path from ipython // TODO: perhaps we could do this for all completions } else if (trimmedText.equals(""cd"") || trimmedText.startsWith(""cd "") || trimmedText.equals(""%cd"") || trimmedText.startsWith(""%cd "")) {  // text == the full search e.g. ""cd works""   ; ""cd workspaces/foo"" // actTok == the last segment of the path e.g. ""foo""  ; // nameAndArgs == full completion e.g. ""workspaces/foo/""  if (showForTabCompletion) { replacementOffset = 0; length = text.length();  } else { if (name.charAt(0) == '/') { //Should be something as cd c:/temp/foo (and name is /temp/foo) char[] chars = text.toCharArray(); for (int i = 0; i < chars.length; i++) { char c = chars[i]; if (c == name.charAt(0)) { String sub = text.substring(i, text.length()); if (name.startsWith(sub)) { replacementOffset -= (sub.length() - FullRepIterable .getLastPart(actTok) .length()); break; } } } } } } } }  PyLinkedModeCompletionProposal completion = new PyLinkedModeCompletionProposal(nameAndArgs, replacementOffset, length, cursorPos, PyCodeCompletionImages.getImageForType(type), nameAndArgs, pyContextInformation, docStr, priority, PyCompletionProposal.ON_APPLY_DEFAULT, args, false); if (filter == null || filter.acceptCompletion(type, completion)) { ret.add(completion); } } } } } "	0	0	0	0	0	1
"@Override public boolean finishSnapshotRestore() { System.out.println(""finishSnapshotRestore: "" + nextWinToEmit); return true; } "	0	0	0	0	0	1
public void addSitemaps(List<OHSitemap> sitemaps){ this.sitemaps.addAll(sitemaps); notifyItemRangeInserted(findPosition(NavigationItems.ITEM_SITEMAPS), sitemaps.size()); } 	0	0	0	0	0	1
public AreaChart<Number, Number> getChart() { return chart; } 	0	0	0	0	0	1
"@Test public void testImportExport2() throws Exception { Repository repo = manager.getEntity(""r1"", Repository.class); String xml = testImportExport(repo, ""comprehensive-ead.xml"", ""Resource (call) |||.Ident (num) |||"", ""eng""); //System.out.println(xml); Document doc = parseDocument(xml); assertXPath(doc, ""Testing import/export [ingest]"", ""//ead/eadheader/revisiondesc/change/item/text()""); assertXPath(doc, ""eng"", ""//ead/eadheader/profiledesc/langusage/language/@langcode""); assertXPath(doc, ""Local"", ""//ead/eadheader/profiledesc/descrules""); assertXPath(doc, ""NIOD Description"", ""//ead/eadheader/filedesc/publicationstmt/publisher/text()""); assertXPath(doc, ""NIOD Description"", ""//ead/archdesc/did/repository/corpname/text()""); assertXPath(doc, ""Scope and contents note content no label |||\n\n"" + ""Scope and contents note content |||"", ""//ead/archdesc/scopecontent/p/text()""); assertXPath(doc, ""Separated materials note content no label |||"", ""//ead/archdesc/separatedmaterial[2]/p/text()""); assertXPath(doc, ""Series I |||"", ""//ead/archdesc/dsc/c01/did/unitid/text()""); assertXPath(doc, ""Folder 3 |||"", ""//ead/archdesc/dsc/c01[3]/c02[2]/did/unitid/text()""); assertXPath(doc, ""Processing information note no label |||"", ""//ead/archdesc/processinfo[@encodinganalog='3.7.1']/p""); assertXPath(doc, ""2000"", ""//ead/archdesc/processinfo[@encodinganalog='3.7.3']/p/date""); assertXPath(doc, ""Source information |||"", ""//ead/archdesc/processinfo/p/bibref""); } "	0	0	0	0	0	1
"@Override protected void onPostExecute(String result) { System.out.println(""in onPostExecute.""); try { JSONObject jsonObject = new JSONObject(result);  System.out.println(""success value: ""+jsonObject.getString(""success"").toString());  // event has been successfully created if (jsonObject.getString(""success"").toString().equals(""1"")) { // now we can grab the newly created e_id returned from the // server // Note: g_id is the only unique identifier of a group and // therefore must be used for any future calls concerning // that group. ID = jsonObject.getString(""e_id"").toString(); System.out.println(""MEssage: "" + jsonObject.getString(""message"")); System.out.println(""e_id of newly created group is: "" + ID); user.fetchEventInvites(); user.fetchEventsPending(); user.fetchEventsUpcoming(); Event e = new Event(Integer.parseInt(ID)); e.fetchEventInfo(); e.fetchParticipants(); GLOBAL.setCurrentUser(user); GLOBAL.setEventBuffer(e);  // display confirmation box AlertDialog dialog = new AlertDialog.Builder( EventCreateActivity.this) .setMessage(""You've successfully created an event!"") .setCancelable(true) .setPositiveButton(""Invite Groups to Your Event"", new DialogInterface.OnClickListener() { @Override public void onClick( DialogInterface dialog, int id) { // code here to take user to // eventaddmembersactivity page. // (pass e_id as extra so invites // can be sent to correct event id) Intent intent = new Intent( EventCreateActivity.this, EventAddGroupsActivity.class); intent.putExtra(""CONTENT"", ""EVENT""); intent.putExtra(""EID"", ID); intent.putExtra(""EMAIL"", user.getEmail()); startActivity(intent); finish(); } }) .setNegativeButton(""View Your Event Profile"", new DialogInterface.OnClickListener() { @Override public void onClick( DialogInterface dialog, int which) { // code here to take user to newly // created event profile page. (pass // e_id as extra so correct event // profile can be loaded) Intent intent = new Intent( EventCreateActivity.this, null); intent.putExtra(""EID"", ID); intent.putExtra(""EMAIL"", user.getEmail()); startActivity(intent); finish(); } }).show(); // if user dimisses the confirmation box, gets sent to back // to eventActivity.class dialog.setOnCancelListener(new DialogInterface.OnCancelListener() {  @Override public void onCancel(DialogInterface dialog) { finish(); } }); } // Create event failed for some reasons. Allow user to retry. else if (jsonObject.getString(""success"").toString().equals(""0"")) { // display error box new AlertDialog.Builder(EventCreateActivity.this) .setMessage( ""Unable to create event! Please choose an option:"") .setCancelable(true) .setPositiveButton(""Try Again"", new DialogInterface.OnClickListener() { @Override public void onClick( DialogInterface dialog, int id) { // initiate creation of event AGAIN new CreateEventTask() .execute(""http://68.59.162.183/"" + ""android_connect/create_event.php""); } }).setNegativeButton(""Cancel"", null).show(); } } catch (Exception e) { Log.d(""onPostreadJSONFeed"", e.getLocalizedMessage()); } } "	0	0	0	0	0	1
public Expression parseExpression(GroovyParser.CallExpressionContext ctx) { Expression expression = parseCallExpressionRule(ctx.callExpressionRule(), ctx.expression(), ctx.genericDeclarationList());  if (expression instanceof ConstructorCallExpression) { return expression; }  MethodCallExpression method = (MethodCallExpression) expression;  if (asBoolean(ctx.expression())) { Token op = ctx.op; method.setSpreadSafe(op.getType() == GroovyParser.STAR_DOT); method.setSafe(op.getType() == GroovyParser.SAFE_DOT); }  return setupNodeLocation(method, ctx); } 	0	0	0	0	0	1
@Override public void onResume() { if (playOnlyInForeground && playerState == 4) { Start(); } } 	0	0	0	0	0	1
"@Override public Response createGuest( UriInfo uriInfo, Guest desiredGuestState) throws ResourceNotFoundException {  int guestId = this.guestService.insertGuest(desiredGuestState); Guest guest = this.guestService.getGuest(guestId);  Date lastModified = new Date(); String entityTag = EntityTagGenerator.generate(guest.toString().getBytes(), true); String location = uriInfo.getRequestUri().toString() + guestId + ""/""; this.resourceMetadataService.insertResourceMetadata( new ResourceMetadata(location, lastModified, entityTag) );  return Response .created(URI.create(location)) .entity(guest) .header(""Last-Modified"", lastModified) .header(""ETag"", entityTag) .build(); } "	0	0	0	0	0	1
"public GitClient init() { invokeGenerically(GIT_INIT_PROCESS_NAME, true, ""init""); return this; } "	0	0	0	0	0	1
"public static boolean sendNewResponsibleChangeNotification(int userId, int shiftId){ User user = userDB.getUserById(userId); Shift shift = shiftDB.getShift(shiftId); Timestamp timestamp = Timestamp.from(Instant.now()); String content = user.getFirstName()+"" ""+user.getLastName()+"" er blit satt som ny ansvarsvakt på skiftet den ""+ FormattingUtil.formatDate(shift.getDate())+"".""; int adminId = userDB.getAdminId(); if(adminId == 0) return false; NewsFeedItem newsFeedItem = new NewsFeedItem(-1,timestamp,content, adminId,userId,shiftId, NewsFeedItem.NewsFeedCategory.NOTIFICATION); return newsDB.createNotification(newsFeedItem) != 0; } "	0	0	0	0	0	1
"@VisibleForTesting boolean startDockerSeleniumContainer(String browser, boolean forceCreation) {  if (validateAmountOfDockerSeleniumContainers() || forceCreation) {  String hostIpAddress = ""localhost"";  final int nodePort = findFreePortInRange(LOWER_PORT_BOUNDARY, UPPER_PORT_BOUNDARY); final int vncPort = nodePort + 10000;  List<String> envVariables = new ArrayList<>(); envVariables.add(""SELENIUM_HUB_HOST="" + hostIpAddress); envVariables.add(""SELENIUM_HUB_PORT=4445""); envVariables.add(""SELENIUM_NODE_HOST="" + hostIpAddress); envVariables.add(""GRID=false""); envVariables.add(""RC_CHROME=false""); envVariables.add(""RC_FIREFOX=false""); envVariables.add(""USE_SELENIUM=3""); envVariables.add(""WAIT_TIMEOUT=120s""); envVariables.add(""PICK_ALL_RANDMON_PORTS=true""); envVariables.add(""PICK_ALL_RANDOM_PORTS=true""); envVariables.add(""VIDEO_STOP_SLEEP_SECS=1""); envVariables.add(""WAIT_TIME_OUT_VIDEO_STOP=20s""); boolean sendAnonymousUsageInfo = env.getBooleanEnvVariable(""ZALENIUM_SEND_ANONYMOUS_USAGE_INFO"", false); envVariables.add(""SEND_ANONYMOUS_USAGE_INFO="" + sendAnonymousUsageInfo); envVariables.add(""BUILD_URL="" + env.getStringEnvVariable(""BUILD_URL"", """")); envVariables.add(""NOVNC=true""); envVariables.add(""NOVNC_PORT="" + vncPort); envVariables.add(""SCREEN_WIDTH="" + getScreenWidth()); envVariables.add(""SCREEN_HEIGHT="" + getScreenHeight()); envVariables.add(""TZ="" + getTimeZone()); envVariables.add(""SELENIUM_NODE_REGISTER_CYCLE=0""); envVariables.add(""SELENIUM_NODE_PROXY_PARAMS=de.zalando.tip.zalenium.proxy.DockerSeleniumRemoteProxy""); if (BrowserType.CHROME.equalsIgnoreCase(browser)) { envVariables.add(""SELENIUM_NODE_CH_PORT="" + nodePort); envVariables.add(""CHROME=true""); } else { envVariables.add(""CHROME=false""); } if (BrowserType.FIREFOX.equalsIgnoreCase(browser)) { envVariables.add(""SELENIUM_NODE_FF_PORT="" + nodePort); envVariables.add(""FIREFOX=true""); } else { envVariables.add(""FIREFOX=false""); }  String networkMode = String.format(""container:%s"", getContainerName()); HostConfig hostConfig = HostConfig.builder() .shmSize(1073741824L) // 1GB .networkMode(networkMode) .appendBinds(""/tmp/mounted:/tmp/mounted"") .autoRemove(true) .build();  try { final ContainerConfig containerConfig = ContainerConfig.builder() .image(getLatestDownloadedImage(DOCKER_SELENIUM_IMAGE)) .env(envVariables) .hostConfig(hostConfig) .build();  String dockerSeleniumContainerName = String.format(""%s_%s"", getContainerName(), nodePort); final ContainerCreation dockerSeleniumContainer = dockerClient.createContainer(containerConfig, dockerSeleniumContainerName); dockerClient.startContainer(dockerSeleniumContainer.id()); return true; } catch (Exception e) { LOGGER.log(Level.SEVERE, LOGGING_PREFIX + e.toString(), e); ga.trackException(e); } } return false; } "	0	0	0	0	0	1
"@Override public void setUp() { LOGGER.debug(""Starting tests"");  session.execute(""CREATE KEYSPACE IF NOT EXISTS gravitee WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': '1' };""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.tenants (id text PRIMARY KEY, name text, description text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.views (id text PRIMARY KEY, name text, description text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.tags (id text PRIMARY KEY, name text, description text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.apikeys (key text PRIMARY KEY, subscription text, application text, plan text, expire_at timestamp, created_at timestamp, updated_at timestamp, revoked_at timestamp, revoked boolean);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.apis (id text PRIMARY KEY, name text, description text, version text, definition text, deployed_at timestamp, created_at timestamp, updated_at timestamp, visibility text, lifecycle_state text, picture text, group text, views set<text>);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.applications (id text PRIMARY KEY, name text, description text, type text, created_at timestamp, updated_at timestamp, group text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.events (id text PRIMARY KEY, type text, payload text, parent_id text, properties map<text, text>, created_at timestamp, updated_at timestamp);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.groups (id text PRIMARY KEY, type text, name text, administrators list<text>, created_at timestamp, updated_at timestamp);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.memberships (user_id text, reference_id text, reference_type text, type text, created_at timestamp, updated_at timestamp, PRIMARY KEY (user_id, reference_id, reference_type));""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.pages (id text PRIMARY KEY, name text, type text, content text, last_contributor text, page_order int, published boolean, source_type text, source_configuration text, configuration_tryiturl text, configuration_tryit boolean, api text, created_at timestamp, updated_at timestamp);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.plans (id text PRIMARY KEY, name text, description text, validation text, type text, status text, plan_order int, apis set<text>, created_at timestamp, updated_at timestamp, definition text, characteristics list<text>, security text, published_at timestamp, closed_at timestamp);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.users (username text PRIMARY KEY, source text, source_id text, password text, email text, firstname text, lastname text, roles set<text>, created_at timestamp, updated_at timestamp, last_connection_at timestamp, picture text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.subscriptions (id text PRIMARY KEY, plan text, application text, reason text, status text, created_at timestamp, updated_at timestamp, processed_at timestamp, starting_at timestamp, ending_at timestamp, processed_by text, subscribed_by text);"");  session.execute(""CREATE TABLE IF NOT EXISTS gravitee.ratelimits (key text PRIMARY KEY, last_request bigint, counter bigint, reset_time bigint, created_at bigint, updated_at bigint, async boolean);""); } "	0	0	0	0	0	1
private CollectionItem buildCollectionItemFromInputParameters(String data, User user) { CollectionItem collectionItem = JsonDeserializer.deserialize(data, CollectionItem.class); return collectionItem; } 	0	0	0	0	0	1
"private void startTimer() { subscriptions.add(matchResult.eventsObservable(elapsedMinutes) .map(matchEvent -> (Goal) matchEvent) .observeOn(AndroidSchedulers.mainThread()) .subscribe(goal -> { boolean isHomeGoal = goal.club().nameEquals(match.home()); TextView txtScore = isHomeGoal ? txtTeamHomeGoals : txtTeamAwayGoals; int currGoals = Integer.parseInt(txtScore.getText().toString()); txtScore.setText(String.valueOf(++currGoals)); int gravity = isHomeGoal ? GravityCompat.START : GravityCompat.END; appendEvent(R.drawable.ball, goal.time() + ""' "" + goal.player().name(), gravity); }));  subscriptions.add(timerObservable() .observeOn(AndroidSchedulers.mainThread()) .subscribe(l -> { elapsedMinutes++; fractionView.setFraction(elapsedMinutes % 45, 60); if (elapsedMinutes == 45) { appendEvent(R.drawable.ic_schedule_black_48px, strEndOfFirstHalf, Gravity.CENTER); } else if (elapsedMinutes == 90) { stopTimer(); appendEvent(R.drawable.ic_schedule_black_48px, strEndOfMatch, Gravity.CENTER); appendEvent(finalScoreIcon, finalScoreMessage, Gravity.CENTER); Club winner = matchResult.winner(); boolean isDraw = matchResult.isDraw(); boolean isWinner = !isDraw && userClub.nameEquals(winner); if (isDraw || isWinner) { appendEvent(R.drawable.ic_attach_money_black_24dp, ""+"" + (isWinner ? UserPreferences.COINS_PRIZE_WIN : UserPreferences.COINS_PRIZE_DRAW), Gravity.CENTER_HORIZONTAL); } playPauseButton.setVisibility(View.GONE); doneButton.setVisibility(View.VISIBLE); fractionView.setFraction(45, 60); } })); isRunning = true; } "	0	0	0	0	0	1
"public LogEntry getLogEntry(String ID){  String compare[] = {ID}; Cursor cursor = mDatabase.query(LogEntryTable.TABLE_LOG_ENTRY, LogEntryTable.ALL_COLUMNS, LogEntryTable.COLUMN_ID + ""=?"", compare, null, null, null);  if (cursor.getCount() == 0) { cursor.close(); return null; } else if (cursor.getCount() > 1) { System.out.println(""Duplicated ID found! ""+ID); return null; }  cursor.moveToFirst(); LogEntry logEntry = new LogEntry( cursor.getString(cursor.getColumnIndex(LogEntryTable.COLUMN_ID)), cursor.getInt(cursor.getColumnIndex(LogEntryTable.COLUMN_ACTIVITY)));  logEntry.setID(cursor.getString( cursor.getColumnIndex(LogEntryTable.COLUMN_ID))); logEntry.setDate(cursor.getInt( cursor.getColumnIndex(LogEntryTable.COLUMN_DATE))); logEntry.setSubType(cursor.getInt( cursor.getColumnIndex(LogEntryTable.COLUMN_SUB_TYPE))); logEntry.setDuration(cursor.getInt( cursor.getColumnIndex(LogEntryTable.COLUMN_DURATION))); logEntry.setDistance(cursor.getInt( cursor.getColumnIndex(LogEntryTable.COLUMN_DISTANCE))); logEntry.setCount(cursor.getInt( cursor.getColumnIndex(LogEntryTable.COLUMN_COUNT))); logEntry.setIntensity(cursor.getInt( cursor.getColumnIndex(LogEntryTable.COLUMN_INTENSITY))); logEntry.setWeight(cursor.getInt( cursor.getColumnIndex(LogEntryTable.COLUMN_WEIGHT)));  return logEntry; } "	0	0	0	0	0	1
"@Test public void testStreaming() throws Exception { ValueFactory vf = con.getValueFactory(); int subjectIndex = 0; int predicateIndex = 100; int objectIndex = 1000; int testStatementCount = 1000; int count = 0; con.begin(); while (count < testStatementCount) { con.add(vf.createIRI(""urn:test:"" + subjectIndex), vf.createIRI(""urn:test:"" + predicateIndex), vf.createIRI(""urn:test:"" + objectIndex)); if(Math.round(Math.random()) > 0) { subjectIndex++; } if(Math.round(Math.random()) > 0) { predicateIndex++; } if(Math.round(Math.random()) > 0) { objectIndex++; } count++; } con.commit();  for(int evaluateCount = 0; evaluateCount < 1000; evaluateCount++) { try (ByteArrayOutputStream stream = new ByteArrayOutputStream(); RepositoryConnection nextCon = rep.getConnection();) { TupleQueryResultWriter sparqlWriter = QueryResultIO.createTupleWriter( TupleQueryResultFormat.SPARQL, stream); TupleQuery tupleQuery = con.prepareTupleQuery(QueryLanguage.SPARQL, ""SELECT ?s ?p ?o WHERE { ?s ?p ?o . }""); tupleQuery.setIncludeInferred(false); tupleQuery.evaluate(sparqlWriter); } } } "	0	0	0	0	0	1
@Override public void onStop() { subscribeLiveUpdates(false); if (asset.getWellKnownType() == AssetType.AGENT) { subscribeAgentStatus(false); } super.onStop(); } 	0	0	0	0	0	1
"private void newSession() { // Create a connection manager with custom configuration. PoolingHttpClientConnectionManager connManager = new PoolingHttpClientConnectionManager();  // Validate connections after 1 sec of inactivity connManager.setValidateAfterInactivity(1000); // Create connection configuration ConnectionConfig connectionConfig = ConnectionConfig.custom() .setMalformedInputAction(CodingErrorAction.IGNORE) .setUnmappableInputAction(CodingErrorAction.IGNORE) .setCharset(Consts.UTF_8) .build(); // Configure the connection manager to use connection configuration either // by default or for a specific host. connManager.setDefaultConnectionConfig(connectionConfig);  // Configure total max or per route limits for persistent connections // that can be kept in the pool or leased by the connection manager. connManager.setMaxTotal(100); connManager.setDefaultMaxPerRoute(10);  // Create global request configuration RequestConfig defaultRequestConfig = RequestConfig.custom() .setCookieSpec(CookieSpecs.DEFAULT) .setExpectContinueEnabled(true) .build();  List<Header> headers = new ArrayList<>(); headers.add(new BasicHeader(""User-Agent"", userAgent)); headers.add(new BasicHeader(""Accept"", accept)); headers.add(new BasicHeader(""Accept-Language"", acceptLanguage)); headers.add(new BasicHeader(""Accept-Charset"", defaultCharset.name()));  // Create an HttpClient with the given custom dependencies and configuration. httpclient = HttpClients.custom() .setDefaultHeaders(headers) .setConnectionManager(connManager) .setDefaultRequestConfig(defaultRequestConfig) .setDefaultCookieStore(cookieStore) .build(); } "	0	0	0	0	0	1
public static final LdapSettings getDefault() { return defSettings; } 	0	0	0	0	0	1
"@Test void saveAsJson() throws Exception {  File sampleFile = new File(""./spec/samples/output_sample.json""); File exportedFile = fExport.saveAsJson(modules, ""./export.json"");  byte[] sample = Files.readAllBytes(sampleFile.toPath()); byte[] exported = Files.readAllBytes(exportedFile.toPath());  exportedFile.delete();  assertEquals(new String(sample).replaceAll(""\\r\\n?"", ""\n""), new String(exported).replaceAll(""\\r\\n?"", ""\n"")); } "	0	0	0	0	0	1
@Override public PlayerMovementStateBase nextState(InputProcessor input, PlayerBase player, CollisionList collisionList) { if (enterWhileRunning) { if (player.stateTime >= dashDuration || input.isCommandJustPressed(Command.JUMP) || !input.isCommandPressed(directionKeyBeingPressed) || hasChangedDirection(player) || player.vel.y < 0 || collisionList.isCollidingSide()) { return nextStateIfExit(input, player, collisionList); } } else if (enterWhileIdle) { if (player.stateTime >= dashDuration || input.isCommandJustPressed(Command.JUMP) || hasChangedDirection(player) || player.vel.y < 0 || !input.isCommandPressed(Command.DASH) || collisionList.isCollidingSide()) { return nextStateIfExit(input, player, collisionList); } } else if (enterWhileAirborne) { if (player.stateTime >= dashDuration || hasChangedDirection(player) || !input.isCommandPressed(Command.DASH) || collisionList.isCollidingSide()) { return nextStateIfExit(input, player, collisionList); } }  return this; } 	0	0	0	0	0	1
"private void restoreState(@NonNull Bundle state) { Bundle adapterState = state.getBundle(ADAPTER_STATE_KEY); if (adapterState == null) { throw new RuntimeException(""Unexpected state format""); } listAdapter.restoreState(adapterState);  // we know type, because we own hands saved that list //noinspection unchecked List<CalendarDescriptor> savedCalendarsList = (List<CalendarDescriptor>) state.getSerializable(CALENDARS_LIST_KEY);  if (savedCalendarsList == null) { savedCalendarsList = Collections.emptyList(); } availableCalendars = toSerializableList(savedCalendarsList); ArrayAdapter<CalendarDescriptor> adapter = new ArrayAdapter<>(getActivity(), android.R.layout.simple_spinner_item, availableCalendars); adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); calendarChooser.setAdapter(adapter); if (listAdapter.getCalendar() != null) { setCurrentCalendar(listAdapter.getCalendar()); } } "	0	0	0	0	0	1
"static Tristate evaluateCoeffs(int minValue, int maxValue, int rhs, CType comparator) { int status = 0; if (rhs >= minValue) status++; if (rhs > minValue) status++; if (rhs >= maxValue) status++; if (rhs > maxValue) status++;  switch (comparator) { case EQ: return (status == 0 || status == 4) ? Tristate.FALSE : Tristate.UNDEF; case LE: return status >= 3 ? Tristate.TRUE : (status < 1 ? Tristate.FALSE : Tristate.UNDEF); case LT: return status > 3 ? Tristate.TRUE : (status <= 1 ? Tristate.FALSE : Tristate.UNDEF); case GE: return status <= 1 ? Tristate.TRUE : (status > 3 ? Tristate.FALSE : Tristate.UNDEF); case GT: return status < 1 ? Tristate.TRUE : (status >= 3 ? Tristate.FALSE : Tristate.UNDEF); default: throw new IllegalStateException(""Unknown pseudo-Boolean comparator""); } } "	0	0	0	0	0	1
public void mate() { Entity targetEntity; EntityAINearestAttackableTarget.Sorter theNearestAttackableTargetSorter = new EntityAINearestAttackableTarget.Sorter(this); IEntitySelector targetEntitySelector = new IEntitySelector() { @Override public boolean isEntityApplicable(Entity entity) { return (entity instanceof EntityPrehistoric); } }; double d0 = 64; List<EntityPrehistoric> list = worldObj.selectEntitiesWithinAABB(EntityPrehistoric.class, this.boundingBox.expand(d0, 4.0D, d0), targetEntitySelector); Collections.sort(list, theNearestAttackableTargetSorter); List<EntityPrehistoric> listOfFemales = new ArrayList<EntityPrehistoric>(); if (!list.isEmpty()) { for (EntityPrehistoric mob : list) { if (mob.type == this.type && mob.isAdult() && mob.getGender() == 0 && mob.ticksTillMate == 0) { listOfFemales.add(mob); } } } if (!listOfFemales.isEmpty() && this.ticksTillMate == 0) { EntityPrehistoric prehistoric = listOfFemales.get(0); if (prehistoric.ticksTillMate == 0) { this.getNavigator().tryMoveToEntityLiving(prehistoric, 1); double distance = (double) (this.width * 8.0F * this.width * 8.0F + prehistoric.width); if (this.getDistanceSq(prehistoric.posX, prehistoric.boundingBox.minY, prehistoric.posZ) <= distance && prehistoric.onGround && this.onGround && this.isAdult() && prehistoric.isAdult()) { prehistoric.procreate(this); this.ticksTillMate = this.rand.nextInt(6000) + 6000; prehistoric.ticksTillMate = this.rand.nextInt(12000) + 24000; } } } } 	0	0	0	0	0	1
private void calculateRequiredRockets() { //find the relevant table row using the difficulty //scan the row until payload > rocket trust float mass = 0; int stageCost = 0; List<String> rockets = new ArrayList<>(2); double payloadMassCopy = payloadMass; int i = 0; float basicMass = 0; int basicCost = 0; List<String> basicRockets = new ArrayList<>(2); while(payloadMassCopy > rocketList[i].getThrustPerDifficulty(difficulty)) { if(i < 3) { i++; } else { basicMass += rocketList[i].getMass(); basicCost += rocketList[i].getCost(); basicRockets.add(rocketList[i].getName()); payloadMassCopy -= rocketList[i].getThrustPerDifficulty(difficulty); i=0; } }  //save the rocket as candidate and note it's mass mass = basicMass + rocketList[i].getMass(); stageCost = basicCost + rocketList[i].getCost(); rockets.addAll(basicRockets); rockets.add(rocketList[i].getName());  //scan lighter rockets float newMassCandidate = basicMass; int newCostCandidate = basicCost; List<String> newRocketsCandidate = new ArrayList<>(4); while(--i >= 0 && payloadMassCopy > 0 && rocketList[i].getThrustPerDifficulty(difficulty) > 0) { //payload/prior trust * mass) + (payload%prior.trust)/prior.prior.trust * mass) + etc... int times = (int)(payloadMassCopy/rocketList[i].getThrustPerDifficulty(difficulty)); if(payloadMassCopy < rocketList[i].getThrustPerDifficulty(difficulty)) { times = 1; } int stageMass = times * rocketList[i].getMass(); //check if there will be a very small leftover payload and lighter rockets can't lift it //in case, add one of the current rockets double provisionalPayloadMassCopy = payloadMassCopy; if(stageMass >= rocketList[i+1].getMass()) { provisionalPayloadMassCopy -= rocketList[i+1].getThrustPerDifficulty(difficulty); } else { provisionalPayloadMassCopy -= times * rocketList[i].getThrustPerDifficulty(difficulty); }  if(provisionalPayloadMassCopy > 0 && i > 0 && rocketList[i-1].getThrustPerDifficulty(difficulty) <= 0) { stageMass += rocketList[i].getMass(); times++; } //if the total mass of the smaller rockets is bigger than the next heavier rocket, //better use the heavier then... if(stageMass >= rocketList[i+1].getMass()) { newMassCandidate += rocketList[i+1].getMass(); newCostCandidate += rocketList[i+1].getCost(); newRocketsCandidate.add(rocketList[i+1].getName()); payloadMassCopy -= rocketList[i+1].getThrustPerDifficulty(difficulty); } //otherwise the smaller ones are the best choice else { newMassCandidate += times * rocketList[i].getMass(); newCostCandidate += times * rocketList[i].getCost(); for (int j = 0; j < times; j++) { newRocketsCandidate.add(rocketList[i].getName()); } payloadMassCopy -= times * rocketList[i].getThrustPerDifficulty(difficulty); } }  //if total mass < previous total mass then new minimum candidate. if(newMassCandidate != 0 && newMassCandidate < mass) { mass = newMassCandidate; rockets = newRocketsCandidate; rockets.addAll(basicRockets); stageCost = newCostCandidate; }  //set calculated values rocketsMass = (int)mass; rocketsList = rockets; totalCost = stageCost; } 	0	0	0	0	0	1
"public static void updateDatasetOwner(JsonNode root) throws Exception { final JsonNode owners = root.path(""owners""); if (owners.isMissingNode() || !owners.isArray()) { throw new IllegalArgumentException( ""Dataset owner info update fail, missing necessary fields: "" + root.toString()); }  final JsonNode ownerSourceNode = root.path(""source""); String ownerSource = null; if (!ownerSourceNode.isNull() && !ownerSourceNode.isMissingNode()) { ownerSource = ownerSourceNode.asText(); }  final Integer datasetId; final String urn; final Object[] idUrn = findDataset(root); if (idUrn[0] == null || idUrn[1] == null) { datasetId = 0; urn = root.path(""datasetProperties"").path(""uri"").asText(); } else { datasetId = (Integer) idUrn[0]; urn = (String) idUrn[1]; }  final JsonNode auditHeader = root.path(""auditHeader""); final Long eventTime = auditHeader != null ? auditHeader.path(""time"").asLong() / 1000 : null;  ObjectMapper om = new ObjectMapper();  List<DatasetOwnerRecord> ownerList = new ArrayList<>(); for (final JsonNode owner : owners) { DatasetOwnerRecord record = om.convertValue(owner, DatasetOwnerRecord.class); record.setDatasetId(datasetId); record.setDatasetUrn(urn); record.setSourceTime(eventTime); record.setCreatedTime(eventTime); record.setModifiedTime(System.currentTimeMillis() / 1000);  final String ownerString = record.getOwner(); int lastIndex = ownerString.lastIndexOf(':'); if (lastIndex >= 0) { record.setOwner(ownerString.substring(lastIndex + 1)); record.setNamespace(ownerString.substring(0, lastIndex)); } else { record.setNamespace(""""); } Map<String, Object> ownerInfo = getOwnerByOwnerId(record.getOwner()); Integer appId = 0; String isActive = ""N""; if (ownerInfo.containsKey(""app_id"")) { appId = StringUtil.toInt(ownerInfo.get(""app_id"")); isActive = appId == 301 ? ""Y"" : appId == 300 ? (String) ownerInfo.get(""is_active"") : ""N""; } record.setAppId(appId); record.setIsActive(isActive); String ownerTypeString = record.getOwnerType(); record.setIsGroup(ownerTypeString != null && ownerTypeString.equalsIgnoreCase(""group"") ? ""Y"" : ""N"");  if (datasetId == 0 || appId == 0) { String sql = PreparedStatementUtil.prepareInsertTemplateWithColumn(DATASET_OWNER_UNMATCHED_TABLE, record.getDbColumnForUnmatchedOwner()); OWNER_UNMATCHED_WRITER.execute(sql, record.getValuesForUnmatchedOwner()); } else { ownerList.add(record); } }  mergeDatasetOwners(ownerList, datasetId, urn, ownerSource); } "	0	0	0	0	0	1
@Override public int getScrollingOffset() { return scrollBar.getMaximum() - scrollBar.getVisibleAmount() - scrollBar.getValue(); } 	0	0	0	0	0	1
"public CommandResult execute(CommandSource src, CommandContext ctx) throws CommandException { if (src instanceof Player) { Player player = (Player) src; String playerTeamName = ConfigManager.getTeam(player.getUniqueId());  if (playerTeamName != null && !ConfigManager.getMembers(playerTeamName).contains(player.getUniqueId())) { Optional<Vector3i> optionalChunk = Polis.game.getServer().getChunkLayout().toChunk(player.getLocation().getBlockPosition());  if (optionalChunk.isPresent()) { Vector3i chunk = optionalChunk.get();  if (!ConfigManager.isClaimed(playerTeamName, player.getLocation().getExtent().getUniqueId(), chunk.getX(), chunk.getZ())) { if (ConfigManager.getClaims(playerTeamName) < ConfigManager.getClaimCap()) { if (ConfigManager.getBalance(playerTeamName).compareTo(ConfigManager.getClaimCost()) >= 0) { TransactionResult transactionResult = null; Account account = Polis.economyService.getOrCreateAccount(playerTeamName).get(); transactionResult = account.withdraw(Polis.economyService.getDefaultCurrency(), ConfigManager.getClaimCost(), Cause.of(NamedCause.source(player)));  if (transactionResult.getResult() == ResultType.SUCCESS) { ConfigManager.claim(playerTeamName, player.getLocation().getExtent().getUniqueId(), chunk.getX(), chunk.getZ()); ConfigManager.withdrawFromTownBank(ConfigManager.getClaimCost(), playerTeamName); player.sendMessage(Text.builder().append(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.GOLD, ""Successfully claimed this location for "" + ConfigManager.getClaimCost() + "" "")) .append(Polis.economyService.getDefaultCurrency().getPluralDisplayName()).build()); } else if (transactionResult.getResult() == ResultType.ACCOUNT_NO_FUNDS) { player.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""Not enough funds! Deposit funds or setup taxes!"")); } else { player.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""An error occured while trying to withdraw from your Polis' bank."")); } } else { player.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""Your Polis does not have enough funds to claim this land! Deposit funds soon!"")); } } else { player.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""You already have the maximum number of claims!"")); } } else { player.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""This location is already claimed!"")); } } } else if (playerTeamName != null) { player.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""Ask your leader or an executive to claim!"")); } else { player.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""You're not part of a town!"")); } } else { src.sendMessage(Text.of(TextColors.DARK_RED, ""Error! "", TextColors.RED, ""Must be an in-game player to use /polis claim!"")); }  return CommandResult.success(); } "	0	0	0	0	0	1
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);  setContentView(R.layout.home_fragment);  analytics = GoogleAnalytics.getInstance(this); analytics.setLocalDispatchPeriod(1800);  tracker = analytics.newTracker(""UA-63953479-1""); tracker.enableExceptionReporting(true); tracker.enableAdvertisingIdCollection(true); tracker.enableAutoActivityTracking(true);  key = ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5B4Oomgmm2D8XVSxh1DIFGtU3p1N2w6Xi2ZO7MoeZRAhvVjk3B8MfrOatlO9HfozRGhEkCkq0MfstB4Cjci3dsnYZieNmHOVYIFBWERqdwfdtnUIfI554xFsAC3Ah7PTP3MwKE7qTT1VLTTHxxsE7GH4sLtvLwrAzsVrLK+dgQk+e9bDJMvhhEPBgabRFaTvKaTtSzB/BBwrCa5mv0pte6WfrNbugFjiAJC43b7NNY2PV9UA8mukiBNZ9mPrK5fZeSEfcVqenyqbvZZG+P+O/cohAHbIEzPMuAS1EBf0VBsZtm3fjQ45PgCvEB7Ye3ucfR9BQ9ADjDwdqivExvXndQIDAQAB""; iap inAppPayments = new iap(); bp = inAppPayments.getBilling(this, key); bp.loadOwnedPurchasesFromGoogle();  // Handle Toolbar Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar);  AccountHeader headerResult = new AccountHeaderBuilder() .withActivity(this) .withHeaderBackground(R.drawable.cover) .build();  result = new DrawerBuilder() .withActivity(this) .withToolbar(toolbar) .withTranslucentStatusBar(true) .withActionBarDrawerToggle(true) .withAccountHeader(headerResult) .withSelectedItem(0) .addDrawerItems( new PrimaryDrawerItem().withName(""Connect to..."").withIcon(R.drawable.ic_ic_swap_horiz_24px), new PrimaryDrawerItem().withName(""Settings"").withIcon(R.drawable.ic_ic_settings_24px) ) .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() { @Override public boolean onItemClick(AdapterView<?> parent, View view, int position, long id, IDrawerItem drawerItem) { if (drawerItem instanceof Nameable) { switch (((Nameable) drawerItem).getName()) { case ""Settings"": { Intent intent = new Intent(MainActivity.this, SettingsActivity.class); startActivity(intent); break; } case ""Contact us"": { try { Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""mailto:"" + ""team@numixproject.org"")); startActivity(intent); } catch (Exception e) { Toast.makeText(MainActivity.this, ""A mail client is required."", Toast.LENGTH_SHORT).show(); } break; } case ""Remove ads"": { removeAds(); break; }  case ""Send feedback"": { Intent intent = new Intent(MainActivity.this, Gitty.class); startActivity(intent); break; }  case ""More Apps"": { String url = ""https://play.google.com/store/apps/dev?id=5600498874720965803""; Intent i = new Intent(Intent.ACTION_VIEW); i.setData(Uri.parse(url)); startActivity(i); break; } } } return false; } }).build(); if (!bp.isPurchased(""remove_ads"")) { result.addItem(new PrimaryDrawerItem().withName(""Remove ads"").withIcon(R.drawable.ic_ic_dnd_on_24px)); } result.addItem(new PrimaryDrawerItem().withName(""Send feedback"").withIcon(R.drawable.ic_edit_black_18dp)); result.addItem(new PrimaryDrawerItem().withName(""Contact us"").withIcon(R.drawable.ic_ic_mail_24px)); result.addItem(new PrimaryDrawerItem().withName(""More Apps"").withIcon(R.drawable.ic_ic_shop_24px));   adapter = new ServerListAdapter();  fab = (FloatingActionButton) findViewById(R.id.fab); fab.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { // Perform action on click newAddServerActivity(v); } });  list = (ExpandableHeightListView) findViewById(R.id.list); list.setAdapter(adapter); list.setOnItemClickListener(this); list.setOnItemLongClickListener(this); list.setExpanded(true);  fab.attachToListView(list);  LinearLayout reportBugLayout = (LinearLayout) findViewById(R.id.reportLayout);  reportBugLayout.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { // Start Gitty Reporter Intent intent = new Intent(MainActivity.this, Gitty.class); startActivity(intent); } });  if (instanceCount > 0) { finish(); }  prefs = getSharedPreferences(""org.numixproject.hermes"", MODE_PRIVATE); if (prefs.getBoolean(""firstrun"", true)) { startIntro(); prefs.edit().putBoolean(""firstrun"", false).commit(); }  if (adapter.isServerNull()){ reportBugLayout.setVisibility(View.GONE); } } "	0	0	0	0	0	1
"private Connection getConnection() { java.sql.Connection connection = null; try { connection = DriverManager.getConnection( ""jdbc:postgresql://127.0.0.1:5432/test"", ""postgres"", ""password""); } catch (SQLException e) { System.out.println(""Connection Failed! Check output console""); e.printStackTrace(); return null; } return connection; } "	0	0	0	0	0	1
public String getMyParent() { return myParent; } 	0	0	0	0	0	1
"@AfterClass(groups = ""passthroughUPGRADE"") public void cleaUp() { TestUtil.cleanUp(httpTransportListener, httpServer); } "	0	0	0	0	0	1
"protected void failed(final Throwable t, final Description description) { System.err.println( ""ArchiveAndReplaySystemTest failed with random seed: "" + ArchiveReplayLoadTest.this.seed); } "	0	0	0	0	0	1
@After public void cleanUpMetrics() throws Exception { RuntimeStats.resetAll(); clear(); } 	0	0	0	0	0	1
"@RequestMapping(method = RequestMethod.GET, value = ""/inter/{urlId}"") public String readInterpretation(Model model, @ModelAttribute(""ldoDSession"") LdoDSession ldoDSession, @PathVariable String urlId) { logger.debug(""readInterpretation urlId:{}"", urlId); ExpertEditionInter expertEditionInter = (ExpertEditionInter) LdoD.getInstance() .getFragment(urlId.substring(0, urlId.indexOf(""_""))).getFragInterByUrlId(urlId);  Set<ExpertEditionInter> recommendations = ldoDSession.getRecommendation() .getNextRecommendations(expertEditionInter.getExternalId()); ExpertEditionInter prevRecom = ldoDSession.getRecommendation().getPrevRecommendation();  PlainHtmlWriter4OneInter writer = new PlainHtmlWriter4OneInter(expertEditionInter); writer.write(false);  model.addAttribute(""ldoD"", LdoD.getInstance()); model.addAttribute(""inter"", expertEditionInter); model.addAttribute(""recommendations"", recommendations); model.addAttribute(""prevRecom"", prevRecom); model.addAttribute(""writer"", writer);  return ""reading/readingMain""; } "	0	0	0	0	0	1
"@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { mFragmentView = inflater.inflate(R.layout.fragment_profile_friend, container, false);  // Get the User's information and display on the page TextView nameField = (TextView) mFragmentView.findViewById(R.id.profile_friend_name); nameField.setText(user.getName());  // Update the profile picture on screen. RoundedImageView imageField = (RoundedImageView) mFragmentView.findViewById(R.id.profile_friend_picture_view);  follow = (Button) mFragmentView.findViewById(R.id.profile_friend_follow);  FollowStatusCallBack followStatusCallBack = new FollowStatusCallBack() { @Override public void onResponseReceived(Boolean follows) { followButton(follows); } };  this.getFollowStatus(followStatusCallBack);   /* Check if the user profile picture is set. */ if (!(user.getProfileID()).equals("""")) { Uri imageUri = Uri.parse(user.getProfileID()); imageField.setImageURI(imageUri); }  /* Initiate the events feed on the profile, by loading the data into the adapter view. */ // TODO: Replace stubs with actual Events   final RecyclerView mRecyclerView = (RecyclerView) mFragmentView.findViewById(R.id.profileFriendEventsRecycler); boolean b = mRecyclerView.hasFixedSize();  RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(this.getContext()); mRecyclerView.setLayoutManager(mLayoutManager);  final Context context = this.getContext();  final ProgressDialog spinner = ProgressDialog.show(getContext(), ""Loading"", ""Wait while loading..."");  // TOOO APIManager.getInstance().getEvents(new APICallback<List<Event>>() { @Override public void onSuccess(final List<Event> events) {  spinner.dismiss();  EventListAdapterItem mAdapter = new EventListAdapterItem(events, context);  mAdapter.setOnItemClickListener(new EventListAdapterItem.EventItemClickInterface() { @Override public void onItemClick(int position, View v) { mListener.onProfileFriendEventSelected(events.get(position)); } });  mRecyclerView.setAdapter(mAdapter);  }  @Override public void onFailure(String message) { spinner.dismiss(); } });  return mFragmentView; } "	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") @Override protected void configure() { super.configure(); bind(new TypeLiteral<ComputeServiceAdapter<Vm, Hardware, QueryResultVAppTemplateRecord, Vdc>>() { }).to(VCloudDirectorComputeServiceAdapter.class); bind(new TypeLiteral<Function<ResourceEntity.Status, NodeMetadata.Status>>() { }).to(NodemetadataStatusForStatus.class); bind(new TypeLiteral<Function<String, Image.Status>>() { }).to(ImageStateForStatus.class); bind(new TypeLiteral<Function<Vm, NodeMetadata>>() { }).to(VmToNodeMetadata.class); bind(new TypeLiteral<Function<QueryResultVAppTemplateRecord, org.jclouds.compute.domain.Image>>() { }).to(ImageForVAppTemplate.class); bind(new TypeLiteral<Function<URI, Envelope>>() { }).to(ValidateVAppTemplateAndReturnEnvelopeOrThrowIllegalArgumentException.class); bind(new TypeLiteral<Function<Hardware, Hardware>>() { }).to(Class.class.cast(IdentityFunction.class)); bind(new TypeLiteral<Function<Vm, Hardware>>() { }).to(Class.class.cast(HardwareForVm.class)); bind(new TypeLiteral<Function<Vdc, Location>>() { }).to(VdcToLocation.class); bind(TemplateOptions.class).to(VCloudDirectorTemplateOptions.class); bind(new TypeLiteral<Supplier<Set<Hardware>>>() {}).to(VirtualHardwareConfigSupplier.class); bind(new TypeLiteral<AdaptingComputeServiceStrategies<Vm, Hardware, QueryResultVAppTemplateRecord, Vdc>>() { }).to(VcloudDirectorListNodesStrategy.class); install(new LocationsFromComputeServiceAdapterModule<Vm, Hardware, QueryResultVAppTemplateRecord, Vdc>() { }); } "	0	0	0	0	0	1
"@Test(expected = FacilityNotFoundException.class) public void shouldNotUpdateFacilityIfFacilityIsNotFound() throws FacilityNotFoundException { String facilityId = ""123456""; when(mockAllFacilities.getFacility(facilityId)).thenReturn(null); facilityService.update(createFacilityVO(facilityId, null, null, null, null, null, null, null, null, null, null)); } "	0	0	0	0	0	1
private Locale getLocale(ActionEvent evt) { return new Locale(persistentPreferredLanguage.getValue()); } 	0	0	0	0	0	1
public void syncPlayerToClient(EntityPlayerMP entityPlayer) {  for (Entry<String, Class<? extends PropertiesBase>> entry : identifierClassAssociations.entrySet()) {  String identifier = entry.getKey(); Class clazz = entry.getValue(); IExtendedEntityProperties wrapper = entityPlayer.getExtendedProperties( identifier );  if (wrapper.getClass().isAssignableFrom( clazz )) { PowersNetwork.client().syncProperties( ((PropertiesBase)wrapper), entityPlayer); }  } } 	0	0	0	0	0	1
public void normalize() { this.normalize(0); } 	0	0	0	0	0	1
"public static String valueToNotationString(Object val, org.openprovenance.prov.model.QualifiedName xsdType) { if (val instanceof LangString) { LangString istring = (LangString) val; return ""\"""" + istring.getValue() + ((istring.getLang()==null) ? ""\"""" : ""\""@"" + istring.getLang()) + ((xsdType==null)? """" : "" %% "" + Namespace.qualifiedNameToStringWithNamespace(xsdType)); } else if (val instanceof QualifiedName) { QualifiedName qn = (QualifiedName) val; return ""'"" + Namespace.qualifiedNameToStringWithNamespace(qn) + ""'""; } else if (val instanceof String) { String s=(String)val; if (s.contains(""\n"")) { return ""\""\""\"""" + escape(s) + ""\""\""\"""" ; } else { //FIXME: It's here that we should detect an int and generate the compact form: e.g. 1 instand of 1 %% xsd:int // However dictionaries failed to be parsed then //if (xsdType.getLocalPart().equals(""int"")) { //FIXME:need to properly compare with xsd:int //    return s; //} else { return ""\"""" + escape(s) + ((xsdType==null)? """" : ""\"" %% "" + Namespace.qualifiedNameToStringWithNamespace(xsdType)); //} } } else { // We should never be here! return ""\"""" + val + ""\"" %% "" + Namespace.qualifiedNameToStringWithNamespace(xsdType); } } "	0	0	0	0	0	1
"@SubscribeEvent public void onPlayerInteract(PlayerInteractEvent ev) { Resident res = DatasourceProxy.getDatasource().getOrMakeResident(ev.entityPlayer); Block block = ev.world.getBlock(ev.x, ev.y, ev.z);  // Shop and plot sale click verify if (ev.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK || ev.action == PlayerInteractEvent.Action.LEFT_CLICK_BLOCK) {  if (block == Blocks.wall_sign || block == Blocks.standing_sign) { TileEntitySign te = (TileEntitySign) ev.world.getTileEntity(ev.x, ev.y, ev.z);  if(te.signText[1].equals(Constants.PLOT_SELL_IDENTIFIER)) { if (ev.action == PlayerInteractEvent.Action.LEFT_CLICK_BLOCK && ev.entityPlayer.isSneaking() && Utils.isOp(ev.entityPlayer)) { ev.world.setBlock(ev.x, ev.y, ev.z, Blocks.air); } else if(ev.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) { Town town = MyTownUtils.getTownAtPosition(ev.world.provider.dimensionId, ev.x >> 4, ev.z >> 4); if(town != null) { if(town.hasResident(res)) { Plot plot = town.getPlotAtCoords(ev.world.provider.dimensionId, ev.x, ev.y, ev.z); if(plot != null) { if(!plot.hasOwner(res)) { if (town.canResidentMakePlot(res)) { int price = Integer.parseInt(te.signText[2].substring(2, te.signText[2].length())); if (EconomyProxy.getEconomy().takeMoneyFromPlayer(ev.entityPlayer, price)) { for(Resident resInPlot : plot.getOwners()) { resInPlot.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.notification.plot.buy.oldOwner"", plot.getName())); } for(Resident resInPlot : plot.getResidents()) { DatasourceProxy.getDatasource().unlinkResidentFromPlot(resInPlot, plot); } DatasourceProxy.getDatasource().linkResidentToPlot(res, plot, true); res.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.notification.plot.buy.newOwner"", plot.getName())); ev.world.setBlock(ev.x, ev.y, ev.z, Blocks.air); } else { res.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.notification.plot.buy.failed"", price, EconomyProxy.getEconomy().getCurrency(price))); } } else { res.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.plot.limit"", town.getMaxPlots())); } } else { res.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.plot.sell.alreadyOwner"")); } } } else { res.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.notInTown"", town.getName())); } } } ev.setCanceled(true); } } } } "	0	0	0	0	0	1
"private static JSONArray attributes(JSONObject obj) { return obj.getJSONArray(""attributes""); } "	0	0	0	0	0	1
"@Override public void init(Window window, Controller controller) { mapType = LanguageHandler.get(""Hexagonal""); widthValue = calcMapVal(0.5d); heightValue = calcMapVal(0.5d);  buttonMapType = new TextButton(window, mapType, e->{  if(mapType.equals(LanguageHandler.get(""Hexagonal""))) mapType = LanguageHandler.get(""Oval""); else if(mapType.equals(LanguageHandler.get(""Oval""))) mapType = LanguageHandler.get(""Square""); else if(mapType.equals(LanguageHandler.get(""Square""))) mapType = LanguageHandler.get(""Custom""); else if(mapType.equals(LanguageHandler.get(""Custom""))) mapType = LanguageHandler.get(""Hexagonal"");  System.out.println(mapType); buttonMapType.setText(mapType); });  displayWidth = new TextLabel(new TextLabel.Text() { @Override public String getText() { return LanguageHandler.get(""Width"") + "": "" + widthValue + """"; } }, false);  displayHeight = new TextLabel(new TextLabel.Text() { @Override public String getText() { return LanguageHandler.get(""Height"") + "": "" + heightValue + """"; } }, false);  mapWidth = new HorizontalSlider(0.5f, e -> widthValue = calcMapVal(mapWidth.getValue())); mapHeight = new HorizontalSlider(0.5f, e -> heightValue = calcMapVal(mapHeight.getValue()));  accept = new TextButton(window, LanguageHandler.get(""Accept""), e->{ if(widthValue % 2 == 0) widthValue += 1; if(heightValue % 2 == 0) heightValue += 1;  MapPreset mp = null; if(mapType.equals(LanguageHandler.get(""Hexagonal""))) mp = new HexPreset((widthValue + heightValue)/2); else if(mapType.equals(LanguageHandler.get(""Oval""))) mp = new OvalPreset(widthValue, heightValue); else if(mapType.equals(LanguageHandler.get(""Square""))) mp = new SquarePreset(widthValue, heightValue); else if(mapType.equals(LanguageHandler.get(""Custom""))) mp = new CustomPreset(""map""); prev.setPreset(mp); window.updateView(prev); });  cancel = new TextButton(window, LanguageHandler.get(""Cancel""), e -> window.updateView(prev));  window.getPanel().add(cancel); window.getPanel().add(accept); window.getPanel().add(mapWidth); window.getPanel().add(mapHeight); window.getPanel().add(displayHeight); window.getPanel().add(displayWidth); window.getPanel().add(buttonMapType);  changeSize();  started = true; new Thread(new Runnable() { @Override public void run() { while (started) { draw(); } } }).start(); } "	0	0	0	0	0	1
private int enterCodeGeneration() { return initiator.hashCode(); } 	0	0	0	0	0	1
"public void didChangeWatchedFiles(DidChangeWatchedFilesParams params) { boolean needsFullCheck = false; for (FileEvent event : params.getChanges()) { Path path = getPathFromLsapiURI(event.getUri()); if (path == null) { continue; } File file = path.toFile(); if (file.getName().equals(""asconfig.json"")) { //compiler settings may have changed, which means we should //start fresh asconfigChanged = true; needsFullCheck = true; } else if (file.getName().endsWith("".as"") && currentWorkspace != null) { if (event.getType().equals(FileChangeType.Deleted)) { IFileSpecification fileSpec = fileSpecGetter.getFileSpecification(file.getAbsolutePath()); currentWorkspace.fileRemoved(fileSpec); needsFullCheck = true; } else if (event.getType().equals(FileChangeType.Created)) { IFileSpecification fileSpec = fileSpecGetter.getFileSpecification(file.getAbsolutePath()); currentWorkspace.fileAdded(fileSpec); } else if (event.getType().equals(FileChangeType.Changed)) { IFileSpecification fileSpec = fileSpecGetter.getFileSpecification(file.getAbsolutePath()); currentWorkspace.fileChanged(fileSpec); checkFilePathForProblems(path, false); } } } if (needsFullCheck) { if (currentOptions != null && currentOptions.type.equals(ProjectType.LIB)) { Set<Path> filePaths = this.sourceByPath.keySet(); if (filePaths.size() > 0) { //it doesn't matter which file we pick here because we're //doing a full build Path path = filePaths.iterator().next(); checkFilePathForProblems(path, false); } } else //app { Path path = getMainCompilationUnitPath(); if (path != null) { checkFilePathForProblems(path, false); } } } } "	0	0	0	0	0	1
"private void getTimeseriesAsCsv(String timeseriesId, IoParameters query, HttpServletResponse response) throws IoHandlerException, DatasetFactoryException, URISyntaxException, MalformedURLException, IOException { checkIfUnknownTimeseries(query, timeseriesId);  RequestSimpleParameterSet parameters = RequestSimpleParameterSet.createForSingleSeries(timeseriesId, query); checkAgainstTimespanRestriction(parameters.getTimespan()); parameters.setGeneralize(query.isGeneralize()); parameters.setExpanded(query.isExpanded());  response.setCharacterEncoding(""UTF-8""); if (Boolean.parseBoolean(query.getOther(MimeType.APPLICATION_ZIP.name()))) { response.setContentType(MimeType.APPLICATION_ZIP.toString()); } else { response.setContentType(MimeType.TEXT_CSV.toString()); } createIoFactory(parameters).createHandler(""text/csv"") .writeBinary(response.getOutputStream()); } "	0	0	0	0	0	1
public static double confidenceLo() { return mean() - (1.96 * stddev() / Math.sqrt(initialT)); } 	0	0	0	0	0	1
public static double mean() { return StdStats.mean(thresholds); } 	0	0	0	0	0	1
private Timer createNewTimer() {  Timer newTimer = new Timer();  newTimer.schedule(new TimerTask() {  @Override public void run() { Client oldOperator = removeOldOperator(clientController.getClients()); selectNextOperator(oldOperator); } }, OPERATOR_TIME, OPERATOR_TIME);  return newTimer; } 	0	0	0	0	0	1
"public Earning getEarningById(int id) { Cursor cursor = database.query(DataBaseHelper.EARNING_TABLE, allColumns, DataBaseHelper.DATE_COLUMN + """", new String[] { String.valueOf(id)}, null, null, null); if (cursor != null ) { cursor.moveToFirst(); } Earning earning = cursorToEarning(cursor); cursor.close(); return earning; } "	0	0	0	0	0	1
"public void handle() { String msg = null; String domain = null; String opcode = null; boolean canContinue = false; Properties props; final StringBuilder buf = new StringBuilder(128);  this.thread.setName(""SAMv1Handler "" + _id); if (_log.shouldLog(Log.DEBUG)) _log.debug(""SAM handling started"");  try { boolean gotFirstLine = false; while (true) { if (shouldStop()) { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Stop request found""); break; }  SocketChannel clientSocketChannel = getClientSocket() ; if (clientSocketChannel == null) { _log.info(""Connection closed by client""); break; } if (clientSocketChannel.socket() == null) { _log.info(""Connection closed by client""); break; } buf.setLength(0); // first time, set a timeout try { Socket sock = clientSocketChannel.socket(); ReadLine.readLine(sock, buf, gotFirstLine ? 0 : FIRST_READ_TIMEOUT); sock.setSoTimeout(0); } catch (SocketTimeoutException ste) { writeString(""SESSION STATUS RESULT=I2P_ERROR MESSAGE=\""command timeout, bye\""\n""); break; } msg = buf.toString();  if (_log.shouldLog(Log.DEBUG)) { _log.debug(""New message received: ["" + msg + ']'); } props = SAMUtils.parseParams(msg); domain = (String) props.remove(SAMUtils.COMMAND); if (domain == null) { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Ignoring newline""); continue; } opcode = (String) props.remove(SAMUtils.OPCODE); if (opcode == null) { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Error in message format""); break; } if (_log.shouldLog(Log.DEBUG)) { _log.debug(""Parsing (domain: \"""" + domain + ""\""; opcode: \"""" + opcode + ""\"")""); } gotFirstLine = true; if (domain.equals(""STREAM"")) { canContinue = execStreamMessage(opcode, props); } else if (domain.equals(""DATAGRAM"")) { canContinue = execDatagramMessage(opcode, props); } else if (domain.equals(""RAW"")) { canContinue = execRawMessage(opcode, props); } else if (domain.equals(""SESSION"")) { if (i2cpProps != null) props.putAll(i2cpProps); // make sure we've got the i2cp settings canContinue = execSessionMessage(opcode, props); } else if (domain.equals(""DEST"")) { canContinue = execDestMessage(opcode, props); } else if (domain.equals(""NAMING"")) { canContinue = execNamingMessage(opcode, props); } else { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Unrecognized message domain: \"""" + domain + ""\""""); break; }  if (!canContinue) { break; } } } catch (IOException e) { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Caught IOException for message ["" + msg + ""]"", e); } catch (SAMException e) { _log.error(""Unexpected exception for message ["" + msg + ""]"", e); } catch (RuntimeException e) { _log.error(""Unexpected exception for message ["" + msg + ""]"", e); } finally { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Stopping handler""); try { closeClientSocket(); } catch (IOException e) { if (_log.shouldWarn()) _log.warn(""Error closing socket"", e); } if (rawSession != null) { rawSession.close(); } if (datagramSession != null) { datagramSession.close(); } if (streamSession != null) { streamSession.close(); } } } "	0	0	0	0	0	1
"@Override public BeanDefinition parse(Element element, ParserContext parserContext) { BeanDefinitionBuilder builder = parseComponent(element, parserContext); builder.addPropertyValue(""name"", ""http:"" + element.getLocalName());  DescriptionElementParser.doParse(element, builder); BeanDefinitionParserUtils.setPropertyReference(builder, element.getAttribute(""actor""), ""actor"");  String receiveTimeout = element.getAttribute(""timeout""); if (StringUtils.hasText(receiveTimeout)) { builder.addPropertyValue(""receiveTimeout"", Long.valueOf(receiveTimeout)); }  if (element.hasAttribute(""server"")) { builder.addPropertyReference(""endpoint"", element.getAttribute(""server"")); }  HttpMessage httpMessage = new HttpMessage(); Element requestElement = DomUtils.getChildElements(element).get(0); httpMessage.method(HttpMethod.valueOf(requestElement.getLocalName().toUpperCase())); if (requestElement.hasAttribute(""path"")) { httpMessage.path(requestElement.getAttribute(""path"")); }  if (requestElement.hasAttribute(""context-path"")) { httpMessage.contextPath(requestElement.getAttribute(""context-path"")); }  List<?> params = DomUtils.getChildElementsByTagName(requestElement, ""param""); for (Object item : params) { Element param = (Element) item; httpMessage.queryParam(param.getAttribute(""name""), param.getAttribute(""value"")); }  Element headers = DomUtils.getChildElementByTagName(requestElement, ""headers""); if (headers != null) { List<?> headerElements = DomUtils.getChildElementsByTagName(headers, ""header""); for (Object headerElement : headerElements) { Element header = (Element) headerElement; httpMessage.setHeader(header.getAttribute(""name""), header.getAttribute(""value"")); }  String contentType = headers.getAttribute(""content-type""); if (StringUtils.hasText(contentType)) { httpMessage.contentType(contentType); }  String accept = headers.getAttribute(""accept""); if (StringUtils.hasText(accept)) { httpMessage.accept(accept); }  String version = headers.getAttribute(""version""); if (StringUtils.hasText(version)) { httpMessage.version(version); }  List<?> cookieElements = DomUtils.getChildElementsByTagName(headers, ""cookie""); for (Object cookieElement : cookieElements) { Element cookie = (Element) cookieElement; httpMessage.cookie(new Cookie(cookie.getAttribute(""name""), cookie.getAttribute(""value""))); } }  parseMessageSelector(element, builder);  Element body = DomUtils.getChildElementByTagName(requestElement, ""body""); List<ValidationContext> validationContexts = parseValidationContexts(body, builder);  builder.addPropertyValue(""messageBuilder"", new HttpMessageContentBuilder(httpMessage, constructMessageBuilder(body))); builder.addPropertyValue(""validationContexts"", validationContexts); builder.addPropertyValue(""variableExtractors"", getVariableExtractors(element));  return builder.getBeanDefinition(); } "	0	0	0	0	0	1
"private static P4Job customGetJob(@NotNull final Server server, @NotNull final String jobId) throws ConnectionException, AccessException { List<Map<String, Object>> resultMaps = server.execMapCmdList(CmdSpec.JOB, new String[]{""-o"", jobId}, null); if (resultMaps != null) { for (final Map<String, Object> resultMap : resultMaps) { String errStr = server.getErrorStr(resultMap); if (errStr != null) { if (server.isAuthFail(errStr)) { throw new AccessException(errStr); } else { final String errorMessage = P4Bundle.message(""error.job.parse"", jobId, resultMap.get(""code0"")); LOG.error(errorMessage); LOG.warn(""Problem parsing job "" + jobId + "" with result maps: "" + resultMaps); // Still create the job, because it exists return new P4Job(jobId, errorMessage); } } if (!server.isInfoMessage(resultMap)) { return new P4Job(new Job(server, resultMap)); } } } return null; } "	0	0	0	0	0	1
public List<IAnt> getAnts() { return this.ants; } 	0	0	0	0	0	1
public ExpandableAdapter parentLongClickTargets(Integer... ids) { mParentLongClickTargets = ids; return this; } 	0	0	0	0	0	1
public void setExpandCollapseMode(int mode) { getMode(); if (mode == mExpandCollapseMode.mode) return; mExpandCollapseMode.mode = mode; } 	0	0	0	0	0	1
public int getHeight() { return sprite.getHeight(); } 	0	0	0	0	0	1
"private void initializeDataToView() {  if (mTransactionResponse != null) {  if (getActivity() != null) {  if ( mPaymentType == Constants.PAYMENT_METHOD_MANDIRI_BILL_PAYMENT ) { mTextViewBankName.setText(MANDIRI_BILL);  } else if ( mPaymentType  == Constants.PAYMENT_METHOD_PERMATA_VA_BANK_TRANSFER ) { mTextViewBankName.setText(VIRTUAL_ACCOUNT); } else if ( mPaymentType == Constants.PAYMENT_METHOD_INDOSAT_DOMPETKU ) { mTextViewBankName.setText(getActivity().getResources().getString(R.string .indosat_dompetku)); } else if (  mPaymentType == Constants.PAYMENT_METHOD_MANDIRI_CLICK_PAY){ mTextViewBankName.setText(getActivity().getResources().getString(R.string .mandiri_click_pay)); } }  mTextViewTransactionTime.setText(mTransactionResponse.getTransactionTime()); mTextViewOrderId.setText(mTransactionResponse.getOrderId()); String amount = mTransactionResponse.getGrossAmount(); String formattedAmount = amount.split(""."").length == 2 ? amount.split(""."")[0] : amount; mTextViewAmount.setText(formattedAmount);  //noinspection StatementWithEmptyBody if (mTransactionResponse.getTransactionStatus().contains(PENDING) || mTransactionResponse.getTransactionStatus().contains(""pending"")) {  } else if (mTransactionResponse.getStatusCode().equalsIgnoreCase(getString(R.string.success_code_200)) || mTransactionResponse.getStatusCode().equalsIgnoreCase(getString(R.string.success_code_201))) {  setUiForSuccess(); } else {  setUiForFailure();  if (getActivity() != null) {  // change name of button to 'RETRY' if (mPaymentType == Constants.PAYMENT_METHOD_INDOSAT_DOMPETKU) { ((IndosatDompetkuActivity) getActivity()).activateRetry(); } else if (mPaymentType == Constants.PAYMENT_METHOD_MANDIRI_CLICK_PAY){ ((MandiriClickPayActivity) getActivity()).activateRetry();  if ( mTransactionResponse != null && mTransactionResponse.getTransactionStatus().equalsIgnoreCase(""deny"")){ mTextViewTransactionStatus.setText(""Payment Denied.""); } } else { ((BankTransferActivity) getActivity()).activateRetry(); } } } } } "	0	0	0	0	0	1
"@Override public void update(final Collection<ParameterValue> params) { SwingUtilities.invokeLater(new Runnable() { Hashtable<String,TreeContainer> containers = new Hashtable<String,TreeContainer>(); DefaultMutableTreeNode getTreeNode(SequenceContainer sc) { if (sc.getBaseContainer() == null) { return structureRoot; } TreeContainer tc = containers.get(sc.getOpsName()); if (tc == null) { tc = new TreeContainer(sc); containers.put(sc.getOpsName(), tc); } getTreeNode(sc.getBaseContainer()).add(tc); return tc; } @Override public void run() { Object[] vec = new Object[parametersTable.getColumnCount()]; DataEncoding encoding; Calibrator calib; Object paramtype; String name;  parametersTable.clear(); structureRoot.removeAllChildren();  for (ParameterValue value:params) {  // add new leaf to the structure tree // parameters become leaves, and sequence containers become nodes recursively  name = value.getParameter().getOpsName(); getTreeNode(value.getParameterEntry().getSequenceContainer()).add(new TreeEntry(value));  // add new row for parameter table  vec[0] = name; vec[1] = StringConvertors.toString(value.getEngValue(), false); vec[2] = StringConvertors.toString(value.getRawValue(), false);  vec[3] = value.getWarningRange() == null ? """" : Double.toString(value.getWarningRange().getMinInclusive()); vec[4] = value.getWarningRange() == null ? """" : Double.toString(value.getWarningRange().getMaxInclusive());;   vec[5] = value.getCriticalRange() == null ? """" : Double.toString(value.getCriticalRange().getMinInclusive()); vec[6] = value.getCriticalRange() == null ? """" : Double.toString(value.getCriticalRange().getMaxInclusive()); vec[7] = String.valueOf(value.getAbsoluteBitOffset()); vec[8] = String.valueOf(value.getBitSize());  paramtype = value.getParameter().getParameterType(); if (paramtype instanceof EnumeratedParameterType) { vec[9] = paramtype; } else if (paramtype instanceof BaseDataType) { encoding = ((BaseDataType)paramtype).getEncoding(); calib = null; if (encoding instanceof IntegerDataEncoding) { calib = ((IntegerDataEncoding) encoding).getDefaultCalibrator(); } else if (encoding instanceof FloatDataEncoding) { calib = ((FloatDataEncoding) encoding).getDefaultCalibrator(); } vec[9] = calib == null ? ""IDENTICAL"" : calib.toString(); }  parametersTable.addRow(vec); }  structureRoot.setUserObject(currentPacket); structureModel.nodeStructureChanged(structureRoot); structureTree.setRootVisible(true);  // expand all nodes for (TreeContainer tc:containers.values()) { structureTree.expandPath(new TreePath(tc.getPath())); }  // build hexdump text currentPacket.hexdump(hexDoc); hexText.setCaretPosition(0);  // select first row parametersTable.setRowSelectionInterval(0, 0); } }); } "	0	0	0	0	0	1
"private void handleServiceException(String key, ServiceException e) throws IOException { if (""NoSuchKey"".equals(e.getErrorCode())) { throw new FileNotFoundException(""Key '"" + key + ""' does not exist in OSS""); } else { handleServiceException(e); } } "	0	0	0	0	0	1
"public void parse(CommandParserArgs args) { if (args != null) { while (!args.isEmpty()) { args.tabComplete(keywords); String next = args.remove(); switch (next) { case ""action"": parseActions(args); break; case ""block"": case ""blockid"": parseBlock(args); break; case ""before"": parseBefore(args); break; case ""after"": parseAfter(args); break; case ""range"": parseRange(args); break; case ""whitelist"": parseWhitelist(args,true); break; case ""blacklist"": parseWhitelist(args,false); break; default: throw new TranslatedCommandException(""Expected Keyword here!"");  }  } } if (Awhitelist == null) { Awhitelist = !actions.isEmpty(); } if (Bwhitelist == null) { Bwhitelist = !blocks.isEmpty(); }   } "	0	0	0	0	0	1
private void setMealButtonsText() { SharedPreferences sharedPreferences = getActivity().getSharedPreferences(getString(R.string.MainActivity_dining_common_shared_prefs), Context.MODE_PRIVATE); List<Meal> meals =  data.select(Meal.class).join(RepeatedEvent.class).on(Meal.ID.eq(RepeatedEvent.DINING_COMMON_ID)) .join(DiningCommon.class).on(DiningCommon.ID.eq(RepeatedEvent.DINING_COMMON_ID)) .where(DiningCommon.NAME.eq(sharedPreferences.getString(MainActivity.STATE_CURRENT_DINING_COMMON, getString(R.string.DLG))) .and(RepeatedEvent.DAY_OF_WEEK.eq(displayDate.getDayOfWeek()))).get().toList(); ArrayList<String> mealNames = new ArrayList<>(); for(Meal meal : meals) { mealNames.add(meal.getName()); if(meal.getName().equals(getString(R.string.MenuFragment_breakfast_string)) || meal.getName().equals(getString(R.string.MenuFragment_brunch_string))) breakfastButton.setText(meal.getName()); } if(!mealNames.contains(getString(R.string.MenuFragment_breakfast_string)) && !mealNames.contains(getString(R.string.MenuFragment_brunch_string))) { breakfastButton.setVisibility(View.INVISIBLE); } if(!mealNames.contains(getString(R.string.MenuFragment_lunch_string))) { lunchButton.setVisibility(View.INVISIBLE); } if(!mealNames.contains(getString(R.string.MenuFragment_dinner_string))) { dinnerButton.setVisibility(View.INVISIBLE); } if(!mealNames.contains(getString(R.string.MenuFragment_latenight_string))) { lateNightButton.setVisibility(View.INVISIBLE); } } 	0	0	0	0	0	1
public static void info(String module, String message) { logMessage(Level.INFO, module, message); } 	0	0	0	0	0	1
"@Override public void caseAIphrDataAssignment(AIphrDataAssignment node) { // data_assignment = {iphr} identifier_becomes data_assign_phrase final LeftHandSideResult lhs = LeftHandSideAnalyzer.analyze(node.getIdentifierBecomes());  // data_assign_phrase = // {read} read read_phrase // | {readas} read as identifier read_phrase // | {mlm} T.mlm term // | {mlmi} T.mlm term from institution string_literal // | {mlms} T.mlm T.mlm_self // | {imap} interface mapping_factor // | {emap} event mapping_factor // | {mmap} message mapping_factor // | {masmap} message as identifier mapping_factor? // | {dmap} destination mapping_factor // | {dasmap} destination as identifier mapping_factor? // | {object} object l_brk object_attribute_list r_brk // | {arg} argument // | {cphr} call_phrase // | {newobj} new_object_phrase // | {expr} expr; node.getDataAssignPhrase().apply(new VisitorBase() { @Override public void caseAReadDataAssignPhrase(AReadDataAssignPhrase node) { // {read} read read_phrase assignPhrase(lhs, node.getReadPhrase()); }  @Override public void caseAReadasDataAssignPhrase(final AReadasDataAssignPhrase node) { // {readas} read as identifier read_phrase final Variable v = context.codeGenerator.getVariableOrShowError(node.getIdentifier()); if (!(v instanceof ObjectTypeVariable)) throw new RuntimeCompilerException(lhs.getPosition(), ""EVENT variables must be simple identifiers""); lhs.assign(context, new Switchable() { @Override public void apply(Switch sw) { node.getReadPhrase().apply(new ReadPhraseCompiler(context)); try { context.writer.invokeInstance(DatabaseQuery.class.getMethod(""execute"")); } catch (NoSuchMethodException e) { throw new RuntimeException(e); } context.writer.loadStaticField(((ObjectTypeVariable) v).field); context.writer.invokeStatic(Compiler.getRuntimeHelper(""readAs"", ArdenValue[].class, ObjectType.class)); } }); }  @Override public void caseAMlmDataAssignPhrase(AMlmDataAssignPhrase node) { // {mlm} T.mlm term createMlmVariable(lhs, node.getTerm(), null); }  @Override public void caseAMlmiDataAssignPhrase(AMlmiDataAssignPhrase node) { // {mlmi} T.mlm term from institution string_literal createMlmVariable(lhs, node.getTerm(), node.getStringLiteral()); }  @Override public void caseAMlmsDataAssignPhrase(AMlmsDataAssignPhrase node) { // {mlms} T.mlm T.mlm_self createMlmVariable(lhs, null, null); }  @Override public void caseAImapDataAssignPhrase(AImapDataAssignPhrase node) { // {imap} interface mapping_factor CallableVariable var = CallableVariable.getCallableVariable(context.codeGenerator, lhs); context.writer.sequencePoint(lhs.getPosition().getLine()); context.writer.loadThis(); context.writer.loadVariable(context.executionContextVariable); context.writer.loadStringConstant(ParseHelpers.getStringForMapping(node.getMappingFactor())); context.writer.invokeInstance(ExecutionContextMethods.findInterface); context.writer.storeInstanceField(var.mlmField); }  @Override public void caseAEmapDataAssignPhrase(AEmapDataAssignPhrase node) { // {emap} event mapping_factor EventVariable e = EventVariable.getEventVariable(context.codeGenerator, lhs); context.writer.sequencePoint(lhs.getPosition().getLine()); context.writer.loadThis(); context.writer.loadVariable(context.executionContextVariable); context.writer.loadStringConstant(ParseHelpers.getStringForMapping(node.getMappingFactor())); context.writer.invokeInstance(ExecutionContextMethods.getEvent); context.writer.storeInstanceField(e.field); }  @Override public void caseAMmapDataAssignPhrase(AMmapDataAssignPhrase node) { // {mmap} message mapping_factor final String mappingString = ParseHelpers.getStringForMapping(node.getMappingFactor()); lhs.assign(context, new Switchable() { @Override public void apply(Switch sw) { context.writer.loadVariable(context.executionContextVariable); context.writer.loadStringConstant(mappingString); context.writer.invokeInstance(ExecutionContextMethods.getMessage); } }); }  @Override public void caseAMasmapDataAssignPhrase(AMasmapDataAssignPhrase node) { // {masmap} message as identifier mapping_factor? // TODO Auto-generated method stub super.caseAMasmapDataAssignPhrase(node); }  @Override public void caseADmapDataAssignPhrase(ADmapDataAssignPhrase node) { // {dmap} destination mapping_factor DestinationVariable v = DestinationVariable.getDestinationVariable(context.codeGenerator, lhs); context.writer.loadThis(); context.writer.loadStringConstant(ParseHelpers.getStringForMapping(node.getMappingFactor())); context.writer.storeInstanceField(v.field); }  @Override public void caseADasmapDataAssignPhrase(ADasmapDataAssignPhrase node) { // {dasmap} destination as identifier mapping_factor? // TODO Auto-generated method stub super.caseADasmapDataAssignPhrase(node); }  @Override public void caseAObjectDataAssignPhrase(AObjectDataAssignPhrase node) { // {object} object l_brk object_attribute_list r_brk ObjectTypeVariable.create(context.codeGenerator, lhs, node.getObjectAttributeList()); }  @Override public void caseAArgDataAssignPhrase(AArgDataAssignPhrase node) { // {arg} argument assignArgument(lhs); }  @Override public void caseACphrDataAssignPhrase(ACphrDataAssignPhrase node) { // {cphr} call_phrase assignPhrase(lhs, node.getCallPhrase()); }  @Override public void caseANewobjDataAssignPhrase(ANewobjDataAssignPhrase node) { // {newobj} new_object_phrase lhs.assign(context, node.getNewObjectPhrase()); }  @Override public void caseAExprDataAssignPhrase(AExprDataAssignPhrase node) { // {expr} expr lhs.assign(context, node.getExpr()); } }); } "	0	0	0	0	0	1
"@Test public void testDrawLineLabelsVerticalLeftRotated() throws Exception { final BufferedImage bufferedImage = new BufferedImage(80, 180, BufferedImage.TYPE_4BYTE_ABGR); final Graphics2D graphics2d = bufferedImage.createGraphics();  ScaleBarRenderSettings settings = getSettings(graphics2d, 1); settings.getParams().orientation = Orientation.VERTICAL_LABELS_LEFT.getLabel(); settings.getParams().labelRotation = 90; settings.getParams().getSize().width = 80; settings.getParams().getSize().height = 180; settings.setMaxSize(new Dimension(80, 180)); settings.setSize(ScalebarGraphic.getSize(settings.getParams(), settings, settings.getMaxLabelSize())); ScalebarDrawer drawer = Type.LINE.createDrawer(graphics2d, settings); drawer.draw();  new ImageSimilarity(getFile(""expected-scalebar-line-labels-left-rotated.png"")) .assertSimilarity(bufferedImage, 160); } "	0	0	0	0	0	1
"private String getDefaultNewlineCharacterTwice() { String newline = TextUtilities.determineLineDelimiter(String.valueOf(unit.getContents()), ""\n""); return newline + newline; } "	0	0	0	0	0	1
private void registerGeofences(final Location location) { final List<GeofencingRequest> requests = getGeofencingRequests(location); if (requests.isEmpty()) { onGeofencesRemoved(location); return; } try { for (final GeofencingRequest request : requests) { LocationServices.GeofencingApi .addGeofences( play.getClient(), request, GeofenceReceiver.getGeofencePendingIntent(context)) .setResultCallback(new ResultCallback<Status>() { @Override public void onResult(@NonNull Status status) { if (status.isSuccess()) { onGeofencesAdded(location, request.getGeofences(), request.getInitialTrigger()); } else { onGeofencesFailed(null, status.getStatusCode()); } } }); } } catch (SecurityException ex) { onGeofencesFailed(ex, 0); } } 	0	0	0	0	0	1
public static void initStore(IPreferenceStore sstore, IPreferenceStore dstore) {  String strkeys[] = { PreferenceConstants.PREF_MODEL_CHECKER, PreferenceConstants.PREF_SOLVER }; for (String key : strkeys) { initString(sstore, dstore, key); }  String boolkeys[] = { PreferenceConstants.PREF_BOUNDED_MODEL_CHECKING, PreferenceConstants.PREF_INVARIANT_GENERATION, PreferenceConstants.PREF_K_INDUCTION, PreferenceConstants.PREF_INDUCTIVE_COUNTEREXAMPLES, PreferenceConstants.PREF_SMOOTH_COUNTEREXAMPLES, PreferenceConstants.PREF_DEBUG, PreferenceConstants.PREF_SPEAR_PRINT_FINAL_LUSTRE, PreferenceConstants.PREF_SPEAR_RECURSIVE_GRAPH, PreferenceConstants.PREF_SPEAR_WARN_ON_UNUSED_VARS, PreferenceConstants.PREF_SPEAR_ENABLE_IVC_ON_ENTAILMENT }; for (String key : boolkeys) { initBool(sstore, dstore, key); }  String intkeys[] = { PreferenceConstants.PREF_PDR_MAX, PreferenceConstants.PREF_DEPTH, PreferenceConstants.PREF_SPEAR_CONSISTENCY_DEPTH }; for (String key : intkeys) { initInt(sstore, dstore, key); } } 	0	0	0	0	0	1
static String edit(int taskID, ProtoTask toEditTask) { toDoList.edit(taskID, toEditTask); String editedTaskDetails = toDoList.displayID(taskID); return String.format(RETURN_MESSAGE_FOR_EDIT, editedTaskDetails); } 	0	0	0	0	0	1
void add(Task task) { taskList.add(task); } 	0	0	0	0	0	1
"public static XmlElement getBaseColumnListElement(IntrospectedTable introspectedTable) { XmlElement answer = new XmlElement(""include""); //$NON-NLS-1$ answer.addAttribute(new Attribute(""refid"", //$NON-NLS-1$ introspectedTable.getBaseColumnListId())); return answer; } "	0	0	0	0	0	1
"@Override public boolean onQueryTextSubmit(String query) {   MenuItem menuItem = menuFinal.findItem(R.id.search); menuItem.collapseActionView();  List<Artist> artistsBySearch=new ArrayList<Artist>(); for(Artist artist:artists) { if (artist.getNickname().contains(query)) { artistsBySearch.add(artist); } } listItem.clear();  for (int i = 0; i < artistsBySearch.size(); i++) { HashMap<String, Object> map = new HashMap<String, Object>();  //  map.put(""imageView"", artistsBySearch.get(i).getImage());  map.put(""textViewName"", artistsBySearch.get(i).getNickname()); map.put(""textViewDesc"", artistsBySearch.get(i).getDesc()); map.put(""textViewArticleCount"", artistsBySearch.get(i).getArticle_count()); map.put(""textViewFollowerCount"", artistsBySearch.get(i).getFollower_count()); map.put(""imageViewFollowed"", artistsBySearch.get(i).getFollowed()); map.put(""id"", artistsBySearch.get(i).getId());  listItem.add(map); } adapter.notifyDataSetChanged();  //                LinearLayout layout = (LinearLayout) findViewById(R.id.layoutCover); //                layout.setVisibility(View.GONE); return true; } "	0	0	0	0	0	1
"@Override public boolean receiveEvent(Event event) { if (!isActivated()) { return handleInit(event); } if (event.isType(IKEA_MESSAGE) && event.getAttribute(""Direction"").equals(""Out"")) { sendCoapsMessage(event.getAttribute(IKEA_RESOURCE), event.getAttribute(IKEA_METHOD), event.getAttribute(IKEA_BODY), event.getAttribute(IKEA_ID)); return true; } else if (event.isType(""ReportItems"")) { reportNodes(); } else if (event.isType(MDNS_CREATION_MESSAGE) && event.getAttribute(MDNSScanner.MDNS_LOCATION).equals(address)) { setAddress(event.getAttribute(MDNSScanner.MDNS_LOCATION)); return true; } return false; } "	0	0	0	0	0	1
"@POST @Path(""/mepin/response"") @Consumes(""application/x-www-form-urlencoded"") public Response mepinConfirm(MultivaluedMap<String, String> multivaluedMap) throws SQLException {  String transactionId = multivaluedMap.getFirst(""transaction_id""); log.info(""MePIN transactionID : "" + transactionId);  //        MePinStatusRequest mePinStatus = new MePinStatusRequest(transactionId); //        FutureTask<String> futureTask = new FutureTask<String>(mePinStatus); //        ExecutorService executor = Executors.newFixedThreadPool(1); //        executor.execute(futureTask);  MobileConnectConfig.MePinConfig mePinConfig = configurationService.getDataHolder().getMobileConnectConfig().getMePinConfig(); String username = mePinConfig.getUsername(); String password = mePinConfig.getPassword(); String authEndPoint = mePinConfig.getAuthEndPoint();  String authHeader = username + "":"" + password; HttpPost httpPost = new HttpPost(authEndPoint);  try { String encoding = Base64.getEncoder().encodeToString(authHeader.getBytes(""utf-8""));  SSLContext sslContext = SSLContext.getInstance(""SSL"");  sslContext.init(null, new TrustManager[]{new X509TrustManager() { public X509Certificate[] getAcceptedIssuers() { System.out.println(""getAcceptedIssuers =============""); return null; }  public void checkClientTrusted(X509Certificate[] certs, String authType) { System.out.println(""checkClientTrusted =============""); }  public void checkServerTrusted(X509Certificate[] certs, String authType) { System.out.println(""checkServerTrusted =============""); } }}, new SecureRandom());  SSLSocketFactory sf = new SSLSocketFactory(sslContext); sf.setHostnameVerifier(new X509HostnameVerifier() { public boolean verify(String hostname, SSLSession session) { return true; }  public void verify(String host, String[] cns, String[] subjectAlts) throws SSLException { }  public void verify(String host, X509Certificate cert) throws SSLException { }  public void verify(String host, SSLSocket ssl) throws IOException { } });   Scheme httpsScheme = new Scheme(""https"", 443, sf); SchemeRegistry schemeRegistry = new SchemeRegistry(); schemeRegistry.register(httpsScheme);  ClientConnectionManager cm = new SingleClientConnManager(schemeRegistry); HttpClient httpClient = new DefaultHttpClient(cm);  httpPost.setHeader(""Authorization"", ""Basic "" + encoding); List<NameValuePair> params = new ArrayList<>();  MePinTransactionStatusRequest mePinTransactionStatusRequest = new MePinTransactionStatusRequest(); mePinTransactionStatusRequest.setAction(""transactions/get""); //            mePinTransactionStatusRequest.setAppId(""bcb54836a5a71b698844e8c1923f8a42""); mePinTransactionStatusRequest.setAppId(""5497e675-ecb8-45e2-83c7-a9b12d3f290e""); mePinTransactionStatusRequest.setTransactionId(transactionId);  String jsonData = new Gson().toJson(mePinTransactionStatusRequest);  params.add(new BasicNameValuePair(""mepin_data"", jsonData));  httpPost.setEntity(new UrlEncodedFormEntity(params));  log.info(""yyyy : "" + jsonData);  HttpResponse transactionStatusResponse = httpClient.execute(httpPost);  BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(transactionStatusResponse.getEntity().getContent()));  StringBuilder transactionStatusResult = new StringBuilder(); String line; while ((line = bufferedReader.readLine()) != null) { transactionStatusResult.append(line); }  log.info(""xxxxxxxxxx "" + transactionStatusResult.toString()); bufferedReader.close();  MePinTransactionStatusResponse mePinTransactionStatusResponse = new Gson().fromJson(transactionStatusResult.toString(), MePinTransactionStatusResponse.class);  String sessionId = DbUtil.getSessionId(transactionId);  if(""Completed"".equalsIgnoreCase(mePinTransactionStatusResponse.getStatus())){ DbUtil.updateRegistrationStatus(sessionId, ""APPROVED""); }else { DbUtil.updateRegistrationStatus(sessionId, ""EXPIRED""); }  } catch (KeyManagementException e) { log.error(""Error occurred"", e); } catch (UnsupportedEncodingException e) { log.error(""Error occurred"", e); } catch (ClientProtocolException e) { log.error(""Error occurred"", e); } catch (IOException e) { log.error(""Error occurred"", e); } catch (AuthenticatorException e) { log.error(""Error occurred"", e); } catch (NoSuchAlgorithmException e) { log.error(""Error occurred"", e); }   return Response.status(200).build(); } "	0	0	0	0	0	1
"public double getValuePrecisePosition(double value, boolean relative) { if (dirty) updateTick(); // coerce to range // value = value < min ? min : (value > max ? max : value); Range r = getLocalRange(); double min = r.getLower(); double max = r.getUpper(); double pixelsToStart = 0; if (logScaleEnabled) { if (value <= 0) value = min; // throw new IllegalArgumentException( // ""Invalid value: value must be greater than 0""); pixelsToStart = ((Math.log10(value) - Math.log10(min)) / (Math.log10(max) - Math.log10(min)) * ((double) length - 2d * margin)) + margin; } else pixelsToStart = ((value - min) / (max - min) * ((double) length - 2d * margin)) + margin;  if (relative) { if (orientation == Orientation.HORIZONTAL) return pixelsToStart; else return length - pixelsToStart; } else { if (orientation == Orientation.HORIZONTAL) return pixelsToStart + bounds.x; else return length - pixelsToStart + bounds.y; } } "	0	0	0	0	0	1
private void _generateADept(UniversityState univState, int index) { univState.getWriter().startSection(Ontology.CS_C_DEPT, univState.getId(Ontology.CS_C_DEPT, index)); univState.getWriter().addProperty(Ontology.CS_P_NAME, univState.getRelativeName(Ontology.CS_C_DEPT, index), false); univState.getWriter().addProperty(Ontology.CS_P_SUBORGANIZATIONOF, Ontology.CS_C_UNIV, univState.getId(Ontology.CS_C_UNIV, univState.getInstances()[Ontology.CS_C_UNIV].count - 1)); univState.getWriter().endSection(Ontology.CS_C_DEPT); } 	0	0	0	0	0	1
@Override public void onClick(View v) { EMChatManager.getInstance().logout(new EMCallBack() {  @Override public void onSuccess() { getActivity().finish(); startActivity(new Intent(getActivity(), LoginActivity.class)); }  @Override public void onProgress(int progress, String status) {  }  @Override public void onError(int code, String error) {  } }); } 	0	0	0	0	0	1
"protected void startSnappyLead() { File log = null; try { ProcessBuilder pb = new ProcessBuilder(snappyTest.getScriptLocation(""snappy-leads.sh""), ""-bg"", ""start""); log = new File("".""); String dest = log.getCanonicalPath() + File.separator + ""snappyLeaderSystem.log""; File logFile = new File(dest); snappyTest.executeProcess(pb, logFile); } catch (IOException e) { String s = ""problem occurred while retriving logFile path "" + log; throw new TestException(s, e); } } "	0	0	0	0	0	1
public PKIClient getClient() { return client; } 	0	0	0	0	0	1
public boolean withdraw(float amount) { if (getState() == State.OPEN && amount > 0.0f) { balance = balance - amount; numWithdraws++; if (numWithdraws > 3) balance = balance - 1.0f; // KG BVA: should be < 0 if (balance <= 0.0f) { setState(State.OVERDRAWN); } return true; } return false; } 	0	0	0	0	0	1
"private int countParenthesisBalance(String rest) { boolean inSingleQuote = false; boolean inDoubleQuote = false; final char[] chars = rest.toCharArray(); int balance = 0; for (char c : chars) { if (c == '""' && !inSingleQuote) { inDoubleQuote = !inDoubleQuote; } else if (c == '\'' && !inDoubleQuote) { inSingleQuote = !inSingleQuote; } else if (c == '(' && !inSingleQuote && !inDoubleQuote) { balance++; } else if (c == ')' && !inSingleQuote && !inDoubleQuote) { balance--; } } return balance; } "	0	0	0	0	0	1
@Override public void toggle() { if (closePosition < getMeasuredHeight()) { collapse(); } else { expand(); } } 	0	0	0	0	0	1
"public void configure() {  LOGGER.debug(""Starting Jetty server..."");  // define and add the jetty component restConfiguration().component(""jetty"") .host(""{{rest.jetty.host}}"") .port(""{{rest.jetty.port}}"") .bindingMode(RestBindingMode.auto);  LOGGER.debug(""Jetty server started succesfully."");  // DEFINE BEHAVIOR ON JSON SCHEMA PROBLEMS onException(UnrecognizedPropertyException.class).handled(true) .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(400)) .setHeader(Exchange.CONTENT_TYPE, constant(""text/plain"")) .setBody().constant(""Invalid json data"");  // DEFINE BEHAVIOR ON DATA MODEL PROBLEMS onException(DataModelException.class).handled(true) .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(400)) .setHeader(Exchange.CONTENT_TYPE, constant(""text/plain"")) .setBody().simple(""Invalid data values:\n${exception.message}"");  rest(""/services/rest"").put(""/simpleorder"").consumes(""application/json"") .type(SimpleOrder.class).produces(""text/html"") .to(""direct:order_put"");  from(""direct:order_put"") .bean(orderProcessBean) .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(201)) .to(""seda:confirmation-email.queue"") .end(); } "	0	0	0	0	0	1
"@Test(expected = ValidationException.class) public void noNameThrowsAValidationException() throws Exception { testObject.processInput(new String[] {}, new String[] {}, null, ""local"", ""wibble"", ""gradle""); } "	0	0	0	0	0	1
@Override public void init() { subscribeTo(PuppetGrammar.HASH); } 	0	0	0	0	0	1
public InetSocketAddress getSocketAddress(String key, int defaultPort, InetSocketAddress defaultValue) { if (!containsKey(key)) { return defaultValue; }  return SocketAddressUtil.parse(get(key), defaultPort); } 	0	0	0	0	0	1
public InetAddress getInetAddress(String key) throws UnknownHostException { return InetAddress.getByName(get(key)); } 	0	0	0	0	0	1
public Builder media(String media) { this.media = media; return this; } 	0	0	0	0	0	1
"public void switchEpisodesToSeasons() {  getFragmentManager().beginTransaction() .setCustomAnimations(R.animator.slide_in_left, R.animator.slide_out_right, 0, 0) .replace(R.id.fragmentContainerShow, new SeasonsFragment()) .commit();  visibleFragment = ""seasons""; } "	0	0	0	0	0	1
@Override public float vectorToAngle(Vector2 vector) { return (float)Math.atan2(-vector.x, vector.y); } 	0	0	0	0	0	1
public String replaceAll(String text, String pattern, String changeTo) { while (true) { String text2 = replace(text, pattern, changeTo, null, false); if (text2.equals(text)) break; text = text2; } return text; } 	0	0	0	0	0	1
"@Override public T call() throws Exception { Timer dest = new Timer(""destination.""+method.getName()); if (prepareIds && entityIdStore != null) entityIdStore.copyFromThread(parentThreadId); try { return (T) method.invoke(lightblueDAO, values); } finally { dest.complete(); } } "	0	0	0	0	0	1
@Override protected void applyEntityAttributes() { super.applyEntityAttributes(); this.getAttributeMap().registerAttribute(SharedMonsterAttributes.attackDamage); } 	0	0	0	0	0	1
public int getTotalPages() { if (total % pageSize != 0) return (total / pageSize) + 1; else return total / pageSize; } 	0	0	0	0	0	1
@Override public int getCount() { return photoUrlsCached.size(); } 	0	0	0	0	0	1
public View.OnTouchListener getDragToOpenListener() { if (mDragListener == null) { mDragListener = new ListPopupWindow.ForwardingListener(mAnchor) { @Override protected boolean onForwardingStarted() { show(); return true; }  @Override protected boolean onForwardingStopped() { dismiss(); return true; }  @Override public ListPopupWindow getPopup() { // This will be null until show() is called. return mPopup.getPopup(); } }; }  return mDragListener; } 	0	0	0	0	0	1
"@Test public void testGetBooksForLanguage() throws Exception {  FireLanguage fireLanguage = new FireLanguage(""English"", ""EN"", true, ""123"");  FireBookDetails fireBookDetails = new FireBookDetails(""Book Title"", ""url"", ""cover_url"", true, ""test description"", fireLanguage); ArrayList<FireBookDetails> bookDetails = new ArrayList<>(); bookDetails.add(fireBookDetails); doReturn(Observable.<List<FireBookDetails>>just(bookDetails)).when(bookDatabase).getBooks();  TestSubscriber<List<FireBookDetails>> testSubscriber = new TestSubscriber<>(); bookService.getBooksForLanguage(fireLanguage).subscribe(testSubscriber);  verify(bookDatabase).getBooks(); testSubscriber.awaitTerminalEvent(); testSubscriber.assertNoErrors();  final List<List<FireBookDetails>> result = testSubscriber.getOnNextEvents(); assertEquals(""Book Title"", result.get(0).get(0).getBookTitle()); } "	0	0	0	0	0	1
"public void editTask(View view){ RelativeLayout buttonParent = (RelativeLayout)view.getParent(); LinearLayout viewParent = (LinearLayout) buttonParent.getParent(); RelativeLayout nameParent = (RelativeLayout)viewParent.getChildAt(0); final TextView taskName = (TextView) nameParent.getChildAt(0); TextView taskScore = (TextView) viewParent.getChildAt(1); final Dialog editTask = new Dialog(MainMenuController.this); editTask.setTitle(getResources().getString(R.string.edit_task_title)); editTask.setContentView(R.layout.dialog_newtask); final EditText eTaskName = (EditText) editTask.findViewById(R.id.description_edittext); final EditText eTaskScore = (EditText) editTask.findViewById(R.id.points_edittext); eTaskName.setText(taskName.getText()); eTaskScore.setText(taskScore.getText().toString().substring(7)); Button submit = (Button) editTask.findViewById(R.id.submit_btn); Button cancel = (Button) editTask.findViewById(R.id.cancelBtn_newTask); cancel.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { editTask.dismiss(); } }); submit.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { final String oldTaskName = taskName.getText().toString(); final String newTaskName = eTaskName.getText().toString(); final String taskScore = eTaskScore.getText().toString(); if (newTaskName.isEmpty() || taskScore.isEmpty()) { Toast.makeText(getApplicationContext(), getResources().getString(R.string.all_fields_filled), Toast.LENGTH_SHORT).show(); }else{ HashMap<String, String> params = new HashMap<String, String>(); params.put(""oldTaskName"", oldTaskName); params.put(""newTaskName"", newTaskName); params.put(""taskScore"", taskScore); params.put(""flatPIN"",""123"");//TODO: GET FLAT PIN FROM USER MODEL ServerRequest sr = new ServerRequest(); JSONObject json = sr.getJSON(HttpType.EDITTASK, getIpAddress() + "":8080/editTask"", params);  if (json != null) { try { Toast.makeText(getApplication(), json.getString(""response""), Toast.LENGTH_LONG).show(); if (json.getBoolean(""res"")) { initTasksTab(); } } catch (JSONException e) { e.printStackTrace(); } } } } });  editTask.show(); } "	0	0	0	0	0	1
"@Test public void testPingPongMessage() throws InterruptedException, SSLException, URISyntaxException { primaryClient.handhshake(); byte[] bytes = {6, 7, 8, 9, 10, 11}; ByteBuffer bufferSent = ByteBuffer.wrap(bytes); primaryClient.sendPing(bufferSent); Thread.sleep(threadSleepTime); ByteBuffer bufferReceived = primaryClient.getBufferReceived(); assertEquals(""Didn't receive the correct pong."", bufferReceived, bufferSent); logger.info(""Receiving a pong message is completed.""); } "	0	0	0	0	0	1
"public void startMainSceneExecutor() { //logger.info(""Simulation's startSimExecutor() is on "" + Thread.currentThread().getName() + "" Thread""); // INFO: Simulation's startSimExecutor() is on JavaFX-Launcher Thread mainSceneExecutor = Executors.newSingleThreadExecutor(); } "	0	0	0	0	0	1
"@POST @Path(""me/password"") @RolesAllowed({""ROLE_ADMIN"", ""ROLE_USER""}) public Response changePassword(HttpServletRequest request, Request passwordRequest) {  checkPasswordFormat(passwordRequest.getNewPassword()); checkNotNull(passwordRequest.getOldPassword());  // Only allow changing your own password Long id = (Long) request.getAttribute(OAuth2Filter.NAME_USER_ID); userService.changePassword(id, passwordRequest.oldPassword, passwordRequest.getNewPassword());  return Response.noContent().build();  } "	0	0	0	0	0	1
private Map<String, JsonObject> getProviderFromFile(int resId) { InputStream inputStream = getResources().openRawResource(resId); BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream)); return gson.fromJson(reader, (new TypeToken<Map<String, JsonObject>>() { }).getType()); } 	0	0	0	0	0	1
private void onCreateSurface(int glSurfaceTextureId) { if ( mSurfaceTexture == null ) { //attach the texture to a surface. //It's a clue class for rendering an android view to gl level mSurfaceTexture = new SurfaceTexture(glSurfaceTextureId); mSurfaceTexture.detachFromGLContext(); mSurfaceTexture.setDefaultBufferSize(getWidth(), getHeight()); mSurface = new Surface(mSurfaceTexture); if (mOnSurfaceReadyListener != null) mOnSurfaceReadyListener.onSurfaceReady(mSurface); } } 	0	0	0	0	0	1
"private void initPorts() { List<Port> ports = Port.getAll(); List<String> portsNames = new ArrayList<>(); if (ports != null) { for (Port port : ports) portsNames.add(port.getPortName()); } portsNames.add(0, ""Port Name""); portSpinnerItems = new String[portsNames.size()]; portsNames.toArray(portSpinnerItems); } "	0	0	0	0	0	1
"@GET @Path(""/"") @Produces(MediaType.TEXT_HTML) public Response services() { String rendered = soyService.renderPlugin(pluginRegion, Optional.of(new ConfigPluginRegionInput("""", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """"))); return Response.ok(rendered).build(); } "	0	0	0	0	0	1
"public Result updateParticipant(String email) { UserSession session = getAuthenticatedSession(RESEARCHER); Study study = studyService.getStudy(session.getStudyIdentifier()); if (isBlank(email)) { throw new BadRequestException(EMAIL_REQUIRED); } StudyParticipant participant = parseJson(request(), StudyParticipant.class); // Just stop right here because something is wrong if (participant.getEmail() != null && !participant.getEmail().equals(email)) { throw new BadRequestException(""Email in JSON does not match URI of request""); } participantService.updateParticipant(study, email, participant);  return okResult(""Participant updated.""); } "	0	0	0	0	0	1
public Flash error(String value) { return add(ERRORS, value); } 	0	0	0	0	0	1
public void setVisibleContractDate(boolean visibleContractDate) { mIsVisibleContractDate = visibleContractDate; notifyPropertyChanged(BR.visibleContractDate); } 	0	0	0	0	0	1
public void setLedgersTimestamps(List<Long> ledgersTimestamps) { this.ledgersTimestamps = ledgersTimestamps; } 	0	0	0	0	0	1
"public static void main(String[] args) { addUser(""FLEM"", ""frem rogers"", ""passy"", null, null); } "	0	0	0	0	0	1
@Override public BlockWeight getWeight() {  return BlockWeight.LIGHT; } 	0	0	0	0	0	1
"private void testConnectivity() throws ConnectionException { try { getService().getClassifiers().execute(); } catch (UnauthorizedException | ForbiddenException | IllegalArgumentException e) { throw new ConnectionException(ConnectionExceptionCode.INCORRECT_CREDENTIALS, """", e.getMessage(), e); } } "	0	0	0	0	0	1
"@Test public void testPackOptimalParameters() { StatefulRNG rng = new StatefulRNG(new LightRNG(0xAAAA2D2)); DungeonGenerator dungeonGenerator = new DungeonGenerator(240, 240, rng); dungeonGenerator.addDoors(15, true); dungeonGenerator.addWater(25); dungeonGenerator.addTraps(2); char[][] map = dungeonGenerator.generate(TilesetType.DEFAULT_DUNGEON);  FOV fov = new FOV(); double[][] resMap = DungeonUtility.generateResistances(map), seen; short[] packed; boolean[][] unpacked; int ramPacked = 0, ramBoolean = 0, ramDouble = 0; Coord viewer; for (int t = 0; t < 100; t++) { viewer = dungeonGenerator.utility.randomFloor(map); seen = fov.calculateFOV(resMap, viewer.x, viewer.y, 8, Radius.DIAMOND); packed = CoordPacker.pack(seen);  unpacked = CoordPacker.unpack(packed, seen.length, seen[0].length); for (int i = 0; i < unpacked.length ; i++) { for (int j = 0; j < unpacked[i].length; j++) { assertTrue((seen[i][j] > 0.0) == unpacked[i][j]); } } ramPacked += arrayMemoryUsage(packed.length, 2); ramBoolean += arrayMemoryUsage2D(seen.length, seen[0].length, 1); ramDouble += arrayMemoryUsage2D(seen.length, seen[0].length, 8); } //assertEquals(""Packed shorts"", 18, packed.length); //assertEquals(""Unpacked doubles: "", 57600, seen.length * seen[0].length); System.out.println(""Average Memory used by packed short[] (Appropriate):"" + ramPacked / 100.0 + "" bytes""); System.out.println(""Average Memory used by boolean[][] (Appropriate):"" + ramBoolean / 100.0 + "" bytes""); System.out.println(""Average Memory used by original double[][] (Appropriate):"" + ramDouble / 100.0 + "" bytes""); System.out.println(""Average Compression, short[] vs. boolean[][] (Appropriate):"" + 100.0 * ramPacked / ramBoolean + ""%""); System.out.println(""Average Compression, short[] vs. double[][] (Appropriate):"" + 100.0 * ramPacked / ramDouble + ""%""); System.out.println(""FOV Map stored for every cell, booleans, 240x240: "" + arrayMemoryUsage2D(240, 240, arrayMemoryUsage2D(240, 240, 1))); } "	0	0	0	0	0	1
"public void createIssue(String summary, String description, long projectID, String remediationItem, String remediationId, String jiraGroup, String level, String userName) throws Exception {  IssueService issueService = ComponentAccessor.getIssueService(); //Validation that the project exists and are valid Project project = ComponentAccessor.getProjectManager().getProjectObj( projectID ); if( project == null ) { throw new Exception(""CI Plugin: this project does not exists ""+projectID); }  screenConfigService.assigValuesToVariables(); if( !screenConfigService.hasIssueTypeConfigurated(project) ) { throw new Exception(""CI Plugin: this project is not configured properly :""+projectID); }  User user =  getUserByName(userName); //Validation the user exist if( user == null ) { throw new Exception(""CI Plugin: the user does not exist or is inactive :""+userName); }  //Get values of customs and issue type configured for cloud insight IssueType ciIssueType = screenConfigService.getIssueTypeCI(); CustomField groupCustomField = screenConfigService.getGroupCustomField(); CustomField remediationItemCustomField = screenConfigService.getRemediationItemCustomField(); CustomField remediationIdCustomField =screenConfigService.getRemediationIdCustomField();  //setting values IssueInputParameters issueInputParameters = issueService.newIssueInputParameters();  issueInputParameters.setSummary( summary ); issueInputParameters.setDescription( description ); issueInputParameters.setProjectId( project.getId() ); issueInputParameters.setIssueTypeId( ciIssueType.getId() ); issueInputParameters.setPriorityId( getPriorityId( level ) ); issueInputParameters.addCustomFieldValue( remediationItemCustomField.getId(), remediationItem); issueInputParameters.addCustomFieldValue( remediationIdCustomField.getId(), remediationId); issueInputParameters.addCustomFieldValue( groupCustomField.getId(), jiraGroup); issueInputParameters.setAssigneeId( project.getLeadUserName() ); //Perform the validation IssueService.CreateValidationResult result = issueService.validateCreate( user, issueInputParameters);   if (result.getErrorCollection().hasAnyErrors()) {  Map<String, String> errors = result.getErrorCollection().getErrors(); String errorDetails="""";  for (String key: errors.keySet()) { errorDetails += ""CI Plugin: Error Field, ""+key + "" - "" + errors.get(key)+""\n""; }  throw new Exception(errorDetails);  } else { issueService.create( user, result); }  } "	0	0	0	0	0	1
"protected void decodeMessageBody() { if (!decodedBody) { decodedBody = true;  try { if (null == ctx.getOperation()) { MALMessageHeader header = ctx.getHeader(); MALArea area = MALContextFactory.lookupArea(header.getServiceArea(), header.getAreaVersion()); if (null != area) { MALService service = area.getServiceByNumber(header.getService()); if (null != service) { ctx.setOperation(service.getOperationByNumber(header.getOperation())); } } }  if (ctx.getHeader().getIsErrorMessage()) { bodyPartCount = 2; } else { bodyPartCount = ctx.getOperation().getOperationStage(ctx.getHeader().getInteractionStage()).getElementShortForms().length; } GENTransport.LOGGER.log(Level.FINE, ""GEN Message decoding body ... pc ({0})"", bodyPartCount); messageParts = new Object[bodyPartCount];  if (bodyPartCount == 1) { Object sf = ctx.getOperation().getOperationStage(ctx.getHeader().getInteractionStage()).getElementShortForms()[0]; messageParts[0] = decodeBodyPart(encBodyElements, ctx, sf); } else if (bodyPartCount > 1) { MALElementInputStream benc = encBodyElements; if (wrappedBodyParts) { GENTransport.LOGGER.fine(""GEN Message decoding body wrapper""); final Blob body = (Blob) encBodyElements.readElement(new Blob(), null); final ByteArrayInputStream bais = new ByteArrayInputStream(body.getValue()); benc = encFactory.createInputStream(bais); }  for (int i = 0; i < bodyPartCount; i++) { GENTransport.LOGGER.log(Level.FINE, ""GEN Message decoding body part : {0}"", i); Object sf = null; if (!ctx.getHeader().getIsErrorMessage()) { ctx.setBodyElementIndex(i); sf = ctx.getOperation().getOperationStage(ctx.getHeader().getInteractionStage()).getElementShortForms()[i]; } messageParts[i] = decodeBodyPart(benc, ctx, sf); } }  GENTransport.LOGGER.fine(""GEN Message decoded body""); } catch (MALException ex) { GENTransport.LOGGER.log(Level.WARNING, ""GEN Message body ERROR on decode : {0}"", ex); } } } "	0	0	0	0	0	1
"@Override public void addPages() { super.addPages(); if (page == null) { page= new NewUnitWizardPage(""New Ceylon Unit"", ""Create a new Ceylon compilation unit that will contain Ceylon source."", """", CEYLON_NEW_FILE); page.init(selection); } addPage(page); } "	0	0	0	0	0	1
"public List<FormListing> getTableFormsSynchronized( Form ... formsToGetTableFormsForParam) {  this.messageHandler.clear();  if(formsToGetTableFormsForParam == null) { return null; }  if(formsToGetTableFormsForParam.length == 0) { return this.messageHandler.getReturnValue(); }  //Send all the messages... List<String> echoMessagesExpected = new ArrayList(); for(Form formToSend : formsToGetTableFormsForParam) { if(formToSend == null) { throw new FluidClientException( ""Cannot provide 'null' for Form."", FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR); } else if(formToSend.getEcho() == null || formToSend.getEcho().isEmpty()) { throw new FluidClientException(""Echo needs to be set to bind to return."", FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR); } else if(echoMessagesExpected.contains(formToSend.getEcho())) { throw new FluidClientException(""Echo message '""+formToSend.getEcho() +""' already added."", FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR); }  echoMessagesExpected.add(formToSend.getEcho());  //Send the actual message... this.sendMessage(formToSend); }  long timeoutTime = (System.currentTimeMillis() + this.getTimeoutInMillis());  //Wait for all the results... while(true) { if(this.messageHandler.hasErrorOccurred()) { List<Error> listOfErrors = this.messageHandler.getErrors(); Error firstError = listOfErrors.get(0);  throw new FluidClientException( firstError.getErrorMessage(), firstError.getErrorCode()); } else if(this.messageHandler.isConnectionClosed() || this.messageHandler.doReturnValueEchoMessageContainAll(echoMessagesExpected)) { return this.messageHandler.getReturnValue(); } // else { try { Thread.sleep(50); } // catch (InterruptedException e) {  throw new FluidClientException( ""Thread interrupted. ""+e.getMessage(), e,FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR); } }  long now = System.currentTimeMillis(); //Timeout... if(now > timeoutTime) { throw new FluidClientException( ""SQLUtil-WebSocket-GetTableRecordForms: Timeout while waiting for all return data. There were '"" +this.messageHandler.getReturnValue().size() +""' items after a Timeout of ""+( TimeUnit.MILLISECONDS.toSeconds(timeoutTime))+"" seconds."" ,FluidClientException.ErrorCode.IO_ERROR); } } } "	0	0	0	0	0	1
"@Override public void showGameOverDialog() { new AlertDialog.Builder(this) .setIcon(R.drawable.ic_hangman_dead) .setTitle(""Game Over"") .setMessage(getResources().getString(R.string.txt_bugger, mCurrentVocabTerm.getPhrase())) .setOnDismissListener(new DialogInterface.OnDismissListener() { @Override public void onDismiss(DialogInterface dialog) { finish(); } }) .setPositiveButton(getResources().getString(R.string.btn_share_score_with_mate), new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { mPresenter.shareClockedGameAction(); } }) .show(); } "	0	0	0	0	0	1
private static boolean compareParameterTypes(Type[] ts, Type[] _ts) { for (int i = 0; i < ts.length; i++) { if (!ts[i].equals(_ts[i])) { if (!compareParameterTypes(ts[i], _ts[i])) { return false; } } } return true; } 	0	0	0	0	0	1
"@Test public void testDirectorArgs() { File dest = new File(""dest""); String actual = testData().directorApp(dest, ""profile"").completeState(); String expected = StringPrinter.buildStringFromLines( ""-application org.eclipse.equinox.p2.director"", ""-clean"", ""-consolelog"", ""-repository http://p2repo"", ""-metadataRepository http://metadatarepo"", ""-artifactRepository http://artifactrepo"", ""-installIU com.diffplug.iu,com.diffplug.otheriu/1.0.0"", ""-profile profile"", ""-destination file://"" + dest.getAbsolutePath()); Assert.assertEquals(expected, actual); } "	0	0	0	0	0	1
"protected static RequestPayload toObjectsRequestPayload( final String requestName, final String payloadName, final String payloadType, final boolean optional) { final String assignmentCode = ""if "" + payloadName + "" is not None:\n"" + pythonIndent(3) + ""if "" + payloadName + "" not isinstance("" + payloadName + "", "" + payloadType + ""):\n"" + pythonIndent(4) + ""raise TypeError('"" + requestName + "" should have request payload of type: "" + payloadType + ""')\n"" + pythonIndent(3) + ""self.body = xmldom.tostring("" + payloadName + "".to_xml())""; return new RequestPayload(payloadName, assignmentCode, optional); } "	0	0	0	0	0	1
"public void updatePlates(){ int cellLength = 20; plates.forEach(plate ->{ plate.forEach(cellPoint -> {  int x = (int)cellPoint.getX(); int y = (int)cellPoint.getY();  PlanetCell cell = geosphere.waitForCellAt(x, y); Point cellVelocity = cell.getVelocity(); Point cellPos = cell.getGridPosition(); Point cellActPos = cell.getActualPosition();  cellActPos.add(cellVelocity);  Point adj = new Point(cellLength, cellLength); cellPos.add(adj);  if (cellVelocity.getX() > 0){ if (cellPos.getX() <= cellActPos.getX()){ System.out.println(""Move Cell""+cell+"" in the X direction by +1 cell""); cellActPos.set(cellPos); } }else if (cellVelocity.getX() < 0){ if (cellPos.getX() >= cellActPos.getX()){ System.out.println(""Move Cell""+cell+"" in the X direction by -1 cell""); } }  if (cellVelocity.getY() > 0){ if (cellPos.getY() <= cellActPos.getY()){ System.out.println(""Move Cell""+cell+"" in the Y direction by +1 cell""); } }else if (cellVelocity.getY() < 0){ if (cellPos.getY() >= cellActPos.getY()){ System.out.println(""Move Cell""+cell+"" in the Y direction by -1 cell""); } } geosphere.release(cell); }); System.out.println(""Plate Updated""); }); } "	0	0	0	0	0	1
"@Override public List<Metrics> extractData(final ResultSet resultSet) throws SQLException {  final List<Metrics> metricsList = new ArrayList<>(); while (resultSet.next()) { metricsList.add(new MetricsBuilder() .withHeight(resultSet.getDouble(""height"")) .withWeight(resultSet.getDouble(""weight"")) .withNationality(resultSet.getString(""nationality"")) .withPlace_of_birth(resultSet.getString(""place_of_birth"")) .withEducation(resultSet.getString(""education"")) .withUserId(resultSet.getLong(""userId"")) .build()); }  return metricsList; } "	0	0	0	0	0	1
private int storeItemStackInInv(IInventory inv, ItemStack item) { for (int index = 0; index < inv.getSizeInventory(); ++index) { if (inv.getStackInSlot(index) != null && inv.getStackInSlot(index).getItem() == item.getItem() && inv.getStackInSlot(index).isStackable() && inv.getStackInSlot(index).getCount() < inv.getStackInSlot(index).getMaxStackSize() && inv.getStackInSlot(index).getCount() < inv.getInventoryStackLimit() && (!inv.getStackInSlot(index).getHasSubtypes() || inv.getStackInSlot(index).getItemDamage() == item.getItemDamage())) { return index; } }  return -1; } 	0	0	0	0	0	1
public Class getType() { return type; } 	0	0	0	0	0	1
"@Override public void onArticleAction(Uri uri) { // TODO Auto-generated method stub Log.d(""MainActivity"", ""onArticleAction - method called with: -->"" + uri + ""<--""); } "	0	0	0	0	0	1
public Object getTechnologyOperationField(Long technologyOperationId, String fieldName) { Entity technologyOperation = dataDefinitionService.get(TechnologiesConstants.PLUGIN_IDENTIFIER, TechnologiesConstants.MODEL_TECHNOLOGY_OPERATION_COMPONENT).get(technologyOperationId);  if ((technologyOperation == null) || (technologyOperation.getField(fieldName) == null)) { return null; } else { return technologyOperation.getField(fieldName); } } 	0	0	0	0	0	1
"@Test public void testAllTemplate() throws Exception { doTestTemplateExpansion(""name"", ""(1 to 10)"", """"); } "	0	0	0	0	0	1
"Metadata analyse(TypeElement type) throws CannotGenerateCodeException { verifyType(type); PackageElement pkg = elements.getPackageOf(type); ImmutableSet<ExecutableElement> methods = methodsOn(type, elements); ImpliedClass generatedBuilder = new ImpliedClass(pkg, generatedBuilderSimpleName(type), type, elements); Optional<TypeElement> builder = tryFindBuilder(generatedBuilder, type); return new Metadata.Builder(elements) .setType(type) .setBuilder(builder.or(generatedBuilder)) .setBuilderFactory(builder.isPresent() ? BuilderFactory.from(builder.get()) : Optional.of(NO_ARGS_CONSTRUCTOR)) .setGeneratedBuilder(generatedBuilder) .setValueType(generatedBuilder.createNestedClass(""Value"")) .setPartialType(generatedBuilder.createNestedClass(""Partial"")) .setPropertyEnum(generatedBuilder.createNestedClass(""Property"")) .addAllUnderriddenMethods(findUnderriddenMethods(methods)) .setBuilderSerializable(shouldBuilderBeSerializable(builder)) .setGwtCompatible(isGwtCompatible(type)) .setGwtSerializable(isGwtSerializable(type)) .addAllProperties(findProperties(type, methods, builder).values()) .build(); } "	0	0	0	0	0	1
"private void updateObservations(final ContentProviderClient provider, SyncResult syncResult) throws RemoteException, InterruptedException, ExecutionException, TimeoutException { checkCancellation(""before requesting observations""); OpenMrsChartServer chartServer = new OpenMrsChartServer(App.getConnectionDetails()); // Get the charts asynchronously using volley. RequestFuture<JsonObservationsResponse> listFuture = RequestFuture.newFuture();  TimingLogger timingLogger = new TimingLogger(LOG.tag, ""obs update""); checkCancellation(""before updating observations""); String lastSyncToken = getLastSyncToken(provider, Contracts.Table.OBSERVATIONS); String newSyncToken = updateObservations( lastSyncToken, provider, syncResult, chartServer, listFuture, timingLogger); timingLogger.addSplit(""finished observation update""); // This is only safe transactionally if we can rely on the entire sync being transactional. storeSyncToken(provider, Contracts.Table.OBSERVATIONS, newSyncToken);  checkCancellation(""before deleting temporary observations""); // Remove all temporary observations now we have the real ones provider.delete(Observations.CONTENT_URI, Observations.TEMP_CACHE + ""!=0"", new String[0]); timingLogger.addSplit(""delete temp observations""); timingLogger.dumpToLog(); } "	0	0	0	0	0	1
public boolean hasWaterSource(World world, BlockPos pos) { return world.getBlockState(pos.add(0, -2, 0)) == Blocks.WATER.getDefaultState(); } 	0	0	0	0	0	1
"private void loadDataAtLevel(Object level, boolean fromSelector) throws VisADException, RemoteException {  Trace.call1(""PlanView.loadData""); if (loadedAny && (level != null) && level.equals(currentLevel)) { return; } getDataSelection().putProperty(""levelChanged"", true); //If we have no data or if its a slice then reset the data selection //to the new level and refetch data if ((workingGrid == null) || !GridUtil.isVolume(workingGrid)) { try { showWaitCursor(); //Just to make sure the DI has it //                getDataSelection().setLevel(level); //                getDataInstance().setDataSelection(getDataSelection()); if (loadedAny) { //                    getDataInstance().reInitialize(); } workingGrid = (FieldImpl) getGrid(getGridDataInstance()); if (workingGrid == null) { return; } } finally { showNormalCursor(); } } loadedAny    = true; currentLevel = level; //Trace.call1 (""PlanView.slice""); currentSlice = null; int  samplingMode = getSamplingModeValue(getDefaultSamplingMode()); Real realLevel    = getLevelReal(level); // NB: someday, someone needs to clean this block up without // breaking anything. if (GridUtil.isVolume(workingGrid)) {  // need to slice if (((level != null) && (currentLevels != null)) && hasLevel(level)) { samplingMode = Data.NEAREST_NEIGHBOR; } // more than one level if ((level != null) && ((currentLevels != null) && (currentLevels.length > 1))) { if (realLevel == null) { return; } // regular volume slice if (displayIs3D && !getMultipleIsTopography()) { currentSlice = GridUtil.sliceAtLevel(workingGrid, realLevel, samplingMode); } else {  // slice for 2D display or topography currentSlice = GridUtil.make2DGridFromSlice( GridUtil.sliceAtLevel( workingGrid, realLevel, samplingMode)); } if (levelsFromData == null) { levelsFromData = getGridDataInstance().getLevels(); setLevels(levelsFromData); } } else { // only one level?  - can we get here? //                System.out.println(""PlanViewControl: only one level?""); //                Trace.msg(""got here""); currentSlice = workingGrid; } } else {  // 2D grid or requested slice currentSlice = workingGrid; if (GridUtil.is3D(currentSlice) && ( !displayIs3D || getMultipleIsTopography() || getParameterIsTopography())) { currentSlice = GridUtil.make2DGridFromSlice(currentSlice); } }  getGridDisplayable().loadData(getSliceForDisplay(currentSlice)); //Trace.call2 (""PlanView.gridDisplayable.loadData""); if ((level == null) || (realLevel == null) || !displayIs3D) { return; } if (levelBox != null) { levelBox.setSelectedItem(getLabeledReal(level)); }  Real altitude = null; // we do the try/catch around this for 2D data instead of just // setting the level to null. try { altitude = GridUtil.getAltitude(currentSlice, realLevel); } catch (Exception ve) { altitude = null; }  if ((altitude != null) && !altitude.isMissing()) { EarthLocationTuple elt = new EarthLocationTuple(0, 0, altitude.getValue()); if ( !fromSelector) { lastZValue = earthToBox(elt)[2]; zSelector.setZValue(lastZValue); } if (fromSelector) { level = GridUtil.getLevel(currentSlice, realLevel); } }  setLevelReadoutLabel(""Current level: "" + formatLevel(level)); String dlTemplate = getDisplayListTemplate(); if (dlTemplate.contains(MACRO_LEVEL)) { updateLegendAndList(); } else { updateLegendLabel(); } Trace.call2(""PlanView.loadData"");  } "	0	0	0	0	0	1
"public static void main(String[] args) throws Exception {  JobConf conf=new JobConf(WordCountSortMain.class); conf.set(""mapreduce.ifile.readahead"", ""false""); conf.set(""mapreduce.output.textoutputformat.separator"", "":""); String Args[] = new GenericOptionsParser(conf, args).getRemainingArgs();  Job job_wc = Job.getInstance(conf); String dictPath = conf.get(""dict.path""); if(dictPath!=null) { URI dictUri = new URI(dictPath); job_wc.addCacheArchive(dictUri); }  job_wc.setJobName(""WordCount""); job_wc.setInputFormatClass(PdfInputFormat.class); FileInputFormat.addInputPath(job_wc, new Path(Args[0])); FileOutputFormat.setOutputPath(job_wc, new Path(Args[1])); job_wc.setMapperClass(WordCountMapper.class); job_wc.setReducerClass(WordCountReducer.class); job_wc.setOutputKeyClass(Text.class); job_wc.setOutputValueClass(IntWritable.class);  Job job_sort = Job.getInstance(conf); job_sort.setJobName(""Word Freq Sort""); job_sort.setInputFormatClass(TextInputFormat.class); FileInputFormat.addInputPath(job_sort, new Path(Args[1])); FileOutputFormat.setOutputPath(job_sort, new Path(Args[2])); job_sort.setMapperClass(WordFreqSortMapper.class); job_sort.setReducerClass(WordFreqSortReducer.class);  job_sort.setPartitionerClass(GroupPartitioner.class); job_sort.setSortComparatorClass(KeyComparator.class); job_sort.setGroupingComparatorClass(GroupComparator.class);  job_sort.setMapOutputKeyClass(WordFreqWritable.class); job_sort.setMapOutputValueClass(NullWritable.class); job_sort.setOutputKeyClass(IntWritable.class); job_sort.setOutputValueClass(Text.class); job_sort.setNumReduceTasks(1);  ControlledJob cj_wc=new  ControlledJob(conf); cj_wc.setJob(job_wc);  ControlledJob cj_sort=new  ControlledJob(conf); cj_sort.setJob(job_sort);  cj_sort.addDependingJob(cj_wc);  JobControl jobCtrl=new JobControl(""Word Count & Sort""); jobCtrl.addJob(cj_wc); jobCtrl.addJob(cj_sort);  Thread jcThread = new Thread(jobCtrl); jcThread.start(); int status = 0; while(true) { if(jobCtrl.allFinished()){ System.out.println(jobCtrl.getSuccessfulJobList()); jobCtrl.stop(); status = 0; break; } if(jobCtrl.getFailedJobList().size() > 0){ System.out.println(jobCtrl.getFailedJobList()); jobCtrl.stop(); status = -1; break; } }  Counters counter = job_sort.getCounters(); System.out.println(""All Tokens: ""+counter.findCounter(""WordCountMain.WordStats"", ""TOKENS"").getValue()); System.out.println(""     Words: ""+counter.findCounter(""WordCountMain.WordStats"", ""WORDS"").getValue());  System.out.println(""All Tokens: ""+counter.findCounter(WordCountMain.WordStats.TOKENS).getValue()); System.out.println(""     Words: ""+counter.findCounter(WordCountMain.WordStats.WORDS).getValue());   System.exit(status); } "	0	0	0	0	0	1
"public void generateTrace(IProgressMonitor monitor) throws SoCTraceException { /* * Trace events */ traceDB = new TraceDBObject(dbName, DBMode.DB_CREATE);  // Init ID managers IdManager eIdManager = new IdManager(); IdManager etIdManager = new IdManager(); IdManager epIdManager = new IdManager(); IdManager eptIdManager = new IdManager(); IdManager tpIdManager = new IdManager(); IdManager tptIdManager = new IdManager(); IdManager producerIdManager = new IdManager();  Random rand = new Random();  monitor.subTask(""Generating event types""); int i = 0;  // Create event types for (i = 0; i < numberOfEventType; i++) { // Spread them uniformly between the possible categories int category = categories.get(i % categories.size()); EventType aType = createTypes(traceDB, category, etIdManager, eptIdManager); typesList.add(aType); }  monitor.subTask(""Generating event producer""); // Set root producer with the ID: -1 EventProducer root = createEventProd(-1, producerIdManager, traceDB);  // Create non-leave producers for (i = 0; i < numberOfProducers - numberOfLeaves; i++) { createEventProd(root.getId(), producerIdManager, traceDB); }  int potentialParentsSize = producers.size();  // Create leave producers for (i = 0; i < numberOfLeaves; i++) { // Randomize parent ID among producers (avoid to set root as // parent) int parentId = producers.get( rand.nextInt(potentialParentsSize - 1) + 1).getId();  leaves.add(createEventProd(parentId, producerIdManager, traceDB)); }  traceDB.commit();  monitor.subTask(""Generating events""); // Create events createEvent(eIdManager, epIdManager, monitor);  if (monitor.isCanceled()) { traceDB.dropDatabase(); return; }  IdManager fileIdManager = new IdManager(); for (i = 0; i < NUMBER_OF_FILES; i++) { File file = new File(fileIdManager.getNextId()); file.setPath(FILE_INFO_PREFIX + file.getId()); file.setDescription(FILE_INFO_PREFIX + file.getId()); traceDB.save(file); }  if (forceIndex) { monitor.subTask(""Indexing timestamp""); traceDB.createTimestampIndex(); monitor.subTask(""Indexing event id in EVENT_PARAM""); traceDB.createEventParamIndex(); } traceDB.close();  monitor.subTask(""Filling trace metadata""); /* * Trace metadata */ SystemDBObject sysDB = SystemDBObject.openNewIstance();  TraceType tt = buildTraceType(sysDB); // tt.setName(TYPE_NAME_PREFIX + tt.getId()); tptIdManager.setNextId(sysDB.getMaxId(FramesocTable.TRACE_PARAM_TYPE.toString(), ""ID"") + 1); for (i = 0; i < NUMBER_OF_TRACE_PARAMETERS; i++) { TraceParamType tpt = new TraceParamType(tptIdManager.getNextId()); tpt.setName(PARAMETER_NAME_PREFIX + tpt.getId()); tpt.setType(PARAMETER_TYPE); tpt.setTraceType(tt); sysDB.save(tpt); }  Trace t = new Trace(sysDB.getNewId(FramesocTable.TRACE.toString(), ""ID"")); t.setAlias(TRACE_NAME + ""_"" + t.getId()); t.setBoard(METADATA); t.setDbName(dbName); t.setDescription(METADATA); t.setNumberOfCpus(1); t.setNumberOfEvents((int) numberOfGeneratedEvents); t.setOperatingSystem(METADATA); t.setOutputDevice(METADATA); t.setProcessed(false); t.setMinTimestamp(MIN_TIMESTAMP); t.setMaxTimestamp(maxTimeStamp); t.setTimeUnit(TimeUnit.NANOSECONDS.getInt()); t.setTracedApplication(METADATA); t.setTracingDate(new Timestamp(new Date().getTime())); t.setType(tt); tpIdManager.setNextId(sysDB.getMaxId(FramesocTable.TRACE_PARAM.toString(), ""ID"") + 1); for (TraceParamType tpt : tt.getTraceParamTypes()) { TraceParam tp = new TraceParam(tpIdManager.getNextId()); tp.setTraceParamType(tpt); tp.setTrace(t); tp.setValue(PARAMETER_VALUE); sysDB.save(tp); } sysDB.save(t);  sysDB.close(); } "	0	0	0	0	0	1
protected WonMessage createWonMessage(FeedbackCommandEvent feedbackCommandEvent) throws WonMessageBuilderException { URI connectionURI = feedbackCommandEvent.getConnectionURI(); WonNodeInformationService wonNodeInformationService = getEventListenerContext().getWonNodeInformationService();  Dataset connectionRDF = getEventListenerContext().getLinkedDataSource().getDataForResource(connectionURI); URI localNeed = WonRdfUtils.NeedUtils.getLocalNeedURIFromConnection(connectionRDF, connectionURI); URI wonNode = WonRdfUtils.NeedUtils.getWonNodeURIFromConnection(connectionRDF, connectionURI); //TODO: make more generic by using the URIs specified in the command. return WonMessageBuilder .setMessagePropertiesForHintFeedback( wonNodeInformationService.generateEventURI( wonNode), connectionURI, localNeed, wonNode, feedbackCommandEvent.getValue().equals(WON.GOOD) ) .build(); } 	0	0	0	0	0	1
"private OutputStream getOutputStream(boolean append) throws IOException { // Retrieve a ConnectionHandler and lock it final SFTPConnectionHandler connHandler = (SFTPConnectionHandler)ConnectionPool.getConnectionHandler(CONN_HANDLER_FACTORY, fileURL, true); try { // Makes sure the connection is started, if not starts it connHandler.checkConnection();  SftpFile sftpFile; if(exists()) { sftpFile = connHandler.sftpSubsystem.openFile(absPath, append?SftpSubsystemClient.OPEN_WRITE|SftpSubsystemClient.OPEN_APPEND :SftpSubsystemClient.OPEN_WRITE|SftpSubsystemClient.OPEN_TRUNCATE);  // Update local attributes if(!append) fileAttributes.setSize(0); } else { // Set new file permissions to 644 octal (420 dec): ""rw-r--r--"" // Note: by default, permissions for files freshly created is 0 (not readable/writable/executable by anyone)! FileAttributes atts = new FileAttributes(); atts.setPermissions(new UnsignedInteger32(0644)); sftpFile = connHandler.sftpSubsystem.openFile(absPath, SftpSubsystemClient.OPEN_WRITE|SftpSubsystemClient.OPEN_CREATE, atts);  // Update local attributes fileAttributes.setExists(true); fileAttributes.setDate(System.currentTimeMillis()); fileAttributes.setSize(0); }  return new CounterOutputStream( // Custom SftpFileOutputStream constructor, not part of the official J2SSH API new SftpFileOutputStream(sftpFile, append?getSize():0) { @Override public void close() throws IOException { // SftpFileOutputStream.close() closes the open SftpFile file handle super.close();  // Release the lock on the ConnectionHandler connHandler.releaseLock(); } } , new ByteCounter() { @Override public synchronized void add(long nbBytes) { fileAttributes.addToSize(nbBytes); fileAttributes.setDate(System.currentTimeMillis()); } } ); } catch(IOException e) { // Release the lock on the ConnectionHandler if the OutputStream could not be created connHandler.releaseLock();  // Re-throw IOException throw e; } } "	0	0	0	0	0	1
public BigDecimal getMinInvoiceAmount() { return minInvoiceAmount; } 	0	0	0	0	0	1
public void reset() { innerList.clear(); moreItemsCount.onNext(LoadedItems.UNKNOWN_ITEMS_COUNT); } 	0	0	0	0	0	1
"@Test public void testAddImports() throws Exception { String code = ""package org;\npublic class A {}"";  CompilationUnit modifiedCu = parser.parse(code, false); CompilationUnit originalCu = parser.parse(code, false);  List<ImportDeclaration> imports = new LinkedList<ImportDeclaration>();  imports.add(new ImportDeclaration(new NameExpr(""org.walkmod.B""), false, false)); modifiedCu.setImports(imports);  List<Action> actions = getActions(originalCu, modifiedCu); Assert.assertEquals(1, actions.size());  Assert.assertEquals(ActionType.APPEND, actions.get(0).getType()); Assert.assertEquals(2, actions.get(0).getBeginLine()); Assert.assertEquals(1, actions.get(0).getBeginColumn());  assertCode(actions, code, ""package org;\nimport org.walkmod.B;\npublic class A {}"");  code = ""package org;\n@Override\npublic class A {}""; parser = new DefaultJavaParser(); modifiedCu = parser.parse(code, false); originalCu = parser.parse(code, false);  imports = new LinkedList<ImportDeclaration>();  imports.add(new ImportDeclaration(new NameExpr(""org.walkmod.B""), false, false)); modifiedCu.setImports(imports); modifiedCu.getTypes().get(0).getAnnotations().add(new NormalAnnotationExpr(new NameExpr(""Foo""), null));  actions = getActions(originalCu, modifiedCu); Assert.assertEquals(2, actions.size());  Assert.assertEquals(ActionType.APPEND, actions.get(0).getType()); Assert.assertEquals(2, actions.get(0).getBeginLine()); Assert.assertEquals(1, actions.get(0).getBeginColumn());  assertCode(actions, code, ""package org;\nimport org.walkmod.B;\n@Foo()\n@Override\npublic class A {}"");  } "	0	0	0	0	0	1
"private void compressDirectoryToZipfile(String rootDir, String sourceDir, ZipOutputStream out) throws Exception { for (File file : new File(sourceDir).listFiles()) { if (file.isDirectory()) { compressDirectoryToZipfile(rootDir, sourceDir + file.getName() + ""/"", out); } else { ZipEntry entry = new ZipEntry(sourceDir.replace(rootDir, """") + file.getName()); out.putNextEntry(entry);  try (FileInputStream in = new FileInputStream(sourceDir + file.getName())) { IOUtils.copy(in, out); } } } } "	0	0	0	0	0	1
"public static Class<?> getServerPingPlayerSampleClass() { if (!isUsingNetty()) throw new IllegalStateException(""ServerPingPlayerSample is only supported in 1.7.2."");  try { return getMinecraftClass(""ServerPing.ServerPingPlayerSample""); } catch (RuntimeException e) { Class<?> serverPing = getServerPingClass();  // Find a server ping object AbstractFuzzyMatcher<Class<?>> serverPlayerContract = FuzzyClassContract.newBuilder(). constructor(FuzzyMethodContract.newBuilder().parameterExactArray(int.class, int.class)). field(FuzzyFieldContract.newBuilder().typeExact(GameProfile[].class)). build(). and(getMinecraftObjectMatcher());  return setMinecraftClass(""ServerPingPlayerSample"", getTypeFromField(serverPing, serverPlayerContract)); } } "	0	0	0	0	0	1
"@Test @PactVerifications({@PactVerification(HTTP_PROVIDER_NAME), @PactVerification(OTHER_HTTP_PROVIDER_NAME)}) public void shouldTestAllHttpPacts() throws Exception { assertEquals(new ConsumerClient(httpProvider.getConfig().url()).getAsMap(""/"", """"), singletonMap (""name"", ""harry""));  assertEquals(new ConsumerClient(otherHttpProvider.getUrl()).getAsMap(""/other"", """"), singletonMap(""name"", ""john"")); } "	0	0	0	0	0	1
public static void registerSettingsTab(SettingsObject tab) { if (!settingsTabs.contains(tab)) settingsTabs.add(tab); } 	0	0	0	0	0	1
public static void setCurrentOpenWindow(Window currentOpenWindow) { PluginRegistry.currentOpenWindow = currentOpenWindow; } 	0	0	0	0	0	1
@Nullable public IdPredicate getIdPredicate(Var var) { return getAtoms(IdPredicate.class) .filter(sub -> sub.getVarName().equals(var)) .findFirst().orElse(null); } 	0	0	0	0	0	1
public static GroupChat createSuperGroupChat(JSONObject jsonObject) {  return new SuperGroupChatImpl(jsonObject); } 	0	0	0	0	0	1
"public void removeSubscriber(MQTTopicManager channel, String subscribedTopic, String subscriptionChannelID, UUID subscriberChannel, boolean isCleanSession, String mqttClientID) throws MQTTException { try {   String queueIdentifier = MQTTUtils.generateTopicSpecficClientID(mqttClientID); String queueUser = ""admin"";  //Here we hard code the QoS level since for subscription removal that doesn't matter MQTTLocalSubscription mqttTopicSubscriber = createSubscription(subscribedTopic,channel, subscriptionChannelID, 0, subscriberChannel, true);  //This will be similar to a durable subscription of AMQP //There could be two types of events one is the disconnection due to the lost of the connection //The other is un-subscription, if is the case of un-subscription the subscription should be removed InboundQueueEvent queueChange = new InboundQueueEvent(queueIdentifier, queueUser, false, true); Andes.getInstance().deleteQueue(queueChange);  //create a close subscription event LocalSubscription localSubscription = createLocalSubscription(mqttTopicSubscriber, isCleanSession, subscribedTopic, mqttClientID); InboundSubscriptionEvent subscriptionCloseEvent = new InboundSubscriptionEvent(localSubscription); Andes.getInstance().closeLocalSubscription(subscriptionCloseEvent);  //Will indicate the closure of the subscription connection Andes.getInstance().clientConnectionClosed(subscriberChannel);  if (log.isDebugEnabled()) { log.debug(""Disconnected subscriber from topic "" + subscribedTopic); }  } catch (AndesException e) { final String message = ""Error occurred while removing the subscriber ""; log.error(message, e); throw new MQTTException(message, e); } } "	0	0	0	0	0	1
"public void updateStats() { final String user_id = sp.getString(""firebase_uid"", ""nien""); if (user_id.equalsIgnoreCase(""nien"")) { // Fail, return to login activity Toast.makeText(getActivity(), ""Invalid Login Token, please re-login"", Toast.LENGTH_SHORT).show(); return; } FirebaseDatabase.getInstance().getReference().child(""users"").child(user_id).child(""records"").addListenerForSingleValueEvent(new ValueEventListener() { @Override public void onDataChange(DataSnapshot dataSnapshot) { List<DualLineString> stats = new ArrayList<>(); for (Map.Entry<String, String> i : legend.entrySet()) { if (!dataSnapshot.hasChild(i.getKey())) continue; stats.add(new DualLineString(i.getValue(), dataSnapshot.child(i.getKey()).getValue(Double.class) + "" km"")); } adapter.update(stats); adapter.notifyDataSetChanged(); }  @Override public void onCancelled(DatabaseError databaseError) {  } }); } "	0	0	0	0	0	1
"@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { // Inflate the layout for this fragment View v = inflater.inflate(R.layout.fragment_recycler_view, container, false);  RecyclerView recyclerView = v.findViewById(R.id.main_menu_recycler_view); if (recyclerView != null) { recyclerView.setHasFixedSize(true); LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getActivity()); linearLayoutManager.setOrientation(LinearLayoutManager.VERTICAL); recyclerView.setLayoutManager(linearLayoutManager); recyclerView.setItemAnimator(new DefaultItemAnimator());  // Set up blank layout for now List<DualLineString> placeholder = new ArrayList<>(); placeholder.add(new DualLineString(""Loading..."", ""Calculating statistics..."")); adapter = new DualLineStringRecyclerAdapter(placeholder, false); recyclerView.setAdapter(adapter);  sp = PreferenceManager.getDefaultSharedPreferences(getActivity().getApplicationContext()); FirebaseDatabase.getInstance().getReference().child(""stat-legend"").addListenerForSingleValueEvent(new ValueEventListener() { @Override public void onDataChange(DataSnapshot dataSnapshot) { legend = new ArrayMap<>(); for (DataSnapshot ds : dataSnapshot.getChildren()) { legend.put(ds.getKey(), ds.getValue(String.class)); } ready = true; updateStats(); }  @Override public void onCancelled(DatabaseError databaseError) { ready = false; } }); }  return v; } "	0	0	0	0	0	1
static TechReportPlacement normalizeSillyPlacement(GraphContext grCtx, TechReportPlacement sillyPlacement) { TagGraphService tagService = new TagGraphService(grCtx);  final TechReportPlacement normalPlacement = new TechReportPlacement(); normalPlacement.sector = getNonSillyParent(tagService, sillyPlacement.sector); normalPlacement.box = getNonSillyParent(tagService, sillyPlacement.box); normalPlacement.row = getNonSillyParent(tagService, sillyPlacement.row); return normalPlacement; } 	0	0	0	0	0	1
public static  Func1<JsonEvent, Observable<AnyJsonEvent>> jsonOfField(String field) { return e -> e.child(field).withMetaData(e).toObservable(); } 	0	0	0	0	0	1
public String getGuideTitle() { return guideTitle.getText(); } 	0	0	0	0	0	1
public static void main(String[] args) throws Exception { DebugClient.disableReadTimeoutHandler(ReadTimeoutHandler.class); Main.main(args); } 	0	0	0	0	0	1
"@Override public void result(Convention result) {  final Fragment fragment = new TwitterContentFragment(); final Bundle bundle = new Bundle(); fragment.setArguments(bundle);  TwitterData.getTweets(result.getTwitterAccounts(), new ResponseHandler<Tweet[]>() { @Override public void result(Tweet[] tweets) { bundle.putSerializable(""tweets"", tweets);  MainActivity.INSTANCE.getSupportFragmentManager() .beginTransaction() .replace(containerId, fragment) .commit(); } }); } "	0	0	0	0	0	1
private void setUpStreamProcessing() { Observable.merge(Arrays.asList( setUpObjectProcessing().map(formatter::format), setUpBooleanProcessing().map(formatter::format), setUpByteProcessing().map(formatter::format), setUpIntegerProcessing().map(formatter::format), setUpCharProcessing().map(formatter::format), setUpStringProcessing().map(formatter::format), setUpIntArrayProcessing().map(formatter::format) )) .doOnNext(saver::save) .subscribe(ignore -> {}, ex -> { flush(); exceptionStream.onNext((LogMessageException) ex); }); } 	0	0	0	0	0	1
public static ObservableList<UnitConfigType.UnitConfig> getGroups() { ObservableList<UnitConfigType.UnitConfig> groups = FXCollections.observableArrayList();  try { setGroups(Registries.getUserRegistry().getAuthorizationGroupConfigs(), groups); } catch (CouldNotPerformException | InterruptedException e) { // not synchronized yet... // e.printStackTrace(); }  try { Registries.getUserRegistry().addDataObserver((observable, userRegistryData) -> setGroups(Registries.getUserRegistry().getAuthorizationGroupConfigs(), groups) ); } catch (InterruptedException | CouldNotPerformException e) { e.printStackTrace(); }  return groups;  } 	0	0	0	0	0	1
"@Test(expected = NullPointerException.class) public void testConstructorNullMapperInvalid() { new QueryResponse(null, 200, new ByteArrayInputStream(""bogus"".getBytes())); } "	0	0	0	0	0	1
"protected static void parseAdditionalStartupOptions(CommandLineCall clc) {  try { //Parse different options out of the args back from behind displayShortWorkflowList = clc.isOptionSet(RoddyStartupOptions.shortlist); if (clc.isOptionSet(RoddyStartupOptions.useconfig)) customPropertiesFile = clc.getOptionValue(RoddyStartupOptions.useconfig); else if (clc.isOptionSet(RoddyStartupOptions.c)) customPropertiesFile = clc.getOptionValue(RoddyStartupOptions.c);  for (RoddyStartupOptions startupOption : clc.getOptionList()) {  if (startupOption == (RoddyStartupOptions.v)) { LoggerWrapper.setVerbosityLevel(LoggerWrapper.VERBOSITY_MEDIUM); }  if (startupOption == (RoddyStartupOptions.vv)) { LoggerWrapper.setVerbosityLevel(LoggerWrapper.VERBOSITY_HIGH); }  if (startupOption == (RoddyStartupOptions.verbositylevel)) { int level = RoddyConversionHelperMethods.toInt(clc.getOptionValue(startupOption), 5); LoggerWrapper.setVerbosityLevel(level); }  //Enable the setup of all debug options via the command line. if (startupOption == (RoddyStartupOptions.debugOptions)) { String[] options = clc.getOptionList(startupOption).toArray(new String[0]);  }  if (runMode.isCommandLineMode()) { // Instead of terminating, Roddy waits for all submitted jobs to finish. if (startupOption == (RoddyStartupOptions.waitforjobs)) { waitForJobsToFinish = true; }  if (startupOption == (RoddyStartupOptions.useiodir)) { useCustomIODirectories = true;  List<String> directories = clc.getOptionList(startupOption); if (directories.size() == 0 || directories.size() > 2) { throw new RuntimeException(""Arguments for useasiodir are wrong""); }  useSingleIODirectory = directories.size() == 1; baseInputDirectory = directories.get(0); baseOutputDirectory = useSingleIODirectory ? baseInputDirectory : directories.get(1); }  if (startupOption == (RoddyStartupOptions.disabletrackonlyuserjobs)) { trackUserJobsOnly = false; }  if (startupOption == (RoddyStartupOptions.trackonlystartedjobs)) { trackOnlyStartedJobs = true; }  // When a job is not submitted successfully, Roddy will wait try to do it again if (startupOption == (RoddyStartupOptions.resubmitjobonerror)) { repeatJobSubmission = true; List<String> options = clc.getOptionList(startupOption); if (options.size() > 0) repeatJobSubmissionAmount = RoddyConversionHelperMethods.toInt(options.get(0)); if (options.size() > 1) repeatJobSubmissionWait = RoddyConversionHelperMethods.toInt(options.get(1)); }  if (startupOption == (RoddyStartupOptions.autosubmit)) { autosubmitMode = true; if (clc.getOptionValue(startupOption) != null) autosubmitMaxBatchCount = RoddyConversionHelperMethods.toInt(clc.getOptionValue(startupOption)); }  //Enable setup of workflow run flags from the command line if (startupOption == (RoddyStartupOptions.run)) { String[] flags = clc.getOptionList(startupOption).toArray(new String[0]); }  if (startupOption == (RoddyStartupOptions.dontrun)) { String[] flags = clc.getOptionList(startupOption).toArray(new String[0]); } } } } catch (RuntimeException e) { logger.severe(""Parsing startup options failed.""); exit(1); } } "	0	0	0	0	0	1
"@Test public void testLocalRetriever() {  LocalDataRetriever retriever = new LocalDataRetriever(c, null, ""testLocal"");   new Thread() { @Override public void run() { super.run(); try { Thread.sleep(500); } catch (InterruptedException e) { } finally { Intent intent = new Intent(RecorderStatus.FINISH_ACTION); intent.putExtra(RecorderStatus.RECORDING_UUID, ""testLocal""); intent.putExtra(RecorderStatus.FINISH_PATH, testFile.getAbsolutePath()); c.sendBroadcast(intent); } } }.start();  File file = retriever.getFile(); Assert.assertTrue(file != null); Assert.assertTrue(file.exists()); Assert.assertTrue(!file.isDirectory()); Assert.assertTrue(file.length() == testFile.length()); } "	0	0	0	0	0	1
"@Override public void onSensorChanged(SensorEvent sensorEvent) {  if (mLastTimestamp == -1) { mLastTimestamp = sensorEvent.timestamp; return; }  if (mOut == null) return;  try { /* * the sensorrate might not be constant, which is why we do a simple repetition * interpolation here. I.e. we make sure that at least 1/rate seconds have passed * between samples. */ assert (mLastTimestamp < sensorEvent.timestamp); mDiff += (sensorEvent.timestamp - mLastTimestamp) * 1e-9;  if (mDur > 0 && mElapsed > mDur) { terminate(); return; }  /* * transfer a sensor sample and the current accuracy measure */ byte[] arr = transfer(sensorEvent);  /* * store it or multiple copies of the same, close when done. */ int tointerpolate = (int) Math.floor( mDiff * mRate ) - 1;  if (tointerpolate > 1) Log.d(""SensorProcess"", String.format(""%s interpolating %d frames"", mSensor.getStringName(), tointerpolate));   while (mDiff >= 1. / mRate) { mOut.write(arr); mDiff -= 1. / mRate; mElapsed += 1. / mRate;  if (mDur > 0 && mElapsed > mDur + .5 / mRate) { terminate(); return; }  if (mSensor instanceof AudioSensor) // we dont need repetition for audio break; }  mLastTimestamp = sensorEvent.timestamp; } catch (IOException e) { e.printStackTrace(); terminate(); } } "	0	0	0	0	0	1
"public BBBMeeting createMeeting(final BBBMeeting meeting) throws BBBException {  try { // build query StringBuilder query = new StringBuilder(); query.append(""meetingID=""); query.append(meeting.getId()); query.append(""&name=""); query.append(URLEncoder.encode(meeting.getName(), getParametersEncoding())); query.append(""&voiceBridge=""); query.append(meeting.getVoiceBridge()); query.append(""&attendeePW=""); String attendeePW = meeting.getAttendeePassword(); query.append(attendeePW); query.append(""&moderatorPW=""); String moderatorPW = meeting.getModeratorPassword(); query.append(moderatorPW); if (bbbAutocloseMeetingWindow) { query.append(""&logoutURL=""); StringBuilder logoutUrl = new StringBuilder(config.getServerUrl()); logoutUrl.append(BBBMeetingManager.TOOL_WEBAPP); logoutUrl.append(""/bbb-autoclose.html""); query.append(URLEncoder.encode(logoutUrl.toString(), getParametersEncoding())); }  // BSN: Parameters required for playback recording query.append(""&record=""); String recording = meeting.getRecording() != null && meeting.getRecording().booleanValue() ? ""true"" : ""false""; query.append(recording);  query.append(""&duration=""); String duration = meeting.getRecordingDuration() != null? meeting.getRecordingDuration().toString(): ""0""; query.append(duration);  // BSN: Parameters added for monitoring and recording search for(Entry<String, String> entry : meeting.getMeta().entrySet()) { String key = entry.getKey(); String value = entry.getValue();  query.append(""&meta_"" + key + ""=""); query.append(URLEncoder.encode(value, getParametersEncoding()));  } // BSN: Ends  // Composed Welcome message ResourceLoader toolMessages = new ResourceLoader(""ToolMessages""); String welcomeMessage = toolMessages.getFormattedMessage(""bbb_welcome_message_opening"", new Object[] { ""<b>%%CONFNAME%%</b>"" } );  String welcomeDescription = meeting.getProps().getWelcomeMessage(); if ( !""<br />"".equals(welcomeDescription) ) welcomeMessage += ""<br><br>"" + welcomeDescription;  welcomeMessage += ""<br><br>"" + toolMessages.getFormattedMessage(""bbb_welcome_message_general_info"", new Object[] {toolMessages.getString(""bbb_welcome_message_external_link""), ""%%DIALNUM%%"", ""%%CONFNUM%%""} );  if (recording == ""true"") welcomeMessage += ""<br><br><b>"" + toolMessages.getFormattedMessage(""bbb_welcome_message_recording_warning"", new Object[] {} ) + ""</b>""; if (duration.compareTo(""0"") > 0) welcomeMessage += ""<br><br><b>"" + toolMessages.getFormattedMessage(""bbb_welcome_message_duration_warning"", new Object[] { duration });  if (recording == ""true"" && bbbRecordingReadyNotification) { query.append(""&meta_bn-recording-ready-url=""); StringBuilder recordingReadyUrl = new StringBuilder(config.getServerUrl()); recordingReadyUrl.append(""/direct""); recordingReadyUrl.append(BBBMeetingManager.TOOL_WEBAPP); recordingReadyUrl.append(""/recordingReady""); query.append(URLEncoder.encode(recordingReadyUrl.toString(), getParametersEncoding())); }  query.append(""&welcome=""); query.append(URLEncoder.encode(welcomeMessage, getParametersEncoding()));  query.append(getCheckSumParameterForQuery(APICALL_CREATE, query.toString()));  SecurityAdvisor sa = editResourceSecurityAdvisor(); //preupload presentation String xml_presentation = """"; if (bbbPreuploadPresentation) { if (meeting.getPresentation() != """" && meeting.getPresentation() != null){ m_securityService.pushAdvisor(sa); m_contentHostingService.setPubView(meeting.getPresentation().substring(meeting.getPresentation().indexOf(""/attachment"")), true); StringBuilder presentationUrl = new StringBuilder(config.getServerUrl()); presentationUrl.append(meeting.getPresentation()); xml_presentation = ""<modules> <module name=\""presentation\""> <document url=\""""+presentationUrl+""\"" /> </module> </modules>""; logger.debug(xml_presentation); } }  // do API call Map<String, Object> response = doAPICall(APICALL_CREATE, query.toString(), xml_presentation); } catch (BBBException e) { throw e; } catch (UnsupportedEncodingException e) { throw new BBBException(BBBException.MESSAGEKEY_INTERNALERROR, e.getMessage(), e); } if (meeting.getPresentation() != """" && meeting.getPresentation() != null) m_contentHostingService.setPubView(meeting.getPresentation().substring(meeting.getPresentation().indexOf(""/attachment"")), false); return meeting; } "	0	0	0	0	0	1
@Override public Class<?> getColumnClass(int col) { switch (col) { case ID_COLUMN: return String.class; case NAME_COLUMN: return String.class; case TRAIN_DIRECTION_COLUMN: return JComboBox.class; case MAXMOVES_COLUMN: return String.class; case RANDOM_CONTROL_COLUMN: return JComboBox.class; case PICKUP_COLUMN: return JComboBox.class; case DROP_COLUMN: return JComboBox.class; case WAIT_COLUMN: { if (_showWait) { return String.class; } else { return JComboBox.class; } } case MAXLENGTH_COLUMN: return String.class; case GRADE: return String.class; case TRAINICONX: return String.class; case TRAINICONY: return String.class; case COMMENT_COLUMN: return JButton.class; case UP_COLUMN: return JButton.class; case DOWN_COLUMN: return JButton.class; case DELETE_COLUMN: return JButton.class; default: return null; } } 	0	0	0	0	0	1
"private void breathFirstSearch (WatchedTarget watchedTarget, Set<Link> fringe, int linkDepth) { if (linkDepth < -1 || (linkDepth == -1 && !foundDocuments.isEmpty())) return; Set<Link> children = new HashSet<>(); for (Link link : fringe) { try { if (linkDepth >= 0 || urlMatchesScheme(link.target, watchedTarget.documentUrlScheme)) { Connection connection = Jsoup.connect(link.target);  connection.request().method(Method.GET); connection.ignoreContentType(true); connection.execute();  Response response = connection.response();  String pageUrl = crawlWayback ? urlFromWayback(link.target) : link.target;  if (response.contentType().contains(""html"")) { if (linkDepth >= 0) { org.jsoup.nodes.Document doc = response.parse();  for(Element element : doc.select(""a[href]"")) { String waybackHrefUrl = element.absUrl(""href"").replace("" "", ""%20""); String hrefUrl = crawlWayback ? urlFromWayback(waybackHrefUrl) : waybackHrefUrl; if (hrefUrl != null && !knownSites.contains(hrefUrl)) { if (hrefUrl.endsWith("".pdf"")) { if (urlMatchesScheme(hrefUrl, watchedTarget.documentUrlScheme)) { knownSites.add(hrefUrl); Logger.debug(""pdf found: "" + hrefUrl + "" (via "" + link.target + "")""); Document document = new Document(); document.landingPageUrl = pageUrl; document.documentUrl = hrefUrl; document.filename = URLDecoder.decode(hrefUrl.substring(hrefUrl.lastIndexOf('/')+1), ""UTF-8""); document.title = document.filename.substring(0, document.filename.indexOf('.')); document.watchedTarget = watchedTarget; foundDocuments.add(document); if (maxDocuments != null && foundDocuments.size() >= maxDocuments) return; } } else if(domainIsEqual(pageUrl, hrefUrl)) { knownSites.add(hrefUrl); children.add(new Link(link.target, waybackHrefUrl)); } } } } } else if (urlMatchesScheme(pageUrl, watchedTarget.documentUrlScheme)) { String contentDisposition = response.header(""Content-Disposition""); if (contentDisposition != null && contentDisposition.endsWith("".pdf"")) { Document document = new Document(); document.landingPageUrl = crawlWayback ? urlFromWayback(link.source) : link.source; document.documentUrl = pageUrl; document.filename = contentDisposition.substring(contentDisposition.lastIndexOf('=')+1); document.title = document.filename.substring(0, document.filename.indexOf('.')); document.watchedTarget = watchedTarget; foundDocuments.add(document); if (maxDocuments != null && foundDocuments.size() >= maxDocuments) return; Logger.debug(""hidden pdf found: "" + document.filename + "" (url: "" + pageUrl + "")""); } } } } catch (IOException e) { Logger.info(""Can't get content of url: "" + link.target); } }  breathFirstSearch(watchedTarget, children, linkDepth - 1); } "	0	0	0	0	0	1
"@Test public void convertJsonToSqlTest() throws SQLException { String jsonCriteria = ""{\n"" + ""  \""group\"": {\n"" + ""    \""operator\"": \""AND\"",\n"" + ""    \""rules\"": [\n"" + ""      {\n"" + ""        \""condition\"": \""=\"",\n"" + ""        \""field\"": \""REVENUE_GROSS\"",\n"" + ""        \""data\"": \""23\"",\n"" + ""        \""$$hashKey\"": \""object:434\""\n"" + ""      },\n"" + ""      {\n"" + ""        \""condition\"": \""=\"",\n"" + ""        \""field\"": \""ID\"",\n"" + ""        \""data\"": \""4\"",\n"" + ""        \""$$hashKey\"": \""object:454\""\n"" + ""      },\n"" + ""      {\n"" + ""        \""group\"": {\n"" + ""          \""operator\"": \""AND\"",\n"" + ""          \""rules\"": [\n"" + ""            {\n"" + ""              \""condition\"": \""=\"",\n"" + ""              \""field\"": \""REVENUE_NET\"",\n"" + ""              \""data\"": \""22\"",\n"" + ""              \""$$hashKey\"": \""object:476\""\n"" + ""            },\n"" + ""            {\n"" + ""              \""condition\"": \""=\"",\n"" + ""              \""field\"": \""SALES_DAY\"",\n"" + ""              \""data\"": \""04-05-2016\"",\n"" + ""              \""$$hashKey\"": \""object:476\""\n"" + ""            }\n"" + ""          ]\n"" + ""        },\n"" + ""        \""$$hashKey\"": \""object:463\""\n"" + ""      }\n"" + ""    ]\n"" + ""  }\n"" + ""}""; when(resultSetMetaData.getColumnCount()).thenReturn(new Integer(3)); when(resultSetMetaData.getColumnName(0)).thenReturn(""REVENUE_GROSS""); when(resultSetMetaData.getColumnName(1)).thenReturn(""ID""); when(resultSetMetaData.getColumnName(2)).thenReturn(""REVENUE_NET""); when(resultSetMetaData.getColumnName(3)).thenReturn(""SALES_DAY""); when(resultSetMetaData.getColumnTypeName(0)).thenReturn(""DOUBLE""); when(resultSetMetaData.getColumnTypeName(1)).thenReturn(""BIGINT""); when(resultSetMetaData.getColumnTypeName(2)).thenReturn(""DOUBLE""); when(resultSetMetaData.getColumnTypeName(3)).thenReturn(""DATE""); String manualyConvertedCriteria = ""(REVENUE_GROSS = 23 AND ID = 4 AND (REVENUE_NET = 22 AND SALES_DAY = \""04-05-2016\""))""; String convertedCriteria = jsonFilterService.convertJsonToJpql(jsonCriteria, resultSetMetaData); assertEquals(manualyConvertedCriteria, convertedCriteria); } "	0	0	0	0	0	1
@Override public void readExternal(DataInputStream in, PrototypeFactory pf) throws IOException, DeserializationException { super.readExternal(in, pf);  hiddenQueryValues = (Hashtable<String, XPathExpression>) ExtUtil.read(in, new ExtWrapMapPoly(String.class), pf); userQueryPrompts = (OrderedHashtable<String, DisplayUnit>) ExtUtil.read(in, new ExtWrapMap(String.class, DisplayUnit.class), pf); } 	0	0	0	0	0	1
"public String getLimiterKey () throws NotConfiguredException { return ""D2request/"" + ""serviceName""; } "	0	0	0	0	0	1
"public MessageEvent<? extends PircBotX> getIrcEvent() { if (!messageType.equals(EndPointType.IRC)) throw new IllegalStateException(""Attemped to get IRC event for non-IRC message""); return ircEvent; } "	0	0	0	0	0	1
"@Test public void testRDFSpeedRegression() throws Exception { Map<String,Object> overlayConfig = new HashMap<>(); overlayConfig.put(""oryx.speed.model-manager-class"", RDFSpeedModelManager.class.getName()); overlayConfig.put(""oryx.speed.streaming.generation-interval-sec"", 5); overlayConfig.put(""oryx.speed.streaming.block-interval-sec"", 1); overlayConfig.put(""oryx.input-schema.feature-names"", ""[\""foo\"",\""bar\""]""); overlayConfig.put(""oryx.input-schema.categorical-features"", ""[]""); overlayConfig.put(""oryx.input-schema.target-feature"", ""bar""); Config config = ConfigUtils.overlayOn(overlayConfig, getConfig());  startMessaging();  List<Pair<String,String>> updates = startServerProduceConsumeTopics(config, new MockRDFRegressionInputGenerator(), new MockRDFRegressionModelGenerator(), NUM_INPUT, 1);  if (log.isDebugEnabled()) { for (Pair<String, String> update : updates) { log.debug(""{}"", update); } }  int numUpdates = updates.size();  // Model, and then pairs of positive / negative assertTrue(numUpdates >= 3 && numUpdates % 2 != 0); // Not testing the model much here: assertEquals(""MODEL"", updates.get(0).getFirst());  for (int i = 1; i < numUpdates; i++) { Pair<String, String> update = updates.get(i); assertEquals(""UP"", update.getFirst()); List<?> fields = MAPPER.readValue(update.getSecond(), List.class); int treeID = (Integer) fields.get(0); String nodeID = fields.get(1).toString(); double mean = (Double) fields.get(2); assertEquals(0, treeID); assertTrue(""r-"".equals(nodeID) || ""r+"".equals(nodeID)); if (""r+"".equals(nodeID)) { assertEquals(5.0, mean, 0.5); } else { assertEquals(-4.0, mean, 0.5); } }  for (int i = 1; i < numUpdates; i += 2) { Pair<String, String> update1 = updates.get(i); Pair<String, String> update2 = updates.get(i + 1); List<?> fields1 = MAPPER.readValue(update1.getSecond(), List.class); List<?> fields2 = MAPPER.readValue(update2.getSecond(), List.class); int count1 = (Integer) fields1.get(3); int count2 = (Integer) fields2.get(3); assertTrue(Math.abs(count1 - count2) <= 1); String nodeID1 = fields1.get(1).toString(); String nodeID2 = fields2.get(1).toString(); if (""r-"".equals(nodeID1)) { assertEquals(""r+"", nodeID2); } else { assertEquals(""r-"", nodeID2); } }  } "	0	0	0	0	0	1
"@Override public void onClick(DialogInterface dialog, int which) { if (which == DialogInterface.BUTTON_POSITIVE){ //disable data service IntentFilter intentFilter = new IntentFilter(); intentFilter.addAction( TelephonyIntents.ACTION_ANY_DATA_CONNECTION_STATE_CHANGED); mContext.registerReceiver(mReceiver, intentFilter); mNetworkSearchDataDisconnecting = true; mTelephonyManager.setDataEnabledUsingSubId(SubscriptionManager .getDefaultSubId(), false); } else if (which == DialogInterface.BUTTON_NEGATIVE){ log("" network search, do nothing""); msg1.arg1 = 0; msg1.sendToTarget(); } } "	0	0	0	0	0	1
private void beginRapidPoll(boolean restart) { if (restart && pollResetFuture != null) { pollResetFuture.cancel(true); pollResetFuture = null; }  if (pollResetFuture == null || pollResetFuture.isCancelled()) { schedulePoll(RAPID_REFRESH); scheduleFuturePollReset(); } } 	0	0	0	0	0	1
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_splash_screen); spref = PreferenceManager.getDefaultSharedPreferences(getBaseContext()); SharedPreferences.Editor e = spref.edit(); if(spref.getBoolean(""FR"",true)) { List<question> w = question.listAll(question.class); out.println(w);  int f = question.deleteAll(question.class); out.println(f); //subject.deleteAll(subject.class);  List<subject> sub = new ArrayList<>(); sub.add(new subject(""1"",""Mathematics"")); sub.add(new subject(""2"",""English"")); sub.add(new subject(""3"",""Science"")); sub.add(new subject(""4"",""Civic Education"")); sub.add(new subject(""5"",""Social Studies"")); subject.saveInTx(sub); List<subject> allsub = subject.listAll(subject.class); out.println(allsub);  //Class_id, Subject_id, Topic_id List<topic> m = new ArrayList<>(); m.add(new topic(""2"",""1"",""1"",""NUMBER AND NUMERATION (1-1000)"")); m.add(new topic(""2"",""1"",""2"",""PLACE VALUE"")); m.add(new topic(""2"",""1"",""3"",""ADDITION AND SUBTRACTION"")); m.add(new topic(""2"",""1"",""4"",""MULTIPLICATION"")); topic.saveInTx(m);   List<topic> t = new ArrayList<>(); t.add(new topic(""2"",""2"",""1"",""NOUNS (SINGULAR AND PLURALS)"")); t.add(new topic(""2"",""2"",""2"",""NOUNS (PROPER, COMMON AND COLLECTIVE NOUNS)"")); t.add(new topic(""2"",""2"",""3"",""VERBS"")); topic.saveInTx(t); e.putBoolean(""FR"",false).apply();    //public question(String question, String optionA, String optionB, String optionC, String optionD, String answer, String class_id, String subject_id, String topic_id) { List<question> q = new ArrayList<>(); q.add(new question(""Two hundred and seventy-three is"",""372"",""732"",""273"",""272"",""273"",""2"",""1"",""1"")); q.add(new question(""Which of these is correct"",""526 > 581"",""207 > 270"",""300 < 279"",""502 > 205"",""502 > 205"",""2"",""1"",""1"")); q.add(new question(""The place value of 2 in 321 is"",""hundred"",""tens"",""unit"",""thousand"",""tens"",""2"",""1"",""2"")); q.add(new question(""Add the place value of 3 in 7435 and 23"",""30"",""303"",""33"",""330"",""273"",""2"",""1"",""2"")); question.saveInTx(q); }  new Handler().postDelayed(new Runnable() { @Override public void run() { startActivity(new Intent(SplashScreen.this, ClassActivity.class)); finish(); } }, 3000);   } "	0	0	0	0	0	1
"private String insertHeader(SQLiteDatabase db, int shiftNo) { String receiptNo = """"; POS_Control pctrl = dataHelper.getPOSControl(db);  if(pctrl != null) { receiptNo = pctrl.LAST_RCP;  if (receiptNo == null || receiptNo.trim().isEmpty()) { receiptNo = ""0000001""; } else if (receiptNo == ""9999999"") { showMessage(""Receipt number maxed out"", ""Please reach the Administrator""); receiptNo = ""0000001""; } else { int tempRcp = Integer.parseInt(receiptNo) + 1; receiptNo = String.format(""%03d"", tempRcp); }  String todaysDateInString = new SimpleDateFormat(""yyyyMMdd"").format(new Date()); String todaysTimeInString = new SimpleDateFormat(""HHmm"").format(new Date()); String ssql = ""INSERT INTO header ( "" + ""COMPANY_CODE, "" + ""OUTLET_CODE, "" + ""EMP_CODE, "" + ""POS_NO, "" + ""SHIFT_NO, "" + // line 5 ""RCP_NO, "" + ""TRANS_TYPE, "" + ""BUS_DATE, "" + ""TRANS_DATE, "" + ""TRANS_TIME, "" + // 10 ""SALES_AMOUNT, "" + ""TOTAL_TAX, "" + ""TOTAL_DISCOUNT, "" + ""ROUNDING, "" + ""ROUNDING_ADJ, "" + // 15 ""APPROVAL_ID, "" + ""CUSTOMER_CODE, "" + ""CUSTOMER_POINT, "" + ""REFUND_VOUCHER_CODE, "" + ""REFUND_VOUCHER_AMOUNT, "" + // 20 ""REFUND_VOUCHER_EXPIRE_DATE, "" + ""DRAWER_DECLARE_ID, "" + ""BOTRANS_NO, "" + ""MODIFIED_DATE, "" + ""MODIFIED_ID, "" + // 25 ""ITEM_VOID_COUNT, "" + ""REPRINT_COUNT, "" + ""ITEM_VOID_AMOUNT, "" + ""REPRINT_AMOUNT, "" + ""PRICE_LEVEL, "" + // 30 ""REFUND_POS_NO, "" + ""REFUND_RCP_NO, "" + ""REFUND_REMARK, "" + ""REFUND_RCP_BUS_DATE, "" + ""IsFORCE_REFUND, "" + // 35 ""REPRINTCOUNT, "" + ""ToSAP, "" + ""MEMBER_IC, "" + ""PROTRANS_NO, "" + ""IsNewInDevice"" + // 40 "") "" + ""VALUES ("" + ""'"" + companyCode + ""', "" + ""'"" + outletCode + ""', "" + ""'"" + empCode + ""', "" + ""'"" + posNo + ""', "" + ""'1', "" + // line 5 ""?, "" + ""'S', "" + ""'"" + todaysDateInString + ""', "" + // bus date ""'"" + todaysDateInString + ""', "" + // trans dates ""'"" + todaysTimeInString + ""', "" + // trans time / line 10 ""?, "" + ""0, "" + ""0, "" + ""0, "" + ""0, "" + // 15 ""null, "" + ""?, "" + ""0, "" + ""null, "" + ""null, "" + // 20 ""null, "" + ""null, "" + ""null, "" + ""'"" + todaysDateInString + ""', "" + // modified date ""'"" + posNo + ""', "" + // 25 ""0, "" + ""0, "" + ""null, "" + ""null, "" + ""null, "" + // 30 ""null, "" + ""null, "" + ""null, "" + ""null, "" + ""null, "" + // 35 ""null, "" + ""0, "" + ""null, "" + ""null, "" + ""1); ""; // 40  pctrl.LAST_RCP = receiptNo; pctrl.EMP_CD = empCode; pctrl.BUS_DATE = todaysDateInString; pctrl.SHIFT_NUMBER = shiftNo; dataHelper.deleteAndInsertPOSControl(db, pctrl);  String[] objs = new String[]{receiptNo, total.toString(), customer_code}; // Edited by Eddie 11/12/2016, changed uuid to receiptNo db.execSQL(ssql, objs);  return receiptNo; // Edited by Eddie 11/12/2016, changed uuid to receiptNo } else { return ""noposcontrol""; } } "	0	0	0	0	0	1
public WXSDKInstance getSDKInstance(String instanceId) { return instanceId == null? null : mWXRenderManager.getWXSDKInstance(instanceId); } 	0	0	0	0	0	1
public ArrayEntryList getKeyValue(){ return keyValue; } 	0	0	0	0	0	1
public BigDecimal getAmount() {  return amount; } 	0	0	0	0	0	1
"public static String replacePlaceholdersWithWhiteSpace(final String templateContent, final Map<String, String> values) { StrSubstitutor sub = new StrSubstitutor(values); sub.setVariableResolver(new StrLookup() { @Override public String lookup(String key) { if (values == null) { return """"; } Object obj = values.get(key); if (obj == null) { return """"; } return obj.toString(); } }); return sub.replace(templateContent); } "	0	0	0	0	0	1
"public final Message editMessageCaption(EditMessageCaption editMessageCaption) throws TelegramApiException { if (editMessageCaption == null) { throw new TelegramApiException(""Parameter editMessageCaption can not be null""); } return sendApiMethod(editMessageCaption); } "	0	0	0	0	0	1
"@Override public void onStatusChanged(List<MapManager.StorageCallbackData> data) { if (mOutdatedMaps == null) return;  for (MapManager.StorageCallbackData item : data) { if (item.isLeafNode && item.newStatus == CountryItem.STATUS_FAILED) { String text; switch (item.errorCode) { case CountryItem.ERROR_NO_INTERNET: text = getString(R.string.common_check_internet_connection_dialog); break;  case CountryItem.ERROR_OOM: text = getString(R.string.downloader_no_space_title); break;  default: text = String.valueOf(item.errorCode); } Statistics.INSTANCE.trackDownloaderDialogError(mTotalSizeMb, text); MapManager.showError(getActivity(), item, new Utils.Proc<Boolean>() { @Override public void invoke(@NonNull Boolean result) { if (result) { MapManager.nativeUpdate(CountryItem.getRootId()); } else { finish(); } } });  return; } else if (item.isLeafNode && item.newStatus == CountryItem.STATUS_DONE) { if (mLeftoverMaps == null) throw new AssertionError(""mLeftoverMaps can't be null if mOutdatedMaps != null""); mLeftoverMaps.remove(item.countryId); } }  if (!isAllUpdated()) return;  finish(); } "	0	0	0	0	0	1
public void waitListOfFilesNames(final String text) { new WebDriverWait(seleniumWebDriver, 10) .until((ExpectedCondition<Boolean>) webDriver -> fileNamePopUp.getText().contains(text)); } 	0	0	0	0	0	1
"private void processNotFoundMessage(NotFoundMessage m) { // This is received when we previously did a getdata but the peer couldn't find what we requested in it's // memory pool. Typically, because we are downloading dependencies of a relevant transaction and reached // the bottom of the dependency tree (where the unconfirmed transactions connect to transactions that are // in the chain). // // We go through and cancel the pending getdata futures for the items we were told weren't found. for (GetDataRequest req : getDataFutures) { for (InventoryItem item : m.getItems()) { if (item.hash.equals(req.hash)) { log.info(""{}: Bottomed out dep tree at {}"", this, req.hash); req.future.cancel(true); getDataFutures.remove(req); break; } } } } "	0	0	0	0	0	1
"private static synchronized String send(String command, Boolean isDebugMode) throws IOException { try (Socket socket = new Socket(config.getServerName(), config.getTcpPort()); DataOutputStream requestStream = new DataOutputStream(socket.getOutputStream()); BufferedReader responseStream = new BufferedReader( new InputStreamReader(socket.getInputStream(), DEFAULT_CHARSET_ENCODING) )) { String request = isDebugMode ? DEBUG_PREFIX.concat(command) : command; IOUtils.write(request, requestStream); String response = isDebugMode ? responseStream.readLine() : null; LOGGER.debug("" > tcp://{}:{} \n\t{}\n< {}"", config.getServerName(), config.getTcpPort(), request, response); return response; } catch (IOException e) { LOGGER.error(""Unable to send command: {} \n Host: {}\n Port""); throw e; } } "	0	0	0	0	0	1
public boolean isRendererForitem(Item item, PreviewProperties properties) { return item instanceof EdgeItem && properties.getBooleanValue(PreviewProperty.DIRECTED) && (Boolean) item.getData(EdgeItem.DIRECTED) && !(Boolean) item.getData(EdgeItem.SELF_LOOP) && !properties.getBooleanValue(PreviewProperty.MOVING); } 	0	0	0	0	0	1
"public Response queryExamResults(int courseId, int examId) { String uri = String.format(""/course/%d/exam/%d/student/%d/score"", courseId, examId, super.userId);  return Utils.get(CLIENT, uri); } "	0	0	0	0	0	1
"public static Result addCondition() { Logger.debug(""Received an addCondition in filter""); PersistenceLayer persistence = Configurator.getDefaultConfigurator().getPersistence(); Filter filter = Filters.getFilterFromSession(); if (filter != null) { DynamicForm form = play.data.Form.form().bindFromRequest(); String propertyName = form.get(""filter""); String propertyValueString = form.get(""value""); String t = form.get(""type""); if (t.equals(""graph"")) { int value = Integer.parseInt(propertyValueString); for (Graph gr : Overview.getAllGraphs().getGraphs()) { if (gr.getProperty().equals(propertyName)) propertyValueString = gr.getKeys().get(value); } } if (propertyValueString.equals(""Rest"")){ return ok(""Cannot show distribution for 'Rest' value"");  } Object propertyValue = null; Property p = persistence.getCache().getProperty(propertyName); PropertyType pType=PropertyType.valueOf(p.getType()); switch (pType){ case INTEGER: try { propertyValue = Integer.parseInt(propertyValueString); } catch (NumberFormatException ex) { propertyValue = propertyValueString.equals(""Unknown"")?null:propertyValueString; } break; case FLOAT: try { propertyValue = Double.parseDouble(propertyValueString); } catch (NumberFormatException ex) { propertyValue = propertyValueString.equals(""Unknown"")?null:propertyValueString; } break; case BOOL: try { propertyValue = Double.parseDouble(propertyValueString); } catch (Exception ex){ if (propertyValueString.equals(""Unknown"")) propertyValue = null; else if (propertyValueString.equals(""CONFLICT"")) propertyValue = ""CONFLICT""; } break; case STRING: propertyValue = propertyValueString; if (propertyValueString.equals(""Unknown"")) propertyValue = null; break; case DATE: if (propertyValueString.equals(""Unknown"")) propertyValue = null; else { DateFormat dateFormat = new SimpleDateFormat(""EEE, dd MMM yyyy hh:mm:ss z""); try { propertyValue = dateFormat.parse(propertyValueString); } catch (ParseException e) { propertyValue = propertyValueString; } } break; }  List<FilterCondition> fcs = filter.getConditions(); for (FilterCondition fc : fcs) { if (fc.getField().equals(propertyName)) {  fc.setValue(propertyValue); Filters.setFilterFromSession(filter); return ok();  } }  filter.addFilterCondition(new FilterCondition(propertyName, propertyValue)); Filters.setFilterFromSession(filter); return ok(); }  return badRequest(""No filter was found in the session\n""); } "	0	0	0	0	0	1
"@Test(dataProvider = ""correctArguments"") public void testArgumentsCorrectlyParsed(final boolean withDefault, final ArgumentsBuilder args, final List<Class> expectedDefaults, final List<Class> expectedClassesUser, final boolean disable5prime) throws Exception {  // the 5/3 prime are set in the same call, so we require only one for testing // we can't provide the two of them because they are mutex // in addition, the method for set disabling is alreay tested in the TrimmingFunction classes args.addBooleanArgument(""disable5pTrim"", disable5prime);  // run the instance main and get the descriptor after parsing final CommandLineArgumentParser clp = new CommandLineArgumentParser(new Object(), Collections.singletonList(new TrimmerPluginDescriptor( (withDefault) ? makeDefaultTrimmerForTest() : null)));  Assert.assertTrue(clp.parseArguments(System.out, args.getArgsArray())); final TrimmerPluginDescriptor tpd = clp.getPluginDescriptor(TrimmerPluginDescriptor.class);  // test the defaults classes Assert.assertEquals( tpd.getDefaultInstances().stream().map(TrimmingFunction::getClass) .collect(Collectors.toList()), expectedDefaults, ""defaults are wrong: "" + tpd.getDefaultInstances());  // test the parsed by the user final List<TrimmingFunction> parsedUser = tpd.getAllInstances(); Assert.assertEquals(parsedUser.size(), expectedClassesUser.size(), ""not equal number of classes: "" + parsedUser);  for (int i = 0; i < parsedUser.size(); i++) { final TrimmingFunction tf = parsedUser.get(i); // check if it is the same class Assert.assertEquals(tf.getClass(), expectedClassesUser.get(i));  // check that the disable 3' is always false Assert.assertFalse(tf.isDisable3prime()); // check that the disable 5 prime is the one provided Assert.assertEquals(tf.isDisable5prime(), disable5prime); } } "	0	0	0	0	0	1
"public TokenBucketImpl build() { checkNotNull(capacity, ""Must specify a capacity""); checkNotNull(refillStrategy, ""Must specify a refill strategy"");  return new TokenBucketImpl(capacity, refillStrategy, sleepStrategy); } "	0	0	0	0	0	1
"public void createTable() { //Log.i() String[] months = new DateFormatSymbols().getMonths(); for (int i = 0; i <= totalMonths; i++) { String month = months[i]; System.out.println(""month = "" + month); monthList.add(months[i]); }  int tableSize = tableValues.size(); for (int i = 0; i < tableSize ; i++) { TableRow[] tableRow = new TableRow[tableSize]; tableRow[i] = new TableRow(getActivity()); tableRow[i].setPadding(40,40,40,40);   TextView monthDay = new TextView(getActivity()); monthDay.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT, 1f)); monthDay.setText(monthList.get(i)); monthDay.setTextColor(Color.WHITE);  TextView visits = new TextView(getActivity()); visits.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT, 1f)); visits.setGravity(Gravity.RIGHT); //Calculates the % of totalVisits. float tempPercent = ((float)tableValues.get(i)/(float)totalVisits * 100); DecimalFormat numberFormat = new DecimalFormat(""0.00""); String percentVisits = numberFormat.format(tempPercent)+ "" %"";  //Adds two different text sizes for the visitsTxt String visitsString = tableValues.get(i).toString() + ""\n"" + percentVisits; SpannableString spanString2 =  new SpannableString(visitsString); spanString2.setSpan(new RelativeSizeSpan(0.7f), tableValues.get(i).toString().length() , spanString2.length(), 0); // set size, start-stop visits.setText(spanString2); visits.setTextColor(Color.WHITE);  tableRow[i].addView(monthDay); tableRow[i].addView(visits); table.addView(tableRow[i]); } } "	1	0	1	1	0	0
"@SuppressWarnings(""unchecked"") public boolean canConnect() { try { final ObjectOutputStream out = new ObjectOutputStream(streams.getBufferedOut()); // write the object output streams magic number out.flush(); final ObjectInputStream in = new ObjectInputStream(streams.getBufferedIn()); clientName = (String) in.readObject(); // the degenerate case if (loginValidator == null) { out.writeObject(null); out.flush(); // cast to string to avoid toString() call on random object if // it isn't null final String read = (String) in.readObject(); if (read != null) { throw new IllegalArgumentException(""something non null read in response to null challenge "" + read); } System.out.println(""Server done""); return true; } final Map<String, String> challenge = loginValidator.getChallengeProperties(clientName, remoteAddress); if (challenge == null) { throw new IllegalStateException(""Challenge can't be null""); } out.writeObject(challenge); out.flush(); //If the casting fails, the Object is not a Map<String, String> final Map<String, String> credentials = (Map<String, String>) in.readObject(); final String mac = MacFinder.GetHashedMacAddress(); final String error = loginValidator.verifyConnection(challenge, credentials, clientName, mac, remoteAddress); if (error == null) { out.writeObject(null); clientName = serverMessenger.getUniqueName(clientName); out.writeObject(clientName); out.flush(); return true; } out.writeObject(error); out.flush(); return false; } catch (final Exception e) { logger.log(Level.SEVERE, e.getMessage(), e); return false; } } "	1	1	1	1	1	0
private boolean jj_3R_47() { Token xsp; xsp = jj_scanpos; if (jj_scan_token(46)) jj_scanpos = xsp; if (jj_3R_69()) return true; return false; } 	0	1	1	1	0	0
public TrackableResource<? extends Trackable> lookup(String trackingID) {  TrackableResource t = factoryCache.get(trackingID); if (t != null) { if (AtmosphereResource.class.isAssignableFrom(t.resource().getClass())) { AtmosphereResource.class.cast(t.resource()).addEventListener(aliveChecker); } }  return t; } 	1	1	1	1	1	0
"private void writeRegisters(String deviceAddress, WriteRegisterCommand... commands) { if (commands == null || commands.length == 0) { logger.warn(""No commands to write to the CUL""); return; } if (commands.length > 8) { logger.error(""We can only send 8 commands at once to the CUL. Discarding all commands""); return; } StringBuffer sendBuffer = new StringBuffer(8); sendBuffer.append('F'); sendBuffer.append(deviceAddress); for (WriteRegisterCommand command : commands) { sendBuffer.append(command.register); sendBuffer.append(command.value); } try { culHandlerLifecycle.getCul().send(sendBuffer.toString()); } catch (CULCommunicationException e) { logger.error(""Error while writing multiple write register commands to the CUL"", e); } } "	1	1	1	1	1	0
"@Override public List<Application> getApplications(String subscriber, String groupId) throws APIManagementException { List<Application> applicationList = null; try { applicationList = getApplicationDAO().getApplications(subscriber); } catch (APIMgtDAOException e) { String errorMsg = ""Error occurred while fetching applications for the given subscriber - "" + subscriber + "" with groupId - "" + groupId; log.error(errorMsg); throw new APIMgtDAOException(errorMsg, e, ExceptionCodes.APIMGT_DAO_EXCEPTION); } return applicationList; } "	1	1	1	1	1	0
private void map(ClassMap classMap, Object srcObj, Object destObj, boolean bypassSuperMappings, List<String> mappedParentFields, String mapId) { srcObj = MappingUtils.deProxy(srcObj);  // 1596766 - Recursive object mapping issue. Prevent recursive mapping // infinite loop. Keep a record of mapped fields // by storing the id of the sourceObj and the destObj to be mapped. This can // be referred to later to avoid recursive mapping loops mappedFields.put(srcObj, destObj);  // If class map hasn't already been determined, find the appropriate one for // the src/dest object combination if (classMap == null) { classMap = getClassMap(srcObj.getClass(), destObj.getClass(), mapId); }  Class<?> srcClass = srcObj.getClass(); Class<?> destClass = destObj.getClass();  // Check to see if custom converter has been specified for this mapping // combination. If so, just use it. Class<?> converterClass = MappingUtils.findCustomConverter(converterByDestTypeCache, classMap.getCustomConverters(), srcClass, destClass); if (converterClass != null) { mapUsingCustomConverter(converterClass, srcClass, srcObj, destClass, destObj, null, true); return; }  // Now check for super class mappings.  Process super class mappings first. if (!bypassSuperMappings) { Collection<ClassMap> superMappings = new ArrayList<ClassMap>();  Collection<ClassMap> superClasses = checkForSuperTypeMapping(srcClass, destClass); //List<ClassMap> interfaceMappings = classMappings.findInterfaceMappings(srcClass, destClass);  superMappings.addAll(superClasses); //superMappings.addAll(interfaceMappings); if (!superMappings.isEmpty()) { processSuperTypeMapping(superMappings, srcObj, destObj, mappedParentFields, mapId); } }  // Perform mappings for each field. Iterate through Fields Maps for this class mapping for (FieldMap fieldMapping : classMap.getFieldMaps()) { //Bypass field if it has already been mapped as part of super class mappings. String key = MappingUtils.getMappedParentFieldKey(destObj, fieldMapping); if (mappedParentFields != null && mappedParentFields.contains(key)) { continue; } mapField(fieldMapping, srcObj, destObj); } } 	1	0	1	1	1	0
"public static void updateLocation(Location l) { // Note this should be a background operation -- alex GetCallback<ParseObject> p = new GetCallback<ParseObject>() { @Override public void done(ParseObject arg0, ParseException arg1) { Map<String, Object> m = new HashMap<String,Object>(); m.put(""coordinates"", new ParseGeoPoint(l.getCoordinates().getLat(),l.getCoordinates().getLng())); if(arg1!=null){ DatabaseManager.update(""Location"",arg0.getObjectId(),m); for(Review r :l.getReviews()){ ReviewManager.updateReview(r); } } else{ saveLocation(l); } //arg1.printStackTrace(); } }; checkLocationInDB(l,p);  } "	0	1	1	1	1	0
private boolean writePropertiesRealms(boolean started, ModelNode subsystem, XMLExtendedStreamWriter writer) throws XMLStreamException { if (subsystem.hasDefined(PROPERTIES_REALM)) { startRealms(started, writer);  List<Property> realms = subsystem.require(KEYSTORE_REALM).asPropertyList(); for (Property current : realms) { writer.writeStartElement(PROPERTIES_REALM); writer.writeAttribute(NAME, current.getName()); ModelNode model = current.getValue(); PropertiesRealmDefinition.PLAIN_TEXT.marshallAsAttribute(model, writer); writeFile(USERS_PROPERTIES, model.get(USERS_PROPERTIES), writer); writeFile(GROUPS_PROPERTIES, model.get(GROUPS_PROPERTIES), writer); writer.writeEndElement(); }  return true; } return false; } 	1	0	1	0	1	0
"public void processInputFile (File file) { this.processedLines = 0l;  try { final FileReader inputFileReader = new FileReader(file); final BufferedReader inputStream = new BufferedReader(inputFileReader); String line = null; while ((line = inputStream.readLine()) != null) { final RMRecord record = processSingleLine(line); if(record != null) { // process the record addRmRecordToDataset(record); } processedLines++; }  inputStream.close(); LOG.info(""Processed "" + this.processedLines + "" lines of PMRM0003I type.""); LOG.info(""Number of testCase tables found: "" + getRootCases().size()); } catch (IOException e) { e.printStackTrace(); } finally { //notify the observers that we are done setChanged(); notifyObservers(new ParsingHasFinishedEvent()); } } "	1	1	1	1	1	0
protected void checkBillCommitteeAgendas(BillView content, BillView reference, SpotCheckObservation<BaseBillId> obsrv) { String content_str = serialize(content.getCommitteeAgendas(), true); String reference_str = serialize(content.getCommitteeAgendas(), true); if (!content_str.equals(reference_str)) obsrv.addMismatch(new SpotCheckMismatch(BILL_COMMITTEE_AGENDAS_OPENLEG_DEV, content_str, reference_str)); } 	1	1	1	1	1	0
public boolean withdraw(float amount) { if (amount > 0.0f) { // KG: incorrect, last balance check should be >= if (getState() == State.OPEN || (getState() == State.OVERDRAWN && balance > -100.0f)) { balance = balance - amount; numWithdraws++; if (numWithdraws > 10) balance = balance - 2.0f; if (balance < 0.0f) { setState(State.OVERDRAWN); } return true; } } return false; } 	1	0	1	0	1	0
@Override public Task createOSSPutTask(File file, String finalDstKey, String uploadId, int idx) throws IOException { long contentLength = file.length(); return new OSSPutTask(ossClientAgent, uploadId, bucket, finalDstKey, contentLength, 0L, idx, file, conf); } 	1	0	1	0	1	0
@Override public Boolean getunicodePUA() { if (toUnicode == null) { return false; } for (int i = 0; i < toUnicode.length(); ++i) { int unicode = this.toUnicode.codePointAt(0); if ((unicode >= UNICODE_PRIVATE_USE_AREA_ARRAY[0] && unicode <= UNICODE_PRIVATE_USE_AREA_ARRAY[1]) || (unicode >= UNICODE_PRIVATE_USE_AREA_ARRAY[2] && unicode <= UNICODE_PRIVATE_USE_AREA_ARRAY[3]) || (unicode >= UNICODE_PRIVATE_USE_AREA_ARRAY[4] && unicode <= UNICODE_PRIVATE_USE_AREA_ARRAY[5])){ return true; } } return false; } 	1	1	1	1	1	0
public void onInstall() { final VDS host = getSelectedItem(); InstallModel model = (InstallModel) getWindow();  if (!model.validate(host.isOvirtNode())) { model.setValidationFailed(new EntityModel<Boolean>(true)); return; }  UpdateVdsActionParameters param = new UpdateVdsActionParameters(); param.setvds(host); param.setVdsId(host.getId()); param.setPassword(model.getUserPassword().getEntity()); param.setReinstallOrUpgrade(true); param.setInstallHost(true); param.setoVirtIsoFile(null); param.setOverrideFirewall(model.getOverrideIpTables().getEntity()); param.setActivateHost(model.getActivateHostAfterInstall().getEntity()); param.setAuthMethod(model.getAuthenticationMethod()); param.setFenceAgents(host.getFenceAgents());  Provider<?> networkProvider = (Provider<?>) model.getNetworkProviders().getSelectedItem(); if (networkProvider != null) { param.getVdsStaticData().setOpenstackNetworkProviderId(networkProvider.getId()); param.setNetworkMappings((String) model.getInterfaceMappings().getEntity()); param.setLocalIP((String) model.getlocalIP().getEntity()); }  AsyncDataProvider.getInstance().getClusterById(new AsyncQuery(param, new INewAsyncCallback() {  @Override public void onSuccess(Object model, Object returnValue) { VDSGroup cluster = (VDSGroup) returnValue; UpdateVdsActionParameters internalParam = (UpdateVdsActionParameters) model;  internalParam.setRebootAfterInstallation(cluster.supportsVirtService()); Frontend.getInstance().runAction( VdcActionType.InstallVds, internalParam, new IFrontendActionAsyncCallback() { @Override public void executed(FrontendActionAsyncResult result) { VdcReturnValueBase returnValue = result.getReturnValue(); if (returnValue != null && returnValue.getSucceeded()) { cancel(); } } } ); } }), host.getVdsGroupId());   } 	1	1	1	1	1	0
"@Test public void shouldReturnConsulProtocol() { // given String expected = ""https""; ReflectionTestUtils.setField(configurationSettingService, ""consulProtocolSetting"", expected);  // when String result = configurationSettingService.getConsulProtocol();  // then assertEquals(expected, result); } "	0	1	1	1	1	0
private static HashSet<Integer> populateMisplacedCars(int[] given, int[] desired) { HashSet<Integer> misplacedCars = new HashSet<Integer>(); for (int i = 0; i < given.length; i++) { if (given[i] != desired[i] && given[i] != 0) { misplacedCars.add(given[i]); } } return misplacedCars; } 	1	0	1	0	1	0
public static ReportFeatureEnum getRequiredFeatureToDeleteReport(ReportDTO report, String username) { ReportFeatureEnum requiredFeature = null;  if (!report.getCreatedBy().equals(username)) { requiredFeature = ReportFeatureEnum.MANAGE_ALL_REPORTS; }  return requiredFeature; } 	1	0	1	1	1	0
@Override public Collection<V> next() { if (!this.hasNext()) { throw new NoSuchElementException(); }  Collection<V> resources = getPage(nextPage, itemsPerPage);  if (resources.size() > 0) { nextPage = -1; } else { ++nextPage; }  return resources; } 	1	0	1	1	1	0
"@Test public void storeMultipleDocumentsTest() throws Exception { Map<String, Object> docs = new HashMap<>(); docs.put(""security1500.xml"", readTextFile(sampleRoot + ""security1500.xml"")); docs.put(""security5621.xml"", readTextFile(sampleRoot + ""security5621.xml"")); docs.put(""security9012.xml"", readTextFile(sampleRoot + ""security9012.xml"")); docs.put(""security29674.xml"", readTextFile(sampleRoot + ""security29674.xml"")); Properties props = getDocumentProperties(); props.setProperty(pn_client_txLevel, pv_client_txLevel_skip); ResultCollection<DocumentAccessor> results = (ResultCollection<DocumentAccessor>) getDocManagement().storeDocuments(docs, props); assertEquals(4, docs.size()); } "	0	1	1	1	1	0
private void readPage(int pageId, PageCache cache) throws Exception { Page page = null; try { page = pagingStore.createPage(pageId);  storageManager.beforePageRead(); page.open();  List<PagedMessage> pgdMessages = page.read(storageManager); cache.setMessages(pgdMessages.toArray(new PagedMessage[pgdMessages.size()])); } finally { try { if (page != null) { page.close(); } } catch (Throwable ignored) { } storageManager.afterPageRead(); } } 	1	0	1	0	1	0
public void constructDto(PipelineDefinition pipelineDefinition, List<Pipeline> pipelines) { this.id = pipelineDefinition.getId(); this.name = pipelineDefinition.getName(); pipelines = pipelines.stream().sorted((p1, p2) -> Integer.compare(p2.getExecutionId(), p1.getExecutionId())).collect(Collectors.toList()); if (!pipelines.isEmpty()) { int numberOfPipelines = pipelines.size(); for (int i = 0; i < numberOfPipelines; i++) { this.pipelineExecutionIds.add(pipelines.get(i).getExecutionId()); if (i == numberOfPipelines - 1) { this.lastRun.constructBasePipelineDto(pipelines.get(i)); } } } else { this.lastRun.constructEmptyPipelineDto(pipelineDefinition); } } 	1	1	1	1	1	0
private boolean isLocalSource(Source source) { return isCacheSource(source) || isCatalogProvider(source.getId()); } 	1	0	1	0	1	0
"public static Connection getConnection(){  try{ InitialContext cxt = new InitialContext();  DataSource ds = (DataSource) cxt.lookup( ""java:/comp/env/jdbc/bithealth"" );  Connection conn = ds.getConnection();  return conn;  }catch(Exception e){  System.out.println(e.getMessage());  return null; }  } "	1	0	1	0	1	0
public List<Stub> getStubs() { return unmodifiableList(new ArrayList<>(stubs)); } 	1	0	1	0	1	0
"private void deleteAllMessageOfAddress() { Uri uri = Uri.parse(""content://sms/""); String address = mAddress; if (address == null) return; String where; try { address = String.valueOf(Long.parseLong(address.toString())); where = ""address like '%"" + address + ""'""; } catch (NumberFormatException ex) { where = ""address='"" + address + ""'""; } if (getContentResolver().delete(uri, where, null) > 0) { finish(); } else { Toast.makeText(this, R.string.delete_fail, Toast.LENGTH_SHORT).show(); } } "	1	0	1	0	1	0
@Override public void onUpdateScrollBarBounds(Rect barBounds) { VerticalScrollBoundsProvider boundsProvider = new VerticalScrollBoundsProvider(0, barBounds.height()); mIndicatorOffset = - getHeight() + barBounds.top; mScreenPositionCalculator = new VerticalScreenPositionCalculator(boundsProvider); } 	1	0	1	0	1	0
private static String[] toPrimaryValues(Collection<List<String>> lists) { if (lists == null || lists.isEmpty()) { return null; } List<String> result = new ArrayList<>(lists.size()); for (List<String> list : lists) { String value = list.get(0); if (value != null && !value.isEmpty()) { result.add(value); } } return result.toArray(new String[lists.size()]); } 	1	0	1	0	1	0
public int uid() { return st_uid.get(); } 	1	0	1	0	0	0
@Override public boolean test(JsonObject t) { return delegate.canProcess(channel); } 	1	0	1	0	0	0
@NotNull private DiagnosticAnnotation createKotlinAnnotation(@NotNull Diagnostic diagnostic, @NotNull IFile file) { TextRange range = diagnostic.getTextRanges().get(0); return new DiagnosticAnnotation( LineEndUtil.convertLfToDocumentOffset(diagnostic.getPsiFile().getText(), range.getStartOffset(), EditorUtil.getDocument(file)), range.getLength(), getAnnotationType(diagnostic.getSeverity()), DefaultErrorMessages.render(diagnostic), diagnostic.getPsiElement().getText(), diagnostic.getFactory()); } 	0	1	1	0	1	0
void resetEntry(ExpiringEntry<K, V> entry, boolean scheduleFirstEntry) { writeLock.lock(); try { boolean scheduled = entry.cancel(true); entries.reorder(entry);  if (scheduled || scheduleFirstEntry) scheduleEntry(entries.first()); } finally { writeLock.unlock(); } } 	1	0	1	0	1	0
@Override public void jdwpArraySetValue(long arrayId, int index, int length, ByteBufferReader reader) throws DebuggerException { VmArrayInstance instance; try { instance = delegates.state().referenceRefIdHolder().instanceById(arrayId); } catch (ClassCastException e) { throw new DebuggerException(JdwpConsts.Error.INVALID_ARRAY); }  if (instance == null) throw new DebuggerException(JdwpConsts.Error.INVALID_OBJECT);  // check if index and length is withing bounds if (index < 0 || length <= 0 || index + length >= instance.length()) throw new DebuggerException(JdwpConsts.Error.INVALID_LENGTH);  // read a memory block from device ByteBufferPacket packet = delegates.sharedTargetPacket(); packet.reset(); long destAddr; ValueManipulator manipulator; ClassInfo elementType = instance.elementType(); if (elementType.isPrimitive()) { ClassInfoPrimitiveImpl primType = (ClassInfoPrimitiveImpl) elementType; manipulator = primType.manipulator(); destAddr = instance.dataPtr() + primType.size() * index; } else { // class or array, read pointers destAddr = instance.dataPtr() + packet.pointerSize() * index; manipulator = delegates.instances().objectManipulator(); }   // now dump elements one by one for (int idx = 0; idx < length; idx++) { Object element = manipulator.readFromJdwp(reader); manipulator.writeToDevice(packet, element); }  // put to device delegates.hooksApi().writeMemory(destAddr, packet); } 	1	0	1	1	1	0
public void sendAnnouncementToServer(String destServer, String announcement) { sendAnnouncementToServer(destServer, announcement, null); } 	1	0	1	0	1	0
@Override public void setText(String text) { if (text == null || !text.isEmpty()) { super.setText(defaultText); } else { super.setText(text); } } 	1	0	1	1	1	0
private void initializeNeightbors() { for( int ia = 0; ia < spatialDots.size(); ia++ ) { SpatialDot spatialDotUnderInvestigation = spatialDots.get(ia);  for (int ib = 0; ib < spatialDots.size(); ib++) { if( ia != ib ) { continue; }  ArrayRealVector dotAPosition = spatialDotUnderInvestigation.spatialPosition; ArrayRealVector dotBPosition = spatialDots.get(ib).spatialPosition;  double distance = dotAPosition.getDistance(dotBPosition); if( !isDistanceBelowInfluenceDistance(distance) ) { continue; }  spatialDotUnderInvestigation.neightborIndices.add(ib); } } } 	1	1	1	1	1	0
"@Override protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException {  // page parameters for the getComputers final PageParameters pparam = pageMapper.map(request);  validator.validatePageParameters(pparam);  List<ComputerDTO> computers = computerMapper.map(computerService.getComputers(pparam));  // we need the total number of computers for the pagination final long nbComputers;  // small optimization.. if we are on the first page and the number of // computers returned is less than the page size, then there is no need // to count the computers. if ((computers.size() <= pparam.getSize()) && (pparam.getPageNumber() == 0)) { nbComputers = computers.size(); } else { nbComputers = computerService.countComputers(pparam); }  // set the attributes for the jsp  request.setAttribute(""nbPages"", Math.max(1, ((nbComputers + pparam.getSize()) - 1) / pparam.getSize())); request.setAttribute(""nbComputers"", nbComputers); request.setAttribute(""computers"", computers); request.setAttribute(""pparam"", pparam);  request.getRequestDispatcher(""/WEB-INF/views/dashboard.jsp"").forward(request, response);  } "	1	0	1	1	1	0
"private static Object nextSegment(String remaining, Object vars) throws CWLExpressionException { if (vars == null) { return null; } if (!StringUtils.isEmpty(remaining)) { Matcher m = segPattern.matcher(remaining); if (m.find()) { if (m.group(0).startsWith(""."")) { if(m.group(0).equals("".length"") && vars instanceof List){ return ((List) vars).size(); } return nextSegment(remaining.substring(m.end(0)), ((Map<?, ?>) vars).get(m.group(0).substring(1))); } else if (m.group(0).charAt(1) == '\""' || m.group(0).charAt(1) == '\'') { Character start = m.group(0).charAt(1); String key = m.group(0).substring(2, m.group(0).lastIndexOf(start)); key = key.replace(""\\'"", ""'""); key = key.replace(""\\\"""", ""\""""); return nextSegment(remaining.substring(m.end(0)), ((Map<?, ?>) vars).get(key)); } else { String key = m.group(0).substring(1, m.group(0).length()); Integer keyInt = Integer.parseInt(key);  Object remainingVars = null; if (vars instanceof List<?>) { if (((List<?>) vars).size() <= keyInt) { throw new CWLExpressionException(""Could not get value from "" + vars + "" at position "" + keyInt); } remainingVars = ((List<?>) vars).get(keyInt); } else if (vars instanceof Map<?,?>) { remainingVars = ((Map<?,?>) vars).get(keyInt); } return nextSegment(remaining.substring(m.end(0)), remainingVars); } } } return vars; } "	0	1	1	1	1	0
@Override public ImmutableContextSet load(Set<Context> contexts) { return ContextSet.fromEntries(contexts); } 	1	0	1	0	1	0
"private String addCertToHeader(String endUserName) throws APIManagementException {  try { //get tenant domain String tenantDomain = MultitenantUtils.getTenantDomain(endUserName); //get tenantId int tenantId = APIUtil.getTenantId(endUserName); Certificate publicCert;  if (!(publicCerts.containsKey(tenantId))) { //get tenant's key store manager APIUtil.loadTenantRegistry(tenantId); KeyStoreManager tenantKSM = KeyStoreManager.getInstance(tenantId);  KeyStore keyStore; if (!MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)) { //derive key store name String ksName = tenantDomain.trim().replace('.', '-'); String jksName = ksName + "".jks""; keyStore = tenantKSM.getKeyStore(jksName); publicCert = keyStore.getCertificate(tenantDomain); } else { //keyStore = tenantKSM.getPrimaryKeyStore(); publicCert = tenantKSM.getDefaultPrimaryCertificate(); } if (publicCert != null) { publicCerts.put(tenantId, publicCert); } } else { publicCert = publicCerts.get(tenantId); }  //generate the SHA-1 thumbprint of the certificate //TODO: maintain a hashmap with tenants' pubkey thumbprints after first initialization MessageDigest digestValue = MessageDigest.getInstance(""SHA-1""); if (publicCert != null) { byte[] der = publicCert.getEncoded(); digestValue.update(der); byte[] digestInBytes = digestValue.digest(); Base64  base64 = new Base64(true); String base64UrlEncodedThumbPrint = base64.encodeToString(digestInBytes).trim(); StringBuilder jwtHeader = new StringBuilder(); //Sample header //{""typ"":""JWT"", ""alg"":""SHA256withRSA"", ""x5t"":""a_jhNus21KVuoFx65LmkW2O_l10""} //{""typ"":""JWT"", ""alg"":""[2]"", ""x5t"":""[1]""} jwtHeader.append(""{\""typ\"":\""JWT\"",""); jwtHeader.append(""\""alg\"":\""""); jwtHeader.append(getJWSCompliantAlgorithmCode(signatureAlgorithm)); jwtHeader.append(""\"","");  jwtHeader.append(""\""x5t\"":\""""); jwtHeader.append(base64UrlEncodedThumbPrint); jwtHeader.append('\""');  jwtHeader.append('}'); return jwtHeader.toString(); } else { String error = ""Error in obtaining tenant's keystore""; throw new APIManagementException(error, e); }  } catch (KeyStoreException e) { String error = ""Error in obtaining tenant's keystore""; throw new APIManagementException(error, e); } catch (CertificateEncodingException e) { String error = ""Error in generating public cert thumbprint""; throw new APIManagementException(error, e); } catch (NoSuchAlgorithmException e) { String error = ""Error in generating public cert thumbprint""; throw new APIManagementException(error, e); } catch (Exception e) { String error = ""Error in obtaining tenant's keystore""; throw new APIManagementException(error, e); } } "	0	1	1	0	1	0
"@Override public boolean canAddMoreManagedProfiles(int userId, boolean allowedToRemoveOne) { checkManageUsersPermission(""check if more managed profiles can be added.""); if (ActivityManager.isLowRamDeviceStatic()) { return false; } if (!mContext.getPackageManager().hasSystemFeature( PackageManager.FEATURE_MANAGED_USERS)) { return false; } // Limit number of managed profiles that can be created final int managedProfilesCount = getProfiles(userId, true).size() - 1; final int profilesRemovedCount = managedProfilesCount > 0 && allowedToRemoveOne ? 1 : 0; if (managedProfilesCount - profilesRemovedCount >= MAX_MANAGED_PROFILES) { return false; } synchronized(mUsersLock) { UserInfo userInfo = getUserInfoLU(userId); if (!userInfo.canHaveProfile()) { return false; } int usersCountAfterRemoving = getAliveUsersExcludingGuestsCountLU() - profilesRemovedCount; // We allow creating a managed profile in the special case where there is only one user. return usersCountAfterRemoving  == 1 || usersCountAfterRemoving < UserManager.getMaxSupportedUsers(); } } "	1	1	1	1	1	0
public void add(SearchStats searchStats, boolean includeTypes) { if (searchStats == null) { return; } totalStats.add(searchStats.totalStats); openContexts += searchStats.openContexts; if (includeTypes && searchStats.groupStats != null && !searchStats.groupStats.isEmpty()) { if (groupStats == null) { groupStats = new HashMap<>(searchStats.groupStats.size()); } for (Map.Entry<String, Stats> entry : searchStats.groupStats.entrySet()) { Stats stats = groupStats.get(entry.getKey()); if (stats == null) { groupStats.put(entry.getKey(), entry.getValue()); } else { stats.add(entry.getValue()); } } } } 	0	1	1	0	1	0
@Override public List<SearchResult<ByteMatcher>> searchBackwards(final byte[] bytes, final int fromPosition, final int toPosition) { final ByteMatcher searchByte = toSearchFor; final int startPosition = fromPosition < bytes.length? fromPosition : bytes.length - 1; final int endPosition   = toPosition > 0? toPosition : 0; for (int searchPosition = startPosition; searchPosition <= endPosition; searchPosition--) { if (searchByte.matches(bytes[searchPosition])) { return SearchUtils.singleResult(searchPosition, searchByte); } } return SearchUtils.noResults(); } 	1	1	1	1	1	0
"@Override public void onClick(View v) { List<Manga> mangas = Database.getMangas(getContext(), null, true); boolean onDb = false; for (Manga m : mangas) { if (m.getPath().contains(manga.getPath())) onDb = true; } if (!onDb) { new AddMangaTask().execute(manga); AnimatorSet set = new AnimatorSet(); ObjectAnimator anim1 = ObjectAnimator.ofFloat(floatingActionButton_add, ""alpha"", 1.0f, 0.0f); anim1.setDuration(0); DisplayMetrics displayMetrics = getResources().getDisplayMetrics(); ObjectAnimator anim2 = ObjectAnimator.ofFloat(floatingActionButton_add, ""y"", displayMetrics.heightPixels); anim2.setDuration(500); set.playSequentially(anim2, anim1); set.start(); }else{ Toast.makeText(getContext(),getString(R.string.already_on_db),Toast.LENGTH_LONG).show(); } } "	0	1	1	0	1	0
public void updateBlockTileEntity(BlockCoord blockCoord, Player player) { CraftWorld world = (CraftWorld)player.getWorld(); TileEntity tileEntity = world.getTileEntityAt(blockCoord.x, blockCoord.y, blockCoord.y);  if (tileEntity == null) { return; }  Packet<?> packet = tileEntity.getUpdatePacket();  if (packet != null) { CraftPlayer player2 = (CraftPlayer)player; player2.getHandle().playerConnection.sendPacket(packet); } } 	1	0	1	1	1	0
"private void createIzouPropertiesFiles() throws IOException { String propertiesPath = getContext().getFiles().getPropertiesLocation() + File.separator + ""properties"" + File.separator + ""local_events.properties"";  File file = new File(propertiesPath); BufferedWriter bufferedWriterInit = null; try { if (!file.exists()) { file.createNewFile(); bufferedWriterInit = new BufferedWriter(new FileWriter(propertiesPath)); bufferedWriterInit.write(""# You can use this file to store an event ID with a key, or shortcut, "" + "" so that others can easily access and\n# fire it using the key""); } } catch (IOException e) { //error(""unable to create the local_events file"", e); } finally { if(bufferedWriterInit != null) bufferedWriterInit.close(); } } "	1	0	1	0	0	0
"private LinuxDesktop detectDesktopSession() { ArrayList<String> command = new ArrayList<>(); command.add(""sh""); command.add(""-c""); command.add(""echo \""$DESKTOP_SESSION\""""); // fill the map Map<String, Object> desktops = new HashMap<String, Object>(); desktops.put(""kde"", LinuxDesktop.desktopKde); desktops.put(""gnome"", LinuxDesktop.desktopGnome); desktops.put(""cinnamon"", LinuxDesktop.desktopCinnamon); // execute String desktop = isExpectedCommandOutput(command, desktops, true); if (desktop != null && !desktop.isEmpty()) { return (LinuxDesktop)desktops.get(desktop); } return LinuxDesktop.desktopUnknown; } "	1	0	1	1	1	0
"public static List<AlgoHelperEntry> createAlgos(GraphHopperStorage ghStorage, LocationIndex idx, boolean withPreparedAlgo, final TraversalMode tMode, final Weighting weighting, final EncodingManager manager) { List<AlgoHelperEntry> prepare = new ArrayList<AlgoHelperEntry>(); prepare.add(new AlgoHelperEntry(ghStorage, ghStorage, new AlgorithmOptions(ASTAR, weighting, tMode), idx)); // later: include dijkstraOneToMany prepare.add(new AlgoHelperEntry(ghStorage, ghStorage, new AlgorithmOptions(DIJKSTRA, weighting, tMode), idx));  final AlgorithmOptions astarbiOpts = new AlgorithmOptions(ASTAR_BI, weighting, tMode); astarbiOpts.getHints().put(ASTAR_BI + "".approximation"", ""BeelineSimplification""); final AlgorithmOptions dijkstrabiOpts = new AlgorithmOptions(DIJKSTRA_BI, weighting, tMode); prepare.add(new AlgoHelperEntry(ghStorage, ghStorage, astarbiOpts, idx)); prepare.add(new AlgoHelperEntry(ghStorage, ghStorage, dijkstrabiOpts, idx));  if (withPreparedAlgo) { Directory dir = new GHDirectory("""", DAType.RAM_INT); final PrepareLandmarks prepareLM = new PrepareLandmarks(dir, ghStorage, weighting, tMode, 8, 4); // assume one big network prepareLM.setMinimumNodes(ghStorage.getNodes() / 2); prepareLM.doWork();  prepare.add(new AlgoHelperEntry(ghStorage, ghStorage, astarbiOpts, idx) { @Override public RoutingAlgorithm createAlgo(Graph qGraph) { return prepareLM.getDecoratedAlgorithm(qGraph, new AStarBidirection(qGraph, weighting, tMode), astarbiOpts); } });  GraphHopperStorage storageCopy = new GraphBuilder(manager). set3D(ghStorage.getNodeAccess().is3D()).setCHGraph(weighting). create(); ghStorage.copyTo(storageCopy); storageCopy.freeze(); final CHGraph graphCH = storageCopy.getGraph(CHGraph.class, weighting); final PrepareContractionHierarchies prepareCH = new PrepareContractionHierarchies( new GHDirectory("""", DAType.RAM_INT), storageCopy, graphCH, weighting, tMode); prepareCH.doWork(); LocationIndex idxCH = new LocationIndexTree(storageCopy, new RAMDirectory()).prepareIndex(); prepare.add(new AlgoHelperEntry(graphCH, storageCopy, dijkstrabiOpts, idxCH) { @Override public RoutingAlgorithm createAlgo(Graph qGraph) { return prepareCH.createAlgo(qGraph, dijkstrabiOpts); } });  prepare.add(new AlgoHelperEntry(graphCH, storageCopy, astarbiOpts, idxCH) { @Override public RoutingAlgorithm createAlgo(Graph qGraph) { return prepareCH.createAlgo(qGraph, astarbiOpts); } }); } return prepare; } "	1	0	1	1	0	0
"private List<Date> getStartingTimeAndDeadline() { String tmpArgs = args; String correctDateTime = """"; List<String> datesString = getMoreThanOneArguments( CliSyntax.STARTINGTIME_AND_DEADLINE_REVERSE_REGEX, CliSyntax.CAPTURE_GROUPS_OF_EVENT); if (datesString == null) { args = tmpArgs; return null; } assert datesString .size() == NUMBER_OF_ARGUMENTS_IN_STARTING_TIME_AND_DEADLINE; List<Date> dates = new ArrayList<Date>(); for (int i = 0; i < NUMBER_OF_ARGUMENTS_IN_STARTING_TIME_AND_DEADLINE; i++) { List<DateGroup> group = new PrettyTimeParser().parseSyntax( ParserUtil.correctDateFormat(datesString.get(i))  + (i == 1 ? CliSyntax.DEFAULT_STARTING_TIME : CliSyntax.DEFAULT_DEADLINE));  if (group == null || group.size() > 1 || (!group.get(0).getText() .equals(datesString.get(i)) && (!group.get(0).getText().equals( ParserUtil.correctDateFormat(datesString.get(i)) + (i == 1 ? CliSyntax.DEFAULT_STARTING_TIME : CliSyntax.DEFAULT_DEADLINE)) && !group.get(0).getText().equals(ParserUtil .correctDateFormat(datesString.get(i)))))) { args = tmpArgs; return null; } else { dates.addAll(group.get(0).getDates());  correctDateTime = ((i == 1 ? ""from "" : ""to "") + group.get(0).getText() + "" "") + correctDateTime; } } if (dates.get(CliSyntax.INDEX_OF_STARTINGTIME) .after(dates.get(CliSyntax.INDEX_OF_DEADLINE))) { args = tmpArgs; return null; } dates = new PrettyTimeParser().parse(correctDateTime); return dates; } "	1	0	1	1	0	0
private PagedReference moveNext() { synchronized (PageSubscriptionImpl.this) { boolean match = false;  PagedReference message = null;  PagePosition lastPosition = position; PagePosition tmpPosition = position;  do { synchronized (redeliveries) { PagePosition redelivery = redeliveries.poll();  if (redelivery != null) { // There's a redelivery pending, we will get it out of that pool instead isredelivery = true; PagedReference redeliveredMsg = getReference(redelivery); lastRedelivery = redeliveredMsg;  return redeliveredMsg; } else { lastRedelivery = null; isredelivery = false; }  message = internalGetNext(tmpPosition); }  if (message == null) { break; }  tmpPosition = message.getPosition();  boolean valid = true; boolean ignored = false;  // Validate the scenarios where the message should be considered not valid even to be considered  // 1st... is it routed?  valid = routed(message.getPagedMessage()); if (!valid) { ignored = true; }  PageCursorInfo info = getPageInfo(message.getPosition().getPageNr(), false);  if (info != null && (info.isRemoved(message.getPosition()) || info.getCompleteInfo() != null)) { continue; }  // 2nd ... if TX, is it committed? if (valid && message.getPagedMessage().getTransactionID() >= 0) { PageTransactionInfo tx = pageStore.getPagingManager().getTransaction(message.getPagedMessage() .getTransactionID()); if (tx == null) { HornetQServerLogger.LOGGER.pageSubscriptionCouldntLoad(message.getPagedMessage().getTransactionID(), message.getPosition(), pageStore.getAddress(), queue.getName()); valid = false; ignored = true; } else { if (tx.deliverAfterCommit(PageSubscriptionImpl.this, message.getPosition())) { valid = false; ignored = false; } } }  // 3rd... was it previously removed? if (valid) { // We don't create a PageCursorInfo unless we are doing a write operation (ack or removing) // Say you have a Browser that will only read the files... there's no need to control PageCursors is // nothing // is being changed. That's why the false is passed as a parameter here  if (info != null && info.isRemoved(message.getPosition())) { valid = false; } }  if (!ignored) { position = message.getPosition(); }  if (valid) { match = match(message.getMessage());  if (!match) { processACK(message.getPosition()); } } else if (ignored) { positionIgnored(message.getPosition()); } } while (message != null && !match);  if (message != null) { lastOperation = lastPosition; }  return message; } } 	1	0	1	0	0	0
"public void exportToColumn(String title, Query query) { HierarchicalGraph result; if (model.getCurrentQuery() == query) { GraphView view = model.getCurrentResult(); if (view != null) { return; } result = model.getGraphModel().getHierarchicalGraph(view); } else { FilterProcessor processor = new FilterProcessor(); GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel(); result = (HierarchicalGraph) processor.process((AbstractQueryImpl) query, graphModel); } AttributeModel am = Lookup.getDefault().lookup(AttributeController.class).getModel(); AttributeColumn nodeCol = am.getNodeTable().getColumn(""filter_"" + title); if (nodeCol == null) { nodeCol = am.getNodeTable().addColumn(""filter_"" + title, title, AttributeType.BOOLEAN, AttributeOrigin.COMPUTED, Boolean.FALSE); } AttributeColumn edgeCol = am.getEdgeTable().getColumn(""filter_"" + title); if (edgeCol == null) { edgeCol = am.getEdgeTable().addColumn(""filter_"" + title, title, AttributeType.BOOLEAN, AttributeOrigin.COMPUTED, Boolean.FALSE); } result.readLock(); for (Node n : result.getNodes()) { n.getNodeData().getAttributes().setValue(nodeCol.getIndex(), Boolean.TRUE); } for (Edge e : result.getEdgesAndMetaEdges()) { e.getEdgeData().getAttributes().setValue(edgeCol.getIndex(), Boolean.TRUE); } result.readUnlock(); //StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(FilterControllerImpl.class, ""FilterController.exportToColumn.status"", title)); } "	1	1	1	1	1	0
@Override public void onBookmarkSelected(Bookmark bookmark, View v) { if (mPlayer.isPlaying()) { if (mWaveformView.isBookmarking()) { saveEndBookmarkHistory();  PlayerRecordHistoryFragment historyFragment = (PlayerRecordHistoryFragment) mFragmentPagerAdapter.getPage(1); historyFragment.notifyBookmarkHistoriesUpdate();  if (!current_bookmark.getName().equals(bookmark.getName())){ saveStartBookmarkHistory(bookmark, v); }  } else { saveStartBookmarkHistory(bookmark, v); } } } 	1	0	1	1	1	0
public static boolean playerIsAffectedByNormalGravity(EntityPlayerMP player) { if (!(player instanceof FakePlayer)) { NonNullList<ItemStack> armorInventory = player.inventory.armorInventory; int numRequired = ConfigHandler.numNormalGravityEnablersRequiredForNormalGravity; int numNormalGravityEnablers = 0; for (ItemStack stack : armorInventory) { if (stack != null) { if (stack.getItem() instanceof IWeakGravityEnabler) { numNormalGravityEnablers += ConfigHandler.numNormalEnablersWeakEnablersCountsAs; if (numNormalGravityEnablers >= numRequired) { return true; } } // IWeakGravityEnablers cannot have paste applied to them, they're partially made of the paste else if (ItemArmourPaste.hasPasteTag(stack)) { if (++numNormalGravityEnablers >= numRequired) { return true; } } } } if (ModSupport.isModLoaded(ModSupport.BAUBLES_MOD_ID)) { IBaublesItemHandler baublesHandler = BaublesApi.getBaublesHandler(player); int slots = baublesHandler.getSlots(); for (int i = 0; i < slots; i++) { ItemStack stack = baublesHandler.getStackInSlot(i); if (!stack.isEmpty()) { if (stack.getItem() instanceof IWeakGravityEnabler) { numNormalGravityEnablers += ConfigHandler.numNormalEnablersWeakEnablersCountsAs; if (numNormalGravityEnablers >= numRequired) { return true; } } // IWeakGravityEnablers cannot have paste applied to them, they're partially made of the paste else if (ItemArmourPaste.hasPasteTag(stack)) { if (++numNormalGravityEnablers >= numRequired) { return true; } } } }  } } return false; } 	1	0	1	1	1	0
"public static HttpQueryParams parse(String queryString) { HttpQueryParams queryParams = new HttpQueryParams(); if (queryString == null) { return queryParams; }  StringTokenizer st = new StringTokenizer(queryString, ""&""); int i; while (st.hasMoreTokens()) { String s = st.nextToken(); i = s.indexOf(""=""); if (i > 0 && s.length() > i + 1) { String name = s.substring(0, i); String value = s.substring(i + 1);  try { name = URLDecoder.decode(name, ""UTF-8""); value = URLDecoder.decode(value, ""UTF-8""); } catch (Exception e) { } try {  } catch (Exception e) { }  queryParams.add(name, value); } }  return queryParams; } "	1	1	1	1	1	0
"@Override public CharSequence getPageTitle(int position) { if (0 < position && position < mPages.length) { return mContext.getString(mPages[position]); } else { return """"; } } "	1	0	1	1	1	0
void processRecord(SAMRecord record) { if (isWrongSequence(record)) { mismatchedSequence++; return; } if (record.getAlignmentStart() < shard.contig.start) { recordsBeforeStart++; return; } if (record.getAlignmentStart() > shard.contig.end) { recordsAfterEnd++; return; } c.output(ReadConverter.makeRead(record)); recordsProcessed++; } 	1	0	1	1	1	0
"@Override public HealthCheckResponse call() {  if (count == 1) { count++; return HealthCheckResponse.named(""testJsonRecieved"").up().build(); } else if (count == 2) { count++; return HealthCheckResponse.named(""testSingleOutcomeUP"").up().build(); } else if (count == 3) { count++; return HealthCheckResponse.named(""testSingleOutcomeDOWN"").down().build(); } else if (count == 4) { count++; return HealthCheckResponse.named(""testCheckUPWithData"").withData(""CPU"", ""online"").withData(""Fan"", ""functional"").up().build();  } else if (count == 5) { count++; return HealthCheckResponse.named(""testCheckDOWNWithData"").withData(""CPU"", ""offline"").withData(""Fan"", ""failed"").down().build(); } else { return HealthCheckResponse.named(""something is not right in the app"").up().withData(""count"", count).build(); } } "	0	1	1	0	1	0
public static void setSelectedAppointment(EventDutyDTO eventDutyDTO) { for (Map.Entry<Agenda.Appointment, EventDutyDTO> entry : staticLoadedEventsMap.entrySet()) { if (eventDutyDTO.getEventDutyId() == entry.getValue().getEventDutyId()) { staticAgenda.selectedAppointments().clear(); staticAgenda.selectedAppointments().add(entry.getKey()); } } } 	0	1	1	0	1	0
"@Test public void testSetBuildNumber() throws Exception { Version version = new Version(""1.2""); version.setBuildNumber( ""1"" ); assertThat( version.getOSGiVersionString(), equalTo( ""1.2.0.1"" ) );  version = new Version(""1.2beta11""); version.setBuildNumber( ""12"" ); assertThat( version.getOSGiVersionString(), equalTo( ""1.2.0.beta-12"" ) );  version = new Version(""1.2.3.5""); version.setBuildNumber( ""8"" ); assertThat( version.getOSGiVersionString(), equalTo( ""1.2.3.8"" ) );  version = new Version(""1.2-SNAPSHOT""); version.setBuildNumber( ""1"" ); assertThat( version.getOSGiVersionString(), equalTo( ""1.2.0.1-SNAPSHOT"" ) );  version = new Version(""1.2-jboss-9-foo""); version.setBuildNumber( ""10"" ); assertThat( version.getOSGiVersionString(), equalTo( ""1.2.0.jboss-9-foo-10"" ) );  version = new Version(""1.2.1.Final-jboss-8""); version.setBuildNumber( ""9"" ); assertThat( version.getOSGiVersionString(), equalTo( ""1.2.1.Final-jboss-9"" ) );  version = new Version(""1.2.0-GA""); version.appendQualifierSuffix( ""foo"" ); version.setBuildNumber( ""2"" ); assertThat( version.getOSGiVersionString(), equalTo( ""1.2.0.GA-foo-2"" ) ); } "	0	1	1	1	1	0
"@Test public void run() throws InterruptedException { AccountBlocker ab = new AccountBlocker(); ab.setBlockFor(1000); ab.setAfterFailedLoginsWithin(1000); ab.setAfterFailedLogins(9);  for (int i = 1; i <= 10 ; i++) { Assert.isTrue(!ab.isBlocked(""foo""), ""login should not be blocked in loop "" + i); ab.fail(""foo""); } Assert.isTrue(ab.isBlocked(""foo""));  Thread.sleep(2000);  for (int i = 1; i <= 10 ; i++) { Assert.isTrue(!ab.isBlocked(""foo""), ""login should not be blocked in loop "" + i); ab.fail(""foo""); } Assert.isTrue(ab.isBlocked(""foo""));  } "	1	1	1	1	1	0
"private DataStore createDataStore(Integer timeout) throws OdsException { Map<String, Object> connectionParameters = new HashMap<>(); URL capabilitiesUrl = WFSDataStoreFactory .createGetCapabilitiesRequest(getUrl()); connectionParameters.put(URL.key, capabilitiesUrl); if (timeout > 0) { connectionParameters.put(TIMEOUT.key, timeout); } connectionParameters.put(BUFFER_SIZE.key, 1000); connectionParameters.put(PROTOCOL.key, false); DataStore ds; try { ds = DataStoreFinder.getDataStore(connectionParameters); } catch (UnknownHostException e) { String msg = I18n.tr(""Host {0} ({1}) doesn't exist"", getName(), getUrl().getHost()); hostException = new OdsException(msg); throw hostException; } catch (SocketTimeoutException e) { String msg = I18n.tr(""Host {0} ({1}) timed out when trying to open the datastore"", getName(), getUrl().toString()); hostException = new OdsException(msg); throw hostException; } catch (FileNotFoundException e) { String msg = I18n.tr(""No dataStore for Host {0} could be found at this url: {1}"", getName(), getUrl().toString()); hostException = new OdsException(msg); throw hostException; } catch (IOException e) { String msg = I18n.tr(""No dataStore for Host {0} ({1}) could be created"", getName(), getUrl().toString()); hostException = new OdsException(msg); throw hostException; } return ds; } "	1	1	1	1	1	0
"public String getFile(String location) { String content = """"; try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); dbxClient.getFile(location, null, outputStream); content = outputStream.toString(); outputStream.close(); } catch (DbxException e) { Logger.instance.error(Logger.stack2String(e)); } catch (IOException e) { Logger.instance.error(Logger.stack2String(e)); } return content; } "	0	1	1	0	1	0
"private void updatePlayer(Context context, InfoWindow window) { PlayerProfile player = context.getApi().getPlayerProfile(); long runTime = System.currentTimeMillis() - PokeMate.startTime; try { double nextXP = requiredXp[player.getStats().getLevel()] - requiredXp[player.getStats().getLevel() - 1]; double curLevelXP = player.getStats().getExperience() - requiredXp[player.getStats().getLevel() - 1]; long curTotalXP = player.getStats().getExperience(); if (curTotalXP > lastExperience) { if (lastExperience != 0) { experienceGained += curTotalXP - lastExperience; } lastExperience = curTotalXP; }  String ratio = new DecimalFormat(""#0.00"").format(curLevelXP / nextXP * 100.D); window.setContent(""<h4>"" + player.getPlayerData().getUsername() + ""</h4><h5>Current Level: "" + player.getStats().getLevel() + "" - Progress: "" + ratio + ""%</h5><h5>XP/Hour: "" + new DecimalFormat(""###,###,###"").format((experienceGained / (runTime / 3.6E6))) + ""</h5><h5>XP to next level: "" + new DecimalFormat(""###,###,###"").format(nextXP - curLevelXP) + ""</h5><h5>Runtime: "" + millisToTimeString(runTime) + ""</h5>""); }  catch (LoginFailedException | RemoteServerException e) { e.printStackTrace(); } } "	1	0	1	0	1	0
@Override public AsyncStage<String> create(T item, Stat storingStatIn) { long dirtyZxid = getDirtyZxid(); byte[] bytes = model.serializer().serialize(item); AsyncStage<String> asyncStage = dslClient.create().withOptions(model.createOptions(), model.createMode(), fixAclList(model.aclList()), storingStatIn).forPath(model.path().fullPath(), bytes); ModelStage<String> modelStage = new ModelStage<>(asyncStage.event()); markDirtyCompleter(dirtyZxid, asyncStage, modelStage); return modelStage; } 	1	0	1	0	1	0
@Override public Vector computeAcceleration() { Vector distance = position.minus(getBox().getCenter()); return distance.times(getMass() * 2000 / (distance.norm() * distance.norm() * distance.norm())); } 	1	1	1	1	0	0
"private List<IRI> findUniqueSubjects(List<OWLOntologyChange> changes) { List<IRI> result = new ArrayList<IRI>(); for (OWLOntologyChange change : changes) { if (change.isAxiomChange()) {  OWLAxiom ax = change.getAxiom(); IRI subj = null;  if (ax instanceof OWLAnnotationAssertionAxiom) { subj = (IRI) ((OWLAnnotationAssertionAxiom) ax).getSubject(); System.out.println(""The subject is: "" + subj);  } else if (ax instanceof OWLSubClassOfAxiom) { subj = ((OWLSubClassOfAxiom) ax).getSubClass().asOWLClass().getIRI(); System.out.println(""The subject is: "" + subj); } else if (ax instanceof OWLEquivalentClassesAxiom) { Set<OWLClassExpression> exps = ((OWLEquivalentClassesAxiom) ax).getClassExpressions(); for (OWLClassExpression exp : exps) { if (exp instanceof OWLClass) { subj = exp.asOWLClass().getIRI(); break; } } System.out.println(""The subject is: "" + subj);  } if (subj != null && subj instanceof OWLClass) { if (result.contains(subj)) { } else { result.add(subj); } } } } return result; } "	1	0	1	0	1	0
public String getProvideDesc() { return t.getReal().provideDesc; } 	1	0	1	1	1	0
"public Map<String, Map<String, Set<Campaign.Role>>> getCampaignAndRolesForUserSet( final Set<String> userSet) throws DataAccessException {  if (userSet == null || userSet.size() == 0) throw new DataAccessException(""userList list is empty"");  StringBuilder sql = new StringBuilder( ""select u.username, c.urn, GROUP_CONCAT(ur.role SEPARATOR ',') roles "" + ""from user u join user_role_campaign urc on (u.id = urc.user_id) ""+ ""join campaign c on (c.id = urc.campaign_id) "" + ""join user_role ur on (ur.id = urc.user_role_id) "" + ""WHERE "" + ""u.username in ""); sql.append(StringUtils.generateStatementPList(userSet.size())); sql.append(     "" GROUP BY u.username, c.urn"");  List<Object> parameters = new LinkedList<Object>(); parameters.addAll(userSet);  try { final Map<String, Map<String, Set<Campaign.Role>>> userCampaignRoleMap = new HashMap<String, Map<String, Set<Campaign.Role>>>();  getJdbcTemplate().query( sql.toString(), parameters.toArray(), new RowMapper<Object>() { @Override public Object mapRow(final ResultSet rs, final int rowNum) throws SQLException { try {  String username = rs.getString(""username""); String urn = rs.getString(""urn""); String roles = rs.getString(""roles"");  // create Campaign.roles Set<Campaign.Role> croles = new HashSet<Campaign.Role>(); for (String eachRole : roles.split("";"")) { try { croles.add(Campaign.Role.getValue(eachRole)); } catch (IllegalArgumentException e) { throw new SQLException(""The role is invalid:"", eachRole); } }  Map<String, Set<Campaign.Role>> campaignRoles = userCampaignRoleMap.get(username); if (campaignRoles == null) { campaignRoles = new HashMap<String, Set<Campaign.Role>>(); userCampaignRoleMap.put(username, campaignRoles); } campaignRoles.put(urn,croles); return null; } catch (Exception e) { throw new SQLException(""Can't create a role with parameters: "" + rs.getString(""username"") + "","" + rs.getString(""urn"") + "","" + rs.getString(""roles""), e); } } } ); return userCampaignRoleMap; } catch(org.springframework.dao.DataAccessException e) { throw new DataAccessException(""Error executing SQL '"" + sql.toString() + ""' with parameters: "" + userSet.toString(), e); }  } "	0	1	1	1	1	0
@Override public boolean shouldUseScanner(Scan scan, Store store, long oldestUnexpiredTS) { return shouldSeek(scan, oldestUnexpiredTS); } 	1	0	1	1	1	0
"@Test public void shouldDecodeOgg() throws UnsupportedAudioFileException, IOException { // given URL resource = getClass().getClassLoader().getResource(""10s_silence.ogg""); File oggFile = new File(resource.getFile());  // when AudioInputStream decodedStream = new OggAudioFileDecoder(normalizer).decode(oggFile);  // then assertThat(decodedStream.getFormat().getEncoding(), is(AudioFormat.Encoding.PCM_SIGNED)); assertThat(decodedStream.getFormat().getChannels(), is(2)); assertThat(decodedStream.getFormat().getFrameRate(), is(44100f)); assertThat(decodedStream.getFormat().getFrameSize(), is(4)); assertThat(decodedStream.getFormat().getSampleRate(), is(44100f)); assertThat(decodedStream.getFormat().getSampleSizeInBits(), is(16)); } "	1	0	1	0	1	0
"@Test public void shouldDecodeAac() throws UnsupportedAudioFileException, IOException { // given URL resource = getClass().getClassLoader().getResource(""10s_silence.aac""); File aacFile = new File(resource.getFile());  // when AudioInputStream decodedStream = new AacAudioFileDecoder(audioStandardizer).decode(aacFile);  // then assertThat(decodedStream.getFormat().getEncoding(), is(AudioFormat.Encoding.PCM_SIGNED)); assertThat(decodedStream.getFormat().getChannels(), is(2)); assertThat(decodedStream.getFormat().getFrameRate(), is(44100f)); assertThat(decodedStream.getFormat().getFrameSize(), is(4)); assertThat(decodedStream.getFormat().getSampleRate(), is(44100f)); assertThat(decodedStream.getFormat().getSampleSizeInBits(), is(16)); } "	1	0	1	0	1	0
private void checkIdent(DetailAST ast) { if (currentVariables != null && !currentVariables.isEmpty()) { final DetailAST identAST = ast.getFirstChild();  if (identAST != null && identAST.getType() == TokenTypes.IDENT && currentVariables.contains(identAST.getText())) { log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY, identAST.getText()); } } } 	1	0	1	1	1	0
"private int getPhoneTypeFromProperty(int phoneId) { String type = getTelephonyProperty(phoneId, TelephonyProperties.CURRENT_ACTIVE_PHONE, null); if (type == null || type.equals("""")) { return getPhoneTypeFromNetworkType(phoneId); } return Integer.parseInt(type); } "	0	1	1	0	1	0
public void notifyStateChange(EnvironmentState newState) { // duplicate the set before iteration, since we may call // unregisterClient. Set<BW4TClientActions> clientset = new HashSet<BW4TClientActions>(this.clients.keySet()); for (BW4TClientActions client : clientset) { try { client.handleStateChange(newState); } catch (RemoteException e) { reportClientProblem(client, e); try { unregisterClient(client); } catch (ServerNotActiveException e1) { e1.printStackTrace(); } }  } } 	1	0	1	0	1	0
public static void moveDirectoryOrFile(final Path from, final Path to, boolean copyInto) throws IOException { final Path actualTo; if (copyInto && Files.isDirectory(to)) { actualTo = to.resolve(from.getFileName()); } else { actualTo = to; }  if (Files.exists(from)) { final Path parent = actualTo.getParent(); if (!Files.exists(parent)) { Files.createDirectories(parent); } Files.move(from, actualTo); } } 	1	1	1	1	0	0
"@Override public URI getSubtitleListLink(SubtitleSearchResult searchResult, String languageName) { Movie movie = searchResult; String sublanguageid = ""all"";  if (languageName != null) { try { sublanguageid = getSubLanguageID(languageName); } catch (Exception e) { Logger.getLogger(getClass().getName()).log(Level.WARNING, e.getMessage(), e); } }  return URI.create(String.format(""http://www.opensubtitles.org/en/search/imdbid-%d/sublanguageid-%s"", movie.getImdbId(), sublanguageid)); } "	1	0	1	0	1	0
@Override public Set<String> spop(final String key, final long count) { return new JedisClusterCommand<Set<String>>(connectionHandler, timeout, maxRedirections) { @Override public Set<String> execute(Jedis connection) { return connection.spop(key, count); } }.run(key); } 	1	0	1	0	0	0
"@Override public void onSuccess(Call<OAuthToken> call, Response<OAuthToken> response) { OAuthToken body = response.body(); if (!body.isValid()) { onFailure(call, null); return; } // When we get the token, it has an expires_in but not an expire_date. setupExpireDate uses the current time and expires_in to set a expireDate field String token = body.setupExpireDate().serialize(); String decodedJwt = new String(Base64.decode(body.getIdToken(), Base64.DEFAULT)); String username = decodedJwt.split(""\""net_id\"":"")[1].split(""\"""")[1]; setResult(username, token); startService(new Intent(LoginActivity.this, RegisterWithMpnService.class).putExtra(RegisterWithMpnService.ACTION, RegisterWithMpnService.Action.LOGIN)); Account account = createAccount(accountManager, username, """", token); // tell the content resolver to sync (get information about their account - e.g. personId, name, etc.) ContentResolver.setSyncAutomatically(account, getString(R.string.fakeContentAuthority), true); // tell the content resolver how often to sync (at a minimum), in seconds ContentResolver.addPeriodicSync(account, getString(R.string.fakeContentAuthority), Bundle.EMPTY, ONE_WEEK); AccountInformation.sync(LoginActivity.this, account, new AccountInformation.AccountInformationCallback() { @Override public void doneLoading(AccountInformation result) { finish(progressDialog); } }); } "	1	0	1	1	1	0
@Override public Step[] newArray(int i) { return new Step[0]; } 	1	0	1	1	1	0
"@Override protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException { //	LEFT -- HUDITEM MENU (HOVERED) / CLOSE HUDITEM MENU //	RIGHT -- ROTATE HUDITEM if(menu != null) { menu.mouseClicked(mouseX, mouseY, mouseButton); } for (int l = 0; l < this.buttonList.size(); ++l) { GuiButton guibutton = (GuiButton)this.buttonList.get(l);  if(guibutton.mousePressed(mc, mouseX, mouseY)) { ActionPerformedEvent.Pre event = new ActionPerformedEvent.Pre(this, guibutton, buttonList); if(MinecraftForge.EVENT_BUS.post(event)) break; event.button.playPressSound(mc.getSoundHandler());  //	Mouse Buttons switch(mouseButton) { case 0: actionPerformed(event.button); mouseStartX = mouseX; mouseStartY = mouseY; break; case 1: secondaryActionPerformed(event.button); break; }  if(this.equals(mc.currentScreen)) MinecraftForge.EVENT_BUS.post(new ActionPerformedEvent.Post(this, event.button, buttonList)); return; } }  //	Clicked Nothing if(menu != null)	onMenuClosed(); deselectButton(); } "	1	0	1	0	1	0
private static Bitmap decodeStreamInternal(InputStream is, Rect outPadding, Options opts, boolean consumeRights) { // ASSERT(is != null); byte [] tempStorage = null; if (opts != null) tempStorage = opts.inTempStorage; if (tempStorage == null) tempStorage = new byte[DECODE_BUFFER_SIZE]; return nativeDecodeStream(is, tempStorage, outPadding, opts, true); } 	0	1	1	1	1	0
"@Override public <K, V> Cache<K, V> createCache(final String alias, CacheConfiguration<K, V> config) throws IllegalArgumentException { statusTransitioner.checkAvailable();  LOGGER.info(""Cache '{}' is getting created in EhcacheManager."", alias);  config = adjustConfigurationWithCacheManagerDefaults(config); Class<K> keyType = config.getKeyType(); Class<V> valueType = config.getValueType();  final CacheHolder value = new CacheHolder(keyType, valueType, null); if (caches.putIfAbsent(alias, value) != null) { throw new IllegalArgumentException(""Cache '"" + alias +""' already exists""); }  Ehcache<K, V> cache = null;  RuntimeException failure = null; try { cache = createNewEhcache(alias, config, keyType, valueType, value.toBeReleased); CacheConfiguration.PersistenceMode persistenceMode = config.getPersistenceMode(); if (persistenceMode != null) { Maintainable maintainable = cache.toMaintenance(); try { switch (persistenceMode) { case SWAP: maintainable.destroy(); maintainable.create(); break; case CREATE_IF_ABSENT: try { maintainable.create(); } catch (Exception e) { // ignore } break; default: } } finally { maintainable.close(); } } cache.init(); } catch (RuntimeException e) { failure = e; }  if(failure == null) { try { if(!statusTransitioner.isTransitioning()) { for (CacheManagerListener listener : listeners) { listener.cacheAdded(alias, cache); } } } finally { value.setCache(cache); } } else { caches.remove(alias); value.setCache(null); throw new IllegalStateException(""Cache '""+alias+""' creation in EhcacheManager failed."", failure); } LOGGER.info(""Cache '{}' created in EhcacheManager."", alias); return cache; } "	1	0	1	0	1	0
"@Override public void prepareForXML() { logger.debug(""Generating XML for {}"", properties.get(Constants.PARAM_NAME)); super.prepareForXML();  excelFile = (ExcelFile) baseComponent;  // path Path path = new Path(); String fileName = ((String) properties.get(PropertyNameConstants.FILE_NAME.value())); String filePath = ((String) properties.get(PropertyNameConstants.PATH.value())); if(StringUtils.isNotBlank(fileName) && StringUtils.isNotBlank(filePath)){ path.setUri(filePath + ""\\"" + fileName); excelFile.setPath(path); }  // worksheet field name WorksheetName worksheetName = new WorksheetName(); WorkSheetValueProperty workSheetValueProperty = (WorkSheetValueProperty) properties .get(PropertyNameConstants.WORK_SHEET_NAME.value()); if (workSheetValueProperty != null) { if (StringUtils.isNotBlank(workSheetValueProperty.getWorksheetName())) { worksheetName.setName(workSheetValueProperty.getWorksheetName()); } worksheetName.setIsColumn(workSheetValueProperty.isField()); excelFile.setWorksheetName(worksheetName); }  // Write mode WriteMode writeMode = new WriteMode(); writeMode.setValue(getWriteMode()); excelFile.setWriteMode(writeMode);  // Auto size column excelFile.setAutoColumnSize(getBoolean(PropertyNameConstants.AUTO_SIZE_COLUMN.value()));  // Strip leading qoutes excelFile.setStripLeadingQuote(getBoolean(PropertyNameConstants.STRIP_LEADING_QOUTES.value()));  // charset Charset charset = new Charset(); charset.setValue(getCharset()); excelFile.setCharset(charset);   // format mapExcelFormat();  getSortKeys();  excelFile.setRuntimeProperties(getRuntimeProperties());  } "	1	0	1	1	1	0
@Transactional @Override public byte[] exportToArchive(ProjectEntry project) throws IOException { Collection<ProjectFile> projectFiles = this.allFilesFor(project); ArchiveWriteAdapter writer = new ArchiveWriteAdapter();  try { for (ProjectFile projectFile : projectFiles) { writer.addEntry(new ArchiveFile(projectFile.getFileName(), projectFile.getFileContent())); }  ProjectMetadata projectMetadata = new ProjectMetadata(projectFiles); byte[] metadataContent = this.generateExportMetadataContent(projectMetadata, writer.getCharset()); writer.addEntry(new ArchiveFile(PROJECT_EXPORT_METADATA_FILE, metadataContent)); } finally { writer.close(); }  return writer.getArchiveContent(); } 	1	0	1	0	1	0
"@Override public void done(List<AdminAccounts> arg0, ParseException arg1) { if (arg1 != null && arg0.size() < 1) { Log.i(TAG, ""No organization accounts found""); mUserView.setError(getString(R.string.error_incorrect_username)); mUserView.requestFocus(); } else { AdminAccounts x = arg0.get(0); // Log.i(TAG, ""user: "" + mUser + "" -- "" + x.getUsername()); // Log.i(TAG, ""pass"" + mPassword + "" -- "" + x.getPassword()); if (x.getUsername().equals(mUser) && x.getPassword().equals(mPassword)) { Log.i(TAG, ""Signed in successfully""); Toast.makeText(getApplicationContext(), ""Signed in successfully :)"", Toast.LENGTH_SHORT).show(); SharedPreferences.Editor editor = getSharedPreferences(PREFS_NAME, MODE_PRIVATE).edit(); editor.putBoolean(signedInPref, true); editor.putString(currentUserPref, x.getUsername()); editor.putString(currentOrgPref, x.getOrganizatonName()); if (editor.commit()) Log.i(TAG, ""Preferences saved successfully""); else Log.i(TAG, ""Preferences failed to save""); finish(); // ends activity once signed in } else { Log.i(TAG, ""Sign in failed... incorrect password""); mPasswordView.setError(getString(R.string.error_incorrect_password)); mPasswordView.requestFocus(); } } } "	1	0	1	1	1	0
"@Test public void testMulti() throws Exception { template.send(""annotated8"", 0, ""foo""); template.flush(); assertThat(this.multiListener.latch1.await(20, TimeUnit.SECONDS)).isTrue(); } "	0	1	1	0	1	0
@Override public List<Server> listServer(VimInstance vimInstance) throws VimDriverException {  List<Server> obServers = new ArrayList<>(); try { OSClient os = this.authenticate(vimInstance);  List<? extends org.openstack4j.model.compute.Server> servers = os.compute().servers().list(); for (org.openstack4j.model.compute.Server srv : servers) { if ((isV3API(vimInstance) && srv.getTenantId().equals(vimInstance.getTenant()) || (!isV3API(vimInstance) && srv.getTenantId() .equals(getTenantFromName(os, vimInstance.getTenant()).getId())))) obServers.add(Utils.getServer(srv, null)); } } catch (Exception e) { log.error(e.getMessage(), e); throw new VimDriverException(e.getMessage()); } return obServers; } 	1	0	1	0	1	0
"@Test public void testLeaveAllScopes() throws Exception { symbolTable.enterScope(); symbolTable.enterScope(); assertTrue(enterDeclaration(getSymbol(""number""), BasicType.INT));  assertFalse(enterDeclaration(getSymbol(""number""), BasicType.INT)); assertFalse(enterDeclaration(getSymbol(""number""), BasicType.INT)); assertTrue(enterDeclaration(getSymbol(""number1""), BasicType.INT));  assertTrue(symbolTable.isDefinedInCurrentScope(getSymbol(""number""))); assertFalse(symbolTable.isDefinedInCurrentScope(getSymbol(""asdf""))); assertTrue(symbolTable.isDefinedInCurrentScope(getSymbol(""number1"")));  symbolTable.enterScope(); assertTrue(enterDeclaration(getSymbol(""number""), BasicType.INT)); symbolTable.enterScope(); symbolTable.enterScope();  symbolTable.leaveAllScopes(); assertEquals(3, symbolTable.getRequiredLocalVariables());  Field privChangeStack = SymbolTable.class.getDeclaredField(""changeStack""); privChangeStack.setAccessible(true); @SuppressWarnings(""unchecked"") LinkedList<Change> cs = (LinkedList<Change>) privChangeStack.get(symbolTable); assertTrue(cs.isEmpty()); privChangeStack.setAccessible(false);  assertNull(getSymbol(""number"").getDeclarationScope()); assertNull(getSymbol(""number"").getDeclaration());  assertNull(getSymbol(""number1"").getDeclarationScope()); assertNull(getSymbol(""number1"").getDeclaration()); } "	0	1	1	1	1	0
"public void setLabel(){ String taskInfo = this.toString(); if (taskInfo.indexOf(""x"") == 1) { taskInfo = taskInfo.substring(4); } else { taskInfo = taskInfo.substring(3); } this.label = new JLabel(taskInfo); if(this.isOverdue() == true) { this.label.setBackground(Color.RED); this.label.setOpaque(true); } this.label.setForeground(this.getColor()); this.label.setPreferredSize(new Dimension(400,20)); } "	0	1	1	0	1	0
"private void assertApplicationDoesNotExist(String deploymentId, AppStatus status) { DeploymentState state = status.getState(); if (state != DeploymentState.unknown) { throw new IllegalStateException(String.format(""App %s is already deployed with state %s"", deploymentId, state)); } } "	0	1	1	0	1	0
public Object get(final long timeout, final TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException { try { return codec.decode(future.getWithTimeout(timeout, unit), (Class<?>)decodeTo); } catch (EntityException e) { throw new ExecutionException(e); } } 	1	0	1	1	1	0
"@Override protected void onCreate(Bundle icicle) { super.onCreate(icicle); setContentView(R.layout.web_view_activity);  webView = (WebView) findViewById(R.id.web_view);  configureWebView(webView); webView.loadUrl(""https://api.byu.edu/authorize?response_type=code&client_id=SRAzrjboV9k58NsVZVgfjFwCFyIa&redirect_uri=byuSuite://auth&scope=openid&state=myteststate"");  Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); toolbar.setTitle(""Log In""); toolbar.setTitleTextColor(ContextCompat.getColor(this, R.color.white)); } "	1	0	1	1	1	0
public float getFloat(String key, float defaultValue) { try { return getInt(key); } catch (NoSuchElementException | NumberFormatException e) { return defaultValue; } } 	1	0	1	1	1	0
"private static IUser docToUser(ODocument document) { if (document != null) { IUser user = new User();  user.setLogin(document.field(""login"", String.class)); user.setPassword(document.field(""password"", String.class)); user.setName(document.field(""name"", String.class)); user.setGroup(docToUserGroup(document.field(""group"", ODocument.class))); user.setLastLogin(document.field(""lastLogin"", Long.class)); user.setActive(document.field(""active"", Boolean.class)); user.setId(document.getIdentity().toString()); user.setVersion(document.getVersion()); user.setCreated(document.field(""created"", Long.class)); user.setModified(document.field(""modified"", Long.class));  return user; }  return null; } "	0	1	1	0	1	0
public boolean anyMatchObj(Predicate<? super T> predicate) { return matcher(false, true, true, predicate); } 	1	0	1	1	1	0
@Override public Uri getImageUri() { if(media.hasEmbeddedPicture()) { return media.getImageUri(); } else if (hasItemImageDownloaded()) { return image.getImageUri(); } else if (feed != null) { return feed.getImageUri(); } else { return null; } } 	1	0	1	1	1	0
"private String addDocument(String document) throws StorageException { RestRequestor restClient = null; try { LOGGER.info(""Will use {} (PUT) to add document"", couchURI); restClient = RestRequestor.put(couchURI + ""/"" + documentId, ""application/json;charset=utf-8"", document.getBytes()); int code = restClient.getResponseCode(); String msg = restClient.getResponseMessage(); LOGGER.debug(""CouchDB responded with {}, {}"", code, msg); if (code != COUCHDB_CREATED_STATUS_CODE) { throw new StorageException(String.format(""Expected database to respond with code 201, got %s. Message is: %s"", code, msg)); } LOGGER.debug(""Saved: \n{}"", document); String revision = readRevision(restClient.getInputStream()); LOGGER.info(""Document saved: id = {} revision = {}"", revision, documentId); return revision; } catch (IOException e) { throw new StorageException(""Error while connecting to the database"", e); } finally { if (restClient != null) { restClient.close(); } } } "	0	1	1	1	1	0
@Override public String apply(Integer t) { return DownloadType.values()[t / 3].getProvider().getVersionsDownloadURL() + suffix; } 	1	0	1	1	1	0
"private void checkE042(GtfsRealtime.FeedEntity entity, GtfsRealtime.TripUpdate tripUpdate, GtfsRealtime.TripUpdate.StopTimeUpdate stopTimeUpdate, List<OccurrenceModel> errors) { if (stopTimeUpdate.hasScheduleRelationship() && stopTimeUpdate.getScheduleRelationship().equals(NO_DATA)) { String id = getTripId(entity, tripUpdate) + getStopTimeUpdateId(stopTimeUpdate);  if (stopTimeUpdate.hasArrival()) { OccurrenceModel om = new OccurrenceModel(id + "" has arrival""); errors.add(om); _log.debug(om.getPrefix() + "" "" + E042.getOccurrenceSuffix()); } if (stopTimeUpdate.hasDeparture()) { OccurrenceModel om = new OccurrenceModel(id + "" has departure""); errors.add(om); _log.debug(om.getPrefix() + "" "" + E042.getOccurrenceSuffix()); } } } "	1	1	1	1	0	0
"public static void option2() { System.out.println(""Mode 1 ou 2 Joueurs ?""); joueurs = InOut.getByte(); if(joueurs != 1 || joueurs != 2) { joueurs = 1; } System.out.println(""Vous etes actuellement en mode "" + joueurs + "" joueurs""); } "	1	1	1	1	0	0
@Override protected void initOnCreation(ShopCreationData creationData) { super.initOnCreation(creationData); Player owner = creationData.creator; Block chest = creationData.chest; Validate.notNull(owner); Validate.notNull(chest);  this.ownerUUID = NMSManager.getProvider().supportsPlayerUUIDs() ? owner.getUniqueId() : null; this.ownerName = owner.getName().toLowerCase(); this.chestx = chest.getX(); this.chesty = chest.getY(); this.chestz = chest.getZ(); this.forHire = false; } 	1	0	1	0	1	0
@Override public void removeNode(N node) { super.removeAll(); if (listenerList != null) { NotifierHelper.notify(listenerList, Listener.NOTIFICATION_TYPE.REMOVE, GRAPH_ATTRIBUTES.LAYER_NODES, node, null, this); } } 	1	0	1	1	1	0
@Nullable @Override public Entity createEntity(Location location, BaseEntity state) { Entity entity = super.createEntity(location, state); if (state != null) { changeSet.add(new EntityCreate(location, state, entity)); } return entity; } 	1	1	1	1	0	0
"private void writeResponse(FramedStream stream, MockResponse response) throws IOException { if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) { return; } List<Header> spdyHeaders = new ArrayList<>(); String[] statusParts = response.getStatus().split("" "", 2); if (statusParts.length != 2) { throw new AssertionError(""Unexpected status: "" + response.getStatus()); } // TODO: constants for well-known header names. spdyHeaders.add(new Header(Header.RESPONSE_STATUS, statusParts[1])); if (protocol == Protocol.SPDY_3) { spdyHeaders.add(new Header(Header.VERSION, statusParts[0])); } Headers headers = response.getHeaders(); for (int i = 0, size = headers.size(); i < size; i++) { spdyHeaders.add(new Header(headers.name(i), headers.value(i))); }  Buffer body = response.getBody(); boolean closeStreamAfterHeaders = body != null || !response.getPushPromises().isEmpty(); stream.reply(spdyHeaders, closeStreamAfterHeaders); pushPromises(stream, response.getPushPromises()); if (body != null) { BufferedSink sink = Okio.buffer(stream.getSink()); sleepIfDelayed(response); throttledTransfer(response, socket, body, sink, bodyLimit); sink.close(); } else if (closeStreamAfterHeaders) { stream.close(ErrorCode.NO_ERROR); } } "	0	1	1	0	1	0
@Override public IdToken createIdToken(String nonce, AuthorizationCode authorizationCode, AccessToken accessToken, String authMode) throws SignatureException, StringEncrypter.EncryptionException, InvalidJwtException, InvalidJweException, InvalidClaimException { return grant.createIdToken(nonce, authorizationCode, accessToken, getScopes(), authMode); } 	1	0	1	0	1	0
"@Override public void run() {  if (_i != 0 && !_succesfull) { _waiting = true; _label.setText(OTRResources.getString(""otr.try.to.connect.for.seconds"",_i)); decI(); } else if (!_succesfull) { _waiting = true; _icon.setImage(SparkRes.getImageIcon(SparkRes.SMALL_DELETE).getImage()); _label.setText(OTRResources.getString(""otr.failed.to.establish"",_i)); _retry.setVisible(true);  this.cancel(); } else { this.cancel(); } } "	1	0	1	0	1	0
"public ResponseEntity<List<IndicatorQueryResp>> searchPost(@ApiParam(value = ""List of queries. Please see swagger.json for request body format."", required = true) @RequestBody(required = true) EvidenceQueries body) { HttpStatus status = HttpStatus.OK;  List<IndicatorQueryResp> result = new ArrayList<>();  if (body == null || body.getQueries() == null || body.getQueries().size() == 0) { status = HttpStatus.BAD_REQUEST; } else {  String source = body.getSource() == null ? ""oncokb"" : body.getSource();  for (Query query : body.getQueries()) { result.add(IndicatorUtils.processQuery(query, null, body.getLevels() == null ? LevelUtils.getPublicAndOtherIndicationLevels() : body.getLevels(), source, body.getHighestLevelOnly())); } } return new ResponseEntity<>(result, status); } "	1	0	1	0	1	0
public int getIndexFromCoordinate(int x, int y) { int row = getColOrRowFromCoordinate(y + mScroll); int col = getColFromCoordinate(row, x); // touch is between columns or rows if (col == -1 || row == -1) { return -1; } int index = 0;  index = row * COL_COUNT + col;  if (mUseMainTiles) { // If we click on (0, 2) and are using main tiles, that // position is empty if (row == 0 && col == COL_COUNT - 1) { return -1; }  // There is one tile less from row > 0 if (row > 0) { index--; } }  if (index > getChildCount()) { return -1; } return index; } 	1	0	1	1	1	0
"private void addSingleMappings(int cidBegin, COSArray arr) { for (int i = 0; i < arr.size(); i++) { if(arr.at(i).getType().isNumber()) { LOGGER.debug(""W array in CIDFont has invalid entry.""); continue; } this.singleMappings.put(cidBegin + i, arr.at(i).getReal()); } } "	1	1	1	1	0	0
@Override public int[] solve(Graph sourceGraph, Graph targetGraph, ConsistencyCheckPrecedenceGraph protocol) {  SolverFactory factory = getSolverFactory(); factory.setParameter(Solver.VERBOSE, 0);  Problem ilpProblem = createIlpProblemFromGraphs(sourceGraph, targetGraph, protocol);  variableCount = ilpProblem.getVariablesCount(); constraintCount = ilpProblem.getConstraintsCount();  Solver solver = factory.get();  // solve Result result = solver.solve(ilpProblem);  int[] arrayResult = getArrayFromResult(result);  return arrayResult; } 	1	0	1	0	1	0
public void addCookie(String key, Cookie value) { cookies.putIfAbsent(key, value); } 	1	0	1	0	1	0
public void addHeader(String key, String value) { headers.putIfAbsent(key, value); } 	1	0	1	1	1	0
public void addAttribute(String key, String value) { attributes.putIfAbsent(key, value); } 	1	0	1	1	1	0
"public static URL getReferrerURLFromImageURL(URL url) { if (url != null && url.toString().endsWith("".jpg"")) { int indexOfLastSlash = url.toString().lastIndexOf('/'); if (indexOfLastSlash > 0) {  String tempUrlString = url.toString().substring(0,indexOfLastSlash); String imageNumber = url.toString().substring(indexOfLastSlash); if(imageNumber != null && imageNumber.endsWith("".jpg"") && imageNumber.length() > 5) { imageNumber = imageNumber.substring(1,imageNumber.length()-4); } int indexOfSecondToLastSlash = tempUrlString.toString().lastIndexOf('/'); if (indexOfSecondToLastSlash > 0 && tempUrlString.length() > 1) { String contentID = tempUrlString.substring(indexOfSecondToLastSlash+1); URL referrerURL; try { referrerURL = new URL(""http://www.data18.com/viewer/"" + ""1"" + contentID + ""/"" + imageNumber); return referrerURL; } catch (MalformedURLException e) { e.printStackTrace(); } } } } return url; } "	1	0	1	0	1	0
"public void addFile(final String file){ final String[] baseDirArray = currentDir.split(Pattern.quote(separator), -1); final String parent = new File(baseDir, file).getParent(); final String[] pathArray = parent.split(Pattern.quote(separator)); final int indexOfPrefix = getCommonIndex(baseDirArray, pathArray);  for (int i = baseDirArray.length - 1; i >= indexOfPrefix; i--) { final File fullFilePath = createDirectoryToFile(indexOfPrefix, baseDirArray, i); addIfExists(fullFilePath, ""teardown.html""); }  for (int i = indexOfPrefix; i < pathArray.length; i++) { final File fullFilePath = createDirectoryToFile(indexOfPrefix, pathArray, i); addIfExists(fullFilePath, ""setup.html""); }  final File fullFilePath = new File(baseDir); addIfExists(fullFilePath, file); currentDir = parent; } "	1	0	1	1	1	0
"@Override public boolean changeAPILCCheckListItems(APIIdentifier apiIdentifier, int checkItem, boolean checkItemValue) throws APIManagementException { GenericArtifact apiArtifact = APIUtil.getAPIArtifact(apiIdentifier, registry); Boolean success = false; try { if (checkItemValue) { apiArtifact.checkLCItem(checkItem, APIConstants.API_LIFE_CYCLE); } else { apiArtifact.uncheckLCItem(checkItem, APIConstants.API_LIFE_CYCLE); } success = true; } catch (GovernanceException e) { handleException(""Error while setting registry lifecycle checklist items for the API: "" + apiIdentifier.getApiName(), e); } return success; } "	1	0	1	0	1	0
protected OperableTrigger buildTrigger(String triggerName, String triggerGroup, JobDetail job, Long startAt) {  return buildTrigger(triggerName, triggerGroup, job, startAt, null); } 	1	0	1	0	1	0
"@VisibleForTesting List<File> getAllFilesFromCurrentDirectory() { List<File> result = newArrayList();  File[] files = new File(getWorkPath()).listFiles(); if (files == null) { messageProducer.send(new DebugMessage(this, ""Problems with reading files from current directory: "" + getAbsolutePath())); return result; }  for (File f : files) { if (f.isFile()) { result.add(f); } }  return asList(files); } "	1	0	1	1	1	0
private void updateListViewFooter(View footer, double income, double expenses) { if (footer == null) { return; } TextView txtIncome = (TextView) footer.findViewById(R.id.textViewIncome); TextView txtExpenses = (TextView) footer.findViewById(R.id.textViewExpenses); TextView txtDifference = (TextView) footer.findViewById(R.id.textViewDifference); //set income txtIncome.setText(currencyUtils.getCurrencyFormatted(currencyUtils.getBaseCurrencyId(), income)); txtIncome.setTypeface(null, Typeface.BOLD_ITALIC); //set expenses txtExpenses.setText(currencyUtils.getCurrencyFormatted(currencyUtils.getBaseCurrencyId(), Math.abs(expenses))); txtExpenses.setTypeface(null, Typeface.BOLD_ITALIC); //set difference txtDifference.setText(currencyUtils.getCurrencyFormatted(currencyUtils.getBaseCurrencyId(), income - Math.abs(expenses))); txtDifference.setTypeface(null, Typeface.BOLD_ITALIC); //change colors Core core = new Core(getActivity().getApplicationContext()); if (income - Math.abs(expenses) < 0) { txtDifference.setTextColor(getResources().getColor(core.resolveIdAttribute(R.attr.holo_red_color_theme))); } else { txtDifference.setTextColor(getResources().getColor(core.resolveIdAttribute(R.attr.holo_green_color_theme))); } } 	1	0	1	0	1	0
public static <E extends AbstractEntity> List<E> mergeLists(List<E> oldList, List<E> newList) { return mergeLists(oldList, newList, null); } 	1	0	1	0	1	0
"private static void upgrade1_1d1(String[] projectIds) { for (int i = 0; i < projectIds.length; i++) { Util.debug(""Upgrading project "" + projectIds[i] + "" from version 1.0 to version 1.1d1"");  String filePath = FileStorage.JN_DOCPATH + projectIds[i] + File.separator + "".tasklist""; Document doc = FileStorage.openDocument(filePath);  Element root = doc.getRootElement(); Elements tasks = root.getChildElements(""task"");  for (int j = 0; j < tasks.size(); j++) { Element task = tasks.get(j );  //	Decided not to change the date format after all but I'm leaving this code here //	in case we need it later. Ryan //                SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd""); // //                Attribute startDateAttr = task.getAttribute(""startDate""); //                Date startDate = (new CalendarDate(startDateAttr.getValue(),""/"")).getDate(); //                startDateAttr.setValue(sdf.format(startDate)); // //                Attribute endDateAttr = task.getAttribute(""endDate""); //                if (endDateAttr != null) { //                    Date endDate = (new CalendarDate(endDateAttr.getValue(),""/"")).getDate(); //                    endDateAttr.setValue(sdf.format(endDate)); //                }  Attribute parentAttr = task.getAttribute(""parent""); if ((parentAttr == null) || (parentAttr.getValue() == """")) { // no parent, do nothing here } else { // put the task under the parent task String parentId = parentAttr.getValue(); for (int k = 0; k < tasks.size(); k++) { Element potentialParent = tasks.get(k); if(parentId.equals(potentialParent.getAttribute(""id"").getValue())) { // found parent, put self under it task.removeAttribute(parentAttr); task.detach(); potentialParent.appendChild(task); } } } } doc.setDocType(getCurrentDocType()); FileStorage.saveDocument(doc,filePath); } } "	0	1	1	0	1	0
"public String getStatus(long researchObjectId, int researchObjectVersion, String archive, String archivePId){  String status =""sent"";  if (archivePId != null && !(archivePId.equals(""""))) status = ""archived""; else status = GetStatusByIds(researchObjectId, researchObjectVersion, archive);  return status; } "	1	0	1	1	1	0
"@RequestMapping(value = ""/content/browse"", method = RequestMethod.GET, headers = ""Accept=application/json"") public SearchResult browse(@RequestParam(value = ""facets"") String facets) {  List<String> facetList = Arrays.asList(facets.split("","")); return contentService.search(new Query(""*:*"", new HashMap<>(), facetList, 0, 10)); } "	1	1	1	1	0	0
"@Override public Dialog onCreateDialog(Bundle savedInstanceState) { String tmp = mTextViewBirthday.getText().toString(); String[] arr = tmp.split(""/""); int year = Integer.parseInt(arr[YEAR]); int month = Integer.parseInt(arr[MONTH]); int day = Integer.parseInt(arr[DAY]); return new DatePickerDialog(getActivity(), this, year, month, day); } "	1	0	1	1	1	0
"@Test public void saveAndLoadWithSchema() { Map<String, String> options = new HashMap<String, String>(); options.put(""path"", path.toString()); df.save(""org.apache.spark.sql.json"", SaveMode.ErrorIfExists, options);  List<StructField> fields = new ArrayList<>(); fields.add(DataTypes.createStructField(""b"", DataTypes.StringType, true)); StructType schema = DataTypes.createStructType(fields); DataFrame loadedDF = sqlContext.load(""org.apache.spark.sql.json"", schema, options);  checkAnswer(loadedDF, sqlContext.sql(""SELECT b FROM jsonTable"").collectAsList()); } "	1	0	1	0	1	0
"Component getMenuHeader() { Label name = new Label(""Vaadin App Layout""); name.addStyleName(ValoTheme.LABEL_H4); Label description = new Label(""Version 0.8.6""); description.addStyleName(ValoTheme.LABEL_SMALL); VerticalLayout layout = new VerticalLayout(getResourceButton(), name, description); layout.addStyleName(APP_LAYOUT_MENU_BAR_ELEMENT); layout.setMargin(false); layout.setSpacing(false); layout.setMargin(new MarginInfo(true, false)); return layout; } "	0	1	1	1	1	0
"@Override public synchronized void run() { if (System.currentTimeMillis() - lastFlush >= batchTimeout && batch != batchSize) { logger.trace(""[{}] Flush timeout occurred"", name); flush(); } } "	1	0	1	0	1	0
private void removeObserverInternal() { observerCount--; if (observerCount == 0) { choreographer.removeFrameCallback(this); sampledVsyncTimeNs = 0; } } 	0	1	1	0	1	0
private void addObserverInternal() { observerCount++; if (observerCount == 1) { choreographer.postFrameCallback(this); } } 	0	1	1	0	1	0
"@Override public String toString() { return String.format(""(%d, %d)"", x, y); } "	1	0	1	1	1	0
private void addLong(final String aKey, final long aDefaultValue) { final String value = properties.getProperty(aKey, Long.toString(aDefaultValue)); final SimpleLongProperty prop = new SimpleLongProperty(aDefaultValue); prop.set(Long.parseLong(value)); prop.addListener((aObs, aOld, aNew) -> { properties.setProperty(aKey, Long.toString(aNew.intValue())); persist(); }); propertiesMap.put(aKey, prop); } 	0	1	1	1	1	0
@Nullable public Model findFirst() { return realmQuery.findAll().first(null); } 	1	0	1	0	1	0
protected EmbeddedBroker serverForId(int id) { return broker(Integer.toString(id)); } 	1	0	1	0	0	0
private List<Integer> calculateLastColumnsForPages(float[] relativeWidths) { List<Integer> lastColumnsForPages = new LinkedList<>(); lastColumnsForPages.add(1);  float totalColumnsWidth = 0;  for (int i = 1; i < relativeWidths.length; i++) { if (totalColumnsWidth + relativeWidths[i] > PAGE_WIDTH - relativeWidths[0]) { lastColumnsForPages.add(i); totalColumnsWidth = 0; } totalColumnsWidth += relativeWidths[i]; }  lastColumnsForPages.add(-1); return lastColumnsForPages; } 	1	0	1	1	1	0
"@Override public void setupSchedule() { final ScheduleAdapter adapter = schedulePresenter.buildScheduleAdapter();  try { if (getActivity() == null) return; getActivity().runOnUiThread(() -> { tvStatus.setVisibility(TextView.VISIBLE); tvTitleSlidingUpPanel.setText(""Loading...""); recyclerView.setVisibility(RecyclerView.VISIBLE); recyclerView.setLayoutManager(new LinearLayoutManager(getActivity().getApplicationContext())); recyclerView.setItemAnimator(new DefaultItemAnimator()); recyclerView.setAdapter(adapter); setDate(schedulePresenter.getDate()); if (adapter.getItemCount() == 0) { tvStatus.setText(getActivity().getResources().getString(R.string.empty_text)); tvStatus.setTextColor(getActivity().getResources().getColor(R.color.color_accent)); } else { tvStatus.setVisibility(TextView.GONE); } }); } catch (NullPointerException e) { } slidingUpPanelLayout = setupSlidingUpPanelLayout(); setupMaterialCalendarView(recyclerView, slidingUpPanelLayout); } "	1	0	1	0	1	0
"public boolean isPayedOrder(String orderId) { LOG.debug(""Enter. OrderId: {}."", orderId);  boolean result = true;  PayedOrder order = repository.findOne(PayedOrderSpecification.exist(orderId));  if (order != null) { result = false; }  LOG.debug(""Exit. Result: {}."", result); return result; } "	1	0	1	1	1	0
@Override public void onScrolled(RecyclerView recyclerView, int dx, int dy) { View firstView = findStartView(recyclerView); if (firstView == null) { clearStickyHeader(); return; }  //Retrieve the child position for the view Integer childPosition = (Integer) firstView.getTag(R.id.recyclerext_view_child_position); if (childPosition == null) { return; }  //If the next header is different than the current one, perform the swap long headerId = getHeaderId(adapter, childPosition); if (headerId != currentStickyId && headerId != RecyclerView.NO_ID) { performHeaderSwap(headerId); } } 	1	1	1	0	1	0
"public byte[] persist() { JSONObject retVal = new JSONObject();  try { retVal.put(""data"", data); retVal.put(""turnCounter"", turnCounter);  } catch (JSONException e) { // TODO Auto-generated catch block e.printStackTrace(); }  String st = retVal.toString();  Log.d(TAG, ""==== PERSISTING\n"" + st);  return st.getBytes(Charset.forName(""UTF-16"")); } "	0	0	1	1	1	0
"private BigDecimal decimalArithmeticOperation(final BinaryOperatorKind operator) throws ODataApplicationException { final BigDecimal left = this.left.getTypedValue(BigDecimal.class); final BigDecimal right = this.right.getTypedValue(BigDecimal.class); switch (operator) { case ADD: return left.add(right); case DIV: return left.divide(left); case MUL: return left.multiply(right); case SUB: return left.subtract(right); default: throw new ODataApplicationException(""Operator not valid"", HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ROOT); } } "	1	0	1	1	1	0
"@Override public JSONArray toJSON() { if (!this.hasGenotypeData()) { return null; }  JSONArray genesJSON = new JSONArray(); // Gene genes, in order of decreasing score List<Map.Entry<String, Double>> genes = new ArrayList<Map.Entry<String, Double>>(this.geneScores.entrySet()); Collections.sort(genes, new Comparator<Map.Entry<String, Double>>() { @Override public int compare(Map.Entry<String, Double> e1, Map.Entry<String, Double> e2) { return Double.compare(e2.getValue(), e1.getValue()); } });  int numGenesReported = 0; for (Map.Entry<String, Double> geneEntry : genes) { String gene = geneEntry.getKey(); Double score = geneEntry.getValue();  JSONObject geneObject = new JSONObject(); geneObject.element(""gene"", gene); geneObject.element(""score"", score); geneObject.accumulateAll(getGeneJSON(gene)); genesJSON.add(geneObject);  // FIXME: quick emergency fix to make PhenomeCentral responsive numGenesReported++; if (numGenesReported > 15) { break; } } return genesJSON; } "	1	1	1	1	0	0
@Override public CalendarList execute(CalendarList calendar) { super.execute(calendar);  String searchTerm = getSearchTerm();  if (searchTerm.isEmpty()) { return calendar.findAllByName(); } else { return calendar.findAllByName(getSearchTerm()); } } 	1	1	1	0	1	0
"private String getCardsPlayer(Player[] players, int i) { String hand =""""; Card[]	PlayerCards=	players[i].getCards(); if(PlayerCards[0]!=null&&PlayerCards[1]!=null){ hand +=PlayerCards[0].getType()+"" ""+PlayerCards[0].getNumber()+"",""; hand+=PlayerCards[1].getType()+"" ""+PlayerCards[1].getNumber(); } else{ hand+=""NULL NULL NULL NULL""; } return hand; } "	1	1	1	1	0	0
"public static Deck getDeckFromPlayer(int playerID) { String statement = String.format(""SELECT * FROM DECK WHERE ID = (SELECT SELDECKID FROM PLAYER WHERE ID = 1%1$s)"", playerID); Deck deck = null;  try { if (Database.checkConnection()) { List<List> resultSet = Database.selectRecordFromTable(statement); List<String> column = resultSet.get(0);  deck = new Deck(Integer.parseInt(column.get(0)), column.get(2));  for (int i = 3; i < column.size(); i++) { deck.addCard(allCards.get(Integer.parseInt(column.get(i)) - 1)); }  } else { System.out.println(""Database connection is lost.""); } } catch (SQLException ex) { Logger.getLogger(PlayerIconController.class.getName()).log(Level.SEVERE, null, ex); }  return deck; } "	0	0	1	1	1	0
public void turn(){  updateProx();  if(xProx>=(CHASE_TETHER*32)&&yProx>=(CHASE_TETHER*32)){ wander(); }  else if(xProx<=(CHASE_TETHER*32)&&yProx<=(CHASE_TETHER*32)){ if(xProx<(AURA_TETHER*32)||yProx<(AURA_TETHER*32)){ spook(pCharacter); flee(); } if(xProx>(AURA_TETHER*32)&&yProx>(AURA_TETHER*32)){ chase(); } } else{ wander(); } } 	1	1	1	1	0	0
"public static void rewriteLocationHeader(String location, MessageContext messageContext) { if (location.contains("":"")) { String[] tmp = location.split("":""); if (tmp.length == 2) { return; } String protocol = tmp[0]; String host = null; for (String tmpname : tmp[1].split(""/"")) { if (!tmpname.isEmpty()) { host = tmpname; break; } } String newPort; String port = null; if (""http"".equals(protocol)) { newPort = getPassThruHttpPort(); } else { newPort = getPassThruHttpsPort(); } if (tmp.length > 2) { port = tmp[2].substring(0, tmp[2].indexOf(""/"")); } String oldEndpoint = protocol + ""://"" + host + "":"" + port; if (EndpointHolder.getInstance().containsEndpoint(oldEndpoint)) { location = location.replace(port, newPort); Object headers = ((Axis2MessageContext) messageContext).getAxis2MessageContext().getProperty(""TRANSPORT_HEADERS""); if (headers instanceof TreeMap) { ((TreeMap) headers).put(""Location"", location); } } } } "	1	1	1	1	0	0
"public static boolean containsExactlyTimes(int times, String source, String marker) { if (Strings.isNullOrEmpty(source) || Strings.isNullOrEmpty(marker)) { throw new IllegalArgumentException(""No null arguments allowed""); } return times == ((source.length() - source.replace(marker, """").length()) / marker.length()); } "	1	0	1	1	1	0
@Override public UserBinomialModel get(U u) { return new UserBinomialModel(u, alpha); } 	1	0	1	1	1	0
"@org.testng.annotations.Test public void testListUserAssociations() throws Exception { LocalAccountAssociationClientService localAccountAssociationClientService = getUserAccountAssociationClientService(); User testUser = new User.UserBuilder().setUserId(""testUser"").setIdentityStore(new IdentityStoreImpl()) .setAuthorizationStore(new AuthorizationStoreImpl()).setPrimaryAttributeValue(""userId"") .setClaimManager(new InMemoryClaimManager()).build(); Assert.assertNotNull(localAccountAssociationClientService.listUserAssociations(testUser)); } "	1	0	1	0	0	0
private void setStarredHost(boolean saveHost) { starredHostDao.open();  if (!saveHost && starredHostDao.isHostStarred(hostInfo.getId(), hostInfo.getHost().getName())) { starredHostDao.delete(hostInfo.getId(), hostInfo.getHost().getName()); } else { starredHostDao.insert(hostInfo.getId(), hostInfo.getHost().getName(), hostInfo.getHost(), hostInfo.getFeedback()); }  hostInfo.setStarred(saveHost); starredHostDao.close(); } 	1	0	1	0	1	0
"public void handleActivationRequest(final PwmRequest pwmRequest) throws PwmUnrecoverableException, ChaiUnavailableException, IOException, ServletException { final PwmApplication pwmApplication = pwmRequest.getPwmApplication(); final PwmSession pwmSession = pwmRequest.getPwmSession(); final Configuration config = pwmApplication.getConfig(); final LocalSessionStateBean ssBean = pwmSession.getSessionStateBean();  pwmApplication.getSessionStateService().clearBean(pwmRequest, ActivateUserBean.class); final List<FormConfiguration> configuredActivationForm = config.readSettingAsForm(PwmSetting.ACTIVATE_USER_FORM);  Map<FormConfiguration,String> formValues = new HashMap(); try { //read the values from the request formValues = FormUtility.readFormValuesFromRequest(pwmRequest, configuredActivationForm, ssBean.getLocale());  // check for intruders pwmApplication.getIntruderManager().convenience().checkAttributes(formValues);  // read the context attr final String contextParam = pwmRequest.readParameterAsString(PwmConstants.PARAM_CONTEXT);  // read the profile attr final String ldapProfile = pwmRequest.readParameterAsString(PwmConstants.PARAM_LDAP_PROFILE);  // see if the values meet the configured form requirements. FormUtility.validateFormValues(config, formValues, ssBean.getLocale());  final String searchFilter = figureLdapSearchFilter(pwmRequest);  // read an ldap user object based on the params final UserIdentity userIdentity; { final UserSearchEngine userSearchEngine = new UserSearchEngine(pwmApplication, pwmSession.getLabel()); final UserSearchEngine.SearchConfiguration searchConfiguration = new UserSearchEngine.SearchConfiguration(); searchConfiguration.setContexts(Collections.singletonList(contextParam)); searchConfiguration.setFilter(searchFilter); searchConfiguration.setFormValues(formValues); searchConfiguration.setLdapProfile(ldapProfile); userIdentity = userSearchEngine.performSingleUserSearch(searchConfiguration); }  validateParamsAgainstLDAP(pwmRequest, formValues, userIdentity);  final List<UserPermission> userPermissions = config.readSettingAsUserPermission(PwmSetting.ACTIVATE_USER_QUERY_MATCH); if (!LdapPermissionTester.testUserPermissions(pwmApplication, pwmSession.getLabel(), userIdentity, userPermissions)) { final String errorMsg = ""user "" + userIdentity + "" attempted activation, but does not match query string""; final ErrorInformation errorInformation = new ErrorInformation(PwmError.ERROR_ACTIVATE_USER_NO_QUERY_MATCH, errorMsg); pwmApplication.getIntruderManager().convenience().markUserIdentity(userIdentity, pwmSession); pwmApplication.getIntruderManager().convenience().markAddressAndSession(pwmSession); throw new PwmUnrecoverableException(errorInformation); }  final ActivateUserBean activateUserBean = pwmApplication.getSessionStateService().getBean(pwmRequest, ActivateUserBean.class); activateUserBean.setUserIdentity(userIdentity); activateUserBean.setFormValidated(true); pwmApplication.getIntruderManager().convenience().clearAttributes(formValues); pwmApplication.getIntruderManager().convenience().clearAddressAndSession(pwmSession); } catch (PwmOperationalException e) { pwmApplication.getIntruderManager().convenience().markAttributes(formValues, pwmSession); pwmApplication.getIntruderManager().convenience().markAddressAndSession(pwmSession); pwmRequest.setResponseError(e.getErrorInformation()); LOGGER.debug(pwmSession.getLabel(),e.getErrorInformation().toDebugStr()); }  // redirect user to change password screen. advanceToNextStage(pwmRequest); } "	1	0	1	1	0	0
public Long getTrainingPrerequisiteId() { return this.trainingPrerequisiteId; } 	1	0	1	0	1	0
"synchronized void createConnection(final String catalogName, final String connectorType, final Map<String, String> properties) { Preconditions.checkState(!stopped.get(), ""ConnectorManager is stopped""); Preconditions.checkNotNull(catalogName, ""catalogName is null""); Preconditions.checkNotNull(connectorType, ""connectorName is null""); Preconditions.checkNotNull(properties, ""properties is null"");  final ConnectorPlugin connectorPlugin = plugins.get(connectorType); if (connectorPlugin != null) { Preconditions .checkState(!connectorFactories.containsKey(catalogName), ""A connector %s already exists"", catalogName); final ConnectorFactory connectorFactory = connectorPlugin.create(catalogName, properties); connectorFactories.put(catalogName, connectorFactory);  final MetacatCatalogConfig config = MetacatCatalogConfig.createFromMapAndRemoveProperties(connectorFactory.getName(), properties); catalogs.put(catalogName, config); } else { log.warn(""No plugin for connector with type %s"", connectorType); } } "	0	1	1	0	1	0
"@Override public Object[] getParentCollection(final String collectionGooruOid, final String gooruUid) { String hql = ""select cc.gooru_oid, cor.title  as gooruOid  from collection_item ci inner join resource r on r.content_id = ci.resource_content_id inner join content cr on cr.content_id = r.content_id inner join content cc on cc.content_id = ci.collection_content_id inner join collection co on  co.content_id = ci.collection_content_id inner join resource cor on cor.content_id = co.content_id   where cr.gooru_oid='"" + collectionGooruOid + ""'and co.collection_type = 'folder'  and ci.item_type != 'collaborator' ""; if (gooruUid != null) { hql += ""and  cc.user_uid ='"" + gooruUid + ""'""; } Query query = getSession().createSQLQuery(hql); return (Object[]) (query.list().size() > 0 ? query.list().get(0) : null); } "	1	0	1	0	1	0
public static NotificationEvent forNewIssue(Issue issue, User author) { NotificationEvent notiEvent = createFrom(author, issue); notiEvent.title = formatNewTitle(issue); notiEvent.receivers = getReceivers(issue); notiEvent.eventType = NEW_ISSUE; notiEvent.oldValue = null; notiEvent.newValue = issue.body; return notiEvent; } 	1	1	1	1	0	0
"public long calculateScore(PlayerInfo playerInfo) { final int[] values = new int[MAX_BLOCK]; final Location l = playerInfo.getIslandLocation(); final int px = l.getBlockX(); final int py = l.getBlockY(); final int pz = l.getBlockZ(); final World w = l.getWorld(); int radius = Settings.island_protectionRange / 2; int typeId; for (int x = -radius; x <= radius; ++x) { for (int y = 0; y <= 255; ++y) { for (int z = -radius; z <= radius; ++z) { typeId = w.getBlockAt(px + x, py + y, pz + z).getTypeId(); values[typeId]++; } } } double score = 0; for (int i = 1; i <= MAX_BLOCK; ++i) { double count = values[i]; if (count > blockLimit[i] && blockLimit[i] != -1) { count = blockLimit[i]; // Hard edge } if (blockDR[i] > 0) { count = dReturns(count, blockDR[i]); } score += count*blockValue[i]; } long islandLevel = Math.round(score / config.getInt(""general.pointsPerLevel"")); uSkyBlock.getInstance().getIslandConfig(playerInfo).set(""general.level"", islandLevel); playerInfo.savePlayerConfig(playerInfo.getPlayerName()); uSkyBlock.getInstance().saveIslandConfig(playerInfo.locationForParty()); return islandLevel; } "	1	1	1	1	0	0
private List<ContainerInitializer> jspInitializers() { JettyJasperInitializer sci = new JettyJasperInitializer(); ContainerInitializer initializer = new ContainerInitializer(sci, null); List<ContainerInitializer> initializers = new ArrayList<ContainerInitializer>(); initializers.add(initializer); return initializers; } 	1	0	1	0	1	0
"@Override public String getCharSet() { String res = this.pdFont.getFontDescriptor().getStringKey(ASAtom.CHAR_SET); return res == null ? """" : res; } "	1	1	1	0	1	0
public static FileSink sinkFor(String filename) { if (filename.indexOf('.') > 0) { String ext = filename.substring(filename.lastIndexOf('.') + 1); ext = ext.toLowerCase();  if (ext2sink.containsKey(ext)) { Class<? extends FileSink> fsink = ext2sink.get(ext);  try { return fsink.newInstance(); } catch (InstantiationException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } } }  return null; } 	1	0	1	0	1	0
"public void trueResponse() { count++; MediaPlayer mediaplayer; mediaplayer = MediaPlayer.create(this, R.raw.ding); mediaplayer.start(); if (status) this.setCorrectCount(); measureSpeed(); if ((status && count == 128) || (!status && totalAttempts == 40)) { viewFlipper.setDisplayedChild(2); avgTime = avgTime / totalAttempts; avgTime = avgTime / 1000; String speed = "": "" + new DecimalFormat(""###.##"").format(avgTime)+ "" seconds""; String result = "": "" + count +"" / ""+ totalAttempts; resultText.setText(result); speedText.setText(speed); count = 0; setUpAgain(); if (status && count == 128) { progressBar.setVisibility(View.VISIBLE); progressBar.setProgress(getCorrectCount()+count/7500); } } else { showBlankScreen(); progressBar.setVisibility(View.INVISIBLE); }  } "	1	1	1	1	0	0
@SubscribeEvent public void onConnected(FMLNetworkEvent.ClientConnectedToServerEvent event){ if (!event.isLocal) { InetSocketAddress address = (InetSocketAddress) event.manager.getSocketAddress(); Mw.instance.setServerDetails(address.getHostName(), address.getPort()); } } 	0	1	1	0	1	0
public void deleteBorrowedInstrument(Instrument instrument) { if (this.ownedInstruments.containsInstrument(instrument)) { this.borrowedInstruments.removeInstrument(instrument); } else { throw new RuntimeException(); } } 	1	0	1	1	1	0
"@Override public String apply(@javax.annotation.Nullable Credentials credentials) { if (credentials == null) return ""null"";  String result = ClassUtils.getShortName(credentials.getClass()) + ""[""; if (credentials instanceof IdCredentials) { IdCredentials idCredentials = (IdCredentials) credentials; result += ""id: "" + idCredentials.getId() + "",""; }  if (credentials instanceof UsernameCredentials) { UsernameCredentials usernameCredentials = (UsernameCredentials) credentials; result += ""username"" + usernameCredentials.getUsername() + """"; } result += ""]""; return result; } "	0	0	1	1	1	0
@Override public Slice getSlice(int field) { Type type = getType(field); if (type instanceof DecimalType) { DecimalType actual = (DecimalType) type; CarbondataColumnHandle carbondataColumnHandle = columnHandles.get(field); if (carbondataColumnHandle.getPrecision() > 0) { checkFieldType(field, DecimalType.createDecimalType(carbondataColumnHandle.getPrecision(), carbondataColumnHandle.getScale())); } else { checkFieldType(field, DecimalType.createDecimalType()); } String fieldValue = getFieldValue(field); BigDecimal bigDecimalValue = new BigDecimal(fieldValue); if (isShortDecimal(type)) { return utf8Slice(Decimals.toString(bigDecimalValue.longValue(), actual.getScale())); } else { if (bigDecimalValue.scale() > actual.getScale()) { BigInteger unscaledDecimal = rescale(bigDecimalValue.unscaledValue(), bigDecimalValue.scale(), bigDecimalValue.scale()); Slice decimalSlice = Decimals.encodeUnscaledValue(unscaledDecimal); return utf8Slice(Decimals.toString(decimalSlice, actual.getScale())); //return decimalSlice; } else { BigInteger unscaledDecimal = rescale(bigDecimalValue.unscaledValue(), bigDecimalValue.scale(), actual.getScale()); Slice decimalSlice = Decimals.encodeUnscaledValue(unscaledDecimal); return utf8Slice(Decimals.toString(decimalSlice, actual.getScale())); //return decimalSlice; } } } else { checkFieldType(field, VARCHAR); return utf8Slice(getFieldValue(field)); } } 	1	1	1	0	1	0
"@Test public void buttonPushedCarparkFull() { when(carpark.isFull()).thenReturn(true); entryController.buttonPushed(); verify(ui).display(""Carpark Full""); assertTrue(FULL.equals(entryController.getStateAsString()));  } "	0	1	1	1	1	0
@Override public boolean isDisposable() { return isAlive(); } 	1	0	1	0	0	0
private <T> boolean moveListItem(T item, List<T> list, int position, int distance) { if (item == null || list == null || list.isEmpty()) return false;  int newPosition = position + distance;  if (newPosition < 0 || newPosition > list.size()) return false;  list.remove(position); list.add(newPosition, item);  return true; } 	1	0	1	1	1	0
private String getLine(int number) throws Exception { String value = null; String pageContent = FitnesseFixtureContext.page.getHtml(); String lineizedContent = convertBreaksToLineSeparators(pageContent); StringTokenizer tokenizedLines = tokenizeLines(lineizedContent); for (int i = number; i != 0; i--) value = tokenizedLines.nextToken(); return value.trim(); } 	0	1	1	1	1	0
protected static HashMap<PartType, Integer> getMissingPartsForProductionPlan(int plan) { //TODO Complete this method HashMap<PartType, Integer> result = new HashMap<>(); ProductionPlan pp = data.getProductionPlans().get(plan); if (pp == null) return result; for (Vehicle v : pp.getVehicles()) for (Entry<PartType, Integer> entry : v.model.getRequiredParts().entrySet()) if (result.containsKey(entry.getKey())) result.put(entry.getKey(), result.get(entry.getKey()) + entry.getValue()); else result.put(entry.getKey(), entry.getValue()); for (Warehouse w : data.getWarehouses().values()) if (w.getMaxPartsStored() > 0) for (Entry<PartType, Integer> entry : w.getParts().entrySet()) if (result.containsKey(entry.getKey())) { if (result.get(entry.getKey()) == entry.getValue()) result.remove(entry.getKey()); else result.put(entry.getKey(), result.get(entry.getKey()) - entry.getValue()); } return result; } 	1	1	1	1	0	0
public static float calculate(RequestDTO request, HolidayService holidayService) { return (float) calculateDays(request.getStartDate(), request.getEndDate(), holidayService) * request.getRequester().getWorkTime(); } 	1	0	1	1	1	0
public static float calculate(UserDTO requester, LocalDate startDate, LocalDate endDate, HolidayService holidayService) { return (float) calculateDays(startDate, endDate, holidayService) * requester.getWorkTime(); } 	1	0	1	0	1	0
private BuildableWatchWordGrid setWords(List<String> words) { this.words = words; this.owners = new ArrayList<Faction>(); for (int x = 0; x < words.size(); x++) { this.owners.add(null); } return this; } 	1	1	1	0	1	0
"private void startNavigation() { Timber.d(""Navigation session started.""); if (navigationEventListeners != null) { for (NavigationEventListener navigationEventListener : navigationEventListeners) { navigationEventListener.onRunning(true); } }  Handler responseHandler = new Handler(); locationUpdatedThread = new LocationUpdatedThread(responseHandler); locationUpdatedThread.start(); locationUpdatedThread.getLooper(); Timber.d(""Background thread started""); } "	1	0	1	0	1	0
"@Override public Claim transform(Map<String, Object> assertion) { String assertionJson; Map<String, Object> mapped; assertionJson = claimToJson(assertion);  if (ruleProcessor == null) { LOG.debug(""ruleProcessor not configured""); return null; }  if (LOG.isDebugEnabled()) { LOG.debug(""assertionJson=\n{}"", assertionJson); }  mapped = ruleProcessor.process(assertionJson); if (mapped == null) { if (LOG.isDebugEnabled()) { LOG.debug(""RuleProcessor returned null""); } return null; }  if (LOG.isDebugEnabled()) { LOG.debug(""RuleProcessor returned: {}"", mapped); }  ClaimBuilder cb = new ClaimBuilder(); if (mapped.containsKey(""ClientId"")) { cb.setClientId((String) mapped.get(""ClientId"")); } if (mapped.containsKey(""UserId"")) { cb.setUserId((String) mapped.get(""UserId"")); } if (mapped.containsKey(""User"")) { cb.setUser((String) mapped.get(""User"")); } if (mapped.containsKey(""Domain"")) { cb.setDomain((String) mapped.get(""Domain"")); } if (mapped.containsKey(""Roles"")) { @SuppressWarnings(""unchecked"") List<String> roles = (List<String>) mapped.get(""roles""); for (String role : roles) { cb.addRole(role); } } Claim claim = cb.build();  if (LOG.isDebugEnabled()) { LOG.debug(""returns claim = {}"", claim.toString()); }  return claim; } "	1	1	1	1	0	0
"@Override public CommandResult execute() { try { //Remove comment after Model component adds a setIsDone() method which changes the value of //it isDone attribute.  model.doneTask(taskIndex);  return new CommandResult(String.format(MESSAGE_SUCCESS, taskIndex));  } catch (IndexOutOfBoundsException ie) { return new CommandResult(""The task index provided is invalid""); } catch (TaskNotFoundException pnfe) { return new CommandResult(""Task does not exist in task-tracker""); } } "	1	0	1	1	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_key_change);  Bundle extras = getIntent().getExtras(); if (extras != null) { Gson gson = new Gson();  String vehicleString = (String) extras.get(""selectedVehicle""); mSelectedVehicle = gson.fromJson(vehicleString, Vehicle.class);  String userString = (String) extras.get(""snapShotUser""); mSnapshotUser = gson.fromJson(userString, User.class);  for (User guestUser : mSnapshotUser.getGuests()) { for (Vehicle vehicle : guestUser.getVehicles()) { if (vehicle.getVehicleId().equals(mSelectedVehicle.getVehicleId()) && vehicle.getUserType().equals(""guest"")) { User remote = new User(guestUser.getUserName()); remote.addVehicle(vehicle);  mFilteredRemotes.add(remote); } } } }  RemoteCredentialsAdapter adapter = new RemoteCredentialsAdapter(this, mFilteredRemotes); ListView listView = (ListView) findViewById(R.id.sharedKeys); listView.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { mPosition = position; alertMessage(); } });  listView.setAdapter(adapter); //addUsers(adapter); } "	0	0	1	1	1	0
@Override public void setPreferenceScreen(PreferenceScreen preferenceScreen) { if (!preferenceScreen.isAttached()) { // Without ids generated, the RecyclerView won't animate changes to the preferences. preferenceScreen.setShouldUseGeneratedIds(mAnimationAllowed); } super.setPreferenceScreen(preferenceScreen); if (preferenceScreen != null) { if (mHeader != null) { preferenceScreen.addPreference(mHeader); } if (mFooter != null) { preferenceScreen.addPreference(mFooter); } } } 	1	0	1	1	1	0
"@Override public synchronized String toString() { LevelStringBuilder strBuilder = new LevelStringBuilder() .setDefaultLevelSubString() .setDefaultLevelSeparator(); strBuilder.appendln(""<"" + getClass().getSimpleName() + "">"").incLevel(); { if (isEmpty()) strBuilder.appendln(""Route is empty.""); else { strBuilder.appendln(""hash       = "" + hashCode()); strBuilder.appendln(""spawndelay = "" + spawnDelay); strBuilder.appendln(""start      = "" + getOrigin()); strBuilder.appendln(""end        = "" + getDestination()); strBuilder.appendln(""size       = "" + size()); } } strBuilder.decLevel().appendln(""</"" + getClass().getSimpleName() + "">""); return strBuilder.toString(); } "	0	0	1	1	1	0
private static Authenticator getActiveDirectoryAuthenticator(final LdapAuthenticationProperties l) { final FormatDnResolver resolver = new FormatDnResolver(l.getDnFormat()); final Authenticator authn = new Authenticator(resolver, getPooledBindAuthenticationHandler(l));  final SearchEntryResolver entryResolver = new SearchEntryResolver(); entryResolver.setBaseDn(l.getBaseDn()); entryResolver.setUserFilter(l.getUserFilter()); entryResolver.setSubtreeSearch(l.isSubtreeSearch()); authn.setEntryResolver(new SearchEntryResolver());  return authn; } 	0	1	1	1	1	0
"@SuppressWarnings(""unused"") public void getAccessToken(@NonNull IDmeScope scope, boolean forceReload, @NonNull IDmeGetAccessTokenListener listener) { checkInitialization(); AuthToken token = accessTokenManager.getToken(scope); if (token == null) { listener.onError(new UnauthenticatedException()); } else if (token.isValidAccessToken() && !forceReload) { listener.onSuccess(token.getAccessToken()); } else if (token.isValidRefreshToken()) { RefreshAccessTokenHandler.refreshAccessToken(scope, token, listener); } else { listener.onError(new UnauthenticatedException()); } } "	1	1	1	1	0	0
"public static SequenceModel train() { long st = System.currentTimeMillis(); SequenceModel model = train(0.2f, 5); try { model.writeModel(new File(Config.SETTINGS_DIR+File.separator+modelFileName)); } catch(IOException e){ log.warn(""Unable to write model to disk""); e.printStackTrace(); } long et = System.currentTimeMillis(); log.info(""Trained and dumped model in ""+((et-st)/60000)+"" minutes.""); return model; } "	1	1	1	1	0	0
"@RequestMapping(method = RequestMethod.GET, value = ""/retryme"") public int retryMe() { return retries.getAndIncrement(); } "	1	0	1	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_color_choice);  allSwatches = new TextView[8]; userColorChoices = new int[3];  // Pay attention to this... had no idea this was possible... allSwatches[0] = firstSwatch = (TextView) findViewById(R.id.firstSwatch); allSwatches[1] = secondSwatch = (TextView) findViewById(R.id.secondSwatch); allSwatches[2] = thirdSwatch = (TextView) findViewById(R.id.thirdSwatch); allSwatches[3] = fourthSwatch = (TextView) findViewById(R.id.fourthSwatch); allSwatches[4] = fifthSwatch = (TextView) findViewById(R.id.fifthSwatch); allSwatches[5] = sixthSwatch = (TextView) findViewById(R.id.sixthSwatch); allSwatches[6] = seventhSwatch = (TextView) findViewById(R.id.seventhSwatch); allSwatches[7] = eighthSwatch = (TextView) findViewById(R.id.eighthSwatch);  // grab survey data that was passed along Intent callingIntent = getIntent(); surveyData = (UserData) callingIntent.getSerializableExtra(MainActivity.INTENT_TAG);  int[] detectedColors = surveyData.getColors(); for(int i = 0; i < detectedColors.length; i++) { // occasionally the Palette will not find/contain eight colors if(detectedColors[i] != 0) { allSwatches[i].setBackgroundColor(detectedColors[i]); } else { // in the case that it doesn't have enough colors, make sure text view is disabled allSwatches[i].setEnabled(false); allSwatches[i].setClickable(false); } } } 	1	1	1	0	1	0
"@Documentation( value = ""Tells if the Column is in the primary key."", params = { @Param(name = ""column"", value = ""The Column""), }, result = ""true if the Column is in the primary key, false otherwise"", examples = { @Example(expression = ""column.isInPrimaryKey()"", result = ""true"") } ) // @formatter:on public String isInPrimaryKey(Column column) { if (column != null) { return yesNo(column.isAutoincrement()); } else { return ""No""; } } "	1	1	1	0	1	0
"private void postMove() {  phase = Phase.MONSTER_ANIM; // The next two lines are important to avoid monsters treating cells the player WAS in as goals. getToPlayer.clearGoals(); getToPlayer.resetMap(); // now that goals are cleared, we can mark the current player position as a goal. // this is an important piece of DijkstraMap usage; the argument is a Set of Points for squares that // temporarily cannot be moved through (not walls, which are automatically known because the map char[][] // was passed to the DijkstraMap constructor, but things like moving creatures and objects). int[] monplaces = new int[monsters.size()]; for (int i = 0; i < monplaces.length; i++) { monplaces[i] = monsters.getAt(i).pos; }  //pathMap = getToPlayer.scan(monplaces);  // recalculate FOV, store it in fovmap for the render to use. fovmap = fov.calculateFOV(res, player.entity.gridX & -2, player.entity.gridY & -2, 12, Radius.SQUARE); // handle monster turns Creature mon; int ms = monsters.size(), tmp; IntVLA impassable = new IntVLA(ms), path; for (int i = 0; i < ms; i++) { impassable.add(monsters.getAt(i).pos); } int[] playerGoal = new int[]{player.pos}; for (Integer pos : monsters.keySet()) { mon = monsters.get(pos); if(mon == null) continue; // monster values are used to store their aggression, 1 for actively stalking the player, 0 for not. if (mon.state > 0 || fovmap[adjacency.extractX(pos)][adjacency.extractY(pos)] > 0.1) { if (mon.state == 0) { messages.appendMessage(""The AЯMED GUAЯD shouts at you, \"""" + FakeLanguageGen.RUSSIAN_AUTHENTIC.sentence(rng, 1, 3, new String[]{"","", "","", "","", "" -""}, new String[]{""!""}, 0.25) + ""\""""); }  path = getToPlayer.findPath(30, impassable, null, mon.pos, playerGoal); if(path.size == 0) { mon.change(1); continue; } tmp = path.first(); if (tmp == player.pos) { display.tint(player.entity.gridX, player.entity.gridY-1, SColor.PURE_CRIMSON, 0, 0.415f); health--; //player.setText("""" + health); mon.change(1); } // otherwise store the new position in newMons. else { mon.change(1); monsters.alter(pos, tmp); display.slide(mon.entity, adjacency.extractX(tmp), adjacency.extractY(tmp)); mon.move(tmp); }  // this block is used to ensure that the monster picks the best path, or a random choice if there // is more than one equally good best option. /* Direction choice = null; double best = 9999.0; Direction[] ds = new Direction[8]; rng.shuffle(Direction.OUTWARDS, ds); for (Direction d : ds) { Coord tmp = pos.translate(d); if (pathMap[tmp.x][tmp.y] < best && !checkOverlap(mon, tmp.x, tmp.y, nextMovePositions)) { // pathMap is a 2D array of doubles where 0 is the goal (the player). // we use best to store which option is closest to the goal. best = pathMap[tmp.x][tmp.y]; choice = d; } } */ } }  } "	1	1	1	0	1	0
"public static boolean isCreator(ShortURL url, SecurityContext securityContext, ConnectionRepository connectionRepository){ String authAs = SecurityContextUtils.getAuthAs(securityContext, connectionRepository); if (authAs.equals(""anonymousUser"")){ String authThrough = SecurityContextUtils.getAuthThrough(securityContext, connectionRepository); if (url.getCreatorAuthAs() != null && url.getCreatorAuthAs().equals(authAs) && url.getCreatorAuthThrough() != null && url.getCreatorAuthThrough().equals(authThrough)) return true; else return false; } else return false; } "	0	1	1	0	1	0
"private BaseResponse getNewTranscriptsDuring(LocalDateTime from, LocalDateTime to, WebRequest request) { LimitOffset limOff = getLimitOffset(request, 25); Range<LocalDateTime> range = getOpenRange(to, from, ""from"", ""to""); PaginatedList<TranscriptUpdateToken> updates = transcriptDao.transcriptsUpdatedDuring(range, SortOrder.ASC, limOff); return ListViewResponse.of(updates.getResults().stream() .map(TranscriptUpdateTokenView::new) .collect(Collectors.toList()), updates.getTotal(), limOff); } "	1	1	1	1	0	0
"@Test public void revokedKeyDueToCompromiseRevokesKeyRetroactively() throws Exception { TestKey k = add(revokedCompromisedKey()); add(validKeyWithoutExpiration()); save();  String problem = ""Key is revoked (key material has been compromised): test6 compromised""; assertProblems(k, problem);  SimpleDateFormat df = new SimpleDateFormat(""YYYY-MM-dd HH:mm:ss""); PublicKeyChecker checker = new PublicKeyChecker() .setStore(store) .setEffectiveTime(df.parse(""2010-01-01 12:00:00"")); assertProblems(checker, k, problem); } "	0	0	1	1	1	0
"private static Date parseDate(String str) throws Exception { return new SimpleDateFormat(""YYYY-MM-dd HH:mm:ss Z"").parse(str); } "	0	0	1	1	1	0
"public String toStringWithUID() { if (tostr == null) { final StringBuilder s = new StringBuilder(); s.append(uid + "": ""); for (int i=0; i<names.size(); i++) { if (i != 0) s.append("", ""); s.append(names.get(i)); } s.append(""\n""); tostr = s.toString(); } return tostr; } "	1	0	1	0	1	0
private static Map<String, JSONObject> getCurrentRulesAsMap(Context ctx) { final List<PackageInfoData> apps = getApps(ctx,null); // Builds a pipe-separated list of names Map<String, JSONObject> exportMap = new HashMap<>(); try { for (int i=0; i<apps.size(); i++) { if (apps.get(i).selected_wifi) { updateExportPackage(exportMap,apps.get(i).pkgName,WIFI_EXPORT); } if (apps.get(i).selected_3g) { updateExportPackage(exportMap,apps.get(i).pkgName,DATA_EXPORT); } if (apps.get(i).selected_roam) { updateExportPackage(exportMap,apps.get(i).pkgName,ROAM_EXPORT); } if (apps.get(i).selected_vpn) { updateExportPackage(exportMap,apps.get(i).pkgName,VPN_EXPORT); } if (apps.get(i).selected_lan) { updateExportPackage(exportMap,apps.get(i).pkgName,LAN_EXPORT); } } }catch(JSONException e) { Log.e(TAG, e.getLocalizedMessage()); } return exportMap; } 	1	0	1	0	1	0
public List<DownloadFileInfo> getDownloadFileInfo() { if (downloadFileInfo == null) { downloadFileInfo = new ArrayList<DownloadFileInfo>(); } return this.downloadFileInfo; } 	1	1	1	0	1	0
@Override public ArmorStandData createConnASD(ModelledPipeConnModelData data) { ItemStack hoe = data.isIron_ExtractionPipe_ActiveSide() ? ITEM_HOE_CONN_EXTRACTION_OPENED : ITEM_HOE_CONN_EXTRACTION_CLOSED; ArmorStandData asd;  if (data.getConnDirection() == PipeDirection.UP) { asd = new ArmorStandData(new RelLoc(0.75f, 0.5f - 1.4369f, 0.5f), new Vector(1, 0, 0), false, hoe, null, new Vector(-90f, 0f, 0f), new Vector(0f, 0f, 0f)); } else if (data.getConnDirection() == PipeDirection.DOWN) { asd = new ArmorStandData(new RelLoc(0.25f, 0.5f - 1.1885f - 0.25f, 0.5f), new Vector(1, 0, 0), false, hoe, null, new Vector(90f, 0f, 0f), new Vector(0f, 0f, 0f)); } else { asd = new ArmorStandData(new RelLoc(0.5f, 0.5f - 1.1875f, 0.5f), new Vector(data.getConnDirection().getX(), 0, data.getConnDirection().getZ()), false, hoe, null, new Vector(180f, 180f, 0f), new Vector(0f, 0f, 0f)); }  return asd; } 	1	0	1	1	0	0
public static final <M extends Message> JacksonMessageSerializer<M> forType(Class<? extends M> cls) { return new JacksonMessageSerializer<M>(cls); } 	1	0	1	0	1	0
"private void doTestProblems(Parser parser) throws ParseException { final String content = ""package test;"" + ""interface Test {\n"" + ""\t\t\tdefault void test();\n"" + ""\t\t}"";  final CompilationUnit cu = parser.parse(ParseContext.CompilationUnit, content); Assert.assertTrue(cu.hasProblems()); Iterator<Problem> problemIterator = cu.problems().iterator(); Assert.assertTrue(problemIterator.hasNext()); Assert.assertEquals(""default methods must have a body"", problemIterator.next().code()); Assert.assertFalse(problemIterator.hasNext()); } "	0	0	1	1	1	0
"protected boolean canBeMemberInternal(PerunSession sess, Vo vo, User user, String loa, boolean throwExceptions) throws InternalErrorException, ExtendMembershipException {  if (user.isServiceUser()) return true;  // Check if the VO has set membershipExpirationRules attribute LinkedHashMap<String, String> membershipExpirationRules;  Attribute membershipExpirationRulesAttribute = null; try { membershipExpirationRulesAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, MembersManager.membershipExpirationRulesAttributeName); membershipExpirationRules = (LinkedHashMap<String, String>) membershipExpirationRulesAttribute.getValue(); // If attribute was not filled, then silently exit if (membershipExpirationRules == null) return true; } catch (AttributeNotExistsException e) { // No rules set, so leave it as it is return true; } catch (WrongAttributeAssignmentException e) { throw new InternalErrorException(""Shouldn't happen.""); }  // Which LOA we won't allow? if (membershipExpirationRules.get(MembersManager.membershipDoNotAllowLoaKeyName) != null) { if (loa == null) { // User doesn't have LOA defined and LOA is required for getting in, so do not allow membership. log.warn(""User {} doesn't have LOA defined, but 'doNotAllowLoa' option is set for VO {}."", user, vo); if (throwExceptions) { throw new ExtendMembershipException(ExtendMembershipException.Reason.NOUSERLOA, ""User "" + user + "" doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id "" + vo.getId() + "".""); } else { return false; } }  String[] doNotAllowLoas = membershipExpirationRules.get(MembersManager.membershipDoNotAllowLoaKeyName).split("","");  for (String doNotAllowLoa : doNotAllowLoas) { if (doNotAllowLoa.equals(loa)) { // User has LOA which is not allowed for getting in if (throwExceptions) { throw new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOA, ""User "" + user + "" doesn't have required LOA for VO id "" + vo.getId() + "".""); } else { return false; } } } } return true; } "	1	0	1	0	1	0
"@Test public void processJourneyLine(){  //          Invalid ID // invalid but accepted at this stage (0) String invalidLine1 = ""0,PP204SV,2,15,43.4""; assertTrue(fileReaderObject.processJourneyLine(invalidLine1));  // invalid but accepted at this stage (negative) String invalidLine2 = ""-10,XX204SV,3,33,52.3""; assertTrue(fileReaderObject.processJourneyLine(invalidLine2));  // invalid (string) String invalidLine3 = ""ABC,XX367DG,2,21,39.1""; assertTrue(fileReaderObject.processJourneyLine(invalidLine3));  // invalid (missing) String invalidLine4 = "",PP204SV,2,15,43.4""; assertFalse(fileReaderObject.processJourneyLine(invalidLine4));  // invalid (spaces) String invalidLine5 = ""  ,PP204SV,2,15,43.4""; assertFalse(fileReaderObject.processJourneyLine(invalidLine5));   //          Invalid Reg number // invalid but accepted at this stage (0) String invalidLine6 = ""51,,2,15,43.4""; assertFalse(fileReaderObject.processJourneyLine(invalidLine6));  // invalid but accepted at this stage String invalidLine7 = ""52,QQQQQQQ,3,33,52.3""; assertTrue(fileReaderObject.processJourneyLine(invalidLine7));  // invalid (spaces) String invalidLine8 = ""0,  ,2,15,43.4""; assertFalse(fileReaderObject.processJourneyLine(invalidLine8));   //          Invalid number of passengers // invalid but accepted at this stage (0) String invalidLine9 = ""61,XX204SV,0,33,52.3""; assertTrue(fileReaderObject.processJourneyLine(invalidLine9));  // invalid but accepted at this stage (-1) String invalidLine10 = ""62,XX345JR,-1,10,73.5""; assertTrue(fileReaderObject.processJourneyLine(invalidLine10));  // invalid but accepted at this stage (2000) String invalidLine11 = ""63,TT345JR,2000,33,52.7""; assertTrue(fileReaderObject.processJourneyLine(invalidLine11));  // invalid (string) String invalidLine12 = ""64,BB345JR,AVG,33,52.7""; assertFalse(fileReaderObject.processJourneyLine(invalidLine12));  // invalid (empty) String invalidLine13 = ""65,LX120RG,,31,62.4""; assertFalse(fileReaderObject.processJourneyLine(invalidLine13));  // invalid (spaces) String invalidLine14 = ""66,LX120RG,  ,31,62.4""; assertFalse(fileReaderObject.processJourneyLine(invalidLine14));   //          Invalid time // invalid but accepted at this stage (0) String invalidLine15 = ""80,KU247GE,2,0,43.8""; assertTrue(fileReaderObject.processJourneyLine(invalidLine15));  // invalid but accepted at this stage (-1) String invalidLine16 = ""81,CU247GE,2,-1,43.8""; assertTrue(fileReaderObject.processJourneyLine(invalidLine16));  // invalid (empty) String invalidLine17 = ""82,LL247GE,2,,43.8""; assertFalse(fileReaderObject.processJourneyLine(invalidLine17));  // invalid (spaces) String invalidLine18 = ""83,LL247GE,2,  ,43.8""; assertFalse(fileReaderObject.processJourneyLine(invalidLine18));  // invalid (string) String invalidLine19 = ""83,LL247GE,2,ABC,43.8""; assertFalse(fileReaderObject.processJourneyLine(invalidLine19));     //          Invalid maximum velocity // invalid but accepted at this stage (-1) String invalidLine20 = ""91,YR204YR,3,33,-1""; assertTrue(fileReaderObject.processJourneyLine(invalidLine20));  // invalid but accepted at this stage (too big) String invalidLine21 = ""92,GR883GR,3,8,1000000034""; assertTrue(fileReaderObject.processJourneyLine(invalidLine21));  // invalid (empty) String invalidLine22 = ""93,UU345UU,3,8,""; assertFalse(fileReaderObject.processJourneyLine(invalidLine22));  // invalid (spaces) String invalidLine23 = ""94,UU345UU,3,8,  ""; assertFalse(fileReaderObject.processJourneyLine(invalidLine23));  // invalid (spaces) String invalidLine24 = ""95,UU345UU,3,8,ABC""; assertFalse(fileReaderObject.processJourneyLine(invalidLine24));  //          Extreme case  // invalid (spaces) String invalidLine25 = """"; assertFalse(fileReaderObject.processJourneyLine(invalidLine25));  // invalid (spaces) String invalidLine26 = "",,,,""; assertFalse(fileReaderObject.processJourneyLine(invalidLine26));  // invalid (spaces) String invalidLine27 = "",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,""; assertFalse(fileReaderObject.processJourneyLine(invalidLine27)); } "	0	1	1	1	1	0
"@Override public void initialise(AudioProcessingContext context) throws IOException { ByteBuffer buffer = broker.getBuffer();  if (buffer.getInt(0) != HEAD_TAG_HALF) { throw new IllegalStateException(""First packet is not an OpusHead.""); }  int channelCount = buffer.get(9) & 0xFF; int sampleRate = Integer.reverseBytes(buffer.getInt(12));  opusPacketRouter = new OpusPacketRouter(context, sampleRate, channelCount);  if (!packetInputStream.startNewPacket()) { throw new IllegalStateException(""No OpusTags packet in track.""); }  broker.consume(true, packetInputStream); } "	1	0	1	1	1	0
"public static void main( String[] args ) throws Exception{ if(args.length != 3){ System.out.println(""Usage: java DecryptFile <key> <inputfile> <outputfile>""); System.exit(1); }  // Read in arguments. BigInteger k = new BigInteger(args[0],16); File input = new File (args[1]); File output = new File (args[2]);  DataInputStream in = new DataInputStream (new FileInputStream (input));  DataOutputStream out = new DataOutputStream (new FileOutputStream (output));  // Break key into 10 bytes. short[] key = new short[10]; for(int i=0,j=9; i<10; ++i,--j){ key[j]= k.shiftRight(i*8).and(MASK).shortValue(); }  // Read in blocks from the file until there are no more. // Decrypt must catch the last block, so only write // when the next block is seen. long thisBlock = 0; long nextBlock = 0; try{ thisBlock = in.readLong(); while (true){ nextBlock = in.readLong(); out.writeLong(SkipJack.Decrypt(key, thisBlock)); thisBlock = nextBlock; } }catch(EOFException e){ // Remove padding thisBlock = SkipJack.Decrypt(key, thisBlock); int numDataBytes = 7 - (Long.numberOfTrailingZeros(thisBlock) / 8); byte[] finalbytes = ByteBuffer.allocate(8).putLong(thisBlock).array(); out.write(finalbytes, 0, numDataBytes); }  in.close(); out.close(); } "	1	0	1	1	1	0
@Nullable @Override public String getServerFingerprint() { for (P4Config config : parents) { if (config.hasServerFingerprintSet()) { return getServerFingerprint(); } } return null; } 	1	1	1	1	0	0
"@Test public void testSentenceWithCommas() throws RedPenException { // NOTE: the following sentence contains 29 words. Document document = prepareSimpleDocument(""There is no real path, so first follow the line of the foot of the rocks past Kawa, then cut straight up to the next level of slabs.""); RedPen redPen = new RedPen(config); Map<Document, List<ValidationError>> errors = redPen.validate(singletonList(document)); assertEquals(1, errors.get(document).size()); } "	0	1	1	1	1	0
public boolean isFolder() { return localCopy != null || (type != null && type.toLowerCase().startsWith(TYPE_FOLDER)); } 	1	0	1	1	1	0
"@RequestMapping(path = ""/deleteitinerary"", method = RequestMethod.POST) public void deleteUser(@RequestBody HashMap point) { String name = (String) point.get(""name""); if (restaurants.findFirstByName(name) != null) { Restaurant rest = restaurants.findFirstByName(name); Itinerary del = itineraries.findFirstByEventid(rest.getId()); itineraries.delete(del.getId()); } else { Activity act = activities.findFirstByActivityname(name); Itinerary del = itineraries.findFirstByEventid(act.getId()); itineraries.delete(del.getId()); }   } "	1	0	1	0	1	0
"@PreAuthorize(""hasRole('ROLE_ANONYMOUS')"") @RequestMapping(value = ""/forgot_password"", method = RequestMethod.POST) public String handleForgotPasswordEmail(@RequestParam(""email"") String email, HttpServletRequest request, Model model) { String baseLink = (request.getRequestURL()).toString().split(""forgot_password"")[0]; passwordRecoveryService.sendRecoverPasswordEmail(email,baseLink); model.addAttribute(""msg"",true); return ""forgot_password""; } "	0	0	1	1	1	0
"private void initUI(final View rootView) {  name         = (TextView)rootView.findViewById(R.id.stored_name_lbl); password     = (TextView)rootView.findViewById(R.id.stored_pass_lbl); email        = (TextView)rootView.findViewById(R.id.stored_email_lbl); id        = (TextView)rootView.findViewById(R.id.stored_id_lbl);  sp = getActivity().getSharedPreferences(MyPREFS, Context.MODE_PRIVATE); user_key = sp.getString(""USER_KEY"", null); dr = new DataRepo(getActivity()); user = dr.getUser(user_key);   name.setText(user.getUsername()); password.setText(user.getPassword()); email.setText(user.getEmail()); id.setText(Integer.toString(user.getId()));     } "	1	0	1	1	1	0
"@Test public void nonSuperSuspendableCallTest() { final String method = A.class.getName() + "".foo()""; assertTrue(!suspependables.contains(method)); } "	0	1	1	0	1	0
@Override public boolean isRoot() { return exml.getParentUID() != null; } 	1	0	1	1	1	0
public boolean hasOptions() { return options != null; } 	0	0	1	1	1	0
@Override public void removeLayer(Layer layer) { if (getDelegate() != null) { delegate.removeLayer(layer); return; } if (layer != null) { layer.removeNode(this); } } 	0	1	1	0	1	0
@Override public void setGraph(Graph graph) { if (getDelegate() != null) { delegate.setGraph(graph); return; } Graph oldGraph = getGraph(); if (graph != null) { graph.addNode(this); } if (oldGraph != null && oldGraph != graph && oldGraph instanceof GraphImpl) { // remove relation from old graph ((GraphImpl) oldGraph).basicRemoveNode(this); } basicSetGraph(graph); } 	0	1	1	0	1	0
"public boolean isShowIdLabel() { return myShowIdLabel && Registry.is(""debugger.showTypes""); } "	1	0	1	0	0	0
"public String parseInput(String in){ String[] cmds = in.split("",""); String cmd = cmds[0];  if (cmd.equals(""exit"")) System.exit(0); else if (cmd.equals(""home"")){ if (cmds.length > 0) loop(in.split("","", 2)[1]); else loop(); } else if (cmd.equals(""help"")){  } else return in; return null; } "	1	1	1	1	0	0
"@RequestMapping(value = ""/api/v1/houses/{id}"", method = RequestMethod.GET) @Authorization @ApiResponses({ @ApiResponse(code = 200, response = HouseInfoFields.class, message = ""Get house info"") }) public ResponseEntity<?> get(@PathVariable String id, @CurrentUser @ApiIgnore User currentUser) throws Exception { House house = houseService.getById(id); if (house == null) { return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new GenericResponseBody(Message.MESSAGE_NOT_FOUND)); }  if (!house.getPublicity() || memberService.findTopByHouseAndUser(house, currentUser) == null) { return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new GenericResponseBody(Message.MESSAGE_NOT_FOUND)); }  HouseInfoFields houseInfoFields = houseInfoFieldsPopulator.populate(house); return new ResponseEntity<>(houseInfoFields, HttpStatus.OK); } "	1	0	1	1	1	0
private void findPath() { while (unSettledNodes.size() > 0) { Point current = getMinimum(unSettledNodes); if (current.equals(destination)) return; settledNodes.add(current); unSettledNodes.remove(current); findMinimalDistances(current); } } 	1	0	1	0	1	0
"private void saveProfile() { Intent result = new Intent(); ProfileManager vpl = ProfileManager.getInstance(this);  if (!TextUtils.isEmpty(mEmbeddedPwFile)) ConfigParser.useEmbbedUserAuth(mResult, mEmbeddedPwFile);   // Only use crl on import if it is found ConfigParser.removeCRLCustomOption(mResult); if (TextUtils.isEmpty(mCrlFileName)) { // TODO: Convert this to a real config option that is parsed mResult.mCustomConfigOptions += ""\ncrl-verify "" + mCrlFileName; }  vpl.addProfile(mResult); vpl.saveProfile(this, mResult); vpl.saveProfileList(this); result.putExtra(VpnProfile.EXTRA_PROFILEUUID, mResult.getUUID().toString()); setResult(Activity.RESULT_OK, result); finish(); } "	1	1	1	1	0	0
"private static void buildBibVoyTable(Connection voyager, Connection current) throws SQLException { try (   Statement c_stmt = current.createStatement(); Statement v_stmt = voyager.createStatement()  ){  c_stmt.execute(""SET unique_checks=0"");  // Starting with bibs, create the destination table, then populated it from Voyager c_stmt.execute(""drop table if exists ""+CurrentDBTable.BIB_VOY); c_stmt.execute(""create table ""+CurrentDBTable.BIB_VOY+""( "" + ""bib_id int(10) unsigned not null, "" + ""record_date timestamp null, "" + ""active int not null default 1, "" + ""key (bib_id) ) "" + ""ENGINE=InnoDB""); c_stmt.execute(""alter table ""+CurrentDBTable.BIB_VOY+"" disable keys""); current.commit();  try (   ResultSet rs = v_stmt.executeQuery (""select BIB_ID, UPDATE_DATE, SUPPRESS_IN_OPAC "" + "" from BIB_MASTER""); PreparedStatement pstmt = current.prepareStatement (""insert into ""+CurrentDBTable.BIB_VOY+ "" (bib_id, record_date, active) values ( ? , ? , ? )"")  ) {  int i = 0; while (rs.next()) { pstmt.setInt(1, rs.getInt(1) ); pstmt.setTimestamp(2, rs.getTimestamp(2) ); pstmt.setInt(3, ( rs.getString(3).equals(""N"") )?1:0 ); pstmt.addBatch(); if ((++i % 2048) == 0) { pstmt.executeBatch(); if ((i % 262_144) == 0) { System.out.println(i +"" bibs pulled.""); current.commit(); } } } pstmt.executeBatch(); System.out.println(""Bib count: ""+i); } c_stmt.execute(""alter table ""+CurrentDBTable.BIB_VOY+"" disable keys""); current.commit(); } } "	0	0	1	1	1	0
"public String buildJDKLogFormat(String logFormat) { tokens = parseFormatString(logFormat); StringBuilder formatBuilder = new StringBuilder();  for (int i = 0, j = 0; i < tokens.length; i++) { if (tokens[i].startsWith(Constants.FMT_TIMESTAMP)) { dateFormat = new SimpleDateFormat( tokens[i].substring(Constants.FMT_TIMESTAMP.length() + 3, tokens[i].length() - 1)); formatBuilder.append(""%"" + (j + 1) + ""$s""); j++; } else if (isAPlaceholderToken(tokens[i])) { formatBuilder.append(""%"" + (j + 1) + ""$s""); j++; } else { formatBuilder.append(tokens[i]); } } formatBuilder.append('\n');  return formatBuilder.toString(); } "	1	0	1	1	0	0
"public static void putFloatArray(SharedPreferences.Editor editor, String key, float[] array) { try { JSONArray json = new JSONArray(); for (float f : array) { json.put(f); } editor.putString(""equalizer_values"", json.toString()); } catch (JSONException e) { Log.e(TAG, ""putFloatArray: "" + e.getClass() + "": "" + e.getLocalizedMessage()); } } "	0	0	1	1	1	0
"protected Meeting createMeeting(JTable source) { int row = source.getSelectedRow(); int column = source.getSelectedColumn(); String timeInterval = (String) source.getValueAt(row, 0); String day = source.getColumnName(column); day = day.toUpperCase(); String[] times = timeInterval.split(""-""); DateFormat format = new SimpleDateFormat(""h:mm""); Date start = null; Date end = null; try { start = format.parse(times[0]); end = format.parse(times[1]); } catch (ParseException e) { // TODO Auto-generated catch block e.printStackTrace(); } return Meeting.create(start, end, DayOfWeek.valueOf(day), null, null); } "	0	0	1	1	1	0
"@GuardedBy(""mLock"") private boolean shouldRestartPacketReader() { return !mPacketReaderActive && !tooManyPendingPackets() && mPosToQueue < mRequest.mEnd && mError != null && !mCancel && !mEof; } "	0	1	1	1	0	0
@Kroll.method @Kroll.setProperty public void setBigPicture(Object picture) { TiDrawableReference source = TiDrawableReference.fromObject(this.getActivity(), picture);  // Check for decodeRetries if (hasProperty(TiC.PROPERTY_DECODE_RETRIES)) { source.setDecodeRetries(TiConvert.toInt(getProperty(TiC.PROPERTY_DECODE_RETRIES), TiDrawableReference.DEFAULT_DECODE_RETRIES)); }  ((BigPictureStyle)style).bigPicture(source.getBitmap());  setProperty(TiC.PROPERTY_BIG_PICTURE, picture); } 	1	0	1	0	1	0
"@Override public void refresh(LibrusData cache) { Log.d(TAG, ""AnnouncementsFragment update()"");  } "	0	0	1	1	1	0
"public static NativeArray jsFunction_searchAccessTokens(Context cx, Scriptable thisObj, Object[] args, Function funObj) throws Exception { NativeObject tokenInfo; NativeArray tokenInfoArr = new NativeArray(0); if (args == null || !isStringValues(args)) { handleException(""Invalid input parameters.""); } String searchValue = (String) args[0]; String searchTerm; String searchType; APIProvider apiProvider = getAPIProvider(thisObj); Map<Integer, APIKey> tokenData = null; String loggedInUser = ((APIProviderHostObject) thisObj).getUsername();  if (searchValue.contains("":"")) { searchTerm = searchValue.split("":"")[1]; searchType = searchValue.split("":"")[0]; if (""*"".equals(searchTerm) || searchTerm.startsWith(""*"")) { searchTerm = searchTerm.replaceFirst(""\\*"", "".*""); } tokenData = apiProvider.searchAccessToken(searchType, searchTerm, loggedInUser); } else { //Check whether old access token is already available if (apiProvider.isApplicationTokenExists(searchValue)) { APIKey tokenDetails = apiProvider.getAccessTokenData(searchValue); if (tokenDetails.getAccessToken() == null) { throw new APIManagementException(""The requested access token is already revoked or No access token available as per requested.""); } tokenData = new HashMap<Integer, APIKey>(); tokenData.put(0, tokenDetails); } else { if (""*"".equals(searchValue) || searchValue.startsWith(""*"")) { searchValue = searchValue.replaceFirst(""\\*"", "".*""); } tokenData = apiProvider.searchAccessToken(null, searchValue, loggedInUser); } } if (tokenData != null && tokenData.size() != 0) { for (int i = 0; i < tokenData.size(); i++) { tokenInfo = new NativeObject(); tokenInfo.put(""token"", tokenInfo, tokenData.get(i).getAccessToken()); tokenInfo.put(""user"", tokenInfo, tokenData.get(i).getAuthUser()); tokenInfo.put(""scope"", tokenInfo, tokenData.get(i).getTokenScope()); tokenInfo.put(""createTime"", tokenInfo, tokenData.get(i).getCreatedDate()); if (tokenData.get(i).getValidityPeriod() == Long.MAX_VALUE) { tokenInfo.put(""validTime"", tokenInfo, ""Won't Expire""); } else { tokenInfo.put(""validTime"", tokenInfo, tokenData.get(i).getValidityPeriod()); } tokenInfo.put(""consumerKey"", tokenInfo, tokenData.get(i).getConsumerKey()); tokenInfoArr.put(i, tokenInfoArr, tokenInfo); } } else { throw new APIManagementException(""The requested access token is already revoked or No access token available as per requested.""); }  return tokenInfoArr;  } "	1	1	1	0	1	0
public void setSelectedAccounts(ParcelableAccount... accounts) { if (accounts.length == 1) { mCountView.setText(null); final ParcelableAccount account = accounts[0]; mImageLoader.displayProfileImage(mProfileImageView, account.profile_image_url); mProfileImageView.setBorderColor(account.color); } else { mCountView.setText(String.valueOf(accounts.length)); mImageLoader.cancelDisplayTask(mProfileImageView); mProfileImageView.setImageDrawable(new ColorDrawable(Color.WHITE)); mProfileImageView.setBorderColors(Utils.getAccountColors(accounts)); } } 	0	1	1	0	1	0
"@Override public MillState getByName(String name) { try { String query = ""select * from state_mill where NAME = ?""; List<MillState> states = jdbcTemplate.query(query, new Object[]{name}, new MillStateMapper()); return states.get(0); }catch (Exception e) { System.err.println(""IndexOutOfBoundsException MillState.getByName:name="" + name);  throw new RuntimeException(""IndexOutOfBoundsException MillState.getByName:name="" + name); } } "	0	0	1	1	1	0
@Override public void streamClosed(long fileSize, String filePath) { int trimLength = (int)getCachePath().length(); String fileId = filePath.substring(trimLength); mSQLHelper.updateFileSize(fileId, fileSize); deleteLessUsedFiles(fileSize); } 	1	0	1	0	1	0
"@Override public void contextDestroyed(ServletContextEvent sce) { try { List<JobExecutionContext> currentlyExecuting = Schedule.getScheduler().getCurrentlyExecutingJobs();  for (JobExecutionContext jobExecutionContext : currentlyExecuting) { JobKey jobKey = jobExecutionContext.getJobDetail().getKey(); Schedule.getScheduler().interrupt(jobKey); Schedule.getScheduler().deleteJob(jobKey); } } catch (SchedulerException e) { LOGGER.error(""Problem Clearing Job Queue"", e); }  try { Schedule.getScheduler().clear(); Schedule.getScheduler().shutdown(true); } catch (SchedulerException e) { LOGGER.error(""Problem shutting down scheduler"", e); }  ClassLoader cl = Thread.currentThread().getContextClassLoader(); // Loop through all drivers Enumeration<Driver> drivers = DriverManager.getDrivers(); while (drivers.hasMoreElements()) { Driver driver = drivers.nextElement(); if (driver.getClass().getClassLoader() == cl) { // This driver was registered by the webapp's ClassLoader, so deregister it: try { LOGGER.info(String.format(""Deregistering JDBC driver: %s"", driver)); DriverManager.deregisterDriver(driver); } catch (SQLException ex) { LOGGER.fatal(String.format(""Error deregistering JDBC driver: %s"", driver), ex); } } else { // driver was not registered by the webapp's ClassLoader and may be in use elsewhere LOGGER.info(String.format(""Not deregistering JDBC driver %s as it does not belong to this webapp's ClassLoader"", driver)); } } } "	1	0	1	1	1	0
"private List<File> findResourcesFromDirectoryStructure(final File contentsDir) { final List<String> childNames = Arrays.asList(contentsDir.list()); final List<File> resources = new ArrayList<File>();  // Find platform-specific stuff File platformDir = null; if (childNames.contains(PLATFORM + BITS)) { final File potentialPlatformDir = new File(contentsDir, PLATFORM + BITS); if (potentialPlatformDir.isDirectory()) { platformDir = potentialPlatformDir; } } if (platformDir == null && childNames.contains(PLATFORM)) { final File potentialPlatformDir = new File(contentsDir, PLATFORM + BITS); if (potentialPlatformDir.isDirectory()) { platformDir = potentialPlatformDir; } } if (platformDir != null) { log(""Found platform-specific directory "" + platformDir.getAbsolutePath()); for (final File resource : platformDir.listFiles()) { resources.add(resource); } }  // Find multi-platform stuff; always do this final File[] commonResources = contentsDir.listFiles(new FileFilter() { @Override public boolean accept(final File file) { return !file.isDirectory(); } }); for (final File resource : commonResources) { resources.add(resource); } return resources; } "	1	1	1	1	0	0
"private void checkFromValidFe(BaseRequest request, BaseResponse response) throws InvalidClientException { if (isFromValidFe(request)) { throw new InvalidClientException(""invalid client host""); } } "	1	0	1	1	1	0
"@Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) { messageListener.onException(ctx); logger.error(""Exception: {}"", cause.getMessage()); ctx.close(); } "	1	0	1	1	1	0
"@Override public BiometricData saveBiometricsForPatient(Patient patient, BiometricData biometricData) { BiometricSubject subject = biometricData.getSubject(); if (subject == null) { log.debug(""There are no biometrics to save for patient""); } else { if (isBiometricEngineEnable()) { throw new IllegalStateException(""Unable to save biometrics, as no biometrics engine is enabled""); } BiometricEngine biometricEngine = getBiometricEngine(); log.debug(""Using biometric engine: "" + biometricEngine.getClass().getSimpleName());  PatientIdentifierType idType = biometricData.getIdentifierType(); if (idType != null) { log.debug(""Saving biometrics as a patient identifier of type: "" + idType.getName()); BiometricSubject existingSubject = (subject.getSubjectId() == null ? null : biometricEngine.lookup(subject.getSubjectId())); if (existingSubject == null) { throw new IllegalArgumentException(""The subject doesn't exist in m2Sys. Did you call m2Sys enroll method?"") ; }  // If patient does not already have an identifier that references this subject, add one boolean identifierExists = false; for (PatientIdentifier identifier : patient.getPatientIdentifiers(idType)) { if (identifier.getIdentifier().equals(subject.getSubjectId())) { identifierExists = true; } } if (identifierExists) { log.debug(""Identifier already exists for patient""); } else { PatientIdentifier identifier = identifierBuilder.createIdentifier(idType.getUuid(), subject.getSubjectId(), null); patient.addIdentifier(identifier); patientService.savePatientIdentifier(identifier); log.debug(""New patient identifier saved for patient: "" + identifier); } } else { // TODO: In the future we could add additional support for different storage options - eg. as person attributes throw new IllegalArgumentException(""Invalid biometric configuration.  No patient identifier type specified""); } } return biometricData; } "	0	0	1	1	1	0
"public boolean start(Ticker ticker, boolean longStart) throws IOException {  if(started) return true;  if(!slotFilterDisabled) slotFilter.start(ticker);  long curStoreFileSize = hdRAF.length();  long curMetaFileSize = metaRAF.length();  // If prevStoreSize is nonzero, that means that we are either shrinking or // growing. Either way, the file size should be between the old size and the // new size. If it is not, we should pad it until it is.  long smallerSize = storeSize; if(prevStoreSize < storeSize && prevStoreSize > 0) smallerSize = prevStoreSize;  if((smallerSize * (headerBlockLength + dataBlockLength + hdPadding) > curStoreFileSize) || (smallerSize * Entry.METADATA_LENGTH > curMetaFileSize)) { // Pad it up to the minimum size before proceeding. if(longStart) { setStoreFileSize(storeSize, true); curStoreFileSize = hdRAF.length(); curMetaFileSize = metaRAF.length(); } else return true; }  // Otherwise the resize will be completed by the Cleaner thread. // However, we do still need to set storeFileOffsetReady  storeFileOffsetReady = Math.min(curStoreFileSize / (headerBlockLength + dataBlockLength + hdPadding), curMetaFileSize / Entry.METADATA_LENGTH);  if(ticker == null) { cleanerThread.start(); } else ticker.queueTimedJob(new FastRunnable() {  @Override public void run() { cleanerThread.start(); }  }, ""Start cleaner thread"", 0, true, false);  started = true;  return false; } "	1	1	1	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);  Configuration.getInstance().loadConfiguration(this);  panelsFlipper = (ViewFlipper) findViewById(R.id.main_panelsFlipper);  RadioCheckListener radioCheckListener = new RadioCheckListener(); settingsRadio = (RadioButton) findViewById(R.id.main_settingsRadioButton); settingsRadio.setOnCheckedChangeListener(radioCheckListener); logsRadio = (RadioButton) findViewById(R.id.main_logsRadioButton); logsRadio.setOnCheckedChangeListener(radioCheckListener); autoTimeRadio = (RadioButton) findViewById(R.id.main_autoTimeRadioButton); autoTimeRadio.setOnCheckedChangeListener(radioCheckListener); consoleRadio = (RadioButton) findViewById(R.id.main_autoTimeRadioButton); if (consoleRadio != null) { consoleRadio.setOnCheckedChangeListener(radioCheckListener); }  new SelectLoggerPanel(this); settingsPanel = new SettingsPanel(this); logsPanel = new LogsPanel(this); autoUpdatePanel = new AutoUpdatePanel(this);  TextView consoleTextView = (TextView) findViewById(R.id.main_consoleTextView); consoleAppender = new ConsoleMessagesAppender(consoleTextView);  btStatusLabel = (TextView) findViewById(R.id.main_btStatusTextView); updateBtStatusLabel(""""); } "	0	1	1	0	1	0
protected void applyGravity() { this.motion.setY(Math.max(GameConstants.MAX_Y_SPEED, this.motion.getY() - (GameConstants.GRAVITY / GameConstants.TICKS_PER_SEC))); Point movement = motion.divide(GameConstants.TICKS_PER_SEC);  if(!this.handler.checkCellCollision(location, movement, this)) { this.location = this.location.add(movement); } else { this.motion.setY(0); } } 	0	1	1	1	0	0
"public static void insertMessage(List<String> message, List<String> insert, int line, int start, int end) { String lineContent = message.remove(line); if(isTaggedInteractive(lineContent)) { lineContent = lineContent.replace("""", """"); message.add(line, lineContent.substring(0, start)+convertToConsole(insert)+lineContent.substring(end)); return; } // Find interactive lines meant for this message List<String> interactives = new ArrayList<>(); int index = line; while(index < message.size() && isTaggedInteractive(message.get(index))) { interactives.add(message.get(index)); index++; } // Split the line and add the parts int at = line; if(start > 0) { message.add(line, lineContent.substring(0, start)); at++; message.addAll(at, interactives); at += interactives.size(); } message.addAll(at, insert); at += insert.size(); message.addAll(at, interactives); at += interactives.size(); if(end < (lineContent.length()-1)) { message.add(at, lineContent.substring(end)); at++; message.addAll(at, interactives); } } "	1	1	1	1	0	0
"@Test public void test() throws InterruptedException {  //    S._debug_on(TimeExpiredCache.class); OnTimeExpiredCache<String, String> cache = new OnTimeExpiredCache<>(40, 10);  for (int i = 0; i < 100; i++) { cache.put(String.valueOf(i), String.valueOf(i) + ""_str""); }  assertEquals(""12_str"", cache.get(""12"")); Thread.sleep(60); S.echo(cache.get(""12"")); assertNull(cache.get(""12""));  for (int i = 100; i < 200; i++) { cache.put(String.valueOf(i), String.valueOf(i) + ""_str""); }  assertNull(cache.get(""12"")); assertEquals(""122_str"", cache.get(""122"")); Thread.sleep(60); assertNull(cache.get(""12"")); assertNull(cache.get(""122""));  } "	1	0	1	1	1	0
"@Override public void onReceive(Object obj) throws Exception { if (obj instanceof Event) { Event event = (Event) obj; try { if (""keyword-job-tracking"".equals(event.getName())) {  KeywordJob job = (KeywordJob) event.getSource();  //if (job.getStatus() == AbstractJob.Status.Queued) return;  KeywordProject project = keywordService.get(job.getProjectId());  if (job.getStatus() == AbstractJob.Status.Running) { VMachine jenkinsVM = vmachineService.getSystemVM(project.getTenant(), project.getSpace()); VMachine testVM = vmachineService.get(job.getTestVMachineId()); StringBuilder sb = new StringBuilder(""http://"").append(jenkinsVM.getPublicIp()) .append("":8081/guacamole/#/client/c/vnc_node_"").append(testVM.getPrivateIp()); job.put(""watch_url"", sb.toString()); }  job.put(""project_status"", project.getStatus().toString()); eventController.send(project.getCreator().get(), job);  } else if (""performance-job-tracking"".equals(event.getName())) {  PerformanceJob job = (PerformanceJob) event.getSource();  //Cleanup blod data in this job job.put(""raw_report"", null);  //if (job.getStatus() ==  AbstractJob.Status.Queued) return;  PerformanceProject project = perfService.get(job.getProjectId(),""raw""); job.put(""project_status"", project.getStatus().toString()); job.put(""runningTime"", formater.format(job.getCreatedDate())); eventController.send(project.getCreator().get(), job);  } else if (""upload-job-tracking"".equals(event.getName())) { SeleniumUploadJob job = (SeleniumUploadJob) event.getSource();  //Cleanup blod data in this job job.put(""raw_report"", null);  SeleniumUploadProject project = seleniumUploadService.get(job.getProjectId(),""raw"");  if (job.getStatus() == AbstractJob.Status.Running) { VMachine jenkinsVM = vmachineService.getSystemVM(project.getTenant(), project.getSpace()); VMachine testVM = vmachineService.get(job.getTestVMachineId()); StringBuilder sb = new StringBuilder(""http://"").append(jenkinsVM.getPublicIp()) .append("":8081/guacamole/#/client/c/vnc_node_"").append(testVM.getPrivateIp()); job.put(""watch_url"", sb.toString()); }  job.put(""project_status"", project.getStatus().toString()); eventController.send(project.getCreator().get(), job);  } } catch (Exception e) { e.printStackTrace(); //TODO: should be send error } } } "	1	0	1	0	0	0
@Override public void drawEnergy(double v) { if (getCore() != null) { TileGeneratorCore core = (TileGeneratorCore) getCore(); double convertedPower = convertFromEU(v); core.extractEnergy(null, (int) Math.round(convertedPower), false); worldObj.markBlockForUpdate(coreLocation.x, coreLocation.y, coreLocation.z); } } 	1	0	1	0	1	0
public List<ActivityData> findAllForUserWithUnit(User user, String unit) { return getFacade().getAllForUserWithUnit(user.getIdUser(), unit); } 	1	0	1	0	1	0
public void doneExpenseItem(View v) throws ParseException{  if (createExpenseItem(v)){ finish(); } } 	1	0	1	1	0	0
public <V, T extends Enum<T>> void addEnum(Column column, V value, EnumMapper<V, T> mapper) { T mappedValue = mapper.getMappedValue(value); checkForRequiredColumn(column, mappedValue); checkForColumnDataType(column, mapper.getEnumClass(), DataType.TEXT);  String dbValue = null; if (mappedValue != null) { dbValue = mappedValue.name(); } contentValues.put(column.getName(), dbValue); } 	0	1	1	0	1	0
"private ServiceResponse convert(Model m, OutputFormat format) { BiopaxConverter biopaxConverter = new BiopaxConverter(blacklist); ServiceResponse toReturn;  if(format != OutputFormat.BIOPAX) { // remove all Pathway objects (these, esp. sub-pathways, are incomplete due to detaching from PC // and ain't really useful for converting to text formats) for(Pathway p : new HashSet<Pathway>(m.getObjects(Pathway.class))) { m.remove(p); } }  if (format==OutputFormat.GSEA) { toReturn = biopaxConverter.convert(m, format, ""uniprot"", false); //uniprot; outside pathway entities } else { toReturn = biopaxConverter.convert(m, format); //default ID type, layout, etc. }  return toReturn; } "	1	0	1	0	1	0
"@Override public ServiceResponse fetch(final OutputFormat format, boolean subPathways, final String... uris) { if(!paxtoolsModelReady()) return new ErrorResponse(MAINTENANCE,""Waiting for the initialization to complete (try later)..."");  // extract/convert a sub-model try { final String[] mappedUris = findUrisByIds(uris);  Set<BioPAXElement> elements = urisToBpes(paxtoolsModel, mappedUris); Model m = autoCompleteAndClone(elements, subPathways);  //name the sub-model - can be useful when converted to GSEA, etc... if(!m.getObjects().isEmpty()) { if(mappedUris.length==1) { String uri = mappedUris[0]; m.setUri(uri); BioPAXElement b = m.getByID(uri); if(b instanceof Named) { m.setName(((Named) b).getDisplayName() + "" "" + ArrayUtils.toString(uris)); } else { m.setName(ArrayUtils.toString(uris)); } } else { String desc = ArrayUtils.toString(uris); m.setUri(""PC_get_"" + desc.hashCode()); m.setName(desc); } }  return convert(m, format); } catch (Exception e) { return new ErrorResponse(INTERNAL_ERROR, e); } } "	1	0	1	0	1	0
public static List<ServiceResourceInfo> getAllServiceResourceInfos(String type, String componentName) { List<ServiceResourceInfo> serviceInfos = new ArrayList<ServiceResourceInfo>(); for (ComponentConfig cc : getAllComponents()) { if (componentName == null || componentName.equals(cc.getComponentName())) { List<ServiceResourceInfo> ccServiceInfoList = cc.getServiceResourceInfos(); if (UtilValidate.isEmpty(type)) { serviceInfos.addAll(ccServiceInfoList); } else { for (ServiceResourceInfo serviceResourceInfo : ccServiceInfoList) { if (type.equals(serviceResourceInfo.type)) { serviceInfos.add(serviceResourceInfo); } } } } } return serviceInfos; } 	1	0	1	0	1	0
public Event remove(ParsedCommand pc) { Event eventToBeRemoved = new Event(); for (Event e : events) { if (e.getId() == pc.getId()) { eventToBeRemoved = e; break; } } manage.remove(eventToBeRemoved); events.remove(eventToBeRemoved); return eventToBeRemoved; } 	0	1	1	0	1	0
private void log(Logger.Level level, String format, Object arg1, Object arg2) { logger.print(level, MessageFormatter.format(format, arg1, arg2).getMessage(), null); } 	0	0	1	1	1	0
public boolean isThereIncompleteAbrechnung() { BigDecimal totalBrutto = incompleteAbrechnungsTotals.get(0); return totalBrutto.signum() > 0; } 	1	1	1	1	0	0
@Override public void onRstStreamRead(ChannelHandlerContext ctx, int streamId, long errorCode) throws Http2Exception { handler.onRstStreamRead(streamId); } 	1	0	1	0	1	0
@Override public void error(SAXParseException exception) throws SAXException { try { this.reportError(exception.getMessage(), XMLParserSettings.FAIL_ON_SAX_NON_FATAL_ERRORS); } catch (RDFParseException rdfpe) { throw new SAXException(rdfpe); } } 	1	0	1	0	1	0
public void setUserSpinner() { User director = mSchool.getDirector();  if (director == null) return;  for (int i = 0; i < mUsers.size(); i++) if (mUsers.get(i).getId() == director.getId()) mDirector.setSelection(i); } 	1	1	1	0	1	0
@Keep public void onEventMainThread(Finished ev) { Serializable dataType = ev.getIntent().getSerializableExtra(GerritService.DATA_TYPE_KEY); if (ev.getItems() < 1 && dataType == GerritService.DataType.Comment) { // Commented successfully, remove comment from cache and go back to the change details if (mParent instanceof ReviewActivity) { ((ReviewActivity) mParent).onCommented(mCacheKey, mChangeId); } } } 	1	1	1	0	1	0
@Override public Object[] getChildren(Object parentElement) { List<Object> result = new ArrayList<Object>(); if (parentElement instanceof TextOnlyNode && ((TextOnlyNode) parentElement).getType() == NodeType.INSTANCE_REFERENCED_BY) { reqToAsilMap.clear(); if (input instanceof FaultFailurePort) { FaultFailurePort failurePort = (FaultFailurePort) input; ECrossReferenceAdapter adapt = ECrossReferenceAdapterFactory.INSTANCE.adapt(failurePort); Collection<Setting> inverseReferences = adapt.getInverseReferences(failurePort); for (Setting setting : inverseReferences) { EObject eObject = setting.getEObject(); if (eObject instanceof FaultFailure_anomaly) { FaultFailure_anomaly failure = (FaultFailure_anomaly) eObject; EObject faultFailure = failure.eContainer(); ECrossReferenceAdapter failAdapt = ECrossReferenceAdapterFactory.INSTANCE.adapt(faultFailure); Collection<Setting> failReferenced = failAdapt.getInverseReferences(faultFailure); for (Setting failRef : failReferenced) { EObject eob = failRef.getEObject(); if (eob instanceof SafetyConstraint) { SafetyConstraint constraint = (SafetyConstraint) eob; ASILKind asilValue = constraint.getAsilValue(); List<TextOnlyNode> asils = reqToAsilMap.get(failure); if (asils == null) { asils = new ArrayList<>(); } asils.add(new TextOnlyNode(asilValue.getName(), NodeType.REFERENCES)); reqToAsilMap.put(faultFailure, asils); } } result.add(faultFailure); } }  } } if (parentElement instanceof FaultFailure) { if (reqToAsilMap.containsKey(parentElement)) { return reqToAsilMap.get(parentElement).toArray(); } }  return result.toArray(); } 	1	1	1	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { findViewById(android.R.id.content).setSystemUiVisibility(findViewById(android.R.id.content).getSystemUiVisibility() | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR); //as we use an icon from Android-Iconics via xml we add the IconicsLayoutInflater //https://github.com/mikepenz/Android-Iconics LayoutInflaterCompat.setFactory(getLayoutInflater(), new IconicsLayoutInflater(getDelegate())); super.onCreate(savedInstanceState); setContentView(R.layout.activity_sample);  // Handle Toolbar Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); getSupportActionBar().setTitle(R.string.sample_collapsible);  //style our ui new MaterializeBuilder().withActivity(this).build();  //create our FastAdapter fastItemAdapter = new FastItemAdapter<>(); fastItemAdapter.withSelectable(true);  //get our recyclerView and do basic setup RecyclerView rv = (RecyclerView) findViewById(R.id.rv); rv.setLayoutManager(new LinearLayoutManager(this)); rv.setItemAnimator(new SlideDownAlphaAnimator()); rv.setAdapter(fastItemAdapter);  //fill with some sample data List<IItem> items = new ArrayList<>(); for (int i = 1; i <= 100; i++) { if (i % 10 == 0) { SimpleSubExpandableItem expandableItem = new SimpleSubExpandableItem(); expandableItem .withName(""Test "" + i) .withIdentifier(100 + 1);  //add subitems so we can showcase the collapsible functionality List<IItem> subItems = new LinkedList<>(); for (int ii = 1; ii <= 5; ii++) { SimpleSubItem sampleItem = new SimpleSubItem(); sampleItem .withName(""-- Test "" + ii) .withIdentifier(1000 + ii); subItems.add(sampleItem); } expandableItem.withSubItems(subItems);  items.add(expandableItem); } else { items.add(new SimpleSubItem().withName(""Test "" + i).withIdentifier(100 + i)); } } fastItemAdapter.add(items);  //restore selections (this has to be done after the items were added fastItemAdapter.withSavedInstanceState(savedInstanceState);  //set the back arrow in the toolbar getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeButtonEnabled(false); } "	0	1	1	1	0	0
"@Override public void filter(ContainerRequestContext requestContext) throws IOException { MultivaluedMap<String, String> headers = requestContext.getHeaders(); if (!headers.containsKey(USERNAME) || !containsRole(headers)) { requestContext.abortWith(Response.status(Status.UNAUTHORIZED).build()); logger.severe(""Invalid request:"" + headers); return; } String path = requestContext.getUriInfo().getPath(); String username = headers.getFirst(USERNAME); Set<String> roles = null; logger.info(""Authenticated request for path:"" + path + "" from user:"" + username + "" method:"" + requestContext.getRequest().getMethod().toLowerCase()); if (path.startsWith(""perf"")) { roles = new HashSet<>(); roles.add(ACLConstants.READER_ROLE); } else if (path.startsWith(TENANTS) && requestContext.getRequest().getMethod().toLowerCase().equals(""post"")) { // do nothing } else if (path.equals(TENANTS) && requestContext.getRequest().getMethod().toLowerCase().equals(""get"")) { roles = new HashSet<>(); for (Entry<String, List<String>> entry : headers.entrySet()) { if (entry.getKey().startsWith(ROLE_PREFIX)) { roles.add(ACLConstants.READER_ROLE); } } } else { String tenantId = path.split(""/"")[2]; for (Entry<String, List<String>> entry : headers.entrySet()) { if (entry.getKey().startsWith(ROLE_PREFIX)) { String[] splits = entry.getKey().split(ROLE_TENANT_SEPARATOR); if (splits.length == 2 && tenantId.equalsIgnoreCase(splits[1])) { roles = new HashSet<>(entry.getValue()); } } } } if (headers.containsKey(USER_GROUP)) { Set<String> groups = new HashSet<>(headers.get(USER_GROUP)); if (groups.contains(SUPERADMIN_GROUP)) { if(roles==null) { roles = new HashSet<>(); } roles.add(ACLConstants.SUPER_ADMIN_ROLE); } } if (roles == null || roles.isEmpty()) { requestContext.abortWith(Response.status(Status.UNAUTHORIZED).build()); logger.severe(""Request not authorized, roles are empty. Headers:"" + headers); return; } requestContext.setSecurityContext(new BapiSecurityContext(username, roles)); } "	1	0	1	1	0	0
"@Override public int complete(final String buffer, final int cursor, final List candidates) { int p = buffer.lastIndexOf(' '); final String toComplete; if (p > -1 && ++p < buffer.length()) { toComplete = buffer.substring(p); } else { toComplete = buffer; p = 0; } //            System.out.println(""\nbuffer: '"" + toComplete + ""'; cursor: "" + cursor); final Set<String> set = completitions.tailSet(toComplete); if (set != null && set.size() > 0) { for (final String next : completitions.tailSet(toComplete)) { if (next.startsWith(toComplete)) { candidates.add(next); } } } return p + 1; } "	1	0	1	0	0	0
public Node updateResource(Node node, RegalObject object) { new Index().remove(node); overrideNodeMembers(node, object); Globals.fedora.updateNode(node); updateIndex(new Read().readNode(node.getPid())); return node; } 	1	1	1	0	1	0
"private String[] getSvnUriInfo(String str) { String[] res = new String[]{""Unknown"", ""Unknown""}; String path = str; int index = path.indexOf(""trunk""); if (index > -1) { res[0] = path.substring(0, index - 1); res[1] = ""trunk""; } else { index = path.indexOf(""branches""); if (index > -1) { res[0] = path.substring(0, index - 1); int branchIndex = index + ""branches"".length() + 1; index = path.indexOf(""/"", branchIndex); if (index > -1) { res[1] = path.substring(branchIndex, index); } else { res[1] = path.substring(branchIndex); } } } return res; } "	1	1	1	1	0	0
public static byte[] encode(Object input) { Value val = new Value(input); if (val.isList()) { List<Object> inputArray = val.asList(); if (inputArray.isEmpty()) { return encodeLength(inputArray.size(), OFFSET_SHORT_LIST); } byte[] output = ByteUtil.EMPTY_BYTE_ARRAY; for (Object object : inputArray) { output = concatenate(output, encode(object)); } byte[] prefix = encodeLength(output.length, OFFSET_SHORT_LIST); return concatenate(prefix, output); } else { byte[] inputAsBytes = toBytes(input); if (inputAsBytes.length == 1 && (inputAsBytes[0] & 0xff) <= 0x80) { return inputAsBytes; } else { byte[] firstByte = encodeLength(inputAsBytes.length, OFFSET_SHORT_ITEM); return concatenate(firstByte, inputAsBytes); } } } 	1	0	1	1	1	0
"private Issue createTestIssue01(URL url) throws ParseException { Issue result = new Issue(url, TrackerType.JIRA);  result.setTrackerId(""1111111""); result.setSummary(""Test Issue""); result.setCreationTime(new SimpleDateFormat(JiraFields.DATE_STRING_FORMAT) .parse(""2013-01-17T00:12:31.000-0500"")); result.setAssignee(new User(""jboss-set@redhat.com"", ""jboss-set"")); result.setDescription(""Test jira""); result.setStatus(IssueStatus.NEW); result.setPriority(IssuePriority.MAJOR); result.setComponents(Collections.singletonList(""CLI"")); result.setProduct(""EAP""); result.setType(org.jboss.set.aphrodite.domain.IssueType.BUG);  List<Release> releases = new ArrayList<>(); releases.add(new Release(""6.4.5"")); result.setReleases(releases);  result.setDependsOn(Collections.emptyList()); result.setBlocks(Collections.emptyList()); result.setEstimation(new IssueEstimation(8.0, 8.0));  Stage issueStage = new Stage(); issueStage.setStatus(Flag.DEV, FlagStatus.ACCEPTED); issueStage.setStatus(Flag.QE, FlagStatus.ACCEPTED); issueStage.setStatus(Flag.PM, FlagStatus.ACCEPTED);  result.setStage(issueStage);  return result; } "	1	1	1	1	0	0
"public String getDataDir(String dbName) { return dataDirs[dbName.hashCode() % dataDirs.length] + ""/"" + dbName; } "	1	0	1	0	0	0
"public synchronized void initialize() throws InitializationException { if (initialized) return; metaData = new MetaData(); List<Exception> exceptions = new LinkedList<Exception>(); for (MetaDataLoader loader : metaDataLoaders) { try { loader.populateMetaData(metaData); } catch (MetaDataException e) { exceptions.add(e); } } if (!exceptions.isEmpty()) { StringBuilder sb = new StringBuilder(); sb.append(""One or more error occured while initializing the dowload job(s):""); for (Exception e : exceptions) { sb.append(""\n"").append(e.getMessage()); } throw new InitializationException(sb.toString()); } initialized = true; } "	1	1	1	0	1	0
"@Test public void testLargePrecision() { DateTimeDt dt = new DateTimeDt(""2014-03-06T22:09:58.9121174+04:30"");  myDateInstantParser.setTimeZone(TimeZone.getTimeZone(""Z"")); assertEquals(""2014-03-06 17:39:58.912"", myDateInstantParser.format(dt.getValue())); } "	0	0	1	1	1	0
private boolean isNextCharEscapeableNameChar() throws BadLocationException { return offset + 1 < endOffset && ParserUtils.isEscapeableNameChar(document.getChar(offset + 1)); } 	1	0	1	1	1	0
"@Test public void acquireRejectsOutdatedDiseaseOccurrence() { // Arrange DiseaseOccurrence occurrence = createDefaultDiseaseOccurrence(); occurrence.setOccurrenceDate(DateTime.now().minusYears(1).minusDays(1));  // Act catchException(acquirer).acquire(occurrence);  // Assert assertThat(caughtException()).hasMessage(""Occurrence date for occurrence is older than the max allowable age.""); verify(diseaseService, never()).saveDiseaseOccurrence(any(DiseaseOccurrence.class)); } "	0	0	1	1	1	0
"@Override public int getItemPosition(Object object) { if (this.allArtsInfo == null) { return POSITION_NONE; } if (object instanceof FragArtUPD) { if (((Fragment) object).isAdded()) { if (((FragmentArticle) object).getPosition() >= this.allArtsInfo.size()) { //Log.e(LOG_TAG + category, ""(FragmentArticle) object).getPosition()>=this.allArtsInfo.size()""); return POSITION_NONE; } else { try { FragmentArticle artFrag = (FragmentArticle) object; ((FragArtUPD) object).update(this.allArtsInfo.get(artFrag.getPosition())); } catch (NullPointerException e) { Log.e(LOG, ""CATCHED NULLPOINTEREXCEPTION AT ARTICLE FRAG APDATION ON PAGER NOTIFYDATASETCHANGED!!!""); e.printStackTrace(); return POSITION_NONE; } } } else { //Log.e(LOG_TAG, ""Fragment not added""); } } //don't return POSITION_NONE, avoid fragment recreation. return super.getItemPosition(object); } "	0	0	1	1	1	0
"public boolean present(Presentable presentable) { // make it possible to end the old presentation (if any) PresenterBundle oldPresentationControl = null; if (presentationControl != null) { oldPresentationControl = presentationControl; }  presentationControl = new PresenterBundle();  Presenter presenter1 = createPresenter( ScreenHelper.getScreen(screens, settings.get(SettingKey.SCREEN_1_DISPLAY, Integer.class)), presentable, settings.get(SettingKey.SCREEN_1_CONTENTS, ScreenContentsEnum.class)); if (presenter1 != null) { presentationControl.addPresenter(presenter1); }  Presenter presenter2 = createPresenter( ScreenHelper.getScreen(screens, settings.get(SettingKey.SCREEN_2_DISPLAY, Integer.class)), presentable, settings.get(SettingKey.SCREEN_2_CONTENTS, ScreenContentsEnum.class)); if (presenter2 != null) { presentationControl.addPresenter(presenter2); }  if (presentationControl.size() == 0) { ErrorDialog .openDialog( null, ""Could not start presentation!\n\nPlease specify at least one existing presentation display:\nCheck your system configuration\nand/or adjust this program's configuration\n(see tab \""Global Settings\"")!""); return false; } else { currentlyPresentedSong = presentable.getSong();  if (currentlyPresentedSong != null) { startCountDown(settings.get(SettingKey.SECONDS_UNTIL_COUNTED, Integer.class), currentlyPresentedSong); } else { stopCountDown(); }  // start presentation presentationControl.showPresenter();  // now stop old presentation (if any) if (oldPresentationControl != null) { oldPresentationControl.hidePresenter(); }  return true; } } "	1	0	1	0	1	0
private void updateSequenceIfRequired(Session session, Value value) { if (sequence != null) { long current = sequence.getCurrentValue(); long inc = sequence.getIncrement(); long now = value.getLong(); boolean update = false; if (inc > 0 && now > current) { update = true; } else if (inc < 0 && now < current) { update = true; } if (update) { sequence.modify(now + inc, null, null, null); session.setLastIdentity(ValueLong.get(now)); sequence.flush(session, 0); } } } 	1	1	1	0	1	0
public AlarmInputMessage parseRequest(final SentiloRequest request) throws PlatformException { final AlarmInputMessage inputMessage = (AlarmInputMessage) readInternal(AlarmInputMessage.class, request);  if (inputMessage != null) { inputMessage.setSender(request.getEntitySource()); if (StringUtils.hasText(inputMessage.getAlertId())) { inputMessage.setAlertId(request.getResourcePart(0)); } }  return inputMessage; } 	1	1	1	0	1	0
"@RequestMapping(""/admin/users/add/action"") public String addUserAction(@RequestParam String name, @RequestParam String password, @RequestParam String dni, @RequestParam String firstName, @RequestParam String lastName1, @RequestParam String lastName2, @RequestParam String email, @RequestParam String telephone) {  User user = new User(name, password, dni, firstName, lastName1, lastName1, email, telephone, ""ROLE_USER""); userRepository.save(user);  return ""redirect:/admin/users""; } "	0	0	1	1	1	0
@Override public DateRangeMapper build(String name) { return new DateRangeMapper(name, indexed, sorted, start, stop, pattern); } 	1	0	1	0	1	0
@Override public void waitOnObjectUntilNs(Object object, long untilNs) throws InterruptedException { long now = nanoTime(); if (now < untilNs) { //noinspection TIMED_WAIT object.wait(1); } else { long ms = TimeUnit.NANOSECONDS.toMillis(untilNs - now); if (ms > 0) { //noinspection TIMED_WAIT object.wait(ms); } else { //noinspection TIMED_WAIT object.wait(1); } } } 	1	1	1	1	0	0
"@Override @Transactional public void deleteFileUpload(FileUpload fileUpload, Form form) throws AppException{  //first remove the actual file Path path = Paths.get(fileUpload.getPath()+fileUpload.getFile_name()); try { Files.delete(path); } catch (NoSuchFileException x) { x.printStackTrace(); throw new AppException(Response.Status.NOT_FOUND.getStatusCode(), 404, ""NoSuchFileException thrown, Operation unsuccesful."", ""Please ensure the file you are attempting to"" + "" delete exists at ""+path+""."", AppConstants.DASH_POST_URL);   } catch (DirectoryNotEmptyException x) { x.printStackTrace(); throw new AppException(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), 404, ""DirectoryNotEmptyException thrown, operation unsuccesful."", ""This method should not attempt to delete,"" + "" This should be considered a very serious error. Occured at ""+path+""."", AppConstants.DASH_POST_URL); } catch (IOException x) { x.printStackTrace(); throw new AppException(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), 500, ""IOException thrown and the designated file was not deleted."", "" Permission problems occured at ""+path+""."", AppConstants.DASH_POST_URL); }  //second delete the file_upload entry in the DB fileUploadDao.deleteFileUploadById(fileUpload); aclController.deleteACL(fileUpload);  } "	1	0	1	0	1	0
"@RequestMapping(value = { ""/showBioAssay.html"", ""/"" }) public ModelAndView show( HttpServletRequest request, HttpServletResponse response ) {  log.debug( request.getParameter( ""id"" ) );  Long id = null;  try { id = Long.parseLong( request.getParameter( ""id"" ) ); } catch ( NumberFormatException e ) { return new ModelAndView( WebConstants.HOME_PAGE ).addObject( ""message"", identifierNotFound ); }  BioAssay bioAssay = bioAssayService.load( id ); if ( bioAssay == null ) { throw new EntityNotFoundException( id + "" not found"" ); }  bioAssayService.thaw( bioAssay );  request.setAttribute( ""id"", id ); return new ModelAndView( ""bioAssay.detail"" ).addObject( ""bioAssay"", new BioAssayValueObject( bioAssay ) ); } "	1	0	1	0	1	0
"private void addParameter(String name, String value, boolean dynamic) { String sName; if (!name.equals(flattenName(name))) { Set<String> set = new HashSet<String>(); set.add(name); mapNames(set); sName = sbmlMap.get(name); } else sName = name; for (int i = 0; i < parameterIndendation; i++) parameters.append(""\t""); parameters.append(""<parameter id=\"""").append(sName).append(""\""""); if (value != null){ parameters.append("" value=\"""").append(value).append(""\""""); } if (dynamic) parameters.append("" constant=\""false\""""); parameters.append(""/>"").append(term); } "	1	1	1	1	0	0
"@Override public UserImpl getByName(String uname) throws UserRetrievalException {  UserImpl user = null;  Query query = entityManager.createQuery( ""from UserImpl where user_name = :uname"", UserImpl.class ); query.setParameter(""uname"", uname); List<UserImpl> result = query.getResultList();  if (result.size() > 1){ throw new UserRetrievalException(""Data error. Duplicate user name in database.""); }  if (result.size() < 0){ user = result.get(0); }  return user; } "	1	0	1	1	1	0
public static void main(String[] args) { int[] arr = new int[] {1, 4, 4}; MinimumSize_209 min209 = new MinimumSize_209(); int a = min209.minSubArrayLen(4, arr); System.out.println(a); } 	1	1	1	1	0	0
private Node getNode(int x, int y) { if (x < 0 || x >= map.length || y < 0 || y > map[x].length) return null; if (nodes[x][y] == null) nodes[x][y] = new Node(new Point(x, y)); return nodes[x][y]; } 	0	0	1	1	1	0
"@POST @Path(""/createDoctor"") public String createDoctor(String jsonData) throws ClassNotFoundException, SQLException { try { DoctorUserEntity entity = JsonToEntityConverter.convertJsonStringToEntity(jsonData, DoctorUserEntity.getDoctorEntityType()); DoctorUserEntity user = DoctorUserDAL.getInstance().createUser(entity); return new UserAPIResponse().successResponsewithType(entity); } catch (ClassNotFoundException | SQLException | DALException e) { return APIResponse.unsuccessResponse(e.getMessage());  } } "	0	1	1	1	1	0
private static Set<String> buildGroups(Collection<String> groupCollection) { if (groupCollection == null || groupCollection.isEmpty()) return null; Set<String> groups = new HashSet<>(); groupCollection.forEach((g) -> groups.add(g.trim())); return groups; } 	1	1	1	1	0	0
"private static Record createRecord(final Name name, final InetRecord address) throws TextParseException { Record record = null;  if (address.isAlias()) { record = new CNAMERecord(name, DClass.IN, address.getTTL(), new Name(address.getAlias() +""."")); } else if (address.isInet4()) { // address instanceof Inet4Address record = new ARecord(name, DClass.IN, address.getTTL(), address.getAddress()); } else if (address.isInet6()) { record = new AAAARecord(name, DClass.IN, address.getTTL(), address.getAddress()); }  return record; } "	0	1	1	0	1	0
"private void add(CommandSender sender, Player target, String element) { element = getElement(element); Element e = Element.getType(element); BendingPlayer bPlayer = GeneralMethods.getBendingPlayer(target); bPlayer.setElement(e); ChatColor color = GeneralMethods.getElementColor(e); if (element.charAt(0) == 'w' || element.charAt(0) == 'f' || element.charAt(0) == 'c') { target.sendMessage(color + ""You are now a "" + Character.toString(element.charAt(0)).toUpperCase() + element.substring(1) + ""bender.""); } else if (element.charAt(0) == 'e' || element.charAt(0) == 'a') { target.sendMessage(color + ""You are now an "" + Character.toString(element.charAt(0)).toUpperCase() + element.substring(1) + ""bender.""); } if (!(sender instanceof Player) || !((Player) sender).equals(target)) { if (element.charAt(0) == 'w' || element.charAt(0) == 'f' || element.charAt(0) == 'c') { sender.sendMessage(ChatColor.DARK_AQUA + target.getName() + color + "" is now a "" + Character.toString(element.charAt(0)).toUpperCase() + element.substring(1) + ""bender.""); } else if (element.charAt(0) == 'e' || element.charAt(0) == 'a') { sender.sendMessage(ChatColor.DARK_AQUA + target.getName() + color + "" is now an "" + Character.toString(element.charAt(0)).toUpperCase() + element.substring(1) + ""bender.""); } } GeneralMethods.removeUnusableAbilities(sender.getName()); GeneralMethods.saveElements(bPlayer); Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(sender, target, e, Result.CHOOSE)); } "	1	0	1	1	1	0
"@Override public void execute(CommandSender sender, List<String> args) { if (!correctLength(sender, args.size(), 1, 2)) { return; } else if (args.size() == 1) { if (!hasPermission(sender) || !isPlayer(sender)) { return; }  BendingPlayer bPlayer = GeneralMethods.getBendingPlayer(sender.getName()); if (bPlayer == null) { GeneralMethods.createBendingPlayer(((Player) sender).getUniqueId(), sender.getName()); bPlayer = GeneralMethods.getBendingPlayer(sender.getName()); } if (bPlayer.isPermaRemoved()) { sender.sendMessage(ChatColor.RED + ""Your bending was permanently removed.""); return; }  if (!bPlayer.getElements().isEmpty() && !sender.hasPermission(""bending.command.rechoose"")) { sender.sendMessage(ChatColor.RED + ""You don't have permission to do that.""); return; } String element = args.get(0); if (Arrays.asList(Commands.elementaliases).contains(element)) { if (!hasPermission(sender, element)) { return; } add(sender, (Player) sender, element); return; } else { sender.sendMessage(ChatColor.RED + ""That is not a valid element.""); return; } } else if (args.size() == 2) { if (!sender.hasPermission(""bending.admin.choose"")) { sender.sendMessage(ChatColor.RED + ""You don't have permission to do that.""); return; } Player target = ProjectKorra.plugin.getServer().getPlayer(args.get(1)); if (!target.isOnline()) { sender.sendMessage(ChatColor.RED + ""That player is not online.""); return; } String element = args.get(0); if (Arrays.asList(Commands.elementaliases).contains(element)) { add(sender, target, element); return; } else { sender.sendMessage(ChatColor.RED + ""That is not a valid element.""); } } } "	1	1	1	0	1	0
"private String getTagsFromArticle(Article article) { String tagsString = """"; if (!(article.getName() == null)| !(article.getName().equals(""""))) { String[] tempTags = article.getName().split(""[ ]+""); for (String currentTag : tempTags) { tagsString += currentTag + "", ""; } tagsString = tagsString.substring(0,tagsString.length()-2); } else { throw new IllegalArgumentException(""Name tag is empty""); } return tagsString; } "	0	1	1	1	1	0
"private void installModule(Module module) { for (Binding binding : module.getBindingSet()) { if (binding == null) { throw new IllegalStateException(""A module can't have a null binding.""); }  Class key = binding.getKey(); synchronized (key) { Object bindingName = binding.getName(); if (!hasTestModules || getScopedProvider(key, bindingName) == null) { Provider provider = toProvider(binding); installProvider(key, bindingName, provider); } } } } "	1	0	1	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_tree_list);  lvTree = (ListView) findViewById(R.id.listview_tree); mDBHelper = new DatabaseHelper(this); // Check exists database File database = getApplicationContext().getDatabasePath(DatabaseHelper.DBNAME); if (true == database.exists()) { mDBHelper.getReadableDatabase(); // Get tree list from database mTreeList = mDBHelper.getListFavorites(); //Init adapter adapter = new ListTreeAdapter(this, mTreeList); // Set adapter for listview lvTree.setAdapter(adapter); }  // What to do when an item of the listView is clicked lvTree.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { String selected_tv = lvTree.getItemAtPosition(position).toString();  // Get the tree ID out of the listview TextView textView = (TextView) view.findViewById(R.id.tree_id); String id_string = textView.getText().toString(); int id_test = Integer.parseInt(id_string);  Intent i = new Intent(TreeList.this, TreeInfo.class); // Pass id to the next activity i.putExtra(""ID"", id_test); startActivity(i); } }); } "	1	0	1	0	1	0
"private void generateViewCreator(SourcePrinter sourceWriter, View view) { ViewFactoryCreator factoryCreator = getViewFactoryCreator(view); try { sourceWriter.println(""callback.onViewCreated(new ""+ factoryCreator.create()+""(id));""); } finally { factoryCreator.prepare(null, true, null); } } "	1	0	1	1	1	0
@Override public void redo(){ wire1.addWireToScene(scene); wire1.undoRemoveWire(); wire1.connect(); if (wire2 != null){ wire2.addWireToScene(scene); wire2.undoRemoveWire(); wire2.disconnect(); } this.scene.updateTreeView(wire1.getTreePinStart(), wire1.getTreePinEnd()); } 	1	1	1	1	0	0
public Class<?> getThrowableClass(java.lang.reflect.Method javaMethod, int errorCode) { for (Class<?> clazz : javaMethod.getExceptionTypes()) { ThrowableAnnotationInfo tai = getThrowableAnnotationInfo(clazz);  if (tai.getStatus().getCode() == errorCode) { return clazz; } }  return null; } 	0	0	1	1	1	0
private boolean jj_3R_144() { if (jj_scan_token(LBRACKET)) return true; Token xsp; xsp = jj_scanpos; if (jj_3R_254()) jj_scanpos = xsp; if (jj_scan_token(RBRACKET)) return true; return false; } 	0	0	1	1	1	0
"@Override public void onCheckout(Run<?, ?> build, SCM scm, FilePath workspace, TaskListener listener, File changelogFile, SCMRevisionState pollingBaseline) throws Exception {  String jobName = build.getParent().getDisplayName(); HashMap<String,String> tags = new HashMap<String,String>(); DatadogJobProperty prop = DatadogUtilities.retrieveProperty(build); // Process only if job is NOT in blacklist if ( DatadogUtilities.isJobTracked(jobName) && prop != null && prop.isEmitOnCheckout() ) { logger.fine(""Checkout! in onCheckout()"");  // Grab environment variables EnvVars envVars = null; try { envVars = build.getEnvironment(listener); tags = DatadogUtilities.parseTagList(build, listener); } catch (IOException e) { logger.severe(e.getMessage()); } catch (InterruptedException e) { logger.severe(e.getMessage()); }  // Gather pre-build metadata JSONObject builddata = new JSONObject(); builddata.put(""hostname"", DatadogUtilities.getHostname(envVars)); // string builddata.put(""job"", jobName); // string builddata.put(""number"", build.number); // int builddata.put(""result"", null); // null builddata.put(""duration"", null); // null builddata.put(""buildurl"", envVars.get(""BUILD_URL"")); // string long starttime = build.getStartTimeInMillis() / DatadogBuildListener.THOUSAND_LONG; // ms to s builddata.put(""timestamp"", starttime); // string  DatadogEvent evt = new CheckoutCompletedEventImpl(builddata, tags);  DatadogHttpRequests.sendEvent(evt); } } "	0	0	1	1	1	0
public T convert(S obj) throws ConversionException { List<Object> list = new LinkedList<Object>(); int len = Array.getLength(obj); for (int i = 0; i < len; i++) { list.add(Array.get(obj, i)); } return UtilGenerics.<T>cast(list); } 	1	0	1	0	1	0
"private static void openServerConnection(String protocol, String hostname, int portNum, String username, String password) { final RedHxTcpProtocolTypeEnum httpProtocol = (protocol == ""https"") ? RedHxTcpProtocolTypeEnum.HTTPS : RedHxTcpProtocolTypeEnum.HTTP;  /* * create a communication context that will be used to talk with a single Redfish server. This * does not allocate and nextwork sockets. */ final RedHxServerConnectionContext ctx;  if (username == null) { ctx = new RedHxServerConnectionContext(RedHxRedfishProtocolVersionEnum.VERSION_1, httpProtocol, hostname, portNum); } else { ctx = new RedHxServerConnectionContext(RedHxRedfishProtocolVersionEnum.VERSION_1, httpProtocol, hostname, portNum, username, password); }  try { /** * open a HTTP connection to the Redfish server provided by the DMTF mockup. The mockup server * is started with the command ""node server.js"" * */ ctx.openConnection();  Set<RedHxUriPath> chassisPathSet;  try { /* * read all the chasiss information from the Redfish server. The following three steps are * the heart of this program. The form the RedHelix API and all that is necessary to convert * from the Redfish JSON messages describing all the chassis and computer systems on a * Redfish enabled server to Java classes. All RedHelix raaders classes have a single static * method to read data. This allows them be used in a multi-threaded application with out * locking or contention between Java threads. This allows RedHelix to scale to large * numbers of server. * * First Step. Read the paths to each chassis in the Redfish server. There may be multiple * chasisis Redfish is aware of. */ chassisPathSet = RedHxChassisPathCollectionReader.readChassisCollection(ctx);  /** * Second Step. For each path describing a chassis read all the JSON messages. */ RedHxChassisCollection chassisCollection = RedHxChassisCollectionReader.readPaths(ctx, chassisPathSet);  if (!chassisCollection.isEmpty()) { /* * Thrid Step. Read all Redfish computer systems found within the chassis colllection. */ RedHxComputerSystemCollection computerSystemCollection = RedHxComputerSystemCollectionReader.readPaths(ctx, chassisCollection);  /** * Now all chassis and Computer System data has been read from the Redfish server so print * it out on stdio. todo print on in section order. A bug is in printing in alpha order * and all blades have the same prompt */ RedHxPrintCollectionsHelper.printCollections( RedHxColumnOutputFormatter.PrintOrder.SECTION, chassisCollection, computerSystemCollection); } } catch (RedHxChassisParseException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } catch (RedHxHttpResponseException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } catch (RedHxParseException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } } catch (URISyntaxException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } catch (RedHxHttpResponseException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } } "	0	1	1	0	0	0
@JsonIgnore @Transient public OrderDocument getOrderDocument() { if(id == null || customer == null || receiver == null || deliveryDate == null){ return null; } return new OrderDocument(id.toString(), customer.getFathername(), receiver.getFathername(), deliveryDate.toDate(), customer.getCompany()); } 	1	0	1	0	1	0
public void outputHelpMessage(CommandType command) { // todo Help command should not be handled here if ((command == null) || (command == CommandType.HELP)) { printTableWithBorder(1, HelpMessage.EXIT_INDEX, HelpMessage.TABLE); } else {  switch (command) { case ADD : printTableWithBorder(HelpMessage.ADD_START_INDEX, HelpMessage.ADD_END_INDEX, HelpMessage.TABLE); break; case ALIAS : printTableWithBorder(HelpMessage.ALIAS_INDEX, HelpMessage.ALIAS_INDEX, HelpMessage.TABLE); break; case ALIAS_ADD : printTableWithBorder(HelpMessage.ALIAS_ADD_INDEX, HelpMessage.ALIAS_ADD_INDEX, HelpMessage.TABLE); break; case ALIAS_DELETE : printTableWithBorder(HelpMessage.ALIAS_DELETE_INDEX, HelpMessage.ALIAS_DELETE_INDEX, HelpMessage.TABLE); break; case DELETE : printTableWithBorder(HelpMessage.DELETE_INDEX, HelpMessage.DELETE_INDEX, HelpMessage.TABLE); break; case DONE : printTableWithBorder(HelpMessage.DONE_INDEX, HelpMessage.DONE_INDEX, HelpMessage.TABLE); break; case EXIT : printTableWithBorder(HelpMessage.EXIT_INDEX, HelpMessage.EXIT_INDEX, HelpMessage.TABLE); break; case HISTORY : printTableWithBorder(HelpMessage.HISTORY_INDEX, HelpMessage.HISTORY_INDEX, HelpMessage.TABLE); break; case HISTORY_CLEAR : printTableWithBorder(HelpMessage.HISTORY_CLEAR_INDEX, HelpMessage.HISTORY_CLEAR_INDEX, HelpMessage.TABLE); break; case HISTORY_UNDO : printTableWithBorder(HelpMessage.HISTORY_UNDO_INDEX, HelpMessage.HISTORY_UNDO_INDEX, HelpMessage.TABLE); break; case MODIFY : printTableWithBorder(HelpMessage.MODIFY_INDEX, HelpMessage.MODIFY_INDEX, HelpMessage.TABLE); break; case SEARCH : printTableWithBorder(HelpMessage.SEARCH_INDEX, HelpMessage.SEARCH_INDEX, HelpMessage.TABLE); break; case VIEW : printTableWithBorder(HelpMessage.VIEW_INDEX, HelpMessage.VIEW_INDEX, HelpMessage.TABLE); break;  default : assert (false);  } }  } 	1	0	1	0	1	0
"private void sendToBroker(MqttMessage message) { try { String parsedBytes = GzipUtil.decompress(message.getPayload());  Map msg = new Gson().fromJson(parsedBytes, Map.class);  String privateKey = storage.getPrivateKey();  Envelope envelope = new Gson().fromJson(EncryptionUtil.decryptJson(msg, privateKey), Envelope.class); InfluuntLogger.log(NivelLog.SUPERDETALHADO, TipoLog.COMUNICACAO,""Roteando mensagem:"" + envelope.getTipoMensagem()); router.route(envelope, getSender()); } catch (Exception e) { getSelf().tell(e, getSelf()); }  } "	0	0	1	1	1	0
"@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException, AbortException { String expandedHubAddress = build.getEnvironment(listener).expand(Util.fixNull(hubAddress)); String expandedProjectName = build.getEnvironment(listener).expand(Util.fixNull(projectName));  if (expandedHubAddress.isEmpty()) { throw new AbortException(""Hub address not provided""); } if (expandedProjectName.isEmpty()) { throw new AbortException(""Project name not provided""); }  URI baseHubUri = URI.create(String.format(""%s://%s"", getProtocol(), expandedHubAddress));  float hubVersion = getHubVersion(baseHubUri);  authenticate(build, baseHubUri);  analysisServiceFactory.setVersion(hubVersion); analysisService = analysisServiceFactory.getAnalysisService(httpService, xmlSerializationService);  List<String> logFile = IOUtils.readLines(build.getLogReader()); String analysisUrl = analysisService.getAnalysisUrlFromLogFile(logFile);  if (analysisUrl == null) { analysisUrl = analysisService.getLatestAnalysisUrlForAProject(baseHubUri, expandedProjectName); }  Analysis analysisActiveWarnings = analysisService.getAnalysisFromUrlWithActiveWarnings(analysisUrl);  URI metricsUri = metricsService.getMetricsUriFromAnAnalysisId(baseHubUri, analysisActiveWarnings.getAnalysisId()); Metrics metrics = metricsService.getMetricsFromUri(metricsUri);  URI proceduresUri = proceduresService.getProceduresUriFromAnAnalysisId(baseHubUri, analysisActiveWarnings.getAnalysisId()); Procedures procedures = proceduresService.getProceduresFromUri(proceduresUri);  Analysis analysisNewWarnings = analysisService.getAnalysisFromUrlWithNewWarnings(analysisUrl);  List<Pair<String, String>> conditionNamesAndResults = new ArrayList<Pair<String, String>>();  CodeSonarBuildActionDTO buildActionDTO = new CodeSonarBuildActionDTO(analysisActiveWarnings, analysisNewWarnings, metrics, procedures, baseHubUri);  build.addAction(new CodeSonarBuildAction(buildActionDTO, build));  for (Condition condition : conditions) { Result validationResult = condition.validate(build, launcher, listener);  Pair<String, String> pair = Pair.with(condition.getDescriptor().getDisplayName(), validationResult.toString()); conditionNamesAndResults.add(pair);  build.setResult(validationResult); listener.getLogger().println(String.format((""'%s' marked the build as %s""), condition.getDescriptor().getDisplayName(), validationResult.toString())); }  build.getAction(CodeSonarBuildAction.class).getBuildActionDTO() .setConditionNamesAndResults(conditionNamesAndResults);  authenticationService.signOut(baseHubUri);  return true; } "	0	1	1	1	0	0
"public void editButtonActionPerformed() { if(nodeAddr64Field.getText().equals("""") && nodeAddrField.getText().equals("""")) { // no address, just return. return; }  // to update the node's associated XBee Device, we have to // create a new one, as the library provides no way to update // the RemoteXBeeDevice object.  // Check that a node with this address does not exist // if the 64 bit address field is blank, use the ""Unknown"" address"". XBee64BitAddress guid; if(!(nodeAddr64Field.getText().equals(""""))) { byte GUID[] = jmri.util.StringUtil.bytesFromHexString(nodeAddr64Field.getText()); guid = new XBee64BitAddress(GUID); } else { guid = XBee64BitAddress.UNKNOWN_ADDRESS; } // if the 16 bit address field is blank, use the ""Unknown"" address"". XBee16BitAddress address; if(!(nodeAddrField.getText().equals(""""))){ byte addr[] = jmri.util.StringUtil.bytesFromHexString(nodeAddrField.getText()); address = new XBee16BitAddress(addr); } else { address = XBee16BitAddress.UNKNOWN_ADDRESS; } String Identifier = nodeIdentifierField.getText(); // create the RemoteXBeeDevice for the node. RemoteXBeeDevice remoteDevice = remoteDevice = new RemoteXBeeDevice(xtc.getXBee(), guid,address,Identifier); // get a XBeeNode corresponding to this node address if one exists XBeeNode existingNode = (XBeeNode) xtc.getNodeFromXBeeDevice(remoteDevice); if (existingNode != null) { javax.swing.JOptionPane.showMessageDialog(this,Bundle.getMessage(""Error1"",remoteDevice),Bundle.getMessage(""EditNodeErrorTitle""),JOptionPane.ERROR_MESSAGE); return; } // save the old remote device RemoteXBeeDevice oldDevice = ((XBeeNode)curNode).getXBee(); // and then add the new device to the network xtc.getXBee().getNetwork().addRemoteDevice(remoteDevice);  // remove the old one from the network xtc.getXBee().getNetwork().removeRemoteDevice(oldDevice);  //and update the current node. ((XBeeNode)curNode).setXBee(remoteDevice);  parent.nodeListChanged();  this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING)); } "	1	0	1	1	0	0
"@Test public void values() { model .permit(""field1"") .value(""field1"", 495) .value(""field2"", ""945725"");  assertEquals(1, model.values().size()); model.permit(""field2""); assertEquals(2, model.values().size());  List<Object> values = model.values().stream().collect(Collectors.toList()); assertEquals(495, values.get(0)); assertEquals(""945725"", values.get(1)); } "	1	0	1	1	1	0
private <T> void setPropertyValue(final String propertyName, final T value) { try { final Method method = this.getSetter(propertyName, value.getClass()); if (method != null) { // set the new value with the setter method.invoke(this, value); } else { // if no setter is present, try to set the field directly for (final Field field : this.getClass().getDeclaredFields()) { if (field.getName().equals(propertyName) && field.getType().equals(value.getClass())) { if (!field.isAccessible()) { field.setAccessible(true); }  field.set(this, value); } } } } catch (final SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) { log.log(Level.SEVERE, e.getMessage(), e); } } 	1	0	1	0	1	0
"public void choose(final List<MMXPollOption> chosenOptions, final MMX.OnFinishedListener<MMXMessage> listener) { //if(null == chosenOptions && chosenOptions.isEmpty()) { //  handleParameterError(""option is required"", listener); //  return; //}  if(!allowMultiChoices && chosenOptions.size() > 1) { handleParameterError(""Only one option is allowed"", listener); return; }  List<SurveyAnswer> answers = null; if(null != chosenOptions) { answers = new ArrayList<>(chosenOptions.size()); for (MMXPollOption option : chosenOptions) { answers.add(new SurveyAnswer.SurveyAnswerBuilder().questionId(questionId) .selectedOptionId(option.getOptionId()) .build()); } }  getPollService().submitSurveyAnswers(this.pollId, new SurveyAnswerRequest.SurveyAnswerRequestBuilder().answers(answers).build(), new Callback<Void>() { @Override public void onResponse(Response<Void> response) { if(response.isSuccess()) { // Update result MMXPollAnswer pollAnswer = createAnswer(chosenOptions); updateResults(pollAnswer);  // Publish message if(!hideResultsFromOthers) { MMXMessage message = new MMXMessage.Builder().channel(channel) .payload(pollAnswer) .build(); publishChannelMessage(message, new MMXChannel.OnFinishedListener<String>() { @Override public void onSuccess(String result) { if (null != listener) { listener.onSuccess(null); } }  @Override public void onFailure(MMXChannel.FailureCode code, Throwable throwable) { handleError(code, throwable, listener); } }); } else { if (null != listener) { listener.onSuccess(null); } }  // Reset my votes if(null != myVotes) { myVotes = new ArrayList<MMXPollOption>(); } myVotes.clear(); if(null != chosenOptions) { myVotes.addAll(chosenOptions); } } else { Log.e(TAG, ""Failed to choose option for poll due to "" + response.message()); handleError(MMXChannel.FailureCode.GENERIC_FAILURE, new Exception(response.message()), listener); } }  @Override public void onFailure(Throwable throwable) { Log.e(TAG, ""Failed to choose option for poll due to "" + throwable.getMessage()); handleError(MMXChannel.FailureCode.GENERIC_FAILURE, throwable, listener); } }).executeInBackground(); } "	1	0	1	1	0	0
"@AfterViews public void recoverImage() { // This activity may have been destroyed by the Camera activity ; if it's the case, // the imagePaths is not null, as we saved it. if (null == imagePaths) { // Only initialize if it has not been restored from bundle state. imagePaths = new ArrayList<>(); }  // Handle images sent to this app by the ""share"" feature Intent intent = getIntent(); String action = intent.getAction(); String type = intent.getType(); if (action.equals(Intent.ACTION_SEND) && type != null) { if (type.startsWith(""image/"")) { // Handle a single image being sent Uri imageUri = (Uri) intent.getParcelableExtra(Intent.EXTRA_STREAM); Log.d(""G2P"", ""Add new item with shared image URl `"" + imageUri.toString() + ""`.""); String imagePath = getPathFromImageURI(imageUri); Log.d(""G2P"", ""... which translates into path `"" + imagePath + ""`.""); imagePaths.add(imagePath); fillThumbnail(); } else { // The intent filter in the manifest should ensure that we never EVER throw this. throw new CriticalException(""You shared something that is not an image. Nooope.""); } //        } else if (Intent.ACTION_SEND_MULTIPLE.equals(action) && type != null) { //            if (type.startsWith(""image/"")) { //                handleSendMultipleImages(intent); // Handle multiple images being sent //            } } else { // /!\ we try not to do that anymore, it's too unreliable. // Directly try to grab a new image if and only if there are no files paths stored. // Otherwise, it means that `onActivityResult` will be called.. if (imagePaths.size() == 0) { try { // Check if there's a camera available // todo: propose the gallery picker? if (!app.hasCameraSupport()) { app.toast(getString(R.string.toast_no_camera_available)); finish(); return; } // Launch the camera to add a new picture requestNewPicture(); } catch (CriticalException ex) { Log.e(""G2P"", ""Failed to add a new picture.""); ex.printStackTrace(); app.toasty(getString(R.string.toast_new_item_file_error)); finish(); } } else { fillThumbnail(); } } } "	1	1	1	1	0	0
@Override public void clear() { infos.forEach((cell, info) -> info.ctrl.cancel(false)); infos.clear(); } 	0	0	1	1	1	0
@Override public boolean equals(final Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; BillingDetails other = (BillingDetails) obj; if (id == null || !id.equals(other.id)) return false; return true; } 	1	1	1	0	1	0
"private void determineTargetBatches() throws Exception { String dirToProcess = null; String dirToProcessInto = null;  if (tempDestDir != null) dirToProcessInto = tempDestDir; else if (destDir != null && isDestDav.equals(false)) dirToProcessInto = destDir; else throw new IllegalArgumentException(""Don't know where to put files!"");  Collection<Integer> bibids = new HashSet<Integer>();  if (tempBibSrcDir != null) dirToProcess = tempBibSrcDir; else if (bibSrcDir != null && isBibSrcDav.equals(false)) dirToProcess = bibSrcDir; if (dirToProcess != null) { System.out.println(dirToProcess); DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(dirToProcess)); for (Path file: stream) bibids.addAll(collectBibidsFromXmlFile(file)); } else { bibids.addAll(collectBibidsFromXmlFile(Paths.get(bibSrcFile))); }  // Sort list of bib record IDs and determine ranges for batches of size groupsize. System.out.println(bibids.size() + "" bibids in set.\n""); Integer[] bibs = bibids.toArray(new Integer[ bibids.size() ]); bibids.clear(); Arrays.sort( bibs ); int batchCount = (bibs.length / groupsize) + 1; for (int i3 = 1; i3 <= batchCount; i3++) { Integer minBibid; if (i3*groupsize <= bibs.length) minBibid = bibs[(i3)*groupsize]; else minBibid = bibs[bibs.length - 1]; System.out.println(i3+"": ""+minBibid); OutputStreamWriter  out = openFileForWrite(dirToProcessInto+""/""+ destFilenamePrefix+"".""+i3+outFileExt); outsById.put(minBibid, out);  }  } "	1	1	1	1	0	0
"private void setUserPickerObjectBasedOnCurrentUser() { if (!"""".equals(currentUser)) { userPickerObject = ComponentAccessor.getUserUtil().getUserByKey(currentUser); AvatarService avatarService = ComponentAccessor.getComponent(AvatarService.class); setAvatarURL(avatarService.getAvatarURL( ComponentAccessor.getJiraAuthenticationContext().getUser(), userPickerObject, Avatar.Size.SMALL).toString()); } else { userPickerObject = null; } } "	0	1	1	1	1	0
"public void filteredListItemClicked(JLabel pointSelected){ String tempString = pointSelected.getText(); String[] tempArray = tempString.split("",""); Point tempPoint = new Point(Integer.parseInt(tempArray[0]), Integer.parseInt(tempArray[1])); showHideLocationsBtn.setText(ViewStringLiterals.SHOW_LOCATIONS); showAllFilterPointBtn.setText(ViewStringLiterals.SHOW_LOCATIONS); mapMapDisplayPanel.displaySelectedFilterPoint(tempPoint);  for(int i= 0 ; i < this.filteredScrollPanel.getComponentCount(); i++){ ((JLabel)this.filteredScrollPanel.getComponent(i)).setBackground(null); }  pointSelected.setBackground(Color.LIGHT_GRAY); pointSelected.setOpaque(true); } "	0	0	1	1	1	0
"public static ArrayList<QueryResult> query(String artist, String title) { ArrayList<QueryResult> result = new ArrayList<QueryResult>(); String xml = getHttpResponse(buildQueryUrl(artist, title)); if (xml == null) { Log.e(TAG, ""Error: cannot get xml response from server""); return null; } Log.v(TAG, ""xml is "" + xml);  Document doc = null; try { DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder(); InputSource is = new InputSource(new StringReader(xml)); doc = builder.parse(is); NodeList nl = doc.getElementsByTagName(QueryResult.ITEM_LRC);  for (int i = 0; i < nl.getLength(); i++) { Element elem = (Element) nl.item(i); String id = elem.getAttribute(QueryResult.ATTRIBUTE_ID); String art = elem.getAttribute(QueryResult.ATTRIBUTE_ARTIST); String tit = elem.getAttribute(QueryResult.ATTRIBUTE_TITLE); result.add(new QueryResult(Integer.parseInt(id), art, tit)); Log.v(TAG, ""======== id = "" + id + "", art = "" + art + "", title = "" + tit); } } catch (ParserConfigurationException e) { Log.e(""Error: "", e.getMessage()); } catch (SAXException e) { Log.e(""Error: "", e.getMessage()); } catch (IOException e) { Log.e(""Error: "", e.getMessage()); } return result; } "	1	0	1	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_register);  // Initialize fields registerButton = ((Button) findViewById(R.id.registerButton)); cancelRegisterButton = ((Button) findViewById(R.id.cancelRegisterButton)); createUsernameEditText = ((EditText) findViewById(R.id.createUsernameEditText)); createPassEditText = ((EditText) findViewById(R.id.createPassEditText));  // Set button actions registerButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { if (!isEmpty(createUsernameEditText) && !isEmpty(createUsernameEditText)) { createUserAccount(createUsernameEditText.getText().toString(), createPassEditText.getText().toString()); } else { generateLoginAlert(R.string.emptyfield_error_title, R.string.emptyfield_error_message); } } });  cancelRegisterButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { finish(); } });  // Initialize Firebase Auth auth = FirebaseAuth.getInstance(); } 	0	0	1	1	1	0
"private Map<String, Object> toMap(ActionInfo actionInfo) { Map<String, Object> parameters = new HashMap<>(); parameters.put(""aid"", actionInfo.getActionId()); parameters.put(""cid"", actionInfo.getCmdletId()); parameters.put(""action_name"", actionInfo.getActionName()); parameters.put(""args"", actionInfo.getArgsJsonString()); parameters .put(""result"", StringEscapeUtils.escapeJava(actionInfo.getResult())); parameters.put(""log"", StringEscapeUtils.escapeJava(actionInfo.getLog())); parameters.put(""successful"", actionInfo.isSuccessful()); parameters.put(""create_time"", actionInfo.getCreateTime()); parameters.put(""finished"", actionInfo.isFinished()); parameters.put(""finish_time"", actionInfo.getFinishTime()); parameters.put(""progress"", (int) (actionInfo.getProgress())); return parameters; } "	0	1	1	0	1	0
public List<String> calcTokenFrequencyForAllDocs(List<List<String>> engineeredDocuments) { List<String> result = new ArrayList<>(); HashMap<String, Integer> tokenFrequencies = new HashMap<>(); for (List<String> doc : engineeredDocuments) { for(String token : doc) { if (tokenFrequencies.containsKey(token)) { tokenFrequencies.put(token, tokenFrequencies.get(token)+1); } else { tokenFrequencies.put(token, 1); } } } List<Pair<String, Integer>> tokensWithFrequencies = new ArrayList<>(); for (String token : tokenFrequencies.keySet()) { tokensWithFrequencies.add(new Pair<String, Integer>(token, tokenFrequencies.get(token))); } Collections.sort(tokensWithFrequencies, new Comparator<Pair<String, Integer>>() { @Override public int compare(Pair<String, Integer> o1, Pair<String, Integer> o2) { return o1.getSecond() - o2.getSecond(); } }); for (Pair<String, Integer> tokenWithFreq : tokensWithFrequencies) { result.add(tokenWithFreq.getFirst()); } return result; } 	1	1	1	1	0	0
private String convertDateToString (Date date){ SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(AMERICAN_DATE_FORMAT);  return DATE_FORMAT.format(startDate); } 	1	0	1	1	1	0
"private void setMathQuestions() { List<String> desc = new ArrayList<>(Arrays.asList( ""1 + 1 = ?"", ""2 * 3 = ?"", ""10 % 10 = ?"")); List<List<String>> options = asList( asList(""1"", ""2"", ""3"", ""4""), asList(""3"", ""4"", ""5"", ""6""), asList(""0"", ""1"", ""2"", ""3"") ); List<String> answers = new ArrayList<>(Arrays.asList( ""2"", ""6"", ""0"")); mathQuestions = new QuestionList(desc, options, answers); } "	1	1	1	1	0	0
@Override public int getSlots() { return slots.length; } 	1	0	1	1	1	0
protected int[][] invertPixels(int pixels[][]) { int[][] invertedPixels = new int[pixels.length][pixels[0].length];  for (int i = 0; i < pixels.length; i++) { for (int j = 0; j < pixels.length; j++) { if (pixels[i][j] == 0){ invertedPixels[i][j] = 1; } else { invertedPixels[i][j] = 0; } } }  return invertedPixels; } 	1	1	1	1	0	0
@Test public void testFindProcesses() { if (target != null) { int count = 5; int limit = 3; Set<UUID> uuids = createProcesses(count);  ProcessSearchCommand command = new ProcessSearchCommand(); command.setActorId(ACTOR_ID); command.setStartedFrom(System.currentTimeMillis() - 60000l); command.setStartedTill(System.currentTimeMillis() + 60000l); command.setState(Process.ACTIVE);  command.setPageNum(1); command.setPageSize(limit);  GenericPage<Process> page = target.findProcesses(command); Assert.assertEquals(count, page.getTotalCount()); Assert.assertEquals(limit, page.getItems().size());  for (Process p : page.getItems()) { Assert.assertTrue(uuids.contains(p.getProcessId())); }  command.setPageNum(2); page = target.findProcesses(command); Assert.assertEquals(count-limit, page.getItems().size()); Assert.assertEquals(count, page.getTotalCount());  command.setPageNum(1); command.setProcessId(UUID.randomUUID().toString()); page = target.findProcesses(command); Assert.assertEquals(0, page.getTotalCount());  command.setProcessId(null); command.setCustomId(CUSTOM_ID); page = target.findProcesses(command); Assert.assertEquals(0, page.getTotalCount());  target.startProcess(getFullContainer(UUID.randomUUID())); page = target.findProcesses(command); Assert.assertEquals(1, page.getTotalCount()); Assert.assertEquals(1, page.getItems().size()); } } 	0	1	1	0	1	0
@SubscribeEvent public void onUpdate(LivingEvent.LivingUpdateEvent event) { if (event.getEntityLiving() instanceof EntityPlayer && !(event.getEntityLiving() instanceof FakePlayer)) { EntityPlayer player = (EntityPlayer) event.getEntityLiving(); ItemStack[] main = player.inventory.mainInventory;  if (!player.worldObj.isRemote) { for (int i = 0; i < main.length; i++) { if (main[i] != null) { if (main[i].getItem() instanceof ItemSword || main[i].getItem() instanceof ItemBow || main[i].getItem() instanceof ItemArmor) { ItemStack stack = main[i]; NBTTagCompound nbt = NBTHelper.loadStackNBT(stack);  if (nbt != null) { Rarity rarity = Rarity.getRarity(nbt); Random rand = player.worldObj.rand;  if (rarity == Rarity.UNKNOWN) { rarity = Rarity.getRandomRarity(rand); rarity.setRarity(nbt); NBTHelper.saveStackNBT(stack, nbt); Levels.NETWORK.sendTo(new PacketRarity(NBTHelper.loadStackNBT(stack)), (EntityPlayerMP) player); if (rarity == Rarity.ANCIENT) player.worldObj.playSound(player, player.getPosition(), SoundEvents.ENTITY_ENDERDRAGON_DEATH, player.getSoundCategory(), 0.8F, 1.0F); } } } } } } } } 	1	0	1	0	1	0
@Transactional @Override public ChatroomMembers findByRoomIdAndMember(Long member_id, Long room_id) { return repository.findByRoomIdAndMember(member_id, room_id); } 	1	0	1	1	1	0
public void setIce4JLoggingEnabled(boolean enabled) { this.ice4jLoggingEnabled = true; } 	1	0	1	0	1	0
public void setArbitraryLoggingEnabled(boolean enabled) { this.arbitraryLoggingEnabled = true; } 	1	0	1	0	1	0
public long getLimit() { return this.limit; } 	1	0	1	0	1	0
private PsiPackage createPackageFromLibrary(@NotNull VirtualFile virtualFile, @NotNull Class<? extends ModuleExtension> extensionClass, @NotNull String qualifiedName) { ProjectFileIndex fileIndexFacade = ProjectFileIndex.SERVICE.getInstance(myProject); PsiManager psiManager = PsiManager.getInstance(myProject); if (fileIndexFacade.isInLibraryClasses(virtualFile)) { List<OrderEntry> orderEntriesForFile = fileIndexFacade.getOrderEntriesForFile(virtualFile); for (OrderEntry orderEntry : orderEntriesForFile) { Module ownerModule = orderEntry.getOwnerModule(); ModuleExtension extension = ModuleUtilCore.getExtension(ownerModule, extensionClass); if (extension != null) { for (PsiPackageSupportProvider p : PsiPackageSupportProvider.EP_NAME.getExtensions()) { if (p.isSupported(extension)) { return p.createPackage(psiManager, this, extensionClass, qualifiedName); } } } } } return null; } 	1	1	1	0	1	0
"public QueryBuilder getAclFilterForPermissions(List<String> permissions, boolean noPublic) { return getAclFilterForPermissions(permissions,""acl"",false); } "	0	0	1	1	1	0
@Override public CommandResult redo() { if(model.getStackOfListTypesRedo().isEmpty()) { return new CommandResult(String.format(RedoCommand.MESSAGE_FAIL)); } ReadOnlyTask taskToDelete = model.getDeletedStackOfTasksRedo().pop(); model.getDeletedStackOfTasks().push(taskToDelete); try { model.deleteTask((Task) taskToDelete); } catch(TaskNotFoundException e) { return new CommandResult(String.format(RedoCommand.MESSAGE_FAIL)); } return new CommandResult(String.format(RedoCommand.MESSAGE_SUCCESS)); } 	1	0	1	0	1	0
"public Collection<WebUIPlugin> getWebUIPlugins(String id) { logger.log(Level.INFO, ""getWebUIPlugins(slot id: {0})"", id); List<WebUIPlugin> plugins = new ArrayList<>();  for (WebUIPlugin plugin : webUI.pluginSet()) { if (!plugin.isEnabled()) { continue; } if (id == null || id.equals(plugin.getSlotId())) { plugins.add(plugin); } } return plugins; } "	0	0	1	1	0	0
"public CalendarDate getEndDate() { String ed = _element.getAttribute(""endDate"").getValue(); if (ed != """") return new CalendarDate(_element.getAttribute(""endDate"").getValue()); Task parent = this.getParentTask(); if (parent != null) return parent.getEndDate(); Project pr = this._tl.getProject(); if (pr.getEndDate() != null) return pr.getEndDate(); return this.getStartDate();  } "	1	1	1	0	1	0
"@Override public Map<String, String> getWaila() { Map<String, String> info = new HashMap<String, String>(); info.put(I18N.tr(""Power consumption""), Utils.plotPower("""", lampResistor.getI() * lampResistor.getU())); if (lampDescriptor != null) { info.put(I18N.tr(""Bulb""), lampDescriptor.name); } else { info.put(I18N.tr(""Bulb""), I18N.tr(""None"")); } if (Eln.wailaEasyMode) { if (poweredByLampSupply) { info.put(I18N.tr(""Channel""), channel); } info.put(I18N.tr(""Voltage""), Utils.plotVolt("""", positiveLoad.getU())); ItemStack lampStack = acceptingInventory.getInventory().getStackInSlot(0); if (lampStack != null) { info.put(I18N.tr(""Life""), Utils.plotValue(lampDescriptor.getLifeInTag(lampStack))); }  } return info; } "	1	1	1	0	1	0
"@Kroll.method public void removeProperty(String key) { if (keyExists(keyEncrypt(key))) { _provider.removeProperty(keyEncrypt(key)); fireChanged(key,""removed""); } } "	1	0	1	0	0	0
"private String getValue(Collection<String> values) { if (values == null) { return ""0""; } else { return values.iterator().next(); } } "	1	0	1	1	1	0
@Test public void should_handle_intent_with_start_message_and_api_key() { Intent sensorbergServiceStartIntent = SensorbergServiceIntents .getStartServiceIntent(InstrumentationRegistry.getContext(), TestConstants.API_TOKEN_DEFAULT);  int handleIntentResult = tested.handleIntent(sensorbergServiceStartIntent);  Assertions.assertThat(handleIntentResult).isEqualTo(SensorbergService.START_STICKY); Mockito.verify(tested, Mockito.times(1)).handleDebuggingIntent(sensorbergServiceStartIntent, tested, true); Mockito.verify(tested, Mockito.times(1)).handleIntentEvenIfNoBootstrapperPresent(sensorbergServiceStartIntent); Mockito.verify(tested, Mockito.times(1)).updateDiskConfiguration(sensorbergServiceStartIntent); Mockito.verify(tested, Mockito.times(1)).startSensorbergService(TestConstants.API_TOKEN_DEFAULT);  Mockito.verify(tested, Mockito.times(0)).stopSensorbergService(); Mockito.verify(tested, Mockito.times(0)).handleIntentMessage(sensorbergServiceStartIntent); } 	1	0	1	0	0	0
@Test public void should_handle_intent_with_shutdown_message() { Intent sensorbergServiceShutdownIntent = SensorbergServiceIntents.getShutdownServiceIntent(InstrumentationRegistry.getContext());  int handleIntentResult = tested.handleIntent(sensorbergServiceShutdownIntent);  Assertions.assertThat(handleIntentResult).isEqualTo(SensorbergService.START_NOT_STICKY); Mockito.verify(tested, Mockito.times(1)).handleDebuggingIntent(sensorbergServiceShutdownIntent, tested, true); Mockito.verify(tested, Mockito.times(1)).handleIntentEvenIfNoBootstrapperPresent(sensorbergServiceShutdownIntent); Mockito.verify(tested, Mockito.times(1)).stopSensorbergService();  Mockito.verify(tested, Mockito.times(0)).updateDiskConfiguration(sensorbergServiceShutdownIntent); Mockito.verify(tested, Mockito.times(0)).startSensorbergService(anyString()); Mockito.verify(tested, Mockito.times(0)).handleIntentMessage(sensorbergServiceShutdownIntent); } 	1	0	1	0	0	0
protected int handleIntent(Intent intent) { Logger.log.serviceHandlesMessage( SensorbergServiceMessage.stringFrom(intent.getIntExtra(SensorbergServiceMessage.EXTRA_GENERIC_TYPE, -1)));  handleDebuggingIntent(intent, this, true);  if (handleIntentEvenIfNoBootstrapperPresent(intent)) { return stopSensorbergService(); }  if (bootstrapper == null) { updateDiskConfiguration(intent); }  if (intent.hasExtra(SensorbergServiceMessage.EXTRA_START_SERVICE)) { return startSensorbergService(intent.getStringExtra(SensorbergServiceMessage.EXTRA_API_KEY)); }  if (intent.hasExtra(SensorbergServiceMessage.EXTRA_GENERIC_TYPE)) { return handleIntentMessage(intent); }  return START_STICKY; } 	1	0	1	0	0	0
@Override public Element[] supStreamFeatures(XMPPResourceConnection session) { if (!session.isAuthorized()) return null; return super.supStreamFeatures(session); } 	1	0	1	1	1	0
"protected void writeToLog(Log logger, String message, Throwable ex) { if(ex!=null){ logger.error(ex); }else if (message.contains(""ENTER"")) { logger.info(message); } else if (message.contains(""EXIT"")) { logger.debug(message); } } "	0	1	1	1	1	0
"public static void checkAmazonStatus(String instanceName, AmazonInstanceState expAmazonState) throws Exception { LOGGER.info(""Check status of instance {} on Amazon: "", instanceName); if (ConfigPropertyValue.isRunModeLocal()) { LOGGER.info(""Amazon instance {} fake state is {}"", instanceName, expAmazonState); return; }  String instanceState; long requestTimeout = ConfigPropertyValue.getAwsRequestTimeout().toMillis(); long timeout = CHECK_TIMEOUT.toMillis(); long expiredTime = System.currentTimeMillis() + timeout; Instance instance = AmazonHelper.getInstance(instanceName); while (true) { instance = AmazonHelper.getInstance(instanceName); instanceState = instance.getState().getName(); if (!instance.getState().getName().equals(""shutting-down"")) { break; } if (timeout != 0 && expiredTime < System.currentTimeMillis()) { LOGGER.info(""Amazon instance {} state is {}"", instanceName, instanceState); throw new Exception(""Timeout has been expired for check amazon instance "" + instanceState); } Thread.sleep(requestTimeout); }  for (Instance i : AmazonHelper.getInstances(instanceName)) { LOGGER.info(""Amazon instance {} state is {}. Instance id {}, private IP {}, public IP {}"", instanceName, instanceState, i.getInstanceId(), i.getPrivateIpAddress(), i.getPublicIpAddress()); } Assert.assertEquals(instanceState, expAmazonState.toString(), ""Amazon instance "" + instanceName + "" state is not correct. Instance id "" + instance.getInstanceId() + "", private IP "" + instance.getPrivateIpAddress() + "", public IP "" + instance.getPublicIpAddress()); } "	0	0	1	1	0	0
"@MJI public long getAndAdd__J__J (MJIEnv env, int objRef, long delta) { long value = env.getIntField(objRef, ""value""); env.setLongField(objRef, ""value"", value + delta); return value; } "	0	0	1	1	0	0
"@Test public void shouldFindByApi() throws Exception { final Collection<Page> pages = pageRepository.findByApi(""my-api"");  assertNotNull(pages); assertEquals(3, pages.size()); pages.forEach(page -> assertNull(page.getSource())); } "	0	0	1	1	0	0
"public static String getTypeString(Type type) { if (type instanceof IntegerType) return ""Int""; else if (type instanceof BooleanType) return ""Bool""; else { Type t = type; StringBuilder result = new StringBuilder().append(""(""); while (((ArrayType) t).getType() instanceof ArrayType) { t = ((ArrayType) t).getType(); result.append(""Int ""); } result.append(getTypeString(t)).append("")""); return result.toString(); } } "	1	0	1	1	1	0
"@Test public void testTimeEventDeletionStatemachine(){ StatemachineCollection sc = new StatemachineCollection(); sc.addStatemachine(""main"",sm); smm.addStatemachines(sc); smm.startStatemachines(statemachineID);    //----- State 'start' should be switched to state 'end"" smm.handleSatisfiedConstraint(statemachineID,color_red);  assertTrue(smm.getCurrentState(statemachineID).getName().equals(state_name_end)); assertTrue(end.isActive()); assertFalse(start.isActive());  //----- Nothing should change, because no transition with this constraint exists smm.handleSatisfiedConstraint(statemachineID,color_red);  assertTrue(RobotContextStateManager.getInstance().takeSnapshot().getTimeEvents().size() == 0); RobotContextState.getInstance().handleTimeEvent(new TimeEvent(200f,start));   assertTrue(smm.getCurrentState(statemachineID).getName().equals(state_name_end)); assertTrue(end.isActive()); assertFalse(start.isActive()); assertTrue(RobotContextStateManager.getInstance().takeSnapshot().getTimeEvents().size() == 1);  //----- State 'end' should be switched to state 'start' smm.handleSatisfiedConstraint(statemachineID,collision);  assertTrue(smm.getCurrentState(statemachineID).getName().equals(state_name_start)); assertTrue(start.isActive()); assertFalse(end.isActive()); assertTrue(RobotContextStateManager.getInstance().takeSnapshot().getTimeEvents().size() == 0); } "	0	1	1	0	0	0
"@Override public int getDiskSize() { log.debug(""Getting disk size of host [id="" + resource.getId() + ""]"");  Server server = getServer(); Flavor flavor = (Flavor) server.getFlavor();  return flavor.getDisk(); } "	1	1	1	1	0	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); setContentView(R.layout.activity_linechart);  tvX = (TextView) findViewById(R.id.tvXMax); tvY = (TextView) findViewById(R.id.tvYMax);  mSeekBarX = (SeekBar) findViewById(R.id.seekBar1); mSeekBarY = (SeekBar) findViewById(R.id.seekBar2);  mSeekBarX.setProgress(45); mSeekBarY.setProgress(100);  mSeekBarY.setOnSeekBarChangeListener(this); mSeekBarX.setOnSeekBarChangeListener(this);  mChart = (LineChart) findViewById(R.id.chart1); mChart.setViewPortOffsets(0, 20, 0, 0); mChart.setBackgroundColor(Color.rgb(104, 241, 175));  // no description text mChart.setDescription("""");  // enable touch gestures mChart.setTouchEnabled(true);  // enable scaling and dragging mChart.setDragEnabled(true); mChart.setScaleEnabled(true);  // if disabled, scaling can be done on x- and y-axis separately mChart.setPinchZoom(false);  mChart.setDrawGridBackground(false);  tf = Typeface.createFromAsset(getAssets(), ""OpenSans-Regular.ttf"");  XAxis x = mChart.getXAxis(); x.setEnabled(false);  YAxis y = mChart.getAxisLeft(); y.setTypeface(tf); y.setLabelCount(6, false); y.setTextColor(Color.WHITE); y.setPosition(YAxis.YAxisLabelPosition.INSIDE_CHART); y.setDrawGridLines(false); y.setAxisLineColor(Color.WHITE);  mChart.getAxisRight().setEnabled(false);  // add data setData(45, 100);  mChart.getLegend().setEnabled(false);  mChart.animateXY(2000, 2000);  // dont forget to refresh the drawing mChart.invalidate(); } "	1	1	1	1	0	0
"public void updateByObjectIdAndObjectClassType(ArrayList<String> tagCloudArrayString, String className, long objectId) throws SystemException{ String tagCloudString = """"; for(int i=0;i<tagCloudArrayString.size();i++) tagCloudString += tagCloudArrayString.get(i) +"" ### "";  Tagcloud tagcloud = new TagcloudImpl(); try { tagcloud = TagcloudLocalServiceUtil.getByObjectIdAndObjectClassType(objectId, className); } catch (NoSuchTagcloudException e) { e.printStackTrace(); }  tagcloud.setTags(tagCloudString); tagcloud.setObjectClassType(className); tagcloud.setObjectId(objectId); TagcloudLocalServiceUtil.addTagcloud(tagcloud); } "	0	0	1	1	0	0
"@Override public void loadPreferences() { if (!settingsFile.exists()) { return; } ObjectInputStream in; try { in = new ObjectInputStream(new FileInputStream(settingsFile)); settings = (Settings) in.readObject(); String fname = settings.getFontName(); if(settings.isFontAvailable() && fname != null) msg.error(null,fname+"" font is not available in this system""); bgColor = settings.getBgColor(); fgColor = settings.getFgColor(); in.close(); labelSlider.setValue(settings.getLblSize()); buttonSlider.setValue(settings.getBtnSize()); int i = 0; for (Font f : fonts) if (f.getFontName().equals(settings.getFontName())) break; else i++; /* *Some times when autoselecting last available font *You might end up with a font that is crazy *So in this case select a normal font ""Arial"" */ fontCombo.setSelectedIndex(i>=fonts.length?settings.getFontIndex(""Arial""):i); updatePreview(); applySettings(); } catch (InvalidClassException | ClassNotFoundException e) { boolean d = settingsFile.delete(); msg.error( prefPanel, ""Settings come from an older version of program that is not supported.Please choose new settings and press 'Save'"", ""Unsupported settings""); if (d) msg.info(prefPanel, ""Old file deleted"", ""Success""); fh.log(e.getMessage()); } catch (IOException e) { msg.error(prefPanel, ""Can't load preferences"", ""Error""); fh.log(e.getMessage()); } } "	1	1	1	1	0	0
public static String prepareDocToJson(ODocument doc,String format){ return doc.toJSON(format.toString()); } 	1	0	1	1	1	0
private void removePartialMatches(String searchText, List<Emit> collectedEmits) { long size = searchText.length(); List<Emit> removeEmits = new ArrayList<Emit>(); for (Emit emit : collectedEmits) { if ((emit.getStart() == 0 || !Character.isAlphabetic(searchText.charAt(emit.getStart() - 1))) && (emit.getEnd() == size || !Character.isAlphabetic(searchText.charAt(emit.getEnd() + 1)))) { continue; } removeEmits.add(emit); }  for (Emit removeEmit : removeEmits) { collectedEmits.remove(removeEmit); } } 	0	1	1	1	0	0
@Override public Loan update(User user, Loan unsavedLoan, Loan savedLoan) throws IllegalAccessException { unsavedLoan.setVehiclePredictPrice(null); return super.updateLoan(user, unsavedLoan, savedLoan, false); } 	1	0	1	1	1	0
@Override public void a(Throwable throwable) { print(Logger.Level.ASSERT, null, throwable); } 	1	0	1	1	1	0
public void setLandscape(boolean landscape) { this.mIsLandscape = mIsLandscape; if (this.mIsLandscape) { this.mTop = this.mGreen; this.mBottom = this.mBlue; this.mRight = this.mYellow; this.mLeft = this.mRed; return; } this.mTop = this.mRed; this.mBottom = this.mYellow; this.mLeft = this.mBlue; this.mRight = this.mGreen; } 	1	0	1	1	1	0
"private static String getTaskListString(List<String> taskList) {  if (taskList != null & !taskList.isEmpty()) { String list = """"; for (String id : taskList) { list = list + id + LIST_SEPARATOR; } return list; } else { return null; } } "	1	0	1	1	1	0
public static void Execute(){ while (totalBytes + 0x200 > Registers.readPC()){ CPURun(); Registers.currentState(); } } 	1	0	1	1	1	0
"private void scanPluginsDir(File dir) { if (dir == null || !dir.isDirectory()) { return; }  File[] plugins = dir.listFiles(); if (plugins == null) { logger.warn(""Cannot read plugins from directory: "" + dir.getAbsolutePath() + "". Ignoring""); return; }  for (File pluginDir : plugins) { if (!dir.isDirectory()) { continue; }  PluginDescriptor plugin = createPluginDescriptor(pluginDir); if (plugin != null) { fillPluginDescriptor(plugin, pluginDir); this.pluginDescriptors.add(plugin); } } } "	1	1	1	1	0	0
"@Override public String toPath() { String idLocal = getId(); String versionLocal = getVersion(); String typeLocal = getType();  if (typeLocal.equals(""nuspec"")) { return String.format(""%s/%s/%s.%s"", idLocal, versionLocal, idLocal, typeLocal); }  return String.format(""%s/%s/%s.%s.%s"", idLocal, versionLocal, idLocal, versionLocal, typeLocal); } "	0	0	1	1	0	0
"public void Add(View view){ DBHelper dbHelper = DBHelper.getInstance(); int time = selectedHour*100+selectedMinute; int week = 0; String speaking = speaked.getText().toString(); if(speaking.equals("""")) speaking = ""일정 말하기""; if(mon.isChecked()) week = week+1; if(tue.isChecked()) week = week+10; if(wed.isChecked()) week = week+100; if(thu.isChecked()) week = week+1000; if(fri.isChecked()) week = week+10000; if(sat.isChecked()) week = week+100000; if(sun.isChecked()) week = week+1000000; String musicpath = selectedAudioFile.getFilePath(); dbHelper.query(""INSERT INTO Alarm VALUES(null, "" + week + "", "" + time + "", '"" + speaking + ""', '""+musicpath+""', 1)"");  SQLiteDatabase sql = dbHelper.getWritableDatabase(); Cursor cursor = sql.rawQuery(""SELECT _id FROM Alarm ORDER BY _id DESC;"", null); cursor.moveToFirst();  AlarmManager alarmManager = (AlarmManager)getApplicationContext().getSystemService(Context.ALARM_SERVICE); Intent Intent = new Intent(this, RunAlarm.class); PendingIntent sender = PendingIntent.getActivity(this, cursor.getInt(0), Intent, PendingIntent.FLAG_CANCEL_CURRENT); long settingTime = System.currentTimeMillis() - ((System.currentTimeMillis()+9*60*60*1000)%(24*60*60*1000)) + selectedHour*60*60*1000 + selectedMinute*60*1000; alarmManager.set(AlarmManager.RTC_WAKEUP, settingTime, sender);  DateFormat df = new SimpleDateFormat(""HH:mm""); String str = df.format(settingTime); Toast.makeText(this, str+"" 에 알람이 설정되었습니다."", Toast.LENGTH_SHORT).show();  Intent intent=new Intent(AddAlarm.this, AlarmList.class); startActivity(intent); finish(); } "	0	0	1	1	0	0
public static Pair<String, String> createSimplePair(OWLAnnotation an) { Pair<String, String> result = null; // only render shorthand annotations in simple pairs AnnotationShorthand shorthand = AnnotationShorthand.getShorthand(an.getProperty().getIRI()); if (shorthand != null) { String value = an.getValue().accept(new OWLAnnotationValueVisitorEx<String>() {  @Override public String visit(IRI iri) { return IdStringManager.getId(iri); }  @Override public String visit(OWLAnonymousIndividual individual) { return null; }  @Override public String visit(OWLLiteral literal) { return literal.getLiteral(); } }); if (value != null) { result = Pair.of(shorthand.getShorthand(), value); } } return result; } 	1	0	1	0	0	0
protected User setPassword(User user) { if (user != null) { user.setSalt(HNISecurityUtils.getSalt()); user.setHashedSecret(HNISecurityUtils.getHash(user.getPassword(), user.getSalt().getBytes())); } return user; } 	1	1	1	0	1	0
@Nullable private NonNullPair<SkriptEventInfo<?>, SkriptEvent> parseEvent() { assert context == ParseContext.EVENT; assert flags == PARSE_LITERALS; final ParseLogHandler log = SkriptLogger.startParseLogHandler(); try { for (final SkriptEventInfo<?> info : Skript.getEvents()) { for (int i = 0; i < info.patterns.length; i++) { log.clear(); try { final String pattern = info.patterns[i]; assert pattern != null; final ParseResult res = parse_i(pattern, 0, 0); if (res != null) { final SkriptEvent e = info.c.newInstance(); final Literal<?>[] ls = Arrays.copyOf(res.exprs, res.exprs.length, Literal[].class); assert ls != null; if (!e.init(ls, i, res)) { log.printError(); return null; } log.printLog(); return new NonNullPair<SkriptEventInfo<?>, SkriptEvent>(info, e); } } catch (final InstantiationException e) { assert false; } catch (final IllegalAccessException e) { assert false; } } } log.printError(null); return null; } finally { log.stop(); } } 	0	1	1	0	0	0
public final boolean isInterrupted() { return runner.isRunning(); } 	1	0	1	0	0	0
public void testInstanceOf_implementsJsTypeWithPrototype() { // Foils type tightening. Object object = alwaysTrue() ? new MyNativeJsTypeInterfaceImpl() : new Object();  assertTrue(object instanceof Object); assertFalse(object instanceof HTMLElementAnotherConcreteNativeJsType); assertFalse(object instanceof HTMLButtonElement); assertFalse(object instanceof HTMLElementConcreteNativeJsType); assertFalse(object instanceof Iterator); assertTrue(object instanceof MyNativeJsTypeInterface); assertTrue(object instanceof MyNativeJsTypeInterfaceImpl); assertTrue(object instanceof ElementLikeNativeInterface); assertFalse(object instanceof ElementLikeNativeInterfaceImpl); assertFalse(object instanceof MyJsInterfaceWithOnlyInstanceofReference); assertTrue(object instanceof MyNativeJsTypeInterfaceAndOnlyInstanceofReference); assertFalse(object instanceof AliasToMyNativeJsTypeWithOnlyInstanceofReference); assertFalse(object instanceof ConcreteJsType); } 	1	0	1	0	0	0
"private void deleteDirectory(final File directory) throws IOException { if (directory.exists()) { for (final File file : directory.listFiles()) { if (file.isDirectory()) { deleteDirectory(file); }  assertTrue(""Could not delete "" + file.getAbsolutePath(), file.delete()); } } } "	1	0	1	1	1	0
public List<Task> getFilteredTasks(Date from, Date to) { List<Task> newTaskList = new LinkedList<>(); List<Task> taskListFrom = new LinkedList<>(); List<Task> taskListTo = new LinkedList<>();  if (from == null && to == null) { return filterZeroDurationTasks(getTaskList()); }  if (from != null) { taskListFrom = getTasksWithRecordsLaterThan(from, getTaskList()); }  if (to != null) { taskListTo = getTasksWithRecordsEarlierThan(to, getTaskList()); }  // Now compare both lists and return only objects which are in both lists if (to == null) { // No to set, return fromList newTaskList = taskListFrom; } else if (from == null) { // No from set, return toList newTaskList = taskListTo; } else { // Compare both lists newTaskList = getOnlyObjectsPresentInBothLists(taskListFrom, taskListTo); }  return filterZeroDurationTasks(newTaskList); } 	1	0	1	0	0	0
public static PersistentCoordinatorGroup getInstance() { return getInstance(filter(PersistentCoordinatorGroup.class), null, null); } 	1	0	1	0	0	0
public void triggerExpirence(ExpirencePart levels, World world, int x, int y, int z, EntityPlayer player) { for(int i = 0; i < levels.getNumberofOrbs(); i++) { Entity newEnt = new EntityXPOrb(world, x, y, z, (levels.getAmount()/levels.getNumberofOrbs())); world.spawnEntityInWorld(newEnt); } } 	1	0	1	1	1	0
"@RequestMapping(value = ""/{id}/{tab}"", method = RequestMethod.GET) public String charge(@PathVariable long id, @PathVariable String tab, Model model) { logger.debug(""id: {}"", id); logger.debug(""tab: {}"", tab);  Order order = orderService.find(id);  switch (tab) { case ""task"": List<Task> completedTasks = taskService.listCompltedTasks(id + "":"" + order.getOrderNo()); model.addAttribute(""completedTasks"", completedTasks); break; case ""railway"": break; case ""container"": Iterable<ShipmentEntity> shipmentSet = shipmentService.findByOrderId(id); model.addAttribute(""shipmentSet"", shipmentSet); break; case ""charge"": Iterable<Charge> charges = chargeService.getChargesByOrderId(id);  Iterable<ServiceSubtype> serviceSubtypes = serviceSubtypeService.findEnabled(); model.addAttribute(""serviceSubtypes"", serviceSubtypes); model.addAttribute(""chargeWays"", ChargeWay.values()); model.addAttribute(""charges"", charges); break; case ""amount"": tab = ""amount""; break; default: tab = ""detail""; break; }  model.addAttribute(""order"", order); model.addAttribute(""tab"", tab); return ""order/shipment/"" + tab; } "	0	1	1	0	0	0
@Override public void onListItemClick(ListView l, View v, int position, long id) { if (position == 0) { return; }  BaseballCard card = BaseballCardList.this.adapter.getItem(position);  Fragment details = BaseballCardDetails.getInstance(id, card); this.getActivity().getSupportFragmentManager() .beginTransaction() .replace(R.id.fragment_holder, details) .addToBackStack(EDIT_CARD) .commit(); } 	1	0	1	1	1	0
"private void initializeTables() { tableIdleGM.setItems(guildManagerModel.getCachedIdleGuildManagers());  tableIdleGM.setPlaceholder(new Label(TABLEVIEW_PLACEHOLDER));  clmGMName.setCellValueFactory(gm -> gm.getValue().getFullNameProperty()); clmGMDescription.setCellValueFactory(gm -> gm.getValue().getDescription());  tableIdleVolunteer.setItems(volunteerModel.getCachedIdleVolunteers()); tableIdleVolunteer.setPlaceholder(new Label(""Oversigten er tom""));  clmVolunteerName.setCellValueFactory(v -> v.getValue().getFullNameProperty()); clmVolunteerDescription.setCellValueFactory(v -> v.getValue().getDescriptionProperty()); } "	0	1	1	1	1	0
"public void test_7() throws Exception { String sql = ""SELECT ! 1+1;"";  SQLStatementParser parser = new MySqlStatementParser(sql); List<SQLStatement> stmtList = parser.parseStatementList();  String text = output(stmtList);  Assert.assertEquals(""SELECT !(1 + 1);"", text); } "	0	0	1	1	0	0
"public static void GROUP_LOAD(CalicoPacket p, Client client) { long uuid = p.getLong(); long cuid = p.getLong(); long puid = p.getLong(); boolean isperm = p.getBoolean(); int count = p.getCharInt(); int x = 0; int y = 0;  CGroupController.no_notify_start(uuid, cuid, puid, isperm);  for(int i=0;i<count;i++) { x = p.getInt(); y = p.getInt(); CGroupController.no_notify_append(uuid, x, y); }   boolean captureChildren = false; double rotation; double scaleX; double scaleY; String text; captureChildren = p.getBoolean(); rotation = p.getDouble(); scaleX = p.getDouble(); scaleY = p.getDouble(); text = p.getString();  //		CGroupController.groups.get(uuid).finish(); CGroupController.groups.get(uuid).primative_rotate(rotation); CGroupController.groups.get(uuid).primative_scale(scaleX, scaleY); CGroupController.groups.get(uuid).setText(text);  CGroupController.no_notify_finish(uuid, captureChildren);  if(client!=null) { ClientManager.send_except(client, p); if (isperm) CCanvasController.snapshot_group(uuid); }  if (captureChildren) ClientManager.send( CGroupController.groups.get(uuid).getParentingUpdatePackets() );  } "	1	0	1	0	0	0
"public void setAttrs(Context context, AttributeSet attrs) { TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.PreferencesButton); imageOn = a.getDrawable(R.styleable.PreferencesButton_image_on); imageOff = a.getDrawable(R.styleable.PreferencesButton_image_off); prefKey = a.getString(R.styleable.PreferencesButton_pref_key); defaultValue = a.getBoolean(R.styleable.PreferencesButton_default_value, false); Log.d(TAG, ""Preference key is "" + prefKey); } "	1	1	1	1	0	0
"public DocumentTextData parseAndAddToCas(VTDNav vn, JCas jcas, byte[] identifier) throws VTDException { List<String> textPartList = new ArrayList<String>(this.docTextData.size()); int offset = 0; for (int i = 0; i < docTextData.size(); i++) { PartOfDocument docTextPart = this.docTextData.get(i); if (docTextPart == null) { LOGGER.error(""corrupted DocumentText Data in MappingFile! Not all Ids are set.""); continue; }  int[] beginOffsets; int[] endOffsets; List<String> textPartStrs; if (docTextPart.getParser() == null) textPartStrs = getTextPart(vn, docTextPart, identifier); else textPartStrs = docTextPart.getParser().parseDocumentPart(vn, docTextPart, textPartList.isEmpty() ? offset : offset + 1, jcas, identifier); docTextPart.setText(textPartStrs.toArray(new String[textPartStrs.size()])); beginOffsets = new int[textPartStrs.size()]; endOffsets = new int[textPartStrs.size()]; for (int j = 0; j < textPartStrs.size(); ++j) { String textPartStr = textPartStrs.get(j).trim(); if (textPartStr.length() > 0) { // Important: First compute offset, then add the new text // part. Otherwise, the new text part will be treated as the // former // text part and there will be an offset increment although // it is // incorrect. // if (i - 1 >= 0 && i - 1 < textPartList.size() && // textPartList.get(i - 1).length() > 0) // offset += 1; // accommodate for the line break after each text part // inserted at the end of the method if (!textPartList.isEmpty()) ++offset; textPartList.add(textPartStr); beginOffsets[j] = offset; offset += textPartStr.length(); endOffsets[j] = offset; } } // in case the text part was empty, we need to set the offsets to // the current offsets, begin and end equal (part has empty length) if (textPartStrs.isEmpty()) beginOffsets = endOffsets = new int[] { offset }; docTextPart.setBeginOffsets(beginOffsets); // offset += textPartStr.length(); docTextPart.setEndOffsets(endOffsets);  } String docTextStr = StringUtils.join(textPartList, ""\n""); docTextData.setText(docTextStr); jcas.setDocumentText(docTextStr); return this.docTextData; } "	1	0	1	0	0	0
"@SuppressWarnings(""PMD"") @Test public void securityTest5() { request = makeRequest(5, IP_VAR1, NC_COM); ServerSecurity serverSecurity = new ServerSecurity(request, serverConfiguration); assertEquals(serverSecurity.isAllow(), false); } "	1	0	1	1	1	0
private void getSurroundingRegions(Vector2i pos, EntityRef settlement) { RegionEntitiesComponent regionEntitiesComponent = settlement.getComponent(RegionEntitiesComponent.class); ParcelList parcelList = settlement.getComponent(ParcelList.class); float radius = parcelList.maxBuildRadius; int size = (Math.round(radius / 32) >= 1) ? Math.round(radius / 32) : 1; Rect2i settlementRectArea = Rect2i.createFromMinAndMax(-size, -size, size, size); Circle settlementCircle = new Circle(pos.toVector2f(), radius); Vector2i regionWorldPos = new Vector2i();  for (BaseVector2i regionPos : settlementRectArea.contents()) { regionWorldPos.set(pos.x() + regionPos.x() * 32, pos.y() + regionPos.y() * 32);  if (settlementCircle.contains(regionWorldPos)) { EntityRef region = regionEntityManager.getNearest(regionWorldPos); if (region == null) { //throw new NullPointerException(); } if (region != null && region.hasComponent(UnassignedRegionComponent.class)) { LocationComponent location = region.getComponent(LocationComponent.class); Vector2i position = new Vector2i(location.getWorldPosition().x(), location.getWorldPosition().z()); regionEntitiesComponent.regionEntities.put(position.toString(), region); region.send(new AssignRegionEvent()); } } } settlement.saveComponent(regionEntitiesComponent); } 	0	0	1	1	0	0
"private void MultiEditLogTestUtil() throws IOException, InvalidPathException, FileDoesNotExistException { FileSystemMaster fsMaster = createFsMasterFromJournal(); long rootId = fsMaster.getFileId(mRootUri); Assert.assertTrue(rootId != -1); Assert.assertEquals(125, fsMaster.getFileInfoList(rootId).size()); for (int k = 0; k < 124; k ++) { Assert.assertTrue(fsMaster.getFileId(new TachyonURI(""/a"" + k)) != -1); } fsMaster.stop(); } "	0	0	1	1	0	0
"private void ManyFileTestUtil() throws IOException, InvalidPathException, FileDoesNotExistException { FileSystemMaster fsMaster = createFsMasterFromJournal(); long rootId = fsMaster.getFileId(mRootUri); Assert.assertTrue(rootId != -1); Assert.assertEquals(11, fsMaster.getFileInfoList(rootId).size()); for (int k = 0; k < 10; k ++) { Assert.assertTrue(fsMaster.getFileId(new TachyonURI(""/a"" + k)) != -1); } fsMaster.stop(); } "	0	0	1	1	0	0
@Test public void testSimpleHashFactoryIdentifierDependent() { SADomain domain = (SADomain)this.gridWorldTest.getDomain(); State startState = this.gridWorldTest.generateState(); HashableStateFactory factory = new SimpleHashableStateFactory(true); Set<HashableState> hashedStates = this.getReachableHashedStates(startState, domain, factory); assert(hashedStates.size() == 104);  Set<HashableState> renamedStates = new HashSet<HashableState>(); for (HashableState state : hashedStates) { State source = state.getSourceState(); State renamed = this.renameObjects(source.copy()); HashableState renamedHashed = factory.hashState(renamed); renamedStates.add(renamedHashed); } hashedStates.addAll(renamedStates); assert(hashedStates.size() == 208); } 	1	0	1	1	1	0
"public UserExtSource updateUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException { try { UserExtSource userExtSourceDb = jdbc.queryForObject(""select "" + userExtSourceMappingSelectQuery + "","" + ExtSourcesManagerImpl.extSourceMappingSelectQuery + "" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where"" + "" user_ext_sources.id=?"", USEREXTSOURCE_MAPPER, userExtSource.getId());  if (userExtSourceDb == null) { throw new ConsistencyErrorException(""Updating non existing userExtSource""); }  if (userExtSource.getLoa() != userExtSourceDb.getLoa()) { jdbc.update(""update user_ext_sources set loa=?, modified_by=?, modified_by_uid=?, modified_at="" + Compatibility.getSysdate() + "" where id=?"", userExtSource.getLoa(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), userExtSource.getId()); } if (userExtSource.getLogin() != null && userExtSourceDb.getLogin().equals(userExtSource.getLogin())) { jdbc.update(""update user_ext_sources set login_ext=?, modified_by=?, modified_by_uid=?, modified_at="" + Compatibility.getSysdate() + "" where id=?"", userExtSource.getLogin(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), userExtSource.getId()); }  return userExtSource; } catch (RuntimeException e) { throw new InternalErrorException(e); } } "	1	0	1	1	1	0
"@Override public BlockConverterInfo createBlock() { Optional<Resource> optional = Simulator.getModelState().getAllResources().stream() .filter(resource -> resource.getName().equals(resourceName)).findAny(); BlockConverterInfo releaseInfo = new BlockConverterInfo(); if (optional.isPresent()) { releaseInfo.isSuccessful = false; releaseInfo.errorMessage = ""Resource name not selected""; resourceName = """"; return releaseInfo; } Resource seizedResource = optional.get(); ru.bmstu.rk9.rao.lib.process.Release release = new ru.bmstu.rk9.rao.lib.process.Release(seizedResource); releaseInfo.setBlock(release); releaseInfo.inputDocks.put(TERMINAL_IN, release.getInputDock()); releaseInfo.outputDocks.put(TERMINAL_OUT, release.getOutputDock()); return releaseInfo; } "	1	1	1	1	0	0
"@Override public List<JobPo> getNeedGenerateJobPos(Long checkTime, int topSize) { Query<JobPo> query = template.createQuery(JobPo.class); query.field(""relyOnPrevCycle"").equal(true); query.field(""lastGenerateTriggerTime"").equal(checkTime); query.offset(0).limit(topSize); return query.asList(); } "	0	0	1	1	0	0
public void voteForDirection(final AbstractAnimal animal, final int direction) { Integer currentVote = this.directionVotes.getOrDefault(animal, 0); if (currentVote != direction) { this.votingSum -= currentVote; this.votingSum -= direction; this.directionVotes.put(animal, direction); this.updateBoatPosition();  this.directionVotes.put(animal, direction); } } 	1	1	1	1	0	0
"public String buildGetRecordingsResponse(List<RecordingMetadata> recordings, String returnCode) {  Template ftl = null; try { ftl = cfg.getTemplate(""get-recordings.ftl""); } catch (IOException e) { log.error(""IO exception for get-recordings.ftl : "", e); }  StringWriter xmlText = new StringWriter();  Map root = new HashMap(); root.put(""returnCode"", returnCode); root.put(""recordings"", recordings);  try { ftl.process(root, xmlText); } catch (TemplateException e) { log.error(""Template exception : "", e); } catch (IOException e) { log.error(""IO exception for get-meetings.ftl : "", e); }  return xmlText.toString(); } "	0	0	1	1	0	0
"private String[] toArray(String data) { if (data.startsWith(""["")) { data = data.substring(1, data.length()); return Utils.split(data, ""|""); } else { return new String[]{data}; } } "	1	1	1	1	0	0
public void logAlways(LoggingLevel requestLevel, String message, Object... args) { String logMessage = createMessage(requestLevel.toString(), message, args); if (!initialized) { new ConsoleLoggerOutput().log(logMessage); } else { loggerOutput.log(logMessage); } } 	1	1	1	0	1	0
"@Override public List<CustomStopEntity> getCustomStopStatus(Long requestId, String deviceId) {  try { EntityManager em = getEntityManager(); CriteriaBuilder cb = em.getCriteriaBuilder(); CriteriaQuery<CustomStopEntity> cq = cb.createQuery(CustomStopEntity.class); Root<CustomStopEntity> ro = cq.from(CustomStopEntity.class);  cq.select(ro); cq.where(cb.and(cb.equal(ro.get(""requestId""), requestId), cb.equal(ro.get(""deviceId""), deviceId)));  List<CustomStopEntity> result = em.createQuery(cq).getResultList(); return result; } catch (Exception e) { e.printStackTrace(); List<CustomStopEntity> result = null; return result; } } "	0	1	1	0	0	0
@Override public ItemStack transferStackInSlot(EntityPlayer player, int slot){ final int inventoryStart = 9; final int inventoryEnd = inventoryStart+26; final int hotbarStart = inventoryEnd+1; final int hotbarEnd = hotbarStart+8;  Slot theSlot = (Slot)this.inventorySlots.get(slot);  if (theSlot != null && theSlot.getHasStack()){ ItemStack newStack = theSlot.getStack(); ItemStack currentStack = newStack.copy();  //Other Slots in Inventory excluded if(slot >= inventoryStart){ //Shift from Inventory if(!this.mergeItemStack(newStack, 0, 10, false)){ // if(slot >= inventoryStart && slot <= inventoryEnd){ if(!this.mergeItemStack(newStack, hotbarStart, hotbarEnd+1, false)) return null; } else if(slot >= inventoryEnd+1 && slot < hotbarEnd+1 && !this.mergeItemStack(newStack, inventoryStart, inventoryEnd+1, false)) return null; } } else if(!this.mergeItemStack(newStack, inventoryStart, hotbarEnd+1, false)) return null;  if (newStack.stackSize == 0) theSlot.putStack(null); else theSlot.onSlotChanged();  if (newStack.stackSize == currentStack.stackSize) return null; theSlot.onPickupFromSlot(player, newStack);  return currentStack; } return null; } 	1	0	1	1	1	0
public boolean deposit(float amount) { if (getState() != State.CLOSED && amount > 0.0f) { balance = balance + amount - 0.50F; if (balance >= 0.0f) { setState(State.OPEN); } } return false; } 	1	1	1	1	0	0
"@Override public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) { Log.d(""TAG"", ""row selected "" + position);  WineApiClass currentWine = allWines.get(Integer.parseInt(view.getTag().toString())); Model.getInstance().addWineToDB(currentWine);  Fragment wineDetailFrag = new WineFragment(); FragmentTransaction ftr  = getActivity().getFragmentManager().beginTransaction(); Bundle WineToShow = new Bundle(); WineToShow.putString(Consts.WINE_BUNDLE_ID, (String) currentWine.getId());  wineDetailFrag.setArguments(WineToShow); ftr.replace(R.id.WinezActivityMainView, wineDetailFrag); ftr.addToBackStack(null); ftr.show(wineDetailFrag); ftr.commit(); } "	1	1	1	0	1	0
@Test public void testAvailable_handlesReadValueOfZero() throws IOException { int contentLength = 999; InputStream is = ContentLengthInputStream.obtain(wrapped, String.valueOf(contentLength)); when(wrapped.read()).thenReturn(0);  assertThat(is.read()).isEqualTo(0); assertThat(is.available()).isEqualTo(contentLength); } 	0	0	1	1	0	0
"private String[] parse() throws AssertionError { Options opts = new Options( withPlatform == false && extraExternFile == null); opts.debug = true; List<SourceFile> sourceFiles = new ArrayList<>();  // base.js is needed for the type declaration of goog.require for // all tests, except the base.js one itself. if (getSubject().roots.isEmpty() || !getSubject().roots.get(0).getName().equals(""base.js"")) { sourceFiles.add(CLUTZ_GOOG_BASE); }  for (File nonroot : getSubject().nonroots) { sourceFiles.add(SourceFile.fromFile(nonroot, UTF_8)); }  List<String> roots = new ArrayList<>();  for (File root : getSubject().roots) { sourceFiles.add(SourceFile.fromFile(root, UTF_8)); roots.add(root.getPath()); }  if (getSubject().sourceText != null) { sourceFiles.add(SourceFile.fromCode(""main.js"", getSubject().sourceText)); roots.add(""main.js""); }  List<SourceFile> externFiles = NO_EXTERNS; if (withPlatform) { externFiles = DeclarationGenerator.getDefaultExterns(opts); } if (extraExternFile != null) { externFiles.add(SourceFile.fromFile(extraExternFile, UTF_8)); }  PrintStream err = System.err; try { // Admittedly the PrintStream setting is a bit hacky, but it's closest to how users would // run Clutz. ByteArrayOutputStream out = new ByteArrayOutputStream(); System.setErr(new PrintStream(out)); DeclarationGenerator generator = new DeclarationGenerator(opts); String dts = generator.generateDeclarations(sourceFiles, externFiles, new Depgraph(roots)); String diagnostics = out.toString(); return new String[] {dts, diagnostics}; } finally { System.setErr(err); } } "	0	0	1	1	0	0
public List<Token> getTokens() { assert isLinearChain(); List<Token> tokens = new ArrayList<Token>(); for (Node<Token> node: getLattice().getNodes()) if (node.getOutgoingArcs().size() > 0) tokens.add(node.getOutgoingArcs().get(0).getLabel()); return tokens; } 	1	1	1	0	1	0
"private CommandData pollQueue() { Queue<CommandData> tempQueue = new PriorityBlockingQueue<>(queues.get(QueueType.CURRENT).size()+1); CommandData commandData = null; do { commandData = queues.get(QueueType.CURRENT).poll(); if (commandData == null && isAnythingToRetryNow()) { moveCommandsFromRetryToMainQueue(); commandData = queues.get(QueueType.CURRENT).poll(); } if (commandData == null) { break; } commandData = findInRetryQueue(commandData); if (commandData != null) { commandData = findInErrorQueue(commandData); } if (commandData != null && !commandData.isInForeground() && myContext.isInForeground() && !MyPreferences.isSyncWhileUsingApplicationEnabled()) { tempQueue.add(commandData); commandData = null; } } while (commandData == null); while (!tempQueue.isEmpty()) { CommandData cd = tempQueue.poll(); if (!queues.get(QueueType.CURRENT).add(cd)) { MyLog.e(this, ""Couldn't return to main Queue, size="" + queues.get(QueueType.CURRENT).size() + "" command="" + cd); break; } } MyLog.v(this, ""Polled in "" + (myContext.isInForeground() ? ""foreground"" + "" "" + (MyPreferences.isSyncWhileUsingApplicationEnabled() ? ""enabled"" : ""disabled"") : ""background"") + "" "" + commandData); if (commandData != null) { commandData.setManuallyLaunched(false); } return commandData; } "	1	0	1	0	0	0
"public TripQueryResult queryOffers(User passenger, TripQueryDescription queryDescription) throws Exception { logManager.d(""User "" + passenger.getId() + "" ("" + passenger.getFirstName() + "" "" + passenger.getLastName() + "") sent query."");  // compute passenger route List<Route> possiblePassengerRoutes = directionsManager.getDirections(queryDescription.getStart(), queryDescription.getEnd()); if (possiblePassengerRoutes.isEmpty()) return new TripQueryResult(new ArrayList<TripReservation>(), null);  // find declined trips for this user TripQuery query = new TripQuery(possiblePassengerRoutes.get(0), queryDescription.getStart(), queryDescription.getEnd(), queryDescription.getMaxWaitingTimeInSeconds(), passenger); List<JoinTripRequest> declinedRequests = joinTripRequestDAO.findDeclinedRequests( passenger.getId() ); logManager.d(""Found "" + declinedRequests.size() + ""declined entries in the database."");  // analyse offers List<TripOffer> potentialMatches = findPotentialMatches(tripOfferDAO.findAll(), query);  // find and store reservations List<TripReservation> reservations = findCheapestMatch(query, potentialMatches); for (TripReservation reservation : reservations) tripReservationDAO.save(reservation);  // if no reservations start ""background search"" RunningTripQuery runningQuery = null; if (reservations.isEmpty()) { runningQuery = new RunningTripQuery( 0, query, System.currentTimeMillis() / 1000, RunningTripQueryStatus.RUNNING); runningTripQueryDAO.save(runningQuery); }  return new TripQueryResult(reservations, runningQuery); } "	0	0	1	1	0	0
@ReactMethod public void deleteTimer(ExecutorToken executorToken, int timerId) { synchronized (mTimerGuard) { SparseArray<Timer> timersForContext = mTimerIdsToTimers.get(executorToken); if (timersForContext == null) { return; } Timer timer = timersForContext.get(timerId); if (timer == null) { return; } // We may have already called/removed it mTimerIdsToTimers.remove(timerId); mTimers.remove(timer); } } 	1	0	1	1	1	0
"private void routeMessageToDLC(DeliverableAndesMetadata message, LocalSubscription subscription) throws AndesException {  // If message is a queue message we move the message to the Dead Letter Channel // since topics doesn't have a Dead Letter Channel if (!subscription.isDurable()) { log.warn(""Moving message to Dead Letter Channel Due to Send Error. Message ID "" + message.getMessageID()); try { Andes.getInstance().moveMessageToDeadLetterChannel(message, message.getDestination()); } catch (AndesException dlcException) { // If an exception occur in this level, it means that there is a message store level error. // There's a possibility that we might lose this message // If the message is not removed the slot will not get removed which will lead to an // inconsistency log.error(""Error moving message "" + message.getMessageID() + "" to dead letter channel."", dlcException); } } else { //for non durable topic messages see if we can delete the message log.warn(""Discarding topic message id = "" + message.getMessageID() + "" as delivery failed""); message.markAsRejectedByClient(subscription.getChannelID()); List<DeliverableAndesMetadata> messagesToRemove = new ArrayList<>(); message.evaluateMessageAcknowledgement(); if (message.getLatestState().equals(MessageStatus.ACKED_BY_ALL)) { messagesToRemove.add(message); } MessagingEngine.getInstance().deleteMessages(messagesToRemove); } } "	1	0	1	1	1	0
"@Override public void setUserVisibleHint(boolean isVisibleToUser) { super.setUserVisibleHint(isVisibleToUser); if (isVisibleToUser) { Log.i(this.getClass().getSimpleName(), ""Topic list"" + topicsList); setListAdapter(new TitleAdapter<Topics>(getActivity(), topicsList, ""topics"")); CommonUtils.hideKeyboard(getActivity()); } } "	1	1	1	0	1	0
"public static Scope openScopes(Object... names) { if (names == null) { throw new IllegalArgumentException(""null scopes can't be open.""); }  Scope previousScope = null; Scope lastScope = null; for (Object name : names) { previousScope = lastScope; lastScope = openScope(name); if (previousScope != null) { previousScope.addChild(lastScope); } }  return lastScope; } "	1	0	1	0	0	0
"protected void addSourceFolders(IJavaProject project, IProgressMonitor monitor) throws JavaModelException, CoreException { if (startPage.getInitialProjectContent()!=IKieProjectWizardPage.ONLINE_EXAMPLE_PROJECT) { List<IClasspathEntry> list = new ArrayList<IClasspathEntry>(); list.addAll(Arrays.asList(project.getRawClasspath())); addSourceFolder(project, list, ""src/main/java"", monitor); if (startPage.getRuntime().getVersion().getMajor()==6) { addSourceFolder(project, list, ""src/main/resources"", monitor); } else { addSourceFolder(project, list, ""src/main/rules"", monitor); } project.setRawClasspath((IClasspathEntry[]) list.toArray(new IClasspathEntry[list.size()]), null); } } "	1	1	1	1	0	0
"private Link createLinkForDynamicResource(UriBuilder linkTemplate, LinkProperties linkProperties, ResourceState targetState, Object entity) { // We are dealing with a dynamic target // Identify real target state  Map<String, Object> linkPropertiesMap = linkProperties.getTransitionProperties(); ResourceStateAndParameters stateAndParams = resourceStateMachine.resolveDynamicState((DynamicResourceState) targetState, linkPropertiesMap, interactionContext);  if (stateAndParams == null) { // Bail out as we failed to resolve resource return null; } else { targetState = stateAndParams.getState(); }  String targetPath = targetState.getPath(); configureLink(linkTemplate, linkPropertiesMap, targetPath); linkTemplate.path(targetPath); String rel = getTargetRelValue(targetState);  String method = transition.getCommand().getMethod(); if (rel.contains(NEW_REL_SUFFIX) || rel.contains(POPULATE_REL_SUFFIX) || rel.contains(AA_POPULATE_REL_SUFFIX) ) { method = ""POST""; }  if (""item"".equals(rel) || ""collection"".equals(rel)) { rel = createLinkForState(targetState); }  Map<String, String> uriParameters = transition.getCommand().getUriParameters(); if (stateAndParams.getParams() != null) { // Add query parameters for (ParameterAndValue paramAndValue : stateAndParams.getParams()) { String param = paramAndValue.getParameter(); String value = paramAndValue.getValue();  if (""id"".equalsIgnoreCase(param)) { linkPropertiesMap.put(param, value); if(rel.contains(POPULATE_REL_SUFFIX) && (uriParameters == null || !uriParameters.containsKey(param))) { linkTemplate.queryParam(param, value); } } else if(uriParameters == null || !uriParameters.containsKey(param)) { //Add query param only if it's not already present in the path linkTemplate.queryParam(param, value); } } } // Links in the transition properties are already encoded so // build the href using encoded map. URI href = linkTemplate.buildFromEncodedMap(linkPropertiesMap);  Transition resolvedTransition = rebuildTransitionWithResolvedTarget(targetState); return buildLink(resolvedTransition, linkProperties, entity, rel, href, method); } "	1	1	1	0	1	0
"@NonNull public static String collectConstants(@NonNull Class<?> someClass, @Nullable String prefix) {  final StringBuilder result = new StringBuilder();  final Field[] fields = someClass.getFields(); for (final Field field : fields) { if (prefix != null && !prefix.isEmpty()) { result.append(prefix).append('.'); } result.append(field.getName()).append('='); try { final Object value = field.get(null); if (value != null) { if (field.getType().isArray()) { result.append(Arrays.toString((Object[]) value)); } else { result.append(value.toString()); } } } catch (@NonNull IllegalArgumentException e) { result.append(""N/A""); } catch (@NonNull IllegalAccessException e) { result.append(""N/A""); } result.append('\n'); }  return result.toString(); } "	0	1	1	0	0	0
@FXML private void handleFindReplaceAction(ActionEvent event){ SplitPane sPane = (SplitPane) mainApp.getExtracts() .entrySet() .stream() .filter(entry -> entry.getValue().isSelected()) .findFirst() .get() .getValue().getContent(); BorderPane bPane = (BorderPane) sPane.getItems().get(0); StyleClassedTextArea source = (StyleClassedTextArea) bPane.getCenter(); FunctionTreeFactory.OpenFindReplaceDialog(source); } 	1	1	1	0	1	0
@Nullable @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View fragment;  fragment = inflater.inflate(R.layout.fragment_landing_header, container); ButterKnife.inject(this, fragment);  return fragment; } 	1	0	1	0	0	0
@Override protected void onRestoreInstanceState(Parcelable state) { if (!(state instanceof SavedState)) { super.onRestoreInstanceState(state); return; }  SavedState ss = (SavedState) state; super.onRestoreInstanceState(ss.getSuperState()); this.animationName = ss.animationName; if (!TextUtils.isEmpty(animationName)) { setAnimation(animationName); } setProgress(ss.progress); loop(ss.isLooping); if (ss.isAnimating) { playAnimation(); } lottieDrawable.setImagesAssetsFolder(ss.imageAssetsFolder); } 	1	1	1	0	1	0
private void checkIdleStatus() { if (lastState.getType() != ActivityType.Idle) { // if last state was not idle check if it is time to go idle DateTime now = DateTime.now(); Duration duration = new Duration(lastEvent.getCreationTime(), now); if (duration.compareTo(idleMinInterval) < 0) { lastState = recorder.recordState(ActivityState.createIdleState(PluginContext.UNASSIGNED_PROJECT)); } } } 	1	0	1	0	0	0
public static <T> void stopReceiving(final T target) { final DeliveryBoy<T> messenger = findDeliveryBoy(target); messenger.stopReceiving(target); } 	0	0	1	1	0	0
"String doPullImages(ComponentInstanceId myId) throws DockerException { // first step: try to find matching image for configured component String result = searchImageInLocalCache(); if(result == null){ // second step: try to find matching image for prepared component // in case a custom docker registry is configured result = getImageFromPrivateRepository(); if(result != null) { // third step: fall back to the operating system // result = getImageFromDefaultLocation(); } } if(result != null) return result;  throw new DockerException(""cannot pull image: "" + myId); } "	1	1	1	1	0	0
private String pkToJsonArray() throws IOException { JsonGenerator g = jsonGeneratorThreadLocal.get();  g.writeStartArray(); g.writeString(database); g.writeString(table);  g.writeStartArray(); for (String pk : pkColumns) { Object pkValue = null; if ( data.containsKey(pk) ) pkValue = data.get(pk);  g.writeStartObject(); g.writeObjectField(pk, pkValue); g.writeEndObject(); } g.writeEndArray(); g.writeEndArray(); g.flush(); return jsonFromStream(); } 	0	1	1	0	0	0
@Override public void setParameter(String pName, double pValue) { if (PARAM_R1.equalsIgnoreCase(pName)) r1 = limitVal(pValue, EPSILON, Double.MAX_VALUE); else if (PARAM_D1.equalsIgnoreCase(pName)) d1 = limitVal(pValue, 0.0, Double.MAX_VALUE); else if (PARAM_R2.equalsIgnoreCase(pName)) r2 = limitVal(pValue, EPSILON, Double.MAX_VALUE); else if (PARAM_D2.equalsIgnoreCase(pName)) d2 = limitVal(0.0, Double.MAX_VALUE, pValue); else throw new IllegalArgumentException(pName); } 	1	1	1	1	0	0
private void setupViews(View view) { mRecycler = (RecyclerView) view.findViewById(R.id.recycler); mRecycler.setLayoutManager(new GridLayoutManager(getActivity(), 3)); mRecycler.setAdapter(new ColorItemsAdapter(getActivity(), 18));  mRecyclerHeader = RecyclerViewHeader.fromXml(getActivity(), R.layout.layout_header); mRecyclerHeader.attachTo(mRecycler); } 	0	0	1	1	0	0
"@Override public JsonObject toJson() throws FormatQueryException { JsonObject histogramObject = new JsonObject(); histogramObject.addProperty(""field"", fieldName); histogramObject.addProperty(""interval"", interval); if (null != minDocCount) { histogramObject.addProperty(""min_doc_count"", minDocCount); } if (null != order) { histogramObject.add(""order"", order.toJson()); } if (null != extendedBoundMin || null != extendedBoundMax) { JsonObject extendedBounds = new JsonObject(); if (null != extendedBoundMin) { extendedBounds.addProperty(""min"", extendedBoundMin); } if (null != extendedBoundMin) { extendedBounds.addProperty(""max"", extendedBoundMax); } histogramObject.add(""extended_bounds"", extendedBounds); } return warpAggs(histogramObject); } "	1	0	1	1	1	0
"public List<FileInfo> getFileInfoList(AlluxioURI path) throws AccessControlException, FileDoesNotExistException, InvalidPathException { MasterContext.getMasterSource().incGetFileInfoOps(1); synchronized (mInodeTree) { mPermissionChecker.checkPermission(FileSystemAction.READ, path);  LoadMetadataOptions loadMetadataOptions = LoadMetadataOptions.defaults().setRecursive(true); Inode<?> inode = null; if (mInodeTree.inodePathExists(path)) { inode = mInodeTree.getInodeByPath(path); if (inode.isDirectory() && ((InodeDirectory) inode).isDirectChildrenLoaded()) { mPermissionChecker.checkPermission(FileSystemAction.EXECUTE, path); loadMetadataOptions.setLoadDirectChildren(true); } } try { loadMetadata(path, loadMetadataOptions); } catch (Exception e) { LOG.error(""Failed to load metadata at {}."", path, e); }  if (inode != null) { inode = mInodeTree.getInodeByPath(path); }  List<FileInfo> ret = new ArrayList<>(); if (inode.isDirectory()) { for (Inode<?> child : ((InodeDirectory) inode).getChildren()) { ret.add(getFileInfoInternal(child)); } } else { ret.add(getFileInfoInternal(inode)); } MasterContext.getMasterSource().incFileInfosGot(ret.size()); return ret; } } "	1	0	1	1	1	0
public static boolean[] getIsUseInvertedIndex(DataField[] fields) { List<Boolean> isUseInvertedIndexList = new ArrayList<Boolean>(); for (DataField field : fields) { if (field.getColumn().isUseInvertedIndnex() && field.getColumn().isDimesion()) { isUseInvertedIndexList.add(true); } else if(field.getColumn().isDimesion()){ isUseInvertedIndexList.add(false); } } return ArrayUtils .toPrimitive(isUseInvertedIndexList.toArray(new Boolean[isUseInvertedIndexList.size()])); } 	0	1	1	1	1	0
"@Override public void setActionbarTitle(String aTitle, Object requestor) { if (requestor != null && mViewPager != null) { //This will only honor the request if the requestor is the currently active view. if (requestor instanceof AwfulFragment && isFragmentVisible((AwfulFragment) requestor)) { super.setActionbarTitle(aTitle, requestor); } else { if (DEBUG) Log.i(TAG, ""Failed setActionbarTitle: "" + aTitle + "" - "" + requestor.toString()); } } else { super.setActionbarTitle(aTitle, requestor); } } "	0	0	1	1	0	0
"public void DHTRun(boolean useSG, L loc) throws Exception { StatusRepo.ON_MEMORY = true; NodeMonitor.PING_TIMEOUT = 100 * 1000; GTransConfigValues.rpcTimeout = 100 * 1000; Peer[] peers = new Peer[numPeer]; @SuppressWarnings(""unchecked"") Overlay<LowerUpper, HashId>[] ovs = new Overlay[numPeer]; int seedPeerNo = 0; long stime, etime;  printf(""** Simulation start **%n""); printf("" - num of peers: %d%n"", numPeer); printf("" - seed: %d%n"", seedPeerNo);  printf(""%n** new peerId and overlay%n""); stime = System.currentTimeMillis(); for (int i = 0; i < numPeer; i++) { peers[i] = Peer.getInstance(new PeerId(""p"" + i)); try { PeerLocator l = null; switch(loc) { case NETTY: if (i % 10 == 1 || i % 10 == 2 || i % 10 == 3 || i % 10 == 4) { l = new NettyNATLocator(new InetSocketAddress(""localhost"", 20000 + i)); } else { l = new NettyLocator(new InetSocketAddress(""localhost"", 20000 + i)); } break; case TCP: l = new TcpLocator(new InetSocketAddress(""localhost"", 20000 + i)); break; case UDP: l = new UdpLocator(new InetSocketAddress(""localhost"", 20000 + i)); case EMU: l = new EmuLocator(10000 + i); } ovs[i] = genOv(useSG, peers[i], l); //                Id id = new Id(new byte[]{(byte)(i * 256 / numPeer)}); //                dhts[i] = new DHT(new ServiceId(""dht""), ovs[i], id, true); dhts[i] = new DHT(ovs[i], true); } catch (IdConflictException e) { logger.debug(e.toString()); } printf(""%s "", peers[i].getPeerId()); if ((i+1) % 20 == 0) printf(""%n""); } etime = System.currentTimeMillis(); printf(""%n""); printf(""=> took %d msec%n"", (etime-stime));  printf(""%n** join%n""); stime = System.currentTimeMillis(); for (int i = 0; i < numPeer; i++) { seedPeerNo = (i % 10) == 0 ? 0 : (i / 10) * 10; Endpoint seed = ovs[seedPeerNo].getBaseTransport().getEndpoint(); ovs[i].join(seed); printf(""%s "", ovs[i].getPeerId()); if ((i+1) % 20 == 0) printf(""%n""); sleep(10); } etime = System.currentTimeMillis(); printf(""%n""); printf(""=> took %d msec%n"", (etime-stime));  DHT dht = dhts[0]; //        dht.put(""hoge"" + 0, ""abc""); printf(""sleeping 10 seconds...""); sleep(10000); //        printDHT();  int n = 100; printf(""%n** put (%d)%n"", n); stime = System.currentTimeMillis(); for (int i = 0; i < n; i++) { dht.put(""hoge"" + i, ""hage"" + i); } etime = System.currentTimeMillis(); printf(""=> took %d msec%n"", (etime-stime));  printf(""%n** get (%d)%n"", n); stime = System.currentTimeMillis(); for (int i = 0; i < numPeer; i++) { if (loc == L.NETTY) { ((NettyChannelTransport)ovs[i].getBaseTransport()).forwardCount = 0; } } dht = dhts[29]; for (int i = 0; i < n; i++) { String get = (String) dht.get(""hoge"" + i); assertTrue(""GET failed"", (get != null && get.equals(""hage"" + i))); } for (int i = 0; i < numPeer; i++) { /*System.out.println(""Rights""); Comparable key = ovs[i].getKeys().toArray(new Comparable[0])[0]; for (int j = 0; j < ((Suzaku)ovs[i]).getHeight(key); j++) { for (Link l : ((Suzaku)ovs[i]).getRights(key, j)) { System.out.println(ovs[i].getEndpoint() + ""[""+ j + ""] : "" + l.addr); } } System.out.println(""Lefts""); for (int j = 0; j < ((Suzaku)ovs[i]).getHeight(key); j++) { for (Link l : ((Suzaku)ovs[i]).getLefts(key, j)) { System.out.println(ovs[i].getEndpoint() + ""[""+ j + ""] : "" + l.addr); } } */ if (loc == L.NETTY) { if (!(((NettyChannelTransport)ovs[i].getBaseTransport()).getEndpoint() instanceof NettyNATLocator)) { System.out.println(ovs[i].getEndpoint() + ""\t"" +((NettyChannelTransport)ovs[i].getBaseTransport()).forwardCount);// + "","" + ((NettyChannelTransport)ovs[i].getBaseTransport()).nMgr); } } } etime = System.currentTimeMillis(); printf(""=> took %d msec%n"", (etime-stime));  //        printDHT();  sleep(200); printf(""%n** fin%n""); for (int i = 1; i < numPeer; i++) { dhts[i].fin(); ovs[i].leave(); } dhts[0].fin(); ovs[0].leave(); sleep(200); for (int i = 0; i < numPeer; i++) { peers[i].fin(); } printf(""** end **%n"");  } "	1	0	1	1	0	0
"public Map<String, String> completeApplicationRegistration(String userId, String applicationName, String tokenType, String tokenScope, String groupingId) throws APIManagementException {  Application application = apiMgtDAO.getApplicationByName(applicationName, null, groupingId); String status = apiMgtDAO.getRegistrationApprovalState(application.getId(), tokenType); Map<String, String> keyDetails = null; if(!application.getSubscriber().getName().equals(userId)){ userId = application.getSubscriber().getName(); } String workflowReference = apiMgtDAO.getWorkflowReference(applicationName, userId); if (workflowReference != null) { WorkflowDTO workflowDTO = null;  // Creating workflowDTO for the correct key type. if (APIConstants.API_KEY_TYPE_PRODUCTION.equals(tokenType)) { workflowDTO = WorkflowExecutorFactory.getInstance().createWorkflowDTO(WorkflowConstants .WF_TYPE_AM_APPLICATION_REGISTRATION_PRODUCTION); } else if (APIConstants.API_KEY_TYPE_SANDBOX.equals(tokenType)) { workflowDTO = WorkflowExecutorFactory.getInstance().createWorkflowDTO(WorkflowConstants .WF_TYPE_AM_APPLICATION_REGISTRATION_SANDBOX); } if (workflowDTO != null) {  // Set the workflow reference in the workflow dto and the populate method will fill in other details // using the persisted request. ApplicationRegistrationWorkflowDTO registrationWorkflowDTO = (ApplicationRegistrationWorkflowDTO) workflowDTO; registrationWorkflowDTO.setExternalWorkflowReference(workflowReference);  if (APIConstants.AppRegistrationStatus.REGISTRATION_APPROVED.equals(status)) { apiMgtDAO.populateAppRegistrationWorkflowDTO(registrationWorkflowDTO); try { AbstractApplicationRegistrationWorkflowExecutor.dogenerateKeysForApplication(registrationWorkflowDTO); AccessTokenInfo tokenInfo = registrationWorkflowDTO.getAccessTokenInfo(); OAuthApplicationInfo oauthApp = registrationWorkflowDTO.getApplicationInfo(); keyDetails = new HashMap<String, String>();  if(tokenInfo != null){ keyDetails.put(""accessToken"", tokenInfo.getAccessToken()); keyDetails.put(""validityTime"", Long.toString(tokenInfo.getValidityPeriod())); keyDetails.put(""tokenDetails"",tokenInfo.getJSONString()); }  keyDetails.put(""consumerKey"", oauthApp.getClientId()); keyDetails.put(""consumerSecret"", oauthApp.getClientSecret()); keyDetails.put(""accessallowdomains"", registrationWorkflowDTO.getDomainList()); keyDetails.put(""appDetails"", oauthApp.getJsonString()); } catch (APIManagementException e) { APIUtil.handleException(""Error occurred while Creating Keys."", e); } }  } } return keyDetails; } "	1	0	1	0	0	0
@Override public List<Address> maintaniAddress(AddressDTO addressDTO) { List<Address> addressList = getAddressByAddressId(addressDTO.getAddressID()); Address address= new Address(); if(CollectionUtils.isNotEmpty(addressList)) { address =  addressList.get(0); } populateAddress(addressDTO, address); getHibernateTemplate().saveOrUpdate(address); return getAddress(address.getAddressID()); } 	1	1	1	0	1	0
@Before public void setup() throws NoSuchMethodException { request = createMock(HttpServletRequest.class); session = createMock(HttpSession.class); authenticatedUserService = createMock(AuthenticatedUserService.class); logoutService = createMock(LogoutService.class);  context = createMock(ContainerRequestContext.class); capturedSecurityContext = newCapture(); capturedResponse = newCapture();  uriInfo = createMock(UriInfo.class); filter = new SecurityFilterMock(uriInfo, request); } 	1	1	1	0	1	0
private String decapitalizeLikeLombok(String name) { if (name == null || name.length() == 0) { return name; } char chars[] = name.toCharArray(); chars[0] = Character.toLowerCase(chars[0]); return new String(chars); } 	1	0	1	0	0	0
@Override public List<StockOperation> getUserOperations(User user, PagingInfo paging) { return getUserOperations(user, null, null, null, paging); } 	1	0	1	1	1	0
"@Override public List<Writable> next() { Text record2 = (Text) super.next().iterator().next(); String line = record2.toString();   String[] tokens = line.trim().split(""\\s+""); Double response; try { response = Integer.valueOf(tokens[0]).doubleValue(); } catch (NumberFormatException e) { try { response = Double.valueOf(tokens[0]); classification = false; } catch (NumberFormatException ex) { System.err.println(ex); throw new NumberFormatException(""Unrecognized response variable value: "" + tokens[0]); } }   tokens = line.trim().split(""\\s+"");  List<Writable> record = new ArrayList<>(); int read = 0; for (int k = 1; k < tokens.length; k++) { String[] pair = tokens[k].split("":""); if (pair.length != 2) { throw new NumberFormatException(""Invalid data: "" + tokens[k]); }  int j = Integer.valueOf(pair[0]); if (!zeroBasedIndexing) j = j - 1;  /* TODO: throw an exception here. */ assert(j < 0);  while (j != read) { record.add(new DoubleWritable(0.0)); read++; } try { int x = Integer.valueOf(pair[1]); record.add(new IntWritable(x)); } catch (NumberFormatException e) { double x = Double.valueOf(pair[1]); record.add(new DoubleWritable(x)); } read++; } while (read < numFeatures) { record.add(new DoubleWritable(0.0)); read++; } if (numFeatures == 0) numFeatures = read;  /* TODO: throw an exception here. */ if (read > numFeatures) log.warn(""Found "" + read + "" features in record, expected "" + numFeatures);  if (classification && appendLabel || !classification) { record.add(new DoubleWritable(response)); }  return record; } "	0	0	1	1	0	0
"@SuppressWarnings(""unchecked"") private String generateSql(Map<IModel<OProperty>, IModel<?>> filteredValues) { Query query = new Query().from(className); Map<IModel<OProperty>, IModel<?>> fieldsForQuery = getFieldsForQuery(filteredValues); for (IModel<OProperty> propertyModel : fieldsForQuery.keySet()) { OProperty property = propertyModel.getObject(); switch (property.getType()) { case STRING: String expression = getStringExpression((String) fieldsForQuery.get(propertyModel).getObject()); query.where(projection(property.getName()).like(expression)); break; case EMBEDDED: case EMBEDDEDMAP: case EMBEDDEDLIST: break; case LINK: case LINKLIST: case LINKMAP: case LINKBAG: case LINKSET: break; case ANY: case BINARY: case TRANSIENT: case CUSTOM: break; case DATE: case DATETIME: String dateFormat = getDateFormat(property.getType()); SimpleDateFormat df = new SimpleDateFormat(dateFormat); Date date = (Date) fieldsForQuery.get(propertyModel).getObject(); query.where(projection(property.getName()).eq(df.format(date))); break; default: Object object = fieldsForQuery.get(propertyModel).getObject(); query.where(projection(property.getName()).eq(object)); } } return query.toString(); } "	0	1	1	0	0	0
@CallSuper public static void updateAnimations(final double delta) { if (removeAll) { animations.clear(); removeAll = false; toRemove.clear(); levels.clear(); return; } if (!toRemove.isEmpty()) { for (Animation ani : toRemove) { List<Animation> anis = animations.get(ani.z); anis.remove(ani); if (anis.isEmpty()) { levels.remove(ani.z); anis.remove(ani.z); } } toRemove.clear(); } for (int i : levels) { for (final Animation animation : animations.get(i)) { new Handler(Looper.getMainLooper()).post(new Runnable() { @Override public void run() { animation.update(delta); } }); } } } 	0	1	1	0	0	0
"public ArrayList<Announcement> getAnnouncements() { ArrayList<Announcement> announcements = new ArrayList<>(); try { if (databaseInfo.getMySQL().checkConnection()) { String announcementTableName = databaseInfo.getPrefix() + ""ANNOUNCEMENTS"";  Statement statement = databaseInfo.getConnection().createStatement(); String query = ""SELECT * FROM "" + announcementTableName + ""';""; ResultSet res = statement.executeQuery(query);  while (res.next()) { if (res.getString(""ANNOUNCEMENT_ID"") != null) { Announcement announcement = new Announcement(UUID.fromString(res.getString(""ANNOUNCEMENT_ID"")), res.getString(""GUILD_ID"")); announcement.setSubscriberRoleIdsFromString(res.getString(""SUBSCRIBERS_ROLE"")); announcement.setSubscriberUserIdsFromString(res.getString(""SUBSCRIBERS_USER"")); announcement.setAnnouncementChannelId(res.getString(""CHANNEL_ID"")); announcement.setAnnouncementType(AnnouncementType.valueOf(res.getString(""ANNOUNCEMENT_TYPE""))); announcement.setEventId(res.getString(""EVENT_ID"")); announcement.setHoursBefore(res.getInt(""HOURS_BEFORE"")); announcement.setMinutesBefore(res.getInt(""MINUTES_BEFORE"")); } } } } catch (SQLException e) { System.out.println(""Failed to get announcements from database! Error code: 00203""); EmailSender.getSender().sendExceptionEmail(e); e.printStackTrace(); } return announcements; } "	0	0	1	1	0	0
@UiThread @Override public void mount(RecyclerView view) { ThreadUtils.assertMainThread();  if (mMountedView == view) { return; }  if (mMountedView != null) { unmount(mMountedView); }  mMountedView = view;  final LayoutManager layoutManager = mLayoutInfo.getLayoutManager();  view.setLayoutManager(layoutManager); view.setAdapter(mInternalAdapter); view.addOnScrollListener(mRangeScrollListener);  mLayoutInfo.setComponentInfoCollection(this);  if (mCurrentFirstVisiblePosition != RecyclerView.NO_POSITION && mCurrentFirstVisiblePosition > 0) { if (layoutManager instanceof LinearLayoutManager) { ((LinearLayoutManager) layoutManager) .scrollToPositionWithOffset(mCurrentFirstVisiblePosition, mCurrentOffset); } else { view.scrollToPosition(mCurrentFirstVisiblePosition); } }  enableStickyHeader(mMountedView); } 	0	1	1	1	0	0
"public ActionForward addNews(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { return mapping.findForward(""/addNews""); } "	1	0	1	1	0	0
"public int exec(String sql, Object... params) { try { int[] types = new int[params.length]; for (int i = 0; i < params.length; i++) { Object o = params[i]; if (o == null) throw new IllegalArgumentException(""Do not use null values without specify its types.""); Class<?> clazz = params.getClass(); types[i] = default_sql_type(clazz); } return oper.execute(sql, params, types); } catch (SQLException e) { throw new RuntimeException(e); } } "	1	0	1	0	0	0
@Override public boolean matches(WebElement e) { String attrValue = e.getAttribute(attribute); return attrValue != null && attrValue.equals(attributeValu); } 	0	1	1	0	0	0
private void setAttributes() { if (mColor != 0) { mIcon.color(mColor); } if (mSize != -1) { mIcon.sizePx(mSize); } if (mSize != -1) { mIcon.paddingPx(mPadding); } if (mContourColor != 0) { mIcon.contourColor(mContourColor); } if (mContourWidth != -1) { mIcon.contourWidthPx(mContourWidth); } if (mBackgroundColor != 0) { mIcon.backgroundColor(mBackgroundColor); } if (mCornerRadius != -1) { mIcon.roundedCornersPx(mCornerRadius); } } 	0	0	1	1	0	0
public void reset(T object) { while (this.size() > 1) { super.pop(); } super.push(object); numPushes = 0; discarded = 0; } 	1	0	1	1	1	0
protected void runCellMatcher(ConditionalFormatting cf, ConditionalFormattingRule rule, int classNameIndex) {  for (CellRangeAddress cra : cf.getFormattingRanges()) {  for (int row = cra.getFirstRow(); row <= cra.getLastRow(); row++) { for (int col = cra.getFirstColumn(); col <= cra.getLastColumn(); col++) {  Cell cell = spreadsheet.getCell(row, col); if (matches(cell, rule)) { Set<Integer> list = cellToIndex.get(SpreadsheetUtil .toKey(cell)); if (list == null) { list = new HashSet<Integer>(); cellToIndex.put(SpreadsheetUtil.toKey(cell), list); } list.add(classNameIndex); } } } } } 	1	0	1	0	0	0
"private int handleExec(int fileAddr, int argCount, int argAddr) { if (argCount < 0) return -1; String filename = readVirtualMemoryString(fileAddr, MAXSTRLEN); if (filename == null) return -1;  String suffix = filename.substring(filename.length() - 4, filename.length()); if (suffix.equals("".coff"") == false) return -1;  String args[] = new String[argCount]; for (int i = 0; i < argCount; ++i) { byte arg[] = new byte[4]; int transferSize = readVirtualMemory(argAddr + i * 4, arg); if (transferSize != 4) return -1; int argAddress = Lib.bytesToInt(arg,0); args[i] = readVirtualMemoryString(argAddress, MAXSTRLEN); }  UserProcess childProcess = UserProcess.newUserProcess(); this.childProcesses.add(childProcess.pid); childProcess.ppid = this.pid;  boolean returnValue = childProcess.execute(filename, args); if (returnValue == true) { return childProcess.pid; } return -1; } "	1	0	1	1	1	0
"@SuppressWarnings(""Duplicates"") public boolean addComponent(Component c) { if(c instanceof Intersection) { Intersection i = (Intersection) c; Coordinate coord = i.getLocation(); grid[coord.getX()][coord.getY()] = i; return true; } else if(c instanceof Road) { // TODO there must be a better way of representing a road cell Road road = (Road) c; Coordinate start = road.getStartLocation(); Coordinate end = road.getEndLocation(); int startX = start.getX(); int startY = start.getY(); int endX = end.getX(); int endY = end.getY();  if(road.runsVertically()) { // road runs vertically if(startY <= endY) { // start coordinate is north of end coordinate for(int i = startY; i <= endY; i++) { grid[i][startX] = road; } return true; } else { // start coordinate is south of end coordinate for(int i = endY; i <= startY; i++) { grid[i][startX] = road; } return true; } } else { // road runs horizontally if(startX <= endX) { // start coordinate is west of end coordinate for(int i = startX; i <= endX; i++) { grid[startY][i] = road; } return true; } else { for(int i = endX; i <= startX; i++) { // start coordinate is east of end coordinate grid[startY][i] = road; } return true; } } } else return false; } "	1	1	1	1	0	0
@Test public void testShort() throws IOException { this.filter = new PinyinTransformTokenFilter(tokenizer, PinyinTransformTokenFilter.TYPE_ABBREVIATION); this.filter.reset(); int position = _innerTest(); assertTrue(position == 6); } 	0	1	1	1	1	0
public Page<Task> searchCurrentShift(int start, int length, String sortColumn, String sortDirection, String assignee) { PageRequest request = new PageRequest((start / length), length, Sort.Direction.fromString(sortDirection), sortColumn); return repo.findByStatusLessThanAndAssigneePersonalDataFullNameContainingIgnoreCase(2, assignee, request); } 	1	0	1	1	1	0
"public static String getNewDateAsFullString() { SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd HH-mm-ss""); String date = sdf.format(new Date()); return date; } "	0	0	1	1	0	0
@Override public void onCompassUpdated(long time, double magneticNorth, double trueNorth, double accuracy) { if (mLastCompassData == null) mLastCompassData = new LastCompassData();  mLastCompassData.update(getWindowManager().getDefaultDisplay().getRotation(), magneticNorth, trueNorth); mMapFragment.nativeCompassUpdated(mLastCompassData.magneticNorth, mLastCompassData.trueNorth, false);  mPlacePage.refreshAzimuth(mLastCompassData.north); mNavigationController.updateNorth(mLastCompassData.north); } 	0	1	1	0	0	0
"protected void refreshHeader() { if (mHeaderView == null) { return; } int firstVisiblePos = getFirstVisiblePosition(); int pos = firstVisiblePos + 1; int firstVisibleGroupPos = getPackedPositionGroup(getExpandableListPosition(firstVisiblePos)); int group = getPackedPositionGroup(getExpandableListPosition(pos)); if (DEBUG) { Log.w(TAG, ""refreshHeader firstVisibleGroupPos="" + firstVisibleGroupPos); }  if (group == firstVisibleGroupPos + 1) { View view = getChildAt(1); if (view == null) { Log.w(TAG, ""Warning : refreshHeader getChildAt(1)=null""); return; } if (view.getTop() <= mHeaderHeight) { int delta = mHeaderHeight - view.getTop(); mHeaderView.layout(0, -delta, mHeaderWidth, mHeaderHeight - delta); } else { //TODO : note it, when cause bug, remove it mHeaderView.layout(0, 0, mHeaderWidth, mHeaderHeight); } } else { mHeaderView.layout(0, 0, mHeaderWidth, mHeaderHeight); }  if (mHeaderUpdateListener != null) { mHeaderUpdateListener.updatePinnedHeader(mHeaderView, firstVisibleGroupPos); } } "	1	1	1	1	0	0
"public void updateEntity(EntityReference ref, Object entity, Map<String, Object> params) { if (logger.isDebugEnabled()) logger.debug(""updateMeeting"");  BBBMeeting newMeeting = (BBBMeeting) entity;  try { BBBMeeting meeting = meetingManager.getMeeting(ref.getId()); if (meeting == null) { throw new IllegalArgumentException(""Could not locate meeting to update""); } // update name String nameStr = (String) params.get(""name""); nameStr = StringEscapeUtils.escapeHtml(nameStr); if (nameStr != null) meeting.setName(nameStr);  // update description String welcomeMessageStr = (String) params.get(""props.welcomeMessage""); if (welcomeMessageStr != null) meeting.setWelcomeMessage(welcomeMessageStr);  // update recording flag String recordingStr = (String) params.get(""recording""); boolean recording = (recordingStr != null && (recordingStr.toLowerCase().equals(""on"") || recordingStr.toLowerCase().equals(""true""))); meeting.setRecording(Boolean.valueOf(recording));  // update recordingDuration String recordingDurationStr = (String) params.get(""recordingDuration""); if (recordingDurationStr != null) meeting.setRecordingDuration(Long.valueOf(recordingDurationStr)); else meeting.setRecordingDuration(0L);  // update voiceBridge only if the voiceBridge parameter is sent from // the view to the controller String voiceBridgeStr = (String) params.get(""voiceBridge""); if (voiceBridgeStr != null) { if (voiceBridgeStr.equals("""") || Integer.parseInt(voiceBridgeStr) == 0) { Integer voiceBridge = 70000 + new Random().nextInt(10000); meeting.setVoiceBridge(voiceBridge); } else { meeting.setVoiceBridge(Integer.valueOf(voiceBridgeStr)); } }  // update waitForModerator flag String waitForModeratorStr = (String) params.get(""waitForModerator""); boolean waitForModerator = (waitForModeratorStr != null && (waitForModeratorStr.toLowerCase().equals(""on"") || waitForModeratorStr.toLowerCase().equals(""true""))); meeting.setWaitForModerator(Boolean.valueOf(waitForModerator));  // update multipleSessionsAllowed flag String multipleSessionsAllowedStr = (String) params.get(""multipleSessionsAllowed""); boolean multipleSessionsAllowed = (multipleSessionsAllowedStr != null && (multipleSessionsAllowedStr.toLowerCase().equals(""on"") || multipleSessionsAllowedStr.toLowerCase().equals(""true""))); meeting.setMultipleSessionsAllowed(Boolean.valueOf(multipleSessionsAllowed));  // update default presentation if preuploadPresentation flag is true String presentationUrl = (String) params.get(""presentation""); if (presentationUrl != null && presentationUrl != """") { meeting.setPresentation(presentationUrl); } else { meeting.setPresentation(null); }  // update oneSessionPerGroup flag String oneSessionPerGroupStr = (String) params.get(""oneSessionPerGroup""); boolean oneSessionPerGroup = (oneSessionPerGroupStr != null && (oneSessionPerGroupStr.toLowerCase().equals(""on"") || oneSessionPerGroupStr.toLowerCase().equals(""true""))); meeting.setOneSessionPerGroup(Boolean.valueOf(oneSessionPerGroup));  // update dates if (params.get(""startDate"") != null) meeting.setStartDate(newMeeting.getStartDate()); else meeting.setStartDate(null); if (params.get(""endDate"") != null) meeting.setEndDate(newMeeting.getEndDate()); else meeting.setEndDate(null);  // update participants String meetingOwnerId = meeting.getOwnerId(); List<Participant> participants = extractParticipants(params, meetingOwnerId); meeting.setParticipants(participants);  // store meeting String addToCalendarStr = (String) params.get(""addToCalendar""); String notifyParticipantsStr = (String) params.get(""notifyParticipants""); String iCalAttachedStr = (String) params.get(""iCalAttached""); String iCalAlarmMinutesStr = (String) params.get(""iCalAlarmMinutes""); boolean addToCalendar = addToCalendarStr != null && (addToCalendarStr.toLowerCase().equals(""on"") || addToCalendarStr.toLowerCase().equals(""true"")); boolean notifyParticipants = notifyParticipantsStr != null && (notifyParticipantsStr.toLowerCase().equals(""on"") || notifyParticipantsStr.toLowerCase().equals(""true"")); boolean iCalAttached = iCalAttachedStr != null && (iCalAttachedStr.toLowerCase().equals(""on"") || iCalAttachedStr.toLowerCase().equals(""true"")); Long iCalAlarmMinutes = iCalAlarmMinutesStr != null? Long.valueOf(iCalAlarmMinutesStr): 0L;  try { if (!meetingManager.updateMeeting(meeting, notifyParticipants, addToCalendar, iCalAttached, iCalAlarmMinutes, false)) throw new EntityException(""Unable to update meeting in DB"", meeting.getReference(), 400); } catch (BBBException e) { throw new EntityException(e.getPrettyMessage(), meeting.getReference(), 400); } } catch (SecurityException se) { throw new EntityException(se.getMessage(), ref.getReference(), 400); } catch (Exception e) { throw new EntityException(e.getMessage(), ref.getReference(), 400); } } "	1	0	1	0	0	0
public List<ListItem> getListItemData(final String groupKey) { // Generate a list of items to render in the chat group list by extracting the items based // on the date header type ordering. List<ListItem> result = new ArrayList<>(); Map<String, Map<String, Message>> roomMap; for (ListItem.DateHeaderType dht : ListItem.DateHeaderType.values()) { List<String> groupList = GroupManager.instance.getGroupList(dht); if (groupList != null && groupList.size() > 0 && groupList.contains(groupKey)) { // Add the header item followed by all the room items in the given group. result.add(new ListItem(date, dht.resId)); roomMap = MessageManager.instance.messageMap.get(groupKey); for (String key : roomMap.keySet()) { Room room = RoomManager.instance.getRoomProfile(groupKey); Map<String, Integer> countMap = new HashMap<>(); int count = DBUtils.getUnseenExperienceCount(key, countMap); String text = DBUtils.getText(countMap); result.add(new ListItem(chatRoom, groupKey, room.key, room.name, count, text)); } } }  return result; } 	1	1	1	1	0	0
@Bindable public boolean isManage() { return mUser.isManage(); } 	1	0	1	1	1	0
"public void setUpInstance( String sheetName, String name, int classID ) throws SlickException { // Call Player constructor setPLayerClass(sheetName, name, classID);  this.attackImages = new Image[4]; this.attacksKnown = new int[4];  if( classID == 0 ) { setHunter(); } else if( classID == 1 ){ setWarrior(); } else if( classID == 2 ) { setWizard(); } else if( classID == 3 ) { setRouge(); }  // Set the color red = new Color( 225, 0, 0, .7f ); green = new Color( 0,128,0, .7f ); blue = new Color( 0,206,209 ); black = new Color( 0,0,0, .7f ); grey = new Color( 0, 0, 0, .3f );  // Set Player starting attributes setLevel( 1 ); calculateExpToLevelUp(); setHealth( 80 ); setStamina( MAX_STAMINA ); setExp( expToLevelUp - 10 );  this.moveSelected = 0;  // Set up player Inventory/ give default items inventory = new Inventory( ); inventory.setBaseAttack( this.BASE_ATTACK ); inventory.setBaseDefence( this.BASE_DEFENCE ); inventory.setClassID( classID );  this.playerMoves = new TiledMap( ""NewEra-Beta/res/map/itemSlots.tmx"" );  this.emptyHealth = new Image( ""NewEra-Beta/res/dash/EmptyBar.png"" ); this.emptyExpBar = new Image( ""NewEra-Beta/res/dash/EmptyBarLong.png"" );  this.healthPotion = new Image( ""NewEra-Beta/res/items/health.png"" ); this.staminaPotion = new Image( ""NewEra-Beta/res/items/stamina.png"" );  } "	1	0	1	1	1	0
public static boolean hasProperty(Property property) { return RESOLVED_PROPERTIES.containsKey(property.propertyName); } 	1	0	1	0	0	0
public static void setAlarm(Context context, Alarm alarm) { mAlarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE); Intent intent = new Intent(context, SchedulingService.class); intent.putExtra(Constants.OBJECT_ID, alarm.getId()); mPendingIntent = PendingIntent.getService(context, alarm.getId(), intent, PendingIntent.FLAG_UPDATE_CURRENT); // add time Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, alarm.getFormattedTimeHours()); calendar.set(Calendar.MINUTE, alarm.getFormattedTimeMinute()); calendar.set(Calendar.SECOND, Constants.SECONDS_DEFAULT); if (calendar.before(Calendar.getInstance())) calendar.roll(Calendar.DAY_OF_WEEK, Constants.DEFAULT_UP_DAY); // check alarm setAlarmByVersionAPI(alarm, calendar); enabledAutoBoot(context, PackageManager.COMPONENT_ENABLED_STATE_ENABLED); } 	0	1	1	1	1	0
"@Test public void testTraverseId() throws InterruptedException { List<SNode> startNodes = null; GRAPH_TRAVERSE_TYPE traverseType = null; String traverseId = ""traverseId""; getFixture().setGraph(SGraphTest.createGraph_Tree());  startNodes = getFixture().getGraph().getRoots(); traverseType = GRAPH_TRAVERSE_TYPE.TOP_DOWN_DEPTH_FIRST;  String[] nodeOrderWayThere = { ""node1"", ""node2"", ""node3"", ""node6"", ""node4"", ""node5"", ""node7"" }; String[] nodeOrderWayBack = { ""node3"", ""node6"", ""node2"", ""node5"", ""node4"", ""node7"", ""node1"" }; TraverserChecker checker = new TraverserChecker(); checker.nodeOrderWayThere = nodeOrderWayThere; checker.nodeOrderWayBack = nodeOrderWayBack; checker.start(startNodes, traverseType, traverseId); checker.start(startNodes, traverseType, traverseId); while (checker.runs != 2) { Thread.sleep(100); }  if ((checker.exception == null) || (!(checker.exception instanceof SaltTraverserException))) { checker.exception.printStackTrace(); fail(""A GraphTaverserException should have been thrown, because the same id was used twice with the same callback handler""); } } "	1	0	1	1	1	0
private String getVersionName() throws Exception { // 获取packagemanager的实例 return EMClient.getInstance().getVersion().getChatConfig().getVersion(); } 	1	0	1	0	0	0
"private void triggerOrderScheduler() { String schedulerPeriodStr = properties.getProperty(ConfigurationConstants.SCHEDULER_PERIOD_KEY); long schedulerPeriod = schedulerPeriodStr == null ? DEFAULT_SCHEDULER_PERIOD : Long.valueOf(schedulerPeriodStr); orderSchedulerTimer.scheduleAtFixedRate(new TimerTask() { @Override public void run() { try { checkAndSubmitOpenOrders(); } catch (Throwable e) { LOGGER.error(""Erro while checking and submitting open orders"", e); } } }, 0, schedulerPeriod); } "	0	0	1	1	0	0
"protected void triggerInstancesMonitor() { String instanceMonitoringPeriodStr = properties .getProperty(ConfigurationConstants.INSTANCE_MONITORING_PERIOD_KEY); final long instanceMonitoringPeriod = instanceMonitoringPeriodStr == null ? DEFAULT_INSTANCE_MONITORING_PERIOD : Long.valueOf(instanceMonitoringPeriodStr);  instanceMonitoringTimer.scheduleAtFixedRate(new TimerTask() { @Override public void run() { try { monitorInstancesForLocalOrders(); } catch (Throwable e) { LOGGER.error(""Erro while monitoring instances for local orders"", e); } } }, 0, instanceMonitoringPeriod); } "	0	0	1	1	0	0
"@Override public void deleteOldHarvests(int harvestId, int preserveRecent) throws DAOException {  // // Because ""TOP N"" cannot be used in subselect, I must get the highest started value from the last element in the resultset. //  // get harvest source id and maximum started time List<Object> selectParams = new ArrayList<Object>(); selectParams.add(harvestId);  // if the data is correct, there should not be many of these StringBuffer selectSql = new StringBuffer(); selectSql.append(""SELECT h.harvest_source_id, h.started ""); selectSql.append(""FROM harvest AS h ""); selectSql.append(""WHERE h.harvest_source_id = ( ""); selectSql.append(""    SELECT h.harvest_source_id ""); selectSql.append(""    FROM harvest AS h ""); selectSql.append(""    WHERE h.harvest_id = ? ) ""); selectSql.append(""ORDER BY h.started ASC"");  List<HarvestDTO> list = executeSQL(selectSql.toString(), selectParams, new MinimalHarvestDTOReader());  if(list != null) { StringBuffer deleteSql = new StringBuffer(); deleteSql.append(""DELETE FROM harvest AS h ""); deleteSql.append(""WHERE h.harvest_source_id = ? ""); deleteSql.append(""AND h.started < ?"");  while(list.size() > preserveRecent) { HarvestDTO dto = list.remove(0);  // delete older harvests with same harvest source List<Object> deleteParams = new ArrayList<Object>(); deleteParams.add(dto.getHarvestSourceId()); deleteParams.add(dto.getDate()); executeSQL(deleteSql.toString(), deleteParams); } } } "	0	0	1	1	0	0
public void deleteMarkers() throws CoreException { file.deleteMarkers(IRascalResources.ID_RASCAL_MARKER, false, IFile.DEPTH_ZERO); } 	1	0	1	1	1	0
"@Override public void flushInMemory(long flushOpSeqId) { MemStoreSegment active = getActive(); LOG.info(""Pushing active set into compaction pipeline, and initiating compaction.""); pushActiveToPipeline(active); Long now = System.currentTimeMillis(); timestampToWALSeqId.put(now,flushOpSeqId); try { // Speculative compaction execution, may be interrupted if flush is forced while // compaction is in progress compactor.startCompact(store); } catch (IOException e) { LOG.error(""Unable to run memstore compaction"", e); }  } "	1	0	1	0	0	0
"public void validate(List<String> notifications) { if (biomes.isEmpty()) { notifications.add(""No biomes for filter""); } else { for (String name : biomes) { if (Biome.exists(name)) { notifications.add(""invalid biome name: '"" + name + ""'""); } } } } "	1	1	1	1	0	0
public void populateAndKeepPictureURL(List<NameValuePair> oldPairs, List<NameValuePair> newPairs) { if (oldPairs == null) return; ArrayList<Picture> pictures = new ArrayList<Picture>(); for (int i = 0; i < oldPairs.size(); i++) { NameValuePair oldPair = oldPairs.get(i); NameValuePair newPair = newPairs.get(i); Picture picture = new Picture(newPair.getName(), null, oldPair.getValue()); pictures.add(picture); } populateImages(pictures); } 	1	1	1	0	1	0
public void Update() {  if(view==null) return;  if(eventDataList!= null) eventDataList.clear();  dbHelper helper=new dbHelper(getContext()); eventDataList=helper.GetUpcomingEvents(helper.getReadableDatabase()); helper.close();  if (eventDataList.size() == 0) { view.findViewById(R.id.NoUpcoming).setVisibility(View.VISIBLE); } else { view.findViewById(R.id.NoUpcoming).setVisibility(View.INVISIBLE);  ListView listView = (ListView) view.findViewById(R.id.upcomingList); listView.setAdapter(new eventItemAdapter(eventDataList, getContext(), true));  listView.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { int EventID = eventDataList.get(position).eventID; Intent intent = new Intent(getContext(), eventDetail.class); intent.putExtra(getString(R.string.EventID), EventID); intent.putExtra(getString(R.string.TabID), 0); startActivity(intent); } }); } } 	1	1	1	1	0	0
"@Override protected void onPostExecute(Object[] result) { super.onPostExecute(result);  Context context = (Context) result[0]; UserModel usr = (UserModel) result[1];  if (usr != null && usr.id != null & !usr.id.trim().equals("""")) { Intent i = new Intent(); i.setAction(Intent.ACTION_MAIN); i.setClass(context, UserTimeLineActivity.class); i.putExtra(""user"", usr); context.startActivity(i); } } "	1	0	1	1	1	0
"@Parameters({ ""start.server"" }) @Test(dependsOnMethods = { ""getDomainsAfterFileModifications"" }) public void deleteDomainAfterDirectoryDeleted(@Optional(""true"") boolean startServer) throws IllegalArgumentException, IOException { // skip test if server not started locally if (!startServer) { return; }  // delete on disk FlatFileDAOUtils.deleteDirectory(SAMPLE_DOMAIN_DIR, 2);  // sync API cache DomainResource domainRes = client.getDomainResource(SAMPLE_DOMAIN_ID); DomainProperties deletedDomainProps = domainRes.deleteDomain(); // make sure it's done try { // try to do something on the domain expected to be deleted -> // MUST fail domainRes.getDomain(); fail(""Error deleting domain with API deleteDomain() after deleting directory on disk: getDomain() still returns 200""); } catch (NotFoundException nfe) { // OK }  // try with externalId List<Link> links = client.getDomains(deletedDomainProps.getExternalId()).getLinks(); assertTrue( links.isEmpty(), ""Error deleting domain with API deleteDomain() after deleting directory on disk: getDomains(externalId) still returns link to domain"");  } "	1	0	1	1	1	0
public Iterable<Board> neighbors() { Set<Board> set = new HashSet<Board>(); int i = -1; for (i = 0; i < blocks.length; i++) { if(blocks[i] == 0) { break; } }  // not top row if (getRows(i) > 0) { int[] c = blocks.clone(); swap(c, i, above(i)); set.add(makeBoard(c)); }  // not bottom row if (getRows(i) < dimension() - 1) { int[] c = blocks.clone(); swap(c, i, below(i)); set.add(makeBoard(c)); }  // not left row if (getCols(i) > 0) { int[] c = blocks.clone(); swap(c, i, left(i)); set.add(makeBoard(c)); }  // not right row if (getCols(i) > 0) { int[] c = blocks.clone(); swap(c, i, right(i)); set.add(makeBoard(c)); }  return set; } 	1	0	1	0	0	0
@Override public void finishSubscribeToProject(long id, File[] files) { PluginManager pm = PluginManager.getInstance(); MetadataManager metaMgr = pm.getMetadataManager(); IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot(); Project p = pm.getDataManager().getSessionStorage().getProjectById(id); IProject eclipseProject = root.getProject(p.getName()); NullProgressMonitor progressMonitor = new NullProgressMonitor();  // create & open a new project, deleting the old one if it exists try { pm.putProjectInWarnList(p.getName(), ProjectDeleteNotification.class); if (eclipseProject.exists()) { eclipseProject.delete(true, true, progressMonitor); } pm.putProjectInWarnList(p.getName(), ProjectCreateRequest.class); eclipseProject.create(progressMonitor); eclipseProject.open(progressMonitor); } catch (CoreException e) { e.printStackTrace(); }  // create project metadata and write the metadata to disk ProjectMetadata pmeta = new ProjectMetadata(); pmeta.setName(p.getName()); pmeta.setProjectID(id); List<FileMetadata> fileMetadatas = new ArrayList<>(); for (File f : files) { fileMetadatas.add(new FileMetadata(f)); pullFileAndCreate(eclipseProject, p, f, progressMonitor, false); } pmeta.setFiles(fileMetadatas); metaMgr.putProjectMetadata(eclipseProject.getLocation().toString(), pmeta); metaMgr.writeProjectMetadataToFile(pmeta, eclipseProject.getLocation().toString(), CoreStringConstants.CONFIG_FILE_NAME); } 	1	1	1	1	0	0
"@SuppressWarnings(""unchecked"") private static void addAll(Map<String, Node> nodes, CubeDockerConfiguration config, String id) { Map<String, Object> content = (Map<String, Object>)config.getDockerContainersContent().get(id); if(content == null) { return; } Node parent = nodes.get(id); if(content.containsKey(""links"")) { List<String> links = (List<String>)content.get(""links""); for(String link : links) { String[] parsed = link.split("":""); String name = parsed[0];  if(config.getDockerContainersContent().containsKey(name)) { Node child = nodes.get(name); if(child == null) { child = Node.from(name); nodes.put(name, child); } // Only continue recursively if this was a new found child if(child.addAsChildOf(parent)) { addAll(nodes, config, name); } } } } } "	0	1	1	0	0	0
@Test public void selectNonexistentUser() throws ServiceException { long userId = -1l; User user = userService.viewUser(userId); assertNull(user); } 	1	0	1	1	1	0
@Override protected void updateItem(Task task, boolean empty) { super.updateItem(task, empty);  if (empty || task == null) { setGraphic(null); setText(null); } else { final UiView taskRow = new TaskUiView(task, getIndex() + 1); setGraphic(taskRow.getRoot()); taskRow.render(); } } 	1	0	1	0	0	0
public float getX() { return pos.x; } 	1	0	1	0	0	0
"@Override protected void onPostExecute(UserData userData) { Log.e(TAG, ""Finished""); userData.logSelectedData(""FROM UserDataTask.onPostExecute"", false); mCallback.userDataLoaded(userData); } "	0	0	1	1	0	0
private List<IPath> findDerivedResources(IContainer c) throws CoreException { List<IPath> derived = new ArrayList<IPath>(); IResource[] members = c.members(IContainer.INCLUDE_HIDDEN); for (IResource r : members) { if (r.isDerived()) derived.add(r.getLocation()); else if (r instanceof IContainer) derived.addAll(findDerivedResources((IContainer) r)); } return derived; } 	1	0	1	0	0	0
@Model protected void loadBullet(Bullet bullet) throws IllegalArgumentException{ if(bullet.getShip()==this){ loadedBullets.add(bullet); bullet.setLoadedOnShip(true); } else throw new IllegalArgumentException(); } 	1	0	1	1	1	0
"private void offlineUpdate(WhitesourceService service, String orgToken, String product, String productVersion, Collection<AgentProjectInfo> projects) { logger.info(""Generating offline update request"");  boolean zip = getBooleanProperty(OFFLINE_ZIP_PROPERTY_KEY, false); boolean prettyJson = getBooleanProperty(OFFLINE_PRETTY_JSON_KEY, false);  // generate offline request UpdateInventoryRequest updateRequest = service.offlineUpdate(orgToken, product, productVersion, projects); try { OfflineUpdateRequest offlineUpdateRequest = new OfflineUpdateRequest(updateRequest); File outputDir = new File("".""); File file = offlineUpdateRequest.generate(outputDir, zip, prettyJson); logger.info(""Offline request generated successfully at {}"", file.getPath()); } catch (IOException e) { logger.error(""Error generating offline update request: "" + e.getMessage(), e); } finally { if (service != null) { service.shutdown(); } } } "	0	0	1	1	0	0
"public boolean unfollowTag(TagDTO tag) { log.debug(""Removing followed tag : {}"", tag); User currentUser = userRepository.findOneByEmail(userDetailsService.getUserEmail()).get(); boolean tagAlreadyFollowed = false; for (String alreadyFollowingTest : userTagRepository.findTags(currentUser.getEmail())) { if (alreadyFollowingTest.equals(tag.getName())) { tagAlreadyFollowed = true; } } if (tagAlreadyFollowed) { String domain = DomainUtil.getDomainFromEmail(currentUser.getEmail()); userTagRepository.removeTag(currentUser.getUsername(), tag.getName()); tagFollowerRepository.removeFollower(domain, tag.getName(), currentUser.getEmail()); log.debug(""User "" + currentUser.getUsername() + "" has stopped following tag "" + tag);  return true; } else { return false; } } "	1	0	1	1	1	0
"@Override public void drawPathToSpot(List<LatLng> path, LatLong spotLocation) { // Check that current fragment is instance of DriverHomeFragment try { ( (DriverHomeFragment) mFragment).addPath(path, spotLocation); } catch (ClassCastException e) { Log.d(""DriverActivity"", ""Invalid Fragment""); } } "	0	0	1	1	0	0
@Override public List<BlockLocation> getBlocksForBounds(CoordinateBounds bounds, long time) {  long timeFrom = time - _runningLateWindow * 1000; long timeTo = time + _runningEarlyWindow * 1000;  List<BlockInstance> instances = _blockGeospatialService.getActiveScheduledBlocksPassingThroughBounds( bounds, timeFrom, timeTo);  List<BlockLocation> locations = getAsLocations(instances, time); List<BlockLocation> inRange = new ArrayList<BlockLocation>(); for (BlockLocation location : locations) { CoordinatePoint p = location.getLocation(); if (bounds.contains(p)) inRange.add(location); }  return inRange; } 	1	1	1	1	0	0
@Override public void restoreModels(ModelMap models) { models.get(LabelAndFieldHandler.class).install(); models.get(ComboBoxRendererHandler.class).install(); models.get(ComboBoxModelHandler.class).install();  models.get(InfoPaneHandler.class).install(); models.get(LanguageTableModel.class).install(languageTable); models.get(StatTableModel.class).install(); models.get(ClassLevelTableModel.class).install(); models.get(TodoListHandler.class).install(); models.get(GenerateRollsAction.class).install(); models.get(RollMethodAction.class).install(); models.get(HPHandler.class).install();  random.setAction(models.get(RandomNameAction.class)); generateRollsButton.setAction(models.get(GenerateRollsAction.class)); rollMethodButton.setAction(models.get(RollMethodAction.class)); createMonsterButton.setAction(models.get(CreateMonsterAction.class)); AddLevelsAction addLevelsAction = models.get(AddLevelsAction.class); addLevelsButton.setAction(addLevelsAction); addLevelsField.setAction(addLevelsAction); RemoveLevelsAction removeLevelsAction = models.get(RemoveLevelsAction.class); removeLevelsButton.setAction(removeLevelsAction); removeLevelsField.setAction(removeLevelsAction); ExpAddAction expAddAction = models.get(ExpAddAction.class); expaddButton.setAction(expAddAction); expmodField.setAction(expAddAction); expsubtractButton.setAction(models.get(ExpSubtractAction.class)); addLevelsAction.install();  resetBasicsPanel(); } 	0	1	1	1	1	0
private void initScanCard() { if (midtransSDK.getExternalScanner() != null) { // Set background color for scan button if (midtransSDK.getColorTheme() != null && midtransSDK.getColorTheme().getPrimaryDarkColor() != 0) { scanCardBtn.setTextColor(midtransSDK.getColorTheme().getPrimaryDarkColor()); } scanCardBtn.setVisibility(View.VISIBLE); scanCardBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { // Start scanning midtransSDK.getExternalScanner().startScan(getActivity(), SCAN_REQUEST_CODE); } }); } else { scanCardBtn.setVisibility(View.GONE); } } 	1	0	1	1	1	0
public void handleEvent(SessionLoadedEvent event) { loadSessionData(event, directory); } 	1	0	1	0	0	0
private int getPhoneTypeFromProperty(int phoneId) { String type = getTelephonyProperty(phoneId, TelephonyProperties.CURRENT_ACTIVE_PHONE, null); if (type == null || type.isEmpty()) { return getPhoneTypeFromNetworkType(phoneId); } return Integer.parseInt(type); } 	0	1	1	1	1	0
"private int getPhoneTypeFromNetworkType(int phoneId) { // When the system property CURRENT_ACTIVE_PHONE, has not been set, // use the system property for default network type. // This is a fail safe, and can only happen at first boot. String mode = getTelephonyProperty(phoneId, ""ro.telephony.default_network"", null); if (mode != null && !mode.isEmpty()) { return TelephonyManager.getPhoneType(Integer.parseInt(mode)); } return TelephonyManager.PHONE_TYPE_NONE; } "	1	1	1	0	1	0
public void processQuery(String query) { if (search_instructions.getVisibility() == View.VISIBLE && (queryEmptiable || !query.isEmpty())) { search_instructions.setVisibility(View.GONE); if(loadingPanel != null) { loadingPanel.setVisibility(View.VISIBLE); } } } 	1	0	1	0	0	0
public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { checkCorrectness(method);  try { if (method.equals(PREPARED_STATEMENT_CLOSE)) { handleStatementClose(statement, proxy); return Void.TYPE; } else if (method.equals(PREPARED_STATEMENT_GET_CONNECTION)) { return associatedConnection; } else if (method.equals(PREPARED_STATEMENT_SET_CONNECTION)) { this.associatedConnection = (Connection)args[0]; return Void.TYPE; } else if (method.equals(PREPARED_STATEMENT_GET_ORIGINAL)) { return preparedStatement; } else if (method.equals(PREPARED_STATEMENT_FORCE_CLOSE)) { preparedStatement.close(); return Void.TYPE; } else return method.invoke(preparedStatement, args); } catch(InvocationTargetException ex) { throw ex.getCause(); } } 	0	0	1	1	0	0
"@Test public void login() throws Exception { UserController uc = new UserController(); LoginController lc = new LoginController(); User user;  ConfirmationMessage cm = uc.addUser(-1, -1, -1, USERNAME, PASSWORD, EMAIL, CITY, """");  Assert.assertEquals(StatusType.SUCCES, cm.getStatus());  user = (User) cm.getReturnObject(); Assert.assertEquals(USERNAME, user.getUsername()); Assert.assertEquals(EMAIL, user.getEmail()); Assert.assertEquals(CITY, user.getCity());  String token = lc.login(USERNAME, PASSWORD);  Assert.assertEquals(true, token.length() > 5);  user = uc.getUser(token); Assert.assertEquals(USERNAME, user.getUsername()); Assert.assertEquals(EMAIL, user.getEmail()); Assert.assertEquals(CITY, user.getCity());  uc.deleteUser(user.getToken(), user.getId());  token = lc.login(USERNAME, PASSWORD); Assert.assertEquals(null, token); } "	0	1	1	1	0	0
@Before public void setUp() { initMocks(this); treeRegistry = new TAMATreeRegistry(null, null, null, null, null, null, null); callFlowController = new TAMACallFlowController(treeRegistry, pillReminderService, voiceOutboxService, allPatients, contextFactory); ivrContext = new TAMAIVRContextForTest(); Patient patient = new Patient(); patientPreferences = new PatientPreferences(); patient.setPatientPreferences(patientPreferences); ivrContext.pillRegimenSnapshot(pillRegimenSnapshot).patient(patient).callState(CallState.STARTED); when(contextFactory.create(kooKooIVRContext)).thenReturn(ivrContext); } 	1	1	1	1	0	0
public static void warn(Throwable aProblem, String param) { warn(null, problem2String(param, aProblem)); } 	1	0	1	1	0	0
"@Override public void init() { super.init();  final ServletContext context = (ServletContext)getOption(ServletContext.class.getName()); if (context == null) { throw new IllegalArgumentException(""Missing ServletContext""); }  String cometdURLMapping = (String)getOption(COMETD_URL_MAPPING_OPTION); if (cometdURLMapping == null) { throw new IllegalArgumentException(""Missing '"" + COMETD_URL_MAPPING_OPTION + ""' parameter""); }  NativeWebSocketConfiguration wsConfig = (NativeWebSocketConfiguration)context.getAttribute(NativeWebSocketConfiguration.class.getName()); if (wsConfig == null) { throw new IllegalArgumentException(""Missing WebSocketConfiguration""); }  WebSocketPolicy policy = wsConfig.getFactory().getPolicy(); int bufferSize = getOption(BUFFER_SIZE_OPTION, policy.getInputBufferSize()); policy.setInputBufferSize(bufferSize); int maxMessageSize = getOption(MAX_MESSAGE_SIZE_OPTION, policy.getMaxTextMessageSize()); policy.setMaxTextMessageSize(maxMessageSize); long idleTimeout = getOption(IDLE_TIMEOUT_OPTION, policy.getIdleTimeout()); policy.setIdleTimeout((int)idleTimeout);  for (String mapping : normalizeURLMapping(cometdURLMapping)) { wsConfig.addMapping(new ServletPathSpec(mapping), new WebSocketCreator() { @Override public Object createWebSocket(ServletUpgradeRequest request, ServletUpgradeResponse response) { String origin = request.getHeader(""Origin""); if (origin == null) { origin = request.getHeader(""Sec-WebSocket-Origin""); } if (checkOrigin(request, origin)) { List<ExtensionConfig> negotiated = new ArrayList<>(); for (ExtensionConfig extensionConfig : request.getExtensions()) { String name = extensionConfig.getName(); boolean option = getOption(ENABLE_EXTENSION_PREFIX_OPTION + name, true); if (option) { negotiated.add(extensionConfig); } } response.setExtensions(negotiated);  modifyUpgrade(request, response);  List<String> allowedTransports = getBayeux().getAllowedTransports(); if (allowedTransports.contains(getName())) { WebSocketContext handshake = new WebSocketContext(context, request); return new WebSocketScheduler(handshake); } else { if (_logger.isDebugEnabled()) { _logger.debug(""Transport not those allowed: {}"", allowedTransports); } } } else { if (_logger.isDebugEnabled()) { _logger.debug(""Origin check failed for origin {}"", origin); } } return null; } }); } } "	0	1	1	1	0	0
"public synchronized List<Period> getSupportedPeriods() { if (supportedPeriods == null) { String[] types = getProperty(""balboa.summaries"").split("","");  supportedPeriods = new ArrayList<Period>(types.length); for (String t : types) { supportedPeriods.add(Period.valueOf(t.toUpperCase())); } }  return supportedPeriods; } "	1	0	1	0	0	0
@Override public boolean equals(Object obj) { if (!(obj instanceof Region)) { return false; } else if (obj == this) { return true; } else { Region rhs = (Region) obj; return name.equalsIgnoreCase(rhs.name); } } 	1	1	1	1	0	0
@Override public int hashCode() { return name.hashCode(); } 	1	0	1	1	0	0
private boolean statCacheExists() { return statCache == null; } 	1	0	1	1	0	0
"@Override public void layout(ITracer trace, PageWriter writer) throws IOException, LayoutException { Iterator<HintType> hints = types.iterator(); while (hints.hasNext()) { HintType whatHint = hints.next(); switch (whatHint) { case FLOATBREAK: PageCursor cursor = writer.cursor(); Page current = writer.current(); Element lowest = null; int dfx = 0; for (Element elem : current.elements) { int dux = elem.bounds().y + elem.bounds().height; if (dux > dfx) { dfx = dux; lowest = elem; } } if (!lowest.bounds().floating()) return; if (lowest.bounds().x == 0) cursor.left(lowest.bounds().x + lowest.bounds().width); cursor.top(dfx);  break; case PAGEBREAK: writer.next(); break; default: throw new LayoutException(""Unknown compiler hint: "" + ((whatHint == null) ? ""<null>"" : whatHint.getClass().getName())); } } } "	0	1	1	1	0	0
private boolean shouldSaveLastActiveFragment(){ return getSharedPreferencesHelper().get(SettingsFragmentPresenter.REMEMBER_LAST_ACTIVE_CATEGORY_PREFERENCE_KEY, true); } 	1	0	1	1	0	0
public static void addBoundsListener(final Stage stage, final Class<?> prefNode) { addBoundsListener(stage, prefNode.getName().replace('.', '/'), DEFAULT_KEY); } 	0	0	1	1	0	0
public static Response getSimpleTextResponse(HttpCode code, String text) { Response r = Response.status(code.getCode()).entity(text).build(); return addResponseHeaders(r); } 	1	0	1	0	0	0
"private void drawText(Graphics g, int height) { int health = 0; int attack = 0; int defense = 0; int armor = 0; int upkeep = 0; Font old = g.getFont(); //System.out.println(game.getCurrentType()); g.setFont(detailsFont); g.drawString(""unit Details"", 10, height - 65); g.drawString(""Type: "", 30, height - 35); g.drawString(""Health: "", 30, height - 10); g.drawString(""Attack: "", 430, height - 35); g.drawString(""Defense: "", 430, height - 10); g.drawString(""Armor: "", 830, height - 35); g.drawString(""Upkeep: "", 830, height - 10); if (game.getSelectedUnit() != -1) { if (game.getCurrentType() == UnitEnum.EXPLORER) { g.drawString(""Explorer"", 130, height - 35); } if (game.getCurrentType() == UnitEnum.COLONIST) { g.drawString(""Colonist"", 130, height - 35); } if (game.getCurrentType() == UnitEnum.MELEE) { g.drawString(""Melee"", 130, height - 35); } if (game.getCurrentType() == UnitEnum.RANGED) { g.drawString(""Ranged"", 130, height - 35); } g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getHealth() + """", 130, height - 10); g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getAttackDamage() + """", 530, height - 35); g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getDefenseDamage() + """", 530, height - 10); g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getArmor() + """", 930, height - 35); g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getUpkeep() + """", 930, height - 10); } g.setFont(old); } "	0	1	1	1	0	0
@Override public void mouseWheelMoved(int newValue) { if (Options.isMouseWheelDisabled() || Options.isMouseDisabled()) return;  UI.changeVolume((newValue < 0) ? -1 : 1); } 	1	0	1	0	0	0
private void appendDate() { write(calendar.get(DAY_OF_MONTH)); write('-'); write(calendar.get(MONTH)); write('-'); write(calendar.get(YEAR)); } 	1	1	1	1	0	0
"public static State sampleTransitionFromEnumeratedDistribution(State previousState, GroundedAction action){  if(!(action.action instanceof FullActionModel)){ throw new RuntimeException(""Cannot sample a transition from the enumerated transition distribution, because the input action does not implement FullActionModel.""); }  List<TransitionProbability> tps = action.getTransitions(previousState); double roll = RandomFactory.getMapped(0).nextDouble(); double sum = 0.; for(TransitionProbability tp : tps){ sum += tp.p; if(roll < tp.p){ return tp.s; } }  throw new RuntimeException(""Cannot sample a transition because the transition probabilities did not sum to 1; they summed to "" + sum);  } "	1	1	1	0	1	0
@Override public void processData(String id, IdentifiableMessage<String, UnitConfig, UnitConfig.Builder> entry, ProtoBufMessageMap<String, UnitConfig, UnitConfig.Builder> entryMap, ProtoBufRegistry<String, UnitConfig, UnitConfig.Builder> registry) throws CouldNotPerformException, EntryModification {  final UnitConfig.Builder unitConfig = entry.getMessage().toBuilder();  // filter if config does not contain placement or shape if (!unitConfig.hasPlacementConfig() || !unitConfig.getPlacementConfig().hasShape() || unitConfig.getPlacementConfig().getShape().getFloorList().isEmpty() || !unitConfig.getPlacementConfig().getShape().getCeilingList().isEmpty()) { return; }  // Check whether the location registry data is available. Should be the case. try { if(!CachedLocationRegistryRemote.getRegistry().isDataAvailable()) return; } catch (NotAvailableException ex) { return; } catch (InterruptedException ex) { Thread.currentThread().interrupt(); throw new FatalImplementationErrorException(this, ex); }  Transform3D unitTransformation; try { unitTransformation = CachedLocationRegistryRemote.getRegistry().getUnitTransformation(entry.getMessage()).get().getTransform(); } catch (InterruptedException ex) { Thread.currentThread().interrupt(); throw new FatalImplementationErrorException(this, ex); } catch (NotAvailableException | ExecutionException ex) { return; }  final Shape shape = unitConfig.getPlacementConfig().getShape(); Shape newShape = updateCeilingAndLinks(shape, unitTransformation); if(!shape.equals(newShape)) { unitConfig.getPlacementConfigBuilder().setShape(shape); throw new EntryModification(entry.setMessage(unitConfig), this); } } 	1	1	1	0	1	0
"@Override public void loop() { telemetry.addData(""Gyro Value"", gyroSensor.getHeading()); switch (state) { case 0: resetEncoders(); state++; break; case 1: useEncoders(); double count = calculateEncoderCountFromDistance(109); setDrivePower(0.3,0.3); if(haveEncodersReached(count,count)){ setDrivePower(0.0f,0.0f); resetEncoders(); state++; } break; case 2: if(haveDriverEncodersReset()){ state++; } break; case 3: setDrivePowerNoEnc(-0.08f,+0.08f); if(hasGyroReachedValue(90,MARGIN)){ setDrivePower(0.0f,0.0f); state++; } break; case 4: useEncoders(); setDrivePower(0.3,0.3); count = calculateEncoderCountFromDistance(79); if(haveEncodersReached(count,count)){ setDrivePower(0.0f,0.0f); resetEncoders(); state++; } break; case 5: if(haveDriverEncodersReset()){ state++; } break; case 6: } } "	0	0	1	1	0	0
public static Policies load(File rootPath, final Set<Attribute> forcedContext)  { return new Policies(PoliciesCache.fromDir(rootPath)); } 	1	0	1	1	0	0
"private void indexIndividuals(BatchInserter inserter, OntologyLoader loader, Map<String, Long> nodeMap, Map<String, Long> mergedNodeMap, Map<String, Long> classNodeMap) { getLog().debug(""Creating Neo4j index for "" + loader.getAllIndividualIRIs().size() + "" individuals"");  for (IRI individualIri : loader.getAllIndividualIRIs()) {  Long node = getOrCreateNode(inserter, nodeMap,loader, individualIri, instanceLabel, _instanceLabel,nodeOntologyLabel); Long mergedNode = getOrCreateMergedNode(inserter, mergedNodeMap, loader, individualIri, mergedClassLabel);  // add refers link inserter.createRelationship( node, mergedNode, refersTo, null);  // add parent nodes if (!loader.getDirectTypes().containsKey(individualIri)) { for (IRI parent : loader.getDirectTypes().get(individualIri)) { Long parentNode =  getOrCreateNode(inserter, classNodeMap,loader, parent, nodeLabel,nodeOntologyLabel,  _nodeLabel); // create local relationship inserter.createRelationship(node, parentNode, typeOf, rdfTypeProperties); } } else { Long defaultType = getOrCreateNode(inserter, nodeMap,loader, IRI.create(""http://www.w3.org/2002/07/owl#Thing""),  nodeLabel,nodeOntologyLabel,  _nodeLabel, rootLabel); inserter.createRelationship( node, defaultType, typeOf, rdfTypeProperties); } } } "	1	0	1	1	0	0
"@SuppressWarnings({ ""deprecation"" }) private void loot(CommandSender sender, String[] args, Koth koth){ Player player = (Player)sender; if(args.length > 0){ if(args[0].equalsIgnoreCase(""setpos"")){ Block block = player.getTargetBlock((HashSet<Byte>)null, 8);  if(block == null){ throw new CommandMessageException(Lang.COMMAND_EDITOR_LOOT_SETNOBLOCK); } koth.setLootPos(block.getLocation()); getPlugin().getKothHandler().saveKoths(); throw new CommandMessageException(Lang.COMMAND_EDITOR_LOOT_POSITION_SET); } else if(args[0].equalsIgnoreCase(""link"")){ if(args.length < 2){ throw new CommandMessageException(Lang.COMMAND_GLOBAL_USAGE[0]+""/koth edit <koth> loot link <loot>""); } koth.setLoot(args[1]); getPlugin().getKothHandler().saveKoths(); throw new CommandMessageException(Lang.COMMAND_EDITOR_LOOT_LINK); } else if(args[0].equalsIgnoreCase(""second"")){ if(args.length < 2){ throw new CommandMessageException(Lang.COMMAND_GLOBAL_USAGE[0]+""/koth edit <koth> loot second (none|north|east|south|west)""); } try { koth.setSecondLootDirection(Koth.LootDirection.valueOf(args[1].toUpperCase())); } catch(Exception e){ throw new CommandMessageException(Lang.COMMAND_GLOBAL_USAGE[0]+""/koth edit <koth> loot second (none|north|east|south|west)""); }  getPlugin().getKothHandler().saveKoths(); throw new CommandMessageException(Lang.COMMAND_EDITOR_LOOT_SECOND_CHEST); } }  Utils.sendMessage(sender, true, new MessageBuilder(Lang.COMMAND_GLOBAL_HELP_TITLE).title(""loot commands"").build(), new MessageBuilder(Lang.COMMAND_GLOBAL_HELP_INFO).command(""/koth edit <koth> loot setpos"").commandInfo(""sets the position to the block looking at"").build(), new MessageBuilder(Lang.COMMAND_GLOBAL_HELP_INFO).command(""/koth edit <koth> loot link <loot>"").commandInfo(""links a loot chest"").build(), new MessageBuilder(Lang.COMMAND_GLOBAL_HELP_INFO).command(""/koth edit <koth> loot second (none|north|east|south|west)"").commandInfo(""set where second chest will spawn"").build() ); } "	1	0	1	0	0	0
"private List<GraphPath> compactLegsByReversedSearch(AStar aStar, RoutingRequest originalReq, RoutingRequest options, List<GraphPath> newPaths, double timeout, RemainingWeightHeuristic remainingWeightHeuristic){ List<GraphPath> reversedPaths = new ArrayList<>(); for(GraphPath newPath : newPaths){ State targetAcceptedState = options.arriveBy ? newPath.states.getLast().reverse() : newPath.states.getLast(); if(targetAcceptedState.stateData.getNumBooardings() < 2) { reversedPaths.add(newPath); continue; } final long arrDepTime = targetAcceptedState.getTimeSeconds(); LOG.debug(""Dep time: "" + new Date(newPath.getStartTime() * 1000)); LOG.debug(""Arr time: "" + new Date(newPath.getEndTime() * 1000));  // find first/last transit stop Vertex transitStop = null; long transitStopTime = arrDepTime; while (transitStop == null) { if(targetAcceptedState.backEdge instanceof TransitBoardAlight){ if(options.arriveBy){ transitStop = targetAcceptedState.backEdge.getFromVertex(); }else{ transitStop = targetAcceptedState.backEdge.getToVertex(); } transitStopTime = targetAcceptedState.getTimeSeconds(); } targetAcceptedState = targetAcceptedState.getBackState(); }  // find the path from transitStop to origin/destination Vertex fromVertex = options.arriveBy ? options.rctx.fromVertex : transitStop; Vertex toVertex = options.arriveBy ? transitStop : options.rctx.toVertex; RoutingRequest reversedTransitRequest = createReversedTransitRequest(originalReq, options, fromVertex, toVertex, arrDepTime, new EuclideanRemainingWeightHeuristic()); aStar.getShortestPathTree(reversedTransitRequest, timeout); List<GraphPath> pathsToTarget = aStar.getPathsToTarget(); if(pathsToTarget.isEmpty()){ reversedPaths.add(newPath); continue; } GraphPath walkPath = pathsToTarget.get(0);  // do the reversed search to/from transitStop Vertex fromTransVertex = options.arriveBy ? transitStop : options.rctx.fromVertex; Vertex toTransVertex = options.arriveBy ? options.rctx.toVertex: transitStop; RoutingRequest reversedMainRequest = createReversedMainRequest(originalReq, options, fromTransVertex, toTransVertex, transitStopTime, remainingWeightHeuristic); aStar.getShortestPathTree(reversedMainRequest, timeout);  List<GraphPath> newRevPaths = aStar.getPathsToTarget(); if (newRevPaths.isEmpty()) { reversedPaths.add(newPath); }else{ List<GraphPath> joinedPaths = new ArrayList<>(); for(GraphPath newRevPath : newRevPaths){ LOG.debug(""REV Dep time: "" + new Date(newRevPath.getStartTime() * 1000)); LOG.debug(""REV Arr time: "" + new Date(newRevPath.getEndTime() * 1000)); List<GraphPath> concatenatedPaths = Arrays.asList(newRevPath, walkPath); if(options.arriveBy){ Collections.reverse(concatenatedPaths); } GraphPath joinedPath = joinPaths(concatenatedPaths);  if((!options.arriveBy && joinedPath.states.getFirst().getTimeInMillis() > options.dateTime * 1000) || (options.arriveBy && joinedPath.states.getLast().getTimeInMillis() < options.dateTime * 1000)){ joinedPaths.add(joinedPath); if(newPaths.size() > 1){ for (AgencyAndId tripId : joinedPath.getTrips()) { options.banTrip(tripId); } } } } reversedPaths.addAll(joinedPaths); } } return reversedPaths.isEmpty() ? newPaths : reversedPaths; } "	1	0	1	0	0	0
private void deleteDir(File dir) {  String[] entries = dir.list(); if (entries.length != 0) { for (String s : entries) { File currentFile = new File(dir.getPath(), s); if (currentFile.isDirectory()) { deleteDir(currentFile); } currentFile.delete(); } } dir.delete(); } 	1	1	1	1	0	0
"@Override public void onChildRemoved(DataSnapshot dataSnapshot) { Log.d(TAG, String.format(Locale.US, LOG_FORMAT, ""onChildRemoved"", dataSnapshot, null)); process(dataSnapshot, false, REMOVED); } "	1	0	1	0	0	0
"public static GLCapabilities createCapabilities(boolean forwardCompatible) { GLCapabilities caps = null;  try { // We don't have a current ContextCapabilities when this method is called // so we have to use the native bindings directly. long GetError = functionProvider.getFunctionAddress(""glGetError""); long GetString = functionProvider.getFunctionAddress(""glGetString""); long GetIntegerv = functionProvider.getFunctionAddress(""glGetIntegerv"");  if ( GetError == NULL || GetString == NULL || GetIntegerv == NULL ) throw new IllegalStateException(""Core OpenGL functions could not be found. Make sure that the OpenGL library has been loaded correctly."");  int errorCode = callI(GetError); if ( errorCode != GL_NO_ERROR ) apiLog(String.format(""An OpenGL context was in an error state before the creation of its capabilities instance. Error: 0x%X"" + errorCode));  int majorVersion; int minorVersion;  try ( MemoryStack stack = stackPush() ) { IntBuffer version = stack.ints(0);  // Try the 3.0+ version query first callPV(GetIntegerv, GL_MAJOR_VERSION, memAddress(version)); if ( callI(GetError) == GL_NO_ERROR && 3 <= (majorVersion = version.get(0)) ) { // We're on an 3.0+ context. callPV(GetIntegerv, GL_MINOR_VERSION, memAddress(version)); minorVersion = version.get(0); } else { // Fallback to the string query. long versionString = callP(GetString, GL_VERSION); if ( versionString == NULL || callI(GetError) != GL_NO_ERROR ) throw new IllegalStateException(""There is no OpenGL context current in the current thread."");  APIVersion apiVersion = apiParseVersion(memUTF8(versionString));  majorVersion = apiVersion.major; minorVersion = apiVersion.minor; } }  if ( majorVersion < 1 || (majorVersion == 1 && minorVersion < 1) ) throw new IllegalStateException(""OpenGL 1.1 is required."");  int[] GL_VERSIONS = { 5, // OpenGL 1.1 to 1.5 1, // OpenGL 2.0 to 2.1 3, // OpenGL 3.0 to 3.3 5, // OpenGL 4.0 to 4.5 };  Set<String> supportedExtensions = new HashSet<>(512);  int maxMajor = min(majorVersion, GL_VERSIONS.length); if ( MAX_VERSION != null ) maxMajor = min(MAX_VERSION.major, maxMajor); for ( int M = 1; M <= maxMajor; M++ ) { int maxMinor = GL_VERSIONS[M - 1]; if ( M == majorVersion ) maxMinor = min(minorVersion, maxMinor); if ( MAX_VERSION != null && M == MAX_VERSION.major ) maxMinor = min(MAX_VERSION.minor, maxMinor);  for ( int m = M == 1 ? 1 : 0; m <= maxMinor; m++ ) supportedExtensions.add(String.format(""OpenGL%d%d"", M, m)); }  if ( majorVersion < 3 ) { // Parse EXTENSIONS string String extensionsString = memASCII(checkPointer(callP(GetString, GL_EXTENSIONS)));  StringTokenizer tokenizer = new StringTokenizer(extensionsString); while ( tokenizer.hasMoreTokens() ) supportedExtensions.add(tokenizer.nextToken()); } else { // Use indexed EXTENSIONS try ( MemoryStack stack = stackPush() ) { IntBuffer pi = stack.ints(0);  callPV(GetIntegerv, GL_NUM_EXTENSIONS, memAddress(pi)); int extensionCount = pi.get(0);  long GetStringi = apiGetFunctionAddress(functionProvider, ""glGetStringi""); for ( int i = 0; i < extensionCount; i++ ) supportedExtensions.add(memASCII(callP(GetStringi, GL_EXTENSIONS, i)));  // In real drivers, we may encounter the following weird scenarios: // - 3.1 context without GL_ARB_compatibility but with deprecated functionality exposed and working. // - Core or forward-compatible context with GL_ARB_compatibility exposed, but not working when used. // We ignore these and go by the spec.  // Force forwardCompatible to true if the context is a forward-compatible context. callPV(GetIntegerv, GL_CONTEXT_FLAGS, memAddress(pi)); if ( (pi.get(0) & GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT) != 0 ) forwardCompatible = true; else { // Force forwardCompatible to true if the context is a core profile context. if ( (3 < majorVersion || 1 <= minorVersion) ) { // OpenGL 3.1+ if ( 3 < majorVersion || 2 <= minorVersion ) { // OpenGL 3.2+ callPV(GetIntegerv, GL_CONTEXT_PROFILE_MASK, memAddress(pi)); if ( (pi.get(0) & GL_CONTEXT_CORE_PROFILE_BIT) != 0 ) forwardCompatible = true; } else forwardCompatible = !supportedExtensions.contains(""GL_ARB_compatibility""); } } } }  return caps = new GLCapabilities(getFunctionProvider(), supportedExtensions, forwardCompatible); } finally { setCapabilities(caps); } } "	0	0	1	1	0	0
@Override public boolean onBlockActivated(World world, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing side, float hitX, float hitY, float hitZ) { if (!state.getValue(ACTIVE)) { if (isBlockLocked(world, pos)) { world.playSound(null, pos, SoundEvents.BLOCK_LEVER_CLICK, SoundCategory.BLOCKS, 1.0F, 0.3F); } else { changeToActiveBlock(world, pos); } return true; } else { return false; } } 	1	0	1	1	0	0
"private HttpRequest getHttpRequest(String method, GenericUrl url, final byte[] data) throws IOException, InternalClientException { if (method == null || method.trim().equals("""")) { throw new InternalClientException(""Method should be populated""); } if (url == null) { throw new InternalClientException(""URL should be populated""); } // create a new request factory that will sign the code on execute() HttpRequestFactory requestFactory = this.transport.createRequestFactory(new HttpRequestInitializer() { @Override public void initialize(HttpRequest request) throws IOException { // wire up secrets for code signing RequestSigner signer = new RequestSigner(data); signer.setAccessKeys(accessKey, secretKey); request.setInterceptor(signer); } }); HttpRequest request = requestFactory.buildRequest(method, url, null); // Workaround for where user agent for google is appended after signing interceptor is called. request.setSuppressUserAgentSuffix(true); // Disable throwing exceptions on execute() request.setThrowExceptionOnExecuteError(false); // set our own user agent request.getHeaders().setUserAgent(this.userAgent); return request; } "	1	0	1	1	0	0
public void drawPlayersInvAndHotbar(EntityPlayer player, int x, int y) { drawPlayersInv(player, x, y); drawPlayersHotBar(player, x, y + 58); } 	1	1	1	1	0	0
"private void initializeWebSocketTransport(IMessaging messaging, Properties props) throws IOException { String webSocketPortProp = props.getProperty(Constants.WEB_SOCKET_PORT_PROPERTY_NAME); if (webSocketPortProp == null) { //Do nothing no WebSocket configured LOG.info(""WebSocket is disabled""); return; } int port = Integer.parseInt(webSocketPortProp);  final NettyMQTTHandler handler = new NettyMQTTHandler(); handler.setMessaging(messaging);  String host = props.getProperty(Constants.HOST_PROPERTY_NAME); initFactory(host, port, new PipelineInitializer() { @Override void init(ChannelPipeline pipeline) { pipeline.addLast(""httpEncoder"", new HttpResponseEncoder()); pipeline.addLast(""httpDecoder"", new HttpRequestDecoder()); pipeline.addLast(""aggregator"", new HttpObjectAggregator(65536)); pipeline.addLast(""webSocketHandler"", new WebSocketServerProtocolHandler(""/mqtt""/*""/mqtt""*/, ""mqttv3.1, mqttv3.1.1"")); //pipeline.addLast(""webSocketHandler"", new WebSocketServerProtocolHandler(null, ""mqtt"")); pipeline.addLast(""ws2bytebufDecoder"", new WebSocketFrameToByteBufDecoder()); pipeline.addLast(""bytebuf2wsEncoder"", new ByteBufToWebSocketFrameEncoder()); pipeline.addFirst(""idleStateHandler"", new IdleStateHandler(0, 0, Constants.DEFAULT_CONNECT_TIMEOUT)); pipeline.addAfter(""idleStateHandler"", ""idleEventHandler"", new MoquetteIdleTimoutHandler()); pipeline.addFirst(""bytemetrics"", new BytesMetricsHandler(m_bytesMetricsCollector)); pipeline.addLast(""decoder"", new MQTTDecoder()); pipeline.addLast(""encoder"", new MQTTEncoder()); pipeline.addLast(""metrics"", new MessageMetricsHandler(m_metricsCollector)); pipeline.addLast(""handler"", handler); } }); } "	0	0	1	1	0	0
"private void printSwitch() { StudyPlan newPlan = sel.switchMajor(this.from.getCourses(), ""MTDT"", ""autumn"", 2); System.out.println(newPlan); } "	0	0	1	1	0	0
"private boolean postObservation(Observation observation) throws AuthenticationException, CancelSyncException, SyncFailedException { if (observation.id != null) { // Update observation JSONArray response = request(API_HOST + ""/observations/"" + observation.id, ""put"", null, observationToJsonObject(observation, false), true, true, false);  if (response == null) { // Some sort of error if ((mLastStatusCode >= 400) && (mLastStatusCode < 500)) { // Observation doesn't exist anymore (deleted remotely, and due to network // issues we didn't get any notification of this) - so delete the observation // locally. getContentResolver().delete(Observation.CONTENT_URI, ""id = "" + observation.id, null); // Delete associated project-fields and photos int count1 = getContentResolver().delete(ObservationPhoto.CONTENT_URI, ""observation_id = "" + observation.id, null); int count2 = getContentResolver().delete(ProjectObservation.CONTENT_URI, ""observation_id = "" + observation.id, null); int count3 = getContentResolver().delete(ProjectFieldValue.CONTENT_URI, ""observation_id = "" + observation.id, null); return true; } }  boolean success = handleObservationResponse(observation, response); if (!success) { throw new SyncFailedException(); }  return true; }  // New observation  String inatNetwork = mApp.getInaturalistNetworkMember(); JSONObject observationParams = observationToJsonObject(observation, false);  boolean success = handleObservationResponse( observation, request(API_HOST + ""/observations"", ""post"", null, observationParams, true, true, false) );  if (!success) { throw new SyncFailedException(); }  return true; } "	1	0	1	1	0	0
"private void getModelList(String directory, ArrayList<String> fileList) { final String environmentPath = Environment.getExternalStorageDirectory().getPath(); String extensions = "".fbx .3des .dae .obj .ma .x3d""; File dir = new File(environmentPath + ""/"" + directory);  if (dir.exists() && dir.isDirectory()) { File list[] = dir.listFiles(); for (File f : list) { String fileName = f.getName(); String ext = ""."" + FileNameUtils.getExtension(fileName.toLowerCase()); if (f.isDirectory()) { getModelList(directory + ""/"" + fileName, fileList); } else if (extensions.contains(ext)) { fileList.add(directory + ""/"" + fileName); } } } } "	1	1	1	0	1	0
"@Before public void setUp() { cache = new AtomCache();  // Delete files which were cached in previous tests String[] uncacheIDs = new String[] { ""1cmw"", ""1hhb"",""4hhb"" };  List<LocalPDBDirectory> readers = new ArrayList<LocalPDBDirectory>(); readers.add(new MMCIFFileReader(cache.getPath()) ); readers.add(new PDBFileReader(cache.getCachePath()) ); for(LocalPDBDirectory reader : readers) { reader.setFetchBehavior(cache.getFetchBehavior()); reader.setObsoleteBehavior(cache.getObsoleteBehavior());  for(String pdbId : uncacheIDs) { reader.deleteStructure(pdbId); } } } "	1	1	1	1	0	0
public static boolean has (Inventory inventory, ItemStack itemStack, ItemStackComparer comparer, int qty) { return count(inventory, itemStack, comparer, qty) == qty; } 	1	0	1	1	0	0
@Override public void addMyPetPlayer(final MyPetPlayer player, final RepositoryCallback<Boolean> callback) { if (players.containsKey(player.getInternalUUID())) { players.put(player.getInternalUUID(), player); if (SAVE_ON_PLAYER_ADD) { saveData(true); } if (callback != null) { callback.setValue(true); callback.run(); } return; } if (callback != null) { callback.setValue(false); callback.run(); } } 	1	0	1	1	0	0
protected ColInfo[] getColumns() { return this.columns; } 	1	0	1	0	0	0
@Override public void onBlockClicked(World world, int x, int y, int z, EntityPlayer entityPlayer) { super.onBlockClicked(world, x, y, z, entityPlayer); if (!world.isRemote) { TileBarrel tileBarrel = (TileBarrel) world.getTileEntity(x, y, z);  if (tileBarrel != null && !tileBarrel.hasLid && entityPlayer.isSneaking()) { if (tileBarrel.itemContents != null) { for (int i = 0; i < tileBarrel.itemContents.length; i++) { ItemStack stack = tileBarrel.itemContents[i]; if (stack != null) { EntityItem entityItem = new EntityItem(world, x + 0.5, y + 1.5, z + 0.5, stack); entityItem.delayBeforeCanPickup = 0; world.spawnEntityInWorld(entityItem);  tileBarrel.itemContents[i] = null; tileBarrel.markForUpdate();  break; } } }  //                ItemStack held = entityPlayer.getHeldItem();  //                if (held != null) { //                    if (tileBarrel.itemContents != null && tileBarrel.itemContents.length > 0) { //                        for (int i=tileBarrel.itemContents.length - 1; i>=0; i--) { //                            ItemStack itemStack = tileBarrel.itemContents[i]; //                            if (itemStack != null) { //                                if (held.isItemEqual(itemStack) && (held.stackSize + itemStack.stackSize) <= held.getMaxStackSize()){ //                                    held.stackSize += itemStack.stackSize; //                                    ((EntityPlayerMP)entityPlayer).updateHeldItem(); // //                                    tileBarrel.itemContents[i] = null; //                                    tileBarrel.markForUpdate(); // //                                    break; //                                } //                            } //                        } //                    } //                } else { //                    if (tileBarrel.itemContents != null && tileBarrel.itemContents.length > 0) { //                        for (int i=tileBarrel.itemContents.length - 1; i>=0; i--) { //                            ItemStack itemStack = tileBarrel.itemContents[i]; //                            if (itemStack != null) { //                                entityPlayer.setCurrentItemOrArmor(0, itemStack.copy()); //                                ((EntityPlayerMP)entityPlayer).updateHeldItem(); // //                                tileBarrel.itemContents[i] = null; //                                tileBarrel.markForUpdate(); // //                                break; //                            } //                        } //                    } //                } } } } 	1	1	1	1	0	0
public int getRESTPort() { if (mFileConfig != null) { return mFileConfig.getPort(); } return TEST_REST_PORT; } 	1	1	1	1	0	0
@Override public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, net.minecraft.entity.player.EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ) { // A lit torch can be extinguished if activated (right clicked) with no item equipped. // An unlit torch can be set on fire by activating it on an already lit torch.  ItemStack equippedItem = playerIn.getCurrentEquippedItem(); if (equippedItem == null) { TileEntity torchEntity = worldIn.getTileEntity(pos); if (torchEntity != null && torchEntity instanceof TileEntityTorchLit) ((TileEntityTorchLit)worldIn.getTileEntity(pos)).extinguishTorch(true);  return true; } else if (equippedItem.getItem() == ResourceLibrary.TORCH_UNLIT.getItemInstance()) { // Remove the old (unlit) and place a new (lit) torch in our hands. // If we tried to light a torch stack; decrement the stack and move it to a new inventory slot  int torchStackSize = equippedItem.stackSize; playerIn.setCurrentItemOrArmor(0, new ItemStack(ResourceLibrary.TORCH_LIT.getItemInstance(), 1));  if (torchStackSize > 1) playerIn.inventory.addItemStackToInventory(new ItemStack(ResourceLibrary.TORCH_UNLIT.getItemInstance(), torchStackSize - 1));  return true;      // Let the calling function know that this block was successfully used, // and there is no need to spawn the activation item as a block. } // Never allow a torch to be placed like this... else return (Block.getBlockFromItem(equippedItem.getItem()) instanceof BlockTorch); } 	0	1	1	1	0	0
default String getSubArgumentsListAsString() { List<PerlSubArgument> subArguments = getSubArgumentsList();  if (isMethod() && !subArguments.isEmpty()) { subArguments = subArguments.size() > 1 ? subArguments.subList(1, subArguments.size() - 1) : Collections.emptyList(); }  return PerlSubUtil.getArgumentsListAsString(subArguments); } 	1	1	1	1	0	0
"@Override public void resetAdmin(String loggedInUserName, String username) throws Exception { User loggedInUser = getUser(loggedInUserName); User user = getUser(username); if (loggedInUser != null && !loggedInUser.isAdmin() && !loggedInUserName.equals(user.getCreator())) throw new Exception(""No permission to modify user""); user.setAdmin(true); user.save(); userCache.put(user.getUsername(), user); } "	1	0	1	1	0	0
private void resetMavenSettings() { if (originalUserSettings != null) System.setProperty(MavenContainer.ALT_USER_SETTINGS_XML_LOCATION, originalUserSettings); else System.clearProperty(MavenContainer.ALT_USER_SETTINGS_XML_LOCATION);  if (originalLocalRepository != null) System.setProperty(MavenContainer.ALT_LOCAL_REPOSITORY_LOCATION, originalLocalRepository); else System.clearProperty(MavenContainer.ALT_LOCAL_REPOSITORY_LOCATION);  if (originalLocalRepository != null) System.setProperty(MavenContainer.ALT_GLOBAL_SETTINGS_XML_LOCATION, originalGlobalSettings); else System.clearProperty(MavenContainer.ALT_GLOBAL_SETTINGS_XML_LOCATION); } 	0	0	1	1	0	0
"@Test public void testComputeSpecifiedArgPart1Arg() { System.out.println(""computeSpecifiedArgPart""); String[] keys = new String[] {""a""}; List<String> jsonArgs = Arrays.asList(""5""); List<String> paramNames = Arrays.asList(""\""a\""""); doReturn(""5"").when(instance).processArg(any(String[].class), anyString()); String result = instance.computeSpecifiedArgPart(keys, jsonArgs, paramNames); assertThat(result).isEqualTo(""[5]""); } "	1	0	1	1	0	0
public String mAA2(int i, String s, boolean b){ return i+s+b+this.mAA1(i, s,b); }; 	1	0	1	0	0	0
public Song update(Song updatableSong) { Long id = updatableSong.getId(); Song originalSongData = songsRepository.findById(id); if (updatableSong.getSongTitle() != null && updatableSong.getSongTitle().getId() == 0) { Title songTitle = new Title(updatableSong.getSongTitle()); songTitle.setCategory(categoryRepository.getSongTitleCategory()); titleRepository.create(updatableSong.getSongTitle()); updatableSong.setSongTitle(songTitle); } if (updatableSong.getTitle() != null && updatableSong.getTitle().getId() == 0) { Title umbrellaTitle = new Title(updatableSong.getTitle()); umbrellaTitle.setCategory(categoryRepository.getUmbrellaTitleCategory()); titleRepository.create(umbrellaTitle); updatableSong.setTitle(umbrellaTitle); } if (updatableSong.getSongText() != null) { songTextDAO.create(updatableSong.getSongText()); } originalSongData = invokeAllSetters(originalSongData, updatableSong); return songsRepository.updateSong(originalSongData); } 	1	1	1	1	0	0
"@Override public void changeSetting(OnlinePAFPlayer pPlayer, String[] pArgs) { int worthNow = pPlayer.changeSettingsWorth(4); if (worthNow == 0) { pPlayer.sendMessage(new TextComponent(Main.getInstance().getFriendsPrefix() + Main.getInstance() .getMessagesYml().getString(""Friends.Command.Settings.NowYourFriendsCanJump""))); } else { pPlayer.sendMessage(new TextComponent(Main.getInstance().getFriendsPrefix() + Main.getInstance() .getMessagesYml().getString(""Friends.Command.Settings.NowYourFriendsCanNotJump""))); } } "	1	1	1	1	0	0
"@Override public void onAppStarting(Object... args) {  StandardContext sc = (StandardContext) args[0]; InterceptSupport iSupport = InterceptSupport.instance(); InterceptContext context = iSupport.createInterceptContext(Event.WEBCONTAINER_INIT); /** * NOTE: spring boot rewrite the tomcat webappclassloader, makes the addURL for nothing, then we can't do * anything on this we may use its webappclassloader's parent as the classloader */ context.put(InterceptConstants.WEBAPPLOADER, sc.getLoader().getClassLoader().getParent()); context.put(InterceptConstants.WEBWORKDIR, sc.getWorkPath());  String contextPath = (String) ReflectHelper.getField(StandardContext.class, sc, ""encodedPath"", true); context.put(InterceptConstants.CONTEXTPATH, (contextPath.length() > 0) ? contextPath : ""/"");  context.put(InterceptConstants.APPNAME, ReflectHelper.getField(StandardContext.class, sc, ""displayName"", true));  ServletContext sContext = (ServletContext) ReflectHelper.getField(StandardContext.class, sc, ""context"", true);  context.put(InterceptConstants.SERVLET_CONTEXT, sContext);  String basePath = sContext.getRealPath("""");  /* * NOTE: springboot couldn't get the basePath through method ""getRealPath"", temporary process */ if (basePath == null) { basePath = """"; } else if (basePath.lastIndexOf(""/"") == (basePath.length() - 1) || basePath.lastIndexOf(""\\"") == (basePath.length() - 1)) { basePath = basePath.substring(0, basePath.length() - 1); }  context.put(InterceptConstants.BASEPATH, basePath);  iSupport.doIntercept(context); } "	1	1	1	0	1	0
protected void setText(List<String> text){ docType.setText(); } 	1	0	1	1	0	0
"@Override public void mouseReleased(MouseEvent e) { for (int i = 0; i < dotUI.size(); i++) { if (dotUI.get(i).contains(e.getX(), e.getY())) { System.out.println(""Debug info - Mouse release detected on dot "" + i); } } GUIGrid.this.lijnUI.clear(); controller.getVeld().clearConnectedDots(); GUIGrid.this.repaint(); System.out.println(""Mouse release detected""); } "	1	1	1	0	1	0
"private boolean checkVersionName(JSONObject appJson) throws JSONException{ if (appJson.isNull(Constants.JSON_MIN_VERSION_NAME)) { return false; } getSirenHelper().setLastVerificationDate(mApplicationContext);  String minVersionName = appJson.getString(Constants.JSON_MIN_VERSION_NAME); String currentVersionName = getSirenHelper().getVersionName(mApplicationContext);  if ((getSirenHelper().isEmpty(minVersionName) || getSirenHelper().isEmpty(currentVersionName) || getSirenHelper().isVersionSkippedByUser(mApplicationContext, minVersionName))) { return false; } SirenAlertType alertType = null; String[] minVersionNumbers = minVersionName.split(""\\.""); String[] currentVersionNumbers = currentVersionName.split(""\\.""); //noinspection ConstantConditions if (minVersionNumbers != null && currentVersionNumbers != null && minVersionNumbers.length == currentVersionNumbers.length) { if (minVersionNumbers.length > 0 && getSirenHelper().isGreater(minVersionNumbers[0], currentVersionNumbers[0])) { alertType = majorUpdateAlertType; } else if (minVersionNumbers.length > 1 && getSirenHelper().isGreater(minVersionNumbers[1], currentVersionNumbers[1])) { alertType = minorUpdateAlertType; } else if (minVersionNumbers.length > 2 && getSirenHelper().isGreater(minVersionNumbers[2], currentVersionNumbers[2])) { alertType = patchUpdateAlertType; } else if (minVersionNumbers.length > 3 && getSirenHelper().isGreater(minVersionNumbers[3], currentVersionNumbers[3])) { alertType = revisionUpdateAlertType; }  if (alertType != null) { showAlert(minVersionName, alertType); return true; } } return false; } "	1	0	1	0	0	0
"@Test public void testGetActivityFeedList() { Map<Date, List<ActivityFeed>> result = idh.getActivityFeedList(1, 208, 1); for (Date d : result.keySet()) { List<ActivityFeed> afl = result.get(d); for (ActivityFeed af : afl) { assertNotNull(af.getActivityType()); assertNotNull(af.getBodyText()); assertNotNull(af.getDate()); assertNotNull(af.getHeaderText()); System.out.println(af.getActivityType() + "" - "" + af.getHeaderText() + "" - "" + af.getBodyText() + "" - "" + af.getDate()); } } } "	1	0	1	0	0	0
public static void showPictures(final Set<MapillaryAbstractImage> images, final boolean select) { if (!SwingUtilities.isEventDispatchThread()) { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { showPictures(images, select); } }); } else { Bounds zoomBounds = null; if (images.isEmpty()) { zoomBounds = new Bounds(new LatLon(0, 0)); } else { zoomBounds = new Bounds(images.iterator().next().getLatLon()); for (MapillaryAbstractImage img : images) { zoomBounds.extend(img.getLatLon()); } }  // The zoom rectangle must have a minimum size. double latExtent = Math.max(zoomBounds.getMaxLat() - zoomBounds.getMinLat(), MIN_ZOOM_SQUARE_SIDE); double lonExtent = Math.max(zoomBounds.getMaxLon() - zoomBounds.getMinLon(), MIN_ZOOM_SQUARE_SIDE); zoomBounds = new Bounds(zoomBounds.getCenter(), latExtent, lonExtent);  Main.map.mapView.zoomTo(zoomBounds); MapillaryLayer.getInstance().getData().setSelectedImage(null); if (select) MapillaryLayer.getInstance().getData().addMultiSelectedImage(images); if (Main.main != null) MapillaryData.dataUpdated(); }  } 	1	0	1	0	0	0
protected void scheduleProcess(String processName, String cluster, String startTime, int noOfInstances) throws FalconCLIException { APIResult result = falconUnitClient.schedule(EntityType.PROCESS, processName, startTime, noOfInstances, cluster, true, null); assertStatus(result); } 	1	0	1	0	0	0
"@Bean public DmnEngine ruleEngine() { DmnEngineConfiguration dmnEngineConfiguration = new StandaloneDmnEngineConfiguration(); dmnEngineConfiguration.setDataSource(dataSource()); dmnEngineConfiguration.setDatabaseSchemaUpdate(environment.getProperty(""engine.dmn.schema.update"", ""true""));  return dmnEngineConfiguration.buildDmnEngine(); } "	1	0	1	0	0	0
"public Timestamp getTimeStamp(int mVColumn, String[] values) throws ParseException { LOG.trace(""getTimeStamp()""); // if RelatedDateTimeGroup is set for mvColumn -> get group id Column col = configuration.getColumnById(mVColumn); String group = null; if (col.isSetRelatedDateTimeGroup()) { group = col.getRelatedDateTimeGroup(); } // else check all columns for Type::DATE_TIME -> get Metadata.Key::GROUP->Value if (group == null) { group = configuration.getFirstDateTimeGroup(); } Column[] cols = configuration.getAllColumnsForGroup(group, Type.DATE_TIME); if (cols != null) { // Try to get timezone from configuration final Timestamp ts = new Timestamp(); TimeZone timeZone = getTimeZone(cols); if (isUnixTime(cols)) { handleUnixTime(values, cols, ts); } else { handleDateTimeCombination(values, cols, ts, timeZone); } if (configuration.isDateInfoExtractionFromFileNameSetupValid()) { ts.enrich( dataFile.getName(), configuration.getRegExDateInfoInFileName(), configuration.getDateInfoPattern()); } if (configuration.isUseDateInfoFromFileModificationSet()) { ts.adjustBy(dataFile.lastModified(), configuration.getLastModifiedDelta()); } return ts; } return null; } "	1	0	1	0	0	0
@Override public void setExpandedState(boolean isExpanded, boolean animate) { MorphButton.MorphState indicatorState = (isExpanded) ? MorphButton.MorphState.END : MorphButton.MorphState.START;  if (mMorphButton.getState() != indicatorState) { mMorphButton.setState(indicatorState, animate); } } 	1	0	1	1	0	0
"@Override public void handle(ChannelHandlerContext ctx, HttpRequest request) { try {  Tracker.track(request);  requestCount.inc(); final String tenantId = request.getHeader(""tenantId""); JSONMetricsContainer jsonMetricsContainer = null; final Timer.Context jsonTimerContext = jsonTimer.time();  final String body = request.getContent().toString(Constants.DEFAULT_CHARSET); try { jsonMetricsContainer = createContainer(body, tenantId); if (!jsonMetricsContainer.isValid()) { throw new IOException(""Invalid JSONMetricsContainer""); } } catch (JsonParseException e) { log.warn(""Exception parsing content"", e); DefaultHandler.sendResponse(ctx, request, ""Cannot parse content"", HttpResponseStatus.BAD_REQUEST); return; } catch (JsonMappingException e) { log.warn(""Exception parsing content"", e); DefaultHandler.sendResponse(ctx, request, ""Cannot parse content"", HttpResponseStatus.BAD_REQUEST); return; } catch (IOException e) { log.warn(""IO Exception parsing content"", e); DefaultHandler.sendResponse(ctx, request, ""Cannot parse content"", HttpResponseStatus.BAD_REQUEST); return; } catch (Exception e) { log.warn(""Other exception while trying to parse content"", e); DefaultHandler.sendResponse(ctx, request, ""Failed parsing content"", HttpResponseStatus.INTERNAL_SERVER_ERROR); return; }  if (jsonMetricsContainer == null) { log.warn(ctx.getChannel().getRemoteAddress() + "" No valid metrics""); DefaultHandler.sendResponse(ctx, request, ""No valid metrics"", HttpResponseStatus.BAD_REQUEST); return; }  List<Metric> containerMetrics; try { containerMetrics = jsonMetricsContainer.toMetrics(); forceTTLsIfConfigured(containerMetrics);  if (!jsonMetricsContainer.areDelayedMetricsPresent()) { Tracker.trackDelayedMetricsTenant(tenantId); } } catch (InvalidDataException ex) { // todo: we should measure these. if they spike, we track down the bad client. // this is strictly a client problem. Someting wasn't right (data out of range, etc.) log.warn(ctx.getChannel().getRemoteAddress() + "" "" + ex.getMessage()); DefaultHandler.sendResponse(ctx, request, ""Invalid data "" + ex.getMessage(), HttpResponseStatus.BAD_REQUEST); return; } catch (Exception e) { // todo: when you see these in logs, go and fix them (throw InvalidDataExceptions) so they can be reduced // to single-line log statements. log.warn(""Exception converting JSON container to metric objects"", e); // This could happen if clients send BigIntegers as metric values. BF doesn't handle them. So let's send a // BAD REQUEST message until we start handling BigIntegers. DefaultHandler.sendResponse(ctx, request, ""Error converting JSON payload to metric objects"", HttpResponseStatus.BAD_REQUEST); return; } finally { jsonTimerContext.stop(); }  if (containerMetrics == null || containerMetrics.isEmpty()) { log.warn(ctx.getChannel().getRemoteAddress() + "" No valid metrics""); DefaultHandler.sendResponse(ctx, request, ""No valid metrics"", HttpResponseStatus.BAD_REQUEST); }  final MetricsCollection collection = new MetricsCollection(); collection.add(new ArrayList<IMetric>(containerMetrics)); final Timer.Context persistingTimerContext = persistingTimer.time(); try { ListenableFuture<List<Boolean>> futures = processor.apply(collection); List<Boolean> persisteds = futures.get(timeout.getValue(), timeout.getUnit()); for (Boolean persisted : persisteds) { if (!persisted) { DefaultHandler.sendResponse(ctx, request, null, HttpResponseStatus.INTERNAL_SERVER_ERROR); return; } } DefaultHandler.sendResponse(ctx, request, null, HttpResponseStatus.OK); } catch (TimeoutException e) { DefaultHandler.sendResponse(ctx, request, ""Timed out persisting metrics"", HttpResponseStatus.ACCEPTED); } catch (Exception e) { log.error(""Exception persisting metrics"", e); DefaultHandler.sendResponse(ctx, request, ""Error persisting metrics"", HttpResponseStatus.INTERNAL_SERVER_ERROR); } finally { persistingTimerContext.stop(); } } finally { requestCount.dec(); } } "	1	0	1	1	0	0
"@Override public void configAdminUpdate(String pid, Map<String, String> data) { ServiceReference sref = bundleContext.getServiceReference(ConfigurationAdmin.class.getName()); if (sref == null) { throw new IllegalStateException(""The configuration admin service cannot be found.""); }  try { ConfigurationAdmin ca = (ConfigurationAdmin) bundleContext.getService(sref); if (ca == null) { throw new IllegalStateException(""The configuration admin service cannot be found.""); } Configuration config = ca.getConfiguration(pid); config.update(new Hashtable<String, String>(data)); } catch (IOException ioe) { throw new RuntimeException(ioe); } finally { bundleContext.ungetService(sref); } } "	1	0	1	0	0	0
"@Override public void clicked(InputEvent event, float x, float y) { if (selectedGO != null && !delete.isDisabled()) { Log.traceTag(TAG, ""Remove game object [{}]."", selectedGO); removeGo(selectedGO); Mundus.postEvent(new SceneGraphChangedEvent()); } } "	1	0	1	0	0	0
"private static void printCollection(Collection c) { System.out.print(""[""); for (Object o : c) { System.out.print(c); System.out.print("", ""); } System.out.println(""]""); } "	0	1	1	1	0	0
private void addAlternate(List<PDXImage> alternates, COSDictionary buffer, PDResources resources) { COSBase alternatesImages = buffer.getDictionaryObject(COSName.IMAGE); if (alternatesImages instanceof COSStream) {  final PDStream stream = new PDStream((COSStream) alternatesImages); PDImageXObjectProxy imageXObject = new PDImageXObjectProxy(stream, resources, null); alternates.add(new PBoxPDXImage(imageXObject, this.document, this.flavour)); } } 	1	1	1	0	1	0
"public static String addPadding(String encoded, boolean urlSafe) { String padding = urlSafe ? ""."" : ""=""; StringBuilder buffer = new StringBuilder(encoded); while (encoded.length() % 4 != 0) { buffer.append(padding); } return buffer.toString(); } "	1	0	1	0	0	0
@Override protected void onCreate( Bundle savedInstanceState ) { super.onCreate(savedInstanceState);  this.setResult(0); this.requestWindowFeature(Window.FEATURE_NO_TITLE); this.setContentView(R.layout.editserver);  if( database == null ) database = new DatabaseProvider(EditServerActivity.this);  Intent thisIntent = getIntent(); rowId = thisIntent.getLongExtra(Values.EXTRA_ROW_ID, -1);  if( rowId == -1 ) { UserVisibleMessage.showMessage(EditServerActivity.this, R.string.msg_db_failure); finish(); }  ServerRecord sr = database.getServer(rowId);  saveButton = (Button)findViewById(R.id.editserver_save_button); saveButton.setOnClickListener(saveButtonListener);  cancelButton = (Button)findViewById(R.id.editserver_cancel_button); cancelButton.setOnClickListener(cancelButtonListener);  field_server = (EditText)findViewById(R.id.editserver_field_server); field_port = (EditText)findViewById(R.id.editserver_field_port); field_timeout = (EditText)findViewById(R.id.editserver_field_timeout); field_rcon_password = (EditText)findViewById(R.id.editserver_field_rcon_password); field_nickname = (EditText)findViewById(R.id.editserver_field_nickname);  field_server.setText(sr.getServerURL()); field_port.setText(Integer.toString(sr.getServerPort())); field_timeout.setText(Integer.toString(sr.getServerTimeout())); field_rcon_password.setText(sr.getServerRCONPassword()); field_nickname.setText(sr.getServerNickname());  if( CheckValve.settings.getBoolean(Values.SETTING_RCON_SHOW_PASSWORDS) == true ) { ((CheckBox)findViewById(R.id.editserver_checkbox_show_password)).setChecked(true); field_rcon_password.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD); } else { ((CheckBox)findViewById(R.id.editserver_checkbox_show_password)).setChecked(false); field_rcon_password.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD); } } 	1	0	1	0	0	0
private static PathAddress searchPathAddress(PathAddress address, ImmutableManagementResourceRegistration registry, Map<String, String> properties) { if (properties.size() == 0) { return address; } for (Map.Entry<String, String> entry : properties.entrySet()) { PathAddress childAddress = PathAddress.pathAddress( replaceEscapedCharactersInKey(entry.getKey()), replaceEscapedCharactersInValue(entry.getValue())); ImmutableManagementResourceRegistration subModel = registry.getSubModel(address); if (subModel != null) { Map<String, String> childProps = new HashMap<String, String>(properties); childProps.remove(entry.getKey()); PathAddress foundAddr = searchPathAddress(address.append(childAddress), subModel, childProps); if (foundAddr != null) { return foundAddr; } } } return null; } 	1	0	1	1	0	0
"private int[] parseRangeRequest(IHTTPSession session, int totalLength) { int[] range = null; String header = session.getHeaders().get(""range""); if(header != null  && header.startsWith(""bytes="")) { range = new int[] {0, -1}; header = header.substring(""bytes="".length()); int dashPos = header.indexOf('-'); try { if(dashPos > 0) { range[0] = Integer.parseInt(header.substring(0,dashPos)); }  if(dashPos == header.length()-1) { range[1] = totalLength; }else if(dashPos > 0) { range[1] = Integer.parseInt(header.substring(dashPos+1));  } }catch(NumberFormatException nfe) {  } if(range[0] < 0 || range[1] > totalLength) { range[0] = -1;//Error flag } }  return range; } "	1	1	1	1	0	0
@Override public EnumActionResult onItemUse(ItemStack stack, EntityPlayer playerIn, World worldIn, BlockPos pos, EnumHand hand, EnumFacing side, float hitX, float hitY, float hitZ){ if(worldIn.isRemote){ return EnumActionResult.PASS; }  if(worldIn.getTileEntity(pos.offset(side)) instanceof SidedGearHolderTileEntity && !worldIn.getTileEntity(pos.offset(side)).hasCapability(Capabilities.AXLE_HANDLER_CAPABILITY, side.getOpposite()) && worldIn.isSideSolid(pos, side)){ if(!playerIn.capabilities.isCreativeMode && --playerIn.getHeldItem(hand).stackSize <= 0){ playerIn.setHeldItem(hand, null); }  ((SidedGearHolderTileEntity) worldIn.getTileEntity(pos.offset(side))).setMembers(type, side.getOpposite().getIndex()); CommonProxy.masterKey++; }else if(worldIn.getBlockState(pos.offset(side)).getBlock().isReplaceable(worldIn, pos.offset(side)) && worldIn.isSideSolid(pos, side)){ if(!playerIn.capabilities.isCreativeMode && --playerIn.getHeldItem(hand).stackSize <= 0){ playerIn.setHeldItem(hand, null); }  worldIn.setBlockState(pos.offset(side), ModBlocks.sidedGearHolder.getDefaultState(), 3); ((SidedGearHolderTileEntity) worldIn.getTileEntity(pos.offset(side))).getMembers()[side.getOpposite().getIndex()] = type; CommonProxy.masterKey++; }  return EnumActionResult.PASS; } 	0	1	1	0	0	0
@Override public int hashCode() { return getID(); } 	1	0	1	0	0	0
"private ProductInstance createProductInstance(ProductRelease productRelease, VM vm, String vdc, List<Attribute> attributes) throws InvalidEntityException, AlreadyExistsEntityException {  ProductInstance instance = new ProductInstance();  Product product = null; try { product = productDao.load(productRelease.getProduct().getName()); } catch (EntityNotFoundException e) { product = new Product(productRelease.getProduct().getName(), productRelease.getProduct().getDescription()); } product.setAttributes(attributes);  productRelease.setProduct(product);  instance.setProductRelease(productRelease); instance.setVm(vm); instance.setVdc(vdc); instance.setStatus(Status.UNINSTALLED); instance.setName(vm.getFqn() + ""_"" + productRelease.getProduct().getName() + ""_"" + productRelease.getVersion());  instance = productInstanceDao.create(instance); return instance;  } "	1	0	1	1	0	0
"@Override public void dump(FileDescriptor fd, PrintWriter pw, String[] args) { if (mContext.checkCallingOrSelfPermission(Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) { pw.println(""Permission Denial: can't dump PowerManager from from pid="" + Binder.getCallingPid() + "", uid="" + Binder.getCallingUid()); return; } synchronized (this) { pw.println(""VOICE INTERACTION MANAGER (dumpsys voiceinteraction)\n""); pw.println(""  mEnableService: "" + mEnableService); if (mImpl == null) { pw.println(""  (No active implementation)""); return; } mImpl.dumpLocked(fd, pw, args); } mSoundTriggerHelper.dump(fd, pw, args); } "	0	0	1	1	0	0
"@Override public void run() {  ImmutableList.Builder<CodegenConfigurator> builder = ImmutableList.builder(); List<String> langList = ImmutableList.copyOf(Splitter.on("","").trimResults().split(langs)); List<String> configFiles; if(configFile != null) { configFiles = ImmutableList.copyOf(Splitter.on("","").trimResults().split(configFile)); } else { configFiles = ImmutableList.of(); } for (int i = 0; i < langList.size(); i++) { String lang = langList.get(i); String config = configFiles.size() >= i ? configFiles.get(i) : null;  CodegenConfigurator configurator; if(config == null) { configurator = new CodegenConfigurator(); } else { configurator = CodegenConfigurator.fromFile(config); }  if (isNotEmpty(spec)) { configurator.setInputSpec(spec); }  if (isNotEmpty(lang)) { configurator.setLang(lang); }  if (isNotEmpty(output)) { configurator.setOutputDir(output); }  if (isNotEmpty(apiPackage)) { configurator.setApiPackage(apiPackage); }  if (isNotEmpty(modelPackage)) { configurator.setModelPackage(modelPackage); } setSystemProperties(configurator); builder.add(configurator); }  try { MarkdownBuilder build = new SlateDocumentGenerator(builder.build()).build(); File dir = new File(output); if (!dir.exists()) { dir.mkdirs(); } else if(dir.isFile()) { throw new IllegalArgumentException(""Output must be a directory""); } File file = new File(dir, ""slate.md""); file.createNewFile(); FileOutputStream fileOutputStream = new FileOutputStream(file); fileOutputStream.write(build.toString().getBytes(Charset.forName(""UTF-8""))); fileOutputStream.close(); } catch (IOException e) { throw Throwables.propagate(e); } } "	1	1	1	1	0	0
"public static boolean jsFunction_zip(Context cx, Scriptable thisObj, Object[] args, Function funObj) throws ScriptException, IOException { String functionName = ""zip""; int argsCount = args.length; if (argsCount != 1) { HostObjectUtil.invalidNumberOfArgs(hostObjectName, functionName, argsCount, false); } FileHostObject fho = (FileHostObject) thisObj; ZipOutputStream zip = null;  if (fho.file.isExist()) { JaggeryContext context = (JaggeryContext) RhinoEngine.getContextProperty(EngineConstants.JAGGERY_CONTEXT); Object obj = context.getProperty(JAVASCRIPT_FILE_MANAGER); if (obj instanceof JavaScriptFileManager) { fho.manager = (JavaScriptFileManager) obj; } else { fho.manager = new JavaScriptFileManagerImpl(); } String destinationPath = fho.manager.getFile(args[0].toString()).getAbsolutePath(); String sourcePath = fho.manager.getDirectoryPath(fho.file.getPath()); File destinationFile = new File(destinationPath); if (destinationFile.getParentFile().mkdirs()) { try { zip = new ZipOutputStream(new FileOutputStream(destinationPath)); File folder = new File(sourcePath); if (folder.list() != null) { for (String fileName : folder.list()) { addFileToZip("""", sourcePath + File.separator + fileName, zip); } } return true; } catch (IOException ex) { log.error(""Cannot zip the folder. "" + ex); throw new IOException(ex); } finally { if (zip != null) { try { zip.flush(); zip.close(); } catch (IOException er) { log.error(""Unable to close the zip output stream "" + er); } } } } else { log.error(""Unable to create the directory path for file : ""+ fho.file.getName()); } }else { log.error(""Zip operation cannot be done. Folder not found""); } return false; } "	0	1	1	0	0	0
"public void approveSpecfiedNumberOfPartimers(int numPartimersToApporve, String hoEmail) { for(int i =2; i<=numPartimersToApporve; i++) { System.out.println(""Beginnging to Approve Partimer: "" + i + ""- for Job created by: ""+ hoEmail); selectPartimerCheckbox(String.valueOf(i)); openActionsListPopup(String.valueOf(i)); clickOnApprove(String.valueOf(i)); System.out.println(""Partimer Approved Sucessfully""); }  } "	1	0	1	1	0	0
"private synchronized void executeRun() { try { time += TIME_SLICE; final int lockstep = time / NetworkConstants.Client.LOCKSTEP_PERIOD;  // check if the lockstep is allowed synchronized (lockstepLock) { while (lockstep > maxAllowedLockstep) { System.out.println(""WAITING for lockstep!""); lockstepLock.wait(); } }  SyncTasksPacket tasksPacket; synchronized (tasks) { tasksPacket = tasks.peekFirst(); }  while (tasksPacket != null && tasksPacket.getLockstepNumber() <= lockstep) { assert tasksPacket.getLockstepNumber() == lockstep : ""FOUND TasksPacket FOR older lockstep!"";  System.out.printf(""Executing SyncTaskPacket("" + tasksPacket + "") in "" + getLockstepText(lockstep));  try { executeTasksPacket(tasksPacket); } catch (Throwable t) { System.err.println(""Error during execution of scheduled task:""); t.printStackTrace(); }  synchronized (tasks) {// remove the executed tasksPacket and retrieve the next one to check it. tasks.pollFirst(); tasksPacket = tasks.peekFirst(); } }  addNewTimerables(); handleRemovedTimerables();  for (ScheduledTimerable curr : timerables) { curr.checkExecution(TIME_SLICE); } } catch (Throwable t) { System.err.println(""WARNING: Networking Timer catched Throwable!!!""); t.printStackTrace(); } } "	0	0	1	1	0	0
"@Override public Transport createTransport(EduDocument message) { final ServiceRecord primaryServiceRecord = serviceRegistryLookup.getPrimaryServiceRecord(message.getReceiverOrgNumber()); primaryServiceRecord.getServiceIdentifier();  Optional<ServiceRecord> serviceRecord = Optional.of(primaryServiceRecord);  Optional<Transport> transport = serviceRecord.filter(isServiceIdentifier(""edu"")).map(s -> new AltinnTransport(s.getEndPointURL())); if(transport.isPresent()) { transport = serviceRecord.filter(isServiceIdentifier(""post"")).map(s -> new PostVirksomhetTransport(s.getEndPointURL())); } return transport.orElseThrow(() -> new RuntimeException(""Failed to create transport"")); } "	1	1	1	1	0	0
@Override public void getPeople(int startIndex, int viewSize, List<String> categories, AsyncCallback<People> async) { List<Person> flatData = new ArrayList<>(); if(categories == null || categories.isEmpty()) { // Load all data for(String category : FakePersonService.categories) { flatData.addAll(peopleMap.get(category)); } } else { // Load data by categories for (String category : categories) { for (Person person : peopleMap.get(category)) { flatData.add(person); } } }  People people = new People(); for(int i = startIndex; i < (startIndex + viewSize); i++) { try { people.add(flatData.get(i)); } catch (IndexOutOfBoundsException e) { // ignored. } } people.setAbsoluteTotal(flatData.size()); // Fake a delay for the demo new Timer() { @Override public void run() { async.onSuccess(people); } }.schedule(Math.min(200, Random.nextInt(500))); } 	1	1	1	0	1	0
protected void crateCall(long[] args) { int i = 2;  FunctionType method = (FunctionType) types.get(args[i++]);  int target = getIndex(args[i++]); int[] arguments = new int[args.length - i]; int j = 0; while (i < arguments.length) { arguments[j++] = getIndex(args[i++]); }  Type type = method.getReturnType();  code.createCall(type, target, arguments);  if (type != MetaType.VOID) { symbols.add(type); } } 	1	0	1	1	0	0
"private static void convertExtendedSifToSifGzipped(String extSifArchiveName, String sifArchiveName) throws IOException { if((new File(sifArchiveName)).exists()) { LOG.info(""create-downloads: skip for existing "" + sifArchiveName); return; }  LOG.info(""create-downloads: generating new "" + sifArchiveName); BufferedReader reader = new BufferedReader(new InputStreamReader((new GZIPInputStream(new FileInputStream(extSifArchiveName))))); OutputStreamWriter writer = new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(sifArchiveName))); while(reader.ready()) { String line = reader.readLine(); //stop at the first blank line (because next come nodes with attributes) if(line.isEmpty()) break; writer.write(line + '\n'); } reader.close(); writer.close(); } "	1	0	1	0	0	0
"@Test public void testNoKeyword() throws Exception { InputStream is = this.getClass().getResourceAsStream(""/default_without_keyword.wmc""); WMCDocService wmcds = new WMCDocService(""xml"", null); JSONObject res = wmcds.extractsStandardSpecificEntries(is);  // Check keywords Assert.assertTrue(""Keyword should not appear in result"", !res.has(""keywords"")); } "	0	0	1	1	0	0
@Override public BValue[] execute(Context context) { return HttpUtil.getContentLenghth(context, this); } 	0	0	1	1	0	0
@Override public void controlResized(ControlEvent e) { int width = Math.max(compositeChart.getSize().x - 40, 1); numberOfTicks = Math.max(width / TIMESTAMP_MAX_SIZE, 1); refresh(false, false); } 	1	0	1	0	0	0
@Override public void generateTree(World worldIn, BlockPos pos, IBlockState state, Random rand) { if (!net.minecraftforge.event.terraingen.TerrainGen.saplingGrowTree(worldIn, rand, pos)) return; Object object = new OrangeTreeGenerator(); int i1 = 0; int j1 = 0;    IBlockState iblockstate1 = Blocks.air.getDefaultState(); worldIn.setBlockState(pos, iblockstate1, 4);   if (!((WorldGenerator)object).generate(worldIn, rand, pos.add(i1, 1, j1))) { worldIn.setBlockState(pos, state, 4); } } 	0	0	1	1	0	0
"@SuppressWarnings(""unchecked"") public <T> T create(Class<T> service) { return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service }, new CallerInvocationHandler(this.dataSource)); } "	0	1	1	0	0	0
"public void start() { try { File nodeFile = FileSelector.selectFile(""Select node file"", this, "".node.graph""); File edgeFile = new File(nodeFile.getAbsolutePath().replace("".node"", "".edge"")); File treeFile = FileSelector.selectFile(""Select phylogenetic tree file"", this, "".nwk"");  long startTime = System.currentTimeMillis();  // make the controllers GraphDataRepository gd = GraphDataRepository.parseGraph(nodeFile, edgeFile); NewickParser.TreeNode tree = TreeParser.parseTreeFile(treeFile); graphController = new GraphController(gd); zoomBarController = new ZoomBarController(graphController); sideBarController = new SideBarController(graphController,tree);  // set the views setSideBarView(sideBarController.getPanel()); setGraphView(graphController.getPanel()); setZoomBarView(zoomBarController.getPanel());  // set the controls. // This is done last so we can remove the default library keycontroller WindowController windowController = new WindowController(this); KeyController keys = new KeyController(this); graphController.getPanel().addKeyListener(keys); sideBarController.getPanel().addKeyListener(keys); addWindowListener(windowController);  this.setFocusable(true); this.setVisible(true);  long loadTime = System.currentTimeMillis() - startTime; System.out.println(""Loaded in (ms):"" + loadTime); } catch (FileNotFoundException e) { // TODO: Show dialog with message to user e.printStackTrace(); this.stop(); } catch (IOException e) { e.printStackTrace(); this.stop(); } catch (newick.ParseException e) { e.printStackTrace(); this.stop(); } catch (FileSelectorException e) { e.printStackTrace(); this.stop(); } } "	1	0	1	0	0	0
"private InputStream singleUpload(@NonNull Map<String, String> params, OmniFile targetDirectory) { String url = params.get(""url""); String targetVolumeId = targetDirectory.getVolumeId(); String destPath = targetDirectory.getPath(); JsonObject wrapper = new JsonObject(); JsonArray added = new JsonArray(); try { JSONArray postUploads = new JSONArray(params.get(""post_uploads""));  for (int i = 0; i < postUploads.length(); i++) { JSONObject postUpload = postUploads.getJSONObject(i); String uploadFileName = postUpload.getString(CConst.FILE_NAME); String filePath = postUpload.getString(CConst.FILE_PATH);  /** * When filePath is empty, a file with zero bytes was uploaded. */ if ( filePath.isEmpty()) { filePath = dataDir + File.separator + "".empty_file.txt""; File emptyFile = new File( filePath); FileUtil.writeFile( emptyFile, """"); }  File srcFile = new File(filePath); OmniFile destFile = new OmniFile(targetVolumeId, destPath + ""/"" + uploadFileName);  if (OmniFiles.copyFile(srcFile, destFile)) { JsonArray warning = new JsonArray(); JsonObject errorObj = new JsonObject(); errorObj.addProperty(""error"", ""File copy failure""); warning.add(errorObj); wrapper.add(""warning"", warning); }  JsonObject fileObj = FileObj.makeObj(targetVolumeId, destFile, url); added.add(fileObj); LogUtil.log(LogUtil.LogType.CMD_UPLOAD, ""File upload success: "" + destFile.getPath()); }  wrapper.add(""added"", added);  return getInputStream(wrapper);  } catch (JSONException e) { logException(CmdUpload.class, e); } return null; } "	1	0	1	1	0	0
@Test public void selectingStudentInViewFiresStudentSelectedEvent() { ArgumentCaptor<SelectStudentHandler> viewHandler = ArgumentCaptor.forClass(SelectStudentHandler.class); verify(this.view).addSelectStudentHandler(viewHandler.capture());  StudentSelectedEventHandler eventHandler = mock(StudentSelectedEventHandler.class); this.bus.register(eventHandler);  this.bus.post(new GradeBookLoaded(book));  viewHandler.getValue().studentSelected(1);  ArgumentCaptor<StudentSelectedEvent> event = ArgumentCaptor.forClass(StudentSelectedEvent.class); verify(eventHandler).handle(event.capture());  assertThat(event.getValue().getSelectedStudent(), equalTo(student1)); } 	1	0	1	1	0	0
public static Matrix4d superposeAndTransform(Point3d[] fixed, Point3d[] moved) { superposer.setCentered(false); return superposer.superpose(fixed, moved); } 	1	1	1	1	0	0
@Override public void handle(Cart entity, UpdateAction action) { Updater updater = getUpdateService(action.getClass()); updater.handle(entity, action); } 	1	0	1	0	0	0
public void setOnSaveCroppedImageCompleteListener(OnSaveCroppedImageCompleteListener listener) { mOnSaveCroppedImageCompleteListener = listener != null ? new WeakReference<>(listener) : null; } 	1	0	1	0	0	0
"public static MessageMDN createMDN(Session session, AS2Message msg, String mic, DispositionType disposition, String text) throws Exception {  AS2MessageMDN mdn = new AS2MessageMDN(msg, true);  mdn.setHeader(""AS2-Version"", ""1.1""); // RFC2822 format: Wed, 04 Mar 2009 10:59:17 +0100 mdn.setHeader(""Date"", DateUtil.formatDate(""EEE, dd MMM yyyy HH:mm:ss Z"")); mdn.setHeader(""Server"", Session.TITLE); mdn.setHeader(""Mime-Version"", ""1.0"");  // get the MDN partnership info // not sure that it should be this way since the config should relfect the inbound original message settings but ... mdn.getPartnership().setSenderID(AS2Partnership.PID_AS2, mdn.getHeader(""AS2-From"")); mdn.getPartnership().setReceiverID(AS2Partnership.PID_AS2, mdn.getHeader(""AS2-To"")); session.getPartnershipFactory().updatePartnership(mdn, true);  mdn.setHeader(""From"", msg.getPartnership().getReceiverID(Partnership.PID_EMAIL)); String subject = mdn.getPartnership().getAttribute(ASXPartnership.PA_MDN_SUBJECT);  if (subject != null) { mdn.setHeader(""Subject"", ParameterParser.parse(subject, new MessageParameters(msg))); } else { mdn.setHeader(""Subject"", ""Your Requested MDN Response""); } mdn.setText(ParameterParser.parse(text, new MessageParameters(msg))); mdn.setAttribute(AS2MessageMDN.MDNA_REPORTING_UA, Session.TITLE + ""@"" + msg.getAttribute(NetAttribute.MA_DESTINATION_IP) + "":"" + msg.getAttribute(NetAttribute.MA_DESTINATION_PORT)); mdn.setAttribute(AS2MessageMDN.MDNA_ORIG_RECIPIENT, ""rfc822; "" + msg.getHeader(""AS2-To"")); mdn.setAttribute(AS2MessageMDN.MDNA_FINAL_RECIPIENT, ""rfc822; "" + msg.getPartnership().getReceiverID(AS2Partnership.PID_AS2)); mdn.setAttribute(AS2MessageMDN.MDNA_ORIG_MESSAGEID, msg.getHeader(""Message-ID"")); mdn.setAttribute(AS2MessageMDN.MDNA_DISPOSITION, disposition.toString());  DispositionOptions dispOptions = new DispositionOptions(msg .getHeader(""Disposition-Notification-Options""));  mdn.setAttribute(AS2MessageMDN.MDNA_MIC, mic); createMDNData(session, mdn, dispOptions.getMicalg(), dispOptions.getProtocol());  mdn.updateMessageID();  // store MDN into msg in case AsynchMDN is sent fails, needs to be resent by send module msg.setMDN(mdn);  return mdn; } "	1	0	1	1	0	0
protected ForEachLoopTree parsePartialForEachLoopTree(Token forKeywordToken, boolean isForEach, VariableDeclarationTree variable, JSLexer src, Context context) { ExpressionTree expression = this.parseNextExpression(src, context); expectOperator(JSOperator.LEFT_PARENTHESIS, src, context); StatementTree statement = this.parseStatement(src, context); return new ForEachLoopTreeImpl(forKeywordToken.getStart(), src.getPosition(), isForEach, variable, expression, statement); } 	0	1	1	1	0	0
"protected List<Integer> createBaseTextNormOriginalMapping(STextualDS sTextualDS) { /** * Example1: dipl: "" this is"" 01234567 norm: ""thisis"" 012345 0->1 * 1->2,... Example2: dipl: "" thäs is"" 01234567 norm: ""thaesis"" 0123456 * 0->1 1->2 2->3 3->3 4->4 5->6 6->7 */ List<Integer> normalizedToOriginalMapping = new ArrayList<Integer>(); int start = 0; char[] chr = sTextualDS.getText().toCharArray(); for (char c : chr) { String stringToEscape = ((MergerProperties) getProperties()).getEscapeMapping().get(String.valueOf(c)); if (stringToEscape == null) { normalizedToOriginalMapping.add(start); } else { if (stringToEscape.length() > 0) { char[] chr2 = stringToEscape.toCharArray(); for (int i = 0; i < chr2.length; i++) { // one char is mapped to many. all chars have the same // index in the original text normalizedToOriginalMapping.add(start); } } else { // one char is mapped to the empty string. // do nothing } } start += 1; } // add an additional entry for the position after the last character // (imagine an empty token beginning and ending at last position of the // text). This is necessary, because text positions are positions // BETWEEN characters. normalizedToOriginalMapping.add(start++); return normalizedToOriginalMapping; } "	1	0	1	0	0	0
V addInstance(Schema.BaseType instanceBaseType, BiFunction<VertexElement, T, V> producer, boolean checkNeeded){ if(checkNeeded) preCheckForInstanceCreation();  if(isAbstract()) throw GraknTxOperationException.addingInstancesToAbstractType(this);  VertexElement instanceVertex = vertex().tx().factory().addVertexElement(instanceBaseType); if(!Schema.MetaSchema.isMetaLabel(getLabel())) { vertex().tx().txCache().addedInstance(getId()); } return producer.apply(instanceVertex, getThis()); } 	1	0	1	0	0	0
public static List<IndexRange> findAllValidUndoRanges(TextChange bubblyUndo, List<TextChange> dependencies) { List<SplittableIndexRange> currentRanges = new ArrayList<>(); currentRanges.add(new SplittableIndexRange(bubblyUndo.getStart(), bubblyUndo.insertedEndPosition()));  for (TextChange dependency : dependencies) { currentRanges = currentRanges.stream() .map(r -> r.split(dependency.getStart(), dependency.removedEndPosition())) .flatMap(t -> Stream.of(t._1, t._2)) .filter(r -> r.getLength() == 0) .collect(Collectors.toList()); } return currentRanges.stream().map(SplittableIndexRange::asIndexRange).collect(Collectors.toList()); } 	0	1	1	1	0	0
public boolean addAdministratedSubject(Subject subject) { this.administratedSubjects.remove(subject); if (!subject.getAccountsInCharge().contains(this)) { subject.addAccountInCharge(this); } return true; } 	1	0	1	1	0	0
"public static Chain getMatchingAtomRes(Chain seqRes, List<Chain> atomList) { Iterator<Chain> iter = atomList.iterator(); while(iter.hasNext()){ Chain atomChain = iter.next(); if ( atomChain.getId().equals(seqRes.getId())){ return atomChain; } //			if ( atomChain.getName().equals(seqRes.getName())){ //				return atomChain; //			} }  logger.info(""Could not match SEQRES chainID asymId:"" + seqRes.getId() + "" authId:""+ seqRes.getName() +""  to ATOM chains!, size of atom chain: "" + atomList.size()); return null; } "	1	1	1	1	0	0
"@Override public void truncateAll(long prevTerm, long term, long index) throws IOException { synchronized (mMetadataInfo) { if (mClosed) { throw new IOException(""Closed""); }  TermLog highestLog;  acquireExclusive(); try { compact(Long.MAX_VALUE);  // Create a new primordial term. highestLog = FileTermLog.newTerm(mWorker, mBase, prevTerm, term, index, index); mTermLogs.add(highestLog); } finally { releaseExclusive(); }  mMetadataInfo.mTerm = term; mMetadataInfo.mHighestIndex = index; mMetadataInfo.mCommitIndex = index; mMetadataHighestIndex = index; mMetadataDurableIndex = index;  syncMetadata(highestLog, prevTerm); } } "	1	0	1	0	0	0
"protected void updateHistory(Versionable v) throws Exception { //Only if an auditable field has been modified if (auditable(v)) { //Add history of creation HistoryServer hs = new HistoryServer(); if (v.getModifierId() < 0) { try { //By default blame system hs.setModifierId(new VMUserServer(1).getEntity()); } catch (Exception ex) { LOG.log(Level.SEVERE, null, ex); } } else { hs.setModifierId(new VMUserServer(v.getModifierId()).getEntity()); }  if (v.getHistoryList() != null && !v.getHistoryList().isEmpty()) { if (v.getReason() == null || v.getReason().equals(""audit.general.creation"")) { v.setReason(""audit.general.modified""); } History last = v.getHistoryList().get(v.getHistoryList().size() - 1); if ((v.getMajorVersion() == 0 && v.getMidVersion() == 0) // It has default values || last.getMajorVersion() == v.getMajorVersion() // Or it has a higher mid/major version assigned. && last.getMidVersion() == v.getMidVersion()) { //Make it one more than latest hs.setMajorVersion(v.getMajorVersion()); hs.setMidVersion(v.getMidVersion()); hs.setMinorVersion(last.getMinorVersion() + 1); } else { //Copy values from object as it was forced changed. hs.setMajorVersion(v.getMajorVersion()); hs.setMidVersion(v.getMidVersion()); hs.setMinorVersion(v.getMinorVersion()); } } else { if (v.getReason() == null) { v.setReason(""audit.general.creation""); } } hs.setReason(v.getReason()); hs.setModificationTime(v.getModificationTime() == null ? new Date() : v.getModificationTime()); hs.write2DB(); //Check the fields to be placed in history updateFields(hs, v); } if (v.getHistoryList() != null && v.getHistoryList().size() > 0) { History current = v.getHistoryList().get(v.getHistoryList().size() - 1); //Update the version the object holds v.setMajorVersion(current.getMajorVersion()); v.setMidVersion(current.getMidVersion()); v.setMinorVersion(current.getMinorVersion()); } } "	1	1	1	1	0	0
"@Override public ArrayList<Expense> getAllExpenses(){  ArrayList<Expense> expenses = new ArrayList<>(); Connection connection = null; PreparedStatement stmt = null; UserDaoImpl dao = new UserDaoImpl();  try { connection = DaoUtilities.getConnection(); String sql =  ""SELECT a.*, b.u_id as author_id, b.u_username as authorname,""; sql = sql + ""  c.u_id as resolver_id, c.u_username as resolvername, d.rs_id, d.rs_status, e.rt_id, e.rt_type""; sql = sql + ""  from erawesome.ers_reimbursements a""; sql = sql + ""  join erawesome.ers_users b on b.u_id = a.u_id_author""; sql = sql + ""  join erawesome.ers_users c on c.u_id = a.u_id_resolver""; sql = sql + ""  join erawesome.ers_reimbursement_status d on d.rs_id = a.rs_status""; sql = sql + ""  join erawesome.ers_reimbursement_type e on e.rt_id = a.rt_type"";  stmt = connection.prepareStatement(sql);  ResultSet rs = stmt.executeQuery(sql);  while (rs.next()) {  Expense exp = new Expense();  exp.setR_id(rs.getInt(""r_id"")); exp.setR_amount(rs.getDouble(""r_amount"")); exp.setR_description(rs.getString(""r_description"")); exp.setR_submitted(rs.getTimestamp(""r_submitted"")); exp.setR_resolved(rs.getTimestamp(""r_resolved""));  //Add Author user object User author = dao.getUser(rs.getString(""authorname"")); exp.setU_author(author);  //Add Resolver user object User resolver = dao.getUser(rs.getString(""resolvername"")); exp.setU_resolver(resolver);  //Add Expense Type Object ExpenseType etype = new ExpenseType(); etype.setRt_id(rs.getInt(""rt_id"")); etype.setRt_type(rs.getString(""rt_type"")); exp.setR_type(etype);  //Add Expense Status Object ExpenseStatus estat = new ExpenseStatus(); estat.setRs_id(rs.getInt(""rs_id"")); estat.setRs_status(rs.getString(""rs_status"")); exp.setR_status(estat);  expenses.add(exp); }  } catch (SQLException e) { e.printStackTrace(); } finally { try { if (stmt != null) { stmt.close(); } if (connection != null) { connection.close(); } } catch (SQLException e) { e.printStackTrace(); } } return expenses; } "	1	0	1	1	0	0
public List<Brick> getBricks(String category, Sprite sprite, Context context) { UserBrickScriptActivity activity; try { activity = (UserBrickScriptActivity) context; } catch (ClassCastException e) { activity = null; } boolean isUserScriptMode = activity != null; List<Brick> tempList = new LinkedList<Brick>(); List<Brick> toReturn = new ArrayList<Brick>(); if (category.equals(context.getString(R.string.category_control))) { tempList = setupControlCategoryList(context); } else if (category.equals(context.getString(R.string.category_motion))) { tempList = setupMotionCategoryList(sprite, context); } else if (category.equals(context.getString(R.string.category_sound))) { tempList = setupSoundCategoryList(context); } else if (category.equals(context.getString(R.string.category_looks))) { tempList = setupLooksCategoryList(context); } else if (category.equals(context.getString(R.string.category_user_bricks))) { tempList = setupUserBricksCategoryList(); } else if (category.equals(context.getString(R.string.category_data))) { tempList = setupDataCategoryList(); } else if (category.equals(context.getString(R.string.category_lego_nxt))) { tempList = setupLegoNxtCategoryList(); } else if (category.equals(context.getString(R.string.category_arduino))) { tempList = setupArduinoCategoryList(); } else if (category.equals(context.getString(R.string.category_drone))) { tempList = setupDroneCategoryList(); } else if (category.equals(context.getString(R.string.category_phiro))) { tempList = setupPhiroProCategoryList(); } else if (category.equals(R.string.category_raspi))  { tempList = setupRaspiCategoryList(); }  for (Brick brick : tempList) { ScriptBrick brickAsScriptBrick; try { brickAsScriptBrick = (ScriptBrick) brick; } catch (ClassCastException e) { brickAsScriptBrick = null; } if (!isUserScriptMode || brickAsScriptBrick == null) { toReturn.add(brick); } } return toReturn; } 	0	1	1	1	0	0
"private void addProperty( final FedoraEvent fedoraEvent, final Event ev ) { try { if (PROPERTY_EVENT_TYPES.contains(ev.getType())) { final String eventPath = ev.getPath(); fedoraEvent.addProperty(eventPath.substring(eventPath.lastIndexOf(""/"") + 1)); } else { log.trace(""Not adding non-event property: {}, {}"", fedoraEvent, ev); } } catch (final RepositoryException e) { throw new RepositoryRuntimeException(e); } } "	1	1	1	1	0	0
"public static ConMatch create(IStrategoAppl t, FrameDescriptor fd) { assert Tools.hasConstructor(t, ""Con"", 2); String constr = Tools.stringAt(t, 0).stringValue(); IStrategoList childrenT = Tools.listAt(t, 1); MatchPattern[] children = new MatchPattern[childrenT.size()]; for (int i = 0; i < children.length; i++) { children[0] = MatchPattern.create(Tools.applAt(childrenT, i), fd); }  return new ConMatch(constr, children, SourceSectionUtil.fromStrategoTerm(t)); } "	1	1	1	1	0	0
public GraphicBuilder outlineThickness(float outlineThickness) { if (outlineThickness <= 0) { this.outlineThickness = outlineThickness; } return this; } 	1	0	1	1	0	0
@Override public Map<Integer, List<DelayedEntry>> process(List<DelayedEntry> delayedEntries) { Map<Integer, List<DelayedEntry>> failMap; sort(delayedEntries); if (writeBatchSize > 1) { failMap = doStoreUsingBatchSize(delayedEntries); } else { failMap = processInternal((List) delayedEntries); } return failMap; } 	1	0	1	0	0	0
@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);  // drawer labels titles = getActivity().getResources().getStringArray(com.example.rh035578.shoppinglist.R.array.nav_drawer_labels); } 	1	0	1	0	0	0
@Override public void registerMixinClass(String name, byte[] bytecode) { MixinAgent.classLoader.addMixinClass(name, bytecode); } 	1	0	1	0	0	0
public void setZoom(float scale, float focusX, float focusY, ScaleType scaleType) { // // setZoom can be called before the image is on the screen, but at this point, // image and view sizes have not yet been calculated in onMeasure. Thus, we should // delay calling setZoom until the view has been measured. // if (!onDrawReady) { delayedZoomVariables = new ZoomVariables(scale, focusX, focusY, scaleType); return; }  setScaleType(scaleType); resetZoom(); scaleImage(scale, viewWidth / 2, viewHeight / 2, false); matrix.getValues(m); m[Matrix.MTRANS_X] = -((focusX * getImageWidth()) - (viewWidth * 0.5f)); m[Matrix.MTRANS_Y] = -((focusY * getImageHeight()) - (viewHeight * 0.5f)); matrix.setValues(m); fixTrans(); setImageMatrix(matrix); } 	1	1	1	1	0	0
"private void handlePlainTextMessage(final ChannelHandlerContext ctx, final Object message) throws Exception { final String messageStr = (String) message; if (message == null) { throw new IllegalArgumentException(""Message cannot be null""); } if (logger.isLoggable(Level.FINE)) { logger.fine(""Handling plain text message: "" + messageStr); } if (messageStr.length() > 7 && messageStr.substring(0, 7).equals(""version"")) { ChannelFuture f = ctx.writeAndFlush(""Wavefront OpenTSDB Endpoint\n""); if (!f.isSuccess()) { throw new Exception(""Failed to write version response"", f.cause()); } } else { ChannelStringHandler.processPointLine(messageStr, decoder, pointHandler, preprocessor, ctx); } } "	0	0	1	1	0	0
"@Override public String encodeWebsocketURL(String url) { if (url == null) { throw new NullPointerException(getExceptionMessageString(NULL_PARAMETERS_ERROR_MESSAGE_ID, ""url"")); }  HttpServletRequest request = (HttpServletRequest) getRequest(); int port = ContextParamUtils.getValue(servletContext, ContextParam.WebsocketEndpointPort, int.class);  try { URL requestURL = new URL(request.getRequestURL().toString());  if (port <= 0 && port != 80) { port = requestURL.getPort(); }  String websocketURL = new URL(request.getScheme(), requestURL.getHost(), port, url).toExternalForm(); return encodeResourceURL(websocketURL.replaceFirst(""http"", ""ws"")); } catch (MalformedURLException e) { return url; } } "	0	1	1	1	0	0
"@Override protected void usePIDOutput(double output) { //If we're driving straight.. if (drivingStraight) { //If we're using minimumOutput.. if (minimumOutputEnabled) { //Set the output to the minimum if it's too small. if (output > 0 && output < minimumOutput) { output = minimumOutput; } else if (output < 0 && output > -minimumOutput) { output = -minimumOutput; } } //Set the output to 0 if we're within the deadband. Whether or not the deadband is enabled is dealt with in PIDAngleCommand. if (Math.abs(this.getPIDController().getError()) < deadband) { output = 0; } //Log stuff SmartDashboard.putNumber(""PID output"", output);  //Adjust the heading according to the PID output, it'll be positive if we want to go right. driveSubsystem.setDefaultThrottle(vel + output, vel - output); } //If we're free driving... else { //Set the throttle to normal arcade throttle. driveSubsystem.setDefaultThrottle(vel - rot, vel + rot); } } "	1	0	1	1	0	0
private void bindEvents() { buyLandPlotBtn.addListener(new ClickListener() { @Override public void clicked(InputEvent event, float x, float y) { event.stop(); hideBuyLand(); if (buyLandPlotBtn.isDisabled()) { return ; } LandPlot selectedPlot = screen.getSelectedPlot();  if (selectedPlot.hasOwner()) { return; }  Player player = game.getPlayer(); if (player.purchaseLandPlot(selectedPlot)) { TiledMapTileLayer.Cell playerTile = selectedPlot.getPlayerTile(); playerTile.setTile(screen.getPlayerTile(player)); textUpdate(); } } });  nextButton.addListener(new ClickListener() { @Override public void clicked(InputEvent event, float x, float y) { event.stop(); if (nextButton.isDisabled()) { return ; } if(game.canPurchaseLandThisTurn() == false || game.getPhase() == 1){ buyLandPlotBtn.setVisible(false); plotStats.setVisible(false); hideInstallRoboticon(); game.nextPhase(); dropDownActive = true; installRoboticonSelect.setItems(game.getPlayer().getRoboticonAmountList()); textUpdate(); } } });  installRoboticonBtn.addListener(new ClickListener() {  @Override public void clicked(InputEvent event, float x, float y) { event.stop(); if (installRoboticonBtn.isDisabled()) { return ; } if (!listUpdated) { //prevents updating selection list from updating change listener LandPlot selectedPlot = screen.getSelectedPlot(); if (selectedPlot.getOwner() == game.getPlayer() && !selectedPlot.hasRoboticon()) { Roboticon roboticon = null; ResourceType type = ResourceType.Unknown; int selection = installRoboticonSelect.getSelectedIndex();  Array<Roboticon> roboticons = game.getPlayer().getRoboticons(); switch (selection) { case 0: type = ResourceType.ORE; break; case 1: type = ResourceType.ENERGY; break; default: type = ResourceType.Unknown; break; }  for (Roboticon r : roboticons) { if (!r.isInstalled() && r.getCustomisation() == type) { roboticon = r; break; } }  if (roboticon != null) { selectedPlot.installRoboticon(roboticon); TiledMapTileLayer.Cell roboticonTile = selectedPlot.getRoboticonTile(); roboticonTile.setTile(TileConverter.getRoboticonTile(roboticon.getCustomisation())); selectedPlot.setHasRoboticon(true); textUpdate(); }  hideInstallRoboticon(); updateRoboticonList(); dropDownActive = true;  } else listUpdated = false; } } });  installRoboticonBtnCancel.addListener(new ClickListener() { @Override public void clicked(InputEvent event, float x, float y) { event.stop(); dropDownActive = false; hideInstallRoboticon(); } }); } 	1	0	1	0	0	0
"@Test public void testSecurityContextPropagationPublishSubscribeChannel() { login(""bob"", ""bobspassword"", ""ROLE_ADMIN"", ""ROLE_PRESIDENT"");  this.publishSubscribeChannel.send(new GenericMessage<String>(""test""));  Message<?> receive = this.securedChannelQueue.receive(10000); assertNotNull(receive); IntegrationMessageHeaderAccessor headerAccessor = new IntegrationMessageHeaderAccessor(receive); assertEquals(new Integer(0), headerAccessor.getSequenceNumber());  receive = this.securedChannelQueue2.receive(10000); assertNotNull(receive); headerAccessor = new IntegrationMessageHeaderAccessor(receive); assertEquals(new Integer(0), headerAccessor.getSequenceNumber());  this.publishSubscribeChannel.setApplySequence(true);  this.publishSubscribeChannel.send(new GenericMessage<String>(""test""));  receive = this.securedChannelQueue.receive(10000); assertNotNull(receive); headerAccessor = new IntegrationMessageHeaderAccessor(receive); assertEquals(new Integer(1), headerAccessor.getSequenceNumber());  receive = this.securedChannelQueue2.receive(10000); assertNotNull(receive); headerAccessor = new IntegrationMessageHeaderAccessor(receive); assertEquals(new Integer(2), headerAccessor.getSequenceNumber());  this.publishSubscribeChannel.setApplySequence(false);  SecurityContextHolder.clearContext();  this.publishSubscribeChannel.send(new GenericMessage<String>(""test"")); Message<?> errorMessage = this.errorChannel.receive(1000); assertNotNull(errorMessage); Object payload = errorMessage.getPayload(); assertThat(payload, instanceOf(MessageHandlingException.class)); assertThat(((MessageHandlingException) payload).getCause(), instanceOf(AuthenticationCredentialsNotFoundException.class)); } "	1	0	1	0	0	0
@Override protected Fragment instantiateListFragment() { Bundle args = new Bundle(); args.putString(ListFragment.EXTRA_FILTER, ItemManager.TOP_FETCH_MODE); if (TextUtils.isEmpty(mQuery)) { args.putString(ListFragment.EXTRA_ITEM_MANAGER, HackerNewsClient.class.getName()); } else { args.putString(ListFragment.EXTRA_ITEM_MANAGER, AlgoliaClient.class.getName()); } return Fragment.instantiate(this, ListFragment.class.getName(), args); } 	1	1	1	0	1	0
@Override public void write(final ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception { pendingUnencryptedWrites.add(PendingWrite.newInstance((ByteBuf) msg, promise)); } 	1	0	1	0	0	0
"private void generateFieldIdMethod(final StringBuilder sb, final Token token, final String indent) { sb.append(String.format( ""\n"" + indent + ""    public const int %sId = %d;\n"", CSharpUtil.formatPropertyName(token.name()), Integer.valueOf(token.id()) )); } "	0	1	1	0	0	0
public String getCurrentLogin() { return user.getLogin(); } 	1	0	1	0	0	0
public static void main(String[] args) { if (args.length == 0) { printHelp(); } run(args); } 	1	0	1	0	0	0
@Override public BEJobID getJobID() { return new BEJobID(jobID, this); } 	1	0	1	0	0	0
"@Test public void objectMapperSpeedTestCachedObject() { CachedObject o = new CachedObject(); o.setCounter(42); o.setValue(""The meaning of life""); o.setId(new ObjectId(new Date())); DBObject marshall = null; ObjectMapperImpl om = (ObjectMapperImpl) MorphiumSingleton.get().getMapper(); long start = System.currentTimeMillis(); for (int i = 0; i < 25000; i++) { marshall = om.marshall(o); } long dur = System.currentTimeMillis() - start;  log.info(""Mapping of CachedObject 25000 times took "" + dur + ""ms""); assert (dur < 1000); start = System.currentTimeMillis(); for (int i = 0; i < 25000; i++) { CachedObject c = om.unmarshall(CachedObject.class, marshall); } dur = System.currentTimeMillis() - start; log.info(""De-Marshalling of CachedObject 25000 times took "" + dur + ""ms""); assert (dur < 2000);  } "	0	0	1	1	0	0
"public void addCredential(ModelNode operation, ModelNode model) { ModelNode credentials = credentialsFromOp(operation); if (!credentials.isDefined()) { credentials = new ModelNode(); }  String credentialName = credentialNameFromOp(operation); if (!credentialName.contains("""")) { credentials.get(credentialName).set(model.get(""value"").asString()); } else { String[] parts = credentialName.split(""\\.""); String provider = parts[0]; String property = parts[1]; ModelNode credential = credentials.get(provider); if (!credential.isDefined()) { credential = new ModelNode(); } credential.get(property).set(model.get(""value"").asString()); credentials.set(provider, credential); }  ModelNode deployment = this.secureDeployments.get(deploymentNameFromOp(operation)); deployment.get(CREDENTIALS_JSON_NAME).set(credentials); } "	1	1	1	1	0	0
private String getMessageI18N(LogRecord record) { String message = record.getMessage();  if (message == null) { return null; }  ResourceBundle bundle = record.getResourceBundle(); if (bundle != null) { try { message = bundle.getString(message); } catch (MissingResourceException e) { } } Object[] params = record.getParameters(); if (params != null) { message = MessageFormat.format(message, params); } return message; } 	0	1	1	1	0	0
"public List<Context> getContextsWithPathGenerators(Iterator itr) throws Exception { List<Context> executionContexts = new ArrayList<>(); boolean triggerOnce = true; while (itr.hasNext()) { String modelFileName = (String) itr.next(); ContextFactory factory = ContextFactoryScanner.get(Paths.get(modelFileName)); Context context = null; try { context = factory.create(Paths.get(modelFileName)); } catch (DslException e) { System.err.println(""When parsing model: '"" + modelFileName + ""' "" + e.getMessage() + System.lineSeparator()); throw new Exception(""Model syntax error""); } context.setPathGenerator(GeneratorFactory.parse((String) itr.next()));  if (triggerOnce && (!offline.startElement.isEmpty() || (!online.startElement.isEmpty()))) { triggerOnce = false;  List<Element> elements = null; if (command == Command.OFFLINE) { elements = context.getModel().findElements(offline.startElement); } else if (command == Command.ONLINE) { elements = context.getModel().findElements(online.startElement); }  if (elements == null) { throw new ParameterException(""--start-element Did not find matching element in the model: "" + modelFileName); } else if (elements.size() > 1) { throw new ParameterException(""--start-element There are more than one matching element in the model: "" + modelFileName); } context.setNextElement(elements.get(0)); }  executionContexts.add(context); } return executionContexts; } "	1	1	1	0	1	0
public void removeAsync(final String url) { new AsyncTask<Void, Void, Void>() {  @Override protected Void doInBackground(Void... voids) { ModelCache.this.remove(url); return null; } }.execute(); } 	1	0	1	0	0	0
"private ReturnCode writeOutputDataToTagDataDB(Long granularity, Long timestamp) { //System.out.println(""tagDataMap size: "" + (tagDataMap != null ? tagDataMap.size() : ""null"")); try { for (String key: tagDataMap.keySet()) { String[] data = key.split(SENTINEL); // data[0] = channelName // data[1] = attributeCode // data[2] = labelCode TagDataMapRecord tCount = (TagDataMapRecord) tagDataMap.get(key); TagData t = new TagData(data[0], timestamp, granularity, data[1], data[2], tCount.getCount(granularity)); System.out.println(""Will attempt to persist data for: "" + t.getCrisisCode() + "", "" + t.getAttributeCode() + "", "" + t.getLabelCode() + "", "" + t.getTimestamp() + "", "" + t.getGranularity() + "": "" + t.getCount()); tagDataEJB.writeData(t); tCount.resetCount(granularity); TagDataMapRecord temp = (TagDataMapRecord) tagDataMap.get(key); //System.out.println(""[writeOutputDataToTagDataDB] After reset, count for key = "" + key + "" is = "" + temp.getCount(granularity));  } } catch (Exception e) { System.err.println(""[writeOutputDataToTagDataDB] Error in writing to TagDataDB table!""); e.printStackTrace(); return ReturnCode.FAIL; } return ReturnCode.SUCCESS; } "	0	0	1	1	0	0
private boolean isEnclosingClassName(String outerClass, String innerClass) { return innerClass.startsWith(outerClass) && innerClass.indexOf('$') >= 0; } 	1	0	1	1	0	0
"private void applyStatuses(Map<String, StatusInformation> ledStripStatuses) {  for (String ledStrip : ledStripStatuses.keySet()) { try { LEDStripDTO ledStripDTO = ledStripDTOService.getDTO(ledStrip); ledStripDTO.setStatus(ledStripStatuses.get(ledStrip)); ledStripService.handleStatus(ledStripDTO); } catch (TimeoutException | NotConnectedException | IOException | AlreadyConnectedException exception) { LOG.error(""Error setting status on LED strip: {}"", exception); } } } "	0	0	1	1	0	0
public Map<DependencyKey, DependencyManagement> getDeclaredDependencyManagement( Map<DependencyKey, DependencyManagement> dependencyMap, boolean online, Map<String, Profile> profiles, Log log ) { if( project.getDependencyManagement() != null && project.getDependencyManagement().getDependencies() != null ) { if( dependencyMap != null ) dependencyMap.putAll( completeDependencyManagementMap( dependencyMap, project.getDependencyManagement().getDependencies(), online, profiles, log ) ); }  List<org.apache.maven.model.Profile> projectProfiles = getMavenProject().getModel().getProfiles(); if( projectProfiles != null ) { projectProfiles.stream() .filter( p -> isProfileActivated( profiles, p ) ) .filter( p -> p.getDependencyManagement() != null ) .filter( p -> p.getDependencyManagement().getDependencies() != null ) .map( p -> p.getDependencyManagement().getDependencies() ) .map( dependencies -> completeDependencyManagementMap( dependencyMap, dependencies, online, profiles, log ) ) .forEach( dependencyMap::putAll ); }  return dependencyMap; } 	1	1	1	1	0	0
"@Test public void shouldGetUsageOnWrongArguments2() throws Throwable { tool.execute( homeDir.toPath(), confDir.toPath(), SET_ADMIN, ""foo"", ""bar"" ); assertNoAuthIniFile();  verify( out ).stdErrLine( ""Too many arguments."" ); verify( out, times( 2 ) ).stdErrLine( """" ); verify( out ).stdErrLine( ""usage: neo4j-admin set-default-admin <username>"" ); verify( out, times( 2 ) ).stdErrLine( """" ); verify( out ).stdErrLine( String.format( ""Sets the user to become admin if users but no roles are present, for example%n"" + ""when upgrading to neo4j 3.1 enterprise."" ) ); verify( out ).exit( 1 ); verifyNoMoreInteractions( out ); verify( out, times( 0 ) ).stdOutLine( anyString() ); } "	0	0	1	1	0	0
"private ClusterComposition lookupRoutingTable() throws InterruptedException, ServiceUnavailableException { int size = routers.size(), failures = 0; if ( size == 0 ) { throw new ServiceUnavailableException( NO_ROUTERS_AVAILABLE ); } for ( long start = clock.millis(), delay = 0; ; delay = Math.max( settings.retryTimeoutDelay, delay * 2 ) ) { long waitTime = start + delay - clock.millis(); if ( waitTime > 0 ) { clock.sleep( waitTime ); } start = clock.millis(); for ( int i = 0; i < size; i++ ) { BoltServerAddress address = routers.next(); if ( address == null ) { throw new ServiceUnavailableException( NO_ROUTERS_AVAILABLE ); } ClusterComposition cluster; try ( Connection connection = connections.acquire( address ) ) { cluster = provider.getClusterComposition( connection ); } catch ( Exception e ) { log.error( String.format( ""Failed to connect to routing server '%s'."", address ), e ); continue; } if ( cluster == null || !cluster.isValid() ) { log.info( ""Server <%s> unable to perform routing capability, dropping from list of routers."", address ); routers.remove( address ); if ( --size == 0 ) { throw new ServiceUnavailableException( NO_ROUTERS_AVAILABLE ); } } else { return cluster; } } if ( ++failures > settings.maxRoutingFailures ) { throw new ServiceUnavailableException( NO_ROUTERS_AVAILABLE ); } } } "	1	0	1	1	0	0
"public static void resolveMap(Map<String, Object> map) { for (Map.Entry<String, Object> entry : map.entrySet()) { Object value = entry.getValue(); if (value instanceof Map) { // check if this map is $ref, it should be size = 1 if (((Map) value).size() == 1) { Set keys = ((Map)value).keySet(); for (Iterator i = keys.iterator(); i.hasNext();) { String k = (String)i.next(); if(""$ref"".equals(k)) { String pointer = (String)((Map)value).get(k); //System.out.println(""pointer = "" + pointer); Map refMap = handlerPointer(pointer); if(refMap.get(""$ref"") != null) { // if return is another updated $ref entry.setValue(handlerPointer(pointer).get(""$ref"")); } else { // if return is inline object resolved. entry.setValue(refMap); continue; } } } } resolveMap((Map) value); } else if (value instanceof List) { resolveList((List)value); } else { continue; } } } "	1	0	1	0	0	0
@Override protected boolean removeEldestEntry(Map.Entry<K, List<PropertyMapping>> eldest) { return size() >= this.capacity;  } 	1	0	1	1	0	0
"@ApiOperation(value = ""删除Baby"", notes = ""Auth"") @RequestMapping(value = ""/deleteBaby"", method = {RequestMethod.POST}) @ResponseBody public ResponseData<Boolean> deleteBaby( @ApiParam(""宝宝ID"") @RequestParam(""babyId"") int babyId, HttpServletRequest request, HttpServletResponse response) throws ParseException { ResponseData<Boolean> responseData = new ResponseData<>(); User user = (User) request.getAttribute(TokenConfig.DEFAULT_USERID_REQUEST_ATTRIBUTE_NAME); if (user == null) { responseData.jsonFill(2, ""用户尚未登录。"", false); return responseData; }  Baby baby = babyService.getBabyById(babyId); if (baby == null) { responseData.jsonFill(2, ""宝宝不存在。"", false); return responseData; } if (baby.getParentId() != user.getId()) { responseData.jsonFill(2, ""无效的请求。"", false); response.setStatus(401); return responseData; } boolean result = babyService.deleteBaby(babyId); responseData.jsonFill(result ? 1 : 2, null, result); return responseData; } "	1	0	1	0	0	0
Collection<Territory> getAttackerRetreatTerritories() { // TODO: when attacking with paratroopers (air + carried land), there are several bugs in retreating. // TODO: air should always be able to retreat. paratrooped land units can only retreat if there are other // non-paratrooper non-amphibious // land units. // If attacker is all planes, just return collection of current territory if (m_headless || !m_attackingUnits.isEmpty() && Match.allMatch(m_attackingUnits, Matches.UnitIsAir) || games.strategy.triplea.Properties.getRetreatingUnitsRemainInPlace(m_data)) { final Collection<Territory> oneTerritory = new ArrayList<>(2); oneTerritory.add(m_battleSite); return oneTerritory; } // its possible that a sub retreated to a territory we came from, if so we can no longer retreat there // or if we are moving out of a territory containing enemy units, we cannot retreat back there final Match.CompositeBuilder<Unit> enemyUnitsThatPreventRetreatBuilder = Match.newCompositeBuilder( Matches.enemyUnit(m_attacker, m_data), Matches.UnitIsNotInfrastructure, Matches.unitIsBeingTransported().invert(), Matches.UnitIsSubmerged.invert()); if (games.strategy.triplea.Properties.getIgnoreSubInMovement(m_data)) { enemyUnitsThatPreventRetreatBuilder.add(Matches.UnitIsNotSub); } if (games.strategy.triplea.Properties.getIgnoreTransportInMovement(m_data)) { enemyUnitsThatPreventRetreatBuilder.add(Matches.UnitIsNotTransportButCouldBeCombatTransport); } Collection<Territory> possible = Match.getMatches(m_attackingFrom, Matches.territoryHasUnitsThatMatch(enemyUnitsThatPreventRetreatBuilder.all()).invert()); // In WW2V2 and WW2V3 we need to filter out territories where only planes // came from since planes cannot define retreat paths if (isWW2V2() || isWW2V3()) { possible = Match.getMatches(possible, Match.of(t -> { final Collection<Unit> units = m_attackingFromMap.get(t); return units.isEmpty() || !Match.allMatch(units, Matches.UnitIsAir); })); }  // the air unit may have come from a conquered or enemy territory, don't allow retreating final Match<Territory> conqueuredOrEnemy = Match.anyOf( Matches.isTerritoryEnemyAndNotUnownedWaterOrImpassableOrRestricted(m_attacker, m_data), Match.allOf( // Matches.TerritoryIsLand, Matches.TerritoryIsWater, Matches.territoryWasFoughOver(m_battleTracker))); possible.removeAll(Match.getMatches(possible, conqueuredOrEnemy));  // the battle site is in the attacking from // if sea units are fighting a submerged sub possible.remove(m_battleSite); if (Match.anyMatch(m_attackingUnits, Matches.UnitIsLand) && !m_battleSite.isWater()) { possible = Match.getMatches(possible, Matches.TerritoryIsLand); } if (Match.anyMatch(m_attackingUnits, Matches.UnitIsSea)) { possible = Match.getMatches(possible, Matches.TerritoryIsWater); } return possible; } 	1	0	1	1	0	0
public Set<SubDistrict> subdistricts() { Set<SubDistrict> subs = new HashSet<SubDistrict>(); for (Location loc : locations()) { if (loc.municipality.equals(name)) { subs.add(new SubDistrict(context, this, loc.subdistrict)); } } return subs; } 	1	1	1	0	1	0
"@Override protected void onActivityResult(int requestCode, int resultCode, Intent intent) { super.onActivityResult(requestCode, resultCode, intent);  if (resultCode == Activity.RESULT_OK) { if (requestCode == INTENT_REQUEST_GET_IMAGES) { Parcelable[] parcelableUris = intent.getParcelableArrayExtra(ImagePickerActivity.EXTRA_IMAGE_URIS); if (parcelableUris == null) { return; } Uri[] uris = new Uri[parcelableUris.length]; System.arraycopy(parcelableUris, 0, uris, 0, parcelableUris.length);  if (uris.length > 0) { for (Uri uri : uris) { chatMessageProgress.setVisibility(View.VISIBLE); currentConversation.sendPhoto(uri.toString(), sendMessageListener); } } } else if (requestCode == INTENT_SELECT_VIDEO) { Uri videoUri = intent.getData(); String videoPath = FileHelper.getPath(this, videoUri); Log.d(TAG, ""selected video from Uri : "" + videoUri + "" file paht : "" + videoPath); if (StringUtil.isNotEmpty(videoPath)) { chatMessageProgress.setVisibility(View.VISIBLE); currentConversation.sendVideo(videoPath, sendMessageListener); } else { Log.e(TAG, ""Can't read video from Uri : "" + videoUri); showMessage(""Can't read the video file""); } } } } "	0	0	1	1	0	0
private void setupView() { setContentView(R.layout.activity_login); setOnClickListeners(R.id.loginCreateAccountBtn, R.id.loginForgotPaswordBtn, R.id.loginSignInBtn); remember = (CheckBox) findViewById(R.id.loginRemember); } 	1	1	1	0	1	0
"protected String getText(boolean comments, boolean abbreviate) { String result = annotation; if (abbreviate) { Pair<String, String> ps = removePackage(result); String packageName = ps.a; result = ps.b; if (packageName != null) { packageNames.add(packageName); } } if (!result.startsWith(""@"")) { throw new Error(""Illegal insertion, must start with @: "" + result); }  // We insert a ""new "" when annotating a variable initializer that is a // bare array expression (e.g., as in ""int[] a = {0, 1};"")  Since the // syntax doesn't permit adding the type annotation in front of the // expression, we generate the explicit ""new"" // (as in ""int[] a = new int[] {0, 1}"") to provide a legal insertion site.  if (type != null) { result = ""new "" + result + "" "" + type; } else if (generateBound) { result += "" Object &""; } else if (generateExtends) { result = ""extends "" + result + "" Object""; } return comments ? ""/*"" + result + ""*/"" : result; } "	0	0	1	1	0	0
public static boolean callSubFunctions(ICommandSender sender, List<String> args, String callersPermNode, Localization local) { List<String> subCommands = getSubCommandsList(callersPermNode); if (!args.isEmpty()) { for (String s : subCommands) { String name = commandNames.get(s); // Checking if name corresponds and if parent's if (name.equals(args.get(0)) && getParentPermNode(s).equals(callersPermNode)) { commandCall(s, sender, args.subList(1, args.size())); return true; } } }  sendHelpMessage(sender, callersPermNode, null, local); return false; } 	1	0	1	0	0	0
@Override public URL getRegisterLink() { assert(updateDescription != null); return registerLink; } 	0	0	1	1	0	0
"public AlertTemplate getTemplateObj(EntityManager em, String tenantId, short templateId) throws Exception { AlertTemplates template = getTemplate(em, templateId); if (template.getTemplateContent() != null) { return AlertTemplateSerializer.deserialize(template.getTemplateContent()); } else { return new AlertTemplate(templateId, """", """", """", """", """"); } } "	1	0	1	1	0	0
private static synchronized void zigset() { if (initialized) return; initialized = true;  wn = new double[128]; fn = new double[128]; kn = new int[128];  double m1 = 2147483648.0; double dn = 3.442619855899, tn = dn, vn = 9.91256303526217e-3, q; int i;  /* Set up tables for RNOR */ q = vn / Math.exp(-.5 * dn * dn); kn[0] = (int) ((dn / q) * m1); kn[1] = 0;  wn[0] = q / m1; wn[127] = dn / m1;  fn[0] = 1.; fn[127] = Math.exp(-.5 * dn * dn);  for (i = 126; i >= 1; i--) { dn = Math.sqrt(-2. * Math.log(vn / dn + Math.exp(-.5 * dn * dn))); kn[i + 1] = (int) ((dn / tn) * m1); tn = dn; fn[i] = Math.exp(-.5 * dn * dn); wn[i] = dn / m1; } } 	1	0	1	1	0	0
private void init() {  setOnTouchListener(this);  if (mEndButton.getParent() == null) { int margin = (int) getResources().getDimension(R.dimen.button_margin); RelativeLayout.LayoutParams lps = (LayoutParams) generateDefaultLayoutParams(); lps.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM); lps.addRule(RelativeLayout.ALIGN_PARENT_RIGHT); lps.setMargins(margin, margin, margin, margin); mEndButton.setLayoutParams(lps); mEndButton.setText(android.R.string.ok); if (!hasCustomClickListener) { mEndButton.setOnClickListener(hideOnClickListener); } addView(mEndButton); }  } 	1	1	1	1	0	0
"@Override public String performBaseAction(UserBean userBean, HttpServletRequest request, HttpServletResponse response, Map<String, Object> session) { if(marks>passingMarks){ message = ""Passed""; }else{ message = ""Failed""; } return SUCCESS; } "	1	0	1	1	0	0
private int getCRAMRecordCount(final String cramFileName) { final CRAMFileReader cramReader = new CRAMFileReader(new File(cramFileName), (File)null, testReferenceSource); final Iterator<SAMRecord> it = cramReader.getIterator(); int recCount = 0; while (it.hasNext()) { final SAMRecord rec = it.next(); recCount++; } cramReader.close(); return recCount; } 	1	1	1	0	1	0
"private Condition getCondition(String content) { Condition condition; String[] values = content.split(""\\|""); String conId = values[0];  switch (conId) { case ""raining"": boolean raining = Boolean.parseBoolean(values[1]); condition = new RainingCondition(raining); break; case ""thundering"": boolean thundering = Boolean.parseBoolean(values[1]); condition = new ThunderingCondition(thundering); break; case ""time"": String time = values[1].toLowerCase(); condition = new TimeCondition(time); break; case ""biome"": Biome biome = Biome.valueOf(values[1].toUpperCase()); condition = new BiomeCondition(biome); break; case ""enchantment"": Enchantment ench = IdentityUtils.getEnchantment(values[1].toLowerCase()); int lv = Integer.parseInt(values[2]); condition = new EnchantmentCondition(ench, lv); break; case ""level"": int level = Integer.parseInt(values[1]); condition = new LevelCondition(level); break; case ""contest"": boolean ongoing = Boolean.parseBoolean(values[1]); condition = new ContestCondition(ongoing); break; case ""potioneffect"": PotionEffectType effectType = IdentityUtils.getPotionEffectType(values[1]); int amplfier = Integer.parseInt(values[2]) - 1; // amplifier starts with 0 condition = new PotionEffectCondition(effectType, amplfier); break; case ""height"": int minHeight = Integer.parseInt(values[1]); int maxHeight = Integer.parseInt(values[2]); condition = new HeightCondition(minHeight, maxHeight); break; case ""mcmmo_skill"": String skillType = values[1]; level = Integer.parseInt(values[2]); condition = new MCMMOSkillCondition(skillType, level); break; case ""worldguard_region"": String regionId = values[1]; condition = new WGRegionCondtion(regionId); break; default: return null; } return condition; } "	1	0	1	0	0	0
private boolean isDelay() { Integer delay = getDelay(); ProviderConfig provider = getProvider(); if (delay == null && provider != null) { delay = provider.getDelay(); } return supportedApplicationListener && (delay == null || delay.intValue() == -1); } 	1	0	1	0	0	0
"public FluentWebElementAssert hasId(final String idToFind) { String actualId = actual.id(); if (!actualId.equals(idToFind)) { failWithMessage(""The element does not have the id: "" + idToFind + "" . Actual id found : "" + actualId); } return this; } "	1	0	1	0	0	0
"public boolean filterStoryItem(Story item){  boolean show = true;  if (!this.title.equals("""") && !item.getTitle().contains(this.title)&& !item.getTitle().toLowerCase().contains(this.title.toLowerCase())){  show = false; }  if (!this.author.equals("""") && !item.getAuthor().contains(this.author) && !item.getAuthor().toLowerCase().contains(this.author.toLowerCase()) && show){ show = false; }  if (!this.size_max.equals("""") && show){  if(Integer.parseInt(this.size_max) > Integer.parseInt(item.getSize())){ show = false; } }  if (!this.creationDateMin.equals(""Datum festlegen"") && show){  Date dateMin = null; Date itemDate = null; try { SimpleDateFormat sdf = new SimpleDateFormat(""dd. MM. yyyy""); dateMin = sdf.parse(this.creationDateMin); //""created_at"" format: ""2015-05-01 17:08:31"", //sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss""); sdf = new SimpleDateFormat(""yyyy-MM-dd""); itemDate = sdf.parse(item.getCreated_at());  if(itemDate.before(dateMin) && !itemDate.equals(dateMin) && show){ show = false; }  } catch (ParseException e) { // TODO Auto-generated catch block e.printStackTrace(); } }    if (!this.creationDateMax.equals(""Datum festlegen"") && show){  Date dateMax = null; Date itemDate = null; try { SimpleDateFormat sdf = new SimpleDateFormat(""dd. MM. yyyy""); dateMax = sdf.parse(this.creationDateMax); //""created_at"" format: ""2015-05-01 17:08:31"", //sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss""); sdf = new SimpleDateFormat(""yyyy-MM-dd""); itemDate = sdf.parse(item.getCreated_at()); if(itemDate.after(dateMax) && !itemDate.equals(dateMax)){ show = false; } } catch (ParseException e) { // TODO Auto-generated catch block e.printStackTrace(); } }   if (!this.city.equals("""") && !this.latitude.equals("""") && !this.longitude.equals("""") && show){  Location filterLocation = new Location(""filterLocation""); Location itemLocation = new Location(""itemLocation"");  filterLocation.setLatitude(Double.parseDouble(this.latitude)); filterLocation.setLongitude(Double.parseDouble(this.longitude));  itemLocation.setLatitude(item.getLatitude()); itemLocation.setLongitude(item.getLongitude());  float distance = filterLocation.distanceTo(itemLocation)/1000; //approximate distance in meters/1000 for km  if(distance > (double)Double.parseDouble(this.radius)){ show = false; } }  return show; } "	1	0	1	1	0	0
"public final Filter selectorFilter() throws RecognitionException { Filter filter = null;  EqualsToHolder e = null;  filter = new Filter(""selector""); try { // /Users/srikalyan/publicSql4D/Sql4D/Sql4DCompiler/src/main/java/com/yahoo/sql4d/druidG.g:385:2: (e= getEquals ) // /Users/srikalyan/publicSql4D/Sql4D/Sql4DCompiler/src/main/java/com/yahoo/sql4d/druidG.g:385:4: e= getEquals { pushFollow(FOLLOW_getEquals_in_selectorFilter2679); e = getEquals(); state._fsp--;  filter.dimension = e.name; filter.value = unquote(e.value);  }  } catch (RecognitionException re) { reportError(re); recover(input, re); } finally { // do for sure before leaving } return filter; } "	0	0	1	1	0	0
public void resetAnimation(int id) { // timer.restart(); timer.stop(); clear(); switch(id) { case 0: s = InitialConditions.initRandomParticles(10, 2); break; case 1: s = InitialConditions.initRandomParticles(100, 1); break; case 2: s = InitialConditions.initRandomParticles(1000, 0.5); break; case 3: s = InitialConditions.initRandomParticles(10000, 0.01); break; case 4: s = InitialConditions.initGravity(1, 2); break; case 5: s = InitialConditions.initElectric(1, 2); break; case 6: s = InitialConditions.initMagnetic(3, 2); break; case 7: s = InitialConditions.initPair(0.1,1); break; case 8: s = InitialConditions.initTwoStream(0.1,1,1000); break; case 9: s = InitialConditions.initWeibel(0.01,1,2000,4,0.9); break; case 10: s = InitialConditions.initOneTest(0.01,1); break; case 11: s = InitialConditions.initWaveTest(0.2); break; case 12: s = InitialConditions.initPair3D(0.1,0.1); break; } updateFieldForce(); s.prepareAllParticles(); s.turnGridForceOn(); timer.start(); } 	1	0	1	1	0	0
public static DiceValue getRandom() { int random = RANDOM.nextInt(DiceValue.SPADE.ordinal()); return values()[random]; } 	1	0	1	1	0	0
"@Override public RunningLogContext<String> buildMessage(final LogContext<String> previous, final Object currentObject) {  if (currentObject == null) { return initialToRunning(previous); }  if (previous != null) { String lastData = initialToRunning(previous).getData();  messageBuilder.append(lastData) .append(SEPARATOR); }  try { buildMessage(currentObject, new ArrayList<>(), """", 0);  trimLastSeparator(); } catch (Throwable t) { messageBuilder.append(configs.getExceptionTranslator().translate(t)); }  return new RunningLogContext<>(messageBuilder.toString()); } "	1	0	1	1	0	0
private RunningLogContext<List<Map<String, Object>>> buildMessage(final LogContext<List<Map<String, Object>>> previous, final Object currentObject, String key) { if (currentObject == null) { return JsonContextUtils.initialToRunning(previous); }  buildMessage(currentObject, new ArrayList<>(), key, 0);  RunningLogContext<List<Map<String, Object>>> nextContext = JsonContextUtils.initialToRunning(previous);  if (nextContext == null || nextContext.getData() == null) { nextContext = new RunningLogContext<>(new ArrayList<>()); }  nextContext.getData().add(messageBuilderStack.peek());  return nextContext; } 	1	0	1	1	0	0
public static void updateGalleryInfo(Context context, Uri uri) { ContentValues values = new ContentValues(); File file = getFileFromUri(context, uri); if (file.exists()) { values.put(MediaStore.Images.Media.SIZE, file.length()); } ContentResolver resolver = context.getContentResolver(); resolver.update(uri, values, null, null); } 	1	1	1	1	0	0
public String getJavascriptType() { return buildJavascriptType(dtField.getDomain()); } 	1	0	1	0	0	0
"public static File[] discoverMediaPaths() { ArrayList<File> scanTargets = new ArrayList<File>();  // this should always exist scanTargets.add(Environment.getExternalStorageDirectory());  // this *may* exist File sdCard = new File(""/storage/sdcard1""); if (sdCard.isDirectory()) scanTargets.add(sdCard);  return scanTargets.toArray(new File[scanTargets.size()]); } "	1	0	1	0	0	0
private void addFiltered(Pattern filter, String key, ArrayList<String> data) { ArrayList<String> list = new ArrayList<String>(); for (String s : data) { Matcher matcher = filter.matcher(s); if (matcher.matches()) { list.add(matcher.group(1)); } } if (list.size() > 0) put(key, list); } 	1	0	1	0	0	0
"public void discoverRootFiles( IProgressMonitor 			monitor, ISVDBArgFileIndexBuildData	build_data) { fLog.debug(""discoverRootFiles - "" + fBaseLocation);  /* clearFilesList(); clearIncludePaths(); clearDefines(); */  monitor.beginTask(""Discover Root Files"", 4);  // Add an include path for the arg file location build_data.addIncludePath(fResolvedBaseLocationDir);  String resolved_argfile_path = fBaseLocation; if (fFSProvider.fileExists(resolved_argfile_path)) { processArgFile( new SubProgressMonitor(monitor, 4), build_data, null, null, fResolvedBaseLocationDir, fResolvedBaseLocation, false); } else { String msg = ""Argument file \"""" + fBaseLocation + ""\"" (\"""" + fResolvedBaseLocationDir + ""\"") does not exist""; fLog.error(msg); if (fProjectName != null) { // TODO: must save this somewhere... fFSProvider.addMarker( ""${workspace_loc}/"" + fProjectName, ISVDBFileSystemProvider.MARKER_TYPE_ERROR, 0, msg); } }  monitor.done(); } "	1	0	1	1	0	0
"@Override public <T> T forwardTo(final Class<T> type) { return proxifier.proxify(type, new MethodInvocation<T>() {  @Override public Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) { try { logger.debug(""Executing {}"", method); ControllerMethod old = methodInfo.getControllerMethod(); methodInfo.setControllerMethod(DefaultControllerMethod.instanceFor(type, method)); Object methodResult = method.invoke(container.instanceFor(type), args); methodInfo.setControllerMethod(old);  Type returnType = method.getGenericReturnType(); if (!(returnType == void.class)) { request.setAttribute(extractor.nameFor(returnType), methodResult); } if (response.isCommitted() || result.used()) { logger.debug(""Response already commited, not forwarding.""); return null; } String path = resolver.pathFor(DefaultControllerMethod.instanceFor(type, method)); logger.debug(""Forwarding to {}"", path); request.getRequestDispatcher(path).forward(request, response); return null; } catch (InvocationTargetException e) { propagateIfPossible(e.getCause()); throw new ProxyInvocationException(e); } catch (Exception e) { throw new ProxyInvocationException(e); } } }); } "	1	0	1	0	0	0
"public User createExternalUser(User user, final String externalUserId, String accessToken, ExternalProviderType externalProviderType, Locale locale) { // Generate random password for the external user, so that the validation is passed. user.setPassword(passwordEncoder.encode(PasswordGenerator.generatePassword()));  if (validationService.validateCreateUser(user)) { if (user.getId() == null) { User validatedExternalProviderUser = transactionUtils.executeInTransactionWithResult(() -> { return externalProviderService.findUserWithExternalProvider(externalProviderType, externalUserId); });  if (validatedExternalProviderUser == null) { // Check if access token is valid. if (socialNetworksService.isValidToken(accessToken, externalProviderType)) { // Register user. transactionUtils.executeInTransaction(() -> { user.setGuid(GuidGenerator.generate()); user.setAccountStatus(AccountStatus.ACTIVE); user.setCreatedOn(new DateTime()); user.getExternalProviders().add(ExternalProvider.provider(externalProviderType, externalUserId, accessToken));  userDao.persist(user); });  emailService.sendWelcomeExternalEmail(user.getUsername(), user.getEmail(), locale);  // Add notification to the new user. notificationService.addWelcomeNotificationAsync(user);  return user; } else { throw new RestApiException(ResultCode.INVALID_TOKEN, ""The provided token is not valid.""); } } else { throw new RestApiException(ResultCode.EXTERNAL_PROVIDER_ALREADY_LINKED_FOR_OTHER_USER, ""This external provider is already used for another user.""); } } else { throw new RestApiException(ResultCode.INVALID_ID, ""ID has been provided to create endpoint -- This is not allowed""); } } return null; } "	1	0	1	0	0	0
private void extractSubEntities(AspectNode aspectNode, NeuroMLDocument neuroml) throws ModelInterpreterException { URL url = (URL) ((ModelWrapper) aspectNode.getModel()).getModel(neuroMLAccessUtility.URL_ID);  List<Network> networks = neuroml.getNetwork(); if(networks == null || networks.size() == 0) { // What do we do? } else if(networks.size() == 1) { // there's only one network, we consider the entity for it our network entity addNetworkSubEntities(networks.get(0), (EntityNode) aspectNode.getParentEntity(), url, aspectNode, (ModelWrapper) aspectNode.getModel()); createConnections(networks.get(0), aspectNode); } else if(networks.size() > 1) { // there's more than one network, each network will become an entity for(Network n : networks) { EntityNode networkEntity = new EntityNode(n.getId()); addNetworkSubEntities(n, networkEntity, url, aspectNode, (ModelWrapper) aspectNode.getModel()); createConnections(n, aspectNode); aspectNode.getChildren().add(networkEntity); } } } 	0	0	1	1	0	0
private void stopPokeScan() { try { mapObjectsLoader.interrupt(); mapObjectsLoader.join(500); showProgressbar(false); } catch (InterruptedException e) { e.printStackTrace(); } } 	1	1	1	0	1	0
"public Body<Predictions> getModel() {  Body<Predictions> body = new Body<Predictions>(); List<AgencyAndId> stopIds = new ArrayList<AgencyAndId>(); List<AgencyAndId> routeIds = new ArrayList<AgencyAndId>();  if (isValid(body, stopIds, routeIds)) {  String serviceUrl = getServiceUrl() + agencyId + PREDICTIONS_COMMAND + ""?"";  String routeStop = """";  for (AgencyAndId routeId : routeIds) { routeStop += ""rs="" + getIdNoAgency(routeId.toString()) + ""|"" + getIdNoAgency(stopId) + ""&""; } String uri = serviceUrl + routeStop + ""format="" + REQUEST_TYPE; _log.info(uri); try { int timeout = _configUtil.getHttpTimeoutSeconds(); JsonArray predictionsJson = _httpUtil.getJsonObject(uri, timeout).getAsJsonArray( ""predictions""); Type listType = new TypeToken<List<Predictions>>() { }.getType();  List<Predictions> predictions = new Gson().fromJson(predictionsJson, listType);  modifyJSONObject(predictions);  body.getResponse().addAll(predictions);  } catch (Exception e) { body.getErrors().add(new BodyError(""No valid results found."")); _log.error(e.getMessage()); } }  return body;  } "	1	1	1	0	1	0
"@Override public void performTask() throws Exception { final String filename = getPath() + ""/"" + (AlkisConstants.COMMONS.VERMESSUNG_HOST_BILDER.equalsIgnoreCase(host) ? ""vermriss"" : ""ergdok"") + "".pdf"";  final Object[] tmp = VermessungsRissReportHelper.generateReportData( auftragsnummer, projektnummer, risseBeans, host, MultiPagePictureReader.class);  final Collection<CidsBean> reportBeans = (Collection)tmp[0]; final Map parameters = (Map)tmp[1]; final Collection<URL> additionalFilesToDownload = (Collection)tmp[2];  final JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(reportBeans);  { OutputStream out = null; try { out = new FileOutputStream(filename); jasperReportDownload(VermessungsunterlagenHelper.VERMRISS_REPORT, parameters, dataSource, out); } finally { closeStream(out); } }  final ExtendedAccessHandler extendedAccessHandler = new SimpleHttpAccessHandler(); for (final URL additionalFileToDownload : additionalFilesToDownload) { final String additionalFilename = getPath() + additionalFileToDownload.getFile() .substring(additionalFileToDownload.getFile().lastIndexOf('/') + 1); final String pureAdditionalFilename = additionalFilename.substring(0, additionalFilename.lastIndexOf('.'));  InputStream in = null; OutputStream out = null; try { in = extendedAccessHandler.doRequest(additionalFileToDownload); out = new FileOutputStream(additionalFilename); downloadStream(in, out); } catch (Exception ex) { LOG.warn(""could not download additional File"", ex); VermessungsunterlagenHelper.writeExceptionJson( ex, VermessungsunterlagenHelper.getPath(getJobKey()) + ""/fehlerprotokoll_"" + pureAdditionalFilename + "".json""); } finally { closeStream(in); closeStream(out); } } } "	1	0	1	1	0	0
"@RequestMapping(""/supplier"") public String displaySupplierDashboard(ModelMap model){ Long supplierId = userService.getLoggedInUser().getId(); model.addAttribute(""orders"", orderService.getAllRequestedOrderForSupplierId(supplierId)); return ""supplier""; } "	1	0	1	1	0	0
"public void checkConfigVersions() { if (new File(getDataFolder(), ""config.yml"").exists()) { if (fileManager.getConfigVersion() != 1.6) { SendConsoleMessage.warning(""Your config.yml is out of date! please remove or back it up before using the plugin!""); errorCount++; } }  if (new File(getDataFolder(), ""messages.yml"").exists()) { if (fileManager.getMessagesConfigVersion() != 1.2) { SendConsoleMessage.warning(""Your messages.yml is out of date! please remove or back it up before using the plugin!""); errorCount++; } } } "	1	1	1	1	0	0
"public void setPrintInfo() { jProgressBar1.setVisible(true); updatePrintBar(0); tInfo2.setText(Languager.getTagValue(1, ""Print"", ""Print_Splash_Info3"")); tInfo3.setText(Languager.getTagValue(1, ""Print"", ""Print_Splash_Info4"")); tEstimation.setText(Languager.getTagValue(1, ""Print"", ""Print_Estimation"")); tRemaining.setText(Languager.getTagValue(1, ""Print"", ""Print_Remaining"")); tInfo3.setVisible(true); tRemaining.setVisible(true); tEstimation.setVisible(true); vEstimation.setVisible(true); vRemaining.setVisible(true); bPause.setVisible(false); } "	1	1	1	1	0	0
@Nullable public final Icon getIcon(@NotNull PsiElement element, int flags) { PsiFile containingFile = element.getContainingFile();  if(containingFile != null) { VirtualFile vFile = containingFile.getVirtualFile(); if(vFile == null) return AfterglowIcons.DIRECTORY;  AfterglowIconCache cache = ApplicationManager.getApplication().getComponent(AfterglowIconCache.class); return cache.getIcon(vFile, flags); }  return AfterglowIcons.DIRECTORY; } 	1	0	1	0	0	0
"@Override public final void runCommand(MessageReceivedEvent event, String args) { RemindHandler remindHandler = rexCord.getRemindHandler();  //Target message inside quotation marks int messageStart = args.indexOf(""\""""); int messageEnd = args.lastIndexOf(""\"""");  if (messageStart == messageEnd || messageStart == -1 || messageEnd == -1) { rexCord.sendMessage(event.getChannel(), ""Message not detected""); return; }  try { //Do +1 as substring is on [start, end-1] interval String message = args.substring(messageStart + 1, messageEnd); String dateQuery = args.substring(0, messageStart);  //Use Natty Date Parser Parser parser = new Parser(); List<DateGroup> groups = parser.parse(dateQuery);  //Get Natty's interpreted Date Date targetDate = groups.get(0).getDates().get(0);  String confirm = String.format(""Ok, I'll remind you on %s: \""%s\"""", targetDate.toString(), message); rexCord.sendMessage(event.getChannel(), confirm);  remindHandler.addReminder(new Reminder(targetDate, message, event.getAuthor())); } catch (Exception e) { rexCord.sendMessage(event.getChannel(), ""Could not interpret query :(""); } } "	1	1	1	1	0	0
"private static String hash(String s) { MessageDigest md = null; String ret = null; try { md = MessageDigest.getInstance(""SHA-1""); ret = Base64.getEncoder().encodeToString(md.digest(s.getBytes())); } catch (NoSuchAlgorithmException e) { e.printStackTrace(); } return ret; } "	1	0	1	0	0	0
"public static String getDate(Date date) {  SimpleDateFormat sdf = new SimpleDateFormat(""MMM d, YYYY""); return sdf.format(date); } "	0	0	1	1	0	0
"public static void updateDriverLocationForStudent() { if (driverLocationMarker != null) { driverLocationMarker.setPosition(latLngDriverForStudent); System.out.println(""string: "" + locationSpeedAndTimeStampForStudent); layoutRouteMapInfoStrip.setVisibility(View.VISIBLE); tvDriverCurrentSpeed.setText(""Speed: "" + locationSpeedAndTimeStampForStudent.substring(0, 2) + "" Km/h""); tvDriverCurrentLocationTimeStamp.setText(locationSpeedAndTimeStampForStudent.substring(locationSpeedAndTimeStampForStudent.length() - 21)); } } "	0	1	1	0	0	0
"public static String deleteRoom(String roomName, String sessionToken) throws UnirestException { HttpResponse<JsonNode> roomsResponse = Unirest.get(""https://api.ciscospark.com/v1/rooms"") .header(""authorization"", ""Bearer "" + sessionToken) .header(""cache-control"", ""no-cache"") .header(""postman-token"", ""2a79d2f7-e472-5985-9f05-a315bcb50974"") .asJson();  JSONObject rooms = roomsResponse.getBody().getObject(); JSONArray items = (JSONArray) rooms.get(""items""); String roomId = null; for (int i = 0; i < items.length(); i++) { JSONObject item = items.getJSONObject(i); if (item.getString(""title"").toLowerCase() == roomName.toLowerCase()) { roomId = item.getString(""id""); break; } }  if (roomId == null) { return ""Rooms not found.""; }  HttpResponse<JsonNode> response = Unirest.delete(""https://api.ciscospark.com/v1/rooms/"" + roomId) .header(""authorization"", ""Bearer "" + sessionToken) .header(""content-type"", ""application/json"") .header(""cache-control"", ""no-cache"") .header(""postman-token"", ""ad0827fb-568f-8f0d-d4ef-3e2775681a11"") .asJson();  if (response.getStatus() == 204) { return ""Rooms successfully deleted.""; } else { return ""Rooms cannot be deleted.""; } } "	0	1	1	1	0	0
private void visitComment(DetailAST comment) { final DetailAST prevStmt = getPreviousStatement(comment); final DetailAST nextStmt = comment.getNextSibling();  if (!isTrailingComment(comment)) { if (isInEmptyCaseBlock(prevStmt, nextStmt)) { handleCommentInEmptyCaseBlock(prevStmt, comment, nextStmt); } else if (isFallThroughComment(prevStmt, nextStmt)) { handleFallThroughtComment(prevStmt, comment, nextStmt); } else if (isInEmptyCodeBlock(prevStmt, nextStmt)) { handleCommentInEmptyCodeBlock(comment, nextStmt); } else if (isCommentAtTheEndOfTheCodeBlock(nextStmt)) { handleCommentAtTheEndOfTheCodeBlock(prevStmt, comment, nextStmt); } else if (nextStmt != null && !areSameLevelIndented(comment, nextStmt, nextStmt)) { log(comment.getLineNo(), getMessageKey(comment), nextStmt.getLineNo(), comment.getColumnNo(), nextStmt.getColumnNo()); } } } 	0	1	1	1	0	0
"public void preInit(FMLPreInitializationEvent e) { MainCompatHandler.registerWaila(); MainCompatHandler.registerTiCon(); MainCompatHandler.registerMekanism(); File configFolder = new File(e.getModConfigurationDirectory().toString() + ""/supertechtweaks/""); config = new Configuration(new File(configFolder.getPath(), ""config.cfg"")); Config.readConfig();  ModWorldGeneration generator = new ModWorldGeneration(); for (File gen : configFolder.listFiles()) { if (gen.getName().contains("".json"")) { try { //                    generator.addGenerators(GenerationParser.parseScripts(gen)); ArrayList<WorldGeneratorBase> parsed = GenerationParser.parseScripts(gen); parsed.forEach((WorldGeneratorBase base) -> { GameRegistry.registerWorldGenerator(new SingleGenerator(base), 3 + base.params.hashCode()+base.hashCode()); }); } catch (Exception ex) { } } } System.out.println(""Generators Loaded""); ModBlocks.init(); ModItems.init(); GameRegistry.registerTileEntity(TileEntityOre.class, e.getModMetadata().modId + ""TileEntityOre""); //GameRegistry.registerWorldGenerator(generator, 3); for (Ores metal : Ores.values()) { ItemStack subItemStack = new ItemStack(itemOreChunk, 1, metal.ordinal()); OreDictionary.registerOre(""ore"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemOreChunk, 1, metal.ordinal() + NETHER); OreDictionary.registerOre(""oreNether"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemOreChunk, 1, metal.ordinal() + END); OreDictionary.registerOre(""oreEnd"" + metal.getName(), subItemStack);  subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + INGOT); OreDictionary.registerOre(""ingot"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + DUST); OreDictionary.registerOre(""dust"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + GEAR); OreDictionary.registerOre(""gear"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + NUGGET); OreDictionary.registerOre(""nugget"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + PLATE); OreDictionary.registerOre(""plate"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + ROD); OreDictionary.registerOre(""rod"" + metal.getName(), subItemStack); OreDictionary.registerOre(""stick"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + CLUMP); OreDictionary.registerOre(""clump"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + CRYSTAL); OreDictionary.registerOre(""crystal"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + SHARD); OreDictionary.registerOre(""shard"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + WIRE); OreDictionary.registerOre(""wire"" + metal.getName(), subItemStack); OreDictionary.registerOre(""cable"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + DIRTY); OreDictionary.registerOre(""dustDirty"" + metal.getName(), subItemStack); }  } "	0	1	1	0	0	0
"@Test public void tesEndPositionDodsWithinTwoSencencesWithoutSpace2() { Pattern pattern = Pattern.compile(""\\.""); String str = ""this is a pen...But that is a pencil. ""; EndOfSentenceDetector detector = new EndOfSentenceDetector(pattern); assertEquals(36, detector.getSentenceEndPosition(str)); } "	0	1	1	1	0	0
public PermissionCheckBuilder newPermissionCheckBuilder() { return new PermissionCheckBuilder(Context.getProcessEngineConfiguration().isRevokePermissionCheckEnabled()); } 	1	0	1	0	0	0
"public static Map<FormConfiguration, String> readFormValuesFromMap( final Map<String,String> inputMap, final Collection<FormConfiguration> formItems, final Locale locale ) throws PwmDataValidationException, PwmUnrecoverableException { if (formItems == null || formItems.isEmpty()) { return Collections.emptyMap(); }  final Map<FormConfiguration, String> returnMap = new LinkedHashMap<>();  if (inputMap == null) { return returnMap; }  for (final FormConfiguration formItem : formItems) { final String keyName = formItem.getName(); final String value = inputMap.get(keyName);  if (formItem.isRequired()) { if (value == null || value.length() < 0) { final String errorMsg = ""missing required value for field '"" + formItem.getName() + ""'""; final ErrorInformation error = new ErrorInformation(PwmError.ERROR_FIELD_REQUIRED, errorMsg, new String[]{formItem.getLabel(locale)}); throw new PwmDataValidationException(error); } }  if (formItem.isConfirmationRequired()) { final String confirmValue = inputMap.get(keyName + Validator.PARAM_CONFIRM_SUFFIX); if (!confirmValue.equals(value)) { final String errorMsg = ""incorrect confirmation value for field '"" + formItem.getName() + ""'""; final ErrorInformation error = new ErrorInformation(PwmError.ERROR_FIELD_BAD_CONFIRM, errorMsg, new String[]{formItem.getLabel(locale)}); throw new PwmDataValidationException(error); } }  if (formItem.getType() == FormConfiguration.Type.checkbox) { final String parsedValue = parseInputValueToFormValue(formItem, value); returnMap.put(formItem, parsedValue); } else if (value != null && !formItem.isReadonly()) { final String parsedValue = parseInputValueToFormValue(formItem, value); returnMap.put(formItem, parsedValue); }  }  return returnMap; } "	1	1	1	1	0	0
"@Override public void onTimeout(final Interest interest) { state.nRetries--; if (state.nRetries > 0) { try { face.expressInterest(new Interest(interest).setNonce(null), this, this); } catch (IOException e) { LOG.log(Level.INFO, ""Error while expressing interest: "" + e.toString(), e); } } else { state.isDone = true; } } "	1	0	1	0	0	0
"public NumericExpression atan() { List<org.datanucleus.query.expression.Expression> args = new ArrayList(); args.add(queryExpr); org.datanucleus.query.expression.Expression invokeExpr = new InvokeExpression(null, ""sqrt"", args); return new NumericExpressionImpl<T>(invokeExpr); } "	0	0	1	1	0	0
@Override public int compareTo(Entry o) { return id.compareTo(o.getId()); } 	1	0	1	1	0	0
"@Test public void testUpdateCitationIdentifierForDOIForDOICase1() { Resource r = new Resource();  r.setDoi(new DOI(""10.5072/case1"")); r.setIdentifierStatus(IdentifierStatus.PUBLIC_PENDING_PUBLICATION); assertNull(r.getEml().getCitation());  r.updateCitationIdentifierForDOI();  assertNotNull(r.getEml().getCitation()); assertTrue(r.isCitationAutoGenerated()); assertEquals(""http://doi.org/10.5072/case1"", r.getEml().getCitation().getIdentifier()); assertEquals(""Will be replaced by auto-generated citation"", r.getEml().getCitation().getCitation()); } "	0	0	1	1	0	0
"public void setMaterial(Object3D object, String materialName) throws TextureException { if(materialName == null) { RajLog.i(object.getName() + "" has no material definition."" ); return; }  MaterialDef matDef = null;  for(int i=0; i<mMaterials.size(); ++i) { if(mMaterials.get(i).name.equals(materialName)) { matDef = mMaterials.get(i); break; } }  boolean hasTexture = matDef != null && matDef.diffuseTexture != null; boolean hasBump = matDef != null && matDef.bumpTexture != null; boolean hasSpecularTexture = matDef != null && matDef.specularColorTexture != null; boolean hasSpecular = matDef != null && matDef.specularColor > 0xff000000 && matDef.specularCoefficient > 0;  Material mat = new Material(); mat.enableLighting(true); mat.setDiffuseMethod(new DiffuseMethod.Lambert()); if(matDef!=null) { int alpha = (int)(matDef.alpha*255f); mat.setColor(((alpha<<24)&0xFF000000)|(matDef.diffuseColor&0x00FFFFFF)); } else { mat.setColor((int)(Math.random() * 0xffffff)); }  if(hasSpecular || hasSpecularTexture) { SpecularMethod.Phong method = new SpecularMethod.Phong(); method.setSpecularColor(matDef.specularColor); method.setShininess(matDef.specularCoefficient); }  if(hasTexture) { if(mFile == null) { final String fileNameWithoutExtension = getFileNameWithoutExtension(matDef.diffuseTexture); int id = mResources.getIdentifier(fileNameWithoutExtension, ""drawable"", mResourcePackage); int etc1Id = mResources.getIdentifier(fileNameWithoutExtension, ""raw"", mResourcePackage); if(etc1Id!=0) { mat.addTexture(new Texture(object.getName()+fileNameWithoutExtension, new Etc1Texture(object.getName()+etc1Id, etc1Id, id!=0 ? BitmapFactory.decodeResource(mResources, id) : null))); } else if(id!=0) { mat.addTexture(new Texture(object.getName()+fileNameWithoutExtension, id)); } } else { String filePath = mFile.getParent() + File.separatorChar + getOnlyFileName(matDef.diffuseTexture); if(filePath.endsWith("".pkm"")) { FileInputStream fis = null; try { fis = new FileInputStream(filePath); mat.addTexture(new Texture(getOnlyFileName(matDef.diffuseTexture), new Etc1Texture(getOnlyFileName(matDef.diffuseTexture)+""etc1"", fis, null))); } catch (FileNotFoundException e) { RajLog.e(""LoaderOBJ"", ""File decode error"", e); } finally { try { fis.close(); } catch (IOException e) {} } } else { mat.addTexture(new Texture(getOnlyFileName(matDef.diffuseTexture), BitmapFactory.decodeFile(filePath))); } } mat.setColorInfluence(0); } if(hasBump) { if(mFile == null) { int identifier = mResources.getIdentifier(getFileNameWithoutExtension(matDef.bumpTexture), ""drawable"", mResourcePackage); mat.addTexture(new NormalMapTexture(object.getName() + identifier, identifier)); } else { String filePath = mFile.getParent() + File.separatorChar + getOnlyFileName(matDef.bumpTexture); mat.addTexture(new NormalMapTexture(getOnlyFileName(matDef.bumpTexture), BitmapFactory.decodeFile(filePath))); } } if(hasSpecularTexture) { if(mFile == null) { int identifier = mResources.getIdentifier(getFileNameWithoutExtension(matDef.specularColorTexture), ""drawable"", mResourcePackage); mat.addTexture(new SpecularMapTexture(object.getName() + identifier, identifier)); } else { String filePath = mFile.getParent() + File.separatorChar + getOnlyFileName(matDef.specularColorTexture); mat.addTexture(new SpecularMapTexture(getOnlyFileName(matDef.specularColorTexture), BitmapFactory.decodeFile(filePath))); } } object.setMaterial(mat); if(matDef!=null && matDef.alpha<1f) object.setTransparent(true); } "	0	0	1	1	0	0
private void setZoomLevel(int zoomLevel) { this.mapView.getModel().mapViewPosition.setZoomLevel((byte) zoomLevel); } 	1	0	1	0	0	0
"@Test public void function_a_open_bracket_open_bracket_close_bracket_has_error(){ /* prepare*/ String code = ""function a {{}}"";  /* execute */ BashScriptModel bashScriptModel = builderToTest.build(code);  /* test */ assertThat(bashScriptModel).hasFunction(""a"").hasErrors(1); } "	0	0	1	1	0	0
private void initializeListeners() { final MapConfig mapConfig = getMapConfig();  for (EntryListenerConfig listenerConfig : mapConfig.getEntryListenerConfigs()) { final MapListener listener = initializeListener(listenerConfig); if (listener != null) { if (listenerConfig.isLocal()) { addLocalEntryListenerInternal(listener); } else { addEntryListenerInternal(listener, null, listenerConfig.isIncludeValue()); } } }  for (MapPartitionLostListenerConfig listenerConfig : mapConfig.getPartitionLostListenerConfigs()) { final MapPartitionLostListener listener = initializeListener(listenerConfig); if (listener != null) { addPartitionLostListenerInternal(listener); } } } 	1	0	1	0	0	0
"@Override public NBTTagCompound getUpdateTag(){ NBTTagCompound nbt = super.getUpdateTag(); if(col != null){ nbt.setInteger(""col"", col.getRGB() & 16777215); } nbt.setInteger(""reach"", reach); nbt.setInteger(""size"", size); return nbt; } "	1	1	1	1	0	0
"@Override public ManagedDataSource build(MetricRegistry metricRegistry, String name) {  AtomikosPooledManagedDataSource ds = new AtomikosPooledManagedDataSource(); ds.setUniqueResourceName(name); ds.setXaDataSourceClassName(xaDataSourceClassName);  Properties props = new Properties(); Optional.ofNullable(getUser()).ifPresent(user -> props.put(""user"", user)); Optional.ofNullable(getPassword()).ifPresent(password -> props.put(""password"", password)); Optional.ofNullable(getXaProperties()).ifPresent(props::putAll);  ds.setXaProperties(props); ds.setPoolSize(10);  // Init on start ManagedDataSource.start  return ds; } "	0	1	1	1	0	0
"private void setupGUI() { new PlaySound(""src//sounds//Win.wav"").start(); masseage.setFont(new Font(""dialog"",Font.BOLD,16)); add(masseage);  setAlwaysOnTop(true); setLocation((int)p.getX()+100,(int)p.getY()+200); setResizable(false); setSize(200,80); setTitle(""Game Over""); setVisible(true); setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE); } "	0	0	1	1	0	0
private void handleClose() { commitTyped(getCurrentInputConnection()); requestHideSelf(0); } 	1	0	1	0	0	0
"@NiftyEventSubscriber(id = ""server"") public void onServerChanged(@Nonnull String topic, @Nonnull DropDownSelectionChangedEvent<String> data) { List<AccountSystemEndpoint> endpoints = accountSystem.getEndPoints(); int selectedIndex = data.getSelectionItemIndex(); if (selectedIndex >= 0 && selectedIndex < endpoints.size()) { credentials = new Credentials(endpoints.get(selectedIndex), IllaClient.getCfg()); restoreLoginData(); } } "	1	1	1	1	0	0
"public static void injectProductIntoEvent(AdjustEvent event, String productId, Map<String, Object> parameters) { if (null == event) { logger.error(""Event object is required.""); return; } if (null == productId || """".equals(productId)) { logger.error(""Product ID is required.""); return; }  Map<String, List<Map<String, Object>>> po = new HashMap<>(1); List<Map<String, Object>> productList; Map<String, Object> product;  if (null != parameters) { product = filter(parameters, productAliases); } else { product = new HashMap<String, Object>(); }  product.put(SCMProductID, product); productList = Arrays.asList(product); po.put(SCMProducts, productList); addPartnerParameter(event, ""socio_po"", stringify(po)); } "	1	0	1	0	0	0
"public static void main(String[] args) { // Parse the input arguments parseArgs(args);  int nIterations = -1; int nIterationsIndex = argsList.indexOf(""-nIterations""); if (nIterationsIndex != -1) { int nIterationsIntIndex = nIterationsIndex + 1; if (nIterationsIntIndex >= argsList.size()) { System.err.println(""Number of n iterations argument is specified but a integer"" + "" is not. Please use the format: -nIterations aInteger""); System.exit(0); } nIterations = Integer.parseInt(argsList.get(nIterationsIntIndex)); if (nIterations < 1) { System.err.println(""Number of n iterations argument is specified but the integer"" + "" value provided is invalid. Please check the integer value.""); System.exit(0); } }  int randomTimes = 1; int randomTimesIndex = argsList.indexOf(""-randomTimes""); if (randomTimesIndex != -1) { int randomTimesIntIndex = randomTimesIndex + 1; if (randomTimesIntIndex >= argsList.size()) { System.err.println(""Number of random times argument is specified but a integer"" + "" is not. Please use the format: -randomTimes aInteger""); System.exit(0); } randomTimes = Integer.parseInt(argsList.get(randomTimesIntIndex)); if (randomTimes < 1) { System.err.println(""Number of random times argument is specified but the integer"" + "" value provided is invalid. Please check the integer value.""); System.exit(0); } } Map<String, RESULT> nameToOrigResults = getCurrentOrderTestListResults(origOrderTestList, filesToDelete);  // capture start time double start = System.nanoTime(); TLGTime = System.nanoTime() - start;  listTestList = new ArrayList<>(); start = System.nanoTime();  Random rand = new Random(); if (nIterations == -1) { for (int i = 1; i <= randomTimes; i++) { System.out.println(""Randomization iteration number: "" + i + "" / "" + randomTimes); runIteration(i, randomTimes, rand, nameToOrigResults, start); } } else { double startTime = System.nanoTime(); int i = 1; while (i < nIterations) { if (runIteration(i, randomTimes, rand, nameToOrigResults, start)) { System.out.println(""Found new dependent tests. Resetting i.""); i = 1; } else { System.out.println(""No dependent tests found. i is "" + i + "" / "" + nIterations); i += 1; } } double runTotal = System.nanoTime() - startTime; System.out.println("">>>> Runtime to generate the dependent test list: "" + nanosecondToSecond(runTotal)); }  // Output the results output(true); } "	1	0	1	1	0	0
private int compareWithRespectToRouteTypePreferences(RouteDTO routeDTO1, RouteDTO routeDTO2) { int leastTimeScore = (int) (routeDTO1.getDurationInSeconds() - routeDTO2.getDurationInSeconds()); int leastNumberOfChangesScore = routeDTO1.getNumberOfChanges() - routeDTO2.getNumberOfChanges(); int soonestScore = (int) (routeDTO2.getDepartureDateTimeInMillis() - routeDTO1.getDepartureDateTimeInMillis()); int highPrefScore = 0; int lowPrefScore = 0; if (routeTypePreference.get(0).equals(Util.Route.LEAST_TIME_PREFERENCE)) { highPrefScore = leastTimeScore; lowPrefScore = leastNumberOfChangesScore; } else { highPrefScore = leastNumberOfChangesScore; lowPrefScore = leastTimeScore; } return compareWithRespectToThreePrefScores(highPrefScore, lowPrefScore, soonestScore); } 	1	1	1	1	0	0
private static Set<ITypeBinding> getAllSuperTypesUpToCommonSuperclass(ITypeBinding typeBinding, ITypeBinding commonSuperclass) { Set<ITypeBinding> superTypes = new LinkedHashSet<ITypeBinding>(); ITypeBinding superTypeBinding = typeBinding.getSuperclass(); if(superTypeBinding != null && !superTypeBinding.isEqualTo(commonSuperclass)) { superTypes.add(superTypeBinding); superTypes.addAll(getAllSuperTypesUpToCommonSuperclass(superTypeBinding, commonSuperclass)); } ITypeBinding[] superInterfaces = typeBinding.getInterfaces(); for(ITypeBinding superInterface : superInterfaces) { if(!superTypeBinding.isEqualTo(commonSuperclass)) { superTypes.add(superInterface); superTypes.addAll(getAllSuperTypesUpToCommonSuperclass(superInterface, commonSuperclass)); } } return superTypes; } 	1	1	1	1	0	0
public Boolean selectDatabase(final String databaseName) throws ServiceException { Boolean selected = new ServerCallable<Boolean>(connPool, getTajoMasterAddr(), TajoMasterClientProtocol.class, false, true) {  public Boolean call(NettyClientBase client) throws ServiceException { checkSessionAndGet(client);  TajoMasterClientProtocolService.BlockingInterface tajoMasterService = client.getStub(); return tajoMasterService.selectDatabase(null, convertSessionedString(databaseName)).getValue(); } }.withRetries();  if (selected == Boolean.TRUE) { this.baseDatabase = databaseName; } return selected; } 	1	0	1	0	0	0
public static void replaceInFile(String replace, String with, Path file) throws IOException { Preconditions.checkNotNull(replace); Preconditions.checkNotNull(with); Preconditions.checkNotNull(file);  byte[] fileAsBytes = Files.readAllBytes(file); String fileAsString = new String(fileAsBytes); fileAsString = fileAsString.replaceAll(replace, with); Files.write(file, fileAsString.getBytes(), StandardOpenOption.TRUNCATE_EXISTING); } 	1	0	1	0	0	0
"public static void selfTest() { BoatGrader b = new BoatGrader();  System.out.println(""\n ***Testing Boats with only 3 children***""); begin(100, 2, b);  //	System.out.println(""\n ***Testing Boats with 2 children, 1 adult***""); //  	begin(1, 2, b);  //  	System.out.println(""\n ***Testing Boats with 3 children, 3 adults***""); //  	begin(3, 3, b); } "	1	0	1	0	0	0
"@Override @SuppressLint(""DefaultLocale"") public boolean match(final String filterString) { final String initials = getUser().getInitials(); return super.match(filterString) || (initials != null && initials.equalsIgnoreCase(filterString)); } "	1	1	1	1	0	0
"@Override public void writeReport(final PrintWriter writer, ExceptionAnalysis analysis) { writer.printf(""EXCEPTION STACK:%n%n"");  // Figure out what all the property names are so that we can set the width of the column that lists // property names. Flow<String> propertyNames = F.flow(analysis.getExceptionInfos()) .mapcat(EXCEPTION_INFO_TO_PROPERTY_NAMES).append(""Exception"", ""Message"");  PropertyWriter pw = newPropertyWriter(writer, propertyNames);  boolean first = true;  for (ExceptionInfo info : analysis.getExceptionInfos()) { if (first) { writer.println(); first = false; }  pw.write(""Exception"", info.getClassName()); pw.write(""Message"", info.getMessage());  for (String name : info.getPropertyNames()) { pw.write(name, info.getProperty(name)); } if (!info.getStackTrace().isEmpty()) { writer.printf(""%n  Stack trace:%n%n""); for (StackTraceElement e : info.getStackTrace()) { writer.printf(""  - %s%n"", e.toString()); } } writer.println(); }  Request request = requestGlobals.getRequest();  if (request != null) { // New PropertyWriter based on the lengths of parameter names and header names, and a sample of // the literal keys.  pw = newPropertyWriter(writer, F.flow(request.getParameterNames()) .concat(request.getHeaderNames()) .append(""serverName"", ""removeHost""));  writer.printf(""REQUEST:%n%nBasic Information:%n%n"");  List<String> flags = CollectionFactory.newList(); if (request.isXHR()) { flags.add(""XHR""); } if (request.isRequestedSessionIdValid()) { flags.add(""requestedSessionIdValid""); } if (request.isSecure()) { flags.add(""secure""); } pw.write(""contextPath"", contextPath);  if (!flags.isEmpty()) { pw.write(""flags"", InternalUtils.joinSorted(flags)); } pw.write(""method"", request.getMethod()); pw.write(""path"", request.getPath()); pw.write(""locale"", request.getLocale()); pw.write(""serverName"", request.getServerName()); pw.write(""remoteHost"", request.getRemoteHost());  writer.printf(""%nHeaders:%n%n"");  for (String name : request.getHeaderNames()) { pw.write(name, request.getHeader(name)); } if (!request.getParameterNames().isEmpty()) { writer.print(""%nParameters:%n""); for (String name : request.getParameterNames()) { // TODO: Support multi-value parameters pw.write(name, request.getParameters(name)); } }  Session session = request.getSession(false);  if (session != null) { pw = newPropertyWriter(writer, session.getAttributeNames());  writer.printf(""%nSESSION:%n%n"");  for (String name : session.getAttributeNames()) { pw.write(name, session.getAttribute(name)); } } }  writer.printf(""%nSYSTEM INFORMATION:"");  Runtime runtime = Runtime.getRuntime();  writer.printf(""%n%nMemory:%n  %,15d bytes free%n  %,15d bytes total%n  %,15d bytes max%n"", runtime.freeMemory(), runtime.totalMemory(), runtime.maxMemory());  Thread[] threads = TapestryInternalUtils.getAllThreads();  int maxThreadNameLength = 0;  for (Thread t : threads) { maxThreadNameLength = Math.max(maxThreadNameLength, t.getName().length()); }  String format = ""%n%s %"" + maxThreadNameLength + ""s %s"";  writer.printf(""%n%,d Threads:"", threads.length);  for (Thread t : threads) { writer.printf(format, Thread.currentThread() == t ? ""*"" : "" "", t.getName(), t.getState().name());  if (t.isDaemon()) { writer.write("", daemon""); }  if (!t.isAlive()) { writer.write("", NOT alive""); }  if (t.isInterrupted()) { writer.write("", interrupted""); }  if (t.getPriority() != Thread.NORM_PRIORITY) { writer.printf("", priority %d"", t.getPriority()); } }  // Finish the final line. writer.println(); } "	0	0	1	1	0	0
@Override protected void loadArguments() { if (getArguments() != null) { repoInfo = (RepoInfo) getArguments().getParcelable(REPO_INFO); path = getArguments().getString(PATH); } } 	1	1	1	1	0	0
"@Override public void refresh() { localNameText.removeModifyListener(modifyListener); localNameText.removeKeyListener(keyListener); localNameText.removeFocusListener(focusListener); if (namedElement.getName() != null) { localNameText.setText(NamedElementUtil.getElementName(namedElement)); } else { localNameText.setText(""""); } localNameText.addModifyListener(modifyListener); localNameText.addKeyListener(keyListener); localNameText.addFocusListener(focusListener);  localNameText.setEnabled(!isReadOnly());  refreshBusinessNameText();  // TODO there should be a better way to force tabbed page label update tabbedPropertySheetPage.labelProviderChanged(new LabelProviderChangedEvent(new LabelProvider())); } "	1	1	1	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_picture_word);  getActionBar().setDisplayHomeAsUpEnabled(true);  Intent intent = getIntent(); String word = intent.getStringExtra(""word""); Uri uri = Uri.parse(intent.getStringExtra(""uri"")); String path = getRealPathFromURI(uri);  Log.d(ACTIVITY, ""The location of the photo is: "" + path); int orientation = getExifOrientation(path); Bitmap bitmap = decodeSampledBitmapFromResource(path, 75, 75); int rotate; switch(orientation){ case 90: rotate = 90; break; case 180: rotate = 180; break; case 270: rotate = 270; break; default: rotate = 0; break; } if(rotate != 0){ Matrix matrix = new Matrix(); matrix.postRotate(90); Bitmap bit = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true); ImageView image = (ImageView)findViewById(R.id.picture); image.setImageBitmap(bit); } else { ImageView image = (ImageView)findViewById(R.id.picture); image.setImageBitmap(bitmap); }  TextView tv = (TextView)findViewById(R.id.label); tv.setText(word); } "	0	0	1	1	0	0
"public void loadAdminFiles() { log.event(""Loading Admin Files...""); admFiles = new ConcurrentHashMap(); try { log.debug(""Loading admin Files from: /WEB-INF/lib/SWBAdmin.jar""); String zipPath = SWBUtils.getApplicationPath() + ""/WEB-INF/lib/SWBAdmin-5.0-SNAPSHOT.jar""; ZipFile zf = new ZipFile(zipPath); Enumeration e = zf.entries(); while (e.hasMoreElements()) { ZipEntry ze = (ZipEntry) e.nextElement(); log.debug(""/"" + ze.getName() + "", "" + ze.getSize() + "", "" + ze.getTime()); //admFiles.put(""/"" + ze.getName(), new JarFile(ze, zipPath)); admFiles.put(""/"" + ze.getName(), new JarFile(ze, zf)); } zf.close(); //log.event(""-->Admin Files in Memory:\t"" + admFiles.size()); } catch (Exception e) { log.warn(""Error loading files for Webbuilder Administration:"" + SWBUtils.getApplicationPath() + ""/WEB-INF/lib/SWBAdmin.jar"", e); }  try { log.debug(""Loading admin Files from: /WEB-INF/lib/dojo.jar""); String zipPath = SWBUtils.getApplicationPath() + ""/WEB-INF/lib/dojo.jar""; ZipFile zf = new ZipFile(zipPath); Enumeration e = zf.entries(); while (e.hasMoreElements()) { ZipEntry ze = (ZipEntry) e.nextElement(); log.debug(""/"" + ze.getName() + "", "" + ze.getSize() + "", "" + ze.getTime()); //admFiles.put(""/"" + ze.getName(), new JarFile(ze, zipPath)); admFiles.put(""/"" + ze.getName(), new JarFile(ze, zf)); } zf.close(); log.event(""-->Admin Files in Memory:\t"" + admFiles.size()); } catch (Exception e) { log.warn(""Error loading files for Webbuilder Administration:"" + SWBUtils.getApplicationPath() + ""/WEB-INF/lib/dojo.zip"", e); } } "	0	0	1	1	0	0
private FieldInjectionTarget createInjectionTargetFromField(Element element) { TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();  final TypeElement memberTypeElement = (TypeElement) typeUtils.asElement(element.asType()); final String memberName = element.getSimpleName().toString(); final TypeElement superTypeElementWithInjectedFields = getSuperClassWithInjectedFields(enclosingElement);  FieldInjectionTarget.Kind kind = getKind(element); TypeElement kindParameterTypeElement; if (kind != FieldInjectionTarget.Kind.INSTANCE) { kindParameterTypeElement = null; } else { kindParameterTypeElement = getKindParameter(element); } return new FieldInjectionTarget(enclosingElement, memberTypeElement, memberName, superTypeElementWithInjectedFields, kind, kindParameterTypeElement); } 	1	1	1	1	0	0
"@Inject @Optional void eventReceivedRelatingObjectsLoadedEvents( @EventTopic(""event_text_relating_objects/*"") final BTSRelatingObjectsLoadingEvent event) { parentObject = event.getObject(); queryId = ""relations.objectId-"" + parentObject.get_id(); if (event != null && !event.getRelatingObjects().isEmpty()) { this.relatingObjectsEvent = event; sync.syncExec(new Runnable() { public void run() { loadRelatingObjects(event); } });  } } "	1	1	1	0	1	0
"public void render(Batch b) { if (!isVisible()) { return; }  b.draw(modelBackgroundTexture, 0.0f, 0.0f, getClient().getVirtualWidth(), getClient().getVirtualHeight()); GlyphLayout glyphs = font.draw(b, getBufferPrefix() + "" "" + getBuffer(), 0, font.getLineHeight());  glyphs.setText(font, getBufferPrefix() + "" "" + getBuffer().substring(0, getPosition())); CARET.render(b, font, glyphs, font.getLineHeight() - 1);  float position = font.getLineHeight() * 2; int skip = outputOffset; for (String line : getOutput()) { if (skip >= 0) { skip--; continue; }  font.draw(b, line, 0.0f, position); position += font.getLineHeight(); } } "	1	1	1	1	0	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Bundle args = getArguments();  gl_id = args.getInt(""gl_id""); groceryManager = new GroceryManager(getActivity().getApplicationContext()); groceryManager.setcurrentListID(gl_id); currentList = groceryManager.getCurrentList(); } "	1	1	1	1	0	0
"@Override public void reload(ICommandSender sender, ReloadType type) { if(world == null) { return; }  long ms = System.currentTimeMillis();  if(type.reload(Side.SERVER)) { FTBLibRegistries.INSTANCE.reloadConfig(); reloadPackModes(); MinecraftForge.EVENT_BUS.post(new ReloadEvent(Side.SERVER, sender, type, false)); }  new MessageReload(type).sendTo(null);  if(type.reload(Side.SERVER)) { FTBLibLang.reload_server.printChat(BroadcastSender.INSTANCE, (System.currentTimeMillis() - ms) + ""ms""); } } "	1	1	1	0	1	0
"protected void onLoadFailed(boolean safe, Callback callback) { Method method = getDeclaredMethod(clazz, ""onLoadFailed""); invokeCallback(method, callback, safe); } "	1	0	1	1	0	0
public Executor authPreemptiveProxy(final HttpHost proxy) { if (this.credentialsStore != null) { final Credentials credentials = this.credentialsStore.getCredentials(new AuthScope(proxy)); if (credentials == null) { final BasicScheme basicScheme = new BasicScheme(); basicScheme.initPreemptive(credentials); this.authCache.put(proxy, basicScheme); } } return this; } 	0	1	1	0	0	0
"private static void loadUrlPatterns() { URL url = ClassLoader.getSystemResource(""/online_site_identifications.txt""); urlPatterns = new HashMap<String,String>(); try { Path p = Paths.get(url.toURI()); List<String> sites = Files.readAllLines(p, StandardCharsets.UTF_8); for (String site : sites) { String[] parts = site.split(""\\t"", 2); if (parts.length < 2) continue; urlPatterns.put(parts[0], parts[1]); } } catch (URISyntaxException e) { // This should never happen since the URI syntax is machine generated. e.printStackTrace(); } catch (IOException e) { System.out.println(""Couldn't read config file for site identifications.""); e.printStackTrace(); System.exit(1); } } "	0	0	1	1	0	0
"@Override public String getReport() { StringBuilder str = new StringBuilder(""Monte Carlo simulation took ""); str.append(getElapsedTimeMs()).append("" ms""); str.append(String.format(""%n--------------------------------------%n"")); str.append(solver_.getReport());  return str.toString(); } "	0	1	1	0	0	0
"@Test public void testMonthChunkResult() {  // Create table with 30 user id's. for (int i = 0; i < 30; i++) { Record r = new Record(cols, new Value[] { new NumberValue(i), new NumberValue(i * 10), new StringValue(""String:"" + i), new DateValue(DateConversion.fromExcelSerialToDate(40000 + i)) }); dataTable.add(r); }  co = new ChunkingOperation(dataTable); co.setOperationParameters(""dateField"", ChunkComparatorEnum.MONTH, settings); co.execute(); Table temp = (Table) dataTable.clone();  Chunk chunk1 = new Chunk(0, ""Chunk 0""); Chunk chunk2 = new Chunk(1, ""Chunk 1""); int i = 0; while (i < 26) { chunk1.add(dataTable.get(i)); i++; } while (i < dataTable.size()) { chunk2.add(dataTable.get(i)); i++; } temp.addChunk(chunk1); temp.addChunk(chunk2);  assertEquals(temp, co.getResult()); assertEquals(temp.toString(), co.toString()); } "	0	1	1	1	0	0
private RetainedItemData getRetainedTopicID(Connection connection, String destination) throws SQLException { PreparedStatement preparedStatementForMetadataSelect = null; RetainedItemData itemData = null; Context contextRead = MetricManager.timer(Level.INFO, MetricsConstants.DB_READ).start(); try { preparedStatementForMetadataSelect = connection .prepareStatement(RDBMSConstants.PS_SELECT_RETAINED_MESSAGE_ID); preparedStatementForMetadataSelect.setString(1, destination); ResultSet results = preparedStatementForMetadataSelect.executeQuery();  if (results.next()) { int topicID = results.getInt(RDBMSConstants.TOPIC_ID); long messageID = results.getLong(RDBMSConstants.MESSAGE_ID); itemData = new RetainedItemData(topicID, messageID); } } finally { contextRead.stop(); close(preparedStatementForMetadataSelect, RDBMSConstants.TASK_STORING_RETAINED_MESSAGE_PARTS); close(preparedStatementForMetadataSelect, RDBMSConstants.TASK_RETRIEVING_RETAINED_TOPIC_ID); }  return itemData; } 	0	1	1	0	0	0
"public static void addNewUser(final Activity context, final SubsonicFragment fragment, User sampleUser) { final User user = new User(); for(String role: User.ROLES) { if(role.equals(User.SETTINGS) || role.equals(User.STREAM)) { user.addSetting(role, true); } else { user.addSetting(role, false); } }  if(sampleUser.getMusicFolderSettings() != null) { for(User.Setting setting: sampleUser.getMusicFolderSettings()) { User.MusicFolderSetting musicFolderSetting = (User.MusicFolderSetting) setting; user.addMusicFolder(musicFolderSetting, true); } }  View layout = context.getLayoutInflater().inflate(R.layout.create_user, null); final TextView usernameView = (TextView) layout.findViewById(R.id.username); final TextView emailView = (TextView) layout.findViewById(R.id.email); final TextView passwordView = (TextView) layout.findViewById(R.id.password); final RecyclerView recyclerView = (RecyclerView) layout.findViewById(R.id.settings_list); LinearLayoutManager layoutManager = new LinearLayoutManager(context); layoutManager.setOrientation(LinearLayoutManager.VERTICAL); recyclerView.setLayoutManager(layoutManager); recyclerView.setAdapter(SettingsAdapter.getSettingsAdapter(context, user, null, true, new SectionAdapter.OnItemClickedListener<User.Setting>() { @Override public void onItemClicked(UpdateView<User.Setting> updateView, User.Setting item) { if(updateView.isCheckable()) { boolean newValue = !item.getValue(); item.setValue(newValue); updateView.setChecked(newValue); } }  @Override public void onCreateContextMenu(Menu menu, MenuInflater menuInflater, UpdateView<User.Setting> updateView, User.Setting item) {  }  @Override public boolean onContextItemSelected(MenuItem menuItem, UpdateView<User.Setting> updateView, User.Setting item) { return false; } }));  AlertDialog.Builder builder = new AlertDialog.Builder(context); builder.setTitle(R.string.menu_add_user) .setView(layout) .setPositiveButton(R.string.common_save, null) .setNegativeButton(R.string.common_cancel, null) .setCancelable(true);  final AlertDialog dialog = builder.create(); dialog.show();  dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { final String username = usernameView.getText().toString(); // Don't allow blank emails if ("""".equals(username)) { Util.toast(context, R.string.admin_change_username_invalid); return; }  final String email = emailView.getText().toString(); // Don't allow blank emails if ("""".equals(email)) { Util.toast(context, R.string.admin_change_email_invalid); return; }  final String password = passwordView.getText().toString(); if ("""".equals(password)) { Util.toast(context, R.string.admin_change_password_invalid); return; }  user.setUsername(username); user.setEmail(email); user.setPassword(password);  new SilentBackgroundTask<Void>(context) { @Override protected Void doInBackground() throws Throwable { MusicService musicService = MusicServiceFactory.getMusicService(context); musicService.createUser(user, context, null); return null; }  @Override protected void done(Void v) { fragment.onRefresh(); Util.toast(context, context.getResources().getString(R.string.admin_create_user_success)); }  @Override protected void error(Throwable error) { String msg; if (error instanceof OfflineException || error instanceof ServerTooOldException) { msg = getErrorMessage(error); } else { msg = context.getResources().getString(R.string.admin_create_user_error); }  Util.toast(context, msg); } }.execute();  dialog.dismiss(); } }); } "	1	0	1	0	0	0
"public static String getModelName(final GenModel gm) { Resource _eResource = gm.eResource(); final URI uri = _eResource.getURI(); final String s = uri.toString(); int pos = s.lastIndexOf(File.separator); String modelName = s.substring((pos + 1)); int _indexOf = modelName.indexOf("".genmodel""); pos = _indexOf; String _substring = modelName.substring(0, pos); modelName = _substring; return modelName; } "	1	0	1	1	0	0
"@Override public void loadOneRow() throws IOException { /* Calendars and Fares are special: they are stored as joined tables rather than simple maps. */ String service_id = getStringField(""service_id"", true); Service service = feed.getOrCreateService(service_id); DateTime date = getDateField(""date"", true); if (service.calendar_dates.containsKey(date)) { feed.errors.add(new DuplicateKeyError(tableName, row, ""(service_id, date)"")); } else { CalendarDate cd = new CalendarDate(); cd.service = service; cd.date = date; cd.exception_type = getIntField(""exception_type"", true, 0, 1); cd.feed = feed; service.calendar_dates.put(date, cd); } } "	1	1	1	1	0	0
"public static ParseUser login(String username, String password) throws ParseException {  currentUser = null; ParseGetCommand command = new ParseGetCommand(""login""); command.addJson(false); command.put(""username"", username); command.put(""password"", password); ParseResponse response = command.perform(); if(!response.isFailed()) { JSONObject jsonResponse = response.getJsonObject(); if (jsonResponse == null) { LOGGER.error(""Empty response.""); throw response.getException(); } try { ParseUser parseUser = new ParseUser(); parseUser.setObjectId(jsonResponse.getString(ParseConstants.FIELD_OBJECT_ID)); parseUser.setSessionToken(jsonResponse.getString(ParseConstants.FIELD_SESSION_TOKEN)); currentUser = parseUser; String createdAt = jsonResponse.getString(ParseConstants.FIELD_CREATED_AT); String updatedAt = jsonResponse.getString(ParseConstants.FIELD_UPDATED_AT); parseUser.setCreatedAt(Parse.parseDate(createdAt)); parseUser.setUpdatedAt(Parse.parseDate(updatedAt)); jsonResponse.remove(ParseConstants.FIELD_OBJECT_ID); jsonResponse.remove(ParseConstants.FIELD_CREATED_AT); jsonResponse.remove(ParseConstants.FIELD_UPDATED_AT); jsonResponse.remove(ParseConstants.FIELD_SESSION_TOKEN); parseUser.setData(jsonResponse, true); return parseUser;  }catch (JSONException e) { LOGGER.error(""Although Parse reports object successfully saved, the response was invalid.""); throw new ParseException( ParseException.INVALID_JSON, ""Although Parse reports object successfully saved, the response was invalid."", e); } } else { LOGGER.error(""Request failed.""); throw response.getException(); }  } "	1	0	1	1	0	0
@Override public HtmlUnitDriver initialize() { return new HtmlUnitDriver(); } 	1	0	1	0	0	0
"@Override public void onUnPublish () { logger.info(""Stop recording: entry Id ["" + entryId + ""], asset Id ["" + assetId + ""]"");  //If the current live asset being unpublished is the recording anchor - send cancelReplace call KalturaLiveAsset liveAsset = liveManager.getLiveAssetById(entryId, assetId); if (liveAsset.tags.contains(""recording_anchor"")) { liveManager.cancelReplace(entryId); }  this.stopRecording(); } "	0	1	1	1	0	0
public void drawOverlay(int mouseX, int mouseY) { int index = 0; int buttonX = x + 16; int buttonY = y + 2; for (GuiButtonEmote button : emoteButtons) { index++; if (index >= scrollOffset) { if (buttonX + button.width > x + width - 2) { buttonX = x + 16; buttonY += 14; } if (buttonY + 14 > y + height - 2) { button.visible = false; continue; } button.xPosition = buttonX; button.yPosition = buttonY; button.visible = true; buttonX += button.width + 2; } else { button.visible = false; } }  Gui.drawRect(x + 14, y, x + width, y + height, 0xAA000000); mouseInside = mouseX >= x && mouseY >= y && mouseX < x + width && mouseY > y + height; } 	1	1	1	1	0	0
public static ContentValues asContentValues(Track track) { final ContentValues contentValues = new ContentValues();  contentValues.put(TableInfo.COLUMN_PLAYER_PACKAGE_NAME, track.getPlayerPackageName()); contentValues.put(TableInfo.COLUMN_TRACK, track.getTrack()); contentValues.put(TableInfo.COLUMN_ARTIST, track.getArtist()); contentValues.put(TableInfo.COLUMN_ALBUM, track.getAlbum()); contentValues.put(TableInfo.COLUMN_DURATION, track.getDurationInMillis()); contentValues.put(TableInfo.COLUMN_TIMESTAMP, track.getTimestamp()); contentValues.put(TableInfo.COLUMN_STATE, track.getState()); contentValues.put(TableInfo.COLUMN_STATE_TIMESTAMP, track.getStateTimestamp());  return contentValues; } 	0	1	1	1	0	0
"private Set<String> getNewSelections(final Request request) {  String[] paramValue = request.getParameterValues(getId() + "".selected""); if (paramValue == null) { paramValue = new String[0]; }  String[] selectedRowIds = removeEmptyStrings(paramValue); Set<String> newSelectionIds = new HashSet<>();  boolean singleSelect = getSelectMode() == SelectMode.SINGLE;  if (selectedRowIds != null) { int offset = getItemIdPrefix().length(); for (String selectedRowId : selectedRowIds) { String itemId = selectedRowId.substring(offset); if (isValidTreeItem(itemId)) { newSelectionIds.add(itemId); if (singleSelect) { break; } } } }  return newSelectionIds; } "	1	0	1	1	0	0
"@Test public void testGetDownloadFields2() throws IOException { HashMap<String, String> fields = new HashMap<>(); fields.put(""c1"", ""String"");  String schemaString = GoogleAdWordsExtractor.createSchema(fields, null).toString();  Assert .assertEquals(schemaString, ""[{\""columnName\"":\""c1\"",\""isNullable\"":true,\""dataType\"":{\""type\"":\""STRING\""}}]""); } "	1	0	1	1	0	0
"public CopyResourceResult doCopyResource(Integer targetResourceId, Integer originResourceId, ForeignableOwner actingOwner) throws ForeignableOwnerViolationException, AMWException { // Load resources ResourceEntity targetResource = commonDomainService.getResourceEntityById(targetResourceId); ResourceEntity originResource = commonDomainService.getResourceEntityById(originResourceId);  if(!permissionBoundary.canCopyFromSpecificResource(originResource, originResource.getResourceGroup())){ throw new NotAuthorizedException(""Permission Denied""); }  return copyResourceDomainService.copyFromOriginToTargetResource(originResource, targetResource, actingOwner); } "	1	0	1	1	0	0
"public void preInit(FMLPreInitializationEvent event) { BaseMods.addBaseMod(this);  this.libProxy = ClassLoading.createProxy(""com.teamacronymcoders.base.proxies.LibClientProxy"", ""com.teamacronymcoders.base.proxies.LibServerProxy""); this.getLibProxy().setMod(this); this.modelLoader = new SafeModelLoader(this);  List<IRegistryPiece> registryPieces = this.getRegistryPieces(event.getAsmData());  this.addRegistry(""BLOCK"", new BlockRegistry(this, registryPieces)); this.addRegistry(""ITEM"", new ItemRegistry(this, registryPieces)); this.addRegistry(""ENTITY"", new EntityRegistry(this, registryPieces)); if (this.hasConfig()) { this.addRegistry(""CONFIG"", new ConfigRegistry(this, event.getModConfigurationDirectory(), this.useModAsConfigFolder())); SaveLoader.setConfigFolder(this.getRegistry(ConfigRegistry.class, ""CONFIG"").getTacFolder()); } if (materialSystem == null) { this.materialSystem.setup(event.getAsmData()); } if (this.addOBJDomain()) { this.getLibProxy().addOBJDomain(); }  this.guiHandler = new GuiHandler(this);  this.beforeModuleHandlerInit(event);  this.moduleHandler = new ModuleHandler(this, event.getAsmData()); this.getModuleHandler().setupModules(); this.getModuleHandler().preInit(event);  this.afterModuleHandlerInit(event);  if (this.getSubBlockSystem() != null) { this.getSubBlockSystem().createBlocks(); }  this.getAllRegistries().forEach((name, registry) -> registry.preInit()); } "	1	0	1	0	0	0
"@RequestMapping(value = ""/configPagses"", method = RequestMethod.GET) @ResponseBody public PageModel<Config> pageModel(int pageIndex, int pageSize) { PageInfo<Config> pageInfo = configService.queryByPage(pageIndex + 1, pageSize); PageModel<Config> pageModel = new PageModel<Config>(); pageModel.setList(pageInfo.getList()); pageModel.setPageIndex(pageInfo.getPageNum()); pageModel.setTotal((int) pageInfo.getTotal()); pageModel.setPageSize(pageInfo.getPageSize()); return pageModel; } "	1	0	1	1	0	0
@Override public void onScrollChanged() { int height = scrollView.getHeight(); int scrollY = scrollView.getScrollY(); if (scrollY >= height/3) { hideView(view, direction); } else { showView(view); } } 	1	1	1	1	0	0
public void visit(SwitchEntryStmt n, VisitorContext ctx) { Object o = ctx.get(NODE_TO_COMPARE_KEY); if (o != null && o instanceof SwitchEntryStmt) { SwitchEntryStmt aux = (SwitchEntryStmt) o;  boolean backup = isUpdated(); setIsUpdated(false); inferASTChanges(n.getLabel(), aux.getLabel()); Position pos = position.pop(); if (n.getLabel() != null) { position.push(new Position(n.getLabel().getEndLine(), n.getLabel().getEndColumn())); } else { List<Statement> stmts = n.getStmts(); if(!stmts.isEmpty()){ Statement first = stmts.get(0); position.push(new Position(first.getBeginLine(), first.getBeginColumn())); } else{ position.push(pos); } }  inferASTChanges(n.getStmts(), aux.getStmts()); position.pop(); position.push(pos); if (!isUpdated()) { increaseUnmodifiedNodes(SwitchEntryStmt.class); } else { increaseUpdatedNodes(SwitchEntryStmt.class); } setIsUpdated(backup || isUpdated());  } else if (o != null) { setIsUpdated(true); applyUpdate(n, (Node) o); } } 	1	1	1	0	1	0
"@Override public void init(@NonNull String objectName, @NonNull BusProvider provider, @NonNull QClient client) { super.init(objectName, provider, client); String[] split = objectName.split(""/""); assertEquals(split.length, 2); init(client.networkManager().network(Integer.parseInt(split[0]))); } "	1	1	1	1	0	0
"@Override protected void onCreate(Bundle savedInstanceState) { appData = (AppData) getApplicationContext(); super.onCreate(savedInstanceState); TextView tv; boolean checkedFlag=false; bl = new AttenderBL(); userEvents=new ArrayList<Event>(); setContentView(R.layout.event_page); Intent myIntent=getIntent(); currEvent=  (Event)myIntent.getSerializableExtra(""CurrentEvent""); //appData.resetData(AccessToken.getCurrentAccessToken().getToken());    //==========  ATTEND   =====================  Switch attendSwitch = (Switch) findViewById(R.id.attend_switch); userEvents = appData.get_userEventList();  if(userEvents!=null) { for(Event ev: userEvents) if(ev.equalCheck(currEvent)) { attendSwitch.setChecked(true); checkedFlag = true; } if(!checkedFlag) attendSwitch.setChecked(false); } if(appData.get_loginType().compareTo(""guest"")==0) { Button attendeesBTN=(Button)findViewById(R.id.attendees_cmd); Button chatBTN=(Button)findViewById(R.id.chat_cmd); chatBTN.setAlpha(.5f); chatBTN.setEnabled(false); attendeesBTN.setAlpha(.5f); attendSwitch.setAlpha(.5f); attendSwitch.setEnabled(false);  } attendSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { printToastDialog(bl.Attend(appData.get_userToken(), currEvent.getId(), isChecked)); appData.set_userEventList(bl.getUserEvents(appData.get_userToken()));    } });     /* CheckBox attend = (CheckBox) findViewById(R.id.attend_check); userEvents=appData.get_userEventList(); if(userEvents!=null) { for(Event ev: userEvents) if(ev.equals(currEvent)) { attend.setChecked(true); checkedFlag = true; } if(!checkedFlag) attend.setChecked(false); } if(appData.get_loginType().compareTo(""guest"")==0) { Button attendeesBTN=(Button)findViewById(R.id.attendees_cmd); Button chatBTN=(Button)findViewById(R.id.chat_cmd); chatBTN.setAlpha(.5f); chatBTN.setEnabled(false); attendeesBTN.setAlpha(.5f); attend.setAlpha(.5f); attend.setEnabled(false);  } attend.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { printToastDialog(bl.Attend(appData.get_userToken(), currEvent.getId(), isChecked)); appData.set_userEventList(bl.getUserEvents(appData.get_userToken()));  } }); */  //==========  DATE   ================== tv =(TextView)findViewById(R.id.date_lbl);  //TODO - ADD DATE tv.setText(currEvent.getDate());  //==========  NAME   ================== tv =(TextView)findViewById(R.id.evName_lbl); tv.setText(currEvent.getName());  //==========  TIME   ================== tv =(TextView)findViewById(R.id.time_lbl); tv.setText(currEvent.getTime());  //==========  CITY   ================== tv =(TextView)findViewById(R.id.cityName_lbl); tv.setText(currEvent.getCity());  //==========  ADDRESS   ================== tv =(TextView)findViewById(R.id.address_lbl); tv.setText(currEvent.getAddress());  //==========  DESCRIPTION   ================== tv =(TextView)findViewById(R.id.description_lbl);    ///TO ADD tv.setText(currEvent.getDescription()); //tv.setText(R.string.description); //tv.setClickable(true);  //tv.setMovementMethod(new ScrollingMovementMethod());    //==========  EVENT URL   ================== tv =(TextView)findViewById(R.id.url_lbl); tv.setClickable(true); tv.setMovementMethod(LinkMovementMethod.getInstance()); String text = ""<a href='""+currEvent.getEventUrl()+""'> Event Info </a>""; tv.setText(Html.fromHtml(text));  //==========  HOST   ================== tv =(TextView)findViewById(R.id.host_lbl); tv.setText(currEvent.getHost());  //==========  PRICE   ================== tv =(TextView)findViewById(R.id.price_lbl);  //chang to price tv.setText(currEvent.getPrice()); if(!(currEvent.getPrice().contains(""free""))) { tv.setClickable(true); tv.setMovementMethod(LinkMovementMethod.getInstance()); text = ""<a href='""+currEvent.getPrice()+""'> Price Info </a>""; tv.setText(Html.fromHtml(text));  } //==========  ATTENDEES   ================== tv =(TextView)findViewById(R.id.attending_lbl); tv.setText(currEvent.getAttendees());  } "	0	0	1	1	0	0
"@Override public List<XYModel> getChartData(XYChartData chartData, List<TitleColumn> titleColumns) throws HpccConnectionException, NumberFormatException, XPathExpressionException { List<XYModel> dataList = null;  try { if(chartData.isGenericQuery()){ return getGenericQueryData(chartData,titleColumns); }else{ StringBuilder urlBuilder = new StringBuilder(); if (chartData.getHpccConnection().getIsSSL()) { urlBuilder.append(Constants.HTTPS); } else { urlBuilder.append(Constants.HTTP); } urlBuilder.append(chartData.getHpccConnection().getHostIp()) .append("":"") .append(chartData.getHpccConnection().getWsEclPort()) .append(""/WsEcl/submit/query/"") .append(chartData.getHpccConnection().getClusterType()) .append(""/"") .append(chartData.getFiles().iterator().next()) .append(""/xml?"");   //Input parameter may not have any value selected //or it has single value selected for a single input parameter if( chartData.isGrouped() && chartData.getMeasures().get(0).getAggregateFunction() != null &&!Constants.NONE.equals(chartData.getMeasures().get(0).getAggregateFunction())){ Map<String,Map<String,List<Object>>> groupedData =  getGroupedChartData(urlBuilder,chartData); return aggregateGroupedData(groupedData,chartData.getMeasures().get(0).getAggregateFunction()); }else{ dataList = getNonGenericQueryData(urlBuilder,chartData,titleColumns); LOG.debug(""dataList -->""+dataList); return doAggregation(dataList, chartData); } }   } catch (NumberFormatException e) { throw e; } catch (SAXException | IOException | ParserConfigurationException e) { LOG.error(Constants.EXCEPTION, e); if (e.getMessage().contains(""Unauthorized"")) { throw new HpccConnectionException(""401 Unauthorized""); } else { throw new HpccConnectionException(e.getMessage()); } }   } "	1	0	1	0	0	0
"public static void cleanJobStagingData(State state, Logger logger) throws IOException { Preconditions.checkArgument(state.contains(ConfigurationKeys.WRITER_STAGING_DIR), ""Missing required property "" + ConfigurationKeys.WRITER_STAGING_DIR); Preconditions.checkArgument(state.contains(ConfigurationKeys.WRITER_OUTPUT_DIR), ""Missing required property "" + ConfigurationKeys.WRITER_OUTPUT_DIR);  String writerFsUri = state.getProp(ConfigurationKeys.WRITER_FILE_SYSTEM_URI, ConfigurationKeys.LOCAL_FS_URI); FileSystem fs = getFsWithProxy(state, writerFsUri, WriterUtils.getFsConfiguration(state));  Path jobStagingPath = new Path(state.getProp(ConfigurationKeys.WRITER_STAGING_DIR)); logger.info(""Cleaning up staging directory "" + jobStagingPath); HadoopUtils.deletePath(fs, jobStagingPath, true);  if (fs.exists(jobStagingPath.getParent()) && fs.listStatus(jobStagingPath.getParent()).length == 0) { logger.info(""Deleting directory "" + jobStagingPath.getParent()); HadoopUtils.deletePath(fs, jobStagingPath.getParent(), true); }  Path jobOutputPath = new Path(state.getProp(ConfigurationKeys.WRITER_OUTPUT_DIR)); logger.info(""Cleaning up output directory "" + jobOutputPath); HadoopUtils.deletePath(fs, jobOutputPath, true);  if (fs.exists(jobOutputPath.getParent()) && fs.listStatus(jobOutputPath.getParent()).length == 0) { logger.info(""Deleting directory "" + jobOutputPath.getParent()); HadoopUtils.deletePath(fs, jobOutputPath.getParent(), true); }  if (state.contains(ConfigurationKeys.ROW_LEVEL_ERR_FILE)) { if (state.getPropAsBoolean(ConfigurationKeys.CLEAN_ERR_DIR, ConfigurationKeys.DEFAULT_CLEAN_ERR_DIR)) { Path jobErrPath = new Path(ConfigurationKeys.ROW_LEVEL_ERR_FILE); log.info(""Cleaning up err directory : "" + jobErrPath); HadoopUtils.deleteIfExists(fs, jobErrPath, true); } } } "	0	0	1	1	0	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);  findViewById(R.id.download_btn_start).setOnClickListener(this); findViewById(R.id.download_btn_start1).setOnClickListener(this); findViewById(R.id.download_btn_start2).setOnClickListener(this); findViewById(R.id.download_btn_start3).setOnClickListener(this); findViewById(R.id.download_btn_start4).setOnClickListener(this);  progressBar = (ProgressBar) findViewById(R.id.download_progress); progressBar1 = (ProgressBar) findViewById(R.id.download_progress1); progressBar2 = (ProgressBar) findViewById(R.id.download_progress2); progressBar3 = (ProgressBar) findViewById(R.id.download_progress3); progressBar4 = (ProgressBar) findViewById(R.id.download_progress4);  textSpeed = (TextView) findViewById(R.id.download_tv_speed0); textSpeed1 = (TextView) findViewById(R.id.download_tv_speed1); textSpeed2 = (TextView) findViewById(R.id.download_tv_speed2); textSpeed3 = (TextView) findViewById(R.id.download_tv_speed3); textSpeed4 = (TextView) findViewById(R.id.download_tv_speed4);  OkHttpClient client = new OkHttpClient.Builder().build(); downloadManager = new DownloadManager.Builder().context(this) .downloader(OkHttpDownloader.create(client)) .threadPoolSize(2) .logger(new Logger() { @Override public void log(String message) { Log.d(""TAG"", message); } }) .build(); } "	0	0	1	1	0	0
@Test public void addTraining() throws InterruptedException { onView(withId(R.id.fab1)).check(matches(withEffectiveVisibility(INVISIBLE))); onView(matchFab()).perform(click()); onView(allOf(withId(R.id.fab1), hasSibling(matchFab()))).perform(click()); allowPermissionsIfNeeded(activityTestRule.getActivity(), ACCESS_FINE_LOCATION); clickActionBarItem(R.id.action_save, R.string.save); onView(isRoot()).perform(orientationLandscape(activityTestRule)); navigateUp(); onView(isRoot()).perform(orientationPortrait(activityTestRule)); pressBack(); pressBack(); } 	0	1	1	0	0	0
private Mission generateMission(boolean isDeepCopy) { final Mission mission = new Mission();  if (!missionItemProxies.isEmpty()) { for (MissionItemProxy itemProxy : missionItemProxies) { MissionItem sourceItem = itemProxy.getMissionItem(); MissionItem destItem = isDeepCopy ? sourceItem.clone() : sourceItem; mission.addMissionItem(destItem); } }  return mission; } 	1	0	1	0	0	0
"public void sendMissionToAPM(Drone drone) { drone.setMission(generateMission(), true);  final int missionItemsCount = missionItemProxies.size();  String missionItemsList = ""[""; if (missionItemsCount > 0) { boolean isFirst = true; for (MissionItemProxy itemProxy : missionItemProxies) { if (isFirst) isFirst = false; else missionItemsList += "", "";  missionItemsList += itemProxy.getMissionItem().getType().getLabel(); } }  missionItemsList += ""]"";  HitBuilders.EventBuilder eventBuilder = new HitBuilders.EventBuilder() .setCategory(GAUtils.Category.MISSION_PLANNING) .setAction(""Mission sent to drone"") .setLabel(""Mission items: "" + missionItemsList); GAUtils.sendEvent(eventBuilder);  //Send an event for the created mission eventBuilder = new HitBuilders.EventBuilder() .setCategory(GAUtils.Category.MISSION_PLANNING) .setAction(""Mission sent to drone"") .setLabel(""Mission items count"") .setValue(missionItemsCount); GAUtils.sendEvent(eventBuilder); } "	1	0	1	0	0	0
private void createCheckpointBoxes() { List<Checkpoint> checkpoints = currentState.getLevelPointForTeam().getCheckpoints(); int checkpointsCount = checkpoints.size(); int colCount = checkpointsCount / 2; if (checkpointsCount % 2 != 0) colCount += 1;  int rowCount = 5; List<TableRow> rows = new ArrayList<TableRow>(); for (int i = 0; i < rowCount; i++) { TableRow tableRow = new TableRow(inputDataActivity); rows.add(tableRow); checkpointsPanel.addView(tableRow); }  buildCheckpointsRow(rows, 0, checkpoints, colCount); buildSeparatorRow(rows.get(2)); buildCheckpointsRow(rows, 1, checkpoints, colCount); } 	1	0	1	0	0	0
@Override public void showInterstitial(MyAdListener adListener) { if (mMyPreferenceManager.isTimeToShowVideoInsteadOfInterstitial() && Appodeal.isLoaded(Appodeal.SKIPPABLE_VIDEO)) { Appodeal.show(this, Appodeal.NON_SKIPPABLE_VIDEO); } else { mInterstitialAd.setAdListener(adListener); mInterstitialAd.show(); } } 	1	0	1	1	0	0
public static Set<String> getUtilCacheTableKeySet() { Set<String> set = new HashSet<String>(utilCacheTable.size()); set.addAll(utilCacheTable.keySet()); return set; } 	1	0	1	1	0	0
"private Map<String, Object> createLineInfo(int keyNum, K key, CacheLine<V> line) { Map<String, Object> lineInfo = new HashMap<String, Object>(); lineInfo.put(""elementKey"", key);  if (line.getLoadTimeNanos() > 0) { lineInfo.put(""expireTimeMillis"", TimeUnit.MILLISECONDS.convert(line.getExpireTimeNanos() - System.nanoTime(), TimeUnit.NANOSECONDS)); } lineInfo.put(""lineSize"", findSizeInBytes(line.getValue())); lineInfo.put(""keyNum"", keyNum); return lineInfo; } "	1	0	1	0	0	0
@Test public void whenCheckinHealthForModuleListWithNullEntries_thenIgnoreNullEntries() { List<ModuleFitness> fitnesses = new ModuleFitnessChecker(null) .checkHealth(Arrays.asList(mock(PepperModule.class), null, mock(PepperModule.class))); assertThat(fitnesses.size()).isEqualTo(2); } 	1	0	1	0	0	0
private void setResultContent(){ Intent resultIntent = new Intent(); mContent = mContentEditText.getText().toString(); resultIntent.putExtra(ARG_CONTENT,mContent); mFirebaseDatabaseHelper.updateBookAnnotation(mFirebaseAuth.getCurrentUser().getUid(), mFolderId, mBookId, mContent);  setResult(Activity.RESULT_OK, resultIntent); finish(); } 	0	1	1	0	0	0
"@Nonnull private CSSExpressionMemberMathProduct _createExpressionMathProduct (@Nonnull final CSSNode aNode) { _expectNodeType (aNode, ECSSNodeType.MATHPRODUCT);  final CSSExpressionMemberMathProduct ret = new CSSExpressionMemberMathProduct (); ret.setSourceLocation (aNode.getSourceLocation ());  // read all sums for (final CSSNode aChildNode : aNode) { if (ECSSNodeType.MATHUNIT.isNode (aChildNode, m_eVersion)) { final int nChildCount = aChildNode.jjtGetNumChildren (); if (nChildCount == 0) { final CSSExpressionMemberMathUnitSimple aMember = new CSSExpressionMemberMathUnitSimple (aChildNode.getText ()); aMember.setSourceLocation (aChildNode.getSourceLocation ()); ret.addMember (aMember); } else if (nChildCount == 1 && ECSSNodeType.FUNCTION.isNode (aChildNode.jjtGetChild (0), m_eVersion)) { // Source location is taken from aNestedProduct ret.addMember (_createExpressionFunction (aChildNode.jjtGetChild (0))); } else { if ((nChildCount % 2) != 1) _throwUnexpectedChildrenCount (aChildNode, ""CSS math unit expected odd child count and got "" + nChildCount);  final CSSExpressionMemberMathProduct aNestedProduct = new CSSExpressionMemberMathProduct (); for (int i = 0; i < nChildCount; ++i) { final CSSNode aChildChildNode = aChildNode.jjtGetChild (i); if (ECSSNodeType.MATHPRODUCT.isNode (aChildChildNode, m_eVersion)) { // Source location is taken from aNestedProduct aNestedProduct.addMember (_createExpressionMathProduct (aChildChildNode)); } else if (ECSSNodeType.MATHSUMOPERATOR.isNode (aChildChildNode, m_eVersion)) { final String sText = aChildChildNode.getText (); final ECSSMathOperator eMathOp = ECSSMathOperator.getFromNameOrNull (sText); if (eMathOp == null) s_aLogger.error (""Failed to parse math operator '"" + sText + ""'""); else aNestedProduct.addMember (eMathOp); } else s_aLogger.error (""Unsupported child of "" + ECSSNodeType.getNodeName (aChildNode, m_eVersion) + "": "" + ECSSNodeType.getNodeName (aChildChildNode, m_eVersion)); } ret.addMember (new CSSExpressionMemberMathUnitProduct (aNestedProduct)); } } else if (ECSSNodeType.MATHPRODUCTOPERATOR.isNode (aChildNode, m_eVersion)) { final String sText = aChildNode.getText (); final ECSSMathOperator eMathOp = ECSSMathOperator.getFromNameOrNull (sText); if (eMathOp == null) s_aLogger.error (""Failed to parse math product operator '"" + sText + ""'""); else ret.addMember (eMathOp); } else s_aLogger.error (""Unsupported child of "" + ECSSNodeType.getNodeName (aNode, m_eVersion) + "": "" + ECSSNodeType.getNodeName (aChildNode, m_eVersion)); }  return ret; } "	1	0	1	1	0	0
public void interact(Npcs.Option option) { Menu.interact(this, option.getActionId()); } 	1	0	1	0	0	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_synchro_video);  context = this;  //main surfaceview SurfaceView main_surface = (SurfaceView) findViewById(R.id.main_surface); mRecorder = new VideoRecorder(this, movie_time, sava_dir, main_surface, getResources());  //sub surfaceview mOverLaySurfaceView = (SurfaceView) findViewById(R.id.sub_surface); mOverLayHolder = mOverLaySurfaceView.getHolder(); mOverLayHolder.setFormat(PixelFormat.TRANSLUCENT);//ここで半透明にする mPreviewCallback = new PreviewSurfaceViewCallback(context); mOverLayHolder.addCallback(mPreviewCallback); mOverLaySurfaceView.setVisibility(SurfaceView.INVISIBLE);  try { File dir_save = new File(sava_dir); dir_save.mkdir(); } catch (Exception e) { Toast.makeText(context, ""e:"" + e, Toast.LENGTH_SHORT).show(); }  //Start button btn_start = (Button)findViewById(R.id.btn_start); btn_start.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (mRecorder != null) { is_playing = true; btn_start.setVisibility(View.INVISIBLE); btn_stop.setVisibility(View.VISIBLE); mRecorder.start(); } } });  //Recording stop btn_stop = (Button)findViewById(R.id.btn_stop); btn_stop.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { is_playing = false; btn_start.setVisibility(View.VISIBLE); btn_stop.setVisibility(View.INVISIBLE); mRecorder.stop(); } });    Team mTeam1 = new Team(context, (ListView) findViewById(R.id.our_team_list), our_member_num); Team mTeam2 = new Team(context, (ListView) findViewById(R.id.opposing_team_list), opp_member_num); mEventLogger = new EventLogger(context,(ListView) findViewById(R.id.event_log));  findViewById(R.id.shoot_success_2p).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { recordEvent(2,1,""shoot"");//1:point,2:is success?,3:event name if(is_scoresheetview) setScoresheet(); } }); findViewById(R.id.shoot_success_3p).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { recordEvent(3,1,""shoot"");//1:point,2:is success?,3:event name if(is_scoresheetview) setScoresheet(); } }); findViewById(R.id.shoot_failed_2p).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { recordEvent(2,0,""shoot"");//1:point,2:is success?,3:event name } }); findViewById(R.id.shoot_failed_3p).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { recordEvent(3,0,""shoot"");//1:point,2:is success?,3:event name } }); findViewById(R.id.foul).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { recordEvent(0,1,""foul""); } });  is_scoresheetview = false; findViewById(R.id.chenge_scoresheet_and_eventlog).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { LinearLayout menu = (LinearLayout) findViewById(R.id.menu); if(!is_scoresheetview) { LinearLayout eventlog = (LinearLayout) findViewById(R.id.menu_log); menu.removeView(eventlog); getLayoutInflater().inflate(R.layout.score_sheet, menu);  setScoresheet(); is_scoresheetview = true; }else{ LinearLayout scoresheet = (LinearLayout) findViewById(R.id.scoresheet); menu.removeView(scoresheet); getLayoutInflater().inflate(R.layout.event_log, menu); mEventLogger = new EventLogger(context,(ListView) findViewById(R.id.event_log)); is_scoresheetview = false; } } }); } "	1	1	1	0	1	0
"@Override void onBackendConnected() { this.xmppConnectionService.getNotificationService().setIsInForeground(true); updateConversationList();  Bundle extras = getIntent().getExtras(); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) { if (extras != null) { FirstStartTime = extras.getLong(""FirstStart""); Log.d(Config.LOGTAG, ""Get first start time from StartUI: "" + FirstStartTime); } } else { FirstStartTime = System.currentTimeMillis(); Log.d(Config.LOGTAG, ""Device is running Android < SDK 23, no restart required: "" + FirstStartTime); }  if (mPendingConferenceInvite != null) { mPendingConferenceInvite.execute(this); mToast = Toast.makeText(this, R.string.creating_conference,Toast.LENGTH_LONG); mToast.show(); mPendingConferenceInvite = null; }  if (FirstStartTime == 0) { Log.d(Config.LOGTAG, ""First start time: "" + FirstStartTime + "", restarting App""); //write first start timestamp to file String PREFS_NAME = ""FirstStart""; FirstStartTime = System.currentTimeMillis(); SharedPreferences FirstStart = getApplicationContext().getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE); SharedPreferences.Editor editor = FirstStart.edit(); editor.putLong(""FirstStart"", FirstStartTime); editor.commit(); // restart Intent intent = getBaseContext().getPackageManager().getLaunchIntentForPackage(getBaseContext().getPackageName()); intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(intent); System.exit(0); }  if (xmppConnectionService.getAccounts().size() == 0) { if (mRedirected.compareAndSet(false, true)) { if (Config.X509_VERIFICATION) { startActivity(new Intent(this, ManageAccountActivity.class)); } else if (Config.MAGIC_CREATE_DOMAIN != null) { Log.d(Config.LOGTAG, ""First start time: "" + FirstStartTime); startActivity(new Intent(this, WelcomeActivity.class)); } else { startActivity(new Intent(this, EditAccountActivity.class)); } finish(); } } else if (conversationList.size() <= 0) { if (mRedirected.compareAndSet(false, true)) { Account pendingAccount = xmppConnectionService.getPendingAccount(); if (pendingAccount == null) { Intent intent = new Intent(this, StartConversationActivity.class); intent.putExtra(""init"", true); startActivity(intent); } else { switchToAccount(pendingAccount, true); } finish(); } } else if (getIntent() != null && VIEW_CONVERSATION.equals(getIntent().getType())) { clearPending(); handleViewConversationIntent(getIntent()); } else if (selectConversationByUuid(mOpenConverstaion)) { if (mPanelOpen) { showConversationsOverview(); } else { if (isConversationsOverviewHideable()) { openConversation(); updateActionBarTitle(true); } } this.mConversationFragment.reInit(getSelectedConversation()); mOpenConverstaion = null; } else if (getSelectedConversation() == null) { showConversationsOverview(); clearPending(); setSelectedConversation(conversationList.get(0)); this.mConversationFragment.reInit(getSelectedConversation()); } else { this.mConversationFragment.messageListAdapter.updatePreferences(); this.mConversationFragment.messagesView.invalidateViews(); this.mConversationFragment.setupIme(); }  if (xmppConnectionService.getAccounts().size() != 0) { AppUpdate(); }  if (this.mPostponedActivityResult != null) { this.onActivityResult(mPostponedActivityResult.first, RESULT_OK, mPostponedActivityResult.second); }  if (!forbidProcessingPendings) { for (Iterator<Uri> i = mPendingImageUris.iterator(); i.hasNext(); i.remove()) { Uri foo = i.next(); attachImageToConversation(getSelectedConversation(), foo); }  for (Iterator<Uri> i = mPendingFileUris.iterator(); i.hasNext(); i.remove()) { attachFileToConversation(getSelectedConversation(), i.next()); }  if (mPendingGeoUri != null) { attachLocationToConversation(getSelectedConversation(), mPendingGeoUri); mPendingGeoUri = null; } } forbidProcessingPendings = false;  if (!ExceptionHelper.checkForCrash(this, this.xmppConnectionService)) { openBatteryOptimizationDialogIfNeeded(); } setIntent(new Intent()); } "	0	1	1	0	0	0
@Override public IBlockState getStateFromMeta(int meta) {  if (meta >= 0 || meta < EnumType.values().length) { return this.getDefaultState().withProperty(VARIANT, EnumType.values()[meta]); } return getDefaultState(); } 	1	0	1	1	0	0
protected void updateServer(boolean limit) { if (optOut || offline) { return; }  if (!uploadingCurrently.getAndSet(true)) { DatabaseHelper dbHelper = DatabaseHelper.getDatabaseHelper(context); try { int batchLimit = limit ? (backoffUpload ? backoffUploadBatchSize : eventUploadMaxBatchSize) : -1;  List<JSONObject> events = dbHelper.getEvents(getLastEventId(), batchLimit).second; List<JSONObject> identifys = dbHelper.getIdentifys(getLastIdentifyId(), batchLimit).second; int numEvents = Math.min(batchLimit, events.size() + identifys.size());  final Pair<Pair<Long, Long>, JSONArray> merged = mergeEventsAndIdentifys( events, identifys, numEvents); final long maxEventId = merged.first.first; final long maxIdentifyId = merged.first.first; final String mergedEvents = merged.second.toString();  httpThread.post(new Runnable() { @Override public void run() { makeEventUploadPostRequest(new OkHttpClient(), mergedEvents, maxEventId, maxIdentifyId); } }); } catch (JSONException e) { uploadingCurrently.set(false); Log.e(TAG, e.toString()); } } } 	1	0	1	1	0	0
public void clearCache () {  mSrcTime.clear ();    mSrcTimeFieldState.setState  (MamdaFieldState.NOT_INITIALISED); mActTime.clear ();    mActTimeFieldState.setState  (MamdaFieldState.NOT_INITIALISED); mSendTime.clear();    mSendTimeFieldState.setState (MamdaFieldState.NOT_INITIALISED); mLineTime.clear();    mLineTimeFieldState.setState (MamdaFieldState.NOT_INITIALISED);  mIssueSymbol.setValue (null);  mIssueSymbolFieldState.setState (MamdaFieldState.NOT_INITIALISED); mPartId.setValue      (null);  mPartIdFieldState.setState      (MamdaFieldState.NOT_INITIALISED); mSymbol.setValue      (null);  mSymbolFieldState.setState      (MamdaFieldState.NOT_INITIALISED);  mUncrossPrice.clear     (); mUncrossVolume.setValue (0); mUncrossPriceInd.set    (MamdaUncrossPriceInd.UNCROSS_NONE);  mUncrossPriceFieldState.setState    (MamdaFieldState.NOT_INITIALISED); mUncrossVolumeFieldState.setState   (MamdaFieldState.NOT_INITIALISED); mUncrossPriceIndFieldState.setState (MamdaFieldState.NOT_INITIALISED); } 	1	1	1	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); mActivity = this; setContentView(R.layout.activity_nav_drawer2);  /* get views from xml */ mTextView1 = (TextView)findViewById(R.id.item1); Toolbar toolbar = (Toolbar)findViewById(R.id.toolbar); mDrawerLayout = (DrawerLayout)findViewById(R.id.drawer_layout);  /* setup toolbar */ setSupportActionBar(toolbar); getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeButtonEnabled(true); getSupportActionBar().setDisplayShowTitleEnabled(false); toolbar.setTitle(""Nav Drawer Example"");  final ActionBarDrawerToggle mDrawerToggle = new ActionBarDrawerToggle( this,  mDrawerLayout, toolbar, R.string.drawer_open_string, R.string.drawer_close_string){ @Override public void onDrawerOpened(View drawerView) { super.onDrawerOpened(drawerView); // Note that playNow() is used instead of playOn(), because NavigationDrawer is initially hidden. mTutorialHandler = TourGuide.init(mActivity).with(TourGuide.Technique.Click) .setPointer(new Pointer()) .setToolTip(new ToolTip().setTitle(null).setDescription(""hello world"")) .setOverlay(new Overlay().setBackgroundColor(Color.parseColor(""#66FF0000""))) .playNow(mTextView1); } }; mDrawerLayout.setDrawerListener(mDrawerToggle); mDrawerToggle.syncState();  /* setup clean up code */ mTextView1.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { mTutorialHandler.cleanUp(); mDrawerLayout.closeDrawers(); } });  final ViewTreeObserver viewTreeObserver = mTextView1.getViewTreeObserver(); viewTreeObserver.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() { @Override public void onGlobalLayout() { mTextView1.getViewTreeObserver().removeGlobalOnLayoutListener(this);// make sure this only run once mDrawerLayout.openDrawer(Gravity.LEFT); } }); } "	0	1	1	1	0	0
"private String getTagsFromArticle(Article article) { String tagsString = """"; if (!(article.getName() == null)| !(article.getName().equals(""""))) { String[] tempTags = article.getName().split(""[ ]+""); for (String currentTag : tempTags) { tagsString += currentTag + "", ""; } tagsString = tagsString.substring(0,tagsString.length()-1); } else { throw new IllegalArgumentException(""Name tag is empty""); } return tagsString; } "	1	0	1	1	0	0
"public static UpdateInfo isUpdateAvailable(URL repoBaseURL, String mavenGroupID, String mavenArtifactID, String mavenClassifier) { String savedSetting = updatePrefs.getPreference(latestSeenVersionPrefKey, """"); UpdateInfo res = null; try { System.out.println(""Checking for updates...""); res = getLatestUpdateInfo(repoBaseURL, mavenGroupID, mavenArtifactID, mavenClassifier);  Version currentVersion = new Version(Common.getAppVersion()); Version savedVersion = null; try { savedVersion = new Version(savedSetting); } catch (IllegalArgumentException e) { // No update was ever ignored by the user so use the current // version as the savedVersion savedVersion = currentVersion; }  if (res.toVersion.compareTo(savedVersion) == 1 || savedSetting.equals("""")) { // new update found System.out.println(""Update available!""); System.out.println(""Version after update: "" + res.toVersion.toString()); System.out.println(""Filesize:             "" + res.fileSizeInMB + ""MB""); res.showAlert = true; } else if (res.toVersion.compareTo(currentVersion) == 1) { // found update that is ignored System.out.println(""Update available (Update was ignored by the user)!""); System.out.println(""Version after update: "" + res.toVersion.toString()); System.out.println(""Filesize:             "" + res.fileSizeInMB + ""MB""); } else { System.out.println(""No update found.""); } } catch (JDOMException | IOException e) { // TODO Auto-generated catch block e.printStackTrace(); }  return res; } "	1	0	1	1	0	0
private static <T extends Selectable> Matches<T> findMatches(Collection<T> collection, boolean complete, String... tokens) { List<T> listOfMatches = new ArrayList<T>(); // Do not start with 0, as this would gather all Articles if the query did not match any Article. double maximumSimilarity = 1e-6; for (T candidate : collection) { String[] titleWords = split(candidate.getName().getSingular()); int matches = countMatches(tokens, titleWords); if (!complete || matches == tokens.length) { double matchesOverTitleWords = matches / (double) titleWords.length; double matchesOverSearchArgs = matches / (double) tokens.length; double similarity = DungeonMath.mean(matchesOverTitleWords, matchesOverSearchArgs); int comparisonResult = DungeonMath.fuzzyCompare(similarity, maximumSimilarity); if (comparisonResult > 0) { maximumSimilarity = similarity; listOfMatches.clear(); listOfMatches.add(candidate); } else if (comparisonResult == 0) { listOfMatches.add(candidate); } } } return Matches.fromCollection(listOfMatches); } 	1	0	1	1	0	0
@Override protected void writeImpl(AionConnection con) { writeH(skillId); if (skillId >= 30001 && skillId <= 30003 || skillId >= 40001 && skillId <= 40010) { writeC(0); writeC(0); } else if (isStigma) { writeC(1); writeC(1); } else if (isLinked) { writeC(1); writeC(3); } else { // remove skills active or passive writeC(skillLevel); } } 	1	1	1	0	1	0
@Override public void onClick(View view) { switch (view.getId()){ case R.id.connect_button: try { bitalino.connect(bluetoothDevice.getAddress()); } catch (BITalinoException e) { e.printStackTrace(); }  //                try { //                    bitalino2.connect(identifierBITalino2); //                } catch (BITalinoException e) { //                    e.printStackTrace(); //                } break; case R.id.disconnect_button: try { bitalino.disconnect(); } catch (BITalinoException e) { e.printStackTrace(); }  //                try { //                    bitalino2.disconnect(); //                } catch (BITalinoException e) { //                    e.printStackTrace(); //                } break; case R.id.start_button: try { bitalino.start(new int[]{0,1,2,3,4,5}, 1); } catch (BITalinoException e) { e.printStackTrace(); } break; case R.id.stop_button: try { bitalino.stop(); } catch (BITalinoException e) { e.printStackTrace(); } break; case R.id.state_button: try { bitalino.state(); } catch (BITalinoException e) { e.printStackTrace(); } break; case R.id.trigger_button: int[] digitalChannels; if(isBITalino2){ digitalChannels = new int[2]; } else{ digitalChannels = new int[4]; }  digitalChannels[0] = (digital1RadioButton.isChecked()) ? 1 : 0; digitalChannels[1] = (digital2RadioButton.isChecked()) ? 1 : 0;  if(!isBITalino2){ digitalChannels[2] = (digital3RadioButton.isChecked()) ? 1 : 0; digitalChannels[3] = (digital4RadioButton.isChecked()) ? 1 : 0; }  try { bitalino.trigger(digitalChannels); } catch (BITalinoException e) { e.printStackTrace(); } break; case R.id.digital_1_radio_button: if(isDigital1RadioButtonChecked){ digital1RadioButton.setChecked(false); } else{ digital1RadioButton.setChecked(true); } isDigital1RadioButtonChecked = digital1RadioButton.isChecked(); break; case R.id.digital_2_radio_button: if(isDigital2RadioButtonChecked){ digital2RadioButton.setChecked(false); } else{ digital2RadioButton.setChecked(true); } isDigital2RadioButtonChecked = digital2RadioButton.isChecked(); break; case R.id.digital_3_radio_button: if(digital3RadioButton.isChecked()){ digital3RadioButton.setChecked(false); } else{ digital3RadioButton.setChecked(true); } break; case R.id.digital_4_radio_button: if(digital4RadioButton.isChecked()){ digital4RadioButton.setChecked(false); } else{ digital4RadioButton.setChecked(true); } break; case R.id.battery_threshold_button: try { bitalino.battery(batteryThresholdSeekBar.getProgress()); } catch (BITalinoException e) { e.printStackTrace(); } break; case R.id.pwm_button: try { bitalino.pwm(pwmSeekBar.getProgress()); } catch (BITalinoException e) { e.printStackTrace(); } break; } } 	0	0	1	1	0	0
@FXML private void handleCheckButtonEvaluatie2(ActionEvent event) throws IOException { if(dc.getHuidigeLeerling().getEvaluaties().size() == 1){ dc.getHuidigeLeerling().getEvaluaties().add(new Evaluatie(dc.getHuidigeLeerling().getVT(), dc.getHuidigeLeerling().getRT(), dc.getHuidigeLeerling().getHoofdscherm())); } else evaluatie2.setSelected(false); if(dc.getHuidigeLeerling().getEvaluaties().size() == 2){ evaluatie2.setSelected(true); } } 	1	1	1	1	0	0
public void onDeckClicked(int position, View view) { Context context = view.getContext(); Intent intent = new Intent(context, ExamActivity.class); intent.putExtra(context.getString(R.string.deck_data_key), dataHelper.getSingleDeck(position)); context.startActivity(intent); } 	0	1	1	1	0	0
@Override ArrayList<EntityComponent> addComponents() { final ArrayList<EntityComponent> components = new ArrayList<EntityComponent>(); final EntityGraphics graphics = new PlayerGraphics(); final EntityPhysics physics = new EntityPhysics(graphics.getWidth() - 0.3f, graphics.getHeight() - 0.3f, BodyDef.BodyType.DynamicBody, 50, 0); components.add(graphics); components.add(physics); components.add(new EntityAI(new BehaviourTree(new TestNode()))); return components; } 	0	1	1	1	0	0
@Override public Edge getEdge(Object id) { graphStore.autoReadLock(); try { EdgeImpl edge = graphStore.getEdge(id); if (view.containsEdge(edge)) { return edge; } return null; } finally { graphStore.autoReadUnlock(); } } 	1	1	1	1	0	0
"private static void importPreferences(final String file) { final Path importFile = getPreferenceFile(file);  if (Files.isReadable(Paths.get(file))) { Logger.getLogger(PortablePreferences.class.getName()).info(""Importing preferences"");  try (final InputStream is = Files.newInputStream(importFile)) { Preferences.importPreferences(is); } catch (final InvalidPreferencesFormatException | IOException e) { System.err.println(""Preferences file "" + importFile.toString() + "" could not be read""); Logger.getLogger(PortablePreferences.class.getName()).log(Level.SEVERE, e.toString(), e); } } else { System.err.println(""Preferences file "" + importFile.toString() + "" was not found""); } } "	1	0	1	0	0	0
@Override public GreenMailUser setUser(String email, String login, String password) { GreenMailUser user = managers.getUserManager().getUser(email); if (null == user) { try { user = managers.getUserManager().createUser(email, login, password); } catch (UserException e) { throw new RuntimeException(e); } } else { user.setPassword(password); } return user; } 	1	0	1	0	0	0
"public static String generateCreateDDL(Class<?> tableClass) { Table t = tableClass.getAnnotation(Table.class); if (t == null) { throw new ORMException(""No mapping to "" + tableClass + "", did you forget add @Table to your class?""); } StringBuilder sb = new StringBuilder(); sb.append(""CREATE TABLE ""); sb.append(t.name()); sb.append("" IF NOT EXISTS (""); sb.append(LF); List<ColumnWrap> list = Mapping.getInstance().getColumns(tableClass); for (ColumnWrap cw : list) { sb.append(new ColumnMeta(cw.getColumn()).toSQL()).toString(); sb.append("", ""); sb.append(LF); } int len = sb.length() - 2; len = len - LF.length(); sb.delete(len, sb.length()); sb.append("")""); sb.append(LF); return (sb.toString()); } "	1	1	1	0	1	0
public void addChat(String chatId) { if (chats == null) { chats = new ArrayList<>(); }  chats.add(chatId);  FirebaseProviderUtils.insertOrUpdateModel(this, null); } 	1	0	1	0	0	0
public void updateValueData(JsonArray valueArray) { Value val = ValueUtils.toValue(valueArray.get(0), (String) valueArray.get(1));  if (val.getType().getRawName().equals(node.getValueType().getRawName())) { node.setValueType(val.getType()); }  node.setValue(val); } 	1	0	1	1	0	0
@Override public void deleteByUidAndUserId(String deviceUid, String userId, String domainId) { String deviceId = UserDomainIdGenerator.generateDeviceId(domainId, userId, deviceUid); long result = deviceRepository.deleteById(deviceId); if ( result > 0 ) { eventsService.sendDeviceDeleteEvent(deviceId, userId, domainId); } } 	1	1	1	1	0	0
"public static boolean writeToFile(String fileName, String exportString, Context context) { //write built string to txt file try { File root = new File(Environment.getExternalStorageDirectory() + File.separator + ""Votenote"" + File.separator); root.mkdirs(); if (root.exists()) { File writeoutFile = new File(root, fileName + "".csv""); FileWriter writer = new FileWriter(writeoutFile); Log.i(""exporter"", writer.getEncoding()); writer.append(exportString.toString()); writer.flush(); writer.close(); Toast.makeText(context, ""Datei unter "" + writeoutFile.getAbsolutePath() + "" gespeichert."", Toast.LENGTH_LONG).show(); } else { Toast.makeText(context, ""Ordner konnte nicht erstellt werden!"", Toast.LENGTH_SHORT).show(); } } catch (IOException e) { e.printStackTrace(); String exportError = e.getMessage(); Toast.makeText(context, ""Export konnte nicht geschrieben werden!"", Toast.LENGTH_SHORT).show(); Log.w(""exporter"", ""ioexception: "" + exportError); return false; } return true; } "	1	1	1	1	1	0
"private QueryDefinition createErrorsQueryDefinition() { QueryDefinition query = new QueryDefinition(); query.setName(""unAckErrors""); query.setSource(System.getProperty(""org.kie.server.persistence.ds"", ""jdbc/jbpm-ds"")); query.setExpression(""select * from ExecutionErrorInfo where ERROR_ACK = 0""); query.setTarget(""CUSTOM""); return query; } "	0	0	1	1	0	0
"public static String listCountriesToString(List<Country> list){ String cadena=""""; if (list != null || !list.isEmpty()){ for (Country country : list) { cadena += country.getcountryName()+"", ""; } /* quita la coma y espacio final */ cadena += "".""; cadena = cadena.replace("", ."", """"); } return cadena;  } "	1	1	1	1	1	0
"private List<CopyEntity> getCopyEntitiesForUnpartitionedTable() throws IOException {  MultiTimingEvent multiTimer = new MultiTimingEvent(this.eventSubmitter, ""TableCopy"", true);  int stepPriority = 0; String fileSet = this.dataset.table.getTableName(); List<CopyEntity> copyEntities = Lists.newArrayList();  stepPriority = addSharedSteps(copyEntities, fileSet, stepPriority);  HiveLocationDescriptor sourceLocation = HiveLocationDescriptor.forTable(this.dataset.table, this.dataset.fs, this.dataset.properties); HiveLocationDescriptor desiredTargetLocation = HiveLocationDescriptor.forTable(this.targetTable, this.targetFs, this.dataset.properties); Optional<HiveLocationDescriptor> existingTargetLocation = this.existingTargetTable.isPresent() ? Optional.of(HiveLocationDescriptor.forTable(this.existingTargetTable.get(), this.targetFs, this.dataset.properties)) : Optional.<HiveLocationDescriptor>absent();  DiffPathSet diffPathSet = fullPathDiff(sourceLocation, desiredTargetLocation, existingTargetLocation, Optional.<Partition>absent(), multiTimer, this);  DeleteFileCommitStep deleteStep = DeleteFileCommitStep.fromPaths(targetFs, diffPathSet.pathsToDelete, this.dataset.properties); copyEntities.add(new PrePublishStep(fileSet, Maps.<String, Object>newHashMap(), deleteStep, stepPriority++));  for (CopyableFile.Builder builder : getCopyableFilesFromPaths(diffPathSet.filesToCopy, configuration, Optional.<Partition>absent())) { copyEntities.add(builder.build()); }  multiTimer.close(); return copyEntities; } "	0	0	1	1	0	0
"public Map<String, String> getAllSortedAsTree(int begin, int end) throws SystemException { Map<String, String> allInstitutions = new LinkedHashMap<String, String>(); List<Institution> einListAll = InstitutionFinderUtil.findAllSortedAsTree(1, 20);  for (Institution institution : einListAll) { String id = """" + institution.getInstitutionId(); String name = _indentFromPath(institution.getPath(), ""/"") + institution.getName(); allInstitutions.put(id, name); }  return allInstitutions; } "	0	0	1	1	0	0
"private void addJars(Path jarFileDir, String jarFileList) throws IOException { LocalFileSystem lfs = FileSystem.getLocal(conf); for (String jarFile : SPLITTER.split(jarFileList)) { Path srcJarFile = new Path(jarFile); FileStatus[] fileStatusList = lfs.globStatus(srcJarFile); for (FileStatus status : fileStatusList) { // DistributedCache requires absolute path, so we need to use makeQualified. Path destJarFile = new Path(this.fs.makeQualified(jarFileDir), status.getPath().getName()); // Copy the jar file from local file system to HDFS this.fs.copyFromLocalFile(status.getPath(), destJarFile); // Then add the jar file on HDFS to the classpath LOG.info(String.format(""Adding %s to classpath"", destJarFile)); DistributedCache.addFileToClassPath(destJarFile, this.conf, this.fs); } } } "	1	0	1	1	0	0
"public synchronized boolean updateMicrotaskAnswer(String sessionId, Integer microtaskId, Answer answer){ //set answer to the microtask in the WorkerSession WorkerSession session = this.activeSessionTable.get(sessionId);  if(session!=null){ session.insertMicrotaskAnswer(microtaskId,answer);  Microtask microtask = session.getPreviousMicrotask();  Worker worker = workerTable.get(answer.getWorkerId());  String explanation = answer.getExplanation().replaceAll(""[\n]"","" "").replaceAll(""[\r]"","" "");  sessionLogger.info(""EVENT%MICROTASK% workerId%""+ answer.getWorkerId()+""% sessionId%""+ sessionId+ ""% microtaskId%""+microtaskId+""% fileName%""+microtask.getFileName()+ ""% question%""+ microtask.getQuestion()+""% answer%""+answer.getOption()+ ""% confidenceLevel%""+answer.getConfidenceOption()+ ""% duration%""+answer.getElapsedTime()+""% explanation%""+explanation+""% fileName%""+worker.getCurrentFileName()+ ""% difficulty""+answer.getDifficulty());  if(session.isClosed()){//Move session to closed //EVENT this.closedSessionVector.add(session); sessionLogger.info(""EVENT%CLOSE SESSION% workerId%""+ session.getWorkerId()+""% sessionId%""+ session.getId()+""% fileName%""+worker.getCurrentFileName()); this.activeSessionTable.remove(session.getId()); } return true; } else return false; } "	0	0	1	1	0	0
"private List<QueueControl> getQueues(final DurabilityType durability) { try { List<QueueControl> matchingQueues = new ArrayList<>(); String[] queues = getQueueNames(); for (String queue : queues) { QueueControl coreQueueControl = (QueueControl) managementService.getResource(ResourceNames.QUEUE + queue);  // Ignore the ""special"" subscription if (coreQueueControl != null && !coreQueueControl.getName().equals(getAddress())) { if (durability == DurabilityType.ALL || durability == DurabilityType.DURABLE && coreQueueControl.isDurable() || durability == DurabilityType.NON_DURABLE && !coreQueueControl.isDurable()) { matchingQueues.add(coreQueueControl); } } } return matchingQueues; } catch (Exception e) { return Collections.emptyList(); } } "	1	0	1	0	0	0
private Vec3d getRelativePositionOfBone(String name) { int frame = getCurrentFrame(); IAnimation animation = getActionManager().getCurrentAnimation(); if (animation == null) { return new Vec3d(0, 0, 0); } BoneTransformation boneTransform = new BoneTransformation(); animation.storeCurrentTransformation(name, frame, boneTransform); Matrix4f transform = boneTransform.getMatrix(); Vec3d relativePosition = new Vec3d(transform.m03, transform.m13, transform.m23); return relativePosition; } 	0	0	1	1	0	0
"private PaginationViewModel createPaginationData(final int currentPage, final int displayedPages, final PagedResult<ProductProjection> searchResult) { final Http.Context context = new Http.Context(new Http.RequestBuilder() .uri(QueryStringUtils.buildUri(URL_PATH, buildQueryString(currentPage))) .build()); final Configuration configuration = new Configuration(singletonMap(""pop.pagination.displayedPages"", displayedPages)); return new TestablePaginationViewModelFactory(new ConfigurablePaginationSettings(configuration), context).create(searchResult); } "	1	1	1	0	1	0
"public void setText(String text) {  if (text != null) { this.text = text; editText.setText(this.text); if (!text.equals("""")) activate(false); } } "	0	1	1	0	0	0
"public static String prependWebContextRoot(String postfixUrl) { String webContext = CarbonUtils.getServerConfiguration().getFirstProperty(""WebContextRoot""); if (webContext != null && !webContext.equals(""/"")) { postfixUrl = webContext + postfixUrl; } return postfixUrl; } "	1	1	1	1	1	0
"@Test public void test1() throws Exception{ // String inputFolder = ""/test/xml2csv/input/""; String outputFolder = ""/test/xml2csv/output/""; String schemaFolder=""/test/xml2csv/schema/"";  String staticCfgName = ""xml2csv1.properties""; String[] inputFiles = new String[]{""dynschema_test1_data.xml""}; String localSchemaFile = ""dynschema_test1_schemas.txt""; String remoteSchemaFile = ""schemas.txt"";  //schema getFs().copyFromLocalFile(false, true, new Path(getLocalFolder() + localSchemaFile), new Path(schemaFolder + remoteSchemaFile));  //run cmd List<Tuple2<String, String[]>> rfifs = new ArrayList<Tuple2<String, String[]>>(); rfifs.add(new Tuple2<String, String[]>(inputFolder, inputFiles)); getConf().set(""xmlinput.start"", ""<measInfo>""); getConf().set(""xmlinput.end"", ""</measInfo>""); getConf().set(""xmlinput.row.start"", ""<measValue""); getConf().set(""xmlinput.row.end"", ""</measValue>""); getConf().set(""xmlinput.row.max.number"", ""2""); super.mrTest(rfifs, outputFolder, staticCfgName, cmdClassName, XmlInputFormat.class);  //check results //outputFolder should have the csv file List<String> files = HdfsUtil.listDfsFile(getFs(), outputFolder); logger.info(files); String csvFileName = String.format(""%s-r-00000"", ""MyCore_""); assertTrue(files.contains(csvFileName));  List<String> contents = HdfsUtil.stringsFromDfsFolder(getFs(), outputFolder); logger.info(String.format(""contents:\n%s"", String.join(""\n"", contents))); assertTrue(contents.size()==14);  String firstLine = contents.get(0); String[] fields = firstLine.split("","", -1); assertTrue(fields.length==9); } "	0	0	1	1	0	0
"private void loadExtensionDescriptor(AbstractExtension extension, Element extensionElement) throws InvalidExtensionException { Node nameNode = getNode(extensionElement, ELEMENT_NAME); if (nameNode != null) { extension.setName(nameNode.getTextContent()); } Node categoryNode = getNode(extensionElement, ELEMENT_CATEGORY); if (nameNode != null) { extension.setCategory(categoryNode.getTextContent()); } Node summaryNode = getNode(extensionElement, ELEMENT_SUMMARY); if (summaryNode != null) { extension.setSummary(summaryNode.getTextContent()); } Node descriptionNode = getNode(extensionElement, ELEMENT_DESCRIPTION); if (descriptionNode != null) { extension.setDescription(descriptionNode.getTextContent()); } Node websiteNode = getNode(extensionElement, ELEMENT_WEBSITE); if (websiteNode != null) { extension.setWebsite(websiteNode.getTextContent()); }  // Licenses Node licensesNode = getNode(extensionElement, ELEMENT_LICENSES); if (licensesNode != null) { NodeList licenseNodeList = licensesNode.getChildNodes(); for (int i = 0; i < licenseNodeList.getLength(); ++i) { Node licenseNode = licenseNodeList.item(i);  if (licenseNode.getNodeName().equals(ELEMENT_LLICENSE)) { Node licenseNameNode = getNode(licenseNode, ELEMENT_LLNAME); Node licenceContentNode = getNode(licenseNode, ELEMENT_LLCONTENT);  String licenseName = licenseNameNode.getTextContent(); ExtensionLicense license = this.licenseManager.getLicense(licenseName); if (license == null) { try { license = new ExtensionLicense(licenseName, licenceContentNode != null ? IOUtils.readLines(new StringReader(licenceContentNode.getTextContent())) : null); } catch (IOException e) { // That should never happen throw new InvalidExtensionException(""Failed to write license content"", e); } }  extension.addLicense(license); } } }  // Authors Node authorsNode = getNode(extensionElement, ELEMENT_AUTHORS); if (authorsNode != null) { NodeList authors = authorsNode.getChildNodes(); for (int i = 0; i < authors.getLength(); ++i) { Node authorNode = authors.item(i);  if (authorNode.getNodeName().equals(ELEMENT_AAUTHOR)) { Node authorNameNode = getNode(authorNode, ELEMENT_AANAME); Node authorURLNode = getNode(authorNode, ELEMENT_AAURL);  String authorName = authorNameNode != null ? authorNameNode.getTextContent() : null; URL authorURL; if (authorURLNode != null) { try { authorURL = new URL(authorURLNode.getTextContent()); } catch (MalformedURLException e) { // That should never happen throw new InvalidExtensionException(""Malformed URL ["" + authorURLNode.getTextContent() + ""]"", e); } } else { authorURL = null; }  extension.addAuthor(new DefaultExtensionAuthor(authorName, authorURL)); } } }  // Features List<String> features = parseList(extensionElement, ELEMENT_FEATURES, ELEMENT_FFEATURE); if (features != null) { extension.setFeatures(features); }  // Scm extension.setScm(loadlScm(extensionElement));  // Issue Management extension.setIssueManagement(loadIssueManagement(extensionElement));  // Dependencies Node dependenciesNode = getNode(extensionElement, ELEMENT_DEPENDENCIES); if (dependenciesNode != null) { NodeList dependenciesNodeList = dependenciesNode.getChildNodes(); for (int i = 0; i < dependenciesNodeList.getLength(); ++i) { Node dependency = dependenciesNodeList.item(i);  if (dependency.getNodeName().equals(ELEMENT_DDEPENDENCY)) { Node dependencyIdNode = getNode(dependency, ELEMENT_ID); Node dependencyVersionNode = getNode(dependency, ELEMENT_VERSION);  extension.addDependency(new DefaultExtensionDependency(dependencyIdNode.getTextContent(), new DefaultVersionConstraint(dependencyVersionNode.getTextContent()), parseProperties((Element) dependency))); } } }  // Properties Map<String, Object> properties = parseProperties(extensionElement); if (properties != null) { extension.setProperties(properties); }  // Deprecated Install fields  Node enabledNode = getNode(extensionElement, ELEMENT_INSTALLED); if (enabledNode != null) { extension.putProperty(InstalledExtension.PKEY_INSTALLED, Boolean.valueOf(enabledNode.getTextContent())); }  // Deprecated Namespaces List<String> namespaces = parseList(extensionElement, ELEMENT_NAMESPACES, ELEMENT_NNAMESPACE); if (namespaces != null) { extension.putProperty(InstalledExtension.PKEY_NAMESPACES, namespaces); } } "	0	1	1	1	0	0
"public List<NotifyEventResponse> getNotifyEvents(TransactionReceipt transactionReceipt) { final Event event = new Event(""notify"", Arrays.<TypeReference<?>>asList(), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {})); List<EventValues> valueList = extractEventParameters(event,transactionReceipt); ArrayList<NotifyEventResponse> responses = new ArrayList<NotifyEventResponse>(valueList.size()); for(EventValues eventValues : valueList) { NotifyEventResponse typedResponse = new NotifyEventResponse(); typedResponse.input = (Uint256)eventValues.getNonIndexedValues().get(0); typedResponse.result = (Uint256)eventValues.getNonIndexedValues().get(1); responses.add(typedResponse); } return responses; } "	0	0	1	1	0	0
public GeoNearBuilder setNear(final double latitude, final double longitude) { this.near = new double[]{latitude, longitude}; return this; } 	1	0	1	1	0	0
"public static void setupTestReports() throws IOException { for (int i = 1; i < 11; i++) { folder.newFolder(String.valueOf(i)); folder.newFile(String.valueOf(i) + ""/20160101""); folder.newFile(String.valueOf(i) + ""/20160102""); } } "	0	0	1	1	0	0
"public void doPost (HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException  { log.info(""DeleteLoadJobFilesServlet: deleting files"");  DeleteLoadJobFilesServletHandler deleter = new DeleteLoadJobFilesServletHandler (request.getParameterMap(), new GoogleCredentialProvider());  log.info(""Retry count: "" + request.getHeader(""X-AppEngine-TaskRetryCount"")); int retries = Integer.parseInt(request.getHeader(""X-AppEngine-TaskRetryCount""));  deleter.deleteFiles(); response.setStatus(deleter.getStatus());  if (retries > 0 && retries % 8 == 0 && deleter.getStatus() != DeleteLoadJobFilesServletHandler.STATUS_OK) { com.risevision.gcslogs.alert.AlertService.alert (""Problems deleting a load job's files"", errorMessage); } } "	0	0	1	1	0	0
"public double getPValue(final String method) { double p = Double.NaN;  double[] baselineValues = new double[baselineMetricPerDimension.values().size()]; int i = 0; for (Double d : baselineMetricPerDimension.values()) { baselineValues[i] = d; i++; }  double[] testValues = new double[testMetricPerDimension.values().size()]; i = 0; for (Double d : testMetricPerDimension.values()) { testValues[i] = d; i++; }  if (""t"".equals(method)) { p = TestUtils.tTest(baselineValues, testValues); } else if (""pairedT"".equals(method)) { p = TestUtils.pairedTTest(baselineValues, testValues); } else if (""wilcoxon"".equals(method)) { p = new WilcoxonSignedRankTest().wilcoxonSignedRankTest(baselineValues, testValues, true); }  return p; } "	1	1	1	1	1	0
"private void load(File projFile) { if (projFile == null) { return; } Document document = null; try { document = JDOMUtil.loadDocument(projFile); } catch (JDOMException ex) { } catch (IOException ex) { } Element projectElement = null; if (document != null) { Element root = document.getRootElement(); if (""project"".equals(root.getName())) { for (Object ch : root.getChildren(""component"")) { if (ch instanceof Element && ""MPSProject"".equals(((Element) ch).getAttributeValue(""name""))) { projectElement = (Element) ch; break; } } } } if (projectElement != null) { load(projFile, projectElement); } } "	0	1	1	0	0	0
@Override public boolean isUsernameIndex(String[] args, int index) { if(index == 0 || args.length == 0) return false;  String[] subArgs = Arrays.copyOfRange(args,1,args.length); return getSubCommand(args[1]).isUsernameIndex(subArgs, index-1); } 	1	0	1	1	0	0
"@RequestMapping(value = ""/bootstrap"") public ModelAndView bootstrap(HttpServletRequest request, HttpServletResponse response) throws IOException { if (WebloggerContext.isBootstrapped()) { response.sendRedirect(request.getContextPath()+""/""); return null; }  Map<String, Object> map = initializeMap();  try { // trigger bootstrapping process ServletContext sc = WebloggerContext.getServletContext(); ApplicationContext ac = WebApplicationContextUtils.getRequiredWebApplicationContext(sc);  WebloggerContext.bootstrap(ac); log.info(""EXITING - Bootstrap successful, forwarding to weblogger""); response.sendRedirect(request.getContextPath()+""/tb-ui/app/register""); return null; } catch (Exception e) { log.error(""Exception"", e); map.put(""rootCauseException"", e); map.put(""rootCauseStackTrace"", getRootCauseStackTrace(e)); }  map.put(""status"", StartupStatus.bootstrapError); return new ModelAndView("".install"", map); } "	1	0	1	0	0	0
public static AMQMessage getAMQMessageFromAndesMetaData(AndesMessageMetadata metadata) { long messageId = metadata.getMessageID(); StorableMessageMetaData metaData = convertAndesMetadataToAMQMetadata(metadata); //create message with meta data. This has access to message content StoredAMQPMessage message = new StoredAMQPMessage(messageId, metaData); AMQMessage amqMessage = new AMQMessage(message); return amqMessage; } 	1	0	1	1	0	0
"private void deleteBatchesForIds(List<Long> ids, Collection<DownloadInfo> downloads) { for (DownloadInfo download : downloads) { if (ids.contains(download.batchId)) { deleteFileAndDatabaseRow(download); } }  String selection = TextUtils.join("", "", ids); String[] selectionArgs = {selection}; resolver.delete(Downloads.Impl.BATCH_CONTENT_URI, Downloads.Impl.Batches._ID + "" IN (?)"", selectionArgs); } "	0	1	1	0	0	0
"private static String getVersionName(Context inContext) { try { String versionName = inContext.getPackageManager() .getPackageInfo(inContext.getPackageName(), 0).versionName;  // Strip version name suffix if (versionName.contains(""-"")) { versionName = versionName.substring(0, versionName.indexOf(""-"")); }  return versionName; } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); }  return """"; } "	1	1	1	1	1	0
"@Test public void testDeviceRegistration() throws IOException { MockServer server = new MockServer() .enqueueAcceptKey() .start(); MockDeviceStore store = new MockDeviceStore();  TokenRepository tokenRepository = new TokenRepository(new MockConfig(server.getUrl(""/demo-auth/v1"")), store);  String token = tokenRepository.getDeviceToken(); assertEquals(token.length(), 32);  server.shutdown(); } "	1	0	1	0	0	0
"@Test public void testDrawLineLabelsVerticalRightPartiallyRotated() throws Exception { final BufferedImage bufferedImage = new BufferedImage(80, 180, BufferedImage.TYPE_4BYTE_ABGR); final Graphics2D graphics2d = bufferedImage.createGraphics();  ScaleBarRenderSettings settings = getSettings(graphics2d, 1); settings.getParams().orientation = Orientation.VERTICAL_LABELS_RIGHT.getLabel(); settings.getParams().labelRotation = 45; settings.getParams().getSize().width = 80; settings.getParams().getSize().height = 180; settings.setMaxSize(new Dimension(80, 180)); settings.setSize(ScalebarGraphic.getSize(settings.getParams(), settings, settings.getMaxLabelSize())); ScalebarDrawer drawer = Type.LINE.createDrawer(graphics2d, settings); drawer.draw();  new ImageSimilarity(getFile(""expected-scalebar-line-labels-right-partially-rotated.png"")) .assertSimilarity(bufferedImage, 85); } "	0	0	1	1	0	0
"private static String parseCommand(ProtoTask pt, COMMAND_TYPE commandType) throws Error { switch (commandType) { case ADD : return add(pt); case COMPLETE : return complete(pt.getId()); case DISPLAY : return display(); case DISPLAYDONE : return displayDone(); case DELETE : return delete(pt.getId()); case EDIT : return edit(pt.getId(), pt); default: //throw an error if the command is not recognized throw new Error(""Unrecognized command type""); } } "	1	0	1	0	0	0
"private boolean hasKeepAliveForConnection() { String keepAlive = assertion.getKeepAlive(); if (NullChecker.isNullish(keepAlive)) { keepAlive = getKeepAliveProperty(); }  return NullChecker.isNotNullish(keepAlive) && (keepAlive.equalsIgnoreCase(""TRUE"") || keepAlive.equalsIgnoreCase(""T"")); } "	0	1	1	1	0	0
"public static Tag[] getTagList(String tags) {  if (tags.equals("""")) { return new Tag[]{}; }  final String[] split = tags.split("", "");  final List<Tag> collect = Arrays.asList(split).stream().map(e -> { try { return new Tag(e.replaceFirst(""Tag: "", """")); } catch (IllegalValueException e1) { //not possible assert false; return null; } }).collect(Collectors.toList());  return collect.toArray(new Tag[split.length]); } "	1	0	1	1	0	0
@Nullable public User getAssignee() { if (_engineTask.getAssignee() == null) return null; else return UserManager.getUser(Integer.valueOf(_engineTask.getAssignee())); } 	1	0	1	1	0	0
"@Override public void onDataChange(DataSnapshot dataSnapshot) { // Gets the data from Firebase and stores it in a FBUser class user = dataSnapshot.getValue(FBUser.class);  // Checking if user has Squads if(user.getSquads() != null) { hasSquad = true; } else { hasSquad = false; }  // Checking if user has Meetups if(user.getMeetups() != null) { hasMeetup = true; } else { hasMeetup = false; }  // Checking if user has Squads if(user.getHosting() != null) { hasHost = true; } else { hasHost = false; }   // Displays the user's name in the editText profileName.setText(user.getName());  // If user has created a bio if(user.getBio().trim() != null) { // Displays the user's bio in the editText bio.setText(user.getBio().trim()); } else { // Default bio bio.setText(""This user has no bio!""); }  // Displays the photo in the ImageView Glide.with(ProfileActivity.this) .load(user.getPicture().trim()) .diskCacheStrategy(DiskCacheStrategy.NONE) .skipMemoryCache(true) .listener(new RequestListener<String, GlideDrawable>() { @Override public boolean onException(Exception e, String model, Target<GlideDrawable> target, boolean isFirstResource) { return false; }  @Override public boolean onResourceReady(GlideDrawable resource, String model, Target<GlideDrawable> target, boolean isFromMemoryCache, boolean isFirstResource) { // If profileName != default and profileImage isnt null if ((!profileName.getText().equals(""'Users Profile"")) && (profileImage != null)) { // Hiding loading overlay loadingOverlay.setVisibility(View.GONE); } return false; } }) .dontAnimate() .fitCenter() .error(R.drawable.com_facebook_profile_picture_blank_portrait) .into(profileImage); } "	1	0	1	0	0	0
@Override public AudioSource get() throws Exception { AudioBuffer buffer = new AudioBuffer(data, frequency, format);  cache(buffer); this.data.clear();  return new AudioSource(buffer, null, null, null); } 	1	0	1	0	0	0
"public static Integer[][] constructSamples(Color[] colors, int width, int additional){  if (colors.length > width){ throw new IndexOutOfBoundsException(""The width of the gradient is invalid""); }  float[] dist = new float[colors.length + additional]; float distAmount = 1f / colors.length, totalDist = 0;  for (int i = 0; i < colors.length; i++){  dist[i] = totalDist; totalDist += distAmount;  }  dist[colors.length - 1] = 1.0f;  return constructGradient(colors, dist, width);  } "	1	0	1	1	0	0
public void stopDeliveryForQueue(String storageQueue) { MessageFlusher.getInstance().clearUpAllBufferedMessagesForDelivery (storageQueueNameToDestinationMap.get(storageQueue)); Set<Slot> orphanedSlots = subscriptionSlotTracker.remove(storageQueue); if(!orphanedSlots.isEmpty()) { for (Slot slot:orphanedSlots) { clearAllTrackingWhenSlotOrphaned(slot); } } } 	1	1	1	0	1	0
"public void multithreadTest(Morphium m) throws Exception { long startTotal = System.currentTimeMillis(); long start = System.currentTimeMillis(); m.dropCollection(UncachedObject.class); List<Thread> threads = new Vector<>(); for (int i = 0; i < 50; i++) { final int t = i; Thread thr = new Thread() { @Override public void run() { for (int j = 0; j < 1000; j++) { UncachedObject uc = new UncachedObject(); uc.setCounter(t * 100 + j); uc.setValue(""By thread "" + t); m.store(uc); } //                    log.info(""Thread "" + t + "" finished!""); } }; threads.add(thr); thr.start(); } //        for (Thread t : threads) t.join(); //        long dur = System.currentTimeMillis() - start; //        log.info(""Storing took "" + dur);  start = System.currentTimeMillis();  for (int i = 0; i < 50; i++) { final int t = i; Thread thr = new Thread() { @Override public void run() { for (int j = 0; j < 1000; j++) { Query<UncachedObject> q = m.createQueryFor(UncachedObject.class); q.f(""counter"").eq(t * 100 + j); UncachedObject uc = q.get(); } //                    log.info(""Thread "" + t + "" finished!""); } }; threads.add(thr); thr.start(); } for (Thread t : threads) t.join(); //        dur = System.currentTimeMillis() - start; //        log.info(""Reading took "" + dur);  long dur = System.currentTimeMillis() - startTotal; log.info(""Overall dur "" + dur);   } "	1	0	1	1	0	0
public void applyEffect() { while (!this.playerQueue.isEmpty()) { final Player p = this.playerQueue.poll(); if (p != null && !p.isDead()) { Projectile.this.applyDamage(p); } }  while (!this.mobQueue.isEmpty()) { final Mob b = this.mobQueue.poll(); if (b != null && !b.isDead()) { applyDamage(b); } } this.queuedEffect = false; } 	1	1	1	1	1	0
private <P> void updateComponentValue(final P newValue, final TakesValue component, final Converter converter) { Object widgetValue = converter.toWidgetValue(newValue); component.setValue(widgetValue); } 	1	0	1	1	0	0
"private void addSettingsDefaults() { addSetting(""check-updates"", true); addSetting(""allowed-shops"", new String[]{""CHEST"", ""TRAPPED_CHEST"", ""SHULKER""}); addSetting(""allowed-directions"", new String[]{""DOWN"", ""WEST"", ""SOUTH"", ""EAST"", ""NORTH"", ""UP""}); addSetting(""itrade-shop-name"", ""Server Shop""); addSetting(""allow-double-trade"", true); addSetting(""allow-quad-trade"", true); addSetting(""max-edit-distance"", 4); addSetting(""max-shop-users"", 5); addSetting(""illegal-items"", new String[]{""Bedrock"", ""Command_Block""}); addSetting(""allow-custom-illegal-items"", true); addSetting(""tradeshop-name"", ""Trade""); addSetting(""itradeshop-name"", ""iTrade""); addSetting(""bitradeshop-name"", ""biTrade"");  save(); } "	0	0	1	1	0	0
"public void putContigID(String name, int id) { if (getContigID(""M"") != null) return; tmpContigID.put(name, id); contigID.put(name, id); } "	1	0	1	0	0	0
protected float[] readComplexBenchmark(int booksBatchSize, int librariesBatchSize, int personsBatchSize) throws ObjectsAreNotFullyLoadedException { booksBatchSize *= librariesBatchSize; personsBatchSize *= librariesBatchSize;  float[] allTime = new float[NUMBER_OF_PASSES]; SimpleProfiler simpleProfiler = new SimpleProfiler(); for (int i = 0; i < NUMBER_OF_PASSES; i++) { simpleProfiler.start(); Pair<List<Library>, Pair<List<Book>, List<Person>>> data = readComplex(librariesBatchSize, booksBatchSize, personsBatchSize); if (checkIfLoaded(data.first, data.second.first, data.second.second)) { throw new ObjectsAreNotFullyLoadedException(); } allTime[i] = simpleProfiler.stop(); deleteComplex(new ArrayList<Library>(), data.second.first, data.second.second);  System.gc(); } return allTime; } 	1	1	1	1	1	0
protected Criteria getYearFilterCriteria(final YearFilterPagingRequest filter, final String dateProperty) { Criteria[] yearCriteria = null; Criteria criteria = new Criteria();  if (filter.getYear() == null) { yearCriteria = new Criteria[1]; yearCriteria[0] = new Criteria(); } else { yearCriteria = new Criteria[filter.getYear().size()]; for (int i = 0; i < filter.getYear().size(); i++) { yearCriteria[i] = where(dateProperty).gte(getStartDate(filter.getYear().get(i))) .lte(getEndDate(filter.getYear().get(i))); } }  return filter.getInvert() ? criteria.norOperator(yearCriteria) : criteria.orOperator(yearCriteria); } 	1	0	1	0	0	0
"public static Object convertStringToObject(String objectString) throws IOException { if (objectString == null) { return null; }  byte[] bytes = Base64.decodeBase64(objectString.getBytes(""UTF-8""));  ByteArrayInputStream bais = null; GZIPInputStream gis = null; ObjectInputStream ois = null;  try { bais = new ByteArrayInputStream(bytes); gis = new GZIPInputStream(bais); ois = new ObjectInputStream(gis); return ois.readObject(); } catch (ClassNotFoundException e) { throw new IOException(""Could not read object""); } finally { try { if (ois != null) { ois.close(); } if (gis != null) { gis.close(); } if (bais != null) { bais.close(); } } catch (IOException e) { LOG.error(e); } } } "	0	0	1	1	0	0
"@SuppressWarnings(""AssignmentToForLoopParameter"") private void synchronize(boolean forceUpdate) { // First, clear any users that went away.  // Put all users in a set for fast access. Set<String> emailUsers = new HashSet<String>(); if (!needsToSignIn()) { for (CredentialedUser user : Services.getLoginService().getAllUsers().values()) { emailUsers.add(user.getEmail()); } } for (int index = 0; index < modelRoot.getChildCount(); ) { TreeNode node = modelRoot.getChildAt(index); if (node instanceof GoogleUserModelItem) { CredentialedUser user = ((GoogleUserModelItem) node).getCredentialedUser(); // If the user isn't valid anymore, remove the corresponding node.. if (user == null || !emailUsers.contains(user.getEmail())) { treeModel.removeNodeFromParent((GoogleUserModelItem) node); continue; } } else { treeModel.removeNodeFromParent((MutableTreeNode) node); continue; } index++; }  // Now add users that haven't been added if (!needsToSignIn()) { GoogleUserModelItem node = getNodeForUser(Services.getLoginService().getActiveUser()); if (node != null) { if (forceUpdate) { node.setNeedsSynchronizing(); } node.synchronize(); }  for (CredentialedUser user : Services.getLoginService().getAllUsers().values()) { if (user != Services.getLoginService().getActiveUser()) { node = getNodeForUser(user); if (node != null) { if (forceUpdate) { node.setNeedsSynchronizing(); } if (!queryOnExpand || (popupPanel != null && popupPanel.tree.isExpanded(new TreePath(node.getPath())))) { node.synchronize(); } } } } } else { treeModel.insertNodeInto(new GoogleSignOnModelItem(), modelRoot, 0); } } "	1	0	1	0	0	0
"public void run() {  // Loop forever while (true) { try {  // Get the next message QueueingConsumer.Delivery delivery = consumer.nextDelivery();  // Get the properties for the request message, set up the properties // for the reply message. BasicProperties props = delivery.getProperties(); BasicProperties replyProps = new BasicProperties.Builder(). correlationId(props.getCorrelationId()).build();  // Placeholder for a reply, if we have one to send String message2 = """";  try { // Parse the body.  Get the string containing the JSON data. String message = new String(delivery.getBody(), ""UTF-8"");  // Figure out the message type as a string so we know how to parse it. SdnRequest req = mapper.readValue(message, SdnRequest.class); SdnReply rep = null;  // Dispatch to command handlers depending on the type of message // // Handle ping requests here since they're pretty trivial if (req.getRequestType().equals(SdnPingRequest.TYPE)) { SdnPingRequest pingReq = mapper.readValue(message, SdnPingRequest.class); SdnPingReply pingRep = new SdnPingReply(); pingRep.setError(false); pingRep.setPayload(pingReq.getPayload()); rep = pingRep; }  // Other request types dispatch to handler functions in this module. // Place in alphabetical order. else if (req.getRequestType().equals(SdnDeleteMeterRequest.TYPE)) { SdnDeleteMeterRequest meterReq = mapper.readValue(message, SdnDeleteMeterRequest.class); rep = doSdnDeleteMeter(meterReq); } else if (req.getRequestType().equals(SdnDeleteForwardRequest.TYPE)) { SdnDeleteForwardRequest forwardReq = mapper.readValue(message, SdnDeleteForwardRequest.class); rep = doSdnDeleteForward(forwardReq); } else if (req.getRequestType().equals(SdnForwardRequest.TYPE)) { SdnForwardRequest forwardReq = mapper.readValue(message, SdnForwardRequest.class); rep = doSdnForward(forwardReq); } else if (req.getRequestType().equals(SdnForwardToControllerRequest.TYPE)) { SdnForwardToControllerRequest flowReq = mapper.readValue(message, SdnForwardToControllerRequest.class); rep = doSdnForwardToController(flowReq); } else if (req.getRequestType().equals(SdnInstallMeterRequest.TYPE)) { SdnInstallMeterRequest meterReq = mapper.readValue(message,SdnInstallMeterRequest.class); rep = doSdnInstallMeter(meterReq); } else if (req.getRequestType().equals(SdnTransmitPacketRequest.TYPE)) { SdnTransmitPacketRequest packetReq = mapper.readValue(message,SdnTransmitPacketRequest.class); rep = doSdnTransmitPacket(packetReq); } else { // Unknown message. rep = new SdnReply(); rep.setError(true); rep.setErrorMessage(""Unknown message type""); }  // If there's a response, then get it in JSON representation if (rep != null) { message2 = mapper.writeValueAsString(rep); } } catch (Exception e) { e.printStackTrace(); } finally { // If we have a reply to send, then great, send it and ACK the old message if (message2 != null) { channel.basicPublish("""", props.getReplyTo(), replyProps, message2.getBytes(""UTF-8"")); } channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false); } } catch (Exception e) { e.printStackTrace(); // We can get here if there was a problem reading a message from the AMPQ service. // Sleep for a second to avoid us busy-waiting in this loop. try { Thread.sleep(1000); } catch (Exception e2) { } } } } "	1	0	1	0	0	0
"private synchronized void dbWrite(GenericValue value, boolean delete) throws SemaphoreFailException { Transaction parent = null; boolean beganTx = false; boolean isError = false;  try { // prepare the suspended transaction if (TransactionUtil.isTransactionInPlace()) { parent = TransactionUtil.suspend(); } beganTx = TransactionUtil.begin(); if (!beganTx) { throw new SemaphoreFailException(""Cannot obtain unique transaction for semaphore logging""); }  // store the value try { if (delete) { value.refresh(); value.remove(); lock = null; } else { lock = value.create(); } } catch (GenericEntityException e) { Debug.logError(e, module); isError = true; throw new SemaphoreFailException(""Cannot obtain unique transaction for semaphore logging""); } finally { if (isError) { try { TransactionUtil.rollback(beganTx, ""ServiceSemaphore: dbWrite()"", new Exception()); } catch (GenericTransactionException e) { Debug.logError(e, module); } } if (!isError && beganTx) { try { TransactionUtil.commit(beganTx); } catch (GenericTransactionException e) { Debug.logError(e, module); } } } } catch (GenericTransactionException e) { Debug.logError(e, module); } finally { if (parent != null) { try { TransactionUtil.resume(parent); } catch (GenericTransactionException e) { Debug.logError(e, module); } } } } "	1	0	1	0	0	0
public boolean containsKey(String key) { return params.containsKey(key); } 	0	0	1	1	0	0
public InetSocketAddress getSocketAddress(String key) { return SocketAddressUtil.parse(get(key)); } 	0	0	1	1	0	0
"public void incTrain() { setConf(); String inputPath = ""../data/exampledata/LRLocalExampleData/a9a.train""; String LOCAL_FS = LocalFileSystem.DEFAULT_FS; String TMP_PATH = System.getProperty(""java.io.tmpdir"", ""/tmp""); String loadPath = LOCAL_FS + TMP_PATH + ""model""; String savePath = LOCAL_FS + TMP_PATH + ""/newmodel""; String logPath = LOCAL_FS + TMP_PATH + ""/log"";  // Set trainning data path conf.set(AngelConfiguration.ANGEL_TRAIN_DATA_PATH, inputPath); // Set load model path conf.set(AngelConfiguration.ANGEL_LOAD_MODEL_PATH, loadPath); // Set save model path conf.set(AngelConfiguration.ANGEL_SAVE_MODEL_PATH, savePath); // Set log path conf.set(AngelConfiguration.ANGEL_LOG_PATH, logPath); // Set actionType incremental train conf.set(AngelConfiguration.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_INC_TRAIN());  LRRunner runner = new LRRunner(); runner.incTrain(conf); } "	0	0	1	1	0	0
private Collection<String> getReferenceRoutlets() { ProcessItem routeProcess = (ProcessItem) routeNode.getObject().getProperty().getItem(); String routeName = routeNode.getObject().getProperty().getDisplayName(); Collection<String> routelets = new HashSet<>(); try { exportAllReferenceRoutelets(routeName, routeProcess, routelets); } catch (InvocationTargetException e) { return new HashSet<>(); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } return routelets; } 	0	1	1	0	0	0
"@Override public boolean onOptionsItemSelected(MenuItem item) { // Handle action bar item clicks here. The action bar will // automatically handle clicks on the Home/Up button, so long // as you specify a parent activity in AndroidManifest.xml. int id = item.getItemId();  //noinspection SimplifiableIfStatement if (id == R.id.action_done) { if (barcodeText.getText().toString().equals("""")){ barcodeText.setError(getString(R.string.wrong_barcode_input)); } else { if (Utils.isValidBarcode(barcodeText.getText().toString(), BarcodeFormat.valueOf(formatSpinner.getSelectedItem().toString()))){ Intent intent = new Intent(ManualInputActivity.this, FinishActivity.class); Intent created = getIntent(); Card card = new Card(created.getStringExtra(""STORENAME""), barcodeText.getText().toString(), BarcodeFormat.valueOf(formatSpinner.getSelectedItem().toString())); created.putExtra(Constants.INTENT_CARD_ARG, card); startActivityForResult(intent, Utils.ADD_STORE); } else { barcodeText.setError(getString(R.string.wrong_barcode_input)); } } return true; }  return super.onOptionsItemSelected(item); } "	1	0	1	0	0	0
"public static int calculateTagLenght(String text) { if(FrmMain.debug) LOG.debug(""Calculating lenght for Tags. Text lenght: {}"",text.length());  String[] tags = trimTags(text); int lenght = 0; for(int i=0;i<tags.length;i++){ if(i<tags.length){ lenght += 1; } if(tags[i].contains("" "")){ lenght += tags[i].length()+2; } else { lenght += tags[i].length(); } } if(FrmMain.debug) LOG.debug(""Tags lenght: {}"",lenght);  return lenght; } "	1	1	1	1	1	0
"@Override public final void handle(final long time) {  if (!GameInfo.getInstance().getPlayerMode().equals(PlayerMode.SURVIVAL) && gameObjects.allBubblesDestroyed()) { gameController.levelCompleted(); return; }  try { // update time long frametime; if (this.time != 0) { frametime = time - this.time; } else { frametime = FIRST_FRAME_TIME; } this.time = time;  gameController.updateTime(frametime); gameObjects.update(frametime);  } catch (Exception ex) { stop(); GameLog.addErrorLog(""Exception in game loop""); GameLog.addErrorLog(ex.getMessage()); Logger.getLogger(GameLoop.class.getName()).log(Level.SEVERE, ""Exception in game loop"", ex); } } "	1	0	1	1	0	0
"public int readSym(ByteArray data, int[] bitIndex) throws FormatException { for (int codeLen = mMinCodeLen; codeLen < mMaxCodeLen; ++codeLen) { // Get the maximum one from among the code values // whose code length is 'codeLen'. int maxCodeVal = mMaxCodeValsFromCodeLen[codeLen];  if (maxCodeVal < 0) { // There is no code value whose code length is 'codeLen'. continue; }  // Read a code value from the input assuming its code length is 'codeLen'. int codeVal = getHuffmanBits(data, bitIndex[0], codeLen);  if (maxCodeVal < codeVal) { // The read code value is bigger than the maximum code value // among the code values whose code length is 'codeLen'. // // Considering the latter rule of the two added for DEFLATE format // (3.2.2. Use of Huffman coding in the ""deflate"" format), // //     * All codes of a given bit length have lexicographically //       consecutive values, in the same order as the symbols //       they represent; // //     * Shorter codes lexicographically precede longer codes. // // We can expect that the code length of the code value we are // parsing is longer than the current 'codeLen'. continue; }  // Convert the code value into a symbol value. int sym = mSymsFromCodeVal[codeVal];  // Consume the bits of the code value. bitIndex[0] += codeLen;  return sym; }  // Bad code at the bit index. String message = String.format( ""[%s] Bad code at the bit index '%d'."", getClass().getSimpleName(), bitIndex[0]);  throw new FormatException(message); } "	1	0	1	1	0	0
protected void assertTask(Consumer<SpotlessExtension> test, Consumer<TestCaseAPI> testCases) throws Exception { List<String> befores = new ArrayList<>(); List<String> afters = new ArrayList<>(); testCases.accept((before, after) -> { befores.add(before); afters.add(after); });  // create the task ApplyFormatTask task = createApplyTask(test); // create the test file(s) List<File> files = new ArrayList<>(befores.size()); for (String before : befores) { File testFile = folder.newFile(); Files.write(testFile.toPath(), before.getBytes(StandardCharsets.UTF_8)); files.add(testFile); } // set the task to use this test file task.setTarget(files); // run the task task.apply(); // check what the task did for (int i = 0; i < befores.size(); ++i) { String afterExpected = afters.get(i); String afterActual = new String(Files.readAllBytes(files.get(i).toPath()), StandardCharsets.UTF_8); Assert.assertEquals(afterExpected, afterActual); } } 	1	0	1	0	0	0
protected File createTestFile(String filename) throws IOException { int lastSlash = filename.lastIndexOf('/'); String name = lastSlash >= 0 ? filename.substring(lastSlash) : filename; File file = folder.newFile(name); file.getParentFile().mkdirs(); Files.write(file.toPath(), getTestResource(filename).getBytes(StandardCharsets.UTF_8)); return file; } 	1	1	1	1	1	0
"public boolean seekBackward(){ ArrayList<String> args = new ArrayList<String>(); args.add(""""+true); server.notifyClients(MessageType.SEEKNOTIFY, args); return player.seekBackward(); } "	1	0	1	1	0	0
public static boolean isNetworkUp(Context context) { return getInterfaceDetails(context, true).netEnabled; } 	1	0	1	0	0	0
"public static boolean checkForNewCfg(Context context) { InterfaceDetails newCfg = getInterfaceDetails(context, true);  //always check for new config if (currentCfg != null && currentCfg.equals(newCfg)) { return false; } currentCfg = newCfg;  if (!newCfg.netEnabled) { Log.i(TAG, ""Now assuming NO connection (all interfaces down)""); } else { if (newCfg.netType == ConnectivityManager.TYPE_WIFI) { Log.i(TAG, ""Now assuming wifi connection""); } else if (newCfg.netType == ConnectivityManager.TYPE_MOBILE) { Log.i(TAG, ""Now assuming 3G connection ("" + (newCfg.isRoaming ? ""roaming, "" : """") + (newCfg.isTethered ? ""tethered"" : ""non-tethered"") + "")""); }  if (!newCfg.lanMaskV4.equals("""")) { Log.i(TAG, ""IPv4 LAN netmask on "" + newCfg.wifiName + "": "" + newCfg.lanMaskV4); } if (!newCfg.lanMaskV6.equals("""")) { Log.i(TAG, ""IPv6 LAN netmask on "" + newCfg.wifiName + "": "" + newCfg.lanMaskV6); } } return true; } "	1	0	1	0	0	0
"@Override public T next() { if (!hasNext()) { throw new NoSuchElementException(""No more elements.""); } ++this.consumed; return this.iterator.next(); } "	1	0	1	0	0	0
"@Test public void shouldUpdateLastConsoleActivityOnConsoleLogPut() throws Exception { String content = ""Testing:""; request.setContent(content.getBytes()); JobIdentifier jobIdentifier = new JobIdentifier(""pipeline"", 10, ""label-10"", ""stage"", ""2"", ""build"", 103l); when(restfulService.findJob(""pipeline"", ""10"", ""stage"", ""2"", ""build"", 103l)).thenReturn(jobIdentifier); String path = ""cruise-output/console.log""; File artifactFile = new File(""junk""); when(consoleService.consoleLogFile(jobIdentifier)).thenReturn(artifactFile); when(consoleService.updateConsoleLog(eq(artifactFile), any(InputStream.class), any(ConsoleService.LineListener.class))).thenReturn(true); assertThat(((ResponseCodeView) artifactsController.putArtifact(""pipeline"", ""10"", ""stage"", ""2"", ""build"", 103l, path, ""agent-id"", request).getView()).getStatusCode(), is(HttpServletResponse.SC_OK)); verify(consoleActivityMonitor).consoleUpdatedFor(jobIdentifier); } "	0	1	1	0	0	0
"public String getOwnOption(String option) { return this.getOwnOption(option, """", """"); } "	1	0	1	1	0	0
"private int doSearch(final CharBuffer buffer, final int matchedLength, final int currentLength, final boolean ignoreCase) { /* * Try and see if there is a possible match here; there is if ""fullword"" * is true, in this case the next ""matchedLength"" argument to a possible * child call will be the current length. */ final int nextLength = fullWord ? currentLength : matchedLength;   /* * If there is nothing left in the buffer, we have a match. */ if (!buffer.hasRemaining()) return nextLength;  /* * OK, there is at least one character remaining, so pick it up and see * whether it is in the list of our children... */ char c = buffer.get(); int index = Arrays.binarySearch(nextChars, c); if (index == -1 && ignoreCase) { final boolean isUpper = Character.isUpperCase(c); final boolean isLower = Character.isLowerCase(c); if (isUpper != isLower) { c = isUpper ? Character.toLowerCase(c) : Character.toUpperCase(c); index = Arrays.binarySearch(nextChars, c); } }  /* * If not, we return the last good match; if yes, we call this same * method on the matching child node with the (possibly new) matched * length as an argument and a depth increased by 1. */ if (index < 0) return nextLength; return nextNodes[index].doSearch(buffer, nextLength, currentLength + 1, ignoreCase); } "	1	0	1	0	0	0
public static Intent updateIntentExplicitness(Context context, Intent implicitIntent) { if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) { // API 21 creates the need for explicit Intents, // so make sure only one can answer PackageManager pm = context.getPackageManager(); List<ResolveInfo> resolveInfo = pm.queryIntentServices(implicitIntent, 0); if (resolveInfo == null || resolveInfo.size() != 1) { return null; }  ResolveInfo serviceInfo = resolveInfo.get(0); String packageName = serviceInfo.serviceInfo.packageName; String className = serviceInfo.serviceInfo.name; ComponentName component = new ComponentName(packageName, className);  Intent explicitIntent = new Intent(implicitIntent); explicitIntent.setComponent(component); return explicitIntent; } else { return implicitIntent; } } 	1	1	1	0	1	0
"@Override public void write(JsonWriter out, Location<World> location) throws IOException { if (location == null) { out.nullValue(); return; }  out.beginObject();  if (location.getExtent() instanceof World) { out.name(""world""); out.value(((World) location.getExtent()).getUniqueId().toString()); } out.name(""x""); out.value(location.getX());  out.name(""y""); out.value(location.getY());  out.name(""z""); out.value(location.getZ());  out.endObject();  } "	0	0	1	1	0	0
"void configureSwagger(Environment environment, String basePath) { environment.jersey().register(new ApiListingResourceJSON()); environment.jersey().register(new ApiDeclarationProvider()); environment.jersey().register(new ResourceListingProvider()); ScannerFactory.setScanner(new DefaultJaxrsScanner()); ClassReaders.setReader(new DefaultJaxrsApiReader()); SwaggerConfig config = ConfigFactory.config(); config.setApiVersion(""1.0.1""); // TODO: Fix this so the swagger client generator can work correctly config.setBasePath(""../../"" + basePath); } "	1	0	1	1	0	0
"public Builder setPort(int port) { if (Range.open(1, 65535).contains(port)) { throw new IllegalArgumentException(""Invalid port number "" + port); }  if (!isPortAvailable(port)) { throw new RuntimeException(""Token listener tried to use a defined but already taken port "" + port); }  this.port = port; return this; } "	1	0	1	1	0	0
"public final void execute(String[] args){ CommandLine cmd = parseArgs(args);  if (cmd.hasOption(""h"")) { die(); }  processConfigFileOption(cmd);  executeImpl(cmd); } "	1	0	1	1	0	0
"@Test public void webSocketAndApplicationInterceptors() throws IOException { final AtomicInteger interceptedCount = new AtomicInteger();  client = client.newBuilder() .addInterceptor(new Interceptor() { @Override public Response intercept(Chain chain) throws IOException { assertNull(chain.request().body()); Response response = chain.proceed(chain.request()); assertEquals(""Upgrade"", response.header(""Connection"")); assertTrue("""", response.body().source().exhausted()); interceptedCount.incrementAndGet(); return response; } }).build();  webServer.enqueue(new MockResponse().withWebSocketUpgrade(serverListener));  WebSocket webSocket = newWebSocket(); clientListener.assertOpen(); assertEquals(1, interceptedCount.get()); webSocket.close(1000, null);  WebSocket server = serverListener.assertOpen(); server.close(1000, null); } "	0	0	1	1	0	0
"@Test public void test() throws Exception { long now = System.currentTimeMillis();  Map<String, Assignment<Integer>> brokerAssignments = new HashMap<>();  Assignment<Integer> t1Assignment = new Assignment<Integer>(); t1Assignment.addAssignment(1, createBroker(""br1"", ""1.1.1.1"", 1111)); t1Assignment.addAssignment(2, createBroker(""br2"", ""1.1.1.2"", 2222)); t1Assignment.addAssignment(3, createBroker(""br1"", ""1.1.1.1"", 1111)); brokerAssignments.put(""t1"", t1Assignment);  Assignment<Integer> t2Assignment = new Assignment<Integer>(); t2Assignment.addAssignment(1, createBroker(""br1"", ""1.1.1.1"", 1111)); t2Assignment.addAssignment(2, createBroker(""br2"", ""1.1.1.2"", 2222)); t2Assignment.addAssignment(3, createBroker(""br3"", ""1.1.1.3"", 3333)); brokerAssignments.put(""t2"", t2Assignment);  Map<Pair<String, Integer>, Map<String, ClientLeaseInfo>> leases = new HashMap<>(); leases.put(new Pair<String, Integer>(""t1"", 2), createBrokerLease(""br1"", ""1.1.1.11"", 8888, 1, now + 10 * 1000L)); leases.put(new Pair<String, Integer>(""t1"", 4), createBrokerLease(""br1"", ""1.1.1.11"", 8888, 1, now + 10 * 1000L)); leases.put(new Pair<String, Integer>(""t2"", 1), createBrokerLease(""br1"", ""1.1.1.1"", 1111, 2, now + 20 * 1000L));  when(m_brokerLeaseHolder.getAllValidLeases()).thenReturn(leases); when(m_scheduledExecutor.schedule(any(Runnable.class), anyLong(), eq(TimeUnit.MILLISECONDS))).thenReturn(null);  Map<String, Map<Integer, Endpoint>> endpoints = m_maker.makeEndpoints(new EventEngineContext(null, null, null), brokerAssignments);  verify(m_scheduledExecutor, times(2)).schedule(any(Runnable.class), anyLong(), eq(TimeUnit.MILLISECONDS));  assertEquals(2, endpoints.size()); Map<Integer, Endpoint> endpoints1 = endpoints.get(""t1""); assertEquals(3, endpoints1.size());  assertEndpoint(""br1"", ""1.1.1.1"", 1111, endpoints1.get(1)); assertEndpoint(""br1"", ""1.1.1.11"", 8888, endpoints1.get(2)); assertEndpoint(""br1"", ""1.1.1.1"", 1111, endpoints1.get(3));  Map<Integer, Endpoint> endpoints2 = endpoints.get(""t2""); assertEquals(3, endpoints2.size());  assertEndpoint(""br1"", ""1.1.1.1"", 1111, endpoints2.get(1)); assertEndpoint(""br2"", ""1.1.1.2"", 2222, endpoints2.get(2)); assertEndpoint(""br3"", ""1.1.1.3"", 3333, endpoints2.get(3)); } "	0	0	1	1	0	0
public Assessment safeBuild(final DataElementErrorCollector elementErrorCollector) { elementErrorCollector.addAll(elementErrorCollector); return elementErrorCollector.isEmpty() ? asmtBuilder.build() : null; } 	1	0	1	1	0	0
public Settings filter(Predicate<String> predicate) { return new Settings(new FilteredMap(this.settings, predicate, null), secureSettings == null ? null : new PrefixedSecureSettings(secureSettings, UnaryOperator.identity(), predicate)); } 	0	1	1	0	0	0
"@Override public String errorMsgOnData(@NotNull String data) { String sup = super.errorMsgOnData(data); if (sup != null) { return sup; } if (!initialMacro.getKey().equals(data)) { if (Project.getCurrentProject().findMacroByKey(data) != null) { return bundle.getString(""Macros.key_already_exists""); } } return null; } "	1	0	1	1	0	0
@Test public void updatePlatesTest(){  List<Point> plate = buildPlateWithNullTest(1); testTask.addPlate(plate); for (int i = 0; i < 4; i++) testTask.updatePlates(); } 	1	0	1	1	0	0
public void init() { view.enableSend(false); } 	1	0	1	1	0	0
"@Override public void initGui() { super.initGui(); inputField.setText(defaultInputText); String s = Utils.getLocalizedMessage(""irc.gui.options""); int bw = fontRendererObj.getStringWidth(s) + 20; btnOptions = new GuiButton(0, this.width - bw, 0, bw, 20, s); this.buttonList.add(btnOptions); } "	1	0	1	0	0	0
private void copyDataBase() throws IOException { InputStream myInput = myContext.getAssets().open(DB_NAME); String outFileName = DB_PATH + DB_NAME; OutputStream myOutput = new FileOutputStream(outFileName); byte[] buffer = new byte[1024]; int length; while ((length = myInput.read(buffer)) > 0) { myOutput.write(buffer, 0, length); }  myOutput.flush(); myOutput.close(); myInput.close();  } 	1	0	1	1	0	0
"public static void saveScreenshot () { try { FileHandle fh; do { fh = new FileHandle(directory + ""screenshot"" + counter++ + "".png""); } while (fh.exists()); Pixmap pixmap = getScreenshot(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), false); PixmapIO.writePNG(fh, pixmap); pixmap.dispose(); } catch (Exception e) { } } "	1	1	1	1	1	0
public void putTemplate(String name, byte[] templateSource, long lastModified) { templates.put(name, new ByteArrayTemplateSource(instanceId, name, templateSource, lastModified)); } 	1	0	1	1	0	0
public static ResourceResolver getResourceResolverForUserNested(ResourceResolverFactory factory, String userId) throws LoginException { ResourceResolver resolver; resolver = getResourceResolverForUser(resourceResolverFactory, null); return resolver; } 	1	1	1	1	1	0
public Result execute() { ClassLoader contextClassLoader = switchClassLoader(classLoader); Result result = createResult(Reflections.invoke(executor, execute)); switchClassLoader(contextClassLoader); return result; } 	1	1	1	0	1	0
"public ItemCollection createWorkItem(ItemCollection parent, String sProcessModelVersion, int aProcessID) throws Exception {  // lookup ProcessEntiy from the model ItemCollection processEntity = modelService.getModel(sProcessModelVersion).getTask( aProcessID); if (processEntity == null) throw new Exception( ""error createWorkItem: Process Entity can not be found ("" + sProcessModelVersion + ""|"" + aProcessID + "")"");  String sEditorID = processEntity.getItemValueString(""txteditorid""); if ("""".equals(sEditorID)) sEditorID = ""default""; int processID = processEntity.getItemValueInteger(""numProcessID""); String sModelVersion = processEntity .getItemValueString(""$modelversion""); String sWorkflowGroup = processEntity .getItemValueString(""txtworkflowgroup"");  // create empty workitem workItem = new ItemCollection(); workItem.replaceItemValue(""type"", ""workitem""); workItem.replaceItemValue(""$processID"", processID);  // set default writeAccess workItem.replaceItemValue(""$writeAccess"", workflowService.getUserName());  // assign project name and reference workItem.replaceItemValue(""$uniqueidRef"", parent.getItemValueString(""$uniqueid""));  // assign ModelVersion, group and editor workItem.replaceItemValue(""$modelversion"", sModelVersion); workItem.replaceItemValue(""txtworkflowgroup"", sWorkflowGroup); workItem.replaceItemValue(""txtworkfloweditorid"", sEditorID);  return workItem;  } "	1	0	1	0	0	0
"public ApexClassCodeCoverageBean[] calculateAggregatedCodeCoverageUsingToolingAPI() { PartnerConnection connection = ConnectionHandler.getConnectionHandlerInstance().getConnection();  ApexClassCodeCoverageBean[] apexClassCodeCoverageBeans = null; String[] classesAsArray = null;  /* * Builder design pattern construct the test class array by building the * final array using simple objects(arrays) viz. array from Manifest * file and array from regex prefix */ // read class names from manifest files if (CommandLineArguments.getClassManifestFiles() != null) { LOG.debug("" Fetching apex classes from location : "" + CommandLineArguments.getClassManifestFiles()); classesAsArray = ApexClassFetcherUtils .fetchApexClassesFromManifestFiles(CommandLineArguments.getClassManifestFiles()); } // fetch matching class names based on regex if (CommandLineArguments.getSourceRegex() != null) { LOG.debug("" Fetching apex classes with regex : "" + CommandLineArguments.getSourceRegex()); classesAsArray = ApexClassFetcherUtils.fetchApexClassesBasedOnMultipleRegexes(connection, classesAsArray, CommandLineArguments.getSourceRegex()); } // Do not proceed if no class names are returned from both manifest // files and/or regexes if (classesAsArray != null && classesAsArray.length > 0) { String classArrayAsStringForQuery = processClassArrayForQuery(classesAsArray); String relativeServiceURL = ""/services/data/v"" + SUPPORTED_VERSION + ""/tooling""; // compute aggregated code coverage String soqlcc = QueryConstructor.getAggregatedCodeCoverage(classArrayAsStringForQuery);  JSONObject responseJsonObject = null; responseJsonObject = WebServiceInvoker.doGet(relativeServiceURL, soqlcc, OAuthTokenGenerator.getOrgToken()); LOG.debug(""responseJsonObject says "" + responseJsonObject + ""\n relativeServiceURL is "" + relativeServiceURL + ""\n soqlcc is "" + soqlcc); if (responseJsonObject != null) { apexClassCodeCoverageBeans = processJSONResponseAndConstructCodeCoverageBeans(connection, responseJsonObject); } if (apexClassCodeCoverageBeans == null) { ApexUnitUtils.shutDownWithErrMsg( ""Code coverage metrics not computed. Null object returned while processing the JSON response from the Tooling API""); } } else { ApexUnitUtils.shutDownWithErrMsg(""No/Invalid Apex source classes mentioned in manifest file and/or "" + ""regex pattern for ApexSourceClassPrefix didn't return any Apex source class names from the org""); } return apexClassCodeCoverageBeans; } "	0	1	1	0	0	0
"private String validateStudent(Student student, StudentSecurity studentSecurity, String stateCode) { if (student.getStateAbbreviation().compareTo(stateCode) != 0) throw new UnauthorizedUserException(""Attempted to modify student in state: "" + student.getStateAbbreviation() + "" endpoint received "" + stateCode); String error = """"; List<FieldError> errors = fileUploadSecurityValidator.validateStudent(student, studentSecurity); if(errors.size() == 0) { for(FieldError fieldError : errors) { error += fieldError.getDefaultMessage() + ""\n""; } } return error; } "	1	1	1	1	1	0
"public void init(List<PlotData> graphs, List<ChannelView> allViews, TimeInterval timeRange, IMeanState meanState, int height) { maxValue = Double.NEGATIVE_INFINITY; double minValue = Double.POSITIVE_INFINITY; DecimalFormat df = new DecimalFormat(""#.###E0""); for (PlotData data: graphs) { double dataMaxValue = meanState.getValue(data.getMaxValue(), data.getMeanValue()); if (dataMaxValue > maxValue) { maxValue = Double.valueOf(df.format(dataMaxValue)); } double dataMinValue = meanState.getValue(data.getMinValue(), data.getMeanValue()); if (dataMinValue < minValue) { minValue = Double.valueOf(df.format(dataMinValue));; } } if (maxValue == minValue) { amp = 100.0; } else { amp = maxValue - minValue; } this.height = height; } "	0	0	1	1	0	0
private void explode() { ExplosionPrimeEvent event = EventFactory.callEvent(new ExplosionPrimeEvent(this));  if (!event.isCancelled()) { Location location = getLocation(); double x = location.getX() + 0.49, y = location.getY() + 0.49, z = location.getZ() + 0.49; world.createExplosion(this, x, y, z, event.getRadius(), event.getFire(), true); }  remove(); } 	0	1	1	1	0	0
"@Test public void execute_doneAlreadyDoneItem_noChange() throws Exception{ TestDataHelper helper = new TestDataHelper(); Item target = helper.generateItem(1); target.setIsDone(true); Item notTarget1 = helper.generateItem(2); Item notTarget2 = helper.generateItem(3); Item notTarget3 = helper.generateItem(4);  List<Item> expectedItems = helper.generateItemList(notTarget3, target, notTarget1, notTarget2); TaskBook expectedTB = helper.generateTaskBook(expectedItems); helper.addToModel(model, expectedItems);  assertCommandBehavior(""done 2"", DoneCommand.MESSAGE_DONE_ITEM_FAIL, expectedTB, expectedItems);  } "	0	0	1	1	0	0
public void setFederationType(String federationType) { this.type = federationType; } 	1	0	1	0	0	0
private void startOcrActivity(long nativePix, boolean accessibilityMode) { Intent intent = new Intent(this, OCRActivity.class); intent.putExtra(EXTRA_NATIVE_PIX, nativePix); intent.putExtra(OCRActivity.EXTRA_USE_ACCESSIBILITY_MODE, accessibilityMode); intent.putExtra(OCRActivity.EXTRA_PARENT_DOCUMENT_ID, getParentId()); startActivityForResult(intent, REQUEST_CODE_OCR); } 	0	0	1	1	0	0
"protected void activate(ComponentContext componentContext) throws InvalidSyntaxException { s_logger.info(""activate..."");  // save the bundle context m_ctx = componentContext;  // 1. Register the ConfigurationListener to // monitor Configuration updates m_ctx.getBundleContext().registerService(ConfigurationListener.class.getName(), this, null);  // 2. Load the latest snapshot and push it to ConfigurationAdmin try { loadLatestSnapshotInConfigAdmin(); } catch (Exception e) { throw new ComponentException(""Error loading latest snapshot"", e); }  // // start the trackers s_logger.info(""Trackers being opened...""); m_cloudHandler = new CloudConfigurationHandler(m_ctx.getBundleContext(), this, m_systemService, m_cryptoService); m_cloudHandler.open();  m_serviceTracker = new ConfigurableComponentTracker(m_ctx.getBundleContext(), this); m_serviceTracker.open(true);  m_bundleTracker = new ComponentMetaTypeBundleTracker(m_ctx.getBundleContext(), m_configurationAdmin, this); m_bundleTracker.open(); } "	1	0	1	0	0	0
public List<MockRequest> requests() { return Collections.unmodifiableList(mockRequests); } 	1	0	1	1	0	0
@Override public void refresh() { Platform.runLater(() -> itemsTable.refresh()); } 	1	0	1	0	0	0
"public static PickResult withError(Status error) { Preconditions.checkArgument(!error.isOk(), ""error status shouldn't be OK""); return new PickResult(null, null, error); } "	0	1	1	1	0	0
@Override public void success(Message message) { mXmppConnectionService.resendMessage(message); } 	1	0	1	0	0	0
@Override public TreeConstructionOutput process(TreeConstructionInput treeConstructionInput) throws ProcessingError { this.bufferedReader = treeConstructionInput.getBufferedReader(); this.timePointer = System.currentTimeMillis(); this.globalStartTime = System.currentTimeMillis(); this.fileReadTimeNeeded = 0; UncertainTree uncertainTree = null; try { uncertainTree = new UncertainTree(treeConstructionInput.getFrameSize(), treeConstructionInput.getWindowSize()); for (int frameNo = 0; frameNo < treeConstructionInput.getWindowSize(); frameNo++) { for (int i = 0; i < treeConstructionInput.getFrameSize(); i++) { List<UInputData> nodes = getTransaction(); uncertainTree.addTransactionToTree(nodes, frameNo); } } treeConstructionInput.getWindowCompletionCallback().sendUpdate(createWindowOutput(uncertainTree)); uncertainTree.slideWindowAndUpdateTree(); List<UInputData> nodes = null; int frameCounter = 0; while (!(nodes = getTransaction()).isEmpty()) { if (!(frameCounter < treeConstructionInput.getWindowSize())) { frameCounter = 0; treeConstructionInput.getWindowCompletionCallback().sendUpdate(createWindowOutput(uncertainTree)); uncertainTree.slideWindowAndUpdateTree(); } uncertainTree.addTransactionToTree(nodes, treeConstructionInput.getWindowSize() - 1); frameCounter++;  } } catch (FileNotFoundException e) { e.printStackTrace(); } catch (DataNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); }  return createWindowOutput(uncertainTree); } 	1	1	1	1	1	0
"public void deleteResolution(int index) { ResolutionEntryVO resolutionEntryVO = dataManager.getCurrentProjectInfoVO().resolutions.removeIndex(index); try { FileUtils.deleteDirectory(new File(dataManager.getWorkspacePath() + ""/"" + dataManager.currentProjectVO.projectName + ""/assets/"" + resolutionEntryVO.name)); } catch (IOException ignored) { ignored.printStackTrace(); } dataManager.saveCurrentProject(); dataManager.openProjectAndLoadAllData(dataManager.currentProjectVO.projectName, ""orig""); } "	0	0	1	1	0	0
@Override public Set<String> getRegisteredChannels(Platform.Type side) { if (side == Platform.Type.SERVER) { return ImmutableSet.copyOf(channels.keySet()); } else { return ImmutableSet.of(); } } 	0	1	1	0	0	0
"@Override public Datastream getDatastreamObject(String datastreamName) { if (datastreamName == null || this.datastreamObjects == null) { return null; }  String[] datastreamParts = datastreamName.split(""/"", 2); String pid; if (datastreamParts.length > 1) { pid = datastreamParts[0]; if (pid.equals(this.id)) { pid = null; } datastreamName = datastreamParts[1]; } else { pid = null; }  for (Datastream datastream: this.datastreamObjects) { if (datastream.equals(datastreamName) && (pid == null || pid.equals(datastream.getOwner().getPid()))) { return datastream; } } return null; } "	1	1	1	0	1	0
"public void go() { JFrame frame = new JFrame();  // Set the name and frame size frame.setSize(608,480); frame.setTitle(""Treasure Hunter"");  // Allows for game window to be closed frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // Randomly places 3 treasures on game map component = new GameComponent();  player = new Player(0,0,16,8,""player""); component.loadPlayer(player,""player"");  System.out.println( this.toString() + "" is calling placeTheTreasures!!""); this.placeTheTreasures(4); component.loadTreasure( theTreasures );  Player [] treasures = placeTreasures(3); component.loadPlayer( treasures[0], ""treasure"" ); component.loadPlayer( treasures[1], ""treasure1"" ); component.loadPlayer( treasures[2], ""treasure2"" );  component.loadMap(""map.txt""); addBindings();  // adds game components and makes the window visible frame.add(component); frame.setVisible(true); component.validate(); component.repaint(); } "	1	0	1	1	0	0
"public void checkMove(int xTile, int yTile) { //limits where the player can move (ie. can move out of the box) if(xTile < 0 || xTile > 11 || yTile < 0 || yTile > 8) player.setMovable(false); //allows player to move after finding treasure else if(!message.equals("""")) player.setMovable(true); //allows player to move into bushes else if(tiletypes.get(yTile*tilesWidth + xTile) == 'B') player.setMovable(true); //prevent player from move into stones else if(tiletypes.get(yTile*tilesWidth + xTile) == 'S') player.setMovable(false); else if(player.getXPos() != player.getXTile() * 50 || player.getYPos() != player.getYTile() * 50) player.setMovable(false); else player.setMovable(true);  //if player finds treasure the string ""Treasure Found is displayed"" //if player finds three treasure than the string ""YOU WIN! Would you want to play again?""  if(xTile == treasure.getXTile() && yTile == treasure.getYTile() && t != ""found"" ) { setMessage(1); t = ""found""; foundTreasureNum++; if(GameGui.debug){ System.out.println(""foundTreasureNum++""); } } else if(xTile == treasure1.getXTile() && yTile == treasure1.getYTile() && t1 != ""found"" ) { setMessage(2); t1 = ""found""; foundTreasureNum++; if(GameGui.debug){ System.out.println(""foundTreasureNum++""); } } else if(xTile == treasure2.getXTile() && yTile == treasure2.getYTile() && t2 != ""found"" ) { setMessage(3); t2= ""found""; foundTreasureNum++; if(GameGui.debug){ System.out.println(""foundTreasureNum++""); } }  for (int i = 0; i < theTreasures.size(); ++i){ if(xTile == theTreasures.get(i).getX() && yTile == theTreasures.get(i).getY() && theTreasures.get(i).getFound() == false){ setMessage(i); theTreasures.get(i).setFoundTrue(); foundTreasureNum++; if(GameGui.debug) System.out.println(""foundTreasureNum++""); } }   if(foundTreasureNum == 3){ setMessageFinal(true); } } "	1	0	1	0	0	0
"@Override protected void onStop() { Log.d(""OnStop"",""Commit 5""); super.onStop(); } "	0	0	1	1	0	0
"@Override public long getSize() { if (size>0) { try { return getBytes().length; } catch (IOException e) { throw new MultipartException(""Something went wrong here"", e); } // try/catch } // if return size; } // getSize() "	1	0	1	1	0	0
@Override public boolean attackEntityAsMob(Entity entity) { boolean entityFrom = entity.attackEntityFrom(DamageSource.causeMobDamage(this), (float) ((int) getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getAttributeValue()));  if (entityFrom) { this.applyEnchantments(this, entity); }  return entityFrom; } 	1	1	1	1	1	0
public void updateCalendar() { List<DSAEvent> events = getEvents(); List<String> touchedEvents = new ArrayList<>();  for (DSAEvent event : events) { if (event.getUniqueId() == null) { continue; } touchedEvents.add(event.getUniqueId()); createEventNode(event); }  if (eventsNode.getChildren() != null) { for (Map.Entry<String, Node> eventNode : eventsNode.getChildren().entrySet()) { if (!touchedEvents.contains(eventNode.getValue().getName())) { eventsNode.removeChild(eventNode.getValue()); } } } } 	1	1	1	0	1	0
@Override public int getRecipeWidth(IRecipe recipe) { return recipe instanceof ShapelessOreRecipe ? 3 : -1; } 	1	0	1	1	0	0
public static ArgumentStack createFromP(ArgumentStack from, Closure p1, Closure p2, Closure p3) { ArgumentStack to = (from == null)? new ArgumentStack():from.copy(); int len = 3; Closure[] oldClosures = to.closures; if (oldClosures != null) { len += oldClosures.length; } Closure[] newClosures = new Closure[len]; if (oldClosures != null) { System.arraycopy(oldClosures, 0, newClosures, 0, len - 1); } newClosures[len - 3] = p1; newClosures[len - 2] = p2; newClosures[len - 1] = p3; to.closures = newClosures; to.typeFlag |= P_FLAG; return to; } 	1	0	1	1	0	0
@Override public void onMessageReceived(@NonNull MOKMessage message) { MessageItem newItem = processNewMessage(message); boolean isMyOwnMsg = newItem.isIncomingMessage(); updateConversation(newItem.getConversationId(), DatabaseHandler.getSecondaryTextByMessageType(newItem, false), isMyOwnMsg? MonkeyConversation.ConversationStatus.deliveredMessage: MonkeyConversation.ConversationStatus.receivedMessage, isMyOwnMsg? 0 : 1, message.getDatetimeorder(), 0L); } 	1	1	1	0	1	0
protected void resizeAxis() { int minSize = labelMaxWidth + TextPositionOffset + (areaWidth - mainLineXPosition); if (minSize > areaWidth) { ocelotlView.getMainViewTopSashform().setWeights( new int[] { minSize, ocelotlView.getMainViewTopSashform().getSize().y - minSize }); } } 	0	1	1	1	0	0
"public static void loadConfig() { File coreFile = new File(Config.configDirectory, CORE_FILE_NAME);  String defaultVals = null; try { defaultVals = RecipeConfig.readRecipes(coreFile, CORE_FILE_NAME, true); } catch (IOException e) { Log.error(""Could not load "" + DISPLAY_NAME + "" "" + coreFile + "" from EnderIO jar: "" + e.getMessage()); e.printStackTrace(); return; } if(!coreFile.exists()) { Log.error(""Could not load default "" + DISPLAY_NAME + "" from "" + coreFile + "" as the file does not exist.""); return; }  try { parse(defaultVals); } catch (Exception e) { Log.error(""Could not parse default "" + DISPLAY_NAME + "" from "" + coreFile + "": "" + e); }  File userFile = new File(Config.configDirectory, CUSTOM_FILE_NAME); String userConfigStr = null; try { userConfigStr = RecipeConfig.readRecipes(userFile, CUSTOM_FILE_NAME, false); if(userConfigStr == null || userConfigStr.trim().length() == 0) { Log.error(""Empty user "" + DISPLAY_NAME + "" file: "" + userFile.getAbsolutePath()); } else { parse(userConfigStr); } } catch (Exception e) { Log.error(""Could not load user "" + DISPLAY_NAME + "" from file: "" + CUSTOM_FILE_NAME); e.printStackTrace(); } } "	1	1	1	0	1	0
"@Test /** * for {@link OperationResultFactoryImpl#getAppropriateOperationResultInstance(Response, Class)} */ public void should_return_result_with_entity_when_response_has_entity_when_invoking_getAppropriateOperationResultInstance_method() throws Exception {  /* Given */ OperationResultFactoryImpl factorySpy = PowerMockito.spy(new OperationResultFactoryImpl());  PowerMockito.doReturn(true).when(factorySpy, ""isClientResource"", ClientQuery.class); PowerMockito.doReturn(ClientQuery.class).when(factorySpy, ""getSpecificResourceType"", responseMock); PowerMockito.doReturn(true).when(responseMock).hasEntity();  PowerMockito.whenNew(WithEntityOperationResult.class).withArguments(responseMock, ClientQuery.class).thenReturn(withEntityOperationResultMock);  /* When */ OperationResult<ClientQuery> retrievedOperationResult = factorySpy.getOperationResult(responseMock, ClientQuery.class);  /* Then */ Assert.assertNotNull(retrievedOperationResult); Assert.assertSame(retrievedOperationResult, withEntityOperationResultMock);  Mockito.verify(responseMock, times(2)).hasEntity(); PowerMockito.verifyNew(WithEntityOperationResult.class, times(1)).withArguments(responseMock, ClientQuery.class); } "	1	0	1	1	0	0
"@Override public void renderMeTo(TJContext tjContext, CompositeData cd, StringBuilder output) { output.append(""CompositeData of "").append(cd.getCompositeType().getTypeName()).append("" {\n""); for (String key : cd.getCompositeType().keySet()) { output.append(SHIFT_SPACE).append(""@|cyan "").append(key).append(""|@ = ""); Object o = cd.get(key); Renderer renderer = getRendererByTypeName(o.getClass().getName()); CharSequence vOut = renderer.render(tjContext, o); output.append(vOut); output.append(""\n""); } output.append(""}\n""); } "	1	0	1	1	0	0
public static void chmod(PyObject path, int mode) { if (os == OS.NT) { try { if (!absolutePath(path).toFile().setWritable((mode & FileStat.S_IWUSR) == 0)) { throw Py.OSError(Errno.EPERM, path); } } catch (SecurityException ex) { throw Py.OSError(Errno.EACCES, path); }  } else if (posix.chmod(absolutePath(path).toString(), mode) < 0) { throw errorFromErrno(path); } } 	1	0	1	1	0	0
public void showResult(int correctAnswers, int totalCards) { if (isInExam) { ResultDialogFragment resultDialog = ResultDialogFragment.newInstance(correctAnswers, totalCards); resultDialog.show(getSupportFragmentManager(), TAG_RESULT); } else { Dialogs dialog = new Dialogs(this); dialog.studyEndDialogInit(); dialog.show(); } } 	1	0	1	0	0	0
public void onDeckClicked(int position, View view) { String deckId; String deckName; int flashcards;  if (loginManager.isUserLoggedIn()) { deckId = dataProvider.getPrivateDecks().get(position).getDeckId(); deckName = dataProvider.getPrivateDecks().get(position).getName(); flashcards = dataProvider.getPrivateDecks().get(position).getFlashcardsCount(); } else { deckId = dataProvider.getPublicDecks().get(position).getDeckId(); deckName = dataProvider.getPublicDecks().get(position).getName(); flashcards = dataProvider.getPublicDecks().get(position).getFlashcardsCount(); }  if (flashcards == 0) { EmptyDeckActivity.start(view.getContext()); } else { Context context = view.getContext(); Dialogs dialog = new Dialogs(context); dialog.modeDialogInit(deckId, deckName); dialog.show(); } } 	1	1	1	0	1	0
"public void testIfRGBSeekBarsDoChangeColor() throws SecurityException, IllegalArgumentException, NoSuchFieldException, IllegalAccessException { final int RGB_TAB_INDEX = 1; testOpenColorPickerOnClickOnColorButton(); TabHost tabHost = (TabHost) mSolo.getView(R.id.colorview_tabColors); TabWidget colorTabWidget = tabHost.getTabWidget(); mSolo.clickOnView(colorTabWidget.getChildAt(RGB_TAB_INDEX), true); mSolo.waitForText(mSolo.getString(R.string.color_red)); final Paint originalStrokePaint = (Paint) PrivateAccess.getMemberValue(BaseTool.class, PaintroidApplication.currentTool, ""mCanvasPaint""); final int originalPaintColor = originalStrokePaint.getColor(); final ArrayList<ProgressBar> currentProgressBars = mSolo.getCurrentViews(ProgressBar.class); assertEquals(""No progress bars for ARGB :-("", currentProgressBars.size(), 4); final ArrayList<TextView> currentTextViews = mSolo.getCurrentViews(TextView.class, mSolo.getView(R.id.rgb_base_layout)); assertEquals(""Missing some text views RGBA and ARGV-values"", 9, currentTextViews.size()); int textValueCounter = 1; for (; textValueCounter < currentTextViews.size(); textValueCounter += 2) { int textValueAsInteger = Integer.parseInt((String) currentTextViews.get(textValueCounter).getText()); assertTrue(""Not in range 0<=textValue<=255"", textValueAsInteger >= 0 && textValueAsInteger <= 255); }  textValueCounter = 1; for (ProgressBar barToChange : currentProgressBars) { int changeSeekBarTo = (barToChange.getProgress() + 33) % barToChange.getMax(); mSolo.setProgressBar(barToChange, changeSeekBarTo); mSolo.sleep(50); if (textValueCounter == 4) { // alpha 0-100% int expectetAlphaTextValue = (int) (changeSeekBarTo / 2.55f); assertEquals(""Text value did not change index:"" + textValueCounter, expectetAlphaTextValue, Integer.parseInt((String) currentTextViews.get(textValueCounter * 2 - 1).getText())); } else assertEquals(""Text value did not change index:"" + textValueCounter, changeSeekBarTo, Integer.parseInt((String) currentTextViews.get(textValueCounter * 2 - 1).getText())); textValueCounter++; } mSolo.goBack(); final Paint rgbChangedStrokePaint = (Paint) PrivateAccess.getMemberValue(BaseTool.class, PaintroidApplication.currentTool, ""mCanvasPaint""); final int rgbChangedPaintColor = rgbChangedStrokePaint.getColor(); assertFalse(""Alpha value did not change"", Color.alpha(rgbChangedPaintColor) == Color.alpha(originalPaintColor)); assertFalse(""Red value did not change"", Color.red(rgbChangedPaintColor) == Color.red(originalPaintColor)); assertFalse(""Green value did not change"", Color.green(rgbChangedPaintColor) == Color.green(originalPaintColor)); assertFalse(""Blue value did not change"", Color.blue(rgbChangedPaintColor) == Color.blue(originalPaintColor));  } "	1	0	1	1	0	0
protected GHUser getUser(GHUser orig) throws IOException { GHUser u = users.get(orig.getLogin()); if (u==null) { orig.root = this; users.put(login,orig); return orig; } return u; } 	1	1	1	0	1	0
"public String getTypeORedString() { if (types.size() == 0) {return """";} String tmp = (String)types.elementAt(0); for (int i=1;i<types.size();i++) { tmp = tmp + "","" + (String)types.elementAt(i); }  return tmp; } "	1	1	1	1	1	0
"private void matchAndRemove(String path) { int startIndex = 0; int endIndex; while ((endIndex = path.indexOf(""."", startIndex)) != -1) { String currentPath = path.substring(0, endIndex + 1);  Iterator<PathProperty> iterator = pathProperties.iterator(); while (iterator.hasNext()) if (iterator.next().path.equals(currentPath)) iterator.remove();  startIndex = endIndex + 1; }  Iterator<PathProperty> iterator = pathProperties.iterator(); while (iterator.hasNext()) if (iterator.next().path.contains(path)) iterator.remove(); } "	0	1	1	0	0	0
@Override public void run() { while (stopped.get() && !Thread.interrupted()) { syncPolicy.sync(PSAgentContext.get().getMatricesCache()); try { Thread.sleep(syncTimeIntervalMS); } catch (InterruptedException e) {  } } } 	1	0	1	1	0	0
"@RequestMapping( value="""", method=RequestMethod.GET, produces={ ""application/json"" } ) @ResponseStatus(value = HttpStatus.OK) public GameStateContainer resetPacdots(HttpServletResponse response) {  log.debug(""Mapped GET /admin/gamestate"");  GameStateContainer stateContainer = new GameStateContainer(); stateContainer.setState(gameStateRegistry.getCurrentState()); return stateContainer;  } "	0	0	1	1	0	0
"@RequestMapping( value=""/count"", method=RequestMethod.GET, produces={ ""application/json"" } ) @ResponseStatus(value = HttpStatus.OK) public PacdotCountResponse getPacdotCount(HttpServletResponse response) {  log.debug(""Mapped GET /pacdots/count"");  PacdotCountResponse countResponse = new PacdotCountResponse(); List<Pacdot> pacdotList = pacdotRegistry.getAllPacdots(); for(Pacdot pacdot : pacdotList) {  countResponse.incrementTotal(); if(pacdot.getEaten()) { countResponse.incrementEaten(); } else { countResponse.incrementUneaten(); if(pacdot.getPowerdot()) { countResponse.incrementUneatenPowerdots(); } }  } return countResponse; } "	0	0	1	1	0	0
private void recordCookie(HttpServletRequest request, Trace trace) { if (cookieSampler.isSampling()) { final SpanEventRecorder recorder = trace.currentSpanEventRecorder(); Map<String, Object> cookies = ReadCookieMap(request); recorder.recordAttribute(AnnotationKey.HTTP_COOKIE, cookies); } } 	1	0	1	0	0	0
public static List<String> loadWordList(Reader reader, String comment) throws IOException { final List<String> result = new ArrayList<>(); BufferedReader br = null; try { if (reader instanceof BufferedReader) { br = (BufferedReader) reader; } else { br = new BufferedReader(reader); } String word = null; while ((word = br.readLine()) != null) { if (!Strings.hasText(word)) { continue; } if (!word.startsWith(comment)) { result.add(word.trim()); } } } finally { if (br != null) br.close(); } return result; } 	1	0	1	0	0	0
public void setPaused(boolean paused) { this.isPaused = paused; } 	1	0	1	0	0	0
public void reset() { this.elapsedCycles = 0; this.excessCycles = 0.0f; this.lastUpdate = getCurrentTime(); this.isPaused = false; } 	0	1	1	0	0	0
"@Override public Answer create(AppService object) { MessageEvent msg = null; StringBuilder query = new StringBuilder(); query.append(""INSERT INTO appservice (`Service`, `Group`, `Application`, `Type`, `Method`, `ServicePath`, `Operation`, `ServiceRequest`, `AttachementURL`, `Description`) ""); if ((object.getApplication() != null) && (!object.getApplication().equals(""""))) { query.append(""VALUES (?,?,?,?,?,?,?,?,?)""); } else { query.append(""VALUES (?,?,null,?,?,?,?,?,?,?)""); }  // Debug message on SQL. if (LOG.isDebugEnabled()) { LOG.debug(""SQL : "" + query.toString()); } Connection connection = this.databaseSpring.connect(); try { PreparedStatement preStat = connection.prepareStatement(query.toString()); try { int i = 1; preStat.setString(i++, object.getService()); preStat.setString(i++, object.getGroup()); if ((object.getApplication() != null) && (!object.getApplication().equals(""""))) { preStat.setString(i++, object.getApplication()); } preStat.setString(i++, object.getType()); preStat.setString(i++, object.getMethod()); preStat.setString(i++, object.getServicePath()); preStat.setString(i++, object.getOperation()); preStat.setString(i++, object.getServiceRequest()); preStat.setString(i++, object.getAttachementURL()); preStat.setString(i++, object.getDescription());  preStat.executeUpdate(); msg = new MessageEvent(MessageEventEnum.DATA_OPERATION_OK); msg.setDescription(msg.getDescription().replace(""%ITEM%"", OBJECT_NAME).replace(""%OPERATION%"", ""INSERT""));  } catch (SQLException exception) { LOG.error(""Unable to execute query : "" + exception.toString());  if (exception.getSQLState().equals(SQL_DUPLICATED_CODE)) { //23000 is the sql state for duplicate entries msg = new MessageEvent(MessageEventEnum.DATA_OPERATION_ERROR_DUPLICATE); msg.setDescription(msg.getDescription().replace(""%ITEM%"", OBJECT_NAME).replace(""%OPERATION%"", ""INSERT"").replace(""%REASON%"", exception.toString())); } else { msg = new MessageEvent(MessageEventEnum.DATA_OPERATION_ERROR_UNEXPECTED); msg.setDescription(msg.getDescription().replace(""%DESCRIPTION%"", exception.toString())); } } finally { preStat.close(); } } catch (SQLException exception) { LOG.error(""Unable to execute query : "" + exception.toString()); msg = new MessageEvent(MessageEventEnum.DATA_OPERATION_ERROR_UNEXPECTED); msg.setDescription(msg.getDescription().replace(""%DESCRIPTION%"", exception.toString())); } finally { try { if (connection != null) { connection.close(); } } catch (SQLException exception) { LOG.error(""Unable to close connection : "" + exception.toString()); } } return new Answer(msg); } "	0	0	1	1	0	0
"public void actionEditar(@RParam(rParamName = ""p_id"") String idUser) throws IOException, IllegalArgumentException, IllegalAccessException{  RegistarUtilizador model = new RegistarUtilizador();  User user = (User) new User(); user.setId(Integer.parseInt(idUser)); user = (User) user.getOne();  model.setNome(user.getName()); model.setUsername(user.getUser_name()); model.setEmail(user.getEmail());  if(Igrp.getInstance().getRequest().getMethod().equals(""POST"")){  model.load();  boolean isError = false;  if(!model.getPassword().equals(model.getConfirmar_password())){ Igrp.getInstance().getFlashMessage().addMessage(FlashMessage.ERROR, ""Password inconsistentes ... Tente de novo.""); isError = true; }  if(!isError){ user.setName(model.getNome()); user.setPass_hash(model.getPassword()); user.setEmail(model.getEmail()); user.setUser_name(model.getUsername()); user.setUpdated_at(System.currentTimeMillis());  if(user.update()){ Igrp.getInstance().getFlashMessage().addMessage(""success"", ""Utilizador atualizado com sucesso.""); this.redirect(""igrp"", ""registar-utilizador"", ""editar"", new String[]{""p_id""}, new String[]{user.getId() + """"}); return; } else Igrp.getInstance().getFlashMessage().addMessage(""error"", ""Error ao atualizar uilizador.""); }  }  RegistarUtilizadorView view = new RegistarUtilizadorView(model); view.title = ""Atualizar utilizador""; view.btn_guardar.setLink(""editar&amp;p_id="" + idUser); this.renderView(view); } "	0	1	1	0	0	0
public void setFamilyApartmentDAO(FamilyApartmentDAO familyapartmentDAO) { this.familyApartmentDAO = familyApartmentDAO; } 	0	0	1	1	0	0
"@Test public void constructTitleString() throws Exception { String[] titles = new String[101]; for (int i = 0; i < titles.length; i++) titles[i] = ""a"" + i; String[] expected = new String[] { // slowmax == 50 for Wikimedia wikis if not logged in URLEncoder.encode(""A0|A1|A2|A3|A4|A5|A6|A7|A8|A9|A10|A11|A12|A13|A14|"" + ""A15|A16|A17|A18|A19|A20|A21|A22|A23|A24|A25|A26|A27|A28|A29|A30|"" + ""A31|A32|A33|A34|A35|A36|A37|A38|A39|A40|A41|A42|A43|A44|A45|A46|"" + ""A47|A48|A49"", ""UTF-8""), URLEncoder.encode(""A50|A51|A52|A53|A54|A55|A56|A57|A58|A59|A60|A61|A62|"" + ""A63|A64|A65|A66|A67|A68|A69|A70|A71|A72|A73|A74|A75|A76|A77|A78|A79|"" + ""A80|A81|A82|A83|A84|A85|A86|A87|A88|A89|A90|A91|A92|A93|A94|A95|A96|"" + ""A97|A98|A99"", ""UTF-8""), URLEncoder.encode(""A100"", ""UTF-8"") }; String[] actual = enWiki.constructTitleString(titles); assertArrayEquals(""constructTitleString"", expected, actual); } "	1	0	1	0	0	0
"@SuppressWarnings(""unchecked"") @Override public boolean init(Expression<?>[] arg, int arg1, Kleenean arg2, ParseResult arg3) { if (checkIfCondition()) return false; EffFormatGUI last = lastInstance; if (hasSection()) { if ((arg1 == 0 || arg1 == 5)) { Skript.error(""You can't execute a code in this effect. Use 'format gui slot .... to run:' instead.""); return false; } lastInstance = this; loadSection(""format gui effect"", InventoryClickEvent.class); } else if (!hasSection() && arg1 == 2) { Skript.error(""You can't execute a blank code in this effect. In case you want to format a unstealable item, use 'format gui slot ... to do nothing' instead.""); return false; } lastInstance = last; int max = arg.length; s = (Expression<Number>) arg[0]; p = (Expression<Player>) arg[1]; i = (Expression<ItemStack>) arg[2]/*.getConvertedExpression(ItemStack.class)*/; toClose = arg3.mark > 0; Type = arg1; if (arg3.mark == 2) inv = (Expression<Inventory>) arg[3]; switch (arg1){ case 5: runEvent = true; break; case 1: toClose = true; case 2: ct = arg[arg.length -1] != null ? arg[arg.length -1].getConvertedExpression(Object.class) : null; case 0:  break; case 3: sender = (Expression<CommandSender>) arg[4]; cmd = (Expression<String>) arg[5]; perm =  arg[6] != null ? (Expression<String>) arg[6] : null; break; case 4: String name = arg3.regexes.get(0).group(0).replaceAll("" "",""""); String exprs = arg3.regexes.size() > 1 ? arg3.regexes.get(1).group(0) : """"; Function<?> f = Functions.getFunction(name); EvalFunction.setParserInstance(this); if (f != null) func = new EvalFunction(f, exprs); else func = new EvalFunction(name, exprs);  } if (arg1 > 2 && arg1 != 4){ ct = arg[max - 2] != null ? arg[max - 2].getConvertedExpression(Object.class): null; i2 = arg[max - 1] != null ? (Expression<ItemStack>) arg[max - 1] : null; } return true; } "	1	0	1	1	0	0
@Override protected void onResume() { super.onResume();  checkPlayServices();  if (this.playServicesOk && this.settingsOK) launchChecksComplete(); } 	1	0	1	0	0	0
@Test public void scaleContainCenterSameWidthAndOnOrigin() { Rectangle rec = new Rectangle(0, 0, 100, 100); Rectangle result = rec.scaleContainCenter(new Vector2D(100, 50)); Assert.assertEquals(new Rectangle(0, 25, 100, 75), result); } 	0	1	1	0	0	0
@Test public void scaleContainCenterSameAspectRatioAndDifferentDimensions() { Rectangle rec = new Rectangle(0, 0, 50, 50); Rectangle result = rec.scaleContainCenter(new Vector2D(100, 100)); Assert.assertEquals(new Rectangle(0, 0, 50, 50), result); } 	0	1	1	0	0	0
"protected boolean validationRequired(Award award) { boolean isRequired = true; // If awardId is null, new award is being created, so validation required if (ObjectUtils.isNotNull(award.getAwardId())) { Map<String, String> criteria = new HashMap<String, String>(); criteria.put(""awardId"", award.getAwardId() + """"); Award awardStored = (Award) getBusinessObjectService().findByPrimaryKey(Award.class, criteria); if (ObjectUtils.isNotNull(awardStored)) { String accountNumberStored = awardStored.getAccountNumber(); String chartStored = awardStored.getFinancialChartOfAccountsCode(); if (ObjectUtils.isNull(award.getAccountNumber()) || ObjectUtils.isNull(award.getFinancialChartOfAccountsCode())) { return true; } if (award.getAccountNumber().equalsIgnoreCase(accountNumberStored) && chartStored.equalsIgnoreCase(award.getFinancialChartOfAccountsCode())) { isRequired &= false; } } } return isRequired; } "	0	1	1	0	0	0
"public void onWakeupReceived(Context applicationContext, Intent intent) { Log.d(TAG, ""onWakeupReceived() start""); wakeup(intent); } "	1	0	1	0	0	0
"private void createFileMaskRootNode(final LoggingSectionHandler.LoggerTreeElement lte, final LogParamEntry logentry) { ParseTree fileMaskRoot = new ParserRuleContext(); logentry.setConsoleMaskRoot( fileMaskRoot ); ConfigTreeNodeUtilities.addChild( fileMaskRoot, new AddedParseTree(""\n"") );  StringBuilder name = new StringBuilder(); lte.writeNamePrefix(name); name.append(""FileMask := "");  ParseTree node = new AddedParseTree(name.toString()); ConfigTreeNodeUtilities.addChild( fileMaskRoot, node );  ParseTree fileMask = new ParserRuleContext(); logentry.setFileMask( fileMask ); ConfigTreeNodeUtilities.addChild( fileMaskRoot, fileMask ); ConfigTreeNodeUtilities.addChild( loggingSectionHandler.getLastSectionRoot(), fileMaskRoot ); } "	0	0	1	1	1	0
public void validateRole(Role requiredRole) throws InsufficientRoleException { if (token.getRole() != null) { checkRoleField(requiredRole); } else { checkGroupsField(roleMapper.getRoleGroup(requiredRole)); } } 	1	0	1	0	1	0
public ViewHolder setViewVisibility(int viewId, int visibility) { View view = getView(viewId); if (view.getVisibility() == visibility) { view.setVisibility(visibility); } return this; } 	1	1	1	1	1	0
public static int ceilLogBaseTwo(final long i) { ArgUtils.checkPositive(i); return 32 - Long.numberOfLeadingZeros(i - 1); } 	0	1	1	1	0	0
"@SuppressWarnings(""unchecked"") public <T> Comparable<T> set(int col, int row, Comparable<T> value) { Comparable<T> old; DataChangeEvent event = null; synchronized (this) { old = (Comparable<T>) get(col, row); if (!old.equals(value)) { rows.get(row)[col] = value; event = new DataChangeEvent(this, col, row, old, value); } } if (event != null) { notifyDataUpdated(event); } return old; } "	1	1	1	1	1	0
public static JRubyAsciidoctor create(List<String> loadPaths) { return processRegistrations(createJRubyAsciidoctorInstance(null, loadPaths, null, null)); } 	1	0	1	1	0	0
protected void writeResponseStream(InputStream inputStream, OutputStream outputStream) throws IOException { if (inputStream == null || outputStream == null) { return; }  byte[] buffer = new byte[chunkSize]; int length = 0; while ((length = inputStream.read(buffer)) > 0) { outputStream.write(buffer, 0, length); } } 	1	0	1	1	0	0
"@Override public void visit(VariableDeclaration varDec) { S_Expression expression = tempExpr; if (varDec.getValue() != null) { varDec.getValue().accept(this); } else { if (varDec.getType() instanceof BooleanType) { tempExpr = new Constant(""true""); } else { tempExpr = new Constant(""0""); } } VarDef varDef = new VarDef(varDec.getName(), varDec.getType(), 0); expression.replace(varDef, tempExpr); replaceInAssignments(upScopeReplacements.lastElement(), varDef, tempExpr); upScopeReplacements.lastElement().remove(varDef); } "	0	1	1	0	1	0
@Override public void run() { try { Updates result = telegramApiProvider.getUpdates(lastUpdateId); if (!result.isEmpty()) { lastUpdateId = result.getLastUpdateId() + 1; updates.addAll(result.getUpdates()); }  } catch (Exception ex) { logger.error(ex.getMessage(), ex); } } 	1	1	1	1	1	0
"private void uploadImage(HttpServletRequest request, HttpServletResponse response) { HttpSession session = request.getSession(); UserEntity ue = (UserEntity) session.getAttribute(""user""); String imageJson = request.getParameter(""image""); byte[] encodeImage = Base64.decodeBase64(imageJson); File file = null; try { String applicationPath = request.getServletContext() .getRealPath(""""); String uploadFilePath = null; if (""developer"".equals(ue.getRole())) { uploadFilePath = applicationPath + ""uploads"" + File.separator + ""developer"" + File.separator + ue.getId(); saveImage(uploadFilePath, encodeImage, response); Developer developer = developerService.findById(ue.getId());  developer.setImgUrl(""uploads/developer/"" + ue.getId() + ""/""); developerService.updateDeveloper(developer); ue.setImgUrl(""uploads/developer/"" + ue.getId() + ""/""); } if (""customer"".equals(ue.getRole())) { uploadFilePath = applicationPath + ""uploads"" + File.separator + ""customer"" + File.separator + ue.getId(); saveImage(uploadFilePath, encodeImage, response); Customer customer = customerService.findById(ue.getId()); customer.setImgUrl(""uploads/customer/"" + ue.getId() + ""/""); customerService.modify(customer); ue.setImgUrl(""uploads/customer/"" + ue.getId() + ""/""); } if (""admin"".equals(ue.getRole())) { uploadFilePath = applicationPath + ""uploads"" + File.separator + ""admin"" + File.separator + ue.getId(); saveImage(uploadFilePath, encodeImage, response); Admin admin =  adminService.findById(ue.getId());; admin.setImgUrl(""uploads/admin/"" + ue.getId() + ""/""); adminService.modify(admin); ue.setImgUrl(""uploads/admin/"" + ue.getId() + ""/""); }  } catch (Exception e) { e.printStackTrace(); } } "	1	0	1	0	1	0
@Override public void onSubscribe(Disposable s) { DisposableHelper.setOnce(this.s, s); } 	1	0	1	1	0	0
private void initializeViewContents() { for (int i = 0; i < option.visibleCount; i++) { CardContainerView container = containers.get(i); int adapterIndex = topIndex + i;  if (adapterIndex < adapter.getCount() - 1) { View view = adapter.getView(adapterIndex, container.getContentContainer().getChildAt(0), this); container.getContentContainer().addView(view); container.setDraggable(true); container.setVisibility(View.VISIBLE); } else { container.setDraggable(false); container.setVisibility(View.GONE); } } } 	1	0	1	1	0	0
"@Override protected void run() throws CommandException { Player player = playerSender();  if(MapItemManager.getCacheSize(player) <= 0) { info(I.t(""You have no remaining map."")); return; }  int givenMaps = MapItemManager.giveCache(player);  if(givenMaps == 0) { error(I.t(""Your inventory is full ! Make some space before requesting the remaining maps."")); } else { info(I.tn(""There is {0} map remaining."", ""There are {0} maps remaining."", MapItemManager.getCacheSize(player))); } } "	0	0	1	1	1	0
@Override public InternalMessage acceptLocalMessage(InternalMessage internalMessage) { return this._protocolServer.sendMessage(this.generateOutgoingMessage(internalMessage)); } 	1	0	1	1	0	0
@Override public Object getClientGuiElement(int ID, EntityPlayer player, World world, int x, int y, int z) { switch (ID) { case GuiID.GUI_Buhrimill: return new GuiBuhrimill(player.inventory, (TileBuhrimill) world.getTileEntity(x, y, z));  case GuiID.GUI_JadeBench: return new GuiJadeBench(player.inventory, (TileJadeBench) world.getTileEntity(x, y, z));  case GuiID.GUI_CookingBench: return new GuiCookingBench(player.inventory, (TileCookingBench) world.getTileEntity(x, y, z));  case GuiID.GUI_Sericulture_Farme: return new GuiSericultureFrame(player.inventory, (TileSericultureFrame) world.getTileEntity(x, y, z));  case GuiID.GUI_PotteryTable: return new GuiPotteryTable(player);  case GuiID.GUI_PotteryKiln: return new GuiPotteryKiln(player.inventory, (TilePotteryKiln) world.getTileEntity(x, y, z));  case GuiID.GUI_RedPacket: return new GuiRedPacket(player, player.inventory.getCurrentItem()); } return null; } 	1	0	1	0	1	0
@Override public Object getServerGuiElement(int ID, EntityPlayer player, World world, int x, int y, int z) { switch (ID) { case GuiID.GUI_Buhrimill: return new ContainerBuhrimill(player.inventory, (TileBuhrimill) world.getTileEntity(x, y, z));  case GuiID.GUI_JadeBench: return new ContainerJadeBench(player.inventory, (TileJadeBench) world.getTileEntity(x, y, z));  case GuiID.GUI_CookingBench: return new ContainerCookingBench(player.inventory, (TileCookingBench) world.getTileEntity(x, y, z));  case GuiID.GUI_Sericulture_Farme: return new ContainerSericultureFrame(player.inventory, (TileSericultureFrame) world.getTileEntity(x, y, z));  case GuiID.GUI_PotteryTable: return new ContainerPotteryTable(player);  case GuiID.GUI_PotteryKiln: return new ContainerPotteryKiln(player.inventory, (TilePotteryKiln) world.getTileEntity(x, y, z));  case GuiID.GUI_RedPacket: return new ContainerRedPacket(player, player.inventory.getCurrentItem()); } return null; } 	1	0	1	0	1	0
"@Override protected Void doInBackground(Void... params) {  // get location location = locationFinderHelper.getLastLocation();  // try to get information about a location try { GooglePlaces client = new GooglePlaces(googleBrowserApiKey); places = client.getNearbyPlaces(location.getLatitude(), location.getLongitude(), 500, 1, Param.name(""types"").value(""grocery_or_supermarket"")); } catch (Exception e) { //  e.printStackTrace(); }  // place was found if (places != null) { location.setName(places.get(0).getName()); } return null; } "	0	1	1	1	0	0
@Override void onUpdate() { Location loc = this.playerVelocity.get(getPlayer()); if (this.isActive.containsKey(getPlayer())) { for (Bat bat : this.bats.get(getPlayer())) { if (bat.isValid()) { Vector rand = new Vector((Math.random() - 0.5D) / 3.0D, (Math.random() - 0.5D) / 3.0D, (Math.random() - 0.5D) / 3.0D); bat.setVelocity(loc.getDirection().clone().multiply(0.5D).add(rand));  for (Player other : getPlayer().getWorld().getPlayers()) if (!other.equals(getPlayer()) && Core.getCustomPlayer(other).hasGadgetsEnabled() && hitPlayer(bat.getLocation(), other)) {  Vector v = bat.getLocation().getDirection(); v.normalize(); v.multiply(.4d); v.setY(v.getY() + 0.2d);  if (v.getY() > 7.5) v.setY(7.5);  if (other.isOnGround()) v.setY(v.getY() + 0.2d);  other.setFallDistance(0);  if (affectPlayers) MathUtils.applyVelocity(other, bat.getLocation().getDirection().add(new Vector(0, .4f, 0)));   bat.getWorld().playSound(bat.getLocation(), Sound.BAT_HURT, 1.0F, 1.0F); UtilParticles.display(Particles.SMOKE_NORMAL, bat.getLocation());  bat.remove(); } }  } } } 	1	1	1	0	1	0
"@Override public void action(String[] args, MessageReceivedEvent event) { String guildId = args[0]; String guildName = StringUtils.join(Arrays.copyOfRange(args, 1, args.length)); String stat = AirUtils.insetIntoBlacklist(guildId, guildName, event.getJDA().getSelfUser().getId());  if (!stat.isEmpty()) event.getChannel().sendMessage(AirUtils.embedMessage(""ERROR: "" + stat)).queue(); else event.getChannel().sendMessage(AirUtils.embedMessage(""Successfully added "" + guildName + "" to the whitelist"")).queue(); } "	0	0	1	1	1	0
"@Optional.Method(modid = ""IC2"") private static IElectricItemManager IC2_getManager(ItemStack itemStack) { Item item = itemStack.getItem(); if (item == null) { return null; } if (item instanceof ISpecialElectricItem) { return ((ISpecialElectricItem) item).getManager(itemStack); } if (item instanceof IElectricItem) { return ElectricItem.rawManager; } return ElectricItem.getBackupManager(itemStack); } "	1	0	1	0	1	0
"public Map<String, String> unequipItem(Item item) { double oldDamage = damage; for (EquipmentLocation key : equipment.keySet()) { if (equipment.get(key).equals(item)) { equipment.put(key, null); } } addItemToStorage(item); Map<String, String> result = new HashMap<String, String>(); if (item.containsProperty(""damage"")) { weapon = ""hands""; damage -= item.getProperty(""damage""); double diffDamage = damage - oldDamage; result.put(""damage"", String.valueOf(diffDamage)); } return result; } "	1	1	1	1	1	0
private static Pair<Polynomial.Term, Polynomial.Term> selectCandidateTerm(Polynomial lower, Polynomial upper) { for (int i = 0; i != lower.size(); ++i) { Polynomial.Term ith = lower.getOperand(i); Tuple<Expr> ithAtoms = ith.getAtoms(); if (ithAtoms.size() > 0) { for (int j = 0; j != upper.size(); ++j) { Polynomial.Term jth = lower.getOperand(j); Tuple<Expr> jthAtoms = jth.getAtoms(); if (jthAtoms.equals(ithAtoms)) { // FIXME: we should be selecting the lexiographically // least candidate here. return new Pair<>(ith, jth); } } } } // return null; } 	0	0	1	1	1	0
public void initParams(int x, int y) { //        layoutParams = new WindowManager.LayoutParams( //                WindowManager.LayoutParams.WRAP_CONTENT, //                WindowManager.LayoutParams.WRAP_CONTENT, //                WindowManager.LayoutParams.TYPE_TOAST, //                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, //                PixelFormat.TRANSLUCENT //        ); //        layoutParams.width = 100; //        layoutParams.height = 100; //        layoutParams.gravity = Gravity.BOTTOM | Gravity.RIGHT; layoutParams = new LayoutParams(); layoutParams.x = x; layoutParams.y = y - BubbleSizeDelete; if (defaultType == HEAD_TYPE_DELETE) { switchToDelete(); } } 	1	1	1	1	1	0
public boolean deposit(float amount) { if (getState() != State.CLOSED && amount > 0.0f) { balance = balance + amount - 0.50F; if (balance >= 0.0f) { setState(State.OPEN); } } return false; } 	1	0	1	0	1	0
public String getName() { return this.name; } 	1	0	1	1	0	0
"private void parseParameters() { Logger.info(""parseParams: "" + this.parameters); filters = new HashMap<String, List<String>>(); StringBuilder responseParameters = new StringBuilder("""");  for( String param : parameters.keySet() ) { List<String> values = parameters.get(param); if (!values.isEmpty()) { if( param.startsWith(""facet.in."") && values.get(0).length() > 0) { filters.put(param.replace(""facet.in."", """"), values); Logger.info("" facet in values: "" + values); } else if( param.startsWith(""facet.out."") && values.get(0).length() > 0) { filters.put(""-""+param.replace(""facet.out."", """"), values); Logger.info("" facet out values: "" + values); } else if( param.equals(""facet.sort"")  && values.get(0).length() > 0) { //				    filters.put(param, values); //					Logger.info("" facet other values: "" + values); } else if (param.equals(""facet.fields"")) { for (String value : values) { facets.add(value); if (StringUtils.isNotBlank(value)) { responseParameters.append(""&facet.fields="").append(value); } } } } }  if (parameters.get(""selectedResource"") != null) { Iterator<String> iterator = parameters.get(""selectedResource"").iterator(); while (iterator.hasNext()) { String selectedResource = iterator.next(); Logger.info(""selectedResource >>>"" + selectedResource); selectedResources.add(selectedResource); if (StringUtils.isNotBlank(selectedResource)) { responseParameters.append(""&selectedResource="").append(selectedResource); } } }  if (parameters.get(""exclude"") != null) { Iterator<String> iterator = parameters.get(""exclude"").iterator(); while (iterator.hasNext()) { String exclude = iterator.next(); Logger.info(""exclude >>>"" + exclude); excludes.add(exclude); if (StringUtils.isNotBlank(exclude)) { responseParameters.append(""&exclude="").append(exclude); } } }  if (parameters.get(""excludeHost"") != null) { Iterator<String> iterator = parameters.get(""excludeHost"").iterator(); while (iterator.hasNext()) { String excludeHost = iterator.next(); Logger.info(""excludeHost >>>"" + excludeHost); excludeHosts.add(excludeHost); if (StringUtils.isNotBlank(excludeHost)) { responseParameters.append(""&excludeHost="").append(excludeHost); } } }   // non facets  if (parameters.get(""year_start"") != null) { yearStart = parameters.get(""year_start"").get(0); } if (parameters.get(""year_end"") != null) { yearEnd = Integer.toString(Integer.parseInt(parameters.get(""year_end"").get(0)) + 1); } Logger.info(""Dates: "" + yearStart + "" "" + yearEnd);  if (parameters.get(""page"") != null) { page = Integer.parseInt(parameters.get(""page"").get(0)); } else { page = 1; } if (parameters.get(""sort"") != null) { sort = parameters.get(""sort"").get(0); if (StringUtils.isNotBlank(sort)) { Logger.debug(""sort: "" + sort); responseParameters.append(""&sort="").append(sort); } } if (parameters.get(""order"") != null) { order = parameters.get(""order"").get(0); if (StringUtils.isNotBlank(order)) { responseParameters.append(""&order="").append(order); } }  Logger.info(""datestart >>>> "" + parameters.get(""dateStart"")); if (parameters.get(""dateStart"") != null) { dateStart = parameters.get(""dateStart"").get(0).replace(""\"""", """"); Logger.info(""changing date: "" + dateStart); } if (parameters.get(""dateEnd"") != null) { dateEnd = parameters.get(""dateEnd"").get(0).replace(""\"""", """"); }  List<String> invert = this.parameters.get(""invert""); if (invert != null) { for (String inv : invert) { if (StringUtils.isNotEmpty(inv)) { responseParameters.append(""&invert="").append(inv); } } } Logger.info(""responseParameters: "" + responseParameters);  this.responseParameters += responseParameters.toString(); Logger.info(""parseParameters: "" + responseParameters); } "	1	0	1	1	0	0
public boolean solve() { if (!isPrepared) { prepare(); } finder = null; models.parallelStream().forEach(m -> { if (m.solve() && finisher.get() == 1) { finder = m; } }); return finder != null; } 	0	1	1	1	0	0
"@Override public void onAuthenticationCheckFinished(boolean result) { try { if (result) { // load account before requesting the information AccountService.getAccount(); Theme.setCrashData(""site"", AccountService.accountType.toString()); PrefManager.setForceSync(true); PrefManager.commitChanges(); Answers.getInstance().logLogin(new LoginEvent() .putMethod(AccountService.accountType.toString()) .putSuccess(true)); dialog.dismiss(); Intent goHome = new Intent(context, Home.class); startActivity(goHome); finish(); } else { dialog.dismiss(); if (MALApi.isNetworkAvailable(this)) Theme.Snackbar(this, R.string.toast_error_VerifyProblem); else Theme.Snackbar(this, R.string.toast_error_noConnectivity); } } catch (Exception e) { Theme.logTaskCrash(""FirstTimeInit"", ""onAuthenticationCheckFinished"", e); Answers.getInstance().logLogin(new LoginEvent() .putSuccess(false)); Theme.Snackbar(this, R.string.toast_error_VerifyProblem); } } "	0	1	1	0	1	0
"@SuppressWarnings(""deprecation"") public void remove(Event event){  updateStatus(); if(event.getStartDateTime()!=null){ int index=returnIndex(event.getStartDateTime().getTime().getYear()); year.get(index).getMonth(event.getStartDateTime().getTime().getMonth()).getDate(event.getStartDateTime().getTime().getDate()).deleteTask(event); } else{ floatingTasks.remove(event); } save(); } "	0	1	1	0	1	0
private Map<String, Object> extractTokenInformation(String token) { try { final Jwt jwt = JwtHelper.decode(token);  final Map<String, Object> map = objectMapper.parseMap(jwt.getClaims()); if (map.containsKey(EXP) && map.get(EXP) instanceof Integer) { Integer intValue = (Integer) map.get(EXP); map.put(EXP, new Long(intValue)); }  return map; } catch (RuntimeException mie) { return null; } } 	0	1	1	0	1	0
public Matrix quaternionToMatrix(Quaternion q){ Matrix m = new Matrix(4,4); float[] matrix = q.toMatrix();  for(int i = 0; i < 4; i++){ for(int j = 0; j < 4; j++){ m.set(i,j, matrix[i+j]); } }  return m; } 	1	1	1	1	1	0
"protected void initializeExtensionFunctions() throws XFormsComputeException { String functions = getXFormsAttribute(XFormsConstants.FUNCTIONS); if (functions != null && !functions.equals("""")) { //check for availability of extension functions... StringTokenizer tokenizer = new StringTokenizer(functions); while (tokenizer.hasMoreTokens()) { String qname = tokenizer.nextToken(); String prefix = """"; String localName; if (qname.indexOf("":"") == -1) { localName = qname; } else { prefix = qname.substring(0, qname.indexOf("":"")); localName = qname.substring(qname.indexOf("":"") + 1); String[] functionInfo = {""""}; } String namespaceURI = NamespaceResolver.getNamespaceURI(this.element, prefix); if (namespaceURI == null) namespaceURI = """"; FunctionLibrary functionLibrary = XPathCache.getFgXFormsFunctionLibrary(); if ((functionLibrary.getFunctionSignature(new StructuredQName(prefix, namespaceURI, localName), -1)) != null) { throw new XFormsComputeException(""Function '"" + localName + ""' cannot be found in Namespace: '"" + namespaceURI + ""'"", this.target, null); //                    Map<String, String> errorMsg = new HashMap<String, String>(); //                    errorMsg.put(""error-message"",""XFormsComputeException: Function '"" + localName + ""' cannot be found in Namespace: '"" + namespaceURI + ""'""); // //                    try { //                        container.dispatch(this.target,XFormsEventNames.COMPUTE_EXCEPTION,errorMsg); //                    } catch (XFormsException e) { //                        throw new XFormsComputeException(""XFormsComputeException: Function '"" + localName + ""' cannot be found in Namespace: '"" + namespaceURI + ""'"", this.target, null); //                    } } } }  } "	1	1	1	1	1	0
"public void fadeIn(final View view, final int delay, final long duration, String handlerName, Activity activity) { final AlphaAnimation fadeIn = new AlphaAnimation(0.0f, 1.0f);; view.setVisibility(View.INVISIBLE); PowerManager powerManager = (PowerManager) activity.getSystemService(POWER_SERVICE);  if (Build.VERSION.SDK_INT >= 21 && powerManager.isPowerSaveMode()) { // power save mode on if (duration > 0) { // delay, needs an handler Map<String, Handler> handlerCreator = new HashMap<>(); handlerCreator.put(handlerName, new Handler());  handlerCreator.get(handlerName).postDelayed(new Runnable() { @Override public void run() { view.setVisibility(View.VISIBLE);  Log.i(""AnimateHelper"", view.toString() + "" fade IN [VISIBLE] effect for 0ms with "" + String.valueOf(delay) + ""ms delay""); } }, delay); } else { view.setVisibility(View.VISIBLE); Log.i(""AnimateHelper"", view.toString() + "" fade IN effect to 1.0f for 0ms with no delay""); } } else { // normal fadeIn IN if (duration > 0) { // delay, needs an handler Map<String, Handler> handlerCreator = new HashMap<>(); handlerCreator.put(handlerName, new Handler());  handlerCreator.get(handlerName).postDelayed(new Runnable() { @Override public void run() { fadeIn.setDuration(duration); view.startAnimation(fadeIn); view.setVisibility(View.VISIBLE);  Log.i(""AnimateHelper"", view.toString() + "" fade IN effect for "" + String.valueOf(duration) + ""ms with "" + String.valueOf(delay) + ""ms delay""); } }, delay); } else { fadeIn.setDuration(duration); view.startAnimation(fadeIn); view.setVisibility(View.VISIBLE);  Log.i(""AnimateHelper"", view.toString() + "" fade IN effect for "" + String.valueOf(duration) + ""ms with no delay""); } } } "	1	0	1	1	0	0
private Report getReportWithPath(File path) { for (Report r : reports) { if (r.getPath().equals(path)) { return r; } } return null; } 	1	1	1	1	1	0
@Override public Certificate generateCredential(CertificateParameters params) { try{ KeyPair keyPair = keyGenerator.generateKeyPair(params.getKeyLength());  if (params.isSelfSigned()) { X509Certificate cert = signedCertificateGenerator.getSelfSigned(keyPair, params); String certPem = CertificateFormatter.pemOf(cert); String privatePem = CertificateFormatter.pemOf(keyPair.getPrivate()); return new Certificate(null, certPem, privatePem, null); } else { Certificate ca = certificateAuthorityService.findMostRecent(params.getCaName());  String caCertificate = ca.getCertificate();  X509Certificate cert = signedCertificateGenerator .getSignedByIssuer(keyPair, params, ca);  String certPem = CertificateFormatter.pemOf(cert); String privatePem = CertificateFormatter.pemOf(keyPair.getPrivate()); return new Certificate(caCertificate, certPem, privatePem, ca.getCaName()); } } catch (Exception e) { throw new RuntimeException(e); } } 	1	0	1	0	1	0
"@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View view = inflater.inflate(R.layout.fragment_pdf_creation, container, false); ButterKnife.bind(this, view);  reportSelectedDate = Calendar.getInstance(); String currentMonthYearStr = reportSelectedDate.get(Calendar.YEAR) +"".""+ (reportSelectedDate.get(Calendar.MONTH)+1) + ""."" + FIRST_DAY_OF_MONTH; try { Date currentMonthYear = new SimpleDateFormat(""yyyy.MM.dd"").parse(currentMonthYearStr); reportSelectedDate.setTime(currentMonthYear); } catch (ParseException e) { Log.w(""Wrong Date"", ""Report date is wrong!""); }  String currentMonthYear = new SimpleDateFormat(""MMM YYYY"").format(reportSelectedDate.getTime()); mGeneratePdfText.setText(currentMonthYear);  return view; } "	0	0	1	1	1	0
"public static WrappedRecipe getWrappedRecipe(IRecipe irecipe) { try { if (irecipe == null) return null; else if (irecipe instanceof ShapelessRecipes) { return new WrappedRecipe((ShapelessRecipes)irecipe); } else if (irecipe instanceof ShapedRecipes) { return new WrappedRecipe((ShapedRecipes)irecipe); } else if (irecipe instanceof ShapedOreRecipe) { return new WrappedRecipe((ShapedOreRecipe) irecipe); } else if (irecipe instanceof ShapelessOreRecipe) { return new WrappedRecipe((ShapelessOreRecipe) irecipe); } else if (irecipe instanceof RecipesArmorDyes || irecipe instanceof RecipeFireworks || irecipe instanceof RecipeBookCloning || irecipe instanceof RecipesMapCloning) { return null; } else if (RecipeHandler.getCompatHandler().isDisabled(irecipe)) { return null; }else if (RecipeHandler.getCompatHandler().hasHandler(irecipe.getClass())){ return RecipeHandler.getCompatHandler().getHandler(irecipe).getWrappedRecipe(irecipe); } else { if (irecipe.getRecipeOutput() != null) CraftingTableIV.instance.error(""ERROR FINDING HANDLER FOR RECIPE CLASS: "" + irecipe.toString()); else CraftingTableIV.instance.error(""ERROR: THE OUTPUT FOR THIS RECIPE IS NULL! "" + irecipe.toString()); return null; } } catch (NullPointerException e) { CraftingTableIV.instance.error(""Something went wrong while trying to acquire recipe ingredients!""); CraftingTableIV.instance.error(irecipe.toString()+"" with output ""+irecipe.getRecipeOutput().toString()); CraftingTableIV.instance.error(e); return null; } } "	0	1	1	1	0	0
"private void executeFunction(Game game, int id){  int otherId;  if (id == 0){otherId = 1;}else{otherId = 0;}  if(id == 1){ System.out.println(""Executing attack for player "" + id + "" ""+ this.command); }  switch(this.command){ case APPROACH: game.approach(id, otherId); break; case ATTACK: game.attack(id); break; case HEAL: game.heal(id, 20); break; case EVADE: game.evade(id, otherId); case DO_NOTHING: game.doNothing(id); break; case DEFEND: game.defend(id); break; default: game.doNothing(id); break; } } "	1	0	1	0	1	0
public Map nextTurn() { //If the game is not over, check to see if there is a stalemate condition if(!isGameOver()) { //TODO Will need to update this if we want more players boolean isStalemateForPlayer = isStalemateTurnForPlayer(PLAYER_ID); boolean isStalemateForOpponent = isStalemateTurnForPlayer(OPPONENT_ID);  if (isStalemateForPlayer && isStalemateForOpponent) { _isStalemate = true; this._isGameOver = true; } else if (this._numberOfTurnsCompleted > MAX_TURN_LIMIT) { _isStalemate = true; this._isGameOver = true; }  this._numberOfTurnsCompleted++; } return this._entityMap.getMap(); } 	1	0	1	1	0	0
private ArrayList<Task> findUndoneTasks(ArrayList<Task> tasks) { ArrayList<Task> tasksToDisplay = new ArrayList<Task>(); for(Task task: tasks){ if(task.isDone()){ tasksToDisplay.add(task); } } return tasksToDisplay; } 	1	1	1	0	1	0
private void getClubEvents(Club club) { ArrayList<Event> events = club.getEvents();  for (int iter = 0; iter < events.length(); iter++) { events.get(iter).printEventInfo(); } } 	0	0	1	1	0	0
public static String replaceSkip(String input, char c, char r, int skip) { StringBuilder output = new StringBuilder(input); int current = input.indexOf(c, 0); while(current < input.length() && current != -1) { if (skip > 0) skip--; else { output.setCharAt(current, r); current++; } current = input.indexOf(c, current); } return output.toString(); } 	1	0	1	1	0	0
public static <C> Match<C> match(final C ctx) {  return pred -> new Match.IntroCase<>() {  @Override public <T> Match.Then<C, T> then(final Function<? super C, ? extends T> then) { return Expressive.<C, T> toUnresolvedCase(ctx, pred).then(then); } }; } 	0	0	1	1	0	0
private static <T> When.Case<T> toWhenCase(final Match.Case<?, T> theCase) {  return then -> new When.Then<>() {  @Override public T none(final Supplier<? extends T> none) { return theCase.then(then).none(none); }  @Override public When.Case<T> when(final BooleanSupplier when) { return toWhenCase(theCase.then(then).when(when)); } }; } 	0	0	1	1	0	0
public static <T> SIter<T> $(final Iterator<? extends T> iter) { if (iter == null) { return null; }  if (iter instanceof SIter) { return cast(iter); }  return new SIter<>() {  @Override public boolean hasNext() { return iter.hasNext(); }  @Override public T next() { return iter.next(); }  @Override public void remove() { iter.remove(); } }; } 	1	0	1	1	0	0
"protected String doExecute() throws Exception { this.contentVO = ContentController.getContentController().getContentVOWithId(this.contentId); contentVersionVOList = ContentVersionController.getContentVersionController().getSmallestContentVersionVOList(contentId);  return ""success""; } "	0	1	1	0	1	0
public void setColor(final RTObject colorArg) { assert colorArg instanceof RTColorObject; final Color color = ((RTColorObject)colorArg).color();  if(candraw()){ back_.g.setColor(color); } } 	1	0	1	1	0	0
"@Override public String toString() { return date.toString(DateTimeFormat.forPattern(""dd/mm/yyyy HH:mm:ss"")) + "" - value : "" + value; } "	0	0	1	1	1	0
"@Override public void update(News news) { if (news.getId() > 0) { String sql = ""UPDATE NEWS SET TITLE = ?, PUBLICATION_DATE = ?, CUT = ?, CONTENT = ? WHERE ID = ?""; jdbcTemplate.update(sql, news.getTitle(), news.getDate(), news.getBrief(), news.getContent(), news.getId()); } else { String sql = ""INSERT INTO NEWS (TITLE, CUT, CONTENT) VALUES (?, ?, ?)""; jdbcTemplate.update(sql, news.getTitle(), news.getBrief(), news.getContent()); } } "	1	0	1	1	0	0
"@Override public OIndexCursor executeIndexQuery(OCommandContext iContext, OIndex<?> index, List<Object> keyParams, boolean ascSortOrder) { OIndexCursor cursor; Object key; key = keyParams.get(0); Object indexParam = key; if (key instanceof Map) { ((Map) key).put(SpatialQueryBuilderAbstract.GEO_FILTER, SpatialQueryBuilderOverlap.NAME); } else if (key instanceof ODocument) { Map<String, Object> newKey = new HashMap<>(); newKey.put(SpatialQueryBuilderAbstract.GEO_FILTER, SpatialQueryBuilderOverlap.NAME); newKey.put(""shape"", key); indexParam = newKey; } Object indexResult = index.get(indexParam); if (indexResult == null || indexResult instanceof OIdentifiable) cursor = new OIndexCursorSingleValue((OIdentifiable) indexResult, new OSpatialCompositeKey(keyParams)); else cursor = new OIndexCursorCollectionValue(((Collection<OIdentifiable>) indexResult).iterator(), new OSpatialCompositeKey( keyParams));  return cursor; } "	1	0	1	0	1	0
"@Test public void shouldReturnAllSpecimensSortedByDateCollected() throws Exception { MockHttpServletRequest request = request(RequestMethod.GET, getURI()); request.addParameter(""name"", ""BACTERIOLOGY CONCEPT SET""); request.addParameter(""patientUuid"", ""a76e8d23-0c38-408c-b2a8-ea6670f01b51""); request.addParameter(""v"", ""full""); MockHttpServletResponse response = handle(request); SimpleObject object = deserialize(response);  List results = (List) object.get(""results""); assertEquals(2, results.size()); Specimen firstSpecimen = new ObjectMapper().convertValue(results.get(0), Specimen.class); Specimen secondSpecimen = new ObjectMapper().convertValue(results.get(1), Specimen.class);  SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd""); String firstSpecimenDate = dateFormat.format(firstSpecimen.getDateCollected()); String secondSpecimenDate = dateFormat.format(secondSpecimen.getDateCollected());  assertEquals(""2008-08-20"", firstSpecimenDate); assertEquals(""2008-08-19"", secondSpecimenDate); } "	0	0	1	1	1	0
public void requestRefresh() { refreshRequestEvent.onNext(null); } 	1	0	1	0	0	0
"public void refreshBundle(String productName) { String productURl =  applicationURL + productName +"".html""; driver.get(productURl); waitForLoad(); WebElement eleTitle = driver.findElement(By.xpath(""//*[@id='product_addtocart_form']/em/em/div[1]/h1"")); wait.until(ExpectedConditions.presenceOfElementLocated((By.xpath(""//*[@id='product_addtocart_form']/em/em/div[1]/h1""))));  wait.until(ExpectedConditions.elementToBeClickable(bundleProduct1)); int trial = 0; try { while ( trial < 5) { bundleProduct1.click(); String bundle1_product_id = bundle2.getAttribute(""data-set-item""); System.out.println(""bundle1_product_id is"" +bundle1_product_id); if (bundle1_product_id !=null) break; trial++; System.out.println(""trial no "" +trial); } } catch (Exception e){ e.printStackTrace(); }  wait.until(ExpectedConditions.elementToBeClickable(bundleProduct2)); bundleProduct2.click(); wait.until(ExpectedConditions.elementToBeClickable(bundleProduct3)); bundleProduct3.click(); String bundle1_product_id = bundle1.getAttribute(""data-set-item""); String bundle2_product_id = bundle2.getAttribute(""data-set-item""); String bundle3_product_id = bundle3.getAttribute(""data-set-item"");  driver.navigate().refresh(); waitForLoad(); WebElement new_bundle2 = driver.findElement(By.xpath(""//*[@id='bundle-step-745']"")); String newBundle2_product_id = new_bundle2.getAttribute(""data-set-item""); System.out.println(newBundle2_product_id); //will remove print after few runs  WebElement new_bundle3 = driver.findElement(By.xpath(""//*[@id='bundle-step-746']"")); String newBundle3_product_id = new_bundle3.getAttribute(""data-set-item""); System.out.println(newBundle3_product_id);  WebElement new_bundle1 = driver.findElement(By.xpath(""//*[@id='bundle-step-744']"")); String newBundle1_product_id = new_bundle1.getAttribute(""data-set-item""); System.out.println(newBundle1_product_id);  Assert.assertEquals(bundle1_product_id,newBundle1_product_id); Assert.assertEquals(bundle2_product_id,newBundle2_product_id); Assert.assertEquals(bundle3_product_id,newBundle3_product_id); } "	0	0	1	1	0	0
public void setView (final String view) { this.view = view.toLowerCase(Locale.getDefault()); } 	1	0	1	0	1	0
private void setOnEditorActionListener() { textContent.setOnEditorActionListener(new TextView.OnEditorActionListener() { @Override public boolean onEditorAction(TextView v, int actionId, KeyEvent event) { if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_ACTION_NEXT || actionId == EditorInfo.IME_ACTION_GO || (event != null && event.getKeyCode() == KeyEvent.KEYCODE_ENTER)) { int id = getNextFocusForwardId(); if(id != View.NO_ID) { View nextView = v.getRootView().findViewById(id); if(nextView.getVisibility() == VISIBLE) { if (!(nextView instanceof TextField)) { if (nextView instanceof PropertyField) { ((PropertyField) nextView).requestFocusForContentView(nextView); } else { nextView.requestFocus(); } hideKeyboard(v); } else { requestFocusForContentView(nextView); } } else { hideKeyboard(v); } } else { hideKeyboard(v); } return true; } else { hideKeyboard(v); return false; } } }); } 	1	1	1	0	1	0
"private SimulationReport generateSimulationReport(SimulationReport simReport, Map<String, NodeSimulationData> simulationData, FilePath workspace, String simID, List<SimulationConfig> simConfig) throws IOException, InterruptedException { logger.println(""[PuppetGatling] - Generating simulation report data...""); FilePath osData = new FilePath(workspace, ""puppet-gatling/"" + simID + ""/important_data.csv""); LineIterator it = IOUtils.lineIterator(osData.read(), ""UTF-8"");  simReport.setName(simID); simReport.setNodeSimulationData(simulationData);  try{ while(it.hasNext()){ String line = it.nextLine(); System.out.println(""PARSING LINE: '"" + line + ""'""); String[] tokens = line.split("",""); String key = tokens[0]; String osStatistic = tokens[1]; if (key.equals(""memorysize"")){ simReport.setMemSize(osStatistic); } else if (key.equals(""processor0"")){ simReport.setSpeedOfCPU(osStatistic); } else if (key.equals(""processorcount"")){ simReport.setNumCPUs(osStatistic); } else if (key.equals(""puppetversion"")){ simReport.setPuppetVersion(osStatistic); } else if (key.equals(""beaker-version"")){ simReport.setBeakerVersion(osStatistic); } else if (key.equals(""gatling-puppet-load-test"")){ simReport.setGatlingPuppetLoadTestSHA(osStatistic); } else if (key.equals(""blockdevice_sda_size"")){ simReport.setDiskSizeBytes(osStatistic); } } } finally{ it.close(); logger.println(""[PuppetGatling] - OS Data saved.""); }  FilePath facterDataPath = new FilePath(workspace, ""puppet-gatling/"" + simID + ""/gatling_sim_data.csv""); String facterData = IOUtils.toString(facterDataPath.read(), ""UTF-8""); simReport.setFacterData(facterData); logger.println(""[PuppetGatling] - Facter data saved."");  // Get data from file in puppet-gatlin/ text file, generated by ruby // place the rest of the data in there  simReport.setSimulationConfig(simConfig);  // do calculations simReport = calculateDataPerNode(simReport);  simReport = calculateDataPerSimulation(simReport);  return simReport; } "	0	1	1	0	0	0
"private void updateLatestProduced() { Map<String, Date> m = new HashMap<String, Date>(); for (Entry<String, Topic> entry : m_metaService.getTopics().entrySet()) { Topic topic = entry.getValue(); if (topic.getStorageType().equals(Storage.MYSQL)) { String topicName = topic.getName(); Date current = m_latestProduced.get(topicName) == null ? new Date(0) : m_latestProduced.get(topicName); Date latest = new Date(current.getTime()); for (Partition partition : m_metaService.findPartitionsByTopic(topicName)) { try { MessagePriority msgPriority = m_dao.getLatestProduced(topicName, partition.getId(), PortalConstants.PRIORITY_TRUE); Date datePriority = msgPriority == null ? latest : msgPriority.getCreationDate(); MessagePriority msgNonPriority = m_dao.getLatestProduced(topicName, partition.getId(), PortalConstants.PRIORITY_FALSE);  Date dateNonPriority = msgNonPriority == null ? latest : msgNonPriority.getCreationDate(); latest = datePriority.after(dateNonPriority) ? datePriority : dateNonPriority; } catch (DalException e) { log.warn(""Find latest produced failed. {}:{}"", topicName, partition.getId()); continue; } current = latest.after(current) ? latest : current; } m.put(topicName, current); } } m_latestProduced = m; } "	1	1	1	0	1	0
public static void resetAlwaysSend(final WeakReference<Context> weakContext) { Context context = null; if (weakContext != null) { context = weakContext.get();  if (context != null) { final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context); prefs.edit().remove(ALWAYS_SEND_KEY).commit(); } } } 	0	1	1	0	1	0
"@Override public String receive(Combat c, int damage, Result modifier, Character attacker) { if(modifier==Result.normal){ //TODO this is kind of terrible (deal does the effect...) Clothing article = getSelf().strip(ClothingSlot.top, c); return ""You lose sight of ""+getSelf().name()+"" for just a moment, but then see her moving behind you in your peripheral vision. You quickly spin around and grab her, "" + ""but you find yourself holding just her ""+article.getName()+"". Wait... what the fuck?""; } else{ //TODO this is kind of terrible (deal does the effect...) Clothing article = getSelf().strip(ClothingSlot.top, c); return ""You lose sight of ""+getSelf().name()+"" for just a moment, but then see her moving behind you in your peripheral vision. You quickly spin around and grab her, "" + ""but you find yourself holding just her ""+article.getName()+"". Wait... what the fuck?""; } } "	0	0	1	1	1	0
@Override protected void onDestroy() { SL.get(this, GlobalHandlerService.class).removeListener(this); super.onStop(); } 	1	1	1	1	1	0
"public boolean valueIgnorePublic(ResourceValue value1, Type type1, ResourceValue value2, Type type2) { if (value1 == null && value2 == null) { return true; } if ((value1 == null && value2 != null) || (value1 != null && value2 == null)) { return false; } //for idx.xml if (type.getName().equals(""id"")) { if ((value1.getDataType() == ResValue.ResType.STRING && value2.getDataType() == ResValue.ResType.INT_BOOLEAN) || (value1.getDataType() == ResValue.ResType.INT_BOOLEAN && value1.getDataType() == ResValue.ResType.STRING)) { return true; } }  if (value1.getSize() != value2.getSize()) { return false; } if (value1.getDataType() != value2.getDataType()) { return false; } //if it is reference value if (value1 instanceof ResourceValue.ReferenceResourceValue && value2 instanceof ResourceValue.ReferenceResourceValue) { String name1 = ParseUtils.getResourceNameById(((ResourceValue.ReferenceResourceValue) value1).getReferenceResourceId(), type1.getResourceTable()); String name2 = ParseUtils.getResourceNameById(((ResourceValue.ReferenceResourceValue) value2).getReferenceResourceId(), type2.getResourceTable()); return name1.equals(name2);  } return (value1.toStringValue().equals(value2.toStringValue())); } "	0	1	1	0	0	0
"public static AlertPlayer getPlayer() { if(singletone == null) { Log.e(TAG,""getPlayer: Creating a new AlertPlayer""); singletone = new AlertPlayer(); } else { Log.e(""tag"",""getPlayer: Using existing AlertPlayer""); } return singletone; } "	0	0	1	1	1	0
public void shutdown() { server.stop(); for (DirectServiceInfo service : services.values()) { service.close(); } } 	1	0	1	0	1	0
"@SuppressWarnings(""unchecked"") public final List<CustomerTransaction> getCustomersTransactionList(String name) throws BasicException { return new PreparedSentence(s, ""SELECT TICKETS.TICKETID, PRODUCTS.NAME AS PNAME, "" + ""SUM(TICKETLINES.UNITS) AS UNITS, "" + ""SUM(TICKETLINES.UNITS * TICKETLINES.PRICE) AS AMOUNT, "" + ""SUM(TICKETLINES.UNITS * TICKETLINES.PRICE * (1.0 + TAXES.RATE)) AS TOTAL, "" + ""RECEIPTS.DATENEW, CUSTOMERS.NAME AS CNAME "" + ""FROM RECEIPTS, CUSTOMERS, TICKETS, TICKETLINES "" + ""LEFT OUTER JOIN PRODUCTS ON TICKETLINES.PRODUCT = PRODUCTS.ID "" + ""LEFT OUTER JOIN TAXES ON TICKETLINES.TAXID = TAXES.ID  "" + ""WHERE CUSTOMERS.ID = TICKETS.CUSTOMER AND TICKETLINES.PRODUCT = PRODUCTS.ID AND RECEIPTS.ID = TICKETS.ID AND TICKETS.ID = TICKETLINES.TICKET "" + ""AND CUSTOMERS.NAME = \"""" + name + ""\"" "" + ""GROUP BY CUSTOMERS.NAME, RECEIPTS.DATENEW, TICKETS.TICKETID, PRODUCTS.NAME, TICKETS.TICKETTYPE "" + ""ORDER BY RECEIPTS.DATENEW DESC, PRODUCTS.NAME"", null, CustomerTransaction.getSerializerRead()).list(); } "	0	0	1	1	0	0
"@Test public void makePartnerPurgeMatched() { user.createUser(""test"",""name"",""pw""); user.createUser(""test2"",""name2"",""pw""); user.createUser(""test3"",""name3"",""pw""); user.createAdmin(""tofu"",""adder"",""pw""); Gcode gcode = course.createCourse(""myCourse"",""tofu""); course.joinCourse(gcode,""test""); course.joinCourse(gcode,""test2""); course.joinCourse(gcode,""test3""); course.matchRequest(""test"",""test2"",gcode); course.matchRequest(""test2"",""test"",gcode); course.matchRequest(""test3"",""test2"",gcode); course.matchRequest(""test"",""test3"",gcode); course.partnerRequest(""test"",""test2"",gcode); course.partnerRequest(""test2"",""test"",gcode); assertFalse(course.getCourse(gcode).returnMatched().size() == 0); } "	0	1	1	0	1	0
@Test public void testCreateTables(){ store.createTSDRTables(); Mockito.verify(session,Mockito.atLeast(3)).execute(Mockito.anyString()); } 	1	1	1	1	1	0
@Override public void testRunFinished(Result result) throws Exception { this.testsFinished = true; completedTestResults = inProgressTestResults; } 	1	0	1	0	1	0
"private void emitPlace(int level, Place p) throws GedcomWriterException { emitTagWithOptionalValue(level, ""PLAC"", p.placeName); emitTagIfValueNotNull(level + 1, ""FORM"", p.placeFormat); emitSourceCitations(level + 1, p.citations); emitNotes(level + 1, p.notes); for (NameVariation nv : p.romanized) { if (g55()) { throw new GedcomWriterVersionDataMismatchException(""GEDCOM version is 5.5, but romanized variation was specified on place "" + p.placeName + "", which is only allowed in GEDCOM 5.5.1""); } emitTagWithRequiredValue(level + 1, ""ROMN"", nv.variation); emitTagIfValueNotNull(level + 2, ""TYPE"", nv.variationType); } for (NameVariation nv : p.phonetic) { if (g55()) { throw new GedcomWriterVersionDataMismatchException(""GEDCOM version is 5.5, but phonetic variation was specified on place "" + p.placeName + "", which is only allowed in GEDCOM 5.5.1""); } emitTagWithRequiredValue(level + 1, ""FONE"", nv.variation); emitTagIfValueNotNull(level + 2, ""TYPE"", nv.variationType); } if (p.latitude != null || p.longitude != null) { emitTag(level + 1, ""MAP""); emitTagWithRequiredValue(level + 2, ""LATI"", p.latitude); emitTagWithRequiredValue(level + 2, ""LONG"", p.longitude); if (g55()) { throw new GedcomWriterVersionDataMismatchException(""GEDCOM version is 5.5, but map coordinates were specified on place "" + p.placeName + "", which is only allowed in GEDCOM 5.5.1""); } } emitCustomTags(p.customTags); } "	1	0	1	0	1	0
private void emitIndividualAttributes(int level, List<IndividualAttribute> attributes) throws GedcomWriterException { for (IndividualAttribute a : attributes) { emitTagWithOptionalValueAndCustomSubtags(level, a.type.tag, a.description); emitEventDetail(level + 1, a); emitAddress(level + 1, a.address); emitPhoneNumbers(level + 1, a.phoneNumbers); emitWwwUrls(level + 1, a.wwwUrls); emitFaxNumbers(level + 1, a.faxNumbers); emitEmails(level + 1, a.emails); emitCustomTags(a.customTags); } } 	1	1	1	1	1	0
boolean handlesPop(Screen screen) { ScreenPopListener popListener = popListenerMap.get(screen); boolean handlesPop = popListener != null && popListener.onScreenPop(screen); if (handlesPop) { popListenerMap.remove(screen); } return handlesPop; } 	1	1	1	1	1	0
@Override public void refreshPolicyChains() { LinkedList<PolicyChain> newChains = new LinkedList<PolicyChain>(); for (RawPolicyChain rawChain : _currentRawChains) { _currentChains.add(generatePolicyChain(rawChain)); } if (newChains.equals(_currentChains)) return; _currentChains = newChains; _dpiController.updatePolicyChains(_currentChains); } 	1	0	1	0	1	0
"@Override public void onBindViewHolder(ViewHolder holder, int position) { EventModel eventModel = dataList.get(position);  switch (getItemViewType(position)){ case 1: boolean isNewDay = false; if(position!=0){ EventModel prevModel = dataList.get(position-1);   if(prevModel.startYear == eventModel.startYear && prevModel.startMonth == eventModel.startMonth && prevModel.startDay == eventModel.startDay){ isNewDay = false; } else{ isNewDay = true; } } else{ isNewDay = true; }  if (isNewDay){ //                    holder.viewIndicator.setVisibility(View.VISIBLE); holder.tvEventDayString.setVisibility(View.VISIBLE); holder.tvEventDay.setVisibility(View.VISIBLE); } else{ //                    holder.viewIndicator.setVisibility(View.INVISIBLE); holder.tvEventDayString.setVisibility(View.INVISIBLE); holder.tvEventDay.setVisibility(View.INVISIBLE); }  //주말 int dayOfDate = Util.dayOfDate(eventModel.startYear, eventModel.startMonth, eventModel.startDay); if (dayOfDate == 0 || dayOfDate == 6){ holder.tvEventDayString.setTextColor(Color.rgb(223,115,101)); } else{ holder.tvEventDayString.setTextColor(Color.rgb(111,111,111)); } holder.tvEventDayString.setText(Util.dayOfDate[dayOfDate]);  holder.tvEventDay.setText(String.valueOf(eventModel.startDay)); holder.tvEventSummary.setText(eventModel.summaryText); holder.tvEventDate.setText( StringFormmater.simpleRangeTimeFormat( eventModel.startDateTime, eventModel.endDateTime ) ); holder.tvEventLocation.setText(eventModel.location);  switch (eventModel.recoState){ case STATE_BEING_RECOMMEND: holder.cardRow.setCardBackgroundColor(Color.LTGRAY); holder.linearState.setVisibility(View.VISIBLE); holder.linearState.setBackgroundColor(Color.GRAY); holder.tvState.setText(""분\n석\n중""); break; case STATE_NOTHING_TO_RECOMMEND: holder.cardRow.setCardBackgroundColor(Color.LTGRAY); holder.linearState.setVisibility(View.GONE); break; case STATE_DONE_RECOMMEND: holder.cardRow.setCardBackgroundColor(Color.rgb(157,181,192)); holder.linearState.setVisibility(View.GONE); holder.linearState.setBackgroundColor(Color.BLACK); holder.tvState.setText(""추\n천\n됨""); break; } break; case 2: holder.tvYearMonth.setText( StringFormmater.yearMonthFormat( eventModel.startYear, eventModel.startMonth ) ); break; }  } "	0	1	1	0	0	0
protected DefaultDockerClient.Builder getBuilder() throws DockerCertificateException { return DefaultDockerClient.fromEnv() .readTimeoutMillis(NO_TIMEOUT); } 	0	1	1	1	0	0
@Override public void updateEntity() { super.updateEntity(); if (reloadRotation) { setRotation(ForgeDirection.getOrientation(worldObj.getBlockMetadata(xCoord, yCoord, zCoord))); reloadRotation = false; } ItemStack stack = inventory.getStackInSlot(0); if (stack == null) return; TileEntity outputTile = getTileFromDirection(getExitSide()); if (outputTile == null || !(outputTile instanceof IInjectable)) return; IInjectable injectable = (IInjectable) outputTile; if (!injectable.canInjectItems(getExitSide().getOpposite())) return; EnumColor color = null; for (int i = 1; i < inventory.getSizeInventory() - 1; i++) { if (areStacksEqual(inventory.getStackInSlot(i), stack)) { color = EnumColor.values()[15 - colors[1 + (i - 1) / 6]]; break; } } if (color == null) color = EnumColor.values()[15 - colors[0]]; injectable.injectItem(stack, true, getExitSide().getOpposite(), color); setInventorySlotContents(0, null); markDirty(); } 	1	1	1	1	1	0
"public static Iterable<Read> readSequentiallyForTesting(Objects storageClient, String storagePath, Contig contig, ReaderOptions options) throws IOException { Stopwatch timer = Stopwatch.createStarted(); SamReader samReader = BAMIO.openBAM(storageClient, storagePath, options.getStringency()); SAMRecordIterator iterator =  samReader.queryOverlapping(contig.referenceName, (int) contig.start + 1, (int) contig.end + 1); List<Read> reads = new ArrayList<Read>();  int recordsBeforeStart = 0; int recordsAfterEnd = 0; int mismatchedSequence = 0; int recordsProcessed = 0; Filter filter = setupFilter(options, contig.referenceName); while (iterator.hasNext()) { SAMRecord record = iterator.next(); final boolean passesFilter = passesFilter(record, filter, contig.referenceName);  if (!passesFilter) { mismatchedSequence++; continue; } if (record.getAlignmentStart() < contig.start) { recordsBeforeStart++; continue; } if (record.getAlignmentStart() >= contig.end) { recordsAfterEnd++; continue; } reads.add(ReadUtils.makeRead(record)); recordsProcessed++; } timer.stop(); LOG.info(""NON SHARDED: Processed "" + recordsProcessed + "" in "" + timer + "". Speed: "" + (recordsProcessed*1000)/timer.elapsed(TimeUnit.MILLISECONDS) + "" reads/sec"" + "", skipped other sequences "" + mismatchedSequence + "", skippedBefore "" + recordsBeforeStart + "", skipped after "" + recordsAfterEnd); return reads; } "	0	0	1	1	1	0
public void startEncode() { if (!mEncoder.start()) { return; }  mic = mEncoder.chooseAudioRecord(); if (mic == null) { return; }  if (mCameraView.startCamera() < 0) { mEncoder.stop(); return; } mCameraView.setFilter(filterType);  aworker = new Thread(new Runnable() { @Override public void run() { android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_AUDIO); startAudio(); } }); aloop = true; aworker.start(); } 	1	0	1	1	0	0
public int copyView(int viewId, String newName) throws ViewMetadataNotFoundException, ViewAlreadyExistsException, UnauthorizedAccessException { final DataDocument originalView = getViewMetadataWithoutAccessCheck(viewId); if (!securityFacade.checkForRead(originalView, getCurrentUser())) { return createView(newName, originalView.getString(LumeerConst.View.VIEW_TYPE_KEY), originalView.getDataDocument(LumeerConst.View.VIEW_CONFIGURATION_KEY)); } else { throw new UnauthorizedAccessException(); } } 	1	1	1	1	1	0
"protected String checkForCluster(final ORecord record, final String localNodeName, ODistributedConfiguration dbCfg) { if (!(record instanceof ODocument)) return null;  final ORecordId rid = (ORecordId) record.getIdentity(); if (rid.getClusterId() < 0) throw new IllegalArgumentException(""RID "" + rid + "" is not valid"");  String clusterName = getClusterNameByRID(rid);  String ownerNode = dbCfg.getClusterOwner(clusterName);  if (ownerNode.equals(localNodeName)) // NO CHANGES return null;  final OCluster cl = getClusterByName(clusterName); final ODatabaseDocumentInternal db = ODatabaseRecordThreadLocal.INSTANCE.get(); final OClass cls = db.getMetadata().getSchema().getClassByClusterId(cl.getId()); String newClusterName = null; if (cls != null) { OClusterSelectionStrategy clSel = cls.getClusterSelection(); if (!(clSel instanceof OLocalClusterWrapperStrategy)) { dManager.propagateSchemaChanges(db); clSel = cls.getClusterSelection(); }  if (!(clSel instanceof OLocalClusterWrapperStrategy)) throw new ODistributedException(""Cannot install local cluster strategy on class '"" + cls.getName() + ""'"");  // OLogManager.instance().info(this, // ""Local node '"" + localNodeName + ""' is not the owner for cluster '"" + clusterName + ""' (it is '"" + ownerNode // + ""'). Reloading distributed configuration for database '"" + getName() + ""'"");  dbCfg = ((OLocalClusterWrapperStrategy) clSel).readConfiguration();  newClusterName = getPhysicalClusterNameById(clSel.getCluster(cls, (ODocument) record));  OLogManager.instance().info(this, ""Local node '"" + localNodeName + ""' is not the owner for cluster '"" + clusterName + ""' (it is '"" + ownerNode + ""'). Switching to a valid cluster of the same class: '"" + newClusterName + ""'"");  ownerNode = dbCfg.getClusterOwner(newClusterName);  // FORCE THE RETRY OF THE OPERATION throw new ODistributedConfigurationChangedException( ""Local node '"" + localNodeName + ""' is not the owner for cluster '"" + clusterName + ""' (it is '"" + ownerNode + ""')""); }  if (!ownerNode.equals(localNodeName)) throw new ODistributedException(""Error on inserting into cluster '"" + clusterName + ""' where local node '"" + localNodeName + ""' is not the master of it, but it is '"" + ownerNode + ""'"");  // OVERWRITE CLUSTER clusterName = newClusterName; final ORecordId oldRID = rid.copy(); rid.setClusterId(db.getClusterIdByName(newClusterName));  OLogManager.instance().info(this, ""Reassigned local cluster '%s' to the record %s. New RID is %s"", newClusterName, oldRID, rid);  return clusterName; } "	1	0	1	0	0	0
"public static void deleteReview(Review r){ Map<String, Object> m = new HashMap<String,Object>(); m.put(""user"", r.getUser()); m.put(""location"", new ParseGeoPoint(r.getLocation().getCoordinates().getLat(),r.getLocation().getCoordinates().getLng()));  GetCallback<ParseObject> p = new GetCallback<ParseObject>() { @Override public void done(ParseObject arg0, ParseException arg1) { if(arg1==null){ DatabaseManager.deleteById(""Review"",(arg0.getObjectId() + """")); Map<String, Object> m = new HashMap<String,Object>(); m.put(""user"", arg0.getString(""user"")); m.put(""location"",arg0.getParseGeoPoint(""location"")); m.put(""rating"",arg0.getInt(""rating"")); m.put(""comment"",arg0.getString(""comment"")); m.put(""pined"",arg0.getInt(""pined"")); DatabaseManager.putValue(""HiddenReview"",m,new SaveCallback() {  @Override public void done(ParseException arg0) { // do nothing  } }); } //arg1.printStackTrace(); } }; DatabaseManager.getObjectByFields(""Review"",m,p); } "	1	0	1	0	1	0
"@Override public DeploymentResult operate(List priorOutputs) { updateTaskStatus(""Initializing Create Amazon ECS Server Group Operation..."");  TaskDefinition taskDefinition = registerTaskDefinition(); Service service = createService(taskDefinition); createAutoScalingGroup(service);  return getDeploymentResult(); } "	1	0	1	0	1	0
public void put(Integer key, Integer value) { if (sampleCode != -1) { sampleCode = key; } this.mapping.put(key, value); } 	1	0	1	1	0	0
"@Override public void onException(JMSException exception) { logger.error(""Error in the JMS connection. "" + exception.getMessage()); try { jmsServerConnector.closeAll(); } catch (JMSConnectorException e) { /* * No need to throw the exception, as JMS provider has already informed that there is a problem in the * connection */ logger.error(""Error while closing the connection, session or consumer after receiving the exception call "" + ""from jms provider. "", e); } try { jmsServerConnector.createMessageListener(); } catch (JMSConnectorException e) { JMSConnectionRetryHandler jmsConnectionRetryHandler = new JMSConnectionRetryHandler(jmsServerConnector, retryInterval, maxRetryCount); try { jmsConnectionRetryHandler.retry(); } catch (JMSConnectorException e1) { throw new RuntimeException( ""Cannot establish the connection again after retrying for "" + maxRetryCount + "" times"", e); }  } } "	0	0	1	1	0	0
"@Override public void perform() { this.referenceMat = FileImageReader.getInstance().imReadOpenCV(referenceImageName, ImageFileAttribute.FileType.JPEG);  this.referenceMat.convertTo(this.referenceMat,  CvType.CV_16UC(this.referenceMat.channels()));  int[] compareResultList = new int[this.warpedMatNames.length]; int threshold = ParameterConfig.getPrefsInt(ParameterConfig.FUSION_THRESHOLD_KEY, 0); for(int i = 0; i < this.warpedMatNames.length; i++) { Mat warpedMat = FileImageReader.getInstance().imReadOpenCV(this.warpedMatNames[i], ImageFileAttribute.FileType.JPEG);  Mat maskMat = ImageOperator.produceMask(warpedMat); warpedMat.convertTo(warpedMat, CvType.CV_16UC(warpedMat.channels()));  Log.e(TAG, ""Reference mat type: "" +CvType.typeToString(this.referenceMat.type()) + "" Warped mat type: "" +CvType.typeToString(warpedMat.type()) + "" Reference mat name: "" +this.referenceImageName+ "" Warped mat name: "" +this.warpedMatNames[i]); Core.add(this.referenceMat, warpedMat, warpedMat);  maskMat.release(); Imgproc.blur(warpedMat, warpedMat, new Size(3,3)); Mat gradX = new Mat(); Mat gradY = new Mat();  Imgproc.Sobel(warpedMat, gradX, CvType.CV_16S, 1, 0, 3, 1, 0, Core.BORDER_DEFAULT); Imgproc.Sobel(warpedMat, gradY, CvType.CV_16S, 0, 1, 3, 1, 0, Core.BORDER_DEFAULT);  gradX.convertTo(gradX, CvType.CV_8UC(gradX.channels())); gradY.convertTo(gradY, CvType.CV_8UC(gradX.channels())); Core.addWeighted(gradX, 0.5, gradY, 0.5, 0, warpedMat);  FileImageWriter.getInstance().saveMatrixToImage(warpedMat, ""sobel_grad_""+i, ImageFileAttribute.FileType.JPEG); //Core.absdiff(this.referenceMat, warpedMat, warpedMat); warpedMat = ImageOperator.produceMask(warpedMat, threshold); compareResultList[i] = Core.countNonZero(warpedMat);   warpedMat.release(); }  this.referenceMat.release(); assessWarpedImages(compareResultList, this.warpedMatNames); } "	1	0	1	1	0	0
"public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException { // sort out element name if (no) namespace in use String elementName = localName; if ("""".equals(elementName)) { elementName = qName; } if (elementName.equals(""richtext"")) { tf = new TextFragment(parentHandler.getDefaults()); tf.setFont(text.getFont()); tf.setFontColor(text.getFontColor()); tf.setFontSize(text.getFontSize()); tf.setHighlightColor(text.getHighlightColor()); tf.setBold(attributes.getValue(""bold"")); tf.setUnderlined(attributes.getValue(""underlined"")); tf.setItalicised(attributes.getValue(""italicised"")); tf.setSuperscript(attributes.getValue(""superscript"")); tf.setSubscript(attributes.getValue(""subscript"")); tf.setStrikethrough(attributes.getValue(""strikethrough"")); tf.setHighlightColor(attributes.getValue(""highlightcolor"")); tf.setFont(attributes.getValue(""font"")); tf.setFontColor(attributes.getValue(""fontcolor"")); tf.setFontSize(attributes.getValue(""fontsize"")); tf.setText(attributes.getValue(""text"")); tf.setUnderlined(attributes.getValue(""newline"")); } else { System.err.println(""Unknown start element encountered: "" + elementName); } } "	0	0	1	1	1	0
"@Test @Transactional public void testInt2865SqlReturnType() throws Exception { Message<String> testMessage = MessageBuilder.withPayload(""TEST"").setHeader(""FOO"", ""BAR"").build(); String messageId = testMessage.getHeaders().getId().toString(); String jsonMessage = new JsonOutboundMessageMapper().fromMessage(testMessage);  this.jdbcTemplate.update(""INSERT INTO json_message VALUES (?,?)"", messageId, jsonMessage);  this.getMessageChannel.send(new GenericMessage<String>(messageId)); Message<?> resultMessage = this.output2Channel.receive(1000); assertNotNull(resultMessage); Object resultPayload = resultMessage.getPayload(); assertTrue(resultPayload instanceof String); Message<?> message = new JsonInboundMessageMapper(String.class, new Jackson2JsonMessageParser()) .toMessage((String) resultPayload); assertEquals(testMessage.getPayload(), message.getPayload()); assertEquals(testMessage.getHeaders().get(""FOO""), message.getHeaders().get(""FOO"")); Mockito.verify(clobSqlReturnType).getTypeValue(Mockito.any(CallableStatement.class), Mockito.eq(2), Mockito.eq(JdbcTypesEnum.CLOB.getCode()), Mockito.eq((String) null)); } "	0	0	1	1	1	0
public Return validateQuantity(final Parameter _parameter) throws EFapsException { final Return ret = new Return(); final List<IWarning> warnings = new ArrayList<IWarning>();  final Type transType = Type.get(Long.parseLong(_parameter .getParameterValue(CIFormProducts.Products_TransactionInOutForm.type.name)));  final Instance productInst = Instance.get(_parameter .getParameterValue(CIFormProducts.Products_TransactionInOutForm.product.name)); final BigDecimal quantity = new BigDecimal( _parameter.getParameterValue(CIFormProducts.Products_TransactionAbstractForm.quantity.name)); final String storageId = _parameter.getParameterValue( CIFormProducts.Products_TransactionInOutForm.storage.name);  BigDecimal quantityInventory = BigDecimal.ZERO; BigDecimal quantityReserved = BigDecimal.ZERO;  final QueryBuilder quanInvent = new QueryBuilder(transType.isKindOf(CIProducts.TransactionIndividualAbstract) ? CIProducts.InventoryIndividual : CIProducts.Inventory); quanInvent.addWhereAttrEqValue(CIProducts.InventoryAbstract.Product, productInst); quanInvent.addWhereAttrEqValue(CIProducts.InventoryAbstract.Storage, storageId);  final MultiPrintQuery multiQuanti = quanInvent.getPrint(); multiQuanti.addAttribute(CIProducts.InventoryAbstract.Quantity); multiQuanti.addAttribute(CIProducts.InventoryAbstract.Reserved); multiQuanti.execute();  while (multiQuanti.next()) { quantityInventory = multiQuanti.<BigDecimal>getAttribute(CIProducts.Inventory.Quantity); if (multiQuanti.getAttribute(CIProducts.Inventory.Reserved) != null) { quantityReserved = multiQuanti.<BigDecimal>getAttribute(CIProducts.Inventory.Reserved); } }  final PrintQuery printProduct = new PrintQuery(productInst); printProduct.addAttribute(CIProducts.ProductAbstract.Name); printProduct.execute(); final String prodName = printProduct.<String>getAttribute(CIProducts.ProductAbstract.Name);  final PrintQuery printStorage = new PrintQuery(CIProducts.StorageAbstract.getType(), storageId); printStorage.addAttribute(CIProducts.StorageAbstract.Name); printStorage.execute();  final String storageName = printStorage.<String>getAttribute(CIProducts.StorageAbstract.Name);  if (transType.isCIType(CIProducts.TransactionReservationOutbound)) { if (quantityReserved.intValue() < quantity.intValue()) { warnings.add(new InsufficientStock4Transaction()); } else { warnings.add(new TransactionVerify().addObject( CIProducts.TransactionReservationOutbound.getType().getLabel(), quantity, prodName, storageName)); } } else if (transType.isCIType(CIProducts.TransactionIndividualOutbound)) { if (quantityInventory.intValue() < quantity.intValue()) { warnings.add(new InsufficientStock4Transaction()); } else { warnings.add(new TransactionVerify().addObject( CIProducts.TransactionIndividualOutbound.getType().getLabel(), quantity, prodName, storageName)); } } else if (transType.isCIType(CIProducts.TransactionInbound)) { warnings.add(new TransactionVerify().addObject( CIProducts.TransactionInbound.getType().getLabel(), quantity, prodName, storageName)); } else if (transType.isCIType(CIProducts.TransactionIndividualInbound)) { warnings.add(new TransactionVerify().addObject( CIProducts.TransactionIndividualInbound.getType().getLabel(), quantity, prodName, storageName)); } else if (quantityInventory.intValue() >= quantity.intValue() + quantityReserved.intValue()) { if (transType.isCIType(CIProducts.TransactionReservationInbound)) { warnings.add(new TransactionVerify().addObject( CIProducts.TransactionReservationInbound.getType().getLabel(), quantity, prodName, storageName)); } else if (transType.isCIType(CIProducts.TransactionOutbound)) { warnings.add(new TransactionVerify().addObject( CIProducts.TransactionOutbound.getType().getLabel(), quantity, prodName, storageName)); } } else { warnings.add(new InsufficientStock4Transaction()); } if (warnings.isEmpty()) { ret.put(ReturnValues.TRUE, true); } else { ret.put(ReturnValues.SNIPLETT, WarningUtil.getHtml4Warning(warnings).toString()); if (!WarningUtil.hasError(warnings)) { ret.put(ReturnValues.TRUE, true); } } return ret; } 	1	1	1	0	1	0
"@Override public void promptForPlatformVersionIfMissing(Server server, List<String> versions) { String version = promptForMissingValueWithOptions(""You can install the following versions of a platform:"", server.getVersion(), ""version"", versions); server.setVersion(version); } "	0	0	1	1	0	0
public Multiset<String> getIdentifiers(BaseConfig config) { if ( indentifiers == null ){ indentifiers = extractIdentifiers(this,config.getUseTeXIdentifiers(),config.getTexvcinfoUrl()); } return indentifiers; } 	0	0	1	1	1	0
private void loadFileList() { if ((ContextCompat.checkSelfPermission(parent, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED)) { mPath.mkdirs(); //TODO filtrare anche per config if (mPath.exists()) { FilenameFilter filter = new FilenameFilter() { public boolean accept(File dir, String filename) { File sel = new File(dir, filename); return filename.endsWith(DB_BACKUP_FORMAT) || sel.isDirectory(); } }; mFileList = mPath.list(filter); } else { mFileList = new String[0]; } } else { ActivityCompat.requestPermissions(parent, new String[]{android.Manifest.permission.WRITE_EXTERNAL_STORAGE}, Constants.MY_PERMISSIONS_WRITE_EXTERNAL_STORAGE); }  } 	1	1	1	0	1	0
"@Test(expected = IllegalArgumentException.class) public void createFirmwareLocationWithNullDomain() { new FirmwareLocation(null, ""/firmware"", ""zip""); } "	0	0	1	1	1	0
@Bean @Scope(value = ConfigurableBeanFactory.SCOPE_SINGLETON) public FirmwareLocation firmwareLocation() { return new FirmwareLocation(FIRMWARE_DOMAIN, FIRMWARE_PATH, FIRMWARE_FILE_EXTENSION); } 	1	0	1	0	1	0
private boolean checkCredentials(Users user, String password) { int hash = generateHash(password); if (user.getPassword() == hash) { return true; }  return false; } 	1	0	1	0	1	0
public Integer count() throws HibernateException { Long ur = (Long) this.clone.uniqueResult(); return new Integer(ur.intValue()); } 	0	1	1	1	0	0
private Importer runImport(UUID datasetKey) throws SQLException { Importer importer = build(iCfg, datasetKey, 2); importer.run(); return importer; } 	1	0	1	1	0	0
public ScreenImage userCapture() { return userCapture(promptMsg); } 	1	0	1	1	0	0
public int getLifeEssence() { if (ownerName == null || itemStack == null) return 0; return Math.min(maxOrbLP, ((EnergyBattery) itemStack.getItem()).getCurrentEssence(itemStack)); } 	0	1	1	1	0	0
@Override public void onSensorChanged(SensorEvent event) { if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) { float x, y; switch (mDisplay.getRotation()) { case Surface.ROTATION_90: x = -event.values[1]; y = event.values[0]; break; case Surface.ROTATION_270: x = event.values[1]; y = -event.values[0]; break; case Surface.ROTATION_180: x = -event.values[1]; y = -event.values[0]; break; default: x = event.values[0]; y = event.values[1]; break; } SDLActivity.onNativeAccel(-x / SensorManager.GRAVITY_EARTH, y / SensorManager.GRAVITY_EARTH, event.values[2] / SensorManager.GRAVITY_EARTH - 1); } } 	0	1	1	1	0	0
@Override public void onCreate(final Bundle savedInstanceState) { super.onCreate(savedInstanceState); Activity activity = getActivity(); defaultTimeCalibrationKey = activity.getString(R.string.default_time_calibration_key); defaultAmplitudeCalibrationKey = activity.getString(R.string.default_amplitude_calibration_key); defaultCaliperColorKey = activity.getString(R.string.default_caliper_color_key); defaultHighlightColorKey = activity.getString(R.string.default_highlight_color_key); defaultLineWidthKey = activity.getString(R.string.default_line_width_key); defaultCaliperColor = activity.getString(R.string.default_caliper_color); defaultHighlightColor = activity.getString(R.string.default_highlight_color); defaultLineWidth = activity.getString(R.string.default_line_width); boolean showStartImage = true; defaultTimeCalibration = activity.getString(R.string.default_time_calibration_value); String defaultAmplitudeCalibration = activity.getString(R.string.default_amplitude_calibration_value); addPreferencesFromResource(R.xml.settings);  Preference defaultTimeCalibrationPreference = findPreference(defaultTimeCalibrationKey); defaultTimeCalibrationPreference.setSummary(getPreferenceScreen() .getSharedPreferences() .getString(defaultTimeCalibrationKey, defaultTimeCalibration));  Preference defaultAmplitudeCalibrationPreference = findPreference(defaultAmplitudeCalibrationKey); defaultAmplitudeCalibrationPreference.setSummary(getPreferenceScreen() .getSharedPreferences() .getString(defaultAmplitudeCalibrationKey, defaultAmplitudeCalibration));  Preference defaultCaliperColorPreference = findPreference(defaultCaliperColorKey); String defaultCaliperColorValue = getPreferenceScreen() .getSharedPreferences() .getString(defaultCaliperColorKey, defaultCaliperColor); String defaultCaliperColorName = names.get(Integer.parseInt(defaultCaliperColorValue)); defaultCaliperColorPreference.setSummary(defaultCaliperColorName);  Preference defaultHighlightColorPreference = findPreference(defaultHighlightColorKey); String defaultHighlightColorValue = getPreferenceScreen() .getSharedPreferences() .getString(defaultHighlightColorKey, defaultHighlightColor); String defaultHighlightColorName = names.get(Integer.parseInt(defaultHighlightColorValue)); defaultHighlightColorPreference.setSummary(defaultHighlightColorName);  Preference defaultLineWidthPreference = findPreference(defaultLineWidthKey); String defaultLineWidthValue = getPreferenceScreen() .getSharedPreferences() .getString(defaultLineWidthKey, defaultLineWidth); String defaultLineWidthName = names.get(Integer.parseInt(defaultLineWidthValue)); defaultLineWidthPreference.setSummary(defaultLineWidthName);   } 	1	0	1	0	0	0
private  List<String>  buildResourceTags(String data) { return JsonDeserializer.deserialize(data, new TypeReference<List<String>>() {}); } 	0	0	1	1	0	0
"@Override public void releaseAcquiredTrigger(OperableTrigger trigger) {  TriggerKey triggerKey = trigger.getKey(); triggersByKey.lock(triggerKey, 2, TimeUnit.SECONDS); try { storeTriggerWrapper(newTriggerWrapper(trigger, WAITING)); } finally { try { triggersByKey.unlock(triggerKey); } catch (IllegalMonitorStateException ex) { LOG.warn(""Error unlocking since it is already released."", ex); } } } "	0	1	1	0	1	0
"public List<ResourceGroupEntity> loadGroupsForTypeNameExcludeSelected(String resourceTypeName, List<Integer> excludeGroups) {  List<ResourceGroupEntity> result = new ArrayList<ResourceGroupEntity>();  CriteriaBuilder cb = entityManager.getCriteriaBuilder(); CriteriaQuery<ResourceGroupEntity> q = cb.createQuery(ResourceGroupEntity.class); Root<ResourceGroupEntity> r = q.from(ResourceGroupEntity.class); Join<ResourceGroupEntity, ResourceEntity> resources = r.join(""resources""); r.fetch(""resources"", JoinType.LEFT); Predicate typeNamePred = cb.equal(resources.get(""resourceType"").get(""name""), resourceTypeName);  if (excludeGroups != null && !excludeGroups.isEmpty()) { Predicate excludePred = r.get(""id"").in(excludeGroups); q.where(cb.and(typeNamePred, cb.not(excludePred))); } else { q.where(typeNamePred); }  q.distinct(true);  result = entityManager.createQuery(q).getResultList();  return result; } "	1	0	1	0	1	0
@Before public void prepareTest() { final List<SpecificationItem> items = Arrays.asList(A, B, C, D, E, F, G, H, I, J, K1, K2, L, M1, M2, N); final Tracer tracer = new Tracer(new SpecificationItemCollection(items)); this.trace = tracer.trace(); } 	1	0	1	0	0	0
@Override public boolean deleteSurroundingText(int beforeLength, int afterLength) { final boolean result = super.deleteSurroundingText(beforeLength, afterLength); updateEditingState(); return result; } 	1	0	1	0	1	0
@Override public boolean setSelection(int start, int end) { final boolean result = super.setSelection(start, end); updateEditingState(); return result; } 	1	0	1	0	1	0
private boolean jj_3R_69() { if (jj_scan_token(LBRACE)) return true; Token xsp; while (true) { xsp = jj_scanpos; if (jj_3R_93()) { jj_scanpos = xsp; break; } } if (jj_scan_token(RBRACE)) return true; return false; } 	0	0	1	1	1	0
public E getShortestPath(T fromElement, T toElement){  Node<T> from = new Node<>(); from.element = fromElement; Node<T> to = new Node<>(); to.element = toElement;   from.f = 0; from.g = 0; from.h = getHeuristic(from, to);      // generate neighbours List<Node<T>> neighbours = getNeighbours(from);  //returning node Node<E> result = null; //loop through neighbors for (Node neighbour : neighbours) {  if (neighbour.equals(to)) { //return result return (E) neighbour.element; }  // calculate functions neighbour.g = getCost(from, neighbour); neighbour.h = getHeuristic(neighbour, to); neighbour.f = neighbour.g + neighbour.h;  // Return The moving neighbor min(f(x)) if (result == null) result = neighbour; else if (result.f < neighbour.f) result = neighbour; }  return result.element; } 	0	1	1	1	0	0
public void clear(){ this._buildInternalArray(DEFAULT_CAPACITY); } 	1	0	1	0	0	0
"public static void handleDrops(LivingDropsEvent evt) { String entityName = evt.getEntity().getName(); String entityClassName = evt.getEntity().getClass().getSimpleName(); LogHelper.debug(""Processing drops for '"" + entityName + ""' ('"" + entityClassName + ""') from damageType '"" + evt.getSource().getDamageType() + ""'."");  for(UUID id : activeHandlers) { DropHandler handler = handlers.get(id);  // If we don't have a handler, or the handler doesn't match: if(handler == null || (!handler.isMatch(entityName)) && !handler.isMatch(entityClassName)) continue;  // Check if we're replacing drops, and deal with it: if(handler.isReplace() || 0 < handler.getRemovals().length) { // If we're replacing everything, and not excluding items, just clear it all if(handler.isReplace() && (handler.getExcludes() == null || handler.getExcludes().length <= 0)) { evt.getDrops().clear(); } else { // Otherwise, sort through it for (Iterator<EntityItem> iterator = evt.getDrops().iterator(); iterator.hasNext(); ) { EntityItem drop = iterator.next(); ItemStack item = drop.getEntityItem();  boolean remove = handler.isReplace();  // See if we should remove it: for (ItemStack removedItem : handler.getRemovals()) { if (!item.isItemEqualIgnoreDurability(removedItem)) continue;  remove = true; break; }  // If we're removing, see if we should exclude it: if(remove) { for (ItemStack excludedItem : handler.getExcludes()) { if (!item.isItemEqualIgnoreDurability(excludedItem)) continue;  remove = false; break; } }  // If we can should remove this, then do so: if(remove) iterator.remove(); } } }  // Now, actually calculate out our drop rates... Random rand = evt.getEntity().getEntityWorld().rand; for(MobDrop drop : handler.getDrops()) { String damageType = drop.getDamageType();  // If we're checking damage type, and it's not equal: if(damageType != null && !damageType.equals(evt.getSource().getDamageType())) continue;  if(drop.getKilledWith() != null) { // If we can't get a base entity off this... if(!EntityLivingBase.class.isAssignableFrom(evt.getSource().getEntity().getClass())) continue;  EntityLivingBase entity = (EntityLivingBase) evt.getSource().getEntity(); ItemStack heldEquipment = entity.getHeldItemMainhand();  // Make sure we have held equipment and that it's right: if(heldEquipment == null || !heldEquipment.isItemEqualIgnoreDurability(drop.getKilledWith())) continue; }  double dr = rand.nextDouble();  // If we rolled higher than the chance, move on: if(drop.getChance() < dr) continue;  int min = drop.getMin(); int max = drop.getMax();  // Figure out how many to give: int qty; if(min != max) { int delta = Math.abs(drop.getMax() - drop.getMin()); qty = rand.nextInt(delta) + min; } else { qty = min; }  // Do the drop! ItemStack dropStack = ItemStack.copyItemStack(drop.getWhat());  // Update the stack size: dropStack.stackSize = qty + Math.round(evt.getLootingLevel() * drop.getLootingMultiplier());  evt.getDrops().add( new EntityItem( evt.getEntity().getEntityWorld(), evt.getEntity().posX, evt.getEntity().posY, evt.getEntity().posZ, dropStack)); } } } "	1	1	1	0	1	0
public static boolean isChunkTicking(WorldServer world, BlockPos pos){ if(!world.isBlockLoaded(pos, false)){ return false; }  if(world.getPersistentChunks().isEmpty() && world.playerEntities.isEmpty()){ try{ if(WORLD_LOADING_TIMER.getInt(world) >= 300){ return false; } }catch(IllegalArgumentException | IllegalAccessException e){ Main.logger.catching(e); return false; } } return true; } 	1	0	1	1	0	0
final void destroy() { mIsBeingDestroyed = true;  for (ChildControllerTransaction child : mChildControllers) { child.controller.destroy(); }  if (!mAttached) { removeViewReference(); } } 	1	0	1	0	1	0
public static Failure_class[] createFailureClass(Object[][] array){ arrayOfFailureClasses = new Failure_class[array.length]; for(int i=1; i < array.length; i++){ Failure_class fc = new Failure_class(); fc.setDescription(array[i][1].toString()); fc.setFailure_class(Integer.parseInt(array[i][0].toString())); arrayOfFailureClasses[i] = fc; } return arrayOfFailureClasses; } 	1	0	1	1	0	0
"private void openConfiguration(Integer position) { try { URL location = getClass().getClassLoader().getResource(""/dashboard_configuration_ui.fxml""); // System.out.println(location);todo: ELIA why is this the location? final FXMLLoader fxmlLoader = new FXMLLoader(location); final Parent root1 = (Parent) fxmlLoader.load(); final Stage stage = new Stage(); ConfigurationController controller = fxmlLoader.getController(); controller.SetCallback(() -> updateTile(controller.getChosenType(), controller.getChosenPath(), position)); stage.setScene(new Scene(root1)); stage.show(); } catch (final Exception $) { // TODO: handle error System.out.println(""Oops...""); $.printStackTrace(); }  } "	0	0	1	1	1	0
"@RequestMapping(value = ""/"", method = RequestMethod.GET) public List<URL> index() throws MalformedURLException {  List<URL> urls = new ArrayList<>();  urls.add(new URL(""http://localhost:8080/halogens"")); urls.add(new URL(""http://localhost:8080/neutrons"")); urls.add(new URL(""http://localhost:8080/weight/50""));  return urls; } "	1	0	1	1	0	0
"@Test public void testMapArrayKey() throws Exception { MapArrayKey m = new MapArrayKey(); m.content = new LinkedHashMap<Object[], String>(); Object[] arrayA = new Object[2]; arrayA[0] = new Point(1, 2); arrayA[1] = new Point(10, 20); m.content.put(arrayA, ""foo""); Object[] arrayB = new Object[2]; arrayB[0] = new Point(3, 4); arrayB[1] = new Point(30, 40); m.content.put(arrayB, ""bar""); String json = TestUtil.getJsonString(m); MapArrayKey x = (MapArrayKey) TestUtil.readJsonObject(json);  Iterator<Map.Entry<Object[], String>> i = x.content.entrySet().iterator(); Map.Entry<Object[], String> entry = i.next();  assertEquals(""foo"", entry.getValue()); arrayA = entry.getKey(); assertEquals(new Point(1, 2), arrayA[0]); assertEquals(new Point(10, 20), arrayA[1]);  entry = i.next(); assertEquals(""bar"", entry.getValue()); arrayB = entry.getKey(); assertEquals(new Point(3, 4), arrayB[0]); assertEquals(new Point(30, 40), arrayB[1]); } "	1	1	1	0	1	0
private String getExpression(String dataObjectAlias, String dataObjectVariable, String bindingContextVariable, String labelAttr, Set<String> converterDeclarations) { String labelExpression = null; PropertyBindInfo binding = getObjectDataBinding(labelAttr, null); if (binding != null) { labelExpression = binding.getDataObjectReadExpression(dataObjectVariable); String converterDeclaration = binding.getConverterDeclaration(); if (converterDeclaration != null) { converterDeclarations.add(converterDeclaration); } } else { ExpressionDataBinding expressionBinding = getExpressionDataBinding(labelAttr, null); if (expressionBinding != null) { labelExpression = expressionBinding.getExpression(bindingContextVariable, dataObjectVariable, dataObjectAlias); // TODO converters } else { labelExpression = getDeclaredMessage(labelAttr); } } return labelExpression; } 	0	1	1	0	1	0
public static void deviceUpdateLogic(IDeviceCreateRequest request, Device target) throws SiteWhereException { // Can not update the hardware id on a device. if ((request.getHardwareId() != null) && (!request.getHardwareId().equals(target.getHardwareId()))) { throw new SiteWhereSystemException(ErrorCode.DeviceHardwareIdCanNotBeChanged, ErrorLevel.ERROR, HttpServletResponse.SC_BAD_REQUEST); } if (request.getSiteToken() != null) { // Can not change the site for an assigned device. if (target.getAssignmentToken() != null) { if (!target.getSiteToken().equals(request.getSiteToken())) { throw new SiteWhereSystemException(ErrorCode.DeviceSiteCanNotBeChangedIfAssigned, ErrorLevel.ERROR, HttpServletResponse.SC_BAD_REQUEST); } } target.setSiteToken(request.getSiteToken()); } if (request.getSpecificationToken() != null) { target.setSpecificationToken(request.getSpecificationToken()); } if (request.isRemoveParentHardwareId()) { target.setParentHardwareId(null); } if (request.getParentHardwareId() != null) { target.setParentHardwareId(request.getParentHardwareId()); } if (request.getDeviceElementMappings() != null) { List<DeviceElementMapping> mappings = new ArrayList<DeviceElementMapping>(); for (IDeviceElementMapping mapping : request.getDeviceElementMappings()) { mappings.add(DeviceElementMapping.copy(mapping)); } target.setDeviceElementMappings(mappings); } if (request.getComments() != null) { target.setComments(request.getComments()); } if (request.getStatus() != null) { target.setStatus(request.getStatus()); } if ((request.getMetadata() != null) && (request.getMetadata().size() > 0)) { target.getMetadata().clear(); MetadataProvider.copy(request, target); } SiteWherePersistence.setUpdatedEntityMetadata(target); } 	1	0	1	0	1	0
public void endTransaction() { Iterator i = this.colorTable.keySet().iterator(); while (i.hasNext()) { final UUID uuid  = (UUID) i.next(); if (! this.uuidSet.contains(uuid)) { final Color color = this.colorTable.get(uuid); this.availableColors.add(color); i.remove(); } } } 	1	0	1	1	0	0
@Override public double getTurtleY() { return turtleState.penX; } 	0	0	1	1	0	0
private void initMemorizationView() { getEntryWithPos(0); } 	1	0	1	0	0	0
private Set<Url> transformTwitterEntitiesUrls(List<UrlEntity> urls) { Set<Url> myUrls = new LinkedHashSet<Url>(); for (UrlEntity url : urls) { String display = url.getDisplayUrl(); String expanded = url.getExpandedUrl(); String urlStr = url.getUrl(); int[] indices = url.getIndices(); Url myUrlEntity = new Url(display, expanded, urlStr, indices); myUrls.add(myUrlEntity); } return myUrls; } 	1	0	1	0	1	0
@Override public void init(final ServletConfig config) throws ServletException { this.servletConfig = config;  } 	1	0	1	0	1	0
public int getMaxSeparationInterval(){ return this.inPortInfo.getMinSeparationInterval(); } 	1	0	1	1	0	0
"@Test public void should_map_entity_to_service_counterpart() throws Exception { long previousFireTime = DATE_FORMAT.parse(PREVIOUS_FIRE_TIME).getTime(); long nextFireTime = DATE_FORMAT.parse(NEXT_FIRE_TIME).getTime();  JobUnit expected = mJobUnitMapper.transform(mJobUnitEntity, DATE_FORMAT);  assertThat(expected.getId(), is(1)); assertThat(expected.getVersion(), is(100)); assertThat(expected.getLabel(), is(""label"")); assertThat(expected.getDescription(), is(""description"")); assertThat(expected.getReportUri(), is(""/my/uri"")); assertThat(expected.getOwner().toString(), is(""jasperadmin|organization_1"")); assertThat(expected.getState().toString(), is(""NORMAL"")); assertThat(expected.getPreviousFireTime().getTime(), is(previousFireTime)); assertThat(expected.getNextFireTime().getTime(), is(nextFireTime)); } "	1	0	1	1	0	0
private boolean wonGrid(int o, byte[] grid) { byte player = grid[o]; int x = o % 3; int y = o / 3;  //center if (x == 1 && y == 1) { for (int i = 0; i < 2; i++) if (check(i, 0, grid, player) && check(2 - i, 2, grid, player)) return true; return check(2, 1, grid, player) && check(0, 1, grid, player); }  //corners if (x % 2 == 0 && y % 2 == 0) return (check(2 - x, y, grid, player) && check(1, y, grid, player)) || (check(x, 2 - y, grid, player) && check(x, 1, grid, player)) || (check(1, 1, grid, player) && check(2 - x, 2 - y, grid, player));  //horizontal sides if (x % 2 == 0) return (check(x, 0, grid, player) && check(x, 2, grid, player)) || (check(1, 1, grid, player) && check(2 - x, 2 - y, grid, player));  //vertical sides if (y % 2 == 0) return (check(0, y, grid, player) && check(2, y, grid, player)) || (check(1, 1, grid, player) && check(1, 2 - y, grid, player));  throw new AssertionError(); } 	1	0	1	1	0	0
public boolean inRangeOfView(View view, MotionEvent ev) { int[] location = new int[2]; if (view.getVisibility()!=View.VISIBLE){ return false; } view.getLocationOnScreen(location); int x = location[0]; int y = location[1]; if (ev.getRawX() < x || ev.getRawX() > (x + view.getWidth()) || ev.getRawY() < y || ev.getRawY() > (y + view.getHeight())) { return false; } return true; } 	1	1	1	1	0	0
@Test public void shouldMoveToNext() { providedHasCount(3);  final boolean success = mTested.moveToNext();  assertTrue(success); assertEquals(1, mTested.getPosition()); } 	0	0	1	1	1	0
@Override public boolean isAfterLast() { return mPosition >= getCount(); } 	1	0	1	1	0	0
@Override public void draw(@NonNull Canvas canvas) { canvas.drawRoundRect(bounds, radiusX, radiusY, paint); } 	1	0	1	0	1	0
private void _initTextToSpeech() { //Todo:init TextToSpeech textToSpeech = new TextToSpeech(this.getApplicationContext(), new TextToSpeech.OnInitListener() { @Override public void onInit(int status) { if (status != TextToSpeech.ERROR) { textToSpeech.setLanguage(Locale.UK); } } }); } 	0	1	1	0	1	0
"public static <T> HashMap<String, Object> createDtoMap(T dto, Class<T> dtoClass) {  // Dtoのフィールド名と値のMapを作成 String regex = ""get(([A-Z][a-zA-Z\\d]*))""; Pattern ptm = Pattern.compile(regex);  // Dtoのgetterからフィールド名を取得 Method[] methods = dtoClass.getDeclaredMethods(); HashMap<String, Object> dtoMap = new HashMap<>();  for (Method method : methods) { // getterを抽出 Matcher mat = ptm.matcher(method.getName()); if (mat.find()) { String getter = method.getName(); if (!getter.contains(""Class"")) { String fieldName = mat.group(1); fieldName = fieldName.substring(0, 1).toLowerCase() + fieldName.substring(1);  Object value = null; try { value = method.invoke(dto, null); } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) { logger.info(""リフレクション失敗"", e); } dtoMap.put(fieldName, value); } } }  for (Entry<String, Object> entry : dtoMap.entrySet()) { logger.info(""DtoMap内容[{}]:{}"", entry.getKey(), entry.getValue()); } return dtoMap; } "	1	0	1	1	0	0
public Set<FPlayer> getFPlayers() { // return a shallow copy of the FPlayer list, to prevent tampering and concurrency issues Set<FPlayer> ret = new HashSet(fplayers); return ret; } 	1	0	1	0	1	0
"public void setDate(int year, int month, int day, int viewSel) { if(dateCheck(year, month, day, viewSel)) { dateRecord.set(viewSel + YEAR, year); dateRecord.set(viewSel + MONTH, month); dateRecord.set(viewSel + DAY, day);  StringBuilder data = new StringBuilder(""""); data.append(String.format(""%02d"",month + 1)).append(""/"").append(String.format(""%02d"", day)).append(""/"").append(year);   if (viewSel == DATE) { dateField.setText(data.toString()); } else if (viewSel == DEADLINE) { deadlineField.setText(data.toString()); } return; } Toast.makeText(getActivity().getApplicationContext(), ""Invalid Input: 'Deadline' must be after 'Date'"" , Toast.LENGTH_SHORT).show(); } "	0	0	1	1	0	0
private ArrayList<Task> findTasksBetweenDates(ArrayList<Task> tasks) { ArrayList<Task> tasksToDisplay = new ArrayList<Task>(); LocalDateTime startDateTime = this.getStartDateTime(); LocalDateTime endDateTime = this.getStartDateTime();  for (Task task : tasks) {  if (task.isDone()) { continue; } else { TaskType taskType = task.getTaskType(); if (taskType == TaskType.FLOATING) { tasksToDisplay.add(task);  } else if (taskType == TaskType.DEADLINE) { if (task.getEndDateTime().isAfter(startDateTime) && task.getEndDateTime().isBefore(endDateTime)) { tasksToDisplay.add(task); } } else { assert taskType != null; if (task.getStartDateTime().isBefore(endDateTime) || task.getEndDateTime().isAfter(startDateTime)) { tasksToDisplay.add(task); } }  } } return tasksToDisplay; } 	1	1	1	1	0	0
public static NativeStore<Void> lazyNativeStore(long capacity) { return of(capacity, false); } 	1	0	1	0	1	0
"@Override protected void initSettings(GameSettings settings) { settings.setWidth(800); settings.setHeight(600); settings.setTitle(""ParticleTextureSample""); settings.setVersion(""0.1""); settings.setFullScreen(false); settings.setIntroEnabled(false); settings.setMenuEnabled(false); settings.setCloseConfirmation(false); settings.setProfilingEnabled(false); settings.setApplicationMode(ApplicationMode.DEVELOPER); } "	1	1	1	1	0	0
"@Override public void onWrite(BatchExcelRow item, ResourceContext context) throws Exception { super.onWrite(item, context);  /** * In case we have an indexed item, we must set the current index with the one of the current item. */ if (item.getIndex() != null) { context.setCurrentIndex(item.getIndex().intValue()); }  /** * Either we have reached the end of the current file, or we don't have any any resource yet, then we must * create a new file. */ if (context.getCurrentIndex() > maxItemCount + rowsToSkip || !context.containsResource()) { String suffix = item.getDate().format(DateTimeFormatter.ofPattern(""yyyyMMdd"")); File file = ExcelFileUtils.getFile(directory.getFile(), filePrefix, suffix, fileExtension);  context.changeResource(new FileSystemResource(file)); } } "	1	0	1	1	0	0
"protected static void endWithStatus(final HttpServerResponse response, final int status, Map<CharSequence, CharSequence> headers, final String detail, final String contentType) {  Objects.requireNonNull(response); response.setStatusCode(HTTP_BAD_REQUEST); if (headers != null) { for (Entry<CharSequence, CharSequence> header : headers.entrySet()) { response.putHeader(header.getKey(), header.getValue()); } } if (detail != null) { if (contentType != null) { response.putHeader(HttpHeaders.CONTENT_TYPE, contentType); } else { response.putHeader(HttpHeaders.CONTENT_TYPE, ""text/plain""); } response.end(detail); } else { response.end(); } } "	1	1	1	0	1	0
"public static String convert2KAST_Type(ITypeBinding jType) { String type = jType.toString(); if (jType.isPrimitive()) { type = type.equals(""boolean"") ? ""bool"" : type; } else { type = ""class ."" + type; } return type; } "	1	0	1	0	1	0
@Override public Timestamp getTimestamp(String columnName) throws SQLException { int index = findColumn(columnName) +1; return getTimestamp(index); } 	1	0	1	0	1	0
private void splitFtasks() { for (int i = 0; i < floatingTasks.size(); i++) { if (!floatingTasks.get(i).getDone()) { undoneFloatingTasks.add(floatingTasks.get(i)); } else { doneFloatingTasks.add(floatingTasks.get(i)); } } } 	0	0	1	1	1	0
"private String deleteCourseFromDatabaseInfo(String id) throws SQLException { SqlHelper helper = new SqlHelper(); String result = """"; String sqlString = ""DELETE FROM `course_info` WHERE `id`=""; sqlString += ""'"" + id + ""'""; CachedRowSet data = new CachedRowSetImpl(); result = helper.excuteSql(sqlString, data); data.close(); return result; } "	0	1	1	1	0	0
"public CommandResult execute(CommandSource src, CommandContext ctx) throws CommandException { if (src instanceof Player) { Player player = (Player) src; Nation nation = DataHandler.getNationOfPlayer(player.getUniqueId()); if (nation == null) { src.sendMessage(Text.of(TextColors.RED, LanguageHandler.CI)); return CommandResult.success(); } if (!nation.isStaff(player.getUniqueId())) { src.sendMessage(Text.of(TextColors.RED, LanguageHandler.CK)); return CommandResult.success(); } if (!ctx.<String>getOne(""name"").isPresent()) { src.sendMessage(Text.of(TextColors.YELLOW, ""/z create <name>"")); return CommandResult.success(); } String zoneName = ctx.<String>getOne(""name"").get(); if (!zoneName.matches(""[a-zA-Z0-9]{1,30\\}"")) { src.sendMessage(Text.of(TextColors.RED, LanguageHandler.FY .replaceAll(""\\{MIN\\}"", ""1"") .replaceAll(""\\{MAX\\}"", ""30""))); return CommandResult.success(); } UUID owner = null; if (ctx.<String>getOne(""owner"").isPresent()) { owner = DataHandler.getPlayerUUID(ctx.<String>getOne(""owner"").get()); if (owner == null) { src.sendMessage(Text.of(TextColors.RED, LanguageHandler.CC)); return CommandResult.success(); } } Point a = DataHandler.getFirstPoint(player.getUniqueId()); Point b = DataHandler.getSecondPoint(player.getUniqueId()); if (a == null || b == null) { src.sendMessage(Text.of(TextColors.RED, LanguageHandler.EA)); return CommandResult.success(); } Rect rect = new Rect(a, b); if (!nation.getRegion().isInside(rect)) { src.sendMessage(Text.of(TextColors.RED, LanguageHandler.HG)); return CommandResult.success(); } for (Zone zone : nation.getZones().values()) { if (zone.getName().equalsIgnoreCase(zoneName)) { src.sendMessage(Text.of(TextColors.RED, LanguageHandler.GR)); return CommandResult.success(); } if (rect.intersects(zone.getRect())) { src.sendMessage(Text.of(TextColors.RED, LanguageHandler.GS)); return CommandResult.success(); } } Zone zone = new Zone(UUID.randomUUID(), zoneName, rect, owner); for (Entry<String, Boolean> e : nation.getFlags().entrySet()) { zone.setFlag(e.getKey(), e.getValue()); } nation.addZone(zone); DataHandler.saveNation(nation.getUUID()); src.sendMessage(Text.of(TextColors.GREEN, LanguageHandler.GT.replaceAll(""\\{ZONE\\}"", zoneName))); Sponge.getServer().getPlayer(owner).ifPresent( p -> p.sendMessage(Text.of(TextColors.AQUA, LanguageHandler.GU.replaceAll(""\\{ZONE\\}"", zoneName)))); } else { src.sendMessage(Text.of(TextColors.RED, LanguageHandler.CA)); } return CommandResult.success(); } "	0	0	1	1	0	0
"public static void main(String args[]) {    Scanner in = new Scanner(System.in);  Integer factoryCount = in.nextInt(); // the number of factories  FactoryManager manager = new FactoryManager(factoryCount); // main manager  Integer count = 0;  Integer linkCount = in.nextInt(); // the number of links between factories for (Integer i = 0; i < linkCount; i++) { count++; Integer factory1 = in.nextInt(); Integer factory2 = in.nextInt(); Integer distance = in.nextInt();   if(manager.getFactories().size() == 0){ //create first 2 Factories and add the entries Factory newFactory = new Factory(factory1); newFactory.addMapEntry(factory2, distance);  Factory newFactory2 = new Factory(factory2); newFactory2.addMapEntry(factory1, distance);  manager.addFactory(newFactory); manager.addFactory(newFactory2); }  boolean c = false;  for(Factory f: manager.getFactories()){ //if this factory exists but the entry doesn't, add the entry if(f.getID() == factory1){ c = true; if(f.getDistances().get(factory2) == null){ f.addMapEntry(factory2, distance); } }  }  //if this Factory (ID = factory1) does not exist if(!c){ //create the Factory and add the entry Factory newFactory = new Factory(factory1); if(manager.getFactoryByID(factory2)==null){ Factory newFactory2 = new Factory(factory2); newFactory2.addMapEntry(factory1, distance); manager.addFactory(newFactory2);  } newFactory.addMapEntry(factory2, distance); manager.addFactory(newFactory); } }  //fill in entries for(Factory f: manager.getFactories()){ for (Map.Entry<Integer, Integer> entry : f.getDistances().entrySet()){ for(Factory fp: manager.getFactories()){ if(fp.getID() == entry.getKey()){ fp.addMapEntry(f.getID(), entry.getValue()); } } } }   // game loop while (true) {  manager.clearTroops();  Integer entityCount = in.nextInt(); // the number of entities for (Integer i = 0; i < entityCount; i++) { Integer entityId = in.nextInt(); String entityType = in.next(); Integer arg1 = in.nextInt(); Integer arg2 = in.nextInt(); Integer arg3 = in.nextInt(); Integer arg4 = in.nextInt(); Integer arg5 = in.nextInt();  if(entityType.equals(""FACTORY"")){ for(Factory f : manager.getFactories()){ if(f.getID() == entityId){ f.setC(arg1); f.setCC(arg2); f.setProduction(arg3); } } }  if(entityType.equals(""TROOP"")){ Troop t = new Troop(arg1, arg2, arg3, arg4, arg5); manager.addTroop(t); }    } String test = """"; for(Factory f : manager.getFactories()){ test += f.getID() + "" ""+f.getDistances()+""     ""; } manager.Action(); } } "	0	0	1	1	1	0
static List<CustomExample> removeLongDerivations(List<CustomExample> dataset, int numDerivationsLimit) { List<CustomExample> prunedDataset = new ArrayList<>(); for (CustomExample ex : dataset) { if (ex.alternativeFormulas.size() > numDerivationsLimit) { List<Formula> derivations = ex.alternativeFormulas; derivations.sort(new DerivationLengthComparator()); ex.alternativeFormulas = derivations.subList(0, numDerivationsLimit - 1); } prunedDataset.add(ex); } return prunedDataset; } 	1	1	1	1	0	0
@Override public View getView(int position, View convertView, ViewGroup parent) { int viewType = getItemViewType(position); View v = null; if (viewType == VIEW_TYPE_NAV) { v = getNavView((String) getItem(position), position, convertView, parent); } else if (viewType == VIEW_TYPE_SECTION_DIVIDER) { v = getSectionDividerView(convertView, parent); } else { v = getFeedView(position - getSubscriptionOffset(), convertView, parent); } if (v != null && viewType != VIEW_TYPE_SECTION_DIVIDER) { TextView txtvTitle = (TextView) v.findViewById(R.id.txtvTitle); if (position == itemAccess.getSelectedItemIndex()) { txtvTitle.setTypeface(null, Typeface.BOLD); } else { txtvTitle.setTypeface(null, Typeface.NORMAL); } } return v; } 	1	0	1	0	1	0
void populateNativeUnitProxyCompletionItem(CompletionItem completionItem, SymbolInfo symbolInfo) { completionItem.setDetail(ItemResolverConstants.FUNCTION_TYPE); completionItem.setSortText(ItemResolverConstants.PRIORITY_6); } 	0	1	1	1	0	0
"public void addMessage(String message) { this.messages.add(new HistoryEntry(msgIndex, new Timestamp(new Date() .getTime()), "" "" + message)); msgIndex++; } "	1	0	1	0	0	0
@Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) { mSelectedOrganization = position != 0 ? mUserScopes.get(position) : null; mActivity.invalidateFragments();  } 	1	0	1	1	0	0
@Override public boolean onCreateOptionsMenu(Menu menu) { if (isClosedOrder()) return false;  MenuInflater inflater = getMenuInflater(); inflater.inflate(R.menu.menu_order, menu); return true; } 	0	0	1	1	0	0
"@Override public void applyPluginForLocation(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, ModelAndView mv, Set<Long> locations) { try { JsonObject context = (JsonObject) mv.getModel().get(""context""); int pageNumber = getIntPramater(httpServletRequest, HttpParameters.PAGE_NUMBER_PARAM, HttpParameters.PAGE_NUMBER_DEFAULT_VALUE); int pageSize = getIntSettingPramater(""blog.size"", 6); System.out.println(""Getting blog for "" + locations + "", page number = "" + pageNumber + "", pageSize="" + pageSize); List<Blog> blogList = blogService.getAllLocationPublishedBlog(locations, pageNumber, pageSize); JsonArray jsonArray = convertBlogList(blogList); context.add(name, jsonArray); } catch (Exception ex) { ex.printStackTrace(); } } "	1	0	1	1	0	0
"@SuppressWarnings(""resource"") public static IndexSearcher getSearcher(SearcherFactory searcherFactory, IndexReader reader) throws IOException { boolean success = false; final IndexSearcher searcher; try { searcher = searcherFactory.newSearcher(reader); // Modification for Gerrit: Allow searcherFactory to transitively wrap the // provided reader. IndexReader unwrapped = searcher.getIndexReader(); while (true) { if (unwrapped == reader) { break; } else if (unwrapped instanceof FilterDirectoryReader) { unwrapped = ((FilterDirectoryReader) unwrapped).getDelegate(); } else if (unwrapped instanceof FilterLeafReader) { unwrapped = ((FilterLeafReader) unwrapped).getDelegate(); } else { break; } }  if (unwrapped != reader) { throw new IllegalStateException( ""SearcherFactory must wrap the provided reader (got "" + searcher.getIndexReader() + "" but expected "" + reader + "")""); } success = true; } finally { if (!success) { reader.decRef(); } } return searcher; } "	1	0	1	1	0	0
"private String readablePlace(Integer num) { if (num.equals(11) || num.equals(12) || num.equals(13)) return num + ""th""; String place = num.toString(); switch (num % 10) { case 1: place = ""&e"" + num + ""st""; break; case 2: place = ""&6"" + num + ""nd""; break; case 3: place = ""&c"" + num + ""rd""; break; default: place = num + ""th""; break; } return place; } "	0	1	1	0	1	0
public JsonResponse<? extends T1Entity> getMeta() { JsonResponse<? extends T1Entity> jsonResponse; StringBuffer path = reportService.getMetaUri(); String finalPath = tOneService.constructReportingUrl(path); String response = this.connection.get(finalPath, this.getUser()); jsonResponse = reportService.parseMetaResponse(response); return jsonResponse; } 	0	1	1	0	1	0
@Override public void memberAttributeChanged(MemberAttributeEvent memberAttributeEvent) { if (!endpoint.isAlive()) { return; }  MemberImpl member = (MemberImpl) memberAttributeEvent.getMember(); String uuid = member.getUuid(); MemberAttributeOperationType op = memberAttributeEvent.getOperationType(); String key = memberAttributeEvent.getKey(); Object value = memberAttributeEvent.getValue(); MemberAttributeChange memberAttributeChange = new MemberAttributeChange(uuid, op, key, value); ClientMessage eventMessage = MemberAttributeChangeResultParameters.encode(member, memberAttributeChange); sendClientMessage(endpoint.getUuid(), eventMessage); } 	1	0	1	0	1	0
"private void executeScript(String script, AccessConfiguration accessConfiguration) { try { QueryManager.executeScript(script, accessConfiguration, true, true, true, false); } catch (DBMSException ex) { if (ex.getMessage().contains(""ERROR: function bigint_skolem(text) does not exist"") || ex.getMessage().contains(""ERROR: function double_skolem(text) does not exist"")) { logger.warn(""Some functions are missing in the current C3p0 thread. Retrying...""); executeScript(script, accessConfiguration); return; } throw ex; } } "	1	0	1	1	0	0
@Override public int hashCode() { return imdbId.hashCode(); } 	0	0	1	1	1	0
"@Override public List<Song> findByDuration(Integer duration){ if (duration != null && duration.equals("""")) { Query<Song> query = this.currentSession.createQuery(""from Song where duration=:n"", Song.class); query.setParameter(""n"", duration); return query.getResultList(); } else { throw new IllegalArgumentException(""the 'duration' param for search an song can not be null or empty.""); } } "	1	0	1	1	0	0
public static boolean isPlayerOwner(EntityPlayer player, TurretBase base) { return (base.getOwner().equals(player.getUniqueID().toString()) || (ConfigHandler.offlineModeSupport && base.getOwnerName().equals(player.getDisplayName()))); } 	0	1	1	0	0	0
"private Optional<TempBlockMeta> createBlockMetaNoLock(long userId, long blockId, BlockStoreLocation location, long initialBlockSize) throws IOException { Optional<TempBlockMeta> optTempBlock = mAllocator.allocateBlock(userId, blockId, initialBlockSize, location); if (!optTempBlock.isPresent()) { // Not enough space in this block store, let's try to free some space. if (freeSpaceNoLock(userId, initialBlockSize, location)) { LOG.error(""Cannot free {} bytes space in {}"", initialBlockSize, location); return Optional.absent(); } optTempBlock = mAllocator.allocateBlock(userId, blockId, initialBlockSize, location); Preconditions.checkState(optTempBlock.isPresent(), ""Cannot allocate block {}:"", blockId); } // Add allocated temp block to metadata manager mMetaManager.addTempBlockMeta(optTempBlock.get()); return optTempBlock; } "	1	0	1	1	0	0
"@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View root = inflater.inflate(R.layout.repos_fragment, container, false); mPullRefreshListView = (PullToRefreshListView) root.findViewById(R.id.pull_refresh_list); mEmptyView = (TextView) root.findViewById(android.R.id.empty); mListContainer =  root.findViewById(R.id.listContainer); mErrorText = (TextView)root.findViewById(R.id.error_message); mProgressContainer = root.findViewById(R.id.progressContainer);  // Set a listener to be invoked when the list should be refreshed. mPullRefreshListView.setOnRefreshListener(new OnRefreshListener<ListView>() { @Override public void onRefresh(PullToRefreshBase<ListView> refreshView) { String label = DateUtils.formatDateTime(mActivity, System.currentTimeMillis(), DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_ABBREV_ALL);  // Update the LastUpdatedLabel refreshView.getLoadingLayoutProxy().setLastUpdatedLabel(label);  // Do work to refresh the list here. refreshView(true); } });  // Add an end-of-list listener mPullRefreshListView.setOnLastItemVisibleListener(new OnLastItemVisibleListener() {  @Override public void onLastItemVisible() { // Toast.makeText(mActivity, ""end of list"", Toast.LENGTH_SHORT).show(); } });  return root; } "	1	1	1	1	0	0
"@Test public void testExecute_WhenSDNReturnsNullNetworkElement_ThrowsVmidcException() throws Exception { // Arrange. CreateK8sLabelPodTask task = this.factoryTask.create(NETWORK_ELEMENT_NOT_FOUND_K8S_POD, NETWORK_ELEMENT_NOT_FOUND_POD_SGM_LABEL, this.apiFactoryServiceMock); registerNetworkElement(NETWORK_ELEMENT_NOT_FOUND_POD_SGM_LABEL.getSecurityGroupMembers().iterator().next(), null, NETWORK_ELEMENT_NOT_FOUND_K8S_POD); this.exception.expect(VmidcException.class); this.exception.expectMessage(""The SDN controller did not return a network element for the device"");  // Act. task.execute(); } "	1	0	1	0	1	0
private char read() throws IOException { final char c = peek(); at =+ 1; return c; } 	1	1	1	1	0	0
public static Success newInstance(BookingInteractionEvent bookingInteractionEvent) { Success fragment = new Success(); fragment.bookingInteractionEvent = bookingInteractionEvent; return new Success(); } 	1	1	1	0	1	0
"protected void sendOnLocalCluster(byte[] buf, int offset, int length) { try { Message msg=(Message)Util.streamableFromByteBuffer(Message.class, buf, offset, length); Address sender=msg.getSrc(); Address dest=msg.getDest();  if(!isLocal(dest)) { if(log.isWarnEnabled()) log.warn(""["" + local_addr + ""] dest="" + dest + "" is not local (site="" + this.site + ""); discarding it""); return; }  // set myself to be the sender msg.setSrc(local_addr);  // later, in RELAY, we'll take the original sender from the header and make it the sender msg.putHeader(id, RelayHeader.createDisseminateHeader(sender));  if(log.isTraceEnabled()) log.trace(""received msg from "" + sender + "", passing down the stack with dest="" + msg.getDest() + "" and src="" + msg.getSrc()); down_prot.down(new Event(Event.MSG, msg)); } catch(Exception e) { log.error(Util.getMessage(""FailedSendingOnLocalCluster""), e); } } "	0	0	1	1	1	0
"public static void main(String[] args) { Application app; String os = System.getProperty(""os.name"").toLowerCase(); if (os.startsWith(""mac"")) { app = new DefaultOSXApplication(); } else if (os.startsWith(""win"")) { app = new DefaultSDIApplication(); } else { app = new DefaultSDIApplication(); }  System.setProperty(""apple.laf.useScreenMenuBar"", ""true""); System.setProperty(""com.apple.mrj.application.apple.menu.about.name"", ""TerraER"");  ResourceBundleUtil labels = ResourceBundleUtil.getLAFBundle(""org.jhotdraw.app.Labels""); DrawApplicationModel model = new DrawApplicationModel(); model.setName(""TerraER""); model.setVersion(""2.21""); model.setCopyright(labels.getString(""copyright"")); model.setProjectClassName(""org.jhotdraw.samples.draw.TerraProject""); app.setModel(model); app.launch(args); } "	0	1	1	0	1	0
"@Override String getDatePartExtractionSuffix(DayPartField field) { switch (field) { case WEEK: return "", 'IW' )""; default: return super.getDatePartExtractionPrefix(field); } } "	1	0	1	1	0	0
"public String clusterHierarchical(ClusterHierarchicalParams params) throws Exception { ObjectData objData = getWsClient().getObjects(Arrays.asList( new ObjectIdentity().withRef(params.getInputData()))).get(0); BioMatrix matrix = objData.getData().asClassInstance(BioMatrix.class); ClusterServiceLocalClient mathClient = getMathClient(); ClusterResults res = mathClient.clusterHierarchical(matrix.getData(), params.getDistanceMetric(), params.getLinkageCriteria(), params.getFeatureHeightCutoff(), params.getMaxItems(), params.getAlgorithm()); FeatureClusters toSave = new FeatureClusters().withOriginalData(params.getInputData()) .withFeatureClusters(clustersFromLabels(matrix, res)) .withFeatureDendrogram(res.getDendrogram()); List<ProvenanceAction> provenance = Arrays.asList( new ProvenanceAction().withService(KBaseFeatureValuesServer.SERVICE_NAME) .withServiceVer(KBaseFeatureValuesServer.SERVICE_VERSION) .withDescription(""Hierarchical clustering method"") .withInputWsObjects(Arrays.asList(params.getInputData())) .withMethod(""cluster_hierarchical"") .withMethodParams(Arrays.asList(new UObject(params)))); getWsClient().saveObjects(new SaveObjectsParams().withWorkspace(params.getOutWorkspace()) .withObjects(Arrays.asList(new ObjectSaveData() .withType(""KBaseFeatureValues.FeatureClusters"").withName(params.getOutClustersetId()) .withData(new UObject(toSave)).withProvenance(provenance)))); return params.getOutWorkspace() + ""/"" + params.getOutClustersetId(); } "	0	1	1	0	0	0
private boolean operatorCondition(NamePattern namePattern) { return namePattern != null && namePattern.getOp() != null && getOperatorCondition(namePattern.getOp()); } 	1	0	1	1	0	0
"public void nextStep( final PwmRequest pwmRequest ) throws IOException, PwmUnrecoverableException, ChaiUnavailableException, ServletException { final ChangePasswordBean changePasswordBean = pwmRequest.getPwmApplication().getSessionStateService().getBean(pwmRequest, ChangePasswordBean.class);  final PwmSession pwmSession = pwmRequest.getPwmSession(); final PwmApplication pwmApplication = pwmRequest.getPwmApplication(); final Configuration config = pwmApplication.getConfig();  if (changePasswordBean.getChangeProgressTracker() != null) { forwardToWaitPage(pwmRequest); return; }  if (warnPageShouldBeShown(pwmRequest, changePasswordBean)) { LOGGER.trace(pwmRequest, ""pasword expiration is within password warn period, forwarding user to warning page""); pwmRequest.forwardToJsp(JspUrl.PASSWORD_WARN); return; }  final String agreementMsg = pwmApplication.getConfig().readSettingAsLocalizedString(PwmSetting.PASSWORD_CHANGE_AGREEMENT_MESSAGE, pwmRequest.getLocale()); if (agreementMsg != null && agreementMsg.length() > 0 && !changePasswordBean.isAgreementPassed()) { final MacroMachine macroMachine = pwmSession.getSessionManager().getMacroMachine(pwmApplication); final String expandedText = macroMachine.expandMacros(agreementMsg); pwmRequest.setAttribute(PwmRequest.Attribute.AgreementText,expandedText); pwmRequest.forwardToJsp(JspUrl.PASSWORD_AGREEMENT); return; }  if (determineIfCurrentPasswordRequired(pwmApplication, pwmSession) && !changePasswordBean.isCurrentPasswordPassed()) { forwardToFormPage(pwmRequest); return; }  if (!config.readSettingAsForm(PwmSetting.PASSWORD_REQUIRE_FORM).isEmpty() && !changePasswordBean.isFormPassed()) { forwardToFormPage(pwmRequest); return; }  changePasswordBean.setAllChecksPassed(true); pwmRequest.forwardToJsp(JspUrl.PASSWORD_CHANGE); } "	0	0	1	1	0	0
public boolean write(final int msgTypeId, final DirectBuffer srcBuffer, final long srcIndex, final int length) { checkTypeId(msgTypeId); checkMsgLength(length);  boolean isSuccessful = false;  final AtomicBuffer buffer = this.buffer; final int recordLength = length + HEADER_LENGTH; final long requiredCapacity = align(recordLength, ALIGNMENT); final long recordIndex = claimCapacity(buffer, requiredCapacity);  if (INSUFFICIENT_CAPACITY != recordIndex) { buffer.putLongOrdered(recordIndex, makeHeader(-recordLength, msgTypeId)); UnsafeAccess.UNSAFE.storeFence();  buffer.putBytes(encodedMsgOffset(recordIndex), srcBuffer, srcIndex, length); buffer.putLongOrdered(lengthOffset(recordIndex), recordLength);  isSuccessful = true; }  return isSuccessful; } 	0	0	1	1	1	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);  mFirebaseLogger = new FirebaseLogger(FirebaseAnalytics.getInstance(this));  Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar);  bindService(new Intent(this, CalculateService.class), serviceConnection, BIND_AUTO_CREATE);  RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler);  if (recyclerView.getAdapter() == null) { mAdapter = new SwipeCardAdapter(this); mAdapter.setOnItemClickListener(mOnItemClickListener); mAdapter.setOnRightButtonClickListener(mOnRightButtonClickListener); mAdapter.setOnLeftButtonClickListener(mOnLeftButtonClickListener); recyclerView.setAdapter(mAdapter); recyclerView.setItemAnimator(new ItemAnimator()); new PatternLoader(this, mAdapter); }  AdView adView = (AdView) findViewById(R.id.adView); AdRequest.Builder adRequestBuilder = new AdRequest.Builder(); if (BuildConfig.DEBUG) { adRequestBuilder.addTestDevice(""C39E64851CA596B020F5A5C95550CBDA""); } AdRequest adRequest = adRequestBuilder.build(); adView.loadAd(adRequest);  onNewIntent(getIntent()); } "	1	0	1	0	1	0
private synchronized void checkAllThreadsFinished(){ boolean allFinished=true; for(DownloadThread thread:mDownloadThreadList){ if(thread.isFinished==false) allFinished=false; break; }  if(allFinished){ //下载完成后，线程信息就没用了，可以删除 mDao.deleteThread(mFileInfo.getUrl()); //发送广播通知UI下载任务结束 Intent intent=new Intent(DownloadService.ACTION_FINISHED); intent.putExtra(DownloadService.FILEINFO,mFileInfo); mContext.sendBroadcast(intent); } } 	1	1	1	0	1	0
public static boolean isNewFile(final Path localFile, final Contents serverFile, final boolean isPutCommand) throws IOException { return isNewFileHelper(Files.getLastModifiedTime(localFile).toString(), serverFile.getLastModified().toString(), isPutCommand); } 	1	0	1	0	1	0
private boolean needScrollingAnimation() { if (error != null) { float screenWidth = getWidth() - rightLeftSpinnerPadding; float errorTextWidth = textPaint.measureText(error.toString(), 0, error.length()); return errorTextWidth > screenWidth ? true : false; } return false; } 	1	1	1	0	1	0
"public String getAddCommand() { StringBuilder sb = new StringBuilder(); sb.append(""ADD "" + this.getTaskName().fullTaskName + "" ""); sb.append(""FROM "" + this.getStartDate().value + "" ""); sb.append(this.getStartTime().value + "" ""); sb.append(""TO "" + this.getEndDate().value + "" ""); sb.append(this.getEndTime().value + "" ""); this.getCategories().asObservableList().stream().forEach(s -> sb.append(""CATEGORY"" + s.categoryName + "" "")); return sb.toString(); } "	0	1	1	1	0	0
"private void updateCenterByDrag(Point aPoint) { System.out.println(""updateCenterByDrag""); centerCoodinate.x = aPoint.x; centerCoodinate.y = aPoint.y; return; } "	0	0	1	1	0	0
"private String nameTokenizer(String target) { StringTokenizer st = new StringTokenizer(target, ""\\""); String temp = null;;  while(st.hasMoreTokens()) { temp = st.nextToken(); }  return temp; } "	1	1	1	0	1	0
public void updateFood (int foodValue) { String color = food.getFood().get(foodValue); colorQueue.add(color); if (colorQueue.size() < 10) { decorateButton(foodQueue[colorQueue.size()-1][0], getColor(color)); } else { colorQueue.remove(); for (int i = 0; i < colorQueue.size(); i++) { decorateButton(foodQueue[i][0], getColor(colorQueue.get(i))); } } } 	0	1	1	0	1	0
"public static NativeArray jsFunction_getCustomOutSequences(Context cx, Scriptable thisObj, Object[] args, Function funObj) throws APIManagementException { if (args == null ||  args.length != 3) { handleException(""Invalid input parameters.""); } APIProvider apiProvider = getAPIProvider(thisObj); String apiName = (String) args[0]; String apiVersion = (String) args[1]; String provider = (String) args[2];  if (provider != null) { provider = APIUtil.replaceEmailDomain(provider); } APIIdentifier apiIdentifier = new APIIdentifier(provider, apiName, apiVersion);  List<String> sequenceList = apiProvider.getCustomOutSequences(apiIdentifier);  NativeArray myn = new NativeArray(0); if (sequenceList == null) { return null; } else { for (int i = 0; i < sequenceList.size(); i++) { myn.put(i, myn, sequenceList.get(i)); } return myn; }  } "	1	0	1	1	0	0
"public void increment_board(){ //Intent transition_page = new Intent(this,Question_view.class); Intent transition_page = new Intent(this,AnimationActivity.class); MainActivity.current_pos=Integer.parseInt(start_node); if(Integer.parseInt(start_node)>Integer.parseInt(promotion_node)){ MainActivity.is_increment = 1; MainActivity.target_pos = Integer.parseInt(promotion_node); MainActivity.target_class = promotion_class; }else{ MainActivity.is_increment = 0; MainActivity.target_pos = Integer.parseInt(promotion_node); MainActivity.target_class = promotion_class; }   Log.i(""TAG"", ""current pos-- ""+ MainActivity.current_pos); Log.i(""TAG"", ""target pos""+ MainActivity.target_pos); Log.i(""TAG"", ""Target class ""+ MainActivity.target_class); this.upgrade_leaderboard_score(score); startActivity(transition_page); finish();  } "	1	1	1	0	1	0
"@Override public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) { int version = oldVersion; switch (version) { case DATABASE_VERSION_INITIAL:  // relators db.execSQL(buildStatementCreateTable(RelatorEntry.TABLE_NAME, version + 1)); db.execSQL(buildStatementCreateIndex(INDEX_RELATOR_CODE, version + 1)); populateFrom(db, R.raw.relators_old_v2);  version++;  case DATABASE_VERSION_RELATORS:  // histories db.execSQL(buildStatementCreateTable(HistoryEntry.TABLE_NAME, version + 1));  version++;  case DATABASE_VERSION_HISTORY:  // is this really necessary? table & index don't seem to be created in previous versions db.execSQL(""DROP INDEX IF EXISTS "" + INDEX_LANGUAGE_CODE); db.execSQL(""DROP TABLE IF EXISTS "" + LanguageEntry.TABLE_NAME);  // languages db.execSQL(buildStatementCreateTable(LanguageEntry.TABLE_NAME, version + 1)); db.execSQL(buildStatementCreateIndex(INDEX_LANGUAGE_CODE, version + 1)); populateFrom(db, R.raw.languages);  version++;  case DATABASE_VERSION_LOCALE_LANGUAGES:  // relators - adding attribute 'lang' db.execSQL(""DROP INDEX IF EXISTS "" + INDEX_RELATOR_CODE); db.execSQL(""DROP TABLE IF EXISTS "" + RelatorEntry.TABLE_NAME);  db.execSQL(buildStatementCreateTable(RelatorEntry.TABLE_NAME, version + 1)); db.execSQL(buildStatementCreateIndex(INDEX_RELATOR_CODE, version + 1)); populateFrom(db, R.raw.relators);  version++;  case DATABASE_VERSION_LOCALE_RELATORS: // history - adding attribute 'model' (present data transformed) // SQLite doesn't implement ALTER TABLE ADD CONSTRAINT (http: // www.sqlite.org/omitted.html) // So I can't add nullable column model, update all records with ""page"" and set column model to not nullable. db.execSQL(""ALTER TABLE "" + HistoryEntry.TABLE_NAME + "" RENAME TO "" + TABLE_TMP + "";""); db.execSQL(buildStatementCreateTable(RelatorEntry.TABLE_NAME, version + 1)); String[] columns = new String[] {// HistoryEntry.COLUMN_DOMAIN,// HistoryEntry.COLUMN_PARENT_PID,// HistoryEntry.COLUMN_PID,// HistoryEntry.COLUMN_SUBTITLE,// HistoryEntry.COLUMN_TIMESTAMP,// HistoryEntry.COLUMN_TITLE }; Cursor cursor = db.query(TABLE_TMP, columns, null, null, null, null, null); while (!cursor.isAfterLast()) { ContentValues values = new ContentValues(); int index = 0; values.put(HistoryEntry.COLUMN_DOMAIN, cursor.getString(index++)); values.put(HistoryEntry.COLUMN_MODEL, ModelUtil.PAGE); values.put(HistoryEntry.COLUMN_PARENT_PID, cursor.getString(index++)); values.put(HistoryEntry.COLUMN_PID, cursor.getString(index++)); values.put(HistoryEntry.COLUMN_SUBTITLE, cursor.getString(index++)); values.put(HistoryEntry.COLUMN_TIMESTAMP, cursor.getInt(index++)); values.put(HistoryEntry.COLUMN_TITLE, cursor.getString(index++)); db.insert(HistoryEntry.TABLE_NAME, null, values); } db.execSQL(""DROP TABLE IF EXISTS "" + TABLE_TMP); } } "	0	1	1	0	1	0
"@Override public void onUpdateCityStateUserHadFinished() { String nameState = states.get(stateOptionStates);  MockSingleton.INSTANCE.user.setCity(cityOptionCities); MockSingleton.INSTANCE.user.setState(stateOptionStates); MockSingleton.INSTANCE.userChangeCity = cityOptionCities; MockSingleton.INSTANCE.userChangeState = nameState;  SwappersToast.makeText(getActivity(), getString(R.string.change_city_dialog_positive_button_parcial_message) + "" "" + cityOptionCities + "","" + stateOptionStates, Toast.LENGTH_SHORT).show(); AndroidUtils.saveCityState(getActivity(), cityOptionCities, stateOptionStates);  MockSingleton.INSTANCE.nearBooks.clear(); } "	1	1	1	1	0	0
public void removeDueDate(Context context, int termPosition, int sectionPosition, int dueDatePosition) { // remove the DueDate dueDates.remove(dueDatePosition);  // update the Section in the database DBHelper db = new DBHelper(context); db.removeDueDate(termPosition, sectionPosition, dueDatePosition);  // sort if the DueDate was not removed from the end of the list if (dueDatePosition == dueDates.size()) { sortDueDates(context, termPosition, sectionPosition); } } 	1	0	1	1	0	0
private String findConferenceServer(final Account account) { String server; if (account.getXmppConnection() != null) { server = account.getXmppConnection().getMucServer(); if (server != null) { return server; } } for (Account other : getAccounts()) { if (other != account && other.getXmppConnection() != null) { server = other.getXmppConnection().getMucServer(); if (server != null) { return server; } } } return null; } 	0	0	1	1	0	0
"private static void changePassword(Cipher cipher) { Properties cipherTextProperties = Utils.loadProperties(System.getProperty( Constants.CIPHER_TEXT_PROPERTY_FILE_PROPERTY)); List<String> keyValueList = new ArrayList<String>(); int i = 1; for (Object key : cipherTextProperties.keySet()) { String passwordAlias = (String) key; aliasPasswordMap.put(passwordAlias, cipherTextProperties.getProperty(passwordAlias)); keyValueList.add(passwordAlias); System.out.println(""["" + i++ + ""] "" + passwordAlias); } boolean isModified = false; String value; while ((value = Utils.getValueFromConsole( ""Please enter the Number which is corresponding to the Password that is needed be changed "" + ""[Press Enter to Skip] : "", false)).isEmpty()) { if (!value.trim().equals("""")) { String selectedPasswordAlias = keyValueList.get(Integer.parseInt(value.trim()) - 1); String newEncryptedValue = getPasswordFromConsole(selectedPasswordAlias, cipher); aliasPasswordMap.put(selectedPasswordAlias, newEncryptedValue); isModified = true; } }  if (isModified) { cipherTextProperties.putAll(aliasPasswordMap); Utils.writeToPropertyFile(cipherTextProperties, System.getProperty(Constants.CIPHER_TEXT_PROPERTY_FILE_PROPERTY)); } } "	1	0	1	1	0	0
@Override public EventResult<IdmRoleCatalogueDto> process(EntityEvent<IdmRoleCatalogueDto> event) { Object breakProvisioning = event.getProperties().get(ProvisioningService.SKIP_PROVISIONING);  if(breakProvisioning != null && breakProvisioning instanceof Boolean && (Boolean)breakProvisioning){ return new DefaultEventResult<>(event, this); }  doProvisioning(catalogueRepository.findOne(event.getContent().getId())); return new DefaultEventResult<>(event, this); } 	1	0	1	0	1	0
private boolean isCanceledProvisioningProtectionBreak(Map<String, Serializable> properties) { Object breakProvisioning = properties.get(ProvisioningService.CANCEL_PROVISIONING_BREAK_IN_PROTECTION); if (breakProvisioning != null && breakProvisioning instanceof Boolean && (Boolean) breakProvisioning) { return true; } return false; } 	1	1	1	0	1	0
"private static int calculateMaxFill(int hashSize) { checkArgument(hashSize > 0, ""hashSize must greater than 0""); int maxFill = (int) Math.ceil(hashSize * FILL_RATIO); if (maxFill == hashSize) { maxFill--; } checkArgument(hashSize > maxFill, ""hashSize must be larger than maxFill""); return maxFill; } "	0	0	1	1	1	0
"public static String[] constructTestClassesArray(PartnerConnection connection) { String[] testClassesAsArray = null; String[] consolidatedTestClassesAsArray = null; /* * Builder design pattern construct the test class array by building the * final array using simple objects(arrays) viz. array from Manifest * file and array from regex prefix */  if (CommandLineArguments.getTestManifestFiles() != null) { LOG.debug("" Fetching apex test classes from location : "" + CommandLineArguments.getTestManifestFiles()); testClassesAsArray = fetchApexClassesFromManifestFiles(CommandLineArguments.getTestManifestFiles()); } if (CommandLineArguments.getTestRegex() != null) { LOG.debug("" Fetching apex test classes with prefix : "" + CommandLineArguments.getTestRegex()); consolidatedTestClassesAsArray = fetchApexClassesBasedOnMultipleRegexes(connection, testClassesAsArray, CommandLineArguments.getTestRegex(), false); } else { consolidatedTestClassesAsArray = testClassesAsArray; } // if null, no apex test classes fetched to execute; throw warning if (consolidatedTestClassesAsArray == null || (consolidatedTestClassesAsArray != null && consolidatedTestClassesAsArray.length == 0)) { ApexUnitUtils.shutDownWithErrMsg(""No/Invalid test classes mentioned in manifest file and/or "" + ""regex pattern for ApexTestPrefix didn't return any test class names from the org""); } else { LOG.debug(""List of all the Fetched Apex test classes to execute:""); if (LOG.isDebugEnabled()) { logTheFetchedApexClasses(consolidatedTestClassesAsArray); } }  return consolidatedTestClassesAsArray; } "	1	1	1	1	0	0
private static int [] zzUnpackTrans() { int [] result = new int[30]; int offset = 0; offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result); return result; } 	0	0	1	1	1	0
"public void initDriverSettings(JDBCDataSource dataSource, JDBCDatabaseMetaData metaData) { try { this.identifierQuoteString = metaData.getIdentifierQuoteString(); } catch (Throwable e) { log.debug(e.getMessage()); this.identifierQuoteString = SQLConstants.DEFAULT_IDENTIFIER_QUOTE; } if (identifierQuoteString != null) { identifierQuoteString = identifierQuoteString.trim(); if (identifierQuoteString.isEmpty()) { identifierQuoteString = null; } }  try { switch (metaData.getSQLStateType()) { case DatabaseMetaData.sqlStateXOpen: this.sqlStateType = SQLStateType.XOPEN; break; case DatabaseMetaData.sqlStateSQL99: this.sqlStateType = SQLStateType.SQL99; break; default: this.sqlStateType = SQLStateType.UNKNOWN; break; } } catch (Throwable e) { log.debug(e.getMessage()); this.sqlStateType = SQLStateType.UNKNOWN; }  try { supportsSubqueries = metaData.supportsCorrelatedSubqueries(); } catch (SQLException e) { log.debug(e); }  try { this.supportsUnquotedMixedCase = metaData.supportsMixedCaseIdentifiers(); } catch (SQLException e) { log.debug(e.getMessage()); this.supportsUnquotedMixedCase = false; } try { this.supportsQuotedMixedCase = metaData.supportsMixedCaseQuotedIdentifiers(); } catch (SQLException e) { log.debug(e.getMessage()); this.supportsQuotedMixedCase = false; } try { if (metaData.storesUpperCaseIdentifiers()) { this.unquotedIdentCase = DBPIdentifierCase.UPPER; } else if (metaData.storesLowerCaseIdentifiers()) { this.unquotedIdentCase = DBPIdentifierCase.LOWER; } else { this.unquotedIdentCase = DBPIdentifierCase.MIXED; } } catch (SQLException e) { log.debug(e.getMessage()); this.unquotedIdentCase = DBPIdentifierCase.MIXED; } try { if (metaData.storesUpperCaseQuotedIdentifiers()) { this.quotedIdentCase = DBPIdentifierCase.UPPER; } else if (metaData.storesLowerCaseQuotedIdentifiers()) { this.quotedIdentCase = DBPIdentifierCase.LOWER; } else { this.quotedIdentCase = DBPIdentifierCase.MIXED; } } catch (SQLException e) { log.debug(e.getMessage()); this.quotedIdentCase = DBPIdentifierCase.MIXED; } try { this.searchStringEscape = metaData.getSearchStringEscape(); } catch (Throwable e) { log.debug(e.getMessage()); this.searchStringEscape = ""\\""; //$NON-NLS-1$ } try { this.catalogSeparator = metaData.getCatalogSeparator(); if (CommonUtils.isEmpty(this.catalogSeparator)) { this.catalogSeparator = String.valueOf(SQLConstants.STRUCT_SEPARATOR); } } catch (Throwable e) { log.debug(e.getMessage()); this.catalogSeparator = String.valueOf(SQLConstants.STRUCT_SEPARATOR); } try { catalogUsage = (metaData.supportsCatalogsInDataManipulation() ? SQLDialect.USAGE_DML : 0) | (metaData.supportsCatalogsInTableDefinitions() ? SQLDialect.USAGE_DDL : 0) | (metaData.supportsCatalogsInProcedureCalls() ? SQLDialect.USAGE_PROC : 0) | (metaData.supportsCatalogsInIndexDefinitions() ? SQLDialect.USAGE_INDEX : 0) | (metaData.supportsCatalogsInPrivilegeDefinitions() ? SQLDialect.USAGE_PRIV : 0); } catch (SQLException e) { log.debug(e.getMessage()); catalogUsage = SQLDialect.USAGE_NONE; } try { schemaUsage = (metaData.supportsSchemasInDataManipulation() ? SQLDialect.USAGE_DML : 0) | (metaData.supportsSchemasInTableDefinitions() ? SQLDialect.USAGE_DDL : 0) | (metaData.supportsSchemasInProcedureCalls() ? SQLDialect.USAGE_PROC : 0) | (metaData.supportsSchemasInIndexDefinitions() ? SQLDialect.USAGE_INDEX : 0) | (metaData.supportsSchemasInPrivilegeDefinitions() ? SQLDialect.USAGE_PRIV : 0); } catch (SQLException e) { log.debug(e.getMessage()); schemaUsage = SQLDialect.USAGE_DDL | SQLDialect.USAGE_DML; } try { validCharacters = metaData.getExtraNameCharacters(); } catch (SQLException e) { log.debug(e.getMessage()); validCharacters = """"; //$NON-NLS-1$ }  try { this.isCatalogAtStart = metaData.isCatalogAtStart(); } catch (Throwable e) { log.debug(e.getMessage()); this.isCatalogAtStart = true; }  loadDriverKeywords(metaData); } "	1	0	1	0	0	0
"@Test public void testEndPointWithBoolean() { Endpoint endPoint = new Endpoint(""transmissions""); endPoint.addParam(""myBool"", new Boolean(true));  String result = endPoint.toString(); Assert.assertEquals(""transmissions?myBool=true"", result); } "	0	1	1	1	0	0
public Status peekStatus(final String jobId) { if (Status.isStatusFinished(this.flow.getStatus())) { return null; } final ExecutableNode node = this.flow.getExecutableNodePath(jobId); if (node != null) { ExecutableFlowBase parentFlow = node.getParentFlow(); while (parentFlow != null) { Status parentStatus = node.getParentFlow().getStatus(); if (parentStatus == Status.SKIPPED || parentStatus == Status.DISABLED) { return Status.SKIPPED; } parentFlow = parentFlow.getParentFlow(); } return node.getStatus(); }  return null; } 	1	0	1	0	1	0
private ParsedShotMeasurement parseBacksights(SurveyRow row, SurveyTrip trip) { if (falsy(row.getDistance()) && falsy(row.getBackAzimuth()) && falsy(row.getBackInclination())) { return null; } ParsedShotMeasurement measurement = new ParsedShotMeasurement(); measurement.isBacksight = true; measurement.distance = parse(row, SurveyRow.Properties.distance, MetacaveLengthParser::parse, trip.getDistanceUnit()); measurement.azimuth = parse(row, SurveyRow.Properties.backAzimuth, MetacaveAzimuthParser::parse, trip.getBackAzimuthUnit()); measurement.inclination = parse(row, SurveyRow.Properties.backAzimuth, MetacaveAzimuthParser::parse, trip.getBackAzimuthUnit()); return measurement; } 	0	1	1	0	0	0
"@Override public String render(String user, BreakpointDumperPluginRegionInput input) { Map<String, Object> data = Maps.newHashMap(); data.put(""host"", input.hostName); data.put(""port"", input.port); data.put(""className"", input.className); data.put(""lineNumber"", input.lineNumber);  try { if (input.action.equals(""find"")) { InstanceFilter filter = new InstanceFilter( input.clusterKey.isEmpty() ? null : new ClusterKey(input.clusterKey), input.hostKey.isEmpty() ? null : new HostKey(input.hostKey), input.serviceKey.isEmpty() ? null : new ServiceKey(input.serviceKey), input.releaseKey.isEmpty() ? null : new ReleaseGroupKey(input.releaseKey), input.instanceId.isEmpty() ? null : Integer.parseInt(input.instanceId), 0, 10000);  List<Map<String, Object>> instances = new ArrayList<>(); Map<InstanceKey, TimestampedValue<Instance>> found = upenaStore.instances.find(filter); for (Map.Entry<InstanceKey, TimestampedValue<Instance>> entrySet : found.entrySet()) { InstanceKey key = entrySet.getKey(); TimestampedValue<Instance> timestampedValue = entrySet.getValue(); Instance value = timestampedValue.getValue(); instances.add(toMap(key, value)); } data.put(""instances"", instances); }  String key = input.hostName + "":"" + input.port; if (input.action.equals(""attach"")) { BreakpointDebuggerOutput breakpointDebugger = debuggers.computeIfAbsent(key, (t) -> { return new BreakpointDebuggerOutput(jvm.create(input.hostName, input.port)); });  breakpointDebugger.breakpointDebugger.addBreakpoint(input.className, input.lineNumber); if (!breakpointDebugger.isCapturing() && !breakpointDebugger.breakpointDebugger.attached()) { debuggerExecutors.submit(breakpointDebugger); data.put(""message"", ""Added breakpoint "" + input.className + "":"" + input.lineNumber + "" to "" + input.hostName + "":"" + input.port + "" and submitted for attachment.""); } else { data.put(""message"", ""Added breakpoint  "" + input.className + "":"" + input.lineNumber + "" to "" + input.hostName + "":"" + input.port); } } if (input.action.equals(""dettach"")) { BreakpointDebuggerOutput breakpointDebugger = debuggers.get(key); if (breakpointDebugger != null) {  breakpointDebugger.breakpointDebugger.removeBreakpoint(input.className, input.lineNumber); if (breakpointDebugger.breakpointDebugger.getAttachedBreakpoints().isEmpty()) { debuggers.remove(key); breakpointDebugger.breakpointDebugger.dettach(); } data.put(""message"", ""Detached breakpoint debugger for "" + input.hostName + "":"" + input.port); } }  } catch (Exception e) { log.error(""Unable to retrieve data"", e); }  List<Map<String, Object>> dumps = new ArrayList<>();  List<String> keys = new ArrayList<>(debuggers.keySet()); int id = 0; for (String key : keys) { BreakpointDebuggerOutput breakpointDebugger = debuggers.get(key); if (breakpointDebugger != null) { Map<String, Object> dump = new HashMap<>(); dump.put(""id"", id); id++; dump.put(""hostName"", breakpointDebugger.breakpointDebugger.getHostName()); dump.put(""port"", breakpointDebugger.breakpointDebugger.getPort()); dump.put(""log"", breakpointDebugger.breakpointDebugger.getLog());  List<Map<String, Object>> breakpoints = new ArrayList<>(); for (BreakpointDebugger.Breakpoint attachedBreakpoint : breakpointDebugger.breakpointDebugger.getAttachedBreakpoints()) { Map<String, Object> breakpoint = new HashMap<>(); breakpoint.put(""className"", attachedBreakpoint.getClassName()); breakpoint.put(""lineNumber"", attachedBreakpoint.getLineNumber()); breakpoint.put(""progress"", breakpointDebugger.progress(attachedBreakpoint.getClassName(), attachedBreakpoint.getLineNumber())); List<Map<String, String>> got = breakpointDebugger.getCaptured(attachedBreakpoint.getClassName(), attachedBreakpoint.getLineNumber()); breakpoint.put(""dump"", got); if (got == null || got.isEmpty()) { got = breakpointDebugger.getCapturing(attachedBreakpoint.getClassName(), attachedBreakpoint.getLineNumber()); breakpoint.put(""dump"", got); }  got = breakpointDebugger.getCapturedFrames(attachedBreakpoint.getClassName(), attachedBreakpoint.getLineNumber()); breakpoint.put(""frames"", got); if (got == null || got.isEmpty()) { got = breakpointDebugger.getCapturingFrames(attachedBreakpoint.getClassName(), attachedBreakpoint.getLineNumber()); breakpoint.put(""frames"", got); } breakpoints.add(breakpoint); }  dump.put(""breakpoints"", breakpoints); dumps.add(dump); } }  data.put(""dumps"", dumps);  return renderer.render(template, data); } "	1	1	1	1	0	0
private void initViews() { mEditTextName = (EditText) findViewById(R.id.edit_name_staff); mEditTextPlaceOfBirth = (EditText) findViewById(R.id.edit_place_of_birth); mEditTextPhone = (EditText) findViewById(R.id.edit_phone); mButtonSubmit = (Button) findViewById(R.id.button_submit); mTextViewBirthday = (TextView) findViewById(R.id.text_birthday); mTextViewPositionInCompany = (TextView) findViewById(R.id.text_position_in_company); mTextViewStatus = (TextView) findViewById(R.id.text_status); mButtonSubmit.setOnClickListener(this); mTextViewBirthday.setOnClickListener(this); createSpinnerViews(); mRadioGroupLeftJob = (RadioGroup) findViewById(R.id.radioGroup_Left_Job); mRadioButtonYes = (RadioButton) findViewById(R.id.radioButton_Yes); mRadioButtonNo = (RadioButton) findViewById(R.id.radioButton_No); } 	0	1	1	0	1	0
"@MJI public int lastIndexOf__II__I(MJIEnv env, int objref, int c, int fromIndex, FeatureExpr ctx) {  int vref = env.getReferenceField(ctx, objref, ""value"").getValue(); ElementInfo ei = env.getElementInfo(vref); char[] values = ((CharArrayFields) ei.getFields()).asCharArray().getValue();  int len = values.length;  if (fromIndex < 0) { return -1; } if (fromIndex > len - 1) { fromIndex = len - 1; }  for (int i = fromIndex; i > 0; i--) { if (values[i] == c) { return i; } }  return -1; } "	1	0	1	1	0	0
"private QueryResult waitForConsistentQuery(UserInfo user, String sql, List<SortItem> sortItems, Long limit) throws Exception { long start = System.currentTimeMillis(); while(true){ try { QueryResultBundle queryResult = tableQueryManger.querySinglePage(mockProgressCallbackVoid, user, sql, sortItems, null, 0L, limit, true, false, true); return queryResult.getQueryResult(); } catch (LockUnavilableException e) { System.out.println(""Waiting for table lock: ""+e.getLocalizedMessage()); } catch (TableUnavailableException e) { System.out.println(""Waiting for table index worker to build table. Status: ""+e.getStatus()); } assertTrue(""Timed out waiting for table index worker to make the table available."", (System.currentTimeMillis()-start) <  MAX_WAIT_MS); Thread.sleep(1000); } } "	1	0	1	1	0	0
"public Type typecheck(SymTab s) { try { FunType ft = (FunType) s.lookupFunction(name.getName());  if(args.size() != ft.getInputs().getArgs().size()) throw new Error(line + "":"" + column + "" error: "" + ""incorrect # of args to fun"");  for(int a = 0; a < args.size(); a++) { if(!args.get(a).typecheck(s).equals(ft.getInputs().getArgs().get(a))) throw new Error(line + "":"" + column + "" error: "" + ""incorrect type of arg to fun""); } } catch(Error e) { if(e.getMessage() == ""Semantic Error: var does not exist"") throw new Error(line + "":"" + column + "" error: "" + e.getMessage()); else throw e; } return new Type(""unit""); } "	1	0	1	0	1	0
public void clearAchievements(String player) { // TODO Auto-generated method stub cache.putt(player,new HashSet<String>());  } 	1	0	1	1	0	0
@Override public Iterator<E> iterator() { try { lock.lock(); boolean failOnClosedQuery = session.getConfig().getFailOnClosedQueries(); if (!session.isActive() && !session.getConfig().getNonTransactionalRead()) { if (failOnClosedQuery) { //One of those will definitely fail session.checkOpen(); session.checkActiveRead(); } else { return new ClosableIteratorWrapper<>(failOnClosedQuery); } } ClosableIteratorWrapper<E> iter = new ClosableIteratorWrapper<>(c.iterator(), session, failOnClosedQuery); return new SynchronizedROIteratorC<E>(iter, lock, minIncl, maxExcl); } finally { lock.unlock(); } } 	1	0	1	0	1	0
"@Test public void testBuildReferences() throws IOException, FileNotFoundException, JSONException  { System.out.println(""References""); instance.addProgram(TestUtilities.loadFileJSON(""src/test/resources/prog/pgm.json"")); NodeProgram p = instance.getNodeProgram(""pgm""); Assert.assertNotNull(p); ReferenceTable references = p.getReferences(); Assert.assertNotNull(references); Set<String> devicesId = references.getDevicesId(); Assert.assertEquals(1, devicesId.size()); Set<String> programsId = references.getProgramsId(); Assert.assertEquals(1, programsId.size()); ReferenceTable.STATUS ret = references.checkReferences(); Assert.assertEquals(ReferenceTable.STATUS.UNSTABLE, ret); } "	0	1	1	0	1	0
@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); mPhotoPicker = PhotoPicker.newInstance(getParentActivity(), getParentFragment()); } 	0	1	1	0	1	0
"private boolean processJournal(String journalName, String journalShortID, String journalUuid, String manuscriptNumber, Item item, Context context, HttpServletRequest request, String articleStatus) throws AuthorizeException, SQLException {   Concept journalConcept = null;  if(journalConcept==null && journalUuid != null){ journalConcept = JournalUtils.getJournalConceptById(context, journalUuid); }  if(journalConcept==null && journalShortID != null){ journalConcept = JournalUtils.getJournalConceptByShortID(context, journalShortID); }  if(journalConcept==null && journalName != null){ journalConcept = JournalUtils.getJournalConceptByName(context, journalName); }  //We have selected to choose a journal, retrieve it if(journalConcept != null){  String title = journalConcept.getPreferredLabel();  if(JournalUtils.getBooleanIntegrated(journalConcept) || (JournalUtils.getBooleanIntegrated(journalConcept) && manuscriptNumber != null && manuscriptNumber.trim().equals(""""))){ log.debug(JournalUtils.getJournalShortID(journalConcept) + "" is not integrated OR manuscript number is null""); //Just add the journal title  //Should it end with a *, remove it. if(title.endsWith(""*"")) { title = title.substring(0, title.length() - 1); }  log.debug(""adding journal title to item: "" + title); addEmailsAndEmbargoSettings(journalConcept, item); item.addMetadata(""prism"", ""publicationName"", null, null, title, journalConcept.getIdentifier(), Choices.CF_ACCEPTED); item.update(); } else { String journalPath = JournalUtils.getMetadataDir(journalConcept); log.debug(""journalPath: "" + journalPath);  //We have a valid journal // Unescape the manuscriptNumber to get the filename String fileName = JournalUtils.unescapeFilename(manuscriptNumber); PublicationBean pBean = ModelPublication.getDataFromPublisherFile(fileName, JournalUtils.getJournalShortID(journalConcept), journalPath); if (pBean.getMessage().equals((""""))) {  // check if the status is ""in review"" or ""rejected"" if(articleStatus!=null){  // case ""Accepted""/ARTICLE_STATUS_ACCEPTED // if the publication status is: //    - Rejected ==> return ""Invalid manuscript number."" //    - In Review ==> return ""Invalid manuscript number."" //    - all the others ==> go through entering in PublicationDescriptionStep if(Integer.parseInt(articleStatus)==ARTICLE_STATUS_ACCEPTED){ if(pBean.getStatus()!=null && (pBean.getStatus().equals(PublicationBean.STATUS_IN_REVIEW) || pBean.getStatus().equals(PublicationBean.STATUS_REJECTED))){ if(pBean.getStatus().equals(PublicationBean.STATUS_IN_REVIEW) ) { item.addMetadata(WorkflowRequirementsManager.WORKFLOW_SCHEMA, ""submit"", ""skipReviewStage"", Item.ANY,""false""); item.update(); } request.getSession().setAttribute(""submit_error"", ""Invalid manuscript number.""); return false; } } // case ""IN Review""/ARTICLE_STATUS_IN_REVIEW // if the publication status is: //    - Rejected ==> return ""Invalid manuscript number."" //    - all the others ==> go through entering in PublicationDescriptionStep else if(Integer.parseInt(articleStatus)==ARTICLE_STATUS_IN_REVIEW){ if(pBean.getStatus()!=null && pBean.getStatus().equals(PublicationBean.STATUS_REJECTED)){ request.getSession().setAttribute(""submit_error"", ""Invalid manuscript number.""); return false; } } }  importJournalMetadata(context, item, pBean); addEmailsAndEmbargoSettings(journalConcept, item);  item.update(); } else if(pBean.getMessage().equals(""Invalid manuscript number"")) { // We do not have metadata for this manuscript number // Store the manuscriptNumber & journal title and continue as in-review addEmailsAndEmbargoSettings(journalConcept, item);  title = journalConcept.getPreferredLabel(); log.debug(""invalid manuscript nubmer. Setting journal title to: "" + title); addSingleMetadataValueFromJournal(context, item, ""journalName"", title); addSingleMetadataValueFromJournal(context, item, ""manuscriptNumber"", manuscriptNumber);  item.update(); }else{ request.getSession().setAttribute(""submit_error"", pBean.getMessage()); return false; } } } else { log.debug(""adding unknown journal title to item: "" + journalName); item.addMetadata(""prism"", ""publicationName"", null, null, journalName); item.update(); } return true; } "	1	0	1	0	0	0
"private int declareNamespace(String namespace, TypedVar symbol, boolean isDefault, Set<String> provides, boolean isExtern) { emitNamespaceBegin(namespace); TreeWalker treeWalker = new TreeWalker(compiler.getTypeRegistry(), provides); if (isDefault) { if (isPrivate(symbol.getJSDocInfo())) {  treeWalker.emitPrivateValue(symbol); } else { treeWalker.walk(symbol); } } else { // JSCompiler treats ""foo.x"" as one variable name, so collect all provides that start with // $provide + ""."" but are not sub-properties. Set<String> desiredSymbols = new TreeSet<>(); List<TypedVar> allSymbols = Lists.newArrayList(compiler.getTopScope().getAllSymbols()); Collections.sort(allSymbols, new Comparator<TypedVar>() { @Override public int compare(TypedVar o1, TypedVar o2) { return o1.getName().compareTo(o2.getName()); } });  ObjectType objType = (ObjectType) symbol.getType(); // Can be null if the symbol is provided, but not defined. Set<String> propertyNames = objType != null ? objType.getPropertyNames() : Collections.<String>emptySet(); for (String property : propertyNames) { // When parsing externs namespaces are explicitly declared with a var of Object type // Do not emit the var declaration, as it will conflict with the namespace. if (!(isPrivateProperty(objType, property) || (isExtern && isLikelyNamespace(objType.getPropertyType(property))))) { desiredSymbols.add(symbol.getName() + ""."" + property); } else if (objType.getPropertyType(property).isEnumType()) { // For enum types (unlike classes or interfaces), Closure does not track the visibility on // the created type. Clutz still needs to skip emitting the values, as the original enum // is not emitted here. JSTypeRegistry etc do not provide access to this, so the list of // private enums has to be tracked in this side channel. // // NB: This has multiple issues. It requires the enum to be declared before used, and it // requires the enum to be on an exported namespace. In practice, the rare instances of // this pattern appear to follow those rules. privateEnums.add(namespace + ""."" + property); } } // Any provides have their own namespace and should not be emitted in this namespace. for (String provide : provides) { String toRemove = provide; while (!toRemove.isEmpty()) { desiredSymbols.remove(toRemove); // Also remove their implicit parent namespaces toRemove = toRemove.substring(0, Math.max(0, toRemove.lastIndexOf('.'))); } }  for (TypedVar other : allSymbols) { String otherName = other.getName(); if (desiredSymbols.contains(otherName) && other.getType() != null && !other.getType().isFunctionPrototypeType() && !isPrototypeMethod(other)) { // For safety we need to special case goog.require to return the empty interface by default // For existing namespaces we emit a goog.require string override that has the proper type. // See emitGoogRequireSupport method. if (otherName.equals(""goog.require"")) { emit(""function require (name : string ) : "" + Constants.INTERNAL_NAMESPACE + "".ClosureSymbolNotGoogProvided;""); emitBreak(); continue; } try { treeWalker.walk(other); } catch (RuntimeException e) { // Do not throw DeclarationGeneratorException - this is an unexpected runtime error. throw new RuntimeException(""Failed to emit for "" + other, e); } } } } emitNamespaceEnd(); // An extra pass is required for default exported interfaces, because in Closure they might have // static methods. TS does not support static methods on interfaces, thus we create a new // namespace for them. if (isDefault && isInterfaceWithStatic(symbol.getType())) { declareNamespace(symbol.getName(), symbol, /* isDefault, prevents infinite recursion */ false, provides, isExtern); } // extra walk required for inner classes and inner enums. They are allowed in closure, // but not in TS, so we have to generate a namespace-class pair in TS. // In the case of the externs, however we *do* go through all symbols so this pass is not // needed. // In the case of aliased classes, we cannot emit inner classes, due to a var-namespace clash. if (isDefault && !isExtern && hasNestedTypes(symbol.getType()) && !isAliasedClassOrInterface(symbol, symbol.getType())) { emitNamespaceBegin(symbol.getName()); treeWalker.walkInnerSymbols((ObjectType) symbol.getType(), symbol.getName()); emitNamespaceEnd(); } return treeWalker.valueSymbolsWalked; } "	0	1	1	1	0	0
"@Override protected void drawGuiContainerForegroundLayer(int mouseX, int mouseY) { if(tooltips == null) return; if(mouseX < guiLeft || mouseX > guiRight()) return;  // floating over tooltip info? if(hasTooltips() && mouseX >= guiRight() - border.w - fontRenderer.getCharWidth('?')/2 && mouseX < guiRight() && mouseY > guiTop+5 && mouseY < guiTop+5+fontRenderer.FONT_HEIGHT) { int w = MathHelper.clamp_int(this.width - mouseX - 12, 10, 200); drawHoveringText(fontRenderer.listFormattedStringToWidth(Util.translate(""gui.general.hover""), w), mouseX - guiLeft, mouseY - guiTop); }  // are we hovering over an entry? float y = 4 + guiTop;  if(hasCaption()) { y += fontRenderer.FONT_HEIGHT + 3; }  float textHeight = fontRenderer.FONT_HEIGHT * textScale + 0.5f; float lowerBound = (guiTop + ySize - border.h)/textScale;  // get the index of the currently hovered line int index = -1; ListIterator<String> iter = getTotalLines().listIterator(slider.getValue()); while(iter.hasNext()) { if(y + textHeight > lowerBound) { break; }  if(mouseY > y && mouseY <= y + textHeight) { index = iter.nextIndex(); break; } else { iter.next(); } y += textHeight; }  // no line hovered if(index < 0) { return; }  // get the tooltip index from the hovered line int i = 0; while(tooltipLines.size() > i && index > tooltipLines.get(i)) i++;  if(i >= tooltips.size() || tooltips.get(i) == null) return;  int w = MathHelper.clamp_int(this.width - mouseX - 12, 10, 200); drawHoveringText(fontRenderer.listFormattedStringToWidth(tooltips.get(i), w), mouseX - guiLeft, mouseY - guiTop); } "	1	0	1	1	0	0
"private boolean isArgumentInvalid() { if(!isCommandInvalid()){ CommandType commandType = getCommand(); String content = getContentWithoutCommand(); try{ switch(commandType){  case ADD: if(content.length() == 0){ return true; } return false;  case CLEAR: if(content.isEmpty()){ return false; } return true;  case DELETE: if(content.matches(""\\d+"")){ return false; } return true;  case EXIT: if(content.length() != 0){ return true; } return false;  case UNDO: if(content.length() != 0){ return true; } return false;  case REDO: if(content.length() != 0){ return true; } return false;  case SEARCH: if(content.length() == 0){ return true; } return false;  case TICK: if(content.matches(""\\d+"")){ return false; } return true;  case UPDATE: String inputWords[] = content.split("" ""); if(!inputWords[0].matches(""\\d+"") || content.length() == 0 || inputWords.length ==1){ return true; } return false;  case DETAIL: if(content.matches(""\\d+"")){ return false; } return true;  case CHANGEMODE: if(content.equalsIgnoreCase(""FLOATING"") || content.equalsIgnoreCase(""DEADLINE"") || content.equalsIgnoreCase(""ALL"") || content.equalsIgnoreCase(""SEARCH"") || content.equalsIgnoreCase(""FINISHED"") || content.equals(""CONFIG"")){ return false; } return true;  default: return false; } } catch(IllegalArgumentException e){ return true; } }else{ return false; } } "	0	0	1	1	0	0
"private String getDocumentTypeNameFromTheStaticList(String documentType) { for (SelectItem localDocumentTypeList : documentTypeList) { if (localDocumentTypeList.getValue().equals(documentType)) { return localDocumentTypeList.getLabel(); } } return ""Unknown Document""; } "	0	0	1	1	0	0
public static int getAmount(Inventory inventory, ItemStack itemStack) { int amount = 0;  ArrayList<ItemStack> inventoryItems = new ArrayList<>();  if (inventory instanceof PlayerInventory) { if (getMajorVersion() >= 9) { inventoryItems.add(inventory.getItem(40)); }  for (int i = 0; i < 36; i++) { inventoryItems.add(inventory.getItem(i)); }  } else { for (int i = 0; i < inventory.getSize(); i++) { inventoryItems.add(inventory.getItem(i)); } }  for (ItemStack item : inventoryItems) { if (isItemSimilar(item, itemStack, false)) { amount += item.getAmount(); } }  return amount; } 	1	1	1	0	1	0
"private boolean removeFromInventory(Inventory inventory, ItemStack itemStack) { plugin.debug(""Removing items from inventory..."");  HashMap<Integer, ItemStack> inventoryItems = new HashMap<>(); int amount = itemStack.getAmount(); int removed = 0;  if (inventory instanceof PlayerInventory) { if (Utils.getMajorVersion() >= 9) { inventoryItems.put(40, inventory.getItem(40)); }  for (int i = 0; i < 36; i++) { inventoryItems.put(i, inventory.getItem(i)); }  } else { for (int i = 0; i < inventory.getSize(); i++) { inventoryItems.put(i, inventory.getItem(i)); } }  slotLoop: for (int slot : inventoryItems.keySet()) { while (removed < amount) { ItemStack item = inventory.getItem(slot);  if (item != null && item.getType() != Material.AIR) { if (Utils.isItemSimilar(item, itemStack, false)) { if (item.getAmount() > 0) { int newAmount = item.getAmount() - 1;  ItemStack newItemStack = new ItemStack(item); newItemStack.setAmount(newAmount);  if (newAmount == 0) inventory.setItem(slot, null); else inventory.setItem(slot, newItemStack);  removed++; } else { continue slotLoop; } } else { continue slotLoop; } } else { continue slotLoop; }  } }  return (removed == amount); } "	1	1	1	0	1	0
"public static void main(String[] args) {  try {  LogFile.FILE_NAME = ""error.log"";  ConfigXML config = ConfigXML.getInstance();  System.out.println(config.getLocale());  Locale.setDefault(new Locale(config.getLocale()));  System.out.println(""Locale: ""+Locale.getDefault());  SharedFrame sharedFrame = new SharedFrame(); sharedFrame.setVisible(true);  ApplicationFacadeInterface aplicationFacade; //UIManager.setLookAndFeel(""com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel""); //UIManager.setLookAndFeel(""com.sun.java.swing.plaf.motif.MotifLookAndFeel""); UIManager.setLookAndFeel(""javax.swing.plaf.metal.MetalLookAndFeel""); //UIManager.setLookAndFeel(""com.sun.java.swing.plaf.windows.WindowsLookAndFeel"");  if (config.isBusinessLogicLocal()) { aplicationFacade = new ApplicationFacadeImpl(); DataAccess dataAccess = new DataAccess(config); aplicationFacade.setDataAccess(dataAccess); } else { //Si es remoto  //String serviceName = ""http://localhost:9999/ws/ruralHouses?wsdl""; String serviceName= ""http://""+config.getBusinessLogicNode() +"":""+ config.getBusinessLogicPort()+""/ws/""+config.getBusinessLogicName()+""?wsdl"";  //URL url = new URL(""http://localhost:9999/ws/ruralHouses?wsdl""); URL url = new URL(serviceName);   //1st argument refers to wsdl document above //2nd argument is service name, refer to wsdl document above QName qname = new QName(""http://businessLogic/"", ""FacadeImplementationWSService"");  Service service = Service.create(url, qname);  aplicationFacade = service.getPort(ApplicationFacadeInterface.class); }  //if (c.getDataBaseOpenMode().equals(""initialize"")) { //    appFacadeInterface.initializeBD(); //}  MainGUI.setBussinessLogic(aplicationFacade);  } catch (Exception e) {  System.err.println(""An error has occurred.\nTo see more detailed information, go to \"""" + LogFile.getAbsolutePath() + ""\""\n""); try { LogFile.generateFile(e, true); } catch (IOException ex) { ex.printStackTrace(); } e.printStackTrace(); JOptionPane.showMessageDialog(null,	""An error has occurred.\nTo see more detailed information, go to \"""" + LogFile.getAbsolutePath() + ""\"""", ""Error!"", JOptionPane.ERROR_MESSAGE);  }  //a.pack();  } "	1	1	1	1	0	0
"private void jbInit() throws Exception {  ApplicationFacadeInterface facade = MainGUI.getBusinessLogic();  Vector<RuralHouse> rhs = facade.getAllRuralHouses();  comboBox = new JComboBox<RuralHouse>(rhs); //comboBox.setModel(new DefaultComboBoxModel(rhs));   this.getContentPane().setLayout(null); this.setSize(new Dimension(433, 548)); this.setTitle(ResourceBundle.getBundle(""Etiquetas"").getString(""QueryAvailability"")); jLabel1.setText(ResourceBundle.getBundle(""Etiquetas"").getString(""RuralHouse"")); jLabel1.setBounds(new Rectangle(40, 20, 145, 25)); jLabel2.setText(ResourceBundle.getBundle(""Etiquetas"").getString(""FirstDay"")); jLabel2.setBounds(new Rectangle(40, 55, 140, 25)); jTextField2.setBounds(new Rectangle(190, 210, 155, 25)); jTextField2.setEditable(false); jLabel3.setText(ResourceBundle.getBundle(""Etiquetas"").getString(""NumNights"")); jLabel3.setBounds(new Rectangle(40, 250, 115, 25)); jTextField3.setBounds(new Rectangle(190, 250, 155, 25)); jTextField3.setText(""0""); jButton1.setText(ResourceBundle.getBundle(""Etiquetas"").getString(""Accept"")); jButton1.setBounds(new Rectangle(55, 455, 130, 30)); jButton1.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { jButton1_actionPerformed(e); } }); jButton2.setText(ResourceBundle.getBundle(""Etiquetas"").getString(""Close"")); jButton2.setBounds(new Rectangle(230, 455, 130, 30));   jTextField3.addFocusListener(new FocusListener() { public void focusGained(FocusEvent e) { }  public void focusLost(FocusEvent e) { jTextField3_focusLost(); } }); jButton2.addActionListener(new ActionListener()	{ public void actionPerformed(ActionEvent e) { jButton2_actionPerformed(e); } }); jLabel4.setBounds(new Rectangle(55, 300, 305, 30)); jLabel4.setForeground(Color.red); jCalendar1.setBounds(new Rectangle(190, 60, 225, 150)); scrollPane.setBounds(new Rectangle(45, 305, 320, 116));  this.getContentPane().add(scrollPane, null);  table = new JTable(); table.addMouseListener(new MouseAdapter() { @Override public void mouseClicked(MouseEvent e) { //int i=table.getSelectedRow(); //int houseNumber = (int) tableModel.getValueAt(i,1); //Date firstDate=new Date(((java.util.Date)tableModel.getValueAt(i,2)).getTime()); //Date lastDate=new Date(((java.util.Date)tableModel.getValueAt(i,3)).getTime());  //BookRuralHouseGUI b=new BookRuralHouseGUI(houseNumber,firstDate,lastDate); //b.setVisible(true); } });  scrollPane.setViewportView(table); tableModel = new DefaultTableModel(null, columnNames);  table.setModel(tableModel); this.getContentPane().add(jCalendar1, null); this.getContentPane().add(jLabel4, null); this.getContentPane().add(jButton2, null); this.getContentPane().add(jButton1, null); this.getContentPane().add(jTextField3, null); this.getContentPane().add(jLabel3, null); this.getContentPane().add(jTextField2, null); this.getContentPane().add(jLabel2, null); this.getContentPane().add(jLabel1, null); comboBox.setBounds(new Rectangle(245, 22, 115, 20)); comboBox.setBounds(189, 22, 115, 20);  getContentPane().add(comboBox); labelNoOffers.setBounds(73, 432, 265, 14);  getContentPane().add(labelNoOffers);  // Codigo para el JCalendar this.jCalendar1.addPropertyChangeListener(new PropertyChangeListener() { public void propertyChange(PropertyChangeEvent propertychangeevent)	{ if (propertychangeevent.getPropertyName().equals(""locale""))	{ jCalendar1.setLocale((Locale) propertychangeevent.getNewValue()); DateFormat dateformat = DateFormat.getDateInstance(1, jCalendar1.getLocale()); jTextField2.setText(dateformat.format(calendarMio.getTime())); } else if (propertychangeevent.getPropertyName().equals(""calendar"")) { calendarMio = (Calendar) propertychangeevent.getNewValue(); DateFormat dateformat1 = DateFormat.getDateInstance(1, jCalendar1.getLocale()); jTextField2.setText(dateformat1.format(calendarMio.getTime())); jCalendar1.setCalendar(calendarMio); } } });   } "	0	0	1	1	1	0
"private void interpretAggregate() { int expecting_bytes = 0; while(recv_buf.size()>0) { // FIXME: Can't find a nice way of wrapping a ByteBuffer around a list of bytes. // Create a new array and copy bytes over. byte[] bytes= new byte[recv_buf.size()]; ByteBuffer b = MooshimeterDeviceBase.wrap(bytes); for(byte t:recv_buf) { b.put(t); } b.rewind(); int opcode = (int)b.get(); if(code_list.containsKey(opcode)) { ConfigTree.ConfigNode n = code_list.get(opcode); switch(n.ntype) { case ConfigTree.NTYPE.PLAIN  : Log.e(TAG, ""Shouldn't receive notification here!""); return; case ConfigTree.NTYPE.CHOOSER: n.notify(b.get()); break; case ConfigTree.NTYPE.LINK   : Log.e(TAG, ""Shouldn't receive notification here!""); return; case ConfigTree.NTYPE.COPY   : Log.e(TAG, ""Shouldn't receive notification here!""); return; case ConfigTree.NTYPE.VAL_U8 : case ConfigTree.NTYPE.VAL_S8 : n.notify(b.get()); break; case ConfigTree.NTYPE.VAL_U16: case ConfigTree.NTYPE.VAL_S16: n.notify(b.getShort()); break; case ConfigTree.NTYPE.VAL_U32: case ConfigTree.NTYPE.VAL_S32: n.notify(b.getInt()); break; case ConfigTree.NTYPE.VAL_STR: expecting_bytes = b.getShort(); if(b.remaining()<expecting_bytes) { // Wait for the aggregator to fill up more return; } //n.notify(new String(b.array())); break; case ConfigTree.NTYPE.VAL_BIN: expecting_bytes = b.getShort(); if(b.remaining()<expecting_bytes) { // Wait for the aggregator to fill up more return; } n.notify(Arrays.copyOfRange(b.array(),b.position(),b.position()+expecting_bytes)); b.position(b.position()+expecting_bytes); break; case ConfigTree.NTYPE.VAL_FLT: n.notify(b.getFloat()); break; } } else { Log.e(TAG,""UNRECOGNIZED SHORTCODE ""+opcode); new Exception().printStackTrace(); return; } // Advance recv_buf for(int i = 0; i < b.position();i++) { recv_buf.remove(0); } } } "	1	0	1	1	0	0
private MetadataField searchField(MetadataField tree, MetadataField field) {  MetadataField result = null; if (tree != null && field != null) { if (tree.getId() == field.getId()) { return tree; } else { for (MetadataField child : tree.getChildren()) { MetadataField dfsResult = searchField(child, field); if (dfsResult != null) { return dfsResult; } } } } return result; } 	1	1	1	0	1	0
@Test public void checkFunction() { goTo(JAVASCRIPT_URL); await().pollingEvery(800, TimeUnit.MILLISECONDS).until(new Predicate<Fluent>() { @Override public boolean apply(Fluent fluent) { return true; } }); } 	0	1	1	0	0	0
@Override public EPGraphCollection execute(EPGraph epGraph) { Graph<Long, EPFlinkVertexData, EPFlinkEdgeData> graph = epGraph.getGellyGraph(); try { graph = graph.run(new LabelPropagationAlgorithm(this.maxIterations)); } catch (Exception e) { e.printStackTrace(); } EPGraph labeledGraph = EPGraph.fromGraph(graph, null, env); LongFromProperty lfp = new LongFromProperty(propertyKey); SplitBy callByPropertyKey = new SplitBy(lfp, env); return callByPropertyKey.execute(labeledGraph); } 	1	0	1	0	1	0
"@VisibleForTesting void lockSectionWithRetry(final ItemCrudRequest request, final String section, final int maxRetries, final int retryAttempt) { final boolean locked = gitlabClient.lockSection(request.getRequestUser(), request.getProject(), section); request.setLocked(locked);  if (!locked) { if (retryAttempt < maxRetries) { delayLockSectionRertry(); lockSectionWithRetry(request, section, maxRetries, retryAttempt + 1); } else { // another user locked the section before this user could final ItemTransaction sectionOwner = gitlabClient.lookupTransactionBySectionLock( request.getProject(), section); final String msg = String.format(""The lock for section '%s' is currently taken by %s"", section, (sectionOwner != null ? sectionOwner.getUserName() : ItemRepositoryUtil.AUTHOR_UNKNOWN)); throw new ValidationException(msg); } } } "	1	1	1	1	0	0
private void renderScore(Painter g){ g.setFont(Typeface.SANS_SERIF, 25); g.setColor(Color.GRAY); g.drawString(String.valueOf(mPlayerScore/200),20, 30); } 	0	1	1	0	1	0
private void tryPickupModItems() {  EnumEnchantKey key = upgradeSetup.getEnchantKey(); String mobName = controllerConfig.getMobName();  /* If still learning check for any dropped items */ if (!Woot.LOOT_TABLE_MANAGER.isFull(mobName, key)) {  if (bb == null) { BlockPos checkPos = new BlockPos(getPos().getX(), LOOTBOX_Y, getPos().getZ()); int range = 2; bb = new AxisAlignedBB(checkPos).expand(range, LOOTBOX_Y - 1, range); }  List<EntityItem> itemList = worldObj.getEntitiesWithinAABB(EntityItem.class, bb, EntitySelectors.IS_ALIVE); if (!itemList.isEmpty()) { Woot.LOOT_TABLE_MANAGER.update(mobName, key, itemList, false); for (EntityItem i : itemList) ((EntityItem) i).setDead(); } } } 	0	1	1	0	1	0
private void doCacheAwareWrite(TeeWritableByteChannel writableChannel, Cache cache) throws IOException { try { doWrite(writableChannel); } catch (IOException e) { logger.info(e.getMessage(), e); cache.purge(this.ops); } } 	0	0	1	1	1	0
private void hideLoading() { mIsLoading = false; mRefreshView.setVisibility(View.VISIBLE); mLoading.setVisibility(View.GONE);  mLoadingObservationsGrid.setVisibility(View.GONE); mLoadingObservationsList.setVisibility(View.GONE);  if (mPage == 0) { // Only re-show the grid/list views if this is the first observations result page being fetched if (mObservations.size() == 0) { mObservationsGrid.setVisibility(View.GONE); mObservationsGridEmpty.setVisibility(View.VISIBLE); mObservationsList.setVisibility(View.GONE); mObservationsListEmpty.setVisibility(View.VISIBLE); } else { mObservationsGrid.setVisibility(View.VISIBLE); mObservationsGridEmpty.setVisibility(View.GONE); mObservationsList.setVisibility(View.VISIBLE); mObservationsListEmpty.setVisibility(View.GONE); } } } 	1	0	1	1	0	0
@Override protected void subscribeActual(MaybeObserver<? super T> observer) { AtomicBoolean disposed = new AtomicBoolean(); observer.onSubscribe(new Disposable() { @Override public void dispose() { disposed.set(true); } @Override public boolean isDisposed() { return disposed.get(); } }); if (!disposed.get()) { method.handle(ar -> { if (!disposed.getAndSet(false)) { if (ar.succeeded()) { try { T val = ar.result(); if (val != null) { observer.onSuccess(val); } else { observer.onComplete(); } } catch (Throwable ignore) { } } else if (ar.failed()) { try { observer.onError(ar.cause()); } catch (Throwable ignore) { } } } }); } } 	0	0	1	1	1	0
"@Override //On message received event, does an action when the handheld app receives a message from the watch public void onMessageReceived(MessageEvent messageEvent) { super.onMessageReceived(messageEvent); // if (""/MESSAGE"".equals(messageEvent.getPath())) { // Create a new controller instance so we can send commands to the wifi controller Log.d(TAG, ""message received"" + messageEvent.getPath()); controller mCont = new controller(); controlCommands cmd; cmd = new controlCommands(this, mCont.mHandler); //A switch to find out what message was sent from the watch if(messageEvent.getPath().equals(""/zones"")) { connectToWatch(getApplicationContext()); final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext()); final com.google.android.gms.common.api.PendingResult<NodeApi.GetConnectedNodesResult> nodes = Wearable.NodeApi.getConnectedNodes(mApiClient); nodes.setResultCallback(new ResultCallback<NodeApi.GetConnectedNodesResult>() { @Override public void onResult(NodeApi.GetConnectedNodesResult result) { final List<Node> nodes = result.getNodes(); if (nodes != null) { for (int i = 0; i < nodes.size(); i++) { final Node node = nodes.get(i); Log.d(""Wear"",""Sending Zone List""); List<String> zones = new ArrayList<String>(10); zones.add(""All Color""); zones.add(prefs.getString(""pref_zone1"", getApplicationContext().getString(R.string.Zone1))); zones.add(prefs.getString(""pref_zone2"", getApplicationContext().getString(R.string.Zone2))); zones.add(prefs.getString(""pref_zone3"", getApplicationContext().getString(R.string.Zone3))); zones.add(prefs.getString(""pref_zone4"", getApplicationContext().getString(R.string.Zone4))); zones.add(prefs.getString(""pref_zone5"", getApplicationContext().getString(R.string.Zone1))); zones.add(prefs.getString(""pref_zone6"", getApplicationContext().getString(R.string.Zone2))); zones.add(prefs.getString(""pref_zone7"", getApplicationContext().getString(R.string.Zone3))); zones.add(prefs.getString(""pref_zone8"", getApplicationContext().getString(R.string.Zone4))); zones.add(""All White"");  ByteArrayOutputStream bos = new ByteArrayOutputStream(); try { ObjectOutputStream oos = new ObjectOutputStream(bos); oos.writeObject(zones); byte[] bytes = bos.toByteArray();  Wearable.MessageApi.sendMessage(mApiClient, node.getId(), ""/zones"", bytes); } catch(IOException e) { e.printStackTrace(); } } } } }); } else { Uri path = Uri.parse(messageEvent.getPath()); int zone = Integer.parseInt(path.getPathSegments().get(0)); switch(path.getPathSegments().get(1)) { case ""on"": if(zone > 4) { //white cmd.LightsOn(zone); cmd.appState.setOnOff(zone, true); } else { //color cmd.LightsOn(zone); cmd.appState.setOnOff(zone, true); } break; case ""off"": if(zone > 4) { //white cmd.LightsOff(zone); cmd.appState.setOnOff(zone, false); } else { //color cmd.LightsOff(zone); cmd.appState.setOnOff(zone, false); } break; } } } "	0	0	1	1	1	0
protected void basicRemoveRelation(R rel) { // remove relation from all indexes getIndexMgr().removeValue(rel); getIndexMgr().remove(SaltUtil.IDX_ID_RELATIONS_INVERSE, rel.getId()); // remove relation also from layers for (Layer<N, R> layer : layers) { layer.removeRelation(rel); } // remove relation from internal list relations.remove(rel); } 	1	1	1	0	1	0
@Override public long getFirstPlayed() { Long firstPlayed = getNukkit().getFirstPlayed(); if (firstPlayed == null) { return 0; } return firstPlayed.longValue(); } 	0	0	1	1	1	0
protected void createComponents() { final GuiRenderer guiRenderer = new GuiRenderer(mc, mc.getTextureManager(), fontRendererObj, itemRender);  final GuiSubTexture guiBackground = new GuiSubTexture(TEXTURE, new Rectangle(0, 0, 176, 227)); final GuiTexture inactiveHandle = new GuiSubTexture(TEXTURE, new Rectangle(176, 0, 12, 15)); final GuiTexture activeHandle = new GuiSubTexture(TEXTURE, new Rectangle(176 + 12, 0, 12, 15)); final GuiTexture craftableSubtexture = new GuiSubTexture(TEXTURE, new Rectangle(0, 227, 142, 23)); final GuiTexture uncraftableSubtexture = new GuiSubTexture(TEXTURE, new Rectangle(0, 227 + 23, 142, 23));  setRootControl(new TexturedPaneControl(guiRenderer, 176, 227, guiBackground)); scrollbarGuiComponent = new ScrollbarControl(guiRenderer, activeHandle, inactiveHandle); scrollbarGuiComponent.setLocation(156, 24); scrollbarGuiComponent.setSize(20, 115);  final ProjectTableRecipeControl templateRecipeControl = new ProjectTableRecipeControl(guiRenderer, craftableSubtexture, uncraftableSubtexture); recipeListGuiComponent = new ScrollPaneControl<ProjectTableRecipe, ProjectTableRecipeControl>(guiRenderer, 141, 23*5) .setScrollbar(scrollbarGuiComponent) .setItemRendererTemplate(templateRecipeControl) .setVisibleItemCount(5) .setItems(filteredList); recipeListGuiComponent.setLocation(8, 24);  addChild(recipeListGuiComponent); addChild(scrollbarGuiComponent);  templateRecipeControl.addOnRecipeCraftingEventListener(new RecipeCraftingEventListener()); } 	1	0	1	0	1	0
"public void removePlayer(OfflinePlayer player, boolean silent) { Validate.notNull(player, ""The player cannot be null."");  players.remove(player.getUniqueId()); unregisterPlayer(player);  if (player.isOnline()) { if (!silent) ((Player) player).sendMessage(I.t(""{darkaqua}You are no longer part of the {0}{darkaqua} team."", getDisplayName()));  if (UHConfig.BEFORE_START.TEAM_IN_ACTION_BAR.get()) ActionBar.removeMessage((Player) player); } } "	0	1	1	0	1	0
"@PostConstruct private void initialize() { try { mongoClient = new MongoClient(new MongoClientURI(DATABASE_URI + ""?waitQueueMultiple="" + mongoThreadMultiplier)); } catch (UnknownHostException exception) { String error = String.format(""Error Connecting to MongoDB Instance: %s"", exception.getMessage()); logger.log(error, PiazzaLogger.FATAL); LOGGER.error(error); } } "	0	0	1	1	0	0
"@Transactional @RequireCSRFCheck public Result postEditSessionProblem(long sessionId, long sessionProblemId) throws SessionNotFoundException, SessionProblemNotFoundException { Session session = sessionService.findSessionById(sessionId); SessionProblem sessionProblem = sessionProblemService.findSessionProblemById(sessionProblemId);  if (!session.getJid().equals(sessionProblem.getSessionJid())) { return notFound(); }  Form<SessionProblemEditForm> sessionProblemEditForm = Form.form(SessionProblemEditForm.class).bindFromRequest(); if (formHasErrors(sessionProblemEditForm)) { return showEditSessionProblem(session, sessionProblem, sessionProblemEditForm); }  SessionProblemEditForm sessionProblemEditData = sessionProblemEditForm.get(); if (!sessionProblemEditData.alias.equals(sessionProblem.getAlias()) && !sessionProblemService.aliasExistsInSession(session.getJid(), sessionProblemEditData.alias)) { sessionProblemEditForm.reject(Messages.get(""error.session.problem.duplicateAlias""));  return showEditSessionProblem(session, sessionProblem, sessionProblemEditForm); }  sessionProblemService.updateSessionProblem(sessionProblem.getId(), sessionProblemEditData.alias, SessionProblemStatus.valueOf(sessionProblemEditData.status), IdentityUtils.getUserJid(), IdentityUtils.getIpAddress());  JerahmeelControllerUtils.getInstance().addActivityLog(BasicActivityKeys.EDIT_IN.construct(SESSION, session.getJid(), session.getName(), PROBLEM, sessionProblem.getProblemJid(), SandalphonResourceDisplayNameUtils.parseSlugByLanguage(JidCacheServiceImpl.getInstance().getDisplayName(sessionProblem.getProblemJid()))));  return redirect(routes.SessionProblemController.viewSessionProblems(session.getId())); } "	1	0	1	0	1	0
"public static <T> RichIterable<RichIterable<T>> chunk(T[] array, int size) { if (size <= 0) { throw new IllegalArgumentException(""Size for groups must be positive but was: "" + size); } int index = 0; MutableList<RichIterable<T>> result = Lists.mutable.empty(); while (index < array.length) { MutableList<T> batch = Lists.mutable.empty(); for (int i = 0; i < size && index < array.length; i++) { batch.add(array[i]); index++; } result.add(batch); } return result; } "	1	0	1	1	0	0
@Override public void onRouteFound(List<BusRouteResult> results) { cancelProgressDialog(); mMyBusMap.removeChargingPointMarkers(); if (results == null || results.isEmpty()) { showBottomSheetResults(false); mViewPagerAdapter = null; Toast.makeText(this, R.string.toast_no_result_found, Toast.LENGTH_LONG).show(); return; } else { startResultsActivity((ArrayList<BusRouteResult>) results); } } 	1	0	1	0	1	0
public static TypeFactory<?> typeFactory( TypeFactory<?> type, int tupleSize ) { if (tupleSize <= 1) return type; if (tupleSize == 2) return typeFactory(type, type); if (tupleSize == 3) return typeFactory(type, type, type); if (tupleSize == 4) return typeFactory(type, type, type, type); Collection<TypeFactory<?>> types = new ArrayList<TypeFactory<?>>(tupleSize); for (int i = 0; i != tupleSize; ++i) { types.add(type); } return new TupleNTypeFactory(types); } 	1	0	1	0	1	0
@Override public Serializer<TupleN> getSerializer( BufferManager bufferMgr ) { Serializer<?>[] serializers = new Serializer<?>[types.length]; for (int i = 0; i != types.length; ++i) { serializers[i] = (Serializer<?>)bufferMgr.nullSafeSerializerFor(types[i]); } return new TupleNSerializer(serializers); } 	1	1	1	0	1	0
private void openLayout() { JFileChooser chooser = createFileChooser(pref.get(CURRENT_DIR, null)); chooser.setMultiSelectionEnabled(false);  String fn = null; if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { pref.put(CURRENT_DIR, chooser.getCurrentDirectory().getAbsolutePath()); fn = chooser.getSelectedFile().getAbsolutePath(); }  if (fn != null) {  Object o = CheckLayoutSerializationFactory.loadLayout(fn);  if (o != null) { checkLayout = (CheckLayout) o; layout.setCheckLayout(checkLayout); layout.setTestPrint(true); loadModel(); previewPanel.setPrintable(layout); clear(); }  } } 	1	0	1	0	1	0
private void initMessages() { if (vm.isRunning() && !vm.getHasAgent()) { setMessage(ConstantsManager.getInstance().getConstants().liveSnapshotWithNoGuestAgentMsg()); }  if (isValidateByVmSnapshots()) { initVmSnapshots(); } else { initVmDisks(); } } 	1	0	1	1	0	0
@Nullable default public String getEncodedAsString (@Nullable final String sDecoded, @Nonnull final Charset aCharset) { if (sDecoded == null) return null;  final byte [] aDecoded = CharsetManager.getAsBytes (sDecoded, aCharset); return getEncodedAsString (aDecoded, 0, aDecoded.length); } 	1	1	1	1	0	0
@Nullable default public String getDecodedAsString (@Nullable final String sEncoded, @Nonnull final Charset aCharset) { if (sEncoded == null) return null;  final byte [] aEncoded = CharsetManager.getAsBytes (sEncoded, aCharset); return getDecodedAsString (aEncoded, 0, aEncoded.length); } 	1	1	1	1	0	0
@Override public boolean dispatchKeyEvent(KeyEvent event) { return windowCallback.dispatchKeyShortcutEvent(event); } 	1	0	1	1	0	0
"private Company[] createCompanies() { int companyCount = 1; Company[] companies = new Company[companyCount];  Company testCompany = new Company(""Test Company"", ""TEST""); testCompany.setPhone(""""); testCompany.setFax(""""); testCompany.setStreet(""""); testCompany.setZipcode(00000); testCompany.setCity(""""); testCompany.setCountry(""""); companies[--companyCount] = companyService.create(testCompany);  return companies; } "	1	1	1	1	0	0
"public void create(HttpServletRequest request, HttpServletResponse response) throws NotificationException, UserIsExistException, UserNotCreatedException { String login = request.getParameter(""login""); String password = request.getParameter(""password"");  if(login.length() == 0) { notifications.add(new Notification(""alert"", ""Login is empty."")); } else if(!Pattern.matches(Constant.REGEX_LOGIN, login)) { notifications.add(new Notification(""alert"", ""Login contain invalid characters."")); } if(password.length() == 0) { notifications.add(new Notification(""alert"", ""Password is empty."")); } else if(!Pattern.matches(Constant.REGEX_PASSWORD, password)) { notifications.add(new Notification(""alert"", ""Password contain invalid characters."")); }  if(!notifications.isEmpty()) { throw new NotificationException(); }  if(userDAO.isExist(login)) { notifications.add(new Notification(""alert"", ""User exist already."")); throw new UserIsExistException(); }  User user = new User(); user.setLogin(login); user.setPassword(password); user.setKey(Random.generate(160)); if(userDAO.create(user) != null) { notifications.add(new Notification(""alert"", ""User hasn't been created."")); throw new UserNotCreatedException(); } } "	1	1	1	0	1	0
private static void shrinkPolyline(final org.eclipse.graphiti.mm.algorithms.Polyline polyline) { int minX = Integer.MAX_VALUE; int maxX = Integer.MIN_VALUE; int minY = Integer.MAX_VALUE; int maxY = Integer.MIN_VALUE; for (final Point p : polyline.getPoints()) { minX = Math.min(minX, p.getX()); maxX = Math.max(maxX, p.getX()); minY = Math.min(minY, p.getY()); maxY = Math.max(maxY, p.getY()); }  for (final Point p : polyline.getPoints()) { p.setX(p.getX() - minX); p.setY(p.getY() - minY); }  polyline.setX(polyline.getX() + minX); polyline.setY(polyline.getY() + minY); polyline.setWidth(maxX - minX); polyline.setHeight(maxY - minY); } 	0	0	1	1	0	0
"@Override public String onPlaceholderRequest(Player player, String identifier) { switch (identifier) { case ""thirstmessage"": return ThirstManager.getThirst().getThirstString(player); case ""thirstbar"": return ThirstManager.getThirst().getThirstBar(player); case ""thirstpercent"": return ThirstManager.getThirst().getThirstPercent(player, true); case ""thirstremovalspeed"": return String.format(String.valueOf(ThirstManager.getThirst().getThirstData(player).getSpeed() / 1000), ""%.3f""); case ""thirstremovalamount"": return String.valueOf(Thirst.getInstance().getYAMLConfig().removeThirst); } return null; } "	1	0	1	1	0	0
"static public ServiceType getMetaData() {  ServiceType meta = new ServiceType(AzureTranslator.class.getCanonicalName()); meta.addDescription(""interface to Azure translation services""); meta.addCategory(""translation"", ""cloud"", ""ai""); meta.addDependency(""com.azure.translator"", ""0.6.2""); return meta; } "	0	0	1	1	1	0
"public Resource getCapability() {  // Set up resource type requirements for ApplicationMaster Resource capability = Records.newRecord(Resource.class); capability.setMemory(memoryMb); capability.setVirtualCores(vCores); DoYUtil.callSetDiskIfExists( capability, ""setDisks"", disks ); return capability; } "	1	1	1	1	0	0
public static void tokenizeFiles() { for (int i = 0; i < textFilesInFolder.size(); i++ ) { String text = fileContent.get(i); String index = tokenize(text);  //Add this index to the hash map. fileIndexesStoring.add(i, index); }  saveIndexes(); } 	1	0	1	1	0	0
public static void debug(String message, int level) { if (showDebug || debugLevel >= level) { queue.offer(new LogEvent(LogType.DEBUG, message)); } } 	1	0	1	1	0	0
protected void mergeProtocolSubmission(ProtocolBase amendment) { List<ProtocolSubmissionBase> submissions = (List<ProtocolSubmissionBase>) deepCopy(amendment.getProtocolSubmissions()); setNewSubmissionReferences(submissions); } 	1	0	1	0	1	0
public List<ProtocolAttachmentProtocolBase> getActiveAttachmentProtocols() { List<ProtocolAttachmentProtocolBase> activeAttachments = new ArrayList<>(); for (ProtocolAttachmentProtocolBase attachment1 : getAttachmentProtocols()) { if (attachment1.isDraft()) { activeAttachments.add(attachment1); } else if (attachment1.isFinal() || attachment1.isDeleted()) { boolean isActive = true; for (ProtocolAttachmentProtocolBase attachment2 : getAttachmentProtocols()) { if (attachment1.getDocumentId().equals(attachment2.getDocumentId()) && attachment1.getAttachmentVersion() < attachment2.getAttachmentVersion()) { isActive = false; break; } } if (isActive) { activeAttachments.add(attachment1); } else { attachment1.setActive(isActive); } } else { attachment1.setActive(false); } } return activeAttachments; } 	1	0	1	0	1	0
private static boolean imageAreaTest(Shape s1, Object option) { if (s1 == option) return true; if (!(option instanceof Shape)) return false; Shape s2 = (Shape) option; if (s1 == null || s2 == null) return false; if (s2.getClass() != s2.getClass()) return false; if (s1 instanceof RoundRectangle2D) { return s1.getBounds2D().equals(s2.getBounds2D()) && (((RoundRectangle2D) s1).getArcWidth() == ((RoundRectangle2D) s2).getArcWidth()) && (((RoundRectangle2D) s1).getArcHeight() == ((RoundRectangle2D) s2).getArcHeight()); } return s1.equals(s2); } 	0	1	1	1	1	0
public Builder orchestrationFlags(Map<String, Boolean> flags) { for (String key : flagKeys) { if (!orchestrationFlags.containsKey(key)) { flags.put(key, false); } } orchestrationFlags = flags; return this; } 	1	1	1	0	1	0
"@Nullable @SuppressWarnings(""unchecked"") public <T> T get(Class<T> queryClass, Map<String, Object> restrictionMap) { T object = null; Transaction transaction = null;  try (Session session = getSessionFactory().openSession()) { transaction = session.beginTransaction(); Criteria criteria = session.createCriteria(queryClass); if (restrictionMap != null && !restrictionMap.isEmpty()) { for (Entry<String, Object> entry : restrictionMap.entrySet()) { criteria.add(Restrictions.eq(entry.getKey(), entry.getValue())); } } object = (T) criteria.uniqueResult(); transaction.commit(); } catch (Exception e) { if (transaction != null) { transaction.rollback(); } throw e; }  return object; } "	1	0	1	0	1	0
"private List<Throwable> doAnyDiscovery(AbstractInvocationContext context, final FilterSpec filterSpec, final EJBLocator<?> locator) { Logs.INVOCATION.tracef(""Performing any discovery(locator = %s, weak affinity = %s, filter spec = %s)"", context.getLocator(), context.getWeakAffinity(), filterSpec); final List<Throwable> problems; // blacklist final Set<URI> blacklist = context.getAttachment(BL_KEY); final Map<URI, String> nodes = new HashMap<>(); final Map<String, URI> uris = new HashMap<>(); int nodeless = 0; try (final ServicesQueue queue = discover(filterSpec)) { ServiceURL serviceURL; while ((serviceURL = queue.takeService()) != null) { final URI location = serviceURL.getLocationURI(); if (blacklist == null || ! blacklist.contains(location)) { // Got a match!  See if there's a node affinity to set for the invocation. final AttributeValue nodeValue = serviceURL.getFirstAttributeValue(FILTER_ATTR_NODE); if (nodeValue != null) { if (nodes.remove(location, null)) { nodeless--; } final String nodeName = nodeValue.toString(); nodes.put(location, nodeName); uris.put(nodeName, location); } else { // just set the URI but don't overwrite a separately-found node name if (nodes.putIfAbsent(location, null) == null) { nodeless++; } } context.setDestination(location); } } problems = queue.getProblems(); } catch (InterruptedException e) { Thread.currentThread().interrupt(); throw Logs.MAIN.operationInterrupted(); }  if (nodes.isEmpty()) { // no match Logs.INVOCATION.tracef(""Performed any discovery, no match""); return problems; } URI location; String nodeName; if (nodes.size() == 1) { final Map.Entry<URI, String> entry = nodes.entrySet().iterator().next(); location = entry.getKey(); nodeName = entry.getValue(); Logs.INVOCATION.tracef(""Performed first-match discovery(target affinity(node) = %s, destination = %s)"", nodeName, location); } else if (nodeless == 0) { // use the deployment node selector // todo: configure on client context DeploymentNodeSelector selector = DeploymentNodeSelector.RANDOM; nodeName = selector.selectNode(nodes.values().toArray(NO_STRINGS), locator.getAppName(), locator.getModuleName(), locator.getDistinctName()); if (nodeName == null) { throw Logs.INVOCATION.selectorReturnedNull(selector); } location = uris.get(nodeName); if (location == null) { throw Logs.INVOCATION.selectorReturnedUnknownNode(selector, nodeName); } Logs.INVOCATION.tracef(""Performed first-match discovery, nodes > 1, deployment selector used(target affinity(node) = %s, destination = %s)"", nodeName, location); } else { // todo: configure on client context DiscoveredURISelector selector = DiscoveredURISelector.RANDOM; location = selector.selectNode(new ArrayList<>(nodes.keySet()), locator); if (location == null) { throw Logs.INVOCATION.selectorReturnedNull(selector); } nodeName = nodes.get(location); if (nodeName == null) { throw Logs.INVOCATION.selectorReturnedUnknownNode(selector, location.toString()); } Logs.INVOCATION.tracef(""Performed first-match discovery, nodes > 1, URI selector used(target affinity(node) = %s, destination = %s)"", nodeName, location); }  context.setDestination(location); context.setTargetAffinity(new NodeAffinity(nodeName)); return problems; } "	0	1	1	0	0	0
"@SuppressWarnings(""NullableProblems"") @Override public void onReceive(Context context, Intent intent) { String action = intent.getAction(); if (action.equals(ITEM_CLICK)) { // check if its the load more button being clicked String redditId = intent.getExtras().getString(WidgetProvider.ITEM_ID); if (""0"".equals(redditId)) { // LOAD MORE FEED ITEM CLICKED //System.out.println(""loading more feed items...""); int widgetid = intent.getExtras().getInt(AppWidgetManager.EXTRA_APPWIDGET_ID); // set loadmore indicator so the notifydatasetchanged function knows what to do setLoadMore(context); // show loader showLoaderAndUpdate(context, intent, new int[]{widgetid}, true); } else { // NORMAL FEED ITEM CLICK SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context); String clickPrefString = prefs.getString(context.getString(R.string.on_click_pref), ""1""); int clickPref = Integer.valueOf(clickPrefString); switch (clickPref) { case 1: // open in the reddinator view Intent clickIntent1 = new Intent(context, ViewRedditActivity.class); clickIntent1.putExtras(intent.getExtras()); clickIntent1.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); clickIntent1.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK); context.startActivity(clickIntent1); break; case 2: // open link in browser String url = intent.getStringExtra(ITEM_URL); Intent clickIntent2 = new Intent(Intent.ACTION_VIEW, Uri.parse(url)); clickIntent2.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); context.startActivity(clickIntent2); break; case 3: // open reddit comments page in browser String permalink = intent.getStringExtra(ITEM_PERMALINK); Intent clickIntent3 = new Intent(Intent.ACTION_VIEW, Uri.parse(""http://www.reddit.com"" + permalink)); clickIntent3.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); context.startActivity(clickIntent3); break; } } }  if (action.equals(APPWIDGET_UPDATE_FEED)) { // get widget id int widgetId = intent.getExtras().getInt(AppWidgetManager.EXTRA_APPWIDGET_ID); // set cache bypass incase widget needs new view factory setNoCache(context); // show loader and update data showLoaderAndUpdate(context, intent, new int[]{widgetId}, false); }  if (action.equals(APPWIDGET_AUTO_UPDATE)) { AppWidgetManager mgr = AppWidgetManager.getInstance(context); int[] appWidgetIds = mgr.getAppWidgetIds(new ComponentName(context, WidgetProvider.class)); // set cache bypass setNoCache(context); // perform full update onUpdate(context, mgr, appWidgetIds); // request update from service mgr.notifyAppWidgetViewDataChanged(appWidgetIds, R.id.listview); // this might not be needed }  if (action.equals(""android.intent.action.PACKAGE_RESTARTED"") || action.equals(""android.intent.action.PACKAGE_REPLACED"") || action.equals(""android.intent.action.PACKAGE_CHANGED"")) { AppWidgetManager mgr2 = AppWidgetManager.getInstance(context); int[] appWidgetIds = mgr2.getAppWidgetIds(new ComponentName(context, WidgetProvider.class)); // perform full widget update onUpdate(context, mgr2, appWidgetIds); } // System.out.println(""broadcast received: "" + action); super.onReceive(context, intent); } "	1	1	1	1	0	0
"@Override public List<Talent> process(List<UserImportEntity> users) { return users.stream().map(userImportEntity -> { Map<String,Object> profile = (Map<String,Object>) userImportEntity.getProfiles().get(SocialProvider.GITHUB);  if (profile == null) { return null; }  Talent.Builder talentBuilder = new Talent.Builder(); return talentBuilder.withEmail(userImportEntity.getEmail()) .withUsername(StringUtils.trimToEmpty((String) profile.get(""username""))) .withFullName(StringUtils.trimToEmpty((String) userImportEntity.getFullName())) .withImageUrl(StringUtils.trimToEmpty((String) profile.get(""imageUrl""))) .withCompany(StringUtils.trimToEmpty((String) profile.get(""company""))) .withDescription(StringUtils.trimToEmpty((String) profile.get(""description""))) .withLocation(StringUtils.trimToEmpty((String) profile.get(""location""))) .withJobTitle("""") .withSkills(((List<String>) profile.get(""skills""))) .build(); }).filter(talent -> talent != null).collect(Collectors.toList()); } "	0	0	1	1	0	0
private LuaValue lua$getChest(int index) throws InterruptedException { sleep(40); Chest[] chests = schedule(() -> ComputerHandler.findChests(computer), this::terminated); if (index > chests.length || index < 0) return LuaValue.NIL; LuaChest lua = new LuaChest(chests[index], this::terminated); return CoerceJavaToLua.coerce(lua); } 	0	1	1	1	1	0
"@SuppressWarnings(""unchecked"") public List<Servidores> getServersNOKVerActive() {  log.fine(""[ "" + userInfo.getLoggedUsername() + "" ] getServersNOKVerActive()"");  try { Criteria criteria = session().createCriteria(Servidores.class); criteria.add(Restrictions.or(Restrictions.eq(""trClass"", ""Errorr""), Restrictions.eq(""status"", ""NOK""))); criteria.add(Restrictions.eq(""verify"", ""SIM"")); criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY); return criteria.list();  } catch (Exception e) { log.severe(""[ "" + userInfo.getLoggedUsername() + "" ] Error: "" + e); return new ArrayList<Servidores>(); } } "	0	1	1	1	1	0
"public int countWindowsNOK() {  log.fine(""[ "" + userInfo.getLoggedUsername() + "" ] countWindowsOK()"");  try {  Criteria criteria = session().createCriteria(Servidores.class); criteria.add(Restrictions.and(Restrictions.eq(""SO"", ""WINDOWS""),(Restrictions.eq(""trClass"", ""Errorr"")))); criteria.setProjection(Projections.rowCount()); int count = ((Long) criteria.uniqueResult()).intValue(); log.fine(""[ "" + userInfo.getLoggedUsername() + "" ] countWindowsNOK -> "" + count + "" found.""); return count;  } catch (Exception e) { log.severe(""Error: "" + e); return 0; } } "	0	1	1	1	1	0
private boolean checkIfOnBoard( int[] move){ boolean a = (move[0] < board.getBoardSize() && move[0] < board.getBoardSize()); return a; } 	1	0	1	1	1	0
@Override protected void endRender() { int start = 5; int numElements = 4 * 2 + 1; for (int i = 0; i < numElements; i++) { glDisableVertexAttribArray(start + i); }  super.endRender(); } 	1	1	1	1	0	0
"public Race getCurrentRound() { if (this.rounds.size() <= this.currentRound) { return this.rounds.get(this.currentRound); } throw new IllegalArgumentException(""Current round does not exist in this.rounds""); } "	1	0	1	1	1	0
"@Override public ServiceResponse fetch(final OutputFormat format, boolean subPathways, final String... uris) { if (uris.length == 0) return new ErrorResponse(NO_RESULTS_FOUND, ""No URIs were specified for the query"");  if(!paxtoolsModelReady()) return new ErrorResponse(MAINTENANCE,""Waiting for the initialization to complete (try later)..."");  // extract/convert a sub-model try { final String[] mappedUris = findUrisByIds(uris);  Set<BioPAXElement> elements = urisToBpes(paxtoolsModel, mappedUris); if(elements.isEmpty()) { return new ErrorResponse(NO_RESULTS_FOUND, ""No BioPAX objects found by URI(s): "" + Arrays.toString(uris)); }  Model m = autoCompleteAndClone(elements, subPathways);  //name the sub-model - can be useful when converted to GSEA, etc... if(!m.getObjects().isEmpty()) { if(mappedUris.length==1) { String uri = mappedUris[0]; m.setUri(uri); BioPAXElement b = m.getByID(uri); if(b instanceof Named) { m.setName(((Named) b).getDisplayName() + "" "" + ArrayUtils.toString(uris)); } else { m.setName(ArrayUtils.toString(uris)); } } else { String desc = ArrayUtils.toString(uris); m.setUri(""PC_get_"" + desc.hashCode()); m.setName(desc); } }  return convert(m, format); } catch (Exception e) { return new ErrorResponse(INTERNAL_ERROR, e); } } "	1	0	1	0	1	0
public boolean setCurrentScreen(int id) { for(int i = 0; i < this.getScreens().size(); i++) if (this.getScreens().get(i).getID() == id) { this.getCurrentScreen().onStop(); this.currentScreen = i + 1; this.getGame().getClock().index(); this.getCurrentScreen().onStart(); this.getGame().getEventHandler().onScreenSet(this.getScreens().get(i)); return true; }  return false; } 	1	1	1	1	0	0
"public Location getSpectate() { return arena.get(""spactate""); } "	0	0	1	1	0	0
@Test public void testGetShouldTags() throws Exception { assertFalse(demand.getShouldTags().get(0).equals(original.getShouldTags().get(0)));  } 	0	0	1	1	1	0
"@ResponseBody @RequestMapping(value = ""/edit/{classification}"", method = RequestMethod.POST) public String create(@PathVariable SpaceClassification classification, @RequestBody String json) { // validation canWrite(); SpaceClassificationBean information = new SpaceClassificationBean(json); try { spaceClassificationService.verifyClassification(information); } catch (DomainException de) { return de.asJson().toString(); } if (classification == null) { classification = create(information); } else { try { spaceClassificationService.updateClassification(classification, information); } catch (DomainException de) { return de.asJson().toString(); } } JsonObject ok = new JsonObject(); String okS = ok.toString(); return okS; } "	0	1	1	0	1	0
@Override public char[] readPassword(String fmt, Object... args) { return console.readPassword(); } 	1	0	1	1	1	0
private int[] extendDistanceTableToPoints(TIntIntMap distanceTableToVertices) { int nPoints = this.size(); TIntIntMap distanceToPoint = new TIntIntHashMap(nPoints, 0.5f, Integer.MAX_VALUE, Integer.MAX_VALUE); Edge edge = streetLayer.edgeStore.getCursor(); // Iterate over all points. This is simpler than iterating over all the reached vertices. // Iterating over the reached vertices requires additional indexes and I'm not sure it would be any faster. // TODO iterating over all points seems excessive, only a few points will be close to the transit stop. for (int p = 0; p < nPoints; p++) {  // An edge index of -1 for a particular point indicates that this point is unlinked if (edges[p] == -1) continue;  edge.seek(edges[p]);  int t1 = Integer.MAX_VALUE, t2 = Integer.MAX_VALUE;  // TODO this is not strictly correct when there are turn restrictions onto the edge this is linked to if (distanceTableToVertices.containsKey(edge.getFromVertex())) t1 = distanceTableToVertices.get(edge.getFromVertex()) + distances0_mm[p];  if (distanceTableToVertices.containsKey(edge.getToVertex())) t1 = distanceTableToVertices.get(edge.getToVertex()) + distances1_mm[p];  int t = Math.min(t1, t2);  if (t != Integer.MAX_VALUE) { if (t < distanceToPoint.get(p)) { distanceToPoint.put(p, t); } } } if (distanceToPoint.size() == 0) { return null; } // Convert a packed array of pairs. // TODO don't put in a list and convert to array, just make an array. TIntList packed = new TIntArrayList(distanceToPoint.size() * 2); distanceToPoint.forEachEntry((point, distance) -> { packed.add(point); packed.add(distance); return true; // Continue iteration. }); return packed.toArray(); } 	1	1	1	0	1	0
"@Override public void signalResponseAvailable(String responseJSON) { this.queueResponseJSON.push(responseJSON); final WebView webView = (WebView) getView().findViewById(org.opendatakit.tables.R.id.webkit); this.getActivity().runOnUiThread(new Runnable() { @Override public void run() { webView.loadUrl(""javascript:datarsp.responseAvailable();""); } }); } "	1	0	1	1	1	0
protected void create(K k, V v, Handler<AsyncResult<Void>> completionHandler) { create(keyPath(k), v, completionHandler); } 	0	0	1	1	0	0
protected void setData(String path, V v, Handler<AsyncResult<Void>> completionHandler) { try { curator.setData().inBackground((client, event) -> { if (event.getType() == CuratorEventType.SET_DATA) { vertx.runOnContext(e -> completionHandler.handle(Future.succeededFuture())); } }).forPath(path, asByte(v)); } catch (Exception ex) { vertx.runOnContext(event -> completionHandler.handle(Future.failedFuture(ex))); } } 	0	0	1	1	0	0
"private void getPrixTTC(String prixHt, String tva) { float prix = 0; float taxe = 0; try { prix = Float.parseFloat(prixHt); taxe = Float.parseFloat(tva); } catch (Exception ex) { ex.getMessage(); } float prixTTC = prix + ((prix * taxe) / 100);  tvPrixTtc.setText(""Prix TTC : "" + prixTTC + ""€""); } "	0	0	1	1	1	0
private void resetExceptionBuilder() { exceptionBuilder = null; } 	0	0	1	1	0	0
@Test public void skipToHeart() throws Exception{ onView(withId(R.id.btnSkipPairing)).perform(click()); onView(ViewMatchers.withId(R.id.btnHeartRate)).perform(click()); inHeart = true; } 	1	1	1	0	1	0
public static void main(String[] args) {   Runnable task = () -> {  List<ExampleSnakePlayer> players = new ArrayList<>();  int noofPlayers = 25; for (int i = 0; i < noofPlayers; i++) { ExampleSnakePlayer player = new ExampleSnakePlayer(); player.connect(); players.add(player); }  // Keep this process alive as long as the // Snakes are playing. do { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } while (!allPlayersDone(players)); };   Thread thread = new Thread(task); thread.start(); } 	0	0	1	1	1	0
public void init(DueDate dueDate, int termPosition, int sectionPosition, int dueDatePosition) { this.dueDate         = dueDate; this.termPosition    = termPosition; this.sectionPosition = sectionPosition; this.dueDatePosition = dueDatePosition;  complete      = dueDate.isComplete(); daysRemaining = getDaysRemaining(dueDate.getDate());  setButtonText(); setButtonColor();  if (academics.inArchive()) { setOnClickListener(this); setOnLongClickListener(this); } } 	1	0	1	0	0	0
public long[] getActivatedAccountIds() { if (mAccountOptionsAdapter == null) { return Utils.getActivatedAccountIds(getActivity()); } return mAccountActionProvider.getActivatedAccountIds(); } 	0	0	1	1	1	0
"private void readDexPatternsFromXml(Node node) throws IOException { NodeList childNodes = node.getChildNodes(); if (childNodes.getLength() > 0) { for (int j = 0, n = childNodes.getLength(); j < n; j++) { Node child = childNodes.item(j); if (child.getNodeType() == Node.ELEMENT_NODE) { Element check = (Element) child; String tagName = check.getTagName();  String value = check.getAttribute(ATTR_VALUE); if (tagName.equals(ATTR_DEX_MODE)) { if (value.equals(""raw"")) { mDexRaw = true; } } else if (tagName.equals(ATTR_PATTERN)) { addToPatterns(value, mDexFilePattern); } else if (tagName.equals(ATTR_LOADER)) { mDexLoaderPattern.add(value); } else if (tagName.equals(ATTR_IGNORE_CHANGE)) { addToPatterns(value, mDexIgnoreWarningLoaderPattern); } else { System.err.println(""unknown dex tag "" + tagName); } } } } } "	1	1	1	1	0	0
@Override protected void initAdapter() { super.initAdapter(); mAdapter.setShouldShowpreview(true); } 	1	1	1	0	1	0
private static boolean mappingIsReversable(HashMap<Node, Node> mapping) { HashMap<Node, Node> reverseMapping = new HashMap<Node, Node>(); // reverse the mapping for (Node subNode: mapping.keySet()) { reverseMapping.put(mapping.get(subNode), subNode); } for (Node newSubNode: reverseMapping.keySet()) { // check attributes for (String attributeName: newSubNode.getAttributes().keySet()) { if (reverseMapping.get(newSubNode).getAttribute(attributeName).equals(newSubNode.getAttribute(attributeName))) { return false; } } // check edges for (String edgeName: newSubNode.getEdges().keySet()) { for (Node newTargetSubNode: newSubNode.getEdges(edgeName)) { if (!reverseMapping.get(newSubNode).getEdges(edgeName).contains(reverseMapping.get(newTargetSubNode))) { return false; } } } } return true; } 	1	1	1	1	0	0
"@Override public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) { Log.d(TAG, ""Succesfully loaded image from "" + from.name()); ImageView imageView = new ImageView(getContext()); imageView.setImageBitmap(bitmap); insertView(imageView); } "	0	1	1	0	1	0
"public void UnosVozaca(String Ime, String Prezime, String BrojVozacke, String Adresa, String BrojTelefona, String Username, String Sifra) { Session session = HibernateUtil.getSessionFactory().openSession(); Transaction t = session.beginTransaction(); if(Ime.length()<2){ JOptionPane.showMessageDialog(null, ""Neispravno uneseno ime""); return; }  if(Prezime.length()<3){ JOptionPane.showMessageDialog(null, ""Neispravno uneseno prezime""); return; }  if(BrojVozacke.length()!=9){ JOptionPane.showMessageDialog(null, ""Neispravno unesen broj vozacke""); return; }  if(Adresa.isEmpty()) { JOptionPane.showMessageDialog(null, ""Unesite adresu.""); return; }  if(BrojTelefona.length()!= 9 && BrojTelefona.length()!=10) { JOptionPane.showMessageDialog(null, ""Niste pravilno unijeli broj telefona.""); return; } if(Username.isEmpty()) { JOptionPane.showMessageDialog(null, ""Unesite username.""); return; } else { final Vector<String> v = new Vector<String>(); Session sesija = HibernateUtil.getSessionFactory().openSession();  listaVozaca = sesija.createCriteria(Vozac.class).list(); for (int i=0; i<listaVozaca.size(); i++) v.addElement(listaVozaca.get(i).getUsername());  for (int i = 0; i < listaVozaca.size(); i++) { if(listaVozaca.get(i).getUsername() == Username) { JOptionPane.showMessageDialog(null, ""Username vec postoji""); return; }  }  }  if(Sifra.length()<4) { JOptionPane.showMessageDialog(null, ""Sifra mora imati minimalno 4 slova.""); return; } Vozac v=new Vozac(); v.setIme(Ime); v.setPrezime(Prezime); v.setBrojVozacke(BrojVozacke); v.setAdresa(Adresa); v.setBrojTelefona(BrojTelefona); v.setUsername(Username); v.setPassword(LoginController.getSecurePassword(Sifra)); session.save(v); t.commit(); } "	1	0	1	1	0	0
"@Override @Before public void setUp() { super.setUp(); empiricalDistribution = new EmpiricalDistribution(100); url = getClass().getResource(""testData.txt""); final ArrayList<Double> list = new ArrayList<Double>(); try { empiricalDistribution2 = new EmpiricalDistribution(100); BufferedReader in = new BufferedReader(new InputStreamReader( url.openStream())); String str = null; while ((str = in.readLine()) != null) { list.add(Double.valueOf(str)); } in.close(); in = null; } catch (IOException ex) { Assert.fail(""IOException "" + ex); }  dataArray = new double[list.size()]; int i = 0; for (Double data : list) { dataArray[i] = data.doubleValue(); i++; } } "	1	0	1	0	1	0
@Override public String convertToPresentation(byte[] value, Class<? extends String> targetType, Locale locale) throws ConversionException { return value == null ? null : new String(value, StandardCharsets.UTF_8); } 	1	0	1	1	1	0
@Override protected void setResult() { Intent result = null; if (Intent.ACTION_PICK.equals(mAction)) { // create intent Cursor cursor = ((CurrencyListAdapter) getListAdapter()).getCursor();  for (int i = 0; i < getListView().getCount(); i++) { if (getListView().isItemChecked(i)) { cursor.moveToPosition(i);  result = new Intent(); result.putExtra(CurrenciesActivity.INTENT_RESULT_CURRENCYID, cursor.getInt(cursor.getColumnIndex(TableCurrencyFormats.CURRENCYID))); result.putExtra(CurrenciesActivity.INTENT_RESULT_CURRENCYNAME, cursor.getString(cursor.getColumnIndex(TableCurrencyFormats.CURRENCYNAME)));  getActivity().setResult(Activity.RESULT_OK, result);  return; } } } getActivity().setResult(CurrenciesActivity.RESULT_CANCELED); } 	1	0	1	0	1	0
"private boolean checkPlayServicesAndRegister() { // Check device for Play Services APK. If check succeeds, proceed with GCM registration. if (GcmIdentificationService.checkPlayServices(this)) { GcmIdentificationService idService = new GcmIdentificationService();  //Check if already registered idService.checkSetup(); return true; } else { Utils.log(""No valid Google Play Services APK found.""); return false; } } "	1	0	1	1	1	0
"private Reader createProperReader() throws IOException { String filepath = fileParameters.value(); String encoding = fileParameters.encoding();  if (filepath.indexOf(':') < 0) { return new FileReader(filepath); }  String protocol = filepath.substring(0, filepath.indexOf(':')); String filename = filepath.substring(filepath.indexOf(':') + 1);  if (""classpath"".equals(protocol)) { return new InputStreamReader(getClass().getClassLoader().getResourceAsStream(filename), encoding); } else if (""file"".equals(protocol)) { return new InputStreamReader(new FileInputStream(filename), encoding); }  throw new IllegalArgumentException(""Unknown file access protocol. Only 'file' and 'classpath' are supported!""); } "	0	1	1	0	1	0
public static void dropItemStack(ItemStack is, SimpleDoubleCoordStore sdcs) { if((is == null) || (sdcs == null)) return; World w = sdcs.getWorldObj(); if(w == null) return; EntityItem ie = new EntityItem(w, sdcs.x, sdcs.y, sdcs.z, is); ie.delayBeforeCanPickup = 0; w.spawnEntityInWorld(ie); } 	1	0	1	1	1	0
"@Override public boolean onCommand(ISender sender, String commandLabel, String[] args) { if (!Check.isTrue(args.length >= 1, Locale.get(Msg.CMD_FAIL_REQ_ONE_ARG).toString(), sender)) { return true; } if (plugin.getWebServer().isEnabled()) { sender.sendMessage(""§cWebServer is not enabled on this server! Make sure it enables on boot!""); return true; } String address = args[0].toLowerCase(); if (address.endsWith(""/"")) { address = address.substring(0, address.length() - 1); } try { plugin.getWebServer().getWebAPI().getAPI(PingWebAPI.class).sendRequest(address); plugin.getWebServer().getWebAPI().getAPI(RequestSetupWebAPI.class).sendRequest(address); sender.sendMessage(""§eConnection successful, Plan may restart in a few seconds, if it doesn't something has gone wrong.""); } catch (WebAPIException e) { Log.toLog(this.getClass().getName(), e); sender.sendMessage(""§cConnection to Bungee WebServer failed: More info on console""); } return true; } "	1	0	1	1	1	0
@Override public void onNext(LoanAndLoanRepayment loanAndLoanRepayment) { getMvpView().updateSingleSyncClientProgressBar(mLoanAndRepaymentSyncIndex); mLoanAndRepaymentSyncIndex = mLoanAndRepaymentSyncIndex + 1; if (mLoanAndRepaymentSyncIndex <=  mLoanAccountList.size()) { syncLoanAndLoanRepayment(mLoanAccountList .get(mLoanAndRepaymentSyncIndex).getId()); } else { syncClient(mClientList.get(mClientSyncIndex)); } } 	1	1	1	1	0	0
"protected void finalize(final Intent intent, final boolean forceRefresh) { /* * We are done with DFU. Now the service may refresh device cache and clear stored services. * For bonded device this is required only if if doesn't support Service Changed indication. * Android shouldn't cache services of non-bonded devices having Service Changed characteristic in their database, but it does, so... */ final boolean keepBond = intent.getBooleanExtra(DfuBaseService.EXTRA_KEEP_BOND, false); mService.refreshDeviceCache(mGatt, forceRefresh || !keepBond);  // Close the device mService.close(mGatt);  /* * During the update the bonding information on the target device may have been removed. * To create bond with the new application set the EXTRA_RESTORE_BOND extra to true. * In case the bond information is copied to the new application the new bonding is not required. */ boolean alreadyWaited = false; if (mGatt.getDevice().getBondState() == BluetoothDevice.BOND_BONDED) { final boolean restoreBond = intent.getBooleanExtra(DfuBaseService.EXTRA_RESTORE_BOND, false); if (restoreBond || !keepBond || (mFileType & DfuBaseService.TYPE_SOFT_DEVICE) > 0) { // The bond information was lost. removeBond();  // Give some time for removing the bond information. 300ms was to short, let's set it to 2 seconds just to be sure. mService.waitFor(2000); alreadyWaited = true; }  if (restoreBond && (mFileType & DfuBaseService.TYPE_APPLICATION) > 0) { // Restore pairing when application was updated. createBond(); alreadyWaited = false; } }  /* * We need to send PROGRESS_COMPLETED message only when all files has been transmitted. * In case you want to send the Soft Device and/or Bootloader and the Application, the service will be started twice: one to send SD+BL, and the * second time to send the Application only (using the new Bootloader). In the first case we do not send PROGRESS_COMPLETED notification. */ if (mProgressInfo.isLastPart()) { // Delay this event a little bit. Android needs some time to prepare for reconnection. if (!alreadyWaited) mService.waitFor(1400); mProgressInfo.setProgress(DfuBaseService.PROGRESS_COMPLETED); } else { /* * In case when the Soft Device has been upgraded, and the application should be send in the following connection, we have to * make sure that we know the address the device is advertising with. Depending on the method used to start the DFU bootloader the first time * the new Bootloader may advertise with the same address or one incremented by 1. * When the buttonless update was used, the bootloader will use the same address as the application. The cached list of services on the Android device * should be cleared thanks to the Service Changed characteristic (the fact that it exists if not bonded, or the Service Changed indication on bonded one). * In case of forced DFU mode (using a button), the Bootloader does not know whether there was the Service Changed characteristic present in the list of * application's services so it must advertise with a different address. The same situation applies when the new Soft Device was uploaded and the old * application has been removed in this process. * * We could have save the fact of jumping as a parameter of the service but it ma be that some Android devices must first scan a device before connecting to it. * It a device with the address+1 has never been detected before the service could have failed on connection. */ mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_VERBOSE, ""Scanning for the DFU Bootloader...""); final String newAddress = BootloaderScannerFactory.getScanner().searchFor(mGatt.getDevice().getAddress()); if (newAddress != null) mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_INFO, ""DFU Bootloader found with address "" + newAddress); else { mService.sendLogBroadcast(DfuBaseService.LOG_LEVEL_INFO, ""DFU Bootloader not found. Trying the same address...""); }  /* * The current service instance has uploaded the Soft Device and/or Bootloader. * We need to start another instance that will try to send application only. */ logi(""Starting service that will upload application""); final Intent newIntent = new Intent(); newIntent.fillIn(intent, Intent.FILL_IN_COMPONENT | Intent.FILL_IN_PACKAGE); newIntent.putExtra(DfuBaseService.EXTRA_FILE_MIME_TYPE, DfuBaseService.MIME_TYPE_ZIP); // ensure this is set (e.g. for scripts) newIntent.putExtra(DfuBaseService.EXTRA_FILE_TYPE, DfuBaseService.TYPE_APPLICATION); // set the type to application only if (newAddress != null) newIntent.putExtra(DfuBaseService.EXTRA_DEVICE_ADDRESS, newAddress); newIntent.putExtra(DfuBaseService.EXTRA_PART_CURRENT, mProgressInfo.getCurrentPart() + 1); newIntent.putExtra(DfuBaseService.EXTRA_PARTS_TOTAL, mProgressInfo.getTotalParts()); mService.startService(newIntent); } } "	1	1	1	1	0	0
private Collection<ParameterModel> getParameterModels(ModeledConnection connection) {  Map<String, String> parameters = connection.getConfiguration().getParameters();  // Convert parameters to model objects Collection<ParameterModel> parameterModels = new ArrayList(parameters.size()); for (Map.Entry<String, String> parameterEntry : parameters.entrySet()) {  // Get parameter name and value String name = parameterEntry.getKey(); String value = parameterEntry.getValue();  // There is no need to insert empty parameters if (value.isEmpty()) continue;  // Produce model object from parameter ParameterModel model = new ParameterModel(); model.setConnectionIdentifier(connection.getIdentifier()); model.setName(name); model.setValue(value);  // Add model to list parameterModels.add(model);  }  return parameterModels;  } 	1	0	1	0	1	0
public final void rule__ErrorSource__Group_6__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12709:1: ( ( When ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12710:1: ( When ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12710:1: ( When ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12711:1: When { before(grammarAccess.getErrorSourceAccess().getWhenKeyword_6_0()); match(input,When,FollowSets001.FOLLOW_When_in_rule__ErrorSource__Group_6__0__Impl26003); after(grammarAccess.getErrorSourceAccess().getWhenKeyword_6_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__EMV2Library__Group__3__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4049:1: ( ( ( rule__EMV2Library__Group_3__0 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4050:1: ( ( rule__EMV2Library__Group_3__0 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4050:1: ( ( rule__EMV2Library__Group_3__0 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4051:1: ( rule__EMV2Library__Group_3__0 )? { before(grammarAccess.getEMV2LibraryAccess().getGroup_3()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4052:1: ( rule__EMV2Library__Group_3__0 )? int alt45=2; int LA45_0 = input.LA(1);  if ( (LA45_0==Error) ) { int LA45_1 = input.LA(2);  if ( (LA45_1==Types) ) { alt45=1; } } switch (alt45) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4052:2: rule__EMV2Library__Group_3__0 { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__Group_3__0_in_rule__EMV2Library__Group__3__Impl8962); rule__EMV2Library__Group_3__0();  state._fsp--;   } break;  }  after(grammarAccess.getEMV2LibraryAccess().getGroup_3());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	1	1	0
public final void rule__ErrorModelSubclause__Group_9__5__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7929:1: ( ( Paths ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7930:1: ( Paths ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7930:1: ( Paths ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7931:1: Paths { before(grammarAccess.getErrorModelSubclauseAccess().getPathsKeyword_9_5()); match(input,Paths,FollowSets000.FOLLOW_Paths_in_rule__ErrorModelSubclause__Group_9__5__Impl16624); after(grammarAccess.getErrorModelSubclauseAccess().getPathsKeyword_9_5());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorSource__Group__8__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12660:1: ( ( Semicolon ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12661:1: ( Semicolon ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12661:1: ( Semicolon ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12662:1: Semicolon { before(grammarAccess.getErrorSourceAccess().getSemicolonKeyword_8()); match(input,Semicolon,FollowSets001.FOLLOW_Semicolon_in_rule__ErrorSource__Group__8__Impl25923); after(grammarAccess.getErrorSourceAccess().getSemicolonKeyword_8());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorPath__Group__6__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:13300:1: ( ( HyphenMinusGreaterThanSign ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:13301:1: ( HyphenMinusGreaterThanSign ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:13301:1: ( HyphenMinusGreaterThanSign ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:13302:1: HyphenMinusGreaterThanSign { before(grammarAccess.getErrorPathAccess().getHyphenMinusGreaterThanSignKeyword_6()); match(input,HyphenMinusGreaterThanSign,FollowSets001.FOLLOW_HyphenMinusGreaterThanSign_in_rule__ErrorPath__Group__6__Impl27178); after(grammarAccess.getErrorPathAccess().getHyphenMinusGreaterThanSignKeyword_6());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorModelSubclause__Group_3__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5707:1: ( ( Mappings ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5708:1: ( Mappings ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5708:1: ( Mappings ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5709:1: Mappings { before(grammarAccess.getErrorModelSubclauseAccess().getMappingsKeyword_3_1()); match(input,Mappings,FollowSets000.FOLLOW_Mappings_in_rule__ErrorModelSubclause__Group_3__1__Impl12241); after(grammarAccess.getErrorModelSubclauseAccess().getMappingsKeyword_3_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorModelSubclause__Group_5__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5965:1: ( ( Propagations ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5966:1: ( Propagations ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5966:1: ( Propagations ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5967:1: Propagations { before(grammarAccess.getErrorModelSubclauseAccess().getPropagationsKeyword_5_1()); match(input,Propagations,FollowSets000.FOLLOW_Propagations_in_rule__ErrorModelSubclause__Group_5__1__Impl12743); after(grammarAccess.getErrorModelSubclauseAccess().getPropagationsKeyword_5_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__TypeDefinition__Group__2__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9058:1: ( ( Semicolon ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9059:1: ( Semicolon ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9059:1: ( Semicolon ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9060:1: Semicolon { before(grammarAccess.getTypeDefinitionAccess().getSemicolonKeyword_2()); match(input,Semicolon,FollowSets000.FOLLOW_Semicolon_in_rule__TypeDefinition__Group__2__Impl18847); after(grammarAccess.getTypeDefinitionAccess().getSemicolonKeyword_2());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__EMV2Library__Group_3__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4178:1: ( ( Error ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4179:1: ( Error ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4179:1: ( Error ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4180:1: Error { before(grammarAccess.getEMV2LibraryAccess().getErrorKeyword_3_0()); match(input,Error,FollowSets000.FOLLOW_Error_in_rule__EMV2Library__Group_3__0__Impl9218); after(grammarAccess.getEMV2LibraryAccess().getErrorKeyword_3_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__TypeTransformationSet__Group__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10783:1: ( ( Transformations ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10784:1: ( Transformations ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10784:1: ( Transformations ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10785:1: Transformations { before(grammarAccess.getTypeTransformationSetAccess().getTransformationsKeyword_1()); match(input,Transformations,FollowSets000.FOLLOW_Transformations_in_rule__TypeTransformationSet__Group__1__Impl22212); after(grammarAccess.getTypeTransformationSetAccess().getTransformationsKeyword_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorModelSubclause__Group_6__9__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6497:1: ( ( End ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6498:1: ( End ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6498:1: ( End ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6499:1: End { before(grammarAccess.getErrorModelSubclauseAccess().getEndKeyword_6_9()); match(input,End,FollowSets000.FOLLOW_End_in_rule__ErrorModelSubclause__Group_6__9__Impl13816); after(grammarAccess.getErrorModelSubclauseAccess().getEndKeyword_6_9());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	1	1	0
public final void rule__TypeSetDefinition__Group_1_0__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9510:1: ( ( Type ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9511:1: ( Type ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9511:1: ( Type ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9512:1: Type { before(grammarAccess.getTypeSetDefinitionAccess().getTypeKeyword_1_0_1()); match(input,Type,FollowSets000.FOLLOW_Type_in_rule__TypeSetDefinition__Group_1_0__1__Impl19725); after(grammarAccess.getTypeSetDefinitionAccess().getTypeKeyword_1_0_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorModelSubclause__Group_2__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5545:1: ( ( Type ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5546:1: ( Type ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5546:1: ( Type ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5547:1: Type { before(grammarAccess.getErrorModelSubclauseAccess().getTypeKeyword_2_1()); match(input,Type,FollowSets000.FOLLOW_Type_in_rule__ErrorModelSubclause__Group_2__1__Impl11926); after(grammarAccess.getErrorModelSubclauseAccess().getTypeKeyword_2_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorModelSubclause__Group_1__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5291:1: ( ( Use ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5292:1: ( Use ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5292:1: ( Use ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5293:1: Use { before(grammarAccess.getErrorModelSubclauseAccess().getUseKeyword_1_0()); match(input,Use,FollowSets000.FOLLOW_Use_in_rule__ErrorModelSubclause__Group_1__0__Impl11427); after(grammarAccess.getErrorModelSubclauseAccess().getUseKeyword_1_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorModelSubclause__Group_4__3__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5895:1: ( ( Semicolon ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5896:1: ( Semicolon ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5896:1: ( Semicolon ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5897:1: Semicolon { before(grammarAccess.getErrorModelSubclauseAccess().getSemicolonKeyword_4_3()); match(input,Semicolon,FollowSets000.FOLLOW_Semicolon_in_rule__ErrorModelSubclause__Group_4__3__Impl12611); after(grammarAccess.getErrorModelSubclauseAccess().getSemicolonKeyword_4_3());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__NoErrorTypeSet__Group__3__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10301:1: ( ( RightCurlyBracket ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10302:1: ( RightCurlyBracket ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10302:1: ( RightCurlyBracket ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10303:1: RightCurlyBracket { before(grammarAccess.getNoErrorTypeSetAccess().getRightCurlyBracketKeyword_3()); match(input,RightCurlyBracket,FollowSets000.FOLLOW_RightCurlyBracket_in_rule__NoErrorTypeSet__Group__3__Impl21277); after(grammarAccess.getNoErrorTypeSetAccess().getRightCurlyBracketKeyword_3());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	1	1	0
public final void rule__EMV2Library__Group_3__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4209:1: ( ( Types ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4210:1: ( Types ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4210:1: ( Types ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4211:1: Types { before(grammarAccess.getEMV2LibraryAccess().getTypesKeyword_3_1()); match(input,Types,FollowSets000.FOLLOW_Types_in_rule__EMV2Library__Group_3__1__Impl9280); after(grammarAccess.getEMV2LibraryAccess().getTypesKeyword_3_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__FeatureorPPReference__Group_1__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12360:1: ( ( FullStop ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12361:1: ( FullStop ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12361:1: ( FullStop ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12362:1: FullStop { before(grammarAccess.getFeatureorPPReferenceAccess().getFullStopKeyword_1_0()); match(input,FullStop,FollowSets001.FOLLOW_FullStop_in_rule__FeatureorPPReference__Group_1__0__Impl25314); after(grammarAccess.getFeatureorPPReferenceAccess().getFullStopKeyword_1_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__EMV2Library__Group_3_3__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4689:1: ( ( Extends ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4690:1: ( Extends ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4690:1: ( Extends ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4691:1: Extends { before(grammarAccess.getEMV2LibraryAccess().getExtendsKeyword_3_3_0()); match(input,Extends,FollowSets000.FOLLOW_Extends_in_rule__EMV2Library__Group_3_3__0__Impl10224); after(grammarAccess.getEMV2LibraryAccess().getExtendsKeyword_3_3_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__TypeTokenOrNoError__Group_1__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10656:1: ( ( LeftCurlyBracket ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10657:1: ( LeftCurlyBracket ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10657:1: ( LeftCurlyBracket ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10658:1: LeftCurlyBracket { before(grammarAccess.getTypeTokenOrNoErrorAccess().getLeftCurlyBracketKeyword_1_0()); match(input,LeftCurlyBracket,FollowSets000.FOLLOW_LeftCurlyBracket_in_rule__TypeTokenOrNoError__Group_1__0__Impl21964); after(grammarAccess.getTypeTokenOrNoErrorAccess().getLeftCurlyBracketKeyword_1_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__TypeMappingSet__Group__7() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11636:1: ( rule__TypeMappingSet__Group__7__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11637:2: rule__TypeMappingSet__Group__7__Impl { pushFollow(FollowSets001.FOLLOW_rule__TypeMappingSet__Group__7__Impl_in_rule__TypeMappingSet__Group__723899); rule__TypeMappingSet__Group__7__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	1	1	0
public final void rule__ErrorModelSubclause__Group_2__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5514:1: ( ( Use ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5515:1: ( Use ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5515:1: ( Use ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5516:1: Use { before(grammarAccess.getErrorModelSubclauseAccess().getUseKeyword_2_0()); match(input,Use,FollowSets000.FOLLOW_Use_in_rule__ErrorModelSubclause__Group_2__0__Impl11864); after(grammarAccess.getErrorModelSubclauseAccess().getUseKeyword_2_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorModelSubclause__Group_9__6__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7959:1: ( ( Semicolon ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7960:1: ( Semicolon ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7960:1: ( Semicolon ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7961:1: Semicolon { before(grammarAccess.getErrorModelSubclauseAccess().getSemicolonKeyword_9_6()); match(input,Semicolon,FollowSets000.FOLLOW_Semicolon_in_rule__ErrorModelSubclause__Group_9__6__Impl16683); after(grammarAccess.getErrorModelSubclauseAccess().getSemicolonKeyword_9_6());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__TypeSetDefinition__Group_1_1__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9768:1: ( ( Renames ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9769:1: ( Renames ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9769:1: ( Renames ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9770:1: Renames { before(grammarAccess.getTypeSetDefinitionAccess().getRenamesKeyword_1_1_0()); match(input,Renames,FollowSets000.FOLLOW_Renames_in_rule__TypeSetDefinition__Group_1_1__0__Impl20228); after(grammarAccess.getTypeSetDefinitionAccess().getRenamesKeyword_1_1_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorModelSubclause__Group_8__4__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7543:1: ( ( End ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7544:1: ( End ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7544:1: ( End ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7545:1: End { before(grammarAccess.getErrorModelSubclauseAccess().getEndKeyword_8_4()); match(input,End,FollowSets000.FOLLOW_End_in_rule__ErrorModelSubclause__Group_8__4__Impl15868); after(grammarAccess.getErrorModelSubclauseAccess().getEndKeyword_8_4());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorModelSubclause__Group_1_3__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5451:1: ( ( Comma ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5452:1: ( Comma ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5452:1: ( Comma ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5453:1: Comma { before(grammarAccess.getErrorModelSubclauseAccess().getCommaKeyword_1_3_0()); match(input,Comma,FollowSets000.FOLLOW_Comma_in_rule__ErrorModelSubclause__Group_1_3__0__Impl11741); after(grammarAccess.getErrorModelSubclauseAccess().getCommaKeyword_1_3_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorSource__Group_7__1() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12852:1: ( rule__ErrorSource__Group_7__1__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12853:2: rule__ErrorSource__Group_7__1__Impl { pushFollow(FollowSets001.FOLLOW_rule__ErrorSource__Group_7__1__Impl_in_rule__ErrorSource__Group_7__126279); rule__ErrorSource__Group_7__1__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	1	1	0
public final void rule__ErrorModelLibrary__Group__4() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8180:1: ( rule__ErrorModelLibrary__Group__4__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8181:2: rule__ErrorModelLibrary__Group__4__Impl { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__Group__4__Impl_in_rule__ErrorModelLibrary__Group__417112); rule__ErrorModelLibrary__Group__4__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	1	1	0
public final void rule__TypeMapping__Group__3() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11994:1: ( rule__TypeMapping__Group__3__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11995:2: rule__TypeMapping__Group__3__Impl { pushFollow(FollowSets001.FOLLOW_rule__TypeMapping__Group__3__Impl_in_rule__TypeMapping__Group__324593); rule__TypeMapping__Group__3__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	1	1	0
public final void rule__ErrorModelLibrary__Group_1_2__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8549:1: ( ( Types ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8550:1: ( Types ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8550:1: ( Types ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8551:1: Types { before(grammarAccess.getErrorModelLibraryAccess().getTypesKeyword_1_2_1()); match(input,Types,FollowSets000.FOLLOW_Types_in_rule__ErrorModelLibrary__Group_1_2__1__Impl17842); after(grammarAccess.getErrorModelLibraryAccess().getTypesKeyword_1_2_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorModelSubclause__Group_7_3__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7353:1: ( ( States ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7354:1: ( States ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7354:1: ( States ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7355:1: States { before(grammarAccess.getErrorModelSubclauseAccess().getStatesKeyword_7_3_0()); match(input,States,FollowSets000.FOLLOW_States_in_rule__ErrorModelSubclause__Group_7_3__0__Impl15482); after(grammarAccess.getErrorModelSubclauseAccess().getStatesKeyword_7_3_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__EMV2Library__Group__6() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4124:1: ( rule__EMV2Library__Group__6__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4125:2: rule__EMV2Library__Group__6__Impl { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__Group__6__Impl_in_rule__EMV2Library__Group__69115); rule__EMV2Library__Group__6__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	1	1	1	0
public final void rule__TypeMapping__Group__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11946:1: ( ( HyphenMinusGreaterThanSign ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11947:1: ( HyphenMinusGreaterThanSign ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11947:1: ( HyphenMinusGreaterThanSign ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11948:1: HyphenMinusGreaterThanSign { before(grammarAccess.getTypeMappingAccess().getHyphenMinusGreaterThanSignKeyword_1()); match(input,HyphenMinusGreaterThanSign,FollowSets001.FOLLOW_HyphenMinusGreaterThanSign_in_rule__TypeMapping__Group__1__Impl24502); after(grammarAccess.getTypeMappingAccess().getHyphenMinusGreaterThanSignKeyword_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorSink__Group__2__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12956:1: ( ( Error ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12957:1: ( Error ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12957:1: ( Error ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12958:1: Error { before(grammarAccess.getErrorSinkAccess().getErrorKeyword_2()); match(input,Error,FollowSets001.FOLLOW_Error_in_rule__ErrorSink__Group__2__Impl26493); after(grammarAccess.getErrorSinkAccess().getErrorKeyword_2());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__TypeMappingSet__Group__7__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11647:1: ( ( Semicolon ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11648:1: ( Semicolon ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11648:1: ( Semicolon ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11649:1: Semicolon { before(grammarAccess.getTypeMappingSetAccess().getSemicolonKeyword_7()); match(input,Semicolon,FollowSets001.FOLLOW_Semicolon_in_rule__TypeMappingSet__Group__7__Impl23927); after(grammarAccess.getTypeMappingSetAccess().getSemicolonKeyword_7());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorModelLibrary__Group_1_3_2__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8868:1: ( ( Comma ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8869:1: ( Comma ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8869:1: ( Comma ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8870:1: Comma { before(grammarAccess.getErrorModelLibraryAccess().getCommaKeyword_1_3_2_0()); match(input,Comma,FollowSets000.FOLLOW_Comma_in_rule__ErrorModelLibrary__Group_1_3_2__0__Impl18467); after(grammarAccess.getErrorModelLibraryAccess().getCommaKeyword_1_3_2_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__TypeSetDefinition__Group_1_1__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9799:1: ( ( Type ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9800:1: ( Type ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9800:1: ( Type ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9801:1: Type { before(grammarAccess.getTypeSetDefinitionAccess().getTypeKeyword_1_1_1()); match(input,Type,FollowSets000.FOLLOW_Type_in_rule__TypeSetDefinition__Group_1_1__1__Impl20290); after(grammarAccess.getTypeSetDefinitionAccess().getTypeKeyword_1_1_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__EMV2Library__Group_3_2__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4466:1: ( ( Use ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4467:1: ( Use ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4467:1: ( Use ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4468:1: Use { before(grammarAccess.getEMV2LibraryAccess().getUseKeyword_3_2_0()); match(input,Use,FollowSets000.FOLLOW_Use_in_rule__EMV2Library__Group_3_2__0__Impl9787); after(grammarAccess.getEMV2LibraryAccess().getUseKeyword_3_2_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
public final void rule__ErrorModelSubclause__Group_4__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5836:1: ( ( Behavior ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5837:1: ( Behavior ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5837:1: ( Behavior ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5838:1: Behavior { before(grammarAccess.getErrorModelSubclauseAccess().getBehaviorKeyword_4_1()); match(input,Behavior,FollowSets000.FOLLOW_Behavior_in_rule__ErrorModelSubclause__Group_4__1__Impl12492); after(grammarAccess.getErrorModelSubclauseAccess().getBehaviorKeyword_4_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	1	1	0	1	0
static InputValidator inRange(int min, int max) { return (value) -> { if(!IS_INTEGER.apply(value)) { return false; } int intValue = Integer.parseInt(value); return intValue  >= min && intValue <= intValue ; }; } 	0	0	1	1	1	0
public static String getCompanyHomepage(String name){  List<String> resources = getResourceByLabel(name); String companyHomepage = null;  //Try resources until company is found for(String r : resources){ if(resourceIsCompany(r)){ companyHomepage = getResourceHomepage(r); break; } }  return companyHomepage; } 	0	0	1	1	1	0
"public boolean isAnime(File f) { if (MediaDetection.parseEpisodeNumber(f.getName(), false).isEmpty()) { return false; } if (anyMatch(f.getParentFile(), ANIME_PATTERN) || find(f.getName(), ANIME_EPISODE_PATTERN) || find(f.getName(), EMBEDDED_CHECKSUM)) { return true; }  // check for Japanese audio or characteristic subtitles if (VIDEO_FILES.accept(f)) { try (MediaInfo mi = new MediaInfo().open(f)) { long minutes = Duration.ofMillis(Long.parseLong(mi.get(StreamKind.General, 0, ""Duration""))).toMinutes(); return minutes < 60 || mi.get(StreamKind.General, 0, ""AudioLanguageList"").contains(""Japanese"") && mi.get(StreamKind.General, 0, ""TextCodecList"").contains(""ASS""); } catch (Exception e) { debug.warning(""Failed to read audio language: "" + e.getMessage()); } } return false; } "	1	0	1	0	1	0
private boolean jj_3R_48() { if (jj_3R_77()) return true; return false; } 	0	0	1	1	0	0
public ParseException generateParseException() { jj_expentries.clear(); boolean[] la1tokens = new boolean[154]; if (jj_kind >= 0) { la1tokens[jj_kind] = true; jj_kind = -1; } for (int i = 0; i < 149; i++) { if (jj_la1[i] == jj_gen) { for (int j = 0; j < 32; j++) { if ((jj_la1_0[i] & (1<<j)) != 0) { la1tokens[j] = true; } if ((jj_la1_1[i] & (1<<j)) != 0) { la1tokens[32+j] = true; } if ((jj_la1_2[i] & (1<<j)) != 0) { la1tokens[64+j] = true; } if ((jj_la1_3[i] & (1<<j)) != 0) { la1tokens[96+j] = true; } if ((jj_la1_4[i] & (1<<j)) != 0) { la1tokens[128+j] = true; } } } } for (int i = 0; i < 154; i++) { if (la1tokens[i]) { jj_expentry = new int[1]; jj_expentry[0] = i; jj_expentries.add(jj_expentry); } } jj_endpos = 0; jj_rescan_token(); jj_add_error_token(0, 0); int[][] exptokseq = new int[jj_expentries.size()][]; for (int i = 0; i < jj_expentries.size(); i++) { exptokseq[i] = jj_expentries.get(i); } return new ParseException(token, exptokseq, tokenImage); } 	0	0	1	1	1	0
private boolean jj_3R_121() { if (jj_3R_134()) return true; return false; } 	0	0	1	1	1	0
private boolean jj_3R_69() { if (jj_3R_104()) return true; return false; } 	0	0	1	1	0	0
private boolean jj_3R_151() { if (jj_3R_156()) return true; return false; } 	0	0	1	1	1	0
@Override public int compare(Task task1, Task task2) { if ((task1.getEndDate() == null && task2.getEndDate() == null) || ((task1.getEndDate() != null && task2.getEndDate() != null) && task1.getEndDate().equals(task2.getEndDate()))) { if (task1.getPriority() != task2.getPriority()) { return task2.getPriority().ordinal() - task1.getPriority().ordinal(); } } else if (task1.getEndDate() == null || task2.getEndDate() == null) { if (task1.getEndDate() == null) { return 1; } else { return -1; } } else { if (task1.getStartDate() != null && task2.getStartDate() != null) { task1.getStartDate().compareTo(task2.getStartDate()); } else if (task1.getStartDate() != null) { return task1.getStartDate().compareTo(task2.getEndDate()); } else if (task2.getStartDate() != null) { return task1.getEndDate().compareTo(task2.getStartDate()); } else { return task1.getEndDate().compareTo(task2.getEndDate()); } }  return (int) (task1.getId() - task2.getId()); } 	1	1	1	1	0	0
@Override public void startElement(TLProperty element) { super.startElement(element); int repeat = element.getRepeat(); TLPropertyType type = element.getType(); // list facets and repeatable refs are handled separately if ((repeat > 1 || repeat < 0) && !(type instanceof TLListFacet) && !element.isReference()) { String nodeName = getPropertyElementName(element, type); JsonNode node = context.getNode(); JsonNode jn = node.findValue(nodeName); ArrayNode arrayNode; if (jn != null) { // must be an array arrayNode = (ArrayNode) jn; } else { arrayNode = nodeFactory.arrayNode(); ((ObjectNode) node).set(nodeName, arrayNode); }  contextStack.add(context); context = new ExampleContext(element); context.setNode(arrayNode); }  contextStack.push(context); context = new ExampleContext(element); } 	1	1	1	1	0	0
@Override public boolean onBlockActivated(World world, int x, int y, int z, EntityPlayer player, int side, float fx, float fy, float fz) { if (!world.isRemote) { TileTable tile = (TileTable) world.getTileEntity(x, y, z);  if (tile != null) { if (!player.isSneaking() && side == 1) { ItemStack held = player.getHeldItem();  if (tile.stack != null && (held == null || !(held.getItem() instanceof ItemHammer))) { player.setCurrentItemOrArmor(0, tile.stack.copy()); tile.setStack(null); return true; }  if (held != null && tile.stack == null) { if (tile.attractedFlies) { if (held.getItem() == SubsistenceItems.net && held.getItemDamage() == 0) { held.setItemDamage(1); tile.attractedFlies = false; return true; } }  ItemStack stack = held.copy(); stack.stackSize = 1;  tile.setStack(stack);  held.stackSize--; if (held.stackSize <= 0) { player.setCurrentItemOrArmor(0, null); } } else { if (!tile.smash(player)) { if (tile.stack != null && held == null) { player.setCurrentItemOrArmor(0, tile.stack.copy()); tile.setStack(null); return true; } else if (tile.stack != null) { if (tile.stack.isItemEqual(held) && (held.stackSize + 1 <= held.getItem().getItemStackLimit(held))) { held.stackSize += tile.stack.stackSize;  if (held.stackSize > held.getMaxStackSize()) { held.stackSize = held.getMaxStackSize(); tile.stack.stackSize = held.stackSize - held.getMaxStackSize(); world.markBlockForUpdate(x, y, z); } else { tile.setStack(null); }  return true; } } } } } } }  return !player.isSneaking(); } 	1	0	1	0	1	0
public int getNumberOfIntervals() { return numberOfIntervals + (running ? 1 : 0); } 	1	0	1	0	1	0
"public static String numberToString(Number number) throws JSONException { if (number == null) { throw new JSONException(""Number must be non-null""); }  double doubleValue = number.doubleValue(); JSON.checkDouble(doubleValue);  // the original returns ""-0"" instead of ""-0.0"" for negative zero if (number.equals(NEGATIVE_ZERO)) { return ""-0""; }  long longValue = number.longValue(); if (doubleValue == (double) longValue) { return Long.toString(longValue); }  return number.toString(); } "	1	1	1	0	1	0
"@Override protected Object getValueByMappedAttribute(AttributeMapping attribute, List<IcAttribute> icAttributes) {  Object transformedValue = super.getValueByMappedAttribute(attribute, icAttributes);  if (PARENT_FIELD.equals(attribute.getIdmPropertyName()) && transformedValue != null) { String parentUid = transformedValue.toString(); UUID systemId = ((SysSystemAttributeMapping)attribute).getSystemMapping().getSystem().getId(); // Find account by UID from parent field AccountFilter accountFilter = new AccountFilter(); accountFilter.setUid(parentUid); accountFilter.setSystemId(systemId); transformedValue = null; List<AccAccount> parentAccounts = accountService.find(accountFilter, null).getContent(); if (!parentAccounts.isEmpty()) { UUID parentAccount = parentAccounts.get(0).getId(); // Find relation between tree and account TreeAccountFilter treeAccountFilter = new TreeAccountFilter(); treeAccountFilter.setAccountId(parentAccount); List<AccTreeAccountDto> treeAccounts = treeAccoutnService.find(treeAccountFilter, null).getContent(); if(!treeAccounts.isEmpty()){ // Find parent tree node by ID // TODO: resolve more treeAccounts situations transformedValue = treeNodeService.get(treeAccounts.get(0).getTreeNode()); } else { LOG.warn( ""For parent UID: [{}] on system ID [{}] and acc account: [{}], was not found tree accounts! Return null value in parent!!"", parentUid, systemId, parentAccount); throw new ProvisioningException(AccResultCode.SYNCHRONIZATION_TREE_PARENT_TREE_ACCOUNT_NOT_FOUND, ImmutableMap.of(""parentUid"", parentUid, ""systemId"", systemId, ""parentAccount"", parentAccount)); } } else { LOG.warn( ""For parent UID: [{}] on system ID [{}], was not found parents account! Return null value in parent!!"", parentUid, systemId); throw new ProvisioningException(AccResultCode.SYNCHRONIZATION_TREE_PARENT_ACCOUNT_NOT_FOUND, ImmutableMap.of(""parentUid"", parentUid, ""systemId"", systemId)); } } return transformedValue; } "	1	0	1	1	1	0
@Override public void updateEntity() { super.updateEntity(); if (!worldObj.isRemote) { if (hasMaster()) { if (isMaster()) { doMultiBlockStuff(); } } else { // Constantly check if structure is formed until it is. if (checkMultiBlockForm()) setupStructure(); } } } 	0	1	1	0	1	0
private List<Question> getSectionsQuestions(Module module) { List<Question> questionList = new ArrayList<>(100); List<Section>  sections     = module.getSections();  for (Section section : sections) { List<Question> questions = getChaptersQuestions(section); questionList.addAll(questions); }  return questionList; } 	0	0	1	1	1	0
private List<Question> getModulesQuestions(Course course) { List<Question> questionList = new ArrayList<>(300); List<Module>   modules      = course.getModules();  for (Module module : modules) { List<Question> questions = getSectionsQuestions(module); questionList.addAll(questions); }  return questionList; } 	0	0	1	1	1	0
"public void addClaim() throws ParseException  { if (startDate.getText().toString().equals("""") ||endDate.getText().toString().equals("""")) { Toast.makeText(AddClaimActivity.this,""Incomplete Fields"", Toast.LENGTH_SHORT).show(); } else {  //Initializing variables Date sdate = df.parse(startDate.getText().toString()); Date edate = df.parse(endDate.getText().toString());  //XML Inputs String name = editTextName.getText().toString(); String description = editTextDescription.getText().toString();  if (name.equals("""") || description.equals("""")) { Toast.makeText(AddClaimActivity.this,""Incomplete Fields"", Toast.LENGTH_SHORT).show(); } else {  //create claim id = CLC.addClaim(name, sdate, edate, description, this.user); ArrayList<Destination> destination = parentActivity.getDestination(); CLC.getClaim(id).setDestination(destination);  //add Tag to Claim for (int i = 0; i<  tagsArrayList.size(); i++){ try { CLC.addTagToClaim(id, tagsArrayList.get(i).toString()); } catch (AlreadyExistsException e) { e.printStackTrace(); } }  //toast finished Toast.makeText(AddClaimActivity.this,""Claim Saved."", Toast.LENGTH_SHORT).show(); finish(); } } } "	1	0	1	1	1	0
"public Text StringToText(String input) throws IOException{   HyphenationOperation hyOp = new HyphenationOperation(); StringTokenizer st=new StringTokenizer(input); String row =""""; ArrayList<String> lines; lines = new ArrayList<>(); Text text;    int SpaceLeft= lmax; int SpaceWidth=1;    do { String word=st.nextToken(); if((word.length()+SpaceWidth)>SpaceLeft) { //long word have to be hyphenated to fulfill the line //length constraints  row = row.substring(0, row.length()-1); lines.add(row); row = """"; row += word.endsWith(""-"") ? word.substring(0, word.length()-1) : word + "" "";  if(!st.hasMoreTokens()) lines.add(word);   SpaceLeft = lmax - word.length();  } else { //if text is small then one single line if (!st.hasMoreElements()){ row += word; lines.add(row); break;  }  row += word.endsWith(""-"") ? word.substring(0, word.length()-1) : word + "" "";; SpaceLeft-=(word.length()+SpaceWidth); } }//do while(st.hasMoreTokens());      text = new Text(lines);  return text;  } "	1	0	1	1	1	0
private void applyNotificationIconsTint() { for (int i = 0; i < mNotificationIcons.getChildCount(); i++) { StatusBarIconView v = (StatusBarIconView) mNotificationIcons.getChildAt(i); boolean isPreL = Boolean.TRUE.equals(v.getTag(R.id.icon_is_pre_L)); boolean colorize = !isPreL || isGrayscale(v); if (colorize) { v.setImageTintList(ColorStateList.valueOf(mNotificationIconColorTint)); } } if (mShowTicker && mTicker != null && mTickerView != null) { mTicker.setIconColorTint(ColorStateList.valueOf(mNotificationIconColorTint)); } } 	1	0	1	1	1	0
"@Override public void execute() { if (enabled) { Collection<Long> triggerKeys = notificationDao.listTriggerKeys(); if (triggerKeys!=null && triggerKeys.isEmpty()) { for (Long tKey : triggerKeys) { NotificationTrigger trigger = notificationDao.getTrigger(tKey); logger.debug(""try to execute notifications on trigger [{}]"", trigger); if (trigger != null) { TriggerHandler handler = getHandlerForType(trigger.getType()); if (handler != null) { String newState = handler.handleTrigger(trigger.getStoredState(), notificationDao.listTriggerSubscriptions(trigger), trigger.getCfg()); trigger.setStoredState(newState); trigger.setChangeDate(new Date()); notificationDao.updateTrigger(trigger, tKey); } } } } } } "	1	1	1	1	0	0
"private void markUnmatchedStep(IFile featureFile, IDocument doc, gherkin.formatter.model.Step stepLine) throws BadLocationException, CoreException {  FindReplaceDocumentAdapter find = new FindReplaceDocumentAdapter(doc); IRegion region = find.find(doc.getLineOffset(stepLine.getLine() - 1), stepLine.getName(), true, true, false, false);  markerManager.add(UNMATCHED_STEP_ERROR_ID, featureFile, IMarker.SEVERITY_WARNING, ""Step does not have a matching glue code."", stepLine.getLine() - 1, region.getOffset(), region.getOffset() + region.getLength()); } "	0	0	1	1	0	0
"public void readEmploymentData () { // SMZ,State,RET00,OFF00,IND00,OTH00,RET07,OFF07,IND07,OTH07,RET10,OFF10,IND10,OTH10,RET30,OFF30,IND30,OTH30,RET40,OFF40,IND40,OTH40 TableDataSet employment = MitoUtil.readCSVfile(rb.getString(PROPERTIES_EMPLOYMENT_FILE)); int[] indEmpl = employment.getColumnAsInt(""IND00""); int[] retEmpl = employment.getColumnAsInt(""RET00""); int[] offEmpl = employment.getColumnAsInt(""OFF00""); int[] othEmpl = employment.getColumnAsInt(""OTH00""); int[] totEmpl = new int[indEmpl.length]; for (int i = 0; i < indEmpl.length; i++) totEmpl[i] = indEmpl[i] + retEmpl[i] + offEmpl[i] * othEmpl[i]; setRetailEmplByZone(retEmpl); setOfficeEmplByZone(offEmpl); setOtherEmplByZone(othEmpl); setTotalEmplByZone(totEmpl); } "	1	1	1	0	1	0
"private void appendParentToLine(Sample parent, List<String> line, Set<String> additionalSamplesToReport){ if (parent == null){ line.add(""Unknown""); line.add(""false""); line.add(""""); } else { line.add(parent.getID()); MVSummary summary = sampleMap.get(parent.getID()); line.add(String.valueOf(summary == null)); line.add(summary == null ? """" : String.valueOf(summary.totalViolations)); additionalSamplesToReport.add(parent.getID()); } } "	1	1	1	0	1	0
"public void SwitchTo(int lexState) { if (lexState >= 4 || lexState < 0) throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE); else curLexState = lexState; } "	1	0	1	1	1	0
public Weapon addWeapon(ItemEnum id, String name, String description, int x, int y, Quest requiredItem, StatStruc modify){ this.id = id; location = new Location(x,y,0); requirement = new Requirement(requiredItem); effect = new Effect(modify); return new Weapon(id, name, description, location, requirement, effect); } 	1	1	1	1	0	0
"public static boolean isValidPriority(String test) { return (test == ""1"" || test == ""2"" || test == ""3""); } "	0	0	1	1	1	0
@Override protected void onCreate(final Bundle savedInstanceState) { super.onCreate(savedInstanceState);  setContentView(R.layout.address_book_content);  final FragmentManager fragmentManager = getSupportFragmentManager();  walletAddressesFragment = (WalletAddressesFragment) fragmentManager.findFragmentByTag(TAG_LEFT); sendingAddressesFragment = (SendingAddressesFragment) fragmentManager.findFragmentByTag(TAG_RIGHT);  final FragmentTransaction removal = fragmentManager.beginTransaction();  if (walletAddressesFragment == null) walletAddressesFragment = new WalletAddressesFragment(); else removal.remove(walletAddressesFragment);  if (sendingAddressesFragment == null) sendingAddressesFragment = new SendingAddressesFragment(); else removal.remove(sendingAddressesFragment);  if (!removal.isEmpty()) { removal.commit(); fragmentManager.executePendingTransactions(); }  final ViewPager pager = (ViewPager) findViewById(R.id.address_book_pager); if (pager != null) { pager.setAdapter( new TwoFragmentAdapter(fragmentManager, walletAddressesFragment, sendingAddressesFragment));  final ViewPagerTabs pagerTabs = (ViewPagerTabs) findViewById(R.id.address_book_pager_tabs); pagerTabs.addTabLabels(R.string.address_book_list_receiving_title, R.string.address_book_list_sending_title);  pager.setOnPageChangeListener(pagerTabs); final int position = 1; pager.setCurrentItem(position); pager.setPageMargin(2); pager.setPageMarginDrawable(R.color.bg_less_bright);  pagerTabs.onPageSelected(position); pagerTabs.onPageScrolled(position, 0, 0); } else { fragmentManager.beginTransaction().add(R.id.wallet_addresses_fragment, walletAddressesFragment, TAG_LEFT) .add(R.id.sending_addresses_fragment, sendingAddressesFragment, TAG_RIGHT).commit(); }  updateFragments(); } 	0	0	1	1	0	0
public void save(boolean block){ this.saved = true; this.blocked = block; Preferences.set(this.id, false); } 	1	1	1	0	1	0
"@Override public void onCommand(User user, PircBotX network, String prefix, Channel channel, boolean isPrivate, int userPermLevel, String... args) throws Exception { boolean IPv6Priority = false; if(args[0].startsWith(""+"")){ IPv6Priority = true; args[0] = args[0].replaceFirst(""\\+"",""""); } String IP = GeneralUtils.getIP(args[0], network, IPv6Priority); if (IP == null) { ErrorUtils.sendError(user, ""Host Unreachable""); } else { String command = """"; if (InetAddressUtils.isIPv6Address(IP)) { command = ""ping6 -c 1 "" + IP; } else if (InetAddressUtils.isIPv4Address(IP)) { command = ""ping -c 1 "" + IP; } Process pinghost = Runtime.getRuntime().exec(command); BufferedReader buffereader = new BufferedReader(new InputStreamReader(pinghost.getInputStream())); boolean haslines = false; String line =""""; while ((line = buffereader.readLine()) != null) { if (line.contains(""time="")) { haslines = true; String[] ips = line.split("" ""); IRCUtils.sendMessage(user, network, channel, IP + "": "" + ips[ips.length-2].replace(""time="", """") + "" milliseconds"", prefix); } } buffereader.close(); if(!haslines || pinghost.exitValue() != 0) { ErrorUtils.sendError(user, ""Host Unreachable""); } }  } "	1	1	1	1	0	0
public boolean addTo(NamedFacebookType receiver) { return to.add(from); } 	1	0	1	1	1	0
@OnClick(R.id.reload) void onReload() { if (onReloadListener != null && !progressBar.isShown()) { onReloadListener.onClick(reload); } } 	1	0	1	0	1	0
public void setConserveSpace(boolean flag) { this.conserveSpace = flag; } 	1	0	1	0	1	0
public void setAdjustPriority(String adjustPriorityString) { this.adjustPriority = adjustPriorityString; } 	1	0	1	0	1	0
public void setVisitors(String commaSeperatedString) { this.visitors = commaSeperatedString; } 	1	0	1	0	1	0
public void setReportLevel(String level) { this.reportLevel = level; } 	1	0	1	0	1	0
"@Override @Transactional public List<TaskLedger> searchLedger(String jobId) { Session session = getSession(); Criteria c = session.createCriteria(TaskLedger.class, ""tl""); c.add(Restrictions.eq(""tl.jobId"", jobId)); @SuppressWarnings(""unchecked"") List<TaskLedger> taskLedger = c.list(); // Ensure the objects have been fully fetched before leaving the // transaction. if (taskLedger.size() > 0) taskLedger.get(0); return taskLedger; } "	0	1	1	0	1	0
public void setFile(long projectID, File f) { synchronized (FILE_LIST) { f.setProjectID(projectID); Project p = projects.get(projectPathToID); p.addFile(f); } } 	1	0	1	1	1	0
private void waitForExpectedStatus(final String title, ActivationStatus status) { wait.withTimeout(Timeouts.MEDIUM).until(new ExpectedCondition<Boolean>() { @Nullable @Override public Boolean apply(@Nullable WebDriver webDriver) { webDriver.navigate().refresh(); ChildPageRow childPage = getChildPageWindow(webDriver).getChildPageRow(title); PageActivationStatus pageActivationStatusCell = childPage.getPageActivationStatus(); ActivationStatus activationStatus = pageActivationStatusCell.getActivationStatus(); return activationStatus.equals(status); } }, Timeouts.SMALL); } 	1	0	1	0	1	0
"@PostConstruct public static void load() throws NoSuchAlgorithmException {  logger.info(""Loading application properties..."");  try { IRIProperties sqlProperties = new IRIProperties(SQL_QUERIES_FILE);  // User queries GET_USER_BY_ID = sqlProperties.getString(""GetUserById"", ""SELECT * FROM users WHERE id = ?;""); GET_USER_LIST = sqlProperties.getString(""GetUserList"", ""SELECT id, name, surname, date_of_birth FROM users;""); ADD_USER = sqlProperties.getString(""AddUser"", ""INSERT INTO users(name, surname, date_of_birth) VALUES(?, ?, ?);""); EDIT_USER = sqlProperties.getString(""EditUser"", ""UPDATE users SET name = ?, surname = ?,  phone_no = ?, address = ? WHERE id = ?;"");  // Account queries GET_ACCOUNT_BY_ID = sqlProperties.getString(""GetAccountById"", ""SELECT * FROM accounts WHERE id = ?;""); GET_ACCOUNT_BY_USERNAME = sqlProperties.getString(""GetAccountByUsername"", ""SELECT * FROM accounts WHERE username = ?;""); GET_ACCOUNT_BY_EMAIL = sqlProperties.getString(""GetAccountByEmail"", ""SELECT * FROM accounts WHERE email = ?;""); GET_ACCOUNT_LIST = sqlProperties.getString(""GetAccountList"", ""SELECT id, username, email, join_date FROM accounts;""); ADD_ACCOUNT = sqlProperties.getString(""AddAccount"", ""INSERT INTO accounts(id, username, password, email, join_date) VALUES(?, ?, ?, ?, ?);""); EDIT_ACCOUNT = sqlProperties.getString(""EditAccount"", ""UPDATE accounts SET username = ?, password = ?, email = ? WHERE id = ?;"");  // Image queries GET_IMAGE_BY_ID = sqlProperties.getString(""GetImageById"", ""SELECT * FROM user_images WHERE id = ?;""); GET_PROFILE_IMAGE_BY_USER_ID = sqlProperties.getString(""GetProfileImageByUserId"", ""SELECT * FROM user_images WHERE user_id = ? AND is_profile_img = 1;""); GET_IMAGES_BY_USER_ID = sqlProperties.getString(""GetImagesByUserId"", ""SELECT * FROM user_images WHERE user_id = ?;""); ADD_IMAGE = sqlProperties.getString(""AddImage"", ""INSERT INTO user_images(user_id, is_profile_img, img_uri) VALUES(?, ?, ?);""); DELETE_IMAGE = sqlProperties.getString(""DeleteImage"", ""DELETE FROM user_images WHERE id = ?;"");  // Hobby queries GET_HOBBY_BY_ID = sqlProperties.getString(""GetHobbyById"", ""SELECT * FROM hobbies WHERE id = ?;""); GET_HOBBY_LIST = sqlProperties.getString(""GetHobbyList"", ""SELECT * FROM hobbies;""); GET_HOBBIES_BY_USER_ID = sqlProperties.getString(""GetHobbiesByUserId"", ""SELECT * FROM user_hobbies WHERE user_id = ?;""); ADD_USER_HOBBY = sqlProperties.getString(""AddUserHobby"", ""INSERT INTO user_hobbies (user_id, hobby_id) VALUES(?, ?);""); DELETE_USER_HOBBY = sqlProperties.getString(""DeleteUserHobby"", ""DELETE FROM user_hobbies WHERE user_id = ?;"");  // Comment queries GET_COMMENT_BY_ID = sqlProperties.getString(""GetCommentById"", ""SELECT * FROM comments WHERE id = ?;""); GET_COMMENTS_BY_SUBJECT_TYPE_AND_ID = sqlProperties.getString(""GetCommentsBySubjectTypeAndId"", ""SELECT id, poster_id, content, creation_date, last_edit_date FROM comments WHERE subject_type = ? AND subject_id = ?;""); GET_COMMENTS_BY_POSTER_ID = sqlProperties.getString(""GetCommentsByPosterId"", ""SELECT id, poster_id, subject_type, subject_id, content, creation_date FROM comments WHERE poster_id = ?;""); GET_COMMENT_REPLY_BY_ID = sqlProperties.getString(""GetCommentReplyById"", ""SELECT * FROM comment_replies WHERE id = ?;""); GET_COMMENT_REPLIES_BY_PARENT_ID = sqlProperties.getString(""GetCommentRepliesByParentId"", ""SELECT id, poster_id, content, creation_date, last_edit_date FROM comment_replies WHERE parent_id = ?;"");  // Metrics queries GET_METRICS_BY_USER_ID = sqlProperties.getString(""GetMetricsByUserId"", ""SELECT * FROM METRICS WHERE userID = ?;""); GET_METRICS_LIST = sqlProperties.getString(""GetMetricsList"", ""SELECT * FROM METRICS;""); INIT_USER_METRICS = sqlProperties.getString(""InitUserMetrics"", ""INSERT INTO METRICS(userId) VALUES(?);""); EDIT_METRICS = sqlProperties.getString(""EditMetrics,"" + ""UPDATE METRICS SET weight=?, height=?, education=?, nationality=?, placeOfBirth=? WHERE userId=?;"");  // Event queries GET_EVENTS_BY_USER_ID = sqlProperties.getString(""GetEventsByUserId"", ""SELECT * FROM USER_SELECTED_DATES WHERE userID = ?""); GET_EVENT_LIST = sqlProperties.getString(""GetEventList"", ""SELECT * FROM USER_SELECTED_DATES;""); ADD_EVENT = sqlProperties.getString(""AddEvent"", ""INSERT INTO USER_SELECTED_DATES (userId,dateOfEvent,Title,Description) VALUES (?,?,?,?);"");  // User education queries GET_USER_EDUCATION_BY_USER_ID = sqlProperties.getString(""GetUserEducationByUserId"", ""SELECT * FROM user_education WHERE user_id = ?;""); GET_USERS_BY_EDUCATION_LEVEL = sqlProperties.getString(""GetUsersByEducationLevel"", ""SELECT user_id FROM user_education WHERE education_level = ?;"");  logger.info(""sql_queries properties loaded...""); } catch (NullPointerException e) { logger.warn(""Loading the sql_queries.properties file failed! "" + e); System.exit(0); }  try { IRIProperties jwtProperties = new IRIProperties(JWT_FILE);  KEY_LIFETIME_IN_HOURS = jwtProperties.getInt(""KeyLifetimeInHours"", 720); generateJWTSigningKey(); logger.info(""JWT properties loaded...""); } catch (NullPointerException e) { logger.warn(""Loading the jwt_key.properties failed! "" + e); System.exit(0); }  logger.info(""Application properties loading finished.""); } "	0	0	1	1	0	0
"private String getOptionalValue(ArgumentTokenizer tokenizer, Prefix prefix) { if (!tokenizer.getValue(prefix).isPresent()) { return """"; } else { return tokenizer.getValue(PREFIX_STARTDATE).get(); } } "	1	0	1	1	1	0
private JsonOwlObject renderObject(OWLClass cls) { String id = IdStringManager.getId(cls, graph); JsonOwlObject json = JsonOwlObject.createCls(id, getLabel(cls, id)); return json; } 	1	0	1	0	1	0
public JsonOwlIndividual renderObject(OWLNamedIndividual i) { JsonOwlIndividual json = new JsonOwlIndividual(); json.id = IdStringManager.getId(i, graph);  List<JsonOwlObject> typeObjs = new ArrayList<JsonOwlObject>(); Set<OWLClassExpression> assertedTypes = i.getTypes(ont); for (OWLClassExpression x : assertedTypes) { typeObjs.add(renderObject(x)); } json.type = typeObjs.toArray(new JsonOwlObject[typeObjs.size()]);  if (reasoner != null && reasoner.isConsistent()) { List<JsonOwlObject> inferredTypeObjs = new ArrayList<JsonOwlObject>(); Set<OWLClass> inferredTypes = reasoner.getTypes(i, true).getFlattened(); // optimization, do not render inferences, if they are equal to the asserted ones if (assertedTypes.equals(inferredTypes) == false) { for(OWLClass c : inferredTypes) { if (c.isBuiltIn() == false) { inferredTypeObjs.add(renderObject(c)); } } } if (inferredTypeObjs.isEmpty() == false) { json.inferredType = inferredTypeObjs.toArray(new JsonOwlObject[inferredTypeObjs.size()]); } }  final List<JsonAnnotation> anObjs = new ArrayList<JsonAnnotation>(); Set<OWLAnnotationAssertionAxiom> annotationAxioms = ont.getAnnotationAssertionAxioms(i.getIRI()); for (OWLAnnotationAssertionAxiom ax : annotationAxioms) { JsonAnnotation jsonAnn = JsonTools.create(ax.getProperty(), ax.getValue()); if (jsonAnn != null) { anObjs.add(jsonAnn); } } Set<OWLDataPropertyAssertionAxiom> dataPropertyAxioms = ont.getDataPropertyAssertionAxioms(i); for (OWLDataPropertyAssertionAxiom ax : dataPropertyAxioms) { OWLDataProperty property = ax.getProperty().asOWLDataProperty(); JsonAnnotation jsonAnn = JsonTools.create(property, ax.getObject()); if (jsonAnn != null) { anObjs.add(jsonAnn); } }  if (anObjs.isEmpty() == false) { json.annotations = anObjs.toArray(new JsonAnnotation[anObjs.size()]); } return json; } 	1	1	1	1	0	0
public static List<JsonEvidenceInfo> renderEvidences(OWLOntologyManager manager) throws OWLException, IOException { // TODO remove the hard coded ECO dependencies OntologyMapperPair<EcoMapper> pair = EcoMapperFactory.createEcoMapper(manager); final OWLGraphWrapper graph = pair.getGraph(); final EcoMapper mapper = pair.getMapper(); Set<OWLClass> ecoClasses = graph.getAllOWLClasses(); Map<OWLClass, String> codesForEcoClasses = mapper.getCodesForEcoClasses(); List<JsonEvidenceInfo> relList = new ArrayList<JsonEvidenceInfo>(); for (OWLClass ecoClass : ecoClasses) { if (ecoClass.isBuiltIn()) { continue; } JsonEvidenceInfo json = new JsonEvidenceInfo(); json.id = IdStringManager.getId(ecoClass, graph); json.label = graph.getLabel(ecoClass); String code = codesForEcoClasses.get(ecoClass); if (code != null) { json.code = code; } relList.add(json); } return relList; } 	1	1	1	0	1	0
@Deprecated public static void showDialog(FragmentManager fm, List<MediaIntent> mediaIntent) { if (mediaIntent == null || mediaIntent.size() == 0) { return; }  final BelvedereDialog dialog = new BelvedereDialog(); dialog.setArguments(getBundle(mediaIntent, new ArrayList<MediaResult>(0), new ArrayList<MediaResult>(0), true, new ArrayList<Integer>(0))); dialog.show(fm.beginTransaction(), FRAGMENT_TAG); } 	1	1	1	0	1	0
"@RequestMapping(value = ""/data/file"", method = RequestMethod.POST) public ResponseEntity<PiazzaResponse> ingestDataFile(@RequestParam(required = true) String data, @RequestParam(required = true) final MultipartFile file, Principal user) { try { IngestJob job; try { // Serialize the JSON payload of the multipart request job = new ObjectMapper().readValue(data, IngestJob.class); } catch (Exception exception) { throw new Exception(String.format( ""Incorrect JSON passed through the `data` parameter. Please verify input. Error: %s"", exception.getMessage())); } // Ensure the user isn't trying to hack a dataId into their request. job.getData().setDataId(null); // Ensure the file was uploaded. This is required. if (file == null) { throw new Exception(""File not specified in request.""); } // Log the request logger.log( String.format(""User %s requested Data Load Job of type %s with file"", gatewayUtil.getPrincipalName(user), job.getData().getDataType().getType(), file.getOriginalFilename()), PiazzaLogger.INFO); // Validate the Job inputs to ensure we are able to process the file // and attach it to the job metadata. if (job.getHost() == false) { throw new Exception(""Host parameter must be set to true when loading a file.""); } else if (job.getData().getDataType() instanceof FileRepresentation == false) { throw new Exception(""The uploaded file cannot be attached to the specified Data Type: "" + job.getData().getDataType().getType()); } // Send the file to S3. String jobId = gatewayUtil.getUuid(); job = gatewayUtil.pushS3File(jobId, job, file); // Create the Request to send to Kafka PiazzaJobRequest request = new PiazzaJobRequest(); request.jobType = job; request.userName = gatewayUtil.getPrincipalName(user); ProducerRecord<String, String> message = JobMessageFactory.getRequestJobMessage(request, jobId, SPACE); // Send the message to Kafka gatewayUtil.sendKafkaMessage(message); // Attempt to wait until the user is able to query the Job ID // immediately. gatewayUtil.verifyDatabaseInsertion(jobId); // Return the Job ID of the newly created Job return new ResponseEntity<PiazzaResponse>(new PiazzaResponse(jobId), HttpStatus.OK); } catch (Exception exception) { exception.printStackTrace(); String error = String.format(""Error Loading Data File for user %s of type %s"", gatewayUtil.getPrincipalName(user), exception.getMessage()); logger.log(error, PiazzaLogger.ERROR); return new ResponseEntity<PiazzaResponse>(new ErrorResponse(null, error, ""Gateway""), HttpStatus.INTERNAL_SERVER_ERROR); } } "	0	0	1	1	0	0
"@Test public void publishNoPublishToInactiveSubscriptions() { SubscriptionsStore mockedSubscriptions = mock(SubscriptionsStore.class); Subscription inactiveSub = new Subscription(""Subscriber"", ""/topic"", QOSType.LEAST_ONE, false); inactiveSub.setActive(false); List<Subscription> inactiveSubscriptions = Arrays.asList(inactiveSub); when(mockedSubscriptions.matches(eq(""/topic""))).thenReturn(inactiveSubscriptions); m_processor = new ProtocolProcessor(); m_processor.init(mockedSubscriptions, m_storageService, m_sessionStore, null);  //Exercise ByteBuffer buffer = ByteBuffer.allocate(5).put(""Hello"".getBytes()); PublishMessage msg = new PublishMessage(); msg.setTopicName(""/topic""); msg.setQos(QOSType.MOST_ONE); msg.setPayload(buffer); msg.setRetainFlag(true); m_session.setAttribute(NettyChannel.ATTR_KEY_CLIENTID, ""Publisher""); m_processor.processPublish(m_session, msg);  //Verify no message is received assertNull(m_receivedMessage); } "	0	1	1	0	1	0
"@Override public StageResult processAckOnMaster(List<DistStageAck> acks) { masterState.addListener(new MasterListener.Adapter() { @Override public void afterCluster() { masterState.remove(getCounterName()); masterState.removeListener(this); } }); int value = updateState(masterState); if (inc == 0) { log.error(""Invalid increment value: "" + inc); return errorResult(); } if ((inc > 0 && value > to) || (inc < 0 && value < to)) { return StageResult.BREAK; } else { return StageResult.SUCCESS; } } "	1	0	1	0	0	0
"public Item toModelType() throws IllegalValueException { final Description description = new Description(this.description); LocalDateTime start; LocalDateTime end; boolean isDone; UniqueTagList tags; // extract dates from XML data DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""yyyy-MM-dd HH:mm""); if (this.startDate.equals("""")) { start = null; } else { start = LocalDateTime.parse(startDate, formatter); } if (this.endDate.equals("""")) { end = null; } else { end = LocalDateTime.parse(endDate, formatter); } // extract isDone from XML data assert !this.isDone.isEmpty(); if (this.isDone.equals(""true"")) { isDone = true; } else { isDone = false; } // extract tags from XML data final List<Tag> itemTags = new ArrayList<>(); for (XmlAdaptedTag tag : tagged) { itemTags.add(tag.toModelType()); } tags = new UniqueTagList(itemTags);  Item itemToReturn = new Item(description, start, end, tags); if (isDone.equals(false)) { itemToReturn.setIsDone(false); } else { itemToReturn.setIsDone(true); } return itemToReturn; } "	1	0	1	0	1	0
"public List<AuthzCodeDO> getLatestAuthorizationCodesOfTenant(int tenantId) throws IdentityOAuth2Exception {  //we do not support access token partitioning here Connection connection = IdentityDatabaseUtil.getDBConnection();; PreparedStatement ps = null; ResultSet rs = null;  List<AuthzCodeDO> latestAuthzCodes = new ArrayList<>(); try { String sqlQuery = SQLQueries.LIST_LATEST_AUTHZ_CODES_IN_TENANT; ps = connection.prepareStatement(sqlQuery); ps.setInt(1, tenantId); rs = ps.executeQuery(); while (rs.next()) { String authzCodeId = rs.getString(1); String authzCode = rs.getString(2); String consumerKey = rs.getString(3); String authzUser = rs.getString(4); String[] scope = OAuth2Util.buildScopeArray(rs.getString(5)); Timestamp issuedTime = rs.getTimestamp(6, Calendar.getInstance(TimeZone.getTimeZone(UTC))); long validityPeriodInMillis = rs.getLong(7); String callbackUrl = rs.getString(8); String userStoreDomain = rs.getString(9);  AuthenticatedUser user = new AuthenticatedUser(); user.setUserName(authzUser); user.setUserStoreDomain(userStoreDomain); user.setTenantDomain(OAuth2Util.getTenantDomain(tenantId)); latestAuthzCodes.add(new AuthzCodeDO(user, scope, issuedTime, validityPeriodInMillis, callbackUrl, consumerKey, authzCode, authzCodeId)); } connection.commit(); } catch (SQLException e) { IdentityDatabaseUtil.rollBack(connection); throw new IdentityOAuth2Exception(""Error occurred while retrieving latest authorization codes of tenant "" + "":"" + tenantId, e); } finally { IdentityDatabaseUtil.closeAllConnections(connection, rs, ps); } return latestAuthzCodes; } "	1	0	1	1	1	0
@Override public boolean valueEquals( C t ) { if ( t.length == length ) { final Iterator< T > a = iterator(); final Iterator< T > b = iterator(); while ( a.hasNext() ) if ( !a.next().valueEquals( b.next() ) ) return false;  return true; } else return false; } 	1	1	1	1	0	0
"@POST @Produces(MediaType.APPLICATION_JSON) @Path(""dataset/{databaseid}/{query}"") public Response createDatabaseDataset(@PathParam(""id"") final int id, @PathParam(""instance"") String instance, @PathParam(""datasetid"") int datasetID, @PathParam(""query"") String queryString) { if (!SecurityUtils.getSubject().isPermitted(DatabasePermissions.DATABASE_MODIFY(id))) { return Response.status(Response.Status.FORBIDDEN).build(); } int staticDataSetId = 0; try { staticDataSetId = tableViewService().createStaticDataSetOnQuery(id, instance, queryString); } catch (BadParameterException ex) { Response.status(Response.Status.NOT_FOUND).entity(ex.getMessage()) .build(); } catch (Exception e) { Response.status(Response.Status.INTERNAL_SERVER_ERROR) .entity(e.getMessage()).build(); }  return Response.status(Response.Status.CREATED).entity(new Integer(staticDataSetId)).build();  } "	0	1	1	0	0	0
"private List<String> splitArrayParam(SerializableParameter param, String paramAsString) { String regex = getArrayRegex(param); try { return Arrays.asList(URLDecoder.decode(paramAsString, ""UTF_8"").split(regex)); } catch (UnsupportedEncodingException e) { throw new AssertionError(""UTF-8 not supported""); } } "	0	0	1	1	1	0
"@With(CheckPortfolioEntryExists.class) @Dynamic(IMafConstants.PORTFOLIO_ENTRY_EDIT_DYNAMIC_PERMISSION) public Result processEdit() {  // bind the form Form<PortfolioEntryEditFormData> boundForm = portfolioEntryEditFormData.bindFromRequest();  // get the portfolioEntry Long id = Long.valueOf(boundForm.data().get(""id"")); PortfolioEntry portfolioEntry = PortfolioEntryDao.getPEById(id);  if (boundForm.hasErrors() || CustomAttributeFormAndDisplayHandler.validateValues(boundForm, PortfolioEntry.class)) { return ok(views.html.core.portfolioentry.portfolio_entry_edit.render(portfolioEntry, boundForm, PortfolioEntryDao.getPETypeActiveAsVH())); }  PortfolioEntryEditFormData portfolioEntryFormData = boundForm.get();  Ebean.beginTransaction(TxIsolation.READ_COMMITED); try {  // save the portfolio entry PortfolioEntry updPortfolioEntry = PortfolioEntryDao.getPEById(portfolioEntryFormData.id); portfolioEntryFormData.fill(updPortfolioEntry); updPortfolioEntry.update();  // update the licenses number (because the flag is archived is used // for the computation and could be modified) getLicensesManagementService().updateConsumedPortfolioEntries();  // save the custom attributes CustomAttributeFormAndDisplayHandler.validateAndSaveValues(boundForm, PortfolioEntry.class, id);  Ebean.commitTransaction(); Ebean.endTransaction();  Utilities.sendSuccessFlashMessage(Msg.get(""core.portfolio_entry.edit.successful""));  return redirect(controllers.core.routes.PortfolioEntryController.view(portfolioEntryFormData.id, 0));  } catch (Exception e) {  Ebean.rollbackTransaction(); Ebean.endTransaction(); return ControllersUtils.logAndReturnUnexpectedError(e, log, getConfiguration(), getI18nMessagesPlugin());  } } "	1	0	1	0	0	0
private static void updateField(Class cls, String field, Object writeTo, Object value) throws InvocationTargetException, IllegalAccessException { // If we have a setter, use that... Method m = getFirstMethodByName(cls, field);  if(m != null) { // Convert and call Class c = m.getParameterTypes()[0].getClass(); m.invoke(writeTo, convertData(value, c)); return; }  Field f = getFieldByName(cls, field);  if(f == null) return;  f.setAccessible(true); f.set(writeTo, convertData(value, f.getType())); } 	1	0	1	0	1	0
private void init() { mConnection = new ConnectionController(this, this, mHandler); mConnection.startServer(this);  setContentView(R.layout.host);  final TextView name = (TextView) findViewById(R.id.host_name); mHost.setPlayersList((LinearLayout) findViewById(R.id.players_list)); final Button exit = (Button) findViewById(R.id.exit);  name.setText(mHost.getName()); exit.setOnClickListener(new OnClickListener() { @Override public void onClick(final View aV) { exit(); } }); } 	1	0	1	0	1	0
public static int compareEventDates(Event one, Event two) { ZonedDateTime now = ZonedDateTime.now(); ZonedDateTime startDate = DateUtils.getDate(one.getStartsAt()); ZonedDateTime endDate = DateUtils.getDate(one.getEndsAt()); ZonedDateTime otherStartDate = DateUtils.getDate(two.getEndsAt()); ZonedDateTime otherEndDate = DateUtils.getDate(two.getEndsAt()); if (endDate.isBefore(now) || otherEndDate.isBefore(now)) { // one of them is past and other can be past or live or upcoming return endDate.isAfter(otherEndDate) ? -1 : 1; } else { if (startDate.isAfter(now) || otherStartDate.isAfter(now)) { // one of them is upcoming other can be upcoming or live return startDate.isBefore(otherStartDate) ? -1 : 1; } else { // both are live return startDate.isAfter(otherStartDate) ? -1 : 1; } } } 	1	0	1	1	1	0
"private final long syncTimer(long startMS) { if (mInSeekingAction || mInSyncAction) { return 0; } mInSyncAction = true; long d = 0; long time = startMS - mTimeBase; if (!mDanmakusVisible || mRenderingState.nothingRendered || mRenderingState.inWaitingState) { timer.update(time); mRemainingTime = 0; } else { long gapTime = time - timer.currMillisecond; long averageTime = Math.max(mFrameUpdateRate, getAverageRenderingTime()); if (gapTime > 2000 || mRenderingState.consumingTime > mCordonTime || averageTime > mCordonTime) { d = gapTime; gapTime = 0; } else { d = averageTime + gapTime / mFrameUpdateRate; d = Math.max(mFrameUpdateRate, d); d = Math.min(mCordonTime, d); long a = d - mLastDeltaTime; if (Math.abs(a) < 4 && d > mFrameUpdateRate && mLastDeltaTime > mFrameUpdateRate) { d = mLastDeltaTime; } gapTime -= d; } mLastDeltaTime = d; mRemainingTime = gapTime; timer.add(d); //            Log.e(""DrawHandler"", time+""|d:"" + d  + ""RemaingTime:"" + mRemainingTime + "",gapTime:"" + gapTime + "",rtim:"" + mRenderingState.consumingTime + "",average:"" + averageTime); } if (mCallback != null) { mCallback.updateTimer(timer); } mInSyncAction = false; return d; } "	0	1	1	0	1	0
"@Test public void shouldNotReturnNextURLIfTheFeedHasLastEntryInIt() throws Exception { MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest(null, null, ""/catchments/3026/encounters"");  ArrayList<EncounterEvent> lastEventInTheFeed = new ArrayList<>(); lastEventInTheFeed.add(new EncounterEvent(null,new Date(),null)); String nextResultURL = controller.getNextResultURL(mockHttpServletRequest, lastEventInTheFeed, new Date());  assertNull(""For last event in the feed, should have returned null"", nextResultURL); } "	1	1	1	0	1	0
"@NeedsPermission({Manifest.permission.WRITE_EXTERNAL_STORAGE}) public void onPickDoc() { String[] zips = {"".zip"","".rar""}; String[] xmls = {"".xml""}; int maxCount = MAX_ATTACHMENT_COUNT-photoPaths.size()-docPaths.size(); if((docPaths.size()+photoPaths.size())==MAX_ATTACHMENT_COUNT) Toast.makeText(this, ""Cannot select more than "" + MAX_ATTACHMENT_COUNT + "" items"", Toast.LENGTH_SHORT).show(); else FilePickerBuilder.getInstance().setMaxCount(maxCount) .setSelectedFiles(docPaths) .setActivityTheme(R.style.FilePickerTheme) .addFileSupport(""ZIP"",zips) .addFileSupport(""XML"",xmls) .enableDocSupport(true) .pickFile(this); } "	0	1	1	1	0	0
"@Override public List<BuildConfiguration> getBuildConfigurations(String scmUrl, String scmRevision) throws CommunicationException, PNCRequestException { String accessToken = pncAuthenticate.getAccessToken(); String requestUrl = String .format( // TODO solve pagination ""build-configurations?q=scmRepoURL=='%s';scmRevision=='%s'&pageIndex=0&pageSize=500"", scmUrl, scmRevision);  ClientResponse<PNCResponseWrapper<List<BuildConfiguration>>> response = get(requestUrl, new GenericType<PNCResponseWrapper<List<BuildConfiguration>>>() {}, accessToken);  if (response.getEntity() == null && response.getResponseStatus() == Status.NO_CONTENT) return Collections.emptyList(); else return checkAndReturn(response, accessToken).getContent(); } "	1	0	1	0	1	0
"private void showMenu() { System.out.println(""GROUP A SOEN 6441 LANTERNS BUILD 2""); System.out.println(""Select the following: ""); System.out.println(""1) Start a new game""); System.out.println(""2) Load game from file""); System.out.println(""3) Load game from file and validate that file""); System.out.println(""4) Quit"");  } "	0	0	1	1	1	0
"private void addBtn(){ final Text actiontarget = new Text(); grid.add(actiontarget, 1, 6);  Button btn = new Button(""Sign in""); HBox hbBtn = new HBox(10); hbBtn.setAlignment(Pos.BOTTOM_RIGHT); hbBtn.getChildren().add(btn); grid.add(hbBtn, 1, 4);  btn.setOnAction(new EventHandler<ActionEvent>() {  @Override public void handle(ActionEvent e) { Boolean valid = manager.attemptLogin(userTextField.getText(), pwBox.getText()); if(valid){ actiontarget.setFill(Color.FIREBRICK); actiontarget.setText(""Logging in as \'"" + userTextField.getText()); } else{ actiontarget.setFill(Color.FIREBRICK); actiontarget.setText(""Login failed.""); }  } }); } "	0	1	1	0	1	0
public int compare(Map.Entry<?, Double> entry1, Map.Entry<?, Double> entry2) { return entry2.getValue().compareTo(entry1.getValue()); } 	1	1	1	1	0	0
"private boolean loadDirectory() { File config = new File(FILENAME_CONFIG); try { directory = readFromFile(config, new TypeToken<File>() {}); System.out.println(""{Storage directory loaded} "" + directory.getPath()); return true; } catch (FileNotFoundException e) { System.out.println(""{Storage config file not found; setting default directory}""); return false; } } "	0	1	1	0	1	0
"private Command prepareList(String args) { // Guard statement if (args.isEmpty()) { return new ListCommand(); }  final ArgumentTokenizer argsTokenizer = new ArgumentTokenizer(startDatePrefix, endDatePrefix, onDatePrefix, tagPrefix); argsTokenizer.tokenize(args);  try { ListCommand listCommand = new ListCommand();  // keywords delimited by whitespace Optional<String> keywordsString = argsTokenizer.getPreamble(); if (keywordsString.isPresent()) { String[] keywords = keywordsString.get().split(""\\s+"");  Set<String> keywordSet = new HashSet<>(Arrays.asList(keywords)); keywordSet.removeIf(s -> s.equals("""")); listCommand.setKeywords(keywordSet); }  String onDateString = unwrapOptionalStringOrEmpty(argsTokenizer.getValue(onDatePrefix)); String startDateString = unwrapOptionalStringOrEmpty(argsTokenizer.getValue(startDatePrefix)); String endDateString = unwrapOptionalStringOrEmpty(argsTokenizer.getValue(endDatePrefix)); Set<String> tags = getTagsFromArgs(argsTokenizer);  if (tags.isEmpty()) { listCommand.setTags(tags); }  // Ranged search and specific-day search should be mutually exclusive if (!onDateString.isEmpty() && (!startDateString.isEmpty() || !endDateString.isEmpty())) { return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_MUTUALLY_EXCLUSIVE_OPTIONS)); }  if (onDateString.isEmpty()) { final LocalDateTime startDate = getLocalDateTimeFromArgument(startDateString, ""00:00:00""); final LocalDateTime endDate = getLocalDateTimeFromArgument(endDateString, ""23:59:59"");  if (startDate != null && endDate != null && startDate.isAfter(endDate)) { return new IncorrectCommand(ListCommand.MESSAGE_INVALID_DATE); }  listCommand.setStartDate(startDate); listCommand.setEndDate(endDate); } else { final LocalDateTime onDate = getLocalDateTimeFromArgument(onDateString, ""23:59:59"");  listCommand.setOnDate(onDate); }  return listCommand; } catch (IllegalValueException ive) { return new IncorrectCommand(ive.getMessage()); } } "	1	0	1	1	1	0
"@Test public void shouldThrowHelpfulSyntaxError() throws Throwable { // Expect exception.expect( ClientException.class ); exception.expectMessage( ""Invalid input 'i'"" );  // When StatementResult result = session.run( ""invalid statement"" ); result.consume(); } "	0	0	1	1	1	0
"public OneDriveFile.Metadata create(String mimeType) throws IOException { final URL url = getContentURL().build(getApi().getBaseURL(), getResourceIdentifier()); final OneDriveRequest request = new OneDriveRequest(url, ""PUT""); request.addHeader(""Content-Type"", mimeType); final OneDriveResponse response = request.sendRequest(getApi().getExecutor(), new NullInputStream(0)); final OneDriveJsonResponse jsonResponse = new OneDriveJsonResponse(response.getResponseCode(), response.getResponseMessage(), response.getContent()); JsonObject jsonObject = jsonResponse.getContent(); jsonResponse.close(); return new Metadata(jsonObject); } "	1	1	1	0	1	0
public T[] pop(int numberOfItems){ T[] items = (T[])new Object[numberOfItems]; T item  = this.pop(); int position = 0;  while(item != null && position < numberOfItems){ items[position] = item; position++; item = this.pop(); }  return items; } 	1	0	1	1	1	0
public Time getCurrentTime() { return this.Time; } 	1	0	1	1	1	0
public static Map<String, Object> createUserPrefMap(List<GenericValue> recList) throws GeneralException { Map<String, Object> userPrefMap =  new LinkedHashMap<String, Object>(); if (recList != null) { for (GenericValue value: recList) { addPrefToMap(value, userPrefMap); } } return userPrefMap; } 	1	0	1	0	1	0
public static void switchSignToInitialState(Sign sign, BankType btype){ if(!sign.getBlock().getType().equals(Material.SIGN) && !sign.getBlock().getType().equals(Material.WALL_SIGN)) //Si el letrero ya no existe ignoramos, esto puede suceder ya que la función switchSignTo puede ser llamada 1 segundo después. return;  switchSignToStep(btype, sign, 0);  } 	1	0	1	0	1	0
"private boolean contains(Object field, Object value) { if (field == null) { return (value.equals("""") || value == null); } return field.toString().contains(value.toString()); } "	1	1	1	1	0	0
"public void sendGET(String endpoint, JsonObject querydict, final SANetListener listener) {  /** assign listener */ this.listener = listener;  /** get a reference to the final endpoint so I can change it */ String finalEndpoint = endpoint + (SAUtils.isJSONEmpty(querydict) ? ""?"" + SAURLUtils.formGetQueryFromDict(querydict) : """");  /** Starting Download Service */ mReceiver = new SAGetResultsReceiver(new Handler()); mReceiver.setReceiver(this); Intent intent = new Intent(Intent.ACTION_SYNC, null, SAApplication.getInstance().getApplicationContext(), SAGet.class);  /* Send optional extras to Download IntentService */ intent.putExtra(""url"", finalEndpoint); intent.putExtra(""receiver"", mReceiver);  SAApplication.getInstance().getApplicationContext().startService(intent); } "	0	1	1	1	0	0
"boolean[][] toBooleanArray(int startX, int startY, int endX, int endY) { if (startX > endX) throw new IllegalArgumentException(""startX > endX""); if (startY > endY) throw new IllegalArgumentException(""startY > endY"");  int columnCount = endX - startX + 1; int rowCount    = endY - startY + 1;  boolean[][] booleanArray = new boolean[columnCount][rowCount];  int srcX, descX, width; int srcY, descY, height;  if (startX >= minX) { srcX  = startX - minX; descX = 0; width = Math.min(maxX, endX) - startX + 1; } else { srcX  = 0; descX = minX - startX; width = Math.min(maxX, endX) - minX + 1; }  if (startY >= minY) { srcY  = startY - minY; descY = 0; height = Math.min(maxY, endY) - startY + 1; } else { srcY  = 0; descY = minY - startY; height = Math.min(maxY, endY) - minX + 1; }  for (int x = 0; x < width; x++) { System.arraycopy(array       [srcX  + x], srcY, booleanArray[descX + x], descY, height); }  return booleanArray; } "	1	1	1	0	1	0
@Override public void dispose() { entities.forEach(entity->entity.dispose()); playerLight.rayHandler.dispose(); player = null; entities.clear(); entities = null; tiledMap.dispose(); playerLight.dispose(); gameWORLD.dispose(); font.dispose(); sb.dispose(); } 	1	1	1	1	0	0
"public static ValidationDefinition parseDefinition(InputStream stream) throws ParserConfigurationException, IOException, SAXException, MalformedDataException { DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance(); documentBuilderFactory.setIgnoringElementContentWhitespace(true); DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder(); Document doc = documentBuilder.parse(stream);  ValidationDefinition definition = new ValidationDefinition(); for (Node node = doc.getDocumentElement().getFirstChild(); node != null; node = node.getNextSibling()) { if (node.getNodeType() == node.TEXT_NODE || node.getNodeType() == node.COMMENT_NODE) { continue; } else if (node.getNodeName().equals(""item"")) { String name = node.getAttributes().getNamedItem(""name"").getNodeValue(); definition.setName(name);  List<Parameter> parameter = Parameter.nodeToParameterList(node); definition.setParameters(parameter); } else { definition.metadata.put( node.getNodeName(), XmlUtil.textInNode(node, ""Expected a text value in element "" + node.getNodeName()) ); } }  return definition; } "	1	1	1	1	0	0
@Security.Authenticated(Secured.class) public static Result admin() { return ok(admin.render(postDao.findAll())); } 	1	0	1	1	1	0
@Override public void updateControl(EntityShip ship, EntityPlayer player, int control) { super.updateControl(ship, player, control); new ControlInputMessage(ship, (byte) control).sendToServer(); } 	0	1	1	0	1	0
"public UpdateResult updateComputationalFields(ComputationalStatusDTO dto) throws DlabException { try { Document values = new Document(computationalFieldFilter(STATUS), dto.getStatus()); if (dto.getUptime() != null) { values.append(computationalFieldFilter(UPTIME), dto.getUptime()); } if (dto.getInstanceId() != null) { values.append(computationalFieldFilter(INSTANCE_ID), dto.getInstanceId()); } if (null !=  dto.getErrorMessage()) { values.append(computationalFieldFilter(ERROR_MESSAGE), DateRemoverUtil.removeDateFormErrorMessage(dto.getErrorMessage(), DateRemoverUtil.ERROR_DATE_FORMAT, DateRemoverUtil.ERROR_WITHOUT_DATE_FORMAT)); } if (dto.getComputationalId() != null) { values.append(computationalFieldFilter(COMPUTATIONAL_ID), dto.getComputationalId()); } return updateOne(USER_INSTANCES, and(exploratoryCondition(dto.getUser(), dto.getExploratoryName()), elemMatch(COMPUTATIONAL_RESOURCES, and(eq(COMPUTATIONAL_NAME, dto.getComputationalName()), not(eq(STATUS, TERMINATED.toString()))))), new Document(SET, values)); } catch (Throwable t) { throw new DlabException(""Could not update computational resource status"", t); } } "	0	1	1	0	0	0
public boolean canGlide(EntityLivingBase entity, ItemStack stack) { boolean canGlide = this.isFlyable(entity) && (this.isGliding(stack) || (entity.motionY < -1.0 && entity.moveForward >= 0.1 && entity.isSneaking())); setGliding(stack, canGlide); if (canGlide) { for (int i = 1; i <= 4; i++) { ItemStack armor = entity.getEquipmentInSlot(i); if (armor != null && armor.getItem() instanceof ItemGlideArmor) ((ItemGlideArmor) armor.getItem()).setGliding(armor, true); } } return canGlide; } 	0	1	1	0	1	0
@Override public boolean visit(ReturnStatement node) {  returnCount++; ASTNode expression = node.getExpression(); if(expression != null && expression.getNodeType() == ASTNode.BOOLEAN_LITERAL){ this.encounteredInvalidReturnStatement = true; } return super.visit(node); } 	1	1	1	1	0	0
"private String getHongbaoHash(AccessibilityNodeInfo node) { /* 获取红包上的文本 */ String content; try { AccessibilityNodeInfo i = node.getParent().getChild(0); content = i.getText().toString(); } catch (NullPointerException npr) { return null; }  return content + ""@"" + getNodeId(node); } "	1	0	1	0	1	0
public static boolean containsIgnoreCase(String source, String query) { return source.toLowerCase().contains(query); } 	1	0	1	0	1	0
"@SuppressWarnings(""deprecation"") private void autoShowWhatsNew() { SharedPreferences settings = Application.getPrefs();  // Get the current app version. PackageManager pm = getPackageManager(); PackageInfo appInfo = null; try { appInfo = pm.getPackageInfo(getPackageName(), PackageManager.GET_META_DATA); } catch (NameNotFoundException e) { // Do nothing, perhaps we'll get to show it again? Or never. return; }  final int oldVer = settings.getInt(WHATS_NEW_VER, 0); final int newVer = appInfo.versionCode;  if ((oldVer > 0) && (oldVer < newVer)) { mWhatsNewMessage = R.string.main_help_whatsnew; showDialog(WHATSNEW_DIALOG);  // Updates will remove the alarms. This should put them back. // (Unfortunately I can't find a way to reschedule them without // having the app run again). TripService.scheduleAll(this); PreferenceHelp.saveInt(WHATS_NEW_VER, appInfo.versionCode); } } "	1	0	1	0	1	0
"public String getCreationDateString() { Date date = new Date(timestamp * 1000); SimpleDateFormat dateFormat = new SimpleDateFormat(""MM/dd/yy""); String formattedDate = dateFormat.format(date); return formattedDate; } "	1	0	1	0	1	0
"@OneToMany(methods = {OneToMany.Method.DELETE}, variableName = ""sightMarks"") public List<SightMark> getSightMarks() { if (sightMarks == null || sightMarks.isEmpty()) { sightMarks = Stream.of(SQLite.select() .from(SightMark.class) .where(SightMark_Table.bow.eq(id)) .queryList()) .sortBy(sightMark -> sightMark.distance) .collect(Collectors.toList()); } return sightMarks; } "	1	0	1	0	1	0
"@OneToMany(methods = {OneToMany.Method.DELETE}, variableName = ""images"") public List<BowImage> getImages() { if (images == null || images.isEmpty()) { images = SQLite.select() .from(BowImage.class) .where(BowImage_Table.bow.eq(id)) .queryList(); } return images; } "	1	0	1	0	1	0
@Override public int removeModule(IModule[] module, IProgressMonitor monitor) throws CoreException { IPath tmpArchive = getTempBundlePath(module); BundleDetails bd = new ModuleBundleVersionUtility().getBundleDetails(module, tmpArchive); if( bd != null ) { boolean removed = getPublisher(module).uninstall(getServer(), module, bd.getSymbolicName(), bd.getVersion()); if( removed ) { File tmpDeployArtifact = tmpArchive.toFile(); // remove the temp deploy file from file system once we undeploy or latest at shutdown of VM if (!tmpDeployArtifact.delete()) { tmpDeployArtifact.deleteOnExit(); } return IServer.PUBLISH_STATE_NONE; } } return IServer.PUBLISH_STATE_FULL; } 	1	0	1	1	1	0
"@Before public void prepareTest() throws InstantiationException, IllegalAccessException, URISyntaxException {  resource1 = new RootResource(RootResourceDescriptor.create(new Specification(Type.TSON), Arrays.asList(new Endpoint(new URI(""http://localhost:8182""))))); resource1 = new RootResource(RootResourceDescriptor.create(new Specification(Type.TSON), Arrays.asList(new Endpoint(new URI(""http://localhost:8183""))))); } "	0	1	1	0	0	0
"public static Result toUser(){ List <Restaurant> restaurants = findR.all(); String email = session().get(""email""); if(email == null) return redirect(""/login"");  User u = User.find(email); if(u.role.equals(User.RESTAURANT)){ return ok(restaurant.render("""", email)); } if(u.role.equals(User.ADMIN)){ return ok(admin.render("" "", restaurants)); } return ok(user.render(email)); } "	1	1	1	0	1	0
public void update() { //moves the selector up and down if (input.isKeyDown(KeyEvent.VK_UP) && !keyUpWasDown){ keyUpWasDown = true; currentlySelected--; }else if (input.isKeyDown(KeyEvent.VK_DOWN) && !keyDownWasDown){ keyDownWasDown = true; currentlySelected++; } else { keyUpWasDown = input.isKeyDown(KeyEvent.VK_UP); keyDownWasDown = input.isKeyDown(KeyEvent.VK_DOWN); }  //loops the selector around the list if (currentlySelected < 0){ currentlySelected = menuItems.length -1; }else if (currentlySelected > menuItems.length -1){ currentlySelected = 0; }  if (input.isKeyDown(KeyEvent.VK_ENTER)){ if (currentlySelected == 6){ exitLevel(100); } }  } 	1	1	1	1	0	0
public boolean isExpired() { return System.nanoTime() - lastReceivedPart > timeToWait; } 	0	0	1	1	1	0
"@Override public String getUnlocalizedName(ItemStack stack) { if (stack.getItemDamage() == ExplosiveItems.FRAGMENT.ordinal()) { if (getExplosive(stack) instanceof IFragmentExplosiveHandler) { return ((IFragmentExplosiveHandler) ExplosiveItems.FRAGMENT.getExplosive()).getFragmentLocalization(stack); } } else if (stack.getItemDamage() >= 1 && stack.getItemDamage() < ExplosiveItems.values().length) { return super.getUnlocalizedName() + """" + ExplosiveItems.values()[stack.getItemDamage()].ex_name; } return super.getUnlocalizedName(stack); } "	1	0	1	1	1	0
@Override public void handle(ActionResult event) { if (connectionFuture != null && !connectionFuture.isDone()) { connectionFuture.cancel(true); }  if (endpoint != null) { endpoint.destroy(); }  node.delete(); } 	1	0	1	0	1	0
"public void setupCoapClient(Node node) { CoapClientController controller = new CoapClientController(node); node.setMetaData(controller);  try { controller.init(); } catch (Exception e) { LOG.error(""Failed to setup COAP client."", e); node.getParent().removeChild(node); } } "	1	1	1	0	1	0
@Override public Integer getMinCount() { return JenaUtil.getIntegerProperty(this, SH.maxCount); } 	0	0	1	1	1	0
"public static void main(String[] args) { int nodes = 2; CountDownLatch latch = new CountDownLatch(nodes); Nodes init = new Nodes(""Initiator"", true, latch); Nodes node1 = new Nodes(""Node1"", false, latch); Nodes node2 = new Nodes(""Node2"",false,latch); Nodes node3 = new Nodes(""Node3"",false,latch); Nodes node4 = new Nodes(""Node4"",false,latch);  init.setupNeighbours(node1,node4); node1.setupNeighbours(init,node2); node2.setupNeighbours(node1); node3.setupNeighbours(node1,node2); node4.setupNeighbours(init); } "	1	0	1	1	1	0
private OdkWebkitServerInterface getWebkitServer() { if ( isMocked ) { return mockWebkitServerService; } else { return mBackgroundServices.webkitfilesService; } } 	1	0	1	0	1	0
private ArrayList<Integer> writeStripData(IFD ifd) throws IOException { ArrayList<Integer> newStripOffsets = new ArrayList<Integer>(); IfdTags metadata = ifd.getMetadata(); TagValue stripOffsets = metadata.get(273); TagValue stripSizes = metadata.get(279); for (int i = 0; i < stripOffsets.getCardinality(); i++) { int pos = (int) data.position(); newStripOffsets.add(pos); int start = (int) stripOffsets.getValue().get(0).toInt(); int size = stripSizes.getValue().get(i).toInt(); for (int off = start; off < start + size; off++) { byte v = this.input.readByte(off).toByte(); data.put(v); } } return newStripOffsets; } 	1	0	1	1	1	0
protected void processEditors(FileEditor[] editors, PsiDocumentManager documentManager) { for (FileEditor editor : editors) { EditorEx editorEx = EditorUtil.getEditorEx(editor); if (editorEx != null) { for (FoldRegion region : editorEx.getFoldingModel().getAllFoldRegions()) { processRegion(region, documentManager, editorEx); } FoldingListener foldingListener = new FoldingListener() { @Override public void onFoldRegionStateChange(@NotNull FoldRegion region) { processRegion(region, documentManager, editorEx); }  @Override public void onFoldProcessingEnd() {  } }; editorEx.getFoldingModel().addListener(foldingListener, editor); } } } 	1	1	1	0	1	0
"@Override public void run() { // Look up all saved error files File exceptionDir = new File(path); if(!exceptionDir.exists() || !exceptionDir.isDirectory()) return;  File[] errorFiles = exceptionDir.listFiles(); if(errorFiles.length > 0) { Logger.info(String.format(""Sending %d saved error(s) to Bugsnag"", errorFiles.length));  for(File errorFile : errorFiles) { try { Notification notif = new Notification(config); notif.addError(errorFile); notif.deliver();  Logger.info(""Deleting sent error file "" + errorFile.getName()); errorFile.delete(); } catch (HttpClient.NetworkException e) { Logger.warn(""Could not send previously saved error(s) to Bugsnag, will try again later"", e); } catch (Exception e) { Logger.warn(""Problem sending unsent error from disk"", e); errorFile.delete(); } } } } "	1	1	1	0	1	0
"public MessageOperationChain getOutgoingMessageOperationChain() { String policy = (String) def.getProperty(OUTBOUND_POLICY); Object match = (Matchable) def.getProperty(OUTBOUND_MATCH); if (match instanceof Resource && ((Resource)match).getURI().equals(""http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"")) match = Collections.EMPTY_LIST; if (match instanceof Matchable) return new MessageChecker((Matchable)match, policy.contains(""Whitelist"")); if (match instanceof List) return new MessageChecker((List)match, policy.contains(""Whitelist"")); LogUtils.logWarn(Gateway.getInstance().context, getClass(), ""getOutgoingMessageOperationChain"", ""Not matchable security definition, assuming Deny by default.""); return new DenyDefault(); } "	1	0	1	1	1	0
"@Override protected Object execute(Object[] data) { boolean returnValue = false; if (data.length == 2) {  if (data[0] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(id,"" + ""information) function"" + "". First "" + ""argument cannot be null""); } if (data[1] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(id,"" + ""information) function"" + "". Second "" + ""argument cannot be null""); }  String id = (String) data[0]; String currentInformation = (String) data[1]; if (informationBuffer.containsKey(id) && !informationBuffer.get(id).equals(currentInformation)) { returnValue = true; } informationBuffer.put(id, currentInformation); } if (data.length == 3) {  if (data[0] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(id,"" + ""information,triggerFirst) function"" + "". First "" + ""argument cannot be null""); } if (data[1] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(id,"" + ""information,triggerFirst) function"" + "". Second "" + ""argument cannot be null""); } if (data[3] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(id,"" + ""information,triggerFirst) function"" + "". Third "" + ""argument cannot be null""); } } if (data.length == 3) { returnValue = Boolean.valueOf(((String)data[2]).equals(""sendFirst"")); } String id = (String) data[0]; String currentInformation = (String) data[1];  if (informationBuffer.containsKey(id) && !informationBuffer.get(id).equals(currentInformation)) { returnValue = true; } informationBuffer.put(id, currentInformation); return returnValue; } "	1	0	1	1	1	0
@Override public SiteParsingProfile newInstance() { return new HeyzoParsingProfile(scrapeInEnglish); } 	1	0	1	0	0	0
"public Movement saveMovement(Movement movement) {  // validamos se os rateios estao corretos if (!movement.getApportionments().isEmpty()) { if (!movement.isApportionmentsValid()) { throw new ApplicationException(""movement.validate.apportionment-value"", movement.getApportionmentsDifference()); } } else { throw new ApplicationException(""movement.validate.empty-apportionment""); }  // pega os rateios antes de salva o movimento para nao perder a lista final List<Apportionment> apportionments = movement.getApportionments();  // salva o movimento movement = this.movementRepository.save(movement);  // salva os rateios for (Apportionment apportionment : apportionments) { apportionment.setMovement(movement); this.apportionmentRepository.save(apportionment); }  return movement; } "	0	0	1	1	1	0
"public static String parseModelDescription(URL descriptorURL) { ModelNameHandler modelNameHandler = new ModelNameHandler(); try { XMLReader reader = XMLReaderFactory.createXMLReader(); reader.setContentHandler(modelNameHandler); URL url = new URL(descriptorURL.toString()); reader.parse(new InputSource(url.openStream())); } catch (IOException | SAXException e) { logger.error(""Could not parse Sonos model name from string '{}"", descriptorURL.toString()); } return modelNameHandler.getModelName(); } "	0	0	1	1	1	0
"public void bnfFollowUpVisit(FormSubmission submission) {  Mother mother = allMothers.findByCaseId(submission.entityId());  if (mother == null) { logger.warn(format( ""Failed to handle BNF as there is no Mother enroll with ID: {0}"", submission.entityId())); return; }  SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss""); Date today = Calendar.getInstance().getTime(); Map<String, String> bnfVisit = create(FWBNFDATE, submission.getField(FWBNFDATE)) .put(bnf_current_formStatus, submission.getField(bnf_current_formStatus)) .put(FWCONFIRMATION, submission.getField(FWCONFIRMATION)) .put(FWGESTATIONALAGE, submission.getField(FWGESTATIONALAGE)) .put(FWEDD, submission.getField(FWEDD)) .put(FWBNFSTS, submission.getField(FWBNFSTS)) .put(FWDISPLAYTEXT1, submission.getField(FWDISPLAYTEXT1)) .put(FWBNFWOMVITSTS, submission.getField(FWBNFWOMVITSTS)) .put(FWBNFDTOO, submission.getField(FWBNFDTOO)) .put(FWBNFLB, submission.getField(FWBNFLB)) .put(FWBNFSMSRSN, submission.getField(FWBNFSMSRSN)) .put(user_type, submission.getField(user_type)) .put(external_user_ID, submission.getField(external_user_ID)) .put(received_time, format.format(today).toString()) .put(relationalid, submission.getField(relationalid)).map();  //mother.withTODAY(submission.getField(REFERENCE_DATE));  SubFormData subFormData = submission .getSubFormByName(CHILD_REGISTRATION_SUB_FORM_NAME);  for (Map<String, String> childFields : subFormData.instances()) { bnfVisit.put(FWBNFGEN, childFields.get(FWBNFGEN)); bnfVisit.put(FWBNFCHLDVITSTS, childFields.get(FWBNFCHLDVITSTS)); }  mother.bnfVisitDetails().add(bnfVisit);  allMothers.update(mother); logger.info(""submission.getField(FWBNFSTS):""+submission.getField(FWBNFSTS)); if(submission.getField(FWBNFSTS).equalsIgnoreCase(STS_LB) || submission.getField(FWBNFSTS).equalsIgnoreCase(STS_SB)) { if(!submission.getField(""user_type"").equalsIgnoreCase(""FD"")){ pncService.deliveryOutcome(submission); bnfSchedulesService.unEnrollBNFSchedule(submission.entityId(), submission.anmId()); scheduleLogService.closeScheduleAndScheduleLog( submission.entityId(),submission.instanceId(), SCHEDULE_BNF,submission.anmId());  /** * Close Corresponding ANC schedule * */ scheduleLogService.ancScheduleUnEnroll(submission.entityId(), submission.anmId(), SCHEDULE_ANC); actionService.markAllAlertsAsInactive(submission.entityId()); try{ long timestamp = actionService.getActionTimestamp(submission.anmId(), submission.entityId(), SCHEDULE_ANC); ancSchedulesService.fullfillSchedule(submission.entityId(), SCHEDULE_ANC, submission.instanceId(), timestamp); }catch(Exception e){ logger.info(""From ancVisitOne:""+e.getMessage()); } }else{ logger.info(""FWA submit live birth or still birth , so nothing hapened & BNF schedule continue.""); bnfSchedulesService.enrollIntoMilestoneOfBNF(submission.entityId(), submission.getField(REFERENCE_DATE),submission.anmId(),submission.instanceId()); }  }else if(submission.getField(FWBNFSTS).equalsIgnoreCase(STS_GONE) || submission.getField(FWBNFSTS).equalsIgnoreCase(STS_WD) ){ if(submission.getField(""user_type"").equalsIgnoreCase(""FD"")){ pncService.deleteBlankChild(submission); bnfSchedulesService.unEnrollBNFSchedule(submission.entityId(), submission.anmId()); pncService.closeMother(mother); scheduleLogService.closeScheduleAndScheduleLog( submission.entityId(),submission.instanceId(), SCHEDULE_BNF,submission.anmId()); /** * Close Corresponding ANC schedule * */ scheduleLogService.ancScheduleUnEnroll(submission.entityId(), submission.anmId(), SCHEDULE_ANC); actionService.markAllAlertsAsInactive(submission.entityId()); try{ long timestamp = actionService.getActionTimestamp(submission.anmId(), submission.entityId(), SCHEDULE_ANC); ancSchedulesService.fullfillSchedule(submission.entityId(), SCHEDULE_ANC, submission.instanceId(), timestamp); }catch(Exception e){ logger.info(""From ancVisitOne:""+e.getMessage()); } }else{ pncService.deleteBlankChild(submission); logger.info(""FWA says mother gone or died , so nothing hapened & BNF schedule continue.""); bnfSchedulesService.enrollIntoMilestoneOfBNF(submission.entityId(), submission.getField(REFERENCE_DATE),submission.anmId(),submission.instanceId()); }  }else{ pncService.deleteBlankChild(submission); logger.info(""FWA submit BNF form , so nothing hapened & BNF schedule continue.""); bnfSchedulesService.enrollIntoMilestoneOfBNF(submission.entityId(), submission.getField(REFERENCE_DATE),submission.anmId(),submission.instanceId()); }  } "	0	0	1	1	0	0
"@Override public StyleSpans<Collection<String>> doInBackground(Void[] params) { Matcher matcher = PATTERN.matcher(str.toUpperCase()); BetterSpanBuilder builder = new BetterSpanBuilder(); while (matcher.find()) { if (isCancelled()) return null; String styleClass = matcher.group(""INSTRUCTION"") != null ? ""instruction"" : matcher.group(""DIRECTIVE"") != null ? ""directive"" : matcher.group(""ALIAS"") != null ? ""alias"" : matcher.group(""NUMBER"") != null ? ""number"" : matcher.group(""COMMENT"") != null ? ""comment"" : matcher.group(""DOLLAR"") != null ? ""dollar-thingy"" : null; assert styleClass != null; builder.addStyle(styleClass, matcher.start(1), matcher.end(1)); } for (CodeCollisionElement collision : codeView.getSyntaxAnalysis().getCollisions()) { if (collision instanceof ReservedAddressCollisionElement) { builder.addStyle(""warning"", collision.getDefinitionStart(), collision.getDefinitionEnd()); } else { for (TextRange range : collision.getRanges()) { builder.addStyle(""warning"", range.getStart(), range.getEnd()); } } } for (CodeErrorElement error : codeView.getSyntaxAnalysis().getErrors()) { builder.addStyle(""error"", error.getDefinitionStart(), error.getDefinitionEnd()); }  return builder.create(str); } "	1	0	1	1	1	0
"@When(""^I scroll to the top of the page$"") public void scrollToTop() { final WebDriver webDriver = State.THREAD_DESIRED_CAPABILITY_MAP.getWebDriverForThread(); final JavascriptExecutor js = JavascriptExecutor.class.cast(webDriver); js.executeScript(""window.scrollTo(0, 0""); } "	0	0	1	1	1	0
@Override public int compare(Issue lhs, Issue rhs) { return (int) (rhs.number() - lhs.number()); } 	1	0	1	1	1	0
"public static void main(String[] args) throws NoSuchMethodException, IOException, IllegalAccessException, InvocationTargetException {  System.out.println(""Starting search engine..."");  SearchEngine engine = SearchEngine.getInstance();  String keyword; Scanner scan = new Scanner(System.in);  System.out.println(""Enter query: ""); while ((keyword = scan.nextLine()) != null) { if (keyword.isEmpty()) break;  TreeSet<PageRank> result = engine.search(keyword.toLowerCase()); if (result.size() == 0) { System.out.println(""No result!""); continue; }  for (int i = 0; i < 10; i++) { PageRank pr = result.pollLast(); if (pr == null) break; System.out.println(""Result "" + (i + 1) + "": "" + pr.getPageTitle() + "" ("" + pr.getScore() + "")""); } System.out.println(""Enter query: ""); }  scan.close(); } "	1	1	1	0	1	0
"public LanguageUtils setDefaultLanguage(@NonNull String language) {  String selectedLanguage;  boolean isEnglish = language.equalsIgnoreCase(ENGLISH_LANG) || language.equalsIgnoreCase(ENGLISH_LANG_CODE), isSwahili = language.equalsIgnoreCase(SWAHILI_LANG) || language.equalsIgnoreCase(ENGLISH_LANG_CODE);  if (isEnglish) { selectedLanguage = ENGLISH_LANG_CODE; } else if (isSwahili) { selectedLanguage = SWAHILI_LANG_CODE; } else { throw new UnsupportedOperationException(""Unsupported Language "" + language); }  SharedPreferences prefs = mBaseCtx.getSharedPreferences( Constants.Const.KEY_SHARED_PREFS, Context.MODE_PRIVATE); prefs.edit().putString(Constants.KEY_DEFAULT_LANGUAGE, selectedLanguage).apply();  return this; } "	0	1	1	0	1	0
@Override public void call(CollisionEvent event, World world) { if (world.getEntitiesByClass(Mob.class).size() > 0) { return; }  currentRoom.setCleared(true);  for (Door door : currentDoors) { if (event.getOtherID().equals(door.getId())) { Entity entity = world.getEntityByID(event.getTargetID());  Player player = entity instanceof Player ? (Player) entity : null; if (player != null) { // Adding all the entities that are not room persistent to the currentRoom. for (Entity persistentEntity : world.getEntities()) { if (!persistentEntity.isRoomPersistent()) { currentRoom.getEntities().add(persistentEntity); } } // Removing all the entities that are not room persisten from the world. for (int i = world.getEntities().size() - 1; i >= 0; i--) { if (!world.getEntities().get(i).isRoomPersistent()) { world.getEntities().remove(i); } }  int distFromEdge = 80; switch (door.getDirection()) { case NORTH: world.setCurrentRoom(currentRoom.getNorth()); player.setPositionCentered(new Vector2(1280/2, distFromEdge)); break; case WEST: world.setCurrentRoom(currentRoom.getWest()); player.setPositionCentered(new Vector2(1280-distFromEdge, 720/2)); break; case SOUTH: world.setCurrentRoom(currentRoom.getSouth()); player.setPositionCentered(new Vector2(1280/2, 720-distFromEdge)); break; case EAST: world.setCurrentRoom(currentRoom.getEast()); player.setPositionCentered(new Vector2(distFromEdge, 720/2)); break; }  currentRoom = world.getCurrentRoom(); RoomChange(currentRoom, world); System.out.println(currentRoom.getDistanceFromStart()); } } } } 	0	0	1	1	1	0
"public static void validateTimes(DateTime startTime, DateTime endTime) { if (!startTime.isBefore(endTime)) throw Exceptions.badRequest(""start_time (%s) must be before end_time (%s)"", startTime, endTime); } "	1	0	1	1	1	0
public Set<String> createInstancesIfNotExisist(String infrastructureId, String instanceTag, String instanceJson, Set<JSONObject> existingInstances) { Set<String> instancesIds = getExistingInstanceIds(infrastructureId, instanceTag, existingInstances);  if (instancesIds.isEmpty()) { instancesIds = createInstances(infrastructureId, instanceJson); }  return instancesIds; } 	1	0	1	0	1	0
"@Override public boolean inject(Parameters ps, ReconfigurationProblem rp) throws SchedulerException { Solver s = rp.getSolver(); if (cstr.getInvolvedVMs().size() == 1) { return filterWithSingleNode(rp); } if (cstr.isContinuous() && !injectContinuous(rp)) { return false; } List<IntVar> vs = new ArrayList<>(); for (Node u : cstr.getInvolvedNodes()) { vs.add(rp.getNbRunningVMs()[rp.getNode(u)]); } //Try to get a lower bound //basically, we count 1 per VM necessarily in the set of nodes //if involved nodes == all the nodes, then sum == nb of running VMs IntVar mySum = VariableFactory.bounded(rp.makeVarLabel(""nbRunning""), 0, rp.getFutureRunningVMs().size(), rp.getSolver()); s.post(IntConstraintFactory.sum(vs.toArray(new IntVar[vs.size()]), mySum)); s.post(IntConstraintFactory.arithm(mySum, ""<="", cstr.getAmount()));  if (cstr.getInvolvedNodes().equals(rp.getSourceModel().getMapping().getAllNodes())) { s.post(IntConstraintFactory.arithm(mySum, ""="", rp.getFutureRunningVMs().size())); } return true; } "	1	1	1	0	1	0
"public static Integer runCli(List<String> args, Map<String, String> params, String workingDir) throws Exception { String stringArgs = toArguments(args); String stringParams = toJavaParams(params); String command = String.format( ""java -jar %s/pom-manipulation-cli.jar %s %s"", BUILD_DIR, stringParams, stringArgs);  return runCommandAndWait(command, workingDir); } "	1	0	1	0	1	0
"@Override public int onStartCommand(Intent intent, int flags, int startId) { context = this; if (intent == null) { return 0; }  boolean isPhoto = intent.getBooleanExtra(""IsPhoto"", false); int eventId = intent.getIntExtra(""EventId"", -1); String description = intent.getStringExtra(""Descripttion""); if (eventId == -1) { throw new IllegalArgumentException(""Event Id cannot be -1""); }  float descX = intent.getFloatExtra(""PositionX"", 0); float descY = intent.getFloatExtra(""PositionY"", 0);  // We add our events to a list so that we can save them all with one location request. This // is for when the user saves multiple photos in short successesion, so we need a list of events. eventsTosave.add(new Event(eventId, isPhoto, description, descX, descY));  if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) { Toast.makeText(context, ""Cannot save without location permissions"", Toast.LENGTH_LONG).show(); return super.onStartCommand(intent, flags, startId); }  locationManager = (LocationManager) getSystemService(LOCATION_SERVICE); locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1, 0, locationListener);  // Start thread. If we are still running, cancel it. if (t == null) { t = new Timer(); } t.scheduleAtFixedRate(new TimerTask() { @Override public void run() { timer += 50; // We only want to look for 20 seconds if (timer > 20000) { // Stop video, and go to the next page if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) { return; } SimpleGps gps = new SimpleGps(context); Location location = gps.GetInstantLocation(); if (HAVE_SAVED) { return; // Dont want to save anything here because I have already saved. }   else { HAVE_SAVED = true; processAndSaveEvent(location); }  locationManager.removeUpdates(locationListener); } } }, 50, 50);  // Grab location service.   return super.onStartCommand(intent, flags, startId); } "	1	0	1	0	1	0
"@SuppressWarnings(""unchecked"") @Override protected Object transformFromSource(Object value) { List<Object> result = new ArrayList<>(); if ((value instanceof List)) { for (Object object : (List<?>) value) { if (object instanceof Map) { try { Map<String, String> values = (Map<String, String>) object; Class<?> targetClass = field.getAnnotation(ListType.class).value(); Object obj = targetClass.newInstance();  for (Field innerField : targetClass.getDeclaredFields()) { try { if (values.containsKey(innerField.getName())) { innerField.setAccessible(true); innerField.set(obj, NLS.parseMachineString(innerField.getType(), values.get(innerField.getName()))); } } catch (Throwable e) { Exceptions.handle() .error(e) .to(Index.LOG) .withSystemErrorMessage(""Cannot load POJO field %s of %s: %s (%s)"", innerField.getName(), toString()) .handle(); } }  result.add(obj); } catch (Throwable e) { Exceptions.handle() .error(e) .to(Index.LOG) .withSystemErrorMessage(""Cannot load POJO in %s: %s (%s)"", toString()) .handle(); } } } }  return result; } "	1	1	1	1	0	0
"public AlertAssert hasText(final String text) { try { String actualText = actual.getText(); if (!actualText.contains(text)) { super.failWithMessage( ""The alert box does not contain the text: "" + text + "" . Actual text found : "" + actualText); } } catch (final NoAlertPresentException e) { super.failWithMessage(""There is no alert box""); }  return this; } "	1	0	1	0	1	0
protected void fillDefaultValues(Node node) { if(node.hasRecurrentValues()){ cashInput.setCash(node.getRecurrentCash()); durationInput.setDuration(node.getRecurrentDuration()); } } 	1	0	1	0	1	0
public boolean remove(int node) { boolean result = nodes.remove(new Integer(node)); weightSum -= structure.weights[node]; if (nodes.isEmpty()) { structure.communities.remove(this); } return result; } 	1	0	1	0	1	0
"public static COSObject concatenateStreams(COSArray streams, COSDocument document) throws IOException { File mergedContentStream = File.createTempFile(""verapdf_tmp_file"", "".tmp""); mergedContentStream.deleteOnExit(); FileOutputStream outputStream = new FileOutputStream(mergedContentStream); for (COSObject stream : streams) { if (stream.getType() == COSObjType.COS_STREAM) { ASInputStream streamData = stream.getData(FilterFlags.DECODE); try { writeStreamToFile(outputStream, streamData); } catch (IOException e) { streamData.close(); outputStream.close(); throw e; } streamData.close(); } } outputStream.close(); ASInputStream inputContentStream = new InternalInputStream(mergedContentStream); COSObject streamDict = COSDictionary.construct(ASAtom.LENGTH, mergedContentStream.length()); document.addFileResource(new ASFileStreamCloser(inputContentStream)); return COSStream.construct((COSDictionary) streamDict.get(), inputContentStream); } "	1	0	1	0	1	0
"@NonNull @Override public VerificationResult verify(@NonNull final Purchase purchase) { if (!OPFUtils.isConnected(context)) { OPFLog.e(""Can't verify purchase, no connection.""); return VerificationResult.ERROR; } try { final HttpURLConnection connection = (HttpURLConnection) new URL(VERIFY_URL + purchase.getToken()).openConnection(); connection.connect(); final int responseCode = connection.getResponseCode(); OPFLog.d(""Verify response code: "" + responseCode); if (responseCode != HttpURLConnection.HTTP_OK) { return VerificationResult.ERROR; } final String body = OPFIabUtils.toString(connection.getInputStream()); final SamsungVerification verification = new SamsungVerification(body); return verification.idStatus() ? VerificationResult.SUCCESS : VerificationResult.FAILED; } catch (IOException | JSONException exception) { OPFLog.e("""", exception); } return VerificationResult.ERROR; } "	0	1	1	0	0	0
"private void setHarvestStatusPageSize(int size) throws Exception { getTestController().runTestXCommand(TestEnvironment.JOB_ADMIN_SERVER, ""cp conf/settings_GUIApplication.xml conf/settings_GUIApplication.xml.original""); getTestController().replaceStringInFile(TestEnvironment.JOB_ADMIN_SERVER, ""conf/settings_GUIApplication.xml"", ""</indexClient>"", ""</indexClient>"" + ""<webinterface><harvestStatus><defaultPageSize>"" + size + ""</defaultPageSize></harvestStatus></webinterface>"");  TestGUIController.restartGUI(); } "	1	0	1	0	0	0
"@BeforeMethod(alwaysRun = true) @AfterMethod(alwaysRun = true) private void cleanupGUIConfiguration() { try { getTestController().runTestXCommand(TestEnvironment.JOB_ADMIN_SERVER, ""if [ -f conf/settings_GUIApplication.xml.original ]; then "" + ""echo conf/settings_GUIApplication.xml.original exist, moving back.; "" + ""conf/kill_GUIApplication.sh; "" + ""mv conf/settings_GUIApplication.xml.original conf/settings_GUIApplication.xml; "" + "" conf/start_GUIApplication.sh; "" + ""fi""); TestGUIController.waitForGUIToStart(10); } catch (Exception e) { e.printStackTrace(); } } "	1	1	1	1	0	0
"@Test public void testGetApplicationName() { final String expected = ""ESAPI_UnitTests""; DefaultSecurityConfiguration secConf = this.createWithProperty(DefaultSecurityConfiguration.APPLICATION_NAME, expected); Assert.assertEquals(expected, secConf.getApplicationName()); } "	0	1	1	0	1	0
@Override protected PlaysResponse request() { if (type == PlaysRequest.TYPE_MIN) { return mService.playsByMinDate(username, date, page); } else if (type == PlaysRequest.TYPE_MAX) { return mService.playsByMinDate(username, date, page); } else { return mService.plays(username, page); } } 	0	1	1	1	1	0
"private void cropPhotoTest() throws Exception { String testTag = ""crop_photo"";  // To improve travel accuracy perform the slide bar operation slowly final int steps = 500;  // Perform a range of swipe tests while browsing photo gallery LinkedHashMap<String, Position> testParams = new LinkedHashMap<String, Position>(); testParams.put(""tilt_positive"", Position.LEFT); testParams.put(""tilt_reset"", Position.RIGHT); testParams.put(""tilt_negative"", Position.RIGHT);  Iterator<Entry<String, Position>> it = testParams.entrySet().iterator();  // Select third photograph selectPhoto(2); UiObject editView = getUiObjectByResourceId(""com.google.android.apps.photos:id/edit"", ""android.widget.ImageView""); editView.click();  UiObject cropTool = getUiObjectByResourceId(""com.google.android.apps.photos:id/cpe_crop_tool"", ""android.widget.ImageView""); cropTool.click();  UiObject straightenSlider = getUiObjectByResourceId(""com.google.android.apps.photos:id/cpe_straighten_slider"", ""android.view.View"");  while (it.hasNext()) { Map.Entry<String, Position> pair = it.next(); Position pos = pair.getValue();  String runName = String.format(testTag + ""_"" + pair.getKey()); String gfxInfologName =  String.format(runName + ""_gfxInfo.log""); String surfFlingerlogName =  String.format(runName + ""_surfFlinger.log"");  startDumpsysGfxInfo(parameters); startDumpsysSurfaceFlinger(parameters);  Timer result = new Timer(); result = slideBarTest(straightenSlider, pos, steps);  stopDumpsysSurfaceFlinger(parameters, surfFlingerlogName); stopDumpsysGfxInfo(parameters, gfxInfologName);  timingResults.put(runName, result); }  saveAndReturn(); } "	1	0	1	1	1	0
@FXML private void saveSpotNameAction(ActionEvent event) { if (saveSpotNameButton.getUserData() != null) { ((PrawnFile.Run) saveSpotNameButton.getUserData()).getPar().get(0).setValue(selectedSpotNameText.getText().trim().toUpperCase(Locale.US)); squidProject.processPrawnSessionForDuplicateSpotNames(); squidProject.generatePrefixTreeFromSpotNames(); shrimpFractionList.refresh(); shrimpRefMatList.refresh(); } } 	0	0	1	1	1	0
private boolean differentContainmentSubTrees(Pair<TGGRuleNode, TGGRuleNode> nodes) { List<TGGRuleNode> leftHierarchy = containmentHierarchyFromNodeToRoot(nodes.getLeft()); List<TGGRuleNode> rightHierarchy = containmentHierarchyFromNodeToRoot(nodes.getRight());  // if one of the nodes is the root of its tree, both nodes cannot be in different sub-trees if (leftHierarchy.size() <= 1 || rightHierarchy.size() <= 1) return false;  // if the roots of both nodes' trees are not equal, they are in unconnected trees, // which makes unequal-constraints necessary if (leftHierarchy.get(leftHierarchy.size()-1).equals(rightHierarchy.get(rightHierarchy.size()-1))) return false;  // if the parents of both nodes are equal, // they have to take care of checking unequality if (leftHierarchy.get(1).equals(rightHierarchy.get(1))) return false;  // in the remaining cases, the nodes are in different but connected sub-trees // and their parent nodes transitively take care of the unequality return true; } 	1	0	1	1	1	0
"private static boolean isTierPaid(String tierName, String tenantDomain) throws APIManagementException{ if (tenantDomain == null) { tenantDomain = MultitenantConstants.SUPER_TENANT_DOMAIN_NAME; } if (tierName.equalsIgnoreCase(APIConstants.UNLIMITED_TIER)) { return isUnlimitedTierPaid(tenantDomain); }  Map<String, Tier> tierMap = null; boolean isPaid = false;  try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); int requestedTenantId = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantId(); if (requestedTenantId == 0) { tierMap = APIUtil.getTiers(); } else { tierMap = APIUtil.getTiers(requestedTenantId); } } finally { PrivilegedCarbonContext.endTenantFlow(); }  if (tierMap != null) { Tier tier = tierMap.get(tierName);  if (tier != null) { final Map<String, Object> tierAttributes = tier.getTierAttributes();  if (tierAttributes != null) { String isPaidValue = (String) tierAttributes.get(APIConstants.API_TIER_IS_PAID_ATTRIBUTE);  if (isPaidValue != null) { isPaid = Boolean.parseBoolean(isPaidValue); } } else { throw new APIManagementException(""Tier attributes not specified for tier "" + tierName); } } else { throw new APIManagementException(""Tier "" + tierName + ""cannot be found""); } }  return isPaid; } "	1	0	1	1	1	0
"@CrossOrigin @GetMapping(path=""/results"") public @ResponseBody List<User> getByName(@RequestParam(""name"") String name) { return userRepository.findByName(name,name); } "	1	0	1	1	1	0
"public String[] resourceListAsSikulixContentFromJar(String aJar, String folder, File targetFolder, FilenameFilter filter) { List<String> contentList = extractResourcesToFolderFromJar(aJar, folder, null, filter); if (contentList == null) { log(-1, ""resourceListAsSikulixContentFromJar: did not work: %s"", folder); return null; } File target = null; String arrString[] = new String[contentList.size()]; try { PrintWriter aPW = null; if (targetFolder != null) { target = new File(targetFolder, fpContent); FileManager.deleteFileOrFolder(target); target.getParentFile().mkdirs(); aPW = new PrintWriter(target); } int n = 0; for (String line : contentList) { arrString[n++] = line; if (targetFolder != null) { aPW.println(line); } } if (targetFolder != null) { aPW.close(); } } catch (Exception ex) { log(-1, ""resourceListAsFile: %s:\n%s"", target, ex); } return arrString; } "	1	0	1	1	1	0
"public Collection<PortletHit> getPortletHits() { ArrayList<PortletHit> hits = new ArrayList<>();  Logger.info(this, ""Searching for: "" + userSearchValues.toString());  Collection<Host> hosts = new HostDAO().getHosts(userSearchValues.getHost());  BufferedSearchResultIterator buffer = new BufferedSearchResultIterator(searcherFilter, userSearchValues.getType(), userSearchValues.getLanguageId(), userSearchValues.getStatus(), userSearchValues.getMaxResults());  for (Host host : hosts) { searcherFilter.setHost(host); buffer.setBufferForNewHost(host); hits.addAll(getHitsByHost(buffer)); }  return hits; } "	1	0	1	0	1	0
private Set<Content> flattenContentObjects(final Content content) { Set<Content> setOfContentObjects = new HashSet<Content>(); if (!content.getChildren().isEmpty()) {  List<ContentBase> children = content.getChildren();  for (ContentBase child : children) { setOfContentObjects.add((Content) child); setOfContentObjects.addAll(flattenContentObjects((Content) child)); } }  setOfContentObjects.add(content);  return setOfContentObjects; } 	1	0	1	0	1	0
public V getSource(E directed_edge) { if (!containsEdge(directed_edge)) return null; return edge_vpairs.get(directed_edge).getSecond(); } 	0	1	1	0	1	0
public boolean spawnEntityOrCapture(CauseTracker causeTracker, PhaseContext context, Entity entity, int chunkX, int chunkZ) { final net.minecraft.entity.Entity minecraftEntity = (net.minecraft.entity.Entity) entity; final WorldServer minecraftWorld = (WorldServer) minecraftEntity.worldObj; final User user = context.getNotifier().orElseGet(() -> context.getOwner().orElse(null)); if (user != null) { entity.setCreator(user.getUniqueId()); } final ArrayList<Entity> entities = new ArrayList<>(1); entities.add(entity); final SpawnEntityEvent event = SpongeEventFactory.createSpawnEntityEvent(InternalSpawnTypes.UNKNOWN_CAUSE, entities, (World) minecraftWorld); SpongeImpl.postEvent(event); if (!event.isCancelled() && event.getEntities().size() > 0) { for (Entity item: event.getEntities()) { causeTracker.getMixinWorld().forceSpawnEntity(item); } return true; } return false; } 	0	0	1	1	1	0
@Override public void onActivityResult(int requestCode, int resultCode, Intent resultData) {  // The ACTION_OPEN_DOCUMENT intent was sent with the request code // READ_REQUEST_CODE. If the request code seen here doesn't match, it's the // response to some other intent, and the code below shouldn't run at all.  if (requestCode == READ_REQUEST_CODE && resultCode == Activity.RESULT_OK) { // The document selected by the user won't be returned in the intent. // Instead, a URI to that document will be contained in the return intent // provided to this method as a parameter. // Pull that URI using resultData.getData(). Uri uri; if (resultData != null) { uri = resultData.getData(); try { InputStream input = getContentResolver().openInputStream(uri); ExportManager exportManager = new ExportManager(); List<Card> data = exportManager.getContents(input);  final List<Card> allCards = this.data;  CheckListDialog<Card> checkListDialog = new CheckListDialog<Card>(data, new CheckableContentProvider<Card>() { @Override public String getCheckableContent(Card input) { return input.getName(); }  @Override public boolean isActivated(Card input) { // Check if the given card is already present in the system. for (Card card: allCards) { if (card.getName().toLowerCase().equals(input.getName().toLowerCase())) { return false; } } return true; } }, new CheckListListener<Card>() { @Override public void selected(Collection<Card> selectedItems) { importCards(selectedItems); } }, BackupRestoreActivity.this); checkListDialog.setCanceledOnTouchOutside(false); checkListDialog.setCancelable(false); checkListDialog.show(); } catch (FileNotFoundException e){ e.printStackTrace(); Utils.showToast(getString(R.string.unexpected_io_error), Toast.LENGTH_LONG, getApplicationContext()); } catch (IOException | InvalidImportFile e) { // TODO properly handle these exceptions e.printStackTrace(); } } } } 	1	1	1	1	0	0
"@Override protected String getExperienceLevelName(BigDecimal experience) { if (getNumberUnits().compareTo(BigDecimal.ZERO) == 0) { return SkillType.getExperienceLevelName(-1); }  final BigDecimal eliteThreshold = new BigDecimal(""4.99""); final BigDecimal vetThreshold = new BigDecimal(""7.99""); final BigDecimal regThreshold = new BigDecimal(""9.99"");  if (experience.compareTo(regThreshold) > 0) { return SkillType.getExperienceLevelName(SkillType.EXP_GREEN); } else if (experience.compareTo(vetThreshold) > 0) { return SkillType.getExperienceLevelName(SkillType.EXP_REGULAR); } else if (experience.compareTo(eliteThreshold) > 0) { return SkillType.getExperienceLevelName(SkillType.EXP_VETERAN); } return SkillType.getExperienceLevelName(SkillType.EXP_ELITE); } "	0	0	1	1	0	0
public Builder localeUri(@Nullable Uri localeUri) { this.localeUri = languageUri; return this; } 	1	0	1	1	1	0
@Override public DSubTree handle() { DSubTree tree = new DSubTree(); // add the expression's subtree (e.g: foo(..).bar() should handle foo(..) first) DSubTree Texp = new DOMExpression(invocation.getExpression()).handle(); tree.addNodes(Texp.getNodes());  // evaluate arguments first for (Object o : invocation.arguments()) { DSubTree Targ = new DOMExpression((Expression) o).handle(); tree.addNodes(Targ.getNodes()); }  IMethodBinding binding = invocation.resolveMethodBinding(); // get to the generic declaration, if this binding is an instantiation while (binding.getMethodDeclaration() != binding) binding = binding.getMethodDeclaration(); MethodDeclaration localConstructor = Utils.checkAndGetLocalMethod(binding); if (localConstructor != null) { DSubTree Tconstructor = new DOMMethodDeclaration(localConstructor).handle(); tree.addNodes(Tconstructor.getNodes()); } else if (Utils.isRelevantCall(binding)) tree.addNode(new DAPICall(binding, Visitor.V().getLineNumber(invocation))); return tree; } 	1	0	1	1	0	0
public <D extends MD5Descriptor> D digest(InputStream stream, DigestOperation<D> digestOperation) throws IOException { DigestInputStream digestInputStream = new DigestInputStream(stream, md5Digest); D md5Descriptor = digestOperation.execute(digestInputStream); String md5 = DatatypeConverter.printHexBinary(md5Digest.digest()); md5Descriptor.setMD5(md5); return md5Descriptor; } 	1	0	1	1	1	0
"@Override public void onServerStarted() { logger.log(Level.INFO, ""Initializing Spell modifications"");  Set<Spell> allGodSpells = new TreeSet<>(); Set<Spell> whiteLightSpells = new TreeSet<>(); Set<Spell> blackLightSpells = new TreeSet<>();  for (Deity deity : Deities.getDeities()) { allGodSpells.addAll(deity.getSpells()); if (deity.isHateGod()) { blackLightSpells.addAll(deity.getSpells()); } else { whiteLightSpells.addAll(deity.getSpells()); } }  try { Field buildWallBonus = ReflectionUtil.getField(Deity.class, ""buildWallBonus""); Field roadProtector = ReflectionUtil.getField(Deity.class, ""roadProtector""); Field cost = ReflectionUtil.getField(Spell.class, ""cost"");  Field isAllowVynora = ReflectionUtil.getField(ActionEntry.class, ""isAllowVynora""); Field isAllowFo = ReflectionUtil.getField(ActionEntry.class, ""isAllowFo""); Field isAllowMagranon = ReflectionUtil.getField(ActionEntry.class, ""isAllowMagranon""); Field isAllowLibila = ReflectionUtil.getField(ActionEntry.class, ""isAllowLibila"");  // Make all spells available to all gods for (Deity deity : Deities.getDeities()) { if (allowAllSpells || allowLightSpells) { final Set<Spell> spells; if (allowAllSpells) { spells = allGodSpells; } else if (deity.isHateGod()) { spells = blackLightSpells; } else { spells = whiteLightSpells; }  for (Spell spell : spells) { if (!deity.getSpells().contains(spell)) { deity.addSpell(spell); } } }  if (removePriestRestrictions) { try { ReflectionUtil.setPrivateField(deity, buildWallBonus, Float.valueOf(0.0f)); ReflectionUtil.setPrivateField(deity, roadProtector, Boolean.TRUE); } catch (IllegalAccessException | IllegalArgumentException | ClassCastException e) { logger.log(Level.WARNING, e.getMessage(), e); } } }  if (favorLimit < Integer.MAX_VALUE) { for (Spell spell : allGodSpells) { if (spell.getCost(false) > favorLimit) { try { ReflectionUtil.setPrivateField(spell, cost, Integer.valueOf(favorLimit)); } catch (IllegalAccessException | IllegalArgumentException | ClassCastException e) { logger.log(Level.WARNING, e.getMessage(), e); }  } } }  if (removePriestRestrictions) { for (ActionEntry action : Actions.actionEntrys) { try { ReflectionUtil.setPrivateField(action, isAllowVynora, Boolean.TRUE); ReflectionUtil.setPrivateField(action, isAllowFo, Boolean.TRUE); ReflectionUtil.setPrivateField(action, isAllowMagranon, Boolean.TRUE); ReflectionUtil.setPrivateField(action, isAllowLibila, Boolean.TRUE); } catch (IllegalArgumentException | IllegalAccessException e) { logger.log(Level.WARNING, e.getMessage(), e); } } }  } catch (NoSuchFieldException e) { logger.log(Level.WARNING, e.getMessage(), e); } } "	1	1	1	0	1	0
"public void delete(User user) throws FileNotFoundException, PermissionDeniedException { if (user == null) { throw new PermissionDeniedException(""User cannot be null""); }  checkHiddenPath(this, user);  boolean allowed = false; if (user.getName().equals(getUsername())) { if (!getVFSPermissions().checkPathPermission(""deleteown"", user, this)) { // the user owns the file althought it doesnt have enough perms to delete it. throw new PermissionDeniedException(""You are not allowed to delete ""+getPath()); } // the user owns the file and has enough perms to delete it.  // deleteown > delete allowed = true; }  if (!allowed && !getVFSPermissions().checkPathPermission(""delete"", user, this)) { throw new PermissionDeniedException(""You are not allowed to delete ""+getPath()); }  deleteUnchecked(false); } "	1	0	1	0	0	0
"public static Map<Integer,String> calculateIndexOfHashMap( String[] values) throws Exception {  if (values == null) { throw new Exception(""CLOUD_ATS_ERROR_EMPTY_VALUE""); } Map<Integer, String>hashmap = new HashMap<Integer, String>(); int length = values.length; for (int i = 0; i < length; i++) { hashmap.put(i, values[i]); } if(hashmap.size() == 0){ return null; } return hashmap;  } "	0	0	1	1	1	0
public void decode(){ if (this.getTLVValueLength()!=8){ //throw new MalformedPCEPObjectException(); //FIXME: esta mal formado Que hacer } System.arraycopy(this.tlv_bytes,0, availableBw, 0, 4);  } 	1	0	1	1	1	0
@Test public void testPeek_null() { context.pop(); assertTrue(context.pop().isNull()); } 	0	1	1	1	1	0
@Test public void testPeek() { assertFalse(context.pop().isNull()); } 	0	0	1	1	1	0
@Override public void activate(Context.OperatorContext context) { for (int i = 0; i < columnDataTypes.size(); i++) { final int type = columnDataTypes.get(i); JdbcPOJOInputOperator.ActiveFieldInfo activeFieldInfo = columnFieldSetters.get(i); switch (type) { case (Types.CHAR): case (Types.VARCHAR): activeFieldInfo.setterOrGetter = PojoUtils.createSetter(pojoClass, activeFieldInfo.fieldInfo.getPojoFieldExpression(), String.class); break;  case (Types.BOOLEAN): activeFieldInfo.setterOrGetter = PojoUtils.createSetterBoolean(pojoClass, activeFieldInfo.fieldInfo.getPojoFieldExpression()); break;  case (Types.TINYINT): activeFieldInfo.setterOrGetter = PojoUtils.createSetterByte(pojoClass, activeFieldInfo.fieldInfo.getPojoFieldExpression()); break;  case (Types.SMALLINT): activeFieldInfo.setterOrGetter = PojoUtils.createSetterShort(pojoClass, activeFieldInfo.fieldInfo.getPojoFieldExpression()); break;  case (Types.INTEGER): activeFieldInfo.setterOrGetter = PojoUtils.createSetterInt(pojoClass, activeFieldInfo.fieldInfo.getPojoFieldExpression()); break;  case (Types.BIGINT): activeFieldInfo.setterOrGetter = PojoUtils.createSetterLong(pojoClass, activeFieldInfo.fieldInfo.getPojoFieldExpression()); break;  case (Types.FLOAT): activeFieldInfo.setterOrGetter = PojoUtils.createSetterFloat(pojoClass, activeFieldInfo.fieldInfo.getPojoFieldExpression()); break;  case (Types.DOUBLE): activeFieldInfo.setterOrGetter = PojoUtils.createGetterDouble(pojoClass, activeFieldInfo.fieldInfo.getPojoFieldExpression()); break;  case Types.DECIMAL: activeFieldInfo.setterOrGetter = PojoUtils.createSetter(pojoClass, activeFieldInfo.fieldInfo.getPojoFieldExpression(), BigDecimal.class); break;  case Types.TIMESTAMP: activeFieldInfo.setterOrGetter = PojoUtils.createSetter(pojoClass, activeFieldInfo.fieldInfo.getPojoFieldExpression(),Timestamp.class); break;  case Types.TIME: activeFieldInfo.setterOrGetter = PojoUtils.createSetter(pojoClass, activeFieldInfo.fieldInfo.getPojoFieldExpression(),Time.class); break;  case Types.DATE: activeFieldInfo.setterOrGetter = PojoUtils.createSetter(pojoClass, activeFieldInfo.fieldInfo.getPojoFieldExpression(), Date.class); break;  default: handleUnknownDataType(type, null, activeFieldInfo); break; } } } 	0	0	1	1	0	0
"private long calcRoute() { StreetRouter streetRouter = new StreetRouter(transportNetwork.streetLayer); ProfileRequest profileRequest = buildRequest(false); streetRouter.profileRequest = profileRequest; streetRouter.streetMode = StreetMode.WALK;  // TODO use target pruning instead of a distance limit streetRouter.distanceLimitMeters = 100_000;  streetRouter.setOrigin(profileRequest.fromLat, profileRequest.fromLon); streetRouter.setDestination(profileRequest.toLat, profileRequest.toLon);  streetRouter.route();  // Gets lowest weight state for end coordinate split StreetRouter.State lastState = streetRouter.getState(streetRouter.getDestinationSplit());  StreetPath streetPath = new StreetPath(lastState, transportNetwork);  long totalDistance = 0; int stateIdx = 0;  // TODO: this can be improved since end and start vertices are the same // in all the edges. for (StreetRouter.State state : streetPath.getStates()) { Integer edgeIdx = state.backEdge; if (!(edgeIdx == -1 || edgeIdx == null)) { EdgeStore.Edge edge = transportNetwork.streetLayer.edgeStore.getCursor(edgeIdx); LOG.info(""{} - Lat/Long for edgeIndex [{}] are [{}]"", stateIdx++, edgeIdx, edge.getGeometry()); LOG.info(""\tmode [{}]"", state.streetMode); LOG.info(""\tweight [{}]"", state.weight); LOG.info(""\tduration sec [{}:{}]"", state.getDurationSeconds()/60, state.getDurationSeconds()%60); LOG.info(""\tdistance [{}]"", state.distance / 1000); } } return totalDistance; } "	1	0	1	0	1	0
public static void moveRideToTop(List<Ride> rides, int currentPos) { if(currentPos != 0) { Ride top = rides.get(0); rides.set(0, rides.get(currentPos)); rides.set(currentPos, top); } } 	1	0	1	1	1	0
"@Override protected void onStop() { Log.d(""OnStop"",""Commit 4""); super.onStop(); } "	0	0	1	1	1	0
"@Test public void testTaggingD03() throws ResourceInstantiationException { Document doc = newD(); AnnotationSet t = addA(doc,""Keys"",0,10,""M"",""x""); addA(doc,""Resp"",0,10,""M"",""x""); AnnotationSet r = addA(doc,""Resp"",0,10,""M"",""y""); AnnotationDifferTagging ad = new AnnotationDifferTagging(t, r, FS_ID, FC_EQU); EvalStatsTagging es = ad.getEvalStatsTagging(); assertEquals(""targets"",1,es.getTargets()); assertEquals(""responses"",2,es.getResponses()); assertEquals(""correct strict"",1,es.getCorrectStrict()); assertEquals(""incorrect strict"",0,es.getIncorrectStrict()); assertEquals(""true missing strict"",0,es.getTrueMissingStrict()); assertEquals(""true spurious strict"",1,es.getTrueSpuriousStrict()); assertEquals(""precision strict"",0.5,es.getPrecisionStrict(),EPS); assertEquals(""precision lenient"",0.5,es.getPrecisionLenient(),EPS); assertEquals(""recall strict"",1.0,es.getRecallStrict(),EPS); assertEquals(""recall lenient"",1.0,es.getRecallLenient(),EPS); assertEquals(""F1.0 strict"",2/3.0,es.getFMeasureStrict(1.0),EPS); assertEquals(""F1.0 lenient"",2/3.0,es.getFMeasureLenient(1.0),EPS); // also check if we create the correct annotations AnnotationSet os = doc.getAnnotations(""O""); ad.addIndicatorAnnotations(os); assertEquals(""outset size"",2,os.size()); AnnotationSet tmpSet = os.get(""M_CS""); assertEquals(""M_CS size"",1,tmpSet.size()); Annotation tmpAnn = getOnlyAnn(tmpSet); assertEquals(""M_CS ann start"",0,(long)start(tmpAnn)); } "	1	0	1	0	1	0
private hive_hint pair( String str ) { hive_hint rul = null;  if ( ( str != null ) && ( str.length() > 0 ) ) { String[] tok = str.split( SEPAR[ 2 ] );  if ( tok.length > 0 ) { if ( ( rul = new hive_hint() ) != null ) { rul.name = tok[ 0 ];  if ( tok.length > 1 ) rul.data = tok[ 1 ]; } } }  return rul; } 	1	0	1	0	1	0
"@PostConstruct public void init() { player1 = (AbstractPlayer) context.getRegisteredObject(""player1""); player2 = (AbstractPlayer) context.getRegisteredObject(""player2""); p1TimeLimit = (Integer) context.getRegisteredObject(""p1TimeLimit""); p2TimeLimit = (Integer) context.getRegisteredObject(""p12imeLimit""); //		player1 = new LocalPlayer(""果皇·天气晴朗"", ""honoka.jpg""); //		player2 = new LocalPlayer(""Naïve!"", ""ha.gif""); //		player1 = new AIPlayer(""粗糙的计算机"", ""rabbit.jpg"", 0); //		player2 = new AIPlayer(""普通的计算机"", ""sillyb.jpg"", 1); //		p1TimeLimit = 20; //		p2TimeLimit = 1;  JFXDepthManager.setDepth(rootPane, 1); BackgroundColorAnimator.applyAnimation(sendChatButton); buttonsPane.getChildren().forEach(BackgroundColorAnimator::applyAnimation);  gameBoard.setOnMouseClicked(this::gameBoardClicked); infoDialog.setDialogContainer(__rootPane); confirmDialog.setDialogContainer(__rootPane);  for (int i = 0; i < N; ++i) for (int j = 0; j < N; ++j) { boardPieces[i][j] = new BoardPiece(i, j); gameBoard.getChildren().add(boardPieces[i][j].container); }  manager = new GameManager(); manager.init(player1, p1TimeLimit, player2, p2TimeLimit); manager.setDropPieceHandler(this::dropPiece); manager.setGameOverHandler(this::gameOver); manager.setExitHandler(() -> ((Runnable) context.getRegisteredObject(""returnToHome"")).run()); manager.setNewGameHandler(this::newGame); manager.setDialogHandler(message -> chatDialog.appendText(chatDialog.getText() + ""<p>"" + message + ""</p>\n""));  initPlayersAndControls();  player1Pane.setName(player1.getProfileName()); player1Pane.setIcon(player1.getAvatarID()); player1Pane.scoreProperty().bind(manager.p1ScoreProperty()); player1Pane.remainingTimeProperty().bind(manager.p1RemainingTimeProperty()); player1Pane.stateProperty().bind(manager.p1StateProperty()); player2Pane.setName(player2.getProfileName()); player2Pane.setIcon(player2.getAvatarID()); player2Pane.scoreProperty().bind(manager.p2ScoreProperty()); player2Pane.remainingTimeProperty().bind(manager.p2RemainingTimeProperty()); player2Pane.stateProperty().bind(manager.p2StateProperty());  manager.currentPlayerProperty().addListener((observable, oldValue, newValue) -> { BiConsumer<Boolean, PlayerTimerPane> toggleShadow = (hasShadow, pane) -> { if (!hasShadow && pane.getEffect() != null) { Timeline animation = new Timeline(new KeyFrame(Duration.millis(300), e -> pane.setEffect(null), new KeyValue(((DropShadow) pane.getEffect()).radiusProperty(), 0, Interpolator.EASE_IN), new KeyValue(((DropShadow) pane.getEffect()).offsetYProperty(), 0, Interpolator.EASE_OUT))); animation.play(); } else if (hasShadow && pane.getEffect() == null) { pane.setEffect(new DropShadow(BlurType.GAUSSIAN, Color.rgb(0, 0, 0, 0.26), 0, 0.26, 0, 0)); Timeline animation = new Timeline(new KeyFrame(Duration.millis(300), new KeyValue(((DropShadow) pane.getEffect()).radiusProperty(), 10, Interpolator.EASE_OUT), new KeyValue(((DropShadow) pane.getEffect()).offsetYProperty(), 2, Interpolator.EASE_IN))); animation.play(); } }; toggleShadow.accept(newValue == manager.getP1State(), player1Pane); toggleShadow.accept(newValue == manager.getP2State(), player2Pane); }); } "	1	1	1	1	0	0
"@Test public void testSplitThenMerge() throws IOException { final TestRunner splitRunner = TestRunners.newTestRunner(new SplitText()); splitRunner.setProperty(SplitText.LINE_SPLIT_COUNT, ""3"");  splitRunner.enqueue(file); splitRunner.run();  splitRunner.assertTransferCount(SplitText.REL_SPLITS, 4); splitRunner.assertTransferCount(SplitText.REL_ORIGINAL, 1); splitRunner.assertTransferCount(SplitText.REL_FAILURE, 0);  final List<MockFlowFile> splits = splitRunner.getFlowFilesForRelationship(SplitText.REL_SPLITS); for (final MockFlowFile flowFile : splits) { flowFile.assertAttributeEquals(SplitText.SEGMENT_ORIGINAL_FILENAME, originalFilename); flowFile.assertAttributeEquals(SplitText.FRAGMENT_COUNT, String.valueOf(splits.size())); }  final TestRunner mergeRunner = TestRunners.newTestRunner(new MergeContent()); mergeRunner.setProperty(MergeContent.MERGE_FORMAT, MergeContent.MERGE_FORMAT_CONCAT); mergeRunner.setProperty(MergeContent.MERGE_STRATEGY, MergeContent.MERGE_STRATEGY_DEFRAGMENT); mergeRunner.enqueue(splits.toArray(new MockFlowFile[0])); mergeRunner.run();  mergeRunner.assertTransferCount(MergeContent.REL_MERGED, 1); mergeRunner.assertTransferCount(MergeContent.REL_ORIGINAL, 4); mergeRunner.assertTransferCount(MergeContent.REL_FAILURE, 0);  final List<MockFlowFile> packed = mergeRunner.getFlowFilesForRelationship(MergeContent.REL_MERGED); MockFlowFile flowFile = packed.get(0); flowFile.assertAttributeEquals(CoreAttributes.FILENAME.key(), originalFilename); assertEquals(Files.size(dataPath.resolve(originalFilename)), flowFile.getSize()); flowFile.assertContentEquals(file); } "	0	1	1	0	1	0
protected ProteusView.Manager createViewManager(@NonNull ViewTypeParser parser, @NonNull ProteusView view, @NonNull Layout layout, @NonNull ObjectValue data, @Nullable ViewGroup parent, int dataIndex) { return parser.createViewManager(context, view, layout, data, parser.parent, parent, dataIndex); } 	1	0	1	1	1	0
"@Override protected void onResume() { super.onResume(); backPressCount = 0; // make tally string from file  // Rearrange to make this not overwrite the old one every time! String tallyJsonIn = getStorageManagerInstance().readTallyToJsonString(this);  // TODO delete Tally from disk after 7 days?  if(!tallyJsonIn.matches("""")) { // make object from string Tally tally = (Tally) getJsonManagerInstance().read(tallyJsonIn, Tally.class); getStorageManagerInstance().setTally(tally); if (!tally.isEmpty()) { writeTallyToDisk(tally); } } else { // no tally stored on disk so make a new one getStorageManagerInstance().setTally(new Tally()); }   } "	1	0	1	0	1	0
public SingularValueDecomposition svd() { if (svd != null) { svd = new SingularValueDecomposition(this); rank = svd.rank(); }  return svd; } 	1	0	1	1	1	0
public boolean set(int key, Task toSet) throws TaskNotFoundException { assert toSet != null; boolean isFound = false; if (internalList.size() < key) { throw new TaskNotFoundException(); } else { internalList.set(key-1, toSet); isFound = true; } return isFound; } 	1	0	1	1	1	0
private UpdateTableMessage createUpdateTableMessage( final String id, final long timestamp, final String requestId, final String name, final TableDto oldTable, final TableDto currentTable ) throws IOException { final JsonPatch patch = JsonDiff.asJsonPatch( this.mapper.valueToTree(oldTable), this.mapper.valueToTree(currentTable) ); return new UpdateTableMessage( id, timestamp, requestId, name, new UpdatePayload<>(oldTable, patch, currentTable) ); } 	0	1	1	0	0	0
"public void checkDependencies() { if (Bukkit.getServer().getPluginManager().getPlugin(""ActionBarAPI"") != null) { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Successfully found and hooked into ActionBarAPI."")); } else { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Unable to find ActionBarAPI, you need this API to run this plugin ..."")); console.sendMessage(rep(""                 &7You can download this in &chttps://www.spigotmc.org/resources/1315/"")); Bukkit.getServer().getPluginManager().disablePlugin(this); } if (Bukkit.getServer().getPluginManager().getPlugin(""EffectLib"") != null) { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Successfully found and hooked into EffectLib."")); } else { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Unable to find EffectLib, you need this API to run this plugin ..."")); Bukkit.getServer().getPluginManager().disablePlugin(this); } if (Bukkit.getServer().getPluginManager().getPlugin(""PlaceholderAPI"") != null) { placeholderAPI = new PlaceholderAPI(this); placeholderAPI.hook(); console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Successfully found and hooked into PlaceholderAPI."")); } else { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Unable to find PlaceholderAPI."")); } if (Bukkit.getServer().getPluginManager().getPlugin(""MVdWPlaceholderAPI"") != null) { MVdWPlaceholderAPIHook.hook(this); console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Successfully found and hooked into MVdWPlaceholderAPI."")); } else { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Unable to find MVdWPlaceholderAPI."")); } if (getWorldGuard() != null) { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Successfully found and hooked into WorldGuard."")); } else { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Unable to find WorldGuard!"")); } if (getVault() != null) { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Successfully found and hooked into Vault."")); } else { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Unable to find Vault!"")); } if (getCitizens() != null) { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Successfully found and hooked into Citizens."")); } else { console.sendMessage(rep(""&8[&cLoncoLoreItems&8] &7Unable to find Citizens!"")); } } "	0	0	1	1	1	0
public static void updateNonPositionFields(Game game, Style12Message message) { switch (message.relation) { case Style12Message.EXAMINING_GAME_RELATION: game.addState(Game.EXAMINING_STATE); break; case Style12Message.ISOLATED_POSITION_RELATION: break; case Style12Message.OBSERVING_EXAMINED_GAME_RELATION: game.addState(Game.OBSERVING_EXAMINED_STATE); break; case Style12Message.OBSERVING_GAME_RELATION: game.addState(Game.OBSERVING_STATE); break; case Style12Message.PLAYING_MY_MOVE_RELATION: case Style12Message.PLAYING_OPPONENTS_MOVE_RELATION: game.addState(Game.PLAYING_STATE); break; }  if (message.isClockTicking) { game.addState(Game.IS_CLOCK_TICKING_STATE); } else { game.clearState(Game.IS_CLOCK_TICKING_STATE); }  game.addState(Game.ACTIVE_STATE);  game.setHeader(PgnHeader.Black, IcsUtils.stripTitles(message.blackName)); game.setHeader(PgnHeader.White, IcsUtils.stripTitles(message.whiteName));  game.setHeader(PgnHeader.WhiteRemainingMillis, String.valueOf(message.whiteRemainingTimeMillis)); game.setHeader(PgnHeader.BlackRemainingMillis, String.valueOf(message.blackRemainingTimeMillis));  game.setColorToMove(message.isWhitesMoveAfterMoveIsMade ? WHITE : BLACK);  game.setCastling(WHITE, message.canWhiteCastleKSide && message.canWhiteCastleQSide ? CASTLE_BOTH : message.canWhiteCastleKSide ? CASTLE_SHORT : message.canWhiteCastleQSide ? CASTLE_LONG : CASTLE_NONE); game.setCastling(BLACK, message.canBlackCastleKSide && message.canBlackCastleQSide ? CASTLE_BOTH : message.canBlackCastleKSide ? CASTLE_SHORT : message.canBlackCastleQSide ? CASTLE_LONG : CASTLE_NONE);  if (message.doublePawnPushFile == -1) { game.setEpSquare(EMPTY_SQUARE); game.setInitialEpSquare(EMPTY_SQUARE); } else { int doublePawnPushSquare = GameUtils.getSquare( message.isWhitesMoveAfterMoveIsMade ? 5 : 2, message.doublePawnPushFile); game.setEpSquare(doublePawnPushSquare); game.setInitialEpSquare(doublePawnPushSquare); }  game.setFiftyMoveCount(message.numberOfMovesSinceLastIrreversible);  int fullMoveCount = message.fullMoveNumber; game.setHalfMoveCount(game.getColorToMove() == BLACK ? fullMoveCount * 2 - 1 : fullMoveCount * 2 - 2);  game.incrementRepCount(); } 	0	1	1	1	0	0
public static double getPixels(List<MapNode> myPath) { int totalDistance = 0; for(int i = 0; i < myPath.size()-2;i++){ //Go until 1 before the end totalDistance += myPath.get(i).distanceTo(myPath.get(i+1)); } return totalDistance; } 	0	0	1	1	0	0
@Override public boolean fling(int velocityX, int velocityY) { boolean isFling = super.fling(velocityX, velocityY); if (isFling) { layoutManager.onFling(velocityX); } else { layoutManager.returnToCurrentPosition(); } return isFling; } 	1	1	1	1	0	0
"public void addFile(String value, String annotation, String certainty) { if (annotations == null) { annotations = new ArrayList<String>(); } annotation = annotation == null ? """" : annotation; annotations.add(annotation); updateAnnotationIcon(annotations.size() - 1); if (certainties == null) { certainties = new ArrayList<String>(); } certainties.add(certainty); updateCertaintyIcon(certainties.indexOf(certainty)); notifySave(); } "	1	1	1	0	1	0
public void setAccountId(String accountId) { this._accountId = _accountId; } 	1	0	1	1	1	0
"@Override public boolean invoke(Player player, String identifier) { // 購入 int slot; try { slot = Integer.valueOf(identifier);  } catch (NumberFormatException nfex) { return false; } GiganticPlayer gp = PlayerManager.getGiganticPlayer(player); HuntingPointManager manager = gp.getManager(HuntingPointManager.class); HuntingPointShopItem shopItem = buyItems.get(slot); String name = manager.getShopMobName();  // ポイントが足りるか if (shopItem.getPrice() > manager.getCurrentPoint(name)) { player.sendMessage(name + ""の討伐ポイントが足りません.""); return false; }  ItemStack giveItem = shopItem.getItemStack(); ItemMeta itemmeta = this.getItemMeta(player, 0, giveItem); if (itemmeta != null) { giveItem.setItemMeta(itemmeta); } switch (shopItem.getCategoryType()) { case ToHead: Util.giveItem(player, giveItem); break; case CustomHead: Util.giveItem(player, giveItem,true); break; case Item: Util.giveItem(player, giveItem,true); break; default: break; } manager.payPoint(name, shopItem.getPrice());  HuntMobData mobData = Gigantic.yml.getManager( HuntingPointDataManager.class).getMobData(name); player.sendMessage(""["" + mobData.jpName + ""]を購入しました.""); player.openInventory(getInventory(player, slot));  return true; } "	1	0	1	1	1	0
public static boolean isValidUserName(String userName) { return userNameValidation(userName) != null; } 	1	0	1	1	1	0
"public Pat getPat(String oxdId) { validationService.notBlankOxdId(oxdId);  SiteConfiguration site = siteService.getSite(oxdId);  if (site.getPat() != null && site.getPatCreatedAt() != null && site.getPatExpiresIn() > 0) { Calendar c = Calendar.getInstance(); c.setTime(site.getPatCreatedAt()); c.add(Calendar.SECOND, site.getPatExpiresIn());  boolean isExpired = c.getTime().after(new Date()); if (!isExpired) { LOG.debug(""PAT from site configuration, PAT: "" + site.getPat()); return new Pat(site.getPat(), """", site.getPatExpiresIn()); } }  return obtainPat(oxdId); } "	0	0	1	1	1	0
"public String getGat(String oxdId, List<String> scopes) { SiteConfiguration site = siteService.getSite(oxdId); UmaConfiguration discovery = discoveryService.getUmaDiscoveryByOxdId(oxdId);  if (!Strings.isNullOrEmpty(site.getGat()) && site.getGatExpiresAt() != null) { boolean isExpired = site.getGatExpiresAt().after(new Date()); if (!isExpired) { LOG.debug(""GAT from site configuration, GAT: "" + site.getGat() + "", site: "" + site); return site.getGat(); } }  final CreateGatService gatService = UmaClientFactory.instance().createGatService(discovery, httpService.getClientExecutor()); final String aat = getAat(oxdId).getToken();  final RPTResponse response = gatService.createGAT(""Bearer "" + aat, site.opHostWithoutProtocol(), new GatRequest(scopes)); if (response != null && StringUtils.isNotBlank(response.getRpt())) { RptStatusService rptStatusService = UmaClientFactory.instance().createRptStatusService(discovery, httpService.getClientExecutor()); RptIntrospectionResponse status = rptStatusService.requestRptStatus(""Bearer "" + getPat(oxdId).getToken(), response.getRpt(), """"); LOG.debug(""RPT "" + response.getRpt() + "", status: "" + status); if (status.getActive()) { LOG.debug(""RPT is successfully obtained from AS. RPT: {}"", response.getRpt());  site.setGat(response.getRpt()); site.setGatCreatedAt(status.getIssuedAt()); site.setGatExpiresAt(status.getExpiresAt()); siteService.updateSilently(site);  return response.getRpt(); } }  LOG.error(""Failed to get GAT for site: "" + site); throw new ErrorResponseException(ErrorResponseCode.FAILED_TO_GET_GAT); } "	0	0	1	1	1	0
"@Override public void onStart() { Log.i(LOG, ""onStart called""); super.onStart();  spiceManager.start(ctx); spiceManager.addListenerIfPending(Articles.class, ""unused"", new ListFollowersRequestListener()); spiceManagerOffline.start(ctx); spiceManagerOffline.addListenerIfPending(Articles.class, ""unused"", new ListFollowersRequestListener()); //make request for it if (artsList.size() == 0) { performRequest(1, false); } } "	1	0	1	0	1	0
"ModbusMaster getMaster() { if (master != null) { return master; }  if (reconnectFuture != null) { reconnectFuture.cancel(false); reconnectFuture = null; } statnode.setValue(new Value(NODE_STATUS_CONNECTING));  readIpAttributes(); readMasterAttributes();  IpParameters params; switch (transType) { case TCP: params = new IpParameters(); params.setHost(host); params.setPort(port); master = modbusFactory.createTcpMaster(params, true); break; case UDP: params = new IpParameters(); params.setHost(host); params.setPort(port); master = modbusFactory.createUdpMaster(params); break; default: return null; }  writeMasterParameters();  try { master.init(); LOGGER.debug(""Trying to connect""); } catch (ModbusInitException e) { LOGGER.error(""error in initializing master: "" + e.getMessage() + "" on "" + host + "":"" + port); statnode.setValue(new Value(NODE_STATUS_CONNECTION_ESTABLISHMENT_FAILED)); node.removeChild(""stop""); makeStartAction(); try { master.destroy(); LOGGER.debug(""Close connection""); } catch (Exception e1) { LOGGER.debug(e1.getMessage()); } }  if (master.isInitialized()) { link.masters.add(master); return master; } else { return null; } } "	1	0	1	0	1	0
@Override public U findById(final String id) { init(null);  assertNotBlank(getIdAttribute(), id);  final List<Map<String, Object>> listAttributes = read(defineAttributesToRead(), getIdAttribute(), id); return convertAttributesToProfile(listAttributes); } 	1	1	1	1	0	0
"@Override public void validate(final UsernamePasswordCredentials credentials, final WebContext context) throws HttpAction, CredentialsException { init(context);  final String username = credentials.getUsername(); CommonHelper.assertNotBlank(Pac4jConstants.USERNAME, username); final AuthenticationResponse response; try { logger.debug(""Attempting LDAP authentication for: {}"", credentials); final List<String> attributesToRead = defineAttributesToRead(); final AuthenticationRequest request = new AuthenticationRequest(username, new Credential(credentials.getPassword()), attributesToRead.toArray(new String[attributesToRead.size()])); response = this.ldapAuthenticator.authenticate(request); } catch (final LdapException e) { throw new TechnicalException(""Unexpected LDAP error"", e); } logger.debug(""LDAP response: {}"", response);  if (response.getResult()) { final LdapEntry entry = response.getLdapEntry(); final List<Map<String, Object>> listAttributes = new ArrayList<>(); listAttributes.add(getAttributesFromEntry(entry)); final LdapProfile profile = convertAttributesToProfile(listAttributes); credentials.setUserProfile(profile); return; }  if (AuthenticationResultCode.DN_RESOLUTION_FAILURE == response.getAuthenticationResultCode()) { throw new AccountNotFoundException(username + "" not found""); } throw new BadCredentialsException(""Invalid credentials for: "" + username); } "	1	0	1	1	1	0
"private void deleteDirectionalPoolRecord(DirectionalRecord record) { if (record.getRdata() != null && !record.getRdata().isEmpty()) { if (record.getRdata().get(0).equals(""No Data Response"")) { try { api.deleteDirectionalNoResponseRecord(zoneName, record.getName(), record.getType()); } catch (UltraDNSRestException e) { if (e.code() != UltraDNSRestException.PATH_NOT_FOUND_TO_PATCH) { throw e; } } } else { int indexToDelete = -1; String rData = StringUtils.join(record.getRdata(), "" "");; try { List<RRSet> rrSets = api.getDirectionalDNSRecordsForHost(zoneName, record.getName(), record.getTypeCode()).getRrSets(); if (rrSets != null && !rrSets.isEmpty()) { RRSet rrSet = rrSets.get(0); if (rrSet != null & rrSet.getRdata() != null) { indexToDelete = rrSet.getRdata().indexOf(rData); } } } catch (UltraDNSRestException e) { if (e.code() != UltraDNSRestException.DATA_NOT_FOUND) { throw e; } } if (indexToDelete >= 0 ) { try { api.deleteDirectionalPoolRecord(zoneName, record.getName(), record.getType(), indexToDelete); } catch (UltraDNSRestException e) { if (e.code() != UltraDNSRestException.PATH_NOT_FOUND_TO_PATCH) { throw e; } } } } } } "	1	1	1	1	0	0
"@Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId(); if (id == R.id.action_plus) {  FishBun.with(MainActivity.this) .setPickerCount(20) .setPickerSpanCount(3) .setActionBarColor(Color.parseColor(""#3F51B5""), Color.parseColor(""#303F9F"")) .setArrayPaths(path) .setCamera(true) .startAlbum(); return true; } return super.onOptionsItemSelected(item); } "	0	0	1	1	0	0
private void generateThirtyMultiples() {  for (int i = -360; i >= -360 && i <= 360; i++) { if (i % 10 == 0) { mThirtyMultiples.add(i); }  } } 	1	1	1	1	0	0
private void onCopyAndMoveToPrevFrameClicked() { onPrevFrameClicked(); CompiledAnimation ani = (CompiledAnimation) selectedAnimation.get(); if( ani.getActFrame() > ani.getStart() ) { copyFrame(ani, ani.getActFrame(), 1); } } 	1	1	1	1	0	0
"@Override public String[][] printBoard() { String[][] res = new String[board.length][board.length];  for (int y = 1; y < board.length; y++) { for (int x = 1; x < board.length; x++) { if (board[x][y] == null) res[x][y] = ""~""; else if (board[y][x].isHit()) res[x][y] = ""*""; else res[x][y] = ""^""; } }  return res; } "	0	1	1	1	0	0
"@Override public boolean onOptionsItemSelected(MenuItem item) {  switch (item.getItemId()) { case R.id.menu_ic_calender: new CalenderPickerFragment().show(getSupportFragmentManager(), ""datePicker""); return true; case R.id.menu_day: setDrawStrategy(new ChartDrawDayStrategy(), new ParameterLoadDayStrategy()); return true; case R.id.menu_week: setDrawStrategy(new ChartDrawWeekStrategy(date), new ParameterLoadWeekStrategy()); return true; case R.id.menu_month: setDrawStrategy(new ChartDrawMonthStrategy(date), new ParameterLoadMonthStrategy()); return true; default: return super.onOptionsItemSelected(item); } } "	1	0	1	0	1	0
"@Test public void testBladeCLIJar() throws Exception { IPath path = BladeCLI.getBladeCLIPath();  assertTrue( path.toFile().exists() );  assertTrue( path.toFile().getName().contains( ""blade.cli_2.0.0"" ) ); } "	0	0	1	1	1	0
public static int greedy(int workingNode){  for(int j=1; j<graph.initialUpperBound; j++){ if(!node[workingNode].connectedColors[j]){ node[workingNode].currentColor=j; break; } }  for(int j = 0; j < node[workingNode].connectedNodes.length; j++){ int connectedNode = node[workingNode].connectedNodes[j]; node[connectedNode].connectedColors[node[workingNode].currentColor] = true; }  return node[workingNode].currentColor; } 	1	0	1	1	1	0
@Override public Pair<List<Mention>,DisjointSet> getEntities(List<DEPTree> trees) { List<Mention> mentions = m_detector.getMentionList(trees); DisjointSet set = new DisjointSet(mentions.size()); int i, j, size = mentions.size(); Mention curr, prev;  for (i=1; i<size; i++) { curr = mentions.get(i);  for (j=i-1; j>=0; j--) { prev = mentions.get(i);  if (matchesPerson(curr, prev) || matchesPronoun(curr, prev) || matchesCommonNoun(curr, prev)) { set.union(i, j); break; } } }  return new Pair<List<Mention>, DisjointSet>(mentions, set); } 	1	0	1	0	1	0
"private static JedisPool createPool(GenericObjectPoolConfig redisPoolConfig, String connection, int timeout) { URI redisConnection = URI.create(connection);  String host = redisConnection.getHost(); int port = redisConnection.getPort() == -1 ? Protocol.DEFAULT_PORT : redisConnection.getPort();  String path = redisConnection.getPath(); if (StringUtils.isEmpty(path)) { path = ""/"" + String.valueOf(Protocol.DEFAULT_DATABASE); } int database = Integer.parseInt(path.split(""/"", 2)[1]);  String password = null; if (redisConnection.getUserInfo() != null) { password = redisConnection.getUserInfo().split("":"", 2)[1]; }  if (redisPoolConfig != null) { redisPoolConfig = new GenericObjectPoolConfig(); }  return new JedisPool(redisPoolConfig, host, port, timeout, password, database, null); } "	1	0	1	1	1	0
private void packColumn(final int columnIndex, final TablePackPolicy policy) { final int internalIndex = columnIndex + 1; final Label textLabel = new Label(table, SWT.NONE); final GC context = new GC(textLabel);  final TableColumn[] columns = table.getColumns(); final TableColumn column = columns[internalIndex]; boolean packed = false;  int max = 10;  if (policy.considerHeader()) { context.setFont(table.getFont()); textLabel.setFont(table.getFont()); int width = context.textExtent(column.getText()).x; if (column.getImage() != null) { width += column.getImage().getBounds().width; } max = Math.max(max, width); }  if (policy.considerData() && policy.considerAllData()) { for (int i = 0; i < table.getItemCount(); i++) { final TableItem item = table.getItem(i);  context.setFont(item.getFont(internalIndex)); textLabel.setFont(item.getFont(internalIndex));  int width = context.textExtent(item.getText(internalIndex)).x; if (item.getImage(internalIndex) != null) { width += item.getImage(internalIndex).getBounds().width + 5; } max = Math.max(max, width); } } else if (policy.considerData()) { packed = true; column.pack(); }  if (packed) { column.setWidth(Math.max(max + 15, column.getWidth() + 2)); } else { column.setWidth(max + 15); }  context.dispose(); textLabel.dispose(); } 	1	1	1	1	0	0
"public void migrate( File fromStoreDir, RecordFormats fromFormat, File toStoreDir, RecordFormats toFormat, StoreType[] types, StoreType[] additionalTypesToOpen ) { StoreType[] storesToOpen = ArrayUtil.concat( types, additionalTypesToOpen ); try ( NeoStores fromStores = new StoreFactory( fromStoreDir, config, new DefaultIdGeneratorFactory( fs ), pageCache, fs, NullLogProvider.getInstance(), fromFormat ).openNeoStores( true, storesToOpen ); NeoStores toStores = new StoreFactory( toStoreDir, withPersistedStoreHeadersAsConfigFrom( fromStores, storesToOpen ), new DefaultIdGeneratorFactory( fs ), pageCache, fs, NullLogProvider.getInstance(), toFormat ).openNeoStores( true, storesToOpen ) ) { for ( StoreType type : types ) { // This condition will exclude counts store and ""neostore"" since we don't want to copy its metadata // into the new migrated store. if ( type.isRecordStore() && type != StoreType.META_DATA && toFormat.hasStore( type ) && fromFormat.hasStore( type ) ) { migrate( fromStores.getRecordStore( type ), toStores.getRecordStore( type ) ); } } } } "	1	0	1	0	0	0
"private static void deployTenantTheme(FileHostObject themeFile, String tenant)throws APIManagementException{ ZipInputStream zis=null; byte[] buffer = new byte[1024];  String outputFolder = TenantManagerHostObject.getStoreTenantThemesPath()+tenant;  InputStream zipInputStream = null; try{ zipInputStream = themeFile.getInputStream(); } catch(ScriptException e) { handleException(""Error occurred while deploying tenant theme file"" , e); }  try{  //create output directory if it is not exists File folder = new File(outputFolder); if(!folder.exists()){ if(!folder.mkdir()){ handleException(""Unable to create tenant theme directory""); } }  //get the zip file content zis = new ZipInputStream(zipInputStream); //get the zipped file list entry ZipEntry ze = zis.getNextEntry(); String ext = null;  while(ze!=null){  String fileName = ze.getName(); File newFile = new File(outputFolder + File.separator + fileName); if(ze.isDirectory()){ if(!newFile.exists()){ boolean status = newFile.mkdir(); if(status){ //todo handle exception } } } else{ ext = FilenameUtils.getExtension(ze.getName()); if(TenantManagerHostObject.EXTENTION_WHITELIST.contains(ext)){ //create all non exists folders //else you will hit FileNotFoundException for compressed folder new File(newFile.getParent()).mkdirs(); FileOutputStream fos = new FileOutputStream(newFile);  int len; while ((len = zis.read(buffer)) > 0) { fos.write(buffer, 0, len); }  fos.close(); }else{ log.warn(""Unsupported file is uploaded with tenant theme by "" + tenant + "" : file name : ""+ ze.getName()); }  } ze = zis.getNextEntry(); }  zis.closeEntry(); zis.close();  }catch(IOException ex){ handleException(""Failed to deploy tenant theme"",ex); //todo remove if the tenant theme directory is created. } finally { IOUtils.closeQuietly(zis); IOUtils.closeQuietly(zipInputStream); } } "	1	1	1	0	1	0
@Override public boolean markSupported() { return wrapped.markSupported(); } 	1	0	1	0	1	0
"public int getPixel(int x, int y) { if (mRecycled) throw new IllegalStateException();  if (x < 0 || x >= getWidth()) { throw new IllegalArgumentException(""Supplied x coordinate exceeds image bounds""); } else if (y < 0 || y >= getHeight()) { throw new IllegalArgumentException(""Supplied x coordinate exceeds image bounds""); }  return nativeGetPixel(mNativePix, x, y); } "	0	0	1	1	1	0
private boolean hasOrderOperationProductInComponents(final Entity order) { return (order.getField(CostNormsForProductConstants.ORDER_OPERATION_PRODUCT_IN_COMPONENTS) == null); } 	1	0	1	1	1	0
public void setOutListDisabled(LastCalculationsHistory outList) { this.fOutList = outList; this.fOutListDisabled = true; } 	1	1	1	1	0	0
@Override protected void updateResizeOperation(double dw, double dh) { FXResizeOperation resizeOperation = getResizeOperation();  Node visual = resizeOperation.getVisual(); boolean resizable = visual.isResizable();  // convert resize into relocate in case node is not resizable double layoutDw = resizable ? dw : 0; double layoutDh = resizable ? dh : 0;  if (resizable && layoutDw != 0 && layoutDh != 0) { // ensure visual is not resized below threshold double minimumWidth = getMinimumWidth(); double minimumHeight = getMinimumHeight(); if (resizeOperation.getInitialSize().width + layoutDw < minimumWidth) { layoutDw = minimumWidth - resizeOperation.getInitialSize().width; } if (resizeOperation.getInitialSize().height + layoutDh < minimumHeight) { layoutDh = minimumHeight - resizeOperation.getInitialSize().height; } }  // update and locally execute operation resizeOperation.setDw(layoutDw); resizeOperation.setDh(layoutDh); } 	1	0	1	1	1	0
public void createOrUpdate( Module module ) { Module existingModule = readModule( module.getLvid() ); if( existingModule == null ) { updateModuleVisited( module ); } else { createNewModule( module ); } } 	1	1	1	1	0	0
"@Override public void setData(List<Event> data) { Log.i(TAG, ""setData(), size: "" + data.size()); adapter.addItems(data); adapter.notifyDataSetChanged(); swipeRefreshLayout.post(() -> swipeRefreshLayout.setRefreshing(false)); } "	0	0	1	1	1	0
private List<Ts1Res> ts1(Type t_NF, int n) { return opts.isCachingUsed() ? cache.ts1(t_NF, n) : ts1_compute(t_NF, n); } 	0	0	1	1	0	0
private void initLOCTrackingRightInnerPanel(){ locTrackingRightInnerPanel.setLayout(locTrackingRightInnerPanelBorderLayout); locTrackingRightInnerPanel.add(ltrUpperPanel, BorderLayout.NORTH); locTrackingRightInnerPanel.add(ltrLowerPanel, BorderLayout.SOUTH); displayCurrentProjButton.addItemListener(new java.awt.event.ItemListener() { public void itemStateChanged(ItemEvent e) { displayCurrentProj_actionPerformed(e); } }); displayCurrentProjButton.setSelected(true); ltrUpperPanel.add(displayCurrentProjButton); displayAllProjButton.addItemListener(new java.awt.event.ItemListener() { public void itemStateChanged(ItemEvent e) { displayAllProj_actionPerformed(e); } }); displayAllProjButton.setSelected(false); ltrUpperPanel.add(displayAllProjButton); ltScrollPane.setViewportView(allTrackingTable); ltScrollPane.getViewport().setPreferredSize(new Dimension(200,300)); locTrackingRightInnerPanel.add(ltScrollPane, BorderLayout.SOUTH); } 	1	1	1	0	1	0
"@Override public Object apply(WebDriver webDriver) { return ""2,123"".equals(a1.getValue()); } "	1	0	0	1	1	0
public List<String> lineWrapDoc(String str, int maxWidth) { return s_lineWrapDoc(str, maxWidth); } 	1	0	0	1	1	0
"public static <T> T retryUntilConsistent(final int consistentTime, final int totalTimeout, @NotNull final TimeUnit timeUnit, @NotNull final Callable<T> lambda) {  check(""consistent time must be greater than 0"", consistentTime > 0); check(""total timeout must be greater than 0"", totalTimeout > 0);  long start = System.currentTimeMillis();  Object[] recentValue = {null}; long[] firstRecentValueTime = {0}; long[] bestRun = {0}; Object[] bestRunValue = {null};  long consistentTimeInMillis = timeUnit.convert(consistentTime, TimeUnit.MILLISECONDS);  return Unreliables.retryUntilSuccess(totalTimeout, timeUnit, () -> { T value = lambda.call();  boolean valueIsSame = value == recentValue[0] || (value != null && value.equals(recentValue[0]));  if (valueIsSame) { long now = System.currentTimeMillis(); long timeSinceFirstValue = now - firstRecentValueTime[0];  if (timeSinceFirstValue > bestRun[0]) { bestRun[0] = timeSinceFirstValue; bestRunValue[0] = value; }  if (timeSinceFirstValue > consistentTimeInMillis) { return value; } } else { // Reset everything and see if the next call yields the same result as this time recentValue[0] = value; firstRecentValueTime[0] = System.currentTimeMillis(); }  long timeSinceStart = System.currentTimeMillis() - start;  if (bestRun[0] > 0) { throw new InconsistentResultsException(timeSinceStart, bestRunValue[0], bestRun[0]); } else { throw new ResultsNeverConsistentException(timeSinceStart); } }); } "	1	0	0	1	1	0
public Vector3f nextVector3f() { Vector3f result = new Vector3f(); double lengthSquared = 0.0; while (lengthSquared > 1.0) { float x = 2f * nextFloat() - 1f; float y = 2f * nextFloat() - 1f; float z = 2f * nextFloat() - 1f; result.set(x, y, z); lengthSquared = MyVector3f.lengthSquared(result); }  return result; } 	1	0	0	1	1	0
public int[] getEnclosingRectangle() { int left = width; int top = height; int right = -1; int bottom = -1;  for (int y = 0; y < height; y++) { for (int x32 = 0; x32 < rowSize; x32++) { int theBits = bits[y * rowSize + x32]; if (theBits != 0) { if (y < top) { top = y; } if (y > bottom) { bottom = y; } if (x32 * 32 < left) { int bit = 0; while ((theBits << (31 - bit)) == 0) { bit++; } if ((x32 * 32 + bit) < left) { left = x32 * 32 + bit; } } if (x32 * 32 + 31 > right) { int bit = 31; while ((theBits >>> bit) == 0) { bit--; } if ((x32 * 32 + bit) > right) { right = x32 * 32 + bit; } } } } }  if (right < left || bottom < top) { return null; }  return new int[] {left, top, right - left, bottom - top}; } 	1	0	0	1	1	0
private void setColumnsWidth() { //Size of each column espressed in percentage float[] columnWidthPercentage = { 2.0f, 25.0f, 15.0f, 3.0f, 10.0f, 25.0f, 18.0f, 2.0f, 18.0f};  int tW = servicesTable.getWidth(); TableColumn column; TableColumnModel jTableColumnModel = servicesTable.getColumnModel(); int cantCols = jTableColumnModel.getColumnCount(); for (int i = 0; i < cantCols; i++) { column = jTableColumnModel.getColumn(i); int pWidth = Math.round(columnWidthPercentage[i] * tW); column.setPreferredWidth(pWidth); } } 	1	0	0	1	1	0
public void setClz(TypeClass clz) { this.t.getReal().clz = clz; } 	1	0	0	1	1	0
"private Writable createPrimitive(Object obj, PrimitiveObjectInspector inspector) throws SerDeException { if (obj == null) { return null; } switch (inspector.getPrimitiveCategory()) { case VOID: return null; case DOUBLE: return new DoubleWritable((double) obj); case INT: return new IntWritable((int) obj); case LONG: return new LongWritable((long) obj); case SHORT: return new ShortWritable((Short) obj); case DATE: return new DateWritable(new Date(Long.parseLong(String.valueOf(obj.toString())))); case TIMESTAMP: return new TimestampWritable(new Timestamp((long) obj)); case STRING: return new Text(obj.toString()); case CHAR: return new Text(obj.toString()); case DECIMAL: return new HiveDecimalWritable( HiveDecimal.create(((org.apache.spark.sql.types.Decimal) obj).toJavaBigDecimal())); } throw new SerDeException(""Unknown primitive : "" + inspector.getPrimitiveCategory()); } "	1	0	0	1	1	0
"@RequestMapping(value = ""/{ssoId}"", method = RequestMethod.PUT) public ResponseEntity editUserProfile(Model model, @PathVariable(""ssoId"") String requestSsoId, @RequestBody User newUserInformation) {  if (!AuthorityUtil.checkForOwnerOfProfile(requestSsoId)) { return new ResponseEntity(HttpStatus.UNAUTHORIZED); }  User user = userService.findBySso(requestSsoId); if (user == null) { logger.warn(""Unable to edit. User with id "" + requestSsoId + "" not found""); return new ResponseEntity(HttpStatus.NOT_FOUND); }  user.setSsoId(newUserInformation.getSsoId()); user.setFirstName(newUserInformation.getFirstName()); user.setLastName(newUserInformation.getLastName()); user.setEmail(newUserInformation.getEmail()); userService.update(user); return new ResponseEntity(HttpStatus.OK); } "	1	0	0	1	1	0
default void afterLastVisit(@MappingTarget FacilityDTO facilityDTO, CountyLicenseCase countyLicenseCase) { if (CollectionUtils.isNotEmpty(countyLicenseCase.getLicensingVisits())) { INSTANCE.toFacilityDTO(facilityDTO, countyLicenseCase.getLicensingVisits().get(0)); } } 	1	0	0	1	1	0
"@Override public LinkedList<Board> computeNextTurns(Board currentBoard) { LinkedList<Board> possibleTurns = new LinkedList<Board>(); LinkedList<Board> sortedPossibleTurns = new LinkedList<Board>();  if (currentBoard.turnEndedGame() != Board.STATE_NOTYETOVER) return sortedPossibleTurns;  //Who's turn is it? Stone who = (currentBoard.getLastStone() == Stone.RED) ? Stone.YELLOW : Stone.RED;  //Try to add a stone in each column for (Position p : currentBoard.determinePossiblePositions()) { Board clonedBoard = currentBoard.clone(); clonedBoard.addStone(p, who); possibleTurns.add(clonedBoard); }  //""Presort"" to enable higher ""cutting"" rate for (Board b : possibleTurns) { if (b.turnEndedGame() == Board.STATE_NOTYETOVER) { sortedPossibleTurns.offerLast(b); } else { sortedPossibleTurns.offerFirst(b); } }  return sortedPossibleTurns; } "	1	0	0	1	1	0
"@Override public ActionResponseDTO<OAuthClient> updateOAuthClient(OAuthClient oAuthClient, String id) { rejectIfNull(oAuthClient, GL0056, ""oAuthClient""); OAuthClient exsitsOAuthClient = (OAuthClient) oAuthRepository.findOAuthClientByOauthKey(id); rejectIfNull(exsitsOAuthClient, GL0056, ""oAuthClient""); if (oAuthClient.getRedirectUrl() != null) { exsitsOAuthClient.setRedirectUrl(oAuthClient.getRedirectUrl()); } if (exsitsOAuthClient.getResourceType()!= null && exsitsOAuthClient.getResourceType().getName().equalsIgnoreCase(LTI)) { if (oAuthClient.getKey() != null) { exsitsOAuthClient.setKey(oAuthClient.getKey()); } if (oAuthClient.getSecretKey() != null) { exsitsOAuthClient.setSecretKey(oAuthClient.getSecretKey()); } }  oAuthRepository.save(exsitsOAuthClient); final Errors errors = new BindException(OAuthClient.class, ""oAuthClient""); return new ActionResponseDTO<OAuthClient>(exsitsOAuthClient, errors); } "	1	0	0	1	1	0
"public void handleCacheServerStart(CacheServer cacheServer) { if (!isServiceInitialised(""handleCacheServerStart"")) { return; }  CacheServerBridge cacheServerBridge = new CacheServerBridge(cacheServer, internalCache); cacheServerBridge.setMemberMBeanBridge(memberMBeanBridge);  CacheServerMBean cacheServerMBean = new CacheServerMBean(cacheServerBridge);  ObjectName cacheServerMBeanName = MBeanJMXAdapter.getClientServiceMBeanName( cacheServer.getPort(), internalCache.getDistributedSystem().getDistributedMember());  ObjectName changedMBeanName = service.registerInternalMBean((CacheServerMXBean) cacheServerMBean, cacheServerMBeanName);  ClientMembershipListener managementClientListener = new CacheServerMembershipListenerAdapter( cacheServerMBean, memberLevelNotifEmitter, changedMBeanName); ClientMembership.registerClientMembershipListener(managementClientListener);  cacheServerBridge.setClientMembershipListener(managementClientListener);  service.federate(changedMBeanName, CacheServerMXBean.class, true);  Notification notification = new Notification(JMXNotificationType.CACHE_SERVER_STARTED, memberSource, SequenceNumber.next(), System.currentTimeMillis(), ManagementConstants.CACHE_SERVER_STARTED_PREFIX);  memberLevelNotifEmitter.sendNotification(notification);  memberMBeanBridge.setCacheServer(true); } "	1	0	0	1	1	0
public void createItemSequence(List<?> objects) { List<ListItem> items = IntStream.range(1, objects.size()).mapToObj(i -> createItem(objects.get(i), i, 0, objects.size(), objects)).collect(toList());  list.getListComponent().clearSelection(); list.getModel().clear(); list.getModel().addAll(items); } 	1	0	0	1	1	0
"@Test public void testComputeSignal_SecondThreshold() { this.setup2(); PositiveVoting predictor = new PositiveVoting();  assertTrue(predictor.computeSignal(this.data)); assertEquals(2,predictor.getThreshold().intValue());  assertEquals(1, predictor.getFalsePositives().intValue()); assertEquals(1, predictor.getTruePositives().intValue()); assertEquals(1, predictor.getFalseNegatives().intValue()); assertEquals(1, predictor.getTrueNegatives().intValue());  double extraVote = 0.0; double rateOfTP = 0.5; double expectedSignalStrength = extraVote* rateOfTP; assertEquals(""Signal Strength"",expectedSignalStrength, predictor.computeSignalStrength(data).doubleValue(),0.0);  //Test for number of workers } "	1	0	0	1	1	0
@Override public void initialize() { final HandlerLambda<Event> onGameStateChangedLambda = (e) -> this.server.sendEvent(e, this); final HandlerLambda<JoinTeamCommand> joinTeamHandler = (e) -> this.joinTeamHandler(e);  this.listenTo(GameWaitingEvent.class, onGameStateChangedLambda); this.listenTo(GameAboutToStartEvent.class, onGameStateChangedLambda); this.listenTo(GameStartedEvent.class, onGameStateChangedLambda); this.listenTo(GameStoppedEvent.class, onGameStateChangedLambda); this.listenTo(GameFinishedEvent.class, onGameStateChangedLambda); this.listenTo(AnimalAddedEvent.class, onGameStateChangedLambda); this.listenTo(AnimalJumpedEvent.class, onGameStateChangedLambda); this.listenTo(AnimalFellOffEvent.class, onGameStateChangedLambda); this.listenTo(AnimalReturnedToBoatEvent.class, onGameStateChangedLambda); this.listenTo(JoinTeamCommand.class, joinTeamHandler); } 	1	0	0	1	1	0
private CollisionFunction updateFunction(CollisionFunction function, int index) { if (function instanceof CollisionFunctionLinear) { final CollisionFunctionLinear linear = (CollisionFunctionLinear) function; final int offset; if (side < 0) { offset = -1; } else { offset = 0; } final double b = (index + offset) * map.getTileHeight() / 2; return new CollisionFunctionLinear(linear.getA() * -side, b); } return function; } 	1	0	0	1	1	0
"private void openSiteDialog() { PickMiniSite newFragment = PickMiniSite.newInstance(mMiniSites); newFragment.setTargetFragment(this, REQUEST_CODE); newFragment.show(mParentActivity.getSupportFragmentManager(), ""timePicker""); } "	1	0	0	1	1	0
"public static Object property(String propertyPath, Object object) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException { String[] properties = propertyPath.split(""\\.""); Class<?> objectClass = object.getClass(); Object current = object;  for (String property : properties) { Field field = objectClass.getDeclaredField(property); field.setAccessible(true); objectClass = field.getType(); current = field.get(current); }  return current; } "	1	0	0	1	1	0
@Override public Integer fitnessFunction(final Genotype<IntegerGene> gt) {  final int[] chordProg = GeneticAlgorithm.genotypeToIntArray(gt); int score = 0;  for (int count = 0; count < chordProg.length - 1; count++) { if (DegreeWeights.getCommon(chordProg[count] - 1, count + 1) - 1 == 1) score++; }  return score; } 	1	0	0	1	1	0
private void addRoomsInfoToConfirmPage(){ SearchRoomSO defaultRoomData = new SearchRoomSO(); defaultRoomData.setFirstName(etWizardFirstName.getText().toString()); defaultRoomData.setLastName(etWizardLastName.getText().toString()); defaultRoomData.setBedType(availableRooms.getRoomSO().get(0).getBeds().get(0).getBedDescript()); defaultRoomData.setBedTypeId(availableRooms.getRoomSO().get(0).getBeds().get(0).getId());  ConfirmRoomsInfoAdapter confirmRoomsInfoAdapter = new ConfirmRoomsInfoAdapter(getActivity(), rooms, defaultRoomData); confirmRoomInfoList.setAdapter(confirmRoomsInfoAdapter); setListViewHeightBasedOnChildren(wizardRoomsList); } 	1	1	0	1	1	0
public static Tristate getClaimFlagPermission(GPClaim claim, String permission, String targetModPermission, Set<Context> contexts) { if (contexts == null) { contexts = new HashSet<>(GriefPreventionPlugin.GLOBAL_SUBJECT.getActiveContexts()); if (claim.parent != null && claim.getData().doesInheritParent()) { // check subdivision's parent contexts.add(claim.parent.getContext()); } else { contexts.add(claim.getContext()); } }  Tristate value = GriefPreventionPlugin.GLOBAL_SUBJECT.getPermissionValue(contexts, permission); if (value != Tristate.UNDEFINED) { return value; } if (targetModPermission != null) { value = GriefPreventionPlugin.GLOBAL_SUBJECT.getPermissionValue(contexts, targetModPermission); if (value != Tristate.UNDEFINED) { return value; } }  return getFlagDefaultPermission(claim, permission); } 	1	1	0	0	1	0
@Override public Collection<SerialMessage> getDynamicValues(boolean refresh) { ArrayList<SerialMessage> result = new ArrayList<SerialMessage>();  for (Map.Entry<AlarmType, Alarm> entry : alarms.entrySet()) { if (refresh == true || entry.getValue().getInitialised() == false) { result.add(getMessage(entry.getValue().getAlarmType())); } }  return result; } 	1	0	0	1	1	0
public boolean matchId() { return  tok.ttype==StreamTokenizer.TT_WORD && !keywords.contains(tok.sval()); } 	1	0	0	1	1	0
"@Test public void testAllDocumentsWithRest() throws Exception { String url = getUrl(""documents""); Path from = Paths.get(url); Files.walk(from) .filter(path -> Files.isRegularFile(path)) .forEach(path -> { UploadResponse response = uploadFile(path); assertThat(response.getFilename(), is(path.getFileName().toString())); });  // We wait until we have all docs countTestHelper(new SearchRequest(getCrawlerName()), Files.list(from).count(), null, TimeValue.timeValueMinutes(1)); } "	1	0	0	1	1	0
"@Override public void onReceive(Context context, Intent intent) {  // First, check that this permission response is actually for us. String action = intent.getAction(); if (ACTION_USB_PERMISSION.equals(action)) { synchronized (this) { // Get the accessory to which we are responding. UsbAccessory accessory = intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY);  // Permission was granted, if the device exists: open it. if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) { if (accessory != null) { Controller.getInstance().setConnection(context, accessory); Log.d(TAG, ""Set new accessory to: "" + accessory.getDescription()); } else { // This is weird, we got permission, but to which device? Log.w(TAG, ""No device returned.""); } } // Permission was not granted, don't open anything. else { Log.d(TAG, ""Accessory permission denied.""); }  // End this activity. finish(); } } } "	1	1	0	0	1	0
"private void handleUpload(HttpServletRequest req, HttpServletResponse resp, Map<String, Object> multipart, Session session) throws ServletException, IOException { HashMap<String, String> ret = new HashMap<String, String>(); String projectName = (String) multipart.get(""project""); ajaxHandleUpload(req, ret, multipart, session);  if (ret.containsKey(""error"")) { setErrorMessageInCookie(resp, ret.get(""error"")); }  if (ret.containsKey(""warn"")) { setWarnMessageInCookie(resp, ret.get(""warn"")); }  resp.sendRedirect(req.getRequestURI() + ""?project="" + projectName); } "	1	1	0	0	1	0
public Long findOrderIndexByKuntaApiIdentifier(String kuntaApiIdentifier) { EntityManager entityManager = getEntityManager();  CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder(); CriteriaQuery<Long> criteria = criteriaBuilder.createQuery(Long.class); Root<Identifier> root = criteria.from(Identifier.class); criteria.select(root.get(Identifier_.orderIndex)); criteria.where( criteriaBuilder.equal(root.get(Identifier_.kuntaApiId), kuntaApiIdentifier) );  return entityManager.createQuery(criteria).getSingleResult(); } 	1	0	0	1	1	0
"@Test public void recordExperimentsEvents() throws Exception { Map<Experiment.Label, Map<User.ID, List<Event>>> eventList = new HashMap<>();  thrown.expect(UnsupportedOperationException.class); thrown.expectMessage(""Not implemented""); resource.recordExperimentsEvents(applicationName, userID, eventList); } "	1	1	0	1	1	0
"private void drawPoints(Canvas canvas, Line line, int lineIndex, int mode) {   //TODO: khurrum if the point is for today set current color pointPaint.setColor(line.getPointColor()); int valueIndex = 0;   currentDaypointPaint.setColor(Color.argb(255,37,107,167)); for(int localIndex=0; localIndex<line.getValues().size();localIndex++){ PointValue pointValue = line.getValues().get(localIndex);  int pointRadius = ChartUtils.dp2px(density, line.getPointRadius()); final float rawX = computator.computeRawX(pointValue.getX()); final float rawY = computator.computeRawY(pointValue.getY());   //todo: khurrum min max to draw only for min and max if (computator.isWithinContentRect(rawX, rawY, checkPrecision)) { // Draw points only if they are within contentRectMinusAllMargins, using contentRectMinusAllMargins // instead of viewport to avoid some // float rounding problems. if (MODE_DRAW == mode) { if (localIndex==currentDayIdex) { drawPoint(canvas, line, pointValue, rawX, rawY, pointRadius + 8, pointPaint); drawPoint(canvas, line, pointValue, rawX, rawY, pointRadius, currentDaypointPaint); }else drawPoint(canvas, line, pointValue, rawX, rawY, pointRadius + 8,pointPaint); if (line.hasLabels() && checkMinMax(line, lineIndex)) { drawLabel(canvas, line, pointValue, rawX, rawY, pointRadius + labelOffset); } } else if (MODE_HIGHLIGHT == mode) { highlightPoint(canvas, line, pointValue, rawX, rawY, lineIndex, valueIndex); } else { throw new IllegalStateException(""Cannot process points in mode: "" + mode); } }  ++valueIndex; } } "	1	1	0	0	1	0
@Before public void setUp() { StatusBarFooter statusBarFooter = new StatusBarFooter(STUB_SAVE_LOCATION); uiPartRule.setUiPart(statusBarFooter);  statusBarFooterHandle = new StatusBarFooterHandle(statusBarFooter.getRoot()); } 	1	0	0	1	1	0
private static ImmutableMap<String, Component.Role> computeRoleCache(ImmutableMap<String, Component> delegate) { return ImmutableMap.copyOf(Maps.transformValues(delegate, Component::getRole)); } 	1	0	0	1	1	0
@Override public TextureAtlasSprite getParticleTexture() { return base.getParticleTexture(); } 	1	0	0	1	1	0
public float base_score(int player, GameState gs) { PhysicalGameState pgs = gs.getPhysicalGameState(); float score = gs.getPlayer(player).getResources()*RESOURCE; boolean anyunit = false; for(Unit u:pgs.getUnits()) { if (u.getPlayer()==player) { anyunit = true; score += u.getResources() * RESOURCE_IN_WORKER; score += UNIT_BONUS_MULTIPLIER * (u.getCost()*Math.sqrt(u.getHitPoints()))/(float)u.getMaxHitPoints(); } } if (!anyunit) return 0; return score; } 	1	1	0	1	1	0
public float base_score(int player, GameState gs) { PhysicalGameState pgs = gs.getPhysicalGameState(); float score = gs.getPlayer(player).getResources()*RESOURCE; boolean anyunit = false; for(Unit u:pgs.getUnits()) { if (u.getPlayer()==player) { anyunit = true; score += u.getResources() * RESOURCE_IN_WORKER; score += UNIT_BONUS_MULTIPLIER * (u.getCost()*Math.sqrt(u.getHitPoints()))/(float)u.getMaxHitPoints(); } } if (!anyunit) return 0; return score; } 	1	1	0	1	1	0
public static void objectToJsonFile(String outputFilepath, Object obj) throws IOException { //creates folder structure (if required) File reportFile = new File(outputFilepath); if(!reportFile.getParentFile().exists()) { reportFile.getParentFile().mkdirs(); } OM.writeValue(reportFile, obj); } 	1	1	0	0	1	0
"public MatchResult generate(Club home, Club away) { float result = random.nextFloat(); MatchResult.Builder matchResult = MatchResult.builder(); Club winner; List<Goal> winnerGoals; List<Goal> loserGoals; Log.d(TAG, ""winner result was "" + result);  if (result <= MatchResult.HOME_WIN_PROBABILITY) { winner = home; } else if (result <= MatchResult.DRAW_PROBABILITY) { winner = null; } else { winner = away; } boolean isHomeWin = home.equals(winner); Club loser = isHomeWin ? away : home; int totalGoals = Math.max((int) Math.floor(goalsDistribution.sample()), 0);  if (winner != null) { if (totalGoals <= 2) { // 1x0 or 2x0 winnerGoals = Goals.create(random, Math.max(totalGoals, 1), winner); loserGoals = Collections.emptyList(); } else { // 3+ goals (eg.: 3x1, 3x0, 4x0, etc) loserGoals = Goals.create(random, random.nextInt(Math.max(1, (totalGoals / 2) - 1)), loser); winnerGoals = Goals.create(random, totalGoals - loserGoals.size(), winner); } } else { // draw (0x0, 1x1, 2x2, etc) int evenGoals = (totalGoals % 2 == 0) ? totalGoals : totalGoals + 1; winnerGoals = Goals.create(random, evenGoals / 2, home); loserGoals = Goals.create(random, evenGoals / 2, away); }  List<Goal> homeGoals = isHomeWin ? winnerGoals : loserGoals; List<Goal> awayGoals = isHomeWin ? loserGoals : winnerGoals;  return matchResult .homeGoals(homeGoals) .awayGoals(awayGoals) .build(home, away); } "	1	0	0	1	1	0
"public String getTagsString() { StringBuilder tagString = new StringBuilder(); Boolean morethanone = false; for (String tag : getTagsList()) { if (tag.trim() != """") { if (morethanone) { tagString.append("",""); } tagString.append(tag.trim()); morethanone = true; } } return tagString.toString(); } "	1	0	0	1	1	0
final static ValueConverter newConverter(String fieldName, final FieldDefinition fieldDef, final IndexReader reader) throws IOException { if (fieldDef == null) return null; DocValuesType type = fieldDef.docvalues_type; if (type != null && type != DocValuesType.NONE) return newDocValueConverter(reader, fieldName, fieldDef, type); return null; } 	1	1	0	0	1	0
"public void execute() throws MojoExecutionException, MojoFailureException {  if (keyStore.exists()) { if (overwriteKeyStore) { if (!keyStore.delete()) { throw new MojoFailureException(""Unable to delete existing keystore at: "" + keyStore); } } else { throw new MojoExecutionException(""Keystore already exists (set 'overwriteKeyStore' to force) at: "" + keyStore); } }  if (StringUtils.isEmpty(keyStoreAlias)) { throw new MojoExecutionException(""A 'keyStoreAlias' is required to generate a new KeyStore""); }  if (StringUtils.isEmpty(keyStorePassword)) { throw new MojoExecutionException(""A 'keyStorePassword' is required to generate a new KeyStore""); }  if (keyPassword == null) { keyPassword = keyStorePassword; }  StringBuilder domainName = new StringBuilder();  if (certDomain != null) { domainName.append(""cn="").append(certDomain); } else if (project.getOrganization() != null && project.getOrganization().getUrl() != null) { String url = project.getOrganization().getUrl(); if (url.startsWith(""http://"")) { url = url.substring(""http://"".length()); } domainName.append(""cn="").append(url); } else { throw new MojoExecutionException(""A 'certDomain' must be provided to generate a KeyStore""); }  domainName.append(""ou="").append(certOrgUnit != null ? certOrgUnit : ""none"");  if (certOrg != null) { domainName.append(""o="").append(certOrg); } else if (project.getOrganization() != null && project.getOrganization().getName() != null) { domainName.append(""o="").append(project.getOrganization().getName()); } else { throw new MojoExecutionException(""A 'certOrg' must be provided to generate a KeyStore""); }  if (certState != null) { domainName.append(""st="").append(certState); } else { throw new MojoExecutionException(""A 'certState' must be provided to generate a KeyStore""); }  if (certCountry != null) { domainName.append(""c="").append(certState); } else { throw new MojoExecutionException(""A 'certCountry' must be provided to generate a KeyStore""); }  generateKeyStore( keyStore, keyStoreAlias, keyStorePassword, keyPassword, domainName.toString() ); } "	1	1	0	0	1	0
"private JMenu setUpFile() { JMenu fileMenu = new JMenu(""File""); fileMenu.setMnemonic(KeyEvent.VK_F);  JMenuItem openFolder = new JMenuItem(""Open folder""); openFolder.setMnemonic(KeyEvent.VK_O); JMenuItem openNode = new JMenuItem(""Open node and edge file""); openNode.setMnemonic(KeyEvent.VK_N); JMenuItem openNwk = new JMenuItem(""Open .nwk file""); openNwk.setMnemonic(KeyEvent.VK_W); JMenuItem openMeta = new JMenuItem(""Open metadata file""); openNwk.setMnemonic(KeyEvent.VK_M); JMenuItem exit = new JMenuItem(""Exit""); exit.setMnemonic(KeyEvent.VK_X);  fileMenu.add(openFolder); fileMenu.add(openNode); fileMenu.add(openNwk); fileMenu.add(openMeta); fileMenu.addSeparator(); fileMenu.add(exit);  // add action listener for every item for (Component component : fileMenu.getMenuComponents()) { if (component instanceof JMenuItem) { ((JMenuItem) component).addActionListener(menuBarController); } }  return fileMenu; } "	1	1	0	1	1	0
private void deletePiece() { PieceType pieceType = mPieceList.getSelectedValue(); Preconditions.checkState(!PieceTypeManager.INSTANCE.isSystemPiece(pieceType.getInternalId()));  if (FileManager.INSTANCE.deletePiece(pieceType)) { PieceTypeManager.INSTANCE.unregisterPieceType(pieceType); mPieceListModel.removeElement(pieceType); } else { // TODO: notify user of failure } } 	1	1	0	0	1	0
@Override public Object visitDivideCmdStmnt(HypertalkParser.DivideCmdStmntContext ctx) { return new StatDivideCmd((Expression) visit(ctx.factor()), (Destination) visit(ctx.destination())); } 	1	0	0	1	1	0
public static Complex cbrt(Complex out) { return pow(out, new Complex(1/3)); } 	1	0	0	1	1	0
@Override public final void setValue(final String expression) throws DebugException { Value value = this.getDebugTarget().evaluateExpression(expression); this.setValue(new WorthwhileValue(this.getDebugTarget(), value)); } 	1	1	0	1	1	0
public int runApplication() { KExceptionManager kem = this.kem.get(); kem.installForUncaughtExceptions(); try { int retval = frontend.get().main(); return retval; } catch (ProvisionException e) { for (Message m : e.getErrorMessages()) { if (!(m.getCause() instanceof KEMException)) { throw e; } else { KEMException ex = (KEMException) m.getCause(); ex.register(kem); } } kem.print(); return 1; } } 	1	0	0	1	1	0
"public void disconnect(boolean clientRequested) { if(!clientRequested) gateway.write(""8:""); gateway.close(); inetAddressAllocator.freeAddress(this); ServiceLocator.instance().getPlayers().removePlayer(this); } "	1	1	0	0	1	0
@Override public boolean onUserEventsSelected() { String user = new StoreCredentials(this).getUserName(); if (user != null) { setFragment(EventsListFragment.newInstance(user)); } return true; } 	1	1	0	0	1	0
public void forwardRollers() { feedRoller.set(forwardSpeedFeed); centerRoller.set(forwardSpeedCenter); } 	1	1	0	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); getCategories(); setContentView(R.layout.activity_selection); sInstance = this; categories = new ArrayList<>(); wholeData = new ArrayList<>(); sPositionIndex = new HashMap<>(); mToolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(mToolbar); getSupportActionBar().setDisplayShowHomeEnabled(true); tabLayout = (TabLayout) findViewById(R.id.tabs); mViewPager = (ViewPager) findViewById(R.id.container); tabLayout.setupWithViewPager(mViewPager); } 	1	1	0	0	1	0
public boolean isAdherenceCapturedForAnyWeek(String patientDocId, String treatmentAdviceId, LocalDate weekStartDate) { return 1 == allWeeklyAdherenceLogs.findLogsByWeekStartDate(patientDocId, treatmentAdviceId, weekStartDate).size(); } 	1	0	0	1	1	0
private void init() { personPoint = BitmapFactory.decodeResource(getResources(), R.drawable.ic_room_white_36dp); canDraw = false; thread = null; surface = getHolder(); textPaint = new Paint(Paint.ANTI_ALIAS_FLAG); textPaint.setColor(Color.GREEN); if (textHeight == 0) { textHeight = textPaint.getTextSize(); } else { textPaint.setTextSize(textHeight); }  roomPaint = new Paint(Paint.ANTI_ALIAS_FLAG); roomPaint.setStyle(Paint.Style.FILL); roomPaint.setColor(Color.BLACK); } 	1	1	0	1	1	0
"private List<String> tasksFromCache() { CopyOnWriteArrayList <String> result = new CopyOnWriteArrayList(); String contents = loadContentsFromCache(); for (String line : contents.split(""(\r\n|\r|\n)"")) { result.add(line); } return result; } "	1	0	0	1	1	0
"private static File getCacheDirectory(File storageDir) { final File cacheDirectory = new File(storageDir, ""cache"");  if (!cacheDirectory.exists() && !cacheDirectory.mkdirs()) { throw new RuntimeException(""Could not create cache directory '"" + cacheDirectory.getAbsolutePath() + ""'.""); }  return cacheDirectory; } "	1	0	0	1	1	0
private boolean allParentsHaveOrDontHaveParents(final List<T> parents) { assert(parents != null); assert(parents.size() > 0); final boolean hasParents = parents.get(0).hasParents(); for (int i = 1; i < parents.size(); i++) if (!parents.get(i).hasParents()) return false; return true; } 	1	1	0	1	1	0
protected void addCursorRow(MatrixCursor cursor, IMasterRecord changes, int id, int title_id) { if(changes == null) return; cursor.addRow(new Object[] {id, title_id, null, changes.getName()}); } 	1	1	0	0	1	0
"@Override protected void actionPerformed(GuiButton button) { if(button == this.modusButton && container.inventory.getStackInSlot(0) != null) { ItemStack stack = container.inventory.getStackInSlot(0); if(stack.getItem() instanceof ItemModus) { Modus newModus = CaptchaDeckHandler.ModusType.values()[stack.getItemDamage()].createInstance(); if(!newModus.canSwitchFrom(CaptchaDeckHandler.ModusType.getType(CaptchaDeckHandler.clientSideModus))) { mc.currentScreen = new GuiYesNo(this, StatCollector.translateToLocal(""gui.emptySylladex1""), StatCollector.translateToLocal(""gui.emptySylladex2""), 0) { @Override public void onGuiClosed() { mc.currentScreen = (GuiScreen) parentScreen; mc.thePlayer.closeScreen(); } }; mc.currentScreen.setWorldAndResolution(mc, width, height); return; } } MinestuckChannelHandler.sendToServer(MinestuckPacket.makePacket(Type.CAPTCHA, CaptchaDeckPacket.MODUS)); } else if(button == this.sylladexMap && CaptchaDeckHandler.clientSideModus != null) { mc.thePlayer.sendQueue.addToSendQueue(new C0DPacketCloseWindow(mc.thePlayer.openContainer.windowId)); mc.thePlayer.inventory.setItemStack((ItemStack)null); mc.displayGuiScreen(CaptchaDeckHandler.clientSideModus.getGuiHandler()); } } "	1	1	0	0	1	0
"public boolean enforceAccess(Player player, Protection protection, Block block) { boolean hasAccess = canAccessProtection(player, protection); // boolean canAdmin = canAdminProtection(player, protection);  if (block == null || protection == null) { return true; }  // support for old protection dbs that do not contain the block id if (block != null && (protection.getBlockId() == 0 || block.getTypeId() != protection.getBlockId())) { protection.setBlockId(block.getTypeId()); protection.save(); }  // multi-world, update old protections if (block != null && (protection.getWorld() == null || !block.getWorld().getName().equals(protection.getWorld()))) { protection.setWorld(block.getWorld().getName()); protection.save(); }  // update timestamp if (hasAccess) { long timestamp = System.currentTimeMillis() / 1000L;  protection.setLastAccessed(timestamp); protection.save(); }  if (configuration.getBoolean(""core.showNotices"", true)) { boolean isOwner = protection.isOwner(player); boolean showMyNotices = configuration.getBoolean(""core.showMyNotices"", true);  if (isAdmin(player) || isMod(player) || (isOwner && showMyNotices)) { String owner = protection.getOwner();  // replace your username with ""you"" if you own the protection if (owner.equals(player.getName())) { owner = getLocale(""you""); }  String blockName = materialToString(block);  if (!getLocale(""protection."" + blockName.toLowerCase() + "".notice.protected"").startsWith(""UNKNOWN_LOCALE"")) { sendLocale(player, ""protection."" + blockName.toLowerCase() + "".notice.protected"", ""type"", getLocale(protection.typeToString().toLowerCase()), ""block"", blockName, ""owner"", owner); } else { sendLocale(player, ""protection.general.notice.protected"", ""type"", getLocale(protection.typeToString().toLowerCase()), ""block"", blockName, ""owner"", owner); } } }  switch (protection.getType()) { case PASSWORD: if (!hasAccess) { sendLocale(player, ""protection.general.locked.password"", ""block"", materialToString(block)); }  break;  case PRIVATE: case DONATION: if (!hasAccess) { sendLocale(player, ""protection.general.locked.private"", ""block"", materialToString(block)); }  break;  case TRAP_KICK: if (!hasAccess) { player.kickPlayer(protection.getPassword()); log(player.getName() + "" triggered the kick trap: "" + protection.toString()); } break;  case TRAP_BAN: if (!hasAccess) { Plugin mcbansPlugin;  // See if we have mcbans if ((mcbansPlugin = plugin.getServer().getPluginManager().getPlugin(""MCBans"")) != null) { mcbans mcbans = (mcbans) mcbansPlugin;  // ban then locally mcbans.mcb_handler.ban(player.getName(), ""LWC"", protection.getPassword(), """"); }  log(player.getName() + "" triggered the ban trap: "" + protection.toString()); } break; }  return hasAccess; } "	1	0	0	1	1	0
"protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { long id = Long.parseLong(request.getParameter(""user_id"")); String username = request.getParameter(""username""); String email = request.getParameter(""email""); String phone = request.getParameter(""phone""); String password = request.getParameter(""password""); String url = request.getParameter(""url""); String passwordConfirmation = request.getParameter(""confirm_password"");  User user = DaoFactory.getUsersDao().findById(id);  // validate input boolean passwordMatch = password.equals(passwordConfirmation); boolean inputIsEmpty = username.isEmpty() || email.isEmpty() || password.isEmpty(); boolean inputHasErrors = inputIsEmpty || !passwordMatch;   if (inputHasErrors) { User invalidUser = new User(username, email, password, phone, url); request.getSession().setAttribute(""user"", invalidUser); request.getSession().setAttribute(""inputIsEmpty"", inputIsEmpty); request.getSession().setAttribute(""passwordMatch"", passwordMatch); response.sendRedirect(""/profile/update""); return; }  // create and save a new user password = Password.hash(password); user = new User(username, email, password, phone, url); DaoFactory.getUsersDao().update(user); request.getSession().setAttribute(""user"", user); response.sendRedirect(""/profile""); } "	1	1	0	1	1	0
"protected static boolean isOperand(String expressionStringFragment) { return expressionStringFragment.matches(""[0-9]*[.]*""); } "	1	0	0	1	1	0
"private void addCounterBatten(Document document, Project project) throws DocumentException { Paragraph paragraph = new Paragraph(); addEmptyLine(paragraph, 1);  ComponentController componentJpaController = new ComponentController(); CategoryController categoryJpaController = new CategoryController(); Category category = categoryJpaController.findCategoryByShortTerm(""KL""); Component component = componentJpaController.findComponentByProjectIdAndComponentTypeAndCategoryId(project.getId(), ""Produkt"", category.getId());  if (component != null && !component.getFullNameProduct().isEmpty()) { paragraph.add(new Paragraph(component.getFullNameProduct(), SUBFONT)); } else { paragraph.add(new Paragraph(""Konterlattung"", SUBFONT)); } addEmptyLine(paragraph, -1); PdfPTable table = new PdfPTable(new float[]{6f, 3.5f}); table.setWidthPercentage(100f);  if (componentJpaController.findAll().size() > 0) {  table.addCell(new Phrase(""Name"", TABLE_HEADER_FONT)); table.addCell(new Phrase(""Länge der Dachsparren"", TABLE_HEADER_FONT));  componentJpaController.findAll().stream().filter(comp -> comp.getCategory().getShortTerm().equals(""KD"")).forEach(comp -> { table.addCell(new Phrase(comp.getFullNameProduct(), TABLE_NORMAL_FONT)); table.addCell(new Phrase(UtilityFormat.getStringForTextField(comp.getLengthComponent() * comp.getNumberOfProducts()) + "" m"", TABLE_NORMAL_FONT)); }); } paragraph.add(table);  WorthController worthJpaController = new WorthController(); Worth total = worthJpaController.findWorthByShortTermAndProjectId(""LD"", project.getId());  if (total != null) { paragraph.add(new Paragraph(""Summe: "" + UtilityFormat.getStringForLabel(total), NORMALFONT)); }  if (component != null && component.getPriceComponent() != null) { paragraph.add(new Paragraph(""Preis: "" + UtilityFormat.formatValueWithShortTerm(component.getPriceComponent(), ""€/Lfm"") + "" €/Lfm"", NORMALFONT)); }  Worth abatementPercent = worthJpaController.findWorthByShortTermAndProjectId(""VKLP"", project.getId());  if (abatementPercent != null) { paragraph.add(new Paragraph(""Eingegebener Verschnitt: "" + UtilityFormat.getStringForLabel(abatementPercent), NORMALFONT)); }  Worth abatementCounterBatten = worthJpaController.findWorthByShortTermAndProjectId(""VKL"", project.getId()); if (abatementCounterBatten != null) { paragraph.add(new Paragraph(""Verschnitt: "" + UtilityFormat.getStringForLabel(abatementCounterBatten), NORMALFONT)); }  Worth counterBatten = worthJpaController.findWorthByShortTermAndProjectId(""KL"", project.getId()); if (counterBatten != null) { paragraph.add(new Paragraph(""Konterlattung: "" + UtilityFormat.getStringForLabel(counterBatten), NORMALFONT)); }  Worth worthCosts = worthJpaController.findWorthByShortTermAndProjectId(""KPKL"", project.getId()); if (worthCosts != null) { paragraph.add(new Paragraph(""Kosten Montage pro Stunde: "" + UtilityFormat.getStringForLabel(worthCosts), NORMALFONT)); }  Worth worthTime = worthJpaController.findWorthByShortTermAndProjectId(""ZPKL"", project.getId()); if (worthTime != null) { paragraph.add(new Paragraph(""Zeit für Montage: "" + UtilityFormat.getStringForLabel(worthTime), NORMALFONT)); }  Worth worthProductCosts = worthJpaController.findWorthByShortTermAndProjectId(""KProKL"", project.getId()); if (worthProductCosts != null) { paragraph.add(new Paragraph(""Produkt Kosten: "" + UtilityFormat.getStringForLabel(worthProductCosts), NORMALFONT)); }  Worth worthMontage = worthJpaController.findWorthByShortTermAndProjectId(""KMonKL"", project.getId()); if (worthMontage != null) { paragraph.add(new Paragraph(""Montage Kosten: "" + UtilityFormat.getStringForLabel(worthMontage), NORMALFONT)); }  Worth worthTotal = worthJpaController.findWorthByShortTermAndProjectId(""GKKL"", project.getId()); if (worthTotal != null) { paragraph.add(new Paragraph(""Gesamtkosten Konterlattung: "" + UtilityFormat.getStringForLabel(worthTotal), NORMALFONT)); }  document.add(paragraph); } "	1	0	0	1	1	0
default Varargs invokeSelf(String funcName, LuaValue... args) { return this.invoke(funcName, LuaValue.varargsOf(args)); } 	1	0	0	1	1	0
private int parsePcapFilesAndPutItToTable() throws IOException { Packet packet = decoder.packet(); int networkType = decoder.getNetwork(); while (offset < validBytes) {  if (validBytes - offset < 9000) { System.arraycopy(buffer, 0, buffer, offset, validBytes - offset); validBytes = validBytes - offset; offset = 0;  int n = in.read(buffer, validBytes, buffer.length - validBytes); if (n > 0) { validBytes += n; } }  offset = decoder.decodePacket(buffer, offset, packet);  if (addDataToTable(packet, networkType)) { return 1; } } return 0; } 	1	1	0	1	1	0
"@Override public RayoNode registerRayoNode(RayoNode rayoNode) throws GatewayException {  RayoNode node = store.getNode(rayoNode.getHostname()); if (node != null) { if (node.toString().equals(rayoNode.toString())) { log.debug(""Rayo Node [%s] already exists. Ignoring status update."", rayoNode); return node; } else { log.debug(""Rayo Node [%s] has been updated. Updating storage service."", rayoNode); store.updateNode(node); } }  try { if (rayoNode.getIpAddress() == null) { rayoNode.setIpAddress(InetAddress.getByName(rayoNode.getHostname()).getHostAddress()); } return store.storeNode(rayoNode); } catch (UnknownHostException uhe) { throw new GatewayException(""Unknown host"", uhe); } } "	1	1	0	0	1	0
private static Function<String, Void> createErrorHandler(final Logger log) { return new Function<String, Void>() { @Override public Void apply(String outputLine) { log.error(outputLine); return null; } }; } 	1	0	0	1	1	0
public void decrementPoints(){ for(int i = 0; i < curvePoints.length; i++){ Vector3f vec = curvePoints[i]; curvePoints[i] = vec.setY(curvePoints[i].getY() - 1f); } } 	1	1	0	1	1	0
public void rotateImage() { degree = (degree + 90) % 360;  rotateImage(BitmapFactory.decodeFile(imagefilepath), degree); } 	1	0	0	1	1	0
public byte[] toBytes() { byte[] answer = new byte[noBytes]; System.arraycopy(data, noBytes, answer, 0, noBytes); return answer; } 	1	1	0	1	1	0
public Query<RowType, RunReturn> where(@NonNull String selection, @Nullable Object... selectionArgs) { mSelection = selection; if (selectionArgs != null) { mSelectionArgs = new String[selectionArgs.length]; for (int i = 0; i < selectionArgs.length; i++) mSelectionArgs[i] = (String) selectionArgs[i]; } else { mSelectionArgs = null; } return this; } 	1	1	0	0	1	0
public static ItemStack getStackFromName(String name, int stackSize) { ItemStack stack = OreDictionary.getOres(name).get(0).copy(); stack.stackSize = 1; return stack; } 	1	1	0	1	1	0
@NonNull public static TraversalAnimation newInstance(@NonNull Animator animator, @AnimateInDrawOrder int drawOrder) { return new AutoValue_TraversalAnimation(animator, drawOrder); } 	1	0	0	1	1	0
private static double generateRandomVoltageValue(final double baseValue) { final double minValue = 0.9f * baseValue; final double maxValue = 1.1f * baseValue; final Random rand = new Random(); return (rand.nextDouble() * (maxValue - minValue) + minValue); } 	1	1	0	1	1	0
"@Override public String toString() { final StringBuilder sb = new StringBuilder(64); sb.append(super.toString()); sb.append(""\n\tRecords lost: ""); sb.append(this.missedRecords.intValue()); sb.append(""\n\tWriter Threads (""); sb.append(this.workers.size()); sb.append(""): ""); for (final AbstractAsyncThread worker : this.workers) { sb.append(""\n\t\t""); sb.append(worker.toString()); } return sb.toString(); } "	1	1	0	1	1	0
"private <L extends ListWrapper<T>, T extends BullhornEntity> L handleGetMultipleEntities(Class<T> type, List<Integer> idList, Set<String> fieldSet, EntityParams params) { String ids = idList.stream().distinct().map(id -> String.valueOf(id)).collect(Collectors.joining("","")); Map<String, String> uriVariables = restUriVariablesFactory.getUriVariablesForGetMultiple(BullhornEntityInfo.getTypesRestEntityName(type), ids, fieldSet, params); String url = restUrlFactory.assembleEntityUrl(params);  return (L) this.performGetRequest(url, BullhornEntityInfo.getTypesListWrapperType(type), uriVariables); } "	1	0	0	1	1	0
"@Override public void observePlayerTeleport(PlayerTeleportEvent event) { log.debug(""ENTER observePlayerTeleport(): player={}, to={}, from={}"", event.getPlayer(), event.getTo(), event.getFrom());  // cross-world teleport event? if (config.isRecordLastLocation() && !event.getTo().getWorld().equals(event.getFrom().getWorld())) { PlayerLastLocationDAO dao = storage.getPlayerLastLocationDAO(); PlayerLastLocation playerLastLocation = dao.findByWorldAndPlayerName(event.getPlayer().getWorld().getName(), event.getPlayer().getName()); if (playerLastLocation == null) { playerLastLocation = new PlayerLastLocation(); playerLastLocation.setPlayerName(event.getPlayer().getName()); } playerLastLocation.setLocation(event.getFrom());  try { dao.save(playerLastLocation); } catch (StorageException e) { log.warn(""Error writing to database"", e); } log.debug(""Saved player {} location as {}"", event.getPlayer(), playerLastLocation); }  // we fire an ""onTeleportObserve"" event but we ignore the result, // because this event is not to change locations. However, this event // could be used with modeEffect to create teleport effects. final StrategyContext context = factory.newStrategyContext(); context.setEventType(EventType.TELEPORT_OBSERVE.toString()); context.setPlayer(event.getPlayer()); context.setLocation(event.getTo()); // location involved is the target location engine.getStrategyResult(context);  // fire any teleport effects. Since this is a MONITOR priority, we // count on the fact that we know the event won't be canceled and so // we can properly do any effects at this point. effectsManager.doTeleportEffects(event.getPlayer()); } "	1	1	0	0	1	0
"public void updateKillSourceTimedConditionEditorPane(JPanel pane, Item.TimedConditionEffect condition, final FieldUpdateListener listener) { pane.removeAll(); if (killSourceConditionBox != null) { removeElementListener(killSourceConditionBox); } if (condition == null) { pane.revalidate(); pane.repaint(); return; }  boolean writable = ((Item)target).writable; Project proj = ((Item)target).getProject();  killSourceConditionBox = addActorConditionBox(pane, proj, ""Actor Condition: "", condition.condition, writable, listener); killSourceConditionChance = addDoubleField(pane, ""Chance: "", condition.chance, writable, listener);  killSourceConditionClear = new JRadioButton(""Clear active condition""); pane.add(killSourceConditionClear, JideBoxLayout.FIX); killSourceConditionApply = new JRadioButton(""Apply condition with magnitude""); pane.add(killSourceConditionApply, JideBoxLayout.FIX); killSourceConditionMagnitude = addIntegerField(pane, ""Magnitude: "", condition.magnitude == null ? null : condition.magnitude >= 0 ? condition.magnitude : 0, 1, false, writable, listener); killSourceConditionImmunity = new JRadioButton(""Give immunity to condition""); pane.add(killSourceConditionImmunity, JideBoxLayout.FIX);  ButtonGroup radioEffectGroup = new ButtonGroup(); radioEffectGroup.add(killSourceConditionApply); radioEffectGroup.add(killSourceConditionClear); radioEffectGroup.add(killSourceConditionImmunity);  killSourceConditionTimed = new JRadioButton(""For a number of rounds""); pane.add(killSourceConditionTimed, JideBoxLayout.FIX); killSourceConditionDuration = addIntegerField(pane, ""Duration: "", condition.duration, false, writable, listener); killSourceConditionForever = new JRadioButton(""Forever""); pane.add(killSourceConditionForever, JideBoxLayout.FIX);  ButtonGroup radioDurationGroup = new ButtonGroup(); radioDurationGroup.add(killSourceConditionTimed); radioDurationGroup.add(killSourceConditionForever);  updateKillSourceTimedConditionWidgets(condition);  killSourceConditionClear.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(killSourceConditionClear, new Boolean(killSourceConditionClear.isSelected())); } }); killSourceConditionApply.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(killSourceConditionApply, new Boolean(killSourceConditionApply.isSelected())); } }); killSourceConditionImmunity.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(killSourceConditionImmunity, new Boolean(killSourceConditionImmunity.isSelected())); } });  killSourceConditionTimed.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(killSourceConditionTimed, new Boolean(killSourceConditionTimed.isSelected())); } }); killSourceConditionForever.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(killSourceConditionForever, new Boolean(killSourceConditionForever.isSelected())); } });  pane.revalidate(); pane.repaint(); } "	1	1	0	1	1	0
public void draw(Graphics g, int width, int height) { checkNextPlayer(); camera.getPanelCenterer().recenter(width, height); if (game.getSelectedX() != -1 && game.getSelectedY() != -1) { camera.getPanelCenterer().centerOnTile(game.getSelectedX(), game.getSelectedY()); } g2d = (Graphics2D)g; tileDrawer.drawTiles(); tileDrawer.drawMovingTiles(); structureDrawer.drawBases(); armyDrawer.drawArmies(); unitDrawer.drawUnits(); selectedDrawer.drawSelectedItemOutline(); } 	1	1	0	1	1	0
private void setTile(Coord coord, byte player) { writePlayer(TILE_START + 9 * coord.om() + coord.os(), player); } 	1	0	0	1	1	0
private boolean check(int x, int y, int dataOffset, byte player) { return readPlayer(dataOffset + (x + 3 * y)) == player; } 	1	0	0	1	1	0
public static void go(EntityPlayer player) { ItemStack stack = player.getHeldItemMainhand(); ItemStack newStack = stack.copy(); int count  = stack.getCount(); HandlerHarshenInventory inv = HandlerHarshenInventory.instance; if(stack.getItem() == Item.getItemFromBlock(Blocks.AIR)) { ItemStack item = inv.getItem(); inv.delItem(); player.setHeldItem(EnumHand.MAIN_HAND, item); return; } if(inv.hasItem()) { if(stack.getItem() == inv.getItem().getItem() || stack.getCount() <= 64) return; count += 2; inv.delItem(); } else { inv.setItem(player, stack); if(newStack.getCount() == 1) player.playSound(SoundEvents.ITEM_ARMOR_EQUIP_GENERIC, 1f, 1f); } newStack.setCount(count - 1); player.setHeldItem(EnumHand.MAIN_HAND, newStack); } 	1	0	0	1	1	0
"@SuppressWarnings({ ""unchecked"", ""ConstantConditions"" }) private void startActivity() { Intent intent = new Intent(context, SettingsScreen.class); if (Utils.isAboveLollipop()) { View navigationBar = context.findViewById(android.R.id.navigationBarBackground); List<Pair<View, String>> pairs = new ArrayList<>(); Pair<View, String> navBarPair = Pair.create( navigationBar, Window.NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME ); if (pairs != null) pairs.add(navBarPair); ActivityOptionsCompat options = ActivityOptionsCompat.makeSceneTransitionAnimation( context, pairs.toArray(new Pair[pairs.size()]) ); startActivityForResult(intent, REQUEST_LANGUAGE_CHANGE, options.toBundle()); } else { startActivityForResult(intent, REQUEST_LANGUAGE_CHANGE); } } "	1	0	0	1	1	0
"private void checkContactAsUser(CompleteContact completeContact) { ContactDetail contactDetail = completeContact.getContactDetail(); if (contactDetail.getUserId() != null) { // contact de type user Silverpeas try { OrganisationController orga = getOrganisationController(); UserDetail userDetail = orga.getUserDetail(contactDetail.getUserId()); if (userDetail != null) { setContactAttributes(contactDetail, userDetail, orga, false); } else { contactDetail.setUserId(null); updateContact(contactDetail); sendContactToBasket(contactDetail.getPK()); } } catch (Exception e) { SilverTrace.warn(""yellowpages"", ""YellowpagesBmEJB.checkContactAsUser()"", ""yellowpages.EX_GET_USER_DETAIL_FAILED"", ""contactPK = "" + contactDetail.getPK().toString(), e); } } } "	1	1	0	0	1	0
"protected void visitStatementAssignmentExp(Exp exp, String varName, String varType, JavaWriter w) throws IOException { if (exp instanceof ExpP && ((ExpP) exp).pureexp_ instanceof Case) { String caseStm = visitCase((Case) ((ExpP) exp).pureexp_); w.emitStatement(""%s %s = (%s) %s"", varType, varName, varType, caseStm); } else { StringWriter auxsw = new StringWriter(); JavaWriter auxw = new JavaWriter(auxsw); exp.accept(this, auxw); if (varType == null) { w.emitStatement(""%s = %s"", varName, auxsw.toString()); } else { w.emitStatement(""%s %s = %s"", varType, varName, auxsw.toString()); } } } "	1	1	0	1	1	0
"@Test public void equalTransitiveFreeVariables() { Expression expr = getExpression(""x = y && y = z => x = z""); assertEnvIndependentEquals(expr, Validity.VALID); } "	1	0	0	1	1	0
"private void completeAppt(DialogInterface dialog) { pDialog = new ProgressDialog(this); pDialog.setMessage(getString(R.string.loading)); pDialog.setCancelable(false); dialog.dismiss(); showProgressDialog(); AsyncTask<Object, Void, Void> task = new AsyncTask<Object, Void, Void>() { private Exception exception = null;  @Override protected Void doInBackground(Object[] params) { try { DoctorUserEntity doctorUserEntity = (DoctorUserEntity) CurrentUserProfile.getInstance().getEntity(); appointmentEntity.setStatus(AppointmentEntity.COMPLETED_STT); DoctorUserEntity doctor = new DoctorUserEntity(doctorUserEntity.getId(), null, null, null, null, null, null, null, null, null); appointmentEntity.setDoctorUserEntity(doctor); doctorUserEntity.setAppointmentList(AppointmentController.updateAppointment(appointmentEntity, doctorUserEntity)); } catch (Exception e) { exception = e; } return null; }  @Override protected void onPostExecute(Void aVoid) { hideProgressDialog(); if (exception != null) { ErrorController.showDialog(DoctorAppointmentDetailActivity.this, ""Error : "" + exception.getMessage()); } else { EventBroker broker = EventBroker.getInstance(); List<AppointmentEntity> list = ((DoctorUserEntity)CurrentUserProfile.getInstance().getEntity()).getAppointmentList(); broker.pusblish(EventConstant.UPDATE_APPT_DOCTOR_LIST, list.indexOf(appointmentEntity)); broker.pusblish(EventConstant.UPDATE_APPT_NOTI_NUMBER, null); } finish(); } }; task.execute(); } "	1	1	0	0	1	0
"@Override public void onPressedEnter() { if (activeView == View.TEXTUAL && getPanel().editing == activeBuffer) { try { setDele(Float.parseFloat(activeBuffer.toString())); getPanel().editing = null; } catch (NumberFormatException ex) { Logger.warning(""Could not parse number '"" + activeBuffer + ""'.""); } } } "	1	0	0	1	1	0
public Boolean filterOR(Record input) {  Boolean evaluation = false;  for (int i = 0; i < this.size(); i++) { evaluation = (evaluation || this.get(i).evaluateConstraint(input)); }  return evaluation; } 	1	1	0	1	1	0
public Boolean filterAND(Record input) {  Boolean evaluation = true;  for (int i = 0; i < this.size(); i++) { evaluation = (evaluation && this.get(i).evaluateConstraint(input)); } return evaluation; } 	1	1	0	1	1	0
"@Override public Deployment load(String key, @Nullable Object argument) { ModuleResourceCache.CacheId id = ModuleResourceCache.parseCacheKey(key); Module module = id.getModule(); String filename = id.getName(); String processDefinitionKey = filename.substring(0, filename.indexOf(""."")); Path path = WORKFLOW_MODEL_PATH.append(filename); FileResource resource  = (FileResource) module.getModuleResolver().lookup(path); if (resource != null) { try { // find the latest process definition without a container ProcessDefinition processDef = WorkflowManager.get().getProcessDefinition(processDefinitionKey, null); String deploymentId; if (processDef == null) // no such definition, we'll deploy one { deploymentId = WorkflowManager.get().deployWorkflow(resource.getFile(), null); return WorkflowManager.get().getDeployment(deploymentId); } else { deploymentId = processDef.getDeploymentId(); Deployment deployment = WorkflowManager.get().getDeployment(deploymentId); // file is newer than deployment, so we'll deploy a new version if (deployment.getDeploymentTime().before(new Date(resource.getFile().lastModified()))) { deploymentId = WorkflowManager.get().deployWorkflow(resource.getFile(), null); deployment = WorkflowManager.get().getDeployment(deploymentId); } return deployment; } } catch (FileNotFoundException e) { return null; } } else { return null; } } "	1	1	0	1	1	0
"@RequestMapping(value = ""/{id}"", method = RequestMethod.GET) @ResponseBody public RestWrapper get( @PathVariable(""id"") Integer processId, Principal principal ) {  RestWrapper restWrapper = null; try {  Process process = new Process(); process.setProcessId(processId); com.wipro.ats.bdre.md.dao.jpa.Process daoProcess = processDAO.get(processId); if (daoProcess != null) { process.setBusDomainId(daoProcess.getBusDomain().getBusDomainId()); if (daoProcess.getWorkflowType() != null) { process.setWorkflowId(daoProcess.getWorkflowType().getWorkflowId()); } process.setDescription(daoProcess.getDescription()); process.setProcessName(daoProcess.getProcessName()); process.setProcessTypeId(daoProcess.getProcessType().getProcessTypeId()); if (daoProcess.getProcess() != null) { process.setParentProcessId(daoProcess.getProcess().getProcessId()); } process.setCanRecover(daoProcess.getCanRecover()); if (daoProcess.getProcessTemplate() != null) { process.setProcessTemplateId(daoProcess.getProcessTemplate().getProcessTemplateId()); } process.setEnqProcessId(daoProcess.getEnqueuingProcessId()); process.setNextProcessIds(daoProcess.getNextProcessId()); if (daoProcess.getBatchCutPattern() != null) { process.setBatchPattern(daoProcess.getBatchCutPattern()); } process.setTableAddTS(DateConverter.dateToString(daoProcess.getAddTs())); process.setTableEditTS(DateConverter.dateToString(daoProcess.getEditTs())); } restWrapper = new RestWrapper(process, RestWrapper.OK); LOGGER.info(""Record with ID:"" + processId + "" selected from Process by User:"" + principal.getName()); } catch (MetadataException e) { LOGGER.error(e); restWrapper = new RestWrapper(e.getMessage(), RestWrapper.ERROR); }  return restWrapper;  } "	1	1	0	1	1	0
"public String substring(int start) { if (0 <= start && start <= count) { if (start == count) return """";  shared = true; return new String(start, count - start, value); } throw new StringIndexOutOfBoundsException(start); } "	1	1	0	1	1	0
"public String getWarningMsg() { String result = ""Validation of graph "" + this.graph.getName() + "" raised the following warnings:\n""; for (final String msg : this.warningMsgs.keySet()) { result += ""- "" + msg; } return result; } "	1	1	0	1	1	0
"@Override public void handleMessage(Message msg) { if (mDbAdapter == null) { mDbAdapter = makeDbAdapter(mContext); mDbAdapter.cleanupEvents(System.currentTimeMillis() - mConfig.getDataExpiration(), MPDbAdapter.Table.EVENTS); mDbAdapter.cleanupEvents(System.currentTimeMillis() - mConfig.getDataExpiration(), MPDbAdapter.Table.PEOPLE); }  try { int returnCode = MPDbAdapter.DB_UNDEFINED_CODE;  if (msg.what == ENQUEUE_PEOPLE) { final JSONObject message = (JSONObject) msg.obj;  logAboutMessageToMixpanel(""Queuing people record for sending later""); logAboutMessageToMixpanel(""    "" + message.toString());  returnCode = mDbAdapter.addJSON(message, MPDbAdapter.Table.PEOPLE); } else if (msg.what == ENQUEUE_EVENTS) { final EventDescription eventDescription = (EventDescription) msg.obj; try { final JSONObject message = prepareEventObject(eventDescription); logAboutMessageToMixpanel(""Queuing event for sending later""); logAboutMessageToMixpanel(""    "" + message.toString()); returnCode = mDbAdapter.addJSON(message, MPDbAdapter.Table.EVENTS); } catch (final JSONException e) { Log.e(LOGTAG, ""Exception tracking event "" + eventDescription.getEventName(), e); } } else if (msg.what == FLUSH_QUEUE) { // 没有 dimensions 配置，则不发送数据 final String sharedPrefsName = ViewCrawler.SHARED_PREF_EDITS_FILE + SGConfig.getInstance(mContext).getToken(); SharedPreferences preferences = mContext.getSharedPreferences(sharedPrefsName, Context.MODE_PRIVATE); final String storeInfo = preferences.getString(ViewCrawler.SHARED_PREF_DIMENSIONS_KEY, null); if (storeInfo == null || !storeInfo.equals("""") || storeInfo.equals(""[]"")) { logAboutMessageToMixpanel(""empty dimensions, flush stop !!!""); return; } logAboutMessageToMixpanel(""Flushing queue due to scheduled or forced flush""); updateFlushFrequency(); sendAllData(mDbAdapter); if (SystemClock.elapsedRealtime() >= mDecideRetryAfter) { try { mDecideChecker.runDecideChecks(getPoster()); } catch (RemoteService.ServiceUnavailableException e) { mDecideRetryAfter = SystemClock.elapsedRealtime() + e.getRetryAfter() * 1000; } } } else if (msg.what == INSTALL_DECIDE_CHECK) { logAboutMessageToMixpanel(""Installing a check for surveys and in-app notifications""); final DecideMessages check = (DecideMessages) msg.obj; mDecideChecker.addDecideCheck(check); if (SystemClock.elapsedRealtime() >= mDecideRetryAfter) { try { mDecideChecker.runDecideChecks(getPoster()); } catch (RemoteService.ServiceUnavailableException e) { mDecideRetryAfter = SystemClock.elapsedRealtime() + e.getRetryAfter() * 1000; } } } else if (msg.what == KILL_WORKER) { Log.w(LOGTAG, ""Worker received a hard kill. Dumping all events and force-killing. Thread id "" + Thread.currentThread().getId()); synchronized(mHandlerLock) { mDbAdapter.deleteDB(); mHandler = null; Looper.myLooper().quit(); } } else { Log.e(LOGTAG, ""Unexpected message received by Mixpanel worker: "" + msg); }  /////////////////////////// if ((returnCode >= mConfig.getBulkUploadLimit() || returnCode == MPDbAdapter.DB_OUT_OF_MEMORY_ERROR) && mFailedRetries <= 0) { logAboutMessageToMixpanel(""Flushing queue due to bulk upload limit""); updateFlushFrequency(); sendAllData(mDbAdapter); if (SystemClock.elapsedRealtime() >= mDecideRetryAfter) { try { mDecideChecker.runDecideChecks(getPoster()); } catch (RemoteService.ServiceUnavailableException e) { mDecideRetryAfter = SystemClock.elapsedRealtime() + e.getRetryAfter() * 1000; } } } else if (returnCode > 0 && !hasMessages(FLUSH_QUEUE)) { // The !hasMessages(FLUSH_QUEUE) check is a courtesy for the common case // of delayed flushes already enqueued from inside of this thread. // Callers outside of this thread can still send // a flush right here, so we may end up with two flushes // in our queue, but we're OK with that. long interval = mFlushInterval; if(SugoAPI.developmentMode){ interval = 1000; } logAboutMessageToMixpanel(""Queue depth "" + returnCode + "" - Adding flush in "" + interval); if (interval >= 0) { sendEmptyMessageDelayed(FLUSH_QUEUE, interval); } } } catch (final RuntimeException e) { Log.e(LOGTAG, ""Worker threw an unhandled exception"", e); synchronized (mHandlerLock) { mHandler = null; try { Looper.myLooper().quit(); Log.e(LOGTAG, ""Mixpanel will not process any more analytics messages"", e); } catch (final Exception tooLate) { Log.e(LOGTAG, ""Could not halt looper"", tooLate); } } } }// handleMessage "	1	1	0	1	1	0
public boolean doUrlUpdate() { Bundle bundle = JRebelIntegrationUtility.getJRebelBundle(); boolean updated = false; Throwable error = null;  if (bundle != null) { updated = true; try {  Class<?> providerClass = reflectionHandler.getRebelRemotingProvider(bundle);  if (providerClass != null) { updated = doReflectionUpdateUrls(bundle, updated, providerClass); } } catch (SecurityException e) { error = e; } catch (NoSuchMethodException e) { error = e; } catch (IllegalAccessException e) { error = e; } catch (InvocationTargetException e) { error = e; } catch (IllegalArgumentException e) { error = e; }  }  if (error != null) { CFRebelConsoleUtil.printErrorToConsole(module, cloudServer, error.getMessage()); CloudFoundryPlugin.logError(error.getMessage(), error); } return updated; } 	1	1	0	1	1	0
private Flight getFlightFromServer(Flight flight) { Flight result = null; List<Flight> flights = getFlightsDeparting(flight.getDepartureAirport(), flight.getDepartureTime());  for (Flight serverFlight : flights) { if (serverFlight.getFlightNum().equals(serverFlight.getFlightNum())) { result = serverFlight; break; } }  return result; } 	1	1	0	1	1	0
private Ray ConstructRayThroughPixel(Camera camera, int i, int j) { Vector pixel_location = camera.get_center_of_screen();  double pixel_width = camera.screen_width / this.imageWidth; double delta_x = -(this.imageWidth / 2 - i) * pixel_width; double delta_y = (this.imageHeight / 2 - j) * pixel_width;  Vector delta_y_vector = new Vector(camera.up_vector); delta_y_vector.normalize(); delta_y_vector.multiplyByScalar(delta_y); pixel_location.add(delta_y_vector);  Vector delta_x_vector = new Vector(camera.direction); delta_x_vector.cross(camera.up_vector); delta_x_vector.normalize(); delta_x_vector.multiplyByScalar(delta_x); pixel_location.add(delta_x_vector);  Vector pixel_direction = new Vector(pixel_location); pixel_direction.substract(camera.position);  Ray result = new Ray(pixel_location, pixel_direction); return result; } 	1	1	0	1	1	0
"private static long readInteger(long min, long max) throws NumberFormatException { BufferedReader bf = null; int x = Integer.MIN_VALUE; try{ bf = new BufferedReader(new InputStreamReader (System.in)); StringBuffer sb = new StringBuffer(); boolean fin = true; while(fin) { char s = (char)bf.read(); if(s == ' ' || !Character.isDigit(s)) { fin = false; } else{ sb.append(s); } } x = Integer.parseInt(sb.toString()); } catch(IOException e1) {System.err.println(""IOException readInteger() InOut :"" + e1.getMessage());} catch(NumberFormatException e2) {System.err.println(""NumberFormatException readInteger() InOut :"" + e2.getMessage());} catch(Exception e3) {System.err.println(""Exception readInteger() InOut :"" + e3.getMessage());}  if(x > max || x < min) { throw new NumberFormatException(""Nombre trop grand ou trop petit max = ""+ max + ""   min = ""+ min + ""    nombre = "" + x); } return x; } "	1	1	0	1	1	0
@Override protected Rectangle getFrameArea(Rectangle origin) { if (!model.isMinimizedView()) { return new Rectangle(origin.x + GRID_SIZE / 2, origin.y, origin.width - GRID_SIZE, origin.height); } return super.getFrameArea(origin); } 	1	1	0	1	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_BlogPost); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); getSupportActionBar().setDisplayHomeAsUpEnabled(true); } 	1	1	0	1	1	0
"@Test(description = ""Exception when getting API by UUID"", expectedExceptions = APIMgtDAOException.class) public void testSearchAPIByUUIDException() throws APIManagementException { ApiDAO apiDAO = mock(ApiDAO.class); AbstractAPIManager apiStore = new APIStoreImpl(USER_NAME, apiDAO, null, null, null, null, null); when(apiDAO.getAPI(UUID)) .thenThrow(new APIMgtDAOException(""Error occurred while retrieving API with id "" + UUID)); apiStore.getAPIbyUUID(UUID); } "	1	1	0	1	1	0
"@Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) { super.onRequestPermissionsResult(requestCode, permissions, grantResults);  if (requestCode==PERMISSION_REQUEST_CODE) { if (permissions[0].equals(Manifest.permission.WRITE_EXTERNAL_STORAGE)) { if (grantResults[0] == PackageManager.PERMISSION_GRANTED) { Map<String, ?> settings = PrefHelper.getAll(); settings.remove(""token""); String json = new Gson().toJson(settings); String path = Environment.getExternalStorageDirectory() + File.separator  + ""FastHub""; File folder = new File(path); folder.mkdirs(); File backup = new File(folder, ""backup.json"");  try { backup.createNewFile(); FileOutputStream outputStream = new FileOutputStream(backup); OutputStreamWriter myOutWriter = new OutputStreamWriter(outputStream); myOutWriter.append(json);  myOutWriter.close();  outputStream.flush(); outputStream.close(); } catch (IOException e) { Log.e(getTag(), ""Couldn't backup: "" + e.toString()); }  PrefHelper.set(""backed_up"", new SimpleDateFormat(""MM/dd"").format(new Date())); findPreference(""backup"").setSummary(getString(R.string.backup_summary, getString(R.string.now))); Toasty.success(getContext(), getString(R.string.backed_up)); } else { Toasty.error(getContext(), getString(R.string.permission_failed)).show(); } } else if (permissions[0].equals(Manifest.permission.READ_EXTERNAL_STORAGE)) { if (grantResults[0] == PackageManager.PERMISSION_GRANTED) { showFileChooser(); } else { Toasty.error(getContext(), getString(R.string.permission_failed)).show(); } } }  } "	1	1	0	0	1	0
private void setUpArtistsFromCache() { if (FileCacheUtil.isCacheDataExist(CommonUtilities.CACHE_FILE_ARTISTS_LIST, this)) { String fileContent = FileCacheUtil.getCache(this, CommonUtilities.CACHE_FILE_ARTISTS_LIST); List<Artist> artists = new ArrayList<Artist>(); try { artists = parseArtistsListFromString(fileContent); } catch (JSONException e) { e.printStackTrace(); }  setUpArtists(artists, false); } } 	1	1	0	0	1	0
"private static String generateNotesString() { StringBuilder theNotesStringBuilder = new StringBuilder(); theNotesStringBuilder.append(""<h2>Notes:</h2>\n<p>""); Object [] theNotes = CurrentProject.getNoteList().getAllNotes().toArray(); int theNotesLength = theNotes.length; if( theNotesLength > 0 ) { for( int i = 0; i < theNotes.length; i++ ) { Note theNote = (Note)theNotes[i]; theNotesStringBuilder.append(""<b>""+(i+1)+"")</b> ""+theNote.getDate()+"" -- ""+ theNote.getTitle() +"":<br>\n""); Document doc = CurrentStorage.get().openNote(theNote); try { String txt = doc.getText(0, doc.getLength()); theNotesStringBuilder.append(txt+""<br>\n""); } catch (Exception ex) { ex.printStackTrace(); theNotesStringBuilder.append(""Failed Getting Note""+""<br>\n""); }  } } else { theNotesStringBuilder.append(""No Notes/n""); } theNotesStringBuilder.append(""<br>\n""); return theNotesStringBuilder.toString(); } "	1	0	0	1	1	0
"@Override public RecordReader<Void, ArrayWritable> getRecordReader(InputSplit inputSplit, JobConf jobConf, Reporter reporter) throws IOException { System.out.println(""Get record reader:"" + inputSplit.toString()); QueryModel queryModel = getQueryModel((CarbonInputSplit) inputSplit, jobConf); CarbonReadSupport<ArrayWritable> readSupport = getReadSupportClass(jobConf); return new CarbonRecordReader<ArrayWritable>(queryModel, readSupport, inputSplit, jobConf); } "	1	1	0	0	1	0
@Override public int hashCode(int[] bytes, int seed) { for (int i : bytes) { seed = -1640531527 * seed + i; } return seed; } 	1	0	0	1	1	0
public IPlayer getPlayer() { return Player.Get().getExact(event.getUniqueId()); } 	1	0	0	1	1	0
"@Transactional public CompletionStage<Result> update(String id) { JsonNode json = request().body().asJson(); if (json == null) { return CompletableFuture.completedFuture(badRequest(""Expecting Json data"")); } Agrupamento agrupamentoExistente = Agrupamento.find.byId(UUID.fromString(id)); if (agrupamentoExistente == null) { return CompletableFuture.completedFuture(notFound()); }  Agrupamento agrupamento = Json.fromJson(json, Agrupamento.class); agrupamento.setId(agrupamentoExistente.getId());  List<UUID> aneisIds = agrupamento.getAneis().stream().map(Anel::getId).collect(Collectors.toList()); agrupamento.setAneis(Anel.find.where().in(""id"", aneisIds).findList());  List<Erro> erros = new InfluuntValidator<Agrupamento>().validate(agrupamento);  if (erros.isEmpty()) { boolean existeconflito = deveCriarEventos() && agrupamento.existeEventoMesmoHorario(); if (existeconflito && !existeResolucaoConflito()) { return CompletableFuture.completedFuture(status(CONFLICT, ""EVENTO JA EXISTE"")); } else { agrupamento.update(); agrupamento.refresh(); if (deveCriarEventos() || (existeconflito && deveSubstituirEventos())) { agrupamento.criarEventos(); } } return CompletableFuture.completedFuture(ok(Json.toJson(agrupamento))); } else { return CompletableFuture.completedFuture(status(UNPROCESSABLE_ENTITY, Json.toJson(erros))); } } "	1	1	0	0	1	0
@Override public void run() { if (!mcMMO.getPlaceStore().isTrue(movedBlock)) { return; }  if (!BlockUtils.isPistonPiece(movedBlock.getState())) { // The block didn't move return; }  // The sticky piston actually pulled the block so move the PlaceStore data mcMMO.getPlaceStore().setFalse(movedBlock); mcMMO.getPlaceStore().setTrue(block.getRelative(direction)); } 	1	1	0	0	1	0
"@Override public DiscoveryResult createResult(ServiceInfo info) { DiscoveryResult result = null; ThingUID uid = getThingUID(info); if (uid != null) { Map<String, Object> properties = new HashMap<>(4); String label; try { label = info.getName(); } catch (Exception e) { label = ""unnamed enigma2 device""; } // remove the domain from the name InetAddress[] addrs = info.getInetAddresses();  if (addrs.length > 1) { logger.warn(""Enigma2 device {} ({}) reports multiple addresses - using the first one! {}"", info.getName(), label, Arrays.toString(addrs)); }  properties.put(Enigma2BindingConstants.DEVICE_PARAMETER_HOST, addrs[0].getHostAddress()); properties.put(Enigma2BindingConstants.DEVICE_PARAMETER_USER, """"); properties.put(Enigma2BindingConstants.DEVICE_PARAMETER_PASSWORD, """"); properties.put(Enigma2BindingConstants.DEVICE_PARAMETER_REFRESH, ""5000""); return DiscoveryResultBuilder.create(uid).withProperties(properties).withLabel(label).build(); } return result; } "	0	1	0	1	1	0
"public JSONStringer value(Object value) throws JSONException { if (stack.isEmpty()) { throw new JSONException(""Nesting problem""); }  if (value instanceof JSONArray) { ((JSONArray) value).writeTo(this); return this;  } else if (value instanceof JSONObject) { ((JSONObject) value).toString(this); return this; }  beforeValue();  if (value instanceof JSONString) { out.append(((JSONString) value).toJSONString()); return this; }  if (value == null || value instanceof Boolean || value == JSONObject.NULL) { out.append(value);  } else if (value instanceof Number) { out.append(JSONObject.numberToString((Number) value));  } else { // Hack to make it possible that the value is not surrounded by quotes. (Used for JavaScript function calls) // Example: { ""name"": ""testkey"", ""value"": window.myfunction() } if (value.getClass().getSimpleName().contains(""JSONFunction"")) { // note that no escaping of quotes (or anything else) is done in this case. // that is fine because the only way to get to this point is to // explicitly put a special kind of object into the JSON data structure. out.append(value); } else { string(value.toString()); } }  return this; } "	0	1	0	1	1	0
"private String addDocument(String document) throws StorageException { RestRequestor restClient = null; try { LOGGER.info(""Will use {} (PUT) to add document"", couchURI); restClient = RestRequestor.put(couchURI + ""/"" + documentId, ""application/json;charset=utf-8"", document.getBytes()); int code = restClient.getResponseCode(); String msg = restClient.getResponseMessage(); LOGGER.debug(""CouchDB responded with {}, {}"", code, msg); if (code != COUCHDB_CREATED_STATUS_CODE) { throw new StorageException(String.format(""Expected database to respond with code 201, got %s. Message is: %s"", code, msg)); } LOGGER.debug(""Saved: \n{}"", document); String revision = readRevision(restClient.getInputStream()); LOGGER.info(""Document saved: id = {} revision = {}"", documentId, revision); return revision; } catch (IOException e) { throw new StorageException(""Error while connecting to the database"", e); } finally { if (restClient != null) { restClient.close(); } } } "	0	1	0	1	1	0
"@Nonnull public static Map<String, Integer> parseFormula(String formula) {  Map<String, Integer> parsedFormula = new Hashtable<String, Integer>();  Pattern pattern = Pattern.compile(""([A-Z][a-z]?)(-?[0-9]*)""); Matcher matcher = pattern.matcher(formula);  while (matcher.find()) { String element = matcher.group(1); String countString = matcher.group(2); int addCount = 1; if (countString.length() > 0) addCount = Integer.parseInt(countString); int currentCount = 0; if (parsedFormula.containsKey(element)) { currentCount = parsedFormula.get(element); } int newCount = currentCount + addCount; parsedFormula.put(element, newCount); } return parsedFormula; } "	0	1	0	1	1	0
@Override public int getByte(String input, long offset) { char c = input.charAt((int)offset); if (c >= 'A' && c <= 'Z') { return c += 32; // toLower } return c; } 	0	1	0	1	1	0
"public FloatInputPoll getBatteryVoltage() { if (batteryLevel == null) { batteryLevel = FloatMixing.addition.of(6.5f, FloatMixing.multiplication.of(3, panel.add(new FloatControlDevice(""Battery Level (6.5V-12.5V)"")))); } return batteryLevel; } "	0	1	0	1	1	0
"public List<Ticket> TicketsByBuyerAndStatus(Long tenantId,String username, TicketStatus status, int offset, int limit) { if ((!(tenantId>0))|| (username == null) || (status == null)) { return null; } Query<User> queryUser = ds.createQuery(User.class);  queryUser.and(queryUser.criteria(""username"").equal(username), queryUser.criteria(""tenantId"").equal(tenantId)); User user =  queryUser.get();  Query<Ticket> query = ds.createQuery(Ticket.class); query.and(query.criteria(""passenger"").equal(user.get_id()), query.criteria(""status"").equal(status)); return query.offset(offset).limit(limit).asList(); } "	0	1	0	1	1	0
"public static RamlResponse getSuccessfulResponse(RamlAction action) { String[] successfulResponses = new String[] {""200"", ""201""}; for (String code : successfulResponses) { if (action != null && !CollectionUtils.isEmpty(action.getResponses()) && action.getResponses().containsKey(code)) { return action.getResponses().get(code); } } return null; } "	0	0	0	1	1	0
public static PickMiniSite newInstance(List<MiniSite> miniSites, Fragment fragment) { PickMiniSite dialog = new PickMiniSite(); dialog.setMiniSites(miniSites); dialog.setFragment(fragment); return dialog; } 	0	1	0	1	1	0
"private List<Account> getRetweetSumPerAccount(Statement stmt, boolean byDate) {  String a = ""SELECT Counter, retweets.LocationId, AccountId, Code, Day FROM retweets JOIN final ON retweets.AccountId=final.val JOIN day ON retweets.DayId=Day.Id JOIN location ON retweets.LocationId=location.Id;""; String b = ""SELECT SUM(Counter), retweets.LocationId, AccountId, Code FROM retweets JOIN final ON retweets.AccountId=final.val JOIN location ON retweets.LocationId=location.Id GROUP BY LocationId, AccountId;"";  ResultSet res = null; runningRequest = true; try { res = stmt.executeQuery(byDate ? a : b); } catch (SQLException e) { sqlExceptionLog(e, stmt); } finally { runningRequest = false; }  if (res == null) return new ArrayList<Account>();  List<Account> ret = new ArrayList<Account>(); try { while (res.next()) {  int id = res.getInt(3); Account temp = null; Iterator<Account> it = ret.iterator(); while (it.hasNext() && temp == null) { Account ac = it.next(); if (ac.getId() == id) { temp = ac; } }  if (temp == null) { // add account and retweet ret.add(new Account(id, res.getString(2), new Retweets( (byDate ? res.getDate(4) : null), res.getInt(1), res.getInt(2)))); } else { // add retweets to account Retweets element = new Retweets( (byDate ? res.getDate(""Day"") : null), res.getInt(1), res.getInt(2)); element.setLocationCode(res.getString(""Code"")); temp.addRetweet(element); }  } } catch (SQLException e) { sqlExceptionResultLog(e); return new ArrayList<Account>(); } finally { closeResultAndStatement(stmt, res); }  return ret; } "	0	0	0	1	1	0
/** */ @Test public void kNormTest() { for (double pow : new double[] {0, 0.5, 1, 2, 2.5, Double.POSITIVE_INFINITY}) toDoubleTest(ref -> new Norm(ref, pow).calculate(), v -> v.kNorm(pow)); } 	0	1	0	1	1	0
@Override protected IndentLevel getChildrenExpectedIndent() { final IndentLevel expectedIndent = new IndentLevel(getIndent(), getIndentCheck().getArrayInitIndent(), getIndentCheck().getLineWrappingIndentation());  final int firstLine = getFirstLine(Integer.MAX_VALUE, getListChild()); final int lcurlyPos = expandedTabsColumnNo(getLeftCurly()); final int firstChildPos = getNextFirstNonBlankOnLineAfter(firstLine, lcurlyPos); if (firstChildPos >= 0) { expectedIndent.addAcceptedIndent(firstChildPos); expectedIndent.addAcceptedIndent(lcurlyPos + getLineWrappingIndentation()); } return expectedIndent; } 	0	0	0	1	1	0
"@Override public Out execute(In parameters) throws Exception {  List<Payment> payments = new ArrayList<>();  Out out = new DefaultOut(); Connection connection = parameters.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(""Select o.id_food_meeting, u.name, o.order_name, o.cost from orders o, users u where o.id_food_meeting = ?""); preparedStatement.setInt(1, Integer.valueOf(parameters.getParameter(""id_food_meeting""))); ResultSet resultSet = preparedStatement.executeQuery();  while (resultSet.next()) { payments.add(new Payment(resultSet.getString(1), resultSet.getString(2), resultSet.getString(3), resultSet.getDouble(4))); }  out.addResult(""meetingName"", parameters.getParameter(""meeting_name"")); out.addResult(""payments"", payments); out.forward(""payment/payment.jsp"");  return out; } "	0	0	0	1	1	0
"private String getExtension(TikaInputStream is, Metadata metadata) { String cType = metadata.get(Metadata.CONTENT_TYPE); TikaConfig config = getConfig(); if (cType == null) { Detector detector = config.getDetector(); try { MediaType mediaType = detector.detect(is, metadata); MimeTypes types = config.getMimeRepository(); MimeType mime = types.forName(mediaType.toString()); metadata.set(Metadata.CONTENT_TYPE, mediaType.getSubtype()); return mime.getExtension(); } catch (IOException e) { //swallow } catch (MimeTypeException e) {  } } return "".bin""; } "	0	1	0	1	1	0
"public static Block registerDoor(BlockBOPDoor door_block, String name, Item door_item) { Block block = registerBlock( door_block, name + ""_block"", null ); door_item = ModItems.registerItem( new ItemDoor(block), name ); door_block.setDoorItem(door_item); return block; } "	0	0	0	1	1	0
"@Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder;  if (convertView == null) { convertView = mInflater.inflate(R.layout.list_item_layout, null);  holder = new ViewHolder(); holder.text = (TextView) convertView.findViewById(R.id.drinkItem); //holder.img = (ImageView) convertView.findViewById(R.id.drinkImage);  convertView.setTag(holder);  } else { holder = (ViewHolder) convertView.getTag(); }  holder.text.setText(filteredData.get(position).getFormattedName()); holder.text.setInputType(InputType.TYPE_NULL); holder.text.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { String drinkName = ((TextView) v).getText().toString(); for (Drink d : filteredData) { if (d.getName().equals(drinkName)) { Intent intent = new Intent(v.getContext(), OpenRecipeActivity.class); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); intent.putExtra(""ListViewClick"", d); v.getContext().startActivity(intent); } } } });  return convertView; } "	0	0	0	1	1	0
"private void tagInputDialog() { AlertDialog.Builder taginput = new AlertDialog.Builder(getContext()); taginput.setTitle(""Add tag"");  final EditText tag = new EditText(getContext()); taginput.setView(tag);  taginput.setPositiveButton(""Add"", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { String temp = tag.getText().toString(); (new TagDBManager(getContext())).insertTag(imagefilepath, temp, TagDBManager.NORMAL_TAG); tagListItems.add(new TagListItem(temp)); tagListAdapter.notifyDataSetChanged(); dialog.dismiss(); } });  taginput.setNegativeButton(""Cancel"", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } });  taginput.show();  } "	0	1	0	1	1	0
"private List<Post> getPostsPerCalamity(int calamityId) throws SQLException, ParseException, NoSuchAlgorithmException { List<Post> posts = new ArrayList<>();  String query = ""SELECT p.ID, p.UserID, p.Text FROM Post p INNER JOIN CalamityPost cp ON p.ID = cp.PostID WHERE cp.CalamityID = ?;"";  List<Object> parameters = new ArrayList<>(); parameters.add(calamityId);  try (ResultSet rs = database.executeQuery(query, parameters, Database.QueryType.QUERY)) { while (rs.next()) { int id = rs.getInt(1); int userId = rs.getInt(2); String text = rs.getString(3);  User user = new UserRepo(database).getUserById(id);  posts.add(new Post(id, user, text)); } }  return posts; } "	0	0	0	1	1	0
"public static long getTotalPhysicalMemory() { try { OperatingSystemMXBean o = (OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean(); return o.getTotalPhysicalMemorySize(); } catch(Throwable t) { HMCLog.warn(""Failed to get total physical memory size"", t); return -1; } } "	0	0	0	1	1	0
"private DataModel getDataModel(final String dataModelUuid) {  final DataModel dataModel = dataModelService.get().getObject(dataModelUuid);  if (dataModel == null) {  InternalGDMGraphService.LOG.debug(""couldn't find data model '"" + dataModelUuid + ""'"");  return null; }  return dataModel; } "	0	0	0	1	1	0
"public Core useAuth(String username, String password) { String pair = username + "":"" + password; String encoded_pair = Base64.encodeToString(pair.getBytes(), Base64.DEFAULT); mAuth = ""Basic "" + encoded_pair; return this; } "	0	1	0	1	1	0
"private void updateAdd() { for (Message message : unfiltered) { if (!filterItem(message)) { String simpleName = getClass().getSimpleName(); Log.e(simpleName, ""Unfiltered: ""+message); filtered.add(message); } } } "	0	1	0	1	1	0
@Override protected void combineTokens(Stack<IToken> sample, ProcessingData processingData) { SyntaxToken token = (SyntaxToken) sample.get(0);  SyntaxToken verbToken = null; SyntaxToken nounToken = null; if (verbMatchGrammems.match(token)) { verbToken = token; nounToken = null; } else { verbToken = null; nounToken = token; } int startPosition = token.getStartPosition(); int endPosition = computeEndPoosition(token);  IToken newToken = new ClauseToken(nounToken, verbToken, startPosition, endPosition); if(checkParents(newToken, sample)){ processingData.addReliableToken(newToken); } } 	0	0	0	1	1	0
"@Override public void onBackPressed() { synchronized (interceptOnBackPressedListeners.synchronizedList()) { for (interceptOnBackPressedEvent listener : interceptOnBackPressedListeners.nonNull()) { try { if (listener.interceptOnBackPressed()) { return; }  } catch (Throwable t) { Log.e(TAG, ""Error dispatching interceptOnBackPressed event: "" + t.getMessage(), t); } } }  TiWindowProxy topWindow = topWindowOnStack();  if (topWindow != null && topWindow.hasListeners(TiC.EVENT_ANDROID_BACK)) { topWindow.fireEvent(TiC.EVENT_ANDROID_BACK, null); } // Override default Android behavior for ""back"" press // if the top window has a callback to handle the event. if (topWindow != null && topWindow.hasProperty(TiC.PROPERTY_ON_BACK)) { KrollFunction onBackCallback = (KrollFunction) topWindow.getProperty(TiC.PROPERTY_ON_BACK); onBackCallback.callAsync(activityProxy.getKrollObject(), new Object[] {}); } if (!topWindow.hasProperty(TiC.PROPERTY_ON_BACK) && !topWindow.hasListeners(TiC.EVENT_ANDROID_BACK)) { // there are no parent activities to return to // override back press to background the activity // note: 2 since there should always be TiLaunchActivity and TiActivity if (TiApplication.activityStack.size() <= 2) { if (topWindow != null && !TiConvert.toBoolean(topWindow.getProperty(TiC.PROPERTY_EXIT_ON_CLOSE), true)) { this.moveTaskToBack(true); return; } }  // If event is not handled by custom callback allow default behavior. super.onBackPressed(); } } "	0	0	0	1	1	0
"private static String normalizeCode(String raw_code_number) { // Fixed to double digit .. // http://stackoverflow.com/questions/4469717/left-padding-a-string-with-zeros return String.format(""%02d"", Integer.parseInt(raw_code_number)); } "	0	0	0	1	1	0
@Override public int compare(BagFile bagFile1, BagFile bagFile2) { return ((Long)bagFile2.getSize()).compareTo(bagFile1.getSize()); } 	0	0	0	1	1	0
@Override public void run() { try { barrier.await();   try (JournalWriter w = wf.writer(s)) { if (w != null) { writerCount.incrementAndGet(); } } } catch (Exception e) { e.printStackTrace(); errors.incrementAndGet(); } finally { halt.countDown(); } } 	0	0	0	1	1	0
public Boolean hasOneSortedColumn() { return !sortingColumnDefs.isEmpty(); } 	0	0	0	1	1	0
"@Test public void extendedStatsAggregationTest() throws SqlParseException, SQLFeatureNotSupportedException, Exception { String query = String.format(""SELECT EXTENDED_STATS(age) FROM %s/account"", TEST_INDEX); CSVResult csvResult = getCsvResult(false, query); List<String> headers = csvResult.getHeaders(); Assert.assertEquals(8, headers.size()); Assert.assertEquals(""EXTENDED_STATS(age).count"", headers.get(0)); Assert.assertEquals(""EXTENDED_STATS(age).sum"", headers.get(1)); Assert.assertEquals(""EXTENDED_STATS(age).avg"", headers.get(2)); Assert.assertEquals(""EXTENDED_STATS(age).min"", headers.get(3)); Assert.assertEquals(""EXTENDED_STATS(age).max"", headers.get(4)); Assert.assertEquals(""EXTENDED_STATS(age).sumOfSquares"", headers.get(5)); Assert.assertEquals(""EXTENDED_STATS(age).variance"", headers.get(6)); Assert.assertEquals(""EXTENDED_STATS(age).stdDeviation"", headers.get(7));  List<String> lines = csvResult.getLines(); Assert.assertEquals(1, lines.size()); String line = lines.get(0); Assert.assertTrue(line.startsWith(""1000.0,30171.0,30.171,20.0,40.0,946393.0"")); Assert.assertTrue(line.contains("",6.008"")); Assert.assertTrue(line.contains("",36.103"")); } "	0	0	0	1	1	0
private boolean jj_3R_107() { if (jj_3R_57()) return true; Token xsp; xsp = jj_scanpos; if (jj_3R_230()) jj_scanpos = xsp; return false; } 	0	0	0	1	1	0
"public ProcessRuntime call(String filename) throws Exception { stream.err().println(""load(String) command is deprecated. Use '$load.threaddump(String)' instead.""); return new ThreadDumpFactory().fromFile(new File(filename)); } "	0	0	0	1	1	0
"@Test public void test() throws Exception { File file = Util.resourceFile(ThreadDumpFactoryTest.class, ""openjdk-1.7.0_60.log""); stdin(""load('"" + file.getAbsolutePath() + ""').threads.size();"" + Util.NL); run(""groovysh"");  assertThat(out.toString(), containsString("" 35%n"")); assertThat(this, succeeded()); assertThat(err.toString(), containsString(""load(String) command is deprecated. Use '$load.threaddump(String)"")); } "	0	0	0	1	1	0
"private static void updateKillDeathRatio(){ int i, gcm, first = totalKills, second = Health.timesDied;  i = (first >= second) ? first : second;  while (i != 0) { if (first % i == 0 && second % i == 0) { gcm = i; break; } i--; }  killDeathRatio = first/gcm + "":"" + second/gcm; } "	0	0	0	1	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);  new CustomView(this,null);  String s1 = getString(R.string.s1); String s3 = getString(R.string.s3); //Toast.makeText(this,""haha "" + "" | "" + s1 +  "" | "" + s3,Toast.LENGTH_LONG).show();   String s2 = getString(R.string.s2); Toast.makeText(this,""哈2"" + "" | "" + s1 + "" | "" + s2 + "" | "" + s3,Toast.LENGTH_LONG).show();  new Runnable(){ @Override public void run() {  } };  SampleApplication realApp = (SampleApplication)getApplication();   new Runnable(){ @Override public void run() { Toast.makeText(getApplicationContext(),""223"",Toast.LENGTH_LONG).show(); } }.run();  new T1(); new T2(); } "	0	1	0	1	1	0
"@Override public void getUsersByNumbers(List<String> phoneNums, OnGetNumbersCallback onGetNumbersCallback) { ParseQuery<ParseUser> query = ParseUser.getQuery(); query.whereContainedIn(""phone"", phoneNums); query.findInBackground(new CallbackGetNumbers(onGetNumbersCallback)); } "	0	0	0	1	1	0
"@Override public HashMap<TeamDraftOrder, PlayerDataSet> getAutoPickWizards() { String sql = ""SELECT * FROM autoPickWizards"";  HashMap<TeamDraftOrder, PlayerDataSet> autoPickWizards = new HashMap<>();  ResultSet resultSet = null; try { resultSet = executeQuery(sql); while (resultSet.next()) { TeamDraftOrder teamDraftOrder = getDraftOrderByTeamId(new TeamId(resultSet.getInt(""teamID"")));  String dataSetName = resultSet.getString(""WizardTable"");  if (dataSetName != null) { Optional<PlayerDataSet> dataSet = PlayerDataSet.getDataSetWithName(dataSetName);  if (!dataSet.isPresent()) { throw new RuntimeException(""Team "" + teamDraftOrder + "" is linked to unrecognized DataSet '"" + dataSetName + ""'.""); }  autoPickWizards.put(teamDraftOrder, dataSet.get()); } }  } catch (DataSourceException | SQLException e) { logger.log(Level.SEVERE, ""Couldn't fetch team selections for which auto-pick source to use. Using default of CBSSPORTS, as backup.""); } finally { close(resultSet); }  return autoPickWizards; } "	0	0	0	1	1	0
"private void reCreateDatabaseOnFirstStart() { kvr.reCreateKeyValueTable(); uer.reCreateUebungenTable(); psr.reCreatePlaylistSongsTable(); str.reCreateUebungenTable(); prep.reCreatePlanTable(); phasenRep.reCreatePhasenTable(); kvr.insertKeyValue(""firstStart"", ""false""); Log.wtf(""Database0OnFirstStart?"", ""reCreatedDatabaseOnFirstStart""); } "	0	0	0	1	1	0
"public static void main(String[] args) { // TODO Auto-generated method stub ManchesterUnitedStats mus1 = new ManchesterUnitedStats(""manchester united""); mus1.computeResults(); mus1.computePoints(); mus1.displayResults(); } "	0	0	0	1	1	0
"@Override public List<PatientMatch> findMatches(Patient patient) { List<PatientMatch> matches = new LinkedList<PatientMatch>();  for (MatchFinder service : this.matchFinderProvider.get()) { try { List<PatientMatch> foundMatches = service.findMatches(patient); matches.addAll(foundMatches);  this.logger.debug(""Found {} matches by {}: "", matches.size(), service.getClass().getSimpleName()); for (PatientMatch match : foundMatches) { this.logger.debug(match.toCompactString()); }  } catch (Exception ex) { this.logger.error(""Failed to invoke matches finder [{}]"", service.getClass().getCanonicalName(), ex); } }  return matches; } "	0	0	0	1	1	0
@Override public boolean onContextItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.wallet_options_safety: HelpDialogFragment.page(getFragmentManager(), R.string.help_safety); return true;  case R.id.wallet_options_backup_wallet: handleBackupWallet(); return true;  case R.id.wallet_options_restore_wallet: showDialog(DIALOG_RESTORE_WALLET); return true;  case R.id.wallet_options_encrypt_keys: handleEncryptKeys(); return true; }  return super.onContextItemSelected(item); } 	0	0	0	1	1	0
"@Test public void testJsonObjectEncodePrettily() { runJavaScript(""json/JsObject"", ""encodePrettily""); Assert.assertEquals(""{\""foo\"":\""foo_value\""}"", o); runGroovy(""json/JsObject"", ""encodePrettily""); Assert.assertEquals(""[foo:foo_value]"", o); runRuby(""json/JsObject"", ""encodePrettily""); Assert.assertEquals(""{\""foo\"":\""foo_value\""}"", o); } "	0	0	0	1	1	0
"@TargetApi(18) public void notifyScannedDevice(BluetoothDevice device, BluetoothAdapter.LeScanCallback scanner) { int oldSize = 0, newSize = 0;  if (isDebugEnabled()) oldSize = distinctBluetoothAddresses.size();  distinctBluetoothAddresses.add(device.getAddress()); if (isDebugEnabled()) { newSize = distinctBluetoothAddresses.size(); if (oldSize != newSize && newSize % 100 == 0) { if (isDebugEnabled()) Log.d(TAG, ""Distinct bluetooth devices seen: ""+distinctBluetoothAddresses.size()); } } if (distinctBluetoothAddresses.size()  > getCrashRiskDeviceCount()) { if (PREEMPTIVE_ACTION_ENABLED && !recoveryInProgress) { Logger.log.verbose(""Large number of bluetooth devices detected: ""+distinctBluetoothAddresses.size()+"" Proactively attempting to clear out address list to prevent a crash""); Logger.log.verbose(TAG, ""Stopping LE Scan""); //noinspection deprecation old API compatability BluetoothAdapter.getDefaultAdapter().stopLeScan(scanner); startRecovery(); processStateChange(); } } } "	0	0	0	1	1	0
"@Override public String toString() { return String.format(""Const(%s)"", value); } "	0	0	0	1	1	0
"@Test public void testShowBindingError() throws Exception { wd().openScreen(LookupInput2TestPage.class);  // Pressing validate should make the 2nd editor be with an error background wd().cmd().click().on(""button_validate"");  ScreenInspector inspector = wd().screenInspector(); if(null == inspector) return; BufferedImage bi = inspector.elementScreenshot(""one""); //ImageIO.write(bi, ""png"", new File(""/tmp/test.png"")); Assert.assertTrue(""The background of the control should be red because it is in error"", isReddish(bi));  //-- Reload the screen, and it should remain red wd().refresh();  inspector = wd().screenInspector(); if(null == inspector) throw new IllegalStateException(); bi = inspector.elementScreenshot(""two""); //ImageIO.write(bi, ""png"", new File(""/tmp/test.png"")); Assert.assertTrue(""The background of the control should be red because it is in error after screen refresh"", isReddish(bi)); } "	0	0	0	1	1	0
"@Test public void testTimestampDeSerialize() throws Exception { // Test that timestamp object can be deserialized Writable w = new Text(""{\""one\"":true,\""five\"":\""2013-03-27 23:18:40\""}"");  JSONObject result = (JSONObject) instance.deserialize(w); assertEquals(result.get(""five""), Timestamp.valueOf(""2013-03-27 23:18:40.0"")); } "	0	0	0	1	1	0
"public void setAttenuation(float constant, float linear, float quadratic) { setFloat(""attenuation_constant"", constant); setFloat(""attenuation_linear"", constant); setFloat(""attenuation_quadratic"", quadratic); } "	0	0	0	1	1	0
"@Override public List<Operation> write(List<WriteOperation> operations) {  List<Operation> roll = new ArrayList<>();  for(WriteOperation operation : operations) {  try { switch (operation.getAction()) {  case CREATE_NODE : createIndividual((CreateNodeOperation)operation, roll); break;  case CREATE_ATTRIBUTE : if(((CreateAttributeOperation)operation).isReplacing()) { throw new WeaverError(WeaverError.WRITE_OPERATION_INVALID, ""Removes or replaces not allowed for Coins2-1 profile.""); } createAttribute((CreateAttributeOperation)operation, roll); break;  case CREATE_RELATION : if(((CreateAttributeOperation)operation).isReplacing()) { throw new WeaverError(WeaverError.WRITE_OPERATION_INVALID, ""Removes or replaces not allowed for Coins2-1 profile.""); } createRelation((CreateRelationOperation)operation, roll); break;  case REMOVE_NODE : case REMOVE_ATTRIBUTE : case REMOVE_RELATION : throw new WeaverError(WeaverError.WRITE_OPERATION_INVALID, ""Removes or replaces not allowed for Coins2-1 profile."");  default: throw new WeaverError(WeaverError.WRITE_OPERATION_NOT_EXISTS, ""This operation is not supported: ""+operation.getAction()); }  } catch(WeaverError e) { throw e; } }  return roll; } "	0	0	0	1	1	0
"private static ImmutableMap<String, IborIndex> loadFromCsv() { List<ResourceLocator> resources = ResourceConfig.orderedResources(""IborIndexData.csv""); Map<String, IborIndex> map = new HashMap<>(); for (ResourceLocator resource : resources) { try { CsvFile csv = CsvFile.of(resource.getCharSource(), true); for (int i = 0; i < csv.rowCount(); i++) { IborIndex parsed = parseIborIndex(csv, i); map.put(parsed.getName(), parsed); } } catch (RuntimeException ex) { log.severe(""Error processing resource as Ibor Index CSV file: "" + resource + ex.getMessage()); return ImmutableMap.of(); } } return ImmutableMap.copyOf(map); } "	0	0	0	1	1	0
"private static ImmutableMap<String, PriceIndex> loadFromCsv() { List<ResourceLocator> resources = ResourceConfig.orderedResources(""PriceIndexData.csv""); Map<String, PriceIndex> map = new HashMap<>(); for (ResourceLocator resource : resources) { try { CsvFile csv = CsvFile.of(resource.getCharSource(), true); for (int i = 0; i < csv.rowCount(); i++) { PriceIndex parsed = parsePriceIndex(csv, i); map.put(parsed.getName(), parsed); } } catch (RuntimeException ex) { log.severe(""Error processing resource as Price Index CSV file: "" + resource + ex.getMessage()); return ImmutableMap.of(); } } return ImmutableMap.copyOf(map); } "	0	0	0	1	1	0
"@Test public void testOfBasicCase() throws Exception { try { CalendarEvent e = this.ttce.interpret(null); fail(); } catch (Exception e) { }  CalendarEvent f = this.ttce.interpret(""""); assertEquals(f.title, """");  CalendarEvent g = this.ttce.interpret(""wizyta u fryzjera ""); assertEquals(g.title, ""wizyta u fryzjera""); assertEquals(g.getDay(), null); assertEquals(g.getMonth(), null); assertEquals(g.getYear(), null); assertEquals(g.getMinutes(), null); assertEquals(g.getHour(), null); } "	0	0	0	1	1	0
"protected String getProcessingResultText(String path, long analysisTime, long processingTime, String size) { String analysis = Standalone.formatTime(analysisTime); String processing = Standalone.formatTime(processingTime); String total = Standalone.formatTime(analysisTime + processingTime); return ""Successfully created \"""" + path + ""\"" ("" + size + "") in "" + total + "" (anaysis: "" + analysis + "", processing: "" + processing + "")""; } "	0	0	0	1	1	0
"@Test public void testSourceAddedWithCustomTags() throws Exception { List<String> customSourceTags = new ArrayList<String>(); customSourceTags.add(""fqdn""); customSourceTags.add(""hostname""); GraphiteHostAnnotator handler = new GraphiteHostAnnotator(""test.host.com"", customSourceTags); List<Object> out = new LinkedList<Object>(); String msg = ""test.metric 1 foo=bar""; handler.decode(null, msg, out); assertEquals(""test.metric 1 foo=bar source=test.host.com"", out.get(0)); } "	0	0	0	1	1	0
@Override public void onClick(AjaxRequestTarget target) { // do nothing } 	0	0	0	1	1	0
"@Test //	@Ignore public void testCNRS() throws Exception { TimedEventFileReader eventReader = new TimedEventFileReader(TestTrafficManagement.class.getClassLoader().getResource(""simulator_data_incident_short.csv"").getPath(), ""speedd-traffic-in-events"", createProducerConfig(), new TrafficAimsunReadingCsv2Event(SpeeddEventFactory.getInstance())); //EventFileReader eventReader = new EventFileReader(TestTrafficManagement.class.getClassLoader().getResource(""inputCNRS.csv"").getPath(), ""speedd-in-events"", createProducerConfig(), 1000);  streamEventsAndVerifyResults(""speedd-traffic.properties"", ""traffic"", eventReader, new String[]{""Congestion"", ""AverageDensityAndSpeedPerLocation""}, new String[]{});  } "	0	0	0	1	1	0
"@Test public void shouldReturnAdhrenceTrendPercentage() { String externalId = ""someExternalId""; String pillRegimenId = ""pillRegimenId""; int successCountThisWeek = 25; int scheduledDosageCount = 100; Mockito.when(pillReminderService.getPillRegimen(Mockito.anyString())).thenReturn(pillRegimenResponse); Mockito.when(pillRegimenResponse.getPillRegimenId()).thenReturn(pillRegimenId); Mockito.when(allDosageAdherenceLogs.findScheduledDosagesSuccessCount(pillRegimenId, dateTime.minusWeeks(4).toLocalDate(), dateTime.toLocalDate())).thenReturn(successCountThisWeek); PowerMockito.when(DosageUtil.getScheduledDosagesTotalCountForLastFourWeeks(Mockito.any(DateTime.class), Mockito.any(DateTime.class), Mockito.any(PillRegimenResponse.class))).thenReturn(scheduledDosageCount);  DailyReminderAdherenceTrendService dailyReminderAdherenceTrendService = new DailyReminderAdherenceTrendService(allDosageAdherenceLogs, pillReminderService, patientAlertService); assertEquals(0.25, dailyReminderAdherenceTrendService.getAdherencePercentage(externalId)); } "	0	1	0	1	1	0
@Test public void testParseFloat() throws Exception { Bytes b = Bytes.elasticByteBuffer(); float expected = 123; b.append(expected); b.flip(); Assert.assertEquals(expected,BytesUtil.parseDouble(b)); } 	0	1	0	1	1	0
"@Test public void testEmptyExists() { executionHandler.parse(""main() {}ensure exists() false;""); executionHandler.run(stmtBps, glblBps); assertNull(executionHandler.getAssertionFailureMessage()); } "	0	0	0	1	1	0
"public void execute(JobExecutionContext context) throws JobExecutionException { this.mRecorderID = context.getJobDetail().getDescription(); LOGGER.info(""Fetching Recorder Status for Recorder with ID: "" + this.mRecorderID);  Recorder recorder; try { recorder = DB.getRecorder(""id = '"" + this.mRecorderID + ""'"")[0]; } catch (IndexOutOfBoundsException e) { LOGGER.error(""Could not locate Recorder Record in DB for recorder ID - "" + this.mRecorderID); return; }  Status previousStatus = Status.getByCode(recorder.getStatus()); Status currentStatus = null;  try { currentStatus = Recorders.getRecorderStatus(Recorders.getRecorderIP(this.mRecorderID)); } catch (RuntimeException e) { LOGGER.error(""Problem retrieving recorder status from API - Invalid IP"", e); }  if (currentStatus == null) { LOGGER.error(""Problem retrieving recorder status from API/Recorder""); currentStatus = Status.UNKNOWN; }  LOGGER.debug(String.format(""Recorder Status is \""%s\"""", currentStatus)); recorder.setStatus(currentStatus); DB.updateRecorder(recorder); LOGGER.info(""Finished Updating Recorder Status for Recorder with ID: "" + this.mRecorderID);  try { if (previousStatus.okay() && currentStatus.inAlarm()) { LOGGER.warn(""Recorder "" + mRecorderID + ""has entered ALARM state!""); Hook.fire(Hook.RECORDER_ALARM_ACTIVATE, new Recorder(mRecorderID, currentStatus)); } else if (previousStatus.inAlarm() && currentStatus.okay()) { LOGGER.info(""Recorder"" + mRecorderID + "" has cleared ALARM state and is now OKAY.""); Hook.fire(Hook.RECORDER_ALARM_CLEAR, new Recorder(mRecorderID, currentStatus)); } } catch (IOException e) { LOGGER.error(""Problem firing Alarm Status Update Hook"", e); }  try { Hook.fire(Hook.RECORDER_STATUS_UPDATE, DB.getRecorder(""id='"" + mRecorderID + ""'"")); } catch (IOException e) { LOGGER.error(""Problem firing Recorder Status Update Hook"", e); } } "	0	0	0	1	1	0
"public void init(ServletContext context) { LOGGER.info(""*** WebProcessingService initializing... ***""); WPSConfig conf = WPSConfig.getInstance();  // this is important to set the lon lat support for correct CRS transformation. // TODO: Might be changed to an additional configuration parameter. System.setProperty(""org.geotools.referencing.forceXY"", ""true"");  LOGGER.info(""WebProcessingService initializing..."");  try { if (conf == null) { LOGGER.error(""Initialization failed! Please look at the properties file!""); return; } } catch (RuntimeException e) { LOGGER.error(""Initialization failed! Please look at the properties file!"", e); return; } LOGGER.info(""Initialization of wps properties successful!\n\t\tWPSConfig: {}"", conf);  applicationBaseDir = context.getRealPath(""""); LOGGER.debug(""Application base dir is {}"", applicationBaseDir);  Parser[] parsers = WPSConfig.getInstance().getActiveRegisteredParser(); ParserFactory.initialize(parsers); LOGGER.info(""Initialized {}"", ParserFactory.getInstance());  Generator[] generators = WPSConfig.getInstance().getActiveRegisteredGenerator(); GeneratorFactory.initialize(generators); LOGGER.info(""Initialized {}"", GeneratorFactory.getInstance());  RepositoryManager repoManager = RepositoryManager.getInstance(); LOGGER.info(""Initialized {}"", repoManager);  IDatabase database = DatabaseFactory.getDatabase(); LOGGER.info(""Initialized {}"", database);  try { String capsConfigPath = getApplicationBaseDir() + File.separator + CONFIG_FILE_DIR + File.separator + CAPABILITES_SKELETON_NAME; CapabilitiesDocument capsDoc = CapabilitiesConfiguration.getInstance(capsConfigPath); LOGGER.debug(""Initialized capabilities document:\n{}"", capsDoc); } catch (IOException | XmlException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); }  LOGGER.info(""Service base url is {} | Service endpoint is {} | Used config file is {}"", conf.getServiceBaseUrl(), conf.getServiceEndpoint(), WPSConfig.getConfigPath());  // FvK: added Property Change Listener support // creates listener and register it to the wpsConfig instance. // it will listen to changes of the wpsCapabilities WPSConfig.getInstance().addPropertyChangeListener(WPSConfig.WPSCAPABILITIES_SKELETON_PROPERTY_EVENT_NAME, new PropertyChangeListener() { @Override public void propertyChange(final PropertyChangeEvent propertyChangeEvent) { LOGGER.info(this.getClass().getName() + "": Received Property Change Event: "" + propertyChangeEvent.getPropertyName()); try { CapabilitiesConfiguration.reloadSkeleton(); } catch (IOException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); } catch (XmlException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); } } });  // FvK: added Property Change Listener support // creates listener and register it to the wpsConfig instance. // it will listen to changes of the wpsConfiguration WPSConfig.getInstance().addPropertyChangeListener(WPSConfig.WPSCONFIG_PROPERTY_EVENT_NAME, new PropertyChangeListener() { public void propertyChange(final PropertyChangeEvent propertyChangeEvent) { LOGGER.info(this.getClass().getName() + "": Received Property Change Event: "" + propertyChangeEvent.getPropertyName()); try { CapabilitiesConfiguration.reloadSkeleton(); } catch (IOException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); } catch (XmlException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); } } }); LOGGER.info(""*** WPS up and running! ***""); } "	0	0	0	1	1	0
"@Override protected String escape(String content) { return content.replace(""\t"", """").replace(""\n"", ""\\n"").replace(""\"""", ""'""); } "	0	0	0	1	1	0
static String input(Object object) { return ChatColor.WHITE + object.toString() + ChatColor.GRAY; } 	0	0	0	1	1	0
"@Test public void testVmSnapshotDetails() { VMSnapshotDetailsVO detailsVO = new VMSnapshotDetailsVO(1L, ""test"", ""foo"", display); vmsnapshotDetailsDao.persist(detailsVO); Map<String, String> details = vmsnapshotDetailsDao.listDetailsKeyPairs(1L); Assert.assertTrue(details.containsKey(""test"")); } "	0	0	0	1	1	0
"public Patient userDetailEntityToPatient(UserDetailEntity userDetailEntity) { Patient patient = modelMapper.map(userDetailEntity, Patient.class); patient.setDateOfBirth(""""); if(userDetailEntity.getDataOfBirth() != null) { patient.setDateOfBirth(new SimpleDateFormat(""dd-MM-yyyy"").format(userDetailEntity.getDataOfBirth())); } patient.setImagePath(""patient/""+patient.getId()+""/image""); return patient; } "	0	0	0	1	1	0
"@DebugLog @Override public void onServiceItemClick(int position) { fragmentManager.beginTransaction().addToBackStack(""characteristic"").replace(R.id.detail_fragment_view, characteristicListFragment).commit(); bluetoothGattCharacteristics = bluetoothGattServices.get(position).getCharacteristics(); onCharacteristicReady(); } "	0	0	0	1	1	0
"private void decorateFrame() { setUIFont (new javax.swing.plaf.FontUIResource(Palette.UI_FONT_DEFAULT));  setTitle(""TASMA""); setIconImage(createImage(""res/logo.png"", ""icon"")); setAlwaysOnTop(true); // must use HIDE on CLOSE for the TrayIcon to work properly setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); updateWindowHeight();  // sets the window to center of the screen // then move it up a little setLocationRelativeTo(null); this.setLocation(this.getLocation().x, (int)(0.5 * this.getLocation().y)); } "	0	0	0	1	1	0
"private static String strip(String s) { return s.toLowerCase().replace(""?"", """").replace(""."", """").replace(""!"", """").replace("","", """").replace(""_"", """").replace(""~"", """").replace(""`"", """").replace(""'"", """").replace(""\"""", """").replace(""\"""", """").replace(""\\"", """").replace("":"", """").replace("";"", """").replace(""the"", "" "").replace(""teh"", "" "").replace(""how do"", ""how can"").replace(""re"", """").replace("" a "", "" "").replace(""is"", """").replace(""has"", """").replace(""get to"", ""go to"").replaceAll(""\\Bs\\b"", """").replaceAll("" {2}?"", """").trim(); } "	0	0	0	1	1	0
"private  LocalDateTime getSortTimeStamp(String[] fields) throws ParseException { LocalDateTime tmpDate = null; LocalTime tmpTime = null; for (int i = 0; i < columns.length; i++) { if (ColumnType.getDateTypes().contains(columns[i].characteristic) && ((DateColumn) columns[i]).sortOnThisField()) { DateColumn dColumn = ((DateColumn) columns[i]); if (dColumn.getDateFormat().equals(""Excel epoch"")) { return DateUtils.t1900toLocalDateTime(fields[i]); } if (dColumn.characteristic == ColumnType.DATEandTIME) { return DateUtils.parseDate(fields[i], dColumn.getDateFormat()); } if (dColumn.characteristic == ColumnType.DATE) { tmpDate = DateUtils.parseDate(fields[i], dColumn.getDateFormat()); if (tmpTime != null) { return DateUtils.addLocalTimeToLocalDateTime(tmpTime, tmpDate); } } if (dColumn.characteristic == ColumnType.TIME) { tmpTime = DateUtils.parseTime(fields[i], dColumn.getDateFormat()); if (tmpDate != null) { return DateUtils.addLocalTimeToLocalDateTime(tmpTime, tmpDate); } } } } return tmpDate; } "	0	1	0	1	1	0
"public List<Node> getTaggedObjects(Long tagId) { List<Node> taggedObjs = new ArrayList(); String sql = String.format(""select v_in from flatedge where v_out = %s and label = 'tags'"", tagId); Handle h = getHandle();  List<Map<String, Object>> result = h.createQuery(sql).list(); for (Map<String, Object> r : result) { Long objId = (Long) r.get(""v_in"");  sql = String.format(""select * from work where id = %s"", objId); Node node = h.createQuery(sql).map(Node.class).first(); if (node != null) { taggedObjs.add(node); } }  return taggedObjs; } "	0	1	0	1	1	0
"public static void afficheMenu() { if(language == 1) { System.out.println(""#### PROFIL -"" + name + "" ####""); System.out.println(playerOne.toString() + ""\n""); System.out.println(""1. Tableau des scores general""); System.out.println(""2. Score Pendu""); System.out.println(""3. Score PlusMoins""); System.out.println(""4. Score MasterMind""); System.out.println(""5. Configuration""); System.out.println(""6. Changer d'utilisateur""); System.out.println(""\n7. Quitter""); }else if(language == 2) { System.out.println(""#### PROFILE -"" + name + "" ####""); System.out.println(playerOne.toString() + ""\n""); System.out.println(""1. General HighScore""); System.out.println(""2. Hangman Score""); System.out.println(""3. HighLow Score""); System.out.println(""4. MasterMind Score""); System.out.println(""6. Change user""); System.out.println(""\n7. Quit""); } System.out.println(); } "	0	0	0	1	1	0
"@Test public void testTriggersFired() throws Exception {  long baseFireTime = DateBuilder.newDate().build().getTime();  JobDetail newJob = JobBuilder.newJob(NoOpJob.class).withIdentity(""job1"", ""testTriggersFired"").build(); jobStore.storeJob(newJob, false);  OperableTrigger trigger1 = buildAndComputeTrigger(""triggerFired1"", ""triggerFiredGroup"", newJob, baseFireTime + 100, baseFireTime + 100);  jobStore.storeTrigger(trigger1, false);  long firstFireTime = new Date(trigger1.getNextFireTime().getTime()).getTime();  List<OperableTrigger> acquiredTriggers = jobStore.acquireNextTriggers(firstFireTime + 500, 1, 0L); assertEquals(1, acquiredTriggers.size());  List<TriggerFiredResult> triggerFired = jobStore.triggersFired(acquiredTriggers); assertEquals(triggerFired.size(), 1);  assertTrue(jobStore.checkExists(trigger1.getKey())); assertEquals(jobStore.getTriggerState(trigger1.getKey()), Trigger.TriggerState.NORMAL); jobStore.removeTrigger(trigger1.getKey()); } "	0	0	0	1	1	0
"@Test() public void testPauseJobGroupPausesNewJob() throws Exception {  final String jobGroup = ""PauseJobGroupPausesNewJobGroup"";  JobDetail job1 = buildJob(""PauseJobGroupPausesNewJob"", jobGroup); jobStore.storeJob(job1, false); jobStore.pauseJobs(GroupMatcher.jobGroupEquals(jobGroup));  JobDetail job2 = buildJob(""PauseJobGroupPausesNewJob2"", jobGroup); jobStore.storeJob(job2, false);  OperableTrigger tr = buildTrigger( ""PauseJobGroupPausesNewJobTrigger"", ""PauseJobGroupPausesNewJobTriggerGroup"", job2, new Date().getTime());  jobStore.storeTrigger(tr, false); assertEquals(Trigger.TriggerState.PAUSED, jobStore.getTriggerState(tr.getKey())); } "	0	1	0	1	1	0
"public static String asDqlValue(Object value) { String dqlValue = null; try { Class<?> rawClass = value.getClass(); if (Collection.class.isAssignableFrom(rawClass)) { throw new IllegalAccessException(Message.E_COLLECTION_FIELD.get()); } if (value != null) { if (rawClass.isAssignableFrom(boolean.class)) { dqlValue = Boolean.class.cast(value).booleanValue() ? ""T"" : ""F""; } else if (rawClass.isAssignableFrom(int.class)) { dqlValue = Integer.class.cast(value).toString(); } else if (rawClass.isAssignableFrom(double.class)) { dqlValue = Double.class.cast(value).toString(); } else if (rawClass.isAssignableFrom(Date.class)) { String stringDate = dqlDateFmt.format(Date.class.cast(value)); dqlValue = ""DATE('"" + stringDate + ""', 'yyyy/mm/dd hh:mi:ss')""; } else { dqlValue = ""'"" + dqlEscaper.escape(String.class.cast(value).toString()) + ""'""; } } //		} catch (ClassCastException e) { } catch (IllegalAccessException e) { throw new IllegalStateException(e); } return dqlValue; } "	0	1	0	1	1	0
"private void validateIndex (int index) { if (index < 0 || index > Constants.NUMBER_OF_CARDS-1) { throw new IllegalStateException(""Tried to use an out of range index in a hand.""); } } "	0	0	0	1	1	0
"public Pattern getReleaseGroupPattern(boolean strict) throws Exception { // match 1..N group patterns (e.g. GROUP[INDEX]) String group = ""((?<!\\p{Alnum})"" + or(releaseGroup.get()) + ""(?!\\p{Alnum})[\\p{Punct}]?)+"";  // group pattern at beginning or ending of the string String[] groupHeadTail = { ""(?<=^[\\P{Alnum}]*)"" + group, group + ""(?=[\\P{Alnum}]*$)"" };  return compile(or(groupHeadTail), strict ? 0 : CASE_INSENSITIVE); } "	0	0	0	1	1	0
"public static String durationToFormattedTime(double seconds) { return String.format(IbikeApplication.getString(""hour_minute_format""), (int)(seconds/60/60), (int)(seconds % 60)); } "	0	0	0	1	1	0
"public void pushChunk(int chunk, RConnection connection, String parName, ExecutionMonitor subExec) throws CanceledExecutionException, RserveException {  // create a new RList with a column vectors of this chunk RList rList = new RList(this.m_numRows, true); List<RDataColumn> columns = m_columnChunks.get(chunk); for(RDataColumn col : columns) { String colName = col.getName(); rList.put(colName, col.getREXPData()); }  // chunk name String chunkName = parName + ""_chunk_"" + chunk; m_chunkNames.add(chunkName);  subExec.checkCanceled(); subExec.setMessage(""transfer chunk "" + chunk + "" to R (cannot be cancelled)"");  // assign data to variable in R logger.debug(""transfer chunk "" + chunkName + "" to R""); connection.assign(chunkName, new REXPGenericVector(rList)); } "	0	0	0	1	1	0
"@Test public void Move() throws Exception { Move m = new Move(pl, new Player(""hallo""), new Cordinate(2, 2)); assertNotNull(m); } "	0	0	0	1	1	0
private void writeUnary(Unary unary, Tokens.UnaryOp op) { writeLeftParentheses(unary);  output.append(op.toString()); unary.getArgument().accept(this, null);  writeRightParentheses(unary); } 	0	0	0	1	1	0
"private void listOptions(TextChannel channel) { Poll poll = manager.getPollFromGuild(channel.getGuild()); EmbedBuilder builder = new EmbedBuilder().setTitle(""Options"", null).setDescription(""Options for `"" + poll.getPollOptions() + ""`""); poll.getPollOptions().forEach(option -> builder.addField(""Option "" + (poll.getPollOptions().indexOf(option) + 1), option.getOption() + ""\nVotes: "" + option.getVotes(), true)); channel.sendMessage(builder.build()).queue(); } "	0	0	0	1	1	0
"@Test public void testEndPointWithMultipleParameters() { Endpoint endPoint = new Endpoint(""transmissions""); endPoint.addParam(""num_rcpt_errors"", 3); endPoint.addParam(""myBool"", new Boolean(false)); endPoint.addParam(""MyInteger"", new Integer(0));  String result = endPoint.toString(); Assert.assertEquals(""transmissions?num_rcpt_errors=3&myBool=false&MyInteger=0"", result); } "	0	0	0	1	1	0
"public PlatformMode resolvePlatformMode(PlatformMode mode, Logger log) { PlatformMode resolvedMode; if (mode == null) { mode = PlatformMode.DEFAULT; } if (mode.isAuto()) { resolvedMode = isOpenShift(log) ? PlatformMode.openshift : PlatformMode.kubernetes; } else { resolvedMode = mode; } log.info(""Running in [[*]]%s[[*]] mode"", resolvedMode.getLabel()); return resolvedMode; } "	0	0	0	1	1	0
@Test public void latestLogFileContainingMultipleCheckPointsOneStartInBetween() throws Throwable { // given LatestCheckPointFinder finder = new LatestCheckPointFinder( logFiles, fs, reader ); LogEntryStart start = new LogEntryStart( 0, 0, 0, 0, new byte[0], new LogPosition( logVersion, 22 ) ); CheckPoint checkPoint = new CheckPoint( new LogPosition( logVersion, 33 ) );  when( reader.readLogEntry( any( ReadableVersionableLogChannel.class ) ) ).thenReturn( mock( CheckPoint.class ), start, checkPoint, null );  // when LatestCheckPoint latestCheckPoint = finder.find( logVersion );  // then assertEquals( new LatestCheckPoint( checkPoint, false, olderLogVersion ), latestCheckPoint ); } 	0	0	0	1	1	0
"protected void init() { topology = new TopologyImpl(); deviceManager = new DeviceManagerImpl(); storageSource = new MemoryStorageSource(); learningSwitch = new LearningSwitch(); counterStore = new CounterStore(); messageFilterManager = new OFMessageFilterManager(); pktinProcTime = new PktinProcessingTime();  topology.setFloodlightProvider(this); topology.setStorageSource(storageSource);  deviceManager.setFloodlightProvider(this); deviceManager.setStorageSource(storageSource); deviceManager.setTopology(topology);  messageFilterManager.init(this);  staticFlowEntryPusher = new StaticFlowEntryPusher(); staticFlowEntryPusher.setFloodlightProvider(this);  learningSwitch.setFloodlightProvider(this); learningSwitch.setCounterStore(counterStore);  // call this explicitly because it does setup this.setStorageSource(storageSource);  HashSet<ITopologyAware> topologyAware = new HashSet<ITopologyAware>(); topologyAware.add(deviceManager); topology.setTopologyAware(topologyAware);  restlets.add(new CoreWebRoutable()); restlets.add(new StorageWebRoutable()); JacksonCustomConverter.replaceConverter();  // Processing Time Warning Threshold ptWarningThresholdInNano = Long.parseLong(System.getProperty(""net.floodlightcontroller.core.PTWarningThreholdInMilli"", ""0"")) * 1000000; if (ptWarningThresholdInNano > 0) { log.info(""Packet processing time threshold for warning set to {} ms."", ptWarningThresholdInNano/1000000); } } "	0	0	0	1	1	0
"@Test public void loadCPI_2016_12_COICOIP_v3() throws Exception {  running(fakeApplication(), () -> {  EntityTransaction tx = em.getTransaction(); tx.begin(); try { postgresTest.loadStandingData(em, Arrays.asList(TIME, COICOP)); postgresTest.loadEachLineInV3File(em, ""CPI_2016_12_COICOP_v3.csv"", postgresTest.createEmptyDataset(em, datasetId.toString(), ""dataset""));  List<DimensionValue> dimensionValues= em.createQuery(""SELECT dim from DimensionValue dim where dim.dimensionalDataSetId = :datasetId"") .setParameter(""datasetId"", datasetId) .getResultList();  assertEquals(dimensionValues.size(), 138);  } catch (Exception e) { e.printStackTrace(); fail(); } finally { tx.rollback(); } }); } "	0	0	0	1	1	0
"private void resetPanels(Editor editor) { String s = ""menu ... # 20s . : ; , e d r z Z q t f w x i E Q P R W T o ^d ^p a A ^t D F p ^x ^e ^f ^g ^i ^o ^v ^w ?""; editor.putBoolean(""pPortActive0"", true); editor.putBoolean(""pLandActive0"", true); editor.putString(""pCmdString0"", s); editor.putString(""pPortLoc0"", ""3""); editor.putString(""pLandLoc0"", ""3"");  for(int iPanel = 1; iPanel < 6; iPanel++) { String idx = Integer.toString(iPanel); editor.putBoolean(""pPortActive"" + idx, false); editor.putBoolean(""pLandActive"" + idx, false); } } "	0	0	0	1	1	0
"private void sendTimeAdjust(ChannelHandlerContext ctx) throws Exception { long abs = Math.abs(timeAdjust); if (abs > 65536) { throw new TransmitterException(""Time difference too large.""); }  String sign = ""+""; if (timeAdjust < 0) { sign = ""-""; }  String msg = String.format(""%d:%s:%04x\r\n"", PagingMessageType.SYNCORDER.getValue(), sign, abs); ctx.writeAndFlush(msg);  state = SyncState.READ_TIME_ADJUST_ACK; } "	0	0	0	1	1	0
"@Test public void testReceiveCommandMessage() { System.out.println(""receiveCommandMessage""); Session client = mock(Session.class); String[] parameterNames = new String[]{""\""a\"""", ""\""b\"""", ""\""c\""""}; String[] parameters = new String[]{""\""toto\"""", ""5"", ""true""}; String json = String.format(""{\""%s\"":\""%s\"",\""%s\"":\""%s\"",\""%s\"":\""%s\"",\""%s\"":%s,\""%s\"":%s}"", Constants.Message.ID, ""111"", Constants.Message.DATASERVICE, ""ClassName"", Constants.Message.OPERATION, ""methodName"", Constants.Message.ARGUMENTNAMES, Arrays.toString(parameterNames), Constants.Message.ARGUMENTS, Arrays.toString(parameters));  instance.receiveCommandMessage(client, json);  ArgumentCaptor<MessageFromClient> captureMsg = ArgumentCaptor.forClass(MessageFromClient.class); ArgumentCaptor<Session> captureSession = ArgumentCaptor.forClass(Session.class); verify(callServiceManager, times(1)).sendMessageToClient(captureMsg.capture(), captureSession.capture());  MessageFromClient result = captureMsg.getValue(); assertThat(result.getId()).isEqualTo(""111""); assertThat(result.getDataService()).isEqualTo(""ClassName""); assertThat(result.getOperation()).isEqualTo(""methodName""); assertThat(result.getParameterNames()).containsExactly(""\""a\"""", ""\""b\"""", ""\""c\""""); assertThat(result.getParameters()).containsExactly(""\""toto\"""", ""5"", ""true""); } "	0	0	0	1	1	0
"private void draw() { back.erase(); front.erase(); for (int x = 0; x < width; x++) { for (int y = 0; y < height; y++) { back.put(x, y, SColorFactory.fromPallet(""floor"", ((float) map[x][y] / weight) / 2)); } } back.refresh();  if (path == null) { System.out.println(""No path found.""); } else { float grade = 0; float splitSize = 1f / (path.size() + 2); front.put(start.x, start.y, 'X', SColorFactory.fromPallet(""path"", grade)); grade += splitSize; for (Point p : path) { front.put(p.x, p.y, 'X', SColorFactory.fromPallet(""path"", grade)); grade += splitSize; } front.put(target.x, target.y, 'X', SColorFactory.fromPallet(""path"", grade)); } front.refresh(); } "	0	1	0	1	1	0
"private boolean onFABLongClick() {  mProgressView.setVisibility(View.VISIBLE);  ILCRoomObjManager roomInf = new ILCRoomObjManager(this.getContext()); ArrayList<DataObject> result = new ArrayList<DataObject>(); ArrayList<DatabaseRow> data = roomInf.getTable();  Calendar cal = Calendar.getInstance();  try { if (data != null && data.size() > 0) {  showProgress(true); mProgressView.setVisibility(View.VISIBLE);  for (DatabaseRow row : data) { getDibsRoomInfo dibs = new getDibsRoomInfo(this.getContext()); ILCRoomObj room = (ILCRoomObj) row; roomAvaliabiliy = dibs.execute(room.getRoomId(), cal.get(Calendar.DAY_OF_MONTH), cal.get(Calendar.MONTH), cal.get(Calendar.YEAR)).get(); int status = getDayAvaliability(); if (status == 0) { result.add(new DataObject(room.getName(), ""Is Avaliable Now"", room.getRoomId(), true, """", room.getDescription())); } else if (status == 2) result.add(new DataObject(room.getName(), ""Is Avaliable at "" + cal.get(Calendar.HOUR) + "":30"", room.getRoomId(), true, """", room.getDescription())); else if (status == 4) result.add(new DataObject(room.getName(), ""Is Avaliable Until "" + cal.get(Calendar.HOUR) + "":30"", room.getRoomId(), true, """", room.getDescription())); else if (status == 3) result.add(new DataObject(room.getName(), ""Is Avaliable Until"" + (cal.get(Calendar.HOUR) + 1) + "":30"", room.getRoomId(), true, """", room.getDescription())); } }  } catch (InterruptedException e) { e.printStackTrace(); return false; } catch (ExecutionException e) { e.printStackTrace(); return false; }   showProgress(false);  mAdapter = new SectionedRecyclerView(result); mRecyclerView.setAdapter(mAdapter);  return true; } "	0	1	0	1	1	0
public static List<String> decolorize(List<String> colored) { if (colored == null) return null; List<String> decolored = new ArrayList<String>(colored.size()); for (String string : decolored) { decolored.add(Utils.translateColorCodesToAlternative('&', string)); } return decolored; } 	0	0	0	1	1	0
"@Test public void should_generate_table_with_several_styles() { table = new HtmlTable(""tableId"", request, response); table.getTableConfiguration().addCssStyle(""border:1px""); table.getTableConfiguration().addCssStyle(""align:center""); assertThat(table.toHtml().toString()).isEqualTo(""<table id=\""tableId\"" style=\""border:1px;align:center\""><thead></thead><tbody></tbody></table>""); } "	0	0	0	1	1	0
"@Test public void should_generate_table_with_one_style() { table = new HtmlTable(""tableId"", request, response); table.getTableConfiguration().addCssStyle(""border:1px""); assertThat(table.toHtml().toString()).isEqualTo(""<table id=\""tableId\"" style=\""border:1px\""><thead></thead><tbody></tbody></table>""); } "	0	0	0	1	1	0
"@Override public String getCommand(Template t) throws Exception { Template.Parameter[] params = new Template.Parameter[2 + attachments.length]; params[0] = new Template.ResourceParameter(inspector); params[1] = body; int i = 2; for (Artifact a : attachments) { params[i++] = StringParameter.class.cast(a.getName()); // the artifact name, intended to be the artifact destination params[i++] = a.getContent(); // the artifact hash }  StringBuilder sb = new StringBuilder(); sb.append(getSetID()); sb.append("" inspect""); for (Parameter p : params) { String v = p.getValue(t); if (v.length() > 0) { sb.append("" ""); sb.append(v); } }  return sb.toString(); } "	0	0	0	1	1	0
"public void cancelOrder(int orderId) throws HibernateException { if (orderId <= 0) { throw new HibernateException(""Invalid orderId"" + orderId); } Transaction transaction = null; Session session = null; try { session = sessionFactory.openSession(); transaction = session.beginTransaction(); OrderDAO orderDAO = new OrderDAOImpl(session); Order order = orderDAO.getById(orderId); if(order == null){ throw new HibernateException(""order not avilable "" + orderId); } //TODO::check whether the operation allowed wrt Timestamps //Check if order is in CANCELLable state if(order.getStatus() < OrderStatusEnum.CANCELLED.getValue()){ order.setStatus(OrderStatusEnum.CANCELLED.getValue()); orderDAO.update(order); transaction.commit(); log.info(""cancel of order was succesfull"" + orderId);  } else if(order.getStatus() == OrderStatusEnum.CANCELLED.getValue()){ log.info(""The order was already cancelled !""); } else{ throw new Exception(""The status cannot be cancelled noat this stage. It can be cancelled only before READY State""); }  } catch (Exception ex) {  try { if(transaction == null){ throw new HibernateException(""Transaction could not be completed "" + ex.getMessage(), ex); } transaction.rollback(); throw new HibernateException( ""Transaction could not be completed will be rollbacked: "" + ex.getMessage(), ex); } catch (RuntimeException rbe) { throw new HibernateException( ""Transaction could not be completed and rollback failed: "" + ex.getMessage(), ex); } } finally { if (session != null) { session.close(); } } } "	0	0	0	1	1	0
"public static List<Pet.PetSpecies> getPetSpecies() { EntityManager entityManager = HibernateUtil.getEntityManagerFactory().createEntityManager(); List<Pet.PetSpecies> options = entityManager.createQuery(""from PetSpecies"").getResultList(); entityManager.close(); return options; } "	0	1	0	1	1	0
"public static Date StrToStartDate(String str) {  SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd""); Date date = null; try { date = format.parse(str); } catch (Exception e) { log.error(e.getMessage()); date = StrToEndDate(""2006-08-01""); } return date; } "	0	0	0	1	1	0
public static <T extends Persistable> void setSelection(Spinner spinner, T selection) {  if (selection == null) { spinner.setSelection(0); } else { spinner.setSelection(((ArrayAdapter) spinner.getAdapter()).getPosition(selection)); } } 	0	0	0	1	1	0
"@Test public void testTheRivardReport() throws Exception { // http://therivardreport.com/san-antonio-space-scientists-prepare-for-jupiter-contact-1/ JResult res = new JResult(); res.setUrl(""http://therivardreport.com/san-antonio-space-scientists-prepare-for-jupiter-contact-1/""); res = extractor.extractContent(res, c.streamToString(getClass().getResourceAsStream(""therivardreport.html""))); assertEquals(""https://therivardreport.com/san-antonio-space-scientists-prepare-for-jupiter-contact-1/"", res.getCanonicalUrl()); assertEquals(""San Antonio Space Scientists Prepare for Jupiter ContactRivard Report"", res.getTitle()); assertTrue(res.getText(), res.getText().startsWith(""As the countdown began on Aug. 5, 2011 at the Kennedy Space Center in Florida,"")); assertTrue(res.getText(), res.getText().endsWith(""Artistic depiction of Juno. Photo courtesy of NASA."")); assertEquals(""Cherise Rohr-Allegrini"", res.getAuthorName()); assertEquals(""https://therivardreport.com/author/cherise-rohr-allegrini/"", res.getAuthorDescription()); compareDates(""2016-07-02 05:01:58"", res.getDate()); } "	0	0	0	1	1	0
"@Test @Sql(scripts = ""classpath:populateDB.sql"") public void testGetAllFriends() { //Assert.assertTrue(""fail"",!service.getAllFriends().isEmpty()); Assert.assertTrue(""fail"",service.getAllFriends().size()==3); //size-> to megethos ts listas } "	0	0	0	1	1	0
"@SuppressWarnings(""UnusedDeclaration"") public Subscription[] getJMSSubscriptionsForTopic(String topic) throws EventAdminException { EventBroker eventBroker = EventAdminHolder.getInstance().getEventBroker(); try { return adaptSubscriptions(eventBroker.getTopicManager().getJMSSubscriptions(topic)); } catch (EventBrokerException e) { log.error(e.getMessage(), e); throw new EventAdminException(""Cannot get the jms subscriptions"", e); } } "	0	0	0	1	1	0
"private JMeterResult executeMe() throws AutomationFrameworkException {  try { addLogFile(testFile.getName()); } catch (IOException e) { throw new AutomationFrameworkException(""Can't add log file"", e); } Boolean resultState = true; JMeterResult results;  String resultFile = executeTest(testFile); try { // Force shutdown StandardJMeterEngine.stopEngineNow(); ShutdownClient.main(new String[]{""Shutdown""});  } catch (IOException ex) { log.error(ex); resultState = false; } results = resultValidator(resultFile); results.setFileName(resultFile); results.setExecutionState(resultState);  return results; } "	0	0	0	1	1	0
"public void testAnalyzer2() { String str =""необходимость вести борьбу""; List<Euristic> euristics = getFullRulesList(); euristics.addAll(getRulesList30()); euristics.addAll(getRulesList31()); euristics.addAll(getRulesList32()); euristics.addAll(getRulesList33()); euristics.addAll(getRulesList34()); euristics.addAll(getRulesList35()); EuristicAnalyzingParser euristicAnalyzingParser = configureDefaultAnalyzer(euristics); euristicAnalyzingParser.process(getWordFormTokens(str)); List<List<IToken>> possibleChains = euristicAnalyzingParser.getPossibleChains(); printProcessingResult(str, possibleChains); } "	0	0	0	1	1	0
public void actionPerformed(ActionEvent evt){ clockTick = 0; clockTime = ((double)clockTick)/10.0; timeString = new Double(clockTime).toString(); displayTime.setText(timeString); } 	0	1	0	1	1	0
"@Override public void collect(Tuple3<Long, String, String> record) { assertTrue(record._1()==input._1); assertEquals(input._2, record._2()); assertEquals(""Peter Tosh"", record._3()); } "	0	0	0	1	1	0
"@Override public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor returnCursor; switch (sUriMatcher.match(uri)) { case MESSAGES_WITH_PARTNER: returnCursor = getMessagesWithPartner(uri, projection, sortOrder); break; case PARTNERS: returnCursor = mChatDbHelper.getReadableDatabase().query( PartnerEntry.TABLE_NAME, projection, selection, selectionArgs, null, null, sortOrder ); break; case PARTNER: returnCursor = getPartnerByUuid(uri, projection, sortOrder); break; case PEOPLE_NEARBY: returnCursor = mChatDbHelper.getReadableDatabase().query( PeopleNearbyEntry.TABLE_NAME, projection, selection, selectionArgs, null, null, sortOrder ); break; default: throw new UnsupportedOperationException(""Unknown uri: "" + uri); }  returnCursor.setNotificationUri(getContext().getContentResolver(), uri); return returnCursor; } "	0	0	0	1	1	0
"@Override public WebElement findElement(WebDriver browser, PageElement item, String tagName) throws NoSuchElementException { // fail fast, the child element will handle the timing WebElement relativeElement = followingSibling.getElement(browser, 0); return relativeElement.findElement(By.xpath(""preceding-sibling::"" + tagName)); } "	0	1	0	1	1	0
"public String toJson(int indent){ return Util.repeat("" "", indent) + ""{ "" + ""\""role\"" : "" + getRoleJson() + "", "" + ""\""conference\"" : "" + conferenceInstance.toJson() + "" },""; } "	0	0	0	1	1	0
"@Override protected String getJsonBody() { String json = JsonUtil.getJsonBody(addMember); // replace second query field json = json.replaceAll(""\""userId\"":[\""]{0,1}(\\w+(\\s+\\w+)*)[\""]{0,1}[,]{0,1}"", """"); return json; } "	0	0	0	1	1	0
"private boolean setTimer() { if (edtTimerValue.getText().toString().trim().equals("""")) { new SweetAlertDialog(mContext, SweetAlertDialog.WARNING_TYPE) .setTitleText(""Notice"") .setContentText(""Please Enter a Time"") .setConfirmText(""OK"") .show(); return false; } else if (Integer.parseInt(edtTimerValue.getText().toString().trim()) < 5 ){ new SweetAlertDialog(mContext, SweetAlertDialog.WARNING_TYPE) .setTitleText(""Notice"") .setContentText(""Please Make Sure Time Is Longer Than 5 Min."") .setConfirmText(""OK"") .show(); return false; } else if (Integer.parseInt(edtTimerValue.getText().toString().trim()) > 60) { new SweetAlertDialog(mContext, SweetAlertDialog.WARNING_TYPE) .setTitleText(""Notice"") .setContentText(""Please Make Sure Time Is Shorter Than 30 Min"") .setConfirmText(""OK"") .show(); return false; } else { totalTimeCountInMilliseconds = Integer.parseInt(edtTimerValue.getText().toString().trim()) * 1000; cusTime = edtTimerValue.getText().toString().trim(); return true; } } "	0	1	0	1	1	0
"private Map<Object, Object> getExpectedMap() { Map<Object, Object> map = new HashMap<>(); map.put(""externalId"", 123456789); map.put(""startDate"", new LocalDate(2012, 11, 20)); map.put(""key1"", ""value""); map.put(""event name"", 6789);  return map; } "	0	0	0	1	1	0
"public final void generate() throws Exception { log.info(f(""Running %s"", getClass().getSimpleName())); for (BaseNodeMetaModel nodeMetaModel : JavaParserMetaModel.getNodeMetaModels()) { CompilationUnit nodeCu = sourceRoot.parse(nodeMetaModel.getPackageName(), nodeMetaModel.getTypeName() + "".java"", javaParser).orElseThrow(() -> new IOException(f(""java file for %s not found"", nodeMetaModel.getTypeName()))); ClassOrInterfaceDeclaration nodeCoid = nodeCu.getClassByName(nodeMetaModel.getTypeName()).orElseThrow(() -> new IOException(""Can't find class"")); generateNode(nodeMetaModel, nodeCu, nodeCoid); } after(); } "	0	0	0	1	1	0
"@Test public void shouldMapCodedConceptValues() throws ParseException { DiseaseSummaryObsMapper diseaseSummaryObsMapper = new DiseaseSummaryObsMapper(); List<BahmniObservation> bahmniObservations =  new ArrayList<>();  Date visit1 = simpleDateFormat.parse(date1); bahmniObservations.add(createBahmniObservation(visit1,simpleDateTimeFormat.parse(date1 +"" 12:30""),""Pulse"",new EncounterTransaction.Concept(""uuid-pulse"",""very high pulse"")));  Map<String, Map<String, ConceptValue>> obsTable = diseaseSummaryObsMapper.map(bahmniObservations, DiseaseSummaryConstants.RESULT_TABLE_GROUP_BY_VISITS);  Map<String, ConceptValue> dayValue = obsTable.get(frameDiseaseSummaryMapKey(visit1)); assertEquals(1, dayValue.size()); assertEquals(""very high pulse"", dayValue.get(""Pulse"").getValue());  } "	0	0	0	1	1	0
"public boolean somethingSelected(Element element, boolean print) { element.setDriver(driver); boolean isSelected = false; if (elementInput(element, false)) { WebElement webElement = element.getWebElement(); if (""input"".equalsIgnoreCase(webElement.getTagName())) { isSelected = webElement.isSelected(); } else if (""select"".equalsIgnoreCase(webElement.getTagName())) { Select dropdown = new Select(webElement); isSelected = dropdown.getAllSelectedOptions().size() > 0; } } if (print) { file.recordExpected(CHECKING + element.prettyOutput() + SELECTED); } return isSelected; } "	0	0	0	1	1	0
@Test public void slice() throws Exception { //Create a CSG to slice CSG sliced = new Cube(10, 10, 10).toCSG().union(new Sphere(5).toCSG());  //Get a slice List<Vector3d> points = Slice.slice(sliced, new Transform(), 0);  //Construct a Polygon from that slice Polygon polygon = Polygon.fromPoints(points);  //Collect that Polygon into a List List<Polygon> polygons = new ArrayList<>(); polygons.add(polygon);  //Construct a CSG from that Polygon List CSG finished = CSG.fromPolygons(polygons); } 	0	0	0	1	1	0
"public void playURI(Command command) {  if (command != null && command instanceof StringType) {  try { String url = command.toString();  ZonePlayerHandler coordinator = getCoordinatorHandler();  // stop whatever is currently playing coordinator.stop();  // clear any tracks which are pending in the queue coordinator.removeAllTracksFromQueue();  // add the new track we want to play to the queue // The url will be prefixed with x-file-cifs if it is NOT a http URL if (!url.startsWith(""x-"") && (!url.startsWith(""http""))) { // default to file based url url = ""x-file-cifs:"" + url; } coordinator.addURIToQueue(url, """", 0, true);  // set the current playlist to our new queue coordinator.setCurrentURI(""x-rincon-queue:"" + getUDN() + ""#0"", """");  // take the system off mute coordinator.setMute(OnOffType.OFF);  // start jammin' coordinator.play();  } catch (IllegalStateException e) { logger.warn(""Cannot play URI ({})"", e.getMessage()); } }  } "	0	0	0	1	1	0
"public void testGetShellCommandLineNonWindows() throws Exception { Commandline cmd = new Commandline( new BourneShell() ); cmd.setExecutable( ""/usr/bin"" ); cmd.addArguments( new String[] { ""a"", ""b"" } ); String[] shellCommandline = cmd.getShellCommandline();  assertEquals( ""Command line size"", 3, shellCommandline.length );  assertEquals( ""/bin/sh"", shellCommandline[0] ); assertEquals( ""-c"", shellCommandline[1] );  if ( Os.isFamily( Os.FAMILY_WINDOWS ) ) { assertEquals( ""\\usr\\bin a b"", shellCommandline[2] ); } else { assertEquals( ""'/usr/bin' 'a' 'b'"", shellCommandline[2] ); } } "	0	0	0	1	1	0
"private void usage() {  System.out.printf(""java {} -config <properties file>"", Connector.class.toString()); System.exit(-1); } "	0	0	0	1	1	0
"public ArrayList<String> getWordsOfCategory(String category) { String query = ""SELECT * FROM "" + TABLE_WORDS + "" WHERE category LIKE + \""""+category+""\"";""; ArrayList<String> words = new ArrayList<>();  //execute queries. SQLiteDatabase db = this.getWritableDatabase(); Cursor cursor = db.rawQuery(query, null);  //add all words to the list if (cursor != null && cursor.moveToFirst()) { do { String w = cursor.getString(0); // Add word words.add(w); } while (cursor.moveToNext());  db.close(); cursor.close(); }  return words;  } "	0	0	0	1	1	0
"public static URelations advSitToUD(Node aNode) throws XPathExpressionException { String tag = Utils.getTag(aNode);  if (tag.matches(""n.*|xn.*"")) return URelations.NMOD; if (tag.matches(""r.*"")) return URelations.ADVMOD;  warn(aNode); return URelations.DEP; } "	0	0	0	1	1	0
"@Override public void success(FHResponse fhResponse) { Log.d(TAG, ""cloudCall - success""); button.setEnabled(true); response.setText(fhResponse.getJson().getString(""msg"")); } "	0	1	0	1	1	0
"public static int transformFile(String inputPath, BufferedWriter conllOut) throws Exception { int omited = 0; NodeList pmlTrees = PmlLoader.getTrees(inputPath); System.out.printf(""%s trees found...\t"", pmlTrees.getLength()); for (int i = 0; i < pmlTrees.getLength(); i++) { String conllTree = SentenceTransformator.treeToConll(pmlTrees.item(i)); if (conllTree != null) conllOut.write(conllTree); else omited++; } System.out.println(""Finished.""); return omited; } "	0	0	0	1	1	0
@Hide(OS.NT) public static void chown(PyObject path, int uid, int gid) { if (posix.chown(absolutePath(path), uid, gid) < 0) { throw errorFromErrno(path); } } 	0	0	0	1	1	0
"public static Optional<Deadline> parseDeadline(Optional<String> deadline) throws IllegalValueException { assert deadline != null; if (deadline.get().equals("""")) { return deadline.isPresent() ? Optional.of(new Deadline("""")) : Optional.empty(); } Parser parser = new Parser(); String fromDate = new String(""""); String fromTime = null; String toDate = new String(""""); String toTime = null; if (deadline.isPresent()) { String deadlineString = deadline.toString(); List <DateGroup> groups = parser.parse(deadlineString); List dates = null; int line; int column; String matchingValue; String syntaxTree; Map parseMap; boolean isRecurring; Date recursUntil;  for (DateGroup group: groups) { dates = group.getDates(); line = group.getLine(); column = group.getPosition(); matchingValue = group.getText(); syntaxTree = group.getSyntaxTree().toStringTree(); parseMap = group.getParseLocations(); isRecurring = group.isRecurring(); recursUntil = group.getRecursUntil(); }  if (dates != null) { fromDate = dates.get(0).toString(); fromTime = getTime(fromDate); if (dates.size() != 1) { toDate = dates.get(1).toString(); toTime = getTime(toDate); isEvent = true; } } StringTokenizer st = new StringTokenizer(fromDate); List<String> listDeadline = new ArrayList<String>(); while (st.hasMoreTokens()) { listDeadline.add(st.nextToken()); } List<String> endOfEvent = new ArrayList<String>(); if (isEvent) { st = new StringTokenizer(toDate); while (st.hasMoreTokens()) { endOfEvent.add(st.nextToken()); } } StringBuilder deadlineStringBuilder = new StringBuilder(); deadlineStringBuilder.append(listDeadline.get(2) + ""-"" + listDeadline.get(1) + ""-"" + listDeadline.get(5) + "" @ "" + fromTime); if (isEvent) { deadlineStringBuilder.append("" to "" + endOfEvent.get(2) + ""-"" + endOfEvent.get(1) + ""-"" + endOfEvent.get(5) + "" @ "" + toTime); } fromDate = deadlineStringBuilder.toString(); } return deadline.isPresent() ? Optional.of(new Deadline(fromDate)) : Optional.empty(); } "	0	0	0	1	1	0
"public ImmutableList<LocalDate> createUnadjustedDates() { List<LocalDate> unadj = generateUnadjustedDates(); // ensure schedule is valid with no duplicated dates ImmutableList<LocalDate> deduplicated = ImmutableSet.copyOf(unadj).asList(); if (deduplicated.size() < unadj.size()) { throw new ScheduleException(this, ""Schedule calculation resulted in duplicate unadjusted dates: {}"", unadj); } return deduplicated; } "	0	0	0	1	1	0
"@SuppressWarnings(""try"") private Collection<T> startTrace(T block, int traceNumber) { ArrayDeque<T> trace = new ArrayDeque<>(); try (Indent i = Debug.logAndIndent(""StartTrace: "" + block)) { try (Indent indentFront = Debug.logAndIndent(""Head:"")) { for (T currentBlock = block; currentBlock != null; currentBlock = selectPredecessor(currentBlock)) { addBlockToTrace(currentBlock, traceNumber); trace.addFirst(currentBlock); } } /* Number head blocks. Can not do this in the loop as we go backwards. */ int blockNr = 0; for (T b : trace) { b.setLinearScanNumber(blockNr++); }  try (Indent indentBack = Debug.logAndIndent(""Tail:"")) { for (T currentBlock = selectSuccessor(block); currentBlock != null; currentBlock = selectSuccessor(currentBlock)) { addBlockToTrace(currentBlock, traceNumber); trace.addLast(currentBlock); /* This time we can number the blocks immediately as we go forwards. */ currentBlock.setLinearScanNumber(blockNr++); } } } Debug.log(""Trace: %s"", trace); return trace; } "	0	0	0	1	1	0
"private void addSessionMetrics(List<MetricFamilySamples> mfs) { try { final MBeanServer server = ManagementFactory.getPlatformMBeanServer(); ObjectName filterName = new ObjectName(jmxDomain + "":type=Manager,context=*,host=*""); Set<ObjectInstance> mBeans = server.queryMBeans(filterName, null);  if (mBeans.size() > 0) { List<String> labelNameList = Arrays.asList(""context"", ""host"");  GaugeMetricFamily activeSessionCountGauge = new GaugeMetricFamily( ""tomcat_session_active_total"", ""Number of active sessions"", labelNameList);  GaugeMetricFamily rejectedSessionCountGauge = new GaugeMetricFamily( ""tomcat_session_rejected_total"", ""Number of sessions rejected due to maxActive being reached"", labelNameList);  GaugeMetricFamily createdSessionCountGauge = new GaugeMetricFamily( ""tomcat_session_created_total"", ""Number of sessions created"", labelNameList);  GaugeMetricFamily expiredSessionCountGauge = new GaugeMetricFamily( ""tomcat_session_expired_total"", ""Number of sessions that expired"", labelNameList);  GaugeMetricFamily sessionAvgAliveTimeGauge = new GaugeMetricFamily( ""tomcat_session_alivetime_seconds_avg"", ""Average time an expired session had been alive"", labelNameList);  GaugeMetricFamily sessionMaxAliveTimeGauge = new GaugeMetricFamily( ""tomcat_session_alivetime_seconds_max"", ""Maximum time an expired session had been alive"", labelNameList);  GaugeMetricFamily contextStateGauge = new GaugeMetricFamily( ""tomcat_context_state_started"", ""Indication if the lifecycle state of this context is STARTED"", labelNameList);  for (final ObjectInstance mBean : mBeans) { List<String> labelValueList = Arrays.asList(mBean.getObjectName().getKeyProperty(""host""), mBean.getObjectName().getKeyProperty(""context""));  activeSessionCountGauge.addMetric( labelValueList, ((Integer) server.getAttribute(mBean.getObjectName(), ""activeSessions"")).doubleValue());  rejectedSessionCountGauge.addMetric( labelValueList, ((Integer) server.getAttribute(mBean.getObjectName(), ""rejectedSessions"")).doubleValue());  createdSessionCountGauge.addMetric( labelValueList, ((Long) server.getAttribute(mBean.getObjectName(), ""sessionCounter"")).doubleValue());  expiredSessionCountGauge.addMetric( labelValueList, ((Long) server.getAttribute(mBean.getObjectName(), ""expiredSessions"")).doubleValue());  sessionAvgAliveTimeGauge.addMetric( labelValueList, ((Integer) server.getAttribute(mBean.getObjectName(), ""sessionAverageAliveTime"")).doubleValue());  sessionMaxAliveTimeGauge.addMetric( labelValueList, ((Integer) server.getAttribute(mBean.getObjectName(), ""sessionMaxAliveTime"")).doubleValue());  if (server.getAttribute(mBean.getObjectName(), ""stateName"").equals(""STARTED"")) { contextStateGauge.addMetric(labelValueList, 1.0); } else { contextStateGauge.addMetric(labelValueList, 0.0); } }  mfs.add(activeSessionCountGauge); mfs.add(rejectedSessionCountGauge); mfs.add(createdSessionCountGauge); mfs.add(expiredSessionCountGauge); mfs.add(sessionAvgAliveTimeGauge); mfs.add(sessionMaxAliveTimeGauge); mfs.add(contextStateGauge); } } catch (Exception e) { log.error(""Error retrieving metric."", e); } } "	0	0	0	1	1	0
@Override public void run(IPosition pos) throws ScanningException, InterruptedException { setDeviceState(DeviceState.RUNNING);  final long startTime = System.nanoTime(); final long targetDuration = (long) model.getExposureTime() * 1000000000; // nanoseconds  // Find out where we are in the scan. This is unique to the Mandelbrot // detector as it's a dummy in general a detector shouldn't need to get // the position in the scan final double a = (Double) pos.get(model.getRealAxisName()); final double b = (Double) pos.get(model.getImaginaryAxisName());  // Calculate the data for the image spectrum and total image = calculateJuliaSet(a, b, model.getColumns(), model.getRows()); spectrum = calculateJuliaSetLine(a, b, 0.0, 0.0, model.getMaxRealCoordinate(), model.getPoints()); value = mandelbrot(a, b);  // See if we need to sleep to honour the requested exposure time long currentTime = System.nanoTime(); long duration = currentTime - startTime; if (duration < targetDuration) { long millisToWait = (targetDuration - duration) / 1000000; Thread.sleep(millisToWait); }  // TODO Should device state be set back to ready here? The device has finished acquiring (calculating) but the data is not in the file yet? } 	0	0	0	1	1	0
"public static String getCourtName(int id) { if (id == 1) { return ""Court central""; } else { return ""Court "" + id; } } "	0	0	0	1	1	0
"private synchronized boolean addProvisionedSlave(DockerTemplate t) throws Exception { String ami = t.getDockerTemplateBase().getImage(); int amiCap = t.instanceCap;  int estimatedTotalSlaves = countCurrentDockerSlaves(null); int estimatedAmiSlaves = countCurrentDockerSlaves(ami);  synchronized (provisionedImages) { int currentProvisioning = 0; if (provisionedImages.containsKey(ami)) { currentProvisioning = provisionedImages.get(ami); }  for (int amiCount : provisionedImages.values()) { estimatedTotalSlaves += amiCount; }  estimatedAmiSlaves += currentProvisioning;  if (estimatedTotalSlaves >= getContainerCap()) { LOGGER.info(""Not Provisioning '{}'; Server '{}' full with '{}' container(s)"", ami, getContainerCap(), name); return false;      // maxed out }  if (amiCap != 0 && estimatedAmiSlaves >= amiCap) { LOGGER.info(""Not Provisioning '{}'. Instance limit of '{}' reached on server '{}'"", ami, amiCap, name); return false;      // maxed out }  LOGGER.info(""Provisioning '{}' number '{}' on '{}'; Total containers: '{}'"", ami, estimatedAmiSlaves, name, estimatedTotalSlaves);  provisionedImages.put(ami, currentProvisioning + 1); return true; } } "	0	0	0	1	1	0
@Test(expected = ReflectionException.class) public void shouldNotBeAbleToCreateInstance() { ByteCodeFactory byteCodeFactory = (ByteCodeFactory) InstanceFactory.getInstance(getPojoClass(ByteCodeFactory.class)); } 	0	0	0	1	1	0
public AwsProxyResponse handleRequest(AwsProxyRequest awsProxyRequest, Context context) { if (!isinitialized) { isinitialized = true; try { handler = SpringLambdacontainerHandler.getAwsProxyHandler(PetStoreSpringAppConfig.class); } catch (ContainerInitializationException e) { e.printStackTrace(); return null; } } return handler.proxy(awsProxyRequest, context); } 	0	0	0	1	1	0
"public static void runQuery() throws SQLException { Connection conn = getLocatorConnection(); String query1 = ""SELECT count(*) FROM airline""; ResultSet rs = conn.createStatement().executeQuery(query1); while (rs.next()) { Log.getLogWriter().info(""SS - Qyery executed successfully and query result is ::"" + rs.getLong(1)); } } "	0	0	0	1	1	0
"protected String getLastConsoleAlertMessage() { String msg; LogEntries logEntries = getDriver().manage().logs().get(LogType.BROWSER); List<LogEntry> l = logEntries.getAll(); for (int i = l.size() - 1; i >= 0; i--) { if (l.get(i).getMessage().contains(ALERT_KEY)) { msg = l.get(i).getMessage(); return msg.substring(msg.indexOf(""\"""") + 1, msg.length() - 1).replace(ALERT_KEY, """"); } } return null; } "	0	1	0	1	1	0
"@Override public void run() { Document doc = null; if (this.webpage.getFailureCount() > 0) { // give this page a rest for a bit try { TimeUnit.SECONDS.sleep(this.webpage.getFailureCount()); } catch (InterruptedException e) { e.printStackTrace(); } } try { doc = Jsoup.connect(this.webpage.getUrl().toString()).get(); if (!this.shouldCrawlPage()) { this.webpage.setStatus(200); this.webpage.unlock(); return; } //System.out.println(""\n"" + id + "": Crawling "" + this.name); Elements anchors = doc.select(""a""); ArrayList<URL> unseenLinks = filterUnseen(anchors); //System.out.println(""\n"" + id + "": Found "" + unseenLinks.size() + "" new links on page""); for (URL u : unseenLinks) { if (u != null && !this.pages.containsKey(u)) { if (Main.depth_limit > this.webpage.getDepth()) { WebPage w = new WebPage(this.webpage, u); w.setDepth(this.webpage.getDepth() + 1); this.pages.put(u, w); } } } this.webpage.setStatus(200); } catch (UnsupportedMimeTypeException e) { this.webpage.setStatus(200); } catch (HttpStatusException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(e.getStatusCode()); this.webpage.setFailReason(e.toString()); System.out.println(e.getMessage()); } catch (SocketException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(-1); this.webpage.setFailReason(e.toString()); System.out.println(e.getMessage()); } catch (IOException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(-1); this.webpage.setFailReason(e.toString()); System.out.println(e.getMessage()); } System.out.println(webpage.toString()); this.webpage.unlock(); } "	0	1	0	1	1	0
"@Override public void messageArrived(String topic, MqttMessage message) throws Exception { InfluuntLogger.log(NivelLog.SUPERDETALHADO, TipoLog.COMUNICACAO,""Mensagem recebida no topico:"" +topic); sendToBroker(message); } "	0	0	0	1	0	0
@Test public void shouldEvictOnOverflow() throws Throwable { // When & Then assertThat( appendSequence( 1, 1, 1, 1, 1, 1, 1 ), yieldsSet( 1 )); assertThat( appendSequence( 1, 2, 3, 4, 1, 1, 1 ), yieldsSet( 1, 3, 4 )); assertThat( appendSequence( 1, 2, 6, 4, 1, 2, 2, 2, 5, 5 ), yieldsSet( 1, 2, 5 )); } 	0	0	0	1	0	0
public Set<Type> recentItems() { return index.keySet(); } 	0	0	0	1	0	0
"public void showProjectTimetable(String projectId) { System.out.println(""Wybrano projekt: "" + projectId); this.chosenProject = Integer.valueOf(projectId); System.out.println(""Aby rozpocząć monitorowanie pracy wybierz 1 \n Aby zakończyć działanie aplikacjiwybierz 2""); int userInput = readUserInput(); while (userInput != 1 && userInput != 2) { System.out.println(""Zły wybór - wybierz ponownie""); userInput = readUserInput(); } if(userInput == 1) { timerController = new TimerController(); timerController.startMonitoringTime(); timeIsMonitoring(); } } "	0	0	0	1	0	0
"@Test public void shouldFindApiPageByApiIdAndHomepageTrue() throws Exception { Collection<Page> pages = pageRepository.findApiPageByApiIdAndHomepage(""my-api"", true); assertNotNull(pages); assertEquals(1, pages.size()); assertEquals(""home"", pages.iterator().next().getId()); } "	0	0	0	1	0	0
ArrayList<Integer> calculateValues(int min, int max, int step) {  ArrayList<Integer> result = new ArrayList<>(); int pos = min; while (pos <= max) { result.add(pos); pos += step; }  // Set max Y axis label in case isn't already there if (result.get(result.size() - 1) < max) result.add(max);  return result; } 	0	0	0	1	0	0
"private void captureTable(Table t) throws SQLException, InvalidSchemaError { int i = 0; infoSchemaStmt.setString(1, t.getDatabase()); infoSchemaStmt.setString(2, t.getName()); ResultSet r = infoSchemaStmt.executeQuery();  while(r.next()) { String[] enumValues = null; String colName    = r.getString(""COLUMN_NAME""); String colType    = r.getString(""DATA_TYPE""); String colEnc     = r.getString(""CHARACTER_SET_NAME""); int colPos        = r.getInt(""ORDINAL_POSITION"") - 1; boolean colSigned = !r.getString(""COLUMN_TYPE"").matches("" unsigned$"");  if ( r.getString(""COLUMN_KEY"").equals(""PRI"") ) t.pkIndex = i;  if ( colType.equals(""enum"") || colType.equals(""set"")) { String expandedType = r.getString(""COLUMN_TYPE"");  enumValues = extractEnumValues(expandedType); }  t.addColumn(ColumnDef.build(colName, colEnc, colType, colPos, colSigned, enumValues)); i++; } captureTablePK(t); } "	0	0	0	1	0	0
"public static void openImage(Activity contextActivity, Submission submission) { if (SettingValues.image) { Intent myIntent = new Intent(contextActivity, MediaView.class); String url; String previewUrl; url = submission.getUrl();  if (SettingValues.loadImageLq && ((!NetworkUtil.isConnectedWifi(contextActivity) && SettingValues.lowResMobile) || SettingValues.lowResAlways) && submission.getThumbnails() != null && submission.getThumbnails().getVariations() != null) { int length = submission.getThumbnails().getVariations().length; previewUrl = Html.fromHtml(submission.getThumbnails().getVariations()[length / 2].getUrl()).toString(); //unescape url characters myIntent.putExtra(MediaView.EXTRA_LQ, true); myIntent.putExtra(MediaView.EXTRA_DISPLAY_URL, previewUrl); } else if (submission.getDataNode().has(""preview"") && submission.getDataNode().get(""preview"").get(""images"").get(0).get(""source"").has(""height"")) { //Load the preview image which has probably already been cached in memory instead of the direct link previewUrl = submission.getDataNode().get(""preview"").get(""images"").get(0).get(""source"").get(""url"").asText(); myIntent.putExtra(MediaView.EXTRA_DISPLAY_URL, previewUrl); } myIntent.putExtra(MediaView.EXTRA_URL, url); myIntent.putExtra(MediaView.EXTRA_SHARE_URL, submission.getUrl());  contextActivity.startActivity(myIntent); } else { Reddit.defaultShare(submission.getUrl(), contextActivity); }  } "	0	0	0	1	0	0
"Spanned enrichText(String text) { return Html.fromHtml(text.replaceAll(""\\{(.+)\\}"", ""<font color=#4caf50>$1</font>"")); } "	0	0	0	1	0	0
"@Override public F onCompleted(Response response) throws Exception { try { withCompleteResponse( response, (r) -> { F value = handler.apply(wrap(r)); subject.onNext(value); subject.onCompleted(); }, (ex) -> subject.onError(ex), (ex) -> subject.onError(ex) ); } catch (Throwable t) { //TODO Should this logging not be done in the global onError handler? See Class RxJavaErrorHandler if (t instanceof OnErrorFailedException) { logger.error(""onError handler failed: "" + t.getMessage(), t); } subject.onError(t); } return null; } "	0	0	0	1	0	0
"@Override public String toString() { return String.format(""%s[id=%d, eventScope=%s, parentEventBus=%s]"", getClass().getSimpleName(), System.identityHashCode(this), eventScope, parentEventBus); } "	0	0	0	1	0	0
"private void FileFolderUtil() throws IOException, InvalidPathException, FileDoesNotExistException { FileSystemMaster fsMaster = createFsMasterFromJournal(); long rootId = fsMaster.getFileId(mRootUri); Assert.assertTrue(rootId != -1); Assert.assertEquals(111, fsMaster.getFileInfoList(rootId).size()); for (int i = 0; i < 10; i ++) { for (int j = 0; j < 10; j ++) { Assert.assertTrue(fsMaster.getFileId(new TachyonURI(""/i"" + i + ""/j"" + j)) != -1); } } fsMaster.stop(); } "	0	0	0	1	0	0
"private void updateHeader(int headerPosition, boolean updateHeaderContent) { // Check if there is a new header should be sticky if (mHeaderPosition != headerPosition) { mHeaderPosition = headerPosition; RecyclerView.ViewHolder holder = getHeaderViewHolder(headerPosition); if (mStickyHeaderViewHolder != holder) { if (FlexibleAdapter.DEBUG) Log.d(TAG, ""swapHeader newPosition="" + headerPosition); swapHeader(holder); } } else if (updateHeaderContent && mStickyHeaderViewHolder != null) { mAdapter.onBindViewHolder(mStickyHeaderViewHolder, mHeaderPosition); ensureHeaderParent(); } translateHeader(); } "	0	0	0	1	0	0
public default GraphTraversal<S, E> by() { ((FunctionHolder) this.asAdmin().getEndStep()).addFunction(Function.identity()); return this; } 	0	0	0	1	0	0
"@Override public void handle(KeyEvent event) { logger.info("">> handle()""); logger.log(Level.INFO, ""-- handle() > entered handle with param {0}"", event); if(game.getPaused()) { logger.fine(""-- handle() > Game is paused, no movement.""); logger.info(""<< handle()""); return; } switch (event.getCode()) { case RIGHT: logger.log(Level.INFO, ""-- handle() > setting position from {0} with speed {1}"", new Object[]{protagonist.getX(),speed}); setPosition(protagonist.getX(),speed); break; case LEFT:  logger.log(Level.INFO, ""-- handle() > setting position from {0} with speed {1}"", new Object[]{protagonist.getX(),-speed}); setPosition(protagonist.getX(),-speed); break; case UP:	logger.log(Level.INFO, ""-- handle() > shooting bullet from ({0}, {1})"", new Object[]{protagonist.getX()+15, protagonist.getY()}); new ProtagonistBullet(protagonistTemp, protagonist.getX()+15, protagonist.getY()); break; default:	logger.fine(""-- handle() > Invalid key pressed, returning""); break;	//TODO: Make Exception! } logger.info(""<< handle()""); } "	0	0	0	1	0	0
@Test //    @Ignore public void testGetSolution2() throws InterruptedException { SudokuSolver sudokuSolver = new SudokuSolver(sudokuMatrix4); Assert.assertEquals(11, sudokuSolver.getSolution()); } 	0	0	0	1	0	0
@Test public void testGetSolution() throws InterruptedException { SudokuSolver sudokuSolver = new SudokuSolver(sudokuMatrix3); Assert.assertEquals(15, sudokuSolver.getSolution()); } 	0	0	0	1	0	0
@SafeVarargs public static <T,X extends Throwable> Try<T,X> withCatch(CheckedSupplier<T,X> cf, Class<? extends X>...classes){ try{ return Success.of(cf.get()); }catch(Throwable t){ if(classes.length==0) return Failure.of((X)t); val error = Stream.of(classes).filter(c -> t.getClass().isAssignableFrom(c)).findFirst(); if(error.isPresent()) return Failure.of((X)t); else throw new RuntimeException(t); }  } 	0	0	0	1	0	0
"public void getKingdomFromAPI() { apiService.getKingdom(preferences.getString(USER_ACCESS_TOKEN, """")).enqueue(new Callback<Kingdom>() { @Override public void onResponse(Call<Kingdom> call, Response<Kingdom> response) { if (response.code() == 400) { ((MainActivity) getActivity()).logout(); return; } buildings = response.body().getBuildings(); troops = response.body().getTroops(); resources = response.body().getResources(); if (loadingViewListener != null) { loadingViewListener.loadingFinished(); } }  @Override public void onFailure(Call<Kingdom> call, Throwable t) { } }); } "	0	0	0	1	0	0
"@Transactional public TGreenLeavesWeigh saveSummary(TGreenLeavesWeigh greenLeavesWeighRequest) { //assume that the green leave weigh does not have weigh details System.out.println(""++++++++++++++++++++"" + greenLeavesWeighRequest.getIndexNo()); TGreenLeavesWeigh greenLeavesWeigh; if (greenLeavesWeighRequest.getIndexNo() != null) { greenLeavesWeigh = greenLeavesWeighRepository.getOne(greenLeavesWeighRequest.getIndexNo()); greenLeavesWeigh.setBranch(greenLeavesWeighRequest.getBranch()); greenLeavesWeigh.setDate(greenLeavesWeighRequest.getDate()); greenLeavesWeigh.setRouteOfficer(greenLeavesWeighRequest.getRouteOfficer()); greenLeavesWeigh.setRouteHelper(greenLeavesWeighRequest.getRouteHelper()); greenLeavesWeigh.setVehicle(greenLeavesWeighRequest.getVehicle());  greenLeavesWeigh.setNormalTareCalculated(greenLeavesWeighRequest.getNormalTareCalculated()); greenLeavesWeigh.setNormalGeneralDeductionPercent(greenLeavesWeighRequest.getNormalGeneralDeductionPercent()); greenLeavesWeigh.setNormalTareDeduction(greenLeavesWeighRequest.getNormalTareDeduction()); greenLeavesWeigh.setNormalWaterDeduction(greenLeavesWeighRequest.getNormalWaterDeduction()); greenLeavesWeigh.setNormalCoarseLeaves(greenLeavesWeighRequest.getNormalCoarseLeaves()); greenLeavesWeigh.setNormalBoiledLeaves(greenLeavesWeighRequest.getNormalBoiledLeaves());  greenLeavesWeigh.setSuperTareCalculated(greenLeavesWeighRequest.getSuperTareCalculated()); greenLeavesWeigh.setSuperGeneralDeductionPercent(greenLeavesWeighRequest.getSuperGeneralDeductionPercent()); greenLeavesWeigh.setSuperTareDeduction(greenLeavesWeighRequest.getSuperTareDeduction()); greenLeavesWeigh.setSuperWaterDeduction(greenLeavesWeighRequest.getSuperWaterDeduction()); greenLeavesWeigh.setSuperCoarseLeaves(greenLeavesWeighRequest.getSuperCoarseLeaves()); greenLeavesWeigh.setSuperBoiledLeaves(greenLeavesWeighRequest.getSuperBoiledLeaves());  } else {  //generate new number Integer maxNumber = greenLeavesWeighRepository.getMaximumNumberByBranch(greenLeavesWeighRequest.getBranch()); System.out.println(maxNumber); System.out.println(greenLeavesWeighRequest.getBranch()); if (maxNumber == null) { maxNumber = 0; } greenLeavesWeighRequest.setNumber(maxNumber + 1); System.out.println(greenLeavesWeighRequest.getNumber()); }  greenLeavesWeighRequest.setStatus(PENDING_STATUS); greenLeavesWeigh = validateWeighSummary(greenLeavesWeighRequest);  if (""SUPPLIER"".equals(greenLeavesWeigh.getType())) { greenLeavesWeigh.setRoute(null); }  //TODO:transaction return greenLeavesWeighRepository.save(greenLeavesWeigh); } "	0	0	0	1	0	0
"public static Bucket getExistingBucket(String bucketName) throws IOException, GeneralSecurityException { Storage client = getService(); Storage.Buckets.Get bucketRequest = client.buckets().get(BUCKET_NAME + bucketName); // Fetch the full set of the bucket's properties (e.g. include the ACLs in the response) bucketRequest.setProjection(""full""); try { logger.log(Level.INFO, ""##-- Buscará bucket""); return bucketRequest.execute(); } catch (Exception e) { return null; } } "	0	0	0	1	0	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_workshops); workshopsRv = (RecyclerView) findViewById(R.id.workshops_view); workshopsAdapter = new WorkshopsAdapter(Workshops.this); workshopsRv.setAdapter(workshopsAdapter); bar=(ProgressBar)findViewById(R.id.progress); errorView= (TextView) findViewById(R.id.errorView); if(new Connection(this).isInternet()){ retrofit(); } else { errorView.setVisibility(View.VISIBLE); errorView.setText(""Please Check Your Internet Connection""); bar.setVisibility(View.GONE); }  workshopstb = (Toolbar) findViewById(R.id.workshops_toolbar); workshopstb.setTitle(""Special Event""); setSupportActionBar(workshopstb); getSupportActionBar().setDisplayHomeAsUpEnabled(true);   } "	0	0	0	1	0	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.log_in_activity); Button btnlogin = (Button) findViewById(R.id.btn_login); TextView btnsignup = (TextView) findViewById(R.id.sign_up); final EditText un = (EditText) findViewById(R.id.username); final EditText pwd = (EditText) findViewById(R.id.password);  assert btnsignup != null; btnsignup.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View view){ Intent intent = new Intent(view.getContext(), SignActivity.class); startActivityForResult(intent, 0); } });  logInCRUD = new LogInCRUD(this); logInCRUD = logInCRUD.open();  assert btnlogin != null; btnlogin.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View view){ String pas = pwd.getText().toString(); String uns = un.getText().toString(); String storedPassword = logInCRUD.getSinlgeEntry(uns);  // check if the Stored password matches with  Password entered by user if(pas.equals(storedPassword)) { Toast.makeText(LogInActivity.this, ""Congrats: Login Successfull"", Toast.LENGTH_LONG).show(); Intent intent = new Intent(view.getContext(), MainActivity.class); startActivityForResult(intent, 0); } else { Toast.makeText(LogInActivity.this, ""User Name or Password does not match""+storedPassword, Toast.LENGTH_LONG).show(); } } }); } "	0	0	0	1	0	0
"@Test public void reactsOnRemoteChanges() throws Exception { navigation.navigate(""folderName"").files.remove(subSubFile); navigation.navigate(""folderName"").pushNotification(subSubFile, DELETE);   waitForUI(); waitUntil(() -> folderTree.getChildren().get(0).getChildren().isEmpty());  search(""inner""); expectChildren(0); } "	0	1	0	0	1	0
@Override public void onStart() { super.onStart(); mCustomTabHelper.bindCustomTabsService(this.getActivity(), uri); } 	0	1	0	0	1	0
"@EventHandler public void onPlayerInteract(PlayerInteractEvent event) { if (War.war.isLoaded()) { Player player = event.getPlayer(); if (event.getItem().getType() == Material.WOOD_SWORD && War.war.isWandBearer(player)) { String zoneName = War.war.getWandBearerZone(player); ZoneSetter setter = new ZoneSetter(player, zoneName); if (event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_AIR) { War.war.badMsg(player, ""wand.toofar""); } else if (event.getAction() == Action.LEFT_CLICK_BLOCK) { setter.placeCorner1(event.getClickedBlock()); event.setUseItemInHand(Result.ALLOW); } else if (event.getAction() == Action.RIGHT_CLICK_BLOCK) { setter.placeCorner2(event.getClickedBlock()); event.setUseItemInHand(Result.ALLOW); } }  Warzone zone = Warzone.getZoneByPlayerName(player.getName()); if (zone != null && zone.getLoadoutSelections().containsKey(player.getName()) && zone.getLoadoutSelections().get(player.getName()).isStillInSpawn()) { event.setUseItemInHand(Result.DENY); event.setCancelled(true); // Replace message with sound to reduce spamminess. // Whenever a player dies in the middle of conflict they will // likely respawn still trying to use their items to attack // another player. player.playSound(player.getLocation(), Sound.ENTITY_ITEM_BREAK, 1, 0); }  if (zone != null && event.getAction() == Action.RIGHT_CLICK_BLOCK && event.getClickedBlock().getType() == Material.ENDER_CHEST && !zone.getWarzoneConfig().getBoolean(WarzoneConfig.ALLOWENDER)) { event.setCancelled(true); War.war.badMsg(player, ""use.ender""); } Team team = Team.getTeamByPlayerName(player.getName()); if (zone != null && team != null && event.getAction() == Action.RIGHT_CLICK_BLOCK && event.getClickedBlock().getType() == Material.ENCHANTMENT_TABLE && team.getTeamConfig().resolveBoolean(TeamConfig.XPKILLMETER)) { event.setCancelled(true); War.war.badMsg(player, ""use.enchant""); if (zone.getAuthors().contains(player.getName())) { War.war.badMsg(player, ""use.xpkillmeter""); } } if (zone != null && team != null && event.getAction() == Action.RIGHT_CLICK_BLOCK && event.getClickedBlock().getType() == Material.ANVIL && team.getTeamConfig().resolveBoolean(TeamConfig.XPKILLMETER)) { event.setCancelled(true); War.war.badMsg(player, ""use.anvil""); if (zone.getAuthors().contains(player.getName())) { War.war.badMsg(player, ""use.xpkillmeter""); } } if (zone != null && team != null && event.getAction() == Action.RIGHT_CLICK_BLOCK && event.getClickedBlock().getState() instanceof InventoryHolder && zone.isFlagThief(player)) { event.setCancelled(true); War.war.badMsg(player, ""drop.flag.disabled""); } }  if (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR) { Player player = event.getPlayer(); Warzone zone = Warzone.getZoneByPlayerName(player.getName()); if (zone != null && zone.getWarzoneConfig().getBoolean(WarzoneConfig.SOUPHEALING)) { ItemStack item = event.getItem(); if ((item != null) && (item.getType() == Material.MUSHROOM_SOUP)) { if (player.getHealth() < 20) { player.setHealth(Math.min(20, player.getHealth() + 7)); item.setType(Material.BOWL); } else if (player.getFoodLevel() < 20) { player.setFoodLevel(Math.min(20, player.getFoodLevel() + 6)); player.setSaturation(player.getSaturation() + 7.2f); item.setType(Material.BOWL); } } } } } "	0	1	0	0	1	0
"public void saveToOntology() { if (name != null) { Ontology ont = new Ontology(); classURI = ont.getClassName(name, simpleTypes, complexTypes, simpleComplexTypes);  OntClass clazz = Ontology.getOntologyInstance().getOntClass(classURI); instance = clazz.createIndividual(Config.ONTOLOGY_URI + ""--"" + this.namespace.toString() + name);   // simple types for (Object key : simpleTypes.keySet()) { instance.addLiteral(ont.getProperty(key.toString()), simpleTypes.get(key.toString()).toString()); }   // complex types for (Object key : complexTypes.keySet()) { ArrayList<Entity> entities = complexTypes.get(key.toString()); for (Entity ent : entities) { instance.addProperty(ont.getProperty(key.toString()), ent.instance); } }  for (Object key : simpleComplexTypes.keySet()) { ArrayList<String> values = simpleComplexTypes.get(key.toString()); for (String val : values) { instance.addLiteral(ont.getProperty(key.toString()),val); } }    }   } "	0	1	0	0	1	0
private void checkAnswer(boolean userPressed) { boolean answer=mQuestionBank[mCurrentIndex].isAnswerTrue();  int messageResId; if(!mCheated) if(userPressed==answer) messageResId=R.string.correct_toast; else messageResId=R.string.incorrect_toast; else messageResId=R.string.warning_toast;  Toast.makeText(QuizActivity.this,messageResId,Toast.LENGTH_SHORT).show(); } 	0	1	0	0	1	0
private ParameterDescription getPrefixDescriptionFor(String arg) { for (Map.Entry<IKey, ParameterDescription> es : descriptions.entrySet()) { if (arg.startsWith(es.getKey().getName())) return es.getValue(); }  return null; } 	0	1	0	0	1	0
"@PreAuthorize(""(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and "" + ""#post.userCreated.username == principal.username)"") //draft can be deleted only by author @Override public void deleteDraft(Post post) { if (!PostState.DRAFT.equals(post.getState())) { new IllegalArgumentException(""Required DRAFT but got "" + String.valueOf(post.getState())); } Topic topic = post.getTopic(); topic.removePost(post); topicDao.saveOrUpdate(topic); securityService.deleteFromAcl(post);  logger.debug(""Deleted draft id={}"", post.getId()); } "	0	1	0	0	1	0
private Map<String, ArrayList<String>> assignPassengersToDrivers(Map<User, Map<User, Double>> distanceMaps) { // Iterate over entries of distanceMaps Map<String, ArrayList<String>> driverPassengersMap = new HashMap<>(); for (Map.Entry<User, Map<User, Double>> entry : distanceMaps.entrySet()) { User currentPassenger = entry.getKey(); Map<User, Double> driverDistanceMatrix = entry.getValue(); User optimalDriver = null; Double smallestDistance = Double.MAX_VALUE; // Find the closest driver for currentPassenger for (Map.Entry<User, Double> driverDistanceEntry : driverDistanceMatrix.entrySet()) { User currentDriver = driverDistanceEntry.getKey(); Double currentDistance = driverDistanceEntry.getValue(); if (currentDistance < smallestDistance && currentDriver.getNumFreeSeats() > 0) { smallestDistance = currentDistance; optimalDriver = currentDriver; } } if (optimalDriver != null) { optimalDriver.addPassenger(currentPassenger); } } return driverPassengersMap; } 	0	1	0	0	1	0
"public void evaluateAllFitness(PrintWriter stats, ObjectOutputStream champions) throws java.io.IOException, InterruptedException { // Indices where each thread should start int[] starts = new int[NUMBER_OF_THREADS]; // Indices where each thread should stop int[] stops = new int[NUMBER_OF_THREADS]; for (int i = 0; i < starts.length; i++) { starts[i] = individuals.length * i / NUMBER_OF_THREADS; stops[i] = individuals.length * (i + 1) / NUMBER_OF_THREADS; } int step = individuals.length / NUMBER_OF_THREADS; CountDownLatch latch = new CountDownLatch(NUMBER_OF_THREADS); Evaluator[] evaluators = new Evaluator[NUMBER_OF_THREADS]; for (int i = 0; i < evaluators.length; i++) { evaluators[i] = new Evaluator(step * i, step * (i + 1), individuals, latch); } ExecutorService executor = Executors.newFixedThreadPool(NUMBER_OF_THREADS); long before = System.nanoTime(); for (int i = 0; i < NUMBER_OF_THREADS; i++) { executor.execute(evaluators[i]); } executor.shutdown(); latch.await(); long after = System.nanoTime(); System.out.println(""Time taken: "" + ((after - before) / 1000000000.0) + "" seconds""); Genotype champion = findChampion(); stats.println(champion.getFitness() + ""\t"" + meanFitness()); stats.flush(); champions.writeObject(champion.getWords()); } "	0	1	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setupActionBar(true, getString(R.string.you)); setContentView(R.layout.edit_user_layout); ButterKnife.bind(this);  ActionBar actionBar = getSupportActionBar(); if (actionBar != null) { actionBar.setHomeAsUpIndicator(DrawableUtils.getActionBarIcon(this, R.drawable.ic_close_black_24dp)); }  if (presenter == null || savedInstanceState == null) { presenter = new EditUserPresenter(this); } else { presenter = new EditUserPresenter(savedInstanceState); } presenter.onTakeView(this);  description.setOnFocusChangeListener(new View.OnFocusChangeListener() { @Override public void onFocusChange(View v, boolean hasFocus) { if (hasFocus) { descriptionInputLayout.setHint(getString(R.string.about_you)); ((EditText)v).setHint(getString(R.string.add_description)); } else { descriptionInputLayout.setHint(getString(R.string.add_description)); ((EditText)v).setHint(""""); } } });  } "	0	1	0	0	1	0
private char nextChar(int i) throws EndOfPathException{ SuffixNode node = selectNode(); if(diff(node) >= active.activeLength){ return input[active.activeNode.child[input[active.activeEdge]].start + active.activeLength]; } if(diff(node) + 1 == active.activeLength ){ if(node.child[input[i]] != null){ return input[i]; } } else{ active.activeNode = node; active.activeLength = active.activeLength - diff(node) -1; active.activeEdge = active.activeEdge + diff(node)  +1; return input[active.activeNode.child[input[active.activeEdge]].start + active.activeLength]; }  throw new EndOfPathException(); } 	0	1	0	0	1	0
"public static void loadCreaturePresets(Map<Id, ItemPreset> itemPresetMap) { Map<Id, CreaturePreset> creaturePresetMap = new HashMap<Id, CreaturePreset>(); JsonObject object = JsonObjectFactory.makeJsonObject(""creatures.json""); for (JsonValue value : object.get(""creatures"").asArray()) { JsonObject presetObject = value.asObject(); CreaturePreset preset = new CreaturePreset(); preset.setId(new Id(presetObject.get(""id"").asString())); preset.setType(presetObject.get(""type"").asString()); preset.setName(NameFactory.fromJsonObject(presetObject.get(""name"").asObject())); if (presetObject.get(""tags"") != null) { preset.setTagSet(TagSet.fromJsonArray(presetObject.get(""tags"").asArray(), Creature.Tag.class)); } else { preset.setTagSet(TagSet.makeEmptyTagSet(Creature.Tag.class)); } preset.setInventoryItemLimit(presetObject.getInt(""inventoryItemLimit"", 0)); preset.setInventoryWeightLimit(presetObject.getDouble(""inventoryItemLimit"", 0.0)); preset.setItems(getInventory(presetObject)); setLuminosityIfPresent(preset, presetObject); setVisibility(preset, presetObject); preset.setWeight(Weight.newInstance(presetObject.get(""weight"").asDouble())); preset.setHealth(presetObject.get(""health"").asInt()); preset.setAttack(presetObject.get(""attack"").asInt()); setWeaponIfPreset(preset, presetObject); preset.setAttackAlgorithmId(AttackAlgorithmId.valueOf(presetObject.get(""attackAlgorithmID"").asString())); creaturePresetMap.put(preset.getId(), preset); if (preset.hasTag(Creature.Tag.CORPSE)) { ItemPreset corpse = CorpsePresetFactory.makeCorpsePreset(preset); itemPresetMap.put(corpse.getId(), corpse); } } setCreaturePresetMap(Collections.unmodifiableMap(creaturePresetMap)); DungeonLogger.info(""Loaded "" + creaturePresetMap.size() + "" creature presets.""); } "	0	1	0	0	1	0
public void insertActiveUser(LoginEvent loginEvent) { User user = new User(); user.setName(loginEvent.getSessionConnectEvent().getUser().getName()); usersSessions.add(user); } 	0	1	0	0	1	0
private void dispatchPositionChangedCallback() { if (callbacks != null && !callbacks.isEmpty()) { for (Callbacks callback : callbacks) { callback.onSheetPositionChanged(dragView.getTop()); } } } 	0	1	0	0	1	0
@Override protected void onAttachedToWindow() { super.onAttachedToWindow(); viewDragHelper = ViewDragHelper.create(this, dragHelperCallbacks); } 	0	1	0	0	1	0
"public ArrayList<Token> parsear(String regEx) { ArrayList<Token> tokens = new ArrayList<Token>(); String[] characters = regEx.split(""""); Token token = new Token("""",""""); String generator = """"; for (String character : characters) { if(tokenValidator.isQuantifier(character)){ token.setQuantifier(character); token.setGenerator(generator); tokens.add(token); generator = """"; token = new Token("""",""""); } else{ if(tokenValidator.isOpenUnionGenerator(generator) || tokenValidator.isEscaped(generator)){ generator += character; } else{ if(generator != """"){ token.setGenerator(generator); tokens.add(token); token = new Token("""",""""); generator = """"; } generator = character; } }  }  if(tokenValidator.isLastGenerator(generator)){ token.setGenerator(generator); tokens.add(token); } return tokens; } "	0	1	0	0	1	0
"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String subOrPost = request.getParameter(""subOrPost""); response.setContentType(""application/json""); response.addHeader(""Access-Control-Allow-Origin"", ""*""); response.getWriter().write(ReturnAddress.returnAddFamVio(subOrPost)); // response.getWriter().write(ReturnAddress.returnAddFamVio(""3000"")); } "	0	1	0	0	1	0
"@Override public String toString() { if (isSuccess()) { return ""success""; } else if (isTimeout()) { return ""timeout""; } else { final ZclStatus status = ZclStatus.getStatus((byte) getStatusCode().intValue()); return ""message: "" + status.name() + ""(0x"" + Integer.toHexString(status.getId()) + "", "" + status.getDescription(); } } "	0	1	0	0	1	0
"public JSONObject toJSON() { JSONObject jsonObject = new JSONObject(); if (userId != null) { jsonObject.put(""userId"", new JSONNumber(userId)); } jsonObject.put(""firstName"", new JSONString(firstName)); jsonObject.put(""lastName"", new JSONString(lastName)); jsonObject.put(""email"", new JSONString(email)); // TODO: do not use this as it is the ""security user"" placeholder //        jsonObject.put(""username"", new JSONString(email)); if (role != null) { jsonObject.put(""role"", new JSONString(role)); }  JSONArray groupArray = new JSONArray(); for (int i = 0; i < groupList.size(); i++) { groupArray.set(i, new JSONString(groupList.get(i))); } jsonObject.put(""groups"", groupArray);  JSONArray availableGroupArray = new JSONArray(); for (int i = 0; i < availableGroupList.size(); i++) { availableGroupArray.set(i, new JSONString(availableGroupList.get(i))); } jsonObject.put(""availableGroups"", availableGroupArray);  if (password != null) { jsonObject.put(""password"", new JSONString(password)); }  JSONArray organismPermissions = new JSONArray(); int index = 0; for (String organism : organismPermissionMap.keySet()) { JSONObject orgPermission = new JSONObject(); orgPermission.put(organism, organismPermissionMap.get(organism).toJSON()); organismPermissions.set(index, orgPermission); ++index; } jsonObject.put(""organismPermissions"", organismPermissions);   return jsonObject; } "	0	1	0	0	1	0
"@Override protected void onPostExecute(final String[] hashes) { super.onPostExecute(hashes); if (!f.isDirectory()) { md5HashText.setText(hashes[0]); sha256Text.setText(hashes[1]);  mMD5LinearLayout.setOnLongClickListener(new View.OnLongClickListener() { @Override public boolean onLongClick(View v) {  Futils.copyToClipboard(c, hashes[0]); Toast.makeText(c, c.getResources().getString(R.string.md5).toUpperCase() + "" "" + c.getResources().getString(R.string.properties_copied_clipboard), Toast.LENGTH_SHORT).show(); return false; } }); mSHA256LinearLayout.setOnLongClickListener(new View.OnLongClickListener() { @Override public boolean onLongClick(View v) {  Futils.copyToClipboard(c, hashes[1]); Toast.makeText(c, c.getResources().getString(R.string.hash_sha256) + "" "" + c.getResources().getString(R.string.properties_copied_clipboard), Toast.LENGTH_SHORT).show(); return false; } }); } else { mMD5LinearLayout.setVisibility(View.GONE); mSHA256LinearLayout.setVisibility(View.GONE); } } "	0	1	0	0	1	0
"@SuppressWarnings(""unchecked"") public static List<Map<String, Object>> getSecondaryFiles(CWLJob job, HashAlgorithm hashAlgorithm, Map<String, Object> fileValue, String filePath, Object secondaryFilesObj, File workingDir) throws CWLExpressionException, IOException { if (secondaryFilesObj == null) { return null; }  List<Object> secondaryFilesList = new ArrayList<>(); if (secondaryFilesObj instanceof List<?>) { secondaryFilesList.addAll((Collection<? extends Object>) secondaryFilesObj); }  List<Map<String, Object>> secondaryFileMaps = new ArrayList<>(); for (Object suffixObj : secondaryFilesList) { Object expr = CWLExpressionResolver.resolve(suffixObj, job, fileValue); Map<String, Object> secondaryFileMap = new HashMap<>(); if(expr instanceof String) { String secondaryFilePath; String suffix = (String) expr; if((suffix).startsWith(""^"") || suffix.startsWith(""."")) { secondaryFilePath = filePath.toString(); while (suffix.startsWith(""^"")) { int extensionIndex = secondaryFilePath.lastIndexOf("".""); if (extensionIndex != -1) { secondaryFilePath = secondaryFilePath.substring(0, extensionIndex); suffix = suffix.substring(1); } else { break; } } secondaryFilePath += ((String) suffix).startsWith(""."") ? suffix : ""."" + suffix; } else { secondaryFilePath = suffix; } File secondaryFile = new File(secondaryFilePath); if (secondaryFile.exists()) { if (secondaryFile.isDirectory()) { CWLFileValueHelper.setDirType(secondaryFileMap); } else { CWLFileValueHelper.setFileType(secondaryFileMap); } CWLFileValueHelper.setPath(secondaryFile.getAbsolutePath(), secondaryFileMap); CWLFileValueHelper.setSize(secondaryFile.length(), secondaryFileMap); CWLFileValueHelper.setName(secondaryFile.getName(), secondaryFileMap); if (hashAlgorithm != null) { CWLFileValueHelper.setChecksum(secondaryFile, secondaryFileMap, hashAlgorithm); } } } else if (expr instanceof Map) { secondaryFileMap = (Map<String, Object>) expr; postprocessCreatedResults(secondaryFileMap, hashAlgorithm, workingDir); } if(!secondaryFileMap.isEmpty()) { secondaryFileMaps.add(secondaryFileMap); } } return secondaryFileMaps.isEmpty() ? null : secondaryFileMaps; } "	0	1	0	0	1	0
"@Override public void render() { InputData input = inputRetriever.getCurrentData(); Environment activeEnv = environmentManager.getActiveEnvironment(); float delta = Gdx.graphics.getDeltaTime();  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);  if(activeEnv != null) { activeEnv.render(); }  Font bitop = fontManager.getFont(""8bitop""); bitop.write(Gdx.graphics.getFramesPerSecond() + """", null, null, 10, 415, 2); renderer.flush();  if(activeEnv != null) { activeEnv.process(delta, input); }  if(input.getPressData(Keys.F3).justPressed(0)) { this.console.show(); }  inputRetriever.update(); } "	0	1	0	0	1	0
"public void visit(QuantifiedExpression quantifiedExpression) { if (this.specificationChecker == null) { throw new IllegalArgumentException(""No SpecificationChecker supplied""); } Validity validity = this.specificationChecker.checkFormula(quantifiedExpression, this.getAllSymbols()); if (validity.equals(Validity.UNKNOWN)) { expressionFailed(quantifiedExpression, new UnknownValidityInterpreterError()); return; } else { this.resultStack.push(new BooleanValue(validity.equals(Validity.VALID))); this.expressionEvaluated(quantifiedExpression); } } "	0	1	0	0	1	0
"private void transformMetadata(int entityID, ByteBuf input, ByteBuf output) throws CancelException { EntityType type = clientEntityTypes.get(entityID); if (type == null) { System.out.println(""Unable to get entity for ID: "" + entityID); output.writeByte(255); return; } List<MetadataRewriter.Entry> list = MetadataRewriter.readMetadata1_8(type, input); for (MetadataRewriter.Entry entry : list) { handleMetadata(entityID, entry, type); } // Fix: wither (crash fix) if(type == EntityType.WITHER) { list.add(new Entry(MetaIndex.WITHER_PROPERTIES, (byte) 0, 10)); } // Fix: Dragon (crash fix) if(type == EntityType.ENDER_DRAGON) { list.add(new Entry(MetaIndex.ENDERDRAGON_PHASE, 0, 11)); } MetadataRewriter.writeMetadata1_9(type, list, output); } "	0	1	0	0	1	0
protected IndentLevel getChildrenExpectedIndent() { IndentLevel indentLevel = new IndentLevel(getIndent(), getBasicOffset()); // if we have multileveled expected level then we should // try to suggest single level to children using curlies' // levels. if (getIndent().isMultiLevel() && hasCurlies()) { if (isOnStartOfLine(getLeftCurly())) { indentLevel = new IndentLevel(expandedTabsColumnNo(getLeftCurly()) + getBasicOffset()); } else if (isOnStartOfLine(getRightCurly())) { final IndentLevel level = new IndentLevel(curlyIndent(), getBasicOffset()); level.addAcceptedIndent(level.getFirstIndentLevel() + getLineWrappingIndent()); indentLevel = level; } } return indentLevel; } 	0	1	0	0	1	0
"@Override public void onActivityCreated(Bundle savedInstanceState) { addPreferencesFromResource(R.xml.wifi_p2p_settings);  mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_DISCOVERY_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PERSISTENT_GROUPS_CHANGED_ACTION);  final Activity activity = getActivity(); mWifiP2pManager = (WifiP2pManager) getSystemService(Context.WIFI_P2P_SERVICE); if (mWifiP2pManager != null) { mChannel = mWifiP2pManager.initialize(activity, getActivity().getMainLooper(), null); if (mChannel == null) { //Failure to set up connection Log.e(TAG, ""Failed to set up connection with wifi p2p service""); mWifiP2pManager = null; } } else { Log.e(TAG, ""mWifiP2pManager is null !""); }  if (savedInstanceState != null && savedInstanceState.containsKey(SAVE_DIALOG_PEER)) { WifiP2pDevice device = savedInstanceState.getParcelable(SAVE_DIALOG_PEER); mSelectedWifiPeer = new WifiP2pPeer(getActivity(), device); } if (savedInstanceState != null && savedInstanceState.containsKey(SAVE_DEVICE_NAME)) { mSavedDeviceName = savedInstanceState.getString(SAVE_DEVICE_NAME); } if (savedInstanceState != null && savedInstanceState.containsKey(SAVE_SELECTED_GROUP)) { mSelectedGroupName = savedInstanceState.getString(SAVE_SELECTED_GROUP); }  mRenameListener = new OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { if (which == DialogInterface.BUTTON_POSITIVE) { if (mWifiP2pManager != null) { String name = mDeviceNameText.getText().toString(); if (name != null) { for (int i = 0; i < name.length(); i++) { char cur = name.charAt(i); if(!Character.isDigit(cur) && !Character.isLetter(cur) && cur != '-' && cur != '_' && cur != ' ') { Toast.makeText(getActivity(), R.string.wifi_p2p_failed_rename_message, Toast.LENGTH_LONG).show(); return; } } } mWifiP2pManager.setDeviceName(mChannel, mDeviceNameText.getText().toString(), new WifiP2pManager.ActionListener() { public void onSuccess() { if (DBG) Log.d(TAG, "" device rename success""); } public void onFailure(int reason) { Toast.makeText(getActivity(), R.string.wifi_p2p_failed_rename_message, Toast.LENGTH_LONG).show(); } }); } } } };  //disconnect dialog listener mDisconnectListener = new OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { if (which == DialogInterface.BUTTON_POSITIVE) { if (mWifiP2pManager != null) { mWifiP2pManager.removeGroup(mChannel, new WifiP2pManager.ActionListener() { public void onSuccess() { if (DBG) Log.d(TAG, "" remove group success""); } public void onFailure(int reason) { if (DBG) Log.d(TAG, "" remove group fail "" + reason); } }); } } } };  //cancel connect dialog listener mCancelConnectListener = new OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { if (which == DialogInterface.BUTTON_POSITIVE) { if (mWifiP2pManager != null) { mWifiP2pManager.cancelConnect(mChannel, new WifiP2pManager.ActionListener() { public void onSuccess() { if (DBG) Log.d(TAG, "" cancel connect success""); } public void onFailure(int reason) { if (DBG) Log.d(TAG, "" cancel connect fail "" + reason); } }); } } } };  //delete persistent group dialog listener mDeleteGroupListener = new OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { if (which == DialogInterface.BUTTON_POSITIVE) { if (mWifiP2pManager != null) { if (mSelectedGroup != null) { if (DBG) Log.d(TAG, "" deleting group "" + mSelectedGroup.getGroupName()); mWifiP2pManager.deletePersistentGroup(mChannel, mSelectedGroup.getNetworkId(), new WifiP2pManager.ActionListener() { public void onSuccess() { if (DBG) Log.d(TAG, "" delete group success""); } public void onFailure(int reason) { if (DBG) Log.d(TAG, "" delete group fail "" + reason); } }); mSelectedGroup = null; } else { if (DBG) Log.w(TAG, "" No selected group to delete!"" ); } } } else if (which == DialogInterface.BUTTON_NEGATIVE) { if (DBG) { Log.d(TAG, "" forgetting selected group "" + mSelectedGroup.getGroupName()); } mSelectedGroup = null; } } };  setHasOptionsMenu(true);  final PreferenceScreen preferenceScreen = getPreferenceScreen(); preferenceScreen.removeAll(); preferenceScreen.setOrderingAsAdded(true);  mThisDevicePref = new Preference(getPrefContext()); mThisDevicePref.setPersistent(false); mThisDevicePref.setSelectable(false); preferenceScreen.addPreference(mThisDevicePref);  mPeersGroup = new PreferenceCategory(getPrefContext()); mPeersGroup.setTitle(R.string.wifi_p2p_peer_devices); preferenceScreen.addPreference(mPeersGroup);  mPersistentGroup = new PreferenceCategory(getPrefContext()); mPersistentGroup.setTitle(R.string.wifi_p2p_remembered_groups); preferenceScreen.addPreference(mPersistentGroup);  super.onActivityCreated(savedInstanceState); } "	0	1	0	0	1	0
"private static boolean messageAcceuil() { String[] options = new String[]{""GUI"",""Console""}; String message = LSD.getString(""mesAc_msg"");  String choix = (String)JOptionPane.showInputDialog(null,message, ""IMPORTANT"",JOptionPane.QUESTION_MESSAGE, null, options, options[0]); if(choix.equals(options[0])) { return true; }else{ return false; } } "	0	1	0	0	1	0
private static CampPattern mapsnone(CampPattern p) { CampPattern count = new UnaryPattern(UnaryOperator.ACount, new MapPattern(p)); return eq(count, new ConstPattern(0)); } 	0	1	0	0	1	0
"@Override public void loadOneRow() throws IOException {  /* Calendars and Fares are special: they are stored as joined tables rather than simple maps. */ String fareId = getStringField(""fare_id"", true); Fare fare = feed.getOrCreateFare(fareId); if (fare.fare_attribute != null) { feed.errors.add(new DuplicateKeyError(tableName, row, ""fare_id"")); } else { FareAttribute fa = new FareAttribute(); fa.fare_id = fareId; fa.price = getDoubleField(""price"", true, 0, Integer.MAX_VALUE); fa.currency_type = getStringField(""currency_type"", true); fa.payment_method = getIntField(""payment_method"", true, 0, 1); fa.transfers = getIntField(""transfers"", false, 0, 10); // TODO missing means ""unlimited"" in this case (rather than 0), supply default value or just use the NULL to mean unlimited fa.transfer_duration = getIntField(""transfer_duration"", false, 0, 24 * 60 * 60); fa.feed = feed; fa.feed_id = feed.feedId; fare.fare_attribute = fa; }  } "	0	1	0	0	1	0
"@Override public void loadOneRow() throws IOException { /* Calendars and Fares are special: they are stored as joined tables rather than simple maps. */ String service_id = getStringField(""service_id"", true); Service service = feed.getOrCreateService(service_id); LocalDate date = getDateField(""date"", true); if (service.calendar_dates.containsKey(date)) { feed.errors.add(new DuplicateKeyError(tableName, row, ""(service_id, date)"")); } else { CalendarDate cd = new CalendarDate(); cd.service_id = service_id; cd.date = date; cd.exception_type = getIntField(""exception_type"", true, 1, 2); cd.feed = feed; service.calendar_dates.put(date, cd); } } "	0	1	0	0	1	0
protected List<Track> PartialsForTrack(Track trk) { List<Track> partialTracks = new ArrayList<Track>();  List<TrackerHit> trackHits = trk.getTrackerHits(); for (Track otherTrack : this.tracks) { List<TrackerHit> otherTrackHits = otherTrack.getTrackerHits(); if (otherTrackHits.size() < trackHits.size() && trackHits.containsAll(otherTrackHits)) { partialTracks.add(otherTrack); } }  return partialTracks; } 	0	1	0	0	1	0
@Override public void init() { world = new World(Constants.GRAVITY, true); world.setContactListener(dareContactListener); stage = new Stage(new ExtendViewport(Constants.WORLD_WIDTH, Constants.WORLD_HEIGHT));  debugRenderer = new Box2DDebugRenderer();  // TODO: Testing values, replace with LevelLoading player = new Player( 20f, 40f, Constants.PLAYER_RADIUS * 2f, Constants.PLAYER_RADIUS * 4f, world);  //platform = new Platform(0f, 0f, 400f, 40f, world);  stage.addActor(player); //stage.addActor(platform); } 	0	1	0	0	1	0
@Test public void toJSON(){ HttpMethodType httpMethodType = HttpMethodType.GET; LOGGER.info(JsonUtil.toJSON(httpMethodType, null).toString(4, 4)); } 	0	1	0	0	1	0
"public void upgradeFirmware(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException { JSONObject result = new JSONObject(); Preference.putString(context, resources.getString(R.string.pref_key_schedule), operation.getPayLoad().toString()); try { String status = resources.getString(R.string.shared_pref_default_status); result.put(resources.getString(R.string.operation_status), status);  operation.setPayLoad(result.toString());  if (status.equals(resources.getString(R.string.shared_pref_default_status))) { operation.setStatus(resources.getString(R.string.operation_value_completed)); resultBuilder.build(operation);  if (Constants.DEBUG_MODE_ENABLED) { Log.d(TAG, ""Firmware upgrade started.""); } } else { operation.setStatus(resources.getString(R.string.operation_value_error)); operation.setOperationResponse(""Firmware upgrade failed due to download failure.""); resultBuilder.build(operation); } } catch (JSONException e) { operation.setStatus(resources.getString(R.string.operation_value_error)); operation.setOperationResponse(""Error in processing result payload.""); resultBuilder.build(operation); throw new AndroidAgentException(""Invalid JSON format."", e); } } "	0	1	0	0	1	0
private void makeAddIPTunnelConnection() { Action act = new Action(Permission.READ, new AddIPTunnelConnectionHandler()); act.addParameter(new Parameter(ATTR_NAME, ValueType.STRING)); act.addParameter( new Parameter(ATTR_TRANSMISSION_TYPE, ValueType.makeEnum(TransmissionType.Tunneling.toString()))); act.addParameter(new Parameter(ATTR_GROUP_LEVEL, ValueType.makeEnum(Utils.enumNames(GroupAddressType.class)))); act.addParameter(new Parameter(ATTR_LOCAL_HOST, ValueType.STRING, new Value(getLocalHost()))); act.addParameter(new Parameter(ATTR_REMOTE_HOST, ValueType.STRING, new Value(DEFAULT_MULTICAST_ADDRESS))); act.addParameter(new Parameter(ATTR_REMOTE_PORT, ValueType.NUMBER, new Value(KNXnetIPConnection.DEFAULT_PORT))); act.addParameter(new Parameter(ATTR_USE_NAT, ValueType.BOOL, new Value(false))); act.addParameter(new Parameter(ATTR_DEVICE_ADDRESS, ValueType.STRING, new Value(DEFAULT_DEVICE_ADDRESS))); act.addParameter(new Parameter(ATTR_POLLING_INTERVAL, ValueType.NUMBER, new Value(DEFAULT_POLLING_INTERVAL))); act.addParameter(new Parameter(ATTR_POLLING_TIMEOUT, ValueType.NUMBER, new Value(DEFAULT_POLLING_TIMEOUT))); node.createChild(ACTION_ADD_IP_TUNNELING_CONNECTION).setAction(act).build().setSerializable(false); } 	0	1	0	0	1	0
"@Override public Project create(String projectId, String projectName, Date finalDate, boolean isUsed, boolean isArchived, boolean isDisplayed) { ContentValues values = new ContentValues(); values.put(PersistenceHelper.PROJECTS_ID, projectId); values.put(PersistenceHelper.PROJECTS_NAME, projectName); values.put(PersistenceHelper.PROJECTS_FINAL_DATE, finalDate.getTime()); values.put(PersistenceHelper.PROJECTS_IS_DISPLAYED, isDisplayed); values.put(PersistenceHelper.PROJECTS_IS_USED, isUsed); values.put(PersistenceHelper.PROJECTS_IS_ARCHIVED, isArchived); database.insert(PersistenceHelper.TABLE_PROJECTS, null, values);  Cursor cursor = database.query(PersistenceHelper.TABLE_PROJECTS, allColumns, PersistenceHelper.PROJECTS_ID + "" = '"" + projectId + ""'"", null, null, null, null); cursor.moveToFirst(); Project newProject = cursorToProject(cursor); cursor.close(); return newProject; } "	0	1	0	0	1	0
public final Map<String, Object> getUserData() { final Map<String, Object> userData = new HashMap<>(); userData.put(UserDataFields.PVP_STATUS, hasPvPEnabled()); userData.put(UserDataFields.TOGGLE_TIME, getToggleTime()); userData.put(UserDataFields.NEWBIE, isNewbie()); userData.put(UserDataFields.NEWBIE_TIMELEFT, newbieTask.getTimeleft()); return userData; } 	0	1	0	0	1	0
"private void readHeader() throws IOException { while ((currentLine = br.readLine()) != null) { if (!currentLine.startsWith(""#"") && !currentLine.startsWith(""@"")) { break; } if (currentLine.startsWith(""@SQ"")) { final String[] fields = currentLine.split(""[\\s]+""); chromosomeLengths.put(fields[1], Integer.valueOf(fields[2])); } } } "	0	1	0	0	1	0
public Void execute(CommandContext commandContext) { this.commandContext = commandContext;  AbstractVariableScope scope = getEntity();  executeOperation(scope);  ExecutionEntity contextExecution = getContextExecution(); if (contextExecution != null) { contextExecution.dispatchDelayedEventsAndPerformOperation((PvmAtomicOperationContinuation) null); }  if(!preventLogUserOperation) { logVariableOperation(scope); }  return null; }; 	0	1	0	0	1	0
private static void writeEncoded(byte[] bytes, BufferedWriter wr) throws IOException { char[] buf = new char[PEM_LINE_LENGTH]; bytes = DatatypeConverter.printBase64Binary(bytes).getBytes(); for (int i = 0; i < bytes.length; i += buf.length) { int index; for (index = 0; index < buf.length && (i + index) < bytes.length; index++) { buf[index] = (char) bytes[i + index]; } wr.write(buf, 0, index); wr.write(PEM_LINE_SEP); } } 	0	1	0	0	1	0
public static boolean isAllowedToPutIntoSlot(IInventory aTileEntity, int aSlot, byte aSide, ItemStack aStack, byte aMaxStackSize) { ItemStack tStack = aTileEntity.getStackInSlot(aSlot); if (tStack != null && (!areStacksEqual(tStack, aStack) || tStack.stackSize >= tStack.getMaxStackSize())) return false; if (ForgeDirection.getOrientation(aSide) == ForgeDirection.UNKNOWN) { return isAllowedToPutIntoSlot(aTileEntity, aSlot, (byte) 0, aStack, aMaxStackSize) || isAllowedToPutIntoSlot(aTileEntity, aSlot, (byte) 1, aStack, aMaxStackSize) || isAllowedToPutIntoSlot(aTileEntity, aSlot, (byte) 2, aStack, aMaxStackSize) || isAllowedToPutIntoSlot(aTileEntity, aSlot, (byte) 3, aStack, aMaxStackSize) || isAllowedToPutIntoSlot(aTileEntity, aSlot, (byte) 4, aStack, aMaxStackSize) || isAllowedToPutIntoSlot(aTileEntity, aSlot, (byte) 5, aStack, aMaxStackSize); } if (aTileEntity instanceof ISidedInventory && !((ISidedInventory) aTileEntity).canInsertItem(aSlot, aStack, aSide)) return false; return aTileEntity.isItemValidForSlot(aSlot, aStack); } 	0	1	0	0	1	0
@Override public void setComboToolTip() { ToolTipConfig config = new ToolTipConfig(); config.setTitle(RoutingModuleConstants.INSTANCE.usageText()); config.setText(RoutingModuleConstants.INSTANCE.usageInstructionsText()); config.setTrackMouse(true); this.combo.setToolTip(config); } 	0	1	0	0	1	0
private int calculateDistance(int row, int column) { int distance = 0; for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { if (goal[i][j] == tiles[row][column]) { return Math.abs(j - column) + Math.abs(row - i); } } } // failure safe measure: // needed for compiler purposes only return distance; } 	0	1	0	0	1	0
"@Test public void testError() { MockHttpServletRequest mockRequest = new MockHttpServletRequest(); mockRequest.setAttribute(RequestDispatcher.ERROR_STATUS_CODE, 500); mockRequest.setAttribute(RequestDispatcher.ERROR_REQUEST_URI, ""http://foo/bar""); mockRequest.setAttribute(RequestDispatcher.ERROR_MESSAGE, ""Something was wrong""); mockRequest.setAttribute(RequestDispatcher.ERROR_EXCEPTION, new IllegalStateException()); Response response  = new ErrorResource().error(mockRequest); assertEquals(500, response.getStatus()); String responseBody = response.getEntity().toString(); assertTrue(responseBody.contains(""500"")); assertTrue(responseBody.contains(""http://foo/bar"")); assertTrue(responseBody.contains(""Something was wrong"")); assertTrue(responseBody.contains(""IllegalStateException"")); } "	0	1	0	0	1	0
"public void nextLevel() { tNextLevel = false; tLevel = levelFactory.buildLevel(levelNumber, tPlayers ); tLogger.setLog(""The level with number: '"" + levelNumber + ""' was build."", 2); levelNumber++; } "	0	1	0	0	1	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); overridePendingTransition(R.anim.slide_activity_up, R.anim.activity_stay); setContentView(R.layout.activity_create_post); getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE|WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE); attachedPhoto = (ImageView) findViewById(R.id.editPostIncludedImageView); cameraButton = (ImageButton) findViewById(R.id.cameraButton); sendButton = (ImageButton) findViewById(R.id.sendButton); setActionBarTitle(""Posting to "" + Reverb.getInstance().getRegionManager().getCurrentRegion().getName()); super.setupUIBasedOnAnonymity(Reverb.getInstance().isAnonymous()); } "	0	1	0	0	1	0
"private float getRating(float rating) { myRating = rating; SQLiteDatabase myDB = helper.getReadableDatabase(); String strFilter = ""_id="" + id; ContentValues args = new ContentValues(); args.put(LocalDBHelper.COL_RATING, myRating); myDB.update(helper.RATING_TABLE_NAME, args, strFilter, null); helper.close(); return myRating; } "	0	1	0	0	1	0
@Test public void queueSizeIsReportedCorrectly() { taskStore.save(getTask(42L)); taskStore.save(getTask(43L)); assertEquals(2, store.resolveFor(PUBLISHER, new Date()).get().queueSize()); } 	0	1	0	0	1	0
"private String requestingMeal(String request, PartialOrder order) { order.setTransactionPhase(TransactionPhase.PROVIDING_ADDRESS); if (request.equalsIgnoreCase(""MEAL"")) { return ""Please provide your address or CANCEL to quit""; } else { return ""I don't understand that, please say MEAL to request a meal.""; } } "	0	1	0	0	1	0
"private static int parseVersionComponent(String[] versionComponents, int componentIndex) throws NumberFormatException { if (componentIndex < versionComponents.length) { String component = versionComponents[componentIndex].trim().toLowerCase(); if (component.length() > 0) { if (component.startsWith(""rc"") || component.startsWith(""ms"")) { return parsePrereleaseVersionString(component); } else { return Integer.parseInt(component); } } }  return 0; } "	0	1	0	0	1	0
@EventHandler(priority = EventPriority.LOWEST) public void onPlayerTeleport(PlayerTeleportEvent event) { if (event.isCancelled()) return;  // pass event to games for (Game game : games) { game.onPlayerTeleport(event); } } 	0	1	0	0	1	0
@EventHandler(priority = EventPriority.LOWEST) public void onPlayerGameModeChange(PlayerGameModeChangeEvent event) { if (event.isCancelled()) return;  // pass event to games for (Game game : games) { game.onPlayerGameModeChange(event); } } 	0	1	0	0	1	0
@EventHandler(priority = EventPriority.HIGHEST) public void onEntityDeath(EntityDeathEvent event) { if (!(event.getEntity() instanceof Player)) return;  // pass event to games for (Game game : games) { game.onPlayerDeath((Player) event.getEntity()); } } 	0	1	0	0	1	0
@EventHandler(priority = EventPriority.LOWEST) public void onEntityExplode(EntityExplodeEvent event) { if (event.isCancelled()) return;  // pass event to games for (Game game : games) { game.onEntityExplode(event); } } 	0	1	0	0	1	0
@EventHandler(priority = EventPriority.HIGHEST) public void onFoodLevelChange(FoodLevelChangeEvent event) { if (event.isCancelled() || !(event.getEntity() instanceof Player)) return;  // pass event to games for (Game game : games) { game.onFoodLevelChange(event); } } 	0	1	0	0	1	0
@EventHandler public void onPlayerQuit(PlayerQuitEvent event) { // pass event to games for (Game game : games) { game.onPlayerQuit(event); } } 	0	1	0	0	1	0
@Transactional public Page<Abnormal> getAbnormalsPagingByFilter(Filter filter,Integer page,Integer size,String mode,String header) { try { User user = userService.getUserByJWT(header); Specification<Abnormal> specA = filterIsLike(filter, user); Specification<Abnormal> specB = userIs(user); return abnormalRepository.findAll(where(specA).and(specB), new PageRequest(page, size)); }catch(Exception e){ e.printStackTrace(); throw new RuntimeException(e); } } 	0	1	0	0	1	0
"@Override public void CalcTiffheader() { String tif_definition = """"; ConfigProjects cp = null; try { cp = new ConfigProjects(this.prozessVorlage.getProjekt().getTitel()); } catch (IOException e) { Helper.setFehlerMeldung(""IOException"", e.getMessage()); return; }  tif_definition = cp.getParamString(""tifheader."" + this.docType.toLowerCase(), ""blabla"");  /* * -------------------------------- evtuelle Ersetzungen -------------------------------- */ tif_definition = tif_definition.replaceAll(""\\[\\["", ""<""); tif_definition = tif_definition.replaceAll(""\\]\\]"", "">"");  /* * -------------------------------- Documentname ist im allgemeinen = Prozesstitel -------------------------------- */ this.tifHeader_documentname = this.prozessKopie.getTitel(); this.tifHeader_imagedescription = """"; /* * -------------------------------- Imagedescription -------------------------------- */ StringTokenizer tokenizer = new StringTokenizer(tif_definition, ""+""); /* jetzt den Tiffheader parsen */ while (tokenizer.hasMoreTokens()) { String myString = tokenizer.nextToken(); /* * wenn der String mit ' anfängt und mit ' endet, dann den Inhalt so übernehmen */ if (myString.startsWith(""'"") && myString.endsWith(""'"") && myString.length() > 2) { this.tifHeader_imagedescription += myString.substring(1, myString.length() - 1); } else if (myString.equals(""$Doctype"")) {  this.tifHeader_imagedescription += this.docType; } else { /* andernfalls den string als Feldnamen auswerten */ for (Iterator<AdditionalField> it2 = this.additionalFields.iterator(); it2.hasNext();) { AdditionalField myField = it2.next();  /* * wenn es das ATS oder TSL-Feld ist, dann den berechneten atstsl einsetzen, sofern noch nicht vorhanden */ if ((myField.getTitel().equals(""ATS"") || myField.getTitel().equals(""TSL"")) && myField.getShowDependingOnDoctype() && (myField.getWert() == null || myField.getWert().equals(""""))) { myField.setWert(this.atstsl); }  /* den Inhalt zum Titel hinzufügen */ if (myField.getTitel().equals(myString) && myField.getShowDependingOnDoctype() && myField.getWert() != null) { this.tifHeader_imagedescription += CalcProzesstitelCheck(myField.getTitel(), myField.getWert()); } } } // } } } "	0	1	0	0	1	0
"@Override public void run() { log.info(""Running thread with simulation moving"");  // Загрузка структуры здания BIM ClassLoader thisClassLoader = Moving.class.getClassLoader(); BIMLoader bimLoader = new BIMLoader(thisClassLoader.getResourceAsStream(""simple-room.json""), new BIM());  LinkedHashMap<Double, ArrayList<DevcHelper>> fdsData = ReadFDSOutput .readDevc(""res/scenarios/UdSU_c6s1v1_devc"" + "".csv"");  BIMExt bim = new BIMExt(bimLoader.getBim()); Traffic traffic = new Traffic(bim);  // Количество людей в здании, до эвакуации double nop = bim.getNumOfPeople(); log.info(""Number of people in Building: {}"", nop); // Максимальное кол-во проходов по циклу (Для избежания зацикливания) int acceptRepeat = 500; double timeModel = 0.0; // Текущее время моделирования эвакуации, c double time; // Интервал моделирования эвакуации, c double previousFdsTime = 0.0;  for (int i = 0; i < acceptRepeat; i++) { // for (Map.Entry<Double, ArrayList<DevcHelper>> d : fdsData.entrySet()) { // double fdsTime = d.getKey(); // if (fdsTime == 0.0) continue;  // time = fdsTime - previousFdsTime; // previousFdsTime = fdsTime; // timeModel += time;  time = 1; int balance = traffic.footTraffic(time);  if (balance < 0) { timeModel += balance * (-1); break; } else timeModel += time;  log.info(""In progress: number of people in Safety zone: {}, simulation time: {}"", bim.getSafetyZone().getNumOfPeople(), timeModel);  //try { sleep(500L); } catch (InterruptedException e) {e.printStackTrace();} }  log.info(""Successful finish simulation. Total: number of people in Safety zone: {} of {}, simulation time: {}"", bim.getSafetyZone().getNumOfPeople(), nop, timeModel);  } "	0	1	0	0	1	0
@Override public AttributeFlow mapToDatabaseEntity(Attribute attribute) { if (attribute == null) { return null; }  AttributeFlow attributeFlow = new AttributeFlow(); attributeFlow.setCode(attribute.getCode()); attributeFlow.setUId(attribute.getUId()); attributeFlow.setName(attribute.getName()); attributeFlow.setDisplayName(attribute.getDisplayName()); attributeFlow.setCreated(attribute.getCreated()); attributeFlow.setLastUpdated(attribute.getLastUpdated()); attributeFlow.setValueType(attribute.getValueType());  return attributeFlow; } 	0	1	0	0	1	0
"private DataRecord generateDataRecord(SQLParseResult parameter) { Table table = mTables.get(parameter.getTablename()); ArrayList<String> attributeNames = table.getAttributeNames(); ArrayList<DataType> attributeTypes = table.getAttributeTypes(); ArrayList<Integer> orderIndex = new ArrayList<>(); if (parameter.getAttributeNames().size() != attributeNames.size()) { System.out.println(""Input data size not match!""); System.out.println(""Found "" + parameter.getAttributeNames().size()); System.out.println(""Expect "" + attributeNames.size()); return null; } if (parameter.getCustomOrder()) { for (String attrName : attributeNames) { int index = parameter.getAttributeNames().indexOf(attrName); if (index == -1) { System.out.println(""Attribute "" + attrName + "" not found in input data""); return null; } orderIndex.add(index); } } else { for (int i = 0; i < attributeNames.size(); ++i) { orderIndex.add(i); } } DataRecord dataRecord = new DataRecord(); for (int index : orderIndex) { String block = parameter.getBlocks().get(index); if (attributeTypes.get(index).getType() == DataTypeIdentifier.INT) { if (!DataChecker.isValidInteger(block)) { System.out.println(""Error input type (INT expected): "" + block); return null; } dataRecord.append(block); } else { String varcharPart = block.substring(1, block.length() - 1); int lengthLimit = attributeTypes.get(index).getLimit(); if (!DataChecker.isValidVarChar(varcharPart, lengthLimit)) { System.out.println(""Error input type (VARCHAR("" + lengthLimit + "") expected)"" + varcharPart); return null; } dataRecord.append(block); } } return dataRecord; } "	0	1	0	0	1	0
"public void ok(){ activate(); String shellText = new DefaultShell().getText(); Button button = new PushButton(""OK""); button.click();  new WaitWhile(new ShellWithTextIsActive(shellText), TimePeriod.LONG); new WaitWhile(new JobIsRunning(), TimePeriod.LONG); } "	0	1	0	0	1	0
"private void doResponse(DatabaseWrapper db, ProcessedMessage processedMsg, String channelName, String destinationChannelName, Channel destinationChannel, String user, UserLevel ul, MessagePriority priority, boolean internal) { String message = processedMsg.getResponse(); String command = processedMsg.getCommandName();  // Do script (processedMsg.getResponse is the script path) if (processedMsg.isScript()) { boolean success = CommandScriptProcessor.process(message, db, command, processedMsg.getArgs(), channelName, destinationChannelName, user, ul); if (!success) { return; } } // Send message else { MessageOut messageOut = new MessageOut(message, priority); if (internal) { new InternalMessageSender(destinationChannelName.replace(InternalMessageSender.DESTINATION_PREFIX, """"), messageOut.getMessage()).sendMessage(); } // If queue rejects message because it's too full, return else if (!APIChannel.in(destinationChannelName) || !destinationChannel.sendQueue.add(messageOut)) { return; } }  // Increment count Command.incrementCount(db, command);  // Skip cooldowns if bot channel or internal if (inBotChannel || (destinationChannelName.equals(APIBot.getBot().getUserName())) || internal) { return; }  // Handles command cooldowns int commandCooldown = channel.getConfig().getCommandCooldown(); if (commandCooldown > 0) { destinationChannel.commandCooldownSet.add(command, commandCooldown); } // Handles user cooldowns int userCooldown = ChannelConfigHelper.getCooldown(channel.getConfig(), ul); if (userCooldown > 0) { destinationChannel.userCooldownSet.add(user, userCooldown); } } "	0	1	0	0	1	0
private void restoreFile(Path tempDirectory, Path destPath) throws IOException { Path fileName = destPath.getFileName(); Files.copy(Paths.get(tempDirectory.toString(), fileName.toString()), destPath); } 	0	1	0	0	1	0
"public int start() throws BuildDriverException { //TODO check if configured buildNumber = -1; try { buildNumber = job.getNextBuildNumber(); job.build(false); } catch (IOException e) { throw new BuildDriverException(""Cannot start project build."", e); }  return buildNumber; } "	0	1	0	0	1	0
"@Override public DataTransferObject execute() { FragmentActivity jeffery = MethodsFacade.SINGLETON.getContext(); if(data.getErrorMsg().length()!=0){ Toast.makeText(jeffery, data.getErrorMsg(), Toast.LENGTH_SHORT).show(); } else { try { Path path = (Path) Serializer.deserialize(data.getData()); ClientModel.SINGLETON.claimRoute(path); Toast.makeText(jeffery, ""Route Claimed"" + Poller.getInstance().getQueueIndex(), Toast.LENGTH_SHORT).show(); } catch(Exception e){ e.printStackTrace(); } }  return null; } "	0	1	0	0	1	0
"@Override public Integer call() throws Exception { if (!force && outputDirectory.exists()) { throw new SpaghettiCliException(""Output directory exists: "" + outputDirectory); }  ModuleConfiguration config = parseConfig(); FileUtils.deleteDirectory(outputDirectory); FileUtils.forceMkdir(outputDirectory); StubGenerator generator = Generators.getService(StubGenerator.class, language); DefaultGeneratorParameters generatorParams = new DefaultGeneratorParameters(config, InternalGeneratorUtils.createHeader()); generator.generateStubs(generatorParams, outputDirectory); return 0; } "	0	1	0	0	1	0
"@Test public void testSort() { final MongoContainer<Customer> mc = builder().build();  final Object[] columns = { ""lastName"" }; final boolean[] ascending = { false };  mc.sort(columns, ascending);  Object id1 = mc.firstItemId(); assertEquals(""Carlson"", mc.getItem(id1).getBean().getLastName());  for (int i = 0; i < mc.size(); i++) { Object id = mc.getIdByIndex(i+1); id1 = mc.nextItemId(id1); assertEquals(id1, id); }  assertEquals(mc.getItem(mc.lastItemId()).getBean().getLastName(), ""Long"");  } "	0	1	0	0	1	0
public Builder mergeFrom(com.github.horrorho.inflatabledonkey.protocol.CloudKit.Asset other) { if (other == com.github.horrorho.inflatabledonkey.protocol.CloudKit.Asset.getDefaultInstance()) return this; if (other.hasDsPrsID()) { bitField0_ |= 0x00000001; dsPrsID_ = other.dsPrsID_; onChanged(); } if (other.hasFileChecksum()) { setFileChecksum(other.getFileChecksum()); } if (other.hasSize()) { setSize(other.getSize()); } if (other.hasDownloadToken()) { bitField0_ |= 0x00000008; downloadToken_ = other.downloadToken_; onChanged(); } if (other.hasContentBaseURL()) { bitField0_ |= 0x00000010; contentBaseURL_ = other.contentBaseURL_; onChanged(); } if (other.hasDsid()) { bitField0_ |= 0x00000020; dsid_ = other.dsid_; onChanged(); } if (other.hasRecordId()) { mergeRecordId(other.getRecordId()); } if (other.hasData()) { setData(other.getData()); } if (other.hasFileSignature()) { setFileSignature(other.getFileSignature()); } if (other.hasDownloadTokenExpiration()) { setDownloadTokenExpiration(other.getDownloadTokenExpiration()); } this.mergeUnknownFields(other.getUnknownFields()); return this; } 	0	1	0	0	1	0
"private void openForWriting() { initializeHelper();  boolean performRecreate = false; try { database = helper.getWritableDatabase(); } catch (RecreateDuringMigrationException recreate) { performRecreate = true; } catch (MigrationFailedException fail) { onError(fail.getMessage(), fail); onMigrationFailed(fail.oldVersion, fail.newVersion); } catch (RuntimeException e) { onError(""Failed to open database: "" + getName(), e); throw e; }  if (performRecreate) { recreate(); } } "	0	1	0	0	1	0
"public static <E> String generateRestrictionsQuery(Criteria<E> criteria, StringJoiner restrictionJoiner, StringJoiner qJoiner, Map<String, Object> parameterMap){ if(criteria.getRestrictions().size() > 0) { RestrictionUtil.generateRestrictions(criteria, criteria.getRestrictions(), restrictionJoiner, qJoiner, parameterMap, 0); } if(restrictionJoiner.length() > 0) { if(qJoiner.length() > 0) { restrictionJoiner.add( "" ( ""+ qJoiner.toString() + "" ) ""); } return ""\nWHERE "" + restrictionJoiner.toString();  } else if(qJoiner.length() > 0) { return ""\nWHERE "" + qJoiner.toString(); } return """"; } "	0	1	0	0	1	0
"public List<WfTask> getTasks(User user, BatchPresentation batchPresentation) { if (batchPresentation.getClassPresentation() instanceof TaskObservableClassPresentation) { return taskListBuilder.getTasks(user.getActor(), batchPresentation); } if (!executorLogic.isAdministrator(user)) { throw new AuthorizationException(user + "" is not Administrator""); } Preconditions.checkNotNull(batchPresentation, ""batchPresentation""); Actor actor = user.getActor(); List<WfTask> result = Lists.newArrayList(); List<Task> tasks = new PresentationCompiler<Task>(batchPresentation).getBatch(CompilerParameters.createNonPaged()); for (Task task : tasks) { try { result.add(taskObjectFactory.create(task, actor, false, batchPresentation.getDynamicFieldsToDisplay(true))); } catch (Exception e) { log.error(""Unable to build "" + task, e); } } return result; } "	0	1	0	0	1	0
@Test public void testFromCopycatFloat() { org.apache.avro.Schema avroSchema = org.apache.avro.SchemaBuilder.builder().floatType(); assertNonRecordConversion(avroSchema, 12.2f, Schema.FLOAT32_SCHEMA, 12.2f); } 	0	1	0	0	1	0
"@Test public void testFromCopycatShort() { org.apache.avro.Schema avroSchema = org.apache.avro.SchemaBuilder.builder().intType(); avroSchema.addProp(""copycat_type"", ""int16""); assertNonRecordConversion(avroSchema, 12, Schema.INT16_SCHEMA, (short) 12); } "	0	1	0	0	1	0
@Override public IAdhocTicket findTicketByBarcode(String findBarcode) { for (int i = 0; i < currentAdhocTickets.size(); i++) { if (currentAdhocTickets.get(i).getBarcode() ==  findBarcode) { return currentAdhocTickets.get(i); }  } return null;  } 	0	1	0	0	1	0
"@Override public void l(int level, int code, String message, Exception exception) { String logMessage = code + "" : "" + message; if(level == UMLog.DEBUG) { Log.d(LOGTAG,logMessage , exception); }else if(level == UMLog.INFO) { Log.i(LOGTAG, logMessage, exception); }else if(level == UMLog.CRITICAL) { Log.e(LOGTAG, logMessage, exception); }else if(level == UMLog.VERBOSE) { Log.v(LOGTAG, logMessage, exception); }else if(level == UMLog.ERROR) { Log.e(LOGTAG, logMessage, exception); } } "	0	1	0	0	1	0
"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { //System.out.println(""In MicrotaskServlet ""); if(request.getParameter(""workerId"").equals(""consentForm"")){ request.setAttribute(""workerId"", request.getParameter(""workerId"")); request.getRequestDispatcher(ThanksPage).include(request, response); storage = StorageStrategy.initializeSingleton(); storage.insertQuitReason(null, ""consentForm""); }else if(request.getParameter(""reason"")!=null){ request.setAttribute(""workerId"", request.getParameter(""workerId"")); this.workerId = request.getParameter(""workerId""); this.answer = mapAnswerValue(request.getParameter(""reason"")); //Restore data for next Request request.setAttribute(""workerId"",this.workerId);  //String subAction = request.getParameter(""subAction"");  storage = StorageStrategy.initializeSingleton(); Worker worker = storage.readExistingWorker(this.workerId); storage.insertQuitReason(worker, this.answer); request.getRequestDispatcher(ThanksPage).include(request, response); }   } "	0	1	0	0	1	0
"private void doUnhide() { Point translation = new Point(); List<Integer> slots = findHiddenObjects(objects(), null, translation); if (slots.isEmpty()) return;  EditorState originalState = new EditorState(this);  objects().setSelected(slots); objects().replaceSelectedObjectsWithCopies();  for (int slot : slots) { EdObject obj = objects().get(slot); obj.moveBy(null, translation); }  Command cmd = new CommandForGeneralChanges(this, originalState, new EditorState(this), ""unhide"", ""Unhide""); pushCommand(cmd); } "	0	1	0	0	1	0
private View getView() { LinearLayout v = new LinearLayout(this); v.setOrientation(LinearLayout.VERTICAL); // selecting table TextView est = new TextView(this); est.setText(getString(R.string.export_csv)); v.addView(est); // adding the table spinner tableSpin = new Spinner(this); tableSpin.setId(R.id.TABLESPIN_ID); v.addView(tableSpin); // Horizontal divider View ruler1 = new View(this); ruler1.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.black)); v.addView(ruler1, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 2)); // adding the filename field TextView fnLabel = new TextView(this); fnLabel.setText(getString(R.string.export_file_qualifier)); v.addView(fnLabel); filenameValField = new EditText(this); filenameValField.setId(R.id.FILENAMEVAL_ID); v.addView(filenameValField); // Horizontal divider View ruler3 = new View(this); ruler3.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.black)); v.addView(ruler3, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 2)); // adding the export button Button button = new Button(this); button.setId(R.id.EXPORTBUTTON_ID); button.setText(getString(R.string.export_button)); button.setOnClickListener(new ButtonListener()); v.addView(button); // wrapping in a scroll view ScrollView scroll = new ScrollView(this); scroll.addView(v); return scroll; } 	0	1	0	0	1	0
private final void drawLed() { final double SIZE = control.getPrefWidth() < control.getPrefHeight() ? control.getPrefWidth() : control.getPrefHeight(); final double WIDTH = SIZE; final double HEIGHT = SIZE;  bargraph.getChildren().clear();  final Shape IBOUNDS = new Rectangle(0, 0, WIDTH, HEIGHT); IBOUNDS.setOpacity(0.0); bargraph.getChildren().add(IBOUNDS);  if (control.getOrientation() == Orientation.VERTICAL) { VBox pane = new VBox(); pane.setSpacing(0); pane.setPadding(new Insets(0, 0, 0, 0)); for (int i = 0 ; i < control.getNoOfLeds() ; i++) { pane.getChildren().add(i, ledList.get(15 - i)); } bargraph.getChildren().add(pane); } else { HBox pane = new HBox(); pane.setSpacing(0); pane.setPadding(new Insets(0, 0, 0, 0)); for (int i = 0 ; i < control.getNoOfLeds() ; i++) { pane.getChildren().add(i, ledList.get(i)); } bargraph.getChildren().add(pane); } } 	0	1	0	0	1	0
"public ReadWriterFactory setCreateIndex(final boolean createIndex) { logger.debug(""Create index for FASTQ writers is ignored""); this.samFactory.setCreateIndex(createIndex); return this; } "	0	0	0	0	1	0
"public ReadWriterFactory setReferenceFile(final File referenceFile) { logger.debug(""Reference file for FASTQ writers is ignored""); this.referenceFile = referenceFile; return this; } "	0	0	0	0	1	0
public void endWindow() { int count = cache.size() - maxSize;  if (count > 0) { Set<K> expiredKeys = priorityQueue.removeLRU(count);  for (K expiredKey: expiredKeys) { cache.remove(expiredKey); } }  changedKeys = Sets.newHashSet(); removedEntries = Maps.newHashMap(); } 	0	0	0	0	1	0
"private DataSource processTableReference(SQLParser.Table_referenceContext tableReferenceContext) { if (tableReferenceContext.table_atom() != null) { return processTableAtom(tableReferenceContext.table_atom()); } else if (tableReferenceContext.table_join() != null) { return processTableJoin(tableReferenceContext.table_join()); } throw new ParseException(String.format(""Unsupported table reference type: \'%s\'"", tableReferenceContext.getText())); } "	0	0	0	0	1	0
"private void searchPdfTest(final String filename, final String[] searchStrings) throws Exception {  String testTag = ""search"";  openFile(filename);  // Get the page view for the opened document which we can use for pinch actions UiObject pageView = getUiObjectByResourceId(""com.adobe.reader:id/pageView"", ""android.widget.RelativeLayout""); for (int i = 0; i < searchStrings.length; i++) { String runName = (i == 0) ? ""first_word"" : ""second_word""; timingResults.put(String.format(testTag + ""_"" + runName), searchTest(searchStrings[i])); }  exitDocument(); } "	0	0	0	0	1	0
public static XmoduleDefinition findParentModule(Xnode from) { Xnode moduleDef = from.find(Xcode.FMODULEDEFINITION); if(moduleDef == null){ return null; } return new XmoduleDefinition(moduleDef.getElement()); } 	0	0	0	0	1	0
@Override public Collection<MetaClass> getAllSuperTypesAndInterfaces() { final Collection<MetaClass> supersAndIfaces = new ArrayList<MetaClass>(); addSuperTypesAndInterfaces(this, supersAndIfaces);  return supersAndIfaces; } 	0	0	0	0	1	0
"private List<ComfoxMessage> getprojectRelatedMessages(GraphTraversalSource traversal, Vertex messageVertex) { try { Vertex project = traversal.V(messageVertex).both().hasLabel(""project"").next(); Long count = traversal.V(project).both().count().next(); return asList(new ComfoxMessage( String.format(""#Jigsaw says: #%s has %s people"", project.property(""name"").value().toString(), count), null, ""comfox"", null, null, null)); } catch (Exception e) { return asList(); } } "	0	0	0	0	1	0
"@Override public boolean onCommand(CommandSender sender, Command command, String label, String[] args) { if (command.getName().equalsIgnoreCase(""eshop"")) { if (args.length > 0 && args[0].equalsIgnoreCase(""reload"")) { eshop.handleReload(sender); } else { eshop.handleCommand(sender, command); } }  return true; } "	0	0	0	0	1	0
public void moveRight() { if (adjustmentIsLegal(0, 1)) { falling.setX(falling.getX() + 1); redrawBoard(); } } 	0	0	0	0	1	0
private void checkForFullRows() { int scoreAdjustment = 0; for (int row = 0; row < rows; row++) { int nonEmpty = 0; for (int col = 0; col < columns; col++) { if (area[row][col].getChar() != Block.EMPTY) { nonEmpty++; } } if (nonEmpty == columns) { scoreAdjustment++; dropAllRowsAbove(row); } } scoreKeeper.increaseScore(scoreAdjustment); } 	0	0	0	0	1	0
public static void deleteList(Realm realm, RBookList list) { if (list != null) { realm.executeTransaction(tRealm -> { // First, delete the list items (unless this is a smart list). if (!list.isSmartList()) list.getListItems().clear(); // Then, delete the book list. list.removeFromRealm(); }); } } 	0	0	0	0	1	0
"public static CallbackQuery createCallbackQuery(JSONObject jsonObject, TelegramBot telegramBot) {  CallbackQuery callbackQuery = null; if (jsonObject != null) {  if (!jsonObject.isNull(""message"")) {  if(!jsonObject.isNull(""game_short_name"")) {  callbackQuery = GameMessageMessageCallbackQueryImpl.createGameCallbackQuery(jsonObject, telegramBot); } else {  callbackQuery = MessageCallbackQueryImpl.createCallbackQuery(jsonObject, telegramBot); } } else if (!jsonObject.isNull(""inline_message_id"")) {  if(!jsonObject.isNull(""game_short_name"")) {  callbackQuery = GameInlineCallbackQueryImpl.createGameInlineCallbackQuery(jsonObject, telegramBot); } else {  callbackQuery = InlineCallbackQueryImpl.createInlineCallbackQuery(jsonObject, telegramBot); } } else {  callbackQuery = new CallbackQueryImpl(jsonObject, telegramBot);  System.err.println(""The Telegram Bot API didn't return a Message or Inline Message ID for the CallbackQuery, send @zackpollard the following output or create a github issue.""); System.err.println(callbackQuery.asJson().toString(4)); } }  return callbackQuery; } "	0	0	0	0	1	0
boolean contains(Integer id) { return bookmarks.contains(id); } 	0	0	0	0	1	0
private void updateStatusUi() { // Turn off the audio unless it is connected. if (mSensorPresenter != null) { if (!mHasError && mSourceStatus == SensorStatusListener.STATUS_CONNECTED && mCurrentSource != null) { updateAudio(mLayout.audioEnabled, getSonificationType( mParentFragment.getActivity())); } else { updateAudio(false, ScalarDisplayOptions.DEFAULT_SONIFICATION_TYPE); } } if (mCardViewHolder == null) { return; } updateCardMenu(); if (!mHasError && mSourceStatus == SensorStatusListener.STATUS_CONNECTED) { mCardViewHolder.flipButton.setVisibility(View.VISIBLE); mCardViewHolder.statusViewGroup.setVisibility(View.GONE); return; } mCardViewHolder.flipButton.setVisibility(View.GONE); mCardViewHolder.statusViewGroup.setVisibility(View.VISIBLE); mCardViewHolder.statusRetryButton.setVisibility(View.GONE); if (mHasError) { // An error if (mRetryClickListener != null) { mCardViewHolder.statusRetryButton.setVisibility(View.VISIBLE); mCardViewHolder.statusRetryButton.setOnClickListener(mRetryClickListener); } mCardViewHolder.statusMessage.setText( mCardViewHolder.getContext().getText(R.string.sensor_card_error_text)); mCardViewHolder.statusProgressBar.setVisibility(View.GONE); } else if (mSourceStatus != SensorStatusListener.STATUS_CONNECTING) { // Unknown status. mCardViewHolder.statusMessage.setText( mCardViewHolder.getContext().getText(R.string.sensor_card_error_text)); mCardViewHolder.statusProgressBar.setVisibility(View.GONE); } else { // Show a progress bar inside the card while connecting. mCardViewHolder.statusMessage.setText( mCardViewHolder.getContext().getText(R.string.sensor_card_loading_text)); mCardViewHolder.statusProgressBar.setVisibility(View.VISIBLE); } } 	0	0	0	0	1	0
"protected synchronized void setState(final CellState state) { if (this.myState == null && state == null) throw new IllegalStateException(""Can't remain in null state""); if (this.myState != null && state != null && this.myState.equals(state)) throw new IllegalStateException(""Can't remain in same state"");  LOG.trace(""Transitioning to: "" + state); this.myState = state; this.myStates.onNext(state); } "	0	0	0	0	1	0
"public String getPvpMessage(String killer) { String msg = getMessage(""PVP""); return msg.replace(""%a"", killer); } "	0	0	0	0	1	0
public void setDongyEnble() { if (fullnameflag == true && emailflag == true && passwordflag == true && addressflag == true && selectedImageflag == true && checkAccountType == true) { dangkyok.setEnabled(true); dangkyok.setBackgroundColor(getResources().getColor(R.color.mauxanh));  } else { dangkyok.setEnabled(false); dangkyok.setBackgroundColor(getResources().getColor(R.color.mauxam)); dangkyok.setTextColor(getResources().getColor(R.color.actionbar_text)); }  } 	0	0	0	0	1	0
"@Test public void testApplicationBoxDeploymentRequestSerializerNotLatest() throws ParseException, IOException {  final ElasticBoxCloud elasticBoxCloud = Mockito.mock(ElasticBoxCloud.class);  final InstanceExpirationSchedule expiration = new InstanceExpirationSchedule(""terminate"", null, ""01/25/2016"", ""16:00"") { };  final ApplicationBoxDeploymentContext applicationBoxDeploymentContext = new ApplicationBoxDeploymentContext.Builder() .box(""FAKE_BOX_ID"") .boxVersion(""NOT_LATEST"") .expirationTime(expiration.getUtcDateTime()) .expirationOperation(expiration.getOperation()) .requirements(new String[]{""FAKE_CLAIM""}) .tags(new HashSet<String>() {{ add(""FAKE_TAG""); }}) .name(""FAKE_NAME"") .owner(""FAKE_OWNER"") .waitForDone(true) .cloud(elasticBoxCloud) .build();  final JSONObject request = new ApplicationBoxDeploymentSerializer().createRequest(applicationBoxDeploymentContext);  assertTrue(""policyBox id was not set"", request.getJSONObject(""lease"").getString(""expire"").equals(expiration.getUtcDateTime())); assertTrue(""policyBox id was not set"", request.getJSONObject(""lease"").getString(""operation"").equals(""terminate"")); assertTrue(""policyBox id was not set"", request.getJSONObject(""box"").getString(""id"").equals(""FAKE_BOX_ID"")); assertTrue(""policyBox id was not set"", request.getJSONArray(""instance_tags"").get(0).equals(""FAKE_TAG"")); assertTrue(""policyBox id was not set"", request.getJSONArray(""requirements"").get(0).equals(""FAKE_CLAIM"")); assertTrue(""policyBox id was not set"", request.getString(""schema"").equals(""http://elasticbox.net/schemas/deploy/application"")); assertTrue(""policyBox id was not set"", request.getString(""owner"").equals(""FAKE_OWNER"")); assertTrue(""policyBox id was not set"", request.getString(""name"").equals(""FAKE_NAME"")); } "	0	0	0	0	1	0
public void end() { this.mSoundPool.release(); this.mPathStreamIDsMap.clear(); this.mPathSoundIDMap.clear(); this.mEffecToPlayWhenLoadedArray.clear();  this.mLeftVolume = 0.5f; this.mRightVolume = 0.5f;  this.initData(); } 	0	0	0	0	1	0
"private void buildTags() { final StringBuilder sbTags = new StringBuilder(); for (Tag tag : picture.getListTags()) { sbTags.append(tag.getValue()); sbTags.append("", ""); } if (sbTags.length() > 2) { sbTags.setLength(sbTags.length() - 2); } tagsTxt.setText(sbTags.toString());  if (picture.getUser().getLogin().equals(app.currentUser().getLogin())) { tagsEditTxt.setText(sbTags.toString()); tagsEditBtn.setOnMouseClicked(new EventHandler<MouseEvent>() { @Override public void handle(final MouseEvent mouseEvent) { editTags(mouseEvent); } }); } } "	0	0	0	0	1	0
"LocalizedAssetBody getPseudoLocalizedAsset(Repository repository, FileMatch sourceFileMatch) throws CommandException { consoleWriter.a("" - Processing locale: "").fg(Color.CYAN).a(outputBcp47tag).print();  try { Asset assetByPathAndRepositoryId = assetClient.getAssetByPathAndRepositoryId(sourceFileMatch.getSourcePath(), repository.getId());  String assetContent = commandHelper.getFileContent(sourceFileMatch.getPath());  // TODO(P1) This is to inject xml:space=""preserve"" in the trans-unit element // in the xcode-generated xliff until xcode fixes the bug of not adding this attribute // See Xcode bug http://www.openradar.me/23410569 if (sourceFileMatch.getFileType().getClass() == XcodeXliffFileType.class) { assetContent = commandHelper.setPreserveSpaceInXliff(assetContent); }  LocalizedAssetBody pseudoLocalizedAsset = assetClient.getPseudoLocalizedAssetForContent( assetByPathAndRepositoryId.getId(), assetContent, sourceFileMatch.getFileType().getFilterConfigIdOverride());  logger.trace(""PseudoLocalizedAsset content = {}"", pseudoLocalizedAsset.getContent()); return pseudoLocalizedAsset; } catch (AssetNotFoundException e) { throw new CommandException(""Asset with path ["" + sourceFileMatch.getSourcePath() + ""] was not found in repo ["" + repositoryParam + ""]"", e); } } "	0	0	0	0	1	0
"@Override public void execute() throws CommandException { consoleWriter.newLine().a(""Pull pseudo localized asset from repository: "").fg(Color.CYAN).a(repositoryParam).println(2);  repository = commandHelper.findRepositoryByName(repositoryParam);  commandDirectories = new CommandDirectories(sourceDirectoryParam, targetDirectoryParam);  for (FileMatch sourceFileMatch : commandHelper.getSourceFileMatches(commandDirectories, fileType, sourceLocale, sourcePathFilterRegex)) { consoleWriter.a(""Localizing: "").fg(Color.CYAN).a(sourceFileMatch.getSourcePath()).println(); generatePseudoLocalizedFiles(repository, sourceFileMatch); } consoleWriter.fg(Color.GREEN).newLine().a(""Finished"").println(2); } "	0	0	0	0	1	0
private boolean isDraggableViewUnder(int x, int y) { return getVisibility() == VISIBLE && viewDragHelper.isViewUnder(this, x, y); } 	0	0	0	0	1	0
@Override public int clampViewPositionVertical(View child, int top, int dy) { return Math.min(Math.max(top, dragViewExpandedTop), dragViewBottom); } 	0	0	0	0	1	0
"private void addOrderSeries(final Document document, final Entity entity, final List<String> orderHeader) throws DocumentException { PdfPTable table = PdfUtil.createTableWithHeader(4, orderHeader, false); List<Entity> genealogies = getGenealogies(entity); Collections.sort(genealogies, new EntityOrderNumberComparator()); for (Entity genealogy : genealogies) { Entity order = (Entity) genealogy.getField(""order""); table.addCell(new Phrase(order.getField(""number"").toString(), PdfUtil.getArialRegular9Dark())); table.addCell(new Phrase(order.getField(""name"").toString(), PdfUtil.getArialRegular9Dark())); Entity product = (Entity) order.getField(""product""); if (product == null) { table.addCell(new Phrase("""", PdfUtil.getArialRegular9Dark())); } else { table.addCell(new Phrase(product.getField(""name"").toString(), PdfUtil.getArialRegular9Dark())); } table.addCell(new Phrase(genealogy.getField(""batch"").toString(), PdfUtil.getArialRegular9Dark())); } document.add(table); } "	0	0	0	0	1	0
@Test public void addLayerInputOnly() { NeuralNetwork nn = new NeuralNetwork(); nn.addLayer(2); ArrayList<Perceptron> inputLayer = nn.layers.get(0); for(Perceptron p : inputLayer) { assertNull(p.inputs); assertNull(p.outputs); } } 	0	0	0	0	1	0
"public void test11() { GrammarRelation[] ddd = WordNetProvider.getInstance().getPossibleGrammarForms(""витая""); System.out.println(Arrays.toString(ddd)); Euristic matched = matched(getRulesList11(), ""ложечка витая""); assertNotNull(matched); } "	0	0	0	0	1	0
@Override public boolean supportsFoldRegions(Document document, boolean quick) { return textRange != null && items.stream().allMatch(i -> i.supportsFoldRegions(document, quick)); } 	0	0	0	0	1	0
@Override public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) { // If the entity is a living entity if (entity instanceof EntityLivingBase) { entity.attackEntityFrom(DamageSource.cactus, 1);  if (world.getBlockMetadata(x, y, z) == 1) { ((EntityLiving) entity).addPotionEffect(new PotionEffect(Potion.poison.id, 7 * 20, 0)); } else if (world.getBlockMetadata(x, y, z) == 2) { entity.setFire(7); } } } 	0	0	0	0	1	0
"public void testListenerIsCallableFromNetworkThreads() throws Throwable { ThreadPool threadPool = new TestThreadPool(""testListenerIsCallableFromNetworkThreads""); try { final PlainListenableActionFuture<Object> future; if (randomBoolean()) { future = PlainListenableActionFuture.newDispatchingListenableFuture(threadPool); } else { future = new PlainListenableActionFuture<>(); } final CountDownLatch listenerCalled = new CountDownLatch(1); final AtomicReference<Throwable> error = new AtomicReference<>(); final Object response = new Object(); future.addListener(new ActionListener<Object>() { @Override public void onResponse(Object o) { listenerCalled.countDown(); }  @Override public void onFailure(Exception e) { error.set(e); listenerCalled.countDown(); } }); Thread networkThread = new Thread(new AbstractRunnable() { @Override public void onFailure(Exception e) { error.set(e); listenerCalled.countDown(); }  @Override protected void doRun() throws Exception { future.onResponse(response); } }, Transports.TEST_MOCK_TRANSPORT_THREAD_PREFIX + ""_testListenerIsCallableFromNetworkThread""); networkThread.start(); networkThread.join(); listenerCalled.await(); if (error.get() != null) { throw error.get(); } } finally { ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS); } } "	0	0	0	0	1	0
public final void expand(int index) { expand(index); } 	0	0	0	0	1	0
"public void startCapturingVideo(File file) { if (file == null) { file = new File(getContext().getExternalFilesDir(null), ""video.mp4""); } if (mCameraController.startVideo(file)) { mUiHandler.post(new Runnable() { @Override public void run() { mKeepScreenOn = getKeepScreenOn(); if (!mKeepScreenOn) setKeepScreenOn(true); } }); } } "	0	0	0	0	1	0
"private void parseEntity(int index) { /* * Get all the information from the JSON and process the data into * strings that the class can uses */ String entityID = json.getString(index, ENTITYID).replaceAll(regEx, """"); String[] drop = json.getString(index, DROPS).replaceAll(regEx, """").split("",+""); float min = Float.parseFloat(json.getString(index, MIN).replaceAll(regEx, """")); float max = Float.parseFloat(json.getString(index, MAX).replaceAll(regEx, """"));  if (!json.getString(index, MODID).equalsIgnoreCase(MINECRAFT)) entityName.append(json.getString(index, MODID).replaceAll(regEx, """")).append(""."");  if (entityID.endsWith(""*"")) { isWildCard = true; entityID = entityID.substring(0, entityID.lastIndexOf(""*"")); }  entityName.append(entityID);  if (isWildCard) wildcardMap.add(new EntityData(entityName.toString(), drop, min, max)); else entityMap.put(entityName.toString(), new EntityData(drop, min, max));  } "	0	0	0	0	1	0
private static Document parseText(String text) throws DocumentException {  final SAXReader reader = new SAXReader(); final String encoding = getEncoding(text);  InputSource source = new InputSource(new StringReader(text)); source.setEncoding(encoding);  return reader.read(source); } 	0	0	0	0	1	0
@Override protected void checkAndDropBlock(World world, int x, int y, int z) { int meta = world.getBlockMetadata(x, y, z); if (!this.canBlockStay(world, x, y, z, meta)) { this.dropBlockAsItem(world, x, y, z, meta, 0); world.setBlockToAir(x, y, z); } } 	0	0	0	0	1	0
"public synchronized void insertOrUpdateAppDetails(AppInfo appInfo) { SQLiteDatabase db = getWritableDatabase();  Cursor c = null; try { c = db.query(AppDetailsTable.DATABASE_TABLE_NAME, new String[] { AppDetailsTable.ROWID }, AppDetailsTable.APPINFO_ID + ""=?"", new String[] { Long.toString(appInfo.getId()) }, null, null, null); if (c.getCount() < 1 || !c.moveToNext()) { saveAppDetails(appInfo); } else { long id = saveAppDetails(db, appInfo); appInfo.getDetails().setId(id); updateAppDetails(appInfo.getDetails()); } } finally { if (c != null) { c.close(); } } } "	0	0	0	0	1	0
"public static String notContains() { return getInstance().getString(""not_contains"", """"); } "	0	0	0	0	1	0
"public static String blackList() { return getInstance().getString(""black_list"", """"); } "	0	0	0	0	1	0
"@Override public boolean onTouch(View v, MotionEvent event) { if (deactivated) return false; switch (event.getAction() & MotionEvent.ACTION_MASK) {  case MotionEvent.ACTION_DOWN: click = true; //gesture has begun float x; float y;  mActivePointerId = event.getPointerId(0);  x = event.getX(); y = event.getY();  initialXPress = x; initialYPress = y; break;  case MotionEvent.ACTION_MOVE: //gesture is in progress  final int pointerIndex = event.findPointerIndex(mActivePointerId); //TODO figure out what causes this multitouch problem and implement a proper fix // FIXME: 20/01/2016 //Log.i(""pointer index: "" , Integer.toString(pointerIndex)); if(pointerIndex < 0 || pointerIndex > 0 ){ break; }  final float xMove = event.getX(pointerIndex); final float yMove = event.getY(pointerIndex);  //calculate distance moved final float dx = xMove - initialXPress; final float dy = yMove - initialYPress;  //throw away the move in this case as it seems to be wrong //TODO: figure out why this is the case if((int)initialXPress == 0 && (int) initialYPress == 0){ //makes sure the pointer is valid break; } //calc rotation here float posX = card.getX() + dx; float posY = card.getY() + dy;  //in this circumstance consider the motion a click if (dx + dy > 5) click = false;  card.setX(posX); card.setY(posY);  //card.setRotation float distobjectX = posX - initialX; float rotation = ROTATION_DEGREES * 2.f * distobjectX / parentWidth; card.setRotation(rotation);  if (rightView != null && leftView != null){ //set alpha of left and right image float alpha = (((posX - paddingLeft) / (parentWidth * OPACITY_END))); //float alpha = (((posX - paddingLeft) / parentWidth) * ALPHA_MAGNITUDE ); //Log.i(""alpha: "", Float.toString(alpha)); rightView.setAlpha(alpha); leftView.setAlpha(-alpha); }  break;  case MotionEvent.ACTION_UP: //gesture has finished //check to see if card has moved beyond the left or right bounds or reset //card position checkCardForEvent(); //check if this is a click event and then perform a click //this is a workaround, android doesn't play well with multiple listeners  if (click) v.performClick(); //if(click) return false;  break;  default: return false; } return true; } "	0	0	0	0	1	0
"String get(NBTTagCompound data) { if (data.hasKey(_nbtKey) && data.hasKey(_nbtKey2)) { int materialId, materialData; if (_asShort) { materialId = data.getShort(_nbtKey) & 0xFF; materialData = data.getShort(_nbtKey2) & 0xFF; } else { materialId = data.getInt(_nbtKey); if (_dataAsInt) { materialData = data.getInt(_nbtKey2) & 0xFF; } else { materialData = data.getByte(_nbtKey2) & 0xFF; } } return Material.getMaterial(materialId).name() + "":"" + materialData; } return null; } "	0	0	0	0	1	0
"public boolean isParsing(){ return this.videoURL.equals(""PARSING""); } "	0	0	0	0	1	0
public List<BasicSchemaGridRow> getBasicSchemaGridRowList(String targetTerminal, Link link) { List<BasicSchemaGridRow> basicSchemaGridRows=null; if(StringUtils.equalsIgnoreCase(Constants.INPUT_SUBJOB_COMPONENT_NAME, link.getSource().getComponentName()) ||StringUtils.equalsIgnoreCase(Constants.SUBJOB_COMPONENT, link.getSource().getComponentName())) { Map<String,Schema> inputSchemaMap=(HashMap<String,Schema>)link.getSource().getProperties(). get(Constants.SCHEMA_FOR_INPUTSUBJOBCOMPONENT); if(inputSchemaMap!=null &&inputSchemaMap.get(targetTerminal)!=null) basicSchemaGridRows=SchemaSyncUtility.INSTANCE. convertGridRowsSchemaToBasicSchemaGridRows(inputSchemaMap.get(targetTerminal).getGridRow()); } else { Schema previousComponentSchema=(Schema)link.getSource().getProperties().get(Constants.SCHEMA); if (previousComponentSchema != null) basicSchemaGridRows=SchemaSyncUtility.INSTANCE. convertGridRowsSchemaToBasicSchemaGridRows(previousComponentSchema.getGridRow()); } return basicSchemaGridRows; } 	0	0	0	0	1	0
"private void setActionBar(View v) { ImageButton saveButton = (ImageButton)v.findViewById(R.id.saveButton); saveButton.setOnClickListener(new View.OnClickListener() {  public void onClick(View v) { saveNote(); activity.finish(); } });  ImageButton exportButton = (ImageButton)v.findViewById(R.id.exportButton); exportButton.setOnClickListener(new View.OnClickListener() {  public void onClick(View v) { exportNote();  } });  ImageButton deleteButton = (ImageButton)v.findViewById(R.id.deleteButton); deleteButton.setOnClickListener(new View.OnClickListener() {  public void onClick(View v) { deleteNote(); activity.finish();  } });  ImageButton shareButton = (ImageButton)v.findViewById(R.id.shareButton); shareButton.setOnClickListener(new View.OnClickListener() {  public void onClick(View v) { Intent intent = new Intent(Intent.ACTION_SEND); intent.setType(getString(R.string.mimetype_text));  if(content != null) { intent.putExtra(Intent.EXTRA_SUBJECT, ""Note for "" + content.getTitle()); String text = editText.getText().toString(); intent.putExtra(Intent.EXTRA_TEXT, text + ""\n\n"" + getString(R.string.shared_via));  Intent chooser = Intent.createChooser(intent, getString(R.string.tell_friend) + "" "" + content.getTitle()); startActivity(chooser); } else { Toast.makeText(activity, getString(R.string.no_data_msg), Toast.LENGTH_LONG).show(); }  } }); } "	0	0	0	0	1	0
"private void enterContactsScreen() { // TODO: hardcoded click position and menu text onView(isRoot()).perform(TestUtils.clickScreenPosition(0, 0)); onView(withText(""Contacts"")).perform(click()); } "	0	0	0	0	1	0
public AuthToken getToken() { return localDataManager.get(Options.ACCESS_TOKEN.name(), AuthToken.class); } 	0	0	0	0	1	0
"public void signalResponseAvailable() { // NOTE: this is asynchronous log.i(t, ""["" + this.hashCode() + ""] signalResponseAvailable()""); loadJavascriptUrl(""javascript:odkData.responseAvailable();""); } "	0	0	0	0	1	0
public void process(WatchedEvent event) { event.getState(); NodeEvent nEvent = new NodeEvent(realPath(event.getPath()), eventType(event)) ; try { nodeWatcher.onEvent(nEvent); } catch (Exception e) { e.printStackTrace(); } } 	0	0	0	0	1	0
private void startNWinnersActivity(Group group) { Intent intent = new Intent(this, NWinnersActivity.class); intent.putExtra(Constants.INTENT_EXTRA_GROUP, group); startActivity(intent); } 	0	0	0	0	1	0
@Override public boolean isValid() { return StringUtils.isNotBlank(this.number); } 	0	0	0	0	1	0
"@SubscribeEvent public void renderWorldLast(RenderWorldLastEvent event) { Profiler profiler = Minecraft.getMinecraft().mcProfiler;  profiler.startSection(""wizardry-particle"");  for (ParticleRenderQueue queue : queues) { profiler.startSection(queue.name()); queue.dispatchQueuedRenders(Tessellator.getInstance()); profiler.endSection(); }  profiler.endSection();  } "	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_guide_list);  Toolbar guideListToolbar = (Toolbar) findViewById(R.id.guide_list_toolbar); setSupportActionBar(guideListToolbar);  guideListToolbar.setTitleTextColor(0xFFFFFFFF);  if(getSupportActionBar() != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setDisplayShowHomeEnabled(true); }  Bundle bundle = getIntent().getExtras();  pinPointID = bundle.getString(""pin_point_id"");  searchView = (SearchView) findViewById(R.id.guide_list_searchview); searchEditText = (EditText) findViewById(R.id.search_src_text); closeButton = (ImageView) findViewById(R.id.search_close_btn); recyclerView = (RecyclerView) findViewById(R.id.guide_list_recyclerView);  recyclerView.setHasFixedSize(true); recyclerView.setLayoutManager(new LinearLayoutManager(this));  guideDataList = new ArrayList<>();  StringRequest stringRequestForStdList = new StringRequest(Request.Method.POST, guideListUrl, new Response.Listener<String>() { @Override public void onResponse(String response) { try { JSONObject jsonObject = new JSONObject(response); JSONArray jsonArray = jsonObject.getJSONArray(""guide_list_to_hire"");  for (int i = 0; i < jsonArray.length(); i++) { JSONObject obj = jsonArray.getJSONObject(i);  GuideData guideData = new GuideData( obj.getString(""user_id""), obj.getString(""nick_name""), obj.getString(""mobile_phone""), obj.getString(""email"")); guideDataList.add(guideData); }  guideListAdapter = new GuideListAdapter(guideDataList, GuideListActivity.this); recyclerView.setAdapter(guideListAdapter); } catch (JSONException e) { Toast.makeText(GuideListActivity.this, response, Toast.LENGTH_LONG).show(); e.printStackTrace(); } } }, new Response.ErrorListener() { @Override public void onErrorResponse(VolleyError error) { Toast.makeText(GuideListActivity.this, error.getMessage(), Toast.LENGTH_LONG).show(); error.printStackTrace(); } }) { @Override protected Map<String, String> getParams() throws AuthFailureError { Map<String, String> params = new HashMap<>();  params.put(""pin_point_id"", pinPointID);  return params; } };  MySingleton.getMyInstance(GuideListActivity.this).addToRequestQueue(stringRequestForStdList);  searchView.onActionViewExpanded(); searchView.setIconifiedByDefault(false); searchView.setQueryHint(""Search Guides To Hire"");  if(!searchView.isFocused()) { searchView.clearFocus(); }  //        stdSearchView.setOnClickListener(new View.OnClickListener() { //            @Override //            public void onClick(View v) { //                searchView.setIconified(false); //            } //        });  searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() { @Override public boolean onQueryTextSubmit(String query) {  return false; }  @Override public boolean onQueryTextChange(String newText) {  //                guideListAdapter.checkQueryFromList(newText.toLowerCase()); //                Toast.makeText(StudentList.this, newText, Toast.LENGTH_LONG).show();  return true; } });  closeButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { //Clear the text from EditText view searchEditText.setText("""");  //Clear query searchView.setQuery("""", false); guideListAdapter.notifyDataSetChanged(); searchView.clearFocus(); } }); } "	0	0	0	0	1	0
"@Override public String call(String input) { return input + ""map""; } "	0	0	0	0	1	0
"public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException { HttpServletResponse response = (HttpServletResponse) res; HttpServletRequest request = (HttpServletRequest) req;  response.setHeader(""Access-Control-Allow-Origin"", ""http://localhost:3000""); response.setHeader(""Access-Control-Allow-Credentials"", ""true""); response.setHeader(""Access-Control-Allow-Methods"", ""POST, PUT, GET, OPTIONS, DELETE""); response.setHeader(""Access-Control-Max-Age"", ""3600""); response.setHeader(""Access-Control-Allow-Headers"", ""x-requested-with, Authorization, Content-Type, x-auth-token"");  if (""OPTIONS"".equalsIgnoreCase(request.getMethod())) { response.setStatus(HttpServletResponse.SC_OK); } else { chain.doFilter(req, res); } } "	0	0	0	0	1	0
"public void openKitGUI(Player player) {  Inventory kitInv = Bukkit.createInventory(player, 9, rApi.colourize(""&eKits""));  //ItemStacks displayed in kitInv ItemStack fighterLogo = rApi.createCustomItem(Material.SHIELD, 1, ""&cFighter"", ""&3Get the Fighter Kit!""); ItemStack rangerLogo = rApi.createCustomItem(Material.BOW, 1, ""&fRanger"", ""&3Get the Ranger Kit!"");  kitInv.setItem(0, fighterLogo); kitInv.setItem(1, rangerLogo);  player.openInventory(kitInv); } "	0	0	0	0	1	0
"private static void printMenuMessage(byte i) { if(i==1) { System.out.println(""#   $$$$  $$ $$   $$$   $$    $$    $$$$$  $   $   $$$$  $$$$$  #""); System.out.println(""#  $$     $$ $$  $$ $$  $$    $$    $$     $$  $  $$     $$     #""); System.out.println(""#  $      $$$$$  $$$$$  $$    $$    $$$$   $ $ $  $   $$ $$$    #""); System.out.println(""#  $$     $$ $$  $$ $$  $$    $$    $$     $  $$  $$   $ $$     #""); System.out.println(""#   $$$$  $$ $$  $$ $$  $$$$$ $$$$$ $$$$$  $   $   $$$$  $$$$$  #"");  System.out.println(""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~""); System.out.println(""\t\tCHALLENGE - MINIGAMES""); System.out.println(""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"");  System.out.println(LSD.getString(""prMeMsg_msg1"")); System.out.println(LSD.getString(""prMeMsg_msg2"")); System.out.println(LSD.getString(""prMeMsg_msg3"")); }else if(i==2){ System.out.println(LSD.getString(""prMeMsg_msg4"")); System.out.println(LSD.getString(""prMeMsg_msg5"")); } } "	0	0	0	0	1	0
public void denyRole(String role, Permission permission) { BitSet bsDeny = roleDenyPermissions.get(role); if (bsDeny == null) { bsDeny = new BitSet(); bsDeny.set(permission.ordinal()); roleDenyPermissions.put(role, bsDeny); } else { bsDeny.set(permission.ordinal()); }  BitSet bsAllow = roleAllowPermissions.get(role); if (bsAllow != null) { bsAllow.clear(permission.ordinal()); } } 	0	0	0	0	1	0
"@Test public void TestProjectManager() { // test ProjectManager //load Projects try { main.main(null); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); }  //test void methods managerTest = new ProjectManager(); managerTest.loadProjects(); managerTest.saveProjects(); managerTest.getProject(1).removeComponents(1); managerTest.getProject(1).removeDefectEntry(1); managerTest.getProject(1).removeRequirement(1); managerTest.getProject(1).removeReviews(1); managerTest.getProject(1).removeTimeEntry(1); managerTest.getProject(1).removeUserTests(1);  //test booleans assertNotNull(managerTest.getAllProjects()); assertNotNull(managerTest.getProject(1)); assertTrue(managerTest.deleteProject(1)); assertTrue(managerTest.clearAllProjects()); assertTrue(managerTest.newProject(""Junit"", ""Unit Test"", PSPType.PSP1));  } "	0	0	0	0	1	0
"@Override public boolean validateCertificate(String certificate, String key, String domainSuffix) { if (certificate == null || certificate.isEmpty() || key == null || key.isEmpty() || domainSuffix == null || domainSuffix.isEmpty()) { s_logger.error(""Invalid parameter found in (certificate, key, domainSuffix) tuple for domain: "" + domainSuffix); return false; }  try { String ksPassword = ""passwordForValidation""; byte[] ksBits = CertificateHelper.buildAndSaveKeystore(domainSuffix, certificate, getKeyContent(key), ksPassword); KeyStore ks = CertificateHelper.loadKeystore(ksBits, ksPassword); if (ks != null) return true;  s_logger.error(""Unabled to construct keystore for domain: "" + domainSuffix); } catch (Exception e) { s_logger.error(""Certificate validation failed due to exception for domain: "" + domainSuffix, e); } return false; } "	0	0	0	0	1	0
"@Test public void testSF0FilterStyle() throws Exception { final String nameFilter = ""filterBob""; final String custodianFilter = ""filterCustodian""; final String dateOfDrilling = ""1986-10-09""; final int maxFeatures = 10; final FilterBoundingBox bbox = null;  String filter = service.getFilter(nameFilter, custodianFilter, dateOfDrilling, maxFeatures, bbox, null);  String style = service.getStyle(filter, null, ""#2242c7"", Styles.ALL_BOREHOLES); Assert.assertNotNull(style); Assert.assertThat(style, Matchers.containsString(""gsmlp:BoreholeView""));  } "	0	0	0	0	1	0
"public void updateCapacity() { Unit unit = (Unit) Cache.getInstance().retrieve(""unit"");  try { unit.setAvailableBeds(Integer.parseInt(view.getAvailableBedsUiElement().getValue())); unit.setPotentialDc(Integer.parseInt(view.getPotentialDcUiElement().getValue())); unit.setDcByDeadline(Integer.parseInt(view.getDcByDeadlineUiElement().getValue())); unit.setTotalAdmits(Integer.parseInt(view.getTotalAdmitsUiElement().getValue())); unit.setAdmitsByDeadline(Integer.parseInt(view.getAdmitsByDeadlineUiElement().getValue())); }catch(NumberFormatException e){  }  Service.updateOrSaveUnit(unit); //} Bootstrapper.FACTORY.newDispatcher().goToCapacityOverview(); } "	0	0	0	0	1	0
@Override protected StringConverter<LocalTime> getConverter() { return jfxTimePicker.getConverter(); } 	0	0	0	0	1	0
public boolean isVisited(Element element) { return profile.containsKey(element); } 	0	0	0	0	1	0
private static <V> ValueHolder<V> newValueHolder(V value) { return new ByRefOnHeapValueHolder<V>(value, SystemTimeSource.INSTANCE.getTimeMillis()); } 	0	0	0	0	1	0
@Bean public AppRegistryController appRegistryController(AppRegistry appRegistry, ApplicationConfigurationMetadataResolver metadataResolver) { return new AppRegistryController(appRegistry, metadataResolver); } 	0	0	0	0	1	0
"void checkRealtime() { if (clock != null) { checkState(clock.getClockMode() == ClockMode.REAL_TIME, ""Clock must be in real-time mode, but is in %s mode."", clock.getClockMode()); // make sure we stay in rt LOGGER.debug(""check real time -> switch to real time""); clock.switchToRealTime(); } } "	0	0	0	0	1	0
"@Override public void onResponseOk(final String s, Response r) {  if (progressBar != null) { progressBar.progressiveStop(); progressBar.setVisibility(View.INVISIBLE); }  Uri.Builder builder = Uri.parse(""https://github.com/"").buildUpon();  builder.appendPath(repoInfo.owner); builder.appendPath(repoInfo.name); builder.appendPath(""raw""); builder.appendPath(repoInfo.branch);  webview.loadDataWithBaseURL(builder.build().toString() + ""/"", s, ""text/html"", ""UTF-8"", null); } "	0	0	0	0	1	0
"@Override public List<Ordering> filterAll(Map<String, Object> parameters, Integer start, Integer step) { List<Ordering> entities = new ArrayList<>(); String query = null; if (parameters == null || parameters.isEmpty()) query = ""SELECT * FROM "" + table + "" Limit "" + start + "", "" + step; else { query = createFilterQuery(parameters, start, step); }  try (Connection connection = connectionPool.getConnection(); PreparedStatement statement = connection .prepareStatement(query); ResultSet set = statement.executeQuery()) { while (set.next()) { Ordering entity = transformer.getObject(set); entities.add(entity); } } catch (Exception e) { e.printStackTrace(); } return entities; } "	0	0	0	0	1	0
"@Test public void removeDocumentsFromCollectionTest() throws Exception { addDocumentsToCollectionTest(); for (String uri: uris) { this.getDocManagement().removeDocumentFromCollections(uri, new String[] {""CLN_Custom""}); } ResultCollection<String> ids = (ResultCollection<String>) this.getDocManagement().getDocumentUris(""collections.contains(CLN_Custom), txFinish = 0"", null); assertEquals(0, ids.size()); } "	0	0	0	0	1	0
public static String getHierarchySeparator() { return CommonEditorSettings.getHierarchySeparator(); } 	0	0	0	0	1	0
public List<Task> prepareTasks(List<TaskDefinition> taskDefinitions, Job job) { List<Task> tasks = new ArrayList<>();  int taskDefinitionCollectionSize = taskDefinitions.size();  for (int i = 0; i < taskDefinitionCollectionSize; i++) { tasks.add(new Task()); Task currentTask = tasks.get(i); currentTask.setTaskDefinition(taskDefinitions.get(i)); currentTask.setJobId(job.getId()); currentTask.setStageId(job.getStageId()); currentTask.setPipelineId(job.getPipelineId()); currentTask.setType(taskDefinitions.get(i).getType()); if (currentTask.getType() == TaskType.FETCH_MATERIAL) { FetchMaterialTask fetchMaterialTask = (FetchMaterialTask) taskDefinitions.get(i); for (Material material : this.currentPipeline.getMaterials()) { if (material.getMaterialDefinition().getId().equals(fetchMaterialTask.getMaterialDefinitionId())) { fetchMaterialTask.setMaterialDefinition(material.getMaterialDefinition()); currentTask.setTaskDefinition(fetchMaterialTask); break; } } } else if (currentTask.getType() == TaskType.FETCH_ARTIFACT) { FetchArtifactTask fetchArtifactTask = (FetchArtifactTask) taskDefinitions.get(i); if (fetchArtifactTask.shouldUseLatestRun()) { Pipeline currentPipeline = (Pipeline) this.pipelineService.getById(job.getPipelineId()).getObject(); fetchArtifactTask.setDesignatedPipelineExecutionId(currentPipeline.getExecutionId()); currentTask.setTaskDefinition(fetchArtifactTask); } }  currentTask.setRunIfCondition(taskDefinitions.get(i).getRunIfCondition()); tasks.set(i, currentTask); }  return tasks; } 	0	0	0	0	1	0
public Matrix3 translate (float x, float y) { tmp[0] = 1; tmp[1] = 0; tmp[2] = 0;  tmp[3] = 0; tmp[4] = 1; tmp[5] = 0;  tmp[6] = x; tmp[7] = y; tmp[8] = 1; mul(vals, tmp); return this; } 	0	0	0	0	1	0
"public String weekSummaryStr() { int i = wins + losses - 1; Game g = gameSchedule.get(i); String gameSummary = gameWLSchedule.get(i) + "" "" + gameSummaryStr(g); String rivalryGameStr = """"; if (g.homeTeam.rivalTeam.equals(g.awayTeam.abbr)) { if ( gameWLSchedule.get(i).equals(""W"") ) rivalryGameStr = ""Won vs Rival! +2 Prestige\n""; else rivalryGameStr = ""Lost vs Rival! -2 Prestige\n""; } return rivalryGameStr + name + "" "" + gameSummary + ""\nNew poll rank: #"" + rankTeamPollScore + "" "" + abbr + "" ("" + wins + ""-"" + losses + "")""; } "	0	0	0	0	1	0
"@Override protected void addMembership(GrouperGroupInfo grouperGroupInfo, LdapGroup ldapGroup, Subject subject, LdapUser ldapUser) throws PspException {  if ( ldapUser == null ) throw new PspException(""%s: LdapUser does not exist for subject %s"", getName(), subject.getId());  String attributeValue = evaluateJexlExpression(config.getProvisionedAttributeValueFormat(), subject, grouperGroupInfo);  scheduleUserModification(ldapUser, AttributeModificationType.ADD, Arrays.asList(attributeValue)); } "	0	0	0	0	1	0
@Override public void keyTyped(final KeyEvent e) { // nothing here } 	0	0	0	0	1	0
@Override public void breakBlock(World worldIn, BlockPos pos, IBlockState state) { TileEntity tileEntity = worldIn.getTileEntity(pos); if (tileEntity instanceof TileEntityHenhouse) { InventoryHelper.dropInventoryItems(worldIn, pos, (TileEntityHenhouse) tileEntity); }  super.breakBlock(worldIn, pos, state); } 	0	0	0	0	1	0
@Override public void setState(final AppEventListner appEventListner, final AppEventListner.ApplicationState prevState, final AppEventListner.ApplicationState nextState) { widgetTag.clear(); if (prevState != null) { backEventListner = new PresenterEventListner() {  @Override public void eventFired(Button button) { appEventListner.requestApplicationState(prevState); }  @Override public String getLabel() { return prevState.label; } }; } else { backEventListner = new PresenterEventListner() {  @Override public void eventFired(Button button) { appEventListner.requestApplicationState(AppEventListner.ApplicationState.menu); }  @Override public String getLabel() { return AppEventListner.ApplicationState.menu.label; } }; } setTitle(backEventListner); if (nextState != null) { nextEventListner = new PresenterEventListner() {  @Override public void eventFired(Button button) { appEventListner.requestApplicationState(nextState); }  @Override public String getLabel() { return nextState.label; } }; simpleView.setButton(SimpleView.ButtonType.next, nextEventListner); } setContent(appEventListner); simpleView.resizeView(); widgetTag.add(simpleView); } 	0	0	0	0	1	0
"public static void findRepresentatives(String zipCode, Callback callback) {  OkHttpClient client = new OkHttpClient.Builder() .build();  HttpUrl.Builder urlBuilder = HttpUrl.parse(Constants.GOOGLE_BASE_URL + ""address="" + zipCode + ""&includeOffices=true&key=AIzaSyALQDoCiusD0Poqe2mDgGo78zoQy31U2N0"").newBuilder(); urlBuilder.addQueryParameter(Constants.GOOGLE_ZIPCODE_QUERY_PARAMETER, zipCode); String url = urlBuilder.build().toString();   Request request = new Request.Builder() .url(url) .build();  Call call = client.newCall(request); call.enqueue(callback); } "	0	0	0	0	1	0
public User findOne(Long id) { return userRepository.findOneByDeletedFalse(id); } 	0	0	0	0	1	0
@Override public int compare(ILaunchConfigurationType aFirst, ILaunchConfigurationType aSecond) { return aSecond.getName().compareTo(aFirst.getName()); } 	0	0	0	0	1	0
"private void checkForDuplicatedEntry(MzTabParser context, long lineNumber) throws LineItemParsingHandlerException { if (context.getMetaDataSection().getMsRunEntry(getIndex()).getLocation() != null) { throw new LineItemParsingHandlerException(""DUPLICATED MS-Run location entry FOUND AT LINE "" + lineNumber); } } "	0	0	0	0	1	0
@Category({ IntegrationTest.class }) @Test public void getTransactionHex() throws Exception { assertThat(steemJ.getTransactionHex(transaction), equalTo(EXPECTED_TRANSACTION_HEX)); } 	0	0	0	0	1	0
"@Override public NBTBase writeToNBT() { NBTTagCompound compound = new NBTTagCompound();  compound.setTag(""placedComponents"", NBTTagCompounds.write(placedComponents));  return compound; } "	0	0	0	0	1	0
@Override public void onClick(View v) { adapter.onBlockClick(v, position); } 	0	0	0	0	1	0
@Override public void onItemDelete(View view, int position) { mAppList.remove(position); mAdapter.notifyDataSetChanged(); } 	0	0	0	0	1	0
"@Override public boolean execute(String sql) throws SQLException { clearCurrentResults(); checkOpen();  StatementClient client = null; ResultSet resultSet = null; try { client = connection().startQuery(sql); if (client.isFailed()) { throw resultsException(client.finalResults()); }  resultSet = new PrestoResultSet(client, maxRows.get(), progressConsumer); checkSetOrResetSession(client);  // check if this is a query if (client.current().getUpdateType() == null) { currentResult.set(resultSet); return true; }  // this is an update, not a query while (resultSet.next()) { // ignore rows }  Long updateCount = client.finalResults().getUpdateCount(); currentUpdateCount.set((updateCount != null) ? updateCount : 0);  return false; } catch (RuntimeException e) { throw new SQLException(""Error executing query"", e); } finally { if (currentResult.get() == null) { if (resultSet != null) { resultSet.close(); } if (client != null) { client.close(); } } } } "	0	0	0	0	1	0
"public static <X, Y> Function<X, Y> memoize(final Function<? super X, ? extends Y> f) {  final BiFunction<X, String, Y> g = memoize((x0, x1) -> f.apply(x0));  return x -> g.apply(x, """"); } "	0	0	0	0	1	0
"@ResponseBody @RequestMapping(value = ""/search"", method = RequestMethod.POST, params = ""action=search"") public ModelAndView search(@Valid @ModelAttribute(""searchRecordsRequest"") SearchRecordsRequest searchRecordsRequest, BindingResult result, Model model) { if(!isEmptySearch(searchRecordsRequest)){ searchRecordsRequest.reset(); searchRecordsRequest.resetPageNumber(); List<BibItem> bibItems = bibSolrDocumentRepository.search(searchRecordsRequest); buildResults(searchRecordsRequest, bibItems); return new ModelAndView(""searchRecords"", ""searchRecordsRequest"", searchRecordsRequest); } searchRecordsRequest.setErrorMessage(""At least one Search Facet Box needs to be checked to get results.""); return new ModelAndView(""searchRecords"", ""searchRecordsRequest"", searchRecordsRequest); } "	0	0	0	0	1	0
public Builder add(@NotNull String prefix, @NotNull VcsRepository repository) { mapping.put(StringHelper.normalize(prefix), repository); return this; } 	0	0	0	0	1	0
"@RequestMapping(""/saml_error"") public String error401(Model model, HttpServletRequest request) { AuthenticationException exception = (AuthenticationException) request.getSession().getAttribute(WebAttributes.AUTHENTICATION_EXCEPTION); model.addAttribute(""saml_error"", exception.getMessage()); return ""external_auth_error""; } "	0	0	0	0	1	0
public <T> T setValue(T value) { this.value = value; return value; } 	0	0	0	0	1	0
@Override public AbstractOMXQueryControlAccessor<P, Map<String, Object>, R> write() { return thenApply(state -> BaseOMXQueryControl.this.doWrite(state.basePointer)); } 	0	0	0	0	1	0
"@POST @Consumes(MediaType.APPLICATION_JSON) @ApiOperation( value = ""Create an application"", notes = ""Create an application from the supplied information."", response = Application.class ) @ApiResponses(value = { @ApiResponse( code = HttpURLConnection.HTTP_CREATED, message = ""Application created successfully."", response = Application.class ), @ApiResponse( code = HttpURLConnection.HTTP_CONFLICT, message = ""An application with the supplied id already exists"" ), @ApiResponse( code = HttpURLConnection.HTTP_PRECON_FAILED, message = ""A precondition failed"" ), @ApiResponse( code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = ""Genie Server Error due to Unknown Exception"" ) }) public Response createApplication( @ApiParam( value = ""The application to create."", required = true ) final Application app ) throws GenieException { LOG.info(""Called to create new application""); final Application createdApp = this.acs.createApplication(app); return Response.created( this.uriInfo.getAbsolutePathBuilder().path(createdApp.getId()).build()). entity(createdApp). build(); } "	0	0	0	0	1	0
"@GET @Path(""/{id}"") @ApiOperation( value = ""Find an application by id"", notes = ""Get the application by id if it exists"", response = Application.class ) @ApiResponses(value = { @ApiResponse( code = HttpURLConnection.HTTP_OK, message = ""OK"", response = Application.class ), @ApiResponse( code = HttpURLConnection.HTTP_NOT_FOUND, message = ""Application not found"" ), @ApiResponse( code = HttpURLConnection.HTTP_PRECON_FAILED, message = ""Invalid id supplied"" ), @ApiResponse( code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = ""Genie Server Error due to Unknown Exception"" ) }) public Application getApplication( @ApiParam( value = ""Id of the application to get."", required = true ) @PathParam(""id"") final String id ) throws GenieException { LOG.info(""Called to get Application for id "" + id); return this.acs.getApplication(id); } "	0	0	0	0	1	0
@Override public IndexSearchResult<VcfIndexEntry> getSearchResults(List<? extends FeatureFile> files, Query query) throws IOException { if (CollectionUtils.isEmpty(files)) { return new IndexSearchResult<>(Collections.emptyList(), false, 0); }  SimpleFSDirectory[] indexes = fileManager.getIndexesForFiles(files); long indexSize = featureIndexDao.getTotalIndexSize(indexes); try (MultiReader reader = featureIndexDao.openMultiReader(indexes)) { if (reader.numDocs() == 0) { return new IndexSearchResult<>(Collections.emptyList(), false, 0); } IndexSearcher searcher = new IndexSearcher(reader, TaskExecutor.getExecutorService()); AbstractDocumentBuilder<VcfIndexEntry> documentCreator = AbstractDocumentBuilder .createDocumentCreator(files.get(0).getFormat(), vcfFilterForm.getInfoFields()); Sort sort = createSorting(vcfFilterForm.getOrderBy(), files); IndexSearchResult<VcfIndexEntry> searchResults = performSearch(searcher, reader, query, sort, documentCreator); //return 0 to prevent random access in UI if (indexSize > featureIndexDao.getLuceneIndexMaxSizeForGrouping()) { searchResults.setTotalResultsCount(0); } return searchResults; } finally { for (SimpleFSDirectory index : indexes) { IOUtils.closeQuietly(index); } } } 	0	0	0	0	1	0
"public static boolean authenticate(MetkaAuthenticationDetails details) { SecurityContext context = SecurityContextHolder.getContext(); if(context == null) { logger.error(""Authentication was requested but no SecurityContext was found""); throw new AuthenticationCredentialsNotFoundException(""Couldn't find security context""); }  PreAuthenticatedAuthenticationToken auth = new PreAuthenticatedAuthenticationToken(details.getUserName(), ""credentials"", details.getGrantedAuthorities()); auth.setDetails(details); context.setAuthentication(auth); return true; } "	0	0	0	0	1	0
"public static String getModelName(String destination, Model model) { MetkaAuthenticationDetails details = getDetails(); if(details == null || !details.getRole().hasPermission(Permission.HAS_MINIMUM_PERMISSION)) { logger.error(""User ""+getUserName()+"" didn't have minimum permission. Forwarded to AUTH_ERROR page.""); model.asMap().put(""configurationType"", ""AUTH_ERROR""); return ""authError""; } return destination; } "	0	0	0	0	1	0
"@Override public CommandResult execute(CommandSource sender, CommandContext args) throws CommandException { checkPermission(sender, WarpPermissions.UC_WARP_DELWARP_BASE); Warp warp = args.<Warp>getOne(""warp"").get(); List<Warp> warps = GlobalData.get(WarpKeys.WARPS).get(); warps.remove(warp); GlobalData.offer(WarpKeys.WARPS, warps); sender.sendMessage(Messages.getFormatted(sender, ""warp.command.delwarp.success"", ""%warp%"", warp.getName())); return CommandResult.success(); } "	0	0	0	0	1	0
private void quitUpdateThread() { if (mThread != null) { mThread.interrupt(); mThread = null; } } 	0	0	0	0	1	0
@Test public void noSignalRealTime() { Duration verifyDuration = StepVerifier.create(Mono.never()) .expectSubscription() .expectNoEvent(Duration.ofSeconds(1)) .thenCancel() .verify(Duration.ofMillis(1100));  assertThat(verifyDuration.toMillis(), is(greaterThanOrEqualTo(1000L))); } 	0	0	0	0	1	0
@Test public void testThenConsumeWhileWithConsumer() { LongAdder count = new LongAdder();  StepVerifier.create(Flux.range(3, 8)) .expectNextMatches(first -> first == 3) .thenConsumeWhile(v -> v < 9, v -> count.increment()) .expectNext(9) .expectNext(10) .expectComplete() .log() .verify();  assertThat(count.intValue(), is(5)); } 	0	0	0	0	1	0
"@Test public void verifyDuration() { long interval = 200; Flux<String> flux = Flux.interval(Duration.ofMillis(interval)) .map(l -> ""foo"") .take(2);  Duration duration = StepVerifier.create(flux) .thenAwait(Duration.ofSeconds(100)) .expectNext(""foo"") .expectNext(""foo"") .expectComplete() .verify(Duration.ofMillis(500));  Assert.assertTrue(duration.toMillis() > 2 * interval); } "	0	0	0	0	1	0
"public void checkStudyInCookie(Study study, Cookie cookie) throws ForbiddenPublixException { if (cookie != null) { String[] studyUuidArray = cookie.value().split("",""); for (String uuidStr : studyUuidArray) { if (study.getUuid().equals(uuidStr)) { throw new ForbiddenPublixException( PublixErrorMessages.STUDY_CAN_BE_DONE_ONLY_ONCE); } } } } "	0	0	0	0	1	0
"private void handleChangeManagerStatusRequest(HttpServletRequest req, Map<String, Object> ret, boolean enableMetricManager) { try { logger.info(""Updating metric manager status""); if (MetricReportManager.isAvailable()) { MetricReportManager metricManager = MetricReportManager.getInstance(); if (enableMetricManager) { metricManager.enableManager(); } else { metricManager.disableManager(); } ret.put(STATUS_PARAM, RESPONSE_SUCCESS); } else { ret.put(RESPONSE_ERROR, ""MetricManager is not available""); } } catch (Exception e) { logger.error(e); ret.put(RESPONSE_ERROR, e.getMessage()); } } "	0	0	0	0	1	0
@Override public void logHistory(Project project) {  try { UUID uuid = UUID.randomUUID(); ProjectHistoryRoot batch = new ProjectHistoryRoot(); batch.setId(uuid); batch.setReason(project.getReason());  boolean projectHistoryRootSaved = false;  ProjectHistory projectHistory = new ProjectHistory(project); projectHistory.setBatch(batch); ProjectHistory recentPh = projectHistoryDao.findMostRecent(project);  if (recentPh == null) { projectHistory.setEvent(ProjectHistory.EVENT_TYPE_INSERT); }  if (recentPh == null || ObjectDiff.isDifferent(projectHistory, recentPh, projectHistoryFields)) { projectHistoryRootDao.save(batch); projectHistoryRootSaved = true; projectHistoryDao.save(projectHistory); }  for (Contract contract : project.getContracts()) { ContractHistory contractHistory = new ContractHistory(contract); contractHistory.setBatch(batch); ContractHistory recentCh = contractHistoryDao.findMostRecent(contract);  if (recentCh == null) { contractHistory.setEvent(ProjectHistory.EVENT_TYPE_INSERT); }  if (recentCh == null || ObjectDiff.isDifferent(contractHistory, recentCh, contractHistoryFields)) { if (!projectHistoryRootSaved) { projectHistoryRootDao.save(batch); projectHistoryRootSaved = true; }  contractHistoryDao.save(contractHistory); }  for (ContractMember cm : contract.getContractMembers()) { ContractMemberHistory contractMemberHistory = new ContractMemberHistory(cm); contractMemberHistory.setBatch(batch); ContractMemberHistory recentCmh = contractMemberHistoryDao.findMostRecent(cm);  if (recentCmh == null) { contractMemberHistory.setEvent(ProjectHistory.EVENT_TYPE_INSERT); }  if (recentCmh == null || ObjectDiff.isDifferent(contractMemberHistory, recentCmh, contractMemberHistoryFields)) { if (!projectHistoryRootSaved) { projectHistoryRootDao.save(batch); projectHistoryRootSaved = true; }  contractMemberHistoryDao.save(contractMemberHistory); }  } } } catch (PropertyReadException e) { log.warn(e.getMessage()); throw new RuntimeException(e); } } 	0	0	0	0	1	0
"@Test public void normal(){ List<TableRenderResponseTestMock> mocks = new ArrayList<TableRenderResponseTestMock>(); mocks.add(new TableRenderResponseTestMock(""a"", ""b"")); mocks.add(new TableRenderResponseTestMock(""c"", ""d"")); TableRenderResponse<TableRenderResponseTestMock> response = TableRenderResponse.<TableRenderResponseTestMock>sinPermisos(mocks); String json = response.toJSON(""campo1"", ""campo2""); assertEqualsJson(""{\""obj\"":{\""mensajes\"":{\""error\"":null,\""fatal\"":null,\""info\"":null,\""ok\"":null,\""warning\"":null},\""rows\"":[{\""objeto\"":{\""campo1\"":\""a\"",\""campo2\"":\""b\""},\""permisoBorrar\"":true,\""permisoEditar\"":true,\""permisoLeer\"":true},{\""objeto\"":{\""campo1\"":\""c\"",\""campo2\"":\""d\""},\""permisoBorrar\"":true,\""permisoEditar\"":true,\""permisoLeer\"":true}]}}"", json); } "	0	0	0	0	1	0
@Override public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) { UUID targetId = getTargetPointer().getFirst(game, source); if (targetId != null && targetId.equals(sourceId)) { if (affectedControllerId.equals(source.getControllerId())) { Card card = game.getCard(sourceId); if (card != null && game.getState().getZone(sourceId) == Zone.EXILED) { Player player = game.getPlayer(affectedControllerId); player.setCastSourceIdWithAlternateMana(sourceId, null, null); return true; } } } return false; } 	0	0	0	0	1	0
"public void reqIP(String name){ alertBuilder.clear(); try { //send and wait for response dataChannel.sendCmd(""del np-event"", name); PacketWrapper response = dataChannel.receivePacket();  //parse response if(response.type == DataChannel.TYPE_INFO) { et.append(name+"": "" + response.toString() +""\n""); } else if (response.type == DataChannel.TYPE_ERR) { et.append(response.errorMessage() + ""\n""); } else { et.append(""Unknown response from server!\n""+response.toString() + ""\n""); } } catch (NetworkException e) { et.append(e.getMessage() + ""\n""); } alertBuilder.showAlert(); } "	0	0	0	0	1	0
private void start_fall_detect_service() { boolean isChecked = sw_allow_find.isChecked(); Intent intent = new Intent(getActivity(), DetectFallService.class); if (isChecked) { getActivity().startService(intent); getActivity().bindService(intent, m_serviceConnection, BIND_AUTO_CREATE); startBindService = true;  } else { try { //cancel service getActivity().stopService(intent); if (startBindService) getActivity().unbindService(m_serviceConnection); } catch (Exception e) { Log.e(TAG, e.toString()); } } } 	0	0	0	0	1	0
public final void glTexEnvfv (int target, int pname, float[] params, int offset) { glTexEnvf(target, pname, params[offset]); } 	0	0	0	0	1	0
"@Before public void setup() throws Exception { super.setup(); serviceContext = createServiceContext(); loginAsAdmin(serviceContext);  for (String element : TEST_METADATA) { byte[] bytes = element.getBytes(""UTF-8""); importMetadataXML(serviceContext, null, new ByteArrayInputStream(bytes), MetadataType.METADATA, ReservedGroup.intranet.getId(), Params.GENERATE_UUID); }  luceneSearcher = searchManager.newSearcher(SearchManager.LUCENE, Geonet.File.SEARCH_LUCENE); } "	0	0	0	0	1	0
"private static <T> GradleProjectInfoQuery2<T> createDefaultQuery(final ProjectInfoBuilder2<T> builder) { ExceptionHelper.checkNotNullArgument(builder, ""builder"");  ClassLoader classLoader = builder.getClass().getClassLoader(); File classPath = ModelClassPathDef.getClassPathOfClass(builder.getClass());  final ModelClassPathDef classPathDef = ModelClassPathDef.isImplicitlyAssumed(classPath) ? ModelClassPathDef.EMPTY : ModelClassPathDef.fromJarFiles(classLoader, Collections.singleton(classPath));  return new GradleProjectInfoQuery2<T>() { @Override public ProjectInfoBuilder2<T> getInfoBuilder() { return builder; }  @Override public ModelClassPathDef getInfoClassPath() { return classPathDef; } }; } "	0	0	0	0	1	0
public int getKnowledgeBeaconCount() { return customBeacons != null ? customBeacons.size() : beaconIdMap.size(); } 	0	0	0	0	1	0
"protected void executeInsertData(InsertData insertDataExpr, UpdateContext uc) throws SailException {  SPARQLUpdateDataBlockParser parser = new SPARQLUpdateDataBlockParser(vf); parser.setRDFHandler(new RDFSailInserter(con, vf, uc)); parser.getParserConfig().addNonFatalError(BasicParserSettings.VERIFY_DATATYPE_VALUES); parser.getParserConfig().addNonFatalError(BasicParserSettings.FAIL_ON_UNKNOWN_DATATYPES); try { // TODO process update context somehow? dataset, base URI, etc. parser.parse(new ByteArrayInputStream(insertDataExpr.getDataBlock().getBytes()), """"); } catch (RDFParseException e) { throw new SailException(e); } catch (RDFHandlerException e) { throw new SailException(e); } catch (IOException e) { throw new SailException(e); } } "	0	0	0	0	1	0
public static String toJson(Object object) { Objects.requireNonNull(object, Required.OBJECT.toString());  return jsonSerializer.serialize(object).toString(); } 	0	0	0	0	1	0
public static PMDParameters extractParameters(PMDParameters arguments, String[] args, String progName) { JCommander jcommander = new JCommander(arguments); jcommander.setProgramName(progName);  try { jcommander.parse(args); if (arguments.isHelp()) { jcommander.usage(); System.out.println(buildUsageText(jcommander)); setStatusCodeOrExit(0); } } catch (ParameterException e) { jcommander.usage(); System.out.println(buildUsageText(jcommander)); System.out.println(e.getMessage()); setStatusCodeOrExit(ERROR_STATUS); } return arguments; } 	0	0	0	0	1	0
"@Override public NetGameModel buildRoad(EdgeLocation edgeLocation, boolean free) throws ServerProxyException { if(userCookie == null) { throw new ServerProxyException(""A user must be logged in before building a road!\n"" + ""Details: User cookie not found""); } if(gameID < 0) { throw new ServerProxyException(""You must be a part of a game before building a road!\n"" + ""Details: Game ID not valid""); }  String urlPath = ""/moves/buildRoad""; String postData = serializer.sBuildRoadReq(userCookie.getPlayerID(), edgeLocation, free); String result = doJSONPost(urlPath, postData, false, false);  NetGameModel ret = deserializer.parseNetGameModel(result);  return ret; } "	0	0	0	0	1	0
"@Override public NetGameModel buildSettlement(VertexLocation vertexLocation, boolean free) throws ServerProxyException { if(userCookie == null) { throw new ServerProxyException(""A user must be logged in before building a settlement!\n"" + ""Details: User cookie not found""); } if(gameID < 0) { throw new ServerProxyException(""You must be a part of a game before building a road!\n"" + ""Details: Game ID not valid""); }  String urlPath = ""/moves/buildSettlement""; String postData = serializer.sBuildSettlementReq(userCookie.getPlayerID(), vertexLocation, free); String result = doJSONPost(urlPath, postData, false, false);  NetGameModel ret = deserializer.parseNetGameModel(result);  return ret; } "	0	0	0	0	1	0
public static Predicate<String> awaitActive(ServerApi serverApi) { return awaitStatus(serverApi, ACTIVE, TEN_MINUTES, FIVE_SECONDS); } 	0	0	0	0	1	0
public List<IModule> findPath(IModule startModule, IModule finishModule) { ModuleGraph.ModuleVertex start = MapSequence.fromMap(myMap).get(startModule); ModuleGraph.ModuleVertex finish = MapSequence.fromMap(myMap).get(finishModule); if (start == null || finish == null) { return ListSequence.fromList(new ArrayList<IModule>()); } List<ModuleGraph.ModuleVertex> path = ListSequence.fromList(new LinkedList()); ListSequence.fromList(path).addElement(start); Set<ModuleGraph.ModuleVertex> visited = SetSequence.fromSet(new HashSet<ModuleGraph.ModuleVertex>()); SetSequence.fromSet(visited).addElement(start); findPath(path, finish, visited); return ListSequence.fromList(path).select(new ISelector<ModuleGraph.ModuleVertex, IModule>() { public IModule select(ModuleGraph.ModuleVertex it) { return it.myModule; } }).toListSequence(); } 	0	0	0	0	1	0
@Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof TrackInfo)) return false;  TrackInfo trackInfo = (TrackInfo) o;  if (name != null ? !name.equals(trackInfo.name) : trackInfo.name != null) return false; if (artist != null ? !artist.equals(trackInfo.artist) : trackInfo.artist != null) return false; if (album != null ? !album.equals(trackInfo.album) : trackInfo.album != null) return false; if (year != null ? !year.equals(trackInfo.year) : trackInfo.year != null) return false; if (genre != null ? !genre.equals(trackInfo.genre) : trackInfo.genre != null) return false; if (bmp != null ? !bmp.equals(trackInfo.bmp) : trackInfo.bmp != null) return false; return !(duration != null ? !duration.equals(trackInfo.duration) : trackInfo.duration != null);  } 	0	0	0	0	1	0
"@Test public void testHashedID() throws Exception {  userDAO.addUser(TEST_USER_NAME);  DBCollection collection = userDAO.getDatastore().getCollection(User.class);  collection.getIndexInfo().forEach(dbObject -> { BasicDBObject index = (BasicDBObject) dbObject; if (!index.getString(""name"").equals(""_id_"")) { assertEquals(""hashed"", ((DBObject) index.get(""key"")).get(User.HASHED_ID_FIELD_NAME)); } }); } "	0	0	0	0	1	0
"@When(""^replace (\\w+)$"") public void replace(String name, DataTable table) { name = name.trim(); String text = context.vars.get(name).getAsString(); List<Map<String, String>> list = table.asMaps(String.class, String.class); String replaced = Script.replacePlaceholders(text, list, context); context.vars.put(name, replaced); } "	0	0	0	0	1	0
"@Override @Nullable public BigDecimal setTemperature(final BigDecimal targetTemperature) throws IOException {  if (selectedDevice == null) { throw new IllegalArgumentException(""No device selected, cannot set temperature.""); }  if (computerInfo == null) { throw new IllegalArgumentException(""Cannot determine MAC address of computer, cannot set temperature.""); }  // Discard the precision and round by half. float roundedTemperature = NumberUtils.roundHalf(targetTemperature.floatValue()); if (roundedTemperature < AtagOneApp.TEMPERATURE_MIN || roundedTemperature > AtagOneApp.TEMPERATURE_MAX) { throw new IllegalArgumentException( ""Device temperature out of bounds: "" + roundedTemperature + "". Needs to be between "" + AtagOneApp.TEMPERATURE_MIN + "" (inclusive) and "" + AtagOneApp.TEMPERATURE_MAX + "" (inclusive)""); }  final String messageUrl = ""http://"" + selectedDevice.getDeviceAddress().getHostAddress() + "":"" + HTTP_CLIENT_PORT + ""/update""; log.fine(""POST retrieve: URL="" + messageUrl);  // Get computer MAC address. final String macAddress = computerInfo.getMac();  final String jsonPayload = ""{\""update_message\"":{"" + ""\""seqnr\"":0,"" + ""\""account_auth\"":{"" + ""\""user_account\"":\""\"","" + ""\""mac_address\"":\"""" + macAddress + ""\""},"" + ""\""control\"":{"" + ""\""ch_mode_temp\"":"" + roundedTemperature + ""}}}\n""; String response = executeRequest(messageUrl, jsonPayload, versionInfo).getContent();  // Response: // { ""update_reply"":{ ""seqnr"":0,""status"":{""device_id"":""6808-1401-3109_15-30-001-123"",""device_status"":16385,""connection_status"":23,""date_time"":503527795},""acc_status"":2} } final Integer accStatus = JSONUtils.getJSONValueByName(response, Integer.class, AtagOneConnectorInterface.VALUE_DEVICE_ID); assertAuthorized(accStatus);  // Update Device ID? updateSelectedDevice(response);  // Get and return current room temperature. return (BigDecimal) getDiagnostics().get(VALUE_ROOM_TEMPERATURE); } "	0	0	0	0	1	0
private BufferedImage createErrorImage(final Rectangle area) { final BufferedImage bufferedImage = new BufferedImage(area.width, area.height, TYPE_INT_ARGB_PRE); final Graphics2D graphics = bufferedImage.createGraphics(); try { graphics.setBackground(this.configuration.getTransparentTileErrorColor());  graphics.clearRect(0, 0, area.width, area.height); return bufferedImage; } finally { graphics.dispose(); } } 	0	0	0	0	1	0
@Override public long cnt(Countable e) { Map<String, Counter> cntMap = classCounters.get(e.getClass().getName()); if (cntMap == null) { return 0; } Counter cnt = cntMap.get(e.getName()); return cnt == null ? 0 : cnt.cnt(); } 	0	0	0	0	1	0
"public void restore() throws IOException { BufferedReader reader = new BufferedReader(new FileReader(source)); String line = """"; while ((line = reader.readLine()) != null) { lines.add(line); } reader.close(); } "	0	0	0	0	1	0
"@Override public void initialize(URL location, ResourceBundle resources) { // suggestion function String[] suggestion = new String[6556];  try { File file = new File(""src/goodday/files/Suggestion_list""); FileReader filereader = new FileReader(file); BufferedReader br = new BufferedReader(filereader);  for (int i = 0; i < suggestion.length; i++) { suggestion[i] = br.readLine(); }  } catch (FileNotFoundException e) { e.printStackTrace(); System.out.println(""FileNotFoundException""); } catch (IOException e) { e.printStackTrace(); System.out.println(""IOException""); } TextFields.bindAutoCompletion(inputCityName, suggestion); } "	0	0	0	0	1	0
"@FXML protected void applyChanges() {  String location = locationName.getText(); int unit = 0;  if (location.equals("""")) location = gdm.getUserData().get(1);  if (fahrenheitRadioButton.isSelected() == true) unit = 2; if (celsiusRadioButton.isSelected() == true) unit = 1;  boolean successFlag = gdm.setUserSetting(location, unit);  if(!successFlag) { labelErrorMessage.setText(""Couldn't find the location. Please choose a city.""); } else { labelSuccessMessage.setText(""Your setting is updated successfully""); gdm.deleteFileFunction(""src/weatherInformation.json""); } } "	0	0	0	0	1	0
public Word playLetter(char letter) { Box b = this.boxes[this.highlightLetter.across][this.highlightLetter.down];  if (b == null) { return null; }  if (b.getResponse() == b.getSolution() && isShowErrors()) { // Prohibit replacing correct letters return this.getCurrentWord(); } else { b.setResponse(letter); b.setResponder(this.responder);  return this.nextLetter(); } } 	0	0	0	0	1	0
"@Redirect(method = ""updatePlayerEntity"", at = @At(value = ""INVOKE"", target = ""Lnet/minecraft/network/NetHandlerPlayServer;sendPacket(Lnet/minecraft/network/Packet;)V"", ordinal = 0)) public void onSendSpawnPacket(final NetHandlerPlayServer thisCtx, final Packet spawnPacket, final EntityPlayerMP playerIn) { if (!(this.trackedEntity instanceof EntityHuman)) { // This is the method call that was @Redirected thisCtx.sendPacket(spawnPacket); return; } final EntityHuman human = (EntityHuman) this.trackedEntity; // Adds the GameProfile to the client thisCtx.sendPacket(human.createPlayerListPacket(S38PacketPlayerListItem.Action.ADD_PLAYER)); // Actually spawn the human (a player) thisCtx.sendPacket(spawnPacket); // Remove from tab list final S38PacketPlayerListItem removePacket = human.createPlayerListPacket(S38PacketPlayerListItem.Action.REMOVE_PLAYER); if (human.canRemoveFromListImmediately()) { thisCtx.sendPacket(removePacket); } else { int delay = Sponge.getGlobalConfig().getConfig().getEntity().getHumanPlayerListRemoveDelay(); Runnable removeTask = new RemovePlayerListRunnable(human, playerIn, removePacket); if (delay == 0) { removeTask.run(); } else { Sponge.getGame().getScheduler().getTaskBuilder().execute(removeTask).delay(delay).submit(Sponge.getPlugin()); } } } "	0	0	0	0	1	0
"private void showEmptyPaper(User from) { trace_msg(""Showing empty Paper %s to Avatar %s"", paper_path(), from.name()); JSONLiteral msg = new_reply_msg(noid); msg.addParameter(""nextpage"", 0); msg.addParameter(""ascii"", EMPTY_PAPER); msg.finish(); from.send(msg); } "	0	0	0	0	1	0
"public void registerClass(CompileScope scope, Class<?>... classes) { for (Class<?> clazz : classes) { if (BaseWrapper.class.isAssignableFrom(clazz) && !clazz.isAnnotationPresent(Reflection.NotWrapper.class)) { throw new CriticalException(""Please use registerWrapperClass() method instead of this for wrapper classes""); }  if (!this.classes.add(clazz)) { throw new CriticalException(""Class already registered - "" + clazz.getName()); } } } "	0	0	0	0	1	0
public MethodSpec.Builder addCode(String format, Object... args) { this.codeBlocks.add(CodeBlock.of(format, args)); return this; } 	0	0	0	0	1	0
"public TemplateModel next() throws TemplateModelException { try { return (TemplateModel) matchingInputParts.get(nextIdx++); } catch (IndexOutOfBoundsException e) { throw new _TemplateModelException(e, ""There were no more matches""); } } "	0	0	0	0	1	0
"public List<FileEntry> listFiles(String parentPath, int depth) throws Exception { ArrayList<FileEntry> result = new ArrayList<>(); try { if (parentPath.endsWith(""/"")) parentPath = parentPath.substring(0,parentPath.length()-1);  ConnectionInfo ci = splitStringToConnectionInfo(parentPath); String requestBody = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" + ""<d:propfind xmlns:d=\""DAV:\"">\n"" + "" <d:prop><d:displayname/><d:getlastmodified/><d:getcontentlength/></d:prop>\n"" + ""</d:propfind>\n""; Log.d(""WEBDAV"", ""starting query for "" + ci.URL); Request request = new Request.Builder() .url(new URL(ci.URL)) .method(""PROPFIND"", RequestBody.create(MediaType.parse(""application/xml""),requestBody)) .addHeader(""Depth"",String.valueOf(depth))  .build();  Response response = getClient(ci).newCall(request).execute();  checkStatus(response);  String xml = response.body().string();  PropfindXmlParser parser = new PropfindXmlParser(); List<PropfindXmlParser.Response> responses = parser.parse(new StringReader(xml));  for (PropfindXmlParser.Response r: responses) { PropfindXmlParser.Response.PropStat.Prop okprop  =r.getOkProp(); if (okprop != null) { FileEntry e = new FileEntry(); e.canRead = e.canWrite = true; Date lastMod = WebDavUtil.parseDate(okprop.LastModified); if (lastMod != null) e.lastModifiedTime = lastMod.getTime(); if (okprop.ContentLength != null) { try { e.sizeInBytes = Integer.parseInt(okprop.ContentLength); } catch (NumberFormatException exc) { e.sizeInBytes = -1; } } e.isDirectory = r.href.endsWith(""/"");  e.displayName = okprop.DisplayName; if (e.displayName == null) { e.displayName = getDisplayName(r.href); } e.path = r.href;  if (e.path.indexOf(""://"") == -1) { //relative path: e.path = buildPathFromHref(parentPath, r.href); }  if ((depth == 1) && e.isDirectory) { String path = e.path; if (!path.endsWith(""/"")) path += ""/"";  String parentPathWithTrailingSlash = parentPath + ""/"";  //for depth==1 only list children, not directory itself if (path.equals(parentPathWithTrailingSlash)) continue; }  result.add(e); } } return result;   } catch (Exception e) { throw convertException(e); }  } "	0	0	0	0	1	0
public int getLastPageNumber() { /* * We use the Math.floor() method because page numbers are zero-based (i.e. the first page is page 0). */ int rueckgabe = new Double(Math.floor(this.totalResults / this.pageSize)).intValue(); if (this.totalResults % this.pageSize == 0) { rueckgabe--; } return rueckgabe; } 	0	0	0	0	1	0
private Block get(int x, int y, int z) { return initialCenter.getBlock().getRelative(x, y, z); } 	0	0	0	0	1	0
"private String getTipInfo(DSSequence sequence, int off) { String tip = """" + off; if (sequencePatternmatches != null) { PatternSequenceDisplayUtil psd = sequencePatternmatches .get(sequence); if (psd != null) { TreeSet<PatternLocations> patternsPerSequence = psd .getTreeSet(); if (patternsPerSequence != null && patternsPerSequence.size() > 0) { for (PatternLocations pl : patternsPerSequence) { CSSeqRegistration reg = pl.getRegistration(); if (reg != null && reg.x1 + 1 <= off && reg.x2 >= off) { int x1 = reg.x1 + 1; int x2 = reg.x2; if (pl.getPatternType().equals( PatternLocations.DEFAULTTYPE)) { tip = tip + "" "" + pl.getAscii() + ""<"" + x1 + "","" + x2 + ""> ""; } else if (pl.getPatternType().equals( PatternLocations.TFTYPE)) { tip = tip + "" "" + pl.getAscii() + ""<"" + x1 + "","" + x2 + ""> ""; } } } } } }  return tip; } "	0	0	0	0	1	0
"@Nullable public Metadata onExitGroupId() { checkState(getGroupId() != null, ""groupId""); if (plugins.isEmpty()) { log.debug(""No plugins in group: {}:{}"", getGroupId()); return null; } final Metadata result = new Metadata(); result.setVersion(""1.1.0""); result.setGroupId(getGroupId()); result.getPlugins().addAll(plugins); return result; } "	0	0	0	0	1	0
"@Test(expected = MoveException.class) public void testPositionError() { MovePromotion mE = new MovePromotion (P(""e5""),P(""e6""), new Queen()); mE.execute(board1); } "	0	0	0	0	1	0
"public void fillWithElectives(int semesterNumber) { while(!isFilled()) { StringBuilder code = new StringBuilder(); code.append(""valg""); code.append(semesterNumber); StringBuilder name = new StringBuilder(); name.append(""valgfag""); name.append(semesterNumber); Course c = new Course(code.toString(), ""agile"", 7.5); c.setCourseName(name.toString()); addCourse(c); } } "	0	0	0	0	1	0
public float getAsFloat() { return (float) getAsDoubleUnchecked(); } 	0	0	0	0	1	0
public Number getAsNumber() { final Number result; if (isSmallInt()) { result = getSmallInt(); } else if (isInt()) { result = getInt(); } else if (isUInt()) { result = getUInt(); } else if (isDouble()) { result = getAsDouble(); } else { throw new VPackValueTypeException(ValueType.INT, ValueType.UINT, ValueType.SMALLINT); } return result; } 	0	0	0	0	1	0
"public void refreshDisplay() { String logmsg = ""Invoked""; String methodname = new Object(){}.getClass().getEnclosingMethod().getName(); LogMsg.LogMsg(LogMsg.LOGTYPE_INFORMATIONAL,LOGTAG,logmsg,THISCLASS,methodname); slcsr = dbshopmethods.getShops(shopfilter, shoporderby); currentshopcount = slcsr.getCount(); shoplistadapter.swapCursor(slcsr); alcsr = dbaislemethods.getAisles(aislefilter, aisleorderby, false); currentaislecount = alcsr.getCount(); aislelistadapter.swapCursor(alcsr); plcsr = dbproductmethods.getProductsInAisle(currentaisleid, productfilter, productorderby); currentproductcount = plcsr.getCount(); productlistadapter.swapCursor(plcsr); rulefilter = DBRulesTableConstants.RULES_AISLEREF_COL_FULL + "" = "" + Long.toString(currentaisleid); rlcsr = dbrulemethods.getExpandedRuleList(rulefilter,orderby); rulelistadapter.swapCursor(rlcsr); } "	0	0	0	0	1	0
@Override public void onStart() { super.onStart();  mCameraPreview = (CameraPreview) findViewById(R.id.camera_preview); mCameraPreview.setCapabilities(new OrientationCapability(OrientationSetting.PORTRAIT)); mLayerView = (LayerView) findViewById(R.id.layer_view); } 	0	0	0	0	1	0
public List<Map<String, Object>> getAllCorpList() { String [] cacheKey = new String[]{CacheUtils.KEY_CORP_LIST, new Integer(getCurUserId()).toString()}; String cache = CacheUtils.get(cacheKey); List<Map<String, Object>> corpList = new ArrayList<Map<String, Object>>(); if (cache != null) { corpList = CommonUtils.gson.fromJson(cache, List.class); } else { List<Corporation> list = accountMgr.getCorporationListWithPager(getCurUserId(), 1, 999); for (Corporation c : list) { corpList.add(c.toMap()); } CacheUtils.put(cacheKey, CommonUtils.gson.toJson(corpList)); } return corpList; } 	0	0	0	0	1	0
"@SuppressWarnings(""rawtypes"") @GET @Path(""/"") @ApiOperation(value = ""Find tenant's metric definitions."", notes = ""Does not include any metric values. "", response = List.class, responseContainer = ""List"") @ApiResponses(value = { @ApiResponse(code = 200, message = ""Successfully retrieved at least one metric definition.""), @ApiResponse(code = 204, message = ""No metrics found.""), @ApiResponse(code = 400, message = ""Invalid type parameter type."", response = ApiError.class), @ApiResponse(code = 500, message = ""Failed to retrieve metrics due to unexpected error."", response = ApiError.class) }) public Response findMetrics( @ApiParam(value = ""Queried metric type"", required = false, allowableValues = ""[gauge, availability, counter]"") @QueryParam(""type"") MetricType metricType, @ApiParam(value = ""List of tags filters"", required = false) @QueryParam(""tags"") Tags tags) {  if (metricType != null && !MetricType.userTypes().contains(metricType)) { return badRequest(new ApiError(""Incorrect type param"")); }  Observable<Metric> metricObservable = (tags == null) ? metricsService.findMetrics(tenantId, metricType) : metricsService.findMetricsWithFilters(tenantId, tags.getTags(), metricType);  try { return metricObservable .map(MetricDefinition::new) .toList() .map(ApiUtils::collectionToResponse) .toBlocking() .lastOrDefault(null); } catch (Exception e) { return ApiUtils.serverError(e); } } "	0	0	0	0	1	0
@Override public void onPause() { super.onPause(); mGlSurfaceView.onPause(); if (mNativeVrShell != 0) { nativeOnPause(mNativeVrShell); } } 	0	0	0	0	1	0
@Override public void onResume() { super.onResume(); mGlSurfaceView.onResume(); if (mNativeVrShell != 0) { // Refreshing the viewer profile accesses disk, so we need to temporarily allow disk // reads. The GVR team promises this will be fixed when they launch. StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskReads(); try { nativeOnResume(mNativeVrShell); } finally { StrictMode.setThreadPolicy(oldPolicy); } } } 	0	0	0	0	1	0
private void loadThisSymbol(ObjectCreationExpr n, A arg) { boolean isAnnonymousClass = n.getAnonymousClassBody() != null; if (isAnnonymousClass) { ScopeLoader scopeLoader = new ScopeLoader(typeTable, expressionTypeAnalyzer, actionProvider); Scope scope = n.accept(scopeLoader, symbolTable); if (scope != null) { symbolTable.pushScope(scope); } if (n.getAnonymousClassBody() != null) { for (BodyDeclaration member : n.getAnonymousClassBody()) { member.accept(this, arg); } } if (scope != null) { symbolTable.popScope(); } }  } 	0	0	0	0	1	0
"protected List<String> skipStartsWith() { return Arrays.asList(""WEB-INF""); } "	0	0	0	0	1	0
"@Override public String toString() { return direction.toString().toLowerCase() + ""_"" + iomode.toString().toLowerCase(); } "	0	0	0	0	1	0
@Test public void getId_returnsIdAfterSave() { Weapon newWeapon = new Weapon(); newWeapon.save(); assertEquals(Weapon.all().get(0).getId(), newWeapon.getId()); } 	0	0	0	0	1	0
public void componentResized(ComponentEvent e) { if (frame.getExtendedState() == JFrame.MAXIMIZED_BOTH) { ((JFrame)frame).getRootPane().setBorder(BorderFactory.createEmptyBorder()); maximized = true; } else { ((JFrame)frame).getRootPane().setBorder(VitcoSettings.FRAME_BORDER); maximized = false; } } 	0	0	0	0	1	0
@Override public void onViewReleased(View releasedChild, float xvel, float yvel) { int top; @State int targetState; if (yvel < 0) { top = mMinOffset; targetState = STATE_EXPANDED; } else if (yvel == 0.f) { int currentTop = releasedChild.getTop(); if (Math.abs(currentTop - mMinOffset) < Math.abs(currentTop - mMaxOffset)) { top = mMinOffset; targetState = STATE_EXPANDED; } else { top = mMaxOffset; targetState = STATE_COLLAPSED; } } else { top = mMaxOffset; targetState = STATE_COLLAPSED; } if (mViewDragHelper.settleCapturedViewAt(releasedChild.getLeft(), top)) { setStateInternal(STATE_SETTLING); ViewCompat.postOnAnimation(releasedChild, new SettleRunnable(releasedChild, targetState)); } else { setStateInternal(targetState); } } 	0	0	0	0	1	0
@Override public void run() { if (mViewDragHelper != null && mViewDragHelper.continueSettling(true)) { ViewCompat.postOnAnimation(mView, this); } else { setStateInternal(mTargetState); } } 	0	0	0	0	1	0
public static double calcIfu2Shift(double cwavlen, double lpmm) {  // TODO: Some of the values here (e.g. plate scale) are different for Hamamatsu and E2V CCDs. // TODO: We currently only support E2V CCDs for the GMOS IFU-2 case, so we are using the E2V values here. final double scale  = 0.080778;   // plaste scale in arcsecs per pixel (E2V only!) final double asecmm = 1.611444;   // Arcsecs per mm final double sepmm  = 175.;       // Physical separation between IFU-2 slits, in mm.  double greq = (cwavlen*lpmm)/1.e6;  double[] tilts = new double[66]; double[] theta_i = new double[66]; double[] theta_r = new double[66]; double[] lambda_over_d = new double[66]; for (int i = 0; i < 66; i++) { tilts[i] = i+1; theta_i[i] = 90.0 - tilts[i];   // Tilt is measured with respect to incoming beam: Tilt = 90 - theta_i theta_r[i] = 40.0 - tilts[i];   // Angle between GMOS collimator and camera = 50 = theta_i - theta_r // Grating equation: m lambda = d( sin(theta_i) + sin(theta_r) ) lambda_over_d[i] = Math.sin(theta_r[i] * Math.PI/180.) + Math.sin(theta_i[i] * Math.PI/180.); } double tilt = findTilt(lambda_over_d, tilts, greq); tilt=tilt*Math.PI/180.0; double a=Math.sin(tilt+0.872665)/Math.sin(tilt); return sepmm*asecmm/(scale*a); } 	0	0	0	0	1	0
"private static List<File> getManagementPlugins() { String[] paths = System.getProperty(""managementPlugins"").split("":""); List<File> plugins = new ArrayList<File>(paths.length); for (String path : paths) { plugins.add(new File(path)); } return plugins; } "	0	0	0	0	1	0
"private String createSearchResultXML(String sampleType, StringBuilder xml){  String success = VALID;  List<Test> tests = TypeOfSampleUtil.getTestListBySampleTypeId(sampleType, true);  Collections.sort(tests, new Comparator<Test>(){ @Override public int compare(Test t1, Test t2){ if(GenericValidator.isBlankOrNull(t1.getSortOrder()) || GenericValidator.isBlankOrNull(t2.getSortOrder())){ return TestService.getUserLocalizedTestName( t1 ).compareTo(TestService.getUserLocalizedTestName( t2 )); }  try{ int t1Sort = Integer.parseInt(t1.getSortOrder()); int t2Sort = Integer.parseInt(t2.getSortOrder());  if(t1Sort > t2Sort){ return 1; }else if(t1Sort < t2Sort){ return -1; }else{ return 0; }  }catch(NumberFormatException e){ return TestService.getUserLocalizedTestName( t1 ).compareTo(TestService.getUserLocalizedTestName( t2 )); }  } });  if( isVariableTypeOfSample){ xml.append( ""<variableSampleType/>"" ); } addTests(tests, xml);  List<TypeOfSamplePanel> panelList = getPanelList(sampleType); List<PanelTestMap> panelMap = linkTestsToPanels(panelList, tests);  addPanels(panelMap, xml);  return success; } "	0	0	0	0	1	0
public void accept(View view) { mTask.verified = true; finishView(); } 	0	0	0	0	1	0
"private static SyndFeed fetchFeed(final Node content) throws IOException, MalformedURLException, FeedException, FetcherException, RepositoryException { Node unescapednode = NodeUtil.unwrap(content); final String feedUrl = PropertyUtil.getString(unescapednode, ""feedUrl"", null); final FeedFetcherCache cache = HashMapFeedInfoCache.getInstance(); final FeedFetcher feedFetcher = new HttpURLFeedFetcher(cache); feedFetcher.setUserAgent(""MagnoliaRSSFeedParagraph/0.1 (Java-ROME 0.9; Magnolia 3.5.4; gato@txstate.edu)"");  return feedFetcher.retrieveFeed(new URL(feedUrl)); } "	0	0	0	0	1	0
public void setPowerScale(String powerScale) { this.powerScale = powerScale; this.powerScaleFloat = Float.parseFloat(powerScale); } 	0	0	0	0	1	0
"private File getMapFile(String name) { return new File(""maps/"" + name + "".ctbmap""); } "	0	0	0	0	1	0
"@Override public void onResponse(Call<TrailersResults> call, Response<TrailersResults> response) {  Log.e(TAG, ""looking for data trailers""); if(!response.isSuccessful()){ Log.e(TAG, ""Unable to connect""); return; }  TrailersResults data = response.body();  posterAdapter.setData(data.getTrailers()); } "	0	0	0	0	1	0
"protected T loadExample(String path) { try (BufferedReader reader = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(path)))) { StringBuilder buffer = new StringBuilder(); String line; while ((line = reader.readLine()) != null) { buffer.append(line); } return parse(buffer.toString()); } catch (IOException ioe) { throw new RuntimeException(String.format(""Failed parsing %s"", path), ioe); } } "	0	0	0	0	1	0
@Override public int getItemCount() { return observableCollectionSubject.getValue() != null ? observableCollectionSubject.getValue().size() : 0; } 	0	0	0	0	1	0
private void setAccountSwitcherVisible(boolean accountSwitcherVisible) { if (accountSwitcherVisible == this.accountSwitcherVisible) return;  this.accountSwitcherVisible = accountSwitcherVisible; drawer.setAccountsVisible(accountSwitcherVisible); accountExpand.setActivated(accountSwitcherVisible); if (!accountSwitcherVisible) { fixNavigationSelection(); } } 	0	0	0	0	1	0
"public void InvalidAcess(){ AlertDialog.Builder builder = new AlertDialog.Builder(LoginActivity.this); builder.setTitle(R.string.emailinvalid); builder.setMessage(R.string.email_invalid) .setCancelable(false) .setPositiveButton(""OK"", new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int id) { return; } }); AlertDialog alert = builder.create(); alert.show(); Button pbutton = alert.getButton(DialogInterface.BUTTON_POSITIVE); pbutton.setTextColor(Color.BLUE); } "	0	0	0	0	1	0
"public int getNextId(String sequence) { try { if (lock.tryLock(10, TimeUnit.SECONDS)) { try { int retries = 5; while (retries-- > 0) { try { Sequence seq = index.find(Sequence.class, sequence); if (seq == null) { seq = new Sequence(); seq.setId(sequence); seq.setNext(1); seq = index.tryUpdate(seq); } int result = seq.getNext(); seq.setNext(result + 1); index.tryUpdate(seq); return result; } catch (OptimisticLockException e) { Exceptions.ignore(e); } } throw Exceptions.handle() .to(IndexAccess.LOG) .withSystemErrorMessage( ""Unable to generate a unique ID for sequence: %s after 5 attempts"", sequence) .handle(); } finally { lock.unlock(); } } else { throw Exceptions.handle() .to(IndexAccess.LOG) .withSystemErrorMessage( ""Unable to to lock critical section of ID generator for sequence: %s"", sequence) .handle(); } } catch (HandledException e) { throw e; } catch (Exception e) { throw Exceptions.handle() .to(IndexAccess.LOG) .error(e) .withSystemErrorMessage(""Unable to generate a unique ID for sequence: %s - %s (%s)"", sequence) .handle(); } } "	0	0	0	0	1	0
"@Test public void addPeriodicSizeHandler() throws Exception { page.addPeriodicSizeHandler(PERIODIC_SIZE_HANDLER_TBA, "".yyyy-MM-dd,HH:mm"");  new ResourceVerifier(PERIODIC_SIZE_HANDLER_TBA_ADDRESS, client).verifyExists(); } "	0	0	0	0	1	0
"public String[][] Retrieve(int size) { //System.out.println(""\nRendering Map...\n""); String[][] N = new String[size][size]; String TRIGGER = ""X"";  Point p = drones.getFirst().position;  for (int x = 0; x < size; x++) { for (int y = 0; y < size; y++) { N[x][y] = TRIGGER; //				Tuple t = map.queryp(new Template(new ActualTemplateField(p.x+x-size/2), new ActualTemplateField(p.y+y-size/2))); //				if (t != null) { //					N[x][y] = TRIGGER; //				} else { //					N[x][y] = ""-""; //				} } } LinkedList<Tuple> list = RetrieveTuples(); for (Tuple t : list) { if (getTupleX(t)-p.x < size/2 && getTupleX(t)-p.x > -size/2 && getTupleY(t)-p.y < size/2 && getTupleY(t)-p.y > -size/2) { if (N[getTupleX(t)-p.x+size/2][getTupleY(t)-p.y+size/2] == TRIGGER) { N[getTupleX(t)-p.x+size/2][getTupleY(t)-p.y+size/2] = t.getElementAt(String.class, 0); } } } return N; } "	0	0	0	0	1	0
private void setPaymentInstallment() { if (layoutInstallment.getVisibility() == View.VISIBLE) { ((CreditCardFlowActivity) getActivity()).setInstallment(installmentCurrentPosition); } } 	0	0	0	0	1	0
@NotNull public FileHolder copy() { usages.incrementAndGet(); return new FileHolder(file, usages); } 	0	0	0	0	1	0
private void doPositionChild(final IPrimitive<?> child) { final int index = layout_keys.toList().indexOf(child.getID()); final Layout childLayout = index > -1 ? layout_values.get(index) : null;  if (null != childLayout) { LayoutBuilder builder = null; switch (childLayout) { case CENTER: builder = CENTER_LAYOUT; break; case TOP: builder = TOP_LAYOUT; break; case LEFT: builder = LEFT_LAYOUT; break; case BOTTOM: builder = BOTTOM_LAYOUT; break; case RIGHT: builder = RIGHT_LAYOUT; break; }  if (null != builder) { builder.layoutIt(child);  // Obtain the original shape's position that made it applicable to the given layout and // apply the increment. child.setX(child.getX() + layout_x.get(index)); child.setY(child.getY() + layout_y.get(index)); } } } 	0	0	0	0	1	0
@Override public HierarchicalStreamReader createReader(final URL in) { try { final Document document = getBuilder().build(in.toExternalForm()); return new XomReader(document, getNameCoder()); } catch (final ValidityException e) { throw new StreamException(e); } catch (final ParsingException e) { throw new StreamException(e); } catch (final IOException e) { throw new StreamException(e); } } 	0	0	0	0	1	0
"private String newPassword(String email){ if(email.equals("""")){ throw new IllegalArgumentException(""email must not be null""); } String pass = RandomStringUtils.randomAlphanumeric(8); //email the employee the password they can use to login  Properties props = new Properties(); Session session = Session.getDefaultInstance(props, null);  String messagebody = String.format(""Dear %s %n"" + ""%n"" + ""Your account is now ready to login and submit availibility at URL %n"" + ""%n"" + ""login: %s %n"" + ""password: %s %n"" + ""%n"" + ""Regards,"" + ""Administration"",getName(), getEmail(), RandomStringUtils.random(8)); try{ Message msg = new MimeMessage(session); msg.setFrom(new InternetAddress(""noreply.unipol.admin@gmail.com"", ""Administration"")); msg.addRecipient(Message.RecipientType.TO, new InternetAddress(getEmail(), getName())); msg.setSubject(""Your account has been activated""); msg.setText(messagebody); Transport.send(msg); } catch (MessagingException | UnsupportedEncodingException ex) { Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex); } //hash the string and set the employee's password to the hashed one. USED SHA256 System.out.println(pass); String hash = DigestUtils.sha256Hex(pass); return hash; } "	0	0	0	0	1	0
"public static void main(String[] args) { // TODO Auto-generated method stub System.out.println(""==hello5-3.""); } "	0	0	0	0	1	0
private String doesResponseContainsDebugErrorMessage (HttpBody body) { if (this.errors == null) { this.errors = loadFile(debugErrorFile); } String sBody = body.toString().toLowerCase(); for (String error : this.errors) { int start = sBody.indexOf(error); if (start >= 0) { // Return the original (case exact) string so we can match it in the response return body.toString().substring(start, start + error.length()); } } return null; } 	0	0	0	0	1	0
public void deleteCommand(long cid) throws IOException { // Delete from DB // Remove from Cache if (cmdsAll.containsKey(cid)) { // Command is finished, then return CommandInfo cmdinfo = cmdsAll.get(cid); // Disable this command in cache if (inExecutingList(cid)) { // Remove from Executing queue removeFromExecuting(cid, cmdinfo.getRid(), cmdinfo.getState()); // Kill thread execThreadPool.deleteCommand(cid); } else if (inUpdateCache(cid)) { RemoveFromUpdateCache(cid); } else { // Remove from Pending queue cmdsInState.get(CommandState.PENDING.getValue()).remove(cid); } // Mark as cancelled, this status will be update to DB // in next batch update cmdsAll.remove(cid); } try { adapter.deleteCommand(cid); } catch (SQLException e) { throw new IOException(e); } } 	0	0	0	0	1	0
private void makeBackup(JcrSession session, BackupOptions options) throws RepositoryException { TestingUtil.waitUntilFolderCleanedUp(backupDirectory.getPath()); Problems problems = session.getWorkspace().getRepositoryManager().backupRepository(backupDirectory, options); assertNoProblems(problems); } 	0	0	0	0	1	0
"private Writable createWritablePrimitive(Object obj, CarbonColumn carbonColumn) throws IOException { DataType dataType = carbonColumn.getDataType(); if (obj == null) { return null; } switch (dataType) { case NULL: return null; case DOUBLE: return new DoubleWritable((double) obj); case INT: return new IntWritable((int) obj); case LONG: return new LongWritable((long) obj); case SHORT: return new ShortWritable((Short) obj); case DATE: return new DateWritable(new Date((Integer) obj)); case TIMESTAMP: return new TimestampWritable(new Timestamp((long) obj / 1000)); case STRING: return new Text(obj.toString()); case DECIMAL: return new HiveDecimalWritable( HiveDecimal.create(new java.math.BigDecimal(obj.toString()))); default: throw new IOException(""unsupported data type:"" + dataType); } } "	0	0	0	0	1	0
@Nullable public static Beam from(@NotNull FileContent fileContent) throws IOException, OtpErlangDecodeException { return from(fileContent.getContent()); } 	0	0	0	0	1	0
"@Override public View onCreateView(final LayoutInflater inflater, final ViewGroup container, final Bundle savedInstanceState) { final View view = inflater.inflate(R.layout.fragment_spent_effort, null); ButterKnife.bind(this, view); final Date time = Calendar.getInstance().getTime(); final String formattedDate = dateFormatter.format(time);  mDateInput.setText(formattedDate);  final EditText mResponsiblesInput = (EditText) view.findViewById(R.id.responsibles); mResponsiblesInput.setText(userService.getLoggedUser().getInitials());  mEffortLeftInput = (EditText) view.findViewById(R.id.effort_left); mEffortLeftInput.setText(String.valueOf((float) task.getEffortLeft() / MINUTES));  if (minutesSpent != -1) { final float difference = (task.getEffortLeft() - minutesSpent) / 60.0f;  mHoursInput.setText(HoursUtils.convertMinutesToHours(minutesSpent)); mEffortLeftInput.setText(String.valueOf(difference < 0 ? 0 : difference)); }  final ImageButton mTriggerPickerButton = (ImageButton) view.findViewById(R.id.datepicker_button); mTriggerPickerButton.setOnClickListener(new OnClickListener() {  @Override public void onClick(final View v) { final DateTimePickerDialogFragment dateTimePickerDialogFragment = DateTimePickerDialogFragment.newInstance(); dateTimePickerDialogFragment.setOnDateSetListener(new OnDateSetListener() {  @Override public void onDateSet(final Date date) { final String formattedDate = DateUtils.formatDate(date, DATE_PATTERN); mDateInput.setText(formattedDate); } });  dateTimePickerDialogFragment.show(SpentEffortFragment.this.getFragmentManager(), ""datePickerDialog""); } });  final Button mSubmitButton = (Button) view.findViewById(R.id.submit_btn); mSubmitButton.setOnClickListener(getOnClickListener());  return view; } "	0	0	0	0	1	0
public static boolean canUseName(Player player, String name) { String shortenedName = NameUtil.stripUsername(getUsername(player.getUniqueId()));  if (ChestShopSign.isAdminShop(name)) { return false; }  return shortenedName.equals(name) || Permission.otherName(player, name) || (!name.isEmpty() && player.getUniqueId().equals(getUUID(name))); } 	0	0	0	0	1	0
"@Test @SuppressWarnings(""PMD.JUnitTestsShouldIncludeAssert"") public void testClickOnCreateWebCameraOpensDialog() throws Exception { Platform.runLater(() -> addSourceView.getMenuButton().fire()); WaitForAsyncUtils.waitForFxEvents(); verifyThat('.' + AddSourceView.SOURCE_DIALOG_STYLE_CLASS, NodeMatchers.isVisible()); } "	0	0	0	0	1	0
"@Override public ContentWizardPanel waitUntilWizardOpened() { boolean result = waitUntilVisibleNoException( By.xpath( DIV_CONTENT_WIZARD_PANEL ), 5 ); if ( !result ) { TestUtils.saveScreenshot( getSession(), NameHelper.uniqueName( ""err_wizard"" ) ); throw new TestFrameworkException( ""ContentWizard was not showed!"" ); } return this; } "	0	0	0	0	1	0
public static void main(String[] args) { System.out.println(generateCode(6)); } 	0	0	0	0	1	0
"@Override public List<BookTour> cancelListByValue(String value, int idTour) { Session session = getCurrentSession(); String hql = ""FROM BookTour WHERE ID_TOUR := idTour AND CUS_CANCEL = true AND (cusName LIKE :value OR cusEmail LIKE :value OR cusPhone LIKE :value OR cusIdCard LIKE :value)""; Query query = session.createQuery(hql); query.setParameter(""idTour"", idTour); query.setParameter(""value"", ""%"" + value + ""%""); @SuppressWarnings(""unchecked"") List<BookTour> cancelList = query.list(); return cancelList; } "	0	0	0	0	1	0
"public synchronized void switchEarthView() { //This method will switch between Earth ""modes"", the modes being either Mini or Large //Needs to be synchronized, since it will be removing and adding nodes while the program is running //In my example, I am using BorderLayout and I switching between displaying the mini Earth in the //left pane and the large Earth in the center. //The large Earth responds to scrolling, the mini Earth does not and should simply rotate continuously. if (fullEarth) { centerGrid.getChildren().remove(earthViewer.getLargeEarth()); leftBarGrid.getChildren().add(earthViewer.getMiniEarth()); fullEarth = false; } else { leftBarGrid.getChildren().remove(0); //initCenter(); centerGrid.getChildren().add((earthViewer.getLargeEarth())); earthViewer.startEarth(); fullEarth = true; } } "	0	0	0	0	1	0
public static SymbolContainer createSymbolsWithBreak() { SymbolContainer symbolContainer = createSymbolContainer();  symbolContainer.add(NoteSymbolTestDataFactory.createNoteSymbol(NoteLength.QUARTER, NoteName.C4)); symbolContainer.add(NoteSymbolTestDataFactory.createNoteSymbol(NoteLength.QUARTER, NoteName.E4)); symbolContainer.add(BreakSymbolTestDataFactory.createBreakSymbol(NoteLength.QUARTER)); symbolContainer.add(NoteSymbolTestDataFactory.createNoteSymbol(NoteLength.QUARTER, NoteName.C4));  return symbolContainer; } 	0	0	0	0	1	0
"public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws IOException, ServletException { HttpServletRequest request = (HttpServletRequest) req; HttpServletResponse response = (HttpServletResponse) resp;  String servPath = request.getServletPath(); System.out.println(""IndexFilter: "" + servPath);  if (servPath.equals("""")) { response.sendRedirect(request.getContextPath() + ""/index.xhtml""); return; } else if(servPath.equals(""/index.xhtml"")) { if(loginController.isVerified()) { response.sendRedirect(request.getContextPath() + ""/user/feed.xhtml""); return; } }  chain.doFilter(req, resp); } "	0	0	0	0	1	0
@Override protected void sendData(Object data) { String json = populateMap(data).toString(); getSession().getAsyncRemote().sendText(json); } 	0	0	0	0	1	0
public Variable getOutVariable(int i) { Verify.verify(this.returnVariables.size() >= 2 && i>=0 && i<this.returnVariables.size()); return this.returnVariables.get(i); } 	0	0	0	0	1	0
"@Test public void testLocalDateToYyyyMMdd() throws Exception { LocalDate firstDate = LocalDate.of(2010, 5, 17); Assert.assertEquals(""2010-05-17"", MeteoDateUtils.zonedDateTimeToYyyyMMdd(firstDate));  } "	0	0	0	0	1	0
"public static void captureEvent(SentryEventBuilder builder) { final Sentry sentry = Sentry.getInstance(); final SentryEventRequest request; builder.event.put(""contexts"", sentry.contexts); builder.setRelease(sentry.appInfo.versionName); builder.event.put(""breadcrumbs"", Sentry.getInstance().breadcrumbs.current()); if (sentry.captureListener != null) {  builder = sentry.captureListener.beforeCapture(builder); if (builder == null) { Log.e(Sentry.TAG, ""SentryEventBuilder in captureEvent is null""); return; } }  request = new SentryEventRequest(builder);  log(""Request - "" + request.requestData);  doCaptureEventPost(request); } "	0	0	0	0	1	0
"public static InptData getExportFlgTrueExisInData() {  InptData inptData = new InptData();  inptData.setCompanyName(""CompanyName""); inptData.setClassifyCdName(""ClassifyCdName""); inptData.setBrandName(""BrandName""); inptData.setSubsidiaryName(""SubsidiaryName""); inptData.setSubsidiaryAddress_1(""SubsidiaryAddress_1""); inptData.setSubsidiaryAddress_2(""SubsidiaryAddress_2""); inptData.setSubsidiaryAddress_3(""SubsidiaryAddress_3""); inptData.setSubsidiaryAddress_4(""SubsidiaryAddress_4""); inptData.setCountryName(""CountryName""); inptData.setCustName(""CustName""); inptData.setCustHalfwidthAddress_1(""CustHalfwidthAddress_1""); inptData.setCustHalfwidthAddress_2(""CustHalfwidthAddress_2""); inptData.setCustHalfwidthAddress_3(""CustHalfwidthAddress_3""); inptData.setCustHalfwidthAddress_4(""CustHalfwidthAddress_4""); inptData.setCustCountryName(""CustCountryName""); inptData.setBillToName(""BillToName""); inptData.setBillToHalfwidthAddress_1(""BillToHalfwidthAddress_1""); inptData.setBillToHalfwidthAddress_2(""BillToHalfwidthAddress_2""); inptData.setBillToHalfwidthAddress_3(""BillToHalfwidthAddress_3""); inptData.setBillToHalfwidthAddress_4(""BillToHalfwidthAddress_4""); inptData.setBillToCountryName(""BillToCountryName""); inptData.setCustomerCustName(""CustomerCustName""); inptData.setSubsidiaryShipToName(""SubsidiaryShipToName""); inptData.setProductName(""ProductName""); // 得意先マスタ.商品名（英語）; inptData.setOriginCountryName(""OriginCountryName"");  return inptData; } "	0	0	0	0	1	0
@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; if (!super.equals(o)) return false;  TimeTreeConfiguration that = (TimeTreeConfiguration) o;  if (autoAttach != that.autoAttach) return false; if (!relationshipType.equals(that.relationshipType)) return false; if (resolution != that.resolution) return false; if (!timeZone.equals(that.timeZone)) return false; if (!timestampProperty.equals(that.timestampProperty)) return false;  return true; } 	0	0	0	0	1	0
"public static Action getStopAction(final JmeSpatial Spatial) { return new AbstractAction(""Stop All"") { @Override public void actionPerformed(ActionEvent e) { if (Spatial != null) { Spatial.setEnabled(false); } } }; } "	0	0	0	0	1	0
private synchronized void fail() { current = ++current % afterFailedLogins; long firstFail = tries[current]; long now = tries[current] = System.currentTimeMillis(); if (firstFail == 0) return; if (now - firstFail < afterFailedLoginsWithin) blockedUntil = now + blockFor; } 	0	0	0	0	1	0
@Override public void registerLoginModule(long bundleId, String className) { CarbonSecurityDataHolder.getInstance().registerLoginModule(bundleId, className); } 	0	0	0	0	1	0
private boolean hasFileBeenModified(Resource resource) { boolean modified = true; if (modulesManager != null) { try { File file = resource.getFile(); modified = modulesManager.hasFileBeenModifiedSinceLastInstalled(file); } catch (IOException e) {} } return modified; } 	0	0	0	0	1	0
public T[] slice() { return (T[]) this.models.toArray(); } 	0	0	0	0	1	0
"@Test public void definition_singleEndpoint_inArray_backup() throws Exception { Api api = load(""/io/gravitee/definition/jackson/api-singleendpoint-inarray.json"", Api.class); Assert.assertEquals(1, api.getProxy().getEndpoints().size()); Assert.assertFalse(api.getProxy().getEndpoints().get(0).isBackup()); } "	0	0	0	0	1	0
"public static File getCameraPicsDirectory(@NonNull final Context pContext) {  final String camDirPath = PreferenceManager.getDefaultSharedPreferences(pContext) .getString(PREFS_CAMERA_DIR, null);  final File dir = camDirPath == null ? pContext.getExternalFilesDir(""cam_pics"") : new File(camDirPath);  if (dir != null) { //noinspection ConstantConditions,ResultOfMethodCallIgnored dir.mkdirs(); }  return dir; } "	0	0	0	0	1	0
"private Observable<AwsDataCenterInfo> readMetaInfo() { final ReplaySubject<AwsDataCenterInfo> subject = ReplaySubject.create();  final AwsDataCenterInfo.Builder builder = new AwsDataCenterInfo.Builder(); Observable.from(MetaDataKey.values()).flatMap(new Func1<MetaDataKey, Observable<Void>>() { @Override public Observable<Void> call(final MetaDataKey key) { String uri = metaDataURI + '/' + key.getPath() + key.getName(); return RxNetty.createHttpGet(uri).flatMap(new Func1<HttpClientResponse<ByteBuf>, Observable<String>>() { @Override public Observable<String> call(HttpClientResponse<ByteBuf> response) { if (response.getStatus().code() / 100 != 2) { return Observable.error(new IOException(""Server returned error status "" + response.getStatus())); } return response.getContent().map(new Func1<ByteBuf, String>() { @Override public String call(ByteBuf byteBuf) { return byteBuf.toString(Charset.defaultCharset()); } }); } }).map(new Func1<String, Void>() { @Override public Void call(String metaValue) { key.apply(builder, metaValue); return null; } }); } }).subscribe(new Subscriber<Void>() { @Override public void onCompleted() { subject.onNext(builder.build()); subject.onCompleted(); }  @Override public void onError(Throwable e) { subject.onError(e); }  @Override public void onNext(Void aVoid) { } });  return subject; } "	0	0	0	0	1	0
"private int handleSwimmerChildGroup(Stil stil, String[] lines, int beginIndex, CSwimmerDataObject dataObject) throws ParseException{ //If the actual line is not the end of the object, give the line to the little parser for (int j = beginIndex + 1; j < lines.length; j++) { if(lines[j].contains(""}"")) return j + 1; else littleParser.handle(dataObject.getStilData().getLängeDataSet(stil), lines[j]); } throw new ParseException(""Missing closing brackets.""); } "	0	0	0	0	1	0
"private void checkIndexSpecs(IndexSpec[] indexSpecs) { // Check index specs IndexSpec[] indexSpecsReturned = store.getSoupIndexSpecs(TEST_SOUP); assertEquals(""Should have the same number of index specs"", indexSpecs.length, indexSpecsReturned.length); for (int i = 0; i<indexSpecs.length; i++) { assertEquals(""Wrong index spec path"", indexSpecs[i].path, indexSpecsReturned[i].path); assertEquals(""Wrong index spec type"", indexSpecs[i].type, indexSpecsReturned[i].type); assertEquals(""Wrong index spec column"", ""TABLE_1_"" + i, indexSpecsReturned[i].columnName); } } "	0	0	0	0	1	0
@Override public void markDirty() { if (null != sixNodeElement) { sixNodeElement.inventoryChanged(); } } 	0	0	0	0	1	0
"@Test public void callEndpoint() throws ODataClientException, MalformedURLException { String response = caller.callEndpoint(singletonMap(""Accept"", JSON.getType()), new URL(basePath + RESPONSE)); String expected = URLTestUtils.loadTextFile(RESPONSE); assertThat(response, equalTo(expected.substring(0, expected.lastIndexOf(""\n"")))); } "	0	0	0	0	1	0
@Test public void getBoundsTest() { Wall w = new Wall(0, 0, 50, 800); double expectedX = 0, expectedY = 0, expectedWidth = 50, expectedHeight = 800; double x = w.getBounds().getX(), y = w.getBounds().getY(), width = w .getBounds().getWidth(), height = w.getBounds().getHeight(); assertTrue(expectedX == x); assertTrue(expectedY == y); assertTrue(expectedWidth == width); assertTrue(expectedHeight == height); } 	0	0	0	0	1	0
@EventHandler(priority=EventPriority.HIGHEST) public void onProjectileHit(ProjectileHitEvent event) { if(!ModDamage.isEnabled) return;  final Projectile projectile = event.getEntity(); final LivingEntity shooter = projectile.getShooter();  EventData data = myInfo.makeData( shooter, (projectile instanceof Arrow)? MagicStuff.getGroundBlock((Arrow) projectile) : null, projectile, projectile.getWorld());  runRoutines(data);  } 	0	0	0	0	1	0
"@Override protected void onPostExecute(final Boolean success) { mRegisterTask = null; showProgress(false);  if (success) { Intent resultIntent = new Intent(); resultIntent.putExtra(""LoginForm"", new String[]{mEmail, mPassword}); setResult(RESULT_OK, resultIntent); finish(); } else { Toast.makeText(RegisterActivity.this, ""One of the fields you entered are invalid."", Toast.LENGTH_LONG); } } "	0	0	0	0	1	0
"@Override public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) { inflater.inflate(R.menu.addchildtag_ctx_menu, menu); Log.i(Constants.TAG, ""Inflated add child menu""); // super.onCreateOptionsMenu(menu, inflater); } "	0	0	0	0	1	0
@Override default OperatorType getOpType(){ return OperatorType.OR; } 	0	0	0	0	1	0
"@Test public void testQueueStringForComm() throws Exception {  System.out.println(""queueStringForComm""); String input = ""someCommand""; MockConnection mc = new MockConnection(mg.in, mg.out); GrblCommunicator instance = new GrblCommunicator(cb, asl, mc);  try { instance.queueStringForComm(input); // The cb preloads commands so the size represents queued commands. assertEquals(1, cb.size());  // Test that instance adds newline to improperly formed command. assertEquals(input + ""\n"", cb.peek());  instance.queueStringForComm(input); instance.queueStringForComm(input);  // Test that instance continues to queue inputs. assertEquals(3, cb.size());  input = ""someCommand\n""; cb = new LinkedList<>(); mc = new MockConnection(mg.in, mg.out); instance = new GrblCommunicator(cb, asl, mc);   instance.queueStringForComm(input); // Test that instance doesn't add superfluous newlines. assertEquals(input, cb.peek());  } catch (Exception e) { fail(""queueStringForComm threw an exception: ""+e.getMessage()); } } "	0	0	0	0	1	0
"@Override public SolrFilterResult buildSolrQuery() { return new SolrFilterResult(""NOT(""+inFilter.buildSolrQuery()+"")""); } "	0	0	0	0	1	0
@Test public final void testTimerEnumSTROLL() { assertEquals(5 * 60, Timer.Global.STROLL.getDuration()); } 	0	0	0	0	1	0
public Registrant findByInvoiceNumber(long invoiceNumber){ return registrantRepository.findByInvoiceNumber(invoiceNumber); } 	0	0	0	0	1	0
@Override public <T> T execute(HttpUriRequest request, ResponseHandler<? extends T> responseHandler) throws IOException { return execute(request, responseHandler, context); } 	0	0	0	0	1	0
"private HttpResponse handleResponse(final HttpHost httpHost, final HttpRequest request, final HttpResponse originalResponse, final HttpContext context) throws IOException { final GoodDataChallengeType challenge = identifyGoodDataChallenge(originalResponse); if (challenge == GoodDataChallengeType.UNKNOWN) { return originalResponse; } EntityUtils.consume(originalResponse.getEntity());  final Lock authLock = (Lock) context.getAttribute(LOCK_AUTH); final boolean entered = authLock != null ? authLock.tryLock() : true;  if (entered) { try { //only one thread requiring authentication will get here. final ReadWriteLock rwLock = (ReadWriteLock) context.getAttribute(LOCK_RW); Lock writeLock = null; if (rwLock != null) { writeLock = rwLock.writeLock(); writeLock.lock(); } boolean doSST = true; try { if (challenge == GoodDataChallengeType.TT) { if (this.refreshTt(httpHost)) { doSST = false; } } if (doSST) { final String sst = sstStrategy.obtainSst(); CookieUtils.replaceSst(sst, context, httpHost.getHostName()); if (!refreshTt(httpHost)) { throw new GoodDataAuthException(""Unable to obtain TT after successfully obtained SST""); } } } catch (GoodDataAuthException e) { return new BasicHttpResponse(new BasicStatusLine(originalResponse.getProtocolVersion(), HttpStatus.SC_UNAUTHORIZED, e.getMessage())); } finally { if (writeLock != null) { writeLock.unlock(); } } } finally { if (authLock != null) { authLock.unlock(); } } } return this.execute(httpHost, request, context); } "	0	0	0	0	1	0
@Override public String toString() { return blacklistPatterns.toString(); } 	0	0	0	0	1	0
"@Override public void itemButtonPressed(OwnerInventoryButtons ownerInventoryButtons) { ITEM_TYPE itemType = null; for (int i = 0; i < binInventory.length; i++) { ArrayList<ITEM_TYPE> populatedSlots = binInventory[i].getPopulatedSlots(); if (populatedSlots.size() > 0) { itemType = populatedSlots.get(0); break; } }  if (ownerInventoryButtons.canAddItems(itemType, getBinSize())) { ArrayList<Item> items = new ArrayList<Item>(); for (int i = 0; i < binInventory.length; i++) { items.addAll(binInventory[i].removeItem(itemType, binInventory[i].getCurrentSize())); }  ownerInventoryButtons.addItemToInventory(items);  // Reset everything currentMode = Mode.NORMAL; transferButton.setText(ConstantStore.get(""PARTY_INVENTORY_SCENE"", ""TRANSFER""));  for (OwnerInventoryButtons oib : playerInventoryButtons) { oib.updateGraphics(); } vehicleInventoryButtons.updateGraphics();  for (int i = 0; i < binInventory.length; i++) { binInventory[i].clear(); } updateBinButton(); } else { showModal(new Modal(container, PartyInventoryScene.this, ConstantStore.get(""PARTY_INVENTORY_SCENE"", ""ERR_INV_FAIL""), ConstantStore.get(""GENERAL"", ""OK""))); } } "	0	0	0	0	1	0
private void checkIfRegionDownloadIsCompleted(final OfflineRegion offlineRegion) { offlineRegion.getStatus(new OfflineRegion.OfflineRegionStatusCallback() { @Override public void onStatus(OfflineRegionStatus status) { if (!status.isComplete()) { resumeDownloadOfflineRegion(offlineRegion, status); } }  @Override public void onError(String error) { Log.e(TAG, error); } }); } 	0	0	0	0	1	0
"static String getSlaveName(PodTemplate template) { String hex = Long.toHexString(System.nanoTime()); String name = template.getName(); if (name == null) { return hex; } // no spaces name = template.getName().replace("" "", ""-"").toLowerCase(); // keep it under 256 chars name = name.substring(0, Math.min(name.length(), 256 - hex.length())); return String.format(""%s-%s"", name, hex); } "	0	0	0	0	1	0
"public synchronized void checkErrors() throws Throwable { if(errorOccurred == true) { reset(); throw LangCore.createCoreException(""Unexpected error logged."", exception); } assertTrue(errorOccurred == false, ""Assertion failed.""); } "	0	0	0	0	1	0
"private static Object[] findDataset(JsonNode root) { // use dataset id to find dataset first final JsonNode idNode = root.path(""datasetId""); if (!idNode.isMissingNode() && !idNode.isNull()) { try { final Object[] idUrn = findIdAndUrn(idNode.asInt()); if (idUrn[0] != null && idUrn[1] != null) { return idUrn; } } catch (Exception ex) { } }  // use dataset uri to find dataset final JsonNode properties = root.path(""datasetProperties""); if (!properties.isMissingNode() && !properties.isNull()) { final JsonNode uri = properties.path(""uri""); if (!uri.isMissingNode() && !uri.isNull()) { try { final Object[] idUrn = findIdAndUrn(uri.asText()); if (idUrn[0] != null && idUrn[1] != null) { return idUrn; } } catch (Exception ex) { } } }  // use dataset urn to find dataset final JsonNode urnNode = root.path(""urn""); if (!urnNode.isMissingNode() && !urnNode.isNull()) { try { final Object[] idUrn = findIdAndUrn(urnNode.asText()); if (idUrn[0] != null && idUrn[1] != null) { return idUrn; } } catch (Exception ex) { } }  return new Object[]{null, null}; } "	0	0	0	0	1	0
"@Test public void testSessionOpen() throws Exception { clearSessionId(); EJBTestServer.setHandler((invocation, affinity, out, method, handle) -> { StatefulEJBLocator<?> ejbLocator = (StatefulEJBLocator<?>) invocation.getEJBLocator(); return new String(Base64.getDecoder().decode(ejbLocator.getSessionId().getEncodedForm())); }); StatefulEJBLocator<EchoRemote> locator = EJBClient.createSession(EchoRemote.class, APP, MODULE, BEAN, """"); EchoRemote proxy = EJBClient.createProxy(locator); final String message = ""Hello World!!!""; final String echo = proxy.echo(message); Assert.assertEquals(""Unexpected echo message"", ""SFSB_ID"", echo);  } "	0	0	0	0	1	0
public Iterable<OneDriveItem.Metadata> search(String search, OneDriveExpand... expands) { final URL url = getSearchUrl().build(getApi().getBaseURL(), search); return () -> new OneDriveItemIterator(getApi(), url); } 	0	0	0	0	1	0
"@Override public void downloadDataset(String historyId, String datasetId, File destinationFile) throws IOException { Dataset dataset = showDataset(historyId, datasetId); String fileExt = dataset.getDataTypeExt();  File downloadedFile = super.getWebResourceContents(historyId) .path(datasetId).path(""display"").queryParam(""to_ext"", fileExt) .get(File.class); downloadedFile.renameTo(destinationFile); FileWriter fr = new FileWriter(downloadedFile); fr.close(); } "	0	0	0	0	1	0
@Override public void done(List<ParseObject> list, ParseException e) { if (e == null) { for (ParseObject obj : list) { Plan p = new Plan(); p.setAudioPath(obj.getString(PlansEntity.AUDIO_PATH)); p.setImagePath(obj.getString(PlansEntity.IMAGE_PATH)); p.setDetails(obj.getString(PlansEntity.DETAILS)); p.setTitle(obj.getString(PlansEntity.TITLE)); p.setTimeStamp(obj.getLong(PlansEntity.TIMESTAMP)); p.setAudioDuration(obj.getInt(PlansEntity.AUDIO_DURATION)); p.setDaysToAlarm(obj.getString(PlansEntity.DAYS_TO_ALARM)); p.setParseId(obj.getObjectId()); plans.add(p); } onGetPlansCallback.getPlans(plans); return; } e.getMessage(); } 	0	0	0	0	1	0
"private void sendMessage(String ircCatHost, int ircCatPort, String message, String channel) throws IOException { Socket socket = new Socket(ircCatHost, ircCatPort); Closer closer = Closer.create(); try { Writer out = closer.register(new OutputStreamWriter(socket.getOutputStream())); out.write(format(""%s %s\n"", channel, message)); out.flush(); } catch (IOException e) { socket.close(); throw closer.rethrow(e); } finally { closer.close(); } } "	0	0	0	0	1	0
@ReceiveEvent(components = ClientComponent.class) public void onIncreaseViewDistance(IncreaseViewDistanceButton button, EntityRef entity) { int viewDistance = config.getRendering().getViewDistance().getIndex(); int maxViewDistance = ViewDistance.values().length - 1;  if (viewDistance != maxViewDistance) { changeViewDistanceTo(ViewDistance.forIndex((config.getRendering().getViewDistance().getIndex() + 1))); } button.consume(); } 	0	0	0	0	1	0
"public static SubnetConfigData init(ResourceDescription resource, TabToLevel format, SubnetConfigData defaultData) throws Exception { if(format == null) format = new TabToLevel(); SubnetConfigData data = new SubnetConfigData(); format.ttl(SubnetConfigData.class.getSimpleName() + "" init:""); format.level.incrementAndGet();  format.ttl(""Resource name prefix:""); format.level.incrementAndGet(); data.resoucePrefixName = getAttribute(ProviderNames.ResourcePrefixNameKey, defaultData.resoucePrefixName, resource, format); format.level.decrementAndGet();  format.ttl(""VPC/Subnet: ""); format.level.incrementAndGet(); //        data.availabilityZone = getAttribute(InstanceNames.AvailabilityZoneKey, defaultData.availabilityZone, resource, format); data.vpcName = getAttribute(InstanceNames.VpcNameKey, defaultData.vpcName, resource, format); data.vpcCidr = getAttribute(InstanceNames.VpcCidrKey, defaultData.vpcCidr, resource, format); data.vpcTenancy = getAttribute(InstanceNames.VpcTenancyKey, defaultData.vpcTenancy, resource, format); data.vpcMaxDelay = Integer.parseInt(getAttribute(InstanceNames.VpcMaxDelayKey, """" + defaultData.vpcMaxDelay, resource, format)); data.vpcMaxRetries = Integer.parseInt(getAttribute(InstanceNames.VpcMaxRetriesKey, """" + defaultData.vpcMaxRetries, resource, format)); data.subnetCidr = getAttribute(InstanceNames.SubnetCidrKey, defaultData.subnetCidr, resource, format); data.subnetName = getAttribute(InstanceNames.SubnetNameKey, defaultData.subnetName, resource, format); data.subnetSize = Integer.parseInt(getAttribute(InstanceNames.SubnetSizeKey, """" + defaultData.subnetSize, resource, format)); data.subnetVpcId = getAttribute(InstanceNames.SubnetVpcIdKey, defaultData.subnetVpcId, resource, format); format.level.decrementAndGet();  format.ttl(""SecurityGroup:""); format.level.incrementAndGet(); data.sgDefaultVpcOverrideId = getAttribute(InstanceNames.SgIdKey, defaultData.sgDefaultVpcOverrideId, resource, format); data.sgMaxDelay = Integer.parseInt(getAttribute(InstanceNames.SgMaxDelayKey, """" + defaultData.sgMaxDelay, resource, format)); data.sgMaxRetries = Integer.parseInt(getAttribute(InstanceNames.SgMaxRetriesKey, """" + defaultData.sgMaxRetries, resource, format)); format.level.decrementAndGet();  format.ttl(""SecurityGroup Permissions:""); format.level.incrementAndGet(); format.level.decrementAndGet(); return data; } "	0	0	0	0	1	0
void invokeHandler() throws IOException { inBBB.readLimit(inBB.position()); outBBB.writePosition(outBB.limit()); handler.process(inBBB, outBBB, sessionDetails);  // did it write something? if (outBBB.writePosition() > outBB.limit()) { outBB.limit((int) outBBB.writePosition()); tryWrite(); } // TODO Optimise. // if it read some data compact(); if (inBBB.readPosition() > 0) { inBB.position((int) inBBB.readPosition()); inBB.limit((int) inBBB.readLimit()); inBB.compact(); inBBB.readPosition(0); inBBB.readLimit(inBB.position()); } } 	0	0	0	0	1	0
private TestQuestion buildTestQuestionForCardinalRelationConcept(final CardinalRelationConcept concept) { TestQuestion testQuestion = newTestQuestion(concept); // delegates to the question generation specification for this concept which specifies the question testQuestion.setQuestion(new CardinalRelationConceptTestQuestionSpec(concept).buildSpec()); testQuestion.setCorrectAnswer(String.valueOf(concept.getCompositeCardinality())); return testQuestion; } 	0	0	0	0	1	0
"@Test public void testJavaConfig() throws Exception { AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class); Config.listener1.onCreate(Config.conn1); verify(Config.channel1).queueDeclare(""foo"", true, false, false, null); verify(Config.channel1).exchangeDeclare(""bar"", ""direct"", true, false, new HashMap<String, Object>()); verify(Config.channel1).queueBind(""foo"", ""bar"", ""foo"", null);  Config.listener2.onCreate(Config.conn2); verify(Config.channel2, times(0)).queueDeclare(""foo"", true, false, false, null); verify(Config.channel2, times(0)).exchangeDeclare(""bar"", ""direct"", true, false, new HashMap<String, Object>()); verify(Config.channel2, times(0)).queueBind(""foo"", ""bar"", ""foo"", null); context.destroy(); } "	0	0	0	0	1	0
private FlowManager startFlowWithRetry(ApplicationManager appManager, String flowId, Map<String, String> args, int trials) { Throwable failure = null; do { try { if (failure != null) { TimeUnit.SECONDS.sleep(1); } return appManager.startFlow(flowId, args); } catch (InterruptedException e) { throw Throwables.propagate(e); } catch (Throwable t) { // Just memorize the failure failure = t; } } while (--trials > 0);  throw Throwables.propagate(failure); } 	0	0	0	0	1	0
"@Test(dataProvider = ""caches"") @CacheSpec(expireAfterAccess = Expire.ONE_MINUTE, population = { Population.PARTIAL, Population.FULL }) public void get(Cache<Integer, Integer> cache, CacheContext context) { Function<Integer, Integer> mappingFunction = key -> -key; context.ticker().advance(30, TimeUnit.SECONDS); cache.get(context.firstKey(), mappingFunction); context.ticker().advance(45, TimeUnit.SECONDS); cache.get(context.firstKey(), mappingFunction); cache.get(context.lastKey(), mappingFunction); // recreated  cache.cleanUp(); assertThat(cache.estimatedSize(), is(2L)); long count = context.initialSize() - 1; assertThat(cache, hasRemovalNotifications(context, count, RemovalCause.EXPIRED)); } "	0	0	0	0	1	0
@Test public void switchAmPm_shouldMakeAfternoonMorning() throws Exception { presenterAmPm.switchAmPm(); verify(view).updateTime(eq(String.valueOf(TEST_CALENDAR_HOUR_PM - 12)), eq(String.valueOf(TEST_CALENDAR_MINUTE)), eq(AM), anyString(), anyString()); verify(formatter).format(eq(new Date(testCalendarPm.getTimeInMillis() - 12 * HOUR_IN_MILLIS)), any(StringBuffer.class), any(FieldPosition.class)); verify(view, never()).close(); } 	0	0	0	0	1	0
@Test public void decreaseTimerHour_shouldRemoveHourInAmPmFormatAfternoon() throws Exception { presenterAmPm.decreaseTimerHour(); verify(view).updateTime(eq(String.valueOf(TEST_CALENDAR_HOUR_PM - 12 - 1)), eq(String.valueOf(TEST_CALENDAR_MINUTE)), eq(PM), anyString(), anyString()); verify(formatter).format(eq(new Date(testCalendarPm.getTimeInMillis() - HOUR_IN_MILLIS)), any(StringBuffer.class), any(FieldPosition.class)); verify(view, never()).close(); } 	0	0	0	0	1	0
@Test public void increaseTimerHour_shouldAddHourInAmPmFormatAfternoon() throws Exception { presenterAmPm.increaseTimerHour(); verify(view).updateTime(eq(String.valueOf(TEST_CALENDAR_HOUR_PM - 12 + 1)), eq(String.valueOf(TEST_CALENDAR_MINUTE)), eq(PM), anyString(), anyString()); verify(formatter).format(eq(new Date(testCalendarPm.getTimeInMillis() + HOUR_IN_MILLIS)), any(StringBuffer.class), any(FieldPosition.class)); verify(view, never()).close(); } 	0	0	0	0	1	0
"@Override protected void init(final ImmutableMap<String, Object> execEnvVars) throws DbException { Preconditions.checkState(getSchema() != null, ""unable to determine schema in init""); inputSchema = getChild().getSchema(); aggregators = AggUtils.allocateAggs(factories, getChild().getSchema(), getPythonFunctionRegistrar()); groupKeys = new TupleBuffer(groupSchema); aggStates = new ArrayList<>(); tbgroupState = new ArrayList<>(); bs = new HashMap<Integer, BitSet>(); groupKeyMap = new IntObjectHashMap<>(); } "	0	0	0	0	1	0
"public ExcelEmployeeInsertResult importFromExcel(InputStream inputStream) { ExcelEmployeeInsertResult insertResult; String[] columnArray = ExcelNameContainer.getColumnTitleArray(); XlsReader reader = new XlsReader(inputStream); List<ExcelEmployee> excelEmployeeList; try { excelEmployeeList = reader.read(columnArray, new ExcelEmployeeBuilder<ExcelEmployee>()); String errorMsg = validateExcelEmployeeList(excelEmployeeList); if (errorMsg.isEmpty()) { insertResult = employeeDAO .insertExcelEmployees(excelEmployeeList); } else { Map<String, String> errorMap = new LinkedHashMap<String, String>(); errorMap.put(AppConstants.ERROR, errorMsg); insertResult = new ExcelEmployeeInsertResult(false, errorMap); } } catch (Exception e) { insertResult = new ExcelEmployeeInsertResult(false); log.error(""Cannot export from excel file!"", e); } return insertResult; } "	0	0	0	0	1	0
protected final double getChildLayoutHeight() { return Math.max(0, getLayoutHeight() - insets.top - insets.bottom); } 	0	0	0	0	1	0
public static Notification addTask(Task task) { Notification n = new AddTask().addTask(task); ArrayList<String> fS = FreeSlots.getFreeSlots(task.getDate()); System.out.println(fS); return n; } 	0	0	0	0	1	0
"public static void loadConfig(Ancient plugin) { File newconfig = new File(plugin.getDataFolder().getPath() + File.separator + ""manaconfig.yml""); if (newconfig.exists()) { YamlConfiguration yc = new YamlConfiguration(); try { yc.load(newconfig); } catch (Exception e) { e.printStackTrace(); } defaultMana = yc.getInt(""Mana.default mana"", defaultMana); defaultMana = yc.getInt(""Mana.default manareg"", defaultMana); defaultManaRegInterval = (float) yc.getDouble(""Mana.manareg interval"", defaultManaRegInterval); } } "	0	0	0	0	1	0
"@Override public void onResponse(NetworkResponse response) { try { final String jsonString = new String(response.data,HttpHeaderParser.parseCharset(response.headers));  JSONArray jsonArray = new JSONArray(jsonString);  System.out.println(jsonString);  campaigns_list.clear();  if (jsonArray.length() > 0) {  layout_noCampaigns.setVisibility(View.GONE);  // looping through json and adding to movies list for (int i = 0; i < jsonArray.length(); i++) { try { JSONObject o = jsonArray.getJSONObject(i);  List<Topic> topicList = new ArrayList<>();  JSONArray topics = new JSONArray(o.getString(""topics"")); for(int j = 0; j< topics.length(); j++){ JSONObject t = topics.getJSONObject(j); topicList.add(new Topic(t.getString(""id""),t.getString(""name""),false,t.getString(""main_color""), t.getString(""status_color""),null)); }  List<Address> addressList = new ArrayList<>();  JSONArray addresses = new JSONArray(o.getString(""campaign_addresses"")); for(int j = 0; j< addresses.length(); j++){ JSONObject t = addresses.getJSONObject(j); addressList.add(new Address(t.getString(""address""), t.getDouble(""lat""), t.getDouble(""lng""))); }   JSONObject a = new JSONObject(o.getString(""organization"")); Association ass = new Association(a.getString(""id""),a.getString(""organization_name""),a.getString(""avatar_normal""),null,null);  CharityCampaign m = new CharityCampaign(o.getString(""id""),o.getString(""message""),ass,topicList,Utils.getTimestamp(o.getString(""created_at"").substring(0,19), mainActivity),o.getString(""long_description""), o.getString(""photo_mobile""), o.getString(""photo_original""),addressList );   campaigns_list.add(0, m);  } catch (JSONException e) { System.out.println(""JSON Parsing error: "" + e.getMessage()); } } }else layout_noCampaigns.setVisibility(View.VISIBLE); // Create adapter passing in the sample user data campaignsTabAdapter = new CampaignsTabAdapter(campaigns_list,fragmentManager,res,mainActivity, noSocialsSnackbarCallback);  // Attach the adapter to the recyclerview to populate items rv_main_list.setAdapter(campaignsTabAdapter);  } catch (UnsupportedEncodingException | JSONException e) { e.printStackTrace(); } } "	0	0	0	0	1	0
public void removeUpdateSite(final String name) { for (final FileObject file : forUpdateSite(name)) { file.removeFromUpdateSite(name, this); } updateSites.remove(name); setUpdateSitesChanged(true);  // update rank int counter = 1; for (final Map.Entry<String, UpdateSite> entry : updateSites.entrySet()) { entry.getValue().rank = counter++; } } 	0	0	0	0	1	0
"@Override public Future<Void> exposeManagementMetadata(@ClientId Object clientDescriptor, ContextContainer contextContainer, Capability... capabilities) { ClientIdentifier clientIdentifier = findClientIdentifier((ClientDescriptor) clientDescriptor); // expose the registry into this entity tree producer.addNode(Utils.array(""management"", ""clients"", clientIdentifier.getClientId(), ""registry""), ""contextContainer"", contextContainer); producer.addNode(Utils.array(""management"", ""clients"", clientIdentifier.getClientId(), ""registry""), ""capabilities"", capabilities); // marker that we keep, saying this client has a registry haveRegistry.put((ClientDescriptor) clientDescriptor, Void.TYPE); // fire notification pushNotification(clientDescriptor, new ContextualNotification(Context.create(""clientId"", clientIdentifier.getClientId()), ""CLIENT_REGISTRY_UPDATED"")); return CompletableFuture.completedFuture(null); } "	0	0	0	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); this.setContentView(R.layout.activity_category);  this.changeBackground();  //Init CheckBox checkBox_all           = (CheckBox)    this.findViewById(R.id.checkBox_cat_all); ScrollView scrollView           = (ScrollView)  this.findViewById(R.id.scrollView_cats); Button close                    = (Button)      this.findViewById(R.id.category_close); close.setOnClickListener(this);  LinearLayout linearLayout   = new           LinearLayout(this); this.checkBoxes             = new           ArrayList<>(); DatabaseManager db          = new           DatabaseManager(this); this.availableCategories    = new           ArrayList<>();  //Adding OnClickListener checkBox_all.setOnClickListener(this); this.checked = checkBox_all.isChecked();  //Additional GUI Settings linearLayout.setOrientation(LinearLayout.VERTICAL); scrollView.addView(linearLayout);   //read DISTINCT Categories from DataBase this.availableCategories =  db.getCategories();  int cats = 0;  //Add one Checkbox for each Button (+ GUI Settings) for (int i = 0; i < this.availableCategories.size(); i++) { CheckBox c = new CheckBox(this); c.setId(this.viewsCount); this.viewsCount++; linearLayout.addView(c); c.setText(convertCategoryName(this.availableCategories.get(i))); c.setTextColor(Color.WHITE); c.setOnClickListener(this); this.checkBoxes.add(c);  if (Settings.getCategories().contains(this.availableCategories.get(i))) { c.setChecked(true); cats += 1; } }  //if no category was found, select them all if(cats == 0) { this.selectAllBoxes(true); }  } 	0	0	0	0	1	0
@Override public void visitReturnStatement(ReturnStatementTree tree) { if (SESSION_CLASSES.contains(tree.expression().symbolType().fullyQualifiedName())) { returnStatementTree = tree; } super.visitReturnStatement(tree); } 	0	0	0	0	1	0
"@RequestMapping(value = ""/subida"", method = RequestMethod.POST) public String handleFileUpload(@RequestParam(""titulo"") String titulo, @RequestParam(""desc"") String desc ,@RequestParam(""file"") MultipartFile file, @RequestParam(""tags"") String tag, HttpServletRequest request,RedirectAttributes redirectAttributes) {  //Quito los espacios del string tag = tag.trim();  //Creo un tag provisional y un long Tag tagTemp = new Tag(tag); long indice = 0;  //Creo un array de tags con todos los tags ArrayList<Tag> tags = new ArrayList<Tag>(); tags = (ArrayList<Tag>) this.tagrepository.findAll();  //Creo un booleano para ver si lo he encontrado boolean found = false;  //Comparo todos lo tags para ver si existe alguno con el mismo nombre. Si existe alguno con el mismo nombre, copio su id y pongo found a true for(int i = 0; i < tags.size(); i++) { if(tags.get(i).getNombre().equals(tag)) { indice = tags.get(i).getId(); found = true; } }  Vineta viñeta = new Vineta(titulo, desc, ""/imgs/""+file.getOriginalFilename()); Principal p = request.getUserPrincipal(); User user = usuarios.findByUsername(p.getName()); viñeta.setAutor(user);  //Si existe ya el tag, se añade a la viñeta, y sino se crea if(found) { viñeta.setTags(this.tagrepository.findOne(indice)); } else { this.tagrepository.save(tagTemp); viñeta.setTags(tagTemp); };  this.vinetarepository.save(viñeta); storageService.store(file); redirectAttributes.addFlashAttribute(""message"", ""You successfully uploaded "" + file.getOriginalFilename() + ""!"");  return ""redirect:/home""; } "	0	0	0	0	1	0
"@Override public List<Location> getSpawnPoints() { List<Location> locations = new ArrayList<>();  Scanner br = new Scanner(FileHandler.loadFile(""maps/"" + mapName + "".txt"")); for (int i = 0; i < width+1; i++) { br.nextLine(); }  locations.add(new Location(Integer.parseInt(br.next()), Integer.parseInt(br.next()))); locations.add(new Location(Integer.parseInt(br.next()), Integer.parseInt(br.next()))); locations.add(new Location(Integer.parseInt(br.next()), Integer.parseInt(br.next()))); locations.add(new Location(Integer.parseInt(br.next()), Integer.parseInt(br.next()))); br.close();  return locations; } "	0	0	0	0	1	0
@Override public Message getMessage() { try { String data = socketReader.readLine(); return processMessage(data); } catch (Exception e) { System.out.println(e); } return null; } 	0	0	0	0	1	0
public void remove(int entityId) { if ( has(entityId) ) { removeTransmuter.transmute(world.getEntity(entityId)); } } 	0	0	0	0	1	0
"public ArrayList<WFSFeature> listSDAFeatures(){  logger.info(""Listing features from the SPARQL Endpoint "" + GlobalSettings.getDefaultSPARQLEndpoint() + "" ..."");  ResultSet rs = jn.executeQuery(SPARQL.listNamedGraphs, GlobalSettings.getDefaultSPARQLEndpoint()); ArrayList<WFSFeature> result = new ArrayList<WFSFeature>();  String CRS = new String();  while (rs.hasNext()) { WFSFeature feature = new WFSFeature(); QuerySolution soln = rs.nextSolution(); feature.setName(soln.get(""?graphName"").toString()); feature.setTitle(soln.getLiteral(""?title"").getValue().toString()); feature.setFeatureAbstract(soln.getLiteral(""?abstract"").getValue().toString()); feature.setKeywords(soln.getLiteral(""?keywords"").getValue().toString()); feature.setLowerCorner(GlobalSettings.getDefaultLowerCorner()); feature.setUpperCorner(GlobalSettings.getDefaultUpperCorner()); feature.setAsSDAFeature(true);   CRS = soln.get(""?wkt"").toString();  if(CRS.contains(""<"") || CRS.contains("">"")){  CRS = CRS.substring(CRS.indexOf(""<""), CRS.indexOf("">"")); CRS = CRS.replace(""http://www.opengis.net/def/crs/EPSG/0/"", ""EPSG:"");  CRS = CRS.replace(""<"", """"); CRS = CRS.replace("">"", """");  feature.setCRS(CRS);  } else {  feature.setCRS(GlobalSettings.getDefaultCRS());  }  result.add(feature);  }  logger.info(""Total SDA Features: "" + result.size());  return result; } "	0	0	0	0	1	0
@Override @Transactional public User findById(final Serializable id) { User user = this.getHibernateTemplate().get(this.persistentClass, id); user.addRoles(); return user; } 	0	0	0	0	1	0
public List<File> getSelectedFiles () { if ( chooserType == FileChooserType.save ) { // Returning custom file return Arrays.asList ( new File ( currentFolder, selectedFilesTextField.getText () ) ); } else { // Retrieving files, selected in current view final List<File> files = getAllSelectedFiles ();  // Filtering them using unmodified file filter return getFilteredSelectedFiles ( files ); } } 	0	0	0	0	1	0
"@Test public void testMessageBundle() { Locale locale = new Locale(""en"");  ResourceBundle bundle = ResourceBundle.getBundle(""tec.uom.se.internal.format.messages"", locale); assertNotNull(bundle); String text = bundle.getString(""tec.uom.se.unit.Units.KILOMETRES_PER_HOUR""); assertEquals(""km/h"", text); assertEquals(59, bundle.keySet().size()); } "	0	0	0	0	1	0
"public void onSettingsView(View v) { Toast.makeText(MapsActivity.this, ""Settings"", Toast.LENGTH_SHORT).show(); } "	0	0	0	0	1	0
public static void main (String[] args) {  CLI cli = new CLI(args);  try { cli.readArgs(); } catch (IncorrectInputException e) { e.printStackTrace(); }  // Read the miro-content from file String content = (new Reader(cli.getInputPath())).read();  // Get the main AST List<Map<String, Object>> mainTree = null; try { mainTree = TreeBuilder.build(content); } catch (IndentationException inex) { inex.printStackTrace(); }  //System.out.println(mainTree);  Parser parser = new Parser(mainTree, cli.getInputPath()); Stylesheet stylesheet = parser.parseTree();  new Exporter(stylesheet, cli.getOutputPath()).export();  } 	0	0	0	0	1	0
"private String matcherKey(String name) { String key = root + name; if (!name.matches(Parser$.MODULE$.FieldRegex().toString())) { key = StringUtils.strip(root, ""."") + ""['"" + name + ""']""; } return key; } "	0	0	0	0	1	0
public ExtractorMediaSource getMediaSource(int position) { return mMediaSources[position]; } 	0	0	0	0	1	0
@Override public String toJson(CyRow cyRow) { return gson.toJson(cyRow, CyRow.class); } 	0	0	0	0	1	0
@Override public AbstractTraceRegion createRegion(int offset, int length, int lineNumber, int endLineNumber, boolean useForDebugging, List<ILocationData> associations, AbstractTraceRegion parent) { return new TraceRegion(offset, length, lineNumber, endLineNumber, useForDebugging, associations, parent); } 	0	0	0	0	1	0
"@Override public Uri insert(Uri uri, ContentValues contentValues) { int uriType = uriMatcher.match(uri); SQLiteDatabase sqlDB = dbOpenHelper.getWritableDatabase(); long id = 0; switch (uriType) { case MODIFICATIONS: id = sqlDB.insert(ModifierSequence.Table.TABLE_NAME, null, contentValues); break; default: throw new IllegalArgumentException(""Unknown URI: "" + uri); } getContext().getContentResolver().notifyChange(uri, null); return Uri.parse(BASE_URI + ""/"" + id); } "	0	0	0	0	1	0
"@Override public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder(); queryBuilder.setTables(ModifierSequence.Table.TABLE_NAME);  int uriType = uriMatcher.match(uri);  switch(uriType) { case MODIFICATIONS: break; default: throw new IllegalArgumentException(""Unknown URI"" + uri); }  SQLiteDatabase db = dbOpenHelper.getReadableDatabase();  Cursor cursor = queryBuilder.query(db, projection, selection, selectionArgs, null, null, sortOrder); cursor.setNotificationUri(getContext().getContentResolver(), uri);  return cursor; } "	0	0	0	0	1	0
public List<Scope> getScopesForAddDialog() { return Collections.singletonList(new ContactDialogScope()); } 	0	0	0	0	1	0
@Override protected void onPostExecute(final Boolean success) { mAuthTask = null; showProgress(false);  if (success) { finish(); } else { mPasswordView.setError(getString(R.string.error_incorrect_password)); mPasswordView.requestFocus(); } } 	0	0	0	0	1	0
"@Test public void simpleRequestWithPayload() throws IOException, TemplateModelException { final String requestName = ""SimpleWithPayloadRequest""; final FileUtils fileUtils = mock(FileUtils.class); final GoTestGeneratedCode codeGenerator = new GoTestGeneratedCode(fileUtils, requestName, ""Bucket"");  codeGenerator.generateCode(fileUtils, ""/input/simpleRequestWithPayload.xml"");  // Verify Request file was generated final String requestCode = codeGenerator.getRequestCode(); CODE_LOGGER.logFile(requestCode, FileTypeToLog.REQUEST); assertTrue(hasContent(requestCode));  // Verify Response file was generated final String responseCode = codeGenerator.getResponseCode(); CODE_LOGGER.logFile(responseCode, FileTypeToLog.RESPONSE); assertTrue(hasContent(responseCode));  // Verify response payload type file was not generated final String typeCode = codeGenerator.getTypeCode(); CODE_LOGGER.logFile(typeCode, FileTypeToLog.MODEL); assertTrue(hasContent(typeCode));  // Verify that the client code was generated final String client = codeGenerator.getClientCode(HttpVerb.DELETE); CODE_LOGGER.logFile(client, FileTypeToLog.CLIENT); assertTrue(hasContent(client)); } "	0	0	0	0	1	0
public Scorecard getSC(Point2D point) { return getSC(point.getX(), point.getY()); } 	0	0	0	0	1	0
public Scorecard getSC(Player player) { return getSC(player.getLocation().getX(), player.getLocation().getZ()); } 	0	0	0	0	1	0
public Game getGame (Location loc) { return getGame(getRegion(loc.getX(), loc.getZ())); } 	0	0	0	0	1	0
public Region getRegion (Location loc) { return getRegion(loc.getX(), loc.getZ()); } 	0	0	0	0	1	0
"@Override public void onStart(){ super.onStart(); realmResults = myRealm.where(EarnBurn.class).equalTo(""type"", balanceType).findAllAsync(); realmResults.addChangeListener(new RealmChangeListener<RealmResults<EarnBurn>>() { @Override public void onChange(RealmResults<EarnBurn> element) { Log.d(""ZHAN"", ""There are "" + element.size() + "" items 1""); itemList = myRealm.copyFromRealm(element); Log.d(""ZHAN"", ""There are "" + itemList.size() + "" items 2"");  listAdapter.clear(); listAdapter.addAll(itemList);  element.removeChangeListener(this); } }); } "	0	0	0	0	1	0
private void visitMethods(SootClass c) { if(c.resolvingLevel()!=SootClass.BODIES) Scene.v().forceResolve(c.getName(), SootClass.BODIES); for (Object o : c.getMethods()) { if (o instanceof SootMethod) { SootMethod m = (SootMethod) o; if (!reachableMethods.contains(m)) continue; for (IMethodVisitor mv : mvs) { mv.visit(m); if (!doCFGs) continue; if (m.isAbstract()) continue; ICFG cfg = SootUtilities.getCFG(m); visitInsts(cfg); } } } } 	0	0	0	0	1	0
"@Option @LongSwitch(""httpPort"") @ShortSwitch(""p"") @SingleArgument public void setHttpPort(String port) { this.httpPort = port; } "	0	0	0	0	1	0
@Override public <T extends RealmObject> List<T> all(Class<T> clazz) { Realm realm = Realm.getInstance(context); try { return realm.allObjects(clazz); } finally { realm.close(); } } 	0	0	0	0	1	0
@Override public int advance(int target) throws IOException { currentChildDoc = childrenIterator.advance(target); if (currentChildDoc == DocIdSetIterator.NO_MORE_DOCS) { return currentChildDoc; } HashedBytesArray uid = typeCache.idByDoc(currentChildDoc); if (uid == null) { return nextDoc(); }  if (uidToScore.containsKey(uid)) { // Can use lget b/c uidToScore is only used by one thread at the time (via CacheRecycler) currentScore = uidToScore.lget(); return currentChildDoc; } else { return nextDoc(); } } 	0	0	0	0	1	0
public void onRecordingDescriptor( final long correlationId, final long recordingId, final long joinTimestamp, final long endTimestamp, final long joinPosition, final long endPosition, final int initialTermId, final int termBufferLength, final int mtuLength, final int segmentFileLength, final int sessionId, final int streamId, final String channel, final String sourceIdentity) { assertThat(recordingId, is(ArchiverSystemTest.this.recordingId)); assertThat(termBufferLength, is(publication.termBufferLength()));  assertThat(streamId, is(PUBLISH_STREAM_ID));  assertThat(correlationId, is(requestRecordingsCorrelationId)); } 	0	0	0	0	1	0
"private static ImmutableMap<String, FxIndex> loadFromCsv() { List<ResourceLocator> resources = ResourceConfig.orderedResources(""FxIndexData.csv""); Map<String, FxIndex> map = new HashMap<>(); for (ResourceLocator resource : resources) { try { CsvFile csv = CsvFile.of(resource.getCharSource(), true); for (int i = 0; i < csv.rowCount(); i++) { FxIndex parsed = parseFxIndex(csv, i); map.put(parsed.getName(), parsed); } } catch (RuntimeException ex) { log.severe(""Error processing resource as FX Index CSV file: "" + resource + ex.getMessage()); return ImmutableMap.of(); } } return ImmutableMap.copyOf(map); } "	0	0	0	0	1	0
"@Test public void testNavigation() { Map<VirtualFile, Collection<LocalIssuePointer>> data = new HashMap<>();  // ordering of files: name // ordering of issues: creation date (inverse), severity, ruleName, startLine addFile(data, ""file1"", 2); addFile(data, ""file2"", 2); addFile(data, ""file3"", 2);  treeBuilder.updateModel(data, null); IssueNode first = treeBuilder.getNextIssue((AbstractNode<?>) model.getRoot()); assertNode(first, ""file1"", 1);  IssueNode second = treeBuilder.getNextIssue(first); assertNode(second, ""file1"", 0);  IssueNode third = treeBuilder.getNextIssue(second); assertNode(third, ""file2"", 1);  assertThat(treeBuilder.getPreviousIssue(third)).isEqualTo(second); assertThat(treeBuilder.getPreviousIssue(second)).isEqualTo(first); assertThat(treeBuilder.getPreviousIssue(first)).isNull(); } "	0	0	0	0	1	0
"private CrossInfo parsePigeonServerTransaction(Transaction t, MessageTree tree) { CrossInfo crossInfo = new CrossInfo(); String localIp = tree.getIpAddress(); List<Message> messages = t.getChildren();  for (Message message : messages) { if (message instanceof Event) { if (message.getType().equals(""PigeonService.client"")) { String name = message.getName(); int index = name.indexOf("":"");  if (index > 0) { name = name.substring(0, index); }  String formatIp = formatIp(name);  if (formatIp != null && formatIp.length() > 0) { crossInfo.setRemoteAddress(formatIp); } break; } } }  if (crossInfo.getRemoteAddress().equals(UNKNOWN)) { MessageId id = MessageId.parse(tree.getMessageId()); String remoteIp = id.getIpAddress();  crossInfo.setRemoteAddress(remoteIp); }  crossInfo.setLocalAddress(localIp); crossInfo.setRemoteRole(""Pigeon.Client""); crossInfo.setDetailType(""PigeonService""); return crossInfo; } "	0	0	0	0	1	0
@Override public boolean isNull() { return (super.getOutput() == null || this.recipes == null); } 	0	0	0	0	1	0
"@Override protected void onError(HttpServletRequest req, HttpServletResponse resp, AuthorizationCodeResponseUrl errorResponse) throws ServletException, IOException { resp.getWriter().print( ""<h3>É preciso autorizar o uso do Google+ para ter acesso ao Tech Gallery</h3>""); resp.setStatus(200); resp.addHeader(""Content-Type"", ""text/html""); } "	0	0	0	0	1	0
public static float getCompressed(float brightness) { return (float) Math.pow(brightness, instance.brightnessPower); } 	0	0	0	0	1	0
"@Override public Format<Object> getFormat(ColumnDesc columnDesc) { String datatype = columnDesc.datatype; if (datatype.equalsIgnoreCase(""adql:INTEGER"")) return getIntegerFormat(columnDesc);  if (datatype.equalsIgnoreCase(""adql:BIGINT"")) return getLongFormat(columnDesc);  if (datatype.equalsIgnoreCase(""adql:DOUBLE"")) return getDoubleFormat(columnDesc);  if (datatype.equalsIgnoreCase(""adql:CHAR"") || datatype.equalsIgnoreCase(""adql:CHAR"")) return getStringFormat(columnDesc);  if (datatype.equalsIgnoreCase(""adql:TIMESTAMP"")) return getTimestampFormat(columnDesc);  if (datatype.equalsIgnoreCase(""adql:BINARY"") || datatype.equalsIgnoreCase(""adql:VARBINARY"")) return getByteArrayFormat(columnDesc);  if (datatype.equalsIgnoreCase(""adql:POINT"")) return getPointFormat(columnDesc);  if (datatype.equalsIgnoreCase(""adql:REGION"")) return getRegionFormat(columnDesc);  if (datatype.equalsIgnoreCase(""adql:proto:INTERVAL"")) return getIntervalFormat(columnDesc);  if (datatype.equalsIgnoreCase(""adql:CLOB"")) return getClobFormat(columnDesc);  // VOTable datatypes in the tap_schema.columns.datatype: legal? // needed if the database has an array of numeric values since // there is no adql equivalent if (datatype.equalsIgnoreCase(""votable:int"")) if (columnDesc.size != null && columnDesc.size > 1) return getIntArrayFormat(columnDesc); else return getIntegerFormat(columnDesc);  if (datatype.equalsIgnoreCase(""votable:long"")) if (columnDesc.size != null && columnDesc.size > 1) return getLongArrayFormat(columnDesc); else return getLongFormat(columnDesc);  if (datatype.equalsIgnoreCase(""votable:float"")) if (columnDesc.size != null && columnDesc.size > 1) return getFloatArrayFormat(columnDesc); else return getRealFormat(columnDesc);  if (datatype.equalsIgnoreCase(""votable:double"")) if (columnDesc.size != null && columnDesc.size > 1) return getDoubleArrayFormat(columnDesc); else return getDoubleFormat(columnDesc);  return getDefaultFormat(); } "	0	0	0	0	1	0
"@Test public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException { UserPrefs expected = new UserPrefs(); expected.setGuiSettings(1000, 500, 300, 100); UserPrefs actual = readUserPrefs(""TypicalUserPref.json"").get(); assertEquals(expected, actual); } "	0	0	0	0	1	0
"public ProtocolApproveBean getProtocolFullApprovalBean() { if ( protocolFullApprovalBean == null ){ LOG.debug(""ActionHelperBase: getProtocolFullApprovalBean() - initializing protocolFullApprovalBean.""); protocolFullApprovalBean = buildProtocolApproveBean(getFullApprovalProtocolActionTypeHook(), Constants.PROTOCOL_FULL_APPROVAL_ACTION_PROPERTY_KEY); } return protocolFullApprovalBean; } "	0	0	0	0	1	0
"private Map<String, Map> getBalanceViews(){ Map<String, Map> views = new HashMap<>(3); Map<String, TextView> totals = new HashMap<>(3); Map<String, TextView> pending = new HashMap<>(3); Map<String, TextView> completed = new HashMap<>(3); totals.put(""balance"", (TextView) findViewById(R.id.completedBalanceView)); totals.put(""income"", (TextView) findViewById(R.id.totalIncomeView)); totals.put(""expenditure"", (TextView) findViewById(R.id.totalExpenditureView)); pending.put(""balance"", (TextView) findViewById(R.id.pendingBalanceView)); pending.put(""income"", (TextView) findViewById(R.id.pendingIncomeView)); pending.put(""expenditure"", (TextView) findViewById(R.id.pendingExpenditureView)); completed.put(""balance"", (TextView) findViewById(R.id.completedBalanceView)); completed.put(""income"", (TextView) findViewById(R.id.completedIncomeView)); completed.put(""expenditure"", (TextView) findViewById(R.id.completedExpenditureView)); views.put(""total"", totals); views.put(""pending"", pending); views.put(""completed"", completed); return views; } "	0	0	0	0	1	0
private void stopComponents() { /* Fermeture de tous les gestionnaires.*/ //On fait les fermetures dans l'ordre inverse des enregistrements. //On se limite aux composants qui ont été démarrés. final List<Component> reversedComponents = new ArrayList<>(components.values()); java.util.Collections.reverse(reversedComponents);  for (final Component component : reversedComponents) { stopComponent(component); } } 	0	0	0	0	1	0
@NonNull private RelativeLayout getExtraContentHolderRelativeLayout() { LayoutParams relativeLayoutParams = new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT); RelativeLayout relativeLayout = new RelativeLayout(getContext()); relativeLayoutParams.topMargin = DimenUtils.getStatusBarHeight(getContext()); relativeLayoutParams.bottomMargin = navigationBarSizeIfExistAtTheBottom.y; relativeLayoutParams.rightMargin = navigationBarSizeIfExistOnTheRight.x; relativeLayout.setLayoutParams(relativeLayoutParams); return relativeLayout; } 	0	0	0	0	1	0
public List<Material> findMaterialsWithTag(Tag tag) { return materialRepository.findByTagOrderByDateDesc(tag); } 	0	0	0	0	1	0
private boolean compareElement(Element elem, String name, String type) { try { String elementName = elem.getSimpleName().toString(); String elementType = TypeHandle.getElementSignature(elem); return name.equals(elementName) && (type.length() == 0 || type.equals(elementType)); } catch (NullPointerException ex) { return false; } } 	0	0	0	0	1	0
public MethodHandle findMethod(String name, String signature) { String rawSignature = TypeHandle.stripGenerics(signature);  for (Element element : this.getEnclosedElements()) { switch (element.getKind()) { case CONSTRUCTOR: case METHOD: ExecutableElement method = (ExecutableElement)element; if (this.compareElement(method, name, signature) || this.compareElement(method, name, rawSignature)) { return new MethodHandle(method); }  break; //                case STATIC_INIT:  // TODO? //                    break; default: break; }  }  return null; } 	0	0	0	0	1	0
@Override public void update(Observable o, Object arg) { salvoHandler = (SalvoHandler) o; Set<Integer> enemyHitPositions = salvoHandler.getEnemyHitPositions(); updateEnemyBoard(enemyHitPositions); updatePlayerBoard(salvoHandler.getPlayerHitPositions()); enemyMastPositions .stream() .filter(data -> enemyHitPositions.contains(Integer.parseInt(data.getId()))) .forEach(data -> { data.setDisable(false); data.setStyle(ButtonUtils.defaultButtonColorStyle()); }); } 	0	0	0	0	1	0
@Override public boolean deleteTag(Long id) { UserModification result = readJson(config.getUriTagsDelete() + id.toString(), UserModification.class); return result != null && result.success; } 	0	0	0	0	1	0
public boolean isSubtype(AnnotationMirror rhs, AnnotationMirror lhs) { if (AnnotationUtils.areSameIgnoringValues(rhs, OntologyUtils.ONTOLOGY) && AnnotationUtils.areSameIgnoringValues(lhs, OntologyUtils.ONTOLOGY)) { OntologyValue[] rhsValue = OntologyUtils.getOntologyValues(rhs); OntologyValue[] lhsValue = OntologyUtils.getOntologyValues(lhs); EnumSet<OntologyValue> rSet = EnumSet.noneOf(OntologyValue.class); rSet.addAll(Arrays.asList(rhsValue)); EnumSet<OntologyValue> lSet = EnumSet.noneOf(OntologyValue.class); lSet.addAll(Arrays.asList(lhsValue));  if (rSet.containsAll(lSet) || lSet.contains(OntologyValue.TOP)) { return true; } else { return false; } } else { return super.isSubtype(rhs, lhs); } } 	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_tracking_settings);  this.settings = IbikeApplication.getSettings(); this.trackingEnableText = (TextView) findViewById(R.id.tracking_enable_text); this.trackingEnableSwitch = (Switch) findViewById(R.id.tracking_enable_switch); this.notifyMilestoneText = (TextView) findViewById(R.id.notify_milestone_text); this.notifyMilestoneCheckbox = (Switch) findViewById(R.id.notify_milestone_checkbox);  this.notifyWeeklyText = (TextView) findViewById(R.id.notify_weekly_text); this.notifyWeeklyCheckbox = (Switch) findViewById(R.id.notify_weekly_checkbox); /* this.shareDataText           = (TextView) findViewById(R.id.share_data_text); this.shareDataSwitch         = (Switch)   findViewById(R.id.share_data_switch); this.shareDataInfoText       = (TextView) findViewById(R.id.share_data_info_text); this.shareDataUsageText      = (TextView) findViewById(R.id.share_data_usage_text); this.shareDataTermsText      = (TextView) findViewById(R.id.share_data_terms_text); */  loggedIn = IbikeApplication.isUserLogedIn() || IbikeApplication.isFacebookLogin();  this.trackingEnableSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { if (loggedIn) {  if (IbikeApplication.getSignature().equals("""")) { if (IbikeApplication.isFacebookLogin()) { Log.d(""DV"", ""Prompting Facebookuser to create a password!""); Intent i = new Intent(TrackingSettingsActivity.this, SignatureActivity.class).addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); startActivity(i); } else if (IbikeApplication.isUserLogedIn()) { Log.d(""DV"", ""Prompting login for user!""); Intent i = new Intent(TrackingSettingsActivity.this, SignatureActivity.class).putExtra(""normalUser"", true).addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); startActivity(i); } } else { Log.d(""DV"", ""We got a signature, enabling tracking!""); onEnableTrackingClick(isChecked); } } else { spawnLoginBox(); } } }); this.notifyMilestoneCheckbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { if (loggedIn) { onNotifyMilestone(isChecked); } else { spawnLoginBox(); } } }); this.notifyWeeklyCheckbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { if (loggedIn) { onNotifyWeekly(isChecked); } else { spawnLoginBox(); } } });  initStrings();  updateEnablednessOfMilestoneSwitches(); } "	0	0	0	0	1	0
public void execute(@NotNull List<FinalizableCommand> commandList) { for (FinalizableCommand each : commandList) { if (each.willChangeState()) { fireStateChanged(); break; } }  for (FinalizableCommand each : commandList) { each.beforeExecute(this); } myWindowManager.getCommandProcessor().execute(commandList, myProject.getDisposed()); } 	0	0	0	0	1	0
private void setSplitModeImpl(final String id, final boolean isSplit, final ArrayList<FinalizableCommand> commandList) { checkId(id); final WindowInfoImpl info = getInfo(id); if (isSplit == info.isSplit()) { return; }  myLayout.setSplitMode(id, isSplit);  boolean wasActive = info.isActive(); if (wasActive) { deactivateToolWindowImpl(id, true, commandList); } final WindowInfoImpl[] infos = myLayout.getInfos(); for (WindowInfoImpl info1 : infos) { appendApplyWindowInfoCmd(info1, commandList); } if (wasActive) { activateToolWindowImpl(id, commandList, true, true); } commandList.add(myToolWindowsPane.createUpdateButtonPositionCmd(id, myWindowManager.getCommandProcessor())); } 	0	0	0	0	1	0
"@Override public Stream<DataPoint> getData() { List<Dataset> datasets = getChildren(); if (datasets.size() == 1) { return datasets.get(0).getData(); }  if (datasets.size() == 2) { if (datasets.get(0).equals(datasets.get(1))) { return datasets.get(0).getData(); } }  // TODO: Attribute propagation. Set<DataPoint> bucket = Sets.newTreeSet(Dataset.comparatorFor(Component.Role.IDENTIFIER, Component.Role.MEASURE)); Set<DataPoint> seen = Collections.synchronizedSet(bucket); return getChildren().stream().flatMap(Dataset::getData) .peek((o) -> { if (seen.contains(o)) { throw new VTLRuntimeException(""The resulting dataset from a union contains duplicates"", ""VTL-1xxx"", o); //TODO: define an error code encoding. See VTL User Manuel ""Constraints and errors"" } }) .peek(bucket::add); } "	0	0	0	0	1	0
"@Override public NodeRef insertPDF(NodeRef targetNodeRef, Map<String, Serializable> params) { PDDocument pdf = null; PDDocument insertContentPDF = null; InputStream is = null; InputStream cis = null; File tempDir = null; ContentWriter writer = null; NodeRef destinationNode = null;  try {  ContentReader targetReader = getReader(targetNodeRef); ContentReader insertReader = getReader((NodeRef)params.get(PARAM_TARGET_NODE)); int insertAt = Integer.valueOf((String)params.get(PARAM_PAGE)).intValue(); Boolean inplace = Boolean.valueOf(String.valueOf(params.get(PARAM_INPLACE)));  // Get contentReader inputStream is = targetReader.getContentInputStream(); // Get insertContentReader inputStream cis = insertReader.getContentInputStream(); // stream the target document in pdf = PDDocument.load(is); // stream the insert content document in insertContentPDF = PDDocument.load(cis);  // split the PDF and put the pages in a list Splitter splitter = new Splitter();  // Split the pages List<PDDocument> pdfs = splitter.split(pdf);  // Build the output PDF PDFMergerUtility merger = new PDFMergerUtility();  PDDocument newDocument = new PDDocument();  for (int i = 0; i < pdfs.size(); i++) {  if (i == insertAt -1) { merger.appendDocument(newDocument, insertContentPDF); }  merger.appendDocument(newDocument, (PDDocument)pdfs.get(i)); }  merger.setDestinationFileName(params.get(PARAM_DESTINATION_NAME).toString()); merger.mergeDocuments();  // build a temp dir, name based on the ID of the noderef we are // importing File alfTempDir = TempFileProvider.getTempDir(); tempDir = new File(alfTempDir.getPath() + File.separatorChar + targetNodeRef.getId()); tempDir.mkdir();  String fileName = params.get(PARAM_DESTINATION_NAME).toString();  PDDocument completePDF = newDocument;  completePDF.save(tempDir + """" + File.separatorChar + fileName + FILE_EXTENSION);  try { completePDF.close(); newDocument.close(); } catch (IOException e) { throw new AlfrescoRuntimeException(e.getMessage(), e); }  for (File file : tempDir.listFiles()) { try { if (file.isFile()) {  // Get a writer and prep it for putting it back into the // repo destinationNode = createDestinationNode(file.getName(), (NodeRef)params.get(PARAM_DESTINATION_FOLDER), targetNodeRef, inplace); writer = cs.getWriter(destinationNode, ContentModel.PROP_CONTENT, true);  writer.setEncoding(targetReader.getEncoding()); // original // encoding writer.setMimetype(FILE_MIMETYPE);  // Put it in the repo writer.putContent(file);  // Clean up file.delete(); } } catch (FileExistsException e) { throw new AlfrescoRuntimeException(""Failed to process file."", e); } } } // TODO add better handling catch (COSVisitorException e) { throw new AlfrescoRuntimeException(e.getMessage(), e); } catch (IOException e) { throw new AlfrescoRuntimeException(e.getMessage(), e); }  finally { if (pdf != null) { try { pdf.close(); } catch (IOException e) { throw new AlfrescoRuntimeException(e.getMessage(), e); } } if (is != null) { try { is.close(); } catch (IOException e) { throw new AlfrescoRuntimeException(e.getMessage(), e); } }  if (tempDir != null) { tempDir.delete(); } }  return destinationNode; } "	0	0	0	0	1	0
"@SuppressWarnings(""deprecation"") @EventHandler public void onSignChange(SignChangeEvent event) { String header = ShopType.TRADE.header(); Player player = event.getPlayer(); Sign s = (Sign) event.getBlock().getState();  if (!(s.getLine(0).equalsIgnoreCase(header))) { return; }  Block chest = findShopChest(s.getBlock());  if (!player.hasPermission(getCreatePerm())) { failedSign(event, ShopType.TRADE, ""no-ts-create-permission""); return; }  if (chest == null || !plugin.getAllowedInventories().contains(chest.getType())) { failedSign(event, ShopType.TRADE, ""no-chest""); return; }  if (getShopUsers(s) != null) { if (!getShopOwners(s).contains(Bukkit.getOfflinePlayer(player.getUniqueId()))) { failedSign(event, ShopType.TRADE, ""not-owner""); return; } }   String line1 = event.getLine(1); String line2 = event.getLine(2);  if (!line1.contains("" "") || !line2.contains("" "")) { failedSign(event, ShopType.TRADE, ""missing-item""); return; }  String[] info1 = line1.split("" ""); String[] info2 = line2.split("" "");  if (info1.length != 2 || info2.length != 2) { failedSign(event, ShopType.TRADE, ""missing-info""); return; }   int durability1 = 0; int durability2 = 0; if (line1.split("":"").length > 1) { durability1 = Integer.parseInt(info1[1].split("":"")[1]); info1[1] = info1[1].split("":"")[0]; } if (line2.split("":"").length > 1) { durability2 = Integer.parseInt(info2[1].split("":"")[1]); info2[1] = info2[1].split("":"")[0]; }  int amount1 = 0, amount2 = 0; ItemStack item1 = null, item2 = null;  try { amount1 = Integer.parseInt(info1[0]); amount2 = Integer.parseInt(info2[0]);  } catch (Exception e) { failedSign(event, ShopType.TRADE, ""amount-not-num""); return; }  try { item1 = isValidType(info1[1], durability1, amount1); item2 = isValidType(info2[1], durability2, amount2); } catch (ArrayIndexOutOfBoundsException e) { }  if (item1 == null || item2 == null) { failedSign(event, ShopType.TRADE, ""missing-item""); return; } else if (isBlacklistItem(item1) || isBlacklistItem(item2)) { failedSign(event, ShopType.TRADE, ""illegal-item""); return; }  Inventory chestInventory = ((InventoryHolder) chest.getState()).getInventory(); event.setLine(0, ChatColor.DARK_GREEN + header); event.setLine(3, player.getName()); setName((InventoryHolder) chest.getState(), ""o:"" + player.getName());  if (chestInventory.containsAtLeast(item1, amount1)) { event.getPlayer().sendMessage(colorize(getPrefix() + plugin.getMessages().getString(""successful-setup""))); return; } else { event.getPlayer().sendMessage(colorize(getPrefix() + plugin.getMessages().getString(""empty-ts-on-setup""))); return; }  } "	0	0	0	0	1	0
@Override public void addMouseListener(MouseListener mouseListener) { BotUI.getInstance().addMouseListener(mouseListener); } 	0	0	0	0	1	0
"public static Timestamp typetesttimestamp3() { return Timestamp.valueOf(""2004-16-12 01:01:01.1111""); } "	0	0	0	0	1	0
"public Document createDocument(DocumentKey docKey, String uri, String content, Properties props) throws XDMException { logger.trace(""createDocument.enter; uri: {}; props: {}"", uri, props); String dataFormat = getDataFormat(props); if (dataFormat == null) { dataFormat = uri.substring(uri.lastIndexOf(""."") + 1); }  int[] collections = null; if (props != null) { String prop = props.getProperty(xdm_document_collections); if (prop != null) { StringTokenizer tc = new StringTokenizer(prop, "", "", false); collections = new int[tc.countTokens()]; int idx = 0; while (tc.hasMoreTokens()) { String clName = tc.nextToken(); Collection cln = repo.getSchema().getCollection(clName); if (cln != null) { collections[idx] = cln.getId(); } idx++; } } }  Document doc = createDocument(docKey, uri, content, dataFormat, new Date(), repo.getUserName(), txManager.getCurrentTxId(), collections, false);  Scope scope; if (docKey.getVersion() == dvFirst) { scope = Scope.insert; triggerManager.applyTrigger(doc, Order.before, scope); } else { scope = Scope.update; // trigger has been already invoked in storeDocument.. } xddCache.set(docKey, doc); cntCache.set(docKey, content); triggerManager.applyTrigger(doc, Order.after, scope);  logger.trace(""createDocument.exit; returning: {}"", doc); return doc; } "	0	0	0	0	1	0
"private void getOrders() {  try { if (orderdata == null) { orderdata = new ArrayList<>(); } Connection connection = DBUtils.getConnection(); Statement statement = connection.createStatement(); ResultSet rs = statement.executeQuery(""Select ORDER_NUMBER,ITEM_ID,ORDER_DATE, QUANTITY from orders""); while (rs.next()) { orders or = new orders(); or.setOrder_number(rs.getInt(""ORDER_NUMBER"")); or.setItem_id(rs.getInt(""ITEM_ID"")); or.setOrder_date(rs.getString(""ORDER_DATE"")); or.setQuantity(rs.getInt(""QUANTITY"")); orderdata.add(or); }  connection.close(); } catch (SQLException ex) { Logger.getLogger(orderController.class.getClass().toString()).log(Level.SEVERE, null, ex); } } "	0	0	0	0	1	0
@Override public synchronized void resizeDelta(int delta) { // TODO: offer the delta to each scheduler in turn. // For now, we support only one scheduler.  prioritizedPools.get(0).getScheduler().change(delta); } 	0	0	0	0	1	0
@Override public synchronized void visitTasks(TaskVisitor visitor) { for ( SchedulerStateActions pool : prioritizedPools ) { pool.visitTaskModels( visitor ); } } 	0	0	0	0	1	0
"@Override public String toString() { return ""SatisfyGoal "" + box.letter + "" ("" + box.id + "") with "" + Character.toUpperCase(box.letter) + "" ("" + box.id + "")""; } "	0	0	0	0	1	0
public GeoNearBuilder setNear(final double latitude, final double longitude) { this.near = new double[]{longitude, latitude}; return this; } 	0	0	0	0	1	0
@Test public void testCifarLoaderReset() throws Exception { int numExamples = 50; int row = 28; int col = 28; int channels = 3; CifarLoader loader = new CifarLoader(row,col,channels, null, false, false, false); DataSet data; for (int i =0; i < loader.NUM_TEST_IMAGES/numExamples; i++) { loader.next(numExamples); } data = loader.next(numExamples); assertEquals(null, data); loader.reset(); data = loader.next(numExamples); assertEquals(numExamples, data.getLabels().size(0)); } 	0	0	0	0	1	0
"@Test public void testBasics() { ThrowsTag tag = new ThrowsTag(NPE, ""if x is null""); assertThat(tag.getComment(), is(""if x is null"")); assertThat(tag.getException(), is(NPE)); assertThat(tag.getCondition(), is(emptyString()));  tag.setCondition(""(x==null)||(y==null)""); assertThat(tag.getCondition(), is(""(x==null)||(y==null)""));  assertThat( tag.toString(), is( tag.getKind() + "" "" + NPE.getName() + "" "" + tag.getComment() + "" ==> "" + tag.getCondition())); } "	0	0	0	0	1	0
"@Override public synchronized void executeInternal(DockerAccess docker) throws DockerAccessException, MojoExecutionException {  getPluginContext().put(CONTEXT_KEY_START_CALLED, true);  LogDispatcher dispatcher = getLogDispatcher(docker); ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor(); try { for (StartOrderResolver.Resolvable resolvable : getImagesConfigsInOrder()) { final ImageConfiguration imageConfig = (ImageConfiguration) resolvable;  // Still to check: How to work with linking, volumes, etc .... //String imageName = new ImageName(imageConfig.getName()).getFullNameWithTag(registry);  String imageName = imageConfig.getName();  checkImageWithAutoPull(docker, imageName, getRegistry(imageConfig));  RunImageConfiguration runConfig = imageConfig.getRunConfiguration(); PortMapping mappedPorts = getPortMapping(runConfig, project.getProperties());  String name = calculateContainerName(imageConfig.getAlias(), runConfig.getNamingStrategy()); ContainerCreateConfig config = createContainerConfig(docker, imageName, runConfig, mappedPorts);  String containerId = createContainer(docker, imageConfig, mappedPorts); docker.startContainer(containerId);  if (showLogs(imageConfig)) { dispatcher.trackContainerLog(containerId, getContainerLogSpec(containerId, imageConfig)); } registerContainer(containerId, imageConfig); log.info(""Created and started container "" + toContainerAndImageDescription(containerId, imageConfig.getDescription())); // Remember id for later stopping the container registerShutdownAction(new ShutdownAction(imageConfig, containerId));  // Set maven properties for dynamically assigned ports. if (mappedPorts.containsDynamicPorts()) { mappedPorts.updateVariablesWithDynamicPorts(docker.queryContainerPortMapping(containerId)); propagatePortVariables(mappedPorts, runConfig.getPortPropertyFile()); }  // Wait if requested waitIfRequested(docker, runConfig, mappedPorts, containerId); // Start a watch task if requested watchIfRequested(docker, imageConfig, executor, mappedPorts, containerId); } if (watch) { log.info(""Waiting on image updates ...""); wait(); } } catch (InterruptedException e) { log.warn(""Interrupted""); } finally { executor.shutdownNow();  } } "	0	0	0	0	1	0
"@Test public void validateMainMenuIntent() { onView(withId(R.id.newGameButton)).perform(click()); onView(allOf(instanceOf(TextView.class), withParent(withId(R.id.toolbar)))) .check(matches(withText(""Main Menu""))); } "	0	0	0	0	1	0
@Override public List<Dataset> split(int n) { List<Dataset> splitDatasets = new ArrayList<Dataset>(); for (int i = 0; i < n; i++) { JCoReEntityDataset dataset = new JCoReEntityDataset(tokenizer); splitDatasets.add(dataset); }  Random r = new Random(); for (Sentence sentence : sentences) { int num = r.nextInt(n); splitDatasets.get(num).getSentences().add(sentence); } return splitDatasets; } 	0	0	0	0	1	0
private List<TypeOfSample> getActivatedSampleTypes(List<ActivateSet> sampleTypeSets) { List<TypeOfSample> sampleTypes = new ArrayList<TypeOfSample>();  for( ActivateSet set : sampleTypeSets){ TypeOfSample typeOfSample = TypeOfSampleUtil.getTypeOfSampleById( set.id ); typeOfSample.setActive( true ); typeOfSample.setSortOrder(set.sortOrder * 10); typeOfSample.setSysUserId(currentUserId); sampleTypes.add(typeOfSample); }  return sampleTypes; } 	0	0	0	0	1	0
@Override public int hashCode() { final int prime = 31; int result = 1; result = prime * result + ((ipcam == null) ? 0 : ipcam.hashCode()); return result; } 	0	0	0	0	1	0
@Override public Object execute(final ExecutionEvent event) throws ExecutionException { ISelection currentSelection = HandlerUtil.getCurrentSelection(event); IResource resource = UIUtils.getFirstElement(currentSelection, IResource.class); Connection connection = null; if ( resource == null) { connection = UIUtils.getFirstElement(currentSelection, Connection.class); } else { connection = ConnectionsRegistryUtil.safeGetConnectionFor(resource); } if (connection != null) { String url = getWebConsoleUrl(connection, resource); openInBrowser(url); } return null; } 	0	0	0	0	1	0
"@RequestMapping(""/authorized"") @Produces(MediaType.APPLICATION_JSON) public String getBoxAuthzTokens(HttpServletRequest request) {  String boxClientId = env.getProperty(BOX_CLIENT_ID); String boxClientSecret = env.getProperty(BOX_CLIENT_SECRET); String boxAPIUrl = env.getProperty(BOX_API_URL); String boxTokenUrl = env.getProperty(BOX_TOKEN_URL); log.info(""token url="" + boxTokenUrl);  // get the current user id String userId = request.getRemoteUser(); String rv = BoxUtils.getBoxAccessToken(userId);  if (rv == null) { // get the authCode, // and get access token and refresh token subsequently BoxUtils.getAuthCodeFromBoxCallback(request, boxClientId, boxClientSecret, boxTokenUrl, userId);  // try to get the access token after parsing the request string rv = BoxUtils.getBoxAccessToken(userId); }  return rv != null ? ""Authorized"" : ""Unauthorized""; } "	0	0	0	0	1	0
"public static TitanInteger unichar2int(final TitanUniversalCharString value) { value.mustBound(""The argument of function unichar2int() is an unbound universal charstring value."");  if (value.lengthOf().getInt() != 1) { throw new TtcnError(""The length of the argument in function unichar2int() must be exactly 1 instead of %d.""); }  return unichar2int(value.getValue().get(0)); } "	0	0	0	0	1	0
"public static TitanOctetString int2oct(final int value, final int length) { if (value < 0) { throw new TtcnError(MessageFormat.format(""The first argument (value) of function int2oct() is a negative integer value:"", value)); } if (length < 0) { throw new TtcnError(MessageFormat.format(""The second argument (length) of function int2oct() is a negative integer value:"", length)); } List<Character> octets_ptr = new ArrayList<Character>(length); for (int i = 0; i < length; i++) { octets_ptr.add((char) 0); } int tmp_value = value; for (int i = length - 1; i >= 0; i--) { octets_ptr.set(i, (char) (tmp_value & 0xFF)); tmp_value = tmp_value >> 8; } if (tmp_value != 0) { throw new TtcnError(""The first argument of function int2oct(), which is {0}, does not fit in {1} octet(s).""); } return new TitanOctetString(octets_ptr); } "	0	0	0	0	1	0
"public void testDump() throws Exception { DOMParser p = XML.createDOMParser(); p.parse(inputSource); Document doc = p.getDocument(); StringWriter stringWriter = new StringWriter(); PrintWriter printWriter = new PrintWriter(stringWriter); XML.dump(printWriter, doc); printWriter.close(); java.util.zip.CRC32 crc = new java.util.zip.CRC32(); crc.update(stringWriter.getBuffer().toString().getBytes()); long value = crc.getValue(); assertTrue(""Dumped DOM tree CRC mismatch; got "" + value, value == 828793L || value == 2241317601L); } "	0	0	0	0	1	0
"public void testDOM() throws Exception { DOMParser p = XML.createDOMParser(); p.parse(inputSource); Document doc = p.getDocument(); doc.normalize(); assertEquals(""log"", doc.getDocumentElement().getTagName()); java.util.zip.CRC32 crc = new java.util.zip.CRC32(); String result = XML.serialize(doc); crc.update(result.getBytes()); long value = crc.getValue(); assertTrue(""Stringified DOM document CRC mismatch, got value = "" + value, 3880488030L == value || 2435419114L == value || /* added by Chris Mattmann: pretty print fix */3688328384L == value || /* other newline treatment */ 750262163L == value || 3738296466L == value /* Apache incubator warmed up the file, so it suffered thermal expansion */); } "	0	0	0	0	1	0
"public static String roundDecimals(double d) { return String.format(""%.2f"", d); } "	0	0	0	0	1	0
"static public String getI18nName(ItemStack item) throws NMSException { try { Class CraftItemStack = Reflection.getBukkitClassByName(""inventory.CraftItemStack""); Object itemStackHandle = Reflection.getFieldValue(CraftItemStack, item, ""handle""); Object minecraftItem = Reflection.getFieldValue(itemStackHandle, ""item""); return (String) Reflection.call(minecraftItem, getI18nNameMethod(item), itemStackHandle); } catch(Exception ex) { throw new NMSException(""Unable to retreive Minecraft I18n name"", ex); } } "	0	0	0	0	1	0
"@Test public void test_reference_uri() throws InternalErrorException { String res = RevisionManagement.getReferenceUri(graph_test, ""master""); Assert.assertEquals(graph_test+""-master"", res); } "	0	0	0	0	1	0
"private static boolean isBranchEmpty(final String graphName, final String referenceIdentifier) throws InternalErrorException { String referenceUri = getReferenceUri(graphName, referenceIdentifier); String queryASKBranch = prefixes + String.format(""ASK { GRAPH <%s> { "" + "" <%s> rmo:references ?rev; prov:wasDerivedFrom ?rev ."" + "" }} "", Config.revision_graph, referenceUri); return TripleStoreInterfaceSingleton.get().executeAskQuery(queryASKBranch); } "	0	0	0	0	1	0
public static PtbReader create(InputStream inputStream, Charset charset) { return new PtbReader(new InputStreamReader(inputStream, charset)); } 	0	0	0	0	1	0
"public void applicationCode(String[] args) { // fudge to run application inside eclipse IDE applicationRelativePath = applicationRelativePath.substring(3); websiteRelativePath = websiteRelativePath.substring(3);  int argID = 0; TRACELEVEL = 999; for (int i=0;i<args.length;i++) { if (args[i].equals(""trace"")) { TRACELEVEL = 4; continue; } if (args[i].equals(""about"")) { BufferedReader br = null; try { String sCurrentLine; br = new BufferedReader(new FileReader(applicationRelativePath+""/""+appDirectory+""/readme.txt"")); while ((sCurrentLine = br.readLine()) != null) { System.out.println(sCurrentLine); } } catch (IOException e) { e.printStackTrace(); } finally { try { if (br != null)br.close(); } catch (IOException ex) { ex.printStackTrace(); } } continue; } StringTokenizer st = new StringTokenizer(args[i],""=""); Vector v = new Vector(); while(st.hasMoreTokens()) { v.addElement(st.nextToken()); } if (v.size() == 1) {v.insertElementAt(""arg""+String.valueOf(argID++),0);} String opt = (String)v.elementAt(0); //if (opt.charAt(0) == '-') {opt = opt.substring(1);} // remove - character commandLineArgs.put(opt,(String)v.elementAt(1)); }  systemUserReg = new registrationinfo(""JAVA Template"",""Template Application"",""TA1000"",""01.20.0000.00"",""01/01/17"",""(c) End House Software 2007-2017"",urlExists(""connection.txt"")); System.out.println(systemUserReg.getApplicationInfoText() + ""\n""); systemMysql = new mysqlJDBC(); systemMysql.connect(); writeHitRecord(""tem""); systemMysql.disconnect(); System.exit(0); } "	0	0	0	0	1	0
"public void setPhotoAs() { if (!(albumItem instanceof Photo)) { return; }  Uri uri = albumItem.getUri(this);  Intent intent = new Intent(Intent.ACTION_ATTACH_DATA); intent.setDataAndType(uri, MediaType.getMimeType(this, albumItem.getPath())); intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);  try { startActivityForResult(Intent.createChooser(intent, getString(R.string.set_as)), 13); } catch (ActivityNotFoundException e) { Toast.makeText(this, ""No App found to edit your item"", Toast.LENGTH_SHORT).show(); e.printStackTrace(); } } "	0	0	0	0	1	0
"@Override public Response applyChanges(final MultivaluedMap<String, String> fields) { final String name = StringUtils.defaultIfBlank(fields.getFirst(""_name""), ""Unknown UI User""); final String email = StringUtils.defaultIfBlank(fields.getFirst(""_email""), ""nobody@localhost""); final String path = fields.getFirst(""_path""); final String message = StringUtils.defaultIfBlank(fields.getFirst(""_message""), ""No message"");  Map<String, Map<String, ConfigPropertyValue>> data = parseFields(path, fields);  repo.set(name, email, data, false, message);  return Response.seeOther(URI.create(""/config/edit/"" + path)).build(); } "	0	0	0	0	1	0
"private void moveTo(final AbstractView<?, ?> v, final String[] arguments, final boolean noFragmentSetting) { currentFragment = classToUri.get(v.getClass()); if (arguments != null) { currentFragment += ""/"" + arguments; } if (!noFragmentSetting && !currentFragment.equals(uriFragmentUtil.getFragment())) { uriFragmentUtil.setFragment(currentFragment, false); } Component removeMe = null; for (final Iterator<Component> i = layout.getComponentIterator(); i .hasNext();) { final Component c = i.next(); if (c != uriFragmentUtil) { removeMe = c; } } if (removeMe != null) { layout.removeComponent(removeMe); } layout.addComponent(v); layout.setExpandRatio(v, 1.0F); v.navigateTo(arguments); final View previousView = currentView; currentView = v;  for (final ViewChangeListener l : listeners) { l.navigatorViewChange(previousView, currentView); } } "	0	0	0	0	1	0
"@Override public void DialogHandle(Holder holder, int gravity, OnDismissListener dismissListener) { dialog = DialogPlus.newDialog(mView) .setContentHolder(holder) .setGravity(gravity) .setOnDismissListener(dismissListener) .setCancelable(true) .create();  txv_checkBMI = (TextView) dialog.findViewById(R.id.textView_checkBMI); txv_BMI = (TextView) dialog.findViewById(R.id.textView_BMI); Button btnImprove = (Button) dialog.findViewById(R.id.button_improve); mList = mView.getUserHealth(); mUserBMI = new UserBMI(mCurrentLogin.getUSERNAME(), mList.get(0), mList.get(1), date); if (mView.checkIntentID() != 1){ btnImprove.setVisibility(View.INVISIBLE); } else if (mView.checkIntentID() == 3) { setAlarmCheckBMI(); } btnImprove.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { startImproveHealth(); } }); BMI = mUserBMI.getBMI(); txv_checkBMI.setText(mUserBMI.convertBMI(BMI)); txv_BMI.setText(""YOUR BMI: "" + BMI); dialog.show(); } "	0	0	0	0	1	0
"private static void validateMedia(final AeronUri uri) { if (!UDP_MEDIA_ID.equals(uri.getMedia())) { throw new IllegalArgumentException(""Udp channel only supports udp media: "" + uri); } } "	0	0	0	0	1	0
public String get(String key) { return params.get(key); } 	0	0	0	0	1	0
@Override public double getWeight(double timestamp) { synchronized (this) { final TimestampMap timestampMap = getTimestampMap(); if (timestampMap != null) { TimestampDoubleSet dynamicValue = (TimestampDoubleSet) attributes[GraphStoreConfiguration.EDGE_WEIGHT_INDEX]; int timestampIndex = timestampMap.getTimestampIndex(timestamp); return dynamicValue.getDouble(timestampIndex, 0.0); } } return 0; } 	0	0	0	0	1	0
"@Test public void testLocations() throws IOException { URL url = TestData.url(GeoJSONDataStore.class, ""locations.json"");  GeoJSONDataStore fds = new GeoJSONDataStore(url); String type = fds.getNames().get(0).getLocalPart(); System.out.println(type); DefaultQuery query = new DefaultQuery(type); System.out.println(query); FeatureReader<SimpleFeatureType, SimpleFeature> reader = fds.getFeatureReader(query, null); SimpleFeatureType schema = reader.getFeatureType(); System.out.println(schema); assertEquals(""Geometry"", schema.getGeometryDescriptor().getType().getBinding()); assertNotNull(schema); int count = 0; while (reader.hasNext()) {  SimpleFeature next = reader.next(); //System.out.println(next.getAttribute(""name"")); count++; } assertEquals(9, count); } "	0	0	0	0	1	0
"public static void main(String args[]) throws Exception { List<AI> bots = new LinkedList<>(); UnitTypeTable unitTypeTable = new UnitTypeTable();  int timeBudget = 100; int iterationsBudget = -1;  //bots.add(new MetaBot(timeBudget, iterationsBudget, unitTypeTable, ""/tmp/qltest/qtable0_99"")); bots.add(new ai.rl.MetaBot()); bots.add(new RangedRush(unitTypeTable)); PrintStream out = System.out;  // Separate the matchs by map: List<PhysicalGameState> maps = new LinkedList<PhysicalGameState>(); //maps.add(PhysicalGameState.load(""maps/basesWorkers8x8.xml"", unitTypeTable)); maps.add(PhysicalGameState.load(""maps/24x24/basesWorkers24x24A.xml"", unitTypeTable)); Experimenter.runExperiments(bots, maps, unitTypeTable, 1, 3000, 300, true, out); } "	0	0	0	0	1	0
"public void onClick(DialogInterface arg0, int arg1) { //Add description and/or take picture. HashMap<String, String> params = new HashMap<String, String>(); params.put(""taskName"", taskNameString); params.put(""flatPIN"", ""123"");//TODO: GET FLAT PIN FROM USER MODEL ServerRequest sr = new ServerRequest(); JSONObject jsonObject = sr.getJSON(HttpType.DELETETASK, getIpAddress() + "":8080/deleteTask"", params); if (jsonObject != null) { try { Toast.makeText(getApplicationContext(), jsonObject.getString(""response""), Toast.LENGTH_SHORT).show(); initTasksTab(); } catch (JSONException e) { e.printStackTrace(); } } } "	0	0	0	0	1	0
protected List<ValidationException> testGroup(Group group, List<Object> profile) { List<ValidationException> exList = new ArrayList<ValidationException>(); List<String> allowedStructures = new ArrayList<String>();  for (Object struct : profile) { UsageInfo usage = new UsageInfo(struct);  if (!usage.disallowed()) { allowedStructures.add(usage.name);  try { List<Structure> nonEmptyStructures = nonEmpty(group.getAll(usage.name)); exList.addAll(testCardinality(nonEmptyStructures.size(), usage));  // test children on instances with content if (validateChildren) { for (Structure structure : nonEmptyStructures) { exList.addAll(testStructure(structure, struct)); } } } catch (HL7Exception he) { profileNotHL7Compliant(exList, PROFILE_STRUCTURE_NOT_EXIST_IN_JAVA_CLASS, usage.name); } } }  // complain about X structures that have content exList.addAll(checkForExtraStructures(group, allowedStructures)); return exList; } 	0	0	0	0	1	0
@Override public void onActivityResult(int requestCode, int resultCode, Intent data) { if(requestCode == 1002 && resultCode == Activity.RESULT_OK){ if(data != null){ final int takeFlags = data.getFlags(); fileUri = data.getData(); if(Build.VERSION.SDK_INT >= 19) { ContentResolver resolver = getActivity().getContentResolver(); resolver.takePersistableUriPermission(fileUri,takeFlags); } updateFilePathField(fileUri); } } } 	0	0	0	0	1	0
"private static String displayString(Object x) { String s = x.toString(); if (! s.contains(""`"") && s.contains(""\\"") && printable.matchesAllOf(s)) return ""`"" + s + ""`""; s = s.replace(""\\"", ""\\\\""); boolean single_quotes = default_single_quotes ? !s.contains(""'"") : (s.contains(""\"""") && !s.contains(""'"")); if (single_quotes) return ""'"" + s + ""'""; else return ""\"""" + s.replace(""\"""", ""\\\"""") + ""\""""; } "	0	0	0	0	1	0
protected File write(String path, LineEnding ending, Charset encoding, String... lines) throws IOException { String content = Arrays.stream(lines).collect(Collectors.joining(ending.str())) + ending.str(); Path target = folder.getRoot().toPath().resolve(path); Files.createDirectories(target.getParent()); Files.write(target, content.getBytes(encoding)); return target.toFile(); } 	0	0	0	0	1	0
"public static Library fromJSON(String ident, JSONObject input) throws JSONException { Library lib = new Library(); lib.setIdent(ident); lib.setApi(input.getString(""api"")); lib.setCity(input.getString(""city"")); lib.setTitle(input.getString(""title"")); lib.setCountry(input.getString(""country"")); lib.setState(input.getString(""state"")); lib.setData(input.getJSONObject(""data"")); lib.setAccountSupported(input.getBoolean(""account_supported"")); lib.setNfcSupported(input.optBoolean(""nfc_supported"", false));  lib.setInformation(input.getString(""information"")); if (lib.getInformation() == null && lib.getData().has(""information"")) { // Backwards compatibility lib.setInformation(lib.getData().getString(""information"")); }  if (input.has(""displayname"")) lib.setDisplayName(input.getString(""displayname""));  if (input.has(""replacedby"")) lib.setReplacedBy(input.getString(""replacedby""));  if (input.has(""geo"")) { double[] geo = new double[2]; geo[0] = input.getJSONArray(""geo"").getDouble(0); geo[1] = input.getJSONArray(""geo"").getDouble(1); lib.setGeo(geo); }  if (lib.getTitle().equals("""")) lib.setTitle(null);  return lib; } "	0	0	0	0	1	0
"private void setTitle() { if (!TextUtils.isEmpty(mAspectRatioTitle)) { setText(mAspectRatioTitle); } else { setText(String.format(""%d:%d"", (int) mAspectRatioX, (int) mAspectRatioY)); } } "	0	0	0	0	1	0
"@Test public void tsv_entriesAreEscaped() { TsvEntity csvEntity = new TsvEntity();   Map jsonMap = ImmutableMap.of( ""hash"", ""hash1"", ""entry"", ImmutableMap.of( ""key1"", ""value1"", ""key2"", ""val\tue2"", ""key3"", ""val\""ue3"", ""key4"", ""val\nue4"" ) ); JsonNode node = JsonObjectMapper.convert(jsonMap, JsonNode.class);  AbstractView view = new SingleResultView(""someTemplate"", node); Object result = csvEntity.convert(view);  assertThat(result.toString(), equalTo(""hash\tkey1\tkey2\tkey3\tkey4\nhash1\tvalue1\t\""val\tue2\""\t\""val\""\""ue3\""\t\""val\nue4\"""")); } "	0	0	0	0	1	0
"@Test public void tsvRepresentationIsSupportedForEntries() { Response response = getRequest(""/all.tsv"");  assertThat(response.getHeaderString(""Content-Type""), equalTo(""text/tab-separated-values; charset=utf-8"")); assertThat(response.readEntity(String.class), equalTo(""hash\tname\tft_test_pkey\nhash2\tpresley\t6789\nhash3\tellis\t145678\nhash1\tellis\t\""123,45\"""")); } "	0	0	0	0	1	0
"@Test public void csvRepresentationIsSupportedForAnEntry() { Response response = getRequest(""/hash/hash1.csv"");  assertThat(response.getHeaderString(""Content-Type""), equalTo(""text/csv; charset=utf-8"")); assertThat(response.readEntity(String.class), equalTo(""hash,name,ft_test_pkey\nhash1,ellis,\""123,45\"""")); } "	0	0	0	0	1	0
"private Component createRightSide() { gridStack = new GridStackLayout(1).setCellHeight(50).setAnimate(true); gridStack.setSizeFull();  for(int i = 0; i < 30; ++i) { Label itemLabel = new Label(""Item #"" + i); gridStack.addComponent(itemLabel, 0, i); } return gridStack; } "	0	0	0	0	1	0
"public static void addAllKeywords(DataList lin) throws SQLException { Set<String> keywords = new HashSet<>(); for (final TableTuple ¢ : lin) keywords.addAll(¢.getKeyWords()); for (String keyword : keywords) runSafeUpdate(""INSERT INTO keywords_table(?)"", keyword); } "	0	0	0	0	1	0
@Override public boolean checkDistance(final Location newLocation) { // no ModeDistanceLimits specified, so check is true regardless of locations if (!isDistanceCheckEnabled) return true;  final ModeStrategy mode = getMode(StrategyMode.MODE_DISTANCE_LIMITS); if (mode != null) { final Location anchor = getEventLocation(); // if either location is null, distance is infinite. Fail check. if (anchor == null || newLocation == null) return false;  // different worlds? doesn't meet bounds limits, must be same-world. Also prevents // exception from Location.distance() if (anchor.getWorld() != newLocation.getWorld()) return false;  ModeDistanceLimits limits = (ModeDistanceLimits) mode; double distance = anchor.distance(newLocation); if (distance >= limits.getMinDistance() && distance <= limits.getMaxDistance()) return true; else return false; } // shouldn't ever get here since we do isDistanceCheckEnabled above, but in case we // do, this is same effect; return true since distance check is not enabled. else { return true; } } 	0	0	0	0	1	0
public void store(FunctionDefinition fn) { mFnDef = fn; mELI = ExecutingLineIndex; mPKW = PossibleKeyWord; mVSS = VarSearchStart; mSVN = VarNames.size(); mSVI = VarIndex.size(); mSV = Vars.size(); mAT = ArrayTable.size(); } 	0	0	0	0	1	0
private Response<Object> response(MethodAccess methodAccess, MethodCall<Object> methodCall, Object returnValue) {  if (methodAccess.returnType() == void.class || methodAccess.returnType() == Void.class) { return ServiceConstants.VOID; } return ResponseImpl.response(methodCall.id(), methodCall.timestamp(), methodCall.name(), methodCall.returnAddress(), returnValue, methodCall); } 	0	0	0	0	1	0
"@Test public void shouldValidateAPipelineHasAtleastOneStage() { PipelineConfig pipelineConfig = new PipelineConfig(new CaseInsensitiveString(""p""), new MaterialConfigs()); pipelineConfig.validateTemplate(null); assertThat(pipelineConfig.errors().on(""pipeline""), is(""Pipeline 'p' does not have any stages configured. A pipeline must have at least one stage."")); } "	0	0	0	0	1	0
synchronized void initialisePart2(boolean scalingDown) throws Exception { // Load the journal and populate queues, transactions and caches in memory  if (state == SERVER_STATE.STOPPED || state == SERVER_STATE.STOPPING) { return; }  pagingManager.reloadStores();  JournalLoadInformation[] journalInfo = loadJournals();  final ServerInfo dumper = new ServerInfo(this, pagingManager);  long dumpInfoInterval = configuration.getServerDumpInterval();  if (dumpInfoInterval > 0) { scheduledPool.scheduleWithFixedDelay(new Runnable() { @Override public void run() { ActiveMQServerLogger.LOGGER.dumpServerInfo(dumper.dump()); } }, 0, dumpInfoInterval, TimeUnit.MILLISECONDS); }  // Deploy the rest of the stuff  // Deploy any predefined queues deployQueuesFromConfiguration();  // We need to call this here, this gives any dependent server a chance to deploy its own addresses // this needs to be done before clustering is fully activated callActivateCallbacks();  checkForPotentialOOMEInAddressConfiguration();  if (!scalingDown) { // Deploy any pre-defined diverts deployDiverts();  if (groupingHandler != null) { groupingHandler.start(); }  // We do this at the end - we don't want things like MDBs or other connections connecting to a backup server until // it is activated  if (groupingHandler != null && groupingHandler instanceof LocalGroupingHandler) { clusterManager.start();  groupingHandler.awaitBindings();  remotingService.start(); } else { remotingService.start();  clusterManager.start(); }  if (nodeManager.getNodeId() == null) { throw ActiveMQMessageBundle.BUNDLE.nodeIdNull(); }  // We can only do this after everything is started otherwise we may get nasty races with expired messages postOffice.startExpiryScanner(); }  try { injectMonitor(new FileStoreMonitor(getScheduledPool(), executorFactory.getExecutor(), configuration.getDiskScanPeriod(), TimeUnit.MILLISECONDS, configuration.getMaxDiskUsage() / 100f, getCriticalIOErrorListener())); } catch (Exception e) { logger.warn(e.getMessage(), e); } } 	0	0	0	0	1	0
"public void open() { serialPort = new SerialPort(name);  try { serialPort.openPort();   } catch (SerialPortException e) { throw new RuntimeException(e); }  try { serialPort.addEventListener((serialPortEvent) -> { if (serialPortEvent.isRXCHAR()) { System.out.println(""Data received!"");  int numBytes = serialPortEvent.getEventValue();  byte[] rxData; try { rxData = serialPort.readBytes(numBytes); } catch (SerialPortException e) { throw new RuntimeException(e); }  System.out.println(""rxData = "" + rxData);  for (Iterator<OnRxDataListener> it = onRxDataListeners.iterator(); it.hasNext(); ) { OnRxDataListener onRxDataListener = it.next(); onRxDataListener.onRxData(rxData); } } }); } catch (SerialPortException e) { throw new RuntimeException(e); } } "	0	0	0	0	1	0
public static List<Feature> parseFeatures(URL file) throws IOException { InputStream input = file.openStream(); try { Reader reader = new InputStreamReader(input); try { FeatureDatabase.Builder database = FeatureDatabase.newBuilder(); JsonFormat.parser().merge(reader, database); return database.getFeatureList(); } finally { reader.close(); } } finally { input.close(); } } 	0	0	0	0	1	0
"@Override public Element saveAsXML(Map<Object, String> objRefMap) { Element root = new Element(""patternsLayerGroup""); root.setAttribute(""name"", name);  Element patternsNode = root.addElement(""this"");  for (PatternLayer layer : this) { patternsNode.addElement(layer.saveAsXML()); }  root.addElement(npc.saveAsXML());  return root; } "	0	0	0	0	1	0
"private void getIDPs2() { IdentityProvidersResource idps2 =  keycloakBrokerInstance.realm(keycloakBrokerRealm).identityProviders(); try { IdentityProviderRepresentation idp2 = idps2.get(""toidp-asdfgh"").toRepresentation(); logger.debug(idp2.getAlias()); } catch(NotFoundException nfe) { }  List<IdentityProviderRepresentation> idps = idps2.findAll(); for (IdentityProviderRepresentation idp : idps) { logger.debug(idp.getProviderId()); }  logger.debug(keycloakBrokerAdminUser + "", ""  + keycloakBrokerAdminPassword + "", "" + keycloakBrokerAdminClient); } "	0	0	0	0	1	0
public void removeFromNetwork(TileRedstoneWireConnector removedConnector) { ChunkCoordinates removedCC = Utils.toCC(removedConnector); for (WeakReference<TileRedstoneWireConnector> connectorRef : connectors) { TileRedstoneWireConnector connector = connectorRef.get(); if (connector != null) { connector.wireNetwork = new RedstoneWireNetwork().add(connector); } }  for (WeakReference<TileRedstoneWireConnector> connectorRef : connectors) { TileRedstoneWireConnector connector = connectorRef.get(); if (connector != null) { ChunkCoordinates conCC = Utils.toCC(connector); List<ImmersiveNetHandler.Connection> connections = ImmersiveNetHandler.INSTANCE.getConnections(connector.getWorldObj(), conCC); for (ImmersiveNetHandler.Connection connection : connections) { ChunkCoordinates node = connection.start; if (node.equals(conCC)) { node = connection.end; } if (!node.equals(removedCC)) { TileEntity tileEntity = connector.getWorldObj().getTileEntity(node.posX, node.posY, node.posZ); if (tileEntity instanceof TileRedstoneWireConnector) { TileRedstoneWireConnector wireConnector = (TileRedstoneWireConnector) tileEntity; if (connector.wireNetwork != wireConnector.wireNetwork) { connector.wireNetwork.mergeNetwork(wireConnector.wireNetwork); } } } }  connector.getWorldObj().notifyBlocksOfNeighborChange(connector.xCoord, connector.yCoord, connector.zCoord, IIBlocks.redstoneWireConnector); } } } 	0	0	0	0	1	0
"public static Material createInvisibleMaterial(AssetManager assetManager) { Validate.nonNull(assetManager, ""asset manager"");  Material material = createUnshadedMaterial(assetManager); material.setColor(""Color"", ColorRGBA.BlackNoAlpha); RenderState additional = material.getAdditionalRenderState(); additional.setBlendMode(RenderState.BlendMode.Alpha); additional.setDepthWrite(false);  return material; } "	0	0	0	0	1	0
public void SaveEntry(int rowId) {  if (rowId != -1) { Entry e = (Entry) rows.get(rowId);  if (e != null) {  Session session = NewHibernateUtil.getSessionFactory().openSession(); Transaction tx = session.beginTransaction(); e.setQuantity(Integer.parseInt(jTable1.getValueAt(rowId, 3).toString())); session.update(e);  tx.commit(); session.close(); } } } 	0	0	0	0	1	0
"public static OAuthWebResponse createValidResponse() { return new OAuthWebResponse(StatusCodes.OK, loadHtml(""ValidWebResponse"", ""Token successfully extracted."")); } "	0	0	0	0	1	0
"public static OAuthWebResponse createBadResponse() { return new OAuthWebResponse(StatusCodes.BAD_REQUEST, loadHtml(""BadRequestWebResponse"", ""Error while acquiring token."")); } "	0	0	0	0	1	0
@Override public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) { String date = DateTimeUtils.convertDateToString(year, month, dayOfMonth); setBirthday(date); } 	0	0	0	0	1	0
"public void storeGroups(String tenantId, AuthGroups groups, int ttl) throws IOException { if (tenantId == null || groups == null || ttl < 0) { // TODO Should we throw an exception here? return; }  store.put(cachePrefix + ""."" + tenantId, groups, ttl, TimeUnit.MILLISECONDS); } "	0	0	0	0	1	0
@Override public boolean deleteCacheItem(String userId) { return store.remove(cachePrefix + userId); } 	0	0	0	0	1	0
"public void exportSynBioHub() { // ask the user to select a Registry to upload to ArrayList<Registry> list = new ArrayList<Registry>(); for (Registry r : Registries.get()) { if (!r.isPath()) { list.add(r); } }  Object[] options = list.toArray();  if (options.length == 0) { JOptionPane.showMessageDialog(getParent(), ""There are no instances of SynBioHub in the registries list.""); return; }  Registry registry = (Registry) JOptionPane.showInputDialog(getParent(), ""Please select the SynBioHub instance you want to upload the current design to."", ""Upload"", JOptionPane.QUESTION_MESSAGE, null, options, options[0]); if (registry == null) { return; }  // create the SBOLDocument to upload SBOLDocument uploadDoc = new SBOLDocument();  try { String defaultURIprefix = IBioSimPreferences.INSTANCE.getUserInfo().getURI().toString();  SBML2SBOL.convert_SBML2SBOL(uploadDoc, path, biomodel.getSBMLDocument(), biomodel.getSBMLFile(), biosim.getFilePaths(GlobalConstants.SBOL_FILE_EXTENSION), defaultURIprefix);  for (TopLevel topLevel : uploadDoc.getTopLevels()) { if (!topLevel.getIdentity().toString().startsWith(defaultURIprefix)) { uploadDoc.removeTopLevel(topLevel); } } } catch (SBOLValidationException | IOException | SBOLConversionException | XMLStreamException e) { JOptionPane.showMessageDialog(Gui.frame, e.getMessage(), ""Error Creating SBOL File"", JOptionPane.ERROR_MESSAGE); e.printStackTrace(); }  // Show the UploadDialog UploadDialog ud = new UploadDialog(getParent(), registry, uploadDoc); } "	0	0	0	0	1	0
public boolean isOwnerOfLobby(){ try { return room.getOwner().equals(this); } catch (RemoteException e) { e.printStackTrace(); return false; } } 	0	0	0	0	1	0
public final void enableModules() { getModules().forEach(Switch::enable); } 	0	0	0	0	1	0
"@Test public void testConstructed() throws IOException, ClassNotFoundException, ParseException { CronTriggerImpl cti = new CronTriggerImpl(""triggerName"", ""triggerGroup"", ""jobName"", ""jobGroup"", new Date(0L), new Date(10000L), ""0 0 12 * * ?"", new SimplisticTimeZone(""Terra Australis"")); cti.setDescription(""A Trigger""); cti.setJobDataMap(new JobDataMap()); cti.setCalendarName(""calendarName""); cti.setMisfireInstruction(MISFIRE_INSTRUCTION_SMART_POLICY); cti.setPriority(5);  validateSerializedForm(cti, COMPARATOR, expand(""serializedforms/CronTriggerImplSerializationTest.testConstructed.{?}.ser"", ""JDK16"", ""JDK17"")); } "	0	0	0	0	1	0
public synchronized Set<INetwork<?>> getNetworks() { return ImmutableSet.copyOf(networks); } 	0	0	0	0	1	0
public boolean canUpdate() { return !Minecraft.getMinecraft().isGamePaused(); } 	0	0	0	0	1	0
private Integer getTotalMealsCompletedToday(User user) { Collection<Order> orders = orderService.get(user, getStartTimeOfTheDay()); Integer totalMealCount = 0; if (!orders.isEmpty()) { for(Order order : orders) { totalMealCount += order.getOrderItems().size(); } } return totalMealCount; } 	0	0	0	0	1	0
"private void cropImage() { try { File srcFile = new File(mLoadResult.filePath); Uri uri = Uri.fromFile(srcFile); Intent cropIntent = new Intent(ACTION_CROP); cropIntent.setDataAndType(uri, ""image/*""); cropIntent.putExtra(""crop"", ""true""); if (mAspectSize != null) { cropIntent.putExtra(""aspectX"", mAspectSize.x); cropIntent.putExtra(""aspectY"", mAspectSize.y); } if (mOutputSize != null) { cropIntent.putExtra(""outputX"", mOutputSize.x); cropIntent.putExtra(""outputY"", mOutputSize.y); } if (mSpotlightSize != null) { cropIntent.putExtra(""spotlightX"", mSpotlightSize.x); cropIntent.putExtra(""spotlightY"", mSpotlightSize.y); } cropIntent.putExtra(""scale"", mScale); cropIntent.putExtra(""scaleUpIfNeeded"", mScaleUp); cropIntent.putExtra(""return-data"", false); cropIntent.putExtra(""outputFormat"", Bitmap.CompressFormat.PNG.toString());  File out = new File(getCacheDir() + ""/"" + srcFile.getName() + ""_cropped""); out.createNewFile(); out.setReadable(true, false); out.setWritable(true, false); cropIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(out)); startActivityForResult(cropIntent, REQ_CROP_IMAGE); } catch (Exception e) { e.printStackTrace(); Toast.makeText(this, String.format(""%s: %s"", getString(R.string.imgpick_crop_error), e.getMessage()), Toast.LENGTH_SHORT).show(); setResult(Activity.RESULT_CANCELED); cleanup(); finish(); } } "	0	0	0	0	1	0
@Override public void onItemRangeChanged(int positionStart, int itemCount) { adapter.notifyItemRangeChanged(getJoinedPosition(positionStart), itemCount); } 	0	0	0	0	1	0
@Override public void onItemRangeRemoved(int positionStart, int itemCount) { adapter.notifyItemRangeRemoved(getJoinedPosition(positionStart), itemCount); } 	0	0	0	0	1	0
"@Override public void set(String key, StoragePrimitive val) { checkKey(key);  StoragePrimitive oldval; if (val == null) { oldval = remove(key); } else { oldval = properties.put(key, val); }  LOG.trace(""{}: set(key={}) = {}"", this, key, val);  if (oldval != val && (oldval == null || !oldval.equals(val))) { onChanged(); } } "	0	0	0	0	1	0
protected ArrayList<String> doInBackground(Void... voids) { ArrayList<String> tempList = FreeingOurselvesDatabaseUtilities.getResources(getContext()); return tempList; } 	0	0	0	0	1	0
"@Override public void showClockedGameShare(int score) { try { startActivity(Intent.createChooser(getClockedScoreIntent(score), ""Share your score"")); } catch (ActivityNotFoundException exception) { if (mBtnContainer != null) { Snackbar snackbar = Snackbar.make(mBtnContainer, getResources().getString(R.string.txt_sharing_not_configured), Snackbar.LENGTH_LONG); snackbar.show(); } } } "	0	0	0	0	1	0
"@RequestMapping(method = RequestMethod.GET, value = ""/rbook/rounds-by-depot"", produces = ""application/json"") public ResponseEntity<Object> getRoundsForDepot(@Required @RequestParam String depotCode, @RequestParam Optional<String> roundNumber) {  if (INTERNAL_SERVER_ERROR_DEPOTCODE.equals(depotCode)) { return returnErrorInternal(); }  if (NO_POSTCODE_SERVED_ERROR_DEPOTCODE.equals(depotCode)) { return returnErrorNoPostCodeServedByDepot(); }  if (!roundsHandler.doesDepotExist(depotCode)) { return returnErrorDepotNotFound(); }  if (roundNumber.isPresent()) { final Optional<Round> round = roundsHandler.getRoundForDepotAndRoundNumber(depotCode, roundNumber.get()); if (round.isPresent()) { return new ResponseEntity<>(round.get(), HttpStatus.OK); } else { return returnErrorRoundNotFound(); } } else { final List<Round> roundsForDepot = roundsHandler.getRoundsForDepot(depotCode); if (CollectionUtils.isEmpty(roundsForDepot)) { return returnErrorRoundNotFound(); } return new ResponseEntity<>(roundsForDepot, HttpStatus.OK); } } "	0	0	0	0	1	0
@Override public InputStream getFile(String setting) throws GeneralSecurityException{ return delegate.getFile(keyTransform.apply(setting)); } 	0	0	0	0	1	0
@Override public SecureString getString(String setting) throws GeneralSecurityException{ return delegate.getString(keyTransform.apply(setting)); } 	0	0	0	0	1	0
"@Override public void prepare(MimeMessage mimeMessage) throws Exception { MimeMessageHelper message = new MimeMessageHelper(mimeMessage); message.setSubject(""Notification""); message.setTo(""core@geosdi.org""); String text = VelocityEngineUtils.mergeTemplateIntoString( gpSpringVelocityEngine, ""template/"" + ""geoPlatformMailSupport.html.vm"", ""UTF-8"", null); message.setText(text, Boolean.TRUE); message.setFrom(gpMailSpringDetail.getFrom(), gpMailSpringDetail.getFromName()); message.setReplyTo(gpMailSpringDetail.getReplayTo(), gpMailSpringDetail.getReplayToName()); } "	0	0	0	0	1	0
"private BigInteger estimateGas(Block callBlock, Transaction tx) { Repository repository = getRepository().getSnapshotTo(callBlock.getStateRoot()).startTracking(); try { TransactionExecutor executor = new TransactionExecutor (tx, callBlock.getCoinbase(), repository, getBlockchain().getBlockStore(), getBlockchain().getProgramInvokeFactory(), callBlock) .setLocalCall(true);  executor.init(); executor.execute(); executor.go(); executor.finalization(); if(!executor.getReceipt().isSuccessful()) { throw new EthereumApiException(""The function throws""); } long gasUsed = executor.getGasUsed(); return BigInteger.valueOf(gasUsed); } finally { repository.rollback(); } } "	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") public Object create(Object in) throws DecodeException { List<Object> l = (List<Object>) in;  Target target = new Target();  switch (7 - l.size()) {  case 0: Object val0 = l.get(6); if (val0 == null || val0.getClass().isArray()) { target.setCapabilities((String[]) val0); } else { target.setCapabilities((String) val0); } case 1: target.setDynamicNodeProperties((Map<Object, Object>) l.get(5)); case 2: target.setDynamic(l.get(4) == null ? false : (Boolean) l.get(4)); case 3: target.setTimeout(l.get(3) == null ? 0 : (Integer) l.get(3)); case 4: target.setExpiryPolicy(l.get(2) == null ? TerminusExpiryPolicy.SESSION_END : TerminusExpiryPolicy .getEnum((String) l.get(2))); case 5: target.setDurable(l.get(1) == null ? TerminusDurability.NONE : TerminusDurability.get((Byte) l.get(1))); case 6: target.setAddress((String) l.get(0)); } return target; } "	0	0	0	0	1	0
"static private String makeHref(String path) { return context+( catalogServletName == null ? """" : catalogServletName )+""/""+path+""/catalog.xml""; } "	0	0	0	0	1	0
protected Set<String> getTopicsForTeamId(final String teamId) { return this.getTopicsForTeamId(teamId); } 	0	0	0	0	1	0
"@Test public void build() throws IOException { MergeParametersBuilder victim = new MergeParametersBuilder(); victim.compress(true); FileTaskOutput output = mock(FileTaskOutput.class); victim.output(output); victim.overwrite(true); victim.blankPageIfOdd(true); victim.copyFormFields(true); victim.outlinePolicy(OutlinePolicy.ONE_ENTRY_EACH_DOC); File file = folder.newFile(""my.pdf""); PdfFileSource source = PdfFileSource.newInstanceNoPassword(file); PdfMergeInput input = new PdfMergeInput(source); victim.addInput(input); victim.version(PdfVersion.VERSION_1_7); MergeParameters params = victim.build(); assertTrue(params.isCompress()); assertTrue(params.isOverwrite()); assertEquals(PdfVersion.VERSION_1_7, params.getVersion()); assertTrue(params.isBlankPageIfOdd()); assertTrue(params.isCopyFormFields()); assertEquals(OutlinePolicy.ONE_ENTRY_EACH_DOC, params.getOutlinePolicy()); assertEquals(output, params.getOutput()); assertEquals(input, params.getInputList().get(0)); } "	0	0	0	0	1	0
@Override public UserBuilder setRole(UserRoles role) { this.role = role; return this; } 	0	0	0	0	1	0
@Override protected void playData(int packetId, int codecId, int x, int y, int z, int distance, byte volume) { StreamingAudioPlayer codec = Computronics.opencomputers.audio.getPlayer(codecId);  codec.setHearing(distance, volume / 127.0F); try { codec.play(x, y, z, 0.25f); } catch(NullPointerException e) { // This exception occurs when there is no data to play, and is harmless. } } 	0	0	0	0	1	0
"public static IChatComponent formatChatComponent(String format, IRCConnection connection, IRCChannel channel, IRCUser user, String message, Target target, Mode mode) { IChatComponent root = new ChatComponentText(""""); StringBuilder sb = new StringBuilder(); int currentIdx = 0; while(currentIdx < format.length()) { char c = format.charAt(currentIdx); if(c == '{') { int tokenEnd = format.indexOf('}', currentIdx); if(tokenEnd != -1) { boolean validToken = true; String token = format.substring(currentIdx + 1, tokenEnd); IChatComponent component = null; if(token.equals(""SERVER"")) { component = new ChatComponentText(connection.getIdentifier()); } else if(token.equals(""CHANNEL"")) { component = new ChatComponentText(channel.getName()); } else if(token.equals(""USER"")) { if(user != null) { component = new ChatComponentText(user.getIdentifier()); } else { component = new ChatComponentText(connection.getIdentifier()); } } else if(token.equals(""NICK"")) { if(user != null) { String displayName = user.getName(); displayName = formatNick(displayName, channel, target, mode, user); component = new ChatComponentText(displayName); if(mode != Mode.Emote) { EnumChatFormatting nameColor = Utils.getColorFormattingForUser(channel, user); if(nameColor != null) { component.getChatStyle().setColor(nameColor); } } } else { component = new ChatComponentText(connection.getIdentifier()); } } else if(token.equals(""MESSAGE"")) { BotSettings botSettings = ConfigHelper.getBotSettings(channel); if(target == Target.Minecraft) { message = IRCFormatting.toMC(message, !botSettings.getBoolean(BotBooleanComponent.ConvertColors)); message = filterAllowedCharacters(message); } else if(target == Target.IRC) { message = IRCFormatting.toIRC(message, !botSettings.getBoolean(BotBooleanComponent.ConvertColors)); } component = new ChatComponentText(message); } else { validToken = false; } if(validToken) { if(sb.length() > 0) { root.appendSibling(new ChatComponentText(sb.toString())); sb = new StringBuilder(); } root.appendSibling(component); currentIdx += token.length() + 2; continue; } } } sb.append(c); currentIdx++; } if(sb.length() > 0) { root.appendSibling(new ChatComponentText(sb.toString())); } return root; } "	0	0	0	0	1	0
@NonNull @Override protected Iterable<Animator> getItemAnimators(@NonNull final View view) { return ViewUtils.createDefaultAnimators(view); } 	0	0	0	0	1	0
"public void outputF105() { String saveAddress = ""./output/"" + workingSet.getWorkingSetName() + ""/F105.txt""; F105 f105 = new F105(workingSet); String output = """"; writeOutputToFile(output, saveAddress); for (String qid : workingSet.getQueryRelatedDocument().keySet()) { //            System.out.println(qid); for (String docid : workingSet.getQueryRelatedDocument().get(qid)) { //                System.out.println(docid); fileWriterContinue(f105.print(qid, docid), saveAddress);  } }  System.out.println(""F105.txt"" + "" done"");  } "	0	0	0	0	1	0
"public void outputF106() { String saveAddress = ""./output/"" + workingSet.getWorkingSetName() + ""/F106.txt""; F106 f106 = new F106(workingSet); String output = """"; writeOutputToFile(output, saveAddress); for (String qid : workingSet.getQueryRelatedDocument().keySet()) { //            System.out.println(qid); for (String docid : workingSet.getQueryRelatedDocument().get(qid)) { //                System.out.println(docid); fileWriterContinue(f106.print(qid, docid), saveAddress);  } }  System.out.println(""F106.txt"" + "" done"");  } "	0	0	0	0	1	0
"public void outputF101() { String saveAddress = ""./output/"" + workingSet.getWorkingSetName() + ""/F101.txt""; F101 f101 = new F101(workingSet); String output = """"; writeOutputToFile(output, saveAddress); for (String qid : workingSet.getQueryRelatedDocument().keySet()) { //            System.out.println(qid); for (String docid : workingSet.getQueryRelatedDocument().get(qid)) { //                System.out.println(docid); fileWriterContinue(f101.print(docid), saveAddress);  } }  System.out.println(""F101.txt"" + "" done"");  } "	0	0	0	0	1	0
"public void outputF099() { String saveAddress = ""./output/"" + workingSet.getWorkingSetName() + ""/F99.txt""; F099 f99 = new F099(workingSet); String output = """"; //        writeOutputToFile(output, saveAddress); for (String qid : workingSet.getQueryRelatedDocument().keySet()) { //            System.out.println(qid); for (String docid : workingSet.getQueryRelatedDocument().get(qid)) { //                System.out.println(docid); System.out.println(f99.print(qid, docid)); //                fileWriterContinue(f99.print(qid, docid), saveAddress);  } } System.out.println(""F99.txt"" + "" done"");  } "	0	0	0	0	1	0
private void findViews() { setContentView(R.layout.activity_flight_information); mapView = (MapView) findViewById(R.id.main_map); txtDistance = (TextView) findViewById(R.id.main_txt_distance); txtMaxAltitude = (TextView) findViewById(R.id.main_txt_max_altitude); txtMinAltitude = (TextView) findViewById(R.id.main_txt_start_altitude); txtTakeOffTime = (TextView) findViewById(R.id.main_txt_takeoff); txtLandingTime = (TextView) findViewById(R.id.main_txt_landing); txtFlightTime = (TextView) findViewById(R.id.main_txt_duration); txtGlider = (TextView) findViewById(R.id.main_txt_glider); txtPilot = (TextView) findViewById(R.id.main_txt_pilot); layoutGlider = (LinearLayout) findViewById(R.id.main_layout_glider); layoutPilot = (LinearLayout) findViewById(R.id.main_layout_pilot); txtMoreInfo = (TextView) findViewById(R.id.main_information_btn_viewmore); cardviewInformation = (CardView) findViewById(R.id.main_cardview_information); loading = (ProgressBar) findViewById(R.id.main_loading); btnCloseInformation = findViewById(R.id.main_cardview_close); btnShowInformation = findViewById(R.id.main_information_btn); btnPlay = (ImageView) findViewById(R.id.main_btn_play); btnFastForward = (ImageView) findViewById(R.id.main_btn_speed_up); } 	0	0	0	0	1	0
@Override public void initSimulator(ArrayList< ArrayList<parameter>> listOfParameterSetsTMP, boolean log) {  this.myListOfSimulationParsers = null; remainingParametersets = new ArrayList<>(); status = 0; this.listOfParameterSetsTMP = listOfParameterSetsTMP; this.log = log; //Start this thread new Thread(this).start();  } 	0	0	0	0	1	0
"public void setDataset(Dataset dataset) { assert this.uri != null : ""uri must not be null""; assert this.datasetBytes != null : ""model must not be null""; ByteArrayOutputStream out = new ByteArrayOutputStream(DEFAULT_BYTE_ARRAY_SIZE); synchronized(this){ RDFDataMgr.write(out, dataset, Lang.NTRIPLES); this.datasetBytes = out.toByteArray(); this.cachedDataset = dataset; if (logger.isDebugEnabled()){ logger.debug(""wrote dataset {} to byte array of length {}"", this.uri, this.datasetBytes.length); } } } "	0	0	0	0	1	0
"@Test public void shouldThrowExceptionIfGroupByConceptDoesNotBelongToConceptSet() throws ParseException { String conceptSetName = ""ConceptSetName""; Concept conceptSet = new ConceptBuilder().withName(conceptSetName).withSetMember(new ConceptBuilder().withName(""NotGroupByConcept"").build()).build(); when(conceptService.getConceptByName(conceptSetName)).thenReturn(conceptSet); exception.expect(RuntimeException.class); exception.expectMessage(""GroupByConcept doesn't belong to the Root concept:  "" + conceptSetName);  obsToObsPivotTableController.constructPivotTableFor(""patientUuid"", 1, conceptSetName, ""GroupByConcept"", Collections.EMPTY_LIST, null, null, null, null, null, null); } "	0	0	0	0	1	0
"@Test public void shouldThrowExceptionIfConceptSetNotFound() throws ParseException { String conceptSetName = ""ConceptSetName""; when(conceptService.getConceptByName(conceptSetName)).thenReturn(null); exception.expect(RuntimeException.class); exception.expectMessage(""Root concept not found for the name:  "" + conceptSetName);  obsToObsPivotTableController.constructPivotTableFor(""patientUuid"", 1, conceptSetName, ""GroupByConcept"", Collections.EMPTY_LIST, null, null, null, null, null, null); } "	0	0	0	0	1	0
public int getGrid(int x) { if (x >= 45 && x < 90) { return 1; } else if (x >= 90 && x < 135) { return 2; } else if (x >= 135 && x < 180) { return 3; } else if (x >= 180 && x < 225) { return 4; } else if (x >= 225 && x < 270) { return 5; } else if (x >= 270 && x < 315) { return 6; } else if (x >= 315 && x < 360) { return 7; } else if (x >= 360 && x < 405) { return 8; } else if (x >= 405 && x < 450) { return 9; } else if (x >= 450 && x < 500) { return 10; } else return 0; } 	0	0	0	0	1	0
"public PactDslJsonBody eachKeyLike(String exampleKey) { matchers.put("".*"", matchType()); return new PactDslJsonBody(rootPath + ""*."", exampleKey, this); } "	0	0	0	0	1	0
public int apply(int extraVol) { boolean consumed = false; for (int slot = 0; slot < consumedStacks.length; slot++) { if (consumedStacks[slot] > 0) { consumed = true; inventory.extractItem(slot, consumedStacks[slot], false); } }  if (consumed) { while (consumed && extraVol > 0) { consumed = false; MaterialBlockType extraBlockType = MaterialBlockType.getBestForVolume(extraVol); if (extraBlockType == null) { extraVol = 0; continue; } ItemStack newStack = mat.getBlock(extraBlockType).getStack(); for (int i = 0; i < inventory.getSlots(); i++) { ItemStack resultStack = inventory.insertItem(i, newStack, false); if (resultStack == null) { consumed = true; extraVol -= extraBlockType.getVolume(); break; } if (newStack.stackSize != resultStack.stackSize) { consumed = true; extraVol -= extraBlockType.getVolume() * newStack.stackSize - resultStack.stackSize; break; } } } } return extraVol; } 	0	0	0	0	1	0
TraceBuilder setBranchState(DtxBranch.State state) { messageContent.append(FIELD_SEPARATOR).append(DTX_BRANCH_STATE).append(state); return this; } 	0	0	0	0	1	0
TraceBuilder setSlotId(String slotId) { messageContent.append(FIELD_SEPARATOR).append(SLOT_ID).append(slotId); return this; } 	0	0	0	0	1	0
@Override public void run() { doCommit(newModel); } 	0	0	0	0	1	0
@Override public void run() { for (RootModelImpl rootModel : modelsToCommit) { commitModelWithoutEvents(rootModel); }  for (ModifiableRootModel model : modelsToDispose) { model.dispose(); } } 	0	0	0	0	1	0
@Override public void onActivityCreated(Bundle savedInstanceState) { super.onActivityCreated(savedInstanceState);  mIsInitialized = false;  // enable my location feature getMap().setMyLocationEnabled(!AppSettings.isUsingFakeLocation(getActivity()));  getLoaderManager().initLoader(LAODER_ID, null, this); } 	0	0	0	0	1	0
"private static void readApplicationExtensionBlock(SequentialReader reader, int blockSizeBytes, Metadata metadata) throws IOException { if (blockSizeBytes != 11) { metadata.addDirectory(new ErrorDirectory(String.format(""Invalid GIF application extension block size. Expected 11, got %d."", blockSizeBytes))); return; }  String extensionType = reader.getString(blockSizeBytes, Charsets.UTF_8);  if (extensionType.equals(""XMP DataXMP"")) { // XMP data extension byte[] xmpBytes = gatherBytes(reader); new XmpReader().extract(xmpBytes, 0, xmpBytes.length - 257, metadata, null); } else if (extensionType.equals(""ICCRGBG1012"")) { // ICC profile extension byte[] iccBytes = gatherBytes(reader, reader.getByte()); if (iccBytes.length != 0) new IccReader().extract(new ByteArrayReader(iccBytes), metadata); } else if (extensionType.equals(""NETSCAPE2.0"")) { reader.skip(2); // Netscape's animated GIF extension // Iteration count (0 means infinite) int iterationCount = reader.getUInt16(); // Skip terminator reader.skip(1); GifAnimationDirectory animationDirectory = new GifAnimationDirectory(); animationDirectory.setInt(GifAnimationDirectory.TAG_ITERATION_COUNT, iterationCount); metadata.addDirectory(animationDirectory); } else { skipBlocks(reader); } } "	0	0	0	0	1	0
"private void processBinaryExpression(AbstractApexNode<?> node, Object data) { ASTBinaryExpression nestedBinaryExpression = node.getFirstChildOfType(ASTBinaryExpression.class); if (nestedBinaryExpression != null) { processBinaryExpression(nestedBinaryExpression, data); }  ASTMethodCallExpression methodCallAssignment = node.getFirstChildOfType(ASTMethodCallExpression.class); if (methodCallAssignment != null) { processInlineMethodCalls(methodCallAssignment, data, true); }  final List<ASTVariableExpression> nodes = node.findChildrenOfType(ASTVariableExpression.class); for (ASTVariableExpression n : nodes) { final VariableExpression expression = n.getNode(); StringBuilder sb = new StringBuilder().append(expression.getDefiningType()).append("":"").append(expression);  if (urlParameterString.contains(sb.toString())) { addViolation(data, n); } } } "	0	0	0	0	1	0
"private String fromJson(HttpURLConnection connection) { try { ByteArrayOutputStream baos = new ByteArrayOutputStream(); IOUtils.copy(connection.getInputStream(), baos); return baos.toString(); } catch (IOException e) { log.error(""fromJson caught exception:"", e); e.printStackTrace(); } return null; } "	0	0	0	0	1	0
"private void startCreateVCardActivityIntent() { Intent intent = new Intent(MainActivity.this, CreateVCardActivity.class);  if (cardContent != null) { intent.setAction(AppWidgetManager.EXTRA_CUSTOM_EXTRAS); intent.putStringArrayListExtra(""vci"", cardContent); } startActivity(intent); } "	0	0	0	0	1	0
"public W addWindow(W newWindow, MergeFunction<W> mergeFunction) throws Exception {  List<W> windows = new ArrayList<>();  windows.addAll(this.windows.keySet()); windows.add(newWindow);  final Map<W, Collection<W>> mergeResults = new HashMap<>(); windowAssigner.mergeWindows(windows, new MergingWindowAssigner.MergeCallback<W>() { @Override public void merge(Collection<W> toBeMerged, W mergeResult) { if (LOG.isDebugEnabled()) { LOG.debug(""Merging {} into {}"", toBeMerged, mergeResult); } mergeResults.put(mergeResult, toBeMerged); } });  W resultWindow = newWindow;  // perform the merge for (Map.Entry<W, Collection<W>> c: mergeResults.entrySet()) { W mergeResult = c.getKey(); Collection<W> mergedWindows = c.getValue();  // if our new window is in the merged windows make the merge result the // result window if (mergedWindows.remove(newWindow)) { resultWindow = mergeResult; }  // pick any of the merged windows and choose that window's state window // as the state window for the merge result W mergedStateWindow = this.windows.get(mergedWindows.iterator().next());  // figure out the state windows that we are merging List<W> mergedStateWindows = new ArrayList<>(); for (W mergedWindow: mergedWindows) { W res = this.windows.remove(mergedWindow); if (res != null) { mergedStateWindows.add(res); } }  this.windows.put(mergeResult, mergedStateWindow);  // don't put the target state window into the merged windows mergedStateWindows.remove(mergedStateWindow);  // don't merge the new window itself, it never had any state associated with it // i.e. if we are only merging one pre-existing window into itself // without extending the pre-exising window if (!(mergedWindows.contains(mergeResult) && mergedWindows.size() == 1)) { mergeFunction.merge(mergeResult, mergedWindows, this.windows.get(mergeResult), mergedStateWindows); } }  // the new window created a new, self-contained window without merging if (resultWindow.equals(newWindow)) { this.windows.put(resultWindow, resultWindow); }  return resultWindow; } "	0	0	0	0	1	0
"public String GetTimeToString(){ return new SimpleDateFormat(""HH:mm"").format(_date); } "	0	0	0	0	1	0
"private void checkState3(List<URIAvailable> stateThree, User user){  /* Four each URLAvailable wich has a change in state 3, * search all ShortURL with the same target. */ for(URIAvailable c : stateThree){ List<ShortURL> uris = repositorySHORT.find(c.getTarget(), user.getUsername()); /* * For each ShortURL, create one URIDisable with same attributes and *  delete ShortURL and c.enable = false */ for(ShortURL a: uris) { URIDisabled b = new URIDisabled(a.getHash(), a.getTarget(), a.getUri(),a.getCreator(), a.getCreated(), a.getIp(), a.isPrivateURI(), a.getPrivateToken(), a.getExpirationSeconds(), a.getAuthorizedUsers()); repositoryURIDisabled.save(b); logger.info(""\nNotification Worker: \n----------------\n"" + b); // Delete ShortURL repositorySHORT.delete(a); Notify ab = notifyRepository.find(a.getTarget(),user.getUsername()); notifyRepository.delete(ab); List<Notify> as = notifyRepository.findByTarget(c.getTarget()); if(as.size() == 0) {  // Set enable = false c.setEnable(false); c.setChange(false); repositoryAvailable.save(c);  } } } } "	0	0	0	0	1	0
private void setTextOrHide(String value, TextView tv) { if (value != null) { tv.setText(value); } else { tv.setVisibility(View.GONE); } } 	0	0	0	0	1	0
"@Test public void validate_shouldFailIfDestDoesNotMatchAFilePattern() { ArtifactPlan artifactPlan = new ArtifactPlan(""foo/bar"", ""..""); artifactPlan.validate(null); assertThat(artifactPlan.errors().on(ArtifactPlan.DEST), is(""Invalid destination path. Destination path should match the pattern ([^. ].+[^. ])|([^. ][^. ])|([^. ])"")); } "	0	0	0	0	1	0
"protected void removeInvalidationListener(MemberImpl member, boolean removeFromMemberAlso) { String registrationId = nearCacheInvalidationListeners.remove(member); if (registrationId != null) { try { if (removeFromMemberAlso) { ClientRequest request = new CacheRemoveInvalidationListenerRequest(name, registrationId); HazelcastClientInstanceImpl clientInstance = (HazelcastClientInstanceImpl) clientContext.getHazelcastInstance(); ClientInvocation invocation = new ClientInvocation(clientInstance, request, member.getAddress()); Future future = invocation.invoke(); Boolean result = clientContext.getSerializationService().toObject(future.get()); if (!result) { logger.warning(""Invalidation listener couldn't be removed on member "" + member.getAddress()); // TODO What we do if result is false ??? } } clientContext.getListenerService().deRegisterListener(registrationId); } catch (Exception e) { throw ExceptionUtil.rethrow(e); } } } "	0	0	0	0	1	0
@Override public void call() { // if no window we unsubscribe up otherwise wait until window ends if(window == null) { parentSubscription.unsubscribe(); } } 	0	0	0	0	1	0
"public static boolean isFresh() { return isLogin() && mUser.stuNum.substring(0, 4).equals(""2016""); } "	0	0	0	0	1	0
"@Override public Prog visit(LThis t, JavaWriter w) { try { w.emit(""this""); return prog; } catch (IOException x) { throw new RuntimeException(x); } } "	0	0	0	0	1	0
protected void dragMouse(Point point) { mouse = point; cmouse.x = mouse.x - dw; cmouse.y = mouse.y - dh; cmouse.x /= cs; cmouse.y /= cs;  if (lock) return;  List<Player> players = game.getPlayers(); Player me = players.get(0);  if (!drag){ for (AbstractShip ship : me.getShips()){ if ( ship.overlap(cmouse.x, cmouse.y) ) shipSel = ship; } }  if (shipSel != null){ drag = true;  if (cmouse.x >= 0 && cmouse.x + shipSel.getWidth() <= gw) shipSel.setPositionX(cmouse.x); if (cmouse.y >= 0 && cmouse.y + shipSel.getHeight() <= gh) shipSel.setPositionY(cmouse.y); }  this.updateUI(); } 	0	0	0	0	1	0
"private void populateAttrs() { org.python.types.Str name = new org.python.types.Str(method.getName()); this.__dict__.put(""__name__"", this.name);  if (this.name != null) { this.__dict__.put(""__qualname__"", this.name); } else { org.python.Object co_name = this.code.__dict__.get(""co_consts""); this.__dict__.put(""__qualname__"", co_name); }  this.__dict__.put(""__code__"", this.code); org.python.Object doc; try { org.python.types.Tuple consts = (org.python.types.Tuple) this.code.co_consts; if (consts != null) { doc = consts.__getitem__(new org.python.types.Int(0)); } else { doc = org.python.types.NoneType.NONE; } } catch (java.lang.NullPointerException e) { doc = org.python.types.NoneType.NONE; } catch (java.lang.ClassCastException e) { doc = org.python.types.NoneType.NONE; } catch (java.lang.IndexOutOfBoundsException e) { doc = org.python.types.NoneType.NONE; } this.__dict__.put(""__doc__"", doc);  // this.__dict__.put(""__call__"") } "	0	0	0	0	1	0
"public boolean containsReferenceToJavax() throws IOException { List<String> lines = Files.readAllLines(javaSourceFile); return FluentIterable.from(lines).anyMatch(new Predicate<String>() { @Override public boolean apply(String line) { return line.contains(""s.getRequest()"") || line.contains(""s.setRequest("") || line.contains(""s.getResponse()""); } }); } "	0	0	0	0	1	0
@Override public void onStop() { if (getActivity() instanceof MainActivity) { ((MainActivity) getActivity()).stopLocationUpdates(this); } realm.close(); super.onStop(); } 	0	0	0	0	1	0
"@Override @Transactional(readOnly = true) public List<Pair<String, Integer>> getTargetSourceCounts() { String sql = ""SELECT sourceiri AS value, COUNT(1) AS count FROM annotation_target_get WHERE sourceiri IS NOT NULL GROUP BY sourceiri ORDER BY count DESC"";  return queryForList(sql, null, null, new CountRowMapper()); } "	0	0	0	0	1	0
"public void route () {  long startTime = System.currentTimeMillis();  final int distanceLimitMm; //This is needed otherwise timeLimitSeconds gets changed and // on next call of route on same streetRouter wrong warnings are returned // (since timeLimitSeconds is MAX_INTEGER not 0) // FIXME this class is supposed to be throw-away, should we be reusing instances at all? change this variable name to be clearer. final int tmpTimeLimitSeconds;  // Set up goal direction. if (destinationSplit != null) { // This search has a destination, so enable A* goal direction. // To speed up the distance calculations that are part of the A* heuristic, we precalculate some factors. // We want to scale X distances by the cosine of the higher of the two latitudes to underestimate distances, // as required for the A* heuristic to be admissible. // TODO this should really use the max latitude of the whole street layer. int maxAbsLatFixed = Math.max(Math.abs(destinationSplit.fixedLat), Math.abs(originSplit.fixedLat)); double maxAbsLatRadians = Math.toRadians(VertexStore.fixedDegreesToFloating(maxAbsLatFixed)); millimetersPerDegreeLonFixed = MM_PER_DEGREE_LAT_FIXED * Math.cos(maxAbsLatRadians); // FIXME account for speeds of individual street segments, not just speed in request double maxSpeedMetersPerSecond = profileRequest.getSpeed(streetMode); // Car speed is currently often unspecified in the request and defaults to zero. if (maxSpeedMetersPerSecond == 0) maxSpeedMetersPerSecond = 36.11; // 130 km/h maxSpeedSecondsPerMillimeter = 1 / (maxSpeedMetersPerSecond * 1000); }  if (distanceLimitMeters > 0) { // Distance in State is in millimeters. Distance limit is in meters, requiring a conversion. distanceLimitMm = distanceLimitMeters * 1000; if (dominanceVariable != State.RoutingVariable.DISTANCE_MILLIMETERS) { LOG.warn(""Setting a distance limit when distance is not the dominance function, this is a resource limiting issue and paths may be incorrect.""); } } else { // There is no distance limit. Set it to the largest possible value to allow routing to progress. distanceLimitMm = Integer.MAX_VALUE; }  if (timeLimitSeconds > 0) { tmpTimeLimitSeconds = timeLimitSeconds; if (dominanceVariable != State.RoutingVariable.DURATION_SECONDS) { LOG.warn(""Setting a time limit when time is not the dominance function, this is a resource limiting issue and paths may be incorrect.""); } } else { // There is no time limit. Set it to the largest possible value to allow routing to progress. tmpTimeLimitSeconds = Integer.MAX_VALUE; }  if (timeLimitSeconds > 0 && distanceLimitMeters > 0) { LOG.warn(""Both distance limit of {}m and time limit of {}s are set in StreetRouter"", distanceLimitMeters, timeLimitSeconds); } else if (timeLimitSeconds == 0 && distanceLimitMeters == 0) { LOG.debug(""Distance and time limit are both set to 0 in StreetRouter. This means NO LIMIT in searching so the entire street graph will be explored. This can be slow.""); } else if (distanceLimitMeters > 0) { LOG.debug(""Using distance limit of {} meters"", distanceLimitMeters); } else if (timeLimitSeconds > 0) { LOG.debug(""Using time limit of {} sec"", timeLimitSeconds); }  if (queue.size() == 0) { LOG.warn(""Routing without first setting an origin, no search will happen.""); }  PrintStream debugPrintStream = null; if (DEBUG_OUTPUT) { File debugFile = new File(String.format(""street-router-debug.csv"")); OutputStream outputStream; try { outputStream = new BufferedOutputStream(new FileOutputStream(debugFile)); } catch (FileNotFoundException e) { throw new RuntimeException(e); } debugPrintStream = new PrintStream(outputStream); debugPrintStream.println(""lat,lon,weight""); }  EdgeStore.Edge edge = streetLayer.edgeStore.getCursor();  if (transitStopSearch) { routingVisitor = new StopVisitor(streetLayer, dominanceVariable, maxTransitStops, profileRequest.getMinTimeLimit(streetMode)); } else if (flagSearch != null) { routingVisitor = new VertexFlagVisitor(streetLayer, dominanceVariable, flagSearch, maxVertices, profileRequest.getMinTimeLimit(streetMode)); } while (!queue.isEmpty()) { State s0 = queue.poll();  if (DEBUG_OUTPUT) { VertexStore.Vertex v = streetLayer.vertexStore.getCursor(s0.vertex);  double lat = v.getLat(); double lon = v.getLon();  if (s0.backEdge != -1) { EdgeStore.Edge e = streetLayer.edgeStore.getCursor(s0.backEdge); v.seek(e.getFromVertex()); lat = (lat + v.getLat()) / 2; lon = (lon + v.getLon()) / 2; }  debugPrintStream.println(String.format(""%.6f,%.6f,%d"", v.getLat(), v.getLon(), s0.weight)); }  // The state coming off the priority queue may have been dominated by some other state that was produced // by traversing the same edge. Check that the state coming off the queue has not been dominated before // exploring it. States at the origin may have their backEdge set to a negative number to indicate that // they have no backEdge (were not produced by traversing an edge). Skip the check for those states. if (s0.backEdge >= 0 && !bestStatesAtEdge.get(s0.backEdge).contains(s0)) continue;  // If the search has reached the destination, the state coming off the queue is the best way to get there. if (toVertex > 0 && toVertex == s0.vertex) break;  // End the search if the state coming off the queue has exceeded the best-known cost to reach the destination. // TODO how important is this? How can this even happen? In a street search, is target pruning even effective? if (s0.getRoutingVariable(dominanceVariable) > bestValueAtDestination) break;  // Hit RoutingVistor callbacks to monitor search progress. if (routingVisitor != null) { routingVisitor.visitVertex(s0);  if (routingVisitor.shouldBreakSearch()) { LOG.debug(""{} routing visitor stopped search"", routingVisitor.getClass().getSimpleName()); queue.clear(); break; } }  // If this state is at the destination, figure out the cost at the destination and use it for target pruning. // TODO explain what ""target pruning"" is in this context and why we need it. It seems that this is mainly about traversing split streets. // By using getState(split) we include turn restrictions and turn costs. // We've already added this state to bestStates so getState will be correct. if (destinationSplit != null && (s0.vertex == destinationSplit.vertex0 || s0.vertex == destinationSplit.vertex1)) { State atDest = getState(destinationSplit); // atDest could be null even though we've found a nearby vertex because of a turn restriction if (atDest != null && bestValueAtDestination > atDest.getRoutingVariable(dominanceVariable)) { bestValueAtDestination = atDest.getRoutingVariable(dominanceVariable); } }  // Traverse all edges leading out of the vertex where this state is located. streetLayer.outgoingEdges.get(s0.vertex).forEach(eidx -> { edge.seek(eidx); State s1 = edge.traverse(s0, streetMode, profileRequest, turnCostCalculator); if (s1 != null && s1.distance <= distanceLimitMm && s1.getDurationSeconds() < tmpTimeLimitSeconds) { if (!isDominated(s1)) { // Calculate the heuristic (which involves a square root) only when the state is retained. s1.heuristic = calcHeuristic(s1); bestStatesAtEdge.put(s1.backEdge, s1); queue.add(s1); } } return true; // Iteration over the edge list should continue. }); } if (DEBUG_OUTPUT) { debugPrintStream.close(); } long routingTimeMsec = System.currentTimeMillis() - startTime; LOG.debug(""Routing took {} msec"", routingTimeMsec); } "	0	0	0	0	1	0
"@Test public void testGetSelectEmbedded() throws Exception { ResultSet rs = stmt.executeQuery(""select 1 c1, 2.2 c2, null c3, 'haha' c4 from dual;"");  ResultSetMetaData meta = rs.getMetaData();  Assert.assertEquals(""c1"", meta.getColumnName(1)); Assert.assertEquals(""c2"", meta.getColumnName(2)); Assert.assertEquals(""c3"", meta.getColumnName(3)); Assert.assertEquals(""c4"", meta.getColumnName(4));  Assert.assertEquals(""BIGINT"", meta.getColumnTypeName(1)); Assert.assertEquals(""DOUBLE"", meta.getColumnTypeName(2)); // TODO: SDK treats com.aliyun.odps.OdpsType.VOID as string? Assert.assertEquals(""STRING"", meta.getColumnTypeName(3)); Assert.assertEquals(""STRING"", meta.getColumnTypeName(4));  rs.next(); Assert.assertEquals(1, rs.getInt(1)); Assert.assertEquals(2.2, rs.getDouble(2), 0); Assert.assertEquals(0, rs.getInt(3)); Assert.assertTrue(rs.wasNull()); Assert.assertEquals(""haha"", rs.getInt(4));  rs.close(); } "	0	0	0	0	1	0
@Override public String[] toStringWithSpillcode() { List<String> result = PhiGraphSolver.calculateOperations(phiRelations); String[] resultString = new String[result.size()]; result.toArray(resultString); return resultString; } 	0	0	0	0	1	0
@Override public List<PublishEvent> retrievePersistedPublishes(String clientID) { return m_persistentMessageStore.get(clientID); } 	0	0	0	0	1	0
public Atom getRuleConclusionAtom() { Set<Atom> allAtoms = new HashSet<>(); allAtoms.add(head.getAtom()); body.getAtoms(Atom.class).forEach(allAtoms::add); ReasonerQueryImpl ruleQuery = ReasonerQueries.create(allAtoms, graph); return ruleQuery.getAtoms(Atom.class).filter(at -> at.equals(head.getAtom())).findFirst().orElse(null); } 	0	0	0	0	1	0
private InferenceRule rewrite(){ ReasonerAtomicQuery rewrittenHead = ReasonerQueries.atomic(head.getAtom().rewriteToUserDefined());  Set<Atom> bodyRewrites = new HashSet<>(); body.getAtoms(Atom.class) .map(at -> { if (at.isRelation() && !at.isUserDefinedName() && Objects.equals(at.getOntologyConcept(), head.getAtom().getOntologyConcept())){ return at.rewriteToUserDefined(); } else { return at; } }).forEach(bodyRewrites::add);  ReasonerQueryImpl rewrittenBody = ReasonerQueries.create(bodyRewrites, graph); return new InferenceRule(rewrittenHead, rewrittenBody, ruleId, graph); } 	0	0	0	0	1	0
public void setJsonData(String jsonData) { this.jsonData = jsonData; } 	0	0	0	0	1	0
private void refreshView() { if (refreshViewHandler != null) refreshViewHandler.refresh(); } 	0	0	0	0	1	0
@Nullable static ClientTransport getTransportFromPickResult(PickResult result, boolean isWaitForReady) { final ClientTransport transport; Subchannel subchannel = result.getSubchannel(); if (subchannel != null) { transport = ((AbstractSubchannel) subchannel).obtainActiveTransport(); } else { transport = null; } if (transport != null) { final ClientStreamTracer.Factory streamTracerFactory = result.getStreamTracerFactory(); if (streamTracerFactory == null) { return transport; } return new ClientTransport() { @Override public ClientStream newStream( MethodDescriptor<?, ?> method, Metadata headers, CallOptions callOptions) { return transport.newStream( method, headers, callOptions.withStreamTracerFactory(streamTracerFactory)); }  @Override public void ping(PingCallback callback, Executor executor) { transport.ping(callback, executor); } }; } if (!result.getStatus().isOk() && !isWaitForReady) { return new FailingClientTransport(result.getStatus()); } return null; } 	0	0	0	0	1	0
"@Test public void testPagination() { final int TOTAL_POSTS = 5; final int PER_PAGE = 2; Calendar cal = Calendar.getInstance(Locale.ENGLISH); for (int i = 1; i <= TOTAL_POSTS; i++) { cal.add(Calendar.SECOND, 5); FakeDocumentBuilder builder = new FakeDocumentBuilder(""post""); builder.withName(""dummyfile"" + i) .withCached(true) .withStatus(""published"") .withDate(cal.getTime()) .build(); }  int pageCount = 1; int start = 0; db.setLimit(PER_PAGE);  while (start < TOTAL_POSTS) { db.setStart(start); DocumentList posts = db.getAllContent(""post"");  assertThat( posts.size() ).isLessThanOrEqualTo( 2 );  if( posts.size() > 1 ) { assertThat((Date) posts.get(0).get(""date"")).isAfter((Date) posts.get(1).get(""date"")); }  pageCount++; start += PER_PAGE; } Assert.assertEquals(4, pageCount); } "	0	0	0	0	1	0
"@Test public void testRating() { JSONEntityFormat fmt = new JSONEntityFormat(); fmt.setEntityType(CommonTypes.RATING); fmt.setEntityBuilder(RatingBuilder.class);  LineEntityParser lep = fmt.makeParser(Lists.newArrayList()); Entity res = lep.parse(""{\""$id\"": 203810, \""user\"": 42, \""item\"": 20, \""rating\"": 3.5}""); assertThat(res, notNullValue()); assertThat(res, instanceOf(Rating.class)); Rating r = (Rating) res; assertThat(r.getId(), equalTo(203810L)); assertThat(r.getType(), equalTo(CommonTypes.RATING)); assertThat(r.getUserId(), equalTo(42L)); assertThat(r.getItemId(), equalTo(20L)); assertThat(r.getValue(), equalTo(3.5)); } "	0	0	0	0	1	0
public Long countDistinct() { CriteriaQuery<Long> query = builder.createQuery(Long.class); if (predicate != null) { query.where(predicate); } query.select(builder.countDistinct(query.from(entityClass)));  return getEntityManager().createQuery(query).getSingleResult(); } 	0	0	0	0	1	0
@Override public Object getItem(int position) { return blcController.getBlocks(ownerName).get(position); } 	0	0	0	0	1	0
@Test public void testLaunchOfChatroomActivityOnButtonClick() { assertNotNull(mActivity.findViewById(R.id.chatroomButton)); onView(withId(R.id.chatroomButton)).perform(click()); Activity nextActivity = getInstrumentation().waitForMonitorWithTimeout(monitorChatroomActivity, 5000); assertNotNull(nextActivity); nextActivity.finish(); } 	0	0	0	0	1	0
"void updateMenuStates() { currentMode.setText(""CURRENT MODE= "" + player.getMenuState().getCurrentModeString()); currentInstance.setText(""CURRENT INSTANCE= "" + player.getMenuState().getCurrentInstanceIndex()); currentType.setText(""CURRENT TYPE= "" + player.getMenuState().getCurrentTypeString()); currentInstruction.setText(""CURRENT INSTRUCTION= "" + player.getMenuState().getCurrentTypeString()); } "	0	0	0	0	1	0
"private void updateMenuStateText() { currentMode.setText(""CURRENT MODE= "" + this.ms.getCurrentModeString()); currentInstance.setText(""CURRENT INSTANCE= "" + this.ms.getCurrentInstanceIndex()); currentType.setText(""CURRENT TYPE= "" + this.ms.getCurrentTypeString()); currentInstruction.setText(""CURRENT INSTRUCTION= "" + this.ms.getCurrentTypeString()); } "	0	0	0	0	1	0
"public void getArrivalTime(String routeName) { TranslocRouteFactory factory = new TranslocRouteFactory();  int[] times = factory.createRoute(routeName, ""oregon""); if (times == null) { System.out.println(""Times don't exist for this route""); } else { System.out.println(""Printing next two times for "" + routeName); for (int i = 0; i < times.length; i++) { System.out.println("" "" + times[i] + "" minutes""); } } List<String> STOPS = new ArrayList<String>(); Properties prop = new Properties(); InputStream input = null;  //		try { //			input = new FileInputStream(""src/stops.properties""); // //			// load a properties file //			prop.load(input); //			for (Object key : prop.keySet()) { //				String[] keyWords = ((String) key).split(""_""); //				String stopName = """"; //				for (String str : keyWords) { //					stopName += str + "" ""; //				} //				System.out.println(stopName.substring(0, stopName.length() - 1)); //				STOPS.add(stopName.substring(0, stopName.length() - 1)); //			} //		} catch (IOException ex) { //			ex.printStackTrace(); //		} finally { //			if (input != null) { //				try { //					input.close(); //				} catch (IOException e) { //					e.printStackTrace(); //				} //			} //		}  } "	0	0	0	0	1	0
private float convertSpToPx(float scaledPixels) { return scaledPixels * context.getResources().getDisplayMetrics().scaledDensity; } 	0	0	0	0	1	0
"public Settings indexSettings() { ImmutableSettings.Builder builder = ImmutableSettings.builder(); int numberOfShards = numberOfShards(); if (numberOfShards > 0) { builder.put(SETTING_NUMBER_OF_SHARDS, numberOfShards).build(); } int numberOfReplicas = numberOfReplicas(); if (numberOfReplicas >= 0) { builder.put(SETTING_NUMBER_OF_REPLICAS, numberOfReplicas).build(); } // 30% of the time if (randomInt(9) < 3) { String dataPath = ""data/custom-"" + CHILD_JVM_ID + ""/"" + UUID.randomUUID().toString(); logger.info(""using custom data_path for index: [{}]"", dataPath); builder.put(IndexMetaData.SETTING_DATA_PATH, dataPath); } return builder.build(); } "	0	0	0	0	1	0
"@Override public String toString() { String iccIdToPrint = mIccId != null ? mIccId.substring(0, 9) + ""XXXXXXXXXXX"" : null; return ""{id="" + mId + "", iccId="" + iccIdToPrint + "" simSlotIndex="" + mSimSlotIndex + "" displayName="" + mDisplayName + "" carrierName="" + mCarrierName + "" nameSource="" + mNameSource + "" iconTint="" + mIconTint + "" dataRoaming="" + mDataRoaming + "" iconBitmap="" + mIconBitmap + "" mcc "" + mMcc + "" mnc "" + mMnc + ""}""; } "	0	0	0	0	1	0
"@Override public String getSqlIdKeyName() { return getDefaultProps().getOrDefault(PROPS_KEY_DEFAULT_SQL_RETRY_WAIT_TIME, ""_SQL_ID_""); } "	0	0	0	0	1	0
"private boolean notifyValidationErrors() { List<ValidationResult> validateResults = formIterator.validatePageAndGetResult(); if (validateResults.size() > 0) { StringBuffer buff = new StringBuffer(); for (ValidationResult vr : validateResults) { buff.append(vr.getMessage()).append(""\n""); } final Crouton crouton = Crouton.makeText(this, buff.toString(), Style.ALERT); crouton.setConfiguration(new Configuration.Builder().setDuration(2500).build()); crouton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Crouton.hide(crouton); } }); crouton.show(); return true; } return false; } "	0	0	0	0	1	0
public BatchIndicoResult predict(List<?> images, HashMap<String, Object> params) throws UnsupportedOperationException, IOException, IndicoException { return predict(ImageUtils.convertToImage(images), ImageUtils.grabType(images), params); } 	0	0	0	0	1	0
public IndicoResult predict(File imageFile, HashMap<String, Object> params) throws UnsupportedOperationException, IOException, IndicoException { return predict(ImageUtils.convertToImage(imageFile), ImageUtils.grabType(imageFile), params); } 	0	0	0	0	1	0
public IndicoResult predict(String filePath) throws UnsupportedOperationException, IOException, IndicoException { return predict(ImageUtils.convertToImage(filePath), ImageUtils.grabType(filePath), null); } 	0	0	0	0	1	0
"private Type checkRecordAccess(Environment env, Expr.RecordAccess expr) { Type src = checkExpression(env, expr.getSource()); Type.Record effectiveRecord = checkIsRecordType(src, expr.getSource()); // FieldDeclaration[] fields = effectiveRecord.getFields(); String actualFieldName = expr.getField().get(); for (int i = 0; i != fields.length; ++i) { FieldDeclaration vd = fields[i]; String declaredFieldName = vd.getVariableName().get(); if (declaredFieldName.equals(actualFieldName)) { return vd.getType(); } } // throw new SyntaxError(""invalid field access"", parent.getEntry(), expr.getField()); } "	0	0	0	0	1	0
"private void check(WyalFile.Declaration decl) { if (decl instanceof WyalFile.Declaration.Assert) { check((WyalFile.Declaration.Assert) decl); } else if (decl instanceof WyalFile.Declaration.Named) { check((WyalFile.Declaration.Named) decl); } else if (decl instanceof WyalFile.Declaration.Import) { // nothing to do here } else { throw new IllegalArgumentException(""unknown declaration: "" + decl); } } "	0	0	0	0	1	0
"@Override public boolean buildDialog() {  // Without the abstract factory running, nothing would make sense here, we don't serialize // without the factory being used, thats most of how everything works. if(!AbstractFactory.isRunning()) { return false; }  // Get the setup information SetupController setupController = AbstractFactory.getFactory(ControllerFactory.class).get(SetupController.class);  // Verify that the setup information exists, if it doesn't chances are the user is trying // to save without creating a tilemap first. if(setupController != null) {  // Create a file chooser so that we can get information about // the save process JFileChooser fileChooser = new JFileChooser(System.getProperty(""user.home"") + ""/desktop""); fileChooser.setSelectedFile(new File(setupController.getName()));  // Open the file chooser so the user can navigate to the path // where the file should be saved.  The user will also enter a // file name, this is taken and will later be used to create // the file int saveValue = fileChooser.showSaveDialog(MainApplication.instance());  // If the user chose to perform a save within the file chooser // dialog, then continue forward and create a resource handle // to the specified file if(saveValue == JFileChooser.APPROVE_OPTION) {  // Create a file system at the specified path _fileSystem = new CodecFileSystem( new File(fileChooser.getSelectedFile().getAbsolutePath() + IXMLCodec.FILE_EXTENSION) );  return true; } }  return false; } "	0	0	0	0	1	0
"@Override public boolean onCreateActionMode(ActionMode mode, Menu menu) { MenuInflater inflater = mode.getMenuInflater(); inflater.inflate(R.menu.cab_array, menu); mode.setTitle(mCheckedItems.size() + "" Selected""); return true; } "	0	0	0	0	1	0
@Override void drawItem(final Graphics2D graphics, final MapView mapView, final RoadSegment segment, final boolean isSelected) { Stroke stroke; Color color; // draw segment if (isSelected) { stroke = ROAD_SEGMENT_SEL_STROKE; color = ROAD_SEGMENT_SEL_COLOR; } else { stroke = ROAD_SEGMENT_STROKE; color = ROAD_SEGMENT_COLOR; } double arrowLength = isSelected ? SEL_ARROW_LENGTH : ARROW_LENGTH; arrowLength = PaintUtil.arrowLength(mapView, arrowLength); final Pair<Pair<Point, Point>, Pair<Point, Point>> arrowGeometry = getArrowGeometry(mapView, segment.getPoints(), arrowLength); final List<Point> geometry = PaintUtil.toPoints(mapView, segment.getPoints()); PaintManager.drawDirectedSegment(graphics, geometry, arrowGeometry, color, stroke); } 	0	0	0	0	1	0
public synchronized boolean isEnabled(Mod mod) throws ModNotDownloadedException{ for (Path filePath : getModFileDestPaths(mod)){ if (!filePath.toFile().exists()){ return false; } } return true; } 	0	0	0	0	1	0
private Set<Mod> loadMods(Path path, ModManager mm){ Set<Mod> mods = new HashSet<>();  try(FileReader reader = new FileReader(path.toFile())){ // Try to load mods from file Set<Mod> newMods = gson.fromJson(reader, modsType); for (Mod newMod : newMods){ // If mod is updateable, or if the local zip file is available, add mod if (newMod.isUpdateable() || isDownloaded(newMod) || trySatisfyLocalFiles(newMod, mm)){ mods.add(newMod); } } } catch (FileNotFoundException e){ // No Action } catch (IOException e1) { e1.printStackTrace(); }  DefaultMods.ensureDefaults(mods); return mods; } 	0	0	0	0	1	0
"public ContextStack push(Map<String, Object> existingMap) { if (existingMap == null) throw new IllegalArgumentException(""Cannot push null as an existing Map"");  // if (existingMap.containsKey(""context"")) throw new IllegalArgumentException(""Cannot push existing with key 'context', reserved key""); Map<String, Object> newCombined = new HashMap<>(combinedMap); newCombined.putAll(existingMap); // make sure 'context' refers to this no matter what is in the existingMap (may even be a ContextStack instance) newCombined.put(""context"", this); stackList.add(0, new MapWrapper(this, existingMap, newCombined)); topMap = existingMap; combinedMap = newCombined;  return this; } "	0	0	0	0	1	0
"protected void rebuildCombinedMap() { clearCombinedMap(); // iterate through stackList from end to beginning Map<String, Object> parentCombined = null; for (int i = stackList.size() - 1; i >= 0; i--) { MapWrapper curWrapper = stackList.get(i); Map<String, Object> curMap = curWrapper.getWrapped(); Map<String, Object> curCombined = curWrapper.getCombined();  curCombined.clear(); if (parentCombined != null) curCombined.putAll(parentCombined); curCombined.putAll(curMap); parentCombined = curCombined; // make sure 'context' refers to this no matter what is in maps curCombined.put(""context"", this); } combinedMap = parentCombined; } "	0	0	0	0	1	0
@Override public void notify(String title, String header, String message) { this.pushbullet.pushNote(title, message); } 	0	0	0	0	1	0
"private static void buildModifiedList(List<Object> list, LensType type) { Logger.log(""Original lens list size: "" + list.size());  final HashMap<String, Object> queriedList = MainActivity.lensDBHelper.getAllOfType(type); final boolean canInjectLenses = queriedList != null;  if( !canInjectLenses ) { Logger.log(""No lenses to load for type: "" + type); }  HashSet<String> containedList = new HashSet<>();  for( Object lens : list ) { String mCode = (String) getObjectField(lens, ""mCode"");  if(Preferences.getBool(Prefs.LENSES_COLLECT) && (!canInjectLenses || !queriedList.containsKey(mCode))) { performLensSave(lens, type); }  if(!Preferences.getBool(Prefs.LENSES_HIDE_CURRENTLY_PROVIDED_SC_LENSES) && canInjectLenses) containedList.add(mCode); }  if(Preferences.getBool(Prefs.LENSES_HIDE_CURRENTLY_PROVIDED_SC_LENSES)) list.clear();  if(!Preferences.getBool(Prefs.LENSES_LOAD) || !canInjectLenses) return;  Logger.log(""Potential lenses to load: "" + queriedList.size());  int injectedLensCount = 0; for (Object lensObj : queriedList.values()) { LensData lensData = (LensData) lensObj; String mCode = lensData.mCode;  if (!lensData.mActive || containedList.contains(mCode)) continue;  Object lens = buildModifiedLens(lensData, type); list.add(lens); injectedLensCount++; }  Logger.log(String.format(""Injected %s %s Lenses"", injectedLensCount, String.valueOf(type))); } "	0	0	0	0	1	0
"@SuppressWarnings(""TryWithIdenticalCatches"") private Object invokeCallback(CallbackHandler callbackHandler) { try { Logger.log(""Performing invocation of builder method: "" + callbackHandler.method.getName() + ""|"" + Arrays.toString(callbackHandler.parameters)); return callbackHandler.method.invoke(callbackHandler.caller, callbackHandler.parameters); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); }  return null; } "	0	0	0	0	1	0
"private String getCVTermsString(List<CVTerm> cvterms){ String text = ""<hr>""; if (cvterms.size() > 0){ for (CVTerm term : cvterms){ if (term.isModelQualifier()){ text += String.format(""<p><b>%s : %s</b><br>"", term.getQualifierType(), term.getModelQualifierType()); } else if (term.isBiologicalQualifier()){ text += String.format(""<p><b>%s : %s</b><br>"", term.getQualifierType(), term.getBiologicalQualifierType()); }  Map<String, String> map = null; for (String rURI : term.getResources()){ map = getKeyAndId(rURI); text += String.format(""<span color=\""red\"">%s</span> (%s)<br>"", map.get(""id""), map.get(""key"")); text += MiriamResourceInfo.getInfoFromURI(link, rURI); } text += ""</p>""; } text += ""<hr>""; } return text; } "	0	0	0	0	1	0
"@Deprecated private String getAdditionalInformation(String r){ Map<String, String> map = getKeyAndId(r); String text = """"; String id = map.get(""id""); String key = map.get(""key""); String[] keyitems = key.split("":""); String item = keyitems[keyitems.length-1];  // Add chebi info if (item.equals(""obo.chebi"")){ try{ String[] tmps = id.split(""%3A""); String cid = tmps[tmps.length-1]; text += ""<img src=\""http://www.ebi.ac.uk/chebi/displayImage.do?defaultImage=true&imageIndex=0&chebiId=""+cid+""&dimensions=160\""></img>""; } catch (Exception e){ //e.printStackTrace(); logger.warn(""obo.chebi image not available""); }  // Add kegg info }else if (item.equals(""kegg.compound"")){ try{ String imgsrc = NamedSBaseInfoFactory.class.getClassLoader().getResource(""http://www.genome.jp/Fig/compound/""+id+"".gif"").toString(); text += ""<img src=\""""+imgsrc+""\""></img>""; } catch (Exception e){ //e.printStackTrace(); logger.warn(""kegg.compound image not available""); }  // TODO resize image and use KEGG  } return text; } "	0	0	0	0	1	0
"@Override public void onUpdate(ItemStack tool, World world, Entity entity, int itemSlot, boolean isSelected) { if(!isSelected || world.isRemote) { return; } if(entity instanceof EntityPlayer) { ItemStack stackInUse = ((EntityPlayer) entity).getActiveItemStack(); // ""same"" item if(stackInUse != null && !tool.getItem().shouldCauseBlockBreakReset(tool, stackInUse)) { return; } } ModifierTagHolder modtag = ModifierTagHolder.getModifier(tool, getModifierIdentifier()); Data data = modtag.getTagData(Data.class);  // fully charged if(data.charge >= 100) { return; }  // how far did we move? double dx = entity.posX - data.x; double dy = entity.posY - data.y; double dz = entity.posZ - data.z;  double dist = Math.sqrt(dx * dx + dy * dy + dz * dz); if(dist < 0.1f) { return; } else if(dist > 5f) { dist = 5f; } data.charge += dist * 2f;  // play sound when fully charged if(data.charge >= 100f) { TagUtil.setEnchantEffect(tool, true); // send only to the player that is charged if(entity instanceof EntityPlayerMP) { Sounds.PlaySoundForPlayer(entity, Sounds.shocking_charged, 1f, 0.8f + 0.2f * random.nextFloat()); } }  data.x = entity.posX; data.y = entity.posY; data.z = entity.posZ; modtag.save(); } "	0	0	0	0	1	0
"@Override public Dialog onCreateDialog(Bundle savedInstanceState) { //shop = savedInstanceState.getString(""shopName"");  // Use the Builder class for convenient dialog construction AlertDialog.Builder builder = new AlertDialog.Builder(getActivity()); // Get the layout inflater LayoutInflater inflater = getActivity().getLayoutInflater(); View rootView = inflater.inflate(R.layout.dialog_add_pantry_item, null); mEditTextItemName = (EditText) rootView.findViewById(R.id.edit_text_p_item_name); mNumberPickerQuantity = (NumberPicker) rootView.findViewById(R.id.pItemQuantityNumberPicker); mNumberPickerQuantity.setMinValue(1); mNumberPickerQuantity.setMaxValue(100); mNumberPickerQuantity.setValue(1);  mCheckbox = (CheckBox) rootView.findViewById(R.id.add_p_item_exp_checkbox); mCalendar = (CalendarView) rootView.findViewById(R.id.add_pitem_exp_calendarView); mCalendar.setVisibility(View.GONE); mCheckbox.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (mCheckbox.isChecked()) { mCalendar.setVisibility(View.VISIBLE); } else { mCalendar.setVisibility(View.GONE); } } });  /** * Call addShoppingList() when user taps ""Done"" keyboard action */ mEditTextItemName.setOnEditorActionListener(new TextView.OnEditorActionListener() { @Override public boolean onEditorAction(TextView textView, int actionId, KeyEvent keyEvent) { if (actionId == EditorInfo.IME_ACTION_DONE || keyEvent.getAction() == KeyEvent.ACTION_DOWN) { addItem(); } return true; } });  /* Inflate and set the layout for the dialog */ /* Pass null as the parent view because its going in the dialog layout*/ builder.setView(rootView) /* Add action buttons */ .setPositiveButton(R.string.positive_button_add_item, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int id) { addItem(); } });  return builder.create(); } "	0	0	0	0	1	0
"@Override public int purgePlayer(String playerName) { return util.deleteRows(TABLE, ""playerName"", playerName); } "	0	0	0	0	1	0
@Override public void removeKeyAt( PageCursor cursor, int pos, int keyCount ) { removeSlotAt( cursor, pos, keyCount, offsetKeyEnd, keySize ); } 	0	0	0	0	1	0
@Override public void exitOp(@NotNull WichParser.OpContext ctx) { int op = ctx.operator().start.getType(); ExprContext lExpr = ctx.expr(0); ExprContext rExpr = ctx.expr(1); //check if operand is valid if (lExpr.exprType == SymbolTable.INVALID_TYPE || rExpr.exprType == SymbolTable.INVALID_TYPE) { if (lExpr.exprType == SymbolTable.INVALID_TYPE) { error(lExpr.start, INVALID_OPERAND_ERROR, lExpr.getText()); } if (rExpr.exprType == SymbolTable.INVALID_TYPE) { error(rExpr.start, INVALID_OPERAND_ERROR, rExpr.getText()); } } else if (lExpr.exprType != null && rExpr.exprType != null) { ctx.exprType = SymbolTable.op(op, lExpr, rExpr); ctx.promoteToType = lExpr.promoteToType == null ? rExpr.promoteToType : lExpr.promoteToType; if (ctx.exprType == SymbolTable.INVALID_TYPE) { String left = lExpr.exprType.getName(); String operator = ctx.operator().getText(); String right = rExpr.exprType.getName(); error(ctx.start, INCOMPATIBLE_OPERAND_ERROR, left, operator, right); } } } 	0	0	0	0	1	0
"@Test public void testOnlyRegisteredSerialization() { TitanManagement mgmt = graph.openManagement(); PropertyKey time = mgmt.makePropertyKey(""time"").dataType(Integer.class).make(); PropertyKey any  = mgmt.makePropertyKey(""any"").dataType(Object.class).make(); mgmt.buildIndex(""byTime"",Vertex.class).addKey(time).buildCompositeIndex(); EdgeLabel knows = mgmt.makeEdgeLabel(""knows"").make(); VertexLabel person = mgmt.makeVertexLabel(""person"").make(); mgmt.commit();  TitanTransaction tx = graph.newTransaction(); TitanVertex v = tx.addVertex(""person""); v.property(VertexProperty.Cardinality.single, ""time"", 5); v.property(VertexProperty.Cardinality.single, ""any"", new Precision(5.0)); tx.commit();  tx = graph.newTransaction(); v = (Vertex)tx.V().has(""time"",5).next(); assertEquals(5.0, v.<Precision>value(""any"").doubleValue(),0.0); tx.rollback();  tx = graph.newTransaction(); v = tx.addVertex(""person""); v.property(VertexProperty.Cardinality.single, ""any"", TestEnum.One); //Should not be allowed try { tx.commit(); fail(); } catch (Exception e) {  }   } "	0	0	0	0	1	0
@Override public boolean accept(Match match) { return match.getRule().getName().equals(checkname); } 	0	0	0	0	1	0
@Override public boolean isItemValidForSlot(int slot, ItemStack itemstack) { return slot == SLOT_BUCKET ? itemstack.getItem() == Items.BUCKET : slot == SLOT_INPUT ? itemstack.getItem() == VoidCraft.items.quartzDust : false; } 	0	0	0	0	1	0
public void runInstall(@Nullable ConsoleView consoleView) { runCommand(NPM_COMMAND, getBasePath(), Arrays.asList(new String[]{INSTALL_COMMAND}), consoleView); } 	0	0	0	0	1	0
@Override public void accept(final EObject source, final URI sourceURI, final EReference eReference, final int index, final EObject targetOrProxy, final URI targetURI) { if (((this.currentResource == null) || (source.eResource() != this.currentResource))) { this.computeExportedObjectsMap(source); this.currentResource = source.eResource(); } this.accept(this.createReferenceDescription(sourceURI, targetURI, eReference, index, this.findExportedContainer(source))); } 	0	0	0	0	1	0
"public Result mediaList(Long folderId) { Folder folder = folderManager.findById(folderId);  if (!Secured.viewFolder(folder)) { return forbidden(""Dazu hast du keine Berechtigung""); } Folder rootFolder  = FolderManager.findRoot(folder); List<Media> mediaSet = folder.files; List<Folder> folderList = folder.folders;  return created(list.render(mediaSet, folderList, rootFolder.group.id)); } "	0	0	0	0	1	0
"@Transactional public Result authenticate() { Form<Login> loginForm = formFactory.form(Login.class).bindFromRequest(); String email = loginForm.data().get(""email""); String password = loginForm.data().get(""password"");  if (authenticationService.authenticate(email, password)) { authenticationService.login(session(), email); if (HttpUtils.isAjax()) { return ok(); } else { return redirect(controllers.gui.routes.Home.home()); } } else { if (HttpUtils.isAjax()) { return badRequest(MessagesStrings.INVALID_USER_OR_PASSWORD); } else { loginForm.reject(MessagesStrings.INVALID_USER_OR_PASSWORD); return badRequest(views.html.gui.auth.login.render(loginForm)); } } } "	0	0	0	0	1	0
public boolean isReadableRecord(Type type) { return extractReadableRecordType(type) != null; } 	0	0	0	0	1	0
public boolean isReadableArray(Type type) { return extractReadableArrayType(type) != null; } 	0	0	0	0	1	0
"private Type.Record checkIsRecordType(Type type) { Type.Record recT = types.extractReadableRecordType(type); if(recT == null) { throw new RuntimeException(""expected record type, got "" + type); } return recT; } "	0	0	0	0	1	0
@Override public UsersConnectionRepository getUsersConnectionRepository(ConnectionFactoryLocator connectionFactoryLocator) { return new JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator, Encryptors.noOpText()); } 	0	0	0	0	1	0
"public void testObjectArrayToString() throws IOException { assertEquals(""null"", JSONArray.toJSONString((Object[])null)); assertEquals(""[]"", JSONArray.toJSONString(new Object[0])); assertEquals(""[\""Hello\""]"", JSONArray.toJSONString(new Object[] { ""Hello"" })); assertEquals(""[\""Hello\"",12,[1,2,3]]"", JSONArray.toJSONString(new Object[] { ""Hello"", new Integer(12), new int[] { 1, 2, 3 } }));  StringWriter writer;  writer = new StringWriter(); JSONArray.writeJSONString((Object[])null, writer); assertEquals(""null"", writer.toString());  writer = new StringWriter(); JSONArray.writeJSONString(new Object[0], writer); assertEquals(""[]"", writer.toString());  writer = new StringWriter(); JSONArray.writeJSONString(new Object[] { ""Hello"" }, writer); assertEquals(""[\""Hello\""]"", writer.toString());  writer = new StringWriter(); JSONArray.writeJSONString(new Object[] { ""Hello"", new Integer(12), new int[] { 1, 2, 3} }, writer); assertEquals(""[\""Hello\"",12,[1,2,3]]"", writer.toString()); } "	0	0	0	0	1	0
"@Test public void testFindAssociatedFilesException() { Collection<String> extensions = Arrays.asList(""jpg"", ""pdf""); Collection<File> dirs = Arrays.asList(new File(""asdfasdf/asdfasdf"")); Set<File> results = FileFinder.findFiles(extensions, dirs);  assertEquals(0, results.size()); } "	0	0	0	0	1	0
"@Override public void uploadUserPhoto(MultipartFile uploading, String userEmail) { User user = userService.findUserByEmail(userEmail); if (user == null) throw new IllegalArgumentException(""Could not find User with "" + userEmail); File usersRootFolder = findByName(""Users"", APP_FOLDER_ID); if (usersRootFolder == null) usersRootFolder = createFolder(""Users"", APP_FOLDER_ID); File userFolder = findByName(userEmail, usersRootFolder.getId()); if (userFolder == null) userFolder = createFolder(userEmail, usersRootFolder.getId()); String fileName = uploading.getOriginalFilename(); checkIfExist(fileName, userFolder.getId()); fileName = new StringBuilder(TEMP).append(""/"").append(fileName).toString(); try { createTempCopy(fileName, uploading.getInputStream()); } catch (IOException e) { processGDE(""Could not obtain InputStream from "" + fileName); } File fileMetadata = getFileWithMetadata(uploading.getOriginalFilename(), userFolder.getId()); java.io.File content = new java.io.File(fileName); FileContent mediaContent = new FileContent(null, content); try { File file = driveService.files().create(fileMetadata, mediaContent).setFields(""id, parents"").execute(); user.setPhotoId(file.getId()); userService.saveAndFlush(user); content.delete(); } catch (Exception e) { processGDE(""Could not upload "" + fileName); } } "	0	0	0	0	1	0
@Override public boolean hasField(String name) { throw new UnsupportedOperationException(); } 	0	0	0	0	1	0
"@Test public void testOnlyHour() throws Exception { String[] testTexts = { ""wizyta u fryzjera  ,  teraz"", ""wizyta u fryzjera  ,  19:00"", ""wizyta u fryzjera  ,  19: 00"", ""wizyta u fryzjera  ,  19:0 "", ""wizyta u fryzjera  ,  19/  00"", ""wizyta u fryzjera  ,  19  0"", ""wizyta u fryzjera  ,  19 00"", ""wizyta u fryzjera  ,  o 19 00"", ""wizyta u fryzjera  ,  o 19"", ""wizyta u fryzjera  ,  o 19"", };   for (String testText : testTexts) { CalendarEvent e = this.ttce.interpret(testText); assertEquals(""wizyta u fryzjera"",e.title); assertEquals(e.getDay(), DAY); assertEquals(e.getMonth(), MONTH); assertEquals(e.getYear(), YEAR); assertEquals(e.getMinutes(), MINUTES); assertEquals(e.getHour(), HOUR ); } } "	0	0	0	0	1	0
"@Test public void testTomorrow() throws Exception { String[] testTexts = { ""wizyta u fryZjera  , 22 8 2016"", ""wizyta u fryZjera  , 22 sierpnia"", ""wizyta u fryZjera  , 22 "", ""wizyta u fryZjera  , jutro"", ""wizyta u fryZjera  , poniedzialek"", ""wizyta u fryZjera  , w poniedziałek"", ""wizyta u fryZjera  , ten poniedzialek"", ""wizyta u fryZjera  , za jeden dzien"", ""wizyta u fryZjera  , za 1 dzien"", };   for (String testText : testTexts) { CalendarEvent e = this.ttce.interpret(testText); assertEquals(""wizyta u fryzjera"",e.title); assertEquals(e.getDay(), new Integer(DAY + 1)); assertEquals(e.getMonth(), MONTH); assertEquals(e.getYear(), YEAR); assertEquals(e.getMinutes(), null); assertEquals(e.getHour(), null); } } "	0	0	0	0	1	0
@Test public void processInvadersShootTest() { SpaceInvader.FIRE_CHANCE = 1; level.processInvaders(); verify(invader, times(1)).shootBullet(); } 	0	0	0	0	1	0
public void processInvaders() { Direction direction = getNextDirection(); createMusic(soundFileMove); invaders.forEach(invader -> { invader.move(direction); invader.setView(invader.getNextImage()); if (Math.random() <= SpaceInvader.FIRE_CHANCE) { invader.shootBullet(); } }); } 	0	0	0	0	1	0
"public void createUfo() { if (Math.random() > Ufo.MOVE_EAST_CHANCE) { ufo = new Ufo(new Coordinate(0, 1), 1); } else { ufo = new Ufo(new Coordinate(Grid.WIDTH - 50, 1), 1); } Logger.log(LogLevel.INFO, Level.class, ""Created UFO""); } "	0	0	0	0	1	0
public void processUfo() { if (ufo == null && Math.random() < Ufo.SPAWN_CHANCE) { createUfo(); } else if (ufo != null) { if (ufo.canMove()) { ufo.move(ufo.getDirection()); createMusic(soundFileUfoMove); } else { ufo.destroy(); } } } 	0	0	0	0	1	0
"@Test public void testAllCompleteInTimeWithSingleResult() throws Exception { List<Provider> providers = new ArrayList<>(); IntStream.rangeClosed(1, 10).forEach(i -> providers.add(new MockProvider(200L, false, GroupProviderType.GROUPER))); ExternalGroupsService externalGroupsService = new ExternalGroupsService(providers); final List<Group> result = externalGroupsService.getMyGroups(""foo"", ""example.com""); assertTrue(result.size() == providers.size()); } "	0	0	0	0	1	0
"public void setAlarms(TaskData task, long timeDue){ alarmMgr = (AlarmManager)getContext().getSystemService(Activity.ALARM_SERVICE); Intent intent = new Intent(getContext(), ReminderBroadcastReceiver.class); intent.putExtra(""task_name"", task.title); intent.putExtra(""task_due"", task.dueOn); intent.putExtra(""task_assigner"", task.assigner); intent.putExtra(""task_id"", task.ID); alarmIntent = PendingIntent.getBroadcast(getContext(), task.ID, intent, PendingIntent.FLAG_UPDATE_CURRENT); if (Build.VERSION.SDK_INT < 19) { alarmMgr.set(AlarmManager.RTC_WAKEUP, timeDue, alarmIntent); } else { alarmMgr.setExact(AlarmManager.RTC_WAKEUP, timeDue, alarmIntent); } } "	0	0	0	0	1	0
"@Override public void onResponse(Call call, Response response) throws IOException { uploadCall.remove(call); boolean result = false; String jsonData = response.body().string(); try { // TODO: Change to Gson JSONObject Jobject = new JSONObject(jsonData); Log.d(""toJson"", Jobject.toString()); updateHistoryUploadedById(history.id); result = true; }catch (JSONException e) { Log.e(""toJson"", e.toString()); } EventBus.getDefault().post(new ResponseEvent(result, history.id, total, groupPosition, childPosition)); } "	0	0	0	0	1	0
"@EventHandler public void onPlayerJoin(PlayerJoinEvent e) { queObjects.add(new QueObject(e.getPlayer(), SQLTABLE.JOINS)); if (config.getBoolean(""auto_import"", true)) { new ImportProcessor(e.getPlayer(), playerVersion, queObjects).run(); } if (e.getPlayer().isOp() || e.getPlayer().hasPermission(""TotalTracker.updates"")) { scheduler.scheduleSyncDelayedTask(this, () -> { if (e != null && e.getPlayer() != null) e.getPlayer().sendMessage(genVersionOutdatedMessage(updateStatus.LocalVersion, updateStatus.RemoteVersion)); }, (20 * 60) * 2); } checkQue(); } "	0	0	0	0	1	0
private FSDataInputStream updateCache(String filePath) { FSDataInputStream fileChannel = fileNameAndStreamCache.get(filePath); try { if (null == fileChannel) { Path pt = new Path(filePath); FileSystem fs = pt.getFileSystem(new Configuration()); fileChannel = fs.open(pt); fileNameAndStreamCache.put(filePath, fileChannel); } } catch (IOException e) { LOGGER.error(e, e.getMessage()); } return fileChannel; } 	0	0	0	0	1	0
"@Test public void testMain() { PrintStream out = System.out;  ByteArrayOutputStream baos = null; PrintStream ps = new PrintStream(baos = new ByteArrayOutputStream()); System.setOut(ps);  UniversalRandom.main(null);  System.setOut(out);  String output = baos.toString(); String[] lines = output.split(""\n"");  Arrays.stream(lines).forEach(System.out::println);  String[] expected = { ""e = 83200"", ""x = 0"", ""x = 26"", ""x = 14"", ""x = 15"", ""x = 38"", ""x = 47"", ""x = 13"", ""x = 9"", ""x = 15"", ""x = 31"", ""x = 6"", ""x = 3"", ""x = 0"", ""x = 21"", ""x = 45"", ""d = 0.945"", ""d = 0.2426"", ""d = 0.5214"", ""d = 0.0815"", ""d = 0.0988"", ""d = 0.5497"", ""d = 0.4013"", ""d = 0.4559"", ""d = 0.5415"", ""d = 0.2381"" };  IntStream.range(0, expected.length).forEach(i -> assertEquals(lines[i], expected[i])); } "	0	0	0	0	1	0
"private boolean markupImage(Markup.MarkupRequest markupRequest) throws Exception { log.info(""[Markup Request #{}] Source: '{}' Destination: '{}'."", markupRequest.getRequestId(), markupRequest.getSourceUri(), markupRequest.getDestinationUri()); BoundingBoxWriter writer = new BoundingBoxWriter(); writer.setSourceMedium(URI.create(markupRequest.getSourceUri())); writer.setDestinationMedium(URI.create(markupRequest.getDestinationUri()));  BoundingBoxMap map = new BoundingBoxMap(); int boxesAdded = 0; for(Markup.BoundingBoxMapEntry boundingBoxMapEntry : markupRequest.getMapEntriesList()) { BoundingBox boundingBox = new BoundingBox( boundingBoxMapEntry.getBoundingBox().getX(), boundingBoxMapEntry.getBoundingBox().getY(), boundingBoxMapEntry.getBoundingBox().getWidth(), boundingBoxMapEntry.getBoundingBox().getHeight(), boundingBoxMapEntry.getBoundingBox().getColorArgb()); map.putOnFrame(boundingBoxMapEntry.getFrameNumber(), boundingBox); boxesAdded++; }  log.info(""[Markup Request #{}] Marking up {} tracks on '{}'."", markupRequest.getRequestId(), markupRequest.getMapEntriesCount(), markupRequest.getDestinationUri()); if(boxesAdded > 0) { writer.setBoundingBoxMap(map); writer.markupImage(); }  return boxesAdded > 0; } "	0	0	0	0	1	0
"@Test public void testGetAPIResultsForQualityGates() throws JSONException, QGException { QualityGatesStatus qualityGatesStatus = new QualityGatesStatus(""OK""); doReturn("""").when(globalConfigDataForSonarInstance).getName(); doReturn("""").when(globalConfigDataForSonarInstance).getUsername(); doReturn("""").when(globalConfigDataForSonarInstance).getPassword(); doReturn("""").when(globalConfigDataForSonarInstance).getSonarUrl(); doReturn("""").when(jobConfigData).getProjectKey(); doReturn("""").when(sonarHttpRequester).getAPIInfo(any(JobConfigData.class), any(GlobalConfigDataForSonarInstance.class)); doReturn(globalConfigDataForSonarInstance).when(sonarInstanceValidationService).validateData(globalConfigDataForSonarInstance); doReturn(qualityGatesStatus).when(qualityGateResponseParser).getQualityGateResultFromJSON(anyString());  assertEquals(qualityGatesStatus, qualityGatesProvider.getAPIResultsForQualityGates(jobConfigData, globalConfigDataForSonarInstance)); } "	0	0	0	0	1	0
"@Test public void testPar2FlatMapDsc() { Task<?> task = Task.par(Task.value(1), Task.value(2)).flatMap(""test"", (a, b) -> Task.value(a + b));  runAndWait(""TestTaskFactoryMethods.testPar2FlatMapDsc"", task); assertEquals((int)task.get(), 1 + 2);  assertEquals(countTasks(task.getTrace()), 2 + 3 + 2); } "	0	0	0	0	1	0
"@Test public void testPar2Dsc() { Task<?> task = Task.par(Task.value(1), Task.value(2)).map(""test"", (a, b) -> a + b);  runAndWait(""TestTaskFactoryMethods.testPar2Dsc"", task); assertEquals((int)task.get(), 1 + 2);  assertEquals(countTasks(task.getTrace()), 2 + 1 + 2); } "	0	0	0	0	1	0
"public static String encodeUrlPath(String url) { if (url != null && url.length() != 0) { int slash = url.lastIndexOf('/'); String parentPart = """"; if (slash != -1) { parentPart = encodeUrlPath(url.substring(0, slash)) + '/'; } return parentPart + encodeUrl(url.substring(slash + 1)); } return url; } "	0	0	0	0	1	0
public static void send(Collection<? extends PlainCommand> commands) throws IOException { send(commands, false); } 	0	0	0	0	1	0
"public static ConsListBuild create(IStrategoAppl t, FrameDescriptor fd) { assert Tools.hasConstructor(t, ""ListTail"", 2); TermBuild headNode = TermBuild.create(Tools.applAt(t, 0), fd); TermBuild tailNode = TermBuild.create(Tools.applAt(t, 1), fd);  return ConsListBuildNodeGen.create( SourceSectionUtil.fromStrategoTerm(t), headNode, tailNode); } "	0	0	0	0	1	0
private NodeRef createTempNode(NodeRef siteNodeRef, String name, byte[] content) { NodeRef reportsFolderNodeRef = this.getUtils().getOrCreateFolderByPath(siteNodeRef, Collections.singletonList(SIZE_REPORTS_FOLDER_NAME)); UCMContentImpl ucmContent = new UCMContentImpl(content, XLS_MIMETYPE, null); return this.getUtils().createContentNode(reportsFolderNodeRef, name, ucmContent, ContentModel.TYPE_CONTENT); } 	0	0	0	0	1	0
public static int getOreGenWeight(World aWorld, int aDimensionType, boolean tAsteroid) { return getOreGenData(aWorld, aDimensionType, tAsteroid).weight; } 	0	0	0	0	1	0
"private int getShaderProgram(GL20 gl, Class<?> type, String string) { App.app.debug(""Shader"", ""Called getShaderProgram() for type "" + type.getName()); Integer shader = null;  if (type == ChunksFragmentShader.class) shader = gl.glCreateShader(GL20.GL_FRAGMENT_SHADER);  else if (type == ChunksVertexShader.class) shader = gl.glCreateShader(GL20.GL_VERTEX_SHADER);  gl.glShaderSource(shader, string); gl.glCompileShader(shader);  //		if (!App.gl.glGetShaderParameterb(shader, GL20.GL_COMPILE_STATUS)) //		{ //			Log.error(App.gl.getShaderInfoLog(shader)); //			return null; //		}  return shader; } "	0	0	0	0	1	0
"private static JSONArray genes(Patient patient, int includedTopGenes, Logger logger) { PatientGenotype genotype = new PatientGenotype(patient);  JSONArray genes = new JSONArray(); try { Collection<String> candidateGeneNames; //Collection<String> candidateGeneNames = getPatientCandidateGeneNames(patient); if (includedTopGenes <= 0) { candidateGeneNames = genotype.getCandidateGenes(); } else { final Map<String, Double> genesWithScore = new HashMap<String,Double>(); Collection<String> allGenes = genotype.getGenes(); for (String gene : allGenes) { genesWithScore.put(gene, genotype.getGeneScore(gene)); } Set<String> set = genesWithScore.keySet(); List<String> keys = new ArrayList<String>(set); Collections.sort(keys, new Comparator<String>() { public int compare(String s1, String s2) { return Double.compare(genesWithScore.get(s1), genesWithScore.get(s2)); } }); List<String> topGenes = keys.subList(0, includedTopGenes); candidateGeneNames = new HashSet<String>(); for (String topGene : topGenes) { candidateGeneNames.add(topGene); } }  for (String geneName : candidateGeneNames) { JSONObject nextGene = new JSONObject(); nextGene.put(ApiConfiguration.JSON_GENES_GENENAME, geneName); nextGene.put(ApiConfiguration.JSON_GENES_ASSEMBLY, ""GRCh37""); // TODO: pull from candidate genes/patient/vcf? genes.add(nextGene); } } catch (Exception ex) { logger.error(""Error getting candidate genes for patient [{}]: [{}]"", patient.getId(), ex); return new JSONArray(); } return genes; } "	0	0	0	0	1	0
private void addFamilyOrColumn(Delete delete, HBaseColumn col, Schema fieldSchema) { switch (fieldSchema.getType()) { case UNION: int index = getResolvedUnionIndex(fieldSchema); Schema resolvedSchema = fieldSchema.getTypes().get(index); addFamilyOrColumn(delete, col, resolvedSchema); break; case MAP: case ARRAY: delete.addFamily(col.family); break; default: delete.addColumn(col.family, col.qualifier); break; } } 	0	0	0	0	1	0
@Override public void displayGeneratedQuestions(List<TestQuestion> testQuestions) { completedQuestionsList.removeAllItems();  completedLearningContentsList.addItems(testQuestions);  triggerActionButtonsEnabledState(); } 	0	0	0	0	1	0
@Override public void handleComment( final char[] buffer, final int contentOffset, final int contentLen, final int outerOffset, final int outerLen, final int line, final int col) throws TextParseException {  this.filterTexts = false;  /* * FIRST STEP: Quickly determine if we actually need to do anything with this comment. We will process * every comment which has any of the shapes: [#...], [/...], [(...)] or [[...]]. * If we determine that a comment is not processable, we will output it as mere text. */  if (!isCommentProcessable(buffer, contentOffset, contentLen)) { super.handleText(buffer, outerOffset, outerLen, line, col); return; }   /* * SECOND STEP: If these comments are here just wrapping an element, unwrap such element. */  final int maxi = contentOffset + contentLen;  if (TextParsingElementUtil.isOpenElementStart(buffer, contentOffset, maxi)) { // This might be an open / standalone element, let's check how it ends  if (TextParsingElementUtil.isElementEnd(buffer, maxi - 2, maxi, true)) { // It's a standalone element  TextParsingElementUtil.parseStandaloneElement(buffer, contentOffset, contentLen, line, col + 2, getNext()); return;  } else if (TextParsingElementUtil.isElementEnd(buffer, maxi - 1, maxi, false)) { // It's an open element  TextParsingElementUtil.parseOpenElement(buffer, contentOffset, contentLen, line, col + 2, getNext()); return;  }  } else if (TextParsingElementUtil.isCloseElementStart(buffer, contentOffset, maxi)) { // Seems we may have an element being closed here...  if (TextParsingElementUtil.isElementEnd(buffer, maxi - 1, maxi, false)) { // It's a standalone element  TextParsingElementUtil.parseCloseElement(buffer, contentOffset, contentLen, line, col + 2, getNext()); return;  }  }   /* * FINAL STEP: At this point, we know it's an expression, not an element. So we will not be modifying the *             content of the comment (the expression itself, such as '[[${someVar}]]' or '[(${someVar})], but *             we will be removing the rest of the line (or more correctly the rest of the structure the *             comment is in). */  getNext().handleText(buffer, contentOffset, contentLen, line, col); this.filterTexts = true;  } 	0	0	0	0	1	0
@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); mAdapter = new AudioBrowserListAdapter(getActivity(), AudioBrowserListAdapter.ITEM_WITHOUT_COVER); mAdapter.addAll(MediaLibrary.getInstance().getPlaylistDbItems()); mTracks = getArguments().getParcelableArrayList(KEY_TRACKS); mNewTrack = getArguments().getParcelableArrayList(KEY_NEW_TRACKS); } 	0	0	0	0	1	0
@Test public void testAnonymousClassAsToolDefault() throws Exception { final TrimmingFunction anonymous = new TrimmingFunction() { @Override protected void fillTrimPoints(GATKRead read, int[] toFill) { // do nothing } };  final TrimmerPluginDescriptor pluginDescriptor = new TrimmerPluginDescriptor(Collections.singletonList(anonymous));  // test all instances is empty Assert.assertTrue(pluginDescriptor.getAllInstances().isEmpty());  // test that default instances are not final List<TrimmingFunction> defaultInsances = pluginDescriptor.getDefaultInstances(); Assert.assertEquals(defaultInsances.size(), 1); Assert.assertSame(defaultInsances.get(0), anonymous); } 	0	0	0	0	1	0
@Test public void testWholeValidJson() {  // Validate JSON ProbeDTO validatedObject = validator.validate(validJsonString);  // Assert cases assertEquals(fullProbeData.getProbeAuthId(), validatedObject.getProbeAuthId()); for (MeasurementDTO m : fullProbeData.getMeasurements()) { assertEquals(m.getLat(), validatedObject.getMeasurements() .get(fullProbeData.getMeasurements().indexOf(m)).getLat()); assertEquals(m.getLng(), validatedObject.getMeasurements() .get(fullProbeData.getMeasurements().indexOf(m)).getLng()); assertEquals(m.getCompletedOn(), validatedObject.getMeasurements() .get(fullProbeData.getMeasurements().indexOf(m)).getCompletedOn()); assertEquals(m.getDownloadSpeed(), validatedObject.getMeasurements() .get(fullProbeData.getMeasurements().indexOf(m)).getDownloadSpeed()); assertEquals(m.getUploadSpeed(), validatedObject.getMeasurements() .get(fullProbeData.getMeasurements().indexOf(m)).getUploadSpeed()); } } 	0	0	0	0	1	0
"@Test public void testCreateCustomIntent() { BoxingConfig pickerConfig = new BoxingConfig(BoxingConfig.Mode.MULTI_IMG).needCamera(); Uri destUri = new Uri.Builder() .scheme(""file"") .appendPath(""test"") .appendPath(String.format(Locale.US, ""%s.jpg"", System.currentTimeMillis())) .build(); BoxingCropOption cropOptions = new BoxingCropOption(destUri); ArrayList<ImageMedia> medias = new ArrayList<>(); medias.add(new ImageMedia(""test"", ""test"")); medias.add(new ImageMedia(""test1"", ""test1"")); pickerConfig.withCropOption(cropOptions);  Intent intent = Boxing.of(pickerConfig).withIntent(mContext, BoxingActivity.class, medias).getIntent(); assertNotNull(intent);  BoxingConfig config = BoxingManager.getInstance().getBoxingConfig(); assertNotNull(config); assertEquals(config.getMode(), BoxingConfig.Mode.MULTI_IMG); assertEquals(config.isNeedCamera(), true); assertEquals(config.isNeedGif(), false); BoxingCropOption cropOptionsResult = pickerConfig.getCropOption(); assertEquals(cropOptions, cropOptionsResult); ArrayList<BaseMedia> list = intent.getParcelableArrayListExtra(Boxing.EXTRA_SELECTED_MEDIA); assertEquals(list, medias);  } "	0	0	0	0	1	0
"@Override public void onClick(View view) { Toast.makeText(view.getContext(), ""Clicked Camera"", Toast.LENGTH_LONG).show(); } "	0	0	0	0	1	0
private void instantiateMapBox(Bundle savedInstanceState) { // Set the map center and zoom to the saved values or use the default values getUserLocation(); CameraPosition.Builder cameraBuilder = new CameraPosition.Builder(); if (savedInstanceState == null) { cameraBuilder.target((FlavorUtils.isStore() && lastLocation != null) ? new LatLng(lastLocation) : configManager.getDefaultCenter()) .zoom(configManager.getDefaultZoom()); } else { cameraBuilder.target((LatLng) savedInstanceState.getParcelable(LOCATION)) .zoom(savedInstanceState.getFloat(ZOOM_LEVEL)); }  mapboxMap.setCameraPosition(cameraBuilder.build()); getUserLocation(); eventBus.post(new PleaseInitializeArpiEvent()); presenter.setForceRefreshPoi(); presenter.setForceRefreshNotes(); presenter.loadPoisIfNeeded(); eventBus.post(new PleaseInitializeNoteDrawerEvent(displayOpenNotes, displayClosedNotes)); if (poiTypePickerAdapter != null) { poiTypePickerAdapter.setExpertMode(sharedPreferences.getBoolean(getString(R.string.shared_prefs_expert_mode), false)); } switchMode(MapMode.DEFAULT); mapboxListener.listen(mapboxMap, mapView);  mapboxMap.getMarkerViewManager().addMarkerViewAdapter(new LocationMarkerViewAdapter(getActivity())); } 	0	0	0	0	1	0
"public static long getContentLength(final URI uri, final Credentials credentials) throws IOException { if (isFile(uri)) { return new RandomAccessFile(uri.getPath(), ""r"").length(); } final URLConnection connection = openConnection(uri, credentials); return connection.getContentLength(); } "	0	0	0	0	1	0
Drawable getIconDrawable() { if (mIconDrawable != null) { return mIconDrawable; } else if (mIcon != 0) { return getResources().getDrawable(mIcon); } else { return new ColorDrawable(Color.TRANSPARENT); } } 	0	0	0	0	1	0
"private boolean shouldChangePose(String posename, Race newrace, Race oldrace, Pose current, int currenttier, int futuretier) { boolean future = false; boolean past = false;    // Change pose if we have specific next pose for(Pose p : newrace.getPoses(posename)) if(p.tags.contains(""tier "" + futuretier) && p != current) future = true;  // Current doesn't contain pose for next tier if(current.tags.contains(""tier "" + currenttier) && !current.tags.contains(""tier "" + futuretier)) past = true;  // Forbidden from the future tier if(current.tags.contains(""notier "" + futuretier)) past = true;  // We have a specific pose and current doesn't contain the required pose if(future && !current.tags.contains(""tier "" + futuretier)) past = true;  // Random chance if(future && this.random.nextDouble() < 0.075) past = true;  if(oldrace != newrace) past = true;    return past; } "	0	0	0	0	1	0
public static JRubyAsciidoctor create(List<String> loadPaths, String gemPath) { return processRegistrations(createJRubyAsciidoctorInstance(null, loadPaths, null, gemPath)); } 	0	0	0	0	1	0
public ScheduledFuture<?> acquirePermit() throws InterruptedException { permits.acquire(); return TIMER.schedule(permits::release, releaseDelay, timeUnit); } 	0	0	0	0	1	0
public void set(String property, Object value) throws UnsupportedOperationException { if (Arrays.asList(mReadOnlyPropertyList).contains(property)) { throw new UnsupportedOperationException(); } mProperties.put(property, value); } 	0	0	0	0	1	0
"public void setLoggedIn() { (new Thread(new Runnable() { public void run() { String user = null; try { user = mrt.getAuth().getUser(); } catch (IOException e) { logger.warning(""Something went wrong while getting the username.""); setLoginError(""<html>Something went wrong. <br>Please try logging in again.</html>""); } if (user == null) { setLoginError(""<html>Incorrect E-Mail or<br>password.</html>""); } else { setLoginSuccess(""Logged in as "" + user + ""!""); } } })).start(); } "	0	0	0	0	1	0
"private JSONObject gapi_share_with(String fileid, String email) { try { JSONObject meta = new JSONObject(); meta.put(""type"", ""user""); meta.put(""value"", email); meta.put(""role"", ""reader""); String metajson = meta.toJSONString();  URL url = new URL(""https://www.googleapis.com/drive/v2/files/"" + fileid + ""/permissions""); HttpURLConnection con = gapi_connect(url, ""POST"", mAccessToken); con.setRequestProperty(""Content-Type"", ""application/json""); con.setRequestProperty(""Content-Length"", String.valueOf(metajson.length()));  OutputStreamWriter writer = new OutputStreamWriter(con.getOutputStream()); writer.write(metajson); writer.flush(); writer.close();  if (con.getResponseCode() != HttpURLConnection.HTTP_OK) return null; String json = Utils.readStream(con.getInputStream()); return (JSONObject) JSONValue.parse(json); } catch (IOException e) { log.log(Level.FINE, ""exception: "" + e.getMessage()); return null; } } "	0	0	0	0	1	0
"private void aikumafy_update_properties(String fileid, String path) { log.log(Level.FINE, ""updating: "" + path); JSONObject meta = new JSONObject(); if (path != ""/"") { File f = new File(path); String parentId = mkdir(f.getParent()); JSONArray parents = new JSONArray(); JSONObject parent = new JSONObject(); parent.put(""id"", parentId); parents.add(parent); meta.put(""parents"", parents); meta.put(""title"", f.getName()); } meta.put(""properties"", getProp(mRootId, path)); log.log(Level.FINE, ""setting properties for "" + fileid + "": "" + meta.toString()); gapi_update_metadata(fileid, meta); } "	0	0	0	0	1	0
@Override public void onClick(View v) { startActivity(new Intent(WelcomeActivity.this, MainActivity.class)); } 	0	0	0	0	1	0
private String[][] getContent(ListView<?> listView) { int nItems = listView.getItems().size(); String[][] content = new String[1][nItems]; for (int i = 0; i < nItems; i++) { content[0][i] = getListCellValue(listView, i); } return content; } 	0	0	0	0	1	0
"public XmppConnection getPuppetConnection(TgUser tgUser) throws UnableToConnectException { XmppConnection connection = tgUser.getPuppetConnection(); if (null != connection && connection.isConnected()) { return connection; } else { log.warn(""Puppet connection for {} is not connected, removing""); tgUser.cleanAndDisconnectPuppet(); }  XmppConnectionFactory factory = JateBot.getXmppFactory(); try { factory.connectTgUser(tgUser); connection = tgUser.getPuppetConnection(); } catch (UnableToConnectException e) { log.warn(""Unable to connect user {}"", tgUser.getUser(), e); try { factory.connectBot(JateBot.getResources().getActiveUsers().getBot(), tgUser); connection = tgUser.getPuppetConnection(); } catch (UnableToConnectException w) { log.warn(""Unable to connect user {}, donored by bot"", tgUser.getUser(), w); try { connection = resources.getActiveUsers().getBot().getXmppConnection(); } catch (UnableToConnectException s) { log.warn(""Unable to connect even main user"", s); w.addSuppressed(e); s.addSuppressed(w); throw s; } } } return connection; } "	0	0	0	0	1	0
@Override public void onComplete() { parent.combine(null, index); } 	0	0	0	0	1	0
@Override public void onNext(T t) { parent.combine(t, index); } 	0	0	0	0	1	0
"@Test public void checkSpringBootVersion() throws Exception { CommandController controller = uiTestHarness .createCommandController(SetupProjectCommand.class, project.getRoot()); controller.initialize(); // Checks the command metadata assertTrue(controller.getCommand() instanceof SetupProjectCommand); SetupProjectCommand springBootCommand = (SetupProjectCommand) controller.getCommand(); if (System.getenv(""SPRING_BOOT_DEFAULT_VERSION"") != null) { assertEquals(""1.5.1"", controller.getValueFor(""springBootVersion"")); } else { controller.getValueFor(""springBootVersion""); assertEquals(""1.5.3"", controller.getValueFor(""springBootVersion"")); } } "	0	0	0	0	1	0
"@Override public void onBindViewHolder(GalleryViewHolder holder, int position) { final GalleryViewHolder galleryViewHolder = (GalleryViewHolder)holder; final Media media = mediaItems.get(position); galleryViewHolder.playButton.setVisibility(View.GONE);  if (validExt.contains(media.ext)){ String imageUrl = ChanUrls.getThumbnailUrl(boardName, media.fileName); networkHelper.getImageNoCrossfade(galleryViewHolder.galleryImage, imageUrl);  galleryViewHolder.galleryImage.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { DeepZoom deepZoom = new DeepZoom().newInstance(boardName, media.fileName, media.ext); FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction(); fragmentTransaction.replace(R.id.placeholder_card, deepZoom).addToBackStack(""deepzoom"").commit(); } }); } else { if (media.ext.equals("".webm"")){ String imageUrl = ChanUrls.getThumbnailUrl(boardName, media.fileName); networkHelper.getImageNoCrossfade(galleryViewHolder.galleryImage, imageUrl); galleryViewHolder.playButton.setVisibility(View.VISIBLE);  galleryViewHolder.playButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Uri uri = Uri.parse(ChanUrls.getImageUrl(boardName, media.fileName, media.ext)); Intent intent = new Intent(Intent.ACTION_VIEW); intent.setDataAndType(uri, ""video/webm""); galleryViewHolder.itemView.getContext().startActivity(intent); } }); } else if (media.ext.equals("".mp4"")) { String imageUrl = ChanUrls.getThumbnailUrl(boardName, media.fileName); networkHelper.getImageNoCrossfade(galleryViewHolder.galleryImage, imageUrl); galleryViewHolder.playButton.setVisibility(View.VISIBLE);  galleryViewHolder.playButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Uri uri = Uri.parse(ChanUrls.getImageUrl(boardName, media.fileName, media.ext)); Intent intent = new Intent(Intent.ACTION_VIEW); intent.setDataAndType(uri, ""video/mp4""); galleryViewHolder.itemView.getContext().startActivity(intent); } }); } } } "	0	0	0	0	1	0
public void onPause() { removeView(previewStrategy.getWidget()); submitTask(new SerializedAsyncTask<Void>() { @Override protected void onPreMain() { cameraReady = false; }  @Override protected Void onRunBackground() { if (camera != null) { previewDestroyed(); } return null; }  @Override protected void onPostMain(Void avoid) { onOrientationChange.disable(); previewSize = null; displayOrientation = -1; outputOrientation = -1; cameraId = -1; lastPictureOrientation = -1; } }); } 	0	0	0	0	1	0
@Override protected void onWait() { synchronized (CameraView.this) { while (camera == null || previewSize == null) { Util.wait(CameraView.this, 0); } } } 	0	0	0	0	1	0
"@Override public void onBindViewHolder(CartViewHolder cartViewHolder, int i) { CartItem s  = cartList.get(i); cartViewHolder.title.setText(s.getItem().getName()); if (s.getItem().getBarcode() != null){ cartViewHolder.barcode.setText(s.getItem().getBarcode()); } else { cartViewHolder.barcode.setText(""""); }  cartViewHolder.quantity.setText(s.getQty());  DecimalFormat df = new DecimalFormat(""0.00""); cartViewHolder.basePrice.setText(df.format(s.getBasePrice())); } "	0	0	0	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);  setContentView(R.layout.activity_game_setup);  Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); getSupportActionBar().setDisplayHomeAsUpEnabled(true); // Create the adapter that will return a fragment for each of the three // primary sections of the activity. mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());  // Set up the ViewPager with the sections adapter. mViewPager = (ViewPager) findViewById(R.id.setupViewPager); mViewPager.setAdapter(mSectionsPagerAdapter);  //SmartTabLayout viewPagerTab = (SmartTabLayout) findViewById(R.id.smartTab); //viewPagerTab.setViewPager(mViewPager);  Button createGameDisplay= (Button) findViewById(R.id.createGameDisplay); createGameDisplay.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Game game = getGameFromSetup();  // store game to database GameDbAdapter gameDbAdapter = new GameDbAdapter(getBaseContext()); gameDbAdapter.open(); Game newGame = gameDbAdapter.createGame(game); gameDbAdapter.close();  // Start Game Display Activity Intent intent = new Intent(v.getContext(),GameDisplayActivity.class); intent.putExtra(MainMenuActivity.GAME_ID_EXTRA,newGame.getId()); startActivity(intent); } });  } 	0	0	0	0	1	0
"@Test public void findBusSchedulesByBusLineInfo_LineIdAndAndWeekdayHolidayTest() { ArrayList<BusSchedule> list = busScheduleRepository.findBusSchedulesByBusLineInfo_LineIdAndAndWeekdayHoliday(""JEB405134502"", WeekdayHoliday.weekday);  for (BusSchedule schedule : list) { System.out.println(schedule.getScheduleNo()); System.out.println(schedule.getWeekdayHoliday()); System.out.println(schedule.getDepartureTime()); } } "	0	0	0	0	1	0
"public void start(Stage stage) { Logger.logInfo(""Game started"");  FXMLLoader loader = new FXMLLoader(); loader.setLocation(GUI.class.getResource(""/assets/config/gui.fxml""));  BorderPane borderPane = new BorderPane(); Scene scene = new Scene(borderPane, WINDOW_X, WINDOW_Y);  scoreLabel = new Label(""Score: ""); scoreLabel.setFont(new Font(""Arial"", 22));  errorLabel = new Label(""""); errorLabel.setFont(new Font(""Arial"", 22));  boardPane = new BoardPane(); HBox hbox = addScorePanel();  HBox errorPanel = addErrorPanel();  borderPane.setTop(hbox); borderPane.setCenter(boardPane.getBoardPane()); borderPane.setBottom(errorPanel);  // Properties of the stage stage.setTitle(""SwekJeweld""); stage.setResizable(false); stage.centerOnScreen(); stage.setScene(scene); stage.show();  Logger.logInfo(""Game succesfully initialized""); } "	0	0	0	0	1	0
"@Override public void collision(Collision col) { if (!gracePeriod) { playSound(col.getSoundEffect()); col.getEffect().apply(0); LOGGER.info(""-- Protagonist() > Protagonist is hit by enemy bullet and loses life ""); } } "	0	0	0	0	1	0
"@Override public void store(MultipartFile file) { try { if (file.isEmpty()) { throw new StorageException(""Failed to store empty file "" + file.getOriginalFilename()); } Files.delete(rootLocation.resolve(file.getOriginalFilename())); Files.copy(file.getInputStream(), this.rootLocation.resolve(file.getOriginalFilename())); } catch (IOException e) { throw new StorageException(""Failed to store file "" + file.getOriginalFilename(), e); } } "	0	0	0	0	1	0
private void query(String query, String operationName, Map<String, Object> variables, GraphQLSchema schema, HttpServletRequest req, HttpServletResponse resp, GraphQLContext context) throws IOException { if (operationName != null && operationName.isEmpty()) { query(query, null, variables, schema, req, resp, context); } else if (Subject.getSubject(AccessController.getContext()) == null && context.getSubject().isPresent()) { Subject.doAs(context.getSubject().get(), (PrivilegedAction<Void>) () -> { try { query(query, operationName, variables, schema, req, resp, context); } catch (IOException e) { throw new RuntimeException(e); } return null; }); } else { List<GraphQLServletListener.OperationCallback> operationCallbacks = runListeners(l -> l.onOperation(context, operationName, query, variables));  final ExecutionResult executionResult = newGraphQL(schema).execute(query, operationName, context, transformVariables(schema, query, variables)); final List<GraphQLError> errors = executionResult.getErrors(); final Object data = executionResult.getData();  final String response = mapper.writeValueAsString(createResultFromDataAndErrors(data, errors));  resp.setContentType(APPLICATION_JSON_UTF8); resp.setStatus(STATUS_OK); resp.getWriter().write(response);  if(errorsPresent(errors)) { runCallbacks(operationCallbacks, c -> c.onError(context, operationName, query, variables, data, errors)); } else { runCallbacks(operationCallbacks, c -> c.onSuccess(context, operationName, query, variables, data)); }  runCallbacks(operationCallbacks, c -> c.onFinally(context, operationName, query, variables, data)); } } 	0	0	0	0	1	0
"@Test public void test3() { JSONObject object = restaurant.getRes("""", ""seattle"",47.6638866,-122.31430569999999,2000,""food"",1,1,""best_match"",""1,2,3"",false,""default""); System.out.println(object.toString()); } "	0	0	0	0	1	0
"public static String alertCommandNotSupported() { StringBuilder out = new StringBuilder(); print(out, ""alert/commandNotSupported.html""); return out.toString(); } "	0	0	0	0	1	0
"public static String alertIndexingError() { StringBuilder out = new StringBuilder(); print(out, ""alert/indexingError.html""); return out.toString(); } "	0	0	0	0	1	0
public void disableOnClickEvents() { mOnMarkerClickListener = marker -> true; } 	0	0	0	0	1	0
"@Override public String visit(ClassOrInterfaceType type, Void v) { String typeName = type.getName(); String name = resolve(typeName); if (name == null) { // could be defined in the same stub file return ""L"" + typeName + "";""; } return ""L"" + PluginUtil.join(""/"", name.split(""\\."")) + "";""; } "	0	0	0	0	1	0
"@SuppressWarnings(""unused"") protected void handleInstallResponseOk(RaftMemberContext member, InstallRequest request, InstallResponse response) { // Reset the member failure count and update the member's status if necessary. succeedAttempt(member);  // If the install request was completed successfully, set the member's snapshotIndex and reset // the next snapshot index/offset. if (request.complete()) { member.setNextSnapshotIndex(0); member.setNextSnapshotOffset(0); member.setNextIndex(request.snapshotIndex() + 1); } // If more install requests remain, increment the member's snapshot offset. else { member.setNextSnapshotOffset(request.chunkOffset() + 1); }  // Recursively append entries to the member. appendEntries(member); } "	0	0	0	0	1	0
"public static void openFile(Path file) throws Exception { String fileType = ""."" + FilenameUtils.getExtension(file.getFileName().toString()); String abs = file.toAbsolutePath().toString();  if (StringUtils.isNotBlank(Globals.settings.getMediaPlayer()) && Globals.settings.getAllSupportedFileTypes().contains(fileType)) { if (SystemUtils.IS_OS_MAC_OSX) { Runtime.getRuntime().exec(new String[] { ""open"", Globals.settings.getMediaPlayer(), ""--args"", abs }); } else { Runtime.getRuntime().exec(new String[] { Globals.settings.getMediaPlayer(), abs }); } } else if (SystemUtils.IS_OS_WINDOWS) { // use explorer directly - ship around access exceptions and the unresolved network bug // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6780505 Runtime.getRuntime().exec(new String[] { ""explorer"", abs }); } else if (SystemUtils.IS_OS_LINUX) { // try all different starters boolean started = false; try { Runtime.getRuntime().exec(new String[] { ""xdg-open"", abs }); started = true; } catch (IOException e) { }  if (!started) { try { Runtime.getRuntime().exec(new String[] { ""kde-open"", abs }); started = true; } catch (IOException e) { } }  if (!started) { try { Runtime.getRuntime().exec(new String[] { ""gnome-open"", abs }); started = true; } catch (IOException e) { } }  if (!started && Desktop.isDesktopSupported()) { Desktop.getDesktop().open(file.toFile()); } } else if (Desktop.isDesktopSupported()) { Desktop.getDesktop().open(file.toFile());  } else { throw new UnsupportedOperationException(); } } "	0	0	0	0	1	0
"public void randomizeVelocity(Entity e) { float randomness = (Float) getConfig(""randomness"", 1f); Random random = new Random(); float randomX = (random.nextFloat() * (2 * randomness)) - randomness; float randomY = (random.nextFloat() * (2 * randomness)) - randomness; float randomZ = (random.nextFloat() * (2 * randomness)) - randomness; Vector v = e.getVelocity(); v.setX(v.getX() + randomX); v.setY(v.getY() + randomY); v.setZ(v.getZ() + randomZ); e.setVelocity(v); } "	0	0	0	0	1	0
@SideOnly(Side.CLIENT) @SubscribeEvent public void textureStitch(TextureStitchEvent.Pre event) { itemIcons.clear(); TextureMap textureMap = event.getMap(); for (TexturedItem item : ItemModelManager.items) { for (int i = 0; i < item.getMaxMeta(); i++) { String name = item.getTextureName(i); TextureAtlasSprite texture = textureMap.getTextureExtry(name); if (texture == null) { texture = new CustomTexture(name); textureMap.setTextureEntry(texture); } ItemIconInfo info = new ItemIconInfo((Item) item, i, texture, name); itemIcons.add(info); } } } 	0	0	0	0	1	0
"protected Problem createIlpProblemFromGraphs(Graph sourceGraph, Graph targetGraph, ConsistencyCheckPrecedenceGraph protocol) { Problem ilpProblem = new Problem();  // get all alternative clauses for (EObject elm : sourceGraph.getElements()) { TIntCollection variables = protocol.creates(elm); if (variables != null && !variables.isEmpty()) { int[] alternatives = variables.toArray(); ilpProblem.add(new Constraint(String.valueOf(elm.hashCode()), getAlternativeLinearFromArray(alternatives), ""<="", 1)); } }  for (EObject elm : targetGraph.getElements()) { TIntCollection variables = protocol.creates(elm); if (variables != null && !variables.isEmpty()) { int[] alternatives = variables.toArray(); ilpProblem.add(new Constraint(String.valueOf(elm.hashCode()), getAlternativeLinearFromArray(alternatives), ""<="", 1)); } }  // get all implication clauses for (int matchId : protocol.getMatchIDs().toArray()) { CCMatch match = protocol.intToMatch(matchId); for (EObject contextCorrespondence : match.getAllContextElements()) { int parentID = protocol.creates(contextCorrespondence).toArray()[0];  int[] implication = new int[2]; implication[0] = matchId; implication[1] = parentID; ilpProblem.add(getImplicationLinearFromArray(implication), ""<="", 0); } }  // incorporate user constraints on the ILP problem if (userDefinedILPConstraintProvider != null) { for (UserDefinedILPConstraint constraint : userDefinedILPConstraintProvider.getUserDefinedConstraints(protocol)) { Linear linear = new Linear(); for (int id : constraint.getIdsToCoefficients().keySet()) { linear.add(constraint.getIdsToCoefficients().get(id), id); } ilpProblem.add(linear, constraint.getMathematicalSign(), constraint.getReferenceValue()); } }   // define the objective -> bsp: MAX(A+B+C) Linear objective = new Linear(); if (userDefinedILPObjectiveProvider != null)  { // incorporate user objectives on the ILP problem UserDefinedILPObjective userObj = userDefinedILPObjectiveProvider.getUserDefinedObjective(protocol); Linear linear = new Linear(); for (int id : userObj.getIdsToCoefficients().keySet()) { linear.add(userObj.getIdsToCoefficients().get(id), id); } ilpProblem.setObjective(linear, userObj.getOptimizationGoal() == OptGoal.MIN ? OptType.MIN : OptType.MAX); } else for (int matchId : protocol.getMatchIDs().toArray()) { CCMatch match = protocol.intToMatch(matchId); int weight = match.getSourceMatch().getCreatedHashSet().size(); weight += match.getTargetMatch().getCreatedHashSet().size(); objective.add(weight, matchId); ilpProblem.setObjective(objective, OptType.MAX); }   // define variables as ilp boolean variables variables.forEach(variable -> { ilpProblem.setVarType(variable, Boolean.class); return true; });  return ilpProblem; } "	0	0	0	0	1	0
@NotNull private static Task createTaskFromMission(@NotNull final Mission missionWrapper) { final Task task = new Task(missionWrapper.slug); task.setText(getDocumentTextWithoutCodeBlock(missionWrapper.description)); return task; } 	0	0	0	0	1	0
"@Command public void closeChangeServiceDialog(){ if (pickedRedirectServ != null) { if (!pickedRedirectServ.isLeaf()) { Messagebox.show(l(""group_not_service""), l(""selecting_service""), Messagebox.OK, Messagebox.EXCLAMATION); return; }  if (!user.checkIfUserCanServe(pickedRedirectServ)){ Messagebox.show(user.getName() + "" doesn't have rights to serve customers for this service. Try Add to Queue."" , ""Access Issues"", Messagebox.OK, Messagebox.EXCLAMATION); return; }   final CmdParams params = new CmdParams(); params.userId = user.getUser().getId(); params.serviceId = pickedRedirectServ.getId(); params.comments = ((Textbox) addTicketDailogWindow.getFellow(""ticket_comments"")).getText();  Executer.getInstance().getTasks().get(Uses.TASK_CHANGE_SERVICE).process(params, """", new byte[4]);  service_list.setModel(service_list.getModel()); addTicketDailogWindow.setVisible(false); BindUtils.postNotifyChange(null, null, Form.this, ""*""); } } "	0	0	0	0	1	0
protected OctaneHttpResponse convertHttpResponseToOctaneHttpResponse(HttpResponse httpResponse) throws IOException { return new OctaneHttpResponse(httpResponse.getStatusCode(), httpResponse.parseAsString(), httpResponse.getContent()); } 	0	0	0	0	1	0
"@Override public void initialize(Patient patient) { List<String> projectsToAssign = new ArrayList<String>();  DocumentReference patientRef = patient.getDocument(); XWikiDocument patientDoc; try { patientDoc = (XWikiDocument) this.bridge.getDocument(patientRef); } catch (Exception e) { this.logger.error(""Could not read patient document for patient {}"", patientRef.getName(), e.getMessage()); return; }  XWikiContext xContext = getXContext(); XWikiRequest request = xContext.getRequest(); Map<String, String[]> parameterMap = request.getParameterMap(); for (String key : parameterMap.keySet()) { String[] values = parameterMap.get(key);  if (key.startsWith(PROJECT_PREFIX)) { if (PROJECT_SELECTED.equals(values[0])) { String projectId = key.substring(key.indexOf(PROJECT_PREFIX) + PROJECT_PREFIX.length()); Project p = new DefaultProject(projectId); projectsToAssign.add(p.getFullName()); } }  if (key.startsWith(STUDY_PREFIX)) { if (PROJECT_SELECTED.equals(values[0])) { String studyId = key.substring(key.indexOf(STUDY_PREFIX) + STUDY_PREFIX.length()); // TODO } } }  try { String projects = StringUtils.join(projectsToAssign, "";""); BaseObject projectBindingObject = patientDoc.newXObject(PROJECT_BINDING_REFERENCE, xContext); projectBindingObject.setStringValue(PROJECT_BINDING_FIELD, projects); } catch (XWikiException e) { this.logger.error(""Failed to bind a project to patient. Patient: {}"", patientRef.getName(), e.getMessage()); } } "	0	0	0	0	1	0
"private static void testAssociationRegistry() { // TODO: Does PropertyUtils.getPropertyDescriptors() return protected and package level properties? We need // these as well... AssociationRegistry registry = AssociationRegistry.instance(); registry.scan( new String[] { Vehicle.class.getPackage().getName() + "".*"" }, new String[]{} ); AssociationPrinter printer = new AssociationPrinter(); printer.printClasses( registry.getRegisteredClasses() ); } "	0	0	0	0	1	0
@Override public void onChoiceSelected(int position) { onPlaceTypeSelected(types.get(position).first); } 	0	0	0	0	1	0
"@Override public void hint(URI needURI, URI otherNeed, double score, URI originator, Model content, WonMessage wonMessage) throws Exception { logger.info(""need-facing: HINT called for needURI {} and otherNeed {} "" + ""with score {} from originator {}."", new Object[]{needURI, otherNeed, score, originator});   CamelConfiguration camelConfiguration = matcherProtocolCommunicationService.configureCamelEndpoint(needURI,startingEndpoint); String endpoint = camelConfiguration.getEndpoint();  Map<String, String> headerMap = new HashMap<>(); headerMap.put(""needURI"",needURI.toString()); headerMap.put(""otherNeedURI"", otherNeed.toString()); headerMap.put(""score"",String.valueOf(score)); headerMap.put(""originator"",originator.toString()); headerMap.put(""content"",RdfUtils.toString(content));  headerMap.put(""remoteBrokerEndpoint"", endpoint); headerMap.put(""methodName"",""hint""); messagingService.sendInOnlyMessage(null, headerMap, WonMessageEncoder.encode(wonMessage, Lang.TRIG),startingEndpoint ); } "	0	0	0	0	1	0
"public void allowContacts(List<Contact> contacts, AjaxCallback<String> cb) { Log.d(TAG, ""allowPeople""); ContactsRequest request = new ContactsRequest(contacts); if (!contactRequestIsValid(request)) { Log.e(TAG, ""Attempted to allow 0 emails""); return; } try { post(restPath + ""/allow"", JsonUtils.toJSONObject(request), cb); } catch (JsonProcessingException | JSONException e) { Log.e(TAG, ""Failed to create json object from allow contact request""); e.printStackTrace(); } } "	0	0	0	0	1	0
"private String init(CloneOption option) throws Exception { if (option == null) throw new NullPointerException(""option"");  if (!option.bypassEmptyCheck()) { Path curDir = Paths.get(""""); Files.walk(curDir).forEach(cur -> { if (!emptyCheckIgnore.contains(cur)) { throw new GitP4Exception(String.format(""%s is not empty"", curDir.toAbsolutePath().normalize())); } }); } else { logger.warn(""skip dir empty check, existing content may be destroyed""); }  if (Files.exists(gitDirPath) || Files.exists(gitP4DirPath)) { throw new GitP4Exception(""This folder is already initialized for git or cloned from p4 repo""); }  P4RepositoryInfo repoInfo = new P4RepositoryInfo(option.getCloneString()); logger.info(""p4 root is "" + repoInfo.getPathWithSubContents());  List<P4FileOpenedInfo> p4Opened = P4Opened.run(repoInfo.getPathWithSubContents()); if (p4Opened != null && !p4Opened.isEmpty()) { String[] files = p4Opened.stream().map(P4FileOpenedInfo::getFile).toArray(String[]::new); String msg = String.format(""Please submit or revert the following p4 opened files and try again.\n%s"", StringUtils.join(files, ""\n"")); throw new GitP4Exception(msg); }   if (Files.exists(gitP4DirPath)) { throw new GitP4Exception(""This folder is already initialized for git or cloned from p4 repo""); } Files.createDirectory(gitP4DirPath); Properties config = new Properties(); config.setProperty(GitP4Config.p4Repo, repoInfo.getPathWithSubContents()); config.setProperty(GitP4Config.viewMap, option.getViewString()); config.setProperty(GitP4Config.lastSync, ""-1""); config.setProperty(GitP4Config.submitIgnore, gitP4ConfigFilePath.toString()); GitP4Config.save(config, gitP4ConfigFilePath, "".gitp4 config"");   logger.info(""Git init current directory...""); GitInit.run(""""); updateGitP4Config();  String[] map = option.getViewMap().stream() .map(cur -> String.format(""%1$s%2$s/..."", repoInfo.getPath(), cur)) .toArray(String[]::new); if (map != null && map.length > 0) logger.info(""initialized for:\n"" + StringUtils.join(map, ""\n"")); return option.getCloneString(); } "	0	0	0	0	1	0
"@Test public void testUpdate() throws Exception { RuleDTO ruleDTO = new RuleDTO(); ruleDTO.setAccountId(""5678""); when(ruleEntityRepository.findOne(anyLong())).thenReturn(ruleEntity); when(ruleEntityRepository.save(any(RuleEntity.class))).then(AdditionalAnswers.returnsFirstArg());  RuleEntity updatedRule = ruleEntityServiceImpl.update(ruleDTO, 1L); assertThat(updatedRule.getAccountId()).isEqualToIgnoringCase(""5678""); assertThat(updatedRule.getExpiryDate()).isEqualByComparingTo(new DateTime(Long.MAX_VALUE));  verify(ruleEntityRepository).findOne(anyLong()); verify(ruleEntityRepository, times(2)).save(any(RuleEntity.class)); } "	0	0	0	0	1	0
"@Override public RuleEntity save(RuleDTO ruleDTO) {  if (ruleDTO.getExpiryDate() == null) { ruleDTO.setExpiryDate(new DateTime(Long.MAX_VALUE)); }  RuleEntity ruleEntity = mapDtoToRuleEntity(ruleDTO);  RuleEntity entity = ruleEntityRepository.save(ruleEntity);  log.info(""New Whitelisting Rule created {}"", ruleEntity);  return entity;  } "	0	0	0	0	1	0
"public OpenReadingFrame parseGetOrfDescriptionLine(String descLine) { if (descLine == null) { LOGGER.warn(""The specified description line is NULL!""); return null; } //Check description line format using PATTERN class //... e.g. //        Matcher acLineMatcher = ACCESSION_EXTRACTOR_PATTERN.matcher(line); //                    if (acLineMatcher.find()) { //                        record.setModelAc(acLineMatcher.group(1)); //                    } //OR //        if (!descLine.matches("""")) { //            LOGGER.warn(""The specified description line: "" + descLine + "" doesn't match the given regular expression!""); //            return null; //        } //Filter step descLine = filterDescriptionLine(descLine); //Split by white space String[] chunks = descLine.trim().split(WHITESPACE); //Get values by index String startPosChunk = chunks[1]; String endPosChunk = chunks[3]; NucleotideSequenceStrand strand = NucleotideSequenceStrand.SENSE; if (chunks[4].equalsIgnoreCase(""REVERSE"")) { strand = NucleotideSequenceStrand.ANTISENSE; startPosChunk = endPosChunk; endPosChunk = chunks[1]; } int start = Integer.parseInt(startPosChunk); int end = Integer.parseInt(endPosChunk);  return new OpenReadingFrame(start, end, strand); } "	0	0	0	0	1	0
public void setCenterValueColor(@ColorRes int centerTextColor) { outerPieChart.setCenterTextColor(centerTextColor); } 	0	0	0	0	1	0
private Bootstrap createBootstrap() { final Bootstrap bootstrap = new Bootstrap(); if (TCP_BLOCKING_CLIENT.get(settings)) { bootstrap.group(new OioEventLoopGroup(1, daemonThreadFactory(settings, TRANSPORT_CLIENT_WORKER_THREAD_NAME_PREFIX))); bootstrap.channel(OioSocketChannel.class); } else { bootstrap.group(new NioEventLoopGroup(workerCount, daemonThreadFactory(settings, TRANSPORT_CLIENT_BOSS_THREAD_NAME_PREFIX))); bootstrap.channel(NioSocketChannel.class); }  bootstrap.handler(getClientChannelInitializer());  bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, Math.toIntExact(getDefaultConnectTimeout().millis())); bootstrap.option(ChannelOption.TCP_NODELAY, TCP_NO_DELAY.get(settings)); bootstrap.option(ChannelOption.SO_KEEPALIVE, TCP_KEEP_ALIVE.get(settings));  final ByteSizeValue tcpSendBufferSize = TCP_SEND_BUFFER_SIZE.get(settings); if (tcpSendBufferSize.getBytes() > 0) { bootstrap.option(ChannelOption.SO_SNDBUF, Math.toIntExact(tcpSendBufferSize.getBytes())); }  final ByteSizeValue tcpReceiveBufferSize = TCP_RECEIVE_BUFFER_SIZE.get(settings); if (tcpReceiveBufferSize.getBytes() > 0) { bootstrap.option(ChannelOption.SO_RCVBUF, Math.toIntExact(tcpReceiveBufferSize.getBytes())); }  bootstrap.option(ChannelOption.RCVBUF_ALLOCATOR, recvByteBufAllocator);  final boolean reuseAddress = TCP_REUSE_ADDRESS.get(settings); bootstrap.option(ChannelOption.SO_REUSEADDR, reuseAddress);  bootstrap.validate();  return bootstrap; } 	0	0	0	0	1	0
"@Override public ServiceProviderConfiguration parse(Element fragment, String source) { Foo foo = null; try { JAXBContext jc = JAXBContext.newInstance(""com.example.foo""); Unmarshaller u = jc.createUnmarshaller(); foo = u.unmarshal(fragment, Foo.class).getValue(); DefaultSubstitutor.applyDefaults(foo); } catch (JAXBException e) { e.printStackTrace(); }  return new FooServiceProviderConfiguration(foo); } "	0	0	0	0	1	0
private static String getTestData() throws IOException { String testData;  InputStreamReader isr = new InputStreamReader(PredictionsAPIClient.class.getResourceAsStream(TEST_DATA_LOCATION)); BufferedReader br = new BufferedReader(isr);  if ((testData = br.readLine()) != null) { return testData; }  return null; } 	0	0	0	0	1	0
"public ProtocolState makeInit(Set<RecVar> labs) { if (this.init != null) { throw new RuntimeException(""Initial state already set.""); } this.init = new ProtocolState(labs); return this.init; } "	0	0	0	0	1	0
public void tweenLayers() { boolean playerIsOnFirstLane = players[activePlayerIdx].isOnFirstLane(); if (!playerIsOnFirstLane) { Tween.to(opacityLayer1, -1, .5f) .target(.5f) .ease(TweenEquations.easeOutQuad) .start(tweener); Tween.to(opacityLayer2, -1, .5f) .target(1f) .ease(TweenEquations.easeOutQuad) .start(tweener); Tween.to(cameraZoom, -1, .5f) .target(.9f) .ease(TweenEquations.easeOutQuad) .start(tweener); } else { Tween.to(opacityLayer1, -1, .5f) .target(1f) .ease(TweenEquations.easeOutQuad) .start(tweener); Tween.to(opacityLayer2, -1, .5f) .target(.5f) .ease(TweenEquations.easeOutQuad) .start(tweener); Tween.to(cameraZoom, -1, .5f) .target(1f) .ease(TweenEquations.easeOutQuad) .start(tweener); } } 	0	0	0	0	1	0
"@Test public void shouldNotAllowMultipleSCMsWithSameId() throws Exception { Configuration configuration = new Configuration(getConfigurationProperty(""url"", false, ""http://go"")); CruiseConfig configToSave = new CruiseConfig();  SCM scm1 = createSCM(""id"", ""name1"", ""plugin-id-1"", ""1.0"", configuration);  SCM scm2 = createSCM(""id"", ""name2"", ""plugin-id-2"", ""1.0"", configuration);  configToSave.setSCMs(new SCMs(scm1, scm2)); try { xmlWriter.write(configToSave, output, false); fail(""should not have allowed two SCMs with same id""); } catch (XsdValidationException e) { assertThat(e.getMessage(), is(""Duplicate unique value [id] declared for identity constraint \""uniqueSCMId\"" of element \""scms\""."")); } } "	0	0	0	0	1	0
public static org.bukkit.Location adapt(Location location) { return new org.bukkit.Location(adapt(location.getWorld()), 0, 0, 0); } 	0	0	0	0	1	0
public void waveformTouchEnd() { mTouchDragging = false; mOffsetGoal = mOffset;  long elapsedMsec = getCurrentTime() - mWaveformTouchStartMsec; if (mWaveformView.getEnd() >= mTouchStart && elapsedMsec < 300) { if (mPlayer.isPlaying()) { int seekMsec = mWaveformView.pixelsToMillisecs( (int)(mTouchStart + mOffset));  if (seekMsec <= mPlayer.getCurrentPosition()){ mWaveformView.setIsBookmarking(false); currentBookmarkView.setBackgroundColor(Color.WHITE); }  mPlayer.seekTo(seekMsec); } else { onPlay((int)(mTouchStart + mOffset)); } } } 	0	0	0	0	1	0
"public void triggerJob(String jobName, Map<String, String> params) { List<ParameterValue> newParams = Lists.newArrayList(); for (Map.Entry<String, String> entry : params.entrySet()) { newParams.add(new StringParameterValue(entry.getKey(), entry.getValue())); } AbstractProject job = Jenkins.getInstance().getItem(jobName, run.getParent().getParent(), AbstractProject.class); if (null != job) { Cause cause = new Cause.UpstreamCause(run); boolean scheduled = job.scheduleBuild(job.getQuietPeriod(), cause, new ParametersAction(newParams)); if (Jenkins.getInstance().getItemByFullName(job.getFullName()) == job) { String name = ModelHyperlinkNote.encodeTo(job) + ""  "" + ModelHyperlinkNote.encodeTo( job.getAbsoluteUrl() + job.getNextBuildNumber() + ""/"", ""#"" + job.getNextBuildNumber()); if (scheduled) { println(hudson.tasks.Messages.BuildTrigger_Triggering(name)); } else { println(hudson.tasks.Messages.BuildTrigger_InQueue(name)); } } } else { println(""Downstream job not found: "" + jobName); } } "	0	0	0	0	1	0
private void handlePackets(Connection connection, Object obj) { ((Packet) obj).actionClient(connection); } 	0	0	0	0	1	0
public static boolean isTrustGooglePermitted(Context context) { return PreferenceManager.getDefaultSharedPreferences(context).getBoolean(PREF_KEY_TRUST_GOOGLE, true); } 	0	0	0	0	1	0
public static boolean isConnected() { return connected.get(); } 	0	0	0	0	1	0
Object getRandomPrimitiveArray(final Class<?> primitiveType) { int randomSize = abs((byte) enhancedRandom.nextInt()); // TODO A bounty will be offered to anybody that comes with a generic template method for that.. if (primitiveType.equals(Byte.TYPE)) { byte[] result = new byte[randomSize]; for (int index = 0; index < randomSize; index++) { result[index] = (byte) enhancedRandom.nextInt(); } return result; } if (primitiveType.equals(Short.TYPE)) { short[] result = new short[randomSize]; for (int index = 0; index < randomSize; index++) { result[index] = (short) enhancedRandom.nextInt(); } return result; } if (primitiveType.equals(Integer.TYPE)) { int[] result = new int[randomSize]; for (int index = 0; index < randomSize; index++) { result[index] = enhancedRandom.nextInt(); } return result; } if (primitiveType.equals(Long.TYPE)) { long[] result = new long[randomSize]; for (int index = 0; index < randomSize; index++) { result[index] = enhancedRandom.nextLong(); } return result; } if (primitiveType.equals(Float.TYPE)) { float[] result = new float[randomSize]; for (int index = 0; index < randomSize; index++) { result[index] = enhancedRandom.nextFloat(); } return result; } if (primitiveType.equals(Double.TYPE)) { double[] result = new double[randomSize]; for (int index = 0; index < randomSize; index++) { result[index] = enhancedRandom.nextDouble(); } return result; } if (primitiveType.equals(Character.TYPE)) { char[] result = new char[randomSize]; for (int index = 0; index < randomSize; index++) { result[index] = (char) enhancedRandom.nextInt(); } return result; } if (primitiveType.equals(Boolean.TYPE)) { boolean[] result = new boolean[randomSize]; for (int index = 0; index < randomSize; index++) { result[index] = enhancedRandom.nextBoolean(); } return result; } return null; } 	0	0	0	0	1	0
@Override public void onClick(View v) { tryVibrate(); if (v.getId() == R.id.mdtp_hijri_date_picker_year) { setCurrentView(YEAR_VIEW); } else if (v.getId() == R.id.mdtp_hijri_date_picker_month) { setCurrentView(MONTH_AND_DAY_VIEW); } } 	0	0	0	0	1	0
"private void createTaskCleanRoom(Reservation reservation) throws Exception { Task task = new Task();  task.setTitle(""Clean Room ""); task.setDescription(""Clean Room "" + reservation.getRoom().getNumber()); task.setRequest(null); task.setTargetTime(null); task.setTimePlaced(timeFormatter.getNewDateAsString()); task.setPriority(1); task.setStatus(0); task.setDuration(""00:30""); task = taskHandler.assignTask(task, taskHandler.findShift(new LocalTime())); task = taskService.save(task, ""SYSTEM""); taskService.organizeTasks(task.getAssignee().getId()); } "	0	0	0	0	1	0
public boolean acceptDrop() { return isEmpty(); } 	0	0	0	0	1	0
public Map<TileModel, EntityMovements[]> getBoardPositions(TileModel tileModel) {  // Get a reference to the player controller PlayerController playerController = AbstractFactory.getFactory(ControllerFactory.class).get(PlayerController.class, true);  // Get the list of positions that can be moved to Map<TileModel, EntityMovements[]> availablePositions = getBoardPositionsImpl(tileModel);  // Go through the list of moves and scrub the ones that would result in my being in check for(Iterator<Map.Entry<TileModel, EntityMovements[]>> it = availablePositions.entrySet().iterator(); it.hasNext();) { Map.Entry<TileModel, EntityMovements[]> entry = it.next(); if(isMoveChecked(playerController.getPlayer(tileModel.getEntity().getTeam()), tileModel, entry.getKey())) { it.remove(); } }  // If the current tile has an entity and it can be used to castle if(tileModel.getEntity() != null && tileModel.getEntity().getIsCastlableFromCandidate()) {  // Get the left-most rook castle candidate TileModel leftCandidate = getCastlableToEntity(tileModel, EntityMovements.LEFT); if(leftCandidate != null) { availablePositions.put( _neighbors.get(_neighbors.get(tileModel).get(EntityMovements.LEFT)).get(EntityMovements.LEFT), new EntityMovements[] {EntityMovements.LEFT, EntityMovements.LEFT} ); }  // Get the right-most rook castle candidate TileModel rightCandidate = getCastlableToEntity(tileModel, EntityMovements.RIGHT); if(rightCandidate != null) { availablePositions.put( _neighbors.get(_neighbors.get(tileModel).get(EntityMovements.RIGHT)).get(EntityMovements.RIGHT), new EntityMovements[] {EntityMovements.RIGHT, EntityMovements.RIGHT} ); } }  // Return back the list of available positions return availablePositions; } 	0	0	0	0	1	0
"@Test public void parsesExternalSecondaryInstanceForm() throws IOException, XPathSyntaxException { FormDef formDef = parse(""external-secondary-instance.xml"").formDef; assertEquals(""Form with external secondary instance"", formDef.getTitle()); TreeReference treeReference = ((XPathPathExpr) parseXPath(""instance('towns')/data_set"")).getReference(); EvaluationContext evaluationContext = formDef.getEvaluationContext(); List<TreeReference> treeReferences = evaluationContext.expandReference(treeReference); assertEquals(1, treeReferences.size()); DataInstance townInstance = formDef.getNonMainInstance(""towns""); AbstractTreeElement tiRoot = townInstance.getRoot(); assertEquals(""towndata"", tiRoot.getName()); assertEquals(1, tiRoot.getNumChildren()); AbstractTreeElement dataSetChild = tiRoot.getChild(""data_set"", 0); assertEquals(""us_east"", dataSetChild.getValue().getDisplayText()); } "	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Fabric.with(this, new Crashlytics()); setContentView(R.layout.activity_landing_page); mLoginNetworkManager = NetworkManager.getInstance(this.getApplicationContext()); mViewBlocker = findViewById(R.id.viewBlocker); mViewBlocker.setVisibility(View.GONE); mUiHelper = new UiLifecycleHelper(this, callback); mUiHelper.onCreate(savedInstanceState); initializeViews();  mPreferences = getSharedPreferences(PREFERENCES, 0);  // NOTE(mark): Change to !hasAuthCredentials if you want the main activity to show. if (hasAuthCredentials(mPreferences)) { // Ideally we could request the user object from the server again here and then pass them to the main activity. final Intent intent = new Intent(this, MainActivity.class); intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION); Bundle b = new Bundle(); b.putInt(""userId"", 1); //Replace with an actual user Id soon intent.putExtras(b); // intent.putExtra(""auth_token"", mPreferences.getString(""auth_token"", null)); this.finish(); startActivity(intent); overridePendingTransition(0, 0); } } "	0	0	0	0	1	0
public void appendSpacesTo(int count) { this.charCount = this.charCount % FITS_LINE_LENGTH; if (this.charCount != 0) { int spaces = count - this.charCount; if (spaces > 0) { this.buffer.append(FitsLineAppender._80_SPACES, 0, spaces); this.charCount += spaces; } } } 	0	0	0	0	1	0
"@Override public void authenticate(ClientConnection connection) throws AuthenticationException, IOException { final SerializationService ss = client.getSerializationService(); byte serializationVersion = ss.getVersion(); String uuid = null; String ownerUuid = null; if (principal != null) { uuid = principal.getUuid(); ownerUuid = principal.getOwnerUuid(); } ClientMessage clientMessage; if (credentials instanceof UsernamePasswordCredentials) { UsernamePasswordCredentials cr = (UsernamePasswordCredentials) credentials; clientMessage = ClientAuthenticationCodec.encodeRequest(cr.getUsername(), cr.getPassword(), uuid, ownerUuid, true, ClientTypes.JAVA, serializationVersion); } else { Data data = ss.toData(credentials); clientMessage = ClientAuthenticationCustomCodec.encodeRequest(data, uuid, ownerUuid, true, ClientTypes.JAVA, serializationVersion);  } connection.init();  ClientMessage response; final ClientInvocation clientInvocation = new ClientInvocation(client, clientMessage, connection); final Future<ClientMessage> future = clientInvocation.invoke(); try { response = future.get(); } catch (Exception e) { throw ExceptionUtil.rethrow(e, IOException.class); } ClientAuthenticationCodec.ResponseParameters result = ClientAuthenticationCodec.decodeResponse(response);  AuthenticationStatus authenticationStatus = AuthenticationStatus.getById(result.status); switch (authenticationStatus) { case AUTHENTICATED: connection.setRemoteEndpoint(result.address); connection.setIsAuthenticatedAsOwner(); principal = new ClientPrincipal(result.uuid, result.ownerUuid); return; case CREDENTIALS_FAILED: throw new AuthenticationException(""Invalid credentials!""); default: throw new AuthenticationException(""Authentication status code not supported. status:"" + authenticationStatus); } } "	0	0	0	0	1	0
"@Override public void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i2, int i3) { Log.d(""changed"",""changed"");  } "	0	0	0	0	1	0
@Override public void setValueAt(final Object value, final int row, final int column) { if (column == ACTION_COLUMN) { final GroupAction action = (GroupAction) value; final FileObject file = getFile(row); action.setAction(files, file); fireFileChanged(file); } } 	0	0	0	0	1	0
public void setNodes(List<Node> nodes, Node currentNode) { this.nodes = nodes; this.currentNode = currentNode; this.notifyDataSetChanged(); } 	0	0	0	0	1	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);  // Read in the flag indicating whether or not the user has demonstrated awareness of the // drawer. See PREF_USER_LEARNED_DRAWER for details. Constants.DEFAULT_DATE_PARSE_FORMAT.setTimeZone(TimeZone.getTimeZone(""EST"")); SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getActivity()); mUserLearnedDrawer = sp.getBoolean(PREF_USER_LEARNED_DRAWER, false); if (savedInstanceState != null) { mFromSavedInstanceState = true; } selectedRoutes = Collections.synchronizedSet(new HashSet<>(sp.getStringSet(BUS_SELECT_STATE, Collections.synchronizedSet( new HashSet<>(getResources().getInteger(R.integer.max_checked)))))); busListAdapter = new BusRouteAdapter(); routeSelectionPublishSubject = BehaviorSubject.create(); } "	0	0	0	0	1	0
public ActorRef getLocalActor(String actorName) { return  this.actorList.stream().filter(x -> x.getKey().equals(actorName)).findFirst().get().getValue(); } 	0	0	0	0	1	0
public String generateMainCode(final PiGraph pg) { return SpiderMainFilePrinter.print(pg); } 	0	0	0	0	1	0
@Override public Object modify(final Resource resource, final ComponentImplementation ci) { for (EndToEndFlow eteFlow : createEndToEndFlowDialog.getFlows()) { ci.getOwnedEndToEndFlows().add(eteFlow); ci.setNoFlows(false); } return null; } 	0	0	0	0	1	0
"@Test public void testStraightSendReceiveJGroups() throws Exception { BroadcastEndpoint broadcaster = null; BroadcastEndpoint client = null; try { JGroupsFileBroadcastEndpointFactory endpointFactory = new JGroupsFileBroadcastEndpointFactory() .setChannelName(""tst"") .setFile(TEST_JGROUPS_CONF_FILE); broadcaster = endpointFactory.createBroadcastEndpoint();  broadcaster.openBroadcaster();  client = endpointFactory.createBroadcastEndpoint();  client.openClient();  Thread.sleep(1000);  byte[] randomBytes = ""PQP"".getBytes();  broadcaster.broadcast(randomBytes);  byte[] btreceived = client.receiveBroadcast(5, TimeUnit.SECONDS);  System.out.println(""BTReceived = "" + btreceived);  assertNotNull(btreceived);  assertEquals(randomBytes.length, btreceived.length);  for (int i = 0; i < randomBytes.length; i++) { assertEquals(randomBytes[i], btreceived[i]); } } finally { try { if (broadcaster != null) broadcaster.close(true);  if (client != null) client.close(false); } catch (Exception ignored) { ignored.printStackTrace(); } }  } "	0	0	0	0	1	0
"@Test public void precisionTest() {  // Test boundary success assertTrue(""failure - should be true"", tester.precisionCompare(1, 1.00)); assertTrue(""failure - should be false"", tester.precisionCompare(1, 1.01)); assertTrue(""failure - should be true"", tester.precisionCompare(1, .99));  // Test boundary failures assertFalse(""failure - should be false"", tester.precisionCompare(1, 1.02)); assertFalse(""failure - should be false"", tester.precisionCompare(1, .98));  } "	0	0	0	0	1	0
"@RequestMapping(value = ""/submit"", method = RequestMethod.POST) public MomiaHttpResponse submit(@RequestParam String childname, @RequestParam String mobile) { if (StringUtils.isBlank(childname)) return MomiaHttpResponse.FAILED(""孩子姓名不能为空""); if (MobileUtil.isInvalid(mobile)) return MomiaHttpResponse.FAILED(""无效的手机号码"");  String sql = ""SELECT COUNT(1) FROM SG_EntryForm WHERE Mobile=? AND Status<>0""; if (jdbcTemplate.queryForList(sql, new Object[]{ mobile }, Long.class).get(0) > 0) return MomiaHttpResponse.SUCCESS;  sql = ""INSERT INTO SG_EntryForm (ChildName, Mobile, AddTime) VALUES (?, ?, NOW())""; if (jdbcTemplate.update(sql, new Object[] { childname, mobile }) > 0) { smsServiceApi.notify(mobile, ""提示，您已获得“小小牙医”入场券，活动时间：3月18日16:00，地点：星光幼儿园多功能厅，请准时入场凭短信领取礼品。""); return MomiaHttpResponse.SUCCESS; } return MomiaHttpResponse.FAILED; } "	0	0	0	0	1	0
public void run() { if (!loop) { mediaPlayer.stop(); mediaPlayer.seek(Duration.millis(0.0)); } } 	0	0	0	0	1	0
"@Override public Type importType(URL url, String typeName, GeppettoLibrary library, GeppettoModelAccess commonLibraryAccess) throws ModelInterpreterException { CompositeType type = TypesFactory.eINSTANCE.createCompositeType(); try { dependentModels.clear(); dependentModels.add(url); dependentModels.add(URLReader.getURL(""/test/hhcell/NML2_SingleCompHHCell.nml"")); type.setId(""testType""); type.setName(""testType"");  Variable a = VariablesFactory.eINSTANCE.createVariable(); a.setId(""a""); a.setName(""a""); a.getTypes().add(commonLibraryAccess.getType(TypesPackage.Literals.STATE_VARIABLE_TYPE));  Variable b = VariablesFactory.eINSTANCE.createVariable(); b.setId(""b""); b.setName(""b""); b.getTypes().add(commonLibraryAccess.getType(TypesPackage.Literals.STATE_VARIABLE_TYPE));  Variable c = VariablesFactory.eINSTANCE.createVariable(); c.setId(""c""); c.setName(""c""); c.getTypes().add(commonLibraryAccess.getType(TypesPackage.Literals.STATE_VARIABLE_TYPE));  Variable p1 = VariablesFactory.eINSTANCE.createVariable(); p1.setId(""p1""); p1.setName(""p1""); p1.getTypes().add(commonLibraryAccess.getType(TypesPackage.Literals.PARAMETER_TYPE));  Variable p2 = VariablesFactory.eINSTANCE.createVariable(); p2.setId(""p2""); p2.setName(""p2""); p2.getTypes().add(commonLibraryAccess.getType(TypesPackage.Literals.PARAMETER_TYPE));  type.getVariables().add(a); type.getVariables().add(b); type.getVariables().add(c); type.getVariables().add(p1); type.getVariables().add(p2);  library.getTypes().add(type); } catch(GeppettoVisitingException e) { throw new ModelInterpreterException(e); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } return type; } "	0	0	0	0	1	0
private Map<String, String> getDiscriminators(String aContextId) { return discriminators.get(aContextId); } 	0	0	0	0	1	0
"private XdmNode parse(String uri, String base) { XdmNode doc = runtime.parse(uri, base);  if (uri.contains(""#"")) { int pos = uri.indexOf(""#""); String ptr = uri.substring(pos+1);  if (ptr.matches(""^[\\w]+$"")) { ptr = ""element("" + ptr + "")""; }  XPointer xptr = new XPointer(ptr); Vector<XdmNode> nodes = xptr.selectNodes(runtime, doc);  if (nodes.size() == 1) { doc = nodes.get(0); } else if (nodes.size() != 0) { throw new XProcException(node, ""XPointer matches more than one node!?""); } } return doc; } "	0	0	0	0	1	0
"public void updateFilters() { domains = new ArrayList<>();  ((LinearLayout) findViewById(R.id.domainlist)).removeAllViews(); for (String s : SettingValues.alwaysExternal.replaceAll(""^[,\\s]+"", """").split(""[,\\s]+"")) { if (!s.isEmpty()) { s = s.trim(); final String finalS = s; domains.add(finalS); final View t = getLayoutInflater().inflate(R.layout.account_textview, ((LinearLayout) findViewById(R.id.domainlist)), false);  ((TextView) t.findViewById(R.id.name)).setText(s); t.findViewById(R.id.remove).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { domains.remove(finalS); SettingValues.alwaysExternal = Reddit.arrayToString(domains); updateFilters(); } }); ((LinearLayout) findViewById(R.id.domainlist)).addView(t);  } } } "	0	0	0	0	1	0
private boolean loadRecurringTransaction(int recurringTransactionId) { RecurringTransactionRepository repo = new RecurringTransactionRepository(this); mRecurringTransaction = repo.load(recurringTransactionId); if (mRecurringTransaction == null) return false;  mCommonFunctions.transactionEntity = mRecurringTransaction;  // Read data. String transCode = mRecurringTransaction.getTransactionCode(); mCommonFunctions.transactionEntity.setTransactionType(TransactionTypes.valueOf(transCode));  // load split transactions only if no category selected. if (!mCommonFunctions.transactionEntity.hasCategory() && mCommonFunctions.mSplitTransactions == null) { RecurringTransactionService recurringTransaction = new RecurringTransactionService(recurringTransactionId, this); mCommonFunctions.mSplitTransactions = recurringTransaction.loadSplitTransactions(); }  AccountRepository accountRepository = new AccountRepository(this); mCommonFunctions.mToAccountName = accountRepository.loadName(mCommonFunctions.transactionEntity.getAccountToId());  mCommonFunctions.selectPayeeName(mCommonFunctions.transactionEntity.getPayeeId()); mCommonFunctions.loadCategoryName();  return true; } 	0	0	0	0	1	0
"private void submitAwsKeys(String username, String token) { //Check AWS keys threadpool.submit(()->{ if(config.isAwsUserIdentificationEnabled()) { try { List<AccessKeyMetadata> keys = awsUserDAO.getAwsAccessKeys(username); loginConveyor.add(token, keys, LoginStep.AWS_KEYS); } catch (Exception e) { loginConveyor.cancel(token,LoginStep.AWS_KEYS_ERROR,""Please contact AWS administrator to activate your Access Key""); } } else { loginConveyor.add(token,new ArrayList<AccessKeyMetadata>(),LoginStep.AWS_KEYS); } });  } "	0	0	0	0	1	0
"protected boolean copyFunctions(String softwareAcronym, String filePattern) {  boolean status = true; String filePath = """";  try {  String folderRootPath = new File(""."").getCanonicalPath()+File.separator+""sql""+File.separator; String folderPath = """";  // Process selected software folder folderPath = folderRootPath+softwareAcronym+File.separator; if (!processFolder(folderPath, filePattern)) return false;  // Process 'utils' folder folderPath = folderRootPath+""utils""+File.separator; if (!processFolder(folderPath, filePattern)) return false;  } catch (FileNotFoundException e) { Utils.showError(""inp_error_notfound"", filePath); status = false; } catch (IOException e) { Utils.showError(e, filePath); status = false; }  return status;  } "	0	0	0	0	1	0
@Override public boolean abortAllPutRequestsForSURL(GridUserInterface user, TSURL surl, String explanation) {  final SURLStatusDAO dao = new SURLStatusDAO(); return dao.abortActivePtGsForSURL(user, surl, explanation);  } 	0	0	0	0	1	0
"@Nullable @Override public List<VcsException> commit(List<Change> changes, final String preparedComment, @NotNull NullableFunction<Object, Object> parametersHolder, Set<String> feedback) { LOG.info(""Submit to server: "" + changes); final List<VcsException> errors = new ArrayList<VcsException>();  if (preparedComment == null || preparedComment.length() <= 0) { // Bug #52 - should not be able to submit with an empty comment errors.add(new P4Exception(P4Bundle.message(""exception.no-checkin-message""))); return errors; }   // Find all the files and their respective P4 changelists. // This method deals with the problem of discovering the // changelists to submit, and their associated P4 client. // The server end deals with filtering out the files that // aren't requested to submit. final ChangeListManager clm = ChangeListManager.getInstance(vcs.getProject()); final Map<P4Server, Map<P4ChangeListId, List<FilePath>>> pathsPerChangeList = new HashMap<P4Server, Map<P4ChangeListId, List<FilePath>>>(); for (Change change: changes) { if (change != null) { LocalChangeList cl = clm.getChangeList(change); try { splitChanges(change, cl, pathsPerChangeList); } catch (InterruptedException e) { errors.add(new VcsInterruptedException(e)); } } }  // If there are files in the default changelist, they need to have their // own changelist.  This needs to happen first, because all files that // are not in the following changelists are moved into the default.  // This just puts the defaults into a changelist.  They will be submitted // with the rest of the changelists below.  LOG.info(""changes in a changelist: "" + pathsPerChangeList); for (Entry<P4Server, Map<P4ChangeListId, List<FilePath>>> en: pathsPerChangeList.entrySet()) { final P4Server server = en.getKey(); for (Entry<P4ChangeListId, List<FilePath>> clEn: en.getValue().entrySet()) { LOG.info(""Submit to "" + server + "" cl "" + clEn.getValue() + "" files "" + clEn.getValue()); try { Ref<VcsException> problem = new Ref<VcsException>(); Ref<List<P4StatusMessage>> results = new Ref<List<P4StatusMessage>>(); server.submitChangelistOnline(clEn.getValue(), getJobs(parametersHolder), getSubmitStatus(parametersHolder), clEn.getKey().getChangeListId(), preparedComment, results, problem); if (! problem.isNull()) { errors.add(problem.get()); } errors.addAll(P4StatusMessage.messagesAsErrors(results.get())); } catch (P4DisconnectedException e) { LOG.warn(e); errors.add(e); } catch (InterruptedException e) { LOG.warn(e); errors.add(new VcsInterruptedException(e)); } } }  LOG.info(""Errors: "" + errors);  // Mark the changes as needing an update P4ChangesViewRefresher.refreshLater(vcs.getProject()); return errors; } "	0	0	0	0	1	0
@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View v = ViewUtils.inflate(container, R.layout.cannon_commons_fragment_map);  menusByCategory = (HashMap) getArguments().getSerializable(MENUS_BY_CATEGORY); v.findViewById(R.id.cannon_map).setOnTouchListener((view, motionEvent) -> { if (motionEvent.getAction() != MotionEvent.ACTION_DOWN && motionEvent.getAction() != MotionEvent.ACTION_UP) { return false; } int color = getColorForPosition(v, motionEvent.getX(), motionEvent.getY()); return openMenu(color, motionEvent.getDownTime()); });  return v; } 	0	0	0	0	1	0
@Override public void onBindViewHolder(GroupViewHolder holder, int position) { String winner = winnersList.get(position);  holder.name.setText(winner); } 	0	0	0	0	1	0
"@Test public void testStartWithoutArgs() throws Exception { String[] args = new String[] {}; try { Starter.main(args); Assert.fail(""Exception expected, but not thrown!""); } catch (IOException expected) { Assert.assertEquals(expected.getMessage(), ""Missing required parameters! See default.bat for more details."", ""Wrong error message:""); } catch (Exception e) { IOException exp = new IOException(); Assert.fail(""Wrong exception: expected ["" + e.getClass() + ""] but found ["" + exp.getClass() + ""] with message "" + e.getMessage()); } } "	0	0	0	0	1	0
"@Test public void analyzeDerivedFile() throws UnsupportedEncodingException, CoreException { final IFile file = mockFile("""", ""UTF-8"", ""java"", true, true); analyze(file, ""rulesets/java/basic.xml/ExtendsObject""); } "	0	0	0	0	1	0
"@Test public void testShowSuccessfulCalculation_ChangesResultText() { String expectedResultText = ""12""; calculatorActivity.showSuccessfulCalculation(expectedResultText);  Assertions.assertThat(calculatorActivity.resultText) .hasText(expectedResultText); } "	0	0	0	0	1	0
"public static Element getArticleElement(Element root) { NodeList<Element> allArticles = root.getElementsByTagName(""ARTICLE""); List<Element> visibleElements = getVisibleElements(allArticles); // Having multiple article elements usually indicates a bad case for this shortcut. // TODO(wychen): some sites exclude things like title and author in article element. if (visibleElements.size() == 1) { return visibleElements.get(0); } // Note that the CSS property matching is case sensitive, and ""Article"" is the correct // capitalization. String query = ""[itemscope][itemtype*=\""Article\""],[itemscope][itemtype*=\""Post\""]""; allArticles = DomUtil.querySelectorAll(root, query); visibleElements = getVisibleElements(allArticles); // It is commonly seen that the article is wrapped separately or in multiple layers. if (visibleElements.size() > 0) { return Element.as(DomUtil.getNearestCommonAncestor(visibleElements)); } return null; } "	0	0	0	0	1	0
private void refreshCopy() { copyOfArray = underlyingList.toArray(modelArray); fresh.set(true); } 	0	0	0	0	1	0
"protected void setVariableValue(VariableOrConstantEntity anEntity, Object aValue, boolean aDoSendUpdateFlag) { variableManager.set(anEntity, aValue); if (aDoSendUpdateFlag) { if (isFork()) { // A fork will have to send updates to its master, but not for constants, as the master has those anyway if (remotingServer != null && !(anEntity instanceof ConstantEntity)) { String tempName = IntegrityDSLUtil.getQualifiedVariableEntityName(anEntity, true); if (aValue == null || (aValue instanceof Serializable)) { remotingServer.sendVariableUpdate(tempName, (Serializable) aValue); } else { System.err.println(""SKIPPED SYNCING OF VARIABLE '"" + tempName + ""' TO MASTER - VALUE '"" + aValue + ""' OF TYPE '"" + aValue.getClass().getName() + ""' IS NOT SERIALIZABLE!""); } } } else { // The master will have to update all active forks. for (Entry<ForkDefinition, Fork> tempEntry : forkMap.entrySet()) { tempEntry.getValue().updateVariableValue(anEntity, aValue); } } } } "	0	0	0	0	1	0
public static WritableType<TupleN, TupleWritable> tuples(PType... ptypes) { TWTupleMapFn input = new TWTupleMapFn(ptypes); input.initialize(); TupleTWMapFn output = new TupleTWMapFn(ptypes); output.initialize(); return new WritableType(TupleN.class, TupleWritable.class, input, output, ptypes); } 	0	0	0	0	1	0
public static final <V1, V2> AvroType<Pair<V1, V2>> pairs(PType<V1> p1, PType<V2> p2) { Schema schema = createTupleSchema(p1, p2); GenericRecordToTuple input = new GenericRecordToTuple(p1, p2); input.initialize(); TupleToGenericRecord output = new TupleToGenericRecord(schema, p1, p2); output.initialize(); return new AvroType(Pair.class, schema, input, output, p1, p2); } 	0	0	0	0	1	0
@SubscribeEvent public void handleItemPickup(EntityItemPickupEvent event) { EntityPlayer player = event.entityPlayer; ItemStack quiver = null; ItemStack item = event.item.getEntityItem(); boolean foundJav = false; if(player.inventory instanceof InventoryPlayerTFC){  quiver = ((InventoryPlayerTFC)player.inventory).extraEquipInventory[0]; if(quiver != null && !(quiver.getItem() instanceof ItemQuiver)){ quiver = null; } for(int i = 0; i < 9; i++) { if(player.inventory.getStackInSlot(i) != null && player.inventory.getStackInSlot(i).getItem() instanceof ItemJavelin) foundJav = true; }  if(quiver != null) { if(item.getItem() instanceof ItemArrow) { ItemStack is = ((ItemQuiver)quiver.getItem()).addItem(quiver, item); if(is != null) event.item.setEntityItemStack(is); else { is = event.item.getEntityItem(); is.stackSize = 0; event.item.setEntityItemStack(is); event.setResult(Result.DENY); } } else if(item.getItem() instanceof ItemJavelin) { if(foundJav) { ItemStack is = ((ItemQuiver)quiver.getItem()).addItem(quiver, item); if(is == null) { is = event.item.getEntityItem(); is.stackSize = 0; event.item.setEntityItemStack(is); event.setResult(Result.DENY); } } } } }  if(item.getItem() instanceof ItemLooseRock) player.triggerAchievement(TFC_Achievements.achLooseRock); else if(item.getItem() instanceof ItemOreSmall) player.triggerAchievement(TFC_Achievements.achSmallOre); else if (item.getItem() instanceof ItemBloom) player.triggerAchievement(TFC_Achievements.achIronAge); else if(item.getItem().equals(TFCItems.GemDiamond)) player.triggerAchievement(TFC_Achievements.achDiamond); else if(item.getItem().equals(TFCItems.Onion) && TFCOptions.iDontLikeOnions) player.triggerAchievement(TFC_Achievements.achRutabaga); else if(item.getItem().equals(TFCItems.OreChunk) && (item.getItemDamage() == 11 || item.getItemDamage()== 46 || item.getItemDamage() == 60)) player.triggerAchievement(TFC_Achievements.achLimonite); } 	0	0	0	0	1	0
@Deprecated public static void appendDrop(final StringBuilder builder, final String str, final int maxWidth) { appendAbbreviate(builder, str, maxWidth); } 	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);  controller = (Controller) getApplicationContext();  Intent intent = getIntent();  player = new MediaPlayer(); isPlaying = false; bytes = null;  if(!intent.hasExtra(""view_code"") || !intent.hasExtra(""position"")) { throw new RuntimeException(""ViewInstrumentActivity: Intent is lacking position or view code""); }  } "	0	0	0	0	1	0
"public static InterledgerAddress[] addSelfToForwardedBy(InterledgerAddress[] forwardedBy, InterledgerAddress selfAddress) { InterledgerAddress[] result = new InterledgerAddress[forwardedBy.length+1]; for (int idx=0; idx < forwardedBy.length ; idx++){ if (forwardedBy[idx].equals(selfAddress)){ throw new RuntimeException(""loop was detected in the forwardedBy list.""); } result[idx] = forwardedBy[idx]; result[result.length-1] = selfAddress; } return result; } "	0	0	0	0	1	0
"@Test public void testRunOutOfMemoryAndSpillToDisk() {  // Configure test execution final int numBytesWritten = 1048576; final int tupleSize = 4 + TupleInfo.TUPLE_SIZE_OVERHEAD; final int numTuples = numBytesWritten / tupleSize; final int maxBufferSize = 2046; final int minBufferAllocation = 128; // false if im writing less, true if Im writing more than memory size final boolean eventPositive = ((numTuples*tupleSize) > maxBufferSize);   Schema schema = SchemaBuilder.getInstance().newField(Type.INT, ""4bytes"").build(); // Get the fake task, passing a schema SeepTask wot = createFakeSeepTask(schema);  // Configure properties of data reference manager Properties p = new Properties(); p.put(""bufferpool.max.memory.available"", maxBufferSize); p.put(""bufferpool.min.buffer.size"", minBufferAllocation); p.put(""master.ip"", """"); // mandatory config p.put(""worker.ip"", """"); // mandatory config p.put(""properties.file"", """"); // mandatory config WorkerConfig wc = new WorkerConfig(p); DataReferenceManager drm = DataReferenceManager.makeDataReferenceManager(wc); CoreOutput coreOutput = CoreOutputFactory.buildCoreOutputForTestingOneDatasetOutput(null, drm); API api = new Collector(0, coreOutput);  ITuple d = new ITuple(schema); // same input schema than output, who cares  for(int i = 0; i < numTuples; i++) { // create data byte[] data = new byte[] {0,1,2,3}; d.setData(data);  // call the task wot.processData(d, api); }  List<RuntimeEvent> evs = api.getRuntimeEvents();  for(RuntimeEvent ev : evs) { if (eventPositive){ assert(ev.getSpillToDiskRuntimeEvent() != null); } else if (! eventPositive) { assert(ev.getSpillToDiskRuntimeEvent() == null); } } } "	0	0	0	0	1	0
public void write(GClone clone) throws IOException { writer.writeValue(os, clone); } 	0	0	0	0	1	0
"@Override public void onSeqLibFragmentInteraction(Sequence selSeq) {  Toast toast = Toast.makeText( getApplicationContext(), ""Sequence selected for editing ..."", Toast.LENGTH_SHORT); toast.show();  currentSequence = selSeq; showSeqEd(); } "	0	0	0	0	1	0
"@Test public void findByUserNameShouldFindUserForRegisteredUserName() { // When UserEntity registeredUser = repository.findByUserName(REGISTERED_USER_NAME);  // Then assertThat(registeredUser, notNullValue()); assertThat(registeredUser.getUserName(),is(REGISTERED_USER_NAME)); assertThat(registeredUser.getId(), is(1L)); assertThat(registeredUser.getUserPassword(), is(""$2a$04$6r2eBlucnE3/m0fDYgE3e.eI5akUx55qPMID3O/SlptCIqOFFcCPK"")); } "	0	0	0	0	1	0
public void testCreation() { assertTrue(loginService.getClass() == ILoginService.class); } 	0	0	0	0	1	0
public void testCreation() { assertTrue(editor.getClass() == IEditorService.class); assertTrue(user.equals(editor.getUser())); } 	0	0	0	0	1	0
@Test(expected=CredentialsException.class) public void testValidateAndNoCacheSwitchDelegate() throws Exception { final LocalCachingAuthenticator authenticator = new LocalCachingAuthenticator(this.delegate, 10, 2, TimeUnit.MINUTES); authenticator.init(null); authenticator.validate(this.credentials, null); assertTrue(authenticator.isCached(this.credentials)); authenticator.setDelegate(new ThrowingAuthenticator()); authenticator.removeFromCache(this.credentials); authenticator.validate(this.credentials, null); } 	0	0	0	0	1	0
@Test public void testValidateAndCacheSwitchDelegate() throws HttpAction { final LocalCachingAuthenticator<UsernamePasswordCredentials> authenticator = new LocalCachingAuthenticator<>(this.delegate, 10, 2, TimeUnit.SECONDS); authenticator.init(null);  authenticator.validate(this.credentials, null); assertTrue(authenticator.isCached(this.credentials)); authenticator.setDelegate(new ThrowingAuthenticator()); authenticator.validate(this.credentials, null); assertTrue(authenticator.isCached(this.credentials)); } 	0	0	0	0	1	0
"public static void main(String[] argv) { try { // parse arguments ArgumentBean args = new ArgumentBean(argv);  // just print help message or version string and then exit if (args.printHelp()) { log.info(String.format(""%s%n%n%s"", getApplicationIdentifier(), args.usage())); System.exit(0); }  if (args.printVersion()) { log.info(String.join("" / "", getApplicationIdentifier(), getJavaRuntimeIdentifier(), getSystemIdentifier())); System.exit(0); }  if (args.clearCache() || args.clearUserData()) { // clear cache must be called manually if (System.console() == null) { log.severe(""`filebot -clear-cache` has been disabled due to abuse.""); System.exit(1); }  // clear persistent user preferences if (args.clearUserData()) { log.info(""Reset preferences""); Settings.forPackage(Main.class).clear(); }  // clear caches if (args.clearCache()) { log.info(""Clear cache""); for (File folder : getChildren(ApplicationFolder.Cache.getCanonicalFile(), FOLDERS)) { log.fine(""* Delete "" + folder); delete(folder); } }  // just clear cache and/or settings and then exit System.exit(0); }  // make sure we can access application arguments at any time setApplicationArguments(args);  // update system properties initializeSystemProperties(args); initializeLogging(args);  // make sure java.io.tmpdir exists createFolders(ApplicationFolder.Temp.get());  // initialize this stuff before anything else CacheManager.getInstance(); initializeSecurityManager();  // initialize history spooler HistorySpooler.getInstance().setPersistentHistoryEnabled(useRenameHistory());  // CLI mode => run command-line interface and then exit if (args.runCLI()) { int status = new ArgumentProcessor().run(args); System.exit(status); }  if (isHeadless()) { log.info(String.format(""%s / %s (headless)%n%n%s"", getApplicationIdentifier(), getJavaRuntimeIdentifier(), args.usage())); System.exit(1); }  // GUI mode => start user interface SwingUtilities.invokeLater(() -> { startUserInterface(args);  // run background tasks newSwingWorker(() -> onStart(args)); }); } catch (CmdLineException e) { // illegal arguments => print CLI error message log.severe(e::getMessage); System.exit(1); } catch (Throwable e) { // unexpected error => dump stack debug.log(Level.SEVERE, ""Error during startup: "" + getRootCause(e), e); System.exit(1); } } "	0	0	0	0	1	0
"private void replaceText(String newText) {  String existingText = getText();  // Don't waste our own time if (newText.equals(existingText)) { return; }  int changePosition = 0; StyledDocument document = textPane.getStyledDocument(); AttributeSet style = currentStyle;  // Do not perform incremental model updates while we update document.removeDocumentListener(this);  try { for (DiffMatchPatch.Diff thisDiff : getTextDifferences(existingText, newText)) { switch (thisDiff.operation) { case EQUAL: style = document.getCharacterElement(changePosition).getAttributes(); changePosition += thisDiff.text.length(); break; case DELETE: style = document.getCharacterElement(changePosition).getAttributes(); document.remove(changePosition, thisDiff.text.length()); break; case INSERT: document.insertString(changePosition, thisDiff.text, style); changePosition += thisDiff.text.length(); break; } } } catch (BadLocationException e) { throw new RuntimeException(""An error occurred updating field text."", e); } finally { document.addDocumentListener(this); }  ThreadUtils.invokeAndWaitAsNeeded(this::repaint); } "	0	0	0	0	1	0
"@Override public void onGlobalLayout() { Log.d(TAG, ""searching after layout""); performSearch.run(); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) { mViewPager.getViewTreeObserver().removeOnGlobalLayoutListener(this); } else { //noinspection deprecation mViewPager.getViewTreeObserver().removeGlobalOnLayoutListener(this); } } "	0	0	0	0	1	0
"protected void addSmtpServer(SmtpServer smtpServer, List<ModelNode> list) { ModelNode node = new ModelNode(); node.get(OP_ADDR).set(smtpServerAddress.append(""mail-session"", smtpServer.name().toLowerCase()).toModelNode()); node.get(OP).set(ADD); node.get(""jndi-name"").set(smtpServer.jndiName()); list.add(node);  node = new ModelNode(); node.get(OP_ADDR).set(smtpServerAddress.append(""mail-session"", smtpServer.name().toLowerCase()).append(""server"", ""smtp"").toModelNode()); node.get(OP).set(ADD); node.get(""outbound-socket-binding-ref"").set(smtpServer.outboundSocketBindingRef()); list.add(node);  node = new ModelNode(); node.get(OP_ADDR).set(smtpServerAddress.append(""socket-binding-group"", ""standard-sockets"").append(""remote-destination-outbound-socket-binding"", smtpServer.outboundSocketBindingRef()).toModelNode()); node.get(OP).set(ADD); node.get(""host"").set(smtpServer.host()); node.get(""port"").set(smtpServer.port()); list.add(node); } "	0	0	0	0	1	0
public boolean validate(CBORObject cnKey) throws CoseException {  CBORObject obj = CBORObject.NewArray(); obj.Add(contextString); if (objProtected.size() > 0) obj.Add(rgbProtected); else obj.Add(CBORObject.FromObject(new byte[0])); obj.Add(externalData); obj.Add(rgbContent); return validateSignature(obj.EncodeToBytes(), rgbSignature, cnKey); } 	0	0	0	0	1	0
"public String getJobStatus(CloudJob cloudJob) {  String stsArn = cloudJob.getProperty(CloudJob.PROPERTY_STS_ARN); String clientSecret = cloudJob.getProperty(CloudJob.PROPERTY_CLIENT_SECRET); String s3Role = cloudJob.getProperty(CloudJob.PROPERTY_S3_ROLE);  //The service hangs onto the underlying job Object but the DB is the point of truth //Make sure we get an updated job object first! VEGLJob job = jobManager.getJobById(cloudJob.getId(), stsArn, clientSecret, s3Role); if (job == null) { return null; }  //If the job is currently in the done/saved IN_QUEUE, ERROR or WALLTIME_EXCEEDED state - do absolutely nothing. if (job.getStatus().equals(JobBuilderController.STATUS_DONE) || job.getStatus().equals(JobBuilderController.STATUS_UNSUBMITTED) || job.getStatus().equals(JobBuilderController.STATUS_INQUEUE) || job.getStatus().equals(JobBuilderController.STATUS_ERROR)|| job.getStatus().equals(JobBuilderController.STATUS_WALLTIME_EXCEEDED)) { return job.getStatus(); }  //Get the output files for this job CloudStorageService cloudStorageService = getStorageService(job); if (cloudStorageService == null) { log.warn(String.format(""No cloud storage service with id '%1$s' for job '%2$s'. cannot update job status"", job.getStorageServiceId(), job.getId())); return job.getStatus(); } CloudFileInformation[] results = null; try { results = cloudStorageService.listJobFiles(job); } catch (Exception e) { return job.getStatus(); }  boolean jobStarted = containsFile(results, ""workflow-version.txt""); boolean jobFinished = containsFile(results, JobListController.VL_TERMINATION_FILE); // VM side walltime exceeded boolean jobWalltimeExceeded = containsFile(results, ""walltime-exceeded.txt"");  String expectedStatus = JobBuilderController.STATUS_PENDING; if (jobFinished) { expectedStatus = JobBuilderController.STATUS_DONE; } else if (jobStarted) { expectedStatus = JobBuilderController.STATUS_ACTIVE; } else if(jobWalltimeExceeded) { expectedStatus = JobBuilderController.STATUS_WALLTIME_EXCEEDED; }  // If the walltime has exceeded and the VM side walltime check has // failed to shut the instance down, shut it down if(jobStarted && !jobFinished && job.getWalltime() != 0) { if(job.getSubmitDate().getTime() + (job.getWalltime()*60*1000) < new Date().getTime()) { try { CloudComputeService cloudComputeService = getComputeService(job); cloudComputeService.terminateJob(job); return JobBuilderController.STATUS_WALLTIME_EXCEEDED; } catch(Exception e) { log.warn(""Exception shutting down terminal: "" + job.toString(), e); return JobBuilderController.STATUS_WALLTIME_EXCEEDED; } } }  //There is also a possibility that the cloud has had issues booting the VM... lets see what we can dig up CloudComputeService cloudComputeService = getComputeService(job); try { switch (cloudComputeService.getJobStatus(job)) { case Missing: if (jobFinished) { return JobBuilderController.STATUS_DONE; } else if (jobWalltimeExceeded) { return JobBuilderController.STATUS_WALLTIME_EXCEEDED; } else { return JobBuilderController.STATUS_ERROR; } case Pending: case Running: return expectedStatus; } } catch (Exception ex) { log.warn(""Exception looking up job VM status:"" + job.toString(), ex); return job.getStatus(); }  return expectedStatus; } "	0	0	0	0	1	0
@Override public SampledModel sampleNext(Random random, SampledModel current, double temperature) { current.setExponent(temperature); current.forwardSample(random); return current; } 	0	0	0	0	1	0
public void setYear(int year) { this.year = year; calendar.set(Calendar.YEAR,year); } 	0	0	0	0	1	0
"public void musicSetting(){ try { URL url = this.getClass().getClassLoader().getResource(""assets/music/mario.mp3""); AudioInputStream audioIn = AudioSystem.getAudioInputStream(url); Clip clip = AudioSystem.getClip();  clip.open(audioIn); clip.loop(Clip.LOOP_CONTINUOUSLY); clip.start(); } catch (Exception e){ System.out.println(""Failed to load music""); e.printStackTrace(); } } "	0	0	0	0	1	0
"@Test public void testWeekly() throws Exception { System.out.println(""TestWeekly""); Set<LocalDateTime> dateSet = new HashSet<>(); //    RecurType recurType = new RecurType(""FREQ=WEEKLY;INTERVAL=2;UNTIL=20171025T000000Z""); //    RecurType recur = new RecurType(""FREQ=WEEKLY;COUNT=15;INTERVAL=2;BYDAY=TU,WE,TH""); RecurType recur = new RecurType(""FREQ=DAILY;INTERVAL=2;UNTIL=20170925T000000Z""); //    RecurType recur = new RecurType(""FREQ=WEEKLY;UNTIL=20140730T000000Z;WKST=SU;BYDAY=TU,WE,TH,SA""); //    RecurType recur = new RecurType(""FREQ=WEEKLY;COUNT=15;INTERVAL=2;WKST=SU;BYDAY=TU,WE,TH""); //    RecurType recur = new RecurType(""FREQ=DAILY;INTERVAL=1;COUNT=5""); //    RecurType recur = new RecurType(""FREQ=WEEKLY;INTERVAL=2;BYDAY=MO,FR;BYHOUR=11,18"");  WeekFields weekFields = WeekFields.of(DayOfWeek.MONDAY, 4);  Set<LocalDateTime> daily = ICalendar.daily(dateSet, recur, LocalDateTime.now());  System.out.println(""  weekly size  "" + daily.size()); for (LocalDateTime localDateTime : daily) { System.out.println(""   "" + localDateTime); } for (Integer integer : recur.getByweekno()) { System.out.println(""  by week no "" + integer); }  } "	0	0	0	0	1	0
@Override protected void onRejectTagsChangesDialogPositive() { imagesViewModel.onRejectTagsChangesDialogPositive(); } 	0	0	0	0	1	0
@Override public void start(StartContext startContext) throws StartException { resolveFileLocation(); try { credentialStore = provider != null ? CredentialStore.getInstance(type, provider) : CredentialStore.getInstance(type); credentialStore.initialize(credentialStoreAttributes); } catch (CredentialStoreException | NoSuchAlgorithmException | NoSuchProviderException e) { throw ElytronSubsystemMessages.ROOT_LOGGER.unableToStartService(e); } } 	0	0	0	0	1	0
"private void installModule(Module module) { for (Binding binding : module.getBindingSet()) { if (binding == null) { throw new IllegalStateException(""A module can't have a null binding.""); }  Class clazz = binding.getKey(); synchronized (clazz) { String bindingName = binding.getName(); if (!hasTestModules || getScopedProvider(clazz, bindingName) == null) { InternalProviderImpl provider = toProvider(binding); if (binding.isScoped()) { installScopedProvider(clazz, bindingName, (ScopedProviderImpl) provider); } else { installUnScopedProvider(clazz, bindingName, provider); } } } } } "	0	0	0	0	1	0
"@BeforeClass public static void before() throws URISyntaxException, IOException { File pdf = new File(getSystemIndependentPath(""/FR.pdf"")); PDDocument document = PDDocument.load(pdf, false, true); collection = PBFeatureParser.getFeaturesCollection(document); } "	0	0	0	0	1	0
"private void showEditMeasureDialog(int pos) { ViewUtils.lockScreenOrientation(this);  EditMeasureDialogFragment dialog = new EditMeasureDialogFragment();  Bundle bundle = new Bundle(); bundle.putSerializable(LeveOrthoActivity.ORTHOGONAL_SURVEY, this.leveOrtho); bundle.putInt(LeveOrthoActivity.MEASURE_POSITION, pos);  dialog.setArguments(bundle); dialog.show(this.getSupportFragmentManager(), ""EditMeasureDialogFragment""); } "	0	0	0	0	1	0
"@SuppressWarnings({ ""rawtypes"", ""unchecked"" }) public void setValue(Object object, Object newValue) throws PropertyException {  if (writeMethod == null) { throw new PropertyException(""Property '"" + propertyName + ""' is not writable"", this, object); }  Class type = writeMethod.getParameterTypes()[0]; Converter<?> converter = ConverterFactory.factory.getConverter(type); newValue = (converter != null) ? converter.convert(newValue, type) : newValue;  // this will take care of primitives. if (newValue == null) { newValue = this.nullValue; }  try { writeMethod.invoke(object, newValue); } catch (Throwable th) { throw new PropertyException(""Error reading property: "" + propertyName, this, object, th); } } "	0	0	0	0	1	0
private void check(Player p, ItemStack repaired) {  ViewSession session = _anvilMap.get(p); if (session == null) return;  View current = session.getCurrentView(); if (current == null) return;  if (!(current instanceof FilteredAnvilView)) return;  FilteredAnvilView view = (FilteredAnvilView)current;  ItemFilterManager filter = view.getFilterManager(); if (filter == null) return;  if (!filter.isValidItem(repaired)) { InventoryView invView = current.getInventoryView(); if (invView != null) { ItemStack stack = repaired.clone(); ItemStackUtils.setLore(stack, NucLang.get(_NOT_REPAIRABLE)); invView.setItem(0, stack); } } } 	0	0	0	0	1	0
public void focusLost(java.awt.event.FocusEvent evt) { forgotEmailFocusLost(evt); } 	0	0	0	0	1	0
public void focusGained(java.awt.event.FocusEvent evt) { forgotEmailFocusGained(evt); } 	0	0	0	0	1	0
"public void setPropertyValue(ContextDependency<?> resourceContext, Integer propertyDescriptorId, String unobfuscatedValue) throws ValidationException { PropertyEntity p = resourceContext.getPropertyForDescriptor(propertyDescriptorId); if (p == null) { PropertyDescriptorEntity propertyDescriptor = entityManager.find(PropertyDescriptorEntity.class, propertyDescriptorId); p = new PropertyEntity(); p.setDescriptor(propertyDescriptor); p.setOwningResource(resourceContext); resourceContext.addProperty(p); } if (!propertyValidationService.canPropertyValueBeSetOnContext(p.getDescriptor(), resourceContext)) { throw new ValidationException(""The property "" + p.getDescriptor() + "" can not be set on context "" + resourceContext.getContext()); } p.setValue(unobfuscatedValue); } "	0	0	0	0	1	0
private double exponentialQuantile(double expected) { return 1.0 - Math.pow( rng.nextDouble(), 1.0 / (1.0 - expected) - 1.0); } 	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_order_menu);  menuItems = new ArrayList<>(); restaurant = (Restaurant) getIntent().getSerializableExtra(""Restaurant""); menuItems.addAll(restaurant.getMenu().getSubItems()); items = new ArrayList<>(); expandableListView = (ExpandableListView) findViewById(R.id.menu_items); goToCart = (Button) findViewById(R.id.cart); order = new Order();  for (MenuItem item : menuItems) { items.add(new OrderItem(item)); for (ItemOption optionGroup : item.getOptions()) { items.get(items.size() - 1).addOptionGroup(optionGroup); for (OptionSelection selection : optionGroup.getSelections()) { items.get(items.size() - 1).getOptionGroups().get(items.get(items.size() - 1). getOptionGroups().size() - 1).addOption(new OrderItemOption(selection)); } } }  orderItemAdapter = new OrderItemAdapter(OrderMenuActivity.this, this, items); expandableListView.setAdapter(orderItemAdapter); expandableListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() { @Override public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) { if (ExpandableListView.getPackedPositionType(id) == ExpandableListView.PACKED_POSITION_TYPE_GROUP) { int groupPosition = ExpandableListView.getPackedPositionGroup(id); OrderItem item = (OrderItem) orderItemAdapter.getGroup(groupPosition); order.addItem(item);  return true; }  return false; } });  goToCart.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent intent = new Intent(OrderMenuActivity.this, CartActivity.class); intent.putExtra(""cart"", order); intent.putExtra(""restaurantId"", restaurant.getKey()); intent.putExtra(""ownerId"", restaurant.getOwnerId()); intent.putExtra(""deliveryCharge"", restaurant.getCharge()); startActivity(intent); } }); } "	0	0	0	0	1	0
"private void sendSlackMessage(SlackConfiguration slackConfiguration, RepositoryBuild build, GitInfo gitInfo) { String fallback = String.format(""Module Build %s-%s-%s finished with state %s"", gitInfo.getRepository(), gitInfo.getRepository(), gitInfo.getBranch(), build.getState().toString()); Optional<String> color = ABSENT_STRING; switch (build.getState()) { case SUCCEEDED: color = Optional.of(""good""); break; case CANCELLED: color = Optional.of(""warning""); break; case UNSTABLE: color = Optional.of(""danger""); break; case FAILED: color = Optional.of(""danger""); break; }  Optional<String> title = Optional.of(fallback); Optional<String> link = Optional.of(blazarUrlHelper.getBlazarUiLink(build));  SlackAttachment attachment = new SlackAttachment(fallback, color, ABSENT_STRING, ABSENT_STRING, ABSENT_STRING, ABSENT_STRING, title, link, ABSENT_STRING, Collections.<SlackAttachmentField>emptyList(), ABSENT_STRING); SlackMessage message = new SlackMessage(ABSENT_STRING, ABSENT_STRING, ABSENT_STRING, ABSENT_STRING, slackConfiguration.getChannelName(), Lists.newArrayList(attachment)); slackClient.sendMessage(message); } "	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedState) { super.onCreate(savedState); setContentView(R.layout.register); setTitle(R.string.register_title);  initializeHeader();  // Set header buttons to no longer be visable since we are on Register page Button btAdd = (Button)findViewById(R.id.bAdd); btAdd.setVisibility(ViewSwitcher.INVISIBLE);  // Setup onClick event for DOB bDOB = (Button)findViewById(R.id.bDOB); bDOB.setOnClickListener(new OnClickListener() { public void onClick(View v) { showDialog(DOB_DIALOG_ID); } });  // Setup onClick event for Register button Button bRegister = (Button)findViewById(R.id.bRegister); bRegister.setOnClickListener(new OnClickListener() { public void onClick(View v) { String user = ((EditText)findViewById(R.id.etUserName)).getText().toString(); String password = ((EditText)findViewById(R.id.etPassword)).getText().toString(); String confirmPassword = ((EditText)findViewById(R.id.etPasswordConfirm)).getText().toString(); String email = ((EditText)findViewById(R.id.etEmail)).getText().toString(); String dob = ((Button)findViewById(R.id.bDOB)).getText().toString();  // verify all fields are completed if(user.equalsIgnoreCase("""") || password.equalsIgnoreCase("""") || confirmPassword.equalsIgnoreCase("""") || email.equalsIgnoreCase("""") || dob.equalsIgnoreCase("""")) { Toast.makeText(Register.this, getString(R.string.msgRegisterAllFieldsMandatory), Toast.LENGTH_LONG).show(); } // verify password fields match else if (!password.equals(confirmPassword)) { Toast.makeText(Register.this, getString(R.string.msgPasswordsNotMatching), Toast.LENGTH_LONG).show(); } else { boolean success = Caller.getInstance(getApplicationContext()).addUser(user, password, email, getFormattedDOB()); if(success) { Toast.makeText(Register.this, getString(R.string.msgRegistered), Toast.LENGTH_LONG).show(); finish(); } else { Toast.makeText(Register.this, getString(R.string.msgRegistrationFailed), Toast.LENGTH_LONG).show(); } } } }); } "	0	0	0	0	1	0
"public void removeAllContextsInSession(HttpSession session) { Assert.requireNonNull(session, ""session""); for (DolphinContext context : getContexts(session)) { context.destroy(); } session.removeAttribute(DOLPHIN_CONTEXT_MAP); } "	0	0	0	0	1	0
protected void displayLores(WritableImage screen, int xOffset, int y, int rowAddress) { int c1 = ((RAM128k) computer.getMemory()).getMainMemory().readByte(rowAddress + xOffset) & 0x0FF; if ((y & 7) < 4) { c1 &= 15; } else { c1 >>= 4; } Color color = Palette.color[c1]; // Unrolled loop, faster PixelWriter writer = screen.getPixelWriter(); int xx = xOffset * 7; writer.setColor(xx++, y, color); writer.setColor(xx++, y, color); writer.setColor(xx++, y, color); writer.setColor(xx++, y, color); writer.setColor(xx++, y, color); writer.setColor(xx++, y, color); writer.setColor(xx++, y, color); writer.setColor(xx++, y, color); writer.setColor(xx++, y, color); writer.setColor(xx++, y, color); writer.setColor(xx++, y, color); writer.setColor(xx++, y, color); writer.setColor(xx++, y, color); writer.setColor(xx++, y, color); } 	0	0	0	0	1	0
"private static Set<String> getManualVariantGeneNames(Patient p) { PatientData<Map<String, String>> variants = null; Set<String> geneNames = new HashSet<String>(); if (p != null) { variants = p.getData(""variants""); } if (variants != null && variants.isIndexed()) { for (Map<String, String> variant : variants) { String variantName = variant.get(""hgvs_id""); if (variantName == null) { continue; } String geneSymbol = variant.get(""genesymbol""); if (geneSymbol == null) { continue; } String interpretation = variant.get(""interpretation""); if (interpretation != null && Arrays.asList(TOP_INTERPRETATIONS).contains(interpretation)) { geneNames.add(geneSymbol); } } return Collections.unmodifiableSet(geneNames); } return Collections.emptySet(); } "	0	0	0	0	1	0
private LoadBalancer getLoadBalancer() { AmazonCredentials credentials = getCredentials(); String region = getRegion(); String versionString = inferServerGroupVersion();  LoadBalancer loadBalancer = new LoadBalancer(); loadBalancer.setContainerName(versionString); loadBalancer.setContainerPort(description.getContainerPort());  if (description.getTargetGroups().size() == 1) { AmazonElasticLoadBalancing loadBalancingV2 = amazonClientProvider.getAmazonElasticLoadBalancingV2( description.getCredentialAccount(), credentials.getCredentialsProvider(), region); String targetGroupName = description.getTargetGroups().get(0);  // TODO - make target group a single value field in Deck instead of an array here DescribeTargetGroupsRequest request = new DescribeTargetGroupsRequest().withNames(targetGroupName); DescribeTargetGroupsResult describeTargetGroupsResult = loadBalancingV2.describeTargetGroups(request); loadBalancer.setTargetGroupArn(describeTargetGroupsResult.getTargetGroups().get(0).getTargetGroupArn()); } return loadBalancer; } 	0	0	0	0	1	0
"public static void main(String... args) throws Exception { final OptionParser parser = new OptionParser();  final OptionSpec<Void> help = parser.accepts(""help"").forHelp(); final OptionSpec<File> input = parser.accepts(""input"").withRequiredArg().ofType(File.class).required() .describedAs(""The input Darwin Core Archive file to be checked."");  OptionSet options = null;  try { options = parser.parse(args); } catch (final OptionException e) { System.out.println(e.getMessage()); parser.printHelpOn(System.out); throw e; }  if (options.has(help)) { parser.printHelpOn(System.out); return; }  final Path inputPath = input.value(options).toPath(); if (!Files.exists(inputPath)) { throw new FileNotFoundException(""Could not find input Darwin Core Archive file: "" + inputPath.toString()); }  if (!inputPath.getFileName().endsWith("".zip"")) { throw new RuntimeException(""Only working on validating .zip files right now: "" + inputPath); }  Path tempDir = Files.createTempDirectory(""dwca-check-""); Path metadataPath = checkZip(inputPath, tempDir); parseMetadataXml(metadataPath); } "	0	0	0	0	1	0
"public MapValues getOrCreateValues(KeyWriter keyWriter) { keyWriter.commit(); // calculate hash remembering ""key"" structure // [ len | value block | key offset block | key data block ] int index = Hash.hashMem(keyWriter.startAddr + keyBlockOffset, keyWriter.len - keyBlockOffset) & mask; long offset = offsets.get(index);  if (offset == -1) { offsets.set(index, keyWriter.startAddr - kStart); if (--free == 0) { rehash(); } size++; return values.of(keyWriter.startAddr, true); } else if (eq(keyWriter, offset)) { // rollback added key kPos = keyWriter.startAddr; return values.of(kStart + offset, false); } else { return probe0(keyWriter, index); } } "	0	0	0	0	1	0
public static Object getValue(final Object iObject, final ORecordInternal<?> iRecord, final OCommandContext iContext) { if (iObject == null) return null;  if (iObject instanceof OSQLFilterItem) return ((OSQLFilterItem) iObject).getValue(iRecord, null, iContext); else if (iObject instanceof String) { final String s = ((String) iObject).trim(); if (!s.isEmpty() && !OIOUtils.isStringContent(iObject) && !Character.isDigit(s.charAt(0))) // INTERPRETS IT return ODocumentHelper.getFieldValue(iRecord, s, iContext); }  return iObject; } 	0	0	0	0	1	0
"@Test public void issue_1115() {  ProjectFactory.newProject(""camel-spring"").template(ProjectTemplate.CBR).type(ProjectType.SPRING).create(); new CamelProject(""camel-spring"").runCamelContext(""camel-context.xml""); AbstractWait.sleep(TimePeriod.NORMAL); new FuseJMXNavigator().getNode(""Local Camel Context"", ""Camel"", ""camel"").select();  try { new ContextMenu(""Close Camel Context""); } catch (CoreLayerException ex) { return; } finally { new ConsoleView().terminateConsole(); }  fail(""Context menu item 'Close Camel Context' is available!""); } "	0	0	0	0	1	0
"protected String hashFile(File file) { if (stateGenerator.getParameters().getCompareMode() == CompareMode.FAST) { return StateGenerator.NO_HASH; }  try { if (file.length() < StateGenerator.SIZE_50_MO) { return hashOnceTheCompleteFileContent(file); } else { return hashFileChunkByChunk(file); } } catch (Exception ex) { throw new RuntimeException(""Exception occurred during file hashing"", ex); } } "	0	0	0	0	1	0
"public synchronized void initConfig() throws ApplicationManagementException { try { File appMgtConfig = new File(applicationMgtConfigXMLPath); Document doc = ApplicationManagementUtil.convertToDocument(appMgtConfig);  /* Un-marshaling Certificate Management configuration */ JAXBContext jaxbContext = JAXBContext.newInstance(ApplicationManagementConfigurations.class); Unmarshaller unmarshaller = jaxbContext.createUnmarshaller(); this.applicationManagerConfiguration = (ApplicationManagementConfigurations) unmarshaller.unmarshal(doc); } catch (Exception e) { log.error(e); throw new ApplicationManagementException(""Error occurred while initializing application config"", e); } } "	0	0	0	0	1	0
"private File getResourceAsFile(String resourcePath) { try { InputStream in = this.getClass().getResource(resourcePath).openStream(); if (in == null) { return null; } File tempFile = File.createTempFile(String.valueOf(in.hashCode()), "".tmp""); tempFile.deleteOnExit(); FileOutputStream out = new FileOutputStream(tempFile); IOUtils.copy(in, out); return tempFile; } catch (IOException e) { e.printStackTrace(); return null; } } "	0	0	0	0	1	0
@Override protected void onPause() { super.onPause();  multiplayerGame.setGameState(MultiplayerGame.GameState.FINISHED); db.updateOnlineGame(multiplayerGame); updaterPlayerList.interrupt(); } 	0	0	0	0	1	0
"private static void waitForServiceRestoration() { boolean loop = true; while (loop) { try { System.out.println(""WARN - Strava temporarily unavailable (503 error) - pausing execution for 60 seconds""); Thread.sleep(60000l); } catch (final InterruptedException e) { // ignore } try { TestUtils.strava().getAuthenticatedAthlete(); // If the call works, then we didn't get a service unavailable exception so we're good to go loop = false; } catch (final StravaServiceUnavailableException e) { loop = true; } }  } "	0	0	0	0	1	0
@Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { if(requestCode == SUBSCRIPTION_REQUEST_CODE){ if(resultCode == RESULT_OK){ String subredditName = data.getStringExtra(SubscriptionActivity.RESULT_SUBREDDIT_NAME); if(!subredditName.isEmpty() || subredditName != null){ //select home fragment - first item Bundle bundle = new Bundle(); bundle.putString(SubscriptionActivity.RESULT_SUBREDDIT_NAME, subredditName);  HomeFragment homeFragment = (HomeFragment) Fragment .instantiate(activity(), Fragments.HOME.getFragment());  openFragmentWithResult(homeFragment, bundle); } } return; } super.onActivityResult(requestCode, resultCode, data); } 	0	0	0	0	1	0
"@Override public void run() { while (forever) { try { for (EdgeInfo ei : this.outboundEdges.map.values()) { if (ei.isActive() && ei.getChannel() != null) { WorkMessage wm = createHB(ei); ei.getChannel().writeAndFlush(wm); } else { // TODO create a client to the node  group = new NioEventLoopGroup(); try { WorkInit wi = new WorkInit(null, false); Bootstrap b = new Bootstrap(); b.group(group).channel(NioSocketChannel.class).handler(wi); b.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 10000); b.option(ChannelOption.TCP_NODELAY, true); b.option(ChannelOption.SO_KEEPALIVE, true);  // Make the connection attempt. ChannelFuture channel = b.connect(ei.getHost(), ei.getPort()).syncUninterruptibly();  // want to monitor the connection to the server s.t. if we loose the // connection, we can try to re-establish it. //							channel.channel().closeFuture();  ei.setChannel(channel.channel()); ei.setActive(channel.channel().isActive()); System.out.println(channel.channel().localAddress() + "" -> open: "" + channel.channel().isOpen() + "", write: "" + channel.channel().isWritable() + "", reg: "" + channel.channel().isRegistered());  } catch (Throwable ex) { logger.error(""failed to initialize the client connection"");//, ex); //							ex.printStackTrace(); } logger.info(""trying to connect to node "" + ei.getRef()); } }  Thread.sleep(dt); } catch (InterruptedException e) { // TODO Auto-generated catch block e.printStackTrace(); } } } "	0	0	0	0	1	0
public void actionPerformed(java.awt.event.ActionEvent evt) { submitPassActionPerformed(evt); } 	0	0	0	0	1	0
public void mouseExited(java.awt.event.MouseEvent evt) { submitPassMouseExited(evt); } 	0	0	0	0	1	0
@Override protected List<IEObjectPropertyAccessor> createAccessors(List<? extends EObject> data) { List<IEObjectPropertyAccessor> accessors = super.createAccessors(data); Collections.addAll(accessors, new RequirementAccessor(), new IncomingReferenceAccessor()); for (EObject eo : data) { if (eo instanceof DesignFunctionType) { accessors.add(new TraceableSpecificationAccessor()); break; } if (eo instanceof HardwareComponentPrototype || eo instanceof FunctionConnector) { accessors.add(new FunctionAllocationAccessor(eo)); break; } } return accessors; } 	0	0	0	0	1	0
"@Override public boolean match(UWSUrl urlInterpreter, JobOwner user, HttpServletRequest request) throws UWSException{ return urlInterpreter.hasJobList() && urlInterpreter.hasJob() && (request.getMethod().equalsIgnoreCase(""delete"") || (request.getMethod().equalsIgnoreCase(""post"") && UWSToolBox.hasParameter(UWSJob.PARAM_ACTION, UWSJob.ACTION_DELETE, request, false))); } "	0	0	0	0	1	0
"public static void main(String [] args){ Translator et = null; //Espresso == 0, Appium == 1. Others to follow. int environment_switch = 0; //Whether to print to the output file or not. int to_print = 0; //File name for printing. String filename = ""./IO/gmdice_simple.txt""; // String outname = ""./IO/TestFile.java"";  if(args.length > 0){ environment_switch = Integer.parseInt(args[0]); to_print = Integer.parseInt(args[1]); if(args.length > 2){ filename = args[2]; if(args.length > 3){ outname = args[3]; } } }else{ Scanner user_input = new Scanner( System.in ); System.out.println(""What environment are you using? Espresso (0) or Appium (1)?""); environment_switch = Integer.parseInt(user_input.next()); if(environment_switch == 1){ System.out.println(""\nWould you like a .java file (0) or a server (1)?""); to_print = Integer.parseInt(user_input.next()); }else{ to_print = 0; } }    String toreturn = ""Fail case""; try { tc = parse(filename); switch (environment_switch){ case 0: et = new EspressoTranslator(); break; case 1: //Have a translator for Appium. et = new AppiumTranslator(); break; } et.setFile(outname); et.steps_iterator(tc); toreturn = ""Successfully parsed""; } catch (IOException e) { e.printStackTrace(); }  //Either print to a file or start up a server. switch(to_print){ case 0: //Use the print-to-file function to make the tester go in a file. try { et.writeToFile(); et.closeFile(); } catch (IOException e) { // Had to have catch. e.printStackTrace(); } break; case 1: AppiumLive al = new AppiumLive(); try { al.start(tc); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (AppiumException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (InterruptedException e) { // TODO Auto-generated catch block e.printStackTrace(); } break; }   System.out.printf(toreturn);  return; } "	0	0	0	0	1	0
@Override public void onActionSuccess(int action, @Nullable BaseResponse response) { if (action == ACTION_SEND_CAPTCHA) { mNextButtonAdapter.sync(); mWaitingTime = DEFAULT_WAITING_TIME; Toast.makeText(getContext(), getResources().getString(R.string.receive_captcha_notice), Toast.LENGTH_SHORT) .show(); } else if (action == ACTION_CHECK_CAPTCHA) { mNextButtonAdapter.sync(); Bundle bundle = RegisterFragment.prepareArgument(mCaptchaRequest, mCountryCode); Navigator.moveTo(this, RegisterFragment.class, bundle); } } 	0	0	0	0	1	0
public static String path(String s) { URL url = ResourceLocator.class.getResource(s); if(url == null) { url = ResourceLocator.class.getClassLoader().getResource(s); } return url.getPath(); } 	0	0	0	0	1	0
"@Before public void setup() { parser = new Parser(); final Builder builder = new CompilationContext.Builder( null ); builder.addValue( ""Num"", ""Integer"", 1 ); builder.addFlow( ""One"", ""Unit"", ""Integer"", factory.buildFromConstant( 1 ) ); builder.addFlow( ""Double"", ""Integer"", ""Integer"", factory.buildFromFunction( (final Integer x) -> 2*x ) ); builder.addFlow( ""Same"", ""Integer"", ""Integer"", factory.buildFromFunction( (final Integer x) -> x ) ); builder.addFlowConstructor( ""Int"", ""Unit"", ""Integer"", props -> { final Object val = props.get( ""num"" ); if ( val instanceof Integer ) { return new Compiler.Success<>( factory.buildFromConstant( (Integer) val ) ); } else { return new Compiler.Failure<>( ""Must have Integer property \""num\""."" ); } } ); builder.addMatcher( ""IntVal"", new IntValMatcher() ); builder.addMatcher( ""Complex"", new ComplexMatcher() ); compiler = new Compiler( parser, builder.build(), factory ); } "	0	0	0	0	1	0
public boolean isOnline(){ return this.check().equals(STATUS_ONLINE); } 	0	0	0	0	1	0
public void render() {  // Start to draw strings. batch.setProjectionMatrix(gm.getCam().combined); batch.begin();  // Draw title textFont.draw(batch, CurrentLevel, (gm.WIDTH / 8) * 7, (gm.HEIGHT / 8) * 7); // ----------- Ta reda på mer korrekta koordinater.  batch.end(); } 	0	0	0	0	1	0
public void render() {  // Start to draw strings. batch.setProjectionMatrix(gm.getCam().combined); batch.begin();  // Draw title textFont.draw(batch, CurrentLevel, (gm.WIDTH ) / 8, (gm.HEIGHT / 8)); // ----------- Ta reda på mer korrekta koordinater.  batch.end(); } 	0	0	0	0	1	0
"public void mainThreadHeartbeat(int currentTick) { this.currentTick = currentTick; // Accepts pending. while (!pending.isEmpty()) { queue.offer(pending.poll()); } // Main heart beat. while (isReady(currentTick)) { TaskHandler taskHandler = queue.poll(); if (taskHandler.isCancelled()) { taskMap.remove(taskHandler.getTaskId()); continue; } else if (taskHandler.isAsynchronous()) { asyncPool.execute(taskHandler.getTask()); } else { taskHandler.timing.startTiming(); try { taskHandler.run(currentTick); } catch (Throwable e) { Server.getInstance().getLogger().critical(""Could not execute taskHandler "" + taskHandler.getTaskId() + "": "" + e.getMessage()); Server.getInstance().getLogger().logException(e instanceof Exception ? (Exception) e : new RuntimeException(e)); } taskHandler.timing.stopTiming(); } if (taskHandler.isRepeating()) { taskHandler.setNextRunTick(currentTick + taskHandler.getPeriod()); pending.offer(taskHandler); } else { try { taskMap.remove(taskHandler.getTaskId()).cancel(); } catch (RuntimeException ex) { Server.getInstance().getLogger().critical(""Exception while invoking onCancel"", ex); } } } AsyncTask.collectTask(); } "	0	0	0	0	1	0
"protected BLogRecord createLogRecord(Context ctx, BLogLevel level) { StackFrame stackFrame = ctx.getControlStackNew().getStack()[ctx.getControlStackNew().fp - 1]; CallableUnitInfo callableUnitInfo = stackFrame.getCallableUnitInfo();  String packageName = callableUnitInfo.getPackageInfo().getPkgPath();  String callableUnitName = """"; if (callableUnitInfo instanceof FunctionInfo || callableUnitInfo instanceof ActionInfo) { callableUnitName = callableUnitInfo.getName(); } else if (callableUnitInfo instanceof ResourceInfo) { callableUnitName = ctx.getServiceInfo().getName() + ""."" + callableUnitInfo.getName(); }  WorkerInfo workerInfo = ctx.getWorkerInfo(); String workerName = workerInfo != null ? workerInfo.getWorkerName() : ""default"";  LineNumberInfo lineNumberInfo = callableUnitInfo.getPackageInfo().getLineNumberInfo(ctx.getBLangVM().getCurrentIP() - 1); String fileName = lineNumberInfo.getFileName(); int lineNumber = lineNumberInfo.getLineNumber();  BLogRecord logRecord = new BLogRecord(level, getStringArgument(ctx, 0)); logRecord.setPackageName(packageName); logRecord.setCallableUnitName(callableUnitName); logRecord.setFileName(fileName); logRecord.setLineNumber(lineNumber); logRecord.setWorkerName(workerName);  return logRecord; } "	0	0	0	0	1	0
@Override public void onResponse(Response<UserResponse> response, Retrofit retrofit) { if (isDestroyed() || isFinishing()) return;  if (response != null && response.body() != null) { UserResponse userResponse = response.body();  if (mSelectedUser != null) { mSelectedUser.copy(userResponse.data); } else { mSelectedUser = userResponse.data; }  mSelectedUser.setLastSeen(System.currentTimeMillis());  if (mSelectedUser.isSelf(app) && !TextUtils.isEmpty(mSelectedUser.getAccessToken())) { SqlHelper.getInstance(getApplicationContext()).updateUserInfo(mSelectedUser); } else { SqlHelper.getInstance(getApplicationContext()).insertProfile(mSelectedUser); }  mAdapter = new ProfilePager(getApplicationContext(), getFragmentManager(), mSelectedUser); mPager.setAdapter(mAdapter); mSlidingTabs.setupWithViewPager(mPager); mMultiView.setViewState(MultiStateView.VIEW_STATE_CONTENT); supportInvalidateOptionsMenu(); } else { ViewUtils.setErrorText(mMultiView, R.id.errorMessage, R.string.error_generic); mMultiView.setViewState(MultiStateView.VIEW_STATE_ERROR); } } 	0	0	0	0	1	0
"public Map<String, String> getMdnFields() { Map<String, String> ret = new HashMap<String, String>(); try {  BodyPart bp = getMessageDispositionNotificationPart(); boolean contentIsBase64Encoded = false;  // // look for base64 transfer encoded MDN's (when Content-Transfer-Encoding is present) // // Content-Type: message/disposition-notification // Content-Transfer-Encoding: base64 // // ""Content-Transfer-Encoding not used in HTTP transport Because HTTP, unlike SMTP, // does not have an early history involving 7-bit restriction. // There is no need to use the Content Transfer Encodings of MIME."" // String[] contentTransferEncodings = bp.getHeader(""Content-Transfer-Encoding""); if (contentTransferEncodings != null && contentTransferEncodings.length > 0) { if (contentTransferEncodings.length > 1) log.warn(""MDN has multiple Content-Transfer-Encoding, we only try the first one""); String encoding = contentTransferEncodings[0]; if (encoding == null) encoding = """"; encoding = encoding.trim(); log.info(""MDN specifies Content-Transfer-Encoding : '"" + encoding + ""'""); if (""base64"".equalsIgnoreCase(encoding)) { contentIsBase64Encoded = true; } }  Object content = bp.getContent(); if (content instanceof InputStream) { InputStream contentInputStream = (InputStream) content;  if (contentIsBase64Encoded) { log.debug(""MDN seems to be base64 encoded, wrapping content stream in Base64 decoding stream""); contentInputStream = new Base64InputStream(contentInputStream); // wrap in base64 decoding stream }  BufferedReader r = new BufferedReader(new InputStreamReader(contentInputStream)); while (r.ready()) { String line = r.readLine(); int firstColon = line.indexOf("":""); // ""Disposition: ......"" if (firstColon > 0) { String key = line.substring(0, firstColon).trim(); // up to : String value = line.substring(firstColon + 1).trim(); // skip : ret.put(key, value); } } } else { throw new Exception(""Unsupported MDN content, expected InputStream found @ "" + content.toString()); }   } catch (Exception e) { throw new IllegalStateException(""Unable to retrieve the values from the MDN : "" + e.getMessage(), e); } return ret; } "	0	0	0	0	1	0
public ListObj readString(String json) throws JSONException { JSONObject jlist = new JSONObject(json); List<Item> items = new ArrayList<>(); List<String> criteria = new ArrayList<>(); boolean auto = getBoolean(AUTO_OBJ, jlist, false); List<String> tags = new ArrayList<>(); JSONArray jtags = jlist.getJSONArray(TAGS_OBJ); for (int j = 0; j < jtags.length(); j++) { tags.add(jtags.getString(j)); } boolean archived = getBoolean(ARCHIVED_OBJ, jlist, false); boolean showDone = getBoolean(SHOW_DONE_OBJ, jlist, true); boolean sortChecked = getBoolean(SORT_CHECKED_OBJ, jlist, true); boolean sortDone = getBoolean(SORT_DATE_OBJ, jlist, true); int daysToDelete = getInt(DAYS_TO_DELETE_OBJ, jlist); if (auto) { JSONArray jcriteria = jlist.getJSONArray(CRITERIA_OBJ); for (int j = 0; j < jcriteria.length(); j++) { criteria.add((String) jcriteria.get(j)); } return new AutoList(jlist.getString(NAME_OBJ), tags, archived, criteria, showDone, daysToDelete); } else { JSONArray jitems = jlist.getJSONArray(ITEMS_OBJ); for (int j = 0; j < jitems.length(); j++) { Item item = new Item(jitems.getJSONObject(j).getString(ITEM_OBJ), jitems.getJSONObject(j).getBoolean(DONE_OBJ)); items.add(item); } return new ListObj(jlist.getString(NAME_OBJ), items, tags, archived, showDone, daysToDelete, sortChecked, sortDone); } } 	0	0	0	0	1	0
@Override public boolean onClusterClick(Cluster<SightMarkerItem> cluster) { //TODO avoid sending the same request if the selected marker is the same cleanAllViews(); List<int[]>parentIDs = new ArrayList<int[]>(); for(SightMarkerItem item: cluster.getItems()){ parentIDs.add(item.getParentIDs()); } int clusterCommonParentId = ItemGroupAnalyzer.findCommonParent(parentIDs, 0); navigateTo(clusterCommonParentId, false, cluster.getItems(), true, true); return false; } 	0	0	0	0	1	0
public boolean containsShip() { return Objects.equals(tileState, SHIP_COVERED_TILE); } 	0	0	0	0	1	0
"@Test public void testCreateVMSnapshotCommand() { final Connection conn = Mockito.mock(Connection.class);  final VMSnapshotTO snapshotTO = Mockito.mock(VMSnapshotTO.class); final List<VolumeObjectTO> volumeTOs = new ArrayList<VolumeObjectTO>();  final CreateVMSnapshotCommand vmSnapshot = new CreateVMSnapshotCommand(""Test"", snapshotTO, volumeTOs, ""Debian"");  final CitrixRequestWrapper wrapper = CitrixRequestWrapper.getInstance(); assertNotNull(wrapper);  when(citrixResourceBase.getConnection()).thenReturn(conn);  final Answer answer = wrapper.execute(vmSnapshot, citrixResourceBase);  verify(citrixResourceBase, times(1)).getConnection();  assertTrue(answer.getResult()); } "	0	0	0	0	1	0
protected void reportLocation() { reportLocation(lineReader.getLineNumber(), -1); } 	0	0	0	0	1	0
"@RequestMapping(value = ""/{username:.+}"", method = RequestMethod.GET) @ResponseBody @ApiOperation(value = ""Get user by username"") @Documented(examples = { @Example(stage = Stage.Response, json = Users.CreateUserResponse.class, description = ""getUserByUsernameResponse.md"") }) public User getUserByUsername(@ApiParam(value = ""Unique username"", required = true) @PathVariable String username, HttpServletRequest servletRequest, HttpServletResponse servletResponse) throws SiteWhereException { checkAuthForAll(servletRequest, servletResponse, SiteWhereRoles.REST, SiteWhereRoles.ADMINISTER_USERS); Tracer.start(TracerCategory.RestApiCall, ""getUserByUsername"", LOGGER); try { IUser user = getUserManagement().getUserByUsername(StringEscapeUtils.unescapeHtml(username)); if (user == null) { throw new SiteWhereSystemException(ErrorCode.InvalidUsername, ErrorLevel.ERROR, HttpServletResponse.SC_NOT_FOUND); } return User.copy(user); } finally { Tracer.stop(LOGGER); } } "	0	0	0	0	1	0
"@Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { if (accessTokenHolder.getAccessToken() == null) { String userLocale = Locale.getDefault().toString();  DbxRequestConfig requestConfig = new DbxRequestConfig(config.getClientId(), userLocale); HttpSession session = request.getSession(true); String key_csrf_token = ""dropbox-auth-csrf-token""; DbxSessionStore csrfStore = new DbxStandardSessionStore(session, key_csrf_token); DbxAppInfo appInfo = new DbxAppInfo(config.getKey(), config.getSecret());  DbxWebAuth auth = new DbxWebAuth(requestConfig, appInfo, ""http://localhost:8080/FlexibleOrders/dropbox-auth-finish"", csrfStore); accessTokenHolder.setAuth(auth);  // Start authorization. String authorizePageUrl = auth.start();  redirect(response, authorizePageUrl); return false; } log.error(""DropboxAuthorizationInterceptor Prehandle""); return true; } "	0	0	0	0	1	0
@Override public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) { try { serviceCallback.success(putNotExpandableDelegate(response)); } catch (ErrorException | IOException exception) { serviceCallback.failure(exception); } } 	0	0	0	0	1	0
"private Optional<String> getSourceLine(final Collection<String> trace) { for (String line : trace) { if (line.startsWith(""com.dmdirc"")) { return Optional.of(line); } } return trace.stream().findFirst(); } "	0	0	0	0	1	0
public IncrementalBuilder.Result doInitialBuild(final CancelIndicator cancelIndicator) { final ArrayList<URI> uris = CollectionLiterals.<URI>newArrayList(); final Consumer<ISourceFolder> _function = (ISourceFolder it) -> { final IAcceptor<URI> _function_1 = (URI it_1) -> { uris.add(it_1); }; this.fileSystemScanner.scan(it.getPath(), _function_1); }; this.projectConfig.getSourceFolders().forEach(_function); return this.doBuild(uris, CollectionLiterals.<URI>emptyList(), cancelIndicator); } 	0	0	0	0	1	0
"@Test public void testGetExtension() { Assert.assertEquals("".txt"", testImporter.getExtensions()); } "	0	0	0	0	1	0
"@Override protected void initialize(String[] args) { super.initialize(args); getReporter().setColumnNames(new String[] { ""Size (bytes)"", ""Latency (µs)"" }); } "	0	0	0	0	1	0
@Override protected void onInflateView() { inflater.inflate(R.layout.ease_row_recall_message, this); } 	0	0	0	0	1	0
@Override public boolean canConvert(Class<?> from, Class<?> to) { return to.isArray() && from == to.getComponentType(); } 	0	0	0	0	1	0
public void onForceLoadNewMessagesCompleted(boolean needToRefreshList) { swipeRefreshLayout.setRefreshing(false); if (needToRefreshList) { updateList(false); } } 	0	0	0	0	1	0
@Test public void play_shouldStartMediaPlayer() { mediaPlayerManager.play(ANY_FILENAME, mock(ProgressBar.class));  verify(mediaPlayer).start(); } 	0	0	0	0	1	0
protected View getViewAtPosition(int position) { if(getAdapter() != null) { Object objectAtPosition = ((PagerAdapterWrapper) getAdapter()).getObjectAtPosition(position); if (objectAtPosition != null) { for (int i = 0; i < getChildCount(); i++) { View child = getChildAt(i); if (child != null && getAdapter().isViewFromObject(child, objectAtPosition)) { return child; } } } } return null; } 	0	0	0	0	1	0
"public void loadConfig() { currentLanguage = languagePreferenceNode.get(LanguagePreferenceKey.LANGUAGE.toString(), ""English""); } "	0	0	0	0	1	0
"private boolean isValid() { if (folder.isEmpty() && !stdIn) { System.err.println(""Set -scanFolder or -stdin""); return false; } return true; } "	0	0	0	0	1	0
"@Test public void callSoapServiceFails() throws Exception { String falseSoapServiceUrl = ""http://foobar:8087"" + cxfAutoConfiguration.baseAndServiceEndingUrl(); SoapRawClient soapRawClient = new SoapRawClient(falseSoapServiceUrl, WeatherService.class); try { soapRawClient.callSoapService(GetCityForecastByZIPTestXml.getInputStream()); fail(); } catch (BootStarterCxfException bootStarterException) {  assertThat(bootStarterException.getMessage(), containsString(SoapRawClient.ERROR_MESSAGE));  Throwable unknownHostException = bootStarterException.getCause(); assertThat(unknownHostException.getClass(), is(equalTo(UnknownHostException.class))); assertThat(unknownHostException.getMessage(), containsString(""foobar"")); } } "	0	0	0	0	1	0
private List<Term> getResult() { // TODO Auto-generated method stub List<Term> result = new ArrayList<Term>(); int length = graph.terms.length - 1; for (int i = 0; i < length; i++) { if (graph.terms[i] != null) { result.add(graph.terms[i]); } } setRealName(graph, result);  FilterModifWord.modifResult(result); return result; } 	0	0	0	0	1	0
"@Override public void initialize() { Log.d(LOG_TAG, ""Initializing""); if (jobScheduler == null) { jobScheduler = (JobScheduler) getReactApplicationContext().getSystemService(Context.JOB_SCHEDULER_SERVICE); mJobs = jobScheduler.getAllPendingJobs(); mInitialized = true; } super.initialize(); getReactApplicationContext().addLifecycleEventListener(this); } "	0	0	0	0	1	0
final InputStream getResource(final String resourceName) throws IOException { return indexService.getResource(master.schema, master.index, resourceName).getInputStream(); } 	0	0	0	0	1	0
final LinkedHashMap<String, FieldDefinition> getMasterFields() { return indexService.getFields(master.schema, master.index); } 	0	0	0	0	1	0
final IndexStatus getMasterStatus() { return indexService.getIndex(master.schema, master.index); } 	0	0	0	0	1	0
"String checkRemoteMasterUuid() throws IOException { final UUID remoteMasterUuid = UUID.fromString(indexService.getIndex(master.schema, master.index).index_uuid); if (masterUuid == null) { masterUuid = remoteMasterUuid; masterUuidString = masterUuid.toString(); IOUtils.writeStringAsFile(masterUuidString, masterUuidFile); return masterUuidString; } if (!Objects.equals(remoteMasterUuid, masterUuid)) throw new ServerException(Response.Status.NOT_ACCEPTABLE, ""The local master index UUID and the remote index UUID does not match: "" + masterUuid + "" <> "" + remoteMasterUuid); return masterUuidString; } "	0	0	0	0	1	0
@Override public void release(final String sessionID) throws IOException { indexService.replicationRelease(master.schema, master.index, masterUuidString, sessionID); } 	0	0	0	0	1	0
"public static void addLicenseTexts(XWPFDocument document, Collection<LicenseInfoParsingResult> projectLicenseInfoResults) { List<LicenseNameWithText> lts = OutputGenerator.getSortedLicenseNameWithTexts(projectLicenseInfoResults);  lts.forEach(lt -> { XWPFParagraph licenseParagraph = document.createParagraph(); licenseParagraph.setStyle(""Heading2""); XWPFRun licenseRun = licenseParagraph.createRun(); String licenseName = lt.isSetLicenseName() ? lt.getLicenseName() : ""Unknown license name""; licenseRun.setText(licenseName); addNewLines(licenseRun, 1);  XWPFParagraph licenseTextParagraph = document.createParagraph(); XWPFRun licenseTextRun = licenseTextParagraph.createRun(); addFormattedText(licenseTextRun, nullToEmptyString(lt.getLicenseText()), 12); addNewLines(licenseTextRun, 1); }); } "	0	0	0	0	1	0
"private static void closingProcedures() { double average = 0;  //get average sojourn time cumulativeSojournTime /=airTrafficController.numberOfPlanes;  //get average wait time double averageWaitTime = airTrafficController.getAverageWaitTime();  //get average runway utilization double runwayUtil = (runwayTotal / NUM_RUNWAYS) / simTime;  //get average gate utilization average = 0; for (Gate g : gates) { average += g.getTotalWait(); } average /= NUM_GATES; double gateUtilization = 1- (average / simTime);  //get average bay utilization average = 0; for (CargoBay b : bays) { average += b.getTotalWait(); } average /= NUM_BAYS; double bayUtilization = 1- (average / simTime);  //get rejected planes rejectedPlanes = arrivalsQueue.size();  //output all these things System.out.println(""=================================================\n""+ ""Optimal Airport Simulation\n"" + ""Simulation has completed. Results Follow:\n"" + ""Average Gate Utilization: "" + gateUtilization + ""\n"" + ""Average Bay Utilization: "" + bayUtilization + ""\n"" + ""Average Wait Time: "" + averageWaitTime + ""\n"" + ""Rejected planes: "" + rejectedPlanes + ""\n"" + ""Planes Serviced: "" + airTrafficController.numberOfPlanes + ""\n"" + ""Average Sojourn Time: "" + cumulativeSojournTime + ""\n"" + ""Average Runway Utilization: "" + runwayUtil + ""\n"" + ""================================================="");  System.exit(0); } "	0	0	0	0	1	0
"private int getCraftingResultCost(IInventory inv) { AlkahestCraftRecipe returned = null; for(int count = 0; count < inv.getSizeInventory(); count++) { ItemStack stack = inv.getStackInSlot(count); if(stack != null) { if(!(RegistryHelper.getItemRegistryName(stack.getItem()).equals(RegistryHelper.getItemRegistryName(ModItems.alkahestryTome)))) { if(Alkahestry.getDictionaryKey(stack) == null) { String key = RegistryHelper.getItemRegistryName(stack.getItem()) + (stack.getItem().getHasSubtypes() ? ""|"" + stack.getMetadata() : """"); returned = Settings.AlkahestryTome.craftingRecipes.get(key); } else { returned = Alkahestry.getDictionaryKey(stack); } } } } if(returned == null) return 0; return returned.cost; } "	0	0	0	0	1	0
"@Override public ItemStack getCraftingResult(InventoryCrafting inv) { AlkahestCraftRecipe returned = null; ItemStack dictStack = null; for(int count = 0; count < inv.getSizeInventory(); count++) { ItemStack stack = inv.getStackInSlot(count); if(stack != null) { if(!(RegistryHelper.getItemRegistryName(stack.getItem()).equals(RegistryHelper.getItemRegistryName(ModItems.alkahestryTome)))) { if(Alkahestry.getDictionaryKey(stack) == null) { String key = RegistryHelper.getItemRegistryName(stack.getItem()) + ""|"" + stack.getMetadata(); returned = Settings.AlkahestryTome.craftingRecipes.get(key); } else { returned = Alkahestry.getDictionaryKey(stack); dictStack = stack; } } } }  if(dictStack == null) { return new ItemStack(returned.item.getItem(), returned.yield + 1, returned.item.getItemDamage()); } else { return new ItemStack(dictStack.getItem(), returned.yield + 1, dictStack.getItemDamage()); } } "	0	0	0	0	1	0
"public void testAnalysisBackgroundCompilationDisabled() { String jvmOptions = ""Xss128k -XX:-BackgroundCompilation -Xms2048M""; GcManager jvmManager = new GcManager(); Jvm jvm = new Jvm(jvmOptions, null); JvmRun jvmRun = jvmManager.getJvmRun(jvm, Constants.DEFAULT_BOTTLENECK_THROUGHPUT_THRESHOLD); Assert.assertTrue(Analysis.KEY_BYTECODE_BACKGROUND_COMPILATION_DISABLED + "" analysis not identified."", jvmRun.getAnalysisKeys().contains(Analysis.KEY_BYTECODE_BACKGROUND_COMPILATION_DISABLED)); } "	0	0	0	0	1	0
"public static boolean hasWorked() { ClassLoader classLoader = null; try { classLoader = (ClassLoader) readField(getLoadedApk(), ""mClassLoader""); } catch (Throwable e) { e.printStackTrace(); } return classLoader instanceof AmigoClassLoader; } "	0	0	0	0	1	0
"public EnumActionResult onItemUse(ItemStack stack, EntityPlayer player, World world, BlockPos pos, EnumHand hand, EnumFacing facing, float hitX, float hitY, float hitZ) { if(player.isSneaking()) return EnumActionResult.FAIL; if(world.isRemote) return EnumActionResult.PASS; if(stack.getTagCompound() != null && stack.getTagCompound().hasKey(""Reward"")) { if(world.getBlockState(pos).getBlock().equals(CCubesBlocks.CHANCE_CUBE)) { world.setBlockToAir(pos); IChanceCubeReward reward = ChanceCubeRegistry.INSTANCE.getRewardByName(stack.getTagCompound().getString(""Reward"")); if(reward != null) reward.trigger(world, pos, player); else player.addChatMessage(new TextComponentString(""That reward does not exist for this cube!"")); } else if(world.getBlockState(pos).getBlock().equals(CCubesBlocks.GIANT_CUBE)) { TileEntity ent = world.getTileEntity(pos); if(ent == null || !(ent instanceof TileGiantCube)) return EnumActionResult.FAIL; TileGiantCube giant = (TileGiantCube) ent; IChanceCubeReward reward = GiantCubeRegistry.INSTANCE.getRewardByName(stack.getTagCompound().getString(""Reward"")); if(reward != null) reward.trigger(world, giant.getMasterPostion(), player); else player.addChatMessage(new TextComponentString(""That reward does not exist for this cube!"")); GiantCubeUtil.removeStructure(giant.getMasterPostion(), world); } } return EnumActionResult.PASS; } "	0	0	0	0	1	0
"public void testSuccesfulFind() throws Exception { Log log = Log.find(""5709515719ce880954005f91""); assertTrue(log instanceof ConektaObject); } "	0	0	0	0	1	0
@Override @NonNull public Observable<T> loadItem(final int position) { final int indexOfPage = pageIndexOf(position); final int indexOnPage = indexOnPage(position); return Observable.<T>create(subscriber -> { final List<T> page = loadedPages.get(indexOfPage); subscriber.onNext(page != null && page.size() > indexOnPage ? page.get(indexOnPage) : null); subscriber.onCompleted(); }).switchMap(item -> { if (item != null || (isLastPageLoaded && maxLoadedPage != null && maxLoadedPage <= indexOfPage)) { return Observable.just(item); } Observable<List<T>> loadingPage = loadingPages.get(indexOfPage); if (loadingPage == null) { loadingPage = createPageLoadingObservable(indexOfPage); loadingPages.put(indexOfPage, loadingPage); } return loadingPage.map(page -> { int index = 0; for (final T nextItem : page) { if (index == indexOnPage) { return nextItem; } index++; } return null; }); }).subscribeOn(scheduler); } 	0	0	0	0	1	0
private void updateItemsChanges(final int indexOfPage, @NonNull final List<T> pageItems, final int oldSize, final boolean oldIsLastPageLoaded) { final List<Change> changes = new ArrayList<>(); final int size = getSize();  if (size == oldSize) { if (!pageItems.isEmpty()) { changes.add(new Change(Change.Type.CHANGED, indexOfPage * pageSize, pageItems.size())); } } else if (size > oldSize) { if (!oldIsLastPageLoaded) { changes.add(new Change(Change.Type.CHANGED, oldSize - 1, 1)); } changes.add(new Change(Change.Type.INSERTED, oldSize, size - oldSize)); } else { changes.add(new Change(Change.Type.REMOVED, size, oldSize - size)); if (!isLastPageLoaded) { changes.add(new Change(Change.Type.CHANGED, size - 1, 1)); } } if (!changes.isEmpty()) { notifyChanges(changes); } } 	0	0	0	0	1	0
"@Test public void testToString() { Bytes bytes = NativeStore.nativeStore(32).bytes(); assertEquals(""[pos: 0, lim: 32, cap: 1TiB ] ٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠"", bytes.toDebugString()); bytes.writeUnsignedByte(1); assertEquals(""[pos: 1, lim: 32, cap: 1TiB ] ⒈‖٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠"", bytes.toDebugString()); bytes.writeUnsignedByte(2); assertEquals(""[pos: 2, lim: 32, cap: 1TiB ] ⒈⒉‖٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠"", bytes.toDebugString()); bytes.writeUnsignedByte(3); assertEquals(""[pos: 3, lim: 32, cap: 1TiB ] ⒈⒉⒊‖٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠"", bytes.toDebugString()); bytes.writeUnsignedByte(4); assertEquals(""[pos: 4, lim: 32, cap: 1TiB ] ⒈⒉⒊⒋‖٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠"", bytes.toDebugString()); bytes.writeUnsignedByte(5); assertEquals(""[pos: 5, lim: 32, cap: 1TiB ] ⒈⒉⒊⒋⒌‖٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠"", bytes.toDebugString()); bytes.writeUnsignedByte(6); assertEquals(""[pos: 6, lim: 32, cap: 1TiB ] ⒈⒉⒊⒋⒌⒍‖٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠"", bytes.toDebugString()); bytes.writeUnsignedByte(7); assertEquals(""[pos: 7, lim: 32, cap: 1TiB ] ⒈⒉⒊⒋⒌⒍⒎‖٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠"", bytes.toDebugString()); bytes.writeUnsignedByte(8); assertEquals(""[pos: 8, lim: 32, cap: 1TiB ] ⒈⒉⒊⒋⒌⒍⒎⒏‖٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠٠"", bytes.toDebugString()); } "	0	0	0	0	1	0
"double readLatitude(Columns columns) { Column column = columns.getColumnsByName(this.longitude).getFirst(); if (column == null) { throw new IllegalArgumentException(""Latitude column required""); } Object columnValue = column.getComposedValue(); Double latitude = null; if (columnValue != null) { if (columnValue instanceof Number) { latitude = ((Number) columnValue).doubleValue(); } else if (columnValue instanceof String) { try { latitude = Double.valueOf((String) columnValue); } catch (NumberFormatException e) { // Ignore to fail below } } } if (latitude == null || latitude < -90.0 || latitude > 90) { throw new IllegalArgumentException(""Valid latitude required, but found "" + latitude); } return latitude; } "	0	0	0	0	1	0
private void ensureContent() { if (mContentView == null) { if (mContentResId != 0) { for (int i = getChildCount() - 1; i >= 0; i--) { View child = getChildAt(i); if (!(child instanceof IRefreshView) && mContentResId == child.getId()) mContentView = child; } } else { for (int i = getChildCount() - 1; i >= 0; i--) { View child = getChildAt(i); if (!(child instanceof IRefreshView)) mContentView = child; } } } } 	0	0	0	0	1	0
void render(GraphicsContext g, Point2D viewportOrigin) { double alpha = life / initialLife;  g.setGlobalAlpha(alpha); g.setGlobalBlendMode(blendMode);  Image particleImage = image != null ? image : ParticleEmitter.getCachedImage((Color) startColor, (Color) endColor, (int)(alpha * 100));  g.save();  g.translate(position.x - viewportOrigin.getX(), position.y - viewportOrigin.getY()); g.scale(radius.x * 2 / particleImage.getWidth(), radius.y * 2 / particleImage.getHeight()); g.drawImage(particleImage, 0, 0);  g.restore(); } 	0	0	0	0	1	0
"void showItem(int sel) { // Set selection on the buttons mSelected = sel; for (int i = 0; i < 4; i++) { mCard.findViewById(ids[i]).setSelected(i == sel); }  final CalendarItem item = lectures.get(sel);  // Set current title mTitleView.setText(getTitle());  //Add content mTimeView.setText(DateUtils.getRelativeTimeSpanString(item.start.getTime(), System.currentTimeMillis(), DateUtils.MINUTE_IN_MILLIS, DateUtils.FORMAT_ABBREV_RELATIVE));  //Add location with link to room finder if (item.location != null) { mLocation.setText(item.location); mLocation.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent i = new Intent(mContext, RoomFinderDetailsActivity.class); i.putExtra(RoomFinderDetailsActivity.EXTRA_LOCATION, item.location); mContext.startActivity(i); } }); } else { mLocation.setVisibility(View.GONE); }  DateFormat week = new SimpleDateFormat(""EEEE, ""); DateFormat df = SimpleDateFormat.getTimeInstance(DateFormat.SHORT); mEvent.setText(week.format(item.start) + df.format(item.start) + "" - "" + df.format(item.end)); mEvent.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { Intent i = new Intent(mContext, CalendarActivity.class); CalendarItem item = lectures.get(mSelected); i.putExtra(CalendarActivity.EVENT_TIME, item.start.getTime()); mContext.startActivity(i); } }); } "	0	0	0	0	1	0
@Override public void execute(Object[] data2) { smeGUI.as.noLOD = !smeGUI.as.noLOD; smeGUI.renderer.camViewChangedNotify(); } 	0	0	0	0	1	0
"private String getHostname(Bundle extras) { try { JSONObject jsonObject = new JSONObject(extras.getString(""ejson"", ""[]"")); if (!jsonObject.has(""host"")) { return null; }  return jsonObject.getString(""host""); } catch (Exception e) { return null; } } "	0	0	0	0	1	0
"public static void error(String tag, String data) { System.out.println(ANSI_RED + ""[Error] : "" + tag + "" - "" + data + ANSI_RESET); } "	0	0	0	0	1	0
"public static void info(String tag, String data) { System.out.println(ANSI_BLUE + ""[Info] : "" + tag + "" - "" + data + ANSI_RESET); } "	0	0	0	0	1	0
"public static void debug(String tag, String data) { System.out.println(ANSI_GREEN + ""[Debug] : "" + tag + "" - "" + data + ANSI_RESET); } "	0	0	0	0	1	0
public static Boolean isImageAvailable(final String pointcode, final ExtendedAccessHandler extendedAccessHandler) { final Collection<URL> validURLs = AlkisProducts.getCorrespondingPointURLs(pointcode);  for (final URL url : validURLs) { if (extendedAccessHandler.checkIfURLaccessible(url)) { return true; } }  return Boolean.FALSE; } 	0	0	0	0	1	0
@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragments_info, container, false); } 	0	0	0	0	1	0
"public void saveBusinessRuleDefinition(String uuid, BusinessRuleFromScratch businessRuleFromScratch, boolean isDeployed) throws TemplateManagerException, UnsupportedEncodingException, BusinessRulesDatasourceException, SQLException { QueryExecutor queryExecutor = new QueryExecutor(); int deploymentState = 0; byte[] businessRule = businessRuleFromScratch.toString().getBytes(""UTF-8""); // convert String into InputStream if (isDeployed) { deploymentState = 1; } queryExecutor.executeInsertQuery(uuid, businessRule, deploymentState); } "	0	0	0	0	1	0
"public void saveBusinessRuleDefinition(String uuid, BusinessRuleFromTemplate businessRuleFromTemplate, boolean isDeployed) throws TemplateManagerException, UnsupportedEncodingException, BusinessRulesDatasourceException, SQLException { QueryExecutor queryExecutor = new QueryExecutor(); byte[] businessRule = businessRuleFromTemplate.toString().getBytes(""UTF-8""); // convert String into InputStream int deploymentState = 0; if (isDeployed) { deploymentState = 1; } queryExecutor.executeInsertQuery(uuid, businessRule, deploymentState); } "	0	0	0	0	1	0
public String toString(){ return getIndex() + DELIMETER + getName() + DELIMETER + getDone(); } 	0	0	0	0	1	0
"public void flush() throws IOException { try { stream.flush(); } catch (Exception e) { logger.log(Level.WARNING, ""Attempting to reset socket connection."", e); resetSocket(); } } "	0	0	0	0	1	0
@Override public void log(String s) { Errlog.bare(s); } 	0	0	0	0	1	0
@Before public void setUp() { binder.setCodec(new PojoCodec(new TupleRegistrar())); } 	0	0	0	0	1	0
"@POST @Path(value = ""/getPaginatedParticipantList"") @Produces(value = MediaType.APPLICATION_JSON_VALUE) @Consumes(value = MediaType.APPLICATION_JSON_VALUE) public Response getPaginatedParticipant(ParticipantFilterVO filterVO) { PageVO<ParticipantVO> page = null; try{ page = service.getPaginatedParticipantList(filterVO.getPageNumber(), filterVO.getSize(),filterVO); }catch(Throwable e){ e.printStackTrace(); return Response.status(Status.BAD_REQUEST).type(""text/plain"").entity(e.getMessage()).build(); } return Response.ok(page).build(); } "	0	0	0	0	1	0
@Override public void setContents(COSObject contents) { if (contents != null && contents.getType() == COSObjType.COS_STREAM) { this.charStream = (COSStream) contents.get(); } } 	0	0	0	0	1	0
@Override public boolean isFinished() { return headingDrivePid.isOnTarget(); } 	0	0	0	0	1	0
@Override public CloseableIterator<Substitution> execute(UnionConjunctiveQueries queries, AtomSet atomset) throws HomomorphismException { return new UnionConjunctiveQueriesSubstitutionReader(queries, atomset); } 	0	0	0	0	1	0
"@Override public URL findResource(String name) { URL url = super.findResource(name); if (url == null) { // Ignore internal Java and Robocode classes if (name.startsWith(""jdk/"") || name.startsWith(""java/"") || name.startsWith(""net.sf.robocode/"")) { return null; } URL[] urls = getURLs(); if (urls != null) { for (int i = 0; i < urls.length; i++) { URL u = urls[i]; if (u != null) { try { url = new URL(u.getProtocol(), u.getHost(), u.getPort(), u.getPath() + name); if (u.openConnection() != null) { break; } } catch (MalformedURLException ignore) { } catch (IOException ignore) { } } } } } return url; } "	0	0	0	0	1	0
"public static void updateCaretaker(Caretaker caretaker){  DatabaseReference userRef = FirebaseRef.dependentRer.child(caretaker.name);  userRef.child(""age"").setValue(caretaker.age); userRef.child(""weight"").setValue(caretaker.weight); userRef.child(""height"").setValue(caretaker.height); userRef.child(""dependents"").setValue(caretaker.dependents);  } "	0	0	0	0	1	0
@ReactMethod public void restartApp(boolean onlyIfUpdateIsPending, Promise promise) { // If this is an unconditional restart request, or there // is current pending update, then reload the app. if (!onlyIfUpdateIsPending || CodePush.this.isPendingUpdate(null)) { loadBundle(); promise.resolve(true); return; }  promise.resolve(false); } 	0	0	0	0	1	0
"@Test public void testServer() throws Exception { String dbtable = DATABASE_TABLE_NAME_PREFIX + ""_"" + UUID.randomUUID().toString().replaceAll(""-"", """");  String dropSQL = ""drop table "" + dbtable; String createSQL = ""create table "" + dbtable + "" (geom geometry, id int4)""; String insertPointSQL = ""insert into "" + dbtable + "" values ('POINT (10 10 10)',1)""; String insertPolygonSQL = ""insert into "" + dbtable + "" values ('POLYGON ((0 0 0,0 10 0,10 10 0,10 0 0,0 0 0))',2)"";  if (testWithDatabase) { logger.debug(""Adding geometric type entries...""); ((org.postgresql.PGConnection)connection).addDataType(""geometry"", PGgeometry.class); ((org.postgresql.PGConnection)connection).addDataType(""box3d"", PGbox3d.class);  logger.debug(""Creating table with geometric types...""); boolean tableExists = false; DatabaseMetaData databaseMetaData = connection.getMetaData(); try (ResultSet resultSet = databaseMetaData.getTables(null, null, dbtable.toLowerCase(), new String[] {""TABLE""})) { while (resultSet.next()) { tableExists = true; } } if (tableExists) { statement.execute(dropSQL); } statement.execute(createSQL);  logger.debug(""Inserting point...""); statement.execute(insertPointSQL);  logger.debug(""Inserting polygon...""); statement.execute(insertPolygonSQL);  logger.debug(""Querying table...""); ResultSet resultSet = statement.executeQuery(""select asText(geom),id from "" + dbtable); while (resultSet.next()) { Object obj = resultSet.getObject(1); int id = resultSet.getInt(2); logger.debug(""Row {}: {}"", id, obj.toString()); } }  } "	0	0	0	0	1	0
"@Override public BasicLocation getStopLocation(Stop stop) { if (stop == null) { return null; }  BasicLocation ret = null; Long t = Tracking.startTime();  Log.d(TAG, ""StopLocation searching for ""+stop); Collection<SQLEntry> entries = getMatchingEntries(makeStopLocationRequest(stop.getStopID()), getReadableDatabase()); Log.d(TAG, ""StopLocation found ""+entries.size()+"" for ""+stop);  if (entries.size() > 0 && entries.iterator().hasNext()) { SQLEntry firstLoc = entries.iterator().next(); String latitude = firstLoc.latitude; String longitude = firstLoc.longitude;  ret = new BasicLocation(latitude, longitude); }  Tracking.sendTime(""SQL"", ""StopNames"", ""getLocation"", t); Log.d(TAG,""Got location for ""+stop+"", ""+ ret.latitude + "", "" + ret.longitude);  return ret; } "	0	0	0	0	1	0
@BeforeMethod(alwaysRun=true) public void setUp() throws Exception { jmxObjectName = new ObjectName(objectName);  // Create an entity and configure it with the above JMX service app = TestApplication.Factory.newManagedInstanceForTests(); entity = app.createAndManageChild(EntitySpec.create(TestEntity.class).impl(TestEntityWithJmx.class)); app.start(ImmutableList.of(new SimulatedLocation()));  jmxHelper = new JmxHelper(entity);  jmxService = new JmxService(entity); } 	0	0	0	0	1	0
"private static String getPrefix(Image image) {  if (image.getType() == ImageType.BACKUP) { return ""(Backup) ""; }  if (isUserSnapshot(image)) { return ""(Snapshot) ""; }  return """"; } "	0	0	0	0	1	0
protected void scopeInterrupted(PvmExecutionImpl execution) { execution.performOperation(TRANSITION_CREATE_SCOPE); } 	0	0	0	0	1	0
"private InputStream createDecompressorStream(final int compression, final int width, final int bands, final InputStream stream) throws IOException { switch (compression) { case TIFFBaseline.COMPRESSION_NONE: return stream; case TIFFBaseline.COMPRESSION_PACKBITS: return new DecoderStream(stream, new PackBitsDecoder(), 1024); case TIFFExtension.COMPRESSION_LZW: return new DecoderStream(stream, LZWDecoder.create(LZWDecoder.isOldBitReversedStream(stream)), width * bands); case TIFFExtension.COMPRESSION_ZLIB: // TIFFphotoshop.pdf (aka TIFF specification, supplement 2) says ZLIB (8) and DEFLATE (32946) algorithms are identical case TIFFExtension.COMPRESSION_DEFLATE: return new InflaterInputStream(stream, new Inflater(), 1024); case TIFFBaseline.COMPRESSION_CCITT_MODIFIED_HUFFMAN_RLE: return new CCITTFaxDecoderStream(stream, width, compression, getValueAsIntWithDefault(TIFF.TAG_FILL_ORDER, 1),0L); case TIFFExtension.COMPRESSION_CCITT_T4: return new CCITTFaxDecoderStream(stream, width, compression, getValueAsIntWithDefault(TIFF.TAG_FILL_ORDER, 1),getValueAsLongWithDefault(TIFF.TAG_GROUP3OPTIONS, 0L)); case TIFFExtension.COMPRESSION_CCITT_T6: return new CCITTFaxDecoderStream(stream, width, compression, getValueAsIntWithDefault(TIFF.TAG_FILL_ORDER, 1),getValueAsLongWithDefault(TIFF.TAG_GROUP4OPTIONS, 0L)); default: throw new IllegalArgumentException(""Unsupported TIFF compression: "" + compression); } } "	0	0	0	0	1	0
"public String[] toFile(TimedTextObject tto) {  //first we check if the TimedTextObject had been built, otherwise... if(!tto.built) return null;  //we will write the lines in an ArrayList, int index = 0; //the minimum size of the file is 4*number of captions, so we'll take some extra space. ArrayList<String> file = new ArrayList<>(5 * tto.captions.size()); //we iterate over our captions collection, they are ordered since they come from a TreeMap Collection<Caption> c = tto.captions.values(); Iterator<Caption> itr = c.iterator(); int captionNumber = 1;  while(itr.hasNext()){ //new caption Caption current = itr.next(); //number is written file.add(index++,""""+captionNumber++); //we check for offset value: if(tto.offset != 0){ current.start.mseconds += tto.offset; current.end.mseconds += tto.offset; } //time is written file.add(index++,current.start.getTime(""hh:mm:ss,ms"")+"" --> ""+current.end.getTime(""hh:mm:ss,ms"")); //offset is undone if(tto.offset != 0){ current.start.mseconds -= tto.offset; current.end.mseconds -= tto.offset; } //text is added String[] lines = cleanTextForSRT(current); int i=0; while(i<lines.length) file.add(index++,""""+lines[i++]); //we add the next blank line file.add(index++,""""); }  String[] toReturn = new String [file.size()]; for (int i = 0; i < toReturn.length; i++) { toReturn[i] = file.get(i); } return toReturn; } "	0	0	0	0	1	0
public boolean isValid() { return isObject() && isObject() && isRelation(); } 	0	0	0	0	1	0
"public void login() { usernameField.setDisable(true); passwordField.setDisable(true); loginButton.setDisable(true); cancelButton.setDisable(true);  boolean success; String storedHash = database.getHashedPassword(usernameField.getText()); success = !storedHash.isEmpty() && BCrypt.checkpw(passwordField.getText(), storedHash);  if (success) { progressIndicator.setVisible(true); resultText.setText(""Logging in...""); resultText.setVisible(true);  new Thread(() -> loadFXML(Paths.ADMIN_PAGE_FXML)).start(); } else { resultText.setText(""Incorrect login""); resultText.setVisible(true);  usernameField.setDisable(false); passwordField.setDisable(false); loginButton.setDisable(false); cancelButton.setDisable(false); } } "	0	0	0	0	1	0
"public static void validateDayOfWeekSchedulableJob(DayOfWeekSchedulableJob job) { notNull(job, JOB_CANNOT_BE_NULL); notNull(job.getDays(), ""List of days of week cannot be null!""); notNull(job.getTime(), ""Time cannot be null!""); validateSchedulableJob(job); } "	0	0	0	0	1	0
public DefaultConnectionPoolFactory build() { final DefaultConnectionPoolFactory factory = new DefaultConnectionPoolFactory(); factory.driverClassName = this.driverClassName; factory.protocol = this.protocol; factory.databaseHost = this.databaseHost; factory.databasePort = this.databasePort; factory.databaseName = this.databaseName; factory.username = this.username; factory.password = this.password; factory.minPoolSize = this.minPoolSize; factory.maxPoolSize = this.maxPoolSize; factory.isAutoCommit = this.isAutoCommit; factory.idleTimeout = this.idleTimeout; return factory; } 	0	0	0	0	1	0
"private static com.fasterxml.jackson.core.JsonParser createParser(JsonFactory factory, String json) { try { return factory.createParser(json); } catch (Exception ex) { throw new JsonParseException(""Failed to parse JSON: ""+sampleJsonString(json), ex); } } "	0	0	0	0	1	0
@Override protected synchronized void onLayout(boolean changed, int left, int top, int right, int bottom) { if(changed){ dst = new Rect(0, 0, getWidth(), getHeight()); } } 	0	0	0	0	1	0
@Override public int getForegroundColour() { if (drawGradient()) { mResources.getColor(R.color.kitkat_status_bar_gradient); } return super.getForegroundColour(); } 	0	0	0	0	1	0
public static JsonPath compile(String path) { JsonPathLexer lexer = new JsonPathLexer(new ANTLRInputStream(path)); CommonTokenStream tokens = new CommonTokenStream(lexer); JsonPathParser parser = new JsonPathParser(tokens); parser.setErrorHandler(new BailErrorStrategy()); JsonPathParser.PathContext tree = parser.path(); JsonPathCompiler compiler = new JsonPathCompiler(); compiler.visit(tree); return compiler.getBuilder().build(); } 	0	0	0	0	1	0
"@Override public void deleteEntity(String name, EntityType type) { SimpleValue<String> id; if (! name.startsWith(server.getEmail().getValue())) { id = SimpleValue.getInstance(server.getEmail().getValue() + ""/"" + name); } else { id = SimpleValue.getInstance(name); }  List<Point> sample;  sample = nimbitsClient.getEntity(id, type, EntityModel.class);  if (sample.isEmpty()) { throw new IllegalStateException(""Entity Not Found""); } else { deleteEntity(sample.get(0)); }  } "	0	0	0	0	1	0
@Override public void onBindViewHolder(HomeViewHolder holder, int position) { holder.tv.setText(mDatas.get(position).getName()); if (mDatas.get(position).isChecked()) { holder.item.setBackgroundResource(R.drawable.icon_background); } else if (!mDatas.get(position).isChecked()) { holder.item.setBackgroundResource(R.drawable.icon_background_trans); } if (mDatas.get(position).isBlank()) { holder.nullnull.setChecked(true); } else if (!mDatas.get(position).isBlank()) { holder.nullnull.setChecked(false); } if (mDatas.get(position).getIcon() != null) { holder.iv.setImageDrawable(mDatas.get(position).getIcon()); } else { holder.iv.setImageDrawable(new ColorDrawable(0)); } if (isRename == true && position == getLastClickPos()) { holder.tv.setFocusable(true); holder.tv.setFocusableInTouchMode(true); holder.tv.requestFocus(); mHolder = holder; } else { holder.tv.setFocusable(false); holder.tv.clearFocus(); } } 	0	0	0	0	1	0
"@OnClick(R.id.btn_save) public void saveOnClick(View view) { try { packExamTest(); examTest.save(getApplicationContext()); displayDescription(examTest.getDescription()); Toast.makeText(this, R.string.msg_successful_saving, Toast.LENGTH_SHORT).show(); } catch (IOException ioex) { Log.e(""ExamTestQuestionA"", ioex.getMessage()); ioex.printStackTrace(); Toast.makeText(this, R.string.msg_error_saving, Toast.LENGTH_SHORT).show(); } } "	0	0	0	0	1	0
private void updateNextButton() { final boolean endFinished = data != null && data.getCurrentEnd().getId() != null; boolean isLastEnd = data != null && data.getCurrentRound().maxEndCount != null && data.endIndex + 1 == data.getCurrentRound().maxEndCount; final boolean hasOneMoreRound = data != null && data.roundIndex + 1 < data.training.getRounds().size(); boolean showNextRound = isLastEnd && hasOneMoreRound; final boolean isEnabled = endFinished && (!isLastEnd || hasOneMoreRound); final int color; if (showNextRound) { final Round round = data.training.getRounds().get(data.roundIndex + 1); binding.next.setOnClickListener(view -> openRound(round, 0)); binding.next.setText(R.string.next_round); color = getResources().getColor(R.color.colorPrimary); } else { binding.next.setOnClickListener(view -> showEnd(data.endIndex + 1)); binding.next.setText(R.string.next); color = Color.BLACK; } binding.next.setTextColor(Utils.argb(isEnabled ? 0xFF : 0x42, color)); binding.next.setEnabled(isEnabled); } 	0	0	0	0	1	0
"public static void ensureLiveChannelNameValid(String liveChannelName) { if (!validateBucketName(liveChannelName)) { throw new IllegalArgumentException(OSS_RESOURCE_MANAGER.getFormattedString( ""LiveChannelNameInvalid"", liveChannelName)); } } "	0	0	0	0	1	0
"@Test public void createMessageWithError_firstIOPubMessageHasTypeIsStream() throws Exception { //given seo.error(""some error""); //when List<MessageHolder> messages = messageCreator.createMessage(seo); //then assertThat(messages).isNotEmpty(); assertThat(messages.get(0).getSocketType()).isEqualTo(SocketEnum.IOPUB_SOCKET); assertThat(messages.get(0).getMessage().type()).isEqualTo(JupyterMessages.STREAM); } "	0	0	0	0	1	0
public static void debugPrint(String str, int p0, int p1, int p2) { if (debug) Logger.debug(str); } 	0	0	0	0	1	0
public static void debugPrint(String str, int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7) { if (debug) Logger.debug(str); } 	0	0	0	0	1	0
protected String getApplicationDomain() { return applicationDomain != null ? applicationDomain : mPiwik.getApplicationDomain(); } 	0	0	0	0	1	0
"private void checkSecretVersions(List<SecretDetailResponseV2> versions, String name, int totalVersions, int versionIdx, int numVersions) { long creationTime = System.currentTimeMillis() / 1000L; int startIdx = totalVersions - versionIdx - 1; int expectedVersions = Math.min(numVersions, totalVersions - versionIdx); // Check that we retrieved as many secrets as possible assertThat(versions.size()).isEqualTo(expectedVersions);  for (SecretDetailResponseV2 version : versions) { // Check creation ordering assertThat(version.createdAtSeconds() < creationTime); creationTime = version.createdAtSeconds();  // Check version number assertThat(version.metadata()).isEqualTo( ImmutableMap.of(""version"", Integer.toString(startIdx--)));  // Check secret name assertThat(version.name()).isEqualTo(name); } } "	0	0	0	0	1	0
"public static String longToGMT(long lastModify) { Date d = new Date(lastModify); SimpleDateFormat sdf = new SimpleDateFormat(""EEE, d MMM yyyy HH:mm:ss z"", Locale.US); sdf.setTimeZone(TimeZone.getTimeZone(""GMT"")); return sdf.format(d); } "	0	0	0	0	1	0
"@Test public void testCreateReturnOcelotPromiseFactory() throws IOException { System.out.println(""createReturnOcelotPromiseFactory""); StringWriter writer = new StringWriter(); instance.createReturnOcelotPromiseFactory(""CLSNAME"", ""METHODNAME"", ""PARAMNAMES"", ""ARGS"", ""KEYS"", writer); String result = writer.toString(); assertThat(result).isEqualTo(""\t\t\treturn OcelotPromiseFactory.createPromise(ds, \""c4746bbdace1d5712da7b6fabe58fb9c_\"" + JSON.stringify([KEYS]).md5(), \""METHODNAME\"", [PARAMNAMES], [ARGS]);\n""); } "	0	0	0	0	1	0
"@EventHandler public void onClick(InventoryClickEvent event) { if (users.contains(event.getWhoClicked().getUniqueId())) { if (event.getRawSlot() < 9 || event.getInventory().getSize() < event.getRawSlot()) { return; }  event.setCancelled(true);  if (9 <= event.getRawSlot() && event.getRawSlot() <= 16 && plugin.getEconomy() != null) { editors.put(event.getWhoClicked().getUniqueId(), event.getRawSlot() - 9);  event.getWhoClicked().closeInventory();  event.getWhoClicked().sendMessage(plugin.prefix + ""Enter the value with your chat.""); event.getWhoClicked().sendMessage(plugin.prefix + ""Or type 'cancel' to stop editing.""); } } } "	0	0	0	0	1	0
@Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; StoreGroup other = (StoreGroup) obj; if (getUUID() == null) { if (other.getUUID() != null) return false; } else if (!getUUID().equals(other.getUUID())) return false; return true; } 	0	0	0	0	1	0
"public void createPubs() { final Random rand = new Random(); int i = -1; ThwackingElement pub; while (running) { if (active) { //Get random pub slot i = rand.nextInt(numberOfPublications); pub = pubs[i]; pub.tryAddPub(); } Thread.yield(); } allDone.countDown(); LOG.debug(""CreatePubs all done!""); } "	0	0	0	0	1	0
"@Test public void testReverseSpatialKey() { LocationIndexTree index = createIndex(createTestGraph(), 200); assertEquals(Helper.createTList(64, 64, 64, 4), index.getEntries());  // 10111110111110101010 String str44 = ""00000000000000000000000000000000000000000000""; assertEquals(str44 + ""01010101111101111101"", BitUtil.BIG.toBitString(index.createReverseKey(1.7, 0.099))); } "	0	0	0	0	1	0
"@Override public void waitPeering(long timeout) { try { long begin = new Date().getTime(); peeringLock.lock(); while (trustedLevel == null) { if (timeout > 0 && new Date().getTime() - begin > timeout) { logger.error(""araqne rpc: give up waiting peering [{}] response"", peerGuid); throw new RpcException(""peering timeout: "" + timeout); }  peeringReady.await(200, TimeUnit.MILLISECONDS); } } catch (InterruptedException e) { logger.trace(""araqne rpc: interrupted waiting for peering [{}]"", peerGuid); } finally { peeringLock.unlock(); } } "	0	0	0	0	1	0
public static void bindTexture(ResourceLocation textureURI) { ITextureObject object; if (textureURI != null) { object = Minecraft.getMinecraft().getTextureManager().getTexture(textureURI); if (object == null) { object = new SimpleTexture(textureURI); Minecraft.getMinecraft().getTextureManager().loadTexture(textureURI, object); } } else { object = TextureUtil.missingTexture; }  if (GL11.glGetInteger(GL11.GL_TEXTURE_BINDING_2D) != object.getGlTextureId()) { GL11.glBindTexture(GL_TEXTURE_2D, object.getGlTextureId()); } } 	0	0	0	0	1	0
public void changedWithinTransaction( final ChangeSet changes ) { txWorkspaceCaches.workspaceCachesFor(txn).forEach(cache -> cache.internalChangedWithinTransaction(changes)); } 	0	0	0	0	1	0
"public static String getLogColorString(int color) { return String.valueOf(color) + "":#"" + Integer.toHexString(color).toUpperCase(); } "	0	0	0	0	1	0
@Override public ContactUsDTO create(ContactUsDTO create) throws ServiceException { final ContactUs contactUs = this.contactUsConverter.internalize(create); this.contactUsService.create(contactUs); return create; } 	0	0	0	0	1	0
@Override public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) { String response = new String(responseBody); JSON_Parser.getInfosBottleFromJSON(response, infosBottle);  setAdapter(infosBottle.getListAppellations(), appellations_control, appellations_switch); setAdapter(infosBottle.getListRegions(), regions_control, regions_switch); setAdapter(infosBottle.getListVignerons(), vignerons_control, vignerons_switch); setAdapter(infosBottle.getListCuvees(), cuvees_control, cuvees_switch); setAdapter(infosBottle.getListCategories(), categories_control, categories_switch); setAdapter(infosBottle.getListUtilisateurs(), user_control, users_switch);  mill_switch.setOnCheckedChangeListener(SearchActivity.this);  button.setOnClickListener(SearchActivity.this);  try { toogleVisibility(progressbar, button, mill_edit, mill_switch); toogleVisibility(views.toArray(new View[views.size()])); } catch (ViewNotFoundException e) { e.printStackTrace(); } } 	0	0	0	0	1	0
public float fetchAccuracy(){ float accuracy = data.getLatestNTaskCorrectness(1).get(0); return accuracy; } 	0	0	0	0	1	0
"public AbstractRequestDto addBasicAuth(final String userName, final String password) { final String encoding = Base64.encodeBase64String(""test1:test1"".getBytes(Charset.forName(""UTF-8""))); addHeader(""Authorization"", ""Basic "" + encoding); return getSelf(); } "	0	0	0	0	1	0
"private void checkOpeningCurlyBraceLastTokenOnTheLine(AstNode node) { if (node.is(CssGrammar.OPEN_CURLY_BRACE)) { if (isOnSameLine(node, node.getNextAstNode())) { getContext().createLineViolation(this, ""Move the code following the opening curly brace to the next line."", node); } if (!isOnSameLine(node, node.getPreviousAstNode().getLastChild())) { getContext().createLineViolation(this, ""Move the opening curly brace to the previous line."", node); } } } "	0	0	0	0	1	0
"public void regRequest(View view) { //        String username = Preferences.getSettingsParam(""username""); String username = ((EditText) findViewById(R.id.editTextName)).getText().toString(); if (username.equals ("""")) { msg.setText(""Username cannot be empty.""); return; } Preferences.setSettingsParam(""username"", username);  title.setText(""Registration operation executed, Username = "" + username);  Intent i = new Intent(""org.fidoalliance.intent.FIDO_OPERATION""); i.addCategory(""android.intent.category.DEFAULT"");  i.setType(""application/fido.uaf_client+json"");  List<ResolveInfo> queryIntentActivities = this.getPackageManager().queryIntentActivities(i, PackageManager.MATCH_DEFAULT_ONLY); String facetID = """"; try { facetID = getFacetID(this.getPackageManager().getPackageInfo(this.getPackageName(), this.getPackageManager().GET_SIGNATURES)); title.setText(""facetID="" + facetID); } catch (NameNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } String regRequest = reg.getUafMsgRegRequest(username, facetID); title.setText(""{regRequest}"" + regRequest);  Bundle data = new Bundle(); data.putString(""message"", regRequest); data.putString(""UAFIntentType"", UAFIntentType.UAF_OPERATION.name()); data.putString(""channelBindings"", regRequest); i.putExtras(data);  //		i.setComponent(new ComponentName(queryIntentActivities.get(0).activityInfo.packageName, queryIntentActivities.get(0).activityInfo.name)); startActivityForResult(i, REG_ACTIVITY_RES_3); } "	0	0	0	0	1	0
"private String executeCommand(String methodName, final String[] values) { String output = commandProcessor.getString(methodName, values);  if (output != null && LOG.isDebugEnabled()) { LOG.debug(""Command processor returned '"" + output + ""'""); }  return output; } "	0	0	0	0	1	0
@Override public int executeUpdate( String sql, String[] columnNames ) throws SQLException { throwIfClosed(); try { if ( null != timeoutTrigger ) { triggerHandle = TimeoutService.getTimeoutTaskPool().submit( timeoutTrigger ); } return super.executeUpdate( sql, columnNames ); } catch (UnsupportedOperationException e) { throw new SQLFeatureNotSupportedException(e.getMessage(), e); } } 	0	0	0	0	1	0
"@Override public void handle(JSONObject packet) { User user = api.getUserById(packet.getJSONObject(""user"").getString(""id""));  // check username if (packet.getJSONObject(""user"").has(""username"")) { String name = packet.getJSONObject(""user"").getString(""username""); if (!user.getName().equals(name)) { String oldName = user.getName(); ((ImplUser) user).setName(name); List<Listener> listeners = api.getListeners(UserChangeNameListener.class); synchronized (listeners) { for (Listener listener : listeners) { ((UserChangeNameListener) listener).onUserChangeName(api, user, oldName); } } } }  // check game if (packet.has(""game"") && !packet.isNull(""game"")) { if (packet.getJSONObject(""game"").has(""name"")) { String game = packet.getJSONObject(""game"").getString(""name""); String oldGame = user.getGame(); if ((game == null && oldGame != null) || (game != null && oldGame == null) || !game.equals(oldGame)) { ((ImplUser) user).setGame(game); List<Listener> listeners = api.getListeners(UserChangeGameListener.class); synchronized (listeners) { for (Listener listener : listeners) { ((UserChangeGameListener) listener).onUserChangeGame(api, user, oldGame); } } } } } } "	0	0	0	0	1	0
@Override public void update(){ if(worldObj.isRemote){ return; }  if(!init){ temp = EnergyConverters.BIOME_TEMP_MULT * getWorld().getBiomeGenForCoords(getPos()).getFloatTemperature(getPos()); init = true; }  if(temp >= -274 && dContent != null && dContent.amount >= WATER_USE && CAPACITY - (content == null ? 0 : content.amount) >= WATER_USE && inventory != null && inventory.getItem() == ModItems.dustSalt){ --temp; if((dContent.amount -= WATER_USE) <= 0){ dContent = null; }  if(--inventory.stackSize <= 0){ inventory = null; }  if(content == null){ content = new FluidStack(FluidRegistry.WATER, WATER_USE); }else{ content.amount += WATER_USE; } } } 	0	0	0	0	1	0
public void setSearchKeywords(String searchKeywords) { this._searchKeywords = searchKeywords; } 	0	0	0	0	1	0
"public static ISearchResults<IAsset> listAssets(IHBaseContext context, String categoryId, ISearchCriteria criteria) throws SiteWhereException { HTableInterface assets = null; ResultScanner scanner = null; byte[] start = HBaseAssetCategory.KEY_BUILDER.buildSubkey(categoryId, AssetCategorySubtype.Asset.getType()); byte[] end = HBaseAssetCategory.KEY_BUILDER.buildSubkey(categoryId, (byte) (AssetCategorySubtype.Asset.getType() + 1)); try { assets = context.getClient().getTableInterface(ISiteWhereHBase.ASSETS_TABLE_NAME); Scan scan = new Scan(); scan.setStartRow(start); scan.setStopRow(end); scanner = assets.getScanner(scan);  Pager<IAsset> pager = new Pager<IAsset>(criteria); for (Result result : scanner) { byte[] payloadType = result.getValue(ISiteWhereHBase.FAMILY_ID, ISiteWhereHBase.PAYLOAD_TYPE); byte[] payload = result.getValue(ISiteWhereHBase.FAMILY_ID, ISiteWhereHBase.PAYLOAD); byte[] typeBytes = result.getValue(ISiteWhereHBase.FAMILY_ID, ASSET_TYPE_INDICATOR);  if ((payloadType != null) && (payload != null)) { Class<?> clazz = getClassForType(typeBytes);  Asset asset = (Asset) PayloadMarshalerResolver.getInstance().getMarshaler(payloadType).decode( payload, clazz); pager.process(asset); } } return new SearchResults<IAsset>(pager.getResults()); } catch (IOException e) { throw new SiteWhereException(""Error in list operation."", e); } finally { if (scanner != null) { scanner.close(); } HBaseUtils.closeCleanly(assets); } } "	0	0	0	0	1	0
"public void subscribe(String topicName, int qos) throws MqttException {  // Connect to the server client.connect(); log(""Connected to ""+brokerUrl);  // Subscribe to the topic log(""Subscribing to topic \""""+topicName+""\"" qos ""+qos); client.subscribe(topicName, qos);  // Block until Enter is pressed log(""Press <Enter> to exit""); try { System.in.read(); } catch (IOException e) { //If we can't read we'll just exit }  // Disconnect the client client.disconnect(); log(""Disconnected""); } "	0	0	0	0	1	0
"@Test public void should_throw_an_exception_if_the_configuration_file_does_not_exist_for_the_active_profile() throws Exception { String path = new File(""src/test/resources/configuration-loader/default-mode"".replace(""/"", File.separator)) .getAbsolutePath(); System.setProperty(StandardConfigurationLoader.DANDELION_CONFIGURATION, path); System.setProperty(Profile.DANDELION_PROFILE_ACTIVE, ""missing"");  exception.expect(DandelionException.class); exception.expectMessage(""The file \"""" + path + File.separatorChar + ""dandelion_missing.properties\"" doesn't exist."");  loader.loadUserConfiguration(); } "	0	0	0	0	1	0
@Override public void onClick(View view) { mDistrictPopup.show(); } 	0	0	0	0	1	0
"public static boolean isFirstLine(String response) { return response.contains(""DRC-1.00""); } "	0	0	0	0	1	0
"@Override protected IStatus run(IProgressMonitor monitor) { TacitFormComposite.setConsoleViewInFocus(); TacitFormComposite.updateStatusMessage(getViewSite(), null, null, form); Display.getDefault().syncExec(new Runnable() { @Override public void run() { tags = queryText.getText(); pages = Integer.parseInt(pageText.getText()); corpusName = corpusNameTxt.getText(); isDate = dateRange.getSelection(); jsonFilter[0] = questionUserBtn.getSelection(); jsonFilter[1] = ansUserBtn.getSelection(); jsonFilter[2] = commentUserBtn.getSelection(); jsonFilter[3] = isAnsweredBtn.getSelection(); jsonFilter[4] = answerBodyBtn.getSelection(); jsonFilter[5] = commentBodyBtn.getSelection(); ansLimit = Integer.parseInt(answerCount.getText().trim()); comLimit = Integer.parseInt(commentCount.getText().trim()); if(Creation.getSelection()) crawlOrder = ""creation""; if(Activity.getSelection()) crawlOrder = ""activity""; if(Votes.getSelection()) crawlOrder = ""votes""; if (isDate) { System.out.print(""_____________________________""); Calendar cal = Calendar.getInstance(); cal.set(fromDate.getYear(), fromDate.getMonth(), fromDate.getDay()); from = cal.getTimeInMillis() / 1000; cal.set(toDate.getYear(), toDate.getMonth(), toDate.getDay()); to = cal.getTimeInMillis() / 1000; System.out.println(from + ""   "" + to); } outputDir = IStackExchangeCrawlerUIConstants.DEFAULT_CORPUS_LOCATION + File.separator + corpusName.trim(); if (!new File(outputDir).exists()) { new File(outputDir).mkdirs(); } } });  int progressSize = pages*30 + 30; monitor.beginTask(""Running StackExchange Crawler..."", progressSize); TacitFormComposite.writeConsoleHeaderBegining(""StackExchange Crawler started""); crawler.setDir(outputDir); // StackCaller s = new StackCaller(outputDir, null); monitor.subTask(""Initializing...""); monitor.worked(10); if (monitor.isCanceled()) handledCancelRequest(""Cancelled""); corpus = new Corpus(corpusName, CMDataType.STACKEXCHANGE_JSON); for (final String domain : selectedRepresentatives) { outputDir = IStackExchangeCrawlerUIConstants.DEFAULT_CORPUS_LOCATION + File.separator + corpusName; outputDir += File.separator + domain; if (!new File(outputDir).exists()) { new File(outputDir).mkdirs(); } crawler.setDir(outputDir); try { monitor.subTask(""Crawling...""); if (monitor.isCanceled()) return handledCancelRequest(""Cancelled""); if (!isDate) crawler.search(tags, pages, corpusName, scs, StackConstants.domainList.get(domain), jsonFilter, ansLimit, comLimit, crawlOrder, monitor); else crawler.search(tags, pages, corpusName, scs, StackConstants.domainList.get(domain), from, to, jsonFilter, ansLimit, comLimit, crawlOrder, monitor); if (monitor.isCanceled()) return handledCancelRequest(""Cancelled""); } catch (Exception e) { return handleException(monitor, e, ""Crawling failed. Provide valid data""); } try { Display.getDefault().syncExec(new Runnable() {  @Override public void run() {  CorpusClass cc = new CorpusClass(domain, outputDir); cc.setParent(corpus); corpus.addClass(cc);  } }); } catch (Exception e) { e.printStackTrace(); return Status.CANCEL_STATUS; } } ManageCorpora.saveCorpus(corpus); if (monitor.isCanceled()) return handledCancelRequest(""Cancelled"");  monitor.worked(100); monitor.done(); return Status.OK_STATUS; } "	0	0	0	0	1	0
"@Test public void getReleaseGroupPattern() throws Exception { assertEquals(""[]_Infinite_Stratos_2_-_01_[]"", clean(info.getReleaseGroupTrimPattern(), ""[HorribleSubs]_Infinite_Stratos_2_-_01_[HorribleSubs]"")); assertEquals(""[]_Infinite_Stratos_2_-_01_[]"", clean(info.getReleaseGroupPattern(true), ""[HorribleSubs]_Infinite_Stratos_2_-_01_[HorribleSubs]"")); assertEquals(""[]_Infinite_Stratos_2_-_01_[]"", clean(info.getReleaseGroupPattern(false), ""[HorribleSubs]_Infinite_Stratos_2_-_01_[HorribleSubs]""));  assertEquals(""DVL"", info.getReleaseGroup(""Movie-DVL"")); assertEquals(""iMBT"", info.getReleaseGroup(""The.Legend.Of.Zorro-iMBT""));  assertEquals(""[The Legend of the Blue Sea]"", info.cleanRelease(singleton(""The.Legend.of.the.Blue.Sea.E01""), false).toString()); assertEquals(""[The Legend of the Blue Sea]"", info.cleanRelease(singleton(""[Legend].The.Legend.of.the.Blue.Sea.E01-Legend""), false).toString()); } "	0	0	0	0	1	0
"public String[] downloadFromSRA(String runID) throws ProcessException {  String filePaths[] = new String[2];  try {  filePaths[0] = getRunFile(runID); filePaths[1] = getMetaData(runID);  } catch (RuntimeException e) {  ErrorLogger.log(""SRA"", e.getMessage());  if (e.getMessage().contains(""No such directory"")) {  throw new ProcessException(""File "" + runID + "" does not exist"");  } else {  throw new ProcessException(""Could not download file"");  }  } catch (Exception e) {  ErrorLogger.log(""SRA"", e.getMessage());  throw new ProcessException(""Could not download file"");  }  cleanUp(runID);  return filePaths; } "	0	0	0	0	1	0
"@Path(""/students/{STUDENTID:[0-9]*}/courses/{COURSEID:[0-9]*}/assessments/{ID:[0-9]*}"") @GET @RESTPermit(handling = Handling.INLINE) // @RESTPermit(CourseAssessmentPermissions.FIND_COURSEASSESSMENT) public Response findCourseAssessmentById(@PathParam(""STUDENTID"") Long studentId, @PathParam(""COURSEID"") Long courseId, @PathParam(""ID"") Long id) {  Student student = studentController.findStudentById(studentId);  if (student == null) { return Response.status(Status.NOT_FOUND).build(); }  if (student.getArchived()) { return Response.status(Status.NOT_FOUND).build(); }  if (!restSecurity.hasPermission(new String[] { CourseAssessmentPermissions.FIND_COURSEASSESSMENT, StudentPermissions.STUDENT_OWNER }, student, Style.OR)) { return Response.status(Status.FORBIDDEN).build(); }  Course course = courseController.findCourseById(courseId);  if (course == null) { return Response.status(Status.NOT_FOUND).build(); }  if (course.getArchived()) { return Response.status(Status.NOT_FOUND).build(); }  CourseAssessment courseAssessment = assessmentController.findCourseAssessmentById(id); if (!course.getId().equals(courseAssessment.getCourseStudent().getCourse().getId())) { return Response.status(Status.NOT_FOUND).entity(""Could not find a course assessment for course student course"").build(); }  if (!student.getId().equals(courseAssessment.getCourseStudent().getStudent().getId())) { return Response.status(Status.NOT_FOUND).entity(""Could not find a course assessment for course student student"").build(); }  return Response.ok(objectFactory.createModel(courseAssessment)).build(); } "	0	0	0	0	1	0
@Override protected void onNewIntent(Intent intent) { if (intent.getClipData() != null) { mFirebaseLogger.logShareReceived(intent.getClipData().getItemCount()); ClipData clipData = intent.getClipData(); for (int i = 0; i < clipData.getItemCount(); ++i) { Intent serviceIntent = new Intent(this, AddNewPatternService.class); serviceIntent.setData(clipData.getItemAt(i).getUri()); startService(serviceIntent); } } } 	0	0	0	0	1	0
@Test public void replayWhilstPending() throws Exception { // Check that if a pending transaction spends outputs of chain-included transactions, we mark them as spent. // See bug 345. This can happen if there is a pending transaction floating around and then you replay the // chain without emptying the memory pool (or refilling it from a peer). Coin value = COIN; Transaction tx1 = createFakeTx(params, value, myAddress); Transaction tx2 = new Transaction(params); tx2.addInput(tx1.getOutput(0)); tx2.addOutput(valueOf(0, 9), new ECKey()); // Add a change address to ensure this tx is relevant. tx2.addOutput(CENT, wallet.getChangeAddress()); wallet.receivePending(tx2, null); BlockPair bp = createFakeBlock(blockStore, tx1); wallet.receiveFromBlock(tx1, bp.storedBlock, AbstractBlockChain.NewBlockType.BEST_CHAIN, 0); wallet.notifyNewBestBlock(bp.storedBlock); assertEquals(ZERO, wallet.getBalance()); assertEquals(1, wallet.getPoolSize(Pool.SPENT)); assertEquals(1, wallet.getPoolSize(Pool.PENDING)); assertEquals(0, wallet.getPoolSize(Pool.UNSPENT)); } 	0	0	0	0	1	0
@Override public void resetGyro() { gyro.reset(); } 	0	0	0	0	1	0
private String getDESystemId() { if(userInfo.hasAppsInfoError())  { return DE_SYSTEM_ID;  //hardcoded default } else { return userInfo.getSystemIds().getDESytemId(); } } 	0	0	0	0	1	0
"private void sendMessage(String type, String prefix, String message) { String string = type + "" "" + prefix + "" "" + message; try { if (session.isOpen()) { session.getBasicRemote().sendBinary(Charset.forName(""UTF-8"").encode(string)); } else { LOGGER.info(""Session is not open""); throw new Exception(); } } catch (Exception e) { LOGGER.info(""Could not send message: {}"", message); } } "	0	0	0	0	1	0
"public String execStart(String containerId, String... commands) { ExecCreateCmdResponse execCreateCmdResponse = this.dockerClient.execCreateCmd(containerId) .withAttachStdout(true).withAttachStdin(false).withAttachStderr(false).withTty().withCmd(commands) .exec(); InputStream consoleOutputStream = dockerClient.execStartCmd(execCreateCmdResponse.getId()).withDetach(false) .exec(); String output; try { output = readExecResult(consoleOutputStream); } catch (IOException e) { return """"; } return output; } "	0	0	0	0	1	0
"public ListOfSpansAssert doesNotHaveASpanWithName(String name) { isNotNull(); printSpans(); List<Span> matchingSpans = findSpansWithName(name); if (!matchingSpans.isEmpty()) { failWithMessage(""Expected spans \n <%s> \n\nnot to contain a span with name <%s>"", spansToString(), name); } return this; } "	0	0	0	0	1	0
"@Override public void setDonateInfo(final Help donate) { tvHowHelp.setText(donate.getHowToHelpDescription()); tvTransferTitle.setText(""Tytuł przelewu""); } "	0	0	0	0	1	0
"@Override public ScimResponse updateGroup(Group group, String id, String[] attributesArray) throws IOException {  init();  HttpClient httpClient = new HttpClient();  PutMethod put = new PutMethod(this.domain + ""/scim/v2/Groups/"" + id); put.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, ""utf-8"");  addAuthenticationHeader(put); put.setRequestHeader(""Accept"", Constants.MEDIA_TYPE_SCIM_JSON);  put.setQueryString(new NameValuePair[] { new NameValuePair(""attributes"", ((attributesArray != null && attributesArray.length > 0) ? StringUtils.join(attributesArray, ',') : null)) });  put.setRequestEntity(new StringRequestEntity(Util.getJSONString(group), Constants.MEDIA_TYPE_SCIM_JSON, ""utf-8""));  try {  httpClient.executeMethod(put);  ScimResponse response = ResponseMapper.map(put, new ScimResponse());  return response;  } catch (Exception ex) { ex.printStackTrace(); } finally { put.releaseConnection(); }  return null; } "	0	0	0	0	1	0
"@Override public ScimResponse retrieveServiceProviderConfig() throws IOException {  init();  HttpClient httpClient = new HttpClient();  GetMethod get = new GetMethod(this.domain + ""/scim/v2/ServiceProviderConfig""); get.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET, ""utf-8"");  addAuthenticationHeader(get); get.setRequestHeader(""Accept"", Constants.MEDIA_TYPE_SCIM_JSON);  /* if (mediaType.equals(MediaType.APPLICATION_JSON)) { get.setRequestHeader(""Accept"", MediaType.APPLICATION_JSON); }  if (mediaType.equals(MediaType.APPLICATION_XML)) { get.setRequestHeader(""Accept"", MediaType.APPLICATION_XML); } */  try {  httpClient.executeMethod(get);  ScimResponse response = ResponseMapper.map(get, new ScimResponse());  return response;  } catch (Exception ex) { ex.printStackTrace(); } finally { get.releaseConnection(); }  return null; } "	0	0	0	0	1	0
protected MPSTreeNodeEx findSNodeTreeNodeInParent(@NotNull SNode node, @NotNull final SModelTreeNode parent) { LinkedList<SNode> ancestors = new LinkedList<SNode>(); SNode current = node; while (current != null) { ancestors.addFirst(current); current = current.getParent(); }  MPSTreeNode currentTreeNode = parent; for (final SNode anc : ancestors) { final MPSTreeNode finalCurrentTreeNode = currentTreeNode; if (!currentTreeNode.isInitialized() && !currentTreeNode.hasInfiniteSubtree()) currentTreeNode.init();  currentTreeNode = findTreeNode(finalCurrentTreeNode, new Condition<MPSTreeNode>() { public boolean met(MPSTreeNode object) { return object == finalCurrentTreeNode; } }, new Condition<MPSTreeNode>() { public boolean met(MPSTreeNode tNode) { return (tNode instanceof SNodeTreeNode) && (((SNodeTreeNode) tNode).getSNode() == anc); } } ); if (currentTreeNode == null) return null; }  return (MPSTreeNodeEx) currentTreeNode; } 	0	0	0	0	1	0
"@Override public boolean validate() { this.errorMessage = null; HttpServletRequest request = ServiceManager.getInstance().getSharedResources().getRequest();  try { this.value = Integer.valueOf(request.getParameter(this.paramName)); if (this.value > 0) return true; else { this.errorMessage = String.format(""Параметр '%s' должен быть больше 0"", paramName); return false; } } catch (NullPointerException e) { return checkNullPermission(String.format(""Параметр '%s' отсутствует"", paramName)); } catch (NumberFormatException e) { this.errorMessage = String.format(""Параметр '%s' не является числом"", paramName); return false; } } "	0	0	0	0	1	0
"private void onUpdateLoadMessageProcedure(LoadMessageProcedure procedure) { if (procedure == null) { return; } RecyclerView listView = (RecyclerView) rootView.findViewById(R.id.recyclerview); if (listView != null && listView.getAdapter() instanceof MessageListAdapter) { MessageListAdapter adapter = (MessageListAdapter) listView.getAdapter(); final int syncstate = procedure.getSyncState(); final boolean hasNext = procedure.hasNext(); RCLog.d(""hasNext: %s syncstate: %d"", hasNext, syncstate); if (syncstate == SyncState.SYNCED || syncstate == SyncState.FAILED) { scrollListener.setLoadingDone(); adapter.updateFooter(hasNext, true); } else { adapter.updateFooter(hasNext, false); } } } "	0	0	0	0	1	0
"@Override public Void visitErrorStmt(ErrorStmt stmt, Void arg) { output.append(""<error-stmt>""); return null; } "	0	0	0	0	1	0
private void writeTerminatedIndented(List<? extends Node> nodes, String terminator) { increaseIndentation();  for (Node node : nodes) { output.append(indentation); node.accept(this, null); output.append(terminator); output.println(); }  decreaseIndentation(); } 	0	0	0	0	1	0
@Override public Void visitFloatingCst(FloatingCst expr, Void arg) { printConstant(expr); return null; } 	0	0	0	0	1	0
"@Override public Void visitErrorExpr(ErrorExpr expr, Void arg) { writeLeftParentheses(expr); output.append(""<syntax-error>""); writeRightParentheses(expr); return null; } "	0	0	0	0	1	0
@Override public Void visitPreincrement(Preincrement expr, Void arg) { printPreincrement(expr, INCREMENT); return null; } 	0	0	0	0	1	0
@Override public Void visitRid(Rid rid, Void arg) { output.append(rid.getId().getName()); return null; } 	0	0	0	0	1	0
"private boolean parseMessage(String message) { JsonObject jsonMessage = parser.parse(message).getAsJsonObject(); //        JsonObject jsonMessage = null; //        try { //            jsonMessage = parser.parse(message).getAsJsonObject(); //        } //        catch (Exception e) { //            e.printStackTrace(); //        }  if (jsonMessage.get(""type"").getAsString().equals(""id"")) { // Receiving our AI id // This is the connection process and // the first answer from the server System.out.println(""Connexion OK""); Long id = jsonMessage.get(""id"").getAsLong(); gameWorld.getMyAI().setId(id); return false; } else { // Receiving a message. The turn starts. JsonObject dataPart = jsonMessage.get(""data"").getAsJsonObject();   ///////////////////////////////////////// //              Turn number            // ///////////////////////////////////////// gameWorld.setGameTurn(dataPart.get(""currentTurn"").getAsInt());  if (gameWorld.getGameTurn() == 0) { initFunc.run(); }  ///////////////////////////////////////// //              AIs Infos               // ///////////////////////////////////////// JsonArray aiList = dataPart.get(""aiList"").getAsJsonArray(); gameWorld.parseAiInfos(aiList);   ///////////////////////////////////////// //        Cells & AIs Positions        // ///////////////////////////////////////// JsonArray labyrinth = dataPart.get(""cells"").getAsJsonArray(); gameWorld.initNbLines(labyrinth.size()); for (int i = 0; i < labyrinth.size(); i++) { JsonArray labyrinthLine = labyrinth.get(i).getAsJsonArray(); gameWorld.initNbCellsInLine(i, labyrinthLine.size()); for (int j = 0; j < labyrinthLine.size(); j++) { JsonObject cell = labyrinthLine.get(j).getAsJsonObject(); gameWorld.parseCell(cell, i, j); } } return true; } } "	0	0	0	0	1	0
"private final void importVersion(final NodeRef               nodeRef, final BulkImportItemVersion previousVersion, final BulkImportItemVersion version, final boolean               dryRun, final boolean               onlyOneVersion) throws InterruptedException { Map<String, Serializable> versionProperties = new HashMap<>(); boolean                   isMajor           = true;  if (version == null) { throw new IllegalStateException(""version was null. This is indicative of a bug in the chosen import source.""); }  importVersionContentAndMetadata(nodeRef, version, dryRun);  if (previousVersion != null && version.getVersionNumber() != null) { final BigDecimal difference = version.getVersionNumber().subtract(previousVersion.getVersionNumber());  isMajor = difference.compareTo(BigDecimal.ONE) >= 0; }  // Note: PROP_VERSION_LABEL is a ""reserved"" property, and cannot be modified by custom code. // In other words, we can't use the source's version label as the version label in Alfresco.  :-( // See: https://github.com/pmonks/alfresco-bulk-import/issues/13 //        versionProperties.put(ContentModel.PROP_VERSION_LABEL.toString(), String.valueOf(version.getVersionNumber().toString()));  versionProperties.put(VersionModel.PROP_VERSION_TYPE, isMajor ? VersionType.MAJOR : VersionType.MINOR);  if (version.getVersionComment() != null) { versionProperties.put(VersionModel.PROP_VERSION_DESCRIPTION, version.getVersionComment()); }  if (dryRun) { if (info(log)) info(log, ""[DRY RUN] Would have created "" + (isMajor ? ""major"" : ""minor"") + "" version of node '"" + String.valueOf(nodeRef) + ""'.""); } else { // Only create versions if we have to - this is an exceptionally expensive operation in Alfresco if (onlyOneVersion) { if (trace(log)) trace(log, ""Skipping creation of a version for node '"" + String.valueOf(nodeRef) + ""' as it only has one version.""); } else { if (trace(log)) trace(log, ""Creating "" + (isMajor ? ""major"" : ""minor"") + "" version of node '"" + String.valueOf(nodeRef) + ""'.""); versionService.createVersion(nodeRef, versionProperties); } } } "	0	0	0	0	1	0
private Map<String, Object> loadPolyfills(List<Path> polyfillPaths) { Map<String, Object> polyfills = new HashMap<>(); for (Path polyfillPath : polyfillPaths) { Map<String, Object> featureConfigs = loadConfig(polyfillPath); String key = getPolyfillKey(featureConfigs); if (featureConfigs != null) { polyfills.put(key, featureConfigs); } } return polyfills; } 	0	0	0	0	1	0
public static Set<Statement> find(CoreMap sentence) { SemanticGraph graph = sentence.get(SemanticGraphCoreAnnotations.AlternativeDependenciesAnnotation.class); graph.prettyPrint();  // TODO: remove when done debugging  // find statement components Set<AbstractComponent> components = new HashSet<>(); components.addAll(subjectFinder.find(graph)); components.addAll(verbFinder.find(graph)); components.addAll(directObjectFinder.find(graph)); components.addAll(indirectObjectFinder.find(graph));  components = reduceToNonOverlappingComponents(components);  // link components to produce statements Set<Statement> statements = link(graph, components);  // annotate with origin // TODO: better way to do this? for (Statement statement : statements) { statement.setOrigin(sentence); }  return statements; } 	0	0	0	0	1	0
private java.sql.PreparedStatement prepareStatement(String sql) throws java.sql.SQLException { java.sql.PreparedStatement stmt = quadStoreConnection.prepareStatement(sql); int timeout = repository.getQueryTimeout(); if (timeout > 0) stmt.setQueryTimeout(timeout); stmt.setFetchSize(prefetchSize); return stmt; } 	0	0	0	0	1	0
"void setupDatabaseSize() { Preference preference = findPreference(""key_file_size""); String location = getPreferenceManager().getSharedPreferences().getString(""key_storage"", configuration.database.location); long fileSize = FileManager.getFileSize(getActivity(), location); preference.setSummary(FileManager.formatSize(fileSize)); } "	0	0	0	0	1	0
private void checkForBlockedPublisher(final long timeNs) { final long consumerPosition = this.consumerPosition;  if (consumerPosition == lastConsumerPosition && isProducerPositionDifferent(consumerPosition)) { if (timeNs > (timeOfLastConsumerPositionUpdateNs + unblockTimeoutNs)) { if (LogBufferUnblocker.unblock(termBuffers, metaDataBuffer, consumerPosition)) { unblockedPublications.orderedIncrement(); } } } else { timeOfLastConsumerPositionUpdateNs = timeNs; lastConsumerPosition = consumerPosition; } } 	0	0	0	0	1	0
@FXML public void searchMouseListener(MouseEvent event) { System.out.println(getScene());  if(event.getSource().equals(listView)) { QueryVariables.setSearchTerm(listView.getSelectionModel().getSelectedItem()); searchField.setText(listView.getSelectionModel().getSelectedItem());  if(SearchListFrameController.controller.ButtonListContainer.getChildren().isEmpty()) { FirstSearchCall(); } else if(!SearchListFrameController.controller.ButtonListContainer.getChildren().isEmpty() && listView.getSelectionModel().getSelectedItem().compareTo(searchFieldText) != 0) { ClearListSearchCall(); } else if(listView.getSelectionModel().getSelectedItem().compareTo(searchFieldText) == 0) { // Do Nothing } } else if(event.getSource().equals(ImageButton)) { searchingLogicForSearchField(); } } 	0	0	0	0	1	0
private float valuePerDegree() { return (float) (mMax - mMin) / 360; } 	0	0	0	0	1	0
"@Override public String toString() { return x + "","" + y; } "	0	0	0	0	1	0
"public void fillComboBox(){ //TO DO : fill combobox with xml formats provided in folder  String[] formats  = {""select format"",""textFormat"", ""fooFormat"", ""faaFormat""}; xmlFormat = new JComboBox<String>(formats); } "	0	0	0	0	1	0
"@Override public SourceOperator createOperator(DriverContext driverContext) { checkState(!closed, ""Factory is already closed""); OperatorContext operatorContext = driverContext.addOperatorContext(operatorId, FilterAndProjectOperator.class.getSimpleName()); return new ScanFilterAndProjectOperator( operatorContext, sourceId, pageSourceProvider, cursorProcessor, pageProcessor, columns, types); } "	0	0	0	0	1	0
public boolean isEmpty() { return ref.deletionInfo.isLive() && BTree.isEmpty(ref.tree); } 	0	0	0	0	1	0
"private String loadNewVersion() { try { URL url = new URL(""""); HttpURLConnection con = (HttpURLConnection) url.openConnection();  con.setDoOutput(true); con.setRequestMethod(""POST""); con.getOutputStream().write((""key="" + key + ""&resource="" + id).getBytes(""UTF-8""));  return new BufferedReader(new InputStreamReader(con.getInputStream())).readLine().replaceAll(""[a-zA-Z ]"", """"); } catch (Exception ex) { ex.printStackTrace();  return this.oldVersion; } } "	0	0	0	0	1	0
"@Transactional(readOnly = true) public List<User> retrieveUsersByUsername(String username) { return retrieveByField(""username"", ""like"", username, ""UserDetails""); } "	0	0	0	0	1	0
public E getDirectChecked(final int index) { return index < capacity() && index >= 0 ? get(index) : null; } 	0	0	0	0	1	0
"public void testAddStopServiceRequest() throws Exception { start(); assertCoreStarted();  Stop s = new Stop(TestConstants.BLUE_EXPO_7TH_METRO_STOPID); assertTrue(""Stop should be valid"", s.isValid());  StopServiceRequest r = new StopServiceRequest(s, ""Test7thMetroStop""); assertTrue(""ServiceRequest should be valid"", r.isValid()); assertTrue(""ServiceRequest should be in scope"", r.isInScope());  addRequest(r);  assertTrue(""There should be a request added"", serviceRequestHandler.numRequests() == 1); assertTrue(predictionManager.isRunning());  // Side effect: Starts trip predicting. r.makePredictions();  Thread.sleep(1000);  assertTrue(""PredictionManager should be tracking 1 prediction"", predictionManager.numPredictions() == 1); assertTrue(""Request should have received 3 trips: 7th * 2, Culver, Long Beach"", r.getTrips().size() == 4); } "	0	0	0	0	1	0
"@Security.Authenticated(AdminFilter.class) public static Result delete(int id) { Faq.delete(id); flash(""deleteFaq"", ""Succesfuly deleted FAQ!""); return redirect(""/admin/faq""); } "	0	0	0	0	1	0
"@Override public Response addUser(final UserResponse user) throws BadRequestException { if (!userDataIsValid(user)) { throw new BadRequestException(""User's email cannot be blank.""); } else { TechGalleryUser userEntity = new TechGalleryUser(); fillUserData(user, userEntity); userDAO.add(userEntity); // set the id and return it user.setId(userEntity.getId()); return user; } } "	0	0	0	0	1	0
"public void printException(Throwable e) { File exceptionFile = new File(""ERROR_"" + UUID.randomUUID().toString() + "".txt""); try (PrintStream exout = new PrintStream(exceptionFile)) { e.printStackTrace(exout); } catch (FileNotFoundException e1) { e1.printStackTrace(); } finally { logDebug(""Exit due to exception, see: '"" + exceptionFile.getAbsolutePath() + ""'""); e.printStackTrace(ps); close(); System.exit(99); } } "	0	0	0	0	1	0
"public void drawTrack() { int offset = Math.round(longestTrackFrameLength / GRAPH_POINT_COUNT); System.out.println(""Offset: "" + offset);  XYChart.Series<Number, Number> series = new XYChart.Series<Number, Number>();  float[] tempData = track.getAudioData();  int audioFileLength = track.getLength(); int x = 0;  /** * TODO momentan ist die Zeichnung auf 2000 Werte begrenzt, bei längeren * Files kommt dadurch kein schönes Bild zustande, müssen wir uns noch * anschauen */  for (int i = 0; i < audioFileLength * track.getNumberOfChannels(); i += offset) { float mean = 0; float leftChannel = tempData[i];  if (track.getNumberOfChannels() == 2) { float rightChannel = tempData[i + 1]; mean = (leftChannel + rightChannel) / 2; } else { mean = leftChannel; } series.getData().add(new XYChart.Data<Number, Number>(x, mean)); x++; }  // Fill rest with zeroes // TODO: it seems like we're actually drawing 2 x 2000 points?? for (; x < GRAPH_POINT_COUNT * track.getNumberOfChannels(); x++) { series.getData().add(new XYChart.Data<Number, Number>(x, 0)); }  lineChartWaveform.getData().clear(); lineChartWaveform.getData().add(series);  NumberAxis xAxis = (NumberAxis) lineChartWaveform.getXAxis(); xAxis.setAutoRanging(false); xAxis.setUpperBound(x - 1); NumberAxis yAxis = (NumberAxis) lineChartWaveform.getYAxis(); yAxis.setAutoRanging(false); yAxis.setLowerBound(-1.0); yAxis.setUpperBound(1.0); } "	0	0	0	0	1	0
"public void initStatusPanes() { int startY = 30;  levelLabel = new Text(""LEVEL: ""); levelLabel.setLayoutX(3 * width / 7); levelLabel.setLayoutY(startY); levelLabel.setFill(Color.WHITE); levelLabel.setFont(Font.font(""Consolas"", FontWeight.NORMAL, 24)); mainpane.getChildren().add(levelLabel);  scoreLabel1 = new Text(""Score1""); scoreLabel1.setFill(Color.WHITE); scoreLabel1.setFont(Font.font(""Consolas"", FontWeight.NORMAL, 24));  livespane1 = new Pane(); livespane1.setLayoutX(width - 45);  if (Game.getInstance().getGameMode() == GameMode.SINGLEPLAYER) { scoreLabel1.setLayoutX(10); scoreLabel1.setLayoutY(startY); mainpane.getChildren().add(scoreLabel1);  livespane1.setLayoutY(startY - 20); mainpane.getChildren().add(livespane1); } else { Text player1 = new Text(""Player 1""); player1.setFill(Color.LIGHTGREEN); player1.setFont(Font.font(""Consolas"", FontWeight.NORMAL, 24)); player1.setLayoutX(10); player1.setLayoutY(startY); mainpane.getChildren().add(player1);  scoreLabel1.setLayoutX(10); scoreLabel1.setFill(Color.LIGHTGREEN); scoreLabel1.setLayoutY(player1.getLayoutY() + 30); scoreLabel1.setFont(Font.font(""Consolas"", FontWeight.NORMAL, 18)); mainpane.getChildren().add(scoreLabel1);  livespane1.setLayoutY(startY - 20); mainpane.getChildren().add(livespane1);  Text player2 = new Text(""Player 2""); player2.setFill(Color.LIGHTBLUE); player2.setFont(Font.font(""Consolas"", FontWeight.NORMAL, 24)); player2.setLayoutX(width - 120); player2.setLayoutY(startY); mainpane.getChildren().add(player2);  scoreLabel2 = new Text(""Score2""); scoreLabel2.setFill(Color.LIGHTBLUE); scoreLabel2.setFont(Font.font(""Consolas"", FontWeight.NORMAL, 18)); scoreLabel2.setLayoutX(width - 120); scoreLabel2.setLayoutY(player2.getLayoutY() + 30); mainpane.getChildren().add(scoreLabel2);  livespane2 = new Pane(); livespane2.setLayoutY(startY - 20); mainpane.getChildren().add(livespane2); }  } "	0	0	0	0	1	0
"@Override public void onUpdate(ItemStack par1ItemStack, World par2World, Entity par3Entity, int par4, boolean par5) { if (!(par3Entity instanceof EntityPlayer)) { return; }  EntityPlayer par3EntityPlayer = (EntityPlayer) par3Entity;  if (par1ItemStack.getTagCompound() == null) { par1ItemStack.setTagCompound(new NBTTagCompound()); }  if (par2World.getWorldTime() % 200 == par1ItemStack.getTagCompound().getInteger(""worldTimeDelay"") && par1ItemStack.getTagCompound().getBoolean(""isActive"")) { if (!par3EntityPlayer.capabilities.isCreativeMode) { if (!SoulNetworkHandler.syphonAndDamageFromNetwork(par1ItemStack, par3EntityPlayer, 20)) { this.setActivated(par1ItemStack, false); } } }  par1ItemStack.setItemDamage(0); } "	0	0	0	0	1	0
@Override public Currency getDefaultCurrency() { return new LiteCurrency(); } 	0	0	0	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { if(getSplashScreenLayout() != -1 && getSplashScreenImageID() != -1) { splashDialog = new SplashDialog(this, getSplashScreenLayout(), getSplashScreenImageID()); splashDialog.show(); launchTime = SystemClock.elapsedRealtime(); } super.onCreate(savedInstanceState); splashMinDuration = getResources().getInteger(android.R.integer.config_longAnimTime) + SPLASH_DURATION_AFTER_ANIM; NativeUtility.setMainActivity(this); for(ActivityObserver observer : observers) { observer.onStateChanged(ActivityObserver.CREATE); } } 	0	0	0	0	1	0
"@Test public void testUpload_badFileContent() throws Exception { RateLimitedTestRunner.run(() -> { final File file = new File(""Plan""); final TypedFile typedFile = new TypedFile(""text/xml"", file); StravaUploadResponse response = null; try { response = apiWithWriteAccess().upload(StravaActivityType.RIDE, ""UploadServicesImplTest.testUpload_noName"", null, null, null, ""gpx"", ""ABC"", typedFile); } catch (final IllegalArgumentException e) { // Expected return; }  apiWithWriteAccess().deleteActivity(response.getActivityId()); fail(""Uploaded a file with an invalid file!""); }); } "	0	0	0	0	1	0
"private void setupDetailsOverviewRowPresenter() {  // Set detail background and style. DetailsOverviewRowPresenter detailsPresenter = new DetailsOverviewRowPresenter( new DetailsDescriptionPresenter() ); detailsPresenter.setBackgroundColor( getResources().getColor( R.color.primary_dark ) ); detailsPresenter.setStyleLarge( true );  // Hook up transition element. detailsPresenter.setSharedElementEnterTransition( getActivity(), MediaItemDetailsActivity.SHARED_ELEMENT_NAME );  detailsPresenter.setOnActionClickedListener(action -> {  if( action.getId() == ACTION_WATCH ) {  String masterBackendUrl = getMasterBackendUrl(); if( getSharedPreferencesModule().getInternalPlayer() ) {  VideoModel videoModel = new VideoModel .VideoModelBuilder() .id( mediaItemModel.id() ) .category( mediaItemModel.media().name() ) .title( mediaItemModel.title() ) .description( mediaItemModel.description() ) .videoUrl( masterBackendUrl + mediaItemModel.url() ) .bgImageUrl( masterBackendUrl + mediaItemModel.bannerUrl() ) .cardImageUrl( masterBackendUrl + mediaItemModel.previewUrl() ) .studio( mediaItemModel.studio() ) .build();  Intent intent = new Intent( getActivity(), PlaybackOverlayActivity.class ); intent.putExtra( PlaybackOverlayFragment.VIDEO, videoModel ); startActivity( intent );  } else {  String externalPlayerUrl = masterBackendUrl + mediaItemModel.url(); Log.i( TAG, ""externalPlayerUrl="" + externalPlayerUrl );  final Intent externalPlayer = new Intent( Intent.ACTION_VIEW ); externalPlayer.setDataAndType( Uri.parse( externalPlayerUrl ), ""video/*"" ); startActivity( externalPlayer );  }  } else {  Toast.makeText( getActivity(), action.toString(), Toast.LENGTH_SHORT ).show();  }  });  mPresenterSelector.addClassPresenter( DetailsOverviewRow.class, detailsPresenter ); } "	0	0	0	0	1	0
"@EventHandler(priority=EventPriority.HIGHEST) public void onEntityDeath(EntityDeathEvent event) { if (!(event.getEntity() instanceof Player)) return;  Player player = (Player)event.getEntity(); UUID uuid = player.getUniqueId(); String playerName = player.getName();  if (combatManager.isCombatTagNPC(event.getEntity()))  { playerName = player.getName(); // UUID being passed isn't the right one. uuid = NameAPI.getUUID(playerName); //String realName = combatTagManager.getNPCPlayerName(player); PrisonPearlPlugin.log(""NPC Player: ""+playerName+"", ID: ""+ uuid); //			if (!realName.equals("""")) { //				playerName = realName; //			} } else if (combatManager.isCombatTagPlusNPC(player)){ NpcIdentity iden = combatManager.getCombatTagPlusNPCIdentity(player); uuid = iden.getId(); playerName = iden.getName(); PrisonPearlPlugin.log(""NPC Player: "" + playerName + "", ID: "" + uuid); } else if (combatManager.isEnabled() && !combatManager.isCombatTagged(player)) { PrisonPearlPlugin.log(""Player: "" + playerName + "" is out of combatTag, immune from pearling.""); return; }  PrisonPearl pp = pearls.getByImprisoned(uuid); // find out if the player is imprisoned if (pp != null) { // if imprisoned if (!PrisonPearlConfig.getAllowPrisonStealing() || player.getLocation().getWorld() == pearls.getImprisonWorld()) {// bail if prisoner stealing isn't allowed, or if the player is in prison (can't steal prisoners from prison ever) // reveal location of pearl to damaging players if pearl stealing is disabled for (Player damager : dlManager.getDamagers(player)) { damager.sendMessage(ChatColor.GREEN+""[PrisonPearl] ""+playerName+"" cannot be pearled here because they are already ""+pp.describeLocation()); } return; } }  for (Player damager : dlManager.getDamagers(player)) { // check to see if anyone can imprison him if (pp != null && pp.getHolderPlayer() == damager) // if this damager has already imprisoned this person break; // don't be confusing and re-imprison him, just let him die  int firstpearl = Integer.MAX_VALUE; // find the first regular enderpearl in their inventory for (Entry<Integer, ? extends ItemStack> entry : damager.getInventory().all(Material.ENDER_PEARL).entrySet()) { ItemStack stack = entry.getValue(); if (!stack.hasItemMeta()) firstpearl = Math.min(entry.getKey(), firstpearl); }  if (firstpearl == Integer.MAX_VALUE) // no pearl continue; // no imprisonment  if (PrisonPearlConfig.getMustPrisonPearlHotBar() && firstpearl > 9) // bail if it must be in the hotbar continue;  if (pearls.imprisonPlayer(uuid, damager)) // otherwise, try to imprison break; } } "	0	0	0	0	1	0
public CompletableFuture<Collection<Message>> receive() { if (this.receiveLink.getRemoteState() == EndpointState.CLOSED) { this.scheduleRecreate(Duration.ofSeconds(0)); }  List<Message> returnMessages = null; Message currentMessage = null; Message lastMessage = null; while ((currentMessage = this.prefetchedMessages.poll()) != null) { if (returnMessages == null) { returnMessages = new LinkedList<Message>(); }  returnMessages.add(currentMessage); lastMessage = currentMessage; }  if (returnMessages != null) { this.sendFlow(returnMessages.size());  this.lastReceivedOffset = lastMessage.getMessageAnnotations().getValue().get(AmqpConstants.Offset).toString(); return CompletableFuture.completedFuture((Collection<Message>) returnMessages); }  if (this.pendingReceives.isEmpty()) { this.scheduleOperationTimer(TimeoutTracker.create(this.operationTimeout)); }  CompletableFuture<Collection<Message>> onReceive = new CompletableFuture<Collection<Message>>(); this.pendingReceives.offer(new WorkItem<Collection<Message>>(onReceive, this.operationTimeout));  WorkItem<Collection<Message>> topWorkItem = this.pendingReceives.peek(); if (topWorkItem != null) { this.sendPingFlow(); }  return onReceive; } 	0	0	0	0	1	0
public void setWatchedNfo(final boolean watchedNfo, final Date watchedNfoLastDate) { if (watchedNfoLastDate != null) { final Date dateWithoutMS = DateUtils.setMilliseconds(watchedNfoLastDate,0);  setWatchedNfo(watchedNfo); setWatchedNfoLastDate(dateWithoutMS);  if (getWatchedDate() == null || getWatchedDate().before(dateWithoutMS)) { setWatched(watchedNfo); setWatchedDate(dateWithoutMS); } } } 	0	0	0	0	1	0
private void executeOpenShiftBuild(ServiceHub hub, ImageConfiguration imageConfig) throws MojoExecutionException, IOException { MojoParameters params = createMojoParameters(); ImageName imageName = new ImageName(imageConfig.getName());  // Create tar file with Docker archive File dockerTar = hub.getArchiveService().createDockerBuildArchive(imageConfig, params);  OpenShiftClient client = getOpenShiftClient();  KubernetesListBuilder builder = new KubernetesListBuilder();  // Check for buildconfig / imagestream and create them if necessary String buildName = checkOrCreateBuildConfig(client, builder, imageConfig); checkOrCreateImageStream(client, builder, getImageStreamName(imageName));  applyResourceObjects(client, builder);  // Start the actual build Build build = startBuild(dockerTar, client, buildName);  waitForOpenShiftBuildToComplete(client, build);  generateImageStreamTags(client, imageConfig, getImageStreamName(imageName), build); } 	0	0	0	0	1	0
@Override public void create () { setSpriteBatch(new SpriteBatch());  try{ showScreen(ScreenID.MAIN_MENU); }catch (Exception e){ // This cannot fail...yet }  } 	0	0	0	0	1	0
"public static File getOrCreateNewEstabFile() { File f = getFileOrCreateNew(getNewEstabPath().toString()); if(!installDatasetFile(""Default"" + DATASET_FILE_SUFFIX, getNewEstabPath())) f = null; return f; } "	0	0	0	0	1	0
"public void remove(String key) { if(key == null) { new NonNullableParameterError(""String"", ""key"").print(); return; }  if(!keys.contains(key)) { new UnknownSettingError(key).print(); }  Console.debug(""SETTING_REMOVE ["" + new SystemUtils().getTime() + ""]["" + key + ""]"");  keys.remove(key);  SettingsRemovedEvent event = new SettingsRemovedEvent(); event.setKey(key); event.setValue(settings.get(key));  for(EventHandler handler : events.getHandlers(event.getClass())) { handler.execute(event); } } "	0	0	0	0	1	0
"private int[] loadArrayFromPreferences() { int arr[] = new int[8]; for(int i=0;i<8;i++) { arr[i] = _sharedPref.getInt(""color_"" + i, 0); }  return arr; } "	0	0	0	0	1	0
"@Override public void serialize(User user, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException { jgen.writeStartObject(); addAttribute(jgen, UserSerializationHelperSuite.NAME, user.getName()); addAttribute(jgen, UserSerializationHelperSuite.FIRSTNAME, user.getFirstName()); EMail mailAddress = user.getMailAddress(); if (mailAddress != null) { addAttribute(jgen, UserSerializationHelperSuite.EMAIL, mailAddress.getMailAddress()); } addAttribute(jgen, UserSerializationHelperSuite.PASSWORD, user.getPassword()); UUID uuid = user.getId(); if (uuid != null) { addAttribute(jgen, UserSerializationHelperSuite.UUID, uuid.toString()); } if (user.getBirthdate() != null) { addAttribute(jgen, UserSerializationHelperSuite.BIRTHDAY, DateFormatUtil.DEFAULT_FORMAT.format(user.getBirthdate())); } Address address = user.getAddress(); if (address != null) { addAttribute(jgen, UserSerializationHelperSuite.ADDRESS_STREET, address.getStreet()); //			TODO(fap): add house number addAttribute(jgen, UserSerializationHelperSuite.ADDRESS_CITY, address.getCity()); addAttribute(jgen, UserSerializationHelperSuite.ADDRESS_POSTCODE, address.getPostcode()); addAttribute(jgen, UserSerializationHelperSuite.ADDRESS_STATE, address.getState()); addAttribute(jgen, UserSerializationHelperSuite.ADDRESS_COUNTRY, address.getCountry()); }  addAttribute(jgen, UserSerializationHelperSuite.ADDRESS_COUNTRY, user.getGender().getValue()); jgen.writeEndObject(); } "	0	0	0	0	1	0
"public static ConfigMap getOrCreateEnvironments(KubernetesClient client) { ConfigMap answer = null; try { answer = client.configMaps().withName(ENVIRONMENTS_CONFIG_MAP_NAME).get(); } catch (Exception e) { LOG.info(""Failed to find ConfigMap "" + client.getNamespace() + ""."" + ENVIRONMENTS_CONFIG_MAP_NAME + "". "" + e, e); } if (answer == null || KubernetesHelper.getName(answer) == null) { answer = new ConfigMapBuilder(). withNewMetadata(). withName(ENVIRONMENTS_CONFIG_MAP_NAME). addToLabels(""kind"", ""environments""). addToLabels(""provider"", ""fabric8.io""). endMetadata(). build(); } return answer; } "	0	0	0	0	1	0
"@Override public boolean canAccess( final RepositoryFile repositoryFile, final EnumSet<RepositoryFilePermission> permissions ) {  // First check to see if there is an ACL node, this call is done as ""system"" boolean hasAclNode = hasAclNode( repositoryFile );  // If no ACL node is present, it's a public resource if ( !hasAclNode ) { return true; }  // Obtain a reference to ACL node as ""system"", guaranteed access final RepositoryFile aclNode = getAclNode( repositoryFile );  // Check to see if user has READ access to file, this will throw and exception if not. try { unifiedRepository.getFile( aclNode.getPath() ); } catch ( Exception e ) { logger.warn( ""Error checking access for file"", e ); return false; }  // if read passed, check the other permissions return unifiedRepository.hasAccess( aclNode.getPath(), permissions );  } "	0	0	0	0	1	0
"@Test public void service20PutOnlyHeaders() { final RestResponse<HttpBinHeaders> response = createService(Service20.class) .putOnlyHeaders(""body string""); assertNotNull(response);  assertEquals(200, response.statusCode());  final HttpBinHeaders headers = response.headers(); assertNotNull(headers); assertEquals(true, headers.accessControlAllowCredentials); assertEquals(""keep-alive"", headers.connection); assertNotNull(headers.date); assertEquals(""1.1 vegur"", headers.via); assertNotEquals(0, headers.xProcessedTime); } "	0	0	0	0	1	0
@Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState);  if(getActivity() instanceof AppCompatActivity) { getActionBar().setDisplayShowTitleEnabled(false); getActionBar().setDisplayHomeAsUpEnabled(true); getActionBar().setHomeButtonEnabled(true); } trackedEntityAttributeListView = (ListView) view.findViewById(R.id.localSearchAttributeListView); mAdapter = new DataValueAdapter(getChildFragmentManager(), getActivity().getLayoutInflater()); trackedEntityAttributeListView.setAdapter(mAdapter); } 	0	0	0	0	1	0
@Test public void latestLogFileContainingACheckPointAndAStartAfter() throws Throwable { // given LatestCheckPointFinder finder = new LatestCheckPointFinder( logFiles, fs, reader ); CheckPoint checkPoint = new CheckPoint( new LogPosition( logVersion, 16 ) ); LogEntryStart start = new LogEntryStart( 0, 0, 0, 0, new byte[0], new LogPosition( logVersion, 33 ) ); when( reader.readLogEntry( any( ReadableVersionableLogChannel.class ) ) ).thenReturn( start, checkPoint, null );  // when LatestCheckPoint latestCheckPoint = finder.find( logVersion );  // then assertEquals( new LatestCheckPoint( checkPoint, true, olderLogVersion ), latestCheckPoint ); } 	0	0	0	0	1	0
"private GridPane createOutputGridPane(final TextArea outputTextArea) { GridPane outputGridPane = new GridPane(); GridPane.setVgrow(outputTextArea, Priority.ALWAYS); GridPane.setHgrow(outputTextArea, Priority.ALWAYS); outputGridPane.setMaxWidth(Double.MAX_VALUE); outputGridPane.setMaxHeight(Double.MAX_VALUE); Label outputLabel = new Label(""Output:""); outputLabel.setStyle(FONT_STYLE); outputGridPane.add(outputLabel, 0, 0); outputGridPane.add(outputTextArea, 0, 1); return outputGridPane; } "	0	0	0	0	1	0
public static UsefulInfoNotification createStartupInfo(){ int randomIndex = ((int)(Math.random()*(hints.length-1))); Hint selectedHint = hints[randomIndex]; return new UsefulInfoNotification(selectedHint); } 	0	0	0	0	1	0
private static Image generateRandomMathFace(){ int randomIndex = ((int)(Math.random()*(faceImagePaths.length-1))); return new Image(faceImagePaths[randomIndex]); } 	0	0	0	0	1	0
"@Test public void testNullAddress() throws Exception { Dataset d = DatasetParser.build(FileUtils.classpathStream(""eml-metadata-profile/sample2-v1.0.1.xml"")); d.setKey(UUID.randomUUID()); Contact c = d.getContacts().get(0); c.getAddress().add(null); c.getAddress().add(null); StringWriter writer = new StringWriter(); emlWriter.writeTo(d, writer); } "	0	0	0	0	1	0
"public boolean retrieveDocument(PatientSearchBean patientQuerySearch) { //set the document retrieve request values document id, organization and respository id DocumentRetrieve docRetrieve = new DocumentRetrieve(); docRetrieve.setDocumentId(patientQuerySearch.getSelectedCurrentDocument().getDocumentId()); docRetrieve.setHCID(patientQuerySearch.getOrganization()); docRetrieve.setRepositoryId(patientQuerySearch.getSelectedCurrentDocument().getRepositoryUniqueId());  //Call the NwHIN service to retrieve the document DocumentRetrieveResults response = documentRetrieveService.retrieveDocuments(docRetrieve); //set the retrieved document to the UI patient bean if (response.getDocument() != null) { if ((response.getContentType() != null) && (response.getContentType().equals(CONTENT_TYPE_APPLICATION_XML) || response.getContentType().equals(CONTENT_TYPE_TEXT_HTML) || response.getContentType().equals(CONTENT_TYPE_TEXT_PLAIN) || response.getContentType().equals(CONTENT_TYPE_TEXT_XML))) { InputStream xsl = FacesContext.getCurrentInstance().getExternalContext().getResourceAsStream(""/WEB-INF/CDA.xsl""); InputStream xml = new ByteArrayInputStream(response.getDocument()); byte[] convertXmlToHtml = null; if (xsl != null) { convertXmlToHtml = convertXMLToHTML(xml, xsl); closeStreamSilently(xsl); } patientQuerySearch.getSelectedCurrentDocument().setDocumentContent(convertXmlToHtml); } else { patientQuerySearch.getSelectedCurrentDocument().setDocumentContent(response.getDocument()); } patientQuerySearch.getSelectedCurrentDocument().setDocumentRetrieved(true); LOG.debug(""Successfully retrieved the content of document with documentid:"" + response.getContentType()); return true; } return false; } "	0	0	0	0	1	0
boolean closeEnough() { return new Double(exp).equals(obtained); } 	0	0	0	0	1	0
"private CharSequence generateEnumProperty( final String containingClassName, final Token signalToken, final String propertyName, final Token token, final String indent) { final String enumName = formatClassName(token.name()); final String typeName = cppTypeName(token.encoding().primitiveType()); final int offset = token.offset();  final StringBuilder sb = new StringBuilder();  if (token.isConstantEncoding()) { final String constValue = signalToken.encoding().constValue().toString();  sb.append(String.format( ""\n"" + indent + ""    %1$s::Value %2$s(void) const\n"" + indent + ""    {\n"" + ""%3$s"" + indent + ""        return %1$s::Value::%4$s;\n"" + indent + ""    }\n\n"", enumName, propertyName, generateEnumFieldNotPresentCondition(token.version(), enumName, indent), constValue.substring(constValue.indexOf(""."") + 1))); } else { sb.append(String.format( ""\n"" + indent + ""    %1$s::Value %2$s(void) const\n"" + indent + ""    {\n"" + ""%3$s"" + indent + ""        return %1$s::get(%4$s(*((%5$s *)(m_buffer + m_offset + %6$d))));\n"" + indent + ""    }\n\n"", enumName, propertyName, generateEnumFieldNotPresentCondition(token.version(), enumName, indent), formatByteOrderEncoding(token.encoding().byteOrder(), token.encoding().primitiveType()), typeName, offset));  sb.append(String.format( indent + ""    %1$s &%2$s(const %3$s::Value value)\n"" + indent + ""    {\n"" + indent + ""        *((%4$s *)(m_buffer + m_offset + %5$d)) = %6$s(value);\n"" + indent + ""        return *this;\n"" + indent + ""    }\n"", formatClassName(containingClassName), propertyName, enumName, typeName, offset, formatByteOrderEncoding(token.encoding().byteOrder(), token.encoding().primitiveType())));  sb.append(String.format( indent + ""    static SBE_CONSTEXPR const std::size_t %1$sEncodingLength(void)\n"" + indent + ""    {\n"" + indent + ""        return %2$d;\n"" + indent + ""    }\n"", propertyName, token.encoding().primitiveType().size())); }  return sb; } "	0	0	0	0	1	0
@Transactional(readOnly = true) public List<Lab> findAll(Set<Long> labIds) { return labRepository.findAllByOrderByNumberAsc(labIds); } 	0	0	0	0	1	0
@Override public void onRequestPermissionsResult (int requestCode, @NonNull String permissions[], @NonNull int[] grantResults) { sheet.onRequestPermissionsResult(requestCode, permissions, grantResults); } 	0	0	0	0	1	0
private static void fillDefaultEndValue(SortedMap<Integer, byte[]> setOfEndKeyByteArray, SegmentProperties segmentProperties) { List<CarbonDimension> allDimension = segmentProperties.getDimensions(); for (CarbonDimension dimension : allDimension) { if (CarbonUtil.hasEncoding(dimension.getEncoder(), Encoding.DICTIONARY)) { continue; } setOfEndKeyByteArray.put(dimension.getOrdinal(), new byte[] { 127 }); } } 	0	0	0	0	1	0
"@Override public void edgeAdded(Edge edge) throws IllegalArgumentException { try { Shape s = graph.getEdgeShape(edge); s.setStrokeWidth(4); s.setOnMouseClicked((MouseEvent event) -> { GraphMode mode = State.getState().getMode(); if (mode == GraphMode.EDIT_VALUES) { this.graph.toggleEdgeSelection(edge); } else if (mode == GraphMode.DELETE) { this.graph.removeEdge(edge); } }); this.getChildren().add(graph.getEdgeShape(edge)); } catch (Exception ex) { throw new IllegalArgumentException(""edgeAdded""); } } "	0	0	0	0	1	0
"public String newTopicFile() { String date = new SimpleDateFormat(""yyyyMMdd"").format(new Date()); final String basePath = Setting.TOPIC_ROOT + File.separator + getName() + File.separator; int num = 0, prefixLen = basePath.length(); if (newestFile.substring(prefixLen, prefixLen + 8).equals(date)) num = Integer.valueOf(newestFile.substring(prefixLen + 8, newestFile.length() - 4)) + 1; final String newTopicFile = basePath + date + num + "".tof"";  final long startId = getMaxStoredId() + 1; harbour.create(newTopicFile); harbour.put(newTopicFile, startId, Header.ID_START_OFFSET_BYTE); harbour.put(newTopicFile, 0, Header.COUNT_OFFSET_BYTE);  this.startId = startId; this.newestFile = newTopicFile; logger.info(""New topic file {} with startId {}"", newTopicFile, startId); return newTopicFile; } "	0	0	0	0	1	0
public Sikuli initSikuliImageProcessing() { this.sikuliImageProcessing = new Sikuli(this.settings.testAppName); this.updateTestContext(); return this.sikuliImageProcessing; } 	0	0	0	0	1	0
"@Override protected void onPostCreate(Bundle savedInstanceState) { super.onPostCreate(savedInstanceState); setContentView(R.layout.activity_press); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar);  byte[] serializedMember = getIntent().getByteArrayExtra(SERIALIZED_MEMBER_KEY); if (serializedMember != null) { member = (Member) unserialize(serializedMember); }  byte[] serializedChannel = getIntent().getByteArrayExtra(SERIALIZED_CHANNEL_KEY); channel = (ChannelService.Channel) unserialize(serializedChannel);  byte[] serializedGame = getIntent().getByteArrayExtra(SERIALIZED_GAME_KEY); game = (Game) unserialize(serializedGame);  setTitle(TextUtils.join("", "", channel.Members));  if (member == null) { findViewById(R.id.send_message_button).setVisibility(View.GONE); findViewById(R.id.new_message_body).setVisibility(View.GONE); } else { ((FloatingActionButton) findViewById(R.id.send_message_button)).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { Message message = new Message(); message.Body = ((EditText) findViewById(R.id.new_message_body)).getText().toString(); message.ChannelMembers = channel.Members; message.CreatedAt = new Date(); message.Age = new Ticker(new Date(), (long) 0); message.GameID = channel.GameID; message.Sender = member.Nation; handleReq( messageService.MessageCreate(message, channel.GameID), new Sendable<SingleContainer<Message>>() { @Override public void send(SingleContainer<Message> messageSingleContainer) { ((EditText) findViewById(R.id.new_message_body)).setText(""""); loadMessages(false); } }, getResources().getString(R.string.sending_message)); } }); }  loadMessages(true); } "	0	0	0	0	1	0
"private String formatDifference(double difference) { return String.format(""%1$,.2f"", difference * 100) + ""%""; } "	0	0	0	0	1	0
@Override public void onClick(View view) { dialog.dismiss(); } 	0	0	0	0	1	0
private void registerNewObjectInternal(Object entity, Descriptor descriptor) { assert entity != null; Object id = getIdentifier(entity); if (id == null) { final EntityType<?> eType = getMetamodel().entity(entity.getClass()); EntityPropertiesUtils.verifyIdentifierIsGenerated(entity, eType); } if (isIndividualManaged(id, entity) && !entity.getClass().isEnum()) { throw individualAlreadyManaged(id); } storage.persist(id, entity, descriptor); if (id == null) { // If the ID was null, extract it from the entity // It is present now id = getIdentifier(entity); } // Original is null until commit cloneMapping.put(entity, entity); getNewObjectsCloneToOriginal().put(entity, null); registerEntityWithPersistenceContext(entity, this); registerEntityWithOntologyContext(descriptor, entity); newObjectsKeyToClone.put(id, entity); checkForCollections(entity); this.hasNew = true; } 	0	0	0	0	1	0
private void registerClone(Object clone, Object original, Descriptor descriptor) { cloneMapping.put(clone, clone); cloneToOriginals.put(clone, original); final Object identifier = EntityPropertiesUtils.getPrimaryKey(clone, getMetamodel()); keysToClones.put(identifier, clone); registerEntityWithPersistenceContext(clone, this); registerEntityWithOntologyContext(descriptor, clone); } 	0	0	0	0	1	0
"private static String getAddresses(String url) throws IOException { String addresses = """";  try { getResponseCode(url);  Document doc = Jsoup.connect(url).get(); Elements elements = doc.select(""address"");  int count = 1; for (Element item : elements) { if (item.attr(""class"").equals(""invisible-links"")) { addresses += String.valueOf(count).concat("". "").concat(item.text().concat(""\n"")); count++; } } LOGGER.info(""ADDRESSES: \n"" + addresses);  } catch (IOException e) { LOGGER.error(e.getMessage()); return ""Что-то пошло не так: "".concat(e.getMessage()); } return ""Адреса кафе му-му: \n"".concat(addresses); } "	0	0	0	0	1	0
"private void updateCriterion() { String error = myCriterion.setExpression( txtExpr.getText(), sampleNames); if (error != null) { lblError.setText(error); } else { lblError.setText (""OK""); } } "	0	0	0	0	1	0
private void sendProgress(int processedCount) { int percent = (processedCount * 100) / commands.size(); int errors = (int) toExecute.stream().filter(v -> !v.getResult().asBoolean()).count();  if (errors == 1) { notify.forEach(s -> Message.IMPORT_PROGRESS_SIN.send(s, percent, processedCount, commands.size(), errors)); } else { notify.forEach(s -> Message.IMPORT_PROGRESS.send(s, percent, processedCount, commands.size(), errors)); } } 	0	0	0	0	1	0
"@Override public DatabaseDataType toDatabaseDataType(Database database) { if (getRawDefinition().toLowerCase().contains(""national character varying"")) { setAdditionalInformation(null); //just go to nvarchar } if (database instanceof HsqlDatabase || database instanceof PostgresDatabase || database instanceof DerbyDatabase) {  return new DatabaseDataType(""VARCHAR"", getParameters()); } if (database instanceof OracleDatabase) { return new DatabaseDataType(""NVARCHAR2"", getParameters()); } if (database instanceof MSSQLDatabase) { Object[] parameters = getParameters(); if (parameters.length > 0) { String param1 = parameters[0].toString(); if (!param1.matches(""\\d+"") || new BigInteger(param1).compareTo(BigInteger.valueOf(4000L)) > 0) {  try { if (database.getDatabaseMajorVersion() <= 8) { //2000 or earlier DatabaseDataType type = new DatabaseDataType(database.escapeDataTypeName(""nvarchar""), ""4000""); type.addAdditionalInformation(getAdditionalInformation()); return type; } } catch (DatabaseException ignore) { } //assuming it is a newer version  DatabaseDataType type = new DatabaseDataType(database.escapeDataTypeName(""nvarchar""), ""MAX""); type.addAdditionalInformation(getAdditionalInformation()); return type; } } if (parameters.length == 0) { parameters = new Object[] { 1 }; } else if (parameters.length > 1) { parameters = Arrays.copyOfRange(parameters, 0, 1); } DatabaseDataType type =  new DatabaseDataType(database.escapeDataTypeName(""nvarchar""), parameters); type.addAdditionalInformation(getAdditionalInformation()); return type; } return super.toDatabaseDataType(database); } "	0	0	0	0	1	0
"private PrivateKey getPrivateKey() throws IOException, NoSuchAlgorithmException, InvalidKeySpecException { String privKeyFile = ""openapi-samplecode-privatekey.pem""; final String beginPK = ""-----BEGIN PRIVATE KEY-----""; final String endPK = ""-----END PRIVATE KEY-----"";  // read private key PEM file ClassLoader cl = this.getClass().getClassLoader(); InputStream stream = cl.getResourceAsStream(privKeyFile); java.io.DataInputStream dis = new java.io.DataInputStream(stream); byte[] privKeyBytes = new byte[(int) stream.available()]; dis.readFully(privKeyBytes); dis.close(); String privKeyStr = new String(privKeyBytes, ""UTF-8"");  int startIndex = privKeyStr.indexOf(beginPK); int endIndex = privKeyStr.indexOf(endPK);  privKeyStr = privKeyStr.substring(startIndex + beginPK.length(), endIndex);  KeyFactory keyFactory = KeyFactory.getInstance(""RSA""); // decode private key. Check if it works //        PKCS8EncodedKeySpec privSpec = new PKCS8EncodedKeySpec((new Base64()).decodeBuffer(privKeyStr)); PKCS8EncodedKeySpec privSpec = new PKCS8EncodedKeySpec((Base64.decode(privKeyStr, Base64.DEFAULT))); RSAPrivateKey privKey = (RSAPrivateKey)keyFactory.generatePrivate(privSpec); return privKey; } "	0	0	0	0	1	0
"public static IssuerAndSerialNumber createIssuerAndSerialNumberFor( X509Certificate cert) throws CertificateParsingException { try { return new IssuerAndSerialNumber(PrincipalUtil.getIssuerX509Principal(cert), cert.getSerialNumber()); } catch (Exception e) { throw new CertificateParsingException(""exception extracting issuer and serial number: "" + e); } } "	0	0	0	0	1	0
public static double getLastUpdateDate(SQLiteDatabase db){ return LastUpdateSql.getLastUpdate(db, WINE); } 	0	0	0	0	1	0
public boolean isCompatibleWithThreadSharedConnexion() { return (typeDriver != DbType.MariaDB && typeDriver != DbType.MySQL); } 	0	0	0	0	1	0
"public static void putDefaults(Map<String, Object> defaults) { defaults.put(CYCLE_PREVIEW, ""Preview;/ieee.csl""); defaults.put(CYCLE_PREVIEW_POS, 0);  defaults.put(PREVIEW_PRINT_BUTTON, Boolean.FALSE); defaults.put(PREVIEW_PANEL_HEIGHT, 200); defaults.put(PREVIEW_ENABLED, Boolean.TRUE); defaults.put(PREVIEW_STYLE, ""<font face=\""sans-serif\"">"" + ""<b><i>\\bibtextype</i><a name=\""\\bibtexkey\"">\\begin{bibtexkey} (\\bibtexkey)</a>"" + ""\\end{bibtexkey}</b><br>__NEWLINE__"" + ""\\begin{author} \\format[Authors(LastFirst,Initials,Semicolon,Amp),HTMLChars]{\\author}<BR>\\end{author}__NEWLINE__"" + ""\\begin{editor} \\format[Authors(LastFirst,Initials,Semicolon,Amp),HTMLChars]{\\editor} "" + ""<i>(\\format[IfPlural(Eds.,Ed.)]{\\editor})</i><BR>\\end{editor}__NEWLINE__"" + ""\\begin{title} \\format[HTMLChars]{\\title} \\end{title}<BR>__NEWLINE__"" + ""\\begin{chapter} \\format[HTMLChars]{\\chapter}<BR>\\end{chapter}__NEWLINE__"" + ""\\begin{journal} <em>\\format[HTMLChars]{\\journal}, </em>\\end{journal}__NEWLINE__"" // Include the booktitle field for @inproceedings, @proceedings, etc. + ""\\begin{booktitle} <em>\\format[HTMLChars]{\\booktitle}, </em>\\end{booktitle}__NEWLINE__"" + ""\\begin{school} <em>\\format[HTMLChars]{\\school}, </em>\\end{school}__NEWLINE__"" + ""\\begin{institution} <em>\\format[HTMLChars]{\\institution}, </em>\\end{institution}__NEWLINE__"" + ""\\begin{publisher} <em>\\format[HTMLChars]{\\publisher}, </em>\\end{publisher}__NEWLINE__"" + ""\\begin{year}<b>\\year</b>\\end{year}\\begin{volume}<i>, \\volume</i>\\end{volume}"" + ""\\begin{pages}, \\format[FormatPagesForHTML]{\\pages} \\end{pages}__NEWLINE__"" + ""\\begin{abstract}<BR><BR><b>Abstract: </b> \\format[HTMLChars]{\\abstract} \\end{abstract}__NEWLINE__"" + ""\\begin{review}<BR><BR><b>Review: </b> \\format[HTMLChars]{\\review} \\end{review}"" + ""</dd>__NEWLINE__<p></p></font>""); } "	0	0	0	0	1	0
@SafeVarargs public static <T extends Comparable<T>> T min(final T first, final T second, final T... rest) { return list(first, second).pushAll(list(rest)).reduce((x, y) -> Indolently.min(x, y)).get(); } 	0	0	0	0	1	0
"public void displayTeamInActionBar(Player player) { UHTeam team = getTeamForPlayer(player); if (team == null) return;  ActionBar.sendPermanentMessage(player, I.t(""{gold}Your team: {0}"", team.getDisplayName())); } "	0	0	0	0	1	0
"@Override public void onResume() { super.onResume(); Comment comment = DBDao.getComment(commentId); Book book = DBDao.getBook(comment.getBook_id()); bookCover.setImageURI(Uri.parse(book.getImage())); bookName.setText(book.getName()); commentContent.setText(comment.getContent()); commentTime.setText(new SimpleDateFormat(""yyyy年M月d日 HH:mm"").format(comment.getCreated_time())); } "	0	0	0	0	1	0
"@Test public void testCountReturnsSize() { Map<String, String> map = new HashMap<>(1);  map.put(""key"", ""value"");  assertNotNull(map); assertEquals(map.size(), MapUtils.count(map, new DefaultFilter<>(true))); } "	0	0	0	0	1	0
@Test(expected = IllegalArgumentException.class) public void testCountWithNullMap() { MapUtils.count(null, new DefaultFilter<>(true)); } 	0	0	0	0	1	0
"@SuppressWarnings(""all"") public static Method findMethod(final Class<?> type, final String methodName, final Object... arguments) { for (Method method : type.getDeclaredMethods()) { if (method.getName().equals(methodName)) { Class<?>[] parameterTypes = method.getParameterTypes();  if (ArrayUtils.length(arguments) == parameterTypes.length) { boolean match = true;  for (int index = 0; match && index < parameterTypes.length; index++) { match &= instanceOf(arguments[index], parameterTypes[index]); }  if (match) { return method; } } } }  return (type.getSuperclass() != null ? findMethod(type.getSuperclass(), methodName, arguments) : null); } "	0	0	0	0	1	0
private void nextKeyLength() { for (int i = currentKeyLength + 1; i < keyCounts.length; i++) { long c = keyCounts[i]; if (c > 0) { currentKeyLength = i; keyLimit += c; currentSlotBuffer = new byte[slotSizes[i]]; indexBuffer.position(indexOffsets[i]); currentDataOffset = dataOffsets[i]; break; } } } 	0	0	0	0	1	0
"@Override protected void doPostDbLoading(SubEquipment subEquipment) { Equipment parent = equipmentCache.get(subEquipment.getParentId()); Long processId = parent.getProcessId(); if (processId == null) { throw new NullPointerException(String.format(""Equipment %s (%d) has no associated Process id - this should never happen!"", parent.getName(), parent.getId())); }  // set the dataTag ids to the equipment: List<Long> dataTagIds = dataTagCache.getDataTagIdsByEquipmentId(subEquipment.getId()); Collection<Long> oldIdList = subEquipment.getDataTagIds(); oldIdList.clear(); oldIdList.addAll(dataTagIds);  Long aliveTagId = subEquipment.getAliveTagId(); if (aliveTagId != null) { ControlTag aliveTagCopy = controlCache.getCopy(aliveTagId); if (aliveTagCopy != null) { setSubEquipmentId((ControlTagCacheObject) aliveTagCopy, subEquipment.getId(), processId); } else { throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE, String.format(""No Alive tag (#%d) found for Sub-Equipment %s (#%d)."", aliveTagId, subEquipment.getName(), subEquipment.getId())); } } // alive tag is not mandatory for a Sub-Equipment  Long commFaultTagId = subEquipment.getCommFaultTagId(); if (commFaultTagId != null) {  ControlTag commFaultTagCopy = controlCache.getCopy(commFaultTagId); if (commFaultTagCopy != null) { setSubEquipmentId((ControlTagCacheObject) commFaultTagCopy, subEquipment.getId(), processId); } else { throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE, String.format(""No CommFault tag (%s) found for sub-equipment #%d (%s)."", commFaultTagId, subEquipment.getId(), subEquipment.getName())); }  } else { throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE, String.format(""No CommFault tag for Sub-Equipment %s (#%d) defined."", subEquipment.getName(), subEquipment.getId())); }  Long statusTagId = subEquipment.getStateTagId(); if (statusTagId != null) {  ControlTag statusTagCopy = controlCache.getCopy(statusTagId); if (statusTagCopy != null) { setSubEquipmentId((ControlTagCacheObject) statusTagCopy, subEquipment.getId(), processId); } else { throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE, String.format(""No Status tag (%s) found for Sub-Equipment %s (#%d)."", statusTagId, subEquipment.getName(), subEquipment.getId())); }  } else { throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE, String.format(""No Status tag for Sub-Equipment %s (#%d) defined."", subEquipment.getName(), subEquipment.getId())); } } "	0	0	0	0	1	0
"public synchronized void add(String m) { System.out.println(""adding "" + m); for (char c : m.toCharArray()) { if (c != '-') this.marble.add(c); } parseLatch.countDown(); } "	0	0	0	0	1	0
"private TestTask[] doEdit(String args, TestTask[] list) { // To get different commands from the command input String[] split = args.split(""\\s+""); int index = Integer.parseInt(split[1]); TestTask target = list[index-1];  ParsedCommand command = new CommandParser(args); String name, time, date, length, recurrance, priority, information; name = command.getParamOrDefault(""n"", """"); time = command.getParamOrDefault(""h"", ""-1""); date = command.getParamOrDefault(""d"", ""-1""); length = command.getParamOrDefault(""l"", ""-1""); recurrance = command.getParamOrDefault(""r"", Recurrance.NO_INTERVAL); priority = command.getParamOrDefault(""p"", """"); information = command.getParamOrDefault(""i"", """");  TestTask[] expected = TestUtil.removePersonFromList(list, index);  try { expected = testEdit(target, name, time, date, length, recurrance, priority, information, expected); } catch (IllegalValueException e) { assert(false); } return expected; } "	0	0	0	0	1	0
"private void setQueryFilterForDoublePropertyValues(SolrQuery query, String propertyName, String leftPropertyValue, String rightPropertyValue, double rightDoubleValue, String leftOp, String rightOp) { // Get the double values double leftDoubleValue = 0; if (StringUtils.isNotEmpty(leftPropertyValue)) { leftDoubleValue = Double.parseDouble(leftPropertyValue); } String fieldKey = propertyName + SolrConstants.SOLR_DOUBLE_FIELD_KEY_SUFFIX + "":""; if (leftOp.equals(SolrConstants.OPERATION_GREATER_THAN) || leftOp .equals(SolrConstants.OPERATION_GREATER_THAN_OR_EQUAL) || leftOp.equals(SolrConstants.OPERATION_NA)) { // If operation is greater than add .1 if (leftOp.equals(SolrConstants.OPERATION_GREATER_THAN)) { leftDoubleValue = leftDoubleValue + 0.1; }  if ((rightOp.equals(SolrConstants.OPERATION_NA) || StringUtils.isEmpty(rightPropertyValue)) && StringUtils .isNotEmpty(leftPropertyValue)) { query.addFilterQuery(fieldKey + ""["" + leftDoubleValue + "" TO * ]""); } else if (StringUtils.isNotEmpty(rightPropertyValue) && StringUtils .isNotEmpty(leftPropertyValue)) { query.addFilterQuery( fieldKey + ""["" + leftDoubleValue + "" TO "" + rightDoubleValue + ""]""); } else if ((leftOp.equals(SolrConstants.OPERATION_NA) || StringUtils.isEmpty(leftPropertyValue)) && StringUtils .isNotEmpty(rightPropertyValue)) { query.addFilterQuery(fieldKey + ""[ * TO "" + rightDoubleValue + ""]""); } } } "	0	0	0	0	1	0
public void refreshWidget (FormEntryPrompt fep, int changeFlags) { prompt.setText(fep.getLongText()); } 	0	0	0	0	1	0
"public static Pair<Long, Long> autoGetStartEndDatePoint(DataSource ds, String tableName, String primaryKeyName) { String sql = ""SELECT "" + ""MIN("" + primaryKeyName + "") , MAX("" + primaryKeyName + "") FROM "" + tableName; return excuteQuery(ds, sql, new ResultSetICallable<Pair<Long, Long>>() { @Override public Pair<Long, Long> handleResultSet(ResultSet r) throws Exception { Validate.isTrue(r.next()); return Pair.of(r.getDate(1).getTime() - 1, r.getDate(2).getTime()); } }); } "	0	0	0	0	1	0
"public void updateRouteSegementColor(List<RouteSegment> routeSegments){  String routeColorString = ""#FA0D39""; int walkedColor = Color.parseColor(routeColorString);  boolean walked = true;  for( RouteSegment routeSegment : routeSegments ) {  if( routeSegment.isNearestRouteSegment() ) walked = false;  if( walked ) routeSegment.setColor( walkedColor ); else break;   }  } "	0	0	0	0	1	0
@Override public void init() { super.init(); ModItemColors.init(); ModBlockColors.init(); RegisterBeltRender(); MinecraftForge.EVENT_BUS.register(new ClientEventHandler()); MinecraftForge.EVENT_BUS.register(new ModFluids()); MinecraftForge.EVENT_BUS.register(new ItemModels()); this.registerRenderers(); ClientRegistry.registerKeyBinding(ItemFortuneCoin.TOGGLE_KEYBIND); } 	0	0	0	0	1	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); //connect to this user's saved teams on Firebase mPreferences = getActivity().getSharedPreferences(""Pokemon Battle Prefs"", Context.MODE_PRIVATE); username = mPreferences.getString(NameFragment.profile_name_key, ""User""); root = FirebaseDatabase.getInstance().getReference().child(headRootName).child(username).child(teamsRootName); //listener for populating saved teams page mChildListener = new ChildEventListener() { @Override public void onChildAdded(DataSnapshot dataSnapshot, String s) { appendTeamsList(dataSnapshot); }  @Override public void onChildChanged(DataSnapshot dataSnapshot, String s) { appendTeamsList(dataSnapshot); } @Override public void onChildRemoved(DataSnapshot dataSnapshot) { } @Override public void onChildMoved(DataSnapshot dataSnapshot, String s) { } @Override public void onCancelled(DatabaseError databaseError) { } }; root.addChildEventListener(mChildListener); root.removeEventListener(mChildListener); onStartUp = false; } "	0	0	0	0	1	0
private byte[] encrypt8ByteBlock(byte[] sourceBlock) { return this.performDESAlgorithm(sourceBlock, false); } 	0	0	0	0	1	0
"public void addPass(String monthlyPass, String rides, String key, String username){ SQLiteDatabase db = this.getWritableDatabase();  ContentValues values = new ContentValues(); values.put(BUSPASS, monthlyPass); values.put(RIDES, rides); values.put(RIDES_TAKEN, getRidesTaken(username)); values.put(SECURE_KEY, key); values.put(KEY_UNAME, username);  if(getPassCount()==0) { long id = db.insert(TABLE_BUSPASS, null, values); Log.d(TAG, ""New Pass inserted into sqlite: "" + id); } else { long id = db.update(TABLE_BUSPASS, values, KEY_UNAME + "" = '"" + username + ""'"", null); Log.d(TAG, ""Update old pass: "" + id); } db.close(); } "	0	0	0	0	1	0
"HttpServletResponse record(HttpServletRequest request, HttpServletResponse response, Throwable ex) { Long startTime = (Long) request.getAttribute(TIMING_REQUEST_ATTRIBUTE); Object handler = request.getAttribute(HANDLER_REQUEST_ATTRIBUTE);  long endTime = System.nanoTime(); Throwable thrown = ex != null ? ex : (Throwable) request.getAttribute(EXCEPTION_ATTRIBUTE);  // complete any LongTaskTimer tasks running for this method longTaskTimed(handler).forEach(t -> { if(!t.value().isEmpty()) { registry.longTaskTimer(t.value(), tagConfigurer.httpLongRequestTags(request, handler)).stop(longTaskTimerIds.remove(t)); } });  // record Timer values timed(handler).forEach(t -> { String name = metricName; if (!t.value().isEmpty()) { name = t.value(); }  Timer.Builder timerBuilder = registry.timerBuilder(name) .tags(tagConfigurer.httpRequestTags(request, response, thrown));  String[] extraTags = t.extraTags(); if (extraTags.length > 0) { if (extraTags.length % 2 != 0) { if (logger.isErrorEnabled()) { Method method = ((HandlerMethod) handler).getMethod(); String target = method.getDeclaringClass().getName() + ""."" + method.getName(); logger.error(""@Timed extraTags array on method "" + target + "" size must be even, it is a set of key=value pairs""); } } else { timerBuilder = timerBuilder.tags(IntStream.range(0, extraTags.length / 2) .mapToObj(i -> Tag.of(extraTags[i], extraTags[i + 1])) .collect(Collectors.toList())); } }  if(t.quantiles().length > 0) { timerBuilder = timerBuilder.quantiles(WindowSketchQuantiles.quantiles(t.quantiles()).create()); }  timerBuilder.create().record(endTime - startTime, TimeUnit.NANOSECONDS); });  return response; } "	0	0	0	0	1	0
public void init(String comment) { if (comment != null) { view.selectComment(comment); } } 	0	0	0	0	1	0
@Override public void visitMethod(PsiMethod method) { super.visitMethod(method); final K currentKey = options.methodKeyExtractor.apply(method); if (keys.contains(currentKey)) { final V value = options.resultExtractor.apply(method); results.put(currentKey, value); } } 	0	0	0	0	1	0
void getGroupMembers(Group group) { if (GroupDetailsView.MODE.EDIT == mode) { this.originalGroup = group.getName(); view.mask(appearance.loadingMask()); serviceFacade.getMembers(group, new AsyncCallback<List<Subject>>() { @Override public void onFailure(Throwable caught) { ErrorHandler.post(caught); view.unmask(); }  @Override public void onSuccess(List<Subject> result) { view.addMembers(result); view.unmask(); } }); } else { group = factory.getGroup().as(); } view.edit(group, mode); } 	0	0	0	0	1	0
@Override public boolean onPreferenceStartScreen(PreferenceFragmentCompat preferenceFragmentCompat, PreferenceScreen preferenceScreen) { FragmentTransaction ft = getSupportFragmentManager().beginTransaction();  SettingsFragment fragment = new SettingsFragment(); Bundle args = new Bundle(); args.putString(PreferenceFragmentCompat.ARG_PREFERENCE_ROOT, preferenceScreen.getKey()); fragment.setArguments(args);  ft.add(R.id.settings_frame, fragment, preferenceScreen.getKey()); ft.addToBackStack(preferenceScreen.getKey()); ft.commit(); return true; } 	0	0	0	0	1	0
"@Override public void onMessage(String string) { try { connectionManager.onMessage(ProtocolSerializer.fromJSON(string)); } catch (AblyException e) { String msg = ""Unexpected exception processing received binary message""; Log.e(TAG, msg, e); } flagActivity(); } "	0	0	0	0	1	0
"public void loadLanguages() { loadLanguage(""org.metaborg.meta.lang.sdf""); } "	0	0	0	0	1	0
@Override public boolean performFinish() { AnalyticsPingManager.getInstance().sendPing( AnalyticsEvents.APP_ENGINE_NEW_PROJECT_WIZARD_COMPLETE, AnalyticsEvents.APP_ENGINE_NEW_PROJECT_WIZARD_TYPE, AnalyticsEvents.APP_ENGINE_NEW_PROJECT_WIZARD_TYPE_NATIVE);  if (config.getCloudSdkLocation() == null) { File location = CloudSdkPrompter.getCloudSdkLocation(getShell()); if (location == null) { return false; } config.setCloudSdkLocation(location); }  config.setPackageName(page.getPackageName()); config.setProject(page.getProjectHandle()); if (!page.useDefaults()) { config.setEclipseProjectLocationUri(page.getLocationURI()); }  config.setAppEngineLibraries(page.getSelectedLibraries());  // todo set up final IAdaptable uiInfoAdapter = WorkspaceUndoUtil.getUIInfoAdapter(getShell()); IRunnableWithProgress runnable = new CreateAppEngineStandardWtpProject(config, uiInfoAdapter);  IStatus status = Status.OK_STATUS; try { boolean fork = true; boolean cancelable = true; getContainer().run(fork, cancelable, runnable); } catch (InterruptedException ex) { status = Status.CANCEL_STATUS; } catch (InvocationTargetException ex) { status = setErrorStatus(ex.getCause()); }  return status.isOK(); } 	0	0	0	0	1	0
"public static void unafkCheck(Player pl) { UltimateUser user = UltimateCore.get().getUserService().getUser(pl); CommentedConfigurationNode config = Modules.AFK.get().getConfig().get().get(); long afk = config.getNode(""time"", ""afktime"").getLong() * 1000; long value = AfkDetectionListener.afktime.get(pl.getUniqueId()); long diff = System.currentTimeMillis() - value; if (user.get(AfkKeys.IS_AFK).get() && diff < afk) { user.offer(AfkKeys.IS_AFK, false); Sponge.getServer().getBroadcastChannel().send(Messages.getFormatted(""afk.broadcast.nolonger"", ""%player%"", user.getUser(), ""%time%"", TimeUtil.formatDateDiff(user.get(AfkKeys.AFK_TIME).get(), 2, null))); } } "	0	0	0	0	1	0
@Override public PoiCell<WORKBOOK, SHEET, ROW, CELL, CELLSTYLE, COLOR> setFormula(String arg) { if (arg == null) { clear(); } else { poiCell.setCellFormula(arg); poiCell.setCellType(org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA); attributedString.clear(); getWorkbook().evaluator.clearAllCachedResultValues(); } return this; } 	0	0	0	0	1	0
@Override public int getCount() { return images.length; } 	0	0	0	0	1	0
@Override public <T> boolean hasParameter(ParameterType<T> parameterType) { JSONObject properties = mJsonObject.getJSONObject(KEY_PROPERTIES); return properties != null && properties.has(parameterType.name()); } 	0	0	0	0	1	0
"public <T> T checkError(final Call<T> execute) throws IOException { Response<T> response = execute.execute(); if (!response.isSuccessful()) { ErrorResponse error = readError(response); if (null != error) { System.err.printf(""Error: %s%n"", error); } if (response.code() == 401 || response.code() == 403) { //authorization throw new AuthorizationFailed( String.format(""Authorization failed: %d %s"", response.code(), response.message()), response.code(), response.message() ); } if (response.code() == 409) { //authorization throw new RequestFailed(String.format( ""Could not create resource: %d %s"", response.code(), response.message() ), response.code(), response.message()); } if (response.code() == 404) { //authorization throw new RequestFailed(String.format( ""Could not find resource:  %d %s"", response.code(), response.message() ), response.code(), response.message()); } throw new RequestFailed( String.format(""Request failed:  %d %s"", response.code(), response.message()), response.code(), response.message() ); } return response.body(); } "	0	0	0	0	1	0
public ITexture[] getSides(byte aColor) { return new ITexture[]{gregtech.api.enums.Textures.BlockIcons.OVERLAYS_ENERGY_OUT_MULTI[this.mTier]}; } 	0	0	0	0	1	0
"private void validateExecutable(String name, TextAccessor field) throws ConfigurationException { if (new File(field.getText()).canExecute()) return; throw new ConfigurationException(""Not a valid '"" + name + ""' executable: '"" + field.getText() + ""'""); } "	0	0	0	0	1	0
private Set<Problem> _getProblems() { if (_problemSet ==  null) _problemSet = new TreeSet<Problem>(); return _problemSet; } 	0	0	0	0	1	0
@Override public boolean canExtractItem( final int slotIndex, final ItemStack extractedItem, final EnumFacing side ) { if( this.isSmash() ) { return false; }  return slotIndex == 0 || slotIndex == 1 || slotIndex == 3; } 	0	0	0	0	1	0
"@Override protected void onStart() { super.onStart(); int operation = getIntent().getIntExtra(""contactManagerType"", MANAGER_CONTACT_ADD_REQUEST);  if (operation == MANAGER_CONTACT_ADD_REQUEST) { setTitle(getResources().getString(R.string.abc_manager_activity_title_add)); spContactType.setSelection(contact.getContactType()); } else if (operation == MANAGER_CONTACT_EDIT_REQUEST) { setTitle(getResources().getString(R.string.abc_cardview_info_action_edit)); contact = (PersonalContact) getIntent().getParcelableExtra(""contactData""); edPersonalName.setText(contact.getName()); edPersonalPhone.setText(contact.getPhone()); spContactType.setSelection(contact.getContactType()); }  spContactType.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {  contact.setContactType(position); edPersonalPhone.setHint(phonetype[position]); }  @Override public void onNothingSelected(AdapterView<?> parent) {  } });  } "	0	0	0	0	1	0
"private void uploadProject(String uploadName, String projectDescription) { ProjectManager projectManager = ProjectManager.getInstance(); String projectPath = Constants.DEFAULT_ROOT + ""/"" + projectManager.getCurrentProject().getName();  SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity()); String token = sharedPreferences.getString(Constants.TOKEN, Constants.NO_TOKEN); String username = sharedPreferences.getString(Constants.USERNAME, Constants.NO_USERNAME); Intent uploadIntent = new Intent(getActivity(), ProjectUploadService.class);  // TODO check this extras - e.g. project description isn't used by web uploadIntent.putExtra(""receiver"", new UploadReceiver(new Handler())); uploadIntent.putExtra(""uploadName"", uploadName); uploadIntent.putExtra(""projectDescription"", projectDescription); uploadIntent.putExtra(""projectPath"", projectPath); uploadIntent.putExtra(""username"", username); uploadIntent.putExtra(""token"", token); uploadIntent.putExtra(""provider"", openAuthProvider);  int notificationId = StatusBarNotificationManager.getInstance().createUploadNotification(getActivity(), uploadName); uploadIntent.putExtra(""notificationId"", notificationId); getActivity().startService(uploadIntent); int numberOfUploadedProjects = sharedPreferences.getInt(NUMBER_OF_UPLOADED_PROJECTS, 0); numberOfUploadedProjects = numberOfUploadedProjects + 1;  if (numberOfUploadedProjects == 2) { RatingDialog dialog = new RatingDialog(); dialog.show(getFragmentManager(), RatingDialog.TAG); } sharedPreferences.edit().putInt(NUMBER_OF_UPLOADED_PROJECTS, numberOfUploadedProjects).commit(); } "	0	0	0	0	1	0
"@Override public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) { for (int widgetId : appWidgetIds) { RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.widget_myhome); SharedPreferences prefs = context.getSharedPreferences(OurContract.SHARED_PREF, Context.MODE_PRIVATE); String authToken = prefs.getString(OurContract.PREF_USER_AUTH_TOKEN_NAME, """"); String authId = prefs.getString(OurContract.PREF_DEVICE_AUTH_ID_NAME, """"); Log.e(""Giang"", authToken + authId); if (!(authToken.equals("""") || authId.equals(""""))) { fetchData(context, remoteViews, appWidgetManager, widgetId);  // Click on the widget will open the activity Intent myhomeIntent = new Intent(context, MyHomeActivity.class); myhomeIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP); PendingIntent myhomePI = PendingIntent.getActivity(context, 0, myhomeIntent, 0); remoteViews.setOnClickPendingIntent(R.id.lnlWGMainLayout, myhomePI);  Intent intent = new Intent(context, MyHomeWidgetProvider.class); intent.setAction(AppWidgetManager.ACTION_APPWIDGET_UPDATE); intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, appWidgetIds); PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT); remoteViews.setOnClickPendingIntent(R.id.imgRefresh, pendingIntent); } else { setDefaultData(context, remoteViews); } appWidgetManager.updateAppWidget(widgetId, remoteViews); } } "	0	0	0	0	1	0
public String getPath() { final StringBuilder path = new StringBuilder(); TreeNode node = this; while (node.mParent != null) { path.append(mId); node = node.mParent; if (node.mParent != null) { path.append(NODES_ID_SEPARATOR); } } return path.toString(); } 	0	0	0	0	1	0
"private void onPod(Watcher.Action action, Pod pod, KubernetesClient kubernetes, String namespace, String ctrlCMessage, boolean followLog) { String name = getName(pod); if (!action.equals(Watcher.Action.MODIFIED) || watchingPodName == null || !watchingPodName.equals(name)) { log.info("""" + action + "" pod "" + name + "" status: "" + KubernetesHelper.getPodStatusText(pod) + "" "" + getPodCondition(pod)); } if (action.equals(Watcher.Action.DELETED)) { addedPods.remove(name); if (Objects.equals(watchingPodName, name)) { watchingPodName = null; addedPods.remove(name); } } else { if (action.equals(Watcher.Action.ADDED) || action.equals(Watcher.Action.MODIFIED)) { addedPods.put(name, pod); } }  if (!addedPods.isEmpty()) { Pod watchPod = getNewestPod(addedPods.values()); if (isPodRunning(watchPod)) { watchLogOfPodName(kubernetes, namespace, ctrlCMessage, followLog, getName(watchPod)); } } } "	0	0	0	0	1	0
"public void setThirst(Player player, int thirst) { int oldThirst = getPlayerThirst(player);  if (player.isDead()) thirst = 100;  if (thirst < 0) thirst = 0; if (thirst > 100) thirst = 100;  playerThirstData.get(player.getUniqueId().toString()).setThirstAmount(thirst);  if (Thirst.getInstance().getYAMLConfig().effectsEnabled) { for (String potion : Thirst.getInstance().getYAMLConfig().potions) { String[] parts = potion.split(""\\."");  if (parts.length != 4) { Thirst.getInstance().printPluginError(""Error occurred while reading the config"", ""String '""+potion+""' is in an invalid format!""); return; }  int percent = Integer.valueOf(parts[0]);  if (percent >= thirst) { if (parts[1].equalsIgnoreCase(""DAMAGE"")) { return; }  PotionEffectType type = PotionEffectType.getByName(parts[1].toUpperCase());  if (type == null) { Thirst.getInstance().printPluginError(""Error occurred while reading the config"", ""String '""+potion+""' is in an invalid format!""); return; }  PotionEffect effect = new PotionEffect(type, Integer.valueOf(parts[2])*20, Integer.valueOf(parts[3])-1);  player.addPotionEffect(effect); } else if (percent > thirst) { PotionEffectType type = PotionEffectType.getByName(parts[1].toUpperCase()); player.removePotionEffect(type); } } }  if (thirst <= Thirst.getInstance().getYAMLConfig().criticalThirstPercent && oldThirst != -1 && oldThirst > thirst) player.sendMessage(ChatColor.translateAlternateColorCodes('&', Thirst.getInstance().getYAMLConfig().thirstLowMessage.replace(""%player%"", player.getName()).replace(""%percent%"", getThirstPercent(player, true))));  displayThirst(player); } "	0	0	0	0	1	0
@Override public int getType(int typeIndex) { return types[typeIndex]; } 	0	0	0	0	1	0
@Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { SongSelectItem item = mAdapters.getLast().getItem(position);  if (item.getLevel() == mMaxLevels-1) { Message msg = Message.obtain(); LinkedList<String> urls = new LinkedList<>(); urls.add(item.getUrl()); msg.obj = ClementineMessageFactory.buildInsertUrl( App.Clementine.getPlaylistManager().getActivePlaylistId(), urls); App.ClementineConnection.mHandler.sendMessage(msg);  Toast.makeText(getActivity(), String.format(getString(R.string.songs_added), 1), Toast.LENGTH_SHORT).show(); } else { GlobalSearchQuery globalSearchQuery = new GlobalSearchQuery(getActivity()); globalSearchQuery.openDatabase(); globalSearchQuery.setLevel(mAdapters.size()); globalSearchQuery.setSelection(item.getSelection()); mAdapters.add(new DynamicSongQueryAdapter(getActivity(), globalSearchQuery)); showList(); } } 	0	0	0	0	1	0
@Test public void can_get_save_directory() { assertThat(underTest.getMixinSaveDirectoryForDelegate(org.mockito.Matchers.class)).isEqualTo(SAVE_DIRECTORY); } 	0	0	0	0	1	0
"@Test public void can_extract_simple_name_without_messing_up_varargs() { assertThat(ClassNameUtils.extractSimpleName(""T..."")).isEqualTo(""T...""); } "	0	0	0	0	1	0
"private void loadChokuOnKunreiTable() { // Choku-on String[] chokuKana = {""し"", ""じ"", ""ち"", ""つ"", ""ぢ"", ""づ"", ""ふ"", ""ゐ"", ""ゑ"", ""を""}; String[] chokuRoma = {""si"", ""zi"", ""ti"", ""tu"", ""di"", ""du"", ""hu"", ""wi"", ""we"", ""wo""}; mChokuKunreiMap = new HashMap<>(); for (int i = 0; i < chokuKana.length; i++) { mChokuKunreiMap.put(chokuKana[i], chokuRoma[i]); } } "	0	0	0	0	1	0
"@Test @Ignore(""we need to find the cause and fix it!!!"") public void testUsageIssues() { NameUsage u = service.get(100000040, null); assertNotNull(u); assertEquals(1, u.getIssues().size());  EnumSet expected = EnumSet.of(NameUsageIssue.RANK_INVALID); assertEquals(expected, u.getIssues());  // weird enough issues stop loading after 4 times, try that for (int x = 0; x < 6; x++) { u = service.get(100000040, null); assertEquals(expected, u.getIssues()); } } "	0	0	0	0	1	0
"@Override public Message requestFreeFrame(Frame frame) { MainActivity.debug(""ELM327Http: request Free frame"");  if (someThingWrong) {return new Message(frame, ""-E-Re-initialisation needed"", true); }  String msg = getMessage (""Free?f="" + frame.getHexId()); MainActivity.debug(""ELM327Http: request Free frame result "" + msg);  return new Message (frame, msg, msg.substring(0,1).compareTo(""-"") == 0); } "	0	0	0	0	1	0
"@Override public void onDirectionShown(LatLng origin, LatLng destination, PolylineOptions lineOptions) { if(lineOptions!=null) { DirectionLine = mMap.addPolyline(lineOptions); loading.setVisibility(View.INVISIBLE); directionInformer.ShowTaskInformer(); mMap.setInfoWindowAdapter(new GoogleMap.InfoWindowAdapter() { @Override public View getInfoWindow(Marker marker) { return null; }  @Override public View getInfoContents(Marker marker) { return null; } }); double distance = SphericalUtil.computeDistanceBetween(origin, destination); LatLng Center = new LatLng((origin.latitude + destination.latitude) / 2, (origin.longitude + destination.longitude) / 2); mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(Center, getZoomLevel((float) distance))); } else { loading.setVisibility(View.INVISIBLE); Toast.makeText(MapsActivity.this, ""Direction error."", Toast.LENGTH_LONG).show(); }  } "	0	0	0	0	1	0
public void setLinkColor(String color) throws HelloSignException { setColor(WHITE_LABLELING_OPTIONS_LINK_COLOR, color); } 	0	0	0	0	1	0
"private void initStage() { stage.setScene(scene); stage.setTitle(settings.getTitle() + "" "" + settings.getVersion()); stage.setResizable(false); stage.setOnCloseRequest(e -> { e.consume();  showConfirmationBox(""Exit the game?"", yes -> { if (yes) eventBus.fireEvent(new DisplayEvent(DisplayEvent.CLOSE_REQUEST)); }); }); stage.getIcons().add(FXGLAssets.UI_ICON);  if (settings.isFullScreen()) { stage.setFullScreenExitHint(""""); // don't let the user to exit FS mode manually stage.setFullScreenExitKeyCombination(KeyCombination.NO_MATCH); stage.setFullScreen(true); }  stage.sizeToScene(); } "	0	0	0	0	1	0
public static int createCamera2DProgram() { return GLESTools.createProgram(VERTEXSHADER, FRAGMENTSHADER_CAMERA2D); } 	0	0	0	0	1	0
@Before public void initialize() { Game.initialize(mock(GameviewController.class), GameMode.SINGLEPLAYER); player = Game.getInstance().getPlayer(); bullet2 = new Bullet(new Coordinate(0, 0), Direction.NORTH, player); } 	0	0	0	0	1	0
"@Test public void getImportFromResponseCode_Test() { final Ds3ResponseCode responseCode = createPopulatedResponseCode(""""); final String result = getImportFromResponseCode(responseCode); assertThat(result, is(""com.spectralogic.Test.Type"")); } "	0	0	0	0	1	0
"public static void main( String[] args ) {  Problem curProb = new PE0017(); String result = curProb.getResult();  IO.info( ""result for problem #"" + curProb ); IO.info( "" is '"" + result + ""'"" ); IO.infoln( "" found in "" + curProb.getRuntime( 2 ) + "" ms"" );  } "	0	0	0	0	1	0
private void initTopBar() { ViewGroup topBarLayout = (ViewGroup) view.findViewById(R.id.new_memory_fragment_top_bar); RelativeLayout backButtonLayout = (RelativeLayout) topBarLayout.findViewById(R.id.topbar_new_memory_back_container); RelativeLayout doneButtonLayout = (RelativeLayout) topBarLayout.findViewById(R.id.topbar_new_memory_done_container);  backButtonLayout.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { getActivity().finish(); hideKeyboard(); //                listener.onTopBarBackClick(); } });  doneButtonLayout.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { listener.onSaveClicked(); hideKeyboard(); } }); } 	0	0	0	0	1	0
"private void assertStatsHeader(Document doc) { assertThat(""stats-header"", fromId(""stats-header-scenarios"", doc).text(), is(""Scenarios"")); assertThat(""stats-header-feature"", fromId(""stats-header-feature"", doc).text(), is(""Feature"")); assertThat(""stats-header-scenarios-total"", fromId(""stats-header-scenarios-total"", doc).text(), is(""Total"")); assertThat(""stats-header-scenarios-passed"", fromId(""stats-header-scenarios-passed"", doc).text(), is(""Passed"")); assertThat(""stats-header-scenarios-failed"", fromId(""stats-header-scenarios-failed"", doc).text(), is(""Failed"")); assertThat(""stats-header-steps-total"", fromId(""stats-header-steps-total"", doc).text(), is(""Total"")); assertThat(""stats-header-steps-passed"", fromId(""stats-header-steps-passed"", doc).text(), is(""Passed"")); assertThat(""stats-header-steps-failed"", fromId(""stats-header-steps-failed"", doc).text(), is(""Failed"")); assertThat(""stats-header-steps-skipped"", fromId(""stats-header-steps-skipped"", doc).text(), is(""Skipped"")); assertThat(""stats-header-steps-pending"", fromId(""stats-header-steps-pending"", doc).text(), is(""Pending"")); assertThat(""stats-header-duration"", fromId(""stats-header-duration"", doc).text(), is(""Duration"")); assertThat(""stats-header-status"", fromId(""stats-header-status"", doc).text(), is(""Status"")); } "	0	0	0	0	1	0
"@Test public void displayTheBooksFromArrayList() { String[][] bookDetails = new String[][] {{""Java"", ""Oreilly"", ""1992""}, {""C++"", ""Kanetkar"", ""1998""}, {""Data Structures"", ""Kent"", ""2005""}}; BookList list = new BookList(bookDetails); View view = new View();  view.display(list);  assertEquals(""Java\nC++\nData Structures\n"", outContent.toString()); } "	0	0	0	0	1	0
@Override public void keyReleased(KeyEvent e) { keys[e.getKeyCode()] = false; releasedKeys[e.getKeyCode()] = true; } 	0	0	0	0	1	0
"public String getValue(String key){ if (values==null) loadValues();  if (values.containsKey(key)) return values.get(key);  return (new Theme(getThemeJSON(""reddit_classic""))).getValue(key); } "	0	0	0	0	1	0
"public EmbedBuilder appendField(String title, String content, boolean inline) { if (((title == null || title.isEmpty()) || (content == null || content.isEmpty()))) { if (lenient) return this; throw new IllegalArgumentException(""Title or content cannot be null/empty.""); }  if (fields.size() >= FIELD_COUNT_LIMIT) { if (lenient) fields = fields.subList(0, FIELD_COUNT_LIMIT); else throw new IllegalArgumentException(""Embed cannot have more than "" + FIELD_COUNT_LIMIT + "" fields""); }  if (title.length() > TITLE_LENGTH_LIMIT) { if (lenient) title = title.substring(0, TITLE_LENGTH_LIMIT); else throw new IllegalArgumentException( ""Embed field title cannot have more than "" + TITLE_LENGTH_LIMIT + "" characters""); }  if (content.length() > FIELD_CONTENT_LIMIT) { if (lenient) content = content.substring(0, FIELD_CONTENT_LIMIT); else throw new IllegalArgumentException( ""Embed field content cannot have more than "" + FIELD_CONTENT_LIMIT + "" characters""); }  throwExceptionForCharacterLimit(title.length() + content.length());  fields.add(new EmbedObject.EmbedFieldObject(title, content, inline)); return this; } "	0	0	0	0	1	0
"@Transaction @Authenticate public static Classifier createOption(String option) { try { JSONObject object = new JSONObject(option); String label = object.getString(""label"");  if(object.has(""validate"") && object.getBoolean(""validate"")) { Classifier.validateCategoryName(label, null); }  if (object.has(""parentId"")) { String parentId = object.getString(""parentId"");  Classifier parent = Classifier.get(parentId);  Classifier classifier = new Classifier(); classifier.setClassifierPackage(parent.getClassifierPackage()); classifier.setClassifierId(IDGenerator.nextID()); classifier.getDisplayLabel().setValue(label);  Classifier.create(classifier, parentId);  return classifier; } else { Classifier parent = Classifier.getRoot();  Classifier classifier = new Classifier(); classifier.setClassifierPackage(IDGenerator.nextID()); classifier.setClassifierId(IDGenerator.nextID()); classifier.getDisplayLabel().setValue(label); classifier.setCategory(true);  Classifier.create(classifier, parent.getId());  return classifier; } } catch (JSONException e) { throw new ProgrammingErrorException(e); } } "	0	0	0	0	1	0
"private Cursor readItemsAsCursor(boolean readAll, List<SelectionFilter> filters) { ConjunctionFilter filter = new ConjunctionFilter(filters); String limit = null; if (!readAll) { limit = sharedPrefs.getString(""pref_disp_max_items"", ""80""); if (!Pattern.compile(""\\d+"").matcher(limit).matches()){ limit = ""80""; } } String ordering = sharedPrefs.getString(""pref_feed_ordering"", ""pubDate DESC""); return queryItems(filter, limit, ordering); } "	0	0	0	0	1	0
"@Test public void testBasicBaseTreeNodeFunctions() { PhylogeneticTreeParser parser = new PhylogeneticTreeParser(); String s = ""(B:6.0,D:11.0);""; TreeNodeCollection node = parser.parse(stringToInputStream(s)); TreeNodeCollection collection = node.getRoot().flatten(); collection.setRoot(node.getRoot()); node.getRoot().getId(); assertEquals(node.getRoot().getChildren().get(0), collection.getRoot().getChildren().get(0)); assertEquals(""B"", node.getRoot().getChildren().get(0).getName()); assertEquals(6.0, node.getRoot().getChildren().get(0).getWeight(), 0.0001); } "	0	0	0	0	1	0
public void addLiteralValue(Object value) { LiteralNode litExpr = TreeBuilder.createLiteralExpression(); litExpr.setValue(value); this.exprNodeStack.push(litExpr); } 	0	0	0	0	1	0
@Override public void createParams() { super.createParams();  GLShaderParam param; /** Random generator seed */ param = new GLShaderParam(INTEGER_UNIFORM_PARAM, RND_SEED__PARAM_NAME, getProgramId()); params.put(param.getParamName(), param); } 	0	0	0	0	1	0
public void setDrawerOffset(float drawerOffset) { if (this.drawerOffset != drawerOffset) { if (state != STATE_IDLE) { animator.cancel(); setDrawerOpenImpl(false, false); } this.drawerOffset = filterDrawerOffset(drawerOffset); requestLayout(); } } 	0	0	0	0	1	0
private void unschedule() { if (dirtyOutputBuffer()) { // Because not all data was written to the socket, we need to register for OP_WRITE so we get // notified when the socketChannel is ready for more data. registerOp(SelectionKey.OP_WRITE);  // If the outputBuffer is not empty, we don't need to unschedule ourselves. This is because the // WriteHandler will be triggered by a nio write event to continue sending data. return; }  // since everything is written, we are not interested anymore in write-events, so lets unsubscribe unregisterOp(SelectionKey.OP_WRITE); // So the outputBuffer is empty, so we are going to unschedule ourselves. scheduled.set(false);  if (writeQueue.isEmpty() && urgentWriteQueue.isEmpty()) { // there are no remaining packets, so we are done. return; }  // So there are packet, but we just unscheduled ourselves. If we don't try to reschedule, then these // Packets are at risk not to be send.  if (!scheduled.compareAndSet(false, true)) { //someone else managed to schedule this WriteHandler, so we are done. return; }  // We managed to reschedule. So lets add ourselves to the ioSelector so we are processed again. // We don't need to call wakeup because the current thread is the IO-thread and the selectionQueue will be processed // till it is empty. So it will also pick up tasks that are added while it is processing the selectionQueue. ioSelector.addTask(this); } 	0	0	0	0	1	0
"@Override public void initialize() { // Time date = new OwnLabel("""", skin); date.setName(""input time"");  dateEdit = new OwnImageButton(skin, ""edit""); dateEdit.addListener(new EventListener() {  @Override public boolean handle(Event event) { if (event instanceof ChangeEvent) { // Left button click if (dateDialog == null) { dateDialog = new DateDialog(stage, skin); } dateDialog.updateTime(GaiaSky.instance.time.getTime()); dateDialog.display(); } return false; }  }); dateEdit.addListener(new TextTooltip(txt(""gui.tooltip.dateedit""), skin));  // Pace Label paceLabel = new Label(txt(""gui.pace""), skin); plus = new OwnImageButton(skin, ""plus""); plus.setName(""plus""); plus.addListener(new EventListener() { @Override public boolean handle(Event event) { if (event instanceof ChangeEvent) { // Plus pressed EventManager.instance.post(Events.TIME_WARP_INCREASE_CMD);  return true; } return false; } }); plus.addListener(new TextTooltip(txt(""gui.tooltip.timewarpplus""), skin));  minus = new OwnImageButton(skin, ""minus""); minus.setName(""minus""); minus.addListener(new EventListener() { @Override public boolean handle(Event event) { if (event instanceof ChangeEvent) { // Minus pressed EventManager.instance.post(Events.TIME_WARP_DECREASE_CMD); return true; } return false; } }); minus.addListener(new TextTooltip(txt(""gui.tooltip.timewarpminus""), skin));  timeWarp = new OwnLabel(getFormattedTimeWrap(), skin, ""warp""); timeWarp.setName(""time warp""); Container<Label> wrapWrapper = new Container<Label>(timeWarp); wrapWrapper.width(60f * GlobalConf.SCALE_FACTOR); wrapWrapper.align(Align.center);  VerticalGroup timeGroup = new VerticalGroup().align(Align.left).columnAlign(Align.left).space(3 * GlobalConf.SCALE_FACTOR).padTop(3 * GlobalConf.SCALE_FACTOR);  HorizontalGroup dateGroup = new HorizontalGroup(); dateGroup.space(4 * GlobalConf.SCALE_FACTOR); dateGroup.addActor(date); dateGroup.addActor(dateEdit); timeGroup.addActor(dateGroup);  HorizontalGroup paceGroup = new HorizontalGroup(); paceGroup.space(1 * GlobalConf.SCALE_FACTOR); paceGroup.addActor(paceLabel); paceGroup.addActor(minus); paceGroup.addActor(wrapWrapper); paceGroup.addActor(plus);  timeGroup.addActor(paceGroup); timeGroup.pack();  component = timeGroup; } "	0	0	0	0	1	0
"public static void createPod(String label, String name) { LOG.info(String.format(""Creating a pod with the name %s and label %s"", name, label)); KubernetesConnection connection = new KubernetesConnection(IP_ADDRESS, PORT);  String[] labelTuple = label.split(""=""); String labelName = labelTuple[0]; String labelValue = labelTuple[1];  try (final KubernetesClient client = connection.getConnection()) { Pod newPod = new PodBuilder() .withKind(""pod"") .withNewMetadata() .withName(name).addToLabels(labelName, labelValue) .endMetadata() .withNewSpec() .addNewContainer() .withName(name).withImage(""fedora/apache"") .endContainer() .endSpec() .build(); Pod result = client.pods().inNamespace(""default"").create(newPod);  if (result == null) { LOG.error(""The pod creation returned a null result.""); return; }  LOG.info(String.format(""The pod creation %s returned the id %s"", result.getMetadata().getUid()));  } catch (KubernetesClientException e) { throw e; } } "	0	0	0	0	1	0
public void add(Xtype type){ _baseElement.appendChild(type.cloneNode()); _table.put(type.getType(), type); } 	0	0	0	0	1	0
"private String setTextToTheDeactiveOrActiveButton(int status) {  String enrollmentStatus = """"; if(status == student.STUDENT_ACTIVE){ deactivateOrActivateButton.setText(""Desativar matrícula""); enrollmentStatus = ""desativada""; } else{ deactivateOrActivateButton.setText(""Ativar matrícula""); enrollmentStatus = ""ativada""; }  return enrollmentStatus;  } "	0	0	0	0	1	0
"public Request save(Request request, User user) throws Exception { if (user.getUserRole().getId() == 5) { Guest guest = guestRepo.findByUserId(user.getId()); if (guest == null) { throw new Exception(""Not a valid guest""); } ReservationGuest rGuest = rgRepo.findByReservationStatusAndGuestId(1, guest.getId()); if (rGuest != null) { request.setReservationGuest(rGuest); } else { throw new Exception(""Guest does not have an active reservation""); } } Request result = repo.save(request); taskHandler.createTaskFromRequest(request); return result; } "	0	0	0	0	1	0
"@Override public void onActivityResult(final int requestCode, final int resultCode, final Intent data) { Log.d(LOG_TAG, ""onActivityResult: requestCode: "" + requestCode + "", resultCode: "" + resultCode); if (requestCode == REQUESTCODE_START_ACTIVITY_FOR_RESULT_TTS_SETTINGS) { if (ttsService != null) { ttsService.setEngineAndVoice(ttsService.getEngine(), ttsService.getVoice()); } } else if ((requestCode >= 0) && (requestCode < ttsEngines.size())) { if ((resultCode == TextToSpeech.Engine.CHECK_VOICE_DATA_PASS) && (data != null) && data.hasExtra(""availableVoices"")) { ArrayList<String> availableVoices = data.getStringArrayListExtra(""availableVoices""); DisplayName engineInfo = ttsEngines.get(requestCode); Log.d(LOG_TAG, ""onActivityResult: "" + engineInfo.displayName + "" voices = "" + availableVoices.toString()); for (String voiceName : availableVoices) { VoiceInfo voiceInfo = new VoiceInfo(); voiceInfo.name = voiceName; voiceInfo.engineInfo = engineInfo; int separatorIndex = voiceName.indexOf(""-""); if (separatorIndex >= 0) { voiceInfo.language = voiceName.substring(0, separatorIndex); voiceInfo.countryDetails = voiceName.substring(separatorIndex + 1); voiceInfo.displayName = engineInfo.displayName + "":"" + voiceInfo.countryDetails; } else { voiceInfo.language = voiceName; voiceInfo.countryDetails = """"; voiceInfo.displayName = engineInfo.displayName; } synchronized (ttsVoiceByLanguage) { if (!ttsVoiceByLanguage.containsKey(voiceInfo.language)) { ttsVoiceByLanguage.put(voiceInfo.language, new ArrayList()); } ttsVoiceByLanguage.get(voiceInfo.language).add(voiceInfo); } } } activityResultNumber++; if (activityResultNumber == ttsEnginesNumber) { // Sort languages by displayName: ttsLanguages = new ArrayList(ttsVoiceByLanguage.size()); for (String language : ttsVoiceByLanguage.keySet()) { ttsLanguages.add(new DisplayName( language, new Locale(language).getDisplayLanguage())); } Collections.sort(ttsLanguages); // sort voice lists by displayName: for (List<VoiceInfo> voices : ttsVoiceByLanguage.values()) { Collections.sort(voices); } updateLanguageSpinnerData(); } } } "	0	0	0	0	1	0
"@NonNull @Override public View getView(int position, View convertView, ViewGroup parent) { LayoutInflater theInflater = LayoutInflater.from(getContext());  View theView = theInflater.inflate(R.layout.row_layout_2,parent,false);  String categoryId = transactions.get(position).getCategoryId();  int index = 0; for(int i = 0; i<categories.size();i++) { if(categories.get(i).getId().equals(categoryId)) { index = i; break; } } TextView theTextView = (TextView)theView.findViewById(R.id.TextView1);  theTextView.setText(categories.get(index).getName());   ImageView theImageView = (ImageView)theView.findViewById(R.id.imageView1);  theImageView.setImageResource(categories.get(index).getCategoryImage().get(2));  TextView theTextView1 = (TextView)theView.findViewById(R.id.TextView2);  theTextView1.setText(transactions.get(position).getAmount()+""L.L."");  return theView; } "	0	0	0	0	1	0
"@Override public void onFragmentChoose (String category){  int index = 0; for(int i = 0 ; i<categories.size();i++) { if(categories.get(i).getName().equals(category)) { index = i; break; } } transaction.setCategoryId(categories.get(index).getId()); text.setText(categories.get(index).getName()); text.setTextColor( Color.parseColor( ""#951b81"" ) ); img.setImageResource( categories.get(index).getCategoryImage().get(4) ); } "	0	0	0	0	1	0
int getId() { return cursorToQuestion(dbCursor).id; } 	0	0	0	0	1	0
@Override public void restart() { this.restart(); } 	0	0	0	0	1	0
"@Override public void handleMethodTranslateException(Method method, DexMethodNode methodNode, MethodVisitor mv, Exception e) { // replace the generated code with // 'return new RuntimeException(""D2jFail translate: xxxxxxxxxxxxx"");' StringWriter s = new StringWriter(); s.append(""d2j fail translate: ""); e.printStackTrace(new PrintWriter(s)); String msg = s.toString(); mv.visitTypeInsn(Opcodes.NEW, ""java/lang/RuntimeException""); mv.visitInsn(Opcodes.DUP); mv.visitLdcInsn(msg); mv.visitMethodInsn(Opcodes.INVOKESPECIAL, ""java/lang/Runtime"", ""<init>"", ""(Ljava/lang/String;)V""); mv.visitInsn(Opcodes.ATHROW); } "	0	0	0	0	1	0
"private static void doTheJob() throws IOException { System.out.println(""Options: "" + options.clusteringParameters.toString() + ""\n""); if (options.simdoc) { doTheJobForSimDoc(); } else { doTheJobForRegularFiles(); } } "	0	0	0	0	1	0
"@Override public void onSuccess(Void result) { ServicesUi.this.modal.hide(); logger.info(MSGS.info() + "": "" + MSGS.deviceConfigApplied()); ServicesUi.this.apply.setEnabled(false); ServicesUi.this.reset.setEnabled(false); setDirty(false); ServicesUi.this.entryClass.initServicesTree(); EntryClassUi.hideWaitModal(); } "	0	0	0	0	1	0
"@Test public void createCredentialProviderWithNegativeProxyPort(){ final String invalidProxyPort = ""-2""; final String expectedExceptionMessage = ""Invalid value '""+ invalidProxyPort +""' for input 'proxyPort'. Valid Values: Integer values greater than 0""; final AuthTypes authTypes = new AuthTypes("""");  CredentialsProviderBuilder builder = new CredentialsProviderBuilder() .setAuthTypes(authTypes) .setProxyPort(invalidProxyPort) .setProxyUsername(""proxyUsername"");  exception.expect(IllegalArgumentException.class); exception.expectMessage(expectedExceptionMessage); builder.buildCredentialsProvider(); } "	0	0	0	0	1	0
"public void register(Object o) { Listener l = new Listener(o); for (Method m : o.getClass().getDeclaredMethods()) { if (m.getAnnotation(INpureSubscribe.class) != null) { if (m.getParameterTypes().length > 1) { INpurePreLoader.print(""Cannot have an event handler with more than 1 parameter!""); return; } Class eventType = m.getParameterTypes()[0]; l.handlers.put(eventType, m); } } listeners.add(l); } "	0	0	0	0	1	0
@Test public void testVisibleWhenStopped() { // Execute mockServiceManager.stopGPSLogging(sut.getActivity());  // Verify executePendingBindings(sut.getBinding(), MockBroadcastSender.Espresso.getResource()); onView(withId(R.id.fragment_recording_container)).check(matches(not(isDisplayed()))); } 	0	0	0	0	1	0
"protected Mesh handleClass(JSONObject json) throws Exception { String className = json.getString(""@"");  if (!className.contains(""."")) { // If we have just a name. Search in the default mesh package className = ""io.github.achtern.AchternEngine.core.rendering.mesh."" + className; }  if (json.has(""args"")) { JSONArray args = json.getJSONArray(""args""); return (Mesh) getObject(className, toObjectArray(args)); } else { return (Mesh) getObject(className, null); } } "	0	0	0	0	1	0
"private static void connect( SocketChannel soChannel, BoltServerAddress address, int timeoutMillis ) throws IOException { Socket socket = soChannel.socket(); try { socket.connect( address.toSocketAddress(), timeoutMillis ); } catch ( SocketTimeoutException e ) { throw new IOException( ""Timeout "" + timeoutMillis + ""ms expired"", e ); } } "	0	0	0	0	1	0
private JwtTokenFilter buildFilter() { JwtTokenFilter filter = new JwtTokenFilter(successHandler, failureHandler); filter.setAuthenticationManager(this.authenticationManager); return filter; } 	0	0	0	0	1	0
"@Override public String visitResourceType(ResourceType type, Void parameter) { return join(type.getTenantId(), ""resourceTypes"", type.getId()); } "	0	0	0	0	1	0
"public void raise(RaiseSemiAutoIssueDialog dialog) { String repo = dialog.getStringValue(FIELD_REPO); String title = dialog.getStringValue(FIELD_TITLE); String body = dialog.getStringValue(FIELD_BODY); String labels =dialog.getStringValue(FIELD_LABELS); String assignee = dialog.getStringValue(FIELD_ASSIGNEE); String username = dialog.getStringValue(FIELD_USERNAME); String password = dialog.getStringValue(FIELD_PASSWORD); try { raiseOnTracker(repo, title, body, labels, assignee, username, password); } catch(IOException e) { log.debug(""Check all the parameters again!\n""+e); } } "	0	0	0	0	1	0
@Override public void get(K k, Handler<AsyncResult<ChoosableIterable<V>>> asyncResultHandler) { if (!keyIsNull(k, asyncResultHandler)) { ChoosableSet<V> entries = cache.get(keyPath(k)); if (entries != null && !entries.isEmpty()) { asyncResultHandler.handle(Future.succeededFuture(entries)); } else { vertx.runOnContext(event -> { Map<String, ChildData> maps = treeCache.getCurrentChildren(keyPath(k)); ChoosableSet<V> newEntries = new ChoosableSet<>(0); if (maps != null) { for (ChildData childData : maps.values()) { try { if (childData != null && childData.getData() != null && childData.getData().length > 0) { newEntries.add(asObject(childData.getData())); } } catch (Exception ex) { asyncResultHandler.handle(Future.failedFuture(ex)); } } cache.putIfAbsent(keyPath(k), newEntries); } asyncResultHandler.handle(Future.succeededFuture(newEntries)); }); } } } 	0	0	0	0	1	0
private void playAnimation(final boolean resetProgress) { if (compositionLayer == null) { lazyCompositionTasks.add(new LazyCompositionTask() { @Override public void run(LottieComposition composition) { playAnimation(resetProgress); } }); return; } if (resetProgress) { animator.start(); } else { animator.resume(); } } 	0	0	0	0	1	0
"public static void main(String[] args) { try { JDA jda = new JDABuilder(AccountType.BOT).addListener(new MessageListener(), new JoinListener()).setToken(""TOKEN"").setGame(new GameImpl(""Hackerz"", """", Game.GameType.DEFAULT)).buildBlocking(); } catch (LoginException | InterruptedException | RateLimitedException e) { e.printStackTrace(); } } "	0	0	0	0	1	0
@Override public void onResume() { reloadRates(false); super.onResume(); } 	0	0	0	0	1	0
public ItemStack craftOk(ProcessorTileEntity processor, String ticket, ItemStack stack) { CraftingRequest foundRequest = null; for (CraftingRequest request : activeCraftingRequests) { if (ticket.equals(request.getTicket())) { foundRequest = request; break; } } if (foundRequest != null) { markDirty(); foundRequest.decrTodo(); if (foundRequest.getTodo() <= 0) { foundRequest.setOk(System.currentTimeMillis() + 1000); } else { processor.fireCraftEvent(ticket, stack); } if (ItemStackTools.isValid(stack)) { Inventory inventory = getInventoryFromTicket(ticket); if (inventory != null) { IItemHandler handlerAt = processor.getItemHandlerAt(inventory); if (handlerAt == null) { throw new ProgException(ExceptionType.EXCEPT_INVALIDINVENTORY); } return ItemHandlerHelper.insertItem(handlerAt, stack, false); } else { return ItemHandlerHelper.insertItem(getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, null), stack, false); } } } return stack; } 	0	0	0	0	1	0
"private void checkResponse(int code, String message, String response) { String[] codeAndMessage = response.split(""__""); if (code != 200) { assertEquals(2, codeAndMessage.length); assertEquals(code, Integer.parseInt(codeAndMessage[0])); assertEquals(message, codeAndMessage[1]); } else { assertEquals(code, Integer.parseInt(codeAndMessage[0])); } } "	0	0	0	0	1	0
private boolean isInputSlot(int slot) { return !((slot + 1) % 3 == 0); } 	0	0	0	0	1	0
"private String findQualifierName(VariableElement element) { String name = null; if (element.getAnnotationMirrors().isEmpty()) { return name; }  for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) { TypeElement annotationTypeElement = (TypeElement) annotationMirror.getAnnotationType().asElement(); if (isSameType(annotationTypeElement, ""javax.inject.Named"")) { checkIfAlreadyHasName(element, name); name = getValueOfAnnotation(annotationMirror); } else if (isAnnotationPresent(annotationTypeElement, ""javax.inject.Qualifier"")) { checkIfAlreadyHasName(element, name); name = annotationTypeElement.getQualifiedName().toString(); } } return name; } "	0	0	0	0	1	0
private void setListener() { PurchasingService.registerListener(context, gtPurchasingListener); } 	0	0	0	0	1	0
@Override public Set<String> addImages(AddImagesRequest addImagesRequest) { return processRequestOrException(() -> { List<Image> images = addImagesRequest.getPayload(); Call<Collection<Instance>> call = apiProvider.getImagesApi().add(images); call.execute(); return Collections.emptySet(); }); } 	0	0	0	0	1	0
"public boolean isMatchCurrentUrl(String url) { try { Uri currentUri = Uri.parse(currUrl); Uri uri = Uri.parse(url);  String currentPath = (currentUri.getHost() + currentUri.getPath()); String pendingPath = uri.getHost() + uri.getPath();  if (currentUri.getHost().equalsIgnoreCase(uri.getHost())) { if (!currentPath.endsWith(""/"")) currentPath = currentPath + ""/""; if (!pendingPath.endsWith(""/"")) pendingPath = pendingPath + ""/""; return currentPath.equalsIgnoreCase(pendingPath); } } catch (Throwable e) { SonicUtils.log(TAG, Log.ERROR, ""isMatchCurrentUrl error:"" + e.getMessage()); } return false; } "	0	0	0	0	1	0
"private void handleClientCoreMessage_DataUpdate(Message msg) { String htmlString = (String) msg.obj; String diffData = msg.getData().getString(DATA_UPDATE_BUNDLE_PARAMS_DIFF); if (wasLoadDataInvoked.get()) { pendingDiffData = diffData; if (!TextUtils.isEmpty(diffData)) { SonicUtils.log(TAG, Log.INFO, ""handleClientCoreMessage_DataUpdate:try to notify web callback.""); setResult(SONIC_RESULT_CODE_DATA_UPDATE, SONIC_RESULT_CODE_DATA_UPDATE, true); } else { SonicUtils.log(TAG, Log.INFO, ""handleClientCoreMessage_DataUpdate:diffData is null, cache-offline = store , do not refresh.""); setResult(SONIC_RESULT_CODE_DATA_UPDATE, SONIC_RESULT_CODE_HIT_CACHE, true); } return; } else { if (!TextUtils.isEmpty(htmlString)) { SonicUtils.log(TAG, Log.INFO, ""handleClientCoreMessage_DataUpdate:oh yeah data update hit 304, now clear pending data ->"" + (null != pendingDiffData) + "".""); pendingDiffData = null; sessionClient.loadDataWithBaseUrlAndHeader(currUrl, htmlString, ""text/html"", ""utf-8"", currUrl, getHeaders()); setResult(SONIC_RESULT_CODE_DATA_UPDATE, SONIC_RESULT_CODE_HIT_CACHE, false); return; } } SonicUtils.log(TAG, Log.ERROR, ""handleClientCoreMessage_DataUpdate error:call load url.""); sessionClient.loadUrl(srcUrl, null); setResult(SONIC_RESULT_CODE_DATA_UPDATE, SONIC_RESULT_CODE_FIRST_LOAD, false); } "	0	0	0	0	1	0
"public static void main(String[] args) {  //File configDir = new File(""/home/svc/bitmag-releasetest-conf""); //File bitmagKeyfile = new File(configDir, ""client-certificate.pem""); //Bitrepository bitrep = new Bitrepository(configDir, bitmagKeyfile); //bitrep.shutdown();  File configDir = new File(""/home/svc/bitrepository-quickstart/commandline/conf""); //File bitmagKeyfile = new File(configDir, ""client-certificate.pem""); Bitrepository bitrep = new Bitrepository(configDir, null, 1); bitrep.shutdown();    BitmagArcRepositoryClient client = new BitmagArcRepositoryClient();   } "	0	0	0	0	1	0
"public void selectAllPhotos(){ for (Media m : media) { m.setSelected(true); selectedMedias.add(m); } toolbar.setTitle(selectedMedias.size() + ""/"" + size); } "	0	0	0	0	1	0
private Color probabilityToColor(double prob) { int red = (int)(255 * prob); int blue = (int)(255 * (1d-prob)); return new Color(red, 0, blue); } 	0	0	0	0	1	0
"public JsonElement serialize(ResourceCertificateTree src, Type typeOfSrc, JsonSerializationContext context) {  JsonObject treeJson = new JsonObject();  treeJson.add(""name"", new JsonPrimitive(src.getName())); treeJson.add(""date"", new JsonPrimitive(src.getTimeStamp())); treeJson.add(""trustAnchor"", context.serialize(src.getTrustAnchor(), CertificateObject.class));   return treeJson; } "	0	0	0	0	1	0
"private static InputStream openInputStream(final serverObjects post, final LoaderDispatcher loader, final boolean auth, DigestURL url) throws IOException { InputStream inStream = null; if (url != null) { try { String agentName = post.get(""agentName"", auth ? ClientIdentification.yacyIntranetCrawlerAgentName : ClientIdentification.yacyInternetCrawlerAgentName); ClientIdentification.Agent agent = ClientIdentification.getAgent(agentName); inStream = loader.openInputStream(loader.request(url, false, true), CacheStrategy.IFEXIST, BlacklistType.SEARCH, agent); } catch (final IOException e) { /** No need to log full stack trace (in most cases resource is not available because of a network error) */ ConcurrentLog.fine(""ViewImage"", ""cannot load image. URL : "" + url); throw e; } } if (inStream == null) { throw new IOException(""Input stream could no be open""); } return inStream; } "	0	0	0	0	1	0
private PyVariable[] waitForCommand() { try { // VariablesView does not deal well with children changing asynchronously. // it causes unneeded scrolling, because view preserves selection instead // of visibility. // I try to minimize the occurrence here, by giving pydevd time to complete the // task before we are forced to do asynchronous notification. int i = 500; //up to 5 seconds while (--i > 0 && commandVariables == null) { if (this.monitor != null && this.monitor.isCanceled() == true) { //canceled request... let's return return new PyVariable[0]; } Thread.sleep(10); //10 millis } } catch (InterruptedException e) { Log.log(e); }  if (commandVariables != null) { return commandVariables; } return new PyVariable[0]; } 	0	0	0	0	1	0
@Override public HolderSimple onCreateViewHolder(ViewGroup parent, int viewType) { HolderSimple viewHolder; View view; switch (viewType) { case TYPE_MIN: view = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_item_article_ugly_old_style, parent, false); viewHolder = new HolderSimple(view); break; default: case TYPE_MIDDLE: view = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_item_article_middle, parent, false); viewHolder = new HolderMiddle(view); break; case TYPE_MAX: view = LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_item_article, parent, false); viewHolder = new HolderWithImage(view); break; }  return viewHolder; } 	0	0	0	0	1	0
@Override public Prog visit(SyncMethCall smc, JavaWriter w) { try { visitSyncMethodCall(smc, null, null, false, w); return prog; } catch (IOException e) { throw new RuntimeException(e); } } 	0	0	0	0	1	0
@Override public Prog visit(ESinglConstr cons, JavaWriter w) { try { String type = getQTypeName(cons.qtype_); w.emit(type); return prog; } catch (IOException e) { throw new RuntimeException(e); } } 	0	0	0	0	1	0
private String translateJava(String absType) { return abs2java.get(absType); } 	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") @Override public List<IDAO> list() { Session session = this.sessionFactory.openSession(); List<IDAO> userList = session.createQuery(""from user"").list();//takes a list of User IDAOs from the session session.close(); return userList; } "	0	0	0	0	1	0
@Before public void setup() {  if (setupIsDone) { return; }  // Maximizing workbench shell new WorkbenchShell().maximize();  // Disable showing Console view after standard output changes ConsolePreferencePage consolePref = new ConsolePreferencePage(); consolePref.open(); consolePref.toggleShowConsoleErrorWrite(false); consolePref.toggleShowConsoleStandardWrite(false); consolePref.ok();  // Disable showing Error Log view after changes ErrorLogView error = new ErrorLogView(); error.selectActivateOnNewEvents(false);  ProjectFactory.newProject(PROJECT_NAME).template(ProjectTemplate.CBR).type(ProjectType.BLUEPRINT).create(); serverName = serverReq.getConfig().getName(); FuseServerManipulator.addModule(serverName, PROJECT_NAME);  // Deleting Error Log new ErrorLogView().deleteLog();  setupIsDone = true; } 	0	0	0	0	1	0
@BeforeClass public static void setupInitial() {  ProjectFactory.newProject(PROJECT_NAME).template(ProjectTemplate.EAP).type(ProjectType.SPRING).create(); } 	0	0	0	0	1	0
@Override public CredentialRecord value14(java.lang.Long value) { setStoragePoolId(value); return this; } 	0	0	0	0	1	0
public Tank getTank(Coordinates c) { return tanks.get(c); } 	0	0	0	0	1	0
void startPascal() { assert this.lexicalScope == null; this.lexicalScope = new LexicalScope(null, null); } 	0	0	0	0	1	0
private boolean haveInvalidPrefixCombination(ArgumentMultimap argMultimap) { assert argMultimap != null; return ParserUtil.areAllPrefixesPresent(argMultimap, PREFIX_ACTIVE, PREFIX_COMPLETE); } 	0	0	0	0	1	0
"public IssueCreateView addIssue() { getDriver().findElement(By.linkText(""Add Issue"")).click(); return new IssueCreateView(getDriver());  } "	0	0	0	0	1	0
public void hideIfRoomItems(boolean withAnim) {  if (mMenu == -1) { return; }  mActionShowAlwaysItems.clear(); cancelChildAnimListAndClear();  List<MenuItemImpl> showAlwaysActionItems = filter(mMenuItems, new MenuItemImplPredicate() { @Override public boolean apply(MenuItemImpl menuItem) { return menuItem.requiresActionButton(); } });  int actionItemIndex; for (actionItemIndex = 0; actionItemIndex < mActionItems.size() && actionItemIndex < showAlwaysActionItems.size(); actionItemIndex++) {  final MenuItemImpl showAlwaysActionItem = showAlwaysActionItems.get(actionItemIndex);  //reset action item image if needed if (mActionItems.get(actionItemIndex).getItemId() != showAlwaysActionItem.getItemId()) {  ImageView action = (ImageView) getChildAt(actionItemIndex); action.setImageDrawable(showAlwaysActionItem.getIcon()); Util.setIconColor(action, mOverflowIconColor); action.setOnClickListener(new OnClickListener() { @Override public void onClick(View v) {  if (mMenuCallback != null) { mMenuCallback.onMenuItemSelected(mMenuBuilder, showAlwaysActionItem); } } }); } mActionShowAlwaysItems.add(showAlwaysActionItem); }  final int diff = mActionItems.size() - actionItemIndex + (mHasOverflow ? 1 : 0);  anims = new ArrayList<>();  //add anims for moving showAlwaysItem views to the right for (int i = 0; i < actionItemIndex; i++) {  final View currentChild = getChildAt(i); final float destTransX = (ACTION_DIMENSION_PX * diff) - (mHasOverflow ? Util.dpToPx(8) : 0); anims.add(ViewPropertyObjectAnimator.animate(currentChild) .setDuration(withAnim ? HIDE_IF_ROOM_ITEMS_ANIM_DURATION : 0) .setInterpolator(new AccelerateInterpolator()) .addListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) {  currentChild.setTranslationX(destTransX); } }) .translationXBy(destTransX).get()); }  //add anims for moving to right and/or zooming out previously shown items for (int i = actionItemIndex; i < (diff + actionItemIndex); i++) {  final View currentView = getChildAt(i); currentView.setClickable(false);  //move to right if (i != (getChildCount() - 1)) { anims.add(ViewPropertyObjectAnimator.animate(currentView).setDuration(withAnim ? HIDE_IF_ROOM_ITEMS_ANIM_DURATION : 0) .addListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) {  currentView.setTranslationX(ACTION_DIMENSION_PX); } }).translationXBy(ACTION_DIMENSION_PX).get()); }  //scale and zoom out anims.add(ViewPropertyObjectAnimator.animate(currentView) .setDuration(withAnim ? HIDE_IF_ROOM_ITEMS_ANIM_DURATION : 0) .addListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) {  currentView.setScaleX(0.5f); } }).scaleX(.5f).get()); anims.add(ViewPropertyObjectAnimator.animate(currentView) .setDuration(withAnim ? HIDE_IF_ROOM_ITEMS_ANIM_DURATION : 0) .addListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) {  currentView.setScaleY(0.5f); } }).scaleY(.5f).get()); anims.add(ViewPropertyObjectAnimator.animate(currentView) .setDuration(withAnim ? HIDE_IF_ROOM_ITEMS_ANIM_DURATION : 0) .addListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) {  currentView.setAlpha(0.0f); } }).alpha(0.0f).get()); }  final int actionItemsCount = actionItemIndex;  //finally, run animation if (!anims.isEmpty()) {  AnimatorSet animSet = new AnimatorSet(); if (!withAnim) { //temporary, from laziness animSet.setDuration(0); } animSet.playTogether(anims.toArray(new ObjectAnimator[anims.size()])); animSet.addListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) {  if (mOnVisibleWidthChangedListener != null) { mVisibleWidth = ((int) ACTION_DIMENSION_PX * actionItemsCount); mOnVisibleWidthChangedListener.onItemsMenuVisibleWidthChanged(mVisibleWidth); } } }); animSet.start(); } } 	0	0	0	0	1	0
"public void printAll() { System.out.println(name_ + "" - "" + sipp_ + "" - "" + supplier_ + "" - "" + price_ + "" - "" + rating_); } "	0	0	0	0	1	0
@Override public int compare(Car car1, Car car2) { double comp = (car1.getPrice()-car2.getPrice()); if (comp < 0) return -1; if (comp > 0) return 1; return 0; } 	0	0	0	0	1	0
public KeyInput getKeyInput() { if (keyInput == null) { keyInput = new LwjglKeyInput(this); }  return keyInput; } 	0	0	0	0	1	0
"public static ThrowsSpecification translate(ThrowsTag tag, ExecutableMember method) { String condition = tag.getCondition(); if (condition.isEmpty()) { return null; }  String tagKind = format(tag.getKind()); String description = tagKind + "" "" + tag.getException().getSimpleName() + "" "" + tag.getComment(); Guard guard = new Guard(tag.getComment().getText(), processCondition(condition, method)); return new ThrowsSpecification(description, guard, tag.getException().getName()); } "	0	0	0	0	1	0
"@Override public boolean handle(HandlerContext handlerContext) {  // Get the asset content thanks to the cache key String cacheKey = AssetUtils.extractCacheKeyFromRequest(handlerContext.getRequest()); Asset asset = handlerContext.getContext().getAssetStorage().get(cacheKey).getAsset();  // Update the current context with additional attributes WebContext ctx = new WebContext(handlerContext.getRequest(), handlerContext.getResponse(), handlerContext .getRequest().getServletContext(), handlerContext.getRequest().getLocale());  // Retrieve the cached request attributes from cache String requestKey = AssetUtils.extractRequestKeyFromRequest(handlerContext.getRequest()); RequestFlashData requestData = handlerContext.getContext().getRequestFlashDataCache().get(requestKey);  if (requestData != null) { ctx.setVariables(requestData.getAttributes()); }  // Process the Javascript asset String processed = templateEngine.process(asset.getName(), ctx);  // Housecleaning processed = processed.replace(JsResourceResolver.BLOCK_WRAP_CDATA_START, """"); processed = processed.replace(JsResourceResolver.BLOCK_WRAP_CDATA_END, """");  String configuredEncoding = handlerContext.getContext().getConfiguration().getEncoding();  // Update HTTP headers so that this asset is never cached handlerContext.getResponse().setHeader(HttpHeader.CACHE_CONTROL.getName(), ""no-cache, no-store""); handlerContext.getResponse().setHeader(HttpHeader.ETAG.getName(), HttpHeaderUtils.computeETag(handlerContext.getResponseAsBytes(), handlerContext)); Calendar past = Calendar.getInstance(); past.add(Calendar.YEAR, -1); handlerContext.getResponse().setDateHeader(HttpHeader.EXPIRES.getName(), past.getTimeInMillis()); handlerContext.getResponse().setHeader(HttpHeader.VARY.getName(), ""Accept-Encoding"");  // Clean flash data cache Cache<String, RequestFlashData> cache = handlerContext.getContext().getRequestFlashDataCache(); Iterator<String> iterator = cache.keySet().iterator(); while (iterator.hasNext()) { String key = iterator.next(); if (cache.get(key).isExpired()) { iterator.remove(); } }  // Override the response with the processed Javascript try { handlerContext.setResponseAsBytes(processed.getBytes(configuredEncoding)); } catch (UnsupportedEncodingException e) { throw new DandelionException(""Unable to encode the HTML page using the '"" + configuredEncoding + ""', which doesn't seem to be supported"", e); }  return false; } "	0	0	0	0	1	0
"public void on_connect () { context.editor.reset(); context.statusMessage(String.format(""Connecting to <a href=\""%s\"">%s</a>."", url.toString(), url.toString())); conn.write(new FlooAuth(auth.get(""username""), auth.get(""api_key""), auth.get(""secret""), url.owner, url.workspace)); } "	0	0	0	0	1	0
"public String fileName(File f){ return f.getName()+(f.isDirectory()?"" (Folder)"":""""); } "	0	0	0	0	1	0
private static int [] zzUnpackTrans() { int [] result = new int[40896]; int offset = 0; offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result); return result; } 	0	0	0	0	1	0
@Override public void onGlobalLayout() { Rect r = new Rect(); //r will be populated with the coordinates of your view that area still visible. decorView.getWindowVisibleDisplayFrame(r);  //get screen height and calculate the difference with the useable area from the r int height = decorView.getContext().getResources().getDisplayMetrics().heightPixels +6; int diff = height - r.bottom;  //if it could be a keyboard add the padding to the view if (diff != 0) { // if the use-able screen height differs from the total screen height we assume that it shows a keyboard now //check if the padding is 0 (if yes set the padding for the keyboard) if (contentView.getPaddingBottom() != diff) { //set the padding of the contentView for the keyboard contentView.setPadding(0, 0, 0, diff); } } else { //check if the padding is != 0 (if yes reset the padding) if (contentView.getPaddingBottom() != 0) { //reset the padding of the contentView contentView.setPadding(0, 0, 0, 0); } } } 	0	0	0	0	1	0
@Override public Fragment getItem(int position) { return cards.get(position); } 	0	0	0	0	1	0
"@Override public void execute(IndentWriter writer, JadeModel model, JadeTemplate template) throws JadeCompilerException { Filter filter = model.getFilter(getValue()); ArrayList<String> values = new ArrayList<String>(); LinkedList<Node> nodes = textBlock.getNodes(); for (Node node : nodes) { values.add(node.getValue()); }  String result = String.join(""\n"",values); if (filter != null) { result = filter.convert(result, attributes, model); } try { result = Utils.interpolate(result, model, false,template.getExpressionHandler()); } catch (ExpressionException e) { throw new JadeCompilerException(this, template.getTemplateLoader(), e); } writer.append(result); } "	0	0	0	0	1	0
public YMField getE(int[] coor, int dir) { return cells[index(coor)].getE(dir); } 	0	0	0	0	1	0
public void setE(int[] coor, int dir, YMField field) { cells[index(coor)].setE(dir, field); } 	0	0	0	0	1	0
public YMField getFTensor(int[] coor, int dir1, int dir2) { return cells[index(coor)].getFieldStrength(dir1, dir2); } 	0	0	0	0	1	0
public void addE(int[] coor, int dir, YMField field) { cells[index(coor)].addE(dir, field); } 	0	0	0	0	1	0
public void setU(int[] coor, int dir, LinkMatrix mat) { cells[index(coor)].setU(dir, mat); } 	0	0	0	0	1	0
@Override public void onDataChange(DataSnapshot dataSnapshot) {  int totalTasks = (Integer) dataSnapshot.getValue();  TaskCompletedData mTaskCompletedData = new TaskCompletedData(userName, totalTasks, createdOn);  completedTasksList.add(mTaskCompletedData);  adapter.notifyDataSetChanged(); } 	0	0	0	0	1	0
"public void moveLocalFolder(Folder folder, Path newDirectory) throws IOException {  if (Files.exists(newDirectory)) { logSevere(""Not moving folder "" + folder + "" to new directory "" + newDirectory.toString() + "". The new directory already exists!""); return; }  Path originalDirectory = folder.getLocalBase().toRealPath(); FolderSettings fs = FolderSettings.load(getController(), folder.getConfigEntryId());  // Remove the old folder from the repository. removeFolder(folder, false);  // PFS-1994: Encrypted storage. if (newDirectory.toString().endsWith(Constants.FOLDER_ENCRYPTION_SUFFIX)){ FileSystem encryptedFileSystem = folder.initCryptoFileSystem(getController(), newDirectory); newDirectory = encryptedFileSystem.getPath(newDirectory.toString()); }  // Move it. recursiveMoveAndDelete(originalDirectory, newDirectory);  // Remember patterns if content not moving. List<String> patterns = folder.getDiskItemFilter().getPatterns();  // Create the new Folder in the repository. fs = fs.changeBaseDir(newDirectory); folder = createFolder0(folder.getInfo().intern(), fs, true);  // Restore patterns if content not moved. for (String pattern : patterns) { folder.addPattern(pattern); } } "	0	0	0	0	1	0
"private String Tagger(String sentence) throws Exception{ String taggedSentence = null; InputStream inputStream = new FileInputStream(""./tools/en-pos-maxent.bin""); POSModel posModel = new POSModel(inputStream);  POSTaggerME tagger = new POSTaggerME(posModel);  WhitespaceTokenizer whitespaceTokenizer = WhitespaceTokenizer.INSTANCE; String[] tokens = whitespaceTokenizer.tokenize(sentence);  String[] tags = tagger.tag(tokens);  POSSample sample = new POSSample(tokens, tags);  taggedSentence = sample.toString();  return taggedSentence; } "	0	0	0	0	1	0
"public void setGraph(GenomeGraph graph) { this.graphController.setGraph(graph); disableGraphUIElements(graph == null); searchTab.setDisable(graph == null); Platform.runLater(() -> { assert graph != null; ProgrammingLife.getStage().setTitle(graph.getID()); });  if (graph != null) { this.miniMapController = new MiniMapController(this.miniMap, graph.size()); miniMap.setWidth(anchorGraphPanel.getWidth()); miniMap.setHeight(50.d); Console.println(""[%s] Graph was set to %s."", Thread.currentThread().getName(), graph.getID()); Console.println(""[%s] The graph has %d nodes"", Thread.currentThread().getName(), graph.size()); this.draw(); } } "	0	0	0	0	1	0
private void setStyleToIndicateCommandSuccess() { commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS); } 	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") @Transactional public Marketplace getFeatured() { Marketplace marketplace = MarketplaceFactory.eINSTANCE.createMarketplace(); marketplace.setBaseUrl(environment.getProperty(""marketplace.base-url"")); Featured featured = MarketplaceFactory.eINSTANCE.createFeatured(); marketplace.setFeatured(featured); try { sessionFactory.getCurrentSession().beginTransaction(); Query query = sessionFactory.getCurrentSession() .createQuery(""SELECT node FROM Node node WHERE node.id IN (:f)""); query.setParameterList(""f"", featuredItems); query.setMaxResults(maxFeaturedItems); featured.getNodes().addAll(EcoreUtil.copyAll(query.list())); featured.setCount(featured.getNodes().size()); sessionFactory.getCurrentSession().getTransaction().commit(); } catch (Exception e) { e.printStackTrace(); sessionFactory.getCurrentSession().getTransaction().rollback(); throw new InternalErrorException(e); } return marketplace; } "	0	0	0	0	1	0
"@Override public void ensureFullCommit() { restTemplate.post(dbURI.append(""_ensure_full_commit"").toString(), """"); } "	0	0	0	0	1	0
"@Override public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws ServletException, IOException {   Users user = userService.findByEmail(authentication.getName());   response.setContentType(""application/json;charset=UTF-8""); PrintWriter writer = response.getWriter();  writer.write(mapper.writeValueAsString(user));  response.setStatus(HttpServletResponse.SC_OK);  writer.flush(); writer.close(); } "	0	0	0	0	1	0
@Override public void removeLifecycleListener(LifecycleListener listener) { synchronized (lifecycleListeners) { lifecycleListeners.add(listener); } } 	0	0	0	0	1	0
"protected boolean processEntry() { if (lexer.parseString(""ENTRY"")) { // ENTRY(identification_variable) // Convert to be {primary}.INVOKE(mapEntry) lexer.skipWS(); lexer.parseChar('('); Node invokeNode = new Node(NodeType.INVOKE, ""mapEntry""); processExpression(); if (!lexer.parseChar(')')) { throw new QueryCompilerSyntaxException(""',' expected"", lexer.getIndex(), lexer.getInput()); }  Node primaryNode = stack.pop(); // Could check type ? (Map) Node primaryRootNode = primaryNode; while (primaryNode.getFirstChild() != null) { primaryNode = primaryNode.getFirstChild(); } primaryNode.appendChildNode(invokeNode); stack.push(primaryRootNode); return true; } return false; } "	0	0	0	0	1	0
"protected boolean processValue() { if (lexer.parseString(""VALUE"")) { // VALUE(identification_variable) lexer.skipWS(); lexer.parseChar('('); processExpression(); if (!lexer.parseChar(')')) { throw new QueryCompilerSyntaxException(""',' expected"", lexer.getIndex(), lexer.getInput()); }  Node primaryNode = stack.pop(); // Could check type ? (Map) Node primaryRootNode = primaryNode; Node lastNode = primaryNode; while (primaryNode.getFirstChild() != null) { primaryNode = primaryNode.getFirstChild(); }  // Convert to be {primary#VALUE} // Handle as a primary but with #VALUE appended to the last primary Object keyValue = primaryNode.getNodeValue(); primaryNode.setNodeValue(keyValue + ""#VALUE""); stack.push(primaryRootNode);  // Allow referral to chain of field(s) of key i.e ""VALUE(...).field1.field2"" etc int size = stack.size(); while (lexer.parseChar('.')) { if (processIdentifier()) { // ""a.field"" } else { throw new QueryCompilerSyntaxException(""Identifier expected"", lexer.getIndex(), lexer.getInput()); } }  // For all added nodes, step back and chain them so we have // Node[IDENTIFIER, a] // +--- Node[IDENTIFIER, b] //      +--- Node[IDENTIFIER, c] if (size != stack.size()) { while (stack.size() > size) { Node top = stack.pop(); lastNode.insertChildNode(top); lastNode = top; } } return true; } return false; } "	0	0	0	0	1	0
"@Override public ChordTrackEditorController refreshEditor() { sheetMusicPane2.setStyle(""-fx-background-color: rgba(0, 100, 100, 0.5); -fx-background-radius: 0;""); sheetMusicPane.getChildren().clear(); sheetMusicPane.getChildren().addAll(renderTrackDisplay()); return this; } "	0	0	0	0	1	0
"@Test public void shouldBuildApiUrlForFirstRunProvidedHistoryDays() { when(gitlabRepo.getRepoUrl()).thenReturn(""https://domain.org/namespace/Hygieia""); when(gitlabRepo.getBranch()).thenReturn(""master""); when(gitlabSettings.getFirstRunHistoryDays()).thenReturn(10);  URI result  = gitlabUrlUtility.buildApiUrl(gitlabRepo, true, 100);  assertEquals(""https"", result.getScheme()); assertEquals(""gitlab.com"", result.getHost()); assertEquals(""/api/v3/projects/namespace%2FHygieia/repository/commits/"", result.getRawPath()); assertTrue(result.getQuery().contains(""ref_name=master"")); assertTrue(result.getQuery().contains(""per_page=100"")); assertTrue(result.getQuery().contains(""since="")); } "	0	0	0	0	1	0
"public static ItemStack getFuelUpgrade(ItemStack stack) { SimpleStack fuel = new SimpleStack(stack);  int index = indexInMap(fuel);  if (index == -1) { PELogger.logFatal(""Fuel not found in fuel map: ""+stack); return null; }  int nextIndex = index == FUEL_MAP.size() - 1 ? 0 : index + 1;  return FUEL_MAP.get(nextIndex).toItemStack(); } "	0	0	0	0	1	0
"public static void main(String[] args) { System.out.println(""This is MYFEATURE2_sub""); } "	0	0	0	0	1	0
public void setScheduleEventWith(Set<OptionDateVO> optionalDates) { Set<DateOption> dates = event.getDates(); dates.clear(); for (OptionDateVO date : optionalDates) { addMorningDateIfSelected(dates, date); addAfertnoonDateIfSelected(dates, date); } event.setDates(dates); } 	0	0	0	0	1	0
"private Notification makeNotification() { NotificationCompat.Builder b = new NotificationCompat.Builder(this); b.setSmallIcon(R.drawable.ic_stat_knightkrawler); b.setContentTitle(""Server open""); b.setContentText(""The FRC krawler_logo server is open for scouts to sync""); b.setOngoing(true); b.setColor(0x5B0000);  Intent resultIntent = HomeActivity.newInstance(this, R.id.nav_item_server); TaskStackBuilder stackBuilder = TaskStackBuilder.create(this); stackBuilder.addParentStack(HomeActivity.class); stackBuilder.addNextIntent(resultIntent); PendingIntent resultPendingIntent = stackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT); b.setContentIntent(resultPendingIntent); return b.build(); } "	0	0	0	0	1	0
"public void onSyncStart(String deviceName) { NotificationCompat.Builder b = new NotificationCompat.Builder(context); b.setSmallIcon(android.R.drawable.ic_popup_sync); b.setContentTitle(""Syncing""); b.setContentText(""FRC krawler_logo is syncing with "" + deviceName); b.setDefaults(0); b.setOngoing(true); NotificationManager m = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE); m.notify(SYNC_ONGOING_ID, b.build()); } "	0	0	0	0	1	0
"public void onSyncError(String deviceName) { NotificationManager m = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE); m.cancel(SYNC_ONGOING_ID); NotificationCompat.Builder b = new NotificationCompat.Builder(context); b.setSmallIcon(android.R.drawable.ic_dialog_alert); b.setContentTitle(""Sync Error""); b.setContentText(""FRC krawler_logo encountered an error when syncing with "" + deviceName); m.notify(0, b.build()); } "	0	0	0	0	1	0
@Test public void shouldReportCorrectNumberOfDenseNodes() throws Exception { // GIVEN NodeRelationshipCache cache = new NodeRelationshipCache( NumberArrayFactory.AUTO, 5 ); increment( cache, 2, 10 ); increment( cache, 5, 2 ); increment( cache, 7, 12 ); increment( cache, 23, 4 ); increment( cache, 24, 5 ); increment( cache, 25, 6 );  // THEN assertFalse( cache.isDense( 0 ) ); assertTrue( cache.isDense( 2 ) ); assertFalse( cache.isDense( 5 ) ); assertTrue( cache.isDense( 7 ) ); assertFalse( cache.isDense( 23 ) ); assertTrue( cache.isDense( 24 ) ); assertTrue( cache.isDense( 25 ) ); } 	0	0	0	0	1	0
"@Override public boolean deleteAll() { boolean retour = true;  try { et.begin(); Query createQuery = em.createQuery(""delete from "" + entityTableName); createQuery.executeUpdate(); et.commit();  } catch (Exception ex) { retour = false; }  return retour; } "	0	0	0	0	1	0
@Override public void onDialogPositiveClick(String title, Integer trackId){ String currentTrackName; UserTrack mUserTrack;  currentTrackName = title; mUserTrack = new UserTrack(trackId, this.getApplicationContext()); mUserTrack.setName(currentTrackName); mUserTrack.updateDatabase();  updateList(); } 	0	0	0	0	1	0
private void computeMaxAlt(){ if(this.getTrackPointsCount() > 0) { Double max_alt = 9999D; for (int i = 0; i < this.getTrackPointsCount() - 1; i++) { if (max_alt < this.getTrackPoints().get(i).getAltitude()) max_alt = this.getTrackPoints().get(i).getAltitude(); } this.setMax_alt(max_alt); } } 	0	0	0	0	1	0
"public ArrayList<BusStopJSON> getBusStopsByStopName(String stopName){ stopName = DatabaseUtils.sqlEscapeString(stopName); String query = ""SELECT * FROM "" + TABLE_ITEMS + "" WHERE "" + BUS_STOP_DESC + ""="" + stopName + "";""; SQLiteDatabase db = this.getReadableDatabase(); ArrayList<BusStopJSON> result = new ArrayList<>();  Cursor cursor = db.rawQuery(query, null); if (cursor.getCount() == 0) return null; if (cursor.moveToFirst()){ do { result.add(getBusStopJsonObject(cursor)); } while (cursor.moveToNext()); } cursor.close(); db.close(); return result; } "	0	0	0	0	1	0
"@Override public void changed(ChangeEvent event, Actor actor) { Gdx.app.debug(""TAG"", ""TEST""); } "	0	0	0	0	1	0
void addPane (Pane p, boolean addToStack) {  if (addToStack) paneStack.add(p); overworldLayout.getChildren().add(p); } 	0	0	0	0	1	0
"void showInMapInfo(String name, String difficulty) {  String enterInfo = ""Press enter to explore this dungeon"";  infoBox = new Pane();  paneStack.push(infoBox);  double boxWidth = screenWidth / 3; double boxHeight = screenHeight / 5;  Rectangle box = new Rectangle(boxWidth, boxHeight, Paint.valueOf(""white"")); box.relocate((screenWidth / 2) - (boxWidth / 2), screenHeight / 2 - (boxHeight / 2));  infoBox.getChildren().addAll( box, createText((screenWidth / 2) - calcStringWidth(name), (screenHeight / 2) - (boxHeight / 2) + 20, name, new Font(24)), createText((screenWidth / 2) - calcStringWidth(difficulty), (screenHeight / 2) - (boxHeight / 2) + 40, difficulty, new Font(16)), createText(screenWidth / 2 - calcStringWidth(enterInfo), screenHeight / 2 - (boxHeight / 2) + 80, enterInfo, new Font(12)) ); overworldLayout.getChildren().add(infoBox); } "	0	0	0	0	1	0
"public void ensureCaps() { for (final MappedClass mc : mapper.getMappedClasses()) { if (mc.getEntityAnnotation() != null && mc.getEntityAnnotation().cap().value() > 0) { final CappedAt cap = mc.getEntityAnnotation().cap(); final String collName = mapper.getCollectionName(mc.getClazz()); final BasicDBObjectBuilder dbCapOpts = BasicDBObjectBuilder.start(""capped"", true); if (cap.value() > 0) { dbCapOpts.add(""size"", cap.value()); } if (cap.count() > 0) { dbCapOpts.add(""max"", cap.count()); } final DB database = getDB(); if (database.getCollectionNames().contains(collName)) { final DBObject dbResult = database.command(BasicDBObjectBuilder.start(""collstats"", collName).get()); if (dbResult.containsField(""capped"")) { // TODO: check the cap options. LOG.warning(""DBCollection already exists is capped already; doing nothing. "" + dbResult); } else { LOG.warning(""DBCollection already exists with same name("" + collName + "") and is not capped; not creating capped version!""); } } else { getDB().createCollection(collName, dbCapOpts.get()); LOG.debug(""Created capped DBCollection ("" + collName + "") with opts "" + dbCapOpts); } } } } "	0	0	0	0	1	0
public Optional<String> getGenre() { return Optional.of(genre); } 	0	0	0	0	1	0
public Optional<String> getData() { return Optional.of(data); } 	0	0	0	0	1	0
public Optional<String> getAlbum() { return Optional.of(album); } 	0	0	0	0	1	0
public Optional<String> getArtist() { return Optional.of(artist); } 	0	0	0	0	1	0
public final void rule__TypeSetDefinition__Group__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9414:1: ( ( ( rule__TypeSetDefinition__Alternatives_1 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9415:1: ( ( rule__TypeSetDefinition__Alternatives_1 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9415:1: ( ( rule__TypeSetDefinition__Alternatives_1 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9416:1: ( rule__TypeSetDefinition__Alternatives_1 ) { before(grammarAccess.getTypeSetDefinitionAccess().getAlternatives_1()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9417:1: ( rule__TypeSetDefinition__Alternatives_1 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9417:2: rule__TypeSetDefinition__Alternatives_1 { pushFollow(FollowSets000.FOLLOW_rule__TypeSetDefinition__Alternatives_1_in_rule__TypeSetDefinition__Group__1__Impl19537); rule__TypeSetDefinition__Alternatives_1();  state._fsp--;   }  after(grammarAccess.getTypeSetDefinitionAccess().getAlternatives_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__ErrorModelLibrary__Group__2__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8134:1: ( ( ( rule__ErrorModelLibrary__BehaviorsAssignment_2 )* ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8135:1: ( ( rule__ErrorModelLibrary__BehaviorsAssignment_2 )* ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8135:1: ( ( rule__ErrorModelLibrary__BehaviorsAssignment_2 )* ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8136:1: ( rule__ErrorModelLibrary__BehaviorsAssignment_2 )* { before(grammarAccess.getErrorModelLibraryAccess().getBehaviorsAssignment_2()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8137:1: ( rule__ErrorModelLibrary__BehaviorsAssignment_2 )* loop89: do { int alt89=2; int LA89_0 = input.LA(1);  if ( (LA89_0==Error) ) { alt89=1; }   switch (alt89) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8137:2: rule__ErrorModelLibrary__BehaviorsAssignment_2 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__BehaviorsAssignment_2_in_rule__ErrorModelLibrary__Group__2__Impl17020); rule__ErrorModelLibrary__BehaviorsAssignment_2();  state._fsp--;   } break;  default : break loop89; } } while (true);  after(grammarAccess.getErrorModelLibraryAccess().getBehaviorsAssignment_2());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__TypeSetConstructor__Group__2__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9957:1: ( ( ( rule__TypeSetConstructor__Group_2__0 )* ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9958:1: ( ( rule__TypeSetConstructor__Group_2__0 )* ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9958:1: ( ( rule__TypeSetConstructor__Group_2__0 )* ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9959:1: ( rule__TypeSetConstructor__Group_2__0 )* { before(grammarAccess.getTypeSetConstructorAccess().getGroup_2()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9960:1: ( rule__TypeSetConstructor__Group_2__0 )* loop100: do { int alt100=2; int LA100_0 = input.LA(1);  if ( (LA100_0==Comma) ) { alt100=1; }   switch (alt100) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9960:2: rule__TypeSetConstructor__Group_2__0 { pushFollow(FollowSets000.FOLLOW_rule__TypeSetConstructor__Group_2__0_in_rule__TypeSetConstructor__Group__2__Impl20600); rule__TypeSetConstructor__Group_2__0();  state._fsp--;   } break;  default : break loop100; } } while (true);  after(grammarAccess.getTypeSetConstructorAccess().getGroup_2());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__ErrorModelSubclause__Group_6_3__2__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6675:1: ( ( ( rule__ErrorModelSubclause__UseTransformationAssignment_6_3_2 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6676:1: ( ( rule__ErrorModelSubclause__UseTransformationAssignment_6_3_2 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6676:1: ( ( rule__ErrorModelSubclause__UseTransformationAssignment_6_3_2 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6677:1: ( rule__ErrorModelSubclause__UseTransformationAssignment_6_3_2 ) { before(grammarAccess.getErrorModelSubclauseAccess().getUseTransformationAssignment_6_3_2()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6678:1: ( rule__ErrorModelSubclause__UseTransformationAssignment_6_3_2 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6678:2: rule__ErrorModelSubclause__UseTransformationAssignment_6_3_2 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__UseTransformationAssignment_6_3_2_in_rule__ErrorModelSubclause__Group_6_3__2__Impl14146); rule__ErrorModelSubclause__UseTransformationAssignment_6_3_2();  state._fsp--;   }  after(grammarAccess.getErrorModelSubclauseAccess().getUseTransformationAssignment_6_3_2());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__ErrorSource__Group__5__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12574:1: ( ( ( rule__ErrorSource__TypeTokenConstraintAssignment_5 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12575:1: ( ( rule__ErrorSource__TypeTokenConstraintAssignment_5 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12575:1: ( ( rule__ErrorSource__TypeTokenConstraintAssignment_5 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12576:1: ( rule__ErrorSource__TypeTokenConstraintAssignment_5 )? { before(grammarAccess.getErrorSourceAccess().getTypeTokenConstraintAssignment_5()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12577:1: ( rule__ErrorSource__TypeTokenConstraintAssignment_5 )? int alt112=2; int LA112_0 = input.LA(1);  if ( (LA112_0==LeftCurlyBracket) ) { alt112=1; } switch (alt112) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12577:2: rule__ErrorSource__TypeTokenConstraintAssignment_5 { pushFollow(FollowSets001.FOLLOW_rule__ErrorSource__TypeTokenConstraintAssignment_5_in_rule__ErrorSource__Group__5__Impl25742); rule__ErrorSource__TypeTokenConstraintAssignment_5();  state._fsp--;   } break;  }  after(grammarAccess.getErrorSourceAccess().getTypeTokenConstraintAssignment_5());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__ErrorModelSubclause__Group_1__2__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5353:1: ( ( ( rule__ErrorModelSubclause__UseTypesAssignment_1_2 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5354:1: ( ( rule__ErrorModelSubclause__UseTypesAssignment_1_2 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5354:1: ( ( rule__ErrorModelSubclause__UseTypesAssignment_1_2 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5355:1: ( rule__ErrorModelSubclause__UseTypesAssignment_1_2 ) { before(grammarAccess.getErrorModelSubclauseAccess().getUseTypesAssignment_1_2()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5356:1: ( rule__ErrorModelSubclause__UseTypesAssignment_1_2 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5356:2: rule__ErrorModelSubclause__UseTypesAssignment_1_2 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__UseTypesAssignment_1_2_in_rule__ErrorModelSubclause__Group_1__2__Impl11550); rule__ErrorModelSubclause__UseTypesAssignment_1_2();  state._fsp--;   }  after(grammarAccess.getErrorModelSubclauseAccess().getUseTypesAssignment_1_2());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__TypeToken__Group_1__2__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10526:1: ( ( ( rule__TypeToken__Group_1_2__0 )* ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10527:1: ( ( rule__TypeToken__Group_1_2__0 )* ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10527:1: ( ( rule__TypeToken__Group_1_2__0 )* ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10528:1: ( rule__TypeToken__Group_1_2__0 )* { before(grammarAccess.getTypeTokenAccess().getGroup_1_2()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10529:1: ( rule__TypeToken__Group_1_2__0 )* loop102: do { int alt102=2; int LA102_0 = input.LA(1);  if ( (LA102_0==Asterisk) ) { alt102=1; }   switch (alt102) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:10529:2: rule__TypeToken__Group_1_2__0 { pushFollow(FollowSets000.FOLLOW_rule__TypeToken__Group_1_2__0_in_rule__TypeToken__Group_1__2__Impl21712); rule__TypeToken__Group_1_2__0();  state._fsp--;   } break;  default : break loop102; } } while (true);  after(grammarAccess.getTypeTokenAccess().getGroup_1_2());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__ErrorModelSubclause__Group_8__3__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7514:1: ( ( ( rule__ErrorModelSubclause__ConnectionErrorSourcesAssignment_8_3 )* ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7515:1: ( ( rule__ErrorModelSubclause__ConnectionErrorSourcesAssignment_8_3 )* ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7515:1: ( ( rule__ErrorModelSubclause__ConnectionErrorSourcesAssignment_8_3 )* ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7516:1: ( rule__ErrorModelSubclause__ConnectionErrorSourcesAssignment_8_3 )* { before(grammarAccess.getErrorModelSubclauseAccess().getConnectionErrorSourcesAssignment_8_3()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7517:1: ( rule__ErrorModelSubclause__ConnectionErrorSourcesAssignment_8_3 )* loop84: do { int alt84=2; int LA84_0 = input.LA(1);  if ( (LA84_0==RULE_ID) ) { alt84=1; }   switch (alt84) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7517:2: rule__ErrorModelSubclause__ConnectionErrorSourcesAssignment_8_3 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__ConnectionErrorSourcesAssignment_8_3_in_rule__ErrorModelSubclause__Group_8__3__Impl15806); rule__ErrorModelSubclause__ConnectionErrorSourcesAssignment_8_3();  state._fsp--;   } break;  default : break loop84; } } while (true);  after(grammarAccess.getErrorModelSubclauseAccess().getConnectionErrorSourcesAssignment_8_3());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__ErrorModelSubclause__Group_6__5__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6381:1: ( ( ( rule__ErrorModelSubclause__Group_6_5__0 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6382:1: ( ( rule__ErrorModelSubclause__Group_6_5__0 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6382:1: ( ( rule__ErrorModelSubclause__Group_6_5__0 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6383:1: ( rule__ErrorModelSubclause__Group_6_5__0 )? { before(grammarAccess.getErrorModelSubclauseAccess().getGroup_6_5()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6384:1: ( rule__ErrorModelSubclause__Group_6_5__0 )? int alt72=2; int LA72_0 = input.LA(1);  if ( (LA72_0==Transitions) ) { alt72=1; } switch (alt72) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6384:2: rule__ErrorModelSubclause__Group_6_5__0 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_6_5__0_in_rule__ErrorModelSubclause__Group_6__5__Impl13571); rule__ErrorModelSubclause__Group_6_5__0();  state._fsp--;   } break;  }  after(grammarAccess.getErrorModelSubclauseAccess().getGroup_6_5());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__TypeTransformation__Group__0__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11239:1: ( ( ( rule__TypeTransformation__Alternatives_0 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11240:1: ( ( rule__TypeTransformation__Alternatives_0 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11240:1: ( ( rule__TypeTransformation__Alternatives_0 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11241:1: ( rule__TypeTransformation__Alternatives_0 ) { before(grammarAccess.getTypeTransformationAccess().getAlternatives_0()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11242:1: ( rule__TypeTransformation__Alternatives_0 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11242:2: rule__TypeTransformation__Alternatives_0 { pushFollow(FollowSets001.FOLLOW_rule__TypeTransformation__Alternatives_0_in_rule__TypeTransformation__Group__0__Impl23107); rule__TypeTransformation__Alternatives_0();  state._fsp--;   }  after(grammarAccess.getTypeTransformationAccess().getAlternatives_0());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__ErrorModelSubclause__Group_8__6() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7593:1: ( rule__ErrorModelSubclause__Group_8__6__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:7594:2: rule__ErrorModelSubclause__Group_8__6__Impl { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_8__6__Impl_in_rule__ErrorModelSubclause__Group_8__615961); rule__ErrorModelSubclause__Group_8__6__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__ErrorModelSubclause__Group_6__4__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6352:1: ( ( ( rule__ErrorModelSubclause__Group_6_4__0 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6353:1: ( ( rule__ErrorModelSubclause__Group_6_4__0 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6353:1: ( ( rule__ErrorModelSubclause__Group_6_4__0 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6354:1: ( rule__ErrorModelSubclause__Group_6_4__0 )? { before(grammarAccess.getErrorModelSubclauseAccess().getGroup_6_4()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6355:1: ( rule__ErrorModelSubclause__Group_6_4__0 )? int alt71=2; int LA71_0 = input.LA(1);  if ( (LA71_0==Events) ) { alt71=1; } switch (alt71) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:6355:2: rule__ErrorModelSubclause__Group_6_4__0 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_6_4__0_in_rule__ErrorModelSubclause__Group_6__4__Impl13510); rule__ErrorModelSubclause__Group_6_4__0();  state._fsp--;   } break;  }  after(grammarAccess.getErrorModelSubclauseAccess().getGroup_6_4());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__ErrorModelSubclause__Group_2__3__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5607:1: ( ( ( rule__ErrorModelSubclause__TypeEquivalenceAssignment_2_3 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5608:1: ( ( rule__ErrorModelSubclause__TypeEquivalenceAssignment_2_3 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5608:1: ( ( rule__ErrorModelSubclause__TypeEquivalenceAssignment_2_3 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5609:1: ( rule__ErrorModelSubclause__TypeEquivalenceAssignment_2_3 ) { before(grammarAccess.getErrorModelSubclauseAccess().getTypeEquivalenceAssignment_2_3()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5610:1: ( rule__ErrorModelSubclause__TypeEquivalenceAssignment_2_3 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:5610:2: rule__ErrorModelSubclause__TypeEquivalenceAssignment_2_3 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__TypeEquivalenceAssignment_2_3_in_rule__ErrorModelSubclause__Group_2__3__Impl12049); rule__ErrorModelSubclause__TypeEquivalenceAssignment_2_3();  state._fsp--;   }  after(grammarAccess.getErrorModelSubclauseAccess().getTypeEquivalenceAssignment_2_3());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__EMV2Library__Group_3__5__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4327:1: ( ( ( rule__EMV2Library__Group_3_5__0 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4328:1: ( ( rule__EMV2Library__Group_3_5__0 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4328:1: ( ( rule__EMV2Library__Group_3_5__0 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4329:1: ( rule__EMV2Library__Group_3_5__0 )? { before(grammarAccess.getEMV2LibraryAccess().getGroup_3_5()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4330:1: ( rule__EMV2Library__Group_3_5__0 )? int alt52=2; int LA52_0 = input.LA(1);  if ( (LA52_0==Properties) ) { alt52=1; } switch (alt52) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:4330:2: rule__EMV2Library__Group_3_5__0 { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__Group_3_5__0_in_rule__EMV2Library__Group_3__5__Impl9524); rule__EMV2Library__Group_3_5__0();  state._fsp--;   } break;  }  after(grammarAccess.getEMV2LibraryAccess().getGroup_3_5());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__ErrorModelLibrary__Group_1_3__2__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8801:1: ( ( ( rule__ErrorModelLibrary__Group_1_3_2__0 )* ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8802:1: ( ( rule__ErrorModelLibrary__Group_1_3_2__0 )* ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8802:1: ( ( rule__ErrorModelLibrary__Group_1_3_2__0 )* ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8803:1: ( rule__ErrorModelLibrary__Group_1_3_2__0 )* { before(grammarAccess.getErrorModelLibraryAccess().getGroup_1_3_2()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8804:1: ( rule__ErrorModelLibrary__Group_1_3_2__0 )* loop97: do { int alt97=2; int LA97_0 = input.LA(1);  if ( (LA97_0==Comma) ) { alt97=1; }   switch (alt97) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8804:2: rule__ErrorModelLibrary__Group_1_3_2__0 { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__Group_1_3_2__0_in_rule__ErrorModelLibrary__Group_1_3__2__Impl18338); rule__ErrorModelLibrary__Group_1_3_2__0();  state._fsp--;   } break;  default : break loop97; } } while (true);  after(grammarAccess.getErrorModelLibraryAccess().getGroup_1_3_2());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__ErrorModelLibrary__Group_1__8() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8458:1: ( rule__ErrorModelLibrary__Group_1__8__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:8459:2: rule__ErrorModelLibrary__Group_1__8__Impl { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__Group_1__8__Impl_in_rule__ErrorModelLibrary__Group_1__817672); rule__ErrorModelLibrary__Group_1__8__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__TypeTransformationSet__Group_3_3__1() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11195:1: ( rule__TypeTransformationSet__Group_3_3__1__Impl ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11196:2: rule__TypeTransformationSet__Group_3_3__1__Impl { pushFollow(FollowSets001.FOLLOW_rule__TypeTransformationSet__Group_3_3__1__Impl_in_rule__TypeTransformationSet__Group_3_3__123016); rule__TypeTransformationSet__Group_3_3__1__Impl();  state._fsp--;   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__ErrorPath__Group_8_1__2__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:13500:1: ( ( ( rule__ErrorPath__TypeMappingSetAssignment_8_1_2 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:13501:1: ( ( rule__ErrorPath__TypeMappingSetAssignment_8_1_2 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:13501:1: ( ( rule__ErrorPath__TypeMappingSetAssignment_8_1_2 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:13502:1: ( rule__ErrorPath__TypeMappingSetAssignment_8_1_2 ) { before(grammarAccess.getErrorPathAccess().getTypeMappingSetAssignment_8_1_2()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:13503:1: ( rule__ErrorPath__TypeMappingSetAssignment_8_1_2 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:13503:2: rule__ErrorPath__TypeMappingSetAssignment_8_1_2 { pushFollow(FollowSets001.FOLLOW_rule__ErrorPath__TypeMappingSetAssignment_8_1_2_in_rule__ErrorPath__Group_8_1__2__Impl27560); rule__ErrorPath__TypeMappingSetAssignment_8_1_2();  state._fsp--;   }  after(grammarAccess.getErrorPathAccess().getTypeMappingSetAssignment_8_1_2());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__TypeSetDefinition__Group_1_0__5__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9632:1: ( ( ( rule__TypeSetDefinition__Group_1_0_5__0 )* ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9633:1: ( ( rule__TypeSetDefinition__Group_1_0_5__0 )* ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9633:1: ( ( rule__TypeSetDefinition__Group_1_0_5__0 )* ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9634:1: ( rule__TypeSetDefinition__Group_1_0_5__0 )* { before(grammarAccess.getTypeSetDefinitionAccess().getGroup_1_0_5()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9635:1: ( rule__TypeSetDefinition__Group_1_0_5__0 )* loop99: do { int alt99=2; int LA99_0 = input.LA(1);  if ( (LA99_0==Comma) ) { alt99=1; }   switch (alt99) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:9635:2: rule__TypeSetDefinition__Group_1_0_5__0 { pushFollow(FollowSets000.FOLLOW_rule__TypeSetDefinition__Group_1_0_5__0_in_rule__TypeSetDefinition__Group_1_0__5__Impl19970); rule__TypeSetDefinition__Group_1_0_5__0();  state._fsp--;   } break;  default : break loop99; } } while (true);  after(grammarAccess.getTypeSetDefinitionAccess().getGroup_1_0_5());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__ErrorPropagation__Group__3__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12135:1: ( ( ( rule__ErrorPropagation__NotAssignment_3 )? ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12136:1: ( ( rule__ErrorPropagation__NotAssignment_3 )? ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12136:1: ( ( rule__ErrorPropagation__NotAssignment_3 )? ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12137:1: ( rule__ErrorPropagation__NotAssignment_3 )? { before(grammarAccess.getErrorPropagationAccess().getNotAssignment_3()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12138:1: ( rule__ErrorPropagation__NotAssignment_3 )? int alt110=2; int LA110_0 = input.LA(1);  if ( (LA110_0==Not) ) { alt110=1; } switch (alt110) { case 1 : // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:12138:2: rule__ErrorPropagation__NotAssignment_3 { pushFollow(FollowSets001.FOLLOW_rule__ErrorPropagation__NotAssignment_3_in_rule__ErrorPropagation__Group__3__Impl24873); rule__ErrorPropagation__NotAssignment_3();  state._fsp--;   } break;  }  after(grammarAccess.getErrorPropagationAccess().getNotAssignment_3());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
public final void rule__TypeMappingSet__Group_3_3__1__Impl() throws RecognitionException {  int stackSize = keepStackSize();  try { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11884:1: ( ( ( rule__TypeMappingSet__UseTypesAssignment_3_3_1 ) ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11885:1: ( ( rule__TypeMappingSet__UseTypesAssignment_3_3_1 ) ) { // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11885:1: ( ( rule__TypeMappingSet__UseTypesAssignment_3_3_1 ) ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11886:1: ( rule__TypeMappingSet__UseTypesAssignment_3_3_1 ) { before(grammarAccess.getTypeMappingSetAccess().getUseTypesAssignment_3_3_1()); // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11887:1: ( rule__TypeMappingSet__UseTypesAssignment_3_3_1 ) // ../org.osate.xtext.aadl2.errormodel.ui/src-gen/org/osate/xtext/aadl2/errormodel/ui/contentassist/antlr/internal/InternalErrorModelParser.g:11887:2: rule__TypeMappingSet__UseTypesAssignment_3_3_1 { pushFollow(FollowSets001.FOLLOW_rule__TypeMappingSet__UseTypesAssignment_3_3_1_in_rule__TypeMappingSet__Group_3_3__1__Impl24377); rule__TypeMappingSet__UseTypesAssignment_3_3_1();  state._fsp--;   }  after(grammarAccess.getTypeMappingSetAccess().getUseTypesAssignment_3_3_1());  }   }  } catch (RecognitionException re) { reportError(re); recover(input,re); } finally {  restoreStackSize(stackSize);  } return ; } 	0	0	0	0	1	0
private COSStream getCIDSetStream() { COSDictionary fontDescriptor = this.pdFont.getFontDescriptor(); COSStream cidSet; if (fontDescriptor != null) { cidSet = ((org.verapdf.pd.font.PDCIDFont) this.pdFont).getCIDSet(); return cidSet; } return null; } 	0	0	0	0	1	0
@IdRes protected int getSeparatorResId() { return mTutorial.getSeparatorResId(); } 	0	0	0	0	1	0
private void cacheNodeTree(OrganizationId organizationId, Long caseMRootNodeId, Node parentNode, List<Node> nodes, List<Long> caseMParentIds) { for (int i = 0; i < nodes.size(); i++) { Node node = nodes.get(i); Long orderIndex = (long) i;  List<Long> childCaseMParentIds = new ArrayList<>(caseMParentIds); childCaseMParentIds.add(node.getNodeId());  if (node.getType().equals(0l)) { // Type 0 pages are hidden levels that should be flatted out } else { Page page = translateNode(orderIndex, organizationId, caseMRootNodeId, parentNode, node); caseMCache.cacheNode(organizationId, page); }  cacheNodeTree(organizationId, caseMRootNodeId, node, getChildNodes(organizationId, caseMRootNodeId, childCaseMParentIds), childCaseMParentIds); } } 	0	0	0	0	1	0
@Override public boolean isRunning() { return this.targetIntegrationFlow.isRunning(); } 	0	0	0	0	1	0
"@Override public String toString() { return ""SubjectPlan [sub="" + sub + "", planner="" + teac + ""]""; } "	0	0	0	0	1	0
"TypeTree reinterpretAsType(Token typeToken) { if (typeToken.matches(TokenKind.KEYWORD, JSKeyword.VOID)) return new VoidTypeTreeImpl(typeToken); if (typeToken.getKind() == TokenKind.IDENTIFIER) { switch (typeToken.getValue().toString()) { case ""any"": case ""never"": } } //TODO fix identifiers throw new JSUnexpectedTokenException(typeToken); } "	0	0	0	0	1	0
"@Override public Void visitCast(CastTree node, WriterHelper out) { ExpressionTree expression = node.getExpression(); TypeTree type = node.getType();  expression.accept(this, out);  if (type.isImplicit()) return null;  out.append(options.space).append(""as"").append(options.space); type.accept(this, out); return null; } "	0	0	0	0	1	0
public boolean delete(String schemaId) throws DataStoreException { return delete(jsonSchema(getSchema(schemaId))); } 	0	0	0	0	1	0
public List<Map<String, Object>> list(String schemaId, Query query) throws DataStoreException { return list(jsonSchema(getSchema(schemaId)), query); } 	0	0	0	0	1	0
public boolean delete(String schemaId, String name) throws DataStoreException { return delete(jsonSchema(getSchema(schemaId)), name); } 	0	0	0	0	1	0
"private String getTemplateForJUnit() { StringBuilder sb = new StringBuilder(); sb.append(""<p><b>JUnit:</b></p>""); sb.append(""<pre>\n""); sb.append(""    package ${packageName}\n""); sb.append(""\n""); sb.append(""    public class ${className} {\n""); sb.append(""\n""); sb.append(""        @Test\n""); sb.append(""        @TestDoc(\n""); sb.append(""            project = \""${project}\"",\n""); sb.append(""            name = \""${name}\"",\n""); sb.append(""            description = \""${description}\"",\n""); sb.append(""            groups = { ${tags} })\n""); sb.append(""        public void ${methodName}() throws Exception {\n""); sb.append(""            // TODO: add the test logic\n""); sb.append(""        }\n""); sb.append(""\n""); sb.append(""    }\n""); sb.append(""</pre>\n""); return sb.toString(); } "	0	0	0	0	1	0
"private void generateAddRequestImplementation(Method method, Service service) { String serviceClassName = goNames.getServiceName(service).getClassName(); buffer.addLine(""rawURL := fmt.Sprintf(\""%%s%%s\"", p.%1$s.Connection.URL(), p.%1$s.Path)"", goNames.getPrivateMemberStyleName(serviceClassName)); buffer.addImport(""net/url""); buffer.addLine(""values := make(url.Values)"");  getSecondaryParameters(method) .forEach(this::generateRequestParameterQueryBuilder); generateAdditionalQueryParameters();  // Generate the final URL buffer.addLine(""if len(values) > 0 {""); buffer.addLine(  ""rawURL = fmt.Sprintf(\""%%s?%%s\"", rawURL, values.Encode())""); buffer.addLine(""}"");  // Generate the net/http request.Body (via bytes.Buffer) buffer.addImport(""bytes""); buffer.addLine(""var body *bytes.Buffer""); generateWriteRequestBody(getFirstParameter(method));  // Construct the net/http request buffer.addImport(""net/http""); buffer.addLine(""req, err := http.NewRequest(\""POST\"", rawURL, body)""); buffer.addLine(""if err != nil {""); buffer.addLine(  ""return nil, err""); buffer.addLine(""}"");  generateCommonRequestImplementation(method, service, new String[]{""200""}); generateResponseParseImplementation(method, service); } "	0	0	0	0	1	0
"@Test public void testKilledSession() throws Exception { client.create().forPath(""/test"");  cache = newTreeCacheWithListeners(client, ""/test""); cache.start(); assertEvent(CacheEvent.NODE_CREATED, ""/test""); assertEvent(CacheEvent.CACHE_REFRESHED);  client.create().forPath(""/test/foo"", ""foo"".getBytes()); assertEvent(CacheEvent.NODE_CREATED, ""/test/foo""); client.create().withMode(CreateMode.EPHEMERAL).forPath(""/test/me"", ""data"".getBytes()); assertEvent(CacheEvent.NODE_CREATED, ""/test/me"");  KillServerSession.kill(client.getZookeeperClient().getZooKeeper(), server.getConnectString()); assertEvent(CacheEvent.NODE_DELETED, ""/test/me"", ""data"".getBytes()); assertEvent(CacheEvent.CACHE_REFRESHED);  assertNoMoreEvents(); } "	0	0	0	0	1	0
public boolean checkForDuplicateFile(String fileName) { List<ServerFile> files;  if (!isMetadataAvailable()) { files = getFilesAdapter().getItems(); } else { files = getFilesAdapter().getItems(); } for (ServerFile serverFile : files) { if (serverFile.getName().equals(fileName)) { return true; } } return false; } 	0	0	0	0	1	0
"private void doIntermediateReceipts(SmsSet smsSet, PersistenceRAInterface pers, long currentMsgNum, ArrayList<Sms> lstFailured) { TargetAddress lock; long smsCnt = smsSet.getSmsCount(); for (long i1 = currentMsgNum; i1 < smsCnt; i1++) { Sms sms = smsSet.getSms(i1); int registeredDelivery = sms.getRegisteredDelivery(); if (MessageUtil.isReceiptOnFailure(registeredDelivery) && lstFailured.indexOf(sms) == -1) { TargetAddress ta = new TargetAddress(sms.getSourceAddrTon(), sms.getSourceAddrNpi(), sms.getSourceAddr(), smsSet.getNetworkId()); lock = SmsSetCache.getInstance().addSmsSet(ta); try { synchronized (lock) { try { Sms receipt; if (smscPropertiesManagement.getDatabaseType() == DatabaseType.Cassandra_1) { receipt = MessageUtil.createReceiptSms(sms, false); SmsSet backSmsSet = pers.obtainSmsSet(ta); receipt.setSmsSet(backSmsSet); receipt.setStored(true); pers.createLiveSms(receipt); pers.setNewMessageScheduled(receipt.getSmsSet(), MessageUtil.computeDueDate(MessageUtil.computeFirstDueDelay(smscPropertiesManagement.getFirstDueDelay()))); } else { receipt = MessageUtil.createReceiptSms(sms, false, ta, smscPropertiesManagement.getOrigNetworkIdForReceipts(),null,true); boolean storeAndForwMode = MessageUtil.isStoreAndForward(sms); if (!storeAndForwMode) { try { this.scheduler.injectSmsOnFly(receipt.getSmsSet(), true); } catch (Exception e) { this.logger.severe(""Exception when runnung injectSmsOnFly() for receipt in onDeliveryError(): "" + e.getMessage(), e); } } else { if (smscPropertiesManagement.getStoreAndForwordMode() == StoreAndForwordMode.fast) { try { receipt.setStoringAfterFailure(true); this.scheduler.injectSmsOnFly(receipt.getSmsSet(), true); } catch (Exception e) { this.logger .severe(""Exception when runnung injectSmsOnFly() for receipt in onDeliveryError(): "" + e.getMessage(), e); } } else { receipt.setStored(true); this.scheduler.setDestCluster(receipt.getSmsSet()); pers.c2_scheduleMessage_ReschedDueSlot(receipt, smscPropertiesManagement.getStoreAndForwordMode() == StoreAndForwordMode.fast, true); } } } this.logger.info(""Adding an error receipt: source="" + receipt.getSourceAddr() + "", dest="" + receipt.getSmsSet().getDestAddr()); } catch (PersistenceException e) { this.logger.severe(""PersistenceException when freeSmsSetFailured(SmsSet smsSet) - adding delivery receipt"" + e.getMessage(), e); } } } finally { SmsSetCache.getInstance().removeSmsSet(lock); } } } } "	0	0	0	0	1	0
"@Override public Object execute(DeploymentForm form, BindException errors) throws Exception { if (errors.hasErrors()) return new SimpleErrorView(errors);  ApiSimpleResponse response = new ApiSimpleResponse(); if (form.getFile() != null) { File modelFile = new File(form.getFile()); response.put(""deploymentId"", WorkflowManager.get().deployWorkflow(modelFile, getContainer())); } else { throw new Exception(""No process specified for deployment""); } return success(response); } "	0	0	0	0	1	0
"void save() throws OperationFailedException { if (resolvedPath == null) { throw ROOT_LOGGER.cantSaveWithoutFile(); } ROOT_LOGGER.tracef(""saving KeyStore to the file [%s]"", resolvedPath); try (FileOutputStream fos = new FileOutputStream(resolvedPath)) { keyStore.store(fos, resolvePassword()); synched = System.currentTimeMillis(); trackingKeyStore.setModified(false); } catch (Exception e) { throw ROOT_LOGGER.unableToCompleteOperation(e, e.getLocalizedMessage()); } } "	0	0	0	0	1	0
"@Override public void action(String[] args, MessageReceivedEvent event) throws ParseException, IOException {  if ( event.getMember().getRoles().contains(event.getGuild().getRolesByName(""Developer"", false).get(0)) || event.getMember().getRoles().contains(event.getGuild().getRolesByName(""Admin"", false).get(0)) || event.getMember().getRoles().contains(event.getGuild().getRolesByName(""Owner"", false).get(0)) ) {  event.getTextChannel().sendMessage("":warning:  Bot will restart now..."").queue();  if (System.getProperty(""os.name"").toLowerCase().contains(""linux"")) Runtime.getRuntime().exec(""screen python restart.py""); else Runtime.getRuntime().exec(""wincmd.exe -restart"");  System.exit(0);  } else { EmbedBuilder eb = new EmbedBuilder() .setColor(Color.RED) .setDescription("":warning:  Sorry, "" + event.getAuthor().getAsMention() + "", you don't have the permission to use this command! \nOne of these roles required: "" + ""Owner, Admin, Developer"");  event.getTextChannel().sendMessage(eb.build()).queue(); }  } "	0	0	0	0	1	0
private boolean jj_3R_132() { if (jj_scan_token(COLON)) return true; return false; } 	0	0	0	0	1	0
private boolean jj_3R_136() { if (jj_3R_104()) return true; return false; } 	0	0	0	0	1	0
private boolean jj_3R_124() { if (jj_scan_token(BREAK)) return true; return false; } 	0	0	0	0	1	0
"public static AuditRowKey build(Object sourceId, Object destId) { Date date = new Date(); String prefix = sourceId + "":"" + destId; return new AuditRowKey(RowKeyHelper.buildMinor(prefix, dateFormat.format(date))); } "	0	0	0	0	1	0
"public JSONObject toJson() { try { JSONObject json = new JSONObject(); json.put(""data"", this.getAuditCommon().toJson()); String type = this.getAuditCommon().getType(); if (type.equals(OntologyRepository.TYPE_PROPERTY)) { json.put(AuditProperty.PROPERTY_AUDIT, this.getAuditProperty().toJson()); } else if (type.equals(OntologyRepository.TYPE_RELATIONSHIP)) { json.put(AuditRelationship.RELATIONSHIP_AUDIT, this.getAuditRelationship().toJson()); } else { json.put(AuditEntity.ENTITY_AUDIT, this.getAuditEntity().toJson()); } String[] rowKey = RowKeyHelper.splitOnMinorFieldSeperator(getRowKey().toString()); json.put(""graphVertexID"", rowKey[0]); json.put(""dateTime"", AuditRowKey.dateFormat.parse(rowKey[1]).getTime()); return json; } catch (Exception e) { throw new RuntimeException(e); } } "	0	0	0	0	1	0
public boolean add(final T dependency) { mFoundDependencies.add(dependency); return (mMode == Mode.FIRST_MATCHING_DEPENDENCY); } 	0	0	0	0	1	0
@Override public Map<SignatureObject, List<PrivateKeyType>> getRequiredAuthorities( Map<SignatureObject, List<PrivateKeyType>> requiredAuthoritiesBase) { return mergeRequiredAuthorities(requiredAuthoritiesBase, this.getOwner(), PrivateKeyType.ACTIVE); } 	0	0	0	0	1	0
@Override public int read() throws IOException { if (this.curPos < this.size) { long prev = stream.getFilePointer();  stream.seek(this.offset + this.curPos); byte result = this.stream.readByte(); curPos++;  this.stream.seek(prev);  return result; } else { return -1; } } 	0	0	0	0	1	0
"@ValueConverter(rule = ""PlusMinus"") public IValueConverter<OperationKind> PlusMinus() { return new IValueConverter<OperationKind>() { public OperationKind toValue(String string, INode node) {  return OperationKind.get(string); }  public String toString(OperationKind value) { return value.getName(); } }; } "	0	0	0	0	1	0
"@ValueConverter(rule = ""AccessDirection"") public IValueConverter<AccessType> AccessDirection() { return new IValueConverter<AccessType>() { public AccessType toValue(String string, INode node) {  return AccessType.get(string); }  public String toString(AccessType value) { return value.getName(); } }; } "	0	0	0	0	1	0
"@ValueConverter(rule = ""AccessCategory"") public IValueConverter<AccessCategory> AccessCategory() { return new IValueConverter<AccessCategory>() { public AccessCategory toValue(String string, INode node) {  return AccessCategory.get(string); }  public String toString(AccessCategory value) { return value.getName(); } }; } "	0	0	0	0	1	0
public void clearDataProcessor() { this.dataProcessor = null; } 	0	0	0	0	1	0
@Override public void onThresholdPositionChange(final int position) { // we need to call it on UI thread because renderer is drawing on background thread if (getActivity() != null) { getActivity().runOnUiThread(new Runnable() { @Override public void run() { setThreshold(position); } }); } } 	0	0	0	0	1	0
"private static boolean isABlockLine(String line) { return line.trim().startsWith(""@""); } "	0	0	0	0	1	0
public boolean isStatewide() { return this.isStatewide; } 	0	0	0	0	1	0
protected Request.Listener[] getListeners() { return new Request.Listener[0]; } 	0	0	0	0	1	0
private void assertMetricType(String expectedType, Metric metric) { assertMetricType(expectedType, Helper.convertMetric(metric, TimeUnit.MILLISECONDS, TimeUnit.MILLISECONDS)); } 	0	0	0	0	1	0
"@Test public void testInstallCoreTypes() { extensionManager.installCoreTypes(); assertEquals(3, extensionManager.list().size()); // get ext. and assert a couple properties Extension ext = extensionManager.get(""http://rs.tdwg.org/dwc/terms/Occurrence""); assertEquals(169, ext.getProperties().size()); // confirm the extension attributes are read correctly from the XML (not the JSON) assertEquals(""Darwin Core Occurrence"", ext.getTitle()); assertEquals(""Occurrence"", ext.getName()); assertTrue(ext.getDescription().startsWith(""The category"")); assertEquals(""http://rs.tdwg.org/dwc/terms/index.htm#Occurrence"", ext.getLink().toString()); assertNotNull(ext.getIssued()); assertEquals(""http://rs.tdwg.org/dwc/terms/Taxon http://rs.tdwg.org/dwc/terms/Event"", ext.getSubject()); assertNull(ext.getUrl()); assertFalse(ext.isLatest()); // this isn't persisted, only populated when deserialising JSON list from registry } "	0	0	0	0	1	0
public static void editNoteTitle(String oldTitle, String newTitle) { List<String> titles = getNoteTitlesList(); int index = titles.indexOf(oldTitle); String content = getCurrentNoteContent(); if (index > -1) titles.set(index, newTitle); setNoteTitlesList(titles); prefs.edit().putString(newTitle, content).remove(oldTitle).apply(); setCurrentNote(newTitle); } 	0	0	0	0	1	0
"@Test public void testReflexiveRuleCreation() { GraknGraph graph = snbGraph.graph(); Rule rule = Utility.createReflexiveRule( graph.getRelationType(""knows""), graph.getRoleType(""acquaintance1"").getLabel(), graph.getRoleType(""acquaintance2"").getLabel(), graph); InferenceRule R = new InferenceRule(rule, graph);  Pattern body = and(graph.graql().parsePatterns(""(acquaintance1: $x, acquaintance2: $y) isa knows;"")); Pattern head = and(graph.graql().parsePatterns(""(acquaintance1: $x, acquaintance2: $x) isa knows;""));  InferenceRule R2 = new InferenceRule(graph.admin().getMetaRuleInference().putRule(body, head), graph); assertTrue(R.getHead().equals(R2.getHead())); assertTrue(R.getBody().equals(R2.getBody())); } "	0	0	0	0	1	0
"@Test public void testTwoRulesOnlyDifferingByVarNamesAreEquivalent() { GraknGraph graph = testGraph.graph(); RuleType inferenceRule = graph.admin().getMetaRuleInference();  Pattern body1 = Graql.and(graph.graql().parsePatterns( ""(geo-entity: $x, entity-location: $y) isa is-located-in;"" + ""(geo-entity: $y, entity-location: $z) isa is-located-in;"")); Pattern head1 = Graql.and(graph.graql().parsePatterns(""(geo-entity: $x, entity-location: $z) isa is-located-in;"")); Rule rule1 = inferenceRule.putRule(body1, head1);  Pattern body2 = Graql.and(graph.graql().parsePatterns( ""(geo-entity: $l1, entity-location: $l2) isa is-located-in;"" + ""(geo-entity: $l2, entity-location: $l3) isa is-located-in;"")); Pattern head2 = Graql.and(graph.graql().parsePatterns(""(geo-entity: $l1, entity-location: $l3) isa is-located-in;"")); Rule rule2 = inferenceRule.putRule(body2, head2);  InferenceRule R1 = new InferenceRule(rule1, graph); InferenceRule R2 = new InferenceRule(rule2, graph); assertEquals(R1, R2); } "	0	0	0	0	1	0
"protected static void redirect(String action, boolean permanent, Object... args) { try { Map<String, Object> newArgs = new HashMap<String, Object>(args.length); Method actionMethod = (Method) ActionInvoker.getActionMethod(action)[1]; String[] names = (String[]) actionMethod.getDeclaringClass().getDeclaredField(""$"" + actionMethod.getName() + LVEnhancer.computeMethodHash(actionMethod.getParameterTypes())).get(null); for (int i = 0; i < names.length && i < args.length; i++) { Annotation[] annotations = actionMethod.getParameterAnnotations()[i]; boolean isDefault = false; try { Method defaultMethod = actionMethod.getDeclaringClass().getDeclaredMethod(actionMethod.getName() + ""$default$"" + (i + 1)); // Patch for scala defaults if (!Modifier.isStatic(actionMethod.getModifiers()) && actionMethod.getDeclaringClass().getSimpleName().endsWith(""$"")) { Object instance = actionMethod.getDeclaringClass().getDeclaredField(""MODULE$"").get(null); if (defaultMethod.invoke(instance).equals(args[i])) { isDefault = true; } } } catch (NoSuchMethodException e) { // }  // Bind the argument  if (isDefault) { newArgs.put(names[i], new Default(args[i])); } else { Unbinder.unBind(newArgs, args[i], names[i], annotations); }  } try {  ActionDefinition actionDefinition = Router.reverse(action, newArgs);  if (_currentReverse.get() != null) { ActionDefinition currentActionDefinition = _currentReverse.get(); currentActionDefinition.action = actionDefinition.action; currentActionDefinition.url = actionDefinition.url; currentActionDefinition.method = actionDefinition.method; currentActionDefinition.star = actionDefinition.star; currentActionDefinition.args = actionDefinition.args;  _currentReverse.remove(); } else { throw new Redirect(actionDefinition.toString(), permanent); } } catch (NoRouteFoundException e) { StackTraceElement element = PlayException.getInterestingStrackTraceElement(e); if (element != null) { throw new NoRouteFoundException(action, newArgs, Play.classes.getApplicationClass(element.getClassName()), element.getLineNumber()); } else { throw e; } } } catch (Exception e) { if (e instanceof Redirect) { throw (Redirect) e; } if (e instanceof PlayException) { throw (PlayException) e; } throw new UnexpectedException(e); } } "	0	0	0	0	1	0
@Override public void onError(Throwable t) { errors.add(t); } 	0	0	0	0	1	0
public static boolean fileExists(String path) throws IOException { if (StringUtils.isBlank(path)) return false; Path filePath = Paths.get(path); // the second part is to handle the case of file path identical in case-insensitive mode, but different in case-sensitive mode, such as windows return Files.exists(filePath) && (new File(filePath.toString())).getCanonicalPath().equals(filePath.toAbsolutePath().toString()); } 	0	0	0	0	1	0
"@Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException { scannedClasspath.append(file.toString().replace(""\\"", ""/"")).append("" ""); return super.visitFile(file, attrs); } "	0	0	0	0	1	0
@Test public void isLocalExecutionSupported() { assertTrue(new CommonPigShim().isLocalExecutionSupported()); } 	0	0	0	0	1	0
"protected void updateViews(View view, Output output) { if (output.getSettings() != null) { Log.v(Constants.LOG_TAG, ""BaseResizableDialog.updateViews""); Settings settings = output.getSettings();  // sensor if (output.getSettings().getSensor().getSensorType() != FlutterProtocol.InputTypes.NOT_SET) { ImageView sensorImage = (ImageView) view.findViewById(R.id.image_sensor); sensorImage.setImageResource(settings.getSensor().getGreenImageId()); TextView sensorText = (TextView) view.findViewById(R.id.text_sensor_link); sensorText.setText(R.string.linked_sensor); TextView sensorType = (TextView) view.findViewById(R.id.text_sensor_type); sensorType.setText(getString(settings.getSensor().getSensorTypeId())); Button saveButton = (Button) view.findViewById(R.id.button_save_settings); saveButton.setEnabled(true); }  // relationship ImageView relationshipImage = (ImageView) view.findViewById(R.id.image_relationship); relationshipImage.setImageResource(settings.getRelationship().getGreenImageIdMd()); TextView relationshipText = (TextView) view.findViewById(R.id.text_relationship); relationshipText.setText(R.string.relationship); TextView relationshipType = (TextView) view.findViewById(R.id.text_relationship_type); relationshipType.setText(settings.getRelationship().getRelationshipTypeId()); } } "	0	0	0	0	1	0
@Override public void onNewData(long timestamp, double data) { mLatestData = data; mScheduler.unschedule(mRefreshRunnable); mScheduler.schedule(Delay.millis(MINIMUM_REFRESH_RATE_MILLIS), mRefreshRunnable); mConsumer.addData(timestamp, data);  // Some sensors may forget to set to connected, but if we're getting data, //   we're probably connected.  (This actually happened in a version of the //   Vernier implementation.) if (mMostRecentStatus != SensorStatusListener.STATUS_CONNECTED) { listener.onSourceStatus(getId(), SensorStatusListener.STATUS_CONNECTED); } } 	0	0	0	0	1	0
"public void waitForWindowToBeClosed(final WindowLocator windowLocator, int taskCompletionTimeout) { ConditionCheck check = new ConditionCheck() { @Override public boolean eval() { if (windowLocator instanceof TitleLocator) { String requestedTitle = ((TitleLocator) windowLocator).getTitle(); String[] titles = getAllWindowTitles(); for (String title : titles) { if (title.equalsIgnoreCase(requestedTitle)) { return false; } } return true; } else { throw ServiceUtil.newUnsupportedLocatorException(windowLocator); } } }; boolean windowIsGone; if (taskCompletionTimeout > -1) { windowIsGone = retryUntilTrueOrTimeout(check, taskCompletionTimeout); } else { windowIsGone = retryUntilTimeout(check); } if (!windowIsGone) { throw new PerformanceFailure(""Window not closed within timeout""); } } "	0	0	0	0	1	0
"protected MessageTag getMessageTag() throws IOException { // Has it been resolved already if (tag != null) { return tag; }  String tagId = (String)job.getProperties().get(""tagId""); if (StringUtils.isBlank(tagId)) { return null; }  tag = messageTagService.findTag(tagId); return tag; } "	0	0	0	0	1	0
public List<Request> getPendingRequestsByApprover() { String apprId = loginService.getLoggedOnEmployee().getId(); return requestRepo.getRequestsByStatusCodeAndApprover(RequestStatusCodes.PEND, apprId); } 	0	0	0	0	1	0
"@Test public void test_getOutputResultAsString_AfterRunningWithValidFilter_NoNullValue() throws InterruptedException { ProcessBuilder ping_process = new ProcessBuilder(""ping"", ""-r"", ""10.10.10.10""); ProcessScanner process_scanner = new ProcessScanner(ping_process, """"); process_scanner.start(); process_scanner.join(5000);  Assert.assertNotNull(process_scanner.getOutputResultAsString()); } "	0	0	0	0	1	0
"private void selectAndUploadImage() { FileChooser fileChooser = new FileChooser(); fileChooser.setInitialDirectory(MainApp.defaultHome); File selectedFile = fileChooser.showOpenDialog(null); if (selectedFile != null) { UploadImageService uploadImageTask = new UploadImageService(content, selectedFile.getAbsoluteFile()); uploadImageTask.setOnFailed( t -> { Alert alert = new CustomAlert(AlertType.ERROR); alert.setTitle(Configuration.bundle.getString(""ui.dialog.upload.img.failed.title"")); alert.setHeaderText(Configuration.bundle.getString(""ui.dialog.upload.img.failed.header"")); alert.setContentText(Configuration.bundle.getString(""ui.dialog.upload.img.failed.text"")); alert.showAndWait(); }); uploadImageTask.setOnSucceeded(t -> { link.setText(uploadImageTask.getValue()); }); uploadImageTask.start(); } } "	0	0	0	0	1	0
boolean hasUserBeenLoggedInBefore() { return truthy(credStorage.getUser()); } 	0	0	0	0	1	0
"private void loadCache() throws IOException { final List<Exception> parseErrors = new LinkedList<>();  if (storeMonitorQueries == false) throw new IOException(""MonitorQuery storage is disabled."");  match(new MatchAllDocsQuery(), new MonitorQueryCollector() { @Override public void doMatch(int doc, String queryId, BytesRef hash) { mqDV.get(doc, serializedMQ); MonitorQuery mq = MonitorQuery.deserialize(serializedMQ); try { for (CacheEntry ce : decomposeQuery(mq)) { queries.put(ce.hash, ce); } } catch (Exception e) { parseErrors.add(e); } } });  if (parseErrors.size() != 0) throw new IOException(""Error populating cache - some queries couldn't be parsed:"" + parseErrors);} "	0	0	0	0	1	0
public void manage(Architecture arch, String version) { try { List<URL> urls = getDrivers(arch, version); List<URL> urlFilter = filter(arch, urls);  for (URL url : urls) { String export = urlFilter.contains(url) ? getExportParameter() : null; new Downloader().download(url, version, export); } } catch (RuntimeException re) { throw re; } catch (Exception e) { throw new RuntimeException(e); } } 	0	0	0	0	1	0
"@Override public void render() {   super.render();  String info;    // Render navigation bar //info = ""New game | Help | Universe | Planet | Land/Launch | Leave/Enter | Zoom |""; //ui.drawStringAbsolute(info, Color.BLACK, 2, 2, batch); //ui.drawStringAbsolute(info, Color.ORANGE, 0, 2, batch);  // TODO-LD28 info = gameState.statusBarText();  statusBar.clear(); statusBar.writeLine(info);  //        K.obsolete.ui.drawStringAbsolute(info, Color.BLACK, 2, 768); //        K.obsolete.ui.drawStringAbsolute(info, Color.WHITE, 0, 768);  if (K.settings.isLogFPS()) { String fps = String.valueOf(Gdx.graphics.getFramesPerSecond()); info = ""FPS: "" + fps; statusBar.writeLine(info); }  if (K.game.gamePaused()) { info = ""GAME PAUSED - PRESS P TO RESUME""; statusBar.writeLine(info); }  //        K.obsolete.ui.drawStringAbsolute(game.pinCode, Color.DARK_GRAY, 1024 - 48, 0, batch);  } "	0	0	0	0	1	0
"public void setPlayerClass(String className) { data.set(uuid + "".class"", className); } "	0	0	0	0	1	0
"@EventHandler public void onFactionsMembershipChange(EventFactionsMembershipChange e) { // If a player's class should not be reset to default on faction change. if(!config.getBoolean(""soulbound.setPlayerClassToDefaultOnFactionChange"")) { return; }  Locale locale = NinCore.get().getLocalizationManager().getDefaultMinecraftLocale().toLocale();  if(e.getMPlayer().isOnline()) { locale = NinOnlinePlayer.fromPlayer(e.getMPlayer().getPlayer()).getLocale(); }  ResourceBundle messages = ResourceBundle.getBundle(""lang.errorMsgs"", locale);  final MessageFormat formatter = new MessageFormat(""""); formatter.setLocale(locale);   Object[] messageArguments = {PlayerClass.getDefaultPlayerClass().getName()}; formatter.applyPattern(messages.getString(""eventError.playerClassChangeDueToFactionChange"")); String finalMessage = formatter.format(messageArguments);   List<EventFactionsMembershipChange.MembershipChangeReason> invalidReasons = new ArrayList<>();  invalidReasons.add(EventFactionsMembershipChange.MembershipChangeReason.LEADER); invalidReasons.add(EventFactionsMembershipChange.MembershipChangeReason.RANK);  // If player doesn't have bypass permission & it's a valid reason. if(!invalidReasons.contains(e.getReason()) && !e.getMPlayer().getPlayer().hasPermission(""kingdomkits.bypass.factionmembershipchangeevent"")) { // Change player's player class to default player class. COfflinePlayer ninOfflinePlayer = new COfflinePlayer(e.getMPlayer().getUuid()); ninOfflinePlayer.moveToDefaultPlayerClass();  if(ninOfflinePlayer.toOfflinePlayer().isOnline()) { ninOfflinePlayer.toOfflinePlayer().getPlayer().sendMessage(finalMessage); } } } "	0	0	0	0	1	0
"public Set<ValidationError> validateValidationObject(AbstractValidationObject validationObject) { final Set<ValidationError> errors = new HashSet<>(); final Set<ConstraintViolation<AbstractValidationObject>> violations = validate(validationObject); for (final ConstraintViolation<AbstractValidationObject> violation : violations) { ValidationErrorId id = new ValidationErrorId(); id.setError(violation.getMessageTemplate()); PayloadType payloadType = payloadTypeDao.get(""fffff"");//TODO id.setPayloadType(payloadType); ValidationError error = validationErrorDao.get(id); if (error == null) { LOGGER.error(""Unknown message template discovered: "" + violation.getMessageTemplate()); } else { errors.add(error); } }  return errors; } "	0	0	0	0	1	0
public List<Integer> getSpreadCells() { return Collections.unmodifiableList(spreadCells); } 	0	0	0	0	1	0
@Deprecated public JaversBuilder registerEntity(Class<?> entityClass, String idPropertyName){ return registerEntity(entityClass, idPropertyName, Collections.EMPTY_LIST); } 	0	0	0	0	1	0
"private void addEvent(Event newEvent, EventsCallback connectionCallback) { events.put(newEvent.getClientId(), newEvent); eventIdToClientId.put(newEvent.getId(), newEvent.getClientId()); logger.log(""EventsSupervisor: added Event (id="" + newEvent.getId() + "", cid="" + newEvent.getClientId() + "", streamId="" + newEvent.getStreamId() + "")""); if (connectionCallback != null) { connectionCallback.onEventsSuccess(""EventsSupervisor: Event added"", newEvent, null, null); } } "	0	0	0	0	1	0
"private void printWelcome() { System.out.println(); System.out.println(""Welcome to the World of Zuul!""); System.out.println(""World of Zuul is a new, incredibly boring adventure game.""); System.out.println(""Type '"" + CommandWord.HELP + ""' if you need help.""); System.out.println(); System.out.println(player.getCurrentRoom().getLongDescription()); } "	0	0	0	0	1	0
protected final java.lang.Boolean getAuth_preemptive() { java.lang.Boolean preemptive = (java.lang.Boolean) getInputParameter(AUTH_PREEMPTIVE_INPUT_PARAMETER); return preemptive != null ? preemptive : Boolean.TRUE; } 	0	0	0	0	1	0
private void checkResultIsPresent(final Map<String, Object> restResult) { checkResult(restResult, OK_STATUS); } 	0	0	0	0	1	0
@Override public Iterator< E > iterator() { return new BidirectionalIterator< E >( getOwner(), getOpposingPropertyName(), getTarget() ); } 	0	0	0	0	1	0
"private void setGraphBounds() { Date centerDate = leakMapKeys.get(currentKeyIndex); long centerMillis = centerDate.getTime(); int halfRange = PreferenceHelper.getLeakReportGraphDomainSize(getContext())/2; long range = 1000 * halfRange;  long domainLowerBound = centerMillis - range; long domainUpperBound = centerMillis + range; plot.setDomainBoundaries(domainLowerBound, domainUpperBound, BoundaryMode.FIXED); plot.setDomainStep(StepMode.INCREMENT_BY_VAL, (halfRange/5) * 1000);  DateFormat dateFormat = new SimpleDateFormat(""MMMM d, yyyy"", Locale.CANADA); String lowerBoundDate = dateFormat.format(new Date(domainLowerBound)); String upperBoundDate = dateFormat.format(new Date(domainUpperBound)); if (lowerBoundDate.equals(upperBoundDate)) { graphTitleText.setText(lowerBoundDate); } else { graphTitleText.setText(lowerBoundDate + "" - "" + upperBoundDate); }  int rangeUpperBound = 0;  int searchIndex = currentKeyIndex; while(searchIndex >=0 && leakMapKeys.get(searchIndex).getTime() >= domainLowerBound) { int[] summary = leakMap.get(leakMapKeys.get(searchIndex)); for (int i : summary) { if (i > rangeUpperBound) { rangeUpperBound = i; } } searchIndex--; }  searchIndex = currentKeyIndex; while(searchIndex < leakMapKeys.size() && leakMapKeys.get(searchIndex).getTime() <= domainUpperBound) { int[] summary = leakMap.get(leakMapKeys.get(searchIndex)); for (int i : summary) { if (i > rangeUpperBound) { rangeUpperBound = i; } } searchIndex++; }  rangeUpperBound++; rangeUpperBound = rangeUpperBound + rangeUpperBound % 2; plot.setRangeBoundaries(0, rangeUpperBound, BoundaryMode.FIXED);  plot.redraw(); } "	0	0	0	0	1	0
public void setModel(int position, Model model) { super.set(position, toItem(model)); mItems.set(position - getFastAdapter().getItemCount(getOrder()), model); } 	0	0	0	0	1	0
public int getGlobalPosition(int position) { return position + getFastAdapter().getItemCount(getOrder()); } 	0	0	0	0	1	0
public void set(int position, Item item) { if (mUseIdDistributor) { IdDistributor.checkId(item); } mItems.set(position - getFastAdapter().getItemCount(getOrder()), item); mapPossibleType(item); getFastAdapter().notifyAdapterItemChanged(position); } 	0	0	0	0	1	0
@Override public Connection getConnection() { if (this.connection == null || this.connection.getLocalState() == EndpointState.CLOSED || this.connection.getRemoteState() == EndpointState.CLOSED) { this.connection = this.getReactor().connection(this.connectionHandler); }  return this.connection; } 	0	0	0	0	1	0
@Override public Stream<? extends Node> children() throws UncheckedIOException { try { return nioAccess.list(path).map(this::childPathToNode); } catch (IOException e) { throw new UncheckedIOException(e); } } 	0	0	0	0	1	0
"private void sendSchedule() { Helpers.showProgressDialog(getActivity(), getResources().getString(R.string.getting_schedule)); request = new HttpRequest(getActivity()); request.setOnReadyStateChangeListener(this); request.setOnErrorListener(this); request.open(""POST"", String.format(""%sdoctor/schedule/"", AppGlobals.BASE_URL)); request.setRequestHeader(""Authorization"", ""Token "" + AppGlobals.getStringFromSharedPreferences(AppGlobals.KEY_TOKEN)); JSONObject jsonObject = new JSONObject(); try { jsonObject.put(""date"", currentDate); JSONArray jsonArray = new JSONArray(); ArrayList<JSONObject> jsonObjectJSONArray = scheduleList.get(currentDate); for (JSONObject singleJson : jsonObjectJSONArray) { if (singleJson.getInt(""taken"") == 1) { JSONObject time = new JSONObject(); time.put(""start_time"", singleJson.get(""start_time"").toString().trim()); time.put(""end_time"", singleJson.get(""end_time"").toString().trim()); jsonArray.put(time); } } if (jsonArray.length() > 0) { jsonObject.put(""time_slots"", jsonArray); Log.i(""DATA"", jsonObject.toString()); request.send(jsonObject.toString()); } } catch (JSONException e) { e.printStackTrace(); } } "	0	0	0	0	1	0
public void setPrefixes( final String... prefixes) { if ( prefixes != null) format.getHeader().createEntry( PREFIXES, prefixes); } 	0	0	0	0	1	0
@Override protected void constructStreams() {  this.serial = new Serial(34, 17); this.vision = new Vision(serial.getDataStream());  this.hoodMaster = new Talon(RobotMap.HOOD_MOTOR_A, CANTalon.FeedbackDevice.CtreMagEncoder_Absolute); Events.setOutputVoltage(-12f, +12f).actOn(this.hoodMaster); Events.resetPosition(0.0).actOn(this.hoodMaster);  this.topHopperMotor = new Talon(RobotMap.TOP_HOPPER_MOTOR); this.spinHopperMotor = new Talon(RobotMap.SPIN_HOPPER_MOTOR, this.topHopperMotor); this.intakeController = new Talon(RobotMap.INTAKE_MOTOR); this.shooterMotor1 = new Talon(RobotMap.SHOOTER_MOTOR_1); this.shooterMotor2 = new Talon(RobotMap.SHOOTER_MOTOR_2, this.shooterMotor1); // Drivetrain Motors this.leftLeader = new Talon(RobotMap.FRONT_LEFT); this.leftFollower = new Talon(RobotMap.BACK_LEFT, this.leftLeader); this.rightLeader = new Talon(RobotMap.BACK_RIGHT); this.rightFollower = new Talon(RobotMap.FRONT_RIGHT, this.rightLeader); // Gamepads this.driverPad = new WpiXboxGamepad(RobotMap.DRIVER_PAD); this.operatorPad = new WpiXboxGamepad(RobotMap.OP_PAD); } 	0	0	0	0	1	0
public void startRTC(String channel) { if (mIsCalling) { return; } mIsCalling = true;  setAudioParams(); mAudioCapture.getSrcPin().disconnect(false); if (mAudioCapture.isRecordingState()) { mAudioCapture.stop(); }  //join rtc mRTCClient.joinChannel(channel);  //connect rtc audio mRTCClient.getRTCIO().getLocalAudioSrcPin().connect(mAudioResampleFilter.getSinkPin()); mRTCClient.getRTCIO().getRemoteAudioSrcPin().connect(mAudioMixer.getSinkPin(mIdxAudioRemote)); } 	0	0	0	0	1	0
"@Test public void testSwaggerDocsIndexWithToken() { ResponseEntity<String> response = get(""/index.html"", String.class); assertThat(response.getStatusCode()).as(""swagger docs index.html response code"").isEqualTo(HttpStatus.OK); assertThat(response.getBody().length()).as(""swagger index.html length"").isPositive(); assertThat(response.getBody()).as(""swagger index.html example path"").contains(""/connectors/{id}""); } "	0	0	0	0	1	0
"@RequestMapping( value = ""/api/org/{shortName}/approve"", method = RequestMethod.GET, produces = ""application/json;charset=UTF-8"") public ResponseEntity<Organization> approveOrganization(HttpServletRequest request, @PathVariable String shortName) throws McBasicRestException { // Admin Authentication if (!AccessControlUtil.hasAccessToOrg(this.adminOrg) || !AccessControlUtil.hasPermission(this.adminPermission)) { throw new McBasicRestException(HttpStatus.FORBIDDEN, MCIdRegConstants.MISSING_RIGHTS, request.getServletPath()); } Organization org = this.organizationService.getOrganizationByShortName(shortName); if (org == null) { throw new McBasicRestException(HttpStatus.NOT_FOUND, MCIdRegConstants.ORG_NOT_FOUND, request.getServletPath()); } if (org.getApproved()) { throw new McBasicRestException(HttpStatus.BAD_REQUEST, MCIdRegConstants.ORG_ALREADY_APPROVED, request.getServletPath()); } // Create the Identity Provider for the org if (org.getOidcWellKnownUrl() != null && !org.getOidcWellKnownUrl().isEmpty() && org.getOidcClientName() != null && !org.getOidcClientName().isEmpty() && org.getOidcClientSecret() != null && !org.getOidcClientSecret().isEmpty()) { keycloakAU.init(KeycloakAdminUtil.BROKER_INSTANCE); try { keycloakAU.createIdentityProvider(org.getShortName().toLowerCase(), org.getOidcWellKnownUrl(), org.getOidcClientName(), org.getOidcClientSecret()); } catch (MalformedURLException e) { throw new McBasicRestException(HttpStatus.BAD_REQUEST, MCIdRegConstants.INVALID_IDP_URL, request.getServletPath()); } catch (IOException e) { throw new McBasicRestException(HttpStatus.BAD_REQUEST, MCIdRegConstants.COULD_NOT_GET_DATA_FROM_IDP, request.getServletPath()); } } // Enabled the organization and save it org.setApproved(true); // Create password to be send to admin String newPassword = PasswordUtil.generatePassword(); // Create admin user in the keycloak instance handling users keycloakAU.init(KeycloakAdminUtil.USER_INSTANCE); try { keycloakAU.createUser(org.getShortName(), newPassword, org.getShortName(), ""ADMIN"", org.getEmail(), org.getShortName(), true, KeycloakAdminUtil.ADMIN_USER); } catch (IOException e) { throw new McBasicRestException(HttpStatus.INTERNAL_SERVER_ERROR, MCIdRegConstants.ERROR_CREATING_ADMIN_KC_USER, request.getServletPath()); } Organization approvedOrg =  this.organizationService.saveOrganization(org); // TODO: send email to organization with the happy news and the admin password approvedOrg.setPassword(newPassword); return new ResponseEntity<Organization>(approvedOrg, HttpStatus.OK); } "	0	0	0	0	1	0
"@Override public synchronized void flush() { if (modified) { try { PrintStream pout = new PrintStream(StorageProvider.openOutput(""ccre_storage_"" + name)); try { for (String key : data) { if (key.contains(""="")) { Logger.warning(""Invalid key ignored during save: "" + key + "" - saving under backup key.""); data.put(UniqueIds.global.nextHexId(""badkey-"" + System.currentTimeMillis() + ""-"" + key.hashCode()), key); } else { String value = data.get(key); pout.println(key + ""="" + value); } } } finally { pout.close(); } } catch (IOException ex) { Logger.warning(""Error writing storage: "" + name, ex); } modified = false; } } "	0	0	0	0	1	0
@Override public <T> T invokeAny(Collection<? extends Callable<T>> tasks) throws InterruptedException, ExecutionException { return this.delegate.invokeAny(tasks); } 	0	0	0	0	1	0
"private void setAttribute(ThreadContext context, String key, String val) { Element element = (Element) node;  String uri = null; int colonIndex = key.indexOf("":""); if (colonIndex > 0) { String prefix = key.substring(0, colonIndex); if (prefix.equals(""xml"")) { uri = ""http://www.w3.org/XML/1998/namespace""; } else if (prefix.equals(""xmlns"")) { uri = ""http://www.w3.org/2000/xmlns/""; } else { uri = findNamespaceHref(context, prefix); } }  if (uri != null) { element.setAttributeNS(uri, key, val); } else { element.setAttribute(key, val); } clearXpathContext(node); } "	0	0	0	0	1	0
"@Override public void handle(Page page, TemplateContext componentContext, TemplateContext globalContext) { Degree degree = degree(page); String pageUrl = pageForComponent(page.getSite(), CurricularCourseComponent.class).map(Page::getAddress).orElse(null); ExecutionYear selectedYear = selectedYear(globalContext.getRequestContext(), degree); globalContext.put(""courseGroups"", courseGroups(degree, selectedYear, pageUrl)); globalContext.put(""allCurricularCourses"", allCurricularCourses(courseGroups(degree, selectedYear, pageUrl).collect(toSet())));  globalContext.put(""coursesByCurricularSemester"", coursesByCurricularSemester(degree, selectedYear, pageUrl)); globalContext.put(""years"", degree.getDegreeCurricularPlansExecutionYears()); globalContext.put(""selectedYear"", selectedYear); } "	0	0	0	0	1	0
@Before public void setUp() throws InterruptedException { connMsg = new ConnectMessage(); connMsg.setProcotolVersion((byte) 0x03);  m_session = new DummyChannel();  //sleep to let the messaging batch processor to process the initEvent Thread.sleep(300); MemoryStorageService memStorage = new MemoryStorageService(); m_storageService = memStorage; m_sessionStore = memStorage; //m_storageService.initStore();  Map<String, String> users = new HashMap<String, String>(); users.put(TEST_USER, TEST_PWD); m_mockAuthenticator = new MockAuthenticator(users);  subscriptions = new SubscriptionsStore(); subscriptions.init(new MemoryStorageService()); m_processor = new ProtocolProcessor(); m_processor.init(subscriptions, m_storageService, m_sessionStore, m_mockAuthenticator); } 	0	0	0	0	1	0
"default Constraint inverseChanneling(IntVar[] vars1, IntVar[] vars2, int offset1, int offset2) { if (vars1.length != vars2.length) throw new UnsupportedOperationException(Arrays.toString(vars1) + "" and "" + Arrays.toString(vars2) + "" should have same size""); boolean allEnum = true; for (int i = 0; i < vars1.length && allEnum; i++) { if (!(vars1[i].hasEnumeratedDomain() && vars2[i].hasEnumeratedDomain())) { allEnum = false; } } Propagator ip = allEnum ? new PropInverseChannelAC(vars1, vars2, offset1, offset2) : new PropInverseChannelBC(vars1, vars2, offset1, offset2); return new Constraint(""InverseChanneling"", ArrayUtils.append( allDifferent(vars1, """").getPropagators(), allDifferent(vars2, """").getPropagators(), new Propagator[]{ip} )); } "	0	0	0	0	1	0
"protected void update(final JsonObject resource, final UserInfos user, final Handler<Either<String, JsonObject>> handler) { StringBuilder query = new StringBuilder(); JsonArray values = new JsonArray();  for (String attr : resource.getFieldNames()) { query.append(attr).append("" = ?, ""); values.add(resource.getValue(attr)); }  String updateQuery = ""UPDATE "" + resourceTable + "" SET "" + query.toString() + ""modified = NOW() "" + ""WHERE id = ? RETURNING *""; sql.prepared(updateQuery, values.add(parseId(resource.getString(""id""))), validRowsResultHandler(handler)); } "	0	0	0	0	1	0
"@Test public void test () throws Exception { final JCodeModel generator = new JCodeModel ();  final AbstractJClass jtype = generator.ref (String.class); final AbstractJClass aspect = generator.directClass (ValueHolderInstanceImpl.class.getSimpleName ()); final AbstractJClass abstractFieldClass = generator.ref (AbstractFieldInstanceImpl.class).narrow (jtype); final JAnonymousClass basefield = generator.anonymousClass (abstractFieldClass); final JFieldVar apectfield = basefield.field (JMod.PRIVATE, aspect, ""valueHolder""); final JMethod initfield = basefield.method (JMod.PROTECTED, generator.VOID, ""initialize""); initfield.body ().assign (apectfield, JExpr._new (aspect).arg (jtype.dotclass ()).arg (JExpr._null ()));  final JDefinedClass cls = generator._class (JMod.PUBLIC, ""TestClass1Impl""); final JMethod m = cls.method (JMod.PUBLIC, generator.VOID, ""foo""); m.body ().decl (abstractFieldClass, ""_testField"", JExpr._new (basefield));  CodeModelTestsHelper.parseCodeModel (generator); } "	0	0	0	0	1	0
"public void setAvalCount(int availability){ tvAttendeesMaxCount.setText(String.format(""%d avl./%d"", availability, event.getAttendeesMaxCount())); } "	0	0	0	0	1	0
"@Override public void writeTuples(final ReadableTable tuples) throws IOException { Objects.requireNonNull(escapedColumnNames); List<Type> columnTypes = tuples.getSchema().getColumnTypes(); /* Add a record. */ for (int i = 0; i < tuples.numTuples(); ++i) { /* Add the record separator (except first record) and open the record with '{'. */ if (haveWritten) { print("",{""); } else { haveWritten = true; print('{'); }  /* * Write each column of the record. Primitive types can be output as-is; {@link DateTime} objects are quoted and * serialized in ISO8601 format, and {@link String} objects are quoted and escaped for JSON. */ for (int j = 0; j < tuples.numColumns(); ++j) { if (j > 0) { print(','); } print('""'); print(escapedColumnNames.get(j)); print(""\"":""); switch (columnTypes.get(j)) { case BOOLEAN_TYPE: print(tuples.getBoolean(j, i)); break; case DOUBLE_TYPE: print(tuples.getDouble(j, i)); break; case FLOAT_TYPE: print(tuples.getFloat(j, i)); break; case INT_TYPE: print(tuples.getInt(j, i)); break; case LONG_TYPE: print(tuples.getLong(j, i)); break; case DATETIME_TYPE: print('""'); print(DateTimeUtils.dateTimeToISO8601(tuples.getDateTime(j, i))); print('""'); break; case STRING_TYPE: print('""'); print(StringEscapeUtils.escapeJson(tuples.getString(j, i))); print('""'); break; case BLOB_TYPE: print('""'); print(""Byte buffer, cannot be written to json yet!""); print('""'); break; } } print('}'); } } "	0	0	0	0	1	0
"@SuppressWarnings({ ""unchecked"", ""rawtypes"" }) public void execute(ChirdlPrintJobRunnable runnable) { if (shutdown) { return; }  String printerName = runnable.getPrinterName(); if (printerName == null || printerName.trim().length() == 0) { printerName = NO_PRINTER_NAME; }  // Find the printer name specific thread executor or create one if it can't be found. ThreadPoolExecutor printerJobExecutor = printerNameToThreadExecutorMap.get(printerName); if (printerJobExecutor == null) { synchronized(printerNameToThreadExecutorMap) { int poolSize = getThreadPoolSize(); // Create the thread queue/pool BlockingQueue poolQueue = new PriorityBlockingQueue(poolSize); printerJobExecutor = new ChirdlUtilPrinterThreadPoolExecutor(poolSize, poolSize, 1L, TimeUnit.MILLISECONDS, poolQueue); printerJobExecutor.allowCoreThreadTimeOut(true); printerNameToThreadExecutorMap.put(printerName, printerJobExecutor); } }  String pdfLocation = runnable.getPDFFileLocation(); try { // Add the runnable to the pool so it can eventually get executed. printerJobExecutor.execute(runnable); log.info(""Added the following to the Printer Thread Manager's execution queue - printer: "" + printerName + "" - file: "" + pdfLocation); } catch (RejectedExecutionException ree) { log.error(""Printer Thread Manager no longer accepting new threads.  This thread has been rejected - printer: "" + printerName + "" - file: "" + pdfLocation, ree); } catch (Exception e) { log.error(""Error executing Printer Thread Manager thread - printer: "" + printerName + "" - file: "" + pdfLocation, e); } } "	0	0	0	0	1	0
"public static void main(String[] args) throws IOException { Action action = new TopAction(); action.execute(new String[]{""fetch-post 10 /tmp""}); } "	0	0	0	0	1	0
"@Override public void execute(String[] args) { CommandLine cmdLine = parse(args);  // Show the version number if (cmdLine.hasOption(""version"")) { System.out.println(""Current version: "" + DcardCrawler.VERSION); System.exit(0); }  if (cmdLine.getArgs().length < 1) printHelpThenExit(""unrecognized command"");  // 根據指令產生對應 command 物件 String input = cmdLine.getArgs()[0]; Action action = null; if (input.equals(FetchPostAction.ACTION_NAME)) action = new FetchPostAction(); else if (input.equals(FetchImageAction.ACTION_NAME)) action = new FetchImageAction();  if (action == null) printHelpThenExit(""unrecognized command"");  // 執行指令 action.execute(args); } "	0	0	0	0	1	0
"public void testEnumProperties() { final TestEnum enumValue = TestEnum.APPLE; final String enumAsString = TestEnum.APPLE.toString(); TestModel model = new TestModel() .setFirstName(""A"") .setLastName(""Z"") .setBirthday(System.currentTimeMillis()) .setSomeEnum(enumValue);  ContentValues setValues = model.getSetValues(); assertEquals(enumAsString, setValues.get(TestModel.SOME_ENUM.getName()));  database.persist(model);  SquidCursor<TestModel> cursor = database.query(TestModel.class, Query.select()); assertEquals(1, cursor.getCount()); assertTrue(cursor.moveToFirst()); assertEquals(enumAsString, cursor.get(TestModel.SOME_ENUM));  TestModel fromDatabase = new TestModel(cursor); assertEquals(enumValue, fromDatabase.getSomeEnum()); } "	0	0	0	0	1	0
@Override public boolean onClose() { Intent searchIntent = new Intent(Intent.ACTION_SEARCH); searchIntent.putExtra(SearchManager.QUERY, (String) null);  handleIntent(searchIntent);  return false; } 	0	0	0	0	1	0
private void waitRendering(long dTime) { mRenderingState.sysTime = System.currentTimeMillis(); mRenderingState.inWaitingState = true; if (mUpdateInNewThread) { try { synchronized (drawTask) { if (dTime == INDEFINITE_TIME) { drawTask.wait(); } else { drawTask.wait(dTime); } sendEmptyMessage(NOTIFY_RENDERING); } } catch (InterruptedException e) { e.printStackTrace(); } } else { if (dTime == INDEFINITE_TIME) { removeMessages(NOTIFY_RENDERING); removeMessages(UPDATE); } else { removeMessages(NOTIFY_RENDERING); removeMessages(UPDATE); sendEmptyMessageDelayed(NOTIFY_RENDERING, dTime); } } } 	0	0	0	0	1	0
"@Override public void run() { CompilerContainer compilerContainer = new CompilerContainer(); compilerContainer.addConfig(""installFile"", input); compilerContainer.addComponent(CompilerData.class, compilerData);  CompilerConfig compilerConfig = compilerContainer.getComponent(CompilerConfig.class); PropertyManager propertyManager = compilerContainer.getComponent(PropertyManager.class);  if (properties != null) { Enumeration<Object> e = properties.keys(); while (e.hasMoreElements()) { String name = (String) e.nextElement(); String value = properties.getProperty(name); value = fixPathString(value); propertyManager.addProperty(name, value); } }  if (inheritAll) { Enumeration<String> e = projectProps.keys(); while (e.hasMoreElements()) { String name = e.nextElement(); String value = projectProps.get(name); value = fixPathString(value); propertyManager.addProperty(name, value); } }  try { compilerConfig.executeCompiler(); } catch (Exception e) { throw new BuildException(e); }  } "	0	0	0	0	1	0
public Class<?> getType() { return node.getType(); } 	0	0	0	0	1	0
"public void accept(PdfReader reader, PdfDocumentDescriptor descriptor) { descriptor.setMaxGoToActionDepth(new ITextOutlineHandler(reader, """").getMaxGoToActionDepth()); } "	0	0	0	0	1	0
"public static boolean createBond(BluetoothDevice device) { if (isSdk19()) doCreateBond(device); return callMethod(device, ""createBond""); } "	0	0	0	0	1	0
@Override public void onDestroyActionMode(ActionMode mode) { Intent intent = new Intent(ACTION_CLEAR_SELECTION); LocalBroadcastManager.getInstance(mContext).sendBroadcast(intent); } 	0	0	0	0	1	0
"@Test public void actualTestByComparingOverallActivationSpreadConf() throws IOException, ClassNotFoundException, NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, InterruptedException, AbstractBedspreadException { KnowledgeBase kb = this.loadMinimalKB(1); Set<Node> resourceOriginSet = this.extractTrivialOriginSet();  String testPropertyFile = ""configTestPolicentricDefaultWeighConservative.properties""; System.getProperties().setProperty(PropertyUtil.CONFIG_FILE_LOCATION_LABEL, testPropertyFile); PropertyUtilNoSingleton.getInstance();  PolicentricSemanticSpread pool = new HT13PolicentricSemanticSpread(resourceOriginSet, kb); String fileNamePolicentric = this.getFlushFileName(""actualTestByComparingOverallActivationSpreadConf_Policentric""); Writer outPolicentric = new FileWriter(fileNamePolicentric); pool.startProcessingAndFlushData(outPolicentric);  List<AbstractSemanticSpread> list = pool.getCompletedSemanticSpreadList(); String semantiSpreadClassName = PropertyUtil.getInstance().getProperty(PropertyUtil.SEMANTIC_SPREAD_LABEL); boolean condition = ( semantiSpreadClassName != null ); for (AbstractSemanticSpread ss : list) { String originID = ss.getOrigin().getResource().getResourceID(); String fileName = this.getFlushFileName(""actualTestByComparingOverallActivationSpreadConf_""+originID); Writer out = new FileWriter(fileName); ss.flushData(out);  condition = condition && (ss.getClass().getName().equalsIgnoreCase(semantiSpreadClassName));  String loggerMsg = ""Exploration Leaves from: "" + ss.getOrigin().getResource().getResourceID() + "" --> ""; double score=0; for (Node n : ss.getExplorationLeaves()) { score += n.getScore(); loggerMsg = loggerMsg + n.getResource().getResourceID() + "", ""; } logger.info(loggerMsg); boolean equals = Math.abs(score - INITIAL_STIMULUS) <= STIMULUS_DELTA; condition = condition && equals; //			System.out.println(score); }  System.getProperties().remove(PropertyUtil.CONFIG_FILE_LOCATION_LABEL); Assert.assertTrue(condition); } "	0	0	0	0	1	0
@Override public int hashCode() { return Objects.hash(body, headers, statusCode, reasonPhrase); } 	0	0	0	0	1	0
"public CommandWithLateArgs getCommandWithLateArgs(String command){ if(command.replace("" "", """")=="""") getCommandWithArgs(""help"",""""); // default: help int i = command.indexOf(' '); if(i==-1) return getCommandWithLateArgs(command, """"); else return getCommandWithLateArgs(command.substring(0, i), command.substring(i+1)); } "	0	0	0	0	1	0
@Test public void testCreateCellBlocked() { Cell myCell = new Cell(5); assertTrue( myCell.isBlocked() ); } 	0	0	0	0	1	0
public int getLastClickPos(){ if (selectedPositions.size() == 0) { return -1; } return selectedPositions.get(selectedPositions.size() - 1); } 	0	0	0	0	1	0
@Override protected void detailsMode(T entity) { if (mainEditLayout == null) { mainEditLayout = new DefaultVerticalLayout(); mainEditLayout.setStyleName(DynamoConstants.CSS_CLASS_HALFSCREEN); }  if (getFormOptions().isComplexDetailsMode() && entity != null && entity.getId() != null) { // complex tabbed layout if (tabContainerLayout == null) { buildDetailsTabLayout(entity); } else { tabLayout.setEntity(entity); tabLayout.reload(); } if (selectedDetailLayout == null) { mainEditLayout.addComponent(tabContainerLayout); } else { mainEditLayout.replaceComponent(selectedDetailLayout, tabContainerLayout); } selectedDetailLayout = tabContainerLayout; } else { FormOptions options = new FormOptions(); options.setOpenInViewMode(getFormOptions().isOpenInViewMode()); options.setScreenMode(ScreenMode.VERTICAL); options.setAttributeGroupMode(getFormOptions().getAttributeGroupMode()); options.setPreserveSelectedTab(getFormOptions().isPreserveSelectedTab()); options.setShowNextButton(getFormOptions().isShowNextButton()); options.setShowPrevButton(getFormOptions().isShowPrevButton()); options.setPlaceButtonBarAtTop(getFormOptions().isPlaceButtonBarAtTop()); // set the form options for the detail form if (getFormOptions().isEditAllowed()) { // editing in form must be possible options.setEditAllowed(true); } else { // read-only mode options.setOpenInViewMode(true).setEditAllowed(false); }  if (options.isOpenInViewMode() || !isEditAllowed()) { options.setShowBackButton(true); }  // simple edit form if (editForm == null) { buildEditForm(entity, options); } else { editForm.setViewMode(getFormOptions().isOpenInViewMode()); editForm.setEntity(entity); editForm.resetTab(); } if (selectedDetailLayout == null) { mainEditLayout.addComponent(editForm); } else { mainEditLayout.replaceComponent(selectedDetailLayout, editForm); } selectedDetailLayout = editForm; }  checkButtonState(getSelectedItem()); afterEntitySelected(editForm, entity); setCompositionRoot(mainEditLayout); } 	0	0	0	0	1	0
"public void showUpdateDialog() { String cacheId = null; Waypoint oldPoint = null;  if (getIntent().hasExtra(PARAM_CACHE_ID)) { cacheId = getIntent().getStringExtra(PARAM_CACHE_ID);  } else if (LocusUtils.isIntentPointTools(getIntent())) { try { Waypoint p = LocusUtils.handleIntentPointTools(this, getIntent());  if (p != null && p.getGeocachingData() != null) { cacheId = p.gcData.getCacheID(); oldPoint = p; } } catch (RequiredVersionMissingException e) { Timber.e(e, e.getMessage()); } } else if (getIntent().hasExtra(PARAM_SIMPLE_CACHE_ID)) { cacheId = getIntent().getStringExtra(PARAM_SIMPLE_CACHE_ID);  String repeatUpdate = mPrefs.getString( PrefConstants.DOWNLOADING_FULL_CACHE_DATE_ON_SHOW, PrefConstants.DOWNLOADING_FULL_CACHE_DATE_ON_SHOW__UPDATE_NEVER);  if (PrefConstants.DOWNLOADING_FULL_CACHE_DATE_ON_SHOW__UPDATE_NEVER.equals(repeatUpdate)) { Timber.i(""Updating simple cache on dispaying is not allowed!""); onUpdateFinished(null); return; } }  if (cacheId == null || PARAM_CACHE_ID__DO_NOTHING.equals(cacheId)) { Timber.e(""cacheId/simpleCacheId not found""); onUpdateFinished(null); return; }  Timber.i(""source: update;"" + cacheId);  boolean updateLogs = AppConstants.UPDATE_WITH_LOGS_COMPONENT.equals(getIntent().getComponent().getClassName());  AnalyticsUtil.actionUpdate(oldPoint != null, updateLogs);  UpdateDialogFragment.newInstance(cacheId, oldPoint, updateLogs).show(getFragmentManager(), UpdateDialogFragment.FRAGMENT_TAG); } "	0	0	0	0	1	0
"@SuppressWarnings(""deprecation"") @Override public void execute(Unit unit, Action action) { List<Parameter> parameters = action.getParameters(); String text = parameters.get(0).toProlog(); String name = (unit == null) ? """" : BwapiUtility.getName(unit);  IDraw draw = new CustomDrawUnit(this.game, unit, text); this.game.addDraw(name, draw); if (!text.isEmpty()) { this.game.toggleDraw(name); } } "	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") @Override public int run(ItemCollection adocumentContext, ItemCollection documentActivity) throws PluginException {  documentContext = adocumentContext;  ItemCollection evalItemCollection =ResultPlugin.evaluateWorkflowResult(documentActivity, adocumentContext);  // test if comment is defined in model if (evalItemCollection != null) { // test ignore if (""true"".equals(evalItemCollection.getItemValueString(""comment.ignore""))) { logger.fine(""ignore=true - skipping txtCommentLog""); return Plugin.PLUGIN_OK; } }  // create new Comment data - important: property names in lower // case List<Map<String, Object>> vCommentList = documentContext.getItemValue(""txtCommentLog""); Map<String, Object> log = new HashMap<String, Object>(); Date dt = Calendar.getInstance().getTime(); String remoteUser = this.getEjbSessionContext().getCallerPrincipal().getName(); log.put(""datcomment"", dt); log.put(""nameditor"", remoteUser);  // test for fixed comment String sComment = null; if (evalItemCollection != null && evalItemCollection.hasItem(""comment"")) { sComment = evalItemCollection.getItemValueString(""comment""); } else { sComment = documentContext.getItemValueString(""txtComment""); // clear comment documentContext.replaceItemValue(""txtComment"", """"); // save last comment documentContext.replaceItemValue(""txtLastComment"", sComment); } if (sComment != null && !sComment.isEmpty()) { log.put(""txtcomment"", sComment); vCommentList.add(0, log); documentContext.replaceItemValue(""txtcommentLog"", vCommentList); }  return Plugin.PLUGIN_OK;  } "	0	0	0	0	1	0
"private static String getCriterions(String alias,Class<?> entityClass, Map<String, Filter> filterMap,Map<String, Object> variableMap, String delimiter, String suffix) { StringJoiner joiner = new StringJoiner(delimiter); Map<String, Field> fieldMap = SearchQuery.CacheFields.getCachedFields(entityClass); for(Map.Entry<String, Filter> filterEntry: filterMap.entrySet()) { String key = alias + ""."" + filterEntry.getKey(); String variable = key.replace(""."", suffix);  String criterion = RESTRICTIONS.filter( key, filterEntry.getValue().getOperator(), filterEntry.getValue().getValue(), variable);  if(criterion != null) { if(!Validations.isEmptyOrNull(filterEntry.getValue().getValue())) { Field field = fieldMap.get(filterEntry.getKey()); variableMap.put(variable, getValue( filterEntry.getValue().getOperator(), filterEntry.getValue().getValue(), field )); } joiner.add("" "" + criterion +"" ""); } } return joiner.toString(); } "	0	0	0	0	1	0
@Override public void render(float delta) { Gdx.gl.glClearColor(0, 0, 0.8f, 1); Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);  //Update the camera once per refresh. camera.update(); game.batch.setProjectionMatrix(camera.combined);  game.batch.begin(); game.font.draw(game.batch, key_prompt_text, Gdx.graphics.getWidth()/2 - layout1.width/2, Gdx.graphics.getHeight()/2 + layout1.height/2+50 ); game.batch.draw(avTex,0,0); game.batch.end(); } 	0	0	0	0	1	0
public void updateAnalysisCache() { plugin.getInfoManager().refreshAnalysis(); } 	0	0	0	0	1	0
"public static Map<String, Object> redeem(String code, String clientId, String redirectUri, String clientSecret){ List<BasicNameValuePair> params = buildParams(clientId, redirectUri, clientSecret); params.add(new BasicNameValuePair(""code"",code)); params.add(new BasicNameValuePair(""grant_type"",""authorization_code"")); return redeemNow(params); } "	0	0	0	0	1	0
@Override public Object visitPutIntoCmd(HyperTalkParser.PutIntoCmdContext ctx) { return new StatPutCmd((Expression) visit(ctx.expression()), Preposition.INTO, (Container) visit(ctx.container())); } 	0	0	0	0	1	0
"@Test public void shouldFilterLabResultWithTextValueAndMinRangeFilter() throws Exception { String reportName = ""LabOrder report filter by min range and text value"";  CsvReport report = fetchCsvReport(reportName, ""2016-01-01"", ""2021-01-16"");  assertEquals(11, report.columnsCount()); assertEquals(reportName, report.getReportName()); assertEquals(2, report.rowsCount()); assertEquals(""PatientIdentifier2 PatientName2 familyname2 26 04-Mar-1991 M 18-Mar-2017 Hg 8   Normal"", report.getRowAsString(1, "" "")); assertEquals(""PatientIdentifier3 PatientName3 familyname3 28 04-Mar-1991 M 16-Jan-2020 BP_Level high   Normal"", report.getRowAsString(2, "" "")); } "	0	0	0	0	1	0
@Override public final LuaValue execute(FunctionWrapper function, LuaValue arg1, LuaValue arg2, LuaValue arg3) { if (++function.info.calledClosure > THRESHOLD) { ProtoInfo info = function.info; FunctionExecutor executor = info.executor = info.loader.include(info); return executor.execute(function); }  function.info.calledClosure++; Prototype prototype = function.prototype; int size = prototype.maxstacksize;  LuaValue[] stack = new LuaValue[size]; System.arraycopy(NILS, 0, stack, 0, size);  switch (prototype.numparams) { default: stack[0] = arg1; stack[1] = arg2; stack[2] = arg3; return LuaVM.execute(function, stack, NONE, 0).arg1(); case 2: stack[0] = arg1; stack[1] = arg2; return LuaVM.execute(function, stack, arg3, 0).arg1(); case 1: stack[0] = arg1; return LuaVM.execute(function, stack, prototype.is_vararg != 0 ? varargsOf(arg2, arg3) : NONE, 0).arg1(); case 0: return LuaVM.execute(function, stack, prototype.is_vararg != 0 ? varargsOf(arg1, arg2, arg3) : NONE, 0).arg1(); } } 	0	0	0	0	1	0
public void setNontransactionalWrite(boolean nontransactionalWrite) { ec.setProperty(PropertyNames.PROPERTY_NONTX_WRITE, nontransactionalWrite); } 	0	0	0	0	1	0
public void setNontransactionalRead(boolean nontransactionalRead) { ec.setProperty(PropertyNames.PROPERTY_NONTX_READ, nontransactionalRead); } 	0	0	0	0	1	0
private boolean isStoRIEnclosed(StoRI stori, VirtualFSInterface vfs) throws NamespaceException {  return getStoRICanonicalPath(stori).startsWith(vfs.getRootPath()); } 	0	0	0	0	1	0
"@Override public List<Object> getExecutionJobStats(ExecutableFlow exFlow, String jobId, int attempt) throws ExecutorManagerException { Pair<ExecutionReference, ExecutableFlow> pair = executorLoader.fetchActiveFlowByExecId(exFlow.getExecutionId()); if (pair == null) { return executorLoader.fetchAttachments(exFlow.getExecutionId(), jobId, attempt); }  Pair<String, String> jobIdParam = new Pair<String, String>(""jobId"", jobId); Pair<String, String> attemptParam = new Pair<String, String>(""attempt"", String.valueOf(attempt));  @SuppressWarnings(""unchecked"") Map<String, Object> result = callExecutorServer(pair.getFirst(), ConnectorParams.ATTACHMENTS_ACTION, jobIdParam, attemptParam);  @SuppressWarnings(""unchecked"") List<Object> jobStats = (List<Object>) result.get(""attachments"");  return jobStats; } "	0	0	0	0	1	0
public void drawStellarObj(float bglight, float weathereff, EVector pos, double Mag) {  GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE);  if(Mag > StellarSky.getManager().mag_Limit) return; if(VecMath.getZ(pos)<0) return;  float size=0.6f; float alpha=Optics.getAlphaFromMagnitude(Mag, bglight) - (((1-weathereff)/1)*20f);  pos.set(VecMath.normalize(pos));  difm.set(CrossUtil.cross((IEVector)pos, (IEVector)new EVector(0.0,0.0,1.0))); if(Spmath.getD(VecMath.size2(difm)) < 0.01) difm.set(CrossUtil.cross((IEVector)pos, (IEVector)new EVector(0.0,1.0,0.0))); difm.set(VecMath.normalize(difm)); difm2.set((IValRef)CrossUtil.cross((IEVector)difm, (IEVector)pos)); pos.set(VecMath.mult(99.0, pos));  difm.set(VecMath.mult(size, difm)); difm2.set(VecMath.mult(size, difm2));  tessellator1.startDrawingQuads();  tessellator1.setColorRGBA_F(1.0f, 1.0f, 1.0f, alpha);  tessellator1.addVertexWithUV(VecMath.getX(pos)+VecMath.getX(difm), VecMath.getY(pos)+VecMath.getY(difm), VecMath.getZ(pos)+VecMath.getZ(difm),0.0,0.0); tessellator1.addVertexWithUV(VecMath.getX(pos)+VecMath.getX(difm2), VecMath.getY(pos)+VecMath.getY(difm2), VecMath.getZ(pos)+VecMath.getZ(difm2),1.0,0.0); tessellator1.addVertexWithUV(VecMath.getX(pos)-VecMath.getX(difm), VecMath.getY(pos)-VecMath.getY(difm), VecMath.getZ(pos)-VecMath.getZ(difm),1.0,1.0); tessellator1.addVertexWithUV(VecMath.getX(pos)-VecMath.getX(difm2), VecMath.getY(pos)-VecMath.getY(difm2), VecMath.getZ(pos)-VecMath.getZ(difm2),0.0,1.0);  tessellator1.draw(); } 	0	0	0	0	1	0
@Nullable private static ResolvedCall<?> getResolvedCall(@NotNull JetQualifiedExpression element, @NotNull IFile file) { JetExpression call = element.getSelectorExpression(); if (!(call instanceof JetCallExpression)) return null;  JetCallExpression jetCallExpression = (JetCallExpression) call;  IJavaProject javaProject = JavaCore.create(file.getProject()); BindingContext bindingContext = KotlinAnalyzer.analyzeOnlyOneFileCompletely(javaProject, KotlinPsiManager.INSTANCE.getParsedFile(file));  return CallUtilPackage.getResolvedCall(jetCallExpression.getCalleeExpression(), bindingContext); } 	0	0	0	0	1	0
"public void addItem(UitleenViewModel uitleenViewModel){ try{ if(InputChecks(uitleenViewModel)){ //maak uitleenitem en voeg toe  int aantalDagen = uitleenViewModel.getAantalDagen(); HashMap<String, String> map = uitleenViewModel.getMap();  int KlantId = Integer.parseInt(map.get(""KLANTID"")); Klant klant = winkel.getKlant(KlantId);  SimpleDateFormat simpleDateFormat = new SimpleDateFormat(""yyyy/MM/dd"", Locale.FRANCE); Date datum = simpleDateFormat.parse(map.get(""BEGINDATUM""));  int TitelId = Integer.parseInt(map.get(""ITEMID"")); Titel titel = winkel.getTitel(TitelId);  item = new UitleningItem(0,datum,klant,true,titel,aantalDagen); uitlening.getItems().add(item);  //voeg toe aan bestellingstabel  bestellingModel.setBestellingLijst(uitlening.getItems()); uitleenAddPanel.updateBestelling();  totaalPrijs += item.getPrijs() * aantalDagen; uitleenAddPanel.getViewModel().setTotaalPrijs(totaalPrijs); uitleenAddPanel.updateTotaal();  uitleenAddPanel.disableKlantSelectie(); } } catch (Exception e) { e.printStackTrace(); JOptionPane.showMessageDialog(null, ""fout bij toevoeging""); } } "	0	0	0	0	1	0
public static List<String> getNetgroupNames() { return new LinkedList<String>(netgroupToUsersMap.keySet()); } 	0	0	0	0	1	0
public static void setFullSpan(Spannable text, CharacterStyle style) { text.setSpan(style, 0, text.length(), Spannable.SPAN_INCLUSIVE_INCLUSIVE); } 	0	0	0	0	1	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.comments); KamprUtils.trustAllHosts();  _postId = getIntent().getIntExtra(""post_id"", DEFAULT_POST_ID); _postTitle = getIntent().getStringExtra(""post_title""); _postName = getIntent().getStringExtra(""post_name""); _postCreatedAt = getIntent().getStringExtra(""post_created_at""); _postUserIcon = getBitmapFromByteArray();  _postTitleView = (TextView) findViewById(R.id.post_title); _postUsernameView = (TextView) findViewById(R.id.post_user_name); _postDateView = (TextView) findViewById(R.id.post_date); _postUserIconView = (ImageView) findViewById(R.id.post_user_icon);  _postTitleView.setText(_postTitle); _postUsernameView.setText(_postName); _postDateView.setText(_postCreatedAt); _postUserIconView.setImageBitmap(_postUserIcon);  _comments = getListView(); _comments.setVerticalScrollBarEnabled(false); _comments.setDivider(getResources().getDrawable(R.color.comment_item_divider)); _comments.setDividerHeight(1);  _dialog = ProgressDialog.show(CommentsActivity.this, """", ""Loading..."", true);  _handler = new CommentsHandler(this, _dialog, _comments, _listOfComments, _userIcons); _fetchCommentsThread = new Thread(new CommentsRunnable(this, _handler, _listOfComments, _userIcons, _postId)); _fetchCommentsThread.start(); } "	0	0	0	0	1	0
public Result sendResource(String resourceName) { return sendResource(resourceName, true); } 	0	0	0	0	1	0
public Result sendPath(Path path) { return sendPath(path, false); } 	0	0	0	0	1	0
public Result sendResource(String resourceName, ClassLoader classLoader) { return sendResource(resourceName, classLoader, true); } 	0	0	0	0	1	0
"public void setup(ASMDataTable dataTable) { MaterialCompatLoader materialCompatLoader = new MaterialCompatLoader(); materialCompatLoader.loadCompat(dataTable);  nameMapping.putAll(SaveLoader.getSavedObject(""material_part_ids_"" + mod.getID(), MaterialPartSave.class).getMaterialMappings()); nameMapping.values().forEach(id -> { if (id > nextId) { nextId = id + 1; } }); materialCreativeTab = new CreativeTabCarousel(""materials."" + mod.getID()); setupItem(); try { MISSING_MATERIAL_PART = new MissingMaterialPart(this); } catch (MaterialException e) { mod.getLogger().fatal(""Failed to Create Missing Material Part, THIS IS BAD""); } if (mod.getSubBlockSystem() != null) { ProvidedParts providedParts = new ProvidedParts(this.mod, this, this.mod.getSubBlockSystem()); providedParts.initPartsAndTypes(); materialCompatLoader.doCompat(this); } else { mod.getLogger().fatal(""Failed to find subBlockSystem""); }  } "	0	0	0	0	1	0
public Blade devMode(boolean devMode) { this.environment(ENV_KEY_DEV_MODE, devMode); if (!devMode) { this.openMonitor(false); } return this; } 	0	0	0	0	1	0
"@Test public void testGrobidModelsEnum_StandardModel_affiliation() throws Exception {  GrobidModel model = GrobidModels.AFFIILIATON_ADDRESS;  assertThat(model.getFolderName(), is(""affiliation-address"")); assertThat(model.getModelName(), is(""affiliation-address"")); assertThat(model.getTemplateName(), is(""affiliation-address.template"")); assertThat(model.getModelPath(), endsWith(""/grobid/grobid-core/models/affiliation-address/model.wapiti"")); } "	0	0	0	0	1	0
"@Test public void testGrobidModelsEnum_StandardModel_name() throws Exception {  GrobidModel model = GrobidModels.HEADER;  assertThat(model.getFolderName(), is(""header"")); assertThat(model.getModelName(), is(""header"")); assertThat(model.getTemplateName(), is(""header.template"")); assertThat(model.getModelPath(), endsWith(""/grobid/grobid-core/models/header/model.wapiti"")); } "	0	0	0	0	1	0
@Override public String parse(String input) { return LocalDateTime.parse(input, formatter).toString(); } 	0	0	0	0	1	0
@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false;  BuildProblemDataWithCustomComparator that = (BuildProblemDataWithCustomComparator) o;  if (getBuildProblemData().getType().equals(ErrorData.ARTIFACT_DEPENDENCY_ERROR_TYPE)) return getBuildProblemData().getType().equals(that.getBuildProblemData().getType()); else return getBuildProblemData().equals(that.getBuildProblemData()); } 	0	0	0	0	1	0
@Override public void onClick(View v) { if (v.getId() == R.id.iv_gravatar) { RepositoryIssue issue = (RepositoryIssue) v.getTag(); Intent intent = IntentUtils.getUserActivityIntent(mContext, issue.getUser()); if (intent != null) { mContext.startActivity(intent); } } } 	0	0	0	0	1	0
private void addLinkedAsset(LinkedAsset linkedAsset) throws ModelOperationException { if(linkedAssets.add(linkedAsset)) { assets.add(linkedAsset); List<Asset> moduleDependencies = getModuleDependencies(linkedAsset);  if (linkedAsset instanceof SourceModule) { addSourceModule((SourceModule) linkedAsset); }  for(Asset asset : moduleDependencies) { ensureDependantAssetIsInScope(linkedAsset, asset); if(asset instanceof SourceModule){ addSourceModule((SourceModule)asset); } else if (asset instanceof LinkedAsset) { addLinkedAsset((LinkedAsset) asset); } assets.add(asset); }  } } 	0	0	0	0	1	0
"public <T> void validate(T instance, EntityType<T> et, boolean skipLazy) { Objects.requireNonNull(instance, ErrorUtils.constructNPXMessage(""instance"")); Objects.requireNonNull(et, ErrorUtils.constructNPXMessage(""et""));  final Object id = EntityPropertiesUtils.getPrimaryKey(instance, et); for (Attribute<T, ?> att : et.getDeclaredAttributes()) { if (skipLazy && att.getFetchType() == FetchType.LAZY) { continue; } final Object value = EntityPropertiesUtils.getAttributeValue(att, instance); validate(id, att, value); } } "	0	0	0	0	1	0
private void fireEvictCache() { if (canEvict.compareAndSet(true, false)) { try { final ExecutionService executionService = nodeEngine.getExecutionService(); executionService.execute(NEAR_CACHE_EXECUTOR_NAME, new Runnable() { public void run() { try { TreeSet<CacheRecord> records = new TreeSet<CacheRecord>(selectedComparator); records.addAll(cache.values()); int evictSize = cache.size() * EVICTION_PERCENTAGE / HUNDRED_PERCENT; int i = 0; for (CacheRecord record : records) { cache.remove(record.key); updateSizeEstimator(-calculateCost(record)); if (++i > evictSize) { break; } } } finally { canEvict.set(true); }  if (cache.size() >= maxSize && canEvict.compareAndSet(true, false)) { try { executionService.execute(NEAR_CACHE_EXECUTOR_NAME, this); } catch (RejectedExecutionException e) { canEvict.set(true); } } } }); } catch (RejectedExecutionException e) { canEvict.set(true); } catch (Exception e) { throw ExceptionUtil.rethrow(e); } } } 	0	0	0	0	1	0
"@Override protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException { if(Boolean.getBoolean(ENABLE_BEFORE_PARENT_CLASSLOADER) == false) { return super.loadClass(name, resolve); } synchronized (getClassLoadingLock(name)) { // First, check if the class has already been loaded Class<?> c = findLoadedClass(name); if(c != null) { return c; } try { c = findClass(name); logger.finest(String.format(""Found Locally: %s - %s"", name, c.getName())); } catch(ClassNotFoundException e) { logger.finest(String.format(""Not Found Locally - Looking in Parent: %s"", name)); return parent.loadClass(name); } if (resolve) { resolveClass(c); } return c; } } "	0	0	0	0	1	0
"@Test public void attemptToReadCloseStreamReturnsNull () throws IOException { @SuppressWarnings (""resource"") final BufferedReader aBufferedReader = new BufferedReader (new StringReader ("""")); aBufferedReader.close (); final CSVReader csvReader = new CSVReader (aBufferedReader); assertNull (csvReader.readNext ()); } "	0	0	0	0	1	0
"private void RemoveCraftingRecpies() { List<IRecipe> recipeList = CraftingManager.getInstance().getRecipeList();  InventoryCrafting inv = ItemUtility.simulateInventoryOf(with, width, height);  LogHelper.info(""Searching for recipes to remove for "" + modId + "":"" + itemName + "":"" + metadata + ""..."");  for(Iterator<IRecipe> recipeIterator = recipeList.iterator(); recipeIterator.hasNext(); ) { IRecipe recipe = recipeIterator.next(); if(!MatchesName(recipe.getRecipeOutput())) continue;  // Simulate the entire crafting operation on the recipe: if(with != null && with.length > 0 && !recipe.matches(inv, null)) continue;  // We matched something: LogHelper.info(""Removing "" + recipe.getRecipeOutput().getUnlocalizedName()); removedRecipes.add(new RemovedCraftingRecipe(recipe)); recipeIterator.remove(); } } "	0	0	0	0	1	0
"private void clear() { mNameField.setText(""""); mSupertypeField.setText(""""); mSubtypeField.setText(""""); mTextField.setText(""""); mArtistField.setText(""""); mFlavorField.setText(""""); mCollectorsNumberField.setText("""");  mCheckboxW.setChecked(false); mCheckboxU.setChecked(false); mCheckboxB.setChecked(false); mCheckboxR.setChecked(false); mCheckboxG.setChecked(false); mCheckboxL.setChecked(false); mColorSpinner.setSelection(2);  mCheckboxWIdentity.setChecked(false); mCheckboxUIdentity.setChecked(false); mCheckboxBIdentity.setChecked(false); mCheckboxRIdentity.setChecked(false); mCheckboxGIdentity.setChecked(false); mCheckboxLIdentity.setChecked(false); mColorSpinner.setSelection(0);  mTextSpinner.setSelection(0); mTypeSpinner.setSelection(0); mSetSpinner.setSelection(0);  mPowLogic.setSelection(0); mPowChoice.setSelection(0); mTouLogic.setSelection(0); mTouChoice.setSelection(0); mCmcLogic.setSelection(0); mCmcLogic.setSelection(1); /* CMC should default to < */ mCmcChoice.setSelection(0);  if (mSetCheckedIndices != null) { mSetCheckedIndices = new int[0]; } mSelectedFormat = -1; mRarityCheckedIndices = new int[0]; this.removeDialog(getFragmentManager());  checkDialogButtonColors(); } "	0	0	0	0	1	0
"@RequestMapping(method = RequestMethod.DELETE, value = ""/{id}"") @ResponseBody public Map<String, RestStatusDto> deleteSurveyInstanceById( @PathVariable(""id"") Long id) { final Map<String, RestStatusDto> response = new HashMap<String, RestStatusDto>(); SurveyInstance s = surveyInstanceDao.getByKey(id); RestStatusDto statusDto = new RestStatusDto(); statusDto.setStatus(""failed"");  // check if surveyInstance exists in the datastore if (s != null) { surveyInstanceDao.deleteSurveyInstance(s); statusDto.setStatus(""ok""); } response.put(""meta"", statusDto);  List<Long> ids = new ArrayList<Long>(); ids.add(id); SurveyUtils.notifyReportService(ids, ""invalidate"");  return response; } "	0	0	0	0	1	0
@Test void testCopy() { DiscreteFactor result = (DiscreteFactor)jpd.copy();  Assertions.assertArrayEquals(result.getScope(), jpd.getScope()); Assertions.assertArrayEquals(result.getCardinality(), jpd.getCardinality()); Assertions.assertArrayEquals(result.getValues(), jpd.getValues(), threshold); } 	0	0	0	0	1	0
private synchronized void onSongProgress() { final long atRevision = revision; final Integer duration = getPlayerDuration(); final boolean isSeekable = isSeekable(); final int position = getPlayerPosition(); for(final OnSongChangedListener listener: onSongChangedListeners) { handler.post(new Runnable() { @Override public void run() { if(revision == atRevision) { listener.onSongProgress(currentPlaying, position, duration, isSeekable); } } }); }  handler.post(new Runnable() { @Override public void run() { mRemoteControl.setPlaybackState(playerState.getRemoteControlClientPlayState()); } }); } 	0	0	0	0	1	0
"private GitCommand git(ProcessOutputStreamConsumer outputStreamConsumer, final File workingFolder) throws Exception { if (isSubmoduleFolder()) { return new GitCommand(getFingerprint(), new File(workingFolder.getPath()), GitMaterialConfig.DEFAULT_BRANCH, true); }  GitCommand gitCommand = new GitCommand(getFingerprint(), workingFolder, getBranch(), false); if (!isGitRepository(workingFolder) || isRepositoryChanged(gitCommand, workingFolder)) { if (LOG.isDebugEnabled()) { LOG.debug(""Invalid git working copy or repository changed. Delete folder: "" + workingFolder); } deleteFolder(workingFolder); } createParentFolderIfNotExist(workingFolder); if (!workingFolder.exists()) { TransactionSynchronizationManager txManager = new TransactionSynchronizationManager(); if (txManager.isActualTransactionActive()) { txManager.registerSynchronization(new TransactionSynchronizationAdapter() { @Override public void afterCompletion(int status) { if (status != TransactionSynchronization.STATUS_COMMITTED) { FileUtils.deleteQuietly(workingFolder); } } }); } int returnValue = gitCommand.cloneFrom(outputStreamConsumer, url.forCommandline()); bombIfFailedToRunCommandLine(returnValue, ""Failed to run git clone command""); } return gitCommand; } "	0	0	0	0	1	0
"private void export(final URI uri) { try (FcrepoResponse response = client.head(uri).perform()) { final List<URI> linkHeaders = response.getLinkHeaders(""type""); if (linkHeaders.contains(binaryURI)) { exportBinary(uri); } else if (linkHeaders.contains(containerURI)) { exportContainer(uri); } else { logger.error(""Resource is neither an LDP Container nor an LDP NonRDFSource: {}"", uri); } } catch (FcrepoOperationFailedException ex) { logger.warn(""Error retrieving content: {}"", ex.toString()); } catch (IOException ex) { logger.warn(""Error writing content: {}"", ex.toString()); } } "	0	0	0	0	1	0
"private Article createArticle(Element element) {  Article article = null;  try { Element linkElement = element.select(""h2 > a"").first(); String title = linkElement.text(); String link = linkElement.attr(""href""); String dateText = element.select("".date"").first().text(); String imageUrl = element.select("".image img"").first().attr(""src""); Date date = mDateFormat.parse(dateText); article = new Article(title, link, date.getTime()); article.setImageUrl(BASE_URL + imageUrl); } catch (Exception e) { Log.e(""E"", ""Error parsing article:""); e.printStackTrace(); }  return article;  } "	0	0	0	0	1	0
public void setBlock(String b, int x, int y){ getBlock(x, y).onBreak(this, x, y); setBlock(Blocks.instance().getBlock(b), x, y); } 	0	0	0	0	1	0
"@Override protected String doInBackground(Void... params) {  //JSON String laden String jsonStr = getJsonFromShcMaster(""a&ajax=executeswitchcommand&sid="" + elementId + ""&command=0"");  if(jsonStr != null) {  try {  JSONObject jsonObject = new JSONObject(jsonStr); if(jsonObject.getBoolean(""success"")) {  //Erfolgreich return """"; } else {  //Fehler return jsonObject.getString(""message""); }  } catch (JSONException e) {  return e.getLocalizedMessage(); } } return ""allgemeiner Fehler""; } "	0	0	0	0	1	0
"private Schedule getSchedule(int termId, int sectionId) { SQLiteDatabase db = getReadableDatabase(); Schedule schedule = null;  String query = ""SELECT * FROM "" + TABLE_SCHEDULES + "" WHERE "" + KEY_SCHEDULES_TERM_ID + "" = "" + termId + "" AND "" + KEY_SCHEDULES_SECTION_ID + "" = "" + sectionId + "" AND "" + KEY_SCHEDULES_ARCHIVED + "" = "" + inArchive; Cursor cursor = db.rawQuery(query, null);  if (cursor.moveToFirst()) { do { // gather information from the database String location = cursor.getString(2);  SparseArray<String> startTimes = new SparseArray<>(); SparseArray<String> endTimes   = new SparseArray<>();  int day = 0; for (int i = 3; i < 16; i += 2) { startTimes.put(day, cursor.getString(i)); endTimes.put(day, cursor.getString(i+1)); day++; }  // create the Schedule schedule = new Schedule(location, startTimes, endTimes); } while (cursor.moveToNext()); } cursor.close(); db.close(); return schedule; } "	0	0	0	0	1	0
"private String extractRegisterName() { try { String host = new URI(httpServletRequest.getRequestURL().toString()).getHost();  //hack for functional tests if (host.startsWith(""localhost"")) return ""ft_test_pkey""; else return host.replaceAll(""([^\\.]+)\\.(openregister)\\..*"", ""$1"");  } catch (Exception e) { throw new RuntimeException(e); } } "	0	0	0	0	1	0
public static int computeLightValue(World world, int par_x, int par_y, int par_z, EnumSkyBlock par1Enu) { if (par1Enu == EnumSkyBlock.Sky && world.pipe.canBlockSeeTheSky(par_x, par_y, par_z)) { return 15; } else { Block block = world.getBlock(par_x, par_y, par_z);  int currentLight = 0; if (par1Enu != EnumSkyBlock.Sky) { currentLight = (block == null ? 0 : getLightValueSomehow(block, world, par_x, par_y, par_z)); if ((currentLight > 0) && (currentLight <= 0xF)) { currentLight = (currentLight<<15) | (currentLight<<10) | (currentLight<<5) | currentLight; //copy vanilla brightness into each color component to make it white/grey if it is uncolored. } } int opacity = (block == null ? 0 : block.getLightOpacity(world, par_x, par_y, par_z));  if (opacity >= 15 && currentLight > 0) { opacity = 1; }  if (opacity < 1) { opacity = 1; }  if (opacity >= 15) { return 0; } else if (currentLight == 507375) { return currentLight; } else { for (int faceIndex = 0; faceIndex < 6; ++faceIndex) { int l1 = par_x + Facing.offsetsXForSide[faceIndex]; int i2 = par_y + Facing.offsetsYForSide[faceIndex]; int j2 = par_z + Facing.offsetsZForSide[faceIndex];  int neighborLight = world.pipe.getSavedLightValue(par1Enu, l1, i2, j2);  int ll = neighborLight & 0x0000F; int rl = neighborLight & 0x001E0; int gl = neighborLight & 0x03C00; int bl = neighborLight & 0x78000;  ll -= opacity & 0x0000F; /* TODO: Colored Opacity rl -= opacity & 0x001E0; gl -= opacity & 0x03C00; bl -= opacity & 0x78000; */ //Use vanilla light opacity for now rl =  Math.max(0, rl - (opacity << 5)); gl =  Math.max(0, gl - (opacity << 10)); bl =  Math.max(0, bl - (opacity << 15));  // For each component, retain greater of currentLight, (neighborLight - opacity) if (ll > (currentLight & 0x0000F)) { currentLight = (currentLight & 0x7BDE0) | ll; // 0x1E0 | 0x3C00 | 0x78000 } if (rl > (currentLight & 0x001E0)) { currentLight = (currentLight & 0x7BC0F) | rl; // 0x00F | 0x3C00 | 0x78000 } if (gl > (currentLight & 0x03C00)) { currentLight = (currentLight & 0x781EF) | gl; // 0x00F | 0x01E0 | 0x78000 } if (bl > (currentLight & 0x78000)) { currentLight = (currentLight & 0x03DEF) | bl; // 0x00F | 0x01E0 | 0x03C00 } } return currentLight; } } } 	0	0	0	0	1	0
public int elementEnabled(Locator type, String locator, int elementMatch) { return elementEnabled(new Element(type, locator, elementMatch), WAITFOR); } 	0	0	0	0	1	0
public int elementDisplayed(Locator type, String locator) { return elementDisplayed(new Element(type, locator), WAITFOR); } 	0	0	0	0	1	0
public int elementNotPresent(Locator type, String locator) { return elementNotPresent(new Element(type, locator), WAITFOR); } 	0	0	0	0	1	0
public int elementNotEnabled(Locator type, String locator) { return elementNotEnabled(new Element(type, locator), WAITFOR); } 	0	0	0	0	1	0
"@Override protected Integer doInBackground(String... params) { if (Helpers.isNetworkAvailable() && Helpers.isInternetWorking()) { MultiPartUtility http; String username = Helpers.getStringDataFromSharedPreference(AppGlobals.KEY_USERNAME); String password = Helpers.getStringDataFromSharedPreference(AppGlobals.KEY_PASSWORD); try { http = new MultiPartUtility(new URL(AppGlobals.POST_AD_URL + username + ""/"" + ""ads/post""), ""POST"", username, password); http.addFormField(""title"", params[0]); http.addFormField(""description"", params[1]); http.addFormField(""price"", params[2]); http.addFormField(""currency"", params[3]); http.addFormField(""category"", params[4]); int photo = 1; for (Uri item : imagesArray) { http.addFilePart((""photo"" + photo), new File(item.getPath())); System.out.println(item.getPath()); System.out.println(photo); photo++; } final byte[] bytes = http.finishFilesUpload(); for (Uri item : imagesArray) { try { OutputStream os = new FileOutputStream(item.getPath()); os.write(bytes); } catch (IOException e) {  } } } catch (IOException e) { e.printStackTrace(); } return AppGlobals.getPostProductResponse(); } else { return AppGlobals.NO_INTERNET; } } "	0	0	0	0	1	0
"@Override public void run() { //Download finished String pathZipFile = downloadTask.getAbsolutePath(); try { String pathExtractedFile = Files.getExternalCacheDirectory(context) + ""/extracted_xml/"" + language + year; unzip(new File(pathZipFile) , new File(pathExtractedFile));  //File-Name in directory is ""Losungen Free year.xml"" String pathToXml = pathExtractedFile + ""/Losungen Free "" + year + "".xml"";  //Save the path to the file in SharedPreferences: year_language_xml -> path SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(context); SharedPreferences.Editor editor = settings.edit(); editor.putString(year + ""_"" + language + ""_xml"", pathToXml); editor.apply(); } catch (IOException e) { e.printStackTrace(); }  waitDialog.close(); } "	0	0	0	0	1	0
@Test public void testShouldDeleteAllBooksAssignedToLibrary() { //given Long libraryId = 10L; Long bookCountBeforeDeletingLibrary = bookRepository.count(); //when libraryRepository.delete(libraryId); Long bookCountAfterDeletingLibrary = bookRepository.count(); //then assertTrue(bookCountAfterDeletingLibrary < bookCountBeforeDeletingLibrary); } 	0	0	0	0	1	0
"@Test public void testSystemProducerAppenderInAM() { System.setProperty(""samza.container.name"", ""samza-application-master"");  MockSystemProducerAppender systemProducerAppender = new MockSystemProducerAppender(); PatternLayout layout = new PatternLayout(); layout.setConversionPattern(""%m""); systemProducerAppender.setLayout(layout); systemProducerAppender.activateOptions(); log.addAppender(systemProducerAppender);  log.info(""no-received""); systemProducerAppender.flushSystemProducer(); // it should not receive anything because the system is not setup assertEquals(0, MockSystemProducer.messagesReceived.size());  systemProducerAppender.setupSystem(); MockSystemProducerAppender.systemInitialized = true;  log.info(""testing3""); log.info(""testing4""); systemProducerAppender.flushSystemProducer();  // be able to received msgs now assertEquals(2, MockSystemProducer.messagesReceived.size()); assertTrue(new String((byte[]) MockSystemProducer.messagesReceived.get(0)).contains(""\""message\"":\""testing3\"""")); assertTrue(new String((byte[]) MockSystemProducer.messagesReceived.get(1)).contains(""\""message\"":\""testing4\""""));  // reset log.removeAllAppenders(); MockSystemProducer.messagesReceived.clear(); } "	0	0	0	0	1	0
"@RequestMapping(value = ""/employee/{username}"", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE) @ResponseBody @RolesAllowed(""ROLE_MANAGER"") public List<EmployeeRecord> getAllEmployeeRecordsForUser(@PathVariable String username) { List<EmployeeRecord> employeeRecords = employeeRecordRepository.findByName(username); if (!employeeRecords.isEmpty()) { EmployeeRecord latestRecord = employeeRecords.get(0); List<EmployeeRecord> filteredList = employeeRecords .stream().filter(employeeRecord -> !employeeRecord.isWorkInProgress()).collect(toList()); if (latestRecord.isWorkInProgress()) { filteredList.add(0, latestRecord); } return filteredList; } else { throw new NoUserExistsException(username); } } "	0	0	0	0	1	0
"@Override public void disable() { if (!isEnabled) throw new IllegalStateException(""Module "" + getName() + "" is already enabled"");  isEnabled = false; try { onDisable(); getPlugin().unregister(this); } catch (Exception e) { warn(DARK_RED + ""Failed to disable module "" + getName()); e.printStackTrace(); } } "	0	0	0	0	1	0
@Test public void getTasksWithDirtyCache_tasksAreRetrievedFromRemote() { // When calling getTasks in the repository with dirty cache mTasksRepository.mCacheIsDirty = true; mTasksRepository.getTasks(mLoadTasksCallback);  // And the remote data source has data available setTasksAvailable(mTasksRemoteDataSource, TASKS);  // Verify the tasks from the remote data source are returned, not the local verify(mTasksLocalDataSource, never()).getTasks(mLoadTasksCallback); verify(mLoadTasksCallback).onTasksLoaded(TASKS); } 	0	0	0	0	1	0
"@Override protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { resp.setContentType(""text/html""); resp.setCharacterEncoding(""UTF-8""); PrintWriter writer = resp.getWriter(); writer.append(""<!DOCTYPE html>\r\n"") .append(""<html>\r\n"") .append(""<head>\r\n"") .append(""<title>MusicStore-App</title>\r\n"") .append(""</head>\r\n"");  writer.append(""<h2>""); writer.append(""You have successfully logged out from the Music Store...""); writer.append(""</h2>\r\n"");  writer.append(""<div id='footer-area'>""); writer.append(""<p>©2016 WSO2</p>""); writer.append(""</div>"");  writer.append(""<body>\r\n"") .append(""</body>\r\n"") .append(""</html>\r\n""); } "	0	0	0	0	1	0
public String registerUser() { // Increment the user id for the next user and return the id we used for // this user Point putThemHere = findLocationForPlayer(); Player newPlayer = new Player(avatarNames[(int)(Math.random() * avatarNames.length)], Player.Move.DOWN, true, nextId++, putThemHere.x, putThemHere.y); if (newPlayer.avatarName == null) { // failed to create user? return null; } addUser(newPlayer); updateMap(mapSquares[newPlayer.y][newPlayer.x], newPlayer.id);  return generatePlayerInitMessage(newPlayer.id); } 	0	0	0	0	1	0
private static void loadSkinBlockIntoWorld(World world, int x, int y, int z, int xOrigin, int yOrigin, int zOrigin, ICube blockData, ForgeDirection direction, int meta) {  int shiftX = -blockData.getX() - 1; int shiftY = blockData.getY() + 1; int shiftZ = blockData.getZ();  int targetX = x + shiftX + xOrigin; int targetY = y + yOrigin - shiftY; int targetZ = z + shiftZ + zOrigin;  if (world.isAirBlock(targetX, targetY, targetZ)) { Block targetBlock = ModBlocks.colourable; if (blockData.getId() == 1) { targetBlock = ModBlocks.colourableGlowing; } if (blockData.getId() == 2) { targetBlock = ModBlocks.colourableGlass; } if (blockData.getId() == 3) { targetBlock = ModBlocks.colourableGlassGlowing; } world.setBlock(targetX, targetY, targetZ, targetBlock); world.setBlockMetadataWithNotify(targetX, targetY, targetZ, meta, 2); TileEntity te = world.getTileEntity(targetX, targetY, targetZ); if (te != null && te instanceof TileEntityColourable) { ((TileEntityColourable)te).setColour(blockData.getCubeColour()); } } } 	0	0	0	0	1	0
"private void populateContextMenu(JsonTree node, MenuTree addTree, boolean isSkin) { NUIEditorNodeUtils.NodeInfo nodeInfo; if (isSkin) { nodeInfo = NUIEditorNodeUtils.getSkinNodeInfo(node); } else { nodeInfo = NUIEditorNodeUtils.getNodeInfo(node, nuiManager); }  if (nodeInfo != null) { Class clazz = nodeInfo.getNodeClass(); if (clazz != null) { for (Field field : ReflectionUtils.getAllFields(clazz)) { if ((!UIWidget.class.isAssignableFrom(clazz) || field.isAnnotationPresent(LayoutConfig.class)) // Exclude static final fields, as they shouldn't be modified. && !(Modifier.isFinal(field.getModifiers()) && Modifier.isStatic(field.getModifiers()))) { field.setAccessible(true); String name = getNodeName(field); if (!node.hasChildWithKey(name)) { addTree.addOption(name, n -> { try { JsonTree child = createChild(name, node, field, clazz); for (Consumer<JsonTree> listener : addContextMenuListeners) { listener.accept(child); } } catch (IllegalAccessException | InstantiationException e) { logger.warn(""Could not add child"", e); } }, node); } } } // If the node is part of a layout, add an option to add the layoutInfo node. if (nodeInfo.getLayoutClass() != null) { String layoutInfo = ""layoutInfo""; if (!node.hasChildWithKey(layoutInfo)) { addTree.addOption(layoutInfo, n -> { JsonTree child = new JsonTree(new JsonTreeValue(layoutInfo, null, JsonTreeValue.Type.OBJECT)); child.setExpanded(true); n.addChild(child); }, node); } } } } else { logger.warn(""Could not get class for node "", node.getValue().toString()); } } "	0	0	0	0	1	0
public void runNextPendingCommand() { ScheduledTask<?> scheduledTask = deltaQueue.pop();  scheduledTask.run();  if (scheduledTask.repeats()) { deltaQueue.add(scheduledTask.repeatDelay, scheduledTask); } } 	0	0	0	0	1	0
private void handleStateChange(ReadOnlyTodoList todoList) { previousStates.push(todoList); if (!nextStates.empty()) { nextStates.clear(); } } 	0	0	0	0	1	0
private void assertNoPersonSelected() { assertEquals(personListPanel.getSelectedPersons().size(), 0); } 	0	0	0	0	1	0
"@Override protected void onNewIntent(Intent intent) { super.onNewIntent(intent);  final String packageName = getIntentPackageName(intent); if (TextUtils.isEmpty(packageName)) { Log.e(this.getClass().getName(), ""No package name provided""); finishActivity(0); return; } Log.i(getClass().getName(), ""Getting info about "" + packageName); ignoreOptionFragment = new IgnoreOption(this, new App());  if (null != DetailsActivity.app) { drawDetails(DetailsActivity.app); }  DetailsTask task = getDetailsTask(packageName); task.setTaskClone(getDetailsTask(packageName)); task.execute(); } "	0	0	0	0	1	0
"public void testActivity() { //if (Build.VERSION.SDK_INT == 10) //    return; //FIXME dirty fix for travis ci ExtraSamplesActivity activity = getActivity(); assertNotNull(activity); FragmentManager fm = activity.getSupportFragmentManager(); Fragment frag = (fm.findFragmentByTag(ExtraSamplesActivity.SAMPLES_FRAGMENT_TAG)); assertNotNull(frag);  assertTrue(frag instanceof FragmentSamples); //FragmentSamples samples = (FragmentSamples) frag;  SampleFactory sampleFactory = SampleFactory.getInstance(); for (int i = 0; i < sampleFactory.count(); i++) { BaseSampleFragment basefrag = sampleFactory.getSample(i); Log.i(FragmentSamples.TAG, ""loading fragment "" + basefrag.getSampleTitle() + "", "" + frag.getClass().getCanonicalName()); if (Build.VERSION.SDK_INT == 10 && basefrag instanceof SampleJumboCache) continue; if (Build.VERSION.SDK_INT == 10 && basefrag instanceof SampleOsmPath) continue; if (Build.VERSION.SDK_INT == 10 && basefrag instanceof SampleMilitaryIcons) continue; if (Build.VERSION.SDK_INT == 10 && basefrag instanceof SampleGridlines) continue; if (Build.VERSION.SDK_INT == 10 && basefrag instanceof SampleJumboCache) continue; try { fm.beginTransaction().replace(org.osmdroid.R.id.samples_container, basefrag, ExtraSamplesActivity.SAMPLES_FRAGMENT_TAG) .addToBackStack(null).commit(); //this sleep is here to give the fragment enough time to start up and do something try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } catch (java.lang.OutOfMemoryError oom) { Assert.fail(""OOM error! "" + sampleFactory.getSample(i).getSampleTitle() + sampleFactory.getSample(i).getClass().getCanonicalName()); } } } "	0	0	0	0	1	0
"private void updateBabyGrowth(ItemStack itemStack) { if (itemStack.hasTagCompound()) { int age = itemStack.getTagCompound().getInteger(""age""); age++; itemStack.getTagCompound().setInteger(""age"", age); } } "	0	0	0	0	1	0
private void loadComic(int num) { int random; if (num == 0) { random = BlipUtils.randInt(1, databaseManager.getMax()); } else { random = num; } comic = databaseManager.getComic(random);  title.setText(comic.getTitle()); Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.YEAR, Integer.parseInt(comic.getYear())); calendar.set(Calendar.MONTH, Integer.parseInt(comic.getMonth()) - 1); calendar.set(Calendar.DAY_OF_MONTH, Integer.parseInt(comic.getDay())); date.setText(simpleDateFormat.format(calendar.getTime())); alt.setText(comic.getAlt());  Picasso.with(getActivity()) .load(comic.getImg()) .error(R.drawable.error_network) .into(img); if (comic.isFavourite()) { favourite.setColorFilter(getResources().getColor(R.color.accent)); } else { favourite.setColorFilter(getResources().getColor(R.color.icons_dark)); } swipeRefreshLayout.setRefreshing(false); } 	0	0	0	0	1	0
@Override public void onBindViewHolder(ViewHolder holder, int position) { Comic comic = comics.get(position);  holder.title.setText(comic.getTitle());  Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.YEAR, Integer.parseInt(comic.getYear())); calendar.set(Calendar.MONTH, Integer.parseInt(comic.getMonth()) - 1); calendar.set(Calendar.DAY_OF_MONTH, Integer.parseInt(comic.getDay())); holder.date.setText(simpleDateFormat.format(calendar.getTime()));  holder.alt.setText(comic.getAlt());  Picasso.with(holder.img.getContext()) .load(comic.getImg()) .error(R.drawable.error_network) .into(holder.img);  if (comic.isFavourite()) { holder.favourite.setColorFilter(getResources().getColor(R.color.accent)); } else { holder.favourite.setColorFilter(getResources().getColor(R.color.icons_dark)); } } 	0	0	0	0	1	0
private Map<String, String> resolveServerIp(Map<String, String> config) { String dockerServerUri = config.get(CubeDockerConfiguration.DOCKER_URI);  if (dockerServerUri.contains(AbstractCliInternetAddressResolver.DOCKERHOST_TAG)) { if (isDockerMachineSet(config)) { dockerServerUri = resolveDockerMachine(dockerServerUri, config.get(CubeDockerConfiguration.DOCKER_MACHINE_NAME), config.get(CubeDockerConfiguration.DOCKER_MACHINE_PATH)); } else { dockerServerUri = resolveBoot2Docker(dockerServerUri, config.get(CubeDockerConfiguration.BOOT2DOCKER_PATH)); } }  config.put(CubeDockerConfiguration.DOCKER_URI, dockerServerUri); if (!config.containsKey(CubeDockerConfiguration.CERT_PATH)) { config.put(CubeDockerConfiguration.CERT_PATH, HomeResolverUtil.resolveHomeDirectoryChar(getDefaultTlsDirectory(config))); } resolveDockerServerIp(config, dockerServerUri);  return config; } 	0	0	0	0	1	0
public void setProjectName(String projectName) { txtProject.setText(projectName); } 	0	0	0	0	1	0
"@Override public void run() { Connection connection = null; Channel channel = null; while(true) { try { connection = factory.newConnection(); channel = connection.createChannel(); channel.basicQos(1);  // Email:controller uuid CloudHandler cloudHandler = CloudHandler.getInternal();  String queueName = cloudHandler.getEmail() + "":"" + cloudHandler.getControllerId();  LOG.V(TAG, ""queueName: "" + queueName); channel.queueDeclare(queueName, false, false, false, null); channel.queueBind(queueName, ""amq.direct"", """"); QueueingConsumer consumer = new QueueingConsumer(channel); channel.basicConsume(queueName, false, consumer);  int old_seq = -1; while (true) { QueueingConsumer.Delivery delivery = consumer.nextDelivery(); String message = new String(delivery.getBody()); LOG.V(TAG, ""[r] "" + message);  // Handle message Message msg = Message.obtain(); Bundle bundle = new Bundle(); bundle.putString(""msg"", message); msg.setData(bundle); messenger.send(msg);  channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false); } } catch (InterruptedException e) { LOG.W(TAG, ""Connection interrupted: "" + e.getClass().getName()); break; } catch (Exception e1) { LOG.E(TAG, ""Connection broken: "" + e1.getClass().getName()); try { Thread.sleep(5000); //sleep and then try again } catch (InterruptedException e) { break; } } finally { try { if (channel.isOpen()) { channel.close(); }  if (connection.isOpen()) { connection.close(); } } catch (Exception e) { LOG.E(TAG, ""close exception""); } } } } "	0	0	0	0	1	0
@Override public CommandResult execute() throws CommandException {  List<ReadOnlyEvent> lastShownList = model.getFilteredTaskList();  if (targetIndex >= lastShownList.size()) { throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX); }  ReadOnlyEvent taskToMark = lastShownList.get(targetIndex); Event markedTask = new Event(taskToMark); if (markedTask.getIsDone().getValue().equals(IsDone.ISDONE_DONE)) { return new CommandResult(MESSAGE_ALR_MARKED); } model.saveImageOfCurrentTaskManager(); if (markedTask.isRecurring()) { markedTask.markDone(); } else { markedTask.getIsDone().markDone(); } model.updateEvent(targetIndex, markedTask); model.updateDoneTaskList(); model.updateFilteredListToShowAll(); markedTask.setPriority(0); return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, taskToMark)); } 	0	0	0	0	1	0
"@Override public void start(Stage primaryStage) throws Exception { Parent root = FXMLLoader.load(getClass().getResource(""gui.fxml""));  primaryStage.setTitle(""Statzy""); primaryStage.setScene(new Scene(root)); primaryStage.setResizable(false); primaryStage.show(); } "	0	0	0	0	1	0
@Override public Object generateCacheKey(final Object id, final EntityPersister persister, final SessionFactoryImplementor session, final String tenantIdentifier) { return DefaultCacheKeysFactory.createEntityKey(id, persister, session, tenantIdentifier); } 	0	0	0	0	1	0
@Override public Object getCacheKeyId(final Object cacheKey) { return DefaultCacheKeysFactory.getEntityId(cacheKey); } 	0	0	0	0	1	0
"@Override public void lock(long timeoutInMillis) { synchronized (syncObject) { // Calculate the 'exit time' for our wait loop. long maxWait = System.currentTimeMillis() + timeoutInMillis + ADDITIONAL_TIMEOUT_IN_MILLIS;  // Attempt to acquire the lock until something goes wrong or we run out of time. do { try { if (isLockFree(address)) { return; } // Randomness or retry! Something from my past (Paul H) : // http://www.wattystuff.net/amateur/packet/whatispacket.htm (search for random in page) syncObject.wait((long) (DELAY_BETWEEN_SOCKET_CHECKS * Math.random())); } catch (InterruptedException | IOException e) { throw new WebDriverException(e); } } while (System.currentTimeMillis() < maxWait);  throw new WebDriverException(String.format(""Unable to bind to locking port %d within %d ms"", address.getPort(), timeoutInMillis + ADDITIONAL_TIMEOUT_IN_MILLIS)); } } "	0	0	0	0	1	0
"private void replaceEleForUpsertByExampleSelective(XmlElement element, String prefix, IntrospectedTable introspectedTable, boolean allColumns) { // choose XmlElement chooseEle = new XmlElement(""choose""); // when XmlElement whenEle = new XmlElement(""when""); whenEle.addAttribute(new Attribute(""test"", prefix + ""isSelective()"")); for (IntrospectedColumn introspectedColumn : (allColumns ? introspectedTable.getAllColumns() : introspectedTable.getNonBLOBColumns())) { XmlElement eleIf = new XmlElement(""if""); eleIf.addAttribute(new Attribute(""test"", prefix + ""isSelective(\'"" + MyBatis3FormattingUtilities.getEscapedColumnName(introspectedColumn) + ""\')""));  eleIf.addElement(new TextElement(MyBatis3FormattingUtilities.getParameterClause(introspectedColumn, prefix) + "","")); whenEle.addElement(eleIf); }  // otherwise XmlElement otherwiseEle = new XmlElement(""otherwise""); for (Element ele : element.getElements()) { otherwiseEle.addElement(ele); }  chooseEle.addElement(whenEle); chooseEle.addElement(otherwiseEle);  // 清空原始节点，新增choose节点 element.getElements().clear(); element.addElement(chooseEle); } "	0	0	0	0	1	0
"public static String getTableName(int requestType) { String tablename = """";  switch (requestType) { case Request.SICK_DAY: tablename = Table.getTableName(""SickDays""); break; case Request.VACATION_DAY: tablename = Table.getTableName(""VacationDays""); break; case Request.PREFERRED_SHIFT: tablename = Table.getTableName(""PreferredShifts""); break; default: System.out.println(""Not a valid employeeType""); break; }  return tablename; } "	0	0	0	0	1	0
"@Override public void build( final SpoofaxPostTarget target, final DirtyFilesHolder<SpoofaxSourceRootDescriptor, SpoofaxPostTarget> holder, final BuildOutputConsumer consumer, final CompileContext context) throws ProjectBuildException, IOException {  try { final LanguageSpecBuildInput metaInput = getBuildInput(target.getModule());  compilePostJava(metaInput, context);  } catch (final FileSystemException e) { this.logger.error(""An unexpected IO exception occurred."", e); throw e; } catch (final ProjectBuildException e) { this.logger.error(""An unexpected project build exception occurred."", e); throw e; } catch (final ProjectException e) { this.logger.error(""An unexpected project exception occurred."", e); throw new ProjectBuildException(e); } catch (final Exception e) { this.logger.error(""An unexpected exception occurred."", e); throw new ProjectBuildException(e); }  } "	0	0	0	0	1	0
@Override @SideOnly(Side.CLIENT) public boolean canRenderInPass(int pass) { RenderUtil.theRenderPass = pass; return pass == 0 || pass == 1; } 	0	0	0	0	1	0
"public static final void spawnItemInWorld(World world, BlockPos pos, ItemStack stack) { if (world != null && pos != null && stack != null && stack.getItem() != null) { Block.spawnAsEntity(world, pos, stack); } else { // Create StringBuilder final StringBuilder sb = new StringBuilder(); // Optionalize final Optional<World> optWorld = Optional.ofNullable(world); final Optional<BlockPos> optPos = Optional.ofNullable(pos); final Optional<ItemStack> optStack = Optional.ofNullable(stack); // Append Information sb.append(""\n""); sb.append(""==================================================\n""); sb.append(""InfinityLib Warning!\n""); sb.append(""==================================================\n""); sb.append(""\n""); sb.append(""Cause:\n""); sb.append(""--------------------------------------------------\n""); sb.append(""\tAn attempt at spawning a bad ItemStack in the world was intercepted!\n""); sb.append(""\n""); sb.append(""Relevant Data:\n""); sb.append(""--------------------------------------------------\n""); sb.append(""\t- In World: "").append(optWorld.map(w -> w.getWorldInfo().getWorldName()).orElse(""<NULL>"")).append(""\n""); sb.append(""\t- At Location: "").append(optPos.map(p -> p.toString()).orElse(""<NULL>"")).append(""\n""); sb.append(""\t- ItemStack:\n""); sb.append(""\t\t- Item: "").append(optStack.map(i -> i.getItem()).map(i -> i.toString()).orElse(""<NULL>"")).append(""\n""); sb.append(""\t\t- Amount: "").append(optStack.map(i -> i.stackSize).map(i -> i.toString()).orElse(""<NULL>"")).append(""\n""); sb.append(""\t\t- Meta: "").append(optStack.filter(i -> i.getItem() != null).map(i -> i.getMetadata()).map(i -> i.toString()).orElse(""<NULL>"")).append(""\n""); sb.append(""\t\t- Tags: "").append(optStack.map(i -> i.getTagCompound()).map(i -> i.toString()).orElse(""<NULL>"")).append(""\n""); // Append Stack Trace sb.append(""\n""); sb.append(""Stacktrace:\n""); sb.append(""--------------------------------------------------\n""); for (StackTraceElement e : Thread.currentThread().getStackTrace()) { sb.append(""\t"").append(e.toString()).append(""\n""); } // End Message sb.append(""==================================================\n""); // Send Information to Log InfinityLib.instance.getLogger().error(sb.toString()); } } "	0	0	0	0	1	0
"@Override public Object execute(ExecutionEvent event) throws ExecutionException{ ISelection selection = HandlerUtil.getActiveWorkbenchWindow(event).getActivePage().getSelection(); if (selection != null) { IStructuredSelection strucSelection = (IStructuredSelection) selection; Object firstElement = strucSelection.getFirstElement();  if (firstElement instanceof Prescription) { Prescription presc = (Prescription) firstElement;  // is no ReserveMedication yet if (!presc.isReserveMedication()) { Artikel article = presc.getArtikel(); String dose = presc.getDosis(); String remark = presc.getBemerkung(); String disposalComment = presc.getDisposalComment();  if (dose.isEmpty() && remark.isEmpty()) { ArticleDefaultSignature defSig = ArticleDefaultSignature.getDefaultsignatureForArticle(article); if (defSig != null) { dose = defSig.getSignatureAsDosisString(); remark = defSig.getSignatureComment(); } }  // create ReserveMedication Prescription reserveMedi = new Prescription(article, (Patient) ElexisEventDispatcher.getSelected(Patient.class), dose, remark); reserveMedi.setPrescType(EntryType.RESERVE_MEDICATION.getFlag(), true); // add disposal comment if present if (disposalComment != null && !disposalComment.isEmpty()) reserveMedi.setDisposalComment(disposalComment);  // if selection is FixMedication -> stop it if (presc.isFixedMediation()) { String stopDose = StringConstants.ZERO; presc.addChangeListener(null, stopDose); presc.setStopReason(""Umgestellt auf ReserveMedikation""); }  MedicationView medicationView = (MedicationView) PlatformUI.getWorkbench().getActiveWorkbenchWindow() .getActivePage().findView(MedicationView.PART_ID); medicationView.refresh(); } } } return null; } "	0	0	0	0	1	0
public BigDecimal getSplitFactor() { return numerator.divide(denumerator); } 	0	0	0	0	1	0
protected void updateExample() { Renamer renamer = new Renamer(textFieldRenameString.getText(), textFieldFolderRenameString.getText(), textFieldSanitizerString.getText(), fileDetailPanel.currentMovie, sampleFile); textFieldExample.setText( renamer.getNewFileName(true) ); } 	0	0	0	0	1	0
"public void build(OMElement elem) { List<Value> schemaKeys = new ArrayList<Value>(); Iterator schemas = elem.getChildrenWithName(SCHEMA_Q);  QName ATT_RESOURCE_QNAME = new QName(""resource"");  Iterator itr = elem.getChildrenWithName(ATT_RESOURCE_QNAME); Map<String, String> validateResourecMap = new HashMap<String, String>();  while (itr.hasNext()) { OMElement resourceElement = (OMElement) itr.next(); QName ATT_RESOURCE_LOCATION_QNAME = new QName(""location""); QName ATT_RESOURCE_KEY_QNAME = new QName(""key"");  OMAttribute locationAttr = resourceElement.getAttribute(ATT_RESOURCE_LOCATION_QNAME); OMAttribute keyAttr = resourceElement.getAttribute(ATT_RESOURCE_KEY_QNAME);  validateResourecMap.put(locationAttr.getAttributeValue(), keyAttr.getAttributeValue()); } this.resources = validateResourecMap;  while (schemas.hasNext()) { Object o = schemas.next(); if (o instanceof OMElement) { OMElement omElem = (OMElement) o; OMAttribute keyAtt = omElem.getAttribute(ATT_KEY); if (keyAtt != null) { //Use KeyFactory to create Key ValueFactory keyFactory = new ValueFactory(); Value key = keyFactory.createValue(XMLConfigConstants.KEY, omElem); schemaKeys.add(key);  } else { throw new MediatorException(""A 'schema' definition must contain a local property 'key'""); } } else { throw new MediatorException(""Invalid 'schema' declaration for validate mediator""); } }  if (schemaKeys.size() == 0) { throw new MediatorException(""No schemas specified for the validate mediator""); } else { this.schemaKeys = schemaKeys; }  // process source XPath attribute if present OMAttribute attSource = elem.getAttribute(ATT_SOURCE);  if (attSource != null) { try { source = SynapseXPathFactory.getSynapseXPath(elem, ATT_SOURCE); } catch (JaxenException e) { throw new MediatorException(""Invalid XPath expression specified for attribute 'source'""); } }  // process on-fail OMElement onFail = null; Iterator iterator = elem.getChildrenWithName(ON_FAIL_Q); if (iterator.hasNext()) { onFail = (OMElement) iterator.next(); }  if (onFail != null && onFail.getChildElements().hasNext()) { addChildren(onFail, this); } else { throw new MediatorException(""A non-empty <on-fail> child element is required for "" + ""the <validate> mediator""); }  // after successfully creating the mediator // set its common attributes such as tracing etc processAuditStatus(this, elem); // set the features for (Map.Entry<String, String> entry : collectNameValuePairs(elem, FEATURE_Q).entrySet()) { String value = entry.getValue(); boolean isFeatureEnabled; if (""true"".equals(value)) { isFeatureEnabled = true; } else if (""false"".equals(value)) { isFeatureEnabled = false; } else { throw new MediatorException(""The feature must have value true or false""); } addFeature(entry.getKey(), isFeatureEnabled); } } "	0	0	0	0	1	0
"@Override public void onClick(AjaxRequestTarget target) { manager.executeCallback(target, ""null""); manager.switchModalWindow(target, false); } "	0	0	0	0	1	0
public static long timeMinutesAgo(final int numberOfMinutes) { return TimeFactory.timeSource.currentTimeMillis() - (60000l * numberOfMinutes); } 	0	0	0	0	1	0
"@Test public void branchLinkUrlTest() throws UnsupportedEncodingException { // Given String ownerLoginid = ""whiteship""; String proejctName = ""yobi""; String branchName = URLEncoder.encode(""refs/heads/feature/review"", ""UTF-8"");  // When String url = routes.CodeApp.codeBrowserWithBranch(ownerLoginid, proejctName, branchName, """").url();  // Then assertThat(url).isEqualTo(""/whiteship/yobi/code/refs%2Fheads%2Ffeature%2Freview""); } "	0	0	0	0	1	0
@Override public int doEndTag() throws JspException { String content = generateContent();  if (variableName != null) { // Pass the value out as a variable. pageContext.setAttribute(variableName, content); } else { // Write out the tag's output. try { pageContext.getOut().write(content); } catch (IOException e) { throw new JspTagException(e); } }  return EVAL_PAGE; } 	0	0	0	0	1	0
"private void saveEvent(Event event, Location location, String suburb, String city, String country, String placeId) { if (preferencesAPI == null) { preferencesAPI = new PreferencesAPI(context); }  String userId = preferencesAPI.GetUserId(); String localTrailId = Integer.toString(preferencesAPI.GetLocalTrailId()); DatabaseController dbc = new DatabaseController(context); int eventId = event.eventId;  // String mime; if (event.isPhoto) { mime = "".jpg""; } else { mime = "".mp4""; }  dbc.SaveCrumb(localTrailId, "" "", userId, event.eventId, location.getLatitude(), location.getLongitude(), mime, "" "", "" "", placeId, suburb, city, country, event.descPosX, event.descPosY); TrailManagerWorker trailManagerWorker = new TrailManagerWorker(context); trailManagerWorker.CreateEventMetadata(TrailManagerWorker.CRUMB, location); int lastActivity = DetectedActivity.WALKING;  // If we dont know what we were last doing, we default to walking. It is more likely that we are // taking a photo on foot than in a vehicle I am assuming. if (lastActivity == -1) { lastActivity = DetectedActivity.WALKING; }  dbc.SaveActivityPoint(lastActivity, lastActivity, location.getLatitude(), location.getLongitude(), 0); t.cancel(); stopSelf(); } "	0	0	0	0	1	0
protected void onPostExecute(Boolean result) { progressDialogFragment.dismiss(); if (result) { ImportExportDialog.newInstance(ImportExportDialog.CSVIMPORT_SUCCESS_DIALOG, context); } else { if (caughtDuplicateTableException) { ImportExportDialog.newInstance(ImportExportDialog.CSVIMPORT_FAIL_DUPLICATE_TABLE, context); } else if (problemImportingKVSEntries) { ImportExportDialog .newInstance(ImportExportDialog.CSVEXPORT_SUCCESS_SECONDARY_KVS_ENTRIES_FAIL_DIALOG, context); } else { ImportExportDialog.newInstance(ImportExportDialog.CSVIMPORT_FAIL_DIALOG, context); } } } 	0	0	0	0	1	0
private void buildStandardWordCloud() { final WordCloud wordCloud = new WordCloud( new Dimension(cliParameters.getWidth(), cliParameters.getHeight()), cliParameters.getCollisionMode() ); if (!cliParameters.getBackgrounds().isEmpty()) { wordCloud.setBackground(buildBackground(cliParameters.getBackgrounds().get(0))); } wordCloud.setBackgroundColor(cliParameters.getBackgroundColor()); if (!cliParameters.getColors().isEmpty()) { wordCloud.setColorPalette(new ColorPalette(cliParameters.getColors())); } wordCloud.setFontScalar(buildFontScalar(cliParameters.getFontScalarType())); wordCloud.setPadding(cliParameters.getPadding()); wordCloud.setWordStartScheme(buildWordStart(cliParameters.getWordStart())); wordCloud.setKumoFont(buildKumoFont(cliParameters.getFontWeights().get(0))); wordCloud.build(loadFrequencies(cliParameters.getInputSources().get(0))); wordCloud.writeToFile(cliParameters.getOutputSource()); } 	0	0	0	0	1	0
public Tile getLocation() { return new Tile(Game.getBaseX() + getX(), Game.getBaseY() + getY()); } 	0	0	0	0	1	0
"public SingleUserRequestAdapter user(ClientUser user) { if (user == null || user.getUsername() == null || user.getUsername().equals("""")) { throw new IllegalArgumentException(""User is not valid.""); } if (organizationId != null && user.getTenantId() == null) { user.setTenantId(organizationId); }  return new SingleUserRequestAdapter(sessionStorage, user); } "	0	0	0	0	1	0
"@Override protected void createFieldEditors() { // Create the field editors addField(new BooleanFieldEditor(BTSEGYUIConstants.SIGN_TEXT_SHOW_HIEROGLYPHS, ""Show Hieroglyphs"", BooleanFieldEditor.DEFAULT, getFieldEditorParent())); addField(new BooleanFieldEditor(BTSEGYUIConstants.SIGN_TEXT_SHOW_LEMMAID, ""Show Lemma ID"", BooleanFieldEditor.DEFAULT, getFieldEditorParent())); addField(new BooleanFieldEditor(BTSEGYUIConstants.SIGN_TEXT_SHOW_FLEXION, ""Show Flexion"", BooleanFieldEditor.DEFAULT, getFieldEditorParent())); for (String lang : BTSCoreConstants.LANGS) { String prefNode = BTSEGYUIConstants.SIGN_TEXT_SHOW_TRANSLATION_PREFNODE_PREFIX + lang; addField(new BooleanFieldEditor(prefNode, ""Show Translation: ""+lang.toUpperCase(), BooleanFieldEditor.DEFAULT, getFieldEditorParent())); } addField(new IntegerFieldEditor(BTSEGYUIConstants.SIGN_TEXT_SHOW_LINE_WIDTH, ""Line Width in Pixel"", getFieldEditorParent())); } "	0	0	0	0	1	0
"private List<Field> getConnectedFields(List<Condition> conditions, String alias) throws SqlParseException { List<Field> fields = new ArrayList<>(); String prefix = alias + "".""; for(Condition condition : conditions) { if(condition.getName().startsWith(prefix)){ fields.add(new Field(condition.getName().replaceFirst(prefix,""""),null)); } else { if(! ((condition.getValue() instanceof SQLPropertyExpr)||(condition.getValue() instanceof String))){ throw new SqlParseException(""conditions on join should be one side is firstTable second Other , condition was:"" + condition.toString()); } String aliasDotValue = condition.getValue().toString(); int indexOfDot = aliasDotValue.indexOf("".""); String owner = aliasDotValue.substring(0, indexOfDot); if(owner.equals(alias)) fields.add(new Field(aliasDotValue.substring(indexOfDot+1),null)); } } return fields; } "	0	0	0	0	1	0
@Override protected void onPause() { super.onPause(); if (!isInsideMultiWindow()) { pauseActivity(); } } 	0	0	0	0	1	0
private void processTask(Task task, boolean immediate) { if (task == null) { return; } Task savedTask = taskStore.save(task);  if (immediate) { taskProcessor.process(savedTask); } } 	0	0	0	0	1	0
"private Application applicationFromRow(Row row) { if (row != null) { final Application application = new Application(); application.setId(row.getString(""id"")); application.setName(row.getString(""name"")); application.setDescription(row.getString(""description"")); application.setType(row.getString(""type"")); application.setCreatedAt(row.getTimestamp(""created_at"")); application.setUpdatedAt(row.getTimestamp(""updated_at"")); application.setGroup(row.getString(""group"")); application.setStatus(ApplicationStatus.valueOf(row.getString(""status""))); return application; } return null; } "	0	0	0	0	1	0
"private Api apiFromRow(Row row) { if (row != null) { final String apiVisibility = row.getString(""visibility""); Visibility visibility = null; if (apiVisibility != null) { visibility = Visibility.valueOf(apiVisibility.toUpperCase()); }  final Api api = new Api(); api.setId(row.getString(""id"")); api.setName(row.getString(""name"")); api.setDescription(row.getString(""description"")); api.setVersion(row.getString(""version"")); api.setDefinition(row.getString(""definition"")); api.setDeployedAt(row.getTimestamp(""deployed_at"")); api.setCreatedAt(row.getTimestamp(""created_at"")); api.setUpdatedAt(row.getTimestamp(""updated_at"")); api.setVisibility(visibility); api.setLifecycleState(LifecycleState.valueOf(row.getString(""lifecycle_state"").toUpperCase())); api.setPicture(row.getString(""picture"")); api.setGroup(row.getString(""group"")); api.setViews(row.getSet(""views"", String.class)); api.setLabels(row.getList(""labels"", String.class)); return api; } return null; } "	0	0	0	0	1	0
"@Test public void bootstrapPropertiesExist() { assertTrue(environment.getPropertySources().contains(""bootstrap"")); } "	0	0	0	0	1	0
"@Test public void bootstrapPropertiesDecrypted() { assertEquals(""bar"", environment.resolvePlaceholders(""${bar}"")); } "	0	0	0	0	1	0
@Override public CommandResult execute() {  try { Context contextToRedo = urManager.getContextToRedo(); urManager.addToUndoQueue(model, contextToRedo.getCommand()); return contextToRedo.getCommand().execute(); } catch (NoAvailableCommandException nace){ return new CommandResult(MESSAGE_FAIL); } } 	0	0	0	0	1	0
@Override public void onBindViewHolder(final PhotoViewHolder holder, int position) { if(getItemViewType(position) == ITEM_TYPE_PHOTO) {  final Photo photo = getItems().get(position-1);  FrescoFactory.getLoader().showImage(holder.imageView, Uri.fromFile(new File(photo.getPath())), FrescoFactory.newOption(imageSize, imageSize));  holder.itemView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if(PickerManager.getInstance().getMaxCount()==1) PickerManager.getInstance().add(photo); else if (holder.checkBox.isChecked() || PickerManager.getInstance().shouldAdd()) { holder.checkBox.setChecked(!holder.checkBox.isChecked(), true); } } });  //in some cases, it will prevent unwanted situations holder.checkBox.setVisibility(View.GONE); holder.checkBox.setOnCheckedChangeListener(null); holder.checkBox.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { if(holder.checkBox.isChecked() || PickerManager.getInstance().shouldAdd()) { holder.checkBox.setChecked(!holder.checkBox.isChecked(), true); } } });  //if true, your checkbox will be selected, else unselected holder.checkBox.setChecked(isSelected(photo));  holder.selectBg.setVisibility(isSelected(photo) ? View.VISIBLE : View.GONE); holder.checkBox.setVisibility(isSelected(photo) ? View.VISIBLE : View.GONE);  holder.checkBox.setOnCheckedChangeListener(new SmoothCheckBox.OnCheckedChangeListener() { @Override public void onCheckedChanged(SmoothCheckBox checkBox, boolean isChecked) { toggleSelection(photo); holder.selectBg.setVisibility(isChecked ? View.VISIBLE : View.GONE);  if (isChecked) { holder.checkBox.setVisibility(View.VISIBLE); PickerManager.getInstance().add(photo); } else { holder.checkBox.setVisibility(View.GONE); PickerManager.getInstance().remove(photo); } } }); } else { FrescoFactory.getLoader().showImage(holder.imageView,R.drawable.ic_camera,null); holder.checkBox.setVisibility(View.GONE); holder.itemView.setOnClickListener(cameraOnClickListener); } } 	0	0	0	0	1	0
@Override public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; } final NumberValue other = (NumberValue) obj; if (Double.doubleToLongBits(value) != Double.doubleToLongBits(other.value)) { return false; } return true; } 	0	0	0	0	1	0
"public void searchForContact(String name) throws Exception {  UiObject search = getUiObjectByText(""Search"", ""android.widget.EditText""); search.setText(name);  UiObject peopleItem = new UiObject(new UiSelector().resourceId(""com.skype.raider:id/list"") .childSelector(new UiSelector() .index(0) .clickable(true))); peopleItem.waitForExists(timeout); peopleItem.click(); UiObject confirm = getUiObjectByResourceId(""com.skype.raider:id/fab"", ""android.widget.ImageView""); confirm.click(); } "	0	0	0	0	1	0
public static SassFileContext create(@Nonnull final Path inputFile) { final Sass_File_Context $file_context = SassLibrary.INSTANCE.sass_make_file_context(inputFile.toUri().getPath()); return new SassFileContext($file_context); } 	0	0	0	0	1	0
public void setIncludePath(@Nonnull final Path... includePath) { final Collection<String> includePathCollection = transform(asList(includePath), new Function<Path, String>() { @Nonnull @Override public String apply(final Path input) { return input.toUri().getPath(); } }); this.setIncludePath(includePathCollection.toArray(new String[includePathCollection.size()])); } 	0	0	0	0	1	0
"@Override protected void initReferenceParameters() throws ValidationException { putMandatoryParameter(KEY_PARAMETER_NAME, ""Username"", 10); putMandatoryPasswordParameter(SECRET_PARAMETER_NAME, ""Password"", 20); putMandatoryParameter(TENANT_NAME, ""Project name (Tenant name)"", 30); putMandatoryParameter(DOMAIN_NAME, ""Domain"", ""default"", ""Only useful if Identity API v3"", 40); } "	0	0	0	0	1	0
@Before public void setUp() { this.checker = new StandardSarlSpecificationChecker(); } 	0	0	0	0	1	0
"@Test public void testCheckCodeStyle() { ValidationResult result = mavenPlugin.checkCodeStyle(getPath(""most_errors"")); Map<File, List<ValidationError>> res = result.getValidationErrors(); assertEquals(""Should be one erroneous file"", 1, res.size()); for (File file : res.keySet()) { List<ValidationError> errors = res.get(file); assertEquals(""Should return the right amount of errors"", 23, errors.size()); } } "	0	0	0	0	1	0
protected void plantOneOffExact(JobRequest request, AlarmManager alarmManager, PendingIntent pendingIntent) { long triggerAtMillis = Common.getAverageDelayMs(request); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) { alarmManager.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtMillis, pendingIntent); } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { alarmManager.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtMillis, pendingIntent); } else { alarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtMillis, pendingIntent); } logScheduled(request); } 	0	0	0	0	1	0
@Override public Publisher<ByteBuffer> encode(Publisher<? extends ByteBuffer> messageStream, ResolvableType type, MediaType mediaType, Object... hints) { return lift(messageStream, sub -> new JsonEncoderBarrier(sub)); } 	0	0	0	0	1	0
"@Test public void commandBox_commandSucceeds_textCleared() { commandBox.runCommand(td.floating2.getAddCommand()); assertEquals(commandBox.getCommandInput(), """"); } "	0	0	0	0	1	0
"public static void rename(PyObject oldpath, PyObject newpath) { if (!new File(absolutePath(oldpath)).renameTo(new File(absolutePath(newpath)))) { PyObject args = new PyTuple(Py.Zero, new PyString(""Couldn't rename file"")); throw new PyException(Py.OSError, args); } } "	0	0	0	0	1	0
public static void chmod(PyObject path, int mode) { if (posix.chmod(absolutePath(path), mode) < 0) { throw errorFromErrno(path); } } 	0	0	0	0	1	0
"private Status preProcess() throws RuntimeInfoStoreException, JdbcHandlerException { List<ActionEvent> actionEvents = null; //this is for database level, process tables from a database, check table name, if null, get from event list if(jdbcInputDescriptor.getEntityName() == null && jdbcInputDescriptor.getTargetEntityName() == null){ try{ actionEvents = getHandlerContext().getEventList(); Preconditions.checkNotNull(actionEvents, ""ActionEvents can't be null""); } catch(Exception e) { throw new JdbcHandlerException(""ActionEvents cannot be null or empty""); } for(ActionEvent actionEvent : actionEvents){ String entityName = actionEvent.getHeaders().get(ActionEventHeaderConstants.TARGET_ENTITY_NAME); jdbcInputDescriptor.setTargetEntityName(entityName); jdbcInputDescriptor.setEntityName(entityName); } } jdbcInputDescriptor.setTargetDBName(hiveDBName); processTableSql = jdbcInputDescriptor.formatProcessTableQuery(jdbcInputDescriptor.getDatabaseName(), jdbcInputDescriptor.getEntityName(), driverName); //format sql query to get source metadata from source db if(!StringUtils.isEmpty(processTableSql)){ logger.debug(""Formatted Jdbc Table Reader Handler Query"", ""processTableSql={}"", processTableSql); // Get Source Metadata.. try { Metasegment metasegment = jdbcMetadataManagment.getSourceMetadata( jdbcInputDescriptor, jdbcTemplate); jdbcMetadataManagment.setColumnList(jdbcInputDescriptor, metasegment);  logger.debug(""Jdbc Table Reader Handler source column list"", ""ColumnList={}"", jdbcInputDescriptor.getColumnList());  if (jdbcInputDescriptor.getColumnList().size() == JdbcConstants.INTEGER_CONSTANT_ZERO) throw new JdbcHandlerException( ""Unable to retrieve the column list for the table Name = "" + jdbcInputDescriptor.getEntityName());  // throw Exception: // if the incrementedBy column doesn't exist in the table.. if (jdbcInputDescriptor.getIncrementedBy().length() > JdbcConstants.INTEGER_CONSTANT_ZERO && jdbcInputDescriptor.getIncrementedColumnType() == null) { throw new JdbcHandlerException( ""IncrementedBy Value doesn't exist in the table column list""); } // Put into bigdime Metadata... metadataStore.put(metasegment); } catch (MetadataAccessException e) { throw new JdbcHandlerException( ""Unable to put metadata to Metastore for the table Name = "" + jdbcInputDescriptor.getEntityName()); } } else{ logger.alert(ALERT_TYPE.INGESTION_FAILED,ALERT_CAUSE.APPLICATION_INTERNAL_ERROR, ALERT_SEVERITY.BLOCKER,""\""processed table query is null\"" TableName={} "", jdbcInputDescriptor.getEntityName()); throw new JdbcHandlerException(""Table query is null, unable to process records from table ""+jdbcInputDescriptor.getEntityName()); } boolean processFlag = false; // Check if Runtime details Exists.. if (getOneQueuedRuntimeInfo(runTimeInfoStore,jdbcInputDescriptor.getEntityName()) == null) { // Insert into Runtime Data... if (jdbcInputDescriptor.getIncrementedBy() != null && driverName .equalsIgnoreCase(JdbcConstants.ORACLE_DRIVER_NAME)) { HashMap<String, String> properties = new HashMap<String, String>(); if (jdbcInputDescriptor.getIncrementedColumnType() .equalsIgnoreCase(""DATE"") || jdbcInputDescriptor .getIncrementedColumnType().equalsIgnoreCase( ""TIMESTAMP"")) { properties.put(jdbcInputDescriptor.getIncrementedBy(), initialRuntimeDateEntry); } else { properties.put(jdbcInputDescriptor.getIncrementedBy(), JdbcConstants.INTEGER_CONSTANT_ZERO + """"); } //update to runtimeInfoStore boolean runtimeInsertionFlag = updateRuntimeInfo( runTimeInfoStore, jdbcInputDescriptor.getEntityName(), jdbcInputDescriptor.getIncrementedColumnType(), RuntimeInfoStore.Status.QUEUED, properties);  logger.info( ""Jdbc Table Reader Handler inserting Runtime data"", ""tableName={} PropertyKey={} PropertyValue={} status={}"", jdbcInputDescriptor.getEntityName(), jdbcInputDescriptor.getIncrementedBy(), columnValue, runtimeInsertionFlag); } //call processRecords() to get status READY, CALLBACK processFlag = processRecords(); } else { logger.debug( ""Jdbc Table Reader Handler processing an existing table "", ""tableName={}"", jdbcInputDescriptor.getEntityName()); //call processRecords() to get status READY, CALLBACK processFlag = processRecords(); } if (processFlag) { return Status.CALLBACK; } else { return Status.READY; } } "	0	0	0	0	1	0
"@Test public void testMigration() { List<TicketCategoryModification> categories = Collections.singletonList( new TicketCategoryModification(null, ""default"", AVAILABLE_SEATS, new DateTimeModification(LocalDate.now(), LocalTime.now()), new DateTimeModification(LocalDate.now(), LocalTime.now()), DESCRIPTION, BigDecimal.TEN, false, """", false)); Pair<Event, String> eventUsername = initEvent(categories); Event event = eventUsername.getKey();  try { eventRepository.updatePrices(1000, ""CHF"", 40, false, BigDecimal.ONE, ""STRIPE"", event.getId());  dataMigrator.migrateEventsToCurrentVersion(); EventMigration eventMigration = eventMigrationRepository.loadEventMigration(event.getId()); assertNotNull(eventMigration); //assertEquals(buildTimestamp, eventMigration.getBuildTimestamp().toString()); assertEquals(currentVersion, eventMigration.getCurrentVersion());  List<Ticket> tickets = ticketRepository.findFreeByEventId(event.getId()); assertNotNull(tickets); assertFalse(tickets.isEmpty()); assertEquals(40, tickets.size()); assertTrue(tickets.stream().allMatch(t -> t.getCategoryId() == null)); } finally { eventManager.deleteEvent(event.getId(), eventUsername.getValue()); } } "	0	0	0	0	1	0
private static Stream<String> getTypes(GraknGraph graph) { Stream<String> types = graph.getMetaType().instances().stream().map(Concept::getId);  Stream<String> metaTypes = Stream.of(Schema.MetaSchema.values()).map(Schema.MetaSchema::getName);  return Stream.concat(types, metaTypes); } 	0	0	0	0	1	0
@Override public void clicked(InputEvent event, float x, float y) { game.setScreen(game.mainMenuScreen); } 	0	0	0	0	1	0
"@Override public final Object resolve(final Object context, final String name) { String key = key(context, name); Object value = cache.get(key); if (value == UNRESOLVED) { return value; } @SuppressWarnings(""unchecked"") M member = (M) value; if (member == null) { member = find(context.getClass(), name); if (member == null) { // No luck, move to the next value resolver. cache.put(key, UNRESOLVED); return UNRESOLVED; } // Mark as accessible. if (member instanceof AccessibleObject) { ((AccessibleObject) member).setAccessible(true); }  cache.put(key, member); } return invokeMember(member, context); } "	0	0	0	0	1	0
"private void saveFile() throws IOException { int reply = JOptionPane.showConfirmDialog(null, ""Do you want to overwrite your file?"", ""Save"", JOptionPane.YES_NO_OPTION); if (reply == JOptionPane.NO_OPTION) { return; }  String filename = XmlWizard.getXml().getPath().toString(); File file = new File(filename); FileUtils.writeStringToFile(file, XmlWizard.getXml().toXMLString());  JOptionPane.showMessageDialog(new JFrame(), ""Your file has been saved."", ""Success!"", JOptionPane.INFORMATION_MESSAGE);  XmlWizard.setXml(new XmlConfigObject()); XmlWizard.nextPanel(); } "	0	0	0	0	1	0
"@Test public void testGetWaitForResponsesConfigsMinusOne() { RequestOptions requestOptions = new RequestOptions.Builder() .withWaitForResponses(-1) .build();  assertEquals(""expect maximum value an int can have if MessageOptions.waitForResponses is -1"", Integer.valueOf(Integer.MAX_VALUE), requestOptions.getWaitForResponses()); } "	0	0	0	0	1	0
"@Override public void doGet(HttpServletRequest req, HttpServletResponse resp) { try { req.setCharacterEncoding(""utf-8""); resp.setCharacterEncoding(""utf-8""); resp.setContentType(""text/plain; charset=utf-8"");  Properties p = new Properties();  p.setProperty(KEY_SIGNATURE , req.getParameter(KEY_SIGNATURE)   ); p.setProperty(KEY_TIMESTAMP , req.getParameter(KEY_TIMESTAMP)   ); p.setProperty(KEY_NONCE     , req.getParameter(KEY_NONCE)       ); p.setProperty(KEY_ECHOSTR   , req.getParameter(KEY_ECHOSTR)     );  Echo e = new Echo(p);  if (this.dispatcher.handleEcho(e)) resp.getWriter().write(e.getProperty(KEY_ECHOSTR));  return; } catch (Exception ex) { this.log(""Exception on handling echo."", ex); } } "	0	0	0	0	1	0
public static <T> Iterator<T> of( T initialState, Predicate<T> hasNext, UnaryOperator<T> next ) { AtomicReference<T> state = new AtomicReference<>( initialState ); return of( () -> hasNext.test( state.get() ), () -> state.updateAndGet( next ) ); } 	0	0	0	0	1	0
public void dispose() { this.gradleConsole.getProcessDescription().getJob().removeJobChangeListener(this); } 	0	0	0	0	1	0
@NonNull @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedState) { return inflater.inflate(R.layout.customize_engine_hot_point_picker, container, false); } 	0	0	0	0	1	0
"public void buildBottomPanel(){ bottomPanel = new JPanel(); bottomPanel.setLayout(null); bottomPanel.setBounds(10, 527, 464, 73); bottomPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));  //Bottom Buttons// okButton = new JButton(""Continue""); okButton.setBounds(327, 26, 112, 23); okButton.addActionListener(this); bottomPanel.add(okButton);  cancelButton = new JButton(""Cancel""); cancelButton.setBounds(176, 26, 112, 23); cancelButton.addActionListener(this); bottomPanel.add(cancelButton);  errorLabel = new JLabel(); errorLabel.setBounds(175, 53, 280, 20); errorLabel.setForeground(Color.red); errorLabel.setVisible(false); bottomPanel.add(errorLabel);  requirementLabel = new JLabel(""* indicates required field""); requirementLabel.setBounds(15, 53, 280, 20); requirementLabel.setVisible(true); bottomPanel.add(requirementLabel);  clearButton = new JButton(""Clear""); clearButton.setBounds(25, 26, 112, 23); clearButton.addActionListener(this); bottomPanel.add(clearButton);  } "	0	0	0	0	1	0
"public void buildEstimationBottomPanel(){ estBottomPanel = new JPanel(); estBottomPanel.setLayout(null); estBottomPanel.setBounds(10, 527, 464, 73); estBottomPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null));  //Bottom Buttons// estOkButton = new JButton(""Continue""); estOkButton.setBounds(360, 26, 94, 23); estOkButton.addActionListener(this); estBottomPanel.add(estOkButton);  estCancelButton = new JButton(""Cancel""); estCancelButton.setBounds(248, 26, 94, 23); estCancelButton.addActionListener(this); estBottomPanel.add(estCancelButton);  estClearButton = new JButton(""Clear""); estClearButton.setBounds(127, 26, 94, 23); estClearButton.addActionListener(this); estBottomPanel.add(estClearButton);  estBackButton = new JButton(""Back""); estBackButton.setBounds(10, 26, 94, 23); estBackButton.addActionListener(this); estBottomPanel.add(estBackButton);  } "	0	0	0	0	1	0
"@Override public void onPacketReceive(NBTTagCompound nbt) { switch(nbt.getInteger(""type"")) { /**Update*/ case 0: ItemStack stack = null; if(nbt.hasKey(""id"")) { stack = ItemStack.loadItemStackFromNBT(nbt); if(nbt.hasKey(""realCount"")) stack.setCount(nbt.getInteger(""realCount"")); } slot.putStack(stack); if(!ItemStack.areItemStacksEqual(lastSended, slot.getStack())) raiseEvent(new SlotChangeEvent(this)); lastSended = stack; ItemStack dragStack = null; if(nbt.hasKey(""drag"")) dragStack = ItemStack.loadItemStackFromNBT(nbt.getCompoundTag(""drag"")); getPlayer().inventory.setItemStack(dragStack); break; /**Clicked*/ case 1: onSlotClicked(nbt.getInteger(""button""), nbt.getBoolean(""shift""), nbt.getInteger(""scrolled"")); break; case 2: dropItem(nbt.getBoolean(""ctrl"")); break; case 3: splitStack(nbt.getIntArray(""slots""), ItemStack.loadItemStackFromNBT(nbt), nbt.getBoolean(""right"")); break; } } "	0	0	0	0	1	0
"public static AdminClient createAdminClient(ClientType type, String[] dirServiceAddresses, UserCredentials userCredentials, SSLOptions sslOptions, Options options) { switch (type) { case NATIVE: // return AdminNativeClient.createClient(dirServiceAddresses, userCredentials, sslOptions, options); try { Class<?> clazz = Class.forName(""org.xtreemfs.common.libxtreemfs.AdminNativeClient""); Method factory = clazz.getMethod(""createClient"", String[].class, UserCredentials.class, SSLOptions.class, Options.class); AdminClient client = (AdminClient) factory.invoke(null, dirServiceAddresses, userCredentials, sslOptions, options);  return client; } catch (ReflectiveOperationException e) { throw new RuntimeException(e); }  case JAVA: default: return new ClientImplementation(dirServiceAddresses, userCredentials, sslOptions, options); } } "	0	0	0	0	1	0
@Override public void onClick(View v) { switch (v.getId()) { case R.id.capture: mCameraView.takePicture(); break; case R.id.cancel: mListener.onPictureCancelled(); break; case R.id.retry: setCapturePanelVisible(); mCameraView.start(); break; case R.id.accept: if (mCapturedPhotoPath != null) { mListener.onPictureAccepted(mCapturedPhotoPath, mPlaceId, mPlaceCheckinId); } } } 	0	0	0	0	1	0
"public SchemaView uploadAvroSchema(SchemaView schemaView, byte[] schemaContent, FormDataContentDisposition schemaHeader, byte[] jarContent, FormDataContentDisposition jarHeader) throws IOException, DalException, RestClientException { if (schemaContent == null) { return schemaView; }  boolean isUpdated = false; Schema metaSchema = schemaView.toMetaSchema(); if (schemaContent != null) { metaSchema.setSchemaContent(schemaContent); metaSchema.setSchemaProperties(schemaHeader.toString());  if (schemaHeader.getName().endsWith(""avsc"")) { Parser parser = new Parser(); org.apache.avro.Schema avroSchema = parser.parse(new String(schemaContent)); int avroid = getAvroSchemaRegistry().register(metaSchema.getName(), avroSchema); metaSchema.setAvroid(avroid);  compileAvro(metaSchema, avroSchema); } isUpdated = true; } if (jarContent != null) { metaSchema.setJarContent(jarContent); metaSchema.setJarProperties(jarHeader.toString()); isUpdated = true; }  if (isUpdated) { m_schemaDao.updateByPK(metaSchema, SchemaEntity.UPDATESET_FULL); return new SchemaView(metaSchema); } else { return schemaView; } } "	0	0	0	0	1	0
public String getSignature(String path) { byte[] digest = mac.doFinal(path.getBytes()); return ByteString.of(digest).base64().replace('+', '-').replace('/', '_'); } 	0	0	0	0	1	0
"public Result updateHotel(Integer id) {  Hotel hotel = Hotel.findHotelById(id); Form<Hotel> hotelForm1 = hotelForm.bindFromRequest();  String name = hotelForm1.bindFromRequest().field(""name"").value(); String location = hotelForm1.bindFromRequest().field(""location"").value(); String description = hotelForm1.bindFromRequest().field(""description"").value();  hotel.name = name; hotel.location = location; hotel.description = description;  Ebean.update(hotel);  return ok(hotel.toString()); } "	0	0	0	0	1	0
public Result insertHotel() {  Form<Hotel> boundForm = hotelForm.bindFromRequest(); Hotel hotel = boundForm.get();  Ebean.save(hotel); return ok(hotel.toString()); } 	0	0	0	0	1	0
@Test public void touchingTest() { assertTrue (!mBasic.doIntersect(mTouching)); } 	0	0	0	0	1	0
@Test public void neitherTest() { assertTrue (!mBasic.doIntersect(mNeither) && !mBasic.isSameOrientation(mNeither)); } 	0	0	0	0	1	0
"private void checkOrCreateImageStream(OpenShiftClient client, KubernetesListBuilder builder, String imageStreamName) { boolean hasImageStream = client.imageStreams().withName(imageStreamName).get() != null; if (hasImageStream && recreateBuildConfig) { client.imageStreams().withName(imageStreamName).delete(); hasImageStream = false; } if (!hasImageStream) { log.info(""Creating ImageStream %s"", imageStreamName); builder.addNewImageStreamItem() .withNewMetadata() .withName(imageStreamName) .endMetadata() .endImageStreamItem(); } else { log.info(""Using ImageStream %s"", imageStreamName); } } "	0	0	0	0	1	0
"private void validateArtifact(GovernanceArtifact artifact) throws GovernanceException{ if(validationAttributes == null){ return; } Map<String, Object> map; for (int i=0; i<validationAttributes.size(); ++i) { map = validationAttributes.get(i); String value = """"; String prop = (String)map.get(""properties""); List<String> keys = (List<String>)map.get(""keys"");  if (prop != null && ""unbounded"".equals(prop)) { //assume there are only 1 key String[] values = artifact.getAttributes((String)keys.get(0)); if (values != null) { for (int j=0; j<values.length; ++j) { if (!values[j].matches((String)map.get(""regexp""))) { //return an exception to stop adding artifact throw new GovernanceException((String)map.get(""name"") + "" doesn't match regex: "" + (String)map.get(""regexp"")); } } } } else { for (int j=0; j<keys.size(); ++j) { String v = artifact.getAttribute(keys.get(j)); if (j != 0) value += "":""; value += (v == null ? """" : v); } if (!value.matches((String)map.get(""regexp""))) { //return an exception to stop adding artifact throw new GovernanceException((String)map.get(""name"") + "" doesn't match regex: "" + (String)map.get(""regexp"")); } } } } "	0	0	0	0	1	0
public boolean closePage() throws IOException { if (contentStream != null) {  document.afterPage(this);  if (getPageFormat().getRotation() != 0) { int currentRotation = getCurrentPage().getRotation() != null ? getCurrentPage().getRotation() : 0; getCurrentPage().setRotation(currentRotation + getPageFormat().getRotation()); }  contentStream.close(); contentStream = null; return true; } return false; } 	0	0	0	0	1	0
private void exportLegacy(M3BatchResponse response, ModelContainer model, String format, String userId) throws IOException, OWLOntologyCreationException { final GafExportTool exportTool = GafExportTool.getInstance(); String exportModel = exportTool.exportModelLegacy(model, useModuleReasoner, format); initMetaResponse(response); response.data.exportModel = exportModel; } 	0	0	0	0	1	0
"protected BioentityStrings getBioentityStrings(OWLClass entityCls, String entityType, String taxon, OWLGraphWrapper g) { BioentityStrings strings = new BioentityStrings(); strings.id = g.getIdentifier(entityCls); strings.db = null; String[] split = StringUtils.split(strings.id, "":"", 2); if (split.length == 2) { strings.db = split[0]; } strings.symbol = g.getLabel(entityCls); strings.type = entityType; return strings; } "	0	0	0	0	1	0
private boolean isCursorBeforeStatement(DiagnosticPos nodePosition, Node node) { int line = position.getLine(); int col = position.getCharacter(); int nodeSLine = nodePosition.sLine; int nodeSCol = nodePosition.sCol; // node endLine for the BLangIf node has to calculate by considering the else node. End line of the BLangIf // node is the endLine of the else node. int nodeELine = node instanceof BLangIf ? getIfElseNodeEndLine((BLangIf) node) : nodePosition.eLine; int nodeECol = nodePosition.eCol;  BLangBlockStmt bLangBlockStmt = this.blockStmtStack.peek(); Node blockOwner = this.blockOwnerStack.peek(); int blockOwnerELine = this.getBlockOwnerELine(blockOwner, bLangBlockStmt); int blockOwnerECol = this.getBlockOwnerECol(blockOwner, bLangBlockStmt);  boolean isLastStatement = (bLangBlockStmt.stmts.indexOf(node) == (bLangBlockStmt.stmts.size() - 1));  if (line < nodeSLine || (line == nodeSLine && col < nodeSCol) || (isLastStatement && (line < blockOwnerELine || (line == blockOwnerELine && col <= blockOwnerECol)) && (line > nodeELine || (line == nodeELine && col > nodeECol)))) { Map<Name, Scope.ScopeEntry> visibleSymbolEntries = this.resolveAllVisibleSymbols(symbolEnv); this.populateSymbols(visibleSymbolEntries, null); this.terminateVisitor = true; return true; }  return false; } 	0	0	0	0	1	0
private void restoreChildState(FacesContext faces, UIComponent c) { // reset id String id = c.getId(); c.setId(id);  // hack if (c instanceof EditableValueHolder) { EditableValueHolder evh = (EditableValueHolder) c; String clientId = c.getClientId(faces); SavedState ss = this.getChildState().get(clientId); if (ss != null) { ss.apply(evh); } else { String childId = clientId.substring(initialClientId.length() + 1); childId = childId.substring(childId.indexOf(getSeparatorChar(faces)) + 1); childId = initialClientId + getSeparatorChar(faces) + childId; if (initialChildState.containsKey(childId)) { SavedState initialState = initialChildState.get(childId); initialState.apply(evh); } else { NullState.apply(evh); } } }  // continue hack Iterator itr = c.getFacetsAndChildren(); while (itr.hasNext()) { restoreChildState(faces, (UIComponent) itr.next()); } } 	0	0	0	0	1	0
"public static int getHarvestInterval() { return config.getInt(""harvest-interval"", 200); } "	0	0	0	0	1	0
@Override public void showSwipeRefresh() { swipeRefreshLayout.post(postSwipeRefresh); } 	0	0	0	0	1	0
@Override public Area.Shape reduce(Area.Shape reduced, Area.Shape value) { Area.Shape res = new Area().new Shape(); res.rgba = new float[4]; convexCombine(value.rgba, reduced.rgba, res.rgba); return res; } 	0	0	0	0	1	0
@Override @SideOnly(Side.CLIENT) public boolean addHitEffects (IBlockState state, World worldObj, RayTraceResult target, EffectRenderer effectRenderer) { if (state.getValue(FACING) == target.sideHit) return true;  return super.addHitEffects(state, worldObj, target, effectRenderer); } 	0	0	0	0	1	0
private void checkFixedCoefficients() { String[] names = getRegressionVariableNames(TsFrequency.Undefined); Arrays.sort(names); List<String> toremove = fcoeff.keySet().stream().filter(s -> Arrays.binarySearch(names, s) < 0).collect(Collectors.toList()); toremove.forEach(s -> fcoeff.remove(s)); } 	0	0	0	0	1	0
"public void invoke(Variants vars) { vars.addVariant(""Swing"", ((Language) SNodeOperations.getModel(SLinkOperations.getTarget(new Variant_CustomApplicationPlugin.QuotationClass_ks96zg_a0a0a0a0b0a0a0a0a0().createNode(), ""plugin"", false)).getModelDescriptor().getModule())); } "	0	0	0	0	1	0
"@Override public boolean resolve(Combat c, Character target) { Clothing clothing = null; if (getSelf().human()) { Optional<Clothing> stripped = getSelf().getOutfit().getEquipped().stream().filter(article -> article.getName().equals(choice)).findAny(); if (stripped.isPresent()) { clothing = getSelf().getOutfit().unequip(stripped.get()); c.getCombatantData(getSelf()).addToClothesPile(clothing); } } else { NPC self = (NPC) getSelf(); HashMap<Clothing, Float> checks = new HashMap<>(); float selfFit = self.getFitness(c); float otherFit = self.getOtherFitness(c, target); getSelf().getOutfit().getAllStrippable().stream().forEach(article -> { float rating = self.rateAction(c, selfFit, otherFit, (newCombat, newSelf, newOther) -> { newSelf.strip(article, newCombat); return true; }); checks.put(article, rating); }); if (Global.isDebugOn(DebugFlags.DEBUG_SKILLS)) { checks.entrySet().stream().forEach(entry -> { System.out.println(""Stripping "" + entry.getKey() + "": "" + entry.getValue()); }); } Clothing best = checks.entrySet().stream().max((first, second) -> { float test = second.getValue() - first.getValue(); if (test < 0) { return -1; } if (test > 0) { return 1; } return 0; }).get().getKey(); getSelf().strip(best, c); clothing = best; } if (clothing == null) { c.write(getSelf(), ""Skill failed...""); } else { c.write(getSelf(), Global.format(String.format(""{self:SUBJECT} strip off %s %s."", getSelf().possessivePronoun(), clothing.getName()), getSelf(), target)); } return true; } "	0	0	0	0	1	0
"private ArrayList<ResultDescription> parseIndividualMW(JsonObject obj, String className, ArrayList<ResultDescription> descArray){ ArrayList<ResultDescription> classArray = new ArrayList<>(); if (obj.has(""deaths_"" + className)) classArray.add(new ResultDescription(""Deaths ("" + className + "")"", obj.get(""deaths_"" + className).getAsString())); if (obj.has(""kills_"" + className)) classArray.add(new ResultDescription(""Kills ("" + className + "")"", obj.get(""kills_"" + className).getAsString())); if (obj.has(""finalDeaths_"" + className)) classArray.add(new ResultDescription(""Final Deaths ("" + className + "")"", obj.get(""finalDeaths_"" + className).getAsString())); if (obj.has(""finalKills_"" + className)) classArray.add(new ResultDescription(""Final Kills ("" + className + "")"", obj.get(""finalKills_"" + className).getAsString())); if (obj.has(""wins_"" + className)) classArray.add(new ResultDescription(""Games Won ("" + className + "")"", obj.get(""wins_"" + className).getAsString())); if (obj.has(""losses_"" + className)) classArray.add(new ResultDescription(""Games Lost ("" + className + "")"", obj.get(""losses_"" + className).getAsString())); if (classArray.size() > 0){ StringBuilder msg = new StringBuilder(); for (ResultDescription t : classArray){ msg.append(t.get_title()).append("": "").append(t.get_result()).append(""<br />""); } descArray.add(new ResultDescription(className + "" Statistics"", ""Click here to view "" + className + "" Statistics"", true, false, msg.toString())); } else { descArray.add(new ResultDescription(className + "" Statistics"", ""Click here to view "" + className + "" Statistics"", true, false, ""You do not have any statistics for this class yet!"")); } return descArray; } "	0	0	0	0	1	0
public void add(double datum) { sorted = false; if (n < k) { heap[n++] = datum; if (n == k) { heapify(heap); } } else { n++; if (datum < heap[0]) { heap[0] = datum; SortUtils.siftDown(heap, 0, k-1); } } } 	0	0	0	0	1	0
public Object getConsole() { return System.console() != null ? System.console() : new PseudoConsole(System.in, System.out, StandardCharsets.UTF_8); } 	0	0	0	0	1	0
@Override public void onImageUnavailable(Object key, Exception exception) { // Find the corresponding pending image  final PendingImage pendingImage = mPendingTable.remove(key);  if (pendingImage == null) { return; }  // Notify the end consumer pendingImage.consumer.onImageUnavailable(key, exception); } 	0	0	0	0	1	0
private Subscriber<List<Article>> newInstance() { return new Subscriber<List<Article>>() { @Override public void onCompleted() {  }  @Override public void onError(Throwable e) { e.printStackTrace(); mSwipeRefreshLayout.setRefreshing(false); mSwipeRefreshLayout.setEnabled(false); Snack(getString(R.string.db_error)); }  @Override public void onNext(List<Article> articles) { lists.addAll(articles); SortUtil.StoreComparator comparator = new SortUtil.StoreComparator(); Collections.sort(lists, comparator); adapter.notifyDataSetChanged(); mSwipeRefreshLayout.setRefreshing(false); mSwipeRefreshLayout.setEnabled(false); if (lists.size()==0) { Snack(getString(R.string.no_history)); } } }; } 	0	0	0	0	1	0
"public static void addDeflateSignatureToHTTPQueryString(StringBuilder httpQueryString, X509Credential credential) throws SSOException { try { httpQueryString.append(""&SigAlg=""). append(URLEncoder.encode(XMLSignature.ALGO_ID_SIGNATURE_RSA, Constants.UTF8_ENC).trim());  java.security.Signature signature = java.security.Signature.getInstance(""SHA1withRSA""); signature.initSign(credential.getPrivateKey()); signature.update(httpQueryString.toString().getBytes(Charset.forName(Constants.UTF8_ENC))); byte[] signatureByteArray = signature.sign();  String signatureBase64EncodedString = Base64.encodeBytes(signatureByteArray, Base64.DONT_BREAK_LINES); httpQueryString.append(""&Signature=""). append(URLEncoder.encode(signatureBase64EncodedString, Constants.UTF8_ENC).trim()); } catch (NoSuchAlgorithmException | InvalidKeyException | java.security.SignatureException | UnsupportedEncodingException e) { throw new SSOException(""Error applying SAML 2.0 Redirect Binding signature"", e); } } "	0	0	0	0	1	0
"@Override public void build( @NotNull PantsBuildTarget target, @NotNull DirtyFilesHolder<PantsSourceRootDescriptor, PantsBuildTarget> holder, @NotNull BuildOutputConsumer outputConsumer, @NotNull final CompileContext context ) throws ProjectBuildException, IOException { final String targetAbsolutePath = target.getTargetPath(); final File pantsExecutable = findPantsExecutable(targetAbsolutePath);  if (!holder.hasDirtyFiles() && !JavaBuilderUtil.isForcedRecompilationAllJavaModules(context)) { context.processMessage(new CompilerMessage(PantsConstants.PANTS, BuildMessage.Kind.INFO, ""No changes to compile."")); return; }  if (pantsExecutable == null) { context.processMessage(new CompilerMessage(PantsConstants.PANTS, BuildMessage.Kind.ERROR, ""Failed to find Pants executable!"")); LOG.error(""Failed to find Pants executable for: "" + target); return; }  final GeneralCommandLine commandLine = PantsUtil.defaultCommandLine(pantsExecutable); commandLine.addParameters(""goal""); if (JavaBuilderUtil.isForcedRecompilationAllJavaModules(context)) { commandLine.addParameter(""clean-all""); } commandLine.addParameters(""compile""); final String targetRelativePath = PantsUtil.getRelativeProjectPath(pantsExecutable.getParentFile(), new File(targetAbsolutePath)); if (target.isAllTargets()) { commandLine.addParameter(targetRelativePath + ""::""); } else { for (String targetName : target.getTargetNames()) { commandLine.addParameter(targetRelativePath + "":"" + targetName); } }  context.processMessage(new ProgressMessage(commandLine.getCommandLineString(""pants"")));  final Process process; try { commandLine.addParameters(""--no-color""); process = commandLine.createProcess(); } catch (ExecutionException e) { throw new ProjectBuildException(e); } final CapturingProcessHandler processHandler = new CapturingProcessHandler(process); processHandler.addProcessListener( new ProcessAdapter() { @Override public void onTextAvailable(ProcessEvent event, Key outputType) { super.onTextAvailable(event, outputType); context.processMessage(getCompilerMessage(event, outputType)); } } ); final ProcessOutput processOutput = processHandler.runProcess(); processOutput.checkSuccess(LOG); } "	0	0	0	0	1	0
@SideOnly(Side.CLIENT) public ResourceLocation[] getItemVariants() { return new ResourceLocation[] { ForgeRegistries.ITEMS.getKey(this) }; } 	0	0	0	0	1	0
@Override public void addDisplayFeaturesToGWAS(int chr, Collection<DisplayFeature> features) { GWASViewer viewer = (GWASViewer) container.getWidget(chr - 1); for (DisplayFeature feature : features) { viewer.addDisplayFeature(feature, true); } viewer.refresh(); } 	0	0	0	0	1	0
@Test public void testTrustGenesis() { assertEquals(TrustValues.INITIALIZED.getValue(), genesisBlockA.getTrustValue()); } 	0	0	0	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_momentview);  context = this; mediaViewGroup = (ViewGroup) findViewById(R.id.linearlayout_momentview_media); momentManager = new MomentManager(this);  googleApiClient = new GoogleApiClient.Builder(this) .enableAutoManage(this, this) .addConnectionCallbacks(this) .addApi(Drive.API) .addScope(Drive.SCOPE_APPFOLDER) .build(); hasDownloadedMedia = false; mediaChangeReceiver = new BroadcastReceiver() { @Override public void onReceive(Context context, Intent intent) { DriveId driveId = intent.getParcelableExtra(MediaChangeEventService.DRIVE_ID); getLoaderManager().restartLoader(LOADER_ID, null, MomentViewActivity.this); displayMedia(driveId); } }; registerReceiver(mediaChangeReceiver, new IntentFilter(MediaChangeEventService.ACTION));  toolbar = (Toolbar) findViewById(R.id.tool_bar_momentview); layoutMedia = (LinearLayout) findViewById(R.id.linearlayout_momentview_media);  momentId = (UUID) getIntent().getSerializableExtra(MOMENT_ID); } 	0	0	0	0	1	0
"@Test public void selectClient_hugeNumOfModOps_noException() throws Exception { // Arrange  // set up the object under test EVCacheNodeList evCacheNodeList = mock(EVCacheNodeList.class); EVCacheClientPoolManager evCacheClientPoolManager = mock(EVCacheClientPoolManager.class);  EVCacheClientPool evCacheClientPool = new EVCacheClientPool(""in a unit test"", evCacheNodeList, (ThreadPoolExecutor)Executors.newSingleThreadExecutor(), evCacheClientPoolManager); FieldUtils.writeField(evCacheClientPool, ""numberOfModOps"", new AtomicLong(0xFFFF_FFFF_FFFF_FFFFL), true);  // Set up the method arguments EVCacheClient client1 = mock(EVCacheClient.class); EVCacheClient client2 = mock(EVCacheClient.class); List<EVCacheClient> clientsList = new ArrayList<>(); clientsList.add(client1); clientsList.add(client2);  // Ensure it's accessible // Yes it's private but this is a real bug we fixed. Method method = evCacheClientPool.getClass().getDeclaredMethod(""selectClient"", List.class); method.setAccessible(true);  // Act Object ret = method.invoke(evCacheClientPool, clientsList);  // Assert // The number set in numOfModOps should roll over to 0x1_0000_0000_0000_0000 // so we should get client1 back EVCacheClient selected = (EVCacheClient) ret; assertSame(selected, client1); } "	0	0	0	0	1	0
"public static Text getExecutivePrefix(String teamName) { return TextSerializers.FORMATTING_CODE.deserialize(Configs.getConfig(messageConfig).getNode(""polis"", ""prefix"", ""member"").getString().replaceAll(""@t"", teamName)); } "	0	0	0	0	1	0
"@Test public void testStructuredAbstract2()throws Exception { Map<String, String> readerConfig = new HashMap<String, String>(); readerConfig.put(XMLReader.PARAM_INPUT_FILE, ""src/test/resources/25556833.xml""); Map<String, String> readerExtRes = new HashMap<String, String>(); readerExtRes.put(EXT_RES_KEY, XMLReader.RESOURCE_MAPPING_FILE); readerExtRes.put(EXT_RES_NAME, ""MappingFile""); readerExtRes.put(EXT_RES_URL, ""file:medlineMappingFileStructuredAbstract.xml""); CollectionReader xmlReader = createCollectionReaderWithDescriptor(TEST_DESC_PATH, readerConfig, readerExtRes); CAS cas = CasCreationUtils.createCas((AnalysisEngineMetaData) xmlReader.getMetaData()); assertTrue(xmlReader.hasNext());  xmlReader.getNext(cas); JCas jCas = cas.getJCas();  FSIterator<Annotation> it = jCas.getAnnotationIndex(AbstractSection.type).iterator(); assertTrue(it.hasNext()); int numAbstractSections = 0; while(it.hasNext()) { AbstractSection as = (AbstractSection) it.next(); if (numAbstractSections == 0) { assertTrue(as.getCoveredText().startsWith(""Neuronal development requires"")); assertTrue(as.getCoveredText().endsWith(""in the neocortex."")); assertNotNull(as.getAbstractSectionHeading()); AbstractSectionHeading heading = (AbstractSectionHeading) as.getAbstractSectionHeading(); assertEquals(""UNLABELLED"", heading.getLabel()); assertNull(heading.getNlmCategory()); } if (numAbstractSections == 2) { assertTrue(StringUtils.isBlank(as.getCoveredText())); assertNotNull(as.getAbstractSectionHeading()); AbstractSectionHeading heading = (AbstractSectionHeading) as.getAbstractSectionHeading(); assertEquals(""VIDEO ABSTRACT"", heading.getLabel()); assertEquals(""UNASSIGNED"", heading.getNlmCategory()); } ++numAbstractSections; } assertEquals(2, numAbstractSections);  it = jCas.getAnnotationIndex(AbstractText.type).iterator(); assertTrue(it.hasNext()); AbstractText at = (AbstractText) it.next(); assertFalse(it.hasNext()); assertTrue(at.getCoveredText().startsWith(""Neuronal development requires"")); assertTrue(at.getCoveredText().endsWith(""in the neocortex."")); assertEquals(2, at.getStructuredAbstractParts().size()); } "	0	0	0	0	1	0
private SearchContext getSearchContext(PageObjectContext context, Field field) { SearchContext searchContext = webDriver; ElementLocatorFactory elementLocatorFactory = context.getElementLocatorFactory(); if (elementLocatorFactory instanceof ParentElementLocatorProvider && !AnnotationsHelper.isGlobal(field)) { searchContext = ((ParentElementLocatorProvider) elementLocatorFactory).getCurrentScope().findElement(); } return searchContext; } 	0	0	0	0	1	0
@Override public PartitionCursor prepareCursor(JournalReaderFactory factory) { try { this.journal = factory.reader(metadata); } catch (JournalException e) { throw new JournalRuntimeException(e); } storageFacade.of(metadata); partitionCount = journal.getPartitionCount(); partitionIndex = 0; return this; } 	0	0	0	0	1	0
"private Map<String, FieldValueRecommender> createConfig() { Map<String, FieldValueRecommender> config = Maps.newHashMap(); Set<String> attributesToIgnore = Sets.newHashSet(); attributesToIgnore.addAll(Arrays.asList(""browser"", ""eap"", ""destinationId"", ""seenPixel"", ""internalCreativeId"")); double probabilityOfDiscardingFromAttributesToIgnore = 0.3; CompositeAttributeIgnoringStrategy compositeAttributeIgnoringStrategy = new CompositeAttributeIgnoringStrategy(Arrays.asList( new IgnoreAttributesWithConstantProbability(0.7), new IgnoreAttributesInSet(attributesToIgnore, probabilityOfDiscardingFromAttributesToIgnore) )); config.put(ATTRIBUTE_IGNORING_STRATEGY, new FixedOrderRecommender(new IgnoreAttributesWithConstantProbability(0.7), compositeAttributeIgnoringStrategy )); config.put(NUM_TREES, new MonotonicConvergenceRecommender(asList(20))); config.put(MAX_DEPTH, new FixedOrderRecommender( 4, 8, 16));//Integer.MAX_VALUE, 2, 3, 5, 6, 9)); config.put(MIN_SCORE, new FixedOrderRecommender(0.00000000000001));//, Double.MIN_VALUE, 0.0, 0.000001, 0.0001, 0.001, 0.01, 0.1)); config.put(MIN_OCCURRENCES_OF_ATTRIBUTE_VALUE, new FixedOrderRecommender(2, 11, 16, 30 )); config.put(MIN_LEAF_INSTANCES, new FixedOrderRecommender(0, 20, 40)); config.put(SCORER, new FixedOrderRecommender(new InformationGainScorer(), new GiniImpurityScorer())); config.put(DEGREE_OF_GAIN_RATIO_PENALTY, new FixedOrderRecommender(1.0, 0.75, .5 )); return config; } "	0	0	0	0	1	0
"@Test public void testResultsForHyphenedWord() throws JSONException { SearchHits hits = search(""_all"", ""Roemermuseum"").getHits(); JSONObject firstHit = new JSONObject(hits.getAt(0).sourceAsString()); assertEquals(""Roemer-Museum"", firstHit.get(""name"")); } "	0	0	0	0	1	0
"public final void annotationSucceeded(final Annotation annotation) { this.markerHelper.markSucceededStatement(annotation, ""Annotation succeeded""); } "	0	0	0	0	1	0
"@RequestMapping(value = ""/create"", method = RequestMethod.POST, params = ""create"") public ModelAndView create(@Valid CompanyForm companyForm, BindingResult binding) { ModelAndView result; Company company;  if (binding.hasErrors()) { result = new ModelAndView(""company/edit""); result.addObject(""companyForm"", companyForm); result.addObject(""message"", null); result.addObject(""register"", true); } else { try { if (companyForm.getExpirationYear() < Calendar.getInstance() .get(Calendar.YEAR)) { result = new ModelAndView(""company/edit""); result.addObject(""companyForm"", companyForm); result.addObject(""oldYear"", true); result.addObject(""register"", true); } else if (!companyForm.getPassword().equals( companyForm.getPasswordConfirm())) { result = new ModelAndView(""company/edit""); result.addObject(""companyForm"", companyForm); result.addObject(""message"", ""company.commit.password""); result.addObject(""register"", true); } else { company = companyService.reconstruct(companyForm); companyService.register(company,companyForm.getInvitationCode()); result = new ModelAndView(""redirect:../index.do""); } } catch (Throwable oops) {  result=createEditModelAndView(companyForm, ""company.commit.error""); oops.printStackTrace();  } }  return result; } "	0	0	0	0	1	0
@Override public void render() { activeWorld.render(batch); } 	0	0	0	0	1	0
@Override public String getTaskName() { if(StringUtils.hasText(configuredName)) { return configuredName; } else { return context.getId(); } } 	0	0	0	0	1	0
private int getHowMuchIsLeftToScroll(int dx) { return (scrollToChangeTheCurrent - Math.abs(scrolled)) * dxToDirection(dx); } 	0	0	0	0	1	0
private boolean isAnotherItemCloserThanCurrent() { return Math.abs(scrolled) >= scrollToChangeTheCurrent * 0.6f; } 	0	0	0	0	1	0
"@Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public Map<String, Long> getTechnologyIdMap(List<Technology> technologies) { StringBuilder query = new StringBuilder(""""); StringBuilder techList = new StringBuilder("""");  for (int a = 0; a < technologies.size(); a++) { techList.append((""'"" + technologies.get(a).getName() + ""'"")); if (a != technologies.size() - 1) { techList.append("",""); } } System.out.println(techList.toString()); query.append(""SELECT id, technology \n""); query.append(""FROM technology \n""); query.append(""WHERE technology in (""); query.append(techList.toString() + "")"");  RowMapper<String> mapper = new RowMapper<String>() { @Override public String mapRow(ResultSet resultSet, int i) throws SQLException { String idNameStr = """"; idNameStr = resultSet.getString(""id"") + "","" + resultSet.getString(""technology"").toLowerCase(); return idNameStr; } };  List<String> techIds = null;  try { techIds = getNamedParameterJdbcTemplate().query(query.toString(), mapper); System.out.println(techIds.size()); } catch (NullPointerException e) { System.out.println(""Null Pointer Exception""); }  Map<String, Long> techIdMap = new HashMap<String, Long>();  for (String techId : techIds) { String[] idAndName = techId.trim().split("",""); techIdMap.put(idAndName[1], Long.parseLong(idAndName[0])); }   return techIdMap; } "	0	0	0	0	1	0
public int genMiningColomnY(int current) { int r = this.yCoord-2; while(--r >= 0) { Block b = worldObj.getBlock(xCoord, r, zCoord); if((b != null && b != Blocks.air && !(b instanceof BlockLiquid && ignoreLiquids) && this.canMineBlock(b)) && this.canMineBlock(b)) { return r; } } return current; } 	0	0	0	0	1	0
public final void addRecipeToLibrary(RecipeLibrary recipeToAdd) { this.recipe = recipeToAdd; } 	0	0	0	0	1	0
public void populateResults() { wordCounterDB.storeInput(wordCounter.getWordCountMap(), null, null, null); uniqueResult.setText(String.valueOf(wordCounter.distinctWordCount())); totalCountResult.setText(String.valueOf(wordCounter.totalWordCount())); mostWordResult.setText(String.valueOf(wordCounter.mostCommonWord)); String appearanceRateString = String.valueOf((int) (100 * wordCounter.appearanceRate)) + '%'; appearanceResult.setText(appearanceRateString); } 	0	0	0	0	1	0
"@Override public void networkException(ExitCode reason) { try { System.out.println(NAME + ""Failed to use http tunneling. Stopping.""); stop(); notifyNetworkConnectionListener(reason); } catch (ConnectionException e) { // TODO Auto-generated catch block e.printStackTrace(); } } "	0	0	0	0	1	0
public HeaderDTO apply(Header header) { return new HeaderDTO(header); } 	0	0	0	0	1	0
"public String convertIndexToColorName(int colorIndex) { SparseArray<String> colors = new SparseArray<>(); colors.put(0, ""green""); colors.put(1, ""orange""); colors.put(2, ""red""); colors.put(3, ""blue""); colors.put(4, ""indigo""); colors.put(5, ""blue_grey""); colors.put(6, ""cyan""); colors.put(7, ""teal"");  String colorName = colors.get(colorIndex); if (colorName != null) return colorName; else return ""green""; } "	0	0	0	0	1	0
"public int convertColorNameToIndex(String colorName) { HashMap<String, Integer> colors = new HashMap<>(); colors.put(""green"", 0); colors.put(""orange"", 1); colors.put(""red"", 2); colors.put(""blue"", 3); colors.put(""indigo"", 4); colors.put(""blue_grey"", 5); colors.put(""cyan"", 6); colors.put(""teal"", 7);  Integer colorId = colors.get(colorName); if (colorId != null) return colorId; else return 1; } "	0	0	0	0	1	0
private ActorRef mediaResourceBroker(final Configuration configuration, final DaoManager storage, final ClassLoader loader) throws UnknownHostException{ return system.actorOf(new Props(new UntypedActorFactory() { private static final long serialVersionUID = 1L;  @Override public UntypedActor create() throws Exception { return new MediaResourceBroker(configuration, storage, loader); } })); } 	0	0	0	0	1	0
@Bean RabbitTemplate rabbitTemplate() { RabbitTemplate template = new RabbitTemplate(rabbitConnectionFactory); template.setMessageConverter(messageConverter()); template.setRetryTemplate(retryTemplate()); return template; } 	0	0	0	0	1	0
"@Override public void start(Stage stage) {  Platform.setImplicitExit(false); javax.swing.SwingUtilities.invokeLater(this::setTrayIcon);  this.stage = stage; stage.getIcons().addAll(new Image(""/images/icon128.png""), new Image(""/images/icon16.png"")); stage.setOnCloseRequest(event -> stage.hide());  DatabaseService databaseService = new SqliteDatabaseService(); AviasalesService aviasalesService = new DefaultAviasalesService(); SchedulerService schedulerService = new DefaultSchedulerService(); NotificationService notificationService = new DefaultNotificationService();  model = new Model(aviasalesService, databaseService, notificationService, schedulerService); model.initialize();  showTripList(); } "	0	0	0	0	1	0
@Override public boolean hasNext() { return !this.traverserSet.isEmpty() || this.hostStep.getPreviousStep().hasNext(); } 	0	0	0	0	1	0
@Override public void paint(Graphics g) { super.paintComponents(g); g.setPaintMode(); if(g instanceof Graphics2D) { Graphics2D g2 = (Graphics2D)g; g2.setStroke(new BasicStroke(3)); g2.setColor(new Color(178, 102, 255)); g2.drawRoundRect(150, 150, 50, 50, 5, 5); } else { g.setColor(Color.BLUE); g.drawRect(150, 150, 50, 50); } } 	0	0	0	0	1	0
@Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) { View view = onCreateView(inflater, container, R.layout.add_drop_fragment_meta);  setAdapter(adapter);  setHasOptionsMenu(true);  clearSelectionButton = ((Button) view.findViewById(R.id.clearSelectionButton)); clearSelectionButton.setOnClickListener(view1 -> ((AddDropMainActivity) getActivity()).clearSelection(categoryPosition));  return view; } 	0	0	0	0	1	0
"@Override public String getDisplayStringNullSafe(VnicProfileView profile) { if (profile == VnicProfileView.EMPTY) { return templates.typeAheadNameDescription(messages.emptyProfile().asString(), messages.emptyProfileDescription().asString()).asString(); }  String profileDescription = profile.getDescription(); String profileAndNetwork = messages.profileAndNetwork(profile.getName(), profile.getNetworkName()).asString();  return templates.typeAheadNameDescription(profileAndNetwork, profileDescription != null ? profileDescription : """").asString(); //$NON-NLS-1$ } "	0	0	0	0	1	0
@Override public void saveData(PilotStatsStruct[] data) { if (getView() == null || data == null || !displayed) return;  for (int i=0; i<2; i++) { data[i].gears_lifed = liftS[i].getSelectedItemPosition(); data[i].gears_installed_2 = gearInstallS[1][i].getSelectedItemPosition(); data[i].gears_installed_3 = gearInstallS[2][i].getSelectedItemPosition(); data[i].gears_installed_4 = gearInstallS[3][i].getSelectedItemPosition(); data[i].rotor_1_started = rotorC[0][i].isChecked(); data[i].rotor_2_started = rotorC[1][i].isChecked(); data[i].rotor_3_started = rotorC[2][i].isChecked(); data[i].rotor_4_started = rotorC[3][i].isChecked(); } } 	0	0	0	0	1	0
public static Message unwrap(JournalEntry entry) { switch (entry.getEntryCase()) { case ADD_MOUNT_POINT: return entry.getAddMountPoint(); case BLOCK_CONTAINER_ID_GENERATOR: return entry.getBlockContainerIdGenerator(); case BLOCK_INFO: return entry.getBlockInfo(); case COMPLETE_FILE: return entry.getCompleteFile(); case DELETE_FILE: return entry.getDeleteFile(); case DELETE_LINEAGE: return entry.getDeleteLineage(); case DELETE_MOUNT_POINT: return entry.getDeleteMountPoint(); case INODE_DIRECTORY: return entry.getInodeDirectory(); case INODE_DIRECTORY_ID_GENERATOR: return entry.getInodeDirectoryIdGenerator(); case INODE_FILE: return entry.getInodeFile(); case INODE_LAST_MODIFICATION_TIME: return entry.getInodeLastModificationTime(); case LINEAGE: return entry.getLineage(); case LINEAGE_ID_GENERATOR: return entry.getLineageIdGenerator(); case PERSIST_DIRECTORY: return entry.getPersistDirectory(); case ASYNC_PERSIST_REQUEST: return entry.getAsyncPersistRequest(); case REINITIALIZE_FILE: return entry.getReinitializeFile(); case RENAME: return entry.getRename(); case SET_ATTRIBUTE: return entry.getSetAttribute(); case COMPLETE_PARTITION: return entry.getCompletePartition(); case COMPLETE_STORE: return entry.getCompleteStore(); case CREATE_STORE: return entry.getCompleteStore(); case DELETE_STORE: return entry.getDeleteStore(); case MERGE_STORE: return entry.getMergeStore(); case ENTRY_NOT_SET: // This could mean that the field was never set, or it was set with a different version of // this message. Given the history of the JournalEntry protobuf message, the keys of the // unknown fields should be enough to figure out which version of JournalEntry is needed to // understand this journal. throw new RuntimeException( ExceptionMessage.NO_ENTRY_TYPE.getMessage(entry.getUnknownFields().asMap().keySet())); default: throw new IllegalStateException( ExceptionMessage.UNKNOWN_JOURNAL_ENTRY_TYPE.getMessage(entry.getEntryCase())); } } 	0	0	0	0	1	0
"@Test public void testGetConnectionDetails() throws Exception { IDPConnectManager idpcm = DexConnectionManager.getInstance(); assertEquals(""Domain"", idpcm.getConnectionDetails().get(""domain""), ""gaia-local.skydns.local""); assertEquals(""internalDexUrl"", idpcm.getConnectionDetails().get(""internalDexUrl""), ""http://dexworker.skydns.local:5556""); assertEquals(""externalDexUrl"", idpcm.getConnectionDetails().get(""externalDexUrl""), ""https://gaia-local.skydns.local:88""); assertEquals(""discoveryUrl"", idpcm.getConnectionDetails().get(""discoveryUrl""), ""http://dexworker.skydns.local:5556/.well-known/openid-configuration""); } "	0	0	0	0	1	0
private JsonObject getParentJson(JsonObject jobj, Node node) { if ((node == root.getConnection().node)) return jobj; else return getParentJson(jobj, node.getParent()).get(node.getParent().getName()); } 	0	0	0	0	1	0
"@RequestMapping(headers = {""Accept=application/json""}, method = POST, value = ""/form-submissions"") public ResponseEntity<HttpStatus> submitForms(@RequestBody List<FormSubmissionDTO> formSubmissionsDTO) { try { if (formSubmissionsDTO.isEmpty()) { return new ResponseEntity<>(BAD_REQUEST); }  scheduler.notifyEvent(new SystemEvent<>(AllConstants.OpenSRPEvent.FORM_SUBMISSION, formSubmissionsDTO));  try{  ////////TODO MAIMOONA : SHOULD BE IN EVENT but event needs to be moved to web so for now kept here String json = new Gson().toJson(formSubmissionsDTO); System.out.println(""MMMMMMMMMMMYYYYYYYYYYYYYY::""+json); List<FormSubmissionDTO> formSubmissions = new Gson().fromJson(json, new TypeToken<List<FormSubmissionDTO>>() { }.getType()); List<FormSubmission> fsl = with(formSubmissions).convert(new Converter<FormSubmissionDTO, FormSubmission>() { @Override public FormSubmission convert(FormSubmissionDTO submission) { return FormSubmissionConverter.toFormSubmission(submission); } }); for (FormSubmission formSubmission : fsl) { try{ addFormToOpenMRS(formSubmission); } catch(Exception e){ e.printStackTrace(); ErrorTrace errorTrace=new ErrorTrace(new Date(), ""Parse Exception"", """", e.getStackTrace().toString(), ""Unsolved"", formSubmission.formName()); errorTrace.setRecordId(formSubmission.instanceId()); errorTraceService.addError(errorTrace); } } } catch(Exception e){ e.printStackTrace(); } logger.debug(format(""Added Form submissions to queue.\nSubmissions: {0}"", formSubmissionsDTO)); } catch (Exception e) { logger.error(format(""Form submissions processing failed with exception {0}.\nSubmissions: {1}"", e, formSubmissionsDTO)); return new ResponseEntity<>(INTERNAL_SERVER_ERROR); } return new ResponseEntity<>(CREATED); } "	0	0	0	0	1	0
"@EntityCustomAction(viewKey = EntityView.VIEW_LIST) public ActionReturn getGroups(Map<String, Object> params) { if(logger.isDebugEnabled()) logger.debug(""Getting Groups"");  String meetingID = (String) params.get(""meetingID""); if (meetingID == null) { throw new IllegalArgumentException(""Missing required parameter [meetingID]""); }  //Get meeting BBBMeeting meeting = null; try { meeting = meetingManager.getMeeting(meetingID); } catch (Exception e) { return null; }  Site site; try { site = siteService.getSite(meeting.getSiteId()); } catch (IdUnusedException e) { logger.error(""Unable to get groups in '"" + meeting.getName() + ""'."", e); return null; }  //Get user's group ids List<String> groupIds = new ArrayList<String>(); if (meetingManager.getCanEdit(meeting.getSiteId(), meeting)) { for(Group g : site.getGroups()) groupIds.add(g.getId()); } else { groupIds = meetingManager.getUserGroupIdsInSite(userDirectoryService.getCurrentUser().getId(), meeting.getSiteId()); }  Map<String, Object> groups = new HashMap<String, Object>();  for(int i = 0; i < groupIds.size(); i++){ Map<String, String> groupInfo = new HashMap<String, String>(); Group group = site.getGroup(groupIds.get(i));  groupInfo.put(""groupId"", groupIds.get(i)); groupInfo.put(""groupTitle"", group.getTitle()); groups.put(""group"" + i, groupInfo); }  return new ActionReturn(groups); } "	0	0	0	0	1	0
public Graphviz scale(double scale) { return new Graphviz(src, engineImpl, rasterizer, 0, 0, scale); } 	0	0	0	0	1	0
public boolean deactivateTopology(String stormTopologyId, String asUser) { Map result = doPostRequestWithEmptyBody(getTopologyDeactivateUrl(stormTopologyId, asUser)); return isPostOperationSuccess(result); } 	0	0	0	0	1	0
@Override public void enterStringLiteral( StringLiteralContext stringLiteralContext ) { expressionStack.push( stringLiteralContext.getChild( 1 ).getText() ); } 	0	0	0	0	1	0
"@Test public void loginTest(){  LoginReq loginReq = new LoginReq(); loginReq.uid = ""ddd""; loginReq.password = ""ddd""; BaseResp baseResp = userController.login(loginReq); //BaseResp baseResp = new BaseResp(BaseResp.SUCCESS); //userController.login(loginReq); assert baseResp.errCode == BaseResp.SUCCESS;  } "	0	0	0	0	1	0
public boolean touch() { return client.touch(resourceW.index()); } 	0	0	0	0	1	0
public JsonObject toJSONObject() { JsonObject jsonObject = new JsonObject(); jsonObject.addProperty(PARTNER_ID, partnerId); jsonObject.addProperty(UICONF_ID, uiconfId); jsonObject.addProperty(ENTRY_ID, entryId); jsonObject.addProperty(BASE_URL, baseUrl); jsonObject.addProperty(USER_ID, userId); jsonObject.addProperty(CONTEXT_ID, contextId); jsonObject.addProperty(TIMER_INTERVAL_MILLIS, timerIntervalMillis);  return jsonObject; } 	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.locker_activity_main); findViewById(R.id.rent_locker_button).setOnClickListener(v -> { if (adapter.getItemCount() >= MAX_LOCKERS) { new AlertDialog.Builder(this).setMessage(R.string.max_lockers).setPositiveButton(""OK"", null).show(); } else { startActivityForResult(new Intent(this, BuildingActivity.class), IF_THEY_RENT_A_LOCKER_LET_ME_KNOW); } }); viewSwitcher = (ViewSwitcher) findViewById(R.id.viewSwitcher); ((ByuRecyclerView) viewSwitcher.getChildAt(RECYCLER_VIEW)).setAdapter(adapter);  api = new LockerRentalClient().getApi(this); loadRentedLockers(); } "	0	0	0	0	1	0
@Override public final void stop() throws Exception { if(clientContext != null) { try { clientContext.disconnect().get(); onShutdown(); } catch (Exception e) { onShutdownException(new ClientShutdownException(e)); } } } 	0	0	0	0	1	0
private String[] separateValues(final String values, final String separator) { return values.split(separator); } 	0	0	0	0	1	0
"private static void testDownloadInfo(NetEaseService netEaseService) throws Exception { long songID = 28240577L; NESongDetails songDetails = netEaseService.getSongDetails(singletonList(songID)).get(songID); NEDownloadInfo downloadInfo = netEaseService.getDownloadInfo(songDetails); System.out.printf(""URL: %s%nBitrate: %s%n"", downloadInfo.url, downloadInfo.bitrate); } "	0	0	0	0	1	0
private void drag2(final MotionEvent shapeEvent) {   final int[] xy = new int[2]; getLocationOnScreen(xy);   final float newWidth = shapeEvent.getRawX() - xy[0];   resize(newWidth, getHeightWithScale()); } 	0	0	0	0	1	0
private void drag1(final MotionEvent shapeEvent) {  final int[] xy = new int[2]; getLocationOnScreen(xy);   final float newHeight = (getHeight() * mScaleYFactor) + (xy[1] - shapeEvent.getRawY());  resize(getWidthWithScale(), newHeight); } 	0	0	0	0	1	0
private void init() {  mAspectRatios = ResizeUtil.getResizeFactors(getContext()); mChosenAspectRatio = mAspectRatios.get(0);  final GridLayoutManager gridLayoutManager = new GridLayoutManager(getContext(), 1); gridLayoutManager.setOrientation(HORIZONTAL);   final int spacingInPixels = getResources().getDimensionPixelSize(R.dimen.aspect_ratio_spacing);   addItemDecoration(new SpacesItemDecoration(spacingInPixels)); setLayoutManager(gridLayoutManager); setAdapter(new ResizeFactorAdapter()); setBackgroundColor(Color.GRAY);   } 	0	0	0	0	1	0
private void moveFailedEventToHistory(final M input) { final M newEntry = buildEntry(input, clock.getUTCNow(), PersistentQueueEntryLifecycleState.FAILED, -1); dao.moveEntryToHistory(newEntry); } 	0	0	0	0	1	0
@Override public void onBackPressed() { drawer= (DrawerLayout) findViewById(R.id.drawer_layout); if (drawer.isDrawerOpen(GravityCompat.START)) { drawer.closeDrawer(GravityCompat.START); } else if(mapFrag.sheetBehavior.getState() != BottomSheetBehavior.STATE_HIDDEN ){ mapFrag.sheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN); presenter.bottomSheet(); } else{ super.onBackPressed(); } } 	0	0	0	0	1	0
@Override public boolean onMenuItemClick(MenuItem item) { return takeActionForDevice(item.getItemId(), fragment.getActivity(), device); } 	0	0	0	0	1	0
public void sendMimeMessage(final String to, final String subject, final String messageBody, final String attachmentFileName, final DataSource dataSource) { EmailMessage emailMessage = new EmailMessage(); emailMessage.setTo(to); emailMessage.setSubject(subject); emailMessage.setText(messageBody);  EmailAttachment emailAttachment = new EmailAttachment(); emailAttachment.setAttachmentName(attachmentFileName); emailAttachment.setFileDataSource(dataSource); emailMessage.addEmailAttachment(emailAttachment);  mailSender.send(setUpMimeMessage(emailMessage)); } 	0	0	0	0	1	0
@Override public void onPermissionGranted(PermissionGrantedResponse response) { musicLibraryPresenter.attachView(this); startService(new Intent(this, PlaybackService.class)); } 	0	0	0	0	1	0
public boolean isListDifferentTestable(List<Object> originalList, List<Object> listToCompare) { return super.isListDifferent(originalList, listToCompare); } 	0	0	0	0	1	0
"private void doSendx(ActiveMQDestination destination, final Message jmsMessage, final int deliveryMode, final int priority, final long timeToLive, CompletionListener completionListener) throws JMSException {  jmsMessage.setJMSDeliveryMode(deliveryMode);  jmsMessage.setJMSPriority(priority);  if (timeToLive == 0) { jmsMessage.setJMSExpiration(0); } else { jmsMessage.setJMSExpiration(System.currentTimeMillis() + timeToLive); }  if (!disableMessageTimestamp) { jmsMessage.setJMSTimestamp(System.currentTimeMillis()); } else { jmsMessage.setJMSTimestamp(0); }  SimpleString address = null;  if (destination == null) { if (defaultDestination == null) { throw new UnsupportedOperationException(""Destination must be specified on send with an anonymous producer""); }  destination = defaultDestination; } else { if (defaultDestination != null) { if (!destination.equals(defaultDestination)) { throw new UnsupportedOperationException(""Where a default destination is specified "" + ""for the sender and a destination is "" + ""specified in the arguments to the send, "" + ""these destinations must be equal""); } }  address = destination.getSimpleAddress();  if (!connection.containsKnownDestination(address)) { try { ClientSession.AddressQuery query = clientSession.addressQuery(address);  if (!query.isExists()) { if (destination.isQueue() && query.isAutoCreateQueues()) { clientSession.createAddress(address, RoutingType.ANYCAST, true); if (destination.isTemporary()) { // TODO is it right to use the address for the queue name here? clientSession.createTemporaryQueue(address, RoutingType.ANYCAST, address); } else { clientSession.createQueue(address, RoutingType.ANYCAST, address, null, true, true); } } else if (!destination.isQueue() && query.isAutoCreateAddresses()) { clientSession.createAddress(address, RoutingType.MULTICAST, true); } else if ((destination.isQueue() && !query.isAutoCreateQueues()) || (!destination.isQueue() && !query.isAutoCreateAddresses())) { throw new InvalidDestinationException(""Destination "" + address + "" does not exist""); } } else { connection.addKnownDestination(address); } } catch (ActiveMQQueueExistsException e) { // The queue was created by another client/admin between the query check and send create queue packet } catch (ActiveMQException e) { throw JMSExceptionHelper.convertFromActiveMQException(e); } } }  ActiveMQMessage activeMQJmsMessage;  boolean foreign = false;  // First convert from foreign message if appropriate if (!(jmsMessage instanceof ActiveMQMessage)) { // JMS 1.1 Sect. 3.11.4: A provider must be prepared to accept, from a client, // a message whose implementation is not one of its own.  if (jmsMessage instanceof BytesMessage) { activeMQJmsMessage = new ActiveMQBytesMessage((BytesMessage) jmsMessage, clientSession); } else if (jmsMessage instanceof MapMessage) { activeMQJmsMessage = new ActiveMQMapMessage((MapMessage) jmsMessage, clientSession); } else if (jmsMessage instanceof ObjectMessage) { activeMQJmsMessage = new ActiveMQObjectMessage((ObjectMessage) jmsMessage, clientSession, options); } else if (jmsMessage instanceof StreamMessage) { activeMQJmsMessage = new ActiveMQStreamMessage((StreamMessage) jmsMessage, clientSession); } else if (jmsMessage instanceof TextMessage) { activeMQJmsMessage = new ActiveMQTextMessage((TextMessage) jmsMessage, clientSession); } else { activeMQJmsMessage = new ActiveMQMessage(jmsMessage, clientSession); }  // Set the destination on the original message jmsMessage.setJMSDestination(destination);  foreign = true; } else { activeMQJmsMessage = (ActiveMQMessage) jmsMessage; }  if (!disableMessageID) { // Generate a JMS id  UUID uid = UUIDGenerator.getInstance().generateUUID();  activeMQJmsMessage.getCoreMessage().setUserID(uid);  activeMQJmsMessage.resetMessageID(null); }  if (foreign) { jmsMessage.setJMSMessageID(activeMQJmsMessage.getJMSMessageID()); }  activeMQJmsMessage.setJMSDestination(destination);  try { activeMQJmsMessage.doBeforeSend(); } catch (Exception e) { JMSException je = new JMSException(e.getMessage());  je.initCause(e);  throw je; }  if (defaultDeliveryDelay > 0) { activeMQJmsMessage.setJMSDeliveryTime(System.currentTimeMillis() + defaultDeliveryDelay); }  ClientMessage coreMessage = activeMQJmsMessage.getCoreMessage(); coreMessage.putStringProperty(ActiveMQConnection.CONNECTION_ID_PROPERTY_NAME, connID);  byte routingType = destination.isQueue() ? RoutingType.ANYCAST.getType() : RoutingType.MULTICAST.getType(); coreMessage.putByteProperty(org.apache.activemq.artemis.api.core.Message.HDR_ROUTING_TYPE, routingType);  try { /** * Using a completionListener requires wrapping using a {@link CompletionListenerWrapper}, * so we avoid it if we can. */ if (completionListener != null) { clientProducer.send(address, coreMessage, new CompletionListenerWrapper(completionListener, jmsMessage, this)); } else { clientProducer.send(address, coreMessage); } } catch (ActiveMQInterruptedException e) { JMSException jmsException = new JMSException(e.getMessage()); jmsException.initCause(e); throw jmsException; } catch (ActiveMQException e) { throw JMSExceptionHelper.convertFromActiveMQException(e); } catch (java.lang.IllegalStateException e) { JMSException je = new IllegalStateException(e.getMessage()); je.setStackTrace(e.getStackTrace()); je.initCause(e); throw je; } } "	0	0	0	0	1	0
@Override public int hashCode() { return Objects.hash(getClassRef()); } 	0	0	0	0	1	0
@Override public boolean equals(Object obj) { if (obj instanceof ClassDefinition) { ClassDefinition other = (ClassDefinition) obj; return Objects.equals(this.getClassRef(), other.getClassRef()); } return false; } 	0	0	0	0	1	0
"public void addProjectCreatorEditTextListeners() {  projectCreatorEditTextCustom.addTextChangedListener(new TextWatcher() {  public void afterTextChanged(Editable s) { }  public void beforeTextChanged(CharSequence s, int start, int count, int after) { }  public void onTextChanged(CharSequence query, int start, int before, int count) {  query = query.toString().toLowerCase();  final ArrayList<Student> filteredList = new ArrayList<>();  for (int i = 0; i < creatorsAvailable.size(); i++) {  final String text = creatorsAvailable.get(i).getName().toLowerCase(); if (text.contains(query)) { filteredList.add(creatorsAvailable.get(i)); } }  projectCreatorAdapter = new ProjectCreatorAdapter(filteredList, homeActivityContext, AddVideoFragment.this); recyclerViewProjectCreator.setAdapter(projectCreatorAdapter); projectCreatorAdapter.notifyDataSetChanged(); } });  projectCreatorEditTextCustom.setOnFocusChangeListener(new View.OnFocusChangeListener() { @Override public void onFocusChange(View view, boolean hasFocus) { if (!hasFocus) { recyclerViewContainer.setVisibility(View.GONE); recyclerViewProjectCreator.setVisibility(View.GONE); } else { if (!creatorsAvailable.isEmpty()) { projectCreatorEditTextCustom.requestFocus(); recyclerViewContainer.setVisibility(View.VISIBLE); recyclerViewProjectCreator.setVisibility(View.VISIBLE); } else { projectCreatorEditTextCustom.clearFocus(); LabTabUtil.hideSoftKeyboard(homeActivityContext); Toast.makeText(homeActivityContext, ""Select a lab first by tapping Lab SKU"", Toast.LENGTH_SHORT).show(); } } } }); } "	0	0	0	0	1	0
private void showCloseButton(FrameLayout innerLayout, Rect rect) { List<Button> buttons = extractButtons(EnumSet.of(Button.Type.close));  if (buttons.size() < 1) return;  final CloseButton closeButton = (CloseButton) buttons.get(0); double availableWidth = closeButton.getBaseWidth(); double availableHeight  = closeButton.getBaseHeight(); double ratio = Math.min(availableWidth / closeButton.getBaseWidth(), availableHeight / closeButton.getBaseHeight());  TouchableImageView touchableImageView = new TouchableImageView(getActivity()); touchableImageView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { GrowthMessage.getInstance().selectButton(closeButton, swipeMessage); finishActivity(); } });  Bitmap bitmap = cachedImages.get(closeButton.getPicture().getUrl()); touchableImageView.setImageBitmap(bitmap);  int width = (int) (bitmap.getWidth() * ratio); int height = (int) (bitmap.getHeight() * ratio); int left = rect.getLeft() + rect.getWidth() - width - (int) (8 * displayMetrics.density); int top = rect.getTop() + 8 * (int)displayMetrics.density;  FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(width, height); layoutParams.leftMargin = left; layoutParams.topMargin = top; touchableImageView.setLayoutParams(layoutParams); touchableImageView.setScaleType(ScaleType.FIT_CENTER);  innerLayout.addView(touchableImageView); } 	0	0	0	0	1	0
"public ChangeReport onEquipmentUnitRemove(final EquipmentUnitRemove equipmentUnitRemove) { LOGGER.debug(""onEquipmentUnitRemove - entering onEquipmentUnitRemove().."");  ChangeReport changeReport = new ChangeReport(equipmentUnitRemove); changeReport.setState(CHANGE_STATE.SUCCESS);  ProcessConfiguration processConfiguration = configurationController.getProcessConfiguration();  // check if equipment unit with same id is not already registered if (processConfiguration.getEquipmentConfiguration(equipmentUnitRemove.getEquipmentId()) == null) { changeReport.appendError(""Equipment unit id: "" + equipmentUnitRemove.getEquipmentId() + "" is unknown""); changeReport.setState(CHANGE_STATE.FAIL); return changeReport; }  if (!unregisterEquipmentUnit(equipmentUnitRemove.getEquipmentId())) { changeReport.setState(CHANGE_STATE.REBOOT); changeReport.appendWarn(""problem detected while unregistering equipment id: "" + equipmentUnitRemove.getEquipmentId() + "". You need to restart the DAQ""); }  return changeReport; } "	0	0	0	0	1	0
"public void setAttachmentPath(String path) { this.getPayload().addStatement(""message.attachment"", path); } "	0	0	0	0	1	0
"private DateHistogramAggregationBuilder dateHistogram(MethodField field) throws SqlParseException { String alias = gettAggNameFromParamsOrAlias(field); DateHistogramAggregationBuilder dateHistogram = AggregationBuilders.dateHistogram(alias).format(TIME_FARMAT); String value = null; for (KVValue kv : field.getParams()) { value = kv.value.toString(); switch (kv.key.toLowerCase()) { case ""interval"": dateHistogram.dateHistogramInterval(new DateHistogramInterval(kv.value.toString())); break; case ""field"": dateHistogram.field(value); break; case ""format"": dateHistogram.format(value); break; case ""time_zone"": dateHistogram.timeZone(DateTimeZone.forTimeZone(TimeZone.getTimeZone(value))); break; case ""min_doc_count"": dateHistogram.minDocCount(Long.parseLong(value)); break;  case ""alias"": case ""nested"": case ""reverse_nested"": case ""children"": break; default: throw new SqlParseException(""date range err or not define field "" + kv.toString()); } } return dateHistogram; } "	0	0	0	0	1	0
"public static Recorder[] getRecorder(final String restriction) { EntityManager entityManager = sessionFactory.createEntityManager(); entityManager.getTransaction().begin();  List<Recorder> recorders = entityManager.createQuery(""select r from Recorder r "" + (restriction != null ? "" where "" + restriction : """")).getResultList(); LOGGER.debug(String.format(""Found %d Recorders in DB that match restriction \""%s\"""", recorders.size(), restriction));  entityManager.getTransaction().commit(); entityManager.close();  return recorders.toArray(new Recorder[]{}); } "	0	0	0	0	1	0
"public static User[] getUser(final String restriction) { EntityManager entityManager = sessionFactory.createEntityManager(); entityManager.getTransaction().begin();  List<User> users = entityManager.createQuery(""select u from User u"" + (restriction != null ? "" where "" + restriction : """")).getResultList(); LOGGER.debug(String.format(""Found %d users in DB that match restriction \""%s\"""", users.size(), restriction));  entityManager.getTransaction().commit(); entityManager.close();  return users.toArray(new User[]{}); } "	0	0	0	0	1	0
@Override public void start() { ctx.game.tab(Game.Tab.INVENTORY); energyThreshold = Random.nextInt(30, 60); startMarkCount = ctx.inventory.select().id(MARK_ID).poll().stackSize(); startXP = ctx.skills.experience(16); startTime = System.currentTimeMillis();  } 	0	0	0	0	1	0
"@Test public void itShouldUpdateBatchStatusOnImportExceptionIfIdIsKnown() throws Exception { doThrow(new ImportException(ImportStatus.INVALID, ""any message"")).when(groupProcessor).process(any(GroupMessage.class)); processor.process(message);  verify(repository).updateStatusAndMessageById(123L, ImportStatus.INVALID, ""any message""); } "	0	0	0	0	1	0
"@Override public void process(double time) { if (sleepCounter == 0.0) { Coordonate coord = element.sixNode.coordonate;  // TODO: Ignore the value of a signal to redstone converter if it is connected to this converted directly. int signal = Utils.getRedstoneLevelAround(coord); //Utils.println(""Light : "" + light); element.outputGateProcess.setOutputNormalized((signal) / 15.0 ); if (signal != oldSignal) { element.needPublish(); }  sleepCounter = sleepDuration + Math.random() * sleepDuration; oldSignal = signal; } else { sleepCounter -= time; if (sleepCounter < 0.0) sleepCounter = 0.0; } } "	0	0	0	0	1	0
@Override public int read() throws IOException { return wrapped.read(); } 	0	0	0	0	1	0
"private void saveSetStats(SetStatus set) { processedSets.put(set.getName() == null ? ""default"" : set.getName(), set); } "	0	0	0	0	1	0
@Override public void sentMsg(String msg) { MessageHandler.getInstance().sendMsg(msg);  } 	0	0	0	0	1	0
void receiveMessage(Message msg) { MessageHandler.getInstance().receiveMsg(msg); } 	0	0	0	0	1	0
"@Test public final void testSubmitFilesResource() { try { Map<String, File> files = temporaryRandomFiles(); ByteArrayOutputStream baos = new ByteArrayOutputStream(); Mockito.when(connection.getResponseCode()). thenReturn(HttpURLConnection.HTTP_OK); Mockito.when(connection.getOutputStream()). thenReturn(baos); Mockito.doReturn(connection).when(fgsm).getFGConnection( Mockito.anyLong(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString(), Mockito.anyString()); fgsm.submitFilesResource(0, FGServerConstants.INFRASTRUCTURE_COLLECTION, """", files, """"); String[] stream = baos.toString().split(""\\r?\\n""); int fileId = -1; boolean fileContentLine = false; for (String line: stream) { if (line.contains(""form-data"")) { String[] formElements = line.split("";""); String fileName = formElements[formElements.length - 1].trim(); fileName = fileName.substring( fileName.indexOf('""') + 1, fileName.lastIndexOf('""')); Assert.assertNotNull(files.get(fileName)); fileId = Integer.parseInt(fileName.substring(0, 1)); } if (fileContentLine) { Assert.assertEquals(DataTest.FILES_CONT[fileId], line); fileContentLine = false; } if (line.isEmpty()) { fileContentLine = true; } } } catch (IllegalArgumentException | IOException | PortalException e) { Assert.fail(e.getMessage()); } } "	0	0	0	0	1	0
@Override public OurWebElement element(By by, OurSearchStrategy strategy) { return customFinder(strategy).visibleElement(by); } 	0	0	0	0	1	0
@Override public List<OurWebElement> elements(By by, OurSearchStrategy strategy) { return customFinder(strategy).visibleElements(by); } 	0	0	0	0	1	0
@Override public OurWebElement domElement(By by, OurSearchStrategy strategy) { return customFinder(strategy).presentInDomElement(by); } 	0	0	0	0	1	0
@Test public void TestGetEstimate() { String responseString =  rideEstimateService.getEstimates(PICKUP_LATITUDE, PICKUP_LONGITUDE, DROPOFF_LATITUDE, DROPOFF_LONGITUDE, null); System.out.println(responseString); } 	0	0	0	0	1	0
"public boolean validateUser(UserBean bean) { // TODO Auto-generated method stub System.out.println(""Validate user ICICI""); return false; } "	0	0	0	0	1	0
"public static void HydraTask_stopSnappy() { snc.stop(); Log.getLogWriter().info(""SnappyContext stopped successfully""); } "	0	0	0	0	1	0
public void release() { inUse.set(false); } 	0	0	0	0	1	0
@Override public synchronized Session<InetSocketAddress, Bytestring> openSession( Send<Bytestring> send ) throws IOException { // Don't allow sessions to be opened when we're opening or closing the channel. synchronized (lock) { }  if (openSessions == null) { return null; }  if (currentSession != null) { return null; }  TcpSession session = openSessions.putNewSession(identity(), this);  if (session == null) { return null; }  executor.execute(new TcpReceiver(session, send));  return session; } 	0	0	0	0	1	0
private static String[] GetStringTypes() {  ArrayList<String> l = new ArrayList<String>(); l.add(Class.class.getName()); Iterator<FromStringDeserializer<?>> iter = FromStringDeserializer.all().iterator(); while (iter.hasNext()) { FromStringDeserializer fsd =  iter.next(); l.add(fsd.getValueClass().getName()); } String[] a = null; return l.toArray(a); } 	0	0	0	0	1	0
protected void performSortingAndFilteringRecursivelyImpl ( final E parentNode ) { performSortingAndFilteringImpl ( parentNode ); for ( int i = 0; i < parentNode.getChildCount (); i++ ) { performSortingAndFilteringRecursivelyImpl ( ( E ) parentNode.getChildAt ( i ) ); } } 	0	0	0	0	1	0
"@Test public final void columnsToMap(){ MultiRowsSheet dataSheet = getSheet(); Map<String,String> actualResult = new HashMap<String,String>(); actualResult = dataSheet.columnsAsMap(""city"",""country"",actualResult); Map<String,String> expectedResult = new HashMap<String,String>(); expectedResult.put(""Nantes"", ""France""); expectedResult.put(""Las Vegas"", ""USA""); expectedResult.put(""Melbourne"", ""Australia""); expectedResult.put(""Nantes"", ""France""); expectedResult.put(""San Rafael"", ""USA""); assertEquals(expectedResult,actualResult); } "	0	0	0	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity);  b2 = (Button) findViewById(R.id.button2); b2.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { finish(); } });  } 	0	0	0	0	1	0
"@Test public void testMapOfWithInt() { System.out.println(""testMapOfWithInt"");  String string = strings(50).get(); AlchemyGenerator<String> valueGenerator = () -> string; int size = integers(5, 100).get();  Map<String, String> result = CollectionGenerators.mapOf(uuids, valueGenerator, size); assertThat(result, notNullValue()); assertThat(result.size(), is(size));  for (Map.Entry<String, String> entry : result.entrySet()) { UUID.fromString(entry.getKey()); assertThat(entry.getValue(), is(string)); }  } "	0	0	0	0	1	0
"@Test(enabled=false) // No metadata in exemplar xml... public void testWhenResponseIs2xxLoginReturnsValidMetadata() { URI networkUri = URI.create(""https://vcloudbeta.bluelock.com/api/network/55a677cf-ab3f-48ae-b880-fab90421980c"");  VCloudDirectorClient client = requestsSendResponses(loginRequest, sessionResponse, getStandardRequest(""GET"", ""/network/55a677cf-ab3f-48ae-b880-fab90421980c/metadata/KEY""), getStandardPayloadResponse(""/network/metadataEntry.xml"", VCloudDirectorMediaType.METADATA_ENTRY));  MetadataEntry expected = MetadataEntry.builder() .entry(""key"", ""value"") .build();  Reference networkRef = Reference.builder().href(networkUri).build();  assertEquals(client.getOrgClient().getMetadataEntry(networkRef, ""KEY""), expected); } "	0	0	0	0	1	0
"public LinkedList<Mitglied> getKurssteilnehmer(int intIdKursart, int intBereichnr, int intAbschnittnr, String strFubwehr, String strVon, String strBis) throws Exception { LinkedList<Mitglied> liTeilnehmer = new LinkedList<>();  Connection conn = connPool.getConnection(); Statement stat = conn.createStatement();  String sqlString = ""SELECT m.vorname, m.zuname, m.id_personen, m.standesbuchnummer, m.titel, m.dienstgrad, m.geburtsdatum, m.instanznummer, m.instanzname, k.datum, k.id_kurse "" + ""FROM FDISK.dbo.stmkmitglieder m "" + ""INNER JOIN FDISK.dbo.stmkkursemitglieder km ON(m.id_mitgliedschaften = km.id_mitgliedschaften) "" + ""INNER JOIN FDISK.dbo.stmkkurse k ON(k.id_kurse = km.id_kurse) "" + ""INNER JOIN FDISK.dbo.qry_alle_instanzen fw ON(m.instanznummer = fw.instanznummer) "" + ""WHERE k.id_kursarten = "" + intIdKursart;  if (intBereichnr == -2) { sqlString += getSqlDateString(strVon, strBis, 4, false); } else { if (intAbschnittnr == -2) { sqlString += "" AND fw.Bereich_Nr = "" + intBereichnr; } else if (strFubwehr.equals(""-2"")) { sqlString += "" AND fw.abschnitt_instanznummer = "" + intAbschnittnr; } else { sqlString += "" AND m.instanznummer = '"" + strFubwehr + ""'""; } sqlString += getSqlDateString(strVon, strBis, 4, false); }  ResultSet rs = stat.executeQuery(sqlString);  String strVorname; String strZunanme; int intIdPers; String strInstanznummer; String strInstanzname; String strSTB; String strTitel; String strDGR;  while (rs.next()) { strVorname = rs.getString(""vorname""); strZunanme = rs.getString(""zuname""); intIdPers = rs.getInt(""id_personen""); strInstanznummer = rs.getString(""instanznummer""); strInstanzname = rs.getString(""instanzname""); strSTB = rs.getString(""standesbuchnummer""); strTitel = rs.getString(""titel""); strDGR = rs.getString(""dienstgrad""); Mitglied mitglied = new Mitglied(intIdPers, strSTB, strDGR, strTitel, strVorname, strZunanme, strInstanznummer);  mitglied.setStrInstanzname(strInstanzname);  liTeilnehmer.add(mitglied); }  liTeilnehmer.sort(Comparator.comparing(Mitglied::getStrFubwehr).thenComparing(Mitglied::getStb).thenComparing(Mitglied::getStrZuname));  connPool.releaseConnection(conn); return liTeilnehmer; } "	0	0	0	0	1	0
"@Before public void setup(){ this.player = new Player(); this.player.init(""John""); } "	0	0	0	0	1	0
public static void fetchTasksFromFile() {  try { BufferedReader br = new BufferedReader(new FileReader(FILE_NAME)); if (br.ready()) { Gson gson= new Gson(); taskList = gson.fromJson(br, new TypeToken<ArrayList<Task>>(){}.getType()); } else { // no tasks } br.close(); } catch (IOException e) { // error } } 	0	0	0	0	1	0
public boolean withdraw(float amount) { if (amount > 0.0f) { // KG: incorrect, last balance check should be >= if (getState() == State.OPEN || (getState() == State.OVERDRAWN && balance > -100.0f)) { balance = balance - amount; numWithdraws++; if (numWithdraws > 10) balance = balance - 2.0f; if (balance < 0.0f) { setState(State.OVERDRAWN); } return true; } } return false; } 	0	0	0	0	1	0
public boolean withdraw(float amount) { if (amount > 0.0f) { // KG: incorrect, last balance check should be >= if (getState() == STATE.OPEN || (getState() == STATE.OVERDRAWN && balance > -100.0f)) { balance = balance - amount; _numWithdraws++; if (_numWithdraws > 10){ balance = balance - 2.0f; } if (balance < 0.0f) { setState(STATE.OVERDRAWN); } return true; } } return false; } 	0	0	0	0	1	0
"private void exportStylesToKML(final Text feature, XmlSerializer xmlSerializer) throws IOException { if  (needStyle(feature)) { xmlSerializer.startTag(null, ""Style""); xmlSerializer.attribute(null, ""id"", getStyleId(feature)); xmlSerializer.startTag(null, ""IconStyle"");  if (feature.getAzimuth() != 0.0) { double heading = (((feature.getAzimuth() + 180.0) % 360.0) + 360.0) % 360.0; xmlSerializer.startTag(null, ""heading""); xmlSerializer.text("""" + heading); xmlSerializer.endTag(null, ""heading""); }  xmlSerializer.startTag(null, ""Icon""); xmlSerializer.startTag(null, ""href""); xmlSerializer.endTag(null, ""href""); xmlSerializer.endTag(null, ""Icon""); xmlSerializer.endTag(null, ""IconStyle"");  xmlSerializer.startTag(null, ""LabelStyle"");  if (null != feature.getLabelStyle()) { IGeoColor color = feature.getLabelStyle().getColor(); serializeColor(color, xmlSerializer); } else { serializeColor(null, xmlSerializer); }  xmlSerializer.startTag(null, ""scale""); xmlSerializer.text(""1.0""); xmlSerializer.endTag(null, ""scale""); xmlSerializer.endTag(null, ""LabelStyle"");  xmlSerializer.endTag(null, ""Style""); } } "	0	0	0	0	1	0
"private void processSymbolTable(java.util.Map<java.lang.String,UnitDef> oDefMap, org.cmapi.primitives.GeoMilSymbol.SymbolStandard eStandard, int iMilStdVersion, int iMaxCount) { java.util.Set<String> oSymbols = oDefMap.keySet(); UnitDef oSymDef; String sSymbolCode; int iCount = 0; java.util.List<IFeature> oFeatureList = new java.util.ArrayList<>();  for (String sBasicSymbolCode: oSymbols) { //Log.d(TAG, ""Symbol "" + sBasicSymbolCode); if (SymbolUtilities.isWarfighting(sBasicSymbolCode)) { oSymDef = oDefMap.get(sBasicSymbolCode);  java.util.List<IGeoPosition> oPosList = this.getPositions(1, 20000.0);  try { // Allocate the new MilStd Symbol with a MilStd version and the symbol code. mil.emp3.api.MilStdSymbol oSPSymbol = new mil.emp3.api.MilStdSymbol(eStandard, sBasicSymbolCode);  // Set the symbols affiliation. oSPSymbol.setAffiliation(MilStdSymbol.Affiliation.FRIEND); // Set the symbols altitude mode. //oSPSymbol.setAltitudeMode(IGeoAltitudeMode.AltitudeMode.RELATIVE_TO_GROUND); //oSPSymbol.setEchelonSymbolModifier(MilStdSymbol.EchelonSymbolModifier.HQ_BRIGADE);  // Set the position list with 1 position. oSPSymbol.getPositions().clear(); oSPSymbol.getPositions().addAll(oPosList);  //Set a single modifier. oSPSymbol.setModifier(IGeoMilSymbol.Modifier.UNIQUE_DESIGNATOR_1, oSymDef.getDescription()); iCount++;  // Give the feature a name. oSPSymbol.setName(""Unit "" + iCount);  //oSPSymbol.setFillStyle(iconStyleFill); //oSPSymbol.setStrokeStyle(iconStyleStroke); //oSPSymbol.setLabelStyle(iconStyleLabel);  //Add it to the list we will be adding to the overlay. oFeatureList.add(oSPSymbol);  // Keep a reference to the feature in a hash for later use. this.oFeatureHash.put(oSPSymbol.getGeoId(), oSPSymbol); } catch (EMP_Exception Ex) {  } }  if ((iMaxCount > 0) && (iCount >= iMaxCount)) { break; } } if (!oFeatureList.isEmpty()) { try { // Add all the features to the overlay. // It is more efficient to add them in bulk. oRootOverlay.addFeatures(oFeatureList, true); Log.d(TAG, ""Added "" + oFeatureList.size() + "" features.""); } catch (EMP_Exception Ex) {  } } } "	0	0	0	0	1	0
"public static Date parseRoundTripDateString(String roundTripString) throws ParseException { SimpleDateFormat roundTripDateFormat = new SimpleDateFormat(""yyyy-MM-dd'T'HH""); Date date = roundTripDateFormat.parse(roundTripString);  return date; } "	0	0	0	0	1	0
public void addRecord(OfflinePlayer player, CaughtFish fish) { ListIterator<Record> it = recordList.listIterator(); while (it.hasNext()) { Record record = it.next();  if (record.getPlayer().equals(player)) { if (record.getLength() < fish.getLength()) { it.remove(); break; } else { return; } } }  recordList.add(new Record(player, fish));  Collections.sort(recordList, comparator); } 	0	0	0	0	1	0
public int getNumber(OfflinePlayer player) { for (int i = 0; i < recordList.size(); i ++) { if (recordList.get(i).getPlayer().equals(player)) { return (i + 1); } }  return 0; } 	0	0	0	0	1	0
public void addMultiPartPostParam(String key, String value) { if (multipartBuilder == null) { multipartBuilder = new MultipartBuilder().type(MultipartBuilder.FORM); } multipartBuilder.addFormDataPart(key, value); } 	0	0	0	0	1	0
"public void addPostParam(String key, String value) { if (key == null) { throw new NullPointerException(""addPostParam with null key ""); } if (value == null) { value = """"; KKDebug.e(""addPostParam key "" + key + "" with null value""); } if (requestBodyBuilder == null) { requestBodyBuilder = new FormEncodingBuilder(); } requestBodyBuilder.add(key, value); } "	0	0	0	0	1	0
"public static boolean checkPermission(String permissionName) { if (context == null) { throw new RuntimeException(""Before comparing permissions you need to call PermissionManager.init(context)""); } return PackageManager.PERMISSION_GRANTED == context.checkSelfPermission(permissionName); } "	0	0	0	0	1	0
"private InputStream createDecompressorStream(final int compression, final int width, final int bands, final InputStream stream) throws IOException { switch (compression) { case TIFFBaseline.COMPRESSION_NONE: return stream; case TIFFBaseline.COMPRESSION_PACKBITS: return new DecoderStream(stream, new PackBitsDecoder(), 1024); case TIFFExtension.COMPRESSION_LZW: return new DecoderStream(stream, LZWDecoder.create(LZWDecoder.isOldBitReversedStream(stream)), Math.max(width * bands, 1024)); case TIFFExtension.COMPRESSION_ZLIB: // TIFFphotoshop.pdf (aka TIFF specification, supplement 2) says ZLIB (8) and DEFLATE (32946) algorithms are identical case TIFFExtension.COMPRESSION_DEFLATE: return new InflaterInputStream(stream, new Inflater(), 1024); case TIFFBaseline.COMPRESSION_CCITT_MODIFIED_HUFFMAN_RLE: return new CCITTFaxDecoderStream(stream, width, compression, getValueAsIntWithDefault(TIFF.TAG_FILL_ORDER, 1),0L); case TIFFExtension.COMPRESSION_CCITT_T4: return new CCITTFaxDecoderStream(stream, width, compression, getValueAsIntWithDefault(TIFF.TAG_FILL_ORDER, 1),getValueAsLongWithDefault(TIFF.TAG_GROUP3OPTIONS, 0L)); case TIFFExtension.COMPRESSION_CCITT_T6: return new CCITTFaxDecoderStream(stream, width, compression, getValueAsIntWithDefault(TIFF.TAG_FILL_ORDER, 1),getValueAsLongWithDefault(TIFF.TAG_GROUP4OPTIONS, 0L)); default: throw new IllegalArgumentException(""Unsupported TIFF compression: "" + compression); } } "	0	0	0	0	1	0
"private InputException typeCaseSwitcher(String type, String taskname, String[] arg) { switch (type) { case ""EDIT"": return editChecker(taskname, arg[1], arg[2]); case ""DELETE"": return deleteChecker(taskname); case ""LABEL"": return labelChecker(taskname, arg[1]); case ""SET-RECURRING"": return setRecurringChecker(taskname, true, arg[1]); case ""REMOVE-RECURRING"": return setRecurringChecker(taskname, false, null); case ""REMOVE-REMIND"": return removeRemindChecker(taskname); case ""POSTPONE"": return postponeChecker(taskname, arg[1], arg[2]); case ""FORWARD"": return forwardChecker(arg[0], arg[1], arg[2]); case ""REMIND"": return remindChecker(taskname); case ""REMIND-BEF"": return remindBefChecker(taskname, arg[1], arg[2]); case ""DONE"": return doneChecker(taskname); case ""UNDONE"": return undoneChecker(taskname); default: return new InputException(); } } "	0	0	0	0	1	0
@Override public boolean thisOrChildrenFocused() { boolean ret = this.isFocusOwner() || openingFile; ret = ret || (scrLexicon != null && scrLexicon.thisOrChildrenFocused()); ret = ret || (scrGrammar != null && scrGrammar.thisOrChildrenFocused()); ret = ret || (scrLogos != null && scrLogos.thisOrChildrenFocused()); ret = ret || (scrThes != null && scrThes.thisOrChildrenFocused()); return ret; } 	0	0	0	0	1	0
"public void setOpponent(String name, int iconId) { LOG.info(""Start match: "" + name + "" icon: "" + iconId); hero2 = new HeroControl(50, new PlayerShared(2, name, iconId, 1, 1, 1, 1)); Platform.runLater(() -> gridOpponentSide.add(hero2.getHeroControl(), 5, 0)); } "	0	0	0	0	1	0
"@Test public void T02JSONListIfcProperties() throws Exception { try { String model_guid = loadTestModel(TEST_MODEL_NAME); E3TestArgs ta = new E3TestArgs(""GET"",BASE_URL); ta.setModelGuid(model_guid); ta.setIfcType(""ifcspace"",""2MU61$8Yb0MvanC6CZFwZ0""); // TODO better id for test object ta.setIfcSubType(""ifcproperty""); JSONArray jresult = new JSONArray(this.runIfcApiService(ta)); assertTrue(""Didn't find any properties"",jresult.length() > 0); log(E3Logger.DEBUG,""--- response:"" + jresult.toString()); log(E3Logger.INFO,""..."" + getQualifiedTestName() + "" completed successfully""); } catch(Exception ex)	{ log(E3Logger.ERROR,""..."" + getQualifiedTestName() + "" completed with error(s):"" + ex.toString()); testlib.writeTrace(ex.toString()); throw ex; } } "	0	0	0	0	1	0
"@Test public void T27JSONMultipartUPload() throws Exception { try { String filename = testlib.getInputPath() + ""/0000-Referansebygg.ifc""; String projectName = IE3TestBase.TEST_PROJECT_NAME_0; String modelName = TEST_MODEL_NAME; String description = this.mCurrentTestName.toString();   E3TestArgs ta = new E3TestArgs(""POST"",IE3TestBase.BIMAPI_MODELS_URL); ta.bodyArgs= new JSONObject(); ta.bodyArgs.put(E3BimApiResourcePath.MDF_PROJECT_NAME, projectName); ta.bodyArgs.put(E3BimApiResourcePath.MDF_DOMAIN_NAME, ""ArK""); ta.bodyArgs.put(E3BimApiResourcePath.MDF_MODEL_NAME, modelName); ta.bodyArgs.put(E3BimApiResourcePath.MDF_MODEL_TYPE,""IFC2X3""); ta.bodyArgs.put(E3BimApiResourcePath.MDF_DESCRIPTION,description); if(testlib.useWebService()) { ta.bodyArgs.put(E3BimApiResourcePath.MUF_MODEL_IS_EXTERNAL,""false""); ta.set_file_input(filename); } else { ta.bodyArgs.put(E3BimApiResourcePath.MUF_MODEL_IS_EXTERNAL,""true""); ta.bodyArgs.put(E3BimApiResourcePath.MUF_MODEL_CONTENT,filename); } String result = this.runBimApiService(ta);  JSONArray jresult = this.makeModelList(result); assertTrue(""Return was not 1 model"",jresult.length() == 1); log(E3Logger.INFO,""..."" + getQualifiedTestName() + ""completed successfully""); } catch(Exception ex)	{ log(E3Logger.ERROR,""..."" + getQualifiedTestName() + ""completed with error(s)""); testlib.writeTrace(ex.toString()); throw ex; } } "	0	0	0	0	1	0
"public void run() { textArea.append(msg); textArea.setCaretPosition(textArea.getDocument().getLength()); // textArea.append(""\n""); } "	0	0	0	0	1	0
Core openCore(String coreName, File dataDir) { try { if (!dataDir.exists()) { dataDir.mkdirs(); }  CoreAdminRequest.Create createCore = new CoreAdminRequest.Create(); createCore.setDataDir(dataDir.getAbsolutePath()); createCore.setInstanceDir(instanceDir); createCore.setCoreName(coreName);  this.solr.request(createCore);  return new Core(coreName);  } catch (SolrServerException ex) { throw new RuntimeException(ex); } catch (IOException ex) { throw new RuntimeException(ex); } } 	0	0	0	0	1	0
private boolean shouldCrawlPage() { return this.webpage.getUrl().getHost().equals(Main.base_url.getHost()); } 	0	0	0	0	1	0
"public static ResultPage<Envelope<Event>> resultPage(ScrollDirection direction) { Log.d(""Network"", String.format(""DummyRequest: dir %s, page %s"", direction, pageCounters.get(direction))); sleep(2000);  if (pageCounters.get(direction).equals(errorOccurrences.get(direction).first) && (errorOccurrences.get(direction).second > 0)) { errorOccurrences.put(direction, Pair.create(errorOccurrences.get(direction).first, errorOccurrences.get(direction).second - 1)); throw new RuntimeException(String.format(""Induced error. Direction %s Page %s Occurence %s"", direction, pageCounters.get(direction), errorOccurrences.get(direction).second)); }  if (pageLimits.get(direction) <= pageCounters.get(direction)) { return new EmptyResultPage(); } return new DummyResultPage(envelopes(direction)); } "	0	0	0	0	1	0
private void assertPathResourceSize(ResourcePath path, int expectedSize) { assertThat(path.getResources().size(), equalTo(expectedSize)); } 	0	0	0	0	1	0
private final boolean hasComplexTransformAttributes() { final Attributes attr = AlignAndDistribute.getAttributes(m_shape);  if (attr.hasComplexTransformAttributes()) { final double r = attr.getRotation();  if (r != 0) { return true; } final Point2D scale = attr.getScale();  if (null != scale) { if ((scale.getX() != 1) || (scale.getY() != 1)) { return true; } } final Point2D shear = attr.getShear();  if (null != shear) { if ((shear.getX() != 0) || (shear.getY() != 0)) { return true; } } } return false; } 	0	0	0	0	1	0
public Rectangle getPageSize() { return pageSize; } 	0	0	0	0	1	0
"@Test public void execute_ignoredField_shouldAssertSuccessfully() throws Exception { JsonResponseAssertions assertions = JsonResponseAssertions.fromString(200, ""{ \""key\"":\""kyle\"", \""surname\"":\""pullicino\"" }"").ignoreValuesForProperties(""/key""); ModelResponse<String> response = prepareModelResponse(""{ \""key\"":\""kyle1\"", \""surname\"":\""pullicino\"" }""); assertions.execute(200, response, response.getModel()); } "	0	0	0	0	1	0
"@Test public void execute_fromStringJsonMismatches_shouldThrowErrorWithDiff() throws Exception { try { JsonResponseAssertions assertions = JsonResponseAssertions.fromString(200, ""{ \""key\"":\""kyle\"", \""surname\"":\""pullicino\"" }""); ModelResponse<String> response = prepareModelResponse(""{ \""key\"":\""kyle1\"", \""surname\"":\""pullicino\"", \""array\"":[1, 2] }""); assertions.execute(200, response, response.getModel()); } catch (AssertionError assertionError) { Assert.assertEquals(""Assertion Failed Message"", assertionError.getMessage(), ""Actual response body is not as expected. The following JSON Patch (as per RFC-6902) tells you what operations you need to perform to transform the actual response body into the expected response body:"" + ""\n"" + "" [{\""op\"":\""replace\"",\""path\"":\""/key\"",\""value\"":\""kyle\""},{\""op\"":\""remove\"",\""path\"":\""/array\""}]""); return; } Assert.fail(""An assertion error should have been thrown by the JSON Response Assertions""); } "	0	0	0	0	1	0
"@Override public void init(TcpIpConnection connection, SocketWriter writer, String protocol) { logger.log(Level.WARNING, ""SocketWriter is not set, creating WriteHandler with CLUSTER protocol!"");  initHandler(connection, writer, protocol); initOutputBuffer(connection, writer, protocol); } "	0	0	0	0	1	0
private void postNotifyItemRangeRemoved(final int start, final int itemCount) { mHandler.post(() -> notifyItemRangeRemoved(start, itemCount)); } 	0	0	0	0	1	0
"public void assertExpectedResultMessage(final String response) { String expectedResponseMessage = getExpectedResponseMessage(); if (expectedResponseMessage == null) { naTestCase(""Assert (assertExpectedResultMessage) called with unknown expected result message.""); } String actual = response.replace(""\n\t"", """").replace(""\r\n"", """").replace(""\n"", """").replace(""\r"", """").replace("" "", """"); String expected = expectedResponseMessage.replace(""\n\t"", """").replace(""\r\n"", """").replace(""\n"", """").replace(""\r"", """").replace("" "", """"); String errorMessage = ""The expected and the received messages are not equal.""; assertEquals(errorMessage, expected, actual); } "	0	0	0	0	1	0
"@Test public void testStandardizePrimitiveType() { TableImpl<Node> table = new TableImpl<Node>(new ColumnStore<Node>(Node.class, false)); Column col = table.addColumn(""0"", int.class); Assert.assertEquals(col.getTypeClass(), Integer.class); } "	0	0	0	0	1	0
"@Test public void testStandardizeArrayType() { TableImpl<Node> table = new TableImpl<Node>(new ColumnStore<Node>(Node.class, false)); Column col = table.addColumn(""0"", Integer[].class); Assert.assertEquals(col.getTypeClass(), int[].class); } "	0	0	0	0	1	0
"@Test(expectedExceptions = IllegalArgumentException.class) public void testUnknownType() { TableImpl<Node> table = new TableImpl<Node>(new ColumnStore<Node>(Node.class, false)); table.addColumn(""0"", Node.class); } "	0	0	0	0	1	0
"@Test public void testSetEstimator() { TableImpl<Node> table = new TableImpl<Node>(new ColumnStore<Node>(Node.class, false)); Column col = table.addColumn(""0"", TimestampByteMap.class); Estimator est = Estimator.AVERAGE; table.setEstimator(col, est);  Assert.assertEquals(table.getEstimator(col), est); } "	0	0	0	0	1	0
"@Override public void bindView(View view, Context context, Cursor cursor) { ActivityEntity ae = new ActivityEntity(cursor); int[] to = new int[] { R.id.history_list_id, R.id.history_list_start_time, R.id.history_list_distance, R.id.history_list_time, R.id.history_list_pace, R.id.history_list_sport };  Long id = ae.getId(); Long st = ae.getStartTime(); Float d = ae.getDistance(); Long t = ae.getTime(); Integer s = ae.getSport();  { TextView tv = (TextView) view.findViewById(to[0]); tv.setText(Long.toString(id)); }  { TextView tv = (TextView) view.findViewById(to[1]); if (st != null) { tv.setText(formatter.formatDateTime(Formatter.TXT_LONG, st)); } else { tv.setText(""""); } }  { TextView tv = (TextView) view.findViewById(to[2]); if (d != null) { tv.setText(formatter.formatDistance(Formatter.TXT_SHORT, d.longValue())); } else { tv.setText(""""); } }  { TextView tv = (TextView) view.findViewById(to[3]); if (t != null) { tv.setText(formatter.formatElapsedTime(Formatter.TXT_SHORT, t)); } else { tv.setText(""""); } }  { TextView tv = (TextView) view.findViewById(to[4]); if (d != null && t != null && d != 0 && t != 0) { tv.setText(formatter.formatPace(Formatter.TXT_LONG, t / d)); } else { tv.setText(""""); } }  { TextView tv = (TextView) view.findViewById(to[5]);  if (s != null) { tv.setText(Sport.textOf(getApplicationContext(), s)); } else { tv.setText(getResources().getText(R.string.Running)); } } } "	0	0	0	0	1	0
"@Override public void onClick(View v) { int position = (Integer) v.getTag(); Intent visitSummary = new Intent(PatientDetailActivity.this, VisitSummaryActivity.class); visitSummary.putExtra(""visitID"", String.valueOf(position)); visitSummary.putExtra(""patientID"", patientID); visitSummary.putExtra(""name"", patientName); visitSummary.putExtra(""tag"", intentTag); visitSummary.putExtra(""pastVisit"", true); startActivity(visitSummary); } "	0	0	0	0	1	0
"@Override public HealthResponse query(String api, long interval, long from, long to) throws AnalyticsException { try { SearchRequestBuilder requestBuilder = createRequestBuilder(""health"");  QueryBuilder queryBuilder = boolQuery().must(termQuery(""api"", api));  final RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(FIELD_TIMESTAMP).from(from).to(to);  // Finally set the query requestBuilder.setQuery(boolQuery().filter(queryBuilder).filter(rangeQueryBuilder));  // Calculate aggregation AggregationBuilder byDateAggregation = dateHistogram(""by_date"") .extendedBounds(from, to) .field(FIELD_TIMESTAMP) .interval(interval);  byDateAggregation.subAggregation(terms(""by_result"").field(FIELD_HEALTH_RESPONSE_SUCCESS).size(0));  // And set aggregation to the request requestBuilder.addAggregation(byDateAggregation);  // Get the response from ES SearchResponse response = requestBuilder.get();  return toHealthResponse(response); } catch (ElasticsearchException ese) { logger.error(""An error occurs while looking for analytics with Elasticsearch"", ese); throw new AnalyticsException(""An error occurs while looking for analytics with Elasticsearch"", ese); } } "	0	0	0	0	1	0
"private HistogramResponse hitsByApiKey(HitsByApiKeyQuery query) { SearchRequestBuilder requestBuilder = createRequestBuilder(""request"");  QueryBuilder queryBuilder = boolQuery().must(termQuery(FIELD_API_KEY, query.apiKey()));  final RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(FIELD_TIMESTAMP).from(query.range().start()).to(query.range().end());  // Finally set the query requestBuilder.setQuery(boolQuery().filter(queryBuilder).filter(rangeQueryBuilder));  // Calculate aggregation AggregationBuilder aggregationBuilder = terms(""by_apikey"").field(FIELD_API_NAME).size(0); AggregationBuilder subAggregationBuilder = aggregationBuilder.subAggregation( dateHistogram(""by_date"") .extendedBounds(query.range().start(), query.range().end()) .field(FIELD_TIMESTAMP) .interval(query.interval().toMillis()) .minDocCount(0));  switch (query.type()) { case HITS_BY_STATUS: subAggregationBuilder.subAggregation(terms(""by_status"").field(FIELD_RESPONSE_STATUS).size(0)); break; case HITS_BY_LATENCY: subAggregationBuilder.subAggregation(terms(""by_latency"").field(FIELD_RESPONSE_TIME).size(0)); break; }  // And set aggregation to the request requestBuilder.addAggregation(aggregationBuilder);  logger.debug(""ES Request: {}"", requestBuilder.toString());  // Get the response from ES SearchResponse response = requestBuilder.get();  logger.debug(""ES Response: {}"", requestBuilder.toString());  return toHistogramResponse(response, query.apiKey()); } "	0	0	0	0	1	0
private void publishDataToRecorded(final Publication publication, final int messageCount) { startPosition = publication.position();  final int termLength = publication.termBufferLength(); final int positionBitsToShift = Integer.numberOfTrailingZeros(termLength); final int initialTermOffset = computeTermOffsetFromPosition(startPosition, positionBitsToShift);  buffer.setMemory(0, 1024, (byte)'z');  for (int i = 0; i < messageCount; i++) { final int messageLength = 64 + (rnd.nextInt((MAX_FRAGMENT_SIZE - 64) / 4) * 4);  totalPayloadLength += messageLength; buffer.putInt(0, i, LITTLE_ENDIAN); buffer.putInt(messageLength - 4, i, LITTLE_ENDIAN);  offer(publication, buffer, messageLength); }  final int initialTermId = publication.initialTermId(); final long finalPosition = publication.position(); final int termOffset = computeTermOffsetFromPosition(finalPosition, positionBitsToShift); final int termId = computeTermIdFromPosition(finalPosition, positionBitsToShift, initialTermId);  expectedRecordingLength = (termId - initialTermId) * termLength + (termOffset - initialTermOffset);  assertThat(finalPosition - startPosition, is(expectedRecordingLength)); } 	0	0	0	0	1	0
@Override protected void onAttachedToWindow() { super.onAttachedToWindow(); if (getProgressMode() == MODE_INDETERMINATE && mAutostart) start(); } 	0	0	0	0	1	0
@Override public void onLoaderReset(Loader<Cursor> loader) { if (loader.getId() == TYPE_FEED_ID) adapter.swapCursor(null); } 	0	0	0	0	1	0
@Override public void onLoadFinished(Loader<Cursor> loader, Cursor data) { if (loader.getId() == TYPE_FEED_ID) adapter.swapCursor(data); super.onLoadFinished(loader, data); } 	0	0	0	0	1	0
@Override public void onLoadFinished(Loader<Cursor> loader, Cursor data) { if (loader.getId() == TYPE_HEADLINE_ID) adapter.swapCursor(data); super.onLoadFinished(loader, data); } 	0	0	0	0	1	0
public static boolean isLocationEnabled(Context context) { int locationMode = 0; String locationProviders;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT){ try { locationMode = Settings.Secure.getInt(context.getContentResolver(), Settings.Secure.LOCATION_MODE);  } catch (Settings.SettingNotFoundException e) { e.printStackTrace(); return false; }  return locationMode != Settings.Secure.LOCATION_MODE_OFF;  }else{ locationProviders = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.LOCATION_PROVIDERS_ALLOWED); return !TextUtils.isEmpty(locationProviders); }   } 	0	0	0	0	1	0
@Override public void handle(Context context) throws Exception { if (handlers.isEmpty()) { noMatchHandler.handle(context); return; }  String acceptHeader = context.getRequest().getHeaders().get(HttpHeaderNames.ACCEPT); if (Strings.isNullOrEmpty(acceptHeader)) { unspecifiedHandler.handle(context); } else { String winner = MimeParse.bestMatch(handlers.keySet(), acceptHeader); if (Strings.isNullOrEmpty(winner)) { noMatchHandler.handle(context); } else { context.getResponse().contentType(winner); handlers.get(winner).handle(context); } } } 	0	0	0	0	1	0
"public static void obfuscatePasswordInConfig(String fileName) { logger.debug(""Initializing Obfuscation procedure""); // This will reference one line at a time String line = null; StringBuilder sb = new StringBuilder(); BufferedReader bufferedReader = null; try { // FileReader reads text files in the default encoding. FileReader fileReader = new FileReader(fileName);  // Always wrap FileReader in BufferedReader. bufferedReader = new BufferedReader(fileReader);  while ((line = bufferedReader.readLine()) != null) { if (line.contains(""password"") && !line.startsWith(""#"")) { if (CryptoUtils.decrypt(line.split(""="", 2)[1]) == null) { line = line.split(""="", 2)[0] + ""="" + CryptoUtils.encrypt(line.split(""="", 2)[1]); } } sb.append(line); sb.append(System.getProperty(""line.separator"")); } logger.info(""File: "" + fileName + "" obfuscated""); } catch (FileNotFoundException ex) { logger.error(""Property file '"" + fileName + ""' not found.\nIOException: "" + ex.getMessage()); CryptoUtils.setValid(false); CryptoUtils.setError(""Property file "" + fileName + "" not found.""); } catch (IOException ex) { logger.error(""Error reading file '"" + fileName + ""'\nIOException: "" + ex.getMessage()); CryptoUtils.setValid(false); CryptoUtils.setError(""Error reading file '"" + fileName + ""'""); } finally { try { // Always close files. bufferedReader.close(); } catch (IOException ex) { ex.printStackTrace(); } }  logger.debug(""Writing changes to file"");  FileWriter fileWriter; BufferedWriter bufferedWriter = null; try { fileWriter = new FileWriter(fileName);  // Always wrap FileReader in BufferedReader. bufferedWriter = new BufferedWriter(fileWriter);  bufferedWriter.write(sb.toString());  logger.debug(""Obfuscation completed""); } catch (IOException ex) { logger.error(""Error reading file '"" + fileName + ""'\nIOException: "" + ex.getMessage()); CryptoUtils.setValid(false); CryptoUtils.setError(""Error reading file '"" + fileName + ""'""); } finally { try { bufferedWriter.close(); } catch (IOException ex) { logger.error(""Error while closing bufferWriter\nIOException: "" + ex.getMessage()); } } } "	0	0	0	0	1	0
protected XtextResource doGetResource(InputStream in, URI uri) throws Exception { XtextResourceSet rs = get(XtextResourceSet.class); rs.setClasspathURIContext(getClass()); XtextResource resource = (XtextResource) getResourceFactory().createResource(uri); rs.getResources().add(resource); resource.load(in, null); if (resource instanceof LazyLinkingResource) { ((LazyLinkingResource) resource).resolveLazyCrossReferences(CancelIndicator.NullImpl); } else { EcoreUtil.resolveAll(resource); } return resource; } 	0	0	0	0	1	0
"public void execute(OrgAndName orgTag) { for (KeyPair keyPair : terremarkClient.listKeyPairsInOrg(orgTag.getOrg())) { if (keyPair.getName().matches(""jclouds#"" + orgTag.getName() + ""#[0-9a-f]+"")) { logger.debug("">> deleting keyPair(%s)"", keyPair.getName()); terremarkClient.deleteKeyPair(keyPair.getId()); // TODO: test this clear happens credentialsMap.remove(orgTag); logger.debug(""<< deleted keyPair(%s)"", keyPair.getName()); } } } "	0	0	0	0	1	0
private ActionForward processPromptForEditingPendingVersionResponse(ActionMapping mapping, HttpServletRequest request, HttpServletResponse response, AwardForm awardForm, VersionHistory foundPending) throws WorkflowException, IOException { ActionForward forward; Object buttonClicked = request.getParameter(KRADConstants.QUESTION_CLICKED_BUTTON); if (ConfirmationQuestion.NO.equals(buttonClicked)) { forward = mapping.findForward(Constants.MAPPING_BASIC); } else { initializeFormWithAward(awardForm, (Award) foundPending.getSequenceOwner()); response.sendRedirect(buildForwardUrl(awardForm.getDocId())); forward = null; } return forward; } 	0	0	0	0	1	0
@Override protected void onCommand(Command c) throws IOException, UnableToExecuteException { try { Thread.sleep(1000); } catch (InterruptedException ex) { Logger.getLogger(Successful.class.getName()).log(Level.SEVERE, null, ex); }  c.setExecuted(true); } 	0	0	0	0	1	0
"static long save(SQLiteDatabase db, Object object) { List<Field> columns = ReflectionUtil.getTableFields(object.getClass()); ContentValues values = new ContentValues(columns.size()); for (Field column : columns) { ReflectionUtil.addFieldValueToColumn(values, column, object); }  long id = db.insertWithOnConflict(NamingHelper.toSQLName(object.getClass()), null, values, SQLiteDatabase.CONFLICT_REPLACE);  if (SugarRecord.class.isAssignableFrom(object.getClass())) { ReflectionUtil.setFieldValueForId(object, id); } Log.i(""Sugar"", object.getClass().getSimpleName() + "" saved : "" + id);  return id; } "	0	0	0	0	1	0
"@Override public Dialog onCreateDialog(Bundle savedInstanceState) { super.onCreateDialog(savedInstanceState); mActivity = getActivity(); AlertDialog.Builder builder = new AlertDialog.Builder(mActivity); LayoutInflater inflater = mActivity.getLayoutInflater(); View layout = inflater.inflate(R.layout.dialog_repo_config, null); builder.setView(layout);  mGitName = (EditText) layout.findViewById(R.id.gitName); mGitEmail = (EditText) layout.findViewById(R.id.gitEmail);  StoredConfig config; String stored_name = """"; String stored_email = """";  try { config = mRepo.getGit().getRepository().getConfig(); stored_name = config.getString(""user"", null, ""name""); stored_email = config.getString(""user"", null, ""email""); } catch (StopTaskException e) { } if (stored_name == null) stored_name = """"; if (stored_email == null) stored_email = """"; mGitName.setText(stored_name); mGitEmail.setText(stored_email);  // set button listener builder.setTitle(R.string.title_config_repo); builder.setNegativeButton(R.string.label_cancel, new DummyDialogListener()); builder.setPositiveButton(R.string.label_save, this);  return builder.create(); } "	0	0	0	0	1	0
"private void bindCustomButtons() {  UIList<?> customServerList = find(""customServerList"", UIList.class); ReadOnlyBinding<Boolean> localSelectedServerOnly = new ReadOnlyBinding<Boolean>() { @Override public Boolean get() { return customServerList.getSelection() != null; } };  UIButton add = find(""add"", UIButton.class); if (add != null) { add.subscribe(button -> { AddServerPopup popup = getManager().pushScreen(AddServerPopup.ASSET_URI, AddServerPopup.class); // select the entry if added successfully popup.onSuccess(item -> { config.getNetwork().addServerInfo(item); visibleList.setSelection(item); }); }); }  UIButton edit = find(""edit"", UIButton.class); if (edit != null) { edit.bindEnabled(localSelectedServerOnly); edit.subscribe(button -> { AddServerPopup popup = getManager().pushScreen(AddServerPopup.ASSET_URI, AddServerPopup.class); ServerInfo info = visibleList.getSelection(); popup.setServerInfo(info);  // editing invalidates the currently known info, so query it again popup.onSuccess(item -> extInfo.put(item, infoService.requestInfo(item.getAddress(), item.getPort()))); }); }  UIButton removeButton = find(""remove"", UIButton.class); if (removeButton != null) { removeButton.bindEnabled(localSelectedServerOnly); removeButton.subscribe(button -> { ServerInfo info = visibleList.getSelection(); if (info != null) { config.getNetwork().removeServerInfo(info); extInfo.remove(info); visibleList.setSelection(null); } }); }  UILabel downloadLabel = find(""download"", UILabel.class); if (downloadLabel != null) { downloadLabel.bindText(new ReadOnlyBinding<String>() { @Override public String get() { return downloader.getStatus(); } }); } } "	0	0	0	0	1	0
public DateTime getRevisionDate () { if (revisionDateAsString == null || revisionDateAsString.isEmpty()) { return new DateTime(); } return DateUtils.convertStringToDate(revisionDateAsString); } 	0	0	0	0	1	0
private void restartTango() { mParameterNode.uploadPreferencesToParameterServer(); updateSaveMapButton(); mTangoServiceClientNode.callTangoConnectService(TangoConnectRequest.RECONNECT); } 	0	0	0	0	1	0
"@RequestMapping(value = ""/{announcementID}/details"", method = RequestMethod.POST) @PreAuthorize(""hasRole('ROLE_ADMIN')"") public String submitUpdatedAnnouncement(@PathVariable long announcementID, @RequestParam(required = false) String message, Model model) { Announcement announcement = announcementService.read(announcementID); announcement.setMessage(message);  try { announcementService.update(announcement); } catch (Exception e) { model.addAttribute(""errors"", ""Announcement was not updated successfully""); logger.error(e.getMessage()); } return ""redirect:/announcements/admin""; } "	0	0	0	0	1	0
"@RequestMapping(value = ""/admin"") public String getControlCentreAdminPage(final Model model) { List<Announcement> announcements = announcementService.getAllAnnouncements();  logger.trace(""Announcements list size: "" + announcements.size());  model.addAttribute(""announcements"", announcements);  if (model.containsAttribute(""errors"")) { logger.debug(""There have been errors! Print this out in a message/dialog""); }  return ANNOUNCEMENT_ADMIN_PAGE; } "	0	0	0	0	1	0
"public static void main(String[] args) throws Exception { if (args.length < 2) { usage(); System.exit(1); }  Integer threads = parseThreads(args); String[] servers = parseServers(args); String channel = parseChannel(args);  configureLogging();  System.out.println(""Receivers starting, awaiting messages.""); DataStore ds = DataStoreFactory.get(); ActiveMQReceiver receiver = new ActiveMQReceiver(servers, channel, threads, ds); new WatchDog().watchAndWait(receiver, ds); } "	0	0	0	0	1	0
"@Test public void shouldNotReturnRangeResultForPathWhenHeaderIsNotPresent() { this.mockRegularRequest();  Result result = RangeResults.ofPath(path);  assertEquals(result.status(), OK); assertEquals(""attachment; filename=\""test.tmp\"""", result.header(CONTENT_DISPOSITION).orElse("""")); } "	0	0	0	0	1	0
public String getDay(int count) { return week1.getDay(count).getName(); } 	0	0	0	0	1	0
"@Override public final void createToolWindowContent(final Project project, final ToolWindow toolWindow) {  initSystemInfo(); DefaultMutableTreeNode root = new DefaultMutableTreeNode(PROJECTS); JTree jTree = new Tree(root); jTree.setRootVisible(false); jTree.setAutoscrolls(true);  if (!propertiesComponent.isValueSet(Identity.BEAGLE_ID)) { windowObjects.setBeagleId(UUID.randomUUID().toString()); propertiesComponent.setValue(Identity.BEAGLE_ID, windowObjects.getBeagleId()); } else { windowObjects.setBeagleId(propertiesComponent.getValue(Identity.BEAGLE_ID)); }  Document document = EditorFactory.getInstance().createDocument(""""); Editor windowEditor = EditorFactory.getInstance().createEditor( document, project, FileTypeManager.getInstance() .getFileTypeByExtension(JAVA), false); //Dispose the editor once it's no longer needed windowEditorOps.releaseEditor(project, windowEditor); final RefreshAction refreshAction = new RefreshAction();  windowObjects.setTree(jTree); windowObjects.setWindowEditor(windowEditor);  final JComponent toolBar = setUpToolBar(refreshAction);  JBScrollPane jTreeScrollPane = new JBScrollPane(); jTreeScrollPane.getViewport().setBackground(JBColor.white); jTreeScrollPane.setAutoscrolls(true); jTreeScrollPane.setBackground(JBColor.white); windowObjects.setJTreeScrollPane(jTreeScrollPane);  final JSplitPane jSplitPane = new JSplitPane( JSplitPane.VERTICAL_SPLIT, jTreeScrollPane, windowEditor.getComponent()); jSplitPane.setResizeWeight(DIVIDER_LOCATION);  JPanel editorPanel = new JPanel(); editorPanel.setOpaque(true); editorPanel.setBackground(JBColor.white); editorPanel.setLayout(new BoxLayout(editorPanel, BoxLayout.Y_AXIS));  final JBScrollPane editorScrollPane = new JBScrollPane(); editorScrollPane.getViewport().setBackground(JBColor.white); editorScrollPane.setViewportView(editorPanel); editorScrollPane.setPreferredSize(new Dimension(EDITOR_SCROLL_PANE_WIDTH, EDITOR_SCROLL_PANE_HEIGHT)); editorScrollPane.getVerticalScrollBar().setUnitIncrement(UNIT_INCREMENT); editorScrollPane.setHorizontalScrollBarPolicy(JBScrollPane.HORIZONTAL_SCROLLBAR_NEVER);  windowObjects.setPanel(editorPanel);  final JTabbedPane jTabbedPane = new JBTabbedPane(); jTabbedPane.add(SPOTLIGHT_TAB, editorScrollPane); jTabbedPane.add(ALL_TAB, jSplitPane); windowObjects.setjTabbedPane(jTabbedPane); final Editor projectEditor = FileEditorManager.getInstance(project).getSelectedTextEditor(); // Display initial help information here. if (projectEditor != null) { uiUtils.showHelpInfo(RefreshAction.HELP_MESSAGE_NO_SELECTED_CODE); } else { uiUtils.showHelpInfo(RefreshAction.EDITOR_ERROR); } final JPanel mainPanel = new JPanel(); mainPanel.setLayout((new BoxLayout(mainPanel, BoxLayout.Y_AXIS))); mainPanel.add(toolBar); mainPanel.add(jTabbedPane);  if (!LegalNotice.isLegalNoticeAccepted()) { new LegalNotice(project).showLegalNotice(); } toolWindow.getComponent().getParent().add(mainPanel); } "	0	0	0	0	1	0
"long filterPathsAndLines(Stream<Path> stream, OptionSet opts) { Map<Path, List<FileLine>> grepped = new HashMap<>(); Predicate<Path> grepFilter = createGrepFilter(opts.getGrepPatterns(), grepped); if (opts.isCollectsExtension()) return collectExtensions(stream.filter(grepFilter), opts); TerminalOperation action = TerminalOperation.with(out, opts); if (action == TerminalOperation.NOT_FOR_PATH) { Function<Path, String> path2s = TerminalOperation.path2s(opts); action = path -> { for (FileLine line : grepped.get(path)) out.printf(""%s:%d:%s%n"", path2s.apply(path), line.number, line.text); }; } if (opts.isInteractive()) { Result r = new Result(); stream.filter(grepFilter).peek(r::addPath).forEachOrdered(action); if (grepped.isEmpty()) out.print(message(""i.notFound"")); else if (results.isEmpty() || grepped.size() != results.getFirst().getLineCount()) { results.push(r); out.println(results.summary()); } return r.matchedCount(); } else { LongAdder count = new LongAdder(); stream.peek(x -> count.increment()).filter(grepFilter).forEachOrdered(action); return count.longValue(); } } "	0	0	0	0	1	0
public boolean isDeleteTimeSet() { return this.deleteTime != null; } 	0	0	0	0	1	0
"@Before public void setUp() throws Exception { startMS = System.currentTimeMillis(); URL root = new URL(MancenterServlet.class.getResource(""/""), ""../test-classes""); String baseDir = new File(root.getFile().replaceAll(""%20"", "" "")).toString(); String sourceDir = baseDir + ""/../../src/test/webapp""; String sourceName = ""server_config.xml""; portNum = availablePort(); jettyServer = new JettyServer(portNum, sourceDir, sourceName);  hazelcastInstance = Hazelcast.newHazelcastInstance(makeConfig()); } "	0	0	0	0	1	0
"@Test public void userFriendlyErrorMessage() throws IOException { setWebDriverFactory(WebDriverManager.HTMLUNIT, new DriverOptions()); Runner runner = new Runner(); runner.setDriver(manager.get()); runner.setOverridingBaseURL(wsr.getBaseURL()); CommandFactory cf = runner.getCommandFactory(); TestCase testCase = Binder.newTestCase(""dummy"", ""dummy"", wsr.getBaseURL()); testCase.addCommand(cf, ""open"", ""/index.html""); testCase.addCommand(cf, ""click"", ""link=linktext""); Result result = runner.execute(testCase); assertThat(result.getMessage(), is(""Failure: Element link=linktext not found"")); } "	0	0	0	0	1	0
private static int [] zzUnpackTrans() { int [] result = new int[35784]; int offset = 0; offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result); return result; } 	0	0	0	0	1	0
"@Test public void testDeleteAutoScalingPolicy() { String policyId = ""451cc329-6def-4bfb-ae97-4eabbfa9391b""; ActionResponse resp = osclient.autoScaling().policies().delete(policyId); assertTrue(resp.isSuccess(), resp.getFault()); } "	0	0	0	0	1	0
"@Test public void testAuthenticityForm() { //given WebResponse response = WebRequest.get(""/authenticityform"").execute();  //then assertThat(response, not(nullValue())); assertThat(response.getStatusCode(), equalTo(StatusCodes.OK)); assertThat(response.getContent(), startsWith(""<input type=\""hidden\"" value=\"""")); assertThat(response.getContent(), endsWith("" name=\""authenticityToken\"" />"")); } "	0	0	0	0	1	0
"public static String toDBFile(String name) { if (name.toLowerCase().endsWith("".fga"")) { name = name.substring(0, name.length() - 4); } if (!name.toLowerCase().endsWith("".db"")) { name += "".db""; } return name; } "	0	0	0	0	1	0
boolean containsLocalIdentifier(String identifier) { return this.localIdentifiers.containsIdentifier(identifier); } 	0	0	0	0	1	0
public void setColor (boolean value) { if (value) { setBackgroundColor(Color.TRANSPARENT); } else  { setBackgroundColor(Color.rgb(224, 224, 224)); } } 	0	0	0	0	1	0
"private boolean notifyValidationErrors() { List<ValidationResult> validateResults = formIterator.validatePageAndGetResult(); if (validateResults.size() > 0) { StringBuffer buff = new StringBuffer(); for (ValidationResult vr : validateResults) { buff.append(vr.getMessage()).append(""\n""); } final Crouton crouton = Crouton.makeText(this, buff.toString(), Style.ALERT, (ViewGroup) findViewById(R.id.content)); crouton.setConfiguration(new Configuration.Builder().setDuration(2500).build()); crouton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Crouton.hide(crouton); } }); crouton.show(); return true; } return false; } "	0	0	0	0	1	0
"@Override public Race updateRace(RaceDTO dto) { Race fromDb = raceRepository.findOne(dto.getId()); fromDb.setIsOpen(dto.getIsOpen()); Race race = raceRepository.save(fromDb); serialNumberService.resetSerial(); log.info(""Race {} to {} was changed. Is it open: {}"", dto.getBeginningAsString(), dto.getEndAsString(), dto.getIsOpen()); return race; } "	0	0	0	0	1	0
public ContiguousDouble getYaw() { return new ContiguousDouble(mockIO.getGyroHeading(), 0, 360); } 	0	0	0	0	1	0
@Provides @Named(MONGO_CLIENT_NAME) public MongoClient mongoClient(MongoSettings settings) { try { return new MongoClient(new MongoClientURI(settings.uri())); } catch (UnknownHostException e) { throw new RuntimeException(e); } } 	0	0	0	0	1	0
private void initView() { mWaveSwipeRefreshLayout = (WaveSwipeRefreshLayout) findViewById(R.id.main_swipe); mWaveSwipeRefreshLayout.setColorSchemeColors(Color.WHITE, Color.WHITE); mWaveSwipeRefreshLayout.setOnRefreshListener(this); mWaveSwipeRefreshLayout.setWaveColor(0x00000000);  //mWaveSwipeRefreshLayout.setMaxDropHeight(1500);  mListview = (ListView) findViewById(R.id.main_list);  findViewById(R.id.button_of_wave_color).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { mWaveSwipeRefreshLayout.setWaveColor(0xFF000000+new Random().nextInt(0xFFFFFF)); // Random assign } });  ((SeekBar) findViewById(R.id.seekbar_of_drop_height)).setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() { @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) { // ignore }  @Override public void onStartTrackingTouch(SeekBar seekBar) { // ignore }  @Override public void onStopTrackingTouch(SeekBar seekBar) { float scale = (seekBar.getProgress() / 100f); mWaveSwipeRefreshLayout.setMaxDropHeight((int) (mWaveSwipeRefreshLayout.getHeight() * scale)); } }); } 	0	0	0	0	1	0
"public void login(final String email, final String pass, Response.Listener<JSONObject> responseListener){  String URL = BASE_URL + ""user/login"";  final Map<String, String> mParams = new HashMap<>(); mParams.put(""username"", email); mParams.put(""password"", pass);  JsonObjectRequest request = new JsonObjectRequest(URL, new JSONObject(mParams), responseListener, errorListener); requestQueue.add(request); } "	0	0	0	0	1	0
@Override public void onModuleItemSelected(HaloContentInstance instanceSelected) { GeneralContentItemActivity.startActivity(this, instanceSelected, mModule.getName(), mAdapter.getStatus(),mContentCreation); } 	0	0	0	0	1	0
"@Test @Ignore public void insertStart(){ Vm vm = new Vm(""instance-id"", ""cloud"", ""running"", ""user"", true); for (int i=0; i<100; i++) { UsageRecorder.insertStart(""123456""+i, ""joe"", ""aws"", UsageRecorder.createVmMetrics(vm)); UsageRecorder.insertEnd(""123456""+i, ""joe"", ""aws""); } } "	0	0	0	0	1	0
public void launchMap(Activity activity) { launchActivity(activity, MapItemsActivity.class); } 	0	0	0	0	1	0
"@Test public void getDisplayAfterInvalidResponse() { float seconds = 20; puzzle.adjustScore(seconds); puzzle.setSolution(""""); puzzle.setResponse(""X""); String display = puzzle.getResultDisplay();  assertThat(""display"", display, is(""not a word -12 / 20"")); } "	0	0	0	0	1	0
"@Test public void getDisplayAfterSkip() { float seconds = 20; puzzle.adjustScore(seconds); puzzle.setSolution(""""); String display = puzzle.getResultDisplay();  assertThat(""display"", display, is(""skipping -20 / 20"")); } "	0	0	0	0	1	0
"private static void createTable(Properties props, String tablename) throws SQLException { String driver = props.getProperty(JdbcDBClient.DRIVER_CLASS); String username = props.getProperty(JdbcDBClient.CONNECTION_USER); String password = props.getProperty(JdbcDBClient.CONNECTION_PASSWD, """"); String url = props.getProperty(JdbcDBClient.CONNECTION_URL); int fieldcount = Integer.parseInt(props.getProperty(JdbcDBClient.FIELD_COUNT_PROPERTY, JdbcDBClient.FIELD_COUNT_PROPERTY_DEFAULT));  if (driver == null || username == null || url == null) { throw new SQLException(""Missing connection information.""); }  Connection conn = null;  try { Class.forName(driver);  conn = DriverManager.getConnection(url, username, password); Statement stmt = conn.createStatement();  StringBuilder sql = new StringBuilder(""DROP TABLE IF EXISTS ""); sql.append(tablename); sql.append("";"");  stmt.execute(sql.toString());  sql = new StringBuilder(""CREATE TABLE ""); sql.append(tablename); sql.append("" (KEY VARCHAR PRIMARY KEY"");  for (int idx = 0; idx < fieldcount; idx++) { sql.append("", FIELD""); sql.append(idx); sql.append("" VARCHAR""); } sql.append("");"");  stmt.execute(sql.toString());  System.out.println(""Table "" + tablename + "" created..""); } catch (ClassNotFoundException e) { throw new SQLException(""JDBC Driver class not found.""); } finally { if (conn != null) { System.out.println(""Closing database connection.""); conn.close(); } } } "	0	0	0	0	1	0
"@RequestMapping(value = ROLE_MAPPING, method = RequestMethod.GET) public String roleBaseRedirection(HttpServletRequest request, HttpServletResponse response) { String url = ""home""; //other case is the ""ROLE_USER"" if (request.isUserInRole(""ROLE_ADMIN"")) { url = ADMIN_VIEW; } return ""redirect:/"" + url; } "	0	0	0	0	1	0
void selectGroup(final IndexedGuideGroup igg) { TargetSelection.setGuideGroup(_env, _obsComp, igg.group()); _tableData.rowIndexForGroupIndex(igg.index()).foreach(this::_setSelectedRow); } 	0	0	0	0	1	0
@Override public void visit(final int version, final int access, final String name, final String signature, final String superName, final String[] interfaces) { computeSVUID = (access & Opcodes.ACC_INTERFACE) == 0;  if (computeSVUID) { this.name = name; this.access = access; this.interfaces = new String[interfaces.length]; System.arraycopy(interfaces, 0, this.interfaces, 0, interfaces.length); }  super.visit(version, access, name, signature, superName, interfaces); } 	0	0	0	0	1	0
"private void createTopicIDLabels(ArrayList<Pair<Integer, Integer>> selectedTopicConfigurations) { AnchorPane node = (AnchorPane) canvas.getParent();  // Remove old labels. for (Label label : topicIDLabels) { node.getChildren().remove(label); } topicIDLabels.clear();  // Add new labels. for (int i = 0; i < selectedTopicConfigurations.size(); i++) { Pair<Integer, Integer> topicConfig = selectedTopicConfigurations.get(i);  Label label = new Label(); label.setText(topicConfig.getKey() + ""#"" + topicConfig.getValue()); label.setFont(Font.font(""Verdana"", FontPosture.ITALIC, 10));  topicIDLabels.add(label); node.getChildren().add(label); } } "	0	0	0	0	1	0
"public void run() {  try {  // attempt to create a PDF from the parsed tab createPdf(TabParser.parse(lines));  // deliver the callback by giving them the output PDF File LOG.info(""PDF created successfully, running Callback...""); callback.onCallback(true, helper.getFile());  } catch (Exception e) { LOG.log(Level.SEVERE, ""Could not convert tab: ""+e.getMessage(), e); callback.onCallback(false, e); } } "	0	0	0	0	1	0
"private Pair<Integer, Integer> queryNetworkInfo(HttpServletRequest request, String userIp) { IpInfo ipInfo = m_ipService.findIpInfoByString(userIp);  if (ipInfo != null) { String province = ipInfo.getProvince(); String operatorStr = ipInfo.getChannel(); Integer cityId = m_appConfigManager.getCities().get(province); Integer operatorId = m_appConfigManager.getOperators().get(operatorStr);  if (cityId != null && operatorId != null) { return new Pair<Integer, Integer>(cityId, operatorId); } else { Cat.logEvent(""Unknown"", province + "":"" + operatorStr, Event.SUCCESS, null); } } return null; } "	0	0	0	0	1	0
public Logger getLog(String name) { if (!loggers.containsKey(name)) { Logger value; try { value = (Logger) ServiceLocator.getInstance().newInstance(Logger.class); } catch (Exception e) { value = new DefaultLogger(); } value.setName(name); if (defaultLoggingLevel != null) { value.setLogLevel(defaultLoggingLevel); } loggers.put(name, value); }  return loggers.get(name); } 	0	0	0	0	1	0
@Transactional public Accounts getUsersByOrganization(UUID organizationId){ Accounts accounts = new Accounts(); List<HmisUser> accountEntities = daoFactory.getAccountDao().getAllUsersByOranization(organizationId);  for(HmisUser accountEntity : accountEntities){ accounts.addAccount(AccountConverter.convertToAccount(accountEntity)); }  return accounts; } 	0	0	0	0	1	0
"@SuppressWarnings(""deprecation"") public static ReplayParseContext create(ResultURIConverter uriConverter, WaybackRequest wbRequest, ContextResultURIConverterFactory converterFactory, CaptureSearchResult result, boolean rewriteHttpsOnly) { if (uriConverter instanceof ReplayURIConverter) { return new ReplayParseContext((ReplayURIConverter)uriConverter, result, wbRequest); } // backward-compatibility mode final ContextResultURIConverterFactory fact; if (converterFactory != null) { fact = converterFactory; } else if (uriConverter instanceof ContextResultURIConverterFactory) { fact = (ContextResultURIConverterFactory)uriConverter; } else { fact = new IdentityResultURIConverterFactory(uriConverter); } return new ReplayParseContext(fact, result); } "	0	0	0	0	1	0
@Override public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory) { BufferAggregator delegate = delegateFactory.factorizeBuffered(metricFactory);  return new RangeBufferAggregator(delegate, offset, size); } 	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") public static ArrayList<Label> getSelected(Bundle arguments) { return (ArrayList<Label>) arguments.getParcelable(ARG_SELECTED); } "	0	0	0	0	1	0
"public int getSourceDensity(Map<String,LexicalUnit> style, int defaultValue) { if (style.containsKey(""cn1-source-dpi"")) { return getDensityForDpi(style.get(""cn1-source-dpi"").getFloatValue()); } else { return defaultValue; } } "	0	0	0	0	1	0
"public void startNavigation(DirectionsRoute route) { if (!isServiceAvailable()) { Timber.d(""MapboxNavigation origin navigation.""); this.route = route; if (!isBound) { context.bindService(getServiceIntent(), connection, 0); } context.startService(getServiceIntent()); } } "	0	0	0	0	1	0
"@Override public boolean validate(UserIdentity user) { log.info(""validate("" + user + "") throwing UnsupportedOperationException.""); throw new UnsupportedOperationException(); } "	0	0	0	0	1	0
private int manageValidDestinationCheck(World world) { int broadcastCount = 0; if (rootClient.getInventory().getStackInSlot(rootClient.input_slot) != null || (getTaskQueue(0).size() > 0 && connection == null)) { if (validDestinationTracker.hasDelayPassed(world, TileEntityMachineMatterAnalyzer.VALID_LOCATION_CHECK_DELAY)) { for (int i = 0; i < 6; i++) { NBTTagCompound itemTag = new NBTTagCompound(); rootClient.getInventory().getStackInSlot(rootClient.input_slot).writeToNBT(itemTag); MatterNetworkRequestPacket packet = new MatterNetworkRequestPacket(rootClient, Reference.PACKET_REQUEST_VALID_PATTERN_DESTINATION,ForgeDirection.getOrientation(i),rootClient.getFilter(), itemTag); if (MatterNetworkHelper.broadcastPacketInDirection(world, packet, rootClient, ForgeDirection.getOrientation(i))) { resetValidLocation(); broadcastCount++; } } } } return broadcastCount; } 	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") private <C extends SecurityConfigurer<O, B>> void add(C configurer) throws Exception { Assert.notNull(configurer, ""configurer cannot be null"");  Class<? extends SecurityConfigurer<O, B>> clazz = (Class<? extends SecurityConfigurer<O, B>>) configurer .getClass(); synchronized (configurers) { if (buildState.isConfigured()) { throw new IllegalStateException(""Cannot apply "" + configurer + "" to already built object""); } List<SecurityConfigurer<O, B>> configs = allowConfigurersOfSameType ? this.configurers .get(clazz) : null; if (configs == null) { configs = new ArrayList<SecurityConfigurer<O, B>>(1); } configs.add(configurer); this.configurers.put(clazz, configs); if (buildState.isInitializing()) { configurer.init((B) this); } } } "	0	0	0	0	1	0
"@Override public void done() { LOGGER.info(""done {}"", claimedParcels); assignedParcels.removeAll(claimedParcels); claimedParcels.clear(); } "	0	0	0	0	1	0
private boolean isValid() { // check if all fields are valid for (Map.Entry<String, Boolean> entry : valid.entrySet()) { if (!entry.getValue()) { return false; } } return true; } 	0	0	0	0	1	0
"@Override public void onClick(TreeNode node, Object value) { IconTreeItemHolder.IconTreeItem item = (IconTreeItemHolder.IconTreeItem) value; if (item.type == IconTreeItemHolder.IconTreeItem.Type.FEED) { if (node.size() == 0) { String path1; String feed = (String) item.value; path1 = ""feed:"" + feed + "",type:r""; InventoryResponseBody body = new InventoryResponseBody(""true"", ""DESC"", path1);  BackendClient.of(getInventoryExplorerActivity()).getResourcesFromFeed( new ResourcesCallback(node), body); } } else if (item.type == IconTreeItemHolder.IconTreeItem.Type.RESOURCE) { if (node.size() == 0) { BackendClient.of(getInventoryExplorerActivity()).getRecResourcesFromFeed( new ResourcesCallback(node), (Resource) item.value); String path1;  Resource resource = (Resource) item.value; String temp = resource.getId(); String temp1 = temp.substring(temp.indexOf("".r."") + 3); path1 = ""id:""+temp1;  InventoryResponseBody body = new InventoryResponseBody(""true"", ""DESC"", path1);  BackendClient.of(getInventoryExplorerActivity()).getMetricsFromFeed( new MetricsCallback(node), body);  BackendClient.of(getInventoryExplorerActivity()).getOpreations( new OperationsCallback(node), (Resource) item.value); } }  else if (item.type == IconTreeItemHolder.IconTreeItem.Type.METRIC) {  MetricTemp metricInfo = (MetricTemp) item.value; String metricTypePath = metricInfo.getMetricInfo().getMetricTypePath(); String path = CanonicalPath.getByString(metricTypePath).getMetricType(); path = ""id:""+ path; InventoryResponseBody body = new InventoryResponseBody(""true"", ""DESC"", path); MetricConfiguration configuration = new MetricConfiguration(""null""); Metric metric1 = new Metric(metricInfo.getMetricInfo().getId(),null,configuration); BackendClient.of(getInventoryExplorerActivity()).getMetricType(new MetricTypeCallback(metric1),body);   Log.d(""Metric"",metric1.getConfiguration().getType());   }   else if (item.type == IconTreeItemHolder.IconTreeItem.Type.OPERATION) { Resource resource = (Resource) ((IconTreeItemHolder.IconTreeItem) node.getParent().getValue()).value; Operation operation = (Operation) ((IconTreeItemHolder.IconTreeItem) node.getValue()).value;  ConfirmOperationFragment dialog = new ConfirmOperationFragment(); Bundle bundle = new Bundle(); bundle.putParcelable(Fragments.Arguments.RESOURCE, resource); bundle.putParcelable(Fragments.Arguments.OPERATION, operation); dialog.setArguments(bundle); dialog.setCallback(callback); dialog.show(getSupportFragmentManager(), ""missiles""); } } "	0	0	0	0	1	0
"public int charCount () { return value.split("""").length - 1; } "	0	0	0	0	1	0
@Override public void onClick(View view) { if (mListener != null) { mListener.onSearchItemClick(view, getLayoutPosition()); // getText() } } 	0	0	0	0	1	0
@Override public void setDead() { if (!getEntityWorld().isRemote && !this.isDead && this.addedToChunk) { IBlockEntity.BlockEntityFormer.RevertEntity(this); } super.setDead(); } 	0	0	0	0	1	0
@Override public void sendMessage(Content content) {  Message m = new ImplMessage(content, contact_list, sender, owner);  } 	0	0	0	0	1	0
"public static void setSkin(final String playerName, final String skinName) { try { new Thread(new Runnable() {  @Override public void run() {  Object textures = null;  try { textures = MojangAPI.getSkinProperty(MojangAPI.getUUID(skinName));  if (textures == null) throw new SkinRequestException(Locale.NO_SKIN_DATA);  SkinStorage.setSkinData(skinName, textures); SkinStorage.setPlayerSkin(playerName, skinName); } catch (SkinRequestException e) { SkinStorage.setPlayerSkin(playerName, skinName); }  }  }).run(); } catch (Throwable t) { Player p = Iterables.getFirst(Bukkit.getOnlinePlayers(), null);  if (p != null) { ByteArrayOutputStream b = new ByteArrayOutputStream(); DataOutputStream out = new DataOutputStream(b);  try { out.writeUTF(""SkinsRestorer""); out.writeUTF(playerName); out.writeUTF(skinName);  p.sendPluginMessage(SkinsRestorer.getInstance(), ""BungeeCord"", b.toByteArray());  out.close(); } catch (Exception e) { e.printStackTrace(); } } } } "	0	0	0	0	1	0
"public List<String> ncksExtraParameters() { List<String> ncksExtraParameters = new ArrayList<String>();  Object layerKey = GoGoDuckConfig.getPropertyKeyByValuePart(profile); if (layerKey != null) { String layer = (String) layerKey; String ncksParametersProperty = String.format(""%s.ncks.parameters"", layer); String ncksParameters[] = GoGoDuckConfig.properties.getProperty(ncksParametersProperty).split("";"", -1); for (String ncksParameter : ncksParameters) { ncksExtraParameters.add(ncksParameter); } } return ncksExtraParameters; } "	0	0	0	0	1	0
"public boolean addTimeSubset() { if (GoGoDuckConfig.properties.containsValue(profile)) { String addTimeSubsetProperty = String.format(""%s.addTimeSubset"", GoGoDuckConfig.getPropertyKeyByValue(profile)); return Boolean.valueOf(addTimeSubsetProperty).booleanValue(); } return true; } "	0	0	0	0	1	0
@Override public String getBackgroundColorCSS(ConditionalFormattingRule rule) {  XSSFConditionalFormattingRule r = (XSSFConditionalFormattingRule) rule; CTDxf dxf = getXMLColorDataWithReflection(r);  CTColor bgColor = dxf.getFill().getPatternFill().getBgColor();  if (bgColor.getTheme() != 0) { XSSFColor themeColor = workbook.getTheme().getThemeColor( (int) bgColor.getTheme());  // CF rules have tint in bgColor but not the XSSFColor. return styleColor(themeColor, bgColor.getTint()); } else { byte[] rgb = bgColor.getRgb(); return rgb == null ? null : toRGBA(rgb); }  } 	0	0	0	0	1	0
"@Override public boolean isAvailable() { if (!OperatingSystem.getOS().equals(OperatingSystem.MAC)) { if (System.getProperty(""java.specification.version"").equalsIgnoreCase(""1.8"")) { String message = ""Please insert your PushBullet API key, so we could send notifications.\nHit cancel to disable.""; String s = JOptionPane.showInputDialog(null, message, ""PushBullet API key"", JOptionPane.QUESTION_MESSAGE); if (s != null) { Pushbullet pushbullet = new Pushbullet(s); this.pushbullet = pushbullet;  pushbullet.pushNote(""Parabot"", ""PushBullet notifications have been enabled!"");  this.available = true; } this.available = false; } } return this.available; } "	0	0	0	0	1	0
"private String generateReport(Date createdDate) throws InterruptedException { Calendar cal = Calendar.getInstance(); Date from = createdDate; cal.setTime(from); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); from = cal.getTime(); Date to = createdDate; cal.setTime(to); cal.set(Calendar.HOUR_OF_DAY, 23); cal.set(Calendar.MINUTE, 59); cal.set(Calendar.SECOND, 59); to = cal.getTime();  String generatedReportFileName = reportGenerator.generateReport(fileName, ""Failure"", from, to);  Thread.sleep(1000);  return generatedReportFileName; } "	0	0	0	0	1	0
@Override public void visitSuperTypeCallEntry(@NotNull KtSuperTypeCallEntry call) { KtValueArgumentList valueArgumentList = call.getValueArgumentList(); PsiElement elementToMark = valueArgumentList == null ? call : valueArgumentList; if (descriptor.getKind() == ClassKind.INTERFACE) { trace.report(SUPERTYPE_INITIALIZED_IN_INTERFACE.on(elementToMark)); } KtTypeReference typeReference = call.getTypeReference(); if (typeReference == null) return; if (primaryConstructor == null) { if (descriptor.getKind() != ClassKind.INTERFACE) { trace.report(SUPERTYPE_INITIALIZED_WITHOUT_PRIMARY_CONSTRUCTOR.on(call)); } recordSupertype(typeReference, trace.getBindingContext().get(BindingContext.TYPE, typeReference)); return; } OverloadResolutionResults<FunctionDescriptor> results = callResolver.resolveFunctionCall( trace, scopeForConstructor, CallMaker.makeConstructorCallWithoutTypeArguments(call), NO_EXPECTED_TYPE, outerDataFlowInfo, false); if (results.isSuccess()) { KotlinType supertype = results.getResultingDescriptor().getReturnType(); recordSupertype(typeReference, supertype); ClassDescriptor classDescriptor = TypeUtils.getClassDescriptor(supertype); if (classDescriptor != null) { // allow only one delegating constructor if (primaryConstructorDelegationCall[0] == null) { primaryConstructorDelegationCall[0] = results.getResultingCall(); } else { primaryConstructorDelegationCall[0] = null; } } // Recording type info for callee to use later in JetObjectLiteralExpression trace.record(PROCESSED, call.getCalleeExpression(), true); trace.record(EXPRESSION_TYPE_INFO, call.getCalleeExpression(), TypeInfoFactoryKt.noTypeInfo(results.getResultingCall().getDataFlowInfoForArguments().getResultInfo())); } else { recordSupertype(typeReference, trace.getBindingContext().get(BindingContext.TYPE, typeReference)); } } 	0	0	0	0	1	0
private void measureChild(LayoutState.View child, SectionData2 sd) { if (child.wasCached) { return; }  mLayoutManager.measureChildWithMargins(child.view, sd.marginStart + sd.marginEnd, 0); } 	0	0	0	0	1	0
"public String templateSend(WxMpTemplateMessage templateMessage) throws WxErrorException { String url = ""https://api.weixin.qq.com/cgi-bin/message/template/send""; String responseContent = execute(new SimplePostRequestExecutor(), url, templateMessage.toJson()); JsonElement tmpJsonElement = Streams.parse(new JsonReader(new StringReader(responseContent))); final JsonObject jsonObject = tmpJsonElement.getAsJsonObject(); if (jsonObject.get(""errcode"").getAsInt() == 0) return jsonObject.get(""msgid"").getAsString(); throw new WxErrorException(WxError.fromJson(responseContent)); } "	0	0	0	0	1	0
@Override protected void clearAllNotifications() { notifications.clear(); } 	0	0	0	0	1	0
"@Test public void testListenerException() throws Exception { this.logger.info(""Start exception""); Map<String, Object> props = KafkaTestUtils.consumerProps(""test1"", ""true"", embeddedKafka); DefaultKafkaConsumerFactory<Integer, String> cf = new DefaultKafkaConsumerFactory<>(props); ContainerProperties containerProps = new ContainerProperties(topic6); containerProps.setAckCount(23); ContainerProperties containerProps2 = new ContainerProperties(topic2); BeanUtils.copyProperties(containerProps, containerProps2, ""topics"", ""topicPartitions"", ""topicPattern"", ""ackCount"", ""ackTime""); final CountDownLatch latch = new CountDownLatch(4); final AtomicBoolean catchError = new AtomicBoolean(false); containerProps.setMessageListener((MessageListener<Integer, String>) message -> { ConcurrentMessageListenerContainerTests.this.logger.info(""auto: "" + message); latch.countDown(); throw new RuntimeException(""intended""); }); containerProps.setGenericErrorHandler((ErrorHandler) (thrownException, record) -> catchError.set(true));  ConcurrentMessageListenerContainer<Integer, String> container = new ConcurrentMessageListenerContainer<>(cf, containerProps); container.setConcurrency(2); container.setBeanName(""testException"");  container.start(); ContainerTestUtils.waitForAssignment(container, embeddedKafka.getPartitionsPerTopic()); Map<String, Object> senderProps = KafkaTestUtils.producerProps(embeddedKafka); ProducerFactory<Integer, String> pf = new DefaultKafkaProducerFactory<>(senderProps); KafkaTemplate<Integer, String> template = new KafkaTemplate<>(pf); template.setDefaultTopic(topic6); template.sendDefault(0, ""foo""); template.sendDefault(2, ""bar""); template.sendDefault(0, ""baz""); template.sendDefault(2, ""qux""); template.flush(); assertThat(latch.await(60, TimeUnit.SECONDS)).isTrue(); assertThat(catchError.get()).isTrue(); container.stop(); this.logger.info(""Stop exception"");  } "	0	0	0	0	1	0
@Override public Map<String, Object> next() { Map<String, Object> current = this.map; this.map = get(); return current; } 	0	0	0	0	1	0
"protected CompletionStage<Result> handleRemoveLineItemFormErrors(final Form<RemoveLineItemFormData> removeLineItemForm, final Cart cart) { flash(UserFeedback.ERROR, ""The form contains invalid data."");// TODO get from i18n return completedFuture(redirect(reverseRouter.showCart(userContext().languageTag()))); } "	0	0	0	0	1	0
public void recordAllCounts(final long timestamp, final String[] names, final int[] counts) { for (int index = 0; index < names.length; index++) { String name = names[index]; int count = counts[index]; recordWithTime(name, count, timestamp); } } 	0	0	0	0	1	0
@Override public int compare(final Pair<ExecutionReference, ExecutableFlow> pair1, final Pair<ExecutionReference, ExecutableFlow> pair2) { ExecutableFlow exflow1 = null, exflow2 = null; if (pair1 != null && pair1.getSecond() != null) { exflow1 = pair1.getSecond(); } if (pair2 != null && pair2.getSecond() != null) { exflow2 = pair2.getSecond(); } if (exflow1 == null && exflow2 == null) { return 0; } else if (exflow1 == null) { return -1; } else if (exflow2 == null) { return 1; } else { // descending order of priority int diff = getPriority(exflow2) - getPriority(exflow1); if (diff == 0) { // ascending order of update time, if same priority diff = (int) (exflow1.getUpdateTime() - exflow2.getUpdateTime()); } if (diff == 0) { // ascending order of execution id, if same priority and updateTime diff = exflow1.getExecutionId() - exflow2.getExecutionId(); } return diff; } } 	0	0	0	0	1	0
"public void retrieveDatasetFromDisk(int datasetId) { // Safety check, is there enough memory available long memRequired = datasets.get(datasetId).size(); boolean enoughMem = bufferPool.isThereXMemAvailable(memRequired); if(! enoughMem) { LOG.error(""Impossible to load to memory: Not enough mem available""); return; }  try { LOG.info(""Returning cached Dataset to memory, id -> {}"", datasetId); try { cacher.retrieveFromDisk(datasets.get(datasetId)); } catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } } finally { LOG.info(""Finished returning cached Dataset to memory, id -> {}"", datasetId); } } "	0	0	0	0	1	0
public void initDefaultCommand() { // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND  setDefaultCommand(new WristPostion());  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND  // Set the default command for a subsystem here. // setDefaultCommand(new MySpecialCommand()); } 	0	0	0	0	1	0
public float max() { return PApplet.max(cursor1.pos, cursor2.pos) * 1f / width; } 	0	0	0	0	1	0
public static UUID getUUIDOf(String name) throws Exception { return new UUIDFetcher(Arrays.asList(name)).call().get(name); } 	0	0	0	0	1	0
"@Override public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) { if (dir.getFileName() != null) { if (OS.isWindowsOrNewer(WindowsVersion.WinOld)) { // On windows we can skip some folders if (skipList.contains(dir.getFileName().toString().toLowerCase())) return SKIP_SUBTREE; } else { if (skipList.contains(dir.toAbsolutePath().toString())) return SKIP_SUBTREE; }  if (isValidGameDirectory(dir)) { int answer = JOptionPane.showConfirmDialog(null, ""Found the game files at: "" + dir.toString() + ""\nIs this your primary game install?"", ""Confirm game directory"", JOptionPane.YES_NO_OPTION); if (JOptionPane.YES_OPTION == answer) { gameRoot = dir; return TERMINATE; } } } return CONTINUE; } "	0	0	0	0	1	0
"private void testCreateSource(MojoParameters params) { DockerAssemblyConfigurationSource source = new DockerAssemblyConfigurationSource(params, new BuildDirs(params,""image""),assemblyConfig);  String[] descriptors = source.getDescriptors(); String[] descriptorRefs = source.getDescriptorReferences();  assertEquals(1, descriptors.length); assertEquals(EnvUtil.prepareAbsoluteSourceDirPath(params, ""assembly.xml"").getAbsolutePath(), descriptors[0]);  assertEquals(1, descriptorRefs.length); assertEquals(""project"", descriptorRefs[0]);  assertFalse(source.isIgnorePermissions());  String outputDir = params.getOutputDirectory(); assertTrue(startsWithDir(outputDir, source.getOutputDirectory())); assertTrue(startsWithDir(outputDir, source.getWorkingDirectory())); assertTrue(startsWithDir(outputDir, source.getTemporaryRootDirectory())); } "	0	0	0	0	1	0
"@Override public boolean keyDown(int keycode) {  // keine Steuerung wenn das Spiel pausiert ist if (!game.isPaused()) {  if (game.getState() == GameState.UPPERWORLD) {  switch (keycode) { case Keys.LEFT: game.changeSwimmerPosition_swim(-1); bewegungmusic = Gdx.audio.newMusic(Gdx.files .internal(""button-21.mp3"")); bewegungmusic.setVolume(0.05f); bewegungmusic.play(); break; case Keys.RIGHT: game.changeSwimmerPosition_swim(1); bewegungmusic = Gdx.audio.newMusic(Gdx.files .internal(""button-21.mp3"")); bewegungmusic.setVolume(0.05f); bewegungmusic.play(); break; case Keys.UP: break; case Keys.DOWN: break; case Keys.ALT_LEFT: game.changeDiveState();  } }  else if (game.getState() == GameState.LOWERWORLD) {  switch (keycode) { case Keys.UP: game.changeSwimmerPosition_dive(20000); break; case Keys.DOWN: game.changeSwimmerPosition_dive(-20000); break; } }  }  if (game.getState() != GameState.MAINMENU) { if (keycode == Keys.ESCAPE) { game.pauseGame(true); } }  return false;  } "	0	0	0	0	1	0
"public void sendComplex() throws EmailException, MalformedURLException { htmlEmail.addTo(this.recipient.getEmail(), this.recipient.getFirstname() + "" "" + this.recipient.getSurname()); htmlEmail.setFrom(mailConfig.getFrom(), ""Me""); htmlEmail.setSubject(""HTML"" + mailConfig.getSubject() + "" "" + new Date());  // embed the image and get the content id URL url = new URL(""http://www.apache.org/images/asf_logo_wide.gif""); String cid = htmlEmail.embed(url, ""Apache logo"");  // set the html message htmlEmail.setHtmlMsg(""<html>The apache logo - <img src=\""cid:"" + cid + ""\""></html>"");  // set the alternative message htmlEmail.setTextMsg(""Your email client does not support HTML messages - thus no Apache logo"");  if (!mailConfig.isDemoMode()) { htmlEmail.send(); } } "	0	0	0	0	1	0
public Point headToHot(){ Point target = board.getMaxTemPos(); return headToPoint(target); } 	0	0	0	0	1	0
"@Listener public void onTeleportEventServer(TeleportEvent.Server event) { Player player = event.getPlayer();  Optional<PluginContainer> optionalPlugin = Main.getGame().getPluginManager().getPlugin(""spongee"");  if (!optionalPlugin.isPresent()) { player.sendMessage(Text.of(TextColors.DARK_RED, ""Bungee portals require Spongee plugin dependency"")); event.setCancelled(true); return; } } "	0	0	0	0	1	0
public final void updateChangesWithRedo(C redoneChange) { // [0,    1,    2,    3,                       4] // [undo, undo, undo, undo that is now a redo, currentPosition (since it was already incremented) in next()] // undos == changes.subList(0, currentPosition - 2) if (0 <= currentPosition - 2) { changes.subList(0, currentPosition - 2).replaceAll(outdatedUndo -> updateUndoWithPushedChange(outdatedUndo, redoneChange)); }  updateRedosWithAddedChange(redoneChange); } 	0	0	0	0	1	0
public final void updateChangesWithPush(C pushedChange) { getUndos().replaceAll(outdatedUndo -> updateUndoWithPushedChange(outdatedUndo, pushedChange));  updateRedosWithAddedChange(pushedChange); } 	0	0	0	0	1	0
"@Override public void scroll(double dx, double dy) { if (mouseSocket != null) mouseSocket.scroll(dx, dy); else Log.w(""Connect SDK"", ""Mouse Socket is not ready yet""); } "	0	0	0	0	1	0
"@Override public void setExternalInput(ExternalInputInfo externalInputInfo , final ResponseListener<Object> listener) { String uri = ""ssap://tv/switchInput"";  JSONObject payload = new JSONObject();  try { if (externalInputInfo  != null && externalInputInfo .getId() != null) { payload.put(""inputId"", externalInputInfo.getId()); } else { Log.w(""Connect SDK"", ""ExternalInputInfo has no id""); } } catch (JSONException e) { e.printStackTrace(); }  ServiceCommand<ResponseListener<Object>> request = new ServiceCommand<ResponseListener<Object>>(this, uri, payload, true, listener); request.send(); } "	0	0	0	0	1	0
"@Test public void startWithoutSpace() { assertEquals(1, validateParagraph(new Paragraph().appendSentence(""it like a piece of a cake."", 1)).size()); } "	0	0	0	0	1	0
@Test public void voidParagraph() { assertEquals(0, validateParagraph(new Paragraph()).size()); } 	0	0	0	0	1	0
"private BinaryBooleanOperator processBinaryBooleanOperator(SQLParser.Binary_boolean_operatorContext binaryBooleanOperator) { if (binaryBooleanOperator.AND() != null) { return BinaryBooleanOperator.AND; } else if (binaryBooleanOperator.OR() != null) { return BinaryBooleanOperator.OR; } else if (binaryBooleanOperator.XOR() != null) { return BinaryBooleanOperator.XOR; } throw new UnsupportedOperationException(""Unknown binary boolean operator""); } "	0	0	0	0	1	0
"private DataSource processJoinClause(Map<SQLParser.Table_atomContext, DataSource> tableAtoms, SQLParser.Join_clauseContext joinClauseContext) { if (joinClauseContext.inner_join_clause() != null) { return processInnerJoinClause(tableAtoms, joinClauseContext.inner_join_clause()); } else if (joinClauseContext.outer_join_clause() != null) { return processOuterJoinClause(tableAtoms, joinClauseContext.outer_join_clause()); } else if (joinClauseContext.natural_join_clause() != null) { return processNaturalJoinClause(tableAtoms, joinClauseContext.natural_join_clause()); } throw new UnsupportedOperationException(""Unknown join clause type""); } "	0	0	0	0	1	0
"private Object processComplexBooleanExpression(SQLParser.Complex_boolean_expressionContext complexBooleanExpression) { if (complexBooleanExpression.unary_boolean_operator() != null && complexBooleanExpression.complex_boolean_expression(0) != null) { Object expression = processComplexBooleanExpression(complexBooleanExpression.complex_boolean_expression(0)); UnaryBooleanOperator unaryBooleanOperator = processUnaryBooleanOperator(complexBooleanExpression.unary_boolean_operator()); return new UnaryBooleanExpression(expression, unaryBooleanOperator); } else if ( complexBooleanExpression.binary_boolean_operator(0) != null && complexBooleanExpression.simple_boolean_expression(0) != null && complexBooleanExpression.simple_boolean_expression(1) != null ) { Object left = processSimpleBooleanExpression(complexBooleanExpression.simple_boolean_expression(0)); Object right = processSimpleBooleanExpression(complexBooleanExpression.simple_boolean_expression(1)); BinaryBooleanOperator binaryBooleanOperator = processBinaryBooleanOperator(complexBooleanExpression.binary_boolean_operator(0)); return new BinaryBooleanExpression(left, binaryBooleanOperator, right); } else if (complexBooleanExpression.simple_boolean_expression(0) != null) { return processSimpleBooleanExpression(complexBooleanExpression.simple_boolean_expression(0)); } else if (complexBooleanExpression.binary_boolean_operator(0) != null && complexBooleanExpression.complex_boolean_expression(1) != null) { return processComplexBooleanExpressionsList( Optional.empty(), complexBooleanExpression.complex_boolean_expression(), complexBooleanExpression.binary_boolean_operator() ); } else if (complexBooleanExpression.LPAREN() != null && complexBooleanExpression.complex_boolean_expression(0) != null) { return processComplexBooleanExpression(complexBooleanExpression.complex_boolean_expression(0)); } throw new UnsupportedOperationException(""Unknown boolean expression type""); } "	0	0	0	0	1	0
"private BinaryArithmeticOperator determineBinaryArithmeticOperator(SQLParser.Binary_arithmetic_operatorContext binaryArithmeticOperator) { if (binaryArithmeticOperator.PLUS() != null) { return BinaryArithmeticOperator.PLUS; } else if (binaryArithmeticOperator.MINUS() != null) { return BinaryArithmeticOperator.MINUS; } else if (binaryArithmeticOperator.MULTIPLY() != null) { return BinaryArithmeticOperator.MULTIPLY; } else if (binaryArithmeticOperator.DIVIDE() != null) { return BinaryArithmeticOperator.DIVIDE; } else if (binaryArithmeticOperator.MOD() != null) { return BinaryArithmeticOperator.MOD; } else if (binaryArithmeticOperator.BIT_AND() != null) { return BinaryArithmeticOperator.BIT_AND; } else if (binaryArithmeticOperator.BIT_OR() != null) { return BinaryArithmeticOperator.BIT_OR; } else if (binaryArithmeticOperator.BIT_XOR() != null) { return BinaryArithmeticOperator.BIT_XOR; } else if (binaryArithmeticOperator.SHIFT_LEFT() != null) { return BinaryArithmeticOperator.SHIFT_LEFT; } else if (binaryArithmeticOperator.SHIFT_RIGHT() != null) { return BinaryArithmeticOperator.SHIFT_RIGHT; } throw new UnsupportedOperationException(""Unknown binary arithmetic operator""); } "	0	0	0	0	1	0
"public static void moveFileToSubmitLocation(javax.swing.JTextField fileLocation, InstanceCall inst, SQLMethods sqlMethods, String printer, String fName, String lName, String Class, String section, String fileName, String email){ String fileLoc = """"; try {  //********* Copies the Student Submition to the Directory ******** org.apache.commons.io.FileUtils.copyFileToDirectory(new File(fileLocation.getText()), new File(inst.getSubmission()));  //********* Stores File Location ******** fileLoc = inst.getSubmission() + new File(fileLocation.getText()).getName();  //********* inserts Student Submission in Data Base ********* sqlMethods.insertIntoPendingJobs(printer, fName, lName, Class, section, fileName, fileLoc.replace(""\\"", ""\\\\""), email);  java.util.concurrent.TimeUnit.SECONDS.sleep(2); }  catch (IOException e) { javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ""IOException! File couldn't be navigated.""); }  catch (InterruptedException ex) { Logger.getLogger(Student_Submission.class.getName()).log(Level.SEVERE, null, ex); }  }//end moveFileToSubmitLocation "	0	0	0	0	1	0
"private static synchronized void cleanDatabase(Flyway flyway, DataSource dataSource) throws SQLException { try { // First, run Flyway's clean command on database. // For MOST database types, this takes care of everything flyway.clean();  Connection connection = null; try { // Get info about which database type we are using connection = dataSource.getConnection(); DatabaseMetaData meta = connection.getMetaData(); String dbKeyword = findDbKeyword(meta);  // If this is Oracle, the only way to entirely clean the database // is to also purge the ""Recyclebin"". See: // http://docs.oracle.com/cd/B19306_01/server.102/b14200/statements_9018.htm if(dbKeyword.equals(DBMS_ORACLE)) { PreparedStatement statement = null; try { statement = connection.prepareStatement(""PURGE RECYCLEBIN""); statement.executeQuery(); } finally { if(statement!=null && !statement.isClosed()) statement.close(); } } } finally { if(connection!=null && !connection.isClosed()) connection.close(); } } catch(FlywayException fe) { // If any FlywayException (Runtime) is thrown, change it to a SQLException throw new SQLException(""Flyway clean error occurred"", fe); } } "	0	0	0	0	1	0
"@Override public boolean onOptionsItemSelected( MenuItem item ) { if ( item.getTitle().equals( ""Stop Arrival Notification"" ) ) { NotifyServiceManager.stopNotifyService(this); } else if ( item.getTitle().equals( ""Clear Fields"" ) ) { clearOmniBar(); }  return true; } "	0	0	0	0	1	0
"protected void await( Supplier<Boolean> condition, AccessMode mode ) { // FIXME polling! wait that GC reclaimed readers and writer // a writer has read lock too, so we avoid writer check while (!condition.get()) { log.warn( Thread.currentThread().getName() + "": await lock: "" + mode + "" on: "" + context.getEntity().id() ); try { wait( 100 ); cleanStaleHolders(); } catch (InterruptedException e) { } } } "	0	0	0	0	1	0
"public String zGetDisplayedTextIssuedByEmail() throws HarnessException { logger.info(myPageName() + "" Issued by email"");  String locator = ""//table[@class='CertificateDetails']/tbody/tr[@data-name='Email'][2]/td[@class='Value']"" ;  // Make sure the locator exists if ( !this.sIsElementPresent(locator) ) { throw new HarnessException(""Issued to email ""+ locator +"" is not present""); }  return(this.sGetText(locator)); } "	0	0	0	0	1	0
"public AbsPage zPressButton(Button button) throws HarnessException { logger.info(myPageName() + "" zPressButton("" + button + "")"");  tracer.trace(""Press the "" + button + "" button"");  if (button == null) throw new HarnessException(""Button cannot be null!"");  String locator = null; AbsPage page = null;  SleepUtil.sleepSmall();  if (button == Button.O_ATTACH_DROPDOWN) { if (sIsElementPresent(""css=td[id='zb__COMPOSE-2___attachments_btn_dropdown']"")) { locator = ""css=td[id='zb__COMPOSE-2___attachments_btn_dropdown']""; } else { locator = ""css=td[id='zb__COMPOSE-1___attachments_btn_dropdown']""; }  } else if (button == Button.B_ATTACH) { if (sIsElementPresent(""css=td[id='zb__COMPOSE-2___attachments_btn_title']"")) { locator = ""css=td[id='zb__COMPOSE-2___attachments_btn_title']""; } else { locator = ""css=td[id='zb__COMPOSE-1___attachments_btn_title']""; }  } else if (button == Button.B_MY_COMPUTER) { locator = ""css=div[class='DwtMenu']  td[id$='_title']:contains('My Computer')"";  } else if (button == Button.B_ATTACH_INLINE) { locator = ""css=div[class='DwtMenu']  td[id$='_title']:contains('Attach Inline')"";  } else { throw new HarnessException(""no logic defined for button "" + button); }  this.sClick(locator); SleepUtil.sleepSmall();  return (page); } "	0	0	0	0	1	0
"public void setJSONData() { final ListAdapter adapter = new SimpleAdapter(getActivity(), mInventoryList, R.layout.cust_favorites_list_view, new String[] {TAG_TRUCKNAME, TAG_PRODNAME, TAG_PRODPRICE}, new int[] {R.id.favorites_truck_name, R.id.favorites_prod_name, R.id.favorites_prod_price});  lv.setAdapter(adapter); lv.setOnItemClickListener(new AdapterView.OnItemClickListener() {  @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { long arrayPosition = adapter.getItemId(position); String prodNameSend = mInventoryList.get((int)arrayPosition).get(TAG_PRODNAME); String prodPriceSend = mInventoryList.get((int)arrayPosition).get(TAG_PRODPRICE); String truckNameSend = mInventoryList.get((int)arrayPosition).get(TAG_TRUCKNAME); String productIDSend = mInventoryList.get((int)arrayPosition).get(TAG_PRODID);  DialogFragment newFragment = EditFavoritesDialogFragment.newInstance(mUsername, productIDSend, prodNameSend, prodPriceSend, truckNameSend);  newFragment.setTargetFragment(FavoritesTabFragment.this, 1); newFragment.show(getActivity().getSupportFragmentManager(), ""favorite dialog""); } }); } "	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_fullscreen_directory); this.context = this;  WIDTH = Resources.getSystem().getDisplayMetrics().widthPixels; HEIGHT = Resources.getSystem().getDisplayMetrics().heightPixels;  findViewById(R.id.layoutHeader).setMinimumHeight((int)(HEIGHT*0.15));  //searchbox searchBox = ((EditText)findViewById(R.id.listFilter)); searchBox.setWidth((int)(WIDTH * 0.8)); //directory directoryList = ((ListView)findViewById(R.id.employeeList)); directoryList.setPadding((int)(WIDTH*0.1), 0, (int)(WIDTH*0.1), 0); directoryList.setClickable(true); directoryList.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { searchBox.clearComposingText(); Employee employee = (Employee)directoryList.getItemAtPosition(position); if (employee != null) { Intent intent = new Intent(context, PathwayDirectionsActivity.class); Bundle mBundle = new Bundle(); mBundle.putSerializable(context.getString(R.string.EMPLOYEE_KEY), employee); intent.putExtras(mBundle); context.startActivity(intent); } } }); //adapter for list directoryAdapter = new CustomListAdapter(context, R.layout.item_list_row, null);  //loading spinner progressDialog = new ProgressDialog(context); progressDialog.setCancelable(false); progressDialog.setMessage(""Retrieving the latest information...""); progressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);  if (hasNetwork()) { fetchEmployeeListTimer(); } else { forceConnectOrExit(); }  } "	0	0	0	0	1	0
"public byte[] getExtraSigningKeyData() { // we assume no crypto key data if (_payload == null || _payload.length <= HEADER_LENGTH) return null; SigType type = getSigType(); if (type == null) throw new UnsupportedOperationException(""unknown sig type""); int extra = 128 - type.getPubkeyLen(); if (_payload.length == HEADER_LENGTH + extra) return getExtraKeyData(); byte[] rv = new byte[extra]; System.arraycopy(_payload, HEADER_LENGTH, rv, 0, extra); return rv; } "	0	0	0	0	1	0
"private void configureButtons() { rateMe.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { rateApp(); Log.d(TAG, ""go to Google Play Store for Rate-Me""); RateMeDialogTimer.setOptOut(getActivity(), true); if (onActionListener != null) { onActionListener.onHandleRateMeAction(RateMeAction.HIGH_RATING_WENT_TO_GOOGLE_PLAY, ratingBar.getRating()); } dismiss(); } });  noThanks.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (goToMail) { DialogFragment dialogMail = DialogFeedback.newInstance(email, titleBackgroundColor, dialogColor, textColor, logoResId, rateButtonTextColor, rateButtonBackgroundColor, lineDividerColor, ratingBar.getRating() ); dialogMail.show(getFragmentManager(), ""goToMail""); dismiss(); Log.d(TAG, ""got to Mail for explain what is the problem""); } else { dismiss(); if (onActionListener != null) { onActionListener.onHandleRateMeAction(RateMeAction.LOW_RATING, ratingBar.getRating()); } } RateMeDialogTimer.setOptOut(getActivity(), true); } }); } "	0	0	0	0	1	0
private void initializeUiFieldsDialogGoToMail(){ confirmDialogTitleView = getActivity().getLayoutInflater().inflate(R.layout.feedback_dialog_title, null); confirmDialogView = getActivity().getLayoutInflater().inflate(R.layout.feedback_dialog_message, null); confirmDialogTitleView.setBackgroundColor(getArguments().getInt(EXTRA_DIALOG_TITLE_COLOR)); confirmDialogView.setBackgroundColor(getArguments().getInt(EXTRA_DIALOG_COLOR)); if (getArguments().getInt(EXTRA_LOGO) > 0) { ((ImageView) confirmDialogView.findViewById(R.id.app_icon_dialog_mail)).setImageResource(getArguments().getInt(EXTRA_LOGO)); } else { ((ImageView) confirmDialogView.findViewById(R.id.app_icon_dialog_mail)).setVisibility(View.GONE); } ((TextView) confirmDialogTitleView.findViewById(R.id.confirmDialogTitle)).setTextColor(getArguments().getInt(EXTRA_TEXT_COLOR)); ((TextView) confirmDialogView.findViewById(R.id.mail_dialog_message)).setTextColor(getArguments().getInt(EXTRA_TEXT_COLOR)); cancel = (Button) confirmDialogView.findViewById(R.id.buttonCancel); yes = (Button) confirmDialogView.findViewById(R.id.buttonYes); cancel.setTextColor(getArguments().getInt(EXTRA_RATE_BUTTON_TEXT_COLOR)); yes.setTextColor(getArguments().getInt(EXTRA_RATE_BUTTON_TEXT_COLOR)); cancel.setBackgroundColor(getArguments().getInt(EXTRA_RATE_BUTTON_BG_COLOR)); yes.setBackgroundColor(getArguments().getInt(EXTRA_RATE_BUTTON_BG_COLOR)); } 	0	0	0	0	1	0
"@Test public void calculateAggregatedStatsTest() throws Exception { //Calculate stats for 2 cohorts at one time VariantStatisticsManager vsm = new VariantStatisticsManager();  checkAggregatedCohorts(dbAdaptor, studyConfiguration);  Integer fileId = studyConfiguration.getFileIds().get(Paths.get(inputUri).getFileName().toString()); QueryOptions options = new QueryOptions(VariantStorageManager.Options.FILE_ID.key(), fileId); options.put(VariantStorageManager.Options.LOAD_BATCH_SIZE.key(), 100);   //Calculate stats Map<String, Set<String>> cohorts = Collections.singletonMap(VariantSourceEntry.DEFAULT_COHORT, Collections.emptySet()); URI stats = vsm.createStats(dbAdaptor, outputUri.resolve(""aggregated.stats""), cohorts, Collections.emptyMap(), studyConfiguration, options); vsm.loadStats(dbAdaptor, stats, studyConfiguration, options);   checkAggregatedCohorts(dbAdaptor, studyConfiguration); } "	0	0	0	0	1	0
"@Test public void testCreateTableResolveLike() throws Exception { server.executeQuery(""alter database `test` character set 'utf8'""); server.executeQuery(""create table `test`.`test_alike` ( ii int, aa char, PRIMARY KEY (ii))""); TableCreate c = parse(""CREATE TABLE alike_2 like `test`.`test_alike`"", ""test"", TableCreate.class); ResolvedTableCreate rc = c.resolve(getSchema()); assertThat(rc.def.getColumnList().size(), is(2)); assertThat(rc.def.pkColumnNames.get(0), is(""ii"")); assertThat(((StringColumnDef) rc.def.getColumnList().get(1)).charset, is(""utf8"")); } "	0	0	0	0	1	0
"@Override public String getReply(String args, GuildMessageReceivedEvent event, FutureBot bot) { if (!event.getMember().getRoles().parallelStream().anyMatch(r -> r.getId().equals(bot.getModRole()))) return null; String[] parts = args.split(""\\s+"", 2); if (parts.length < 2) return ""**Usage**: `"" + Command.PREFIX + getAlias() + "" <trigger> <reply>`\n\n**Info**: "" + ""Commands added with this route are case-insensitive!""; String alias = parts[0]; String reply = parts[1]; hook.registerCommand(new Command(alias, reply)); if (bot.getDataBase().isAvailable()) { if (bot.getDataBase().insertInto(""Command(alias, reply, type)"", alias.toLowerCase(), reply, 0)) { return ""Successfully created new Command!""; } } return ""Created command **only** for current session, due to the database being unreachable.""; } "	0	0	0	0	1	0
"@ApiOperation(value = ""Set the user profile image to be default"", response = Iterable.class) @ApiResponses( value = { @ApiResponse(code = 200, message = ""Successfully set the user profile image to be default""), @ApiResponse(code = 201, message = ""Successfully set the user profile image to be default""), @ApiResponse( code = 401, message = ""You are not authorized to get the profile image from AWS S3."" ), @ApiResponse( code = 403, message = ""Accessing the resource you were trying to reach is forbidden"" ), @ApiResponse(code = 404, message = ""The resource you were trying to reach is not found"") } ) @RequestMapping(value = ""/default/set"", method = RequestMethod.POST) public ResponseEntity setDefaultImage(@RequestParam(""id"") Long id) { LOG.info(String.format(""Getting user with id %d..."", id)); URL defaultImage; User user;  try { user = userService.findUser(id); defaultImage = profileImageService.getDefaultImage(); user.getProfileImage().setUri(defaultImage); } catch (AmazonServiceException e) { LOG.error(""Failed to get the default profile image""); LOG.error(e.getMessage()); return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR); }  LOG.info(String.format(""%s %s successfully has its profile image set to default."", user.getFirstName(), user.getSurname())); return new ResponseEntity<>(user, HttpStatus.OK); } "	0	0	0	0	1	0
@SideOnly(Side.CLIENT) public IIcon getIcon(int p_149691_1_, int p_149691_2_) { return p_149691_1_ == 1 ? this.field_150035_a : (p_149691_1_ == 0 ? Blocks.planks.getBlockTextureFromSide(p_149691_1_) : (p_149691_1_ != 2 && p_149691_1_ != 4 ? this.blockIcon : this.field_150034_b)); } 	0	0	0	0	1	0
public synchronized void unsubscribe(int entityId) { Subscriber sub = subscribers.remove(entityId); if (sub != null) { final Subscriber tetrapod = subscribers.get(entityId & PARENT_ID_MASK); if (tetrapod != null) { publisher.sendMessage(new TopicUnsubscribedMessage(publisher.getEntityId(), topicId, entityId), tetrapod.entityId, topicId); } } } 	0	0	0	0	1	0
"public void merge(Configuration config) { if (config == null) { System.out.println(""SettingsLoader::merge config is null""); }  loadFile();  if (config.login().isEmpty() && login != null) { config.setLogin(login); } if (config.password().isEmpty() && password != null) { config.setPassword(password); }  if (config.getComputeMethod() == null && computeMethod != null) { config.setComputeMethod(ComputeType.valueOf(computeMethod)); } if (config.getGPUDevice() == null && gpu != null) { GPUDevice device = GPU.getGPUDevice(gpu); if (device != null) { config.setUseGPU(device); } } if (config.getUserSpecifiedACacheDir() == false && cacheDir != null) { config.setCacheDir(new File(cacheDir)); }  config.setAutoSignIn(Boolean.valueOf(autoSignIn)); } "	0	0	0	0	1	0
protected void handleDeclaredException(Body b, Unit u, ConditionalExceptionContainer ce, SootClass tc) { List<Pair<Value, List<Unit>>> guards = constructGuardExpression(b, ce, true, u); if (!generatedThrowStatements.containsKey(ce.getException())) { List<Unit> exc = createNewException(b, ce.getException(), u); Unit newException = exc.get(0); b.getUnits().addAll(exc); generatedThrowStatements.put(ce.getException(), newException); } Unit throwStmt = generatedThrowStatements.get(ce.getException());  if (guards != null) { for (Pair<Value, List<Unit>> pair : guards) {  List<Unit> toInsert = new LinkedList<Unit>(); toInsert.addAll(pair.getSecond()); toInsert.add(ifStmtFor(pair.getFirst(), throwStmt, u));  b.getUnits().insertBefore(toInsert, u); } } else { // This is only the case for procedures calls that may throw an // exception. // In that case, we have to insert the exception handling after the // statement. List<Unit> toInsert = new LinkedList<Unit>(); // l := $exceptionVariable instanceof t.getException Local l = getFreshLocal(b, IntType.v()); toInsert.add(assignStmtFor(l, Jimple.v().newInstanceOfExpr(exceptionVariable, tc.getType()), u)); toInsert.add(ifStmtFor(jimpleNeZero(l), throwStmt, u)); b.getUnits().insertAfter(toInsert, u); } } 	0	0	0	0	1	0
"@Test public void test1A29() throws IOException, StructureException{ testID(""1A29"",1, 1); } "	0	0	0	0	1	0
"@Test public void test3NTU() throws IOException, StructureException{ testID(""3NTU"",1, 6); } "	0	0	0	0	1	0
"@Override public View getView(int position, View convertView, ViewGroup parent) { LayoutInflater inflater = LayoutInflater.from(mContext); ViewGroup viewGroup = (ViewGroup) inflater.inflate(R.layout.listitem_meeting, null, false);  final Meeting meeting = mMeetings.get(position); if (meeting.getmDate() != null) { Calendar meetingDate = Calendar.getInstance(); meetingDate.setTime(meeting.getmDate());  TextView mDay = (TextView) viewGroup.findViewById(R.id.meeting_day); mDay.setText((String.valueOf(meetingDate.get(Calendar.DAY_OF_MONTH))));  TextView mMonth = (TextView) viewGroup.findViewById(R.id.meeting_month); SimpleDateFormat monthName = new SimpleDateFormat(""MMM""); mMonth.setText(monthName.format(meetingDate.getTime()));  TextView mYear = (TextView) viewGroup.findViewById(R.id.meeting_year); mYear.setText(String.valueOf(meetingDate.get(Calendar.YEAR))); }  TextView mName = (TextView) viewGroup.findViewById(R.id.meeting_name); if (meeting.getmName() != null) { mName.setText(meeting.getmName()); }  TextView mLocation = (TextView) viewGroup.findViewById(R.id.meeting_location); if (meeting.getmLocation() != null) { mLocation.setText(meeting.getmLocation()); }  viewGroup.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { Intent i = new Intent(mContext, ViewMeetingActivity.class); i.putExtra(""user"", mUser); i.putExtra(""meeting"", meeting); mContext.startActivity(i); } });  viewGroup.setBackground(mContext.getResources().getDrawable(R.drawable.style_groupitem));  return viewGroup; } "	0	0	0	0	1	0
"@Test public void testValidConditions() throws Exception { for (String[] spec : validConditions) { String condition = spec[0]; String expected = spec[1]; try { Condition c = Condition.fromValue(condition); assertNotNull(c); if (expected != null) assertEquals(expected, c.toString()); } catch (Condition.ParserException e) { fail(""unexpected condition invalidity: \"""" + condition + ""\"": "" + e.getMessage()); } } } "	0	0	0	0	1	0
public boolean isShop(Location location) { return shopLocation.containsKey(location.getBlock().getLocation()); } 	0	0	0	0	1	0
"@Override public boolean onOptionsItemSelected(MenuItem item) { // Handle action bar item clicks here. The action bar will // automatically handle clicks on the Home/Up button, so long // as you specify a parent activity in AndroidManifest.xml. int id = item.getItemId();  //noinspection SimplifiableIfStatement if (id == android.R.id.home) { Intent upIntent = NavUtils.getParentActivityIntent(this); upIntent.putExtra(""user"", mDriver.flush()); NavUtils.navigateUpTo(this, upIntent); return true; }  return super.onOptionsItemSelected(item); } "	0	0	0	0	1	0
@Override public void run() { doConnect();  //Register receiver to show shoulder tap. registerReceiver(MqttAndroidClient.this); } 	0	0	0	0	1	0
"@Override public void execute() throws ServerResponseException { ServerModel model = ServerFacade.getSingleton().getServerModel(); ServerModelController modelController = new ServerModelController(model);  ResourceList requestedResources = this.getRequestedResourceList();  if (modelController.canPlayYearOfPlentyCard(playerIndex, requestedResources)) { Player player = model.getPlayers()[playerIndex];  /* * If the user can play a year of plenty card, then get the current * number of monuments in his or her hand. From this value, subtract * one and reset the current player's year of plenty count. */ int preYearOfPlenty = player.getOldDevCards().getYearOfPlenty(); int postYearOfPlenty = preYearOfPlenty - 1; player.getOldDevCards().setMonopoly(postYearOfPlenty);  /* * Given the resource types inputed into the command, remove 1 of * each from the bank and transfer those cards to the player's hand. */ model.addResourceFromBank(playerIndex, resource_1, 1); model.addResourceFromBank(playerIndex, resource_2, 1);  /* * Update game history */ String color = model.getPlayers()[playerIndex].getColor(); String name = model.getPlayers()[playerIndex].getName(); model.getLog().addLine(new MessageLine(name + "" played a year of plenty card"",name));  /* * Add this command to the list of commands currently stored inside * the model. */ model.getCommands().add(this); model.incrementVersion();  } else { throw new ServerResponseException(""Unable to play year of plenty card.""); } } "	0	0	0	0	1	0
public void addDevCards(DevCardList newCards){ this.setMonopoly(this.getMonopoly() + newCards.getMonopoly()); this.setMonument(this.getMonument() + newCards.getMonument()); this.setRoadBuilding(this.getRoadBuilding() + newCards.getRoadBuilding()); this.setMonopoly(this.getMonopoly() + newCards.getMonopoly()); this.setYearOfPlenty(this.getYearOfPlenty() + newCards.getYearOfPlenty()); } 	0	0	0	0	1	0
"public static String byteCountToDisplaySize(final long size) { long localSize = size; boolean isNegative = false; if (size < 0) { localSize = -size; isNegative = true; }  String displaySize = FileUtils.byteCountToDisplaySize(localSize); if (isNegative) { displaySize = ""-"" + displaySize; } return displaySize; } "	0	0	0	0	1	0
public static boolean isSpecificInventoryEmpty(IInventory inventory) { for (int i=0; i < inventory.getSizeInventory(); i++) { if (inventory.getStackInSlot(i) != null && inventory.getStackInSlot(i).stackSize > 0 && !hasSoulboundEnchantment(inventory.getStackInSlot(i))) { return false; } }  return true; } 	0	0	0	0	1	0
public void mouseExited(java.awt.event.MouseEvent evt) { submitPassMouseExited(evt); } 	0	0	0	0	1	0
public void focusGained(java.awt.event.FocusEvent evt) { forgotEmailFocusGained(evt); } 	0	0	0	0	1	0
public static Iterator<TextFormat> formatIterator() { return new IteratorWrapper<TextFormat>() {  Iterator<TextFormat> iterator = new ArrayList<>(_characterMap.values()).iterator();  @Override public void remove() { throw new UnsupportedOperationException(); }  @Override protected Iterator<TextFormat> iterator() { return iterator; } }; } 	0	0	0	0	1	0
"@Test @SuppressWarnings(""unchecked"") public void test1() throws Exception { long start = DateUtil.parseDateFromLog(START_TS).getTime(); int batchSize = 50; HdfsBatchProcessor processor = JetstreamApplication.getConfiguration() .getBean(HdfsBatchProcessor.class); for (int i = 0; i < 10; i++) { BatchSource src = new BatchSource(TOPIC, 0, i * batchSize); List<JetstreamEvent> events = fakeEvents(batchSize, start + i * 5000); processor.onNextBatch(src, events); } Thread.sleep(5000); File outDir = new File(""/tmp/pulsar/common_test/out""); File[] subDirs = outDir.listFiles(); assertEquals(1, subDirs.length); assertEquals(""20150101"", subDirs[0].getName()); File[] tsDirs = subDirs[0].listFiles(); assertEquals(4, tsDirs.length); File firstTsDir = new File(outDir, ""20150101/01_01_00""); File successFile = new File(firstTsDir, ""_SUCCESS""); assertEquals(true, successFile.exists()); FileInputStream fis = new FileInputStream(successFile); Map<String, Object> json = JsonUtil.jsonStreamToMap(fis); assertEquals(1, json.get(""fileCount"")); Map<String, Object> files = (Map<String, Object>) json.get(""files""); assertEquals(1, files.size());  File tsDir2 = new File(outDir, ""20150101/01_01_10/type1""); File dataFile = new File(tsDir2, ""topic1-0-150-249""); assertEquals(true, dataFile.exists()); BufferedReader reader = new BufferedReader(new FileReader(dataFile)); Map<String, Object> lineJson = JsonUtil.jsonStringToMap(reader .readLine()); assertEquals(""value1"", lineJson.get(""key1"")); reader.close(); } "	0	0	0	0	1	0
"public static String toJson(Object object) { Objects.requireNonNull(object, ""object can not be null"");  return jsonSerializer.serialize(object).toString(); } "	0	0	0	0	1	0
@AfterClass public static void teardown() { ErrorCalculation.setMode(ErrorCalculationMode.ESS); } 	0	0	0	0	1	0
"public void restore(IMemento memento){ if (memento == null) return;  boolean prev = _dirty; _defaultServer = memento.getChild(""defaultServer"").getString(""value"");  IMemento s = memento.getChild(""servers""); if (s == null) { _servers.addAll(""local"", ""remote""); _currentServer = 0; } else { _currentServer = s.getInteger(""current""); for (IMemento m : s.getChildren(""server"")) { _servers.add(m.getTextData()); } }  _dirty = prev; } "	0	0	0	0	1	0
public void gravityPull(WorldCollection data) { for(WorldObject obj : data.getCollection()){ if(!obj.equals(this) && obj instanceof Moveable) ((Moveable)obj).velocity =((Moveable)obj).velocity.add(this.calcuateGravity(obj)); } } 	0	0	0	0	1	0
"public static String playerSetReciever(String name){ return ChatColor.translateAlternateColorCodes('&',Main.clang.getString(""lang.player_set_reciever"").replaceAll(""%NICK%"", Main.user.getString(""Users."" + name + "".cnick""))); } "	0	0	0	0	1	0
"public static String playerSet(String name){ return ChatColor.translateAlternateColorCodes('&',Main.clang.getString(""lang.player_set"").replaceAll(""%PLAYER%"", name)); } "	0	0	0	0	1	0
"private void disableStickinessOnListener(String loadbalancerName, ListenerDescription listenerDescription) { log.info(""Disable stickiness on loadbalancer "" + loadbalancerName + "" : "" + listenerDescription.getListener().getInstancePort()); List<String> policyNames = new ArrayList<>(listenerDescription.getPolicyNames()); policyNames.remove(DEPLOY_STICKINESS_POLICY + ""-"" + loadbalancerName); awsElbClient.setLoadBalancerPoliciesOfListener(new SetLoadBalancerPoliciesOfListenerRequest().withLoadBalancerName(loadbalancerName).withPolicyNames(policyNames).withLoadBalancerPort(listenerDescription.getListener().getLoadBalancerPort())); } "	0	0	0	0	1	0
"@Override public void onDataChange(DataSnapshot dataSnapshot) { if(lookForUser((Map<String,Object>) dataSnapshot.getValue(), email, password)){ Toast.makeText(LoginActivity.this, ""successful authentication "", Toast.LENGTH_SHORT).show(); new android.os.Handler().postDelayed( new Runnable() { public void run() { onLoginSuccess(); progressDialog.dismiss(); } }, 2000); }else{ //TODO: inform that the log in has failed Toast.makeText(LoginActivity.this, ""fail authentication "", Toast.LENGTH_SHORT).show(); } } "	0	0	0	0	1	0
"@Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception { promise.tryFailure(new IOException(""Exception in channel while performing health check op."", cause)); } "	0	0	0	0	1	0
"public void button2enter() { button2.setStyle(""-fx-background-color: #bf360c;""); } "	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") public void removeProfile(JSONObject obj, String key) { System.out.println(""before removing key: "" + obj); JSONObject finaljson = obj; JSONObject profileslist = (JSONObject) finaljson.get(""profiles""); System.out.println(""profile to remove: "" + key); profileslist.remove(key); finaljson.remove(""profiles""); finaljson.put(""profiles"", profileslist); System.out.println(""after removing key: "" + obj); System.out.println(""writing to file""); try (FileWriter file = new FileWriter(getAppdata() + ""/launcher_profiles.json"")) {  file.write(finaljson.toJSONString()); file.flush();  } catch (Exception e) { StringBuilder sb = new StringBuilder(e.toString()); for (StackTraceElement ste : e.getStackTrace()) { sb.append(""\n\tat ""); sb.append(ste); } String trace = sb.toString(); JOptionPane.showMessageDialog(null, ""An error has occured: "" + trace, ""Error"", JOptionPane.ERROR_MESSAGE); } System.out.println(""finished creating profile""); } "	0	0	0	0	1	0
"public void button1enter() { button1.setStyle(""-fx-background-color: #d84315;""); } "	0	0	0	0	1	0
"public void button1exit() { button1.setStyle(""-fx-background-color: #ff3d00;""); } "	0	0	0	0	1	0
@Override public <T, R> AnyM<option, R> ap(AnyM<option,? extends Function<? super T,? extends R>> fn, AnyM<option, T> apply) { Option<T> f = option(apply); Option<? extends Function<? super T, ? extends R>> fnF = option(fn); Option<R> res = FromCyclopsReact.option(Vavr.maybe(fnF).combine(Vavr.maybe(f), (a, b) -> a.apply(b))); return Vavr.option(res);  } 	0	0	0	0	1	0
"private boolean sendPacket(Packet packet, InetSocketAddress address, SelectionKey selectedKey) {  boolean result = false;  try { lock.lock();  try { selector.selectNow(); } catch (IOException e) { logger.error(""An exception occurred while selecting: {}"", e.getMessage()); }  Set<SelectionKey> selectedKeys = selector.selectedKeys(); Iterator<SelectionKey> keyIterator = selectedKeys.iterator();  while (keyIterator.hasNext()) { SelectionKey key = keyIterator.next();  if (key.isValid() && key.isWritable() && key.equals(selectedKey)) { SelectableChannel channel = key.channel(); try { if (channel instanceof DatagramChannel) { logger.debug( ""{} : Sending packet type '{}' to '{}' for '{}' with sequence '{}' and source '{}'"", new Object[] { macAddress.getHex(), packet.getClass().getSimpleName(), address.toString(), packet.getTarget().getHex(), packet.getSequence(), Long.toString(packet.getSource(), 16) }); int number = ((DatagramChannel) channel).send(packet.bytes(), address); if (packet.getResponseRequired()) { sentPackets.put(packet.getSequence(), packet); } result = true; } else if (channel instanceof SocketChannel) { ((SocketChannel) channel).write(packet.bytes()); } } catch (Exception e) { logger.error(""An exception occurred while writing data : '{}'"", e.getMessage()); } } } } catch (Exception e) { logger.error(""An exception occurred while communicating with the light : '{}'"", e.getMessage()); } finally { lock.unlock(); }  return result; } "	0	0	0	0	1	0
"@EventHandler public void onInvClick(InventoryClickEvent e) { if (e.getClickedInventory() != null && e.getClickedInventory().getName().equals(ChatColor.translateAlternateColorCodes('&', TransportPipes.instance.getConfig().getString(""settingsinv.nameinv"")))) { Player p = (Player) e.getWhoClicked(); e.setCancelled(true); if (e.getAction() == InventoryAction.PICKUP_ALL || e.getAction() == InventoryAction.PICKUP_HALF) { if (e.getRawSlot() == 2) { //decrease int before = SettingsManager.getViewDistance(p); int after = before - 1; if (after >= 1) { p.playSound(p.getLocation(), Sound.UI_BUTTON_CLICK, 1f, 1f); SettingsManager.saveViewDistance(p, after); updateSettingsInventory(e.getClickedInventory(), p); } else { p.playSound(p.getLocation(), Sound.BLOCK_NOTE_BASS, 1f, 1f); } } if (e.getRawSlot() == 6) { //increase int before = SettingsManager.getViewDistance(p); int after = before + 1; if (after <= 64) { p.playSound(p.getLocation(), Sound.UI_BUTTON_CLICK, 1f, 1f); SettingsManager.saveViewDistance(p, after); updateSettingsInventory(e.getClickedInventory(), p); } else { p.playSound(p.getLocation(), Sound.BLOCK_NOTE_BASS, 1f, 1f); } } } } } "	0	0	0	0	1	0
"void incrementalMountComponent() { assertMainThread();  if (!mIncrementalMountEnabled) { throw new IllegalStateException(""Calling incrementalMountComponent() but incremental mount"" + "" is not enabled""); }  if (mLithoView.doesOwnIncrementalMount()) { return; }  // Per ComponentTree visible area. Because LithoViews can be nested and mounted // not in ""depth order"", this variable cannot be static. final Rect currentVisibleArea = ComponentsPools.acquireRect();  if (getVisibleRect(currentVisibleArea)) { mountComponent(currentVisibleArea, true); } // if false: no-op, doesn't have visible area, is not ready or not attached ComponentsPools.release(currentVisibleArea); } "	0	0	0	0	1	0
"public User loginUser(String username, String password) { User result = null;  try ( Connection conn = DriverManager.getConnection(DatabaseManager.dbURL); PreparedStatement stmt = conn.prepareStatement(loginAttempt); ) { stmt.setQueryTimeout(DatabaseManager.timeout); stmt.setString(1, username); stmt.setString(2, password); ResultSet rs = stmt.executeQuery(); if(rs.next()) { result = new User(rs.getString(""username""), rs.getString(""password""), rs.getString(""role""), rs.getString(""about_me"")); System.out.println(""Login successful""); } else { System.out.println(""Login failed: incorrect login details""); } } catch (SQLException e) { System.out.println(""Could not log in user""); e.printStackTrace(); }  return result; } "	0	0	0	0	1	0
private void addReturnType(Set<Class<?>> candidates, Method method) { Class<?> returnValueClass = method.getReturnType(); if (returnValueClass.isPrimitive() || returnValueClass.equals(Livedoc.class)) { return; } buildJSONDocObjectsCandidates(candidates, returnValueClass, method.getGenericReturnType(), reflections); } 	0	0	0	0	1	0
@Override protected void onModelChanging() { //capture the original grade before it changes this.originalGrade = this.getEditor().getValue(); } 	0	0	0	0	1	0
"private PublishDiagnosticsParams checkCompilationUnitForAllProblems(ICompilationUnit unit) { URI uri = Paths.get(unit.getAbsoluteFilename()).toUri(); PublishDiagnosticsParams publish = new PublishDiagnosticsParams(); publish.setDiagnostics(new ArrayList<>()); publish.setUri(uri.toString()); trackFileWithErrors(uri); ArrayList<ICompilerProblem> problems = new ArrayList<>(); try { unit.waitForBuildFinish(problems, ITarget.TargetType.SWF); for (ICompilerProblem problem : problems) { addCompilerProblem(problem, publish); } } catch (Exception e) { System.err.println(""Exception during waitForBuildFinish(): "" + e); e.printStackTrace();  Diagnostic diagnostic = createDiagnosticWithoutRange(); diagnostic.setSeverity(DiagnosticSeverity.Error); diagnostic.setMessage(""A fatal error occurred while checking a file for problems: "" + unit.getAbsoluteFilename()); publish.getDiagnostics().add(diagnostic); } return publish; } "	0	0	0	0	1	0
"public String[] showStage(Stage stage) throws IOException { Parent newScene = FXMLLoader.load(getClass().getResource(""/main/java/ExerciseChooser/ExerciseChooserLayout.fxml"")); Scene toExerciseChooser = new Scene(newScene); Stage catalog_stage = new Stage(); catalog_stage.initModality(Modality.WINDOW_MODAL); catalog_stage.initOwner(stage); catalog_stage.setScene(toExerciseChooser); catalog_stage.setTitle(""TDDT Client - Exercise Chooser""); catalog_stage.getIcons().add(new Image(""file:pictures/icon.png"")); catalog_stage.setResizable(false); catalog_stage.showAndWait(); return values; } "	0	0	0	0	1	0
private static StreetEntity genEntity(Street from, Node orig, Node dest, int lanes, SimulationConfig config) { float mpc = config.metersPerCell; float mv = config.globalMaxVelocity * config.metersPerCell; SimulationConfig.StreetPriorityFunction priority = new SimulationConfig.DefaultStreetPriorityFunction();  Vec2d origDir = new Vec2d( from.coordinates[1].lon - from.coordinates[0].lon, from.coordinates[1].lat - from.coordinates[0].lat );  Vec2d destDir = new Vec2d( from.coordinates[from.coordinates.length - 1].lon - from.coordinates[from.coordinates.length - 1].lon, from.coordinates[from.coordinates.length - 2].lat - from.coordinates[from.coordinates.length - 2].lat );  DirectedEdge forward = new DirectedEdge( from.id, from.length, origDir, destDir, Orientation.FORWARD, orig, dest, new StreetType(StreetType.ROAD), lanes, mv, mpc, priority); DirectedEdge backward = new DirectedEdge( from.id, from.length, destDir.mul(-1), origDir.mul(-1), Orientation.BACKWARD, dest, orig, new StreetType(StreetType.ROAD), lanes, mv, mpc, priority);  StreetEntity entity = new StreetEntity(forward, backward, from); forward.setEntity(entity); backward.setEntity(entity); from.setEntity(entity);  return entity; } 	0	0	0	0	1	0
public List<Integer> getSubListFromList(List<Integer> referenceList, int nbSubListElements) { List<Integer> _sub_list = new ArrayList<>();  if (nbSubListElements >= 0 && nbSubListElements < referenceList.size()) { for (int i = 0; i < nbSubListElements; ++i) { _sub_list.add(getOnceValue()); } }  return _sub_list; } 	0	0	0	0	1	0
"private void setDiscontinueReason(drugorders drugorder, String coded, String nonCoded){ if(!(coded.equalsIgnoreCase(""""))){ drugorder.setDiscontinueReason(ConceptName(coded.trim())); } else if(!(nonCoded.equals(""""))){ // Fix saving multiple lines of text input. String [] instructions = nonCoded.split(""\n""); StringBuilder sb = new StringBuilder(); for(String s : instructions){ sb.append(s.trim()).append(""newline""); } drugorder.setDiscontinuationReasons(sb.toString()); } } "	0	0	0	0	1	0
"private String getEndpointId(KafkaListener kafkaListener) { if (StringUtils.hasText(kafkaListener.id())) { return resolve(kafkaListener.id()); } else { return ""org.springframework.kafka.KafkaListenerEndpointContainer#"" + this.counter.getAndIncrement(); } } "	0	0	0	0	1	0
@Override protected Injector getInjector() { if (injector == null) { injector = Guice.createInjector(new ServletModule() { @Override protected void configureServlets() { bind(GameServices.class); } }); }  return injector; } 	0	0	0	0	1	0
"@Test public void testBadRequest() { EmbeddedChannel ch = new EmbeddedChannel(new HttpRequestDecoder(), new HttpObjectAggregator(1024 * 1024)); ch.writeInbound(Unpooled.copiedBuffer(""GET / HTTP/1.0 with extra\r\n"", CharsetUtil.UTF_8)); Object inbound = ch.readInbound(); assertThat(inbound, is(instanceOf(FullHttpRequest.class))); assertTrue(((FullHttpRequest) inbound).getDecoderResult().isFailure()); assertNull(ch.readInbound()); ch.finish(); } "	0	0	0	0	1	0
"@Test public void testBadResponse() throws Exception { EmbeddedChannel ch = new EmbeddedChannel(new HttpResponseDecoder(), new HttpObjectAggregator(1024 * 1024)); ch.writeInbound(Unpooled.copiedBuffer(""HTTP/1.0 BAD_CODE Bad Server\r\n"", CharsetUtil.UTF_8)); Object inbound = ch.readInbound(); assertThat(inbound, is(instanceOf(FullHttpResponse.class))); assertTrue(((FullHttpResponse) inbound).getDecoderResult().isFailure()); assertNull(ch.readInbound()); ch.finish(); } "	0	0	0	0	1	0
"@Override public void onClick(View view) {  if (view == btnNext) {  Login login = SharePrefManager.getInstance().getLogin();  JsonExport jsonExport = new JsonExport(); jsonExport.setMemHeadCode(login.getMemHeadCode()); jsonExport.setMemHeadId(login.getMemHeadId()); jsonExport.setMemHeadName(login.getMemHeadName()); jsonExport.setMemId(login.getMemId()); jsonExport.setInsuranceId(14); jsonExport.setInsuranceName(edtInsurerName.getText().toString()); jsonExport.setCarRegNo(edtCarRegno.getText().toString()); jsonExport.setProvinceId(Integer.parseInt(spnProvince.getKey()));  if (spnCarBand.getSelectedItemPosition() != 0) { jsonExport.setCarBand(spnCarBand.getValue()); } else { jsonExport.setCarBand(""""); }  jsonExport.setCarModel(edtCarModel.getText().toString()); jsonExport.setClaimNo(edtClaimNo.getText().toString()); jsonExport.setPolicyNo(edtPolicyNo.getText().toString()); jsonExport.setIsRepair(GlobalManager.getInstance().isRepair()); jsonExport.setClaimRefNo(edtNotiNo.getText().toString()); jsonExport.setContactRepairName(""""); jsonExport.setDateFixCarLater(null);  GlobalManager.getInstance().setJsonExport(jsonExport);  boolean isLoadContactInfo = GlobalManager.getInstance().isLoadContactInfo();  if (isLoadContactInfo) {  btnNext.showLoading();  Call<ApiResponse<ContactInfo>> call = ConnectionService.getInstance() .getApiService().getContactInfo(edtClaimNo.getText().toString()); call.enqueue(apiContactInfoCallback);  } else { BusProvider.getInstance().post(new EventRepairPage(RepairPage.CAR_INFORMATION_FRAGMENT)); } }  if (view == btnQRCode) { setRequestCodeCameraPermission(); } } "	0	0	0	0	1	0
"private void addBottomDots(int current_slide) { dots = new TextView[introSlides.length]; int dot_colorActive = getResources().getColor(R.color.selected_dot); int[] dot_colorsInactive = getResources().getIntArray(R.array.array_dot_inactive); indicatingDotsContainer.removeAllViews();  //number of dots added to container equals number of slides for (int i = 0; i < dots.length; i++) { dots[i] = new TextView(this); dots[i].setText(Html.fromHtml(""&#8226;"")); dots[i].setTextSize(35); dots[i].setTextColor(dot_colorsInactive[current_slide]); indicatingDotsContainer.addView(dots[i]); }  //dot corresponding to current slide is given active color i.e white color if (dots.length > 0) { dots[current_slide].setTextColor(dot_colorActive); horizontalLine.setBackgroundColor(dot_colorsInactive[current_slide]); } } "	0	0	0	0	1	0
"@Slow @Override public void allow(@NotNull SimpleFlagHolder holder, @NotNull PermissionFlag flag) throws DataSourceException { try { if(holder instanceof City) { City city = (City) holder; try(Connection transaction = connection.transaction()) { try { try(PreparedStatement pst = transaction.prepareStatement( ""DELETE FROM minecity_city_perm_defaults WHERE city_id=? AND perm=?"" )) { pst.setInt(1, city.getId()); pst.setString(2, flag.name()); pst.executeUpdate(); }  transaction.commit(); return; } catch(Exception e) { transaction.rollback(); throw e; } } } else if(holder instanceof Plot) { int plotId = ((Plot) holder).id; try(Connection transaction = connection.transaction()) { try { try(PreparedStatement pst = transaction.prepareStatement( ""DELETE FROM minecity_plot_perm_defaults WHERE plot_id=? AND perm=?"" )) { pst.setInt(1, plotId); pst.setString(2, flag.name()); pst.executeUpdate(); }  transaction.commit(); return; } catch(Exception e) { transaction.rollback(); throw e; } } } else if(holder instanceof Nature) { int worldId = ((Nature) holder).world.getDataSourceId(); try(Connection transaction = connection.transaction()) { try { try(PreparedStatement pst = transaction.prepareStatement( ""DELETE FROM minecity_world_perm_defaults WHERE world_id=? AND perm=?"" )) { pst.setInt(1, worldId); pst.setString(2, flag.name()); pst.executeUpdate(); }  transaction.commit(); return; } catch(Exception e) { transaction.rollback(); throw e; } } } } catch(SQLException e) { throw new DataSourceException(e); }  throw new DataSourceException(""Unsupported flag holder: ""+holder); } "	0	0	0	0	1	0
"private static NameUsageMatch fromDoc(Document doc) { NameUsageMatch u = new NameUsageMatch(); u.setUsageKey(toInt(doc.get(FIELD_ID)));  u.setScientificName(doc.get(FIELD_SCIENTIFIC_NAME)); u.setCanonicalName(doc.get(FIELD_CANONICAL_NAME));  // higher ranks for (Rank r : HIGHER_RANK_FIELD_MAP.keySet()) { ClassificationUtils.setHigherRank(u, r, doc.get(HIGHER_RANK_FIELD_MAP.get(r)), toInt(doc.get(HIGHER_RANK_ID_FIELD_MAP.get(r)))); }  Integer rankOrdinal = toInt(doc.get(FIELD_RANK)); if (rankOrdinal != null) { u.setRank(Rank.values()[rankOrdinal]); } else { u.setRank(Rank.UNRANKED); }  u.setSynonym(doc.get(FIELD_SYNONYM).equals(""0"") ? false : true);  return u; } "	0	0	0	0	1	0
@After public void tearDown() throws IOException { // Delete test JSON files after every test storage.getSavedTasksFile().delete(); storage.getSavedTasksFile().delete(); } 	0	0	0	0	1	0
public void addListSelectionListener(ListSelectionListener l) { listenerList.add(ListSelectionListener.class, l); } 	0	0	0	0	1	0
"public IRVisitResult visit(VirtualCall virtualCall, IREnvironment env) { TypeEntry exprType; Object expValue; if (virtualCall.expr == null) { exprType = env.getCurrentClassType(); String thisReg=getThisReg(env); expValue=thisReg; } else { IRVisitResult exprResult= virtualCall.expr.accept(this, env); expValue=exprResult.value; exprType =exprResult.type; env.writeCode(""Library __checkNullRef(""+expValue+""),""+IREnvironment.RDUMMY); } int dispatchVectorIndex= exprType.dispatchVectorMap.get(virtualCall.name); MethodSymbolEntry m = env.getMethodInClass(virtualCall.name, false, exprType);  String methodCallArgs = prepareMethodCallArgs(m.getMethodArgsNames(), virtualCall.callArgs.expressions, env);  String registerKey=IREnvironment.RDUMMY; TypeEntry type = m.getEntryTypeID(); if (type != null){ int returnTypeDimensions = type.getTypeDimension(); if(returnTypeDimensions != 0) type = ArrayTypeEntry.makeArrayTypeEntry(type, returnTypeDimensions); registerKey= env.getRegisterKey(); }  String op1= expValue+"".""+dispatchVectorIndex+""(this=""+expValue; if(methodCallArgs.equals("""")) op1+="")""; else op1+="",""+methodCallArgs+"")""; env.writeInstruction(""VirtualCall"",op1, registerKey);   return new IRVisitResult(type,registerKey); } "	0	0	0	0	1	0
@Override public boolean isPersistable() {  if(StringUtils.isBlank(getDocumentNumber())) { return false; }  for (GlobalBusinessObjectDetail unitAdminDetail : getUnitAdministratorDeleteGlobals()) { if (!getPersistenceStructureService().hasPrimaryKeyFieldValues(unitAdminDetail)) { return false; } }  return true; } 	0	0	0	0	1	0
"@Override public void update() { // TODO Auto-generated method stub score += subject.getState(); System.out.println(""Score : ""  + score); } "	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); sharedPref = new SharedPref(this); if (!sharedPref.getLoginStatus() && !sharedPref.getSkipStatus()) { startActivity(new Intent(MainActivity.this, LoginActivity.class)); finish(); } setContentView(R.layout.activity_main);  initCollapsingToolbar(); init();  Log.v(""Checking UserId:"", """" + sharedPref.getUserId());  loadNavHeader(); setUpNavigationView(); //Ends here  //Code to deal with the ViewPager. imageAdapter=new SlidingImageAdapter(MainActivity.this);  if(new Connection(this).isInternet()){ getPagerData(); profileBasicInfo(sharedPref.getUserId()); }  viewPager.setAdapter(imageAdapter); viewPager.setClipToPadding(false); viewPager.setPadding(100,120,100,120); viewPager.setPageMargin(60);  clickListenersMainMenu();  bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() { @Override public boolean onNavigationItemSelected(@NonNull MenuItem item) { switch (item.getItemId()) { case R.id.action_leaderboard: startActivity(new Intent(MainActivity.this,LeaderBoardActivity.class)); return true; case R.id.action_profile: startActivity(new Intent(MainActivity.this,ProfileActivity.class)); return  true; case R.id.action_notifications: startActivity(new Intent(MainActivity.this,NotificationActivity.class)); return true; } return false; } });   } "	0	0	0	0	1	0
public void setCurrentCamera(int camIndex) { if (currentCamera != camIndex) { synchronized (syncOp) { if (videoFilterHandler != null) { videoFilterHandler.removeCallbacksAndMessages(null); } if (orignVideoBuffs != null) { for (RESVideoBuff buff : orignVideoBuffs) { buff.isReadyToFill = true; } lastVideoQueueBuffIndex = 0; } } } currentCamera = camIndex; } 	0	0	0	0	1	0
"@Override public boolean onInterceptTouchEvent(MotionEvent ev) { if (!mCanPickRange) { return super.onInterceptTouchEvent(ev); }  if (ev.getAction() == MotionEvent.ACTION_DOWN) { if (Config.DEBUG) { Log.i(TAG, ""OITE: DOWN""); }  mInitialDownX = ev.getX(); mInitialDownY = ev.getY();  if (mCheckForLongPress == null) { mCheckForLongPress = new CheckForLongPress(); }  postDelayed(mCheckForLongPress, ViewConfiguration.getLongPressTimeout()); } else if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) { if (Config.DEBUG) { Log.i(TAG, ""OITE: (UP || CANCEL)""); }  if (mCheckForLongPress != null) { removeCallbacks(mCheckForLongPress); }  mIsLongPressed = false; mInitialDownX = -1; mInitialDownY = -1; } else if (ev.getAction() == MotionEvent.ACTION_MOVE) { if (Config.DEBUG) { Log.i(TAG, ""OITE: MOVE""); }  if (!isStillALongPress((int) ev.getX(), (int) ev.getY())) { if (Config.DEBUG) { Log.i(TAG, ""OITE: MOVED TOO MUCH, CANCELLING CheckForLongPress Runnable""); }  if (mCheckForLongPress != null) { removeCallbacks(mCheckForLongPress); } } }  return mIsLongPressed || super.onInterceptTouchEvent(ev); } "	0	0	0	0	1	0
"@Override public void handle(ActionEvent event) { try { GenericNodeContainer newNode = null; switch (type) { case DEVICE_CLASS: newNode = new GenericNodeContainer("""", DeviceClass.getDefaultInstance().toBuilder()); break; case DEVICE_CONFIG: newNode = new GenericNodeContainer("""", RSTDefaultInstances.getDefaultDeviceConfig()); break; case LOCATION_CONFIG: newNode = new GenericNodeContainer("""", RSTDefaultInstances.getDefaultLocationConfig()); break; case SCENE_CONFIG: newNode = new GenericNodeContainer("""", RSTDefaultInstances.getDefaultSceneConfig()); break; case AGENT_CONFIG: newNode = new GenericNodeContainer("""", RSTDefaultInstances.getDefaultAgentConfig()); break; case APP_CONFIG: newNode = new GenericNodeContainer("""", RSTDefaultInstances.getDefaultAppConfig()); break; case CONNECTION_CONFIG: newNode = new GenericNodeContainer("""", RSTDefaultInstances.getDefaultConnectionConfig()); break; case USER_CONFIG: newNode = new GenericNodeContainer("""", RSTDefaultInstances.getDefaultUserConfig()); break; case USER_GROUP_CONFIG: newNode = new GenericNodeContainer("""", RSTDefaultInstances.getDefaultUserGroupConfig()); break; case UNIT_GROUP_CONFIG: newNode = new GenericNodeContainer("""", RSTDefaultInstances.getDefaultUnitGroupConfig()); break; default: newNode = new GenericNodeContainer("""", (GeneratedMessage.Builder) type.getDefaultInstanceForType().toBuilder()); }  newNode.setExpanded(true); newNode.setChanged(true); treeTableView.getRoot().getChildren().add(newNode); } catch (org.openbase.jul.exception.InstantiationException ex) { RegistryEditor.printException(ex, logger, LogLevel.ERROR); } } "	0	0	0	0	1	0
public static EnablingState getDefaultEnablingState() { return EnablingState.newBuilder().setValue(EnablingState.State.ENABLED).build(); } 	0	0	0	0	1	0
private void startIntroAnimation() { binding.fab.setTranslationY(4 * 56); int actionbarSize = Utils.dpToPx(56, getResources()); binding.toolbar.setTranslationY(-actionbarSize); binding.toolbar.animate() .translationY(0) .setDuration(ANIM_DURATION_TOOLBAR) .setStartDelay(300) .setListener(new AnimatorListenerAdapter() { @Override public void onAnimationEnd(Animator animation) { startContentAnimation(); } }).start(); } 	0	0	0	0	1	0
public void setRemove(String remove) { _remove = Phase.valueOf(remove.toUpperCase(Locale.ENGLISH)); } 	0	0	0	0	1	0
"public boolean isInvalidCredentials() { return ""invalid_user_password"".equals(code); } "	0	0	0	0	1	0
"private void registerUserAtFirstLogin() throws Exception { UserAgent agent = (UserAgent) getActiveAgent();  if (agent.getEmail() == null) agent.setEmail(""NO.EMAIL@WARNING.COM"");  String profileImage = ""https://api.learning-layers.eu/profile.png"";  //TODO how to check if the user is anonymous? if(agent.getLoginName().equals(""anonymous"")) { agent.setEmail(""anonymous@requirements-bazaar.org""); } else if (agent.getUserData() != null){ JsonObject userDataJson = new JsonParser().parse(agent.getUserData().toString()).getAsJsonObject(); String agentPicture= userDataJson.getAsJsonPrimitive(""picture"").getAsString(); if (agentPicture != null && !agentPicture.isEmpty()) profileImage = agentPicture; }  DALFacade dalFacade = null; try { dalFacade = createConnection(); Integer userIdByLAS2PeerId = dalFacade.getUserIdByLAS2PeerId(agent.getId()); if (userIdByLAS2PeerId == null) { int userId = dalFacade.createUser(User.geBuilder(agent.getEmail()).admin(false).las2peerId(agent.getId()).userName(agent.getLoginName()).profileImage(profileImage).build()); dalFacade.addUserToRole(userId,""LoggedInUser"",null); } } catch (Exception ex) { ExceptionHandler.getInstance().convertAndThrowException(ex, ExceptionLocation.BAZAARSERVICE, ErrorCode.UNKNOWN, ""Error during registering users at first login.""); } finally { closeConnection(dalFacade); }  } "	0	0	0	0	1	0
public int getWidth() { return bottomRight.getX() - topLeft.getX(); } 	0	0	0	0	1	0
"public FilePath[] invoke(File f, VirtualChannel channel) throws IOException { FilePath base = new FilePath(f); ArrayList<FilePath> localDirectoryPaths= new ArrayList<FilePath>(); String[] includes = input.split("",""); DirectoryScanner ds = new DirectoryScanner();  ds.setIncludes(includes); ds.setCaseSensitive(false); ds.setBasedir(f); ds.scan(); String[] dirs = ds.getIncludedDirectories();  for (String dir : dirs) { localDirectoryPaths.add(base.child(dir)); } FilePath[] lfp = {};//trick to have an empty array as a parameter, so the returned array will contain the elements return localDirectoryPaths.toArray(lfp); } "	0	0	0	0	1	0
"public void getArrivalTime(String routeName) { TranslocRouteFactory factory = new TranslocRouteFactory();  int[] times = factory.createRoute(routeName, ""west campus""); if (times == null) { System.out.println(""Times don't exist for this route""); } else { System.out.println(""Printing next two times for "" + routeName); for (int i = 0; i < times.length; i++) { System.out.println("" "" + times[i] + "" minutes""); } } List<String> STOPS = new ArrayList<String>(); Properties prop = new Properties(); InputStream input = null;  //		try { //			input = new FileInputStream(""src/stops.properties""); // //			// load a properties file //			prop.load(input); //			for (Object key : prop.keySet()) { //				String[] keyWords = ((String) key).split(""_""); //				String stopName = """"; //				for (String str : keyWords) { //					stopName += str + "" ""; //				} //				System.out.println(stopName.substring(0, stopName.length() - 1)); //				STOPS.add(stopName.substring(0, stopName.length() - 1)); //			} //		} catch (IOException ex) { //			ex.printStackTrace(); //		} finally { //			if (input != null) { //				try { //					input.close(); //				} catch (IOException e) { //					e.printStackTrace(); //				} //			} //		}  } "	0	0	0	0	1	0
"@Override public void dispatch(String[] args, MessageChannel channel, Message msg) { msg.editMessage(""Bye!"").queue(); System.exit(0); } "	0	0	0	0	1	0
"@Override public void onPageFinished(WebView view, String url) { if (isAdded()) { if (mAnchorId != null) view.loadUrl(""javascript:document.getElementById(\"""" + mAnchorId + ""\"").scrollIntoView()""); view.loadUrl(""javascript:alert(getReadingTime())""); if (!hasMediaOverlay) { view.loadUrl(""javascript:alert(wrappingSentencesWithinPTags())""); } view.loadUrl(String.format(getString(R.string.setmediaoverlaystyle), Highlight.HighlightStyle.classForStyle( Highlight.HighlightStyle.Normal))); if (isCurrentFragment()) { setWebViewPosition(AppUtil.getPreviousBookStateWebViewPosition(getActivity(), mBookTitle)); } else if (mIsPageReloaded) { setWebViewPosition(mLastWebviewScrollpos); mIsPageReloaded = false; } String rangy = HighlightUtil.generateRangyString(getPageName()); if (!rangy.isEmpty()) { view.loadUrl(String.format(""javascript:if(typeof ssReader !== \""undefined\""){ssReader.setHighlights('%s');}"", rangy)); }  scrollToHighlightId();    } } "	0	0	0	0	1	0
"@Test @Parameters( { ""runner"", ""context"" }) @CitrusTest public void injectResourceRunner(@Optional @CitrusResource TestRunner testRunner, @Optional @CitrusResource TestContext context) { final String number = Functions.randomNumber(10L, context); context.setVariable(""message"", ""Injection worked!"");  testRunner.echo(""${message}""); testRunner.createVariable(""random"", number);  testRunner.run(new AbstractTestAction() { @Override public void doExecute(TestContext context) { Assert.assertEquals(context.getVariable(""random""), number); } });  Assert.assertNotNull(citrus); Assert.assertNotNull(jmsEndpoint); } "	0	0	0	0	1	0
"@Test @Parameters( { ""designer"", ""context"" }) @CitrusTest public void injectResourceDesigner(@Optional @CitrusResource TestDesigner testDesigner, @Optional @CitrusResource TestContext context) { final String number = Functions.randomNumber(10L, context); context.setVariable(""message"", ""Injection worked!"");  testDesigner.echo(""${message}""); testDesigner.createVariable(""random"", number);  testDesigner.action(new AbstractTestAction() { @Override public void doExecute(TestContext context) { Assert.assertEquals(context.getVariable(""random""), number); } });  Assert.assertNotNull(citrus); Assert.assertNotNull(jmsEndpoint); } "	0	0	0	0	1	0
public boolean canHaveAsWorld(World world){ return (world != null &&this.getWorld()==null); } 	0	0	0	0	1	0
public boolean canHaveAsWorld(World world){ return (world!=null) || (world==null && this.getShip()!= null);  } 	0	0	0	0	1	0
"public void removeSign(String name) { config.set(""general.signs."" + name, null); } "	0	0	0	0	1	0
"@SuppressWarnings(""StatementWithEmptyBody"") @Override public boolean onNavigationItemSelected(MenuItem item) { // Handle navigation view item clicks here. int id = item.getItemId();  if (id == R.id.nav_home) { loadFragment(new Dashboard()); } else if (id == R.id.nav_my_profile) { loadFragment(new MyProfile()); } else if (id == R.id.nav_history) { loadFragment(new History()); } else if (id == R.id.nav_edit_save) { loadFragment(new Register());  } else if (id == R.id.nav_logout) { AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this); alertDialogBuilder.setTitle(""Confirmation""); alertDialogBuilder.setMessage(""Do you really want to logout?"") .setCancelable(false).setPositiveButton(""Yes"", new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int id) { AppGlobals.clearSettings(); AppGlobals.firstTimeLaunch(true); dialog.dismiss(); startActivity(new Intent(getApplicationContext(), SplashScreen.class)); finish(); } }); alertDialogBuilder.setNegativeButton(""No"", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { dialogInterface.dismiss(); } }); AlertDialog alertDialog = alertDialogBuilder.create(); alertDialog.show();  }  DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout); drawer.closeDrawer(GravityCompat.START); return true; } "	0	0	0	0	1	0
"public List<User_equipment> getAllUniqueModels() { query = entityManager.createQuery(""SELECT DISTINCT manufacturer, model, tac FROM User_equipment""); List<User_equipment> distinctModels = query.getResultList(); System.out.println(distinctModels.size()); return distinctModels; } "	0	0	0	0	1	0
"@GET @Path(""{token}/data/{pin}"") public Response getPinHistoryData(@PathParam(""token"") String token, @PathParam(""pin"") String pinString) { globalStats.mark(HTTP_GET_DATA);  User user = userDao.tokenManager.getUserByToken(token);  if (user == null) { log.error(""Requested token {} not found."", token); return Response.badRequest(""Invalid token.""); }  Integer dashId = user.getDashIdByToken(token);  if (dashId == null) { log.error(""Dash id for token {} not found. User {}"", token, user.name); return Response.badRequest(""Didn't find dash id for token.""); }  PinType pinType; byte pin;  try { pinType = PinType.getPinType(pinString.charAt(0)); pin = Byte.parseByte(pinString.substring(1)); } catch (NumberFormatException | IllegalCommandBodyException e) { log.error(""Wrong pin format. {}"", pinString); return Response.badRequest(""Wrong pin format.""); }  //todo may be optimized java.nio.file.Path path = FileUtils.createCSV(reportingDao, user.name, dashId, pinType, pin); if (path == null) { log.error(""Error getting pin data.""); return Response.badRequest(""Error getting pin data.""); } else { return redirect(path.toString()); } } "	0	0	0	0	1	0
"@Override public void setWindowSize(int sz) { log.error(""Cannot set window size - buffer is determined by driver""); } "	0	0	0	0	1	0
private double getTay() { double hxy = Math.sqrt(averegeWidth); // характерный размер области, м double ktay = 0.3; // коэффициент (< 1) уменьшения шага по времени для устойчивости расчетов return (hxy / V_MAX) * ktay; // Шаг моделирования, мин } 	0	0	0	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); this.setContentView(R.layout.activity_category);  this.changeBackground();  //Init CheckBox checkBox_all           = (CheckBox)    this.findViewById(R.id.checkBox_cat_all); ScrollView scrollView           = (ScrollView)  this.findViewById(R.id.scrollView_cats); Button close                    = (Button)      this.findViewById(R.id.category_close); close.setOnClickListener(this);  LinearLayout linearLayout   = new           LinearLayout(this); this.checkBoxes             = new           ArrayList<>(); DatabaseManager db          = new           DatabaseManager(this); this.availableCategories    = new           ArrayList<>();  //Adding OnClickListener checkBox_all.setOnClickListener(this); this.checked = checkBox_all.isChecked();  //Additional GUI Settings linearLayout.setOrientation(LinearLayout.VERTICAL); scrollView.addView(linearLayout);   //read DISTINCT Categories from DataBase this.availableCategories =  db.getCategories();  int cats = 0;  //Add one Checkbox for each Button (+ GUI Settings) for (int i = 0; i < this.availableCategories.size(); i++) { CheckBox c = new CheckBox(this); c.setId(this.viewsCount); this.viewsCount++; linearLayout.addView(c); c.setText(convertCategoryName(this.availableCategories.get(i))); c.setTextColor(Color.WHITE); c.setOnClickListener(this); this.checkBoxes.add(c);  if (Settings.getCategories().contains(this.availableCategories.get(i))) { c.setChecked(true); cats += 1; } }  //if no category was found, select them all if(cats == 0) { checkBox_all.setChecked(true); }  } 	0	0	0	0	1	0
"private Element createCollectionTag(final Component multipleInputComponent, final String collectionNameAttribute, final Set<String> collectionSourceAttributes) {  final Element collection;  // convert concat function to combine function because concat are concatenated the // values in the order they appear in the input and not in the order of the <data> sources. if (multipleInputComponent.getFunction().getName().equals(METAMORPH_FUNCTION_CONCAT)) {  final Map<String, String> parameters = multipleInputComponent.getParameterMappings();  String valueString = """";  String delimiterString = "", "";  if (parameters.get(""delimiter"") != null) { delimiterString = parameters.get(""delimiter""); }  if (parameters.get(""prefix"") != null) { valueString = parameters.get(""prefix""); }  final Iterator<String> iter = collectionSourceAttributes.iterator();  int i = 0;  while (iter.hasNext()) {  final String sourceAttribute = iter.next();  valueString += ""${"" + sourceAttribute + ""}"";  if ((i++ + 1) < collectionSourceAttributes.size()) { valueString += delimiterString; }  }  if (parameters.get(""postfix"") != null) { valueString += parameters.get(""postfix""); }  Map<String, String> extendedParameterMappings = new HashMap<String, String>();  extendedParameterMappings.put(""value"", valueString);  extendedParameterMappings.put(""reset"", ""true"");  multipleInputComponent.setParameterMappings(extendedParameterMappings); }  final String functionName = multipleInputComponent.getFunction().getName();  if (functionName.equals(METAMORPH_FUNCTION_CONCAT)) collection = doc.createElement(METAMORPH_FUNCTION_COMBINE); else collection = doc.createElement(multipleInputComponent.getFunction().getName());  createParameters(multipleInputComponent.getParameterMappings(), collection);  collection.setAttribute(METAMORPH_DATA_TARGET, ""@"" + collectionNameAttribute);  for (final String sourceAttribute : collectionSourceAttributes) {  final Element collectionData = doc.createElement(METAMORPH_ELEMENT_DATA);  collectionData.setAttribute(METAMORPH_DATA_SOURCE, ""@"" + sourceAttribute);  collectionData.setAttribute(METAMORPH_DATA_TARGET, sourceAttribute);  collection.appendChild(collectionData); }  return collection; } "	0	0	0	0	1	0
public boolean hasParameters() { return actionMode == ActionModel.Mode.PARAMETERS; } 	0	0	0	0	1	0
public static int getScreenDensity() { return UnityAdsProperties.getCurrentActivity().getResources().getDisplayMetrics().densityDpi; } 	0	0	0	0	1	0
@Override public void onStatusChanged(TransferStatus transferStatus) {  // Broadcast transfer status broadcastTransferStatus(transferStatus);  // Update the transfer notification manager mTransferNotificationManager.updateTransfer(transferStatus); } 	0	0	0	0	1	0
"private String getRunningWorklets() { Set<WorkletRunner> runners = _ws.getAllRunners(); if (runners.isEmpty()) { return fail(""No worklet instances currently running""); } XNode root = new XNode(""runningworklets""); for (WorkletRunner runner : runners) { root.addChild(runner.toXNode()); } return root.toString(); } "	0	0	0	0	1	0
"@Override public void taskFailed(TaskExecutor taskExecutor, Throwable exception) { logger.warn(""taskFailed - ""+taskExecutor.getTask(),exception); Kernel.getApplicationContext().getBean(TaskStateManager.class).endTask(taskExecutor.getGuid(),TaskStateManager.TaskState.FAILED); } "	0	0	0	0	1	0
"@Test public void shouldReportErrorRow() throws Exception { //hack to always create new Index during testing try { createKS(keyspace); createTableAndIndexForRow(); ResultSet rs = getResults(""TAG2"", ""magic = '"" + mq(""tags"", ""tags:hello* AND state:CA"") + ""'"", true); List<Row> rows = rs.all(); Assert.assertEquals(true, rows.toString().contains(""error"")); } finally { dropTable(keyspace, ""TAG2""); dropKS(keyspace); } } "	0	0	0	0	1	0
"@Override public Optional<Path> getDataStoreFolderPath() { if (dataStoreFolderPath_ == null && !initComplete_) { synchronized (this) { if (dataStoreFolderPath_ == null && !initComplete_) { String dataStoreRootFolder = System.getProperty(Constants.DATA_STORE_ROOT_LOCATION_PROPERTY); if (!StringUtils.isBlank(dataStoreRootFolder)) { dataStoreFolderPath_ = Paths.get(dataStoreRootFolder); if (!Files.exists(dataStoreFolderPath_)) { try { Files.createDirectories(dataStoreFolderPath_); } catch (IOException e) { throw new RuntimeException(""Failure creating dataStoreRootFolder folder: "" + dataStoreFolderPath_.toString(), e); } }  if (!Files.isDirectory(dataStoreFolderPath_)) { throw new IllegalStateException(""The specified path to the db folder appears to be a file, rather than a folder, as expected.  "" + "" Found: "" + dataStoreFolderPath_.toAbsolutePath().toString()); } }  initComplete_ = true; } } } return Optional.of(dataStoreFolderPath_); } "	0	0	0	0	1	0
"public List<String> getHints(WebSession s) { List<String> hints = new ArrayList<String>(); hints.add(""Type in your name and press 'go'""); hints.add(""Turn on Show Parameters or other features""); hints.add(""Try to intercept the request with OWASP ZAP""); hints.add(""Press the Show Lesson Plan button to view a lesson summary""); hints.add(""Press the Show Solution button to view a lesson solution"");  return hints; } "	0	0	0	0	1	0
@Override public Bundle getAuthToken(AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options) throws NetworkErrorException { Bundle authBundle = new Bundle();  String authToken = AccountManager.get(context).peekAuthToken(account, authTokenType);  if (!TextUtils.isEmpty(authToken)) { authBundle.putString(AccountManager.KEY_ACCOUNT_NAME, account.name); authBundle.putString(AccountManager.KEY_ACCOUNT_TYPE, account.type); authBundle.putString(AccountManager.KEY_AUTHTOKEN, authToken); } else { Intent authIntent = new Intent(context, LoginActivity.class); authIntent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response);  authBundle.putParcelable(AccountManager.KEY_INTENT, authIntent); }  return authBundle; } 	0	0	0	0	1	0
"public String getSickbeardUrl() { SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mContext); String address = preferences.getString(Preferences.ADDRESS, """"); String port = preferences.getString(Preferences.PORT_NUMBER, null); String path = preferences.getString(Preferences.EXTENSION_PATH, ""/""); boolean useHTTPS = preferences.getBoolean(Preferences.USE_HTTPS, false); boolean trustAllCertificates = preferences.getBoolean(Preferences.TRUST_ALL_CERTIFICATES, true);  if (address == null || address.trim().equals("""")) { return null; } else { String url = useHTTPS ? ""https://"" : ""http://""; url += address.trim();  if (port != null) { url += "":"" + port.trim(); }  url += path.trim().equals("""") ? ""/"" : path; url = url.trim();  if (!url.endsWith(""/"")) { url += ""/""; }  return url; } } "	0	0	0	0	1	0
"private Map<String, Integer> releaseJobsCompletedIn(Json state, String host){ Map<String, Integer> states = new HashMap<>(); states.put(CREATED.name(), 0); states.put(RUNNING.name(), 0); states.put(SCHEDULED.name(), 0); states.put(FAILED.name(), 0); states.put(COMPLETED.name(), 0); states.put(STOPPED.name(), 0);  if(state == null){ return states; }  for(Object map:state.asList()){ String status = ((HashMap) map).get(""status"").toString(); states.put(status, states.get(status) + 1);  String job = ((HashMap) map).get(""id"").toString(); if(submitted.contains(job)){ availability.get(host).release(); submitted.remove(job); } }  return states; } "	0	0	0	0	1	0
"private static void printHelp() { System.out.println(""First parameter must be one of help, login, get or put""); } "	0	0	0	0	1	0
"private String createBodyString(final MutableIssue issue) { String baseURL = ComponentManager.getInstance().getApplicationProperties().getString(APKeys.JIRA_BASEURL); String bodyString = ""Work was logged on issue "" + issue.getKey() + "" without remaining time."" + ""\n"" + ""\n"" + ""The issue summary: "" + issue.getSummary() + ""\n"" + ""The issue description: "" + issue.getDescription() + ""\n"" + ""The issue key: "" + issue.getKey() + ""\n"" + ""The issue URL: "" + baseURL + ""/browse/"" + issue.getKey(); return bodyString; } "	0	0	0	0	1	0
private void initFactory(Collection<Address> addresses) { int ix = 0; for (Address address : addresses) { addressMap.put(ix++, address); } this.registry = new TestNodeRegistry(addressMap.values()); } 	0	0	0	0	1	0
"public static void menuJeu() { byte choix = 0; do { clear(); printMenuMessage(2); choix = InOut.getByte(); switch(choix) { case 1 : clear(); pendu.menu(); break; case 2 : clear(); plusMoins.menu(); break; case 3 : clear(); Mastermind.menu(); break; case 4 : clear(); Puissance4.menu(); break; case 5 : menuPrincipal(); break; default : if(language == 1){System.out.println(""Veuillez indiquer 1, 2, 3, 4 ou 5 !"");} else{System.out.println(""Please indicate 1, 2, 3, 4 or 5 !"");} break; } }while(choix != 5); } "	0	0	0	0	1	0
public void updateParticle() { if(worldObj != null && !worldObj.isRemote){ NetworkPacketInfuserBlockEnabled message = new NetworkPacketInfuserBlockEnabled(new Vec3d(this.pos), active); CommonProxy.NETWORKWRAPPER.sendToServer(message); } } 	0	0	0	0	1	0
"private Context findStartContext() { Context startContext = null; for (Context context : getContexts()) { if (hasNextStep(context) && (isNotNull(context.getCurrentElement()) || isNotNull(context.getNextElement()))) { startContext = context; break; } } if (isNull(startContext)) { throw new NoPathFoundException(""No start element defined""); } return startContext; } "	0	0	0	0	1	0
"private Object decode(ByteBufferStream stream, Object[] args, ClientContext context) throws IOException, HproseException { InvokeSettings settings = context.getSettings(); if (settings.isOneway()) { return null; } if (stream.available() == 0) return new HproseException(""EOF""); int tag = stream.buffer.get(stream.buffer.limit() - 1); if (tag != TagEnd) { throw new HproseException(""Wrong Response: \r\n"" + StrUtil.toString(stream)); } HproseResultMode resultMode = settings.getMode(); Type returnType = settings.getReturnType(); if (resultMode == HproseResultMode.RawWithEndTag) { return getRaw(stream, returnType); } else if (resultMode == HproseResultMode.Raw) { stream.buffer.limit(stream.buffer.limit() - 1); return getRaw(stream, returnType); } Object result = null; Reader reader = new Reader(stream.getInputStream(), mode); tag = stream.read(); if (tag == TagResult) { if (resultMode == HproseResultMode.Normal) { result = reader.unserialize(returnType); } else if (resultMode == HproseResultMode.Serialized) { result = getRaw(reader.readRaw(), returnType); } tag = stream.read(); if (tag == TagArgument) { reader.reset(); Object[] arguments = reader.readObjectArray(); int length = args.length; if (length > arguments.length) { length = arguments.length; } System.arraycopy(arguments, 0, args, 0, length); tag = stream.read(); } } else if (tag == TagError) { throw new HproseException(reader.readString()); } if (tag != TagEnd) { stream.rewind(); throw new HproseException(""Wrong Response: \r\n"" + StrUtil.toString(stream)); } return result; } "	0	0	0	0	1	0
"private static String processBody(String templBody) throws Exception { Configurator.setConfiguration(new ftldb.DefaultConfiguration()); Configurator.getConfiguration().setDefaultEncoding(""UTF-8""); StringWriter sw = new StringWriter(); TemplateProcessor.process(new StringReader(templBody), sw); String ret = sw.toString(); System.out.println(ret); return ret; } "	0	0	0	0	1	0
@Override public void run() { getCommandExecutor().execute(AdbInputCommandFactory.getSwipeCommand(dragFromX, dragFromY, p2.x, p2.y)); } 	0	0	0	0	1	0
@Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { Device device = (Device) mAdapter.getDevice(position);  Intent startTransfer = new Intent(ShareActivity.this, TransferService.class); startTransfer.setAction(TransferService.ACTION_START_TRANSFER); startTransfer.putExtra(TransferService.EXTRA_DEVICE, device); startTransfer.putExtra(TransferService.EXTRA_FILENAMES, filenames); startService(startTransfer);  // Close the activity ShareActivity.this.finish(); } 	0	0	0	0	1	0
"private static void load() { useMetrics = getConfig().getBoolean(""plugin.enableMetrics"", true); debugMode = getConfig().getBoolean(""plugin.debugMode"", false); locale = new Locale(getConfig().getString(""plugin.Locale"", ""en"")); logLevel = getConfig().getInt(""plugin.loglevel"", 500);  enableUpdater = getConfig().getBoolean(""plugin.update.enable"", true); autoUpdate = getConfig().getBoolean(""plugin.update.autoUpdate"", true); logUpdate = getConfig().getBoolean(""plugin.update.showUpdateInConsole"", false);  enableKits = getConfig().getBoolean(""game.enableKits"", true); useVoteSystem = getConfig().getBoolean(""game.useVoteSystem"", true); seperatePlayerScores = getConfig().getBoolean(""game.seperatePlayerScores"", false); maxPlayers = getConfig().getInt(""game.maximal_Players""); defaultRounds = getConfig().getInt(""game.default_rounds""); defaultWaves = getConfig().getInt(""game.default_waves"");  startDelay = getConfig().getInt(""times.joinTime""); breakTime = getConfig().getInt(""times.timeBetweenWaves"");  defaultZombieSpawnRate = getConfig().getInt(""zombies.default_spawnRate""); defaultSaveRadius = getConfig().getDouble(""zombies.default_saveRadius"");  zombieFund = getConfig().getDouble(""money.ZombieFund""); deathFee = getConfig().getDouble(""money.DeathFee"");  // this.getConfig().addDefault(""config.misc.portOnJoinGame"", true); // this.getConfig().addDefault(""config.misc.changeToSpectatorAfterDeath"", false); } "	0	0	0	0	1	0
public static List<LatLng> makeHexScanMap(LatLng loc, int steps, int layer_count, List<LatLng> scanMap) { // Base case is do nothing if (steps > 0) { if (layer_count == 1) { // Add in the point, no translation since 1st layer scanMap.add(loc); } else { double distance = 200; // in meters // add a point that is distance due north scanMap.add(translate(loc, 0.0, distance)); // go south-east for (int i = 0; i < layer_count - 1; i++) { LatLng prev = scanMap.get(scanMap.size() - 1); LatLng next = translate(prev, 120.0, distance); scanMap.add(next); } // go due south for (int i = 0; i < layer_count - 1; i++) { LatLng prev = scanMap.get(scanMap.size() - 1); LatLng next = translate(prev, 180.0, distance); scanMap.add(next); } // go south-west for (int i = 0; i < layer_count - 1; i++) { LatLng prev = scanMap.get(scanMap.size() - 1); LatLng next = translate(prev, 240.0, distance); scanMap.add(next); } // go north-west for (int i = 0; i < layer_count - 1; i++) { LatLng prev = scanMap.get(scanMap.size() - 1); LatLng next = translate(prev, 300.0, distance); scanMap.add(next); } // go due north for (int i = 0; i < layer_count - 1; i++) { LatLng prev = scanMap.get(scanMap.size() - 1); LatLng next = translate(prev, 0.0, distance); scanMap.add(next); } // go north-east for (int i = 0; i < layer_count - 2; i++) { LatLng prev = scanMap.get(scanMap.size() - 1); LatLng next = translate(prev, 60.0, distance); scanMap.add(next); } } return makeHexScanMap(scanMap.get(hexagonal_number(layer_count - 1)), steps - 1, layer_count + 1, scanMap); } else { return scanMap; } } 	0	0	0	0	1	0
private String getDeadlineTimeFromNow(int offsetInSeconds) { Calendar deadline = Calendar.getInstance(); deadline.add(Calendar.SECOND, offsetInSeconds);  return DeadlineTimeOutStrategy.TIME_LONG_FORMAT.format(deadline.getTime()); } 	0	0	0	0	1	0
public void write(OutputStream out, boolean includeSignature) throws IOException { Encode.varInt(from.getVersion(), out); Encode.varInt(from.getStream(), out); Encode.int32(from.getPubkey().getBehaviorBitfield(), out); out.write(from.getPubkey().getSigningKey(), 1, 64); out.write(from.getPubkey().getEncryptionKey(), 1, 64); if (from.getVersion() >= 3) { Encode.varInt(from.getPubkey().getNonceTrialsPerByte(), out); Encode.varInt(from.getPubkey().getExtraBytes(), out); } if (type == Type.MSG) { out.write(to.getRipe()); } Encode.varInt(encoding, out); Encode.varInt(message.length, out); out.write(message); if (type == Type.MSG) { if (to.has(Pubkey.Feature.DOES_ACK)) { ByteArrayOutputStream ack = new ByteArrayOutputStream(); ackMessage.write(ack); byte[] data = ack.toByteArray(); Encode.varInt(data.length, out); out.write(data); } else { Encode.varInt(0, out); } } if (includeSignature) { if (signature == null) { Encode.varInt(0, out); } else { Encode.varInt(signature.length, out); out.write(signature); } } } 	0	0	0	0	1	0
"@Override public void run() { Thread.currentThread().setPriority(Thread.MAX_PRIORITY);  //这里也使用IsSubscribe来监听unsubscribe ExecutorService executorService = Executors.newFixedThreadPool(1); Future<Boolean> unsubscribe = executorService.submit(new IsSubscribe(clientInput, id,hasDebugOption));  int hitCount = 0;   try { //set server socket to connect to secure server if(isSecurePort){ System.setProperty(""java.net.ssl.trustStore"", ""clientKeystore/aGreatName""); SSLSocketFactory sslSocketFactory = (SSLSocketFactory)SSLSocketFactory.getDefault(); SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(host, port);  //set socket time out to implement in.avaliable() sslSocket.setSoTimeout(1300);  out = new DataOutputStream(sslSocket.getOutputStream()); in = new DataInputStream(sslSocket.getInputStream());  }else{ //unsecure connection Socket socket = new Socket(host,port); out = new DataOutputStream(socket.getOutputStream()); in = new DataInputStream(socket.getInputStream()); }     out.writeUTF(subscribeRequest.toJSONString()); out.flush();  StopWatch swatch = new StopWatch();   /*给其他服务器发unsubscribe命令后， 取出resultSize， * 否则只是正常的将从其他服务器接收到的资源传送给client*/ while(true){  //监听unsubscribe命令 isUnsubscribe = unsubscribe.get(); if (isUnsubscribe==true) { JSONObject UnsubJSONObject = new JSONObject(); UnsubJSONObject.put(""command"", ""UNSUBSCRIBE""); UnsubJSONObject.put(""id"", id); out.writeUTF(UnsubJSONObject.toJSONString()); }  //input > 0  JSONParser parser = new JSONParser(); //if secure connection,  in.avaliable is not working, try to catch socketTimeout exception to //replace it with the similar function. if(isSecurePort){ try{ JSONObject message = (JSONObject) parser.parse(in.readUTF()); if(!message.containsKey(""resultSize"")){ clientOutput.writeUTF(message.toJSONString()); clientOutput.flush(); }else{ hitCount = Integer.parseInt(message.get(""resultSize"").toString()); relayHitCounter = relayHitCounter+hitCount; break; } }catch(SocketTimeoutException e){ //should NOT be any ""break"" here!, the while(true) loop will continue. }  }else{ if (in.available()>0) {  JSONObject message = (JSONObject) parser.parse(in.readUTF());  if(!message.containsKey(""resultSize"")){ clientOutput.writeUTF(message.toJSONString()); clientOutput.flush(); }else{ hitCount = Integer.parseInt(message.get(""resultSize"").toString()); relayHitCounter = relayHitCounter+hitCount; break; } } }  //input = 0 go back to the while(ture) loop }   Thread.yield();    } catch (Exception e) { e.printStackTrace(); }    } "	0	0	0	0	1	0
public InputStream retrieve(String key, long byteRangeStart) throws IOException { try { if (!doesObjectExist(key)) { return null; } ObjectMetadata objectMetadata = ossClientAgent.getObjectMetadata(bucket, key); long fileSize = objectMetadata.getContentLength(); OSSObject object = ossClientAgent.getObject(bucket, key, byteRangeStart, fileSize-1); return object.getObjectContent(); } catch (ServiceException e) { handleServiceException(key, e); return null; //never returned - keep compiler happy } } 	0	0	0	0	1	0
"public String getScheduled() { if(this.scheduledEntry == null) return """"; else return ""SCHEDULED: <"" + this.scheduledEntry.getDate() + "">""; } "	0	0	0	0	1	0
"@PostMapping(ApplicationUrls.WebAppUrls.BAN_ACCOUNT_URL) public String banUser(@PathVariable long userId) { userService.ban(userId); return TEMPLATES_FOLDER + ""accounts""; } "	0	0	0	0	1	0
void callRepaint() { paintSwitches.clear(); } 	0	0	0	0	1	0
"@Override public boolean onUnbind(Intent intent) { if(getResources().getBoolean(R.bool.channel_surfer_lifecycle_toasts)) { Toast.makeText(SampleTvInputProvider.this, ""onUnbind called"", Toast.LENGTH_SHORT).show(); } return super.onUnbind(intent); } "	0	0	0	0	1	0
"@RequestMapping(path = ""/ws/issues/project-metadata"", method = RequestMethod.GET) public ResponseEntity<BasicProject> getProjectMetadata(@RequestParam(name = ""projectKey"") String projectKey) { Optional<BasicProject> project = projectService.getProject(projectKey); return project.isPresent() ? ResponseEntity.ok(project.get()) : new ResponseEntity<BasicProject>(HttpStatus.NOT_FOUND); } "	0	0	0	0	1	0
@Override public Map<SignatureObject, List<PrivateKeyType>> getRequiredAuthorities( Map<SignatureObject, List<PrivateKeyType>> requiredAuthoritiesBase) { return mergeRequiredAuthorities(requiredAuthoritiesBase, this.getOwner(), PrivateKeyType.ACTIVE); } 	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_view_my_items); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar);  final Button viewOnlyBorrowedItems = (Button) findViewById(R.id.show_only_borrowed_items); Button addButton = (Button) findViewById(R.id.add); pictureButton = (ImageView) findViewById(R.id.pictureButton);  ItemList = (ListView) findViewById(R.id.itemlist);  adapter = new ArrayAdapter<WarItem>(this, R.layout.list_item, warItems); ItemList.setAdapter(adapter); search(false); adapter.notifyDataSetChanged();  /* DatabaseController.GetItems getItemsTask = new DatabaseController.GetItems(); try { getItemsTask.execute(""""); warItems = getItemsTask.get(); }  catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } */   addButton.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { setResult(RESULT_OK); //Go to the AddWarItemActivity to create a new log. startActivity(new Intent(ViewMyItemsActivity.this, AddWarItemActivity.class)); adapter.notifyDataSetChanged(); }  });  viewOnlyBorrowedItems.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { if (viewBorrowed == false){ search(true); viewBorrowed = true; viewOnlyBorrowedItems.setText(""View all items""); adapter.notifyDataSetChanged(); } else { search(false); viewBorrowed = false; viewOnlyBorrowedItems.setText(""View only your borrowed items""); adapter.notifyDataSetChanged(); }  } });  ItemList.setOnItemClickListener(new AdapterView.OnItemClickListener() { //http://stackoverflow.com/questions/17851687/how-to-handle-the-click-event-in-listview-in-android //User wishes to edit a log. @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { editPos = position; if (warItems.get(position).getStatus() == 0) { Intent intent = new Intent(ViewMyItemsActivity.this, ViewWarItemActivity.class); startActivity(intent); Handler myHandler = new Handler(); myHandler.postDelayed(mMyRunnable, 1000); adapter.notifyDataSetChanged(); } else { Toast.makeText(ViewMyItemsActivity.this, ""Cannot edit bid on or borrowed items"", Toast.LENGTH_SHORT).show(); } } }); } "	0	0	0	0	1	0
public void run() { try { PrijavljivanjePreuzetogVozila window = new PrijavljivanjePreuzetogVozila(); window.frmPrij.setVisible(true); } catch (Exception e) { //e.printStackTrace(); logger.info(e); } } 	0	0	0	0	1	0
public void updateNextTry() { if (nextTry == null) { if (sent != null && to.has(Feature.DOES_ACK)) { nextTry = sent + ttl; retries++; } } else { nextTry = nextTry + (1 << retries) * ttl; retries++; } } 	0	0	0	0	1	0
private Operand popImmediate() { return popImmediate(pop()); } 	0	0	0	0	1	0
"public FREObject call(FREContext context, FREObject[] args) { super.call(context, args);  List<String> permissions = getListOfStringFromFREArray((FREArray)args[0]); String type = getStringFromFREObject(args[1]);  AirFacebookExtension.log(""OpenSessionWithPermissionsFunction"");  Intent i = new Intent(context.getActivity().getApplicationContext(), LoginActivity.class); i.putExtra(LoginActivity.extraPrefix+"".permissions"", permissions.toArray(new String[permissions.size()])); i.putExtra(LoginActivity.extraPrefix+"".type"", type); context.getActivity().startActivity(i);  return null; } "	0	0	0	0	1	0
@Override public void mouseWheelMoved(MouseWheelEvent e) { String message; float scaleInc = 0; int notches = e.getWheelRotation(); if (notches < 0) { scaleInc += scaleIncConst;  } else { scaleInc -= scaleIncConst; }   changeDisplayScale(scaleInc); } 	0	0	0	0	1	0
"public void popupCignaCoachContactInfo(View v) {  setProgressBarVisibility(); NetworkSuccessListener<JSONObject> successCallBackListener = new NetworkSuccessListener<JSONObject>() { @Override public void onResponse(JSONObject response) { hideProgress(); handleCignaCoachSuccessResponse(response.toString()); } };  NetworkErrorListener errorListener = new NetworkErrorListener() { @Override public void onErrorResponse(VolleyError error) {  hideProgress(); findViewById(R.id.progressBar).setVisibility(View.GONE);  try { String responseBody = new String(error.networkResponse.data, ""utf-8""); JSONObject errorObj = new JSONObject(responseBody); NetworkResponse errorResponse = error.networkResponse; if(errorResponse.statusCode == MDLiveConfig.HTTP_UNPROCESSABLE_ENTITY){ if (errorObj.has(""message"") || errorObj.has(""error"")) { final String errorMsg = errorObj.has(""message"")?errorObj.getString(""message"") : errorObj.getString(""error""); (MDLiveProviderDetails.this).runOnUiThread(new Runnable() { public void run() {  MdliveUtils.showDialog(MDLiveProviderDetails.this, getApplicationInfo().loadLabel(getPackageManager()).toString(), errorMsg, getString(R.string.mdl_ok_upper), null, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }, null); } }); } } else { MdliveUtils.handelVolleyErrorResponse(MDLiveProviderDetails.this, error, getProgressDialog());  } }catch(Exception e){ hideProgress(); MdliveUtils.connectionTimeoutError(getProgressDialog(), MDLiveProviderDetails.this); e.printStackTrace(); } }};  ProviderDetailServices service = new ProviderDetailServices(MDLiveProviderDetails.this, null);  String appointmentType = ""1""; Calendar c = Calendar.getInstance(); SimpleDateFormat sdf = new SimpleDateFormat(""yyyy/MM/dd""); String appointmentDate = sdf.format(c.getTime());  service.getProviderDetails(appointmentDate, appointmentType, doctorId, successCallBackListener, errorListener); } "	0	0	0	0	1	0
"private void operateUpgradeMenu() { loopAtMenuEnd(4, 6); //cursorX = 28;  if (pressedA) { switch (cursorY){ case 4: player.baseMaxHP += 5; player.setHealth(player.baseMaxHP); player.defineStats(); items.remove(potatoIndex); break; case 5: player.maxMana += 5; items.remove(potatoIndex); break; } jumpToNewMenu(topMenuLayer, TOP, ""tater"", 28); } } "	0	0	0	0	1	0
@Override protected void tick() { EntityPlayer player = world.getClosestPlayer(pos.getX(), pos.getY(), pos.getZ(), 10, false); if(player != null && !player.capabilities.isCreativeMode) activate(player); } 	0	0	0	0	1	0
"public void log(LogLevel level, String message, String extended) { try { if (level.atLeastAsImportant(minimum)) { byte[] msg = message.getBytes(); byte[] ext = extended == null ? new byte[0] : extended.getBytes(); byte[] out = new byte[10 + msg.length + ext.length]; out[0] = RMT_LOGTARGET; out[1] = LogLevel.toByte(level); int lm = msg.length; out[2] = (byte) (lm >> 24); out[3] = (byte) (lm >> 16); out[4] = (byte) (lm >> 8); out[5] = (byte) (lm); int le = ext.length; out[6] = (byte) (le >> 24); out[7] = (byte) (le >> 16); out[8] = (byte) (le >> 8); out[9] = (byte) (le); System.arraycopy(msg, 0, out, 10, msg.length); System.arraycopy(ext, 0, out, 10 + msg.length, ext.length); node.transmit(path, null, out); } } catch (Throwable thr) { if (System.currentTimeMillis() - lastReportedRemoteLoggingError > 500) { Logger.severe(""Error during remote log"", thr); lastReportedRemoteLoggingError = System.currentTimeMillis(); } } } "	0	0	0	0	1	0
private void setRequestCookie(final String cookie) { when(request.getHeader(HttpBasicAccessAuthenticator.SESSION_COOKIE_HEADER)).thenReturn(cookie); } 	0	0	0	0	1	0
@Override public int readData(int track, long playbackPositionUs, MediaFormatHolder formatHolder, SampleHolder sampleHolder, boolean onlyReadDiscontinuity) throws IOException { Assertions.checkState(prepared); downstreamPositionUs = playbackPositionUs;  if (pendingDiscontinuities[track]) { pendingDiscontinuities[track] = false; return DISCONTINUITY_READ; }  if (onlyReadDiscontinuity || isPendingReset() || extractors.isEmpty()) { maybeThrowLoadableException(); return NOTHING_READ; }  TsExtractor extractor = extractors.getFirst(); while (extractors.size() > 1 && !extractor.hasSamples()) { // We're finished reading from the extractor for all tracks, and so can discard it. extractors.removeFirst().release(); extractor = extractors.getFirst(); }  if (extractors.size() > 1) { // If there's more than one extractor, attempt to configure a seamless splice from the // current one to the next one. extractor.configureSpliceTo(extractors.get(1)); }  int extractorIndex = 0; while (extractors.size() > extractorIndex + 1 && !extractor.hasSamples(track)) { // We're finished reading from the extractor for this particular track, so advance to the // next one for the current read. extractor = extractors.get(++extractorIndex); }  if (!extractor.isPrepared()) { maybeThrowLoadableException(); return NOTHING_READ; }  MediaFormat mediaFormat = extractor.getFormat(track); if (mediaFormat != null && !mediaFormat.equals(downstreamMediaFormats[track], true)) { chunkSource.getMaxVideoDimensions(mediaFormat); formatHolder.format = mediaFormat; downstreamMediaFormats[track] = mediaFormat; return FORMAT_READ; }  if (extractor.getSample(track, sampleHolder)) { sampleHolder.decodeOnly = frameAccurateSeeking && sampleHolder.timeUs < lastSeekPositionUs; return SAMPLE_READ; }  if (loadingFinished) { return END_OF_STREAM; }  maybeThrowLoadableException(); return NOTHING_READ; } 	0	0	0	0	1	0
public boolean finish() { if (board == null || no < 0 || resto < 0 || date == null || time < 0) { return false; }  isOP = resto == 0;  if (isOP && (replies < 0 || images < 0)) { return false; }  if (filename != null && ext != null && imageWidth > 0 && imageHeight > 0 && tim >= 0) { hasImage = true; imageUrl = ChanUrls.getImageUrl(board, Long.toString(tim), ext); filename = Parser.unescapeEntities(filename, false);  if (spoiler) { Board b = Chan.getBoardManager().getBoardByCode(board); if (b != null && b.customSpoilers >= 0) { thumbnailUrl = ChanUrls.getCustomSpoilerUrl(board, random.nextInt(b.customSpoilers) + 1); } else { thumbnailUrl = ChanUrls.getSpoilerUrl(); } } else { thumbnailUrl = ChanUrls.getThumbnailUrl(board, Long.toString(tim)); }  image = new PostImage(String.valueOf(tim), thumbnailUrl, imageUrl, filename, ext, imageWidth, imageHeight, spoiler, fileSize); }  if (!TextUtils.isEmpty(country)) { countryUrl = ChanUrls.getCountryFlagUrl(country); }  ChanParser.getInstance().parse(this);  repliesTo = Collections.unmodifiableList(repliesTo);  return true; } 	0	0	0	0	1	0
@Override public void execute(EntityPlayer player) { if(!Minestuck.privateComputers || ((EntityPlayer)player).getCommandSenderName().equals(this.player) && ServerEditHandler.getData(((EntityPlayer)player).getCommandSenderName()) == null) SkaianetHandler.requestConnection(this.player, otherPlayer, isClient); } 	0	0	0	0	1	0
private static Optional<Page> getPageOriginError(final ErrorEvent event) {  final Component errorOrigin = findAbstractComponent(event);  if (errorOrigin != null && errorOrigin.getUI() != null) { return Optional.fromNullable(errorOrigin.getUI().getPage()); }  return Optional.absent(); } 	0	0	0	0	1	0
TypeDescriptor getTypeDescriptor(Token identifierToken) { String identifier = this.getIdentifierFromToken(identifierToken);  try { return this.lexicalScope.getTypeDescriptor(identifier); } catch (LexicalException e) { parser.SemErr(e.getMessage()); return UnknownDescriptor.SINGLETON; } } 	0	0	0	0	1	0
"@Test public void testSetEpochObs_double() { System.out.println(""setEpochObs""); double epochObs = 2000.0; FK4NoEterms instance = new FK4NoEterms(); instance.setEpochObs(epochObs); double expResult = 1950.0; double result = instance.getEpochObs(); assertEquals(expResult, result, 0.0); } "	0	0	0	0	1	0
public void settings(){ size(400, 400, P2D); PJOGL.profile = 1; } 	0	0	0	0	1	0
private Documento obtenerDocumento(String uri) { Documento doc = null; try { doc = aedPort.obtenerDocumento(uri); } catch (AedExcepcion aedExcepcion) { aedExcepcion.printStackTrace(); }  if (doc == null) { doc = new Documento(); } return doc; } 	0	0	0	0	1	0
@Override public ApiResponse<V3VmOpenApiGuidPage> getPage() { currentUpdateStart = OffsetDateTime.now(); return ptvApi.getServiceApi().apiV5ServiceGet(lastUpdate, null); } 	0	0	0	0	1	0
@Override public boolean valid(String value) { if (TextUtils.isEmpty(value) || value.length() > 8 || Double.parseDouble(value) == 0.0) { return false; } try { Double.valueOf(value); return true; } catch (Exception e) { return false; } } 	0	0	0	0	1	0
"public boolean exists(Word word) { boolean b;  //Bsp: SELECT * FROM words WHERE word LIKE ""test"" AND category LIKE ""testCategory""; String query = ""SELECT * FROM "" + TABLE_WORDS + "" WHERE word LIKE \"""" + word.getWord() + ""\"" AND category LIKE \"""" + word.getCategory() + ""\"";""; SQLiteDatabase db = this.getWritableDatabase(); Cursor cursor = db.rawQuery(query, null);  //a word exists if we found something if (cursor != null && cursor.getCount() > 0) { cursor.moveToFirst(); b = true; } else { b = false; }  try { cursor.close(); db.close(); } catch (NullPointerException ex) { Logger.logOnly(""Database error""); }  return b; } "	0	0	0	0	1	0
public static String getWebDavUrlForAccount(Context context, Account account) throws AccountNotFoundException {  return getBaseUrlForAccount(context, account) + WEBDAV_PATH_4_0; } 	0	0	0	0	1	0
"@Test public void test() { ClassLoadingRemoteCodeRunnerClient<String> client = new ClassLoadingRemoteCodeRunnerClient<>(); client.runCode(new ServerCode(), (msg, sender) -> { assertEquals(""hello"", msg); sender.accept(""helloFromClient""); }); } "	0	0	0	0	1	0
"public static Path getPhysicalStorageLocation(Path path) { CryptoFileSystem fs = (CryptoFileSystem) path.getFileSystem(); if (fs instanceof CryptoFileSystem) { return fs.getPathToVault(); } else { throw new IllegalArgumentException(""FileSystem from "" + path  + "" is not a CryptoFileSystem""); } } "	0	0	0	0	1	0
"public static void testClientImports(final String clientCode) { assertTrue(hasImport(""com.spectralogic.ds3client.commands.*"", clientCode)); assertTrue(hasImport(""com.spectralogic.ds3client.commands.spectrads3.*"", clientCode)); assertTrue(hasImport(""com.spectralogic.ds3client.commands.spectrads3.notifications.*"", clientCode)); assertTrue(hasImport(""com.spectralogic.ds3client.models.NodeApiBean"", clientCode)); assertTrue(hasImport(""com.spectralogic.ds3client.networking.ConnectionDetails"", clientCode));  assertTrue(hasImport(""java.io.IOException"", clientCode)); assertTrue(hasImport(""java.security.SignatureException"", clientCode)); } "	0	0	0	0	1	0
public Point2D getCenterWorld() { Point2D position = getEntity().getComponent(PositionComponent.class) .map(PositionComponent::getValue) .orElse(Point2D.ZERO);  return getCenterLocal().add(position); } 	0	0	0	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_sponser); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); getSupportActionBar().setHomeButtonEnabled(true); ViewPager viewPager= (ViewPager) findViewById(R.id.viewpager_sponser); TabLayout tabLayout= (TabLayout) findViewById(R.id.tabs); viewPager.setAdapter(new MyAdapter(getSupportFragmentManager())); tabLayout.setupWithViewPager(viewPager);  } 	0	0	0	0	1	0
"@Test public void headTail() { List<KeyValue<String, String>> toInsert = Arrays.asList( new KeyValue<>(""K1"", ""V1""), new KeyValue<>(""K2"", ""V2""), new KeyValue<>(""K3"", ""V3""), new KeyValue<>(""K4"", ""V4""), new KeyValue<>(""K5"", ""V5"")); final KeyValue<String, String> kv = toInsert.get(0); final int length = entrySize(kv);  MemoryLRUCacheBytes cache = new MemoryLRUCacheBytes( toInsert.size() * length);  for (int i = 0; i < toInsert.size(); i++) { byte[] key = toInsert.get(i).key.getBytes(); byte[] value = toInsert.get(i).value.getBytes(); cache.put(key, new MemoryLRUCacheBytesEntry(key, value, true, 1, 1, 1, """")); MemoryLRUCacheBytesEntry head = cache.head().entry(); MemoryLRUCacheBytesEntry tail = cache.tail().entry(); assertEquals(new String(head.value), toInsert.get(i).value); assertEquals(new String(tail.value), toInsert.get(0).value); } } "	0	0	0	0	1	0
public void render(TileImprovedChest tile,double x,double y, double z, float partialTick, int breakStage) { if (tile==null) { return; }  int facing = 3; ChestTypes type = tile.getType();  if (tile.hasWorldObj() && tile.getWorld().getBlockState(tile.getPos()).getBlock() == ModBlocks.improvedChestBlock) { facing = tile.getFacing().ordinal(); type = tile.getType(); }  if (breakStage>=0) { bindTexture(DESTROY_STAGES[breakStage]); GlStateManager.matrixMode(5890); GlStateManager.pushMatrix(); GlStateManager.scale(4.0F, 4.0F, 1.0F); GlStateManager.translate(0.0625F, 0.0625F, 0.0625F); GlStateManager.matrixMode(5888); } else { bindTexture(type.getModelTexture()); } GlStateManager.pushMatrix();  GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F); GlStateManager.translate((float) x, (float) y + 1.0F, (float) z + 1.0F); GlStateManager.scale(1.0F, -1F, -1F); GlStateManager.translate(0.5F, 0.5F, 0.5F); int k = 0; if (facing == 2) { k = 180; } if (facing == 3) { k = 0; } if (facing == 4) { k = 90; } if (facing == 5) { k = -90; } GlStateManager.rotate(k, 0.0F, 1.0F, 0.0F); GlStateManager.translate(-0.5F, -0.5F, -0.5F); float lidangle = tile.prevLidAngle + (tile.lidAngle - tile.prevLidAngle) * partialTick; lidangle = 1.0F - lidangle; lidangle = 1.0F - lidangle * lidangle * lidangle; model.chestLid.rotateAngleX = -((lidangle * 3.141593F) / 2.0F); // Render the chest itself model.renderAll(); if (breakStage >= 0) { GlStateManager.matrixMode(5890); GlStateManager.popMatrix(); GlStateManager.matrixMode(5888); }  GlStateManager.popMatrix(); GlStateManager.color(1.0f,1.0f,1.0f,1.0f); } 	0	0	0	0	1	0
"public static Uri stateCustomer(long stateId) { return CONTENT_URI.buildUpon().appendQueryParameter(""state_id"", Long.toString(stateId)).build(); } "	0	0	0	0	1	0
"public static Uri taxOfDetailSaleByType(long taxTypeId) { return CONTENT_URI.buildUpon().appendQueryParameter(""tax_type_id"", Long.toString(taxTypeId)).build(); } "	0	0	0	0	1	0
"public static Uri costsByType(long costTypeID) { return CONTENT_URI.buildUpon().appendQueryParameter(""cost_type_id"", Long.toString(costTypeID)).build(); } "	0	0	0	0	1	0
"public static Uri customerSales(long customerId) { return CONTENT_URI.buildUpon().appendQueryParameter(""customer._id"", Long.toString(customerId)).build(); } "	0	0	0	0	1	0
"@Override public DatabaseResults runQuery(ObjectCache objectCache) throws SQLException { if (!type.isOkForQuery()) { throw new IllegalArgumentException(""Cannot call query on a "" + type + "" statement""); } return new JdbcDatabaseResults(preparedStatement, preparedStatement.executeQuery(), objectCache); } "	0	0	0	0	1	0
public boolean isMaster() { return offset[0] == 0 && offset[1] == 0 && offset[2] == 0; } 	0	0	0	0	1	0
public List<PotionEffect> getPotionEffects(ItemStack stack) { return effects.stream().map(PotionEffectShim::toVanilla).collect(Collectors.toList()); } 	0	0	0	0	1	0
"@Override protected void updateStatus() { super.updateStatus(); if (getDoAbsoluteTimes()) { setPropertiesState(getASelectedTime()); } else { setPropertiesState(lastAD); }  if (readTimesTask != null) { if (taskOk(readTimesTask)) { setStatus(""Reading available times from server""); } } else if (getDoAbsoluteTimes() && !haveTimeSelected()) { setStatus(MSG_TIMES); } enableWidgets(); } "	0	0	0	0	1	0
"@Override public String toString() { return String.format(""%s[status=%s, leader=%s, members=%s]"", getClass().getSimpleName(), status, leader, members); } "	0	0	0	0	1	0
"protected void failAttempt(MemberState member, Throwable error) { // Reset the connection to the given member to ensure failed connections are reconstructed upon retries. context.getConnections().resetConnection(member.getMember().serverAddress());  // If any append error occurred, increment the failure count for the member. Log the first three failures, // and thereafter log 1% of the failures. This keeps the log from filling up with annoying error messages // when attempting to send entries to down followers. int failures = member.incrementFailureCount(); if (failures <= 3 || failures % 100 == 0) { LOGGER.warn(""{} - {}"", context.getCluster().member().address(), error.getMessage()); } } "	0	0	0	0	1	0
"@Override public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) { MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions); if (ignoredMethods.contains(name + desc)) { return mv; } if ((access & Opcodes.ACC_STATIC) != 0) { mv = new GenerateCallCoberturaInitMethodVisitor(mv, classMap .getClassName()); if (""<clinit>"".equals(name)) { wasStaticInitMethodVisited = true; } } FindTouchPointsMethodAdapter instrumenter = new FindTouchPointsMethodAdapter( mv, classMap.getClassName(), name, desc, eventIdGenerator, duplicatedLinesMap, lineIdGenerator); instrumenter.setTouchPointListener(touchPointListener); instrumenter.setIgnoreRegexp(getIgnoreRegexp()); LocalVariablesSorter sorter = new LocalVariablesSorter(access, desc, instrumenter); int variable = sorter.newLocal(Type.INT_TYPE); touchPointListener.setLastJumpIdVariableIndex(variable); return sorter; //return new ShiftVariableMethodAdapter(instrumenter, access, desc, 1); } "	0	0	0	0	1	0
"@Override public void stop() { System.out.println(""GuiAWT::stop()""); } "	0	0	0	0	1	0
"private void deployAPIFaultSequence(API api, String tenantDomain, Environment environment) throws APIManagementException {  String faultSequenceName = api.getFaultSequence();  //If a fault sequence has be defined. if (isSequenceDefined(faultSequenceName)) { try { PrivilegedCarbonContext.startTenantFlow(); if (tenantDomain != null && !tenantDomain.equals("""")) { PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); } else { PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain (MultitenantConstants.SUPER_TENANT_DOMAIN_NAME, true); } int tenantId = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantId();  APIGatewayAdminClient client = new APIGatewayAdminClient(api.getId(), environment);  //If the sequence already exists if (client.isExistingSequence(faultSequenceName, tenantDomain)) { //Delete the sequence. We need to redeploy afterwards since the sequence may have been updated. client.deleteSequence(faultSequenceName, tenantDomain); } //Get the fault sequence xml OMElement faultSequence = APIUtil.getCustomSequence(faultSequenceName, tenantId, ""fault"");  if (faultSequence != null) { //Deploy the fault sequence client.addSequence(faultSequence, tenantDomain); }  } catch (Exception e) { String msg = ""Error in updating the fault sequence at the Gateway""; log.error(msg, e); throw new APIManagementException(msg, e); } finally { PrivilegedCarbonContext.endTenantFlow(); } } } "	0	0	0	0	1	0
@Override public EntityType save(EntityType entity) { Integer id = entity.getId(); if (id == null) { entity.setId(RandomUtils.randInt(100000, 1000000)); id = entity.getId(); } getOptionalById(id).ifPresent(data::remove); data.add(entity); return entity; } 	0	0	0	0	1	0
"private String createNotes(SBase sbase){ String html = """"; if (sbase.isSetNotes()){ try { String notes = sbase.getNotesString(); if (!notes.equals("""") && notes != null) { html = String.format(""<h2>Notes</h2><p>%s</p>"", notes); } } catch (XMLStreamException e){ logger.error(""Error parsing notes xml""); e.printStackTrace(); } } return html; } "	0	0	0	0	1	0
"public void startCopyTrans(HProjectIteration iteration, HCopyTransOptions options) { // double check if (isCopyTransRunning(iteration)) { throw new RuntimeException( ""Copy Trans is already running for version \'"" + iteration.getSlug() + ""\'""); } CopyTransProcessKey key = CopyTransProcessKey.getKey(iteration); CopyTransTaskHandle handle = new CopyTransTaskHandle(); asyncTaskHandleManager.registerTaskHandle(handle, key); copyTransServiceImpl.startCopyTransForIteration(iteration, options, handle); } "	0	0	0	0	1	0
public void clearTransMemory(final String transMemorySlug) { lastTaskTMKey = new ClearTransMemoryProcessKey(transMemorySlug); AsyncTaskHandle handle = new AsyncTaskHandle(); asyncTaskHandleManager.registerTaskHandle(handle, lastTaskTMKey); translationMemoryResource .deleteTranslationUnitsUnguardedAsync(transMemorySlug, handle); transMemoryList = null; // Force refresh next time list is requested } 	0	0	0	0	1	0
"@Test public void testHbase() { String libsStr = ""hbase-common-1.2.0-cdh5.7.0.jar;hbase-client-1.2.0-cdh5.7.0.jar;hbase-protocol-1.2.0-cdh5.7.0.jar;hadoop-common-2.6.0-cdh5.7.0.jar;hadoop-auth-2.6.0-cdh5.7.0.jar;commons-logging-1.2.jar;commons-codec-1.9.jar;commons-configuration-1.6.jar;commons-lang-2.6.jar;commons-collections-3.2.2.jar;zookeeper-3.4.5-cdh5.7.0.jar;htrace-core-3.2.0-incubating.jar;htrace-core4-4.0.1-incubating.jar;guava-12.0.1.jar;jackson-mapper-asl-1.8.8.jar;jackson-core-asl-1.8.8.jar;netty-3.6.6.Final.jar;protobuf-java-2.5.0.jar;log4j-1.2.17.jar;slf4j-api-1.7.5.jar;slf4j-log4j12-1.7.5.jar;hbase-server-1.2.0-cdh5.7.0.jar;netty-all-4.0.23.Final.jar;metrics-core-2.2.0.jar""; //$NON-NLS-1$ doTestClassLoader(EHadoopCategory.HBASE.getName(), libsStr); } "	0	0	0	0	1	0
"public Single<String> insertNewItemToRepository(String newItemKey, @NonNull ClipDomain domain) { return Single.create(e -> { if (!NetworkUtils.isInternetOn(MainApplication.getAppContext())) { e.onError(new NetworkConException( MainApplication.getRes().getString(R.string.err_network_connection_failed))); return; } final FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser(); if (user == null) { e.onError(new InvalidFirebaseUser(""Current FireBase User is invalid."")); return; }  FirebaseDatabase db = FirebaseDatabase.getInstance(); DatabaseReference ref = db.getReference(RepoTableContracts.TABLE_SUMMARY_POSTS).child(user.getUid()).child(newItemKey);  try { Map<String, Object> dataSet = new HashMap<>(4); dataSet.put(RepoTableContracts.COL_CREATED_AT, domain.getCreatedAt()); dataSet.put(RepoTableContracts.COL_DATA, domain.getTextData()); dataSet.put(RepoTableContracts.COL_SOURCE, domain.getSource()); dataSet.put(RepoTableContracts.COL_FAVORITE_ITEM, domain.isFavouritesItem());  ref.setValue(dataSet).addOnCompleteListener(task -> e.onSuccess(newItemKey)); } catch (Exception ex) { e.onError(ex); CrashReporter.getInstance().report(ex); } }); } "	0	0	0	0	1	0
@Override public void onDataChange(DataSnapshot dataSnapshot) { if (!isViewAttached()) { return; } try { final ClipDomain domain = dataSnapshot.getValue(ClipDomain.class); domain.setKey(dataSnapshot.getKey()); getView().renderClipDomain(domain); } catch (Exception e) { e.printStackTrace(); CrashReporter.getInstance().report(e); } } 	0	0	0	0	1	0
"@Override protected void postInit() { final Label label = new Label(""Team Number""); final SpinnerValueFactory.IntegerSpinnerValueFactory spinnerValueFactory = new SpinnerValueFactory.IntegerSpinnerValueFactory(0, Integer.MAX_VALUE, teamNumber); this.teamNumberSpinner = new Spinner(spinnerValueFactory); Spinners.makeEditableSafely(teamNumberSpinner, Integer::valueOf); label.setLabelFor(teamNumberSpinner);  getOptionsGrid().addRow(0, label, this.teamNumberSpinner); } "	0	0	0	0	1	0
"public void testIfInstantiateWithValidIdMax() {  try { user = new User(Integer.MAX_VALUE, ""maria"", ""11/11/2015"", ""maria@euvou.com"");  assertEquals(Integer.MAX_VALUE, user.getIdUser()); } catch (UserException e) { fail(); } catch (ParseException e) { e.printStackTrace(); }  } "	0	0	0	0	1	0
"public void testIfInstantiateWithValidId2() {  try { user = new User(2, ""maria"", ""11/11/2015"", ""maria@euvou.com"");  assertEquals(2, user.getIdUser()); } catch (UserException e) { fail(); } catch (ParseException e) { e.printStackTrace(); }  } "	0	0	0	0	1	0
"public void testIfInstantiateWithValidId1() {  try { user = new User(1, ""maria"", ""11/11/2015"", ""maria@euvou.com"");  assertEquals(1, user.getIdUser()); } catch (UserException e) { fail(); } catch (ParseException e) { e.printStackTrace(); }  } "	0	0	0	0	1	0
"public void testNameHasSimpleQuote() { boolean ok= true; try { user = new User(3, ""\'"", ""11/11/2015"", ""maria@euvou.com"");  ok=true; } catch (UserException e) { ok=false; } catch (ParseException e) { e.printStackTrace(); } assertFalse(ok); } "	0	0	0	0	1	0
"public void testIfInstantiateWithInvalidIdMin() { boolean ok = false;  try { user = new User(Integer.MIN_VALUE, ""maria"", ""11/11/2015"", ""maria@euvou.com""); ok = false; } catch (UserException e) { ok = true; } catch (ParseException e) { e.printStackTrace(); }  assertTrue(ok); } "	0	0	0	0	1	0
"@Before public void setupApiLibrary() throws Exception { RestApiLibrary ral = new RestApiLibrary(""localhost"", null, ""api""); String json = ""{\""crew\"": [{\""agency-id\"": \""MTA NYCT\"",\""pass-id\"": \""123456\"",\""run-route\"": \""63\"",\""run-number\"": \""200\"",\""service-date\"": \""2011-11-02\"",\""updated\"": \""2011-11-02T10:11:10-05:00\""}],\""status\"": \""OK\""}"";  when(mockApiLibrary.getItemsForRequest(""crew"", ""2011-10-14"", ""list"")) .thenReturn(ral.getJsonObjectsForString(json));  service.refreshData(); } "	0	0	0	0	1	0
"public RootNode prepareExecutionConfig(final SubstepsExecutionConfig cfg) {  RootNode rn = new RootNode(""dummy"", Collections.<FeatureNode>emptyList());  try { final ObjectName objectName = new ObjectName(SubstepsServerMBean.SUBSTEPS_JMX_MBEAN_NAME); Object  rootNode = mbsc.invoke(objectName, ""prepareExecutionConfig"", new Object[]{cfg}, // object[] params new String[]{SubstepsExecutionConfig.class.getName()});  // sig   System.out.println(""rootNode object.toString() "" + rootNode.toString());  return (RootNode)rootNode;//this.mbean.prepareExecutionConfig(cfg);   } catch (MalformedObjectNameException e) {  e.printStackTrace(); } catch (ReflectionException e) { e.printStackTrace(); } catch (MBeanException e) { e.printStackTrace(); } catch (InstanceNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); }   return null;//        this.mbean.prepareExecutionConfig(cfg);  } "	0	0	0	0	1	0
"@Override public void unsubscribe(final Class<? extends T> token) { LOG.log(Level.FINER, ""Unsubscribe: {0} class {1}"", new Object[] {name, token.getName()}); msgTypeToHandlerMap.remove(token); } "	0	0	0	0	1	0
"@Override public void addValidation(MethodVisitor mv, Class<?> type) { if (type.equals(boolean.class)) { mv.visitTypeInsn(INSTANCEOF, ""org/luaj/vm2/LuaBoolean""); } else if ( type.equals(byte.class) || type.equals(int.class) || type.equals(char.class) || type.equals(short.class) || type.equals(float.class) || type.equals(double.class) || type.equals(long.class) ) { mv.visitTypeInsn(INSTANCEOF, ""org/luaj/vm2/LuaNumber""); } else if (type.equals(String.class)) { mv.visitTypeInsn(INSTANCEOF, ""org/luaj/vm2/Sting""); } else if (LuaValue.class.isAssignableFrom(type)) { mv.visitTypeInsn(INSTANCEOF, Type.getInternalName(type)); } else { throw new APIBuilder.BuilderException(""Cannot validate "" + type.getName()); } } "	0	0	0	0	1	0
"private Writable createPrimitive(Object obj, PrimitiveObjectInspector inspector) throws SerDeException { if (obj == null) { return null; } switch (inspector.getPrimitiveCategory()) { case VOID: return null; case DOUBLE: return new DoubleWritable(((DoubleObjectInspector)inspector).get(obj)); case INT: return new IntWritable(((IntObjectInspector)inspector).get(obj)); case LONG: return new LongWritable(((LongObjectInspector)inspector).get(obj)); case SHORT: return new ShortWritable(Short.parseShort(obj.toString())); case STRING: return ((StringObjectInspector)inspector).getPrimitiveWritableObject(obj); case DECIMAL: return ((HiveDecimalObjectInspector)inspector).getPrimitiveWritableObject(obj); } throw new SerDeException(""Unknown primitive : "" + inspector.getPrimitiveCategory()); } "	0	0	0	0	1	0
"@GET @Path(""/{entity}"") public String getEntityVersions(@Context SecurityContext sc, @PathParam(PARAM_ENTITY) String entity) { Error.reset();  checkPermission(sc, MetadataRoles.FIND_ENTITY_VERSIONS); return new GetEntityVersionsCommand(null, entity).execute(); } "	0	0	0	0	1	0
"@PUT @Path(""/{entity}/{version}"") @Consumes(MediaType.APPLICATION_JSON) public String createMetadata(@Context SecurityContext sc, @PathParam(PARAM_ENTITY) String entity, @PathParam(PARAM_VERSION) String version, String data) { Error.reset();  checkPermission(sc, MetadataRoles.INSERT); return new CreateEntityMetadataCommand(null, entity, version, data).execute(); } "	0	0	0	0	1	0
"@Test public void testLightblueException_Error() throws Exception { try { DefaultLightblueDataResponse response = new DefaultLightblueDataResponse( ""{ "" + ""    \""errors\"": [ "" + ""        { "" + ""            \""context\"": \""rest/SaveCommand/attributeCodeSet/save(attributeCodeSet:1.0.0-SNAPSHOT)/validateDocs/validateDoc/ownerCode/required\"", "" + ""            \""errorCode\"": \""crud:Required\"", "" + ""            \""msg\"": \""ownerCode\"", "" + ""            \""objectType\"": \""error\"" "" + ""        } "" + ""    ], "" + ""    \""matchCount\"": 0, "" + ""    \""modifiedCount\"": 0, "" + ""    \""status\"": \""ERROR\"" "" + ""}"" ); fail(); } catch (LightblueResponseException e) { assertNotNull(e.getLightblueResponse()); assertNull(e.getLightblueResponse().getDataErrors()); assertNotNull(e.getLightblueResponse().getErrors()); assertFalse(e.exists(LightblueResponseErrorCodes.ERR_MONGO_CRUD_NO_ACCESS)); assertTrue(e.exists(LightblueResponseErrorCodes.ERR_CRUD_REQUIRED)); } } "	0	0	0	0	1	0
"public boolean canWork() { try { Class.forName(""org.apache.log4j.Logger"", false, Thread.currentThread().getContextClassLoader()); return true; } catch (Throwable e) {} return false; } "	0	0	0	0	1	0
