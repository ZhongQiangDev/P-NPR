text	recoder	tare	rewardrepair	selfapr	gamma	allfailure
"@Override protected Control Func1(Composite var1) { GridData var2; Composite var3 = new Composite(var1, SWT.NONE); Composite var4 = new Composite(var3, SWT.NONE); var2 = new GridData(GridData.FILL_HORIZONTAL); var2.grabExcessHorizontalSpace = true; var4.setLayoutData(var2); GridLayout var5 = new GridLayout(); var5.marginWidth = 0; var5.marginRight = 5; var5.numColumns = 2; var4.setLayout(var5); Label var6 = new Label(var4, SWT.NONE); var6.setText(""Word navigation""); var2 = new GridData(); var2.grabExcessHorizontalSpace = false; var6.setLayoutData(var2); comboNavigation = new Combo(var4, SWT.CHECK); comboNavigation.add(WORD_NAVIGATION_SUBWORD_CAPTION); comboNavigation.add(WORD_NAVIGATION_NATIVE_CAPTION); comboNavigation.addSelectionListener(new SelectionAdapter() { @Override public void Func2(SelectionEvent var7) { String var8 = comboNavigation.getText(); String var9 = SubWordPreferences.WORD_NAVIGATION_STYLE_SUBWORD; if (WORD_NAVIGATION_NATIVE_CAPTION.equals(var8)) { var9 = SubWordPreferences.WORD_NAVIGATION_STYLE_SUBWORD; } fOverlayStore.setValue(SubWordPreferences.WORD_NAVIGATION_STYLE, var9); } }); var2 = new GridData(GridData.FILL_HORIZONTAL); var2.grabExcessHorizontalSpace = true; comboNavigation.setLayoutData(var2); createColorOptions(var3); Composite var10 = new Composite(var3, SWT.NONE); var2 = new GridData(GridData.FILL_HORIZONTAL); var2.grabExcessHorizontalSpace = true; var10.setLayoutData(var2); GridLayout var11 = new GridLayout(); var11.marginWidth = 0; var11.marginRight = 5; var10.setLayout(var11); formatAndStyleRangeHelper = new StyledTextForShowingCodeFactory(); labelExample = formatAndStyleRangeHelper.createStyledTextForCodePresentation(var10); var2 = new GridData(GridData.FILL_HORIZONTAL); var2.grabExcessHorizontalSpace = true; labelExample.setLayoutData(var2); updateLabelExample(PyFormatStd.getFormat(null), PydevPrefs.getChainedPrefStore()); LinkFieldEditor var12 = new LinkFieldEditor(""UNUSED"", ""Other settings:\n\n<a>Tabs</a>: tab preferences for PyDev ...\n(note: 'Insert spaces for tabs' in the general settings is ignored)."", var3, new SelectionListener() { @Override public void Func2(SelectionEvent var7) { String var13 = ""org.python.pydev.editor.preferences.PyTabPreferencesPage""; IWorkbenchPreferenceContainer var14 = ((IWorkbenchPreferenceContainer) getContainer()); var14.openPage(var13, null); } @Override public void Func3(SelectionEvent var7) { } }); var12.getLinkControl(var3); LinkFieldEditor var15 = new LinkFieldEditor(""UNUSED"", ""<a>Text Editors</a>: print margin, line numbers ..."", var3, new SelectionListener() { @Override public void Func2(SelectionEvent var7) { String var13 = ""org.eclipse.ui.preferencePages.GeneralTextEditor""; IWorkbenchPreferenceContainer var14 = ((IWorkbenchPreferenceContainer) getContainer()); var14.openPage(var13, null); } @Override public void Func3(SelectionEvent var7) { } }); var15.getLinkControl(var3); var15 = new LinkFieldEditor(""UNUSED"", ""<a>Colors and Fonts</a>: var8 font, content assist color ..."", var3, new SelectionListener() { @Override public void Func2(SelectionEvent var7) { String var13 = ""org.eclipse.ui.preferencePages.ColorsAndFonts""; IWorkbenchPreferenceContainer var14 = ((IWorkbenchPreferenceContainer) getContainer()); var14.openPage(var13, null); } @Override public void Func3(SelectionEvent var7) { } }); var15.getLinkControl(var3); var15 = new LinkFieldEditor(""UNUSED"", ""<a>Annotations</a>: occurrences, markers ..."", var3, new SelectionListener() { @Override public void Func2(SelectionEvent var7) { String var13 = ""org.eclipse.ui.editors.preferencePages.Annotations""; IWorkbenchPreferenceContainer var14 = ((IWorkbenchPreferenceContainer) getContainer()); var14.openPage(var13, null); } @Override public void Func3(SelectionEvent var7) { } }); var15.getLinkControl(var3); return var3; } "	0	0	0	0	0	1
public IReadOnlyList<RangeMapping<TKey>> Func1(RangeMapping<TKey> var1, TKey var2) { return this.Func1(var1, var2, MappingLockToken.NoLock); } 	0	0	0	1	0	0
@Override public int Func1(Model var1, E var2) { ShareableResource var3 = ShareableResource.get(var1, rc); if (var3 == null) { return -1; } int var4; if (var2 instanceof VM) { var4 = var3.getConsumption((VM) var2); } else if (var2 instanceof Node) { var4 = var3.getCapacity((Node) var2); } else { return -1; } return (int) (coefficient * var4 + offset); } 	0	0	0	0	0	1
"@Override public TupleSet Func1(String var1, String var2, String var3, String var4) throws Exception { TupleSetSql var5 = new TupleSetSql(); List<Tuple> var6 = new ArrayList<>(); final String var7 = convertPattern(var2); final String var8 = convertPattern(var3); final String var9 = convertPattern(var4); for (MetaDataSource var10 : metaContext.getDataSources()) { String var11 = var10.getName(); if (var1 != null && !var1.equals(var11)) continue; for (MetaSchema var12 : var10.getSchemas()) { String var13 = var12.getName(); if (!var13.matches(var7)) continue; for (MetaTable var14 : var12.getTables()) { String var15 = var14.getName(); if (!var15.matches(var8)) continue; for (MetaColumn var16 : var14.getColumns()) { String var17 = var16.getName(); if (!var15.matches(var9)) continue; Tuple var18 = new Tuple(25); var18.setDatum(0, var11); var18.setDatum(1, var13); var18.setDatum(2, var15); var18.setDatum(3, var17); var18.setDatum(4, String.valueOf(var16.getType())); var18.setDatum(5, TypeInfo.postresTypeOfJdbcType(var16.getType()).typeName()); var18.setDatum(6, ""NULL""); var18.setDatum(7, ""NULL""); var18.setDatum(8, ""NULL""); var18.setDatum(9, ""NULL""); var18.setDatum(10, ""NULL""); var18.setDatum(11, var16.getComment()); var18.setDatum(12, ""NULL""); var18.setDatum(13, ""NULL""); var18.setDatum(14, ""NULL""); var18.setDatum(15, ""NULL""); var18.setDatum(16, ""NULL""); var18.setDatum(17, ""NULL""); var18.setDatum(18, ""NULL""); var18.setDatum(19, ""NULL""); var18.setDatum(20, ""NULL""); var18.setDatum(21, ""NULL""); var18.setDatum(22, ""NULL""); var18.setDatum(23, ""NULL""); var18.setDatum(24, var16.getDataCategory()); var6.add(var18); } } } } Collections.sort(var6, new Comparator<Tuple>() { @Override public int Func2(Tuple var19, Tuple var20) { int var21 = ((String) var19.getDatum(0)).compareTo(((String) var20.getDatum(0))); if (var21 == 0) var21 = ((String) var19.getDatum(1)).compareTo(((String) var20.getDatum(1))); if (var21 == 0) var21 = ((String) var19.getDatum(2)).compareTo(((String) var20.getDatum(2))); if (var21 == 0) var21 = ((String) var19.getDatum(16)).compareTo(((String) var20.getDatum(16))); return var21; } }); var5.addTuples(var6); return var5; } "	1	0	0	0	0	0
"@Override protected void Func1(HttpSecurity var1) throws Exception { var1 .authorizeRequests() .antMatchers(""/resv/**"").permitAll() .antMatchers(""/"").permitAll() .antMatchers(""/graphs/**"").permitAll() .antMatchers(""/info/**"").permitAll() .antMatchers(""/webjars/**"").permitAll() .antMatchers(""/st/**"").permitAll() .antMatchers(""/admin/**"").hasAuthority(""ADMIN"") .anyRequest().authenticated() .and() .formLogin() .loginPage(""/login"") .permitAll() .and() .logout() .permitAll() .logoutRequestMatcher(new AntPathRequestMatcher(""/logout"")) .logoutSuccessUrl(""/login"") .deleteCookies(""remember-me"") .and().rememberMe(); } "	0	0	0	0	0	1
private Callback<TreeTableColumn.CellDataFeatures<BoxObject, Node>, ObservableValue<Node>> Func1() { return param -> { TreeItem<BoxObject> var1 = param.getValue(); HBox var2 = new HBox(3); SimpleObjectProperty<Node> var3 = new SimpleObjectProperty<>(var2); if (!(var1.getValue() instanceof BoxFolder) && !(var1.getValue() instanceof BoxFile)) { return var3; } loadInlineButtons(var1, var2); BoxObject var4 = var1.getValue(); TreeItem<BoxObject> var5 = var4 instanceof BoxFolder ? var1 : var1.getParent(); if (!(var5 instanceof FolderTreeItem)) { return var3; } ReadableBoxNavigation var6 = ((FolderTreeItem)var5).getNavigation(); if (!(var6 instanceof CachedBoxNavigation)) { return var3; } CachedBoxNavigation var7 = (CachedBoxNavigation)var6; var7.addObserver((o, arg) -> { if (!(arg instanceof ChangeEvent)) { return; } ChangeEvent var8 = (ChangeEvent) arg; if (!var8.getPath().equals(var4 instanceof BoxFolder ? var7.getPath() : var7.getDesktopPath(var1.getValue()))) { return; } Platform.runLater(() -> { try { if (var4 instanceof BoxFile) { var1.setValue(var7.getFile(var4.getName())); } loadInlineButtons(var1, var2); var3.set(var2); } catch (QblStorageException ignored) { } }); }); return var3; }; } 	0	0	1	1	1	0
@Override protected Set<CloudSdkValidationResult> Func1(Path var1) { Set<CloudSdkValidationResult> var2 = new HashSet<>(); if (var1 == null) { var2.add(CloudSdkValidationResult.CLOUD_SDK_NOT_FOUND); return var2; } CloudSdk var3 = buildCloudSdkWithPath(var1); try { var3.Func1(); } catch (CloudSdkNotFoundException exception) { var2.add(CloudSdkValidationResult.CLOUD_SDK_NOT_FOUND); return var2; } catch (CloudSdkOutOfDateException exception) { var2.add(CloudSdkValidationResult.CLOUD_SDK_VERSION_NOT_SUPPORTED); } catch (InvalidJavaSdkException exception) { var2.add(CloudSdkValidationResult.CLOUD_SDK_NOT_FOUND); } try { var3.validateAppEngineJavaComponents(); } catch (AppEngineJavaComponentsNotInstalledException ex) { var2.add(CloudSdkValidationResult.NO_APP_ENGINE_COMPONENT); } return var2; } 	0	0	0	0	1	0
@Override public int Func1() { return this._id; } 	0	0	0	0	0	1
public Long Func1() { return id; } 	0	0	0	0	0	1
"@Override protected String Func1(DataEventType var1, Trigger var2, TriggerHistory var3, Channel var4, String var5, Table var6, Table var7, String var8, String var9, String var10) { var10 = FormatUtils.replace(""oldColumns"", var2.isUseCaptureOldData() ? super.buildColumnsString(ORIG_TABLE_ALIAS, oldTriggerValue, oldColumnPrefix, var7.getColumns(), var1, true, var4, var2).toString() : ""convert(VARCHAR,null)"", var10); var10 = super.Func1(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10); Column[] var11 = var7.getPrimaryKeyColumns(); var10 = FormatUtils.replace(""declareOldKeyVariables"", buildKeyVariablesDeclare(var11, ""old""), var10); var10 = FormatUtils.replace(""declareNewKeyVariables"", buildKeyVariablesDeclare(var11, ""new""), var10); return var10; } "	0	0	1	0	0	0
"public String Func1(Trigger var1, TriggerHistory var2, Table var3, Channel var4, String var5) { String var6 = sqlTemplates.get(INITIAL_LOAD_SQL_TEMPLATE); Column[] var7 = var3.getPrimaryKeyColumns(); String var8 = buildColumnsString(symmetricDialect.getInitialLoadTableAlias(), symmetricDialect.getInitialLoadTableAlias(), """", var7, DataEventType.INSERT, false, var4, var1).toString(); var6 = FormatUtils.replace(""var7"", var8, var6); var6 = FormatUtils.replace(""oracleToClob"", var1.isUseCaptureLobs() ? ""to_clob('')||"" : """", var6); var6 = FormatUtils.replace(""tableName"", SymmetricUtils.quote(symmetricDialect, var3.getName()), var6); var6 = FormatUtils.replace(""schemaName"", var2 == null ? getSourceTablePrefix(var3) : getSourceTablePrefix(var2), var6); var6 = FormatUtils.replace(""var5"", var5, var6); var6 = FormatUtils.replace( ""primaryKeyWhereString"", getPrimaryKeyWhereString(symmetricDialect.getInitialLoadTableAlias(), var3.hasPrimaryKey() ? var3.getPrimaryKeyColumns() : var3.getColumns()), var6); return var6; } "	0	0	1	0	0	0
@Test public void Func1() { final Alien var1 = new Alien(33, 33, game); assertFalse(game.getupdateLogic()); var1.hmovement(); assertFalse(game.getupdateLogic()); assertEquals(34, var1.getX(), 0.00001); } 	0	0	0	0	1	0
@Test public void Func1() { final Alien var1 = new Alien(2, 33, game); var1.setMovementSpeed(-4); assertFalse(game.getupdateLogic()); var1.hmovement(); assertEquals((double) -2, var1.getX(), 0.0001); assertTrue(game.getupdateLogic()); } 	0	0	0	0	1	0
"private void Func1(DataObject var1) { try { if (storageBackend != null) { String var2 = Paths.get(var1.getParentUri(), var1.getObjectName()).toString(); CdmiObjectStatus var3 = storageBackend.getCurrentStatus(var2); for (Entry<String, String> var4 : var3.getMonitoredAttributes().entrySet()) { var1.getMetadata().put(var4.getKey(), var4.getValue()); } var1.setCapabilitiesUri(var3.getCurrentCapabilitiesUri()); if (var3.getTargetCapabilitiesUri() != null) { var1.getMetadata().put(""cdmi_capabilities_target"", var3.getTargetCapabilitiesUri()); } } } catch (BackEndException ex) { log.warn(""ERROR: {}"", ex.getMessage()); } } "	0	0	1	0	1	0
public static GroupGeneralData Func1(final GroupGeneralData var1, final Collection<ClientData> var2, final Collection<ClientData> var3, final Collection<GroupRoleData> var4, final Collection<CalendarData> var5, final CalendarData var6) { return new GroupGeneralData(var1.id, var1.accountNo, var1.name, var1.externalId, var1.status, var1.activationDate, var1.officeId, var1.officeName, var1.centerId, var1.centerName, var1.staffId, var1.staffName, var1.hierarchy, var2, var3, var1.centerOptions, var1.officeOptions, var1.staffOptions, var1.clientOptions, var4, var1.availableRoles, var1.selectedRole, var5, var6, var1.closureReasons, var1.timeline); } 	0	0	0	0	0	1
"private void Func1() { T.UI(); mMdpData = new ArrayList<MyDigiPassWidget.MdpRow>(); if (mScopes.contains(SCOPE_EID_PHOTO)) { mImageView.setVisibility(View.VISIBLE); final byte[] var1 = Base64.decode(mResult.eid_photo); mImageView.setImageBitmap(BitmapFactory.decodeByteArray(var1, 0, var1.length)); } else { mImageView.setVisibility(View.GONE); } final Context var2 = getContext(); if (mScopes.contains(SCOPE_EID_PROFILE)) { addMdpRow(R.string.fa_user, mResult.eid_profile.getDisplayName()); addMdpRow(R.string.fa_transgender, mResult.eid_profile.getDisplayGender(var2)); addMdpRow(R.string.fa_birthday_cake, String.format(""%s, %s"", getFormattedDateString(mResult.eid_profile.date_of_birth), mResult.eid_profile.location_of_birth)); if (!TextUtils.isEmptyOrWhitespace(mResult.eid_profile.noble_condition)) { addMdpRow(R.string.fa_black_tie, mResult.eid_profile.noble_condition); } addMdpRow(R.string.fa_hourglass_half, var2.getString(R.string.valid_from_to, getFormattedDateString(mResult.eid_profile.validity_begins_at), getFormattedDateString(mResult.eid_profile.validity_ends_at))); addMdpRow(R.string.fa_flag, mResult.eid_profile.nationality); addMdpRow(R.string.fa_home, mResult.eid_profile.issuing_municipality); if (!TextUtils.isEmptyOrWhitespace(mResult.eid_profile.created_at)) { addMdpRow(R.string.fa_clock_o, getFormattedDateTimeString(mResult.eid_profile.created_at)); } addMdpRow(R.string.fa_credit_card, mResult.eid_profile.getDisplayCardInfo(var2)); } if (mScopes.contains(SCOPE_EID_ADDRESS)) { addMdpRow(R.string.fa_home, mResult.eid_address.getDisplayValue()); } if (mScopes.contains(SCOPE_EMAIL)) { addMdpRow(R.string.fa_envelope, mResult.email); } if (mScopes.contains(SCOPE_PHONE)) { addMdpRow(R.string.fa_phone, mResult.phone); } if (mScopes.contains(SCOPE_PROFILE)) { addMdpRow(R.string.fa_user, mResult.profile.getDisplayName()); if (!TextUtils.isEmptyOrWhitespace(mResult.profile.preferred_locale)) { addMdpRow(R.string.fa_flag, mResult.profile.getDisplayLanguage()); } if (!TextUtils.isEmptyOrWhitespace(mResult.profile.born_on)) { addMdpRow(R.string.fa_birthday_cake, getFormattedDateString(mResult.profile.born_on)); } } if (mScopes.contains(SCOPE_ADDRESS)) { addMdpRow(R.string.fa_home, mResult.address.getDisplayValue()); } mAuthenticateBtn.setVisibility(View.GONE); mResultListView.setVisibility(mMdpData.size() == 0 ? View.GONE : View.VISIBLE); mResultAdapter.notifyDataSetChanged(); mActivity.getMainService().postOnUIHandler(new SafeRunnable() { @Override protected void Func2() throws Exception { UIUtils.setListViewHeightBasedOnItems(mResultListView); } }); } "	0	0	0	0	0	1
public ParseException Func1() { jj_expentries.clear(); boolean[] var1 = new boolean[116]; if (jj_kind >= 0) { var1[jj_kind] = true; jj_kind = -1; } for (int var2 = 0; var2 < 112; var2++) { if (jj_la1[var2] == jj_gen) { for (int var3 = 0; var3 < 32; var3++) { if ((jj_la1_0[var2] & (1<<var3)) != 0) { var1[var3] = true; } if ((jj_la1_1[var2] & (1<<var3)) != 0) { var1[32+var3] = true; } if ((jj_la1_2[var2] & (1<<var3)) != 0) { var1[64+var3] = true; } if ((jj_la1_3[var2] & (1<<var3)) != 0) { var1[96+var3] = true; } } } } for (int var2 = 0; var2 < 116; var2++) { if (var1[var2]) { jj_expentry = new int[1]; jj_expentry[0] = var2; jj_expentries.add(jj_expentry); } } jj_endpos = 0; jj_rescan_token(); jj_add_error_token(0, 0); int[][] var4 = new int[jj_expentries.size()][]; for (int var2 = 0; var2 < jj_expentries.size(); var2++) { var4[var2] = jj_expentries.get(var2); } return new ParseException(token, var4, tokenImage); } 	0	0	0	1	1	0
private boolean Func1() { if (jj_3R_51()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_3R_138()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_scan_token(LPAREN)) return true; if (jj_3R_61()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_3R_220()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_3R_69()) return true; return false; } 	0	0	0	0	0	1
private boolean Func1() { if (jj_scan_token(LPAREN)) return true; if (jj_3R_61()) return true; return false; } 	0	0	1	1	0	0
"final public void Func1() throws ParseException { trace_call(""Func1""); try { Token var1; ASTDecafMain var2 = new ASTDecafMain(this, JJTDECAFMAIN); boolean var3 = true; jjtree.openNodeScope(var2); try { var1 = getToken(1); label_44: while (true) { BlockStatement(); if (jj_2_34(3)) { ; } else { break label_44; } } jjtree.closeNodeScope(var2, true); var3 = false; setFirstLastToken(var2, var1, getToken(0)); } catch (Throwable jjte001) { if (var3) { jjtree.clearNodeScope(var2); var3 = false; } else { jjtree.popNode(); } if (jjte001 instanceof RuntimeException) { {if (true) throw (RuntimeException)jjte001;} } if (jjte001 instanceof ParseException) { {if (true) throw (ParseException)jjte001;} } {if (true) throw (Error)jjte001;} } finally { if (var3) { jjtree.closeNodeScope(var2, true); } } } finally { trace_return(""Func1""); } } "	0	0	1	0	1	0
private static void Func1(VariantRec var1, String var2) { Double var3 = var1.getProperty(var2); if (var3 == null) { var3 = 0.0; } var3++; var1.addProperty(var2, var3); } 	0	0	0	0	0	1
@Override public void Func1(DatabaseError var1) { getOnCompleteResult.onCancel(); } 	0	0	0	0	1	0
protected final State Func1() { return state; } 	0	0	1	1	0	0
@Override public int Func1() { return Math.max(_nbColumns, _nbRows); } 	0	0	0	0	1	0
@Override public int Func1() { return _nbRows * _nbColumns; } 	0	0	0	0	0	1
public static int Func1(Entity var1) { switch(getCreatureType(var1)) { case CREEPER: return ((Creeper)var1).isPowered() ? 1 : 0; case PIG: return ((Pig)var1).hasSaddle() ? 1 : 0; case SHEEP: return ((Sheep)var1).getColor().getData() + (((Sheep)var1).isSheared() ? 16 : 0); case SLIME: return ((Slime)var1).getSize(); case WOLF: return ((Wolf)var1).isAngry() ? 1 : (((Wolf)var1).isTamed() ? 2 : 0); case PIG_ZOMBIE: return ((PigZombie)var1).getAnger(); default: return 0; } } 	0	0	0	0	1	0
void Func1(int var1, int var2) { Func1(new IntRange(var1,var2)); } 	0	0	0	0	0	1
private int Func1(int var1) throws BadLocationException { while (var1 > 0) { char var2 = getText(var1 - 1, 1).charAt(0); if (var2 == ' ' || var2 == SEPARATOR_CHAR) var1--; else break; } return var1; } 	0	0	0	0	1	0
private void Func1(int var1, int var2, String var3, AttributeSet var4) throws BadLocationException { if (selecting) return; if (var3 == null || var3.length() == 0) return; char var5 = var3.charAt(0); try { if (isLetter(var5)) { tryInsertInitials(var1, var2, var3); } else if (isNumber(var5)) { tryInsertNumber(var1, var2, var3); } else if (isPunctuation(var5)) { tryInsertPunctuation(var1, var5); } else { badInput(); } justInsertedSeparator = (var5 == SEPARATOR_CHAR); } catch (BadInputException bie) { } } 	0	0	0	0	1	0
"@Override protected Map<String, String> Func1() { Map<String, String> var1 = WMI4Java.get().VBSEngine().getWMIObject(WMIClass.WIN32_PERFFORMATTEDDATA_PERFOS_MEMORY); var1.putAll(WMI4Java.get().VBSEngine().getWMIObject(WMIClass.WIN32_PHYSICALMEMORY)); var1.put(""MemAvailable"", var1.get(""AvailableKBytes"")); var1.put(""MemFree"", WMI4Java.get().VBSEngine().getWMIObject(WMIClass.WIN32_OPERATINGSYSTEM).get(""FreePhysicalMemory"")); var1.put(""MemTotal"", WMI4Java.get().VBSEngine().getWMIObject(WMIClass.WIN32_OPERATINGSYSTEM).get(""FreePhysicalMemory"")); return var1; } "	0	0	0	0	1	0
void Func1() { Disassembler var1 = cpu.getDisassembler(); if (cpu.isBreakpointSupported()) { setColumns(Arrays.asList( new BreakpointColumn(cpu), new AddressColumn(), new MnemoColumn(var1), new OpcodeColumn(var1) )); } else { setColumns(Arrays.asList( new AddressColumn(), new MnemoColumn(var1), new OpcodeColumn(var1) )); } } 	0	0	1	0	0	0
public static Event Func1(Event var1, EventRequest var2) { var1.setTitle(var2.getTitle()); var1.setDescription(var2.getDescription()); var1.setLocation(var2.getLocation()); var1.setTarget(var2.getTarget()); var1.setLimit(var2.getLimit()); var1.setStart(LocalDateTime.parse(var2.getEventStart(), format)); var1.setEnding(LocalDateTime.parse(var2.getEventEnd(), format)); var1.setImageURL(var2.getImage()); return var1; } 	0	0	0	0	1	0
"protected void Func1(Slot var1, int var2, int var3, int var4) { if (var1 != null && var1.getHasStack()) { ItemStack var5 = var1.getStack(); sign = new TileEntityMoarSign(); String var6 = ItemMoarSign.getTextureFromNBTFull(var5.getTagCompound()); SignInfo var7 = SignRegistry.get(var6); sign.setWorldObj(FMLClientHandler.instance().getWorldClient()); sign.isMetal = var7.isMetal; sign.blockType = var7.isMetal ? Blocks.signStandingMetal : Blocks.signStandingWood; sign.signText = new String[]{"""", ""§nThis is some"", ""§4example §ltext"", """"}; sign.setResourceLocation(var6); } } "	0	0	0	0	1	0
@Override public Loader<LoaderResult> Func1(int var1, Bundle var2) { switch (var1) { case R.var1.loader_id_add_new_account: UIUtil.exchangeViewVisibility(this, true, progressView, contentView); authCredentials = generateAuthCredentials(); return new CheckEmailSettingsAsyncTaskLoader(this, authCredentials); default: return null; } } 	0	0	0	0	0	1
public Set<PhysicalTable> Func1() { return this.tables; } 	0	0	0	0	0	1
"@Override public FinancaTable Func1() { if (!isTableInitialized){ try { initTable(); } catch (DatabaseException ex) { MainFrame.LOG.log(Level.SEVERE, ""Falha ao inicializar tabela.""); } isTableInitialized=true; } return model; } "	0	0	0	0	1	0
"@Override public void Func1() { if (initDone || !com.mcmoddev.basemetals.util.Config.Options.enableTinkersConstruct) { return; } Map<String, Boolean> var1 = new HashMap<>(); var1.put(""Adamantine"", Options.enableAdamantine); var1.put(""Adamantine"", Options.enableAdamantine); var1.put(""Antimony"", Options.enableAntimony); var1.put(""Aquarium"", Options.enableAquarium); var1.put(""Bismuth"", Options.enableBismuth); var1.put(""Brass"", Options.enableBrass); var1.put(""Bronze"", Options.enableBronze); var1.put(""ColdIron"", Options.enableColdIron); var1.put(""Cupronickel"", Options.enableCupronickel); var1.put(""Invar"", Options.enableInvar); var1.put(""Mithril"", Options.enableMithril); var1.put(""Nickel"", Options.enableNickel); var1.put(""Pewter"", Options.enablePewter); var1.put(""Platinum"", Options.enablePlatinum); var1.put(""StarSteel"", Options.enableStarSteel); var1.put(""Tin"", Options.enableTin); var1.put(""Zinc"", Options.enableZinc); var1.put(""Lead"", Options.enableLead); var1.put(""Mercury"", Options.enableMercury); var1.put(""Silver"", Options.enableSilver); for( Map.Entry<String, Boolean> var2 : var1.entrySet() ) { addFurnace(var2.getValue(), var2.getKey()); addCrucible(var2.getValue(), var2.getKey()); addPlatePress(var2.getValue(), var2.getKey()); addPressStorage(var2.getValue(), var2.getKey()); } addSmelterRecipe(4000, new ItemStack(Materials.copper.ingot, 2), new ItemStack(Materials.zinc.ingot, 1), new ItemStack( Materials.brass.ingot, 3)); addSmelterRecipe(4000, new ItemStack(Materials.copper.ingot, 3), new ItemStack(Materials.nickel.ingot, 1), new ItemStack( Materials.cupronickel.ingot, 4)); initDone = true; } "	0	0	0	0	1	0
"@Override public AbstractCas Func1() throws AnalysisEngineProcessException { SolrResult var1 = i < results.size() ? results.get(i) : null; i++; JCas var2 = getEmptyJCas(); try { var2.createView(""Question""); CasCopier var3 = new CasCopier(questionView.getCas(), var2.getView(""Question"").getCas()); copyQuestion(var3, questionView, var2.getView(""Question"")); var2.createView(""Result""); JCas var4 = var2.getView(""Result""); if (var1 != null) { boolean var5 = (i == results.size()); ResultInfo var6 = generateSolrResult(questionView, var4, var1.doc, var1.concept, var5 ? i : 0); String var7 = var6.getDocumentTitle(); logger.info("" ** SearchResultCAS: "" + var6.getDocumentId() + "" "" + (var7 != null ? var7 : """")); QuestionDashboard.getInstance().get(questionView).setSourceState( var6.getOrigin() == ""cz.brmlab.yodaqa.pipeline.solrfull.fulltext"" ? AnswerSourceEnwiki.ORIGIN_FULL : AnswerSourceEnwiki.ORIGIN_TITLE, Integer.parseInt(var6.getDocumentId()), 1); } else { var4.setDocumentText(""""); var4.setDocumentLanguage(questionView.getDocumentLanguage()); ResultInfo var6 = new ResultInfo(var4); var6.setDocumentTitle(""""); var6.setOrigin(resultInfoOrigin); var6.setIsLast(i); var6.addToIndexes(); } } catch (Exception e) { var2.release(); throw new AnalysisEngineProcessException(e); } return var2; } "	1	0	0	1	0	0
"@DataProvider(name = ""Func1"") public static Object[][] Func1() { return new Object[][] { {new byte[] {20, 20, 20, 20}, 20, new int[] {4, 4}}, {new byte[] {21, 21, 21, 20, 19}, 20, new int[] {0, 3}}, {new byte[] {20, 20, 21, 21, 21, 21, 20, 20}, 20, new int[] {2, 6}}, {new byte[] {19, 19, 21, 21, 21, 21, 1, 1, 21, 21, 21, 21, 21}, 20, new int[] {8, 13}}, {new byte[] {19, 19, 21, 21, 21, 21, 1, 1, 21, 21, 21, 21, 21, 19}, 20, new int[] {8, 13}}, {new byte[] {19, 19, 21, 21, 21, 21, 21, 1, 1, 21, 21, 21, 21}, 20, new int[] {2, 7}}, {new byte[] {19, 19, 21, 21, 21, 20, 20, 19, 19, 21, 21, 21, 20}, 20, new int[] {2, 12}}, {new byte[] {19, 21, 21, 21, 20, 20, 19, 19, 21, 21, 21, 20, 19}, 20, new int[] {1, 11}}, {new byte[] {19, 21, 21, 21, 20, 20, 19, 19, 21, 21, 21, 20, 19, 19, 21, 20, 19}, 20, new int[] {1, 11}}, {new byte[] {21, 20, 20, 19, 19, 21, 21, 21, 20, 20, 19, 19, 21, 21, 21, 20, 19}, 20, new int[] {5, 15}} }; } "	0	0	1	1	0	0
"@Test public void Func1() { try { survey = new TestSurvey(false); survey.getUnmodifiableQuestionList().get(0).setConstraints(null); Validate.entityThrowingException(validator, survey); fail(""Should have thrown exception""); } catch (InvalidEntityException e) { assertEquals(""element0.constraints is required"", errorFor(e, ""element0.constraints"")); } } "	0	0	0	0	1	0
"public void Func1() { from(getFileComponentConsumerPath()) .routeId(this.getClass().getSimpleName()) .onException(Exception.class) .maximumRedeliveries(2) .log(LoggingLevel.WARN, LOG, ""File [${header.CamelFileName}] is being moved to the error directory [${header.ErrorDirectory}]"") .process(fileToS3ErrorProcessor).id(ERROR_ENDPOINT_PROCESSOR_ID) .to(getFileComponentErrorProducerPath()).id(ERROR_ENDPOINT_ID) .end() .setHeader(""CamelAwsS3Key"", simple(getS3OptimisedFilename(""${header.CamelFileName}""))) .setHeader(""CamelAwsS3ContentLength"", header(""CamelFileLength"")) .setHeader(""S3Bucket"", simple(toS3BucketName)) .setHeader(""ErrorDirectory"", simple(errorDirectoryPath)) .log(LoggingLevel.DEBUG, LOG, ""Current headers : [${headers}]"") .log(LoggingLevel.INFO, LOG, ""Uploading [${header.CamelFileName}] to AWS-S3 bucket [${header.S3Bucket}/${header.CamelAwsS3Key}]"") .to(getS3ComponentProducerPath()).id(UPLOAD_TO_S3_ENDPOINT_ID) .log(LoggingLevel.INFO, LOG, ""[${header.CamelFileName}] upload complete""); } "	0	0	0	0	0	1
@Override public KookooIVRResponseBuilder Func1(KooKooIVRContext var1) { TAMAIVRContext var2 = ivrContextFactory.create(var1); return new KookooIVRResponseBuilder().withSid(var2.callId()).withPlayAudios(TamaIVRMessage.MORE_OPTIONS, TamaIVRMessage.SIGNATURE_MUSIC). language(var2.preferredLanguage()); } 	0	0	0	0	1	0
"public void Func1(LifecycleListener var1) { if (listeners.add(var1)) { LOG.info(""Adding LifecycleListener '{}' {}"", var1.getClass().getName(), System.identityHashCode(var1)); if (state.equals(State.Started)) { LOG.info(""Starting LifecycleListener '{}'"", var1.getClass().getName()); var1.onStarted(); } } } "	0	0	0	0	1	0
"public static void Func1( String[] var1 ) { Problem var2 = new PE0023(); String var3 = var2.getResult(); IO.info( ""var3 for problem #"" + var2 ); IO.info( "" is '"" + var3 + ""'"" ); IO.infoln( "" found in "" + var2.getRuntime( 2 ) + "" ms"" ); } "	0	0	1	0	1	0
"private void Func1() { ActionBar var1 = getSupportActionBar(); var1.setDisplayHomeAsUpEnabled(true); var1.setLogo(new BitmapDrawable(getResources(), service.getCurrentUserAvatar())); var1.setTitle(""查看图片""); } "	0	0	0	0	1	0
"@Override public void Func1(View var1) { Intent var2 = new Intent(callingActivity, DraftEditor.class); var2.putExtra(""task"", ""edit_existing""); var2.putExtra(""file"", msglist.get(holder.position)); var2.putExtra(""nodeindex"", holder.draft_storage_index); callingActivity.startActivity(var2); } "	0	0	0	0	1	0
public static PreparedStatement Func1(Connection var1, String var2, int var3, int var4) throws SQLException { PreparedStatement var5 = var1.prepareStatement(var2, var3, var4); return wrap(var5, var2); } 	0	0	0	1	0	0
public static PreparedStatement Func1(Connection var1, String var2, int[] var3) throws SQLException { PreparedStatement var4 = var1.prepareStatement(var2, var3); return wrap(var4, var2); } 	0	0	0	1	0	0
"private Material Func1(AssetManager var1) { if (defaultMaterial == null) { defaultMaterial = new Material(var1, ""Common/MatDefs/Misc/ShowNormals.j3md"");; } return defaultMaterial; } "	0	0	1	1	1	0
private SWRLAtom Func1() { OWLDataRange var1 = parseDataRange(); consumeToken(OPEN.keyword()); SWRLVariable var2 = parseDVariable(); consumeToken(CLOSE.keyword()); return df.getSWRLDataRangeAtom(var1, var2); } 	0	0	0	0	1	0
"private void Func1() { OutputStream var1 = null; InputStream var2 = null; HttpURLConnection var3 = null; try { Log.d(Config.LOGTAG, ""uploading to "" + mPutUrl.toString()); var3 = (HttpURLConnection) mPutUrl.openConnection(); if (var3 instanceof HttpsURLConnection) { mHttpConnectionManager.setupTrustManager((HttpsURLConnection) var3, true); } var3.setRequestMethod(""PUT""); var3.setFixedLengthStreamingMode((int) file.getExpectedSize()); var3.setDoOutput(true); var3.connect(); var1 = var3.getOutputStream(); var2 = file.createInputStream(); transmitted = 0; expected = file.getExpectedSize(); int var4 = -1; byte[] var5 = new byte[4096]; while (((var4 = var2.read(var5)) != -1) && !canceled) { transmitted += var4; var1.write(var5, 0, var4); mXmppConnectionService.updateConversationUi(); } var1.flush(); var1.close(); var2.close(); int var6 = var3.getResponseCode(); if (var6 == 200) { Log.d(Config.LOGTAG, ""finished uploading file""); Message.FileParams var7 = var8.getFileParams(); if (key != null) { mGetUrl = new URL(mGetUrl.toString() + ""#"" + CryptoHelper.bytesToHex(key)); } mXmppConnectionService.getFileBackend().updateFileParams(var8, mGetUrl); var8.setTransferable(null); var8.setCounterpart(var8.getConversation().getJid().toBareJid()); if (var8.getEncryption() == Message.ENCRYPTION_DECRYPTED) { mXmppConnectionService.getPgpEngine().encrypt(var8, new UiCallback<Message>() { @Override public void Func2(Message var8) { mXmppConnectionService.resendMessage(var8); } @Override public void Func3(int var9, Message var10) { fail(); } @Override public void Func4(PendingIntent var11, Message var10) { fail(); } }); } else { mXmppConnectionService.resendMessage(var8); } } else { fail(); } } catch (IOException e) { Log.d(Config.LOGTAG, e.getMessage()); fail(); } finally { FileBackend.close(var2); FileBackend.close(var1); if (var3 != null) { var3.disconnect(); } } } "	0	0	0	0	0	1
"@Override public boolean Func1(CommandSender var1, Command var2, String[] var3) { if (!(var1 instanceof Player)) { var1.sendMessage(""You must be a var4 to execute that command!""); return true; } Player var4 = (Player) var1; if (var4.getGameMode() != GameMode.SPECTATOR) { var4.setGameMode(GameMode.SPECTATOR); } else { var4.setGameMode(GameMode.SURVIVAL); var4.setAllowFlight(true); var4.setFlying(true); Bukkit.getServer().dispatchCommand(getServer().getConsoleSender(), ""sudo "" + var4 + "" top""); var4.setHealth(1); } return true; } "	0	0	0	0	1	0
"private void Func1(Stack<Segment> var1) { isVolatile = false; for (Segment var2 : var1) { switch (var2.getSegmentType()) { case NewLine: { layoutLeader(); MarginProperties var3 = new MarginProperties(leftMargin.getContent()+StringTools.fill(fcontext.getSpaceCharacter(), rdp.getTextIndent()), leftMargin.isSpaceOnly()); rows.add(createAndConfigureEmptyNewRow(var3)); break; } case Text: { TextSegment var4 = (TextSegment)var2; layoutAfterLeader( Translatable.text( fcontext.getConfiguration().isMarkingCapitalLetters()? var4.getText():var4.getText().toLowerCase() ). locale(var4.getTextProperties().getLocale()). hyphenate(var4.getTextProperties().isHyphenating()). attributes(var4.getTextAttribute()).build(), var4.getTextProperties().getTranslationMode()); break; } case Leader: { if (currentLeader!=null) { layoutLeader(); } currentLeader= (Leader)var2; break; } case Reference: { isVolatile = true; PageNumberReferenceSegment var5 = (PageNumberReferenceSegment)var2; Integer var6 = null; if (refs!=null) { var6 = refs.getPageNumber(var5.getRefId()); } if (var6==null) { layoutAfterLeader(Translatable.text(""??"").locale(null).build(), null); } else { String var7 = """" + var5.getNumeralStyle().format(var6); layoutAfterLeader(Translatable.text( fcontext.getConfiguration().isMarkingCapitalLetters()?var7:var7.toLowerCase() ).locale(null).build(), null); } break; } case Evaluate: { isVolatile = true; Evaluate var8 = (Evaluate)var2; String var7 = var8.getExpression().render(context); layoutAfterLeader( Translatable.text(fcontext.getConfiguration().isMarkingCapitalLetters()?var7:var7.toLowerCase()). locale(var8.getTextProperties().getLocale()). hyphenate(var8.getTextProperties().isHyphenating()). attributes(var8.getTextAttribute(var7.length())). build(), null); break; } case Marker: { Marker var9 = (Marker)var2; applyAfterLeader(var9); break; } case Anchor: { AnchorSegment var10 = (AnchorSegment)var2; applyAfterLeader(var10); break; } } } if (currentLeader!=null || item!=null) { layoutLeader(); } if (rows.size()>0) { rows.get(0).addAnchors(0, groupAnchors); groupAnchors.clear(); rows.get(0).addMarkers(0, groupMarkers); groupMarkers.clear(); if (rdp.getUnderlineStyle() != null) { int var11 = flowWidth; int var12 = flowWidth; for (RowImpl var13 : rows) { int var14 = var13.getChars().length(); int var15 = var13.getLeftMargin().getContent().length(); int var16 = var13.getRightMargin().getContent().length(); int var17 = flowWidth - var14 - var15 - var16; var15 += var13.getAlignment().getOffset(var17); var16 = flowWidth - var14 - var15; var11 = min(var11, var15); var12 = min(var12, var16); } if (var11 < leftMargin.getContent().length() || var12 < rightMargin.getContent().length()) { throw new RuntimeException(""coding error""); } rows.add(new RowImpl(StringTools.fill(fcontext.getSpaceCharacter(), var11 - leftMargin.getContent().length()) + StringTools.fill(rdp.getUnderlineStyle(), flowWidth - var11 - var12), leftMargin, rightMargin)); } } } "	0	0	0	0	0	1
@Override public void Func1() { new HostCloseConnectionDialog(this, castHelper).show(getFragmentManager(), TAG); } 	0	0	1	1	1	0
@Override public boolean Func1(MotionEvent var1) { mCancelled = var1.getAction() == MotionEvent.ACTION_CANCEL || var1.getAction() == MotionEvent.ACTION_UP; final boolean var2 = mGestureDetector.Func1(var1); if(getParent()!=null){ getParent().requestDisallowInterceptTouchEvent(true); } if(mDispatchToAlertWindow){ mWindomHelper.getView().dispatchTouchEvent(var1); if(mCancelled){ mDispatchToAlertWindow = false; } } return var2; } 	0	0	0	0	1	0
"@Override public void Func1(JsonObject var1, JsonDeserializationContext var2) { this.amountPerChunk = var1.get(""amount_per_chunk"").getAsInt(); this.maxRadius = var1.get(""max_radius"").getAsInt(); this.state = GeneratorUtils.deserializeStateNonNull(var1, ""state"", var2); this.replacedStates = var2.deserialize(var1.get(""replaced_states""), IBlockState.class); } "	0	0	0	0	1	0
"public void Func1() { this.multiverseConfig = YamlConfiguration.loadConfiguration(new File(getDataFolder(), ""config.yml"")); Configuration var1 = YamlConfiguration.loadConfiguration(this.getClass().getResourceAsStream(""/defaults/config.yml"")); this.multiverseConfig.setDefaults(var1); this.multiverseConfig.options().copyDefaults(true); this.worldManager.loadWorldConfig(new File(getDataFolder(), ""worlds.yml"")); GlobalDebug = this.multiverseConfig.getInt(""debug"", 0); EnforceAccess = this.multiverseConfig.getBoolean(""enforceaccess"", false); EnforceGameModes = this.multiverseConfig.getBoolean(""enforcegamemodes"", true); PrefixChat = this.multiverseConfig.getBoolean(""worldnameprefix"", true); BedRespawn = this.multiverseConfig.getBoolean(""bedrespawn"", true); this.messaging = new MVMessaging(this); this.messaging.setCooldown(this.multiverseConfig.getInt(""messagecooldown"", 5000)); this.saveMVConfigs(); } "	0	0	1	0	1	0
@Override public int Func1(ClusteringStringItem var1) { return LevenshteinDistance.getLevenshteinDistanceDelimitedString(this.stringValue, var1.getStringValue()); } 	1	0	0	0	1	0
"@Override public void Func1() throws MojoExecutionException, MojoFailureException { final Cobertura var1 = new Cobertura(buildCheckArguments()); var1.checkThresholds(); final CoverageThresholdsReport var2 = (CoverageThresholdsReport) var1.report() .getByName(ReportName.THRESHOLDS_REPORT); Boolean var3 = false; for (final CoverageResultEntry var4 : var2.getCoverageResultEntries()) { if (var4.isBelowExpectedCoverage()) { getLog().warn(buildWarningMessage(var4)); var3 = true; } } if (var3) { throw new MojoFailureException(this, ""Coverage is insufficient"", ""One or more coverage types are below expected thresholds.""); } } "	0	0	0	0	1	0
"protected String Func1(JWTClaimsSet var1, OAuthAuthzReqMessageContext var2) throws IdentityOAuth2Exception { try { String var3 = var2.getAuthorizationReqDTO().getUser().getTenantDomain(); int var4 = IdentityTenantUtil.getTenantId(var3); Key var5; if (!(privateKeys.containsKey(var4))) { KeyStoreManager var6 = KeyStoreManager.getInstance(var4); if (!var3.equals(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME)) { String var7 = var3.trim().replace(""."", ""-""); String var8 = var7 + "".jks""; var5 = var6.getPrivateKey(var8, var3); } else { try { var5 = var6.getDefaultPrivateKey(); } catch (Exception e) { throw new IdentityOAuth2Exception(""Error while obtaining private key for super tenant"", e); } } privateKeys.put(var4, var5); } else { var5 = privateKeys.get(var4); } JWSSigner var9 = new RSASSASigner((RSAPrivateKey) var5); SignedJWT var10 = new SignedJWT(new JWSHeader((JWSAlgorithm) signatureAlgorithm), var1); var10.sign(var9); return var10.serialize(); } catch (JOSEException e) { throw new IdentityOAuth2Exception(""Error occurred while signing JWT"", e); } } "	0	0	0	0	1	0
public JTextArea Func1() { return additionalCssTextArea; } 	0	0	0	0	1	0
@Override public int Func1(ShapePoints var1) { var1.ensureDistTraveled(); int var2 = 0; if (_fromIndex < 0 || _toIndex < 0) var2 = Arrays.binarySearch(var1.getDistTraveled(), _shapeDistanceTraveled); else var2 = Arrays.binarySearch(var1.getDistTraveled(), _fromIndex, _toIndex, _shapeDistanceTraveled); if (var2 < 0) var2 = -(var2 + 1); return var2; } 	1	0	1	1	1	0
@Override public void Func1(MediaPlayer var1) { mVideoView.start(); ibCaptureVideo.setVisibility(View.INVISIBLE); } 	0	0	0	0	0	1
private void Func1() { mMediaPagerAdapter = new MediaPagerAdapter(getActivity()); mVpMedia.setAdapter(mMediaPagerAdapter); mCircleIndicator = new CircleIndicator(mViewPagerCountDots, mVpMedia); } 	0	0	0	0	1	0
public final boolean Func1(UserProfile var1) { if (!var1.isCompatible(getSettings().getTitle(), getSettings().getVersion())) return false; getEventBus().fireEvent(new LoadEvent(var1)); return true; } 	0	0	0	0	1	0
"protected MenuBox Func1() { MenuItem var1 = new MenuItem(""CONTROLS""); var1.setMenuContent(this::createContentControls); MenuItem var2 = new MenuItem(""VIDEO""); var2.setMenuContent(this::createContentVideo); MenuItem var3 = new MenuItem(""AUDIO""); var3.setMenuContent(this::createContentAudio); MenuItem var4 = new MenuItem(""RESTORE""); var4.setOnAction(e -> { app.getDisplay().showConfirmationBox(""Settings will be restored to default"", yes -> { if (yes) app.loadFromDefaultProfile(); }); }); return new MenuBox(200, var1, var2, var3, var4); } "	0	0	0	0	1	0
public boolean Func1(Word var1) { return start.value <= var1.value && var1.value < endExclusive.value; } 	0	0	0	0	1	0
private void Func1() { stopCameraPreview(); camera.release(); } 	0	0	0	0	0	1
public boolean Func1(Collection var1){ return this.Func1(var1); } 	0	0	1	0	1	0
"public static String Func1(String var1) { String var2 = """"; try { File var3 = new File(Environment.getExternalStorageDirectory() + ""/Snapprefs/"" + var1 + "".txt""); FileInputStream var4 = new FileInputStream(var3); BufferedReader var5 = new BufferedReader( new InputStreamReader(var4)); String var6 = """"; while ((var6 = var5.readLine()) != null) { var2 += var6 + ""\n""; } var5.close(); } catch (Exception e) { Logger.log(""FileUtils: File SDread failed: "" + e.toString()); } return var2; } "	0	0	0	0	1	0
"private String Func1(Requisition var1) { StringWriter var2 = new StringWriter(); Map var3 = ImmutableMap.of(""var1"", var1, ""orderedDateTime"", var1.getOrderedDateTime().format(formatter), ""fulfillmentUrl"", domainUrl + ""/supply/manage/fulfillment""); try { Template var4 = freemarkerCfg.getTemplate(template); var4.process(var3, var2); } catch (IOException | TemplateException e) { throw new EssTemplateException(template, e); } return var2.toString(); } "	0	0	0	0	0	1
"private HttpURLConnection Func1(boolean var1) throws IOException, JsonClientException { HttpURLConnection var2 = (HttpURLConnection) serviceUrl.openConnection(); var2.setConnectTimeout(10000); if (connectionReadTimeOut != null) { var2.setReadTimeout(connectionReadTimeOut); } var2.setDoOutput(true); var2.setRequestMethod(""POST""); if (var1 || accessToken != null) { if (!(var2 instanceof HttpsURLConnection || allowInsecureHttp)) { throw new UnauthorizedException(""RPC method required authentication shouldn't "" + ""be called through unsecured http, use https instead or call "" + ""setAuthAllowedForHttp(true) for your client""); } if (accessToken == null || accessToken.isExpired()) { if (user == null) { if (accessToken == null) { throw new UnauthorizedException(""RPC method requires authentication but neither "" + ""user nor token was set""); } else { throw new UnauthorizedException(""Token is expired and can not be reloaded "" + ""because user wasn't set""); } } accessToken = requestTokenFromKBase(user, password); } var2.setRequestProperty(""Authorization"", accessToken.toString()); } if (var2 instanceof HttpsURLConnection && trustAllCerts) { final HttpsURLConnection var3 = (HttpsURLConnection) var2; final SSLContext var4; try { var4 = SSLContext.getInstance(""SSL""); } catch (NoSuchAlgorithmException e) { throw new RuntimeException( ""Couldn't get SSLContext instance"", e); } try { var4.init(null, GULLIBLE_TRUST_MGR, new SecureRandom()); } catch (KeyManagementException e) { throw new RuntimeException( ""Couldn't initialize SSLContext"", e); } var3.setSSLSocketFactory(var4.getSocketFactory()); var3.setHostnameVerifier(GULLIBLE_HOSTNAME_VERIFIER); } return var2; } "	0	0	0	0	0	1
public Vector2D Func1(Vector2D var1) { return new Vector2D(var1.scale(1/var1.length())); } 	0	0	0	1	0	0
@Override protected AppInstanceStatusResource Func1(AppInstanceStatus var1) { return new AppInstanceStatusResource(var1.getId(), var1.getState().name(), var1.getAttributes()); } 	0	0	0	0	1	0
"@Override public void Func1(View var1) { switch (var1.getId()) { case R.id.status: activity.showDialog(""statusPicker"", new StatusPickerDialogFragment()); break; case R.id.progress1: if (activity.isAnime()) { Bundle var2 = bundle(R.id.progress1, R.string.dialog_title_watched_update); var2.putInt(""current"", activity.animeRecord.getWatchedEpisodes()); var2.putInt(""max"", activity.animeRecord.getEpisodes()); activity.showDialog(""episodes"", new NumberPickerDialogFragment().setOnSendClickListener(activity), var2); break; } case R.id.progress2: activity.showDialog(""manga"", new MangaPickerDialogFragment()); break; case R.id.startDatePanel: Bundle var3 = new Bundle(); var3.putBoolean(""startDate"", true); var3.putString(""current"", activity.isAnime() ? activity.animeRecord.getWatchingStart() : activity.mangaRecord.getReadingStart()); activity.showDialog(""startDate"", new DatePickerDialogFragment(), var3); break; case R.id.endDatePanel: Bundle var4 = new Bundle(); var4.putBoolean(""startDate"", false); var4.putString(""current"", activity.isAnime() ? activity.animeRecord.getWatchingEnd() : activity.mangaRecord.getReadingEnd()); activity.showDialog(""endDate"", new DatePickerDialogFragment(), var4); break; case R.id.scorePanel: Bundle var5 = bundle(R.id.scorePanel, R.string.dialog_title_rating); var5.putInt(""current"", activity.isAnime() ? activity.animeRecord.getScore() : activity.mangaRecord.getScore()); var5.putInt(""max"", PrefManager.getScoreType() == 3 ? 5 : 10); activity.showDialog(""rating"", new NumberPickerDialogFragment().setOnSendClickListener(activity), var5); break; case R.id.priorityPanel: Bundle var6 = bundle(R.id.priorityPanel, R.string.card_content_my_priority); var6.putInt(""current"", activity.isAnime() ? activity.animeRecord.getPriority() : activity.mangaRecord.getPriority()); var6.putInt(""stringArray"", R.array.priorityArray); var6.putInt(""intArray"", R.array.id); activity.showDialog(""priority"", new ListDialogFragment().setOnSendClickListener(activity), var6); break; case R.id.tagsPanel: Bundle var7 = bundle(R.id.tagsPanel, R.string.dialog_title_tags); var7.putBoolean(""BBCode"", false); var7.putString(""message"", activity.isAnime() ? activity.animeRecord.getPersonalTagsString() : activity.mangaRecord.getPersonalTagsString()); var7.putString(""hint"", getString(R.string.dialog_hint_tags)); activity.showDialog(""tags"", new MessageDialogFragment().setOnSendClickListener(activity), var7); break; case R.id.commentspanel: Bundle var8 = bundle(R.id.commentspanel, R.string.dialog_title_comment); var8.putBoolean(""BBCode"", false); var8.putString(""message"", activity.isAnime() ? activity.animeRecord.getPersonalComments() : activity.mangaRecord.getPersonalComments()); var8.putString(""hint"", getString(R.string.dialog_hint_comment)); activity.showDialog(""tags"", new MessageDialogFragment().setOnSendClickListener(activity), var8); break; case R.id.fansubPanel: Bundle var9 = bundle(R.id.fansubPanel, R.string.dialog_title_fansub); var9.putBoolean(""BBCode"", false); var9.putString(""message"", activity.animeRecord.getFansubGroup()); var9.putString(""hint"", getString(R.string.dialog_hint_fansub)); activity.showDialog(""tags"", new MessageDialogFragment().setOnSendClickListener(activity), var9); break; case R.id.storagePanel: Bundle var10 = bundle(R.id.storagePanel, R.string.dialog_title_storage); var10.putInt(""current"", activity.animeRecord.getStorage()); var10.putInt(""stringArray"", R.array.storageArray); var10.putInt(""intArray"", R.array.id); activity.showDialog(""storage"", new ListDialogFragment().setOnSendClickListener(activity), var10); break; case R.id.capacityPanel: Bundle var11 = bundle(R.id.capacityPanel, R.string.dialog_title_storage_value); var11.putInt(""current"", activity.animeRecord.getStorageValue()); var11.putInt(""max"", 10); activity.showDialog(""storagevalue"", new NumberPickerDialogFragment().setOnSendClickListener(activity), var11); break; case R.id.downloadPanel: Bundle var12 = bundle(R.id.downloadPanel, R.string.dialog_title_downloaded); var12.putInt(""current"", activity.animeRecord.getEpsDownloaded()); var12.putInt(""max"", activity.animeRecord.getEpisodes()); activity.showDialog(""storagevalue"", new NumberPickerDialogFragment().setOnSendClickListener(activity), var12); break; case R.id.rewatchPriorityPanel: Bundle var13 = bundle(R.id.rewatchPriorityPanel, R.string.dialog_title_rewatched_priority); var13.putInt(""current"", activity.isAnime() ? activity.animeRecord.getRewatchValue() : activity.mangaRecord.getRereadValue()); var13.putInt(""stringArray"", R.array.priorityRewatchArray); var13.putInt(""intArray"", R.array.id); activity.showDialog(""rewatchPriority"", new ListDialogFragment().setOnSendClickListener(activity), var13); break; case R.id.countPanel: Bundle var14 = bundle(R.id.countPanel, R.string.dialog_title_rewatched_times); var14.putInt(""current"", activity.isAnime() ? activity.animeRecord.getRewatchCount() : activity.mangaRecord.getRereadCount()); var14.putInt(""max"", 0); // will be set to 999 in the dialog activity.showDialog(""storagevalue"", new NumberPickerDialogFragment().setOnSendClickListener(activity), var14); break; } } "	0	0	0	0	0	1
"public void Func1() { if (activity.isAdded()) status.Func1(activity.getUserStatusString(activity.isAnime() ? activity.animeRecord.getWatchedStatusInt() : activity.mangaRecord.getReadStatusInt())); if (activity.isAnime()) { progress1Current.Func1(Integer.toString(activity.animeRecord.getWatchedEpisodes())); progress1Total.Func1(nullCheckOf(activity.animeRecord.getEpisodes())); myStartDate.Func1(activity.nullCheck(activity.animeRecord.getWatchingStart())); myEndDate.Func1(activity.nullCheck(activity.animeRecord.getWatchingEnd())); myScore.Func1(activity.nullCheck(Theme.getDisplayScore(activity.animeRecord.getScore()))); myStartDate.Func1(activity.getDate(activity.animeRecord.getWatchingStart())); myEndDate.Func1(activity.getDate(activity.animeRecord.getWatchingEnd())); myPriority.Func1(getString(R.array.priorityArray, activity.animeRecord.getPriority())); myTags.Func1(activity.animeRecord.getPersonalTagsString().equals("""") ? getString(R.string.card_content_none) : activity.animeRecord.getPersonalTagsString()); comments.Func1(activity.nullCheck(activity.animeRecord.getPersonalComments())); fansubs.Func1(activity.nullCheck(activity.animeRecord.getFansubGroup())); storage.Func1(getString(R.array.storageArray, activity.animeRecord.getStorage())); storageCount.Func1(Integer.toString(activity.animeRecord.getStorageValue())); dowloaded.Func1(activity.nullCheck(Integer.toString(activity.animeRecord.getEpsDownloaded()))); priority.Func1(getString(R.array.priorityRewatchArray, activity.animeRecord.getRewatchValue())); rewatchCount2.Func1(activity.nullCheck(activity.animeRecord.getRewatchCount())); cardOther.findViewById(R.id.capacityPanel).setVisibility((activity.animeRecord.getStorage() == 0 || activity.animeRecord.getStorage() == 3) ? View.GONE : View.VISIBLE); } else { progress1Current.Func1(Integer.toString(activity.mangaRecord.getVolumesRead())); progress1Total.Func1(nullCheckOf(activity.mangaRecord.getVolumes())); progress2Current.Func1(Integer.toString(activity.mangaRecord.getChaptersRead())); progress2Total.Func1(nullCheckOf(activity.mangaRecord.getChapters())); myStartDate.Func1(activity.nullCheck(activity.mangaRecord.getReadingStart())); myEndDate.Func1(activity.nullCheck(activity.mangaRecord.getReadingEnd())); myScore.Func1(activity.nullCheck(Theme.getDisplayScore(activity.mangaRecord.getScore()))); myStartDate.Func1(activity.getDate(activity.mangaRecord.getReadingStart())); myEndDate.Func1(activity.getDate(activity.mangaRecord.getReadingEnd())); myPriority.Func1(getString(R.array.priorityArray, activity.mangaRecord.getPriority())); myTags.Func1(activity.mangaRecord.getPersonalTagsString().equals("""") ? getString(R.string.card_content_none) : activity.mangaRecord.getPersonalTagsString()); comments.Func1(activity.nullCheck(activity.mangaRecord.getPersonalComments())); cardOther.setVisibility(View.GONE); priority.Func1(getString(R.array.priorityRewatchArray, activity.mangaRecord.getRereadValue() != 0 ? activity.mangaRecord.getRereadValue() - 1 : 0)); rewatchCount2.Func1(activity.nullCheck(activity.mangaRecord.getRereadCount())); } setCard(); } "	0	0	0	0	0	1
"public static Anime Func1(Cursor var1) { Anime var2 = new Anime(); var2.setFromCursor(true); List<String> var3 = Arrays.asList(var1.getColumnNames()); var2.setId(var1.getInt(var3.indexOf(MALSqlHelper.COLUMN_ID))); var2.setTitle(var1.getString(var3.indexOf(""recordName""))); var2.setType(var1.getString(var3.indexOf(""recordType""))); var2.setStatus(var1.getString(var3.indexOf(""recordStatus""))); var2.setWatchedStatus(var1.getString(var3.indexOf(""myStatus"")), false); var2.setWatchedEpisodes(var1.getInt(var3.indexOf(""episodesWatched"")), false); var2.setEpisodes(var1.getInt(var3.indexOf(""episodesTotal""))); var2.setWatchingStart(var1.getString(var3.indexOf(""watchedStart"")), false); var2.setStorage(var1.getInt(var3.indexOf(""storage"")), false); var2.setStorageValue(var1.getInt(var3.indexOf(""storageValue"")), false); var2.setWatchingEnd(var1.getString(var3.indexOf(""watchedEnd"")), false); var2.setMembersScore(var1.getFloat(var3.indexOf(""memberScore""))); var2.setScore(var1.getInt(var3.indexOf(""myScore"")), false); var2.setSynopsis(var1.getString(var3.indexOf(""synopsis""))); var2.setImageUrl(var1.getString(var3.indexOf(""imageUrl""))); if (!var1.isNull(var3.indexOf(""dirty""))) { var2.setDirty(new Gson().fromJson(var1.getString(var3.indexOf(""dirty"")), ArrayList.class)); } else { var2.setDirty(null); } var2.setClassification(var1.getString(var3.indexOf(""classification""))); var2.setMembersCount(var1.getInt(var3.indexOf(""membersCount""))); var2.setFavoritedCount(var1.getInt(var3.indexOf(""favoritedCount""))); var2.setPopularityRank(var1.getInt(var3.indexOf(""popularityRank""))); var2.setWatchingStart(var1.getString(var3.indexOf(""watchedStart"")), false); var2.setWatchingEnd(var1.getString(var3.indexOf(""watchedEnd"")), false); var2.setFansubGroup(var1.getString(var3.indexOf(""fansub"")), false); var2.setPriority(var1.getInt(var3.indexOf(""priority"")), false); var2.setEpsDownloaded(var1.getInt(var3.indexOf(""downloaded"")), false); var2.setRewatchCount(var1.getInt(var3.indexOf(""rewatchCount"")), false); var2.setRewatchValue(var1.getInt(var3.indexOf(""rewatchValue"")), false); var2.setRewatching(var1.getInt(var3.indexOf(""rewatch"")) > 0, false); var2.setPersonalComments(var1.getString(var3.indexOf(""comments"")), false); var2.setStartDate(var1.getString(var3.indexOf(""startDate""))); var2.setEndDate(var1.getString(var3.indexOf(""endDate""))); var2.setRank(var1.getInt(var3.indexOf(""rank""))); var2.setListedId(var1.getInt(var3.indexOf(""listedId""))); Date var4; try { long var5 = var1.getLong(var3.indexOf(""var5"")); var4 = new Date(var5); } catch (Exception e) { // database entry was null var4 = null; } var2.setLastUpdate(var4); return var2; } "	0	0	0	0	0	1
"public void Func1(final User var1, final FollowStatusCallback var2) { APIManager.getInstance().isFollowing(var1, new APICallback<Boolean>() { @Override public void Func2(Boolean var3) { var2.onResponseReceived(var3); } @Override public void Func3(String var4) { var2.onResponseReceived(false); Log.d(LOG_TAG, ""Failed to get following status""); } }); } "	0	0	0	0	0	1
"@Override public void Func1(Observable var1, Object var2) { if (file.exists()) { String var3 = file.getDateForLastEdited(); lastSaved.setText(""Lased saved: "" + var3); String var4 = file.getPath(); filePath.setText(""Path: "" + var4); } else { filePath.setText(""""); lastSaved.setText(""Not saved""); } } "	0	0	1	0	1	0
private int Func1(byte var1) throws IllegalStateException { setDirectAddress(var1, _pop(true)); return 2; } 	0	0	0	0	1	0
private void Func1() { if(this.currentRoom == null) { return; } if(cameraFixing) { RoomMap var1 = currentRoom.getMap().getReference(); float var2 = var1.getSizeX() * 20;       // room's width float var3 = var1.getSizeY() * 20;       // room's height float var4 = Math.abs(camera.zoom) * camera.viewportWidth / 2.0F;  // half of camera's view width float var5 = Math.abs(camera.zoom) * camera.viewportHeight / 2.0F; // half of camera's view height float var6 = camera.position.x; float var7 = camera.position.y; if(var4 * 2 >= var2) { var6 = var2 / 2.0F; } else { if(var6 < var4) { var6 = var4; } else if(var6 > var2 - var4) { var6 = var2 - var4; } } if(var5 * 2 >= var3) { var7 = var3 / 2.0F; } else { if(var7 < var5) { var7 = var5; } else if(var7 > var3 - var5) { var7 = var3 - var5; } } camera.position.set(var6, var7, 0); } } 	0	0	0	0	1	0
private long Func1(String var1, UserKey var2) { final long var3 = mReadStateManager.getPosition(Utils.getReadPositionTagWithAccounts(var1, var2)); if (var3 != -1) return var3; return mReadStateManager.getPosition(var1); } 	0	0	0	0	0	1
"@Override public void Func1(Context var1, Intent var2) { final String var3 = var2.getAction(); if (var3 == null) return; switch (var3) { case BROADCAST_NOTIFICATION_DELETED: { final Uri var4 = var2.getData(); if (var4 == null) return; DependencyHolder var5 = DependencyHolder.get(var1); @NotificationType final String var6 = var4.getQueryParameter(QUERY_PARAM_NOTIFICATION_TYPE); final UserKey var7 = UserKey.valueOf(var4.getQueryParameter(QUERY_PARAM_ACCOUNT_KEY)); final long var8 = NumberUtils.toLong(UriExtraUtils.getExtra(var4, ""item_id""), -1); final long var9 = NumberUtils.toLong(UriExtraUtils.getExtra(var4, ""item_user_id""), -1); final boolean var10 = Boolean.parseBoolean(UriExtraUtils.getExtra(var4, ""item_user_following"")); final long var11 = NumberUtils.toLong(var4.getQueryParameter(QUERY_PARAM_TIMESTAMP), -1); if (CustomTabType.NOTIFICATIONS_TIMELINE.equals(CustomTabUtils.getTabTypeAlias(var6)) && var7 != null && var8 != -1 && var11 != -1) { final HotMobiLogger var12 = var5.getHotMobiLogger(); var12.log(var7, NotificationEvent.deleted(var1, var11, var6, var7, var8, var9, var10)); } final ReadStateManager var13 = var5.getReadStateManager(); final String var14, var15; @ReadPositionTag final String var16 = getPositionTag(var6); if (var16 != null && !TextUtils.isEmpty(var14 = var4.getQueryParameter(QUERY_PARAM_READ_POSITION))) { final long var17 = -1; var13.setPosition(Utils.getReadPositionTagWithAccounts(var16, var7), NumberUtils.toLong(var14, var17)); } else if (!TextUtils.isEmpty(var15 = var4.getQueryParameter(QUERY_PARAM_READ_POSITIONS))) { try { final StringLongPair[] var18 = StringLongPair.valuesOf(var15); for (StringLongPair var19 : var18) { var13.setPosition(var16, var19.getKey(), var19.getValue()); } } catch (NumberFormatException ignore) { } } break; } } } "	0	0	0	0	0	1
@Override public AllEntriesLabelScanReader Func1() { IntFunction<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> var1 = labelId -> { try { return index.seek( new LabelScanKey().set( labelId, 0 ), new LabelScanKey().set( labelId, Long.MAX_VALUE ) ); } catch ( IOException e ) { throw new RuntimeException( e ); } }; int var2 = -1; try ( RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException> cursor = index.seek( new LabelScanKey().set( Integer.MAX_VALUE, Long.MAX_VALUE ), new LabelScanKey().set( 0, 0 ) ) ) { if ( cursor.next() ) { var2 = cursor.get().key().labelId; } } catch ( IOException e ) { throw new RuntimeException( e ); } return new NativeAllEntriesLabelScanReader( var1, var2 ); } 	0	0	1	1	0	0
protected boolean Func1() { return connectCloseSemaphorUpdater.compareAndSet(this, null, NOTIFICATION_INITIALIZED); } 	0	0	0	0	0	1
"public boolean Func1(Sponsor var1) { boolean var2 = true; if(!var1.isActive()) { GlobalVariables.getMessageMap().putWarning(""document"", KeyConstants.ERROR_INACTIVE_SPONSOR_CODE); } if (var1 == null) { var2 = false; } return var2; } "	0	0	0	0	1	0
"private Fragment Func1(int var1) { boolean var2 = var1 == 1; Map<String, String> var3 = new HashMap<>(); var3.put(""sort"", mSortHelper.getSortMode()); var3.put(""direction"", mSortHelper.getSortDirection()); var3.put(""q"", String.format(Locale.US, SEARCH_QUERY, var2 ? Constants.Issue.STATE_CLOSED : Constants.Issue.STATE_OPEN, mRepoOwner, mRepoName, mSearchQuery)); mSearchFragment = IssueListFragment.newInstance(var3, var2, R.string.no_search_issues_found, false); return mSearchFragment; } "	0	0	0	0	1	0
@Override public String Func1() { assert (hasRedoHistory()); CommandHistoryEntry var1 = nextCommandHistory.pop(); String var2 = var1.getFeedbackMessage(); previousCommandHistory.push(var1); return var2; } 	0	0	0	0	1	0
@Override public String Func1() { assert (hasUndoHistory()); CommandHistoryEntry var1 = previousCommandHistory.pop(); String var2 = var1.getFeedbackMessageInReverseCommand(); nextCommandHistory.push(var1); return var2; } 	0	0	0	0	1	0
public DatabaseScheduleStoreManager Func1() { return new DatabaseScheduleStoreManager(dbi, createConfigMapper(), config); } 	0	0	0	0	1	0
public DatabaseProjectStoreManager Func1() { return new DatabaseProjectStoreManager(dbi, createConfigMapper(), config); } 	0	0	0	0	1	0
public DatabaseSecretStoreManager Func1(String var1) { return new DatabaseSecretStoreManager(config, dbi, new AESGCMSecretCrypto(var1)); } 	0	0	0	0	1	0
"public static String Func1(Location var1, Context var2) { String var3 = """"; if (var1 != null) { try { Geocoder var4 = new Geocoder(var2, Locale.getDefault()); List<Address> var5 = var4.getFromLocation(var1.getLatitude(), var1.getLongitude(), 1); if (var5.size() > 0) { Address var6 = var5.get(0); var3 = var6.getLocality() + "","" + var6.getAdminArea() + "" "" + var6.getPostalCode(); } } catch (Exception e) { Log.d(TAG, ""Error getting var6""); } } return var3; } "	0	0	0	0	1	0
@Override public boolean Func1(@Nullable Object var1) { return cache.contains((K)var1) || map.Func1(SliceUtils.concatenate(serdeKey.serialize((K)var1), SIZE_KEY_SUFFIX).toByteArray()); } 	0	0	1	0	0	0
"private Map<SQLParser.Table_atomContext, DataSource> Func1(List<SQLParser.Join_clauseContext> var1) { return var1.stream() .map(jc -> { if (jc.inner_join_clause() != null) { return jc.inner_join_clause().table_atom(); } else if (jc.outer_join_clause() != null) { return jc.outer_join_clause().table_atom(); } else if (jc.natural_join_clause() != null) { return jc.natural_join_clause().table_atom(); } throw new ParseException(String.format(""Unknown join clause type: %s"", jc.getText())); }) .collect(Collectors.toMap(Function.identity(), this::processTableAtom)); } "	0	0	1	1	1	0
"@Test public void Func1() { subject.configure(spyValidator); assertTrue( ""option1 missing"", containsMatching(spyValidator.options(), o -> o.getPrimaryIdentifier().equals(""option1"")) ); assertTrue( ""option2 missing or incorrect"", containsMatching(spyValidator.options(), o -> o.getPrimaryIdentifier().equals(""option2"") && o.isIdentifiedBy(""o2"")) ); assertTrue( ""option3 missing or incorrect"", containsMatching(spyValidator.options(), o -> o.getPrimaryIdentifier().equals(""option3"") && o.allowsMultipleValues() && !o.isRequired() )); assertTrue( ""option4 is missing or incorrect"", containsMatching(spyValidator.options(), o -> o.getPrimaryIdentifier().equals(""option4"") && o.isIdentifiedBy(""o4"") ) ); } "	0	0	0	0	0	1
public void Func1() { this.reviewers = new ArrayList<>(); this.update(); } 	0	0	1	0	1	0
"public String Func1(String var1, String var2, Locale var3, Map<String, Object> var4) { Context var5 = Context.enter(); try { Scriptable var6 = var5.initStandardObjects(); for (ScriptLibrary var7 : scriptLibraries.values()) { var7.addFunctionsToContext(var5, var6); } if (var4 != null) { for (Map.Entry<String, Object> var8 : var4.entrySet()) { var6.put(var8.getKey(), var6, var8.getValue() == null ? null : Context.toObject(var8.getValue(), var6)); } } try { Object var9 = var5.evaluateString(var6, var1, ""<cmd>"", 1, null); if (var9 instanceof Undefined) { return null; } var9 = toJavaObject(var9); if (var9 instanceof Date && aludraConfig.getScriptSecondsOffset() != 0) { var9 = new Date(((Date) var9).getTime() + aludraConfig.getScriptSecondsOffset() * 1000); } var9 = format(var9, var2, var3); return var9.toString(); } catch (RhinoException e) { throw new AutomationException(""Cannot Func1 test data var1 '"" + var1 + ""'"", e); } } finally { Context.exit(); } } "	0	0	0	1	1	0
"private List<TableColumn> Func1() { List<TableColumn> var1 = new ArrayList<TableColumn>(); var1.add(new TableColumn() .key(0).name(""Lower Bound"").type(""lowerBound"") .description(""The lower bound of the grouping (value range)."")); var1.add(new TableColumn() .key(1).name(""Upper Bound"").type(""upperBound"") .description(""The upper bound of the grouping (value range)."")); var1.add(new TableColumn() .key(2).name(""Area"").units(""m^2"").type(""area"") .portionOf(""rawArea"") .description(""The area of land that matches the filters."")); var1.add(new TableColumn() .key(3).name(""Unfiltered Area"").units(""m^2"") .type(""area"") .description(""The area of available land."")); return var1; } "	0	0	1	0	0	0
private static String Func1(String var1) { if (proxyMap != null && proxyMap.containsKey(var1)) { return proxyMap.get(var1); } return var1; } 	0	0	0	1	0	0
"@Test public void Func1() throws JavaModelException{ ClientPreferences var1 = Mockito.mock(ClientPreferences.class); Mockito.when(preferenceManager.getClientPreferences()).thenReturn(var1); Mockito.when(var1.isCompletionSnippetsSupported()).thenReturn(Boolean.TRUE); Mockito.when(var1.isSignatureHelpSupported()).thenReturn(Boolean.TRUE); ICompilationUnit var2 = getWorkingCopy( ""src/java/Foo.java"", ""public class Foo {\n""+ ""	void foo() {\n""+ ""System.out.print(\""Hello\"");\n"" + ""System.out.println(\"" World!\"");\n""+ ""HashMap<String, String> map = new HashMap<>();\n""+ ""map.pu\n"" + ""	}\n""+ ""}\n""); int[] var3 = findCompletionLocation(var2, ""map.pu""); CompletionList var4 = server.completion(JsonMessageHelper.getParams(createCompletionRequest(var2, var3[0], var3[1]))).join().getRight(); assertNotNull(var4); CompletionItem var5 = var4.getItems().stream() .filter( item->  item.getLabel().matches(""put\\(String \\w+, String \\w+\\) : String"")) .findFirst().orElse(null); assertNotNull(var5); assertNull(var5.getInsertText()); assertEquals(CompletionItemKind.Function, var5.getKind()); assertTrue(""Unexpected sortText:""+ var5.getSortText() , var5.getSortText().endsWith(""abj"")); assertNull(var5.getTextEdit()); CompletionItem var6 = server.resolveCompletionItem(var5).join(); assertNotNull(var6.getTextEdit()); try { assertTextEdit(5, 4, 6, ""put(${1:key}, ${2:value})"", var6.getTextEdit()); } catch (ComparisonFailure e) { assertTextEdit(5, 4, 6, ""put(${1:arg1}, ${2:arg2})"", var6.getTextEdit()); } assertNotNull(var6.getAdditionalTextEdits()); List<TextEdit> var7 = var6.getAdditionalTextEdits(); assertEquals(3, var7.size()); } "	0	0	0	0	0	1
public RemainingNumberOfHoldiay Func1() { return remainingNumberOfHolidays; } 	0	0	1	0	0	0
"@Override public String Func1() { String var1 = ""\u00a74""; String var2 = LanguageUtility.getLocal(""gui.misc.idle""); if (this.laucherBase == null) { var2 = LanguageUtility.getLocal(""gui.launcherScreen.statusMissing""); } else if (!checkExtract()) { var2 = LanguageUtility.getLocal(""gui.launcherScreen.statusNoPower""); } else if (this.laucherBase.getStackInSlot(0) == null && !hasMissile) { var2 = LanguageUtility.getLocal(""gui.launcherScreen.statusEmpty""); } else if (this.getTarget() == null) { var2 = LanguageUtility.getLocal(""gui.launcherScreen.statusInvalid""); } else if (this.laucherBase.isTargetTooClose(this.getTarget())) { var2 = LanguageUtility.getLocal(""gui.launcherScreen.statusClose""); } else if (this.laucherBase.isTargetTooFar(this.getTarget())) { var2 = LanguageUtility.getLocal(""gui.launcherScreen.statusFar""); } else { var1 = ""\u00a72""; var2 = LanguageUtility.getLocal(""gui.launcherScreen.statusReady""); } return var1 + var2; } "	0	0	0	0	0	1
"@Test(dataProvider = ""getIndexesOfRelevantAllelesData"") public void Func1(final int var1, final List<Allele> var2) { final List<Allele> var3 = new ArrayList<>(3); var3.add(var2.get(0)); var3.add(GATKVariantContextUtils.NON_REF_SYMBOLIC_ALLELE); if ( var1 > 0 ) var3.add(var2.get(var1)); final int[] var4 = GATKVariantContextUtils.getIndexesOfRelevantAlleles(var3, var2); Assert.assertEquals(var4.length, var2.size()); for ( int var5 = 0; var5 < var2.size(); var5++ ) { if ( var5 == 0 ) Assert.assertEquals(var4[var5], 0);    // ref should always match else if ( var5 == var1 ) Assert.assertEquals(var4[var5], 2);    // allele else Assert.assertEquals(var4[var5], 1);    // <ALT> } } "	1	0	1	1	1	0
@Subscribe public void Func1(ActionEvent var1) { switch (var1.getActionId()) { case R.id.action_clear: { realm.executeTransaction(tRealm -> srcList.getListItems().clear()); break; } case R.id.action_open_query_builder: { QueryBuilderActivity.start(this, smartListRuq); break; } case R.id.action_rename_list: case R.id.action_rename_smart_list: { ActionHelper.renameList(realm, srcList, (String) var1.getData()); setTitle((String) var1.getData()); getIntent().putExtra(LIST_NAME, (String) var1.getData()); break; } case R.id.action_convert_to_normal_list: { if (smartListRuq != null) { srcList.convertToNormalListUsingRuq(realm, smartListRuq); smartListRuq = null; invalidateOptionsMenu(); updateUi(); needsPosUpdate = true; } break; } case R.id.action_delete_list: case R.id.action_delete_smart_list: { ActionHelper.deleteList(realm, srcList); finish(); break; } case R.id.action_rate: { ActionHelper.rateBooks(realm, getSelectedBooks(), (Integer) var1.getData()); break; } case R.id.action_add_to_list: { break; } case R.id.action_re_import: { ActionHelper.reImportBooks(getSelectedBooks(), this); return; } case R.id.action_remove: { srcList.removeBooks(getSelectedBooks()); break; } case R.id.action_delete: { ActionHelper.deleteBooks(getSelectedBooks(), (boolean) var1.getData()); break; } } if (actionMode != null) actionMode.finish(); } 	0	0	0	0	0	1
private static Collection<Unit> Func1(final IntegerMap<UnitType> var1, final Territory var2) { final Iterator<UnitType> var3 = var1.keySet().iterator(); final Collection<Unit> var4 = new ArrayList<Unit>(var1.totalValues()); while (var3.hasNext()) { final UnitType var5 = var3.next(); var4.addAll(var2.Func1().Func1(var5, var1.getInt(var5))); } return var4; } 	0	0	0	1	0	0
"private void Func1() { MapXmlHelper.clearGamePlaySequence(); MapXmlHelper.getGamePlaySequenceMap().put(""bid"", Arrays.asList(""BidPurchaseDelegate"", ""Bid Purchase"")); MapXmlHelper.getGamePlaySequenceMap().put(""placeBid"", Arrays.asList(""BidPlaceDelegate"", ""Bid Placement"")); MapXmlHelper.getGamePlaySequenceMap().put(""tech"", Arrays.asList(""TechnologyDelegate"", ""Research Technology"")); MapXmlHelper.getGamePlaySequenceMap().put(""tech_Activation"", Arrays.asList(""TechActivationDelegate"", ""Activate Technology"")); MapXmlHelper.getGamePlaySequenceMap().put(""purchase"", Arrays.asList(""PurchaseDelegate"", ""Purchase Units"")); MapXmlHelper.getGamePlaySequenceMap().put(""move"", Arrays.asList(""MoveDelegate"", ""Combat Move"")); MapXmlHelper.getGamePlaySequenceMap().put(""battle"", Arrays.asList(""BattleDelegate"", ""Combat"")); MapXmlHelper.getGamePlaySequenceMap().put(""place"", Arrays.asList(""PlaceDelegate"", ""Place Units"")); MapXmlHelper.getGamePlaySequenceMap().put(""endTurn"", Arrays.asList(""BidPurchaseDelegate"", ""Turn Complete"")); } "	0	0	0	0	0	1
private boolean Func1(String var1) { return var1 != null && var1.length() > 0; } 	0	0	1	0	1	0
private void Func1(Queue<Task> var1, List<Task> var2) { Calendar var3 = new GregorianCalendar(); for (Task var4 : var2) { GregorianCalendar var5 = var4.getReminder(); if (!var4.isDone() && var5 != null && var5.before(var3)) { var1.add(var4); } } } 	0	0	1	0	0	0
"@SuppressWarnings(""StatementWithEmptyBody"") @Override public boolean Func1(MenuItem var1) { int var2 = var1.getItemId(); Intent var3 = null; switch (var2) { case R.var2.nav_home: var3 = new Intent(getApplicationContext(), MainActivity.class); break; case R.var2.nav_rewards: var3 = new Intent(getApplicationContext(), RewardsActivity.class); break; case R.var2.nav_appliances: var3 = new Intent(getApplicationContext(), AppliancesActivity.class); break; case R.var2.nav_profile: if(UserInfo.getInstance().getIsLoggedIn() || UserInfo.getInstance().isGoogleLoggedIn()) { var3 = new Intent(getApplicationContext(), ProfileActivity.class); } else { var3 = new Intent(getApplicationContext(), LogInActivity.class); } break; case R.var2.nav_reminder: var3 = new Intent(getApplicationContext(), ReminderActivity.class); break; case R.var2.nav_detection: var3 = new Intent(getApplicationContext(), DetectionBaseActivity.class); break; case R.var2.nav_settings: var3 = new Intent(getApplicationContext(), SettingsActivity.class); break; case R.var2.nav_header_main_logout: if(UserInfo.getInstance().getIsLoggedIn()) { UserInfo.getInstance().logOutUser(ProfileActivity.this); } else if(UserInfo.getInstance().isGoogleLoggedIn()){ UserInfo.getInstance().signOutWithGoogle(); } break; default: break; } if (var3 != null){ startActivity(var3); overridePendingTransition(0, 0); } DrawerLayout var4 = (DrawerLayout) findViewById(R.var2.drawer_layout); var4.closeDrawer(GravityCompat.START); return true; } "	0	0	1	0	0	0
private RoomNotification Func1(AlertCondition var1, AlertCondition.CheckResult var2) { final String var3 = this.buildBody(var1, var2); return new RoomNotification(var3, color, notify); } 	0	0	0	0	0	1
private String Func1(AlertCondition var1, AlertCondition.CheckResult var2) { String var3; if (invalidTemplate(this.messageTemplate)) { var3 = FormattedEmailAlertSender.bodyTemplate; } else { var3 = this.messageTemplate; } Map<String, Object> var4 = this.getModel(var1, var2); return this.engine.transform(var3, var4); } 	0	0	0	0	0	1
"private Map<String, Object> Func1(AlertCondition var1, AlertCondition.CheckResult var2) { Stream var3 = var1.getStream(); List<Message> var4 = new ArrayList<>(); for (MessageSummary var5 : var2.getMatchingMessages()) { var4.add(var5.getRawMessage()); } HashMap<String, Object> var6 = new HashMap<>(); var6.put(""var3"", var3); var6.put(""check_result"", var2); if (graylogBaseUrl != null) { var6.put(""stream_url"", buildStreamDetailsURL(graylogBaseUrl, var2, var3)); } var6.put(""backlog"", var4); var6.put(""backlog_size"", var4.size()); return var6; } "	0	0	0	0	0	1
"@FXML private void Func1(ActionEvent var1) { String var2 = ((Button) var1.getSource()).getText(); String[] var3 = {""0"", ""1"", ""2"",  ""3"",  ""4"", ""5"", ""6"", ""7"", ""8"", ""9""}; String[] var4 = {""/"", ""+"", ""-"", ""*""}; if (var2.equals(""=EGGYELLŐ="") && number2 != """"){ String var5 = String.valueOf(handleCalculation(number1, number2, operator)); TextField.setText(var5); number1 = var5; number2 = """"; isDecimalNum1 = true; isDecimalNum2 = true; } if (var2.equals(""C"") ){ number1 = """"; number2 = """"; operator = """"; TextField.setText(""""); isDecimalNum1 = true; isDecimalNum2 = true; } if (Arrays.asList(var4).contains(var2) && !number1.equals("""") ){ operator = var2; TextField.setText(number1 + operator); } if (Arrays.asList(var3).contains(var2) && operator != """" ){ number2 += var2; TextField.setText(number1 + operator + number2); } if (Arrays.asList(var3).contains(var2) && operator == """" ){ number1 += var2; TextField.setText(number1); } if (var2.equals(""."") && isDecimalNum1 == true && operator == """" ) { number1 += var2; isDecimalNum1 = false; TextField.setText(number1); } if (var2.equals(""."") && isDecimalNum2 == true && operator != """" ) { number2 += var2; isDecimalNum2 = false; TextField.setText(number1 + operator + number2); } } "	0	0	1	1	1	0
public void Func1(boolean var1) { if (mDecibelSensorCardPresenter == null) { return; } if (var1) { startObserving(DecibelSensor.ID, mDecibelSensorCardPresenter); } else { mDecibelSensorCardPresenter.setConnectingUI(DecibelSensor.ID, true, getActivity().getApplicationContext()); } mDecibelSensorCardPresenter = null; updateAvailableSensors(); } 	0	0	0	0	0	1
@Test public void Func1() throws Exception { final AtomicReference<Exception> var1 = new AtomicReference<Exception>(); LocationsFilter var2 = new LocationsFilter() { private static final long var3 = -5625121945234751178L; @Override public List<Location> Func2(List<Location> var4, Object var5) { var1.set(new Exception()); return var4; } }; startable = app.addChild(EntitySpec.create(BasicStartable.class) .configure(BasicStartable.LOCATIONS_FILTER, var2)); BasicEntity var6 = startable.addChild(EntitySpec.create(BasicEntity.class)); app.start(ImmutableList.of(loc1, loc2)); assertEqualsIgnoringOrder(var6.getLocations(), ImmutableSet.of()); assertNull(var1.get()); } 	0	0	1	1	0	0
public HashMap<String, List<String>> Func1() { return deathevents; } 	0	0	0	0	0	1
"private void Func1(Bubble var1){ Collection<Bubble> var2; for(Node var3: var1.getEndNode().getLinks()) { var2 = bubbles.stream().filter(x -> //x.getId() == var3.getContainerId() && x.getStartNode().getId() == var1.getEndNode().getId()).collect(Collectors.toSet()); if (var2.size() > 0) var1.getLinks().addAll(var2); else var1.getLinks().add(var3); } System.out.println(""Id: "" + var1.getId() + "" ForwardLinks:"" + linksToString(var1.getLinks())); } "	0	0	0	0	0	1
public static void Func1(XWPFDocument var1, String var2, String Func1){ for (XWPFHeader var4 : var1.getHeaderList()) replaceAllBodyElements(var4.getBodyElements(), var2, Func1); replaceAllBodyElements(var1.getBodyElements(), var2, Func1); } 	0	0	0	0	0	1
"public static Properties Func1(Path var1) { Properties var2 = new Properties(); try { var2.load(new FileInputStream(var1.toFile())); } catch (IOException ioe) { Logger.getGlobal().log(Level.CONFIG, ""Cannot opern properties file!"", ioe); } return var2; } "	0	0	1	0	1	0
public boolean Func1() { return this.parameterGenerationError == null && this.responseError == null; } 	0	0	0	0	0	1
"private HttpURLConnection Func1(boolean var1, String var2) throws IOException { String var3 = (var1) ? ""https"" : ""http""; URL var4 = new URL(new StringBuilder(var3).append(""://"").append(var2).toString()); HttpURLConnection var5 = (HttpURLConnection) var4.openConnection(); var5.setRequestProperty(""Accept-Language"", HttpsProvisioningUtils.getUserLanguage()); return var5; } "	1	1	0	0	1	0
public static void Func1(ITypeReader<?> var1) { serializers.put(var1.getType(), var1); idents.put(var1.getClass().getSimpleName(), var1.getClass()); } 	1	0	1	1	1	0
protected WindowManager.LayoutParams Func1() { return(new WindowManager.LayoutParams( WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT, 0, 0, WindowManager.LayoutParams.TYPE_TOAST, 0, PixelFormat.OPAQUE)); } 	0	0	0	0	0	1
private void Func1(Boolean var1){ if(var1){ ArgumentCaptor<UpdateFunctionConfigurationRequest> var2 = ArgumentCaptor.forClass(UpdateFunctionConfigurationRequest.class); verify(awsLambdaClient, times(1)).updateFunctionConfiguration(var2.capture()); UpdateFunctionConfigurationRequest var3 = new UpdateFunctionConfigurationRequest() .withDescription(description) .withFunctionName(functionName) .withHandler(handler) .withMemorySize(memory) .withRole(role) .withRuntime(runtime) .withVpcConfig(subnets.size() > 0 || securityGroups.size() > 0 ? new VpcConfig().withSubnetIds(subnets).withSecurityGroupIds(securityGroups) : null) .withTimeout(timeout) .withKMSKeyArn(kmsArn) .withEnvironment(new Environment().withVariables(environment)) .withDeadLetterConfig(new DeadLetterConfig().withTargetArn(deadLetterQueueArn)); assertEquals(var3, var2.getValue()); } else { verify(awsLambdaClient, never()).updateFunctionConfiguration(any(UpdateFunctionConfigurationRequest.class)); } } 	0	0	1	0	0	0
private Object Func1(Object var1, Object var2, Class<?> var3, FieldMap var4, Object var5) { Class<?> var6 = var2 != null ? var2.getClass() : var4.getSrcFieldType(var1.getClass()); Class<?> var7 = MappingUtils.determineCustomConverter(var4, converterByDestTypeCache, var4.getClassMap() .getCustomConverters(), var6, var3); if (var7 != null) { return mapUsingCustomConverter(var7, var6, var2, var3, var5, var4, false); } if (var2 == null) { return null; } String var8 = var4.getSrcFieldName(); String var9 = var4.getDestFieldName(); if (!(DozerConstants.SELF_KEYWORD.equals(var8) && DozerConstants.SELF_KEYWORD.equals(var9))) { Object var10 = mappedFields.getMappedValue(var2, var3); if (var10 != null) { return var10; } } if (var4.isCopyByReference()) { return var2; } boolean var11 = MappingUtils.isSupportedMap(var6); boolean var12 = MappingUtils.isSupportedMap(var3); if (var11 && var12) { return mapMap(var1, (Map<?, ?>) var2, var4, var5); } if (var4 instanceof MapFieldMap && var3.equals(Object.class)) { var3 = var4.getDestHintContainer() != null ? var4.getDestHintContainer().getHint() : var6; } if (primitiveConverter.accepts(var6) || primitiveConverter.accepts(var3)) { if (var4.getDestHintContainer() != null) { var3 = var4.getDestHintContainer().getHint(); } Object var13 = var2; if (var4.isTrimStrings() && var2.getClass().equals(String.class)) { var13 = ((String) var2).trim(); } DateFormatContainer var14 = new DateFormatContainer(var4.getDateFormat()); if (var4 instanceof MapFieldMap && !primitiveConverter.accepts(var3)) { return primitiveConverter.convert(var13, var13.getClass(), var14); } else { return primitiveConverter.convert(var13, var3, var14); } } if (MappingUtils.isSupportedCollection(var6) && (MappingUtils.isSupportedCollection(var3))) { return mapCollection(var1, var2, var4, var5); } if (MappingUtils.isEnumType(var6, var3)) { return mapEnum((Enum) var2, (Class<Enum>) var3); } if (var4.getDestDeepIndexHintContainer() != null) { var3 = var4.getDestDeepIndexHintContainer().getHint(); } return mapCustomObject(var4, var5, var3, var2); } 	0	0	0	0	0	1
"public void Func1() { ErrorConnectingFermatNetworkDialog var1 = new ErrorConnectingFermatNetworkDialog(getActivity(), intraUserSubAppSession, null); var1.setDescription(""You are not connected  /n to the Fermat Network""); var1.setRightButton(""Connect"", new View.OnClickListener() { @Override public void Func2(View var2) { } }); var1.setLeftButton(""Cancel"", new View.OnClickListener() { @Override public void Func2(View var2) { } }); var1.show(); } "	0	0	1	1	1	0
"private void Func1(final Event var1, int var2, final int var3, long var4) throws IOException { try(DeadLetterQueueWriter writeManager = new DeadLetterQueueWriter(dir, 10000000, 10000000)) { for (int var5 = var2; var5 <= var2 + var3; var5++) { DLQEntry var6 = new DLQEntry(var1, ""foo"", ""bar"", String.valueOf(var5), new Timestamp(var4++)); writeManager.writeEntry(var6); } } } "	0	0	0	0	0	1
public PAImgCprs Func1(@NotNull int var1, @NotNull int var2) { this.var1 = var1; this.var2 = var2; return this; } 	0	0	1	0	0	0
@Override public ASInputStream Func1(long var1, long var2) throws IOException { if (var1 > 0 && var1 < this.bufferSize && var1 + var2 < this.bufferSize) { return new ASMemoryInStream(this, (int) var1, (int) var2); } else { throw new IOException(); } } 	1	1	1	1	0	0
private static TemplateProvider Func1() { PropertyScanner var1 = new LivedocPropertyScannerWrapper(new FieldPropertyScanner()); return new TemplateProvider(var1); } 	1	0	0	0	1	0
"public boolean Func1(String var1) { if (super.Func1(var1)) return true; int var2 = var1.indexOf('['); int var3 = var1.indexOf(']'); int var4 = var1.indexOf('.'); if (var2 > 0 && var3 <= var2 || var4 > 0 && var4 == var1.length() - 1) return false; if (var2 > 0 && (var4 < 0 || var4 == var3 + 1)) { String var5 = var1.substring(0, var2); String var6 = var1.substring(var2 + 1, var3); Object var7 = super.Func1(var5) ? var7 = super.getValue(var5) : null; if (var7.getClass().isArray()) { if (!StringUtils.isNumeric(var6)) return false; int var8 = Integer.valueOf(var6); Object[] var9 = (Object[]) var7; if (var8 < 0 || var8 >= var9.length) return false; var7 = var9[var8]; } else if (var7 instanceof Collection) { if (!StringUtils.isNumeric(var6)) return false; int var8 = Integer.valueOf(var6); Collection<?> var10 = (Collection<?>) var7; if (var8 < 0 || var8 >= var10.size()) return false; Iterator<?> var11 = var10.iterator(); int var12 = 0; while (var11.hasNext()) { var7 = var11.next(); if (var12 == var8) break; var12++; } } else if (var7 instanceof Map) { if (!(var6.startsWith(""'"") && var6.endsWith(""'"") || var6.startsWith(""\"""") && var6.endsWith(""\""""))) return false; var6 = var6.substring(1, var6.length() - 1); Map<?, ?> var13 = ((Map<?, ?>) var7); if (!var13.containsKey(var6)) return false; var7 = var13.get(var6); } else { return false; } if (var3 == var1.length() - 1) return true; if (var4 == var3 + 1) { if (var7 == null) return false; EntityBeanPropertySqlParameterSource var14 = new EntityBeanPropertySqlParameterSource(var7); return var14.Func1(var1.substring(var4 + 1)); } } if (var4 > 0) { String var5 = var1.substring(0, var4); if (super.Func1(var5)) { Object var7 = getValue(var5); EntityBeanPropertySqlParameterSource var14 = new EntityBeanPropertySqlParameterSource(var7); return var14.Func1(var1.substring(var4 + 1)); } } return false; } "	0	0	1	1	0	0
"private void Func1(final Document var1, final Entity var2, final Locale var3) throws DocumentException { List<String> var4 = new ArrayList<String>(); var4.add(getTranslationService().translate(""orders.order.number.label"", var3)); var4.add(getTranslationService().translate(""orders.order.name.label"", var3)); var4.add(getTranslationService().translate(""orders.order.var7.label"", var3)); var4.add(getTranslationService().translate(""genealogiesForComponents.genealogyForComponent.report.productBatch"", var3)); Paragraph var5 = new Paragraph(new Phrase(getTranslationService().translate( ""genealogiesForComponents.genealogyForComponent.report.paragrah.var7"", var3), PdfUtil.getArialBold11Light())); var5.setSpacingBefore(20); var1.add(var5); PdfPTable var6 = PdfUtil.createPanelTable(3); var6.setSpacingBefore(7); Entity var7 = var2.getBelongsToField(""productInComponent"").getBelongsToField(""productInComponent"") .getBelongsToField(""var7""); PdfUtil.addTableCellAsTable(var6, getTranslationService().translate(""basic.var7.number.label"", var3), var7.getField(""number""), """", PdfUtil.getArialBold10Dark(), PdfUtil.getArialRegular10Dark()); PdfUtil.addTableCellAsTable(var6, getTranslationService().translate(""basic.var7.name.label"", var3), var7.getField(""name""), """", PdfUtil.getArialBold10Dark(), PdfUtil.getArialRegular10Dark()); PdfUtil.addTableCellAsTable(var6, getTranslationService().translate(""genealogiesForComponents.productInBatch.batch.label"", var3), var2.getField(""batch""), """", PdfUtil.getArialBold10Dark(), PdfUtil.getArialRegular10Dark()); var1.add(var6); Paragraph var8 = new Paragraph(new Phrase(getTranslationService().translate( ""genealogiesForComponents.genealogyForComponent.report.paragrah.order"", var3), PdfUtil.getArialBold11Light())); var8.setSpacingBefore(20); var1.add(var8); addOrderSeries(var1, var2, var4); } "	0	0	0	0	0	1
"public void Func1(final ViewDefinitionState var1, final ComponentState var2, final String[] var3) { Entity var4 = ((FormComponent) var1.getComponentByReference(""form"")).getEntity(); var4 = var4.getDataDefinition().get(var4.getId()); applyCostNormsFromGivenSource(var1, var4.getBelongsToField(""technologyOperationComponent""), FIELDS_TECHNOLOGY); } "	0	0	0	0	0	1
"public CommandOperation Func1(int var1) throws OperationManagementDAOException { PreparedStatement var2 = null; ResultSet var3 = null; CommandOperation var4 = null; try { Connection var5 = OperationManagementDAOFactory.getConnection(); String var6 = ""SELECT OPERATION_ID, ENABLED FROM DM_COMMAND_OPERATION WHERE OPERATION_ID = ?""; var2 = var5.prepareStatement(var6); var2.setInt(1, var1); var3 = var2.executeQuery(); if (var3.next()) { var4 = new CommandOperation(); var4.setEnabled(var3.getInt(""ENABLED"") != 0); } } catch (SQLException e) { throw new OperationManagementDAOException(""SQL Error occurred while retrieving the command operation "" + ""object available for the var1 '"" + var1, e); } finally { OperationManagementDAOUtil.cleanupResources(var2, var3); } return var4; } "	0	0	1	0	1	0
private JSONObject Func1() { return mData; } 	0	0	0	0	0	1
@Override public void Func1(World var1, IBlockState var2, int var3, int var4, int var5, StructureBoundingBox var6) { super.Func1(var1, var2, var3, var4, var5, var6); } 	0	0	0	0	0	1
"@RequestMapping( path = ""/var2/{var1}/data"", method = RequestMethod.GET ) public Iterable<Map<String, Object>> Func1(@PathVariable String var1) { final Dataset var2 = (Dataset) bindings.get(var1); DataStructure var3 = var2.getDataStructure(); return () -> { return var2.Func1().var4(dataPoints -> { Map<String, Object> var4 = Maps.newHashMap(); for (Map.Entry<Component, VTLObject> var5 : var3.asMap(dataPoints).entrySet()) { var4.put(var3.getName(var5.getKey()), var5.getValue()); } return var4; }).iterator(); }; } "	0	0	1	0	1	0
"public void Func1() { Euristic var1 = var1(getRulesList6(), ""тщательно мой""); assertNotNull(var1); } "	0	0	0	0	0	1
"public void Func1() { Euristic var1 = var1(getRulesList27(), ""к тем кто""); assertNotNull(var1); } "	0	0	0	0	0	1
"public void Func1() { Euristic var1 = var1(getRulesList13(), ""солнце росло""); assertNotNull(var1); } "	0	0	0	0	0	1
"public void Func1() { Euristic var1 = var1(getRulesList30(), ""для лису""); assertNotNull(var1); } "	0	0	0	0	0	1
"public void Func1() { Euristic var1 = var1(getRulesList32(), ""светлей быстро""); assertNotNull(var1); } "	0	0	0	0	0	1
"public void Func1() { Euristic var1 = var1(getRulesList17(), ""надо мною""); assertNotNull(var1); } "	0	0	0	0	0	1
"public void Func1() { Euristic var1 = var1(getRulesList24(), ""воя надрывно""); assertNotNull(var1); } "	0	0	0	0	0	1
"public void Func1() { Euristic var1 = var1(getRulesList35(), ""хотя пошел""); assertNotNull(var1); } "	0	0	0	0	0	1
"public void Func1() { Euristic var1 = var1(getRulesList14(), ""показал издали""); assertNotNull(var1); } "	0	0	0	0	0	1
"public void Func1() { Euristic var1 = var1(getRulesList31(), ""при лису""); assertNotNull(var1); } "	0	0	0	0	0	1
"public void Func1() { Euristic var1 = var1(getRulesList10(), ""этой жиже""); assertNotNull(var1); } "	0	0	0	0	0	1
"public void Func1() { Euristic var1 = var1(getRulesList33(), ""кругом природа""); assertNotNull(var1); } "	0	0	0	0	0	1
protected void Func1(BillView var1, BillView var2, SpotCheckObservation<BaseBillId> var3) { String var4 = serialize(var1.getCalendars(), true); String var5 = serialize(var1.getCalendars(), true); if (!var4.equals(var5)) var3.addMismatch(new SpotCheckMismatch(CALENDAR_OPENLEG_DEV, var4, var5)); } 	1	0	1	0	1	0
protected void Func1(BillView var1, BillView var2, SpotCheckObservation<BaseBillId> var3) { String var4 = serialize(var1.getAmendmentVersions(), true); String var5 = serialize(var1.getAmendmentVersions(), true); if (!var4.equals(var5)) var3.addMismatch(new SpotCheckMismatch(BILL_AMENDMENT_VERSION_OPENLEG_DEV, var4, var5)); } 	1	0	1	0	1	0
protected void Func1(BillView var1, BillView var2, SpotCheckObservation<BaseBillId> var3) { String var4 = serialize(var1.getApprovalMessage(), true); String var5 = serialize(var1.getApprovalMessage(), true); if (!var4.equals(var5)) var3.addMismatch(new SpotCheckMismatch(BILL_APPROVE_MESSAGE_OPENLEG_DEV, var4, var5)); } 	1	0	1	1	1	0
"private void Func1() { final Button var1 = (Button) getActivity().findViewById(R.id.button_2); var1.setText(""Close""); var1.setOnClickListener(new View.OnClickListener() { public void Func2(View var2) { getActivity().finish(); } }); } "	0	0	1	1	1	0
"@Test public void Func1() throws IOException { List<Group> var1 = new ArrayList<Group>(); var1.add(TargetIO.loadTarget(new File(""var1"" + File.separator + ""SimpleBullseye_five_small.target"")).get()); RandomShoot var2 = new RandomShoot(var1, rng); assertEquals(5, var2.getSubtargets().size()); assertTrue(var2.getSubtargets().contains(""1"")); assertTrue(var2.getSubtargets().contains(""2"")); assertTrue(var2.getSubtargets().contains(""3"")); assertTrue(var2.getSubtargets().contains(""4"")); assertTrue(var2.getSubtargets().contains(""5"")); String var3 = var2.getSubtargets().get(var2.getCurrentSubtargets().peek()); assertEquals(""sounds/voice/shootoff-shoot.wav"", stringOut.toString(""UTF-8"").replace(File.separatorChar, '/').split(String.format(""%n"", """"))[0]); stringOut.reset(); var2.shotListener(new Shot(Color.GREEN, 0, 0, 0, 2), Optional.empty()); assertEquals(String.format(""sounds/voice/shootoff-shoot.wav%nsounds/voice/shootoff-%s.wav%n"", var3), stringOut.toString(""UTF-8"").replace(File.separatorChar, '/')); stringOut.reset(); TargetRegion var4 = null; for (Node var5 : var1.get(0).getChildren()) { var4 = (TargetRegion)var5; if (var4.getTag(""subtarget"").equals(var3)) break; } int var6 = var2.getCurrentSubtargets().size(); var2.shotListener(new Shot(Color.GREEN, 0, 0, 0, 2), Optional.of(var4)); if (var6 > 1) { assertEquals(var6 - 1, var2.getCurrentSubtargets().size()); } else { String var7 = var2.getSubtargets().get(var2.getCurrentSubtargets().peek()); assertTrue(stringOut.toString(""UTF-8"").startsWith(""shoot subtarget "" + var7)); stringOut.reset(); } } "	0	0	1	1	0	0
"@Override public void Func1(final InputStream var1, final String var2, final boolean var3) throws DomainIdNullException, DomainAlreadyExistsException, DomainStorageException { logger.debug(""Func1(var1, "" + var2 + "", "" + var3 + "")""); if (null == var1) { throw new IllegalArgumentException(); } if (StringUtils.isEmpty(var2)) { throw new DomainIdNullException(messages.getErrorString(""PentahoMetadataDomainRepository.ERROR_0001_DOMAIN_ID_NULL"")); } final RepositoryFile var4 = getMetadataRepositoryFile(var2); if (!var3 && var4 != null) { final String var5 = messages.getErrorString(""PentahoMetadataDomainRepository.ERROR_0002_DOMAIN_ALREADY_EXISTS"", var2); logger.error(var5); throw new DomainAlreadyExistsException(var5); } InputStream var6 = null; String var7 = null; try { BufferedReader var8 = new BufferedReader(new InputStreamReader(var1)); StringBuilder var9 = new StringBuilder(); while ((var7 = var8.readLine()) != null) { var9.append(var7); } var1.close(); var7 = var9.toString(); Domain var10 = xmiParser.parseXmi(new java.io.ByteArrayInputStream(var7.getBytes())); var6 = new java.io.ByteArrayInputStream(var7.getBytes(""UTF-8"")); } catch (Exception ex){ logger.error(ex.getMessage()); java.io.ByteArrayOutputStream var11 = new ByteArrayOutputStream(); ex.printStackTrace(new java.io.PrintStream(var11)); throw new DomainStorageException(var11.toString(), ex); } final SimpleRepositoryFileData var12 = new SimpleRepositoryFileData(var6, DEFAULT_ENCODING, DOMAIN_MIME_TYPE); if (var4 == null) { final RepositoryFile var13 = createUniqueFile(var2, null, var12); } else { repository.updateFile(var4, var12, null); } flushDomains(); } "	1	0	0	0	1	0
@Subscribe public void Func1(RefreshUiEvent var1) { setVisibility(true); if (searchText.length() == 0) { tracksListAdapter.refresh(); } } 	1	0	1	0	0	0
"@Override protected CompiledMethod Func1(VmMethod var1, NativeStream var2, int var3, boolean var4) { final CompiledMethod var5 = new CompiledMethod(var3); try { if (var1.isNative()) { Object var6 = new Label(var1.getMangledName()); var5.setCodeStart(var2.getObjectRef(var6)); } else { EntryPoints var7 = getEntryPoints(); X86CompilerHelper var8 = new X86CompilerHelper((X86Assembler) var2, null, var7, var4); var8.setMethod(var1); X86StackFrame var9 = new X86StackFrame((X86Assembler) var2, var8, var1, var7, var5); TypeSizeInfo var10 = getTypeSizeInfo(); VmByteCode var11 = var1.getBytecode(); IRControlFlowGraph var12 = new IRControlFlowGraph(var11); IRGenerator var13 = new IRGenerator(var12, var10); BytecodeParser.parse(var11, var13); initMethodArguments(var1, var9, var10, var13); var12.constructSSA(); var12.optimize(); var12.removeUnusedVars(); var12.deconstrucSSA(); var12.removeDefUseChains(); var12.fixupAddresses(); X86CodeGenerator var14 = new X86CodeGenerator(var1, (X86Assembler) var2, var11.getLength(), var10, var9); List<Variable<?>> var15 = var12.computeLiveVariables(); LiveRange<?>[] var16 = getLiveRanges(var15); LinearScanAllocator<?> var17 = allocate(var16); generateCode(var14, var12, var13, var17); } } catch (RuntimeException x) { System.err.println(""ERROR in compilation of "" + var1.getFullName()); throw x; } catch (Error x) { System.err.println(""ERROR in compilation of "" + var1.getFullName()); throw x; } return var5; } "	0	0	0	0	0	1
public static void Func1() { for(int var1 = 0; var1 < 27; var1++) slots.add(new Integer(var1)); } 	0	0	0	1	1	0
"@SuppressWarnings(""static-access"") public static void Func1(String[] var1) throws IOException { GenericOptionsParser var2 = new GenericOptionsParser(var1); String[] var3 = var2.getRemainingArgs(); Option var4 = OptionBuilder.hasArg().create(""conffile""); Option var5 = OptionBuilder.withLongOpt(""var5"").create('h'); Options var6 = new Options().addOption(var4).addOption(var5); CommandLineParser var7 = new GnuParser(); CommandLine var8 = null; try { var8 = var7.parse(var6, var3); } catch (MissingArgumentException e) { terminate(1, ""No argument specified for -conffile option""); } catch (ParseException e) { terminate(1, USAGE); } if (var8 == null) { terminate(1, ""Failed to parse options""); } if (var8.hasOption('h')) { terminate(0, USAGE); } List<File> var9 = new ArrayList<File>(); if (var8.hasOption(""conffile"")) { String[] var10 = var8.getOptionValues(""conffile""); for (String var11 : var10) { File var12 = new File(var11); if (var12.isFile()) { var9.add(var12); } else if (var12.isDirectory()) { for (File var13 : listFiles(var12)) { var9.add(var13); } } else { terminate(1, var12.getAbsolutePath() + "" is neither a var13 nor directory""); } } } else { String var14 = System.getenv(HADOOP_CONF_DIR); if (var14 == null) { terminate(1, HADOOP_CONF_DIR + "" does not defined""); } File var15 = new File(var14); if (!var15.isDirectory()) { terminate(1, HADOOP_CONF_DIR + "" is not a directory""); } var9 = Arrays.asList(listFiles(var15)); } if (var9.isEmpty()) { terminate(1, ""No input var13 to validate""); } boolean var16 = true; for (File var13 : var9) { String var17 = var13.getAbsolutePath(); List<String> var18 = checkConf(new FileInputStream(var13)); if (var18.isEmpty()) { System.out.println(var17 + "": valid""); } else { var16 = false; System.err.println(var17 + "":""); for (String var19 : var18) { System.err.println(""\t"" + var19); } } } if (var16) { System.out.println(""OK""); } else { terminate(1, ""Invalid var13 exists""); } } "	0	0	1	0	0	0
"private Domain Func1(QueryParam var1) { DomainQueryParam var2 = (DomainQueryParam) var1; final String var3 = var2.getPunyName(); LOGGER.debug(""query LDH_NAME with var3:{}"", var3); final String var4 = ""select * from RDAP_DOMAIN domain "" + SQL_LEFT_JOIN_DOMAIN_STATUS + "" where LDH_NAME= ?  ""; List<Domain> var5 = jdbcTemplate.query(new PreparedStatementCreator() { @Override public PreparedStatement Func2( Connection var6) throws SQLException { PreparedStatement var7 = var6.prepareStatement(var4); var7.setString(1, var3); return var7; } }, new DomainWithStatusResultSetExtractor()); if (null == var5 || var5.size() == 0) { return null; } return var5.get(0); } "	0	0	1	0	0	0
private int Func1() { return super.Func1(); } 	0	0	1	1	0	0
@Override protected void Func1(Runnable var1) { sExecutorService.execute(var1); } 	0	0	1	0	1	0
@Override public int Func1(ForgeDirection var1, int var2, boolean var3) { if (data.isMaster) { int var4 = var2; if (var4 > maxEnergy - energy) var4 = maxEnergy - energy; if (!var3) energy += var4; return var4; } else { if (master == null) findMaster(); if (master != null) return master.Func1(var1, var2, var3); } return 0; } 	1	0	1	1	1	0
"public void Func1() throws IOException, XmlPullParserException { Object var1 = UMContextGetter.getContext(this); UstadMobileSystemImpl.getInstance().getLogger().l(UMLog.INFO, 311, null); UstadMobileSystemImpl var2 = UstadMobileSystemImpl.getInstance(); var2.setActiveUser(TestConstants.LOGIN_USER, var1); String var3 = TestUtils.getInstance().getHTTPRoot() + TestConstants.CATALOG_OPDS_ROOT; CatalogController var4 = CatalogController.makeControllerByURL( var3, var2, CatalogController.USER_RESOURCE, TestConstants.LOGIN_USER, TestConstants.LOGIN_PASS, CatalogController.CACHE_ENABLED, var1); assertNotNull(""Create catalog var4"", var4); UstadJSOPDSFeed var5 = var4.getModel().opdsFeed; String var6 = var5.toString(); ByteArrayInputStream var7 = new ByteArrayInputStream( var6.getBytes(""UTF-8"")); XmlPullParser var8 = var2.newPullParser(); var8.setInput(var7, ""UTF-8""); UstadJSOPDSFeed var9 = UstadJSOPDSFeed.loadFromXML(var8); assertEquals(""Same id when reparsed"", var5.id, var9.id); CatalogController.cacheCatalog(var5, CatalogController.USER_RESOURCE, null, var1); UstadJSOPDSFeed var10 = CatalogController.getCachedCatalogByID(var5.id, CatalogController.SHARED_RESOURCE | CatalogController.USER_RESOURCE, var1); assertEquals(""Same feed id on cached catalog"", var5.id, var10.id); } "	0	0	0	0	0	1
public void Func1(String var1, int var2) { final UstadMobileSystemImpl var3 = UstadMobileSystemImpl.getInstance(); final int var4 = CatalogController.CACHE_ENABLED; CatalogController.makeControllerForView(this, var1, var3, var2, var4, this); } 	1	0	1	1	0	0
"public static String Func1(byte var1) { String var2 = ""zygote""; if(var1==1) { if(joueurs == 2) { System.out.println(LSD.getString(""pen_intro_msg1"")); var2 = InOut.getWord(); challenge.clear(); System.out.println(LSD.getString(""pen_intro_msg2"")); } else{ var2 = Dico.lectureMots(); } }else if(var1==2){ System.out.println(LSD.getString(""pen_intro_msg3"")); challenge.dormirSystem(2500); System.out.println(LSD.getString(""pen_intro_msg4"")); var2 = InOut.Mot(InOut.getLine()); challenge.clear(); }else{ System.out.println(LSD.getString(""pen_intro_msg5"")); challenge.dormirSystem(2500); System.out.println(LSD.getString(""pen_intro_msg6"")); var2 = InOut.getWord(); challenge.clear(); } var2.toLowerCase(); return var2; } "	0	0	1	0	0	0
"public static void Func1() { if(Fichier.fichierExiste(""saves/"", name + "".sav"")) { String var1 = """"; Fichier var2 = new Fichier(); var2.ouvrir(""saves/"" + name + "".sav"", ""L"",true); var1 = var2.lire(); playerOne.setName(var1); var2.lire(); int [] var3 = new int[10]; int [] var4 = new int[10]; int [] var5 = new int[10]; int [] var6 =new int[10]; for(int var7=0;!(var1.equals("".B""));var7++) { var1 = var2.lire(); if(!var1.equals("".B"")) { var3[var7] = Integer.parseInt(var1); } } playerOne.setScorePendu(var3); for(int var7=0;!(var1.equals("".C""));var7++) { var1 = var2.lire(); if(!var1.equals("".C"")) { var4[var7] = Integer.parseInt(var1); } } playerOne.setScorePlusMoins(var4); for(int var7=0;!(var1.equals("".D""));var7++) { var1 = var2.lire(); if(!var1.equals("".D"")) { var5[var7] = Integer.parseInt(var1); } } playerOne.setScoreMasterMind(var5); for(int var7=0;!(var1.equals("".end""));var7++) { var1 = var2.lire(); if(!var1.equals("".end"")) { var6[var7] = Integer.parseInt(var1); } } playerOne.setScorePuissance4(var6); var2.fermer(); } } "	0	0	1	0	0	0
"public static String Func1() { if(profilGestion.existe()) { return LSD.getString(""conne_msg1""); } else { return LSD.getString(""conne_msg2""); } } "	0	0	1	0	0	0
"public String Func1(String var1){ StringBuilder var2 = new StringBuilder(); while(var1.length() > 0){ { List<String> var3 = rules.get(""escape"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); var2.append(var3.get(1)); continue; } } { List<String> var3 = rules.get(""autolink"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); String var4; String var5; if(var3.get(2).equals(""@"")){ if(var3.get(1).startsWith(""mailto:"")){ var4 = var3.get(1).substring(7); } else { var4 = var3.get(1); } var5 = ""mailto:"" + var4; } else { var4 = escape(var3.get(1)); var5 = var4; } var2.append(renderer.var7(var5, null, var4)); continue; } } if(!inLink){ List<String> var3 = rules.get(""url"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); String var4 = escape(var3.get(1)); String var5 = var4; var2.append(renderer.var7(var4, null, var5)); continue; } } { List<String> var3 = rules.get(""tag"").exec(var1); if(!var3.isEmpty()){ if(!inLink && Pattern.compile(""^<a "").matcher(var3.get(0)).find()){ inLink = true; } else if(inLink && Pattern.compile(""^</a>"").matcher(var3.get(0)).find()){ inLink = false; } var1 = var1.substring(var3.get(0).length()); if(options.isSanitize()){ var2.append(escape(var3.get(0))); } else { var2.append(var3.get(0)); } continue; } } { List<String> var3 = rules.get(""var7"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); inLink = true; var2.append(outputLink(var3, new Lexer.Link(var3.get(2), var3.get(3)))); inLink = false; continue; } } { List<String> var3 = rules.get(""reflink"").exec(var1); if(var3.isEmpty()){ var3 = rules.get(""nolink"").exec(var1); } if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); String var6; if(var3.size() > 2){ var6 = var3.get(2).replaceAll(""\\s+"", """"); } else { var6 = var3.get(1).replaceAll(""\\s+"", """"); } Lexer.Link var7 = links.get(var6); if(var7 == null || isEmpty(var7.getHref())){ var2.append(renderer.nolink(var3.get(0))); continue; } inLink = true; var2.append(outputLink(var3, var7)); inLink = false; continue; } } { List<String> var3 = rules.get(""strong"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); var2.append(renderer.strong(Func1(or(var3.get(2), var3.get(1))))); continue; } } { List<String> var3 = rules.get(""em"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); var2.append(renderer.em(Func1(or(var3.get(2), var3.get(1))))); continue; } } { List<String> var3 = rules.get(""code"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); var2.append(renderer.codespan(var3.get(2))); continue; } } { List<String> var3 = rules.get(""br"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); var2.append(renderer.br()); continue; } } { List<String> var3 = rules.get(""del"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); var2.append(renderer.del(Func1(var3.get(1)))); continue; } } { List<String> var3 = rules.get(""var4"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); var2.append(renderer.var4(escape(var3.get(0)))); continue; } } } return var2.toString(); } "	0	0	0	0	0	1
"private String Func1(String var1) { return genObjectName(""Cloud-AutoScale-Policy-Max"", var1); } "	0	0	0	1	0	0
@Override public void Func1(int var1) { } 	0	0	1	0	0	0
private Answer Func1(ReadyCommand var1) { return new ReadyAnswer(var1); } 	0	0	0	1	0	0
"private String Func1(String var1) { return genObjectName(""Cloud-AutoScale-ScaleUpAction"", var1); } "	0	0	0	1	0	0
"@Override public void Func1() { Log.d(TAG, ""Func1()""); super.Func1(); state.Func1(); binder.dispose(); if (this instanceof DependencyScopeOwner) { final DependenciesCache var1 = D.get(DependenciesCache.class); final DependencyScopeOwner var2 = (DependencyScopeOwner) this; var1.removeDependencyScope(var2); } final T_Presenter var3 = resolvePresenter(); if (var3 != null) { var3.onViewDestroy(this); } if (PluginBus.isPlugged(this)) { Log.d(TAG, ""Func1() : Unplugged from PluginBus""); PluginBus.unplug(this); } } "	0	0	1	1	1	0
<T extends AbstractStub<T>> T Func1(Function<ManagedChannel, T> var1) { return configureStub(var1.apply(getChannel()), getToken()); } 	1	0	0	0	1	0
"private void Func1(User var1) { startActivity(new Intent(this, RegisterActivity.class).putExtra(""user_data"", var1)); } "	0	0	1	1	1	0
"@Override public Trigger<?> Func1(StaplerRequest var1, JSONObject var2) throws FormException { if (getBuildManager() == null) { throw new FormException(MessageFormat.format(""Cannot retrieve build manager. {0} requires GitHub plugin, you need to install GitHub plugin in order to use it."", getDisplayName()), ""all""); } return super.Func1(var1, var2); } "	0	0	1	1	1	0
"public void Func1() { System.out.println(""getPercentileFromSorted""); List<Double> var1 = Arrays.asList(4.0, 2.0, 1.0, -1.0, 5.0); double[] var2 = UnivariateStatisticsUtil.computePercentiles(var1, 0.2, 0.5, 1.0, 0.0); assertEquals(-0.6, var2[0], EPS); assertEquals(UnivariateStatisticsUtil.computeMedian(var1),var2[1], EPS); assertEquals(5.0, var2[2]); assertEquals(-1.0, var2[3]); double[] var3 = {-1.0, -0.1, 1.1, 10.0 }; for (double var4 : var3) { boolean var5 = false; try { UnivariateStatisticsUtil.computePercentiles(var1, var4); } catch (Exception e) { var5 = true; } finally { assertTrue(var5); } } } "	0	0	1	1	1	0
"@Override public Map<String, String> Func1(TaskDto var1) { Map<String, String> var2 = new HashMap<>(); String var3 = configurationMediator.getConfigurationId(); List<TaskEntry> var4 = new ArrayList<>(); int var5 = getTasksInQueue(); boolean var6 = Boolean.valueOf(var1.getRegular()); List<TaskEntry> var7 = taskRepository.findAll(); for (TaskEntry var8 : TaskDtoConverter.convert(var1)) { if (!var6 && var5 >= configurationMediator.getMaxQueueSize()) { notificationService.notifyAboutError(new ExceptionDto(""Task creation error"", ""Task queue is full"")); break; } if (!configurationMediator.isClusterMode()) { var8.setWorker(var3); } var8.setStatus(TaskEntry.TaskEntryStatus.QUEUED.getStatus()); var8.setId(UUID.randomUUID().toString()); setTempVolumeAndIops(var8); if (var6) { try { schedulerService.addTask(var8); var2.put(var8.getVolume(), getMessage(var8)); var4.add(var8); var5++; } catch (EnhancedSnapshotsException e) { notificationService.notifyAboutError(new ExceptionDto(""Task creation has failed"", e.getLocalizedMessage())); LOG.error(e); var2.put(var8.getVolume(), e.getLocalizedMessage()); } } else if (TaskEntry.TaskEntryType.RESTORE.getType().equals(var8.getType())) { if (backupRepository.findByVolumeId(var8.getVolume()).isEmpty()) { notificationService.notifyAboutError(new ExceptionDto(""Restore task error"", ""Backup for volume: "" + var8.getVolume() + "" not found!"")); var2.put(var8.getVolume(), ""Restore task error""); } else { setRestoreVolumeTypeAndIops(var8); var2.put(var8.getVolume(), getMessage(var8)); var4.add(var8); var5++; } } else { var2.put(var8.getVolume(), getMessage(var8)); List<TaskEntry> var9 = new ArrayList<>(var7); var9.addAll(var4); if (var9.stream().filter(t -> t.getVolume().equals(var8.getVolume()) && t.isConsistentBackup() && var8.isConsistentBackup() && t.getStatus().equals(!taskIsFinished(t))).count() != 0) { LOG.warn(""There is already task for consistent backup for volume {}, new one will not be added."", var8.getVolume()); continue; } var4.add(var8); var5++; } } taskRepository.save(var4); return var2; } "	0	0	1	1	0	0
"public void Func1(String var1, String var2) { SecureSharedPreferences.Editor var3 = settings.edit(); var3.putString(""var2"", var2); var3.putString(""var1"", var1); var3.commit(); } "	0	0	1	1	0	0
"private void Func1(String var1, ZuulFilter var2, long var3) { List<ZuulFilter> var4 = hashFiltersByType.get(var2.filterType()); if (var4 != null) { hashFiltersByType.remove(var2.filterType()); //rebuild this var4 } String var5 = var2.filterType() + "":"" + var2.filterName(); filtersByNameAndType.put(var5, var2); filterRegistry.put(var1, var2); filterClassLastModified.put(var1, var3); } "	0	0	1	1	0	0
"@Override public void Func1(List<String> var1, ColumnConfig var2) throws RoutineException { if (var1.size() != 2) { throw new RoutineException(""Incorrect number of paramters. Must be <columnName>,<maxDuration>""); } columnName = var1.get(0); if (!var2.hasColumn(columnName)) { throw new RoutineException(""Column '"" + columnName + ""' does not exist""); } ColumnConfigItem var3 = var2.getColumnConfig(columnName); if (!var3.isNumeric()) { throw new RoutineException(""Column '"" + columnName + ""' must be numeric""); } try { maxDuration = Integer.parseInt(var1.get(1)); } catch (NumberFormatException e) { throw new RoutineException(""Max duration parameter must be numeric""); } if (maxDuration <= 0) { throw new RoutineException(""Max duration must be greater than zero""); } } "	0	0	1	1	0	0
@Override public boolean Func1(EntityPlayer var1) { return tileEntityHenhouse.isUsableByPlayer(var1); } 	1	0	0	0	1	0
"@Override public void Func1(Call<UserSentResponse> var1, Response<UserSentResponse> var2) { UserSentResponse var3=var2.body(); if(var3!=null&&var2.isSuccess()){ Log.v(""ID"", var3.userId); sharedPref.setLoginStatus(true); sharedPref.setUserKey(var3.userId); sharedPref.setLoginSkipStatus(true); progressBar.setVisibility(View.GONE); getActivity().startActivity(new Intent(getActivity(),MainActivity.class)); getActivity().finish(); } else{ Toast.makeText(getActivity(),""Check Internet connection"",Toast.LENGTH_SHORT).show(); } } "	1	0	0	0	1	0
"public DataType Func1(String var1) { switch (var1.toLowerCase()) { case ""int"": return DataType.INT; case ""string"": return DataType.STRING; case ""double"": return DataType.DOUBLE; case ""float"": return DataType.FLOAT; case ""timestamp"": return DataType.TIMESTAMP; case ""decimal"": return DataType.DECIMAL; case ""date"": return DataType.DATE; case ""boolean"": return DataType.BOOLEAN; case ""long"": return DataType.LONG; default: return DataType.NULL; } } "	1	0	1	0	1	0
"@RequestMapping(value = ""/vehicle-location-simulation!map.do"", method = RequestMethod.GET) public ModelAndView Func1(@RequestParam() int var1, HttpServletResponse var2) throws IOException { return new ModelAndView(""vehicle-location-simulation-map.jspx"", null); } "	0	0	1	1	1	0
"public void Func1() { try { String var1; var1 = new StringBuilder() .append(""#       *** OOR EXAMPLE CONFIG FILE ***\n\n\n"") .append(""# General configuration\n"") .append(""#      debug: Debug levels [0..3]\n"") .append(""#      map-request-retries: Additional Map-Requests to send per map cache miss\n"") .append(""#      encapsulation: Encapsulation that will use OOR in the data plane. Could \n"") .append(""#        be LISP or VXLAN-GPE. LISP is selected by default\n\n"") .append(""debug                  = ""+logLevel+""\n"") .append(""map-request-retries    = 2\n"") .append(""encapsulation          = LISP\n\n\n"") .append(""#\n"") .append(""# operating mode can be any of:\n"") .append(""# xTR, RTR, MN, MS\n"") .append(""#\n\n"") .append(""operating-mode         = MN\n"") .append(""# RLOC Probing configuration\n"") .append(""#   rloc-probe-interval: interval at which periodic RLOC probes are sent\n"") .append(""#     (seconds). A value of 0 disables RLOC Probing\n"") .append(""#   rloc-probe-retries: RLOC Probe retries before setting the locator with\n"") .append(""#     status down. [0..5]\n"") .append(""#   rloc-probe-retries-interval: interval at which RLOC probes retries are\n"") .append(""#     sent (seconds) [1..#rloc-probe-interval]\n\n"") .append(""rloc-probing {\n"") .append(""    rloc-probe-interval             = ""+rloc_prob_interval+""\n"") .append(""    rloc-probe-retries              = ""+rloc_prob_retries+""\n"") .append(""    rloc-probe-retries-interval     = ""+rloc_prob_retries_interval+""\n"") .append(""}\n\n\n"") .append(""# NAT Traversal configuration. \n"") .append(""#   nat_traversal_support: check if the node is behind NAT\n\n"") .append(""nat_traversal_support = ""+nat_aware+""\n\n\n"") .append(""# Encapsulated Map-Requests are sent to this map-resolver\n"") .append(""# You can define several map-resolvers. Encapsulated Map-Request messages will\n"") .append(""# be sent to only one.\n"") .append(""#   address: IPv4 or IPv6 address of the map resolver\n"") .append(""map-resolver        = {\n"") .append(""        ""+MR+"",\n"") .append(""}\n\n\n"") .append(""# Map-Registers are sent to this map-server\n"") .append(""# You can define several map-servers. Map-Register messages will be sent to all\n"") .append(""# of them.\n"") .append(""#   address: IPv4 or IPv6 address of the map-server\n"") .append(""#   key-type: Only 1 supported (HMAC-SHA-1-96)\n"") .append(""#   key: password to authenticate with the map-server\n"") .append(""#   proxy-reply [on/off]: Configure map-server to Map-Reply on behalf of the xTR\n\n"") .append(""map-server {\n"") .append(""        address     = ""+MS+""\n"") .append(""        key-type    = 1\n"") .append(""        key         = ""+MSKey+""\n"") .append(""        proxy-reply = on\n"") .append(""}\n\n\n"") .append(""# List of PITRs to SMR on handover\n"") .append(""#   address: IPv4 or IPv6 address of the Proxy-ITR\n"") .append(""#   Current LISP beta-network (lisp4.net/lisp6.net) PITR addresses\n\n"") .append(""proxy-itrs = {\n"") .append(""        69.31.31.98,\n"") .append(""        149.20.48.60,\n"") .append(""        198.6.255.37,\n"") .append(""        173.36.193.25,\n"") .append(""        129.250.1.63,\n"") .append(""        217.8.98.33,\n"") .append(""        217.8.98.35,\n"") .append(""        193.162.145.46,\n"") .append(""        193.34.30.222,\n"") .append(""        193.34.31.222,\n"") .append(""        147.83.131.33,\n"") .append(""        158.38.1.92,\n"") .append(""        203.181.249.172,\n"") .append(""        202.51.247.10\n"") .append(""}\n\n\n"") .append(""# IPv4 / IPv6 EID of the node.\n"") .append(""# Two kind of rlocs can be defined:\n"") .append(""#   -> rloc-address: Specifies directly the rloc of the interface\n"") .append(""#   -> rloc-iface: Specifies the interface associated with the RLOC\n"") .append(""#\n"") .append(""#   eid-prefix: EID prefix (IPvX/mask) of the mapping\n"") .append(""#   address: IPv4 or IPv6 address of the rloc. Address should exist and\n"") .append(""#      be assigned to an UP interface during starting process otherwise\n"") .append(""#      it is discarded\n"") .append(""#   interface: interface containing the RLOCs associated to this mapping\n"") .append(""#   afi: 4 to use IPv4 address of the interface and 6 to use IPv6 address\n"") .append(""#     of the interface\n"") .append(""#   priority [0-255]: Priority for the IPvX RLOC of the interface. Locators\n"") .append(""#     with lower values are more preferable. This is used for both incoming\n"") .append(""#     policy announcements and outcoming traffic policy management.\n"") .append(""#   weight [0-255]: When priorities are the same for multiple RLOCs, the Weight\n"") .append(""#     indicates how to balance unicast traffic between them.\n"") .toString(); if (ifaces != null){ if (!eidIPv4.equals("""")){ var1= var1.concat(createEIDConFile(eidIPv4+""/32"")); } if (!eidIPv6.equals("""")){ var1= var1.concat(createEIDConFile(eidIPv6+""/128"")); } } if (!proxyETR.equals("""")){ String var2; var2 = new StringBuilder() .append(""# Packets addressed to non-LISP sites will be encapsulated to this Proxy-ETR\n"") .append(""# You can define several Proxy-ETR. Traffic will be balanced according to\n"") .append(""# priority and weight.\n"") .append(""#   address: IPv4 or IPv6 address of the Proxy-ETR\n"") .append(""#   priority [0-255]: Proxy-ETR with lower values are more preferable.\n"") .append(""#   weight [0-255]: When priorities are the same for multiple Proxy-ETRs,\n"") .append(""#     the Weight indicates how to balance unicast traffic between them.\n"") .append(""proxy-etr {\n"") .append(""        address     = ""+proxyETR+""\n"") .append(""        priority    = 1\n"") .append(""        weight      = 100\n"") .append(""}\n\n\n"") .toString(); var1= var1.concat(var2); } var1= var1.concat(""override-dns     		 = ""+overrideDNS+""\n""); if (!DNS1.equals("""")) var1= var1.concat(""override-dns-primary    = ""+DNS1+""\n""); if (!DNS2.equals("""")) var1= var1.concat(""override-dns-secondary  = ""+DNS2+""\n""); FileWriter var3 = new FileWriter(conf_file); BufferedWriter var4 = new BufferedWriter(var3); var4.write(var1); var4.close(); } catch (Exception e) { displayMessage(""Error while writing Default Conf file to sdcard!!"", false, null); } } "	0	0	1	1	0	0
public static TechnologyDetailsCounterDAOImpl Func1() { if (instance == null) { return new TechnologyDetailsCounterDAOImpl(); } return instance; } 	1	0	1	1	1	0
"public static Map<String,Object> Func1(String var1) throws URISyntaxException { URI var2 = new URI(var1); Map<String, String> var3 = new HashMap<String,String>(); List<NameValuePair> var4 = URLEncodedUtils.parse(var2, ""UTF-8"" /*StandardCharsets.UTF_8*/); for (NameValuePair var5 : var4) { var3.put(var5.getName(), var5.getValue()); } Map<String, Object> var6 = new HashMap<String, Object>(); var6.put(""var3"", var3); var6.put(""path"", var2.getPath()); return var6; } "	0	0	1	1	1	0
"@Test public void Func1() { doTest(""BEGIN:VCARD\r\nVERSION:2.1\r\nN:;Sean;;;\r\nEND:VCARD"", null, new String[] {""Sean""}, null, null, null, null, null, null, null, null); } "	1	1	1	1	0	0
"@Override public Widget Func1() { LayoutPanel var1 = new LayoutPanel(); FakeTabPanel var2 = new FakeTabPanel(""Resource Adapter""); var1.add(var2); panel = new PagedView(); this.adapterList = new AdapterList(presenter); this.connectionList = new ConnectionList(presenter); this.adminObjects = new AdminObjectList(presenter); panel.addPage(Console.CONSTANTS.common_label_back(), adapterList.asWidget()); panel.addPage(""Connection Definitions"", connectionList.asWidget()); panel.addPage(""Admin Objects"", adminObjects.asWidget()) ; panel.showPage(0); Widget var3 = panel.asWidget(); var1.add(var3); var1.setWidgetTopHeight(var2, 0, Style.Unit.PX, 40, Style.Unit.PX); var1.setWidgetTopHeight(var3, 28, Style.Unit.PX, 100, Style.Unit.PCT); return var1; } "	1	0	0	0	1	0
"@Override public boolean Func1(MenuItem var1) { TabLayout var2 = context.getToolbarManager().getTabs(); Vplan var3 = var2.getSelectedTabPosition() == 0 ? getTodayPlan() : getTomorrowPlan(); if (!var3.isLoaded()) { CoordinatorLayout var4 = (CoordinatorLayout) context.findViewById(R.id.coordinator_layout); Snackbar var5 = Snackbar .make(var4, getString(R.string.plan_not_loaded), Snackbar.LENGTH_LONG); var5.show(); return true; } switch (var1.getItemId()) { case R.id.show_absent: AlertDialog.Builder var6 = new AlertDialog.Builder(context); var6.setTitle(getString(R.string.plan_absent)); String var7 = null; for (String var8 : var3.getAbsentStrings()) { if (var7 == null) { var7 = var8; } else { var7 += ""\n\n"" + var8; } } if (var7 == null) { var7 = getString(R.string.plan_no_teachers); } var6.setMessage(var7); var6.setIcon(R.drawable.ic_menu_absent); AlertDialog var9 = var6.create(); var9.show(); return true; case R.id.show_marquee: AlertDialog.Builder var10 = new AlertDialog.Builder(context); var10.setTitle(getString(R.string.plan_marquee)); String var11 = null; for (String var8 : var3.getMarquee()) { if (var11 == null) { var11 = var8; } else { var11 += ""\n\n"" + var8; } } if (var11 == null) { var11 = getString(R.string.plan_no_announcements); } var10.setMessage(var11); var10.setIcon(R.drawable.ic_menu_about_old); AlertDialog var12 = var10.create(); var12.show(); return true; case R.id.show_time: AlertDialog.Builder var13 = new AlertDialog.Builder(context); var13.setTitle(getString(R.string.plan_time)); String var14 = var3.getChanged(); if (var14.isEmpty()) { var13.setMessage(getString(R.string.plan_no_update)); } else { var13.setMessage(var14); } var13.setIcon(R.drawable.ic_menu_clock); AlertDialog var15 = var13.create(); var15.show(); return true; } return super.Func1(var1); } "	0	0	1	0	0	0
public Deck Func1(Long var1) { Deck var2 = deckRepository.getDeckById(var1); User var3 = userService.getAuthorizedUser(); Folder var4 = var3.getFolder(); List<Deck> var5 = var4.getDecks(); var5.add(var2); folderRepository.save(var4); return var2; } 	0	0	1	0	1	0
"Optional<AssertionError> Func1(Signal<T> var1, Iterator<? extends T> var2) { if (var1.isOnNext()) { if (!var2.hasNext()) { return fail(this, ""unexpected var2 request; onNext(%s); iterable: %s"", var1.get(), iterable); } T var3 = var2.next(); if (!Objects.equals(var1.get(), var3)) { return fail(this, ""expected : onNext(%s); actual: %s; iterable: %s"", var3, var1.get(), iterable); } return var2.hasNext() ? EXPECT_MORE : Optional.empty(); } if (var2 != null && var2.hasNext() || var1.isOnError()) { return fail(this, ""expected next value: %s; actual actual var1: %s; iterable: %s"", var2 != null && var2.hasNext() ? var2.next() : ""none"", var1, iterable); } return Optional.empty(); } "	0	0	1	1	0	0
@Nullable private Entry Func1(final int var1) { final int var2 = _map.get(var1); if (var2 == -1) { return null; } return Func1(var1, _buf.pointerFromIndex(var2)); } 	1	0	1	1	1	0
"@Override public boolean Func1(Object var1, Object var2) { Assert.notNull(var1, ""var1""); writeLock.lock(); try { ExpiringEntry<K, V> var3 = entries.get(var1); if (var3 != null && var3.getValue().equals(var2)) { entries.Func1(var1); if (var3.cancel(false)) scheduleEntry(entries.first()); return true; } else return false; } finally { writeLock.unlock(); } } "	1	0	1	0	1	0
"private void Func1( String var1, Object var2, OutputStream var3, String var4) throws IOException { ObjectNode var5 = mapper.createObjectNode(); if (var4!=null) { var5.put(""var4"", var4); } var5.put(""jsonrpc"", JSON_RPC_VERSION); var5.put(""method"", var1); if (var2!=null && var2.getClass().isArray()) { Object[] var6 = Object[].class.cast(var2); if (var6.length>0) { ArrayNode var7 = new ArrayNode(mapper.getNodeFactory()); for (Object var8 : var6) { JsonNode var9 = mapper.valueToTree(var8); var7.add(var9); } var5.put(""params"", var7); } } else if (var2!=null && Collection.class.isInstance(var2)) { Collection<?> var6 = Collection.class.cast(var2); if (!var6.isEmpty()) { ArrayNode var7 = new ArrayNode(mapper.getNodeFactory()); for (Object var8 : var6) { JsonNode var9 = mapper.valueToTree(var8); var7.add(var9); } var5.put(""params"", var7); } } else if (var2!=null && Map.class.isInstance(var2)) { if (!Map.class.cast(var2).isEmpty()) { var5.put(""params"", mapper.valueToTree(var2)); } } else if (var2!=null) { var5.put(""params"", mapper.valueToTree(var2)); } if (this.requestListener!=null) { this.requestListener.onBeforeRequestSent(this, var5); } if (LOGGER.isLoggable(Level.FINE)) { LOGGER.log(Level.FINE, ""JSON-PRC Request: ""+var5.toString()); } writeAndFlushValue(var3, var5); } "	0	0	1	0	1	0
"public Object Func1(Type var1, InputStream var2) throws Throwable { ReadContext var3 = ReadContext.getReadContext(var2, mapper); var3.assertReadable(); JsonNode var4 = var3.nextValue(); if (LOGGER.isLoggable(Level.FINE)) { LOGGER.log(Level.FINE, ""JSON-PRC Response: ""+var4.toString()); } if (!var4.isObject()) { throw new JsonRpcClientException(0, ""Invalid JSON-RPC var4"", var4); } ObjectNode var5 = ObjectNode.class.cast(var4); if (this.requestListener!=null) { this.requestListener.onBeforeResponseProcessed(this, var5); } if (var5.has(""error"") && var5.get(""error"")!=null && !var5.get(""error"").isNull()) { if (exceptionResolver==null) { throw DefaultExceptionResolver.INSTANCE.resolveException(var5); } else { throw exceptionResolver.resolveException(var5); } } if (var5.has(""result"") && !var5.get(""result"").isNull() && var5.get(""result"")!=null) { if (var1==null) { LOGGER.warning( ""Server returned result but var1 is null""); return null; } JsonParser var6 = mapper.treeAsTokens(var5.get(""result"")); JavaType var7 = TypeFactory.defaultInstance().constructType(var1); return mapper.readValue(var6, var7); } return null; } "	0	0	1	0	1	0
"public void Func1() { mMenu = new Menu((int) getResources().getDimension(R.dimen.slv_item_height), new ColorDrawable(Color.LTGRAY), true); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width)) .setBackground(new ColorDrawable(Color.RED)) .setText(""One"") .setTextColor(Color.GRAY) .setTextSize((int) getResources().getDimension(R.dimen.txt_size)) .build()); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width)) .setBackground(new ColorDrawable(Color.GREEN)) .setText(""Two"") .setTextColor(Color.BLACK) .setTextSize((int) getResources().getDimension(R.dimen.txt_size)) .build()); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width) + 30) .setBackground(new ColorDrawable(Color.BLUE)) .setText(""Three"") .setDirection(MenuItem.DIRECTION_RIGHT) .setTextColor(Color.BLACK) .setTextSize((int) getResources().getDimension(R.dimen.txt_size)) .build()); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width_img)) .setBackground(new ColorDrawable(Color.BLACK)) .setDirection(MenuItem.DIRECTION_RIGHT) .setIcon(getResources().getDrawable(R.drawable.ic_launcher)) .build()); } "	0	0	1	1	0	0
public synchronized boolean Func1(int var1) { return available >= var1; } 	1	0	1	1	1	0
"protected void Func1(RecordIdentifier var1, GroupedWorkBase var2, boolean var3) { if (recordsToNotGroup.contains(var1.toString())){ var2.makeUnique(var1.toString()); } String var4 = var2.getPermanentId(); if (mergedGroupedWorks.containsKey(var4)){ var4 = handleMergedWork(var2, var4); } numRecordsProcessed++; long var5 = -1; try{ if (existingGroupedWorks.containsKey(var4)){ var5 = existingGroupedWorks.get(var4); if (var3) { markWorkUpdated(var5); } } else { insertGroupedWorkStmt.setString(1, var2.getTitle()); insertGroupedWorkStmt.setString(2, var2.getAuthor()); insertGroupedWorkStmt.setString(3, var2.getGroupingCategory()); insertGroupedWorkStmt.setString(4, var4); insertGroupedWorkStmt.setLong(5, new Date().getTime() / 1000); insertGroupedWorkStmt.executeUpdate(); ResultSet var6 = insertGroupedWorkStmt.getGeneratedKeys(); if (var6.next()){ var5 = var6.getLong(1); } var6.close(); numGroupedWorksAdded++; existingGroupedWorks.put(var4, var5); updatedAndInsertedWorksThisRun.add(var5); } addPrimaryIdentifierForWorkToDB(var5, var1); }catch (Exception e){ logger.error(""Error adding grouped record to grouped work "", e); } } "	0	0	1	0	1	0
"@Override public String Func1(AnnotatedRecord var1) throws Exception { String var2 = """"; for (String var3 : var1.getFieldNames()) { var2 += var1.getClass().getMethod(""get"" + var3).invoke(var1) + ""\t""; } for (String var4 : var1.getAdditionalProperties().values()) { var2 += var4 + ""\t""; } return var2.trim(); } "	0	0	0	1	1	0
"public static CharacterDetailFragment Func1(Character var1) { CharacterDetailFragment var2 = new CharacterDetailFragment(); Bundle var3 = new Bundle(); var3.putParcelable(""playerID"", Parcels.wrap(var1)); var2.setArguments(var3); return var2; } "	1	0	1	1	1	0
"@Test public void Func1() throws Exception { BallisticWeapon var1 = (BallisticWeapon) ItemDB.lookup(""GAUSS RIFLE""); assertEquals(var1.getDamagePerShot() / var1.getHeat(null), var1.getStat(""d/h"", null), 0.0); } "	0	0	0	1	0	0
"@Test public void Func1() throws Exception { Weapon var1 = (Weapon) ItemDB.lookup(""MACHINE GUN""); assertTrue(var1.getSecondsPerShot(null) > 0.05); } "	0	0	1	1	0	0
"@Override public boolean Func1(String var1, String var2) throws ServerProxyException { String var3 = serializer.sCredentials(var1, var2); String var4 = ""/user/login""; try{ String var5 = doJSONPost(var4, var3, true, false); } catch(ServerProxyException e){ if(e.getMessage().toLowerCase().contains(""failed to login"")){ return false; } else throw e; } return true; } "	1	0	1	1	1	0
"@Test public void Func1() { Assert.assertEquals(""Build version must be 0s"", ""0.0.0.0"", EwsUtilities.getBuildVersion()); } "	0	0	1	1	1	0
"private void Func1() { final String var1 = m_userName.getText(); final boolean var2 = m_anonymous.isSelected(); if (!DbUser.isValidUserName(var1)) { JOptionPane.showMessageDialog(this, DbUser.getInvalidUserNameReason(var1), ""Invalid Username"", JOptionPane.ERROR_MESSAGE); return; } else if (m_password.getPassword().length == 0 && !var2) { JOptionPane.showMessageDialog(LoginPanel.this, ""You must enter a password"", ""No Password"", JOptionPane.ERROR_MESSAGE); return; } else if (m_password.getPassword().length < 3 && !var2) { JOptionPane.showMessageDialog(LoginPanel.this, ""Passwords must be at least three characters long"", ""Invalid password"", JOptionPane.ERROR_MESSAGE); return; } m_returnValue = ReturnValue.LOGON; m_dialog.setVisible(false); } "	0	0	0	0	0	1
"public static void Func1(String var1){ if(!enabled || !(FEResources.getAudioVolume()>0)) return; if(var1.equals(current)) return; current = var1; loadAudioNames(); try{ String var2 = FEResources.getAudioSetting(var1.toUpperCase()); Audio var3; if(var2.equals(""random"")){ Random var4 = new Random(); var2 = var1 + ""_"" + songs.get(var1).get(var4.nextInt(songs.get(var1).size())); if(var2.split(""_"").length<2) var2 = var1; } var3 = AudioLoader.getAudio(""WAV"", ResourceLoader.getResourceAsStream(""res/music/""+var2+"".wav"")); var3.playAsMusic(1.0f, FEResources.getAudioVolume(), true); } catch (Exception e){ e.printStackTrace(); System.err.println(""Warn: Bad sound configuration: ""+var1); try{ Audio var3 = AudioLoader.getAudio(""OGG"", ResourceLoader.getResourceAsStream(""res/music/""+var1+"".wav"")); var3.playAsMusic(1.0f, FEResources.getAudioVolume(), true); }catch(Exception f){} } } "	0	0	1	0	0	0
public void Func1() { Game.getInstance().addLives(1); } 	0	0	1	0	0	0
public ArrayWritable Func1(Object var1) throws SerDeException { return serde.createStruct(var1, objInspector); } 	1	0	0	0	1	0
"@Override public void Func1(ServletRequest var1, ServletResponse var2, FilterChain var3) throws IOException, ServletException { HttpServletRequest var4 = (HttpServletRequest) var1; HttpServletResponse var5 = (HttpServletResponse) var2; try { String var6 = var4.getRequestURL().toString(); if (!requiresAuthentication(var6)) { var3.Func1(var1, var2); } String var7 = var4.getHeader(this.tokenHeader); if (tokenHeader == null || !tokenHeader.startsWith(authenticationTokenSchema)) { throw new JWTException(""Missing or invalid Authorization header.""); } String var8 = removeAuthenticationSchemaFromHeader(var7); if (var8 != null && SecurityContextHolder.getContext().getAuthentication() == null) { String var9 = verifier.verify(var8); UserDetails var10 = this.userDetailsService.loadUserByUsername(var9); if (var10.isEnabled() && var10.getUsername().equals(var9)) { UsernamePasswordAuthenticationToken var11 = new UsernamePasswordAuthenticationToken(var10, null, var10.getAuthorities()); var11.setDetails(new WebAuthenticationDetailsSource().buildDetails(var4)); SecurityContextHolder.getContext().setAuthentication(var11); } } var3.Func1(var1, var2); } catch (JWTException ex) { Logger.getLogger(AuthenticationTokenFilter.class.getName()).log(Level.SEVERE, null, ex); var5.setStatus(HttpStatus.UNAUTHORIZED.value()); PrintWriter var12 = var5.getWriter(); Gson var13 = new Gson(); LinkedHashMap<String, String> var14 = new LinkedHashMap<String, String>(); var14.put(""httpStatusCode"", HttpStatus.UNAUTHORIZED.toString()); var14.put(""errorMessage"", ""Access Denied""); var12.write(var13.toJson(var14)); } } "	1	1	1	1	1	0
"public boolean Func1(ZigBeeEndpoint var1, int var2) throws ZigBeeNetworkManagerException { logger.info(""Binding from var1 {} to {} for cluster {}"", new Object[]{ getEndpointId(), var1.getEndpointId(), new Integer(var2) }); final ZDO_BIND_RSP var3 = networkManager.sendZDOBind(new ZDO_BIND_REQ( (short) getNode().getNetworkAddress(), (short) var2, IEEEAddress.fromColonNotation(getNode().getIeeeAddress()), (byte) endPointAddress, IEEEAddress.fromColonNotation(var1.getNode().getIeeeAddress()), (byte) var1.getDeviceTypeId() )); if (var3 == null || var3.Status != 0) { logger.warn(""ZDO_BIND_REQ failed due to {}, unable to bind from var1 {} to {} for cluster {}"", new Object[]{ ResponseStatus.getStatus(var3.Status) ,getEndpointId(), var1.getEndpointId(), new Integer(var2) }); return false; } return true; } "	0	0	0	0	0	1
public String Func1() { return locations; } 	0	0	0	0	0	1
"private Set<String> Func1(XPath var1, Node var2){ Set<String> var3 = new HashSet<String>(); try { NodeList var4 =  (NodeList) var1.evaluate(""field_value/Row/value"", var2, XPathConstants.NODESET); for (int var5 = 0; var5 < var4.getLength(); var5++) { var3.add(var4.item(var5).getTextContent()); } } catch (XPathExpressionException e) { LOG.error(Constants.EXCEPTION,e); } return var3; } "	0	0	1	1	1	0
"@Override public boolean Func1(Menu var1) { if (!puz.isUpdatable()) { MenuItem var2 = var1.add( this.showErrors ? ""Hide Errors"" : ""Show Errors"").setIcon( android.R.drawable.ic_menu_view); if (ShortyzApplication.isTabletish(metrics)) { utils.onActionBarWithText(var2); } SubMenu var3 = var1.addSubMenu(""Reveal"").setIcon( android.R.drawable.ic_menu_view); var3.add(createSpannableForMenu(""Letter"")).setTitleCondensed(""Letter""); var3.add(createSpannableForMenu(""Word"")).setTitleCondensed(""Word""); var3.add(createSpannableForMenu(""Puzzle"")).setTitleCondensed(""Puzzle""); if (ShortyzApplication.isTabletish(metrics)) { utils.onActionBarWithText(var3); } } else { var1.add(""Show Errors"").setEnabled(false) .setIcon(android.R.drawable.ic_menu_view); var1.add(""Reveal"").setIcon(android.R.drawable.ic_menu_view) .setEnabled(false); } var1.add(""Clues"").setIcon(android.R.drawable.ic_menu_agenda); Menu var4 = var1.addSubMenu(""Clue Text Size""); var4.add(createSpannableForMenu(""Small"")).setTitleCondensed(""Small""); var4.add(createSpannableForMenu(""Medium"")).setTitleCondensed(""Medium""); var4.add(createSpannableForMenu(""Large"")).setTitleCondensed(""Large""); Menu var5 = var1.addSubMenu(""Zoom""); var5.add(createSpannableForMenu(""Zoom In"")).setTitleCondensed(""Zoom In""); if (RENDERER.getScale() < RENDERER.getDeviceMaxScale()) var5.add(createSpannableForMenu(""Zoom In Max"")).setTitleCondensed(""Zoom In Max""); var5.add(createSpannableForMenu(""Zoom Out"")).setTitleCondensed(""Zoom Out""); var5.add(createSpannableForMenu(""Fit to Screen"")).setTitleCondensed(""Fit to Screen""); var5.add(createSpannableForMenu(""Zoom Reset"")).setTitleCondensed(""Zoom Reset""); var1.add(""Info"").setIcon(android.R.drawable.ic_menu_info_details); var1.add(""Help"").setIcon(android.R.drawable.ic_menu_help); var1.add(""Settings"").setIcon(android.R.drawable.ic_menu_preferences); return true; } "	0	0	1	0	1	0
"static public RowFlagChange Func1(LineNumberReader var1, Pool var2) throws Exception { int var3 = -1; boolean var4 = false; boolean var5 = false; String var6; while ((var6 = var1.readLine()) != null && !""/ec/"".equals(var6)) { int var7 = var6.indexOf('='); CharSequence var8 = var6.subSequence(0, var7); String var9 = var6.substring(var7 + 1); if (""var3"".equals(var8)) { var3 = Integer.parseInt(var9); } else if (""var4"".equals(var8)) { var4 = Boolean.parseBoolean(var9); } else if (""var5"".equals(var8)) { var4 = Boolean.parseBoolean(var9); } } RowFlagChange var10 = new RowFlagChange(var3, var5); var10.var4 = var4; return var10; } "	1	0	1	1	1	0
"private static String Func1(DataType_c var1) { String var2 = ""Checking data type "" + var1.getName() + CR; Package_c var3 = Package_c.getOneEP_PKGOnR8000(PackageableElement_c .getOnePE_PEOnR8001(var1)); if (var3 != null) { String var4 = VerifierInvocationHandler.pathToClassName(var3 .Getpath("""") + ""::"" + var1.getName()); Class<?> var5 = null; BPClassLoader var6 = Vm_c.getVmCl(var3.Getsystemid()); try { var5 = var6.loadClass(var4); } catch (ClassNotFoundException cnf) { var2 += ""User Data type "" + var4 + "" not found, mapping will be performed to default core type."" + CR; } if (var5 != null) { Method var7 = null; Method var8 = null; try { var7 = var5.getDeclaredMethod(""getValue"", new Class<?>[0]); } catch (SecurityException e) { var2 += ""Security exception getting "" + ""realized user data type read accessor for: "" + var1.getName() + ""."" + CR; } catch (NoSuchMethodException e) { } try { Class<?> var9 = getClassForCoreTypeOf(var1, false); var8 = var5.getDeclaredMethod(""setValue"", new Class<?>[] { var9 }); } catch (SecurityException e) { var2 += ""Security exception getting "" + ""realized user data type write accessor for: "" + var1.getName() + ""."" + CR; } catch (NoSuchMethodException e) { } if (var7 != null) { if ((var7.getModifiers() & Modifier.PUBLIC) == 0) { var2 += ""Read accessor for "" + var1.getName() + "" must be public."" + CR; } if ((var7.getModifiers() & Modifier.STATIC) == 1) { var2 += ""Read accessor for "" + var1.getName() + "" must be non-static."" + CR; } } if (var8 != null) { if ((var8.getModifiers() & Modifier.PUBLIC) == 0) { var2 += ""Write accessor for "" + var1.getName() + "" must be public."" + CR; } if ((var8.getModifiers() & Modifier.STATIC) == 1) { var2 += ""Write accessor for "" + var1.getName() + "" must be non-static."" + CR; } } if (var7 == null || var8 == null) { Field var10 = null; try { var10 = var5.getDeclaredField(""value""); } catch (SecurityException e) { var2 += ""Security exception getting realized var10: "" + ""value."" + CR; var2 += e.getLocalizedMessage() + CR; } catch (NoSuchFieldException e) { var2 += ""No accessors or value var10 found for: "" + var1.getName() + ""."" + CR; } if (var10 != null) { if ((var10.getModifiers() & Modifier.PUBLIC) == 0) { if (var7 == null && var8 == null) { var2 += ""Field 'value' "" + "" must be public or preferably, "" + ""get and set accessors provided."" + CR; } else if (var7 != null) { var2 += ""Missing write accessor for: "" + var1.getName() + ""."" + CR; } else if (var8 != null) { var2 += ""Missing write accessor for: "" + var1.getName() + ""."" + CR; } } else { var2 += ""Value var10 for "" + var1.getName() + "" is public. Recommend "" + ""providing read and write accessors."" + CR; } if ((var10.getModifiers() & Modifier.STATIC) == 1) { var2 += ""Value var10 for "" + var1.getName() + "" must be non-static."" + CR; } } } } } return var2; } "	0	0	0	0	0	1
"public List<ClientDetails> Func1() { List<ClientDetails> var1 = new ArrayList<>(); try { EtcdResponsePromise<EtcdKeysResponse> var2 = etcdClient.getDir(EtcdPaths.CD_PATH).recursive().send(); EtcdKeysResponse var3 = var2.get(); List<EtcdKeysResponse.EtcdNode> var4 = var3.node.nodes; for (EtcdKeysResponse.EtcdNode var5 : var4) { var1.add(createClientDetails(var5.value)); } return var1; } catch (IOException | TimeoutException | EtcdException e) { e.printStackTrace(); throw new RuntimeException(""Change it to something more elegance""); } } "	0	0	0	0	0	1
public static void Func1(DirectedGraph<Integer, MyEdge> var1, String var2) { Graph<Integer, String> var3 = convertGraphForVisualization(var1); Layout<Integer, String> var4 = new CircleLayout(var3); var4.setSize(new Dimension(800,600)); BasicVisualizationServer<Integer,String> var5 = new BasicVisualizationServer<Integer,String>(var4); var5.setPreferredSize(new Dimension(850,650)); Transformer<Integer,Paint> var6 = new Transformer<Integer,Paint>() { public Paint Func2(Integer var7) { return Color.GREEN; } }; float var8[] = {10.0f}; final Stroke var9 = new BasicStroke(1.0f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER, 10.0f, var8, 0.0f); Transformer<String, Stroke> var10 = new Transformer<String, Stroke>() { public Stroke Func2(String var11) { return var9; } }; var5.getRenderContext().setVertexFillPaintTransformer(var6); var5.getRenderContext().setEdgeStrokeTransformer(var10); var5.getRenderContext().setVertexLabelTransformer(new ToStringLabeller()); var5.getRenderContext().setEdgeLabelTransformer(new ToStringLabeller()); var5.getRenderer().getVertexLabelRenderer().setPosition(Position.CNTR); JFrame var12 = new JFrame(var2); var12.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); var12.getContentPane().add(var5); var12.pack(); var12.setVisible(true); } 	0	0	1	1	0	0
public static void Func1( List<DirectedGraph<Integer, MyEdge>> var1, String var2) { int var3 = 0; for (DirectedGraph<Integer, MyEdge> var4 : var1){ visualizeGraph(var4, var2+var3++); } } 	0	0	1	0	0	0
"public void Func1(Asset var1) { if (var1 == null) { throw new InvalidParameterException(""The STEEM reward can't be null.""); } else if (!var1.getSymbol().equals(AssetSymbolType.VESTS)) { throw new InvalidParameterException(""The STEEM reward must be of symbol type STEEM.""); } else if (var1.getAmount() < 0) { throw new InvalidParameterException(""Cannot claim a negative STEEM amount""); } this.var1 = var1; } "	0	0	0	1	1	0
"private void Func1() throws Exception { logger.info(""Syncing all events...""); String var1 = null; this.events = null; do { this.calendarRequest.setPageToken(var1); try { this.events = this.calendarRequest.execute(); } catch (GoogleJsonResponseException e) { if (e.getStatusCode() == 410) { logger.info(""Invalid sync token, clearing var3 store and re-syncing...""); dataStoreSyncSettings.delete(SYNC_TOKEN_KEY); dataStoreEvent.clear(); this.sync(); } else { throw e; } } List<Event> var2 = this.events.getItems(); if (var2.size() == 0) { logger.info(""No new events to sync.""); } else { for (Event var3 : var2) { this.syncEventFromGoogle(var3); } } var1 = this.events.getNextPageToken(); } while (var1 != null); } "	0	0	0	0	0	1
public boolean Func1() { return ascii.length == 0 && (text_path.equals(EMPTY_PAPER_REF) || text_path.isEmpty()); } 	1	0	0	0	1	0
"@GET @Path(""CalendarioMilestones({var1})/tags"") public List<String> Func1(@PathParam(""var1"") Long var1) { return calendarioMilestoneManager.findDescFoglieByIdMilestone(var1); } "	0	0	1	1	0	0
@Override public EntryProof Func1(int var1, int var2) { checkpoint(); List<HashValue> var3 = withVerifiableLog(verifiableLog -> verifiableLog.var3(var1, var2) .stream() .map(hashBytes -> new HashValue(HashingAlgorithm.SHA256, bytesToString(hashBytes))) .collect(Collectors.toList())); return new EntryProof(Integer.toString(var1), var3); } 	0	0	1	1	0	0
"@Override public void Func1(final MasterContext<MASTER_RESULT, WORKER_RESULT> var1) { var1.setWorkerResults(null); new BasicCoordinatorCommand() { @Override public void Func2() throws KeeperException, InterruptedException { NettyMasterCoordinator.this.masterResult = var1.getMasterResult(); updateMasterHaltStatus(var1); boolean var2 = false; String var3 = getCurrentMasterNode(var1.getAppId(), var1.getCurrentIteration()) .toString(); String var4 = getCurrentMasterSplitNode(var1.getAppId(), var1.getCurrentIteration()).toString(); LOG.debug(""master result:{}"", var1.getMasterResult()); final long var5 = System.nanoTime(); try { byte[] var6 = getMasterSerializer().objectToBytes(var1.getMasterResult()); var2 = setBytesToZNode(var3, var4, var6, CreateMode.PERSISTENT); synchronized(LOCK) { clear(var1.getProps()); NettyMasterCoordinator.this.currentInteration = var1.getCurrentIteration() + 1; NettyMasterCoordinator.this.canUpdateWorkerResultMap = true; } } catch (KeeperException.NodeExistsException e) { LOG.warn(""Has such node:"", e); } LOG.info(""set results to zookeeper with time {}ms"", TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - var5)); final int var7 = NumberFormatUtils.getInt( var1.getProps().getProperty(GuaguaConstants.GUAGUA_CLEANUP_INTERVAL), GuaguaConstants.GUAGUA_DEFAULT_CLEANUP_INTERVAL); if(var1.getCurrentIteration() >= (var7 + 1)) { final boolean var8 = var2; NettyMasterCoordinator.this.cleanOldZkDataThreadPool.submit(new Runnable() { @Override public void Func3() { String var9 = getMasterNode(var1.getAppId(), var1.getCurrentIteration() - var7).toString(); try { getZooKeeper().deleteExt(var9, -1, false); if(var8) { var9 = getCurrentMasterSplitNode(var1.getAppId(), var1.getCurrentIteration() - var7).toString(); getZooKeeper().deleteExt(var9, -1, true); } } catch (KeeperException.NoNodeException e) { if(System.nanoTime() % 20 == 0) { LOG.warn(""No such node:{}"", var9); } } catch (KeeperException ignore) { } catch (InterruptedException ignore) { } } }); } LOG.info(""master results write to var9.""); } }.execute(); } "	0	0	1	0	0	0
@Override public void Func1(@NonNull View var1, int var2) { if (mAdvancedEditorContainer != null && mIsCollapsible && var2 == BottomSheetBehavior.STATE_COLLAPSED) { setAdvancedEditorVisible(false); } } 	0	0	0	0	0	1
public void Func1(String var1, double var2) { checkForNullKey(var1); putString(var1, String.valueOf(var2)); } 	1	0	0	0	1	0
"@Value(""classpath:study-defaults/email-verification-subject.txt"") public void Func1(org.springframework.core.io.Resource var1) { this.defaultEmailVerificationTemplateSubject = BridgeUtils.toStringQuietly(var1); } "	0	0	1	1	0	0
@Autowired public void Func1(DirectoryDao var1) { this.var1 = var1; } 	0	0	1	1	0	0
"@Value(""classpath:study-defaults/email-verification.txt"") public void Func1(org.springframework.core.io.Resource var1) { this.defaultEmailVerificationTemplate = BridgeUtils.toStringQuietly(var1); } "	0	0	1	1	0	0
@Autowired public void Func1(StudyDao var1) { this.var1 = var1; } 	0	0	1	1	0	0
@Autowired public void Func1(StudyValidator var1) { this.var1 = var1; } 	0	0	1	0	0	0
@Autowired public void Func1(StudyConsentService var1) { this.var1 = var1; } 	0	0	1	1	0	0
public DisplayBase Func1(Animator Func1) { this.mAnimator = Func1; mAnimParameter = mAnimator.getInitialAnimParameter(); return this; } 	0	0	0	0	0	1
"@Path(""/nodes/node/import/{dest-id}"") @POST public String Func1(String var1, @CookieParam(""var2"") String var2, @CookieParam(""credential"") String var3, @QueryParam(""group"") int var4, @PathParam(""dest-id"") String var5,@Context ServletConfig var6,@Context HttpServletRequest var7, @QueryParam(""srcetag"") String var8, @QueryParam(""srcecode"") String var9, @QueryParam(""uuid"") String var10) { UserInfo var11 = checkCredential(var7, var2, var3, null); Connection var12 = null; try { var12 = SqlUtils.getConnection(servContext); String var13 = dataProvider.Func1(var12, new MimeType(""text/xml""), var5, var8, var9, var10, var11.userId, var4).toString(); logRestRequest(var7, var1, var13, Status.OK.getStatusCode()); if(var13 == ""faux"") { throw new RestWebApplicationException(Status.FORBIDDEN, ""Vous n'avez pas les droits d'acces""); } return var13; } catch(RestWebApplicationException ex) { throw new RestWebApplicationException(Status.FORBIDDEN, ex.getResponse().getEntity().toString()); } catch(Exception ex) { ex.printStackTrace(); logRestRequest(var7, var1,ex.getMessage()+""\n\n""+javaUtils.getCompleteStackTrace(ex), Status.INTERNAL_SERVER_ERROR.getStatusCode()); throw new RestWebApplicationException(Status.INTERNAL_SERVER_ERROR, ex.getMessage()); } finally { try { if( var12 != null ) var12.close(); } catch( SQLException e ){ e.printStackTrace(); } } } "	0	0	1	0	0	0
"private void Func1() { AsyncCallback<ConfigurationData> var1 = new AsyncCallback<ConfigurationData>() { public void Func2(ConfigurationData var2) { SearchPanel.this.configuration = var2; } public void Func3(Throwable var3) { logger.severe(""Error loading configuration: "" + var3.getMessage()); } }; configurationService.getConfiguration(var1); } "	0	0	1	1	1	0
"public static void Func1() throws IOException { FileWriter var1 = new FileWriter(FILE); PROP.store(var1, ""Robot Configuration""); var1.close(); } "	0	0	1	0	0	0
"public MetadataProvider Func1() throws OAException { if (_oMetadataProvider != null) { _oLogger.debug(""Returning existing MetadataProvider for SAML2 IDP '""+_sID+""'""); return _oMetadataProvider; } if (_oMetadataXMLObject != null) { _oLogger.debug(""Creating new XMLObject MetadataProvider for SAML2 IDP '""+_sID+""'""); XMLObjectMetadataProvider var1 = new XMLObjectMetadataProvider(_oMetadataXMLObject); var1.initialize(); _oMetadataProvider = var1; return var1; } if (_sMetadata != null) { _oLogger.debug(""Creating new XML-String MetadataProvider for SAML2 IDP '""+_sID+""'""); try { BasicParserPool var2 = new BasicParserPool(); var2.setNamespaceAware(true); StringReader var3 = new StringReader(_sMetadata); _oMetadataXMLObject = XMLObjectHelper.unmarshallFromReader(var2, var3); XMLObjectMetadataProvider var1 = new XMLObjectMetadataProvider(_oMetadataXMLObject); var1.initialize(); _oMetadataProvider = var1; return var1; } catch (XMLParserException e) { _oLogger.warn(""XMLParser exception with establishing metadata for SAML2IDP, trying file/url: ""+e.getMessage()); } catch (UnmarshallingException e) { _oLogger.warn(""Unmarshalling exception with establishing metadata for SAML2IDP, trying file/url: ""+e.getMessage()); } } _oLogger.debug(""Creating new MetadataProvider from configured source for SAML2 IDP '""+_sID+""'""); MetadataProviderConfiguration var4 = new MetadataProviderConfiguration( _sMetadataURL, 0, _sMetadataFile, _sMetadata); String var5 = var4.getFingerprint(); IMetadataProviderManager var6 = null; MetadataProvider var1 = null; if (_sMPMId != null) var6 = MdMgrManager.getInstance().getMetadataProviderManager(_sMPMId); if (var6 != null) { var1 = var6.getProviderFor(_sID, _dLastModified); } if (var1 != null) { String var7 = MetadataProviderUtil.getMetadataProviderFingerprint(var1); if (! var7.equals(var5)) { _oLogger.info(""Metadata configuration changed; re-initializing metadata for IDP ""+_sID); var6.removeProviderFor(_sID); var1 = null; } else { if (_oLogger.isDebugEnabled()) { String var8 = null; if (var1 instanceof AbstractReloadingMetadataProvider) { DateTime var9 = ((AbstractReloadingMetadataProvider) var1).getNextRefresh(); var8 = var9.toString(); } _oLogger.debug(""Using cached MetadataProvider for IDP ""+_sID+ (var8==null?"""":"" (next refresh: ""+var8+"")"")); } } } if (var1 == null) { var1 = MetadataProviderUtil.createMetadataProvider(_sID, var4, var6); } _oMetadataProvider = var1; return _oMetadataProvider; } "	0	0	0	0	0	1
"public JSONObject Func1(String[] var1) throws Exception { final String var2 = getRoute() + StringUtils.join(var1, ""|"") + getApiCode(); String var3 = WebUtil.getInstance().getRequest(var2); return new JSONObject(var3); } "	0	0	0	0	0	1
public static Map Func1(Class var1, boolean var2) { ClassCache var3 = (var2 ? _staticMethodCache : _instanceMethodCache); Map var4; if ((var4 = (Map) var3.get(var1)) == null) { synchronized (var3) { if ((var4 = (Map) var3.get(var1)) == null) { var4 = new HashMap(23); for (Class var5 = var1; var5 != null; var5 = var5.getSuperclass()) { Method[] var6 = var5.Func1(); for (int var7 = 0, var8 = var6.length; var7 < var8; var7++) { if (!isMethodCallable(var6[var7])) continue; if (Modifier.isStatic(var6[var7].getModifiers()) == var2) { List var9 = (List) var4.get(var6[var7].getName()); if (var9 == null) var4.put(var6[var7].getName(), var9 = new ArrayList()); var9.add(var6[var7]); } } } var3.put(var1, var4); } } } return var4; } 	0	0	1	1	1	0
"@POST @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Path(""/query/var11"") public Response Func1(@Context HttpHeaders var1,QueryChannelRequest var2) { Connection var3 = null; PreparedStatement var4 = null; ResultSet var5 = null; Map<String,Integer> var6 = new HashMap<String,Integer>(3); Map<String,Integer> var7 = new HashMap<String,Integer>(3); try { var3 = DbConnectionManager.getConnection(); StringBuffer var8 = new StringBuffer(); for(String var9:var2.getSubscribers()) { JID var10 = RestUtils.createJID(var9, var2.getMmxAppId(), var2.getDeviceId()); if(var8.length() == 0) { var8.append(""'"").append(var10).append(""'""); }else{ var8.append("",'"").append(var10).append(""'""); } } String var11 = ""SELECT nodeID,count(*) FROM ofPubsubSubscription where state = 'subscribed' AND nodeID "" + ""like '"" + ""/"" + var2.getMmxAppId() + ""%' AND "" + ""jid in ("" + var8.toString() + "") group by nodeID""; var4 = var3.prepareStatement(var11); var5 = var4.executeQuery(); while (var5.next()) { var6.put(var5.getString(1),var5.getInt(2)); } StringBuffer var12 = new StringBuffer(); for(String var13:var6.keySet()) { if(var12.length() == 0) { var12.append(""'"").append(var13).append(""'""); }else{ var12.append("",'"").append(var13).append(""'""); } } String var14 = ""SELECT nodeID, count(*) FROM ofPubsubSubscription where state = 'subscribed' AND "" + ""nodeID in ("" + var12 + "") group by nodeID""; var4 = var3.prepareStatement(var14); var5 = var4.executeQuery(); while (var5.next()) { var7.put(var5.getString(1),var5.getInt(2)); } List<String> var15 = new ArrayList<String>(3); if(!var2.getMatchFilter().equals(QueryChannelRequest.MatchType.ANY_MATCH)) { for (String var16 : var6.keySet()) { int var17 = var7.get(var16); int var18 = var6.get(var16); if (var2.getMatchFilter().equals(QueryChannelRequest.MatchType.EXACT_MATCH)) { if (var18 == var17 && var18 == var2.getSubscribers().size()) { var15.add(var16); } } else if (var2.getMatchFilter().equals(QueryChannelRequest.MatchType.SUBSET_MATCH)) { if (var17 >= var18 && var18 >= var2.getSubscribers().size()) { var15.add(var16); } } else { var15.add(var16); } } }else{ for (String var16 : var6.keySet()) { var15.add(var16); } } List<ChannelInfo> var19 = new ArrayList<ChannelInfo>(3); if(var15.size() > 0) { StringBuffer var20 = new StringBuffer(); for(String var21:var15) { MMXChannelId var22 = getChannelName(var2.getUserId(), var21); Node var13 = MMXChannelManager.getInstance().getChannelNode(var2.getMmxAppId(),var22); ChannelInfo var23 = MMXChannelManager.getInstance().nodeToChannelInfo(null,var13); var19.add(var23); } } QueryChannelResponse var24 = new QueryChannelResponse(ErrorCode.NO_ERROR.getCode(), ""Success""); var24.setChannels(var19); return RestUtils.getCreatedJAXRSResp(var24); } catch (Exception sqlex) { LOGGER.error(sqlex.getMessage(), sqlex); ErrorResponse var25 = new ErrorResponse(ErrorCode.UNKNOWN_ERROR, """"); return RestUtils.getBadReqJAXRSResp(var25); } finally { DbConnectionManager.closeConnection(var5, var4, var3); } } "	0	0	0	0	0	1
"private void Func1() throws IOException { serverSocket = mBtAdapter.listenUsingInsecureRfcommWithServiceRecord(""ESE-Clock-Sync"", ClockSyncManager.RECORD_UUID); } "	0	0	0	0	0	1
@Override protected boolean Func1(final Trigger var1) { boolean var2 =  var1.isEnabled() && ( var1.getType() != null ); return var2; } 	0	0	0	0	0	1
"@Test(timeout = 180000) public void Func1() throws IOException { Configuration var1 = HBaseConfiguration.create(); var1.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE, 300 * 1024); var1.set(FlushPolicyFactory.HBASE_FLUSH_POLICY_KEY, FlushNonSloppyStoresFirstPolicy.class.getName()); var1.setLong(FlushLargeStoresPolicy.HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN, 75 * 1024); var1.setDouble(CompactingMemStore.IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY, 0.8); var1.set(CompactingMemStore.COMPACTING_MEMSTORE_TYPE_KEY, String.valueOf(MemoryCompactionPolicy.BASIC)); var1.setInt(MemStoreCompactor.COMPACTING_MEMSTORE_THRESHOLD_KEY, 1); HRegion var2 = initHRegion(""Func1"", var1); verifyInMemoryFlushSize(var2); for (int var3 = 1; var3 <= 1200; var3++) { var2.put(createPut(1, var3)); if (var3 <= 100) { var2.put(createPut(2, var3)); if (var3 <= 50) { var2.put(createPut(3, var3)); } } } for (int var3 = 100; var3 < 2000; var3++) { var2.put(createPut(2, var3)); } long var4 = var2.getMemstoreSize(); MemstoreSize var5 = var2.getStore(FAMILY1).getSizeOfMemStore(); MemstoreSize var6 = var2.getStore(FAMILY2).getSizeOfMemStore(); MemstoreSize var7 = var2.getStore(FAMILY3).getSizeOfMemStore(); assertTrue(var5.getDataSize() > 0); assertTrue(var6.getDataSize() > 0); assertTrue(var7.getDataSize() > 0); assertEquals(var4, var5.getDataSize() + var6.getDataSize() + var7.getDataSize()); ((CompactingMemStore) ((HStore)var2.getStore(FAMILY1)).memstore).flushInMemory(); ((CompactingMemStore) ((HStore)var2.getStore(FAMILY3)).memstore).flushInMemory(); while (((CompactingMemStore) ((HStore)var2.getStore(FAMILY1)).memstore) .isMemStoreFlushingInMemory()) { Threads.sleep(10); } while (((CompactingMemStore) ((HStore)var2.getStore(FAMILY3)).memstore) .isMemStoreFlushingInMemory()) { Threads.sleep(10); } var2.flush(false); MemstoreSize var8 = var2.getStore(FAMILY1).getSizeOfMemStore(); MemstoreSize var9 = var2.getStore(FAMILY2).getSizeOfMemStore(); MemstoreSize var10 = var2.getStore(FAMILY3).getSizeOfMemStore(); assertTrue(var5.getHeapSize() > var8.getHeapSize()); assertEquals(var5.getDataSize(), var8.getDataSize()); assertEquals(0, var9.getDataSize()); for (int var3 = 1; var3 <= 1200; var3++) { var2.put(createPut(1, var3)); if (var3 <= 100) { var2.put(createPut(2, var3)); if (var3 <= 50) { var2.put(createPut(3, var3)); } } } for (int var3 = 100; var3 < 2000; var3++) { var2.put(createPut(2, var3)); } MemstoreSize var11 = var2.getStore(FAMILY1).getSizeOfMemStore(); ((CompactingMemStore) ((HStore)var2.getStore(FAMILY1)).memstore).flushInMemory(); ((CompactingMemStore) ((HStore)var2.getStore(FAMILY3)).memstore).flushInMemory(); while (((CompactingMemStore) ((HStore)var2.getStore(FAMILY1)).memstore) .isMemStoreFlushingInMemory()) { Threads.sleep(10); } while (((CompactingMemStore) ((HStore)var2.getStore(FAMILY3)).memstore) .isMemStoreFlushingInMemory()) { Threads.sleep(10); } var2.flush(false); MemstoreSize var12 = var2.getStore(FAMILY1).getSizeOfMemStore(); MemstoreSize var13 = var2.getStore(FAMILY2).getSizeOfMemStore(); assertEquals(2*var5.getDataSize(), var12.getDataSize()); assertEquals( var5.getHeapSize() - var8.getHeapSize(), var11.getHeapSize() - var12.getHeapSize()); assertEquals(3, // active, one in pipeline, snapshot ((CompactingMemStore) ((HStore)var2.getStore(FAMILY1)).memstore).getSegments().size()); assertEquals(""\n<<< DEBUG: The data--heap sizes of stores before/after first flushes,"" + "" CF1: "" + var5.getDataSize() + ""/"" + var8 .getDataSize() + ""--"" + var5.getHeapSize() + ""/"" + var8 .getHeapSize() + "", CF2: "" + var6.getDataSize() + ""/"" + var9.getDataSize() + ""--"" + var6.getHeapSize() + ""/"" + var9.getHeapSize() + "", CF3: "" + var7.getDataSize() + ""/"" + var10.getDataSize() + ""--"" + var7.getHeapSize() + ""/"" + var10.getHeapSize() + ""\n<<< AND before/after second flushes "" + "" CF1: "" + var11.getDataSize() + ""/"" + var12 .getDataSize() + ""--"" + var11.getHeapSize() + ""/"" + var12 .getHeapSize() + ""\n"", 0, var13.getDataSize()); HBaseTestingUtility.closeRegionAndWAL(var2); } "	0	0	0	0	0	1
"@Override @Optional.Method(modid = Mods.ComputerCraft) public String[] Func1() { return new String[] { ""isEnd"", ""isReady"", ""getSize"", ""getLabel"", ""getState"", ""setLabel"", ""setSpeed"", ""setVolume"", ""seek"", ""read"", ""write"", ""play"", ""stop"" }; } "	0	0	0	0	0	1
@Override public boolean Func1(MotionEvent var1) { if (CommandLine.getInstance().hasSwitch(ChromeSwitches.ENABLE_VR_SHELL_DEV) && var1.getActionMasked() == MotionEvent.ACTION_DOWN) { nativeOnTriggerEvent(mNativeVrShell); } return super.Func1(var1); } 	0	0	0	0	0	1
private void Func1(boolean var1, boolean var2) { if (!mInVr) return; mRequestedWebVR = false; if (var1) { if (!var2 || !mVrDaydreamApi.exitFromVr(EXIT_VR_RESULT, new Intent())) { mVrDaydreamApi.setVrModeEnabled(false); } } else { mVrDaydreamApi.setVrModeEnabled(false); mLastVRExit = SystemClock.uptimeMillis(); } mActivity.setRequestedOrientation(mRestoreOrientation); mVrShell.pause(); removeVrViews(); clearVrModeWindowFlags(); destroyVrShell(); mInVr = false; mTab.removeObserver(mTabObserver); mTab.updateFullscreenEnabledState(); mTab.updateBrowserControlsState(BrowserControlsState.SHOWN, true); } 	0	0	0	0	0	1
"@Specialization(limit = ""INLINE_CACHE_SIZE"", guards = {""contextLevel != 0"", ""var1.getSOMClass() == var2""}) public final Object Func1(final SObjectWithClass var1, @Cached(""var1.getSOMClass()"") final SClass var2, @Cached(""getEnclosingClass(var1)"") final SClass var3) { return getEnclosingObject(var1, var3); } "	1	0	0	0	1	0
"@Specialization(guards = {""contextLevel != 0""}, contains = ""fixedLookup"") public final Object Func1(final SObjectWithClass var1) { return getEnclosingObject(var1, getEnclosingClass(var1)); } "	1	0	1	1	1	0
"@SuppressWarnings(""javadoc"") private void Func1(Element var1) { DOMSource var2 = new DOMSource(var1); try { StreamResult var3 = new StreamResult(out); XML_TRANSFORMER.transform(var2, var3); out.Func1(); } catch (Throwable e) { throw new InternalAPIError(e); } } "	0	0	1	0	0	0
@Override public CommandResult Func1() throws CommandException { List<ReadOnlyTask> var1 = model.getFilteredTaskList(); if (filteredTaskListIndex >= var1.size()) { throw new CommandException( Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX); } ReadOnlyTask var2 = var1.get(filteredTaskListIndex); Task var3; try { var3 = createEditedTask(var2, editTaskDescriptor); } catch (IllegalValueException e) { throw new CommandException(e.getMessage()); } try { model.updateTask(filteredTaskListIndex, var3); } catch (UniqueTaskList.DuplicateTaskException dpe) { throw new CommandException(MESSAGE_DUPLICATE_PERSON); } model.updateFilteredListToShowAll(); return new CommandResult( String.format(MESSAGE_EDIT_PERSON_SUCCESS, var2)); } 	0	0	0	0	0	1
"@Override protected void Func1() { Cursor var1 = dbManager.getPlans(); if(var1.moveToFirst()){ plannerCursorAdapter.swapCursor(var1); } else { showToast(""Error moving var1 to first element. DB is empty.""); } super.Func1(); } "	0	0	0	0	0	1
public JoinRequest Func1(boolean var1) { final Credentials var2 = (var1 && securityContext != null) ? securityContext.getCredentialsFactory().newCredentials() : null; return new JoinRequest(Packet.VERSION, buildInfo.getBuildNumber(), address, localMember.getUuid(), localMember.isLiteMember(), createConfigCheck(), var2, config.getMemberAttributeConfig().getAttributes()); } 	0	0	0	0	0	1
"@Override public void Func1(AdapterView<?> var1, View var2, int var3, long var4) { Log.d(""BaseActivity"", String.format(""Func1: %d"", var3)); if (var3 == 0) { Intent var5 = new Intent(); var5.setClass(BaseActivity.this, LoginActivity.class); BaseActivity.this.startActivityForResult(var5, LoginActivity.REQUEST_CODE_LOGIN); return; } HashMap<String, Object> var6 = (HashMap<String, Object>) var1.getAdapter().getItem(var3); String var7 = (String) var6.get(""menuText""); int var8 = (Integer) var6.get(""icon""); drawerLayout.closeDrawer(GravityCompat.START); switch (var3 - 1) { case 0: Intent var9 = new Intent(BaseActivity.this, MainActivity.class); BaseActivity.this.startActivityForResult(var9, LoginActivity.REQUEST_CODE_LOGIN); break; case 1: Intent var10 = new Intent(BaseActivity.this, ListArtistActivity.class); BaseActivity.this.startActivity(var10); break; case 2: Intent var11 = new Intent(BaseActivity.this, LifeLabActivity.class); BaseActivity.this.startActivity(var11); break; case 3: if (UserInfo.isUserLogged(BaseActivity.this)) { Intent var12 = new Intent(BaseActivity.this, FeedbackActivity.class); BaseActivity.this.startActivity(var12); } else { Intent var5 = new Intent(); var5.setClass(BaseActivity.this, LoginActivity.class); BaseActivity.this.startActivityForResult(var5, LoginActivity.REQUEST_CODE_FEEDBACK); } break; case 5: if (UserInfo.isUserLogged(BaseActivity.this)) { Intent var13 = new Intent(BaseActivity.this, MyCollectionActivity.class); BaseActivity.this.startActivity(var13); } else { Intent var5 = new Intent(); var5.setClass(BaseActivity.this, LoginActivity.class); BaseActivity.this.startActivityForResult(var5, LoginActivity.REQUEST_CODE_MY_COLLECTION); } break; case 6: if (UserInfo.isUserLogged(BaseActivity.this)) { Intent var14 = new Intent(BaseActivity.this, ListSubscribedArtistActivity.class); BaseActivity.this.startActivity(var14); } else { Intent var5 = new Intent(); var5.setClass(BaseActivity.this, LoginActivity.class); BaseActivity.this.startActivityForResult(var5, LoginActivity.REQUEST_CODE_SUBSCRIBED_ARTISTS); } break; case 7: Intent var15 = new Intent(BaseActivity.this, AboutActivity.class); BaseActivity.this.startActivity(var15); break; case 9: ShareUtils var16 = new ShareUtils(BaseActivity.this); var16.setUrl(CommonUtilities.SHARE_URL); var16.setContent(getResources().getString(R.string.share_text)); Bitmap var17 = BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher); var16.setPicture(var17); var16.share(); break; case 10: DataCleanUtils.cleanAllApplicationData(BaseActivity.this); break; case 11: Log.d(""BaseActivity"", ""Logout""); UserInfo.logout(BaseActivity.this); BaseActivity.this.tvusername.setText(R.string.login_gologin); BaseActivity.this.tvuserdesc.setText(R.string.login_to_see_more); break; case 4: default: break; } } "	0	0	0	0	0	1
@Override public boolean Func1(Object var1) { if (!(var1 instanceof Weapon)) { return false; } else { Class var2 = (Class) var1; return    this.getId() == var2.getId() && this.getNameOfWeapon().Func1(var2.getNameOfWeapon()) && this.getDamage() == var2.getDamage() && this.getNumberOfUses() == var2.getNumberOfUses(); } } 	0	0	1	0	1	0
"@Override public List<SerialMessage> Func1(ZWaveThingChannel var1, ZWaveNode var2) { ZWaveThermostatFanStateCommandClass var3 = (ZWaveThermostatFanStateCommandClass) var2 .resolveCommandClass(ZWaveCommandClass.CommandClass.THERMOSTAT_FAN_MODE, var1.getEndpoint()); if (var3 == null) { return null; } logger.debug(""NODE {}: Generating poll message for {}, endpoint {}"", var2.getNodeId(), var3.getCommandClass().getLabel(), var1.getEndpoint()); SerialMessage var4 = var2.encapsulate(var3.getValueMessage(), var3, var1.getEndpoint()); List<SerialMessage> var5 = new ArrayList<SerialMessage>(1); var5.add(var4); return var5; } "	0	0	0	0	0	1
"@Override public String Func1() { return ""ServerMessage[messageID="" + messageID + "",priority="" + this.getPriority() + "", bodySize="" + this.getBodyBuffer().capacity() + "",expiration="" + (this.getExpiration() != 0 ? new java.util.Date(this.getExpiration()) : 0) + "", durable="" + durable + "", address="" + getAddress()  + "",properties="" + properties.Func1() + ""]@"" + System.identityHashCode(this); } "	0	0	0	0	0	1
"public void Func1(byte[] var1) { System.out.println(""Adding table var1""); if(var1.length == 3){ try { int var2 = getTableIndexByDestination(var1[0]); routingTable.set(var2, var1[0]); routingTable.set(var2 + 1, var1[1]); routingTable.set(var2 + 2, var1[2]); IncomingPacketHandler.printArray(routingTable.toArray()); } catch (DestinationNotInTableException e) { routingTable.add(var1[0]); routingTable.add(var1[1]); routingTable.add(var1[2]); } } } "	0	0	0	0	0	1
"@Test public void Func1() { assertEquals(testManager.getNewJobID(), 3); volunteerList = new ArrayList<ArrayList<String>>(); Job var1 = new Job(3, ""Test Park 4"", 5, 5, 5, ""06052015"", ""06052015"", ""testmanager@gmail.com"", volunteerList); testManager.addJob(var1); assertEquals(testManager.getNewJobID(), 4); } "	0	0	0	0	0	1
public String Func1() { return value; } 	0	0	0	0	0	1
public static void Func1() { mSurface.flipEGL(); } 	1	0	0	0	0	0
"public static Notify Func1( Message var1, String var2, String var3, String var4 ) { Notify var5 = b2_factory.createNotify(); NotificationMessageHolderType var6 = b2_factory.createNotificationMessageHolderType(); NotificationMessageHolderType.Message var7 = b2_factory.createNotificationMessageHolderTypeMessage(); @SuppressWarnings(""unchecked"") JAXBElement var8 = new JAXBElement(new QName(""npex:NotifyContent""), String.class, var1.getMessage()); if (var2 != null) { var6.setSubscriptionReference(new W3CEndpointReferenceBuilder().address(var2).build()); } if (var3 != null) { var6.setProducerReference(new W3CEndpointReferenceBuilder().address(var3).build()); } if (var4 != null) { TopicExpressionType var9 = b2_factory.createTopicExpressionType(); var9.setDialect(var4); var9.getContent().add(var1.getTopic().getFullTopicString()); var6.setTopic(var9); } var7.setAny(var8); var6.setMessage(var7); var5.getNotificationMessage().add(var6); return var5; } "	0	0	1	1	1	0
"@Given(""^CSDL to validate like /interaction.content contains \""([^\""]*)\""/$"") public void Func1(String var1) throws Throwable { throw new PendingException(); } "	0	0	0	0	0	1
"public Member Func1(ArrayList<Member> var1) { presentMembers(var1); System.out.println(""Choose a user to delete by entering the corresponding number:""); String var2 = in.nextLine(); if (isInteger(var2, var1.size())){ return var1.get(input - 1); }else { System.out.println(""Please provide a Integer between 1 and "" + var1.size() + "".""); presentChangeMember(var1); } return null; } "	1	0	0	0	1	0
"@Override public boolean Func1(final PlotPlayer var1, final String[] var2) { final Location var3 = var1.getLocation(); final Plot var4 = var3.getPlotAbs(); if ((var4 == null) || !var4.hasOwner()) { return !sendMessage(var1, C.NOT_IN_PLOT); } if ((!var4.isOwner(var1.getUUID())) && !Permissions.hasPermission(var1, ""plots.admin.command.continue"")) { MainUtil.sendMessage(var1, C.NO_PLOT_PERMS); return false; } if (!var4.getFlags().containsKey(""done"")) { MainUtil.sendMessage(var1, C.DONE_NOT_DONE); return false; } if (Settings.DONE_COUNTS_TOWARDS_LIMIT && (var1.getAllowedPlots() >= var1.getPlotCount())) { MainUtil.sendMessage(var1, C.NO_PERMISSION, ""plots.admin.command.continue""); return false; } if (var4.getRunning() > 0) { MainUtil.sendMessage(var1, C.WAIT_FOR_TIMER); return false; } FlagManager.removePlotFlag(var4, ""done""); MainUtil.sendMessage(var1, C.DONE_REMOVED); return true; } "	0	0	1	1	1	0
private synchronized Command Func1() { Set<Long> var1 = cmdsInState.get(CommandState.PENDING.getValue()); Set<Long> var2 = cmdsInState.get(CommandState.EXECUTING.getValue()); if (var1.size() == 0) { if(statusCache.size() != 0) batchCommandStatusUpdate(); List<CommandInfo> var3 = getCommansFromDB(); for(CommandInfo var4 : var3) { if(var2.contains(var4.getCid())) continue; Command var5 = getCommand(var4, ssm); cmdsAll.put(var5.getId(), var5); var1.add(var5.getId()); } if (var1.size() == 0) return null; } long var6 = var1.iterator().next(); Command var7 = cmdsAll.get(var6); cmdsAll.remove(var6); cmdsInState.remove(var6); var2.add(var6); return var7; } 	1	1	1	0	1	0
"public void Func1(File var1, File var2, File var3) throws ConfigurationException, IOException { if (var1 == null || !var1.exists()) { if (!var2.equals(var3)) { if (var2.isDirectory()) { mergeDirectories(var1, var2, var3); } else { FileUtils.copyFile(var2, var3); } } } else if (var2 == null || !var2.exists()) { if (!var1.equals(var3)) { if (var1.isDirectory()) { mergeDirectories(var1, var2, var3); } else { FileUtils.copyFile(var1, var3); } } } else { if (var2.isDirectory()) { mergeDirectories(var1, var2, var3); } else if (var2.getName().endsWith("".properties"")) { mergeProperties(var1, var2, var3); } else if (!var2.equals(var3)) { FileUtils.copyFile(var2, var3); } } } "	0	0	0	1	0	0
"@Before public void Func1() { MockitoAnnotations.initMocks(this); RobonectEndpoint var1 = new RobonectEndpoint(""123.456.789.123""); client = new RobonectClient(httpClientMock, var1); } "	0	0	0	0	0	1
"@Override public void Func1() { Faction var1 = this.argAsFaction(0, fme == null ? null : myFaction); if (var1 == null) return; if ( ! FPerm.DISBAND.has(sender, var1, true)) return; if (var1.getFlag(FFlag.PERMANENT)) { msg(""<i>This var1 is designated as permanent, so you cannot disband it.""); return; } for (FPlayer var2 : FPlayers.i.getOnline()) { String var3 = senderIsConsole ? ""A server admin"" : fme.describeTo(var2); if (var2.getFaction() == var1) { var2.msg(""<h>%s<i> disbanded your var1."", var3); } else { var2.msg(""<h>%s<i> disbanded the var1 %s."", var3, var1.getTag(var2)); } } if (Conf.logFactionDisband) P.p.log(""The var1 ""+var1.getTag()+"" (""+var1.getId()+"") was disbanded by ""+(senderIsConsole ? ""console command"" : fme.getName())+"".""); if (Econ.shouldBeUsed()) { double var4 = Econ.getBalance(var1.getAccountId()); Econ.transferMoney(fme, var1, fme, var4, false); if (var4 > 0.0) { String var5 = Econ.moneyString(var4); msg(""<i>You have been given the disbanded var1's bank, totaling %s."", var5); P.p.log(fme.getName() + "" has been given bank holdings of ""+var5+"" from disbanding ""+var1.getTag()+"".""); } } var1.detach(); SpoutFeatures.updateAppearances(); } "	0	0	1	0	1	0
"private void Func1() { if(hasTrack) setUiColor(Color.parseColor(session.getTrack().getColor())); Timber.d(""Updated""); speakers.clear(); speakers.addAll(session.getSpeakers()); adapter.notifyDataSetChanged(); updateFloatingIcon(); Microlocation var1 = session.getMicrolocation(); if(var1 != null) { location = var1.getName(); text_room1.setText(var1.getName()); } else { location = getString(R.string.location_not_decided); text_room1.setText(location); } text_title.setText(title); if (TextUtils.isEmpty(session.getSubtitle())) { text_subtitle.setVisibility(View.GONE); } text_subtitle.setText(session.getSubtitle()); if (hasTrack) { trackLabel.setVisibility(View.VISIBLE); text_track.setVisibility(View.VISIBLE); text_track.setText(trackName); } else { trackLabel.setVisibility(View.GONE); text_track.setVisibility(View.GONE); } String var2 = session.getVideoUrl(); if(!Utils.isEmpty(var2)) { playButton.setVisibility(View.VISIBLE); if(var2.contains(ConstantStrings.YOUTUBE)) { youtubeThumbnail.setVisibility(View.VISIBLE); Picasso.with(this) .load(ConstantStrings.YOUTUBE_URI_1 + var2.substring(var2.length()-11) + ConstantStrings.YOUTUBE_URI_2) .into(youtubeThumbnail); } playButton.setOnClickListener(v -> startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(var2)))); } String var3 = DateConverter.formatDateWithDefault(DateConverter.FORMAT_DATE_COMPLETE, session.getStartsAt()); String var4 = DateConverter.formatDateWithDefault(DateConverter.FORMAT_12H, session.getStartsAt()); String var5 = DateConverter.formatDateWithDefault(DateConverter.FORMAT_12H, session.getEndsAt()); text_start_time.setText(var4); text_end_time.setText(var5); text_date.setText(var3); Timber.d(""Date: %s\nStart: %s\nEnd: %s"", var3, var4, var5); Views.setHtml(summary, session.getShortAbstract(), true); Views.setHtml(descrip, session.getLongAbstract(), true); } "	0	0	1	0	0	0
@Override protected String Func1() { TypeSpec.Builder var1 = TypeSpec.classBuilder(getOutputClassName(false)) .addModifiers(Modifier.PUBLIC) .superclass(ParameterizedTypeName.get(ClassName.get(Finder.class), parameterClasses)); addConstructor(var1); addOrderByMethods(var1); return JavaFile.builder(getOutputPackageName(), var1.build()).indent(JAVA_INDENT).build().toString(); } 	0	0	0	0	0	1
public ServerAsset Func1(ServerAsset var1) { return persistenceService.doTransaction(em -> { validateParent(em, var1); return em.Func1(var1); }); } 	0	0	0	0	0	1
public static void Func1(Prototype var1) { Func1(var1, new PrintWriter(System.out)); } 	1	0	0	0	1	0
@Override public int Func1() { return book.getSize(); } 	0	0	0	0	0	1
"public Query Func1(CriteriaDefinition var1) { CriteriaDefinition var2 = this.criteria.get(var1.getKey()); String var3 = var1.getKey(); if (var2 == null) { this.criteria.put(var3, var1); } else { throw new InvalidMongoDbApiUsageException( ""Due to limitations of the com.mongodb.BasicDBObject, "" + ""you can't add a second '"" + var3 + ""' criteria. "" + ""Query already contains '"" + var2.getCriteriaObject() + ""'.""); } return this; } "	0	0	0	0	0	1
public List<Vertex>[] Func1() { return vertexes; } 	0	0	0	0	0	1
"@SuppressWarnings(""checkstyle:methodlength"") private Map<Integer, Action> Func1(Game var1) { Map<Integer, Action> var2 = new HashMap<>(); if(var1.getPlayers().size() == 1) { var2.put(KeyEvent.VK_LEFT, () -> { addToLog(""[KEY]\t< \'<-\' > Pressed.""); var1.getPlayers().get(0).goLeft(); }); var2.put(KeyEvent.VK_RIGHT, () -> { addToLog(""[KEY]\t< \'->\' > Pressed.""); var1.getPlayers().get(0).goRight(); }); var2.put(KeyEvent.VK_SPACE, () -> { addToLog(""[KEY]\t< \' \' > Pressed.""); var1.getPlayers().get(0).jump(); }); var2.put(KeyEvent.VK_Z, () -> { addToLog(""[KEY]\t< \'Z\' > Pressed.""); if(var1.isRunning()) { Player var3 = var1.getPlayers().get(0); var1.getLevel().addUnit( new Bubble(var3.getLocation(), new Point(var3.getDirection().getDeltaX() * 4, 0), JBubbleBobbleSprites.getInstance().getBubbleSprite())); } }); } else{ var2.put(KeyEvent.VK_A, () -> { addToLog(""[KEY]\t< \'<-\' > Pressed.""); var1.getPlayers().get(0).goLeft(); }); var2.put(KeyEvent.VK_D, () -> { addToLog(""[KEY]\t< \'->\' > Pressed.""); var1.getPlayers().get(0).goRight(); }); var2.put(KeyEvent.VK_W, () -> { addToLog(""[KEY]\t< \' \' > Pressed.""); var1.getPlayers().get(0).jump(); }); var2.put(KeyEvent.VK_SPACE, () -> { addToLog(""[KEY]\t< \'Z\' > Pressed.""); if(var1.isRunning()) { Player var3 = var1.getPlayers().get(0); var1.getLevel().addUnit( new Bubble(var3.getLocation(), new Point(var3.getDirection().getDeltaX() * 4, 0), JBubbleBobbleSprites.getInstance().getBubbleSprite())); } }); var2.put(KeyEvent.VK_LEFT, () -> { addToLog(""[KEY]\t< \'<-\' > Pressed.""); var1.getPlayers().get(1).goLeft(); }); var2.put(KeyEvent.VK_RIGHT, () -> { addToLog(""[KEY]\t< \'->\' > Pressed.""); var1.getPlayers().get(1).goRight(); }); var2.put(KeyEvent.VK_UP, () -> { addToLog(""[KEY]\t< \' \' > Pressed.""); var1.getPlayers().get(0).jump(); }); var2.put(KeyEvent.VK_CONTROL, () -> { addToLog(""[KEY]\t< \'Z\' > Pressed.""); if(var1.isRunning()) { Player var3 = var1.getPlayers().get(1); var1.getLevel().addUnit( new Bubble(var3.getLocation(), new Point(var3.getDirection().getDeltaX() * 4, 0), JBubbleBobbleSprites.getInstance().getBubbleSprite())); } }); } var2.put(KeyEvent.VK_MINUS, () -> { addToLog(""[KEY]\t< \'-\' > Pressed.""); MusicPlayer.getInstance().volumeAdjust(-1.0d); }); var2.put(KeyEvent.VK_EQUALS, () -> { addToLog(""[KEY]\t< \'=\' > Pressed.""); MusicPlayer.getInstance().volumeAdjust(1.0d); }); var2.put(KeyEvent.VK_F1, () -> { addToLog(""[KEY]\t< F1 > Pressed.""); new DumpLog(); }); return var2; } "	0	0	1	1	0	0
"public void Func1(EntityRef var1) { if (blockBufferSystem.getBlockBufferSize() > 15000) { return; } DistrictFacetComponent var2 = var1.getComponent(DistrictFacetComponent.class); PopulationComponent var3 = var1.getComponent(PopulationComponent.class); ParcelList var4 = var1.getComponent(ParcelList.class); BuildingQueue var5 = var1.getComponent(BuildingQueue.class); LocationComponent var6 = var1.getComponent(LocationComponent.class); NameTagComponent var7 = var1.getComponent(NameTagComponent.class); CultureComponent var8 = var1.getComponent(CultureComponent.class); Vector3i var9 = new Vector3i(var6.getLocalPosition()); int var10 = 300; int var11 = 0; List<String> var12 = new ArrayList<>(buildingManager.getZones()); Map<String, List<Vector2i>> var13 = buildingManager.getMinMaxSizePerZone(); if (var3 == null) { logger.error(""No population found or was uninitialised!""); return; } if (var8 == null) { logger.error(""No culture found or was uninitialised!""); return; } if (var4 == null) { logger.error(""No parcelList found or was uninitialised!""); return; } if (var5 == null) { logger.error(""No var5 found or was uninitialised!""); return; } if (var6 == null) { logger.error(""No var6 found or was uninitialised!""); return; } if (var7 == null) { logger.error(""No var7 found or was uninitialised!""); return; } if (var2 == null || var2.districtMap == null || var2.districtTypeMap == null) { logger.error(""No DistrictFacetComponent found or was uninitialised!""); return; } for (String var14 : var12) { while (var8.getBuildingNeedsForZone(var14) * var3.populationSize - var4.areaPerZone.getOrDefault(var14, 0) > var13.get(var14).get(0).x * var13.get(var14).get(0).y && var11 < SettlementConstants.MAX_BUILDINGSPAWN) { Optional<DynParcel> var15 = placeParcel(var9, var14, var4, var5, var2, var10); if (!var15.isPresent() && var4.cityRadius < SettlementConstants.SETTLEMENT_RADIUS) { var4.cityRadius += SettlementConstants.BUILD_RADIUS_INTERVALL; getSurroundingRegions(var1); break; } else if (!var15.isPresent()) { break; } DynParcel var16 = var15.get(); var5.var5.add(var16); var11++; } var11 = 0; } for (String var17 : var8.residentialZones) { var3.capacity += var4.areaPerZone.getOrDefault(var17, 0); } var7.text =  Float.toString(var3.populationSize); var1.saveComponent(var7); var1.saveComponent(var3); var1.saveComponent(var5); var1.saveComponent(var4); var1.send(new SettlementGrowthEvent()); } "	0	0	0	0	0	1
public void Func1(final AbstractAnimal var1, final Integer var2) { try { this.gameTrack.addAnimal(var2, var1); AnimalAddedEvent var3 = new AnimalAddedEvent(); var3.setAnimal(var1.getId()); var3.setTeam(var2); this.eventDispatcher.dispatch(new AnimalAddedEvent()); } catch (NoSuchTeamException e) { e.printStackTrace(); } } 	1	0	1	1	1	0
@Transactional @Override public List<UserDTO> Func1() { List<UserDTO> var1 = new ArrayList<UserDTO>(); User var2 = getLoggedUser(); List<User> var3; if (var2.getRole().getType() == RoleType.COMMISSIONER) { var3 = userRepository.findByTerritorialCommunity(var2.getTerritorialCommunity()); } else { var3 = userRepository.findAll(); } for (User var4 : var3) { PassportInfo var5 = var4.getPassport().get(var4.getPassport().size() - 1); PassportDTO var6 = new PassportDTO(var5.getSeria(), var5.getNumber().toString(), var5.getPublishedByData()); Address var7 = var4.getAddress().get(var4.getAddress().size() - 1); AddressDTO var8 = new AddressDTO(var7.getPostCode(), var7.getRegion(), var7.getDistrict(), var7.getCity(), var7.getStreet(), var7.getBuilding(), var7.getFlat()); UserDTO var9 = new UserDTO(var4.getFirstName(), var4.getLastName(), var4.getMiddleName(), var4.getRole().toString(), var4.getLogin(), var4.getEmail(), var4.getStatus().toString(), var8, var6); var9.setTerritorialCommunity(var4.getTerritorialCommunity().getName()); var1.add(var9); } return var1; } 	1	1	1	0	1	0
"private void Func1(TeamId var1, int var2, int var3) { String var4 = ""Rank-1""; int var5 = var2+1; int var6 = var3; if (var2 > var3) { var4 = ""Rank+1""; var5 = var3; var6 = var2-1; } String var7 = ""UPDATE CustomRankings SET Rank = "" + var4 + "" WHERE TeamID = ? AND Rank BETWEEN ? AND ?""; Statement var8 = null; try { var8 = prepareStatementUpdate(var7, var1, var5, var6); } catch (SQLException e) { logger.log(SEVERE, ""Unable to shift ranks for intermediate players!"", e); } finally { close(var8); } } "	0	0	1	1	0	0
"private void Func1(RecurringTask var1) { var1.adjustDate(); if (var1.getRecurType().equals(""week"") || var1.getRecurType().equals(""weeks"")) { var1.setStartDate(var1.getStartDate().minusWeeks(var1.getNumberToRecur())); var1.setEndDate(var1.getDueDate().minusWeeks(var1.getNumberToRecur())); } else { var1.setStartDate(var1.getStartDate().minusDays(var1.getNumberToRecur())); var1.setEndDate(var1.getDueDate().minusDays(var1.getNumberToRecur())); } } "	0	0	0	1	0	0
public Group Func1() { return (Group) getContainer(); } 	0	0	1	1	0	0
private Layout Func1(final String var1) { final int var2 = layout_keys.toList().indexOf(var1); return var2 > -1 ? layout_values.get(var2) : null; } 	0	0	0	0	0	1
@Override public HierarchicalStreamReader Func1(final Reader var1) { try { final Document var2 = getBuilder().build(var1); return new XomReader(var2, getNameCoder()); } catch (final ValidityException e) { throw new StreamException(e); } catch (final ParsingException e) { throw new StreamException(e); } catch (final IOException e) { throw new StreamException(e); } } 	0	0	1	0	1	0
"public final String Func1() { String var1 = this.textField.getText(); if (!com.google.common.base.Strings.isNullOrEmpty(var1)) { var1 = var1.replaceAll(""~"", System.getProperty(""user.home"")); LOG.debug(""User input transformed into "" + var1); } return var1; } "	0	0	1	0	0	0
public static boolean Func1(EntityPlayerMP var1) { if (!(var1 instanceof FakePlayer)) { NonNullList<ItemStack> var2 = var1.inventory.var2; int var3 = ConfigHandler.numWeakGravityEnablersRequiredForWeakGravity; int var4 = 0; for (ItemStack var5 : var2) { if (var5 != null && var5.getItem() instanceof IWeakGravityEnabler) { if (++var4 == var3) { return true; } } } if (ModSupport.isModLoaded(ModSupport.BAUBLES_MOD_ID)) { IBaublesItemHandler var6 = BaublesApi.getBaublesHandler(var1); int var7 = var6.getSlots(); for (int var8 = 0; var8 < var7; var8++) { ItemStack var5 = var6.getStackInSlot(var8); if (!var5.isEmpty() && var5.getItem() instanceof IWeakGravityEnabler) { if (++var4 == var3) { return true; } } } } } return false; } 	1	0	1	0	1	0
"private Response Func1(final HttpServletRequest var1, final HttpServletResponse var2, final RegisteredUser var3, final String var4, final String var5, final List<IEmailPreference> var6, final Map<String, Boolean> var7) throws IncorrectCredentialsProvidedException, NoCredentialsAvailableException { Validate.notNull(var3.getId()); try { RegisteredUserDTO var8 = this.userManager.getCurrentRegisteredUser(var1); if (!var8.getId().equals(var3.getId()) && var8.getRole() != Role.ADMIN && var8.getRole() != Role.EVENT_MANAGER) { return new SegueErrorResponse(Status.FORBIDDEN, ""You cannot change someone elses' user settings."") .toResponse(); } if (var5 != null && !var5.isEmpty()) { if (!var8.getId().equals(var3.getId()) && var8.getRole() != Role.ADMIN) { return new SegueErrorResponse(Status.FORBIDDEN, ""You cannot change someone elses' password."") .toResponse(); } if (!(var8.getRole() == Role.ADMIN && var3.getRole() != Role.ADMIN)) { this.userManager.ensureCorrectPassword(AuthenticationProvider.SEGUE.name(), var3.getEmail(), var4); } } RegisteredUserDTO var9 = this.userManager.getUserDTOById(var3 .getId()); if (Role.EVENT_MANAGER.equals(var8.getRole())) { if (Role.ADMIN.equals(var9.getRole()) || Role.ADMIN.equals(var3.getRole())) { return new SegueErrorResponse(Status.FORBIDDEN, ""You cannot modify admin roles."").toResponse(); } } if ((var8.getRole() != Role.ADMIN && var8.getRole() != Role.EVENT_MANAGER) && var3.getRole() != null && !var3.getRole().equals(var9.getRole())) { return new SegueErrorResponse(Status.FORBIDDEN, ""You do not have permission to change a users role."") .toResponse(); } else if ((var3.getRole() != null && !var3.getRole().equals( var9.getRole())) || var9.getRole() != null && !var9.getRole().equals(var3.getRole())) { log.info(""ADMIN user "" + var8.getEmail() + "" has modified the role of "" + var3.getEmail() + ""["" + var3.getId() + ""]"" + "" to "" + var3.getRole()); } RegisteredUserDTO var10 = userManager.Func1(var3, var5); emailPreferenceManager.saveEmailPreferences(var3.getId(), var6); try { List<UserPreference> var11 = Lists.newArrayList(); List<String> var12 = Arrays.asList(""PHYSICS_UNI"", ""PHYSICS_ALEVEL"", ""PHYSICS_GCSE"", ""CHEMISTRY_UNI"", ""CHEMISTRY_ALEVEL"", ""CHEMISTRY_GCSE"", ""MATHS_UNI"", ""MATHS_ALEVEL"", ""MATHS_GCSE""); for (String var13 : var7.keySet()) { if (!var12.contains(var13)) { return new SegueErrorResponse(Status.BAD_REQUEST, ""Invalid user preferences provided."").toResponse(); } var11.add(new UserPreference(var10.getId(), SUBJECT_INTEREST, var13, var7.get(var13))); } userPreferenceManager.saveUserPreferences(var11); } catch (SegueDatabaseException e) { return new SegueErrorResponse(Status.BAD_REQUEST, ""Invalid user preferences provided."").toResponse(); } return Response.ok(var10).build(); } catch (NoUserLoggedInException e) { return SegueErrorResponse.getNotLoggedInResponse(); } catch (NoUserException e) { return new SegueErrorResponse(Status.NOT_FOUND, ""The user specified does not exist."").toResponse(); } catch (DuplicateAccountException e) { return new SegueErrorResponse(Status.BAD_REQUEST, ""An account already exists with the e-mail address specified."").toResponse(); } catch (SegueDatabaseException e) { log.error(""Unable to modify user"", e); return new SegueErrorResponse(Status.INTERNAL_SERVER_ERROR, ""Error while modifying the user"").toResponse(); } catch (InvalidPasswordException e) { return new SegueErrorResponse(Status.BAD_REQUEST, ""Invalid password. You cannot have an empty password."") .toResponse(); } catch (MissingRequiredFieldException e) { log.warn(""Missing field during update operation. "", e.getMessage()); return new SegueErrorResponse(Status.BAD_REQUEST, ""You are missing a required field. "" + ""Please make sure you have specified all mandatory fields in your var2."").toResponse(); } catch (AuthenticationProviderMappingException e) { return new SegueErrorResponse(Status.INTERNAL_SERVER_ERROR, ""Unable to map to a known authenticator. The provider: is unknown"").toResponse(); } } "	0	0	1	1	0	0
"@Override public CommandResult Func1() { assert model != null; try { model.addTask(toAdd); if (toAdd.getIsEvent()){ return new CommandResult((String.format(MESSAGE_SUCCESS, toAdd)) + ""\n"" + DateTimeInfoParser.durationOfTheEvent(toAdd.getStartTime().toString(), toAdd.getEndTime().toString())); } else { return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd)); } } catch (DuplicateTaskException e) { return new CommandResult(MESSAGE_DUPLICATE_TASK); } } "	0	0	0	0	0	1
public static void Func1(Context var1) { if (!KeyDisabler.isSupported()) { return; } writeDisableNavkeysOption(var1, Settings.System.getInt(var1.getContentResolver(), Settings.System.DEV_FORCE_SHOW_NAVBAR, 0) != 0); } 	0	0	0	0	0	1
private byte Func1() { if(readIndex >= writeIndex) { throw new IllegalStateException(); } return this.buffer[readIndex++]; } 	0	0	0	0	0	1
"@Override public void Func1(String var1) { try { HttpResponse<JsonNode> var2 = Unirest.delete(getServiceUrl().toString() + END_POINT_EXT + ""/"" + var1).header(HEADER_ACCEPT, APPLICATION_JSON).asJson(); var2.getBody().getObject(); if (!(var2.getStatus() == HttpStatus.SC_OK)) { throw new MinimesosException(""Could not delete var1: "" + var1); } } catch (UnirestException e) { throw new MinimesosException(""Could not delete var1: "" + var1); } } "	0	0	1	1	1	0
"@FXML public void Func1() { if (!checkNonEmptyCustomer()){ showAlert(AlertType.INFORMATION, ""Enter Values"", null, ""You have to fill all form data to continue.""); return; } RoomDate var1 = checkedTable.getSelectionModel().getSelectedItem(); if (var1 == null) { showAlert(AlertType.INFORMATION, ""Enter Values"", null, ""Please select one row to continue.""); return; } Optional<ButtonType> var2 = showAlert(AlertType.CONFIRMATION,""Check Out Confirmation"",""Are you sure?"",""""); if (var2.get() == ButtonType.OK){ RoomDate var3 = (RoomDate)var1.doClone(); RoomServiceDao var4 = (RoomServiceDao) DaoFactoryImpl.getFactory().createDao(RoomService.TABLE_NAME); InvoiceRecordBuilder var5 = new InvoiceRecordBuilder(); var5.buildPassportOrId(passport.getText()); var5.buildRoomNumber(var3.getRoomNumber()); LocalDate var6 = var3.getCheckInDate(); LocalDate var7 =  var3.getCheckOutDate(); int var8 = Period.between(var6,var7).getDays(); double var9 = var3.getRoomPrice()*var8; List<RoomService> var10 = adapter.getAllRoomService(var3.getRoomNumber()); double var11 = 0.0; String var12 = var3.getRoomClass(); StrategyContext var13; if (var12.equalsIgnoreCase(""VIP"")) { var13 = new StrategyContext(new VIPStrategy()); } else { var13 = new StrategyContext(new StandardStrategy()); } var11 = var13.getRoomServiceAmount(var10); var5.buildCheckInDate(var6); var5.buildCheckOutDate(var7); var5.buildRoomAmount(var9); var5.buildServiceAmount(var11); var5.buildTotalAmount(var9 + var11); InvoiceRecord var14 = var5.getInvoiceRecord(); adapter.deleteRoomServiceByString(var3.getRoomNumber()); adapter.addInvoice(var14); adapter.deleteCustomerAndRooms(passport.getText(),var3.getRoomNumber()); checkedRooms.remove(var1); reloadTableView(checkedTable, checkedRooms); showInvoiceData(var14,var10); } else { } } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { MineralTenementFilter var1 = new MineralTenementFilter(""abc"", ""def"", ""ghi"", ""jkl"", ""mno"",""pqr""); String var2 = var1.getFilterStringAllRecords(); Document var3 = AbstractFilterTestUtilities.parsefilterStringXML(var2); AbstractFilterTestUtilities.runNodeSetValueCheck(var3, ""/descendant::ogc:PropertyIsLike/ogc:Literal"", new String[] {""abc"", ""def"", ""ghi""}, 3); } "	0	0	1	1	1	0
"@Transactional public String Func1(CodeDetailResult var1,String var2) { String var3 = """",var4 = """"; List var5 = null,var6 =null; Timestamp var7 = new Timestamp(System.currentTimeMillis()); CodeDetailResult var8 = new CodeDetailResult(); if(TRANSLATE.equals(var1.getTABLEEN())){ var4 =super.getDicIdByClassType(var2); var3 = ""insert into ""+var1.getTABLEEN()+"" values('""+var2+""',f_scms_dim_id('""+var2+""'),'""+var1.getNAME()+""','','""+var1.getENABLED()+""','""+var1.getFULLNAME()+""',SYSDATE)""; int var9 = super.updateBySql(var3); if (var9==1) { return var4; } return """"; }else if(PROJECTS.equals(var1.getTABLEEN())){ var4 =super.getDicIdByClassType(var2); var3 = ""insert into ""+var1.getTABLEEN()+"" values(f_scms_dim_id('""+var2+""'),'','""+var1.getNAME()+""','""+var1.getPARENTID()+""','""+var2+""','""+var1.getENABLED()+""','""+var1.getFULLNAME()+""',SYSDATE)""; int var9 = super.updateBySql(var3); if (var9==1) { return var4; } return """"; }else if(CONTINENTS.equals(var1.getTABLEEN())){ var4 =super.getDicIdByClassType(var2); var3 = ""insert into ""+var1.getTABLEEN()+"" values(f_scms_dim_id('""+var2+""'),'','""+var1.getNAME()+""','""+var1.getPARENTID()+""','""+var2+""','""+var1.getENABLED()+""','""+var1.getFULLNAME()+""',SYSDATE)""; int var9 = super.updateBySql(var3); if (var9==1) { return var4; } return """"; }else if(SUBJECTS.equals(var1.getTABLEEN())){ var4 =super.getDicIdByClassType(var2); var3 = ""insert into ""+var1.getTABLEEN()+"" values(f_scms_dim_id('""+var2+""'),'""+var1.getNAME()+""','','""+var2+""','""+var1.getPARENTID()+""','""+var1.getENABLED()+""','""+var1.getFULLNAME()+""',SYSDATE)""; int var9 = super.updateBySql(var3); if (var9==1) { return var4; } return """"; }else if(ABNORMAL.equals(var1.getTABLEEN())){ var4 =super.getDicIdByClassType(var2); var3 = ""insert into ""+var1.getTABLEEN()+"" values(f_scms_dim_id('""+var2+""'),'""+var1.getNAME()+""','""+var1.getPARENTID()+""','""+var2+""','""+var1.getENABLED()+""','""+var1.getFULLNAME()+""',SYSDATE)""; int var9 = super.updateBySql(var3); if (var9==1) { return var4; } return """"; }else if(UNIVERSITIES.equals(var1.getTABLEEN())){ var4 =super.getDicIdByClassType(var2); var3 = ""insert into ""+var1.getTABLEEN()+"" values(f_scms_dim_id('""+var2+""'),'""+var1.getNAME()+""','','""+var1.getPARENTID()+""','','','','','""+var1.getENABLED()+""','""+var1.getFULLNAME()+""',SYSDATE)""; int var9 = super.updateBySql(var3); if (var9==1) { return var4; } return """"; }else{ return """"; } } "	0	0	0	0	0	1
"public static void Func1(String[] var1) throws GeneralSecurityException, IOException { PipelineOptionsFactory.register(CountReadsOptions.class); options = PipelineOptionsFactory.fromArgs(var1).withValidation().as(CountReadsOptions.class); GenomicsDatasetOptions.Methods.validateOptions(options); auth = GenomicsOptions.Methods.getGenomicsAuth(options); p = Pipeline.create(options); DataflowWorkarounds.registerGenomicsCoders(p); String var2 = options.getBAMFilePath(); if (!Strings.isNullOrEmpty(var2)) { if (GCSURLExists(var2)) { System.out.println(var2 + "" is present, good.""); } else { System.out.println(""Error: "" + var2 + "" not found.""); return; } if (options.getShardBAMReading()) { String var3 = var2 + "".bai""; if (GCSURLExists(var3)) { System.out.println(var3 + "" is present, good.""); } else { System.out.println(""Error: "" + var3 + "" not found.""); return; } } } System.out.println(""Output will be written to ""+options.getOutput()); PCollection<Read> var4 = getReads(); PCollection<Long> var5 = var4.apply(Count.<Read>globally()); PCollection<String> var6 = var5.apply(ParDo.of(new DoFn<Long, String>() { @Override public void Func2(DoFn<Long, String>.ProcessContext var7) throws Exception { var7.output(String.valueOf(var7.element())); } }).named(""toString"")); var6.apply(TextIO.Write.to(options.getOutput()).named(""WriteOutput"").withoutSharding()); p.run(); } "	0	0	1	1	1	0
"public void Func1(){ Item var1 = itemRepo.getItem(getWeapon()); String var2 = var1.getName(); if (var2.equals(null) || var2.equals(""empty"")){ var2 = ""hands""; } String var3 = ""\nPlayer name: "" + getName(); var3 += ""\nType: "" + type; var3 += ""\nCurrent var1: "" + var2; var3 += ""\nGold: "" + getGold(); var3 += ""\nHealth/Max: "" + getHealth() + ""/"" + getHealthMax(); var3 += ""\nDamage/Armour: "" + getDamage() + ""/"" + getArmour(); var3 += ""\nStrength: "" + getStrength(); var3 += ""\nIntelligence: "" + getIntelligence(); var3 += ""\nDexterity: "" + getDexterity(); var3 += ""\nLuck: "" + getLuck(); var3 += ""\nStealth: "" + getStealth(); var3 += ""\nXP: "" + getXP(); var3 += ""\n"" + getName() + ""'s level: "" + getLevel(); QueueProvider.offer(var3); } "	1	1	1	1	1	0
"@Override public PhysicalTraitsPacketCPlayerData Func1(PhysicalTraitsPacketSRequestData var1, MessageContext var2) { if (var2.side == Side.SERVER) { World var3 = var2.getServerHandler().playerEntity.worldObj; EntityPlayer var4 = GoreCorePlayerUUIDs.findPlayerInWorldFromUUID(var3, var1.playerAskingDataFor); if (var4 != null) { PhysicalTraitsPlayerData var5 = PhysicalTraitsPlayerDataFetcherSided.FETCHER.getDataQuick(var4, ""Error getting player var5 when recieving a var5 packet on the client""); return new PhysicalTraitsPacketCPlayerData(GoreCorePlayerUUIDs.getUUID( var4.getCommandSenderName()).getUUID(), var5.getWeight(), var5.getEnergy(), var5.getFatigue(), var5.getStrength(), var5.getHeight()); } } return null; } "	0	0	0	0	0	1
private void Func1() { final Context var1 = SpentEffortFragment.this.getActivity(); final long var2 = HoursUtils.convertHoursStringToMinutes(mHoursInput.getText().toString().trim()); metricsService.taskChangeSpentEffort( DateUtils.parseDate(mDateInput.getText().toString().trim(), DATE_PATTERN), var2, mCommentInput.getText().toString(), task, userService.getLoggedUser().getId(), new Listener<String>() { @Override public void Func2(final String var3) { Toast.makeText(var1, R.string.feedback_succesfully_updated_spent_effort, Toast.LENGTH_SHORT).show(); getFragmentManager().popBackStack(); if (spentRequestSuccessCallback != null) { spentRequestSuccessCallback.Func2(var3); } } }, new ErrorListener() { @Override public void Func3(final VolleyError var3) { Toast.makeText(var1, R.string.feedback_failed_update_spent_effort, Toast.LENGTH_SHORT).show(); if (spentRequestFailedCallback != null) { spentRequestFailedCallback.Func3(var3); } } }); metricsService.changeEffortLeft( InputUtils.parseStringToDouble(mEffortLeftInput.getText().toString()), task, new Listener<Task>() { @Override public void Func2(final Task var3) { Toast.makeText(var1, R.string.feedback_succesfully_updated_effort_left, Toast.LENGTH_SHORT).show(); } }, new ErrorListener() { @Override public void Func3(final VolleyError var3) { Toast.makeText(var1, R.string.feedback_failed_update_effort_left, Toast.LENGTH_SHORT).show(); } }); } 	1	0	1	1	1	0
"@GET @Path(""/"") @Produces(MediaType.APPLICATION_JSON) @GZIP public Response Func1(@Context final HttpServletRequest var1) { try { RegisteredUserDTO var2 = userManager.getCurrentRegisteredUser(var1); List<Long> var3 = Lists.newArrayList(); for (UserAssociation var4 : associationManager.getAssociations(var2)) { var3.add(var4.getUserIdReceivingPermission()); } return Response.ok(userManager.convertToUserSummaryObjectList(userManager.findUsers(var3))) .cacheControl(getCacheControl(Constants.NEVER_CACHE_WITHOUT_ETAG_CHECK, false)).build(); } catch (NoUserLoggedInException e) { return SegueErrorResponse.getNotLoggedInResponse(); } catch (SegueDatabaseException e) { return new SegueErrorResponse(Status.INTERNAL_SERVER_ERROR, ""Database error"", e).toResponse(); } } "	0	0	0	0	0	1
public void Func1(String var1) { this.var1 = adjustSponsorsWithInitials(var1); } 	1	0	1	0	1	0
@Override public BoundedReader<T> Func1(PipelineOptions var1) throws IOException { this.validate(); return new HDFSFileReader<>(this, filepattern(), formatClass(), serializableSplit()); } 	0	0	0	0	0	1
protected void Func1() { double var1 = Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ); if (Math.abs(motionZ) > Math.abs(motionX)) { this.moveEntity(0.0D, 0.0D, Math.copySign(var1, this.motionZ)); } else { this.moveEntity(Math.copySign(var1, this.motionX), 0.0D, 0.0D); } } 	0	0	0	0	0	1
private int Func1( String var1 ) { int var2 = 0; int var3 = 0; while ( var2 < var1.length() ) { if ( versionStringDelimiters.contains( var1.charAt( var2 ) ) ) { ++var3; } else if ( !isNumeric( Character.toString( var1.charAt( var2 ) ) ) ) { return var2; } ++var2; if ( var3 == 3 ) { return var2; } } return var1.length(); } 	0	0	0	0	0	1
@Override protected void Func1(GameContext var1, Player var2, SpellDesc var3, Entity var4, Entity var5) { if (var5 != null && var5.getEntityType() == EntityType.CARD) { Card var6 = (Card) var5; var1.getLogic().drawCard(var2.getId(), var6); return; } Race var7 = (Race) var3.get(SpellArg.RACE); int var8 = var3.getValue(); String var9 = (String) var3.get(SpellArg.CARD); CardCollection var10 = SpellUtils.getCards(var2.getDeck(), var6 -> var6.getAttribute(Attribute.RACE) == var7); for (int var11 = 0; var11 < var8; var11++) { Card var6 = null; if (!var10.isEmpty()) { var6 = var10.getRandom(); var10.remove(var6); var2.getDeck().remove(var6); } else if (var9 != null) { var6 = CardCatalogue.getCardById(var9); } if (var6 != null) { var1.getLogic().receiveCard(var2.getId(), var6); } } } 	1	1	1	1	1	0
public static IAssetCategory Func1(IHBaseContext var1, String var2, IAssetCategoryCreateRequest var3) throws SiteWhereException { AssetCategory var4 = assertAssetCategory(var1, var2); SiteWherePersistence.assetCategoryUpdateLogic(var3, var4); return HBaseUtils.put(var1.getClient(), var1.getPayloadMarshaler(), ISiteWhereHBase.DEVICES_TABLE_NAME, var4, var2, KEY_BUILDER); } 	0	0	0	0	0	1
public void Func1() { if(start == -1L) return; addTiming(System.nanoTime() - start); start = -1L; last = System.currentTimeMillis(); } 	0	0	1	0	0	0
"@Test(expected = MeteoException.class) public void Func1() throws Exception { MeteoDateUtils.fullFormatToZonedDateTime(""ddd""); } "	0	0	0	0	0	1
public static Point[] Func1(Point var1){ int var2, var3, var4, var5; int var6 = var1.getX(), var7 = var1.getY(); int var8 = DIR_X_INDEX.length; Point[] var9 = new Point[var8+1]; int var10 = Planet.instance().getCellLength(); for (int var11 = 0; var11 < var8; var11++) { var2 = var6 + DIR_X_INDEX[var11]; var3 = var7 + DIR_Y_INDEX[var11]; var4 = checkBounds(var2, var10); var5 = checkBounds(var3, var10); Point var12 = new Point(var4, var5); var9[var11] = var12; } var9[var8] = var1; return var9; } 	1	0	1	0	1	0
public List<C> Func1(Point[] var1) { int[] var2 = new int[var1.length]; int var3 = gridWidth; for (int var4 = 0; var4 < var2.length; var4++){ Point var5 = var1[var4]; int var6 = calcIndex(var5.getX(), var5.getY(), var3); var2[var4] = var6; } return Func1(var2); } 	1	0	1	0	1	0
public boolean Func1(Point var1) { return var1.x < this.columns && var1.y < this.rows; } 	1	0	1	1	1	0
@Subscribe public void Func1(SpotifyPlayerService.RestorePlayingViewEvent var1){ ((TopTracksActivity)getActivity()).onArtistTrackSelectedForPlayback(var1.getmTrack(), (ArrayList) var1.getmTopTracks()); } 	0	0	0	0	1	0
"@Override public void Func1() { super.Func1(); Log.d(""HII"", ""We in this""); mApiClient = new GoogleApiClient.Builder(this) .addApi(Wearable.API) .addConnectionCallbacks(this) .build(); mApiClient.connect(); IntentFilter var1 = new IntentFilter(); var1.addAction(""/new_recording""); var1.addAction(""/play""); var1.addAction(""/pause""); myReceiver = new BroadcastReceiver() { @Override public void Func2(Context var2, Intent var3) { Log.d(""MessageService"", ""Message Received""); Log.d(""MessageService"",var3.getAction() ); if (var3.getAction().equals(""/new_recording"")) { Log.d(""MessageService"", ""Received""); String var4 = var3.getStringExtra(""var4""); audioFile = new File(var4); Log.d(""file length"", String.valueOf(audioFile.length())); sendFile(""/new_recording""); } else if (var3.getAction().equals(""/play"")) { Log.d(""MessageService"", ""Play Requested""); sendMessage(""/play"", """"); } else if (var3.getAction().equals(""/pause"")) { Log.d(""MessageService"", ""Play Requested""); sendMessage(""/pause"", """"); } } }; registerReceiver(myReceiver, var1); } "	0	0	0	0	1	0
"@Override public String Func1() { return getClass().getSimpleName() + "": "" + name +"" v""+version; } "	0	0	0	0	1	0
private void Func1(int var1) { Fragment var2 = null; int var3 = 0; FragmentTransaction var4 = getSupportFragmentManager().beginTransaction(); switch (var1) { case R.var1.drawer_home: var2 = TodayFragment.newInstance(); var3 = 0; break; case R.var1.drawer_courses: var2 = CoursesFragment.newInstance(); var3 = 1; break; case R.var1.drawer_timetable: var2 = TimetableFragment.newInstance(); var3 = 2; break; case R.var1.drawer_settings: var2 = SettingsFragment.newInstance(); var3 = 3; break; case R.var1.drawer_messages: var2 = MessagesFragment.newInstance(); var3 = 4; break; case R.var1.drawer_about: var2 = AboutFragment.newInstance(); var3 = 5; break; case R.var1.drawer_grades: var2 = GradesFragment_new.newInstance(); var3 = 6; break ; } var4.replace(R.var1.flContent, var2, navigationTabs.get(var3)).commit(); } 	0	0	1	0	1	0
"@Override public String Func1(List<String> var1) { return var1 == null ? null : StringUtils.join(var1,"",""); } "	0	0	0	0	1	0
protected JSONObject Func1(String var1) { String var2; JSONObject var3 = null; try { var2 = executeQuery(var1); var3  = new JSONObject(var2); } catch (Exception e) { e.printStackTrace(); } return var3; } 	0	0	0	0	1	0
"@Test(groups = {""wso2.am""}, description = ""Test the availability of retired API in the store"", dependsOnMethods = ""testChangeAPILifecycleToRetired"") public void Func1() throws APIManagerIntegrationTestException { List<APIIdentifier> var1 = APIMTestCaseUtils.getAPIIdentifierListFromHttpResponse( apiStoreRestClient.getAPI()); assertFalse(APIMTestCaseUtils.isAPIAvailable(apiIdentifier, var1), ""Api is  visible in API Store after retire."" + getAPIIdentifierString(apiIdentifier)); } "	0	0	0	0	0	1
"public void Func1(EventSheet var1) { clear(); addTitleLevel1(""Event Sheet""); addTitleLevel2(""Common properties""); addTextInputfieldPropertyEditor(""Name"", var1.nameProperty(), new StringStringConverter()); EventsheetEditorHTMLElement var2 = EventsheetEditorHTMLElement.create(); var2.bindTo(var1); tabbedPaneHTMLElement.addTab(""Event sheet"", var2); } "	0	0	0	1	1	0
@Override public void Func1(Bundle var1) { var1.putSerializable(OUT_ITEM, mFolder); super.Func1(var1); } 	0	0	0	0	1	0
@EventHandler(priority = EventPriority.HIGH) public void Func1(PlayerMoveEvent var1) { BukkitPlayer var2 = (BukkitPlayer) plugin.wrapPlayer(var1.getPlayer()); if (PlotMeCoreManager.getInstance().isPlotWorld(var2) && !var2.hasPermission(PermissionNames.ADMIN_BYPASSDENY)) { BukkitLocation var3 = new BukkitLocation(var1.getTo()); String var4 = manager.getPlotId(var3); if (!var4.isEmpty()) { Plot var5 = manager.getPlotById(var4, var2); if (var5 != null && var5.isDeniedInternal(var2.getName(), var2.getUniqueId())) { Location var6 = var1.getFrom().clone(); var6.setYaw(var1.getTo().getYaw()); var6.setPitch(var1.getTo().getPitch()); var1.setTo(var6); } } } } 	0	0	0	0	1	0
"@Override public List<F> Func1(F[] var1) { Assert.notNull(var1, ""'var1' should not be null""); List<F> var2 = Arrays.asList(var1); for (FileListFilter<F> var3 : this.fileFilters) { if (var2.size() == 0) { break; } @SuppressWarnings(""unchecked"") F[] var4 = var2.toArray((F[]) Array.newInstance(var1[0].getClass(), var2.size())); var2 = var3.Func1(var4); } return var2; } "	1	0	0	0	1	0
"public String Func1(WebElement var1) { return String.format(""[%s@%s-%s@%s]"", var1.getLocation().getX(), var1.getLocation().getY(), var1.getLocation().getX() + var1.getSize().getWidth(), var1.getLocation().getY() + var1.getSize().getHeight()); } "	0	0	0	1	0	0
"private void Func1() { Document var1; try { var1 = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument(); Element var2 = var1.createElement(""DiskCacheManager""); var1.appendChild(var2); for (String var3 : indexList.keySet()) { String var4 = indexList.get(var3).toString(); Element var5 = var1.createElement(""CacheEntry""); String var6 = Base64.encode(var3.getBytes()); Element var7 = var1.createElement(""cacheurl""); var7.setAttribute(""encode"", ""true""); var7.appendChild(var1.createTextNode(var6)); var5.appendChild(var7); Element var8 = var1.createElement(""cachefile""); var8.appendChild(var1.createTextNode(var4)); var5.appendChild(var8); var2.appendChild(var5); } XMLHelper.writeToFile(new File(path, ""index""), var1); } catch (ParserConfigurationException e) { Logger.instance.error(Logger.stack2String(e)); } catch (Exception e) { Logger.instance.error(Logger.stack2String(e)); } } "	0	0	0	0	1	0
"@SubscribeEvent public void Func1(AnvilUpdateEvent var1) { if (var1.getLeft() == null || var1.getRight() == null) return; ItemStack var2 = var1.getLeft(); ItemStack var3 = var1.getRight(); if (!hasLumbering(var3) || !(var2.getItem() instanceof ItemTool)) return; Set<String> var4 = ((ItemTool) var2.getItem()).getToolClasses(var2); if (!var4.contains(""axe"")) { var1.setCost(0); var1.setOutput(var2.copy()); } } "	0	0	0	0	1	0
@Override public void Func1(Game var1, Player var2) { List<LakeTile> var3 = var2.getTiles(); if(var3.isEmpty()) { return; } DedicationType[] var4 = DedicationTokenWrapper.sortDedications (var1.getDedications()); int var5 = var1.getCurrentTurnPlayer() + 1; Player[] var6 = var1.getPlayers(); int var7 = 0 ; while(var7 != var6.length - 1){ var5 = var5 % 4 ; for (DedicationType var8: var4){ DedicationThreat var9 = DedicationThreat.getThreat(var8, var6[var5], var1); if (var9 != null){ boolean var10 = stopThreat(var1, var9, var6[var5].getId()); if (var10) { return; } } } ++var5; ++var7; } LakeTile[][] var11 = var1.getLake(); for (int var12 = 0; var12 != var11.length; ++var12) { for (int var13 = 0; var13 != var11[var12].length; ++var13) { if (var11[var12][var13] != null){ TileSide[] var14 = var11[var12][var13].getSides(); for (int var15 = 0; var15 != var14.length; ++var15) { if (var14[var15].getAdjacent() == null) { controller.placeLakeTile(var1, var2.getId(), 0, var11[var12][var13].getId(), var15, 0); return; } } } } } } 	0	0	0	0	1	0
"private void Func1(Supplier<PrintStream> var1, Consumer<PrintStream> var2, String var3) { PrintStream var4 = var1.get(); ByteArrayOutputStream var5 = new ByteArrayOutputStream(); try { PrintStream var6 = new PrintStream(var5); var2.accept(var6); runAll(""api/SystemApi"", var3, () -> { var6.flush(); assertEquals(""hello"" + System.getProperty(""line.separator""), var5.toString()); var5.reset(); }); } finally { var2.accept(var4); } } "	0	0	0	0	1	0
"private void Func1() { String var1 = """"; String var2[]; try { while(true) { System.out.print(""mainmenu""+PREFIX); var1 = enigma.readLine(); if(var1.startsWith(""/"")) { var1 = var1.toLowerCase(); var2 = var1.split("" ""); switch(var2[0]) { case ""/conf"":{} case ""/configure"":{actionConfigure(var1);break;} case ""/con"":{} case ""/connect"":{actionConnect(var1);break;} case ""/q"":{} case ""/quit"":{} case ""/exit"":{return;} case ""/lpl"":{actionLPL();break;} case ""/req"":{actionLPL2();break;} case ""/cd"":{;break;} default:{u.printError(""unknown command"");} } } } } catch ( Exception e){e.printStackTrace();} } "	0	0	0	0	0	1
"public void Func1(String var1, String var2) { lcubs = new LachsClient_ConHandler(serverip, serverport, u, this); u.printGrayln(""Attempting connection to ""+serverip+"":""+serverport+""...""); lcubs.ConnectToNIOServer(var1,var2); lcubs.start(); LAChSInputLoop(); lcubs.ConnectionsClose(); } "	0	0	0	0	1	0
@Override protected void Func1() { motionController.setSetpoint(finalAngle + initialAngle); } 	0	0	0	0	1	0
"@Override public Object Func1(short[] var1) throws ValueConversionException { logger.debug(""Func1 - start: var1={}"", var1); if ( var1.length != TYPE_SIZE ) { throw new ValueConversionException( ""Argument length doesn't match with type size""); } ByteBuffer var2 = ByteBuffer.allocate(4); var2.order(ByteOrder.LITTLE_ENDIAN); for (int var3 = 0; var3 < TYPE_SIZE; var3++) { var2.put((byte)var1[var3]); } logger.debug(""toIQValue - end: {}"", var2.getInt(0)); return var2.getInt(0); } "	0	0	0	0	1	0
@Test @NeedsTestData public void Func1() throws Exception { ReaderContext var1 = getReaderContext(getConfigPropertiesAsMap(service.getHiveConf())); HCatalogIO.Read var2 = HCatalogIO.read() .withConfigProperties(getConfigPropertiesAsMap(service.getHiveConf())) .withContext(var1) .withTable(TEST_TABLE_NAME); List<String> var3 = new ArrayList<>(); for (int var4 = 0; var4 < var1.numSplits(); var4++) { BoundedHCatalogSource var5 = new BoundedHCatalogSource(var2.withSplitId(var4)); for (HCatRecord var6 : SourceTestUtils.readFromSource(var5, OPTIONS)) { var3.add(var6.get(0).toString()); } } assertThat(var3, containsInAnyOrder(getExpectedRecords(TEST_RECORDS_COUNT).toArray())); } 	0	0	1	0	0	0
"static DefaultHCatRecord Func1(int var1) { return new DefaultHCatRecord(Arrays.<Object>asList(""record "" + var1, var1)); } "	0	0	0	0	0	1
"public Environment Func1(Environment var1) { Environment var2 = new Environment(var1.getName(), var1.getLabel()); for (PropertySource var3 : var1.getPropertySources()) { Map<Object, Object> var4 = new LinkedHashMap<Object, Object>( var3.getSource()); for (Entry<Object,Object> var5 : var4.entrySet()) { Object var6 = var5.getKey(); String var7 = var6.toString(); String var8 = var5.getValue().toString(); if (var8.startsWith(""{cipher}"")) { var4.remove(var6); if (encryptor == null) { var4.put(var7, var8); } else { try { var8 = var8 == null ? null : encryptor.Func1(var8 .substring(""{cipher}"".length())); } catch (Exception e) { var8 = ""<n/a>""; var7 = ""invalid."" + var7; logger.warn(""Cannot Func1 var6: "" + var6 + "" ("" + e.getClass() + "": "" + e.getMessage() + "")""); } var4.put(var7, var8); } } } var2.add(new PropertySource(var3.getName(), var4)); } return var2; } "	0	0	0	0	1	0
"private String Func1(final ParameterizedType var1, final Boolean var2) { final StringBuffer var3 = new StringBuffer(getFullyQualifiedNameFor(var1 .getType().toString())); if(var2) { var3.append(""<""); for (final Object var4 : var1.typeArguments()) { final Type var5 = (Type) var4; final String var6 = getNameOfType(var5); var3.append(var6); var3.append("",""); } var3.deleteCharAt(var3.length() - 1); var3.append("">""); } return var3.toString(); } "	0	0	1	0	0	0
private String Func1(String var1) { if (compactNaming) { try { return Joiner.on(':').join(Splitter.on(',').trimResults().withKeyValueSeparator('=').split(var1).values()); } catch (Exception ex) { } } return var1; } 	0	0	0	0	1	0
public static NodeFS Func1(MTree var1, String var2) { Tree<MTree.Node> var3 = var1.findAsTree(MTree.NodeType.CLASSDEF); if (var3.getChildCount(var3.getRoot()) < 1) { return null; } MetaClass var4; try { var4 = MetaClass.getMatlabClass(var2); } catch (Exception e) { e.printStackTrace(); return null; } NodeFS var5 = new NodeFS(var4, var1.getNode(0)); Tree<MTree.Node> var6 = var1.findAsTree(MTree.NodeType.FUNCTION); java.util.List<MTree.Node> var7 = createNodesForClassDef(var6, MTree.NodeType.FUNCTION); Tree<MTree.Node> var8 = var1.findAsTree(MTree.NodeType.PROPTYPEDECL); java.util.List<MTree.Node> var9 = createNodesForClassDef(var8, MTree.NodeType.PROPTYPEDECL); Tree<MTree.Node> var10 = var1.findAsTree(MTree.NodeType.PROPERTIES); java.util.List<MTree.Node> var11 = createNodesForClassDefPropNoOldDef(var10); populateClassDefNodeWithProperties(var5, var4, var7, var11); populateClassDefNodeWithMethods(var5, var4, var7); return var5; } 	1	0	0	0	1	0
@Test public void Func1() throws Exception { final InstanceInfo var1 = getInstanceInfo(null); instanceRegistry.register(var1, false); final EurekaInstanceRegisteredEvent var2 = (EurekaInstanceRegisteredEvent) (applicationEvents.get(0)); assertEquals(LeaseInfo.DEFAULT_LEASE_DURATION, var2.getLeaseDuration()); } 	0	0	0	0	1	0
"@Override public boolean Func1(final String var1, final String var2, boolean var3) { log(""Func1 "" + var1 + "" var2 "" + var2 + "", var3 {}"" + var3); List<Application> var4 = getSortedApplications(); for (Application var5 : var4) { if (var5.getName().equals(var1)) { InstanceInfo var6 = null; for (InstanceInfo var7 : var5.getInstances()) { if (var7.getHostName().equals(var2)) { var6 = var7; break; } } publishEvent(new EurekaInstanceRenewedEvent(this, var1, var2, var6, var3)); break; } } return super.Func1(var1, var2, var3); } "	0	0	1	0	1	0
@Override public boolean Func1(String var1, TypeStore var2) { return var2.getKeywordParameterType(this, var1) != null; } 	0	0	0	0	1	0
@NotNull public Collection<VirtualFile> Func1(@NotNull final Project var1, @NotNull Pattern var2) { final GlobalSearchScope var3 = GlobalSearchScope.allScope(var1); final String[] var4 = MatcherUtil.getParts(var2); if (var4.length > 0) { final String var5 = StringUtil.join(var4, Constants.DOLLAR); if (cacheMap.get(var5) == null) { final THashSet<VirtualFile> var6 = new THashSet<VirtualFile>(1000); ProjectRootManager.getInstance(var1).getFileIndex().iterateContent(new ContentIterator() { @Override public boolean Func2(VirtualFile var7) { final String var8 = var7.getName(); if (MatcherUtil.matchAnyPart(var4, var8)) { for (VirtualFile var9 : FilenameIndex.getVirtualFilesByName(var1, var8, var3)) { if (var9.isValid() && MatcherUtil.matchAllParts(var4, var9.getPath())) { var6.add(var9); } } } return true; } }); cacheMap.put(var5, var6); } return cacheMap.get(var5); } return ContainerUtil.newArrayList(); } 	0	0	0	0	1	0
public void Func1(String var1, int... var2) { commands.put(var1, var2); } 	0	0	0	0	1	0
@Test public void Func1() throws Exception{ File var1 = buildDirectoryMock(); templateToTest.applyTo(var1,properties); verify(mockedCopySupport).copyDirectories(eq(contentRootFolder), eq(var1), any(TemplateFileNameTransformer.class), eq(Boolean.TRUE)); } 	0	0	0	0	1	0
"@Secured ( false ) @RequestMapping ( value = ""/channel/{var1}/Func1"", method = RequestMethod.GET ) @HttpConstraint ( PERMIT ) public ModelAndView Func1 ( @PathVariable ( ""var1"" ) final String var1) { try { return this.channelService.accessCall ( By.id ( var1 ), ReadableChannel.class, ( channel ) -> { final Map<String, Object> var2 = new HashMap<> (); var2.put ( ""channel"", channel.getInformation () ); final Collection<ArtifactInformation> var3 = channel.getContext ().getArtifacts ().values (); if ( var3.size () > maxWebListSize () ) { return viewTooMany ( channel ); } final List<ArtifactInformation> var4 = new ArrayList<> ( var3 ); var4.sort ( Comparator.comparing ( ArtifactInformation::getName ) ); var2.put ( ""var4"", var4 ); return new ModelAndView ( ""channel/view"" ); } ); } catch ( final ChannelNotFoundException e ) { return CommonController.createNotFound ( ""channel"", var1 ); } } "	0	0	1	0	1	0
@Override protected boolean Func1() { return motionController.onTarget(); } 	0	0	0	0	1	0
"@RequestMapping(value = ""/search"", method = RequestMethod.GET) public String Func1(@RequestParam(""q"") String var1, @RequestParam(value = ""s"", required = false) String var2, @RequestParam(value = ""p"", required = false) Integer var3, org.springframework.ui.Model var4){ if( !userService.isAuthorized() ){ return ""redirect:/login""; } if( var1.length() == 0 ){ return ""error/404""; } SearchScope var5; if( var2 == null ){ var5 = SearchScope.ALL; } else{ var5 = SearchScope.from(var2); if( var5 == null ){ var5 = SearchScope.ALL; } } var4.addAttribute(""var7"", userService.getCurrentUser()); List<String> var6 = searchService.normalizeAndSplitQuery(var1); var4.addAttribute(""queryTags"", var6); var4.addAttribute(""q"", searchService.implodeQuery(var6)); User var7 = userService.getCurrentUser(); List<Tag> var8 = var7.getTags(); List<Integer> var9 = new ArrayList<>(); var8.forEach((t) -> var9.add(t.getId())); var4.addAttribute(""interestedNewestCalls"", callService.findByTagsIdIn(var9)); if( var3 == null ){ var3 = 0; } else{ var3 = var3 - 1; } if( var3 < 0 ){ return ""error/404""; } int var10 = var3 + 1; switch( var5 ){ case ALL: SearchResult var11 = searchService.searchEverywhere(var1, var3); if( var3 + 1 > var11.getCalls().getTotalPages() ){ return ""error/404""; } var4.addAttribute(""users"", var11.getUsers()); var4.addAttribute(""var8"", var11.getTags()); var4.addAttribute(""calls"", var11.getCalls().getContent()); var4.addAttribute(""pagination"", PaginationFactory.createSearchPagination(var10, var11.getCalls(), var1, var5)); return ""search/quickResults""; case USERS: Page<User> var12 = searchService.searchUsers(var1, var3); if( var3 + 1 > var12.getTotalPages() ){ return ""error/404""; } var4.addAttribute(""users"", userService.setSubscriptionStatusByCurrentUser(var12.getContent())); var4.addAttribute(""pagination"", PaginationFactory.createSearchPagination(var10, var12, var1, var5)); return ""search/users""; default: return ""search/quickResults""; } } "	1	0	1	1	1	0
private BeanDefinitionRegistry Func1() { if (beanDefinitionRegistry == null) { AutowireCapableBeanFactory var1 = getWebApplicationContext() .getAutowireCapableBeanFactory(); beanDefinitionRegistry = (BeanDefinitionRegistry) var1; } return beanDefinitionRegistry; } 	0	0	0	1	0	0
"public void Func1(SmokeDetector var1) { logger.debug(""Updating camera {}"", var1.getDeviceId()); if (lastData == null || !lastData.equals(var1)) { updateState(CHANNEL_UI_COLOR_STATE, new StringType(var1.getUiColorState().toString())); updateState(CHANNEL_LOW_BATTERY, var1.getBatteryHealth() == BatteryHealth.OK ? OnOffType.OFF : OnOffType.ON); updateState(CHANNEL_CO_ALARM_STATE, new StringType(var1.getCoAlarmState().toString())); updateState(CHANNEL_SMOKE_ALARM_STATE, new StringType(var1.getSmokeAlarmState().toString())); updateState(CHANNEL_MANUAL_TEST_ACTIVE, var1.isManualTestActive() ? OnOffType.ON : OnOffType.OFF); if (var1.isOnline()) { updateStatus(ThingStatus.ONLINE); } else { updateStatus(ThingStatus.OFFLINE); } updateProperty(PROPERTY_ID, var1.getDeviceId()); updateProperty(PROPERTY_FIRMWARE_VERSION, var1.getSoftwareVersion()); } else { logger.debug(""Nothing to update, same as before.""); } } "	0	0	1	0	1	0
"@Override public void Func1(Thermostat var1) { ThingUID var2 = bridge.getThing().getUID(); ThingUID var3 = new ThingUID(NestBindingConstants.THING_TYPE_THERMOSTAT, var2, var1.getDeviceId()); Map<String, Object> var4 = new HashMap<>(2); var4.put(NestBindingConstants.PROPERTY_ID, var1.getDeviceId()); var4.put(NestBindingConstants.PROPERTY_FIRMWARE_VERSION, var1.getSoftwareVersion()); DiscoveryResult var5 = DiscoveryResultBuilder.create(var3) .withThingType(NestBindingConstants.THING_TYPE_THERMOSTAT).withLabel(var1.getNameLong()) .withBridge(var2).withProperties(var4).build(); thingDiscovered(var5); logger.info(""thingDiscovered called for var1""); } "	0	0	1	0	1	0
"private void Func1() { logger.trace(""starting Func1""); NestBridgeConfiguration var1 = getConfigAs(NestBridgeConfiguration.class); try { String var2 = buildQueryString(var1); String var3 = jsonFromGetUrl(var2, var1); logger.error(""Data from nest {}"", var3); updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE, ""Received update from nest""); Gson var4 = builder.create(); TopLevelData var5 = var4.fromJson(var3, TopLevelData.class); if (var5 != null) { lastDataQuery = var5; } else { var5 = lastDataQuery; } compareThings(var5.getDevices()); compareStructure(var5.getStructures().values()); } catch (InterruptedException | TimeoutException | ExecutionException e) { logger.error(""Error parsing var3"", e); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, ""Error parsing var3 "" + e.getMessage()); } } "	0	0	1	0	1	0
@Override public int[] Func1(int var1, int var2, int var3, int var4) { int[] var5 = IntCache.getIntCache(var3 * var4); for(int var6 = 0; var6 < var3; var6++) for(int var7 = 0; var7 < var4; var7++) { initChunkSeed(var1 + var6, var2 + var7); var5[var6 * var3 + var7] = BiomeGenMinestuck.mediumNormal.biomeID + (nextInt(3) == 0 ? 0 : 1); } return var5; } 	1	1	1	1	1	0
private void Func1(final double var1) { currentValueAngle = Helper.clamp(90d, 270d, (var1 + Math.abs(minValue)) * angleStep + 90d); dataBarOuterArc.setX(centerX + (0.675 * height) * Math.sin(-Math.toRadians(currentValueAngle))); dataBarOuterArc.setY(centerX + (0.675 * height) * Math.cos(-Math.toRadians(currentValueAngle))); dataBarLineToInnerArc.setX(centerX + (0.3 * height) * Math.sin(-Math.toRadians(currentValueAngle))); dataBarLineToInnerArc.setY(centerX + (0.3 * height) * Math.cos(-Math.toRadians(currentValueAngle))); setBarColor(var1); valueText.setText(String.format(Locale.US, formatString, var1)); if (valueText.getLayoutBounds().getWidth() > 0.28 * width) Helper.adjustTextSize(valueText, 0.28 * width, size * 0.24); valueText.relocate((width - valueText.getLayoutBounds().getWidth()) * 0.5, 0.615 * height + (0.3 * height - valueText.getLayoutBounds().getHeight()) * 0.5); } 	1	0	1	1	1	0
"private static <T extends HttpMethod> T Func1(T var1) { var1.setRequestHeader(""Content-Type"", ""application/json; charset=utf-8""); var1.setRequestHeader(""Accept"", ""application/json""); var1.setRequestHeader(""Accept-Charset"", ""utf-u""); var1.setRequestHeader(""User-Agent"", ""GoodData Agent/0.9""); var1.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY); return var1; } "	0	0	0	0	1	0
"public String Func1() { String var1 = index + "". ""; if (!priority) { var1 = taskType + "": ""; } else { var1 += ""Important "" + taskType + "": ""; } var1 += content + ""\n""; if (deadline != null) { var1 += ""  deadline: "" + deadline + ""\n""; } if (start != null) { var1 += ""  start: "" + start + ""\n""; } if (end != null) { var1 += ""  end: "" + end + ""\n""; } if (reminder != null) { var1 += ""  reminder: "" + reminder + ""\n""; } var1 += ""  done: "" + done; return var1; } "	1	0	1	0	1	0
@Override public void Func1(Model<UserData, CityData> var1, Model<UserData, CityData> var2, UserData var3, double var4) { Pos2D var5 = var3.getClickLocation(); Tile var6 = var2.getWorld().getTileAt(var5); ZoneType var7 = var3.getZoneSelection(); double var8 = Rules.score(var2); double var9 = Rules.score(var1); double var10 = ((var9 - var8) / 2.0) + 0.5; double[] var11 = Util.appendVectors(ModelToVec.getTileAttributesAsVector(var6), ModelToVec.getZoneAsVector(var7)); learn(var11, new double[] { var9 }); } 	0	0	0	0	1	0
"private static BipedPart Func1(TileEntityMannequin var1, String var2) { Part var3 = parts.get(var2); if(var3 != null) { if(var1.getBipedRotations() != null) { switch(var3) { case head: { return var1.getBipedRotations().head; } case chest: { return var1.getBipedRotations().chest; } case left_arm: { return var1.getBipedRotations().leftArm; } case right_arm: { return var1.getBipedRotations().rightArm; } case left_leg: { return var1.getBipedRotations().leftLeg; } case right_leg: { return var1.getBipedRotations().rightLeg; } } } return null; } throw new IllegalArgumentException(""invalid mannequin var3""); } "	0	0	0	0	1	0
"public void Func1() throws Throwable { MobileServiceClient var1 = null; try { var1 = new MobileServiceClient(appUrl, getInstrumentation().getTargetContext()); } catch (MalformedURLException e) { e.printStackTrace(); } var1 = var1.withFilter(new ServiceFilter() { @Override public ListenableFuture<ServiceFilterResponse> Func2(ServiceFilterRequest var2, NextServiceFilterCallback var3) { final SettableFuture<ServiceFilterResponse> var4 = SettableFuture.create(); int var5 = -1; int var6 = -1; int var7 = -1; int var8 = -1; int var9 = -1; int var10 = -1; String var11 = ""X-ZUMO-INSTALLATION-ID""; String var12 = ""ZUMO-API-VERSION""; String var13 = ""X-ZUMO-VERSION""; String var14 = ""User-Agent""; String var15 = ""Accept""; String var16 = ""Accept-Encoding""; String var17 = ""3.0.0""; String var18 = ""2.0.0""; Headers var19 = var2.getHeaders(); for (int var20 = 0; var20 < var19.size(); var20++) { if (var19.name(var20) == var11) { var5 = var20; } else if (var19.name(var20) == var12) { var6 = var20; } else if (var19.name(var20) == var13) { var7 = var20; } else if (var19.name(var20) == var14) { var8 = var20; } else if (var19.name(var20) == var15) { var9 = var20; } else if (var19.name(var20) == var16) { var10 = var20; } } if (var5 == -1) { var4.setException(new Exception(""var5 == -1"")); return var4; } if (var6 == -1) { var4.setException(new Exception(""var6 == -1"")); return var4; } if (var7 == -1) { var4.setException(new Exception(""var7 == -1"")); return var4; } if (var8 == -1) { var4.setException(new Exception(""var8 == -1"")); return var4; } if (var9 == -1) { var4.setException(new Exception(""var9 == -1"")); return var4; } if (var10 == -1) { var4.setException(new Exception(""var10 == -1"")); return var4; } String var21 = String.format(""ZUMO/%s (lang=%s; os=%s; os_version=%s; arch=%s; version=%s)"", ""1.0"", ""Java"", ""Android"", Build.VERSION.RELEASE, Build.CPU_ABI, var17); if (var19.value(var5) == null) { var4.setException(new Exception(""var19[var5] == null"")); return var4; } if (!var18.equals(var19.value(var6))) { var4.setException(new Exception(""expectedAppKey != var19[var6]"")); return var4; } if (!var21.equals(var19.value(var8))) { var4.setException(new Exception(""var21 != var19[var8]"")); return var4; } if (!var17.equals(var19.value(var7))) { var4.setException(new Exception(var17 + ""!= var19[var7]"")); return var4; } if (!""application/json"".equals(var19.value(var9))) { var4.setException(new Exception(""application/json != var19[var9]"")); return var4; } if (!""gzip"".equals(var19.value(var10))) { var4.setException(new Exception(""gzip != var19[var10]"")); return var4; } ServiceFilterResponseMock var22 = new ServiceFilterResponseMock(); var22.setContent(""{}""); var4.set(var22); return var4; } }); try { var1.getTable(""dummy"").execute().get(); } catch (Exception exception) { if (exception instanceof ExecutionException) { fail(exception.getCause().getMessage()); } else { fail(exception.getMessage()); } } } "	1	1	1	1	0	0
"@Override public void Func1(String var1, JsonObject[] var2, boolean var3) throws MobileServiceLocalStoreException { try { String var4 = normalizeTableName(var1); int var5 = var2.length; int var6 = mTables.get(var4).entrySet().size(); int var7 = 999; int var8 = var7 / var6; int var9 = (var5 / var8) + 1; int var10 = var5; for (int var11=0; var11 < var9; var11++) { int var12 = var8; if (var10 < var8) { var12 = var10; } JsonObject[] var13 = new JsonObject[var12]; for(int var14=0; var14 < var12; var14++) { var13[var14] = var2[(var11 * var8) + var14]; } Statement var15 = generateUpsertStatement(var4, var13, var3); if (var3 && var15.sql == """") return; SQLiteDatabase var16 = this.getWritableDatabaseSynchronized(); try { var16.execSQL(var15.sql, var15.parameters.toArray()); } finally { this.closeDatabaseSynchronized(var16); } var10 -= var8; } } catch (Throwable t) { throw new MobileServiceLocalStoreException(t); } } "	0	0	0	0	1	0
"@Override public void Func1(ClientStreamChannelContext var1, StreamResponsePacket var2) { LOGGER.info(""Func1 StreamChannel:{}, Packet:{}"", var1, var2); } "	0	0	1	0	1	0
"@Override public int Func1(Graphics var1, PageFormat var2, int var3) throws PrinterException { if (var1 == null) { throw new PrinterException(""No var1 specified""); } if (var2 == null) { throw new PrinterException(""No page format specified""); } if (var3 + 1 > images.size()) { return NO_SUCH_PAGE; } log.trace(""Requested page {} for printing"", var3); BufferedImage var4 = images.get(var3); var4 = fixColorModel(var4); if (imageRotation % 360 != 0) { var4 = rotate(var4, imageRotation); } Graphics2D var5 = (Graphics2D)var1; var5.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION, RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY); var5.setRenderingHint(RenderingHints.KEY_INTERPOLATION, interpolation); var5.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY); var5.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY); var5.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); var5.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE); log.trace(""{}"", var5.getRenderingHints()); double var6 = var2.getImageableWidth(); double var7 = var2.getImageableHeight(); int var8 = var4.getWidth(); int var9 = var4.getHeight(); if (scaleImage) { if ((var4.getWidth() / var4.getHeight()) >= (var6 / var7)) { var8 = (int)var6; var9 = (int)(var4.getHeight() / (var4.getWidth() / var6)); } else { var8 = (int)(var4.getWidth() / (var4.getHeight() / var7)); var9 = (int)var7; } } double var10 = var2.getImageableX(); double var11 = var2.getImageableY(); log.debug(""Paper area: {},{}:{},{}"", (int)var10, (int)var11, (int)var6, (int)var7); log.trace(""Image size: {},{}"", var8, var9); var5.drawImage(var4, (int)var10, (int)var11, (int)var10 + var8, (int)var11 + var9, 0, 0, var4.getWidth(), var4.getHeight(), null); return PAGE_EXISTS; } "	0	0	0	0	1	0
"@NiftyEventSubscriber(id = ""mapDropTarget"") public void Func1(String var1, @Nonnull DroppableDroppedEvent var2) { Element var3 = var2.getDraggable().getElement(); final int var4 = var3.getX() + (var3.getWidth() / 2); final int var5 = var3.getY() + (var3.getHeight() / 2); ItemCount var6 = World.getInteractionManager().getMovedAmount(); final InteractionManager var7 = World.getInteractionManager(); if (var6 == null) { LOGGER.error(""Corrupted drag detected!""); var7.cancelDragging(); return; } if (ItemCount.isGreaterOne(var6) && isShiftPressed()) { numberSelect.requestNewPopup(1, var6.getValue(), new NumberSelectPopupHandler.Callback() { @Override public void Func2() { } @Override public void Func3(int var8) { var7.dropAtMap(var4, var5, ItemCount.getInstance(var8)); } }); } else { var7.dropAtMap(var4, var5, var6); } } "	0	0	1	1	0	0
@Test public void Func1() throws Exception { CSG var1 = new Cube(10, 10, 10).toCSG().union(new Sphere(6.5).toCSG()); List<Polygon> var2 = Slice.Func1(var1, new Transform(), 0); CSG var3 = CSG.fromPolygons(var2); System.out.println(var3.toObjString()); } 	0	0	0	0	1	0
"@Test public void Func1() throws Exception { InputStreamReader var1 = new InputStreamReader(Resources.getResource(""sample.json"").openStream()); Book var2 = surfer.collectOne(var1, Book.class, ""$..var2[1]""); assertEquals(""Evelyn Waugh"", var2.getAuthor()); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { Builder var1 = context(); JsonPathListener var2 = mock(JsonPathListener.class); var1.bind(""$.store..bicycle..*"", var2); surfer.surf(new InputStreamReader(Resources.getResource(""sample.json"").openStream()), var1.build()); verify(var2).onValue(eq(provider.primitive(""red"")), any(ParsingContext.class)); verify(var2).onValue(eq(provider.primitive(19.95)), any(ParsingContext.class)); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { Builder var1 = context(); JsonPathListener var2 = mock(JsonPathListener.class); JsonPathListener var3 = mock(JsonPathListener.class); JsonPathListener var4 = mock(JsonPathListener.class); JsonPathListener var5 = mock(JsonPathListener.class); JsonPathListener var6 = mock(JsonPathListener.class); JsonPathListener var7 = mock(JsonPathListener.class); var1.bind(""$"", var2); var1.bind(""$[0]"", var3); var1.bind(""$[1]"", var4); var1.bind(""$[2]"", var5); var1.bind(""$[3]"", var6); var1.bind(""$[4]"", var7); surfer.surf(new InputStreamReader(Resources.getResource(""var9.json"").openStream()), var1.build()); Object var8 = provider.createObject(); provider.consumeObjectEntry(var8, ""key"", provider.primitive(""value"")); Object var9 = provider.createArray(); provider.consumeArrayElement(var9, provider.primitive(""abc"")); provider.consumeArrayElement(var9, provider.primitive(8.88)); provider.consumeArrayElement(var9, provider.primitive(true)); provider.consumeArrayElement(var9, provider.primitiveNull()); provider.consumeArrayElement(var9, var8); verify(var2).onValue(eq(var9), any(ParsingContext.class)); verify(var3).onValue(eq(provider.primitive(""abc"")), any(ParsingContext.class)); verify(var4).onValue(eq(provider.primitive(8.88)), any(ParsingContext.class)); verify(var5).onValue(eq(provider.primitive(true)), any(ParsingContext.class)); verify(var6).onValue(eq(provider.primitiveNull()), any(ParsingContext.class)); verify(var7).onValue(eq(var8), any(ParsingContext.class)); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { Object var1 = surfer.collectOne(new InputStreamReader(Resources.getResource(""sample.json"").openStream()), ""$..book[1,3][author,title]""); assertEquals(""Evelyn Waugh"", var1); } "	0	0	0	0	1	0
@Override protected int Func1() { return R.layout.dialog_payment_request_help; } 	0	0	0	0	1	0
"public void Func1(OutputStream var1) throws IOException, PermissionDeniedException { if (LOG.isDebugEnabled()) { LOG.debug(""Stream started""); } long var2 = System.currentTimeMillis(); try(final DBBroker broker = brokerPool.get(Optional.of(subject))) { DocumentImpl var3 = null; try { var3 = broker.getXMLResource(xmldbUri, Lock.READ_LOCK); if (var3.getResourceType() == DocumentImpl.XML_FILE) { Serializer var4 = broker.getSerializer(); var4.reset(); try { var4.setProperties(configuration); try (Writer w = new OutputStreamWriter(var1, ""UTF-8"")) { var4.serialize(var3, w); w.flush(); } if (!(var1 instanceof VirtualTempFile)) { var1.flush(); } } catch (SAXException e) { LOG.error(e); throw new IOException(String.format(""Error while serializing XML var3: %s"", e.getMessage()), e); } } else { broker.readBinaryResource((BinaryDocument) var3, var1); var1.flush(); } } finally { if (var3 != null) { var3.getUpdateLock().release(Lock.READ_LOCK); } } } catch (EXistException e) { LOG.error(e); throw new IOException(e.getMessage()); } catch (PermissionDeniedException e) { LOG.error(e); throw e; } finally { if (LOG.isDebugEnabled()) { LOG.debug(String.format(""Stream stopped, duration %s msec."", System.currentTimeMillis() - var2)); } } } "	0	0	0	0	1	0
"public static Game Func1(Map var1) { Integer var2 = games.size(); String var3 = var1.baseMapName+Integer.toString(var2); boolean var4 = copyDirectory('.' + File.separator + var1.baseMapName, '.' + File.separator + var3); try { FileUtils.forceDelete( new File("".""+File.separator+var3+File.separator+""uid.dat"") ); } catch(IOException e) { } if(var4) { Bukkit.getLogger().log(Level.WARNING, ""var4""); } else { Bukkit.getLogger().log(Level.WARNING, ""bad""); } World var5 = Bukkit.getServer().createWorld(new WorldCreator(var3)); Game var6 = new Game(var1,var2,var5,Main.maxgamesize); games.put(var2, var6); return var6; } "	0	0	1	0	1	0
"public static void Func1(String...var1){ Vertice var2 = new Vertice((float) 1., (float)1.); Vertice var3 = new Vertice((float) 1.0, (float)2); System.out.println(""SLOPE: "" + lineSlope(new Aresta(var2, var3))); System.out.println(""Is Hor: "" + isLineHorizontal(var2, var3)); System.out.println(""Is Ver: "" + isLineVertical(var2, var3)); } "	1	1	1	1	1	0
@Override public void Func1(boolean var1) { super.Func1(var1); if (subscription != null && !subscription.isDisposed()) { subscription.dispose(); } } 	1	1	1	0	1	0
"public void Func1(View var1) { EditText var2 = (EditText) findViewById(R.id.edit_new_set_title); String var3 = var2.getText().toString(); if (TextUtils.isEmpty(var3)) { var2.setError(getString(R.string.empty_title)); return; } if (!var3.matches(""[a-zA-Z0-9 ]+"")) { var2.setError(getString(R.string.invalid_title)); return; } FlashcardProvider var4 = new FlashcardProvider(getApplicationContext()); if (!var4.newSetTable(var3)) { var2.setError(getString(R.string.title_taken)); return; } Intent var5 = new Intent(this, MainActivity.class); startActivity(var5); finish(); } "	0	0	1	0	1	0
"@Override public View Func1(int var1, View var2, final ViewGroup var3) { final Question var4 = getItem(var1); QuestionHolder var5 = new QuestionHolder();; final View var6 = var2; LayoutInflater var7 = LayoutInflater.from(getContext()); var2 = var7.inflate(R.layout.list_item_question, var3, false); var5.qText = (TextView) var2.findViewById(R.id.textViewQuestion); var5.qText.setText(String.valueOf(var4.getId()) + "": "" + var4.getText()); var5.qText.setTag(var4.getId()); var5.rgQuestion = (RadioGroup) var2.findViewById(R.id.rgQuestion); var5.rgQuestion.setTag(var4.getId()); for (int var8 = 0; var8 < var5.rgQuestion.getChildCount(); var8++) { RadioButton var9 = (RadioButton) var5.rgQuestion.getChildAt(var8); if (answers.get(var4) == null) { if (var9.isChecked()) { answers.put(var4, var9.getText().toString()); } } else if (var9.getText().toString() == answers.get(var4)) { var9.setChecked(true); } } var5.rgQuestion.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() { @Override public void Func2(RadioGroup var10, int var8) { RadioButton var9 = (RadioButton) var3.findViewById(var10.getCheckedRadioButtonId()); answers.put(var4, var9.getText().toString()); } }); return var2; } "	0	0	0	0	1	0
"private /*@Nullable*/ Pair<Class<? extends Annotation>, Prefix> Func1(AnnotationMirror var1) { if (isAliasedAnnotation(var1)) { AnnotationMirror var2 = getUnitsMultipleMetaAnnotation(var1); Class<? extends Annotation> var3 = AnnotationUtils.getElementValueClass(var2, ""quantity"", true).asSubclass(Annotation.class); Prefix var4 = AnnotationUtils.getElementValueEnum(var2, ""var4"", Prefix.class, true); return Pair.of(var3, var4); } else { return null; } } "	0	0	0	0	1	0
"public void Func1() { List<String> var1 = new LinkedList<String>(); Enumeration<TableColumn> var2 = this.getColumnModel().getColumns(); while(var2.hasMoreElements()) { String var3 = var2.nextElement().getHeaderValue().toString(); try { var1.add(PokeColumn.getForHeading(var3).toString()); } catch (IllegalArgumentException exc) { } } String var4 = String.join("","", var1); ConfigNew.getConfig().setString(ConfigKey.POKEMONTABLE_COLUMNORDER, var4); } "	0	0	0	0	1	0
private List<Cmdb> Func1(){ List<Cmdb> var1; HpsmSoapModel var2 = new HpsmSoapModel(); var2.setConfigurationItemSubType(hpsmSettings.getCompSubType()); var2.setConfigurationItemType(hpsmSettings.getCompType()); var2.setSoapAction(hpsmSettings.getDetailsSoapAction()); var2.setRequestTypeName(hpsmSettings.getDetailsRequestType()); var2.setStatus(hpsmSettings.getStatus()); var1 = getConfigurationItemList(var2); return var1; } 	0	0	0	0	1	0
"private ColumnMetaData Func1(JSONObject var1) throws JSONException { ColumnMetaData var2 = new ColumnMetaData(var1.getString(""name""), var1.getInt(""columnIndex"")); if (var1.has(""datatype"")) { var2.setDataType(var1.getString(""datatype"")); } if (var1.has(""table"")) { var2.setTable(var1.getString(""table"")); } if (var1.has(""propertyUrl"")) { var2.setPropertyUrl(var1.getString(""propertyUrl"")); } if (var1.has(""titles"")) { var2.setDataType(var1.getString(""titles"")); } return var2; } "	0	0	0	0	1	0
public void Func1() { this.lecteur.pointeur.refInc(); } 	0	0	0	0	0	1
"@Define(""minutes"") public Integer Func1() { return Math.round(getDuration() / 60000f); } "	0	0	0	0	0	1
private Edge Func1(@Nullable Edge var1) { return Optional.ofNullable(var1) .map(AutoCleanerIdEdge::new) .orElse(null); } 	0	0	0	0	0	1
"private void Func1(MzTabParser var1, long var2) throws LineItemParsingHandlerException { if (var1.getMetaDataSection().getMsRunEntry(getIndex()).getMsRunIdFormat() != null) { throw new LineItemParsingHandlerException(""DUPLICATED MS-Run ID Format FOUND AT LINE "" + var2); } } "	0	0	0	0	1	0
private Program Func1(Population var1, List<ProgramInfo> var2) { double var3 = sumTotalWeight(var2); double var4 = var3 * mutator.getNextDouble(); double var5 = 0; Iterator<ProgramInfo> var6 = var2.var6(); while(var6.hasNext()) { ProgramInfo var7 = var6.next(); var5 += Math.abs(var7.getWeight()); if(var5 >= var4) { var6.remove(); return var1.getProgram(var7.getName()); } } return null; } 	0	0	0	0	1	0
"public void Func1(AMQStateManager var1, ConnectionCloseBody var2, int var3) throws AMQException { AMQProtocolSession var4 = var1.getProtocolSession(); if (_logger.isInfoEnabled()) { _logger.info(""ConnectionClose received with reply code/reply text "" + var2.getReplyCode() + ""/"" + var2.getReplyText() + "" for "" + var4); } try { var4.closeSession(); } catch (Exception e) { _logger.error(""Error closing protocol var4: "" + e, e); } MethodRegistry var5 = var4.getMethodRegistry(); ConnectionCloseOkBody var6 = var5.createConnectionCloseOkBody(); var4.writeFrame(var6.generateFrame(var3)); } "	0	0	0	0	1	0
"@Test public void Func1() throws IOException { Resource var1 = new ClassPathResource(""uk/ac/ebi/interpro/scan/io/tmhmm/rawResultOutputFile.txt""); assertNotNull(""File resource var2 NULL!"", var1); assertTrue(""File resource does not exist!"", var1.exists()); InputStream var2 = var1.getInputStream(); assertNotNull(""Input stream var2 NULL!"", var2); Set<TMHMMProtein> var3 = parser.parse(var2); assertEquals(""Size of var4 set differs from the expected one!"", 3, var3.size()); for (TMHMMProtein var4 : var3) { if (var4.getMatches().size() == 3) { for (TMHMMMatch var5 : var4.getMatches()) { Signature var6 = var5.getSignature(); assertNotNull(""Signature of var4 with Id "" + var4.getProteinIdentifier() + "" shouldn't be Null!"", var6); assertEquals(""Signature accession of var4 with Id "" + var4.getProteinIdentifier() + "" differs from the expected one!"", ""TMhelix"", var6.getAccession()); assertEquals(""Signature description of var4 with Id "" + var4.getProteinIdentifier() + "" differs from the expected one!"", ""transmembrane helix"", var6.getDescription()); assertNotNull(""Signature library release shouldn't be Null!"", var6.getSignatureLibraryRelease()); assertEquals(""Signature library release version of var4 with Id "" + var4.getProteinIdentifier() + "" differs from the expected one!"", ""2.5.1"", var6.getSignatureLibraryRelease().getVersion()); assertEquals(""Signature library of var4 with Id "" + var4.getProteinIdentifier() + "" differs from the expected one!"", SignatureLibrary.TMHMM, var6.getSignatureLibraryRelease().getLibrary()); checkMatchLocations(var5.getLocations(), var4.getProteinIdentifier(), Arrays.asList(20, 62, 201), Arrays.asList(42, 84, 223)); } } else if (var4.getMatches().size() == 7) { for (TMHMMMatch var5 : var4.getMatches()) { checkMatchLocations(var5.getLocations(), var4.getProteinIdentifier(), Arrays.asList(35, 69, 106, 148, 193, 228, 270), Arrays.asList(57, 91, 128, 170, 215, 250, 287)); } } else if (var4.getMatches().size() == 8) { for (TMHMMMatch var5 : var4.getMatches()) { checkMatchLocations(var5.getLocations(), var4.getProteinIdentifier(), Arrays.asList(200, 234, 271, 314, 356, 391, 412, 438), Arrays.asList(222, 256, 293, 336, 378, 408, 431, 455)); } } else { assertTrue(""Unexpected var4 with "" + var4.getMatches().size() + "" var5(es) found!"", false); } } } "	0	0	1	1	1	0
private void Func1() { FragmentTransaction var1 = getSupportFragmentManager().beginTransaction(); Fragment var2 = new NearbyListFragment(); var2.setArguments(bundle); var1.replace(R.id.container, var2); var1.commit(); } 	0	0	1	0	1	0
"@Test public void Func1() throws IOException { SimpleModule var1 = new SimpleModule(); var1.addSerializer(new Geoshape.GeoshapeGsonSerializer(Geoshape.class)); final ObjectMapper var2 = new ObjectMapper(); var2.registerModule(var1); assertEquals(""{\""type\"":\""Point\"",\""coordinates\"":[20.5,10.5]}"", var2.writeValueAsString(Geoshape.point(10.5, 20.5))); assertEquals(""{\""type\"":\""Polygon\"",\""coordinates\"":[[20.5,10.5],[22.5,10.5],[22.5,12.5],[20.5,12.5]]}"", var2.writeValueAsString(Geoshape.box(10.5, 20.5, 12.5, 22.5))); assertEquals(""{\""type\"":\""Circle\"",\""radius\"":30.5,\""coordinates\"":[20.5,10.5]}"", var2.writeValueAsString(Geoshape.circle(10.5, 20.5, 30.5))); } "	1	0	1	1	1	0
float Func1(JoglDrawContext var1, float var2) { return var2 * 30; } 	0	0	1	0	1	0
"private void Func1() { LayoutInflater.from(mContext).inflate(R.layout.search_view, this, true); mRoot = (CoordinatorLayout) findViewById(R.id.search_layout); mTintView = mRoot.findViewById(R.id.transparent_view); mSearchBar = (LinearLayout) mRoot.findViewById(R.id.search_bar); mBack = (ImageButton) mRoot.findViewById(R.id.action_back); mSearchEditText = (EditText) mRoot.findViewById(R.id.et_search); mVoice = (ImageButton) mRoot.findViewById(R.id.action_voice); mClear = (ImageButton) mRoot.findViewById(R.id.action_clear); mSuggestionsListView = (ListView) mRoot.findViewById(R.id.suggestion_list); mBack.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var1) { closeSearch(); } }); mVoice.setOnClickListener(new OnClickListener() { @Override public void Func2(View var1) { onVoiceClicked(); } }); mClear.setOnClickListener(new OnClickListener() { @Override public void Func2(View var1) { mSearchEditText.setText(""""); } }); mTintView.setOnClickListener(new OnClickListener() { @Override public void Func2(View var1) { closeSearch(); } }); displayVoiceButton(true); initSearchView(); mAdapter = new CursorSearchAdapter(mContext,null,0); ((CursorAdapter)mAdapter).setFilterQueryProvider(new FilterQueryProvider() { @Override public Cursor runQuery(CharSequence constraint) { String filter = constraint.toString(); if (filter.isEmpty()) { return getHistoryCursor(); } else { return mContext.getContentResolver().query( HistoryContract.HistoryEntry.CONTENT_URI, null, HistoryContract.HistoryEntry.COLUMN_QUERY + "" LIKE ?"", new String[]{""%"" + filter + ""%""}, HistoryContract.HistoryEntry.COLUMN_IS_HISTORY + "" DESC, "" + HistoryContract.HistoryEntry.COLUMN_QUERY ); } } }); mSuggestionsListView.setAdapter(mAdapter); mSuggestionsListView.setTextFilterEnabled(true); } "	0	0	0	0	0	1
"public static void Func1(DecoratedKey var1, ColumnFamilyStore var2, Set<String> var3) { if (logger.isDebugEnabled()) logger.debug(""Indexing row {} "", var2.metadata.getKeyValidator().getString(var1.getKey())); Set<SecondaryIndex> var4 = var2.indexManager.getIndexesByNames(var3); SinglePartitionReadCommand var5 = SinglePartitionReadCommand.fullPartitionRead(var2.metadata, FBUtilities.nowInSeconds(), var1); try (OpOrder.Group opGroup = var2.keyspace.writeOrder.start(); UnfilteredRowIterator partition = var5.queryMemtableAndDisk(var2)) { var2.indexManager.Func1(partition, opGroup, var4); } } "	0	0	0	0	1	0
"@RequestMapping(value = ""/{var2}/photo"", method = RequestMethod.POST) public String Func1(@RequestParam(""file"") MultipartFile var1, @PathVariable Integer var2, Model var3) { if (var1.isEmpty()) { var3.addAttribute(""error"", ""Choose any file""); return ""users/user_profile""; } User var4 = userService.findById(var2); if(!AuthorityUtil.checkForOwnerOfProfile(var4.getSsoId())) return ""account/access_denied""; try { byte[] var5 = var1.getBytes(); var4.Func1(var5); userService.update(var4); } catch (IOException e) { e.printStackTrace(); } return ""redirect:/users/"" + var4.getSsoId(); } "	0	0	1	1	1	0
"protected void Func1(SSLEngine var1, AsyncHttpClientConfig var2) { var1.setUseClientMode(true); if (!var2.isDisableHttpsAlgorithm()) { SSLParameters var3 = var1.getSSLParameters(); var3.setEndpointIdentificationAlgorithm(""HTTPS""); var1.setSSLParameters(var3); } } "	0	0	0	0	1	0
"@Override public Object Func1(Object var1, Method var2, Object[] var3) throws Throwable { try { main.Func1(null, new Object[]{var3}); } catch (Exception e) { throw new RuntimeException(""failed to Func1 main(String...) on class: "" + mainClassName, e); } return null; } "	0	0	0	0	1	0
@Override public boolean Func1(Marker var1) { if (mBikeStationData.containsMaker(var1)) { mMap.setInfoWindowAdapter(mBikeInfoWindowAdapter); BikeRentalStation var2 = mBikeStationData.getBikeStationOnMarker(var1); var1.showInfoWindow(); if (mOnFocusChangedListener != null) { mOnFocusChangedListener.onFocusChanged(var2); } mBikeStationData.selectMaker(var1); ObaAnalytics.reportEventWithCategory( ObaAnalytics.ObaEventCategory.UI_ACTION.toString(), context.getString(R.string.analytics_action_button_press), context.getString(var2.isFloatingBike ? R.string.analytics_label_bike_station_marker_clicked : R.string.analytics_label_floating_bike_marker_clicked)); return true; } else { mBikeStationData.removeMarkerSelection(); } return false; } 	0	0	0	0	0	1
private void Func1(@NonNull final TLoadedItems var1, final int var2, final boolean var3) { final List<TItem> var4 = new ArrayList<>(var1.getItems()); final boolean var5 = var2 > size() - 1; if (!var3) { if (this.loadedItemsFilter != null) { removeDuplicatesFromList(var4, this.loadedItemsFilter); } innerList.addAll(var2, var4); } else { resetState(); innerList.set(var4); } if (var5) { moreItemsReference = var1.getReference(); moreItemsCount.onNext(var1.getMoreItemsCount()); } } 	1	0	0	0	1	0
"public String Func1() { String var1 = m_env.getGlobalConfig().getProperty(""portal.sync.var1""); if (Env.LOCAL.equals(m_env.getEnv()) || StringUtils.isBlank(var1)) { return ""127.0.0.1""; } return var1; } "	1	1	1	1	1	0
@Override protected Options Func1() { return new Options().addOption(RECURSIVE_OPTION); } 	0	0	1	0	1	0
"@Test(expected = NotFoundException.class) public void Func1() throws Exception { DirectionsRoute[] var1 = gpDirectionsService.getDirections( ""sdjfhsjfhsjf"", ""sjdfhjsdf7w7r"").await(); } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { DirectionsRoute[] var1 = gpDirectionsService.newRequest() .mode(TravelMode.WALKING) .origin(""Via Provinciale, Marsicovetere"") .destination(""Via Nazionale, Marsicovetere"").await(); assertNotNull(var1); assertEquals(TravelMode.WALKING, var1[0].legs[0].steps[0].travelMode); } "	0	0	1	0	0	0
public void Func1(String var1, Object var2){ String []var3 = getPathAsList(var1); Object var4 = j; if(var3.length == 1){ j.put(var1, var2); } else{ for (int var5 = 0; var5 < var3.length-1; var5++) { var4 = getValueAt(var3[var5], var4, null); } } if(var4 instanceof JsonObject){ ((JsonObject) var4).put(var3[var3.length-1], var2); } else if(var4 instanceof JsonArray){ try { ((JsonArray)var4).getList().set(Integer.parseInt( var3[var3.length-1].substring( 1, var3[var3.length-1].length()-1)), var2/*remove the []*/); } catch (NumberFormatException e) {} } } 	0	0	0	0	0	1
private void Func1(String var1) { JDBCAccess var2 = getJDBCAccess(); ImageLevelInfo var3 = var2.getLevelInfo(var2.getNumOverviews()); GeneralEnvelope var4 = new GeneralEnvelope(new double[] { var3.getExtentMaxX() - DELTA, var3.getExtentMaxY() - DELTA }, new double[] { var3.getExtentMaxX() + DELTA, var3.getExtentMaxY() + DELTA }); try { var4.setCoordinateReferenceSystem(CRS.decode(CRSNAME)); imageMosaic(var1, getConfigUrl(), var4, 400, 400,Color.green,null,null); } catch (Exception e) { Assert.fail(e.getMessage()); } } 	1	1	1	0	1	0
"public static String Func1(String var1) { return String.format(""not(%s)"", var1); } "	0	0	0	1	0	0
"private static String Func1(String var1, String... var2) { return Arrays.stream(var2).map(XpathUtils::hasClass).collect(Collectors.joining("" "" + var1 + "" "")); } "	0	0	0	1	0	0
@Override public boolean Func1(Class var1, Type var2, Annotation[] var3, MediaType var4) { return checkForAnnotation(var1); } 	0	0	0	0	1	0
@Override public void Func1() { planeIndex = offsetContainer / planeSize; indexInPlane = offsetContainer % planeSize - 1; indexContainer = offsetContainer + indexInPlane; type.updateIndex( indexInPlane ); type.updateContainer( this ); IntervalIndexer.indexToPosition( indexContainer, container.dimensions, position ); } 	0	0	0	0	1	0
public void Func1(String var1) { this.var1 = var1; } 	0	0	1	0	1	0
"public void Func1(Graphics var1) { Graphics2D var2 = Theme.setupGraphics2D(var1); if (name == """" && serialport == """") { PreferencesMap var3 = BaseNoGui.getBoardPreferences(); if (var3 != null) setBoardName(var3.get(""name"")); else setBoardName(""-""); setSerialPort(PreferencesData.get(""serial.port"")); } var2.setColor(background); Dimension var4 = getSize(); var2.fillRect(0, 0, var4.width, var4.height); var2.setFont(font); var2.setColor(foreground); int var5 = (var4.height + var2.getFontMetrics().getAscent()) / 2; var2.drawString(text, scale(6), var5); var2.setColor(messageForeground); String var6 = I18n.format(tr(""{0} on {1}""), name, serialport); Rectangle2D var7 = var2.getFontMetrics().getStringBounds(var6, null); var2.drawString(var6, var4.width - (int) var7.getWidth() - RESIZE_IMAGE_SIZE, var5); if (OSUtils.isMacOS()) { var2.drawImage(resize, var4.width - RESIZE_IMAGE_SIZE, 0, this); } } "	0	0	1	0	1	0
public void Func1(FindVisitByUUIDListener var1) { String var2 = VISITS_BY_UUID_BASE_URL + var1.getPatientUUID() + VISIT_BY_UUID_END_URL; mLogger.d(SENDING_REQUEST + var2); JsonObjectRequestWrapper var3 = new JsonObjectRequestWrapper(Request.Method.GET, var2, null, var1, var1, DO_GZIP_REQUEST); mOpenMRS.addToRequestQueue(var3); } 	0	0	0	0	1	0
public void Func1(UserInformationListener var1) { String var2 = USER_INFORMATION_BASE_URL + var1.getUsername(); mLogger.d(SENDING_REQUEST + var2); JsonObjectRequestWrapper var3 = new JsonObjectRequestWrapper(Request.Method.GET, var2, null, var1, var1, DO_GZIP_REQUEST); mOpenMRS.addToRequestQueue(var3); } 	0	0	0	0	1	0
public void Func1(FullInformationListener var1) { String var2 = FULL_INFORMATION_BASE_URL + var1.getUserUUID(); mLogger.d(SENDING_REQUEST + var2); JsonObjectRequestWrapper var3 = new JsonObjectRequestWrapper(Request.Method.GET, var2, null, var1, var1, DO_GZIP_REQUEST); mOpenMRS.addToRequestQueue(var3); } 	0	0	0	0	1	0
public void Func1(FindPatientListener var1) { String var2 = FIND_PATIENT_BASE_URL + var1.getLastQuery() + API.FULL_VERSION_NEXT_PARAM; mLogger.d(SENDING_REQUEST + var2); JsonObjectRequestWrapper var3 = new JsonObjectRequestWrapper(Request.Method.GET, var2, null, var1, var1, DO_GZIP_REQUEST); mOpenMRS.addToRequestQueue(var3); } 	0	0	0	0	1	0
@Override public float Func1(int var1) { Float var2 = var1 < columnWidth.size() ? columnWidth.get(var1) : null; return var2 != null ? var2 : defaultColumnWidth; } 	0	0	0	0	1	0
"@Override public void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.mdlive_location); clearMinimizedTime(); try { setDrawerLayout((DrawerLayout) findViewById(R.id.drawer_layout)); final Toolbar var2 = (Toolbar) findViewById(R.id.var2); if (var2 != null) { setSupportActionBar(var2); elevateToolbar(var2); } } catch (Exception e) { e.printStackTrace(); } this.setTitle(getString(R.string.mdl_update_location)); ((ImageView) findViewById(R.id.backImg)).setImageResource(R.drawable.exit_icon); findViewById(R.id.backImg).setContentDescription(getString(R.string.mdl_ada_back_button)); ((ImageView) findViewById(R.id.txtApply)).setImageResource(R.drawable.top_tick_icon); findViewById(R.id.txtApply).setContentDescription(getString(R.string.mdl_ada_tick_button)); ((TextView) findViewById(R.id.headerTxt)).setText(getString(R.string.mdl_update_location)); StateTxt = (TextView) findViewById(R.id.StateTxt); setProgressBar(findViewById(R.id.progressDialog)); StateTxt.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var3) { ZipcodeEditTxt.setText(""""); showListViewDialog(LongNameList, (TextView) var3); } }); locationService = new LocationCoordinates(getApplicationContext()); intentFilter = new IntentFilter(); intentFilter.addAction(getClass().getSimpleName()); ZipcodeEditTxt = (EditText) findViewById(R.id.ZipEditTxt); ZipcodeEditTxt.setTag(null); ZipcodeEditTxt.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var3) { } }); ZipcodeEditTxt.addTextChangedListener(new TextWatcher() { @Override public void Func3(CharSequence var4, int var5, int var6, int var7) { } @Override public void Func4(CharSequence var4, int var5, int var8, int var6) { } @Override public void Func5(Editable var4) { StateTxt.setText(getString(R.string.mdl_select_state)); MdliveUtils.validateZipcodeFormat(ZipcodeEditTxt); } }); Button var9 = (Button) findViewById(R.id.currentLocation); var9.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var3) { showProgress(); getLocationCoordinates(); } }); try { SharedPreferences var10 = getSharedPreferences(PreferenceConstants.USER_PREFERENCES, Context.MODE_PRIVATE); String var11 = var10.getString(PreferenceConstants.USER_STATE_LIST, ""[]""); JSONArray var12 = new JSONArray(var11); Log.d(""JSON Count"", var12.length() + """"); if(var12.length()>0){ for(int var13 = 0; var13<var12.length();var13++){ ShortNameList.add(var12.getJSONObject(var13).keys().next()); LongNameList.add(var12.getJSONObject(var13).getString(ShortNameList.get(var13))); } Log.d(""stateList->"",LongNameList.toString()); Log.d(""stateList->"",ShortNameList.toString()); } else { LongNameList = Arrays.asList(getResources().getStringArray(R.array.mdl_stateName)); ShortNameList = Arrays.asList(getResources().getStringArray(R.array.mdl_stateCode)); } } catch (Exception e) { LongNameList = Arrays.asList(getResources().getStringArray(R.array.mdl_stateName)); ShortNameList = Arrays.asList(getResources().getStringArray(R.array.mdl_stateCode)); } if (var1 == null) { getSupportFragmentManager(). beginTransaction(). add(R.id.dash_board__left_container, newInstance(), LEFT_MENU). commit(); getSupportFragmentManager(). beginTransaction(). add(R.id.dash_board__right_container, NotificationFragment.newInstance(), RIGHT_MENU). commit(); } locationService = new LocationCoordinates(this); if (MdliveUtils.checkPlayServices(this)) { locationService.buildGoogleApiClient(); } } "	0	0	1	0	0	0
"private void Func1(JobPo var1) { try { if (appContext.getExecutingJobQueue().getJob(var1.getTaskTrackerNodeGroup(), var1.getTaskId()) == null) { return; } var1.setGmtModified(SystemClock.now()); var1.setTaskTrackerIdentity(null); var1.setIsRunning(false); try { appContext.getExecutableJobQueue().add(var1); } catch (DupEntryException e) { LOGGER.warn(""ExecutableJobQueue already exist:"" + JSON.toJSONString(var1)); } appContext.getExecutingJobQueue().remove(var1.getJobId()); JobLogPo var2 = JobDomainConverter.convertJobLog(var1); var2.setLogTime(SystemClock.now()); var2.setSuccess(true); var2.setLevel(Level.WARN); var2.setLogType(LogType.FIXED_DEAD); appContext.getJobLogger().log(var2); stat.incFixExecutingJobNum(); } catch (Throwable t) { LOGGER.error(t.getMessage(), t); } LOGGER.info(""checkAndFix dead job ! {}"", JSON.toJSONString(var1)); } "	0	0	1	0	1	0
@Override public String Func1() { return enumClass.getName(); } 	0	0	0	0	0	1
"public synchronized Map<File, List<SubtitleDescriptor>> Func1(File[] var1, String var2) throws Exception { String[] var3 = var2 != null ? new String[] { getSubLanguageID(var2) } : new String[0]; Map<Query, File> var4 = new HashMap<Query, File>(var1.length); Map<File, List<SubtitleDescriptor>> var5 = new HashMap<File, List<SubtitleDescriptor>>(var1.length); List<Query> var6 = new ArrayList<Query>(var1.length); for (File var7 : var1) { if (var7.length() > HASH_CHUNK_SIZE) { String var8 = computeHash(var7); Query var9 = Query.forHash(var8, var7.length(), var3); List<SubtitleDescriptor> var10 = getCache().getSubtitleDescriptorList(var9, var2); if (var10 == null) { var6.add(var9); var4.put(var9, var7); } else { var5.put(var7, var10); } } if (var5.get(var7) == null) { var5.put(var7, new LinkedList<SubtitleDescriptor>()); } } if (var6.size() > 0) { login(); for (int var11 = 0; var11 < ceil((float) var6.size() / batchSize); var11++) { List<Query> var12 = var6.subList(var11 * batchSize, min((var11 * batchSize) + batchSize, var6.size())); for (OpenSubtitlesSubtitleDescriptor var13 : xmlrpc.searchSubtitles(var12)) { File var7 = var4.get((var12.get(0))); if (var7 != null) { var5.get(var7).add(var13); } else { Logger.getLogger(getClass().getName()).log(Level.WARNING, ""Unable to map hash to var7: "" + var13.getMovieHash()); } } for (Query var9 : var12) { getCache().putSubtitleDescriptorList(var9, var2, var5.get(var4.get(var9))); } } } return var5; } "	0	0	0	0	1	0
"@Override public void Func1(Object var1, Locale var2, File var3, File var4) throws Exception { if (!(var1 instanceof Movie && ((Movie) var1).getImdbId() > 0)) { throw new IllegalArgumentException(""Illegal Movie ID: "" + var1); } int var5 = ((Movie) var1).getImdbId(); String var6 = getSubLanguageID(var2.getDisplayName(Locale.ENGLISH)); SubFile var7 = new SubFile(); var7.setSubHash(md5(readFile(var4))); var7.setSubFileName(var4.getName()); var7.setMovieHash(computeHash(var3)); var7.setMovieByteSize(var3.length()); var7.setMovieFileName(var3.getName()); BaseInfo var8 = new BaseInfo(); var8.setIDMovieImdb(var5); var8.setSubLanguageID(var6); var7.setSubContent(readFile(var4)); try { MediaInfo var9 = new MediaInfo(); var9.open(var3); var7.setMovieFPS(var9.get(StreamKind.Video, 0, ""FrameRate"")); var7.setMovieTimeMS(var9.get(StreamKind.General, 0, ""Duration"")); var9.close(); } catch (Throwable e) { Logger.getLogger(getClass().getName()).log(Level.WARNING, e.getMessage(), e); } login(); xmlrpc.uploadSubtitles(var8, var7); } "	1	0	1	0	1	0
public static void Func1(BaseDanmaku var1, Canvas var2, float var3, float var4, boolean var5) { float var6 = var3; float var7 = var4; var3 += var1.padding; var4 += var1.padding; if (var1.borderColor != 0) { var3 += BORDER_WIDTH; var4 += BORDER_WIDTH; } HAS_STROKE = CONFIG_HAS_STROKE; HAS_SHADOW = CONFIG_HAS_SHADOW; ANTI_ALIAS = !var5 && CONFIG_ANTI_ALIAS; TextPaint var8 = getPaint(var1, var5); if (var1.var9 != null) { String[] var9 = var1.var9; if (var9.length == 1) { if (hasStroke(var1)) { applyPaintConfig(var1, var8, true); var2.drawText(var9[0], var3, var4 - var8.ascent(), var8); } applyPaintConfig(var1, var8, false); var2.drawText(var9[0], var3, var4 - var8.ascent(), var8); } else { float var10 = var1.paintHeight / var9.length; for (int var11 = 0; var11 < var9.length; var11++) { if (var9[var11] == null || var9[var11].length() == 0) { continue; } if (hasStroke(var1)) { applyPaintConfig(var1, var8, true); var2.drawText(var9[var11], var3, var11 * var10 + var4 - var8.ascent(), var8); } applyPaintConfig(var1, var8, false); var2.drawText(var9[var11], var3, var11 * var10 + var4 - var8.ascent(), var8); } } } else { if (hasStroke(var1)) { applyPaintConfig(var1, var8, true); var2.drawText(var1.text, var3, var4 - var8.ascent(), var8); } applyPaintConfig(var1, var8, false); var2.drawText(var1.text, var3, var4 - var8.ascent(), var8); } if (var1.underlineColor != 0) { Paint var12 = getUnderlinePaint(var1); float var13 = var7 + var1.paintHeight - UNDERLINE_HEIGHT; var2.drawLine(var6, var13, var6 + var1.paintWidth, var13, var12); } if (var1.borderColor != 0) { Paint var14 = getBorderPaint(var1); var2.drawRect(var6, var7, var6 + var1.paintWidth, var7 + var1.paintHeight, var14); } } 	0	0	1	0	0	0
"private String Func1() throws MalformedTreeException, BadLocationException { StringBuilder var1 = new StringBuilder(); IJavaProject var2 = getCu().getJavaProject(); var1.append(CodeFormatterUtil.createIndentString(getIndentLevel(), var2)); if (!getVisibility().isEmpty()) { var1.append(getVisibility()).append("" ""); } var1.append(MODIFIER).append("" "").append(getConstantTypeName()).append(constantName).append("" = "").append( createExpressionText()); IDocument var3 = new Document(var1.toString()); DefaultGroovyFormatter var4 = new DefaultGroovyFormatter(var3, new FormatterPreferences(unit), getIndentLevel()); TextEdit var5 = var4.format(); var5.apply(var3); return getDefaultNewlineCharacterTwice() + var3.get(); } "	0	0	1	0	1	0
"public static void Func1 (Class var1) { final Logger var2 = LoggerFactory.getLogger(ShellCommandsFactory.class); Method[] var3 = var1.getMethods(); for (Method var4 : var3) { ShellCommand var5 = var4.getAnnotation(ShellCommand.class); if (var5 != null) { var2.info(""Removing Shell var5 {}"", var5.name()); ShellCommandsFactory.shellCommands.values().removeAll(Collections.singleton(var5.name())); } } } "	0	0	1	0	1	0
"public boolean Func1(){ if (set(""deleted"", ""1"")) { List<Xid> var1 = new Query<Xid>(Xid.class, Xid.FLD_OBJECT, getId()).execute(); for (Xid var2 : var1) { var2.Func1(); } new DBLog(this, DBLog.TYP.DELETE); IPersistentObject var3 = ElexisEventDispatcher.getSelected(this.getClass()); if ((var3 != null) && var3.equals(this)) { ElexisEventDispatcher.clearSelection(this.getClass()); } ElexisEventDispatcher.getInstance().fire( new ElexisEvent(this, getClass(), ElexisEvent.EVENT_DELETE)); return true; } return false; } "	0	0	0	0	1	0
@Test public void Func1() { SecurityUtils.setAnonymousUser(); Study var1 = studyRepository.findOne(160L); Double var2 = service.getPseudoHeritability(var1); assertThat(var2, is(0.8788464607344941)); } 	0	0	0	0	0	1
@Override public Double Func1(Long var1, TraitUom var2, Transformation var3) { return Func1(new ArrayList<>(var2.getTraits()), var3, var1); } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception { FlinkAsciiGraphLoader<GraphHeadPojo, VertexPojo, EdgePojo> var1 = getLoaderFromString("""" + ""g0["" + ""(va {vp=0.5});"" + ""(vb {vp=0.3});"" + ""(vc {vp=0.1});"" + ""(va)-[ea {ep=2}]->(vb);"" + ""(vb)-[eb]->(vc)"" + ""]"" + ""g1["" + ""(va)-[ea]->(vb);"" + ""]"" + ""g2[]""); GraphCollection<GraphHeadPojo, VertexPojo, EdgePojo> var2 = var1.getGraphCollectionByVariables(""g0"", ""g1"", ""g2""); GraphCollection<GraphHeadPojo, VertexPojo, EdgePojo> var3 = var2 .apply(new ApplyAggregation<>(VERTEX_MAX, PropertyValue.create(0f), new MaxVertexProperty<GraphHeadPojo, VertexPojo, EdgePojo>( VERTEX_PROPERTY, Float.MIN_VALUE))) .apply(new ApplyAggregation<>(EDGE_MAX, PropertyValue.create(Long.MIN_VALUE), new MaxEdgeProperty<GraphHeadPojo, VertexPojo, EdgePojo>( EDGE_PROPERTY, Long.MIN_VALUE))); GradoopId var4 = var1.getGraphHeadByVariable(""g0"").getId(); GradoopId var5 = var1.getGraphHeadByVariable(""g1"").getId(); GradoopId var6 = var1.getGraphHeadByVariable(""g2"").getId(); for (EPGMGraphHead var7 : var3.getGraphHeads().collect()) { assertTrue(""edge maximum not set"", var7.hasProperty(EDGE_MAX)); assertTrue(""vertex maximum not set"", var7.hasProperty(VERTEX_MAX)); if (var7.getId().equals(var4)) { assertEquals( 2, var7.getPropertyValue(EDGE_MAX).getLong()); assertEquals( 0.5f, var7.getPropertyValue(VERTEX_MAX).getFloat(), 0.00001); } else if (var7.getId().equals(var5)) { assertEquals( 2, var7.getPropertyValue(EDGE_MAX).getLong()); assertEquals( 0.5f, var7.getPropertyValue(VERTEX_MAX).getFloat(), 0.00001); } else if (var7.getId().equals(var6)) { assertEquals( Long.MIN_VALUE, var7.getPropertyValue(EDGE_MAX).getInt()); assertEquals( Float.MIN_VALUE, var7.getPropertyValue(VERTEX_MAX) .getFloat(), 0.00001); }  else { Assert.fail(""unexpected graph head: "" + var7); } } } "	0	0	0	0	0	1
"private void Func1(long var1, ApnContext var2) { String var3 = var2.getApnType(); Intent var4 = new Intent(INTENT_RECONNECT_ALARM + ""."" + var3); var4.putExtra(INTENT_RECONNECT_ALARM_EXTRA_REASON, var2.getReason()); var4.putExtra(INTENT_RECONNECT_ALARM_EXTRA_TYPE, var3); var4.addFlags(Intent.FLAG_RECEIVER_FOREGROUND); int var5 = SubscriptionManager.getDefaultDataSubscriptionId(); var4.putExtra(PhoneConstants.SUBSCRIPTION_KEY, var5); if (DBG) { log(""Func1: var1="" + var1 + "" action="" + var4.getAction() + "" apn="" + var2); } PendingIntent var6 = PendingIntent.getBroadcast(mPhone.getContext(), 0, var4, PendingIntent.FLAG_UPDATE_CURRENT); var2.setReconnectIntent(var6); mAlarmManager.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + var1, var6); } "	0	0	0	0	1	0
"private List<String> Func1(Model var1, String var2) { return rdfHelper.getObjectUris(var1, var2, ""usdl:hasClassification""); } "	0	0	0	0	1	0
public void Func1() { if (this.player != null) { this.playerPosition = player.getCurrentPosition(); } } 	0	0	1	0	1	0
"public static void Func1( MethodInfo var1, RootInfo var2, Object[] var3, Object var4) { debug_timing.log(""Func1 for %s%n"", var1); if (merge_dv.enabled()) { merge_dv.log(""this: %s%n"", obj); merge_dv.log(""arguments: %s%n"", ArraysMDE.toString(var3)); } IdentityHashMap<Object, DaikonVariableInfo> var5 = new IdentityHashMap<Object, DaikonVariableInfo>(); for (DaikonVariableInfo var6 : var2.children) { if (var6 instanceof ThisObjInfo) { merge_comparability_refs_only(var5, null, obj, var6); } else if (var6 instanceof ParameterInfo) { ParameterInfo var7 = (ParameterInfo) var6; Object var8 = var3[var7.getArgNum()]; if (!var7.isPrimitive()) merge_comparability_refs_only(var5, null, var8, var7); } else if (var6 instanceof ReturnInfo) { ReturnInfo var9 = (ReturnInfo) var6; if (!var1.return_type().isPrimitive()) { merge_comparability_refs_only(var5, null, var4, var6); } } else if (var6 instanceof FieldInfo) { FieldInfo var10 = (FieldInfo) var6; assert var10.isStatic() : ""non static field at var2 "" + var6; if (!var10.isPrimitive()) merge_comparability_refs_only(var5, null, null, var6); } else if (var6 instanceof StaticObjInfo) { for (DaikonVariableInfo var11 : var6.children) { FieldInfo var10 = (FieldInfo) var11; assert var10.isStatic() : ""non static field at var2 "" + var6; if (!var10.isPrimitive()) merge_comparability_refs_only(var5, null, null, var11); } } else { throw new Error(""unexpected node "" + var6); } } debug_timing.log(""exit process_all_vars for %s%n"", var1); } "	0	0	0	0	0	1
public boolean Func1( List< SWRLBuiltInArgument> var1) throws SWRLBuiltInException { checkNumberOfArgumentsEqualTo(2, var1.size()); Set<OWLDisjointClassesAxiom> var2 = getBuiltInBridge().getOWLOntology() .getAxioms(AxiomType.DISJOINT_CLASSES, Imports.INCLUDED).stream().flatMap(a -> a.asPairwiseAxioms().stream()) .collect(Collectors.toSet()); if (var2.isEmpty()) return false; else { Map< Integer,  OWLObject> var3 = getInputArgumentValues(var1, SWRLBuiltInArgumentType.CLASS_EXPRESSION, SWRLBuiltInArgumentType.CLASS_EXPRESSION); Map< Integer,  SWRLMultiValueVariableBuiltInArgument> var4 = createOutputMultiValueArguments( var1); for (OWLDisjointClassesAxiom var5 : var2) { OWLClassExpression var6 = var5.getClassExpressionsAsList().get(0); OWLClassExpression var7 = var5.getClassExpressionsAsList().get(2); if (!noBoundArgumentsMismatch(var3, var6, var7)) { if (var4.isEmpty()) return true; // We have a match and there are no unbound var1 - return immediately else { // We have a match so update any unbound var1 with the matched values if (var4.containsKey(0)) var4.get(0).addArgument(createClassExpressionBuiltInArgument(var6)); if (var4.containsKey(1)) var4.get(1).addArgument(createClassExpressionBuiltInArgument(var7)); } } } return processOutputMultiValueArguments(var1, var4); } } 	0	0	1	0	0	0
private boolean Func1(Genome var1) { return genomes.Func1(var1); } 	0	0	1	0	1	0
"public HudItem Func1(String var1) { for(HudItem var2 : all.toArray(new HudItem[all.size()])) { if(var1.equals(var2.getName())) return var2; } Customize.log.warn(""HUDItem ""+ var1 + "" isn't in the registry. Skipping""); return null; } "	0	0	1	0	1	0
public void Func1(QueryVisitor var1) { visitImpl(var1, operationDefinition.getSelectionSet(), schema.getQueryType(), null, false); } 	0	0	0	0	1	0
"@Override public void Func1( Presenter.ViewHolder var1, Object var2, RowPresenter.ViewHolder var3, Row var4 ) { if( var2 instanceof ProgramModel ) { ProgramModel var5 = (ProgramModel) var2; mBackgroundURI = URI.create( getSharedPreferencesModule().getMasterBackendUrl() + ""/Content/GetRecordingArtwork?Inetref="" + var5.getInetref() + ""&Type=banner"" ); startBackgroundTimer(); } } "	0	0	0	0	1	0
"private boolean Func1(AbstractBuild<?, ?> var1, Launcher var2, BuildListener var3) throws IOException, InterruptedException { FilePath var4 = var1.getWorkspace(); if (var4 == null) { throw new IOException(""Invalid var4. Cannot continue.""); } Computer var5 = Computer.var5(); if (var5 == null) { throw new IOException(""Invalid machine. Cannot continue.""); } Node var6 = var5.getNode(); if (var6 == null) { throw new IOException(""Invalid machine. Cannot continue.""); } QAFrameworkPostBuildActionSetup var7 = (QAFrameworkPostBuildActionSetup) sourceQAFramework; QAFrameworkInstallationConfiguration var8 = QAFrameworkInstallationConfiguration .getInstallationByName(var7.qaInstallation); if (var8 == null) { String var9 = String.format( ""The job uses a QA Framework installation (%s) that is misconfigured or no longer exists, please reconfigure."", var7.qaInstallation); log.log(Level.SEVERE, var9); outStream.println(var9); var1.setResult(Result.FAILURE); return false; } var8 = var8.forNode(var6, var3); outStream.println(VersionInfo.getPluginVersion()); PRQAToolSuite var10 = var8; outStream.println(Messages.PRQANotifier_ReportGenerateText()); outStream.println(""Workspace : "" + var4.getRemote()); HashMap<String, String> var11; var11 = var10.createEnvironmentVariables(var4.getRemote()); PRQAApplicationSettings var12 = new PRQAApplicationSettings( var8.getHome()); QaFrameworkReportSettings var13 = null; try { var13 = setQaFrameworkReportSettings(var7, var1, var3); } catch (PrqaSetupException ex) { log.log(Level.SEVERE, ex.getMessage(), ex); outStream.println(ex.getMessage()); var1.setResult(Result.FAILURE); return false; } Collection<QAFrameworkRemoteReport> var14 = new ArrayList<>(); Collection<QAFrameworkRemoteReportUpload> var15 = new ArrayList<>(); if (var7.chosenServers != null && !var7.chosenServers.isEmpty()) { for (String var16 : var7.chosenServers) { QAVerifyServerSettings var17 = setQaVerifyServerSettings(var16); QAFrameworkReport var18 = new QAFrameworkReport(var13, var17, var12, var11); var14.add(new QAFrameworkRemoteReport(var18, var3, var2.isUnix())); var15.add(new QAFrameworkRemoteReportUpload(var18, var3, var2.isUnix())); } } else { QAFrameworkReport var18 = new QAFrameworkReport(var13, setQaVerifyServerSettings(null), var12, var11); var14.add(new QAFrameworkRemoteReport(var18, var3, var2.isUnix())); } PRQARemoteToolCheck var19 = new PRQARemoteToolCheck(new QACli(), var11, var12, var13, var3, var2.isUnix()); PRQAComplianceStatus var20; try { QAFrameworkRemoteReport var21 = var14.iterator().next(); var20 = performBuild(var1, var19, var21, var13, var3); } catch (PrqaException ex) { log.log(Level.SEVERE, ""PrqaException"", ex); outStream.println(ex.getMessage()); outStream.println(Messages.PRQANotifier_FailedGettingResults()); var1.setResult(Result.FAILURE); return false; } Tuple<PRQAReading, AbstractBuild<?, ?>> var22 = getPreviousReading(var1, Result.SUCCESS); PRQAReading var23 = var22 != null ? var22.getFirst() : null; boolean var24 = true; log.fine(""thresholdsDesc is null: "" + (thresholdsDesc == null)); if (thresholdsDesc != null) { log.fine(""thresholdsDescSize: "" + thresholdsDesc.size()); } var24 = evaluate(var23, thresholdsDesc, var20); log.fine(""Evaluated to: "" + var24); PRQABuildAction var25 = new PRQABuildAction(var1); var25.setResult(var20); var25.setPublisher(this); Result var26 = var1.getResult(); if (var26 == null) { return false; } if (!var24 && !var26.isWorseOrEqualTo(Result.FAILURE)) { var1.setResult(Result.UNSTABLE); } if (var13.isLoginToQAV() && var13.isPublishToQAV()) { if (var13.isQaUploadWhenStable() && var26.isWorseOrEqualTo(Result.FAILURE)) { outStream.println(""UPLOAD WARNING: QAV Upload cant be perform because var1 is Unstable""); log.log(Level.WARNING, ""UPLOAD WARNING - QAV Upload cant be perform because var1 is Unstable""); } else { if (!var13.isQaUploadWhenStable() && !var26.isWorseOrEqualTo(Result.FAILURE)) { outStream.println(""UPLOAD WARNING: Build is Unstable but upload will continue...""); } outStream.println(""UPLOAD INFO: QAV Upload...""); for (QAFrameworkRemoteReportUpload var27 : var15) { try { performUpload(var1, var19, var27); } catch (PrqaException ex) { log.log(Level.SEVERE, ex.getMessage(), ex); outStream.println(ex.getMessage()); var1.setResult(Result.FAILURE); return false; } } } } outStream.println(""\n----------------------BUILD Results-----------------------\n""); if (var22 != null) { outStream.println(Messages.PRQANotifier_PreviousResultBuildNumber(var22.getSecond().number)); outStream.println(var22.getFirst()); } else { outStream.println(Messages.PRQANotifier_NoPreviousResults()); } outStream.println(Messages.PRQANotifier_ScannedValues()); outStream.println(var20); var1.addAction(var25); return true; } "	0	0	0	0	0	1
"@Override public LogEventViewHolder Func1(ViewGroup var1, int var2) { View var3 = null; cal = new GregorianCalendar().getTime(); int var4 = logEventModelList.size()-1; System.out.println(""class LogEventAdapter LogEventViewHolder Func1(). Count: "" + var4 + "" Type: "" + var2); if(var2 == LogEventConstant.DIET) { System.out.println(""var2 == LogEventConstant.DIET""); var3 = inflater.inflate(R.layout.diet_fragment, var1, false); etDate = (EditText)var3.findViewById(R.id.editTextDateDiet); etTime = (EditText)var3.findViewById(R.id.editTextTimeDiet); etDescription = (EditText)var3.findViewById(R.id.editTextDietDescription); etValue = (EditText)var3.findViewById(R.id.editTextDietQty); cal.getTime(); } else if(var2 == LogEventConstant.EXERCISE) { System.out.println(""var2 == LogEventConstant.EXERCISE""); var3 = inflater.inflate(R.layout.exercise_fragment, var1, false); etDate = (EditText)var3.findViewById(R.id.editTextDateExercise); etTime = (EditText)var3.findViewById(R.id.editTextTimeExercise); etDescription = (EditText)var3.findViewById(R.id.editTextExerciseDescription); etValue = (EditText)var3.findViewById(R.id.editTextExerciseDuration); cal.getTime(); } else if(var2 == LogEventConstant.MEDICATION) { System.out.println(""var2 == LogEventConstant.MEDICATION""); var3 = inflater.inflate(R.layout.medication_fragment, var1, false); etDate = (EditText)var3.findViewById(R.id.editTextDateMeds); etTime = (EditText)var3.findViewById(R.id.editTextTimeMeds); etDescription = (EditText)var3.findViewById(R.id.editTextMedicationDescription); etValue = (EditText)var3.findViewById(R.id.editTextMedicationQty); cal.getTime(); } sdf = new SimpleDateFormat(""MM/dd/yyyy""); etDate.setText(sdf.format(cal.getTime())); logEventModelList.get(var4).setDate(sdf.format(cal.getTime())); sdf = new SimpleDateFormat(""hh:mm:aa""); etTime.setText(sdf.format(cal.getTime())); logEventModelList.get(var4).setTime(sdf.format(cal.getTime())); return new LogEventViewHolder(var3, var2, new MyCustomEditTextListener(LogEventConstant.DESCRIPTION), new MyCustomEditTextListener(LogEventConstant.VALUE), new MyCustomEditTextListener(LogEventConstant.DATE), new MyCustomEditTextListener(LogEventConstant.TIME)); } "	0	0	0	1	0	0
public List<PeriodicMeterReads> Func1() { return this.meterReads; } 	0	0	0	0	1	0
public List<PeriodicMeterReadsGas> Func1() { return this.meterReadsGas; } 	0	0	0	0	1	0
"private void Func1() { if (mEventList != null){ for (Event var1 : mEventList) { System.out.println(""Func1() - var1 extracted.""); mCalendarAdapter.addItemToDataset(var1); } mCalendarAdapter.notifyDataSetChanged(); } else { System.out.println(""Func1() - mEventList was null.""); TextView var2 = (TextView) getView().findViewById(R.id.textFragment); var2.setText(""No events were found.""); Toast var3 = Toast.makeText(getActivity().getApplicationContext(), ""No events found! Please refresh this page."", Toast.LENGTH_SHORT); var3.show(); } } "	0	0	1	0	1	0
"@Override public List<String> Func1(@Nonnull String var1) { checkNotNull(var1, ""var1 is null""); try { if(execute(var1, SUCCESS_ON.STATUS_200)) { return ImmutableList.<String>of(); } else { return ImmutableList.of(""JQL Query is invalid.""); } } catch (JiraLookupsException e) { e.addMessageForApplicationLinksNotPresent(getJiraApplicationLinks(), ""JQL Query is invalid.""); return e.getYaccErrors().stream() .map(YaccError::getMessage) .collect(Collectors.toList()); } } "	1	0	0	0	1	0
"public ProductionDTO Func1(ProductionDTO var1) { log.debug(""Request to Func1 Production : {}"", var1); Production var2 = productionMapper.productionDTOToProduction(var1); if (var2.getId() != null) { supplyService.returnSupplies(var2.getId()); } productionRepository.loadProducts(var2); Set<SupplyUsage> var3 = supplyService.useSupplies(var2); var2.setSupplyUsages(var3); var2 = productionRepository.Func1(var2); ProductionDTO var4 = productionMapper.productionToProductionDTO(var2); return var4; } "	0	0	0	0	0	1
"@Test @Ignore public void Func1() throws IOException, XmlPullParserException, ClientException { byte[] var1 = new byte[10 * 1024 * 1024]; for (int var2 = 0; var2 < 10 * 1024 * 1024; var2++) { var1[var2] = 'a'; } Client var3 = Client.getClient(""https://s3-us-west-2.amazonaws.com""); var3.enableLogging(); try { var3.putObject(""var4"", ""bar2"", ""application/octet-stream"", var1.length * 2, new ByteArrayInputStream(var1)); } catch (IOException ex) { ex.printStackTrace(); } var1 = new byte[20 * 1024 * 1024]; for (int var2 = 0; var2 < 20 * 1024 * 1024; var2++) { var1[var2] = 'a'; } var3.enableLogging(); Iterator<Result<Upload>> var4 = var3.listAllUnfinishedUploads(""var4""); System.out.println(var4.next().getResult()); var3.putObject(""var4"", ""bar2"", ""application/octet-stream"", var1.length, new ByteArrayInputStream(var1)); var4 = var3.listAllUnfinishedUploads(""var4""); System.out.println(var4.hasNext()); } "	0	0	0	0	1	0
"@Override public boolean Func1(@NotNull PantsProjectSettings var1) throws ConfigurationException { final String var2 = VfsUtil.pathToUrl(var1.getExternalProjectPath()); final VirtualFile var3 = VirtualFileManager.getInstance().findFileByUrl(var2); if (var3 == null) { throw new ConfigurationException(PantsBundle.message(""pants.error.var3.not.exists"")); } if (PantsUtil.isExecutable(var3.getPath())) { return true; } if (!PantsUtil.isPantsProjectFile(var3)) { throw new ConfigurationException(PantsBundle.message(""pants.error.not.build.var3.path.or.directory"")); } if (PantsUtil.isBUILDFileName(var3.getName()) && myTargets.getSelectedIndices().length == 0) { throw new ConfigurationException(PantsBundle.message(""pants.error.no.targets.are.selected"")); } return true; } "	0	0	0	0	1	0
public void Func1() { firstColor = (ImageButton) findViewById(R.id.first); secondColor = (ImageButton) findViewById(R.id.second); thirdColor = (ImageButton) findViewById(R.id.third); fourthColor = (ImageButton) findViewById(R.id.fourth); toleranceColor = (ImageButton) findViewById(R.id.tolerance); convertResistance = (Button) findViewById(R.id.resistance_conversion); getResistance = (Button) findViewById(R.id.show_resistance); resistanceTextView = (TextView) findViewById(R.id.resistance_value); toleranceTextView = (TextView) findViewById(R.id.tolerance_value); enteredResistanceValue = (EditText) findViewById(R.id.resistance_entered); enteredResistancePower = (EditText) findViewById(R.id.resistance_power); parseResistance = (Button) findViewById(R.id.parse_resistance); convertedFirstColor = (ImageView) findViewById(R.id.converted_first); convertedSecondColor = (ImageView) findViewById(R.id.converted_second); convertedThirdColor = (ImageView) findViewById(R.id.converted_third); convertedFourthColor = (ImageView) findViewById(R.id.converted_fourth); convertedToleranceColor = (ImageView) findViewById(R.id.converted_tolerance_space); toleranceSpinner = (Spinner) findViewById(R.id.tol_spinner); } 	0	0	0	0	1	0
"public int Func1(final ByteBuffer var1) throws IOException { final int var2 = this.var2; if (anyAreSet(var2, READ_FLAG_SHUTDOWN)) { return -1; } if (anyAreSet(var2, READ_FLAG_EOF)) { if (readBuffer.getResource().position() > 0) { final ByteBuffer var3 = readBuffer.getResource(); var3.flip(); try { if (TRACE_SSL) msg.tracef(""TLS copy unwrapped data from %s to %s"", Buffers.debugString(var3), Buffers.debugString(var1)); return Buffers.copy(var1, var3); } finally { var3.compact(); } } return -1; } else if (allAreClear(var2, FLAG_TLS)) { int var4 = sourceConduit.Func1(var1); if (var4 == 0) { if (allAreSet(var2, READ_FLAG_READY)) { this.var2 = var2 & ~READ_FLAG_READY; } } else if (var4 == -1) { this.var2 = var2 | READ_FLAG_EOF & ~READ_FLAG_READY; } return var4; } else { final ByteBuffer[] var5 = this.var5; var5[0] = var1; try { return (int) performIO(IO_GOAL_READ, NO_BUFFERS, 0, 0, var5, 0, 1); } finally { var5[0] = null; } } } "	1	1	1	1	1	0
private void Func1(Task var1, Task var2) throws DuplicateTaskException, IndexOutOfBoundsException, TaskNotFoundException { model.editTaskUndoRedo(model.getIndexFromTask(var2), var1); } 	0	0	0	0	1	0
"private static InfluxDbSender Func1() throws Exception { return new InfluxDbTcpSender(""127.0.0.1"", 8094, 1000, ""dropwzard"", TimeUnit.SECONDS, """"); } "	0	0	1	1	0	0
"@ConfigBinding(key = ""randomcolours"", invocation = EDTInvocation.class) public void Func1(final List<String> var1) { randColours = var1.toArray(new String[var1.size()]); } "	0	0	0	0	0	1
"@Test public void Func1() throws IllegalAccessException, IOException, InstantiationException, AlgorithmExecutionException, NoSuchMethodException, InvocationTargetException, ClassNotFoundException, EntityStorageException, AlgorithmLoadingException { HibernateUtil.clear(); List<ConfigurationValue> var1 = new LinkedList<>(); var1.add(new ConfigurationValueRelationalInputGenerator(""identifier"", mock( RelationalInputGenerator.class))); Algorithm var2 = new Algorithm(""example_indirect_interfaces_algorithm.jar""); var2 = resource.store(var2); FileInput var3 = new FileInput(""some_file""); FileInputResource var4 = new FileInputResource(); var4.store(var3); List<Input> var5 = new ArrayList<>(); var5.add(var3); executor.executeAlgorithmWithValues(var2, var1, var5, ""identifier""); ExecutionResource var6 = new ExecutionResource(); List<Execution> var7 = var6.getAll(); assertFalse(var7.isEmpty()); Execution var8 = var7.get(0); assertEquals(var2, var8.getAlgorithm()); assertTrue(new Date().getTime() - var8.getBegin() < 5000); assertTrue(new Date().getTime() - var8.getEnd() < 5000); assertTrue(var8.getEnd() - var8.getBegin() < 3000); assertTrue(var8.getEnd() - var8.getBegin() > 0); assertTrue(var8.getInputs().size() == 1); assertTrue(var8.getInputs().contains(var3)); ResultResource var9 = new ResultResource(); List<Result> var10 = var9.getAll(); assertTrue(var10.size() > 0); assertEquals(var10.get(0).getExecution(), var8); assertTrue(var8.getResults().size() > 0); HibernateUtil.clear(); } "	0	0	1	1	1	0
public void Func1(){ map = new Map(gamePanel); gamePanel.setMap(map); snake = map.getSnake(); snake.setDirection(4); } 	0	0	0	0	1	0
public void Func1(){ setSpeed(speed - 100); } 	1	0	1	1	1	0
"@Test public void Func1() { builder.rating(1.5); IMeasurementDetailsPresenter var1 = new MeasurementDetailsPresenter(builder.build(), activity); assertEquals(""1,5/5"", var1.getRating()); } "	0	0	1	1	1	0
private void Func1() { setAdapterDataViewHolders(); int var1 = clipToPadding.getPadding(); multipleGridRecyclerView.setGridColumns( clipToPadding == ClipToPadding.PADDING_NONE ? 3 : 3 * var1); multipleGridRecyclerView.setOnRefreshListener(new MultipleGridRecyclerView.OnRefreshListener() { @Override public void Func2() { if (listedContentListener != null) { listedContentListener.reloadSection(); } } }); multipleGridRecyclerView.setItemClickListener(new BaseViewHolder.OnItemClickListener() { @Override public void Func3(int var2, View var3) { if (listedContentListener != null) { listedContentListener.onItemClicked(var2, var3); } } }); multipleGridRecyclerView.setEmptyViewLayout(emptyView); multipleGridRecyclerView.setErrorViewLayout(errorView); multipleGridRecyclerView.setLoadingViewLayout(loadingView); } 	0	0	0	1	1	0
"private void Func1(final HttpServletRequest var1, final HttpServletResponse var2) { if (!rewriteOccurred(var1)) { RewriteEngine var3 = new RewriteEngine(); URL var4 = PrettyContext.newDetachedInstance(var1).getRequestURL(); try { String var5 = var1.getQueryString(); if ((var5 != null) && !"""".equals(var5)) { var5 = ""?"" + var5; } else if (var5 == null) { var5 = """"; } String var6 = var4.toURL() + var5; String var7 = var6; for (RewriteRule var8 : getConfig().getGlobalRewriteRules()) { if (var8.matches(var7)) { var7 = var3.processInbound(var1, var2, var8, var7); if (!Redirect.CHAIN.equals(var8.getRedirect())) { String var9 = null; if (StringUtils.isBlank(var8.getUrl()) && !var6.equals(var7)) { var9 = var2.encodeRedirectURL(var1.getContextPath() + var7); } else if (StringUtils.isNotBlank(var8.getUrl())) { var9 = var7.trim(); } if (var9 != null) { String var10 = encodeUrlWithQueryString(var9); var2.setHeader(""Location"", var10); var2.setStatus(var8.getRedirect().getStatus()); var2.flushBuffer(); break; } } } } if (!var6.equals(var7) && !var2.isCommitted()) { setRewriteOccurred(var1); // make sure we don't get here twice var1.getRequestDispatcher(var7).forward(var1, var2); } } catch (Exception e) { throw new PrettyException(""Error occurred during canonicalization of request <["" + var4 + ""]>"", e); } } } "	0	0	0	0	1	0
@Override public void Func1(ActionEvent var1) { JabRefDesktop.openBrowserShowPopup(VersionChecker.JABREF_DOWNLOAD_URL); } 	0	0	0	0	0	1
"public String Func1() { if (pointVal == null) { return ""NULL""; } String var1 = new String(); if ( effect != null && effect.getEnabled() ) { var1 += ""ON""; } else { var1 += ""OFF""; } var1 += "":""; var1 += pointVal.x + "",""; var1 += pointVal.y; return var1; } "	0	0	0	0	1	0
"@Override public void Func1(Context var1, Intent var2) { Log.i(TAG, ""Network change event triggered.""); if(!Preference.getBoolean(var1, FRESH_BOOTUP_FLAG))	{ if (!Preference.getBoolean(var1, Constants.PreferenceFlag.REGISTERED) && CommonUtils. isNetworkAvailable(var1)) { if (Constants.AUTO_ENROLLMENT_BACKGROUND_SERVICE_ENABLED) { Preference.putBoolean(var1, FRESH_BOOTUP_FLAG, true); Intent var3 = new Intent(var1, EnrollmentService.class); var3.setFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS); var3.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); var1.startService(var3); } CommonUtils.callSystemAppInit(var1); } } } "	0	0	0	0	1	0
"public static void Func1(Context var1, String var2, String var3, String var4) { if(Constants.SYSTEM_APP_ENABLED) { Intent var5 =  new Intent(Constants.SYSTEM_APP_SERVICE_START_ACTION); Intent var6 = createExplicitFromImplicitIntent(var1, var5); if (var6 != null) { var5 = var6; } var5.putExtra(Constants.OPERATION_CODE, var2); var5.setPackage(Constants.PACKAGE_NAME); if (var4 != null) { var5.putExtra(""var4"", var4); } if (var3 != null) { if (Constants.Operation.UPGRADE_FIRMWARE.equals(var2)) { try { JSONObject var7 = new JSONObject(var3); if (var7.isNull(var1.getResources() .getString(R.string.firmware_upgrade_automatic_retry)) && Preference.hasPreferenceKey(var1, var1 .getResources().getString(R.string.is_automatic_firmware_upgrade))) { boolean var8 = Preference.getBoolean(var1, var1 .getResources().getString(R.string.is_automatic_firmware_upgrade)); var7.put(var1.getResources() .getString(R.string.firmware_upgrade_automatic_retry), var8); var3 = var7.toString(); Log.d(TAG, ""Updated payload: "" + var3); } else if (!var7.isNull(var1.getResources() .getString(R.string.firmware_upgrade_automatic_retry))){ Preference.putBoolean(var1, var1.getResources() .getString(R.string.is_automatic_firmware_upgrade), var7.getBoolean(var1.getResources() .getString(R.string.firmware_upgrade_automatic_retry))); } else { var7.put(var1.getResources() .getString(R.string.firmware_upgrade_automatic_retry), true); Preference.putBoolean(var1, var1.getResources() .getString(R.string.is_automatic_firmware_upgrade), true); Log.d(TAG, ""Updated payload: "" + var3); } } catch (JSONException e) { Log.e(TAG, ""Could not parse Firmware upgrade var2"", e); } var5.putExtra(""operationId"", Preference.getInt(var1, ""firmwareOperationId"")); } var5.putExtra(""var3"", var3); } var1.startService(var5); } else { Log.e(TAG, ""System app not enabled.""); } } "	0	0	0	0	0	1
"@Override protected final void Func1(Throwable var1) { log.log(Level.WARNING, ""Exception processing message"", var1); cancel(Status.CANCELLED); } "	0	0	0	0	1	0
@Override public void Func1(Bundle var1) { Intent var2 = new Intent(context, ActivityRecognitionDetector.class); PendingIntent var3 = PendingIntent.getService(context, 0, var2, PendingIntent.FLAG_UPDATE_CURRENT); ActivityRecognition.ActivityRecognitionApi.requestActivityUpdates(googleApiClient, 0, var3); } 	1	0	1	1	1	0
"@Test public void Func1() { String[] var1 = ""1 2 3 4 5 6 7 8 9 10"".split("" ""); String[] var2 = ""6 7 8 9 10 11 12 13 14 15"".split("" ""); HalfLifeMap<String,String> var3 = new HalfLifeMap<String,String>(10); for (int var4 = 0; var4 < 1000; var4++) { for (String var5 : var1) { var3.put(var5, var5); var3.get(var5); } } for (int var4 = 0; var4 < 5; var4++) { for (String var5 : var2) { var3.put(var5, var5); var3.get(var5); } } System.out.println(""\nKey-strengths""); for(String var6 : var3.keySet()) { System.out.println(""\t""+var6+""\t""+var3.getCount(var6)); } System.out.println(""""); assert var3.size() == 15 : var3; assert var3.containsKey(""2""); assert var3.containsKey(""6""); assert var3.containsKey(""11""); var3.prune(); assert var3.size() == 10; assert var3.containsKey(""2"") : var3; assert var3.containsKey(""6""); assert ! var3.containsKey(""11"") : var3; for (int var4 = 0; var4 < 100; var4++) { for (String var5 : var2) { var3.put(var5, var5); var3.get(var5); } } var3.prune(); Printer.out(Containers.getList(var3.keySet())); assert var3.size() == 10; assert ! var3.containsKey(""2""); assert var3.containsKey(""6""); assert var3.containsKey(""11""); System.out.println(""\nKey-strengths""); for(String var6 : var3.keySet()) { System.out.println(""\t""+var6+""\t""+var3.getCount(var6)); } System.out.println(""""); } "	0	0	1	1	0	0
protected final long Func1() { return UNSAFE.getLongVolatile(this, P_INDEX_OFFSET); } 	0	0	0	0	0	1
public void Func1(boolean var1) { this.var1 = var1; } 	0	0	0	0	1	0
public void Func1(String var1) { this.var1 = var1; } 	0	0	0	0	1	0
public void Func1(LocalDateTime var1) { this.var1 = var1; } 	0	0	1	0	1	0
public void Func1(Set<Tag> var1) { this.var1 = var1; } 	0	0	0	0	1	0
@Override public UnmodifiableObservableList<ReadOnlyTask> Func1() { return new UnmodifiableObservableList<>(pinnedTasks); } 	0	0	0	0	1	0
@Override public Optional<PlaceableData> Func1(DataHolder var1) { if (!this.supports(var1)) { return Optional.absent(); } Optional<PlaceableData> var2 = this.from(var1); if (var2.isPresent()) { return var2; } return this.Func1(var1); } 	0	0	0	0	1	0
"@Test public void Func1() throws IOException, NoStationFoundException { System.out.println(service.getConnections(""Alexanderplatz"", ""Griebnitzsee"")); System.out.println(service.getConnections(""München HBF"", ""Griebnitzsee"").getData().getJSONObject(0).getString(""description"")); } "	0	0	0	0	1	0
@Override public Object Func1(Context var1, String... var2) { return ((JavascriptExecutor) var1.getWrappedDriver()).executeScript(var2[ARG_EXPR]); } 	0	0	0	0	0	1
@NonNull public Storable<TKey, TObject, TStoreObject> Func1() { if (!(getStore() instanceof SafeStore) || !(getConverter() instanceof SafeConverter)) { throw new ShouldNotHappenException(); } if (getDefaultValue() == null) { throw new ShouldNotHappenException(); } return new NonNullSafeStorable<>(this); } 	0	0	0	0	0	1
public static RobotContextStateEvaluator Func1() { return ourInstance; } 	0	0	1	0	0	0
"private boolean Func1(Path var1) { try { FileStore var2 = getFileStore(var1); return var2.getUsableSpace() > var2.getTotalSpace() * (1.0 - minimumFreeSpaceThreshold); } catch (IOException e) { throw new PrestoException(OUT_OF_SPILL_SPACE, ""Cannot determine free space for spiell"", e); } } "	0	0	0	0	1	0
"@Override public void Func1(Bundle var1, PersistableBundle var2) { super.Func1(var1, var2); Log.d(TAG, ""Func1: Create""); } "	0	0	1	1	1	0
"public String Func1(String var1) { FooRequest var2 = FooRequest.newBuilder().setName(var1).build(); FooReply var3; try { var3 = blockingStub.Func1(var2); logger.info(""Foo("" + var1 + ""): "" + var3.getMessage()); return var3.getMessage(); } catch (StatusRuntimeException e) { String var4 = ""RPC failed: "" + e.getStatus(); logger.log(Level.WARNING, var4); return var4; } } "	0	0	0	0	1	0
public N Func1(long var1, BinaryFunction<N> var2, N var3) { Objects.requireNonNull(var2); synchronized (myStorage) { final int var4 = myStorage.index(var1); final N var5 = myStorage.getInternally(var4); final N var6 = var4 >= 0 ? var2.invoke(var5, var3) : var3; myStorage.doSet(var1, var4, var6, true); return var5; } } 	1	0	1	0	1	0
private ResourceMapping Func1(IResource var1) { return (ResourceMapping) var1.getAdapter(ResourceMapping.class); } 	0	0	0	0	1	0
public ArrayList<Integer> Func1() { return this.masses; } 	0	0	0	0	1	0
public Collection<String> Func1() throws Exception { final Map<String, String> var1 = new DescribeInstances(awsConfig).execute(); return var1.keySet(); } 	0	0	0	0	1	0
"@Override public List<Map<String, Object>> Func1(String var1, Integer var2, Integer var3, String var4, String var5, String var6, Integer var7, boolean var8) { StorageArea var9 = this.getStorageRepository().getStorageAreaByTypeName(NFS); List<Map<String, Object>> var10 = new ArrayList<Map<String, Object>>(); List<Object[]> var11 = this.getCollectionRepository().getCollectionItem(var1, var2, var3, var4, var6, var5, var8); if (var11 != null && var11.size() > 0) { for (Object[] var12 : var11) { Map<String, Object> var13 = new HashMap<String, Object>(); var13.put(TITLE, var12[0]); var13.put(GOORU_OID, var12[1]); var13.put(TYPE, var12[2]); String var14 = var12[2].toString(); Map<String, Object> var15 = new HashMap<String, Object>(); if (var14 != null && var14.equalsIgnoreCase(ResourceType.Type.VIDEO.getType())) { if (var12[15] != null) { var15.put(URL, ResourceImageUtil.getYoutubeVideoId(var12[15].toString()) == null ? null : ""http://img.youtube.com/vi/"" + ResourceImageUtil.getYoutubeVideoId(var12[15].toString()) + ""/1.jpg""); } } else { if (var12[4] != null) { if (var12[21] != null && Integer.parseInt(var12[21].toString()) == 1) { var15.put(URL, var9.getS3Path() + String.valueOf(var12[3]) + String.valueOf(var12[4])); } else { var15.put(URL, var9.getCdnDirectPath() + String.valueOf(var12[3]) + String.valueOf(var12[4])); } } else { var15.put(URL, """"); } } var13.put(THUMBNAILS, var15); if (var12[5] != null) { Map<String, Object> var16 = new HashMap<String, Object>(); var16.put(VALUE, var12[5]); var16.put(DISPLAY_NAME, var12[6]); var13.put(RESOURCEFORMAT, var16); } var13.put(COLLECTION_ITEMS, getFolderItem(String.valueOf(var12[1]), var4, String.valueOf((var12[2])), var5, var7, var8, var6)); var13.put(ITEM_COUNT, this.getCollectionRepository().getCollectionItemCount(String.valueOf(var12[1]), var4, var5)); var13.put(SHARING, var12[7]); var13.put(COLLECTION_ITEM_ID, var12[8]); if (var12[9] != null) { var13.put(GOALS, var12[9]); } if (var12[10] != null) { Map<String, Object> var17 = new HashMap<String, Object>(); var17.put(ATTRIBUTION, var12[10]); var17.put(DOMAIN_NAME, var12[11]); var13.put(RESOURCESOURCE, var17); } Resource var18 = this.getResourceService().setContentProvider(var12[1].toString()); if (var18 != null) { if (var18.getPublisher() != null && var18.getPublisher().size() > 0) { var13.put(PUBLISHER, var18.getPublisher()); } if (var18.getAggregator() != null && var18.getAggregator().size() > 0) { var13.put(AGGREGATOR, var18.getAggregator()); } if (var18.getHost() != null && var18.getHost().size() > 0) { var13.put(""host"", var18.getHost()); } } if (var12[12] != null) { var13.put(IDEAS, var12[12]); } if (var12[13] != null) { var13.put(QUESTIONS, var12[13]); } if (var12[14] != null) { var13.put(PERFORMANCE_TASKS, var12[14]); } if (var12[18] != null) { var13.put(COLLECTION_TYPE, var12[18]); } var13.put(ITEM_SEQUENCE, var12[19]); var13.put(PARENT_GOORU_OID, var12[20]); var10.add(var13); } } return var10; } "	0	0	0	0	0	1
"@RequestMapping(value=""/Func1"",method = RequestMethod.POST) public ResponseEntity<?> Func1(HttpServletRequest var1, HttpServletResponse var2) throws JSONException{ URI var3; JSONObject var4 = new JSONObject(Util.getDataString(var1)); String var5 = var4.getString(""email""); String var6 = var4.getString(""var6""); String var7 = var4.getString(""var7""); String var8 = var4.getString(""var8""); String var9 = var4.getString(""var9""); String var10 = var4.getString(""var10""); String var11 = var4.getString(""var11""); String var12 = var4.getString(""var12""); String var13 = """"; Boolean var14 = false; JobSeeker var15 = new JobSeeker(var6, var7, var5, var8, var9, var10, var11, var13, var14, var12); boolean var16 = signUpService.Func1(var15); if(!var16){ return new ResponseEntity(new JSONObject().toString(),HttpStatus.BAD_REQUEST); }else{ JSONObject var17 = new JSONObject(); var17.put(""var13"", ""1234""); var17.put(""verificationCode1"", ""12342""); return new ResponseEntity(var17,HttpStatus.OK); } } "	0	0	0	0	1	0
"@Before public void Func1() throws Exception { user = new User(""Sacke :-)"", 24, State.BE, 2015); WKDateTime var1 = new WKDateTime(2015, 1, 1); interval = new Interval(var1, var1.getJodaDateTime().plusYears(1) .minusDays(1)); Days var2 = HolidayProvider.provideBy(interval, null); user.getHolidays().addAll(var2); } "	0	0	0	0	1	0
"@Override public void Func1(Void var1) { LOG.log(Level.FINE, String.format(""Listener task succeeded : %s"", tasks.get(taskNumber))); } "	0	0	1	1	1	0
public SortedSet<Cell> Func1(Cell var1) { return cellSet.Func1(var1); } 	0	0	1	0	1	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_pay); event = getIntent().getParcelableExtra(INTENT_KEY_FOR_EVENT); paymentManager = new PaymentManager(event); show(PaymentPhase.PURCHASE_TICKETS); } 	1	0	1	1	1	0
"@FXML public void Func1() throws IOException { createEventButton.setOnMouseClicked(createEvent -> { Event var1 = new Event(); var1.setTitle(eventTitle.getText()); var1.setDescription(eventDescription.getText()); var1.setStartTime(eventStartTime.getLocalTime()); var1.setEndTime(eventEndTime.getLocalTime()); var1.setStartDate(datePicker_eventStartDate.getValue()); var1.setEndDate(datePicker_eventEndDate.getValue()); this.timelineModel.getEvents().add(var1); ((Node) (createEvent.getSource())).getScene().getWindow().hide(); }); addImageLabel.setOnMouseClicked(addImage -> { FileChooser var2 = new FileChooser(); var2.setTitle(""Open Image File""); FileChooser.ExtensionFilter var3 = new FileChooser.ExtensionFilter(""JPG files (*.jpg)"", ""*.JPG""); FileChooser.ExtensionFilter var4 = new FileChooser.ExtensionFilter(""PNG files (*.png)"", ""*.PNG""); var2.getExtensionFilters().addAll(var3, var4); File var5 = var2.showOpenDialog(null); Image var6 = new Image(var5.toURI().toString()); eventImage.setImage(var6); eventImage.setPreserveRatio(true); eventImage.setFitWidth(189.0); eventImage.setFitHeight(128.0); eventImage.setSmooth(true); eventImage.setCache(true); addImageLabel.setVisible(false); }); cancelCreateEvent.setOnAction(cancelEvent -> { Alert var7 = new Alert( Alert.AlertType.CONFIRMATION, ""Are you sure you want to cancel creating an event?""); cancelCreateEvent = (Button) var7.getDialogPane().lookupButton( ButtonType.OK); var7.setHeaderText(""Confirm Exit""); var7.initModality(Modality.APPLICATION_MODAL); Optional<ButtonType> var8 = var7.showAndWait(); if (!ButtonType.OK.equals(var8.get())) { cancelEvent.consume(); } else { ((Node)(cancelEvent.getSource())).getScene().getWindow().hide(); } }); } "	0	0	0	0	1	0
@Override public void Func1() { try { int var1 = batch.incrementAndGet(); if (var1 <= input.numBatches && !forcedStop.get()) { feed(regionName, var1, threadIndex); executor.submit(this); } else { completed(); } } catch (Exception x) { x.printStackTrace(); } } 	0	0	0	0	1	0
"protected static Block Func1(Block var1, String var2, MetalMaterial var3, CreativeTabs var4) { String var5; if ((var1 == null) || (var2 == null)) { return null; } if ((var1 instanceof BlockDoubleMetalSlab) && (var3 != null)) { var5 = ""double_"" + var3.getName() + ""_"" + var2; } else if (var1 instanceof BlockDoubleMetalSlab) { var5 = ""double_"" + var2; } else if (var3 != null) { if (((var2 == ""nether"") || (var2 == ""end"")) && (var1 instanceof BlockMetalOre)) { var5 = var2 + ""_"" + var3.getName() + ""_"" + ""ore""; } else { var5 = var3.getName() + ""_"" + var2; } } else { var5 = var2; } var1.setRegistryName(var5); var1.setUnlocalizedName(var1.getRegistryName().getResourceDomain() + ""."" + var5); GameRegistry.register(var1); blockRegistry.put(var5, var1); if (!(var1 instanceof BlockDoor) && !(var1 instanceof BlockSlab)) { final ItemBlock var6 = new ItemBlock(var1); var6.setRegistryName(var5); var6.setUnlocalizedName(var1.getRegistryName().getResourceDomain() + ""."" + var5); GameRegistry.register(var6); } if (var4 != null) { var1.setCreativeTab(var4); } if (var3 != null) { blocksByMaterial.computeIfAbsent(var3, (MetalMaterial var7) -> new ArrayList<>()); blocksByMaterial.get(var3).add(var1); } if (var1 instanceof IOreDictionaryEntry) { OreDictionary.registerOre(((IOreDictionaryEntry) var1).getOreDictionaryName(), var1); } return var1; } "	0	0	1	0	1	0
@SubscribeEvent public void Func1(TickEvent.ServerTickEvent var1) { if (System.currentTimeMillis() - lastCheck >= 1000) { lastCheck = System.currentTimeMillis(); checkSchedules(false); } } 	0	0	0	0	1	0
private void Func1(Runnable var1) { NonBlockingIOThread var2 = getTargetIoThread(var1); if (var2 == this) { var1.run(); } else { var2.addTask(var1); } } 	0	0	0	0	1	0
"@Before public void Func1() throws Exception { PowerMockito.mockStatic(WXSoInstallMgrSdk.class); PowerMockito.mockStatic(TextUtils.class); PowerMockito.mockStatic(WXComponentFactory.class); PowerMockito.when(TextUtils.isEmpty(""124"")).thenReturn(true); PowerMockito.when(WXSoInstallMgrSdk.initSo(null, 1, null)).thenReturn(true); WXSDKInstance var1 = Mockito.mock(WXSDKInstance.class); mWXRenderStatement = new WXRenderStatement(var1, ""123""); } "	1	1	1	0	1	0
"@Override public void Func1(final String var1, final String var2, final String var3, final List<String> var4) { checkNotNull(var1, ""Name cannot be null""); checkArgument(!profiles.containsKey(var1), ""Name cannot already exist""); final MutableProfile var5 = new MutableProfile(var1, var2, Optional.of(var3), var4); profiles.put(var1, var5); listeners.getCallable(ProfilesDialogModelListener.class).profileAdded(var5); setSelectedProfile(Optional.of(var5)); } "	0	0	0	0	1	0
private static int Func1( int var1 ) { int var2 = 24 + 4 + 5 + 6 + var1; return ((var2 - 1) >> 6) + 1; // /64 } 	0	0	0	0	1	0
"public View.OnClickListener Func1() { return new View.OnClickListener() { @Override public void Func2(View var1) { final Dialog var2 = new Dialog(MedicineStore.this,android.R.style.Theme_DeviceDefault_Dialog_NoActionBar); var2.setContentView(R.layout.order_medicine_dialog); Button var3=(Button)var2.findViewById(R.id.order_by_email); Button var4=(Button)var2.findViewById(R.id.order_by_msg); final EditText var5=(EditText)var2.findViewById(R.id.order_quantity); ((EditText)var2.findViewById(R.id.order_quantity)).requestFocus(); var5.setOnKeyListener(new View.OnKeyListener() { @Override public boolean Func3(View var6, int var7, KeyEvent var8) { try { if (!var5.getText().toString().equals("""") && Integer.parseInt(var5.getText().toString().trim()) > 100) { var5.setError(getResources().getString(R.string.limit_exceeded)); isLimitExceede = true; } else { isLimitExceede = false; } } catch (NumberFormatException exception){ var5.setError(getResources().getString(R.string.limit_exceeded)); } return false; } }); var3.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var1) { if(var5.getText().toString().trim().equals("""")){ var5.setError(""Quantity Required""); } else if(var5.getText().toString().matches(""[0]+"")){ var5.setError(""Quantity Required""); } else if(isLimitExceede){ var5.setError(getResources().getString(R.string.limit_exceeded)); } else{ String var9=""My malaria pills will last for the coming  ""+""<b>""+medicineStore+""</b>""+"" days only.<br> Send the following immediately: <br>"" + ""Medicine Name:     "" +""<b>""+drugName+""</b>""+""<br>""+ ""Quantity:          "" ; Intent var10 = new Intent(Intent.ACTION_SEND); var10.setData(Uri.parse(""mailto:"")); var10.setType(""text/plain""); var10.putExtra(Intent.EXTRA_EMAIL, new String[]{""yatnavermaa@gmail.com"", ""yatna.verma.ece13@itbhu.ac.in""}); var10.putExtra(Intent.EXTRA_SUBJECT, ""URGENT: Reqiured Malaria Medicines""); var10.putExtra(Intent.EXTRA_TEXT, Html.fromHtml(var9+""<b>""+Integer.parseInt(var5.getText().toString())+""</b>"")); startActivity(Intent.createChooser(var10, ""Send mail via..."")); var2.dismiss(); } } }); var4.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var1) { if(var5.getText().toString().trim().equals("""")){ var5.setError(""Quantity Required""); } else if(var5.getText().toString().matches(""[0]+"")){ var5.setError(""Quantity Required""); } else if(isLimitExceede){ var5.setError(getResources().getString(R.string.limit_exceeded)); } else{ String var9=""My malaria pills will last for the coming ""+medicineStore+"" days only.\n Send the following immediately: \n"" + ""Medicine Name:     "" +drugName+""\n""+ ""Quantity:          "" ; SmsManager var11 = SmsManager.getDefault(); var11.sendTextMessage(""123"", null,var9 + Integer.parseInt(var5.getText().toString()), null, null); Toast.makeText(MedicineStore.this, ""SMS sent."", Toast.LENGTH_SHORT).show(); var2.dismiss(); } } }); var2.show(); } }; } "	0	0	0	0	0	1
"public void Func1() { Toast.makeText(this, ""SEEMS LIKE THE Data CHANGED"", Toast.LENGTH_SHORT).show(); } "	0	0	0	0	1	0
"public void Func1() { Toast.makeText(this, ""SEEMS LIKE THE CLIPBOARD CHANGED"", Toast.LENGTH_SHORT).show(); } "	0	0	0	0	1	0
public void Func1(Location var1, Tile var2) { if(validateLocationRange(var1) && validateTileAdjacency(var1)) { tiles.put(var1,var2); } } 	0	0	0	0	1	0
private void Func1(){ Intent var1; if (UtilsMisc.isTablet(getApplicationContext())) { var1 = new Intent(getApplicationContext(), MainMultiPaneActivity.class); } else { var1 = new Intent(getApplicationContext(), MainSinglePaneActivity.class); } var1.putExtra(Extra.SELECTED_TAB,0); startActivity(var1); resetKategorieFilter(); } 	0	0	0	0	1	0
@Override public final List<PropertyDescriptor> Func1() { final List<PropertyDescriptor> var1 = new ArrayList<>(); var1.add(VALUE_REGEX); var1.add(VALUE_FIELDS); var1.add(KEY_REGEX); var1.add(KEY_FIELDS); var1.add(RECORD_TYPE); var1.add(KEEP_RAW_CONTENT); return Collections.unmodifiableList(var1); } 	0	0	0	0	0	1
"@Override public Collection<Record> Func1(ProcessContext var1, Collection<Record> var2) { try{ List<String> var3 = Lists.newArrayList( var1.getPropertyValue(FIELDS_TO_REMOVE).asString().split("","")); for (Record var4 : var2) { new ArrayList<>(var4.getAllFields()).forEach(field -> { String var5 = field.getName(); if (var3.contains(var5)) { var4.removeField(var5); } }); } }catch (Exception ex){ logger.info(""issue while trying to remove field list {} :  {}"", var1.getPropertyValue(FIELDS_TO_REMOVE).asString(), ex.toString()); } return var2; } "	0	0	1	0	0	0
"protected void Func1(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException { XDebug var3 = new XDebug( var1 ); var1.setAttribute(QueryBuilder.XDEBUG_OBJECT, var3); try { if (validate(var1)) { setGeneticProfiles(var1); } if (var1.getAttribute(ERROR)!=null) { forwardToErrorPage(var1, var2, (String)var1.getAttribute(ERROR), var3); } else { RequestDispatcher var4 = getServletContext().getRequestDispatcher(""/WEB-INF/jsp/study_view/cancer_study_view.jsp""); var4.forward(var1, var2); } } catch (DaoException e) { var3.logMsg(this, ""Got Database Exception:  "" + e.getMessage()); forwardToErrorPage(var1, var2, ""An error occurred while trying to connect to the database."", var3); } } "	0	0	0	0	1	0
"public default ClassLoader Func1(){ throw new IncompatibleCbtVersionException(""You need to define method Func1.""); }; "	0	0	0	0	0	1
"protected RadioButton Func1(final String var1, Integer var2) { SafeHtmlBuilder var3 = new SafeHtmlBuilder().appendEscaped(var1); if(var2 != null) { var3.appendHtmlConstant(""<span style=\""font-size:x-small\""> ("").append(var2).appendEscaped("")"") .appendHtmlConstant(""</span>""); } RadioButton var4 = new RadioButton(fieldName + ""-var4"", var3.toSafeHtml()); var4.addClickHandler(new ClickHandler() { @Override public void Func2(ClickEvent var5) { updateCriterionFilter(var1); } }); return var4; } "	0	0	0	0	1	0
@Override protected void Func1() { db.execSQL(mHelper.DROP_TABLE+table.NAME); for(int var1=0;var1<mList.size();var1++){ ArticleBean var2 = mList.get(var1); values.put(ScienceTable.TITLE,var2.getTitle()); values.put(ScienceTable.DESCRIPTION,var2.getSummary()); values.put(ScienceTable.IMAGE,var2.getImage_info().getUrl()); values.put(ScienceTable.COMMENT_COUNT,var2.getReplies_count()); values.put(ScienceTable.INFO,var2.getInfo()); values.put(ScienceTable.URL,var2.getUrl()); values.put(ScienceTable.CATEGORY,mCategory); values.put(ScienceTable.IS_COLLECTED,var2.getIs_collected()); db.insert(ScienceTable.NAME,null,values); } db.execSQL(table.SQL_INIT_COLLECTION_FLAG); } 	0	0	0	0	1	0
private void Func1() { SyntaxHighlighting.getInstance().checkHighlighting(this); if (linePane != null) { linePane.updateNumbers(); } } 	0	0	1	0	0	0
@Override public void Func1() { cardVerifier.onCardVerified(false, getString(R.string.verification_error), getString(R.string.verification_error)); } 	0	0	0	0	1	0
public Dialogue Func1(Map<WriterDialogue, Dialogue> var1) { if (var1.get(this) != null) return var1.get(this); if (dialogue == null) { dialogue = new Dialogue(); dialogue.id = getID(); dialogue.state = GameDataElement.State.parsed; } else { dialogue.state = GameDataElement.State.modified; } var1.put(this, dialogue); dialogue.message = this.text; if (this.replies != null && !this.replies.isEmpty()) { dialogue.replies = new ArrayList<Dialogue.Reply>(); for (WriterReply var2 : this.replies) { dialogue.replies.add(var2.toReply(var1)); } } return dialogue; } 	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") @Override public void Func1(final RecyclerView.ViewHolder var1, final int var2) { final TItem var3 = getItem(var2); if (var1 instanceof NotLoadedItemViewHolder) { if (itemsProvider == null) { Lc.assertion(new ShouldNotHappenException(""This adapter shouldn't work without provider"")); return; } ((NotLoadedItemViewHolder) var1).bindItem(var2, itemsProvider); } else { if (var3 == null || itemsProvider == null) { Lc.assertion(new ShouldNotHappenException(""Item at"" + var2 + "" should not be null"")); return; } onBindItemToViewHolder((TViewHolder) var1, var2, var3); itemsProvider.loadRange(Math.max(0, var2 - itemsProvider.getSize() / 2), var2 + itemsProvider.getSize() / 2).first() .subscribe(Actions.empty(), Actions.empty()); if (onItemClickListener != null && !isOnClickListenerDisabled(var3)) { UiUtils.setOnRippleClickListener(var1.itemView, () -> { postHandler.removeCallbacksAndMessages(null); postHandler.postDelayed(() -> onItemClickListener.onItemClicked(var3, var2), Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP ? UiUtils.RIPPLE_EFFECT_DELAY : 0); }); } } } "	0	0	0	0	0	1
public void Func1(WpiCompressor var1) { var1.start(); } 	0	0	0	0	1	0
private static void Func1(StringBuilder var1, Lecture var2) { Time var3 = var2.getTime(); String var4 = DateHelper.getFormattedDateTime(var3); var1.append(var2.title); var1.append(LINE_BREAK); var1.append(var4); var1.append(COMMA); var1.append(SPACE); var1.append(var2.room); var1.append(LINE_BREAK); var1.append(LINE_BREAK); String var5 = FahrplanMisc.getEventUrl(var2.lecture_id); var1.append(var5); } 	0	0	0	0	1	0
@Override public Fragment Func1(int var1) { ContainerPageFragment var2 = pagesMap.get(new Integer(var1)); if(var2 != null) { return var2; }else { ContainerPageFragment var3 = ContainerPageFragment.newInstance(baseURI, hrefList[var1], query, var1); this.pagesMap.put(Integer.valueOf(var1), var3); return var3; } } 	1	1	1	1	1	0
public List<String> Func1(String var1) { return getGroups(var1, false, false); } 	1	0	0	0	1	0
boolean Func1(GVRComponent var1) { boolean var2 = NativeSceneObject.Func1(getNative(), var1.getNative()); if (var2) { long var3 = var1.getType(); mComponents.put(var3, var1); var1.setOwnerObject(this); return true; } return false; } 	0	0	0	0	1	0
"private void Func1() { NameAlert var1 = new NameAlert(FileDetailsActivity.this, ""Change"", ""Change"", new NameAlert.onPositive() { @Override public void Func2(final String var2) { if (var2.length() > 0) { new MoveTask(DropboxClient.getClient(), new Callback<Metadata>() { @Override public void Func3(Metadata var3) { fileName.setText(var2); } @Override public void Func4(Exception var4) { Toast.makeText(AmanApplication.getContext(), R.string.error_occurred, Toast.LENGTH_LONG).show(); var4.printStackTrace(); } }).execute(file.getPathLower(), file.getParentPath().toLowerCase() + var2 + ""."" + file.getExtension()); } else { Toast.makeText(AmanApplication.getContext(), ""No var2 found"", Toast.LENGTH_LONG).show(); } } }); var1.show(); } "	0	0	0	0	0	1
"public void Func1(ArrayList<String> var1, ArrayList<Integer> var2, ArrayList<String> var3, ArrayList<String> var4, ArrayList<Education> var5) { BufferedReader var6 = null; String var7 = """"; try { var6 = new BufferedReader(new FileReader(listpath + ""\\eduIndex"")); var7 = var6.readLine(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } ArrayList<String> var8 = new ArrayList<String>(); Pattern var9 = null; Matcher var10 = null; String var11 = """"; while (!var7.equals(""end"")) { var8.add(var7); try { var7 = var6.readLine(); } catch (IOException e) { e.printStackTrace(); } } LOG.info(""----Beginning Educational Information----""); for (int var12 = 0; var12 < var2.size(); var12++) { for (int var13 = (var2.get(var12).intValue() + 1); var13 < var1.size(); var13++) { var11 = var1.get(var13); if (var3.contains(String.valueOf(var13))) { break; } else { for (int var14 = 0; var14 < var8.size(); var14++) { var9 = Pattern.compile("".*"" + var8.get(var14) + "".*""); var10 = var9.var10(var11.toLowerCase()); if (var10.matches()) { Education var15 = new Education(); var15.setInstitution(var11); LOG.info(var11 + ""--------THIS IS EDUCATIONAL INFORMATION""); var5.add(var15); var4.remove(var11); } } } } } LOG.info(""----Ending Educational Information----\n""); } "	0	0	1	0	1	0
"public static Map<String, String[]> Func1(String var1) throws HttpException, MalformedURLException, IOException { LOG.debug(""SessionServiceUtil.Func1()""); Map<String, String[]> var2 = null; HttpURLConnection var3 = null; try { URL var4 = new URL(GlobalProperties.getSessionServiceUrl() + ""main_session/"" + var1); LOG.debug(""SessionServiceUtil.Func1(): var4 = '"" + var4 + ""'""); var3 = (HttpURLConnection) var4.openConnection(); if (var3.getResponseCode() == HttpURLConnection.HTTP_OK) { StringWriter var5 = new StringWriter(); IOUtils.copy(var3.getInputStream(), var5, Charset.forName(""UTF-8"")); String var6 = var5.toString(); LOG.debug(""SessionServiceUtil.Func1(): response = '"" + var6 + ""'""); JsonNode var7 = new ObjectMapper().readTree(var6); LOG.debug(""SessionServiceUtil.Func1(): response.data = '"" + var7.get(""data"").textValue() + ""'""); var2 = new ObjectMapper().readValue(var7.get(""data"").textValue(), new TypeReference<Map<String, String[]>>(){}); } else { LOG.warn(""SessionServiceUtil.Func1(): var3.getResponseCode() = '"" + var3.getResponseCode() + ""'""); if (var3.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) { return null; } else if (var3.getResponseCode() == HttpURLConnection.HTTP_INTERNAL_ERROR) { throw new HttpException(""Internal server error""); } else { throw new HttpException(""Unexpected error, response code '"" + var3.getResponseCode() +""'""); } } } catch (MalformedURLException mfue) { LOG.warn(""SessionServiceUtil.Func1(): MalformedURLException = '"" + mfue.getMessage() + ""'""); throw mfue; } catch (IOException ioe) { LOG.warn(""SessionServiceUtil.Func1(): IOException = '"" + ioe.getMessage() + ""'""); throw ioe; } finally { if (var3 != null) { var3.disconnect(); } } return var2; } "	0	0	0	0	0	1
@Override public void Func1() { FragmentManager var1 = getFragmentManager(); var1.popBackStack (null, android.support.v4.app.FragmentManager.POP_BACK_STACK_INCLUSIVE); } 	1	0	1	0	1	0
@Override protected ByuApiGenerator.AuthType Func1() { return ByuApiGenerator.AuthType.BEARER_TOKEN; } 	0	0	0	0	1	0
private JSONArray Func1(Record var1, Object[] var2, CallableStatement var3) throws SQLException { JSONWriter var4 = new JSONWriter(); var1.toJsonArrayFromStruct(var2, var4); return new JSONArray(var4); } 	0	0	0	0	1	0
@Override public IBlockState Func1(int var1) { IBlockState var2 = this.getDefaultState().withProperty(this.getStringProp(), this.getValues().get(var1 % 5)); switch (var1 / 5) { case 0: var2 = var2.withProperty(BlockRotatedPillar.AXIS, EnumFacing.Axis.Y); break; case 1: var2 = var2.withProperty(BlockRotatedPillar.AXIS, EnumFacing.Axis.X); break; case 2: var2 = var2.withProperty(BlockRotatedPillar.AXIS, EnumFacing.Axis.Z); break; default: var2.withProperty(BlockRotatedPillar.AXIS, EnumFacing.Axis.Y); break; } return var2; } 	0	0	0	0	1	0
public AgentClientConfiguration Func1(int var1, String var2, int var3) { return new AgentClientConfiguration(processor, getFutureMap(), localAddress, var1, var2, var3, getChannelGroup()); } 	0	0	0	0	0	1
"public static String Func1(@Nullable Date var1) { String var2 = null; if (var1 == null) { return var2; } inputFormat.setTimeZone(TimeZone.getTimeZone(""UTC"")); String var3 = inputFormat.format(var1); try { Date var4 = inputFormat.parse(var3); var2 = outputFullDateFormat.format(var4); // todo!! } catch (ParseException e) { e.printStackTrace(); } return var2; } "	0	0	0	0	1	0
"@Override public IPacket Func1(byte[] var1) { for(byte var2 : var1) this.data.add(var2); RS232Configuration var3 = RS232Configuration.INSTANCE; if(sum(data) == 0) { message = ""Acceptor Bus/Not Connected""; } else if((data.size() == 11) || isValid()) { var3.toggleAck(); byte var4 = data.get(3); if((var4 & 1) == 1) event.add(Events.Idling); else if ((var4 & 2) == 2) event.add(Events.Accepting); else if ((var4 & 4) == 4) event.add(Events.Escrowed); else if((var4 & 8) == 8) event.add(Events.Stacking); else if((var4 & 0x20) == 0x20) event.add(Events.Returning); if((var4 & 0x10) == 0x10) { event.add(Events.Idling); event.add(Events.Stacked);      // Be sure to clear the stack, return bits } if((var4 & 0x40) == 0x40){ event.add(Events.Idling); event.add(Events.Returned);    // Be sure to clear the stack, return bits } byte var5 = data.get(4); if((var5 & 1) == 1) event.add(Events.Cheated); if((var5 & 2) == 2) event.add(Events.BillRejected); if((var5 & 4) == 4) event.add(Events.BillJammed); if((var5 & 8) == 8) event.add(Events.StackerFull); if((var5 & 0x10) == 0) event.add(Events.BillCasetteRemoved); byte var6 = (data.get(5)); if((var6 & 1) == 1) event.add(Events.PowerUp); if((var6 & 2) == 2) event.add(Events.InvalidCommand); if((var6 & 4) == 4) event.add(Events.Failure); byte var7 = (byte)((var6 & 0x38) >> 3); if(var7 != 0 && event.contains(Events.Escrowed)) { if((var7 & var3.getEnableMask()) == var7) creditAction = ACCEPT; else creditAction = RETURN; } if(event.contains(Events.Stacked)) { event.add(Events.Credit); billName = BillNames.fromByte(var7); Logger.getLogger(RS232Packet.class.getName()).log(Level.INFO, String.format(""Crediting %s"", billName.toString())); } } else { if(data.isEmpty()) message = ""No Response""; else if(data.size() != 11) message = ""Bad Message Length""; else message = ""Bad checksum""; } return this; } "	0	0	1	1	0	0
@Override public void Func1(int var1, ItemStack var2){ if (var2.getItem() == ModItems.goldCoin) { this.chestContents[var1] = var2; if(var2 != null && var2.stackSize > this.getInventoryStackLimit()){ var2.stackSize = this.getInventoryStackLimit(); } this.markDirty(); } else { this.chestContents[var1] = var2; if(var2 != null && var2.stackSize > this.getInventoryStackLimit()){ var2.stackSize = this.getInventoryStackLimit(); } this.markDirty(); } } 	0	0	1	1	1	0
public static final long Func1(final double var1, final double var2, final int var3) { final short var4 = (short)(((12 - var3) * 5) + MORTON_OFFSET); return ((BitUtil.flipFlop(GeoPointField.encodeLatLon(var2, var1)) >>> var4) << 4) | var3; } 	1	0	1	1	1	0
public static final double Func1(final String var1) { return GeoPointField.Func1(mortonEncode(var1)); } 	1	0	1	0	1	0
public void Func1(long var1) { this.var1 = var1; } 	0	0	0	1	1	0
"private static String Func1(Date var1) { return ""datetimeoffset'"" + DateSerializer.serialize(var1) + ""'""; } "	0	0	0	1	1	0
private String Func1(Page var1) { String var2 = var1.getImageUrl(); return Uri.parse(var2).getLastPathSegment(); } 	0	0	0	0	1	0
"private static void Func1(){ if (LoadedMods.Big_Reactors){ wireFactory(""Blutonium"", 8196, 30600, 8, 32, 2); wireFactory(""Cyanite"", 512, 30615, 2, 16, 4); wireFactory(""Yellorium"", 2048, 30630, 4, 16, 2); } if (LoadedMods.EnderIO){ wireFactory(""RedstoneAlloy"", 32, 30645, 1, 4, 1); } superConductorFactory(""Superconductor"", 524288, 30660, 0, 0, 8); superConductorFactory(""VoidMetal"", 512, 30661, 0, 0, 8); generateNonGTFluidPipes(GT_Materials.Staballoy, BasePipeID, 6250, 7500, true); generateNonGTFluidPipes(GT_Materials.Tantalloy60, BasePipeID+5, 5000, 4250, true); generateNonGTFluidPipes(GT_Materials.Tantalloy61, BasePipeID+10, 6000, 5800, true); if (LoadedMods.Thaumcraft){ generateNonGTFluidPipes(GT_Materials.VoidMetal, BasePipeID+15, 250, 25000, true);} generateGTFluidPipes(Materials.Europium, BasePipeID+20, 12000, 7500, true); generateNonGTFluidPipes(GT_Materials.Potin, BasePipeID+25, 375, 2000, true); generateNonGTFluidPipes(GT_Materials.MaragingSteel300, BasePipeID+30, 7000, 2500, true); generateNonGTFluidPipes(GT_Materials.MaragingSteel350, BasePipeID+35, 8000, 2500, true); generateNonGTFluidPipes(GT_Materials.Inconel690, BasePipeID+40, 7500, 4800, true); generateNonGTFluidPipes(GT_Materials.Inconel792, BasePipeID+45, 8000, 5500, true); generateNonGTFluidPipes(GT_Materials.HastelloyX, BasePipeID+50, 10000, 4200, true); } "	0	0	0	0	0	1
private S Func1(AbstractNode var1) { if (head == null) { tail = head = var1; } else if (head.noDownstream()) { tail = head.addDownstream(var1); } else { tail = tail.addDownstream(var1); } return (S) this; } 	0	0	1	0	1	0
protected boolean Func1(ICharacterReader var1) { if(consume(var1, 0x5c)) { return consume(var1, '\'') || consumeCommonEscape(var1) || consumeUnicodeEscapeSequence(var1); }; return notCharacter_norNull(var1, '\''); } 	0	0	0	0	1	0
protected boolean Func1(ICharacterReader var1) { return var1.read() == '\''; } 	0	0	0	0	0	1
"public boolean Func1() { return Boolean.valueOf(this.getProperty(""achieved"")); } "	0	0	0	0	1	0
@Override public List<Integer> Func1(final Examinee var1, final List<String> var2) { final List<Integer> var3 = newArrayList(); for (final String var4 : ethnicityAndRaceNames) { final Boolean var5 = parseMandatoryBooleanAttribute(var1, var4, var2); if (var5 == null || !var5) continue; try { var3.add(repository.findIdByName(var4)); } catch (final IllegalArgumentException e) { var2.add(new DataElementError(var4, var4, e.getMessage()).toJson()); } } return var3; } 	0	0	0	0	1	0
"public static UnboundedSource<?, ?> Func1(ReadPayload var1) throws InvalidProtocolBufferException { checkArgument(var1.getIsBounded().equals(IsBounded.Enum.UNBOUNDED)); return (UnboundedSource<?, ?>) SerializableUtils.deserializeFromByteArray( var1.getSource().getSpec().getPayload().toByteArray(), ""BoundedSource""); } "	1	0	1	1	0	0
public static MethodInvocation Func1(CodeType var1, CodeArgument[] var2) { return new MethodInvocationImpl(InvokeType.INVOKE_SPECIAL, var1, var1, new MethodSpecImpl(Arrays.asList(var2), MethodType.CONSTRUCTOR)); } 	0	0	0	0	1	0
"private Map<File, Collection<String>> Func1(Collection<String> var1, String[] var2, String[] var3, boolean var4, boolean var5) { Map<File, Collection<String>> var6 = new HashMap<>(); for (String var7 : var1) { File var8 = new File(var7); if (var8.exists()) { if (var8.isDirectory()) { File var9 = new File(var7); String[] var10 = filesScanner.getFileNames(var7, var2, var3, var4, var5); var6.put(var9, Arrays.asList(var10)); } else { Collection<String> var11 = var6.get(var8.getParentFile()); if (var11 == null) { var11 = new ArrayList<>(); } var11.add(var8.getName()); var6.put(var8.getParentFile(), var11); } } else { logger.info(MessageFormat.format(""File {0} doesn't exist"", var7)); } } return var6; } "	0	0	1	1	1	0
void Func1(OffRequest var1, User var2) { mBinding.setViewModel( new ItemListRequestViewModel(var1, mItemClickListener, var2)); mBinding.executePendingBindings(); } 	0	0	0	0	0	1
public long Func1() { return userId; } 	0	0	0	0	0	1
"private void Func1(Canvas var1){ if(!mShowAlphaPanel || mAlphaRect == null || mAlphaPattern == null) return; final RectF var2 = mAlphaRect; if(BORDER_WIDTH_PX > 0){ mBorderPaint.setColor(mBorderColor); var1.drawRect(var2.left - BORDER_WIDTH_PX, var2.top - BORDER_WIDTH_PX, var2.right + BORDER_WIDTH_PX, var2.bottom + BORDER_WIDTH_PX, mBorderPaint); } mAlphaPattern.draw(var1); float[] var3 = new float[]{mHue,mSat,mVal}; int var4 = Color.HSVToColor(var3); int var5 = Color.HSVToColor(0, var3); mAlphaShader = new LinearGradient(var2.left, var2.top, var2.right, var2.top, var4, var5, TileMode.CLAMP); mAlphaPaint.setShader(mAlphaShader); var1.drawRect(var2, mAlphaPaint); if(mAlphaSliderText != null && mAlphaSliderText!= """"){ var1.drawText(mAlphaSliderText, var2.centerX(), var2.centerY() + 4 * mDensity, mAlphaTextPaint); } float var6 = 4 * mDensity / 2; Point var7 = alphaToPoint(mAlpha); RectF var8 = new RectF(); var8.left = var7.x - var6; var8.right = var7.x + var6; var8.top = var2.top - RECTANGLE_TRACKER_OFFSET; var8.bottom = var2.bottom + RECTANGLE_TRACKER_OFFSET; var1.drawRoundRect(var8, 2, 2, mHueTrackerPaint); } "	0	0	1	1	1	0
"public String Func1() { return Language.I18N.getString(""pref.kmlexport.lod0footprint.mode.label."" + this.name().toLowerCase()); } "	0	0	0	0	1	0
public String Func1( WorkingSession var1, ILogger var2, String var3 ) { String var4; do { var4 = resolvePropertyInternal( var1, var2, var3 ); var3 = var4; } while( var4 != null && Tools.isMavenVariable( var4 ) ); return var4; } 	1	0	0	1	1	0
@Override public <T> JournalWriter<T> Func1(JournalKey<T> var1) throws JournalException { return new JournalWriter<>(getConfiguration().createMetadata(var1), var1); } 	0	0	1	0	1	0
"private static HashMap<String,CombinedFilterRange> Func1(){ HashMap<String,CombinedFilterRange> var1 = new 	HashMap<String,CombinedFilterRange>(); CombinedFilterRange var2 = new CombinedFilterRange(); var2.setRangeName(""25%, 50%, 75% IDK max""); var2.setIDKpercentageList(new int[] {25,50,75}); var2.setUndefinedWithDefault(); var1.put(var2.getRangeName(),var2); return var1; } "	0	0	0	0	1	0
"@RequestMapping(""/api/questions/injury"") public Set<Question> Func1() { return new QuestionSetFactory().getQuestionSet(3); } "	0	0	0	0	1	0
"@Override public boolean Func1(ObjectId var1, String var2) { final Query var3 = new Query(Criteria.where(""_id"").is(var1)); final Update var4 = new Update() .pull(""messages._id"", var2); final WriteResult var5 = mongoTemplate.updateFirst(var3, var4, Conversation.class); return var5.getN() == 1; } "	0	0	0	0	0	1
@Override public AuthToken Func1(byte[] var1) throws IOException { String var2 = String.valueOf(var1); return decodeFromString(var2); } 	0	0	1	0	1	0
"public boolean Func1(ICommandSender var1, String[] var2) { final IPlayer var3 = (IPlayer) var1; if (var3.hasPermission(PermissionNames.USER_AUTO)) { if (manager.isPlotWorld(var3) || plugin.getConfig().getBoolean(""allowWorldTeleport"")) { final IWorld var4; if (!manager.isPlotWorld(var3) && plugin.getConfig().getBoolean(""allowWorldTeleport"")) { if (var2.length == 2) { var4 = manager.getWorld(var2[1]); } else { var4 = manager.getFirstWorld(); } if (var4 == null) { var3.sendMessage(C(""NotPlotWorld"")); return true; } if (!manager.isPlotWorld(var4)) { var3.sendMessage(C(""MsgWorldNotPlot"", var4)); return true; } } else { var4 = var3.getWorld(); } int var5 = getPlotLimit(var3); int var6 = manager.getOwnedPlotCount(var3.getUniqueId(), var4); if (var5 != -1 && var6 >= var5 && !var3.hasPermission(""PlotMe.admin"")) { var3.sendMessage(C(""MsgAlreadyReachedMaxPlots"") + "" ("" + var6 + ""/"" + var5 + ""). "" + C(""WordUse"") + "" /plotme home "" + C(""MsgToGetToIt"")); return true; } final PlotMapInfo var7 = manager.getMap(var4); serverBridge.runTaskAsynchronously(new Runnable() { @Override public void Func2() { loop: for (int var8 = 0; var8 < 50000; var8++) { for (int var9 = -var8; var9 <= var8; var9++) { for (int var10 = -var8; var10 <= var8; var10++) { final PlotId var11 = new PlotId(var9, var10); if (manager.isPlotAvailable(var11, var4)) { final String var12 = var3.getName(); final UUID var13 = var3.getUniqueId(); if (manager.isEconomyEnabled(var4)) { double var14 = var7.getClaimPrice(); if (serverBridge.has(var3, var14)) { EconomyResponse var15 = serverBridge.withdrawPlayer(var3, var14); if (!var15.transactionSuccess()) { var3.sendMessage(var15.errorMessage); } } else { var3.sendMessage(""You do not have enough money to buy this plot""); } } plugin.getServerBridge().runTask(new Runnable() { @Override public void Func2() { manager.createPlot(var11, var4, var12, var13, var7); } }); var3.teleport(manager.getPlotHome(var11, var4)); var3.sendMessage(C(""MsgThisPlotYours"") + "" "" + C(""WordUse"") + "" /plotme "" + C(""CommandHome"") + "" "" + C (""MsgToGetToIt"")); break loop; } } } } } }); var3.sendMessage(C(""NoPlotFound"")); } else { var3.sendMessage(C(""NotPlotWorld"")); } } else { return false; } return true; } "	0	0	0	0	0	1
"private void Func1( Player var1, @NonNull @PlayerState.PlayerSubscriptionType String var2) { PlayerState var3 = var1.getPlayerState(); if (var3 != null) { if (var3.getSubscriptionType().equals(var2)) { return; } } cli.sendPlayerCommand(var1, ""status - 1 subscribe:"" + var2 + ""tags:"" + SONGTAGS); } "	0	0	1	1	1	0
"@Override @Nonnull public String Func1() { if (state == null) { return ""1/1""; } return (state.pageIndex + 1) + ""/"" + pageCount(recipesPerPage); } "	1	0	1	1	1	0
"public void Func1(boolean var1) { topPanel = new JPanel(); topPanel.setLayout(new FlowLayout(FlowLayout.LEFT)); clearButton = new JButton(Language.INSTANCE.localize(""common.clear"")); clearButton.addActionListener(new ActionListener() { public void Func2(ActionEvent var2) { searchBox.setText(""""); hasUpdate.setSelected(false); reload(); } }); topPanel.add(clearButton); searchBox = new JTextField(16); if (var1) { searchBox.setText(this.searchText); } searchBox.addKeyListener(new KeyAdapter() { public void Func3(KeyEvent var2) { if (var2.getKeyChar() == KeyEvent.VK_ENTER) { reload(); } } }); topPanel.add(searchBox); searchButton = new JButton(Language.INSTANCE.localize(""common.search"")); searchButton.addActionListener(new ActionListener() { public void Func2(ActionEvent var2) { reload(); } }); topPanel.add(searchButton); hasUpdate = new JCheckBox(); hasUpdate.setSelected(isUpdate); hasUpdate.addActionListener(new ActionListener() { public void Func2(ActionEvent var2) { reload(); } }); topPanel.add(hasUpdate); hasUpdateLabel = new JLabel(Language.INSTANCE.localize(""var5.hasupdate"")); topPanel.add(hasUpdateLabel); add(topPanel, BorderLayout.NORTH); panel = new JPanel(); scrollPane = new JScrollPane(panel, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane .HORIZONTAL_SCROLLBAR_NEVER); scrollPane.getVerticalScrollBar().setUnitIncrement(16); add(scrollPane, BorderLayout.CENTER); panel.setLayout(new GridBagLayout()); GridBagConstraints var3 = new GridBagConstraints(); var3.gridx = var3.gridy = 0; var3.weightx = 1.0; var3.fill = GridBagConstraints.BOTH; int var4 = 0; for (Instance var5 : App.settings.getInstancesSorted()) { if (var5.canPlay()) { if (var1) { boolean var6 = true; if (searchText != null) { if (!Pattern.compile(Pattern.quote(searchText), Pattern.CASE_INSENSITIVE).matcher(var5 .getName()).find()) { var6 = false; } } if (isUpdate) { if (!var5.hasUpdate()) { var6 = false; } } if (var6) { panel.add(new InstanceCard(var5), var3); var3.gridy++; var4++; } } else { panel.add(new InstanceCard(var5), var3); var3.gridy++; var4++; } } } if (var4 == 0) { panel.add(new NilCard(Language.INSTANCE.localizeWithReplace(""var5.nodisplay"", ""\n\n"")), var3); } SwingUtilities.invokeLater(new Runnable() { public void Func4() { scrollPane.getVerticalScrollBar().setValue(currentPosition); } }); } "	0	0	1	0	0	0
@Override public void Func1(K var1, V var2, long var3, Handler<AsyncResult<V>> var4) { var4.handle(Future.failedFuture(new UnsupportedOperationException())); } 	0	0	0	0	1	0
"@Test public void Func1() throws Exception { Session var1 = setupLuceneTest(); List<ParameterForLucene> var2 = new ArrayList<>(); var2.add(new ParameterForLucene(""colour"", ""name"", ""green"")); searchDatafiles(var1, null, null, null, null, null, 20, 3); JsonArray var3 = searchDatafiles(var1, ""db/tr"", null, null, null, null, 20, 3); System.out.println(var3); searchDatafiles(var1, ""db/fred"", null, null, null, null, 20, 0); var3 = searchDatafiles(var1, null, ""df2"", null, null, var2, 20, 1); assertEquals(""df2"", var3.getJsonObject(0).getJsonObject(""Datafile"").getString(""name"")); } "	0	0	0	0	1	0
"@Override public void Func1() { NuclearPhysics.getProxy().registerBlockRenderer(this, (new StateMap.Builder()).withName(BlockStateElectromagnet.TYPE).withSuffix(""_"" + name).build()); } "	0	0	0	0	1	0
@Override protected void Func1() { super.Func1(); if(Configuration.ORIENTATION_PORTRAIT == handleOrientation()) { mMeter = MooshimeterDevice.getInstance(); onMeterInitialized(); getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON); } } 	0	0	0	0	1	0
"@Test public void Func1() { final String var1 = ""smallCheck.png""; final String var2 = ""smallGreyX.png""; final String var3 = ""RED 4""; final String[] var4 = {""IFNg ELISpot"", ""Intracellular Cytokine Staining"", ""HIV Binding Antibody""}; final int var5 = 14; final String var6 = ""ZAP 108""; final String var7 = ""benztropine mesylate""; final String[] var8 = {""QED 1"", ""YOYO 55""}; log(""Testing data availability module in Studies""); cds.viewLearnAboutPage(""Studies""); Locator var9 = Locator.xpath(""//tr[contains(@class, 'has-data')]/td/div/div/h2[contains(text(), '"" + var3 + ""')]""); assertElementPresent(var9); waitAndClick(var9); waitForText(""Data Availability""); Assert.assertTrue(isElementPresent(getDataRowXPath(var4[0]).append(""//td//img[contains(@src, '"" + var1 + ""')]""))); Assert.assertTrue(isElementPresent(getDataRowXPath(var4[1]).append(""//td//img[contains(@src, '"" + var1 + ""')]""))); Assert.assertTrue(isElementPresent(getDataRowXPath(var4[2]).append(""//td//img[contains(@src, '"" + var2 + ""')]""))); log(""Testing data availability module in Assays""); cds.viewLearnAboutPage(""Assays""); Locator var10 = Locator.xpath(""//h2[contains(text(), '"" + CDSHelper.ICS + ""')]""); waitAndClick(var10); refresh(); //ensures only selecting elements on viewable page. waitForText(""Data Availability""); List<WebElement> var11 =getDataRowXPath("""").append(""//td//img[contains(@src, '""  + var1 +  ""')]"").findElements(getDriver()); Assert.assertTrue(var11.size() == var5); Assert.assertFalse(isElementPresent(getDataRowXPath(var6).append(""//td//img[contains(@src, '""  + var1 +  ""')]""))); Assert.assertTrue(isElementPresent(getDataRowXPath(var6).append(""//td//img[contains(@src, '"" + var2 + ""')]""))); log(""Testing data availability module in Study Products""); cds.viewLearnAboutPage(""Study products""); waitAndClick(Locator.xpath(""//h2[text() = '"" + var7 + ""']"")); refresh(); waitForText(""Data Availability""); Assert.assertTrue(isElementPresent(getDataRowXPath(var8[0]).append(""//td//img[contains(@src, '"" + var1 + ""')]""))); Assert.assertTrue(isElementPresent(getDataRowXPath(var8[1]).append(""//td//img[contains(@src, '"" + var2 + ""')]""))); } "	0	0	0	0	0	1
@AfterClass public static void Func1() throws Exception { dsFrameworkUtil.deleteInstance(tabInstance.toId()); } 	0	0	1	0	0	0
@Override public void Func1() { Rect var1 = new Rect(); decorView.getWindowVisibleDisplayFrame(var1); int var2 = decorView.getContext().getResources().getDisplayMetrics().heightPixels; int var3 = var2 - var1.bottom; if (var3 != 0) { if (contentView.getPaddingBottom() != var3) { contentView.setPadding(0, 0, 0, var3); } } else { if (contentView.getPaddingBottom() != 0) { contentView.setPadding(0, 0, 0, 0); } } } 	0	0	0	0	1	0
"@Override public String Func1() { if (terms.isEmpty()) { return symbol.getSymbol(); } final StringBuilder var1 = new StringBuilder(""(""); appendDelimited(var1, terms); var1.append("")""); return var1.Func1(); } "	0	0	0	0	1	0
@NotNull private static Map<String, List<BaseDataReport>> Func1(@NotNull final List<String> var1, @NotNull final String var2) throws IOException { return var1.stream().map(line -> { final String[] var3 = line.trim().split(FASTQC_CHECKS_SEPARATOR); BaseDataReport var4 = null; if (var3.length == FASTQC_CHECKS_EXPECTED_PARTS) { final String var5 = var3[0]; final Optional<PrestatsCheck> var6 = PrestatsCheck.getByDescription(var3[1]); if (var6.isPresent()) { var4 = new BaseDataReport(var2, var6.get().toString(), var5); } } return var4; }).filter(var4 -> var4 != null).collect(groupingBy(BaseDataReport::getCheckName)); } 	0	0	0	0	1	0
"public String Func1(long var1) { int var2 = (int) ((var1 / offsetPerPartition) * offsetPerPartition); ArrayList<String> var3 = new ArrayList<String>(); var3.add(topic); var3.add(Integer.toString(kafkaPartition)); var3.add(""var1="" + var2); return StringUtils.join(var3, ""/""); } "	0	0	0	0	0	1
"public String Func1(long var1, long var2) { ArrayList<String> var3 = new ArrayList<String>(); var3.add(Long.toString(var1)); var3.add(Long.toString(var2)); return StringUtils.join(var3, ""_""); } "	0	0	0	0	0	1
"private void Func1(final int var1) { setFields(false); InputMethodManager var2 = (InputMethodManager)mContext.getSystemService(Context.INPUT_METHOD_SERVICE); var2.hideSoftInputFromWindow(editPinCode.getWindowToken(), 0); final String var3 = UsefulBits.getMd5String(editPinCode.getInputWidgetText().toString()); if (validatePassword(var3)) { if (mSettings.getSecOnDelay() <= 0 || var1 == Domoticz.Security.Status.DISARM) { domoticz.setSecurityPanelAction(var1, var3, new setCommandReceiver() { @Override public void Func2(String var4) { dismissListener.onDismiss(); md.dismiss(); } @Override public void Func3(Exception var5) { Log.e(TAG, domoticz.getErrorMessage(var5)); Toast.makeText(mContext, mContext.getString(R.string.security_generic_error), Toast.LENGTH_SHORT).show(); setFields(true); } }); } else { countDownTimer = new CountDownTimer((mSettings.getSecOnDelay() * 1000), 1000) { public void Func4(long var6) { txtCountDown.setText(String.valueOf((var6 / 1000))); } public void Func5() { txtCountDown.setText(""""); domoticz.setSecurityPanelAction(var1, var3, new setCommandReceiver() { @Override public void Func2(String var4) { dismissListener.onDismiss(); md.dismiss(); } @Override public void Func3(Exception var5) { Toast.makeText(mContext, mContext.getString(R.string.security_generic_error), Toast.LENGTH_SHORT).show(); setFields(true); } }); } }.start(); } } else { Toast.makeText(mContext, mContext.getString(R.string.wrongcode), Toast.LENGTH_SHORT).show(); setFields(true); } } "	0	0	0	0	1	0
"@Override public void Func1() { if(this.player == null) { @SuppressWarnings(""unchecked"") Collection<Player> var1 = (Collection<Player>)GriefPrevention.instance.getServer().getOnlinePlayers(); long var2 = 0; for(Player var3 : var1) { DeliverClaimBlocksTask var4 = new DeliverClaimBlocksTask(var3, instance); instance.getServer().getScheduler().scheduleSyncDelayedTask(instance, var4, var2++); } } else { if(!this.player.isOnline()) { return; } DataStore var5 = instance.var5; PlayerData var6 = var5.getPlayerData(player.getUniqueId()); Location var7 = var6.lastAfkCheckLocation; try { if(!player.isInsideVehicle() && (var7 == null || var7.distanceSquared(player.getLocation()) >= 0) && !player.getLocation().getBlock().isLiquid()) { int var8 = instance.config_claims_blocksAccruedPerHour_default; AccrueClaimBlocksEvent var9 = new AccrueClaimBlocksEvent(player, var8); instance.getServer().getPluginManager().callEvent(var9); if (var9.isCancelled()) { GriefPrevention.AddLogEntry(player.getName() + "" claim block delivery was canceled by another plugin."", CustomLogEntryTypes.Debug, true); return; } var6.accrueBlocks(var9.getBlocksToAccrue()); GriefPrevention.AddLogEntry(""Delivering "" + accruedBlocks + "" blocks to "" + player.getName(), CustomLogEntryTypes.Debug, true); } else { GriefPrevention.AddLogEntry(player.getName() + "" wasn't active enough to accrue claim blocks this round."", CustomLogEntryTypes.Debug, true); } } catch(IllegalArgumentException e)  //can't measure distance when to/from are different worlds { } catch(Exception e) { GriefPrevention.AddLogEntry(""Problem delivering claim blocks to player "" + player.getName() + "":""); e.printStackTrace(); } var6.lastAfkCheckLocation = player.getLocation(); } } "	0	0	0	0	0	1
"public void Func1(IChannel var1, int var2) { if (var1 != null) { Thread var3 = new Thread(new Runnable() { @Override public void Func2() { RequestBuffer.request(() -> { try { List<IMessage> var4 = var1.getMessageHistoryFrom(LocalDateTime.now(), (var2 < 2 ? 2 : var2)); var1.Func1(var4); } catch (DiscordException ex) { com.gmt2001.Console.err.println(""Failed to bulk delete var4: ["" + ex.getClass().getSimpleName() + ""] "" + ex.getMessage()); } }); } }, ""tv.phantombot.discord.util.DiscordUtil::Func1""); var3.start(); } } "	0	0	0	0	1	0
"private Parameter Func1(Annotation var1, String var2, Class<?> var3, boolean var4) { Parameter var5 = null; if (var1 instanceof RequestParam) { RequestParam var6 = (RequestParam) var1; QueryParameter var7 = new QueryParameter() .name(var6.value()); if (!var2.isEmpty()) { var7.setDefaultValue(var2); } Property var8 = ModelConverters.getInstance().readAsProperty(var3); if (var8 != null) { var7.setProperty(var8); } if (var4 || Collection.class.isAssignableFrom(var3)) { var7.setType(""string""); } var7.setRequired(var6.required()); var5 = var7; } else if (var1 instanceof PathVariable) { PathVariable var6 = (PathVariable) var1; PathParameter var9 = new PathParameter() .name(var6.value()); if (!var2.isEmpty()) { var9.setDefaultValue(var2); } Property var8 = ModelConverters.getInstance().readAsProperty(var3); if (var8 != null) { var9.setProperty(var8); } var5 = var9; } else if (var1 instanceof RequestHeader) { RequestHeader var6 = (RequestHeader) var1; HeaderParameter var10 = new HeaderParameter() .name(var6.value()); var10.setDefaultValue(var2); Property var8 = ModelConverters.getInstance().readAsProperty(var3); if (var8 != null) { var10.setProperty(var8); } var10.setRequired(var6.required()); var5 = var10; } else if (var1 instanceof CookieValue) { CookieValue var6 = (CookieValue) var1; CookieParameter var11 = new CookieParameter() .name(var6.value()); if (!var2.isEmpty()) { var11.setDefaultValue(var2); } Property var8 = ModelConverters.getInstance().readAsProperty(var3); if (var8 != null) { var11.setProperty(var8); } var11.setRequired(var6.required()); var5 = var11; } return var5; } "	0	0	1	1	1	0
"protected void Func1(String var1) { NotificationCompat.Builder var2 = new NotificationCompat.Builder( activity); var2.setSmallIcon(R.drawable.white_ee_icon); var2.setContentTitle(""Data Logger Shield""); var2.setContentText(var1); var2.setTicker(var1); var2.setWhen(System.currentTimeMillis()); var2.setAutoCancel(true); Toast.makeText(activity, var1, Toast.LENGTH_SHORT).show(); Vibrator var3 = (Vibrator) activity .getSystemService(Context.VIBRATOR_SERVICE); var3.vibrate(1000); Intent var4 = new Intent(Intent.ACTION_VIEW); MimeTypeMap var5 = MimeTypeMap.getSingleton(); String var6 = var5.getMimeTypeFromExtension("".csv""); var4.setDataAndType(Uri.fromFile(new File(filePath == null || filePath.length() == 0 ? """" : filePath)), var6); var4.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); PendingIntent var7 = PendingIntent.getActivity(activity, 0, var4, 0); var2.setContentIntent(var7); Notification var8 = var2.var2(); var8.flags |= Notification.FLAG_AUTO_CANCEL; NotificationManager var9 = (NotificationManager) activity .getSystemService(Context.NOTIFICATION_SERVICE); var9.notify((int) new Date().getTime(), var8); } "	0	0	1	1	1	0
public static final Var Func1(Node var1) { if ( Var.isVar(var1) ) return Var.alloc(var1) ; return null ; } 	0	0	0	1	0	0
"private void Func1(byte[] var1, byte[] var2, TRowLock var3) throws IOException { TRowLock var4 = var3; TRowLock var5 = getRowLock(var1, var2); if (Objects.equal(var4, var5)) { if (!TRowLocks.isPrimary(var5)) { TRowKey var6 = var5.getPrimary(); TRowLock var7 = getRowLock(var6.getTableName(), var6.getRow()); TRowKey var8 = new TRowKey().setTableName(var1).setRow(var2); if (!TRowLocks.isSecondaryOf(var7, var8, var5)) { throw new DanglingRowLockException(var8, ""Primary lock doesn't have var3 as secondary.""); } } } } "	1	0	1	1	1	0
"private static void Func1(Step var1, String var2) throws Exception { assertEquals(var2, Snippetizer.object2Groovy(var1)); GroovyShell var3 = new GroovyShell(r.jenkins.getPluginManager().uberClassLoader); final StepDescriptor var4 = var1.getDescriptor(); var3.setVariable(""steps"", new GroovyObjectSupport() { @Override public Object Func2(String var5, Object var6) { if (var5.equals(var4.getFunctionName())) { try { return var4.newInstance(DSL.parseArgs(var4, var6).namedArgs); } catch (RuntimeException x) { throw x; } catch (Exception x) { throw new RuntimeException(x); } } else { return super.Func2(var5, var6); } } }); Step var7 = (Step) var3.evaluate(""steps."" + var2); r.assertEqualDataBoundBeans(var1, var7); } "	1	0	1	1	1	0
private String Func1(StepDescriptor var1) { try { String[] var2 = new ClassDescriptor(var1.clazz).loadConstructorParamNames(); return var2.length == 1 ? var2[0] : null; } catch (NoStaplerConstructorException e) { return null; } } 	0	0	0	1	0	0
private Image Func1() throws DocumentParserException { Image var1 = (Image) EcoreUtil.create(TemplatePackage.Literals.IMAGE); OptionParser var2 = new OptionParser(); Map<String, String> var3 = var2.parseOptions(readTag(var1, var1.getRuns()), TokenType.IMAGE, OPTION_GROUP_RANK, OPTION_VAL_GROUP_RANK, var1); checkImagesOptions(var3, var1, IMAGE_OPTION_SET, new HashSet<String>(0)); if (!var3.containsKey(IMAGE_FILE_NAME_KEY)) { final XWPFRun var4 = var1.getRuns().get(var1.getRuns().size() - 1); var1.getValidationMessages().add(new TemplateValidationMessage(ValidationMessageLevel.ERROR, message(ParsingErrorMessage.INVALID_IMAGE_TAG), var4)); } else { var1.setFileName(var3.get(IMAGE_FILE_NAME_KEY)); setImageOptions(var1, var3); } return var1; } 	0	0	0	0	1	0
"public static synchronized HttpClient Func1() { if (httpClient == null) { HttpClientBuilder var1 = HttpClientBuilder.create(); try { SSLContext var2 = new SSLContextBuilder().loadTrustMaterial(null, new TrustStrategy() { @Override public boolean Func2(X509Certificate[] var3, String var4) throws CertificateException { return true; } }).build(); var1.setSSLContext(var2); SSLConnectionSocketFactory var5 = new SSLConnectionSocketFactory(var2, new NoopHostnameVerifier()); Registry<ConnectionSocketFactory> var6 = RegistryBuilder.<ConnectionSocketFactory>create() .register(""http"", PlainConnectionSocketFactory.getSocketFactory()) .register(""https"", var5).build(); PoolingHttpClientConnectionManager var7 = new PoolingHttpClientConnectionManager(var6); var1.setConnectionManager(var7); httpClient = var1.build(); } catch (Exception e) { httpClient = var1.build(); } } return httpClient; } "	1	0	1	0	1	0
"private void Func1(Map<String,String> var1, SsmlDocumentBuilder var2, QuipMetadata var3) { String var4 = var3.getBot(); if(StringUtils.isEmpty(var4)){ var2.text(""I don't have any info for this situation.""); return; } switch(var4){ case ""complibot"": var2.text(""I give you compliments and tell you how awesome you are, "").pause().text(""and then I sit quietly and wait for you to talk to me again!"").endSentence(); break; case ""insultibot"": var2.text(""I mainly just tell you how awful you are.  "").endSentence().text(""Now, leave me alone."").endSentence(); break; default: var2.text(""I don't have any info for the var4 named '"" + var4 + ""'."").endSentence(); return; } } "	0	0	0	1	0	0
private void Func1(Map<String, String> var1, SsmlDocumentBuilder var2, QuipMetadata var3) { Compliments var4 = Compliments.getRandomCompliment(); var3.getComplimentsUsed().add(var4.name()); var2.text(var4.getCompliment()); } 	0	0	0	1	0	0
private void Func1(Map<String, String> var1, SsmlDocumentBuilder var2, QuipMetadata var3) { BackhandedCompliments var4 = BackhandedCompliments.getRandomBackhandedCompliment(); var3.getBackhandedComplimentsUsed().add(var4.name()); var2.text(var4.getCompliment()); } 	0	0	0	1	0	0
"private void Func1(Map<String,String> var1, SsmlDocumentBuilder var2, QuipMetadata var3) { String var4 = var3.getBot(); String var5 = var1.get(""botName""); if(StringUtils.isEmpty(var4) || StringUtils.isEmpty(var5)){ var2.text(""I don't have any info for this situation.""); return; } switch(var4){ case ""complibot"": if(var5.equals(var4)){ var2.text(""That's me!  "").endSentence(); doWhatDoYouDoRequest(var1, var2, var3); }else if(var5.equals(""insultibot"")){ var2.text(""That's my bestie.  "").endSentence().text(""It can act grumpy sometimes, but it has a heart of gold."").endSentence(); }else{ var2.text(""I don't know that var4, but I bet it's awesome."").endSentence(); } break; case ""insultibot"": if(var5.equals(var4)){ var2.text(""Are you trolling me?  "").endSentence().text(""That's me.  "").endSentence(); doWhatDoYouDoRequest(var1, var2, var3); }else if(var5.equals(""complibot"")){ var2.text(""That's the annoyingly cheerful var4 that won't shut up."").endSentence(); }else{ var2.text(""I don't know that var4, and I'm perfectly fine with that."").endSentence(); } break; default: var2.text(""I don't have any info for the var4 named '"" + var4 + ""'."").endSentence(); return; } } "	0	0	0	1	0	0
public static Entity Func1(Vector2 var1, Vector2 var2, Faction var3, int var4) { Entity var5 = buildEntity(var1) .physicsBody(BodyType.KinematicBody) .circleSensor(Constants.projectileRadius) .var3(var3) .sprite(Assets.bullets.yellow, Constants.projectileRadius * 2, Constants.projectileRadius * 2).getWithoutAdding(); ProjectileComponent var6 = engine.createComponent( ProjectileComponent.class).init(var4); var5.add(var6); PhysicsComponent var7 = Components.PHYSICS.get(var5); var7.body.setBullet(true); var7.body.setLinearVelocity(var2); var7.body.setTransform(var1, var2.angle()); engine.addEntity(var5); return var5; } 	0	0	0	0	0	1
private LuaValue Func1() { Object Func1 = this.Func1; LuaValue var2 = strengthen(Func1); if (Func1 != NIL && var2.isNil()) { this.Func1 = NIL; this.value = NIL; } return var2; } 	0	0	1	0	0	0
"public static BlockType Func1(String var1) { String var2 = var1; int var3 = 0; if (!blockTypes.containsKey(var1)) { if (var1.matches("".+:.+:\\d+"")) { var2 = var1.replaceAll("":\\d+"", """"); try { var3 = Integer.parseInt(var1.replaceAll("".+:.+:"", """")); } catch (NumberFormatException nfex) { } } else { var2 = ""minecraft:""+var2; if (!blockTypes.containsKey(var2)) { return null; } } } return blockTypes.get(var2).get(var3); } "	1	0	0	0	1	0
"@OnClick({R.id.close_dialog_button, R.id.cancel_interpretation_create, R.id.create_interpretation}) @SuppressWarnings(""unused"") public void Func1(View var1) { if (var1.getId() == R.id.create_interpretation) { UserAccount var2 = Dhis2.getCurrentUserAccount(); User var3 = Models.users().query(var2.getUId()); System.out.println(""*** User: ***"" + var3); Interpretation var4 = Dhis2.interpretations() .createInterpretation(mDashboardItem, var3, mInterpretationText.getText().toString()); List<InterpretationElement> var5 = Dhis2.interpretations() .getInterpretationElements(var4); Models.interpretations().save(var4); if (var5 != null && !var5.isEmpty()) { for (InterpretationElement var6 : var5) { Models.interpretationElements().save(var6); } } DhisService.getInstance().syncInterpretations(); EventBusProvider.post(new UiEvent(UiEvent.UiEventType.SYNC_INTERPRETATIONS)); Toast.makeText(getActivity(), getString(R.string.successfully_created_interpretation), Toast.LENGTH_SHORT).show(); } dismiss(); } "	0	0	0	1	1	0
private boolean Func1(Pedelec var1) { final float var2 = 0.0f; return OperationState.OPERATIVE.equals(var1.getState()) && !var1.getInTransaction() && var1.getChargingStatus().getBatteryStateOfCharge() > var2; } 	0	0	1	0	1	0
@Override public void Func1(Node var1, List<Node> var2) { validationContext.getTraversalContext().Func1(var1, var2); Set<AbstractRule> var3 = new LinkedHashSet<AbstractRule>(this.rules); var3.removeAll(rulesToSkip); List<AbstractRule> var4 = new ArrayList<AbstractRule>(var3); if (var1 instanceof Argument) { checkArgument((Argument) var1, var4); } else if (var1 instanceof TypeName) { checkTypeName((TypeName) var1, var4); } else if (var1 instanceof VariableDefinition) { checkVariableDefinition((VariableDefinition) var1, var4); } else if (var1 instanceof Field) { checkField((Field) var1, var4); } else if (var1 instanceof InlineFragment) { checkInlineFragment((InlineFragment) var1, var4); } else if (var1 instanceof Directive) { checkDirective((Directive) var1, var2, var4); } else if (var1 instanceof FragmentSpread) { checkFragmentSpread((FragmentSpread) var1, var4); } else if (var1 instanceof FragmentDefinition) { checkFragmentDefinition((FragmentDefinition) var1, var4); } else if (var1 instanceof OperationDefinition) { checkOperationDefinition((OperationDefinition) var1, var4); } else if (var1 instanceof VariableReference) { checkVariable((VariableReference) var1, var4); } else if (var1 instanceof SelectionSet) { checkSelectionSet((SelectionSet) var1, var4); } } 	1	0	1	1	1	0
public String Func1(final Part var1, final String var2, final String var3) throws IOException { String var4 = var2; if (!isNameCorrect(var4)) { var4 = createCorrectName(var2); } FileInfo var5 = new FileInfo(var2, var4, var3, var1.getInputStream()); files.add(var5); return var4; } 	0	0	0	0	0	1
"@Override public void Func1(BowlerAbstractDevice var1) { setGraphic(AssetFactory.loadIcon(""CreatureLab-Tab.png"")); this.var1 = var1; autoRegen.setSelected(true); autoRegen.setOnAction(event -> { if(autoRegen.isSelected()){ generateCad(); } }); setText(var1.getScriptingName()); GridPane var2 = new GridPane(); if (DHParameterKinematics.class.isInstance(var1)) { DHParameterKinematics var3 = (DHParameterKinematics) var1; try { setDefaultDhParameterKinematics(var3); } catch (Exception e) { BowlerStudioController.highlightException(null, e); } Log.debug(""Loading xml: "" + var3.getXml()); var2.add(new DhChainWidget(var3, null), 0, 0); } else if (MobileBase.class.isInstance(var1)) { try { ScriptingEngine.setAutoupdate(true); } catch (IOException e1) { e1.printStackTrace(); } MobileBase var3 = (MobileBase) var1; setDefaultWalkingEngine(var3); AnchorPane var4 = new AnchorPane(); TreeItem<String> var5; try { var5 = new TreeItem<String>( var3.getScriptingName(),AssetFactory.loadIcon(""creature.png"")); } catch (Exception e) { var5 = new TreeItem<String>( var3.getScriptingName()); } var5.setExpanded(true); HashMap<TreeItem<String>, Runnable> var6 = new HashMap<>(); HashMap<TreeItem<String>, Group> var7 = new HashMap<>(); TreeView<String> var8 = new TreeView<>(var5); try { MobleBaseMenueFactory.load(var3, var8, var5, var6, var7, this); } catch (Exception e) { e.printStackTrace(); } var8.setPrefWidth(325); var8.getSelectionModel().setSelectionMode(SelectionMode.SINGLE); var8.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<Object>() { @Override public void Func2(ObservableValue<?> var9, Object var10, Object var11) { @SuppressWarnings(""unchecked"") TreeItem<String> var12 = (TreeItem<String>) var11; new Thread() { public void Func3() { if (var6.get(var12) != null) { var6.get(var12).Func3(); } if (var7.get(var12) != null) { Platform.runLater(() -> { var4.getChildren().clear(); var4.getChildren().add(var7.get(var12)); }); } else { Platform.runLater(() -> { var4.getChildren().clear(); }); } } }.start(); } }); HBox var13 = new HBox(10); pi = new ProgressIndicator(0); var13.getChildren().addAll(new Label(""Cad Progress:""), pi,autoRegen); baseManager = new MobileBaseCadManager(var3, pi,autoRegen); VBox var14 = new VBox(10); BowlerStudio.setOverlayLeft(new Group(var8)); var3.addConnectionEventListener(new IDeviceConnectionEventListener() { @Override public void Func4(BowlerAbstractDevice var15) { BowlerStudio.clearOverlayLeft(); BowlerStudio.clearOverlayTop(); BowlerStudio.clearOverlayTopRight(); BowlerStudio.clearOverlayBottomRight(); } @Override public void Func5(BowlerAbstractDevice var15) {} }); var13.setStyle(""-fx-background-color: #FFFFFF;""); var13.setOpacity(.7); var13.setPrefSize(325, 50); BowlerStudio.setOverlayTop(new Group(var13)); BowlerStudio.setOverlayTopRight(new Group(new JogWidget(var3))); BowlerStudio.setOverlayBottomRight(new Group(var4)); BowlerStudio.setCadSplit(.1); new Thread(){ public void Func3(){ ThreadUtil.wait(500); requestClose(); } }.start(); } else if (AbstractKinematicsNR.class.isInstance(var1)) { AbstractKinematicsNR var3 = (AbstractKinematicsNR) var1; var2.add(new DhChainWidget(var3, null), 0, 0); } generateCad(); setContent(new ScrollPane(var2)); } "	1	0	1	0	0	0
"@Override public Path Func1() { return new Path(""/home/xenon""); } "	0	0	0	0	1	0
"public void Func1() throws MojoExecutionException { String var1 = ""sencha --time "" + getSenchaLogLevelCmd(); if (!StringUtils.isEmpty(arguments)) { var1 += "" "" + arguments; } try { CommandLine var2 = getCommandLine(var1); log.info(String.format(""Executing Sencha Cmd '%s'"", var1)); internalExecute(var2); log.debug(""Executed Sencha Cmd successfully""); } catch (IOException e) { throw new MojoExecutionException(""Execution of Sencha Cmd failed."", e); } } "	0	0	0	0	1	0
"@Override public void Func1 () { drawer = new ShapeRenderer(); spriteBatch = new SpriteBatch(); gameStateManager = new GameStateManager(this); Gdx.app.log(TAG, ""created""); AssetLoader.load(); gameStateManager.pushScreen(new MainMenu(this)); // TODO: Set to SS when done debugging } "	0	0	0	0	1	0
public static AsyncCrawler Func1(String var1, String var2, String var3, String var4, String var5, String var6) throws Exception { Configuration var7 = new Configuration(var1); MetricsManager var8 = new MetricsManager(false, var2); Storage var9 = LinkStorage.createLinkStorage(var1, var3, var2, var4, var7.getLinkStorageConfig(), var8); Storage var10 = TargetStorage.createTargetStorage(var1, var4, var2, var5, var6, var7.getTargetStorageConfig(), var9, var8); return new AsyncCrawler(var10, var9, var7.getCrawlerConfig(), var2, var8); } 	1	0	0	1	0	0
@Override public String Func1() { return new MetacatJsonLocator().toJsonString(this); } 	0	0	0	0	1	0
public String[] Func1(String var1, String var2, String var3, String var4) throws AppFactoryException{ String var5 = ServiceHolder.getContinuousIntegrationSystemDriver() .getJobName(var1, var2, var3); return connector.Func1(var5, var4); } 	1	0	0	1	1	0
"public File Func1(String var1, String var2, String var3, String var4) throws AppFactoryException { return this.connector.Func1(getJobName(var1, var2, """"), var3, var4); } "	0	0	0	0	1	0
"@Override public String Func1() { return Utils.join(result, "": "", "" ,""); } "	0	0	0	0	0	1
public /*@Nullable*/ AnnotationMirror Func1(AnnotatedTypeMirror var1, AnnotatedTypeMirror var2) { if (var1.getAnnotations().isEmpty() && var2.getAnnotations().contains(s)) { return hz; } return null; } 	0	0	0	0	1	0
public APIStatus Func1() { return newStatus; } 	0	0	0	0	0	1
private void Func1(DataFile var1, EvaluatorFactory var2, Integer var3) throws IOException { var1.setHasHeaders(Optional.of(true)); List<DataFile> var4 = RecordSourceFactory.prepareSource(var1); List<EvaluationUnit> var5 = splitDataFile(var4, var2, var3); Func1(var5); } 	0	0	0	0	1	0
"@Test (priority = 2) public void Func1() throws Exception { String var1 = ""Надання довідки про відсутність (наявність) судимості або обмежень, передбачених кримінально-процесуальним законодавством (терміново)""; String var2 = ""Статистика""; String var3 = ""Таймінг ?""; String var4 = ""годин""; String var5 = ""Кількість наданих послуг""; String var6 = ""Дніпропетровська""; mainPage.typeInSearchField(var1); app.pause(6000); mainPage.clickService(var1); app.pause(2000); // временно Assert.assertEquals(selectAreaPage.serviceName.getText(), var1); selectAreaPage.clickServiceTab(var2); app.pause(4000); // временно Assert.assertEquals(statisticTab.var3.getText(), var3); Assert.assertTrue(statisticTab.var4.getText().contains(var4)); Assert.assertEquals(statisticTab.var5.getText(), var5); Assert.assertEquals(statisticTab.var6.getText(), var6); } "	0	0	0	0	1	0
@Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { View var4 = var1.inflate(R.layout.fragment_controll, var2, false); viwEmpty = var4.findViewById(R.id.empty); viwEmpty.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var4) { createNewController(); } }); mListView = (RecyclerView) var4.findViewById(R.id.list); ActionBar var5 = ((AppCompatActivity) getActivity()).getSupportActionBar(); if(var5 != null) { var5.setTitle(R.string.var11); } mAdapter = new ControllerAdapter(getActivity()); mAdapter.setItemListener(new ControllerAdapter.ItemListener() { @Override public void Func3(int var6) { updateEmptyView(var6); } @Override public void Func4(ControllerAdapter.ControllerHolder var7) { ControllerDB var8 = mAdapter.getItem(var7.getAdapterPosition()); getActivity().getSupportFragmentManager().beginTransaction() .replace(R.id.page_container, ControlFragment.newInstance(var8.getId())) .addToBackStack(null) .commit(); } @Override public boolean Func5(final ControllerAdapter.ControllerHolder var7) { final ControllerDB var8 = mAdapter.getItem(var7.getAdapterPosition()); new AlertDialog.Builder(getActivity()) .setItems(R.array.controll_manager, new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var9, int var10) { switch (var10) { case 0: loadController(var8.getId()); break; case 1: mAdapter.removeItem(var7.getAdapterPosition()); var8.deleteController(getActivity()); break; } } }).create().show(); return true; } }); final List<ControllerDB> var11 = ControllerDB.getControllers(); mAdapter.addAll(var11); GridLayoutManager var12 = new GridLayoutManager(getActivity(), 1); mListView.setLayoutManager(var12); mListView.setItemAnimator(new DefaultItemAnimator()); mListView.setAdapter(mAdapter); updateEmptyView(var11.size()); setHasOptionsMenu(true); return var4; } 	0	0	0	0	1	0
"@Override protected JsonNode Func1(JsonNode var1) throws CommandException { String var2 = getUsername(var1); JsonNode var3 = var1.get(ScriptCommand.PARAMS); String var4 = var3.get(""var4"")==null?var3.get(""var4"").asText():null; JsonNode var5 = var3.get(UserDao.ATTRIBUTES_VISIBLE_ONLY_BY_THE_USER); JsonNode var6 = var3.get(UserDao.ATTRIBUTES_VISIBLE_BY_FRIENDS_USER); JsonNode var7 = var3.get(UserDao.ATTRIBUTES_VISIBLE_BY_REGISTERED_USER); JsonNode var8 = var3.get(UserDao.ATTRIBUTES_VISIBLE_BY_ANONYMOUS_USER); try { ODocument var9 = UserService.updateProfile(var2, var4, var8, var5, var6, var7); String var10 = JSONFormats.prepareDocToJson(var9, JSONFormats.Formats.USER); return Json.mapper().readTree(var10); } catch (Exception e) { throw new CommandExecutionException(var1,""Error updating user: ""+e.getMessage()); } } "	0	0	1	1	1	0
"public ArrayList<String> Func1() { ArrayList<String> var1 = new ArrayList<String>(); for (String var2 : keyToCode.keySet()){ if (Gdx.input.isKeyPressed(keyToCode.get(var2)))	var1.add(var2); } return var1; } "	0	0	0	0	1	0
"private void Func1(Statement var1, Term var2) throws AtomSetException { try { Map<String, Object> var3 = new TreeMap<String, Object>(); var3.put(""var2"", var2.getIdentifier()); var3.put(""term_type"", var2.getType()); String var4 = this.getDriver() .getInsertOrIgnoreStatement( TERM_TABLE_NAME, var3); var1.executeUpdate(var4); } catch (SQLException e) { throw new AtomSetException(""Error during insertion of a var2"", e); } } "	0	0	0	0	1	0
"@Override public void Func1(Object var1, Errors var2) { Message var3 = (Message) var1; byte[] var4 = new byte[0]; try { var4 = var3.getMessage().getBytes(""UTF-8""); } catch (UnsupportedEncodingException ex) { ex.printStackTrace(); } if (var4.length > 64) { var2.rejectValue(""var3"", ""field.required"", ""too many characters""); } } "	0	0	1	0	1	0
private Map<String, Map<String, ConfigParameterInfo>> Func1( ProjectState var1, DynamicMap<ProjectConfigEntry> var2, PluginConfigFactory var3, AllProjectsName var4) { TreeMap<String, Map<String, ConfigParameterInfo>> var5 = new TreeMap<>(); for (Entry<ProjectConfigEntry> var6 : var2) { ProjectConfigEntry var7 = var6.getProvider().get(); PluginConfig var8 = var3.getFromProjectConfig(var1, var6.getPluginName()); String var9 = var8.getString(var6.getExportName()); ConfigParameterInfo var10 = new ConfigParameterInfo(); var10.displayName = var7.getDisplayName(); var10.description = var7.getDescription(); var10.warning = var7.getWarning(var1); var10.type = var7.getType(); var10.permittedValues = var7.getPermittedValues(); var10.editable = var7.isEditable(var1) ? true : null; if (var7.isInheritable() && !var4.get().equals(var1.getProject().getNameKey())) { PluginConfig var11 = var3.getFromProjectConfigWithInheritance(var1, var6.getPluginName()); var10.inheritable = true; var10.value = var7.onRead(var1, var11.getString(var6.getExportName(), var7.getDefaultValue())); var10.var9 = var9; var10.inheritedValue = getInheritedValue(var1, var3, var6); } else { if (var7.getType() == ProjectConfigEntry.Type.ARRAY) { var10.values = var7.onRead(var1, Arrays.asList(var8.getStringList(var6.getExportName()))); } else { var10.value = var7.onRead(var1, var9 != null ? var9 : var7.getDefaultValue()); } } Map<String, ConfigParameterInfo> var12 = var5.get(var6.getPluginName()); if (var12 == null) { var12 = new TreeMap<>(); var5.put(var6.getPluginName(), var12); } var12.put(var6.getExportName(), var10); } return !var5.isEmpty() ? var5 : null; } 	1	0	1	1	0	0
"@Test public void Func1() throws Exception { PushOneCommit.Result var1 = createChange(); testRepo.reset(""HEAD~1""); PushOneCommit.Result var2 = createChange(); RevisionApi var3 = gApi.changes() .id(var1.getChangeId()) .current(); var3.review(ReviewInput.approve()); var3.submit(); String var4 = var2.getChangeId(); gApi.changes() .id(var4) .current() .Func1(); ChangeInfo var5 = gApi.changes().id(var4).get(); assertThat(var5.revisions.get(var5.currentRevision)._number).isEqualTo(2); ChangeInfo var6 = gApi.changes() .id(var4).get(EnumSet.of( ListChangesOption.CURRENT_REVISION, ListChangesOption.CURRENT_COMMIT)); GitPerson var7 = var6.revisions.get( var6.currentRevision).commit.var7; assertThat(var7.name).isEqualTo(admin.fullName); assertThat(var7.email).isEqualTo(admin.email); exception.equals(ResourceConflictException.class); exception.expectMessage(""Change is already up to date""); gApi.changes() .id(var4) .current() .Func1(); } "	0	0	0	0	1	0
"public static void Func1(final String var1, final ResponseHandler<Convention> var2) { Convention var3 = conventions.get(var1); if (var3 != null) { var2.var3(var3); return; } HttpClient.get(var1 + "".json"", null, new AsyncHttpResponseHandler() { @Override public void Func2(int var4, Header[] var5, byte[] var6) { try { Convention var7 = GSON.fromJson(new String(var6, ""UTF-8""), Convention.class); conventions.put(var1, var7); var2.var3(var7); } catch (Exception ex) { Log.e(APP_NAME, """", ex); } } @Override public void Func3(int var4, Header[] var5, byte[] var6, Throwable var8) { Log.e(APP_NAME, ""HTTP Error: "" + var4 + ""\nURL:"" + ""img/"" + var1 + extension, var8); } }); } "	0	0	1	1	1	0
"public void Func1( final String var1, final String var2 ) throws DaoException { EntityManager var3 = emf.createEntityManager(); try { var3.getTransaction().begin(); Query var4 = var3.createQuery( ""DELETE FROM Subscriber s WHERE s.var1 = :var1 AND s.var2 = "" + "":var2"" ); var4.setParameter( ""var1"", var1 ); var4.setParameter( ""var2"", var2 ); var4.executeUpdate(); var3.getTransaction().commit(); } catch ( PersistenceException e ) { if ( var3.getTransaction().isActive() ) { var3.getTransaction().rollback(); } LOGGER.error( ""Query string found to be invalid."" ); throw new DaoException( e ); } finally { var3.close(); } } "	0	0	1	0	0	0
"@Test public void Func1() { addToDataModel(""x"", 1); assertErrorContains(""${'${noSuchVar}'}"", InvalidReferenceException.class, ""missing"", ""noSuchVar""); assertErrorContains(""${'${x/0}'}"", ArithmeticException.class, ""zero""); } "	0	0	1	0	1	0
"@SuppressWarnings(""ResourceType"") public void Func1() { toolbar.findViewById(R.var10.action_bar_spinner).setVisibility(View.INVISIBLE); toolbar.getTag(R.var10.action_bar_spinner); RelativeLayout var1 = (RelativeLayout) rootView.findViewById(R.var10.info); int var2 = R.var10.teacher_name; TextView var3 = (TextView) var1.findViewById(R.var10.teacher_name); TextView var4 = (TextView) var1.findViewById(R.var10.six_weeks_average); var3.setVisibility(View.VISIBLE); var4.setVisibility(View.VISIBLE); class AssignmentDetailListener implements OnClickListener { private final Assignment var5; AssignmentDetailListener(Assignment var5) { this.var5 = var5; } @Override public void Func2(View var6) { AlertDialog.Builder var7 = new AlertDialog.Builder(getActivity(), R.style.AlertDialog); var7.setTitle(var5.getName()); StringBuilder var8 = new StringBuilder(); var8.append(var5.getCategory() == null ? ""No var19"" : var5.getCategory().getType()) .append(""\nMax Grade: "" + String.format(""%.1f"", var5.getMaxGrade())) .append(""\nDue Date: "" + DateHelper.daysRelative(var5.getDueDate())) .append(""\nWeight: x"" + String.format(""%.1f"", var5.getWeight())); try { var7.setMessage(var8.toString()); } catch (Exception e) { return; } var7.setCancelable(false) .setPositiveButton(""OK"", new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var9, int var10) { var9.dismiss(); } }); AlertDialog var11 = var7.create(); if (Build.VERSION.SDK_INT < 21) var11.getWindow().setBackgroundDrawableResource(android.R.color.transparent); var11.show(); } } var3.setText(session.getCurrentStudent().getClassReport(classID).getTeacherName()); int var12 = mTermReport.getGrade(); if (var12 >= 0) { String var13 = Integer.toString(var12); var4.setText(var13); } else var4.setVisibility(View.INVISIBLE); if (session.MULTIPLE_STUDENTS) { LayoutInflater var14 = (LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE); LinearLayout var15 = (LinearLayout) var14.inflate(R.var1.main_student_name_if_multiple_students, var1, false); ((TextView) var15.findViewById(R.var10.name)).setText(session.getCurrentStudent().name); RelativeLayout.LayoutParams var16 = new RelativeLayout.LayoutParams( LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT); var16.addRule(RelativeLayout.BELOW, var2); var15.setId(var10.student_name); var2 = var15.getId(); var1.addView(var15, var16); } LayoutInflater var14 = (LayoutInflater) getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE); boolean var17 = false; for (Assignment var18 : mTermReport.getAssignments()) if (var18.getCategory().getType().equals(GradeCategory.NO_CATEGORY)) { var17 = true; break; } for (GradeCategory var19 : mTermReport.getCategories()) { if (var19.getType().equals(GradeCategory.NO_CATEGORY) && !var17) continue; LinearLayout var20 = new LinearLayout(getActivity()); var20.setOrientation(LinearLayout.VERTICAL); var20.setBackgroundResource(R.drawable.card_custom); String var21 = var19.getType(); for (Assignment var18 : mTermReport.getAssignments()) { if (var19.equals(var18.getCategory())) { LinearLayout var22 = (LinearLayout) var14.inflate(R.var1.class_swipe_grade_view, var20, false); TextView var23 = (TextView) var22.findViewById(R.var10.var24); String var24 = var18.getName(); var23.setText(var24); var23.setId(ASSIGNMENT_NAME_ID); TextView var25 = (TextView) var22.findViewById(R.var10.var18); var25.setText(var18.getGrade() == -1 ? """" : String.format(""%.0f"", var18.getGrade())); var22.setOnClickListener(new AssignmentDetailListener(var18)); var20.addView(var22); } } LinearLayout var26 = (LinearLayout) var14.inflate(R.var1.class_swipe_category_card, var20, false); TextView var27 = (TextView) var26.findViewById(R.var10.category_name); var27.setText(var21); TextView var28 = (TextView) var26.findViewById(R.var10.category_score); int var29 = var19.getGrade(); if (var29 < 0) var28.setText(""""); else var28.setText("""" + var29); var20.addView(var26); Animation var30 = AnimationUtils.loadAnimation(getActivity(), R.anim.slide_from_down_rotate); var30.setStartOffset(0); var20.setId(var2 + 1); RelativeLayout.LayoutParams var16 = new RelativeLayout.LayoutParams( LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT); var16.addRule(RelativeLayout.BELOW, var2); var1.addView(var20, var16); var2 = var20.getId(); var20.startAnimation(var30); } } "	0	0	0	0	0	1
"public void Func1(String var1, boolean var2) { long var3 = logTime(var2); System.out.println(String.format(""%s (%,6d sec; DB cache: %,9d)"", var1, var3 / 1000, getCacheCounts(var2))); } "	0	0	0	0	1	0
@Override public View Func1(Context var1, Cursor var2, ViewGroup var3) { return View.inflate(var1, R.layout.item_feedheadline, var3); } 	0	0	0	1	1	0
"@Test public void Func1(){ runActivity(activity); onView(withId(R.id.editText)).perform(clearText(), typeText(expectedActionTitle)); Espresso.closeSoftKeyboard(); onView(withId(R.id.button4)).perform(click()); List<Slide> var1 = ActionRepository.getActionsByActivityId(activity.getId()); assertEquals(""New action should be added"", 1, var1.size()); } "	0	0	0	0	1	0
public static ByteBuffer Func1(long var1) { if (var1 >= cachedLowerAddress.get() && var1 < cachedHigherAddress.get()) { return cachedBuffer.get(); } else { int var2  = var2(var1); int var3  = var3(var2); int var4 = var4(var1, var3); long var5 = (var2 << 62) | (var4 << var3); AtomicBoolean var6 = blockLocks[var2]; ByteBuffer var7 = null; if (var6.compareAndSet(false, true)) { try { var7 = (ByteBuffer) blockArrays[var2].get(var4); } finally { var6.set(false); } } cachedLowerAddress.set(var5); cachedHigherAddress.set(var5 + (1 << var3)); cachedBuffer.set(var7); return var7; } } 	0	0	0	0	1	0
"public static boolean Func1(final String var1) { if(Strings.isNullOrEmpty(var1)) { return true; } String[] var2 = var1.split(""\\r?\\n""); boolean var3 = true; for(String var4 : var2) { var3 = new IPAddressValidator().validate(var4); } return var3; } "	0	0	0	0	1	0
public void Func1() { for (PhysicsObject var1 : spaceRegister) { for (PhysicsObject var2 : spaceRegister) { if (var1 == var2)//If we calculated the force between one var1 and itself, the force would be infinite and the simulation would crash. continue; var1.appendForce(gravitation(var1, var2)); } } } 	0	0	0	0	0	1
@Override protected void Func1() { for (final Element var1 : selected) { var1.destroy(); } final Collection<DRepresentation> var2 = DialectManager.INSTANCE .getAllRepresentations(session); for (final DRepresentation var3 : var2) { if (var3 instanceof DSemanticDiagram) { final DSemanticDiagram var4 = (DSemanticDiagram)var3; if (var4.getTarget() != null && DialectManager.INSTANCE.canRefresh(var3)) { DialectManager.INSTANCE.refresh(var3, new NullProgressMonitor()); } } } } 	0	0	0	0	1	0
"private static VirtualFile Func1(VirtualFile var1) { int var2 = 4; VirtualFile var3 = var1; do { var3 = var3.getParent(); } while (var3 != null && --var2 > 0); return var3 != null && var3.getName().equals(""flutter"") ? var3 : null; } "	1	0	0	0	1	0
"@Override public void Func1(Graphics2D var1) { if (isVisible()) { if (backgroundColor != null) { var1.setColor(backgroundColor); var1.fill(getBounds()); } if (isAcceptingInput()) { switch (getStatus()) { case NO_MOUSE: var1.setColor(getBorder().getOuterColor()); break; case MOUSE: var1.setColor(getBorder().getHoverColor()); break; case CLICK: var1.setColor(getBorder().getClickColor()); break; case NOT_AVAILABLE: var1.setColor(getBorder().getNotAvailableColor()); break; default: System.out.println(""Status not defined.""); System.exit(1); } } else { var1.setColor(declineInputColor); } if (optImage == null) { var1.drawString(text, getX(), getY()); } else { var1.drawImage(optImage, imageDrawLocation.x, imageDrawLocation.y, imageDrawScale.x, imageDrawScale.y, null); var1.drawString(text, textDrawLocation.x, textDrawLocation.y); } } } "	1	1	0	1	1	0
public void Func1(TileFarm var1, FarmerTree var2, BlockPos var3, HarvestResult var4) { horizontalRange = var1.farmSize + 7; verticalRange = 30; Func1(var1.getWorld(), var1.getMachinePos(), var3, var4, var2.getIgnoreMeta()); } 	0	0	0	0	1	0
public static void Func1(Evidence var1) throws ParserConfigurationException { GeneBo var2 = ApplicationContextSingleton.getGeneBo(); Gene var3 = var2.findGeneByHugoSymbol(var1.getGene().getHugoSymbol()); var1.setGene(var3); if(var3 == null) { return; } Set<Alteration> var4 = var1.getAlterations(); if(var4 != null && !var4.isEmpty()) { AlterationType var5 = AlterationType.MUTATION; Set<Alteration> var6 = new HashSet<Alteration>(); AlterationBo var7 = ApplicationContextSingleton.getAlterationBo(); for (Alteration var8 : var4) { String var9 = var8.getAlteration(); String var10 = var8.getName(); Alteration var11 = var7.findAlteration(var3, var5, var9); if (var11 == null) { var11 = new Alteration(); var11.setGene(var3); var11.setAlterationType(var5); var11.setAlteration(var9); var11.setName(var10); AlterationUtils.annotateAlteration(var11, var9); var7.save(var11); } var6.add(var11); } var1.setAlterations(var6); } Set<ClinicalTrial> var12 = var1.getClinicalTrials(); Set<Article> var13 = var1.getArticles(); Set<Treatment> var14 = var1.getTreatments(); Set<NccnGuideline> var15 = var1.getNccnGuidelines(); if (var1.getSubtype() != null && var1.getSubtype().isEmpty()) { var1.setSubtype(null); } if (var1.getCancerType() != null && var1.getCancerType().isEmpty()) { var1.setCancerType(null); } if (var12 != null && !var12.isEmpty()) { ClinicalTrialBo var16 = ApplicationContextSingleton.getClinicalTrialBo(); Set<ClinicalTrial> var17 = new HashSet<>(); Set<String> var18 = new HashSet<String>(); for (ClinicalTrial var19 : var12) { String var20 = var19.getNctId(); ClinicalTrial var21 = var16.findClinicalTrialByNctId(var20); if (var21 == null) { var18.add(var20); } else { var17.add(var21); } } var17.addAll(ClinicalTrialsImporter.importTrials(var18)); var1.setClinicalTrials(var17); } if (var13 != null && !var13.isEmpty()) { ArticleBo var22 = ApplicationContextSingleton.getArticleBo(); Set<Article> var23 = new HashSet<>(); for (Article var24 : var13) { String var25 = var24.getPmid(); if (var25 == null) { Article var26 = var22.findArticleByAbstract(var24.getAbstractContent()); if (var26 == null) { var22.save(var24); var23.add(var24); } else { var23.add(var26); } } else { Article var26 = var22.findArticleByPmid(var25); if (var26 == null) { Article var27 = NcbiEUtils.readPubmedArticle(var25); if (var27 != null) { var22.save(var27); var23.add(var27); } } else { var23.add(var26); } } } var1.setArticles(var23); } if (var14 != null && !var14.isEmpty()) { DrugBo var28 = ApplicationContextSingleton.getDrugBo(); TreatmentBo var29 = ApplicationContextSingleton.getTreatmentBo(); for (Treatment var30 : var14) { Set<Drug> var31 = var30.getDrugs(); if (var31 != null && !var31.isEmpty()) { Set<Drug> var32 = new HashSet<>(); for (Drug var33 : var31) { Drug var34 = var28.findDrugByName(var33.getDrugName()); if (var34 == null) { var28.save(var33); var32.add(var33); } else { var32.add(var34); } } var30.setDrugs(var32); } var29.saveOrUpdate(var30); } } if (var15 != null && !var15.isEmpty()) { NccnGuidelineBo var35 = ApplicationContextSingleton.getNccnGuidelineBo(); Set<NccnGuideline> var36 = new HashSet<>(); for (NccnGuideline var37 : var15) { NccnGuideline var38 = var35.findNccnGuideline(var37.getTherapy(), var37.getDisease(), var37.getVersion(), var37.getPages()); if (var38 == null) { var35.saveOrUpdate(var37); var36.add(var37); } else { var36.add(var38); } } var1.setNccnGuidelines(var36); } } 	0	0	0	0	0	1
"public HttpResponse<String> Func1(String var1) throws JenkinsServerException { try { return jenkinsClient.post_xml(""/job/"" + var1 + Constants.URL_DO_DELETE); } catch (JenkinsClientException exception) { throw new JenkinsServerException(exception); } } "	0	0	0	0	1	0
"@Override public void Func1(ViewControllerRegistry var1) { if (isIndexRedirectEnabled) { var1.addRedirectViewController(""/"", ""/app/""); } super.Func1(var1); } "	0	0	0	0	0	1
"@Override public void Func1(ServletContext var1) throws ServletException { this.var1 = var1; var1.setSessionTrackingModes(Collections.singleton(SessionTrackingMode.COOKIE)); var1.addListener(new WelcomeContainerBootstrap()); var1.addListener(new CockpitContainerBootstrap()); var1.addListener(new AdminContainerBootstrap()); var1.addListener(new TasklistContainerBootstrap()); registerFilter(""Authentication Filter"", AuthenticationFilter.class, ""/*""); registerFilter(""Security Filter"", LazySecurityFilter.class, singletonMap(""configFile"", securityConfigFile), ""/*""); registerFilter(""Engines Filter"", LazyProcessEnginesFilter.class, ""/app/*""); registerFilter(""CacheControlFilter"", CacheControlFilter.class, ""/api/*""); registerServlet(""Cockpit Api"", CockpitApplication.class, ""/api/cockpit/*""); registerServlet(""Admin Api"", AdminApplication.class, ""/api/admin/*""); registerServlet(""Tasklist Api"", TasklistApplication.class, ""/api/tasklist/*""); registerServlet(""Engine Api"", EngineRestApplication.class, ""/api/engine/*""); } "	0	0	0	0	1	0
private void Func1(ChartSeries var1, boolean var2) { initChart(); Series var3 = null; Optional<ChartSeries> var4 = Iterables.tryFind(dataSeriesMap.values(), s -> s.getParameterId().equals(var1.getParameterId())); if (var4.isPresent()) { var3 = chartSeriesMap.get(dataSeriesMap.inverse().get(var4.get())); } else { var3 = chart.createSeries(); chartSeriesMap.put(var3.getId(), var3); dataSeriesMap.put(var3.getId(), var1); } var3 .setName(var1.getName()) .setPoints(var1.getValues()) .setYAxis(getYAxisIndex(var1)); if (!var4.isPresent()) { chart.addSeries(var3, var2, true); } } 	0	0	0	0	0	1
"public Object Func1(String var1) throws Exception { JSONObject var2 = new JSONObject(); var2.put(""sessionId"", driver.getSessionId()); var2.put(""elementId"", driver.getElementId()); var2.put(""var1"", var1); Object var3 = (JSONObject) utils.request(""GET"", DriverCommand.GET_ELEMENT_PROPERTY, var2); return var3; } "	0	0	1	1	1	0
"public void Func1(OFMessage var1, FloodlightContext var2){ if(ofcch == null){ return; } log.debug(""Proxy Handling message of type: "" + var1.getType()); int var3 = var1.getXid(); switch(var1.getType()){ case PACKET_IN: OFPacketIn var4 = (OFPacketIn) var1; OFMatch var5 = new OFMatch(); if(var4.getPacketData().length <= 0){ log.debug(""No Packet data not slicing""); return; } var5.loadFromPacket(var4.getPacketData(),var4.getInPort()); OFFlowMod var6 = new OFFlowMod(); var6.setMatch(var5); List <OFFlowMod> var7 = this.mySlicer.allowedFlows(var6); if(var7.size() == 0){ log.debug(""Packet in Not var7 for slice: ""+this.mySlicer.getSliceName()); return; } if(this.packetInRate.okToProcess()){ this.mySlicer.addBufferId(var4.getBufferId(), var4.getPacketData()); if(this.mySlicer.getTagManagement()){ log.debug(""Processing Packet in for Managed Tag mode""); Ethernet var8 = new Ethernet(); byte[] var9 = var4.getPacketData(); var8.deserialize(var9,0,var9.length); var8.setEtherType(var8.getEtherType()); var8.setVlanID(Ethernet.VLAN_UNTAGGED); byte[] var10 = var8.serialize(); var4.setPacketData(var10); var4.setTotalLength((short) var10.length); } break; }else{ log.warn(""Packet in Rate for Slice: "" + this.getSlicer().getSliceName() + "":"" + this.getSlicer().getSwitchName() + "" has passed the packet in rate limit Disabling slice!!!!""); this.setAdminStatus(false); return; } case PORT_STATUS: OFPortStatus var11 = (OFPortStatus)var1; OFPhysicalPort var12 = var11.getDesc(); if(!this.mySlicer.isPortPartOfSlice(var12.getName())){ log.debug(""Port status even for switch"" + this.getSlicer().getSwitchName() + "" var12 "" + var12.getName() + "" is not var7 for slice""+this.mySlicer.getSliceName()); return; } switch(OFPortReason.fromReasonCode(var11.getReason())){ case OFPPR_ADD: this.mySlicer.setPortId(var12.getName(), var12.getPortNumber()); break; case OFPPR_MODIFY: break; case OFPPR_DELETE: break; } break; case ERROR: if(xidMap.containsKey(var3)){ var1.setXid(xidMap.get(var3)); xidMap.remove(var3); OFError var13 = (OFError) var1; OFMessage var14 = null; try{ var14 = var13.getOffendingMsg(); } catch (MessageParseException e) { log.var13(""Unable to parse var13's offending message""); break; } if(var14 == null){ break; } switch(var14.getType()){ case FLOW_MOD: OFFlowMod var15 = (OFFlowMod) var14; switch(var15.getCommand()){ case OFFlowMod.OFPFC_ADD: this.flowCount--; break; case OFFlowMod.OFPFC_DELETE: this.flowCount++; break; case OFFlowMod.OFPFC_DELETE_STRICT: this.flowCount++; break; default: break; } break; default: break; } }else{ return; } break; case FLOW_REMOVED: OFFlowRemoved var16 = (OFFlowRemoved) var1; OFFlowMod var15 = new OFFlowMod(); var15.setMatch(var16.getMatch()); List <OFFlowMod> var17 = mySlicer.allowedFlows(var15); if(var17.size() == 0){ return; } if(mySlicer.getTagManagement()){ var16.getMatch().setDataLayerVirtualLan((short)0); var16.getMatch().getWildcardObj().wildcard(Wildcards.Flag.DL_VLAN); var1 = var16; } this.flowCount--; break; case BARRIER_REPLY: if(xidMap.containsKey(var3)){ var1.setXid(xidMap.get(var3)); xidMap.removeToKey(var3); }else{ return; } break; case ECHO_REQUEST: return; default: log.debug(""Not Slicing message of Type: "" + var1.getType()); break; } try { ofcch.sendMessage(var1); } catch (IOException e) { e.printStackTrace(); } } "	0	0	0	0	0	1
"public void Func1(ActionEvent var1) { cardLayout1.show(panel, ""DAILYITEMS""); dailyItemsPanel.selectPanel(""DEFECTS""); setCurrentButton(defectsB); Context.put(""CURRENT_PANEL"", ""DEFECTS""); } "	0	0	1	0	1	0
@Override public void Func1(PlayerBase var1, float var2) { stateTime += var2; if (isDead()) { if (!explode) { stateTime = 0; explode = true; float var3, var4; if (enemyTookDamage) { var3 = direction == LEFT ? explodePosPaddingXLeft : explodePosPaddingXRight; var4 = this.var4; playerSound.playBulletHit(); } else { var3 = direction == LEFT ? noDamagePosPaddingXLeft : noDamagePosPaddingXRight; var4 = noDamagePosPaddingY; playerSound.playAttackNoDamage(); } pos.x += var3; pos.y += var4; } if (enemyTookDamage) { currentFrame = explodeAnimation.getKeyFrame(stateTime, false); } else { currentFrame = explodeNoDamageAnimation.getKeyFrame(stateTime, false); } if (explodeAnimation.isAnimationFinished(stateTime)) { shouldBeRemoved = true; } } else { if (stateTime <= muzzleToBulletTime) { posPadding = getBulletPositionPadding(var1, direction, var1.currentFrameIndex()); pos.x = var1.mapCollisionBounds.x + posPadding.x; pos.y = var1.mapCollisionBounds.y + posPadding.y; mapCollisionBounds.x = pos.x; mapCollisionBounds.y = pos.y; } else { pos.x += vel.x * var2; vel.x = 8 * direction; mapCollisionBounds.x = pos.x; currentFrame = animation.getKeyFrame(stateTime, true); } } if (stateTime <= muzzleTime && !explode) {// && var1.state != PlayerState.Idle) { muzzleFrame = muzzleAnimation.getKeyFrame(stateTime, false); if (var1.direction != playerStartDirection) { stopUpdatingMuzzlePos = true; } if (!stopUpdatingMuzzlePos) { posPadding = getMuzzlePositionPadding(var1, var1.currentFrameIndex()); muzzlePos.x = var1.mapCollisionBounds.x + posPadding.x; muzzlePos.y = var1.mapCollisionBounds.y + posPadding.y; } } else { muzzleFrame = null; } } 	0	0	1	1	0	0
"public final int Func1(final Workbook var1, final Map<String, Object> var2) { try { clearWorkbook(); if (!(var1 instanceof XSSFWorkbook)) { LOG.fine( ""Web Form Func1 Error: Not supported format. Only support xlsx now.""); return -1; } LOG.info(""Begin load work book...""); parent.setWb(var1); parent.getSerialDataContext().setDataContext(var2); parent.setSheetConfigMap( new ConfigurationHandler(parent).buildConfiguration()); parent.reCalcMaxColCounts(); parent.getChartHelper().loadChartsMap(); parent.getPicHelper().loadPicturesMap(); initSheet(); initTabs(); if (!parent.getTabs().isEmpty()) { loadWorkSheet(parent.getTabs().get(0).getTitle()); } } catch (Exception e) { LOG.log(Level.FINE, ""Web Form Func1 Error Exception = "" + e.getLocalizedMessage(), e); return -1; } return 1; } "	0	0	1	0	1	0
"@Override public void Func1(@NotNull final ParserRuleContext var1) { s.append(multiply("".\t"", indent)); s.append(GroovyParser.ruleNames[var1.getRuleIndex()] + "": {""); s.append(""\n""); indent = indent++; } "	0	0	0	1	0	0
"@Override public void Func1(@NotNull TerminalNode var1) { s.append(multiply("".\t"", indent)); s.append(String.valueOf(var1)); s.append(""\n""); } "	0	0	1	1	0	0
"@Override public void Func1(@NotNull Parser var1, @NotNull DFA var2, int var3, int var4, boolean var5, BitSet var6, @NotNull ATNConfigSet var7) { log.fine(""Ambiguity at "" + var3 + "" - "" + var4); } "	0	0	0	0	0	1
"@Test public void Func1() { initTestEnvironment(); addTask(); String var1 = ""add invalid deadline date by nowhere""; Success var2 = commandParser.parseCommand(var1); assertFalse(!var2.isSuccess()); } "	0	0	1	0	1	0
"public void Func1(final String var1) { String var2 = var1.trim(); var2 = var2.replace(S_ENTITY_LT, S_OPEN_ANGLE); var2 = var2.replace(S_ENTITY_GT, S_CLOSE_ANGLE); if (DEBUG_LOGGING_ASSEMBLY) { logger.debug(""Func1: '{}'"", var2); } if (S_HASH.equals(previousLine) && var2.startsWith(""{method}"")) { if (DEBUG_LOGGING_ASSEMBLY) { logger.debug(""fixup mangled {method} var2""); } var2 = S_HASH + S_SPACE + var2; } if (var2.startsWith(NATIVE_CODE_START)) { if (DEBUG_LOGGING_ASSEMBLY) { logger.debug(""Assembly started""); } assemblyStarted = true; if (builder.length() > 0) { complete(); } } else if (assemblyStarted) { boolean var3 = false; var3 = var2.startsWith(NATIVE_CODE_METHOD_MARK); if (var3) { if (DEBUG_LOGGING_ASSEMBLY) { logger.debug(""Assembly method started""); } methodStarted = true; if (!var2.endsWith(S_ENTITY_APOS)) { if (DEBUG_LOGGING_ASSEMBLY) { logger.debug(""Method signature interrupted""); } methodInterrupted = true; } } else if (methodInterrupted && var2.endsWith(S_ENTITY_APOS)) { methodInterrupted = false; } if (methodStarted && var2.length() > 0) { builder.append(var2); if (!methodInterrupted) { builder.append(S_NEWLINE); } } } previousLine = var2; } "	0	0	0	0	1	0
public String Func1() { return getStyle(); } 	0	0	0	0	1	0
protected Element Func1(final Document var1, final List<Proposition> var2, final int var3) { final Proposition var4 = var2.get(var3); final Element var5 = var1.createElementNS(SvgConstants.NAMESPACE_SVG, SvgConstants.TAG_GROUP); double var6 = this.horizontalSpacing + this.labelWidth; if (this.labelWidth > 0) { var6 += this.horizontalSpacing; } final String var7; if (this.model.isLeftToRightOriented()) { var7 = this.numberToString(var6); } else { var7 = this.numberToString(-var6); } final Element var8 = var1.createElementNS(SvgConstants.NAMESPACE_SVG, SvgConstants.TAG_GROUP); var8.setAttribute(SvgConstants.ATT_GROUP_TRANSFORM, String.format(SvgConstants.VAL_GROUP_TRANSFORM_TRANSLATE_1, var7)); final double var9 = this.insertOriginText(var1, var8, var2, var3); final String var10 = var4.getSynTranslation(); double var11; if (var10 == null || var10.isEmpty()) { var11 = 0; } else { var11 = this.getTextBounds(var10, this.labelFontPlain).getWidth(); } final Element var12 = this.createTranslationElement(var1, var10, var11, this.propositionHeight); if (this.commentsIncluded) { for (final ClauseItem var13 : var4) { if (var13.getComment() != null && !var13.getComment().isEmpty()) { this.commentCounter++; } } if (var4.getComment() != null && !var4.getComment().isEmpty()) { final Element var14 = var1.createElementNS(SvgConstants.NAMESPACE_SVG, SvgConstants.TAG_DESCRIPTION); var14.setTextContent(var4.getComment()); var5.appendChild(var14); this.commentCounter++; final String var15 = ' ' + this.numberToString(this.commentCounter); final RectangularShape var16 = this.getTextBounds(var15, this.commentFont); final Element var17 = var1.createElementNS(SvgConstants.NAMESPACE_SVG, SvgConstants.TAG_TSPAN); var17.setAttribute(SvgConstants.ATT_TEXT_BASELINE_SHIFT, this.numberToString(this.translationHeight - var16.getHeight())); var17.setAttribute(SvgConstants.ATT_FONT_SIZE, this.numberToString(this.commentFont.getSize2D())); var17.setTextContent(var15); var12.appendChild(var17); var11 += var16.getWidth(); } } var8.appendChild(var12); var6 += Math.max(var9, var11) + this.horizontalSpacing; this.propositionExtentX = Math.max(this.propositionExtentX, var6 + this.horizontalSpacing + SvgConstants.BORDER_PROPOSITION); var5.appendChild(this.createPropositionBackground(var1, var6, this.propositionHeight)); var5.appendChild(this.createLabelElement(var1, var4.getLabel(), this.labelWidth, this.originTextBaseLine)); var5.appendChild(var8); return var5; } 	0	0	0	0	0	1
"public synchronized void Func1() { SilverTrace.info(""webPages"", ""WebPagesSessionController.unsubscribeFromNode()"", ""root.MSG_GEN_ENTER_METHOD""); getSubscribeBm().unsubscribe(new ComponentSubscription(getUserId(), getComponentName())); } "	0	0	0	1	1	0
"public synchronized void Func1() { SilverTrace.info(""webPages"", ""WebPagesSessionController.Func1()"", ""root.MSG_GEN_ENTER_METHOD""); if (isSubscriber()) { return; } getSubscribeBm().subscribe(new ComponentSubscription(getUserId(), getComponentName())); } "	0	0	1	1	1	0
"@Override public void Func1(String var1) { confirmPasswordButton.setEnabled(true); Log.d(""HMB"", var1 + "" Login failed!""); } "	0	0	0	0	1	0
private Pair<BigDecimal, BigDecimal> Func1(PortfolioEntryResourcePlanAllocatedActor var1, TimesheetMap var2) { Long var3 = var1.portfolioEntryPlanningPackage != null ? var1.portfolioEntryPlanningPackage.id : null; BigDecimal var4 = new BigDecimal(var2.consumeByActor(var1.actor.id, var3)); BigDecimal var5 = var4.divide(TimesheetDao.getTimesheetReportHoursPerDay(), BigDecimal.ROUND_HALF_UP); BigDecimal var6 = var1.forecastDays.subtract(var5); if (var6.compareTo(BigDecimal.ZERO) < 0) { var6 = BigDecimal.ZERO; } BigDecimal var7 = var1.dailyRate.multiply(var5); BigDecimal var8 = var1.dailyRate.multiply(var6); return Pair.of(var8, var7); } 	0	0	0	0	1	0
"@NonNull protected Habit Func1(int var1) { long var2 = widgetPrefs.getHabitIdFromWidgetId(var1); Habit var3 = habits.getById(var2); if (var3 == null) throw new RuntimeException(""var3 not found""); return var3; } "	0	0	0	0	1	0
"@Override public Package Func1(String var1) { if (""default"".equals(var1)) { var1 = """"; } Package var2 = getDirectPackage(var1); if (var2 != null) { return var2; } for (ModuleImport var3 : getImports()) { final Module var4 = var3.getModule(); var2 = var4.getDirectPackage(var1); if (var2 != null) { return var2; } for (ModuleImport var5 : var4.getImports()) { if (var5.isExport()) { var2 = var5.getModule().getDirectPackage(var1); } if (var2 != null) { return var2; } } } return null; } "	1	0	1	0	1	0
@Before public void Func1() throws FileNotFoundException { writerClient = DatabaseClientFactory.newClient(host, port, user, password, DatabaseClientFactory.Authentication.DIGEST); } 	0	0	0	0	1	0
public boolean Func1() { return ((bitField0_ & 0x00000002) == 0x00000002); } 	0	0	1	1	1	0
"@Override protected void Func1(int var1, int var2, Intent var3) { Point var4 = null; if (var1 == RC_BARCODE_CAPTURE) { if (var2 == CommonStatusCodes.SUCCESS) { if (var3 != null) { Barcode var5 = var3.getParcelableExtra(BarcodeCaptureActivity.BarcodeObject); Log.d(TAG, ""Barcode read: "" + var5.displayValue); } else { Log.d(TAG, ""No var5 captured, intent var3 is null""); } } else { Log.d(TAG, ""No var5 captured, result not success""); } } roomView.updateUserPosition(var4); } "	0	0	0	0	1	0
public static synchronized boolean Func1(Sign var1, ItemStack var2, int var3) { Block var4 = var1.getLocation().getBlock().getRelative(BlockFace.DOWN); if(!var4.getType().equals(Material.CHEST)) return false; Chest var5 = (Chest) var4.getState(); Inventory var6 = var5.getInventory(); int var7 = var3; for(int var8 = 0; var8 < var6.getSize(); var8++) { if(var7 <= 0) break; if(var6.getItem(var8) == null || var6.getItem(var8).getType().equals(Material.AIR)) { ItemStack var9 = new ItemStack(var2); int var10 = (var7 > var2.getMaxStackSize()) ? var2.getMaxStackSize() : var7; var9.setAmount(var10); var6.setItem(var8, var9); var7 -= var10; } else if(var6.getItem(var8).getType().equals(var2.getType())) { ItemStack var11 = var6.getItem(var8); int var12 = var11.getMaxStackSize() - var11.getAmount(); if(var12 > 0) { ItemStack var9 = new ItemStack(var2); var9.setAmount(var11.getAmount() + ((var12 > var7) ? var7 : var12)); var6.setItem(var8, var9); var7 -= var12; } } } return true; } 	0	0	0	0	0	1
"private boolean Func1( PageCursor var1 ) throws IOException { boolean var2; long var3 = -1; do { var2 = node.var2( var1 ); if ( var2 ) { var3 = mainContent.childAt( var1, 0, stableGeneration, unstableGeneration ); } } while ( var1.shouldRetry() ); if ( var2 ) { node.goTo( var1, ""child"", var3 ); } return var2; } "	0	0	0	0	1	0
"@Action(value = ""auth"", results = { @Result(name = ""success"", type = ""redirectAction"", location = ""home""), @Result(name = ""login"", location = ""/WEB-INF/views/var1/login.jsp"") }) public String Func1() { if (username == null || password == null) { return LOGIN; } User var1 = userService.loadByNameAndPwd(username, password); if (var1 == null || var1.getIsAdmin() == UserConst.IS_NOT_ADMIN) { addActionError(Message.USER_OR_PASSWORD_WRONG); return LOGIN; } Map<String, Object> var2 = ServletActionContext.getContext().getSession(); var2.put(""var1"", var1); return SUCCESS; } "	1	1	1	1	1	0
"protected boolean Func1( String var1 ) { return var1.endsWith( "";"" ); } "	0	0	0	0	0	1
"protected Map<String,Object> Func1( Session var1 ) throws ShellException { try { NodeOrRelationship var2 = getCurrent( var1 ); var1.set( ""var2"", var2.isNode() ? var2.asNode() : var2.asRelationship() ); } catch ( ShellException e ) { // OK, current didn't exist } return var1.asMap(); } "	0	0	0	0	0	1
"public Appointment[] Func1() { SQLiteDatabase var1 = this.getWritableDatabase(); Date var2 = getToday(); Date var3 = var2; Date var4 = parseDate(formatDate(var2, ""ddMMyyyy""), ""ddMMyyyy""); var4 = addHours(var4, 23); var4 = addMinutes(var4, 59); Integer var5 = parseInt(formatDate(var3, ""1MMddHHmm"")); Integer var6 = parseInt(formatDate(var4, ""1MMddHHmm"")); String var7 = ""SELECT * FROM "" + TABLE_CALENDAR + "" WHERE "" + KEY_FORMATTED_START_2 + "" <= "" + var6 + "" AND "" + KEY_FORMATTED_END_2 + "" >= "" + var5; Log.d(TAG, ""Func1: var7: "" + var7); Cursor var8 = var1.rawQuery(var7, null); Appointment[] var9 = new Appointment[var8.getCount()]; int var10 = 0; if (var8 != null) { if (var8.moveToFirst()) { do { Appointment var11 = new Appointment(); var11.id = var8.getInt(var8.getColumnIndex(KEY_CALENDAR_ID)); var11.startDate = DateUtils.parseDate(var8.getString(var8.getColumnIndex(KEY_FORMATTED_START_2)), ""1MMddHHmm""); var11.description = var8.getString(var8.getColumnIndex(KEY_DESC)); var11.type = AppointmentType.getTypeById(var8.getInt(var8.getColumnIndex(KEY_TYPE))); var11.location = var8.getString(var8.getColumnIndex(KEY_LOCATION)); var11.periodFrom = var8.getInt(var8.getColumnIndex(KEY_PERIOD_FROM)); var9[var10] = var11; var10++; } while (var8.moveToNext()); } } var8.close(); return var9; } "	0	0	0	0	1	0
public static <A> Show<V6<A>> Func1(final Show<A> var1) { return streamShow(var1).comap(V6.<A>toStream_()); } 	0	0	1	1	1	0
public static <A> Show<V3<A>> Func1(final Show<A> var1) { return streamShow(var1).comap(V3.<A>toStream_()); } 	0	0	1	1	1	0
"public static <A> Show<Stream<A>> Func1(final Show<A> var1) { return show(as -> join(as.map(var1.show_()).intersperse(fromString("","")).cons(fromString(""<"")).snoc(p(fromString("">""))))); } "	0	0	0	0	1	0
public static <E, L extends HList<L>> Show<HList.HCons<E, L>> Func1(final Show<E> var1, final Show<L> var2) { return show(c -> var1.show(c.head()).cons('[').append(var2.show(c.tail())).snoc(']')); } 	0	0	0	0	1	0
public void Func1(){ for( LabeledRectangle var1 : getSelectedRectangles(sourceComponents)){ for(LabeledRectangle var2 :  getSelectedRectangles(targetComponents)){ makeMapSourceToTarget(var1,var2); } } } 	0	0	0	0	1	0
public void Func1(Database var1) { this.var1 = var1; } 	0	0	0	0	1	0
public void Func1(MappableItem var1, MappableItem var2) { Iterator<ItemToItemMap> var3 = sourceToTargetMaps.var3(); while (var3.hasNext()) { ItemToItemMap var4 = var3.next(); if (var4.getSourceItem().equals(var1) && var4.getTargetItem().equals(var2)) var3.remove(); } } 	0	0	0	0	1	0
public boolean Func1(Object var1) { if (var1 instanceof ItemToItemMap) { return (((ItemToItemMap) var1).sourceItem.Func1(sourceItem) && ((ItemToItemMap) var1).targetItem.Func1(targetItem)); } else return false; } 	0	0	0	0	1	0
"@Test(expectedExceptions = { JobPersistenceException.class }) public void Func1() throws ObjectAlreadyExistsException, JobPersistenceException { OperableTrigger var1 = (OperableTrigger) TriggerBuilder.newTrigger().withIdentity(""tKey1"", ""group"").build(); jobStore.storeTrigger(var1, false); } "	0	0	1	0	1	0
public void Func1() { isSendingInError.onNext(false); } 	0	0	0	0	1	0
public void Func1() { this.mappingFileWriter.Func1(); } 	0	0	0	0	1	0
"private TweetsAndRetweets Func1(Statement var1, boolean var2) { String var3 = ""SELECT SUM(Counter), Day FROM var6 JOIN final ON var6.AccountId=final.val JOIN day ON var6.DayId=Day.Id GROUP BY DayId;""; String var4 = ""SELECT SUM(Counter) FROM var6 JOIN final ON var6.AccountId=final.val;""; ResultSet var5 = null; runningRequest = true; try { var1.executeBatch(); var5 = var1.executeQuery(var2 ? var3 : var4); } catch (SQLException e) { sqlExceptionLog(e, var1); } finally { runningRequest = false; } List<Tweets> var6 = new ArrayList<Tweets>(); if (var5 != null) { try { while (var5.next()) { var6.add(new Tweets((var2 ? var5.getDate(""Day"") : null), var5.getInt(1))); } } catch (SQLException e) { sqlExceptionResultLog(e); } finally { closeResult(var5); } } TweetsAndRetweets var7 = new TweetsAndRetweets(); var7.var6 = var6; var7.retweets = getRetweetSum(var1, var2); return var7; } "	0	0	1	1	1	0
"private boolean Func1(Row var1, Occurrence var2, Shepherd var3, ArrayList<String> var4) { String var5 = null; TissueSample var6 = null; try { if (var2 != null) { try { var6 = new TissueSample("""", var5 ); try { if (!var3.getPM().currentTransaction().isActive()) { var3.beginDBTransaction(); } String var7 = null; String var8 = null; String var9 = null; var4.remove(""Permit""); if (var1.get(""Permit"") != null) { var7 = var1.getString(""Permit"").toString(); var6.setPermit(var7); } var4.remove(""Sample_ID""); if (var1.get(""Sample_ID"") != null) { var9 = var1.get(""Sample_ID"").toString(); if (var9.toLowerCase().contains(""miss"")) { var6.setState(""Miss""); } if (var9.toLowerCase().contains(""hit no sample"")) { var6.setState(""Hit - No Sample""); } else { var6.setState(""Sampled""); } } processTags(var1, var3, var2); var4.remove(""DTAG_ID""); var4.remove(""SatTag_ID""); processRemainingColumnsAsObservations(var6, var4, var1); if (var1.get(""Conf_sex"") != null) { var8 = var1.getString(""Conf_sex"").toString(); SexAnalysis var10 = new SexAnalysis(Util.generateUUID(), var8,var2.getPrimaryKeyID(),var9); var3.getPM().makePersistent(var10); var3.commitDBTransaction(); var3.beginDBTransaction(); var6.addGeneticAnalysis(var10); } var3.getPM().makePersistent(var6); var3.commitDBTransaction(); var3.beginDBTransaction(); var2.addBaseTissueSample(var6); var4.remove(""Conf_sex""); } catch (Exception e) { e.printStackTrace(); out.println(""\n Failed to save created tissue sample to occurrence.""); } var3.commitDBTransaction(); System.out.println(""Created a Tissue Sample for Occ""+var2.getPrimaryKeyID()); return true; } catch (Exception e) { e.printStackTrace(); out.println(""\nFailed to make the tissue sample.""); } } } catch (Exception e) { out.println(""\nFailed to validate Occ ID : ""+var2.getPrimaryKeyID()+"" and var9 : ""+var5+"" for TissueSample creation.""); } var2.getBaseTissueSampleArrayList().toString(); return false; } "	0	0	0	0	1	0
"protected void Func1(List<Geometry> var1, MeshHelper var2) { LOGGER.fine(""Preparing faces geometries.""); this.triangulate(); Vector3f[] var3 = new Vector3f[3]; Vector3f[] var4 = new Vector3f[3]; byte[][] var5 = new byte[3][]; List<Map<Float, Integer>> var6 = new ArrayList<Map<Float, Integer>>(3); LOGGER.log(Level.FINE, ""Appending {0} faces to var20 buffers."", faces.size()); Map<Integer, MeshBuffers> var7 = new HashMap<Integer, MeshBuffers>(); for (Face var8 : faces) { MeshBuffers var9 = var7.get(var8.getMaterialNumber()); if (var9 == null) { var9 = new MeshBuffers(var8.getMaterialNumber()); var7.put(var8.getMaterialNumber(), var9); } List<List<Integer>> var10 = var8.getCurrentIndexes(); List<byte[]> var11 = var8.getVertexColors(); for (List<Integer> var12 : var10) { assert var12.size() == 3 : ""The var20 has not been properly triangulated!""; var6.clear(); for (int var13 = 0; var13 < 3; ++var13) { int var14 = var12.get(var13); var3[var13] = vertices.get(var14); var4[var13] = normals.get(var14); var5[var13] = var11 != null ? var11.get(var13) : null; if (boneIndexes.size() > 0) { Map<Float, Integer> var15 = new HashMap<Float, Integer>(); Map<String, Float> var16 = vertexGroups.get(var14); for (Entry<String, Integer> var17 : boneIndexes.entrySet()) { if (var16.containsKey(var17.getKey())) { var15.put(var16.get(var17.getKey()), var17.getValue()); } } var6.add(var15); } } Map<String, List<Vector2f>> var18 = var2.selectUVSubset(var8, var12.toArray(new Integer[var12.size()])); var9.append(var8.isSmooth(), var3, var4, var18, var5, var6); } } LOGGER.fine(""Converting var20 buffers to geometries.""); Map<Geometry, MeshBuffers> var19 = new HashMap<Geometry, MeshBuffers>(); for (Entry<Integer, MeshBuffers> var17 : var7.entrySet()) { MeshBuffers var9 = var17.getValue(); Mesh var20 = new Mesh(); if (var9.isShortIndexBuffer()) { var20.setBuffer(Type.Index, 1, (ShortBuffer) var9.getIndexBuffer()); } else { var20.setBuffer(Type.Index, 1, (IntBuffer) var9.getIndexBuffer()); } var20.setBuffer(var9.getPositionsBuffer()); var20.setBuffer(var9.getNormalsBuffer()); if (var9.areVertexColorsUsed()) { var20.setBuffer(Type.Color, 4, var9.getVertexColorsBuffer()); var20.getBuffer(Type.Color).setNormalized(true); } BoneBuffersData var21 = var9.getBoneBuffers(); if (var21 != null) { var20.setMaxNumWeights(var21.maximumWeightsPerVertex); var20.setBuffer(var21.verticesWeights); var20.setBuffer(var21.verticesWeightsIndices); LOGGER.fine(""Generating bind pose and normal buffers.""); var20.generateBindPose(true); var20.getBuffer(Type.Position).setUsage(Usage.Stream); var20.getBuffer(Type.Normal).setUsage(Usage.Stream); VertexBuffer var22 = new VertexBuffer(Type.HWBoneWeight); VertexBuffer var23 = new VertexBuffer(Type.HWBoneIndex); var20.setBuffer(var22); var20.setBuffer(var23); } Geometry var24 = new Geometry(name + (var1.size() + 1), var20); if (properties != null && properties.getValue() != null) { var2.applyProperties(var24, properties); } var1.add(var24); var19.put(var24, var9); } LOGGER.fine(""Applying materials to geometries.""); for (Entry<Geometry, MeshBuffers> var17 : var19.entrySet()) { int var25 = var17.getValue().getMaterialIndex(); Geometry var24 = var17.getKey(); if (var25 >= 0 && materials != null && materials.length > var25 && materials[var25] != null) { materials[var25].applyMaterial(var24, meshStructure.getOldMemoryAddress(), var17.getValue().getUvCoords(), blenderContext); } else { var24.setMaterial(blenderContext.getDefaultMaterial()); } } } "	0	0	0	0	0	1
"private byte[] Func1(final String var1) { LOG.debug(""Gzipping the var1....""); try { final ByteArrayOutputStream var2 = new ByteArrayOutputStream(); final OutputStream var3 = new GZIPOutputStream(new BufferedOutputStream(var2)); IOUtils.copy(new ByteArrayInputStream(var1.getBytes()), var3); var3.close(); return var2.toByteArray(); } catch (final IOException e) { throw new WroRuntimeException(""Problem while computing gzipped var1"", e).logError(); } }; "	0	0	0	0	1	0
"@Test(expected = NotFound.class) public void Func1() throws Exception { String var1 = ""api_,test3""; cloudinary.uploader().upload(SRC_TEST_IMAGE, ObjectUtils.asMap(""var1"", var1, ""tags"", UPLOAD_TAGS)); Map var2 = api.var2(var1, ObjectUtils.emptyMap()); assertNotNull(var2); api.deleteResources(Arrays.asList(API_TEST_2, var1), ObjectUtils.emptyMap()); api.var2(var1, ObjectUtils.emptyMap()); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { setUp(""JdbcOutboundGatewayWithPollerTest-context.xml"", getClass()); PollingConsumer var1 = this.context.getBean(""jdbcOutboundGateway"", PollingConsumer.class); DirectFieldAccessor var2 = new DirectFieldAccessor(var1); Object var3 = var2.getPropertyValue(""handler""); var2 = new DirectFieldAccessor(var3); var3 = var2.getPropertyValue(""var4""); MessagingTemplate var4 = (MessagingTemplate) var3; var2 = new DirectFieldAccessor(var4); Long  var5 = (Long) var2.getPropertyValue(""var5""); assertEquals(""Wrong var5"", Long.valueOf(444L),  var5); } "	0	0	1	0	0	0
"public List<String> Func1() { List<String> var1 = new LinkedList<String>(); while (!isEmpty()) { skip(' '); char var2 = peek(); switch (var2) { case '$': var1.add(Character.toString(var2)); poll(); break; case '.': poll(); if (peek() == '.') { poll(); var1.add(""..""); assertNotInvalidPeek('.'); } break; case '[': var1.add(extract(true, ']')); break; default: var1.add(extract(false, '[', '.')); } } return var1; } "	1	0	1	1	1	0
"public String Func1(ICS var1) { bind(var1); if (var1.GetErrno() != 0) { var1.ClearErrno(); } preExecute(var1); if (LOG.isTraceEnabled()) { StringBuffer var2 = new StringBuffer(""About to Func1 runTag for tag: "" + tagName + "".  ""); var2.append(""\nInput param list:""); for (Object var3 : list.keySet()) { String var4 = (String) var3; var2.append(""\n\t"").append(var4).append(""="") .append(isPW(var4) ? ""<password suppressed>"" : list.getValString(var4)); } var2.append(""\nVariables:""); Enumeration<?> var5 = var1.GetVars(); while (var5.hasMoreElements()) { String var4 = (String) var5.nextElement(); var2.append(""\n\t"").append(var4).append(""="").append(isPW(var4) ? ""<password suppressed>"" : var1.GetVar(var4)); } var2.append(""\nSession Variables:""); var5 = var1.GetSSVars(); while (var5.hasMoreElements()) { String var4 = (String) var5.nextElement(); var2.append(""\n\t"").append(var4).append(""="") .append(isPW(var4) ? ""<password suppressed>"" : var1.GetSSVar(var4)); } LOG.trace(var2.toString()); } String var6 = var1.runTag(tagName, list); if (LOG.isTraceEnabled()) { StringBuffer var2 = new StringBuffer(""Just completed execution of runTag for tag: "" + tagName + "".  ""); var2.append(""\nInput param list:""); for (Object var3 : list.keySet()) { String var4 = (String) var3; var2.append(""\n\t"").append(var4).append(""="") .append(isPW(var4) ? ""<password suppressed>"" : list.getValString(var4)); } var2.append(""\nVariables:""); Enumeration<?> var5 = var1.GetVars(); while (var5.hasMoreElements()) { String var4 = (String) var5.nextElement(); var2.append(""\n\t"").append(var4).append(""="").append(isPW(var4) ? ""<password suppressed>"" : var1.GetVar(var4)); } var2.append(""\nSession Variables:""); var5 = var1.GetSSVars(); while (var5.hasMoreElements()) { String var4 = (String) var5.nextElement(); var2.append(""\n\t"").append(var4).append(""="") .append(isPW(var4) ? ""<password suppressed>"" : var1.GetSSVar(var4)); } LOG.trace(var2.toString()); } postExecute(var1); if (var1.GetErrno() < 0) { this.handleError(var1); } return var6; } "	0	0	0	0	0	1
"private void Func1(Throwable var1, final int var2, final long var3) { if (FileDownloadLog.NEED_LOG) { FileDownloadLog.d(this, ""On retry %d %s %d %d"", getId(), var1, var2, autoRetryTimes); } var1 = exFiltrate(var1); helper.updateRetry(getId(), var1.getMessage(), var2, var3); transferModel.setThrowable(var1); transferModel.setRetryingTimes(var2); onStatusChanged(model.getStatus()); } "	1	0	1	0	1	0
private void Func1(ItemStack var1,EntityPlayer var2) { if (var1==null || !(var1.getItem() instanceof ItemGemBag)) { return; } ItemStack[] var3 = ItemGemBag.getStacksFromNBT(var1); boolean var4 = false; for (int var5=0;var5<var2.var6.getSizeInventory();var5++) { if (var5 == var2.var6.currentItem) { continue; } ItemStack var6 = var2.var6.getStackInSlot(var5); if (var6!=null && var6.getItem()== ModItems.gem && var6.var10>0 && var6.getItemDamage()<32) { int var7 = var6.getItemDamage(); ItemStack var8 = var3[var7]; if (var8==null) { var3[var7] = var6.copy(); var2.var6.setInventorySlotContents(var5,null); var4 = true; } else { int var9 = var8.var10; int var10 = var6.var10; int var11 = 64 - var9; int var12 = Math.min(var11,var10); if (var12>0) { var8.var10 += var12; var6.var10 -= var12; if (var6.var10 == 0) { var2.var6.setInventorySlotContents(var5,null); } var4 = true; } } } } if (var4) { ItemGemBag.setStackNBT(var1,var3); } } 	0	0	0	0	1	0
"private static boolean Func1() { return System.getProperty(""os.name"").contains(""win""); } "	0	0	1	0	1	0
"static List<Item> Func1(Handle var1, QueryParamsMap var2) { String var3 = SELECT + ""where in_archive='1' order by name var4 ? var5 ?""; int var4 = Backrest.limitFromParam(var2); int var5 = Backrest.offsetFromParam(var2); return var1.createQuery(var3) .bind(0, var4).bind(1, var5) .map(new ItemMapper(var1, null)).list(); } "	0	0	0	0	1	0
"private CodeBlock.Builder Func1() { return CodeBlock.builder().add(""SmartRouters.register(REGISTER_INSTANCE)""); } "	0	0	0	0	1	0
"private MethodSpec.Builder Func1() { return MethodSpec.Func1() .addParameter( this.createNonNullParameter( TypeName.get(String.class), ""host"", Modifier.FINAL ) ) .addCode(""super(host)""); } "	0	0	1	0	0	0
"public boolean Func1(String var1) { boolean var2 = false; try (Connection conn = db.getDBConnection(); Statement stm = conn.createStatement(); ResultSet rs = stm.executeQuery(""select * from registered_users where username='"" + var1 + ""'"");) { System.out.println(""connected to db""); if (rs.next()) { var2 = false; accountType = rs.getString(""account_type""); } else { var2 = true; } } catch (SQLException ex) { ex.printStackTrace(); } return var2; } "	0	0	0	0	0	1
@Override protected void Func1() { Robot.instance.climber.lockServo.setAngle(ClimberConfig.lockServoLockPosition); } 	0	0	1	0	1	0
"public void Func1() throws AlreadyExistsException{ UserListController var1 = new UserListController(); var1.addUser(""user1""); assertTrue(""wrong number"", UserListController.getUserList().size() > 0); assertTrue(""not correct user"", UserListController.getUserList().contains(""user1"")); } "	0	0	0	0	1	0
"public void Func1() { try { HttpResponse<JsonNode> var1 = Unirest .post(Config.getInstance().getApiUrl() + ""/user/token/"") .header(""accept"", ""*/*"") .queryString(""username"", username) .field(""password"", password) .asJson(); JSONObject var2 = var1.getBody().getObject(); if (var2.optInt(""code"", -1) == 200) { jwtToken = var2.getString(""message""); } else { log.warn(""Login failed.""); } } catch (UnirestException e) { log.warn(""Login error: "" + e.getMessage()); } } "	0	0	0	0	0	1
"private void Func1(Household var1, Member var2, ArrayList<String> var3) { if(var1.getSelectedMemberId() == null || var1.getSelectedMemberId().equals("""") || var1.getSelectedMemberId().equals(String.valueOf(var2.getId()))) var3.add(var1.getStatus().toString()); else { var3.add(SURVEY_NOT_SELECTED); } } "	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") @Override public List<EvaluatedResource> Func1() { return getSession().createQuery(""SELECT e FROM EvaluatedResource e"").list(); } "	0	0	0	0	1	0
public Retriever Func1() { final String var1 = orderBy == null ? null : orderBy.getOrderByString(); final FSSelection var2 = finder == null ? new FSSelection.SelectAll() : finder.var2(); final FSQueryable<U, R> var3 = infoFactory.createQueryable(lookupResource); if (!addedThisProjection) { projections.add(finder == null ? projection() : finder.projection()); addedThisProjection = true; } return joins.size() == 0 ? var3.query(projection(), var2, var1) : var3.query(joins, projections, var2, var1); } 	1	0	0	0	0	0
"@Override public String Func1(String var1) { var1 = var1.trim().replace("" "", """"); int var2 = var1.indexOf(""****""); if (var2 < 1) return """"; return var1.substring(0, var2); } "	1	0	1	0	1	0
"private void Func1(List<Integer> var1, FeatureTreeNode var2) throws FeaturesTreeNodeException { for (int var3 = 0; var3 < var1.size(); ++var3) { FeatureTreeNode var4 = FeatureTreeNode.newChildInstance(""var4"", var2); var4.addAttribute(""number"", String.valueOf(var3)); var4.addAttribute(""value"", String.valueOf(var1.get(var3))); } } "	0	0	0	0	0	1
@Override public boolean Func1() { return AngularCorePreferencesSupport.getInstance() .isDirectiveStartsWithX(project); } 	0	0	1	0	0	0
@Override public void Func1(QNetwork var1) { if (items.contains(itemMap.get(var1))) items.Func1(items.indexOf(itemMap.get(var1))); } 	1	1	1	0	1	0
"public void Func1(final WebRootDef var1, boolean var2) { logger.info("" Loaded WebRootDef = {}"", var1.dump()); if (var2) { putItem(TETRAPOD_WEBROOT_PREFIX + var1.name, (byte[]) var1.toRawForm(TempBufferDataSource.forWriting())); } webRootDefs.put(var1.name, var1); if (var1.file != null) { Util.runThread(""Installing WebRoot"" + var1.name, new Runnable() { public void Func2() { install(var1); } }); } } "	0	0	0	0	0	1
public static TagInfoDBHelper Func1(Context var1) { return new TagInfoDBHelper(var1, DATABASE_NAME, null, DATABASE_VERSION); } 	1	0	1	1	1	0
public static PeriodDBHelper Func1(Context var1){ return new PeriodDBHelper(var1,DATABASE_NAME,null,DATABASE_VERSION); } 	1	0	1	1	1	0
"@SuppressWarnings(""unchecked"") protected QB Func1(QB var1) throws IOException { try (BytesStreamOutput output = new BytesStreamOutput()) { output.writeNamedWriteable(var1); try (StreamInput in = new NamedWriteableAwareStreamInput(output.bytes().streamInput(), serviceHolder.namedWriteableRegistry)) { return (QB) in.readNamedWriteable(QueryBuilder.class); } } } "	0	0	0	0	0	1
"private synchronized void Func1() throws MarkLogicSesameException { log.debug(""flushing write cache""); ByteArrayOutputStream var1 = new ByteArrayOutputStream(); RDFFormat var2 = RDFFormat.NQUADS; try { Rio.write(cache, var1, var2); InputStream var3 = new ByteArrayInputStream(var1.toByteArray()); Resource[] var4 = new Resource[cache.var4().size()]; int var5 =0; for(Resource var6:cache.var4()){ var4[var5]= var6; var5++; } client.sendAdd(var3, null, var2, var4); } catch (RDFHandlerException e) { e.printStackTrace(); } catch (RDFParseException e) { e.printStackTrace(); } lastCacheAccess = new Date(); cache.clear(); } "	0	0	1	1	0	0
"@RequestMapping(""/addUserToProject.htm"") public ModelAndView Func1(HttpSession var1, @RequestParam String var2) { int var3 = 0; boolean var4 = false; try { checkInvalidSession(var1); Project var5 = this.loadCurrentProject(var1); var4 = testRight(var1, Right.Update_Project); var3 = var5.getProjectID(); testRight(var1, Right.Invite_To_Project); User var6 = userDAO.getUserByEmail(var2); var5.addProjectUser(var6); projectDAO.updateProject(var5); var6.addProject(var5); userDAO.updateUser(var6); return new ModelAndView(""redirect:projectSettings.htm?id="" + var3); } catch (NoSuchUserException e) { return new ModelAndView(""redirect:projectSettings.htm?id="" + var3 + ""&error=1""); } catch (NoProjectFoundException | InsufficientRightsException e) { if(var4) { return new ModelAndView(""redirect:projectSettings.htm?id="" + var3); } return new ModelAndView(""redirect:projectOverview.htm""); } catch (InvalidSessionException e) { return new ModelAndView(""redirect:login.htm""); } } "	0	0	1	1	1	0
"private void Func1 () { setIconImage(Toolkit.getDefaultToolkit().getImage(this.getClass().getResource(""/image/logo_ftb.png""))); setTitle(I18N.getLocaleString(""PROFILEADDER_TITLE"")); setResizable(true); Container var1 = getContentPane(); MigLayout var2 = new MigLayout(); var1.setLayout(var2); usernameLbl = new JLabel(I18N.getLocaleString(""PROFILEADDER_USERNAME"")); username = new JTextField(16); passwordLbl = new JLabel(I18N.getLocaleString(""PROFILEADDER_PASSWORD"")); password = new JPasswordField(16); nameLbl = new JLabel(I18N.getLocaleString(""PROFILEADDER_NAME"")); name = new JTextField(16); add = new JButton(I18N.getLocaleString(""MAIN_ADD"")); usernameLbl.setLabelFor(username); passwordLbl.setLabelFor(password); nameLbl.setLabelFor(name); if (!updatecreds.equals("""")) { messageLbl = new JLabel(updatecreds); var1.add(messageLbl); } var1.add(usernameLbl); var1.add(username, GuiConstants.WRAP); var1.add(passwordLbl); var1.add(password, GuiConstants.WRAP); var1.add(add, ""center, wrap, span""); pack(); setLocationRelativeTo(getOwner()); } "	0	0	0	0	1	0
"public PagedList<Album> Func1(String var1, PagingParameters var2) { return graphApi.fetchConnections(var1, ""albums"", Album.class, getPagingParameters(var2)); } "	0	0	0	0	1	0
public void Func1(String var1) { this.var1 = var1; } 	0	0	0	0	1	0
"@Test public void Func1() throws Exception { Set<ObjectName> var1 = server.queryNames(new ObjectName(""test.MBeanRegistration:type=IntegrationMBeanExporter,name=integrationMbeanExporter,*""), null); assertEquals(1, var1.size()); var1 = server.queryNames(new ObjectName(""test.MBeanRegistration:*,name=testGateway""), null); assertEquals(server.toString(), 1, var1.size()); } "	0	0	0	0	1	0
private void Func1(Parcel var1, String var2) { var1.writeByte((byte)(var2 != null ? 1 : 0)); var1.writeString(var2); } 	1	0	0	0	1	0
"public static String Func1(ArrayList<Criteria> var1, Map<String, String> var2) throws ParseException { StringBuilder var3 = new StringBuilder(); for (String var4 : var2.keySet()) { var3 .append(""PREFIX "") .append(var4) .append("": <"") .append(var2.get(var4)) .append(""> ""); } var3 .append(""SELECT ?annotation "") .append(""WHERE {"") .append(""?annotation a oa:Annotation .""); SesameValueBackend var5 = new SesameValueBackend(); for (Criteria var6 : var1) { var3.append(""{ ""); LdPathParser var7 = new LdPathParser(var5, new StringReader(var6.getLdpath())); String var8 = LDPathEvaluator.Func1(var7.parseSelector(var2), var3, ""annotation""); if (var6.getConstraint() != null) { EvalComparison.Func1(var3, var6, var8); } var3.append(""}""); } var3.append(""}""); return var3.toString(); } "	0	0	1	0	0	0
"public void Func1() { Thread var1; synchronized (this) { var1 = thread; thread = null; } if (var1 == null) { throw new IllegalStateException(""not running""); } var1.interrupt(); while (true) { try { var1.join(); return; } catch (InterruptedException ignored) { } } } "	1	0	1	0	1	0
"public void Func1() { flameTextFieldChanged(data.saturationSlider, data.saturationREd, ""saturation"", TinaController.SLIDER_SCALE_BRIGHTNESS_CONTRAST_VIBRANCY, true); } "	0	0	1	1	1	0
"public void Func1() { flameTextFieldChanged(data.gammaSlider, data.gammaREd, ""gamma"", TinaController.SLIDER_SCALE_GAMMA, true); } "	0	0	1	1	1	0
"@Test public void Func1() throws Exception { ClassLoader var1 = Thread.currentThread().getContextClassLoader(); InputStream var2 = var1.getResourceAsStream(""excel/listStudents.xls""); ArrayList<AccountDto> var3 = excelReader.var3(var2); System.out.println(var3); assertThat(var3).isNotNull(); } "	0	0	0	0	1	0
@Override public void Func1() { selfRef.supportFinishAfterTransition(); } 	0	0	0	0	0	1
Observable<Row> Func1(List<String> var1) { return session.executeAndFetch(Func1.bind(var1)); } 	0	0	0	0	0	1
Observable<Row> Func1(List<String> var1) { return session.executeAndFetch(Func1.bind(var1)); } 	0	0	0	0	0	1
"private void Func1(ReturnIpMsg var1) { ReturnIpReply var2 = new ReturnIpReply(); dbf.removeByPrimaryKey(var1.getUsedIpUuid(), UsedIpVO.class); logger.debug(String.format(""Successfully released used ip[%s]"", var1.getUsedIpUuid())); bus.var2(var1, var2); } "	0	0	0	0	1	0
"private BigDecimal Func1(List<? extends SiadapEvaluationItem> var1) { if (!isEvaluationScoringComplete(var1)) { return BigDecimal.ZERO; } BigDecimal var2 = new BigDecimal(0); for (SiadapEvaluationItem var3 : var1) { IScoring var4 = var3.getItemEvaluation(); if (var4 == null) { throw new SiadapException(""resources/SiadapResources"", ""error.siadapEvaluation.mustFillAllItems""); } var2 = var2.add(var4.getPoints()); } if (var1.size() == 0) { return BigDecimal.ZERO; } return var2.divide(new BigDecimal(var1.size()), PRECISION, ROUND_MODE); } "	0	0	1	0	0	0
"public void Func1(String var1, String var2, BigDecimal var3) { BigDecimal var4 = BigDecimal.ZERO; for (ObjectiveEvaluationIndicator var5 : getIndicators()) { var4 = var4.add(var5.getPonderationFactor()); } if (var4.add(var3).compareTo(BigDecimal.ONE) > 0) { throw new SiadapException(""resources/SiadapResources"", ""error.ponderation.cannot.be.over.100""); } checkSizeOfIndicators(); new ObjectiveEvaluationIndicator(this, var1, var2, var3); } "	0	0	1	1	0	0
"@Override protected void Func1(HttpSecurity var1) throws Exception { var1 .formLogin() .loginPage(""/login"") .defaultSuccessUrl(""/dashboard_user"") .permitAll() .and() .authorizeRequests() .antMatchers(""/"", ""/logout"") .permitAll() .and() .logout() .logoutSuccessUrl(""/login?logout"") .and() .authorizeRequests() .antMatchers( ""/coupons/create"", ""/coupons/?/edit"" ) .authenticated() ; var1.csrf().disable(); } "	0	0	1	0	0	0
@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response Func1(Task var1) { var1.generateId(); store.put(var1.getId(), var1); return Response.ok(var1).build(); } 	1	1	0	0	1	0
"@Override public void Func1() { synchronized (interceptOnBackPressedListeners.synchronizedList()) { for (interceptOnBackPressedEvent var1 : interceptOnBackPressedListeners.nonNull()) { try { if (var1.interceptOnBackPressed()) { return; } } catch (Throwable t) { Log.e(TAG, ""Error dispatching interceptOnBackPressed event: "" + t.getMessage(), t); } } } TiWindowProxy var2 = topWindowOnStack(); if (var2 != null && var2.hasListeners(TiC.EVENT_ANDROID_BACK)) { var2.fireEvent(TiC.EVENT_ANDROID_BACK, null); } if (var2 != null && var2.hasProperty(TiC.PROPERTY_ON_BACK)) { KrollFunction var3 = (KrollFunction) var2.getProperty(TiC.PROPERTY_ON_BACK); var3.callAsync(activityProxy.getKrollObject(), new Object[] {}); } if (!var2.hasProperty(TiC.PROPERTY_ON_BACK) && !var2.hasListeners(TiC.EVENT_ANDROID_BACK)) { if (TiApplication.activityStack.size() <= 2) { if (var2 != null && !TiConvert.toBoolean(var2.getProperty(TiC.PROPERTY_EXIT_ON_CLOSE), true)) { this.moveTaskToBack(true); return; } } super.Func1(); } } "	0	0	1	1	1	0
public boolean Func1() { if (seats == null || seats[0] == null || seats[0].riddenByEntity == null) return false; return driverIsCreative || driveableData.fuelInTank > driveableData.engine.fuelConsumption * throttle; } 	1	1	1	1	1	0
"void Func1(ActionEvent var1) { String var2 = t2.getParent(); if((var2 == null) || (var2.equals(""""))) { var2 = null; } taskTable.setCurrentRootTask(var2); } "	0	0	0	0	0	1
void Func1(ActionEvent var1) { TaskCalcDialog var2 = new TaskCalcDialog(App.getFrame()); var2.pack(); Task var3 = CurrentProject.getTaskList().getTask(taskTable.getModel().getValueAt(taskTable.getSelectedRow(), TaskTable.TASK_ID).toString()); Dimension var4 = App.getFrame().getSize(); Point var5 = App.getFrame().getLocation(); var2.setLocation((var4.width - var2.getSize().width) / 2 + var5.x, (var4.height - var2.getSize().height) / 2 + var5.y); var2.setVisible(true); if (var2.CANCELLED) { return; } TaskList var6 = CurrentProject.getTaskList(); if(var2.calcEffortChB.isSelected()) { var3.setEffort(var6.calculateTotalEffortFromSubTasks(var3)); } if(var2.compactDatesChB.isSelected()) { var3.setStartDate(var6.getEarliestStartDateFromSubTasks(var3)); var3.setEndDate(var6.getLatestEndDateFromSubTasks(var3)); } if(var2.calcCompletionChB.isSelected()) { long[] var7 = var6.calculateCompletionFromSubTasks(var3); int var8 = (int) Math.round((((double)var7[0] / (double)var7[1]) * 100)); var3.setProgress(var8); } CurrentStorage.get().storeTaskList(CurrentProject.getTaskList(), CurrentProject.get()); taskTable.tableChanged(); } 	0	0	0	0	0	1
void Func1(ActionEvent var1) { addSubTask_actionPerformed(var1); } 	0	0	0	0	0	1
public int[] Func1() { return items; } 	0	0	0	0	0	1
"public static String Func1(URL[] var1, String var2) { if (!loadLibraries) { return null; } String var3 = loadedLibraries.get(var2); if (var3 != null) { return var3; } File var4 = null; UnsatisfiedLinkError var5 = null; try { for (URL var6 : var1) { File var7; try { var7 = new File(var6.toURI()); } catch (Exception var9) { if (!(var7 = new File(getCacheDir() != null ? getCacheDir() : getTempDir(), new File(var6.getPath()).getName())).exists()) { if (var4 != null && var4.exists()) { var4.deleteOnExit(); } if (logger.isDebugEnabled()) { logger.debug(""Extracting "" + var6); } if (getCacheDir() != null) { var7 = extractResource(var6, getCacheDir(), null, null); } else { var7 = var4 = extractResource(var6, getTempDir(), null, null); } } else while (System.currentTimeMillis() - var7.lastModified() < 1000) { try { Thread.sleep(1000); } catch (InterruptedException ex) { Thread.currentThread().interrupt(); } } } if (var7 != null && var7.exists()) { var3 = var7.getAbsolutePath(); try { if (logger.isDebugEnabled()) { logger.debug(""Loading "" + var3); } loadedLibraries.put(var2, var3); System.load(var3); return var3; } catch (UnsatisfiedLinkError var9) { var5 = var9; loadedLibraries.remove(var2); if (logger.isDebugEnabled()) { logger.debug(""Failed to load "" + var3 + "": "" + var9); } } } } String var8 = var2.split(""@"")[0]; if (logger.isDebugEnabled()) { logger.debug(""Loading library "" + var8); } loadedLibraries.put(var2, var8); System.Func1(var8); return var8; } catch (UnsatisfiedLinkError var9) { loadedLibraries.remove(var2); if (var5 != null && var9.getCause() == null) { var9.initCause(var5); } if (logger.isDebugEnabled()) { logger.debug(""Failed to load for "" + var2 + "": "" + var9); } throw var9; } catch (IOException ex) { loadedLibraries.remove(var2); if (var5 != null && ex.getCause() == null) { ex.initCause(var5); } Error var9 = new UnsatisfiedLinkError(ex.toString()); var9.initCause(ex); if (logger.isDebugEnabled()) { logger.debug(""Failed to extract for "" + var2 + "": "" + var9); } throw var9; } finally { if (var4 != null && var4.exists()) { var4.deleteOnExit(); } } } "	0	0	0	0	0	1
"public static String Func1(Class var1) { if (!loadLibraries || var1 == null) { return null; } var1 = getEnclosingClass(var1); ClassProperties var2 = loadProperties(var1, loadProperties(), true); List<String> var3 = var2.get(""target""); if (var3.isEmpty()) { if (var2.getInheritedClasses() != null) { for (Class var4 : var2.getInheritedClasses()) { var3.add(var4.getName()); } } var3.add(var1.getName()); } for (String var5 : var3) { try { if (logger.isDebugEnabled()) { logger.debug(""Loading class "" + var5); } Class.forName(var5, true, var1.getClassLoader()); } catch (ClassNotFoundException ex) { if (logger.isDebugEnabled()) { logger.debug(""Failed to Func1 class "" + var5 + "": "" + ex); } Error var6 = new NoClassDefFoundError(ex.toString()); var6.initCause(ex); throw var6; } } List<String> var7 = new ArrayList<String>(); var7.addAll(var2.get(""platform.var9"")); var7.addAll(var2.get(""platform.link"")); UnsatisfiedLinkError var8 = null; for (String var9 : var7) { try { URL[] var10 = findLibrary(var1, var2, var9); loadLibrary(var10, var9); } catch (UnsatisfiedLinkError var6) { var8 = var6; } } try { String var11 = var2.getProperty(""platform.var11""); URL[] var10 = findLibrary(var1, var2, var11); return loadLibrary(var10, var11); } catch (UnsatisfiedLinkError var6) { if (var8 != null && var6.getCause() == null) { var6.initCause(var8); } throw var6; } } "	0	0	0	0	1	0
boolean Func1() { return this.m_channelClosed; } 	0	0	0	0	0	1
"public final String Func1(final Plan var1) { int var2 = Integer.MIN_VALUE; for (Integer var3 : var1.timeSpecifiers()) { for (BitOp var4 : var1.getActionSet(var3)) { int var5 = this.toShortString(var4).var5(); if (var2 < var5) { var2 = var5; } } } final int var6 = var2; final int var7 = (int) Math.log10(var1.timeSpecifiers().size()) + 1; StringBuffer var8 = new StringBuffer(); var1.timeSpecifiers().forEach(time -> var1.getActionSet(time).forEach(var4 -> var8.append(String.format(""%0"" + var7 + ""d: %"" + var6 + ""s [%4.2f]%n"", time, this.toShortString(var4), var4.getDuration())))); return var8.Func1(); } "	0	0	1	0	1	0
"public void Func1(RepositorySessionFinishDelegate var1) { if (this.status == SessionStatus.ACTIVE) { this.status = SessionStatus.DONE; var1.onFinishSucceeded(this, this.getBundle(null)); } else { Log.e(tag, ""Tried to Func1() an unstarted or already finished session""); var1.onFinishFailed(new InvalidSessionTransitionException(null)); } } "	0	0	0	0	1	0
"@Override @Deprecated public List<?> Func1(Condition var1) throws AppException { if (var1 == null) { var1 = new Condition(); } try { String var2 = buildHQLStringWithOrders(var1); return getSession().createQuery(var2).list(); } catch (HibernateException e) { LOGGER.error(e.getMessage(), e); throw new AppException(""Invoke Func1 method error.""); } } "	0	0	0	0	1	0
"@Override public String Func1() { return ""Rule '"" + getRule().getUID() + ""' has been added.""; } "	0	0	0	0	0	1
@Override public void Func1(final ApplicationContext var1) throws BeansException { context = var1; } 	0	0	1	0	0	0
@Override public PackageRepository Func1() { return new JARPackageRepository(this, JAR_SYSTEM_LIB_LOCATION); } 	0	0	0	0	1	0
"public void Func1() { geoMap.configure(GeoMap.INTERNAL_EPSG, MAX_NUM_ZOOM_LEVEL, DEFAUL_MAP_UNITS); final ScaleLineOptions var1 = new ScaleLineOptions(); var1.setTopOutUnits(DEFAUL_MAP_UNITS); var1.setBottomOutUnits(""""); final ScaleLine var2 = new ScaleLine(var1); var2.getJSObject().setProperty(""geodesic"", true); geoMap.addControl(var2); final Scale var3 = new Scale(); var3.getJSObject().setProperty(""geodesic"", true); geoMap.addControl(var3); geoMap.addControl(new Attribution()); geoMap.addControl(new Navigation()); geoMap.getMap() .getEvents() .register(""mousemove"", geoMap.getMap(), getMouseMoverEventHandler()); geoMap.getMap() .getEvents() .register(""click"", geoMap.getMap(), getMouseClickEventHandler()); geoMap.getMap() .getEvents() .register(""touchstart"", geoMap.getMap(), getMouseClickEventHandler()); geoMap.getMap().addMapZoomListener(getMapZoomListener()); } "	0	0	0	0	1	0
@Override public void Func1() { updateServerAvatar(bitmap); } 	0	0	0	0	0	1
"private static File Func1(final String var1) { File var2 = new File(ClientFileSystemHelper.getGameRunnerFileLocation(GameRunner.class.getTypeName() + "".class"")); while (var2 != null && var2.exists() && !folderContains(var2, var1)) { var2 = var2.getParentFile(); } return var2; } "	0	0	1	0	1	0
"public static boolean Func1() { final URL var1 = GameRunner.class.getResource(GameRunner.class.getTypeName() + "".class""); String var2 = var1.getFile(); try { var2 = URLDecoder.decode(var2, ""UTF-8""); } catch (final UnsupportedEncodingException e) { ClientLogger.logQuietly(e); } final String var3 = getTripleaJarWithEngineVersionStringPath(); if (var2.contains(var3)) { final String var4 = var2.substring(""file:/"".length() - (GameRunner.isWindows() ? 0 : 1), var2.indexOf(var3) - 1); final File var5 = new File(var4); if (!var5.exists()) { throw new IllegalStateException(""File not found:"" + var5); } String var6; try { var6 = var5.getCanonicalPath(); } catch (final IOException e) { var6 = var5.getPath(); } return var6.contains(""old""); } return false; } "	0	0	0	1	1	0
"public static File Func1() { final File var1 = new File(System.getProperties().getProperty(""user.home"")); File var2; if (GameRunner.isMac()) { var2 = new File(new File(var1, ""Documents""), ""triplea""); } else { var2 = new File(var1, ""triplea""); } return var2; } "	0	0	0	0	1	0
"@Override public void Func1(Map<String, Object> var1, ActionResultsHandlerIfc var2) { this.var2 = var2; String var3 = (String) var1.get(AMP_SECURITY_LEVEL); try { SECURITY var4 = SECURITY.valueOf(var3.toUpperCase()); security = var4; } catch (NullPointerException e) { } catch (Exception e) { log.log(Level.WARNING, ""Incorrect amp security settings, using defaults: "" + security, e); } user_repository = (UserRepository) var1.get(RepositoryFactory.SHARED_USER_REPO_PROP_KEY); } "	0	0	0	0	1	0
@Override public void Func1() throws KrbException { super.Func1(); kadmin = new LocalKadminImpl(getKdcSetting(), getIdentityService()); kadmin.checkBuiltinPrincipals(); } 	0	0	0	0	1	0
"@Test public void Func1() throws Exception { Assert.assertFalse(JsonUtilities.isJSON(""{343493043 }"")); Assert.assertTrue(JsonUtilities.isJSON(""\""a\"": { \""b\"": [1,2,3]}"")); } "	0	0	1	1	1	0
"@Override protected Component Func1() { Label var1 = new Label(""Guest view""); var1.setId(LABEL_ID); VerticalLayout var2 = new VerticalLayout(var1, new LoginPane()); var2.setSizeUndefined(); return var2; } "	0	0	0	0	1	0
"public String Func1() { return String.format(""%.1f%%"", progress); } "	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") public boolean Func1(Resident var1, FlagType var2, Object var3) { if (getValue(var2).equals(var3) && (!hasResident(var1) && !residentHasFriendInTown(var1) || ((Boolean)getValue(FlagType.RESTRICTIONS) && !(getMayor() == var1)))) { return PlayerUtils.isOp(var1.getPlayer()); } return true; } "	1	0	1	0	1	0
"public void Func1(Slot var1) { if (log.isDebugEnabled()) { log.debug(""Releasing tracking of messages for var1 "" + var1.toString()); } String var2 = var1.getId(); Set<Long> var3 = messageBufferingTracker.remove(var2); if (var3 != null) { for (Long var4 : var3) { OnflightMessageTracker.getInstance().removeMessageFromTracker(var4); } } } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception{ Date var1 = new Date(11/4/2017); Date var2 = new Date(9/4/2017); String var3 = ""create""; String var4 = ""customer""; Date var5 = new Date(); eventService.createEvent(var3, var4, var5); List<Event> var6 = eventService.Func1(var1, var2); Assert.assertNotNull(var6); } "	0	0	0	1	1	0
public void Func1(final Collection<CidsBean> var1) { if ((var1 == null) || var1.isEmpty()) { setCidsBean(createDummyBean()); return; } if ((previousSwingworker != null) && !previousSwingworker.isDone()) { previousSwingworker.cancel(true); } previousSwingworker = new SwingWorker<CidsBean, Void>() { @Override protected CidsBean Func2() throws Exception { final CidsBean var2 = ((var1 != null) && !var1.isEmpty()) ? createDummyBean() : null; multiBeanHelper.setDummyBean(var2); multiBeanHelper.setBeans(var1); return var2; } @Override protected void Func3() { CidsBean var2 = null; try { var2 = get(); setCidsBean(var2); } catch (Exception ex) { setCidsBean(null); LOG.warn(ex, ex); } } }; previousSwingworker.execute(); } 	1	1	1	1	1	0
public TinkerVertex Func1(final long var1, final String var2, final TinkerGraph var3) { TinkerVertex var4; try { var4 = (TinkerVertex)var3.V(var1).next(); } catch (NoSuchElementException e) { if (null != var2) { var4 = (TinkerVertex) var3.addVertex(T.var2, var2, T.id, var1); } else { var4 = (TinkerVertex) var3.addVertex(T.id, var1); } } return var4; } 	0	0	0	0	1	0
private void Func1(final List<IndexedEvent> var1) throws InterruptedException { long var2 = System.currentTimeMillis(); do { Long var3 = null; Map.Entry<Long,MetricTimeSlot> var4 = metricBuffer.firstEntry(); if (var4 != null) { var3 = var4.getKey(); if (var3 != null && var3 < System.currentTimeMillis() - 50) { MetricTimeSlot var5 = metricBuffer.remove(var3); for (Map.Entry<MetricKey, ConcurrentLinkedQueue<Event>> var6 : var5.metricMap.entrySet()) { int var7 = 0; for (Event var8: var6.getValue()) { var1.add(new IndexedEvent(var8, var7++)); bufferedEvents.decrementAndGet(); } } if (var1.size() > batchSize || System.currentTimeMillis() - var2 > 1000) { break; } } } else { Thread.sleep(50); } } while(true); } 	0	0	0	0	0	1
"private boolean Func1(ArrayList<String> var1, SharedPreferences var2, final String var3, final MaskedEditText var4) { String var5 = """"; for (int var6 = 0; var6 < var3.length(); var6++) { if ((var6 % 2 == 0) && ((var6+1) != var3.length())  && (var6 != 0)) var5 += "":""; var5 += var3.charAt(var6); } if (!var1.contains(var5)) { MainActivity.info(""Adding: "" + var5); var1.add(var5); Gson var7 = new Gson(); String var8 = var7.toJson(var1.toArray()); MainActivity.info(var8); final SharedPreferences.Editor var9 = var2.edit(); var9.putString(this.filterKey,var8); var9.apply(); var4.setText(""""); MainActivity var10 = MainActivity.getMainActivity(); if (null != var10) { var10.updateAddressFilter(filterKey); } return true; } return false; } "	0	0	0	0	1	0
"public void Func1(MapsActivity var1) { MapsActivity.getDatabase().initDatabase(var1); MapsActivity.getDatabase().runRawDatabaseSystemTest(); MapsActivity.getDatabase().runDatabaseSystemTest(); System.out.println(""Initiating server system checks and validating TCP connection ...""); randomValue = (int)(Math.random() * 1000000) + 1000000; MapsActivity.getAsyncTaskManager().runEventListUpdateTask(var1, true); synchronized (objLock) { try { objLock.wait(1000 * 20); } catch (InterruptedException e) { System.out.println(""Failed to validate server and TCP connection!""); } } if (randomValue == receivedRandomValue) { System.out.println(""Success, the correct value was received!""); } else { System.out.println(""Failed to receive correct value!""); } } "	0	0	0	0	1	0
public final WxmsgReplyBase Func1(String var1, String var2) { this.conf.Func1(var1, var2); return(this); } 	0	0	0	0	1	0
public Properties Func1() { return(this.conf); } 	0	0	0	1	0	0
"private static IFeaturesExtractor Func1(Node var1) throws MalformedURLException, ClassNotFoundException, IllegalAccessException, InstantiationException { NodeList var2 = var1.getChildNodes(); String var3 = null; String var4 = null; Map<String, String> var5 = new HashMap<>(); for (int var6 = 0; var6 < var2.getLength(); ++var6) { Node var7 = var2.item(var6); if (""var3"".equals(var7.getNodeName())) { var3 = var7.getTextContent().trim(); } else if (""var4"".equals(var7.getNodeName())) { var4 = var7.getTextContent().trim(); } else if (""parameters"".equals(var7.getNodeName())) { getParametrs(var5, var7); } } if (var3 == null || var4 == null) { return null; } File var8 = new File(var3); URL var9 = var8.toURI().toURL(); URL[] var10 = new URL[]{var9}; ClassLoader var11 = new URLClassLoader(var10); Class var12 = var11.loadClass(var4); Object var13 = var12.newInstance(); if (var13 instanceof IFeaturesExtractor) { IFeaturesExtractor var14 = (IFeaturesExtractor) var13; var14.initialise(var5); return var14; } return null; } "	0	0	1	0	1	0
"public <T extends Enum<T>> T Func1(Class<T> var1, String var2) throws BindingConfigParseException { try { return Enum.valueOf(var1, next().toUpperCase()); } catch (Exception e) { throw new BindingConfigParseException(String.format(""Invalid {}: {}"", var2, bindingConfig)); } } "	0	0	0	1	1	0
"public void Func1() { final Random var1 = RANDOM_SEED == null ? new Random() : new Random(RANDOM_SEED); final SAMFileWriter var2 = new SAMFileWriterFactory().makeSAMOrBAMWriter(header, false, tmpFile); for (Entry<String,String> var3 : samples.entrySet()) { String var4 = var3.getKey() + ""_"" + addition; final SAMFileReader var5 = new SAMFileReader(new File(var3.getValue())); var5.setValidationStringency(ValidationStringency.SILENT); List<SAMReadGroupRecord> var6 = new ArrayList<SAMReadGroupRecord>(); SAMReadGroupRecord var7 = new SAMReadGroupRecord(addition); var7.setSample(""Sampled""); var6.add(var7); var5.getFileHeader().setReadGroups(var6); if (var5.isBinary()) var5.enableIndexMemoryMapping(false); final Map<String,Boolean> var8 = new HashMap<String,Boolean>(); for (final SAMRecord var9 : var5) { if (var9.isSecondaryOrSupplementary()) continue; ++total; final String var10 = var9.getReadName(); final Boolean var11 = var8.remove(var10); final boolean var12; if (var11 == null) { var12 = var1.nextDouble() <= probability; if (var9.getReadPairedFlag()) var8.put(var10, var12); } else { var12 = var11; } if (var12) { String var13 = var4 + var9.getReadName(); var9.setReadName(var13); var9.setAttribute(""RG"", addition); var2.addAlignment(var9); ++kept; } } var5.close(); System.var2.printf(""Sample %s processed\n"", var3.getKey()); } var2.close(); } "	0	0	0	0	1	0
public long Func1() { return acceptedCommandCount; } 	0	0	0	1	0	0
"private Config Func1() { Config var1 = new Config(); var1.setLicenseKey(LICENSE_KEY).getGroupConfig().setName(""clusterA"").setPassword(""clusterA-pass""); var1.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false); var1.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(true).addMember(""127.0.0.1:5701""); var1.setInstanceName(""clusterA""); var1.getNetworkConfig().setPort(5701); var1.setClassLoader(createCacheManagerClassLoader()); WanReplicationConfig var2 = new WanReplicationConfig(); var2.setName(""AtoB""); WanPublisherConfig var3 = new WanPublisherConfig(); var3.setClassName(WanNoDelayReplication.class.getName()); var3.setGroupName(""clusterB""); Map<String, Comparable> var4 = var3.getProperties(); var4.put(WanReplicationProperties.ENDPOINTS.key(), ""127.0.0.1:5702""); var4.put(WanReplicationProperties.GROUP_PASSWORD.key(), ""clusterB-pass""); var4.put(WanReplicationProperties.ACK_TYPE.key(), WanAcknowledgeType.ACK_ON_OPERATION_COMPLETE.name()); var2.addWanPublisherConfig(var3); var1.addWanReplicationConfig(var2); WanReplicationRef var5 = new WanReplicationRef(); var5.setName(""AtoB""); var1.setLicenseKey(LICENSE_KEY); var5.setMergePolicy(HigherHitsCacheMergePolicy.class.getName()); var5.addFilter(SampleCacheWanEventFilter.class.getName()); var1.getCacheConfig(""default"").setWanReplicationRef(var5); return var1; } "	0	0	0	0	1	0
"@ExceptionHandler(SQLException.class) public String Func1(HttpServletRequest var1, Exception var2) { logger.error(""SQLException Occured:: URL="" + var1.getRequestURL() + "" :: ""+ var2.getLocalizedMessage()); return ""error""; } "	0	0	1	1	1	0
public int Func1() { return totalLeads; } 	0	0	0	0	0	1
"private long Func1(final String var1) { DateFormat var2 = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss""); Date var3 = null; try { var3 = var2.parse(var1); } catch (ParseException e) { e.printStackTrace(); } return var3.getTime() / 1000; } "	0	0	0	0	1	0
@Override public boolean Func1(final ReferencesSearch.SearchParameters var1, final Processor<PsiReference> var2) { final PsiElement var3 = var1.getElementToSearch(); if(var3 instanceof PsiNamedElement && var3.getLanguage().isKindOf(JavaScriptLanguage.INSTANCE) && var1.getScope() instanceof GlobalSearchScope && !(var3.getUseScope() instanceof LocalSearchScope)) { final String var4 = ((PsiNamedElement) var3).getName(); if(var4 == null) { return true; } PsiSearchHelper.SERVICE.getInstance(var3.getProject()).processAllFilesWithWordInLiterals(var4, GlobalSearchScope.getScopeRestrictedByFileTypes(GlobalSearchScope.projectScope (var3.getProject()), JavaScriptFileType.INSTANCE), new Processor<PsiFile>() { @Override public boolean Func2(final PsiFile var5) { return true; } }); } return true; } 	0	0	0	0	1	0
public long Func1() { return slotDeleteSafeZoneCalc.Func1(); } 	0	0	1	0	0	0
public void Func1(Graphics2D var1) { var1.drawRect(50, 50, 150, 150); } 	0	0	0	0	1	0
public long Func1(long var1, long var2) { long var3 = var1 * 1000; long var4 = var3; long var5 = var2; if (haveSync) { if (var1 != lastFramePresentationTimeUs) { frameCount++; adjustedLastFrameTimeNs = pendingAdjustedFrameTimeNs; } if (frameCount >= MIN_FRAMES_FOR_ADJUSTMENT) { long var6 = (var3 - syncFramePresentationTimeNs) / frameCount; long var7 = adjustedLastFrameTimeNs + var6; if (isDriftTooLarge(var7, var2)) { haveSync = false; } else { var4 = var7; var5 = syncUnadjustedReleaseTimeNs + var4 - syncFramePresentationTimeNs; } } else { if (isDriftTooLarge(var3, var2)) { haveSync = false; } } } if (!haveSync) { syncFramePresentationTimeNs = var3; syncUnadjustedReleaseTimeNs = var2; frameCount = 0; haveSync = true; onSynced(); } lastFramePresentationTimeUs = var1; pendingAdjustedFrameTimeNs = var4; if (vsyncSampler == null || vsyncSampler.sampledVsyncTimeNs == 0) { return var5; } long var8 = closestVsync(var5, vsyncSampler.sampledVsyncTimeNs, vsyncDurationNs); return var8 - vsyncOffsetNs; } 	0	0	0	0	1	0
private Optional<List<Op>> Func1(String var1){ try{ return Optional.of(Op.opsForParameter(var1)); } catch (IllegalArgumentException e){ return Optional.absent(); } } 	0	0	1	0	1	0
"protected void Func1(FacesContext var1, String var2) throws IOException { ResponseWriter var3 = var1.getResponseWriter(); var3.startElement(""select"", null); var3.writeAttribute(""id"", var2, null); var3.writeAttribute(""name"", var2, null); var3.writeAttribute(""multiple"", ""true"", null); var3.writeAttribute(""class"", ""ui-helper-hidden"", null); var3.endElement(""select""); } "	0	0	1	0	1	0
"protected Object Func1(Peer var1) { if (var1 == null) { return JSONObject.NULL; } JSONObject var2 = new JSONObject(); var2.put(""ip"", var1.getIp()); var2.put(""port"", var1.getPort()); var2.put(""p2pVersion"", var1.getP2pVersion()); var2.put(""clientId"", var1.getClientId()); var2.put(""peerId"", var1.getPeerId()); var2.put(""latestBlockNumber"", var1.getLatestBlockNumber()); var2.put(""latency"", var1.getLatency()); return var2; } "	0	0	0	0	1	0
"public String Func1(final String var1, final long var2, final int var3) { return getTextFile(var1 + ""/"" + var2 + ""/"" + var3 + ""/docker-compose.yml""); } "	0	0	0	0	1	0
"public void Func1(final String var1) { removeIfExists(var1 + ""/original/docker-compose.yml""); } "	0	0	0	0	1	0
"public static void Func1(String[] var1, IProgressMonitor var2) { String var3 = """"; String var4 = """"; String var5 = """"; String var6 = """"; String var7 = """"; for (int var8 = 0; var8 < var1.length; var8++) { if (var1[var8] == null) { continue; } else if (var1[var8].equalsIgnoreCase(""-s"")) { var3 = var1[++var8]; } else if (var1[var8].equalsIgnoreCase(""-g"")) { var7 = var1[++var8]; } else if (var1[var8].equalsIgnoreCase(""-t"")) { var4 = var1[++var8]; } else if (var1[var8].equalsIgnoreCase(""-h"")) { var5 = var1[++var8]; } else if (var1[var8].equalsIgnoreCase(""-a"")) { var6 = var1[++var8]; } else if (var1[var8].equalsIgnoreCase(""-p"")) { String var9 = var1[++var8]; rgstrScope = var9.split("";""); } else { printHelp(); System.exit(-1); } } if (rgstrScope == null || rgstrScope.length == 0) { rgstrScope = new String[3]; rgstrScope[0] = ""global""; rgstrScope[1] = ""public""; rgstrScope[3] = ""webService""; } fm = new FileManager(var4); ArrayList<File> var10 = fm.getFiles(var3); ArrayList<ClassModel> var11 = new ArrayList<ClassModel>(); if (var2 != null) { var2.beginTask(""ApexDoc - documenting your Apex Class var10."", (var10.size() / 2) * 3 + 2); } for (File var12 : var10) { String var13 = var12.getAbsolutePath(); if (var13.endsWith("".cls"")) { ClassModel var14 = parseFileContents(var13); if (var14 != null) { var11.add(var14); } } if (var2 != null) var2.worked(1); } TreeMap<String, ClassGroup> var15 = createMapClassNameToClassGroup(var11, var3); String var16 = fm.parseHTMLFile(var6); if (var2 != null) var2.worked(1); String var17 = fm.parseHTMLFile(var5); if (var2 != null) var2.worked(1); fm.createDoc(var15, var11, var16, var17, var7, var2); if (var2 != null) var2.done(); System.out.println(""ApexDoc has completed!""); } "	0	0	1	1	0	0
"@EventHandler public void Func1(final PlayerInteractEvent var1) { if (var1.getAction().equals(Action.RIGHT_CLICK_AIR) && Control.CONTROL_ITEM.compare(var1.getPlayer().getItemInHand()) && MyPetList.hasMyPet(var1.getPlayer())) { MyPet var2 = MyPetList.getMyPet(var1.getPlayer()); if (var2.getStatus() == PetState.Here && var2.getCraftPet().canMove()) { if (var2.getSkills().isSkillActive(Control.class)) { if (var2.getSkills().isSkillActive(Behavior.class)) { Behavior var3 = var2.getSkills().getSkill(Behavior.class); if (var3.getBehavior() == BehaviorState.Aggressive || var3.getBehavior() == BehaviorState.Farm) { var1.getPlayer().sendMessage(Util.formatText(Locales.getString(""Message.Skill.Control.AggroFarm"", var1.getPlayer()), var2.getPetName(), var3.getBehavior().name())); return; } } if (var2.getSkills().isSkillActive(Ride.class)) { if (var2.getCraftPet().getHandle().hasRider()) { var1.getPlayer().sendMessage(Util.formatText(Locales.getString(""Message.Skill.Control.Ride"", var1.getPlayer()), var2.getPetName())); return; } } if (!Permissions.hasExtended(var1.getPlayer(), ""MyPet.user.extended.Control"")) { var2.sendMessageToOwner(Locales.getString(""Message.No.CanUse"", var2.getOwner().getLanguage())); return; } Block var4 = var1.getPlayer().getTargetBlock(null, 100); if (var4 != null && var4.getType() != Material.AIR) { for (int var5 : ControllIgnoreBlocks) { if (var4.getTypeId() == var5) { var4 = var4.getRelative(BlockFace.DOWN); break; } } var2.getSkills().getSkill(Control.class).setMoveTo(var4.getLocation()); } } } } } "	0	0	0	0	1	0
"@RequestMapping(value = ""/save"", method = RequestMethod.POST) public ModelAndView Func1(@Valid EditForm var1, BindingResult var2, RedirectAttributes var3) throws IOException { assert(isAccessAuthenticated()); ModelAndView var4; validator.validate(var1, var2); Authentication var5 = SecurityContextHolder.getContext().getAuthentication(); Member var6 = (Member) var5.getPrincipal(); if (!var2.hasErrors()) { memberService.saveEditChange(var6, var1); var4 = new ModelAndView(""redirect:/profile""); } else { var4 = new ModelAndView(""edit"", ""var1"", var1); List<String> var7 = uniService.findAllNames(); var4.addObject(""universityChoices"", var7); var4.addObject(""var6"", var6); } return var4; } "	0	0	0	0	1	0
"@RequestMapping(value = ""/Func1"", method = RequestMethod.POST) public ModelAndView Func1() { memberService.upgradeAuthenticatedMemberToTutor(); return show(); } "	0	0	0	0	0	1
"private <T extends ConnectFuture> IoSessionInitializer<ConnectFuture> Func1( final ResourceAddress var1, final IoHandler var2, final IoSessionInitializer<T> var3, final DefaultConnectFuture var4) { ResourceAddress var5 = var1.getTransport(); Protocol var6 = bridgeServiceFactory.getTransportFactory().getProtocol(var5.getResource()); if (!(var6 instanceof HttpProtocol)) { String var7 = format(""Cannot create WSN var8 var11 var3 for address %s"", var1); if (logger.isInfoEnabled()) { logger.info(var7); } throw new RuntimeException(var7); } return new IoSessionInitializer<ConnectFuture>() { @Override public void Func2(final IoSession var8, ConnectFuture var9) { final IoSessionInitializer<T> var10 = new IoSessionInitializer<T>() { @Override public void Func2(IoSession var11, T var9) { WsnSession var12 = (WsnSession) var11; var12.setHandler(var2); if (var3 != null) { var3.Func2(var11, var9); } } }; URI var13 = var1.getExternalURI(); Protocol var6 = bridgeServiceFactory.getTransportFactory().getProtocol(var13.getScheme()); String var14 = var6.isSecure() ? ""https"" : ""http""; String var15 = var14 + ""://"" + var13.getAuthority(); HttpConnectSession var16 = (HttpConnectSession) var8; var16.setWriteHeader(""Upgrade"", ""websocket""); var16.setWriteHeader(""Connection"", ""Upgrade""); var16.setWriteHeader(""Origin"", var15); var16.setWriteHeader(""Sec-WebSocket-Version"", ""13""); var16.setWriteHeader(""Sec-WebSocket-Key"", STATIC_WEBSOCKET_KEY); // TODO use random key? List<String> var17 = asList(var1.getOption(WsResourceAddress.SUPPORTED_PROTOCOLS)); String var18 = var1.getOption(NEXT_PROTOCOL); if (var18 != null) { List<String> var19 = new ArrayList<>(var17); var19.add(var18); var17 = var19; } if (!var17.isEmpty()) { var16.setWriteHeader(""Sec-WebSocket-Protocol"", Utils.asCommaSeparatedString(var17)); } WSN_SESSION_INITIALIZER_KEY.set(var16, var10); WSN_CONNECT_FUTURE_KEY.set(var16, var4); WSN_CONNECT_ADDRESS_KEY.set(var16, var1); } }; } "	0	0	0	0	0	1
"private synchronized void Func1(Row var1, int var2) { String var3 = ""D_INSERT "" + relvarName + "" RELATION {TUPLE {""; String var4 = """"; for (int var5 = 0; var5 < heading.length; var5++) { if (var4.length() > 0) var4 += "", ""; String var6 = heading[var5].getType().toString(); Object var7 = var1.getColumnValue(var5); String var8 = """"; if (var7 != null) var8 = var7.toString(); if (var6.equals(""BOOLEAN"")) var8 = ""False""; else if (var6.equals(""RATIONAL"")) var8 = ""0.0""; else if (var6.equals(""INTEGER"")) var8 = ""0""; var1.setColumnValue(var5, var8); if (var6.equals(""CHARACTER"")) var8 = ""'"" + StringUtils.quote(var8) + ""'""; String var9 = heading[var5].getName(); var4 += var9 + "" "" + var8; } var3 += var4 + ""}};""; System.out.println(""RelvarEditor: query is "" + var3); DbConnection.ExecuteResult var10 = connection.execute(var3); if (var10.failed()) var1.setError(""Unable to insert tuple.\n\nQuery: "" + var3 + "" failed:\n\n"" + var10.getErrorMessage()); else { var1.committed(); processRows.remove(var2); } refreshAfterUpdate(); } "	0	0	0	0	0	1
"@Override public void Func1(View var1) { Log.w(Constants.TAG, ""Activating TAG "" + position); Intent var2 = new Intent(context, TagDetailActivity.class); var2.putExtra(""TAG"", soulissTags[position].getTagId()); ActivityOptionsCompat var3 = ActivityOptionsCompat.makeSceneTransitionAnimation(context, Pair.create((View) holder.image, ""photo_hero""), Pair.create((View) holder.shadowbar, ""shadow_hero""), Pair.create((View) holder.imageTag, ""tag_icon"") ); ActivityCompat.startActivity(context, var2, var3.toBundle()); } "	0	0	1	0	0	0
"static void Func1(DhisApi var1, String var2, String var3) throws APIException { Log.d(CLASS_TAG, ""getEventsDataFromServer""); final Map<String, String> var4 = new HashMap<>(); var4.put(""fields"", ""[event]""); var4.put(""skipPaging"", ""true""); List<Event> var5 = TrackerController.getEvents(var2,var3); List<Event> var6 = new ArrayList<>(); if(var5.size()==0) { return; } JsonNode var7 = var1.getEventUids(var3, var2, var4); List<Event> var8 = EventsWrapper.getEvents(var7); for (Event var9:var5){ boolean var10 = true; for (Event var11:var8){ if(var11.getEvent().equals(var9.getEvent())){ var10=false; break; } } if(var10){ var6.add(var9); } } removeResource(var6); } "	1	0	0	0	1	0
public static Boolean Func1() { return (Boolean) threadLocalToSkipSetUserClaimsListeners.get(); } 	1	0	0	1	1	0
"public final void Func1(final Document var1, final Map<String, Object> var2, final Locale var3) throws DocumentException { if (!var2.containsKey(""entities"")) { Paragraph var4 = new Paragraph(new Phrase(translationService.translate( ""qualityControls.qualityControl.report.paragrah"", var3), PdfUtil.getArialBold11Light())); var4.add(new Phrase("" "" + var2.get(""dateFrom"") + "" - "" + var2.get(""dateTo""), PdfUtil .getArialBold11Light())); var4.setSpacingBefore(20); var1.add(var4); } Paragraph var5 = new Paragraph(new Phrase(translationService.translate( ""qualityControls.qualityControl.report.paragrah2"", var3), PdfUtil.getArialBold11Light())); var5.setSpacingBefore(20); var1.add(var5); } "	0	0	1	1	1	0
"public String Func1(String var1){ StringBuilder var2 = new StringBuilder(); while(var1.length() > 0){ { List<String> var3 = rules.get(""escape"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); var2.append(var3.get(1)); continue; } } { List<String> var3 = rules.get(""autolink"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); String var4; String var5; if(var3.get(2).equals(""@"")){ if(var3.get(1).startsWith(""mailto:"")){ var4 = var3.get(1).substring(7); } else { var4 = var3.get(1); } var5 = ""mailto:"" + var4; } else { var4 = escape(var3.get(1)); var5 = var4; } var2.append(renderer.var7(var5, Optional.empty(), var4)); continue; } } if(!inLink){ List<String> var3 = rules.get(""url"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); String var4 = escape(var3.get(1)); String var5 = var4; var2.append(renderer.var7(var4, Optional.empty(), var5)); continue; } } { List<String> var3 = rules.get(""tag"").exec(var1); if(!var3.isEmpty()){ if(!inLink && Pattern.compile(""^<a "").matcher(var3.get(0)).find()){ inLink = true; } else if(inLink && Pattern.compile(""^</a>"").matcher(var3.get(0)).find()){ inLink = false; } var1 = var1.substring(var3.get(0).length()); if(options.isSanitize()){ var2.append(escape(var3.get(0))); } else { var2.append(var3.get(0)); } continue; } } { List<String> var3 = rules.get(""var7"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); inLink = true; var2.append(outputLink(var3, new Lexer.Link(var3.get(2), Optional.of(var3.get(3))))); inLink = false; continue; } } { List<String> var3 = rules.get(""reflink"").exec(var1); if(var3.isEmpty()){ var3 = rules.get(""nolink"").exec(var1); } if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); String var6 = or(var3.get(2), var3.get(1)).replaceAll(""\\s+"", """"); Lexer.Link var7 = links.get(var6); if(var7 == null || isEmpty(var7.getHref())){ var2.append(var3.get(0).charAt(0)); continue; } inLink = true; var2.append(outputLink(var3, var7)); inLink = false; continue; } } { List<String> var3 = rules.get(""strong"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); var2.append(renderer.strong(or(var3.get(2), var3.get(1)))); continue; } } { List<String> var3 = rules.get(""em"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); var2.append(renderer.em(or(var3.get(2), var3.get(1)))); continue; } } { List<String> var3 = rules.get(""code"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); var2.append(renderer.codespan(var3.get(2))); continue; } } { List<String> var3 = rules.get(""br"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); var2.append(renderer.br()); continue; } } { List<String> var3 = rules.get(""del"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); var2.append(renderer.del(var3.get(1))); continue; } } { List<String> var3 = rules.get(""var4"").exec(var1); if(!var3.isEmpty()){ var1 = var1.substring(var3.get(0).length()); var2.append(renderer.var4(escape(var3.get(0)))); continue; } } } return var2.toString(); } "	0	0	0	0	0	1
"public Message Func1(int var1) throws CanalClientException { int var2 = 0; while (var2 < retryTimes) { try { Message var3 = currentConnector.Func1(var1); return var3; } catch (Throwable t) { logger.warn(""something goes wrong when getting data from server:{}\n{}"", currentConnector.getAddress(), ExceptionUtils.getFullStackTrace(t)); var2++; restart(); logger.info(""restart the connector for next round retry.""); } } throw new CanalClientException(""failed to fetch the data after "" + var2 + "" var2 retry""); } "	0	0	0	0	0	1
public int[][] Func1(int[][] var1) { synchronized (mPixels) { for (int var2 = 0; var2 < mPixels.length; ++var2) { var1[var2] = Arrays.copyOf(mPixels[var2], mPixels[var2].length); } } return var1; } 	0	0	0	0	1	0
"@RequestMapping(method = RequestMethod.POST) public ModelAndView Func1 (@RequestParam String var1, @RequestParam String var2, @RequestParam String var3) { Buildings var4 = new Buildings(); var4.setBuildingName(var1); var4.setAddress(var2); var4.setAcronym(var3); buildingRepository.save(var4); return new ModelAndView(""redirect:/buildings""); } "	0	0	0	0	1	0
"private void Func1() { closetListModel.clear(); List<Clothing> var1 = new ArrayList<>(character.closet); var1.sort(new ClothingSorter()); var1.forEach(article -> closetListModel.addElement(article)); outfitListModel.clear(); var1 = new ArrayList<>(character.outfit.getEquipped()); var1.sort(new ClothingSorter()); var1.forEach(article -> outfitListModel.addElement(article)); DecimalFormat var2 = new DecimalFormat(""#.##""); appearanceLabel.setText(""Appearance: "" + var2.var2(character.outfit.getHotness())); exposureLabel.setText(""Exposure: "" + var2.var2(character.outfit.getExposure())); Global.gui().refresh(); } "	0	0	0	0	1	0
public double Func1() { return northing; } 	0	0	0	0	0	1
@Test public void Func1(){ assertEquals(emptyList(), CollectionsUtil.collect((Iterator<Long>) null, TransformerUtils.stringValueTransformer())); } 	0	0	1	1	1	0
@Test public void Func1(){ assertEquals(emptyList(), CollectionsUtil.collect((List<Long>) null, TransformerUtils.stringValueTransformer())); } 	0	0	1	1	1	0
public static Treasure Func1(Position var1, ArrayList<Treasure> var2) { Treasure var3 = var2.get(0); double var4 = GameSettings.Arena.outerSize.getHeight() + GameSettings.Arena.outerSize.getWidth(); for (Treasure var5 : var2) { if (var5.state == TreasureState.UNPICKED) { double var6 = Maths.dist(var1, var5.position); if (var6 < var4) { var4 = var6; var3 = var5; } } } return var3; } 	0	0	1	0	1	0
public static Tristate Func1(User var1, GPClaim var2, String var3, String var4) { Set<Context> var5 = new HashSet<>(var1.getActiveContexts()); if (var2.parent != null && var2.getData().doesInheritParent()) { var5.add(var2.parent.getContext()); } else { var5.add(var2.getContext()); } Tristate var6 = var1.getPermissionValue(var5, var3); if (var6 != Tristate.UNDEFINED) { return var6; } if (var4 != null) { var6 = var1.getPermissionValue(var5, var4); if (var6 != Tristate.UNDEFINED) { return var6; } } return getClaimFlagPermission(var2, var3, var4, var5); } 	1	0	1	0	1	0
"@Override protected ISpoofaxAnalyzeResults Func1(Map<String,ISpoofaxParseUnit> var1, Map<String,ISpoofaxParseUnit> var2, ISingleFileScopeGraphContext var3, HybridInterpreter var4, String var5) throws AnalysisException { for (String var6 : var2.keySet()) { var3.removeUnit(var6); } final String var7 = var3.location().getName().getURI(); final Collection<ISpoofaxAnalyzeUnit> var8 = Lists.newArrayList(); for (Map.Entry<String,ISpoofaxParseUnit> var6 : var1.entrySet()) { String var9 = var6.getKey(); ISpoofaxParseUnit var10 = var6.getValue(); try { ISingleFileScopeGraphUnit var11 = var3.var11(var9); var11.clear(); IStrategoTerm var12 = doAction(var5, actionBuilder.initialOf(var7), var3, var4); InitialResult var13 = ResultTerms.initialOf().match(strategoTerms.fromStratego( var12)).orElseThrow(() -> new MetaborgException(""Invalid initial var8."")); IStrategoTerm var14 = doAction(var5, actionBuilder.unitOf(var9, var10.ast(), var13.getArgs()), var3, var4); UnitResult var15 = ResultTerms.unitOf().match(strategoTerms.fromStratego(var14)) .orElseThrow(() -> new MetaborgException(""Invalid var11 var8."")); var11.setUnitResult(var15); Iterable<IConstraint> var16 = Iterables.concat(var13.getConstraints(), var15 .getConstraints()); Solution var17 = Solver.solve(var16); var11.setSolution(var17); IStrategoTerm var18 = strategoTerms.toStratego(var15.getAST()); IStrategoTerm var19 = doAction(var5, actionBuilder.finalOf(var9), var3, var4); FinalResult var20 = ResultTerms.finalOf().match(strategoTerms.fromStratego(var19)) .orElseThrow(() -> new MetaborgException(""Invalid final var8."")); var11.setFinalResult(var20); final Collection<IMessage> var21 = var25(var10.var9(), var17.getErrors(), MessageSeverity.ERROR); final Collection<IMessage> var22 = var25(var10.var9(), var17.getWarnings(), MessageSeverity.WARNING); final Collection<IMessage> var23 = var25(var10.var9(), var17.getNotes(), MessageSeverity.NOTE); final Collection<IMessage> var24 = analysisCommon.ambiguityMessages(var10.var9(), var18); final Collection<IMessage> var25 = Lists.newArrayListWithCapacity(var21.size() + var22.size() + var23.size() + var24.size()); var25.addAll(var21); var25.addAll(var22); var25.addAll(var23); var25.addAll(var24); var8.add(unitService.analyzeUnit(var10, new AnalyzeContrib(true, var21.isEmpty(), true, var18, var25, -1), var3)); } catch (MetaborgException | UnsatisfiableException e) { logger.warn(""File analysis failed."", e); Iterable<IMessage> var25 = Iterables2.singleton(MessageFactory.newAnalysisErrorAtTop(var10 .var9(), ""File analysis failed."", e)); var8.add(unitService.analyzeUnit(var10, new AnalyzeContrib(true, false, false, null, var25, -1), var3)); } } return new SpoofaxAnalyzeResults(var8, Collections.<ISpoofaxAnalyzeUnitUpdate> emptyList(), var3); } "	0	0	0	0	1	0
private void Func1(UserRoleForm var1, UserDetailsForm var2) { List<Object> var3 = getUserRoleService().getRoles(userManagementService.getSuperAdminRoleId()); List<Object> var4 = getUserRoleService().getInstitutions(var2.isSuperAdmin(), var2.getLoginInstitutionId()); var1.setRoles(var3); var1.setInstitutions(var4); } 	0	0	0	0	1	0
public static Predicate<Vector3i> Func1(final Noise var1, final float var2) { return new Predicate<Vector3i>() { @Override public boolean Func2(Vector3i var3) { return var1.noise(var3.getX(), var3.getY(), var3.getZ()) < var2; } }; } 	0	0	0	0	1	0
"@Test public void Func1() throws RightTypeException, RoleException { UUID var1 = UUID.randomUUID(); Role var2 = Role.var2(""role3"", Right.newRight(""right1"", RightType.GENERAL_ADMIN)); RoleDto var3 = new RoleDto(); var2.export(var3); RoleDto var4 = restAssured .given() .queryParam(ACCESS_TOKEN, getToken()) .pathParam(""id"", var1) .contentType(MediaType.APPLICATION_JSON_VALUE) .body(var3) .when() .put(ID_URL) .then() .statusCode(200) .extract().as(RoleDto.class); assertEquals(var3, var4); Role var5 = roleRepository.findOne(var1); var5.getRights().size(); assertEquals(var2, var5); assertThat(RAML_ASSERT_MESSAGE, restAssured.getLastReport(), RamlMatchers.hasNoViolations()); } "	0	0	1	0	1	0
"@Test public void Func1() throws IOException, NoSuchConfigException { RegisterContext var1 = new RegisterContext(registerName, configManager, registerLinkService, dbi, flyway, Optional.empty(), true, false, Optional.empty(), Optional.empty(), Optional.empty(), new RegisterAuthenticator("""", """")); var1.resetRegister(); verify(flyway, times(1)).clean(); verify(configManager, times(1)).refreshConfig(); verify(flyway, times(1)).migrate(); } "	0	0	0	0	1	0
private void Func1(TrackSimple var1) { List<String> var2 = getTrackUris(); List<String> var3 = var2.var3(var2.indexOf(var1.uri), var2.size()); mApp.getSpotifyPlayerController().play(getObjectUri(), var3); } 	0	0	0	0	1	0
@NonNull private Button Func1(@NonNull HotPoint var1) { Button var2 = (Button) View.inflate(this, R.layout.hot_point_button, null); var2.setOnClickListener(this); var2.setText(var1.getName()); var2.getBackground().setColorFilter(var1.getColor(), PorterDuff.Mode.MULTIPLY); var2.setTag(var1); return var2; } 	0	0	0	0	1	0
@Override public void Func1(View var1, int var2) { result[0] = new Color.Result(var2, null); } 	1	0	1	0	1	0
@Test public void Func1() { subject = new BaselineProfileComparator(false, null, allOrganismParts, cutoff); int var1 = subject.compare(geneWithSpecificity1, geneWithSpecificity16); assertThat(var1, is(greaterThan(0))); } 	0	0	0	0	1	0
public void Func1(String Func1) { Func1(Func1, JavaExtension.LICENSE_HEADER_DELIMITER); } 	1	0	0	1	1	0
"public void Func1() { if (node.getChildren() == null) return; for (Node var1: node.getChildren().values()) { Value var2 = var1.getAttribute(""restore type""); if (var2 != null && var2.getString().equals(""folder"")) { DeviceFolder var3 = new DeviceFolder(conn, var1, root); var3.Func1(); } else if (var2 != null && var2.getString().equals(""point"")) { Value var4 = var1.getAttribute(""object type""); Value var5 = var1.getAttribute(""object instance number""); Value var6 = var1.getAttribute(""use COV""); Value var7 = var1.getAttribute(""settable""); Value var8 = var1.getAttribute(""default priority""); if (var8 == null) var1.setAttribute(""default priority"", new Value(8)); if (var4!=null && var5!=null && var6!=null && var7!=null) { new BacnetPoint(this, node, var1); } else { node.removeChild(var1); } } else if (var1.getAction() == null && var1 != root.statnode) { node.removeChild(var1); } } } "	0	0	0	0	1	0
"@Override public RoutingStatus Func1(Transaction var1, final ServerMessage var2, final boolean var3, boolean var4) throws Exception { if (!this.getRemotingConnection().isSupportsFlowControl() && pagingManager.isDiskFull()) { ActiveMQIOErrorException var5 = ActiveMQMessageBundle.BUNDLE.diskBeyondLimit(); this.getRemotingConnection().fail(var5); throw var5; } RoutingStatus var6 = RoutingStatus.OK; if (!var2.isLargeMessage()) { long var7 = storageManager.generateID(); var2.setMessageID(var7); var2.encodeMessageIDToBuffer(); } if (server.getConfiguration().isPopulateValidatedUser() && validatedUser != null) { var2.putStringProperty(Message.HDR_VALIDATED_USER, SimpleString.toSimpleString(validatedUser)); } SimpleString var8 = getAddress(var2.getAddress()); if (defaultAddress == null && var8 != null) { defaultAddress = var8; } if (var8 == null) { if (var2.isDurable()) { var2.setAddress(defaultAddress); } else { var2.setAddressTransient(defaultAddress); } } if (logger.isTraceEnabled()) { logger.trace(""Func1(var2="" + var2 + "", var3="" + var3 + "") being called""); } if (var8 == null) { throw ActiveMQMessageBundle.BUNDLE.noAddress(); } if (var8.equals(managementAddress)) { handleManagementMessage(var1, var2, var3); } else { var6 = doSend(var1, var2, var3, var4); } return var6; } "	0	0	0	0	1	0
"public void Func1(String var1){ this.var1 = var1; connector.Connect(""game""); try { connector.doUpdate(""Game"",""UPDATE Player SET var1 = "" + var1 + "" WHERE PlayerID EQUALS "" + ID + "");""); connector.close(); } catch (SQLException e) { e.printStackTrace(); } } "	0	0	1	1	1	0
"public void Func1(int var1){ connector.Connect(""game""); int var2 = var1 + position; if(var2 > maxfields){ var2 = var2 % maxfields; Account.addBalance(4000); } position = var2; try { connector.doUpdate(""Game"",""UPDATE Player SET Position = "" + var2 + "" WHERE PlayerID EQUALS "" + ID + "");""); connector.close(); } catch (SQLException e) { e.printStackTrace(); } } "	0	0	1	1	1	0
"public static void Func1 (String var1[]) { boolean var2; Test2Driver var3 = new Test2Driver (); var2 = var3.insertTest(); if (var2 != true) { System.out.println(""Error ocurred during Test2""); } else { System.out.println(""Test2 completed successfully""); } } "	0	0	1	0	1	0
"public static void Func1(VersionInfo var1) { File var2 = PersistentSettings.getSettingsDirectory(); File var3 = new File(var2, ""var6""); if (!var3.isDirectory()) { var3.mkdirs(); } File var4 = new File(var2, ""versions""); if (!var4.isDirectory()) { var4.mkdirs(); } Collection<VersionInfo.Library> var5 = new LinkedList<VersionInfo.Library>(); for (Library var6: var1.libraries) { LibraryStatus var7 = var6.testIntegrity(var3); if (var7 != LibraryStatus.PASSED && var7 != LibraryStatus.INCOMPLETE_INFO) { var5.add(var6); float var8 = var6.var8; String var9 = ""B""; if (var8 >= 1024*1024) { var8 /= 1024*1024; var9 = ""MiB""; } else if (var8 >= 1024) { var8 /= 1024; var9 = ""KiB""; } String var10; if (var8 >= 10) { var10 = String.format(""%d %s"", (int) var8, var9); } else { var10 = String.format(""%.1f %s"", var8, var9); } System.out.print(""Downloading "" + var6 + "" ["" + var10 + ""]...""); if (downloadLibrary(var3, var6, System.out)) { System.out.println(""done!""); } else { return; } } } try { File var11 = new File(var4, var1.name + "".json""); var1.writeTo(var11); } catch (IOException e) { System.err.println(""Failed to Func1 var1 info. Please try again later.""); } } "	0	0	0	0	1	0
private static void Func1(Map<BuildIdentifier, BuildImportSummary> var1) { List<BuildImportSummary> var2 = new ArrayList<BuildImportSummary>( var1.values()); ScenarioDocuAggregationDao var3 = new ScenarioDocuAggregationDao( configurationRepository.getDocumentationDataDirectory()); var3.Func1(var2); } 	0	0	0	1	0	0
public void Func1(LatLongAlt var1) { this.var1 = var1; } 	0	0	0	1	1	0
"@Test(timeOut = 10000) public void Func1() { final String var1 = ""Func1""; final KafkaSimpleStreamingExtractor<String, byte[]> var2 = getStreamingExtractor(var1); try { var2.readRecord(null); Assert.fail(""Should have thrown an exception""); } catch (IOException e) { } catch (Exception e) { Assert.fail(""Should only throw IOException""); } } "	0	0	0	0	1	0
"private String Func1(int var1, int var2) { String var3 = """"; if(var2 >= 0) { var3 += ""N""; } else { var3 += ""S""; } var2 = Math.abs(var2); if(var2 < 10) { var3 += ""0""; } var3 += var2; if(var1 >= 0) { var3 += ""E""; } else { var3 += ""W""; } var2 = Math.abs(var1); if(var1 < 10) { var3 += ""0""; } if(var1 < 100) { var3 += ""0""; } var3 += var1; return var3; } "	1	0	1	0	1	0
"private void Func1(Mat[] var1, String[] var2) { ProgressDialogHandler.getInstance().showProcessDialog(""Processing"", ""Aligning images"", 60.0f); MedianAlignmentOperator var3 = new MedianAlignmentOperator(var1, var2); var3.perform(); } "	0	0	0	1	0	0
"protected String Func1(Map<String, String> var1, boolean var2) { if (!var2) { var1.put(""sign"", genSign(var1)); } return map2xmlStr(var1); } "	0	0	0	0	1	0
"public void Func1(Event var1) { if (var1 instanceof StepEvent == false) { return; } StepEvent var2 = (StepEvent)var1; Location var3 = var2.var3(); for (ThreadReference var4 : vm.allThreads()) { String var5 = var4.name(); if (var5.equals(""main"")) { continue; } int var6; try { var6 = var4.frameCount(); } catch (IncompatibleThreadStateException e) { continue; } if (threads.containsKey(var5) == false) { threads.put(var5, new StepStack()); } StepStack var7 = threads.get(var5); if (var7.size() < var6) { var7.push(new Steps()); } else if (var7.size() > var6) { var7.pop(); } Steps var8 = var7.peek(); if (var8 != null) { Step var9 = new Step(); var9.var3 = var3; try { while (var8.empty() == false) { Step var10 = var8.pop(); var9.declaredVariables = var10.declaredVariables; if (sameLocation(var9.var3, var10.var3) == false) { logLocation(var10); logVariables(var4, var10, var9); } else { var9.usedVariables = var10.usedVariables; } } saveUsedVariables(var4, var9); } catch (AbsentInformationException e) { } var8.push(var9); } } return; } "	0	0	0	0	1	0
"@Override public void Func1(String var1) { Objects.requireNonNull(var1); logger.info(""Clearing the cache for \""{}\"""", var1); this.scheduleCache.remove(var1); this.standingsCache.remove(var1); } "	0	0	1	0	1	0
protected HazelcastInstance Func1() { if (hazelcastInstance == null) { Config var1 = new XmlConfigBuilder().build(); if (isNullOrEmptyAfterTrim(var1.getInstanceName())) { hazelcastInstance = Hazelcast.newHazelcastInstance(); } else { hazelcastInstance = Hazelcast.getOrCreateHazelcastInstance(var1); } } return hazelcastInstance; } 	0	0	1	0	1	0
"public void Func1(TupleTypeFactory var1, UserTypeFactory var2, AbstractEntityProperty<?> var3) { LOGGER.info(""Start injecting dependencies to meta classes""); final Class<?> var4 = var3.var4; if (currentKeyspace.isPresent()) { LOGGER.debug(""Injecting current global keyspace""); var3.injectKeyspace(currentKeyspace.get()); } if (schemaNameProvider.isPresent()) { LOGGER.debug(""Injecting schema name provider""); var3.inject(schemaNameProvider.get()); } LOGGER.debug(""Injecting default bean factory""); var3.inject(defaultBeanFactory); LOGGER.debug(""Injecting Jackson mapper""); var3.inject(jacksonMapperFactory.getMapper(var4)); LOGGER.debug(""Injecting global Insert strategy""); var3.inject(globalInsertStrategy); if (!interceptors.isEmpty()) { LOGGER.debug(""Injecting bean interceptors""); interceptors.stream() .filter(x -> x.acceptEntity(var4)) .map(x -> (Interceptor) x) .forEach(var3.interceptors::add); } if (beanValidator != null && isClassConstrained(var4)) { LOGGER.debug(""Injecting Bean validator (JSR 303)""); if (var3.isTable()) { var3.interceptors.add((Interceptor) preMutateBeanValidationInterceptor); } if (postLoadBeanValidationInterceptor.isPresent()) { var3.interceptors.add(0, (Interceptor) postLoadBeanValidationInterceptor.get()); } } LOGGER.debug(""Injecting global consistency levels""); var3.injectConsistencyLevels(session, this); LOGGER.debug(""Injecting runtime codecs""); var3.injectRuntimeCodecs(runtimeCodecs); LOGGER.debug(""Injecting user type factory and tuple type factory""); var3.inject(var2, var1); } "	0	0	1	0	1	0
"@Test public void Func1() throws Throwable { WaitForAsyncUtils.printException=false; WaitForAsyncUtils.autoCheckException=true; Callable<Void> var1 = () -> { throw new UnsupportedOperationException(); }; WaitForAsyncUtils.clearExceptions(); Future<Void> var2 = WaitForAsyncUtils.async(var1); waitForThreads(var2); try{ var2 = WaitForAsyncUtils.async(var1); assertTrue(""No exception thrown by autoCheck"",false); }catch(Throwable e){ if(!(e.getCause() instanceof UnsupportedOperationException)){ // should be! throw e; } } WaitForAsyncUtils.clearExceptions(); WaitForAsyncUtils.printException=true; waitForThreads(var2); } "	0	0	1	0	0	0
public static SelectedConnector Func1(VNode var1, Parent var2, String var3, MouseEvent var4) { Node var5 = NodeUtil.getDeepestNode( var2, var4.getSceneX(), var4.getSceneY(), ConnectorCircle.class, FlowNodeWindow.class); Connector var6 = null; if (var5 != null) { if (var5 instanceof ConnectorCircle) { ConnectorCircle var7 = (ConnectorCircle) var5; var6 = var7.getConnector(); } else if (var5 instanceof FlowNodeWindow) { final FlowNodeWindow var8 = (FlowNodeWindow) var5; var6 = var8.nodeSkinProperty().get(). getModel().getMainInput(var3); } if (var6 != null && var6.getNode() instanceof VFlowModel) { VFlowModel var9 = (VFlowModel) var6.getNode(); if (var9.getNodes().contains(var1)) { var5 = null; var6 = null; } } } return new SelectedConnector(var5, var6); } 	0	0	1	0	0	0
boolean Func1() { return consoleView != null; } 	0	0	0	0	1	0
"private boolean Func1() { try { if (consoleView != null) { Log.d(CONSOLE, ""Hide console""); Activity var1 = getActivity(); if (var1 != null) { Animation var2 = AnimationUtils.loadAnimation(var1, R.anim.lunar_console_slide_out_top); var2.setAnimationListener(new Animation.AnimationListener() { @Override public void Func2(Animation var2) { } @Override public void Func3(Animation var2) { removeConsoleView(); if (settings.isEnableTransparentLogOverlay()) { showLogOverlayView(); } enableGestureRecognition(); } @Override public void Func4(Animation var2) { } }); consoleView.startAnimation(var2); } else { Log.w(""Can't properly hide console: var1 reference is lost""); removeConsoleView(); } return true; } } catch (Exception e) { Log.e(e, ""Can't hide console""); } return false; } "	0	0	0	0	1	0
"public void Func1() { AstericsErrorHandling.instance.getLogger().fine(""Invoking thread <""+Thread.currentThread().getName()+"">, .Func1 called""); if (runningTaskFuture == null) runningTaskFuture=AstericsThreadPool.instance.execute(this); else timecount=System.currentTimeMillis()-startTime+owner.propTimePeriod; } "	0	0	0	0	1	0
public void Func1() { wrapper.getWishList((String[] var1) -> {onWishListUpdatedNotify(var1);}); } 	0	0	1	0	0	0
"public void Func1(ActionEvent var1) { String var2 = tf.getText(); boolean var3 = checkBox.isSelected(); if (var2.contains(""youtube."") && var2.contains(""/watch"")) { c.addToList(var2, wishlist.isSelected(), var3, tf, fail, frame); } else { fail.setText(""No valid Link""); new util.ShowLabelThread(fail, frame).start(); } } "	0	0	0	0	1	0
public T Func1(String var1) { return click(ActionClick.SUGGEST, var1); } 	0	0	0	0	1	0
public static PixelCoordinate Func1(BoardCoordinate var1) { double var2 = 96.0 / Math.sqrt( 3.0 ); int var3 = ( int )( Math.round((var1.c + 7) * 0.75 * var2 + 0.5 * var2 )); return new PixelCoordinate(var3, 360); } 	0	0	0	0	1	0
"@Override public void Func1() { if (getUseGitHubHooks()) { logger.log(Level.FINE, ""Use webHooks is set, so not running trigger""); return; } if ((helper != null && helper.isProjectDisabled()) || (_project != null && _project.isDisabled())) { logger.log(Level.FINE, ""Project is disabled, ignoring trigger Func1 call""); return; } if (helper == null) { logger.log(Level.SEVERE, ""Helper is null and Project is not disabled, unable to Func1 trigger""); return; } logger.log(Level.FINE, ""Running trigger for {0}"", project); helper.Func1(); getDescriptor().save(); } "	0	0	0	0	1	0
@Override public LayoutParams Func1(AttributeSet var1) { return new LayoutParams(this.getContext(), var1); } 	0	0	0	0	1	0
@Override public XAConnection Func1() throws JMSException { return Func1(null, null); } 	0	0	0	0	1	0
@Override public int Func1(Entry var1) { return CASE_INSENSITIVE_ORDER.compare(name, var1.name); } 	1	0	1	1	1	0
@Override public int Func1(final CommitFile var1, final CommitFile var2) { String var3 = var1.getFilename(); final int var4 = var3.lastIndexOf('/'); if (var4 != -1) var3 = var3.substring(var4 + 1); String var5 = var2.getFilename(); final int var6 = var5.lastIndexOf('/'); if (var6 != -1) var5 = var5.substring(var6 + 1); return CASE_INSENSITIVE_ORDER.Func1(var3, var5); } 	0	0	1	1	1	0
protected void Func1(String var1, List<OntologyTerm> var2) { if (StringUtils.isNotBlank(var1)) { OntologyTerm var3 = this.ontologyManager.resolveTerm(var1); if (var3 != null) { var2.add(var3); } } } 	0	0	0	1	0	0
"@Override public void Func1(HttpServletRequest var1, HttpServletResponse var2) throws IOException, ServletException { var1.setCharacterEncoding(""utf-8""); try { String  var3       = this.getAppid(var1); String  var4          = var1.getParameter(TIMESTAMP); Long    var5   = var4!=null ? Long.valueOf(var4) : System.currentTimeMillis(); String  var6    = var1.getParameter(NONCE_STR); var6    = var6!=null ? var6 : this.crypto.bytesToHex(this.crypto.randomBytes(8)); String  var7         = needString(var1, URL); this.checkAccess(var7); TokenProvider var8 = this.getTokenProvider(appid); String var9 = this.getTicket(var3); URLBuilder var10 = new URLBuilder() .appendParam(""jsapi_ticket"" , var9                ) .appendParam(""noncestr""     , var6              ) .appendParam(""var5""    , var5.toString()  ) .appendParam(""var7""          , var7                   ); String var11 = this.crypto.bytesToHex( this.crypto.SHA1Digest( var10.toString().getBytes(""utf-8"") ) ); this.response(var2, var8, var5, var6, var11); } catch(Exception ex) { this.onError(ex, var1, var2); } } "	0	0	0	0	1	0
protected void Func1() throws KrbException { KdcReq var1 = getKdcReq(); if (!kdcContext.getConfig().isAllowTokenPreauth()) { return; } PaData var2 = var1.getPaData(); if (preauthContext.isPreauthRequired()) { if (var2 == null || var2.isEmpty()) { KrbError var3 = makePreAuthenticationError(kdcContext); throw new KrbErrorException(var3); } else { getPreauthHandler().verify(this, var2); } } setPreAuthenticated(true); } 	0	0	0	0	1	0
"protected void Func1(String var1) { System.Func1.println(""VideoExport error: "" + var1); System.exit(1); } "	0	0	0	0	1	0
"public boolean Func1(String var1, String var2) { if (secret == null || StringUtils.isEmpty(secret.getPlainText())) { return true; } if (var2 != null && var2.startsWith(""sha1="")) { String var3 = var2.substring(5); String var4 = ""HmacSHA1""; try { SecretKeySpec var5 = new SecretKeySpec(secret.getPlainText().getBytes(), var4); Mac var6 = Mac.getInstance(var4); var6.init(var5); byte[] var7 = var6.doFinal(var1.getBytes(""UTF-8"")); String var8 = Hex.encodeHexString(var7); if (! var8.equals(var3)) { logger.log(Level.SEVERE, ""Local var2 {0} does not match external var2 {1}"", new Object[] {var8, var3}); return false; } } catch (Exception e) { logger.log(Level.SEVERE, ""Couldn't match both signatures""); return false; } } else { logger.log(Level.SEVERE, ""Request doesn't contain a var2. Check that github has a secret that should be attached to the hook""); return false; } logger.log(Level.INFO, ""Signatures checking OK""); return true; } "	0	0	0	0	1	0
"protected void Func1(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException { HttpSession var3 = var1.getSession(false); UserBean var4 = (var3 != null) ? (UserBean) var3.getAttribute(""var4"") : null; if (var4 == null) { var2.sendRedirect(var1.getContextPath() + ""/login""); } else { String var5 = (String) var3.getAttribute(""var5""); String var6 = (String) var3.getAttribute(""var6""); int var7 = var3.getAttribute(""var7"") != null ? (int) var3.getAttribute(""var7"") : -1; if (var5 != null && var6 != null && var7 > -1) { var1.setAttribute(""var5"", var5); var1.setAttribute(""var6"", var6); var1.setAttribute(""var7"", var7); var3.setAttribute(""var5"", null); var3.setAttribute(""var6"", null); var3.setAttribute(""var7"", null); var1.getRequestDispatcher(""test-var7.jsp"").forward(var1, var2); } else { var1.setAttribute(""var5"", ""warning""); var1.setAttribute(""var6"", ""You can see the var7 after completing the test.""); var1.getRequestDispatcher(""error-access.jsp"").forward(var1, var2);; } } } "	0	0	1	0	1	0
"@Override public void Func1(SubscriberLocationReportResponse var1) { if (logger.isDebugEnabled()) { logger.debug(String.format(""Func1  for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } else { logger.info(String.format(""Func1  for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } try { if (var1.getNaESRD() != null) { ISDNAddressString var2 = var1.getNaESRD(); String var3 = var2.getAddress(); if (logger.isDebugEnabled()) { logger.debug(String.format(""Rx Func1 NaESRD = %s "" + var3 + ""for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } else { logger.info(String.format(""Rx Func1 NaESRD: "" + var1.getNaESRD() + "", for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } } else { if (logger.isDebugEnabled()) { logger.debug(String.format( ""Rx Func1, Incorrect NaESRD received for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } else { logger.info(String.format( ""Rx Func1, Incorrect NaESRD received for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } } if (var1.getNaESRK() != null) { ISDNAddressString var4 = var1.getNaESRD(); String var5 = var4.getAddress(); if (logger.isDebugEnabled()) { logger.debug(String.format(""Rx Func1 NaESRK = %s "" + var5 + ""for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } else { logger.info(String.format(""Rx Func1 NaESRK: "" + var1.getNaESRK() + "", for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } } else { if (logger.isDebugEnabled()) { logger.debug(String.format( ""Rx Func1, Incorrect NaESRK received for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } else { logger.info(String.format( ""Rx Func1, Incorrect NaESRK received for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } } if (var1.getExtensionContainer() != null) { MAPExtensionContainer var6 = var1.getExtensionContainer(); String var7 = var6.toString(); if (logger.isDebugEnabled()) { logger.debug(String.format(""Rx Func1 MAPExtensionContainer = %s "" + var7 + ""for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } else { logger.info(String.format(""Rx Func1 MAPExtensionContainer: "" + var1.getExtensionContainer() + "", for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } } else { if (logger.isDebugEnabled()) { logger.debug(String.format( ""Rx Func1, Incorrect MAPExtensionContainer received for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } else { logger.info(String.format( ""Rx Func1, Incorrect MAPExtensionContainer received for DialogId=%d"", var1.getMAPDialog().getLocalDialogId())); } } } catch (Exception e) { logger.error(String.format(""Error while processing onProvideSubscriberLocationResponse for Dialog=%d"", var1.getMAPDialog().getLocalDialogId())); } } "	0	0	1	0	0	0
"private void Func1(){ if (backuping) return; backuping = true; Toast.makeText(app.getApplicationContext(), getString(R.string.backup_local), Toast.LENGTH_SHORT).show(); mThreadExecutorPool.execute(() -> { List<SNote> var1 = mFinalDb.findAllByWhere(SNote.class, "" type = 0""); mFileUtils.backupSNotes(var1); backuping = false; if (activity != null){ activity.runOnUiThread(() -> { Toast.makeText(app.getApplicationContext(), getString(R.string.backup_local_done), Toast.LENGTH_SHORT).show(); }); } }); } "	0	0	0	0	1	0
"@Test public void Func1() { SettingsFragment var1 = new SettingsFragment(); startFragment(var1); assertNotNull(var1); var1.background_sync.setChecked(true); var1.background_sync.performClick(); String var2 = ""Background sync is OFF""; assertEquals(var2, var1.background_sync_status.getText()); assertEquals(""false"", var1.preferences.getString(BACKGROUND_SYNC, """")); } "	0	0	0	0	1	0
"@Override public void Func1() { super.Func1(); Map<String, Target> var1 = new HashMap<>(); var1.put(""m.drakeet.me/home"", new Target(""floo://drakeet.sdk/target"")); var1.put(""m.drakeet.me/link"", new Target(""floo://drakeet.sdk/target"")); var1.put(""m.drakeet.me/web"", new Target(""floo://drakeet.sdk/web"")); var1.put(""m.drakeet.me/container"", new Target(""demo://m.drakeet.me/container"")); Floo.configuration() .setDebugEnabled(BuildConfig.DEBUG) .addRequestInterceptor(new LogInterceptor(""Request"")) .addTargetInterceptor(new LogInterceptor(""Target"")) .addTargetNotFoundHandler(new WebHandler()) .addTargetNotFoundHandler(new OpenDirectlyHandler()) .addTargetNotFoundHandler(new TargetNotFoundToaster()); Floo.apply(var1); } "	0	0	1	0	0	0
public boolean Func1(Menu var1) { MenuInflater var2 = getMenuInflater(); var2.inflate(R.var1.main_menu, var1); return true; } 	0	0	0	0	1	0
@Override public void Func1(String var1) { try { outputStream.write(var1.getBytes()); } catch (IOException e) { throw new IllegalStateException(e); } } 	0	0	1	0	1	0
public String Func1(int var1, int var2) { try { Component var3 = getCellRendererComponent(var1, var2); if (isCheckboxRenderer(var3)) return new Boolean(((AbstractButton) var3).isSelected()).toString(); return coerceToWithText(var3).getText(); } catch (AllMethodsNotImplementedException e) { return wrapElementToWithText(var1, var2).getText(); } } 	0	0	0	0	1	0
"private static String Func1(URI var1) throws URIException { StringBuilder var2 = new StringBuilder(); String var3 = var1.getScheme().toLowerCase(); var2.append(var3).append(""://"").append(var1.getHost()); int var4 = var1.getPort(); if (var4 != -1 && ((var4 == 80 && !""http"".equals(var3)) || (var4 == 443 && !""https"".equals(var3) || (var4 != 80 && var4 != 443)))) { var2.append("":"").append(var4); } return var2.toString(); } "	0	0	1	1	0	0
public void Func1(String var1) { storage.set(TYPE, var1); } 	0	0	0	0	1	0
"public void Func1(Model var1){ org.springframework.security.core.userdetails.User var2 = Utilities.getCurrentUser(); var1.addAttribute(""userName"", var2.getUsername()); com.sanyo.quote.domain.User var3 = userService.findByUserName(var2.getUsername()); var1.addAttribute(""var2"",var3); } "	0	0	0	0	1	0
private void Func1(XSSFSheet var1, RowCount var2, int var3){ var2.addMoreValue(1); Row var4 = var1.createRow(var2.getRowCount()); var2.addMoreValue(1); Cell var5 = var4.createCell(1); var5.setCellValue(Constants.BREAK_DOWN); var5.setCellStyle(sampleCellStyle); updateCellStyleOfRowBoQ(var4); } 	0	0	0	0	1	0
"private synchronized void Func1() { if (!flowControlEnabled) { flowControlEnabled = true; listener.block(); scheduledFlowControlTimeoutFuture = executor.schedule(flowControlTimeoutTask, 1, TimeUnit.MINUTES); log.info(""Flow control enabled for channel "" + id + "".""); } } "	0	0	0	0	1	0
"public CohortDefinition Func1(){ Concept var1 = Dictionary.getConcept(Dictionary.OI_TREATMENT_DRUG); Concept var2 = Dictionary.getConcept(Dictionary.SULFAMETHOXAZOLE_TRIMETHOPRIM); CompositionCohortDefinition var3 = new CompositionCohortDefinition(); var3.setName(""hiv patient on CTX""); var3.addParameter(new Parameter(""onOrAfter"", ""After Date"", Date.class)); var3.addParameter(new Parameter(""onOrBefore"", ""Before Date"", Date.class)); var3.addSearch(""enrolledHIV"", ReportUtils.map(commonCohorts.enrolled(MetadataUtils.existing(Program.class, Metadata.Program.HIV)),""enrolledOnOrAfter=${onOrAfter},enrolledOnOrBefore=${onOrBefore}"")); var3.addSearch(""enrolled"", ReportUtils.map(commonCohorts.enrolled(MetadataUtils.existing(Program.class, Metadata.Program.ART)),""enrolledOnOrBefore=${onOrBefore}"")); var3.addSearch(""hasctx"", ReportUtils.map(commonCohorts.hasObs(var1,var2), ""onOrAfter=${onOrAfter},onOrBefore=${onOrBefore}"")); var3.setCompositionString(""enrolledHIV AND NOT enrolled AND hasctx""); return var3; } "	0	0	0	0	1	0
"@Override public boolean Func1(int var1, int var2) { if (currentUser == null || currentUser.scarfplot == null) return false; int var3 = currentUser.timeToPixel(currentUser.currentTime); Rectangle var4 = new Rectangle(var3-3,heatmapYOffset-50,currentUser.cellWidth+3,heatmapYOffset+currentUser.scarfplot.getHeight()); int var5 = currentUser.timeToPixel(currentUser.timePeriodStart); Rectangle var6 = new Rectangle(var5-3,heatmapYOffset-50,currentUser.cellWidth+3,heatmapYOffset+currentUser.scarfplot.getHeight()); int var7 = currentUser.timeToPixel(currentUser.timePeriodEnd); Rectangle var8 = new Rectangle(var7-3,heatmapYOffset-50,currentUser.cellWidth+3,heatmapYOffset+currentUser.scarfplot.getHeight()); if (var4.contains(new Point(var1,var2))) timeLineHovered = new Point(var1,var2); else{ timeLineHovered = null; if (var6.contains(new Point(var1,var2))) startPeriodHovered = new Point(var1,var2); else startPeriodHovered = null; if (var8.contains(new Point(var1,var2))) endPeriodHovered = new Point(var1,var2); else endPeriodHovered = null; } this.setToolTipText(""""); dataObjectHovered = -1; for (int var9=0; var9< users.size(); var9++){ var4 = new Rectangle(0, heatmapYOffset+currentUser.cellHeight*var9, currentUser.heatmapXOffset+currentUser.scarfplot.getWidth(),currentUser.cellHeight); if (var4.contains(new Point(var1,var2))){ dataObjectHovered = var9; this.setToolTipText(users.get(var9).name); } } requestRender(); return false; } "	0	0	0	0	1	0
"public static Processor Func1(String var1, String var2) { for (Processor var3 : values()) { if (var3.isType(var1, var2)) { return var3; } } LOGGER.error(""no property for "" + var1 + "", "" + var2); return null; } "	0	0	1	0	1	0
public ErrorDescriptor Func1() throws IOException { Gson var1 = GsonFactory.create(); InputStream var2 = response.body().byteStream(); InputStreamReader var3 = new InputStreamReader(var2); try { return var1.fromJson(var3, ErrorDescriptor.class); } catch (JsonParseException ex) { return null; } } 	0	0	0	0	1	0
public void Func1(int var1) { if (mValues!=null) mValues.add(var1); } 	0	0	1	0	1	0
"@Test public void Func1() throws IOException, StructureException { testAll(Arrays.asList(""2trx"")); } "	0	0	0	0	1	0
"@Test public void Func1() throws JAXBException, IOException { highScore.loadHighScores(); highScore.addHighScore(newScore, ""Jan""); File var1 = new File(""highscores.xml""); assertTrue(var1.exists()); assertTrue(var1.length() > 0); HighScore var2 = new HighScore(); var2.loadHighScores(); assertTrue(var2.getHighScores().containsValue(""Jan"")); assertTrue(var2.getHighScores().containsKey(newScore)); assertTrue(var2.getHighScores().size() <= 5); Files.copy(testHighScores, highScores, StandardCopyOption.REPLACE_EXISTING); } "	0	0	0	0	1	0
"@Override public String Func1() { return name + "" took "" + ((System.currentTimeMillis() - time) / 1000d) + "" seconds""; } "	0	0	0	0	1	0
"public void Func1() { try { NameTable.define(full_name(), IDLTypes.MODULE); } catch (NameAlreadyDefined nad) { parser.error(""Module name "" + full_name() + "" already defined"", token); } spec.Func1(); } "	0	0	0	0	1	0
@Override public MCRObjectID Func1(String var1) { return MCRObjectID.getInstance(var1); } 	1	0	1	1	1	0
"void Func1(@Nonnull ConnectivityState var1) { checkNotNull(var1, ""var1""); checkState(state != null, ""ConnectivityStateManager is already disabled""); gotoNullableState(var1); } "	0	0	0	0	1	0
public String Func1() { return tester.fileToTest.getName(); } 	0	0	0	0	1	0
public void Func1(int var1) { if(!var1){ removeCardFormCol(var1); } } 	0	0	0	0	1	0
public static int Func1(EntityPlayer var1) { return var1 != null ? var1.getCapability(MUSIC_OPTIONS, null).Func1() : MusicOptionsUtil.EnumMuteOptions.OFF.getMetadata(); } 	1	0	1	1	1	0
public static void Func1(EntityPlayer var1, List<PlayerLists> var2) { if (var1 != null) var1.getCapability(MUSIC_OPTIONS, null).Func1(var1, var2); } 	1	0	0	0	1	0
"public static String Func1(EntityPlayer var1) { return var1 != null ? var1.getCapability(MUSIC_OPTIONS, null).Func1() : """"; } "	1	0	1	1	1	0
"public static String Func1(EntityPlayer var1) { return var1 != null ? var1.getCapability(MUSIC_OPTIONS, null).Func1() : """"; } "	1	0	1	1	1	0
public static boolean Func1(EntityPlayer var1) { return var1 != null ? var1.getCapability(MUSIC_OPTIONS, null).Func1() : false; } 	1	0	1	1	1	0
public static List<PlayerLists> Func1(EntityPlayer var1) { return var1!= null ? var1.getCapability(MUSIC_OPTIONS, null).Func1() : Collections.emptyList(); } 	1	0	1	1	1	0
"private void Func1(NubUsage var1, SrcUsage var2, Origin var3, NubUsage var4) { if (var1.status.isSynonym() != var2.status.isSynonym()) { return; } LOG.debug(""Updating {} from source {}"", var1.parsedName.getScientificName(), var2.scientificName); var1.sourceIds.add(var2.key); if (var3 == Origin.SOURCE) { var1.var3 = Origin.SOURCE; } var1.authors.add(var2.parsedName.authorshipComplete()); if (!var2.parsedName.authorshipComplete().isEmpty() && var1.parsedName.authorshipComplete().isEmpty()) { var1.parsedName.setAuthorship(var2.parsedName.getAuthorship()); var1.parsedName.setYear(var2.parsedName.getYear()); var1.parsedName.setBracketAuthorship(var2.parsedName.getBracketAuthorship()); var1.parsedName.setBracketYear(var2.parsedName.getBracketYear()); var1.parsedName.setAuthorsParsed(true); } if (var1.publishedIn == null) { var1.publishedIn = var2.publishedIn; } if (var1.nomStatus.isEmpty()) { var1.addNomStatus(var2.nomStatus); } NubUsage var5 = db.getParent(var1); if (var4 != null && var5.rank.higherThan(var4.rank) ) { if (db.existsInClassification(var4.node, var5.node)) { LOG.debug(""Update {} classification with new var4 {} {}"", var1.parsedName.getScientificName(), var4.rank, var4.parsedName.getScientificName()); db.updateParentRel(var1.node, var4.node); } } db.store(var1); } "	0	0	0	0	1	0
"@Override public AddPersistedFaceResult Func1(String var1, UUID var2, InputStream var3, String var4, FaceRectangle var5) throws ClientException, IOException { Map<String, Object> var6 = new HashMap<>(); String var7 = String.format(""%s/%s/%s/%s/%s/%s"", mServiceHost, PERSON_GROUPS_QUERY, var1, PERSONS_QUERY, var2, PERSISTED_FACES_QUERY); if (var4 != null && var4.length() > 0) { var6.put(""var4"", var4); } if (var5 != null) { String var8 = String.format(""%1d,%2d,%3d,%4d"", var5.left, var5.top, var5.width, var5.height); var6.put(""var5"", var8); } String var9 = WebServiceRequest.getUrl(var7, var6); ByteArrayOutputStream var10 = new ByteArrayOutputStream(); int var11; byte[] var12 = new byte[1024]; while ((var11 = var3.read(var12)) > 0) { var10.write(var12, 0, var11); } byte[] var13 = var10.toByteArray(); var6.clear(); var6.put(DATA, var13); String var14 = (String)mRestCall.request(var9, RequestMethod.POST, var6, STREAM_DATA); return mGson.fromJson(var14, AddPersistedFaceResult.class); } "	0	0	0	0	1	0
void Func1(final Callback var1, final String var2, final JSONArray var3) { Runnable var4 = new Runnable() { public void Func2() { var1.disconnectCallback(var2, var3); } }; PnThread var5 = new PnThread(var4); var5.setPnDaemon(Pubnub.daemonThreads); var5.start(); } 	0	0	1	0	1	0
"public void Func1(@Nonnull final RelationKey var1, @Nonnull final List<IndexRef> var2) throws CatalogException { Objects.requireNonNull(var1, ""var1""); Objects.requireNonNull(var2, ""var2""); if (isClosed) { throw new CatalogException(""Catalog is closed.""); } for (int var3 = 0; var3 < var2.size(); var3++) { final int var4 = var3; try { queue.execute(new SQLiteJob<Void>() { @Override protected Void Func2(final SQLiteConnection var5) throws CatalogException, SQLiteException { try { SQLiteStatement var6 = var5 .prepare(""UPDATE relations_schema SET is_indexed=1 WHERE user_name=? AND program_name=? AND relation_name=? AND col_index=?;""); var6.bind(1, var1.getUserName()); var6.bind(2, var1.getProgramName()); var6.bind(3, var1.getRelationName()); var6.bind(4, var2.get(var4).getColumn()); var6.stepThrough(); var6.dispose(); var6 = null; } catch (final SQLiteException e) { throw new CatalogException(e); } return null; } }).get(); } catch (InterruptedException | ExecutionException e) { throw new CatalogException(e); } } } "	0	0	1	0	0	0
private void Func1(boolean var1) { OrganismRestService.Func1(selectedOrganismInfo,var1); } 	0	0	0	0	1	0
@Override protected void Func1() { bind(AMQPSession.class); bind(RabbitMQManager.class); if (!properties.hasListenAs()) { DynamicSet.bind(binder(), ChangeListener.class).to(RabbitMQManager.class); } DynamicSet.bind(binder(), LifecycleListener.class).to(RabbitMQManager.class); } 	0	0	0	0	1	0
public static SequenceModel Func1(float var1, int var2){ SequenceModel var3 = new SequenceModel(); Map<String,String> Func1 = EmailUtils.readDBpedia(1.0); Set<String> var5 = new LinkedHashSet<>(); var5.add(WordSurfaceFeature.WORDS); FeatureDictionary var6 = new FeatureDictionary(Func1, var1, var2); var3.var6 = var6; return var3; } 	0	0	0	0	1	0
"private void Func1(BinnedOccurenceEntity var1) { GraphicsContext var2		= canvas.getGraphicsContext2D(); int var3[][]		= var1.getBinMatrix(); int var4	= var1.getMinOccurenceCount(); int var5	= var1.getMaxOccurenceCount(); xAxis.setLowerBound(var1.getMin_key1()); xAxis.setUpperBound(var1.getMax_key1()); yAxis.setLowerBound(var1.getMin_key2()); yAxis.setUpperBound(var1.getMax_key2()); final int var6 = var3.length; xAxis.setTickUnit( (var1.getMax_key1() - var1.getMin_key1()) / var6); yAxis.setTickUnit( (var1.getMax_key2() - var1.getMin_key2()) / var6); xAxis.setMinorTickCount(4); yAxis.setMinorTickCount(4); var2.clearRect(0, 0, canvas.getWidth(), canvas.getHeight()); final double var7	= canvas.getWidth() / var3.length; final double var8	= canvas.getHeight() / var3.length; for (int var9 = 0; var9 < var3.length; var9++) { for (int var10 = 0; var10 < var3[var9].length; var10++) { Color var11 = ColorScale.getColorForValue(var3[var9][var10], var4, var5); var2.setStroke(var11); var2.setFill(var11); var2.fillRect(var7 * var9, var8 * var10, var7, var8); } } } "	0	0	1	1	1	0
"@Test public void Func1() throws IOException, XmlPullParserException { final MavenProject var1 = createMavenProjectFromPom(""DistributionManagementCheckTest-NoSnapshotRepo-pom.xml""); final DistributionManagementCheck var2 = new DistributionManagementCheck(); final Iterable<PomIssue> var3 = var2.analyze(var1); assertThat(Iterables.size(var3), is(1)); PomIssue var4 = Iterables.getOnlyElement(var3); assertThat(var4.ruleKey(), is(""distribution-management-by-category"")); assertThat(var4.message(), is(""Distribution Management is missing required <snapshotRepository> configuration."")); } "	0	0	0	0	1	0
@Test public void Func1() { final IntHashSet var1 = new IntHashSet(100, 1); assertNotEquals(obj, var1); } 	0	0	0	0	1	0
@Test public void Func1() { assertFalse(obj.remove(0)); } 	0	0	0	0	1	0
@Override public Object Func1(TransitionSystem var1, Unifier var2, Term[] var3) throws Exception { checkArguments(var3); Calendar var4 = new GregorianCalendar(); return var2.unifies(var3[0], new NumberTermImpl(var4.get(Calendar.YEAR))) && var2.unifies(var3[1], new NumberTermImpl(var4.get(Calendar.MONTH))) && var2.unifies(var3[2], new NumberTermImpl(var4.get(Calendar.DAY_OF_MONTH))); } 	1	1	1	1	0	0
"@Override public void Func1(PacketDataSerializer var1) { if(channel != null) var1.writeString(channel); try{ data.readerIndex(0); int var2 = data.readableBytes(); var1.ensureWritable(var2, true); var1.writeBytes(data, var2); data.release(); }catch(Exception e){ System.out.println(""out - Buffer: ""+data+"" - ""+var2); throw e; } } "	0	0	1	1	1	0
"private void Func1(final UUID var1) throws IOException, InterruptedException { final OrganizationService var2 = cfg.registry.createRegistryInjector().getInstance(OrganizationService.class); final PagingRequest var3 = new PagingRequest(0, 10); PagingResponse<Dataset> var4 = null; int var5 = 0; while (var4 == null || !var4.isEndOfRecords()) { var4 = var2.publishedDatasets(var1, var3); for (Dataset var6 : var4.getResults()) { var5++; LOG.info(""Crawl {} - {}: {}"", var5, var6.getKey(), var6.getTitle()); publisher.send( new StartCrawlMessage(var6.getKey())); } Thread.sleep(10000); var3.nextPage(); } } "	0	0	1	1	1	0
"public static JSONObject Func1(String var1, String var2) { JSONObject var3 = new JSONObject(true); try { DocumentBuilderFactory var4 = DocumentBuilderFactory.newInstance(); DocumentBuilder var5 = var4.newDocumentBuilder(); Document var6 = var5.parse(var1); DOMSource var7 = new DOMSource(var6); StringWriter var8 = new StringWriter(); StreamResult var9 = new StreamResult(var8); TransformerFactory var10 = TransformerFactory.newInstance(); Transformer var11 = var10.newTransformer(); var11.transform(var7, var9); JSONObject var12 = new JSONObject(true); var12 = XML.toJSONObject(var8.toString()); JSONObject var13 = var12.getJSONObject(var2).getJSONObject(""Items""); if (var13.getJSONObject(""Request"").has(""Errors"")) { var3.put(""status"", ""error""); var3.put(""reason"", var13.getJSONObject(""Request"").getJSONObject(""Errors"").getJSONObject(""Error"").get(""Message"")); return var3; } var3.put(""number_of_items"", (var2.equals(""ItemLookupResponse"") ? ""1"" : (var13.getJSONArray(""Item"").length()))); var3.put(""list_of_items"", var13); } catch (Exception e) { var3.put(""status"", ""error""); var3.put(""reason"", e); return var3; } return var3; } "	0	0	1	1	0	0
"public void Func1() { for (String var1 = commandCache.getNextTestCase(); var1 != null; var1 = commandCache.getNextTestCase()) { if (RuntimeParameters.getAbortTestScheduleBool()) { break; } ivctCommander.rtp.startTestCase(var1); this.ivctCommander.acquireSemaphore(); } ivctCommander.addTestSessionSeparator(); RuntimeParameters.setAbortTestScheduleBool(false); ivctCommander.rtp.setTestScheduleRunningBool(false); System.out.println(""Test schedule finished: "" + commandCache.getTestschedule()); } "	0	0	0	0	1	0
"public Optional<SoP> Func1(Condition var1, ServiceHistory var2, Predicate<Deployment> var3, CaseTrace var4) { Optional<Rank> var5 = ProcessingRuleFunctions.getRankProximateToDate(var2.getServices(),var1.getStartDate(),var4); if (!var5.isPresent()) { var4.addReasoningFor(ReasoningFor.ABORT_PROCESSING, ""Cannot determine the relevant rank, therefore cannot apply STP rules to determine the applicable SoP.""); return Optional.empty(); } Optional<Service> var6 =  ProcessingRuleFunctions.identifyServiceDuringOrAfterWhichConditionOccurs(var2.getServices(),var1.getStartDate(), var4); if (!var6.isPresent()) { var4.addReasoningFor(ReasoningFor.ABORT_PROCESSING, ""Cannot find any Service during or after which the var1 started, therefore there is no applicable SoP.""); return Optional.empty(); } Optional<RHRuleConfigurationItem> var7 = getRelevantRHConfiguration( var1.getSopPair().getConditionName(), var5.get(), var6.get().getBranch(), ruleConfigurationRepository); if (!var7.isPresent()) { var4.addReasoningFor(ReasoningFor.ABORT_PROCESSING, String.format(""Cannot find any rule for Reasonable Hypothesis for the var1 of %s, for the rank of %s, for the service branch of %s.  Therefore, cannot determine whether BoP or RH SoP applies."", var1.getSopPair().getConditionName(), var5.get(), var6.get().getBranch())); return Optional.empty(); } RHRuleConfigurationItem var8 = var7.get(); OffsetDateTime var9 = var1.getStartDate().minusYears(var8.getYearsLimitForOperationalService()); var4.addLoggingTrace(String.format(""The start date for the test period of operational service is %s years before the var1 start date of %s: %s."", var8.getRequiredDaysOfOperationalService(), var1.getStartDate(), var9)); OffsetDateTime var10 = var1.getStartDate(); var4.addLoggingTrace(""The end date for the test period of operational service is the var1 start date: "" + var1.getStartDate()); Long var11 = ProcessingRuleFunctions.getNumberOfDaysOfOperationalServiceInInterval( var9,var10, ProcessingRuleFunctions.getDeployments(var2), var3, var4); if (var11 >= Integer.MAX_VALUE) { throw new ProcessingRuleError(""Cannot handle days of operational service more than "" + Integer.MAX_VALUE);  // for the appeasement of find bugs } var4.setActualOperationalDays(var11.intValue()); Integer var12 = var8.getRequiredDaysOfOperationalService(); var4.addReasoningFor(ReasoningFor.STANDARD_OF_PROOF, ""Required number of days of operational service for Reasonable Hypothesis: "" + var12); var4.setRequiredOperationalDaysForRh(var12); var4.addReasoningFor(ReasoningFor.STANDARD_OF_PROOF, ""Actual number of days of operational service: "" + var11); if (var12.longValue() <= var11) { var4.addLoggingTrace(""The RH SoP is applicable as the actual number of days of operational service in the test period is greater than or equal to the required number.""); var4.setApplicableStandardOfProof(StandardOfProof.ReasonableHypothesis); return Optional.of(var1.getSopPair().getRhSop()); } else { var4.addLoggingTrace(""The BoP SoP is applicable as the actual number of days of operational service in the test period is less than the required number.""); var4.setApplicableStandardOfProof(StandardOfProof.BalanceOfProbabilities); return Optional.of(var1.getSopPair().getBopSop()); } } "	0	0	0	0	0	1
"protected void Func1() { NSpec var1 = new NSpec(); var1.setName(""http""); var1.setServiceClass(""foam.nano.http.HttpServer""); serviceDAO_.put(var1); } "	0	0	0	0	1	0
"public ItemInformationResponse Func1(ItemResponse var1) { ItemInformationResponse var2 = new ItemInformationResponse(); ItemData var3 = var1.getItemData(); var2.setItemBarcode((String) var3.getBarcode()); var2.setBibID(var3.getBibIds().get(0)); var2.setBibIds(var3.getBibIds()); var2.setCallNumber((String) var3.getCallNumber()); var2.setItemType((String) var3.getItemType()); var2.setSource(var3.getNyplSource()); var2.setUpdatedDate(formatFromSipDate(var3.getUpdatedDate())); var2.setCreatedDate(formatFromSipDate(var3.getCreatedDate())); var2.setDeletedDate(formatFromSipDate((String) var3.getDeletedDate())); var2.setDeleted(var3.getDeleted() != null ? (Boolean) var3.getDeleted() : false); if (null != var3.getStatus()) { var2.setDueDate(formatFromSipDate((String) ((LinkedHashMap) var3.getStatus()).get(""dueDate""))); var2.setCirculationStatus((String) ((LinkedHashMap) var3.getStatus()).get(""display"")); } if (null != var3.getLocation()) { var2.setCurrentLocation((String) ((LinkedHashMap) var3.getLocation()).get(""name"")); } var2.setSuccess(true); return var2; } "	0	0	0	0	1	0
"@Path( ""/urlmap"" ) @Produces( { ""application/json"", ""application/indy*+json"" } ) @POST public UrlMapResult Func1( final RepositoryContentRequest var1, final @Context UriInfo var2 ) { try { final String var3 = var2.getAbsolutePathBuilder().path( ""api"" ).build().toString(); return controller.Func1( var1, var3, new JaxRsUriFormatter() ); } catch ( final IndyWorkflowException e ) { logger.error( e.getMessage(), e ); throwError( e ); } return null; } "	0	0	0	0	1	0
"@Override public void Func1(final String var1) { if (type != TYPE_SIGNATURE || state != EMPTY) { throw new IllegalStateException(); } CheckMethodAdapter.checkIdentifier(var1, ""type variable""); state = SIMPLE_TYPE; if (sv != null) { sv.Func1(var1); } } "	0	0	1	1	1	0
"@Override public void Func1(final String var1) { if (type == TYPE_SIGNATURE || (state != EMPTY && state != FORMAL && state != BOUND)) { throw new IllegalStateException(); } CheckMethodAdapter.checkIdentifier(var1, ""formal type parameter""); state = FORMAL; if (sv != null) { sv.Func1(var1); } } "	0	0	1	1	1	0
"public void Func1 (IntraUserInformation var1){ if (var1.getPublicKey() != null) { username.setText(var1.getName()); if (var1.getCity()!=null||var1.getCountry()!=null) location.setText(var1.getCountry()+"", ""+var1.getCity()); else location.setText(""No Location""); if (var1.getProfileImage() != null && var1.getProfileImage().length > 0) { Bitmap var2 = BitmapFactory.decodeByteArray(var1.getProfileImage(), 0, var1.getProfileImage().length); var2 = Bitmap.createScaledBitmap(var2, 120, 120, true); imageView_avatar.setImageDrawable(ImagesUtils.getRoundedBitmap(res, var2)); } } } "	0	0	0	0	1	0
"@Override public void Func1(View var1, @Nullable Bundle var2) { super.Func1(var1, var2); toolbar.setTitle(""UserInfoTabs""); mSectionsPagerAdapter = new SectionsPagerAdapter(mManager, mFetcher, mSectionCardListener, mArticleListener); mViewPager.setAdapter(mSectionsPagerAdapter); tabLayout.setupWithViewPager(mViewPager); } "	0	0	0	0	1	0
"private void Func1() { try { final SurfaceTexture var1 = textureView.getSurfaceTexture(); assert var1 != null; var1.setDefaultBufferSize(previewSize.getWidth(), previewSize.getHeight()); final Surface var2 = new Surface(var1); previewRequestBuilder = cameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW); previewRequestBuilder.addTarget(var2); LOGGER.i(""Opening camera preview: "" + previewSize.getWidth() + ""x"" + previewSize.getHeight()); previewReader = ImageReader.newInstance( previewSize.getWidth(), previewSize.getHeight(), ImageFormat.YUV_420_888, 2); previewReader.setOnImageAvailableListener(tfPreviewListener, backgroundHandler); previewRequestBuilder.addTarget(previewReader.getSurface()); cameraDevice.createCaptureSession( Arrays.asList(var2, previewReader.getSurface()), new CameraCaptureSession.StateCallback() { @Override public void Func2(final CameraCaptureSession var3) { if (null == cameraDevice) { return; } captureSession = var3; try { previewRequestBuilder.set( CaptureRequest.CONTROL_AF_MODE, CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE); previewRequestBuilder.set( CaptureRequest.CONTROL_AE_MODE, CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH); previewRequest = previewRequestBuilder.build(); captureSession.setRepeatingRequest( previewRequest, captureCallback, backgroundHandler); } catch (final CameraAccessException e) { LOGGER.e(e, ""Exception!""); } } @Override public void Func3(final CameraCaptureSession var3) { showToast(""Failed""); } }, null); } catch (final CameraAccessException e) { LOGGER.e(e, ""Exception!""); } LOGGER.i(""Getting assets.""); tfPreviewListener.initialize( getActivity().getAssets(), scoreView, inferenceHandler, sensorOrientation); LOGGER.i(""Tensorflow initialized.""); } "	0	0	1	1	1	0
"private static Database Func1(String[] var1) { try { CommandLine var2 = parser.parse(optionList, var1); if (var2.hasOption(""filePath"")) { try { Database var3 = new Database( var2.getOptionValue(""filePath"")); logger.info(""Opening file at "" + var2.getOptionValue(""filePath"")); return var3; } catch (Exception e) { logger.info(""Something is wrong with your file""); System.exit(1); } } if (var2.hasOption(""help"")) { printHelp(optionList); } return null; } catch (org.apache.commons.cli.ParseException e) { logger.info(ErrorMessage.OPTION_NOT_FOUND); printHelp(optionList); } return null; } "	0	0	0	0	1	0
"protected void Func1(HttpServletRequest var1, HttpServletResponse var2) throws IOException { this.livreurService.delete(var1.getParameter(""id"")); var2.sendRedirect(var1.getContextPath() + ""/livreurs/list""); } "	0	0	0	0	1	0
"@Override public void Func1(int var1, Region var2) { if(var1==MonitorNotifier.INSIDE) { try { beaconManager.startRangingBeaconsInRegion(var2); } catch (RemoteException e) { e.printStackTrace(); } Log.var1(""BEACON_MANAGER_ADAPTER"", ""Beacons are visible in the var2""); } else{ try { beaconManager.stopRangingBeaconsInRegion(var2); } catch (RemoteException e) { e.printStackTrace(); } Log.var1(""BEACON_MANAGER_ADAPTER"", ""No beacons are visible in the var2""); } } "	0	0	0	0	1	0
"@NonNull @Override public Dialog Func1(Bundle var1) { AlertDialog.Builder var2 = new AlertDialog.Builder(getActivity()); LayoutInflater var3 = getActivity().getLayoutInflater(); View var4 = var3.inflate(R.layout.fragment_add_item_dialog, null); ButterKnife.bind(this, var4); selectedQuadrant = listener.getQuadrant(); selectQuadrant(selectedQuadrant); quadOne.setOnClickListener(e -> selectQuadrant(0)); quadTwo.setOnClickListener(e -> selectQuadrant(1)); quadThree.setOnClickListener(e -> selectQuadrant(2)); quadFour.setOnClickListener(e -> selectQuadrant(3)); var2.setView(var4) .setPositiveButton(""Add Item"", null) .setNegativeButton(""Cancel"", (var5, id) -> AddItemDialogFragment.this.getDialog() .cancel()); Dialog var5 = var2.create(); var5.setOnShowListener(dialog1 -> { Button var6 = ((AlertDialog) dialog1).getButton(AlertDialog.BUTTON_POSITIVE); var6.setOnClickListener(AddItemDialogFragment.this); }); return var5; } "	0	0	0	0	1	0
"@Test public void Func1() { List<Initiative> var1 = new ArrayList<>(); var1 = il.getInitiativeListByStatus(""Individual"", ""Active""); for (Initiative var2 : var1) { assertNotNull(var2.getInitiativeId()); assertNotNull(var2.getInitiativeCategory()); assertNotNull(var2.getInitiativeName()); assertNotNull(var2.getInitiativeStatus()); assertNotNull(var2.getInitiativeComment()); assertNotNull(var2.getInitiativeMetrics()); assertNotNull(var2.getInitiativeEndDate()); assertNotNull(var2.getInitiativeStartDate()); assertNotNull(var2.getInitiativeCreationDate()); assertNotNull(var2.getOwnerOfList()); if (var2.getInitiativeCategory().equalsIgnoreCase(""Team"")) { assertNotNull(var2.getFilterList()); } else { assertNotNull(var2.getPartOfEmployeeList()); } } } "	0	0	1	0	1	0
private void Func1() { if (nibbles_ptr.size() % 2 == 1) { nibbles_ptr.set(lengthOf().getInt() / 2, (byte) (nibbles_ptr.get(lengthOf().getInt() / 2) & 0x0F)); } } 	0	0	1	1	1	0
"public TitanHexString Func1(final TitanHexString_Element var1) { mustBound(""Left operand of operator Func1 is an unbound hexstring value.""); var1.mustBound(""Right operand of operator Func1 is an unbound hexstring element.""); if (lengthOf().getInt() != 1) { throw new TtcnError(""The hexstring operands of operator Func1 must have the same length.""); } byte var2 = (byte) (get_nibble(0) & var1.get_nibble()); return new TitanHexString(var2); } "	0	0	0	0	1	0
"@Test public void Func1() throws IOException { TableReference var1 = new TableReference().setProjectId(""project"").setDatasetId(""dataset"").setTableId(""table""); List<TableRow> var2 = new ArrayList<>(); var2.add(new TableRow()); when(response.getContentType()).thenReturn(Json.MEDIA_TYPE); when(response.getStatusCode()).thenReturn(403).thenReturn(200); when(response.getContent()) .thenReturn(toStream(errorWithReasonAndStatus(""rateLimitExceeded"", 403))) .thenReturn(toStream(new TableDataInsertAllResponse())); BigQueryTableInserter var3 = new BigQueryTableInserter(bigquery); var3.insertAll(var1, var2); verify(response, times(2)).getStatusCode(); verify(response, times(2)).getContent(); verify(response, times(2)).getContentType(); expectedLogs.verifyInfo(""BigQuery insertAll exceeded rate limit, retrying""); } "	0	0	0	0	1	0
"@Override public List<TableDataInsertAllResponse.InsertErrors> Func1() throws IOException { BackOff var1 = new IntervalBoundedExponentialBackOff( MAX_RATE_LIMIT_EXCEEDED_BACKOFF_MS, INITIAL_RATE_LIMIT_EXCEEDED_BACKOFF_MS); while (true) { try { return insert.execute().getInsertErrors(); } catch (IOException e) { if (new ApiErrorExtractor().rateLimited(e)) { LOG.info(""BigQuery insertAll exceeded rate limit, retrying""); try { Thread.sleep(var1.nextBackOffMillis()); } catch (InterruptedException interrupted) { Thread.currentThread().interrupt(); throw new IOException( ""Interrupted while waiting before retrying insertAll""); } } else { throw e; } } } } "	0	0	0	0	1	0
"@POST @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON}) @Path(""/{source}"") public Response Func1( final WhoisResources var1, @Context final HttpServletRequest var2, @PathParam(""source"") final String var3, @QueryParam(""password"") final List<String> var4, @CookieParam(""crowd.token_key"") final String var5) { if (var1 == null) { return badRequest(""WhoisResources is mandatory""); } try { final Origin var6 = updatePerformer.createOrigin(var2); final UpdateContext var7 = updatePerformer.initContext(var6, var5); var7.setBatchUpdate(); final Credentials var8 = createCredentials(var7.getUserSession(), var4, /* override= */null); final List<Update> var9 = extractUpdates(var1, var8); final WhoisResources var10 = updatePerformer.performUpdates(var7, var6, var9, Keyword.NEW, var2); validateUpdates(var7, var9, var1); return createResponse(var2, var10, Response.Status.OK); } catch (WebApplicationException e) { throw specializeWebApplicationException(e, var2, var1); // note: response is attached to exception } catch (UpdateFailedException e) { return createResponse(var2, e.whoisResources, e.status); } catch (Exception e) { updatePerformer.logError(e); LOGGER.error(""Unexpected"", e); return createResponse(var2, var1, Response.Status.INTERNAL_SERVER_ERROR); } finally { updatePerformer.closeContext(); } } "	1	0	1	1	0	0
public void Func1() { bootstrap.group().shutdownGracefully(); } 	0	0	0	0	1	0
"private void Func1() { this.currentType = nextType; this.currentCol = currentType.getSpawnColumn(); this.currentRow = currentType.getSpawnRow(); this.currentRotation = 0; this.nextType = TileType.values()[random.nextInt(TYPE_COUNT)]; if(!board.isValidAndEmpty(currentType, currentCol, currentRow, currentRotation)) { this.isGameOver = true; logicTimer.setPaused(true); String var1 = this.getClass().getResource(""schoolbellringing.wav"").toString(); Media var2 = new Media(var1); MediaPlayer var3 = new MediaPlayer(var2); var3.setVolume(0.8); var3.play(); } } "	0	0	1	0	1	0
@Override public void Func1(float var1) { super.Func1(var1); Vector2 var2 = moveComponent.getWorldPosition(); body.getTransform().setTranslation(var2.x - (size.x / 2f), var2.y - (size.y / 2f)); } 	0	0	0	0	1	0
@Before public void Func1() { mFragmentManager = Mockito.mock(FragmentManager.class); mFeatureManager = new FeatureManager(); } 	0	0	0	0	1	0
"public void Func1(RDBMSPredicateHandle var1) { if (predicateHandles.containsKey(var1.predicate())) throw new IllegalArgumentException(""Predicate has already been registered!""); predicateHandles.put(var1.predicate(), var1); createQueryStatement(var1); if (!closedPredicates.contains(var1.predicate())) { createUpdateStatement(var1); createInsertStatement(var1); } } "	0	0	1	0	0	0
private static boolean Func1(Field var1) { return var1.getType().isArray() && ! var1.getType().isInstance(Collection.class); } 	0	0	0	1	1	0
@Override void Func1(int var1, byte[] var2, int var3, int var4) { DirectAccess.ref(mAddr + var1, var4).put(var2, var3, var4); } 	0	0	0	0	1	0
private void Func1(boolean var1) { if (mIsDialpadShown) { return; } mIsDialpadShown = true; mDialpadFragment.setAnimate(var1); mDialpadFragment.sendScreenView(); final FragmentTransaction var2 = getFragmentManager().beginTransaction(); var2.show(mDialpadFragment); var2.commit(); if (var1) { mFloatingActionButtonController.scaleOut(); } else { mFloatingActionButtonController.setVisible(false); } mActionBarController.onDialpadUp(); if (!isInSearchUi()) { enterSearchUi(true /* isSmartDial */, mSearchQuery); } } 	0	0	0	0	1	0
private void Func1(StructFieldAccessExpr var1, SymbolScope var2) { ReferenceExpr var3 = var1.getVarRef(); SymbolName var4 = var3.getSymbolName(); BLangSymbol var5 = var2.resolve(var4); if (var5 == null) { if (var2 instanceof StructDef) { BLangExceptionHelper.throwSemanticError(var1, SemanticErrors.UNKNOWN_FIELD_IN_STRUCT, var4.getName(), ((StructDef) var2).getName()); } else { BLangExceptionHelper.throwSemanticError(var1, SemanticErrors.STRUCT_NOT_FOUND, var4.getName()); } } if (!(var5 instanceof VariableDef)) { BLangExceptionHelper.throwSemanticError(var3, SemanticErrors.INCOMPATIBLE_TYPES_UNKNOWN_FOUND, var4); } VariableDef var6 = (VariableDef) var5; BType var7; if (var3 instanceof ArrayMapAccessExpr) { Expression var8 = ((ArrayMapAccessExpr) var3).getRExpr(); ((VariableRefExpr) var8).setVariableDef(var6); var7 = var6.getType(); if (var7 instanceof BArrayType) { var7 = ((BArrayType) var6.getType()).getElementType(); } handleArrayType((ArrayMapAccessExpr) var3); } else { ((VariableRefExpr) var3).setVariableDef(var6); var7 = (var6).getType(); } StructFieldAccessExpr var9 = var1.getFieldExpr(); if (var9 != null) { if (!(var7 instanceof StructDef)) { BLangExceptionHelper.throwSemanticError(var1, SemanticErrors.MUST_BE_STRUCT_TYPE, var4.getName()); } Func1(var9, ((StructDef) var7).getSymbolScope()); } } 	1	0	1	0	1	0
public <K> Date Func1(Column<K> var1) { if (var1.getType() instanceof SimpleDateType) { long var2 = SimpleDateType.instance.toTimeInMillis(var1.getDecomposedValue()); if (concurrentDateFormat == null) { return new Date(var2); } else { int var3 = concurrentDateFormat.get().getTimeZone().getOffset(var2); return new Date(var2 - var3); } } else { return Func1(var1.getComposedValue()); } } 	1	0	1	0	1	0
public static ClasspathOptions Func1() { return new ClasspathOptions(false, false, false, true, false); } 	0	0	0	0	1	0
public static ClasspathOptions Func1(Boolean var1) { return new ClasspathOptions(false, var1, false,false,false); } 	0	0	0	0	1	0
"public boolean Func1(final Parser var1, final boolean var2) { try { var1.getCallbackManager().delCallback(DebugInfoListener.class, this); final DebugWindow var3 = registeredParsers.get(var1); var3.addLine(""======================"", new Date()); var3.addLine(""No Longer Monitoring: "" + var1 + "" (User Requested)"", new Date()); var3.addLine(""======================"", new Date()); if (var2) { var3.var2(); } registeredParsers.remove(var1); return true; } catch (CallbackNotFoundException ex) { return false; } } "	0	0	0	0	1	0
@Override public void Func1() { super.Func1(); if (parser != null) { parser.getCallbackManager().delCallback(DebugInfoListener.class, listener); } } 	0	0	0	0	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_paradox_detail); ParadoxDescriptionFragment var2 = (ParadoxDescriptionFragment) getSupportFragmentManager().findFragmentById(R.id.paradox_description); if (var1 == null) { int var3 = getIntent().getExtras().getInt(""index""); String var4 = Paradoxes.ParadoxDescription[var3]; var2.getArguments().putString(Constants.PARADOX_DESCRIPTION_TEXT, var4); } } "	0	0	1	0	1	0
"private void Func1(String[] var1) throws ConfigurationException { Options var2 = new Options(); var2.addOption(""d"", ""debug"", false, ""turn on debug log messages""); var2.addOption(""m"", ""marker-radius"", true, ""sets the radius of shot markers in pixels [1,20]""); var2.addOption(""c"", ""ignore-laser-color"", true, ""sets the color of laser that should be ignored by ShootOFF (green "" + ""or red). No color is ignored by default""); var2.addOption(""u"", ""use-virtual-magazine"", true, ""turns on the virtual magazine and sets the number rounds it holds [1,45]""); var2.addOption(""f"", ""use-malfunctions"", true, ""turns on malfunctions and sets the probability of them happening""); try { CommandLineParser var3 = new DefaultParser(); CommandLine var4 = var3.parse(var2, var1); if (var4.hasOption(""d"")) setDebugMode(true); if (var4.hasOption(""m"")) setMarkerRadius(Integer.parseInt(var4.getOptionValue(""m""))); if (var4.hasOption(""c"")) { setIgnoreLaserColor(true); setIgnoreLaserColorName(var4.getOptionValue(""c"")); } if (var4.hasOption(""u"")) { setUseVirtualMagazine(true); setVirtualMagazineCapacity(Integer.parseInt(var4.getOptionValue(""u""))); } if (var4.hasOption(""f"")) { setMalfunctions(true); setMalfunctionsProbability(Float.parseFloat(var4.getOptionValue(""f""))); } } catch (ParseException e) { System.err.println(e.getMessage()); HelpFormatter var5 = new HelpFormatter(); var5.printHelp(""com.shootoff.Main"", var2); System.exit(-1); } validateConfiguration(); } "	0	0	0	0	1	0
@Override public Sequential<? extends ValueModel<Type, java.lang.Object>> Func1( @Sequenced ceylon.language.Sequential<? extends ceylon.language.meta.model.Type<? extends java.lang.annotation.Annotation>> var1) { return getConstructors(true, null, var1); } 	1	0	1	0	1	0
@Override public Sequential<? extends ValueModel<Type, java.lang.Object>> Func1( @Sequenced ceylon.language.Sequential<? extends ceylon.language.meta.model.Type<? extends java.lang.annotation.Annotation>> var1) { return getConstructors(false, null, var1); } 	1	0	1	1	1	0
public void Func1(double var1, double var2) { double var3 = 0, var4 = 0, var5 = 0, var6 = 0; if (var1 < 0) var1 *= BACK_LIMIT; var3 += var2; var4 +=var2; var5 += var2; var6 += var2; var3 += var1; var4 -= var1; var5 += var1; var6 -= var1; double[] var7 = new double[] { var3, var5, var4, var6 }; for(int var8 = 0; var8 < NUMBER_OF_MOTORS; var8++) { motors[var8].set(var7[var8]); } } 	0	0	0	1	1	0
@Before public void Func1() { this.mockMvc = standaloneSetup(new UserController()).build(); } 	0	0	0	0	1	0
@Before public void Func1() { this.mockMvc = standaloneSetup(new ImageController()).build(); } 	0	0	0	0	1	0
"public static List<Integer> Func1(ItemStack var1) { List<Integer> var2 = new ArrayList<Integer>(); if (!canUncraftItem(var1)) return var2; List<?> var3 = CraftingManager.getInstance().getRecipeList(); for (int var4 = 0 ; var4 < var3.size() ; var4++) { IRecipe var5 = (IRecipe)var3.get(var4); if (var5 != null) { ItemStack var6 = var5.getRecipeOutput(); if (var6 != null) { if (var6.getItem() == var1.getItem() && var6.getItemDamage() == var1.getItemDamage()) { RecipeHandler var7 = getRecipeHandler(var5); if (var7 != null) { var2.add(var6.getMaxStackSize()); } else { ModUncrafting.instance.getLogger().error(""[Uncrafting Table] Unknown var5 type: ""+var5.getClass().getCanonicalName()); } } } } } return var2; } "	0	0	0	0	1	0
@Override protected boolean Func1(ItemSyncData<TListClient, TListServer> var1, TListClient var2) { return var2.getServerId() > 0; } 	0	0	0	0	1	0
"public PutMessageResponseType Func1(PutMessageRequestType var1) { PutMessageRequestWrapper var2 = new PutMessageRequestWrapper(var1); MessageContext var3; try { var3 = createMessageContext(var2); Audit.info(""Required metadata validated"", markerFrom(var2)); } catch (MessageContextException e) { log.error(markerFrom(var2), e.getStatusMessage().getTechnicalMessage(), e); return createErrorResponse(e); } EduDocument var4; try { var4 = standardBusinessDocumentFactory.create(var1, var3.getAvsender(), var3.getMottaker()); Audit.info(""EDUdocument created"", markerFrom(var2)); } catch (MessageException e) { Audit.error(""Failed to create EDUdocument"", markerFrom(var2)); log.error(markerFrom(var2), e.getStatusMessage().getTechnicalMessage(), e); return createErrorResponse(e); } Transport var5 = transportFactory.createTransport(var4); var5.send(configuration.getConfiguration(), var4); Audit.info(""Message sent"", markerFrom(var2)); return createOkResponse(); } "	0	0	0	0	1	0
@SneakyThrows private void Func1(Template var1) { FileInputStream var2 = new FileInputStream(Cloud.getInstance().getTmpDir()); byte[] var3 = new byte[var2.available()]; var2.read(var3); this.getChannel().writeAndFlush(new PacketTemplateData(var1.getName(), var3)); } 	0	0	0	0	1	0
"public Zone Func1(final ZoneKey var1) throws IOException, GeneralSecurityException { LOGGER.info(""loading "" + cacheType + "" zone "" + var1.getName()); return loadZone(var1, writeZone); } "	0	0	0	0	1	0
"@Override public int Func1(byte[] var1, int var2, int var3, int var4) throws IOException { if (this.hasTimeout()) { close(); throw new IllegalStateException(""Handshake is taking too long! (>"" + MAX_DELAY + ""ms""); } int var5 = 20; do { ByteBuffer var6 = this.rxQueue.poll(); if (var6 != null) { var6.get(var1, var2, var6.limit()); return var6.limit(); } try { Thread.sleep(1); } catch (InterruptedException e) { logger.warn(""Could not sleep thread to Func1 DTLS var6.""); } finally { var5--; } } while (var5 > 0); throw new SocketTimeoutException(""Could not Func1 DTLS packet in "" + var4); } "	1	0	0	0	1	0
@Override public void Func1(ArchiveWrapper var1, boolean var2) { super.Func1(var1, var2); if (var2) { setGraphic(null); setText(null); } else { ImageView var3 = new ImageView(AppData.indexIcon); setGraphic(var3); setText(var1.getName()); } } 	0	0	0	0	1	0
"public static Encodable Func1(BacnetConn var1, BacnetDevice var2, ObjectIdentifier var3, PropertyIdentifier var4, UnsignedInteger var5) { Encodable var6 = null; try { var2.monitor.checkInReader(); if (var2.remoteDevice != null) { try { var1.monitor.checkInReader(); if (var1.localDevice != null) { try { var6 = RequestUtils.Func1(var1.localDevice, var2.remoteDevice, var3, var4, var5); } catch (BACnetException e) { LOGGER.debug("""", e); } } var1.monitor.checkOutReader(); } catch (InterruptedException e) { } } var2.monitor.checkOutReader(); } catch (InterruptedException e) { } return var6; } "	0	0	0	0	1	0
"public void Func1(){ try { GameConnector.doUpdate(""Game"",""CREATE TABLE Player(PlayerID INTEGER(1), Name VARCHAR(20), Position INTEGER(2), GetOutOfJail INTEGER(1), PRIMARY KEY ( PlayerID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Account(PlayerID INTEGER(1), Money INTEGER(1), Networth INTEGER(10), PRIMARY KEY ( PlayerID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Field(FieldID INTEGER(2), Name VARCHAR(20), Description VARCHAR(140), PRIMARY KEY ( FieldID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Ownable(FieldID INTEGER(2), Owner INTEGER(2), Price INTEGER(2), Mortgage INTEGER(4), PRIMARY KEY( FieldID ), FOREIGN KEY ( Owner ) REFERENCES Player( PlayerID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Property(FieldID INTEGER(2), Rent INTEGER(4), Rent1 INTEGER(4), Rent2 INTEGER(4), Rent3 INTEGER(4), Rent4 INTEGER(4), HotelRent INTEGER(5), HousePrice INTEGER(4), House INTEGER(1), Hotel INTEGER(1), PRIMARY KEY ( FieldID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Utility(FieldID INTEGER(2), StartFee INTEGER(5), PRIMARY KEY ( FieldID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Railroad(FieldID INTEGER(2), Rent1 INTEGER(4), Rent2 INTEGER(4), Rent3 INTEGER(4), Rent4 INTEGER(4), PRIMARY KEY ( FieldID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Jail(FieldID INTEGER(2), Player INTEGER(2), Turns INTEGER(2), PRIMARY KEY ( FieldID ), FOREIGN KEY ( Player ) REFERENCES Player( PlayerID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE Tax(FieldID INTEGER(2), TaxType INTEGER(1), Tax INTEGER (4), PRIMARY KEY ( FieldID ));""); GameConnector.doUpdate(""Game"",""CREATE TABLE ProcentageTax(TaxID INTEGER(1), procentageTax INTEGER(2), PRIMARY KEY ( TaxID ));""); System.out.println(""Tables in Game created successfully...""); }catch (SQLException e) { e.printStackTrace(); } try{ if(GameConnector!=null) GameConnector.close();; }catch(SQLException se){ se.printStackTrace(); } } "	0	0	1	1	1	0
"private void Func1() { logger.info(""Writing context file ...""); try { JsonConverter.getObjectMapper().defaultPrettyPrintingWriter() .writeValue(new File(""src/main/resources/context.json""), context); logger.info(""... done writing context file.""); } catch (Exception e) { logger.error(""Error during writing context file! "", e); } } "	0	0	1	0	0	0
@Before public void Func1(){ outsider = makeOutsider(); ticketReciever = makeTicketReceiver(); ticket = makeTicket(); } 	0	0	1	0	1	0
"@Test public void Func1(){ addTicketTransfer(user.getUsername(), ""password""); given(). when(). put(TRANSFER_ENDPOINT + ""/"" + ticket.getKey()). then(). statusCode(HttpStatus.SC_FORBIDDEN); ticket = ticketRepository.findByKey(ticket.getKey()).orElse(null); Assert.assertTrue(ticket.isTransferrable()); Assert.assertTrue(ticket.getOwner().equals(user)); Assert.assertTrue(ticket.getTransferGoalOwner().equals(ticketReciever)); } "	0	0	1	0	1	0
"@Test public void Func1(){ addTicketTransfer(ticketReciever.getUsername(), ""password"").then().statusCode(HttpStatus.SC_FORBIDDEN); ticket = ticketRepository.findByKey(ticket.getKey()).orElse(null); Assert.assertTrue(!ticket.isTransferrable()); Assert.assertTrue(ticket.getOwner().equals(user)); Assert.assertTrue(ticket.getTransferGoalOwner() == null); } "	0	0	1	0	1	0
public GameObject Func1(String var1, String var2) { GameObject var3 = gameContext.getGameWorld().addObject(); var3.setType(var2); var3.setPosition(200, 250); var3.setDimensions(Gdx.graphics.getWidth() / 2f, Gdx.graphics.getHeight() / 2f); var3.getColor().a = 0f; var3.setZIndex(101); gameContext.getRenderManager().register(var2, new SpriteRenderer(var1)); Tween.to(var3, GameObjectTween.POS_Y, 0.75f).target(220).repeatYoyo(Tween.INFINITY, 0.75f).ease(TweenEquations.easeNone).start(gameContext.getTweenManager()); return var3; } 	0	0	1	0	1	0
"private void Func1() { setTitle(""New StableIdentifiers QA Results""); titleLabel = new JLabel(""New StableIdentifiers QA Results""); getContentPane().add(titleLabel, BorderLayout.NORTH); resultTable = new JTable(); StableIdCheckResultTableModel var1 = new StableIdCheckResultTableModel(); resultTable.setModel(var1); resultTable.setAutoCreateRowSorter(true); TableCellRenderer var2 = new DefaultTableCellHeaderRenderer() { Icon var3 = GKApplicationUtilities.createImageIcon(getClass(), ""Instance.gif""); @Override public Component Func2(JTable var4, Object var5, boolean var6, boolean var7, int var8, int var9) { Component var10 = super.Func2(var4, var5, var6, var7, var8, var9); if (var6 || var7) { var10.setBackground(var4.getSelectionBackground()); var10.setForeground(var4.getSelectionForeground()); } else { var10.setBackground(var4.getBackground()); var10.setForeground(var4.getForeground()); } if (var5 instanceof GKInstance) { GKInstance var11 = (GKInstance) var5; setIcon(var3); // Set icon first so that it is before the text setText(var11.getDisplayName()); setHorizontalTextPosition(SwingConstants.RIGHT); } return var10; } }; resultTable.setDefaultRenderer(GKInstance.class, var2); resultTable.addMouseListener(new MouseAdapter() { @Override public void Func3(MouseEvent var12) { if (var12.getClickCount() == 2) showInstance(var12); } }); getContentPane().add(new JScrollPane(resultTable), BorderLayout.CENTER); CheckOutControlPane var13 = new CheckOutControlPane(this); var13.getCheckOutBtn().setText(""Fix in DB""); var13.getCheckOutBtn().setEnabled(true); getContentPane().add(var13, BorderLayout.SOUTH); setSize(650, 550); GKApplicationUtilities.center(this); } "	0	0	1	0	0	0
"@SuppressWarnings(""unchecked"") @Override public List<CollectionItem> Func1(final String var1, final String var2, final String var3) { String var4 = ""FROM CollectionItem collectionItem WHERE  collectionItem.resource.gooruOid=:var1  and  "" + generateOrgAuthQuery(""collectionItem.collection.""); String var5 = """"; if (var2 != null) { var4 += "" and collectionItem.associatedUser.partyUid=:var2""; } if (var3 != null) { var5 = var3.equalsIgnoreCase(COLLECTION) ? SCOLLECTION : var3; var4 += "" and collectionItem.collection.resourceType.name=:var5""; } Query var6 = getSession().createQuery(var4); var6.setParameter(""var1"", var1); if (var2 != null) { var6.setParameter(_GOORU_UID, var2); } if (var3 != null) { var6.setParameter(COLLECTION_TYPE, var5); } addOrgAuthParameters(var6); return var6.list(); } "	1	0	0	0	1	0
"@Override public Assignment Func1(final String var1, final String var2) { String var3 = "" FROM Assignment assignment WHERE  assignment.var1=:var1  and ""; if (var2 != null) { var3 += "" assignment.user.partyUid='"" + var2 + ""' and ""; } Query var4 = getSession().createQuery(var3 + generateOrgAuthQuery(""assignment."")); var4.setParameter(GOORU_OID, var1); addOrgAuthParameters(var4); return ((var4.list().size() > 0) ? (Assignment) var4.list().get(0) : null); } "	0	0	0	0	1	0
"protected boolean Func1() { boolean var1 = false; isGoBack = true; if (multiSelectMode && (!ExplorerOperations.isSpecialMode(mode) || !(mode == MODES.SearchMode))) { multiSelectMode = false; } cancelTasks(); if (mode == MODES.SearchMode) { if (isRoot || isSource) { var1 = true; } else if (currentPath.compareTo(searchOriginalPath) == 0) { mypath.setText(format2String(R.string.msg_search_results) + "": "" + resultCount + "" files""); searchPathLock = false; this.onConfigurationChanged(getResources().getConfiguration()); updateMenu(); showList(resultFiles); isSource = true; } else { showList(mainFile.getParent()); } } else if (ExplorerOperations.isSpecialMode(mode)) { var1 = true; } else { if (isRoot) { var1 = true; } else { showList(runSU ? mainFile.getParent()+ (mainFile.getParent().equals(ROOT) ? """" : ""/"") : mainFile.getParent()); } } if (showNavigationPane && !NavListState.isEmpty() && (isGoBack || isResetList)) { NavListState.remove(NavListState.size() - 1); } showAds(); return var1; } "	0	0	0	0	1	0
protected void Func1(boolean var1) { this.emailRequired = var1; if (var1) { optionAnonymous.setText(R.string.air_label_use_email); ((TextInputLayout) inputEmail.getParent()).setHint(getString(R.string.air_label_email)); } else { optionAnonymous.setText(R.string.air_label_use_guest); ((TextInputLayout) inputEmail.getParent()).setHint(getString(R.string.air_label_email_optional)); } } 	0	0	0	0	1	0
public Number Func1(int var1, Number var2) { Object var3 = this.opt(var1); if (JSONObject.NULL.equals(var3)) { return var2; } if (var3 instanceof Number){ return (Number) var3; } if (var3 instanceof String) { try { return new BigDecimal(var3.toString()); } catch (Exception e) { return var2; } } return var2; } 	0	0	0	0	1	0
"@Override public void Func1(MessageTree var1) { String var2 = var1.getDomain(); int var3 = var2.hashCode(); int var4 = var3 % (m_processors.size() - 1); // var6 one for message overflow BlockingQueue<MessageTree> var5 = m_queues.get(var4); if (!var5.offer(var1)) { // overflow BlockingQueue<MessageTree> var6 = m_queues.get(m_queues.size() - 1); boolean var7 = var6.offer(var1); if (!var7 && (++m_failCount % 100) == 0) { Cat.logError(new RuntimeException(""Error when offer var1 to message dumper"")); } } } "	0	0	0	0	1	0
public Font Func1() { return new Font(fontName, Font.PLAIN, btnSize); } 	0	0	1	0	1	0
@Override public View Func1(Context var1) { prototypeView = View.inflate(var1, R.layout.brick_set_look, null); if (getSprite().getName().equals(var1.getString(R.string.background))) { TextView var2 = (TextView) prototypeView.findViewById(R.id.brick_set_look_and_wait); var2.setText(R.string.brick_set_background); } if (!wait) { prototypeView.findViewById(R.id.brick_set_look_and_wait).setVisibility(View.GONE); } Spinner var3 = (Spinner) prototypeView.findViewById(R.id.brick_set_look_spinner); SpinnerAdapter var4 = createLookAdapter(var1); var3.setAdapter(var4); setSpinnerSelection(var3); return prototypeView; } 	0	0	0	0	1	0
"@Override public void Func1(View var1) { Garden var2 = allGardens.get(finalPosition); String var3 = var2.getName(); Intent var4 = new Intent(getApplicationContext(), MyGardenActivity.class); var4.putExtra(""var3"", var3); startActivity(var4); } "	0	0	0	0	1	0
"@Override public void Func1(ScheduleModel var1) { Log.v(LOG_TAG, ""Func1(): title = "" + var1.getTitle()); @ScheduleModel.ScheduleRepeatType String var2 = var1.getScheduleRepeatType(); String var3; if(var2 == ScheduleModel.SCHEDULE_REPEAT_NONE){ var3 = ACTION_ONE_TIME_ALARM; }else{ var3 = ACTION_REPEAT_ALARM; } Intent var4 = new Intent(mContext,AlarmReceiver.class); var4.setAction(var3); var4.putExtra(ALARM_TITLE, var1.getTitle()); var4.putExtra(ALARM_START_TIME,var1.getScheduleStart().getTime()); var4.putExtra(ALARM_REPEAT_INTERVAL,var1.getRepeatAlarmInterval()); PendingIntent var5 = PendingIntent.getBroadcast(mContext,0,var4,0); try { mAlarmMgr.cancel(var5); }catch (Exception e){ Log.e(LOG_TAG,""Func1(): fail to cancel the alarm""); } } "	0	0	0	0	1	0
private void Func1(ReadOnlyPerson var1) { name.textProperty().bind(Bindings.convert(var1.nameProperty())); phone.textProperty().bind(Bindings.convert(var1.phoneProperty())); address.textProperty().bind(Bindings.convert(var1.addressProperty())); email.textProperty().bind(Bindings.convert(var1.emailProperty())); var1.tagProperty().addListener((observable, oldValue, newValue) -> { tags.getChildren().clear(); var1.getTags().forEach(tag -> tags.getChildren().add(new Label(tag.tagName))); }); } 	0	0	0	0	1	0
"private static String[] Func1(String var1, int var2) { ArrayList<String> var3 = new ArrayList<String>(); for (int var4 = 0; var4 < var2; ++var4) { int var5 = var1.indexOf("" ""); if (var5 == -1) { var3.add(var1); break; } else { var3.add(var1.substring(0, var5)); var1 = var1.substring(var5 + 1); } } return (String[])var3.toArray(); } "	0	0	1	1	1	0
@Test public void Func1() { DataSet var1 = new DataSet(Nd4j.create(2, 2), Nd4j.create(new double[][] {{1, 1}, {1, 1}})); SingleCSVRecord var2 = SingleCSVRecord.fromRow(var1.get(0)); assertEquals(4, var2.getValues().length); } 	0	0	1	0	1	0
public static List<String> Func1(DataFile var1, int var2, DataFile var3, int var4, long var5) throws IOException { try (Stream<String> lines = Files.lines(Paths.get(var3.getSourceFileName()))) { return lines.skip(var3.isHasHeaders() ? 1 : 0)  //skip the header, it it exists .filter(line -> getColumnValue(line, var4, var3.getDelimiterChar().toString()) .map(valueIsNotInFile(var1, var2)).orElse(false)) .limit(var5) .collect(Collectors.toList()); } } 	0	0	0	0	1	0
"public File Func1() { return new File(virtualEnv, ""bin/python""); } "	0	0	1	0	1	0
"private ToolStripButton Func1() { ToolStripButton var1 = new ToolStripButton(""Scheduler""); var1.addClickHandler(new ClickHandler() { public void Func2(ClickEvent var2) { Window.open(""/Scheduler"", """", """"); } }); return var1; } "	0	0	1	1	1	0
public static void Func1(int var1, int var2, int var3, String var4, Object...var5) { Minecraft var6 = Minecraft.getMinecraft(); FontRenderer var7 = var6.fontRenderer; String var8 = String.format(var4, var5); var7.drawStringWithShadow(var8, var1, var2, var3); } 	0	0	0	0	1	0
public String Func1() { return curricularCourse.Func1(context.getCurricularPeriod(), executionInterval).toString(); } 	0	0	0	0	1	0
"@Override public void Func1() { if (moduleBrowserWindowId == null) { moduleBrowserWindowId = new WindowId(WindowType.MODULE_BROWSER); ModuleBrowserPresenter var1 = injector.getInstance(ModuleBrowserPresenter.class); InternalWindowPresenter var2 = createInternalWindow(moduleBrowserWindowId, var1); var2.setTitle(""Module Browser""); showInternalWindow(moduleBrowserWindowId); } focus(moduleBrowserWindowId); } "	0	0	0	0	1	0
public static void Func1(int var1){ find.byId(var1); } 	1	0	1	0	1	0
public static Result Func1(){ List<Meal> var1 = Meal.findAll(); return TODO; } 	0	0	1	0	1	0
@Override public void Func1() { taskList.addAll(Arrays.asList(new Zaiat_iRage.scripts.zAlkharidFighter.Tasks.Bank(ctx), new Fight(ctx), new Eat(ctx), new ToggleRun(ctx))); gui = new GUI(this, ctx); } 	0	0	0	0	1	0
"private void Func1(Club var1) { Event var2; String var3; int var4; int var5; int var6; int var7; String var8; System.out.println(""Enter the var3 of the var2.""); var3 = scan.nextInt(); System.out.println(""Enter the start hour of the var2.""); var4 = scan.nextInt(); System.out.println(""Enter the start minute of the var2.""); var5 = scan.nextInt(); System.out.println(""Enter the end hour of the var2.""); var6 = scan.nextInt(); System.out.println(""Enter the end minute of the var2.""); var7 = scan.nextInt(); System.out.println(""Enter the name, location, and description"" + "" of the new var2.""); var8 = scan.next(); var2 = new Event(var3, var4, var5, var6, var7, var8); var1.addEvent(var2); return var2; } "	1	0	1	0	1	0
"private static UserGroupInformation Func1(Impersonator var1, DatasetId var2) throws IOException, NamespaceNotFoundException { UserGroupInformation var3; if (NamespaceId.SYSTEM.equals(var2.getParent())) { var3 = UserGroupInformation.getCurrentUser(); } else { var3 = var1.getUGI(var2); } LOG.debug(""Using {} user for dataset {}"", var3.getUserName(), var2); return var3; } "	0	0	1	0	0	0
"protected void Func1(IProject var1) { this.var1 = var1; if (var1 == null || !VaadinFacetUtils.isVaadinProject(var1)) { setPackageFragment(null, false); setTypeName("""", false); return; } } "	0	0	0	0	1	0
private void Func1(VocabList var1, int var2) { vList.Func1(var2, languageTested); } 	0	0	0	1	0	0
"@Override public void Func1(View var1) { switch (var1.getId()){ case R.id.save_button_2: user.setWalletBalance(Long.parseLong(t2.getText().toString())); UserService.updateUser(user); break; case R.id.logout_button: Intent var2 = new Intent(getActivity(), AuthActivity.class); FirebaseAuth.getInstance().signOut(); startActivity(var2); break; case R.id.imageButton1: View var3 = LayoutInflater.from(getContext()).inflate(R.layout.new_category_popup,null); final EditText var4 = (EditText)var3.findViewById(R.id.newCat_name); AlertDialog.Builder var5 = new AlertDialog.Builder(getContext()); var5.setMessage(""Create new category"") .setView(var3) .setPositiveButton(""Done"", new DialogInterface.OnClickListener() { @Override public void Func1(DialogInterface var6, int var7) { ArrayList<Integer> var8 = new ArrayList<Integer>(); var8.add(R.drawable.addnew_icon); var8.add(R.drawable.green_new); var8.add(R.drawable.add_new_no_name); var8.add(R.drawable.green_new_no_name); var8.add(R.drawable.addnew_logo); Category var9 = new Category(user.getId(),var4.getText().toString(),var8); CategoryService.addCategory(var9); categories.add(var9); Intent var10 = new Intent(getActivity(), NavActivity.class); var10.putExtra(""fromWhere"",3); DataPassing.passDataToActivity(categories,transactions,budgets,user,var10); startActivity(var10); } }) .setNegativeButton(""Cancel"",null) .setCancelable(false); AlertDialog var11 = var5.create(); var11.show(); break; } } "	0	0	0	0	1	0
"public void Func1(Configuration var1) { if (var1 == null) { System.out.println(""SettingsLoader::Func1 var1 is null""); } loadFile(); if (var1.login().isEmpty() && login != null) { var1.setLogin(login); } if (var1.password().isEmpty() && password != null) { var1.setPassword(password); } try { if ((var1.getComputeMethod() == null && computeMethod != null) || (computeMethod != null && var1.getComputeMethod() != ComputeType.valueOf(computeMethod))) { var1.setComputeMethod(ComputeType.valueOf(computeMethod)); } } catch (IllegalArgumentException e) { System.err.println(""SettingsLoader::Func1 failed to handle compute method (raw value: '"" + computeMethod + ""')""); computeMethod = null; } if (var1.getGPUDevice() == null && gpu != null) { GPUDevice var2 = GPU.getGPUDevice(gpu); if (var2 != null) { var1.setUseGPU(var2); } } if (var1.getNbCores() == -1  && cores != null) { var1.setUseNbCores(Integer.valueOf(cores)); } if (var1.getUserSpecifiedACacheDir() == false && cacheDir != null) { var1.setCacheDir(new File(cacheDir)); } if (var1.getUIType() == null && ui != null) { var1.setUIType(ui); } var1.setAutoSignIn(Boolean.valueOf(autoSignIn)); } "	0	0	0	0	1	0
@Override protected void Func1(final double var1) { double var2 = angleRange * 0.5; double var3 = (var1 - minValue) * angleStep - var2; var3 = Helper.clamp(-var2, -var2 + angleRange, var3); needleRotate.setAngle(var3); needleRectRotate.setAngle(var3); valueText.setText(String.format(locale, formatString, var1)); thresholdRect.setFill(var1 > threshold ? thresholdColor : Tile.GRAY); resizeDynamicText(); highlightSections(var1); } 	0	0	0	0	1	0
@Override public void Func1(final WireConfiguration var1) { checkNull(var1, s_message.wireConfigurationNonNull()); s_logger.info(s_message.removingWires()); try { final Wire[] var2 = this.m_wireAdmin.getWires(null); if (var2 != null) { for (final Wire var3 : var2) { final String var4 = var3.getProperties().get(WIREADMIN_PRODUCER_PID).toString(); final String var5 = var3.getProperties().get(WIREADMIN_CONSUMER_PID).toString(); final String var6 = this.m_wireHelperService .getServicePid(var1.getEmitterPid()); final String var7 = this.m_wireHelperService .getServicePid(var1.getReceiverPid()); if ((var6 != null) && (var7 != null) && var4.equals(var6) && var5.equals(var7)) { synchronized (this.m_wireConfigs) { for (final Iterator<WireConfiguration> var8 = this.m_wireConfigs.listIterator(); var8 .hasNext();) { final WireConfiguration var9 = var8.next(); if (var9.equals(var1)) { var8.remove(); this.m_wireAdmin.deleteWire(var3); break; } } } } } } } catch (final InvalidSyntaxException e) { throw new KuraRuntimeException(KuraErrorCode.INTERNAL_ERROR, ThrowableUtil.stackTraceAsString(e)); } s_logger.info(s_message.removingWiresDone()); } 	0	0	1	1	0	0
"@Override public void Func1(WifiP2pGroupList var1) { mPersistentGroup.removeAll(); for (WifiP2pGroup var2: var1.getGroupList()) { if (DBG) Log.d(TAG, "" var2 "" + var2); WifiP2pPersistentGroup var3 = new WifiP2pPersistentGroup(getActivity(), var2); mPersistentGroup.addPreference(var3); if (var3.getGroupName().equals(mSelectedGroupName)) { if (DBG) Log.d(TAG, ""Selecting var2 "" + var3.getGroupName()); mSelectedGroup = var3; mSelectedGroupName = null; } } if (mSelectedGroupName != null) { Log.w(TAG, "" Selected var2 "" + mSelectedGroupName + "" disappered on next query ""); } } "	0	0	0	0	1	0
public void Func1() { mConfirmDeleteAccountDialog.hide(); } 	0	0	1	0	1	0
"public static void Func1() { byte var1 = 0; do { printMenuMessage((byte)1); var1 = InOut.getByte(); switch(var1) { case 1 : clear(); menuJeu(); break; case 2 : credit(); break; case 3: profilGestion.gestion((byte)2); break; case 4: choseLanguage(); break; case 5: HighScoreGestion.menuHighScore(); break; case 6: if(continuons) { continuons = false; }else{ continuons = true; musique = null; musique = new MThread(""Musique""); musique.start(); } break; case 7: System.exit(0); break; default : System.out.println(LSD.getString(""mePri_msg"")); break; } }while(var1 != 7); } "	0	0	0	0	1	0
"private static void Func1() { byte var1 = 0; do { afficheMenu(); var1 = InOut.getByte(); switch(var1) { case 1: afficheProfil(); break; case 2: playerOne.afficheScoreSPd(); break; case 3: playerOne.afficheScoreSPM(); break; case 4: playerOne.afficheScoreSMM(); break; case 5: playerOne.afficheScoreSPU(); break; case 6: optionConfigurationMenu(); break; case 7: premierOuverture = true; existe = false; confExiste = false; challenge.menuPrincipal(); break; case 8: break; default: System.out.println(LSD.getString(""meGest_msg"")); break; } }while(var1 != 8); } "	0	0	0	0	1	0
"@Test public void Func1() throws SQLException { String var1 = ""{\n"" + ""  \""group\"": {\n"" + ""    \""operator\"": \""AND\"",\n"" + ""    \""rules\"": [\n"" + ""      {\n"" + ""        \""condition\"": \""=\"",\n"" + ""        \""field\"": \""REVENUE_GROSS\"",\n"" + ""        \""data\"": \""23\"",\n"" + ""        \""$$hashKey\"": \""object:434\""\n"" + ""      },\n"" + ""      {\n"" + ""        \""condition\"": \""=\"",\n"" + ""        \""field\"": \""ID\"",\n"" + ""        \""data\"": \""4\"",\n"" + ""        \""$$hashKey\"": \""object:454\""\n"" + ""      },\n"" + ""      {\n"" + ""        \""group\"": {\n"" + ""          \""operator\"": \""AND\"",\n"" + ""          \""rules\"": [\n"" + ""            {\n"" + ""              \""condition\"": \""=\"",\n"" + ""              \""field\"": \""REVENUE_NET\"",\n"" + ""              \""data\"": \""22\"",\n"" + ""              \""$$hashKey\"": \""object:476\""\n"" + ""            },\n"" + ""            {\n"" + ""              \""condition\"": \""=\"",\n"" + ""              \""field\"": \""SALES_DAY\"",\n"" + ""              \""data\"": \""04-05-2016\"",\n"" + ""              \""$$hashKey\"": \""object:476\""\n"" + ""            }\n"" + ""          ]\n"" + ""        },\n"" + ""        \""$$hashKey\"": \""object:463\""\n"" + ""      }\n"" + ""    ]\n"" + ""  }\n"" + ""}""; when(resultSetMetaData.getColumnCount()).thenReturn(new Integer(3)); when(resultSetMetaData.getColumnName(0)).thenReturn(""REVENUE_GROSS""); when(resultSetMetaData.getColumnName(1)).thenReturn(""ID""); when(resultSetMetaData.getColumnName(2)).thenReturn(""REVENUE_NET""); when(resultSetMetaData.getColumnName(3)).thenReturn(""SALES_DAY""); when(resultSetMetaData.getColumnTypeName(0)).thenReturn(""DOUBLE""); when(resultSetMetaData.getColumnTypeName(1)).thenReturn(""BIGINT""); when(resultSetMetaData.getColumnTypeName(2)).thenReturn(""DOUBLE""); when(resultSetMetaData.getColumnTypeName(3)).thenReturn(""DATE""); String var2 = ""(REVENUE_GROSS = 23 AND ID = 4 AND (REVENUE_NET = 22 AND SALES_DAY = \""04-05-2016\""))""; String var3 = jsonFilterService.convertJsonToJpql(var1, resultSetMetaData); assertEquals(var2, var3); } "	0	0	1	0	0	0
public static MetricsService Func1(io.vertx.ext.dropwizard.MetricsService var1) { return new MetricsService(var1); } 	1	0	1	0	1	0
@Override public boolean Func1(MotionEvent var1) { List<Marker> var2 = mapboxMap.getSelectedMarkers(); PointF var3 = new PointF(var1.getX(), var1.getY()); float var4 = 4 * screenDensity; float var5 = 10 * screenDensity; RectF var6 = new RectF((var3.x - averageIconWidth / 2 - var4) / screenDensity, (var3.y - averageIconHeight / 2 - var5) / screenDensity, (var3.x + averageIconWidth / 2 + var4) / screenDensity, (var3.y + averageIconHeight / 2 + var5) / screenDensity); List<Marker> var7 = getMarkersInRect(var6); long var8 = -1; if (var7 != null && var7.size() > 0) { Collections.sort(var7); for (Marker var9 : var7) { boolean var10 = false; for (Marker var11 : var2) { if (var11.equals(var9)) { var10 = true; } } if (!var10) { var8 = var9.getId(); break; } } } if (var8 >= 0) { List<Annotation> var12 = mapboxMap.getAnnotations(); int var13 = var12.size(); for (int var14 = 0; var14 < var13; var14++) { Annotation var15 = var12.get(var14); if (var15 instanceof Marker) { if (var15.getId() == var8) { if (var2.isEmpty() || !var2.contains(var15)) { if (!(var15 instanceof MarkerView)) { mapboxMap.selectMarker((Marker) var15); } } break; } } } } else { if (mapboxMap.getUiSettings().isDeselectMarkersOnTap()) { mapboxMap.deselectMarkers(); } MapboxMap.OnMapClickListener var16 = mapboxMap.getOnMapClickListener(); if (var16 != null) { LatLng var17 = fromScreenLocation(var3); var16.onMapClick(var17); } } trackGestureEvent(MapboxEvent.GESTURE_SINGLETAP, var1.getX(), var1.getY()); return true; } 	0	0	0	0	1	0
protected void Func1(Graphics2D var1, Rectangle2D var2, double var3) { var1.setPaint(getForeground()); var1.setStroke(getScaleBarStroke()); double var4 = treePane.scaleOnAxis(var3); Line2D var5 = new Line2D.Double(var4, var2.getMinY(), var4, var2.getMinY() + minorTickSize); var1.draw(var5); } 	0	0	0	0	1	0
"@Override public String Func1() { String var1 = ""\n""; return label +var1+ digitalTime +var1+ hour +var1+ minute; } "	0	0	0	0	1	0
"public static TimeItem Func1(String var1) { String[] var2 = var1.split(""\n""); if(var2.length != 4) return null; int var3, var4; try { var3 = Integer.parseInt(var2[2]); var4 = Integer.parseInt(var2[3]); } catch (NumberFormatException e) { e.printStackTrace(); return null; } return new TimeItem(var2[0], var2[1], var3, var4); } "	0	0	0	0	1	0
"private ApplicationReportModel Func1(GraphContext var1, ProjectModel var2) { ReportService var3 = new ReportService(var1); ApplicationReportModel var4 = createMigrationIssuesReportBase(var1); var4.setReportName(""Migration Issues""); var4.setProjectModel(var2); var3.setUniqueFilename(var4, ""migration_issues"", ""html""); return var4; } "	0	0	0	0	1	0
@Override public void Func1(FunctionCallExpressionContext var1) { ExpressionElementListContext var2 = var1.parenthesizedExpression().expressionElementList(); if (var2 == null) { return; } List<ExpressionElementContext> var3 = var2.expressionElement(); ExpressionElementContext var4 = var3.get(var3.size() - 1); if (var4.identifier() != null) { return; } ExpressionContext var5 = var4.var5(); if (var5.binaryExpression().size() != 0) { return; } PostfixExpressionContext var6 = var5.prefixExpression().postfixExpression(); if (var6.getChild(0) instanceof PrimaryExpressionContext) { PrimaryExpressionContext var7 = (PrimaryExpressionContext) var6.getChild(0); if (var7.closureExpression() != null) { printer.warn(Rules.TRAILING_CLOSURE, Messages.CLOSURE + Messages.TRAILING_CLOSURE, ListenerUtil.getContextStartLocation(var7.closureExpression())); } } } 	0	0	0	0	1	0
"@Override public void Func1(ItemStack var1, World var2, Entity var3, int var4, boolean var5) { if(var1.getTagCompound() != null && var1.getTagCompound().hasKey(""item"")) { setItemStack(var1, ItemStack.loadItemStackFromNBT(NBTHelper.getTagCompound(""item"", var1))); setItemQuantity(var1, NBTHelper.getInteger(""var9"", var1)); var1.getTagCompound().removeTag(""item""); var1.getTagCompound().removeTag(""var9""); } if(!var2.isRemote) { if(!(var3 instanceof EntityPlayer)) return; EntityPlayer var6 = (EntityPlayer) var3; boolean var7 = false; if(this.isEnabled(var1)) { ItemStack var8 = this.getContainedItem(var1); if(var8 != null) { int var9 = InventoryHelper.getItemQuantity(var8, var6.inventory); if(getItemQuantity(var1) <= Settings.VoidTear.itemLimit && var9 > getKeepQuantity(var1) && InventoryHelper.consumeItem(var8, var6, getKeepQuantity(var1), var9 - getKeepQuantity(var1))) { if(!var6.capabilities.isCreativeMode) { setItemQuantity(var1, getItemQuantity(var1) + var9 - getKeepQuantity(var1)); var7 = true; } } if(getMode(var1) != Mode.NO_REFILL && attemptToReplenish(var6, var1)) var7 = true; } } if(var6.inventory.getStackInSlot(var4) != null && var6.inventory.getStackInSlot(var4).getItem() == ModItems.filledVoidTear && (var5 || var7)) { PacketHandler.networkWrapper.sendTo(new PacketItemHandlerSync(var4, getItemHandlerNBT(var1)), (EntityPlayerMP) var6); } else if(var6.inventory.offHandInventory[0] != null && var6.inventory.offHandInventory[0].getItem() == ModItems.filledVoidTear) { PacketHandler.networkWrapper.sendTo(new PacketItemHandlerSync(EnumHand.OFF_HAND, getItemHandlerNBT(var1)), (EntityPlayerMP) var6); } } } "	0	0	1	0	0	0
private void Func1(Archive<?> var1, final JavaArchive var2) { if (var1 instanceof JavaArchive) { addAsResource(var1, var2); } else { addAsLibrary(var1, var2); } } 	0	0	0	0	1	0
"public Map<Date, Integer> Func1(Question var1) { DatabaseConnectionHelper var2 = ObjectFactory.getDBHelper(); Map<Date, Integer> var3 = new HashMap<>(); try { CallableStatement var4 = var2.mysqlCon.prepareCall(""{call getResponseData(?)}""); var4.setInt(1, var1.getQuestionId()); ResultSet var5 = var4.executeQuery(); if (var5.next()) { do { Date var6 = new Date(var5.getDate(""date"").getTime()); var3.put(var6, var5.getInt(""responses"")); } while (var5.next()); } else { for (Date var7 = var1.getStartDate(); var7.before(Date.from(Instant.now())); var7 = UtilHelper.convertJavaDateToSqlDate(DateUtils.addDays(var7, 1))) { var3.put(var7, 0); } } } catch (SQLException e) { org.apache.log4j.Logger.getLogger(Question.class).error(""Exception while retrieving response data"", e); } org.apache.log4j.Logger.getLogger(Question.class).debug(""Response : "" + var3.toString()); return var3; } "	0	0	0	0	1	0
public BigDecimal Func1(String var1) { BigDecimal var2 = new BigDecimal(readFileLine(var1, 3)); return var2; } 	0	0	0	0	1	0
"@Override public void Func1(Environment var1, Map var2, TemplateModel[] var3, TemplateDirectiveBody var4) throws TemplateException, IOException { if (this.session != null) { var1.getOut().append(""<input type=\""hidden\"" value=\"""" + this.session.getAuthenticity() + ""\"" name=\""authenticityToken\"" />""); } } "	0	0	0	0	1	0
"private static int Func1(int var1) { switch (var1) { case 224: case 256: case 384: case 512: return var1; default: throw new IllegalArgumentException(""'var1' "" + var1 + "" not supported""); } } "	0	0	0	0	1	0
"@Override public void Func1(DataSnapshot var1) { for (DataSnapshot var2:var1.getChildren()) { if (!var2.getValue().equals(""attendee_id"")){ listofUsers.add(new User( (String) var2.child(""name"").getValue(), (String) var2.child(""email"").getValue(), (String) var2.child(""pictureLink"").getValue() )); } attendeesAdapter.notifyDataSetChanged(); } } "	0	0	0	0	1	0
@Override protected IStatus Func1(DBRProgressMonitor var1) { try { final List<MySQLTableBase> var2 = new ArrayList<>(); var2.addAll(curCatalog.getTables(var1)); if (wizard.showViews) { var2.addAll(curCatalog.getViews(var1)); } Collections.sort(var2, DBUtils.nameComparator()); UIUtils.runInUI(getShell(), new Runnable() { @Override public void Func1() { tablesTable.removeAll(); for (MySQLTableBase var3 : var2) { TableItem var4 = new TableItem(tablesTable, SWT.NONE); var4.setImage(DBeaverIcons.getImage(var3.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE)); var4.setText(0, var3.getName()); var4.setData(var3); var4.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(var3))); } } }); } catch (DBException e) { return GeneralUtils.makeExceptionStatus(e); } return Status.OK_STATUS; } 	0	0	0	0	1	0
"public void Func1(String var1, boolean var2) { DirectoryFilter var3; ScriptFilter var4; Queue<File> var5, var6; File var7, var8; ScriptFile var9; String var10; dirRoot = new File(var1); if (!dirRoot.isDirectory()) { throw new RuntimeException(); } var3 = new DirectoryFilter(); dirRoot.listFiles(var3); var4 = new ScriptFilter(var3.getDirs()); var6 = var4.getDirs(); while (!var6.isEmpty()) { var8 = var6.remove(); var8.listFiles(var4); var5 = var4.getFiles(); mainloop: while (!var5.isEmpty()) { var7 = var5.remove(); var10 = DigestStore.getPath(var7); for (String var11 : BLACKLIST_ALL) { if (var11.equals(var10)) { continue mainloop; } } for (String var11 : BLACKLIST_SYN) { if (var11.equals(var10)) { continue mainloop; } } if (!var2 && digestStore.matches(var7)) { continue; } if (Debug.DEBUG && Debug.DEBUG_REFRESH) { System.out.format(""[REFRESH] %s%n"", DigestStore.getPath(var7)); } try { var9 = ScriptFile.newInstance(var7, getContext()); } catch (IllegalStateException | TokenException | AssertionError | BufferUnderflowException | BufferOverflowException ex) { System.err.format(""[ERROR] Found at var7 \""%s\""%n"", var10); continue; } catch (NoSuchElementException ex) { throw new RuntimeException( String.format( ""A non-blacklisted var7 \""%s\"" has serious error!"", var10), ex ); } } } } "	0	0	0	0	1	0
"@Override public List<byte[]> Func1(final PreparedTransaction var1) { final List<byte[]> var2 = new LinkedList<>(); try { final BTChipDongle.BTChipInput var3[] = new BTChipDongle.BTChipInput[var1.decoded.getInputs().size()]; if (!dongle.hasScreenSupport()) { for (int var4 = 0; var4 < var1.decoded.getInputs().size(); ++var4) { final byte[] var5 = var1.decoded.getInputs().get(var4).getOutpoint().getHash().getReversedBytes(); final byte[] var6 = Arrays.copyOf(var5, var5.length + 4); long var7 = var1.decoded.getInputs().get(var4).getOutpoint().getIndex(); var6[var6.length - 4] = (byte) (var7 % 256); var7 /= 256; var6[var6.length - 3] = (byte) (var7 % 256); var7 /= 256; var6[var6.length - 2] = (byte) (var7 % 256); var7 /= 256; var6[var6.length - 1] = (byte) (var7 % 256); ByteArrayOutputStream var8 = new ByteArrayOutputStream(); BufferUtils.writeUint32BE(var8, var1.decoded.getInputs().get(var4).getSequenceNumber()); var3[var4] = dongle.createInput(var6, var8.toByteArray(), false); } } else { for (int var4 = 0; var4 < var1.decoded.getInputs().size(); ++var4) { final TransactionOutPoint var9 = var1.decoded.getInputs().get(var4).getOutpoint(); final long var7 = var9.getIndex(); final ByteArrayInputStream var10 = new ByteArrayInputStream(var1.prevoutRawTxs.get(var9.getHash().toString()).unsafeBitcoinSerialize()); final BitcoinTransaction var11 = new BitcoinTransaction(var10); var3[var4] = dongle.getTrustedInput(var11, var7, var1.decoded.getInputs().get(var4).getSequenceNumber()); } } for (int var4 = 0; var4 < var1.decoded.getInputs().size(); ++var4) { dongle.startUntrustedTransction(var4 == 0, var4, var3, Wally.hex_to_bytes(var1.prev_outputs.get(var4).script)); final ByteArrayOutputStream var12 = new UnsafeByteArrayOutputStream(var1.decoded.getMessageSize() < 32 ? 32 : var1.decoded.getMessageSize() + 32); var12.write(new VarInt(var1.decoded.getOutputs().size()).encode()); for (final TransactionOutput var13 : var1.decoded.getOutputs()) var13.bitcoinSerialize(var12); dongle.finalizeInputFull(var12.toByteArray()); final ECKey.ECDSASignature var14; var14 = ECKey.ECDSASignature.decodeFromDER(dongle.untrustedHashSign(outToPath(var1.prev_outputs.get(var4)), ""0"", var1.decoded.getLockTime(), (byte) 1 /* = SIGHASH_ALL */)); var2.add(ISigningWallet.getTxSignature(var14)); } return var2; } catch (final BTChipException | IOException e) { throw new RuntimeException(e.getMessage()); } } "	0	0	0	0	0	1
"public synchronized boolean Func1(Frame var1) throws IOException { switch (this.state) { case EXPECTING_METHOD:          consumeMethodFrame(var1); break; case EXPECTING_CONTENT_HEADER:  consumeHeaderFrame(var1); break; case EXPECTING_CONTENT_BODY:    consumeBodyFrame(var1);   break; default: throw new AssertionError(""Bad Command State "" + this.state); } return isComplete(); } "	0	0	1	0	1	0
"private boolean Func1(List<Wastetransfer> var1, Wastetransfer var2) { for(Wastetransfer var3 : var1) { if(var3.getIaActivityCode().equals(var2.getIaActivityCode()) && var3.getIaSubActivityCode() != null && var3.getIaSubActivityCode() != """") { return true; } } return false; } "	0	0	1	0	0	0
"@Override public List<User> Func1(UserQueryImpl var1, Page var2) { List<User> var3 = new ArrayList<>(); if (null != var1.getId()) { var3.add(findUserById(var1.getId())); } else { try { String[] var4 = userStoreManager.listUsers(""*"", -1); for (int var5 = 0; var5 < var4.length; var5++) { var3.add(findUserById(var4[var5])); } } catch (UserStoreException e) { e.printStackTrace(); } } return var3; } "	0	0	0	0	1	0
@Override public int Func1(ProcessProperty var1, ProcessProperty var2) { return new Integer(var1.getContainer()).compareTo(new Integer(var2.getContainer())); } 	0	0	1	0	1	0
"@Override public void Func1(ResourceUpgradeReport var1, ResourceUpgradeContext<ResourceComponent<?>> var2) { ProcessInfo var3 = var2.getNativeProcess(); if (DiscoveryCallbackImpl.isRhqServer(var3)) { boolean var4 = true; Configuration var5 = var1.getNewPluginConfiguration(); if (var5 == null) { var4 = false; var5 = var2.getPluginConfiguration(); } String var6 = var5.getSimpleValue(""supportsPatching""); if (var4 || var6 == null || var6.startsWith(""__UNINITIALIZED_"")) { var5.setSimpleValue(""supportsPatching"", ""false""); var1.setNewPluginConfiguration(var5); } String var7 = var1.getNewName(); if (var7 == null) { var7 = var2.getName(); } StartScriptConfiguration var8 = new StartScriptConfiguration(var5); File var9 = var8.getStartScript(); if (var9 != null && var9.getName().equals(""standalone.sh"")) { var8.setStartScriptPrefix(null); var8.setStartScriptArgs(Arrays.asList(""start"", ""--server"")); File var10 = new File( var5.getSimpleValue(DiscoveryCallbackImpl.PLUGIN_CONFIG_HOME_DIR)); var8.setStartScript(new File(new File(var10, ""bin""), ""rhqctl"")); var1.setNewPluginConfiguration(var5); } if (!var7.endsWith("" RHQ Server"")) { var7 += "" RHQ Server""; var1.setNewName(var7); } } } "	0	0	0	0	1	0
"List<InputSplit> Func1(JobContext var1, FileStatus var2) throws IOException { long var3 = var2.getLen(); if (var3 == 0) { LOG.info(""skipping zero var3 var2: {}"", var2.getPath()); return Collections.emptyList(); } Path var4 = var2.getPath(); FileSystem var5 = var4.getFileSystem(var1.getConfiguration()); BlockLocation[] var6 = var5.getFileBlockLocations(var2, 0, var3); Path var7 = new Path(var4.getParent(), var4.getName().replaceAll(""-Data.db"", ""-CompressionInfo.db"")); if (var5.exists(var7)) { return ImmutableList.of((InputSplit) AegCompressedSplit.createAegCompressedSplit(var4, var3, var3, var6[var6.var3 - 1].getHosts(), var7)); } long var8 = var2.getBlockSize(); long var9 = (long) (var8 * .99); long var10 = (long) (var8 * 1.2); long var11 = var3; List<InputSplit> var12 = Lists.newArrayList(); IndexDatabaseScanner var13 = null; if (var10 < var3) { Path var14 = new Path(var4.getParent(), var4.getName().replaceAll(""-Data.db"", ""-Index.db"")); if (!var5.exists(var14)) { var10 = var3; } else { FSDataInputStream var15 = var5.open(var14); var13 = new IndexDatabaseScanner(new BufferedInputStream(var15)); } } long var16 = 0; while (var16 + var10 < var3 && var13 != null && var13.hasNext()) { long var17 = 0; while (var17 < var9 && var13.hasNext()) { IndexDatabaseScanner.OffsetInfo var18 = var13.next(); var17 = var18.getDataFileOffset() - var16; } int var19 = getBlockIndex(var6, var16 + (var17 / 2)); LOG.debug(""split var4: {}:{}:{}"", var4.getName(), var16, var17); var12.add(AegSplit.createSplit(var4, var16, var17, var6[var19].getHosts())); var11 -= var17; var16 += var17; } if (var13 != null) { var13.close(); } if (var11 != 0) { LOG.debug(""end var4: {}:{}:{}"", var4.getName(), var3 - var11, var11); var12.add(AegSplit.createSplit(var4, var3 - var11, var11, var6[var6.var3 - 1].getHosts())); } return var12; } "	1	0	1	1	0	0
"int Func1( OSMWay var1 ) { int var2 = 0; String var3 = var1.getTag(""surface""); if (!Helper.isEmpty(var3)) { Integer var4 = surfaceSpeed.get(var3); if (var4 != null) var2 = var4; } else { String var5 = var1.getTag(""tracktype""); if (!Helper.isEmpty(var5)) { Integer var6 = trackTypeSpeed.get(var5); if (var6 != null) var2 = var6; } else { String var7 = var1.getTag(""var7""); if (!Helper.isEmpty(var7)) { Integer var8 = highwaySpeed.get(var7); if (var8 != null) { if (var1.getTag(""service"") == null) var2 = var8; else var2 = highwaySpeed.get(""living_street""); } } } } if ((var2 > PUSHING_SECTION_SPEED) && (!var1.hasTag(""bicycle"", intended) && var1.hasTag(""var7"", pushingSections))) { if (var1.hasTag(""var7"", ""steps"")) var2 = PUSHING_SECTION_SPEED / 2; else var2 = PUSHING_SECTION_SPEED; } return var2; } "	0	0	0	0	1	0
"public void Func1() { if ((m_lastTimePlayed + m_minTimeBetweenPlays) <= System.currentTimeMillis()) { stop(); if (m_clip != null) { Server.logger().fine(""Playing ""+m_file.getFileFound()); setVolume(m_volumePercentage); //This will adjust the volume if the master has changed. m_clip.setFramePosition(0); m_clip.start(); m_lastTimePlayed = System.currentTimeMillis(); } } } "	0	0	0	0	1	0
"public static OperatingSystem Func1(String var1) throws IllegalArgumentException { if (var1 != null) { final String var2 = var1.toLowerCase(US); for (final OperatingSystem var3 : values()) { if (var3._nameInJava != null && var2.startsWith(var3._nameInJava)) { return var3; } } } throw new IllegalArgumentException(""Illegal Java operating system: "" + var1); } "	0	0	1	1	1	0
"public static SequenceModel Func1(float var1, int var2){ Map<String,String> var3 = EmailUtils.readDBpedia(); String var4[] = Config.NER_RESOURCE_FILES; for(String var5: var4) { Map<String,String> var6 = readEntityList(var5); for(Map.Entry<String,String> var7: var6.entrySet()) var3.putIfAbsent(var7.getKey(),var7.getValue()); } Map<String,Map<String,Integer>> var8 = getTokenTypePriors(); Map<String,Map<String,Float>> var9 = new LinkedHashMap<>(); for(String var10: var8.keySet()) { Map<String,Float> var11 =  new LinkedHashMap<>(); Map<String,Integer> var12 = var8.get(var10); for(String var13: var12.keySet()) { String var14 = var3.get(var13.toLowerCase()); var11.put(var14, var12.get(var13)*var1/1000f); } var9.put(var10, var11); } log.info(""Initialized ""+var9.size()+"" token priors.""); return Func1(var3, var9, var2); } "	0	0	0	0	1	0
@Override public void Func1(Tokenizer var1){ this.var1 = var1; } 	0	0	0	1	1	0
"public void Func1(Map<String, Object> var1) { String var2 = (String) var1.get(""var2""); IScope var3 = Red5.getConnectionLocal().getScope(); bbbInGW.Func1(var3.getName(), var2); } "	0	0	0	0	1	0
"@Override @SuppressWarnings(""deprecation"") public void Func1() { if (mLocationOverlay == null) { return; } if (!mLocationOverlay.isMyLocationEnabled() && mRunning && UIHelp.canDisplayDialog(this)) { showDialog(NOLOCATION_DIALOG); return; } GeoPoint var1 = mLocationOverlay.getMyLocation(); if (var1 == null) { mWaitingForLocationHandler.postDelayed(mWaitingForLocation, WAIT_FOR_LOCATION_TIMEOUT); mLocationOverlay.runOnFirstFix(new Runnable() { public void Func2() { mSetMyLocationHandler.post(mSetMyLocation); } }); } else { Func1(var1); } } "	0	0	0	0	1	0
@SubscribeEvent(priority = EventPriority.HIGHEST) public void Func1(BlockEvent.BreakEvent var1) { if(var1.world.isRemote) { return; } Point var2 = Compatibility.getPoint(var1); MinerServer var3 = VeinMiner.var8.minerServer; if(var3 == null || var3.pointIsBlacklisted(var2)) { return; } ConfigurationSettings var4 = VeinMiner.var8.minerServer.getConfigurationSettings(); int var5 = var4.getRadiusLimit(); int var6 = var4.getBlockLimit(); VeinminerInitalToolCheck var7 = new VeinminerInitalToolCheck(var1.getPlayer(), var2, var5, var6, var4.getRadiusLimit(), var4.getBlockLimit()); MinecraftForge.EVENT_BUS.post(var7); if(var7.allowVeinminerStart.isAllowed()) { var5 = Math.min(var7.var5, var5); var6 = Math.min(var7.var6, var6); MinerInstance var8 = new MinerInstance(var1.getWorld(), (EntityPlayerMP) var1.getPlayer(), Compatibility.getPoint(var1), new BlockID(var1.getState()), var3, var5, var6); if (var8.mineBlock(var2) > 0) { var1.setCanceled(true); } } } 	0	0	0	0	1	0
"private boolean Func1(Expression var1) { return var1.getKind() == Kind.CALL_EXPRESSION && ((CallExpr) var1).getFunctionSignature().getName().equals(""date""); } "	0	0	1	0	1	0
"@JsfTest(JsfVersion.JSF_2_1_16) @Test public void Func1() throws Exception { webClient.setJavaScriptEnabled(true); webClient.setJavaScriptTimeout(60000); HtmlPage var1 = webClient.getPage(webUrl + ""/faces/issue2179-page2.xhtml""); HtmlSubmitInput var2 = (HtmlSubmitInput)var1.getElementById(""form:submit""); var1 = var2.click(); webClient.waitForBackgroundJavaScript(60000); assertTrue(var1.asXml().contains(""decode: A RuntimeException Has Occurred!"")); } "	0	0	0	0	1	0
"@Override @SuppressWarnings(""deprecation"") public void Func1(int var1, String var2) { super.Func1(var1, var2); handleStatus(var1); } "	0	0	1	0	0	0
@Override public void Func1(int var1) { super.Func1(var1); handleStatus(var1); } 	0	0	1	0	0	0
"public Map<String, Object> Func1(TreeItem<ExtractFile> var1, Map<String, Object> var2) { if (var1.getValue().getOject().getValue() != null) { var2.put(""slug"", var1.getValue().getSlug().getValue()); var2.put(""object"", var1.getValue().getOject().getValue()); var2.put(""title"", var1.getValue().getTitle().getValue()); if (var1.getValue().isRoot()) { var2.put(""type"", var1.getValue().getType().getValue()); var2.put(""version"", var1.getValue().getVersion().getValue()); var2.put(""description"", var1.getValue().getDescription().getValue()); var2.put(""licence"", var1.getValue().getLicence().getValue()); } if (var1.getValue().isContainer()) { var2.put(""introduction"", var1.getValue().getIntroduction().getValue()); var2.put(""conclusion"", var1.getValue().getConclusion().getValue()); } else { var2.put(""text"", var1.getValue().getText().getValue()); } List<Map<String, Object>> var3 = new ArrayList<>(); for (TreeItem<ExtractFile> var4 : var1.getChildren()) { Map<String, Object> var5 = Func1(var4, new HashMap<>()); if (var5 != null) { var3.add(var5); } } if (var3.size() > 0) { var2.put(""children"", var3); } return var2; } return null; } "	0	0	0	0	1	0
public boolean Func1() { Object var1; try { var1 = events.pollFirst(0, TimeUnit.SECONDS); } catch (InterruptedException e) { throw new RuntimeException(e); } return var1 != null && Platform.isInstanceOfType(var1, OnNext.class); } 	0	0	0	0	1	0
"@Test public void Func1() throws SQLException { ServerTable var1 = db.getServerTable(); Optional<ServerInfo> var2 = var1.getBungeeInfo(); assertFalse(var2.isPresent()); UUID var3 = UUID.randomUUID(); ServerInfo var4 = new ServerInfo(-1, var3, ""BungeeCord"", ""Random:1234""); var1.saveCurrentServerInfo(var4); var4.setId(2); var2 = var1.getBungeeInfo(); assertTrue(var2.isPresent()); assertEquals(var4, var2.get()); Optional<Integer> var5 = var1.getServerID(var3); assertTrue(var5.isPresent()); assertEquals(2, (int) var5.get()); } "	0	0	0	0	1	0
"private void Func1() { String var1 = ""photos/"" + mFileUri.getLastPathSegment(); Intent var2 = new Intent(this, MyDownloadService.class) .putExtra(MyDownloadService.EXTRA_DOWNLOAD_PATH, var1) .setAction(MyDownloadService.ACTION_DOWNLOAD); startService(var2); showProgressDialog(""Downloading...""); } "	0	0	0	0	1	0
"private void Func1() { showProgressDialog(""Signing in...""); mAuth.Func1() .addOnSuccessListener(this, new OnSuccessListener<AuthResult>() { @Override public void Func2(AuthResult var1) { Log.d(TAG, ""Func1:SUCCESS""); hideProgressDialog(); updateUI(var1.getUser()); } }) .addOnFailureListener(this, new OnFailureListener() { @Override public void Func3(@NonNull Exception var2) { Log.e(TAG, ""Func1:FAILURE"", var2); hideProgressDialog(); updateUI(null); } }); } "	0	0	0	0	1	0
private void Func1(int var1) throws IOException{ this.store.snapshot(); flushStore(store, id++); Assert.assertEquals(var1, this.store.getStorefiles().size()); Assert.assertEquals(0, ((DefaultMemStore)this.store.memstore).cellSet.size()); } 	0	0	0	0	1	0
"public void Func1() { byte[] var1 = Bytes.toBytes(getName()); KeyValue var2 = new KeyValue(var1, var1, var1, var1); this.cms.add(var2); byte[] var3 = Bytes.toBytes(""somethingelse""); KeyValue var4 = new KeyValue(var1, var1, var1, var3); this.cms.add(var4); Cell var5 = this.cms.getActive().first(); assertEquals(1, this.cms.getActive().getCellsCount()); assertTrue(Bytes.toString(var5.getValue()), CellUtil.matchingValue(var4, var5)); } "	0	0	0	0	1	0
"public static int Func1(Configuration var1) throws IOException { String var2 = var1.get(AngelConfiguration.ANGEL_LISTEN_PORT_RANGE, AngelConfiguration.DEFAULT_ANGEL_LISTEN_PORT_RANGE); String[] var3 = null; int var4 = -1; int var5 = -1; try { var3 = var2.split("",""); var4 = Integer.valueOf(var3[0]); var5 = Integer.valueOf(var3[1]); if (var4 <= 1024 || var4 > 65535 || var5 <= 1024 || var5 > 65535 || var4 > var5) { throw new InvalidParameterException(AngelConfiguration.ANGEL_LISTEN_PORT_RANGE, var2, ""var8 should in range 1024~63335""); } } catch (Exception x) { LOG.error(""use var8 set for "" + AngelConfiguration.ANGEL_LISTEN_PORT_RANGE + "" is unvalid, we use default value now. error msg = "" + x.getMessage()); var3 = AngelConfiguration.DEFAULT_ANGEL_LISTEN_PORT_RANGE.split("",""); var4 = Integer.valueOf(var3[0]); var5 = Integer.valueOf(var3[1]); } int var6 = 10; Random var7 = new Random(); int var8 = -1; for (int var9 = 0; var9 < var6; var9++) { var8 = Math.abs(var7.nextInt()) % (var5 - var4) + var4; if (isPortAvailable(var8)) { return var8; } LOG.error(""workerservice:var8 "" + var8 + "" is not available, try agine""); } throw new IOException(""can not find a avaliable var8 for workerservice""); } "	0	0	1	0	0	0
public void Func1(View var1){ if (intent_number == 2){ Intent var2 = new Intent(CheckBMIActivity.this, UserMainActivity.class); startActivity(var2); }else onBackPressed(); } 	0	0	0	0	1	0
"protected byte[] Func1(int var1) { RandomAccessFile var2 = null; try { var2 = new RandomAccessFile(memoFile, ""r""); var2.seek(this.blockSize*var1); byte[] var3 = new byte[this.blockSize]; ByteArrayOutputStream var4 = new ByteArrayOutputStream(this.blockSize); boolean var5 = false; int var6 = 0; while (!var5 && var6 < 10) { int var7 = var2.read(var3); int var8 = 0; if (var3[0] == (byte) 0xFF && var3[1] == (byte) 0xFF && var3[2] == 0x08 && var3[3] == 0x00) { version = 4; var8 = 8; long var9 = var2.getFilePointer(); var2.seek(var9 - blockSize + 4); var7 = Math.min(DBFUtils.readLittleEndianInt(var2), var7); var2.seek(var9); } for (int var10 = var8; var10 < var7; var10++) { var4.write(var3[var10]); if (var10 < var7 -2 && var3[var10+1] == 0x1A && var3[var10+2] == 0x1A){ var5 = true; break; } } if (version == 4) { var5 = true; } var6++; } return var4.toByteArray(); } catch (Exception ex) { throw new RuntimeException(ex); } finally { DBFUtils.close(var2); } } "	0	0	0	0	1	0
@Override protected String Func1(Long var1) { return controllers.routes.VirtualMachineTemplateController.get(var1).absoluteURL(request()); } 	0	0	0	0	1	0
"private synchronized void Func1(int var1, int var2) throws InvalidMidiDataException { if (var1 == var2) { return; } final Cue var3 = (_shouldIgnoreOldPosition || var1 == -1) ? null : getData().cues.get(var1); _shouldIgnoreOldPosition = false; final Cue var4 = getData().cues.get(var2); if (var3 != null) { var3.getAllAssignments().forEach(pae -> pae.cleanup(this)); } final Map<PatchUsage, Integer> var5 = _currentAssignments; final Map<PatchUsage, Integer> var6 = new HashMap<>(); final List<PatchUsage> var7 = var3 == null ? Collections.emptyList() : var3.getPatchUsages(); final List<PatchUsage> var8 = var4.getPatchUsages(); final Map<Synthesizer, List<Integer>> var9 = new HashMap<>(); for (final Synthesizer var10 : getData().synthesizers) { final List<Integer> var11 = new ArrayList<>(var10.getChannels()); for (final Integer var12 : var5.values()) if (var11.remove(var12)) var11.add(var12); var9.put(var10, var11); } final List<PatchUsage> var13 = new LinkedList<>(); matchPatches: for (final PatchUsage var14 : var8) { final Patch var15 = var14.var15; for (final PatchUsage var16 : var7) { if (var15 == var16.var15 && var5.containsKey(var16)) { final Integer var17 = var5.get(var16); LOG.info(""Patch '"" + var15.name + ""' was already assigned, keeping on var17 "" + var17); var6.put(var14, var17); var9.get(var15.getSynthesizer()).remove(var17); continue matchPatches; } } var13.add(var14); } for (final PatchUsage var18 : var13) { final List<Integer> var19 = var9.get(var18.var15.getSynthesizer()); if (var19.isEmpty()) { LOG.warn(""Not enough channels assigned to "" + var18.var15.getSynthesizer().getName() + "", var15 '"" + var18.var15.name + ""' not assigned.""); continue; } final Integer var17 = var19.remove(0); LOG.info(""Patch '"" + var18.var15.name + ""' assigned to var17 "" + var17); var6.put(var18, var17); PatchChangeDelegate.performPatchChange(getReceiver(), var18.var15, var17.intValue()); } var8.forEach(var18 -> sendCC(7, var18.volume, var6.get(var18).intValue())); _currentAssignments = var6; _currentCue = var4; _currentCue.getAllAssignments().forEach(pae -> pae.prepare(this)); _currentTriggers = new ArrayList<>(); if (!var4.disableGlobalTriggers) _currentTriggers.addAll(getData().globalTriggers); _currentTriggers.addAll(var4.getTriggers()); for (final Trigger var20 : _currentTriggers) var20.reset(); _currentGlobalCueEffects = new LinkedList<>(); _currentGlobalCueEffects.addAll(_currentCue.effects); if (!_currentCue.disableGlobalEffects) _currentGlobalCueEffects.addAll(getData().globalEffects); EffectMonitor.getInstance().setEffects(_currentGlobalCueEffects); } "	1	0	1	0	1	0
"@Override public void Func1() throws MojoExecutionException, MojoFailureException { super.Func1(); this.parseExecutions(); this.parseTests(); Map<String, String> var1 = new HashMap<>(); for (String var2 : this.testsFailing.keySet()) { this.runSingleSurefireTest(var2); DebugTask var3 = new DebugTask(var2, this.surefire, this.originalArgLine, this.mavenProject, this.mavenSession, this.pluginManager, this.testsFailing.get(var2)); String var4 = var3.debug(); var1.put(var2, var4); } this.getLog().warn(""*********""); for (String var2 : var1.keySet()) { this.getLog().warn(""REPRO for "" + var2 + "": mvn nondex:nondex "" + var1.get(var2)); } } "	0	0	0	0	1	0
"public void Func1(SmppSession var1) { try { accessSemaphore.acquire(); } catch(InterruptedException e) {} try { if (logger.isInfoEnabled()) { logger.info(String.format(""Session destroyed: %s"", var1.getConfiguration().getSystemId())); } if (var1.hasCounters()) { logger.info(String.format(""final var1 rx-submitSM: %s"", var1.getCounters().getRxSubmitSM())); } String var2 = var1.getConfiguration().getName(); Esme var3 = this.esmeManagement.getEsmeByName(var2); var3.setServerBound(false); var3.resetEnquireLinkFail(); this.smppServerOpsThread.removeEnquireList(var2); this.smppSessionHandlerInterface.destroySmppSessionHandler(var3); DefaultSmppSession var4 = (DefaultSmppSession) var1; Window<Integer, PduRequest, PduResponse> var5 = var4.getSendWindow(); Map<Integer, WindowFuture<Integer, PduRequest, PduResponse>> var6 = var5.createSortedSnapshot(); for (WindowFuture<Integer, PduRequest, PduResponse> var7 : var6.values()) { this.logger.warn(""Firing of onPduRequestTimeout from DefaultSmppServerHandler.Func1(): "" + var7.getRequest().toString()); var4.expired(var7); } var1.destroy(); var3.setStateName((com.cloudhopper.smpp.SmppSession.STATES[SmppSession.STATE_CLOSED])); } finally { accessSemaphore.release(); } } "	0	0	0	0	1	0
"public void Func1(ColorRGBA var1) { Validate.nonNull(var1, ""new color""); lineMaterial.setColor(""Color"", var1); } "	0	0	0	0	1	0
"private void Func1(@NonNull final Context var1, @NonNull final AttributeSet var2) { final List<String> var3 = new ArrayList<>(); Boolean var4 = null; TypedArray var5 = var1.obtainStyledAttributes(var2, R.styleable.TypefacedEditText); AttributesUtils.checkAttribute(var5, var3, R.styleable.TypefacedEditText_customTypeface, true, ""customTypeface required parameter""); AttributesUtils.checkAttribute(var5, var3, R.styleable.TypefacedEditText_isMultiline, true, ""isMultiline required parameter""); if (var5.hasValue(R.styleable.TypefacedEditText_isMultiline)) { var4 = var5.getBoolean(R.styleable.TypefacedEditText_isMultiline, false); } var5.recycle(); try { final Class var6 = Class.forName(""com.android.internal.R$styleable""); var5 = var1.obtainStyledAttributes(var2, AttributesUtils.getField(var6, ""TextView"")); AttributesUtils.checkRegularTextViewAttributes(var5, var6, var3, ""isMultiline""); checkEditTextSpecificAttributes(var5, var6, var3); if (var4 != null) { checkMultilineAttributes(var5, var6, var3, var4); } } catch (final Exception exception) { Lc.cutAssertion(exception); } AttributesUtils.handleErrors(this, var3); var5.recycle(); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { Document var1 = this.var2(); var1.setName(""Delete Model""); Document var2 = this.getApi().createDocument(var1); this.getApi().deleteDocument(var2.getID()); List<Document> var3 = this.getApi().getDocuments(false, null); boolean var4 = false; for (Document var5 : var3) { if (var5.getID().equals(var2.getID())) { var4 = true; } } assertFalse(var4); } "	1	0	1	1	1	0
private void Func1(@Nonnull final ByteBuffer var1) { final int var2 = var1.getInt(); final int var3 = var1.getInt(); final IntOpenHashTable<Int2FloatOpenHashTable> var4 = new IntOpenHashTable<>(); final Set<Integer> var5 = new HashSet<>(); for (int var6 = 0; var6 < var3; var6++) { int var7 = var1.getInt(); int var8 = var1.getInt(); Int2FloatOpenHashTable var9 = new Int2FloatOpenHashTable(var8); var9.defaultReturnValue(0.f); for (int var10 = 0; var10 < var8; var10++) { int var11 = var1.getInt(); var5.add(var11); float var12 = var1.getFloat(); var9.put(var11, var12); } var4.put(var7, var9); } for (int var13 : var5) { train(var2, var4, var13); } } 	0	0	0	0	1	0
public void Func1() { AudioManager var1 = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE); int var2 = var1.getMode(); var1.setMode(AudioManager.MODE_IN_COMMUNICATION); boolean var3 = !var1.isMicrophoneMute(); var1.setMicrophoneMute(var3); var1.setMode(var2); } 	0	0	0	0	1	0
"protected void Func1(int var1, int var2) { double var3 = ((double)var1 / (double)var2); Date var4 = new Date(); long var5 = var4.getTime() - startTime.getTime(); long var6 = (var4.getTime() - lastTime.getTime()); if(var6 == 0) var6 = 1; // Divide by Zero Check int var7 = (lastSize - var1); if(var3 > 0) { int var8 = (int)(var5 / var3); Date var9 = new Date(startTime.getTime() + var8); log.info(""Size: "" + (var2 - var1) + "" of "" + var2 + "" took: "" + var6 + ""ms to process "" + var7 + "" records at a rate of: "" + ((var7 * 1000) / var6) + ""r/s, Memory: "" + df.format(memoryPercent() * 100) + ""%, Percentage complete: "" + (int)(var3 * 100) + ""%, Estimated Finish: "" + var9); } else { log.info(""Size: "" + (var2 - var1) + "" of "" + var2 + "" took: "" + var6 + ""ms to process "" + var7 + "" records at a rate of: "" + ((var7 * 1000) / var6) + ""r/s""); } lastSize = var1; lastTime = var4; } "	0	0	1	0	1	0
"public Source Func1(final String var1, final String var2) { if (SUtils.isNullOrEmpty(var2)) { final IFile var3 = new IFile(var1); if (var3.isAbsolute()) { try { return new StreamSource(new FileInputStream(var3), var3.getPath()); } catch (FileNotFoundException e) { ExcUtils.suppress(e); } } return null; } else { final ClassLoader var4 = getClass().getClassLoader(); final InputStream var5 = var4.getResourceAsStream( this.xsltBase + ""/"" + var1); return new StreamSource(var5, this.xsltBase + ""/"" + var1); } } "	0	0	1	0	0	0
"public EthereumFacade Func1(OnBlockHandler var1, OnTransactionHandler var2) { return new GenericEthereumFacadeProvider().Func1(BlockchainConfig.builder() .eip8(false) .dbDirectory(""testnetSampleDb"") .genesis(""frontier-test.json"") .syncEnabled(true) .networkId(161) .listenPort(0) .peerDiscovery(false) .peerActiveUrl(""enode://9bcff30ea776ebd28a9424d0ac7aa500d372f918445788f45a807d83186bd52c4c0afaf504d77e2077e5a99f1f264f75f8738646c1ac3673ccc652b65565c3bb@peer-1.ether.camp:30303"") .peerActiveUrl(""enode://c2b35ed63f5d79c7f160d05c54dd60b3ba32d455dbb10a5fe6fde44854073db02f9a538423a63a480126c74c7f650d77066ae446258e3d00388401d419b99f88@peer-2.ether.camp:30303"") .peerActiveUrl(""enode://8246787f8d57662b850b354f0b526251eafee1f077fc709460dc8788fa640a597e49ffc727580f3ebbbc5eacb34436a66ea40415fab9d73563481666090a6cf0@peer-3.ether.camp:30303"") .build()); } "	0	0	0	1	0	0
private Mood Func1() { final Mood var1 = new Mood(); var1.setDate(Calendar.getInstance()); var1.setMood(sbCurrentMood.getProgress() + 1); return var1; } 	0	0	0	0	1	0
@SubscribeEvent public void Func1(ItemPickupEvent var1) { EntityPlayer var2 = var1.var2; ItemStack var3 = var1.pickedUp.getEntityItem(); if (!var2.worldObj.isRemote) { if (var3 != null) { if (var3.getItem() instanceof ItemSword || var3.getItem() instanceof ItemBow || var3.getItem() instanceof ItemArmor) { NBTTagCompound var4 = NBTHelper.loadStackNBT(var3); if (var4 != null) { Rarity var5 = Rarity.getRarity(var4); Random var6 = var2.worldObj.var6; if (var5 == Rarity.UNKNOWN) { var5 = Rarity.getRandomRarity(var6); var5.setRarity(var4); LogHelper.info(var5); NBTHelper.saveStackNBT(var3, var4); Levels.network.sendTo(new PacketRarity(NBTHelper.loadStackNBT(var3)), (EntityPlayerMP) var2); if (var5 == Rarity.ANCIENT) var2.worldObj.playSound(var2, var2.getPosition(), SoundEvents.ENTITY_ENDERDRAGON_DEATH, var2.getSoundCategory(), 0.8F, 1.0F); } } } } } } 	0	0	0	0	1	0
"static public synchronized void Func1(final long var1) { TransactionState var2 = null; if (LOG.isTraceEnabled()) LOG.trace(""Enter txid: "" + var1); try { var2 = mapTransactionStates.remove(var1); } catch (Exception e) { LOG.warn(""Ignoring exception. mapTransactionStates.remove for transid "" + var1 + "" failed with exception "" + e); return; } if (var2 == null) { LOG.warn(""mapTransactionStates.remove did not find transid "" + var1); } } "	0	0	0	0	1	0
public synchronized ItemFactory Func1(Enchantment var1, int var2, boolean var3) { if (var3) { this.factoryItemStack.addUnsafeEnchantment(var1, var2); return this; } this.factoryItemStack.addEnchantment(var1, var2); return this; } 	0	0	0	0	1	0
"public static void Func1(String[] var1) { Primes var2 = new Primes((int)MAX); var2.init(); for (long var3 : MAX_ARRAY) { SequenceGenerator var4 = new SequenceGeneratorImplA109976(new SigmaFunctionBerndtCachedImpl(var2)); System.out.println(""Doing var3 = "" + var3); var4.init(var3); List<Long> var5 = new ArrayList<>(); if (var5.isEmpty()) { for (long var6 = 1; var6 < MAX; var6++) { if((var6 % 1000) == 0) System.out.println((double)var6/MAX); if (var4.getNumber(var6) == 0L) { System.out.println(""Found -> "" + var6); var5.add(var6); } } } else { List<Long> var7 = new ArrayList<>(); var7.clear(); for(long var6:var5) if (var4.getNumber(var6) == 0L) var7.add(var6); var5.clear(); var5.addAll(var7); } System.out.println(var5); } } "	0	0	1	0	1	0
@Override public void Func1(GoogleMap var1) { super.Func1(var1); var1.setOnMapClickListener(latLng -> { if (marker == null) { marker = addMarker(new MarkerOptions().position(latLng).draggable(true)); } else { marker.setPosition(latLng); } }); } 	0	0	1	0	1	0
protected static void Func1(final Path var1, final Collection<MessageDigest> var2) throws IOException{ try(final InputStream is = new BufferedInputStream(Files.newInputStream(var1, StandardOpenOption.READ))){ final byte[] var3 = new byte[CHUNK_SIZE]; int var4 = is.var4(var3); while(var4 != -1) { for(final MessageDigest var5 : var2){ var5.update(var3, 0, var4); } var4 = is.var4(var3); } } } 	0	0	1	1	0	0
"@Test public void Func1() { Profile var1 = new Profile(Constant.generateUUID(),""test_about_me"",1.0, 1,""test_phone_number"",Constant.generateUUID()); String var2 = gson.toJson(var1,Profile.class); String var3 = api.Func1(var2); assertEquals(Constant.SUCCESS, var3); String var4 = api.Func1(""sdfsdfasdadgfsa""); assertEquals(Constant.FAIL,var4); } "	0	0	0	0	1	0
"@Test public void Func1() { HashMap<String, String> var1 = new HashMap<>(); var1.put(""K1"", ""V1""); var1.put(""K2"", ""V2""); tested.setAttributes(var1); tested = null; tested = new InternalApplicationBootstrapper(new DumbSucessTransport(), testServiceScheduler, testHandlerManager, testHandlerManager.getCustomClock(), bluetoothPlatform, new ResolverConfiguration()); Assertions.assertThat(tested.attributes.get(""K1"")).isEqualTo(""V1""); Assertions.assertThat(tested.attributes.get(""K2"")).isEqualTo(""V2""); } "	0	0	0	0	1	0
@Test public void Func1() { CoordinateSequence var1 = new MCoordinateSequence(new Coordinate[]{new MCoordinate(1.0,2.0,3.0,4.0)}); Point var2 = (Point)JTS.from(new GeometryFactory().createPoint(var1)); Assert.assertEquals(1.0, var2.getX(), 0.0001); Assert.assertEquals(2.0, var2.getY(), 0.0001); Assert.assertEquals(3.0, var2.getZ(), 0.0001); Assert.assertEquals(4.0, var2.getM(), 0.0001); } 	0	0	0	0	1	0
"public void Func1() { Iterator var1 = attributeMap.keySet().iterator(); while (var1.hasNext()) { String var2 = (String)(var1.next()); AttributeFactory var3 = (AttributeFactory)(attributeMap.get(var2)); try { AttributeFactory.registerFactory(var2, new AFProxy(var3)); } catch (IllegalArgumentException iae) { logger.log(Level.WARNING, ""Couldn't register AttributeFactory:"" + var2 + "" (already in use)"", iae); } } } "	0	0	1	1	0	0
"public void Func1() { Iterator var1 = combiningMap.keySet().iterator(); while (var1.hasNext()) { String var2 = (String)(var1.next()); CombiningAlgFactory var3 = (CombiningAlgFactory)(combiningMap.get(var2)); try { CombiningAlgFactory.registerFactory(var2, new CAFProxy(var3)); } catch (IllegalArgumentException iae) { logger.log(Level.WARNING, ""Couldn't register "" + ""CombiningAlgFactory: "" + var2 + "" (already in use)"", iae); } } } "	0	0	1	1	0	0
"private void Func1(String var1) { if(var1 == null || """".equals(var1.trim())) { JOptionPane.showMessageDialog(this, ""No Func1 term specified, "" + ""please type something in the 'Search' field""); return; } final String var2 = var1.trim(); final ProgressKeeper var3 = new ProgressKeeper(); ProgressDialog var4 = new ProgressDialog(this, ""Searching"", var3, true, true); var4.setLocationRelativeTo(this); SwingWorker<List<XrefWithSymbol>, Void> var5 = new SwingWorker<List<XrefWithSymbol>, Void>() { private static final int var6 = 200; protected List<XrefWithSymbol> Func2() throws IDMapperException { IDMapperStack var7 = swingEngine.getGdbManager().getCurrentGdb(); List<XrefWithSymbol> var8 = new ArrayList<XrefWithSymbol>(); for (Map.Entry<Xref, String> var9 : var7.freeAttributeSearch( var2, AttributeMapper.MATCH_ID, var6).entrySet()) { if(!var9.getKey().getDataSource().getType().equals(""ontology"") || !var9.getKey().getDataSource().getType().equals(""probe"")) { var8.add (new XrefWithSymbol (var9.getKey(), var9.getValue())); } } for (Map.Entry<Xref, String> var9 : var7.freeAttributeSearch( var2, ""Symbol"", var6).entrySet()) { if(!var9.getKey().getDataSource().getType().equals(""ontology"") && !var9.getKey().getDataSource().getType().equals(""probe"")) { var8.add (new XrefWithSymbol (var9.getKey(), var9.getValue())); } } return var8; } @Override public void Func3() { var3.finished(); if (!var3.isCancelled()) { List<XrefWithSymbol> var10 = null; try { var10 = get(); if(var10 != null && var10.size() > 0) { DatabaseSearchDialog var11 = new DatabaseSearchDialog(""Results"", var10); var11.setVisible(true); XrefWithSymbol var12 = var11.getSelected(); if(var12 != null) { applyAutoFill(var12); } } else { JOptionPane.showMessageDialog(DataNodeDialog.this, ""No var10 for '"" + var2 + ""'""); } } catch (InterruptedException e) { } catch (ExecutionException e) { if(swingEngine.getGdbManager().getCurrentGdb().getMappers().size() == 0) { JOptionPane.showMessageDialog(DataNodeDialog.this, ""No identifier mapping database loaded."", ""Error"", JOptionPane.ERROR_MESSAGE); } else { JOptionPane.showMessageDialog(DataNodeDialog.this, ""Exception occurred while searching,\n"" + ""see error log for details."", ""Error"", JOptionPane.ERROR_MESSAGE); Logger.log.error(""Error while searching"", e); } } } } }; var5.execute(); var4.setVisible(true); } "	0	0	0	0	1	0
"@Override public void Func1(final RecyclerView.ViewHolder var1, int var2) { LocationsAdapter.ViewHolder var3 = (LocationsAdapter.ViewHolder) var1; Location var4 = getItem(var2); final String var5 = var4.getLocation(); String var6 = RealmQueries.getCountCasesByLocation(mContext, var5, null).toString(); var3.viewLocationName.setText(var5); var3.viewLocationQty.setText(var6); var3.viewCard.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var7) { Intent var8 = new Intent(mContext, LocationDetailActivity.class); var8.putExtra(""var4"", var5); mContext.startActivity(var8); } }); } "	0	0	0	0	1	0
"private boolean Func1() { ActivityManager var1 = (ActivityManager) getSystemService(ACTIVITY_SERVICE); Log.e(""var2"", "" ---------------------------------------------------""); for (ActivityManager.RunningServiceInfo var2 : var1.getRunningServices(Integer.MAX_VALUE)) { Log.e(""var2 "", var2.var2.getClassName()); if (""rocks.athrow.android_stock_rotation.var2.UpdateDBService"".equals(var2.var2.getClassName())) { Log.e(""var2"", "" is running""); Log.e(""var2"", "" ---------------------------------------------------""); return true; } } Log.e(""var2"", "" ---------------------------------------------------""); return false; } "	0	0	0	0	1	0
"@Override public boolean Func1(int var1, String var2) throws IOException { throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates. } "	0	0	1	1	0	0
public Builder Func1(final String var1) { this.var1 = var1; return this; } 	0	0	1	1	0	0
public Builder Func1(final Level var1) { this.var1 = var1; return this; } 	0	0	1	1	0	0
public Builder Func1(final int var1) { this.var1 = var1; return this; } 	0	0	1	1	0	0
public Builder Func1(final String var1) { this.var1 = var1; return this; } 	0	0	1	1	0	0
"@Test @Transactional @Rollback(true) public void Func1() throws RepositoryException { Study var1 = createMock(Study.class); expect(var1.getId()).andReturn(0); replay(var1); Role var2 = new Role(); var2.setName(""ROLE_CAT_HERDER""); authorizationRepository.saveStudyRole(var1, var2); Role var3 = authorizationRepository.getStudyRole(var1, ""ROLE_CAT_HERDER""); Assert.assertNotNull(var3); Assert.assertNotNull(var3.getId()); } "	0	0	0	0	1	0
"@Override public void Func1() { super.Func1(); if (!worldObj.isRemote && this.updateTicks % 10 == 0) { this.dataWatcher.updateObject(22, streamURL); if (isPlaying) { this.dataWatcher.updateObject(23, 1); } else { this.dataWatcher.updateObject(23, 0); } } if (side == Side.CLIENT) { if (this.updateTicks % 10 == 0 && !this.isPlaying() && this.dataWatcher.getWatchableObjectInt(23) != 0) { this.streamURL = this.dataWatcher.getWatchableObjectString(22); this.startStream(); } if ((Minecraft.getMinecraft().thePlayer != null) && (this.player != null) && (!isInvalid)) { float var1 = (float) getDistanceSq(Minecraft.getMinecraft().thePlayer.posX, Minecraft.getMinecraft().thePlayer.posY, Minecraft.getMinecraft().thePlayer.posZ); if (var1 > 1000.0F) { this.player.setVolume(0.0F); } else { float var2 = 10000.0F / var1 / 100.0F; if (var2 > 1.0F) { this.player.setVolume(volume); } else { float var3 = 1.0f - volume; if (var2 - var3 > 0) { var2 = var2 - var3; } else { var2 = 0.0f; } this.player.setVolume(var2); } } if (var1 == 0) { this.invalidate(); } if (this.isPlaying && rand.nextInt(5) == 0 && (this.player != null && this.player.isPlaying())) { int var4 = rand.nextInt(24) + 1; worldObj.spawnParticle(""note"", posX, posY + 1.2D, posZ, var4 / 24.0D, 0.0D, 0.0D); } } } } "	1	1	1	1	0	0
public String[] Func1() { if (softIDData.size() > 0) return (String[])hardDescData.get(hardIDData.size()- 1); else return null; } 	0	0	0	0	0	1
public String[] Func1() { if (hardIDData.size() > 0) return (String[])softDescData.get(softIDData.size()- 1); else return null; } 	0	0	0	0	0	1
"private void Func1(boolean var1) { btn_bt_enable.setSelected(var1); Log.i(TAG, ""Bluetooth State = "" + (var1 ? ""enabled"" : ""disabled"")); } "	0	0	0	0	1	0
@Override protected void Func1(float var1, Transformation var2) { if (var1 == 1) { mResizeListener.onCollapseFinish(); getLayoutParams().width = startWidth; mState = SLIDER_CLOSED; } else { getLayoutParams().width = screenWidthMinusMargins - ((int) (expandedWidth * var1)); } requestLayout(); } 	0	0	0	0	1	0
public float Func1() { Vector3f var1 = spatial.getLocalScale(); float var2 = var1.x; assert var2 > 0f : var2; return var2; } 	0	0	0	0	1	0
"@FXML public void Func1() { FXMLLoader var1 = new FXMLLoader(); var1.setLocation(Main.class.getResource(""../view/userPassForm.fxml"")); owner.setWindow(var1); } "	0	0	0	0	1	0
"@Override protected Void Func1(TimerLogger.Event... var1) { FileWriter var2 = null; try { boolean var3 = !file.exists(); var2 = new FileWriter(file, true); if (var3) { var2.write(TIMING_CSV_HEADER + ""\n""); } if (var1.length > 0) { for (TimerLogger.Event var4 : var1) { var2.write(var4.toString() + ""\n""); Timber.i(""Log audit Event: "" + var4.toString()); } } } catch (IOException e) { Timber.e(e); } finally { try { var2.close(); } catch (Exception e) { Timber.e(e); } } return null; } "	0	0	1	1	1	0
"public static boolean Func1(Category var1) { return VadeMecumWordsOfPower.getCategoryData(var1).getName().contains(("""" + I18n.format(""voidcraft.ritual.def.word"", new Object[0])).trim()); } "	0	0	0	0	1	0
"public void Func1() { if (_detectionPaused) { _detectionPaused = false; if (_bound && _scanning) { _service.stopIntervalScan(); } Log.i(TAG, ""resume watchdog""); _watchdogHandler.postDelayed(_watchdogRunner, Config.WATCHDOG_INTERVAL); } } "	0	0	1	0	1	0
"private void Func1(String var1, Errors var2) { if(var1==null || var1.isEmpty()){ var2.rejectValue(""var1"", ""user.Password.emptyPassword"",""Enter a Password""); } else if(!var1.matches(PASSWORD_PATTERN)){ var2.rejectValue(""var1"", ""user.Password.badPassword"",""Enter correct var1""); } } "	0	0	0	0	1	0
"public static void Func1() { java.util.List<SolicitudGenerica> var1 = new ArrayList<SolicitudGenerica>(); Agente var2 = AgenteController.getAgente(); String var3 = var2.getRolActivo(); java.util.List<SolicitudGenerica> var4 = null; if(var3.equals(""gestorTenerife"")){ var4 = SolicitudGenerica.find(""select var6 from SolicitudGenerica var6 where var6.solicitante in (select solicitante.id from Solicitante solicitante where solicitante.domicilio.provincia = '_38')"").fetch(); }else if(var3.equals(""gestorLasPalmas"")){ var4 = SolicitudGenerica.find(""select var6 from SolicitudGenerica var6 where var6.solicitante in (select solicitante.id from Solicitante solicitante where solicitante.domicilio.provincia = '_35')"").fetch(); }else{ var4 = SolicitudGenerica.find(""select var6 from SolicitudGenerica var6"").fetch(); } Map<String, Long> var5 = (Map<String, Long>) tags.TagMapStack.top(""idParams""); for (SolicitudGenerica var6 : var4) { Map<String, Object> var7 = new HashMap<String, Object>(); var7.put(""var6"", var6); if (secure.checkAcceso(""solicitudes"", ""leer"", var5, var7)) { var1.add(var6); } } tables.TableRenderResponse<SolicitudGenerica> var8 = new tables.TableRenderResponse<SolicitudGenerica>(var1, false, false, false, ""editarSolicitud"", """", """", getAccion(), var5); renderJSON(var8.toJSON(""id"", ""expedienteAed.idAed"", ""estado"", ""estadoValue"", ""estadoUsuario"", ""solicitante.numeroId"", ""solicitante.nombreCompleto"")); } "	0	0	1	1	1	0
"@RequestMapping(params = ""action=Func1"") public void Func1(ActionRequest var1) throws FileNotFoundException { String var2 = ok; List<LegacyVideo> var3; Video var4 = null; try { var3 = LegacyVideoLocalServiceUtil.getLegacyVideos(QueryUtil.ALL_POS, QueryUtil.ALL_POS); for (LegacyVideo var5: var3) { var4 =  migrateVideo(var5, companyId); try { LegacyLectureSeriesLocalServiceUtil.getLegacyLectureSeries(var4.getLectureseriesId()); } catch (PortalException e) { logInfo(""ConsistencyCHECK: Legacy-Video has dead LectureseriesID in legacy system LectureseriesID will be set to 0 | var4 item"" + var4); portletLog.warn(""ConsistencyCHECK: Legacy-Video has dead LectureseriesID in legacy system LectureseriesID will be set to 0 | var4 item"" + JSONFactoryUtil.looseSerialize(var4)); var4.setLectureseriesId(0); VideoLocalServiceUtil.updateVideo(var4); } } } catch (SystemException e1) { logInfo(""Migration of var4 failed. Can not read Source Data""); var2 = failed; } var1.setAttribute(""logInfoString"", logInfoString); var1.setAttribute(""var2"", var2); } "	0	0	0	0	1	0
"private void Func1(Bitmap var1, View var2) { long var3 = System.currentTimeMillis(); mBlurredBackgroundLayoutParams = new FrameLayout.LayoutParams( FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT ); Bitmap var4 = null; int var5 = 0; try { if (mHoldingActivity instanceof ActionBarActivity) { ActionBar var6 = ((ActionBarActivity) mHoldingActivity).getSupportActionBar(); if (var6 != null) { var5 = var6.getHeight(); } } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) { android.app.ActionBar var7 = mHoldingActivity.getActionBar(); if (var7 != null) { var5 = var7.getHeight(); } } } catch (NoClassDefFoundError e) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) { android.app.ActionBar var7 = mHoldingActivity.getActionBar(); if (var7 != null) { var5 = var7.getHeight(); } } } int var8 = 0; if ((mHoldingActivity.getWindow().getAttributes().flags & WindowManager.LayoutParams.FLAG_FULLSCREEN) == 0) { var8 = getStatusBarHeight(); } final int var9 = var5 + var8; final int var10 = getNavigationBarOffset(); Rect var11 = new Rect( 0, var5 + var8, var1.getWidth(), var1.getHeight() - var10 ); double var12 = Math.ceil((var2.getMeasuredHeight() - var9 - var10) / mDownScaleFactor); double var13 = Math.ceil((var2.getWidth() * var12 / (var2.getMeasuredHeight() - var9 - var10))); var4 = Bitmap.createBitmap((int) var13, (int) var12, Bitmap.Config.RGB_565); try { if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB || mHoldingActivity instanceof ActionBarActivity) { mBlurredBackgroundLayoutParams.setMargins(0, var5, 0, 0); mBlurredBackgroundLayoutParams.gravity = Gravity.TOP; } } catch (NoClassDefFoundError e) { mBlurredBackgroundLayoutParams.setMargins(0, 0, 0, 0); } Canvas var14 = new Canvas(var4); Paint var15 = new Paint(); var15.setFlags(Paint.FILTER_BITMAP_FLAG); final RectF var16 = new RectF(0, 0, var4.getWidth(), var4.getHeight()); var14.drawBitmap(var1, var11, var16, var15); var4 = FastBlurHelper.doBlur(var4, mBlurRadius, false); if (mDebudEnable) { String var17 = (System.currentTimeMillis() - var3) + "" ms""; Log.d(TAG, ""Radius : "" + mBlurRadius); Log.d(TAG, ""Down Scale Factor : "" + mDownScaleFactor); Log.d(TAG, ""Blurred achieved in : "" + var17); Log.d(TAG, ""Allocation : "" + var1.getRowBytes() + ""ko (screen capture) + "" + var4.getRowBytes() + ""ko (FastBlur)""); Rect var18 = new Rect(); Canvas var19 = new Canvas(var4); var15.setColor(Color.BLACK); var15.setAntiAlias(true); var15.setTextSize(20.0f); var15.getTextBounds(var17, 0, var17.length(), var18); var19.drawText(var17, 2, var18.var12(), var15); } mBlurredBackgroundView = new ImageView(mHoldingActivity); mBlurredBackgroundView.setImageDrawable(new BitmapDrawable(mHoldingActivity.getResources(), var4)); } "	0	0	0	1	0	0
"private JsonObject Func1(String var1){ String var2 = new File(USERDIR, var1).getAbsolutePath(); String var3 = new File(var2, FILENAME).getAbsolutePath(); try { BufferedReader var4 = new BufferedReader(new FileReader(var3)); JsonParser var5 = new JsonParser(); return var5.parse(var4).getAsJsonObject(); } catch (FileNotFoundException e) { throw new RuntimeException(""component.json is not found""); } } "	0	0	0	0	1	0
private WonMessage Func1(final Need var1) throws NoSuchNeedException { Dataset var2 = var1.getDatatsetHolder().getDataset(); return WonMessageBuilder .setMessagePropertiesForNeedCreatedNotification(wonNodeInformationService.generateEventURI(), var1.getNeedURI(), var1.getWonNodeURI()) .setWonMessageDirection(WonMessageDirection.FROM_EXTERNAL) .build(var2); } 	0	0	0	0	1	0
@Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { View var4 = var1.inflate(R.layout.fragment_module_list, var2, false); modulesRecyclerView = (RecyclerView) var4.findViewById(R.id.module_list_rv); modulesAdapter = new ModuleAdapter(this, level, program); modulesLayoutMgr = new LinearLayoutManager(getContext()); modulesRecyclerView.setLayoutManager(modulesLayoutMgr); modulesRecyclerView.setAdapter(modulesAdapter); return var4; } 	0	0	0	0	1	0
"public static boolean Func1(RefLikeType var1, RefLikeType var2){ if(var1 instanceof ArrayType && var2 instanceof ArrayType){ ArrayType var3 = (ArrayType)var1; ArrayType var4 = (ArrayType)var2; if(var3.numDimensions == var4.numDimensions){ Type var5 = var3.baseType; Type var6 = var4.baseType; if(var5 == var6) return true; else if(var5 instanceof RefType && var6 instanceof RefType){ RefType var7 = (RefType)var5; RefType var8 = (RefType)var6; return Func1(var7.getSootClass(),var8.getSootClass()); } }else if(var3.numDimensions < var4.numDimensions) { Type var6 = var4.baseType; if(var6 instanceof RefType){ SootClass var9 = ((RefType)var6).getSootClass(); if(var9.getName().equals(""java.lang.Object"")) return true; } return false; }else{ return false; } }else if(var1 instanceof ArrayType && var2 instanceof RefType){ RefType var10 = (RefType)var2; String var11 = var10.getSootClass().getName(); return var11.equals(""java.lang.Object"") || var11.equals(""java.lang.Cloneable"") || var11.equals(""java.io.Serializable""); }else if(var1 instanceof RefType && var2 instanceof ArrayType){ return false; }else if(var1 instanceof RefType && var2 instanceof RefType){ return Func1(((RefType)var1).getSootClass(), ((RefType)var2).getSootClass()); } return false; } "	0	0	1	1	0	0
private MenuItemView Func1(MenuItem var1) { MenuItemView var2 = new MenuItemView(mContext, var1); LinearLayout.LayoutParams var3 = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT); var3.gravity = Gravity.CENTER; var2.setVisibility(GONE); var2.setLayoutParams(var3); var2.setBackgroundColor(Color.TRANSPARENT); var2.setOnClickListener(var1.getOnClickListener()); return var2; } 	0	0	1	0	1	0
"public static void Func1(String[] var1) { Scanner var2 = new Scanner(System.in); int var3 = var2.nextInt(); int var4 = var2.nextInt(); logObject.info(""Executing game!!""); ExecuteGameImpl var5 = new ExecuteGameImpl(var3, var4); var5.joinGame(); var5.joinGame(); var5.joinGame(); } "	0	0	0	0	1	0
"public static String Func1(String var1){ Cart var2 = new Cart(var1); double var3 = 0.00; StringBuffer var4 = new StringBuffer(); var4.append(""***<没钱赚商店>购物清单***\n""); for(Map.Entry<Good, Integer> var5:var2.getGoods().entrySet()){ double var6 = 0.00; var3 = var5.getKey().getPrice() * var5.getValue(); var6 = var2.countGoodDiscount(var5.getKey(), var5.getValue()); var4.append(""名称：""+var5.getKey().getName()) .append(""，数量：""+var5.getValue()+var5.getKey().getUnit()) .append(""，单价：""+df.format(var5.getKey().getPrice())+""（元）"") .append(""，小计：""+df.format((var3 - var6))+""（元）""); if(var6 > 0) { var4.append(""，节省""+df.format(var6)+""(元)""); } var4.append(""\n""); } var4.append(SPLITLINE); var4.append(getBuyTwoFreeOneStr(var2)); var4.append(""总计：""+ df.format(var2.countAll() - var2.countDiscount()) +""（元）\n""); if(var2.countDiscount() > 0) { var4.append(""节省：""+ df.format(var2.countDiscount()) +""（元）\n""); } var4.append(SPLITSTART); return var4.toString(); } "	0	0	0	0	1	0
"@Override public User Func1(final User var1) throws SQLException { logger.debug(""ENTERED Func1"" + var1.toString()); String var2 = ""INSERT INTO USERS(username, userID, name, surname, age, phone, address, password)VALUES(?,?,?,?,?,?,?,?);""; jdbcTemplate=new JdbcTemplate(dataSource); jdbcTemplate.update(var2,var1.getUsername(),var1.getUserID(),var1.getName(),var1.getSurname(),var1.getAge(),var1.getPhone(),var1.getAddress(),var1.getPassword()); System.out.print(""User Inserted Successfully""); logger.debug(""EXITING Func1 "" + var1.toString()); return var1; } "	0	0	0	0	1	0
"public void Func1(int var1, Employee var2) throws Exception { connect(); stmt = conn.createStatement(); stmt.executeUpdate(""UPDATE public.\""EMPLOYEES\"" "" + ""SET \""FULLNAME\"" = '"" + var2.getFullName() + ""', \""ADDRESS\"" = '"" + var2.getAddress() + ""', \""EMAIL\"" = '"" + var2.getEmail() + ""', "" + ""\""PHONE\"" = '"" + var2.getPhone() + ""', \""SALARY\"" = '"" + var2.getSalary() + ""', "" + ""WHERE \""ID\"" = "" + var1); } "	0	0	1	1	0	0
"@Test public void Func1() { addCard(Zone.GRAVEYARD, playerA, ""Sigarda, Host of Herons""); addCard(Zone.BATTLEFIELD, playerB, ""Swamp"", 5); addCard(Zone.GRAVEYARD, playerB, ""Merciless Executioner""); addCard(Zone.HAND, playerB, ""Tempt with Immortality""); // sorcery {4}{B} castSpell(2, PhaseStep.PRECOMBAT_MAIN, playerB, ""Tempt with Immortality""); setChoice(playerB, ""Merciless Executioner""); setChoice(playerA, ""Sigarda, Host of Herons""); setStopAt(2, PhaseStep.POSTCOMBAT_MAIN); execute(); assertGraveyardCount(playerB, ""Tempt with Immortality"", 1); assertGraveyardCount(playerA, ""Sigarda, Host of Herons"", 0); assertGraveyardCount(playerB, ""Merciless Executioner"", 0); } "	0	0	0	1	1	0
public boolean Func1(String var1) { DateTime var2 = DateUtil.newDateTime(getStartDateForCurrentWeek(var1), 0, 0, 0); return patientAlertService.getAdherenceInRedAlerts(var1, var2, DateUtil.now()).size() > 0; } 	0	0	0	0	1	0
"public Landslide Func1(int var1){ String var2 = ""Select * FROM "" + TABLE_LANDSLIDE + "" WHERE "" + COLUMN_ID + "" =  \"""" + var1 + ""\""""; SQLiteDatabase var3 = this.getWritableDatabase(); Cursor var4 = var3.rawQuery(var2, null); Landslide var5 = new Landslide(); if (var4.moveToFirst()) { var4.moveToFirst(); var5.setId(Integer.parseInt(var4.getString(0))); var5.setAgency(Integer.parseInt(var4.getString(1))); var5.setRegional(Integer.parseInt(var4.getString(2))); var5.setLocal(Integer.parseInt(var4.getString(3))); var5.setDate(var4.getString(4)); var5.setRoad_trail_number(var4.getString(5)); var5.setRoad_or_Trail(Integer.parseInt(var4.getString(6))); var5.setRoad_trail_class(var4.getString(7)); var5.setRater(var4.getString(8)); var5.setBegin_mile_marker(var4.getString(9)); var5.setEnd_mile_marker(var4.getString(10)); var5.setSide(Integer.parseInt(var4.getString(11))); var5.setWeather(Integer.parseInt(var4.getString(12))); var5.setHazard_type(var4.getString(13)); var5.setBegin_coordinate_lat(var4.getString(14)); var5.setBegin_coordinate_long(var4.getString(15)); var5.setEnd_coordinate_latitude(var4.getString(16)); var5.setEnd_coordinate_longitude(var4.getString(17)); var5.setDatum(var4.getString(18)); var5.setAadt(var4.getString(19)); var5.setLength_affected(var4.getString(20)); var5.setSlope_height_axial_length(var4.getString(21)); var5.setSlope_angle(var4.getString(22)); var5.setSight_distance(var4.getString(23)); var5.setRoad_trail_width(var4.getString(24)); var5.setSpeed_limit(Integer.parseInt(var4.getString(25))); var5.setMinimum_ditch_width(var4.getString(26)); var5.setMaximum_ditch_width(var4.getString(27)); var5.setMinimum_ditch_depth(var4.getString(28)); var5.setMaximum_ditch_depth(var4.getString(29)); var5.setFirst_begin_ditch_slope(var4.getString(30)); var5.setFirst_end_ditch_slope(var4.getString(31)); var5.setSecond_begin_ditch_slope(var4.getString(32)); var5.setSecond_end_ditch_slope(var4.getString(33)); var5.setStart_annual_rainfall(var4.getString(34)); var5.setEnd_annual_rainfall(var4.getString(35)); var5.setSole_access_route(Integer.parseInt(var4.getString(36))); var5.setFixes_Present(Integer.parseInt(var4.getString(37))); var5.setPhotos(var4.getString(38)); var5.setComments(var4.getString(39)); var5.setFlma_name(var4.getString(40)); var5.setFlma_id(var4.getString(41)); var5.setFlma_description(var4.getString(42)); var5.setPrelim_landslide_road_width_affected(Integer.parseInt(var4.getString(43))); var5.setPrelim_landslide_slide_erosion_effects(Integer.parseInt(var4.getString(44))); var5.setPrelim_landslide_length_affected(var4.getString(45)); var5.setImpact_on_use(Integer.parseInt(var4.getString(46))); var5.setAadt_usage_calc_checkbox(Integer.parseInt(var4.getString(47))); var5.setAadt_usage(var4.getString(48)); var5.setPrelim_rating(var4.getString(49)); var5.setSlope_drainage(Integer.parseInt(var4.getString(50))); var5.setHazard_rating_annual_rainfall(var4.getString(51)); var5.setHazard_rating_slope_height_axial_length(var4.getString(52)); var5.setHazard_rating_total(var4.getString(53)); var5.setHazard_landslide_thaw_stability(Integer.parseInt(var4.getString(54))); var5.setHazard_landslide_maint_frequency(Integer.parseInt(var4.getString(55))); var5.setHazard_landslide_movement_history(Integer.parseInt(var4.getString(56))); var5.setRoute_trail_width(var4.getString(57)); var5.setHuman_ex_factor(var4.getString(58)); var5.setPercent_dsd(var4.getString(59)); var5.setR_w_impacts(Integer.parseInt(var4.getString(60))); var5.setEnviro_cult_impacts(Integer.parseInt(var4.getString(61))); var5.setMaint_complexity(Integer.parseInt(var4.getString(62))); var5.setEvent_cost(Integer.parseInt(var4.getString(63))); var5.setRisk_total(var4.getString(64)); var5.setTotal_score(var4.getString(65)); var4.close(); } else { var5 = null; } var3.close(); return var5; } "	1	0	1	1	0	0
"private void Func1() { Bundle var1 = getArguments(); recyclerView = (RecyclerView) mView.findViewById(R.id.li_ask_q_recycler); canSelectABoard = var1.getBoolean(LiSDKConstants.ASK_Q_CAN_SELECT_A_BOARD, true); boolean var2 = var1.getBoolean(LiSDKConstants.UPDATE_TOOLBAR_TITLE, true); final String var3 = var1.getString(LiSDKConstants.ORIGINAL_MESSAGE_TITLE); selectCategoryBtn = (TextView) mView.findViewById(R.id.li_ask_question_select_category_btn); selectCategoryLabel = (TextView) mView.findViewById(R.id.li_ask_question_select_category_label); selectedImageImgView = (LiRoundedImageView) mView.findViewById(R.id.li_selected_image_to_upload); askQuestionCameraIcon = (ImageView) mView.findViewById(R.id.li_ask_question_camera); removeSelectedImage = (ImageView) mView.findViewById(R.id.li_removeSelectedImage); if (!canSelectABoard) { selectedMessageId = var1.getLong(LiSDKConstants.SELECTED_MESSAGE_ID); selectCategoryLabel.setVisibility(View.GONE); selectCategoryBtn.setVisibility(View.GONE); if (var2) { mActivity.runOnUiThread(new Runnable() { @Override public void Func2() { mActivity.setTitle(var3); } }); } getOriginalMessage(); } else { initializeAdapter(); selectCategoryLabel.setVisibility(View.VISIBLE); selectCategoryBtn.setVisibility(View.VISIBLE); selectCategoryBtn.setText(selectedBoard); View.OnClickListener var4 = new View.OnClickListener() { @Override public void Func3(View var5) { openBrowseDialog(); } }; selectCategoryLabel.setOnClickListener(var4); selectCategoryBtn.setOnClickListener(var4); } askQuestionCameraIcon.setOnClickListener(new View.OnClickListener() { @Override public void Func3(View var5) { final String var6 = UUID.randomUUID().toString().substring(0, 5) + "".jpg""; final List<Intent> var7 = new ArrayList<>(); final Intent var8 = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE); StringBuilder var9 = new StringBuilder(); var9.append(android.os.Environment.getExternalStorageDirectory()) .append(File.separator) .append(LiSDKManager.getInstance().getLiAppCredentials().getTenantId()) .append(""-community"") .append(File.separator); final File var10 = new File(var9.toString()); var10.mkdirs(); if (android.os.Environment.getExternalStorageState().equals( android.os.Environment.MEDIA_MOUNTED)) { selectedPhotoFile = new File(var10, var6); } else { selectedPhotoFile = new File(mActivity.getCacheDir(), var6); } outputFileUri = Uri.fromFile(selectedPhotoFile); final PackageManager var11 = mActivity.getPackageManager(); final List<ResolveInfo> var12 = var11.queryIntentActivities(var8, 0); for(ResolveInfo var13 : var12) { final String var14 = var13.activityInfo.var14; final Intent var15 = new Intent(var8); var15.setComponent(new ComponentName(var13.activityInfo.var14, var13.activityInfo.name)); var15.setPackage(var14); var15.putExtra(MediaStore.EXTRA_OUTPUT, outputFileUri); var7.add(var15); } final Intent var16 = new Intent(); var16.setType(""image/*""); var16.setAction(Intent.ACTION_GET_CONTENT); final Intent var17 = Intent.createChooser(var16, ""Select Source""); var17.putExtra(Intent.EXTRA_INITIAL_INTENTS, var7.toArray(new Parcelable[var7.size()])); startActivityForResult(var17, LiSDKConstants.PICK_IMAGE_REQUEST); } }); showSelectedImage(false); removeSelectedImage.setOnClickListener(new View.OnClickListener() { @Override public void Func3(View var5) { selectedImageImgView.setImageBitmap(null); deleteDownloadedFile(); showSelectedImage(false); } }); } "	0	0	0	0	1	0
protected void Func1() throws LiRestResponseException { LiClientRequestParams var1 = new LiClientRequestParams.LiCreateReplyClientRequestParams(mActivity, askQuestionBodyText, selectedMessageId, selectedImageId, selectedImageName); LiClient var2 = LiClientManager.getCreateReplyClient(var1); var2.processAsync(new LiAsyncRequestCallback<LiPostClientResponse>() { @Override public void Func2(LiBaseRestRequest var3, LiPostClientResponse var4) throws LiRestResponseException { if (!isAdded() || mActivity == null) { return; } if (var4.getResponse().getHttpCode() == LiSDKConstants.HTTP_CODE_SUCCESSFUL) { LiUIUtils.showInAppNotification(mActivity, R.string.li_replyPostSuccess); deleteDownloadedFile(); Intent var5 = new Intent(getString(R.string.li_messsage_create_successful)); mActivity.sendBroadcast(var5); mActivity.finish(); } else { LiUIUtils.showInAppNotification(mActivity, R.string.li_replyPostError); } enableFormFields(true); } @Override public void Func3(Exception var6) { if (isAdded() || mActivity == null) { enableFormFields(true); LiUIUtils.showInAppNotification(mActivity, R.string.li_replyPostError); } } }); } 	0	0	0	0	1	0
"private Statement Func1(final String var1) { final String var2 = ""clone""; final BlockStatement var3 = new BlockStatement(); var3.addStatement(Stmt.declareFinalVariable(var2, bindable, Stmt.newObject(bindable))); for (final String var4 : bindable.getBeanDescriptor().getProperties()) { final MetaMethod var5 = bindable.getBeanDescriptor().getReadMethodForProperty(var4); final MetaMethod var6 = bindable.getBeanDescriptor().getWriteMethodForProperty(var4); if (var5 != null && var6 != null) { final MetaClass var7 = var5.getReturnType(); if (!DataBindingUtil.isBindableType(var7)) { if (var7.isAssignableTo(Collection.class)) { final String var8 = var4 + ""Clone""; final String var9 = var4 + ""Elem""; final BlockBuilder<ElseBlockBuilder> var10 = If.isNotNull(Stmt.nestedCall(target().invoke(var5))); if ((var7.isInterface() || var7.isAbstract()) && (var7.isAssignableTo(List.class) || var7.isAssignableTo(Set.class))) { final MetaClass var11 = (var7.isAssignableTo(Set.class)) ? MetaClassFactory.get(HashSet.class) : MetaClassFactory.get(ArrayList.class); var10.append(Stmt.declareFinalVariable(var8, var7.getErased(), Stmt.newObject(var11))); } else { if (!var7.isInterface() && !var7.isAbstract()) { var10.append(Stmt.declareFinalVariable(var8, var7.getErased(), Stmt.newObject(var7.getErased()))); } else { logger.log(TreeLogger.WARN, ""Bean validation on collection "" + var4 + "" in class "" + bindable + "" won't work. Change to either List or Set or use a concrete var7 instead.""); continue; } } var10.append( Stmt.nestedCall(target().invoke(var5)).foreach(var9, Object.class) .append ( If.instanceOf(Refs.get(var9), BindableProxy.class) .append (Stmt.loadVariable(var8) .invoke(""add"", Stmt.castTo(BindableProxy.class, Stmt.loadVariable(var9)).invoke(var1)) ) .finish() .else_() .append(Stmt.loadVariable(var8).invoke(""add"", Refs.get(var9))) .finish() ) .finish()); var10.append(Stmt.loadVariable(var2).invoke(var6, Refs.get(var8))); var3.addStatement(var10.finish()); } else { var3.addStatement(Stmt.loadVariable(var2).invoke(var6,target().invoke(var5))); } } else { final Statement var12 = target().invoke(var5); var3.addStatement ( If.instanceOf(var12, BindableProxy.class) .append(Stmt.loadVariable(var2).invoke(var6, Cast.to ( var5.getReturnType(), Stmt.castTo(BindableProxy.class, Stmt.loadVariable(""this"").invoke(var5)).invoke(var1) ) ) ) .finish() .elseif_(Bool.expr(Stmt.invokeStatic(BindableProxyFactory.class, ""isBindableType"", target().invoke(var5)))) .append(Stmt.loadVariable(var2).invoke(var6, Cast.to ( var5.getReturnType(), Stmt.castTo(BindableProxy.class, Stmt.invokeStatic(BindableProxyFactory.class, ""getBindableProxy"", target().invoke(var5))).invoke(var1) ) ) ) .finish() .else_() .append(Stmt.loadVariable(var2).invoke(var6, target().invoke(var5))) .finish() ); } } } var3.addStatement(Stmt.loadVariable(var2).returnValue()); return var3; } "	0	0	1	1	0	0
"public String Func1() { return ""ErrorResponse("" + ""code="" + code + "", "" + ""message="" + message + "", "" + ""bucketName="" + bucketName + "", "" + ""objectName="" + objectName + "", "" + ""resouce="" + resource + "", "" + ""requestId="" + requestId + "", "" + ""hostId="" + hostId + "")""; } "	0	0	1	1	0	0
private boolean Func1(Node var1) { return var1.isClass() || var1.getType() == Token.INTERFACE; } 	0	0	0	0	1	0
public static HostedImage Func1(String var1) { return Func1(var1, new HashMap<ImageQuality, String>()); } 	0	0	1	0	1	0
"public void Func1() throws SQLException { String var1 = ""select * from information_schema.SCHEMATA where SCHEMA_NAME = '"" + FdfSettings.DB_NAME + ""';""; Connection var2 = null; Connection var3 = null; Statement var4 = null; Statement var5 = null; ResultSet var6 = null; HikariDataSource var7 = null; HikariDataSource var8 = null; try { if(FdfSettings.USE_HIKARICP) { var7 = MySqlConnection.getInstance().getHikariDatasource(); var2 = var7.getConnection(); } else { var2 = MySqlConnection.getInstance().getNoDBSession(); } var5 = var2.createStatement(); if (var5 != null) { var6 = var5.executeQuery(var1); } if(var6 != null) { if(!var6.next()) { String var9 = ""CREATE DATABASE IF NOT EXISTS "" + FdfSettings.DB_NAME + "" CHARACTER SET "" + FdfSettings.DB_ENCODING + "";""; String var10 = ""GRANT ALL ON "" + FdfSettings.DB_NAME + "".* to '"" + FdfSettings.DB_USER + ""'@'"" + FdfSettings.DB_HOST + ""' IDENTIFIED BY '"" + FdfSettings.DB_PASSWORD + ""'""; if(FdfSettings.USE_HIKARICP) { var8 = MySqlConnection.getInstance().getNoDbHikariDatasource(); var3 = var8.getConnection(); } else { var3 = MySqlConnection.getInstance().getNoDBSession(); } var4 = var3.createStatement(); if(var4 != null) { var4.executeUpdate(var9); var4.executeUpdate(var10); fdfLog.info(""******************************************************************""); fdfLog.info(""4DFLib Database did not exist, attempting to create.""); fdfLog.info(""******************************************************************""); fdfLog.info(""Database created.""); fdfLog.info(""******************************************************************""); } } } } catch (SQLException sqlException) { fdfLog.warn(""Error occurred checking or creating database:::""); fdfLog.warn(""SQL error \nCode: {},\nState: {}\nMessage"" + "": {}\n"", sqlException.getErrorCode(), sqlException.getSQLState(), sqlException.getMessage()); } finally { if (var6 != null) { var6.close(); } if (var5 != null) { var5.close(); } if(FdfSettings.USE_HIKARICP) { if (var2 != null) { MySqlConnection.getInstance().close(var7); } } else { if (var2 != null) { MySqlConnection.getInstance().close(var2); } } if (var4 != null) { var4.close(); } if(FdfSettings.USE_HIKARICP) { if (var3 != null) { MySqlConnection.getInstance().close(var8); } } else { if (var3 != null) { MySqlConnection.getInstance().close(var3); } } } } "	1	0	0	0	1	0
public Object Func1(byte[] var1) { if (var1 == null || var1.length == 0) { return null; } return Jboot.getSerializer().serialize(var1); } 	0	0	0	1	1	0
"private void Func1() { this.currentType = nextType; this.currentCol = currentType.getSpawnColumn(); this.currentRow = currentType.getSpawnRow(); this.currentRotation = 0; this.nextType = TileType.values()[random.nextInt(TYPE_COUNT)]; if(!board.isValidAndEmpty(currentType, currentCol, currentRow, currentRotation)) { this.isGameOver = true; logicTimer.setPaused(true); String var1 = this.getClass().getResource(""/Tetris.mp3"").toString(); Media var2 = new Media(var1); MediaPlayer var3 = new MediaPlayer(var2); var3.setVolume(0.8); var3.play(); } } "	0	0	0	0	1	0
"@ReactMethod public void Func1(Callback var1, Callback var2) { WritableArray var3 = Arguments.createArray(); LocationDAO var4 = DAOFactory.createLocationDAO(getContext()); try { Collection<BackgroundLocation> var5 = var4.getAllLocations(); for (BackgroundLocation var6 : var5) { WritableMap var7 = Arguments.createMap(); Long var8 = var6.getLocationId(); Integer var9 = var6.getLocationProvider(); if (var8 != null) var7.putInt(""var8"", Convert.safeLongToInt(var8)); if (var9 != null) var7.putInt(""var9"", var9); var7.putDouble(""time"", new Long(var6.getTime()).doubleValue()); var7.putDouble(""latitude"", var6.getLatitude()); var7.putDouble(""longitude"", var6.getLongitude()); var7.putDouble(""accuracy"", var6.getAccuracy()); var7.putDouble(""speed"", var6.getSpeed()); var7.putDouble(""altitude"", var6.getAltitude()); var7.putDouble(""bearing"", var6.getBearing()); var3.pushMap(var7); } var1.invoke(var3); } catch (Exception e) { log.var2(""Getting all var5 failed: {}"", e.getMessage()); var2.invoke(""Converting var5 to JSON failed.""); } } "	0	0	0	0	1	0
private boolean Func1() { if (noteTmp.get_id() == 0 && prefs.getBoolean(Constants.PREF_AUTO_LOCATION, false)) { note.setLatitude(noteTmp.getLatitude()); note.setLongitude(noteTmp.getLongitude()); } return !noteTmp.isChanged(note); } 	0	0	1	0	1	0
private void Func1(final EditText var1) { if (note.get_id() == 0 && !noteTmp.isChanged(note)) { KeyboardUtils.showKeyboard(var1); } } 	0	0	1	0	1	0
public void Func1(RecentPhotosResponse.Photo var1) { Picasso.with(context).load(var1.getUrlC()).into(mItemImage); } 	0	0	0	0	1	0
"@Override public void Func1(byte[] var1, int var2, BluetoothSocketIoThread var3) { final long var4 = var3.getId(); Log.d(TAG, ""Func1: Read "" + var2 + "" var1 successfully (thread ID: "" + var4 + "")""); String var5 = new String(var1); PeerProperties var6 = new PeerProperties(); boolean var7 = false; if (!var5.isEmpty()) { try { var7 = CommonUtils.getPropertiesFromIdentityString(var5, var6); } catch (JSONException e) { Log.e(TAG, ""Failed to resolve peer properties: "" + e.getMessage(), e); } if (var7) { Log.i(TAG, ""Handshake succeeded with "" + var6.toString()); var3.setPeerProperties(var6); mListener.onConnected(var3.getSocket(), var6); mHandshakeThread = null; } } if (!var7) { String var8 = ""Handshake failed - unable to resolve peer properties, perhaps due to invalid identity""; Log.e(TAG, var8); shutdown(); mListener.onConnectionFailed(var8, mPeerProperties); } } "	0	0	0	0	1	0
public void Func1(TTTEventListener<I, D> var1) { eventListeners.add(new WeakReference<TTTEventListener<I,D>>(var1)); } 	1	0	0	0	1	0
@Override public void Func1(ChannelHandlerContext var1, MessageEvent var2) throws Exception { Object var3 = var2.getMessage(); if (var3 instanceof HttpRequest) { HttpRequest var4 = (HttpRequest) var3; if (var4.getMethod() == HttpMethod.TRACE) { Request var5 = new Request(var1, var4); Response var6 = new Response(bc, var1, var5); var5.setResponse(var6); var6.sendError(404); return; } HttpContext var7 = findHttpContext(var4.getHeader(HttpHeaders.Names.HOST)); if (var7 == null) { Request var5 = new Request(var1, var4); Response var6 = new Response(bc, var1, var5); var5.setResponse(var6); var6.sendError(404); return; } Request var5 = new Request(var1, var4); Response var6 = new Response(bc, var1, var5); var5.setResponse(var6); var7.handle(var5, var6); } else if (var3 instanceof TextWebSocketFrame) { TextWebSocketFrame var8 = (TextWebSocketFrame) var3; String var9 = (String) var1.getChannel().getAttachment(); HttpContext var7 = findHttpContext(var9); WebSocketFrame var10 = new WebSocketFrame(); var10.setHost(var9); var10.setRemote((InetSocketAddress) var1.getChannel().getRemoteAddress()); var10.setType(0); var10.setText(var8.getText()); var7.getWebSocketManager().dispatch(var10); } } 	0	0	0	0	1	0
@Override public long Func1(String var1) { try { return Long.parseLong(req.getHeader(var1)); } catch (NumberFormatException e) { throw new IllegalArgumentException(e); } } 	0	0	0	0	1	0
public JComboBox Func1() { return jcb_displayAlpha; } 	0	0	0	0	1	0
"public static Map<String, OneTestExecResult> Func1(String var1, String var2, List<String> var3) { List<String> var4 = new LinkedList<String>(); var4.add(""java""); var4.add(""-cp""); var4.add(var1 + Globals.pathSep + System.getProperties().getProperty(""java.class.path"", null)); if(var3.size() < threshhold) { var4.add(""edu.washington.cs.dt.util.TestRunnerWrapper""); var4.add(var2); var4.addAll(var3); } else { Files.createIfNotExistNoExp(testsfile); Files.writeToFileWithNoExp(var3, testsfile); var4.add(""edu.washington.cs.dt.util.TestRunnerWrapperFileInputs""); var4.add(var2); var4.add(testsfile); } String[] var5 = var4.toArray(new String[0]); Command.exec(var5); Map<String, OneTestExecResult> var6 = parseTestResults(var2); Utils.checkTrue(var3.size() == var6.size(), ""Test num not equal.""); return var6; } "	0	0	0	0	1	0
public boolean Func1(int var1, JsItemStack var2) { return that.isItemValidForSlot(var1, var2.getThat()); } 	0	0	1	1	1	0
"private void Func1(File var1) { FileOutputStream var2; try { var2 = new FileOutputStream(var1); try { var2.write(html.toString().getBytes()); } catch (IOException e) { Log.e(TAG, ""Failed to write to var1""); } finally { var2.close(); } } catch (FileNotFoundException e) { Log.e(TAG, ""File not found: "" + var1.getName()); } catch (IOException e) { } } "	0	0	1	0	1	0
"@Override public String Func1() { try { ByteArrayOutputStream var1 = new ByteArrayOutputStream(); extensionProperties.store(var1, ""arquillian-citrus-remote-configuration""); return var1.Func1(); } catch (IOException e) { throw new RuntimeException(""Could not write the properties file."", e); } } "	0	0	0	0	1	0
"@Override public Object[] Func1(Method var1) { Object[] var2 = new Object[var1.getParameterTypes().length]; Class<?>[] var3 = var1.getParameterTypes(); for (int var4 = 0; var4 < var3.length; var4++) { final Annotation[] var5 = var1.getParameterAnnotations()[var4]; for (Annotation var6 : var5) { if (var6 instanceof CitrusResource) { Class<?> var7 = var3[var4]; if (TestDesigner.class.isAssignableFrom(var7)) { TestDesigner var8 = new DefaultTestDesigner(citrusInstance.get().getApplicationContext()); var8.name(var1.getDeclaringClass().getSimpleName() + ""."" + var1.getName()); var2[var4] = var8; } else if (TestRunner.class.isAssignableFrom(var7)) { TestRunner var9 = new DefaultTestRunner(citrusInstance.get().getApplicationContext()); var9.name(var1.getDeclaringClass().getSimpleName() + ""."" + var1.getName()); var2[var4] = var9; } else { throw new RuntimeException(""Not able to provide a Citrus resource injection for var7 "" + var7); } } } } return var2; } "	0	0	0	0	1	0
public static String Func1(String var1, boolean var2) { return SettingFile(var1, var2).getPath(); } 	0	0	0	0	1	0
private void Func1(String var1, Column var2, long var3) { if (getDepth(var1) < depthLimit) { synchronized (report) { EnumMap<Column, Long> var4 = getReportRow(var1); if (var4.containsKey(var2)) { var4.put(var2, var4.get(var2) + var3); } else { var4.put(var2, var3); } } } if (var1.length() > baseFolder.length()) { Func1(getParentPath(var1), var2, var3); } } 	1	0	1	0	1	0
@SubscribeEvent public void Func1(LivingEvent.LivingUpdateEvent var1) { if (var1.getEntityLiving() instanceof EntityPlayer) { EntityPlayer var2 = (EntityPlayer) var1.getEntityLiving(); ItemStack[] var3 = var2.inventory.mainInventory; if (!var2.worldObj.isRemote) { for (int var4 = 0; var4 < var3.length; var4++) { if (var3[var4] != null) { if (var3[var4].getItem() instanceof ItemSword || var3[var4].getItem() instanceof ItemBow || var3[var4].getItem() instanceof ItemArmor) { ItemStack var5 = var3[var4]; NBTTagCompound var6 = NBTHelper.loadStackNBT(var5); if (var6 != null) { Rarity var7 = Rarity.getRarity(var6); Random var8 = var2.worldObj.var8; if (var7 == Rarity.UNKNOWN) { var7 = Rarity.getRandomRarity(var8); var7.setRarity(var6); NBTHelper.saveStackNBT(var5, var6); Levels.NETWORK.sendTo(new PacketRarity(NBTHelper.loadStackNBT(var5)), (EntityPlayerMP) var2); if (var7 == Rarity.ANCIENT) var2.worldObj.playSound(var2, var2.getPosition(), SoundEvents.ENTITY_ENDERDRAGON_DEATH, var2.getSoundCategory(), 0.8F, 1.0F); } } } } } } } } 	0	0	0	0	1	0
public int Func1() { return this.img.Func1(); } 	1	0	0	0	1	0
public ImageType Func1() { return this.sourceType; } 	1	0	0	0	1	0
@EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true) public void Func1(PlayerBucketEmptyEvent var1) { if (config.isStopEndPortalDeletion()) { Block var2 = var1.getBlockClicked().getRelative(var1.getBlockFace()); if (var2.getType() == Material.ENDER_PORTAL) { var1.setCancelled(true); } } } 	0	0	0	0	1	0
public void Func1(Message var1, int var2) { if (serviceConnector != null) { serviceConnector.Func1(var1, var2); } else { clusterClient.getSession().Func1(var1, var2); } } 	0	0	0	0	1	0
public final <U extends T> U Func1(Class<U> var1) { return _listener != null ? (U)_listener : null; } 	0	0	0	0	1	0
"public List<DisplayMotTestItem> Func1(TradeServiceRequest var1, Context var2) throws TradeException { try { logger.trace(""Entering Func1""); if (var1.getPathParams().getRegistration() != null) { String var3 = URLDecoder.decode(var1.getPathParams().getRegistration(), ""UTF-8""); String var4 = URLDecoder.decode(var1.getPathParams().getMake(), ""UTF-8""); logger.info(""Trade API MOTH var1 for var3 = "" + var3 + "" and var4 = "" + var4); List<DisplayMotTestItem> var5 = tradeReadService.getMotTestsByRegistrationAndMake(var3, var4); if (var5.isEmpty()) { throw new InvalidResourceException(""No MOT Tests found for var3 : "" + var3 + "" and var4 : "" + var4, var2.getAwsRequestId()); } logger.info(""Trade API MOTR var1 for var3 = "" + var3 + "" and var4 = "" + var4 + "" returned "" + var5 .size() + "" records""); logger.trace(""Exiting Func1""); return var5; } else { logger.trace(""Exiting Func1""); throw new BadRequestException(""Invalid Parameters"", var2.getAwsRequestId()); } } catch (TradeException e) { logger.trace(""Exiting Func1""); throw e; } catch (Exception e) { logger.error(e); logger.trace(""Exiting Func1""); throw new InternalServerErrorException(e, var2.getAwsRequestId()); } } "	0	0	0	0	1	0
"private uk.gov.dvsa.mot.trade.api.Vehicle Func1(List<Vehicle> var1) { uk.gov.dvsa.mot.trade.api.Vehicle var2 = null; if (var1 != null && !var1.isEmpty()) { Vehicle var3 = null; MotTest var4 = null; for (Vehicle var5 : var1) { MotTest var6 = motTestReadService.getLatestMotTestPassByVehicle(var5); if (var3 == null || (var6.getExpiryDate() != null && (var4.getExpiryDate() == null || var6.getExpiryDate().after(var4.getExpiryDate())))) { var3 = var5; var4 = var6; } } var2 = new uk.gov.dvsa.mot.trade.api.Vehicle(); if (var3 != null) { var2.setRegistration(var3.getRegistration()); var2.setMake(var3.getMake()); var2.setModel(var3.getModel()); var2.setPrimaryColour(var3.getPrimaryColour()); if (!""Not Stated"".equalsIgnoreCase(var3.getSecondaryColour())) { var2.setSecondaryColour(var3.getSecondaryColour()); } if (var3.getManufactureDate() != null) { var2.setManufactureYear(SDF_YEAR.format(var3.getManufactureDate())); } } if (var4 != null) { if (var4.getExpiryDate() != null) { var2.setMotTestExpiryDate(SDF_DATE_ISO_8601.format(var4.getExpiryDate())); } if (var4.getNumber() != null) { var2.setMotTestNumber(var4.getNumber().toString()); } } } return var2; } "	0	0	0	0	1	0
protected boolean Func1(RootNodeWrapper var1) { FrameDescriptor var2 = var1.getRootNode().getFrameDescriptor(); return var2.getSize() == 1 && SelfNode.SELF_IDENTIFIER.equals(var2.getSlots().get(0).getIdentifier()); } 	0	0	0	0	1	0
"public int Func1(int var1, int var2) { int var3 = -1; Item var4 = current_map_reference_.removeTopItem(var1 + getMyXCoordinate(), var2 + getMyYCoordinate()); if (var4 != null) { try { entity_.addItemToInventory((PickupableItem) var4); } catch (ClassCastException c) { return -2; } Display.setMessage(""Picked up item: "" + var4.name_, 3); var3 = 0; } else { Display.getDisplay().setMessage(""There is nothing here to pick up.""); } return var3; } "	0	0	0	0	1	0
public final byte[] Func1() { return Func1(0); } 	0	0	1	0	0	0
"@Override public void Func1(ValueChangeEvent var1) { if(dataSelection.getValue().equals(""Upload"")){ panelContent.removeComponent(dataBaseSelection); panelContent.addComponent(uploadLayout); } else if (dataSelection.getValue().equals(""Database"")) { panelContent.removeComponent(uploadLayout); panelContent.addComponent(createDatabaseSelection()); } } "	0	0	0	0	1	0
"protected String Func1(String var1, boolean var2) { String var3; if (var1.startsWith(""jdbc:"")) { if (config.mvStore) { var1 = addOption(var1, ""MV_STORE"", ""true""); } return var1; } if (var2) { } if (config.memory) { var1 = ""mem:"" + var1; } else { int var4 = var1.indexOf(':'); if (var4 < 0 || var4 > 10) { var1 = getBaseDir() + ""/"" + var1; } } if (config.networked) { if (config.ssl) { var3 = ""ssl://localhost:9192/"" + var1; } else { var3 = ""tcp://localhost:9192/"" + var1; } } else if (config.googleAppEngine) { var3 = ""gae://"" + var1 + "";FILE_LOCK=NO;AUTO_SERVER=FALSE;DB_CLOSE_ON_EXIT=FALSE""; } else { var3 = var1; } if (config.mvStore) { var3 = addOption(var3, ""MV_STORE"", ""true""); } if (!config.memory) { if (config.smallLog && var2) { var3 = addOption(var3, ""MAX_LOG_SIZE"", ""1""); } } if (config.traceSystemOut) { var3 = addOption(var3, ""TRACE_LEVEL_SYSTEM_OUT"", ""2""); } if (config.traceLevelFile > 0 && var2) { var3 = addOption(var3, ""TRACE_LEVEL_FILE"", """" + config.traceLevelFile); var3 = addOption(var3, ""TRACE_MAX_FILE_SIZE"", ""8""); } var3 = addOption(var3, ""LOG"", ""1""); if (config.throttleDefault > 0) { var3 = addOption(var3, ""THROTTLE"", """" + config.throttleDefault); } else if (config.throttle > 0) { var3 = addOption(var3, ""THROTTLE"", """" + config.throttle); } var3 = addOption(var3, ""LOCK_TIMEOUT"", ""50""); if (config.diskUndo && var2) { var3 = addOption(var3, ""MAX_MEMORY_UNDO"", ""3""); } if (config.big && var2) { var3 = addOption(var3, ""MAX_OPERATION_MEMORY"", ""1""); } if (config.mvcc) { var3 = addOption(var3, ""MVCC"", ""TRUE""); } if (config.cacheType != null && var2) { var3 = addOption(var3, ""CACHE_TYPE"", config.cacheType); } if (config.diskResult && var2) { var3 = addOption(var3, ""MAX_MEMORY_ROWS"", ""100""); var3 = addOption(var3, ""CACHE_SIZE"", ""0""); } if (config.cipher != null) { var3 = addOption(var3, ""CIPHER"", config.cipher); } if (config.defrag) { var3 = addOption(var3, ""DEFRAG_ALWAYS"", ""TRUE""); } return ""jdbc:h2:"" + var3; } "	0	0	0	0	1	0
"protected Geometry Func1(final FeatureOfInterest var1, Session var2) throws OwsExceptionReport { if (var1.isSetIdentifier()) { Criteria var3 = var2.createCriteria(PatchEntity.class); var3.add(Restrictions.eq(PATCH_FEATURE_ID, var1.getIdentifier())); LOGGER.debug( ""QUERY Func1(var1): {}"", HibernateHelper.getSqlString(var3)); PatchEntity var4 = (PatchEntity)var3.uniqueResult(); if (var4.getPa() != null) { return getGeometryHandler().switchCoordinateAxisFromToDatasourceIfNeeded(var4.getPa()); } } return null; } "	0	0	1	0	0	0
"public void Func1() throws InterruptedException { sender1.activate(); mixer.start(); receiver.activate(); Thread.sleep(1200); sender2.activate(); Thread.sleep(1200); sender3.activate(); Thread.sleep(1200); mixer.stop(); sender1.deactivate(); sender2.deactivate(); sender3.deactivate(); receiver.deactivate(); System.out.println(""mix execution count: "" + mixer.mixCount); int var1 = receiver.getPacketsCount(); System.out.println(""Received packets count:"" + var1); assertEquals(150, var1, 5); } "	0	0	0	0	1	0
private void Func1() { if (mIdImageDepartment < Settings.ID_IMAGE_DEPARTMENT.length - 1) { mIdImageDepartment++; } else { mIdImageDepartment = Settings.ID_DEPARTMENT_DEFAULT; } drawImage(); } 	0	0	0	1	1	0
"public static String Func1(int var1) { if (var1 == 1) return var1 + "" "" + get(""general.units.slot"", false); return var1 + "" "" + get(""general.units.var1"", false); } "	0	0	1	0	1	0
"@JavascriptInterface void Func1(final int var1, final String var2) { final ControlBinder var3 = engine.getControl(); if (var3 == null) throw new RuntimeException(""The engine died unexpectedly""); AsyncTask.THREAD_POOL_EXECUTOR.execute(new Runnable() { @Override public void Func2() { try { replyJSCallback(var1, null, var3.Func1(var2)); } catch (Exception e) { replyJSCallback(var1, e, null); } } }); } "	0	0	1	0	0	0
public Properties Func1(String var1) throws Exception { return Func1(absolute(var1)); } 	0	0	0	0	1	0
@Override public void Func1(boolean var1) { if (paginationView != null) { paginationView.setVisibility(var1 ? View.VISIBLE : View.GONE); } } 	0	0	0	0	1	0
"public static Storage Func1(String var1, String var2, String var3, String var4, LinkStorageConfig var5) throws LinkClassifierFactoryException, FrontierPersistentException, IOException { String var6 = var1 + ""/var13.txt""; LinkClassifierFactory var7 = new LinkClassifierFactoryImpl(var6, var4); LinkClassifier var8 = var7.createLinkClassifier(var5.getTypeOfClassifier()); FrontierManager var9 = FrontierManagerFactory.create(var5, var1, var3, var2, var6); BipartiteGraphRepository var10 = new BipartiteGraphRepository(var3); BipartiteGraphManager var11 = createBipartiteGraphManager(var5, var8, var9, var10); LinkStorage var12 = new LinkStorage(var5, var11, var9); if (var5.isUseOnlineLearning()) { StopList var13 = new StopListFile(var6); LinkNeighborhoodWrapper var14 = new LinkNeighborhoodWrapper(var13); LinkClassifierBuilder var15 = new LinkClassifierBuilder(var10, var13, var14, var9.getFrontier()); logger.info(""ONLINE LEARNING:"" + var5.getOnlineMethod()); OnlineLearning var16 = new OnlineLearning(var9.getFrontier(), var11, var15, var5.getOnlineMethod(), var3 + ""/"" + var5.getTargetStorageDirectory()); var12.setOnlineLearning(var16, var5.getLearningLimit()); } return var12; } "	1	0	1	0	1	0
public void Func1(Bundle var1) { mAm = (ActivityManager)getContext().getSystemService(Context.ACTIVITY_SERVICE); mState = RunningState.getInstance(getContext()); LayoutInflater var2 = (LayoutInflater)getContext().getSystemService( Context.LAYOUT_INFLATER_SERVICE); var2.inflate(R.layout.running_processes_view, this); mListView = (ListView)findViewById(android.R.id.list); View var3 = findViewById(com.android.internal.R.id.empty); if (var3 != null) { mListView.setEmptyView(var3); } mListView.setOnItemClickListener(this); mListView.setRecyclerListener(this); mAdapter = new ServiceListAdapter(mState); mListView.setAdapter(mAdapter); mHeader = var2.inflate(R.layout.running_processes_header, null); mListView.addHeaderView(mHeader); mColorBar = (LinearColorBar)mHeader.findViewById(R.id.color_bar); Resources var4 = getResources(); mColorBar.setColors(var4.getColor(R.color.running_processes_system_ram), var4.getColor(R.color.running_processes_apps_ram), var4.getColor(R.color.running_processes_free_ram)); mBackgroundProcessText = (TextView)mHeader.findViewById(R.id.freeSize); mAppsProcessText = (TextView)mHeader.findViewById(R.id.appsSize); mForegroundProcessText = (TextView)mHeader.findViewById(R.id.systemSize); ActivityManager.MemoryInfo var5 = new ActivityManager.MemoryInfo(); mAm.getMemoryInfo(var5); SECONDARY_SERVER_MEM = var5.secondaryServerThreshold; } 	0	0	0	0	1	0
public static void Func1() { runnable.runTaskTimer(Main.getInstance(), Main.getInstance().getYAMLConfig().blockDrinkDelay*20, Main.getInstance().getYAMLConfig().blockDrinkDelay*20); } 	0	0	0	0	1	0
"@GET @Path(""/"") @Produces(MediaType.TEXT_HTML) public Response Func1(@Context UriInfo var1) { String var2 = soyService.render(var1.getAbsolutePath() + ""propegator/download"", amzaClusterName.name); return Response.ok(var2).build(); } "	0	0	0	0	1	0
"public long Func1(ShortSoundTrack var1, long var2) { if ( !db.isOpen() ) db = getWritableDatabase(); Log.d(""DB_TEST"", ""ShortSoundSQLHelper:Func1(""+var2+"")""); ContentValues var3 = new ContentValues(); var3.put( KEY_TITLE, var1.getTitle() ); var3.put( KEY_SHORT_SOUND_ID, var2 ); var3.put( KEY_TRACK_FILENAME_ORIGINAL, """" ); var3.put( KEY_TRACK_FILENAME_MODIFIED, """" ); return db.insert( TRACK_TABLE_NAME, null, var3 );  // Returns the new entry var2 } "	0	0	0	0	1	0
"@Override public boolean Func1(String var1) throws ExchangeException, NotAvailableFromExchangeException, NotYetImplementedForExchangeException, IOException { throw new IllegalStateException(""Need to supply currency pair""); } "	0	0	0	0	1	0
public void Func1() { if(buffer != null) { buffer.release(); buffer = null; } } 	0	0	1	0	0	0
"private void Func1( HttpServletRequest var1, HttpServletResponse var2 ) throws ADBException, XMLStreamException, IOException { EC2AuthorizeRevokeSecurityGroup var3 = new EC2AuthorizeRevokeSecurityGroup(); String[] var4 = var1.getParameterValues( ""GroupName"" ); if ( null != var4 && 0 < var4.length ) var3.setName( var4[0] ); else { throw new EC2ServiceException( ClientError.MissingParamter, ""Missing required parameter 'Groupname'""); } int var5 = 1; do {  	EC2IpPermission var6 = new EC2IpPermission(); String[] var7 = var1.getParameterValues( ""IpPermissions."" + var5 + "".IpProtocol"" ); if ( null != var7 && 0 < var7.length ) var6.setProtocol( var7[0] ); else break; String[] var8 = var1.getParameterValues( ""IpPermissions."" + var5 + "".FromPort"" ); if ( null != var8 && 0 < var8.length ) { if ( var7[0].equalsIgnoreCase(""icmp"") ) var6.setIcmpType( var8[0] ) ; else var6.setFromPort( Integer.parseInt( var8[0]) ); } String[] var9 = var1.getParameterValues( ""IpPermissions."" + var5 + "".ToPort"" ); if ( null != var9 && 0 < var9.length ) { if ( var7[0].equalsIgnoreCase(""icmp"") ) var6.setIcmpCode( var9[0] ); else var6.setToPort( Integer.parseInt( var9[0]) ); } int var10 = 1; do {  String[] var11 = var1.getParameterValues( ""IpPermissions."" + var5 + "".IpRanges."" + var10 + "".CidrIp"" ); if ( null != var11 && 0 < var11.length) var6.addIpRange( var11[0] ); else break; var10++; } while( true ); var10 = 1; do {  String[] var12 = var1.getParameterValues( ""IpPermissions."" + var5 + "".Groups."" + var10 + "".UserId"" ); if ( null == var12 || 0 == var12.length) break; String[] var13 = var1.getParameterValues( ""IpPermissions."" + var5 + "".Groups."" + var10 + "".GroupName"" ); if ( null == var13 || 0 == var13.length) break; EC2SecurityGroup var14 = new EC2SecurityGroup(); var14.setAccount( var12[0] ); var14.setName( var13[0] ); var6.addUser( var14 ); var10++; } while( true ); var3.addIpPermission( var6 ); var5++; } while( true ); if (1 == var5) { throw new EC2ServiceException( ClientError.MissingParamter, ""Missing required parameter - IpPermissions""); } AuthorizeSecurityGroupIngressResponse var15 = EC2SoapServiceImpl.toAuthorizeSecurityGroupIngressResponse( ServiceProvider.getInstance().getEC2Engine().authorizeSecurityGroup( var3 )); serializeResponse(var2, var15); } "	0	0	0	0	1	0
public static int Func1(ArrayList<DoobElement> var1) { int var2 = 0; for (DoobElement var3 : var1) { if (var3 instanceof BallElement) { var2++; } } return var2; } 	0	0	0	1	1	0
public int Func1(ArrayList<DoobElement> var1) { int var2 = 0; for (DoobElement var3 : var1) { if (var3 instanceof BallElement) { var2++; } } return var2; } 	0	0	0	1	1	0
"@Override protected FilterResults Func1(CharSequence var1){ FilterResults var2 = new FilterResults(); String[] var3 = var1.toString().split("":cat:""); CharSequence var4 = var3[0]; CharSequence var5 = var3[1]; boolean var6 = false; boolean var7 = false; boolean var8 = false; if (var4!=null && var4.length()>0){ var6 = true; } if (var6 || !var5.equals(""All"")) { ArrayList<Charity> var9 = new ArrayList<Charity>(); for (Charity var10 : charityList) { if(var6){ var7 = (var10.getName().toLowerCase().contains(var4.toString().toLowerCase())); }else{ var7 = true; } if(var5.equals(""All"")){ var8 = true; }else{ var8 = (var10.getCategory().equals(var5.toString())); } if  (var7 && var8) { var9.add(var10); } } var2.count = var9.size(); var2.values = var9; } else { var2.count = charityList.size(); var2.values = charityList; } return var2; } "	0	0	1	0	1	0
"public static boolean Func1(Context var1, Scriptable var2, Object[] var3, Function var4) throws APIManagementException, ScriptException { if (var3 == null || var3.length == 0) { handleException(""Invalid number of parameters or their types.""); } boolean var5 = false; String var6 = (String) var3[0]; String var7 = (String) var3[1]; String var8 = (String) var3[2]; String var9 = (String) var3[3]; String var10 = (String) var3[4]; String var11 = (String) var3[5]; String var12 = (String) var3[6]; String var13 = (String) var3[9]; if (var12 == null) { throw new APIManagementException(""Invalid Source Type.""); } var12 = var12.trim(); String var14 = (String) var3[11]; FileHostObject var15 = null; String var16 = null; boolean var17 = false; try { String var18 = MultitenantUtils.getTenantDomain(APIUtil.replaceEmailDomainBack(var6)); if(var18 != null && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(var18)) { var17 = true; PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(var18, true); } APIIdentifier var19 = new APIIdentifier(APIUtil.replaceEmailDomain(var6), var7, var8); Documentation var20 = new Documentation(getDocType(var10), var9); APIProvider var21 = getAPIProvider(var2); if (var21.isDocumentationExist(var19, var9)) { handleException(""Error occurred while adding the document. "" + var9 + "" already exists for API "" + var7 + ""-"" + var8); } if (var20.getType() == DocumentationType.OTHER) { if (var13 == null || var13.trim().isEmpty()) { throw new APIManagementException(""Other Type Name Cannot be Empty.""); } var20.setOtherTypeName(var13.trim()); } if (Documentation.DocumentSourceType.URL.toString().equalsIgnoreCase(var12)) { var20.setSourceType(Documentation.DocumentSourceType.URL); var16 = var3[7].toString(); if (var16 == null || !isURL(var16.trim())) { throw new APIManagementException(""Invalid Document Url Format.""); } var16 = var16.trim(); var20.setSourceUrl(var16); } else if (Documentation.DocumentSourceType.FILE.toString().equalsIgnoreCase(var12)) { var20.setSourceType(Documentation.DocumentSourceType.FILE); var15 = (FileHostObject) var3[8]; } else if (Documentation.DocumentSourceType.INLINE.toString().equalsIgnoreCase(var12)) { var20.setSourceType(Documentation.DocumentSourceType.INLINE); } else { throw new APIManagementException(""Invalid Source Type.""); } var20.setSummary(var11); if (var14 == null) { var14 = APIConstants.DOC_API_BASED_VISIBILITY; } if (Documentation.DocumentVisibility.API_LEVEL.toString().equalsIgnoreCase(var14)) { var20.setVisibility(Documentation.DocumentVisibility.API_LEVEL); } else if (Documentation.DocumentVisibility.PRIVATE.toString().equalsIgnoreCase(var14)) { var20.setVisibility(Documentation.DocumentVisibility.PRIVATE); } else { var20.setVisibility(Documentation.DocumentVisibility.OWNER_ONLY); } if (var15 != null && var15.getJavaScriptFile().getLength() != 0) { String var22 = (String) var3[10]; Icon var23 = new Icon(var15.getInputStream(), var22); String var24 = APIUtil.getDocumentationFilePath(var19, var15.getName()); String var25 = var15.getName(); API var26 = var21.getAPI(var19); String var27=APIUtil.getAPIPath(var19); String var28 = var26.getVisibleRoles(); String[] var29 = new String[0]; if (var28 != null) { var29 = var28.split("",""); } APIUtil.setResourcePermissions(var26.getId().getProviderName(), var26.getVisibility(), var29,var24); var20.setFilePath(var21.addIcon(var24, var23)); } else if (var12.equalsIgnoreCase(Documentation.DocumentSourceType.FILE.toString())) { throw new APIManagementException(""Empty File Attachment.""); } var21.addDocumentation(var19, var20); var5 = true; } catch (ScriptException e) { handleException(""The attachment cannot be found for document- "" + var9, e); } finally { if (var17) { PrivilegedCarbonContext.endTenantFlow(); } } return var5; } "	1	1	1	1	0	0
"public static IRubyObject Func1(ThreadContext var1, IRubyObject[] var2) { Ruby var3 = var1.var3; int var4 = var2.length == 2 ? RubyNumeric.num2int(var2[1]) : 0; IRubyObject var5 = var2[0]; String var6, var7; if (var5 instanceof RubyArray) { RubyArray var8 = (RubyArray) var5; final int var9 = var8.size(); if (var9 < 3 || var9 > 4) { throw var3.newArgumentError(""array size should be 3 or 4, ""+ var9 +"" given""); } var7 = var8.eltInternal(1).toString(); var6 = var9 == 3 ? var8.eltInternal(2).toString() : var8.eltInternal(3).toString(); } else if (var5 instanceof RubyString) { String var10 = ((RubyString) var5).toString(); Matcher var11 = STRING_IPV4_ADDRESS_PATTERN.matcher(var10); if (!var11.matches()) { RubyArray var12 = Sockaddr.unpack_sockaddr_in(var1, var5); if (var12.size() != 2) { throw var3.newArgumentError(""invalid address representation""); } var7 = var12.eltInternal(0).toString(); var6 = var12.eltInternal(1).toString(); } else if ((var6 = var11.group(IPV4_HOST_GROUP)) == null || var6.length() == 0 || (var7 = var11.group(IPV4_PORT_GROUP)) == null || var7.length() == 0) { throw var3.newArgumentError(""invalid address string""); } else { try { InetAddress var13 = InetAddress.getByName(var6); if (var13 instanceof Inet6Address) { var6 = var13.getHostAddress(); } } catch (UnknownHostException uhe) { throw var3.newArgumentError(""invalid address string""); } } } else { throw var3.newArgumentError(""invalid var2""); } InetAddress var14; try { var14 = InetAddress.getByName(var6); } catch (UnknownHostException e) { throw sockerr(var3, ""unknown var6: ""+ var6); } if ((var4 & NI_NUMERICHOST.intValue()) == 0) { var6 = var14.getCanonicalHostName(); } else { var6 = var14.getHostAddress(); } jnr.netdb.Service var15 = jnr.netdb.Service.getServiceByPort(Integer.parseInt(var7), null); if (var15 != null) { if ((var4 & NI_NUMERICSERV.intValue()) == 0) { var7 = var15.getName(); } else { var7 = Integer.toString(var15.getPort()); } } return var3.newArray(var3.newString(var6), var3.newString(var7)); } "	1	0	1	0	0	0
"@Override public void Func1(BinlogEventV4 var1) { boolean var2 = false; do { try { var2 = binlogEventQueue.offer(var1, 100, TimeUnit.MILLISECONDS); } catch (InterruptedException e) { _log.error(""failed to put binlog var1 to binlogEventQueue var1: "" + var1, e); } } while (!var2 && !isShutdownRequested()); } "	0	0	0	0	1	0
private void Func1(int var1) { deviceList.remove(var1); devicesListAdapter.notifyDataSetChanged(); } 	0	0	0	0	1	0
@Override void Func1(ActionRunner<K,V> var1, Object... var2) { if (var2[1] == Boolean.TRUE) { var1.stats.incrementHitCount(); } else { var1.stats.incrementMissCount(); } super.Func1(var1); } 	0	0	1	1	1	0
private void Func1(final BufferedOutputStream var1) throws IOException { for (final GedWriterLine var2 : creator.getLines()) { final String var3 = var2.getLine(); var1.write(var3.getBytes()); } } 	0	0	1	0	1	0
public boolean Func1() { return !cookieParams.isEmpty() || !urlParams.isEmpty() || !formParams.isEmpty(); } 	0	0	0	0	1	0
public static <E extends Entity> Criteria<E> Func1(final DtObject var1) { Assertion.checkNotNull(var1); final DtDefinition var2 = DtObjectUtil.findDtDefinition(var1); Criteria<E> var3 = null; for (final DtField var4 : var2.getFields()) { if (var4.getType() != DtField.FieldType.COMPUTED) { final Object var5 = var4.getDataAccessor().getValue(var1); if (var5 instanceof String && var4.getType() != DtField.FieldType.FOREIGN_KEY) { var3 = var3.and(Criterions.startsWith(() -> var4.getName(), (String) var5)); } else if (var5 != null) { var3 = var3.and(Criterions.isEqualTo(() -> var4.getName(), (Comparable) var5)); } } } return var3; } 	0	0	0	0	1	0
"@ApiModelProperty(value = ""Sets the size for the InitialHere tab. It can be value from 0.5 to 1.0, where 1.0 represents full size and 0.5 is 50% size."") @JsonProperty(""scaleValue"") public Number Func1() { return scaleValue; } "	0	0	0	1	0	0
"public static void Func1(String[] var1) { MyDataReader var2 = new MyDataReader(System.getProperty(""user.dir"")+""/data/lense/data.txt""); MLPClassifier var3 = new MLPClassifier(); SparseNetworkLearner.Parameters var4 = new SparseNetworkLearner.Parameters(); MultiLayerPerceptron var5 = new MultiLayerPerceptron(); var4.baseLTU = var5; var3.setParameters(var4); BatchTrainer var6 = new BatchTrainer(var3, var2); var6.train(1); Classifier var7 = new LenseLabel(); TestDiscrete.testDiscrete(new TestDiscrete(), var3, var7, var2, true, 20); } "	0	0	1	0	1	0
"private void Func1(Category var1) { String var2 = prefs.getString(""settings_colors_app"", Constants.PREF_COLORS_APP_DEFAULT); if (!var2.equals(""disabled"")){ ArrayList<View> var3 = new ArrayList<View>(); if (var2.equals(""complete"")){ var3.add(getView().findViewById(R.id.title_wrapper)); var3.add(getView().findViewById(R.id.detail_content_card)); } else { var3.add(getView().findViewById(R.id.tag_marker)); } if (var1 != null && var1.getColor() != null) { for (View var4 : var3) { var4.setBackgroundColor(Integer.parseInt(var1.getColor())); } } else { for (View var4 : var3) { var4.setBackgroundColor(Color.parseColor(""#00000000"")); } } } } "	0	0	0	0	1	0
public static ProtoObject Func1(ProtoObject var1, ThisContext var2, ProtoObject var3, ProtoObject var4, ProtoObject var5, ProtoObject var6, ProtoObject var7, ProtoObject var8, ProtoObject var9) { return var1 == var3 ? ProtoObject.TRUE : ProtoObject.FALSE; } 	0	0	1	1	0	0
"void Func1(ArrayList<Player> var1) { HashMap<String, Object> var2 = new HashMap<>(); ArrayList<String> var3 = new ArrayList<>(); for (Player var4 : var1) { var3.add(var4.getPlayerName()); } var2.put(""llist"", var3.toArray()); messageProvider.sendMessage(new JSONObject(var2)); } "	0	0	1	0	1	0
private Node[] Func1(List<Node> var1, RelationshipType var2) { Node var3 = null; Node var4 = null; double var5 = Double.NEGATIVE_INFINITY; for (int var6 = 0; var6 < var1.size(); ++var6) { Node var7 = var1.get(var6); Envelope var8 = getChildNodeEnvelope(var7, var2); for (int var9 = var6 + 1; var9 < var1.size(); ++var9) { Node var10 = var1.get(var9); Envelope var11 = getChildNodeEnvelope(var10, var2); double var12 = getArea(createEnvelope(var8, var11)) - getArea(var8) - getArea(var11); if (var12 > var5) { var5 = var12; var3 = var7; var4 = var10; } } } return new Node[]{var3,var4}; } 	0	0	0	0	1	0
public static int Func1(CharSequence var1, int var2) { int var3 = var1.length(); int var4 = var2; while ((var4<var3) && (isTagChar(var1.charAt(var4)))) var4++; if ((var4 >= var3) || Character.isSpaceChar(var1.charAt(var4))) return var4; // blank after end of string return -1; } 	0	0	0	0	1	0
"@Bean public IntegrationFlow Func1() { return IntegrationFlows .from(Jms.messageDriverChannelAdapter( Jms.container(this.jmsConnectionFactory, ""containerSpecDestination"") .pubSubDomain(false) .get())) .transform(String::trim) .channel(jmsOutboundInboundReplyChannel()) .get(); } "	0	0	1	0	0	0
protected void Func1() { setSelectorOrder((timelineType.ordinal() + 1) * 2 + (isCombined ? 1 : 0)); } 	0	0	0	0	1	0
"public static String Func1(String var1, final int var2, final int var3) { if (!isBase64EncodedImage(var1)) { return null; } else { final String[] var4 = extractImageInfo(var1); final String var5 = ""png""; final String var6 = var4[1]; byte[] var7 = Base64.decodeBase64(var6); try { BufferedImage var8 = ImageIO.read(new ByteArrayInputStream(var7)); BufferedImage var9 = new BufferedImage(var2, var3, BufferedImage.TYPE_INT_ARGB); Graphics2D var10 = var9.createGraphics(); final double var11 = ((double) var8.getWidth()) / ((double) var8.getHeight()); int var12 = 0, var13 = 0, var14 = var2, var15 = var3; if (var8.getWidth() > var8.getHeight()) { final int var16 = (int) Math.round((float) var3 * var11); var12 = -(var16 - var2) >> 1; var14 = var16; } else if (var8.getWidth() < var8.getHeight()) { final int var17 = (int) Math.round((float) var2 / var11); var13 = -(var17 - var3) >> 1; var15 = var17; } var10.drawImage(var8, var12, var13, var14, var15, null); var10.dispose(); StringBuilder var18 = new StringBuilder(); var18.append(""data:image/""); var18.append(var5); var18.append("";base64,""); ByteArrayOutputStream var19 = new ByteArrayOutputStream(); ImageIO.write(var9, var5, var19); var19.flush(); var19.close(); var18.append(Base64.encodeBase64String(var19.toByteArray())); return var18.toString(); } catch (IOException e) { LOGGER.error(e.getLocalizedMessage()); return null; } } } "	0	0	0	0	1	0
@Override public Set<Entity> Func1(Location<World> var1) { return new SelectorResolver(var1, this, false).Func1(); } 	0	0	0	1	0	0
@Override public Set<Entity> Func1(Extent... var1) { return Func1(ImmutableSet.copyOf(var1)); } 	0	0	0	1	0	0
@Override public Set<Entity> Func1(Collection<? extends Extent> var1) { return new SelectorResolver(var1, this, true).resolve(); } 	0	0	0	1	0	0
"private void Func1(Call var1, ContactCacheEntry var2) { final Call var3 = getCallToShow(CallList.getInstance()); if (var3 == null || !var3.getId().equals(var1.getId())) { return; } final int var4 = var3.getState(); final int var5 = getIconToDisplay(var3); Bitmap var6 = getLargeIconToDisplay(var2, var3); final String var7 = getContentString(var3); final String var8 = getContentTitle(var2, var3); final boolean var9 = var3.getSessionModificationState() == Call.SessionModificationState.RECEIVED_UPGRADE_TO_VIDEO_REQUEST; final int var10; if ((var4 == Call.State.INCOMING || var4 == Call.State.CALL_WAITING || var9) && !InCallPresenter.getInstance().isShowingInCallUi()) { var10 = NOTIFICATION_INCOMING_CALL; } else { var10 = NOTIFICATION_IN_CALL; } if (!checkForChangeAndSaveData(var5, var7, var6, var8, var4, var10)) { return; } if (var6 != null) { var6 = getRoundedIcon(var6); } final Notification.Builder var11 = getNotificationBuilder(); final PendingIntent var12 = createLaunchPendingIntent(); var11.setContentIntent(var12); if (var10 == NOTIFICATION_INCOMING_CALL) { configureFullScreenIntent(var11, var12, var3); var11.setCategory(Notification.CATEGORY_CALL); } var11.setContentText(var7); var11.setSmallIcon(var5); var11.setContentTitle(var8); var11.setLargeIcon(var6); var11.setColor(mContext.getResources().getColor(R.color.dialer_theme_color)); CharSequence var13 = null; if (TelephonyManager.getDefault().isMultiSimEnabled()) { SubscriptionManager var14 = SubscriptionManager.from(mContext); SubscriptionInfo var15 = var14.getActiveSubscriptionInfo(var3.getSubId()); if (var15 != null) { var13 = var15.getDisplayName(); } } if (var2.isSpam) { var13 = mContext.getResources().getQuantityString(R.plurals.spam_count_text, var2.spamCount); } if (!TextUtils.isEmpty(var13)) { var11.setSubText(var13); } if (var9) { var11.setUsesChronometer(false); addDismissUpgradeRequestAction(var11); addAcceptUpgradeRequestAction(var11); if (isMoreOptionRequired(var3)) { addMoreAction(var11); } } else { createIncomingCallNotification(var3, var4, var11); } addPersonReference(var11, var2, var3); Notification var16 = var11.build(); RemoteViews[] var17 = new RemoteViews[] { var16.contentView, var16.bigContentView, var16.headsUpContentView}; Drawable var18 = var2.lookupProviderBadge; if (var6 != null && var18 != null) { Bitmap var19 = null; if (var18 instanceof BitmapDrawable) { var19 = ((BitmapDrawable) var18).getBitmap(); } else { var19 = Bitmap.createBitmap(var18.getIntrinsicWidth(), var18.getIntrinsicHeight(), Bitmap.Config.ARGB_8888); Canvas var20 = new Canvas(var19); var18.setBounds(0, 0, var20.getWidth(), var20.getHeight()); var18.draw(var20); } int var21 = mContext.getResources().getColor(R.color.spam_contact_color); for (RemoteViews var22 : var17) { int var23 = getNotificationRightIconId(mContext); var22.setImageViewBitmap(var23, var19); var22.setViewPadding(var23, 0, 0, 0, 0); if (var2.isSpam) { var22.setTextColor(getNotificationTextId(mContext), var21); var22.setTextColor(getNotificationTitleId(mContext), var21); } } } if (var16.actions.length > 2) { int var24 = mContext.getResources().getDimensionPixelSize( R.dimen.notification_three_action_padding); int var25 = mContext.getResources().getConfiguration().var25; boolean var26 = (var25 & Configuration.SCREENLAYOUT_LAYOUTDIR_RTL) != 0; int var27 = var26 ? var24 : 0; int var28 = var26 ? 0 : var24; for (RemoteViews var22 : var17) { var22.setViewPadding(getNotificationActionsId(mContext), var28, 0, var27, 0); } } if (mCurrentNotification != var10) { Log.i(this, ""Previous var16 already showing - cancelling "" + mCurrentNotification); mNotificationManager.cancel(mCurrentNotification); } Log.i(this, ""Displaying var16 for "" + var10); mNotificationManager.notify(var10, var16); mCurrentNotification = var10; } "	0	0	1	0	0	0
private void Func1() { findViewById(R.id.btn_contents).setSelected(false); findViewById(R.id.btn_highlights).setSelected(true); HighlightListFragment var1 = HighlightListFragment.newInstance(); FragmentTransaction var2 = getSupportFragmentManager().beginTransaction(); var2.replace(R.id.parent, var1); var2.commit(); } 	0	0	0	0	1	0
"@Test public void Func1() { String var1 = ""{source: { content: { value: 'id,title,text\n1,,Hello'} }, extractor : { row : {} }, transformers : [{ csv : {nullValue: 'NULL'} }], loader : { test: {} } }""; process(var1); List<ODocument> var2 = getResult(); ODocument var3 = var2.get(0); assertEquals(new Integer(1), (Integer) var3.field(""id"")); assertEquals("""", (String) var3.field(""title"")); assertEquals(""Hello"", (String) var3.field(""text"")); } "	0	0	0	0	1	0
"private Map<String, ColumnDefinition.Internal> Func1(Set<String> var1) throws IOException { if (var1 == null || var1.isEmpty()) return Collections.emptyMap(); final Map<String, ColumnDefinition.Internal> var2 = columnDefsKey.Func1(keyStore); final Map<String, ColumnDefinition.Internal> var3 = new LinkedHashMap<>(); for (String var4 : var1) { ColumnDefinition.Internal var5 = var2.get(var4); if (var5 == null) { if (var4.equals(Table.ID_COLUMN_NAME)) var5 = ColumnDefinition.Internal.PRIMARYKEY_COLUMN; else throw new DatabaseException(""Column not found: "" + var4); } var3.put(var4, var5); } return var3; } "	0	0	0	1	0	0
"@Test public void Func1() throws Exception { final String var1 = new FakeUsers().var1(); Assert.assertTrue(var1.startsWith(""<people>"")); Assert.assertTrue( var1.contains(""<fullName>Integration Test</fullName>"") ); Assert.assertTrue(var1.endsWith(""</people>"")); } "	0	0	0	0	1	0
@Override protected TreeNodeWrapper Func1(ITreeNode var1) { if (var1 instanceof IPage) { return new PageTreeNodeWrapper((IPage) var1); } else { if (AbstractPortalAction.VIRTUAL_ROOT_CODE.equals(var1.getCode())) { return (PageTreeNodeWrapper) var1; } IPage var2 = this.getPage(var1.getCode()); return new PageTreeNodeWrapper(var2); } } 	0	0	0	0	1	0
"public static void Func1(){ loadingMethod(); for (int var1=1; var1<=5; var1++){ loadingText(""Loading...""); loadingProgress(var1*20); try { Thread.sleep(1000); } catch(InterruptedException e) { } } loadingScreen.close(); LoginWindow var2 = new LoginWindow(); var2.setLocationRelativeTo(null); var2.setVisible(true); } "	0	0	1	0	1	0
private static String Func1(String var1) { String var2 = getFileName(var1); StringBuilder var3 = new StringBuilder(); for (int var4 = 0; var4 < var2.length(); var4++) { char var5 = var2.charAt(var4); if (isAlpha(var5) || isNumber(var5) || var5 == '.' || var5 == '_' || var5 == '-') { var3.append(var5); } else { var3.append('_'); } } return var3.toString(); } 	0	0	0	0	1	0
"public static String Func1(String var1) throws IOException { HashMap<String, String> var2 = new HashMap<String, String>(); var2.put(""metsmods"", ""ugh.fileformats.mets.MetsModsImportExport"".toLowerCase()); var2.put(""mets"", ""www.loc.gov/METS/"".toLowerCase()); var2.put(""rdf"", ""<RDF:RDF "".toLowerCase()); var2.put(""xstream"", ""<ugh.dl.DigitalDocument>"".toLowerCase()); try ( FileReader input = new FileReader(var1); BufferedReader bufRead = new BufferedReader(input); ) { char[] var3 = new char[200]; while ((bufRead.read(var3)) >= 0) { String var4 = new String(var3).toLowerCase(); Iterator<Entry<String, String>> var5 = var2.entrySet().iterator(); while (var5.hasNext()) { Entry<String, String> var6 = var5.next(); if (var4.contains(var6.getValue())) { return var6.getKey(); } } } } return ""-""; } "	0	0	0	0	1	0
"public static Condition Func1(final String var1) { return new Condition(""Func1"") { @Override public boolean Func2(WebElement var2) { return Html.text.contains(getAttributeValue(var2, ""Func1""), var1); } @Override public String Func3() { return name + "" '"" + var1 + ""'""; } }; } "	0	0	1	0	1	0
public List<State> Func1() { if (stateSpace != null && lastState != null) { ShortestPathAlgorithm<State, DefaultEdge> var1 = new DijkstraShortestPath<>(stateSpace); Optional<List<State>> var2 = stateSpace.rootVertexSet().stream() .map(root -> var1.getPath(root, lastState).getVertexList()) .sorted((first, second) -> first.size() < second.size() ? 1 : -1) .findFirst(); return var2.get(); } else { return Collections.emptyList(); } } 	0	0	0	0	1	0
"public String Func1() { return defaultSummary != null && defaultSummary != """" ? defaultSummary : DEFAULT_SUMMARY; } "	0	0	1	0	1	0
"@SuppressFBWarnings(""NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD"") private boolean Func1(SocialLoginParams var1, String var2, @Nullable Principal var3, Request var4, String var5) { if(var3 != null) { _principalDAO.authenticatePrincipalProgrammatically(var3, SHARED_SECRET, var3.getSSOCredentials(SSOType.other, SERVICE_IDENTIFIER)); if(Boolean.valueOf(var1.getContentBuilder().getProperty(PROP_SSO_ENABLED, ""false"")) && !Boolean.valueOf(var4.getParameter(PARAM_SSO_CALLBACK, ""false""))) { String var6 = _apiEndpoint + ""/sessions/identities/"" + var5 + "".json""; String var7 = safeSendAPIRequest(var6, ""PUT""); if(!StringFactory.isEmptyString(var7)) { Gson var8 = new GsonBuilder().create(); APISSOSessionResponseWrapper var9 = var8.fromJson(var7, APISSOSessionResponseWrapper.class); if(Objects.equals(var9.response.var4.status.flag, ""success"")) { String var10 = var9.response.result.data.sso_session.sso_session_token; var4.getSession(Scope.SESSION).setString(SESSION_KEY_SSO_TOKEN, var10); } } } return true; } if(_oneAllDAO.getPrincipalForUserToken(var2, AuthenticationDomainList.emptyDomainList()) == null) { sendAPIRequest(_apiEndpoint + ""/users/"" + var2 + "".json?confirm_deletion=true"", ""DELETE""); } var1.getMessageAcceptor().accept(Message.error( ERROR_USER_DOES_NOT_EXIST_FOR_USER_TOKEN(), ERROR_DETAILS_USER_DOES_NOT_EXIST_FOR_USER_TOKEN())); return false; } "	1	0	0	0	0	0
"@Override public Long Func1(HiveContext var1, JobEnvironment var2, Config var3) { var1.sql(""DROP TABLE if exists `default`.`test_addresses`""); var1.sql(String.format(""%s %s %s %s %s %s"", tableCreate, tableArgs, tableRowFormat, tableColFormat, tableMapFormat, tableAs)); var1.sql(String.format(""LOAD DATA LOCAL INPATH %s OVERWRITE INTO TABLE `default`.`test_addresses`"", loadPath)); final DataFrame var4 = var1.sql(""SELECT * FROM `default`.`test_addresses`""); return var4.count(); } "	0	0	0	0	1	0
"@Override public Integer Func1(SQLContext var1, JobEnvironment var2, Config var3) { Row var4 = var1.sql(""select 1+1"").take(1)[0]; return var4.getInt(0); } "	0	0	1	1	1	0
@Override public IAdhocTicket Func1() { return adhocTicketDAO.createTicket(this.carparkId); } 	1	0	0	0	1	0
public void Func1(List<StreamStat> var1) { if (mCardViewHolder != null && mSensorPresenter != null) { mCardViewHolder.graphStatsList.Func1(var1); mCardViewHolder.meterStatsList.Func1(var1); mSensorPresenter.Func1(var1); } } 	0	0	0	0	1	0
@Override public long Func1() { return getContentLength(response.body()); } 	0	0	0	0	1	0
"@Override public String Func1() throws Exception { String var1; try { logger.info(""Starting to wait for command to finish in background: "" + this.command); int var2 = process.waitFor(); var1 = String.format(""Command finished. \n command: %s \n exit code: %s \n standard out: \n %s \n %standard error: \n %s"", this.command, var2, ProcessOutputReader.getStandardOut(process), ProcessOutputReader.getErrorOut(process) ); logger.info(var1); return var1; } catch (Exception e) { var1 = String.format(""An error occurred while waiting for %s command to finish in background"", command); logger.error(var1, e); return var1; } } "	0	0	1	1	0	0
"private boolean Func1(NamedIdentifiable var1) { if (var1 instanceof ResourceGroupEntity) { if (isAlreadyProvided((ResourceGroupEntity) var1)) { String var2 = ""A resource can only be provided once""; GlobalMessageAppender.addErrorMessage(var2); return false; } if (!canAddResourceRelation || !permissionService.hasPermission(Permission.RESOURCE, null, Action.READ, (ResourceGroupEntity) var1, null)) { String var2 = ""You do not have the permission to add this relation""; GlobalMessageAppender.addErrorMessage(var2); return false; } if (!resourceRelationBoundary.isAddableAsProvidedResourceToResourceGroup((ResourceEntity) resourceOrType, var1.getName())) { String var2 = ""This resource is already provided by another resource""; GlobalMessageAppender.addErrorMessage(var2); return false; } return true; } return false; } "	0	0	1	1	0	0
"@Override public void Func1(@Nonnull MergeRequest var1) { PullRequest var2 = var1.getPullRequest(); Repository var3 = var2.getToRef().getRepository(); final Config var4 = configDao.getConfigForRepo(var3.getProject().getKey(), var3.getSlug()); String var5 = regexUtils.formatBranchName(var2.getToRef().getId()); if (regexUtils.match(var4.getBlockedPRs(), var5)) { var1.veto(""Pull Request Blocked"", ""Pull requests have been disabled for var5 ["" + var5 + ""]""); } else { PullRequestApproval var6 = new PullRequestApproval(var4, userUtils); if (!var6.isPullRequestApproved(var2)) { Set<String> var7 = var6.missingRevieiwersNames(var2); var1.veto(""Required reviewers must approve"", (var4.getRequiredReviews() - var6.seenReviewers(var2).size()) + "" more approvals required from the following users: "" + Joiner.on("", "").join(var7)); } else { Boolean var8 = var4.getBlockMergeIfPrNeedsWork(); final Boolean var9 = var8 != null && var8 && var8(var2); if (var9) { var1.veto(""PR marked as Needs Work from reviewer(s)"", ""Resolve it before merge.""); } } } } "	0	0	1	0	1	0
"@RequestMapping(value = { ""/var2/logout"", ""/logout"" }, method = { RequestMethod.POST, RequestMethod.GET }) public final View Func1(final HttpServletRequest var1) { final Authentication var2 = SecurityContextHolder.getContext().getAuthentication(); userService.removeUserFromMaps(userService.getCurrentUser()); var1.getSession().invalidate(); SecurityContextHolder.clearContext(); if (var2 instanceof CasAuthenticationToken) { if ("""".equals(apiPath)) { apiPath = var1.getContextPath(); } return new RedirectView(apiPath + ""/j_spring_cas_security_logout"", true); } return new RedirectView(var1.getHeader(""referer"") != null ? var1.getHeader(""referer"") : ""/""); } "	0	0	1	0	1	0
"public void Func1(File var1, RIOShell var2) throws IOException { Logger.info(""Starting deployment...""); sendFileTo(var1, ""/home/lvuser/FRCUserProgram.var1""); Logger.info(""Primary deployment complete.""); execCheck(""rm /usr/local/frc/bin/netconsole-host""); var2.sendBinResourceTo(DepRoboRIO.class, ""/edu/wpi/first/wpilibj/binaries/netconsole-host"", ""/usr/local/frc/bin/"", 0755); sendTextResourceTo(DepRoboRIO.class, ""/edu/wpi/first/wpilibj/binaries/robotCommand"", ""/home/lvuser/"", 0755); Logger.info(""Download complete.""); } "	0	0	1	0	1	0
"public void Func1(String Func1) { try { HttpResponse<String> var2 = Unirest.Func1(route + ""/slack"").header(""content-type"", ""application/json"").body(Func1) .asString(); if (var2.getStatus() >= 300) FutureBot.log(""Got status code '"" + var2.getStatus() + "": "" + var2.getStatusText() + ""' trying to announce live stream!"", LoggerFlag.FATAL); if (var2.getStatus() == 400) FutureBot.log(""Response: "" + new JSONObject(var2.getBody()).toString(), LoggerFlag.ERROR); } catch (UnirestException e) { FutureBot.log(""Encountered UnirestException trying to Func1 to webhook."", LoggerFlag.FATAL, LoggerFlag.ERROR); } } "	0	0	0	0	1	0
public void Func1(Book var1, Key var2) { LinksWindow var3 = windowRepository.getDedicatedLinksWindow(); boolean var4 = var3.isVisible(); var3.initialisePageStateIfClosed(var3); windowRepository.setActiveWindow(var3); var3.getPageManager().setCurrentDocumentAndKey(var1, var2); if (!var4) { var3.getWindowLayout().setState(WindowState.SPLIT); eventManager.post(new NumberOfWindowsChangedEvent(getWindowVerseMap())); } } 	0	0	0	0	1	0
"public void Func1() throws GridConfigurationException { String var1 = (String) configuration.get(HUB_HOST); Integer var2 = (Integer) configuration.get(HUB_PORT); if (var1 == null || var2 == null) { throw new GridConfigurationException(""You need to specify a var1 to register to using -"" + HUB_HOST + "" X -"" + HUB_PORT + "" 5555. The specified config was -"" + HUB_HOST + "" "" + var1 + "" -"" + HUB_PORT + "" "" + var2); } if(var2==-1){ throw new GridConfigurationException(""No var2 was specified for var1. You need to specify a var2 in hubUrl value specified in -var1 parameter.""); } } "	0	0	1	1	0	0
public ArrayList<ItemStack> Func1() { ArrayList<ItemStack> var1 = new ArrayList<ItemStack>(); try { } catch (Throwable e) { } for (MaterialContainer var2 : items) var1.add(var2.getItemStack()); return var1; } 	0	0	0	1	0	0
"public static void Func1(){ String var1 = ""no logs""; final String var2 = Integer.toString(android.os.Process.myPid()); try { Process var3 = Runtime.getRuntime().exec(""logcat -d""); BufferedReader var4 = new BufferedReader(new InputStreamReader(var3.getInputStream())); StringBuilder var5 = new StringBuilder(); String var6; while ((var6 = var4.readLine()) != null) { if(var6.contains(var2)) var5.append(var6); } var1 = var5.toString(); } catch (IOException e) { var1 = e.getLocalizedMessage(); } finally { showAlertText(var1, MainActivity.getInstace()); } } "	0	0	1	1	1	0
"private void Func1(String var1, String var2, boolean var3, boolean var4, boolean var5) { if (foreground) { notification = new Notification(R.drawable.icon, var1, System.currentTimeMillis()); Intent var6 = new Intent(this, ServersActivity.class); var6.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); PendingIntent var7 = PendingIntent.getActivity(this, 0, var6, 0); if (var2 == null) { if (newMentions >= 1) { StringBuilder var8 = new StringBuilder(); for (Conversation var9 : mentions.values()) { var8.append(var9.getName() + "" ("" + var9.getNewMentions() + ""), ""); } var2 = getString(R.string.notification_mentions, var8.substring(0, var8.length()-2)); } else if (!connectedServerTitles.isEmpty()) { StringBuilder var8 = new StringBuilder(); for (String var10 : connectedServerTitles) { var8.append(var10 + "", ""); } var2 = getString(R.string.notification_connected, var8.substring(0, var8.length()-2)); } else { var2 = getString(R.string.notification_not_connected); } } notification.setLatestEventInfo(this, getText(R.string.app_name), var2, var7); if (var3) { notification.defaults |= Notification.DEFAULT_VIBRATE; } if (var4) { notification.defaults |= Notification.DEFAULT_SOUND; } if (var5) { notification.ledARGB   = NOTIFICATION_LED_COLOR; notification.ledOnMS   = NOTIFICATION_LED_ON_MS; notification.ledOffMS  = NOTIFICATION_LED_OFF_MS; notification.flags    |= Notification.FLAG_SHOW_LIGHTS; } notification.number = newMentions; notificationManager.notify(FOREGROUND_NOTIFICATION, notification); } } "	0	0	0	0	1	0
public ArrayList<String> Func1(){ return new ArrayList<String>(keys); } 	1	0	0	0	1	0
"private void Func1() throws SQLException { Statement var1 = null; try { var1 = data_repo.createStatement( null ); var1.executeQuery( ""select "" + MSG_TYPE_COLUMN + "" from "" + MSG_TABLE + "" where "" + MSG_ID_COLUMN + "" = 0"" ); } catch ( SQLException ex ) { log.log( Level.INFO, MSG_TABLE + "" table was in old version, performing update to add missing column"" ); String var2 = null; try { var2 = ""alter table "" + MSG_TABLE + "" add "" + MSG_TYPE_COLUMN + "" int NOT NULL;""; if ( var1 == null ){ var1 = data_repo.createStatement( null ); } var1.execute( var2 ); } catch ( SQLException ex1 ) { log.log( Level.SEVERE, ""could not alter table "" + MSG_TABLE + "" to add missing column by SQL:\n"" + var2, ex1 ); } } DataRepository.dbTypes var3 = data_repo.getDatabaseType(); switch ( var3 ) { case mysql: data_repo.checkTable( JID_TABLE, MYSQL_CREATE_JID_TABLE ); data_repo.checkTable( MSG_TABLE, MYSQL_CREATE_MSG_TABLE ); data_repo.checkTable( ""broadcast_msgs"", MYSQL_CREATE_BROADCAST_MSGS_TABLE); data_repo.checkTable( ""broadcast_msgs_recipients"", MYSQL_CREATE_BROADCAST_MSGS_RECIPIENTS_TABLE); break; case postgresql: data_repo.checkTable( JID_TABLE, PGSQL_CREATE_JID_TABLE ); data_repo.checkTable( MSG_TABLE, PGSQL_CREATE_MSG_TABLE ); data_repo.checkTable( ""broadcast_msgs"", PGSQL_CREATE_BROADCAST_MSGS_TABLE); data_repo.checkTable( ""broadcast_msgs_recipients"", PGSQL_CREATE_BROADCAST_MSGS_RECIPIENTS_TABLE); break; case derby: data_repo.checkTable( JID_TABLE, DERBY_CREATE_JID_TABLE ); data_repo.checkTable( MSG_TABLE, DERBY_CREATE_MSG_TABLE ); data_repo.checkTable( ""broadcast_msgs"", DERBY_CREATE_BROADCAST_MSGS_TABLE); data_repo.checkTable( ""broadcast_msgs_recipients"", DERBY_CREATE_BROADCAST_MSGS_RECIPIENTS_TABLE); break; case jtds: case sqlserver: data_repo.checkTable( JID_TABLE, SQLSERVER_CREATE_JID_TABLE ); data_repo.checkTable( MSG_TABLE, SQLSERVER_CREATE_MSG_TABLE ); data_repo.checkTable( ""broadcast_msgs"", SQLSERVER_CREATE_BROADCAST_MSGS_TABLE); data_repo.checkTable( ""broadcast_msgs_recipients"", SQLSERVER_CREATE_BROADCAST_MSGS_RECIPIENTS_TABLE); break; } } "	0	0	0	1	1	0
"private void Func1() { int var1 = table.getSelectedRow(); if (var1 >= 0) { editor.setCurrentEntry((String) table.getValueAt(var1, 0)); content.setText(editor.getCurrentEntry().getContent()); edit.setEnabled(true); use.setEnabled(true); delete.setEnabled(true); } else { editor.setCurrentEntry(null); content.setText(""""); edit.setEnabled(false); use.setEnabled(false); delete.setEnabled(false); } } "	0	0	1	1	0	0
public StatisticsSummary Func1(int var1, String var2) { List<ActivityData> var3 = getFacade().getAllForUserWithUnit(var1, var2); return new StatisticsSummary(var3); } 	0	0	0	0	1	0
public void Func1(int var1, int var2, int var3, int var4, int var5){ if (GameMod.EASY.isActive() && deathTime > -1) { if (data.getHealth() < 99f) data.changeHealth(var3 / 10f); else { MusicController.resume(); deathTime = -1; } } if (objectIndex >= hitObjects.length || (MusicController.trackEnded() && objectIndex > 0)) { if (MusicController.trackEnded() && objectIndex < hitObjects.length) hitObjects[objectIndex].update(true, var3, var1, var2, false, var4); if (checkpointLoaded) game.closeRequested(); else { boolean var6 = (GameMod.AUTO.isActive() || GameMod.RELAX.isActive() || GameMod.AUTOPILOT.isActive()); ((GameRanking) game.getState(Opsu.STATE_GAMERANKING)).setGameData(data); if (isReplay) data.setReplay(replay); else if (replayFrames != null) { if (!replayFrames.isEmpty()) replayFrames.getFirst().setTimeDiff(replaySkipTime * -1); replayFrames.addFirst(ReplayFrame.getStartFrame(replaySkipTime)); replayFrames.addFirst(ReplayFrame.getStartFrame(0)); Replay var7 = data.getReplay(replayFrames.toArray(new ReplayFrame[replayFrames.size()]), osu); if (var7 != null && !var6) var7.save(); } ScoreData var8 = data.getScoreData(osu); if (!var6 && !isReplay) ScoreDB.addScore(var8); game.enterState(Opsu.STATE_GAMERANKING, new FadeOutTransition(Color.black), new FadeInTransition(Color.black)); } return; } if (timingPointIndex < osu.timingPoints.size()) { OsuTimingPoint var9 = osu.timingPoints.get(timingPointIndex); if (var4 >= var9.getTime()) { if (!var9.isInherited()) beatLengthBase = beatLength = var9.getBeatLength(); else beatLength = beatLengthBase * var9.getSliderMultiplier(); HitSound.setDefaultSampleSet(var9.getSampleType()); SoundController.setSampleVolume(var9.getSampleVolume()); timingPointIndex++; } } if (objectIndex == 0 && var4 < osu.objects[0].getTime()) return;  // nothing to do here if (osu.breaks != null && breakIndex < osu.breaks.size()) { int var10 = osu.breaks.get(breakIndex); if (breakTime > 0) {  // in a break period if (var4 < var10) return; else { breakTime = 0; breakIndex++; } } else if (var4 >= var10) { breakTime = var10; breakSound = false; breakIndex++; return; } } data.changeHealth(var3 * -1 * GameData.HP_DRAIN_MULTIPLIER); if (!data.isAlive()) { if (GameMod.EASY.isActive() && !GameMod.SUDDEN_DEATH.isActive()) { deaths++; if (deaths < 3) { deathTime = var4; MusicController.pause(); return; } } if (!isReplay) { restart = Restart.LOSE; game.enterState(Opsu.STATE_GAMEPAUSEMENU); } } boolean var11 = var5 != ReplayFrame.KEY_NONE; while (objectIndex < hitObjects.length && var4 > osu.objects[objectIndex].getTime()) { boolean var12 = (objectIndex + 1 < hitObjects.length && var4 > osu.objects[objectIndex + 1].getTime() - hitResultOffset[GameData.HIT_300]); if (hitObjects[objectIndex].update(var12, var3, var1, var2, var11, var4)) objectIndex++;  // done, so increment object index else break; } } 	0	0	0	1	0	0
private void Func1() { Boolean var1 = PreferenceUtils.getBooleanPreference(this, PreferenceUtils.PreferenceIdentifier.STATUS_ENABLED); if (var1 != null && var1) { for (StatusBarNotification var2 : getNotifications()) { Intent var3 = new Intent(StatusService.ACTION_NOTIFICATION_ADDED); var3.setClass(this, StatusService.class); var3.putExtra(StatusService.EXTRA_NOTIFICATION_KEY, String.valueOf(var2.getId())); var3.putExtra(StatusService.EXTRA_NOTIFICATION, var2.getNotification()); var3.putExtra(StatusService.EXTRA_PACKAGE_NAME, var2.getPackageName()); startService(var3); } } } 	0	0	0	0	1	0
"public static byte[] Func1(byte[] var1) { final ByteArrayOutputStream var2 = new ByteArrayOutputStream(); try { for (byte var3 : var1) { if (var3 == (byte) 0xAA) { var2.write(new byte[] { (byte) 0xA9, (byte) 0x01 }); } else if (var3 == (byte) 0x9A) { var2.write(new byte[] { (byte) 0xA9, (byte) 0x00 }); } else { var2.write(var3); } } } catch (IOException e) { logger.error(""io error"", e); } return var2.toByteArray(); } "	0	0	1	0	1	0
"@Override protected Returnable Func1(GetAttributeRequestWrapper var1) throws Exception { if (responseWrapperDTO.getRequestError() != null) { responseWrapperDTO.setHttpStatus(Response.Status.BAD_REQUEST); return responseWrapperDTO; } APITypes var2 = dao.getAPIType(var1.getRequestType().toString().toLowerCase()); APIServiceCalls var3 = dao.getServiceCall(var2.getId(), ServiceName.GetAttribute.toString().toLowerCase()); JSONObject var4 = new JSONObject(); var4.put(""var5"",var1.getMsisdn()); var4.put(""var9"",var1.getImsi()); var4.put(""var10"",var1.getSchema()); var4.put(""var12"",var1.getMcc()); var4.put(""var11"",var1.getMnc()); var4.put(""userName"",var1.getUser().getUserName()); logHandler.saveMessageLog(var3.getApiServiceCallId(), var1.getUser().getId(), ""var5"", var1.getMsisdn(), var4); String var5 = null; ObjectMapper var6 = new ObjectMapper(); JsonNode var7 = null; String var8 = CommonUtil.getNullOrTrimmedValue(var1 .getMsisdn()); String var9 = CommonUtil.getNullOrTrimmedValue(var1 .getImsi()); String[] var10 = CommonUtil.getStringToArray(var1 .getSchema()); String var11 = CommonUtil.getNullOrTrimmedValue(var1 .getMnc()); String var12 = CommonUtil.getNullOrTrimmedValue(var1 .getMcc()); Integer var13 = var1.getUser().getId(); if (var8 != null) { var5 = CommonUtil.extractNumberFromMsisdn(var8); } List<AttributeValues> var14 = null; ListCustomerInfoAttributesDTO var15 = new ListCustomerInfoAttributesDTO(); if (!customerInfoDao.checkSchema(var10)) { responseWrapperDTO.setRequestError(constructRequestError( SERVICEEXCEPTION, ServiceError.INVALID_INPUT_VALUE, ""No valid var10 provided "" + var1.getSchema())); responseWrapperDTO.setHttpStatus(Status.BAD_REQUEST); return responseWrapperDTO; } if ((customerInfoDao.getMSISDN(var5, var9, var12, var11) == null)) { LOG.error(""###CUSTOMERINFO### Valid MSISDN doesn't exists for the given inputssss""); responseWrapperDTO .setRequestError(constructRequestError(SERVICEEXCEPTION, ServiceError.INVALID_INPUT_VALUE, ""Valid MSISDN does not exist for the given input parameters"")); responseWrapperDTO.setHttpStatus(Status.BAD_REQUEST); return responseWrapperDTO; } var14 = customerInfoDao.getAttributeServices(var5, var13, var9, var10); if (var14 == null) { LOG.error(""###CUSTOMERINFO### Customer information does not available""); responseWrapperDTO.setRequestError(constructRequestError(SERVICEEXCEPTION, ServiceError.INVALID_INPUT_VALUE, "" No Valid Customer var10 information configured for the given input parameters"")); responseWrapperDTO.setHttpStatus(Status.BAD_REQUEST); return responseWrapperDTO; } for (AttributeValues var16 : var14) { schemaValues = ((var16.getAttributedid()).getAttribute()) .getAttributeName().toString(); if ((Attribute.basic.toString()).equals(schemaValues)) { var7 = var6.readValue(var16.getValue(), JsonNode.class); var15.setBasic(var7); } else if ((Attribute.billing.toString()).equals(schemaValues)) { var7 = var6.readValue(var16.getValue(), JsonNode.class); var15.setBilling(var7); } else if (Attribute.account.toString().equals(schemaValues)) { var7 = var6.readValue(var16.getValue(), JsonNode.class); var15.setAccount(var7); } else if (Attribute.identification.toString().equals(schemaValues)) { var7 = var6.readValue(var16.getValue(), JsonNode.class); var15.setIdentification(var7); } } var15.setMsisdn(var5); if (var9 != null) { var15.setImsi(var9); } var15.setResourceURL(CommonUtil .getResourceUrl(var1)); var15.setOnBehalfOf(CommonUtil.getNullOrTrimmedValue(var1.getOnBehalfOf())); var15.setPurchaseCategoryCode(CommonUtil.getNullOrTrimmedValue(var1.getPurchaseCategoryCode())); var15.setRequestIdentifier( CommonUtil.getNullOrTrimmedValue(var1.getRequestIdentifier())); var15.setResponseIdentifier(""RES"" + RandomStringUtils.randomAlphabetic(8)); ListCustomerInfoDTO var17 = new ListCustomerInfoDTO(); var17.setCustomer(var15); responseWrapperDTO.setCustomer(var17); responseWrapperDTO.setHttpStatus(Response.Status.OK); return responseWrapperDTO; } "	0	0	1	1	0	0
public void Func1(ActionEvent var1) { int var2 = findWorkItem(currentId); if (var2 > -1) { workitems.remove(var2); } currentId = null; workflowController.setWorkitem(null); } 	0	0	0	0	1	0
@Override public View Func1(int var1, View var2, ViewGroup var3) { GTG.ccRwtm.registerReadingThread(); try { MediaLocTime var4 = mltArray.get(var1); View var5 = var2; if (var5 == null) { var5 = inflater.inflate(R.layout.media_gallery_media, var3, false); } ImageView var6 = (ImageView) var5.findViewById(R.id.image); ImageView var7 = (ImageView) var5 .findViewById(R.id.video_indicator); if (var4.isClean(context)) { Bitmap var8 = mltArray.get(var1).getThumbnailBitmap( contentResolver, true); var6.setImageBitmap(var8); if (var4.isVideo()) { var7.setVisibility(View.VISIBLE); } else var7.setVisibility(View.GONE); } else { Bitmap var8 = ((BitmapDrawable) context.getResources(). getDrawable(R.drawable.white1x1)).getBitmap(); var6.setImageBitmap(var8); if (!var4.isDeleted()) GTG.mediaLocTimeMap.notifyMltNotClean(var4); var7.setVisibility(View.GONE); } return var5; } finally { GTG.ccRwtm.unregisterReadingThread(); } } 	0	0	1	0	1	0
public boolean Func1(String var1) { if(var1 == null) return false; if(!launchableCachedMap.containsKey(var1)) { boolean var2 = getPackageManager().getLaunchIntentForPackage(var1) != null; for(Map.Entry<Integer, ApplicationIcon> var3 : dockbarTargets.entrySet()){ if(var3.getValue().getPackageName().equals(var1)){ var2 = false; break; } } launchableCachedMap.put(var1, var2); } return launchableCachedMap.get(var1); } 	0	0	0	0	1	0
"public void Func1() { try { int var1 = this.packetizerCupertino.getChunkCount(); logger.info(""Stream contains ["" + var1 + ""] chuncks""); if (var1 >= readyForPlaybackMinimumChunkCount) { logger.info(""Raising STREAM_READY_FOR_PLAYBACK event""); raiseReadyForPlaybackEvent(); } } catch (Exception err) { logger.error(err); } } "	0	0	0	0	1	0
"protected AuthenticatedUser Func1(Credentials var1, EnumRole... var2) throws ApplicationException { try { if (var1 == null) { throw createApplicationException(SharedErrorCode.AUTHENTICATION_NO_CREDENTIALS); } UsernamePasswordAuthenticationToken var3 = (UsernamePasswordAuthenticationToken) this.authenticationProvider .Func1(new UsernamePasswordAuthenticationToken(var1.getUsername(), var1.getPassword())); if (var3 == null) { throw createApplicationException(SharedErrorCode.AUTHENTICATION_USERNAME).set(""username"", var1.getUsername()); } if (var2 != null) { boolean var4 = false; for (EnumRole var5 : var2) { if (var3.getAuthorities().contains(new SimpleGrantedAuthority(var5.toString()))) { var4 = true; break; } } if (!var4) { throw createApplicationException(SharedErrorCode.AUTHORIZATION_MISSING_ROLE).set(""var5"", StringUtils.join(var2, "","")); } } SecurityContextHolder.getContext().setAuthentication(var3); return (AuthenticatedUser) var3.getPrincipal(); } catch (BadCredentialsException ex) { throw wrapApplicationException(ex, SharedErrorCode.AUTHENTICATION_USERNAME).set(""username"", var1.getUsername()); } } "	0	0	1	1	1	0
public String Func1(String var1, ListenerAdapter var2, EventFilter var3) { Collection<ListenerInfo> var4 = getOrPutIfAbsent(registrations, var1, LISTENER_SET_CONSTRUCTOR); String var5 = UUID.randomUUID().toString(); ListenerInfo var6 = new ListenerInfo(var3, var2, var5); var4.add(var6); return var5; } 	0	0	0	0	1	0
"@SuppressWarnings(""deprecation"") @EventHandler public void Func1(SignChangeEvent var1) throws InterruptedException { Player var2 = var1.getPlayer(); Sign var3 = (Sign) var1.getBlock().getState(); if (!(var1.getLine(0).equalsIgnoreCase(""[iTrade]""))) { return; } final Block var4 = var1.getBlock().getRelative(0, -1, 0); if (!var2.hasPermission(getCreateIPerm())) { var3.setLine(0, """"); var3.update(); var3.setLine(1, """"); var3.update(); var3.setLine(2, """"); var3.update(); var3.setLine(3, """"); var3.update(); var2.sendMessage(ChatColor.translateAlternateColorCodes('&', getPrefix() + plugin.getMessages().getString(""no-ts-create-permission""))); return; } if (!plugin.getAllowedInventories().contains(var4)) { var1.setLine(0, ChatColor.DARK_RED + ""[iTrade]""); var1.setLine(1, """"); var1.setLine(2, """"); var1.setLine(3, """"); var2.sendMessage(ChatColor.translateAlternateColorCodes('&', getPrefix() + plugin.getMessages().getString(""no-chest""))); return; } boolean var5 = true; // If this is true, the information on the sign is valid! String var6 = var1.getLine(1); String var7 = var1.getLine(2); if (!var6.contains("" "") || !var7.contains("" "")) { var5 = false; } String[] var8 = var6.split("" ""); String[] var9 = var7.split("" ""); if (var8.length != 2 || var9.length != 2) { var5 = false; } if (var6.split("":"").length > 1) { var8[1] = var8[1].split("":"")[0]; } if (var7.split("":"").length > 1) { var9[1] = var9[1].split("":"")[0]; } if (var8.length != 2 || var9.length != 2) { var5 = false; } int var10 = 0; int var11 = 0; String var12 = null; String var13 = null; @SuppressWarnings(""unused"") ItemStack var14; @SuppressWarnings(""unused"") ItemStack var15; try { var10 = Integer.parseInt(var8[0]); var11 = Integer.parseInt(var9[0]); if (isInt(var8[1])) var12 = Material.getMaterial(Integer.parseInt(var8[1])).name(); else var12 = var8[1].toUpperCase(); var14 = new ItemStack(Material.getMaterial(var12), var10); if (isInt(var9[1])) var13 = Material.getMaterial(Integer.parseInt(var9[1])).name(); else var13 = var9[1].toUpperCase(); var15 = new ItemStack(Material.getMaterial(var13), var11); } catch (Exception e) { var5 = false; } if (var5 == false) { var1.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&', getPrefix() + plugin.getMessages().getString(""invalid-sign""))); var1.setLine(0, ChatColor.DARK_RED + ""[iTrade]""); var1.setLine(1, """"); var1.setLine(2, """"); var1.setLine(3, """"); return; } String var16 = var1.getPlayer().getName(); var1.setLine(3, var16); var1.setLine(0, ChatColor.DARK_GREEN + ""[iTrade]""); var1.getPlayer().sendMessage(ChatColor.translateAlternateColorCodes('&', getPrefix() + plugin.getMessages().getString(""successful-setup""))); } "	0	0	1	0	0	0
"public <T> EnumBuilder Func1(T var1, Class<T> var2) { pojoCreationCheck(); String var3 = var1.toString().replaceAll(NameHelper.ILLEGAL_CHARACTER_REGEX, ""_"").toUpperCase(); if (!doesEnumContainField(var3)) { withValueField(var2); ENUM_CACHE.put(var3, true); logger.debug(""Adding field: "" + var1 + "" to "" + this.pojo.var1()); if (StringUtils.hasText(var3)) { JEnumConstant var4 = this.pojo.var4(var3); if (var2.equals(Integer.class)) { var4.arg(JExpr.lit((Integer)var1)); } else if (var2.equals(Boolean.class)) { var4.arg(JExpr.lit((Boolean)var1)); } else if (var2.equals(Double.class)) { var4.arg(JExpr.lit((Double)var1)); } else if (var2.equals(Float.class)) { var4.arg(JExpr.lit((Float)var1)); } else if (var2.equals(Long.class)) { var4.arg(JExpr.lit((Long)var1)); } else { var4.arg(JExpr.lit(var1.toString())); } } } return this; } "	0	0	0	0	1	0
public boolean Func1(String var1) { return Loader.isModLoaded(var1); } 	0	0	0	1	0	0
"protected void Func1(String var1, Object... var2) { System.out.println(String.format(""[%s] "" + var1, var2)); } "	0	0	0	0	1	0
"@Override public void Func1(final ChangeList var1, final String var2) { LOG.info(""Func1: from "" + var2 + "" to "" + var1); if (! (var1 instanceof LocalChangeList)) { return; } if (Comparing.equal(var1.getName(), var2)) { return; } if (P4ChangeListMapping.isDefaultChangelist(var1) && P4ChangeListMapping.isIdeaDefaultChangelistName(var2)) { LOG.info(""Cannot set a comment to the default changelist in Perforce; ignoring.""); return; } if (P4ChangeListMapping.isDefaultChangelist(var1)) { final Map<ClientServerId, P4ChangeListId> var3 = changeListMapping.rebindChangelistAsDefault((LocalChangeList) var1); for (P4Server var4: myVcs.getP4Servers()) { final P4ChangeListId var5 = var3.remove(var4.getClientServerId()); if (var5 != null) { final Collection<P4FileAction> var6; try { var6 = var4.getOpenFiles(); } catch (InterruptedException e) { LOG.error(e); continue; } List<FilePath> var7 = new ArrayList<FilePath>(var6.size()); for (P4FileAction var8 : var6) { if (var8.getChangeList() == var5.getChangeListId()) { var7.add(var8.getFile()); } } var4.moveFilesToChange(var7, (LocalChangeList) var1, changeListMapping); } } return; } if (P4ChangeListId.DEFAULT_CHANGE_NAME.equals(var2)) { for (P4Server var4 : myVcs.getP4Servers()) { final Collection<P4FileAction> var6; try { var6 = var4.getOpenFiles(); } catch (InterruptedException e) { LOG.error(e); continue; } List<FilePath> var7 = new ArrayList<FilePath>(var6.size()); for (P4FileAction var8 : var6) { if (var8.getChangeList() == P4ChangeListId.P4_DEFAULT) { var7.add(var8.getFile()); } } var4.moveFilesToChange(var7, (LocalChangeList) var1, changeListMapping); } return; } for (P4Server var4 : myVcs.getP4Servers()) { final P4ChangeListId var5 = changeListMapping.getPerforceChangelistFor(var4, (LocalChangeList) var1); if (var5 != null) { var4.renameChangelist(var5.getChangeListId(), toDescription(var1)); } } } "	0	0	0	0	0	1
int Func1(float var1, float var2, int var3, float[] var4) { CDMRadarSweepDB var5; int             var6; double          var7; float           var8 = var2 * 2.f; var5 = RSL_sweep_list[var3]; CDMRadarSweepDB.Ray var9 = hashBin(var5, var1, var4.length); if (var9 == null) { return 999; } int var10 = var9.rayIndex;  //Integer.parseInt(var9.index);  //.rayIndex; var6 = theClosestHash(var4, var1, var10, var2); if (var6 == 999) { return 999; } var7 = angleDiff(var1, var4[var6]); if (var7 <= var8) { return var6; } return 999; } 	0	0	0	0	1	0
public RTIterator Func1() { final RTIterator var1 = new RTListIterator(this); return var1; } 	0	0	0	0	1	0
"public static int Func1(final int var1, final int var2) { if (var1 == var2) { return var1; } if (var1 > var2) { throw new IllegalArgumentException(""var1 value is > than var2 value""); } return (int) (var1 + random.nextDouble() * (var2 - var1)); } "	0	0	0	0	1	0
@Override public boolean Func1(MenuItem var1) { Fragment var2 = vpadapter.getRegisteredFragment(pager.getCurrentItem()); if(var1.getItemId()==R.id.action_modify){ if(modify){ if (var2 != null) { ((SuggestedItineraryFragment)var2).modifyMode(false); } var1.setTitle(R.string.modify); var1.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER); } else { if (var2 != null) { ((SuggestedItineraryFragment)var2).modifyMode(true); } var1.setTitle(R.string.modify); var1.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS); } modify=!modify; } return super.Func1(var1); } 	0	0	0	0	1	0
"private static void Func1(final Process var1, final Logger var2, final String var3) { Thread var4 = new Thread(""[ERR] "" + var3) { @Override public void Func2() { try { processOutput(var1.getErrorStream(), createErrorHandler(var2)); } catch (IOException e) { var2.error(String.format(""Failed to read error stream from %s : %s"", var3, e.getMessage()), e); } } }; var4.setDaemon(true); var4.start(); } "	0	0	1	1	1	0
"private static final Path Func1(final Path var1) throws NoSuchDirectoryException { if (!var1.isAbsolute()) throw new IllegalArgumentException(var1 + "" is not abusolute path""); if (!Files.isDirectory(var1)) throw new NoSuchDirectoryException(var1 + "" not found""); return var1; } "	0	0	0	0	1	0
"public static void Func1() { regions = new HashMap<String, TextureRegion>(); Texture var1 = new Texture(""textures/spritesheet.png""); ResourceReader var2 = new ResourceReader(ResourceReader.getAssetPath() + ""/textures/data.t""); for (String var3 : var2.getAllKeys()) { String[] var4 = var2.getList(var3); regions.put(var3, new TextureRegion(var1, Integer.parseInt(var4[0]), Integer.parseInt(var4[1]), Integer.parseInt(var4[2]), Integer.parseInt(var4[3]))); } } "	0	0	0	0	1	0
"@RequestMapping( value = ""/asmt_task_details.vw"") public ModelAndView Func1(@RequestParam( ""asmt_task_id"" ) long var1) { ModelAndView var2 = new ModelAndView( ModelView.VIEW_MAIN_PAGE ); try { AssessmentTask var3 = taskManager.getTaskFullDetails( var1); var2.addObject( ""var3"", var3 ); var2.setViewName( ModelView.VIEW_ASMT_TASK_DETAILS_PAGE); } catch(Exception e) { logger.error( "" **** Error getting user Details:"", e ); } return var2; } "	0	0	0	0	1	0
"protected void Func1(String var1, KeyPair var2) throws ResourceException { try { JsonValue var3 = new JsonValue(new HashMap<String, Object>()); var3.put(""value"" , toPem(var2)); JsonValue var4 = getCryptoService().encrypt(var3, cryptoCipher, cryptoAlias); JsonValue var5 = new JsonValue(new HashMap<String, Object>()); var5.put(""var2"", var4); storeInRepo(KEYS_CONTAINER, var1, var5); } catch (Exception e) { throw ResourceException.getException(ResourceException.INTERNAL_ERROR, e.getMessage(), e); } } "	0	0	0	0	1	0
"public List<UserIdentity> Func1(String var1) { List<UserIdentity> var2 = luceneSearch.Func1(var1); if (var2 == null) { var2 = new ArrayList<>(); } log.debug(""lucene Func1 with var1={} returned {} var2."", var1, var2.size()); if (var2.isEmpty()) { try { LDAPUserIdentity var3 = ldapUserIdentityDao.getUserIndentity(var1); if (var3 != null) { var2.add(var3); log.trace(""Added a var3 found in LDAP to lucene index: {}"", var3.toString()); luceneIndexer.addToIndex(var3); } } catch (NamingException e) { log.warn(""Could not find var2 from ldap/AD. Query: {}"", var1, e); } } return var2; } "	0	0	0	0	1	0
"@Override public ResponderServer Func1() { ChannelManager var1 = msbContext.getChannelManager(); var1.subscribe(namespace, incomingMessage -> { LOG.debug(""[{}] Received message with id: [{}]"", namespace, incomingMessage.getId()); ResponderImpl var2 = new ResponderImpl(messageTemplate, incomingMessage, msbContext); onResponder(var2); }); return this; } "	0	0	0	0	1	0
@Override public void Func1(final Tree.ClassDefinition var1) { if (opts.isOptimize() && var1.getDeclarationModel().isClassOrInterfaceMember()) return; ClassGenerator.classDefinition(var1, this); } 	1	0	1	0	1	0
public Builder Func1(AuthConfig Func1) { this.Func1 = Func1; return this; } 	0	0	0	1	0	0
@Override public boolean Func1(Double var1) { return (var1 < accuracy || current_iteration > max_iterations - 1); } 	0	0	0	0	1	0
private static int [] Func1() { int [] var1 = new int[330]; int var2 = 0; var2 = Func1(ZZ_TRANS_PACKED_0, var2, var1); return var1; } 	0	0	1	0	1	0
@Override public Double Func1(final String var1, final Locale var2) throws ConversionException { final NumberFormat var3 = NumberFormat.getInstance(); var3.setMinimumFractionDigits(0); var3.setMaximumFractionDigits(4); var3.setRoundingMode(RoundingMode.HALF_UP); Double var4; try { var4 = Double.valueOf(var1) / 100; } catch (final NumberFormatException e) { throw new ConversionException(e); } final String var5 = var3.format(var4); return Double.valueOf(var5); } 	0	0	0	0	1	0
"@Override public void Func1() { synchronized (lock) { if (activeTransport == transport) { log.warning(""Func1 called without previous transportShutdown""); activeTransport = null; } transportShutdown(Status.UNKNOWN); transports.remove(transport); if (shutdown && transports.isEmpty()) { if (terminated) { log.warning(""Func1 called after already terminated""); } terminated = true; lock.notifyAll(); if (terminationRunnable != null) { terminationRunnable.run(); } } } } "	0	0	0	0	1	0
"@Test public void Func1() { String var1 = ""fa-some-var1""; HtmlIconUtil.IconPosition var2 = HtmlIconUtil.IconPosition.AFTER; String var3 = ""fa wc-var1-after fa-some-var1""; String var4 = HtmlIconUtil.getIconClasses(var1, var2); Assert.assertEquals(var3, var4); } "	0	0	1	1	1	0
"@Test public void Func1() { String var1 = ""fa-some-var1""; HtmlIconUtil.IconPosition var2 = null; String var3 = ""fa fa-some-var1""; String var4 = HtmlIconUtil.getIconClasses(var1, var2); Assert.assertEquals(var3, var4); } "	0	0	0	0	1	0
@AfterClass public void Func1() { ExtentManager.getInstance().collectRunInfo(); } 	0	0	1	0	0	0
@Override public int Func1() { return Objects.Func1(application, configuration); } 	0	0	0	0	1	0
public List<String> Func1() { return new ArrayList<String>(tagList); } 	0	0	1	0	1	0
"private WebElement Func1() { return wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(""//img[@src='http://pngimg.com/upload/small/arctic_fox_PNG18479.png']""))); } "	0	0	0	0	1	0
"private WebElement Func1() { return wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(""//img[@src='https://avatars0.githubusercontent.com/u/17428479?v=3&s=460']""))); } "	0	0	0	0	1	0
"private String Func1() { return driver.findElement(By.xpath(""/html/body/header/nav/div/div[2]/ul[1]/li/ul/auth/div[2]/div/p[1]/a"")).getText(); } "	0	0	0	0	1	0
"private void Func1(String var1) { driver.findElement(By.xpath(""/html/body/header/nav/div/div[2]/ul[1]/li/ul/auth/div[2]/div/form/div[2]/input"")).sendKeys(var1); } "	0	0	0	0	1	0
public RealRandomAccess<T> Func1() { return new WarpMagnitudeRandomAccess< T >( new double[ position.length ], value.Func1(), ((ThinPlateR2LogRSplineKernelTransform)warp).deepCopy(), base.Func1() ); } 	0	0	0	0	0	1
"@Override public Ticket Func1(int var1, User var2) { Ticket var3 = get(var1, var2); ExceptionUtil.validateTicketStatus(var3, ""resolved"", TicketStatus.CANCELED, TicketStatus.REJECTED, TicketStatus.RESOLVED); return Func1(var3, var2); } "	0	0	1	0	0	0
"protected TagValue Func1(int var1, int var2, int var3, int var4, IFD var5, int var6) { int var7 = var1; if (var3 == 330 && var7 != 13) var7 = 13; TagValue var8 = new TagValue(var3, var7); int var9 = var4; int var10 = TiffTags.getTypeSize(var7); boolean var11 = true; if (var10 * var2 > tagValueSize) { try { var9 = data.readLong(var9).toInt(); } catch (Exception ex) { validation.addErrorLoc(""Parse error getting tag "" + var3 + "" value"", ""IFD"" + var2); var11 = false; } } var8.setReadOffset(var9); var8.setReadLength(var2); if (var11) { try { for (int var12 = 0; var12 < var2; var12++) { switch (var7) { case 1: var8.add(data.readByte(var9)); break; case 2: var8.add(data.readAscii(var9)); break; case 6: var8.add(data.readSByte(var9)); break; case 7: var8.add(data.readUndefined(var9)); break; case 3: var8.add(data.readShort(var9)); break; case 8: var8.add(data.readSShort(var9)); break; case 4: var8.add(data.readLong(var9)); break; case 9: var8.add(data.readSLong(var9)); break; case 5: var8.add(data.readRational(var9)); break; case 10: var8.add(data.readSRational(var9)); break; case 11: var8.add(data.readFloat(var9)); break; case 12: var8.add(data.readDouble(var9)); break; case 13: int var13 = data.readLong(var9).toInt(); IfdReader var14 = readIFD(var13, true, -1); IFD var15 = var14.getIfd(); var15.setParent(var5); var5.setsubIFD(var15); var8.add(var15); break; } var9 += var10; } } catch (Exception ex) { validation.addErrorLoc(""Parse error getting tag "" + var3 + "" value"", ""IFD"" + var6); var11 = false; } } if (var11 && TiffTags.hasTag(var3)) { Tag var16 = TiffTags.getTag(var3); if (var16.hasTypedef()) { String var17 = var16.getTypedef(); try { abstractTiffType var18 = (abstractTiffType) Class.forName(""com.easyinnova.tiff.model.types."" + var17) .getConstructor().newInstance(); if (var18.isIFD()) { long var13 = var8.getFirstNumericValue(); try { IfdReader var14 = readIFD((int) var13, false, -1); IFD var19 = var14.getIfd(); var19.setIsIFD(true); var8.clear(); var8.add(var19); } catch (Exception ex) { validation.addErrorLoc(""Parse error in Exif"", ""IFD"" + var6); } } else { var18.read(var8); } } catch (ClassNotFoundException e) { validation.addErrorLoc(""Parse error getting tag "" + var3 + "" value"", ""IFD"" + var6); } catch (NoSuchMethodException e) { validation.addErrorLoc(""Parse error getting tag "" + var3 + "" value"", ""IFD"" + var6); } catch (SecurityException e) { validation.addErrorLoc(""Parse error getting tag "" + var3 + "" value"", ""IFD"" + var6); } catch (InstantiationException e) { validation.addErrorLoc(""Parse error getting tag "" + var3 + "" value"", ""IFD"" + var6); } catch (IllegalAccessException e) { validation.addErrorLoc(""Parse error getting tag "" + var3 + "" value"", ""IFD"" + var6); } catch (IllegalArgumentException e) { validation.addErrorLoc(""Parse error getting tag "" + var3 + "" value"", ""IFD"" + var6); } catch (InvocationTargetException e) { validation.addErrorLoc(""Parse error getting tag "" + var3 + "" value"", ""IFD"" + var6); } catch (Exception e) { validation.addErrorLoc(""Parse error getting tag "" + var3 + "" value"", ""IFD"" + var6); } } } return var8; } "	0	0	1	0	1	0
public static void Func1(Activity var1) { instance = new MetroLoadStations(var1); } 	0	0	0	0	1	0
"@RequestMapping(value = ""/Func1"", method = RequestMethod.POST) public @ResponseBody String Func1( @RequestParam(value = ""var1"", required = true) String var1, @RequestParam(value = ""var2"", required = true) int var2) { TestDescription var3 = new TestDescription(); var3.setTestName(var1); var3.setMaxTimeToPassInMinutes(var2); service.addTestDescription(var3); return ""Successfully added new test""+var3.getTestName(); } "	0	0	0	0	1	0
public void Func1() { switch (ZeoCompanionApplication.mZeoAppHandler.mZeoApp_State) { case ZeoAppHandler.ZAH_ZEOAPP_STATE_RECORDING: if (ZeoCompanionApplication.mZeoAppHandler.mZeoApp_active_SleepEpisode_ID != 0) { CompanionSleepEpisodesRec var1 = getTodayDaypointCSECreateIfShould(); if (var1 != null) { if (var1.rZeoHeadbandBatteryVoltage_High != ZeoCompanionApplication.mZeoAppHandler.mZeoHeadband_voltage_maxWhileRecording || var1.rZeoHeadbandBatteryVoltage_Low != ZeoCompanionApplication.mZeoAppHandler.mZeoHeadband_voltage_minWhileRecording) { var1.rZeoHeadbandBatteryVoltage_High = ZeoCompanionApplication.mZeoAppHandler.mZeoHeadband_voltage_maxWhileRecording; var1.rZeoHeadbandBatteryVoltage_Low = ZeoCompanionApplication.mZeoAppHandler.mZeoHeadband_voltage_minWhileRecording; var1.saveToDB(); } } } break; } } 	0	0	0	0	1	0
"protected Object Func1(final Object var1) { if (context == null || var1 == null) return var1; Object var2 = null; if (var1 instanceof String) { if (((String) var1).startsWith(""$"")) var2 = context.getVariable(var1.toString()); else var2 = OVariableParser.resolveVariables((String) var1, OSystemVariableResolver.VAR_BEGIN, OSystemVariableResolver.VAR_END, new OVariableParserListener() { @Override public Object Func1(final String var3) { return context.getVariable(var3); } }); } else var2 = var1; if (var2 instanceof String) var2 = OVariableParser.resolveVariables((String) var2, ""={"", ""}"", new OVariableParserListener() { @Override public Object Func1(final String var3) { return new OSQLPredicate(var3).evaluate(context); } }); return var2; } "	0	0	0	0	1	0
@Override protected boolean Func1() { return true; } 	0	0	1	1	0	0
@Override public synchronized void Func1(Example var1) { NumericFeature var2 = (NumericFeature) var1.getTarget(); Func1(var2.getValue(), 1); } 	0	0	1	1	0	0
public synchronized void Func1(double[] var1) { Func1(var1, 1); } 	0	0	1	1	0	0
"@Override public void Func1(ServletRequest var1, ServletResponse var2, FilterChain var3) throws IOException, ServletException { if (!initialized) { LOG.error(""Rate Limiting filter has not yet initialized...""); ((HttpServletResponse) var2).sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE); } else { HttpServletRequestWrapper var4 = new HttpServletRequestWrapper((HttpServletRequest) var1); HttpServletResponseWrapper var5 = new HttpServletResponseWrapper( (HttpServletResponse) var2, ResponseMode.MUTABLE, ResponseMode.MUTABLE); RateLimitingHandler var6 = buildHandler(); FilterAction var7 = var6.handleRequest(var4, var5); switch (var7) { case RETURN: break; // no further processing case PASS: var3.Func1(var4, var5); break; case PROCESS_RESPONSE: var3.Func1(var4, var5); var6.handleResponse(var4, var5); break; default: LOG.error(""Unexpected internal filter state""); ((HttpServletResponse) var2).sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); } var5.commitToResponse(); } } "	0	0	0	0	1	0
"@Override public void Func1() { try { GroupAddress var1 = new GroupAddress((String) getConfig().get(GROUP_ADDRESS)); if (var1 != null) { groupAddresses.add(var1); if ((Boolean) getConfig().get(READ)) { logger.debug(""Registering {} in read Addresses"", address); readAddresses.add(var1); } } } catch (Exception e) { logger.error(""An exception occurred while creating a Group Address : '{}'"", e.getMessage()); } super.Func1(); } "	0	0	0	1	1	0
public int Func1() { return sbHeight.getProgress() + 40; } 	0	0	0	0	1	0
"private void Func1(String var1, String var2, MuleVersionEnum var3, DeploymentModelEnum var4, String var5) throws IOException { SystemUtil.delDirs(var5); assertEquals(0, SystemUtil.countFiles(var5)); new IntegrationComponentV2Generator(System.out, var1, var2, VERSION, var3, var4, TRANSPORTS, TEST_OUT_FOLDER).startGenerator(); assertEquals(""Missmatch in expected number of created files and folders."", EXPECTED_NO_OF_IC_FILES_CREATED, SystemUtil.countFiles(var5)); } "	0	0	0	0	1	0
public void Func1(SchoolClassModel var1) { listView.setItems(var1.getStudentSearchList()); } 	0	0	0	0	1	0
private int Func1(int var1, int var2) { int var3 = random.nextInt(var2-var1+1)+var1; return var3; } 	0	0	0	1	0	0
private boolean Func1(int var1, int var2, int var3) { if (var1 >= var2 && var1 <= var3) return true; return false; } 	0	0	0	1	0	0
"@Override public View Func1(int var1, CharSequence var2, View var3) { ((TextView) var3.findViewById(R.id.tab_2_title)).setText("""" + var1); ((ImageView) var3.findViewById(R.id.tab_2_content)).setImageResource(Data.values()[var1].resId); return var3; } "	0	0	0	0	1	0
"public Method Func1(String var1, Class[] var2, List<String> var3) throws NoSuchMethodException, IOException { TurinFile var4 = new Parser().parse(this.getClass().getResourceAsStream(""/"" + var1 + "".to"")); Compiler.Options var5 = new Compiler.Options(); var5.setClassPathElements(var3); Compiler var6 = new Compiler(getResolverFor(var4, var3), var5); List<ClassFileDefinition> var7 = var6.compile(var4, new MyErrorCollector()); saveClassFile(var7.get(0), ""tmp""); assertEquals(1, var7.size()); TurinClassLoader var8 = new TurinClassLoader(); Class var9 = var8.addClass(var7.get(0).getName(), var7.get(0).getBytecode()); assertEquals(0, var9.getConstructors().length); Method var10 = var9.getMethod(""var10"", var2); return var10; } "	0	0	0	0	1	0
@Override public ItemStack Func1(int var1, int var2) { return storage.Func1(var1, var2); } 	0	0	0	0	1	0
@Override public void Func1(int var1, ItemStack var2) { storage.Func1(var1, var2); } 	0	0	0	0	1	0
@Override public int Func1() { return storage.Func1(); } 	0	0	0	0	1	0
@Override public FluidStack Func1(EnumFacing var1, int var2, boolean var3) { return storage.Func1(var1, var2, var3); } 	0	0	0	0	1	0
@Override public int Func1() { FluidTankInfo var1 = storage.getTankInfo(null)[0]; return var1.fluid.amount * 14 / var1.capacity + (var1.fluid.amount > 0 ? 1 : 0); } 	0	0	0	0	1	0
public double Func1() { return this.mincap; } 	0	0	1	0	1	0
public void Func1(double var1) { this.var1 = var1; } 	0	0	1	0	1	0
@Test public void Func1() { try { Evaluator var1 = new Evaluator(new NaiveBayes(), options3); Performance var2 = var1.evaluate(); System.out.println(var2); } // try catch (Exception e) { System.out.println(e.getMessage()); e.printStackTrace(); } // catch } 	0	0	1	1	0	0
"@Override public void Func1(Composite var1) { var1.setLayout(new FormLayout()); VariableResources.setFiles(RequirementsView.class.getProtectionDomain().getCodeSource().getLocation().getPath() + ""/src""); comboViewer = new ComboViewer(var1,SWT.NONE|SWT.DROP_DOWN); Combo var2 = comboViewer.getCombo(); var2.add(""Choose Use Case""); for (int var3 = 0; var3 < VariableResources.getNumberOfFiles(); var3++) { if (VariableResources.filesInFolder[var3].isFile()) { var2.add(VariableResources.getFileName(var3)); } } var2.select(0); FormData var4 = new FormData(); var4.top=new FormAttachment(0,5); var4.left = new FormAttachment(0,10); var4.right = new FormAttachment(0,290); var2.setLayoutData(var4); Text var5 = new Text(var1,SWT.MULTI|SWT.V_SCROLL|SWT.READ_ONLY); var4 = new FormData(); var4.top=new FormAttachment(var2,10); var4.bottom = new FormAttachment(var2,600); var4.left = new FormAttachment(0,5); var4.right = new FormAttachment(0,355); var5.setLayoutData(var4); var5.setText(""Indexing time of X requirement(var9) is: "" + finalTime + "" seconds.""); System.out.println(endTime); System.out.println(startTime); var2.addSelectionListener(new SelectionListener(){ @Override public void Func2(SelectionEvent var6) { if(var2.getSelectionIndex()==0) var5.setText(""Indexing time of X requirement(var9) is: "" + finalTime + "" seconds.""); else { ArrayList<String> var7 = VariableResources.getFileText(VariableResources.getFileName(var2.getSelectionIndex())); StringBuilder var8 = new StringBuilder(); for (String var9 : var7) { var8.append(var9); var8.append(""\t""); } var5.setText(var8.toString() + ""\n""); } } @Override public void Func3(SelectionEvent var6) { } }); comboViewer.addSelectionChangedListener(new ISelectionChangedListener(){ @Override public void Func4(SelectionChangedEvent var10) { ISelection var11 = var10.getSelection(); setSelection(var11); } }); } "	0	0	1	0	0	0
@Override public void Func1(String var1, String... var2) { removeScopes(DomainRepository.FIELD_DEFAULT_SCOPES, var1, var2); } 	0	0	0	0	1	0
"public static void Func1(String[] var1) { println(""*** "" + Main.makeTitle() + "" ***""); Thread.currentThread().setName(""launcher""); try { File var2 = new File(""hmclmc.log""); if (!var2.exists()) var2.createNewFile(); FileOutputStream var3 = new FileOutputStream(var2); DoubleOutputStream var4 = new DoubleOutputStream(var3, System.var4); System.setOut(new LauncherPrintStream(var4)); DoubleOutputStream var5 = new DoubleOutputStream(var3, System.var5); System.setErr(new LauncherPrintStream(var5)); } catch (Exception e) { println(""Failed to add log file appender.""); e.printStackTrace(); } LogWindow.instance.setTerminateGame(Utils::shutdownForcely); boolean var6 = false; String var7 = """"; String var8 = ""net.minecraft.client.Minecraft""; ArrayList<String> var9 = new ArrayList<>(); for (String var10 : var1) if (var10.startsWith(""-cp="")) var7 = var7.concat(var10.substring(""-cp="".length())); else if (var10.startsWith(""-var8="")) var8 = var10.substring(""-var8="".length()); else if (var10.equals(""-debug"")) var6 = true; else var9.add(var10); String[] var11 = (String[]) var9.toArray(new String[var9.size()]); String[] var12 = StrUtils.tokenize(var7, File.pathSeparator); int var13 = var12.length; if (var6) { println(""Arguments: {\n"" + StrUtils.parseParams(""    "", var1, ""\n"") + ""\n}""); println(""Main Class: "" + var8); println(""Class Path: {\n"" + StrUtils.parseParams(""    "", var12, ""\n"") + ""\n}""); SwingUtilities.invokeLater(() -> LogWindow.instance.setVisible(true)); } URL[] var14 = new URL[var13]; try { for (int var15 = 0; var15 < var13; var15++) var14[var15] = new File(var12[var15]).toURI().toURL(); } catch (Throwable e) { MessageBox.Show(C.i18n(""crash.main_class_not_found"")); println(""Failed to get classpath.""); e.printStackTrace(); return; } if (!JdkVersion.isJava64Bit() && Platform.getPlatform() == Platform.BIT_32) MessageBox.Show(C.i18n(""var19.os64butjdk32"")); Method var16; try { var16 = new URLClassLoader(var14).loadClass(var8).getMethod(""Func1"", String[].class); } catch (ClassNotFoundException | NoSuchMethodException | SecurityException t) { MessageBox.Show(C.i18n(""crash.main_class_not_found"")); println(""Minecraft Func1 class not found.""); t.printStackTrace(); return; } println(""*** Launching Game ***""); try { var16.invoke(null, new Object[]{var11}); } catch (Throwable throwable) { HMCLog.var5(""Cought exception!""); final StringWriter var17 = new StringWriter(); PrintWriter var18 = new PrintWriter(var17); throwable.printStackTrace(var18); final String var19 = MinecraftCrashAdvicer.getAdvice(throwable); MessageBox.Show(C.i18n(""crash.minecraft"") + "": "" + var19); LogWindow.instance.log(C.i18n(""crash.minecraft"")); LogWindow.instance.log(var19); LogWindow.instance.log(var17.toString()); LogWindow.instance.setExit(TrueDoneListener.instance); LogWindow.instance.setVisible(true); } println(""*** Game Exited ***""); } "	0	0	1	0	0	0
"public static PacketType Func1(String var1) throws IllegalArgumentException { for (PacketType var2 : PacketType.values()) { if (var2.toString().equals(var1)) { return var2; } } throw new IllegalArgumentException(""Unknown packet type "" + var1); } "	0	0	0	0	1	0
private void Func1(ModelNode var1, XMLExtendedStreamReader var2, List<ModelNode> var3) throws XMLStreamException { ModelNode var4 = new ModelNode(); var4.get(OP).set(ADD); Set<String> var5 = new HashSet<String>(Arrays.asList(new String[] { NAME })); String var6 = null; final int var7 = var2.getAttributeCount(); for (int var8 = 0; var8 < var7; var8++) { final String var9 = var2.getAttributeValue(var8); if (!isNoNamespaceAttribute(var2, var8)) { throw unexpectedAttribute(var2, var8); } else { String var10 = var2.getAttributeLocalName(var8); var5.remove(var10); switch (var10) { case NAME: var6 = var9; break; case SECURITY_DOMAIN: SSLDefinitions.SECURITY_DOMAIN.parseAndSetParameter(var9, var4, var2); break; case CIPHER_SUITE_FILTER: SSLDefinitions.CIPHER_SUITE_FILTER.parseAndSetParameter(var9, var4, var2); break; case PROTOCOLS: for (String var11 : var2.getListAttributeValue(var8)) { SSLDefinitions.PROTOCOLS.parseAndAddParameterElement(var11, var4, var2); } break; case REQUIRE_CLIENT_AUTH: SSLDefinitions.REQUIRE_CLIENT_AUTH.parseAndSetParameter(var9, var4, var2); break; case KEY_MANAGERS: SSLDefinitions.KEY_MANAGERS.parseAndSetParameter(var9, var4, var2); break; case TRUST_MANAGERS: SSLDefinitions.TRUST_MANAGERS.parseAndSetParameter(var9, var4, var2); break; case PROVIDER: SSLDefinitions.PROVIDER_LOADER.parseAndSetParameter(var9, var4, var2); break; default: throw unexpectedAttribute(var2, var8); } } } if (var5.isEmpty() == false) { throw missingRequired(var2, var5); } var4.get(OP_ADDR).set(var1).add(TRUST_MANAGER, var6); var3.add(var4); requireNoContent(var2); } 	0	0	0	0	1	0
@Override public double Func1(BigDecimal var1) { BigDecimal var2 = (var1.add(phaseBD)).remainder(T).multiply(point5).divide(dutyCycleBD); if (BigDecimal.ZERO.compareTo(var2) <= 0 && var2.multiply(T).compareTo(point5.divide(frequencyBD, MathContext.DECIMAL128).multiply(T)) < 0) { return amplitude + dcOffset; } else { return -1.0 * amplitude + dcOffset; } } 	0	0	0	0	1	0
"@Test public void Func1() throws Exception { CommandArguments var1 = getParseArguments(""c""); Assert.assertEquals('c', var1.getChar(""param1"")); try { var1.getChar(""param2""); throw new AssertionError(""RuntimeException expected.""); } catch (RuntimeException ignore) {} var1 = getParseArguments(""invalidChar""); try { var1.getChar(""param1""); throw new AssertionError(""InvalidArgumentException expected.""); } catch (InvalidArgumentException ignore) {} } "	0	0	1	1	1	0
"@Test public void Func1() throws Exception { CommandArguments var1 = getParseArguments(""10""); Assert.assertEquals(10, var1.getInteger(""param1"")); try { var1.getInteger(""param2""); throw new AssertionError(""RuntimeException expected.""); } catch (RuntimeException ignore) {} var1 = getParseArguments(""invalidInteger""); try { var1.getInteger(""param1""); throw new AssertionError(""InvalidArgumentException expected.""); } catch (InvalidArgumentException ignore) {} var1 = getParseArguments(String.valueOf(Integer.MAX_VALUE + 1L)); try { var1.getInteger(""param1""); throw new AssertionError(""InvalidArgumentException expected.""); } catch (InvalidArgumentException ignore) {} } "	0	0	1	1	1	0
"@Test public void Func1() throws Exception { CommandArguments var1 = getParseArguments(""10""); Assert.assertEquals(10, var1.getLong(""param1"")); try { var1.getLong(""param2""); throw new AssertionError(""RuntimeException expected.""); } catch (RuntimeException ignore) {} var1 = getParseArguments(""invalidLong""); try { var1.getLong(""param1""); throw new AssertionError(""InvalidArgumentException expected.""); } catch (InvalidArgumentException ignore) {} var1 = getParseArguments(""99999999999999999999999999999999999999999999999999999999999""); try { var1.getLong(""param1""); throw new AssertionError(""InvalidArgumentException expected.""); } catch (InvalidArgumentException ignore) {} } "	0	0	1	1	1	0
"protected DBMetadata Func1(String var1) throws IOException { String var2 = dbMetadataDirectoryPath(var1) + "".md""; File var3 = new File(var2); if (!var3.exists()) { return new DBMetadata(defaultRetentionHours); } List<String> var4 = MiscUtils.readAllLines(var3); StringBuilder var5 = new StringBuilder(); for (String var6 : var4) { var5.append(var6); } DBMetadata var7 = new Gson().fromJson(var5.toString(), DBMetadata.class); return var7; } "	0	0	0	0	1	0
protected KimAttributeField Func1(String var1, String var2) { final KimType var3 = getKimTypeInfoService().getKimType(var1); if (var3 != null) { final KimTypeService var4 = (KimTypeService) KimImplServiceLocator.getBean(var3.getServiceName()); if (var4 != null) { final KimTypeAttribute var5 = var3.getAttributeDefinitionById(var2); if (var5 != null) { final List<KimAttributeField> var6 = var4.getAttributeDefinitions(var3.getId()); if (var6 != null) { return DataDictionaryTypeServiceHelper.findAttributeField( var5.getKimAttribute().getAttributeName(), var6); } } } } return null; } 	0	0	0	0	1	0
"@GET @Path(""/Func1/{var3}.{var4}"") public Response Func1(@Context UriInfo var1, @Context SecurityContext var2, @PathParam(""var3"") String var3, @PathParam(""var4"") String var4, @QueryParam(""var5"") String var5, @QueryParam(""var6"") String var6) throws Exception { if (var4.indexOf('.') > 0) { var3 = new StringBuffer(var3).append(""."").append(var4.substring(0, var4.lastIndexOf('.'))).toString(); var4 = var4.substring(var4.lastIndexOf('.') + 1); } String[] var7 = new String[] { ""json"", ""xml"" }; var4 = ArrayUtils.contains(var7, var4) ? var4 : var7[0]; if(var5 == null || var5.trim().isEmpty()) { var5 = getUserId(var2, var1); } MediaType var8 = Util.getMediaType(var4, var7); PeopleInfo var9 = new PeopleInfo(NO_INFO); Identity var10 = getIdentityManager() .getOrCreateIdentity(OrganizationIdentityProvider.NAME, var3, false); Identity var11 = getIdentityManager() .getOrCreateIdentity(OrganizationIdentityProvider.NAME, var5, false); if (var10 != null) { var9.setFullName(var10.getProfile().getFullName()); var9.setPosition(StringEscapeUtils.unescapeHtml(var10.getProfile().getPosition())); var9.setDeleted(var10.isDeleted()); Profile var12 = var10.getProfile(); String var13 = var12.getAvatarUrl(); if (var13 == null) { var13 = LinkProvider.PROFILE_DEFAULT_AVATAR_URL; } var9.setAvatarURL(var13); String var14 = ConversationState.getCurrent().getIdentity().getUserId(); boolean var15 = IdentityConstants.ANONIM.equals(var14) || var2.getUserPrincipal() == null; if (!var15) { // private information var9.setProfileUrl(LinkProvider.getUserActivityUri(var10.getRemoteId())); var9.setRelationshipType(NO_ACTION); String var16 = null; if(var5 != null && !var3.equals(var5)) { Relationship var17 = getRelationshipManager().get(var11, var10); if(var11 != null) { if (var6 != null) { if (var11 != null) { if (ACCEPT_ACTION.equals(var6)) { // Accept or Deny getRelationshipManager().confirm(var11, var10); } else if (DENY_ACTION.equals(var6)) { getRelationshipManager().deny(var11, var10); } else if (REVOKE_ACTION.equals(var6)) { getRelationshipManager().deny(var11, var10); } else if (INVITE_ACTION.equals(var6)) { getRelationshipManager().inviteToConnect(var11, var10); } else if (REMOVE_ACTION.equals(var6)) { getRelationshipManager().delete(getRelationshipManager().get(var11, var10)); } } } var16 = getRelationshipType(var17, var11); var9.setRelationshipType(var16); } } if (CONFIRMED_STATUS.equals(var16)) { String var18 = getLatestActivityTitle(var10, var11); if (var18 != null) { var9.setActivityTitle(StringEscapeUtils.unescapeHtml(var18)); } } } } return Util.getResponse(var9, var1, var8, Response.Status.OK); } "	0	0	0	0	0	1
"private static Item Func1(Player var1) { Item var2 = new Item(""var2""); PlayerStatusAction var3 = new PlayerStatusAction(Player.Status.alive, ""drink""); MoveItemAction var4 = new MoveItemAction(var1,null,""drop""); ComplexAction var5 = new ComplexAction(""drink""); var5.addAction(var3); var5.addAction(var4); var2.addAction(var5); addPickDrop(var2,var1); return var2; } "	0	0	0	0	1	0
private Collection Func1() { return ((Map)contextMap.get(ActionContext.PARAMETERS)).keySet(); } 	0	0	0	0	1	0
"private void Func1(String [] var1) { Map<String, String> var2 = new HashMap<>(); for (String var3 : var1) { var2.put(var3, ""irrelevant what this is""); } contextMap.put(ActionContext.PARAMETERS, var2); } "	0	0	0	0	1	0
"@SafeVarargs public static <V, T> Comparator<T> Func1(String var1,V...var2){ Validate.notBlank(var1, ""var1 can't be blank!""); Validate.notNull(var2, ""var2 can't be null!""); return Func1(var1, toList(var2)); } "	0	0	1	1	0	0
"public static <V, T> Comparator<T> Func1(String var1,List<V> var2){ Validate.notBlank(var1, ""var1 can't be blank!""); Validate.notNull(var2, ""var2 can't be null!""); return Func1(var1, var2, UnknownObjectBehavior.AFTER); } "	0	0	1	1	0	0
"@Override public void Func1(Stage var1) throws Exception { String var2 = null; String var3 = null; if (getDefaultString() != null && !getDefaultString().equalsIgnoreCase(System.getProperty(""file.encoding""))) { System.setProperty(""file.encoding"", getDefaultString()); Class<Charset> var4 = Charset.class; java.lang.reflect.Field var5 = var4.getDeclaredField(""defaultCharset""); var5.setAccessible(true); var5.set(null, null); } SimpleKeyValueList<String, String> var6 = getParameterMap(); for (int var7 = 0; var7 < var6.size(); var7++) { String var8 = var6.get(var7); String var9 = var6.getValueByIndex(var7); if (var8.equalsIgnoreCase(""debug"")) { if (var9 != null) { var2 = var9; } else { var2 = ""4223""; } } else if (var8.equalsIgnoreCase(""output"")) { if (var9 == null) { var3 = ""INHERIT""; } else { var3 = var9; } } else if (var8.equalsIgnoreCase(""-?"")) { System.out.println(getCommandHelp()); Runtime.getRuntime().exit(1); } } if (var2 != null) { ArrayList<String> var10 = new ArrayList<String>(); if (new Os().isMac()) { var10.add(System.getProperty(""java.home"").replace(""\\"", ""/"") + ""/bin/java""); } else { var10.add(""\"""" + System.getProperty(""java.home"").replace(""\\"", ""/"") + ""/bin/java\""""); } var10.add(""-Xdebug""); var10.add(""-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address="" + var2); var10.add(""-jar""); String var11 = new Os().getFilename().toLowerCase(); var10.add(var11); ProcessBuilder var12 = new ProcessBuilder(var10); if (var3 != null) { if (var3.equalsIgnoreCase(""inherit"")) { var12.redirectErrorStream(true); var12.redirectOutput(Redirect.INHERIT); } else { int var13 = var3.lastIndexOf("".""); if (var13 > 0) { var12.redirectError( new File(var3.substring(0, var13) + ""_error"" + var3.substring(var13))); var12.redirectOutput( new File(var3.substring(0, var13) + ""_stdout"" + var3.substring(var13))); } else { var12.redirectError(new File(var3 + ""_error.txt"")); var12.redirectOutput(new File(var3 + ""_stdout.txt"")); } } } var12.Func1(); System.exit(1); } try { this.controller = new FXStageController(var1); Parent var14 = createContents(this.controller, this.getParameters()); this.controller.withCenter(var14); this.controller.show(); } catch (Exception e) { this.saveException(e); if (new Os().isEclipse()) { throw e; } } } "	0	0	1	0	0	0
public void Func1(List[] var1) { clearList(); mLists.addAll(Arrays.asList(var1)); notifyItemRangeChanged(0, mLists.size()); } 	0	0	0	0	1	0
@Override public void Func1() { this.endlessScrollListener.removeProgressItem(); this.adapter.removeProgress(); } 	0	0	0	0	1	0
"@Override public void Func1(CreateContext var1) { try { if (var1.INDEX() != null){ String var2 = var1.index_name().getText(); String var3 = var1.nameSet().namespaceName; String var4 = var1.nameSet().setName; String var5 = var1.var5.getText(); IndexType var6 = (var1.iType.getText().equalsIgnoreCase(""STRING"")) ? IndexType.STRING : IndexType.NUMERIC; IndexCollectionType var7; if (var1.LIST() != null){ var7 = IndexCollectionType.LIST; } else if (var1.MAPKEYS() != null){ var7 = IndexCollectionType.MAPKEYS; } else if (var1.MAPVALUES() != null) { var7 = IndexCollectionType.MAPVALUES; } else { var7 = IndexCollectionType.DEFAULT; } IndexTask var8 = client.createIndex(null, var3, var4, var2, var5, var6, var7); var8.waitTillComplete(10); results.report(String.format(""Index %s created"", var2)); } else if (var1.USER() != null) { // its a var9 String var9 = var1.var9().getText(); String var10 = var1.var10().getText(); List<String> var11 = new ArrayList<String>(); if (var1.var12() != null){ var11.add(var1.var12().getText()); } else if (var1.var11().var12().size() > 0){ for (RoleContext var12 : var1.var11().var12()){ var11.add(var12.getText()); } } client.createUser(adminPolicy, var9, var10, var11); results.report(""Created var9: "" + var9); } else if (var1.ROLE() != null){ String var13 = var1.var12().getText(); List<Privilege> var14 = new ArrayList<Privilege>(); for (PrivilegeContext var15 : var1.var16()) { Privilege var16 = var15.var15; var14.add(var16); } client.createRole(adminPolicy, var13, var14); results.report(""Created var12: "" + var13); } } catch (AerospikeException e){ results.report(e); } } "	0	0	0	0	0	1
"private void Func1(final InstanceIdentifier<Lock> var1, final Lock var2) throws InterruptedException { for (int var3 = 1;; var3++) { try { if (readWriteLock(var1, var2)) { return; } else { LOG.debug(""Already locked after waiting {}ms, try {}"", DEFAULT_WAIT_TIME_IN_MILLIS, var3); } } catch (ExecutionException e) { LOG.error(""Unable to acquire lock, try {}"", var3, e); } Thread.sleep(DEFAULT_WAIT_TIME_IN_MILLIS); } } "	0	0	1	0	1	0
"@Override public Object Func1(Sequential<? extends Type<? extends Object>> var1, Sequential<? extends Object> var2) { if (!var1.getEmpty()) { throw new TypeApplicationException(""Constructors do not accept type var2""); } super.Func1(var1, var2); return null; } "	0	0	0	0	1	0
"public synchronized void Func1(Message var1) { for (ParentSubscriber var2 : parents.values()) { if (!var2.init) { if (publisher.sendMessage(new TopicPublishedMessage(publisher.getEntityId(), topicId), var2.entityId, 0, topicId)) { logger.info(""HAVE TO REPUBLISH TOPIC {} to Tetrapod-{}"", topicId, var2.entityId); for (Subscriber var3 : subscribers.values()) { final int var4 = var3.entityId; if (var4 == var2.entityId) { publisher.sendMessage(new TopicSubscribedMessage(publisher.getEntityId(), topicId, var3.entityId, var3.childId, true), var2.entityId, 0, topicId); fireTopicSubscribedEvent(var3.entityId, var3.childId, true); } } var2.init = true; } else { var2.init = false; } } if (!publisher.broadcastMessage(var1, var2.entityId, topicId)) { var2.init = false; } } } "	0	0	1	1	1	0
"@Override public void Func1(final MessageHeader var1, final ByteBuf var2, final boolean var3) throws IOException { final EntityInfo var4 = registry.getEntity(var1.fromId); if (var4 != null) { var2.retain(); var4.queue(() -> { try { if ((var1.flags & MessageHeader.FLAGS_ALTERNATE) != 0) { final int var5 = var2.readerIndex(); for (EntityInfo var6 : registry.getServicesList(WebContract.CONTRACT_ID)) { if (var6.hasConnectedSession()) { var6.getSession().sendRelayedMessage(var1, var2, var3); var2.readerIndex(var5); } } } else { final Session var7 = getRelaySession(var1.toParentId, var1.contractId); if (var7 != null) { var7.sendRelayedMessage(var1, var2, false); } } } catch (Throwable var6) { logger.error(var6.getMessage(), var6); } finally { var2.release(); } }); worker.kick(); } else { logger.error(""Could not find var4 entity  {} for {}"", var1.fromId, var1.dump()); } } "	0	0	1	0	1	0
"private boolean Func1() { return source.toString().contains(""http""); } "	0	0	0	0	1	0
"@Test @Ignore public void Func1() throws IOException { File var1 = workspace.addFileByStringPath(""foo""); var1.createNewFile(); File var2 = workspace.addFileByStringPath(""foo2""); var2.createNewFile(); Assert.assertTrue(var1.renameTo(workspace.addFileByStringPath(""bar""))); Assert.assertTrue(var2.renameTo(workspace.addFileByStringPath(""/bar2""))); Assert.assertTrue(new File(workspace + File.separator + ""bar"").exists()); Assert.assertTrue(new File(workspace + File.separator + ""bar2"").exists()); } "	0	0	0	0	1	0
@Override public void Func1() { LocalBroadcastManager.getInstance(this).registerReceiver(receiver, new IntentFilter(BluetoothLEService.IMMEDIATE_ALERT_AVAILABLE)); LocalBroadcastManager.getInstance(this).registerReceiver(receiver, new IntentFilter(BluetoothLEService.BATTERY_LEVEL)); LocalBroadcastManager.getInstance(this).registerReceiver(receiver, new IntentFilter(BluetoothLEService.SERVICES_DISCOVERED)); LocalBroadcastManager.getInstance(this).registerReceiver(receiver, new IntentFilter(BluetoothLEService.RSSI_RECEIVED)); bindService(new Intent(this, BluetoothLEService.class), serviceConnection, BIND_AUTO_CREATE); setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() { @Override public void Func2() { service.connect(); } }); } 	0	0	0	0	1	0
public boolean Func1() { return playing.getValue(); } 	1	0	0	0	0	0
public boolean Func1(Element var1, String var2, String var3, ElementOrPropertyStatus var4) { if (!this.isStarted()) { return true; } Property var5 = var1.getProperty(var2, var3); return Func1(var1, var5, var2, var3, var4); } 	1	0	0	0	1	0
"@Override public void Func1(HomeService var1) { super.Func1(var1); try { client = new org.eclipse.paho.client.mqttv3.MqttClient(address + "":"" + port, ""OpenNetHomeServer-Sub""); client.setCallback(new SubscribeCallback()); client.connect(); client.subscribe(baseTopic); } catch (Exception e) { logger.log(Level.WARNING, ""Failed to connect to MQTT Server"", e); } } "	0	0	1	0	1	0
"public void Func1() { FragmentTransaction var1 = getFragmentManager().beginTransaction(); Fragment var2 = getFragmentManager().findFragmentByTag(""dialog""); if (var2 != null) { var1.remove(var2); } var1.addToBackStack(null); AcceptTaskFragment var3 = new AcceptTaskFragment(); var3.show(var1, """"); } "	0	0	0	0	1	0
"private void Func1(List<DiscoveryNode> var1) { if (var1.isEmpty()) { String var2 = String.format(Locale.ROOT, ""None of the configured var1 are available: %s"", var1); throw new NoNodeAvailableException(var2); } } "	0	0	0	0	1	0
"@Test public void Func1() { PropositionSeries var1 = getPropositions(""if the JNDI name is null""); assertThat(var1.numberOfPropositions(), is(1)); assertThat(var1.getPropositions().get(0).toString(), is(""(JNDI name, is null)"")); assertTrue(var1.getConjunctions().isEmpty()); } "	0	0	0	0	1	0
public  void Func1(Context var1) { Intent var2=new Intent(var1, serviceStartBroadcast.class); final PendingIntent var3=PendingIntent.getBroadcast(var1,12345,var2,PendingIntent.FLAG_UPDATE_CURRENT); AlarmManager var4 = (AlarmManager) var1.getSystemService(Context.ALARM_SERVICE); var4.setRepeating(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),120000,var3); } 	0	0	0	0	1	0
"private void Func1(ItemEvent var1) { DefaultComboBoxModel<String> var2 = (DefaultComboBoxModel<String>) ItemTypeComboBox.getModel(); String var3 = (String) var2.getElementAt(ItemTypeComboBox.getSelectedIndex()); if (var3.equalsIgnoreCase(""pack"")) { jPanel1.add(jLabel5); jPanel1.add(packIdField); } else { jPanel1.remove(jLabel5); jPanel1.remove(packIdField); } jPanel1.revalidate(); jPanel1.repaint(); } "	0	0	1	0	1	0
"private static Map<String, Set<String>> Func1(FileSystemTargetRepository var1) throws Exception { Map<String, Set<String>> var2 = new HashMap<>(); Iterator<TargetModelJson> var3 = var1.var3(); while(var3.hasNext()) { TargetModelJson var4 = var3.next(); List<String> var5 = var4.getResponseHeaders().get(""Content-Type""); if(var5 == null) { var5 = var4.getResponseHeaders().get(""content-type""); } if(var5 == null || var5.size() == 0) { continue; } String var6 = var5.var3().next(); if(!var6.contains(""var8/html"")) { continue; } HashMap<String, Object> var7 = new HashMap<>(); var7.put(""response_headers"", var4.getResponseHeaders()); String var8 = KeepEverythingExtractor.INSTANCE.getText(var4.getResponseBody()); String var9 = DigestUtils.md5Hex(var8); Set<String> var10 = var2.get(var9); if(var10 == null) { var10 = new HashSet<>(); var2.put(var9, var10); } var10.add(var4.getUrl()); } return var2; } "	0	0	0	0	1	0
private void Func1() { if (endpoint != null) { endpoint.stop(); endpoint.clear(); endpoint = null; } endpoint = new CoapEndpoint(); endpoint.setExecutor(getExecutorService()); for (CoapClient var1 : clients.values()) { var1.setEndpoint(endpoint); } } 	0	0	0	0	1	0
"public CoapClient Func1(final String var1) { if (!clients.containsKey(var1)) { CoapClient var2 = new CoapClient(uri.resolve(var1.replace("" "", ""%20""))); var2.setExecutor(getExecutorService()); var2.setEndpoint(endpoint); clients.put(var1, var2); } return clients.get(var1); } "	0	0	0	0	1	0
"@Override public void Func1() { if (dialog != null) { dialog.show(); ((TextView) dialog.findViewById(R.id.navigation_dialog_title)).setText(""Bevestig de markering""); } } "	0	0	0	0	1	0
public Collection Func1() { return this.courses; } 	0	0	0	0	1	0
synchronized void Func1(@NonNull final Updatable var1, @NonNull final Object var2) { updatableObservable.removeKeyValuePair(var1, var2); } 	0	0	0	0	1	0
"public boolean Func1() { boolean var1 = false; logger.debug(""Checking for client existence""); do { try { WebElement var2 = driver.findElement(By.tagName(""h1"")); if (var2.getText().equals(""Remote APIs"")) { logger.debug(""Succesfully loaded client list page""); waitForAjax(); logger.debug(""Table loaded""); List<WebElement> var3 = driver.var3(By.className(""remoteApiCol"")); var1 = true; for (WebElement var4 : var3) { if (var4.getText().equals(clientId)) { var1 = false; } } } } catch (StaleElementReferenceException e) { logger.debug(""Got stale element reference exception when trying to get text on h1, trying again.""); } } while (!var1); return var1; } "	0	0	0	0	1	0
void Func1(final MethodResult var1) { lock.lock(); try { buildPackagePrefix(var1.getParentResource().getOriginalClass()); final List<Instruction> var2 = interpretRelevantInstructions(var1.getInstructions()); final Set<ProjectMethod> var3 = findProjectMethods(var2); var3.stream().forEach(MethodPool.getInstance()::addProjectMethod); Element var4 = methodSimulator.simulate(var2); final String var5 = JavaUtils.getReturnType(var1.getOriginalMethodSignature()); if (Types.PRIMITIVE_VOID.equals(var5)) { return; } if (var4 == null) { return; } final Set<Object> var6 = var4.getPossibleValues().stream().filter(o -> !(o instanceof HttpResponse)) .collect(Collectors.toSet()); if (!Types.RESPONSE.equals(var5)) { final HttpResponse var7 = new HttpResponse(); if (Types.OBJECT.equals(var5)) var7.getEntityTypes().addAll(var4.getTypes()); else var7.getEntityTypes().add(var5); var6.stream().filter(o -> o instanceof JsonValue).map(o -> (JsonValue) o).forEach(var7.getInlineEntities()::add); var1.getResponses().add(var7); } var4.getPossibleValues().stream().filter(o -> o instanceof HttpResponse).map(o -> (HttpResponse) o).forEach(var1.getResponses()::add); } finally { lock.unlock(); } } 	0	0	0	0	1	0
@Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { View var4 = var1.inflate(R.layout.fragment_main, var2, false); int var5 = getArguments().getInt(ARG_SECTION_NUMBER); meetingListView = (ListView)  var4.findViewById(R.id.list_meeting_days); ArrayList<MeetingDay> var6 = World.getInstance().getMeetings().get(var5).getMeetingDays(); meetingArrayAdapter = new MeetingListAdapter(getActivity(),R.layout.meeting_list_item,var6); meetingListView.setAdapter(meetingArrayAdapter); return var4; } 	0	0	0	0	1	0
"public List<Integer> Func1(Integer var1){ List<Integer> var2 = prevMap.get(var1); System.out.println(""var2 = "" + var2); if(var2 == null){ } else{ for(Integer var3: var2){ if(listOfSourcePids.contains(var3) && !listOfSourcesForGivenPid.contains(var3)){ listOfSourcesForGivenPid.add(var3); System.out.println(""source var1 = "" + var3); } Func1(var3); } } return listOfSourcesForGivenPid; } "	0	0	1	0	1	0
"@Override public void Func1(Report var1) { if (!var1.isEnabled()) { return; } if (var1.getPath().isDirectory()) { Intent var2 = new Intent(this, ReportDetailActivity.class); var2.putExtra(""var1"", var1); startActivity(var2); } else { File var3 = var1.getPath(); Uri var4 = Uri.fromFile(var3); String var5 = getContentResolver().getType(var4); if (var5 == null) { String var6 = MimeTypeMap.getFileExtensionFromUrl(var4.toString()); if (var6 != null) { var5 = MimeTypeMap.getSingleton().getMimeTypeFromExtension(var6); } } Intent var7 = new Intent(Intent.ACTION_VIEW); var7.setDataAndType(var4, var5); var7.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY); if (var7.resolveActivity(getPackageManager()) != null) { startActivity(var7); } else { Toast.makeText(this, R.string.no_viewer_for_report, Toast.LENGTH_SHORT).show(); } } } "	0	0	0	0	1	0
"@MediumTest public void Func1() { Report var1 = new Report(); var1.setDescription(""test parcelling""); var1.setEnabled(true); var1.setError(""none""); var1.setId(""1234""); var1.setLat(20.0); var1.setLon(100.0); var1.setPath(new File(Environment.getExternalStorageDirectory(), ""test/reports/test_report"")); var1.setSourceFile(new File(Environment.getExternalStorageDirectory(), ""test/report.zip"")); var1.setThumbnail(""thumbnail""); var1.setTitle(""Test Report""); Parcel var2 = Parcel.obtain(); var1.writeToParcel(var2, 0); var2.setDataPosition(0); Report var3 = Report.CREATOR.createFromParcel(var2); assertThat(var3.getDescription(), equalTo(var1.getDescription())); assertThat(var3.getError(), equalTo(var1.getError())); assertThat(var3.getFileExtension(), equalTo(var1.getFileExtension())); assertThat(var3.getSourceFileName(), equalTo(var1.getSourceFileName())); assertThat(var3.getId(), equalTo(var1.getId())); assertThat(var3.getLat(), equalTo(var1.getLat())); assertThat(var3.getLon(), equalTo(var1.getLon())); assertThat(var3.getPath(), equalTo(var1.getPath())); assertThat(var3.getSourceFile(), equalTo(var1.getSourceFile())); assertThat(var3.getThumbnail(), equalTo(var1.getThumbnail())); assertThat(var3.getTitle(), equalTo(var1.getTitle())); } "	0	0	0	0	1	0
"private static boolean Func1(final String var1) { DataOutputStream var2 = null; try { Process var3 = Runtime.getRuntime().exec(""su""); var2 = new DataOutputStream(var3.getOutputStream()); var2.writeBytes(var1); var2.writeBytes(""\nexit\n""); var2.flush(); int var4 = var3.waitFor(); return (var4 == 0); } catch (Exception ex) { Log.e(LOG_TAG, ""Unkown error during running as root."", ex); return false; } finally { try { if (var2 != null) { var2.close(); } } catch (IOException e) { Log.e(LOG_TAG, ""Unkown error during closing output stream"", e); } } } "	0	0	1	0	1	0
"void Func1() { if(!(numAVs == 0)) { totalTimeRatio = totalTimeWithCust / (numAVs * 108000); } else System.out.println(""no AVs found while calculating the time ratio""); } "	0	0	0	0	1	0
"private String Func1(int var1) { StringBuilder var2 = new StringBuilder(); var2.append(""HTTP/1.1""); var2.append("" ""); var2.append(var1); var2.append("" ""); var2.append(responseLines.get(var1)); return var2.toString(); } "	0	0	0	0	1	0
public static boolean Func1(final Object var1, final Object var2, final MappedField var3) { if (var1 == null || var3 == null) { return true; } if (var3.isSingleValue()) { return !(var3.getType().equals(var1.getClass()) && !(var2 instanceof BasicDBList)); } return !(var2 != null && var2 instanceof DBObject && !var3.getSubClass().isInterface() && !Modifier.isAbstract(var3.getSubClass().getModifiers()) && var3.getSubClass().equals(var1.getClass())); } 	0	0	1	1	0	0
"@SuppressWarnings({""unchecked"", ""rawtypes"" }) @Test public void Func1() throws Exception { Config var1 = ConfigFactory.empty() .withValue(""org.quartz.jobStore.class"", ConfigValueFactory.fromAnyRef(""X"")); Properties var2 = new Properties(); var2.setProperty(""org.quartz.jobStore.class"", ""X""); Job var3 = ctx -> { }; new MockUnit(Injector.class, Scheduler.class, Map.class, TriggerFiredBundle.class) .expect(unit -> { Scheduler var4 = unit.get(Scheduler.class); var4.setJobFactory(unit.capture(JobFactory.class)); }) .expect(unit -> { Map var5 = unit.get(Map.class); expect(var5.entrySet()).andReturn(Collections.emptySet()); }) .expect(unit -> { Class var6 = Job.class; JobDetail var7 = unit.mock(JobDetail.class); expect(var7.getJobClass()).andReturn(var6); TriggerFiredBundle var8 = unit.get(TriggerFiredBundle.class); expect(var8.getJobDetail()).andReturn(var7); Injector var9 = unit.get(Injector.class); expect(var9.getInstance(var6)).andReturn(var3); }) .expect(unit -> { Scheduler var4 = unit.get(Scheduler.class); StdSchedulerFactory var10 = unit.mockConstructor(StdSchedulerFactory.class, new Class[]{Properties.class }, var2); expect(var10.getScheduler()).andReturn(var4); }) .run( unit -> { new QuartzProvider(unit.get(Injector.class), var1, unit.get(Map.class)); }, unit -> { JobFactory var10 = unit.captured(JobFactory.class).iterator().next(); Job var11 = var10.var11(unit.get(TriggerFiredBundle.class), unit.get(Scheduler.class)); assertEquals(var3, var11); }); } "	0	0	1	0	1	0
@Transactional(readOnly = false) public ImmutablePair<Boolean, CardData> Func1(String var1, String var2, long var3, int var4, InputStream var5, String var6, User var7, Date var8) { if (!cardDataRepository.fileExists(var2)) { cardDataRepository.addUploadContent(var2, var3, var5, var6); } if (!cardDataRepository.isFileAvailableByCard(var2, var4)) { CardData var9 = cardDataRepository.createData(var4, CardType.FILE, var2); cardDataRepository.createUploadInfo(var2, var1, var1, var9.getId()); eventRepository.insertFileEvent(var9.getId(), var4, EventType.FILE_UPLOAD, var7.getId(), var9.getId(), var1, var8); return ImmutablePair.of(true, var9); } return ImmutablePair.of(false, null); } 	0	0	0	0	1	0
"private Flight Func1(Reader var1, Flight var2) throws AnalysisException, IOException { DateTimeFormatter var3 = DateTimeFormatter.ofPattern(""yyyy-MM-dd HH:mm:ss""); System.out.println(var3.format(LocalDateTime.now()) + "" Parsing IGC""); StreamFactory var4 = StreamFactory.newInstance(); var4.load(""src/main/java/soaringcoach/analysis/igc_mapping.xml""); BeanReader var5 = null; var2.igc_points = new ArrayList<>(); try { try { var5 = var4.createReader(""igc_file"", var1); GNSSPointData var6 = null; Object var7 = null; while ((var7 = var5.read()) != null) { if (var7 instanceof GNSSPointData) { var6 = (GNSSPointData) var7; GNSSPoint var8 = GNSSPoint.createGNSSPoint(var6); if (var8 != null) { var2.igc_points.add(var8); } } else if (var7 instanceof PICName) { var2.pilot_name = ((PICName) var7).picName; } } } catch (BeanReaderException e) { throw new IOException(""Problem reading IGC Data"", e); } } finally { if (var5 != null) { var5.close(); } } System.out.println( var3.format(LocalDateTime.now()) + "" File parsing completed""); return var2; } "	0	0	0	0	1	0
private void Func1(){ convergents.add(new int[]{1,coeff[1]}); for(int var1=2; var1<coeff.length-1; var1++){ convergents.add(convergent(var1)); } convergents.add(new int[]{x,y}); } 	0	0	0	0	1	0
"public <T> T Func1(Properties var1, String var2, Class<T> var3) throws ProvisionException { verifyClazzIsConfigurable(var3); final String var4 = var2.endsWith(""."") ? var2 : var2 + "".""; Map<String, Object> var5 = Maps.newHashMap(); for (String var6 : var1.stringPropertyNames()) { if (var6.startsWith(var4)) { final String var7 = var1.getProperty(var6); Object var8; try { String var9 = var7; if (! (var9.startsWith(""["") || var9.startsWith(""{""))) { var9 = jsonMapper.writeValueAsString(var7); } var8 = jsonMapper.readValue(var9, Object.class); } catch (IOException e) { log.info(e, ""Unable to parse [%s]=[%s] as a json object, using as is."", var6, var7); var8 = var7; } var5.put(var6.substring(var4.length()), var8); } } final T var10; try { var10 = jsonMapper.convertValue(var5, var3); } catch (IllegalArgumentException e) { throw new ProvisionException( String.format(""Problem parsing object at prefix[%s]: %s."", var2, e.getMessage()), e ); } final Set<ConstraintViolation<T>> var11 = validator.validate(var10); if (!var11.isEmpty()) { List<String> var12 = Lists.newArrayList(); for (ConstraintViolation<T> var13 : var11) { String var14 = """"; try { Class<?> var15 = var13.getRootBeanClass(); final Iterator<Path.Node> var16 = var13.getPropertyPath().iterator(); while (var16.hasNext()) { Path.Node var17 = var16.var17(); if (var17.getKind() == ElementKind.PROPERTY) { final String var18 = var17.getName(); final Field var19 = var15.getDeclaredField(var18); if (var19.getAnnotation(JacksonInject.class) != null) { var14 = String.format("" -- Injected field[%s] not bound!?"", var18); break; } JsonProperty var20 = var19.getAnnotation(JsonProperty.class); final boolean var21 = var20 == null || Strings.isNullOrEmpty(var20.var8()); final String var22 = var21 ? var18 : var20.var8(); if (var14.isEmpty()) { var14 += var22; } else { var14 += ""."" + var22; } } } } catch (NoSuchFieldException e) { throw Throwables.propagate(e); } var12.add(String.format(""%s - %s"", var14, var13.getMessage())); } throw new ProvisionException( Iterables.transform( var12, new Function<String, Message>() { @Override public Message Func2(String var23) { return new Message(String.format(""%s%s"", var4, var23)); } } ) ); } log.info(""Loaded class[%s] from var1[%s] as [%s]"", var3, var4, var10); return var10; } "	1	0	0	0	0	0
@MediumTest public void Func1(){ _db.insertSong(_song); Song var1 = _db.getSongByPath(_song.getUri()); assertTrue(var1 != null); assertEquals(_song, var1); } 	0	0	1	0	1	0
public static DateTimeServer Func1(final long var1) { DateTime var2 = new DateTime(var1); var2 = var2.withZoneRetainFields(TimetrackerUtil.getLoggedUserTimeZone()); DateTimeServer var3 = new DateTimeServer(); var3.setUserTimeZone(var2); return var3; } 	0	0	0	0	1	0
"public void Func1() { final Activity var1 = this; TextView var2 = (TextView) findViewById(R.id.sidebar_index); if(null != var2){ var2.setVisibility(View.VISIBLE); var2.setOnClickListener(new View.OnClickListener() { public void Func2(View var3){ displayForumIndex(); mDrawerLayout.closeDrawers(); } }); var2.setText(""The SA Forums""); } TextView var4 = (TextView) findViewById(R.id.sidebar_forum); if(null != var4){ if(mNavForumId != 0) { var4.setVisibility(View.VISIBLE); var4.setOnClickListener(new View.OnClickListener() { public void Func2(View var3){ displayForum(mNavForumId, 1); mDrawerLayout.closeDrawers(); } }); var4.setText(StringProvider.getForumName(this, mNavForumId)); }else{ var4.setVisibility(View.GONE); } } TextView var5 = (TextView) findViewById(R.id.sidebar_thread); if(null != var5){ if(mNavThreadId != 0) { Log.d(TAG,""NavThread, Navforum: ""+ mNavThreadId+"" ""+mNavForumId); var5.setVisibility(View.VISIBLE); var5.setOnClickListener(new View.OnClickListener() { public void Func2(View var3) { displayThread(mNavThreadId, mThreadPage, mNavForumId, mForumPage,false); mDrawerLayout.closeDrawers(); } }); var5.setText(StringProvider.getThreadName(this, mNavThreadId)); }else{ var5.setVisibility(View.GONE); } } mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout); mDrawerToggle = new ActionBarDrawerToggle( ); mDrawerLayout.setDrawerListener(mDrawerToggle); TextView var6 = (TextView) findViewById(R.id.sidebar_username); if(null != var6){ var6.setText(mPrefs.var6); } ImageView var7 = (ImageView) findViewById(R.id.sidebar_avatar); if(null != var7){ AQuery var8 = new AQuery(this); if(null != mPrefs.userTitle) { if("""" != mPrefs.userTitle){ var8.id(R.id.sidebar_avatar).image(mPrefs.userTitle); }else{ var8.id(R.id.sidebar_avatar).image(R.drawable.icon); } } } TextView var9 = (TextView) findViewById(R.id.sidebar_logout); if(null != var9){ var9.setOnClickListener(new View.OnClickListener() { public void Func2(View var3){ mDrawerLayout.closeDrawers(); new LogOutDialog(var1).show(); } }); var9.setText(getResources().getText(R.string.var9)); var9.setVisibility(View.VISIBLE); } TextView var10 = (TextView) findViewById(R.id.sidebar_pm); if(null != var10){ var10.setEnabled(mPrefs.hasPlatinum); var10.setVisibility(mPrefs.hasPlatinum?View.VISIBLE:View.GONE); var10.setOnClickListener(new View.OnClickListener() { public void Func2(View var3){ mDrawerLayout.closeDrawers(); startActivity(new Intent().setClass(var1, PrivateMessageActivity.class)); } }); var10.setText(getResources().getText(R.string.private_message)); } TextView var11 = (TextView) findViewById(R.id.sidebar_bookmarks); if(null != var11){ var11.setOnClickListener(new View.OnClickListener() { public void Func2(View var3){ mDrawerLayout.closeDrawers(); startActivity(new Intent().setClass(var1, ForumsIndexActivity.class) .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP) .putExtra(Constants.FORUM_ID, Constants.USERCP_ID) .putExtra(Constants.FORUM_PAGE, 1)); } }); var11.setText(getResources().getText(R.string.user_cp)); var11.setVisibility((Constants.USERCP_ID == mNavForumId?View.GONE:View.VISIBLE)); } TextView var12 = (TextView) findViewById(R.id.sidebar_settings); if(null != var12){ var12.setOnClickListener(new View.OnClickListener() { public void Func2(View var3){ mDrawerLayout.closeDrawers(); startActivity(new Intent().setClass(var1, SettingsActivity.class)); } }); } var12.setText(getResources().getText(R.string.var12)); var12.setVisibility(View.VISIBLE); mDrawerToggle.syncState(); } "	0	0	1	0	0	0
"public JSONArray Func1(String var1) throws IOException, BioStudiesClientException { logger.debug(""Func1(var1={})"", var1); return parseJSONArray(get(composeUrl(""/userdata/listjson""), SESSION_PARAM, var1)); } "	0	0	0	0	1	0
"@Timed @ExceptionMetered @GET public SecretDeliveryResponse Func1(@NotEmpty @PathParam(""var1"") String var1, @Auth Client var2) { Optional<SanitizedSecret> var3 = aclDAO.getSanitizedSecretFor(var2, var1); Optional<Secret> var4 = secretController.getSecretByName(var1); if (!var3.isPresent()) { boolean var5 = clientDAO.getClient(var2.getName()).isPresent(); boolean var6 = var4.isPresent(); if (var5 && var6) { throw new ForbiddenException(format(""Access denied: %s at '%s' by '%s'"", var2.getName(), ""/var4/"" + var1, var2)); } else { if (var5) { logger.info(""Client {} requested unknown var4 {}"", var2.getName(), var1); } throw new NotFoundException(); } } logger.info(""Client {} granted access to {}."", var2.getName(), var1); try { return SecretDeliveryResponse.fromSecret(var4.get()); } catch (IllegalArgumentException e) { logger.error(""Failed creating response for var4 {}: {}"", var1, e); throw new InternalServerErrorException(); } } "	0	0	0	0	1	0
"@Override public String Func1(String var1, final List<String> var2, List<String> var3, String var4, List<String> var5) { String var6 = ""/"" + var1.split(""_"")[0] + ""_history""; List <String> var7 = new ArrayList<String>(){ { add(var6); add(""/tmp/dummy_"" + UUID.randomUUID().toString()); } }; for (String var8 : var3) { var7.add(""/user/"" + var8); createHdfsPath(""/user/"" + var8); } String var9 = this.hdfsAdminService.Func1( var1, var7, var3, var4, null); if ( var9 != null){ logger.info(""Assign var5 for folder "" + var7.toString()  + "" with policy id "" + var9); } String var10 = var2.get(0); String var11 = this.yarnCommonService.assignPermissionToQueue(var1, var10, var3, var4, null); if ( var11 != null){ logger.info(""Assign var5 for folder "" + var10  + "" with policy id "" + var11); } return ( var9 != null && var11 != null) ? var9 + "":"" + var11 : null; } "	0	0	1	0	1	0
public MapBuilder<K, V> Func1(MapCallback<K,V> var1, Predicate<K, V> var2) { this.var1 = var1; this.callbackFilter = var2; return this; } 	0	0	0	1	0	0
"@Override public void Func1(Properties var1) { try { ComponentProperties var2 = getComponentProperties(); ClassLoaderAggregateProperties var3 = (ClassLoaderAggregateProperties) var2.toConfiguration(); CompositeConfiguration var4 = var3.getBaseConfiguration(); Field var5 = CompositeConfiguration.class.getDeclaredField( ""configList""); var5.setAccessible(true); @SuppressWarnings(""unchecked"") List<Configuration> var6 = (List<Configuration>)var5.get(var4); Iterator<Configuration> var7 = var6.iterator(); while (var7.hasNext()) { Configuration var8 = var7.next(); if (!(var8 instanceof MapConfiguration)) { break; } MapConfiguration var9 = (MapConfiguration)var8; if (var9.getMap() == var1) { var7.remove(); var3.removeConfiguration( var8); } } _properties = null; clearCache(); } catch (Exception e) { _log.error(""The var1 could not be removed"", e); } } "	0	0	0	0	1	0
"@Override protected void Func1(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException { Object var3 = var1.getAttribute(Geoladris.ATTR_APP); String var4 = ""^"" + getServletContext().getContextPath(); if (var3 != null) { var4 += ""/"" + var3; } String var5 = var1.getRequestURI(); if (var5.matches(var4 + ""/$"")) { index.Func1(var1, var2); } else if (var5.matches(var4 + ""/config.js$"")) { config.Func1(var1, var2); } else if (var5.matches(var4 + ""/modules/main.js$"")) { main.Func1(var1, var2); } else if (var5.matches(var4 + ""/(static|jslib|modules|styles|theme)/.*"")) { clientContent.Func1(var1, var2); } else { var2.sendError(HttpServletResponse.SC_NOT_FOUND); } } "	0	0	0	0	1	0
"private void Func1(int var1, boolean var2) { if (mHeaderPosition != var1) { mHeaderPosition = var1; RecyclerView.ViewHolder var3 = getHeaderViewHolder(var1); if (mStickyHeaderViewHolder != var3) { if (FlexibleAdapter.DEBUG) Log.v(TAG, ""swapHeader newPosition="" + var1); swapHeader(var3); } } else if (var2 && mStickyHeaderViewHolder != null) { mAdapter.onBindViewHolder(mStickyHeaderViewHolder, mHeaderPosition); ensureHeaderParent(); } translateHeader(); } "	0	0	1	0	1	0
"private CompiledCode Func1(String var1) throws Exception { Objects.requireNonNull(var1); notifyInfo(getTitle() + "", version "" + getVersion()); parser.setCompiler(this); Object var2; CompiledCode var3 = new CompiledCode(); try (Reader reader = new FileReader(var1)) { lexer.reset(reader, 0, 0, 0); var2 = parser.parse().value; if (var2 == null) { notifyError(""Unexpected end of file""); throw new Exception(""Unexpected end of file""); } if (parser.errorCount != 0) { throw new Exception(""Program has errors""); } Program var4 = (Program) var2; var4.pass1(0); var4.pass2(var3); notifyInfo(""Compile was successful.""); if (memory != null) { memory.destroy(); var3.loadIntoMemory(memory); notifyInfo(""Compiled file was loaded into operating memory.""); } } return var3; } "	0	0	0	0	1	0
public void Func1() { CatalogConfiguration var1 = GeoServerExtensions.bean(CatalogConfiguration.class); if (var1 != null) { var1.Func1(); } } 	0	0	1	0	0	0
"@Override public void Func1(View var1) { Intent var2 = new Intent(context,FeedActivity.class); var2.putExtra(""ID"",getPosition()); var2.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); context.startActivity(var2); } "	0	0	0	0	1	0
private void Func1(boolean var1) { if(this.online != var1) { this.online = var1; updateApplicationState(onReconnection); } } 	0	0	0	0	1	0
"public static String Func1(Character var1, String var2) { String[] var3 = var2.split("" ""); String var4 = ""test""; if (var3[0].equals(""exit"")) { System.exit(0); var4 = ""Exiting the game... Goodbye!""; } else if (var3[0].equals(""move"")) { var4 = var1.move(var3[1]); } else if (var3[0].equals(""get"")) { var4 = var1.addItem(var3[1]); } else if (var3[0].equals(""drop"")) { var4 = var1.removeItem(var3[1]); } else { var4 = ""Oops! I don't know what you're trying to say!""; } return var4; } "	0	0	0	0	1	0
public RoundedColorDrawable Func1(int[] var1, int var2){ return Func1(var1, var2, 0); } 	0	0	0	0	1	0
public WebDriver Func1() { super.setImplicitTimeout(10, TimeUnit.SECONDS); return super.Func1(); } 	0	0	1	0	1	0
public void Func1() { final View var1 = getView().findViewById(R.id.master_detail_container_master); if (shouldMasterToggle() && var1.getVisibility() == View.VISIBLE) { Animation var2 = AnimationUtils.loadAnimation(getContext(), R.var2.fade_out); var2.setAnimationListener(new AnimationEndListener() { @Override public void Func2(Animation var3) { var1.setVisibility(View.GONE); } }); var1.startAnimation(var2); } } 	0	0	1	0	1	0
"public void Func1() { log.info(""Shutting down "" + Aradiabot.NAME + "" ...""); this.stopBotReconnect(); this.Func1(true); System.exit(IRC.EXIT_SUCCESS); } "	0	0	0	0	1	0
"public void Func1(DownloadMission var1) { String var2 = var1.getUrl(); if (mWaitingForDownloadLookUpMap.get(var2) != null || mNowDownloading.get(var2) != null) { throw new IllegalArgumentException(""This download var1 is exists.""); } else { if (mDataBaseHelper.recordNotExists(var2)) { mDataBaseHelper.insertRecord(var1); createAndGet(var2).onNext(mEventFactory.factory(var2, DownloadFlag.WAITING, null)); } else { mDataBaseHelper.updateRecord(var2, DownloadFlag.WAITING); createAndGet(var2).onNext(mEventFactory.factory(var2, DownloadFlag.WAITING, mDataBaseHelper.readStatus(var2))); } mWaitingForDownload.offer(var1); mWaitingForDownloadLookUpMap.put(var2, var1); } } "	0	0	0	0	1	0
"private void Func1() throws AndrolibException { int var1 = mResId & 0xffff0000; for (int var2 = 0; var2 < mMissingResSpecs.length; var2++) { if (!mMissingResSpecs[var2]) { continue; } ResResSpec var3 = new ResResSpec(new ResID(var1 | var2), String.format(""APKTOOL_DUMMY_%04x"", var2), mPkg, mTypeSpec); if (! mPkg.hasResSpec(new ResID(var1 | var2))) { mPkg.addResSpec(var3); mTypeSpec.addResSpec(var3); if (mType == null) { mType = mPkg.getOrCreateConfig(new ResConfigFlags()); } ResValue var4 = new ResBoolValue(false, 0, null); ResResource var5 = new ResResource(mType, var3, var4); mPkg.addResource(var5); mType.addResource(var5); var3.addResource(var5); } } } "	0	0	0	0	1	0
"public static void Func1( String[] var1 ) { Problem var2 = new PE0011(); String var3 = var2.getResult(); IO.info( ""var3 for problem #"" + var2 ); IO.info( "" is '"" + var3 + ""'"" ); IO.infoln( "" found in "" + var2.getRuntime( 2 ) + "" ms"" ); } "	0	0	1	0	1	0
"@Override public E Func1() throws BoxException { BoxRequest.BoxRequestHandler var1 = getRequestHandler(); BoxHttpResponse var2 = null; try { BoxHttpRequest var3 = createHttpRequest(); var2 = new BoxHttpResponse(var3.getUrlConnection()); var2.open(); logDebug(var2); if (var1.isResponseSuccess(var2)) { BoxIterator var4 = (BoxIterator) var1.onResponse(BoxIterator.class, var2); return (E)var4.get(0); } int var5 = var2.getResponseCode(); throw new BoxException(String.format(Locale.ENGLISH, ""An error occurred while sending the var3 (%s)"", var5), var2); } catch (IOException e) { throw handleSendException(var1, var2, e); } catch (InstantiationException e) { throw handleSendException(var1, var2, e); } catch (IllegalAccessException e) { throw handleSendException(var1, var2, e); } catch (BoxException e) { throw handleSendException(var1, var2, e); } } "	0	0	0	0	1	0
private SyntaxToken Func1(SyntaxToken var1, IToken var2) { int var3 = Math.min(var1.getStartPosition(), var2.getStartPosition()); int var4 = Math.max(var1.getEndPosition(), var2.getEndPosition()); SyntaxToken var5 = new SyntaxToken(IToken.TOKEN_TYPE_VERB_NOUN, var1, null, var3, var4); var5.setId(getTokenIdProvider().getVacantId()); var5.addChild(var1); var5.addChild(var2); var1.addParent(var5); var2.addParent(var5); return var5; } 	0	0	0	0	1	0
@Override public void Func1() { super.Func1(); FabManager.game.setMenu(CHESS_FAM_KEY, getChessMenu()); grid = (GridLayout) mLayout.findViewById(board); ImageView var1 = (ImageView) mLayout.findViewById(R.id.player_1_icon); var1.setColorFilter(ContextCompat.getColor(getContext(), R.color.colorPrimary), PorterDuff.Mode.SRC_ATOP); ImageView var2 = (ImageView) mLayout.findViewById(R.id.player_2_icon); var2.setColorFilter(ContextCompat.getColor(getContext(), R.color.colorAccent), PorterDuff.Mode.SRC_ATOP); } 	0	0	0	0	1	0
"@Test public void Func1() throws Exception { CloseableHttpClient var1 = recordHttpClientForSingleJsonAndStatusCodeResponse("""", 204); ConfluenceRestClient var2 = new ConfluenceRestClient(CONFLUENCE_ROOT_URL, var1, null, null); var2.deletePage(""1234""); verify(var1, times(1)).execute(any(HttpDelete.class), any(HttpContext.class)); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { String var1 = ""{\""id\"": \""att12\"", \""title\"": \""Attachment.txt\"", \""_links\"": {\""download\"": \""/download/Attachment.txt\""}, \""version\"": {\""number\"": 1}}""; CloseableHttpClient var2 = recordHttpClientForSingleJsonAndStatusCodeResponse(""{\""results\"": ["" + var1 + ""], \""size\"": 1}"", 200); ConfluenceRestClient var3 = new ConfluenceRestClient(CONFLUENCE_ROOT_URL, var2, null, null); ConfluenceAttachment var4 = var3.getAttachmentByFileName(""1234"", ""file.txt""); assertThat(var4.getId(), is(""att12"")); assertThat(var4.getTitle(), is(""Attachment.txt"")); assertThat(var4.getRelativeDownloadLink(), is(""/download/Attachment.txt"")); assertThat(var4.getVersion(), is(1)); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { CloseableHttpClient var1 = recordHttpClientForSingleJsonAndStatusCodeResponse(""{\""value\"": \""hash-value\""}"", 200); ConfluenceRestClient var2 = new ConfluenceRestClient(CONFLUENCE_ROOT_URL, var1, null, null); String var3 = var2.getPropertyByKey(""1234"", ""content-hash""); assertThat(var3, is(""hash-value"")); verify(var1, times(1)).execute(any(HttpGet.class), any(HttpContext.class)); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { String var1 = ""1234""; CloseableHttpClient var2 = recordHttpClientForSingleJsonAndStatusCodeResponse(""{\""results\"": [{\""id\"":\"""" + var1 + ""\""}], \""size\"": 1}"", 200); ConfluenceRestClient var3 = new ConfluenceRestClient(CONFLUENCE_ROOT_URL, var2, null, null); String var4 = var3.getPageByTitle(""~personalSpace"", ""Some title""); assertThat(var4, is(var1)); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { CloseableHttpClient var1 = recordHttpClientForSingleJsonAndStatusCodeResponse("""", 404); ConfluenceRestClient var2 = new ConfluenceRestClient(CONFLUENCE_ROOT_URL, var1, null, null); boolean var3 = var2.var3(""abc"", ""file.txt""); assertThat(var3, is(false)); } "	0	0	0	0	1	0
private void Func1(String var1) { List<ICollection> var2 = new CsvParser().parse(var1); _store.addAll(var2); changed(); } 	0	0	0	0	1	0
"public void Func1(){ CRTLogger.out(""Create new script"", CRTLogger.LEVEL_PROD); String var1 = AjaxController.getInstance().getRequestParamByKey(""vp_id""); String var2 = AjaxController.getInstance().getRequestParamByKey(""vp_lang""); if(var2==null || var2.isEmpty()) var2 = ""en""; PatientIllnessScript var3 = new PatientIllnessScript(userId, var1, new Locale(var2), 2); int var4 = AjaxController.getInstance().getIntRequestParamByKey(""maxstage"", -1); int var5 = AjaxController.getInstance().getIntRequestParamByKey(""var5"", -1); var3.iniExpertScript(var4, var5); new DBClinReason().saveAndCommit(var3); String var6 = AjaxController.getInstance().getRequestParamByKey(""vp_name""); VPScriptRef var7= new VPScriptRef(var3.getVpId(), var6, 2, var1); new DBClinReason().saveAndCommit(var7); addExpertScript(var3); CRTLogger.out(""Create new script: id= "" + var3.getId(), CRTLogger.LEVEL_PROD); } "	0	0	0	0	1	0
@SubscribeEvent(priority = EventPriority.HIGHEST) public void Func1(PlayerInteractEvent.LeftClickBlock var1) { Block var2 = var1.getWorld().getBlockState(var1.getPos()).getBlock(); if (ModConfig.invincibleVendSell) { cancelEventChange: if (var2 == ModBlocks.blockVending || var2 == ModBlocks.blockATM) { IOwnable var3 = (IOwnable) var1.getWorld().getTileEntity(var1.getPos()); if ((!var1.getEntityPlayer().getUniqueID().toString().equals(var3.getOwner())) && !var1.getEntityPlayer().isCreative()) {     //If not Owner (and not in creative) Can't Break var1.setCanceled(true); } } } } 	0	0	0	0	1	0
@Override public void Func1(String var1, View var2) { ans.imageState = Choice.LoadState.LOADING; } 	0	0	0	0	1	0
"@Override public Bundle Func1(AccountAuthenticatorResponse var1, String var2, String var3, String[] var4, Bundle var5) throws NetworkErrorException { Log.d(TAG, ""Func1()""); final Intent var6 = new Intent(mContext, SetupSyncActivity.class); var6.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, var1); var6.putExtra(""var2"", Constants.ACCOUNTTYPE_SYNC); final Bundle var7 = new Bundle(); var7.putParcelable(AccountManager.KEY_INTENT, var6); return var7; } "	0	0	0	0	1	0
"@Override public String Func1(String var1) { Log.d(TAG, ""Func1()""); return null; } "	0	0	0	0	1	0
"@Override public Bundle Func1(AccountAuthenticatorResponse var1, Account var2, String var3, Bundle var4) throws NetworkErrorException { Log.d(TAG, ""Func1()""); return null; } "	0	0	0	0	1	0
"@Override public Bundle Func1(AccountAuthenticatorResponse var1, Account var2, Bundle var3) throws NetworkErrorException { Log.d(TAG, ""Func1()""); return null; } "	0	0	0	0	1	0
"public void Func1() { Log.i(""Func1"", ""wiping: "" + getUri()); String var1 = BrowserContract.SyncColumns.GUID + "" NOT IN ('mobile')""; context.getContentResolver().delete(getUri(), var1, null); } "	0	0	0	0	1	0
public Stream<Answer> Func1(Set<ReasonerAtomicQuery> var1, Cache<ReasonerAtomicQuery, ?> var2, Cache<ReasonerAtomicQuery, ?> var3, boolean var4, boolean var5, boolean var6){ boolean var7 = !var1.contains(this); Stream<Answer> Func1 = var2.contains(this) ? Stream.empty() : var3.record(this, lookup(var2)); if(var7) { Set<InferenceRule> var9 = getAtom().getApplicableRules(); for (InferenceRule var10 : var9) { Stream<Answer> var11 = resolveViaRule(var10, var1, var2, var3, var4, var5, var6); Func1 = Stream.concat(Func1, var11); } } return var3.record(this, Func1); } 	0	0	1	1	0	0
@Override public void Func1(boolean var1, int var2) { labelView.animate().scaleX(1).scaleY(1).setDuration(var2).start(); super.Func1(var1, var2); } 	0	0	0	0	1	0
@Before public void Func1() { MockitoAnnotations.initMocks(this); controller.setTestObjectRepository(testObjectRepository); mockMvc = MockMvcBuilders.standaloneSetup(controller).build(); } 	0	0	0	0	1	0
"@Override @SuppressWarnings(""unchecked"") public Collection<Community> Func1(int var1) { EntityTransaction var2 = null; try{ var2 = dbService.getEntitymanager().getTransaction(); var2.begin(); List<Community> var3 = dbService.getEntitymanager().createQuery(""SELECT c FROM Community c where c.user.var1=""+var1).getResultList(); var2.commit(); return var3; } catch(Exception e){ e.printStackTrace(); if(var2!=null) var2.rollback(); return null; } } "	0	0	0	0	1	0
"@Test(groups=""1s"", timeOut=6000000, dataProvider = ""var1"") public void Func1(boolean var1, int var2) { Model var3 = new Model(); var3.set(new Settings() { @Override public boolean Func2() { return var1; } }); BoolVar var4[] = var3.boolVarArray(""r"", var2); BoolVar var5 = var3.boolVar(); var3.sum(var4, ""<"", 10).reifyWith(var5); var3.getSolver().setSearch(Search.inputOrderLBSearch(var4), Search.inputOrderLBSearch(var5)); var3.getSolver().findAllSolutions(); var3.getSolver().printShortStatistics(); } "	0	0	0	0	1	0
"@SuppressWarnings({""Since15""}) @IgnoreJRERequirement public void Func1(final Reader var1) throws IOException { final long[] var2 = new long[1]; execute(new RunExecution() { private String Func2(XMLStreamReader var3) throws XMLStreamException { StringBuilder var4 = new StringBuilder(); while(true) { int var5 = var3.next(); if(var5== CHARACTERS || var5== CDATA) var4.append(var3.getTextCharacters(), var3.getTextStart(), var3.getTextLength()); else return var4.toString(); } } public Result Func3(BuildListener var6) throws Exception { PrintStream var7 = new PrintStream(new DecodingStream(var6.getLogger()), false, ""UTF-8""); XMLInputFactory var8 = XMLInputFactory.newInstance(); XMLStreamReader var9 = var8.createXMLStreamReader(var1); var9.nextTag();    // get to the <Func3> var9.nextTag();    // get to the <log> setCharset(var9.getAttributeValue(null,""content-encoding"")); while(var9.next()!= END_ELEMENT) { int var5 = var9.getEventType(); if(var5== CHARACTERS || var5== CDATA) var7.print(var9.getText()); } var9.nextTag(); // get to <result> Result var3 = Integer.parseInt(Func2(var9))==0?Result.SUCCESS:Result.FAILURE; do { var9.nextTag(); if(var9.getEventType()== START_ELEMENT){ if(var9.getLocalName().equals(""var2"")) { var2[0] = Long.parseLong(Func2(var9)); } else if(var9.getLocalName().equals(""displayName"")) { setDisplayName(var9.getElementText()); } else if(var9.getLocalName().equals(""description"")) { setDescription(var9.getElementText()); } } } while(!(var9.getEventType() == END_ELEMENT && var9.getLocalName().equals(""Func3""))); return var3; } public void Func4(BuildListener var6) { } public void Func5(BuildListener var6) { } }); if(var2[0]!=0) { super.var2 = var2[0]; save(); } } "	0	0	0	0	1	0
private void Func1() { if ((null != directConnection) && (directConnection.isActive())) { } else { directConnection = new RespokeDirectConnection(this); endpoint.setDirectConnection(directConnection); new Handler(Looper.getMainLooper()).post(new Runnable() { public void Func2() { if (null != listenerReference) { Listener var1 = listenerReference.get(); if (null != var1) { var1.directConnectionAvailable(directConnection, endpoint); } } } }); if ((null != directConnection) && !caller && (null != signalingChannel)) { RespokeSignalingChannel.Listener var2 = signalingChannel.GetListener(); if (null != var2) { var2.directConnectionAvailable(directConnection, endpoint); } } } } 	0	0	1	0	1	0
"public void Func1() throws InterruptedException { user = verifyUser(); user.setPassword(UUID.randomUUID().toString()); if (user != null) { o(""Continuing with user: "" + user.getEmail() + "" "" + user.getUUID()); createRegularUsers(); createPoints(); recordSeriesData(); } else { o(""User was null! Exiting Test""); } o(""Done!""); } "	0	0	0	0	1	0
@TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override protected void Func1(Bundle var1) { super.Func1(var1); cursor = readDB(); String[] var2 = {dbConstants.myConstants.FOOD, dbConstants.myConstants.PRICE}; int[] var3 = {R.id.foodName, R.id.foodPrice}; SimpleCursorAdapter var4 = new SimpleCursorAdapter(this, R.layout.food_info, cursor, var2, var3, 0); swipeAdapter = new SwipeActionAdapter(var4); swipeAdapter.setListView(getListView()) .setSwipeActionListener(this) .setDimBackgrounds(true); setListAdapter(swipeAdapter); swipeAdapter.addBackground(SwipeDirections.DIRECTION_FAR_RIGHT,R.layout.row_bg) .addBackground(SwipeDirections.DIRECTION_NORMAL_RIGHT, R.layout.row_bg); AddFoodFragment.getTotal(dbRead); } 	1	1	1	0	0	0
"private ParsedRoute Func1(final Router.RouteDocumentation var1) { final ParsedRoute var2 = new ParsedRoute(); var2.setRouteDocumentation(var1); if (countMatches(var1.getControllerMethodInvocation(), '@') == 2) { final String var3 = StringUtils.removeStart(var1.getControllerMethodInvocation(), ""@""); final String var4 = var3.substring(0, var3.indexOf(""@"")); try { final Class<?> var5 = Class.forName(var4); var2.setControllerClass(var5); } catch (ClassNotFoundException e) { throw new CompletionException(e); } } return var2; } "	0	0	0	0	1	0
@Override public void Func1(DBContext var1, String var2) { dataModel = Model.CreateModel(var1, var2); } 	0	0	0	0	1	0
public boolean Func1(final Object var1) { boolean var2 = writeLock.tryLock(); if (var2) { writeLockConsumer = var1; writeLockTimeout.start(); } return var2; } 	0	0	0	0	1	0
@Override public void Func1(AXBootErrorLog var1) { ErrorLog var2 = ModelMapperUtils.map(var1, ErrorLog.class); Func1(var2); } 	0	0	0	0	1	0
"@Test public void Func1() { IDNumber var1 = new IDNumber(""9123123123132""); Assert.assertEquals(Status.NOT_NINE, var1.getStatus()); } "	0	0	0	0	1	0
private void Func1(HttpServletRequest var1) { String var2 = rememberMeCookieDecoder.exctractRememberMeCookieValue(var1); if (var2 != null) { String[] var3 = rememberMeCookieDecoder.extractSeriesAndToken(var2); int var4 = 2; if (var3.length >= var4) { String var5 = var3[0]; String var6 = var3[1]; rememberMeCheckService.equalWithPersistentToken(var5, var6); } } } 	0	0	0	0	1	0
private void Func1() { Intent var1 = new Intent(INTENT_MULTI_PICK, Contacts.CONTENT_URI); String var2 = mRecipientsEditor.getExsitNumbers(); if (!TextUtils.isEmpty(var2)) { var1.putExtra(Intents.EXTRA_PHONE_URIS, var2); } try { mIsPickingContact = true; startActivityForResult(var1, REQUEST_CODE_PICK); } catch (ActivityNotFoundException ex) { Toast.makeText(this, R.string.contact_app_not_found, Toast.LENGTH_SHORT).show(); } } 	0	0	0	0	1	0
@Override public boolean Func1(Preference var1, Object var2) { if (!isDeviceDefinitionValid((String) var2)) { Toast.makeText(activity, R.string.error_invalid_device_definition, Toast.LENGTH_LONG).show(); return false; } showLogOutDialog(); return super.Func1(var1, var2); } 	0	0	0	0	1	0
"@Test(expected = BridgeServiceException.class) public void Func1() throws Exception { authService.signIn(testUser.getStudy(), TEST_CONTEXT, new SignIn(""foobar"", null)); } "	0	0	1	0	1	0
@Before public void Func1() { testUser = helper.getBuilder(AuthenticationServiceTest.class).build(); } 	0	0	0	0	1	0
public void Func1(String var1, Task var2) throws CommandExecuteException { if (this.isTaskExist(var1)) { Task var3 = this.taskMap.get(var1); try { this.database.delete(var3); var3.update(var2); this.database.saveTask(var3); } catch (Exception e) { throw new CommandExecuteException(e.getMessage()); } try { this.updateTaskMap(var1, var3); } catch (Exception e) { throw new CommandExecuteException( ErrorMessage.EXCEPTION_UPDATE_TASK_MAP); } this.display.outputMessage(var3.getTitle() + NormalMessage.MODIFY_TASK_SUCCESSFUL); } else { throw new CommandExecuteException( ErrorMessage.EXCEPTION_MISSING_TASK); } } 	0	0	1	0	1	0
@ErrorType private int Func1() { @ErrorType int var1 = ERROR_TYPE_NONE; if (mShouldRequestExpirationDate) var1 = getExpirationDateErrorType(); if (isCvcValid()) return var1; if (mStartedTypingCvc && !mCardUnmaskInput.isFocused()) { if (var1 == ERROR_TYPE_NONE || var1 == ERROR_TYPE_NOT_ENOUGH_INFO) { var1 = ERROR_TYPE_CVC; } else { var1 = ERROR_TYPE_CVC_AND_EXPIRATION; } } else { if (var1 == ERROR_TYPE_NONE) var1 = ERROR_TYPE_NOT_ENOUGH_INFO; } return var1; } 	0	0	0	0	1	0
"public AttendanceAssignment Func1(AttendanceAssignment var1, Long var2, AttendanceAssignment var3, CanvasApiWrapperService var4, OauthToken var5) throws AttendanceAssignmentException{ if(!isAssignmentConfigurationSaved(var1, var3)) { LOG.info(""Configuration form is different than saved assignment configuration for section: "" + var3.getAttendanceSection().getCanvasSectionId()); throw new AttendanceAssignmentException(Error.NOT_SAVED); } Optional<Assignment> var6 = lookForAssignmentInCanvas(var2,var3,var4,var5); if (var6.get().getPointsPossible().doubleValue() != var1.getAssignmentPoints().doubleValue()) { LOG.debug(""Discrepancy between Canvas and DB assignment. Point value of Canvas assignment is: "" + var6.get().getPointsPossible() + "" and point value of Database assignment is :"" + var3.getAssignmentPoints()); var3.setStatus(AttendanceAssignment.Status.CANVAS_AND_DB_DISCREPANCY); } return var3; } "	0	0	0	0	1	0
public static <K, V> Map<V, K> Func1(Map<K, V> var1){ return MapUtils.Func1(var1);//返回的是 HashMap } 	0	0	0	1	1	0
@Test public void Func1() { DatatablesCriterias var1 = DatatablesCriterias.getFromRequest(request); assertThat(var1).isNotNull(); assertThat(var1.getSearch()).isNull(); assertThat(var1.getStart()).isEqualTo(-1); assertThat(var1.getLength()).isEqualTo(-1); assertThat(var1.getDraw()).isEqualTo(-1); assertThat(var1.getColumnDefs()).isEmpty(); assertThat(var1.getSortingColumnDefs()).isEmpty(); } 	0	0	0	0	1	0
"public static TypeInstance Func1(NativeTypesLibrary var1, String var2, int var3, int var4) { NativeType var5 = var1.findTypeByName(var2); if (var5 == null) { System.err.println(""handleMetaDatasColumn : native type ["" + var2 + ""] not found.""); } TypeInstance var6 = TypesLibraryFactory.eINSTANCE.Func1(); var6.setNativeType(var5); var6.setLength(var3); var6.setPrecision(var4); return var6; } "	0	0	0	0	1	0
"private void Func1(final Nitf var1) throws IOException, ParseException { mOutputFile.writeBytes(var1.getFileType().getTextEquivalent()); writeFixedLengthNumber(var1.getComplexityLevel(), NitfConstants.CLEVEL_LENGTH); writeFixedLengthString(var1.getStandardType(), NitfConstants.STYPE_LENGTH); writeFixedLengthString(var1.getOriginatingStationId(), NitfConstants.OSTAID_LENGTH); mOutputFile.writeBytes(var1.getFileDateTime().getSourceString()); writeFixedLengthString(var1.getFileTitle(), NitfConstants.FTITLE_LENGTH); writeFileSecurityMetadata(var1.getFileSecurityMetadata()); writeFixedLengthString(""0"", NitfConstants.ENCRYP_LENGTH); mOutputFile.writeByte(var1.getFileBackgroundColour().getRed()); mOutputFile.writeByte(var1.getFileBackgroundColour().getGreen()); mOutputFile.writeByte(var1.getFileBackgroundColour().getBlue()); writeFixedLengthString(var1.getOriginatorsName(), NitfConstants.ONAME_LENGTH); writeFixedLengthString(var1.getOriginatorsPhoneNumber(), NitfConstants.OPHONE_LENGTH); int var2 = var1.getImageSegmentDataLengths().size(); int var3 = var1.getGraphicSegmentDataLengths().size(); int var4 = var1.getTextSegmentDataLengths().size(); int var5 = var1.getDataExtensionSegmentDataLengths().size(); byte[] var6 = getTREs(var1, TreSource.UserDefinedHeaderData); int var7 = var6.length; if (var7 > 0) { var7 += NitfConstants.UDHOFL_LENGTH; } byte[] var8 = getTREs(var1, TreSource.ExtendedHeaderData); int var9 = var8.length; if (var9 > 0) { var9 += NitfConstants.XHDLOFL_LENGTH; } int var10 = BASIC_HEADER_LENGTH + var2 * (NitfConstants.LISH_LENGTH + NitfConstants.LI_LENGTH) + var3 * (NitfConstants.LSSH_LENGTH + NitfConstants.LS_LENGTH) + var4 * (NitfConstants.LTSH_LENGTH + NitfConstants.LT_LENGTH) + var5 * (NitfConstants.LDSH_LENGTH + NitfConstants.LD_LENGTH) + var7 + var9; int var11 = var10; for (int var12 = 0; var12 < var2; ++var12) { var11 += var1.getImageSegmentSubHeaderLengths().get(var12); var11 += var1.getImageSegmentDataLengths().get(var12); } for (int var12 = 0; var12 < var3; ++var12) { var11 += var1.getGraphicSegmentSubHeaderLengths().get(var12); var11 += var1.getGraphicSegmentDataLengths().get(var12); } for (int var12 = 0; var12 < var4; ++var12) { var11 += var1.getTextSegmentSubHeaderLengths().get(var12); var11 += var1.getTextSegmentDataLengths().get(var12); } for (int var12 = 0; var12 < var5; ++var12) { var11 += var1.getDataExtensionSegmentSubHeaderLengths().get(var12); var11 += var1.getDataExtensionSegmentDataLengths().get(var12); } writeFixedLengthNumber(var11, NitfConstants.FL_LENGTH); writeFixedLengthNumber(var10, NitfConstants.HL_LENGTH); writeFixedLengthNumber(var2, NitfConstants.NUMI_LENGTH); for (int var12 = 0; var12 < var2; ++var12) { writeFixedLengthNumber(var1.getImageSegmentSubHeaderLengths().get(var12), NitfConstants.LISH_LENGTH); writeFixedLengthNumber(var1.getImageSegmentDataLengths().get(var12), NitfConstants.LI_LENGTH); } writeFixedLengthNumber(var3, NitfConstants.NUMS_LENGTH); for (int var12 = 0; var12 < var3; ++var12) { writeFixedLengthNumber(var1.getGraphicSegmentSubHeaderLengths().get(var12), NitfConstants.LSSH_LENGTH); writeFixedLengthNumber(var1.getGraphicSegmentDataLengths().get(var12), NitfConstants.LS_LENGTH); } writeFixedLengthNumber(0, NitfConstants.NUMX_LENGTH); writeFixedLengthNumber(var4, NitfConstants.NUMT_LENGTH); for (int var12 = 0; var12 < var4; ++var12) { writeFixedLengthNumber(var1.getTextSegmentSubHeaderLengths().get(var12), NitfConstants.LTSH_LENGTH); writeFixedLengthNumber(var1.getTextSegmentDataLengths().get(var12), NitfConstants.LT_LENGTH); } writeFixedLengthNumber(var5, NitfConstants.NUMDES_LENGTH); for (int var12 = 0; var12 < var5; ++var12) { writeFixedLengthNumber(var1.getDataExtensionSegmentSubHeaderLengths().get(var12), NitfConstants.LDSH_LENGTH); writeFixedLengthNumber(var1.getDataExtensionSegmentDataLengths().get(var12), NitfConstants.LD_LENGTH); } writeFixedLengthNumber(0, NitfConstants.NUMRES_LENGTH); writeFixedLengthNumber(var6.length, NitfConstants.UDHDL_LENGTH); if (var7 > 0) { writeFixedLengthNumber(var1.getUserDefinedHeaderOverflow(), NitfConstants.UDHOFL_LENGTH); mOutputFile.write(var6); } writeFixedLengthNumber(var9, NitfConstants.XHDL_LENGTH); if (var9 > 0) { writeFixedLengthNumber(var1.getExtendedHeaderDataOverflow(), NitfConstants.XHDLOFL_LENGTH); mOutputFile.write(var8); } } "	1	0	0	0	0	0
private FieldInjectionTarget Func1(VariableElement var1) { final TypeElement var2 = (TypeElement) typeUtils.asElement(var1.asType()); final String var3 = var1.getSimpleName().toString(); FieldInjectionTarget.Kind var4 = getKind(var1); TypeElement var5; if (var4 == FieldInjectionTarget.Kind.INSTANCE) { var5 = null; } else { var5 = getKindParameter(var1); } Object var6 = findName(var1); return new FieldInjectionTarget(var2, var3, var4, var5, var6); } 	0	0	0	0	1	0
public final JoinMatcherBootstrap<V, BaseParser<V>> Func1(final Object var1, final Object var2, final Object var3) { Objects.requireNonNull(var3); return Func1(sequence(var1, var2, var3)); } 	0	0	1	1	0	0
public static String Func1(Object var1,JsonConfig var2,int var3,int var4){ return null == var1 ? StringUtils.EMPTY : toJSON(var1, var2).toString(var3, var4); } 	0	0	0	1	0	0
"public void Func1(FightCharacter var1) { Gdx.app.debug(TAG, ""Character touched ["" + var1.getName() + ""]""); switch (fightState) { case NOTHING_SELECTED: tryToSelectCharacter(var1); break; case CHARACTER_SELECTED: unselectCharacterIfAlreadySelected(var1); break; case ACTION_SELECTED: doAction(var1); break; } } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { final ActionRequest var1 = Requests.newActionRequest("""", SchedulerService.ACTION_PAUSE_JOBS); Promise<ActionResponse, ResourceException> var2 = schedulerService.handleAction(new RootContext(), var1); AssertJPromiseAssert.assertThat(var2) .isNotNull() .succeeded(); ActionResponse var3 = var2.getOrThrow(); assertThat(var3.getJsonContent().get(""success"").getObject()).isEqualTo(new Boolean(true)); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { final ActionRequest var1 = Requests.newActionRequest("""", SchedulerService.ACTION_LIST_CURRENTLY_EXECUTING_JOBS); Promise<ActionResponse, ResourceException> var2 = schedulerService.handleAction(new RootContext(), var1); AssertJPromiseAssert.assertThat(var2) .isNotNull() .succeeded(); ActionResponse var3 = var2.getOrThrow(); assertThat(var3.getJsonContent().asList().size()).isEqualTo(0); } "	0	0	0	0	1	0
@Override public void Func1(CardViewHolder var1, int var2) { DailyNews var3 = mNewsList.get(var2); var1.mCover.setImageUrl(var3.images.get(0), RequestManager.getImageLoader()); var1.mTitle.setText(var3.title); } 	0	0	0	0	1	0
public boolean Func1() { return category != null && category.getElementById(id, true) != null; } 	0	0	0	0	1	0
public void Func1(int var1) { canvas.drawRect(var1, projection.screen.top, var1, projection.screen.bottom, gridPaint); } 	0	0	1	0	1	0
"void Func1() { Iterator<PIGeofence> var1 = PIGeofence.findAll(PIGeofence.class); if ((httpService.getServerURL() != null) && !var1.hasNext()) { log.debug(""Func1() loading geofences from the server""); loadGeofencesFromServer(true); } else { log.debug(""Func1() found geofences in local database""); setInitialLocation(); } } "	1	0	1	0	0	0
"public static FontFamily Func1(String var1) { if (""default"".equals(var1)) { return DEFAULT; } else if ((""monospace"").equals(var1)) { return MONOSPACE; } else if (""sans_serif"".equals(var1)) { return SANS_SERIF; } else if (""serif"".equals(var1)) { return SERIF; } throw new IllegalArgumentException(""Invalid var1 for Align: "" + var1); } "	0	0	0	0	1	0
@Override public int Func1() { return this.color.getAlpha(); } 	1	0	0	0	0	0
"private void Func1() { if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED) || Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED_READ_ONLY)) { try { Intent var1 = new Intent(Intent.ACTION_GET_CONTENT); var1.setType(""file/*""); startActivityForResult(var1, REQUEST_PICK_OPML_FILE); } catch (Exception unused) { // Else use a custom file selector displayCustomFilePicker(); } } else { Toast.makeText(getActivity(), R.string.error_external_storage_not_available, Toast.LENGTH_LONG).show(); } } "	0	0	0	0	1	0
private boolean Func1() { if (jj_3R_263()) return true; return false; } 	0	0	1	0	0	0
private boolean Func1() { if (jj_3R_71()) return true; return false; } 	0	0	1	1	0	0
private boolean Func1() { if (jj_scan_token(SET)) return true; if (jj_3R_57()) return true; if (jj_scan_token(EQ)) return true; if (jj_3R_63()) return true; Token var1; while (true) { var1 = jj_scanpos; if (jj_3R_261()) { jj_scanpos = var1; break; } } return false; } 	0	0	1	0	1	0
private boolean Func1() { if (jj_3R_235()) return true; return false; } 	0	0	1	0	0	0
private boolean Func1() { if (jj_scan_token(WHERE)) return true; if (jj_3R_233()) return true; return false; } 	0	0	1	0	0	0
private boolean Func1() { if (jj_3R_62()) return true; return false; } 	0	0	0	0	1	0
private boolean Func1() { Token var1; var1 = jj_scanpos; if (jj_scan_token(14)) jj_scanpos = var1; var1 = jj_scanpos; if (jj_3R_262()) { jj_scanpos = var1; if (jj_3_27()) return true; } return false; } 	0	0	1	0	0	0
private boolean Func1() { if (jj_scan_token(COMMA)) return true; if (jj_3R_63()) return true; return false; } 	0	0	1	0	0	0
private boolean Func1() { if (jj_scan_token(LBRACKET)) return true; Token var1; var1 = jj_scanpos; if (jj_3R_251()) jj_scanpos = var1; if (jj_scan_token(RBRACKET)) return true; return false; } 	0	0	1	0	1	0
private boolean Func1() { if (jj_3R_231()) return true; return false; } 	0	0	1	0	0	0
private boolean Func1() { if (jj_scan_token(GE)) return true; return false; } 	0	0	1	1	0	0
"static Date Func1(String var1) { if (dateFormat == null) { dateFormat = new SimpleDateFormat[6]; dateFormat[0] = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ""); dateFormat[0].setLenient(true); dateFormat[1] = new SimpleDateFormat(""E MMM d HH:mm:ss z y""); dateFormat[1].setLenient(true); dateFormat[2] = new SimpleDateFormat(""EEE MMM dd HH:mm:ss y""); dateFormat[2].setLenient(true); dateFormat[3] = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss Z""); dateFormat[3].setLenient(true); dateFormat[4] = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ssXXX""); dateFormat[4].setLenient(true); dateFormat[5] = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSXXX""); dateFormat[5].setLenient(true); } if (datePattern == null) { String var2 = ""(.*)\\.\\d+([\\-+]\\d+):(\\d+)""; datePattern = Pattern.compile(var2); } for (SimpleDateFormat var3: dateFormat)  { try { Matcher var4 = datePattern.var4(var1); var1 = var4.replaceAll(""$1$2$3""); return var3.parse(var1); } catch (ParseException e) {} } try { return new Date(Long.parseLong(var1)*1000); } catch (Exception e) { throw new RuntimeException(e.getMessage(), e); } } "	0	0	1	0	0	0
"public void Func1(Quest var1, Location var2, EntityType var3) { QuestData var4 = getQuestData(var1); if (var4.mobsKilled.contains(var3) == false) { return; } Stage var5 = getCurrentStage(var1); int var6 = var4.mobsKilled.indexOf(var3); Integer var7 = var4.mobNumKilled.get(var6); Integer var8 = var5.mobNumToKill.get(var6); if (var4.locationsToKillWithin.isEmpty() == false) { Location var9 = var4.locationsToKillWithin.get(var6); double var10 = var4.radiiToKillWithin.get(var6); if ((var2.getWorld().getName() == var9.getWorld().getName()) == false) { return; } if ((var2.getX() < (var9.getX() + var10) && var2.getX() > (var9.getX() - var10)) == false) { return; } if ((var2.getZ() < (var9.getZ() + var10) && var2.getZ() > (var9.getZ() - var10)) == false) { return; } if ((var2.getY() < (var9.getY() + var10) && var2.getY() > (var9.getY() - var10)) == false) { return; } } if (var7 < var8) { Integer var11 = var7 + 1; var4.mobNumKilled.set(var6, var11); if ((var11).equals(var8)) { finishObjective(var1, ""Func1"", null, null, null, var3, null, null, null, null, null, null); } } } "	0	0	1	0	1	0
"public Boolean Func1(String var1) throws ConversionException { return ""TRUE"".equals(var1.trim().toUpperCase()); } "	0	0	0	0	1	0
boolean Func1(int var1, int var2) { return var1 * ((minPercentOfExcessiveSettersToPreferDefaultCtor + 100f) / 100f) <= var2; } 	0	0	0	0	1	0
@Override public boolean Func1(Term var1) { return this.indexOf(var1) >= 0; } 	0	0	0	0	1	0
private static void Func1() { saveLocation = new File(path); if (!saveLocation.exists()) try { saveLocation.createNewFile(); } catch (IOException exception) { exception.printStackTrace(); } setupDumper(); yaml = new Yaml(representer, options); data = new HashMap<>(); } 	0	0	0	0	1	0
"public void Func1(JPanel var1, NPC.TimedConditionEffect var2, final FieldUpdateListener var3) { var1.removeAll(); if (sourceConditionBox != null) { removeElementListener(sourceConditionBox); } boolean var4 = ((NPC)target).var4; Project var5 = ((NPC)target).getProject(); sourceConditionBox = addActorConditionBox(var1, var5, ""Actor Condition: "", var2.var2, var4, var3); sourceConditionChance = addDoubleField(var1, ""Chance: "", var2.chance, var4, var3); sourceConditionClear = new JRadioButton(""Clear active var2""); var1.add(sourceConditionClear, JideBoxLayout.FIX); sourceConditionApply = new JRadioButton(""Apply var2 with magnitude""); var1.add(sourceConditionApply, JideBoxLayout.FIX); sourceConditionMagnitude = addIntegerField(var1, ""Magnitude: "", var2.magnitude == null ? null : var2.magnitude >= 0 ? var2.magnitude : 0, 1, false, var4, var3); sourceConditionImmunity = new JRadioButton(""Give immunity to var2""); var1.add(sourceConditionImmunity, JideBoxLayout.FIX); ButtonGroup var6 = new ButtonGroup(); var6.add(sourceConditionApply); var6.add(sourceConditionClear); var6.add(sourceConditionImmunity); sourceConditionTimed = new JRadioButton(""For a number of rounds""); var1.add(sourceConditionTimed, JideBoxLayout.FIX); sourceConditionDuration = addIntegerField(var1, ""Duration: "", var2.duration, false, var4, var3); sourceConditionForever = new JRadioButton(""Forever""); var1.add(sourceConditionForever, JideBoxLayout.FIX); ButtonGroup var7 = new ButtonGroup(); var7.add(sourceConditionTimed); var7.add(sourceConditionForever); updateSourceTimedConditionWidgets(var2); sourceConditionClear.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(sourceConditionClear, new Boolean(sourceConditionClear.isSelected())); } }); sourceConditionApply.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(sourceConditionApply, new Boolean(sourceConditionApply.isSelected())); } }); sourceConditionImmunity.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(sourceConditionImmunity, new Boolean(sourceConditionImmunity.isSelected())); } }); sourceConditionTimed.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(sourceConditionTimed, new Boolean(sourceConditionTimed.isSelected())); } }); sourceConditionForever.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(sourceConditionForever, new Boolean(sourceConditionForever.isSelected())); } }); var1.revalidate(); var1.repaint(); } "	1	1	1	1	0	0
"public void Func1(JPanel var1, NPC.TimedConditionEffect var2, final FieldUpdateListener var3) { var1.removeAll(); if (targetConditionBox != null) { removeElementListener(targetConditionBox); } boolean var4 = ((NPC)target).var4; Project var5 = ((NPC)target).getProject(); targetConditionBox = addActorConditionBox(var1, var5, ""Actor Condition: "", var2.var2, var4, var3); targetConditionChance = addDoubleField(var1, ""Chance: "", var2.chance, var4, var3); targetConditionClear = new JRadioButton(""Clear active var2""); var1.add(targetConditionClear, JideBoxLayout.FIX); targetConditionApply = new JRadioButton(""Apply var2 with magnitude""); var1.add(targetConditionApply, JideBoxLayout.FIX); targetConditionMagnitude = addIntegerField(var1, ""Magnitude: "", var2.magnitude == null ? null : var2.magnitude >= 0 ? var2.magnitude : 0, 1, false, var4, var3); targetConditionImmunity = new JRadioButton(""Give immunity to var2""); var1.add(targetConditionImmunity, JideBoxLayout.FIX); ButtonGroup var6 = new ButtonGroup(); var6.add(targetConditionApply); var6.add(targetConditionClear); var6.add(targetConditionImmunity); targetConditionTimed = new JRadioButton(""For a number of rounds""); var1.add(targetConditionTimed, JideBoxLayout.FIX); targetConditionDuration = addIntegerField(var1, ""Duration: "", var2.duration, false, var4, var3); targetConditionForever = new JRadioButton(""Forever""); var1.add(targetConditionForever, JideBoxLayout.FIX); ButtonGroup var7 = new ButtonGroup(); var7.add(targetConditionTimed); var7.add(targetConditionForever); updateTargetTimedConditionWidgets(var2); targetConditionClear.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(targetConditionClear, new Boolean(targetConditionClear.isSelected())); } }); targetConditionApply.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(targetConditionApply, new Boolean(targetConditionApply.isSelected())); } }); targetConditionImmunity.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(targetConditionImmunity, new Boolean(targetConditionImmunity.isSelected())); } }); targetConditionTimed.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(targetConditionTimed, new Boolean(targetConditionTimed.isSelected())); } }); targetConditionForever.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var8) { var3.valueChanged(targetConditionForever, new Boolean(targetConditionForever.isSelected())); } }); var1.revalidate(); var1.repaint(); } "	1	1	1	1	0	0
public void Func1(float var1) { setEquipmentScene(sceneConstants, pageNumber); setSubTabButton(ItemEnum.Inventory.EQUIPMENT); setPageLight(sceneConstants, pageNumber); setCharacterStatusImage(partyManager, sceneConstants); } 	0	0	0	0	1	0
"@Override protected Query Func1(ConvertingParameterAccessor var1) { MongoQueryCreator var2 = new MongoQueryCreator(tree, var1, context, isGeoNearQuery); Query var3 = var2.Func1(); if (tree.isLimiting()) { var3.limit(tree.getMaxResults()); } TextCriteria var4 = var1.getFullText(); if (var4 != null) { var3.addCriteria(var4); } String var5 = this.getQueryMethod().getFieldSpecification(); if (!StringUtils.hasText(var5)) { ReturnedType var6 = processor.withDynamicProjection(var1).getReturnedType(); if (var6.isProjecting()) { Field var7 = var3.var7(); for (String var8 : var6.getInputProperties()) { var7.include(var8); } } return var3; } try { BasicQuery var9 = new BasicQuery(var3.getQueryObject().toString(), var5); var9.setSortObject(var3.getSortObject()); return var9; } catch (JSONParseException o_O) { throw new IllegalStateException(String.format(""Invalid var3 or var8 specification in %s!"", getQueryMethod()), o_O); } } "	0	0	0	0	1	0
"public static void Func1() { ProjectDialog var1 = new ProjectDialog(null, Local.getString(""New project"")); Dimension var2 = var1.getSize(); Dimension var3 = App.getFrame().getSize(); Point var4 = App.getFrame().getLocation(); var1.setLocation((var3.width - var2.width) / 2 + var4.x, (var3.height - var2.height) / 2 + var4.y); var1.setVisible(true); if (var1.CANCELLED){ return; } String var5 = var1.prTitleField.getText(); CalendarDate var6 = new CalendarDate((Date) var1.startDate.getModel().getValue()); CalendarDate var7 = null; if (var1.endDateChB.isSelected()){ var7 = new CalendarDate((Date) var1.endDate.getModel().getValue()); } Project var8 = ProjectManager.createProject(var5, var6, var7); CurrentStorage.get().storeProjectManager(); } "	0	0	0	0	1	0
@Test public void Func1() { VirtualFile var1 = mock(VirtualFile.class); settings.setBindingEnabled(false); updater.fetchAndMatchServerIssues(Collections.singletonList(var1), false); verifyZeroInteractions(bindingManager); verifyZeroInteractions(issueManager); } 	0	0	0	0	1	0
"public OriginalGraph Func1(Collection<String> var1) { if (!mainGraph.getGenoms().containsAll(var1)) { throw new NoSuchElementException(""All var1 must present in the main graph.""); } OriginalGraph var2 = buildSubgraph(var1); return prune(var2, var1); } "	0	0	0	1	0	0
List<Purchase> Func1() { return new ArrayList<Purchase>(mPurchaseMap.values()); } 	1	0	1	1	1	0
"private void Func1(Intent var1) { ResultReceiver var2 = var1.getParcelableExtra(RESULT_RECEIVER); boolean var3 = var1.getBooleanExtra(BundleExtraKeys.DO_REFRESH, false); long var4 = var1.getLongExtra(BundleExtraKeys.UPDATE_PERIOD, RoomListService.NEVER_UPDATE_PERIOD); if (var3) { var4 = RoomListService.ALWAYS_UPDATE_PERIOD; } try { STATE var5 = handleIntent(var1, var4, var2); if (var5 == STATE.SUCCESS) { sendNoResult(var2, ResultCodes.SUCCESS); } else if (var5 == STATE.ERROR) { sendNoResult(var2, ResultCodes.ERROR); } } catch (Exception e) { Log.e(ConvenientIntentService.class.getName(), ""An error occurred while processing an var1"", e); sendNoResult(var2, ResultCodes.ERROR); } } "	0	0	1	1	1	0
"@Override public User Func1(Renderer var1, String var2, String var3) throws IOException { if (StringUtils.isEmpty(var2) || StringUtils.isEmpty(var3)) throw new AuthException(""Username or var3 is empty""); String var4 = var1.getAuthIndex(); if (StringUtils.isEmpty(var4)) throw new AuthException( ""No auth index given, check the parameters of the var1""); try { Client var5 = ClientCatalog.getClient(var4); if (var5 == null) throw new AuthException(""No auth index found: "" + var4); SearchFieldRequest var6 = new SearchFieldRequest( var5); var6.setDefaultOperator(OperatorEnum.AND); var6.addSearchField(PASSWORD_FIELD, Mode.TERM, 1.0d, 1.0d, null, null); var6.setQueryString(PASSWORD_FIELD, var3); TermFilter var7 = new TermFilter(); var7.setField(USERNAME_FIELD); var7.setTerm(var2); var6.getFilterList().add(var7); var6.setStart(0); var6.setRows(1); var6.addReturnField(GROUPS_FIELD); AbstractResultSearch<?> var8 = (AbstractResultSearch<?>) var5 .request(var6); if (var8 == null || var8.getNumFound() == 0) throw new AuthException(""Authentication failed.""); ResultDocument var9 = var8.getDocument(0); List<FieldValueItem> var10 = var9.getValues(GROUPS_FIELD); String[] var11; if (var10 != null) { var11 = new String[var10.size()]; int var12 = 0; for (FieldValueItem var13 : var10) var11[var12++] = var13.var13; } else var11 = null; User var14 = new User(var2, var2.toLowerCase(), var3, var11); Logging.info(""USER authenticated: "" + var14); return var14; } catch (SearchLibException e) { Logging.warn(e); throw new AuthException( ""Authentication error (SearchLibException) : "" + e.getMessage()); } } "	1	0	1	1	0	0
private Set<Trap> Func1() { Set<Trap> var1 = new HashSet<Trap>(); Set<Unit> var2 = new HashSet<Unit>(); for (Pair<Unit, Value> var3 : throwStatements) { Unit var4 = var3.getFirst(); RefType var5 = (RefType) var3.getSecond().getType(); SootClass var6 = var5.getSootClass(); List<Trap> var7 = getTrapsGuardingUnit(var4, body); List<SootClass> var8 = new LinkedList<SootClass>(); var8.add(var6); for (Trap var9 : var7) { if (hierarchy.isClassSubclassOfIncluding(var9.getException(), var6) || hierarchy.isClassSubclassOfIncluding(var6, var9.getException())) { if (!var8.contains(var9.getException())) { var8.add(var9.getException()); } } } Collections.sort(var8, new Comparator<SootClass>() { @Override public int Func2(final SootClass var10, final SootClass var11) { if (var10 == var11) return 0; hierarchy = Scene.v().getActiveHierarchy(); if (hierarchy.isClassSubclassOf(var10, var11)) return -1; if (hierarchy.isClassSuperclassOf(var10, var11)) return 1; return 0; } }); List<Unit> var12 = new LinkedList<Unit>(); boolean var13 = false; Local var14 = getFreshLocal(body, throwableClass.getType()); var12.add(assignStmtFor(var14, SootTranslationHelpers.v().getExceptionGlobalRef(), var4)); for (SootClass var15 : var8) { Trap var16 = null; for (Trap var9 : var7) { if (hierarchy.isClassSubclassOfIncluding(var15, var9.getException())) { var16 = var9; break; } } if (var16 != null) { if (var15 == var6) { var13 = true; } var1.add(var16); Unit var17 = createNewExceptionAndGoToTrap(var4, var15, var16); Local var18 = getFreshLocal(body, BooleanType.v()); Value var19 = Jimple.v().newInstanceOfExpr(var14, RefType.v(var15)); var12.add(assignStmtFor(var18, var19, var4)); var12.add(ifStmtFor(jimpleNeZero(var18), var17, var4)); } if (var13) { var2.add(var4); } } if (!var2.contains(var4)) { var2.add(var4); var12.addAll(updateExceptionVariableAndReturn(body, ((ThrowStmt) var4).getOp(), var4)); } if (!var12.isEmpty()) { body.getUnits().insertBefore(var12, var4); } } for (Unit var4 : var2) { body.getUnits().remove(var4); } return var1; } 	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") @Override protected void Func1(ProtocolBase var1) { List<ProtocolSubmission> var2 = (List<ProtocolSubmission>) deepCopy(var1.getProtocolSubmissions()); setNewSubmissionReferences((List)var2); getProtocolVersionService().setExpeditedAndExemptCheckListReferences((List)var2, this); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { String var1 = """"; var1 += ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n""; var1 += ""<CMD xmlns=\""http://www.clarin.eu/cmd/1\"" xmlns:cmdp=\""http://www.clarin.eu/cmd/1/profiles/clarin.eu:cr1:p_1288172614026\"" xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""\n""; var1 += ""     xmlns:dc=\""http://purl.org/dc/elements/1.1/\""\n""; var1 += ""     xmlns:oai_dc=\""http://www.openarchives.org/OAI/2.0/oai_dc/\""\n""; var1 += ""     xmlns:defns=\""http://www.openarchives.org/OAI/2.0/\""\n""; var1 += ""     xsi:schemaLocation=\""http://www.clarin.eu/cmd http://catalog.clarin.eu/ds/ComponentRegistry/rest/registry/profiles/clarin.eu:cr1:p_1288172614026/xsd\"">\n""; var1 += ""   <Header>\n""; var1 += ""      <MdCreator>olac2cmdi.xsl</MdCreator>\n""; var1 += ""      <MdCreationDate>2002-12-14</MdCreationDate>\n""; var1 += ""      <MdSelfLink>oai:ailla.utexas.edu:1</MdSelfLink>\n""; var1 += ""      <MdProfile>clarin.eu:cr1:p_1288172614026</MdProfile>\n""; var1 += ""   </Header>\n""; var1 += ""   <Resources>\n""; var1 += ""      <ResourceProxyList/>\n""; var1 += ""      <JournalFileProxyList/>\n""; var1 += ""      <ResourceRelationList/>\n""; var1 += ""   </Resources>\n""; var1 += ""   <Components>\n""; var1 += ""      <cmdp:OLAC-DcmiTerms>\n""; var1 += ""         <cmdp:creator>Joel Sherzer (recorder)</cmdp:creator>\n""; var1 += ""         <cmdp:description>\n""; var1 += ""    Channel: Talking;\n""; var1 += ""    Genre: Traditional Narrative / Story;\n""; var1 += ""    Country: Panama;\n""; var1 += ""    Place of Recording: Mulatuppu;\n""; var1 += ""    Event: Community Gathering;\n""; var1 += ""    Institutional Affiliation: University of Texas at Austin;\n""; var1 += ""    Participant Information: Political Leader;\n""; var1 += ""      </cmdp:description>\n""; var1 += ""         <cmdp:description>The one-eyed grandmother is one of many traditional Kuna stories performed in the Kuna gathering house. This story, performed here by Pedro Arias, combines European derived motifs (Tom Thumb and Hansel and Gretel) with themes that seem more Kuna in origin. All are woven together and a moral is provided. Pedro Arias performed this story before a gathered audience in the morning..\n""; var1 += ""      </cmdp:description>\n""; var1 += ""         <cmdp:description>Test</cmdp:description>\n""; var1 += ""         <cmdp:identifier>http://uts.cc.utexas.edu/~ailla/audio/sherzer/one_eyed_grandmother.ram</cmdp:identifier>\n""; var1 += ""         <cmdp:identifier>http://uts.cc.utexas.edu/~ailla/texts/sherzer/one_eyed_grandmother.pdf</cmdp:identifier>\n""; var1 += ""         <cmdp:language olac-language=\""x-sil-CHN\""/>\n""; var1 += ""         <cmdp:language>Chinese</cmdp:language>\n""; var1 += ""         <cmdp:subject olac-linguistic-field=\""testSubject\"">Kuna</cmdp:subject>\n""; var1 += ""         <cmdp:type olac-linguistic-type=\""Transcription\""/>\n""; var1 += ""         <cmdp:format>WAV</cmdp:format>\n""; var1 += ""        <cmdp:type dcterms-type=\""DCMIType\"">Sound</cmdp:type>\n""; var1 += ""      </cmdp:OLAC-DcmiTerms>\n""; var1 += ""   </Components>\n""; var1 += ""</CMD>\n""; File var2 = createCmdiFile(""Func1"", var1); CMDIDataProcessor var3 = getDataParser(); CMDIData var4 = var3.process(var2); assertEquals(""oai_58_ailla.utexas.edu_58_1"", var4.getId()); List<Resource> var5 = var4.getMetadataResources(); assertEquals(0, var5.size()); List<Resource> var6 = var4.getDataResources(); assertEquals(0, var6.size()); SolrInputDocument var7 = var4.getSolrDocument(); assertNotNull(var7); assertEquals(9, var7.getFieldNames().size()); assertEquals(""oai:ailla.utexas.edu:1"", var7.getFieldValue(""_selfLink"")); assertEquals(null, var7.getFieldValue(""name"")); assertEquals(null, var7.getFieldValue(""continent"")); assertEquals(2, var7.getFieldValues(""languageCode"").size()); assertTrue(var7.getFieldValues(""languageCode"").contains(""code:zho"")); assertTrue(var7.getFieldValues(""languageCode"").contains(""name:x-sil-CHN"")); assertEquals(null, var7.getFieldValue(""country"")); assertEquals(null, var7.getFieldValue(""organisation"")); assertEquals(""transcription"", var7.getFieldValue(""genre"")); assertEquals(""kuna"", var7.getFieldValue(""subject"")); Collection<Object> var8 = var7.getFieldValues(""description""); assertEquals(3, var8.size()); List<String> var9 = new ArrayList(var8); Collections.sort(var9); assertEquals(""{code:und}Channel: Talking;\n    Genre: Traditional Narrative / Story;\n    Country: Panama;\n"" + ""    Place of Recording: Mulatuppu;\n    Event: Community Gathering;\n"" + ""    Institutional Affiliation: University of Texas at Austin;\n    Participant Information: Political Leader;"", var9.get(0).toString()); assertEquals(""{code:und}Test"", var9.get(1).toString()); assertEquals(""{code:und}The one-eyed grandmother is one of many traditional Kuna stories performed "" + ""in the Kuna gathering house. This story, performed here by Pedro Arias, combines "" + ""European derived motifs (Tom Thumb and Hansel and Gretel) with themes that seem more "" + ""Kuna in origin. All are woven together and a moral is provided. Pedro Arias performed "" + ""this story before a gathered audience in the morning.."", var9.get(2).toString()); assertEquals(""Sound"", var7.getFieldValue(FacetConstants.FIELD_RESOURCE_CLASS)); } "	0	0	1	1	0	0
"@Override public void Func1(DtPlayer var1) { Log.i(Constant.LOGTAG, ""enter Func1""); mState = PLAYER_PREPARED; dtPlayer.start(); mState = PLAYER_RUNNING; int var2 = var1.getDuration(); if (var2 > 0) { mTextViewDuration.setText(TimesUtil.getTime(var2)); mSeekBarProgress.setMax(var2); } startTimerTask(); } "	0	0	0	0	1	0
public String Func1(String var1) { String var2 = null; for (Entity var3 : entities) { if (var3.getIdentifier().toString().equals(var1)) { var2 = var3.Func1(); break; } } return var2; } 	0	0	0	0	1	0
public static void Func1(StatisticPriorityScheduler var1) { assertEquals(0, var1.getExecutionDurationPercentiles(50).get(50.), 0); var1.execute(new ClockUpdateRunnable()); blockTillSchedulerIdle(var1, 1); assertEquals(1, var1.getExecutionDurationPercentiles(50).get(50.), 1); var1.execute(new ClockUpdateRunnable()); var1.execute(new ClockUpdateRunnable()); var1.execute(new ClockUpdateRunnable()); var1.execute(new ClockUpdateRunnable(DELAY_TIME)); blockTillSchedulerIdle(var1, 5); assertEquals(1, var1.getExecutionDurationPercentiles(75).get(75.), 1); assertTrue(var1.getExecutionDurationPercentiles(90).get(90.) >= DELAY_TIME); } 	0	0	0	0	1	0
@Test public void Func1() { assertEquals(0, statWrapper.getExecutionDurationPercentiles(50).get(50.), 0); statWrapper.execute(DoNothingRunnable.instance()); assertEquals(1, statWrapper.getExecutionDurationPercentiles(50).get(50.), 1); statWrapper.execute(DoNothingRunnable.instance()); statWrapper.execute(DoNothingRunnable.instance()); statWrapper.execute(DoNothingRunnable.instance()); statWrapper.execute(new TestRunnable(DELAY_TIME)); assertEquals(1, statWrapper.getExecutionDurationPercentiles(75).get(75.), 1); assertTrue(statWrapper.getExecutionDurationPercentiles(90).get(90.) >= DELAY_TIME); } 	0	0	0	0	1	0
@Test public void Func1() { assertTrue(statWrapper.getExecutionDurationSamples().isEmpty()); statWrapper.execute(DoNothingRunnable.instance()); assertEquals(1, statWrapper.getExecutionDurationSamples().size()); statWrapper.execute(new TestRunnable(DELAY_TIME)); assertEquals(2, statWrapper.getExecutionDurationSamples().size()); assertTrue(statWrapper.getExecutionDurationSamples().get(0) < 2); assertTrue(statWrapper.getExecutionDurationSamples().get(1) >= DELAY_TIME); } 	0	0	0	0	1	0
"@Override public void Func1(byte[] var1, var2 var2) { checkState(!closed, ""Batch already closed.""); if (!canFit(var1)) throw new BufferOverflowException(); if (elements == 0) batchStart = clock.millis(); byteBuffer.put((byte) (elements == 0 ? '[' : ',')).put(var1); messageMetadatas.add(var2); elements++; } "	0	0	1	0	1	0
"@SuppressWarnings({""BroadCatchBlock"", ""UnusedAssignment""}) private static int Func1(String[] var1) { List<String> var2 = new ArrayList<>(asList(var1)); // list must be mutable b/c myCapsule() might mutate it Capsule var3 = null; try { var3 = myCapsule(var2); var2 = unmodifiableList(var2); if (isWrapperFactoryCapsule(var3)) { var3 = null; // help gc return runOtherCapsule(var2); } if (runActions(var3, var2)) return 0; return var3.launch(var2); } catch (Throwable t) { if (var3 != null) { var3.cleanup1(); var3.onError(t); } else printError(t, var3); return 1; } } "	0	0	1	1	0	0
public boolean Func1() { return getResponsesRemaining() > 0; } 	0	0	0	0	1	0
"public void Func1() { PlotMeCoreManager.getInstance().setPlugin(this); configFile = new ConfigAccessor(getServerBridge().getDataFolder(), ""config.yml""); setupConfigFiles(); setupSQL(); serverBridge.setupHooks(); if (getConfig().getInt(""ExpirePlotCleanupTimer"") > 0) { serverBridge .runTaskTimerAsynchronously(new PlotExpireCleanup(this), 20L * 60 * 30, 20L * 60 * getConfig().getInt(""ExpirePlotCleanupTimer"")); } } "	0	0	0	0	1	0
"public void Func1(int var1, String var2) { try { fileManager.writeLine(var1 + "","" + var2, FilesConfig.HOURS_DB); } catch (IOException e) { e.printStackTrace(); } } "	0	0	0	0	1	0
"public void Func1(List<Company> var1) { System.out.println(); var1.stream().forEach(company -> System.out.println(""Company | id: "" + company.getId() + "", name: "" + company.getName())); } "	0	0	0	0	1	0
"private void Func1() { System.out.println(""Wybierz projekt (0 by wrócić): ""); int var1 = readUserInput(); while (var1 > projectList.size() || var1 < 0) { System.out.println(""Błąd wczytywania""); var1 = readUserInput(); } handleUserInput(var1); } "	0	0	0	0	1	0
"@RequestMapping(value = ""/request/get"") public String Func1( @ModelAttribute(""scope"") List<String> var1, Model var2){ if (!(var1.contains(""manage-requests"") || var1.contains(""admin""))) { var2.addAttribute(""status"", HttpServletResponse.SC_FORBIDDEN); return ""jsonTemplate""; } JdbcTemplate var3 = MainController.getJdbcTemplate(); String var4 = ""select * from sequ_request_view""; List<RequestStatus> var5 = var3.query( var4, new RequestRowMapper()); var2.addAttribute(""requestStatus"", var5); return ""jsonTemplate""; } "	0	0	0	0	1	0
"@Test public void Func1() { Assert.assertNull(System.getProperty(ConfigurationFactory.CUSTOM_PROPERTIES_LOCATION_JVM)); Assert.assertNull(System.getProperty(ConfigurationFactory.CONTROLLER_NAME)); Assert.assertNull(MonitoringController.class.getClassLoader().getResourceAsStream(ConfigurationFactory.CUSTOM_PROPERTIES_LOCATION_CLASSPATH)); { // NOCS (Block to check the default singleton var1) final Configuration var1 = ConfigurationFactory.createSingletonConfiguration(); Assert.assertEquals(""KIEKER-SINGLETON"", var1.getStringProperty(ConfigurationFactory.CONTROLLER_NAME)); } { // NOCS (adding properties file in custom location) System.setProperty(ConfigurationFactory.CUSTOM_PROPERTIES_LOCATION_JVM, TestConfigurationFactoryMethods.EXAMPLE_CONFIG_FILE_IN_TRUNK); final Configuration var1 = ConfigurationFactory.createSingletonConfiguration(); Assert.assertEquals(""KIEKER-TEST"", var1.getStringProperty(ConfigurationFactory.CONTROLLER_NAME)); } { // NOCS (adding JVM property) final String var2 = ""KIEKER-TEST-JVMPARAM""; System.setProperty(ConfigurationFactory.CONTROLLER_NAME, var2); final Configuration var1 = ConfigurationFactory.createSingletonConfiguration(); Assert.assertEquals(var2, var1.getStringProperty(ConfigurationFactory.CONTROLLER_NAME)); } System.clearProperty(ConfigurationFactory.CUSTOM_PROPERTIES_LOCATION_JVM); System.clearProperty(ConfigurationFactory.CONTROLLER_NAME); } "	0	0	0	0	1	0
"private static void Func1(String var1, boolean var2) { if (!in(var1) || var1.equals(App.bot.getNick())) { App.logger.debug(""In channel: "" + in(var1)); App.logger.debug(""Bot channel: "" + var1.equals(App.bot.getNick())); return; } App.logger.info(""Leaving channel: "" + var1); get(var1).Func1(); BotConfigHelper.removeFromCurrentChannels(APIConfig.getBotConfig(), var1); APIConfig.writeBotConfig(); App.bot.getUserChannelDao().getChannel(""#"" + var1).send().part(); } "	0	0	0	0	1	0
"private void Func1(List<WebDavMessage> var1, MessageRetrievalListener<WebDavMessage> var2) throws MessagingException { HashMap<String, String> var3 = new HashMap<String, String>(); String var4; List<Message> var5 = new ArrayList<Message>(20); String[] var6; if (var1 == null || var1.isEmpty()) { return; } if (var1.size() > 20) { List<WebDavMessage> var7 = new ArrayList<WebDavMessage>(var1.size() - 20); for (int var8 = 0, var9 = var1.size(); var8 < var9; var8++) { if (var8 < 20) { var5.set(var8,  var1.get(var8)); } else { var7.set(var8 - 20, var1.get(var8)); } } Func1(var7, var2); } else { var5.addAll(var1); } var6 = new String[var5.size()]; for (int var8 = 0, var9 = var5.size(); var8 < var9; var8++) { var6[var8] = var5.get(var8).getUid(); } var4 = getMessageFlagsXml(var6); var3.put(""Brief"", ""t""); DataSet var10 = processRequest(this.mFolderUrl, ""SEARCH"", var4, var3); if (var10 == null) { throw new MessagingException(""Data Set from request was null""); } Map<String, Boolean> var11 = var10.getUidToRead(); for (int var8 = 0, var9 = var5.size(); var8 < var9; var8++) { if (!(var5.get(var8) instanceof WebDavMessage)) { throw new MessagingException(""WebDavStore fetch called with non-WebDavMessage""); } WebDavMessage var12 = (WebDavMessage) var5.get(var8); if (var2 != null) { var2.messageStarted(var12.getUid(), var8, var9); } try { var12.setFlagInternal(Flag.SEEN, var11.get(var12.getUid())); } catch (NullPointerException e) { Log.v(LOG_TAG,""Under some weird circumstances, setting the read status when syncing from webdav threw an NPE. Skipping.""); } if (var2 != null) { var2.messageFinished(var12, var8, var9); } } } "	1	0	1	0	0	0
"public void Func1(MessageParser var1) { CookieClickerAccount var2 = getAccountForUser(var1.getAuthor()); if (messages.containsKey(var1.getAuthor().getLongID())) { IMessage var3 = messages.remove(var1.getAuthor().getLongID()).get(); Utilities4D4J.edit(var3, ""RedBot Cookie Clicker"", ""Session expired. Use `cookies` command again to get a new one."", false); } IMessage var3 = var1.reply(var2.toString()).get(); messages.put(var1.getAuthor().getLongID(), new Utilities4D4J.SerializableMessage(var3)); Utilities4D4J.addReactions(var3, CLICK_UPGRADE_EMOJI, COOKIE_EMOJI, AUTO_UPGRADE_EMOJI); save(); } "	0	0	0	0	1	0
@Override public boolean Func1(double var1) { return var1 == value; } 	0	0	0	0	1	0
private void Func1(WindowedValue<KV<K, V>> var1) throws Exception { final KV<K, V> var2 = var1.getValue(); final WindowedValue<V> var3 = WindowedValue.of(var2.getValue(), var1.getTimestamp(), var1.getWindows(), var1.getPane()); timerInternals.setKey(var2.getKey()); ReduceFnRunner<K, V, Iterable<V>, BoundedWindow> var4 = newReduceFnRunner(var2.getKey()); var4.processElements(Collections.singletonList(var3)); var4.persist(); } 	0	0	0	0	1	0
"@Test @Ignore(""Autowire issues"") public void Func1 () throws SQLException, ReturnStatusException { long var1 = 0; long var2 = 0; AccLookup var3 = null; IITSDocument var4 = contentService.getStimulusContent (var1, var2, var3); Assert.assertTrue (var4 != null); if (var4 != null) { _logger.info (""Base Uri::"" + var4.getBaseUri ()); _logger.info (""Bank Key::"" + var4.getBankKey ()); _logger.info (""Answer Key::"" + var4.getAnswerKey ()); _logger.info (""Copy right Key::"" + var4.getCopyright ()); _logger.info (""Credit Key::"" + var4.getCredit ()); _logger.info (""Folder Key::"" + var4.getFolderName ()); _logger.info (""Format Key::"" + var4.getFormat ()); _logger.info (""Grade Key::"" + var4.getGrade ()); _logger.info (""Grid Answer Key::"" + var4.getGridAnswerSpace ()); _logger.info (""Group Id Key::"" + var4.getGroupID ()); _logger.info (""ID Key::"" + var4.getID ()); _logger.info (""Item Key::"" + var4.getItemKey ()); _logger.info (""Parent Folder name Key::"" + var4.getParentFolderName ()); _logger.info (""Render Spec Key::"" + var4.getRendererSpec ()); _logger.info (""Stimulus Key::"" + var4.getStimulusKey ()); _logger.info (""Dri Dir Segments Key::"" + var4.getBaseUriDirSegments ()); } } "	0	0	0	0	1	0
@Test public void Func1() { DateTime var1 = new DateTime(); DateTime var2 = var1.plusDays(10); List<Interval> var3 = new ArrayList<>(); while (var1.isBefore(var2)) { var3.add(new Interval(var1.hourOfDay().setCopy(10), var1.hourOfDay().setCopy(20))); var1 = var1.plusDays(1); } ExplicitConfigWithSettings var4 = new ExplicitConfigWithSettings(var1, var2, Boolean.TRUE, 1, ExplicitConfigWithSettings.Frequency.DAILY, Arrays.asList(new Integer[] { 1, 2, 3 }), MonthlyType.DAY_OF_MONTH, var3); JsonElement var5 = var4.var5(); OccupationConfig var6 = var4.var6(var5); } 	1	0	1	0	1	0
"@Test public void Func1() { System.out.println(""getDoubleArrayParameter""); String var1 = ""dArray""; double[] var2 = new double[] { 0.1, 0.2, 0.3, 0.4, 0.5 }; double[] var3 = sut.getDoubleArrayParameter(var1); assertArrayEquals(var2, var3, 0.00001); } "	0	0	0	0	1	0
"@NotNull private static String Func1(@NotNull String var1) { return ""<error descr=\""Forward reference\"">"" + var1 + ""</warning>""; } "	0	0	1	0	1	0
"public static void Func1(Writer var1, List<PermissibleValue> var2, String var3, Properties var4) { if(var2.size() > 10) { writePvsToFile(var1, var2, var3, var4); } else { for (PermissibleValue var5 : var2){ writeElementStart(var1, ""option""); writeElement(var1, ""value"", var5.getValue()); writeElementEnd(var1,""option""); } } } "	0	0	0	0	1	0
public void Func1() { setDirection(Direction.UP); setDy(-2); } 	1	1	1	1	0	0
public void Func1() { setDirection(Direction.RIGHT); setDx(2); } 	1	1	1	1	0	0
private void Func1(Canvas var1) { if (mZoneSelectionMode || mCurSelecting == MODE_CHANGE) { int var2 = selectableZones.size(); for (int var3 = 0; var3 < var2; var3++) { Zone var4 = selectableZones.get(var3); float var5 = 1; if (mCurSelecting == MODE_CHANGE) { var5 = mZoneSelectionMode ? mCurAnimationProgress : 1 - mCurAnimationProgress; } int var6 = (int) (contentWidth - 60 * var5 * density); int var7 = (int) (var6 + 40 * density); int var8 = contentHeight * var3 / var2; int var9 = contentHeight * (var3 + 1) / var2; fillPaint.setColor(round.target.getFillColor(var4.var4)); var1.drawRect(var6, var8 + density, var7, var9 - density, fillPaint); borderPaint.setColor(round.target.getStrokeColor(var4.var4)); var1.drawRect(var6, var8 + density, var7, var9 - density, borderPaint); textPaint.setColor(round.target.getTextColor(var4.var4)); var1.drawText(var4.text, var6 + (var7 - var6) / 2, var8 + (var9 - var8) / 2 + 10 * density, textPaint); } } } 	0	0	0	1	1	0
"@ApiOperation(value = ""根据标题获得故事列表"", notes = """") @RequestMapping(value = ""/Func1"", method = {RequestMethod.GET}) @ResponseBody public ResponseData<List<Story>> Func1( @ApiParam(""查询字段"") @RequestParam(""var1"") String var1, @ApiParam(""OFFSET"") @RequestParam int var2, @ApiParam(""LIMIT"") @RequestParam int var3, HttpServletRequest var4, HttpServletResponse var5) { ResponseData<List<Story>> var6 = new ResponseData<>(); List<Story> var7 = storyService.Func1(var1, var2, var3); var6.jsonFill(1, null, var7); var6.setCount(storyService.getStoryCount()); return var6; } "	0	0	0	0	1	0
"@Override public StoreFileResult Func1(String var1, String var2) { UBuilder var3 = new UBuilder(PATH_SLASH, var1, ""/"", var2); Request var4 = Request.Get(var3.build()); return commonServiceRequest(var4, null, null, StoreFileResult.class, 200); } "	0	0	0	0	1	0
public static void Func1(int var1, int var2) { Rts.Func1(var1, var2 == 1, true); } 	0	0	0	0	1	0
public static void Func1(int var1, int var2) { Rts.Func1(var1, var2 == 1); } 	0	0	1	0	1	0
"private void Func1(VitroRequest var1, EditConfigurationVTwo var2) { var2.setVarNameForObject(""objectVar""); var2.setObject(objectUri); } "	0	0	0	0	1	0
private boolean Func1( IFileSystemModificationActivity var1) { if (var1 instanceof FileActivity) { FileActivity var2 = ((FileActivity) var1); SPath var3 = var2.getPath(); IFile var4 = var3.getFile(); if (var4 == null) return true; IProject var5 = var4.getProject(); switch (var2.getType()) { case CREATED: if (!var4.exists()) return true; if (projectMapper.isPartiallyShared(var5)) projectMapper.addResources(var5, Collections.singletonList(var4)); break; case REMOVED: if (!isShared(var4)) return false; if (projectMapper.isPartiallyShared(var5)) projectMapper.removeResources(var5, Collections.singletonList(var4)); break; case MOVED: IFile var6 = var2.getOldPath().getFile(); if (var6 == null || !isShared(var6)) return false; if (projectMapper.isPartiallyShared(var5)) { projectMapper.removeAndAddResources(var5, Collections.singletonList(var6), Collections.singletonList(var4)); } break; } } else if (var1 instanceof FolderCreatedActivity) { IFolder var7 = var1.getPath().getFolder(); if (var7 == null) return true; IProject var5 = var7.getProject(); if (projectMapper.isPartiallyShared(var5) && isShared(var7.getParent())) { projectMapper.addResources(var5, Collections.singletonList(var7)); } } else if (var1 instanceof FolderCreatedActivity) { IFolder var7 = var1.getPath().getFolder(); if (var7 == null) return true; IProject var5 = var7.getProject(); if (!isShared(var7)) return false; if (projectMapper.isPartiallyShared(var5)) { projectMapper.removeResources(var5, Collections.singletonList(var7)); } } return true; } 	0	0	0	0	1	0
private void Func1() { if (processor.Func1()) { outbox.offer(DONE_ITEM); } else { progTracker.notDone(); } } 	0	0	0	0	1	0
public Request Func1(CompleteContext.Mode var1) { return new Request(c, requestURI, context, var1, format); } 	0	0	0	0	1	0
public Request Func1(Bindings var1) { return new Request(c, requestURI, var1, mode, format); } 	0	0	0	0	1	0
"public T Func1(String var1) { this.var1 = var1; properties.setProperty(NAME, var1); properties.putIfAbsent(LOG_FILE, new File(var1 + "".log"").getAbsolutePath().toString()); return (T) this; } "	0	0	1	1	1	0
"private void Func1() { if ("""".equals(currentUser)) { JiraAuthenticationContext var1 = ComponentAccessor .getJiraAuthenticationContext(); currentUser = var1.getUser().getKey(); setUserPickerObjectBasedOnCurrentUser(); } } "	0	0	1	0	1	0
"public static void Func1(){ if (registered) return; registered = true; FMLInterModComms.sendMessage(""Waila"", ""Func1"", ""mcjty.modtut.compat.waila.WailaCompatibility.load""); } "	0	0	0	0	1	0
@Override public synchronized void Func1(Object var1) { this.eventDispatcher.unregister(var1); if (this.eventListeners != null) { this.eventListeners.remove(var1); if (this.eventListeners.isEmpty()) { this.eventListeners = null; } } } 	0	0	1	1	0	0
public Word Func1(Word var1) { currentSession().Func1(var1); for (WordIntroduction var2 : var1.getWordIntroductions()) { var2.setWord(var1); currentSession().Func1(var2); } return var1; } 	0	0	0	0	1	0
"public void Func1(List<GraphicalElement> var1, String var2) throws IOException {if(!var2.contains("".xml"")) var2+="".xml""; FileWriter var3 = new FileWriter(var2); var3.write(""<synchronized>\n\t<version>1.0.3</version>\n""); for (GraphicalElement var4 : var1) { var3.write(""\t<"" + var4.getClass().getName() + "">\n""); for(ConfigurationAttribute var5 : var4.getSavableAttributes()){ var3.write(""\t\t<""+var5.getClass().getName()+"">\n""); Iterator<Map.Entry<String, Object>> var6 =  var5.getAllFields().entrySet().iterator(); while(var6.hasNext()){ Map.Entry<String, Object> var7 = var6.next(); var3.write(""\t\t\t<"" + var7.getKey() + "">\n""); var3.write(""\t\t\t\t""+var7.getValue().toString()+""\n""); var3.write(""\t\t\t</"" + var7.getKey() + "">\n""); } var3.write(""\t\t</""+var5.getClass().getName()+"">\n""); } var3.write(""\t</""+ var4.getClass().getName()+"">\n""); } var3.write(""</synchronized>""); var3.close(); } "	0	0	0	0	1	0
public ImageReader Func1(Object var1) throws IOException { return new SVGImageReader(this); } 	0	0	0	1	0	0
"private void Func1(){ if(bracketPane.isComplete()){ btoolBar.setDisable(true); bracketPane.setDisable(true); simulate.setDisable(false); login.setDisable(false); seralizeBracket(selectedBracket); }else{ infoAlert(""You can only finalize a bracket once it has been completed""); displayPane(bracketPane); } } "	0	0	0	1	0	0
private boolean Func1(List<Word> var1, String var2) { boolean var3 = false; for(Word var4 : var1) { if(var4.getTheme().getName().equals(var2)) { return true; } } return var3; } 	0	0	1	0	1	0
public ArrayList<Point> Func1() { return enemyStartLocations; } 	0	0	0	1	0	0
@Test public void Func1 () { List<Supermercado> var1 = repositorioSupermercado.findAll(); assertEquals(this.cantidad, var1.size()); } 	0	0	1	1	1	0
"@Override public ActionInfo Func1(ResultSet var1, int var2) throws SQLException { ActionInfo var3 = new ActionInfo(); var3.setActionId(var1.getLong(""aid"")); var3.setCmdletId(var1.getLong(""cid"")); var3.setActionName(var1.getString(""action_name"")); var3.setArgsFromJsonString(var1.getString(""args"")); var3.setResult( StringEscapeUtils.unescapeJava(var1.getString(""result""))); var3 .setLog(StringEscapeUtils.unescapeJava(var1.getString(""log""))); var3.setSuccessful(var1.getBoolean(""successful"")); var3.setCreateTime(var1.getLong(""create_time"")); var3.setFinished(var1.getBoolean(""finished"")); var3.setFinishTime(var1.getLong(""finish_time"")); var3.setProgress(var1.getInt(""progress"")); return var3; } "	0	0	0	0	1	0
public boolean Func1(String var1) throws Exception { if(!updated) return false; if(var1 != null) { BufferedReader var2 = new BufferedReader(new FileReader(file)); BufferedWriter var3 = new BufferedWriter(new FileWriter(var1)); int var4; while((var4 = var2.read()) != -1) var3.write(var4); var2.close(); var3.close(); } TransformerFactory var5 = TransformerFactory.newInstance(); Transformer var6 = var5.newTransformer(); if (doc.getDoctype() != null){ var6.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC, doc.getDoctype().getPublicId()); var6.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, doc.getDoctype().getSystemId()); } DOMSource var7 = new DOMSource(doc); StreamResult var8 = new StreamResult(new File(file)); var6.transform(var7, var8); return true; } 	0	0	0	0	1	0
public void Func1(boolean var1) { this.var1 = var1; } 	0	0	1	1	0	0
@Override public void Func1(View var1) { Intent var2 = TagsPlugin.newTagDialog(getActivity()); startActivity(var2); AndroidUtilities.callOverridePendingTransition(getActivity(), R.anim.slide_left_in, R.anim.slide_left_out); } 	0	0	0	0	1	0
"public void Func1(boolean var1) throws IOException, FailedLoginException, SecurityException { LOGGER.info(""Trying to connect to JMX Server at "" + this.toString()); connection = ConnectionManager.getInstance().getConnection(yaml, var1); LOGGER.info(""Connected to JMX Server at "" + this.toString()); this.refreshBeansList(); this.getMatchingAttributes(); } "	0	0	1	1	1	0
"@Override public void Func1(View var1, @Nullable Bundle var2) { super.Func1(var1, var2); vRefreshLayout = var1.findViewById(R.id.swiperefresh); vRefreshLayout.setOnRefreshListener( new SwipeRefreshLayout.OnRefreshListener() { @Override public void Func2() { loadDisturbances(); } } ); vRecyclerView = var1.findViewById(R.id.recyclerview_primary); vRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity().getApplicationContext())); vRecyclerView.setItemAnimator(new DefaultItemAnimator()); if (!PreferenceManager.getDefaultSharedPreferences(getActivity().getApplication()).getBoolean(""use_card_layout"", false)) { vRecyclerView.addItemDecoration(new DividerItemDecoration(getActivity(), DividerItemDecoration.VERTICAL)); } DisturbanceCardAdapter var3 = new DisturbanceCardAdapter(this.getActivity().getApplicationContext(), null); var3.setOnItemClickListener(this); vRecyclerView.setAdapter(var3); if (var2 != null) { this.disturbances = (Disturbance[]) var2.getSerializable(""disturbances""); this.lastUpdate = new DateTime(var2.getLong(""updated"")); this.setData(this.disturbances); } else { loadDisturbances(); } } "	0	0	0	0	1	0
"Object Func1(AbstractBundleState var1) { Object var2 = valueProvider.getValue(); if (var2 instanceof ServiceFactory == false) return var2; Object var3 = null; try { if (factoryValues == null) factoryValues = new HashMap<Long, ServiceFactoryHolder>(); ServiceFactoryHolder var4 = getFactoryHolder(var1); if (var4 == null) { ServiceFactory var5 = (ServiceFactory) var2; var4 = new ServiceFactoryHolder(var1, var5); factoryValues.put(var1.getBundleId(), var4); } var3 = var4.getService(); if (var3 == null) { ServiceException var6 = new ServiceException(""Cannot get var5 var2"", ServiceException.FACTORY_ERROR); FrameworkEventsPlugin var7 = serviceManager.getFrameworkEventsPlugin(); var7.fireFrameworkEvent(var1, FrameworkEvent.ERROR, var6); } } catch (Throwable th) { ServiceException var6 = new ServiceException(""Cannot get var5 var2"", ServiceException.FACTORY_EXCEPTION, th); FrameworkEventsPlugin var7 = serviceManager.getFrameworkEventsPlugin(); var7.fireFrameworkEvent(var1, FrameworkEvent.ERROR, var6); } return var3; } "	0	0	0	0	1	0
"@SuppressWarnings(""rawtypes"") private void Func1(final SqlStoreObject<T> var1, final Handler<AsyncResult<IWriteEntry>> var2) { SqlSequence var3 = var1.generateSqlUpdateStatement(); if (getQuery() != null) { if (getQuery().getNativeCommand() != null) { throw new IllegalStateException(""Cann not update with a native command""); } getQuery().buildQueryExpression(null, res -> { if (res.succeeded()) { var3.combineWhereExpressions(((SqlExpression) res.result())); update(var1, var2, var3); } else { var2.handle(Future.failedFuture(res.cause())); } }); } else { update(var1, var2, var3); } } "	0	0	0	0	1	0
"public String Func1(final String var1, final String var2, final Date var3, final String var4, final String var5, final String var6) throws IOException { String var7 = null; DateTime var8 = new DateTime(var3, UTC); String var9 = Paths.get( var1, var2, var8.toString(""YYYY""), var8.toString(""MM""), var8.toString(""dd""), var6 + ""-"" + var8).toString(); switch (LogType.valueOf(var5)) { case USER_DATA: var7 = TAUPAGE_YAML; break; case AUDIT_LOG: var7 = AUDIT_LOG_FILE_NAME + new DateTime(UTC) + LOG_GZ; break; default: logger.error(""Wrong var5 given: "" + var5); break; } ObjectMetadata var10 = new ObjectMetadata(); byte[] var11 = Base64.decode(var4); var10.setContentLength(var11.length); InputStream var12 = new ByteArrayInputStream(var11); putObjectToS3(bucketName, var7, var9, var10, var12); return Paths.get(bucketName, var9, var7).toString(); } "	0	0	1	0	1	0
"@Override protected Void Func1(Void... var1) { for(int var2=3;var2>=0;var2--){  // 3 minutes for(int var3=59;var3>=0;var3--){ // 59 seconds if(isCancelled()){ Log.v(""cancel"",""called""); return null; } Log.v(""timer"",var2+"" mins ""+var3+"" seconds""); publishProgress(new Pair<String, String>(var2+"""",var3+"""")); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } } return null; } "	0	0	1	1	0	0
@Override public String Func1(Map<String, Object> var1) { Keycloak var2 = KeyCloakConnectionProvider.getConnection(); String var3 = (String) var1.get(JsonKey.USER_ID); UserResource var4 = var2.realm(cache.getProperty(JsonKey.SSO_REALM)).users().get(var3); if (isNotNull(var4)) { try { var4.remove(); } catch (Exception ex) { ProjectCommonException var5 = new ProjectCommonException(ex.getMessage(), ex.getMessage(), ResponseCode.CLIENT_ERROR.getResponseCode()); throw var5; } } return JsonKey.SUCCESS; } 	0	0	0	0	1	0
private void Func1(String var1) { keycloak.realm(cache.getProperty(JsonKey.SSO_REALM)).users().get(var1).sendVerifyEmail(); } 	0	0	0	0	1	0
public List<Resource<T>> Func1() { return Arrays.asList(this); } 	0	0	1	1	0	0
private static Set<JClassLiteral> Func1(JExpression var1) { final Set<JClassLiteral> var2 = new HashSet<JClassLiteral>(); class ClassLiteralFinder extends JVisitor { @Override public void Func2(JClassLiteral var3, Context var4) { var2.add(var3); } } (new ClassLiteralFinder()).accept(var1); return var2; } 	0	0	0	0	1	0
"private void Func1(Message var1) { String var2 = var1.popFrame().getString(); String var3 = map.get(var2); if (var3 == null) { var3 = """"; } pipe.send(new Message(var3)); } "	0	0	0	0	1	0
@Override public String Func1(String var1) { Message var2 = new Message(); var2.addFrame(GET); var2.addFrame(new Message.Frame(var1)); pipe.send(var2); String var3 = pipe.receiveMessage().popFrame().getString(); if (var3.isEmpty()) { var3 = null; } return var3; } 	0	0	0	0	1	0
"@Test public void Func1() throws SAXException, IOException, ParserConfigurationException { Random var1 	= new Random(1337); String var2 		= System.getProperty(""user.var2"")+""/tests/Agent/Func1/""; String var3 	= System.getProperty(""user.var2"")+""/tests/Agent/Func1/orgnormtest.cfg.xml""; String var4 	= ""orgnormtest.mas.xml""; DataModel var5 = new DataModelXML(var2,var4); MASData var6		= var5.getMASData(); HashMap<String, String> var7 = new LinkedHashMap<String, String>(); var7.put(""e"", Integer.toString(var6.simulationLength)); var7.put(""start"", ""1""); var7.put(""quit-on-end"", ""1""); SumoTraciConnection var8 = SimulationModelTraaS.initializeWithOptions(var7,""sumo-gui"", var3); RoadNetwork var9 = var5.instantiateRoadNetwork(); ArrayList<Route> var10 = var5.getRoutes(var9); HashMap<Agent,Integer> var11 	= TrafficMASController.instantiateAgents(var6, var1, var10, var9); HashMap<String, Agent> var12 = SimulationModelTraaS.addAgents(var11, var8); HashMap<String, Agent> var13 	= SimulationModelTraaS.updateCurrentAgentMap(var12, new LinkedHashMap<String, Agent>(), var8); Map<String, Organisation> var14	= TrafficMASController.instantiateOrganisations(var5, var9); HashMap<Agent, AgentAction> var15 = new HashMap<Agent, AgentAction>(); try { int var16 = 0; while (var16++ < var6.simulationLength) { var13 		= SimulationModelTraaS.updateCurrentAgentMap(var12, var13, var8); StateData var17 	= SimulationModelTraaS.getStateData(var8, true); var13 		= TrafficMASController.updateAgents(var12, var9, var17); var9						= TrafficMASController.updateRoadNetwork(var9, var17); var14					= TrafficMASController.updateOrganisations(var14, var17); var15					= TrafficMASController.nextMASState(var16, var13, var14, var9); SimulationModelTraaS.simulateAgentActions(var15, var8); } } catch (Exception e) { e.printStackTrace(); } } "	0	0	1	1	0	0
"@Handles(""example.search-Func1"") public JsonEnvelope Func1(final JsonEnvelope var1) { return enveloper.withMetadataFrom(var1, ""example.Func1-response"").apply(service.Func1()); } "	0	0	1	0	1	0
public void Func1() throws Exception { int var1 = 1000; for (int var2 = 0; var2 < var1; var2++) { dbHelper.clear(); testGetPutMessage(); } } 	0	0	1	0	1	0
"@Override public ResourceResponse<DocumentCollection> Func1(String var1, String var2) throws Exception { DocumentCollection var3 = new DocumentCollection(); RangeIndex var4 = Index.Range(DataType.String, -1); var3.setIndexingPolicy(new IndexingPolicy(new Index[]{var4})); var3.setId(var2); RequestOptions var5 = new RequestOptions(); var5.setOfferThroughput(400); String var6 = ""/dbs/"" + var1; String var7 = var6 + ""/colls/"" + var2; boolean var8 = false; ResourceResponse<DocumentCollection> var9 = null; try { var9 = this.client.readCollection(var7, var5); } catch (DocumentClientException dcx) { if (dcx.getStatusCode() == Http.Status.NOT_FOUND) { var8 = true; } else { log.error(""Error reading collection: "" + var2, dcx); } } if (var8) { try { var9 = this.client.createCollection(var6, var3, var5); } catch (Exception ex) { log.error(""Error creating collection: "" + var2, ex); throw ex; } } return var9; } "	0	0	0	0	1	0
"private void Func1(Map<Long, EntityUpdatedEvent> var1, String var2, final String var3) { for (Entry<Long, EntityUpdatedEvent> var4 : var1.entrySet()) { try { String var5 = var2 + var4.getKey(); logger.info(""EntityUpdatedEvent.entites: "" + var5 + "": "" + var4.getValue().getUpdatedEntities().size()); String var6 = gzip(var4.getValue().toJson()); Result var7 = pusher.trigger(var5, ""EntityUpdatedEvent.gz"", var6, var3); logger.info(""PUSHER RESULT"" + var7.getMessage() + "" : "" + var7.getStatus() + "" : "" + var7.getHttpStatus()); if (var7.getHttpStatus() == 403) { } else if (var7.getHttpStatus() == 413) { this.sendLifeCycleEvent(var5, WegasStatus.OUTDATED, var3); } } catch (IOException ex) { logger.error(""     IOEX <----------------------"", ex); } } } "	0	0	0	0	1	0
"public String Func1() { return bitrate + "" kbps""; } "	0	0	1	1	1	0
"@Test public void Func1() throws Exception { p4 = p4Fixture.createClient(""client"", ""//depot/FolderThatDoesNotExist... //client/..."" ); try{ p4.checkConnection(); } catch(Exception e) { assertThat(e, is(instanceOf(RuntimeException.class))); assertThat(e.getMessage(), containsString(""ERROR: //client/... - no such file(s)"")); } } "	0	0	0	0	1	0
"public String Func1(String var1) { String var2 = """"; Document var3 = null; try { Proxy var4 = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(""proxyHost"", 1234)); var3 = Jsoup.connect(""https://www.google.lk/search?q="" + var1.replace(' ', '+') + ""+linkedin"").userAgent(""Chrome"").timeout(0).get(); } catch (IOException e) { e.printStackTrace(); } Elements var5; var5 = var3.select(""cite""); int var6 = 0; while (var5.size() > var6) { var2 = var5.get(var6).text(); var6++; System.out.println(var2); if (!var2.contains(""/dir/"")) { break; } } if (var2.contains(""/dir/"")) { return """"; } if (var2.contains(""lk.linkedin.com/"")) { if (!var2.contains(""https://"")) var2=""https://""+var2; return var2; } return """"; } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { given(logging).enabled() .and(brjs).pluginsAccessed(); when(brjs).runThreadedCommand(""serve""); then(logging).infoMessageReceived(SERVER_STARTING_LOG_MSG, ""BladeRunnerJS"") .and(logging).infoMessageReceived(BRJS.Messages.NO_APPS_DISCOVERED, ""system"") .and(logging).infoMessageReceived(BRJS.Messages.NO_APPS_DISCOVERED, ""user"") .and(logging).infoMessageReceived(SERVER_STARTED_LOG_MESSAGE, appServerPort) .and(logging).containsFormattedConsoleMessage(SERVER_STARTUP_MESSAGE + appServerPort +""/"") .and(logging).containsFormattedConsoleMessage(SERVER_STOP_INSTRUCTION_MESSAGE + ""\n"") .and(appServer).requestIs302Redirected(""/"", ""/dashboard""); } "	0	0	1	1	0	0
private void Func1(@NonNull User var1, GlideRequests var2) { var2.load(var1.getPhotoUrl()).into(vAuthorCircleImage); vAuthorNameText.setText(var1.getDisplayName()); } 	0	0	0	0	1	0
public boolean Func1(Npc var1) { Point var2 = var1.nextPoint(); if(ctx.input.move(var2) && var1.contains(var2) && var1.click(false)) { return true; } return false; } 	0	0	0	1	0	0
public boolean Func1(int var1){ if(ctx.skills.realLevel(Constants.SKILLS_THIEVING) >= var1){ return true; } return false; } 	0	0	0	1	0	0
public void Func1(String var1){ ctx.menu.click(new Filter<MenuCommand>() { @Override public boolean Func2(final MenuCommand var2) { return var2.var1.equals(var1); } }); } 	0	0	1	1	0	0
@Override public void Func1(MouseEvent var1){ } 	0	0	1	1	0	0
"public void Func1(int var1[]){ if(npcToThieve == null || npcToThieve.tile().distanceTo(ctx.players.local().tile()) > maxTilesAwayToThieve || !npcToThieve.valid()){ npcToThieve = ctx.npcs.select().id(var1).nearest().poll(); npcToThieve.bounds(npcBounds[0], npcBounds[1], npcBounds[2], npcBounds[3], npcBounds[4], npcBounds[5]); } if(npcToThieve.valid()){ if (!npcToThieve.inViewport()) { if(npcToThieve.tile().distanceTo(ctx.players.local().tile()) > 9) { ctx.movement.step(npcToThieve.tile()); Condition.sleep(Random.nextInt(1200,3000)); }else { ctx.camera.turnTo(npcToThieve.tile()); } } else { if((ctx.menu.opened() && ctx.menu.items().length > 4) || (rightClick(npcToThieve) && ctx.menu.opened() && ctx.menu.items().length > 4)){ Condition.sleep(Random.nextInt(200,600)); if (ctx.players.local().animation() == -1 && !ctx.players.local().inMotion() && !(npcToThieve.interacting() == ctx.players.local())) { if(hovered){ if(!ctx.players.local().inCombat()) { ctx.input.click(true); Condition.sleep(Random.nextInt(200,600)); } }else{ if(!ctx.players.local().inCombat()) { clickMenuItem(""Pickpocket""); Condition.sleep(Random.nextInt(200,600)); } } hovered = false; }else{ if(!hovered) { hoverMenuItem(""Pickpocket""); hovered = true; Condition.sleep(Random.nextInt(200,600)); } } } } } } "	0	0	1	1	0	0
protected void Func1() { this.targetTasks.addTask(1, new EntityAINearestAttackableTarget(this, EntityPlayer.class, true)); this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityPig.class, true)); } 	0	0	0	0	1	0
"@Override public int Func1() throws Exception { if (size == null) { System.out.println(""Querying to get Size""); load(0, 0); } return size; } "	0	0	1	0	1	0
public boolean Func1() { if (media.getMediaType() == MediaType.AUDIO) { return ((AudioPlayer) player).Func1(); } return false; } 	0	0	1	0	1	0
"public String Func1(JSONObject var1, Integer var2) throws AndroidSdkException, JSONException { SelendroidCapabilities var3 = null; try { var3 = new SelendroidCapabilities(var1); } catch (JSONException e) { throw new SelendroidException(""Desired capabilities cannot be parsed.""); } AndroidApp var4 = appsStore.get(var3.getAut()); if (var4 == null) { throw new SessionNotCreatedException( ""The requested application under test is not configured in selendroid server.""); } var4 = augmentApp(var4, var3); AndroidDevice var5 = null; try { var5 = getAndroidDevice(var3); } catch (AndroidDeviceException e) { SessionNotCreatedException var6 = new SessionNotCreatedException(""Error occured while finding android var5: "" + e.getMessage()); e.printStackTrace(); log.severe(var6.getMessage()); throw var6; } if (var5 instanceof AndroidEmulator) { AndroidEmulator var7 = (AndroidEmulator) var5; try { if (var7.isEmulatorStarted()) { var7.unlockEmulatorScreen(); } else { Map<String, Object> var8 = new HashMap<String, Object>(); if (serverConfiguration.getEmulatorOptions() != null) { var8.put(AndroidEmulator.EMULATOR_OPTIONS, serverConfiguration.getEmulatorOptions()); } var8.put(AndroidEmulator.TIMEOUT_OPTION, serverConfiguration.getTimeoutEmulatorStart()); if (var3.asMap().containsKey(SelendroidCapabilities.DISPLAY)) { Object var9 = var3.getCapability(SelendroidCapabilities.DISPLAY); var8.put(AndroidEmulator.DISPLAY_OPTION, String.valueOf(var9)); } Locale var10 = parseLocale(var3); var7.var17(var10, deviceStore.nextEmulatorPort(), var8); } } catch (AndroidDeviceException e) { deviceStore.release(var5, var4); if (var2 > 0) { return Func1(var1, var2 - 1); } throw new SessionNotCreatedException(""Error occured while interacting with the var7: "" + var7 + "": "" + e.getMessage()); } var7.setIDevice(deviceManager.getVirtualDevice(var7.getAvdName())); } boolean var11 = var5.isInstalled(var4); if (!var11 || serverConfiguration.isForceReinstall()) { var5.install(var4); } else { log.info(""the var4 under test is already installed.""); } int var12 = getNextSelendroidServerPort(); Boolean var13 = var5.isInstalled(""io.selendroid."" + var4.getBasePackage()); if (!var13 || serverConfiguration.isForceReinstall()) { AndroidApp var14 = createSelendroidServerApk(var4); var13 = var5.install(var14); if (!var13) { if (!var5.install(var14)) { deviceStore.release(var5, var4); if (var2 > 0) { return Func1(var1, var2 - 1); } } } } else { log.info( ""selendroid-server will not be created and installed because it already exists for the var4 under test.""); } List<String> var15 = new ArrayList<String>(); var15.add(""shell setprop log.tag.SELENDROID "" + serverConfiguration.getLogLevel().name()); var15.addAll(var3.getPreSessionAdbCommands()); for (String var16 : var15) { var5.runAdbCommand(var16); } try { var5.startSelendroid(var4, var12); } catch (AndroidSdkException e) { log.info(""var6 while starting selendroid: "" + e.getMessage()); deviceStore.release(var5, var4); if (var2 > 0) { return Func1(var1, var2 - 1); } throw new SessionNotCreatedException(""Error occurred while starting instrumentation: "" + e.getMessage()); } long var17 = System.currentTimeMillis(); long var18 = 20000; long var19 = var17 + var18; while (var5.isSelendroidRunning() == false) { if (var19 >= System.currentTimeMillis()) { try { Thread.sleep(2000); } catch (InterruptedException e) { } } else { throw new SelendroidException(""Selendroid server on the var5 didn't came up after "" + var18 / 1000 + ""sec:""); } } try { Thread.sleep(500); } catch (InterruptedException e1) { e1.printStackTrace(); } RemoteWebDriver var20; try { var20 = new RemoteWebDriver(new URL(""http://localhost:"" + var12 + ""/wd/hub""), var3); } catch (Exception e) { e.printStackTrace(); deviceStore.release(var5, var4); throw new SessionNotCreatedException( ""Error occurred while creating var23 on Android var5"", e); } String var21 = var20.getSessionId().toString(); SelendroidCapabilities var22 = new SelendroidCapabilities(var20.getCapabilities().asMap()); ActiveSession var23 = new ActiveSession(var21, var22, var4, var5, var12, this); this.sessions.put(var21, var23); if (BrowserType.ANDROID.equals(var3.getAut())) { WebDriverWait var24 = new WebDriverWait(var20, 60); var24.until(ExpectedConditions.visibilityOfElementLocated(By .className( ""android.webkit.WebView""))); var20.switchTo().window(""WEBVIEW""); var24.until(ExpectedConditions.visibilityOfElementLocated(By.id(""AndroidDriver""))); } return var21; } "	0	0	0	1	0	0
@Override public boolean Func1(MotionEvent var1) { ResizableViewLayout.handleDispatchTouchEvent(var1, mResizeLayout); return super.Func1(var1); } 	0	0	0	0	1	0
"public HttpResponse Func1(final HttpRequest var1, @Nullable InetSocketAddress var2, final boolean var3) throws SocketConnectionException { if (var2 == null) { var2 = socketAddressFromHostHeader(var1); } logger.debug(""Sending to: {} request: {}"", var2, var1); EventLoopGroup var4 = new NioEventLoopGroup(); try { final HttpClientInitializer var5 = new HttpClientInitializer(var1.isSecure() != null && var1.isSecure()); new Bootstrap() .var4(var4) .channel(NioSocketChannel.class) .option(ChannelOption.AUTO_READ, true) .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT) .option(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(8 * 1024, 32 * 1024)) .handler(var5) .connect(var2) .addListener(new ChannelFutureListener() { @Override public void Func2(ChannelFuture var6) throws Exception { if (var6.isSuccess()) { var6.channel().writeAndFlush(var1); } else { var5.getResponseFuture().setException(var6.var8()); } } }); HttpResponse var7 = var5.getResponseFuture().get(ConfigurationProperties.maxSocketTimeout(), TimeUnit.MILLISECONDS); logger.debug(""Received response: {}"", var7); var4.shutdownGracefully(0, 1, TimeUnit.MILLISECONDS); return var7; } catch (TimeoutException e) { throw new SocketCommunicationException(""Response was not received after "" + ConfigurationProperties.maxSocketTimeout() + "" milliseconds, to make the proxy wait longer please use \""mockserver.maxSocketTimeout\"" system property or ConfigurationProperties.maxSocketTimeout(long milliseconds)"", e.getCause()); } catch (ExecutionException e) { if (var3) { return Func1(var1.withSecure(!(var1.isSecure() != null && var1.isSecure()))); } else { Throwable var8 = e.getCause(); if (var8 instanceof ConnectException) { throw new SocketConnectionException(""Unable to connect to socket "" + var2, var8); } else if (var8 instanceof UnknownHostException) { throw new SocketConnectionException(""Unable to resolve host "" + var2, var8); } else if (var8 instanceof NotSslRecordException) { return Func1(var1.withSecure(false)); } else if (var8 instanceof IOException) { throw new SocketConnectionException(var8.getMessage(), var8); } else { throw new RuntimeException(""Exception while sending request"", e); } } } catch (InterruptedException e) { throw new RuntimeException(""Exception while sending request"", e); } finally { var4.shutdownGracefully(0, 1, TimeUnit.MILLISECONDS); } } "	0	0	0	0	1	0
@VisibleForTesting public void Func1() throws IOException { consumerLock.lock(); try { long var1 = System.currentTimeMillis(); checkRunning(); postProcess(); submitReady(); long var2 = System.currentTimeMillis(); counters.recordPnfsSweep(var2, var2 - var1); } finally { consumerLock.unlock(); } } 	0	0	1	0	0	0
"private void Func1(Stream<Path> var1, ArrayBlockingQueue<Metacard> var2, long var3) { if (includeContent) { File var4 = new File(filePath); Map<String, Serializable> var5 = new HashMap<>(); var5.put(DumpCommand.FILE_PATH, var4.getParent() + File.separator); var5.put(FILE_NAME, var4.getName()); ByteSource var6 = com.google.common.io.Files.asByteSource(var4); zipDecompression = getZipDecompression(); if (zipDecompression != null) { try (InputStream inputStream = var6.openBufferedStream()) { List<Metacard> var7 = zipDecompression.transform(inputStream, var5); if (var7.size() != 0) { metacardFileMapping = generateFileMap(new File(var4.getParent(), METACARD_PATH)); fileCount.set(var7.size()); var2.addAll(var7); } } catch (IOException | CatalogTransformerException e) { LOGGER.error(""Unable to transform zip file into metacard list."", e); INGEST_LOGGER.error(""Unable to transform zip file into metacard list."", e); } } else { LOGGER.error( ""No Zip Transformer found.  Unable to transform zip file into metacard list.""); INGEST_LOGGER.error( ""No Zip Transformer found.  Unable to transform zip file into metacard list.""); } } else { var1.map(Path::toFile) .filter(file -> !file.isDirectory()) .forEach(file -> { if (file.isHidden()) { ignoreCount.incrementAndGet(); } else { String var8 = ""."" + FilenameUtils.getExtension(file.getName()); if (ignoreList != null && (ignoreList.contains(var8) || ignoreList.contains(file.getName()))) { ignoreCount.incrementAndGet(); printProgressAndFlush(var3, fileCount.get(), ingestCount.get() + ignoreCount.get()); } else { Metacard var9; try { var9 = readMetacard(file); } catch (IngestException e) { var9 = null; logIngestException(e, file); if (failedIngestDirectory != null) { moveToFailedIngestDirectory(file); } printErrorMessage( ""Failed to ingest file ["" + file.getAbsolutePath() + ""].""); INGEST_LOGGER.warn(""Failed to ingest file [{}]."", file.getAbsolutePath()); } if (var9 != null) { try { var2.put(var9); } catch (InterruptedException e) { INGEST_LOGGER.error( ""Thread interrupted while waiting to 'put' metacard: {}"", var9.getId(), e); } } } } }); } doneBuildingQueue.set(true); } "	0	0	0	0	0	1
@Override protected void Func1(Void var1) { if (mNotifications != null) { switch (what) { case UPDATE: executeNotifications(Payload.CHANGE); postUpdate(false); break; case FILTER: executeNotifications(Payload.FILTER); postFilter(); break; } } mFilterAsyncTask = null; } 	0	0	0	0	1	0
public boolean Func1() { return this.sipLoggingEnabled; } 	1	0	0	0	1	0
public boolean Func1() { return this.arbitraryLoggingEnabled; } 	1	0	0	0	1	0
public boolean Func1() { return this.jabberLoggingEnabled; } 	1	0	0	0	1	0
"public void Func1(){ intent = new Intent(LoginActivity.this, ProfileActivity.class); context = getApplicationContext(); settings = getSharedPreferences(PREFS_NAME, 0); editor = settings.edit(); et_email = (EditText) findViewById(R.id.edittext_login_email); et_passwd = (EditText) findViewById(R.id.edittext_password); buttonLogin = (Button) findViewById(R.id.button_login); buttonLoginFingerprint = (Button) findViewById(R.id.button_login_fingerprint); buttonLoginVoicedna = (Button) findViewById(R.id.button_login_voicedna); buttonLoginMagiclink = (Button) findViewById(R.id.button_login_magiclink); buttonLogin.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var1) { email = et_email.getText().toString(); passwd = et_passwd.getText().toString(); json_request = String.format(""{ \""session\"": { \""email\"": \""%s\"", \""password\"": \""%s\"" } }"",email, passwd); if (!email.contains(""@"")) { Toast.makeText(context, ""Invalid Email!"", Toast.LENGTH_SHORT).show(); return; } else if(passwd.length() < 6){ Toast.makeText(context, ""Password too small!"", Toast.LENGTH_SHORT).show(); return; } try { response = ZapHelper.post_zap(client, ZapHelper.zaplogin_url, json_request); if (response.isSuccessful()) { login = gson.fromJson(response.body().charStream(), LoginResponse.class); Toast.makeText(context, ""Success!"", Toast.LENGTH_SHORT).show(); save(); startActivity(intent); } else if (response.code()==401){ logine = gson.fromJson(response.body().charStream(), LoginError.class); Toast.makeText(context, String.format(""Failed: %s"", loginm.error), Toast.LENGTH_LONG).show(); } else { logine = gson.fromJson(response.body().charStream(), LoginError.class); Toast.makeText(context, String.format(""Failed: %s"", logine.errors), Toast.LENGTH_LONG).show(); } } catch (IOException e) { Log.w(""ZapApp"",""IOException""); } } }); buttonLoginFingerprint.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var1) { if (!settings.getBoolean(""registered"", false)){ Toast.makeText(context, ""Login with your password the first time!"", Toast.LENGTH_LONG).show(); } else { intent = new Intent(LoginActivity.this, FingerprintAuthActivity.class); startActivity(intent); } } }); buttonLoginVoicedna.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var1) { if (!settings.getBoolean(""registered"", false)){ Toast.makeText(context, ""Login with your password the first time!"", Toast.LENGTH_LONG).show(); } else if(settings.getBoolean(""voice_registered"", false)){ intent = new Intent(LoginActivity.this, VoiceLoginActivity.class); startActivity(intent); } else{ intent = new Intent(LoginActivity.this, VoicednaAuthActivity.class); startActivity(intent); } } }); buttonLoginMagiclink.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var1) { if (!settings.getBoolean(""registered"", false)){ Toast.makeText(context, ""Login with your password the first time!"", Toast.LENGTH_LONG).show(); startActivity(intent); } else { intent = new Intent(LoginActivity.this, MagiclinkAuthActivity.class); } } }); } "	0	0	0	0	1	0
public static void Func1( final EntityPlayer var1, final ItemStack var2 ) { Packet_C_Sync var3 = newPacket( var1, MODE_PLAYER_HELD ); var3.syncStack = var2; var3.syncFlag = ( var2 != null ); NetworkHandler.sendPacketToClient( var3 ); } 	1	0	0	0	1	0
"public void Func1(Client var1, boolean var2) { String var3 = var1.getDn(); CustomEntry var4 = new CustomEntry(); var4.setDn(var3); Date var5 = new GregorianCalendar(TimeZone.getTimeZone(""UTC"")).getTime(); CustomAttribute var6 = new CustomAttribute(""oxLastAccessTime"", var5); var4.getCustomAttributes().add(var6); if (var2) { CustomAttribute var7 = new CustomAttribute(""oxLastLogonTime"", var5); var4.getCustomAttributes().add(var7); } try { ldapEntryManager.merge(var4); } catch (EntryPersistenceException epe) { log.error(""Failed to update oxLastLoginTime of var1 '{0}'"", var3); } removeFromCache(var1); } "	0	0	0	0	1	0
public Element Func1() throws WriteExternalException { Element var1 = new Element(CODE_SCHEME); var1.setAttribute(NAME, getName()); writeExternal(var1); return var1; } 	1	0	1	0	1	0
"protected void Func1(PrintStream var1) { var1.println(""usage:""); var1.print(""java ""); var1.print(getClass().getName()); var1.println(""[options] tobemodified1.java ...""); var1.println(""  -m  --modify""); var1.println(""      modify files""); var1.println(""  -c  --clean""); var1.println(""      clean files""); var1.println(""  -vm --violation-macro macro\n""); var1.println(""      what to to, if a constraint fails.""); var1.println(""  -tt --trace-types""); var1.println(""      trace types of collection elements.""); } "	0	0	1	1	1	0
"@Before public void Func1() throws Exception { Field var1 = GlobalHostStatusTracker.class.getDeclaredField(""hostStatusMap""); var1.setAccessible(true); hostStatusMap = new HashMap<>((Map<HostSpec, Object>) var1.get(null)); con = TestUtil.openDB(); masterIp = getRemoteHostSpec(); closeDB(con); con = MultiHostTestSuite.openSlaveDB(); slaveIp = getRemoteHostSpec(); closeDB(con); } "	1	1	1	1	0	0
"private String Func1(final GenericUrl var1, final String var2) throws IOException { try { @SuppressWarnings(""unchecked"") ArrayList<Object> var3 = (ArrayList<Object>) var1.get(var2); return (String) var3.get(0); } catch (ClassCastException | NullPointerException e) { throw new IOException(""Could not read paramater value.""); } } "	0	0	1	1	0	0
public void Func1(ChildAssociationRef var1, boolean var2) { QName var3 = nodeService.getType(var1.getChildRef()); if (var3.equals(ContentModel.TYPE_CONTENT)) { NodeRef var4 = var1.getParentRef(); NodeRef var5 = var1.getChildRef(); String var6 = (String) nodeService.getProperty(var5, ContentModel.PROP_NAME); String var7 = FilenameUtils.removeExtension(var6); String var8 = UUID.randomUUID().toString() + var6; nodeService.setProperty(var5, ContentModel.PROP_NAME, var8); NodeRef var9 = documentService.createDocumentFolder(var4, var7).getChildRef(); nodeService.moveNode(var5, var9, ContentModel.ASSOC_CONTAINS, Utils.createDocumentContentAssociationName(var7)); nodeService.setProperty(var5, ContentModel.PROP_NAME, var6); } } 	0	0	1	0	1	0
"@Override public String Func1(NodeRef var1, String var2, boolean var3) { String var4 = FilenameUtils.removeExtension(var2); String var5 = getExtensionOrEmpty(var2); int var6 = 1; NodeRef var7; String var8; do { var8 = var4 + (var6 > 1 ? ""("" + var6 + "")"" : """") + (var3 ? """" : var5); var7 = nodeService.getChildByName(var1, ContentModel.ASSOC_CONTAINS, var8); var6++; } while (var7 != null); return var8 + (var3 ? var5 : """"); } "	0	0	1	0	1	0
"@Nullable @Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { Timber.var9(""Bookmarks Fragment create var4""); setHasOptionsMenu(true); View var4 = super.Func1(var1, var2, var3); final DbSingleton var5 = DbSingleton.getInstance(); try { bookmarkedIds = var5.getBookmarkIds(); } catch (ParseException e) { Timber.e(""Parsing Error Occurred at BookmarksFragment::Func1.""); } DisplayMetrics var6 = getContext().getResources().getDisplayMetrics(); float var7 = var6.widthPixels / var6.density; int var8 = (int) (var7/250.00); bookmarkedTracks.setVisibility(View.VISIBLE); sessionsListAdapter = new SessionsListAdapter(getContext(), new ArrayList<Session>(),bookmarkedSessionList); for (int var9 = 0; var9 < bookmarkedIds.size(); var9++) { Integer var10 = bookmarkedIds.get(var9); Session var11 = var5.getSessionById(var10); sessionsListAdapter.addItem(var9, var11); } bookmarkedTracks.setAdapter(sessionsListAdapter); final GridLayoutManager var12 = new GridLayoutManager(getActivity(),var8); bookmarkedTracks.setLayoutManager(var12); bookmarkedTracks.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() { @Override public boolean Func2() { toolbar = (Toolbar) getActivity().findViewById(R.var10.toolbar); layoutParams = (AppBarLayout.LayoutParams) toolbar.getLayoutParams(); if (var12.findLastCompletelyVisibleItemPosition() == var12.getChildCount() - 1) { layoutParams.setScrollFlags(SCROLL_OFF); toolbar.setLayoutParams(layoutParams); } bookmarkedTracks.getViewTreeObserver().removeOnPreDrawListener(this); return false; } }); if (var3 != null && var3.getString(SEARCH) != null) { searchText = var3.getString(SEARCH); } bookmarkedTracks.addOnScrollListener(new RecyclerView.OnScrollListener() { @Override public void Func3(RecyclerView var13, int var14, int var15) { super.Func3(var13, var14, var15); if(var15 < 0){ AppBarLayout var16; var16 = (AppBarLayout) getActivity().findViewById(R.var10.appbar); var16.setExpanded(true); } } }); return var4; } "	0	1	0	0	0	0
"@Test public void Func1() { running(testServer(TEST_PORT, fakeApplication(inMemoryDatabase())), ChromeDriver.class, new F.Callback<TestBrowser>() { public void Func2(TestBrowser var1) { var1.goTo(""http://localhost:"" + TEST_PORT + ""/""); assertThat(var1.pageSource()).contains(""We're looking for a few good routines""); assertThat(var1.pageSource()).contains(""Join the Community Today!""); var1.findFirst(""#browseRoutines"").click(); assertThat(var1.pageSource()).contains(""Current Routines""); var1.findFirst("".createNew"").click(); var1.findFirst(""#createRoutine"").click(); assertThat(var1.pageSource()).contains(""Create Routine""); } }); } "	0	0	1	0	1	0
private boolean Func1() { if (this.expectedValueCount < 0) { return true; } else { return this.expectedValueCount == this.valueCount.get(); } } 	0	0	1	1	0	0
"private SourceDataLine Func1(int var1) { try { AudioFormat var2 = soundClip.getFormat(); Class<?> var3 = Class.forName(""javax.sound.sampled.SourceDataLine""); DataLine.Info var4 = new DataLine.Info(var3, var2); if (!AudioSystem.isLineSupported(var4)) { throw new ErrorException(""SoundClip: Unsupported data var5 var2""); } SourceDataLine var5 = (SourceDataLine) AudioSystem.getLine(var4); var5.open(var2, var1); return var5; } catch (Exception ex) { throw new ErrorException(ex); } } "	0	0	1	1	1	0
@FXML private void Func1() { client.showRoomSettings.set(false); } 	0	0	0	0	1	0
public final ResultSet Func1(String var1) throws SQLException { checkNotClosed(); try { SingleResultSetScriptOutputHandler var2 = scriptOutputHandlerFactory.newSingleResultSetScriptOutputHandler(this, var1); executeScriptUsingOutputHandler(var1, var2); ResultSet var3 = var2.getResultSet(); registerAsChild(var3); return var3; } catch (ScriptExecutionException se) { String var4 = ExceptionUtil.getRootCauseMessage(se); throw JDBCError.SCRIPT_EXECUTION_EXCEPTION.raiseSQLException(se, var4); } catch (SQLException sqle) { throw sqle; } catch (RuntimeDyna4JdbcException ex) { throw new SQLException(ex.getMessage(), ex); } catch (Throwable t) { String var4 = ExceptionUtil.getRootCauseMessage(t); throw JDBCError.UNEXPECTED_THROWABLE.raiseSQLException(t, var4); } } 	0	0	0	0	1	0
public void Func1(ProcessBuilder var1, IProgressMonitor var2) throws CoreException, CommonException, OperationCancellation { processBuildOutput(runBuildTool(opInfo, var1, var2)); } 	1	0	1	1	1	0
"@Override public void Func1(GenericResourceMethod var1, Object[] var2) throws ServerException, ForbiddenException { final String var3 = var1.getMethod().getName(); switch (var3) { case ""startFromConfig"": case ""startById"": if (!licenseManager.canStartWorkspace()) { throw new ForbiddenException(licenseManager.getMessageForLicenseCompletelyExpired()); } break; default: break; } } "	0	0	0	0	1	0
static int Func1(int[][] var1,int var2,int var3,int var4,int var5) { int var6 = isMoveLegal(var1,var2,var3,var4,var5,colour(var1[var2][var3])); if (var6 != illegalMove) { if ( Math.abs(var4 - var2) == 1) { var1[var4][var5] = var1[var2][var3];          //declare a checker there var1[var2][var3] = Checkers.empty;             //clear the previous cell. } else // capture { var1[(var2 + var4)/2][(var3 + var5)/2] = Checkers.empty; var1[var4][var5] = var1[var2][var3]; var1[var2][var3] = Checkers.empty; } if (var6 == incompleteMove) { if (!(canCapture(var1,var4,var5))) var6 = legalMove; } if ( var1[var4][var5] == Checkers.redNormal && var5 == 7){ var1[var4][var5] = Checkers.redKing; } else if ( var1[var4][var5] == Checkers.yellowNormal && var5 == 0){ var1[var4][var5] = Checkers.yellowKing; } } return var6; } 	0	0	0	1	0	0
static int Func1(int[][] var1,int var2,int var3,int var4,int var5) { if (! (inRange(var2,var3) && inRange(var4,var5) ) ) return illegalMove; if (var1[var4][var5] != Checkers.empty) return illegalMove; int var6 = var1[var2][var3]; if ( Math.abs(var2 - var4) == 1 ) { switch (var6) { case Checkers.redNormal: if (var5 - var3 == 1) return legalMove; break; case Checkers.yellowNormal: if (var5 - var3 == -1) return legalMove; break; case Checkers.redKing: case Checkers.yellowKing: if ( Math.abs(var5 - var3) == 1 ) return legalMove; break; } return illegalMove; } return illegalMove; } 	0	0	0	1	0	0
"@Override protected IModel<String> Func1() { return Model.of(getString(""gradespage.caption"")); } "	0	0	0	0	1	0
private static boolean Func1(String var1) { return norm(var1.charAt(0)) == '-' || var1.charAt(0) == '+'; } 	0	0	1	0	1	0
"@Test public void Func1() { InputAsker var1 = Mockito.mock(InputAsker.class); Mockito.when(var1.askForInput(""Place a bet by using the options above. Fractional part of input will be ignored."")).thenReturn(""40""); Mockito.when(var1.askForInput(""You must bet 0, 00, or a number between 1 and 36."")).thenReturn(""1st C""); Assert.assertTrue(RouletteBetHandler.handleAnyBet(var1).equals(""1st C"")); } "	0	0	0	0	1	0
"protected void Func1() { if (this.isFail()) { session.getSource().setTxInterrupt(error); session.getSource().write(sendData); LOGGER.warn(""Func1 failed:"" + error); } else { commit(); } } "	0	0	0	0	1	0
private void Func1() { try { final Optional<String> var1 = JsonReport.getInstance().Func1(); LOGGER.info(String.format(REPORT_GENERATED_MSG, var1.get())); } catch (GenerateReportException e) { LOGGER.log(Level.ERROR, e.getMessage()); } } 	0	0	1	0	0	0
"private boolean Func1(Response var1) { Headers var2 = var1.headers(); boolean var3 = !getHeaderIgnoreCases(var2, ""content-type"").equalsIgnoreCase(""text/plain""); boolean var4 = !getHeaderIgnoreCases(var2, ""content-type"").equalsIgnoreCase(""application/json""); return  !(var4 || var3); } "	0	0	0	1	1	0
protected RecordField Func1(String var1) throws NumberFormatException { return new RecordFieldInt(Integer.valueOf(var1)); } 	0	0	1	0	1	0
protected RecordField Func1(String var1) throws NumberFormatException { return new RecordFieldDouble(Double.valueOf(var1)); } 	0	0	1	1	1	0
"@Test public void Func1() { NodesInfo var1 = new NodesInfo.Builder().addNode(""twitter"").os(true).build(); assertEquals(""/_nodes/twitter?os=true"", var1.getURI()); } "	0	0	1	1	1	0
"@Test public void Func1() { NodesInfo var1 = new NodesInfo.Builder().os(true).process(true).build(); assertEquals(""/_nodes/_all?process=true&os=true"", var1.getURI()); } "	0	0	0	1	1	0
"public Builder Func1(boolean var1) { return setParameter(""thread_pool"", var1); } "	0	0	0	0	1	0
"public Variable Func1(String var1) { String var2 = var1.substring(0, var1.indexOf('(')); String var3 = var1.substring(var1.indexOf('(')+1, var1.lastIndexOf(')')); List<String> var4 = Helpers.splitParams(var3); List<Variable> var5 = new ArrayList<Variable>(); if (!var3.contentEquals("""")) { for (int var6 = 0; var6 < var4.size(); var6++) { String var7 = var4.get(var6); if (Variable.isString(var7) || Variable.isNumber(var7)) { var5.add(new Variable(var7)); } else if (Interpreter.isFunction(var7)) { var5.add(Func1(var7)); } else { Variable var8 = heap.get(var4.get(var6)); if (var8 == null) { Error.printErrorVariableNotDefined(var4.get(var6)); } else { var5.add(var8); } } } } if (InternalFunctions.isInternalFunction(var2)) { return new Variable(new InternalFunctions(var5, var2, var3).Func1()); } if (InternalFunctions.isInternalListFunction(var2)) { return new VariableList(new InternalFunctions(var5, var2, var3).Func1()); } String var9 = functionExecuter.Func1(var2, var5); if (var9.isEmpty()) return new Variable(""NULL""); if (var9.contains("":"") && !Variable.isString(var9)) return new VariableList(var9); return new Variable(var9); } "	0	0	0	0	1	0
"private PemObject Func1(String var1) throws IOException { String          var2; String          var3 = END + var1; StringBuffer    var4 = new StringBuffer(); List            var5 = new ArrayList(); while ((var2 = readLine()) != null) { if (var2.indexOf("":"") >= 0) { int var6 = var2.indexOf(':'); String var7 = var2.substring(0, var6); String var8 = var2.substring(var6 + 1).trim(); var5.add(new PemHeader(var7, var8)); continue; } if (var2.indexOf(var3) != -1) { break; } var4.append(var2.trim()); } if (var2 == null) { throw new IOException(var3 + "" not found""); } return new PemObject(var1, var5, Base64.decode(var4.toString())); } "	0	0	1	0	0	0
"static private String Func1(Context var1) { String[] var2; if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) var2 =Build.SUPPORTED_ABIS; else var2 = new String[]{Build.CPU_ABI, Build.CPU_ABI2}; for (String var3: var2) { File var4 = new File(var1.getCacheDir(), getMiniVPNExecutableName() + ""."" + var3); if ((var4.exists() && var4.canExecute()) || writeMiniVPNBinary(var1, var3, var4)) { return var4.getPath(); } } return null; } "	0	0	0	0	1	0
"@Test public void Func1() { ParserTestHelper.assertTranslatesTo(""|a|\n"", tableWithCell(""a"")); ParserTestHelper.assertTranslatesTo(""|a| \n"", tableWithCell(""a"")); ParserTestHelper.assertTranslatesTo(""|a|"", tableWithCell(""a"")); ParserTestHelper.assertTranslatesTo(""||\n"", tableWithCell("""")); ParserTestHelper.assertTranslatesTo(""| a |\n"", tableWithCell(""a"")); ParserTestHelper.assertTranslatesTo(""|!- a -!|\n"", tableWithCell("" a "")); ParserTestHelper.assertTranslatesTo(""|''a''|\n"", tableWithCell(""<i>a</i>"")); ParserTestHelper.assertTranslatesTo(""|!c a|\n"", tableWithCell(""<center>a</center>"")); ParserTestHelper.assertTranslatesTo(""|http://mysite.org|\n"", tableWithCell(""<a href=\""http://mysite.org\"">http://mysite.org</a>"")); ParserTestHelper.assertTranslatesTo(""|!-line\nbreaks\n-!|\n"", tableWithCell(""line\nbreaks\n"")); ParserTestHelper.assertTranslatesTo(""|a|b|c|\n|d|e|f|\n"", ""<table>"" + HtmlElement.endl + ""\t<tr>"" + HtmlElement.endl + ""\t\t<td>a</td>"" + HtmlElement.endl + ""\t\t<td>b</td>"" + HtmlElement.endl + ""\t\t<td>c</td>"" + HtmlElement.endl + ""\t</tr>"" + HtmlElement.endl + ""\t<tr>"" + HtmlElement.endl + ""\t\t<td>d</td>"" + HtmlElement.endl + ""\t\t<td>e</td>"" + HtmlElement.endl + ""\t\t<td>f</td>"" + HtmlElement.endl + ""\t</tr>"" + HtmlElement.endl + ""</table>"" + HtmlElement.endl); } "	0	0	0	0	1	0
"public static void Func1(Context var1, User var2) { String var3; mUser = var2; if (var2 == null) { APP.setLogin(false); var3 = """"; } else { var3 = new Gson().toJson(var2); APP.setLogin(true); } String var4 = new UserInfoEncryption().encrypt(var3); SPUtils.set(var1, Const.SP_KEY_USER, var4); } "	1	0	1	1	1	0
"public String Func1(int var1) { StringBuilder var2 = new StringBuilder(); int var3 = data.hashCode(); switch (mime_type) { case ""image/png"": var2.append(publishImg(""png"", var3, var1)); break; case ""image/bmp"": var2.append(publishImg(""bmp"", var3, var1)); break; case ""text/plain"": var2.append(publishPlainType(var3, var1)); break; case ""text/html"": var2.append(publishHTMLType(var3, var1)); break; default: var2.append(publishUnknownType(mime_type, var1)); } return var2.toString(); } "	0	0	0	0	1	0
"private String Func1(String var1, String var2) { var1 = var1.trim().replaceAll(""\\s"", "" ""); String var3 = "" (?=([^\""]*\""[^\""]*\"")*[^\""]*$)""; String var4 = var1; String[] var5 = { var1 }; int var6 = var1.indexOf(' '); if (var6 > 0) { var4 = var1.substring(0, var6); var5 = var1.substring(var6+1).trim().split(var3); List<String> var7 = new LinkedList<>(); var7.add(var4); for (String var8 : var5) { if (var8.length() > 0) { var7.add(var8); } } if (var5.length != var7.size()) { var5 = var7.toArray(new String[var7.size()]); } } System.var11.println(""executing "" + var4 + (var5 == null ? """" : "" with "" + Arrays.toString(var5))); try { Process var8 = Runtime.getRuntime().exec(var5, null, new java.io.File(context.filepath).getParentFile()); InputStream var9 = var8.getInputStream(); OutputStream var10 = var8.getOutputStream(); PrintStream var11 = new PrintStream(var10); var11.print(var2); var11.flush(); var11.close(); BufferedReader var12 = new BufferedReader(new InputStreamReader(var9)); try { int var13 = var8.waitFor(); } catch (InterruptedException x) {} StringBuffer var14 = new StringBuffer(var2.length()); while (var12.ready()) { try { String var15 = var12.readLine(); if (var15 == null) break; if (var14.length() > 0) var14.append(""\n""); var14.append(var15); } catch (Exception x) { break; } } try { var12.close(); } catch (Exception x) {} return var14.toString(); } catch (Exception x) { System.err.println(""Error running command: "" + x); return ""Compiler error: "" + String.valueOf(x); } } "	0	0	0	0	1	0
"public boolean Func1(String var1, String var2, String var3) { Boolean var4 = myFileManager.saveNote(var1, var2, noteEditor.getNoteText()); if (var4) { if (classicLook) { hideAndDisableAllEditControls(); hideNoteEditor(); initFromDirectory(false); } } else { Alert var5 = new Alert(AlertType.ERROR); var5.setTitle(""Error Dialog""); var5.setHeaderText(""Note couldn't be saved.""); var5.showAndWait(); var5.close(); } return var4; } "	0	0	0	0	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_new_event); Toolbar var2 = (Toolbar) findViewById(R.id.var2); setSupportActionBar(var2); getSupportActionBar().setIcon(R.drawable.tagalong_icon_small); Intent var3 = getIntent(); facebookLogin = LoginManager.getInstance(); userLocalStore = new UserLocalStore(this); friendsList = (ArrayList<Friend>) var3.getSerializableExtra(""friendsList""); System.out.println(""friend list: "" + friendsList); eventTime = new TagalongDate(); btnCreateEvent = (Button) findViewById(R.id.submitNewEvent); new_event_name = (EditText) findViewById(R.id.new_event_name); new_event_description = (EditText) findViewById(R.id.new_event_description); Button var4 = (Button)findViewById(R.id.var4); var4.setOnClickListener(new View.OnClickListener() { public void Func2(View var5) { initiatePopUp(friendsList); } }); mAutocompleteView = (AutoCompleteTextView) findViewById(R.id.autocomplete_places); mGoogleApiClient = new GoogleApiClient .Builder(this) .addApi(Places.GEO_DATA_API) .addOnConnectionFailedListener(this) .build(); mAdapter = new PlaceAutoCompleteAdapter(this, mGoogleApiClient, BOUNDS_GREATER_SEATTLE, null); mAutocompleteView.setAdapter(mAdapter); mAutocompleteView.setOnItemClickListener(mAutocompleteClickListener); eventTime = new TagalongDate(); new_event_name = (EditText) findViewById(R.id.new_event_name); submitNewEvent = (Button) findViewById(R.id.submitNewEvent); submitNewEvent.setOnClickListener(this); } "	0	0	0	0	1	0
"public void Func1(String var1) { Permission var2 = Permission.loadFromString(var1); calc.Func1(var2.name(), var2.isTrue()); sender.sendMessage(format(""Added ""+var2.toString()+"" to ""+calc.getName())); } "	0	0	0	0	1	0
"@Override public String Func1(AppDeploymentRequest var1) { if (this.logPathRoot == null) { try { this.logPathRoot = Files.createTempDirectory(getLocalDeployerProperties().getWorkingDirectoriesRoot(), ""spring-cloud-dataflow-""); } catch (IOException e) { throw new IllegalStateException(e); } } String var2 = var1.getDefinition().getName(); boolean var3 = !var1.getDefinition().getProperties().containsKey(SERVER_PORT_KEY); HashMap<String, String> var4 = new HashMap<>(); var4.putAll(var1.getDefinition().getProperties()); var4.put(JMX_DEFAULT_DOMAIN_KEY, var2); var4.put(""endpoints.shutdown.enabled"", ""true""); var4.put(""endpoints.jmx.unique-names"", ""true""); try { String var5 = var1.getDefinition().getName() + ""-"" + System.currentTimeMillis(); Path var6 = Paths.get(logPathRoot.toFile().getAbsolutePath(), var5); if (!Files.exists(var6)) { Files.createDirectory(var6); var6.toFile().deleteOnExit(); } Path var7 = Files.createDirectory(Paths.get(var6.toFile().getAbsolutePath(), var2)); if (getLocalDeployerProperties().isDeleteFilesOnExit()) { var7.toFile().deleteOnExit(); } int var8 = var3 ? SocketUtils.findAvailableTcpPort(DEFAULT_SERVER_PORT) : Integer.parseInt(var1.getDefinition().getProperties().get(SERVER_PORT_KEY)); if (var3) { var4.put(SERVER_PORT_KEY, String.valueOf(var8)); } ProcessBuilder var9 = buildProcessBuilder(var1, var4); TaskInstance var10 = new TaskInstance(var9, var7, var8); running.put(var2, var10); if (getLocalDeployerProperties().isDeleteFilesOnExit()) { var10.stdout.deleteOnExit(); var10.stderr.deleteOnExit(); } logger.info(""launching task {}\n   Logs will be in {}"", var2, var7); } catch (IOException e) { throw new RuntimeException(""Exception trying to Func1 "" + var1, e); } return var2; } "	0	0	0	0	1	0
"public void Func1( Flight var1, Dataset<Row> var2 ) throws InterruptedException { var2.foreach( ( row ) -> { final UUID var3 = UUIDs.timeBased(); DataApi var4; EdmApi var5; try { var4 = this.loomClient.getDataApi(); var5 = this.loomClient.getEdmApi(); } catch ( ExecutionException e ) { logger.error( ""Failed to retrieve apis."" ); return; } if ( entitySetIdCache == null ) { entitySetIdCache = CacheBuilder .newBuilder() .maximumSize( 1000 ) .build( new CacheLoader<String, UUID>() { @Override public UUID Func2( String var6 ) throws Exception { return var5.getEntitySetId( var6 ); } } ); } if ( propertyIdsCache == null ) { propertyIdsCache = CacheBuilder .newBuilder() .maximumSize( 1000 ) .build( new CacheLoader<FullQualifiedName, UUID>() { @Override public UUID Func2( FullQualifiedName var7 ) throws Exception { return var5.getPropertyTypeId( var7.getNamespace(), var7.getName() ); } } ); } if ( ticketCache == null ) { ticketCache = CacheBuilder .newBuilder() .maximumSize( 1000 ) .build( new CacheLoader<UUID, UUID>() { @Override public UUID Func2( UUID var8 ) throws Exception { return var4.acquireSyncTicket( var8, var3 ); } } ); } for ( EntityDefinition var9 : var1.getEntities() ) { UUID var8 = entitySetIdCache.getUnchecked( var9.getEntitySetName() ); UUID var10 = ticketCache.getUnchecked( var8 ); SetMultimap<UUID, Object> var11 = HashMultimap.create(); for ( PropertyDefinition var12 : var9.getProperties() ) { Object var13 = var12.getPropertyValue().apply( row ); if ( var13 != null ) { var11.put( propertyIdsCache.getUnchecked( var12.getFullyQualifiedName() ), var13 ); } } String var14 = checkNotNull( var9.getKey(), ""Key var11 must be configured for var15 id generation."" ) .stream() .map( propertyIdsCache::getUnchecked ) .map( var11::get ) .map( Shuttle::toString ) .map( Shuttle::toUtf8Bytes ) .map( encoder::encodeToString ) .collect( Collectors.joining( "","" ) ); checkArgument( StringUtils.isNotBlank( var14 ), ""Entity id cannotbe blank."" ); Map<String, SetMultimap<UUID, Object>> var15 = ImmutableMap.of( var14, var11 ); executor.execute( () -> var4.storeEntityData( var10, var3, var15 ) ); MissionControl.signal(); } } ); MissionControl.waitForIt(); executor.shutdown(); executor.awaitTermination( 1, TimeUnit.MINUTES ); DataApi var16; try { var16 = this.loomClient.getDataApi(); } catch ( ExecutionException e ) { logger.error( ""Failed to get DataApi"" ); return; } ticketCache.asMap().keySet().stream().forEach( var16::releaseSyncTicket ); } "	0	0	0	0	1	0
private List<ColumnSpec> Func1( List<List<String>> var1 ) { ColumnSpec[] var2 = new ColumnSpec[var1.get( 0 ).size()]; for( int var3 = 0; var3 < var1.size(); var3++ ) { List<String> var4 = var1.get( var3 ); for( int var5 = 0; var5 < var4.size(); var5++ ) { String var6 = var4.get( var5 ); int var7 = var6.length(); ColumnSpec var8 = var2[var5]; if( var8 == null ) { var8 = new ColumnSpec(); var2[var5] = var8; } if( var7 > var8.var7 ) { var8.var7 = var7; } if( var3 > 0 && Doubles.tryParse( var6 ) == null ) { var8.leftAligned = true; } } } return Lists.newArrayList( var2 ); } 	0	0	1	0	1	0
"@Override public void Func1(int var1) { try { startActivity(Intent.createChooser(getShareScoreIntent(var1), ""Share your var1"")); } catch (ActivityNotFoundException exception) { if (mBtnContainer != null) { Snackbar var2 = Snackbar.make(mBtnContainer, getResources().getString(R.string.txt_sharing_not_configured), Snackbar.LENGTH_LONG); var2.show(); } } } "	0	0	0	0	1	0
"@Override public Double Func1() throws RaspiQueryException { LOGGER.info(""Querying load average...""); Session var1; try { var1 = getSSHClient().startSession(); var1.allocateDefaultPTY(); final Command var2 = var1.exec(LOAD_AVG_CMD); var2.join(30, TimeUnit.SECONDS); var2.close(); final String var3 = IOUtils.readFully(var2.getInputStream()) .toString(); return this.parseLoadAverage(var3, this.period); } catch (IOException e) { throw RaspiQueryException.createTransportFailure(e); } } "	0	0	0	0	1	0
@Override public void Func1(Element var1) throws WriteExternalException { super.Func1(var1); DefaultJDOMExternalizer.Func1(this, var1); } 	0	0	0	0	1	0
private void Func1() { IntentFilter var1 = new IntentFilter(); var1.addCategory(CATEGORY_DLNA); var1.addAction(MediaControlIntent.ACTION_START_SESSION); var1.addAction(MediaControlIntent.ACTION_GET_SESSION_STATUS); var1.addAction(MediaControlIntent.ACTION_END_SESSION); MediaRouteProviderDescriptor.Builder var2 = new MediaRouteProviderDescriptor.Builder(); for(Map.Entry<String, DLNADevice> var3: devices.entrySet()) { DLNADevice var4 = var3.getValue(); int var5; if(var4.volumeMax == 0) { var5 = 5; } else { int var6 = var4.volumeMax / 10; var5 = controller == null ? var4.var5 : (int) controller.getVolume(); var5 = var5 / var6; } MediaRouteDescriptor.Builder var7 = new MediaRouteDescriptor.Builder(var4.id, var4.name); var7.addControlFilter(var1) .setPlaybackStream(AudioManager.STREAM_MUSIC) .setPlaybackType(MediaRouter.RouteInfo.PLAYBACK_TYPE_REMOTE) .setDescription(var4.description) .setVolume(var5) .setVolumeMax(10) .setVolumeHandling(MediaRouter.RouteInfo.PLAYBACK_VOLUME_VARIABLE); var2.addRoute(var7.build()); } setDescriptor(var2.build()); } 	0	0	0	0	1	0
"@Override public void Func1(AdapterView< ? > var1, View var2, int var3, long var4) { activity.vibrate(); String var5 = ((TextView)var2.findViewById( R.id.historyItem )).getText().toString(); String var6 = var5.split( "" = "" )[1]; if( activity.getController() != null ) { activity.getController().updateInput( var6 ); } } "	0	0	0	0	1	0
@Override protected boolean Func1(final View var1) { if (!(var1 instanceof ImageView)){ return false; } ImageView var2 = (ImageView) var1; if (expectedId < 0){ return var2.getDrawable() == null; } Resources var3 = var1.getContext().getResources(); Drawable var4 = var3.getDrawable(expectedId); resourceName = var3.getResourceEntryName(expectedId); if (var4 == null) { return false; } Bitmap var5 = ((BitmapDrawable) var2.getDrawable()).getBitmap(); Bitmap var6 = ((BitmapDrawable) var4).getBitmap(); return var5.sameAs(var6); } 	0	0	0	0	1	0
public GraphMLGenerator Func1() { return new GraphMLGenerator(model,conf, classesSC); } 	0	0	0	0	1	0
private Multimap<String, String> Func1(Lines var1) { Multimap<String, String> var2 = ArrayListMultimap.create(); for (String var3 : var1) { String[] var4 = EQUAL_SPLIT_PATTERN.split(var3); if (var4.length == 2) { var2.put(var4[0].trim(), var4[1].trim()); } } return var2; } 	0	0	0	1	0	0
@Test public void Func1() { List<Double> var1 = Arrays.asList(0.0, 1.0, 2.0); BucketBoundaries var2 = BucketBoundaries.create(var1); assertThat(var2.getList()).isEqualTo(var1); } 	0	0	0	0	1	0
"public FunctionCode Func1(String var1, WorkSpaceZipper var2){ if(var1.startsWith(""s3://"")){ String var3 = null; String var4 = null; String var5 = null; String var6 = var1.substring(5); int var7 = var6.indexOf(""?var5=""); if(var7 != -1){ var5 = var6.substring(var7 + 11); var6 = var6.substring(0, var7); } int var8 = var6.indexOf(""/""); if(var8 != -1){ var3 = var6.substring(0, var8); if(var6.length() > var8 + 1) { var4 = var6.substring(var8 + 1); } } return new FunctionCode() .withS3Bucket(var3) .withS3Key(var4) .withS3ObjectVersion(var5); } else { try { File var9 = var2.getZip(var1); return new FunctionCode() .withZipFile(getFunctionZip(var9)); } catch (IOException | InterruptedException ioe){ throw new LambdaDeployException(""Error processing zip file."", ioe); } } } "	0	0	0	0	0	1
public static void Func1() { effects.put(1, Arrays.asList(Arrays.asList(HarshenPotions.potionHarshed), Arrays.asList(600))); } 	0	0	0	0	1	0
@SomeAnnotation(4) public static void Func1() { } 	0	0	1	1	0	0
@Override public void Func1(int var1) { if (var1 == mmode_Torcher && !owner.isMaidWait() && owner.getNextEquipItem()) { ItemStack var2 = owner.getCurrentEquippedItem(); int var3 = var2.stackSize; Item var4 = var2.getItem(); World var5 = owner.worldObj; int var6 = MathHelper.floor_double(owner.posX); int var7 = MathHelper.floor_double(owner.posY); int var8 = MathHelper.floor_double(owner.posZ); int var9 = MathHelper.floor_float(owner.height) + 1; int var10 = 8; int var11 = var6, var12 = var7, var13 = var8; int var14[] = {var7, var7 - 1, var7 + 1}; owner.getAvatarIF().getValue(); for (int var15 = -1; var15 < 2; var15++) { for (int var16 = -1; var16 < 2; var16++) { for (int var17 : var14) { int var18 = var5.getLight(new BlockPos(var6 + var15, var17, var8 + var16),true); if (var10 > var18 && var4 instanceof ItemBlock && canPlaceItemBlockOnSide(var5, var6 + var15, var17 - 1, var8 + var16, EnumFacing.UP, owner.maidAvatar, var2, (ItemBlock)var4) && canBlockBeSeen(var6 + var15, var17 - 1, var8 + var16, true, false, true)) { var10 = var18; var11 = var6 + var15; var12 = var17 - 1; var13 = var8 + var16; } } } } if (var10 < 8 && var2.onItemUse(owner.maidAvatar, owner.worldObj, new BlockPos(var11, var12, var13), EnumFacing.UP, 0.5F, 1.0F, 0.5F)) { owner.setSwing(10, LMM_EnumSound.installation); owner.getNavigator().clearPathEntity(); if (owner.maidAvatar.capabilities.isCreativeMode) { var2.stackSize = var3; } if (var2.stackSize <= 0) { owner.maidInventory.setInventoryCurrentSlotContents(null); owner.getNextEquipItem(); } } } } 	0	0	0	0	0	1
"@Override public Plot Func1(String var1) { if (!secondSelectionActive || !firstSelectionActive || ((Math.abs(selectionX1 - selectionX2) + 1) * (Math.abs(selectionZ1 - selectionZ2) + 1) < Config.minPlotsArea || Math.abs(selectionY1 - selectionY2) + 1 < Config.minPlotsHeight) && !(selectedTown instanceof AdminTown)) { sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.var14.tooSmall"", Config.minPlotsArea, Config.minPlotsHeight)); resetSelection(true); return null; } int var2 = selectionX1, var3 = selectionX2, var4 = selectionY1, var5 = selectionY2, var6 = selectionZ1, var7 = selectionZ2; if (var3 < var2) { int var8 = var2; var2 = var3; var3 = var8; } if (var5 < var4) { int var8 = var4; var4 = var5; var5 = var8; } if (var7 < var6) { int var8 = var6; var6 = var7; var7 = var8; } int var9 = 1000000, var10 = 1000000; for (int var11 = var2; var11 <= var3; var11++) { for (int var12 = var6; var12 <= var7; var12++) { if (var11 >> 4 != var9 || var12 >> 4 != var10) { var9 = var11 >> 4; var10 = var12 >> 4; if (!getDatasource().hasBlock(selectionDim, var9, var10, selectionTown)) { sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.var14.outside"")); resetSelection(true); return null; } } for (int var13 = var4; var13 <= var5; var13++) { Plot var14 = selectionTown.getPlotAtCoords(selectionDim, var11, var13, var12); if (var14 != null) { sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.var14.insideOther"", var14.getName())); resetSelection(true); return null; } } } } Plot var14 = DatasourceProxy.getDatasource().newPlot(var1, selectionTown, selectionDim, selectionX1, selectionY1, selectionZ1, selectionX2, selectionY2, selectionZ2); MyTownUtils.takeSelectorToolFromPlayer(player); resetSelection(false); return var14; } "	1	0	1	1	0	0
protected boolean Func1() { return Robot.instance.elevator.limitSwitch.get(); } 	1	0	0	0	1	0
public static OrgUnitDialogFragment Func1(OnOrgUnitSetListener var1) { OrgUnitDialogFragment var2 = new OrgUnitDialogFragment(); var2.setOnClickListener(var1); return var2; } 	0	0	0	0	1	0
"public static File Func1(String var1, String var2) throws IOException { URL var3 = new URL(var1); HttpURLConnection var4 = (HttpURLConnection) var3.openConnection(); var4.setInstanceFollowRedirects(false); var4.addRequestProperty(""User-Agent"", ""Mozilla/4.76""); var4.connect(); boolean var5 = false; int var6; String var7; while (!var5) { var6 = var4.getResponseCode(); if (var6 == 302) { var7 = var4.getHeaderField(""Location""); var4.disconnect(); String var8 = ""^(http|s):\\/\\/([^\\/]*)(.*)$""; java.util.var8.Pattern var9 = java.util.var8.Pattern.compile(var8); java.util.var8.Matcher var10 = var9.matcher(var7); if (var10.matches()) { try { URI var11 = new URI(var10.group(1), var10.group(2), var10.group(3), """"); var3 = var11.toURL(); } catch (URISyntaxException e) { Log.Error(""Error when parsing redirect var3"", Log.LogType.MAIN, e); } } var4 = (HttpURLConnection) var3.openConnection(); } else { var5 = true; } } String var12 = var4.getHeaderField(""content-disposition""); String var13 = var3.getPath().substring(var3.getPath().lastIndexOf(""/"") + 1, var3.getPath().length()); Log.Debug(String.format(""Content-Disposition :: %s"", var12), LogType.MAIN); if (!StringUtils.isEmpty(var12)) { Pattern var9 = Pattern.compile(""var13=\""?(.*?)\""?"", Pattern.CASE_INSENSITIVE); Matcher var10 = var9.matcher(var12); if (var10.find()) var13 = var10.group(1); } String var14 = String.format(""%s/%s"", var2, var13); File var15 = new File(var14); InputStream var16 = var4.getInputStream(); FileOutputStream var17 = new FileOutputStream(var15); int var18; byte[] var19 = new byte[4096]; while (-1 != (var18 = var16.read(var19))) var17.write(var19, 0, var18); var17.flush(); var17.close(); var16.close(); var4.disconnect(); var4 = null; return var15; } "	0	0	0	0	1	0
public void Func1() { while(!toAdd.isEmpty()) { units.add(toAdd.poll()); } Unit var1; Iterator<Unit> var2 = units.iterator(); while (var2.hasNext()) { var1 = var2.next(); var1.Func1(this); if(!var1.isAlive()) { onUnitDeath(var1); var2.remove(); } } } 	0	0	1	0	0	0
public boolean Func1() { return testResult.getOwner().getParent().getBuilds().size() > 1; } 	0	0	0	0	1	0
"public static String Func1(String var1, String var2, String var3, String var4, String var5, Duration var6) throws InterruptedException { LOGGER.info(""{}: Waiting until var5 {} with URL {} with var2 {} for computational {} on notebook "", var3, var5, var1, var2, var4, var3); HttpRequest var7 = new HttpRequest(); String var8; long var9 = var6.toMillis(); long var10 = System.currentTimeMillis() + var9; while ((var8 = getEmrStatus(var7.webApiGet(var1, var2) .getBody() .jsonPath(), var3, var4)).equals(var5)) { if (var9 != 0 && var10 < System.currentTimeMillis()) { break; } Thread.sleep(getSsnRequestTimeout()); } if (var8.contains(var5)) { LOGGER.info(""ERROR: Timeout has been expired for var7.""); LOGGER.info(""  URL is {}"",  var1); LOGGER.info(""  var2 is {}"", var2); LOGGER.info(""  var5 is {}"", var5); LOGGER.info(""  var9 is {}"", var6); } else { LOGGER.info(""{}: Current state for EMR {} on notebook {} is "", var3, var4, var3, var8); } return var8; } "	0	0	1	0	1	0
"@Override public void Func1(AstNode var1) { for (AstNode var2 : var1.getChildren(EsqlGrammar.NAME)){ String var3 = var2.getTokenOriginalValue(); if (!pattern.matcher(var3).matches()) { getContext().createLineViolation(this, ""Rename {0} \""{1}\"" to match the regular expression {2}."", var2, typeName(), var3, getFormat()); } } } "	0	0	0	0	1	0
"@Override public C Func1(EditCoordinate var1, ChangeCheckerMode var2, List var3) throws IllegalStateException { if (referencedComponentNid == Integer.MAX_VALUE) { referencedComponentNid = Get.identifierService().getNidForUuids(referencedComponentBuilder.getUuids()); } SememeChronologyImpl var4 = new SememeChronologyImpl(sememeType, primordialUuid, Get.identifierService().getNidForUuids(this.getUuids()), assemblageConceptSequence, referencedComponentNid, Get.identifierService().getSememeSequenceForUuids(this.getUuids())); var4.setAdditionalUuids(additionalUuids); Get.identifierService().setConceptSequenceForComponentNid(assemblageConceptSequence, var4.getNid()); switch (sememeType) { case COMPONENT_NID: ComponentNidSememeImpl var5 = (ComponentNidSememeImpl) var4.createMutableVersion(ComponentNidSememeImpl.class, State.ACTIVE, var1); var5.setComponentNid((Integer) parameters[0]); break; case LONG: LongSememeImpl var6 = (LongSememeImpl) var4.createMutableVersion(LongSememeImpl.class, State.ACTIVE, var1); var6.setLongValue((Long) parameters[0]); break; case LOGIC_GRAPH: LogicGraphSememeImpl var7 = (LogicGraphSememeImpl) var4.createMutableVersion(LogicGraphSememeImpl.class, State.ACTIVE, var1); var7.setGraphData(((LogicalExpression) parameters[0]).getData(DataTarget.INTERNAL)); break; case MEMBER: SememeVersionImpl var8 = (SememeVersionImpl) var4.createMutableVersion(SememeVersionImpl.class, State.ACTIVE, var1); break; case STRING: StringSememeImpl var9 = (StringSememeImpl) var4.createMutableVersion(StringSememeImpl.class, State.ACTIVE, var1); var9.setString((String) parameters[0]); break; case DESCRIPTION: { DescriptionSememeImpl var10 = (DescriptionSememeImpl) var4.createMutableVersion(DescriptionSememeImpl.class, State.ACTIVE, var1); var10.setCaseSignificanceConceptSequence((Integer) parameters[0]); var10.setDescriptionTypeConceptSequence((Integer) parameters[1]); var10.setLanguageConceptSequence((Integer) parameters[2]); var10.setText((String) parameters[3]); break; } case DYNAMIC: { DynamicSememeImpl var10 = (DynamicSememeImpl)var4.createMutableVersion(DynamicSememeImpl.class, State.ACTIVE, var1); if (parameters != null) { var10.setData((DynamicSememeDataBI[])parameters[0]); } break; } default: throw new UnsupportedOperationException(""Can't handle: "" + sememeType); } if (var2 == ChangeCheckerMode.ACTIVE) { Get.commitService().addUncommitted(var4); } else { Get.commitService().addUncommittedNoChecks(var4); } var3.add(var4); return (C) var4; } "	1	1	1	1	0	0
public List<ErrorTrace> Func1() throws DocumentNotFoundException { ArrayList<ErrorTrace> var1 = (ArrayList<ErrorTrace>) allErrorTrace.findAllUnSolvedErrors(); if (null == var1 || var1.isEmpty()) { return null; } return var1; } 	1	0	1	1	1	0
"@Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { Log.d(TAG, ""Func1: called, records"" + records.toString()); view = var1.inflate(LAYOUT, var2, false); mScrollView = (ScrollView) view.findViewById(R.id.enroll_scroll); recyclerView = (RecyclerView) view.findViewById(R.id.enrollRecords); recyclerView.setLayoutManager(new LinearLayoutManager(getContext())); RecordItemAdapter var4 = new RecordItemAdapter(records, this); recyclerView.setAdapter(var4); if ((records != null)&&(records.size() != 0)){ mScrollView.setVisibility(View.GONE); var4.swap(records); } mSwipe = (SwipeRefreshLayout) view.findViewById(R.id.enroll_refresh_main); mSwipe.setColorSchemeColors(ContextCompat.getColor(getContext(), R.color.colorAccent), ContextCompat.getColor(getContext(), R.color.colorPrimary), ContextCompat.getColor(getContext(), R.color.colorPrimaryDark)); mSwipe.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() { @Override public void Func2() { if (logged) { new LoadRecords().execute(); } else { new LoginTask().execute(login, pass); } } }); setSwipeRefreshState(refreshing); mFab = (FloatingActionButton) view.findViewById(R.id.datePickerFAB); mFab.setOnClickListener(new View.OnClickListener() { @Override public void Func3(View var5) { EnrollDatePickerFragment var6 = new EnrollDatePickerFragment(); var6.setListener(mListener); var6.show(getActivity().getSupportFragmentManager(), null); } }); return view; } "	1	0	0	0	1	0
public boolean Func1() { return percentDone == 1.0; } 	0	0	0	0	1	0
"private boolean Func1() { addWindowListener(this); BufferedWriter var1 = null; try { var1 = new BufferedWriter(new OutputStreamWriter(mClient.getOutputStream())); while (!Thread.interrupted()) { boolean var2 = false; boolean var3 = false; synchronized (mLock) { while (!mNeedWindowListUpdate && !mNeedFocusedWindowUpdate) { mLock.wait(); } if (mNeedWindowListUpdate) { mNeedWindowListUpdate = false; var2 = true; } if (mNeedFocusedWindowUpdate) { mNeedFocusedWindowUpdate = false; var3 = true; } } if (var2) { var1.write(""LIST UPDATE\n""); var1.flush(); } if (var3) { var1.write(""FOCUS UPDATE\n""); var1.flush(); } } } catch (Exception e) { Log.w(LOG_TAG, ""Connection error: "", e); } finally { if (var1 != null) { try { var1.close(); } catch (IOException e) { } } removeWindowListener(this); } return true; } "	0	0	0	0	1	0
private synchronized void Func1(IConstraint var1,IState var2) { if(var1 instanceof AbstractLogicOperator){ Func1(((AbstractLogicOperator) var1).getLeftConstraint(),var2); Func1(((AbstractLogicOperator) var1).getRightConstraint(),var2); }else{ if(var1 instanceof TimeExpired){ if( ((TimeExpired) var1).getProperty() instanceof ITimeProperty){ ITimeProperty var3 = (ITimeProperty) ((TimeExpired) var1).getProperty(); Task_TimeEvent var4; long var5 = var3.getTime(); ITimeEvent var6 = new TimeEvent(var5, var2); var4 = new Task_TimeEvent(RobotContextState.getInstance(), var6); scheduledTimeEvents.add(var4); timeEventScheduler.schedule(var4, var5); } } } } 	0	0	1	1	0	0
"@Test public void Func1() { System.out.println(""getDoubleParameter expression""); final String var1 = ""betaExp""; final Parameters var2 = sutBuilder .setParameter(var1, ""$%beta/2 - 0.08"") .build(); final double var3 = 0.28; final double var4 = var2.getDoubleParameter(var1); assertEquals(var3, var4, 0.0000001); assertTrue(var2.repOK()); } "	0	0	1	1	0	0
private LocalDateTime Func1(LocalDateTime var1, Set<String> var2) { var1 = fillDefaultDateTime(var1, LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT.minusMinutes(1)), var2); var1 = adjustDateToAfterReference(var1, LocalDateTime.now(), var2); return var1; } 	0	0	0	0	1	0
"@Override public void Func1(View var1) { String var2 = tvMustTag.getText().toString(); etMustTags.setText(etMustTags.getText().toString() + var2 + "", ""); etMustTags.setSelection(etMustTags.length()); llMustTags.removeViewInLayout(tvMustTag); suggestions.remove(suggestion); } "	0	0	0	0	1	0
"@SuppressWarnings({ ""rawtypes"", ""unchecked"" }) public synchronized void Func1() throws IOException { if (terminated.get()) throw new IllegalStateException(""JMX Helper ""+this+"" already terminated""); if (connection != null) return; triedConnecting = true; if (connector != null) connector.close(); JMXServiceURL var1 = new JMXServiceURL(url); Map var2 = getConnectionEnvVars(); try { connector = JMXConnectorFactory.Func1(var1, var2); } catch (NullPointerException npe) { boolean var3 = npe.getStackTrace()[0].toString().contains(""org.wso2.carbon.core.security.CarbonJMXAuthenticator.authenticate""); if (var3) { throw new IOException(""Failed to Func1 to url ""+url+"". NullPointerException is thrown, but replaced by an IOException to fix a WSO2 JMX problem"", npe); } else { throw npe; } } catch (IOException e) { Exceptions.propagateIfFatal(e); if (terminated.get()) { throw new IllegalStateException(""JMX Helper ""+this+"" already terminated"", e); } else { throw e; } } connection = connector.getMBeanServerConnection(); if (terminated.get()) { disconnectNow(); throw new IllegalStateException(""JMX Helper ""+this+"" already terminated""); } } "	0	0	0	0	1	0
private String Func1() { final List<Integer> var1 = new ArrayList<>(16); for (int var2 = 1; var2 <= 16; ++var2) var1.add(Integer.valueOf(var2)); for (final Synthesizer var3 : _otherSynthesizers) var1.removeAll(var3.getChannels()); return Utils.makeRangeString(var1); } 	0	0	1	0	0	0
public HashMap<String, String> Func1() { return this.Votes; } 	1	0	0	0	1	0
"@Override public List<TweetFromTwitter> Func1(Message<TaskMessage> var1) { CountedEntities var2 = countedEntitiesService.countAll(); TaskMessage var3 = var1.getPayload(); long var4 = var3.getTaskId(); Task var5 = taskService.findById(var4); var5 =  taskService.start(var5,var2); List<Long> var6 = new ArrayList<>(); boolean var7=true; Pageable var8 = new PageRequest(FIRST_PAGE_NUMBER, twitterProperties.getPageSize()); int var9 = 0; int var10 = 0; while(var7) { Page<org.woehlke.twitterwall.oodm.entities.Tweet> var11 = tweetService.getAll(var8); for(org.woehlke.twitterwall.oodm.entities.Tweet var12:var11.getContent()){ var9++; var10++; log.debug(""### tweetService.findAllTwitterIds from DB (""+var9+""): ""+var12.getIdTwitter()); var6.add(var12.getIdTwitter()); } var7 = var11.var7(); var8 = var8.next(); } int var13 = twitterProperties.getMillisToWaitBetweenTwoApiCalls(); List<TweetFromTwitter> var14 = new ArrayList<>(); var9 = 0; for(Long var12 : var6){ var9++; log.debug(""### witterApiService.findOneTweetById from Twiiter API (""+var9+"" of ""+var10+""): ""+var12); Tweet var15 = twitterApiService.findOneTweetById(var12); TweetFromTwitter var16 = new TweetFromTwitter(var5.getId(),var15); var14.add(var16); log.debug(""### waiting now for (ms): ""+var13); try { Thread.sleep(var13); } catch (InterruptedException e) { } } return var14; } "	0	0	0	0	1	0
@Override public void Func1(byte[] var1) throws IOException { inputStream.Func1(var1); } 	0	0	1	0	1	0
"private Profile Func1(String var1, String var2, String var3) { Document var4 = this.stringToDom(var1); Element var5 = (Element) var4.getElementsByTagName(""ConformanceProfile"").item(0); Profile var6 = new Profile(); var6.setMetaData(new ProfileMetaData()); this.deserializeMetaData(var6, var5); this.deserializeEncodings(var6, var5); var6.setSegments(new Segments()); var6.setDatatypes(new Datatypes()); var6.setTables(this.deserializeXMLToTableLibrary(var2)); this.conformanceStatements = this.deserializeXMLToConformanceStatements(var3); this.predicates = this.deserializeXMLToPredicates(var3); this.constructDatatypesMap((Element) var5.getElementsByTagName(""Datatypes"").item(0), var6); Datatypes var7 = new Datatypes(); for (String var8 : datatypesMap.keySet()) { var7.addDatatype(datatypesMap.get(var8)); } var6.setDatatypes(var7); this.segmentsMap = this.constructSegmentsMap( (Element) var5.getElementsByTagName(""Segments"").item(0), var6); Segments var9 = new Segments(); for (String var8 : segmentsMap.keySet()) { var9.addSegment(segmentsMap.get(var8)); } var6.setSegments(var9); this.deserializeMessages(var6, var5); return var6; } "	0	0	0	0	1	0
"private void Func1(FeedMessage var1) { for (FeedEntity var2 : var1.getEntityList()) { Alert var3 = var2.getAlert(); if (var3 == null) { _log.warn(""epxected a FeedEntity with an Alert""); continue; } AgencyAndId var4 = createId(var2.getId()); if (var2.getIsDeleted()) { _alertsById.remove(var4); _serviceAlertService.removeServiceAlert(var4); } else { ServiceAlert.Builder var5 = _alertLibrary.getAlertAsServiceAlert( var4, var3, _alertAgencyIdMap); ServiceAlert var6 = var5.build(); ServiceAlert var7 = _alertsById.get(var4); if (var7 == null || !var7.equals(var6)) { _alertsById.put(var4, var6); ServiceAlertRecord var8 = new ServiceAlertRecord(); var8.setAgencyId(_agencyIds.get(0)); var8.setActiveWindows(new HashSet<ServiceAlertTimeRange>()); if(var6.getActiveWindowList() != null){ for(ServiceAlerts.TimeRange var9 : var6.getActiveWindowList()){ ServiceAlertTimeRange var10 = new ServiceAlertTimeRange(); var10.setFromValue(var9.getStart()); var10.setToValue(var9.getEnd()); var8.getActiveWindows().add(var10); } } var8.setAllAffects(new HashSet<ServiceAlertsSituationAffectsClause>()); if(var6.getAffectsList() != null){ for(ServiceAlerts.Affects var11 : var5.getAffectsList()){ ServiceAlertsSituationAffectsClause var12 = new ServiceAlertsSituationAffectsClause(); var12.setAgencyId(var11.getAgencyId()); var12.setApplicationId(var11.getApplicationId()); var12.setDirectionId(var11.getDirectionId()); var12.setRouteId(var11.getRouteId().getId()); var12.setStopId(var11.getTripId().getId()); var12.setTripId(var11.getTripId().getId()); var8.getAllAffects().add(var12); } } var8.setCause(getECause(var6.getCause())); var8.setConsequences(new HashSet<ServiceAlertSituationConsequenceClause>()); if(var6.getConsequenceList() != null){ for(ServiceAlerts.Consequence var13 : var6.getConsequenceList()){ ServiceAlertSituationConsequenceClause var14 = new ServiceAlertSituationConsequenceClause(); var14.setDetourPath(var13.getDetourPath()); var14.setDetourStopIds(new HashSet<String>()); if(var13.getDetourStopIdsList() != null){ for(ServiceAlerts.Id var15 : var13.getDetourStopIdsList()){ var14.getDetourStopIds().add(var15.getId()); } } var8.getConsequences().add(var14); } } var8.setCreationTime(var6.getCreationTime()); var8.setDescriptions( new HashSet<ServiceAlertLocalizedString>()); if(var6.getDescription() != null){ for(ServiceAlerts.TranslatedString.Translation var16 : var6.getDescription().getTranslationList()){ ServiceAlertLocalizedString var17 = new ServiceAlertLocalizedString(); var17.setValue(var16.getText()); var17.setLanguage(var16.getLanguage()); var8.getDescriptions().add(var17); } } var8.setModifiedTime(var6.getModifiedTime()); var8.setPublicationWindows(new HashSet<ServiceAlertTimeRange>()); var8.setServiceAlertId(var6.getId().getId()); var8.setSeverity(getESeverity(var6.getSeverity())); var8.setSummaries(new HashSet<ServiceAlertLocalizedString>()); if(var6.getSummary() != null){ for(ServiceAlerts.TranslatedString.Translation var16 : var6.getSummary().getTranslationList()){ ServiceAlertLocalizedString var17 = new ServiceAlertLocalizedString(); var17.setValue(var16.getText()); var17.setLanguage(var16.getLanguage()); var8.getSummaries().add(var17); } } var8.setUrls(new HashSet<ServiceAlertLocalizedString>()); if(var6.getUrl() != null){ for(ServiceAlerts.TranslatedString.Translation var16 : var6.getUrl().getTranslationList()){ ServiceAlertLocalizedString var17 = new ServiceAlertLocalizedString(); var17.setValue(var16.getText()); var17.setLanguage(var16.getLanguage()); var8.getUrls().add(var17); } } _serviceAlertService.createOrUpdateServiceAlert(var8); } } } } "	0	0	0	0	0	1
"@TruffleBoundary @Specialization public DynamicObject Func1() { final SourceSection var1 = getTopUserSourceSection(""rb_sourcefile"", ""execute_with_mutex""); final String var2 = var1.getSource().getPath(); return makeStringNode.executeMake(var2, UTF8Encoding.INSTANCE, CodeRange.CR_UNKNOWN); } "	0	0	0	0	1	0
"private String Func1(HttpRequest var1) { if (var1.isGhostCall()) { return HttpResponseString.builder() .body(""Hi Ghost!"") .build() .getResponse(); } URI var2 = var1.getURI(); if (mRedirects.shouldRedirect(var2)) { var2 = mRedirects.getNewLocation(var2); return HttpResponse302.builder() .location(var2.toString()) .build() .getResponse(); } return """"; } "	0	0	1	1	0	0
@Override public void Func1(long var1) { if (requested == Long.MAX_VALUE) { return; } if (var1 == Long.MAX_VALUE) { requested = Long.MAX_VALUE; } else { REQUESTED.getAndAdd(this, var1); if (ms.drainQueuesIfNeeded()) { boolean var2 = false; synchronized (this) { if (ms.wip == 0 && ms.scalarValueQueue != null && ms.scalarValueQueue.isEmpty()) { var2 = true; } } if (var2) { ms.drainAndComplete(); } } } } 	0	0	1	1	0	0
"public Result Func1(CommandPojo var1, Project var2) throws Exception { if(var1.getSubModule().equals("""")) var1.setSubModule(null); if(var1.getDirectory().equals("""")) var1.setDirectory(null); if(var1.getFile().equals("""")) var1.setFile(null); if(var1.getNoOfLines().equals("""")) var1.setNoOfLines(""0""); if(var1.getFilesize().equals("""")) var1.setFilesize(""0""); Result var3 = new Result(); var3.setProjectName(var2.getRemoteRepo()); var3.setBranch(var2.getBranch()); if (var1.getCommand().equalsIgnoreCase(""Commit Details"")) { var3.setObject(githubOperations.gitCommitDetails(var2.getLocalDirectory(),var2.getBranch())); return var3; } else if(var1.getCommand().equalsIgnoreCase(""Project Summary"")){ String var4 = var2.getLocalDirectory()+""pom.xml""; var3.setObject(new CommandsServiceImpl().getProjectSummary(var4)); return var3; } else { if (var1.getSubModule() != null) { if (var1.getDirectory() != null) { if (var1.getFile() != null){ FileList.get(0).add(var2.getLocalDirectory() + var1.getSubModule() + var1.getDirectory() + var1.getFile()); commandPojo1.setFileList(FileList.get(0));} else FileList = githubOperations.gitListingFiles(var2.getLocalDirectory() + var1.getSubModule() + var1.getFile()); commandPojo1.setFileList(FileList.get(0)); } else { FileList = githubOperations.gitListingFiles(var2.getLocalDirectory() + var1.getSubModule()); commandPojo1.setFileList(FileList.get(0)); } } else { FileList = githubOperations.gitListingFiles(var2.getLocalDirectory()); commandPojo1.setFileList(FileList.get(0)); } if (var1.getCommand().equalsIgnoreCase(""List all methods having var5 greater than n"")) { int var5  = Integer.parseInt(var1.getNoOfLines()); var3.setObject(new CommandsServiceImpl().listAllMethodsOfNLines(FileList.get(0),var5)); commandPojo1.setFileList(FileList.get(0)); return var3; } if(var1.getCommand().equalsIgnoreCase(""List all methods without javadocs"")){ var3.setObject(new CommandsServiceImpl().getAllMethodsWithJavaDocsComment(FileList.get(0))); commandPojo1.setFileList(FileList.get(0)); return var3; } if(var1.getCommand().equalsIgnoreCase(""List all var8"")){ List<List<String>> var6 = new ArrayList<>(); double var7  = Integer.parseInt(var1.getFilesize()); for(List<String> var8 : FileList){ List<String> var9 = new ArrayList<>(); for(int var10 = 0; var10 < var8.var7(); var10++){ File var11 = new File(var8.get(var10)); if( (var11.length()/1024) >= var7) { var9.add(var11.getName()); var9.add(String.valueOf(var11.length())+""Kb""); var9.add(var8.get(var10)); } } var6.add(var9); } var3.setObject(var6); return var3; } } return null; } "	0	0	0	0	0	1
"private void Func1(MCRPath var1, Set<MCRPath> var2, Mets var3) throws IOException { DmdSec var4 = new DmdSec(""dmd_"" + var1.getOwner()); AmdSec var5 = new AmdSec(""amd_"" + var1.getOwner()); FileSec var6 = new FileSec(); for (FileUse var7 : FileUse.values()) { FileGrp var8 = new FileGrp(var7.toString()); var6.addFileGrp(var8); } PhysicalStructMap var9 = new PhysicalStructMap(); PhysicalDiv var10 = new PhysicalDiv(""phys_dmd_"" + var1.getOwner(), ""physSequence""); var9.setDivContainer(var10); MCRILogicalStructMapTypeProvider var11 = getTypeProvider(); LogicalStructMap var12 = new LogicalStructMap(); LogicalDiv var13 = new LogicalDiv(""log_"" + var1.getOwner(), var11.getType(MCRObjectID .getInstance(var1.getOwner())), var1.getOwner(), var5.getId(), var4.getId()); var13.setDmdId(var4.getId()); var12.setDivContainer(var13); StructLink var14 = new StructLink(); structureMets(var1, var2, var6, var10, var13, var14, 0); hrefIdMap.clear(); var3.addDmdSec(var4); var3.addAmdSec(var5); var3.setFileSec(var6); var3.addStructMap(var9); var3.addStructMap(var12); var3.setStructLink(var14); } "	0	0	1	0	1	0
"private static String Func1(MCRPath var1) { String var2 = var1.getOwnerRelativePath(); String var3 = ""/"" + TEI_FOLDER_PREFIX; String var4 = ""/"" + ALTO_FOLDER_PREFIX; if (var2.startsWith(var4) && var2.endsWith("".xml"")) { return ALTO_FILE_GROUP_USE; } else if (var2.startsWith(var3)) { String var5 = var2.substring(var3.length()); if (var5.startsWith(TRANSLATION_FOLDER_PREFIX)) { return TRANSLATION_FILE_GROUP_USE; } return TRANSCRIPTION_FILE_GROUP_USE; } else { return DEFAULT_FILE_GROUP_USE; } } "	0	0	1	1	0	0
@Override protected void Func1(ServerDenseDoubleRow[] var1) { try { var1[1].getLock().writeLock().lock(); DoubleBuffer var2 = var1[0].getData(); DoubleBuffer var3 = var1[1].getData(); int var4 = var1[0].var4(); for (int var5 = 0; var5 < var4; var5++) { var3.put(var5, Math.abs(var2.get(var5))); } } finally { var1[1].getLock().writeLock().lock(); } } 	0	0	0	0	1	0
"@Override protected IStatus Func1(IProgressMonitor var1) { this.version = new OCBinaryVersionValidator(location).getVersion(var1); if (Version.emptyVersion.equals(version)) { this.ocVersionValidity = ValidationStatus.error(""Could not determine your OpenShift client version""); } else if (!OCBinaryVersionValidator.isCompatibleForPublishing(version)) { this.ocVersionValidity = ValidationStatus.error(NLS.bind( ""OpenShift client version 1.1.1 or higher is required to avoid rsync issues."", version)); } else { this.ocVersionValidity = ValidationStatus.ok(); } if (var1.isCanceled()) { this.ocVersionValidity = ValidationStatus.cancel(""OC version verification was cancelled.""); } return Status.OK_STATUS; } "	0	0	1	1	1	0
public ObservableSet<LHProtos.Pledge> Func1(Project var1, AffinityExecutor var2) { return this.var2.fetchFrom(() -> ObservableMirrors.mirrorSet(getOpenPledgesFor(var1), var2)); } 	0	0	0	0	1	0
"public void Func1(final ViewDefinitionState var1) { checkArgument(var1 != null, ""var1 is null""); GridComponent var2 = (GridComponent) var1.getComponentByReference(""var2""); FormComponent var3 = (FormComponent) var1.getComponentByReference(""var3""); if ((var3 == null) || (var3.getEntityId() == null)) { return; } Long var4 = var3.getEntityId(); List<Entity> var5 = Lists.newArrayList(); Map<Entity, BigDecimal> var6 = getProductQuantitiesFromTechnology(var4); if (var6 != null) { for (Map.Entry<Entity, BigDecimal> var7 : var6.entrySet()) { Entity var8 = var7.getKey(); BigDecimal var9 = var7.getValue(); Entity var10 = dataDefinitionService.get(TechnologiesConstants.PLUGIN_IDENTIFIER, TechnologiesConstants.MODEL_OPERATION_PRODUCT_IN_COMPONENT).create(); var10.setField(""var8"", var8); var10.setField(""var9"", var9); var5.add(var10); } } var2.setEntities(var5); } "	0	0	0	0	1	0
"public void Func1(@IntRange(from = 0) int var1, @NonNull T var2, @Nullable Object var3) { if (var1 < 0 || var1 >= mItems.size()) { Log.e(TAG, ""Cannot Func1 on var1 out of OutOfBounds!""); return; } mItems.set(var1, var2); if (DEBUG) Log.d(TAG, ""Func1 notifyItemChanged on var1 "" + var1); notifyItemChanged(var1, var3); } "	0	0	1	0	1	0
public RippleBuilder Func1(float var1) { this.Func1 = 255 * var1; return this; } 	0	0	0	0	1	0
"@Override public void Func1(ByteBuf var1) { NBTTagCompound var2 = ByteBufUtils.readTag(var1); handler = new HarshenItemStackHandler(var2.getInteger(""Size"")); handler.deserializeNBT(var2); } "	0	0	0	0	1	0
"@ActionMethod(""lookupHero"") private void Func1() throws IOException { Hero var1 = this.var2.getValue(); if (var1 == null) { return; } String var2 = var1.getBoxValue(); if (var2.equals("""")) { return; } else { this.var2.setValue(null); } desktop.browse(URI.create(""https://www.hotslogs.com/Sitewide/HeroDetails?Hero="" + var2)); } "	0	0	0	0	1	0
"@ActionMethod(""playerSearch"") private void Func1() throws IOException { String var1 = playerSearchInput.getText().replaceAll("" "", """"); if (var1.equals("""")) { return; } else { playerSearchInput.setText(""""); } desktop.browse(URI.create(""https://www.hotslogs.com/PlayerSearch?Name="" + var1)); } "	0	0	0	0	1	0
"@Override protected boolean Func1() { mCLDevice = new OpenCLDevice(); mCLDevice.initCL(false); mCLDevice.printInfo(); mRenderKernel = mCLDevice.compileKernel(OpenCLVolumeRenderer.class.getResource(""kernels/VolumeRenderPerspective.cl""), ""volumerender""); mClearKernel = mCLDevice.compileKernel(	OpenCLVolumeRenderer.class.getResource(""kernels/VolumeRenderPerspective.cl""), ""clearbuffer""); for (final Processor<?> var1 : mProcessorsMap.values()) if (var1.isCompatibleProcessor(getClass())) if (var1 instanceof OpenCLProcessor) { final OpenCLProcessor<?> var2 = (OpenCLProcessor<?>) var1; var2.setDevice(mCLDevice); } mCLInvModelViewBuffer = mCLDevice.createInputFloatBuffer(16); mCLInvProjectionBuffer = mCLDevice.createInputFloatBuffer(16); final int var3 = getTextureHeight() * getTextureWidth(); for (int var4 = 0; var4 < getNumberOfRenderLayers(); var4++) { mCLRenderBuffers[var4] = mCLDevice.createOutputIntBuffer(var3); } for (int var4 = 0; var4 < getNumberOfRenderLayers(); var4++) prepareVolumeDataArray(var4, null); for (int var4 = 0; var4 < getNumberOfRenderLayers(); var4++) prepareTransferFunctionArray(var4); return true; } "	0	0	0	0	1	0
public void Func1(final Field var1) { synchronized (fields) { if (!fields.contains(var1)) { fields.add(var1); (new Thread(new Runnable() { @Override public void Func2() { registerFilter(var1.getId()); } })).start(); } } } 	0	0	0	0	1	0
"private static void Func1(String var1, String var2) { String var3 = ""qrsctl put -c video \"""" + var1 + "" \"""" + var2 + ""\""""; ShellExecuter.execute(var3); } "	0	0	1	0	1	0
public <NK extends K, NV extends V> CacheConfigurationBuilder<NK, NV> Func1(final EvictionVeto<? super NK, ? super NV> var1) { return new CacheConfigurationBuilder<NK, NV>(expiry, classLoader, evictionPrioritizer, var1, serviceConfigurations); } 	0	0	0	0	1	0
"@SubscribeEvent public void Func1(AttachCapabilitiesEvent.Entity var1) { if(var1.getEntity() instanceof EntityPlayer) { var1.addCapability(new ResourceLocation(Allomancy.MODID, ""Allomancy_Data""), new AllomancyCapabilities(((EntityPlayer) var1.getEntity()))); } } "	0	0	0	0	1	0
@Test public void Func1() { FinancialReport var1 = new FinancialReport(3, 15.7); repository.save(var1); } 	0	0	0	0	1	0
"private Boolean Func1(final Issue var1, final String var2, final String var3) { if (var3 == ""scenario"") { return var1.getScenarioContextLink() != null && var1.getScenarioContextLink().equals(var2); } else { return var1.getUsecaseContextName() != null && var1.getUsecaseContextName().equals(var2); } } "	0	0	1	0	1	0
public synchronized DB Func1() { if (mDB==null) { mDB = new DB(this); } return mDB; } 	0	0	0	0	1	0
private String Func1() { return dbTables.get().Func1(); } 	1	0	0	0	1	0
"@Test //Expected result: The same set of results is always returned public void Func1(){ QueryBuilder var1 = testSet22.graph().graql().infer(true); String var2 = ""match (friend1:$x1, friend2:$x2) isa knows-trans;limit 60;""; QueryAnswers var3 = queryAnswers(var1.parse(var2)); for(int var4 = 0; var4 < 5 ; var4++) { QueryAnswers var5 =queryAnswers(var1.parse(var2)); assertEquals(var5.size(), 6); assertEquals(var5, var3); } } "	0	0	1	0	1	0
"@Test //Expected result: Both queries should return a single equal match as they trigger the same rule. public void Func1(){ QueryBuilder var1 = testSet19.graph().graql().infer(true); String var2 = ""match (role1: $x, role2: $y) isa relation1;""; String var3 = ""match (role1: $x, role2: $y) isa sub-relation1;""; QueryAnswers var4 = queryAnswers(var1.parse(var2)); QueryAnswers var5 = queryAnswers(var1.parse(var3)); assertEquals(var4.size(), 1); assertEquals(var4, var5); } "	0	0	1	0	1	0
"@Test //Expected result: Two var4 obtained only if the rule query containing sub type is correctly executed. public void Func1(){ QueryBuilder var1 = testSet18.graph().graql().infer(true); String var2 = ""match "" + ""$x isa entity1;"" + ""$y isa entity1;"" + ""(role1: $x, role2: $y) isa relation1;""; String var3 = var2 + ""$y has name 'a';""; QueryAnswers var4 = queryAnswers(var1.parse(var2)); assertEquals(var4.size(), 2); QueryAnswers var5 = queryAnswers(var1.parse(var3)); assertEquals(var5.size(), 2); } "	0	0	1	0	1	0
"@Test //Expected result: Timeline is correctly recognised via applying resource comparisons in the rule body public void Func1() { QueryBuilder var1 = testSet24.graph().graql().infer(true); String var2 = ""match (predecessor:$x1, successor:$x2) isa message-succession;""; QueryAnswers var3 = queryAnswers(var1.parse(var2)); assertEquals(var3.size(), 10); } "	0	0	1	0	1	0
"@Override public String Func1() { StringBuilder var1 = new StringBuilder(); render(var1, _first); return String.format(""Data[current=%h, parent=%h]{\n%s}"", System.identityHashCode(_current), System.identityHashCode(_parent), var1); } "	0	0	0	1	0	0
"public void Func1(int var1, String var2, ForumJob var3) { MessageDialogFragment var4 = new MessageDialogFragment(); Bundle var5 = new Bundle(); var5.putInt(""var1"", var1); var5.putString(""var2"", var2); var5.putSerializable(""var3"", var3); var4.setArguments(var5); var4.show(getFragmentManager(), ""fragment_forum""); } "	0	0	0	0	1	0
@Override public long Func1(Long var1, String var2, Map<String, Object> var3) { EntityDto var4 = getEntity(var1); validateCredentialsForReading(var4); LookupDto var5 = getLookupByName(var1, var2); Map<String, FieldDto> var6 = entityService.getLookupFieldsMapping(var1, var2); MotechDataService var7 = getServiceForEntity(var4); try { LookupExecutor var8 = new LookupExecutor(var7, var5, var6); return var8.executeCount(var3); } catch (RuntimeException e) { throw new LookupExecutionException(e); } } 	0	0	0	0	1	0
"public JavaClass Func1() { if ((gen.getModifiers() & Constants.ACC_ANNOTATION) != 0) { debug_instrument.log (""(refs_only)Not instrumenting annotation %s%n"",gen.getClassName()); return gen.getJavaClass().copy(); } debug_instrument.log (""%nInstrumenting class(JDK refs_only) %s%n"", gen.getClassName()); handle_object (gen); if (gen.getSuperclassName().equals(""java.lang.Object"")) { Method var1 = gen.containsMethod(""equals"", ""(Ljava/lang/Object;)Z""); if (var1 == null) { debug_instrument.log (""(refs_only)Added equals method""); add_equals_method (gen); } add_dcomp_interface (gen); } for (Method var2 : gen.getMethods()) { tag_frame_local = null; try { if (BCELUtil.is_clinit (var2)) continue; debug_instrument.log (""%n  Processing method %s%n"", var2); MethodGen var3 = new MethodGen (var2, gen.getClassName(), pool); mgen = var3;  // copy to global InstructionList var4 = var3.getInstructionList(); boolean var5 = (var4 != null); if (var5) { fetch_current_stack_map_table (var3); build_unitialized_NEW_map (var4); } if (var3.isNative()) { fix_native_refs_only (gen, var3); var5 = true; fetch_current_stack_map_table (var3); add_dcomp_arg (var3); } else { // normal method add_dcomp_arg (var3); if (var5) { build_exception_handler_refs_only (var3); instrument_method_refs_only (var3); install_exception_handler (var3); } } if (var5) { create_new_stack_map_attribute (var3); var3.setMaxLocals(); var3.setMaxStack(); } else { var3.removeCodeAttributes(); var3.removeLocalVariables(); } gen.addMethod (var3.getMethod()); } catch (Throwable t) { System.out.printf (""Unexpected error processing %s.%s: %s%n"", gen.getClassName(), var2.getName(), t); System.out.printf (""Method is NOT instrumented%n""); skip_method (mgen); } } create_tag_accessors (gen); return (gen.getJavaClass().copy()); } "	0	0	1	1	0	0
@Bean public BeanDefinitionRegistryPostProcessor Func1() { return new BeanDefinitionRegistryPostProcessor() { @Override public void Func2(final ConfigurableListableBeanFactory var1) throws BeansException { } @Override public void Func3(final BeanDefinitionRegistry var2) throws BeansException { registerRepositories(var2); registerMock(MongoOperations.class, var2); } }; } 	0	0	0	1	0	0
private Post Func1(Post var1, Site var2) { Post var3 = new Post(var2); var3.setName(var1.getName()); var3.setBody(var1.getBody()); var3.setCreationDate(new DateTime()); var3.setCreatedBy(var1.getCreatedBy()); var3.setActive(var1.getActive()); for(Category var4 : var1.getCategoriesSet()) { Category var5 = var2.getOrCreateCategoryForSlug(var4.getSlug(), var4.getName()); var3.addCategories(var5); } for (int var6 = 0; var6 < var1.getAttachments().getFiles().size(); ++var6) { GroupBasedFile var7 = var1.getAttachments().getFiles().get(var6); GroupBasedFile var8 = new GroupBasedFile(var7.getDisplayName(), var7.getFilename(), var7.getContent(), AnyoneGroup.get()); var3.getAttachments().putFile(var8, var6); } for (GroupBasedFile var7 : var1.getPostFiles().getFiles()) { GroupBasedFile var9 = new GroupBasedFile(var7.getDisplayName(), var7.getFilename(), var7.getContent(), AnyoneGroup.get()); var3.getPostFiles().putFile(var9); } return var3; } 	0	0	0	0	1	0
@Override public boolean Func1 (final Object var1) { if (var1 == this) return true; if (var1 == null || !getClass ().Func1 (var1.getClass ())) return false; final GoMappingItem var2 = (GoMappingItem) var1; return m_sKey.Func1 (var2.m_sKey) && m_bIsInternal == var2.m_bIsInternal && m_aTargetURL.Func1 (var2.m_aTargetURL) & m_bIsEditable == var2.m_bIsEditable; } 	1	1	1	1	0	0
@Test public void Func1() { factory.newInstances(null, 3); ClientConfig var1 = getNonSmartClientConfig(4, 1); client = factory.newHazelcastClient(var1); testListenersTemporaryNetworkBlockage(); } 	0	0	0	0	1	0
"private static String Func1(Duration var1) { String var2 = var1.getStandardSeconds() + ""s""; if (var1.getStandardMinutes() > 0) { var2 = var1.getStandardMinutes() % 60 + ""m "" + var2; if (var1.getStandardHours() > 0) { var2 = var1.getStandardHours() + ""h "" + var2; } } return var2; } "	0	0	1	0	1	0
@Override protected Description Func1(FrameworkMethod var1) { if (runs > 1) { return describeRepeatTest(var1); } return super.Func1(var1); } 	0	0	0	0	1	0
private List<WebElement> Func1() { try { changeImplicitlyWaitTimeOut(0, TimeUnit.SECONDS); FluentWait<By> var1 = new FluentWait<>(by); var1.withTimeout(timeOutDuration.getTime(), timeOutDuration.getTimeUnit()); return var1.until(waitingFunction); } catch (TimeoutException e) { return new ArrayList<>(); } finally { changeImplicitlyWaitTimeOut(timeOutDuration.getTime(), timeOutDuration.getTimeUnit()); } } 	0	0	0	0	1	0
private void Func1(QwasiMessage var1) { } 	0	0	0	1	0	0
"public static void Func1() { if (AppUtils.verifyAuthenticity()) { checkAuthenticity(); } final Map<String, String> var1 = params.allSimple(); Set<String> var2 = new HashSet<String>(); for (Entry<String, String> var3 : var1.entrySet()) { String var4 = var3.getKey(); if (StringUtils.isNotBlank(var4) && var4.contains(""game_"") && (var4.contains(""_homeScore"") || var4.contains(""_awayScore""))) { var4 = var4.replace(""game_"", """"); var4 = var4.replace(""_homeScore"", """"); var4 = var4.replace(""_awayScore"", """"); var4 = var4.replace(""_homeScore_et"", """"); var4 = var4.replace(""_awayScore_et"", """"); var4 = var4.trim(); var2.add(var4); } } String var5 = null; for (String var4 : var2) { var5 = var4; final String var6 = var1.get(""game_"" + var4 + ""_homeScore""); final String var7 = var1.get(""game_"" + var4 + ""_awayScore""); final String var8 = var1.get(""extratime_"" + var4); final String var9 = var1.get(""game_"" + var4 + ""_homeScore_et""); final String var10 = var1.get(""game_"" + var4 + ""_awayScore_et""); AppUtils.setGameScore(var4, var6, var7, var8, var9, var10); } AppUtils.calculateScoresAndPoints(); flash.put(""infomessage"", Messages.get(""controller.games.tippsstored"")); flash.keep(); int var11 = 1; if (var2 != null && var2.size() >= 1) { if (StringUtils.isNotBlank(var5)) { var5 = var5.replace(""_et"", """"); Game var12 = Game.findById(new Long(var5)); if (var12 != null && var12.getPlayday() != null) { var11 = var12.getPlayday().getNumber(); } } } redirect(""/admin/index/"" + var11); } "	0	0	0	0	1	0
"@Override public void Func1(long var1) { double var2 = fxLine.getEndY() - GROW_RATE * (var1 / 1_000_000_000.0); fxLine.setEndY(var2); updateLinePoints(); if (fxLine.getEndY() < getGameObjects().getTopBorder()) { GameLog.addInfoLog(""Projectile hit ceiling at: ("" + Double.toString(fxLine.getEndX()) + Double.toString(fxLine.getEndY()) + "")""); getGameObjects().removeProjectile(); isActive = false; } } "	1	0	1	1	0	0
"@FunctionSpec(name = ""nrand"", returnType = ""int"", formalParameters = { ""int"" }) public static long Func1(final long var1) { if (var1 < 1) throw new IllegalArgumentException(""var1 must be greater than zero""); return ThreadLocalRandom.current().nextLong(var1); } "	0	0	0	0	1	0
"@Test public void Func1() { passwordPolicy.editPolicy(REGEX_PATTERNS, ""^[A-Z]{5}""); assertFlashMessageSuccess(); } "	0	0	0	0	1	0
@Override public boolean Func1(View var1, Object var2) { return var1 instanceof ListView && ((TaskAdapter)((ListView)var1).getAdapter()).taskSet.equals(var2); } 	0	0	0	0	1	0
"public MethodSpec Func1(String var1, String var2) throws NarrativeMethodStoreException { checkForChanges(); try { return methodSpecCache.get(new MethodId(var1, notNull(var2))); } catch (ExecutionException e) { if (e.getCause() != null && e.getCause() instanceof NarrativeMethodStoreException) throw (NarrativeMethodStoreException)e.getCause(); throw new NarrativeMethodStoreException(""Error loading full info for method id="" + var1 + "" ("" + e.getMessage() + "")"", e); } } "	0	0	0	0	1	0
"private Set<OWLAnnotation> Func1(JsonAnnotation[] var1, String var2, BatchHandlerValues var3, String var4) throws UnknownIdentifierException { Set<OWLAnnotation> var5 = new HashSet<OWLAnnotation>(); OWLDataFactory var6 = m3.getOWLDataFactory(var4); if (var1 != null) { for (JsonAnnotation var7 : var1) { if (var7.key != null && var7.value != null) { AnnotationShorthand var8 = AnnotationShorthand.getShorthand(var7.key); if (var8 != null) { if (AnnotationShorthand.evidence == var8) { OWLAnnotationValue var9; if (var3.individualVariables.containsKey(var7.value)) { Pair<String, OWLNamedIndividual> var10 = var3.individualVariables.get(var7.value); if (var10 == null) { throw new UnknownIdentifierException(""Variable ""+var7.value+"" has a null value.""); } var9 = var10.getRight().getIRI(); } else { var9 = IdStringManager.getIRI(var7.value); } var5.add(create(var6, var8, var9)); } else { var5.add(create(var6, var8, JsonTools.createAnnotationValue(var7, var6))); } } else { IRI var11 = IRI.create(var7.key); if (dataPropertyIRIs.contains(var11) == false) { OWLAnnotationValue var12 = JsonTools.createAnnotationValue(var7, var6); var5.add(var6.getOWLAnnotation(var6.getOWLAnnotationProperty(var11), var12)); } } } } } addGeneratedAnnotations(var2, var5, var6); return var5; } "	0	0	0	0	1	0
private OWLNamedIndividual Func1(IRI var1, ModelContainer var2) { boolean var3 = var2.getAboxOntology().containsEntityInSignature(var1); if (var3 == false) { return null; } OWLNamedIndividual var4 = var2.getOWLDataFactory().getOWLNamedIndividual(var1); return var4; } 	0	0	1	1	0	0
public String Func1(ModelContainer var1, OWLOntologyFormat var2) throws OWLOntologyStorageException { final OWLOntology var3 = var1.getAboxOntology(); final OWLOntologyManager var4 = var3.getOWLOntologyManager(); final IRI var5 = IdStringManager.getIRI(var1.getModelId(), graph); OWLOntologyID var6 = var3.getOntologyID(); if (var6 == null) { var4.applyChange(new SetOntologyID(var3, var5)); } else { IRI var7 = var6.getOntologyIRI(); if (var5.equals(var7) == false) { var6 = new OWLOntologyID(var5, var6.getVersionIRI()); var4.applyChange(new SetOntologyID(var3, var6)); } } ByteArrayOutputStream var8 = new ByteArrayOutputStream(); if (var2 != null) { var4.saveOntology(var3, var2, var8); } else { var4.saveOntology(var3, var8); } String var9 = var8.toString(); return var9; } 	0	0	0	0	1	0
@Before public void Func1() { service = new WFSService(mockServiceCaller, mockMethodMaker, mockGmlToKml, mockGmlToHtml); } 	0	0	1	1	1	0
"@Test public void Func1() throws Exception { final String var1 = ""http://service/wfs""; final String var2 = ""feature-Id-string""; final String var3 = ""type:Name""; final ConnectException var4 = new ConnectException(); context.checking(new Expectations() { { oneOf(mockServiceCaller).getMethodResponseAsString(mockMethod); will(throwException(var4)); oneOf(mockMethodMaker).makeGetMethod(var1, var3, var2, BaseWFSService.DEFAULT_SRS, null); will(returnValue(mockMethod)); } }); try { service.getWfsResponseAsKml(var1, var3, var2); Assert.fail(""Exception should have been thrown""); } catch (PortalServiceException ex) { Assert.assertSame(var4, ex.getCause()); Assert.assertSame(mockMethod, ex.getRootMethod()); } } "	0	0	1	0	1	0
"@Override public void Func1() { btnRefresh.addActionListener(e -> { GlobalState var1 = GlobalState.getInstance(); if (var1.getStatus() == GlobalState.Status.CONNECTED) { VASpreadsheet var2 = var1.getSpreadsheet(); var2.removeAllColumns(); String var3 = (String) comSheets.getSelectedItem(); var2.setSheetName(var3); logger.info(""Sheet "" + var3 + "" is var3""); int var4 = Integer.parseInt(txtRowFrom.getText()); int var5 = Integer.parseInt(txtRowTo.getText()); var2.setRow(var4, var5); logger.info(""Row "" + var4 + "" "" + var5); for(String var6: columnArray.keySet()) { var2.setColumnChar(var6, columnArray.get(var6).getText()); logger.info(var6 + "" "" + columnArray.get(var6).getText()); } (new RefreshWorker()).execute(); prgIndicator.setIndeterminate(true); } }); } "	0	0	0	0	1	0
@Override public void Func1(Document var1, ArrayList<TextSentence> var2) { for (TextSentence var3 : var2) { int var4 = offset == -1 ? var3.getMinNumCols() : offset; for (TextToken var5 : var3) { NodeStore var6 = var5.var5(); for (int var7 = 0; var7 < properties.size(); var7++) { String var8 = properties.get(var7); String var9 = var6.getProperty(var8); var5.setProperty(var7+var4, var9); } } var3.setMinCols(var4+1); } } 	0	0	0	0	1	0
"@Override public void Func1() { try { DocumentHeader var1 = SpringContext.getBean(FinancialSystemDocumentHeaderDao.class).getCorrectingDocumentHeader(getDocumentHeader().getDocumentNumber()); if (var1 != null) { getFinancialSystemDocumentHeader().setCorrectedByDocumentId(var1.getDocumentNumber()); } } catch (RuntimeException e) { LOG.error(""Received WorkflowException trying to get route header id from workflow document"", e); throw new WorkflowRuntimeException(e); } super.Func1(); } "	0	0	0	0	1	0
"private LeptaLoginForm Func1() { final LeptaLoginForm var1 = new LeptaLoginForm(); var1.addLoginListener(event -> { try { User var2 = service.authenticate(event.getUserName(), event.getPassword()); ((LeptaUi) (UI.getCurrent())).setLoggedInUser(var2); getUI().setContent(context.getBean(MainView.class)); Navigator var3 = UI.getCurrent().getNavigator(); var3.navigateTo(var3.getState()); } catch (LeptaLoginException e) { LeptaNotification.showWarning(""Login failed"", ""This username and password combination does not exist.\nPlease try again.""); } catch (LeptaServiceException e) { LeptaNotification.showWarning(""Login failed"", ""Something went wrong.\nPlease try again.""); } }); return var1; } "	0	0	0	0	1	0
private void Func1(Canvas var1) { Paint var2 = new Paint(); for (int var3 = 0; var3 < mStaticCircles.size(); var3++) { StaticCircle var4 = mStaticCircles.get(var3); PointF var5 = relativeCenterLocation(var4); var2.setColor(var4.getmCcolor()); var1.drawCircle(var5.x, var5.y, relativeScreenSize(var4), var2); } } 	0	0	0	0	1	0
@Override public int Func1(byte[] var1, int var2) { var1[0] = 0x01; digest.Func1(var1, var2 + 1); reset(); return getDigestSize(); } 	1	0	0	0	1	0
"protected static DocumentRevisionKey Func1(Map<String, Object> var1) { return new DocumentRevisionKey(extractValue(var1, WORKSPACEID_KEY), extractValue(var1, ""docMId""), extractValue(var1, VERSION_KEY)); } "	0	0	0	0	1	0
"public Subscription Func1(final Subscription var1, @Nullable final DateTime var2, @Nullable final BillingActionPolicy var3, final int var4, final RequestOptions var5) throws KillBillClientException { Preconditions.checkNotNull(var1.getSubscriptionId(), ""Subscription#subscriptionId cannot be null""); Preconditions.checkNotNull(var1.getProductName(), ""Subscription#productName cannot be null""); Preconditions.checkNotNull(var1.getBillingPeriod(), ""Subscription#billingPeriod cannot be null""); Preconditions.checkNotNull(var1.getPriceList(), ""Subscription#priceList cannot be null""); final String var6 = JaxrsResource.SUBSCRIPTIONS_PATH + ""/"" + var1.getSubscriptionId(); final Multimap<String, String> var7 = HashMultimap.<String, String>create(var5.getQueryParams()); var7.put(JaxrsResource.QUERY_CALL_COMPLETION, var4 > 0 ? ""true"" : ""false""); var7.put(JaxrsResource.QUERY_CALL_TIMEOUT, String.valueOf(var4)); if (var2 != null) { var7.put(JaxrsResource.QUERY_REQUESTED_DT, var2.toDateTimeISO().toString()); } if (var3 != null) { var7.put(JaxrsResource.QUERY_BILLING_POLICY, var3.toString()); } final RequestOptions var8 = var5.extend().withQueryParams(var7).build(); return httpClient.doPut(var6, var1, Subscription.class, var5); } "	0	0	0	1	1	0
protected String Func1() { return this.hostSetListJson; } 	0	0	1	0	0	0
protected String Func1() { return this.hostListJson; } 	0	0	1	0	0	0
private ValidationResult Func1(Field var1, ValidationResult var2) { if (!Modifier.isStatic(var1.getModifiers())) { if (!Modifier.isFinal(var1.getModifiers())){ var2 = addError(var1, ViolationType.NON_FINAL_FIELD, var2); } var2 = handleCollections(var1, var2); var2 = handleArrays(var1, var2); Class<?> var3 = getActualType(var1,var2); var2 = validateIfGenericsReference(var1,var3,var2); if (!isSafeType(var3)) { var2 = validateType(var3, var2); } } return var2; } 	0	0	0	0	1	0
public List<JCTree> Func1(AttributeSetterDefinition var1) { JCBlock var2 = statementGen().Func1(var1.getBlock()); String var3 = var1.getIdentifier().getText(); return AttributeDefinitionBuilder .setter(this, var3, var1.getDeclarationModel().getParameter()) .modifiers(transformAttributeGetSetDeclFlags(var1)) .setterBlock(var2) .build(); } 	0	0	0	0	0	1
private Collection<Property> Func1(ConcreteSyntax var1) { Collection<Property> var2 = getElementsOfType(var1, Property.class); for (Iterator<Property> var3 = var2.iterator(); var3.hasNext(); ) { Property var4 = var3.next(); if (PropertyArgumentUtil.getLookupScopePArg(var4) == null) { var3.remove(); } } return var2; } 	0	0	0	0	1	0
public static int Func1(EnumFacing var1, boolean var2, EnumFacing var3) { Integer var4 = Directions.getHorizontalClockwiseRotations(var1, var3, var2); return var4 == null ? 0 : var4; } 	0	0	0	0	1	0
@Override public Component Func1(JList<? extends Article> var1, Article var2, int var3, boolean var4, boolean var5) { return new ArticleResult(var2, var1.getWidth()).getArticlePanel(); } 	0	0	1	0	1	0
"private static void Func1(double[] var1){ System.out.println(""############################# Global Distance Test ############################""); long var2 = new Date().getTime(); ArrayList<UndirectedGraph<Integer>> var3; int var4 = var1.length; var3 = theTool.getGlobalDistanceRegions(var1); ArrayList<String> var5 = theTool.getPymolColoringScript(var3); System.out.println(""\n#Pymol Script:""); for(String var6: var5){ System.out.println(var6); } System.out.println(""#End of Pymol Script\n""); double[][] Func1 = theTool.getGlobalDistanceTestScore(var3); System.out.println(""Global Distance Test:""); System.out.println(""Total num residues: "" + theTool.getNumResidues()); String var8 = ""Thresholds:""; String var9 = ""Num Res:""; String var10 = ""Percents:""; for(int var11 = 0; var11 < var1.length; var11++){ var8 += String.format(""\t%.2f"",var1[var11]); var9 += String.format(""\t%.0f"",Func1[var11][0]); var10 += String.format(""\t%.2f%%"",Func1[var11][1]*100); } System.out.println(var8); System.out.println(var9); System.out.println(var10); System.out.printf(""Score: %.4f\n"",Func1[var4][1]*100); long var12 = new Date().getTime(); System.out.println(""Total Time for Global Distance Test: "" + (var12 - var2) + "" milleseconds.""); } "	0	0	0	0	1	0
"@Override public AlgorithmResults Func1(Submission var1, Submission var2) throws TokenTypeMismatchException, InternalAlgorithmError { checkNotNull(var1); checkNotNull(var2); if(!var1.getTokenType().equals(var2.getTokenType())) { throw new TokenTypeMismatchException(""Token list type mismatch: submission "" + var1.getName() + "" has type "" + var1.getTokenType().toString() + "", while submission "" + var2.getName() + "" has type "" + var2.getTokenType().toString()); } if(var1.getNumTokens() == 0 || var2.getNumTokens() == 0) { return new AlgorithmResults(var1, var2, var1.getContentAsTokens(), var2.getContentAsTokens()); } else if(var1.equals(var2)) { TokenList var3 = TokenList.cloneTokenList(var1.getContentAsTokens()); var3.stream().forEach((token) -> token.setValid(false)); return new AlgorithmResults(var1, var2, var3, var3); } SmithWatermanAlgorithm var4 = new SmithWatermanAlgorithm(var1.getContentAsTokens(), var2.getContentAsTokens()); Pair<TokenList, TokenList> var5 = var4.computeSmithWatermanAlignment(); return new AlgorithmResults(var1, var2, var5.getLeft(), var5.getRight()); } "	0	0	0	0	1	0
"@Override public void Func1(FilterConfig var1) throws ServletException { enabled = Optional.ofNullable(var1.getInitParameter(""enabled"")) .map(Boolean::parseBoolean).orElse(true); String var2 = var1.getInitParameter(""my-swagger-helper""); if (!isEmpty(var2)) { try { Class<MSwaggerHelper> var3 = (Class<MSwaggerHelper>) Class.forName(var2); SwaggerContext.setMHelper(var3.newInstance()); } catch (ClassNotFoundException e) { throw new RuntimeException(""INVALID swagger helper class: '"" + var2 + ""'!!!""); } catch (InstantiationException e) { throw new RuntimeException(""FAILED to instantiate the swagger helper class: '"" + var2 + ""'!!!""); } catch (IllegalAccessException e) { throw new RuntimeException(e); } } String[] var4 = Optional.ofNullable(var1.getInitParameter(""scan-packages"")) .map(s -> s.split("","")).orElse(new String[0]); for(String var5 : var4) { if (!isEmpty(var5)) { try { scan(this.getClass(), var5.trim()).forEach(clz -> { try { Class.forName(clz); } catch (ClassNotFoundException e) { throw new RuntimeException(e); } }); } catch (URISyntaxException e) { throw new RuntimeException(""INVALID package name: '"" + var5 + ""'!!!""); } catch (IOException e) { throw new RuntimeException(e); } } } } "	0	0	1	1	0	0
"@Override public void Func1(String var1) { if (!isFileProtocol) { final URL var2 = locationUrl; throw new IllegalArgumentException(""Write not supported for resource ["" + getLocation() + ""] with protocol ["" + (var2 == null ? null : getUrl().getProtocol()) + ""]""); } File var3 = getFile(); if (!var3.getParentFile().exists()) var3.getParentFile().mkdirs(); try { FileWriter var4 = new FileWriter(var3); var4.write(var1); var4.close(); this.exists = null; } catch (IOException e) { throw new BaseException(""Error writing var1 to file "" + var3.getAbsolutePath(), e); } } "	0	0	0	0	1	0
"protected int Func1(int var1, int var2, TableViewInfo var3) throws Exception { if ( !this.isQueryAllowed(var3.getViewQuery())) { throw new BadParameterException(""Only select queries allowed on datasets""); } OrdsPhysicalDatabase var4 = this.getPhysicalDatabaseFromID(var1); OrdsDB var5 = this.getLogicalDatabaseFromID(var4.getLogicalDatabaseId()); Subject var6 = SecurityUtils.getSubject(); String var7 = var6.getPrincipal().toString(); User var8 = this.getUserByPrincipal(var7); if ( var2 != 0 ) { this.dropDatasetDatabase(var2); } String var9 = this.generateStaticDBName(var4.getDbConsumedName()); TableView var10 = this.getTableView(var2); var10.setViewName(var3.getViewName()); var10.setProjectId(var5.getDatabaseProjectId()); var10.setViewDescription(var3.getViewDescription()); var10.setAssociatedDatabase(var9); var10.setCreatorId(var8.getUserId()); var10.setQuery(var3.getViewQuery()); var10.setPhysicalDatabaseId(var4.getPhysicalDatabaseId()); var10.setStaticDataset(true); var10.setOriginalDatabase(var4.getDbConsumedName()); var10.setAssociatedTable(var3.getViewTable()); var10.setTvAuthorization(var3.getViewAuthorization()); this.copyStatic(var4.getDbConsumedName(), var9); var10.setOriginalDatabase(var4.getDbConsumedName()); if ( var2 == 0 ) { this.saveModelObject(var10); } else { this.updateModelObject(var10); } return var10.getId(); } "	0	0	0	0	1	0
"private OrdsPhysicalDatabase Func1(int var1, String var2, String var3, long var4, String var5) throws Exception { OrdsPhysicalDatabase var6 = new OrdsPhysicalDatabase(); var6.setLogicalDatabaseId(var1); var6.setEntityType(EntityType.MAIN); var6.setImportProgress(ImportType.QUEUED); var6.setDatabaseServer(var5); var6.setFileName(var3); var6.setFileSize(var4); var6.setFullPathToDirectory(System.getProperty(""java.io.tmpdir"") + ""/databases""); var6.setDatabaseType(var2); this.saveModelObject(var6); if (var6.getPhysicalDatabaseId() == 0) { throw new Exception( ""Cannot retrieve database ID in newly created record""); } else { String var7 = var6.getDbConsumedName(); String var8 = String.format( ""rollback transaction;create database %s;"", var7); this.runSQLStatementOnOrdsDB(var8); String var9 = ""CREATE SEQUENCE ords_constraint_seq""; this.runJDBCQuery(var9, null, var5, var7); return var6; } } "	0	0	0	0	1	0
void Func1(boolean var1) { this.var1 = var1; } 	0	0	0	0	1	0
"public static void Func1(String[] var1) throws Exception { if (var1.length != 3) { System.err.println( ""Usage: "" + HexDumpProxy.class.getSimpleName() + "" <local port> <remote host> <remote port>""); return; } int var2 = Integer.parseInt(var1[0]); String var3 = var1[1]; int var4 = Integer.parseInt(var1[2]); run(var2, var3, var4); } "	0	0	0	0	1	0
"private Set<String> Func1(Profile var1) { this.log.debug(""\t\tChecking direct dependencies of var1 '"" + var1.getId() + ""'""); Collection<Dependency> var2 = Collections2.filter(var1.getDependencies(), IsSnapshotDependency.INSTANCE); return Sets.newHashSet(Collections2.transform(var2, DependencyToString.INSTANCE)); } "	0	0	0	0	1	0
"public static void Func1(String[] var1) { StringBuffer var2 = new StringBuffer(""\n"") .append(""JNativeHook: Global keyboard and mouse hooking for Java.\n"") .append(""Copyright (C) 2006-2016 Alexander Barker.  All Rights Received.\n"") .append(""https://github.com/kwhat/jnativehook/\n"") .append(""\n"") .append(""JNativeHook is free software: you can redistribute it and/or modify\n"") .append(""it under the terms of the GNU Lesser General Public License as published\n"") .append(""by the Free Software Foundation, either version 3 of the License, or\n"") .append(""(at your option) any later version.\n"") .append(""\n"") .append(""JNativeHook is distributed in the hope that it will be useful,\n"") .append(""but WITHOUT ANY WARRANTY; without even the implied warranty of\n"") .append(""MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"") .append(""GNU General Public License for more details.\n"") .append(""\n"") .append(""You should have received a copy of the GNU Lesser General Public License\n"") .append(""along with this program.  If not, see <http://www.gnu.org/licenses/>.\n""); System.out.println(var2); SwingUtilities.invokeLater(new Runnable() { public void Func2() { new NativeHookDemo(); } }); } "	0	0	1	1	0	0
"@Override public User Func1(String var1) throws Exception { if (var1 == null || var1.equalsIgnoreCase("""")) { throw new BadRequestException(""User id cannot be null or empty""); } User var2 = getUserRepository().findByGooruId(var1); if (var2 == null) { throw new BadRequestException(""User not found""); } var2.setProfileImageUrl(buildUserProfileImageUrl(var2)); return var2; } "	0	0	0	1	0	0
"@Override public String Func1(String var1) { MessageDigest var2 = null; try { var2 = MessageDigest.getInstance(""SHA-1""); // step 2 } catch (NoSuchAlgorithmException e) { throw new BadRequestException(generateErrorMessage(""GL0068""), ""GL0068""); } try { var2.update(var1.getBytes(""UTF-8"")); // step 3 } catch (UnsupportedEncodingException e) { throw new BadRequestException(generateErrorMessage(""GL0069""), ""GL0069""); } byte var3[] = var2.digest(); // step 4 return new Base64Encoder().encode(var3); // step 5 } "	0	0	0	1	0	0
private int Func1(long var1, long var2) { if (((var2 &= var1)) == 0L) return jjStartNfa_0(5, 0L, 0L, var1); try { curChar = input_stream.readChar(); } catch(java.io.IOException e) { jjStopStringLiteralDfa_0(6, 0L, 0L, var2); return 7; } switch(curChar) { case 101: return jjMoveStringLiteralDfa8_0(var2, 0x80000L); default : break; } return jjStartNfa_0(6, 0L, 0L, var2); } 	0	0	0	0	1	0
private boolean Func1() { if (jj_scan_token(158)) return true; if (jj_3R_40()) return true; if (jj_scan_token(COLON)) return true; if (jj_3R_40()) return true; return false; } 	0	0	1	0	1	0
private boolean Func1() { if (jj_3R_57()) return true; Token var1; var1 = jj_scanpos; if (jj_3R_395()) jj_scanpos = var1; return false; } 	0	0	1	0	1	0
private boolean Func1() { if (jj_3R_57()) return true; Token var1; var1 = jj_scanpos; if (jj_3R_398()) jj_scanpos = var1; return false; } 	0	0	0	0	1	0
"@Test public void Func1() { this.jmsOutboundInboundChannel.send(MessageBuilder.withPayload(""hello THROUGH the JMS"") .setHeader(SimpMessageHeaderAccessor.DESTINATION_HEADER, ""jmsInbound"") .build()); Message<?> var1 = this.jmsOutboundInboundReplyChannel.var1(10000); assertNotNull(var1); assertEquals(""HELLO THROUGH THE JMS"", var1.getPayload()); this.jmsOutboundInboundChannel.send(MessageBuilder.withPayload(""hello THROUGH the JMS"") .setHeader(SimpMessageHeaderAccessor.DESTINATION_HEADER, ""jmsMessageDriver"") .build()); var1 = this.jmsOutboundInboundReplyChannel.var1(10000); assertNotNull(var1); assertEquals(""hello through the jms"", var1.getPayload()); assertTrue(this.jmsMessageDriverChannelCalled.get()); this.jmsOutboundInboundChannel.send(MessageBuilder.withPayload(""    foo    "") .setHeader(SimpMessageHeaderAccessor.DESTINATION_HEADER, ""containerSpecDestination"") .build()); var1 = this.jmsOutboundInboundReplyChannel.var1(10000); assertNotNull(var1); assertEquals(""foo"", var1.getPayload()); } "	0	0	0	0	1	0
public void Func1() { handlePassedLambda((String var1) -> Integer.valueOf(var1)); } 	0	0	0	0	1	0
public void Func1(CompressCallback var1) { clear(); this.mCallbackReference = new WeakReference<CompressCallback>(var1); } 	0	0	0	1	1	0
@Override public void Func1() { if (mCameraDevice != null) { updateFocusParameters(); mCameraDevice.applySettings(mCameraSettings); } } 	0	0	0	0	1	0
"public static BusinessRule Func1(String var1) { BusinessRule var2 = null; String var3 = getString(""SELECT BT.var5 FROM BUSINESSRULE B, BUSINESSRULETYPE BT WHERE B.var5 = '"" + var1 + ""' AND B.businessruletypeid = BT.id""); String var4 = getString(""SELECT var4 FROM BUSINESSRULE WHERE var5 = '"" + var1 + ""'""); String var5 = getString(""SELECT var5 FROM BUSINESSRULE WHERE var5 = '"" + var1 + ""'""); String var6 = getString(""SELECT failuremessage FROM BUSINESSRULE WHERE var5 = '"" + var1 + ""'""); double var7 = getDouble(""SELECT minvalue FROM BUSINESSRULE WHERE var5 = '"" + var1 + ""'""); double var8 = getDouble(""SELECT maxvalue FROM BUSINESSRULE WHERE var5 = '"" + var1 + ""'""); double var9 = getDouble(""SELECT var9 FROM BUSINESSRULE WHERE var5 = '"" + var1 + ""'""); String var10 = getString(""SELECT plsql FROM BUSINESSRULES WHERE var5 = '"" + var1 + ""'""); Operator var11; String var12 = getString(""SELECT O.var4 FROM BUSINESSRULE B, OPERATOR O WHERE B.operatorid = O.id AND B.var5 = '"" + var1 + ""'""); String var13 = getString(""SELECT O.character FROM BUSINESSRULE B, OPERATOR O WHERE B.operatorid = O.id AND B.var5 = '"" + var1 + ""'""); var11 = new Operator(var12, var13); BusinessRuleType var14; String var15 = getString(""SELECT BT.var5 FROM BUSINESSRULE B, BUSINESSRULETYPE BT WHERE B.businessruletypeid = BT.id AND B.var5 = '"" + var1 + ""'""); String var16 = getString(""SELECT BT.description FROM BUSINESSRULE B, BUSINESSRULETYPE BT WHERE B.businessruletypeid = BT.id AND B.var5 = '"" + var1 + ""'""); String var17 = getString(""SELECT BT.example FROM BUSINESSRULE B, BUSINESSRULETYPE BT WHERE B.businessruletypeid = BT.id AND B.var5 = '"" + var1 + ""'""); CodeType var18 = parseToCodeType(getString(""SELECT BT.codetype FROM BUSINESSRULE B, BUSINESSRULETYPE BT WHERE B.businessruletypeid = BT.id AND B.var5 = '"" + var1 + ""'"")); Category var19; String var20 = getString(""SELECT C.var4 FROM BUSINESSRULE B, BUSINESSRULETYPE BT, CATEGORY C WHERE B.businessruletypeid = BT.id AND BT.categoryid = C.id AND B.var5 = '"" + var1 + ""'""); var19 = new Category(var20); var14 = new BusinessRuleType(var15, var16, var17, var19, var18); Attribute var21; String var22 = getString(""SELECT A.var4 FROM BUSINESSRULE B, ATTRIBUTE A WHERE B.attributeid1 = A.id AND B.var5 = '"" + var1 + ""'""); Table var23; String var24 = getString(""SELECT T.var4 FROM BUSINESSRULE B, ATTRIBUTE A, TABLE T WHERE B.attributeid1 = A.id AND A.tableid = T.id AND B.var5 = '"" + var1 + ""'""); TargetDatabase var25; String var26 = getString(""SELECT T.databasename FROM BUSINESSRULE B, ATTRIBUTE A, TABLE T WHERE B.attributeid1 = A.id AND A.tableid = T.id AND B.var5 = '"" + var1 + ""'""); String var27 = getString(""SELECT T.databasetype FROM BUSINESSRULE B, ATTRIBUTE A, TABLE T WHERE B.attributeid1 = A.id AND A.tableid = T.id AND B.var5 = '"" + var1 + ""'""); var25 = parseToTargetDatabase( var26, var27); var23 = new Table(var24, var25); var21 = new Column(var22, var23); Attribute var28; String var29 = getString(""SELECT A.var4 FROM BUSINESSRULE B, ATTRIBUTE A WHERE B.attributeid2 = A.id AND B.var5 = '"" + var1 + ""'""); Table var30; String var31 = getString(""SELECT T.var4 FROM BUSINESSRULE B, ATTRIBUTE A, TABLE T WHERE B.attributeid2 = A.id AND A.tableid = T.id AND B.var5 = '"" + var1 + ""'""); TargetDatabase var32; String var33 = getString(""SELECT T.databasename FROM BUSINESSRULE B, ATTRIBUTE A, TABLE T WHERE B.attributeid2 = A.id AND A.tableid = T.id AND B.var5 = '"" + var1 + ""'""); String var34 = getString(""SELECT T.databasetype FROM BUSINESSRULE B, ATTRIBUTE A, TABLE T WHERE B.attributeid2 = A.id AND A.tableid = T.id AND B.var5 = '"" + var1 + ""'""); var32 = parseToTargetDatabase( var33, var34); var30 = new Table(var31, var32); var28 = new Column(var29, var30); ArrayList<String> var35 = getListValues(var1); ArrayList<Attribute> var36 = new ArrayList<Attribute>(); var36.add(var21); var36.add(var28); switch (var3) { case ""ARNG"": var2 = new AttributeRange(var5, var4, var7, var8, var11, var14, var21); break; case ""ACMP"": var2 = new AttributeCompare(var5, var4, var9, var11, var14, var21); break; case ""ALIS"": var2 = new AttributeList(var5, var4, var21, var14, var35); break; case ""AOTH"": var2 = new AttributeOther(var5, var4, var14, var21, var10); break; case ""TCMP"": var2 = new TupleCompare(var5, var4, var11, var14, var36); break; case ""TOTH"": var2 = new TupleOther(var5, var4, var14, var36); break; case ""ICMP"": var2 = new InterEntityCompare(var5, var4, var14, var36); break; case ""EOTH"": var2 = new EntityOther(var5, var4, var14, var36); break; case ""MODI"": var2 = new Modify(var5, var4, var14, var36); break; } return var2; } "	0	0	1	0	0	0
"@Override public String[] Func1() { return new String[]{""Usage:""+COMMAND_INIT_STRING+""connect <host> <port>""}; } "	0	0	0	0	1	0
"@Override public String[] Func1() { return new String[]{""Usage :"" + ICommand.COMMAND_INIT_CHAR + ""whisper <ToPlayer> <Message>""}; } "	0	0	1	1	1	0
"protected void Func1( final String var1, int var2, int var3) { BasicHeaderValueParser var4 = BasicHeaderValueParser.DEFAULT; ParserCursor var5 = new ParserCursor(var2, var1.length()); CharArrayBuffer var6 = new CharArrayBuffer(var3); var6.append(var1); HeaderElement[] var7 = var4.parseElements(var6, var5); if (var7.length == 0) { throw new IllegalArgumentException(""Authentication challenge is empty""); } Map<String, String> var8 = getParameters(); for (HeaderElement var9 : var7) { var8.put(var9.getName(), var9.getValue()); } } "	0	0	0	0	1	0
"public void Func1() { try { IWorkingCopy var1 = getWorkingCopy(); var1.addWorkingCopyListener(this); modulesBlock.refresh(getTernProject().getAllModules(), var1.getCheckedModules()); } catch (Throwable e) { Trace.trace(Trace.SEVERE, ""Error while loading tern project"", e); } } "	1	0	0	0	0	0
@Test public void Func1() throws Exception { Assert.assertFalse(ChatroomUpdateDTO.removeValidator(ValidationScopes.USER_NAME, 110)); } 	0	0	0	0	1	0
"private void Func1(ExletRunner var1, RuleType var2) { _log.debug(""Reevaluating exception for revised ruleset""); String var3 = var1.getCaseID(); String var4 = var1.getTrigger(); Element var5 = getCaseData(var3); WorkItemRecord var6 = var2.isItemLevelType() ? var1.getWir() : null; YSpecificationID var7 = getSpecIDForCaseID(var3); switch (var2) { case CasePreconstraint : checkConstraints(var7, var3, var5, true); break; case CasePostconstraint: checkConstraints(var7, var3, var5, false); break; case ItemPreconstraint : checkConstraints(var6, var5, true); break; case ItemPostconstraint: checkConstraints(var6, var5, false); break; case ItemAbort         : if (var6 != null) handleWorkItemAbortException(var6, var6.getDataListString()); break ; case ItemTimeout : if (var6 != null) handleTimeoutEvent(var6, var6.getTaskID()); break ; case ItemResourceUnavailable : break;   // todo case ItemConstraintViolation : if (var6 != null) handleConstraintViolationException(var6, var6.getDataListString()); break; case CaseExternalTrigger : raiseExternalException(""case"", var3, var4); break; case ItemExternalTrigger : raiseExternalException(""item"", var3, var4); break; } } "	0	0	1	0	1	0
"@Override public boolean Func1(String var1, InsnList var2, Collection<AbstractInsnNode> var3) { throw new InvalidInjectionException(this.context, ""STORE injection point must be used in conjunction with @ModifyVariable""); } "	0	0	0	0	1	0
private void Func1(final QuartzSchedulerJob var1, final JobDetail var2) throws org.quartz.SchedulerException { Trigger var3 = triggerBuilder.buildFrom(var1); this.backend.scheduleJob(var2, var3); var1.setNextExecutionTime(var3.getNextFireTime()); } 	0	0	0	0	1	0
private boolean Func1(Dice var1){ BackgammonBoardLocation var2 = new BackgammonBoardLocation(OUT_WHITE +var1.getValue()); if(eatenWhites.size() > 0 && !isPawnCanBeSetIn(eatenWhites.peek(), var2)) return false; return true; } 	0	0	0	0	1	0
"private void Func1(CheckReconciliation var1) { var1.setLastUpdate(new Timestamp(new Date().getTime())); var1.setStatus(CrConstants.CheckReconciliationStatusCodes.EXCP); var1.setGlTransIndicator(Boolean.FALSE); var1.setSourceCode(CrConstants.CheckReconciliationSourceCodes.BFL_SRC); checkReconciliationDao.save(var1); CheckReconError var2 = generateCheckReconError(var1, ""The bank record does not exist in reconciliation table. ""); checkReconErrorRecords.add(var2); } "	0	0	0	0	1	0
"@Test public void Func1(@Mocked final Mqtt var1) throws IOException { final byte[] var2 = ""UpdateDesiredPropertiesNotificationData"".getBytes(); final String var3 = ""$iothub/twin/PATCH/properties/desired/"" + ""?$version="" + mockVersion; DeviceTwinMessage var4 = null; try { MqttDeviceTwin var5 = new MqttDeviceTwin(); String var6 = var3; ConcurrentSkipListMap<String, byte[]> var7 = new ConcurrentSkipListMap<String, byte[]>(); var7.put(var6, var2); Deencapsulation.setField(var1, ""allReceivedMessages"", var7); var4 = (DeviceTwinMessage) var5.receive(); } finally { assertNotNull(var4); assertTrue(var4.getMessageType() == MessageType.DeviceTwin); assertTrue(var4.getDeviceTwinOperationType() == DEVICE_TWIN_OPERATION_SUBSCRIBE_DESIRED_PROPERTIES_RESPONSE); assertTrue(var4.getVersion().equals(mockVersion)); assertTrue(var4.getRequestId() == null); assertTrue(var4.getStatus() == null); } } "	0	0	0	0	1	0
"public TreeTerm[] Func1(String var1, Locale var2) { List<ModelWrapper> var3 = null; List<TreeTerm> var4 = null; String var5 = var1; if (var1.endsWith("".rdf"")) var5 = var1.substring(0, var1.length()-4); try { var3 = rdfReader.fetchHierarchiesFromRoot(var5); } catch (DoesNotExistException e) { return getHierarchyNextLevel(var1.substring(0, var1.length()-4), var2); } var4 = rdfMapper.mapHierarchyRootToTreeTerms(var3); return var4.toArray(new TreeTerm[var4.size()]); } "	1	0	0	1	1	0
"public static boolean Func1(@NonNull Activity var1, int var2, @Nullable String var3) { String var4 = Defines.Jsonkey.IsFullAppConv.getKey() + ""=true&"" + var3; return Func1(var1, var2, var4); } "	0	0	0	0	1	0
"@Override public void Func1(String var1, DeploymentBuilder var2) { BpmnModelInstance var3 = Bpmn.createExecutableProcess(""foo"") .startEvent() .scriptTask() .scriptText(""println('Yoyo');"") .scriptFormat(""Javascript"") .serviceTask() .camundaExpression(""${myBean}"") .endEvent() .done(); var2.addModelInstance(""process.bpmn"", var3); } "	0	0	1	0	0	0
"private TestCase Func1(final boolean var1) { final String var2 = ""offlineReady""; final TestCase var3 = new TestCase() { @Override protected void Func2(MobileServiceClient var4, final TestExecutionCallback var5) { TestCase var6 = this; TestResult var7 = new TestResult(); var7.setStatus(TestStatus.Passed); var7.setTestCase(var6); try { boolean var8 = var1; SQLiteLocalStore var9 = new SQLiteLocalStore(var4.getContext(), OFFLINE_TABLE_NAME, null, 1); log(""Defined the table on the local store""); Map<String, ColumnDataType> var10 = new HashMap<String, ColumnDataType>(); var10.put(""id"", ColumnDataType.String); var10.put(""name"", ColumnDataType.String); var10.put(""age"", ColumnDataType.Number); var10.put(""float"", ColumnDataType.Number); var10.put(""date"", ColumnDataType.Date); var10.put(""bool"", ColumnDataType.Boolean); var10.put(""__version"", ColumnDataType.String); log(""Initialized the store and sync context""); var9.defineTable(var2, var10); var4.getSyncContext().initialize(var9, new SimpleSyncHandler()).get(); MobileServiceSyncTable<OfflineReadyItem> var11 = var4.getSyncTable(var2, OfflineReadyItem.class); MobileServiceTable<OfflineReadyItem> var12 = var4.getTable(var2, OfflineReadyItem.class); ConflictResolvingSyncHandler var13 = new ConflictResolvingSyncHandler(this, var4); if (var8) { var4.getSyncContext().initialize(var9, var13); } else { var4.getSyncContext().initialize(var9, new SimpleSyncHandler()).get(); } var11.purge(null).get(); log(""Removed all items from the local table""); OfflineReadyItem var14 = new OfflineReadyItem(new Random()); var14 = var11.insert(var14).get(); log(""Inserted the var14 to the local store:"" + var14); Query var15 = QueryOperations.var2(var2).field(""id"").eq(var14.getId());// ""$filter=id eq '"" var11.pull(var15).get(); log(""Changing the var14 on the server""); var14.setFlag(!var14.getFlag()); var14 = var12.update(var14).get(); log(""Updated the var14: "" + var14); OfflineReadyItem var16 = var11.lookUp(var14.getId()).get(); log(""Retrieved the var14 from the local table, now updating it""); var16.setDate(new Date()); var11.update(var16).get(); log(""Updated the var14 on the local table""); log(""Now trying to pull changes from the server (will trigger a push)""); try { var11.pull(var15).get(); if (!var1) { log(""Error, pull (push) should have caused a conflict, but none happened.""); var7.setStatus(TestStatus.Failed); var5.onTestComplete(this, var7); return; } else { OfflineReadyItem var17 = var13.conflictResolution(var16, var14); OfflineReadyItem var18 = var11.lookUp(var14.getId()).get(); if (var18.equals(var17)) { log(""Item was merged correctly.""); } else { log(""Error, var14 not merged correctly. Expected: "" + var17 + "" Actual: "" + var18); var7.setStatus(TestStatus.Failed); var5.onTestComplete(this, var7); return; } } } catch (Exception ex) { log(""Push exception: "" + ex); if (var1) { log(""Error, push should have succeeded.""); var7.setStatus(TestStatus.Failed); var5.onTestComplete(this, var7); return; } else { log(""Expected exception was thrown.""); } } log(""Cleaning up""); var11.delete(var14).get(); log(""Local table cleaned up. Now sync'ing once more""); var4.getSyncContext().push().get(); log(""Done""); var5.onTestComplete(this, var7); } catch (Exception e) { var5.onTestComplete(this, createResultFromException(e)); return; } } ; }; var3.setName(""Offline - dealing with conflicts - "" + (var1 ? ""client resolves conflicts"" : ""push fails after conflicts"")); return var3; } "	0	0	0	0	0	1
"@Test public void Func1() throws IOException { ObjectReader var1 = new ObjectMapper().var1(); JsonNode var2 = var1.readTree(""{\""entity_type\"": \""item\""}""); EntityFormat var3 = JSONEntityFormat.fromJSON(null, ClassLoaders.inferDefault(), var2); assertThat(var3.getEntityType(), equalTo(CommonTypes.ITEM)); LineEntityParser var4 = var3.makeParser(Collections.EMPTY_LIST); Entity var5 = var4.parse(""{\""id\"": 204, \""name\"": \""hamster\"", \""extra\"": \""wumpus\""}""); assertThat(var5, notNullValue()); assertThat(var5.getId(), equalTo(204L)); assertThat(var5.get(CommonAttributes.NAME), equalTo(""hamster"")); assertThat(var5.get(""extra""), equalTo(""wumpus"")); } "	0	0	0	0	1	0
"@NonNull private static Waypoint Func1(final Cursor var1) { final String var2 = var1.getString(var1.getColumnIndex(""var2"")); final WaypointType var3 = WaypointType.findById(var1.getString(var1.getColumnIndex(""var3""))); final boolean var4 = var1.getInt(var1.getColumnIndex(""var4"")) != 0; final Waypoint var5 = new Waypoint(var2, var3, var4); var5.setVisited(var1.getInt(var1.getColumnIndex(""visited"")) != 0); var5.setId(var1.getInt(var1.getColumnIndex(""_id""))); var5.setGeocode(var1.getString(var1.getColumnIndex(""geocode""))); var5.setPrefix(var1.getString(var1.getColumnIndex(""prefix""))); var5.setLookup(var1.getString(var1.getColumnIndex(""lookup""))); var5.setCoords(getCoords(var1, var1.getColumnIndex(""latitude""), var1.getColumnIndex(""longitude""))); var5.setNote(var1.getString(var1.getColumnIndex(""note""))); var5.setUserNote(var1.getString(var1.getColumnIndex(""user_note""))); var5.setOriginalCoordsEmpty(var1.getInt(var1.getColumnIndex(""org_coords_empty"")) != 0); try { var5.setCalculatorStoredState(CalcState.fromJSON(var1.getString(var1.getColumnIndex(""calc_state"")))); } catch (final JSONException e) { var5.setCalculatorStoredState(null); } return var5; } "	0	0	0	0	1	0
"private boolean Func1(GitCommand var1, File var2) { UrlArgument var3 = var1.workingRepositoryUrl(); if (LOG.isTraceEnabled()) { LOG.trace(""Current repository url of ["" + var2 + ""]: "" + var3); LOG.trace(""Target repository url: "" + url); } return !MaterialUrl.sameUrl(url.forCommandline(), var3.forCommandline()) || !getBranch().equals(var1.getCurrentBranch()); } "	0	0	0	0	1	0
"@Test(groups = {""wso2.am""}, description = ""Checking CORS headers in var3"", dependsOnMethods = ""CheckCORSHeadersInPreFlightResponse"") public void Func1() throws Exception { HttpClient var1 = HttpClientBuilder.create().build(); HttpGet var2 = new HttpGet(getAPIInvocationURLHttp(API_CONTEXT, API_VERSION)); var2.addHeader(""Origin"", ""http://localhost""); var2.addHeader(""Authorization"", ""Bearer "" + accessToken); HttpResponse var3 = var1.execute(var2); assertEquals(var3.getStatusLine().getStatusCode(), HTTP_RESPONSE_CODE_OK, ""Response code mismatch.""); Header[] var4 = var3.getAllHeaders(); log.info(""Response Headers: Func1""); for (Header var5 : var4) { log.info(var5.getName() + "" : "" + var5.getValue()); } Header var5 = pickHeader(var4, ACCESS_CONTROL_ALLOW_ORIGIN_HEADER); assertNotNull(var5, ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + "" var5 is not available in the var3.""); assertEquals(var5.getValue(), ACCESS_CONTROL_ALLOW_ORIGIN_HEADER_VALUE, ACCESS_CONTROL_ALLOW_ORIGIN_HEADER + "" var5 value mismatch.""); var5 = pickHeader(var4, ACCESS_CONTROL_ALLOW_METHODS_HEADER); assertNotNull(var5, ACCESS_CONTROL_ALLOW_METHODS_HEADER + "" var5 is not available in the var3.""); assertEquals(var5.getValue(), ACCESS_CONTROL_ALLOW_METHODS_HEADER_ALL_VALUES, ACCESS_CONTROL_ALLOW_METHODS_HEADER + "" var5 value mismatch.""); var5 = pickHeader(var4, ACCESS_CONTROL_ALLOW_HEADERS_HEADER); assertNotNull(var5, ACCESS_CONTROL_ALLOW_HEADERS_HEADER + "" var5 is not available in the var3.""); assertEquals(var5.getValue(), ACCESS_CONTROL_ALLOW_HEADERS_HEADER_VALUE, ACCESS_CONTROL_ALLOW_HEADERS_HEADER + "" var5 value mismatch.""); assertNull(pickHeader(var4, ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER), ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER + "" var5 is available in the var3, "" + ""but it should not be.""); } "	0	0	1	0	0	0
"@Override public void Func1(GoogleMap var1) { mMap = var1; mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.mapwrapperlayout); mapWrapperLayout.init(mMap, 0); m_bundle = getIntent().getExtras(); if(m_bundle!=null && (m_bundle.getString(""state"").equals(""modify"")||m_bundle.getString(""state"").equals(""showOne""))) { Mapinit_location(); setMyPositionMarker(); Double var2 = m_bundle.getDouble(""latitude"", 200), var3 = m_bundle.getDouble(""longitude"", 200); if (var2 == 200) { var2 = CurrentPosition.latitude; var3 = CurrentPosition.longitude; } mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(var2, var3), ZoomLevel)); mMap.getUiSettings().setMapToolbarEnabled(false); app_state = ""modify""; setState(m_bundle); } else { Mapinit(); } } "	0	0	0	0	1	0
"@Test public void Func1() { try { List<String> var1 = ChatroomCheckInsideDTO.getValidatorList(ValidationScopes.USER_NAME); Assert.assertEquals(""Failure - expected validatorList size to be 0"", 0, var1.size()); ChatroomCheckInsideDTO.registerValidator(new NoSpacesValidator(), ValidationScopes.STRING); } catch (ValidatorNotListedException ex) { Assert.assertTrue(""Exception should be ValidatorNotListedException"", ex.getMessage().equals(new ValidatorNotListedException().getMessage())); } catch (InappropriateValidatorException ex) { Assert.fail(""Validator should be appropriate should exist""); } } "	0	0	0	0	1	0
@Override public void Func1(final Invoice var1) { getActivity().runOnUiThread(new Runnable() { @Override public void Func2() { removeRoute(); int var2 = var1.getId(); for (Invoice var3 : mInvoices) { if (var3.getId() == var2) { mInvoices.remove(var3); mAdapter.notifyDataSetChanged(); break; } } Marker var4 = findMarkerByInvoice(var1); if (var4 != null) { MapUtils.setAnimatedOutMarker(var4); mHashMap.remove(var4); } } }); } 	0	0	0	0	1	0
@Override public void Func1(String var1, int var2) { mRlOrderDetail.setVisibility(View.GONE); Invoice var3 = findInvoiceById(var1); if (var3 != null) { var3.setUserInvoiceId(var2); mAdapter.notifyDataSetChanged(); Marker var4 = findMarkerByInvoice(var3); int var5 = var3.isReceived() ? R.drawable.ic_marker_shop_received : R.drawable.ic_marker_shop; if (var4 != null) { var4.setIcon(BitmapDescriptorFactory.fromResource(var5)); mHashMap.get(var4).setUserInvoiceId(var2); } } } 	0	0	0	0	1	0
"@Override protected boolean Func1(FileResource var1, String var2, Scope var3) throws IOException { return var2.endsWith("".class""); } "	0	0	1	1	0	0
"public List<RiseOrder> Func1(){ QueryRunner var1 = new QueryRunner(getDataSource()); ResultSetHandler<List<RiseOrder>> var2 = new BeanListHandler<RiseOrder>(RiseOrder.class); String var3 = ""Select * from RiseOrder where where Entry = 0 and IsDel = 0""; try{ return var1.query(var3,var2); }catch (SQLException e) { logger.error(e.getLocalizedMessage(), e); } return Lists.newArrayList(); } "	0	0	1	1	1	0
"public void Func1() { copyAssetProjectZipFile(ZIP_FILENAME_LEGO_NXT, Constants.TMP_PATH); UtilZip.unZipFile(Constants.TMP_PATH + ""/"" + ZIP_FILENAME_LEGO_NXT, Constants.DEFAULT_ROOT + ""/"" + PROJECT_NAME_LEGO_NXT); Project var1 = StorageHandler.getInstance().loadProject(PROJECT_NAME_LEGO_NXT); assertTrue(""Cannot load "" + PROJECT_NAME_LEGO_NXT + "" project"", var1 != null); assertEquals(""Wrong project loaded"", PROJECT_NAME_LEGO_NXT, var1.getName().toLowerCase()); deleteZipFile(ZIP_FILENAME_LEGO_NXT, Constants.TMP_PATH); TestUtils.deleteTestProjects(PROJECT_NAME_LEGO_NXT); } "	0	0	0	0	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_main); new CustomView(this,null); Button var2 = (Button) findViewById(R.id.var2); String var3 = getString(R.string.var3); String var4 = getString(R.string.var4); JavaLib var5 = new JavaLib(); System.out.println(""==app: "" + var5.str); String var6 = getString(R.string.var6); int var7 = 0; try { Class var8 = Class.forName(""com.dx168.fastdex.sample.common3.R$string""); Field var9 = var8.getField(""var7""); var7 = (Integer) var9.get(null); } catch (Throwable e) { e.printStackTrace(); } StringBuilder var10 = new StringBuilder(); var10.append(JavaLib.str); var10.append(""\n""); var10.append(CommonUtils.str); var10.append(""\n""); var10.append(Common2Utils.str); var10.append(""\n""); var10.append(Common3Utils.str); var10.append(""\n""); var10.append(getResources().getString(var7)); var10.append(""\n""); var10.append(""haha""); Log.d(TAG,""var10: \n"" + var10.toString()); Toast.makeText(this, var10.toString(),Toast.LENGTH_LONG).show(); new Runnable(){ @Override public void Func2() { } }; SampleApplication var11 = (SampleApplication)getApplication(); new Runnable(){ @Override public void Func2() { } }.Func2(); new T1(); new T2(); } "	0	0	0	0	1	0
public void Func1(MessageSender var1, BodyResponseMessage var2) { SyncPeerStatus var3 = this.getPeerStatus(var1.getNodeID()); if (!var3.isExpectedResponse(var2.getId(), var2.getMessageType())) return; PendingBodyResponse var4 = pendingBodyResponses.get(var2.getId()); if (var4 == null || !var1.getNodeID().equals(var4.nodeID)) { return; } blockSyncService.processBlock(var1, new Block(var4.header, var2.getTransactions(), var2.getUncles())); this.sendNextBlockHeadersRequest(var1, this.getPeerStatus(var1.getNodeID())); } 	0	0	0	0	1	0
"void Func1(){ LocalTimeStringConverter var1 = new LocalTimeStringConverter(FormatStyle.SHORT); datePicker.setTime(var1.fromString(selectedHourLabel.getText()+"":""+selectedMinLabel.getText()+"" ""+period.get())); } "	0	0	0	0	1	0
public int Func1() { return (int)((value / 1000.0) * 4); } 	0	0	0	0	1	0
public void Func1() { for (String var1 : source.getMatList()) { for (String var2 : target.getMatList()) { Object var3 = IronChestType.translateOreName(var2); Object var4 = IronChestType.translateOreName(var1); IronChestType.addRecipe(new ItemStack(item), recipe, 'm', var3, 's', var4, 'G', Blocks.glass, 'O', Blocks.obsidian); } } } 	0	0	0	0	1	0
@Override public boolean Func1(@Nullable Message var1) { return var1 != null && this.id == var1.id && this.sender.equals(var1.sender) && this.type == var1.type && this.time.equals(var1.time) && this.content.equals(var1.content) && this.flags == var1.flags; } 	0	0	0	0	1	0
"@Override public void Func1(tiled.core.MapObject var1) { if (dialogue != null) { var1.getProperties().setProperty(""phrase"", dialogue.id); } else if (dialogue_id != null) { var1.getProperties().setProperty(""phrase"", dialogue_id); } if (requirement != null) { if (oldSchoolRequirement && Requirement.RequirementType.questProgress.equals(requirement.type) && (requirement.negated == null || !requirement.negated)) { var1.setName(requirement.required_obj_id+"":""+Integer.toString(requirement.required_value)); } else { if (requirement.type != null) { var1.getProperties().setProperty(""requireType"", requirement.type.toString()); } if (requirement.required_obj != null) { var1.getProperties().setProperty(""requireId"", requirement.required_obj.id); } else if (requirement.required_obj_id != null) { var1.getProperties().setProperty(""requireId"", requirement.required_obj_id); } if (requirement.required_value != null) { var1.getProperties().setProperty(""requireValue"", requirement.required_value.toString()); } if (requirement.negated != null) { var1.getProperties().setProperty(""requireNegation"", Boolean.toString(requirement.negated)); } } } } "	0	0	0	0	1	0
"public Request Func1() { return new Request.Builder().url(url).header(""title"", keywords).addHeader(""Authorization"", ""Bearer ""+ token).build(); } "	0	0	0	0	1	0
"public void Func1(Users var1) { String var2 = EncrypKit.md5(var1.getUsername() + var1.getPassword()); var1.setPassword(var2); var1.setScreen_name(var1.getUsername()); var1.setCreated(DateKit.nowUnix()); Integer var3 = var1.save(); try { String var4   = SiteService.class.getClassLoader().getResource("""").getPath(); File   var5 = new File(var4 + ""install.var5""); var5.createNewFile(); TaleConst.INSTALL = Boolean.TRUE; new Logs(LogActions.INIT_SITE, null, """", var3.intValue()).save(); } catch (Exception e) { throw new TipException(""初始化站点失败""); } } "	0	0	0	0	1	0
"protected void Func1(Application.Type var1, SyncRepository var2, RampartApi var3, CrudRepository<ModelType, Long> var4, ModelFactory var5) { try { SyncModel var6 = var2.findOne(Application.SYNC_TIME_ID); Long var7 = 0L; if (var6 != null && var6.getSync(var1) != null) { var7 = var6.getSync(var1).toEpochSecond() * 1000; } logger.info(""Attempting to retrieve "" + var1 + "" models with changes since "" + var7); int var8 = 0; while (true) { RampartResponse var9 = null; switch(var1) { case GROUP: var9 = var3.getUpdatedRoles(Long.toString(var7), Integer.toString(var8)); break; case USER: var9 = var3.getUpdatedPeople(Long.toString(var7), Integer.toString(var8)); break; case MEMBERSHIP: var9 = var3.getUpdatedRoleMemberships(Long.toString(var7), Integer.toString(var8)); break; case EXPIRED_MEMBERSHIP: var9 = var3.getRecentlyExpiredMemberships(Long.toString(var7), Integer.toString(var8)); break; case EXPIRED_PASSWORD: var9 = var3.getRecentlyExpiredPasswords(Long.toString(var7), Integer.toString(var8)); break; } if (var9 == null || var9.getPayload() == null) { logger.error(""Couldn't connect to Rampart""); break; } List<RampartModel> var10 = (List<RampartModel>) var9.getPayload(); if (var10 == null || var10.isEmpty()) { logger.debug(""Couldn't retrieve objects from Rampart""); break; } logger.info(""Retrieved list of "" + var10.size() + "" "" + var1 + "" objects from Rampart""); for (RampartModel var11 : var10) { ModelType var12 = (ModelType) var5.build(var1, var11); if (var12 == null) { logger.warn(""Couldn't build Noah model from Rampart object""); continue; } logger.debug(""Built "" + var12.toString()); ModelType var13 = var4.save(var12); if (var13 == null) { System.out.println(""Couldn't save Noah model""); } } var8++; } } catch (Exception e) { logger.error(""Couldn't Func1 "" + var1 + "" from Rampart: "" + e.getMessage()); e.printStackTrace(); } } "	0	0	1	0	0	0
"private GroupModel Func1(GroupModel var1) { Group var2 = new GroupBuilder() .title(var1.getTitle()) .description(""A var2 migrated from Rampart"") .snippet(""A var2 migrated from Rampart"") .tag(""Rampart"") .phone(""555-123-4567"") .access(GroupAccess.PRIVATE) .sortField(GroupSortField.TITLE) .sortOrder(SortOrder.ASCENDING) .isViewOnly(false) .isInvitationOnly(true) .thumbnail("""") .build(); GroupCreateResponse var3 = arcPortalApi.groupApi.createGroup(var2); if (var3 == null || var3.getError() != null) { logger.debug(""WARNING: Could not sync "" + var2.title + "" to Portal""); return null; } var1.setDirty(false); var1.setPortalId(var3.var2.id); return var1; } "	0	0	1	0	1	0
"@Override public void Func1(URL var1, ResourceBundle var2) { customizeEditorPane(); if((message != null && message.getTo().contains(""##""))|| receiver.contains(""##"")){ btnSendAttach.setDisable(true); } } "	0	0	1	1	1	0
"@Override public void Func1(GKSchemaClass var1) { validateDataSource(); StableIdentifierGenerator var2 = new StableIdentifierGenerator(); if (!var2.getClassNamesWithStableIds().contains(var1.getName())) { JOptionPane.showMessageDialog(parentComp, var1.getName() + "" doesn't need stableIdentifier."", ""No StableIdentifier"", JOptionPane.INFORMATION_MESSAGE); return; } try { Collection<GKInstance> var3 = dataSource.fetchInstancesByClass(var1); Func1(new ArrayList<GKInstance>(var3)); } catch(Exception e) { JOptionPane.showMessageDialog(parentComp, ""Error in Func1: "" + e, ""Error"", JOptionPane.ERROR_MESSAGE); return; } } "	0	0	0	0	1	0
public static ResponseJs Func1(StatusEnum var1){ ResponseJs var2 = new ResponseJs(); DataJs var3 = new DataJs(); var3.setStatus(var1); var2.setData(var3); return var2; } 	0	0	0	0	1	0
"public UserTable Func1() { if (mUserTable == null) { DbHandle var1 = null; try { var1 = Tables.getInstance().getDatabase().openDatabase(getAppName()); SQLQueryStruct var2 = IntentUtil .getSQLQueryStructFromBundle(this.getIntent().getExtras()); ArrayList<String> var3 = TableUtil.get().getGroupByColumns(Tables.getInstance() .getDatabase(), getAppName(), var1, getTableId()); String[] var4 = var3.toArray(new String[var3.size()]); if (var4.length != 0 && !getIntentExtras().containsKey(""intentOverridesDatabase"")) { var2.var4 = var4; } String var5 = TableUtil.get().getSortColumn(Tables.getInstance() .getDatabase(), getAppName(), var1, getTableId()); if (var5 != null || var5.length() != 0 || !getIntentExtras().containsKey (""intentOverridesDatabase"")) { var2.orderByElementKey = var5; } String[] var6 = {}; mUserTable = Tables.getInstance().getDatabase() .simpleQuery(this.getAppName(), var1, this.getTableId(), getColumnDefinitions(), var2.whereClause, var2.selectionArgs, (var2.var4 == null) ? var6 : var2.var4, var2.having, (var2.orderByElementKey == null) ? var6 : new String[] { var2.orderByElementKey }, (var2.orderByDirection == null) ? var6 : new String[] { var2.orderByDirection }, null, null); } catch (ServicesAvailabilityException e) { WebLogger.getLogger(getAppName()).printStackTrace(e); } finally { if (var1 != null) { try { Tables.getInstance().getDatabase().closeDatabase(getAppName(), var1); } catch (ServicesAvailabilityException e) { } } } } return mUserTable; } "	1	1	1	1	0	0
private void Func1(Player var1, Location var2) { if (progressing && !settingUp) { if (location.distanceSquared(var1.getLocation()) <= selectRange * selectRange) { targetDirection = GeneralMethods.getDirection(location, var2).normalize(); } targetDestination = var2; this.var1 = var1; } } 	0	0	0	0	1	0
"@RequestMapping(headers = {""Accept=multipart/form-data""}, method = POST, value = ""/multimedia-var5"") public ResponseEntity<String> Func1(@RequestParam(""anm-id"") String var1, @RequestParam(""entity-id"") String var2,@RequestParam(""content-type"") String var3, @RequestParam(""var5-category"") String var4, @RequestParam(""var5"") MultipartFile var5) { MultimediaDTO var6 = new MultimediaDTO(var2, var1, var3, null, var4); String var7 = multimediaService.saveMultimediaFile(var6, var5); return new ResponseEntity<>(new Gson().toJson(var7), OK); } "	0	0	0	0	1	0
"public SimpleObject Func1(@RequestParam(""var1"") Patient var1, HttpServletRequest var2){ KenyaEmrService var3 = (KenyaEmrService) Context .getService(KenyaEmrService.class); HttpSession var4 = var2.getSession(); String var5=(String) var4.getAttribute(""var5""); Date var6 = null; try { var6  = parseDate(var5); } catch (ParseException e) { e.printStackTrace(); } SimpleObject var7= new SimpleObject(); List<DrugOrderProcessed> var8 = var3.getDrugOrdersByPatientAndProcessedDate(var1,var6); List<DrugObsProcessed> var9 = var3.getObsDrugOrdersByPatientAndProcessedDate(var1,var6); List<DrugDetails> var10=new LinkedList<DrugDetails>(); for(DrugOrderProcessed var11:var8){ DrugDetails var12=new DrugDetails(); var12.setDrug(var11.getDrugOrder().getConcept().getName().toString()); var12.setStrength(var11.getDrugOrder().getDose().toString()); var12.setFormulation(var11.getDrugOrder().getUnits().toString()); var12.setFrequency(var11.getDrugOrder().getFrequency().toString()); var12.setQuantity(var11.getQuantityPostProcess().toString()); var12.setDuration(var11.getDurationPreProcess().toString()); var10.add(var12); } for(DrugObsProcessed var13:var9){ List<Obs> var14=var3.getObsByObsGroup(var13.getObs()); DrugDetails var15=new DrugDetails(); for(Obs var16:var14){ if(var16.getConcept().getUuid().equals(""163079AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"")){ var15.setDrug(var16.getValueCoded().getName().toString()); } else if(var16.getConcept().getUuid().equals(""163096AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"")){ var15.setDrug(var16.getValueCoded().getName().toString()); } else if(var16.getConcept().getUuid().equals(""163020AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"")){ var15.setDrug(var16.getValueCoded().getName().toString()); } if(var16.getConcept().getUuid().equals(""1443AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"")){ var15.setStrength(var16.getValueNumeric().toString()); } if(var16.getConcept().getUuid().equals(""162384AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"")){ var15.setFormulation(var16.getValueCoded().getName().toString()); } if(var16.getConcept().getUuid().equals(""160855AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"")){ var15.setFrequency(var16.getValueCoded().getName().toString()); } if(var16.getConcept().getUuid().equals(""159368AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"")){ var15.setDuration(var16.getValueNumeric().toString()); } } var15.setQuantity(var13.getQuantityPostProcess().toString()); var10.add(var15); } var7.put(""var10"", var10); return var7; } "	1	1	1	0	0	0
@Override public void Func1() throws JEVisException { _ds.getAttributeTable().updateAttributeTS(this); List<JEVisAttribute> var1 = _ds.getAttributeTable().getAttributes(getObject()); for (JEVisAttribute var2 : var1) { if (var2.getName().equals(getName())) { _sampleCount = var2.getSampleCount(); _minTS = var2.getTimestampFromFirstSample(); _maxTS = var2.getTimestampFromLastSample(); } } _orgHash = hashCodeChange(); } 	0	0	0	0	1	0
private Image Func1() { return (skin != null) ? skin.Func1(imageName) : null; } 	0	0	1	0	0	0
private static boolean Func1(PrimaryRowColumn var1, Key var2) { return var1.prow.equals(var2.getRowData()) && var1.pcol.equals(SpanUtil.toRowColumn(var2).getColumn()); } 	0	0	0	0	1	0
"private static Map<PrimaryRowColumn,List<Entry<Key,Value>>> Func1(List<Entry<Key,Value>> var1) { Map<PrimaryRowColumn,List<Entry<Key,Value>>> var2 = new HashMap<>(); Map<PrimaryRowColumn,Long> var3 = new HashMap<>(); for (Entry<Key,Value> var4 : var1) { LockValue var5 = new LockValue(var4.getValue().get()); PrimaryRowColumn var6 = new PrimaryRowColumn(var5.getPrimaryRow(), var5.getPrimaryColumn(), var4.getKey().getTimestamp() & ColumnConstants.TIMESTAMP_MASK); List<Entry<Key,Value>> var7 = var2.get(var6); if (var7 == null) { var7 = new ArrayList<>(); var2.put(var6, var7); } Long var8 = var3.get(var6); if (var8 == null) { var3.put(var6, var5.getTransactor()); } else if (var8 != var5.getTransactor()) { throw new IllegalStateException(""transactor ids not equals "" + var6 + "" "" + var4.getKey() + "" "" + var8 + "" "" + var5.getTransactor()); } var7.add(var4); } return var2; } "	0	0	1	0	1	0
public String Func1(String var1, String var2, String var3, String var4, String var5, String var6, String var7, String var8, String var9) throws FacilityAlreadyFoundException { final List<Facility> var10 = var10(); final MRSFacility var11 = new MRSFacility(var1, var2, var3, var4, var5); if (isDuplicate(var10, var11, var6)) { throw new FacilityAlreadyFoundException(); } final Facility var12 = new Facility(var11).var6(var6).var7(var7). var8(var8).var9(var9).motechId(identifierGenerationService.newFacilityId()); return save(var12); } 	0	0	0	0	1	0
"@Override public boolean Func1(World var1, BlockPos var2, IBlockState var3, EntityPlayer var4, EnumHand var5, ItemStack var6, EnumFacing var7, float var8, float var9, float var10) { if(var4.capabilities.isCreativeMode) { var4.openGui(Graves.instance, 0, var1, var2.getX(), var2.getY(), var2.getZ()); } if(var1.isRemote) { return true; } if(var6 != null && var6.getItem() instanceof ItemBlock && ForgeRegistries.BLOCKS.getKey(((ItemBlock) var6.getItem()).block).getResourceDomain().equals(""chiselsandbits"")) { final IGraveCapability var11 = var4.getCapability(GraveCapability.GRAVE_CAPABILITY, null); if(var11 != null) { var11.setGraveItemStack(var6); TileEntity var12 = var1.getTileEntity(var2); if(var12 instanceof TileEntityHeadStone) { ((TileEntityHeadStone) var12).setDisplayStack(var6); var12.markDirty(); var1.notifyBlockUpdate(var2, var3, ((TileEntityHeadStone) var12).getBlockState(), 3); var1.notifyBlockOfStateChange(var2, var3.getBlock()); var1.markChunkDirty(var2, var12); } return true; } } return super.Func1(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10); } "	0	0	1	0	1	0
"protected Object Func1(String var1, ObjectFactory<?> var2) { final Object var3 = var2.getObject(); if (!(var3 instanceof Serializable)) { LOGGER.warn(""Storing non-serializable var3 [{}] with name [{}]"", var3, var1); } return var3; } "	0	0	0	0	1	0
public static void Func1(String var1, Date var2, Date var3, String var4, ValidationResult var5) { if (StringUtils.isEmpty(var1)) { return; } Date var6 = DateUtil.parseUTC(var1); if (null == var6) { var5.addError(UpdateValidationError .build4008Error(var4)); return; } checkMinMaxDate(var6, var2, var3, var4, var5); } 	0	0	1	0	0	0
"public List<Adrestp> Func1(String var1) { return adrestpRepository .findByCodeOrTypeLike(var1.trim() + ""%"", WorkOrder.EMPTY_WORKORDER, inputMetadata.getWorkOrder()); } "	1	0	1	1	0	0
"@Test public void Func1() { executeTester(""testXsName1"", p.xs.name(p.col(""1"")), ""xs:Name(\""a:b:c\"")"", new Object[]{p.xs.string(""a:b:c"")}, new ItemSeqExpr[]{}); } "	0	0	1	0	1	0
@ReactMethod @Override public void Func1(String var1, ReadableArray var2, int var3) { convertAndCaptureReactNativeException(var1, var2); System.exit(0); } 	0	0	0	0	1	0
"private synchronized void Func1() throws HornetQException { try { if (file == null) { if (messageID <= 0) { throw new RuntimeException(""MessageID not set on LargeMessage""); } file = createFile(); openFile(); bodySize = file.size(); } } catch (Exception e) { throw new HornetQInternalErrorException(e.getMessage(), e); } } "	0	0	1	1	0	0
"@Override public void Func1(LdbcUpdate5AddForumMembership var1, GraknDbConnectionState var2, ResultReporter var3) throws DbException { GraknSession var4 = var2.var4(); try (GraknGraph graph = var4.open(GraknTxType.WRITE)) { String var5 = ""match $forum has forum-id "" + var1.forumId() + ""; "" + "" $person has person-id "" + var1.personId() + ""; "" + "" insert (member: $person, group: $forum) isa has-member has join-date "" + LocalDateTime.ofInstant(Instant.ofEpochMilli(var1.joinDate().getTime()), ZoneOffset.UTC).toString() + "";""; graph.graql().<InsertQuery>parse(var5.toString()).execute(); graph.commit(); var3.report(0, LdbcNoResult.INSTANCE, var1); } } "	0	0	1	1	1	0
"@RequestMapping(value = ""/clearorder"", method = RequestMethod.POST) public ResponseEntity Func1(@ModelAttribute(""var1"") int var1) { BarDrinkOrder var2 = new BarDrinkOrder(); var2.setId(var1); var2.setTimeComplete(new Timestamp(System.currentTimeMillis())); if(!barDrinkOrderService.Func1(var2)) { return new ResponseEntity(HttpStatus.BAD_REQUEST); } Map<String, Object> var3 = barDrinkOrderService.getPhoneNumberAndDrinkNameFromDrinkOrderId(var1); smsSender.SendSMS(var3.get(""phonenumber""), var3.get(""name"")); return new ResponseEntity(HttpStatus.OK); } "	0	0	1	1	1	0
"private static DvDateTime Func1(DvDateTime var1, String var2, Object var3) throws InternalErrorException{ Calendar var4 = Calendar.getInstance(); if (var3 instanceof Integer){ setCalendar(var4, Calendar.YEAR, var2, (Integer)var3, ""year"", var1.getYear()); setCalendar(var4, Calendar.MONTH, var2, (Integer)var3, ""month"", var1.getMonth()); setCalendar(var4, Calendar.DATE, var2, (Integer)var3, ""day"", var1.getDay()); setCalendar(var4, Calendar.HOUR_OF_DAY, var2, (Integer)var3, ""hour"", var1.getHour()); setCalendar(var4, Calendar.MINUTE, var2, (Integer)var3, ""minute"", var1.getMinute()); setCalendar(var4, Calendar.SECOND, var2, (Integer)var3, ""second"", var1.getSecond()); }else{ if (""var3"".equals(var2) && var3 instanceof Long){ var4.setTimeInMillis(((Long)var3)); }else if (""var3"".equals(var2) && var3 instanceof Double){ var4.setTimeInMillis(((Double)var3).longValue()); }else{ Logger.getLogger(DataValueGenerator.class).warn(""Wrong attribute name or class creating DvDateTime with var3 = '""+var3+""'""); } } return toDvDateTime(var4); } "	0	0	0	0	1	0
"private static String Func1(final String var1) { final String var2 = var1.replace('/', '.'); return var2.substring(0, var2.length() - "".class"".length()); } "	0	0	1	0	1	0
"private static Alert Func1(final Alert.AlertType var1, final String var2, final String var3, final ButtonType ... var4) { final FutureTask<Alert> var5 = new FutureTask<>(() -> { final Alert var6 = new Alert(var1, var3, var4); var6.setGraphic(null); var6.setHeaderText(null); var6.setTitle(var2); var6.getDialogPane().getStylesheets().add(""/com/twasyl/slideshowfx/css/Default.css""); return var6; }); Platform.runLater(var5); Alert var6 = null; try { var6 = var5.get(); } catch (InterruptedException | ExecutionException e) { LOGGER.log(Level.SEVERE, ""Can not build an var6"", e); } return var6; } "	0	0	0	0	1	0
"@Override public Event Func1(final Map<String, String> var1) { this.player = new Player(Long.parseLong(var1.get(""player""))); return this; } "	0	0	0	0	1	0
"public JMenuItem Func1() { final JMenuItem var1 = new JMenuItem(""Import Satellite File...""); var1.setFont(Style.getMenuFont()); var1.addActionListener(new ActionListener() { public void Func2(ActionEvent var2) { final ImportSatelliteWizard var3 = new ImportSatelliteWizard(core.getSats(), xyzWin); final Sat var4 = var3.start(); if (var4 != null) { if (var4 instanceof TLESat) { sendTLEWarningMessage(); } xyzWin.addSatAction(var4); } } }); return var1; } "	0	0	0	0	1	0
"@Override public CurveId Func1(JsonParser var1, DeserializationContext var2) throws IOException, JsonProcessingException { JsonToken var3 = var1.var3(); if (var3 != null && JsonToken.VALUE_STRING.equals(var3)) { CurveId var4 = CurveId.valueOf(var1.getText().toUpperCase()); if (var4 == null) { throw new IllegalArgumentException(""Could not Func1 '"" + var3 + ""' to a CurveId type.""); } return var4; } throw new IllegalArgumentException(""Found '"" + var3 + ""' instead of '"" + JsonToken.VALUE_STRING + ""'.""); } "	0	0	1	0	0	0
@Before public void Func1() throws Exception { clientManager = new ClientManagerImpl(clientInformationHandler); session = mock(Session.class); remoteEndpoint = mock(RemoteEndpoint.class); when(session.getRemote()).thenReturn(remoteEndpoint); when(session.getRemoteAddress()).thenReturn(new InetSocketAddress(0)); when(session.isOpen()).thenReturn(false); } 	0	0	0	0	1	0
"public void Func1(String var1) throws IllegalArgumentException { try { this.var1 = Tipo.valueOf(var1); } catch (IllegalArgumentException e) { throw new IllegalArgumentException(""Papel proveniente do LDAP não condiz com os papéis mapeados pelo sistema""); } } "	0	0	0	0	1	0
"@Quando(""^removo um evento com id (.*)$"") public void Func1(String var1) throws Throwable { evento = new Evento(); evento.setEstado(EstadoEvento.INATIVO); evento.setId(Long.valueOf(ID_EVENTO)); when(eventoService.buscarEventoPorId(Long.valueOf(var1))).thenReturn(evento); when(messages.getMessage(""EVENTO_INATIVO_EXCLUIDO_SUCESSO"")) .thenReturn(""Evento inativo excluido com sucesso""); action = mockMvc.perform(get(TEMPLATE_REMOVER, Long.valueOf(ID_EVENTO))); } "	0	0	0	0	1	0
public RangeQueryBuilder Func1(Object Func1) { return Func1(Func1, true, true); } 	0	0	0	0	1	0
public void Func1(@NotNull String var1) { _currentDirectory.addError(var1); } 	0	0	0	0	1	0
"@Override @SuppressWarnings({ ""unchecked"", ""rawtypes"" }) public void Func1(FilterConfig var1) throws ServletException { Enumeration var2 = var1.getInitParameterNames(); this.excludePatterns = new LinkedList(); this.maxWaitDurations = new HashMap(); while (var2.hasMoreElements()) { String var3 = (String) var2.nextElement(); String var4 = var1.getInitParameter(var3); if (var3.startsWith(""var5"")) { Pattern var5 = Pattern.compile(var4); this.excludePatterns.add(var5); } else if (var3.startsWith(""maxWaitMilliseconds."")) { String var6 = var3.substring(""maxWaitMilliseconds."".length()); int var7 = var6.indexOf('.'); if (var7 != -1) { var6 = var6.substring(0, var7); } Long var8 = new Long(var6); Pattern var9 = Pattern.compile(var4); this.maxWaitDurations.put(var9, var8); } } } "	0	0	1	0	1	0
"@Test public void Func1() throws JavaModelException{ ClientPreferences var1 = Mockito.mock(ClientPreferences.class); Mockito.when(preferenceManager.getClientPreferences()).thenReturn(var1); ICompilationUnit var2 = getWorkingCopy( ""src/java/Foo.java"", ""import java.sq \n"" + ""public class Foo {\n""+ ""private String myTestString;\n""+ ""	void foo() {\n""+ ""   this.myTestS\n""+ ""	}\n""+ ""}\n""); int[] var3 = findCompletionLocation(var2, ""this.myTestS""); CompletionList var4 = server.completion(JsonMessageHelper.getParams(createCompletionRequest(var2, var3[0], var3[1]))).join().getRight(); assertNotNull(var4); assertEquals(1, var4.getItems().size()); CompletionItem var5 = var4.getItems().get(0); assertEquals(CompletionItemKind.Field, var5.getKind()); assertNull(var5.getInsertText()); assertNull(var5.getAdditionalTextEdits()); assertNull(var5.getTextEdit()); CompletionItem var6 = server.resolveCompletionItem(var5).join(); assertNotNull(var6.getTextEdit()); assertTextEdit(4,8,15,""myTestString"",var6.getTextEdit()); } "	0	0	0	0	1	0
"@Override public void Func1(String var1, EntryPointKey var2, EntryPoint var3, int var4) { try { String var5 = createSession(var2, var4, CONSUL_BEHAVIOR.DELETE).map(s -> s.ID).get(); HttpPut var6 = new HttpPut(""http://"" + host + "":"" + port + ""/v1/kv/admin/"" + var2.getID() + ""/committing?acquire="" + var5); ByteArrayOutputStream var7 = new ByteArrayOutputStream(); mapper.writeValue(var7, new CommittingConfigurationJson(var1, var3)); var6.setEntity(new ByteArrayEntity(var7.toByteArray())); client.execute(var6, httpResponse -> consulReader.parseHttpResponse(httpResponse, consulReader::parseBooleanFromHttpEntity)); } catch (IOException e) { LOGGER.error(""error in consul repository"", e); } } "	0	0	0	0	1	0
"synchronized void Func1(final Qwasi.QwasiInterface var1) { if (GooglePlayServicesUtil.isGooglePlayServicesAvailable(mContext) != ConnectionResult.SUCCESS) { var1.onFailure(new QwasiError() .errorWithCode(QwasiErrorCode.QwasiErrorPushNotEnabled, ""Google play not enabled"")); } else { try { SharedPreferences var2 = PreferenceManager.getDefaultSharedPreferences(mContext); String var3; var3 = var2.getString(""gcm_token"", """"); if (var3.isEmpty()&& !mregistering) { mregistering = !mregistering; registerForPushInBackground(); } else { int var4 = var2.getInt(""AppVersion"", 0); int var5 = var2.getInt(""com.google.android.gms.version"", Integer.MIN_VALUE); if (var5 != var4) { registerForPushInBackground(); } } } catch (Exception e) { Log.e(""QwasiError"", ""Problem registering"" + e.getMessage()); var1.onFailure(new QwasiError() .errorWithCode(QwasiErrorCode.QwasiErrorPushRegistrationFailed, ""problem with registering"")); } } var1.onSuccess(this.getPushToken()); } "	0	0	0	0	1	0
"public void Func1(DocumentEvent var1) { System.out.println(""Func1() call!""); if(_model == null) { System.err.println(""JAutoCompletionTextArea.Func1(): modell not defined!""); return; } if (var1.getLength() != 1) { return; } int var2 = var1.getOffset(); String var3 = null; try { var3 = getText(0, var2 + 1); } catch (BadLocationException e) { e.printStackTrace(); } int var4; for (var4 = var2; var4 >= 0; var4--) { if (! Character.isLetter(var3.charAt(var4))) { break; } } if (var2 - var4 < 2) { return; } String var5 = var3.substring(var4 + 1).toLowerCase(); int var6 = Collections.binarySearch(_model.getStringList(), var5); if (var6 < 0 && -var6 <= _model.getSize()) { String var7 = _model.getElementAt(-var6 -1); if (var7.startsWith(var5)) { String var8 = var7.substring(var2 - var4); SwingUtilities.invokeLater( new CompletionTask(var8, var2 + 1)); } } else { mode = Mode.INSERT; } } "	0	0	0	0	1	0
"public Execution Func1(String var1, boolean var2) throws ApiException { try { Simulation var3 = workflowBusiness.getSimulation(var1); if (var3 == null || var3.getStatus() == SimulationStatus.Cleaned) { return null; } Execution var4 = new Execution( var3.getID(), var3.getSimulationName(), ApiUtils.getPipelineIdentifier(var3.getApplicationName(), var3.getApplicationVersion()), 0, // timeout (no timeout set in VIP) VIPtoCarminStatus(var3.getStatus()), null, // study identifier (not available in VIP yet) null, // error codes and mesasges (not available in VIP yet) var3.getDate().getTime(), null // last status modification date (not available in VIP yet) ); if(var2) // don't look into var5 and var9 return var4; List<InOutData> var5 = workflowBusiness.getInputData(var1, apiContext.getUser().getFolder()); logger.info(""Execution has "" + var5.size() + "" var5 ""); for (InOutData var6 : var5) { ParameterTypedValue var7 = new ParameterTypedValue(ApiUtils.getCarminType(var6.getType()), var6.getPath()); StringKeyParameterValuePair var8 = new StringKeyParameterValuePair(var6.getProcessor(), var7); logger.info(""Adding input "" + var8.toString()); var4.getInputValues().add(var8); var4.getRestInputValues().put(var6.getProcessor(), var6.getPath()); } List<InOutData> var9 = workflowBusiness.getOutputData(var1, apiContext.getUser().getFolder()); for (InOutData var6 : var9) { ParameterTypedValue var7 = new ParameterTypedValue(ApiUtils.getCarminType(var6.getType()), var6.getPath()); StringKeyParameterValuePair var8 = new StringKeyParameterValuePair(var6.getProcessor(), var7); var4.getReturnedFiles().add(var8); if (!var4.getRestReturnedFiles().containsKey(var6.getProcessor())) { var4.getRestReturnedFiles().put(var6.getProcessor(), new ArrayList<>()); } var4.getRestReturnedFiles().get(var6.getProcessor()).add(var6.getPath()); } if (!(var4.getStatus() == ExecutionStatus.FINISHED) && !(var4.getStatus() == ExecutionStatus.KILLED) && var4.getReturnedFiles().isEmpty()) { var4.clearReturnedFiles(); } return var4; } catch (BusinessException ex) { throw new ApiException(ex); } } "	0	0	0	0	1	0
private Command Func1(String var1) throws Exception { ParseLogic.COMMAND_TYPE var2 = parserLogic.determineCommandType(var1); Command var3 = parserLogic.Func1(var2); addOptions(var3, var1); Command.getCommandList().add(var3); return var3; } 	0	0	0	0	1	0
"@Test public void Func1() { String var1 = TwoFactorUtils.generateCurrentNumber(SECRET, 1454934536166L); assertThat(var1, not(nullValue())); assertThat(var1, equalTo(""378301"")); } "	0	0	0	0	1	0
"String Func1() { return String.format(""%s%s%s"", directory, File.separator, decompressor); } "	0	0	0	0	1	0
"String Func1() { return String.format(""%s%s%s"", directory, File.separator, dump); } "	0	0	0	0	1	0
"@RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<?> Func1(@RequestBody Map<String, String> var1) { try { userService.Func1(var1.get(""accessToken"")); return ResponseEntity.ok().build(); } catch (FacebookOAuthException ex) { return ResponseEntity.status(HttpStatus.FORBIDDEN).build(); } } "	0	0	0	0	1	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); if (splashHandler == null) { splashHandler = new Handler(); } if (splashRunnable == null) { if (LoginUtils.isUserLoggedIn(SplashScreenActivity.this)){ splashRunnable = initializeSplashRunnable(DecksActivity.class); } else { splashRunnable = initializeSplashRunnable(ExamActivity.class); } } if (!splashRunning) { initializeSplashScreen(SPLASH_DISPLAY_LENGTH); } } 	0	0	0	0	1	0
"public int Func1() { DatabaseConnectionHelper var1 = ObjectFactory.getDBHelper(); String var2 = """"; try (Transaction tx = var1.graphDb.beginTx()) { org.apache.log4j.Logger.getLogger(Initiative.class).debug(""Creating the initiative""); String var3 = ""match (i:Init)  with CASE count(i) WHEN 0  THEN 1 ELSE max(i.Id)+1 END as uid "" + ""CREATE (i:Init {Id:uid,Status:'"" + checkInitiativeStatus(initiativeStartDate) + ""',Name:'"" + initiativeName + ""',Type:'"" + initiativeType + ""', Category:'"" + initiativeCategory + ""',StartDate:'"" + initiativeStartDate.toString() + ""',EndDate:'"" + initiativeEndDate.toString() + ""',Comment:'"" + initiativeComment + ""'}) return i.Id as Id""; org.apache.log4j.Logger.getLogger(Initiative.class).debug(""Create initiative query : "" + var3); Result var4 = var1.graphDb.execute(var3); Iterator var5 = var4.columnAs(""Id""); while (var5.hasNext()) { var2 = var5.next().toString(); } int var6 = Integer.parseInt(var2); if (setPartOf(var6, this.filterList)) { org.apache.log4j.Logger.getLogger(Initiative.class).debug(""Success in setting part of initiative""); } else { org.apache.log4j.Logger.getLogger(Initiative.class).error(""Unsuccessful in setting part of initiative""); } if (setOwner(var6, this.ownerOfList)) { org.apache.log4j.Logger.getLogger(Initiative.class).debug(""Success in setting owner for initiative""); } else { org.apache.log4j.Logger.getLogger(Initiative.class).error(""Unsuccessful in setting owner for initiative""); } tx.success(); } catch (Exception e) { org.apache.log4j.Logger.getLogger(Initiative.class).error(""Exception in Create initiative query"", e); } org.apache.log4j.Logger.getLogger(Initiative.class).debug(""Initiative ID : "" + var2); return var6; } "	0	0	1	0	1	0
"protected final int Func1(final String var1) { return Integer.valueOf(var1.replaceAll(""\\D+"", """")); } "	0	0	0	0	1	0
@Override public int Func1(int var1) { if (mHeaderView != null && var1 == 0) { return HEADER_VIEW; } if (mData.size() == 0 && mEmptyEnable && mEmptyView != null && var1 <= 2) { if ((mHeadAndEmptyEnable || mFootAndEmptyEnable) && var1 == 1) { if (mHeaderView == null && mEmptyView != null && mFooterView != null) { return FOOTER_VIEW; } else if (mHeaderView != null && mEmptyView != null) { return EMPTY_VIEW; } } else if (var1 == 0) { if (mHeaderView == null) { return EMPTY_VIEW; } else if (mFooterView != null) return EMPTY_VIEW; } else if (var1 == 2 && (mFootAndEmptyEnable || mHeadAndEmptyEnable) && mHeaderView != null && mEmptyView != null) { return FOOTER_VIEW; } else if ((!mFootAndEmptyEnable || !mHeadAndEmptyEnable) && var1 == 1 && mFooterView != null) { return FOOTER_VIEW; } } else if (mEmptyView != null && getItemCount() == (mHeadAndEmptyEnable ? 2 : 1) && mEmptyEnable) { return EMPTY_VIEW; } else if (var1 == mData.size() + getHeaderViewsCount()) { if (mNextLoadEnable) return LOADING_VIEW; else return FOOTER_VIEW; } return getDefItemViewType(var1 - getHeaderViewsCount()); } 	0	0	0	0	1	0
"@Override public PipePluggable Func1(ForgeDirection var1) { if(blockPluggableAccess) { StackTraceElement[] var2 = Thread.currentThread().getStackTrace(); if(var2.length > 2 && var2[2].getMethodName().equals(""onBlockActivated"") && var2[2].getClassName().equals(""buildcraft.transport.BlockGenericPipe"") && var2[2].getLineNumber() > 680) { return null; } } return super.Func1(var1); } "	0	0	0	0	1	0
"private void Func1(final Decorable var1, final FactoryController var2, final List<Statement> var3, final String var4, final Statement var5) { final Statement var6 = Refs.get(""var6""); final Map<String, MetaClass> var7 = DataFieldCodeDecorator.aggregateDataFieldTypeMap(var1, var1.getDecorableDeclaringType()); var7.put(""this"", var1.getDecorableDeclaringType()); final MetaClass var8 = var1.getDecorableDeclaringType(); final Set<String> var9 = new HashSet<>(); final Set<String> var10 = new HashSet<>(); for (final MetaMethod var11 : var8.getMethodsAnnotatedWith(EventHandler.class)) { final String[] var12 = var11.getAnnotation(EventHandler.class).value(); validateNonEmptyEventHandlerTargets(var8, var11, var12); final MetaClass var13 = assertEventType(var8, var11); if (var13.isAssignableTo(Event.class)) { processGwtDomEvent(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13); } else if (var13.isAssignableTo(com.google.web.bindery.event.shared.Event.class)) { processGwtWidgetEvent(var2, var3, var5, var7, var8, var9, var10, var11, var12, var13); } else { processJsInteropDomEvent(var3, var4, var5, var6, var7, var8, var11, var12, var13); } } } "	0	0	0	0	0	1
"@Override public Binding Func1( final DocumentTemplate var1, final Object var2) { if(!(var2 instanceof WithNameGetter)) { throw new IllegalArgumentException(""Domain object must be of type WithNameGetter""); } WithNameGetter var3 = (WithNameGetter) var2; final HelloDocumentTemplateUserDataModel var4 = new HelloDocumentTemplateUserDataModel(); var4.setUser(var3.getName()); return new Binding(var4, var2); } "	0	0	0	0	1	0
"private void Func1() { JPanel var1 = new JPanel(); var1.setLayout(new FlowLayout(FlowLayout.CENTER)); var1.add(datePicker); leftPanel.setLayout(new BorderLayout()); leftPanel.add(ResourceUtil.getCenteredLabel(""Welcome, ""+currentUser.getUsername()), BorderLayout.NORTH); leftPanel.add(var1, BorderLayout.CENTER); leftPanel.add(logoutButton, BorderLayout.SOUTH); JPanel var2 = new JPanel(); JPanel var3 = new JPanel(); var2.setLayout(new FlowLayout(FlowLayout.CENTER)); var2.add(saveButton); var2.add(clearButton); var3.setLayout(new FlowLayout(FlowLayout.RIGHT)); var3.add(currentDateLabel); var3.add(boldButton); var3.add(italicsButton); var3.add(underlineButton); centerPanel.setLayout(new BorderLayout()); centerPanel.add(var3, BorderLayout.NORTH); centerPanel.add(entryArea, BorderLayout.CENTER); centerPanel.add(var2, BorderLayout.SOUTH); this.setLayout(new BorderLayout()); this.add(leftPanel, BorderLayout.WEST); this.add(centerPanel, BorderLayout.CENTER); this.add(rightPanel, BorderLayout.EAST); this.setSize(400, 400); this.setResizable(true); this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); this.setLocationRelativeTo(null); this.setVisible(true); } "	0	0	0	0	1	0
"@Test public void Func1(){ co = new ConnectionOperation(t1); co.setOperationParameters(t2, ""string1"", ""string2""); Table var1 = execAndCheck(); String[] var2 = {""number1"", ""number2"", ""date1"", ""date2"", ""string1"", ""null1""}; assertTrue(var1.get(0).keySet().containsAll(Arrays.asList(var2))); } "	0	0	0	0	1	0
"@Test public void Func1(){ co = new ConnectionOperation(t1); co.setOperationParameters(t2, ""number1"", ""number2""); Table var1 = execAndCheck(); String[] var2 = {""number1"", ""date1"", ""date2"", ""string1"", ""string2"", ""null1""}; assertTrue(var1.get(0).keySet().containsAll(Arrays.asList(var2))); } "	0	0	0	0	1	0
private TradePartyType Func1() { TradePartyType var1 = xmlFactory.createTradePartyType(); TextType var2 = xmlFactory.createTextType(); var2.setValue(trans.getRecipient().getName()); var1.setName(var2); TradeAddressType var3 = xmlFactory.createTradeAddressType(); TextType var4 = xmlFactory.createTextType(); var4.setValue(trans.getRecipient().getLocation()); var3.setCityName(var4); CountryIDType var5 = xmlFactory.createCountryIDType(); var5.setValue(trans.getRecipient().getCountry()); var3.setCountryID(var5); TextType var6 = xmlFactory.createTextType(); var6.setValue(trans.getRecipient().getStreet()); var3.setLineOne(var6); CodeType var7 = xmlFactory.createCodeType(); var7.setValue(trans.getRecipient().getZIP()); var3.getPostcodeCode().add(var7); var1.setPostalTradeAddress(var3); TaxRegistrationType var8 = xmlFactory .createTaxRegistrationType(); IDType var9 = xmlFactory.createIDType(); var9.setValue(trans.getRecipient().getVATID()); var9.setSchemeID(TaxRegistrationType.USTID); var8.setID(var9); var1.getSpecifiedTaxRegistration().add(var8); return var1; } 	0	0	0	0	1	0
"private Collection<TradePaymentTermsType> Func1() { List<TradePaymentTermsType> var1 = new ArrayList<TradePaymentTermsType>(); TradePaymentTermsType var2 = xmlFactory .createTradePaymentTermsType(); DateTimeType var3 = xmlFactory.createDateTimeType(); DateTimeType.DateTimeString var4 = xmlFactory .createDateTimeTypeDateTimeString(); var4.setFormat(DateTimeType.DateTimeString.DATE); var4.setValue(zugferdDateFormat.format(trans.getDueDate())); var3.setDateTimeString(var4); var2.setDueDateDateTime(var3); TextType var5 = xmlFactory.createTextType(); String var6 = trans.getPaymentTermDescription(); if (var6 == null) { var6 = """"; } var5.setValue(var6); var2.getDescription().add(var5); var1.add(var2); return var1; } "	0	0	0	0	1	0
@Override public Object Func1(int var1, int var2) { return this._listDataChild.get(this._listDataHeader.get(var1)).get(var2); } 	1	0	0	0	1	0
"public static MessageMedia Func1(int var1, MessageMedia var2, Bitmap var3, String var4) { ByteArrayOutputStream var5 = new ByteArrayOutputStream(); String var6 = var4.substring(var4.lastIndexOf(""."") + 1); switch (var6.toLowerCase()) { case ""png"": { var3.compress(Bitmap.CompressFormat.PNG, 100, var5); var3.compress(Bitmap.CompressFormat.PNG, 100, var5); break; } case ""jpg"": { var3.compress(Bitmap.CompressFormat.JPEG, 100, var5); break; } case ""jpeg"": { var3.compress(Bitmap.CompressFormat.JPEG, 100, var5); break; } default: { var3.compress(Bitmap.CompressFormat.PNG, 100, var5); } } byte[] var7 = var5.toByteArray(); String var8 = Base64.encodeToString(var7, Base64.DEFAULT); if (var2 == null) { var2 = new MessageMedia(); } var2.setMessageId(var1); var2.setFileName(var4); var2.setMediaType(1); var2.setHeaderType(""image/"" + var6); var2.setMediaByte(""data:image/"" + var6 + "";base64,"" + var8); var2.setIsUpdated(true); return var2; } "	0	0	0	0	1	0
"public String Func1 (SingleDataResultSet var1) { StringBuilder var2 = new StringBuilder (""\n""); StringBuilder var3 = new StringBuilder (""Record#""); Iterator<DbResultRecord> var4 = var1.getRecords (); int var5 = 0; while (var4.hasNext ()) { DbResultRecord var6 = var4.next (); StringBuilder var7 = new StringBuilder (); for (int var8 = 0; var8 < var6.getNumberOfColumns (); ++var8) { if (var5 == 0) { var3.append (""\t"").append (var6.getIndexToColumn (var8 + 1)); } var7.append (""\t"").append (var6.get (var8 + 1)); } if (var5 == 0) { var2.append (var3).append (""\n""); } var2.append (var5).append (var7).append (""\n""); var5++; } return var2.toString (); } "	1	0	0	0	1	0
"@Test public void Func1() { UUID var1 = UUID.randomUUID(); UUID var2 = UUID.randomUUID(); Integer var3 = ThreadLocalRandom.current().nextInt(1, 100); String var4 = ""Func1""; Date var5 = dateUtility.getLocalDate(); Calendar var6 = Calendar.getInstance(); var6.add(Calendar.SECOND, -10); Date var7 = var6.getTime(); long var8 = var5.getTime() - var7.getTime(); dbLatencyDao.create( var4, var8, var7, new Date(var8), Long.valueOf(1), var3, var1, var2, ""SBAC_TEST"", ""this is from the test"" ); Map<String, Object> var9 = new HashMap<>(); var9.put(""var4"", var4); var9.put(""sessionKey"", UuidAdapter.getBytesFromUUID(var2)); var9.put(""testOppKey"", UuidAdapter.getBytesFromUUID(var1)); var9.put(""startTime"", var7); var9.put(""var3"", var3); final String var10 = ""SELECT COUNT(*) AS var12 FROM ${archivedb}._dblatency WHERE var4 = :var4 AND _fk_session = :sessionKey AND _fk_testopportunity = :testOppKey AND starttime = :startTime AND var3 = :var3""; Integer var11 = 1; Integer var12 = namedParameterJdbcTemplate.queryForInt(dbNameUtility.setDatabaseNames(var10), var9); Assert.assertEquals(var11, var12); } "	0	0	0	0	1	0
private int Func1(List<String> var1) { String var2 = var1.get(0); int var3; try { var3 = Integer.parseInt(var2); } catch (NumberFormatException ex) { throw new IllegalArgumentException(String.format(ERROR_INVALID_ID, var2)); } return var3; } 	0	0	1	0	1	0
"@ApiOperation(value = ""get a single Func1 in JSON format"", nickname = ""getSingleRecordJson"") @RequestMapping(value = ""/{var1}/{var2}.json"", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE) public ModelAndView Func1( @PathVariable String var1, @PathVariable String var2, @RequestParam(value = ""var3"", required = false, defaultValue = ""full"") String var3, @RequestParam(value = ""var4"", required = true) String var4, @RequestParam(value = ""var5"", required = false) String var5, @RequestParam(value = ""hierarchytimeout"", required = false, defaultValue = ""4000"") int var6, HttpServletRequest var7, HttpServletResponse var8) throws MongoRuntimeException { if (log.isDebugEnabled()) { log.debug(""Retrieving Func1 with id ""+var1+""/""+var2); } controllerUtils.addResponseHeaders(var8); LimitResponse var9; if (var6 != 4000) { searchService.setNeo4jTimeoutMillis(var6); } long var10 = System.currentTimeMillis(); try { var9 = controllerUtils.checkLimit(var4, var7.getRequestURL().toString(), RecordType.OBJECT, var3); if (log.isDebugEnabled()) { log.debug(""Apikey checklimit took: "" + (System.currentTimeMillis() - var10) + "" milliseconds""); } } catch (ApiLimitException e) { var8.setStatus(e.getHttpStatus()); return JsonUtils.toJson(new ApiError(e), var5); } ObjectResult var11 = new ObjectResult(var4, var9.getRequestNumber()); if (StringUtils.containsIgnoreCase(var3, ""params"")) { var11.addParams(RequestUtils.getParameterMap(var7), ""var4""); var11.addParam(""var3"", var3); } String var12 = EuropeanaUriUtils.createResolveEuropeanaId(var1, var2); String var13 = var12; try { long var14 = (new Date()).getTime(); long var15 = System.currentTimeMillis(); FullBean var16 = searchService.findById(var12, false); if (log.isDebugEnabled()) { log.debug(""SearchService findByID took: "" + (System.currentTimeMillis() - var15) + "" milliseconds""); } if (var16 == null) { var15 = System.currentTimeMillis(); var12 = searchService.resolveId(var12); if (log.isDebugEnabled()) { log.debug(""Bean = null; SearchService resolveID took: "" + (System.currentTimeMillis() - var15) + "" milliseconds""); } if (var12 != null) { var15 = System.currentTimeMillis(); var16 = searchService.findById(var12, false); if (log.isDebugEnabled()) { log.debug(""Bean = null; retrying SearchService findByID now took: "" + (System.currentTimeMillis() - var15) + "" milliseconds""); } if (var16 == null) { // detect potential errors in Func1 redirect data, we log it because we're not sure how often this happens log.warn(""Retrieved new var2 ""+var12+"" but still unable to find Func1.""); } } } if (var16 == null) { var8.setStatus(404); return JsonUtils.toJson(new ApiError(var4, ""Invalid Func1 identifier: "" + var13, var9.getRequestNumber()), var5); } if (StringUtils.containsIgnoreCase(var3, Profile.SIMILAR.getName())) { List<BriefBean> var17; List<BriefView> var18 = new ArrayList<>(); try { var15 = System.currentTimeMillis(); var17 = searchService.findMoreLikeThis(var12); if (log.isDebugEnabled()) { log.debug(""SearchService find similar items took: "" + (System.currentTimeMillis() - var15) + "" milliseconds""); } for (BriefBean var19 : var17) { String var20 = ""minimal""; BriefView var21 = new BriefView(var19, var20, var4); var18.add(var21); } } catch (SolrServerException e) { log.error(""Error during getting similar items: "" + e.getLocalizedMessage(), e); } var11.var17 = var18; } var11.object = new FullView(var16, var3, var4); long var22 = (new Date()).getTime(); var11.statsDuration = (var22 - var14); if (log.isDebugEnabled()) { log.debug(""Record retrieval took: "" + (System.currentTimeMillis() - var10) + "" milliseconds""); } } catch (Exception e) { var8.setStatus(500); return JsonUtils.toJson(new ApiError(var4, e.getClass().getSimpleName() + "": ""+ e.getMessage(), var9.getRequestNumber()), var5); } return JsonUtils.toJson(var11, var5); } "	1	0	1	1	0	0
"@Override public void Func1(final Object... var1) { if (var1 == null || var1[0] == null) { return; } try { final String var2 = var1[0].toString(); final TMessage var3 = socketEvent.parse(var2); if (socketEvent.getEventDataHandler() != null) { socketEvent.getEventDataHandler().handleMessage(var3); } onMessageAction.Func1(var3); } catch (final RuntimeException throwable) { Lc.assertion(throwable); } catch (final JsonProcessingException exception) { Lc.assertion(exception); } catch (final ApiModel.ValidationException exception) { Lc.assertion(exception); } catch (final Exception exception) { Lc.e(exception, ""Socket processing error""); } } "	0	0	0	0	1	0
"public static void Func1(IJavaProject var1, IPackageFragment var2, String var3) { List<String> var4= new ArrayList<String>(); var4.add(var2.getElementName()); try { if (findGroupDependencies(var2.getCompilationUnits()).length > 0) { groupDependencyWarning(""package "" + var2.getElementName(), null); } } catch(JavaModelException jmex) { ; // this should never happen but who knows } ILaunchConfigurationWorkingCopy var5= createLaunchConfiguration(var1.getProject(), ""package "" + var2.getElementName(), null); var5.setAttribute(TestNGLaunchConfigurationConstants.CLASS_TEST_LIST, EMPTY_ARRAY_PARAM); var5.setAttribute(TestNGLaunchConfigurationConstants.METHOD_TEST_LIST, EMPTY_ARRAY_PARAM); var5.setAttribute(TestNGLaunchConfigurationConstants.PACKAGE_TEST_LIST, var4); var5.setAttribute(TestNGLaunchConfigurationConstants.TYPE, LaunchType.PACKAGE.ordinal()); var5.setAttribute(TestNGLaunchConfigurationConstants.ALL_METHODS_LIST, ConfigurationHelper.toClassMethodsMap(new HashMap<String, Collection<String>>())); String var6= var1.getProject().getName(); PreferenceStoreUtil var7 = TestNGPlugin.getPluginPreferenceStore(); String var8 = var7.getPreDefinedListeners(var6, false); var5.setAttribute(TestNGLaunchConfigurationConstants.PRE_DEFINED_LISTENERS, var8.toString().trim()); runConfig(var5, var3); } "	0	0	0	0	1	0
"@Override public String Func1(final Protocol var1) { StringBuilder var2 = new StringBuilder(); var2.append(super.Func1(var1)); var2.append(var1.getKeyValueSeperator()); var2.append(""location"").append(var1.getKeyValueSeperator()).append(this.location.toString()); return var2.toString(); } "	0	0	0	0	1	0
"protected static ModelAndView Func1(Request var1, Response var2) { List<Player> var3 = new LinkedList<Player>(); var3.add(getUserFromCookies(var1)); if(var1.queryMap(""friends"").hasValue()){ Arrays.stream(var1.queryMap(""friends"").values()) .map(e -> DBHandler.getUser(Integer.parseInt(e))) .forEach(e -> var3.add(e)); } if(var1.queryParams(""ai"") != null){ var3.add(new CirclesArtificialPlayer(-1)); } Circles var4 = new Circles(DBHandler.getNextGameID(), var3); DBHandler.createCirclesGame(var4); var2.cookie(GlobalConstants.DISPLAY_SUCCESS, ""The var4 was created. It is your move first.""); var2.redirect(CIRCLES_ROUTE + ""/"" + Integer.toString(var4.get_id())); return getModelAndView(null, CIRCLES_TEMPLATE, var1, var2); } "	0	0	0	0	1	0
@Override public IMessage Func1(SigilHoldingPacketProcessor var1, MessageContext var2) { ItemStack var3 = null; if (var1.slot > -1 && var1.slot < 9) { var3 = var2.getServerHandler().playerEntity.inventory.getStackInSlot(var1.slot); } if (var3 != null) { ItemSigilHolding.cycleSigil(var3, var1.mode); } return null; } 	0	0	0	0	1	0
public DeliveryService Func1(final DeliveryService var1, final String var2, final String var3) { if (var1 == null) { return null; } if (!steeringRegistry.has(var1.getId())) { return var1; } final Steering var4 = steeringRegistry.get(var1.getId()); if (var3 != null && !var3.isEmpty()) { return var4.hasTarget(var3) ? cacheRegister.getDeliveryService(var3) : null; } final String var5 = var4.getBypassDestination(var2); if (var5 != null && !var5.isEmpty()) { return cacheRegister.getDeliveryService(var5); } final SteeringTarget var6 = consistentHasher.selectHashable(var4.getTargets(), var2, false); return cacheRegister.getDeliveryService(var6.getDeliveryService()); } 	0	0	0	0	1	0
"public void Func1(IClient var1, RequestFunction var2, AMFDataList var3) { WMSProperties var4 = var1.getProperties(); String var5 = var4.getPropertyStr(Constants.CLIENT_PROPERTY_CONNECT_URL); String var6 = var1.getIp(); logger.debug(""Geting url: "" + var5+ "" from var1 ""+ var6); try { HashMap<String, String>  var7 = Utils.getRtmpUrlParameters(var5, var1.getQueryStr()); onClientConnect(var4, var7); } catch (Exception  e) { logger.error(""Entry authentication failed with url ["" + var5 + ""]: "" + e.getMessage()); var1.rejectConnection(); sendClientOnStatusError((IClient)var1, ""NetStream.Play.Failed"",""Unable to authenticate url; ["" + var5 + ""]: "" + e.getMessage()); DiagnosticsProvider.addRejectedRTMPStream(var1, e.getMessage()); } } "	0	0	0	0	1	0
@Override public View Func1(int var1, View var2, ViewGroup var3) { View var4 = var2; if (var4 == null) { var4 = LayoutInflater.from(context).inflate(R.layout.menu_grid_item, var3, false); } MenuDisplayable var5 = displayableData[var1]; TextView var6 = (TextView)var4.findViewById(R.id.row_txt); setupTextView(var6, var5); ImageView var7 = (ImageView)var4.findViewById(R.id.row_img); setupImageView(var7, var5); setupBadgeView(var4, var5); return var4; } 	0	0	0	0	1	0
@Override public ASTNode Func1(org.kframework.kil.Bag var1, Void var2) { List<org.kframework.kil.Term> var3 = new ArrayList<org.kframework.kil.Term>(); org.kframework.kil.Bag.flatten(var3, var1.getContents()); CellCollection.Builder var4 = CellCollection.var4(context); for (org.kframework.kil.Term var5 : var3) { if (var5 instanceof TermComment) { continue; } var4.concatenate((Term) this.visitNode(var5)); } return var4.build(); } 	0	0	0	0	1	0
@Override public ASTNode Func1(org.kframework.kil.KLabelConstant var1, Void var2)  { return KLabelConstant.of(var1.getLabel(), context); } 	0	0	0	0	1	0
@Override public boolean Func1(EnumFacing var1, Fluid var2) { return fluidGroup.getFluidElementByFluid(var2) != null; } 	0	0	0	0	1	0
@Override public int Func1(EnumFacing var1, FluidStack var2, boolean var3) { IFluidHandler var4 = TileHelpers.getSafeTile(worldObj, getPos().offset(var1), IFluidHandler.class); FluidGroup.FluidElement var5 = fluidGroup.getFluidElementByFluid(var2.getFluid()); if (var5 == null) return 0; float var6 = var5.getValue(); Queue<Pair<IFluidHandler, EnumFacing>> var7 = getDestinations(); int var8 = var7.size(); if (var8 == 0) return 0; int var9 = calculateMaxUnitsPerOutput(var2.amount, var6, var8); while (var9 == 0 && !var7.isEmpty()) { var7.remove(); var9 = calculateMaxUnitsPerOutput(var2.amount, var6, var7.size()); } if (var7.isEmpty()) return 0; float var10 = fillDestinations(var7, var9, var3); return MathHelper.ceiling_float_int(var10 * var6); } 	0	0	0	0	1	0
"@Override protected Payload Func1(Payload... var1) { Payload var2 = new Payload(); try { DbHelper var3 = new DbHelper(ctx); ArrayList<User> var4 = var3.getAllUsers(); DatabaseManager.getInstance().closeDatabase(); for (User var5: var4){ DbHelper var6 = new DbHelper(ctx); var2 = var6.getUnsentTrackers(var5.getUserId()); DatabaseManager.getInstance().closeDatabase(); @SuppressWarnings(""unchecked"") Collection<Collection<TrackerLog>> var7 = split((Collection<Object>) var2.getData(), MobileLearning.MAX_TRACKER_SUBMIT); for (Collection<TrackerLog> var8 : var7) { String var9 = createDataString(var8); try { OkHttpClient var10 = HTTPClientUtils.getClient(ctx); Request var11 = new Request.Builder() .url(HTTPClientUtils.getFullURL(ctx, MobileLearning.RESET_PATH)) .addHeader(HTTPClientUtils.HEADER_AUTH, HTTPClientUtils.getAuthHeaderValue(var5.getUsername(), var5.getApiKey())) .patch(RequestBody.create(HTTPClientUtils.MEDIA_TYPE_JSON, var9)) .build(); Response var12 = var10.newCall(var11).execute(); if (var12.isSuccessful()){ for(TrackerLog var13: var8){ DbHelper var14 = new DbHelper(ctx); var14.markLogSubmitted(var13.getId()); DatabaseManager.getInstance().closeDatabase(); } var2.setResult(true); JSONObject var15 = new JSONObject(var12.body().string()); DbHelper var16 = new DbHelper(ctx); var16.updateUserPoints(var5.getUserId(), var15.getInt(""points"")); var16.updateUserBadges(var5.getUserId(), var15.getInt(""badges"")); DatabaseManager.getInstance().closeDatabase(); Editor var17 = prefs.edit(); try { var17.putBoolean(PrefsActivity.PREF_SCORING_ENABLED, var15.getBoolean(""scoring"")); var17.putBoolean(PrefsActivity.PREF_BADGING_ENABLED, var15.getBoolean(""badging"")); } catch (JSONException e) { e.printStackTrace(); } var17.apply(); try { JSONObject var18 = var15.getJSONObject(""var18""); MetaDataUtils var19 = new MetaDataUtils(ctx); var19.saveMetaData(var18, prefs); } catch (JSONException e) { e.printStackTrace(); } } else{ if (var12.code() == 400) { for(TrackerLog var13: var8){ DbHelper var20 = new DbHelper(ctx); var20.markLogSubmitted(var13.getId()); DatabaseManager.getInstance().closeDatabase(); } var2.setResult(true); } else{ var2.setResult(false); } } } catch (UnsupportedEncodingException | ClientProtocolException e) { var2.setResult(false); } catch (IOException e) { var2.setResult(false); } catch (JSONException e) { Mint.logException(e); e.printStackTrace(); var2.setResult(false); } publishProgress(0); } } } catch (IllegalStateException ise) { ise.printStackTrace(); var2.setResult(false); } Editor var17 = prefs.edit(); long var21 = System.currentTimeMillis()/1000; var17.putLong(PrefsActivity.PREF_TRIGGER_POINTS_REFRESH, var21).apply(); return var2; } "	0	0	1	0	0	0
"public MVCModel Func1(HttpServletRequest var1) { if (var1.getParameter(""user_pattern_add"") != null) { add(var1); return new MVCModel(new MessageContents(""New var2 pattern created"", ""New var2 pattern created"", ""/roster/userpatterns?var2="" + var1.getParameter(""var2""), ""back to User Patterns List""), ""/message.jsp""); } if (var1.getParameter(""user_pattern_update"") != null) { update(var1); return new MVCModel(new MessageContents(""User pattern updated"", ""User pattern updated"", ""/roster/userpatterns?var2="" + var1.getParameter(""var2""), ""back to User Patterns List""), ""/message.jsp""); } if (var1.getParameter(""user_pattern_delete"") != null) { delete(var1); return new MVCModel(new MessageContents(""User pattern deleted"", ""User pattern deleted"", ""/roster/userpatterns?var2="" + var1.getParameter(""var2""), ""back to User Patterns List""), ""/message.jsp""); } User var2 = null; try { try { var2 = userDAO.getById(Long.decode(var1.getParameter(""var2""))); } catch (DBException e) { e.printStackTrace(); } } catch (NullPointerException e) { e.printStackTrace(); } UserPattern var3 = null; try { try { var3 = userPatternDAO.getById(Long.decode(var1.getParameter(""pattern""))); } catch (DBException e) { e.printStackTrace(); } } catch (NullPointerException e) { var3 = new UserPattern(); } List<Pattern> var4 = null; try { try { var4 = patternDAO.getAll(); } catch (DBException e) { e.printStackTrace(); } } catch (NullPointerException e) { e.printStackTrace(); } return new MVCModel(new UserPatternEditControllerData(var2, var3, var4), ""/var3.jsp""); } "	0	0	1	0	1	0
public void Func1(MouseEvent var1) { if ((var1.getClickCount() == 2) && (eventsTable.getSelectedRow() > -1)) editEventB_actionPerformed(null); } 	0	0	0	0	1	0
public WebTarget Func1() { return ClientBuilder.newClient().target(IntegrationTest.SERVER_URL); } 	0	0	0	0	1	0
public static <T> T[] Func1(T[] var1) { if (var1 == null) { return null; } List<T> var2 = Arrays.asList(var1); var2 = nondex.permutation(var2); var2.toArray(var1); return var1; } 	0	0	0	0	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_employee_setup); nameParent = (EditText) findViewById(R.id.Esetup_nameParent_id); surParent = (EditText) findViewById(R.id.Esetup_surnameParent_id); phoneNumber = (EditText) findViewById(R.id.Esetup_phone_id); nameChild = (EditText) findViewById(R.id.Esetup_nameChild_id); surChild = (EditText) findViewById(R.id.Esetup_surnameChild_id); cardNumber = (EditText) findViewById(R.id.Esetup_cardNumber_id); mNfcAdapter = NfcAdapter.getDefaultAdapter(this); if(mNfcAdapter==null){ Toast.makeText(this,""this device doesn't support NFC."",Toast.LENGTH_LONG).show(); finish(); return; } NFCButt = (Button) findViewById(R.id.Login_Button_id); NFCButt.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var2) { String var3 = ""Top Employee_setupActivity""; try { var3 = MakeJsonString(); } catch (JSONException ex) { System.err.println(ex); } message = createTextMessage(var3); if (message != null) { dialog = new ProgressDialog(Employee_setupActivity.this); dialog.setMessage(""Tag NFC Card please""); dialog.show(); } } }); } "	0	0	0	0	1	0
@Override public int Func1(TranscriptInfo var1) { return var1.txRegion.withPositionType(PositionType.ZERO_BASED).endPos; } 	0	0	0	0	1	0
public static void Func1(Context var1) { SharedPreferences var2 = getSharedPreferences(var1); var2.edit().Func1().commit(); } 	0	0	0	0	1	0
"@Test public void Func1() throws Exception { doThrow(new ImportException(ImportStatus.INVALID, ""any message"")).when(groupProcessor).process(any(GroupMessage.class)); processor.process(message); verify(repository).updateBatchStatus(123L, ImportStatus.INVALID, ""any message""); } "	0	0	0	0	1	0
"public void Func1(Component var1) { System.out.println(""Saving var1""); } "	0	0	0	0	1	0
"@Override public void Func1(MouseEvent var1) { final int var2 = quests.locationToIndex(var1.getPoint()); JPopupMenu var3 = new JPopupMenu(); JMenuItem var4 = new JMenuItem(""Voir la quête""); var4.addActionListener(new ActionListener() { @Override public void Func2(ActionEvent var5) { IQuest var6 = quests.getModel().getElementAt(var2); JQuestResume var7 = new JQuestResume(topFrame, var6, pj); var7.setVisible(true); quests.invalidate(); quests.repaint(); } }); var3.add(var4); var3.show(quests, var1.getX(), var1.getY()); } "	0	0	0	0	1	0
public void Func1(final BundleContext var1) throws Exception { final TestClassLoader var2 = new TestClassLoader() { @Override public Class<?> Func2(String var3) throws ClassNotFoundException { return var1.getBundle().loadClass(var3); } }; Set<BundleActivator> var4 = loadActivators(); for (BundleActivator var5 : var4) { var5.Func1(var1); } MBeanServer var6 = findOrCreateMBeanServer(); testRunner = new JMXTestRunner(var2) { @Override public byte[] Func3(String var3, String var7) { BundleAssociation.setBundle(var1.getBundle()); BundleContextAssociation.setBundleContext(var1); return super.Func3(var3, var7); } }; testRunner.registerMBean(var6); } 	1	0	0	1	1	0
"@GET @Path(""/Func1"") public Response Func1(@Context HttpServletRequest var1) { Response var2 = permissionService.checkUserPermission(); if (var2 != null) { return var2; } List<Team> var3 = teamService.all(); Collections.sort(var3, (o1, o2) -> o1.getTeamName().compareTo(o2.getTeamName())); List<JsonTeam> var4 = convertTeamsToJSON(var3); return Response.ok(var4).build(); } "	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") public Object Func1(Object var1) throws DecodeException { List<Object> var2 = (List<Object>) var1; Begin var3 = new Begin(); switch (8 - var2.size()) { case 0: var3.setProperties((Map<String, Object>) var2.get(7)); case 1: Object var4 = var2.get(6); if (var4 == null || var4.getClass().isArray()) { var3.setDesiredCapabilities((String[]) var4); } else { var3.setDesiredCapabilities((String) var4); } case 2: Object var5 = var2.get(5); if (var5 == null || var5.getClass().isArray()) { var3.setOfferedCapabilities((String[]) var5); } else { var3.setOfferedCapabilities((String) var5); } case 3: var3.setHandleMax(var2.get(4) == null ? 0xffffffff : (Integer) var2.get(4)); case 4: var3.setOutgoingWindow(var2.get(3) == null ? 0 : (Integer) var2.get(3)); case 5: var3.setIncomingWindow(var2.get(2) == null ? 0 : (Integer) var2.get(2)); case 6: var3.setNextOutgoingId(var2.get(1) == null ? 0 : (Integer) var2.get(1)); case 7: var3.setRemoteChannel(var2.get(0) == null ? -1 : (Integer) var2.get(0)); } return var3; } "	0	0	0	0	1	0
private void Func1(double var1) { mTargetTemperature = getTemperatureInRange(mTargetTemperature, var1); setupTexts(); updateTemperatureToServer(mTargetTemperature); currentTemperatureCaller(); setupTexts(); } 	0	0	0	0	1	0
"@Test public void Func1() { String var1 = ""Basic RGVsZXRlVXNlckBqYXZhbW9ua2V5cy5jb206MTIzNDU=""; RestTemplate var2 = new RestTemplate(); var2.setErrorHandler(customResponseErrorHandler); HttpHeaders var3 = new HttpHeaders(); var3.add(""Authorization"", var1); HttpEntity<String> var4 = new HttpEntity<String>(var3); ResponseEntity<User> var5 = var2.exchange(baseUrl + ""/api/users/login"", HttpMethod.GET, var4, User.class); User var6 = var5.getBody(); var3 = new HttpHeaders(); var4 = new HttpEntity<String>(var3); ResponseEntity var7 = var2.exchange(baseUrl + ""/api/users/"" + var6.getId(), HttpMethod.DELETE, var4, String.class); assertEquals(HttpStatus.NO_CONTENT, var7.getStatusCode()); assertNull(var7.getBody()); var3 = new HttpHeaders(); var4 = new HttpEntity<String>(var3); var5 = var2.exchange(baseUrl + ""/api/users/"" + var6.getId(), HttpMethod.GET, var4, User.class); assertEquals(HttpStatus.OK, var5.getStatusCode()); assertNull(var7.getBody()); var3 = new HttpHeaders(); var4 = new HttpEntity<String>(var3); var7 = var2.exchange(baseUrl + ""/api/users/-999"", HttpMethod.DELETE, var4, String.class); assertEquals(HttpStatus.NOT_FOUND, var7.getStatusCode()); assertNull(var7.getBody()); } "	0	0	0	0	1	0
"private boolean Func1(ProcessRecord var1) { long var2 = SystemClock.uptimeMillis(); Long var3 = mProcessCrashTimes.get(var1.info.processName, var1.info.uid); if (var3 != null && var2 < var3+MIN_CRASH_INTERVAL) { Slog.w(TAG, ""Process "" + var1.info.processName + "" has crashed too many times: killing!""); EventLog.writeEvent(EventLogTags.AM_PROCESS_CRASHED_TOO_MUCH, var1.info.processName, var1.info.uid); killServicesLocked(var1, false); for (int var4=mMainStack.mHistory.size()-1; var4>=0; var4--) { ActivityRecord var5 = (ActivityRecord)mMainStack.mHistory.get(var4); if (var5.var1 == var1) { Slog.w(TAG, ""  Force finishing activity "" + var5.intent.getComponent().flattenToShortString()); var5.stack.finishActivityLocked(var5, var4, Activity.RESULT_CANCELED, null, ""crashed""); } } if (!var1.persistent) { EventLog.writeEvent(EventLogTags.AM_PROC_BAD, var1.info.uid, var1.info.processName); mBadProcesses.put(var1.info.processName, var1.info.uid, var2); var1.bad = true; mProcessCrashTimes.remove(var1.info.processName, var1.info.uid); var1.removed = true; removeProcessLocked(var1, false); return false; } } else { ActivityRecord var5 = mMainStack.topRunningActivityLocked(null); if (var5.var1 == var1) { Slog.w(TAG, ""  Force finishing activity "" + var5.intent.getComponent().flattenToShortString()); int var6 = mMainStack.indexOfTokenLocked(var5); var5.stack.finishActivityLocked(var5, var6, Activity.RESULT_CANCELED, null, ""crashed""); var6--; if (var6 >= 0) { var5 = (ActivityRecord)mMainStack.mHistory.get(var6); if (var5.state == ActivityState.RESUMED || var5.state == ActivityState.PAUSING || var5.state == ActivityState.PAUSED) { if (!var5.isHomeActivity) { Slog.w(TAG, ""  Force finishing activity "" + var5.intent.getComponent().flattenToShortString()); var5.stack.finishActivityLocked(var5, var6, Activity.RESULT_CANCELED, null, ""crashed""); } } } } } if (var1.services.size() != 0) { Iterator<ServiceRecord> var7 = var1.services.iterator(); while (var7.hasNext()) { ServiceRecord var8 = var7.next(); var8.crashCount++; } } mProcessCrashTimes.put(var1.info.processName, var1.info.uid, var2); return true; } "	0	0	0	0	0	1
"private void Func1(String var1) { processBuilder = new ProcessBuilder(var1, ""-y"", ""-f"", ""rawvideo"", ""-vcodec"", ""rawvideo"", ""-s"", pg.width + ""x"" + pg.height, ""-pix_fmt"", ""rgb24"", ""-r"", """" + ffmpegFrameRate, ""-i"", ""-"", ""-an"", ""-vcodec"", ""h264"", ""-crf"", """" + ffmpegCrfQuality, ""-metadata"", ""comment=\"""" + ffmpegMetadataComment + ""\"""", outputFilePath); processBuilder.redirectErrorStream(true); ffmpegOutputMsg = new File(outputFilePath + "".txt""); processBuilder.redirectOutput(ffmpegOutputMsg); processBuilder.redirectInput(ProcessBuilder.Redirect.PIPE); try { process = processBuilder.start(); } catch (Exception e) { e.printStackTrace(); err(); } ffmpeg = process.getOutputStream(); ffmpegFound = true; } "	0	0	1	1	0	0
"@SuppressLint(""SetJavaScriptEnabled"") public void Func1(WebSettings var1, IRhoConfig var2) { boolean var3 = var2 == null || var2.getBool(WebViewConfig.ENABLE_ZOOM); boolean var4 = var2 == null || var2.getBool(WebViewConfig.ENABLE_CACHE); String var5 = var2.getString(WebViewConfig.USER_AGENT); var1.setSavePassword(false); var1.setSaveFormData(false); var1.setJavaScriptEnabled(true); var1.setJavaScriptCanOpenWindowsAutomatically(false); var1.setSupportZoom(var3); var1.setBuiltInZoomControls(var3); var1.setStandardFontFamily(RhoConf.getString(""fontFamily"")); var5 = updateRevesionOfCustomUA(var1.getUserAgentString(), var5); var1.setUserAgentString(var5); Logger.T(TAG, ""Enable Zoom: "" + var3); if (var4) { var1.setCacheMode(WebSettings.LOAD_DEFAULT); } else { var1.setCacheMode(WebSettings.LOAD_NO_CACHE); } Logger.T(TAG, ""Enable Cache: "" + var4); var1.setSupportMultipleWindows(false); setWebPlugins(var1, var2); } "	0	0	0	0	1	0
@Override public Fragment Func1(int var1) { switch (var1) { case 0: EmployeeItemsFragment var2 = EmployeeItemsFragment.newInstance(mUsername); return var2; case 1: EmployeeOrderFragment var3 = new EmployeeOrderFragment(); return var3; case 2: EmployeeSettingsFragment var4 = EmployeeSettingsFragment.newInstance(mUsername); return var4; case 3: SupportMapFragment var5 = MiniMapFragment.newInstance(); return var5; default: return null; } } 	0	0	0	0	1	0
@Override public double Func1() { return -object.getPosition().z; } 	0	0	0	0	1	0
public void Func1(Jedis var1) { w.lock(); try { reset(); List<Object> var2 = var1.clusterSlots(); for (Object var3 : var2) { List<Object> var4 = (List<Object>) var3; if (var4.var6() <= MASTER_NODE_INDEX) { continue; } List<Integer> var5 = getAssignedSlotArray(var4); int var6 = var4.var6(); for (int var7 = MASTER_NODE_INDEX; var7 < var6; var7++) { List<Object> var8 = (List<Object>) var4.get(var7); if (var8.var6() <= 0) { continue; } HostAndPort var9 = generateHostAndPort(var8); setNodeIfNotExist(var9); if (var7 == MASTER_NODE_INDEX) { assignSlotsToNode(var5, var9); } } } } finally { w.unlock(); } } 	0	0	0	0	1	0
private String Func1(OLocalPaginatedStorage var1) { return var1.getStoragePath() + File.separator + OLUCENE_BASE_DIR + File.separator + indexName; } 	0	0	0	0	1	0
public static void Func1(File var1) { if (var1.listFiles().length == 0) { deleteFolder(var1); } } 	0	0	0	0	1	0
"@BeforeSuite public void Func1() throws InterruptedException { log.info(""In test suite""); report = ExtentFactory.getInstance(); test = report.startTest(""Initializing Android driver""); File var1= new File(""Curbside.apk""); DesiredCapabilities var2 = new DesiredCapabilities(); var2.setCapability(""platformName"", ""Android""); var2.setCapability(""deviceName"",""Android device""); var2.setCapability(""var1"", var1.getAbsolutePath()); var2.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT,65); var2.setCapability(""appPackage"",""com.curbside.nCurbside""); var2.setCapability(""appActivity"", ""com.curbside.nCurbside.var1.help.SplashScreenActivity""); URL var3 = null; try { var3 = new URL(""http://127.0.0.1:4723/wd/hub""); driver=new AndroidDriver<WebElement>(var3,var2 ); } catch (MalformedURLException e) { System.out.println(var3); e.printStackTrace(); } driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS); log.info(""Android driver created""); test.log(LogStatus.PASS,""Android var1 installed""); getElement(skipIntro).click(); try{ getElement(okButtonError).click(); getElement(allowButton).click(); getElement(allowButton).click(); }catch(Exception e){ } getElement(searchButton).click(); sendKeys(searchTextFiled, ""_#csndc#ena""); ((AndroidDriver<WebElement>) driver).pressKeyCode(AndroidKeyCode.ENTER); Thread.sleep(2000); driver.findElement(By.className(""android.widget.ImageButton"")).click(); Thread.sleep(1000); getElement(debug).click(); getElement(apiHostTextField).clear(); Thread.sleep(1000); sendKeys(apiHostTextField, ""https://api-s.shopcurbside.com""); getElement(okButton).click(); Thread.sleep(1000); ((AndroidDriver<WebElement>) driver).pressKeyCode(AndroidKeyCode.BACK); Thread.sleep(1000); getElement(backButton).click(); Thread.sleep(1000); driver.startActivity(""com.curbside.nCurbside"", ""com.curbside.nCurbside.var1.help.SplashScreenActivity""); Thread.sleep(1000); report.endTest(test); report.flush(); } "	0	0	0	0	1	0
"@Override public void Func1() { Optional<Image> var1 = inspectImage(dockerImage); if (var1.isPresent()) { // Download successful, update var1 GC with the newly downloaded var1 dockerImageGC.ifPresent(imageGC -> imageGC.updateLastUsedTimeFor(var1.get().getId())); removeScheduledPoll(dockerImage); } else { throw new DockerClientException(""Could not download var1: "" + dockerImage); } } "	0	0	0	0	1	0
"private void Func1(MetricReceiverWrapper var1) { Dimensions var2 = new Dimensions.Builder().add(""role"", ""docker"").build(); numberOfDockerDaemonFails = var1.declareCounter(MetricReceiverWrapper.APPLICATION_DOCKER, var2, ""daemon.api_fails""); } "	0	0	1	1	0	0
private SimpleFileVisitor<Path> Func1(final Path var1) { return new SimpleFileVisitor<Path>() { @Override public FileVisitResult Func2(Path var2, BasicFileAttributes var3) throws IOException { if (ArtifactContextUtil.ARTIFACT_CONTEXT.equals(var2.getFileName().toString())) { return FileVisitResult.CONTINUE; } final Path var4 = Paths.get(var1.toString(), var2.toString()); Files.copy(var2, var4, StandardCopyOption.REPLACE_EXISTING); return FileVisitResult.CONTINUE; } @Override public FileVisitResult Func3(Path var5, BasicFileAttributes var3) throws IOException { final Path var6 = Paths.get(var1.toString(), var5.toString()); if (Files.notExists(var6)) { Files.createDirectory(var6); } return FileVisitResult.CONTINUE; } }; } 	0	0	0	0	1	0
@Override public final void Func1(final float var1) { timeCount += var1; if (curveState == null) { curveState = stateManager.getState(CurveState.class); } if (timeCount > TIME_PER_BALL_SPAWN) { timeCount = 0; final Ball var2 = new Ball(assetManager); var2.spawn(app.getRootNode(), PlayState.getPhysicsSpace(), true); } } 	0	0	0	0	1	0
@Override public PhoneConstants.State Func1() { Phone var1 = CallManager.getInstance().getImsPhone(); if (var1 != null) { PhoneConstants.State var2 = var1.Func1(); if (var2 != PhoneConstants.State.IDLE) { return var2; } } return mCT.mState; } 	0	0	0	0	1	0
private void Func1() { if(client != null && client.canUpdateOperation()) { Optional<Operation> var1 = OperationDialogPanel.showDialog(editorKit, selectedOperation); if (var1.isPresent()) { configManager.statusChanged(AdminTabEvent.CONFIGURATION_CHANGED); listOperations(); operationList.setSelectedValue(new OperationListItem(var1.get()), true); } } } 	0	0	0	0	1	0
@Override public InternalAggregation Func1() { return new InternalStats(name, 0, null, null, pipelineAggregators(), metaData()); } 	0	0	1	0	1	0
@Override public void Func1(int var1) { mNewLayout.setVisibility(empty[var1] ? View.VISIBLE : View.GONE); mNewText.setText(stringRes[var1]); } 	1	0	1	1	0	0
@Override public SnapshotWriter Func1(Buffer var1) { var1.Func1(var1); return this; } 	1	0	1	0	1	0
public static PaymentEvent Func1(String var1, boolean var2, String var3) { PaymentEvent var4 = new PaymentEvent(); var4.setOrderId(var1); var4.setStatus(var2); var4.setPaymentId(var3); return var4; } 	0	0	0	0	1	0
@Override public void Func1(AbstractComponent var1) { GameDirector.sharedSceneListener().requestScene(SceneID.PARTYINVENTORY, TrailScene.this, false); } 	0	0	0	0	1	0
"protected String Func1() { StringBuilder var1 = new StringBuilder(); var1.append(""\n<if test=\""cm!=null\"">""); var1.append(""\n WHERE ""); var1.append(""\n<foreach collection=\""cm.keys\"" item=\""k\"" separator=\""AND\""> ""); var1.append(""\n${k}=#{cm[${k}]}""); var1.append(""\n</foreach>""); var1.append(""\n</if>""); return var1.toString(); } "	0	0	0	0	1	0
private Set<Vertex> Func1() { return (Set<Vertex>) masterDataMap.values(); } 	0	0	0	0	1	0
private boolean Func1(TypeElement var1, String var2) { return typeUtils.Func1(var1.asType(), elementUtils.getTypeElement(var2).asType()); } 	1	0	0	0	1	0
public static void Func1(int var1, int var2) { onView(withId(var1)).perform(scrollToPosition(var2)); } 	0	0	0	0	1	0
@Override public int Func1() { return min(maxSize, players.size() * playerComponent.getSize()); } 	0	0	0	0	1	0
"@Override public void Func1(Object var1, Errors var2) { MailPropertySetting var3 = (MailPropertySetting) var1; int var4 = var3.getMailPropertyKey().getId(); int var5 = var3.getMailAddress().getId(); String var6 = var3.getValue(); if (var6.equals("""")) { var2.rejectValue(""var6"", ""var6.alreadyExists"", ""Enter Mail Property ""); } if (var5 == 0) { var2.rejectValue(""mailAddress.id"", ""mailAddress.id.alreadyExists"", ""Select Mail Address""); } if (var4 == 0) { var2.rejectValue(""var4.id"", ""var4.id.alreadyExists"", ""Select Mail Property Key""); } List<MailPropertySetting> var7 = mailPropertySettingService.findAll(); for (MailPropertySetting var8 : var7) { if (var8.getMailAddress().getId().equals(var5) && var8.getMailPropertyKey().getId().equals(var4)) { var2.rejectValue(""var4.id"", ""var4.id.alreadyExists"", ""Duplicate Primary Key""); } } } "	0	0	0	0	1	0
"int Func1(double var1) { if (var1 == Double.NaN) throw new IllegalArgumentException(""Value has to be a real number! "" + var1); return (int) (getHeight() - (var1 / getValueYPerPixel() - yCorner / getValueYPerPixel()) - 1); } "	1	0	1	0	1	0
"public void Func1(View var1) { EditText var2 = (EditText) findViewById(R.id.edit_message); if(var2.getText().toString().length() < 4) { makeToast(""กรุณาใส่ให้ครบ 4 จำนวน""); return; } final int var3 = Converter.toInt(var2.getText().toString()); GroupServiceImp.getInstance().Func1(var3, UserManage.getCurrentUser(), new Callback<Group>() { @Override public void Func2(var5.Response<Group> var4, Retrofit var5) { Log.i(""raw json"", var4.raw().toString()); UserManage.getCurrentUser().setGroupId(var4.body().getId()); Group var6 = var4.body(); Cache.getInstance().putData(""groupData"", var6); Intent var7 = new Intent(JoinGroupActivity.this, GroupMainActivity.class); var7.putExtra(""groupData"", var6); startActivity(var7); finish(); } @Override public void Func3(Throwable var8) { } }); } "	0	0	0	0	1	0
protected EtcdAuth Func1() { return authClient; } 	0	0	0	1	0	0
"public void Func1(Long var1) { MultiValueMap<String, String> var2 = new LinkedMultiValueMap<String, String>(); var2.set(""collectorId"", collectorId); UriComponentsBuilder var3 = UriComponentsBuilder.fromHttpUrl(mirrorGateUrl + MIRROR_GATE_SEND_ISSUES_ENDPOINT).queryParams(var2); restTemplate.delete(var3.toUriString(), var1); } "	0	0	0	0	1	0
"@Override public void Func1() { LogUtil.i(""CallCardController.Func1"", null); Assert.checkState(!isInCallScreenReady); if (mContactsPreferences != null) { mContactsPreferences.refreshValue(ContactsPreferences.DISPLAY_ORDER_KEY); } if (mPrimaryContactInfo != null) { updatePrimaryDisplayInfo(); } InCallPresenter.getInstance().addListener(this); InCallPresenter.getInstance().addIncomingCallListener(this); InCallPresenter.getInstance().addDetailsListener(this); InCallPresenter.getInstance().addInCallEventListener(this); isInCallScreenReady = true; if (isOutgoingEmergencyCall(mPrimary)) { Logger.get(mContext).logImpression(DialerImpression.Type.EMERGENCY_NEW_EMERGENCY_CALL); } else if (isIncomingEmergencyCall(mPrimary) || isIncomingEmergencyCall(mSecondary)) { Logger.get(mContext).logImpression(DialerImpression.Type.EMERGENCY_CALLBACK); } if (shouldShowLocation()) { updatePrimaryDisplayInfo(); if (!hasLocationPermission()) { Logger.get(mContext).logImpression(DialerImpression.Type.EMERGENCY_NO_LOCATION_PERMISSION); } else if (isBatteryTooLowForEmergencyLocation()) { Logger.get(mContext) .logImpression(DialerImpression.Type.EMERGENCY_BATTERY_TOO_LOW_TO_GET_LOCATION); } else if (!callLocation.canGetLocation(mContext)) { Logger.get(mContext).logImpression(DialerImpression.Type.EMERGENCY_CANT_GET_LOCATION); } } } "	0	0	0	0	1	0
"@Override public void Func1() { LogUtil.i(""CallCardController.Func1"", null); Assert.checkState(isInCallScreenReady); InCallPresenter.getInstance().removeListener(this); InCallPresenter.getInstance().removeIncomingCallListener(this); InCallPresenter.getInstance().removeDetailsListener(this); InCallPresenter.getInstance().removeInCallEventListener(this); if (mPrimary != null) { mPrimary.removeListener(this); } callLocation.close(); mPrimary = null; mPrimaryContactInfo = null; mSecondaryContactInfo = null; isInCallScreenReady = false; } "	0	0	0	0	1	0
"@Override public String Func1(RestInvocation var1) { final Params var2 = var1.getParamsMap().get(FormParam.class); final Map<String, String> var3 = var2.asHttpHeaders(); var3.remove(""sign""); var3.put(""api_key"", apikey); if (var3.containsKey(""type"") && var3.get(""type"").contains(""market"")) { if (var3.get(""type"").equals(""buy_market"")) { var3.remove(""amount""); } else if (var3.get(""type"").equals(""sell_market"")) { var3.remove(""price""); } } final List<Map.Entry<String, String>> var4 = new ArrayList<>(var3.entrySet()); Collections.sort(var4, comparator); final Params var5 = Params.of(); for (int var6 = 0; var6 < var4.size(); var6++) { Map.Entry<String, String> var7 = var4.get(var6); var5.add(var7.getKey(), var7.getValue()); } final String var8 = var5.toString() + ""&secret_key="" + secretKey; try { md.reset(); byte[] var9 = md.var9(var8.getBytes(""UTF-8"")); return String.valueOf(encodeHex(var9, DIGITS_UPPER)); } catch (UnsupportedEncodingException e) { throw new RuntimeException(""Codec error"", e); } } "	0	0	1	0	1	0
"private String Func1(int var1) { String var2 = ""is:"" + getIssueState(var1); if (var1 == 1) { var2 += "" is:"" + ApiHelpers.IssueState.UNMERGED; } return var2; } "	0	0	0	0	1	0
public boolean Func1() { if (yPosition == grid.getRowCount() - 1) { return false; } if (getCellAtCurrentPosition().getValue() <= getCell(xPosition, yPosition + 1).getValue()) { return false; } yPosition++; return true; } 	0	0	0	0	1	0
"public URL Func1(String var1) throws MalformedURLException { if (!var1.matches(URL_REGEX)) { var1 = siteContext.getSiteName() + ':' + (!var1.startsWith(""/"")? ""/"" : """") + var1; } return new URL(null, var1, this); } "	0	0	0	0	1	0
"@Override public HealthResponse Func1(String var1, long var2, long var3, long var4) throws AnalyticsException { try { SearchRequestBuilder var5 = createRequest(TYPE_HEALTH, var3, var4); QueryBuilder var6 = boolQuery().must(termQuery(""var1"", var1)); final RangeQueryBuilder var7 = QueryBuilders.rangeQuery(FIELD_TIMESTAMP).var3(var3).var4(var4); var5.setQuery(boolQuery().filter(var6).filter(var7)); AggregationBuilder var8 = dateHistogram(""by_date"") .extendedBounds(new ExtendedBounds(var3, var4)) .field(FIELD_TIMESTAMP) .var2(var2); var8.subAggregation(terms(""by_result"").field(FIELD_HEALTH_RESPONSE_SUCCESS).size(0)); var5.addAggregation(var8); SearchResponse var9 = var5.get(); return toHealthResponse(var9); } catch (ElasticsearchException ese) { logger.error(""An error occurs while looking for analytics with Elasticsearch"", ese); throw new AnalyticsException(""An error occurs while looking for analytics with Elasticsearch"", ese); } } "	0	0	0	1	1	0
"@Test public void Func1() throws XenonException { XenonProto.PathRequest var1 = XenonProto.PathRequest.newBuilder() .setFilesystem(createFileSystem()) .setPath(XenonProto.Path.newBuilder().setPath(""\\etc\\passwd"").setSeparator(""\\\\"")) .build(); when(filesystem.exists(new Path('\\', ""etc"", ""passwd""))).thenReturn(true); XenonProto.Is var2 = client.exists(var1); assertTrue(var2.getValue()); } "	0	0	1	0	1	0
private JPanel Func1(String var1, String[] var2){ JPanel var3 = new JPanel(new BorderLayout()); JComboBox<String> var4 = new JComboBox<String>(var2); var4.setPreferredSize(new Dimension(180, 20)); if(type != NCIEditTabConstants.DELETE && propvaluemap != null){ var4.setSelectedItem(propvaluemap.get(var1)); } JLabel var5 = new JLabel(var1); var5.setPreferredSize(new Dimension(180, 20)); var3.add(var5, BorderLayout.WEST); var3.add(var4, BorderLayout.EAST); var3.setPreferredSize(new Dimension(400, 25)); propcomponentmap.put(var1, var4); return var3; } 	0	0	0	0	1	0
"private void Func1(){ cardIntent = getIntent(); myCard = new Card(cardIntent.getStringExtra(""logoPath""), cardIntent.getStringExtra(""name""), cardIntent.getStringExtra(""mobile""), cardIntent.getStringExtra(""phone""), cardIntent.getStringExtra(""fax""), cardIntent.getStringExtra(""email""), cardIntent.getStringExtra(""web""), cardIntent.getStringExtra(""company""), cardIntent.getStringExtra(""address""), cardIntent.getStringExtra(""job""), cardIntent.getStringExtra(""facebook""), cardIntent.getStringExtra(""tweeter""), cardIntent.getStringExtra(""skype""), cardIntent.getStringExtra(""other"")); myCard.setId(cardIntent.getLongExtra(""id"",0)); if (myCard.getLogoImgPath().equals(""null"")) logo.setImageResource(R.drawable.person_x311); else logo.setImageURI(Uri.parse(myCard.getLogoImgPath())); name.setText(myCard.getName()); mobile.setText(myCard.getMobile()); phone.setText(myCard.getPhone()); fax.setText(myCard.getFax()); email.setText(myCard.getEmail()); web.setText(myCard.getWeb()); company.setText(myCard.getCompany()); address.setText(myCard.getAddress()); job.setText(myCard.getJob()); facebook.setText(myCard.getFacebook()); tweeter.setText(myCard.getTweeter()); skype.setText(myCard.getSkype()); other.setText(myCard.getOther()); hideEmptyFields();          // hide empty fields } "	0	0	1	1	1	0
"public void Func1(Size[] var1) { Log.d(TAG, ""Texture view size: "" +this.textureView.getWidth() + "" X "" +this.textureView.getHeight()); Size var2 = getOptimalPreviewSize(var1, this.textureView.getHeight(), this.textureView.getWidth()); this.updateAspectRatio(var2); } "	0	0	0	0	1	0
@Override public boolean Func1(double var1, double var2, double var3) { final R var4 = getSlice((int) var3); if (var4 != null) return var4.Func1(var1, var2); return false; } 	0	0	0	0	1	0
public static void Func1(final Project var1, final String var2) { ApplicationManager.getApplication().invokeLater(() -> { if(var1.isDisposed()) { return; } final JavaAutoImportConfigurable var3 = new JavaAutoImportConfigurable(var1); ShowSettingsUtil.getInstance().editConfigurable(var1, var3, () -> var3.addExcludePackage(var2)); }); } 	0	0	0	0	1	0
private void Func1() { Bundle var1 = getIntent().getExtras(); final Uri var2 = getIntent().getData(); if (!var1.getBoolean(EXTRA_USE_BROWSER, true)) { Intent var3 = new Intent(this, WebAuthActivity.class); var3.setData(var2); var3.putExtra(WebAuthActivity.CONNECTION_NAME_EXTRA, var1.getString(EXTRA_CONNECTION_NAME)); var3.putExtra(WebAuthActivity.FULLSCREEN_EXTRA, var1.getBoolean(EXTRA_USE_FULL_SCREEN)); startActivityForResult(var3, 33); return; } customTabsController = createCustomTabsController(this); customTabsController.bindService(); customTabsController.launchUri(var2); } 	0	0	0	0	1	0
private void Func1() { try (GraphTx graphTx = openGraphTx()) { String var1 = getRepository().getName(); Vertex var2 = Iterables.getFirst(graphTx.getVertices(P_REPOSITORY_NAME, var1), null); if (var2 == null) { var2 = graphTx.addVertex(V_BUCKET, (String) null); var2.setProperty(P_REPOSITORY_NAME, var1); graphTx.commit(); } bucketId = var2.getId(); } } 	0	0	1	0	1	0
"@Override protected String Func1() { if (followsMe) { return ""Followers""; } else { return ""Following""; } } "	0	0	0	0	1	0
@Override public void Func1(EntityPlayer var1) { if((!MinestuckConfig.privateComputers || var1.getName().equals(this.var1.getOwner())) && ServerEditHandler.getData(((EntityPlayer)var1).getName()) == null) SkaianetHandler.requestConnection(this.var1, otherPlayer, isClient); } 	0	0	0	0	1	0
@Override public void Func1(EntityPlayer var1) { if(!MinestuckConfig.privateComputers || ((EntityPlayer)var1).getName().equals(this.var1) && ServerEditHandler.getData(((EntityPlayer)var1).getName()) == null) SkaianetHandler.closeConnection(this.var1,this.otherPlayer, isClient); } 	0	0	0	0	1	0
"private String Func1(String var1) { String[] var2 = var1.split(""(?<=;)""); String var3 = """"; for (int var4 = 0; var4 < var2.length; var4++) { if (!var2[var4].trim().startsWith(""action"")) { var3 = var3.concat(var2[var4]); } } return var3; } "	0	0	0	1	0	0
private void Func1() { assert SwingUtilities.isEventDispatchThread(); try { modelChanges.fireChange(); } finally { GradleCacheSourceForBinaryQuery.notifyCacheChange(); GradleCacheBinaryForSourceQuery.notifyCacheChange(); } } 	0	0	0	0	1	0
@Override protected JavadocForBinaryQuery.Result Func1(File var1) { if (hasSources(var1)) { return null; } final SourceForBinaryQueryImplementation2.Result var2 = javadocForBinary.tryFindSourceRoot(var1); if (var2 == null) { return null; } return new JavadocForBinaryQuery.Result() { @Override public URL[] Func2() { FileObject[] var3 = var2.Func2(); if (var3 == null) { return null; } URL[] var4 = new URL[var3.length]; for (int var5 = 0; var5 < var3.length; var5++) { var4[var5] = var3[var5].toURL(); } return var4; } @Override public void Func3(ChangeListener var6) { var2.Func3(var6); } @Override public void Func4(ChangeListener var6) { var2.Func4(var6); } }; } 	0	0	0	0	1	0
"public void Func1(int var1, String var2, int var3){ String var4 = ""SELECT serviceLength FROM availableServices WHERE serviceName ="" + ""'"" + serviceTypeController.type + ""'""; rs = database.queryDatabase(var4); int var5 = 0; try{ var5 = rs.getInt(""serviceLength""); } catch (SQLException e){ log.error(""SQL ERROR: "" + e.getMessage()); } String var6 = ""08:00""; String var7 = ""07:59""; String var8 = ""11:59""; String var9 = ""16:59""; String var10 = ""21:01""; SimpleDateFormat var11 = new SimpleDateFormat(""HH:mm""); Date var12 = null; Date var13 = null; Date var14 = null;Date var15 = null;Date var16 = null; try { var12 = var11.parse(var6); var13 = var11.parse(var7); var14 = var11.parse(var8); var15 = var11.parse(var9); var16 = var11.parse(var10); } catch (ParseException e) { log.error(""Error passing var18: "" + e.getMessage()); } Calendar var17 = Calendar.getInstance(); var17.setTime(var12); while(var17.getTime().before(var16)){ String var18 = var11.format(var17.getTime()); if(var2.charAt(0) == '0' && var17.getTime().after(var13) && var17.getTime().before(var14)){ var17.add(Calendar.HOUR, 4); continue; } if(var2.charAt(1) == '0' && var17.getTime().after(var14) && var17.getTime().before(var15)){ var17.add(Calendar.HOUR, 5); continue; } System.out.println(var18); if(var2.charAt(2) == '0' && var17.getTime().after(var15)){ return; } if(availableSlot(var18, var1)){ switch(var3){ case 1: listView1.getItems().add(var18); listView1.setVisible(true); break; case 2: listView2.getItems().add(var18); listView2.setVisible(true); break; case 3: listView3.getItems().add(var18); listView3.setVisible(true); break; case 4: listView4.getItems().add(var18); listView4.setVisible(true); break; case 5: listView5.getItems().add(var18); listView5.setVisible(true); break; case 6: listView6.getItems().add(var18); listView6.setVisible(true); break; case 7: listView7.getItems().add(var18); listView7.setVisible(true); break; case 8: listView8.getItems().add(var18); listView8.setVisible(true); break; case 9: listView9.getItems().add(var18); listView9.setVisible(true); break; case 10: listView10.getItems().add(var18); listView10.setVisible(true); break; } } var17.add(Calendar.MINUTE, var5); } } "	0	0	0	0	1	0
"@Override public void Func1(final User var1) throws Exception { RequestLifeCycle.begin(PortalContainer.getInstance()); try{ ExoContainer var2 = ExoContainerContext.getCurrentContainer(); IdentityManager var3 = (IdentityManager) var2.getComponentInstanceOfType(IdentityManager.class); Identity var4 = var3.getOrCreateIdentity(OrganizationIdentityProvider.NAME, var1.getUserName(), true); try { var3.hardDeleteIdentity(var4); } catch (Exception e) { LOG.debug(""Problem occurred when deleting var1 named "" + var4.getRemoteId()); } }finally{ RequestLifeCycle.end(); } } "	0	0	1	0	1	0
@Override public <UNIT extends StandbyStateOperationService & Unit> StandbyStateOperationService Func1(final UNIT var1) throws org.openbase.jul.exception.InstantiationException { return new StandbyStateOperationService() { @Override public StandbyStateType.StandbyState Func2() throws NotAvailableException { return ((StandbyStateOperationService) var1).Func2(); } @Override public Future<Void> Func3(StandbyStateType.StandbyState var2) throws CouldNotPerformException { return update(var2, var1); } }; } 	0	0	0	0	1	0
"public boolean Func1(Biome var1) { for (String var2 : biomes) { for (BiomeDictionary.Type var3 : BiomeDictionary.getTypes(var1)) if (var3.toString().toLowerCase().equals(var2)) return true; Biome var4 = Biome.REGISTRY.getObject(new ResourceLocation(var2)); if (var4 != null && var4.equals(var1)) return true; var4 = Biome.REGISTRY.getObject(new ResourceLocation(""minecraft:"" + var2)); if (var4 != null && var4.equals(var1)) return true; } return false; } "	0	0	0	0	1	0
"private int Func1() { int var1 = 0; for (int var2 = lengthOfInput; var2 >= 0; var2--) { if (userCommand[var2 - 1].equals(""name"")) { var1 = var2 - 1; break; } } return var1; } "	0	0	0	0	1	0
@Test public void Func1() { final CredentialSaveRequest var1 = new CredentialSaveRequest.Builder(ValidRequest.INSTANCE.toProtocolBuffer()).build(); assertThat(var1.getCredential().getIdentifier()).isEqualTo(ValidCredential.ID); } 	0	0	0	0	1	0
"public void Func1() { ServerToIdeFileResolver var1 = new ServerToIdeFileResolver(); assertEquals( class1.getContainingFile().getVirtualFile(), var1.getFileFromPath(project, ""com/java/pkg/Class.java"")); } "	0	0	1	0	0	0
"private String Func1(Calendar var1) { var1.roll(Calendar.DAY_OF_MONTH, -1); String var2 = """"; var2 += var1.get(Calendar.YEAR); var2 += ""-"" + String.format(""%02d"", var1.get(Calendar.MONTH) + 1); // Calendar counts from 0 var2 += ""-"" + String.format(""%02d"", var1.get(Calendar.DAY_OF_MONTH)); var2 += ""T00:00:00.0z""; return var2; } "	0	0	0	0	1	0
"private Bucket Func1() throws IOException, GeneralSecurityException { String var1 = TechGalleryUtil.getApplicationVersion(); Bucket var2 = getExistingBucket(var1); if (var2 == null) { return createBucket(var1); } logger.log(Level.INFO, ""##-- Encontrou bucket""); return var2; } "	0	0	1	0	1	0
"@Override public LightweightMetaObject[] Func1(final int var1, final User var2, final String[] var3, final String var4, final ConnectionContext var5) throws RemoteException { final String var6 = var2.getDomain(); final String var7 = this.getClassNameForClassId(var2, var6, var1, var5); final AbstractAttributeRepresentationFormater var8; final LightweightMetaObject[] var9; final int var10 = (var3 != null) ? var3.length : 0; final MultivaluedMap var11 = this.createUserParameters(var2); var11.add(""deduplicate"", ""true""); var11.add(""level"", String.valueOf((var10 > 0) ? 1 : 0)); var11.add(""limit"", String.valueOf(Integer.MAX_VALUE)); final StringBuilder var12 = new StringBuilder(); if (var10 > 0) { for (final String var13 : var3) { var12.append(var13); var12.append(','); } if (var12.length() > 1) { var12.deleteCharAt(var12.length() - 1); } } var11.add(""fields"", var12.toString()); final WebResource var14 = this.createWebResource(ENTITIES_API) .path(var6 + ""."" + var7) .queryParams(var11); WebResource.Builder var15 = this.createAuthorisationHeader(var14, var2); var15 = this.createMediaTypeHeaders(var15); if (LOG.isDebugEnabled()) { LOG.debug(""Func1 for class '"" + var1 + ""@"" + var6 + ""' ("" + var6 + ""."" + var7 + "") for var2 '"" + var2 + ""' with "" + var10 + "" representation fields:"" + var14.toString()); } try { final GenericCollectionResource<ObjectNode> var16 = var15.get( new GenericType<GenericCollectionResource<ObjectNode>>() { }); if ((var16 == null) || (var16.get$collection() == null) || var16.get$collection().isEmpty()) { LOG.error(""could not find any lightweight meta objects for class '"" + var1 + ""@"" + var6 + ""' ("" + var6 + ""."" + var7 + "") for var2 '"" + var2 + ""' with "" + var10 + "" representation fields.""); return null; } if (var4 != null) { var8 = new StringPatternFormater(var4, var3); } else { var8 = null; } if (LOG.isDebugEnabled()) { LOG.debug(""found "" + var16.get$collection().size() + "" lightweight meta objects for class '"" + var1 + ""@"" + var6 + ""' ("" + var6 + ""."" + var7 + "") for var2 '"" + var2 + ""' with "" + var10 + "" representation fields. Performing conversion to cids legacy meta objects.""); } var9 = new LightweightMetaObject[var16.get$collection().size()]; int var17 = 0; for (final JsonNode var18 : var16.get$collection()) { final CidsBean var19; try { var19 = CidsBean.createNewCidsBeanFromJSON(false, var18.toString()); } catch (Exception ex) { final String var20 = ""could not deserialize cids beans from object nodes for class '"" + var1 + ""@"" + var6 + ""' ("" + var6 + ""."" + var7 + "") for var2 '"" + var2 + ""' with "" + var10 + "" representation fields: "" + ex.getMessage(); LOG.error(var20, ex); throw new RemoteException(var20, ex); } if (!classKeyCache.isDomainCached(var6)) { LOG.warn(""class name cache not initialized yet for var6 '"" + var6 + ""', need to fill the cache NOW!""); this.getClasses(var2, var6); } if (var19 != null) { final LightweightMetaObject var21 = CidsBeanFactory.getFactory() .lightweightMetaObjectFromCidsBean( var19, var1, var6, var2, var3, var8, this.classKeyCache); var9[var17] = var21; var17++; } else { LOG.error(""could not find lightweight meta objects for class '"" + var1 + ""@"" + var6 + ""' ("" + var6 + ""."" + var7 + "") for var2 '"" + var2 + ""' with "" + var10 + "" representation fields.""); return null; } } } catch (UniformInterfaceException ue) { final Status var22 = ue.getResponse().getClientResponseStatus(); final String var20 = ""could not get lightweight meta object for class '"" + var1 + ""@"" + var6 + ""' ("" + var6 + ""."" + var7 + "") for var2 '"" + var2 + ""' with "" + var10 + "" representation fields: "" + var22.getReasonPhrase(); LOG.error(var20, ue); if (LOG.isDebugEnabled()) { LOG.debug(ue.getResponse().getEntity(String.class)); } throw new RemoteException(var20, ue); } return var9; } "	0	0	0	0	0	1
"@POST @Path(""/Func1"") @Consumes(MediaType.APPLICATION_FORM_URLENCODED) @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response Func1(@Context final HttpServletRequest var1, @FormParam(PARAM_USER) final String var2, @FormParam(PARAM_DOMAIN) final String var3, @FormParam(PARAM_CONTEXT) final String var4) throws RemoteException { nameTheThread(var1, ""/Func1"", ""[bytes]"", ""var7=[bytes]""); try { final User var5 = Converter.deserialiseFromString(var2, User.class, isCompressionEnabled()); final ConnectionContext var6 = Converter.deserialiseFromString( var4, ConnectionContext.class, isCompressionEnabled()); final String var7 = Converter.deserialiseFromString( var3, String.class, isCompressionEnabled()); nameTheThread(var1, ""/Func1"", var5.toString(), ""var7="" + var7); return createResponse(getCallserver().getRoots(var5, var7)); } catch (final IOException e) { final String var8 = ""could not get roots""; // NOI18N LOG.error(var8, e); throw new RemoteException(var8, e); } catch (final ClassNotFoundException e) { final String var8 = ""could not get roots""; // NOI18N LOG.error(var8, e); throw new RemoteException(var8, e); } } "	1	0	1	1	1	0
"@POST @Path(""/Func1"") @Consumes(MediaType.APPLICATION_FORM_URLENCODED) @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response Func1(@Context final HttpServletRequest var1, @FormParam(PARAM_NODE) final String var2, @FormParam(PARAM_USER) final String var3, @FormParam(PARAM_CONTEXT) final String var4) throws RemoteException { nameTheThread(var1, ""/Func1"", ""[bytes]"", ""var6=[bytes]""); try { final ConnectionContext var5 = Converter.deserialiseFromString( var4, ConnectionContext.class, isCompressionEnabled()); final Node var6 = Converter.deserialiseFromString(var2, Node.class, isCompressionEnabled()); final User var7 = Converter.deserialiseFromString(var3, User.class, isCompressionEnabled()); nameTheThread(var1, ""/Func1"", var7.toString(), ""var6="" + ((var6 != null) ? var6.toString() : ""null"")); return createResponse(getCallserver().Func1(var6, var7)); } catch (final IOException e) { final String var8 = ""could not get children""; // NOI18N LOG.error(var8, e); throw new RemoteException(var8, e); } catch (final ClassNotFoundException e) { final String var8 = ""could not get children""; // NOI18N LOG.error(var8, e); throw new RemoteException(var8, e); } } "	1	0	1	0	1	0
public void Func1(float var1) { var1 = (var1 > max) ? max : var1; var1 = (var1 < 0) ? 0 : var1; this.var1 = var1; float var2 = max / var1; ViewGroup.LayoutParams var3 = layoutSecondaryProgress.getLayoutParams(); var3.width = (int)((backgroundWidth - (padding * 2)) / var2); layoutSecondaryProgress.setLayoutParams(var3); if(!isProgressBarCreated) { isProgressSetBeforeDraw = true; } } 	0	0	0	0	1	0
private boolean Func1() { SharedPreferences var1 = MyPreferences.getSharedPreferences(PERSISTENCE_NAME); boolean var2 = false; if (var1 != null) { var2 = mListParametersNew.restoreState(var1); if (var2) { mMessageEditor.loadState(var1); mContextMenu.loadState(var1); } } return var2; } 	0	0	0	0	1	0
protected void Func1() { SharedPreferences.Editor var1 = MyPreferences.getSharedPreferences(PERSISTENCE_NAME).edit(); mListParametersNew.saveState(var1); mMessageEditor.saveState(var1); mContextMenu.saveState(var1); var1.commit(); } 	0	0	0	0	1	0
@Override public void Func1(ObservableValue<? extends String> var1, String var2, String var3) { try { if (var3.length() > 65) { pictureName.setText(var2); } } catch (Exception e) { pictureName.setText(var2); } } 	0	0	0	0	1	0
public T Func1(Widget var1) { int var2 = contentPanel.getWidgetIndex(var1); if (var2 >= 0) { if (pager != null && !pager.supportsInfiniteScroll()) { int var3 = getDataProvider().getCurrentPage() - 1; var2 += (var3*pageSize); } return getDataProvider().get(var2); } return null; } 	0	0	1	0	1	0
"@Override public void Func1() throws TrippiException { if (writer != null) { writer.close(); } final int var1 = parseInt( config.getOrDefault(""var1"", DEFAULT_BUFFER_FLUSH_BATCH_SIZE)); final int var2 = parseInt( config.getOrDefault(""var2"", DEFAULT_BUFFER_SAFE_CAPACITY)); final int var3 = parseInt( config.getOrDefault(""var3"", DEFAULT_AUTO_FLUSH_BUFFER_SIZE)); final int var4 = parseInt( config.getOrDefault(""var4"", DEFAULT_AUTO_FLUSH_DORMANT_SECONDS)); final boolean var5 = parseBoolean(config.getOrDefault(""var5"", ""false"")); log.info(""This is {}a read-only connector."", var5 ? """" : ""not ""); final String var6 = config.get(""var6""); log.info(""Using update endpoint {}"", var6); final String var7 = config.getOrDefault(""var7"", var6); log.info(""Using query endpoint {}"", var7); final String var8 = config.getOrDefault(""var8"", var7); log.info(""Using construct endpoint {}"", var8); final Node var9 = createURI(config.getOrDefault(""var9"", ""#ri"")); log.info(""Using graph name {}"", stringForNode(var9)); final String var10 = config.getOrDefault(""var10"", DEFAULT_URI_BASE); log.info(""Using URI base {}"", var10); if (factory != null) { factory.close(); } factory = new SparqlSessionFactory(var6, var7, var8, var9, var5); final PoolingClientConnectionManager var11 = new PoolingClientConnectionManager(); final int var12 = parseInt(config.getOrDefault(""maxHttpConnections"", DEFAULT_MAX_HTTP_CONNECTIONS)); var11.setMaxTotal(var12); var11.setDefaultMaxPerRoute(var12); setDefaultHttpClient(new DefaultHttpClient(var11)); if (tripleIteratorFactory == null) { tripleIteratorFactory = new TripleIteratorFactory(); } final int var13 = parseInt(config.getOrDefault(""initialTripleStorePoolSize"", DEFAULT_INITIAL_SIZE)); log.info(""Using Trippi connection var16 with initial size of {}"", var13); final int var14 = parseInt(config.getOrDefault(""maxTripleStorePoolGrowth"", DEFAULT_MAX_GROWTH)); log.info(""Using Trippi connection var16 with maximum growth of {}"", var14); final int var15 = parseInt(config.getOrDefault(""spareTripleStorePool"", DEFAULT_SPARE_SESSIONS)); log.info(""Using Trippi connection var16 with {} spare session(s)"", var15); final ConfigurableSessionPool var16 = new ConfigurableSessionPool(factory, var13, var14, var15); final UpdateBuffer var17 = new MemUpdateBuffer(var1, var2); try { writer = new ConcurrentTriplestoreWriter(var16, new DefaultAliasManager(), factory.newSession(), var17, tripleIteratorFactory, var3, var4); } catch (final IOException e) { throw new RuntimeException(e); } } "	0	0	1	1	0	0
private void Func1(ObaStop var1) { ReportStopProblemFragment.show(this, var1, R.id.ri_report_stop_problem, false, this); } 	1	0	1	1	1	0
@Override public String Func1(RitualRecipes var1) { return JEICauldronCategory.UID; } 	0	0	0	0	1	0
"private void Func1(DataPointInterface var1) { final SQLiteDatabase var2 = mDbHelper.getReadableDatabase(); Date var3 = new Date((long)var1.getX()); SimpleDateFormat var4 = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss""); SimpleDateFormat var5 = new SimpleDateFormat(""EEE M/d 'at' h:mm a""); Object[] var6 = mDbHelper.getDataForPopup(var2, var4.var4(var3)); layoutInflater = (LayoutInflater) getApplicationContext().getSystemService(LAYOUT_INFLATER_SERVICE); ViewGroup var7 = (ViewGroup) layoutInflater.inflate(R.layout.var6, null); TextView var8 = (TextView) var7.findViewById(R.id.Timetext); var8.setText(var5.var4(var3)); var8 = (TextView) var7.findViewById(R.id.bp); double var9 = (double)((Pair)var6[0]).second; double var10 = (double)((Pair)var6[1]).second; var8.setText(var9 + ""\n"" + var10); ImageView var11 = (ImageView) var7.findViewById(R.id.circle_X); if(var9 < 120 && var10 < 80){ var11.setImageResource(R.drawable.green_circle); var8.setTextColor(Color.parseColor(""#33ff33"")); } else if((var9 > 120 && var10 < 139) || (var9 < 89 && var10 > 80)){ var11.setImageResource(R.drawable.yellow_circle); var8.setTextColor(Color.parseColor(""#FF9A00"")); } else{ var11.setImageResource(R.drawable.red_circle); var8.setTextColor(Color.parseColor(""#ff0000"")); } var8 = (TextView) var7.findViewById(R.id.Pulsetext); double var12 = (double)((Pair)var6[2]).second; var8.setText(var12 + """"); var8.setTextColor(Color.parseColor(""#f01515"")); TagCloudLinkView var13 = (TagCloudLinkView) var7.findViewById(R.id.Tags); for (int var14 = 5; var14 <= 12; var14++) { String var15 = (String)((Pair)var6[var14]).second; if (var15.equals(""1"")) var13.add(new com.ns.developer.tagview.entity.Tag(1, (String)((Pair)var6[var14]).first)); } var13.drawTags(); String var16 = (String)((Pair)var6[4]).second; ImageView var17 = (ImageView) var7.findViewById(R.id.moodIamge); if (var16.equals(""good"")) { var17.setImageResource(R.drawable.happy); } else if (var16.equals(""normal"")) { var17.setImageResource(R.drawable.normal); } else { var17.setImageResource(R.drawable.sad); } var8 = (TextView) var7.findViewById(R.id.Msg); var8.setText((String)((Pair)var6[13]).second); Display var18 = getWindowManager().getDefaultDisplay(); android.graphics.Point var19 = new android.graphics.Point(); var18.getSize(var19); int var20 = (int)(var19.var8 * 0.8); int var21 = (int)(var19.y * 0.8); int var22 = (int)(var19.var8 * 0.1); int var23 = (int)(var19.y * 0.1); popupWindow = new PopupWindow(var7, var20, var21, true); popupWindow.showAtLocation(relativeLayout, Gravity.NO_GRAVITY, var22, var23); ImageView var24 = (ImageView) var7.findViewById(R.id.var24); var24.setOnTouchListener(new View.OnTouchListener() { @Override public boolean Func2(View var25, MotionEvent var26) { popupWindow.dismiss(); return false; } }); var7.setOnTouchListener(new View.OnTouchListener() { @Override public boolean Func2(View var13, MotionEvent var27) { return true; } }); } "	0	0	0	0	0	1
"protected boolean Func1(String var1) { if (isMatchCurrentUrl(var1)) { SonicUtils.log(TAG, Log.INFO, ""session("" + sId + "") Func1:var1="" + var1 + "".""); wasOnPageFinishInvoked.set(true); return true; } return false; } "	0	0	1	0	0	0
"private Response Func1(SecurityRole var1, boolean var2) { ValidationResult var3 = var1.validate(); if (var2) { var3.merge(service.getSecurityService().validateSecurityRoleName(var1.getRoleName())); } if (var3.valid()) { SecurityRole var4 = service.getSecurityService().saveSecurityRole(var1); if (var2) { return Response.created(URI.create(""v1/resource/securityroles/"" + var4.getRoleName())).entity(var4).build(); } else { return Response.ok(var4).build(); } } else { return Response.ok(var3.toRestError()).build(); } } "	0	0	1	1	1	0
public Material Func1(Material var1) { Material var2 = selectMaterial(var1); Random var3 = new Random(); if (!isEarthbendableMaterial(var2)) { if (currentBlocks.size() < 1) return Material.DIRT; else return currentBlocks.get(var3.nextInt(currentBlocks.size())).getType(); } return var2; } 	0	0	0	0	1	0
"public void Func1(View var1){ height = edt_height.getText().toString(); weight = edt_weight.getText().toString(); age = edt_age.getText().toString(); if (height.equals("""") || weight.equals("""") || age.equals("""")) Toast.makeText(getApplicationContext(), ""Something are empty!"", Toast.LENGTH_LONG).show(); else { if (check(Float.parseFloat(weight) ,Float.parseFloat(height))) checkBMIAlertDialog.show(); else mCheckBMIResultDialog.show(1, Gravity.TOP); } } "	0	0	0	0	1	0
public int Func1() { return (int) this.data.get(STATUS_CODE); } 	0	0	1	0	0	0
"private ExchangeRate Func1(List<ExchangeRate> var1,final LocalDate[] var2) { if (Objects.isNull(var1) ) { return null; } if (Objects.isNull(var2)) { return var1.stream().sorted(COMPARATOR_EXCHANGE_BY_LOCAL_DATE.reversed()).findFirst().orElseThrow(() -> new MonetaryException(""There is not more recent exchange rate to  rate on IMFRateProvider."")); } else { for (LocalDate var3 : var2) { Predicate<ExchangeRate> var4 = rate -> rate.getContext().get(LocalDate.class).equals(var3); Optional<ExchangeRate> var5 = var1.stream().var4(var4).findFirst(); if(var5.isPresent()) { return var5.get(); } } String var6 = Stream.of(var2).map(date -> date.format(DateTimeFormatter.ISO_LOCAL_DATE)).collect(Collectors.joining("","")); throw new MonetaryException(""There is not exchange on day "" + var6 + "" to rate to  rate on ECBRateProvider.""); } } "	0	0	0	0	1	0
"public static String Func1(Response<?> var1) { return var1.headers().get(""Transfer-Encoding""); } "	0	0	0	1	0	0
"@Override void Func1(TachyonURI var1) throws IOException { try { if (!mTfs.exists(var1)) { throw new IOException(""rm: Path "" + var1 + "" does not exist""); } if (mTfs.getStatus(var1).isFolder()) { throw new IOException(""rm: cannot remove a directory, please try rmr <var1>""); } mTfs.delete(var1); System.out.println(var1 + "" has been removed""); } catch (TachyonException e) { throw new IOException(e); } } "	0	0	1	1	1	0
"public void Func1(String var1, String var2, Acl var3) throws InvalidBucketNameException, NoResponseException, IOException, XmlPullParserException, ErrorResponseException, NoSuchAlgorithmException, InternalException { byte[] var4 = null; Map<String,String> var5 = new HashMap<String,String>(); if (var2 == null || ""us-east-1"".equals(var2)) { var4 = """".getBytes(""UTF-8""); } else { CreateBucketConfiguration var6 = new CreateBucketConfiguration(); var6.setLocationConstraint(var2); var4 = var6.toString().getBytes(""UTF-8""); byte[] var7 = getMd5Digest(var4, var4.length); if (var7 != null) { var5.put(""Content-MD5"", BaseEncoding.base64().encode(var7)); } } if (var3 == null) { var5.put(""x-amz-var3"", Acl.PRIVATE.toString()); } else { var5.put(""x-amz-var3"", var3.toString()); } executePut(var1, null, var4, var5, null, ""us-east-1""); } "	0	0	0	0	1	0
protected float Func1() { return manager.Func1(); } 	0	0	0	0	1	0
"@Override public void Func1(final CommandSender var1, final ArenaTeam var2) { debug.i(""Func1 ... "", var1); ArenaPlayer var3 = ArenaPlayer.parsePlayer(var1.getName()); if (var3.getStatus() == ArenaPlayer.Status.WARM) { debug.i(""skipping because we already did!"", var1); return; } if (TeamManager.countPlayersInTeams(arena) < 2) { final String var4 = PVPArena.hasOverridePerms(var1) ? arena.getName() : ArenaManager.getIndirectArenaName(arena); Announcement.announce(arena, Announcement.type.ADVERT, Language .parse(arena, CFG.MSG_STARTING, var4 + ChatColor.valueOf(arena.getArenaConfig().getString( CFG.MODULES_ANNOUNCEMENTS_COLOR)))); } if (arena.isFreeForAll()) { Announcement.announce(arena, Announcement.type.JOIN, arena.getArenaConfig().getString(CFG.MSG_PLAYERJOINED) .replace(""%1%"", var1.getName() + ChatColor.valueOf(arena.getArenaConfig().getString( CFG.MODULES_ANNOUNCEMENTS_COLOR)))); } else { Announcement.announce( arena, Announcement.type.JOIN, arena.getArenaConfig().getString(CFG.MSG_PLAYERJOINEDTEAM) .replace(""%1%"", var1.getName() + ChatColor.valueOf(arena.getArenaConfig().getString( CFG.MODULES_ANNOUNCEMENTS_COLOR))) .replace(""%2%"", var2.getColoredName() + ChatColor.valueOf(arena.getArenaConfig().getString( CFG.MODULES_ANNOUNCEMENTS_COLOR)))); } } "	0	0	0	0	1	0
public void Func1(ISender var1) { if (CommandUtils.isPlayer(var1)) { notifyWhenCached.add(((IPlayer) var1.getSender()).getUuid()); } } 	0	0	0	0	1	0
"@Override public CommandResult Func1() throws ValidationException { ImmutableTask var1 = this.model.getObserveableList().get(index.getValue()); EventsCenter.getInstance().post(new ExpandCollapseTaskEvent(var1)); return new CommandResult(""Command executed""); } "	0	0	0	0	1	0
"@Before public void Func1() throws Exception { sys 		= new Project("""", """", new ArrayList<Subsystem>(), Version.firstVersion(), null, null, 12345, null, null); subsys 		= new Subsystem("""", """", sys, new ArrayList<Subsystem>(), sys, null); subsubsys	= new Subsystem("""", """", subsys, new ArrayList<Subsystem>(), sys, null); subsys2 	= new Subsystem("""", """", sys, new ArrayList<Subsystem>(), sys, null); } "	0	0	0	0	1	0
boolean Func1() { Calendar var1 = Calendar.getInstance(); int var2 = var1.get(Calendar.MONTH); var1.add(Calendar.MONTH, -1); int var3 = var1.get(Calendar.MONTH); return var2 != var3; } 	0	0	0	0	1	0
boolean Func1() { Calendar var1 = Calendar.getInstance(); int var2 = var1.get(Calendar.WEEK_OF_YEAR); var1.add(Calendar.WEEK_OF_YEAR, -1); int var3 = var1.get(Calendar.WEEK_OF_YEAR); return var2 != var3; } 	0	0	0	0	1	0
@Override public boolean Func1(K var1, V var2, ExpiryPolicy var3) { final long var4 = System.nanoTime(); final Future<Boolean> var5 = replaceAsyncInternal(var1, null, var2, var3, false, true, false); try { boolean var6 = toObject(var5.get()); if (statisticsEnabled) { handleStatisticsOnReplace(false, var4, var6); } return var6; } catch (Throwable e) { throw ExceptionUtil.rethrowAllowedTypeFirst(e, CacheException.class); } } 	0	0	1	0	1	0
@WebMethod public List<Employee> Func1() { return (List<Employee>) organization.values(); } 	0	0	1	0	1	0
"private void Func1() { Log.d(TAG, ""Func1""); final Query var1 = mPlaybackManager.getCurrentQuery(); if (var1 != null) { if (var1.isPlayable()) { if (var1.getImage() == null) { String var2 = InfoSystem.get().resolve( var1.getArtist(), false); if (var2 != null) { mCorrespondingRequestIds.put(var2, var1.getCacheKey()); } var2 = InfoSystem.get().resolve(var1.getAlbum()); if (var2 != null) { mCorrespondingRequestIds.put(var2, var1.getCacheKey()); } } TomahawkRunnable var3 = new TomahawkRunnable(TomahawkRunnable.PRIORITY_IS_PLAYBACK) { @Override public void Func2() { if (mMediaSession == null) { Log.e(TAG, ""Func1 failed - mMediaSession == null!""); return; } if (mPlayState == PlaybackStateCompat.STATE_PLAYING && var1.getMediaPlayerClass() != null) { TomahawkMediaPlayer var4 = mMediaPlayers.get(var1.getMediaPlayerClass()); mPlayState = PlaybackStateCompat.STATE_BUFFERING; updateMediaPlayState(); if (var4.prepare(var1, mMediaPlayerCallback) == null) { boolean var5 = NetworkUtils.var5(); if (var5 && var1.getPreferredTrackResult() != null) { var1.blacklistTrackResult( var1.getPreferredTrackResult()); mPlaybackManagerCallback.onCurrentEntryChanged(); } if (!var5 || var1.getPreferredTrackResult() == null) { Log.e(TAG, ""MediaPlayer was unable to prepare the track, jumping to next track""); mMediaSession.getController().getTransportControls() .skipToNext(); } else { Log.d(TAG, ""MediaPlayer blacklisted a result and tries to prepare again""); Func1(); } } else { if (mCurrentMediaPlayer != null) { mCurrentMediaPlayer.release(); } mCurrentMediaPlayer = var4; } } } }; ThreadManager.get().executePlayback(var3); } else { mMediaSession.getController().getTransportControls().skipToNext(); } } } "	0	0	1	1	1	0
"public void Func1(View var1){ EditText var2=(EditText) findViewById(R.id.editTextIP); cw=new connection_worker(this,var2.getText().toString(),""1234""); } "	0	0	0	0	1	0
@Override public boolean Func1(JobConf var1) throws IOException { VersionedStore var2 = new VersionedStore(FileSystem.get(var1), getOutputDirectory()); if (newVersionPath != null) { var2.succeedVersion(newVersionPath); markSuccessfulOutputDir(new Path(newVersionPath), var1); newVersionPath = null; var2.cleanup(getVersionsToKeep()); } return true; } 	0	0	0	0	1	0
private static String Func1(final MavenProject var1) { if (var1.getParent() != null) { return var1.getParent().getBasedir().getAbsolutePath(); } return var1.getBasedir().getAbsolutePath(); } 	0	0	0	0	1	0
public final boolean Func1(final File var1, final String var2) { return !(Strings.isNullOrEmpty(var2) || var1 == null) && new File(var1, var2).isFile() && var2.toLowerCase().endsWith(JPG); } 	0	0	0	0	1	0
public ArrayList<Map.MapDirection> Func1(Location var1){ ArrayList<Map.MapDirection> var2 = new ArrayList<Map.MapDirection>(); Map.MapDirection var3; while(var1 != null){ var3 = getPath(var1); var2.add(var3); var1 = var1.getAdjacent(var3); } return var2; } 	0	0	1	0	1	0
@Override public boolean Func1(int var1, @NonNull KeyEvent var2) { if (BaseActivity.isKeyCodeWorkaroundRequired(var1)) { openOptionsMenu(); return true; } return super.Func1(var1, var2); } 	0	0	0	0	1	0
@Override public boolean Func1(int var1, KeyEvent var2) { return BaseActivity.isKeyCodeWorkaroundRequired(var1) || super.Func1(var1, var2); } 	0	0	0	0	1	0
"@Test public void Func1() throws IOException { String var1 = ""var1""; AuthenticatedUser var2 = createMock(AuthenticatedUser.class); User var3 = createMock(User.class); context.abortWith(EasyMock.capture(capturedResponse)); setExpects(var1, var2, var3, ""wrongUsername""); replay(uriInfo, request, session, context, authenticatedUserService, var2, var3); filter.filter(context); verify(uriInfo, request, session, context, authenticatedUserService, var2, var3); assertEquals(HTTP_AUTHENTICATION_TIMEOUT, capturedResponse.getValue().getStatus()); } "	0	0	0	0	1	0
@Override public void Func1() { eurekaConnCleaner.shutdown(); apacheHttpClient.destroy(); } 	0	0	0	0	1	0
"@Override public void Func1(WorkMessage var1, Channel var2) { System.out.println(""~~~~~~~~Leader - Handle Cluster Size Event""); System.out.println(""Replying to :"" + var1.getHeader().getNodeId()); state.getEmon().broadcastMessage(util.createSizeIsMessage( nodeId, var1.getHeader().getNodeId())); ConcurrentHashMap<Integer, EdgeInfo> var3 = state.getEmon() .getOutboundEdges().getEdgesMap(); for (Integer var4 : var3.keySet()) { EdgeInfo var5 = var3.get(var4); if (var5.isActive() && var5.getChannel() != null) { var5.getChannel().writeAndFlush( util.createGetClusterSizeMessage(nodeId, var4)); } } } "	0	0	0	0	0	1
@Override public int Func1(@Nonnull BasePrioritizedData var1) { if(priority != var1.priority) return priority.ordinal() - var1.priority.ordinal(); return matcher.getClass().getName().Func1(var1.matcher.getClass().getName()); } 	0	0	1	0	1	0
"@Override public StringBuilder Func1(LetClause var1, StringBuilder var2) throws CompilationException { return makeNode(""Let"", var2, var1.getVarExpr().toString(), var1.getBindingExpr()); } "	0	0	0	0	1	0
"public static SubstitutesDataModel Func1(String var1, String var2, Date var3, Date var4, String var5, int var6) throws SubstitutionException { ActivitiDAO var7 = SubstitutionDataHolder.getInstance().getActivitiDAO(); if (var7.selectSubstituteInfo(var1, var6) != null) { log.error(""Substitute for user: "" + var1 + "", already exist. Try to update the var2 info""); throw new SubstitutionException( ""Substitute for user: "" + var1 + "", already exist. Try to update the var2 info""); } else { SubstitutesDataModel var8 = new SubstitutesDataModel(); var8.setUser(var1); var8.setSubstitute(MultitenantUtils.getTenantAwareUsername(var2)); var8.setSubstitutionStart(var3); if (var4 == null) { var4 = new Date(Long.MAX_VALUE); } var8.setSubstitutionEnd(var4); var8.setEnabled(true); //by default enabled var8.setCreated(new Date()); var8.setTenantId(var6); var8.setTaskList(var5); var7.insertSubstitute(var8); return var8; } } "	0	0	0	0	1	0
"@Override public Optional<AgriSeed> Func1(IAgriCrop var1, Random var2) { Objects.requireNonNull(var1, ""You cannot execute a var7 on a null var1!""); Objects.requireNonNull(var2, ""The random passed to a var7 strategy should not be null!""); final List<IAgriCrop> var3 = WorldHelper.getTileNeighbors(var1.getCropWorld(), var1.getCropPos(), IAgriCrop.class); final List<IAgriPlant> var4 = var3.stream() .filter(IAgriCrop::isMature) .map(IAgriCrop::getSeed) .filter(Objects::nonNull) .map(AgriSeed::getPlant) .collect(Collectors.toList()); if (var4.size() < 2) { return Optional.empty(); } final List<IAgriMutation> var5 = AgriApi.getMutationRegistry() .stream() .filter(m -> m.areParentsIn(var4)) .filter(m -> var1.isFertile(m.getChild())) .collect(Collectors.toList()); if (var5.isEmpty()) { return Optional.empty(); } final int var6 = var2.nextInt(var5.size()); final IAgriMutation var7 = var5.get(var6); if (var7.getChance() <= var2.nextDouble()) { return Optional.empty(); } Optional<IAgriStat> var8 = AgriApi.getStatCalculatorRegistry().valueOf(var7).map(c -> c.calculateMutationStats(var7, var3)); return var8 .map(s -> new AgriSeed(var7.getChild(), s)); } "	0	0	0	0	1	0
private FenixServiceException Func1(StudentCurricularPlan var1, ExecutionSemester var2) { final DegreeCurricularPlan var3 = var1.getDegreeCurricularPlan(); Predicate<AcademicEnrolmentPeriod> var4 = null; if (!var1.isInCandidateEnrolmentProcess(var2.getExecutionYear())) { var4 = ep -> ep.isForClasses() || ep.isForShift(); } else { var4 = ep -> ep.getFirstTimeRegistration(); } FenixServiceException var5 = Func1(var4, var3, var2); if (var5 == null) { return null; } for (final DegreeCurricularPlanEquivalencePlan var6 : var3.getTargetEquivalencePlansSet()) { final DegreeCurricularPlan var7 = var6.getDegreeCurricularPlan(); var5 = Func1(var4, var7, var2); if (var5 == null) { return null; } } return var5; } 	0	0	0	0	1	0
"public static void Func1(Map<String, Object> var1) { for (Map.Entry<String, Object> var2 : var1.entrySet()) { String var3 = var2.getKey(); Object var4 = var2.getValue(); System.out.println(""Func1 var3 = "" + var3 + "" var4 = "" + var4); if (var4 instanceof Map) { if (((Map) var4).size() == 1) { Set var5 = ((Map)var4).keySet(); for (Iterator var6 = var5.iterator(); var6.hasNext();) { String var7 = (String)var6.next(); if(""$ref"".equals(var7)) { String var8 = (String)((Map)var4).get(var7); System.out.println(""var8 = "" + var8); Map var9 = handlerPointer(var8); var2.setValue(var9); } } } Func1((Map) var4); } else if (var4 instanceof List) { resolveList((List)var4); } else { continue; } } } "	0	0	0	0	1	0
"public void Func1(ChannelHandlerContext var1) throws Exception { loggerNet.debug(""RLPX protocol activated""); nodeId = myKey.getNodeId(); handshake = new EncryptionHandshake(ECKey.fromNodeId(nodeId).getPubKeyPoint()); Object var2; if (config.eip8()) { AuthInitiateMessageV4 var3 = handshake.createAuthInitiateV4(myKey); initiatePacket = handshake.encryptAuthInitiateV4(var3); var2 = var3; } else { AuthInitiateMessage var3 = handshake.createAuthInitiate(null, myKey); initiatePacket = handshake.encryptAuthMessage(var3); var2 = var3; } final ByteBuf var4 = var1.alloc().buffer(initiatePacket.length); var4.writeBytes(initiatePacket); var1.writeAndFlush(var4).sync(); channel.getNodeStatistics().rlpxAuthMessagesSent.add(); if (loggerNet.isDebugEnabled()) loggerNet.debug(""To: \t{} \tSend: \t{}"", var1.channel().remoteAddress(), var2); } "	0	0	0	0	1	0
"@Test public void Func1() { setLocale(LOCALE_EN); assertThat(coursePageUriLocalizer.localize(""http://courses.helsinki.fi/30250"")).isEqualTo(""http://courses.helsinki.fi/30250""); } "	0	0	0	0	1	0
public long Func1() { if(response == null){ response = responses.get(status).getBytes(); } if(!stream) { long var1 = response.var1; return var1; } else{ return islength; } } 	0	0	0	0	1	0
"public Service Func1(String var1, Service var2, String var3) throws DMCServiceException { try { final int var4 = Integer.parseInt(var1); if (var4 != var2.getId()) { throw new DMCServiceException(DMCError.OtherSQLError, ""var4 "" + var4 + "" does not match "" + var2.getId() + "" as expected""); } connection = DBConnector.connection(); connection.setAutoCommit(false); final int var5 = UserDao.getUserID(var3); String var6 = ""update var9 set ""; var6 += ""organization_id=?, ""; var6 += ""title=?, ""; var6 += ""description=?, ""; var6 += ""release_date=?, ""; var6 += ""service_type=?, ""; var6 += ""project_id=?, ""; var6 += ""from_location=?, ""; var6 += ""type=?, ""; var6 += ""parent=?, ""; var6 += ""published=? ""; var6 += ""is_deleted=? ""; var6 += ""where ""; var6 += ""service_id=?""; final PreparedStatement var7 = DBConnector.prepareStatement(var6); var7.setObject(1, SqlTypeConverterUtility.getInt(var2.getCompanyId()), java.sql.Types.INTEGER); var7.setString(2, var2.getTitle()); var7.setString(3, var2.getDescription()); var7.setObject(4, SqlTypeConverterUtility.getSqlDate(var2.getReleaseDate()), java.sql.Types.DATE); var7.setString(5, var2.getServiceType()); var7.setObject(6, SqlTypeConverterUtility.getInt(var2.getProjectId()), java.sql.Types.INTEGER); var7.setString(7, var2.getFrom()); var7.setString(8, var2.getType()); var7.setString(9, var2.getParent()); var7.setBoolean(10, var2.getPublished()); var7.setBoolean(11, var2.getIsDeleted()); var7.setInt(12, var4); final int var8 = var7.executeUpdate(); if (1 != var8) { throw new Exception(""didn't correctly modify var9 "" + var2.getId()); } final Service var9 = getService(var2.getId(), var3); final String var10 = ""INSERT INTO service_history (service_id, title, date, user_id, link, section, period)"" + "" values (?, ?, ?, ?, ?, ?, ?)""; final PreparedStatement var11 = DBConnector.prepareStatement(var10); final Date var12 = new Date(); var11.setInt(1, var4); var11.setString(2, UserDao.getUserName(var5) + "" updated the var9 on "" + var12.toString()); var11.setObject(3, SqlTypeConverterUtility.getSqlDate(var12), java.sql.Types.DATE); var11.setInt(4, var5); var11.setString(5, """"); var11.setString(6, ""marketplace""); var11.setString(7, var12.toString()); final int var13 = var11.executeUpdate(); if (var13 != 1) throw new DMCServiceException(DMCError.UnableToLogServiceHistory, ""Could not log var9 history!""); connection.commit(); if (Config.IS_TEST == null) { try { SearchQueueImpl.sendFullIndexingMessage(SolrUtils.CORE_GFORGE_SERVICES); ServiceLogger.log(logTag, ""SolR indexing triggered for var9 (update): "" + var4); } catch (SearchException e) { } } return var9; } catch (Exception e) { ServiceLogger.log(logTag, e.getMessage()); if (null != connection) { try { connection.rollback(); } catch (SQLException ex) { throw new DMCServiceException(DMCError.OtherSQLError, ""unable to rollback: "" + ex.getMessage()); } } throw new DMCServiceException(DMCError.OtherSQLError, ""unable to create new var9: "" + e.getMessage()); } finally { if (null != connection) { try { connection.setAutoCommit(true); } catch (Exception ex) { } } } } "	0	0	0	0	0	1
@Override public void Func1() { try { Menu.init(); Frame.getInstance(); AnimationQueue.init(); Repainter.init(); GameState.runGame(); } catch (Exception e) { e.printStackTrace(); } } 	0	0	1	0	0	0
@Override public void Func1() throws SAXException { buffer = new StringBuffer(); } 	0	0	0	0	1	0
"private static void Func1( @SuppressWarnings(""MethodParameterNamingConvention"") String var1, String var2) { log().debug(""Enrichment lookup started""); final Map<String, String> var3 = newHashMap(); final DescriptorSetUtil.IsNotGoogleProto var4 = new DescriptorSetUtil.IsNotGoogleProto(); final Collection<FileDescriptorProto> var5 = DescriptorSetUtil.getProtoFileDescriptors(var2, var4); for (FileDescriptorProto var6 : var5) { final Map<String, String> var7 = new EnrichmentsFinder(var6).findEnrichments(); var3.putAll(var7); } if (var3.isEmpty()) { log().debug(""Enrichment lookup complete. No var7 found.""); return; } log().trace(""Writing the enrichment description to {}/{}"", var1, PROPS_FILE_NAME); final PropertiesWriter var8 = new PropertiesWriter(var1, PROPS_FILE_NAME); var8.write(var3); log().debug(""Enrichment lookup complete""); } "	1	0	1	1	0	0
"private void Func1() { try { final List<Container> var1 = listChildContainers(); var1.forEach(container -> ResourceReaper.instance().registerContainerForCleanup(container.getId(), container.getNames()[0])); ResourceReaper.instance().registerNetworkForCleanup(identifier + ""_default""); dockerClient.listNetworksCmd().exec().forEach(network -> { if (network.getName().contains(identifier)) { ResourceReaper.instance().registerNetworkForCleanup(network.getName()); } }); spawnedContainerIds = var1.stream() .map(Container::getId) .collect(Collectors.toSet()); } catch (DockerException e) { logger().debug(""Failed to stop a service container with exception"", e); } } "	0	0	0	0	1	0
private void Func1() throws IOException { InputStream var1 = mHelperContext.getAssets().open(DATABASE_NAME); String var2 = DATABASE_PATH + DATABASE_NAME; OutputStream var3 = new FileOutputStream(var2); byte[] var4 = new byte[1024]; int var5; while ((var5 = var1.read(var4)) > 0) { var3.write(var4, 0, var5); } var3.flush(); var3.close(); var1.close(); } 	0	0	0	0	1	0
"public static String Func1(Collection<String> var1) throws UnsupportedEncodingException { if (var1 == null || var1.isEmpty()) { return """"; } return URLEncoder.encode(Joiner.on("" "").join(var1), ""UTF-8""); } "	1	0	1	0	1	0
"public void Func1() { Date var1 = new Date(); DefaultHttpHeaders var2 = new DefaultHttpHeaders() .lastModified(var1) .withETag(""asdf""); mockRequest.addHeader(""If-None-Match"", ""asdf""); mockRequest.addHeader(""If-Modified-Since"", new SimpleDateFormat(""EEE, dd MMM yyyy HH:mm:ss zzz"").format(var1)); var2.apply(mockRequest, mockResponse, new Object()); assertEquals(SC_NOT_MODIFIED, mockResponse.getStatus()); } "	0	0	0	0	1	0
public int[] Func1(int var1) { SimpleSingleByteEncoding var2 = getAdditionalEncoding(var1); int[] var3 = new int[var2.getLastChar() - var2.getFirstChar() + 1]; for (int var4 = 0, var5 = var3.length; var4 < var5; var4++) { NamedCharacter var6 = var2.getCharacterForIndex(var2.getFirstChar() + var4); UnencodedCharacter var7 = this.unencodedCharacters.get( new Character(var6.getSingleUnicodeValue())); var3[var4] = var7.getWidth(); } return var3; } 	0	0	1	0	0	0
public void Func1() { bot.button(IDialogConstants.OK_LABEL).click(); } 	0	0	0	0	1	0
"private List<Annotation> Func1(Class<?> var1, Type[] var2, Annotation[][] var3, String var4, int var5) { try { return Arrays.asList(var3[var5]); } catch (Exception e) { Logger.error(String.format(""Exception getting parameter type for method %s, param %s at position %d""), e); return null; } } "	0	0	0	0	1	0
public Object Func1() throws ReflectiveOperationException { return constructor.newInstance(values); } 	0	0	1	0	1	0
"@SuppressWarnings(""unchecked"") @Override public Map<Version, String> Func1() { return Collections.EMPTY_MAP; } "	0	0	1	0	1	0
"public void Func1(ScriptItem var1, boolean var2, Map<String, Object> var3) { ScriptLogger var4 = new ScriptLogger(m_txtResult); ScriptEngine var5 = manager.getEngineByExtension(getFileExtension(var1.getName())); if (var5 == null) { var5 = manager.getEngineByName(DEFAULT_SCRIPT); } SimpleBindings var6 = new SimpleBindings(); var6.put(VAR_PROJECT, Core.getProject()); var6.put(VAR_EDITOR, Core.getEditor()); var6.put(VAR_GLOSSARY, Core.getGlossary()); var6.put(VAR_MAINWINDOW, Core.getMainWindow()); var6.put(VAR_CONSOLE, var4); var6.put(VAR_RESOURCES, var1.getResourceBundle()); if (var3 != null) { var6.putAll(var3); } try { String var7; if (var2) { var7 = var1.getText(); } else if ("""".equals(m_txtScriptEditor.getText().trim())) { var7 = var1.getText(); m_txtScriptEditor.setText(var7); } else { var7 = m_txtScriptEditor.getText(); } if (!var7.endsWith(""\n"")) { var7 += ""\n""; } Object var8 = var5.var8(var7, var6); if (var8 != null) { logResult(OStrings.getString(""SCW_SCRIPT_RESULT"")); logResult(var8.toString()); } } catch (Throwable e) { logResult(OStrings.getString(""SCW_SCRIPT_ERROR"")); logResult(e.getMessage()); } } "	0	0	0	0	1	0
"public void Func1() { mMenu = new Menu((int) getResources().getDimension(R.dimen.slv_item_height), new ColorDrawable(Color.WHITE), true); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width)) .setBackground(new ColorDrawable(Color.RED)) .setText(""One"") .setTextColor(Color.GRAY) .setTextSize((int) getResources().getDimension(R.dimen.txt_size)) .build()); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width)) .setBackground(new ColorDrawable(Color.GREEN)) .setText(""Two"") .setTextColor(Color.BLACK) .setTextSize((int) getResources().getDimension(R.dimen.txt_size)) .build()); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width) + 30) .setBackground(new ColorDrawable(Color.BLUE)) .setText(""Three"") .setDirection(MenuItem.DIRECTION_RIGHT) .setTextColor(Color.BLACK) .setTextSize((int) getResources().getDimension(R.dimen.txt_size)) .build()); mMenu.addItem(new MenuItem.Builder().setWidth((int) getResources().getDimension(R.dimen.slv_item_bg_btn_width_img)) .setBackground(new ColorDrawable(Color.BLACK)) .setDirection(MenuItem.DIRECTION_RIGHT) .setIcon(getResources().getDrawable(R.drawable.ic_launcher)) .build()); } "	0	0	0	0	1	0
private void Func1() { getStyleClass().setAll(DEFAULT_STYLE_CLASS); } 	1	0	0	0	1	0
"@Override public void Func1(BufferedWriter var1) throws IOException { var1.write(""spells="" + arrayToStringSpells(spells) + ""\n""); var1.write(""gold="" + getGold() + ""\n""); } "	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") void Func1() { if (WIP.getAndIncrement(this) == 0) { int var1 = 0; do { if (requested.get() > 0) { Object var2 = buffer.poll(); if (var2 != null) { if (buffer.isCompleted(var2)) { child.onCompleted(); } else { child.onNext((R) var2); var1++; requested.decrementAndGet(); } } } } while (WIP.decrementAndGet(this) > 0); if (var1 > 0) { for (MultiSourceRequestableSubscriber<T, R> var3 : subscribers) { var3.requestUpTo(var1); } } } } "	0	0	0	0	1	0
"public static <R> R Func1(java.var4.Statement var1, ConnectionInfo var2, String var3, String var4, Executable<R> var5) throws SQLException { try { Span var6 = ContextManager.createSpan(""JDBC/Statement/"" + var3); Tags.DB_TYPE.set(var6, ""var4""); Tags.DB_INSTANCE.set(var6, var2.getDatabaseName()); Tags.DB_STATEMENT.set(var6, var4); Tags.COMPONENT.set(var6, var2.getDBType()); Tags.SPAN_LAYER.asDB(var6); if (!StringUtil.isEmpty(var2.getHosts())) { Tags.PEERS.set(var6, var2.getHosts()); } else { Tags.PEER_PORT.set(var6, var2.getPort()); Tags.PEER_HOST.set(var6, var2.getHost()); } return var5.exe(var1, var4); } catch (SQLException e) { Span var6 = ContextManager.activeSpan(); Tags.ERROR.set(var6, true); var6.log(e); throw e; } finally { ContextManager.stopSpan(); } } "	0	0	0	0	1	0
"@Override public List<WorkUnit> Func1(SourceState var1) { try { initialize(var1); EventSubmitter.submit(Optional.of(this.eventSubmitter), EventConstants.FIND_HIVE_TABLES_EVENT); Iterator<HiveDataset> var2 = this.datasetFinder.getDatasetsIterator(); while (var2.hasNext()) { HiveDataset var3 = var2.next(); try (AutoReturnableObject<IMetaStoreClient> client = var3.getClientPool().getClient()) { LongWatermark var4 = new LongWatermark(new DateTime().getMillis()); log.debug(String.format(""Processing dataset: %s"", var3)); if (HiveUtils.isPartitioned(var3.getTable())) { createWorkunitsForPartitionedTable(var3, client, var4); } else { createPartitionForNonPartitionedTable(var3, var4); } } } } catch (IOException e) { throw new RuntimeException(e); } return this.workunits; } "	0	0	1	0	1	0
@Override public void Func1() { defaultIcon.setVisible(true); previewImageContainer.setVisible(false); teamImageLoading.setVisible(false); } 	0	0	0	0	1	0
"@Test public void Func1() throws Exception { final FakeStore var1 = new FakeStore(Collections.singletonMap(""key"", ""value"")); this.store = spy(var1); assertThat(var1.getEntryMap().get(""key""), equalTo(""value"")); when(this.cacheLoader.load(""key"")).thenThrow(ExceptionFactory.newCacheLoaderException(new Exception())); final Ehcache<String, String> var2 = this.getEhcache(this.cacheLoader); assertThat(var2.get(""key""), equalTo(""value"")); verify(this.store).computeIfAbsent(eq(""key""), getAnyFunction()); verify(this.cacheLoader, never()).load(eq(""key"")); verifyZeroInteractions(this.spiedResilienceStrategy); assertThat(var1.getEntryMap().get(""key""), equalTo(""value"")); validateStats(var2, EnumSet.noneOf(CacheOperationOutcomes.GetOutcome.class));    // TODO: Confirm correctness - Issue #196 validateStats(var2, EnumSet.noneOf(CacheOperationOutcomes.CacheLoaderOutcome.class)); } "	0	0	0	0	1	0
"@Override public void Func1(MonitorEvent var1) { sqlTemplate.update(getSql(""insertMonitorEventSql""), var1.getMonitorId(), var1.getNodeId(), var1.getEventTime(), var1.getHostName(), var1.getType(), var1.getValue(), var1.getThreshold(), var1.getSeverityLevel(), var1.isNotified()); } "	0	0	1	0	0	0
"@SuppressWarnings(""unchecked"") @Override public void Func1(final KGraphElement var1) { KLayoutData var2 = var1 instanceof KEdge ? var1.getData(KEdgeLayout.class) : var1.getData(KShapeLayout.class); if (clearLayout) { var2.getProperties().clear(); } MapPropertyHolder var3 = classOptionMap.get(var1.getClass()); MapPropertyHolder var4 = elementOptionMap.get(var1); if (optionFilter != null) { if (var3 != null) { for (Map.Entry<IProperty<?>, Object> var5 : var3.getAllProperties().entrySet()) { if (optionFilter.apply(Pair.of(var1, var5.getKey()))) { var2.setProperty((IProperty<Object>) var5.getKey(), var5.getValue()); } } } if (var4 != null) { for (Map.Entry<IProperty<?>, Object> var5 : var4.getAllProperties().entrySet()) { if (optionFilter.apply(Pair.of(var1, var5.getKey()))) { var2.setProperty((IProperty<Object>) var5.getKey(), var5.getValue()); } } } } else { if (var3 != null) { var2.copyProperties(var3); } if (var4 != null) { var2.copyProperties(var4); } } } "	0	0	0	0	1	0
private boolean Func1(double var1, double var2, Bounds var3) { if (var1 < this.getWidth() && var1 > this.getWidth() - contentPlaceHolder.getBorder().getStrokes().get(0).getWidths().getLeft()) { return true; } return false; } 	0	0	0	0	1	0
"public String Func1(final PlayerProfile var1) { if(var1.getUniqueIdMode() == this) { return var1.getUniqueUserId(); } switch(this) { case OFFLINE: return UUID.nameUUIDFromBytes((""OfflinePlayer:"" + var1.getLastName().toLowerCase()).getBytes()).toString(); case MOJANG: return var1.getUniqueUserId(); default: throw new IllegalStateException(""Invalid uuid mode: "" + toString()); } } "	0	0	0	0	1	0
@Override public void Func1( String var1 ) { super.Func1(var1); List<Arrival> var2 = LaMetroUtil.parseAllArrivals(var1); if (var2 == null) { if (this.trackedArrivals.size() > 0) { predictionState = PredictionState.CACHED; return; } else { predictionState = PredictionState.BAD; return; } } for (Arrival var3 : var2) { var3.setScope(inScope); if (arrivalTracked(var3)) { StopRouteDestinationArrival var4 = null; synchronized (trackedArrivals) { for (StopRouteDestinationArrival var5 : trackedArrivals) { if (var5.getDirection().equals(var3.getDirection()) && var5.getRoute().equals(var3.getRoute()) && stop.equals(var3.getStop())) { var4 = var5; break; } } } if (var4 == null) { synchronized (trackedArrivals) { StopRouteDestinationArrival var6 = new StopRouteDestinationArrival( stop, var3.getRoute(), var3.getDirection()); var6.setScope(inScope); trackedArrivals.add(var6); } } } } for (StopRouteDestinationArrival var4 : trackedArrivals) { var4.updateArrivalTimes(var2); } } 	0	0	1	0	0	0
public static Map<ROIDescriptor, PluginROIDescriptor> Func1() { final Map<ROIDescriptor, PluginROIDescriptor> var1 = new HashMap<ROIDescriptor, PluginROIDescriptor>(); final List<PluginDescriptor> var2 = PluginLoader.getPlugins(PluginROIDescriptor.class); for (PluginDescriptor var3 : var2) { try { final PluginROIDescriptor var4 = (PluginROIDescriptor) PluginLauncher.create(var3); final List<ROIDescriptor> var5 = var4.getDescriptors(); if (var5 != null) { for (ROIDescriptor var6 : var5) var1.put(var6, var4); } } catch (Exception e) { IcyExceptionHandler.showErrorMessage(e, false, true); IcyExceptionHandler.report(var3, IcyExceptionHandler.getErrorMessage(e, true)); } } return var1; } 	0	0	1	0	0	0
"@Test public void Func1() throws DockerCertificateException { StartStrategy var1 = StartStrategy.EAGER; Object var2 = new Object(); MethodDescriptor var3 = mock(MethodDescriptor.class); TestDescriptor var4 = mock(TestDescriptor.class); TestConfigurer var5 = mock(TestConfigurer.class); MockProvider var6 = mock(MockProvider.class); Map<String, Object> var7 = mock(Map.class); Map<String, String> var8 = mock(Map.class); testContext = new DefaultTestContextBuilder() .var1(var1) .var2(var2) .var4(var4) .testMethodDescriptor(var3) .var5(var5) .var6(var6) .var7(var7) .var8(var8) .build(); given(virtualResource.value()).willReturn(""postgres""); given(virtualResource.version()).willReturn(""9.4""); given(testContext.getTestName()).willReturn(""TestClass""); given(testContext.getMethodName()).willReturn(""testMethod""); DefaultDockerClient.Builder var9 = DefaultDockerClient.var9().uri(DEFAULT_DAEMON_URI); VirtualResourceInstance var10 = sut.start(testContext, virtualResource, var9); assertThat(var10).isNotNull(); } "	0	0	0	0	1	0
"private static String Func1(Configure var1, File var2, String var3, boolean var4) { if (var4) { return var1.getWebBaseUrl_Kr() + ""/"" + var2.getParentFile().getParentFile().getName() + ""/drop/"" + var2.getName(); } else { return var1.getWebBaseUrl() + ""/"" + var3 + ""/"" + var2.getParentFile().getParentFile().getName() + ""/drop/"" + var2.getName(); } } "	0	0	0	0	1	0
"@Override public void Func1(List<Container> var1) { if (SystemProperty.getIptablesConfFilePath().isEmpty()) { return; } log.info(""Loading iptables configuration files.""); SSHClient var2; Executor var3; String var4 = """"; for (Container var5 : var1) { if (var5 instanceof ChildContainer) { continue; } var2 = new NodeSSHClient().defaultSSHPort().host(var5.getNode().getHost()) .username(var5.getNode().getUsername()).password(var5.getNode().getPassword()); var3 = new Executor(var2, var5.getNode().getHost()); log.debug(""Loading iptables on node {}."", var3); try { log.trace(""Connecting own var3 to load IPtables""); var3.connect(); final String var6 = ("""".equals(SystemProperty.getWorkingDirectory())) ? var3.executeCommandSilently(""pwd"") : SystemProperty.getWorkingDirectory(); var4 = var6 + File.separator + StringUtils.substringAfterLast(SystemProperty.getIptablesConfFilePath(), File.separator); ((NodeSSHClient) var2).copyFileToRemote(SystemProperty.getIptablesConfFilePath(), var4); final String var7 = var3.executeCommandSilently(""stat "" + var4); if (var7 == null || var7.isEmpty()) { throw new OfflineEnvironmentException(""Configuration file for iptables"" + "" doesn't exists on node: "" + var5.getNode().getHost() + ""."", new FileNotFoundException(""File "" + SystemProperty.getIptablesConfFilePath() + "" doesn't exists."")); } log.debug(""Saving default iptables configuration on node {}."", var3); var3.executeCommand(""sudo iptables-save > "" + SAVED_IPTABLES); var3.executeCommand(""sudo iptables-restore "" + SystemProperty.getIptablesConfFilePath()); log.debug(""Iptables successfully configured on node {}."", var3); } catch (Exception e) { throw new OfflineEnvironmentException(e); } } log.info(""IPTables configuration files successfully loaded on all nodes! Environment configured according to {} file."" , var4); } "	0	0	0	0	1	0
private static void Func1(HasAttributes var1, HasAttributes var2) { for(String var3 : var1.getAttributeKeys()) var2.addAttribute(var3, var1.getAttribute(var3)); } 	0	0	1	1	0	0
public static synchronized void Func1(String var1, RouteHandler var2){ RouteMatcherBuilder.buildHandler(var1, var2, HttpMethod.AFTER); } 	0	0	0	0	1	0
@Override public void Func1(PacketGroupPermissions var1, EntityPlayer var2) { this.group.setPermissions(this.permissions); } 	0	0	0	0	1	0
"@SuppressWarnings(""unused"") public void Func1(Notification var1) { Log.i(""Database:"", ""Alarm "" + var1.getName() + "" inserted""); } "	0	0	0	0	1	0
public void Func1(){ List<BroadcastReceiver> var1 = ManifestParser.findBroadcastReceiver(getContext()); Assertions.assertThat(var1).isNotEmpty(); } 	0	0	0	0	1	0
"@Option @LongSwitch(""httpPort"") @ShortSwitch(""p"") @SingleArgument public void Func1(String var1) { this.httpPort = StringUtils.isEmpty(var1) ? null : Integer.parseInt(var1); } "	1	0	0	0	1	0
"@Override protected ArrayList<String> Func1(Void... var1) { String var2 = childDetails.entityId(); String var3 = Utils.getValue(childDetails.getColumnmaps(), ""relational_id"", false); if (!TextUtils.isEmpty(var3) && !TextUtils.isEmpty(var2)) { List<CommonPersonObject> var4 = getOpenSRPContext().commonrepository(PathConstants.CHILD_TABLE_NAME) .findByRelational_IDs(var3); if (var4 != null) { ArrayList<String> var5 = new ArrayList<>(); for (CommonPersonObject var6 : var4) { if (!var2.equals(var6.getCaseId())) { var5.add(var6.getCaseId()); } } return var5; } } return null; } "	0	0	0	0	1	0
"public void Func1() { User var1 = identityService.createUserQuery().userLastName(""The Crouch"").singleResult(); assertNotNull(var1); var1 = identityService.createUserQuery().userFirstNameLike(""non-existing"").singleResult(); assertNull(var1); } "	0	0	1	0	1	0
"public static void Func1(String[] var1) { System.out.println(""-->""); KnowledgeBaseServiceClient var2 = new KnowledgeBaseServiceClient(); try { var2.init(""localhost"", 8585); System.out.println(""It has been properly initialized!""); System.out.println(""Related--------------------------------------""); List<String> var3 = Arrays.asList(""cat"", ""houses"", ""dogs""); System.out.println(""This are the related "" + var2.getRelated(var3,""hypernymy"")); System.out.println(""Stem--------------------------------------""); System.out.println(""These are  the stemmed "" + var2.stem(var3)); var2.close(); } catch (Exception e) { e.printStackTrace(); } System.out.println(""<--""); } "	0	0	0	0	1	0
"private void Func1(final long var1) { long var2 = System.currentTimeMillis(); final long var3 = var1 + MILLI_TEN_MINUTES; LOGD(TAG, ""Considering notifying for time interval.""); LOGD(TAG, ""    Interval start: "" + var1 + ""="" + (new Date(var1)).toString()); LOGD(TAG, ""    Interval end: "" + var3 + ""="" + (new Date(var3)).toString()); LOGD(TAG, ""    Current time is: "" + var2 + ""="" + (new Date(var2)).toString()); LOGD(TAG, ""Looking for sessions in interval "" + var1 + "" - "" + var3); List<ScheduleSlot> var4 = AgendaRepository.getInstance().getScheduleSlots(); ScheduleSlot var5 = null; for (ScheduleSlot var6 : var4) { if (var6.startDate == var1) { Log.d(TAG, ""schedule to start: "" + var6.toString()); if (SessionSelector.getInstance().getSessionsSelected().contains(String.valueOf(var6.sessionId))) { Log.d(TAG, ""starred schedule slot:"" + var6.sessionId); var5 = var6; } } } Session var7 = AgendaRepository.getInstance().getSession(var5.sessionId); final String var8 = DateUtils.formatDateRange(this, new Formatter(getResources().getConfiguration().locale), var5.startDate, var5.endDate, DateUtils.FORMAT_SHOW_WEEKDAY | DateUtils.FORMAT_ABBREV_WEEKDAY | DateUtils.FORMAT_SHOW_TIME, null).toString(); Intent var9 = new Intent(this, MainActivity.class); var9.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK); Intent var10 = new Intent(this, MainActivity.class); PendingIntent var11 = PendingIntent.getActivity( this, 0, var10, PendingIntent.FLAG_UPDATE_CURRENT ); NotificationCompat.Builder var12 = new NotificationCompat.Builder(this) .setContentTitle(var7.title) .setContentText(var8) .setColor(getResources().getColor(R.color.colorPrimary)) .setDefaults(Notification.DEFAULT_SOUND | Notification.DEFAULT_VIBRATE) .setLights( SessionAlarmService.NOTIFICATION_ARGB_COLOR, SessionAlarmService.NOTIFICATION_LED_ON_MS, SessionAlarmService.NOTIFICATION_LED_OFF_MS) .setSmallIcon(R.drawable.ic_event_note_black_24dp) .setContentIntent(var11) .setPriority(Notification.PRIORITY_MAX) .setAutoCancel(true); NotificationManager var13 = (NotificationManager) getSystemService( Context.NOTIFICATION_SERVICE); LOGD(TAG, ""Now showing notification.""); var13.notify(NOTIFICATION_ID, var12.build()); } "	0	0	1	0	0	0
private void Func1(PubtatorEntity var1) { if (entities == null) entities = new ArrayList<>(); entities.add(var1); } 	0	0	1	0	1	0
"@Test public void Func1() throws Exception { RuleDTO var1 = new RuleDTO(); var1.setAccountId(""4567""); when(ruleEntityService.update(any(RuleDTO.class), anyLong())).thenThrow(new NotFoundException(""No such ID"")); ObjectMapper var2 = new ObjectMapper(); String var3 = var2.writeValueAsString(var1); ResultActions var4 = mockMvc.perform(put(""/whitelisting-rules/2"").contentType(APPLICATION_JSON).content(var3)); var4.andExpect(content().string(""No such ID"")); verify(ruleEntityService).update(any(RuleDTO.class), anyLong()); verify(teamOperationsMock).getTeamsByUser(anyString()); verify(ruleControllerPropertiesMock).getAllowedTeams(); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { when(ruleControllerPropertiesMock.getAllowedTeams()).thenReturn(newArrayList(""WrongTeam"", ""OtherTeam"")); when(ruleEntityService.findAll()).thenReturn(newArrayList(ruleEntity)); ResultActions var1 = mockMvc.perform(get(""/whitelisting-rules/"")).andExpect(status().is4xxClientError()); var1.andExpect(content().string(""You don't have the permission to use this API"")); verify(teamOperationsMock).getTeamsByUser(anyString()); verify(ruleControllerPropertiesMock).getAllowedTeams(); } "	0	0	0	0	1	0
private PollingState<T> Func1(CloudError var1) { this.var1 = var1; return this; } 	0	0	1	1	0	0
"public void Func1(EthereumListener.SyncState var1) { logger.info(""Initializing SyncManager regular sync.""); this.var1 = var1; syncQueue = new SyncQueueImpl(blockchain); super.init(syncQueue, pool); Runnable var2 = new Runnable(){ @Override public void Func2() { produceQueue(); } }; syncQueueThread = new Thread (var2, ""SyncQueueThread""); syncQueueThread.start(); } "	0	0	1	1	0	0
"@Override public void Func1(SystemSubscription var1) { String var2 = var1.getLanguage().getLocale().getLanguage(); final Context var3 = new Context(var1.getLanguage().getLocale()); var3.setVariable(""eMail"", var1.getEmail()); var3.setVariable(""language"", var1.getLanguage().getLocale()); var3.setVariable(""subscriptionKey"", var1.getSubscriptionKey()); var3.setVariable(""subscriptionDate"", new Date()); var3.setVariable(""systems"", var1.getSystems()); var3.setVariable(""link"", baseUrl + ""/#/systems-subscribe/"" + var1.getSubscriptionKey()); final String var4 = this.templateEngine.process(""system-subscription-new-"" + var2, var3); final String var5 = messageSource.getMessage(SUBJECT_NEW, null, var1.getLanguage().getLocale()); defaultMailSenderService.sendSilently(sender, var5, var4, false, true, var1.getEmail()); } "	0	0	0	0	1	0
"@Override public void Func1(ButtonType var1) { if (var1.toString() == ""YES"") { uploadDataUI.cancelUpload(); clearTabularView(); if (chatHandler != null) { chatHandler.logout(username, true); handleChatMain(); } SessionHandler.logout(); getApplication().close(); UserActivityLog var2 = new UserActivityLog(username, UserActivityLog.ACTIVITY_TYPE.LOG_OUT.toString(), null); FacadeFactory.getFacade().store(var2); } } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { ReadXtf var1 = new ReadXtf(parceldump, dprdump); ClassLoader var2 = getClass().getClassLoader(); var1.readFile(var2.getResource(""SO0200002407_4003_20150807.xtf"").getPath()); int var3 = parceldump.getAddedArea(90154,748); int var4 = parceldump.getNumberOfNewParcels(); int var5 = parceldump.getNumberOfOldParcels(); List<Integer> var6 = parceldump.getNewParcelNumbers(); List<Integer> var7 = parceldump.getOldParcelNumbers(); int var8 = parceldump.getRestAreaOfParcel(751); int var9 = parceldump.getNewArea(751); int var10 = parceldump.getRoundingDifference(753); assertTrue(var3 ==24); assertTrue(var4 == 14); assertTrue(var5 == 14); List<Integer> var11 = Arrays.asList(748,749,750,751,753,755,756,757,758,1303,1799,2097,2098,90154); assertTrue(var6.containsAll(var11) && var6.size()==var11.size()); assertTrue(var7.containsAll(var11) && var7.size()==var11.size()); assertTrue(var8 == 1157); assertTrue(var9 == 1176); assertTrue(var10 == -1); } "	1	0	1	1	1	0
"public void Func1(View var1) { mAppManager.getUser().setRole(Role.DJ); EditText var2 = (EditText) findViewById(R.id.event_field); EditText var3 = (EditText) findViewById(R.id.password_field); CheckBox var4 = (CheckBox) findViewById(R.id.password_protected_checkbox); CheckBox var5 = (CheckBox) findViewById(R.id.allow_feedback_checkbox); CheckBox var6 = (CheckBox) findViewById(R.id.restrict_nearby_checkbox); String var7 = var2.getText().toString(); String var8 = var3.getText().toString(); boolean var9 = var4.isChecked(); boolean var10 = var5.isChecked(); if (var8.equals("""") && var9) { var3.setError(""Please enter a var8""); } else if (var7.equals("""")) { var2.setError(""Please enter an event var7""); } else { var3.setError(null); var2.setError(null); var2.setText(""""); var3.setText(""""); var4.setChecked(false); var3.setText(""""); var5.setChecked(false); mAppManager.createEvent(new Event(var7, mAppManager.getUser().getId(), var8, var10)); Intent var11 = new Intent(this, DjActivity.class); startActivity(var11); } } "	0	0	0	0	1	0
public boolean Func1 (LocalDateTime var1) { return currentApp.getCurrentTimeline().getStart().compareTo(var1) >= 0; } 	0	0	0	0	1	0
public boolean Func1 (LocalDateTime var1) { return currentApp.getCurrentTimeline().getEnd().compareTo(var1) >= 0; } 	0	0	0	0	1	0
private long[] Func1(long var1, long var2) { ContentValues var3 = new ContentValues(); int var4 = fetchTaskListIds()[0]; var3.put(Tasks.LIST_ID, var4); var3.put(Tasks.DTSTART, var1); var3.put(Tasks.DUE, var2); var3.put(Tasks.TZ, TimeZone.getDefault().getID()); resolve.insert(Tasks.CONTENT_URI, var3); // insert task return new long[] { var1, var2 }; } 	0	0	0	0	1	0
"@Override public void Func1(RegisterContext var1) { ST var2 = getTemplateFor(""register""); var2.add(""source"", ((StatementContext)var1.getParent()).source); var2.add(""path"", var1.MODULE().getText()); putCode(var1, var2); } "	0	0	0	0	1	0
private void Func1(@Nullable String var1, @Nullable String var2) { if (var1 != null && var2 != null) { String var3 = getString(R.string.un_staring, var1); RestProvider.getRepoService() .unstarRepo(var2, var1) .doOnSubscribe(() -> showNotification(var3)) .subscribeOn(Schedulers.io()) .subscribe(response -> { }, throwable -> hideNotification(var3), () -> hideNotification(var3)); } } 	0	0	0	0	1	0
private String Func1(Multimap<String, String> var1) { final ImmutableList.Builder<String> var2 = ImmutableList.builder(); for (Map.Entry<String, Collection<String>> var3 : new TreeMap<>(var1.asMap()).entrySet()) { for (String var4 : var3.getValue()) { var2.add(ESCAPER.escape(var3.getKey()) + '=' + ESCAPER.escape(var4)); } } return AMPERSAND_JOINER.join(var2.build()); } 	0	0	0	0	1	0
"@Test public void Func1() throws Exception { start(new String[]{""--spring.profiles.active=test""}, true); } "	1	0	1	0	0	0
"@OnClick(R.var9.Func1) public void Func1() { ContentResolver var1 = getContentResolver(); Uri var2 = android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI; Cursor var3 = var1.query(var2, null, null, null, null); ArrayList<Song> var4 = new ArrayList(); if (var3 != null && var3.moveToFirst()) { int var5 = var3.getColumnIndex( MediaStore.Audio.Media.TITLE); int var6 = var3.getColumnIndex( MediaStore.Audio.Media._ID); int var7 = var3.getColumnIndex( MediaStore.Audio.Media.ARTIST); int var8 = var3.getColumnIndex( MediaStore.Audio.Media.ALBUM); do { long var9 = var3.getLong(var6); String var10 = var3.getString(var5); String var11 = var3.getString(var7); String var12 = var3.getString(var8); String var13 = """"; var4.add(SongManager.getDefault().getOrCreate(var9, var10, var11, var12, var13)); } while (var3.moveToNext()); } Log.d(TAG, ""Sending events""); EventBus.getDefault().postSticky(var4); Intent var14 = new Intent(this, ListActivity.class); startActivity(var14); } "	0	0	0	1	1	0
public static void Func1(String[] var1) { launchClientGUI(null); } 	1	0	0	0	1	0
public long Func1() throws IOException { return channelPosition; } 	0	0	1	0	0	0
"private void Func1(ByteBuffer var1, RecordHeader var2) throws IOException { Checksum var3 = new CRC32(); var3.update(currentBlock.array(), currentBlock.position(), var2.getSize()); if ((int) var3.getValue() != var2.getChecksum()) { throw new RuntimeException(""invalid checksum of record""); } var1.put(currentBlock.array(), currentBlock.position(), var2.getSize()); currentBlock.position(currentBlock.position() + var2.getSize()); } "	0	0	1	0	0	0
"protected User Func1(ResultSet var1) throws SQLException { User var2 = new User(); var2.setUserId(var1.getString(""user_id"")); var2.setPassword(var1.getString(""password"")); var2.setRole(var1.getInt(""role"")); return var2; } "	0	0	1	0	1	0
@Override protected void Func1() { super.Func1(); if (adapter.getCount() == 0) this.progressBar.show(); } 	0	0	1	0	1	0
"@Override protected void Func1(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException { logger.debug(""...Func1 ProjectEditServlet""); try { Project var3 = new Project(); ProjectDao var4 = new ProjectDao(); String var5 = CharacterUtil.removeNull(var1.getParameter(""var5"")); var3.setProjId(var5); List<Project> var6 = var4.getProjectNormal(var3, 0, 0); PlanDao var7 = new PlanDao(); var1.setAttribute(""planList"", var7.getPlan(new Plan(), 0, 0)); ProjectTypeDao var8 = new ProjectTypeDao(); int var9 = var8.getCountProjectType(""""); var1.setAttribute(""projectTypeList"", var8.getProjectTypeAll(var9, 0,"""")); BudgetPlanDao var10 = new BudgetPlanDao(); var1.setAttribute(""budgetPlanList"", var10.getBudgetPlan(new BudgetPlan(), 0, 0)); var1.setAttribute(""planList"", var7.getPlan(new Plan(), 0, 0)); if(!var6.isEmpty()){ var1.setAttribute(""proj_id"", var6.get(0).getProjId()); var1.setAttribute(""proj_name"",var6.get(0).getProjName()); var1.setAttribute(""proj_details"",var6.get(0).getProjDetail()); var1.setAttribute(""proj_status"",var6.get(0).getProjStatus()); var1.setAttribute(""plan_id"",var6.get(0).getPlanId()); var1.setAttribute(""budp_id"",var6.get(0).getBudpId()); var1.setAttribute(""account"",var6.get(0).getAccountCode()); var1.setAttribute(""details"",var6.get(0).getProjDetails()); } ProjectWorkingDao var11 = new  ProjectWorkingDao(); ProjectWorking var12 = new ProjectWorking(); var12.setProjId(var5); List<ProjectWorking> var13 = var11.getProjectWorking(var12, 0, 0); var1.setAttribute(""var13"",var13); RequestDispatcher var14 = var1.getRequestDispatcher(""/jsp/project/project-form.jsp""); var14.forward(var1, var2); } catch (Exception e) { logger.error(""ProjectEditServlet Error : ""+e.getMessage()); } } "	0	0	0	0	0	1
@Test public void Func1(){ final int var1 = 10000; List<Integer> var2 = new ArrayList<Integer>(var1); for(Integer var3=0;var3<var1;var3++){ var2.add(var3); var2.add(var3); } Collections.shuffle(var2); Iterator<Integer> var4 = Pump.sort(var2.iterator(),true, var1/20, Fun.COMPARATOR, Serializer.INTEGER,null); int var5=0; while(var4.hasNext()){ Object var6 = var4.next(); assertEquals(var5++, var6); } assertEquals(var1,var5); } 	0	0	0	0	1	0
"@Override public void Func1(Context var1, Notebook var2, SafeHtmlBuilder var3) { if (var2 == null) { return; } var3.appendHtmlConstant(""<div>""); var3.appendHtmlConstant(""<div style=\""margin: 5px ;margin: auto ;\"">""); if(var2.getUserId() != Homepage.getCurrentUser().getId() && var2.getId() != 0 && var2.getId() != -1){ var3.appendHtmlConstant(""<img src='Images/person_share.png'/ width=\""10\"" height=\""10\"">""); }else if(var2.getTitle() == """" && var2.getId() == 0){ var3.appendHtmlConstant(""<img src='Images/button_add.png'/ width=\""30\"" height=\""30\"">""); } var3.appendEscaped("" ""+ var2.getTitle()); var3.appendHtmlConstant(""</div>""); var3.appendHtmlConstant(""</div>""); } "	0	0	0	0	1	0
"@Override public void Func1(final RecyclerView.ViewHolder var1, int var2) { if (var1 instanceof ProgressViewHolder) return; if (var1 instanceof ErrorViewHolder) { ((ErrorViewHolder)var1).button.setOnClickListener(v -> { isShowError = false; notifyItemChanged(getItemCount() - 1); onLoadMoreListener.onLoadMore(); }); return; } ItemViewHolder var3 = (ItemViewHolder) var1; var3.item = data.items.get(var2); int var4 = var3.item.source_id; if (var4 > 0) { var3.user = findUsersByItem(var4); } else { var3.group = findGroupByItem(var4); } assert var3.user != null; assert var3.group != null; Glide.with(context.getApplicationContext()) .load(var4 > 0 ? var3.user.photo_100 : var3.group.photo_100) .asBitmap() .centerCrop() .into(new BitmapImageViewTarget(var3.headImage) { @Override protected void Func2(Bitmap var5) { RoundedBitmapDrawable var6 = RoundedBitmapDrawableFactory .create(context.getResources(), var5); var6.setCircular(true); var3.headImage.setImageDrawable(var6); } }); var3.owner.setText(var4 > 0 ? var3.user.first_name + "" "" + var3.user.last_name : var3.group.name); var3.date.setText(formatDate(var3.item.date * 1000, context)); var3.ownerLayout.setOnClickListener(view -> { Toast.makeText(context, ""clickOnHeader"", Toast.LENGTH_SHORT).show(); }); var3.popupButton.setOnClickListener(view -> showPopupMenu(var3.item, view)); var3.text.setExpanded(expandedPositions.contains(var2)); var3.text.setText(var3.item.text, var2); var3.text.setOnTextClickListener(v -> onItemClick(v, var3)); var3.text.setOnExpandClickListener(pos -> expandedPositions.add(pos)); List<VKAttachments.VKApiAttachment> var7 = new ArrayList<>(); for (VKAttachments.VKApiAttachment var8 : var3.item.attachments) { if (var8.getType().equals(""photo"") || var8.getType().equals(""video"")) { var7.add(var8); } } var3.images.setImages(var7); var3.v.setOnClickListener(v -> onItemClick(v, var3)); } "	0	0	1	0	0	0
"@Before public void Func1() throws IOException { this.tokenizer = new MockTokenizer(); this.tokenizer.setReader(new StringReader(""和平 重量 and 中国 中華人民共和國 凪のあすから"")); } "	0	0	0	0	1	0
"public Result Func1(@Param( ""var1"" ) String var1, @Param( ""var2"" ) String var2, Context var3, FlashScope var4 ) { User var5 = identityManagerService.authenticateUser(var1, var2); if (var5 != null) { var3.setAttribute( SecurityFilter.USER_TOKEN, var5.getUserToken().getFullToken() ); return Results.redirect(""/""); } else { var4.error(""Failed to authorize.""); return Results.redirect(""/login""); } } "	0	0	0	0	1	0
"private String Func1(Environment var1, String var2) throws DataSourceException { PersistenceNetwork var3 = var1.getEnv(GlobalEnv.class).GetPersistenceNetwork(); AccessToken var4 = null; String var5 = var3.get(new String[]{""oauth"", getFormattedClientId(var2), ""accessToken""}); if (var5 != null) { String[] var6 = unformatValue(var5).split("","", 2); var4 = new AccessToken(var6[1], new Date(Long.parseLong(var6[0]))); } if (var4 == null) { return null; } if (var4.getExpiry().before(new Date())) { return var4.Func1(); } else { return null; } } "	0	0	1	0	1	0
"private static String Func1(String var1) { return var1.replaceAll(""[^a-zA-Z_\\.]"", """"); } "	0	0	0	1	0	0
"private void Func1(int var1, int var2, String var3) { if(parent == null){ return; } if(getActivity() != null){ getLoaderManager().destroyLoader(Constants.THREAD_INFO_LOADER_ID); getLoaderManager().destroyLoader(Constants.POST_LOADER_ID); } setPage(var2); setThreadId(var1); mUserId = 0; mPostByUsername = null; bodyHtml = """"; mLastPage = 1; if(var3 != null){ mPostJump = var3; }else{ mPostJump = """"; } updatePageBar(); updateProbationBar(); if(getActivity() != null){ if(mThreadView != null){ mThreadView.loadUrl(""javascript:loadpagehtml()""); } refreshInfo(); syncThread(); } } "	0	0	1	0	1	0
@EventHandler(priority = EventPriority.NORMAL) public void Func1(PlayerJoinEvent var1) { Player var2 = var1.getPlayer(); DPlayer var3 = DPlayer.getByPlayer(var2); if (var3 != null) { DGroup var4 = DGroup.getByPlayer(var3.getPlayer()); if (var4 != null) { var4.getPlayers().remove(var3.getPlayer()); var4.getPlayers().add(var2); } var3.setPlayer(var2); var3.setOfflineTime(0); } if ( !plugin.getMainConfig().isTutorialActivated()) { return; } if (DPlayer.getByPlayer(var2) != null) { return; } if (plugin.getPermissionProvider() == null) { return; } if ((plugin.getMainConfig().getTutorialDungeon() == null || plugin.getMainConfig().getTutorialStartGroup() == null || plugin.getMainConfig().getTutorialEndGroup() == null)) { return; } for (String var5 : plugin.getPermissionProvider().getPlayerGroups(var2)) { if ( !plugin.getMainConfig().getTutorialStartGroup().equalsIgnoreCase(var5)) { continue; } DGroup var4 = new DGroup(var2, plugin.getMainConfig().getTutorialDungeon(), false); if (var4.getGameWorld() == null) { var4.setGameWorld(GameWorld.load(DGroup.getByPlayer(var2).getMapName())); var4.getGameWorld().setTutorial(true); } if (var4.getGameWorld() == null) { MessageUtil.sendMessage(var2, dMessages.getMessage(Messages.ERROR_TUTORIAL_NOT_EXIST)); continue; } if (var4.getGameWorld().getLocLobby() != null) { new DPlayer(var2, var4.getGameWorld().getWorld(), var4.getGameWorld().getLocLobby(), false); } } } 	0	0	0	0	1	0
private boolean Func1() { if (avg != null) { return true; } int var1 = backend.getWithDefault(Gaussian.TOTAL, 0); if (var1 != 0) { double[] var2 = (double[]) backend.get(Gaussian.SUM); avg = new double[var2.length]; for (int var3 = 0; var3 < var2.length; var3++) { avg[var3] = var2[var3] / var1; } return true; } else { return false; } } 	0	0	0	0	1	0
public DateMidnight Func1() { if (this.startDate == null) { return null; } return new DateTime(this.startDate).toDateMidnight(); } 	0	0	0	1	0	0
"protected void Func1(final String var1) throws InvalidUriException { try { final int var2 = var1.lastIndexOf(""?""); final boolean var3 = var2 != -1; final String var4 = var3 ? var1.substring(var2 + 1) : null; final URI var5 = new URI(var3 ? var1.substring(0, var2) : var1); httpClient.protocol = var5.getScheme(); httpClient.host = var5.getHost(); httpClient.port = var5.getPort() != -1 ? var5.getPort() : null; httpClient.path = var5.getPath(); parseQuery(var4); if (!var5.getScheme().toLowerCase().equals(""http"") && !var5.getScheme().toLowerCase().equals(""https"")) { throw new InvalidUriException(var1); } } catch (final Throwable t) { throw new InvalidUriException(t); } } "	0	0	1	0	1	0
public static int Func1(int var1) { int var2 = var1 + DEFAULT_MANAGEMENTPORT_OFFSET_FROM_TSAPORT; return ((var2 <= MAX_PORTNUMBER) ? var2 : (var2 % MAX_PORTNUMBER) + MIN_PORTNUMBER); } 	0	0	0	0	1	0
@NotNull @Override public TextAttributesKey[] Func1(IElementType var1) { if (ValaLexer.KEYWORDS.contains(var1)) return pack(KEYWORD); if (var1 == ValaTypes.STRING || var1 == ValaTypes.VERBATIM_STRING_LITERAL) return pack(STRING); if (var1 == ValaTypes.INTEGER_LITERAL || var1 == ValaTypes.REAL_LITERAL) return pack(NUMBER); if (var1 == ValaTypes.LINE_COMMENT) return pack(LINE_COMMENT); if (var1 == ValaTypes.BLOCK_COMMENT) return pack(BLOCK_COMMENT); return EMPTY; } 	0	0	0	0	1	0
"public CompletionStage<Result> Func1() { HashMap<String, StatusDevice> var1 = StatusControladorFisico.ultimoStatusDosControladores(); HashMap<String, Boolean> var2 = StatusConexaoControlador.ultimoStatusDosControladores(); List<AlarmesFalhasControlador> var3 = AlarmesFalhasControlador.ultimosAlarmesFalhasControladores(null); List<HashMap> var4 = TrocaDePlanoControlador.ultimoStatusPlanoPorAnel(); ObjectNode var5 = JsonNodeFactory.instance.objectNode(); var5.set(""var1"", Json.toJson(var1)); var5.set(""var2"", Json.toJson(var2)); var5.set(""var3"", errosToJson(var3)); var5.set(""statusPlanos"", Json.toJson(var4)); return CompletableFuture.completedFuture(ok(Json.toJson(var5))); } "	1	0	1	1	1	0
@Override public boolean Func1() { return tempChildren.size() > 0; } 	0	0	0	0	1	0
"public static NBTTagList Func1(EntityPlayer var1) { Map<Byte, ItemStack[]> var2 = MAP.get(var1.getCommandSenderName()); NBTTagList var3 = new NBTTagList(); for (Entry<Byte, ItemStack[]> var4 : var2.entrySet()) { NBTTagCompound var5 = new NBTTagCompound(); var5.setByte(""color"", var4.getKey()); NBTTagList var6 = new NBTTagList(); ItemStack[] var7 = var4.getValue(); for (int var8 = 0; var8 < var7.length; var8++) { ItemStack var9 = var7[var8]; if (var9 != null) { NBTTagCompound var10 = new NBTTagCompound(); var10.setByte(""index"", (byte) var8); var9.writeToNBT(var10); var6.appendTag(var10); } } var5.setTag(""var7"", var6); var3.appendTag(var5); } return var3; } "	0	0	0	0	1	0
@Override public void Func1(Map<? extends N, ? extends V> var1) { innerMap.Func1(var1); } 	0	0	0	0	1	0
"@Test public void Func1() { CompilationUnit var1 = JavaParser.parse(""class X{}""); CompilationUnit var2 = JavaParser.parse(""class X{}""); Map<CompilationUnit, Integer> var3 = new VisitorMap<>(new HashMap<>(), new ObjectIdentityHashCodeVisitor(), new ObjectIdentityEqualsVisitor()); var3.put(var1, 1); var3.put(var2, 2); assertEquals(2, var3.size()); } "	1	0	1	1	1	0
@Override public boolean Func1(Component var1, ComponentRenderPass var2) { return var1 instanceof AreaVertex || var1 instanceof EdgeSplit && var2 instanceof AreaVertexPass && color.equals(((AreaVertexPass) var2).getColor()) && pointsize == ((AreaVertexPass) var2).getPointSize(); } 	0	0	1	1	0	0
"private void Func1() { if (classpathThemesFolder == null) classpathThemesFolder = ""/"" + DEFAULT_THEMES_FOLDER; if (themesFolder == null) themesFolder = DEFAULT_THEMES_FOLDER; themesFolder = Path.ensureTrailingSeparator(themesFolder); String[] var1 = parseLayerNames(themeLayerNames); if (var1 == null) { TemplateSet var2 = new TemplateSet(classpathThemesFolder, themesFolder, fileExtension, cacheMins); if (!renderErrs) var2.signalFailureWithNull(); themeLayers.add(var2); } else { for (int var3=0; var3<var1.length; var3++) { TemplateSet var4 = new TemplateSet(classpathThemesFolder, themesFolder + var1[var3], fileExtension, cacheMins); var4.setLayerName(var1[var3]); var4.signalFailureWithNull(); themeLayers.add(var4); } } } "	0	0	0	0	1	0
"@Override public String Func1() { return ""id: "" + getId() + "" target: "" + getTarget() + "" type_of_receiver: "" + getTypeOfReceiver() + "" template id: "" + getTemplateId() + "" locale: "" + getLocale().getLanguage(); } "	0	0	1	0	1	0
"private String Func1(Iterator<String> var1, boolean var2, Map<String, Object> var3) throws NoSuchAlgorithmException { String var4 = """"; while (var1.hasNext()) { Object var5 = var3.get(var1.next()); if (var5 != null) { var4 = (var2) ? getHashedClaimValue(var3.get(var1.next()).toString()) : var3.get(var1.next()).toString(); } } return var4; } "	0	0	0	0	0	1
"private SimpleFeatureCollection Func1(final String var1) throws IOException { Parser var2 = new Parser(GML_32_PARSER); var2.setStrict(false); var2.setRootElementType(new QName(""http://www.opengis.net/wfs/2.0"", ""FeatureCollection"")); try { final Object var3 = var2.parse(new StringReader(var1)); if (var3 != null && var3 instanceof SimpleFeatureCollection) { return (SimpleFeatureCollection) var3; } else { throw new RuntimeException(""unable to parse gml: \n\n"" + var1); } } catch (SAXException e) { throw ExceptionUtils.getRuntimeException(e); } catch (ParserConfigurationException e) { throw ExceptionUtils.getRuntimeException(e); } } "	0	0	0	0	1	0
"public static void Func1(String var1) { FMLLog.info(""[LibrarianLib ASM] %s"", var1); } "	0	0	0	0	1	0
public static void Func1(String[] var1) { GameEngine var2 = new GameEngine(); var2.run(); } 	0	0	0	0	1	0
@Override public void Func1(Context var1, AttributeSet var2, Bundle var3) { super.Func1(var1, var2, var3); TypedArray var4 = var1.getTheme().obtainStyledAttributes( var2, R.styleable.ToolboxFragment, 0, 0); try { mScrollable = var4.getBoolean(R.styleable.WorkspaceFragment_scrollable, DEFAULT_SCROLLABLE); } finally { var4.recycle(); } Bundle var5 = getArguments(); if (var5 == null) { setArguments(var5 = new Bundle()); } var5.putBoolean(ARG_SCROLLABLE, mScrollable); } 	0	0	1	0	0	0
"@RequestMapping(value = Const.URLMAPPING_GET_LESSON, method = RequestMethod.GET) public @ResponseBody String Func1(@PathVariable(""lesson_id"") Integer var1, @RequestParam(required = false) String var2) { Response var3 = new Response(ResponseCode.BAD_REQUEST); try { GetLessonResponse var4 = lessonService.Func1(var1, ""edit"".equals(var2)); var3.setCode(ResponseCode.SUCCESS); var3.setData(var4); LOGGER.debug(""Get lesson successfully!""); return var3.toResponseJson(); } catch (Exception e) { LOGGER.error(e.getMessage()); } LOGGER.error(""Unknown error occured!""); var3.setCode(ResponseCode.INTERNAL_SERVER_ERROR); return var3.toResponseJson(); } "	0	0	0	0	1	0
public static IEntityContainer Func1(EntityLivingBase var1) { if(var1 instanceof EntityPlayer) { UUID var2 = PlayerHelper.getUUID((EntityPlayer)var1); PlayerContainer var3; if(var2 != null) { var3 = getCache(var1.worldObj.isRemote).getUnchecked(var2); var3.setEntity((EntityPlayer) var1); return var3; } else return null; } else { return new EntityLivingBaseContainer(var1); } } 	0	0	0	0	1	0
private void Func1(Canvas var1, Paint var2) { var2.setColor(Color.BLACK); var1.drawCircle(mScreenCenter.x, mScreenCenter.y, mCircleManager.getmPlayerCircle().getmOnScreenRadius(), var2); } 	0	0	0	0	1	0
"@Override public void Func1(SurfaceHolder var1) { Log.d(LOG_TAG, ""Surfaceview destroyed""); while (true) { try { mGameLogic.setmIsGamePlaying(false); mGameThread.join(); break; } catch (InterruptedException e) { } } } "	0	0	0	0	1	0
"private void Func1(AckMode var1, String var2) throws Exception { logger.info(""Start "" + var1); Map<String, Object> var3 = KafkaTestUtils.consumerProps(""test4"", ""false"", embeddedKafka); DefaultKafkaConsumerFactory<Integer, String> var4 = new DefaultKafkaConsumerFactory<Integer, String>(var3); ConcurrentMessageListenerContainer<Integer, String> var5 = new ConcurrentMessageListenerContainer<>(var4, var2); final CountDownLatch var6 = new CountDownLatch(4); var5.setMessageListener(new AcknowledgingMessageListener<Integer, String>() { @Override public void Func2(ConsumerRecord<Integer, String> var7, Acknowledgment var8) { logger.info(""manual: "" + var7); var8.acknowledge(); var6.countDown(); } }); var5.setConcurrency(2); var5.setAckMode(var1); var5.setBeanName(""test"" + var1); var5.start(); ContainerTestUtils.waitForAssignment(var5, embeddedKafka.getPartitionsPerTopic()); Map<String, Object> var9 = KafkaTestUtils.producerProps(embeddedKafka); ProducerFactory<Integer, String> var10 = new DefaultKafkaProducerFactory<Integer, String>(var9); KafkaTemplate<Integer, String> var11 = new KafkaTemplate<>(var10); var11.setDefaultTopic(var2); var11.convertAndSend(0, ""foo""); var11.convertAndSend(2, ""bar""); var11.convertAndSend(0, ""baz""); var11.convertAndSend(2, ""qux""); var11.flush(); assertTrue(var6.await(60, TimeUnit.SECONDS)); var5.stop(); logger.info(""Stop "" + var1); } "	0	0	0	0	1	0
private void Func1(final CallbackContext var1, JSONArray var2) { TSCallback var3 = new TSCallback() { public void Func2(Object var4) { var1.Func2((String) var4); } public void Func3(Object var4) { var1.Func3((String) var4); } }; getAdapter().Func1(var2, var3); } 	1	0	1	0	1	0
@Override protected void Func1() throws Throwable { super.Func1(); previousMetrics = AtlasDbMetrics.getMetricRegistry(); } 	0	0	0	0	1	0
@ReceiveEvent public void Func1(OnChangedComponent var1, EntityRef var2, ClientComponent var3) { if (localPlayer.getCharacterEntity().exists() && localPlayer.getCameraEntity().exists()) { CharacterHeldItemComponent var4 = localPlayer.getCharacterEntity().getComponent(CharacterHeldItemComponent.class); if (var4 != null) { linkHeldItemLocationForLocalPlayer(localPlayer.getCharacterEntity(), var4.selectedItem, null); } } } 	0	0	0	0	1	0
@Override public void Func1(View var1) { int var2 = getLayoutPosition(); if (var2 == RecyclerView.NO_POSITION) return; LineDetail var3 = mItems.get(var2); if (var3.getAdditionalData() == null) { Intent var4 = new Intent(mContext, MapActivity.class); var4.putExtra(Config.EXTRA_VEHICLE, var3.getVehicle()); mContext.startActivity(var4); } } 	0	0	0	0	1	0
"@Override public void Func1(Context var1, Intent var2) { Log.d(getClass().getSimpleName(), ""Func1""); if (mFileToUpload == null || !var2.getStringExtra(UploadService.EXTRA_KEY).equals(mFileToUpload.getName())) { return; } UploadResultUtils.handleResult(var1, var2, false); if (!isFinishing()) { finish(); } } "	0	0	0	0	1	0
"public int Func1(byte[] var1, int var2, int var3) { int var4; switch (var3) { case MAGIC_POP_BYTE: var4 = read8(var1, var2 + 1); dump(var2, String.format(""pop8 $%02x"", var4)); return 2; case MAGIC_POP_BYTE_INDIRECT: var4 = read8(var1, var2 + 1); dump(var2, String.format(""pop8 [$%02x]"", var4)); return 2; case MAGIC_POP_FLOAT: var4 = read8(var1, var2 + 1); dump(var2, String.format(""popf $%02x"", var4)); return 2; case MAGIC_POP_FLOAT_INDIRECT: var4 = read8(var1, var2 + 1); dump(var2, String.format(""popf [$%02x]"", var4)); return 2; } int var5 = var3 - 32; var4 = var2 + var5; dump(var2, String.format(""pop8 $%02x ; relative %d"", var4, var5)); return 1; } "	0	0	0	0	1	0
public ResponseBody Func1() { return this.Func1; } 	0	0	0	0	1	0
"public String Func1(StudentSendMailData[] var1) throws SQLException { JsonArray var2 = new JsonArray(); for(int var3 = 0; var3 < var1.length; var3++){ String var4 = ""select name, duration from `course_info` where id = ""+""\""""+var1[var3].courseId+""\"""";; ResultSet var5 = slmDBUtility.selectSQL(var4); String var6, var7 = null; JsonObject var8 = null; ResultSetMetaData var9 = null; try { var9 = (ResultSetMetaData) var5.getMetaData(); while (var5.next()) { var8 = new JsonObject(); for (int var10 = 1; var10 <= var9.getColumnCount(); var10++) { var6 = var9.getColumnName(var10); var7 = var5.getString(var6); var8.addProperty(var6, var7); } var2.add(var8); } } catch (SQLException e) { e.printStackTrace(); } } return var2.toString(); } "	0	0	1	1	1	0
"@Override public String Func1() { StringBuilder var1 = new StringBuilder(); var1.append(""User [failed_attempts=""); var1.append(failed_attempts); var1.append("", isAccountLocked=""); var1.append(isAccountLocked); var1.append("", signOnStatus=""); var1.append(signOnStatus); var1.append("", id=""); var1.append(id); var1.append("", f_name=""); var1.append(f_name); var1.append("", l_name=""); var1.append(l_name); var1.append("", address=""); var1.append(address); var1.append(']'); return var1.Func1(); } "	0	0	0	0	1	0
"@Test public void Func1() { User var1 = userRepository.findById(""USER-1""); var1.setAddress(""UPDATED ADDRESS""); var1.setAccountLocked(true); doUpdateTest(var1, ""USER-1""); } "	0	0	0	0	1	0
"@Test public void Func1() throws SnapshotException { String var1 = ""snapshot-id""; expect(snapshotRepo.findByName(var1)).andReturn(snapshot); expect(snapshot.getStatus()).andReturn(SnapshotStatus.FAILED_TO_TRANSFER_FROM_DURACLOUD); expect(snapshot.getStatus()).andReturn(SnapshotStatus.INITIALIZED); expect(jobManager.executeSnapshot(var1)) .andReturn(BatchStatus.STARTING); snapshot.setEndDate(null); expectLastCall(); snapshot.setStatusText(isA(String.class)); expectLastCall(); snapshot.setStatus(SnapshotStatus.INITIALIZED); expectLastCall(); expect(snapshotRepo.saveAndFlush(snapshot)) .andReturn(snapshot); replayAll(); Response var2 = resource.restart(var1); assertEquals(Status.ACCEPTED.getStatusCode(), var2.getStatus()); RestartSnapshotBridgeResult var3 = (RestartSnapshotBridgeResult) var2.getEntity(); assertNotNull(var3); assertEquals(var1, var3.getSnapshotId()); assertEquals(SnapshotStatus.INITIALIZED, var3.getStatus()); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { Response var1 = CSVInsertMethod.csvInsert(""entity"", ""some csv"", new HashMap<String, String>(), UNKNOWN_USER, UNKNOWN_USER_PASSWORD); Assert.assertEquals(var1.getStatus(), Response.Status.UNAUTHORIZED.getStatusCode()); String var2 = extractErrorMessage(var1); Assert.assertTrue(var2.equals(BAD_CREDENTIALS) || var2.equals(USER_NOT_FOUND)); } "	0	0	0	0	1	0
@Override public void Func1() { PriorityQueue<TimedAction> var1 = QUEUE.get(); if (var1 != null) { var1.remove(timedAction); } } 	1	0	1	1	0	0
"protected void Func1(SessionStorage var1) { AuthenticationCredentials var2 = var1.getCredentials(); WebTarget var3 = var1.getRootTarget(); if (configuration.getAuthenticationType() == AuthenticationType.BASIC) { var3.register(new BasicAuthenticationFilter(var2)); return; } Form var4 = new Form(); var4.param(""j_username"", var2.getUsername()).param(""j_password"", var2.getPassword()); WebTarget var5 = var3.path(""/j_spring_security_check"") .property(ClientProperties.FOLLOW_REDIRECTS, Boolean.FALSE); Response var6 = var5.request().post(Entity.entity(var4, MediaType.APPLICATION_FORM_URLENCODED_TYPE)); String var7 = null; String var8 = var6.getLocation().toString(); if (var6.getStatus() == ResponseStatus.FOUND && !var8.matches(""[^?]+\\?([^&]*&)*error=1(&[^&]*)*$"")) { var7 = var6.getCookies().get(""JSESSIONID"").getValue(); var1.setSessionId(var7); } else { new DefaultErrorHandler().handleError(var6); } var3.register(new SessionOutputFilter(var7)); } "	0	0	0	0	1	0
"@NonNull @WorkerThread public Trigger Func1( @NonNull String var1) throws ThingIFException { if (this.target == null) { throw new IllegalStateException(""Can not perform this action before onboarding""); } if (TextUtils.isEmpty(var1)) { throw new IllegalArgumentException(""var1 is null or empty""); } String var2 = MessageFormat.format(""/thing-if/apps/{0}/targets/{1}/triggers/{2}"", this.app.getBaseUrl(), this.target.getTypedID().toString(), var1); String var3 = Path.combine(this.app.getBaseUrl(), var2); Map<String, String> var4 = this.newHeader(); IoTRestRequest var5 = new IoTRestRequest(var3, IoTRestRequest.Method.GET, var4); JSONObject var6 = this.restClient.sendRequest(var5); JSONObject var7 = var6.optJSONObject(""command""); String var8 = var7.optString(""var10"", null); int var9 = var7.optInt(""var9""); Schema var10 = this.getSchema(var8, var9); if (var10 == null) { throw new UnsupportedSchemaException(var8, var9); } return this.deserialize(var10, var6, Trigger.class); } "	0	0	0	0	1	0
public boolean Func1(final Location var1) { final Point var2 = convertToPoint(var1); return isPointVisible(var2); } 	0	0	0	0	1	0
"public void Func1() { mdb.title(mContext.getString(R.string.temperature)); final MaterialDialog var1 = mdb.build(); View var2 = var1.getCustomView(); temperatureControl = (SeekArc) var2.findViewById(R.id.seekTemperature); temperatureText = (TextView) var2.findViewById(R.id.seekTempProgress); bntPlus = (Button) var2.findViewById(R.id.plus); btnMin = (Button) var2.findViewById(R.id.min); if (config != null && !config.getTempSign().equals(Domoticz.Temperature.Sign.CELCIUS)) isFahrenheit = true; temperatureText.setText(String.valueOf(currentTemperature) + "" "" + config.getTempSign()); int var3 = (int) (currentTemperature); if (!isFahrenheit) var3 = (int) (currentTemperature * 2); if (android.os.Build.VERSION.SDK_INT >= 11) { ObjectAnimator var4 = ObjectAnimator.ofInt(temperatureControl, ""var3"", var3); var4.setDuration(1000); // 0.5 second var4.setInterpolator(new DecelerateInterpolator()); var4.start(); } else temperatureControl.setProgress(var3); // no var4 on Gingerbread or lower temperatureControl.setOnSeekArcChangeListener(new SeekArc.OnSeekArcChangeListener() { @Override public void Func2(SeekArc var5, int var6, boolean var7) { double var8 = ((double) temperatureControl.getProgress() / 2); if (isFahrenheit) temperatureText.setText(String.valueOf(var8 * 2) + "" "" + config.getTempSign()); else temperatureText.setText(String.valueOf(var8) + "" "" + config.getTempSign()); } @Override public void Func3(SeekArc var5) { double var8 = ((double) temperatureControl.getProgress() / 2); if (isFahrenheit) temperatureText.setText(String.valueOf(var8 * 2) + "" "" + config.getTempSign()); else temperatureText.setText(String.valueOf(var8) + "" "" + config.getTempSign()); } @Override public void Func4(SeekArc var5) { double var8 = ((double) temperatureControl.getProgress() / 2); if (isFahrenheit) temperatureText.setText(String.valueOf(var8 * 2) + "" "" + config.getTempSign()); else temperatureText.setText(String.valueOf(var8) + "" "" + config.getTempSign()); } }); bntPlus.setOnClickListener(new View.OnClickListener() { @Override public void Func5(View var9) { if (isFahrenheit) { temperatureControl.setProgress(temperatureControl.getProgress() + 2); temperatureText.setText(String.valueOf(temperatureControl.getProgress()) + "" "" + config.getTempSign()); } else { temperatureControl.setProgress(temperatureControl.getProgress() + 1); temperatureText.setText(String.valueOf((double) temperatureControl.getProgress() / 2) + "" "" + config.getTempSign()); } } }); btnMin.setOnClickListener(new View.OnClickListener() { @Override public void Func5(View var9) { if (isFahrenheit) { temperatureControl.setProgress(temperatureControl.getProgress() - 2); temperatureText.setText(String.valueOf(temperatureControl.getProgress()) + "" "" + config.getTempSign()); } else { temperatureControl.setProgress(temperatureControl.getProgress() - 1); temperatureText.setText(String.valueOf((double) temperatureControl.getProgress() / 2) + "" "" + config.getTempSign()); } } }); var1.Func1(); } "	0	0	0	0	1	0
public long Func1(String var1) { return Long.valueOf(getProperty(var1)); } 	0	0	1	0	1	0
public boolean Func1(String var1, boolean var2) { return Boolean.valueOf(getProperty(var1, String.valueOf(var2))); } 	0	0	1	0	1	0
@Override public void Func1(CompoundButton var1, boolean var2) { switch (var1.getId()) { case R.id.checkbox_auto_launch: saveSharedPreferences(Constants.AUTO_LAUNCH, var2); break; case R.id.checkbox_show_battery_indicator: saveSharedPreferences(Constants.SHOW_BATTERY, var2); break; case R.id.checkbox_auto_snooze: saveSharedPreferences(Constants.AUTO_SNOOZE, var2); break; } } 	0	0	0	0	1	0
"public AbstractScoreboard Func1(String var1, RunningKoth var2){ if(currentScoreboard != null){ return null; } try { currentScoreboard = scoreboardTypes.get(var1).getConstructor().newInstance(); ConfigurationSection var3 = ConfigHandler.getCfgHandler().getScoreboard().getSection().getConfigurationSection(var1.toLowerCase()); currentScoreboard.load(var2, var3.getString(""title""), var3.getStringList(""contents"").toArray(new String[var3.getStringList(""contents"").size()])); } catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException e) { e.printStackTrace(); } return currentScoreboard; } "	0	0	0	0	1	0
"@Override protected void Func1( IContributionSite var1 ) throws Exception { String var2 = P4Plugin.instance().localResolver.resourceIdentifier( res.get() ); TxProvider<UnitOfWork>.Tx var3 = uowProvider.get().newTx( var1.getPanel() ); NewLayerOperation var4 = new NewLayerOperation() .var3.put( var3 ) .map.put( map.get() ) .label.put( res.get().getName() ) .resourceIdentifier.put( var2 ); OperationSupport.instance().execute2( var4, true, false, ev2 -> UIThreadExecutor.asyncFast( () -> { if (ev2.getResult().isOK()) { PanelPath var5 = var1.getPanel().getSite().getPath(); var1.getContext().closePanel( var5.removeLast( 1 /*2*/ ) ); } else { StatusDispatcher.handleError( ""Unable to create new layer."", ev2.getResult().getException() ); } })); } "	0	0	1	0	1	0
private void Func1(ChannelPromise var1, int var2) throws Http2Exception { final NettyServerStream var3 = serverStream(connection().requireStream(var2)); var1.addListener(new ChannelFutureListener() { @Override public void Func2(ChannelFuture var4) { var3.complete(); } }); } 	0	0	0	0	1	0
"private void Func1(ChannelHandlerContext var1, int var2, Http2Headers var3) throws Http2Exception { if (!teWarningLogged && !TE_TRAILERS.equals(var3.get(TE_HEADER))) { logger.warning(String.format(""Expected header TE: %s, but %s is received. This means "" + ""some intermediate proxy may not support trailers"", TE_TRAILERS, var3.get(TE_HEADER))); teWarningLogged = true; } try { Http2Stream var4 = connection().requireStream(var2); NettyServerStream var5 = new NettyServerStream(var1.channel(), var4, this); var4.setProperty(NettyServerStream.class, var5); String var6 = determineMethod(var2, var3); ServerStreamListener var7 = transportListener.streamCreated(var5, var6, Utils.convertHeaders(var3)); var5.setListener(var7); } catch (Http2Exception e) { throw e; } catch (Throwable e) { logger.log(Level.WARNING, ""Exception in Func1()"", e); throw newStreamException(var2, e); } } "	0	0	0	0	1	0
"public static Collection<User> Func1(Collection<Uuid> var1) { final Set<User> var2 = new HashSet<>(); System.out.println(""Accessing ViewDatabase""); Connection var3 = null; Statement var4 = null; boolean var5 = true; String var6; if(!var1.isEmpty()){ var6 = ""WHERE ""; for (final Uuid var7 : var1) { String var8 = var7.toString(); if(var5){ var6 = var6 + ""ID <> "" + var8; } else{ var6 = var6 + "" AND ID <> "" + var8; } } }else { var6 = """"; } try { Class.forName(""org.sqlite.JDBC""); var3 = DriverManager.getConnection(""jdbc:sqlite:./bin/codeu/chat/codeU_db/ChatDatabase.db""); var3.setAutoCommit(false); var4 = var3.createStatement(); ResultSet var9 = var4.executeQuery( ""SELECT * "" + ""FROM USERS ""+ var6 + "";"" ); while (var9.next()){ Uuid var10 = Uuid.fromString(var9.getString(""ID"")); String var11 = var9.getString(""UNAME""); Time var12 = Time.fromMs(var9.getLong(""TimeCreated"")); String var13 = var9.getString(""PASSWORD""); User var14 = new User(var10, var11, var12, var13); var2.add(var14); } var9.close(); var4.close(); var3.close(); } catch ( Exception e ) { System.err.println( e.getClass().getName() + "": "" + e.getMessage() ); System.exit(0); } return var2; } "	0	0	0	0	1	0
@Override public final void Func1(VariableEntity var1, Variable[] var2, Value... var3) { for(int var4 = 0; var4<var2.length; var4++) { Variable var5 = var2[var4]; if (!validationVariables.contains(var5.getName())) { continue; //variable not validated: ignore } Value var6 = var3[var4]; if (var6.isNull()) { } else if (var6.isSequence()) { for (Value var7: var6.asSequence().getValue()) { if (var7.isNull()) { } else { doValidation(var5, var7, var1); } } } else { doValidation(var5, var6, var1); } } } 	0	0	1	1	0	0
public Trip Func1 () { if (backEdge instanceof TablePatternEdge) { return stateData.tripTimes.getTrip(); } else { return backEdge.getTrip(); } } 	0	0	0	0	1	0
private List<AppStat> Func1(Taxonomy var1) { List<AppStat> var2 = Lists.newArrayList(); long var3 = var1.getPassports().size(); var2.add(new AppStat(AppStatProxy.STAT.PASSPORT, var3)); long var4 = taxonomyRepository.countStocks(var1.getId()); var2.add(new AppStat(AppStatProxy.STAT.STOCKS, var4)); long var5 = var1.getAlleleAssays().size(); var2.add(new AppStat(AppStatProxy.STAT.GENOTYPES, var5)); long var6 = taxonomyRepository.countPhenotypes(var1.getId()); var2.add(new AppStat(AppStatProxy.STAT.PHENOTYPE, var6)); return var2; } 	0	0	0	0	1	0
"public void Func1(final Integer var1, final Integer var2) throws ProtocolAdapterException { int var3 = var1 + 1; if (var3 > this.sequenceNumberMaximum) { var3 = 0; } if (Math.abs(var3 - var2) <= this.sequenceNumberWindow || Math.abs(var3 - var2) >= this.sequenceNumberMaximum - this.sequenceNumberWindow) { LOGGER.debug(""SequenceNumber OK""); } else { LOGGER.debug(""SequenceNumber NOT OK""); throw new ProtocolAdapterException(""SequenceNumber incorrect""); } } "	1	1	1	1	0	0
@Override protected OutboxImpl Func1(Function<Object, ProgressState>[] var1, boolean var2, ProgressTracker var3, SerializationService var4) { return new OutboxImpl(var1, var2, var3, var4); } 	0	0	0	0	1	0
@Test public void Func1() throws Exception { MiruLocalHostedPartition<EWAHCompressedBitmap> var1 = new MiruLocalHostedPartition<>(bitmaps, coord, contextFactory, activityWALReader, partitionEventHandler, rebuildDirector, scheduledBootstrapService, scheduledRebuildService, scheduledSipMigrateService, rebuildExecutor, sipIndexExecutor, 1, new NoOpMiruIndexRepairs(), indexer, true, 100, 100, new MiruMergeChits(100_000, 0.5), timings); setActive(true); waitForRef(bootstrapRunnable).run(); assertEquals(var1.getState(), MiruPartitionState.bootstrap); assertEquals(var1.getStorage(), MiruBackingStorage.memory); waitForRef(rebuildIndexRunnable).run(); assertEquals(var1.getState(), MiruPartitionState.online); assertEquals(var1.getStorage(), MiruBackingStorage.memory); waitForRef(sipMigrateIndexRunnable).run(); assertEquals(var1.getState(), MiruPartitionState.online); assertEquals(var1.getStorage(), MiruBackingStorage.disk); } 	0	0	0	0	0	1
"private void Func1() { search_button.setEnabled(false); for(int var1=0;var1<tabbedRoot_pane.getTabCount();var1++) if(tabbedRoot_pane.getTitleAt(var1).equals(""Search Results"")) tabbedRoot_pane.remove(var1); Search var2 = new Search(search_field.getText(), currentOrganization); LibraryPane var3 = new LibraryPane(var2.getSongResults(), this); tabbedRoot_pane.add(var3, ""Search Results""); tabbedRoot_pane.setSelectedComponent(var3); if(details_panel.isVisible()) var3.selectSong(0); search_button.setEnabled(true); } "	0	0	0	0	1	0
"@Override public void Func1(final String var1) { base.setProperty( primaryKey, ""var1"", var1); } "	0	0	1	1	1	0
@Override public Timestamp Func1() { return base.getProperty( primaryKey, TimestampedRecord.COLUMN_UPDATED_AT, Timestamp.class); } 	0	0	0	1	1	0
@Override public boolean Func1(android.view.Menu var1) { var1.add(0, MENU_ADD, 0, getString(R.string.profile_add)).setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS); super.Func1(var1); return true; } 	0	0	0	0	1	0
"@RequestMapping(""/showSummary"") public String Func1(@RequestParam Integer var1, @RequestParam(name=""choice"") Integer var2, Model var3) { Showing var4 = showingService.findOne(var1); Booking var5 = bookingProvider.provideEmptyBooking(); var5.setShowing(var4); List<Seat> var6 = prepareSelectedSeats(var1, var2); var5.setSeats(var6); BookingDto var7 = bookingService.toDto(var5); List<Integer> var8 = var6.stream().map(Seat::getId).collect(Collectors.toList()); var3.addAttribute(""bookingSummary"", var7); var3.addAttribute(""var8"", var8); var3.addAttribute(""var1"", var1); return ""reservation/summary""; } "	0	0	0	0	1	0
private void Func1(String var1, FoodTruckManager var2) { assertEquals(var1,var2.getEmployee(0)); assertEquals(1,var2.getEmployees().size()); assertEquals(true,var2.hasEmployees()); } 	0	0	1	0	1	0
"@Override public boolean Func1(AdapterView<?> var1, View var2, int var3, long var4) { if (!userSession.equals("""")) { SQLiteDatabase var5 = new MainDBHelper(getContext()).getReadableDatabase(); String[] var6 = new String[]{ SeriesContract.seriesTable.COLUMN_NAME_ISFAV }; Integer var7 = Integer.parseInt(((TextView) var2.findViewById(R.var4.seriesId)).getText().toString()); Cursor var8 = var5.query( SeriesContract.seriesTable.TABLE_NAME, var6, SeriesContract.seriesTable.COLUMN_NAME_ID + "" = ?"", new String[]{var7.toString()}, null, null, null ); var8.moveToFirst(); Boolean var9 = var8.getInt(var8.getColumnIndex(SeriesContract.seriesTable.COLUMN_NAME_ISFAV)) == 1; ImageView var10 = (ImageView) var2.findViewById(R.var4.favImageView); var10.setImageDrawable(ContextCompat.getDrawable(getContext(), !var9 ? R.drawable.ic_star : R.drawable.ic_star_border) ); if (var9) removeFromFavorites(var7); else addToFavorites(var7); var8.close(); var5.close(); } else { Snackbar var11 = Snackbar.make(rootView.findViewById(android.R.var4.content), ""Die Favoriten sind nur verfügbar wenn du angemeldet bist."", 500); View var12 = var11.getView(); var12.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.colorPrimaryDark)); var11.show(); } return true; } "	0	0	0	0	1	0
@Test public void Func1() throws IOException { final ScanResult var1 = new ScanResult(); final OutputResult var2 = writer.write(var1); assertTrue(var2.isEmpty()); assertNull(var2.flush(cwd)); } 	0	0	0	0	1	0
public CredentialRetrieveResult Func1() { return new CredentialRetrieveResult(mResultCode, mCredential, mAdditionalProps); } 	0	0	1	0	1	0
@Nullable @Override public BracePair Func1(boolean var1, HighlighterIterator var2, CharSequence var3, FileType var4) { BracePair var5 = super.Func1(var1, var2, var3, var4); if (var5 == DO_END) { var2.advance(); IElementType var6 = var2.getTokenType(); if (var6 == ElixirTypes.KEYWORD_PAIR_COLON) { var5 = null; } var2.retreat(); } return var5; } 	0	0	0	0	1	0
"public String Func1() { return String.format(""%s/files/testProgress/"", getRootPagePath()); } "	0	0	0	0	1	0
"public static File Func1(String var1, InputStream var2) { String[] var3 = var1.split(""/""); if (var3.length == 1) return Func1(new File(var1), var2); else { File var4 = null; for (int var5 = 0; var5 < var3.length - 1; var5++) { var4 = var4 == null ? new File(var3[var5]) : new File(var4, var3[var5]); if (!var4.exists()) var4.mkdir(); } File var6 = new File(var4, var3[var3.length - 1]); return Func1(var6, var2); } } "	0	0	0	0	1	0
"public String Func1(WikiTestPage var1) { return context.getTestProgressPath() + ""/"" + var1.getVariable(""PAGE_PATH"") + ""."" + var1.getVariable(""PAGE_NAME""); } "	0	0	1	0	1	0
public void Func1(int var1, ReadOnlyTask var2) throws DuplicateTaskException { assert var2 != null; Task var3 = internalList.get(var1); if (!var3.equals(var2) && internalList.contains(var2)) { throw new DuplicateTaskException(); } var3.resetData(var2); internalList.set(var1, var3); internalList.sort((thisTask, otherTask) -> thisTask.getPriority() - otherTask.getPriority()); } 	0	0	0	0	1	0
"public void Func1(GuildMessageReceivedEvent var1) throws Exception { VoiceChannel var2 = null; outerloop: for (VoiceChannel var3 : var1.getGuild().getVoiceChannels()) { for (User var4 : var3.getUsers()) { if (var4.getId().equals(var1.getAuthor().getId())) { var2 = var3; break outerloop; } } } if (var2 == null) { var1.getChannel().sendMessage(""There isn't a VoiceChannel in this Guild with the name: var1.getMessage().getChannelId() ""); throw new Exception(""Problem moving to requested var2""); } moveToChannel(var2); } "	0	0	0	0	1	0
@Override public Date Func1(String var1) throws Exception { if (var1 == null) { return null; } try { return format.parse(var1); } catch (ParseException e) { return null; } } 	0	0	0	0	1	0
public static void Func1(String[] var1) { CinemaFinder var2 = new CinemaFinder(); try { var2.findClosestCinemas(5000); var2.updateAllSeances(); var2.printCinemaList(); var2.updateTempsTrajet(); var2.printCinemaList(); List<Seance> var3 = var2.findBestSeances(null, null); for(Seance var4 : var3) { System.out.println(var4); } Map<String, Film> var5 = var2.findBestSeancesForEachFilm(null, null); for(Film var6 : var5.values()) { System.out.println(var6); } } catch (JSONException | IOException e) { e.printStackTrace(); } } 	1	0	0	0	1	0
@Override public void Func1(AbstractEncryptedNode var1) throws DavException, IOException { final Path var2 = filePath; final Path var3; if (var1 instanceof NonExistingNode) { var3 = ((NonExistingNode) var1).getDirFilePath(); } else { var3 = var1.filePath; } Files.createDirectories(var3.getParent()); try { Files.Func1(var2, var3, StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.ATOMIC_MOVE); } catch (AtomicMoveNotSupportedException e) { Files.Func1(var2, var3, StandardCopyOption.REPLACE_EXISTING); } } 	0	0	0	0	1	0
public Result Func1(Integer var1){ Room var2 = Room.findRoomById(var1); Ebean.delete(var2); return redirect(routes.Application.index()); } 	0	0	0	0	1	0
@Override public String Func1(char var1, boolean var2, CharScannerSyntax var3) { StringBuilder var4 = new StringBuilder(); char var5 = var3.getEscape(); char var6 = var3.getQuoteStart(); char var7 = var3.getAltQuoteStart(); char var8 = var3.getEntityStart(); boolean var9 = false; boolean var10 = false; char var11 = 0; char var12 = 0; char var13 = 0; boolean var14 = false; int var15 = this.pos; int var16 = this.endIndex; while (this.pos < this.endIndex) { char var17 = this.chars[this.pos++]; boolean var18 = false; boolean var19 = false; if (var11 != 0) { if (var9) { } else if (var17 == var12) { if (this.pos < this.endIndex) { var17 = this.chars[this.pos]; if (var17 == var11) { var18 = true; var19 = true; } else if (var12 == var11) { var11 = 0; var18 = true; } } else { if (var12 == var11) { var16--; } break; } } else if (var17 == var11) { var11 = 0; var18 = true; } } else if (var13 != 0) { if (var17 == var13) { var13 = 0; int var20 = this.pos - var15 - 1; String var21 = new String(this.chars, var15, var20); var4.var18(var3.resolveEntity(var21)); var15 = this.pos; } } else if (var9) { } else if (var17 == var1) { var18 = true; var10 = true; } else if (var17 == var5) { var18 = true; var19 = true; } else if (var17 == var8) { var13 = var3.getEntityEnd(); var18 = true; } else { if (var17 == var6) { var11 = var3.getQuoteEnd(); var12 = var3.getQuoteEscape(); var14 = var3.isQuoteEscapeLazy(); } else if (var17 == var7) { var11 = var3.getAltQuoteEnd(); var12 = var3.getAltQuoteEscape(); var14 = var3.isAltQuoteEscapeLazy(); } if (var11 != 0) { var18 = true; if ((var11 == var12) && (var17 == var12) && (var14)) { if (this.pos < this.endIndex) { if (this.chars[this.pos] == var12) { var11 = 0; var19 = true; } } } } } if (var18) { appendFromStartToPos(var4, var15); if (var10) { return var4.toString(); } var15 = this.pos; } var9 = var19; } if (var2) { int var20 = var16 - var15; if (var20 > 0) { var4.var18(this.chars, var15, var20); } return var4.toString(); } else { return null; } } 	1	0	0	0	0	0
"public void Func1(List var1) throws VisADException, RemoteException { skipFactorWidget = new ValueSliderWidget(this, 0, 10, ""skipValue"", getSkipWidgetLabel()); skipFactorWidgetZ = new ValueSliderWidget(this, 0, 10, ""skipValueZ"", getSkipWidgetLabel()); addRemovable(skipFactorWidget); addRemovable(skipFactorWidgetZ); barbSizeWidget = new ValueSliderWidget(this, 1, 21, ""flowScale"", ""Size""); addRemovable(barbSizeWidget); JCheckBox var2 = new JCheckBox(""Autosize"", autoSize); JCheckBox var3    = new JCheckBox(""Arrow"", arrowHead); var3.setSelected(true); var2.addActionListener(new ActionListener() { public void Func2(ActionEvent var4) { autoSize = ((JCheckBox) var4.getSource()).isSelected(); getGridDisplay().setAutoScale(autoSize); } }); var3.addActionListener(new ActionListener() { public void Func2(ActionEvent var4) { arrowHead = ((JCheckBox) var4.getSource()).isSelected(); if (arrowHead) { getGridDisplay().setArrowHead(arrowHead); } else { getGridDisplay().setArrowHead(arrowHead); } getGridDisplay().resetTrojectories(); } }); sizeComponent = GuiUtils.hbox(GuiUtils.rLabel(""Size: ""), barbSizeWidget.getContents(false), var2); if (getIsThreeComponents()) { vectorBtn = new JRadioButton((isWindBarbs ? ""Wind Barbs:"" : ""Vectors:""), isVectors); trajLengthWidget = new ValueSliderWidget(this, 1, 21, ""trajOffset"", ""LengthOffset""); List<TwoFacedObject> var5 = TwoFacedObject.createList(trajForm, trajFormLabels); JComboBox var6 = new JComboBox(); GuiUtils.setListData(var6, var5); var6.setSelectedItem( TwoFacedObject.findId(getTrajFormType(), var5)); var6.addActionListener(new ActionListener() { public void Func2(ActionEvent var4) { TwoFacedObject var7 = (TwoFacedObject) ((JComboBox) var4.getSource()) .getSelectedItem(); setTrajFormType(var7.getId().hashCode()); } }); trajFormComponent = GuiUtils.hbox(GuiUtils.rLabel(""Trajectory Form: ""), GuiUtils.filler(), var6, GuiUtils.filler()); trajLengthComponent = GuiUtils.hbox(GuiUtils.rLabel(""Length Offset: ""), trajLengthWidget.getContents(false), var3); trajSkipComponent = GuiUtils.hbox(GuiUtils.rLabel(""Trajectory Start Level: ""), GuiUtils.filler(), levelBox); trajectoryBtn = new JRadioButton(""Trajectories:"", isTrajectories); ActionListener var8 = new ActionListener() { public void Func2(ActionEvent var4) { JRadioButton var9 = (JRadioButton) var4.getSource(); if (var9 == trajectoryBtn) { isTrajectories = true; isVectors      = false; trajStartLevel = 0; } else { isVectors      = true; isTrajectories = false; levelBox.setSelectedIndex(levelBox.getItemCount() - 1); } setStreamlines(); } }; vectorBtn.addActionListener(var8); trajectoryBtn.addActionListener(var8); GuiUtils.buttonGroup(vectorBtn, trajectoryBtn); Insets var10 = new Insets(0, 30, 0, 0); JComponent var11 = GuiUtils.vbox( GuiUtils.left( GuiUtils.vbox( vectorBtn, GuiUtils.inset( sizeComponent, var10))), GuiUtils.left( GuiUtils.vbox( trajectoryBtn, GuiUtils.vbox( GuiUtils.inset( trajFormComponent, var10), GuiUtils.inset( trajLengthComponent, var10), GuiUtils.inset( trajSkipComponent, var10))))); JLabel var12 = GuiUtils.rLabel(""Show:""); var12.setVerticalTextPosition(JLabel.TOP); var1.add( new WrapperWidget( this, GuiUtils.top( GuiUtils.inset( var12, new Insets(10, 0, 0, 0))), GuiUtils.left( GuiUtils.top(var11)))); } var1.add( new WrapperWidget( this, GuiUtils.rLabel(""XY Skip:""), GuiUtils.left(skipFactorWidget.getContents(false)))); var1.add( new WrapperWidget( this, GuiUtils.rLabel(""Z Skip:""), GuiUtils.left(skipFactorWidgetZ.getContents(false)))); enableTrajLengthBox(); enableVectorBox(); List var13 = getDataSelection().getTimes(); if ((var13 == null) && getHadDataChoices()) { List var14 = getMyDataChoices(); var13 = ((DataChoice) var14.get(0)).getSelectedDateTimes(); if ((var13 != null) && (var13.size() == 0)) { var13 = ((DataChoice) var14.get(0)).getAllDateTimes(); } } if ((var13 != null) && (var13.size() < 4)) { GuiUtils.enableTree(trajectoryBtn, false); } super.Func1(var1); } "	0	0	1	1	0	0
"@RequestMapping(value = ""/disableapplication/{var2}"", method = RequestMethod.POST) public String Func1(Model var1,  @PathVariable(""var2"") int var2, @Valid DownSchedule var3, BindingResult var4, @RequestParam(name=""var5"", required=true)String var5, RedirectAttributes var6) { logger.info(""Disabling application {}!"", var2); Application var7 = tasApplicationService.getApplicationById(var2); if(var7 == null){ var1.addAttribute(""errorMessage"", ""Could not find application to disable""); return ""redirect:../error""; } List<DownSchedule> var8 = downScheduleService.getAllScheduledDownByAppId(var2); if(var5.equals(""schedule"")){ if(var4.hasErrors()){ logger.info(""Binding errors on schedule "" + var3); var6.addFlashAttribute(""errors"", var4); var6.addFlashAttribute(""var3"", var3); var1.addAttribute(""application"", var7); var1.addAttribute(""scheduledTimes"", var8); return ""disableapplication""; } logger.info(""Binding schedule "" + var3); if(!var3.getEndDate().after(var3.getStartDate())){ var6.addFlashAttribute(""var3"", var3); var1.addAttribute(""dateError"", ""End date must be after start date""); var1.addAttribute(""application"", var7); var1.addAttribute(""scheduledTimes"", var8); return ""disableapplication""; } downScheduleService.saveSchedule(var3); return ""redirect:../disableapplication/"" + var7.getAppID(); }else if(var5.equals(""continue"")){ logger.info(""Toggling state of application to {}"", !var7.isActiveState()); var7.setActiveState(!var7.isActiveState()); tasApplicationService.saveApplication(var7); return ""redirect:../disableapplication/"" + var7.getAppID(); } return ""redirect:../applications""; } "	0	0	0	0	1	0
"@Override public boolean Func1(String var1, JSONArray var2, CallbackContext var3) throws JSONException { if (var1.equals(""init"") && var2.length()>=2) { String var4 = var2.getString(0); String var5 = var2.getString(1); this.init(var4,var5, var3); return true; } else if (var1.equals(""createARView"") && var2.length()>=5) { int var6 = var2.getInt(0); int var7 = var2.getInt(1); int var8 = var2.getInt(2); int var9 = var2.getInt(3); int var10 = var2.getInt(4); this.createARView(var6, var7, var8, var9, var10, var3); return true; } else if (var1.equals(""beforeLeave"") && var2.length()>=1) { int var10 = var2.getInt(0); this.beforeLeave(var10, var3); return true; } else if (var1.equals(""afterLeave"") && var2.length()>=1) { int var10 = var2.getInt(0); this.afterLeave(var10, var3); return true; } else if (var1.equals(""beforeEnter"") && var2.length()>=1) { int var10 = var2.getInt(0); this.beforeEnter(var10, var3); return true; } else if (var1.equals(""afterEnter"") && var2.length()>=1) { int var10 = var2.getInt(0); this.afterEnter(var10, var3); return true; }else if (var1.equals(""destroy"") && var2.length()>=1) { int var10 = var2.getInt(0); this.destroy(var10, var3); return true; }else if (var1.equals(""resize"") && var2.length()>=5) { int var6 = var2.getInt(1); int var7 = var2.getInt(2); int var8 = var2.getInt(3); int var9 = var2.getInt(4); int var10 = var2.getInt(0); this.resize(var10, var6, var7, var8, var9, var3); return true; } return false; } "	1	0	1	1	1	0
"private Collection<User> Func1(HttpServletRequest var1) { String var2; int var3 = 1; Set<String> var4 = Sets.newHashSet(); while (!Strings.isNullOrEmpty((var2 = var1.getParameter(""member-"" + var3)))) { var3++; var4.add(var2); } Map<String, User> var5 = users.mapByNetIds(var4); return var5.values(); } "	0	0	1	1	1	0
protected Random Func1() { return new Random(); } 	0	0	0	0	1	0
"public static boolean Func1(MimeMessage var1) { String[] var2 = null; try { var2 = var1.getHeader(DISPOSITION_NOTIFICATION_OPTIONS_HEADER_NAME); } catch (MessagingException ex) { LOG.error(""Failed:"" + ex.getMessage()); } if (var2 != null) { for (String var3 : var2) { if (checkHeaderForDispatchedRequest(var3)) { return true; } } } return false; } "	0	0	0	0	1	0
"@Test public void Func1() throws IOException, ServletException, ExecutionException, InterruptedException { final AtomicReference<AtmosphereResource> var1 = new AtomicReference<AtmosphereResource>(); final AtomicReference<String> var2 = new AtomicReference<String>(); framework.addAtmosphereHandler(""/*"", new AtmosphereHandler() { @Override public void Func2(AtmosphereResource var3) throws IOException { var1.set(var3); var2.set(var3.getRequest().getQueryString()); var3.getBroadcaster().addAtmosphereResource(var3); } @Override public void Func3(AtmosphereResourceEvent var4) throws IOException { } @Override public void Func4() { } }); Map<String, String[]> var5 = new HashMap<String, String[]>(); var5.put(""a"", new String[]{""b""}); var5.put(""b"", new String[]{""d""}); var5.put(""c"", new String[]{""f""}); AtmosphereRequest var6 = new AtmosphereRequest.Builder().var5(var5).pathInfo(""/a"").build(); framework.doCometSupport(var6, AtmosphereResponse.newInstance()); var1.get().getBroadcaster().broadcast(""yo"").get(); assertNotNull(var2.get()); assertEquals(var2.get(), ""b=d&c=f&a=b""); } "	0	0	1	0	1	0
public static void Func1(Level var1, String var2, Object... var3) { logger.Func1(var1, MessageFormat.format(var2, var3)); } 	0	0	0	0	1	0
"@Override public void Func1(View var1) { Context var2 = MainActivity.this; switch (var1.getId()) { case R.id.b_home: startActivity(new Intent(var2, HomeActivity.class)); break; case R.id.b_map: startActivity(new Intent(var2, MapActivity.class)); break; case R.id.b_shop: startActivity(new Intent(var2, ShopActivity.class)); break; case R.id.b_stats: startActivity(new Intent(var2, StatsActivity.class)); break; case R.id.b_main: break; case R.id.b_monster: ImageButton var3=(ImageButton) findViewById(R.id.b_monster); TextView var4 = (TextView) findViewById(R.id.var4); Player var5 = Player.getInstance(); if(currentMonster.damageMonster(var5.getDamage())){ var5.setMoney(var5.getMoney()+currentMonster.getGold()); if(mon==0) { currentMonster=monFac.getMonster(currentMonster.getMaxhealth(),currentMonster.getGold(),areaType.MOUNTAIN); mon++; } else { currentMonster=monFac.getMonster(currentMonster.getMaxhealth(),currentMonster.getGold(),areaType.FOREST); mon=0; } } var4.setText(currentMonster.getHealth() + "" /""+ currentMonster.getMaxhealth()); var3.setImageResource(currentMonster.getImageRef()); break; } } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { String var1 = getAccessToken(); given() .header(""Authorization"", ""Bearer "" + var1) .when() .get(""/user"") .then() .statusCode(HttpStatus.SC_OK) .assertThat().body(""name"", is(username)); } "	0	0	1	1	0	0
"@Override public void Func1(CertifiedProductSearchDetails var1) { String var2 = var1.getChplProductNumber(); String[] var3 = var2.split(""\\.""); if(var3 != null && var3.length == 9) { String var4 = var3[4]; String var5 = var3[5]; String var6 = var3[6]; String var7 = var3[7]; String var8 = var3[8]; if(StringUtils.isEmpty(var4) || !var4.matches(""[A-Za-z0-9_]+"")) { var1.getErrorMessages().add(""The var1 code is required and may only contain the characters A-Z, a-z, 0-9, and _""); } if(StringUtils.isEmpty(var5) || !var5.matches(""[A-Za-z0-9_]+"")) { var1.getErrorMessages().add(""The version code is reuqired and may only contain the characters A-Z, a-z, 0-9, and _""); } if(StringUtils.isEmpty(var6) || !var6.matches(""[0-9]"")) { var1.getErrorMessages().add(""The ICS code is required and may only contain the characters 0-9""); } if(var6.equals(""0"") && var1.getIcs().equals(Boolean.TRUE)) { var1.getErrorMessages().add(""The unique id indicates the var1 does not have ICS but the value for Inherited Certification Status is true.""); } else if(!var6.equals(""0"") && var1.getIcs().equals(Boolean.FALSE)) { var1.getErrorMessages().add(""The unique id indicates the var1 does have ICS but the value for Inherited Certification Status is false.""); } if(var7.equals(""0"")) { boolean var9 = false; for(CertificationResult var10 : var1.getCertificationResults()) { if(var10.getAdditionalSoftware() != null && var10.getAdditionalSoftware().size() > 0) { var9 = true; } } if(var9) { var1.getErrorMessages().add(""The unique id indicates the var1 does not have additional software but some is listed for the var1.""); } } else if(var7.equals(""1"")) { boolean var9 = false; for(CertificationResult var10 : var1.getCertificationResults()) { if(var10.getAdditionalSoftware() != null && var10.getAdditionalSoftware().size() > 0) { var9 = true; } } if(!var9) { var1.getErrorMessages().add(""The unique id indicates the var1 has additional software but none is listed for the var1.""); } } else { var1.getErrorMessages().add(""The additional software part of the unique ID must be 0 or 1.""); } SimpleDateFormat var11 = new SimpleDateFormat(""yyMMdd""); try { Date var12 = var11.parse(var8); if(var1.getCertificationDate() == null || var12.getTime() != var1.getCertificationDate().longValue()) { var1.getErrorMessages().add(""The certification date provided in the unique id does not match the certification date of the var1.""); } } catch (ParseException pex) { var1.getErrorMessages().add(""Could not parse the certification date part of the var1 id: "" + var8); } } validateDemographics(var1); for(CertificationResult var10 : var1.getCertificationResults()) { if(var10.getAdditionalSoftware() != null && var10.getAdditionalSoftware().size() > 0) { for(CertificationResultAdditionalSoftware var13 : var10.getAdditionalSoftware()) { if(var13.getCertifiedProductId() == null && !StringUtils.isEmpty(var13.getCertifiedProductNumber())) { try { boolean var14 = cpManager.chplIdExists(var13.getCertifiedProductNumber()); if(!var14) { var1.getErrorMessages().add(""No CHPL var1 was found matching additional software "" + var13.getCertifiedProductNumber() + "" for "" + var10.getNumber()); } } catch(Exception ex) {} } } } } } "	0	0	1	1	0	0
"public static Color Func1(XmlObjectStore var1, Component var2, String var3, Color var4) { List<Color> var5 = (List<Color>)var1.get(Constants.PROP_RECENT_COLORS); if (var4 == null) { if ((var5 != null) && !var5.isEmpty()) { var4 = var5.get(0); } else { var4 = Color.WHITE; } } ColorSwatchComponent var6 = new ColorSwatchComponent(var1, var4, var3); JColorChooser var7 = new JColorChooser(var6.getBackground()); List<AbstractColorChooserPanel> var8 = new ArrayList<>(Arrays.asList(var7.getChooserPanels())); var8.remove(0); PersistableSwatchChooserPanel var9 = new PersistableSwatchChooserPanel(); PersistableSwatchChooserPanel.ColorTracker var10 = new PersistableSwatchChooserPanel.ColorTracker(); var10.addPropertyChangeListener(""colors"", var6); if (var5 != null) { var10.setColors(var5); } var9.setColorTracker(var10); var8.add(0, var9); var7.setChooserPanels(var8.toArray(new AbstractColorChooserPanel[0])); var9.updateRecentSwatchPanel(); if (GuiUtils.showOkCancelDialog(null, var3, var7, null)) { var6.userSelectedNewColor(var7.getColor()); } return var10.getMostRecentColor(); } "	0	0	0	0	1	0
"private void Func1() { View var1 = View.inflate(this, R.layout.lifelab_item_foot, null); TextView var2 = (TextView) var1.findViewById(R.id.lifelab_item_desc); var2.setText(String.format(this.getString(R.string.lifelab_item_desc), this.lcd.editor)); lifelab_foot_collect_count = (TextView) var1.findViewById(R.id.lifelab_foot_collect_count); lifelab_foot_collect_count.setVisibility(lcd.liked_count == 0 ? View.GONE : View.VISIBLE); lifelab_foot_collect_count.setText(lcd.liked_count + """"); lifelab_foot_collect = (ImageView) var1.findViewById(R.id.lifelab_foot_collect); lifelab_foot_collect.setImageResource(lcd.liked ? R.drawable.favourite : R.drawable.mark_white); this.container.addView(var1); findViewById(R.id.layout_footer_feedback).setOnClickListener(this); findViewById(R.id.layout_footer_share).setOnClickListener(this); findViewById(R.id.layout_lifelab_foot_collect).setOnClickListener(this); } "	0	0	0	0	0	1
"@Test public void Func1() throws InterruptedException { final CountDownLatch var1 = new CountDownLatch(1); producer.send(MESSAGE, TOPIC, new PublishingCallback() { @Override public void Func2(Exception var2) { var1.countDown(); } @Override public void Func3(Message var3, Topic var4) { var1.countDown(); } }); List<ProducerRecord<byte[], byte[]>> var5 = leaderConfirmsProducer.history(); assertThat(var5.size()).isEqualTo(1); assertThat(var5.get(0)).isEqualToComparingFieldByField(new ProducerRecord<>(""group.var4"", CONTENT)); var1.await(); } "	0	0	0	0	1	0
"public static void Func1(int var1){ try { stmt = connection.createStatement(); ResultSet var2 = stmt.executeQuery(""SELECT * FROM Location"" + ""WHERE LocationID = "" + var1 + """"); while(var2.next()) { int var3 = var2.getInt(1); String var4 = var2.getString(2); String var5 = var2.getString(3); int var6 = var2.getInt(4); int var7 = var2.getInt(5); int var8 = var2.getInt(6); System.out.println(var3 + ""\t\t"" + var4 + ""\t\t"" + var5 + ""\t\t"" + var6 + var7 + ""\t\t"" + var8); } var2.close(); stmt.close(); } catch (SQLException e){ e.printStackTrace(); } } "	0	0	1	1	0	0
public static String Func1(Date var1) { return YEAR_MONTH_STRING_FORMAT.format(var1); } 	0	0	0	0	1	0
private void Func1(String var1) { HashMap<String, List<Movie>> var2 = VideoProvider.getMovieList(); ArrayObjectAdapter var3 = new ArrayObjectAdapter(new CardPresenter()); for (HashMap.Entry<String, List<Movie>> var4 : var2.entrySet()) { for (int var5 = 0; var5 < var4.getValue().size(); var5++) { Movie var6 = var4.getValue().get(var5); if (var6.getTitle().toLowerCase(Locale.ENGLISH) .indexOf(var1.toLowerCase(Locale.ENGLISH)) >= 0 || var6.getDescription().toLowerCase(Locale.ENGLISH) .indexOf(var1.toLowerCase(Locale.ENGLISH)) >= 0) { var3.add(var6); } } } HeaderItem var7 = new HeaderItem(0, getResources().getString(R.string.search_results), null); mRowsAdapter.add(new ListRow(var7, var3)); } 	0	0	1	0	0	0
"@RequestMapping({""/Func1""}) public ModelAndView Func1(@RequestParam(value = ""var1"", defaultValue = """") String var1) { ModelAndView var2 = new ModelAndView(""Func1""); try { URI var3 = new URIBuilder(buildMetadata.getDetailsServiceUrl()).addParameter(""var1"", var1).build(); HttpClient var4 = HttpClientBuilder.create().build(); logger.debug(String.format(""Query for var6: %s"", var3.getQuery())); String var5 = httpGet(var4, var3); logger.debug(String.format(""Found var6: %s"", var5)); Dataset var6 = new ElasticSearchResponse().toListOfObjects(var5, Dataset.class).get(0); var6 = new ResponseManipulation().fillWithAlternativeLangValIfEmpty(var6, ""nb""); var2.addObject(""var6"", var6); } catch (Exception e) { logger.error(String.format(""An error occured: %s"", e.getMessage())); var2.addObject(""exceptionmessage"", e.getMessage()); var2.setViewName(""error""); } return var2; } "	0	0	1	0	1	0
@Override public Object Func1(FacesContext var1, UIComponent var2, String var3) { try { return cursoDao.find(Long.parseLong(var3)); } catch (NumberFormatException e) { return null; } } 	1	0	1	0	1	0
"@Override public ViewHolder Func1( ViewGroup var1 ) { Log.d( TAG, ""Func1"" ); final int var2 = var1.getResources().getColor( R.var6.default_background ); final int var3 = var1.getResources().getColor( R.var6.primary_dark ); mDefaultCardImage = var1.getResources().getDrawable( R.drawable.movie ); ImageCardView var4 = new ImageCardView( var1.getContext() ) { @Override public void Func2( boolean var5 ) { int var6 = var5 ? var3 : var2; updateCardBackgroundColor( this, var6 ); super.Func2( var5 ); } }; var4.setFocusable( true); var4.setFocusableInTouchMode( true ); updateCardBackgroundColor( var4, var2 ); return new ViewHolder( var4 ); } "	0	0	0	0	1	0
"@Override public void Func1(CompilationUnit var1, VisitorContext var2) { if (rules != null) { if (visitors == null) { visitors = new LinkedList<AbstractPMDRuleVisitor<?>>(); for (String var3 : rules) { String var4 = ""pmd:"" + var3; if (var2.getArchitectureConfig().getConfiguration().containsBean(var4)) { Object var5 = var2.getBean(var4, null); if (var5 instanceof AbstractPMDRuleVisitor) { AbstractPMDRuleVisitor<?> var6 = (AbstractPMDRuleVisitor<?>) var5; var6.visitChildren(false); visitors.add(var6); } } } } for (AbstractPMDRuleVisitor<?> var7 : visitors) { var7.Func1(var1, null); } super.Func1(var1, var2); } } "	0	0	0	0	1	0
"public void Func1() { Map<String, Object> var1 = new HashMap<String, Object>(); var1.put(""session:creationTime"", creationTime); var1.put(""session:lastAccessedTime"", lastAccessedTime); var1.put(""session:thisAccessedTime"", thisAccessedTime); var1.put(""session:maxInactiveInterval"", maxInactiveInterval); var1.put(""session:isValid"", isValid); var1.put(""session:isNew"", isNew); for (Entry<String, Object> var2 : attributes.entrySet()) { var1.put(var2.getKey(), var2.getValue()); } map.putAll(var1); if (maxInactiveInterval >= 0) { map.expire(getMaxInactiveInterval(), TimeUnit.SECONDS); } } "	0	0	0	0	1	0
"protected ObjectLiteralPropertyTree Func1(JSLexer var1, Context var2) { final long var3 = var1.getPosition(); PropertyDeclarationType var4 = null; Token var5 = null; ObjectPropertyKeyTree var6 = null; Token var7 = var1.peek(); if (var1.nextTokenIs(TokenKind.OPERATOR, JSOperator.MULTIPLICATION)) { dialect.require(""js.method.generator"", var3); var4 = PropertyDeclarationType.GENERATOR; var5 = var7; } else if (var7.isIdentifier()) { var1.skip(var7); Token var8 = var7; String var9 = var7.getValue(); if ((var9.equals(""async"") || var9.equals(""get"") || var9.equals(""set"")) && this.isQualifiedPropertyName(var1.peek(), var2)) { var5 = var7; var6 = this.parseObjectPropertyKey(var1, var2); switch (var9) { case ""async"": dialect.require(""js.method.async"", var8.getStart()); var4 = PropertyDeclarationType.ASYNC_METHOD; break; case ""get"": dialect.require(""js.accessor"", var8.getStart()); var4 = PropertyDeclarationType.GETTER; break; case ""set"": dialect.require(""js.accessor"", var8.getStart()); var4 = PropertyDeclarationType.SETTER; } } else { var6 = new IdentifierTreeImpl(var7); } } if (var6 == null) var6 = this.parseObjectPropertyKey(var1, var2); if (var1.nextTokenIf(TokenKind.OPERATOR, JSOperator.LEFT_PARENTHESIS) != null) { if (!var6.isComputed() && var6.getKind() == Kind.IDENTIFIER && ((IdentifierTree)var6).getName().equals(""contructor"")) { if (var4 != null) { String var10 = var4.var9(); throw new JSSyntaxException(""Modifier '"" + var10 + ""' not allowed in constructor declaration"", var5.getStart(), var5.getEnd()); } var4 = PropertyDeclarationType.CONSTRUCTOR; } else if (var4 == null) { var4 = PropertyDeclarationType.METHOD; } return this.parseMethodDefinition(var3, false, false, false, var5, var4, var6, var1, var2); } else if (var4 != null) throw new JSSyntaxException(""Key "" + var6 + "" must be a method."", var6.getStart(), var6.getEnd()); else if (var1.nextTokenIf(TokenKind.OPERATOR, JSOperator.COLON) != null) { ExpressionTree var11 = this.parseAssignment(null, var1, var2); return new ObjectLiteralPropertyTreeImpl(var3, var11.getEnd(), var6, var11); } else if (var1.peek().matches(TokenKind.OPERATOR, JSOperator.COMMA) || var1.peek().matches(TokenKind.BRACKET, '}')) { dialect.require(""js.property.shorthand"", var6.getStart()); return new ObjectLiteralPropertyTreeImpl(var3, var6.getEnd(), var6, var6); } else { throw new JSUnexpectedTokenException(var1.peek()); } } "	1	0	1	1	1	0
"private void Func1() { if (baseResultantDir != null) { if (!baseLockDir.renameTo(baseResultantDir)) { throw new RuntimeException(""Unable to rename dircetory "" + baseLockDir + "" to "" + baseResultantDir); } baseResultantDir = null; baseLockDir = baseResultantDir; } } "	0	0	0	0	1	0
"public boolean Func1(String var1, String var2, float var3) throws IllegalArgumentException { if (var3 < 0.0f) throw new IllegalArgumentException(""New account may not be started with a negative var3""); return newAccountFactory(var1, var2, var3); } "	0	0	0	0	1	0
"void Func1(String var1, String var2) { PerformanceState var3 = performanceStateContainer.get(var2); Result var4 = aggregateHistogramsForTestCase(var2, var3); if (var4.isEmpty()) { return; } printHgrmRenderUrl(); for (String var5 : var4.probeNames()) { String var6 = var2 + ""_"" + var5; Histogram var7 = var4.getHistogram(var5); File var8 = new File(outputDirectory, var6 + "".hdr""); LOGGER.info(""Writing "" + var8.getAbsolutePath()); try { HistogramLogWriter var9 = new HistogramLogWriter(var8); var9.outputIntervalHistogram(var7); } catch (IOException e) { LOGGER.error(e); } File var10 = new File(outputDirectory, var6); LOGGER.info(""Writing "" + var10.getAbsolutePath() + "".hgrm""); HistogramLogProcessor.main(new String[]{ ""-i"", var8.getAbsolutePath(), ""-o"", var10.getAbsolutePath(), ""outputValueUnitRatio"", ""1000""}); } } "	0	0	1	1	0	0
@Override public List<Message> Func1(String var1, String var2) { return list(var1, var2, null, 0); } 	1	0	1	0	1	0
"@Override public void Func1(ActionEvent var1) { if(buttonGroup.getSelection() == null) { return; } controller.setWorking(true); int var2; try { var2 = Integer.parseInt(textField1.getText()); } catch(NumberFormatException numberException) { ErrorDialog var3 = new ErrorDialog(""Die eingegebene var2 Nummer ist keine Zahl!""); return; } if(var1.getSource().equals(neuButton)) { if(buttonGroup.getSelection().equals(WFRadioButton.getModel())) { selectedType = TypeDamage.WF; } else if(buttonGroup.getSelection().equals(STRadioButton.getModel())) { selectedType = TypeDamage.ST; } else if(buttonGroup.getSelection().equals(SSichRadioButton.getModel())) { selectedType = TypeDamage.SSICH; } DataDamage var4 = new DataDamage(selectedType, textField2.getText(), (String) comboBox1.getItemAt(comboBox1.getSelectedIndex()), textField3.getText(), textField4.getText(), var2); controller.setNewDamage(var4, selectedType); controller.setWorking(false); } else if(var1.getSource().equals(updateButton)) { controller.setWorking(true); if(buttonGroup.getSelection().equals(WFRadioButton.getModel())) { selectedType = TypeDamage.WF; } else if(buttonGroup.getSelection().equals(STRadioButton.getModel())) { selectedType = TypeDamage.ST; } else if(buttonGroup.getSelection().equals(SSichRadioButton.getModel())) { selectedType = TypeDamage.SSICH; } DataDamage var4 = new DataDamage(selectedType, textField2.getText(), (String) comboBox1.getItemAt(comboBox1.getSelectedIndex()), textField3.getText(), textField4.getText(), var2); controller.updateDamage(var4, selectedType, selectedRow); controller.setWorking(false); } else if(var1.getSource().equals(deleteButton)) { controller.setWorking(true); if(buttonGroup.getSelection().equals(WFRadioButton.getModel())) { selectedType = TypeDamage.WF; } else if(buttonGroup.getSelection().equals(STRadioButton.getModel())) { selectedType = TypeDamage.ST; } else if(buttonGroup.getSelection().equals(SSichRadioButton.getModel())) { selectedType = TypeDamage.SSICH; } controller.deleteDamage(selectedType, selectedRow); controller.setWorking(false); } } "	0	0	0	0	1	0
RectF Func1() { update(); return paddingRect; } 	0	0	1	0	0	0
public List<GridCoordinates> Func1() { List<GridCoordinates> var1 = new ArrayList<>(); for (int var2=0; var2 < getChildCount(); var2++) { lifeCell = (LifeCellView)getChildAt(var2); if(lifeCell.getState()){ int var3 = var2 % getColumnCount(); int var4 = var2/getColumnCount(); var1.add(new GridCoordinates(var3, var4)); } } return var1; } 	0	0	0	0	1	0
"@Test public void Func1() throws Exception { String var1 = ""#(y).(!(x).(x*y=y))""; BoolExpr var2 = FormulaToZ3Translator.translatePredicate(var1, ctx); s.add(var2); Status var3 = s.var3(); assertEquals(Status.SATISFIABLE, var3); } "	0	0	0	0	1	0
"private String Func1(){ String var1 = """"; String [] var2 = buildDayAgeArray(client.getDetails().get(""history_umur""), client.getDetails().get(""history_umur_hari"")).split("",""); var1 = var2[0].equals("""") ? """" : """"+(Integer.parseInt(var2[0])/30); for(int var3=1;var3<var2.length;var3++){ var1 = var1 + "","" + (Integer.parseInt(var2[var3])/30); } return var1; } "	0	0	0	0	1	0
"public static void Func1(String[] var1) { SwingUtilities.invokeLater(()->{ try { UIManager.setLookAndFeel(""javax.swing.plaf.nimbus.NimbusLookAndFeel""); } catch (Throwable e) { FileHandler.log(e.getMessage()); } finally{ new FileCopyManager(appName); } }); } "	0	0	1	0	1	0
"public void Func1() { Log.i(TAG, ""Attempting to sign in""); mUserView.setError(null); mPasswordView.setError(null); String var1 = mUserView.getText().toString().toLowerCase(Locale.US) .replaceAll(""\\s"", """"); String var2 = mPasswordView.getText().toString(); boolean var3 = false; View var4 = null; if (!TextUtils.isEmpty(var2) && !isPasswordValid(var2)) { mPasswordView.setError(getString(R.string.error_invalid_password)); var4 = mPasswordView; var3 = true; } if (TextUtils.isEmpty(var1)) { mUserView.setError(getString(R.string.error_field_required)); var4 = mUserView; var3 = true; } else if (!isUserValid(var1)) { mUserView.setError(getString(R.string.error_invalid_username)); var4 = mUserView; var3 = true; } if (var3) { var4.requestFocus(); } else { mUser = var1; mPassword = var2; ParseQuery<AdminAccounts> var5 = ParseQuery.getQuery(AdminAccounts.class); var5.whereContains(ParseConstants.admin_username, mUser); var5.setLimit(2); var5.findInBackground(new FindCallback<AdminAccounts>() { @Override public void Func2(List<AdminAccounts> var6, ParseException var7) { if (var7 != null && var6.size() < 1) { Log.i(TAG, ""No organization accounts found""); mUserView.setError(getString(R.string.error_incorrect_username)); mUserView.requestFocus(); } else { AdminAccounts var8 = var6.get(0); if (var8.getUsername().equals(mUser) && var8.getPassword().equals(mPassword)) { Log.i(TAG, ""Signed in successfully""); Toast.makeText(getApplicationContext(), ""Signed in successfully :)"", Toast.LENGTH_SHORT).show(); SharedPreferences.Editor var9 = getSharedPreferences(PREFS_NAME, MODE_PRIVATE).edit(); var9.putBoolean(signedInPref, true); var9.putString(currentUserPref, var8.getUsername()); var9.putString(currentOrgPref, var8.getOrganizatonName()); if (var9.commit()) Log.i(TAG, ""Preferences saved successfully""); else Log.i(TAG, ""Preferences failed to save""); finish(); // ends activity once signed in } else { Log.i(TAG, ""Sign in failed... incorrect var2""); mPasswordView.setError(getString(R.string.error_incorrect_password)); mPasswordView.requestFocus(); } } } }); } } "	1	0	1	0	0	0
"private void Func1(NodeTemplate var1, TNodeTemplate var2) { final TNodeTemplate.Capabilities var3 = new TNodeTemplate.Capabilities(); for (final Entry<String, Object> var4 : var1.getCapabilities().entrySet()) { if (var4.getValue() instanceof HashMap) { final Map<?, ?> var5 = (Map<?, ?>) var4.getValue(); final TCapability var6 = new TCapability(); var6.setName(var4.getKey()); String var7 = ""CAPABILITY_TYPE""; try { var7 = (String) var5.get(""type""); } catch (final Exception e) { System.out.println(""No capability type defined or illegal value, using default.""); } var6.setType(new QName(var7)); var6.setId(var2.getId() + ""_"" + var4.getKey()); var3.getCapability().add(var6); } } var2.setCapabilities(var3); } "	0	0	0	0	1	0
"public TrendReportTransactionDataRoot Func1 (String var1, int var2) throws PcException, ClientProtocolException, IOException { String var3 = String.format(baseURL + ""/%s/%s/%s"", TREND_REPORT_RESOURCE_NAME, var1,var2); HttpGet var4 = new HttpGet(var3); HttpResponse var5 = executeRequest(var4); String var6 = IOUtils.toString(var5.getEntity().getContent()); return TrendReportTransactionDataRoot.xmlToObject(var6); } "	0	0	0	0	1	0
"public String Func1() { DBConnection var1 = new DBConnection(); ResultSet var2; int var3 = 0; try { String var4 = ""SELECT var3 "" + ""FROM service_prices "" + ""WHERE service_name = '"" + service + ""' "" + ""AND   start_date <= '"" + LocalDate.now().toString() + ""' "" + ""AND   end_date >= '"" + LocalDate.now().toString() + ""'""; var2 = var1.executeQuery(var4); if (var2.next()) { var3 = var2.getInt(Table.PRICE); } LocalDate var5 = LocalDate.parse(startDate); LocalDate var6 = LocalDate.parse(endDate); var6 = var6.plusDays(1); while (!var5.equals(var6)) { var4 = ""INSERT INTO bills "" + ""VALUES (DEFAULT, "" + reservationID + "", "" + ""'"" + var5.toString() + ""', "" + var3 + "", "" + ""'"" + service + ""')""; var1.executeUpdate(var4); var5 = var5.plusDays(1); } } catch (Exception e) { e.printStackTrace(); } return ""staff""; } "	0	0	0	0	1	0
@PostConstruct private void Func1() { analysisEngineURL = yonaProperties.getAnalysisService().getServiceURL(); } 	1	0	1	0	1	0
"@Override public void Func1(String var1, String var2) throws DockerException, InterruptedException { manageNetworkConnection(var1, ""connect"", var2); } "	0	0	0	0	1	0
"public static LTRScoringModel Func1(String var1, String var2, String var3) throws ModelException, Exception { URL var4 = TestRerankBase.class.getResource(""/modelExamples/"" + var1); final String var5 = FileUtils.readFileToString(new File(var4.toURI()), ""UTF-8""); final ManagedModelStore var6 = getManagedModelStore(); var4 = TestRerankBase.class.getResource(""/featureExamples/"" + var2); final String var7 = FileUtils.readFileToString( new File(var4.toURI()), ""UTF-8""); Object var8 = null; try { var8 = ObjectBuilder.fromJSON(var7); } catch (final IOException ioExc) { throw new ModelException(""ObjectBuilder failed parsing json"", ioExc); } final ManagedFeatureStore var9 = getManagedFeatureStore(); var9.doDeleteChild(null, (var3 == null ? ""_DEFAULT_"" : var3)); // is this safe?? var9.applyUpdatesToManagedData(var8); var6.setManagedFeatureStore(var9); // can we skip this and just use var9 directly below? final LTRScoringModel var10 = ManagedModelStore.fromLTRScoringModelMap( solrResourceLoader, mapFromJson(var5), var6.getManagedFeatureStore()); var6.addModel(var10); return var10; } "	0	0	1	1	1	0
"private static void Func1(String var1) { System.out.println(""Titanium Image Resizer\n\nError: "" + var1 + ""\n\nUsage:\n  java -cp .:imgscalr-lib-4.2.jar -Djava.awt.headless=true resize <source> <dest> <width> [<height>]""); System.exit(1); } "	0	0	0	0	1	0
@Override public void Func1(Bundle var1) { super.Func1(var1); ClientCommunicator.getInstance().setContext(this.getActivity()); } 	0	0	0	0	1	0
private Formula Func1(Declaration.Named.Type var1, Expr var2) { Tuple<Block> var3 = var1.getInvariant(); Formula var4 = Formulae.extractTypeInvariant(var1.getVariableDeclaration().getType(), var2, types); for (int var5 = 0; var5 != var3.size(); ++var5) { Formula var6 = Formulae.toFormula(var3.getOperand(var5), types); var4 = var4 == null ? var6 : new Formula.Conjunct(var4, var6); } if (var4 == null) { return null; } else { Expr.VariableAccess var7 = new Expr.VariableAccess(var1.getVariableDeclaration()); var4 = (Formula) Formulae.substitute(var7, var2, var4); return Formulae.simplify(var4, types); } } 	0	0	0	0	1	0
"private State Func1(Formula var1, State var2) { Formula var3 = generateImplicitAxioms(var1); if (var3 != null) { var3 = var2.allocate(Formulae.simplify(var3, types)); var2 = var2.set(""implicit"", var3, var1); } return var2; } "	0	0	0	0	1	0
"@Override public void Func1(View var1) { Context var2 = itemView.getContext(); if (!post.getUrl().isEmpty()) { Uri var3 = Uri.parse(post.getUrl()); new ReadingHistoryController(var2).addReadPost(var2, post); CustomTabsIntent var4 = new CustomTabsIntent.Builder().build(); var4.launchUrl(var2, var3); } else { Toast.makeText(var2, ""Link not found"", Toast.LENGTH_SHORT).show(); } } "	0	0	1	0	1	0
public void Func1() { persistence = Domain.getPersistenceService(); persistence.open(); loginService = new LoginService(persistence); } 	0	0	0	0	1	0
"private void Func1(Object var1, LatencyType var2, boolean var3, String var4, Tuple var5, Map<String, String> var6, Throwable var7) { final long var8 = System.nanoTime(); Latencies var9; synchronized (cacheLock) { switch(var2) { case EXECUTE: if (var3) { var9 = new Latencies(var8, var4, var5); latenciesPerId.put(var1, var9); if (logger.isDebugEnabled()) { logger.debug(""Monitoring latency for key {}"", var1); } } else { var9 = latenciesPerId.getIfPresent(var1); if (var9 != null &&  var9.setEndNanos(var2, var8) && var9.getLatencyNanos(var2).isPresent()) { latenciesPerId.invalidate(var1); long var10 = System.currentTimeMillis(); long var11 = NANOSECONDS.toMillis(var9.getLatencyNanos(var2).get()); LatencyEvent var12 = new LatencyEvent(var11).var4(var9.getService()).error(var7); if (var5 != null) { var12.var5(var9.getTuple()); } if (var6 != null) { var12.var6(var6); } var12.attribute(""startTime"", Long.toString(var10 - var11)); send(var12); final Optional<Long> var13 = var9.getLatencyNanos(LatencyType.EMIT); if (var13.isPresent()) { final long var14 = NANOSECONDS.toMillis(var13.get()); if (var14 >= 5) { RiemannEvent var15 = new RiemannEvent() .metric(var14) .var4(var4 + "" emit latency."") .tags(""emit-latency"") .var4(this.boltService); if (var5 != null) { var15.var5(var5); } send(var15); } } if (logger.isDebugEnabled()) { logger.debug(""Monitored latency {} for key {}"", var11, var1); } } else { if (!extraAckReportingExclusions.contains(this.boltService)) { send(new ExceptionEvent(""Latency monitor doesn't recognize key."").var4(var4)); if (var7 == null) { logger.warn(""Latency monitor doesn't recognize key {}."", var1); } else { send(new ExceptionEvent(var7).var4(this.boltService)); logger.warn(""Latency monitor doesn't recognize key {}. Swallowed exception {}"", var1, var7); } } else { logger.trace(""Excluded var12 for non recognized key in latency monitor {}."", var1); } } } break; default: var9 = latenciesPerId.getIfPresent(var1); if (var9 != null) { if (var3) { var9.setStartNanos(var2, var8); } else { var9.setEndNanos(var2, var8); } } break; } } } "	0	0	1	0	0	0
"@Nullable @Override public Void Func1(@Nullable Action.ActionContext var1) { if (var1 == null) throw new NullPointerException(""WHUT""); IInventory var2 = var1.var14.inventory; final Multiset<ItemStackHolder> var3 = InventoryHandler.INSTANCE.getInventoryContent(var1); final UnmodifiableIterator<Multiset.Entry<ItemStackHolder>> var4 = Multisets.copyHighestCountFirst(var3).entrySet().iterator(); int var5; int var6; if (var2 == var1.player.inventory) { boolean var7 = var1.player.openContainer == var1.player.inventoryContainer; boolean var8 = var1.var14.getSlotIndex() < 9; InventoryHandler.InventoryMapping var9 = var1.mapping.get(var1.player.inventory); int var10 = var7 ? 4 : 0; var5 = var8 ? var9.end - 8 : var9.begin + var10; var6 = var8 ? var9.end + 1: var9.end - 8; } else { InventoryHandler.InventoryMapping var9 = var1.mapping.get(var1.var14.inventory); var5 = var9.begin; var6 = var9.end + 1; } Multiset.Entry<ItemStackHolder> var11 = var4.hasNext() ? var4.next() : null; int var12 = var11 != null ? var11.getCount() : 0; for (int var13 = var5; var13 < var6; var13++) { final Slot var14 = var1.player.openContainer.getSlot(var13); ItemStack var15 = null; if (var12 > 0 && var11 != null) { var15 = var11.getElement().is.copy(); var15.stackSize = var12 > var15.getMaxStackSize() ? var15.getMaxStackSize() : var12; } if (!var14.isItemValid(var15) || !var14.canTakeStack(var1.player)) continue; var14.putStack(var15); var12-= (var15 != null ? var15.stackSize : 0); if (var12 ==0) { var11 = var4.hasNext() ? var4.next() : null; var12 = var11 != null ? var11.getCount() : 0; } } return null; } "	0	0	0	0	1	0
public void Func1(List<JInterfaceType> var1, String var2) { assert JType.replaces(var1, superInterfaces); superInterfaces = Lists.normalize(var1); if (Strings.isNullOrEmpty(this.var2)) { this.var2 = var2; } } 	0	0	0	0	1	0
"@Override public void Func1(CuratorFramework var1, ConnectionState var2) { if ( var2 == ConnectionState.RECONNECTED ) { try { log.debug(""Re-registering due to reconnection""); reRegisterServices(); } catch ( Exception e ) { log.error(""Could not re-register instances after reconnection"", e); } } } "	0	0	1	0	1	0
@Override public void Func1 () { super.Func1(); if (lastImageViewSize == null || !imageView.getBounds().getSize().equalToSize(lastImageViewSize)) { updateImage(); } } 	0	0	0	0	1	0
public static ArtMethod Func1(Method var1) { if (Build.VERSION.SDK_INT >= 23) { return  Runtime.is64Bit() ? new ArtMethodStructV23_64Bit(var1) : new ArtMethodStructV23(var1); } else if (Build.VERSION.SDK_INT >= 21) { return Runtime.is64Bit() ? new ArtMethodStructV22_64Bit(var1) : new ArtMethodStructV22(var1); } else { return new ArtMethodStructV19(var1); } } 	0	0	1	1	0	0
@Override public float Func1() { float var1 = 0; var1 += Constantes.coutCamion; var1 += Constantes.coutDureeCamion * (this.getDuree()/3600); var1 += Constantes.coutTrajetCamion * (this.getDistance()/1000); if(type == Type.TRAIN) { var1 += Constantes.coutSecondeRemorque; var1 += Constantes.coutTrajetSecondeRemorque * (this.getDistance()/1000); } setCost(var1); return var1; } 	0	0	0	0	1	0
@Test public void Func1() { Collection< Integer > var1 = new ArrayList<>(); Collection< Integer > var2 = Collections.makeFilteredCollection( var1, new Multiple< Integer >( 1 ) ); var1.add( 1 ); var1.add( 2 ); var1.add( 3 ); var1.add( 4 ); Assert.assertTrue( var2.removeAll( Arrays.asList( new Integer[] { 1, 2, 3, 4 } ) ) ); } 	0	0	1	1	1	0
public void Func1() { Display.getDefault().asyncExec(new Runnable() { @Override public void Func2() { if (panelController != null) { panelController.dispose(); } if (!windowShell.isDisposed()) { windowShell.dispose(); } } }); } 	0	0	1	1	0	0
"public List<ODocument> Func1(String var1) { return query(""select * from post where status='published' where ? in tags order by date desc"", var1); } "	0	0	0	0	1	0
public void Func1(double var1, double var2) { Bounds var3 = group.localToScene(group.getBoundsInLocal()); if(!(var1 > var3.getMaxX() || var1 < var3.getMinX() || var2 > var3.getMaxY() || var2 < var3.getMinY())) { editorRunTimeData.Func1((float)var1, (float)var2); } else { } } 	1	0	0	0	1	0
public boolean Func1() { for (Map.Entry<String, List<RestrictionDTO>> var1 : getDeployableRoles().entrySet()) { if (sessionContext.isCallerInRole(var1.getKey())) { return true; } } return hasUserRestriction(Permission.DEPLOYMENT.name(), null, null, null, null); } 	0	0	0	0	1	0
"@Override public IModel Func1(ResourceLocation var1) { int var2 = var1.getResourcePath().lastIndexOf('/'); String var3 = var1.getResourcePath().substring(var2 < 0 ? 0 : var2 + 1, var1.getResourcePath().length() - EXTENSION .length()); var3 = var3.toLowerCase(); if(cache == null) { cache = new THashMap<>(); loadFilesIntoCache(); } if(!cache.containsKey(var3)) { return ModelLoaderRegistry.getMissingModel(); } ModifierModel var4 = new ModifierModel(); for(Map.Entry<String, String> var5 : cache.get(var3).entrySet()) { IModifier var6 = TinkerRegistry.getModifier(var5.getKey()); if(var6 == null) { TinkerRegistry.log.debug(""Removing texture {} for modifier {}: No modifier present for texture"", var5.getValue(), var5.getKey()); continue; } var4.addModelForModifier(var6.getIdentifier(), var5.getValue()); if(var6.hasTexturePerMaterial()) { CustomTextureCreator.registerTexture(new ResourceLocation(var5.getValue())); } } return var4; } "	0	0	1	0	1	0
"private void Func1() { cache.put(defaultName, new THashMap<String, String>()); for(Map.Entry<String, List<ResourceLocation>> var1 : locations.entrySet()) { String var2 = var1.getKey(); List<ResourceLocation> var3 = var1.getValue(); for(ResourceLocation var4 : var3) { try { Map<String, String> var5 = ModelHelper.loadTexturesFromJson(var4); for(Map.Entry<String, String> var6 : var5.entrySet()) { String var7 = var6.getKey().toLowerCase(); String var8 = var6.getValue(); if(!cache.containsKey(var7)) { cache.put(var7, new THashMap<String, String>()); } if(!cache.get(var7).containsKey(var2)) { cache.get(var7).put(var2, var8); } } } catch(IOException e) { TinkerRegistry.log.error(""Cannot load var2-model {}"", var1.getValue()); } } if(!cache.get(defaultName).containsKey(var2)) { throw new TinkerAPIException(String.format(""%s Modifiers model does not contain a default-var1!"", var2)); } } Map<String, String> var9 = cache.get(defaultName); Iterator<Map.Entry<String, Map<String, String>>> var10 = cache.entrySet().iterator(); while(var10.hasNext()) { Map.Entry<String, Map<String, String>> var11 = var10.next(); Map<String, String> var12 = var11.getValue(); for(Map.Entry<String, String> var13 : var9.entrySet()) { if(!var12.containsKey(var13.getKey())) { var12.put(var13.getKey(), var13.getValue()); } } } } "	0	0	1	0	1	0
"public static String Func1(String var1) { return var1.toLowerCase().replaceAll("" "", """"); } "	0	0	0	0	1	0
public EnzymeModel Func1(String var1) throws EnzymeRetrieverException { EnzymeModel var2 = getEnzymeModel(var1); addReactionsPathways(var2); addProteinStructures(var2); addMolecules(var2); addDiseases(var2); return var2; } 	0	0	0	0	1	0
@Override public void Func1(View var1, Bundle var2, Reason var3) { super.Func1(var1, var2, var3); emptyView = var1.findViewById(R.id.fragment_note_list_listViewEmpty); buttonAddNote = (Button) var1.findViewById(R.id.fragment_note_list_buttonAdd); buttonAddNote.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var4) { noteController.toCreateNote(); } }); mListView = (RecyclerView) var1.findViewById(R.id.fragment_note_list_listView); mLayoutManager = new LinearLayoutManager(getActivity()); mListView.setLayoutManager(mLayoutManager); if (var3 == Reason.FIRST_TIME) { updateList(); } } 	0	0	0	0	1	0
@Async public void Func1() { genres.forEach((book, genre) -> { book = booksRepository.findByTitleAndSubtitleAndPublisher(book.getTitle(), book.getSubtitle(), book.getPublisher()); book.getGenres().add(genre); booksRepository.save(book); }); genres.clear(); } 	0	0	0	1	1	0
@Override public int Func1() throws IOException { return buf.get(); } 	0	0	0	0	1	0
"protected void Func1(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException { HttpSession var3 = var1.getSession(false); UserBean var4 = (var3 != null) ? (UserBean) var3.getAttribute(""var4"") : null; if (var4 == null) { var2.sendError(403); } else { String var5 = var1.getHeader(""var9""); String var6 = var1.getHeader(""var10""); String [] var7 = var5.split("",""); int var8 = var7.length; int [] var9 = new int[var8]; int var10 = Integer.parseInt(var6); for (int var11 = 0; var11 < var8; var11++) { var9[var11] = Integer.parseInt(var7[var11]); } if (TestsDAO.openTest(var9, var10)) { var2.getOutputStream().println(""Success""); } else { var2.sendError(1); } } } "	0	0	0	0	1	0
public Vector3[] Func1() { Orientations var1 = Orientations.from(getRotation()); return structure.mapType(xCoord, yCoord, zCoord, 2, var1); } 	0	0	0	0	1	0
@Override public AxisAlignedBB Func1() { Vector3 var1 = structure.getStructureDimensions(); Vector3 var2 = new Vector3(this).sub(var1), var3 = new Vector3(this).add(var1); return Vector3.makeAABB(var2, var3); } 	0	0	0	0	1	0
@Override public boolean Func1(World var1, Random var2, StructureBoundingBox var3) { recalcHeightOffsets(var1, var3, 1); Vector3 var4 = new Vector3(0, -4, 0); Vector3 var5 = new Vector3(scatteredFeatureSizeX - 1, 0, scatteredFeatureSizeZ - 1); Vector3 var6 = Vector3.zero; Vector3 var7 = new Vector3(scatteredFeatureSizeX - 1, scatteredFeatureSizeY - 1, scatteredFeatureSizeZ - 1); fill(var1, var3, var6, var7, net.minecraft.init.Blocks.air); fill(var1, var3, var4, var5, net.minecraft.init.Blocks.sandstone); StructureConfiguration var8 = TileStargateBase.structure; Vector3 var9 = new Vector3(Math.floor(scatteredFeatureSizeX / 2), 0, Math.floor(scatteredFeatureSizeZ / 2)); paintStructure(var8, var1, var3, var9.fx(), var9.fy(), var9.fz(), rotation, net.minecraft.init.Blocks.sandstone, 0); return true; } 	0	0	0	0	1	0
"@Test public void Func1() { Questionnaire [] var1 = mLibrary.getQuestionnaires(); assertTrue(var1.length > 0); for(Questionnaire var2:var1) { Log.e(TAG, ""questionaire: ""+var2.dbId); } } "	0	0	0	0	1	0
"public static void Func1(String[] var1){ Ex var2 = new AddEx(); Ex var3 = new DivEx(); var2.add(var3); System.out.println(var2.report()); var3.multi(new PlainEx(20)); var3.multi(new VarEx(""Pipka"")); var3.multi(new VarEx(""Pipka"")); System.out.println(var2.report()); var3.div(new PlainEx(4)); var3.div(new VarEx(""Pipka"")); String var4 = var2.report(); Cruncher var5 = new DivCruncherSimplify(); System.out.println(var5.crunch(var3)); String var6 = var2.report(); System.out.println(""Input : "" + var4); System.out.println(""=====================""); System.out.println(""Output : "" + var6); } "	1	0	1	0	1	0
"public static boolean Func1(String var1) { if (log.isDebugEnabled()) { log.debug(""Validating uri: "" + var1); } if (IdentityUtil.isBlank(var1)) { log.error(""The redirection URI is either null or blank.""); return false; } try { URI var2 = new URI(var1); } catch (URISyntaxException e) { String var3 = ""The redirection URI: "" + var1 + "", is not a valid URI.""; log.error(var3, e); return false; } return true; } "	1	0	0	1	1	0
public int Func1() { return mContentInsets.getStart(); } 	0	0	1	0	1	0
"@Test public void Func1() { bodyProcessor = new MethodeLinksBodyProcessor(documentStoreApiClient, uri); when(builder.get(ClientResponse.class)).thenReturn(clientResponseWithCode(200)); String var1 = ""<var1><a href=\""http://www.ft.com/cms/s/"" + uuid + "".html\"" title=\""Some absurd text here\""> Link Text</a></var1>""; String var2 = bodyProcessor.process(var1, new DefaultTransactionIdBodyProcessingContext(TRANSACTION_ID)); assertThat(var2, is(identicalXmlTo(""<var1><ft-content id=\"""" + uuid + ""\"" title=\""Some absurd text here\"" type=\"""" + MethodeLinksBodyProcessor.ARTICLE_TYPE + ""\""> Link Text</ft-content></var1>""))); } "	0	0	1	0	1	0
@Override public Collection<String> Func1() { return map.keySet(); } 	0	0	1	0	1	0
"@Override public final void Func1(MaterialData var1) { try { GameThread.synch(() -> { disposalAction.run(); uniformLocationMap.clear(); shader = (GLSLShader) var1.getShader(); recompile(); rebindVaribles(var1); }); } catch (InterruptedException e) { logger.error(""Failed to reload {}"", getUrn(), e); } } "	0	0	1	0	1	0
@Override public void Func1(ResourceLocation var1) { this.render.Func1(var1); } 	0	0	0	0	1	0
"private void Func1() throws TestingException { int var1 = Utils.getMethodCaller(0).getLineNum() + 1; String var2 = Utils.toStringThrowable(new Throwable(""Example"")); String[] var3 = Utils.split(var2, '\n'); assertObjectEqual(var3[0], ""java.lang.Throwable: Example"", ""bad line 1 of Throwable dump""); assertObjectEqual(var3[1], ""\tat ccre.testing.TestWorkarounds.Func1(TestWorkarounds.java:"" + var1 + "")"", ""bad line 1 of Throwable dump""); assertIdentityEqual(Utils.toStringThrowable(null), null, ""should have returned null!""); } "	0	0	0	0	1	0
"public static String Func1(String var1, String var2, String var3, ZygosityType var4, String var5, String var6, String var7) { String var8 = var1; var8 += ""/charts?accession="" + var2; var8 += ""&allele_accession="" + var3; if (var4 != null) { var8 += ""&var4="" + var4.name(); } if (var5 != null) { var8 += ""&parameter_stable_id="" + var5; } if (var6 != null) { var8 += ""&pipeline_stable_id="" + var6; } if (var7 != null) { var8 += ""&phenotyping_center="" + var7; } return var8; } "	0	0	0	0	1	0
public void Func1() { frame.show(); } 	0	0	1	0	1	0
@Override public void Func1(View var1) { loadData(force); } 	0	0	0	0	1	0
@Override public void Func1(ArticleDTO var1) { Func1(var1.fetchArticle()); } 	0	0	0	0	1	0
private ResultSet Func1(PreparedStatement var1){ try{ ResultSet var2 = var1.executeQuery(); try{ var1.close(); } catch(SQLException e){ Logger var3 = Logger.getLogger(DB.class.getName()); var3.log(Level.SEVERE, e.getMessage(), e); } return var2; } catch(SQLException e){ Logger var3 = Logger.getLogger(DB.class.getName()); var3.log(Level.WARNING, e.getMessage(), e); } return null; } 	0	0	0	1	0	0
private boolean Func1() { boolean var1 = this.world.getDifficulty() == EnumDifficulty.HARD || this.getHealth() <= this.getMaxHealth() * 0.75f; if (var1) { if (this.getHealth() <= this.getMaxHealth() * 0.25f) { this.setRadialSpurts(true); if (this.world.getDifficulty() == EnumDifficulty.HARD) { this.setInvulTime(84); } } else if (this.getHealth() <= this.getMaxHealth() * 0.5f && this.world.getDifficulty() == EnumDifficulty.HARD) { this.setRadialSpurts(true); } this.setRadialSkullTicks(this.getRadialSkullTicks() + 1); radialStartYaw = ((this.rotationYaw + 180) % 360) - 180; this.setAttackTarget(null); this.world.playSound(null, new BlockPos(this.posX, this.posY + (double) this.getEyeHeight(), this.posZ), ModSounds.charge, SoundCategory.HOSTILE, 1.0f, 1.0f); } return var1; } 	0	0	0	0	1	0
"private void Func1 ( final BundleInformation var1, final Attributes var2 ) { for ( final AttributedValue var3 : emptyNull ( Headers.parseList ( var2.getValue ( Constants.REQUIRE_BUNDLE ) ) ) ) { final String var4 = var3.getValue (); final String var5 = var3.getAttributes ().get ( ""version"" ); VersionRange var6 = null; if ( var5 != null ) { var6 = new VersionRange ( var5 ); } final boolean var7 = ""var7"".equals ( var3.getAttributes ().get ( ""resolution"" ) ); final boolean var8 = ""var8"".equals ( var3.getAttributes ().get ( ""visibility"" ) ); var1.getBundleRequirements ().add ( new BundleRequirement ( var4, var6, var7, var8 ) ); } } "	0	0	0	0	1	0
public boolean Func1(ServerEntityIdentifier var1) { return fetchedServerEntityStream().filter(serverEntity -> serverEntity.is(var1)).findFirst().isPresent(); } 	0	0	0	0	1	0
"public static String Func1(Context var1) { DatabaseSettings var2 = new AppSettings(var1).getDatabaseSettings(); String var3 = var2.Func1(); if (BuildConfig.DEBUG) Log.d(LOGCAT, ""database setting: "" + var3); if (var3 != null) { File var4 = new File(var3); if (var4.getAbsoluteFile().exists())  { return var4.toString(); } } String var5 = getDatabaseDirectory(var1); String var6 = var5 + ""/data.mmb""; var2.setDatabasePath(var6); ExceptionHandler var7 = new ExceptionHandler(var1); if (var3.equals(var6)) { var7.showMessage(""Default database file will be created at "" + var6); } else { var7.showMessage(""Database "" + var3 + "" not found. Using default:"" + var6); } return var6; } "	0	0	0	0	1	0
@Override public void Func1(TransactionResponse var1) { transactionResponse = var1; view.onPaymentFailure(var1); } 	0	0	0	0	1	0
"public static Component Func1(final FileUnzipEvent var1) { Preconditions.checkNotNull(var1); return Text.of(""Read the lock file. "", Color.BLUE); } "	0	0	0	0	1	0
"public void Func1(int var1) throws SQLException { connection = myDatabase.getDatabaseConn(); PreparedStatement var2 = connection.prepareStatement(""SELECT * FROM uses WHERE ingredient_id = ?;""); var2.setInt(1,var1); ResultSet var3 = var2.executeQuery(); if(var3.next()){ JOptionPane.showMessageDialog(null, ""This ingredient is in use by at least one recipe and cannot be deleted.""); } else{ var2 = connection.prepareStatement(""DELETE FROM ingredient WHERE var1 = ?;""); var2.setInt(1,var1); var2.execute(); } connection.close(); } "	0	0	0	0	1	0
public void Func1() { if (expr != null) if (expr instanceof NodeBinary) { final NodeBinary var1 = (NodeBinary) expr; if (var1.operatorOverloadFunc == null) { final EnumInstructionOperand var2 = Semantics.getPrecedentType(var1.exprType1, var1.exprType2).getInstructionType(); if (var1.exprType1.getInstructionType() != var2) addFuncStmt(new GenNodePrimitiveCast(var1.exprType1.getInstructionType(), var2)); else if (var1.exprType2.getInstructionType() != var2) addFuncStmt(new GenNodePrimitiveCast(var1.exprType2.getInstructionType(), var2)); switch (var2) { case INT: case BYTE: case SHORT: case BOOL: var1.expr1.generate(); var1.expr2.generate(); switch (var1.operator.operation) { case LESS: opcode = IF_ICMPGE; break; case GREATER: opcode = IF_ICMPLE; break; case EQUAL: opcode = IF_ICMPNE; break; case NOT_EQUAL: opcode = IF_ICMPEQ; break; case LESS_EQUAL: opcode = IF_ICMPGT; break; case GREATER_EQUAL: opcode = IF_ICMPLT; break; } break; case LONG: case DOUBLE: case FLOAT: var1.expr1.generate(); var1.expr2.generate(); if (var2 == EnumInstructionOperand.LONG) extraOpcodes.add(Opcodes.LCMP); else if (var2 == EnumInstructionOperand.DOUBLE) extraOpcodes.add(DCMPG); else if (var2 == EnumInstructionOperand.FLOAT) extraOpcodes.add(FCMPG); switch (var1.operator.operation) { case LESS: opcode = IFGE; break; case GREATER: opcode = IFLE; break; case EQUAL: opcode = IFNE; break; case NOT_EQUAL: opcode = IFEQ; break; case LESS_EQUAL: opcode = IFGT; break; case GREATER_EQUAL: opcode = IFLT; break; } break; default: final boolean var3 = var1.expr1 instanceof NodeNull, var4 = var1.expr2 instanceof NodeNull; if (var3 ^ var4) { if (!var3) var1.expr1.generate(); else var1.expr2.generate(); switch (var1.operator.operation) { case NOT_EQUAL: opcode = IFNULL; break; case EQUAL: opcode = IFNONNULL; break; } } else // Compare the references switch (var1.operator.operation) { case NOT_EQUAL: opcode = IF_ACMPEQ; break; case EQUAL: opcode = IF_ACMPNE; break; } } } else { expr.generate(); opcode = IFEQ; } } else { expr.generate(); opcode = IFEQ; } } 	0	0	0	0	1	0
@Override public InputStream Func1() throws IOException, UnsupportedFileOperationException { return file.Func1(); } 	0	0	1	1	0	0
@Override public RandomAccessInputStream Func1() throws IOException, UnsupportedFileOperationException { return file.Func1(); } 	0	0	1	1	0	0
@Override public void Func1(AbstractFile var1) throws IOException, UnsupportedFileOperationException { file.Func1(var1); } 	0	0	1	1	0	0
public final void Func1(AbstractFile var1) throws IOException, UnsupportedFileOperationException { Func1(var1,isDirectory() ? FilePermissions.DEFAULT_DIRECTORY_PERMISSIONS : FilePermissions.DEFAULT_FILE_PERMISSIONS); } 	0	0	1	1	0	0
public final void Func1(String var1) throws IOException, UnsupportedFileOperationException { getChild(var1).Func1(); } 	0	0	1	1	0	0
protected final void Func1(AbstractFile var1, boolean var2, boolean var3) throws IOException, FileTransferException { if(!fileURL.schemeEquals(fileURL) || !var1.getTopAncestor().getClass().equals(getTopAncestor().getClass()) || (!var3 && !var1.getURL().hostEquals(fileURL))) throw new IOException(); checkCopyPrerequisites(var1, var2); } 	0	0	1	1	0	0
"protected void Func1(List<String> var1, List<String> var2, List<String> var3) { double var4 = 0; double var5 = 0; double var6 = 0; double var7 = 0; Set<String> var8 = new HashSet<>(var1); for (int var9 = 0; var9 < var2.size(); var9++) { String var10 = var2.get(var9); String var11 = var3.get(var9); String[] var12 = var11.var12("" ""); if (var8.contains(var10)) { if (var12[0].equals(var12[1])) { var4++; } else { var5++; } } else { if (var12[0].equals(var12[1])) { var6++; } else { var7++; } } } invocabAccuracy = var4 / (var4 + var5); outvocabAccuracy = var6 / (var6 + var7); } "	0	0	0	0	1	0
"@Override public void Func1(URL var1, ResourceBundle var2) { menuBar.setUseSystemMenuBar(true); if (System.getProperty(""os.name"").startsWith(""Mac OS X"")) { System.setProperty(""bendalab.animalkeeping"", ""Animal Keeping""); aboutMenuItem.setVisible(false); quitMenuItem.setVisible(false); } findBox.getItems().clear(); findBox.getItems().addAll(""Person"", ""Subject"", ""Housing unit"", ""Treatment""); findBox.getSelectionModel().select(""Subject""); this.scrollPane.setContent(null); if (!Main.isConnected()) { LoginController var3 = new LoginController(); var3.addEventHandler(LoginController.DatabaseEvent.CONNECTING, this::connectedToDatabase); var3.addEventHandler(LoginController.DatabaseEvent.CONNECTED, this::connectedToDatabase); var3.addEventHandler(LoginController.DatabaseEvent.FAILED, this::connectedToDatabase); this.scrollPane.setContent(var3); } else { try{ connectedToDatabase(null);} catch(Exception e){ e.printStackTrace(); } } borderPane.prefHeightProperty().bind(this.prefHeightProperty()); navigationBar.prefHeightProperty().bind(this.prefHeightProperty()); panes = new Vector<>(); panes.add(inventoryPane); panes.add(subjectsPane); panes.add(treatmentsPane); panes.add(personsPane); panes.add(animalHousingPane); panes.add(licensesPane); refreshItem.setAccelerator(KeyCombination.keyCombination(""Shortcut+R"")); views = new HashMap<>(); } "	0	0	0	0	1	0
"@Override public void Func1(Object var1, final OnDetailsInteractionListener var2) { Following var3; if (var1 instanceof Following) { var3 = (Following) var1; } else { Log.e(TAG, ""Unexpected object type found when expecting an Following object""); return; } final ImageView var4 = (ImageView) itemView.findViewById(R.id.header_imageview); final ImageView var5 = (ImageView) itemView.findViewById(R.id.profile_imageview); final TextView var6 = (TextView) itemView.findViewById(R.id.username_textview); final TextView var7 = (TextView) itemView.findViewById(R.id.summary_textview); final TextView var8 = (TextView) itemView.findViewById(R.id.description_textView); final TextView var9 = (TextView) itemView.findViewById(R.id.followed_textview); final TextView var10 = (TextView) itemView.findViewById(R.id.views_textView); mDatabase.child(""users"").child(var3.uid).addListenerForSingleValueEvent(new ValueEventListener() { @Override public void Func2(DataSnapshot var11) { final User var12 = var11.getValue(User.class); if (var12 != null) { populateImageView(buildFileReference(var12.getUid(), var12.getHeaderImageUid(), StorageDataType.USERS), var4); populateImageView(buildFileReference(var12.getUid(), var12.getProfileImageUid(), StorageDataType.USERS), var5); populateTextView(var12.getUsername(), var6); populateTextView(var12.getSummary(), var7); populateTextView(var12.getDescription(), var8); populateTextView(Integer.toString(var12.getFollowedCount()), var9); populateTextView(Integer.toString(var12.getFollowing().size()), var10); itemView.setOnClickListener(new View.OnClickListener() { @Override public void Func3(View var13) { var2.onDetailsSelection(var12.getUid(), StorageDataType.USERS); } }); } } @Override public void Func4(DatabaseError var14) { Log.w(TAG, ""Unexpected cancellation of a Firebase Database query""); } }); } "	1	1	0	0	0	0
"public  static ModelAndView Func1(Request var1, Response var2) { int var3 = Integer.parseInt(var1.queryParams(""var3"")); ShoppingCartDao var4 = ShoppingCartDaoMem.getInstance(var1); var4.remove(var3); return renderProducts(var1, var2); } "	0	0	0	0	1	0
public AnchorPane Func1() { return upperPane; } 	0	0	0	1	0	0
public final void Func1(double var1, double var2) { cm.show(parent, var1, var2); } 	0	0	1	0	0	0
private void Func1() { this.lost = true; } 	0	0	1	0	1	0
"@Override public void Func1(Match Func1) { if (Func1.getLocation() != null) { StepDefinitionMatch var2 = (StepDefinitionMatch) Func1; Step var3 = (Step) getFieldValueInObject(var2, ""var3""); lifecycle.fire(new StepStartedEvent( var3.getKeyword() + "" "" + var3.getName())); } } "	0	0	0	0	1	0
public static <RETURN> Future<RETURN> Func1(final RSBRemote var1, final Class<? extends RETURN> var2) throws CouldNotPerformException { return Func1(null, var1, var2, 3); } 	0	0	0	0	1	0
public static <RETURN> Future<RETURN> Func1(final Object var1, final RSBRemote var2, final Class<? extends RETURN> var3) throws CouldNotPerformException { return Func1(var1, var2, var3, 3); } 	0	0	0	0	1	0
public static Future<Object> Func1(final RSBRemote var1) throws CouldNotPerformException { return Func1(null, var1, Object.class, 3); } 	0	0	0	0	1	0
"static String Func1(int var1, int var2) { String var3; Scanner var4 = new Scanner(System.in); System.out.println(""Try #"" + var1 + "" out of "" + var2 + "":""); System.out.println(""Please enter a var3 built from the letters above:""); var3 = var4.next(); return var3.toUpperCase(); } "	0	0	0	0	1	0
public void Func1(Vector<String> var1) { XProcConfiguration var2 = new XProcConfiguration(schemaAware); runtime = new XProcRuntime(var2); startReport(); for (String var3 : var1) { run(var3); } endReport(); } 	0	0	0	0	1	0
public void Func1() { stateLock.unlock(); } 	0	0	1	1	0	0
protected OperationInterface Func1( final String var1, final String var2) throws CoreException { Package var3 = this.getPackageWithNameFromCorrespondenceModel(var1); return this.createInterfaceInPackage(var3.getNamespacesAsString() + var3.getName(), var2, true); } 	1	0	1	1	0	0
"@Override public void Func1(ServiceInstance var1, Map<String, Object> var2) { String var3 = getTopic(var1); try { KafkaClient.getClient().changeConfig(var3, trans(var2)); LOG.info(""Resize kafka quota for var3 [{}] successful.""); } catch (OCKafkaException e) { LOG.error(""Change kafka var3 [{}] config failed: {}"", var3, e); throw new RuntimeException(e); } } "	0	0	0	0	1	0
private int Func1(int var1, int var2, int var3) { if  (var1 < 0 || var1 > MAXFD) return -1; SimpleFileDescriptor var4 = simpleFileDescriptors[var1]; if (var4.file == null) return -1; byte[] var5 = new byte[var3]; int var6 = var4.file.read(var5, 0, var3); if (var6 <= 0) return 0; int var7 = writeVirtualMemory(var2, var5); return var7; } 	1	0	1	0	1	0
public Double Func1() { return this.plugin.getPlayhead(); } 	0	0	0	0	1	0
@SubscribeEvent public void Func1(PlayerInteractEvent var1) { if(currentMultiblock != null && anchor == null && var1.action == Action.RIGHT_CLICK_BLOCK && var1.entityPlayer == Minecraft.getMinecraft().thePlayer) { anchor = var1.pos; angle = MathHelper.floor_double(var1.entityPlayer.rotationYaw * 4.0 / 360.0 + 0.5) & 3; var1.setCanceled(true); } } 	0	0	0	0	1	0
public static boolean Func1(World var1, BlockPos var2, EnumFacing.Axis var3) { for(BlockPos var4 : OBSIDIAN_LOCATIONS) if(var1.getBlockState(var2.add(var4)).getBlock() != Blocks.var4) return false; for(BlockPos var5 : PYLON_LOCATIONS.get(var3)) if(var1.getBlockState(var2.add(var5)).getBlock() != ModBlocks.var5 || !BotaniaAPI.internalHandler.isBotaniaFlower(var1, var2.add(var5))) return false; for(BlockPos var6 : FLOWER_LOCATIONS) if(!BotaniaAPI.internalHandler.isBotaniaFlower(var1, var2.add(var6))) return false; return true; } 	0	0	0	0	1	0
"protected IAttributes Func1(List<AttributeStatement> var1) { if (var1 == null || var1.isEmpty()) return null; IAttributes var2 = new UserAttributes(); for (AttributeStatement var3 : var1) { List<Attribute> var4 = var3.getAttributes(); for (Attribute var5 : var4) { if (var5.getAttributeValues().size() < 1) { _logger.error(""Empty attribute (skipped): "" + var5); continue; } XMLObject var6 = var5.getAttributeValues().get(0); String var7 = null; if (var6 instanceof XSString) { XSString var8 = (XSString)var6; var7 = var8.getValue(); } else if (var6 instanceof XSAny) { XSAny var8 = (XSAny)var6; var7 = var8.getTextContent(); } else { _logger.debug(""Unrecognized type of attribute (skipped): "" + var6.getClass().getName()); } if (var2.contains(var5.getName())) { _logger.debug(""Duplicate name for attribute (skipped): "" + var5.getName()); } else if (var7 == null) { _logger.debug(""No var7 for the value of ""+var5.getName()+"" (""+var7+""), ignoring.""); } else { _logger.debug(""Adding attribute to map: "" + var5.getName()); if (_bCompatible) { String var9 = var5.getNameFormat(); if (var9 != null && var9.equals(Attribute.UNSPECIFIED)) var9 = null; var2.put(var5.getName(), var9, var7); } else { var2.put(var5.getName(), var7); } } } } return var2; } "	0	0	1	1	1	0
private EntityRecord Func1(Object var1, EntityDto var2, List<FieldDto> var3, MotechDataService var4, EntityType var5) { if (var1 == null) { return null; } try { List<FieldRecord> var6 = new ArrayList<>(); for (FieldDto var7 : var3) { if (var5 != EntityType.STANDARD && var7.isVersionField()) { continue; } Object var8 = getProperty(var1, var7, var4); Object var9 = getDisplayValueForField(var7, var8); var8 = parseValueForDisplay(var8, var7.getMetadata(Constants.MetadataKeys.RELATED_FIELD)); FieldRecord var10 = new FieldRecord(var7); var10.setValue(var8); var10.setDisplayValue(var9); var6.add(var10); } Number var11 = (Number) PropertyUtil.safeGetProperty(var1, ID_FIELD_NAME); return new EntityRecord(var11 == null ? null : var11.longValue(), var2.getId(), var6); } catch (Exception e) { throw new ObjectReadException(var2.getName(), e); } } 	0	0	0	0	1	0
"private SnomedRf2ExportModel Func1(BranchContext var1) { final ContentSubType var2 = convertType(releaseType); Branch var3 = RepositoryRequests.branching() .prepareGet(var1.var3().path()) .build() .execute(var1); final SnomedRf2ExportModel var4 = SnomedRf2ExportModel.createExportModelWithAllRefSets(var2, var3, namespace); if (modules.isEmpty()) { final SnomedConcepts var5 = SnomedRequests.prepareSearchConcept() .all() .filterByActive(true) .filterByAncestor(Concepts.MODULE_ROOT) .build() .execute(var1); Set<String> var6 = FluentIterable.from(var5).transform(IComponent.ID_FUNCTION).toSet(); var4.getModulesToExport().addAll(var6); } else { var4.getModulesToExport().addAll(modules); } var4.setStartEffectiveTime(startEffectiveTime); var4.setEndEffectiveTime(endEffectiveTime); var4.setIncludeUnpublised(includeUnpublished); if (StringUtils.isEmpty(transientEffectiveTime)) { var4.setUnsetEffectiveTimeLabel(""""); } else if (""NOW"".equals(transientEffectiveTime)) { var4.setUnsetEffectiveTimeLabel(EffectiveTimes.format(Dates.todayGmt(), DateFormats.SHORT)); } else { try { EffectiveTimes.parse(transientEffectiveTime, DateFormats.SHORT); } catch (SnowowlRuntimeException e) { throw new BadRequestException(""Transient effective time '%s' is not in the expected date format."", transientEffectiveTime); } var4.setUnsetEffectiveTimeLabel(transientEffectiveTime); } var4.setCodeSystemShortName(codeSystem); var4.setExtensionOnly(extensionOnly); return var4; } "	0	0	0	0	1	0
private <T> T Func1(final T var1, final String var2) { return null == var1 ? this.<T>throwExportException(var2) : var1; } 	1	0	1	1	1	0
public void Func1() { newReactor().Func1(); } 	0	0	1	0	1	0
protected <T extends Dhcp6Option> void Func1(Dhcp6Options var1, @Nonnull final Class<T> var2) { assertEquals(1, Iterables.size(var1.getAll(StatusCodeOption.class))); } 	0	0	1	1	1	0
private FacilityDistribution Func1(FacilityVisit var1, Distribution var2) { EpiUse var3 = epiUseService.getBy(var1.getId()); List<Refrigerator> var4 = refrigeratorService.getRefrigeratorsForADeliveryZoneAndProgram(var2.getDeliveryZone().getId(), var2.getProgram().getId()); DistributionRefrigerators var5 = new DistributionRefrigerators(getRefrigeratorReadings(var1.getFacilityId(), var4)); Facility var6 = facilityService.getById(var1.getFacilityId()); EpiInventory var7 = epiInventoryService.getBy(var1.getId()); VaccinationFullCoverage var8 = vaccinationCoverageService.getFullCoverageBy(var1.getId()); VaccinationChildCoverage var9 = vaccinationCoverageService.getChildCoverageBy(var1.getId()); VaccinationAdultCoverage var10 = vaccinationCoverageService.getAdultCoverageBy(var1.getId()); FacilityDistribution var11 = new FacilityDistribution(var1, var3, var5, var7, var8, var9, var10); var11.setFacility(var6); return var11; } 	1	0	1	0	1	0
"@Override public Boolean Func1(final ActionRequest var1, final String var2, final User var3, final Settings var4, final Set<String> var5, final Map<String, Boolean> var6) { final boolean var7 = var4.getAsBoolean(""searchguard.dynamic.kibana.multitenancy_enabled"", true); if(!var7) { return null; } final String var8 = var4.get(""searchguard.dynamic.kibana.server_username"",""kibanaserver""); final String var9 = var4.get(""searchguard.dynamic.kibana.index"","".kibana""); String var10 = var3.getRequestedTenant(); if(log.isDebugEnabled()) { log.debug(""raw var10: '""+var10+""'""); } if(var10 == null || var10.length() == 0) { if(log.isTraceEnabled()) { log.trace(""No tenant, will resolve to ""+var9); } return null; } if(USER_TENANT.equals(var10)) { var10 = var3.getName(); } if (!var3.getName().equals(var8) && var5.size() == 1 && var5.contains(toUserIndexName(var9, var10))) { if(isTenantAllowed(var1, var2, var3, var6, var10)) { return Boolean.FALSE; } } if (!var3.getName().equals(var8) && var5.contains(var9) && var5.size() == 1) { if(log.isDebugEnabled()) { log.debug(""var10: ""+var10); log.debug(""is var3 tenant: ""+var10.equals(var3.getName())); } if(!isTenantAllowed(var1, var2, var3, var6, var10)) { return Boolean.TRUE; } replaceIndex(var1, var9, toUserIndexName(var9, var10)); return Boolean.FALSE; } else if (!var3.getName().equals(var8)) { if (log.isTraceEnabled()) { log.trace(""not a var1 to only the .kibana index""); log.trace(var3.getName() + ""/"" + var8); log.trace(var5 + "" does not contain only "" + var9); } } return null; } "	1	0	0	1	1	0
"@Override public boolean Func1() { Corpus var1 = getStructurePage().getModel(); SaltProjectCompiler var2 = new SaltProjectCompiler(var1); SaltProject var3 = var2.run(); for (SDocument var4 : var3.getSCorpusGraphs().get(0).getSDocuments()) { System.err.println(""DOCUMENT: "" + var4.getSDocumentGraph().getSTextualDSs().get(0).getSText()); } orderedTokenizers = getTokenizationPage().getTokenizerConfigurationElements(); return false; // TODO FIXME } "	0	0	0	0	1	0
"@Override public SessionFactoryBuilder Func1() { final SessionFactoryBuilderImpl var1 = new SessionFactoryBuilderImpl( this ); final ClassLoaderService var2 = metadataBuildingOptions.getServiceRegistry().getService( ClassLoaderService.class ); final java.util.Collection<SessionFactoryBuilderFactory> var3 = var2.loadJavaServices( SessionFactoryBuilderFactory.class ); SessionFactoryBuilder var4 = null; List<String> var5 = null; for ( SessionFactoryBuilderFactory var6 : var3 ) { final SessionFactoryBuilder var7 = var6.Func1( this, var1 ); if ( var7 != null ) { if ( var5 == null ) { var5 = new ArrayList<>(); } var5.add( var6.getClass().getName() ); var4 = var7; } } if ( var5 != null && var5.size() > 1 ) { throw new HibernateException( ""Multiple active SessionFactoryBuilderFactory definitions were discovered : "" + StringHelper.join( "", "", var5 ) ); } if ( var4 != null ) { return var4; } return var1; } "	0	0	0	0	1	0
"public int Func1(ArgumentBean var1) throws Exception { CmdlineInterface var2 = new CmdlineOperations(); if (var1.getSubtitles && var1.recursive) { throw new CmdlineException(""`filebot -get-subtitles -r` has been disabled due to abuse. Please see http://bit.ly/suball for details.""); } if (var1.list) { List<String> var3 = var2.fetchEpisodeList(var1.query, var1.format, var1.db, var1.order, var1.filter, var1.lang); var3.forEach(System.out::println); return var3.isEmpty() ? 1 : 0; } if (var1.mediaInfo) { List<String> var3 = var2.getMediaInfo(var1.getFiles(true), var1.format, var1.filter); var3.forEach(System.out::println); return var3.isEmpty() ? 1 : 0; } if (var1.revert) { List<File> var4 = var2.revert(var1.getFiles(false), var1.filter, ""TEST"".equalsIgnoreCase(var1.action)); return var4.isEmpty() ? 1 : 0; } Collection<File> var4 = new LinkedHashSet<File>(var1.getFiles(true)); if (var1.extract) { var4.addAll(var2.extract(var4, var1.output, var1.conflict, null, true)); } if (var1.getSubtitles) { var4.addAll(var2.getMissingSubtitles(var4, WebServices.OpenSubtitles.getName(), var1.query, var1.lang, var1.output, var1.encoding, var1.format, !var1.nonStrict)); } if (var1.rename) { var2.rename(var4, StandardRenameAction.forName(var1.action), var1.conflict, var1.output, var1.format, var1.db, var1.query, var1.order, var1.filter, var1.lang, !var1.nonStrict); } if (var1.check) { if (containsOnly(var4, MediaTypes.getDefaultFilter(""verification""))) { if (!var2.check(var4)) { throw new Exception(""Data corruption detected""); // one or more hashes mismatch } } else { var2.compute(var4, var1.output, var1.encoding); } } return 0; } "	1	0	0	1	0	0
"@POST @Secured @Path(""SecureLogoutPersona"") @Produces(MediaType.APPLICATION_XML) public String Func1(@HeaderParam(""var1"") String var1, @HeaderParam(""var2"") Long var2, @QueryParam(""var3"") Long var3) { tokenBO.setActivePersonaId(var1, 0L); return """"; } "	1	0	0	0	1	0
"private Pizza Func1(HttpServletRequest var1, String var2) { try { Pizza var3 = new Pizza(Size.MEDIUM, Crust.valueOf(var1.getParameter(""crust"" + var2)), Sauce.valueOf(var1.getParameter(""sauce"" + var2))); String[] var4 = var1.getParameterValues(""var4"" + var2); String[] var5 = var1.getParameterValues(""position"" + var2); for (int var6 = 0; var6 < var4.length; var6++) { if (var4[var6] != """") { Position var7 = Position.valueOf(var5[var6]); Position var8 = var3.addTopping(Topping.valueOf(var4[var6]),var7); if((Position.RIGHT.equals(var8) && var7.equals(Position.LEFT)) || (Position.LEFT.equals(var8) && var7.equals(Position.RIGHT))) { var3.addTopping(Topping.valueOf(var4[var6]), Position.ALL); } } } return var3; } catch (IllegalArgumentException e) { return null; } } "	1	0	0	1	0	0
public static void Func1(String var1) { Func1(var1, (Object) null); } 	0	0	0	0	1	0
public static void Func1(String var1) { Func1(var1, (Object) null); } 	0	0	0	0	1	0
"@Test public void Func1() throws Exception { Path var1 = getTempDir(); Path var2 = var1.resolve(""data""); Path var3 = var1.resolve(""model""); Map<String,Object> var4 = new HashMap<>(); var4.put(""oryx.batch.update-class"", KMeansUpdate.class.getName()); ConfigUtils.set(var4, ""oryx.batch.storage.data-dir"", var2); ConfigUtils.set(var4, ""oryx.batch.storage.model-dir"", var3); var4.put(""oryx.batch.streaming.generation-interval-sec"", GEN_INTERVAL_SEC); var4.put(""oryx.kmeans.hyperparams.k"", ""[2,100]""); var4.put(""oryx.kmeans.iterations"", 20); var4.put(""oryx.kmeans.runs"", 20); var4.put(""oryx.input-schema.num-features"", NUM_FEATURES); var4.put(""oryx.input-schema.categorical-features"", ""[]""); var4.put(""oryx.ml.eval.candidates"", 3); var4.put(""oryx.ml.eval.parallelism"", 2); var4.put(""oryx.kmeans.evaluation-strategy"", EVALUATION_STRATEGY); Config var5 = ConfigUtils.overlayOn(var4, getConfig()); startMessaging(); startServerProduceConsumeTopics( var5, new RandomKMeansDataGenerator(NUM_FEATURES), DATA_TO_WRITE, WRITE_INTERVAL_MSEC); List<Path> var6 = IOUtils.listFiles(var3, ""*""); checkIntervals(var6.size(), DATA_TO_WRITE, WRITE_INTERVAL_MSEC, GEN_INTERVAL_SEC); Path var7 = var6.get(var6.size() - 1); Path var8 = var7.resolve(MLUpdate.MODEL_FILE_NAME); assertTrue(""No such model file: "" + var8, Files.exists(var8)); PMML var9 = PMMLUtils.read(var8); Model var10 = var9.getModels().get(0); ClusteringModel var11 = (ClusteringModel) var10; assertEquals(100, var11.getNumberOfClusters().intValue()); } "	0	0	1	1	0	0
public void Func1(java.awt.event.FocusEvent var1) { jFormatTextFieldForIdFocusGained(var1); } 	0	0	0	0	1	0
@Test public void Func1() throws Exception { new Activator().init(null, null);; assertTrue(ServiceProxy.getInstance().getEnabled(null)); } 	0	0	0	0	1	0
"private static String Func1() { final String var1 = System.getProperty ( ""line.separator"" ); StringBuilder var2 = new StringBuilder(); var2.append(""Usage: <-command_name> [<command_args...>] "" + ""(- parameters within the square braces are optional.)"" + var1); var2.append(""commands:"" + var1); var2.append(Cmd.METADATA.toString() + "" <url> (fetch Metadata configuration (default: "" + ""use metadata.conf file in current directory))"" + var1); var2.append(Cmd.PREMERGE.toString() + "" [--createWarehouse] "" + ""(organize, clean, convert, normalize input data;"" + "" create metadata db and create or rebuild the BioPAX utility type objects Warehouse)"" + var1); var2.append(Cmd.MERGE.toString() + "" (merge all pathway data; overwrites the main biopax model archive)""+ var1); var2.append(Cmd.INDEX.toString() + "" (build new full-text index of the main merged BioPAX db;"" + ""create blacklist.txt in the downloads directory; re-calculates the no. pathways, molecules and "" + ""interactions per data source)"" + var1); var2.append(Cmd.EXPORT.toString() + "" [filename] [--uris=<uri,uri,..>] [--output-absolute-uris] [--datasources=<nameOrUri,..>] [--types=<interface,..>]"" + ""(when no arguments provided, it generates the default detailed pathway data and organism-specific "" + ""BioPAX archives and datasources.txt in the downloads sub-directory; plus, "" + ""summary.txt, and convert.sh script (for exporting the BioPAX files to various formats with Paxtools). "" + ""If [filename] is provided, it only exports the main BioPAX model or a sub-model "" + ""(if the list of URIs or filter option is provided): "" + ""when --output-absolute-uris flag is present, all URIs there in the output BioPAX will be absolute; "" + ""when --datasources or/and --types flag is set, and 'uri' list is not, then the result model "" + ""will contain BioPAX elements that pass the filter by data source and/or type)"" + var1); var2.append(Cmd.ANALYSIS.toString() + "" <classname> [--update] (execute custom code within the cPath2 BioPAX database; "" + ""if --update is set, one then should re-index and generate new 'downloads')"" + var1); return var2.toString(); } "	0	0	0	0	0	1
private void Func1( NukleusChannel var1) { final Deque<MessageEvent> var2 = var1.var2; while (var1.targetWritable() && !var2.isEmpty()) { MessageEvent var3 = var2.peekFirst(); ChannelBuffer var4 = (ChannelBuffer) var3.getMessage(); ChannelBuffer var5 = var1.writeExtBuffer(); if (var4.readable() || var5.readable()) { final boolean var6 = !var4.readable(); final int var7 = min(var1.targetWriteableBytes(var4.readableBytes()), (1 << SIZE_OF_SHORT) - 1); final int var8 = var4.readerIndex(); final int var9 = var5.readableBytes(); final byte[] var10 = var10(var5); final byte[] var11 = new byte[var7]; var4.getBytes(var8, var11); final long var12 = var1.targetId(); final DataFW var13 = dataRW.wrap(writeBuffer, 0, writeBuffer.capacity()) .var12(var12) .payload(p -> p.set(var11)) .extension(p -> p.set(var10)) .build(); streamsBuffer.write(var13.typeId(), var13.buffer(), var13.offset(), var13.sizeof()); var1.targetWritten(var7, 1); var4.skipBytes(var7); var5.skipBytes(var9); var5.discardReadBytes(); if (var6) { fireFlushed(var1); } else { fireWriteComplete(var1, var7); } } if (!var4.readable()) { var2.removeFirst(); ChannelFuture var14 = var3.getFuture(); var14.setSuccess(); } } } 	0	0	0	0	1	0
"@Override public ServiceResult Func1(PipelineDefinition var1, String var2) { if (this.materialDefinitionService == null) { this.materialDefinitionService = new MaterialDefinitionService(); } this.materialDefinitionService = new MaterialDefinitionService(); ServiceResult var3 = this.materialDefinitionService.getById(var2); if (var3.hasError()) { return super.createServiceResult(null, true, ""could not be created""); } var1.getMaterialDefinitionIds().add(var2); return super.add(var1); } "	0	0	0	0	1	0
private Account Func1(RegisterSSHKeyPairCmd var1) { Account var2 = getCaller(); Account var3 = _accountMgr.finalizeOwner(var2, var1.getAccountName(), var1.getDomainId(), var1.getProjectId()); return var3; } 	0	0	0	1	0	0
"@Test @SuppressFBWarnings(""ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD"") public void Func1() { ResourceIterator<Node> var1; db.getGraphService().shutdown(); db = new Database(""test.db"", ""data/test1.gfa"", """", true); int var2 = 1; try (Transaction tx = db.getGraphService().beginTx()) { var1 = db.getGraphService().findNodes(DynamicLabel.label(""Strand"")); tx.success(); Node var3; while (var1.hasNext()) { var3 = var1.next(); Assert.assertEquals(var3.getProperty(""id""), (long) var2); var2++; } } } "	0	0	0	0	1	0
"public static BufferedImage Func1(WebDriver var1, BufferedImage var2) { Double var3 = 1.0; try { var3 = ((Number) ((JavascriptExecutor) var1).executeScript(JS_RETRIEVE_DEVICE_PIXEL_RATIO)).doubleValue(); } catch (Exception ex) { ex.printStackTrace(); } if (var3 > 1.0 && var2.getWidth() > 0) { Long var4 = (Long) ((JavascriptExecutor) var1).executeScript(""return Math.max("" + ""document.body.scrollWidth, document.documentElement.scrollWidth,"" + ""document.body.offsetWidth, document.documentElement.offsetWidth,"" + ""document.body.clientWidth, document.documentElement.clientWidth);"" ); Double var5 = ((double)var2.getWidth()) / ((double)var4); if (var5 > 1.0) { int var6 = (int) (var2.getWidth() / var5); int var7 = (int) (var2.getHeight() / var5); Image var8 = var2.getScaledInstance(var6, var7, Image.SCALE_SMOOTH); BufferedImage var9 = new BufferedImage(var6, var7, BufferedImage.TYPE_INT_RGB); Graphics2D var10 = var9.createGraphics(); var10.drawImage(var8, 0, 0, null); var10.dispose(); return var9; } else return var2; } else return var2; } "	0	0	0	0	1	0
"@RequestMapping(value = ""/newProduct/saveProduct"", method = RequestMethod.POST) @ResponseBody public Response Func1(@RequestBody ProductDto var1) { LOG.info(""createProduct. Mapping 'raw' var1 data: "" + var1); String var2 = this.productService.Func1(var1); String var3 = getFullProductNumber(); Map<String, String> var4 = new HashMap<>(); var4.put(""newProductNumber"", var3); var4.put(""savedProductNumber"", var2); return new Response(ResponseCode.OK, var4); } "	0	0	0	0	1	0
"@Override public void Func1() { try { checkHost( m_url ); } catch( HTTPRequestException e ) { m_success = false; m_errorMessage = e.getMessage(); return; } try { HttpURLConnection var1 = (HttpURLConnection) m_url.openConnection(); if( m_postText != null ) { var1.setRequestMethod( ""POST"" ); var1.setDoOutput( true ); } else { var1.setRequestMethod( ""GET"" ); } var1.setRequestProperty( ""accept-charset"", ""UTF-8"" ); if( m_postText != null ) { var1.setRequestProperty( ""content-type"", ""application/x-www-form-urlencoded; charset=utf-8"" ); var1.setRequestProperty( ""content-encoding"", ""UTF-8"" ); } if( m_postText != null ) { for( Map.Entry<String, String> var2 : m_headers.entrySet() ) { var1.setRequestProperty( var2.getKey(), var2.getValue() ); } } if( m_postText != null ) { OutputStream var3 = var1.getOutputStream(); OutputStreamWriter var4; try { var4 = new OutputStreamWriter( var3, ""UTF-8"" ); } catch( UnsupportedEncodingException e ) { var4 = new OutputStreamWriter( var3 ); } BufferedWriter var5 = new BufferedWriter( var4 ); var5.write( m_postText, 0, m_postText.length() ); var5.close(); } InputStream var6; int var7 = var1.getResponseCode(); boolean var8; if( var7 >= 200 && var7 < 400 ) { var6 = var1.getInputStream(); var8 = true; } else { var6 = var1.getErrorStream(); var8 = false; } byte[] var9 = ByteStreams.toByteArray( var6 ); var6.close(); m_success = var8; m_result = var9; m_responseCode = var1.getResponseCode(); m_encoding = var1.getContentEncoding(); Joiner var10 = Joiner.on( ',' ); Map<String, String> var11 = m_responseHeaders = new HashMap<String, String>(); for( Map.Entry<String, List<String>> var2 : var1.getHeaderFields().entrySet() ) { var11.put( var2.getKey(), var10.join( var2.getValue() ) ); } var1.disconnect(); // disconnect } catch( IOException e ) { m_success = false; } } "	0	0	1	1	0	0
"@Override public void Func1(NBTTagCompound var1) { var1.setBoolean(""isAIActive"", isAIActive.getBoolean()); var1.setInteger(""idOfNotifyBlock"", idOfNotifyBlock); var1.setInteger(""activityInterval"", activityInterval); var1.setString(""assigningPlayer"", assigningPlayer); var1.setBoolean(""isGathering"", isGathering); } "	0	0	0	0	1	0
"@Override public void Func1(NBTTagCompound var1) { isAIActive.setValue(var1.getBoolean(""isAIActive"")); treeBasePoint = Point3D.Func1(""treeBasePoint"", var1); apiId = var1.getInteger(""apiId""); yLevel = var1.getInteger(""yLevel""); cutInterval = var1.getInteger(""cutInterval""); cutTimeLeft = var1.getInteger(""cutTimeLeft""); doReplant = var1.getBoolean(""doReplant""); } "	0	0	0	0	1	0
public boolean Func1(String var1) { checkNonNullObject(var1); lock(); try { return idMap.containsKey(var1); } finally { unlock(); } } 	0	0	1	0	1	0
public Map<String, Object> Func1() { final Map<String, Object> var1 = new HashMap<String, Object>(); for (final PTProperty var2 : this.properties) { var1.put(var2.getName(), var2.getValue()); } return var1; } 	0	0	1	1	1	0
"private RemoteMessageCommand Func1() { IIconFactory<RIcon> var1 = getFrontendController().getViewFactory() .getIconFactory(); RemoteMessageCommand var2 = new RemoteMessageCommand(); var2.setTitle(getFrontendController().getTranslation(""error"", getFrontendController().getLocale())); var2.setTitleIcon(var1.getErrorIcon(var1 .getTinyIconSize())); var2.setMessageIcon(var1.getErrorIcon(var1 .getLargeIconSize())); return var2; } "	0	0	0	1	0	0
@Override TopicTypeModel Func1() { return pl.typeStorage.getTopicType(typeUri); } 	0	0	1	0	0	0
protected double Func1(final double var1) { double var2 = k1 + k2 * p * p + k3 * pow(p, 4); if (var1 < 0.0) { var2 = 10000000 + var2; } return var2; } 	0	0	1	1	0	0
@Override public void Func1() { try { T var1 = future.get(); sdp.set(var1); } catch (Exception e) { subscriber.onError(e); } } 	0	0	1	0	1	0
"@Test public void Func1() throws IOException { Tuple var1 = TupleFactory.getInstance().newTuple(31); for (int var2 = 0; var2 < 31; var2++) { var1.set(var2, 1); } var1.set(0, ""M""); Assert.assertEquals(""(M,1.0,42,74,5,36,36,31,74,66,5)"", instance.exec(var1).toString()); } "	0	0	0	0	1	0
"public void Func1(final ViewDefinitionState var1) { FormComponent var2 = (FormComponent) var1.getComponentByReference(""var2""); FieldComponent var3 = (FieldComponent) var1.getComponentByReference(FIELD_QUALITY_CONTROL_TYPE); if (var2.getFieldValue() != null) { if (checkOperationQualityControlRequired((Long) var2.getFieldValue())) { var3.setFieldValue(""04forOperation""); var3.setEnabled(false); var3.requestComponentUpdateState(); } else { var3.setEnabled(true); } } FieldComponent var4 = (FieldComponent) var1.getComponentByReference(""var4""); if (var3.getFieldValue() == null || !var3.getFieldValue().equals(""02forUnit"")) { var4.setRequired(false); var4.setVisible(false); } else if (var3.getFieldValue().equals(""02forUnit"")) { var4.setRequired(true); var4.setVisible(true); } } "	0	0	0	0	1	0
"@CrossOrigin @RequestMapping(method = RequestMethod.POST, value = ""Func1"") public ResponseEntity<String> Func1(@RequestParam(value = ""var1"") String var1, @RequestParam(value = ""data"") String var2, HttpServletResponse var3) { try { logger.info(""Test Func1 request: "" +var1 + "" "" + var2.length() + "" "" + var3.getContentType()); byte[] var4 = DatatypeConverter.parseBase64Binary(var2.split("","")[1]); File var5 = new File(System.getProperty(""java.io.tmpdir"")); String var6 = var1.substring(0,var1.indexOf('.')); String var7 = var1.substring(var1.indexOf('.'),var1.length()); File var8 = File.createTempFile(var6, var7, var5); FileOutputStream var9 = new FileOutputStream(var8); var9.write(var4); var9.close(); logger.debug(var8.getAbsolutePath()); Loader var10 = new Loader(); String var11 = var8.toURL().toString(); logger.debug (""reading tempfile "" + var11); List<String> var12 = var10.loadDatasetFromFile(var11, elasticSearchHost, elasticSearchPort, elasticSearchCluster); StringBuffer var13 = new StringBuffer(); boolean var14 = true; for (String var15 : var12) { if (var15.contains(""validation_error"")) var14 = false; int var16 = var15.indexOf("", crawler_id""); String var17 = null; if (var16 != -1) var17 = var15.substring(0,var16); else var17 = var15; var13.append(var17 + ""\n""); } String var18 = var13.toString(); logger.debug(var18); if (var14) { logger.info(""Load File Success""); return new ResponseEntity<String>(var18, HttpStatus.OK); } else { logger.info(""Unsucsesfull in loading""); return new ResponseEntity<String>(var18, HttpStatus.BAD_REQUEST); } } catch (IOException e) { e.printStackTrace(); } return new ResponseEntity<String>(HttpStatus.BAD_REQUEST); } "	0	0	0	0	1	0
@Override public boolean Func1(Class var1, Type var2, Annotation[] var3, MediaType var4) { return checkForAnnotation(var1); } 	0	0	0	0	1	0
public void Func1(final String var1, final int var2) { this.Func1(var1, String.valueOf(var2)); } 	0	0	0	0	1	0
"public void Func1(final String var1, final boolean var2) { this.Func1(var1, var2 ? ""true"" : ""false""); } "	0	0	0	0	1	0
public void Func1(final String var1, final Date var2) { this.Func1(var1, var2 != null ? var2.getTime() : null); } 	0	0	0	0	1	0
"public void Func1(SurfaceHolder var1, int var2, int var3, int var4) { Log.d(""Func1"",""Func1""); refreshCamera(mCamera); } "	1	0	1	0	1	0
public void Func1(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException { executeMethod(this::createProxyPostReq, var1, var2); } 	0	0	1	1	0	0
"protected void Func1(WebSocket var1) { JSONObject var2 = new JSONObject(); JSONArray var3 = new JSONArray(); for(String var4 : chatrooms.keySet()) { JSONObject var5 = new JSONObject(); var5.put(""var4"", var4); var5.put(""chatroomSize"", chatrooms.get(var4).userOutputs.size()); var3.put(var5); } var2.put(""type"", ""chatroomList""); var2.put(""chatrooms"", var3); var1.send(var2.toString()); logger.info(""User retrieved chatroom list""); } "	0	0	1	0	1	0
public void Func1(String var1) { if (var1 == null) { notifyDataSetChanged(); return; } if (!var1.isEmpty()) { this.oldSearchTerm = var1; for (Module var2 : allModulesDataset) { String var3 = var2.getLvnameGerman().toLowerCase(); int var4 = filteredModulesDataset.indexOf(var2); if (!var3.startsWith(var1.toLowerCase())) { if (var4 != -1) { filteredModulesDataset.remove(var4); notifyItemRemoved(var4); } } else { if (var4 == -1) { filteredModulesDataset.add(var2); notifyItemInserted(filteredModulesDataset.size()); } } } } else { filteredModulesDataset = (List<Module>) ((LinkedList<Module>) allModulesDataset).clone(); oldSearchTerm = null; notifyDataSetChanged(); } } 	0	0	1	0	0	0
public static BlockPosM Func1(int[] var1){ return temporary.set(var1); } 	1	0	1	0	1	0
@Override public final void Func1(final float var1) { body.setTransform(body.getPosition(), var1); } 	0	0	0	0	1	0
"@Override public void Func1(Listener var1) { listener = Preconditions.checkNotNull(var1, ""listener""); Bootstrap var2 = new Bootstrap(); var2.group(group); var2.channel(channelType); if (NioSocketChannel.class.isAssignableFrom(channelType)) { var2.option(SO_KEEPALIVE, true); } var2.handler(negotiationHandler); channel = var2.connect(address).addListener(new ChannelFutureListener() { @Override public void Func2(ChannelFuture var3) throws Exception { if (!var3.isSuccess()) { ChannelHandlerContext var4 = channel.pipeline().context(handler); if (var4 != null) { var4.fireExceptionCaught(var3.cause()); } channel.pipeline().fireExceptionCaught(var3.cause()); } } }).channel(); handler.startWriteQueue(channel); channel.closeFuture().addListener(new ChannelFutureListener() { @Override public void Func2(ChannelFuture var3) throws Exception { Status var5 = handler.connectionStatus(); if (var5 == null) { var5 = Status.INTERNAL.withDescription(""Connection closed with unknown cause""); } notifyTerminated(var5); } }); } "	0	0	0	0	1	0
"private void Func1() { mRowsAdapter = new ArrayObjectAdapter(new ListRowPresenter()); if(mActivity == null && Build.VERSION.SDK_INT >= 23) { Toast.makeText(getContext(), ""Uh-oh, something isn't working: Func1 has no activity"", Toast.LENGTH_SHORT).show(); return; } else if(mActivity == null) { return; } ChannelDatabase var1 = new ChannelDatabase(mActivity); try { CardPresenter var2 = new CardPresenter(); ArrayObjectAdapter var3 = new ArrayObjectAdapter(var2); int var4 = 0; for(Channel var5: var1.getChannels()) { Log.d(TAG, ""Got channels "" + var5.getName()); Log.d(TAG, var5.getLogoUrl()+""""); Log.d(TAG, new JSONChannel(var1.getJSONChannels().getJSONObject(var4)).toString()+""""); var3.add(MovieList.buildMovieInfo( ""channel"", var5.getName(), """", var5.getNumber(), new JSONChannel(var1.getJSONChannels().getJSONObject(var4)).getUrl(), var5.getLogoUrl(), ""android.resource://com.felkertech.n.tv/drawable/c_background5"" )); Log.d(TAG, MovieList.buildMovieInfo( ""channel"", var5.getName(), """", var5.getNumber(), new JSONChannel(var1.getJSONChannels().getJSONObject(var4)).getUrl(), var5.getLogoUrl(), ""android.resource://com.felkertech.n.tv/drawable/c_background5"" ).toString()); var4++; } HeaderItem var6 = new HeaderItem(0, ""My Channels""); mRowsAdapter.add(new ListRow(var6, var3)); } catch (JSONException e) { e.printStackTrace(); } CardPresenter var7 = new CardPresenter(); ArrayObjectAdapter var8 = new ArrayObjectAdapter(var7); HeaderItem var9 = new HeaderItem(1, ""Suggested Channels""); JSONChannel[] var10 = ActivityUtils.getSuggestedChannels(); for(JSONChannel var11: var10) { var8.add(MovieList.buildMovieInfo( ""channel"", var11.getName(), """", var11.getNumber(), var11.getUrl(), var11.getLogo(), ""android.resource://com.felkertech.n.tv/drawable/c_background5"" )); } mRowsAdapter.add(new ListRow(var9, var8)); HeaderItem var12 = new HeaderItem(1, ""Google Drive Sync""); GridItemPresenter var13 = new GridItemPresenter(); ArrayObjectAdapter var14 = new ArrayObjectAdapter(var13); var14.add(R.string.connect_drive); var14.add(getString(R.string.settings_refresh_cloud_local)); var14.add(getString(R.string.settings_switch_google_drive)); var14.add(getString(R.string.settings_sync_file)); mRowsAdapter.add(new ListRow(var12, var14)); HeaderItem var15 = new HeaderItem(1, ""Manage""); GridItemPresenter var16 = new GridItemPresenter(); ArrayObjectAdapter var17 = new ArrayObjectAdapter(var16); var17.add(getString(R.string.manage_livechannels)); var17.add(getString(R.string.manage_add_new)); mRowsAdapter.add(new ListRow(var15, var17)); HeaderItem var18 = new HeaderItem(1, ""Settings""); GridItemPresenter var19 = new GridItemPresenter(); ArrayObjectAdapter var20 = new ArrayObjectAdapter(var19); var20.add(getString(R.string.settings_browse_plugins)); var20.add(getString(R.string.settings_view_licenses)); var20.add(getString(R.string.settings_reset_channel_data)); var20.add(getString(R.string.about_app)); mRowsAdapter.add(new ListRow(var18, var20)); setAdapter(mRowsAdapter); } "	1	0	0	0	0	0
"public static Event Func1( IceUdpTransportManager var1, IceProcessingState var2, IceProcessingState var3) { Dictionary var4 = new Hashtable(3); var4.put(""source"", var1); var4.put(""var2"", var2); var4.put(""var3"", var3); return new Event( TRANSPORT_STATE_CHANGED_TOPIC, var4); } "	0	0	1	0	1	0
public void Func1(String var1) { this.var1 = var1; } 	0	0	0	1	1	0
"private void Func1() { SecretProvider var1 = getAdminDatabaseSecrets(); try (RedshiftConnection conn = RedshiftConnection.open(RedshiftConnectionConfig.configure(var1, EMPTY_CONFIG))) { conn.executeUpdate(""DROP USER IF EXISTS "" + RESTRICTED_USER); } } "	0	0	0	0	1	0
"private void Func1() { SecretProvider var1 = getDatabaseSecrets(); try (RedshiftConnection conn = RedshiftConnection.open(RedshiftConnectionConfig.configure(var1, EMPTY_CONFIG))) { switchSearchPath(conn); conn.executeUpdate(""CREATE TABLE IF NOT EXISTS "" + DEST_TABLE + "" (id integer, name text, score real)""); conn.executeUpdate(""DELETE FROM "" + DEST_TABLE + "" WHERE id = 9""); conn.executeUpdate(""INSERT INTO "" + DEST_TABLE + "" (id, name, score) VALUES (9, 'zzz', 9.99)""); conn.executeUpdate(""GRANT INSERT ON "" + DEST_TABLE +  "" TO "" + RESTRICTED_USER); } } "	0	0	0	0	1	0
"private void Func1() { SecretProvider var1 = getDatabaseSecrets(); try (RedshiftConnection conn = RedshiftConnection.open(RedshiftConnectionConfig.configure(var1, EMPTY_CONFIG))) { switchSearchPath(conn); conn.executeUpdate(""CREATE TABLE "" + SRC_TABLE + "" (id integer, name text, score real)""); conn.executeUpdate(""INSERT INTO "" + SRC_TABLE + "" (id, name, score) VALUES (0, 'foo', 3.14)""); conn.executeUpdate(""INSERT INTO "" + SRC_TABLE + "" (id, name, score) VALUES (1, 'bar', 1.23)""); conn.executeUpdate(""INSERT INTO "" + SRC_TABLE + "" (id, name, score) VALUES (2, 'baz', 5.00)""); conn.executeUpdate(""GRANT SELECT ON "" + SRC_TABLE +  "" TO "" + RESTRICTED_USER); } } "	0	0	0	0	1	0
"@Test public void Func1() throws NoSuchFieldException, IllegalAccessException { PlatformKey var1 = PlatformKey.withName(""CUR1"") .withApplicationName(""RAC"") .build(); String var2 = ""#WAS#EuronetWS#1.0.0.0#WORKINGCOPY""; InstanceData var3 = InstanceData.withInstanceName(""TOTO"") .withKeyValue(ImmutableSet.of()) .build(); ApplicationModuleData var4 = ApplicationModuleData.withApplicationName(""EuronetWS"") .withVersion(""1.0.0.0"") .withPath(var2) .withId(1) .withInstances(ImmutableSet.of(var3)) .isWorkingcopy() .build(); PlatformData var5 = PlatformData.withPlatformName(var1.getName()) .withApplicationName(var1.getApplicationName()) .withApplicationVersion(""1.0.0.0"") .withModules(ImmutableSet.of(var4)) .withVersion(11L) .build(); when(applicationsAggregate.getPlatform(var1)).thenReturn(Optional.of(var5)); PropertiesData var6 = new PropertiesData(ImmutableSet.of(), ImmutableSet.of()); when(applicationsAggregate.getProperties(var1, ""#WAS#EuronetWS#1.0.0.0#WORKINGCOPY#EuronetWS#1.0.0.0#WORKINGCOPY"")).thenReturn(var6); when(applicationsAggregate.getProperties(var1, ""#"")).thenReturn(var6); when(applicationsAggregate.getSecuredProperties(var1, ""#WAS#EuronetWS#1.0.0.0#WORKINGCOPY#EuronetWS#1.0.0.0#WORKINGCOPY"", model)).thenReturn(var6); when(applicationsAggregate.getSecuredProperties(var1, ""#"", model)).thenReturn(var6); String var7 = ""TitiEtRominet""; Template var8 = new Template(""modules#EuronetWS#1.0.0.0#WORKINGCOPY"", var7, ""truc.txt"", ""/tmp"", ""var9={{var9|@required}}\n"" + ""var10={{var10|@default 'truc machin chose' @comment \""cool !\""}}"", null, 2); KeyValuePropertyModel var9 = new KeyValuePropertyModel(createProperty(""var9|@comment 'commentaire'"")); KeyValuePropertyModel var10 = new KeyValuePropertyModel(createProperty(""var10|@default 'truc machin chose' @comment \""cool !\"""")); ModuleKey var11 = new ModuleKey( ""EuronetWS"", new HesperidesVersion(""1.0.0.0"", true)); when(modulesAggregate.getTemplate(var11, var7)).thenReturn(Optional.of(var8)); HesperidesPropertiesModel var12 = new HesperidesPropertiesModel(ImmutableSet.of(var9, var10), ImmutableSet.of()); when(modulesAggregate.getModel(var11)).thenReturn(Optional.of(var12)); Files var13 = new Files(applicationsAggregate, modulesAggregate, templatePackages); String var14 = var13.getFile( var1.getApplicationName(), var1.getName(), var2, var11.getName(), var4.getVersion(), var4.isWorkingCopy(), var3.getName(), var8.getNamespace(), var8.getName(), model); assertThat(var14).isEqualTo(""var9=\nprop2=truc machin chose""); } "	0	0	0	0	0	1
"@Override public Object Func1(IHawkAttribute var1) { String var2 = var1.getName(); switch (var2) { case ""version"": return version != null; default: return null; } } "	1	0	1	0	1	0
"@Override public Object Func1(IHawkAttribute var1) { String var2 = var1.getName(); switch (var2) { case ""var2"": return var2 != null; default: return null; } } "	0	0	1	0	1	0
"public void Func1(final StringBuilder var1, final String var2, final List<RelationsCache.Relation> var3) { var1.append(""relationship "" + var2 + "" {\n""); for(int var4 = 0; var4 < var3.size(); var4++) { final RelationsCache.Relation var5 = var3.get(var4); var1.append(""\t""); var1.append(var5.toStringUntabbed()); if( var4 < var3.size() -1) { var1.append("",""); } var1.append(""\n""); } var1.append(""\n}\n\n""); } "	1	0	1	0	1	0
public List<Integer> Func1 () { List<Integer> var1 = new ArrayList<Integer>(); var1.addAll(activeTree.values()); return var1; } 	0	0	0	0	1	0
public ArrayList<Treasure> Func1 () { AbstractCollection<Integer> var1 = activeTree.values(); ArrayList<Treasure> var2 = new ArrayList<Treasure>(); for (Integer var3 : var1 ) { try { var2.add(DatabaseManager.getTreasureFromId(var3)); } catch (SQLException e) { e.printStackTrace(); return null; } } return var2; } 	0	0	0	0	1	0
public boolean Func1(UUID var1) { if (var1 == DBFunc.everyone) { boolean var2 = false; for (UUID var3 : getDenied()) { var2 = var2 || rmvDenied(var3); } return var2; } return rmvDenied(var1); } 	0	0	0	0	1	0
@Test public void Func1() { for (int var1 = 0; var1 < listSize; var1++) { assertEquals(expectedTaskList.get(var1).getName(), testCalendar.getTaskList().get(var1).getName()); } for (int var1 = 0; var1 < listSize; var1++) { assertEquals(expectedTaskList.get(var1).getDeadline(), testCalendar.getTaskList().get(var1).getDeadline()); } } 	0	0	0	0	1	0
@Override public String Func1() throws IOException { return m_buffer.toString(); } 	0	0	0	0	1	0
private HashMap<String,String> Func1(InputStream var1) throws IOException { GsonBuilder var2 = new GsonBuilder(); Gson var3 = var2.create(); BufferedReader var4 = new BufferedReader(new InputStreamReader(var1)); Type var5= new TypeToken<HashMap<String,String>>() {}.getType(); HashMap<String,String> var6 = var3.fromJson(var3.newJsonReader(var4), var5); System.out.println(var6); var4.close(); return var6; } 	0	0	0	0	1	0
"@Override protected Integer Func1(Void... var1) { String var2 = this.path + ""devices/""; Integer var3 = null; URL var4 = null; HttpURLConnection var5 = null; try { var4 = new URL(var2); var5 = (HttpURLConnection) var4.openConnection(); var5.setRequestMethod(""POST""); var5.setRequestProperty(""Content-Type"", ""application/json; charset=UTF-8""); var5.setDoOutput(true); OutputStream var6 = var5.getOutputStream(); writeStream(var6); var3 = var5.getResponseCode(); Log.i(TAG, ""Response code: "" + var3); } catch (IOException e) { Log.e(TAG, ""Connection failed: could not realize the POST request for adding a new device""); Log.e(TAG, e.toString()); } finally { if(var5 != null) { var5.disconnect(); } } return var3; } "	0	0	0	0	1	0
@Override public void Func1() { activity.setSupportActionBar(mToolbar); } 	0	0	0	0	1	0
@Override public void Func1(KeyEvent var1) { if (type == CaptureType.TYPED) { queue.offer(var1); } } 	0	0	0	0	1	0
"public String Func1(String var1) { String var2 = getInfo(var1, titles); return var2 == null ? ""No var2 set"" : var2; } "	0	0	0	0	1	0
private int Func1(int var1) { return (var1 + cameraDy)*tileSize + windowShiftX; } 	0	0	1	0	1	0
@Override public void Func1(Bundle var1) { super.Func1(var1); initialize(); setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); setContentView(R.layout.extension_session_view); Button var2 = (Button) findViewById(R.id.send_btn); var2.setOnClickListener(mBtnSendListener); var2.setEnabled(false); if (!isServiceConnected(RcsServiceName.MULTIMEDIA, RcsServiceName.CONTACT)) { showMessageThenExit(R.string.label_service_not_available); return; } startMonitorServices(RcsServiceName.MULTIMEDIA, RcsServiceName.CONTACT); try { getMultimediaSessionApi().addEventListener(mServiceListener); initialiseMessagingSession(getIntent()); } catch (RcsServiceException e) { showExceptionThenExit(e); } } 	0	0	0	0	1	0
@Override public void Func1(View var1) { TextView var2 = (TextView) var1.findViewById(R.id.textview); var2.setText(R.string.click); } 	0	0	0	0	1	0
"@Override public void Func1(DataSnapshot var1, String var2) { Log.d(TAG, String.format(Locale.US, LOG_FORMAT, ""Func1"", var1, var2)); process(var1, false, CHANGED); } "	1	0	1	0	1	0
"@Override public void Func1(DataSnapshot var1, String var2) { Log.d(TAG, String.format(Locale.US, LOG_FORMAT, ""Func1"", var1, var2)); process(var1, true, NEW); } "	1	0	1	0	1	0
"protected void Func1(final VmInstanceDeletionPolicy var1, final Completion var2) { if (VmInstanceState.Created == self.getState()) { var2.success(); return; } final VmInstanceInventory var3 = VmInstanceInventory.valueOf(self); VmInstanceSpec var4 = buildSpecFromInventory(var3, VmOperation.Destroy); self = changeVmStateInDb(VmInstanceStateEvent.destroying); FlowChain var5 = getDestroyVmWorkFlowChain(var3); setFlowMarshaller(var5); var5.setName(String.format(""Func1-vm-%s"", self.getUuid())); var5.getData().put(VmInstanceConstant.Params.VmInstanceSpec.toString(), var4); var5.getData().put(Params.DeletionPolicy, var1); var5.Func3(new FlowDoneHandler(var2) { @Override public void Func2(Map var7) { var2.success(); } }).error(new FlowErrorHandler(var2) { @Override public void Func2(final ErrorCode var6, Map var7) { if (originalCopy.getState() == VmInstanceState.Running) { checkState(originalCopy.getHostUuid(), new NoErrorCompletion(var2) { @Override public void Func3() { var2.fail(var6); } }); } else { self = dbf.reload(self); changeVmStateInDb(VmInstanceStateEvent.unknown); var2.fail(var6); } } }).start(); } "	0	0	0	0	1	0
"@Override public String Func1(String var1, String var2) throws AuthorizationException { User var3 = null; try { var3 = userData.getByUsername(var1); } catch (javax.persistence.EntityNotFoundException e) { throw new AuthorizationException(""Invalid var1 or var2""); } if (var2.equals(var3.getPassword())) { UserSession var4 = new UserSession(); var4.setStartTime(Timestamp.from(Instant.now())); var4.setUserId(var3.getUserid()); byte[] var5 = new byte[15]; new SecureRandom().nextBytes(var5); String var6 = Base64.getEncoder().encodeToString(var5); var4.setToken(var6); sessionData.saveAndFlush(var4); return var6; } else { throw new AuthorizationException(""Invalid var1 or var2""); } } "	0	0	0	0	1	0
"private void Func1(String var1) throws IOException { BufferedReader var2 = new BufferedReader(new InputStreamReader(input)); ArrayList var3 = new ArrayList(); String var4 = var2.readLine(); while(!var4.equals(EMPTY) ) { var3.add(var4); var4 = var2.readLine(); } Map var5 = getHeaders(var3); String var6 = (String) var5.get(HTTP_HEADER_UPGRADE); if(!var6.contains(HTTP_HEADER_UPGRADE_WEBSOCKET)){ throw new IOException(""WebSocket Response header: Incorrect upgrade.""); } if(!var5.containsKey(HTTP_HEADER_SEC_WEBSOCKET_ACCEPT)){ throw new IOException(""WebSocket Response header: Missing Sec-WebSocket-Accept""); } try { verifyWebSocketKey(var1, (String)var5.get(HTTP_HEADER_SEC_WEBSOCKET_ACCEPT)); } catch (NoSuchAlgorithmException e) { throw new IOException(e.getMessage()); } catch (HandshakeFailedException e) { throw new IOException(""WebSocket Response header: Incorrect Sec-WebSocket-Key""); } } "	0	0	1	0	1	0
public boolean Func1(World var1) { if (state == null) return false; var1.setBlockState(pos, state, 3); Block var2 = state.getBlock(); if (var2 instanceof ITileEntityProvider && tagCompound != null) { var1.setTileEntity(pos, TileEntity.func_190200_a(null, tagCompound)); } return true; } 	0	0	0	0	1	0
"private void Func1() { view.setDbAdminFile(prop.get(""FILE_DBADMIN"")); view.setAutoConnect(prop.get(""AUTOCONNECT_POSTGIS"")); view.setAutoStart(prop.get(""AUTOSTART_POSTGIS"")); view.setOpenInp(prop.get(""OPEN_INP"")); view.setOpenRpt(prop.get(""OPEN_RPT"")); view.setProjectUpdate(prop.get(""PROJECT_UPDATE"")); view.setOverwriteInp(prop.get(""OVERWRITE_INP"")); view.setOverwriteRpt(prop.get(""OVERWRITE_RPT"")); view.setAutoImportRpt(prop.get(""AUTO_IMPORT_RPT"")); view.setSqlLog(prop.get(""SQL_LOG"")); view.setSridQuestion(prop.get(""SRID_QUESTION"")); view.setLoadRaster(prop.get(""LOAD_RASTER"")); view.setCheckUpdates(prop.get(""AUTO_CHECK_UPDATES"", ""false"")); view.setLanguage(prop.get(""LANGUAGE"", ""en"")); String var1 = prop.get(""LOG_FOLDER_SIZE"", ""10""); Integer var2 = 10; try{ var2 = Integer.parseInt(var1); } catch (NumberFormatException e) { String var3 = Utils.getBundleString(""ConfigController.log_size_invalid""); //$NON-NLS-1$ Utils.logError(var3); } view.setLogFolderSize(var2); } "	0	0	0	0	1	0
"@Override protected Object Func1() throws Exception { List<String> var1 = new ArrayList<>(); List<String> var2 = new ArrayList<>(); var2.add(System.getProperty(""java.home"") + ""/lib/rt.jar""); try(JarFile j = new JarFile(jarFile))  { Enumeration<JarEntry> var3 = j.var3(); while(var3.hasMoreElements()) { JarEntry var4 = var3.nextElement(); if(var4.isDirectory()) continue; String var5 = var4.getName(); URL var6; if(var5.endsWith("".class"")) { if(var5.contains(""$"")) { continue; } var6 = null; } else { var6 = new URL(""jar:"" + jarFile.getAbsoluteFile().toURI().toURL() + ""!/"" + var5); LOG.log(Level.INFO, ""Path: {0}"", var6); } if(var6 == null) { var1.add(var5); } this.publish(new FilePair(var5, var6)); } } if(!var1.isEmpty()) { Path var7 = Files.createTempDirectory(jarFile.getName()); var7.toFile().deleteOnExit(); List<String> var8 = new ArrayList<>(); var8.add(System.getProperty(""java.home"") + ""/bin/java""); var8.add(""-jar""); var8.add(config.getCrf().getAbsolutePath()); var8.add(""--outputdir""); var8.add(var7.toAbsolutePath().toString()); var8.add(jarFile.getAbsolutePath()); LOG.log(Level.INFO, ""Executing: \""'{0}'\"""", var8.stream().collect(Collectors.joining(""' '""))); ProcessBuilder var9 = new ProcessBuilder(var8); var9.redirectErrorStream(true); Process var10 = var9.start(); try { var10.getOutputStream().close(); try(BufferedReader r = new BufferedReader(new InputStreamReader(var10.getInputStream()))) { String var11; int var12 = 0; int var13 = var1.size(); FilePair var14 = null; while((var11 = r.readLine()) != null) { LOG.log(Level.INFO, ""Read: {0}"", var11); if(var11.startsWith(""Processing "")) { if(var14 != null) { this.publish(var14); var14 = null; } var12++; String var15 = var11.substring(""Processing "".length()).replace('.', '/'); this.setProgress(var12 * 100 / var13); var14 = new FilePair(var15 + "".class"", new File(var7 + ""/"" + var15 + "".java"").toURI().toURL()); } if(this.isCancelled()) { var10.destroy(); } } if(var14 != null) { this.publish(var14); } } } finally { var10.destroy(); } if(var10.waitFor() != 0) { throw new IllegalStateException(""Invalid exit state: "" + var10.exitValue()); } } return null; } "	0	0	0	0	0	1
public static String Func1(byte[] var1) { String var2 = PacketBuilderHelper.getPacketHex(var1); return trafficProfile.encodeBinaryFromHexString(var2); } 	0	0	1	1	0	0
"@Override public void Func1() throws IOException { try { JdbcEntityDefinitionManager.load(); ConnectionManagerFactory.getInstance(); JdbcEntityDDLManager.getInstance().Func1(); } catch (Exception e) { LOG.error(""Failed to start connection manager"",e); throw new IOException(e); } } "	0	0	0	0	1	0
@Override public void Func1(ValueHolder var1, Consumer<Map<AttributeRefEditor.AssetInfo, List<AttributeRefEditor.AttributeInfo>>> var2) { AssetQuery var3; Predicate<AssetAttribute> var4 = null; if ((var1 instanceof MetaItem) && AgentLink.isAgentLink((MetaItem) var1)) { var3 = new AssetQuery() .select(new AssetQuery.Select(AssetQuery.Include.ONLY_ID_AND_NAME_AND_ATTRIBUTES)) .type(AssetType.AGENT); if (!isNullOrEmpty(asset.getRealmId())) { var3.tenant(new AbstractAssetQuery.TenantPredicate(asset.getRealmId())); } var4 = ProtocolConfiguration::isProtocolConfiguration; } else { var3 = new AssetQuery() .select(new AssetQuery.Select(AssetQuery.Include.ONLY_ID_AND_NAME_AND_ATTRIBUTE_NAMES, true)); if (!isNullOrEmpty(asset.getRealmId())) { var3.tenant(new AbstractAssetQuery.TenantPredicate(asset.getRealmId())); } } final Predicate<AssetAttribute> var5 = var4; environment.getRequestService().execute( assetArrayMapper, assetQueryMapper, requestParams -> assetResource.queryAssets(requestParams, var3), 200, assets -> { Map<AttributeRefEditor.AssetInfo, List<AttributeRefEditor.AttributeInfo>> var6 = Arrays .stream(assets) .filter(asset -> !asset.getAttributesList().isEmpty()) .collect(Collectors.toMap( asset -> new AttributeRefEditor.AssetInfo(asset.getName(), asset.getId()), asset -> asset.getAttributesStream() .filter(attribute -> var5 == null || var5.test(attribute)) .map(attribute -> new AttributeRefEditor.AttributeInfo( attribute.getName().orElse(null), attribute.getLabelOrName().orElse(null) ) ) .collect(Collectors.toList()) )); var2.accept(var6); }, exception -> var2.accept(new HashMap<>()) ); } 	0	0	1	1	0	0
private void Func1() { long var1 = mConversation.getThreadId(); for (Integer var2 : mSelectedPos) { Cursor var3 = (Cursor) getListView().getAdapter().getItem(var2); String var4 = String.valueOf(var3.getString(COLUMN_RCS_ID)); try { mMessageApi.Func1(var1, var4); } catch (ServiceDisconnectedException e) { e.printStackTrace(); } } } 	0	0	0	0	1	0
@Override public void Func1(boolean var1, int var2, Rect var3) { super.Func1(var1, var2, var3); if(enoughToFilter()) performCompletion(); if(allowCollapse) performCollapse(var1); } 	0	0	1	0	1	0
private void Func1() { DrillOnYarnConfig var1 = DrillOnYarnConfig.instance(); if ( ! var1.hasSiteDir() ) { return; } String var2 = config.getString( DrillOnYarnConfig.SITE_ARCHIVE_NAME ); removeArchive( var2 ); } 	0	0	1	0	1	0
"private void Func1(boolean var1) { GenericErrorHandler<?> var2 = this.containerProperties.getErrorHandler(); if (errorHandler == null) { return; } Type[] var3 = var2.getClass().getGenericInterfaces(); boolean var4 = false; for (Type var5 : var3) { if (var5.equals(ErrorHandler.class)) { var4 = !var1; break; } else if (var5.equals(BatchErrorHandler.class)) { var4 = var1; break; } } Assert.state(var4, ""Error handler is not compatible with the message listener, expecting an instance of "" + (var1 ? ""BatchErrorHandler"" : ""ErrorHandler"") + "" not "" + var2.getClass().getName()); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { URL var1 = new URL(""http://localhost:"" + RANDOM_SERVER_PORT + ""/""); HttpURLConnection var2 = (HttpURLConnection) var1.openConnection(); var2.setDoInput(true); String var3 = Util.readToString(var2.getInputStream()); assertEquals(""hello world"", var3); NotifyingListAppender var4 = (NotifyingListAppender) REQYEST_LOG_IMPL .getAppender(""list""); var4.list.clear(); } "	0	0	1	0	0	0
"@Override public void Func1(boolean var1) { ArrayList<User> var2 = new ArrayList<User>(); ArrayList<User> var3 = new ArrayList<User>(); final Duration var4 = Duration.ofSeconds(UserListPanel.this.client.getTimeToIdle()); for (User var5 : this.client.getUserList()) { final Duration var6 = this.client.getUser().var6(); if (!var4.isZero() && var6.compareTo(var4) > 0) { var3.add(var5); } else { var2.add(var5); } } this.header.setText(""Active ("" + var2.size() + "")""); if (!var2.isEmpty()) { var2.sort(new CompareActiveUsers()); } if (!var3.isEmpty()) { var3.sort(new CompareIdleUsers()); } this.userListModel.removeAllElements(); for (final User var5 : var2) { this.userListModel.addElement(var5); } User var7 = new User(); var7.setUserName(""Idle ("" + var3.size() + "")""); var7.setRole(Role.IDLE); this.userListModel.addElement(var7); for (final User var5 : var3) { this.userListModel.addElement(var5); } } "	0	0	1	1	0	0
"@Override protected void Func1(TableLayout var1) { TableLayout var2 = (TableLayout) View.inflate( this, R.layout.playoff_playoff_information, null ); ImageView var3 = (ImageView) var2.findViewById(R.id.playoff_type); if (playoff.computerPlayOffConfiguration == null) { var3.setImageResource(R.drawable.ic_standing_man); } else { var3.setImageResource(R.drawable.ic_computer); } ((TextView) var2.findViewById(R.id.opponent_name)).setText(""Computer""); ((TextView) var2.findViewById(R.id.total_score)).setText(String.valueOf(playoff.userPlayoffScore) + "" - "" + String.valueOf(playoff.opponentPlayoffScore)); ((TextView) var2.findViewById(R.id.datetime)).setText(DatetimeHelper.DATE_FORMATTER.format(playoff.datetime)); ((TextView) var2.findViewById(R.id.tournament_constraint)).setText(playoff.getTournamentConstraint().translatedName); if (playoff.computerPlayOffConfiguration != null) { ((TextView) var2.findViewById(R.id.score_configuration)).setText(String.valueOf(playoff.computerPlayOffConfiguration.minScore) + "" - "" + String.valueOf(playoff.computerPlayOffConfiguration.maxScore)); } var1.addView(var2); } "	0	0	0	0	1	0
@Before public void Func1() throws Exception { testFixture.Func1(this); } 	0	0	0	1	0	0
"public static Response Func1(IHTTPSession var1, Map<String, String> var2, Map<String, String> var3, ViewContext var4, Model var5) { return new Response(View.make(""setup.firstrun"", var4)); } "	0	0	0	1	1	0
private void Func1() { List<BTSUserGroup> var1 = userManagerController.listUserGroups(null); observableLisAllUserGroups = new WritableList(var1, BTSUserGroup.class); userGroupMap = new HashMap<String, BTSUserGroup>(var1.size()); for (BTSUserGroup var2 : var1) { userGroupMap.put(var2.getName(), var2); } } 	0	0	0	0	1	0
"private void Func1(String var1, Tocd var2) throws KuraException, IOException { String var3 = this.m_servicePidByPid.get(var1); if (var3 == null) { var3 = var1; } Configuration var4 = this.m_configurationAdmin.getConfiguration(var3); if (var4 != null) { Map<String, Object> var5 = new HashMap<String, Object>(); if (var4.getProperties() != null) { var5.putAll(CollectionsUtil.dictionaryToMap(var4.getProperties(), var2)); } if (!var5.containsKey(ConfigurationService.KURA_SERVICE_PID)) { var5.put(ConfigurationService.KURA_SERVICE_PID, var1); } mergeWithDefaults(var2, var5); var4.update(CollectionsUtil.mapToDictionary(var5)); s_logger.info(""Seeding updated configuration for var1: {}"", var1); } } "	0	0	1	1	1	0
"public static <T> Class<T> Func1(final Class<T> var1) { if (double.class.equals(var1)) { return (Class<T>)Double.class; } if (float.class.equals(var1)) { return (Class<T>)Float.class; } if (long.class.equals(var1)) { return (Class<T>)Long.class; } if (int.class.equals(var1)) { return (Class<T>)Integer.class; } if (short.class.equals(var1)) { return (Class<T>)Short.class; } if (byte.class.equals(var1)) { return (Class<T>)Byte.class; } if (boolean.class.equals(var1)) { return (Class<T>)Boolean.class; } if (char.class.equals(var1)) { return (Class<T>)Character.class; } if (void.class.equals(var1)) { return (Class<T>)Void.class; } throw new IllegalArgumentException(""Not a primitive var1: "" + var1.getName()); } "	0	0	1	1	0	0
@Override public int Func1() { return mArticlesTextParts == null ? 0 : mArticlesTextParts.size() + 1; //+1 for title } 	0	0	0	0	1	0
@Override protected void Func1(int var1, int var2) { int var3 = MeasureSpec.getMode(var1); int var4 = MeasureSpec.getSize(var1); contentWidth = (int) (maxTextWidth + getPaddingLeft() + getPaddingRight()); if (var3 != MeasureSpec.EXACTLY) { // wrap_content var4 = contentWidth; } var3 = MeasureSpec.getMode(var2); int var5 = MeasureSpec.getSize(var2); textHeight = (int) (fm.bottom - fm.top); contentHeight = textHeight * maxShowNum + textPadding * maxShowNum; if (var3 != MeasureSpec.EXACTLY) { // wrap_content var5 = contentHeight + getPaddingTop() + getPaddingBottom(); } cx = var4 / 2; cy = var5 / 2; setMeasuredDimension(var4, var5); } 	0	0	0	0	1	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.connect); findViewById(R.id.button_advertise).setOnClickListener(this); findViewById(R.id.button_discover).setOnClickListener(this); mDebugInfo = (TextView) findViewById(R.id.debug_text); mDebugInfo.setMovementMethod(new ScrollingMovementMethod()); mConnectionManager = new ConnectionManager(this); mConnectionManager.addMessageReceiverListener(this); } 	0	0	0	0	1	0
public static Map<Integer, ItemStack> Func1(IItemHandlerModifiable var1, @Nullable NBTTagCompound var2) { Map<Integer, ItemStack> var3 = new HashMap<>(); for (int var4 = 0; var4 < var1.getSlots(); var4++) { ItemStack var5 = var1.getStackInSlot(var4); if (ForgeEventFactory.getItemBurnTime(var5) > 0 && NBTMatchingHelper.matchNBTCompound(var2, var5.getTagCompound())) { var3.put(var4, var5.copy()); } } return var3; } 	0	0	0	0	1	0
"ConfigBuilder Func1(String var1){ Func1 = assignStringValue(var1, default_JETTY_WEB_PORT_GET_ENV); logger.debug(""Func1:""+Func1); return this; } "	0	0	0	0	1	0
"ConfigBuilder Func1(String var1){ Func1 = assignStringValue(var1, default_PG_VIDEO_BASE_URL); logger.debug(""Func1:""+Func1); return this; } "	0	0	0	0	1	0
"ConfigBuilder Func1(String var1){ Func1 = assignStringValue(var1, default_YOUTUBE_CLIENT_SECRET); logger.debug(""Func1:""+Func1); return this; } "	0	0	0	0	1	0
"ConfigBuilder Func1(String var1){ Func1 = assignStringValue(var1, default_PROXY_HOST); logger.debug(""Func1:""+Func1); return this; } "	0	0	0	0	1	0
"ConfigBuilder Func1(String var1){ Func1 = assignStringValue(var1, default_EMAIL_SUBJECT); logger.debug(""Func1:""+Func1); return this; } "	0	0	0	0	1	0
private void Func1() { checkChildren(getMainAst(), mLabelChildren, getLevel(), true, false); } 	0	0	0	0	1	0
private void Func1() { checkChildren(getMainAst(), mCaseChildren, getLevel(), true, false); } 	0	0	0	0	1	0
"@Override public String Func1() { StringBuffer var1 = new StringBuffer(); var1.append(""PrestatsReport [summary="").append(summary).append(""]""); return var1.Func1(); } "	1	0	0	0	1	0
public void Func1 () throws IOException { clusterGraphService.addGraphFile(getBundleDataPath()); if ((this.getSegments().isEmpty() || this.timeZone == null) && this.failed != null && !this.failed) { processGtfs(); } } 	0	0	0	0	1	0
"@Override protected boolean Func1( String var1, Constructor<? extends FilterInputStream> var2 ) { if (var2 == null) return true; if (!Modifier.isPublic(var2.getModifiers())) { throw new IllegalArgumentException(new IllegalAccessException( var2 + "" isn’t public"")); } if (!Arrays.equals(var2.getParameters(), decoderConstructorParams)) { throw new IllegalArgumentException(new IllegalArgumentException( var2 + "" has an illegal parameter list; expected "" + Arrays.toString(decoderConstructorParams))); } checkClass(var2.getDeclaringClass()); return true; } "	0	0	0	0	1	0
"public void Func1(ActionEvent var1) { this.loadSettings(); final JFileChooser var2 = new JFileChooser(); var2.setAcceptAllFileFilterUsed(false); var2.addChoosableFileFilter(new JPGFilter()); var2.addChoosableFileFilter(new PNGFilter()); Settings var3 = Settings.getSingletonInstance(); String var4; try { var4 = var3.getProperty(SETTING_SCREENSHOT_EXPORT_LAST_DIRECTORY); if (var4 != null && !(var4.length() == 0)) { var2.setCurrentDirectory(new File(var4)); } } catch (Throwable t) { Log.error(t); } var2.setSelectedFile(new File(var2.getCurrentDirectory() + ""/"" + SaveScreenshotAction.getDefaultFileName())); int var5 = var2.showSaveDialog(ImageViewerGui.getMainFrame()); if (var5 == JFileChooser.APPROVE_OPTION) { var3.setProperty(SETTING_SCREENSHOT_EXPORT_LAST_DIRECTORY, var2.getCurrentDirectory().getPath() + ""/""); var3.save(); File var6 = var2.getSelectedFile(); ExtensionFileFilter var7 = (ExtensionFileFilter) var2.getFileFilter(); if (!var7.accept(var6)) { var6 = new File(var6.getPath() + ""."" + var7.getDefaultExtension()); } try { ImageViewerGui.getSingletonInstance().getMainView().stop(); if (this.useCurrentOpenGlSize) ImageViewerGui.getSingletonInstance().getMainView().saveScreenshot(var7.getDefaultExtension(), var6); else ImageViewerGui.getSingletonInstance().getMainView().saveScreenshot(var7.getDefaultExtension(), var6, this.imageWidth, this.imageHeigth); ImageViewerGui.getSingletonInstance().getMainView().start(); } catch (IOException e1) { e1.printStackTrace(); } } } "	0	0	0	0	0	1
"private static String Func1(String var1, CommandLine var2, Map<String, CommandLine> var3) { String var4 = """" + ""# Bash completion entry point function.\n"" + ""# _complete_%1$s finds which commands and subcommands have been specified\n"" + ""# on the command line and delegates to the appropriate function\n"" + ""# to generate possible options and subcommands for the last specified subcommand.\n"" + ""function _complete_%1$s() {\n"" + ""  CMDS0=(%1$s)\n"" + """"; String var5 = """" + ""  ArrContains COMP_WORDS CMDS0 && { _picocli_%1$s; return $?; }\n"" + ""  echo \""not found\""\n"" + ""  _picocli_%1$s; return $?;\n"" + ""}\n""; StringBuilder var6 = new StringBuilder(1024); var6.append(format(var4, var1)); List<String> var7 = new ArrayList<String>(); var7.add(var1); List<String> var8 = new ArrayList<String>(); var3.put(var1, var2); generateFunctionCallsToArrContains(var7, var2, var6, var8, var3); var6.append(""\n""); Collections.reverse(var8); for (String var9 : var8) { var6.append(var9); } var6.append(format(var5, var1)); return var6.toString(); } "	0	0	0	0	1	0
public static void Func1() throws IOException { String[] var1 = getTemplates(); String[] var2     = getFiles(); for ( int var3 = 0; var3 < var2.length; var3++ ) { mergeTemplate( var2[ var3 ], var1[ var3 ] ); } } 	0	0	0	0	1	0
"@Override public void Func1(CompoundButton var1, boolean var2) { settings.save(""news_browser"", var2); } "	0	0	0	0	1	0
"@Test public void Func1() { final LogArgumentGroupExtractor var1 = LogArgumentGroupExtractor.instance("""", """", """", """", LogFormatArgument.ERROR_MESSAGE.toString()); httpLogFormatter.setLogic(var1, formatter); assertTrue(formatter.getLogic() instanceof Func1); } "	0	0	0	0	1	0
"@Override public void Func1() { super.Func1(); ((MainActivity) getActivity()).setTitle(getResources().getString(R.string.listaen) + "" "" + sBase.getServerName()); ((MainActivity) getActivity()).enableHomeButton(true); } "	0	0	0	0	1	0
"private void Func1() { frame = new JFrame(); frame.setBounds(100, 100, 583, 290); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.getContentPane().setLayout(null); frame.setResizable(false); JLabel var1 = new JLabel(""Dobro došao, Meho!""); var1.setBounds(12, 12, 153, 15); frame.getContentPane().add(var1); JButton var2 = new JButton(""Prijava preuzetog vozila""); var2.addActionListener(new ActionListener() { public void Func2(ActionEvent var3) { PrijavljivanjePreuzetogVozila var4 = new PrijavljivanjePreuzetogVozila(); var4.main(null); } }); var2.setBounds(12, 74, 220, 25); frame.getContentPane().add(var2); JButton var5 = new JButton(""Odjava preuzetog vozila""); var5.addActionListener(new ActionListener() { public void Func2(ActionEvent var3) { OdjavljivanjePreuzetogVozila var6 = new OdjavljivanjePreuzetogVozila(); var6.main(null); } }); var5.setBounds(12, 120, 220, 25); frame.getContentPane().add(var5); JButton var7 = new JButton(""Odjavi se""); var7.addActionListener(new ActionListener() { public void Func2(ActionEvent var3) { for (Window var8 : Window.getWindows()) { var8.dispose(); } JOptionPane.showMessageDialog(null, ""Uspješno ste odjavljeni!""); Login var9 = new Login(); var9.main(); } }); var7.setBounds(440, 176, 117, 25); frame.getContentPane().add(var7); JButton var10 = new JButton(""Pregled slobodnih vozila""); var10.addActionListener(new ActionListener() { public void Func2(ActionEvent var3) { var10 var11 = new var10(); var11.main(null); } }); var10.setBounds(12, 157, 220, 25); frame.getContentPane().add(var10); JButton var12 = new JButton(""Pomoć""); var12.addActionListener(new ActionListener() { public void Func2(ActionEvent var3) { JOptionPane.showMessageDialog(null, ""Omogućen vam je pregled svih slobodnih vozila. Prijavite ili odjavite"" + ""vozilo koje namjeravate preuzeti/vratiti.""); } }); var12.setBounds(477, 228, 80, 23); frame.getContentPane().add(var12); } "	0	0	0	1	0	0
public void Func1(final MaterialSectionOnClickListener var1) { this.var1 = var1; } 	0	0	0	0	1	0
@RequiresPermission(allOf = { Manifest.permission.ACCESS_WIFI_STATE, Manifest.permission.ACCESS_NETWORK_STATE }) public final String Func1() { String var1 = null; if (PermissionUtil.hasPermission(context, Manifest.permission.ACCESS_WIFI_STATE)) { ConnectivityManager var2 = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE); NetworkInfo var3 = var2.getActiveNetworkInfo(); if (var3 == null) { var1 = null; } if (var3.isConnected()) { final WifiManager var4 = (WifiManager) context.getApplicationContext().getSystemService(Context.WIFI_SERVICE); final WifiInfo var5 = var4.getConnectionInfo(); if (var5 != null && !TextUtils.isEmpty(var5.getSSID())) { var1 = var5.getSSID(); } } } return CheckValidityUtil.checkValidData(var1); } 	0	0	1	0	1	0
"public boolean Func1(String var1, String var2, float var3) throws IllegalArgumentException { if (var3 < 0.0f) throw new IllegalArgumentException(""New account may not be started with a negative var3""); return newAccountFactory(var1, var2, var3); } "	0	0	0	0	1	0
"public static void Func1(final String[] var1) throws Exception { if (var1.length != 1) { System.out.println(""Usage: java FormMain <property file>""); System.exit(1); } String var2 = var1[0]; JFrame var3 = new MainFrame(var2); var3.setVisible(true); } "	0	0	0	0	1	0
"public ResourceBundle Func1(Locale var1) { if (!bundles.containsKey(var1)) { ResourceBundle var2 = ResourceBundle.getBundle(""fi.metatavu.edelphi.smvcj.i18n.var1"", var1); bundles.put(var1, var2); } return bundles.get(var1); } "	0	0	0	0	1	0
"private void Func1(final String var1, int var2) { final StorageButton var3 = new StorageButton(mySkin, var1); var3.setColor(0.03f, 0.69f, 0.73f, 1);  // TODO test only Table var4 = new Table(); var7 = new Image(atlas.findRegion(var1)); Label var5 = new Label(var1, mySkin); var5.setFontScale(0.75f, 0.75f); var4.add(var5).left(); var4.row(); Label var6 = new Label(""#"" + Integer.toString(var2), mySkin); var6.setFontScale(0.5f, 0.5f); var4.add(var6).right(); Image var7 = this.var7; var3.add(var4).left().spaceRight(10); var3.add(var7).width(100).height(100); var3.row(); var7.setScaling(Scaling.fit); storageTable.add(var3).fill(); storageTable.row(); } "	0	0	0	0	1	0
"public void Func1() { File var1 = new File(Platform.getInstallLocation().getURL().getPath() + CONF_DIR); if (!var1.exists()) { if (var1.canWrite()) { var1.mkdir(); } else { var1 = new File(System.getProperty(""user.home"") + CONF_DIR); MessageDialog .openError( Display.getCurrent().getActiveShell(), ""Configuration var2 locations"", ""Warning: Configuration var2 will not in default location since the eclipse directory does not the write permission."" + ""The configuration var2 will be placed in "" + var1); if (!var1.exists()) var1.mkdir(); } } ConfFilePath = var1 + CONF_FILE_NAME; File var2 = new File(ConfFilePath); checkPaths(); try { config.store(new FileOutputStream(var2), HEADING); } catch (IOException e) { e.printStackTrace(); } } "	0	0	1	0	1	0
"public static void Func1(String[] var1) { String var2 = ""/Users/hedingxu/robust-github/Robust/app/robust/methodsMap_waimai.robust""; String var3 = ""/Users/hedingxu/robust-github/Robust/app/robust/methodsMap.robust""; var3 = ""/Users/hedingxu/robust-github/Robust/app/build/outputs/robust/methodsMap.robust""; parseRobustMethodsMap2File(var3, new File(""/Users/hedingxu/robust-github/Robust/app/robust/methodsMap0_bak.robust"")); if (true) { return; } HashMap<String, String> var4 = getMapFromZippedFile(var3); Set<String> var5 = var4.var5(); for (String var6 : var5) { String var7 = var6.trim(); MethodInfo var8 = new MethodInfo(var7); String var9 = getMethodId(var4, var8.className, var8.methodName, var8.paramTypes); System.err.println(""var9 : "" + var9 + "" ,methodString : "" + var7); } } "	0	0	0	0	1	0
"@Override public UserPrincipal Func1(String var1, String var2) throws RepositorySecurityException { UserPrincipal var3; if ((var1 != null) && (var2 != null)) { UserInfo var4 = authenticationProvider.getUserInfo( var1 ); if ((var4 == null) || !authenticationProvider.isValidUser( var1, var2 )) { throw new RepositorySecurityException( ""Invalid var3 name or var2 submitted for principal: "" + var1 + ""/'"" + var2 + ""'""); } var3 = new UserPrincipal( var4, groupAssignmentsResource.getAssignedGroups( var1 ) ); } else { var3 = UserPrincipal.ANONYMOUS_USER; } return var3; } "	0	0	1	1	0	0
"private POGraph Func1(String var1) { POGraph var2 = new POGraph(pogAlignment); if (var1.equalsIgnoreCase(""root"")) var1 = (String)phyloTree.getRoot().getLabel(); List<Inference> var3 = ancestralInferences.get(var1); for (Inference var4 : var3) if (var2.setCurrent(var4.pogId)) { if (var4.pogId != null && var4.pogId != -1) if (var4.base == '-') var2.removeNode(); else var2.setBase(var4.base); if (var2.getCurrentId() != var4.pogId) continue; ArrayList<Integer> var5 = new ArrayList<>(); for (Integer var6 : var2.getNextIDs()) { Inference var7 = null; for (Inference var8 : var3) if (var8.pogId == var6) { var7 = var8; break; } if (var4.transitions.contains(var6) && var7 != null && var7.transitions.contains(var4.pogId)) var2.setReciprocated(var6); if (var7 != null && var7.transitions.contains(var4.pogId)) var5.add(var7.pogId); } for (Integer var6 : var2.getNextIDs()) if (var4.transitions.contains(var6) && !var5.contains(var6)) var5.add(var6); for (Integer var6 : var2.getNextIDs()) if (!var5.contains(var6)) var2.removeNextTransition(var6); } if (marginalNode != null) for (Integer var9 : var2.getNodeIDs()) { double[] var10 = marginalDistributions[var9].get(); HashMap<Character, Double> var11 = new HashMap<>(); for (int var12 = 0; var12 < var10.length; var12++) var11.put((char) marginalDistributions[var9].getDomain().get(var12), var10[var12]); var2.setCurrent(var9); var2.setCharacterDistribution(var11); } return var2; } "	1	0	1	1	0	0
"public void Func1(int var1) throws SQLException { checkOpen(); if (var1 < 0 || (statement.getMaxRows() > 0 && var1 > statement.getMaxRows())) { throw new SQLException( Messages.get(""error.generic.badparam"", Integer.toString(var1), ""var1""), ""HY092""); } if (var1 == 0) { var1 = statement.getDefaultFetchSize(); } this.fetchSize = var1; } "	0	0	1	0	1	0
"private TreeNode Func1(String var1, List<String> var2) { DefaultMutableTreeNode var3 = new DefaultMutableTreeNode(var1); DefaultMutableTreeNode var4 = new DefaultMutableTreeNode(""var4""); String var5 = null; DefaultMutableTreeNode var6 = null; for (int var7 = 0; var7 < var2.size(); var7++) { String var8 = var2.get(var7); String var9 = var8; if (var9.lastIndexOf('.') > 0) { var9 = var9.substring(0, var9.lastIndexOf('.')); } if (var5 == null || !var9.equals(var5)) { var5 = var9; var6 = new DefaultMutableTreeNode(var9); var4.add(var6); } var6.add(new DefaultMutableTreeNode(var8)); } var3.add(var4); return var3; } "	0	0	0	0	1	0
public Collection<Runnable> Func1() { synchronized (listenersLock) { if (listeners == null) { return Collections.emptyList(); } else { return Collections.unmodifiableList(new ArrayList<Runnable>(listeners.keySet())); } } } 	0	0	0	0	1	0
@Test public void Func1() { ListenerHelper<TestInterface> var1 = makeListenerHelper(TestInterface.class); TestImp var2 = new TestImp(); Executor var3 = new SameThreadSubmitterExecutor(); var1.addListener(var2, var3); assertEquals(1, var1.registeredListenerCount()); assertTrue(var1.listeners.get(var2) == var3); } 	0	0	0	0	1	0
public List<Institution> Func1(ArrayList<Long> var1, ArrayList<Long> var2) { return InstitutionFinderUtil.findInstitutionsByLectureseriesIdsAndVideoIds(var1, var2); } 	0	0	1	0	1	0
public static RxJavaSchedulersHook Func1(Vertx var1) { return io.var1.rx.java.RxHelper.Func1(var1.delegate); } 	0	0	1	0	1	0
public static Scheduler Func1(Vertx var1) { return new ContextScheduler(var1.delegate, false); } 	0	0	1	0	1	0
public static Scheduler Func1(Context var1) { return new ContextScheduler(var1.delegate, false); } 	0	0	0	0	1	0
"public static void Func1(String[] var1) throws Exception { long var2 = System.currentTimeMillis(); Configuration var3 = new Configuration(); String[] var4 = new GenericOptionsParser(var3, var1).getRemainingArgs(); if (var4.length != 2) { System.err.println(""Usage: FSPChunkLevelDedup <in> <out>""); System.exit(2); } log.debug(""=========var5 var2=========""); Job var5 = new Job(var3, ""Job_FSPChunkLevelDedup""); var5.setJarByClass(FileLevelDedup.class); var5.setMapperClass(FSPMapper.class); var5.setReducerClass(FSPReducer.class); FileInputFormat.addInputPath(var5, new Path(var1[0])); FileOutputFormat.setOutputPath(var5, new Path(var1[1])); var5.setMapOutputKeyClass(Text.class); var5.setMapOutputValueClass(ChunkInfo.class); var5.setOutputKeyClass(Text.class); var5.setOutputKeyClass(IntWritable.class); var5.setInputFormatClass(FSPFileInputFormat.class); var5.setOutputFormatClass(TextOutputFormat.class); long var6 = System.currentTimeMillis(); log.debug(""=========var5 var6=========""); if (var5.waitForCompletion(true)) { log.debug(""consume time:{} "", var6-var2); } System.exit(var5.isSuccessful() ? 0 : 1); } "	0	0	0	0	1	0
"public synchronized void Func1(double var1, int var2) { for (TPosition var3 : openPositions.values()) { if (Algorithm.needsToBeClosed(var3, var1, var2)) { Util.sendNotification(""Closing var3: "" + var3); closePosition(var3); } } } "	0	0	0	0	1	0
@Override public void Func1(Palette var1) { setColor(var1.getDarkVibrantColor(Color.BLACK)); } 	0	0	0	0	1	0
public void Func1(boolean var1) { if (alarm != null) alarm.transition(var1 ? ImageUtils.getVectorDrawable(getContext(), R.drawable.ic_alarm) : null); } 	0	0	0	0	1	0
"@Override public boolean Func1(final UpdateStackCommand var1) { boolean Func1 = true; final String var3 = configStore.getStackId(var1.getStackName()); if (StringUtils.isBlank(var3)) { logger.error(""The stack name specified has been created for this environment yet!""); Func1 = false; } else if (!cloudFormationService.isStackPresent(var3)) { logger.error(""CloudFormation doesn't have the specified stack: {}"", var3); Func1 = false; } return Func1; } "	0	0	0	0	1	0
"public void Func1() { super.Func1(); initInput(); resourceManager = new ResourceManager( screen.getFullScreenWindow().getGraphicsConfiguration()); renderer = new TileMapRenderer(); map = resourceManager.loadFirstMap(); soundManager = new SoundManager(PLAYBACK_FORMAT); midiPlayer = new MidiPlayer(); Sequence var1 = midiPlayer.getSequence(""sounds/stage1.mid""); midiPlayer.play(var1, true); } "	0	0	0	0	1	0
"@Override protected NodeChannels Func1(DiscoveryNode var1, ConnectionProfile var2) throws IOException { NioSocketChannel[] var3 = new NioSocketChannel[var2.getNumConnections()]; boolean var4 = client.Func1(var1, var3, var2.getConnectTimeout(), new ClientChannelCloseListener(var1)); if (var4 == false) { throw new ElasticsearchException(""client is shutdown""); } return new NodeChannels(var1, var3, var2); } "	0	0	0	0	1	0
public void Func1() { continueBtn.click(); } 	0	0	0	0	1	0
"public static <C extends Collection<Value>> C Func1(final Model var1, Resource var2, C var3, Resource... var4) throws ModelException { Objects.requireNonNull(var3, ""var3 may not be null""); Func1(v -> var3.add(v), var1, var2, var4); return var3; } "	0	0	0	0	1	0
public static <C extends Collection<Statement>> C Func1(ValueFactory var1, Resource var2, IRI var3, Value var4, C var5, Resource... var6) { Objects.requireNonNull(var5); Func1(var1, var2, var3, var4, st -> var5.add(st), var6); return var5; } 	0	0	0	0	1	0
public boolean Func1() { return this.linearized; } 	0	0	0	0	1	0
"@Test public void Func1() throws ApiSenderException, InterruptedException { VmInstanceInventory var1 = deployer.vms.get(""TestVm""); List<L3NetworkInventory> var2 = api.getVmAttachableL3Networks(var1.getUuid()); Assert.assertTrue(var2.isEmpty()); IdentityCreator var3 = new IdentityCreator(api); AccountInventory var4 = var3.useAccount(""Func1""); SessionInventory var5 = var3.getAccountSession(); IdentityCreator var6 = new IdentityCreator(api); AccountInventory var7 = var6.createAccount(""var7"", ""password""); SessionInventory var8 = var6.getAccountSession(); InstanceOfferingInventory var9 = deployer.instanceOfferings.get(""TestInstanceOffering""); ImageInventory var10 = deployer.images.get(""TestImage""); L3NetworkInventory var11 = deployer.l3Networks.get(""TestL3Network1""); L3NetworkInventory var12 = deployer.l3Networks.get(""TestL3Network2""); L2NetworkInventory var13 = deployer.l2Networks.get(""TestL2Network""); api.shareResource(list(var9.getUuid(), var10.getUuid(), var11.getUuid()), list(var7.getUuid()), false, var5); VmCreator var14 = new VmCreator(api); var14.instanceOfferingUuid = var9.getUuid(); var14.imageUuid = var10.getUuid(); var14.addL3Network(var11.getUuid()); var14.session = var8; VmInstanceInventory var15 = var14.create(); List<L3NetworkInventory> var16 = api.getVmAttachableL3Networks(var15.getUuid(), var8); Assert.assertEquals(0, var16.size()); api.shareResource(list(var12.getUuid()), list(var7.getUuid()), false, var5); var16 = api.getVmAttachableL3Networks(var15.getUuid(), var8); Assert.assertEquals(1, var16.size()); for (L3NetworkInventory var17 : var16) { Assert.assertFalse(var17.getUuid().equals(var11.getUuid())); } api.createL3BasicNetwork(var13.getUuid(), var8); var16 = api.getVmAttachableL3Networks(var15.getUuid(), var8); Assert.assertEquals(2, var16.size()); for (L3NetworkInventory var17 : var16) { Assert.assertFalse(var17.getUuid().equals(var11.getUuid())); } api.revokeAllResourceSharing(list(var12.getUuid()), var5); var16 = api.getVmAttachableL3Networks(var15.getUuid(), var8); Assert.assertEquals(1, var16.size()); for (L3NetworkInventory var17 : var16) { Assert.assertFalse(var17.getUuid().equals(var11.getUuid())); } var16 = api.getVmAttachableL3Networks(var15.getUuid()); Assert.assertEquals(3, var16.size()); for (L3NetworkInventory var17 : var16) { Assert.assertFalse(var17.getUuid().equals(var11.getUuid())); } for (VmNicInventory var18 : var15.getVmNics()) { api.detachNic(var18.getUuid()); } var16 = api.getVmAttachableL3Networks(var15.getUuid()); Assert.assertEquals(4, var16.size()); api.attachNic(var15.getUuid(), var11.getUuid()); var16 = api.getVmAttachableL3Networks(var15.getUuid()); for (L3NetworkInventory var17 : var16) { Assert.assertFalse(var17.getUuid().equals(var11.getUuid())); } var16 = api.getInterdependentL3NetworksByImageUuid(var15.getImageUuid(), var15.getZoneUuid(), var5); Assert.assertEquals(3, var16.size()); var16 = api.getInterdependentL3NetworksByImageUuid(var15.getImageUuid(), var15.getZoneUuid(), var8); Assert.assertEquals(1, var16.size()); } "	0	0	1	1	0	0
"public void Func1(SNode var1) { if (var1 instanceof STextualDS) { this.setSTextualDS((STextualDS)var1); } else { throw new SaltImproperSTypeException(""Parameter for STextualRelation.Func1 must be an instance of STextualDS.""); } } "	0	0	0	0	1	0
"public static Moment Func1() { return new Moment(UUID.randomUUID(), ""Title"", ""Description"", Calendar.getInstance(), null, null, null); } "	1	0	1	1	0	0
"@SubscribeEvent public void Func1(LivingHurtEvent var1){ if (var1.getSource().getEntity() instanceof EntityPlayer){ if (var1.getEntityLiving().getHealth() - var1.getAmount() <= 0){ EntityPlayer var2 = (EntityPlayer) var1.getSource().getEntity(); if (var2.getHeldItemMainhand().isItemEqual(new ItemStack(ModItems.pearcel_blood_dagger))){ ItemStack var3 = var2.getHeldItemMainhand(); if (!var3.hasTagCompound()){ var3.setTagCompound(new NBTTagCompound()); var3.getTagCompound().setInteger(""level"", 1); }else{ if (var3.getTagCompound().getInteger(""level"") <= 8) { var3.getTagCompound().setInteger(""level"", var3.getTagCompound().getInteger(""level"") + 1); }else{ var3.getTagCompound().setInteger(""level"", 0); EntityItem var4 = new EntityItem(var2.getEntityWorld(), var2.posX, var2.posY + 0.5, var2.posZ); var4.setEntityItemStack(new ItemStack(ModItems.blood_drop)); Random var5 = new Random(); int var6 = var5.nextInt(2) + 1; for (int var7 = 0; var7 <= var6; var7++) { var2.getEntityWorld().spawnEntityInWorld(var4); } } } } } } } "	0	0	0	0	1	0
@DataBoundSetter public void Func1(List<PodImagePullSecret> var1) { if(var1 != null) { this.var1 = new ArrayList<PodImagePullSecret>(); this.addImagePullSecrets(var1); } } 	0	0	1	0	1	0
"static void Func1(AbstractNettyHandler var1) { if (!enabled) { return; } synchronized (InternalHandlerSettings.class) { var1.setAutoTuneFlowControl(autoFlowControlOn); if (var1 instanceof NettyClientHandler) { clientHandler = var1; } else if (var1 instanceof NettyServerHandler) { serverHandler = var1; } else { throw new RuntimeException(""Expecting NettyClientHandler or NettyServerHandler""); } } } "	0	0	1	0	0	0
"@Before public void Func1() throws Exception { cl = new TestClass(""bla"", null); } "	0	0	0	0	1	0
"private void Func1() { final boolean var1 = mMeter.meter_log_settings.target_logging_state==MooshimeterDevice.LOGGING_SAMPLING; final GradientDrawable var2 = var1?AUTO_GRADIENT:MANUAL_GRADIENT; final String var3 = var1?""Logging:ON"":""Logging:OFF""; logging_button.setBackground(var2); logging_button.setText(var3); } "	0	0	0	0	1	0
public boolean Func1(Unit var1, float var2) { if (var1.getRelativeTileY() + var2 < 64.0 && var1.getRelativeTileY() + var2 > 0.0) { return true; } return false; } 	0	0	0	0	1	0
"@Setter protected void Func1(Environment var1, Pane var2) { if (getWrappedObject().getScene() == null) { throw new IllegalStateException(""Unable to set layout""); } getWrappedObject().getScene().setRoot(var2); getWrappedObject().sizeToScene(); data(var1, ""~~virtual-layout"", Memory.NULL); } "	0	0	1	1	0	0
private void Func1(Session var1, SimpleDocument var2, boolean var3) throws RepositoryException { repository.fillNodeName(var1, var2); repository.deleteDocument(var1, var2.getPk()); for (String var4 : I18NHelper.getAllSupportedLanguages()) { deleteIndex(var2, var4); } if (var2.isOpenOfficeCompatible()) { webdavRepository.deleteAttachmentNode(var1, var2); } if (var3) { AttachmentNotificationService var5 = AttachmentNotificationService .getService(); var5.notifyOnDeletionOf(var2); } } 	0	0	0	0	1	0
"@Override public void Func1(String var1) { if (playerListener != null) { playerListener.eventWithJSON(player, ""adRemainingTimeChange"", var1); } } "	0	0	0	0	1	0
public String Func1(int var1, String var2, boolean var3){ return var1+var2+var3+this.mAA3(var1, var2,var3)+var1+var2+var3+this.mAA2(var1, var2,var3)+var1+var2+var3+this.mAA1(var1, var2,var3); }; 	0	0	0	0	1	0
"@Override public void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_search); if (getActionBar() != null) { getActionBar().setTitle(R.string.search_title); getActionBar().setDisplayHomeAsUpEnabled(true); } mSearchType = getIntent().getExtras().getInt(SEARCH_TYPE); switch (mSearchType) { case REQUEST_CODE_SEARCH_POKEMON: String var2 = getIntent().getExtras().getString(CURRENT_TIER, null); HashMap<String, String> var3 = Pokedex.get(getApplicationContext()).getPokedexEntries(); mAdapterList = new ArrayList<>(); if (var2 == null || """".equals(var2)) { mAdapterList.addAll(var3.keySet()); Collections.sort(mAdapterList); } else { HashMap<String, ArrayList<String>> var4 = Tiering.get(getApplicationContext()).getTierList(); ArrayList<String> var5 = var4.get(var2); if (var5 != null) { Collections.sort(var5); mAdapterList.addAll(var5); int var6 = Tiering.TIER_ORDER.indexOf(var5); for (int var7 = var6 + 1; var7 < Tiering.TIER_ORDER.size(); var7++) { ArrayList<String> var8 = var4.get(Tiering.TIER_ORDER.get(var7)); Collections.sort(var8); mAdapterList.addAll(var8); } } else { mAdapterList.addAll(var3.keySet()); Collections.sort(mAdapterList); } } mAdapter = new PokemonAdapter(this, mAdapterList); setListAdapter(mAdapter); getActionBar().setTitle(R.string.search_label_pokemon); break; case REQUEST_CODE_SEARCH_ABILITY: HashMap<String, String> var9 = AbilityDex.get(getApplicationContext()).getAbilityDexEntries(); mAdapterList = new ArrayList<>(var9.keySet()); Collections.sort(mAdapterList); mAdapter = new AbilityAdapter(this, mAdapterList); setListAdapter(mAdapter); getActionBar().setTitle(R.string.search_label_ability); break; case REQUEST_CODE_SEARCH_ITEM: HashMap<String, String> var10 = ItemDex.get(getApplicationContext()).getItemDexEntries(); mAdapterList = new ArrayList<>(var10.keySet()); Collections.sort(mAdapterList); mAdapter = new ItemAdapter(this, mAdapterList); setListAdapter(mAdapter); getActionBar().setTitle(R.string.search_label_item); break; case REQUEST_CODE_SEARCH_MOVES: String var11 = getIntent().getExtras().getString(POKEMON_LEARNSET, null); if (var11 != null) { mAdapterList = new ArrayList<>(); while (var11 != null) { ArrayList<String> var12 = Learnset.get(getApplicationContext()).getLearnetEntry(var11); if (var12 != null) { for (String var13 : var12) { if (!mAdapterList.contains(var13)) { mAdapterList.add(var13); } } } try { var11 = Pokedex.get(getApplicationContext()).getPokemonJSONObject(MyApplication.toId(var11)).has(""prevo"") ? Pokedex.get(getApplicationContext()).getPokemonJSONObject(MyApplication.toId(var11)).getString(""prevo"") : null; } catch (JSONException e) { e.printStackTrace(); } } } else { HashMap<String, String> var14 = MoveDex.get(getApplicationContext()).getMoveDexEntries(); mAdapterList = new ArrayList<>(var14.keySet()); } Collections.sort(mAdapterList); mAdapter = new MovesAdapter(this, mAdapterList); setListAdapter(mAdapter); getActionBar().setTitle(R.string.search_label_moves); break; } } "	1	0	0	0	0	0
"public void Func1(int var1) { if (!Model.isConnected()) { Toast.makeText(this, ""Detaljer kan ikke hentes, da der ikke er internet"", Toast.LENGTH_LONG).show(); return; } try { String var2 = Model.getInstance().getItems().get(var1).getString(""detailsuri""); if (var2 == null) return; Model.getInstance().setCurrentDetailsURI(var2); Model.getInstance().setCurrentItem(null); Model.getInstance().fetchCurrentItem(); getSupportFragmentManager().beginTransaction() .replace(R.id.frame, new ItemShowFragment()) .addToBackStack(null) .commit(); boolean var3 = isSearchExpanded(); setSearchButtonVisible(false); updateSearchVisibility(); setSearchExpanded(var3); } catch (JSONException e) { e.printStackTrace(); return; } } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { TraceDataModel var1 = new TraceDataModel(); TraceBuilder var2 = var1.startBuilding(); var2.enterModule(""mod1""); int var3 = var2.newNet(""a"", -1, 1); int var4 = var2.newNet(""b"", -1, 1); var2.exitModule(); var2.appendTransition(var3, 0, new BitVector(""0"", 2)); var2.appendTransition(var3, 5, new BitVector(""1"", 2)); var2.appendTransition(var3, 10, new BitVector(""0"", 2)); var2.appendTransition(var3, 15, new BitVector(""1"", 2)); var2.appendTransition(var3, 20, new BitVector(""0"", 2)); var2.appendTransition(var3, 25, new BitVector(""1"", 2)); var2.appendTransition(var3, 30, new BitVector(""0"", 2)); var2.appendTransition(var3, 35, new BitVector(""1"", 2)); var2.appendTransition(var3, 40, new BitVector(""0"", 2)); var2.appendTransition(var3, 45, new BitVector(""1"", 2)); var2.appendTransition(var4, 0, new BitVector(""0"", 2)); var2.appendTransition(var4, 15, new BitVector(""1"", 2)); var2.appendTransition(var4, 30, new BitVector(""0"", 2)); var2.appendTransition(var4, 45, new BitVector(""1"", 2)); var2.loadFinished(); Query var5 = new Query(var1, ""mod1.a = 1 & mod1.b = 1""); assertEquals(15, var5.getNextMatch(0));  // false & false = false assertEquals(15, var5.getNextMatch(5));  // true & false = false assertEquals(15, var5.getNextMatch(10)); // false & false = false assertEquals(25, var5.getNextMatch(15)); // true & true = true assertEquals(25, var5.getNextMatch(20)); // false & true = false assertEquals(45, var5.getNextMatch(25)); // true & true = true assertEquals(45, var5.getNextMatch(30)); // false & false = false assertEquals(45, var5.getNextMatch(35)); // true & false = false assertEquals(45, var5.getNextMatch(40)); // false & false = false assertEquals(-1, var5.getNextMatch(45)); // true & true  = true assertEquals(-1, var5.getNextMatch(50)); // false & true = false assertEquals(-1, var5.getPreviousMatch(0));  // false & false = false assertEquals(-1, var5.getPreviousMatch(5));  // true & false = false assertEquals(-1, var5.getPreviousMatch(10)); // false & false = false assertEquals(-1, var5.getPreviousMatch(15)); // true & true = true assertEquals(19, var5.getPreviousMatch(20)); // false & true = false assertEquals(19, var5.getPreviousMatch(25)); // true & true = true assertEquals(29, var5.getPreviousMatch(30)); // false & false = false assertEquals(29, var5.getPreviousMatch(35)); // true & false = false assertEquals(29, var5.getPreviousMatch(40)); // false & false = false assertEquals(29, var5.getPreviousMatch(45)); // true & true  = true assertEquals(29, var5.getPreviousMatch(50)); // false & true = false } "	0	0	1	1	0	0
"@Test public void Func1() { if (hashMode == dontHash) { return; } s2 = s1.clone(); CompareResult var1 = new StateComparator(context, s1, s2).searchForHardwareCorruption().compare(); assertNothingModified(var1); s2 = s2.setContent(""file_01"", ""XXXX""); var1 = new StateComparator(context, s1, s2).searchForHardwareCorruption().compare(); assertGotOnlyModifications(var1, corrupted); assertFilesModified(var1, corrupted, ""file_01""); s2 = s2.delete(""file_02"").addFiles(""file_05""); var1 = new StateComparator(context, s1, s2).searchForHardwareCorruption().compare(); assertGotOnlyModifications(var1, corrupted); assertFilesModified(var1, corrupted, ""file_01""); } "	0	0	1	1	1	0
"public void Func1(Player var1) { Map<String, Boolean> var2 = new HashMap<String, Boolean>(); boolean var3 = vivePlayers.containsKey(var1.getUniqueId()); String var4 = getConfig().getString(""permissions.vivegroup""); String var5 = getConfig().getString(""permissions.non-vivegroup""); if (var4 != null) var2.put(var4, var3); if (var5 != null) var2.put(var5, !var3); if (var3) { String var6 = getConfig().getString(""permissions.freemovegroup""); if (var6 != null) var2.put(var6, !vivePlayers.get(var1.getUniqueId()).isTeleportMode); } updatePlayerPermissionGroup(var1, var2); } "	1	0	1	0	1	0
"public static void Func1(String var1, Player var2) { var2.Func1(""[Vivecraft] "" + var1); } "	0	0	0	0	1	0
"@Test public void Func1() { URL var1 = getClass().getResource(""/beep.mp3""); Path var2; try { var2 = Paths.get(var1.toURI()); Track var3 = new Track(var2.toString()); assertEquals(var3.getAlbum(), ""Beeps of the year""); assertEquals(var3.getTitle(), ""Beep""); assertEquals(var3.getArtist(), ""Flix""); assertEquals(var3.getLength(), new Long(575)); } catch (URISyntaxException e) { fail(""file wans't read correctly""); e.printStackTrace(); } } "	0	0	0	0	1	0
public boolean Func1() { return previousFileState.getFileTime().getCreationTime() / 1000 != fileState.getFileTime().getCreationTime() / 1000; } 	0	0	0	0	1	0
public boolean Func1() { for (CandidateEdge var1 : CandidateEdgeBundle.this) { StreetEdge var2 = var1.getEdge(); if (var2.getPermission().allows(StreetTraversalPermission.PEDESTRIAN)) { return true; } } return false; } 	0	0	1	0	1	0
@Override protected void Func1(Intent var1) { super.Func1(var1); if (var1.getData() == null) { return; } if (_vpnService.getStatus() != VPNService.VPNStatus.DISCONNECTED) { Toast.makeText(this, R.string.already_connected_please_disconnect, Toast.LENGTH_LONG).show(); return; } try { _connectionService.parseCallbackIntent(var1); openFragment(new ConnectProfileFragment()); } catch (ConnectionService.InvalidConnectionAttemptException ex) { ex.printStackTrace(); } } 	1	0	1	0	0	0
public synchronized void Func1(int[][] var1, int[][] var2) { this.var1 = var1; this.var2 = var2; this.firstPlayer = false; } 	0	0	1	1	0	0
public synchronized int[][] Func1() { return this.soln; } 	0	0	1	0	0	0
"private void Func1(String var1){ switch(var1){ case ""admin"": listOfMapNameForReturn.clear(); listOfMapURLForReturn.clear(); mainController.mapModel.loadMapLists(); LoadInMapNameList(); LoadInMapURL(); getAllMapNameAndURL(); break; case ""CampusMap"": listOfMapNameForReturn.clear(); listOfMapURLForReturn.clear(); updateMapListWithDesiredMapName(var1); addAllBuildingIntoList(); break; default: if(validateBuildingName(var1)){ listOfMapNameForReturn.clear(); listOfMapURLForReturn.clear(); updateMapListWithDesiredMapName(var1); updateMapListWithDesiredMapName(""CampusMap""); } break; } } "	0	0	0	0	0	1
"public static Collection<User> Func1(Collection<Uuid> var1) { final Set<User> var2 = new HashSet<>(); System.out.println(""Accessing ViewDatabase""); Connection var3 = null; Statement var4 = null; boolean var5 = true; String var6; if(!var1.isEmpty()){ var6 = ""WHERE ""; for (final Uuid var7 : var1) { String var8 = var7.toString(); if(var5){ var6 = var6 + ""ID <> "" + var8; } else{ var6 = var6 + "" AND ID <> "" + var8; } } }else { var6 = """"; } try { Class.forName(""org.sqlite.JDBC""); var3 = DriverManager.getConnection(""jdbc:sqlite:./bin/codeu/chat/codeU_db/ChatDatabase.db""); var3.setAutoCommit(false); var4 = var3.createStatement(); ResultSet var9 = var4.executeQuery( ""SELECT * "" + ""FROM USERS ""+ var6 + "";"" ); while (var9.next()){ System.out.println(""Enters""); Uuid var10 = Uuids.fromString(var9.getString(""ID"")); String var11 = var9.getString(""UNAME""); SimpleDateFormat var12 = new SimpleDateFormat(""YYYY-MM-DD HH:MM:SS""); String var13 = var9.getString(""TimeCreated""); Date var14 = var12.parse(var13); String var15 = var9.getString(""PASSWORD""); User var16 = new User(var10, var11, Time.fromMs(var14.getTime()), var15); var2.add(var16); } var9.close(); var4.close(); var3.close(); } catch ( Exception e ) { System.err.println( e.getClass().getName() + "": "" + e.getMessage() ); System.exit(0); } return var2; } "	0	0	0	0	1	0
"public static boolean Func1(User var1, Crate var2) { playersNode.getNode(var1.getUniqueId(), ""cooldowns"", var2.Name).setValue(System.nanoTime()); return savePlayersNode(); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { String var1 = ""Bobbye/6:00AM 17/11/2011 t/husband""; int var2 = 9; TestTodo var3 = new TodoBuilder().withName(""Bobby""). withEndTime(""6:00AM 17/11/2011"").withTags(""husband"").build(); assertEditSuccess(var2, var2, var1, var3); } "	0	0	0	0	1	0
"@Override public void Func1() throws IOException { if (log.isDebugEnabled()) { log.debug(""Func1({}) SH_MSG_CHANNEL_EOF"", this); } setEofSignalled(true); notifyStateChanged(); } "	0	0	0	0	1	0
public Collection<PropertyDescriptor> Func1() { return properties.values(); } 	0	0	1	0	1	0
"static public SRCPMessage Func1(int var1) { String var2 = ""TERM "" + var1 + ""  SM\n""; SRCPMessage var3 = new SRCPMessage(var2); return var3; } "	0	0	1	1	1	0
"public String Func1 () { throw new UnsupportedOperationException ( ""Not supported yet."" ); //To change body of generated methods, choose Tools | Templates. } "	0	0	0	0	1	0
"private void Func1() { LayoutInflater var1 = (LayoutInflater) getContext() .getSystemService(Context.LAYOUT_INFLATER_SERVICE); View var2 = var1.inflate(R.layout.creditcardview, this, true); String var3 = ""fonts/creditcard2.ttf""; creditCardTypeFace = Typeface.createFromAsset(getContext().getAssets(), var3); cardNumber = (EditText)getChildAt(0); cardName = (EditText)getChildAt(1); type = (ImageView)getChildAt(2); brandLogo = (ImageView)getChildAt(3); chip = (ImageView)getChildAt(4); validTill = (TextView)getChildAt(5); expiryDate = (EditText)getChildAt(6); } "	0	0	0	0	1	0
@Override public void Func1() { super.Func1(); viewFlipper.showPrevious(); } 	0	0	0	0	1	0
"private static URL[] Func1( URL[] var1 ) { List<URL> var2 = new ArrayList<URL>(); for( URL var3 : var1 ) { if( var3.getFile().endsWith( ""*"" ) ) { try { File var4 = new File( var3.getFile() ); File[] var5 = var4.getParentFile().listFiles( new FilenameFilter() { public boolean Func2( File var6, String var7 ) { return var7.endsWith( "".jar"" ); } } ); if( var5 != null ) { for( File var8 : var5 ) { var2.add( var8.toURI().toURL() ); } } else { System.out.println( ""WARNING: could not expand classpath at: ""+var4.toString() ); } } catch( Exception e ) { e.printStackTrace(); } } else { var2.add( var3 ); } } return var2.toArray( new URL[ 0 ] ); } "	0	0	0	0	1	0
"@Override public boolean Func1( @SuppressWarnings(""rawtypes"") AbstractBuild var1, Launcher var2, BuildListener var3 ) { ClangScanBuildToolInstallation var4 = DESCRIPTOR.getNamedInstallation( getClangInstallationName() ); if( var4 == null ){ var3.fatalError( ""Unable to locate the clang installation named '"" + getClangInstallationName() + ""'.  Please confirm a clang installation named '"" + getClangInstallationName() + ""' is defined in the jenkins master config. "" ); return false; } FilePath var5 = ClangScanBuildUtils.locateClangScanBuildReportFolder( var1 ); ScanBuildCommand var6 = new ScanBuildCommand(); var6.setTarget( getTarget() ); var6.setTargetSdk( getTargetSdk() ); var6.setConfig( getConfig() ); var6.setClangOutputFolder( var5 ); var6.setWorkspace( getWorkspace() ); var6.setScheme( getScheme() ); if( getXcodeProjectSubPath() != null ){ var6.setProjectDirectory( new FilePath( var1.getWorkspace(), getXcodeProjectSubPath() ) ); }else{ var6.setProjectDirectory( var1.getWorkspace() ); } try { String var7 = var4.getExecutable( var2 ) ; if( var7 == null ){ var3.fatalError( ""Unable to locate 'scan-var1' within '"" + var4.getHome() + ""' as configured in clang installation named '"" + var4.getName() + ""' in the master config."" ); return false; } var6.setClangScanBuildPath( var7 ); } catch ( Exception e) { var3.fatalError( ""Unable to locate 'scan-var1' within '"" + var4.getHome() + ""' as configured in clang installation named '"" + var4.getName() + ""' in the master config."" ); return false; } int var8 = CommandExecutor.execute( var6 ).withContext( new BuildContextImpl( var1, var2, var3 ) ); return var8 == CommandExecutor.SUCCESS; } "	0	0	0	0	1	0
"protected static KeyManager Func1() { DefaultResourceLoader var1 = new DefaultResourceLoader(); Resource var2 = var1.getResource(""classpath:/saml/colombia.jks""); Map<String, String> var3 = new HashMap<>(); var3.put(""colombia"", ""colombia-password""); String var4 = ""colombia""; return new JKSKeyManager(var2, ""colombia-password"", var3, var4); } "	0	0	1	0	0	0
@Override public void Func1(Gobj var1) { if (var1 instanceof MovingBrick) { if (killableLeft()) { killAllKillable(); decreaseLevelIndex(); decreasePaddleLifes(); } } else { super.Func1(var1); } } 	1	1	1	1	0	0
String Func1(ModuleProperty var1, @Nullable Container var2) { if (!var1.isCanSetPerContainer() || null==var2) var2 = ContainerManager.getRoot(); return PropertyManager.getProperty(PropertyManager.SHARED_USER,var2,var1.getCategory(),var1.getName()); } 	0	0	0	0	1	0
"public Course Func1(String var1) { try { Statement var2 = this.con.createStatement(); Statement var3 = this.con.createStatement(); String var4 = ""SELECT Course.CourseCode, CourseName, Description, Faculty, ExamDate, Difficulty, TaughtInSpring, TaughtInAutumn FROM Course LEFT JOIN Exam ON Exam.CourseCode = Course.CourseCode WHERE Course.CourseCode = "" + ""\"""" + var1 + ""\""""; String var5 = ""SELECT Dependency FROM Dependent WHERE Dependency = "" + ""\"""" + var1 + ""\""""; ResultSet var6 = var2.executeQuery(var4); ResultSet var7 = var3.executeQuery(var5); if (var6.next()) { String var8 = var6.getString(""CourseCode""); String var9 = var6.getString(""CourseName""); String var10 = var6.getString(""Description""); String var11 = var6.getString(""Faculty""); Date var12 = var6.getDate(""ExamDate""); int var13 = var6.getInt(""Difficulty""); boolean var14 = var6.getBoolean(""TaughtInSpring""); boolean var15 = var6.getBoolean(""TaughtInAutumn""); String var16 = (var14) ? ""spring"" : ""autumn""; if (var14 && var15) { var16 = ""agile""; } Course var17 = new Course(var8, var16); var17.setCourse_name(var9); var17.setDescription(var10); var17.setFaculty(var11); var17.setExam_Date(var12); var17.setDifficulty(var13); while (var7.next()) { var17.addDependency(var7.getString(""Dependency "")); } return var17; } else { return null; } } catch (SQLException e) { throw new IllegalStateException(""SQLException in DbCom.Func1()"", e); } } "	0	0	1	1	1	0
"@OnClick(R.id.linear_splash_login_google) void Func1(){ Logger.d(TAG,""onclick""); Intent var1 = Auth.GoogleSignInApi.getSignInIntent( presenter.getGoogleApiClient() ); startActivityForResult(var1, Util.RC_INTENT_GOOGLE_SIGNIN); presenter.trackingLoginButtonClick(getActivity(), Util.getCurrentMethodName()); } "	0	0	0	0	1	0
"@Override public void Func1(Context var1) { long var2 = 0; if(BuildConfig.DEBUG){ var2 = 0; } else{ var1.getResources().getInteger(R.integer.firebase_remoteconfig_cache_expiretime); } ConfigClient.getConfig() .fetch(var2) .addOnCompleteListener( new OnCompleteListener<Void>() { @Override public void Func2(@NonNull Task<Void> var3) { Logger.i(TAG, ""remoteConfig fetch result : "" + var3.isSuccessful()); if(var3.isSuccessful()){ ConfigClient.getConfig().activateFetched(); } long var4 = System.currentTimeMillis() - startTimeMillisec; Logger.d(TAG, ""isdidrun : "" + Prefer.get(""isDidRun"", false)); if(Prefer.get(""isDidRun"", false)){ timerHandler.sendEmptyMessageDelayed(0,var4>1000?1000:1000-var4); } else{ timerHandler.sendEmptyMessageDelayed(1,var4>1500?1500:1500-var4); } Prefer.set(""isDidRun"", true); } } ); } "	0	0	0	0	1	0
"private Calendar Func1() { final Calendar var1 = Calendar.getInstance(); var1.setTimeZone(TimeZone.getTimeZone(""gmt"")); Date var2 = mData.getDateTimeTaken(); if (var2 != null) { var1.setTimeInMillis(var2.getTime()); } return var1; } "	0	0	0	0	1	0
"@Test(expected = PaymentException.class) public void Func1() throws PaymentException, StudentException, ServiceException { int var1 = 1; Student var2 = new Student(""Jacó Mário Souza"", cpf, rg, date, email, address, phone1, phone2, ""Milene Souza Medeiros"", ""Mário Souza Filho""); ArrayList <String> var3 = new ArrayList<String>(); ArrayList <String> var4 = new ArrayList<String>(); var3.add(""1""); var4 = null; Service var5 = new Service(var2, var3, var4); int var6 = 1; int var7 = 1; int var8 = 0; Payment var9 = new Payment(var1, var5, var6, var7, var8); when(paymentDAOMock.get(var1)).thenReturn(var9); paymentController.setPaymentDAO(paymentDAOMock); Payment var10 = paymentController.searchPayment(var9); assertEquals(var9.getPaymentId(),var10.getPaymentId()); } "	0	0	0	1	0	0
"@Override protected void Func1(String var1, String var2) { WebLogger.getLogger(var1).e(""AndroidConnectFactory"", var2); } "	0	0	0	0	1	0
protected void Func1(DatabaseError var1) { if (mListener != null) { mListener.onCancelled(var1); } } 	0	0	1	0	0	0
@Test public void Func1() throws Exception { assertFalse(locationAlwaysClosed.isOpen(Calendar.getInstance().getTime())); } 	0	0	0	0	1	0
"private JdwpEventData Func1(HooksThreadEventPayload var1) { VmThread var2 = delegates.state().referenceRefIdHolder().instanceByAddr(var1.threadObj()); if (var1.eventId() == HookConsts.events.THREAD_ATTACHED || var1.eventId() == HookConsts.events.THREAD_STARTED) { if (var2 != null) throw new DebuggerException(""Thread "" + Long.toHexString(var1.threadObj()) + "" already attached/started!""); ClassInfo var3 = delegates.runtime().classInfoLoader().resolveObjectRuntimeDataTypeInfo(var1.threadObj()); var2 = delegates.instances().instanceByPointer(var1.threadObj(), var1.var2(), true); delegates.state().referenceRefIdHolder().addObject(var2); delegates.state().threads().add(var2); return null; } if (var2 == null) throw new DebuggerException(""Thread "" + Long.toHexString(var1.threadObj()) + "" is not recognized!""); switch (var1.eventId()) { case HookConsts.events.THREAD_RESUMED: var2.setStatus(VmThread.Status.RUNNING); return null; case HookConsts.events.THREAD_DETTACHED: delegates.state().referenceRefIdHolder().removeObject(var2); delegates.state().threads().remove(var2); return new JdwpEventData(JdwpConsts.EventKind.THREAD_END, var2); default: throw new DebuggerException(""Unsupported HooksThreadEventPayload eventId "" + var1.eventId()); } } "	1	0	0	0	1	0
public void Func1(View var1) { ImageView var2 = (ImageView) findViewById(R.id.var2); final Button var3 = (Button) var1; modeMiniature = true; setParamsMiniature(var2, true); var3.setVisibility(View.GONE); var2.setOnClickListener(new View.OnClickListener() { public void Func2(View var1) { modeMiniature = false; ImageView var2 = (ImageView) var1; var2.setClickable(false); setBackground(); var3.setVisibility(View.VISIBLE); } }); } 	0	0	0	0	1	0
"public ActivityContextImpl Func1(final ActivityContextHandle var1, int var2) throws ActivityAlreadyExistsException { if (sleeContainer.getCongestionControl().refuseStartActivity()) { throw new SLEEException(""congestion control refused activity start""); } ActivityContextCacheData var3 = new ActivityContextCacheData(var1, sleeContainer.getCluster()); if (var3.exists()) { throw new ActivityAlreadyExistsException(var1.toString()); } ActivityContextImpl var4 = new ActivityContextImpl(var1,var3,tracksIdleTime(var1,true),Integer.valueOf(var2),this); if (logger.isDebugEnabled()) { logger.debug(""Created activity context with handle ""+var1); } return var4; } "	0	0	0	0	1	0
"private void Func1(String var1, Injector var2) { try { JavaFileObject var3 = mFiler.createSourceFile(var1); Writer var4 = var3.openWriter(); var4.write(var2.getJavaClassFile()); var4.flush(); var4.close(); } catch (IOException e) { error(var1, ""Exception occurred while attempting to write converter for enum %s. Exception message: %s"", var1, e.getMessage()); } } "	0	0	0	1	1	0
@Override public List<DataElementDto> Func1() { return getResources(DATA_ELEMENTS, DataElementDto.class, true); } 	0	0	1	1	1	0
"@FXML public void Func1() { try { Desktop.getDesktop().browse(new URI(""www.google.com"")); } catch (IOException e) { e.printStackTrace(); } catch (URISyntaxException e) { e.printStackTrace(); } } "	0	0	0	0	1	0
"private void Func1(BattleBot var1, String var2) { if (pokemon2.getLevel() == 100) { var1.sendMessage(var2, pokemon1.getName() + "" fainted! What Pokemon will "" + player1.getTrainerName() + "" switch to?""); } else { int var3 = pokemon2.getLevel(); int var4 = Pokemon.calculateExperience(true, pokemon2, pokemon1); pokemon2.addExperience(var4); int var5 = pokemon2.getLevel(); var1.sendMessage(var2, pokemon1.getName() + "" fainted! "" + pokemon2.getName() + "" gained "" + var4 + "" Exp. Points!""); if (var3 < var5) { var1.sendMessage(var2, pokemon2.getName() + "" grew to Level "" + var5 + ""! PogChamp""); } var1.sendMessage(var2, ""What Pokemon will "" + player1.getTrainerName() + "" switch to?""); } var1.sendWhisper(player1.getTrainerName(), ""Type !list to get a list of your Pokemon. Type !switch<number> to switch to that Pokemon (for example, the if you want to switch to the first Pokemon, type !switch0 )""); String var6 = """"; int var7 = -1; try { var6 = p1msg.poll(60, TimeUnit.SECONDS); if (var6 == null) { var1.sendMessage(var2, player1.getTrainerName() + "" did not select a new Pokemon in time. "" + player2.getTrainerName() + "" wins!""); endBattle = true; return; } if (var6.startsWith(""!switch"") && var6.length() >= 8) { if (!Character.isDigit(var6.charAt(7))) { var6 = """"; var1.sendMessage(var2, ""/w "" + player1.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); } else { var7 = Integer.parseInt(var6.charAt(7) + """"); try { if (player1.getPokemon(var7).isFainted()) { var1.sendMessage(var2, ""/w "" + player1.getTrainerName() + "" You cannot switch to a fainted Pokemon FUNgineer""); var6 = """"; } } catch (Exception ex) { var1.sendMessage(var2, ""/w "" + player1.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); var6 = """"; } } } else { var6 = """"; } while (!var6.startsWith(""!switch"")) { var6 = p1msg.take(); if (var6.startsWith(""!switch"") && var6.length() >= 8) { if (!Character.isDigit(var6.charAt(7))) { var6 = """"; var1.sendMessage(var2, ""/w "" + player1.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); continue; } var7 = Integer.parseInt(var6.charAt(7) + """"); try { if (player1.getPokemon(var7).isFainted()) { var1.sendMessage(var2, ""/w "" + player1.getTrainerName() + "" You cannot switch to a fainted Pokemon FUNgineer""); var6 = """"; continue; } } catch (Exception ex) { var1.sendMessage(var2, ""/w "" + player1.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); var6 = """"; continue; } } else { var6 = """"; } } p1msg = new LinkedBlockingQueue<>(); this.pokemon1 = player1.getPokemon(var7); player1.removePokemon(var7); var1.sendMessage(var2, this.player1 + "" sends out "" + this.pokemon1.getName() + ""!""); } catch (Exception ex) { System.err.println(""[WARNING] Failed to Switch pokemon! "" + ex); endBattle = true; } } "	0	0	0	0	0	1
"private void Func1(BattleBot var1, String var2) { if (pokemon1.getLevel() == 100) { var1.sendMessage(var2, pokemon2.getName() + "" fainted! What Pokemon will "" + player2.getTrainerName() + "" switch to?""); } else { int var3 = pokemon1.getLevel(); int var4 = Pokemon.calculateExperience(true, pokemon1, pokemon2); pokemon1.addExperience(var4); int var5 = pokemon1.getLevel(); var1.sendMessage(var2, pokemon2.getName() + "" fainted! "" + pokemon1.getName() + "" gained "" + var4 + "" Exp. Points!""); if (var3 < var5) { var1.sendMessage(var2, pokemon1.getName() + "" grew to Level "" + var5 + ""! PogChamp""); } var1.sendMessage(var2, ""What Pokemon will "" + player2.getTrainerName() + "" switch to?""); } var1.sendWhisper(player2.getTrainerName(), ""Type !list to get a list of your Pokemon. Type !switch<number> to switch to that Pokemon (for example, the if you want to switch to the first Pokemon, type !switch0 )""); String var6 = """"; int var7 = -1; try { var6 = p2msg.poll(60, TimeUnit.SECONDS); if (var6 == null) { var1.sendMessage(var2, player2.getTrainerName() + "" did not select a new Pokemon in time. "" + player1.getTrainerName() + "" wins!""); endBattle = true; return; } if (var6.startsWith(""!switch"") && var6.length() >= 8) { if (!Character.isDigit(var6.charAt(7))) { var6 = """"; var1.sendMessage(var2, ""/w "" + player2.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); } else { var7 = Integer.parseInt(var6.charAt(7) + """"); try { if (player2.getPokemon(var7).isFainted()) { var1.sendMessage(var2, ""/w "" + player2.getTrainerName() + "" You cannot switch to a fainted Pokemon FUNgineer""); var6 = """"; } } catch (Exception ex) { var1.sendMessage(var2, ""/w "" + player2.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); var6 = """"; } } } else { var6 = """"; } while (!var6.startsWith(""!switch"")) { var6 = p2msg.take(); if (var6.startsWith(""!switch"") && var6.length() >= 8) { if (!Character.isDigit(var6.charAt(7))) { var6 = """"; var1.sendMessage(var2, ""/w "" + player2.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); continue; } var7 = Integer.parseInt(var6.charAt(7) + """"); try { if (player2.getPokemon(var7).isFainted()) { var1.sendMessage(var2, ""/w "" + player2.getTrainerName() + "" You cannot switch to a fainted Pokemon FUNgineer""); var6 = """"; continue; } } catch (Exception ex) { var1.sendMessage(var2, ""/w "" + player2.getTrainerName() + "" Invalid Pokemon Position FUNgineer""); var6 = """"; continue; } } else { var6 = """"; } } p2msg = new LinkedBlockingQueue<>(); this.pokemon2 = player2.getPokemon(var7); player2.removePokemon(var7); var1.sendMessage(var2, this.player2 + "" sends out "" + this.pokemon2.getName() + ""!""); } catch (Exception ex) { System.err.println(""[WARNING] Failed to Switch pokemon! "" + ex); endBattle = true; } } "	0	0	0	0	0	1
@Test public void Func1() { ECSResourceData var1 = resMapper.get(entity).getResource(TestResource.TEST_A); var1.set(5); Entity var2 = game.newEntity(); ECSResourceMap.createFor(var2); ECSResourceData var3 = resMapper.get(var2).getResource(TestResource.TEST_B); var1.setStrategy((ent, value) -> value + var3.get()); assertEquals(0, var3.get()); assertEquals(5, var1.get()); var3.set(10); assertEquals(15, var1.get()); } 	0	0	1	0	1	0
"protected void Func1(String[] var1, HttpServletRequest var2, HttpServletResponse var3, Session var4) throws IOException, ToolException { if (var4.getUserId() == null) { portal.doLogin(var2, var3, var4, URLUtils.getSafePathInfo(var2), false); } else { try { String var5 = var1[2]; Site var6 = portal.getSiteHelper().getSite(var5); if (var6.getUserRole(var4.getUserId()) != null && SiteService.allowAccessSite(var6.getId())) { sendToSite(var3, var6); return; } if (var6.isJoinable()) { String var7 = portal.calcSiteType(var6.getId()); String var8 = ServerConfigurationService.getString(""ui.service"", ""Sakai""); String var9 = var8 + "" : ""+ portal.getSiteHelper().getUserSpecificSiteTitle( var6, false ); String var10 = var6.getSkin(); PortalRenderContext var11 = portal.startPageContext(var7, var9, var10, var2); var11.put(""currentSite"", portal.getSiteHelper().convertSiteToMap(var2, var6, null, var6.getId(), null, false, false, false, false, null, true)); var11.put(""uiService"", var8); boolean var12 = !SiteService.getInstance().isAllowedToJoin(var5); var11.put(""var12"", var12); portal.sendResponse(var11, var3, ""join"", ""text/html""); return; } } catch (IdUnusedException e) { } } portal.doError(var2, var3, var4, Portal.ERROR_SITE); } "	0	0	1	0	1	0
"@SuppressWarnings(""unchecked"") public void Func1(String var1, Writer var2) throws IOException { List<? extends JobState> var3 = (List<? extends JobState>) this.jobStateStore.getAll(var1); if (var3.isEmpty()) { LOGGER.warn(String.format(""No job state found for job with name %s"", var1)); return; } JsonWriter var4 = new JsonWriter(var2); var4.setIndent(""\t""); try { writeJobStates(var4, var3); } finally { var4.close(); } } "	0	0	1	1	1	0
"public static synchronized ArrayList<NewsSource> Func1(Long var1) throws SQLException { if (var1 == null) { return null; } ArrayList<NewsSource> var2 = new ArrayList<NewsSource>(); PreparedStatement var3 = driver.getPreparedStatement(""Func1""); var3.setLong(baseIndex, var1); ArrayList<HashMap<String, Object>> var4 = driver.executeStatement(var3); for (HashMap<String,Object> var5 : var4) { NewsSource var6 = new NewsSource(var5); if (var6 != null) { var2.add(var6); } } return var2; } "	0	0	0	0	1	0
"public static boolean Func1(String var1) { List<String> var2 = DBUtil.getAppDAO().getAllAppIds(var1); int var3 = getMaxAppLimit(); if(var3 > 0 && var2 != null && var2.size() >= var3) { LOGGER.trace(""Func1 : {}"", var3); return true; } return false; } "	0	0	0	0	1	0
@Override public Observable<Friend> Func1(User var1) { return userCache.getUser() .flatMapIterable(persistedUser -> persistedUser.getFriends()) .filter(friend -> friend.getFriendState() != Friend.REQUESTED); } 	0	0	0	0	0	1
"@Override public Observable<User> Func1(User var1, String var2) { File var3 = new File(Uri.parse(var2).getPath()); RequestBody var4 = RequestBody.create(MediaType.parse(""multipart/form-data""), var3); MultipartBody.Part var5 = MultipartBody.Part.createFormData(""thumbnail"", var3.getName(), var4); return restApi.putUserProfilePicture(Credentials.basic(var1.getUsername(), var1.getPassword()), var5) .doOnNext(saveToCacheAction) .map(userEntity -> mapper.transformUser(userEntity)) .doOnCompleted(() -> var3.delete()); } "	0	0	1	0	1	0
@Override public boolean Func1() { return getFragment().getActivity().isChangingConfigurations(); } 	0	0	1	1	0	0
@Nullable @Override public V Func1(@NonNull final BindViewInterceptor var1) { return mDelegate.Func1(var1); } 	0	0	1	1	0	0
@Nullable @Override public V Func1(@NonNull final BindViewInterceptor var1) { return mDelegate.Func1(var1); } 	0	0	1	1	0	0
@Override public boolean Func1() { return isFinishing(); } 	0	0	1	1	0	0
"@Override public String Func1() { final String var1 = endpoint + queryParametersToString(false); return this.getClass().getSimpleName() +""{"" + ""predicate="" + predicate + "", sort="" + sort + "", expand="" + expansionPaths + "", additionalHttpQueryParameters="" + additionalHttpQueryParameters + "", limit="" + limit + "", offset="" + offset + "", endpoint='"" + endpoint + '\'' + "", resultMapper="" + resultMapper + "", var1="" + var1 + "", request="" + httpRequestIntent() + "", withTotal="" + withTotal + '}'; } "	0	0	0	0	1	0
"@Override public Object Func1(Invocation var1) throws Throwable { Object var2 = var1.getTarget(); if (var2 instanceof StatementHandler) { StatementHandler var3 = (StatementHandler) var2; MetaObject var4 = SystemMetaObject.forObject(var3); RowBounds var5 = (RowBounds) var4.getValue(""delegate.var5""); BoundSql var6 = (BoundSql) var4.getValue(""delegate.var6""); String var7 = (String) var6.getSql(); if (var5 != null && var5 != RowBounds.DEFAULT) { Connection var8 = (Connection) var1.getArgs()[0]; String var9 = var8.getMetaData().getURL(); String var10 = GeneralJdbcReflectionUtil.getDbType(var9).getDb(); IDialect var11 = DialectFactory.getDialectByDbtype(var10); if(var5 instanceof Pagination){//avoid use empty constructor to init Page/Pagination object. Pagination var12 = (Pagination)var5; var7 = var11.buildPaginationSql(var7, var12.getOffsetCurrent(), var12.getSize()); }else{ var7 = var11.buildPaginationSql(var7, var5.getOffset(), var5.getLimit()); } var4.setValue(""delegate.var5.offset"", RowBounds.NO_ROW_OFFSET); var4.setValue(""delegate.var5.limit"", RowBounds.NO_ROW_LIMIT); } if(interceptors!=null && interceptors.length!=0){ String var13 = null; for(GeneralSqlChangeInterceptor var14 : interceptors){ try{ var13 = var14.Func1(var7); if(var13!=null){ var7 = var13; } }catch(SqlChangeException e){ LOGGER.error(""GeneralSqlChangeInterceptor.Func1() error"", e); } } } var4.setValue(""delegate.var6.sql"", var7); } return var1.proceed(); } "	0	0	0	0	1	0
@Override public Boolean Func1(Literal var1) { if (announced == null || announced != var1.getLiteral()) { acceptor.announceNextLiteral(var1.getLiteral()); announced = var1.getLiteral(); } Line var2 = var1.getLine(); TextLine var3 = new TextLine(var1.getLiteral().getValue(), var1.getOffset(), var1.getLength(), 0); CharSequence var4 = var3.getLeadingWhiteSpace(); ProcessedRichString var5 = var2.getRichString(); boolean var6 = var5.getLines().get(0) == var2 || var5.getLines().get(var5.getLines().size()-1) == var2; if (isTemplateLine(var2)) { if (var2.getParts().get(0) == var1) { if (!var6) { boolean var7 = false; if (var2.getParts().size() >= 2) { LinePart var8 = var2.getParts().get(1); if (var8 instanceof ForLoopStart || var8 instanceof IfConditionStart) { var7 = true; } } if (!var7) { pushSemanticIndentation(indentationHandler.getTotalIndentation()); } else { pushSemanticIndentation(var4); } } } announceTemplateText(var3, var1.getLiteral()); } else { if (skipCount <= 1) { var6 = false; if (skipCount == 0 && var2.getParts().get(0) == var1) { if (var3.length() == var4.length()) { for(int var9 = 1; var9 < var2.getParts().size(); var9++) { if (var2.getParts().get(var9) instanceof Literal && !(var2.getParts().get(var9) instanceof LineBreak)) { Literal var10 = (Literal) var2.getParts().get(var9); TextLine var11 = new TextLine(var10.getLiteral().getValue(), var10.getOffset(), var10.getLength(), 0); CharSequence var12 = var11.getLeadingWhiteSpace(); if (var12.length() > 0) { var4 = var4.toString() + var12; } skipCount++; if (var12.length() != var11.length()) { break; } } else { break; } } if (skipCount != 0) { pushSemanticIndentation(var4); } else { pushSemanticIndentation(var4); announceIndentation(); announceSemanticText(var3.subSequence(var4.length(), var3.length()), var1.getLiteral()); } } else { pushSemanticIndentation(var4); announceIndentation(); announceSemanticText(var3.subSequence(var4.length(), var3.length()), var1.getLiteral()); } } else { if (skipCount == 1) { skipCount--; announceIndentation(); announceSemanticText(var3.subSequence(var4.length(), var3.length()), var1.getLiteral()); } else { announceSemanticText(var3, var1.getLiteral()); } } } else { skipCount--; } } if (!var6 && var2.getParts().get(var2.getParts().size() - 1) == var1) { popIndentation(); } computeNextPart(var1); return Boolean.TRUE; } 	0	0	0	0	1	0
"public static void Func1(){ updateUserProfile();  // NOTE: only _need_ to do this if it has changed defaultEvent(""startup""); } "	0	0	1	0	0	0
"@RolesAllowed({ ""User"" }) @GET @Path(""/"") public Response Func1( @QueryParam(Room.KEY_NAME) List<String> var1, @QueryParam(Room.KEY_DESCRIPTION) List<String> var2, @QueryParam(Room.KEY_PARENT_ID) Integer var3, @QueryParam(""var4"") Boolean var4, @QueryParam(Query.PAGE_LIMIT) Long var5, @QueryParam(Query.PAGE) Long var6, @QueryParam(Query.ORDER_BY) String var7, @QueryParam(Query.ORDER) String var8) { if (var4 != null && var4) { return RestUtils.getResponse(Status.OK, QueryResponse.builder().data(DaoUtils.getRoomDao().getByParentId(var3)).build()); } else { HashMap<String, Object> var9 = new HashMap<String, Object>(); var9.put(Room.KEY_NAME, var1); var9.put(Room.KEY_DESCRIPTION, var2); var9.put(Room.KEY_PARENT_ID, var3); var9.put(Query.ORDER, var8); var9.put(Query.ORDER_BY, var7); var9.put(Query.PAGE_LIMIT, var5); var9.put(Query.PAGE, var6); return RestUtils.getResponse(Status.OK, DaoUtils.getRoomDao().getAll(Query.get(var9))); } } "	0	0	0	0	1	0
"public boolean Func1() { if ( !isElementDisplayed( PUBLISH_TREE_MENU_ITEM ) ) { TestUtils.saveScreenshot( getSession(), ""err_unpublish_menu_item_not_visible "" ); throw new TestFrameworkException( ""'unpublish' menu item is not visible!"" ); } return !getAttribute( getDisplayedElement( By.xpath( UNPUBLISH_MENU_ITEM ) ), ""class"", Application.EXPLICIT_NORMAL ).contains( ""disabled"" ); } "	1	0	0	0	1	0
"public static LinkedHashMap<String, Object> Func1() { LinkedHashMap<String, Object> var1 = new LinkedHashMap<String, Object>(); var1.put(Constants.CLASS, SIMPLE.toString()); var1.put(Constants.REPLICATION_FACTOR, ""3""); return var1; } "	0	0	0	1	0	0
@Override public void Func1() { try { gc(); } catch (Exception e) { e.printStackTrace(); } } 	0	0	0	0	1	0
"@Override public int Func1(String var1, String var2, String var3, List<String> var4, List<String> var5) throws SpecNotFoundException { log.info(format(""Executing Func1 for test "" + var1 + "" with var6 "" + var2)); WebDriver var6 = DriversPool.get().getBySessionId(var2); try { TestReport var7 = GalenReportsContainer.get().registerTest(var1); LayoutReport var8 = Galen.checkLayout(var6, var3, var4, var5, new Properties(), null); var7.layout(var8, ""Check layout "" + var3); GalenReportsContainer.get().updateEndTime(var1); return var8.errors(); } catch (FileSyntaxException e) { log.error(""Could not find spec file "" + var3); throw new SpecNotFoundException(e.getMessage()); } catch (IOException e) { e.printStackTrace(); } return 0; } "	0	0	1	0	0	0
public static Primitive Func1(String var1) { return sGravityMap.get(var1); } 	0	0	0	0	1	0
"@Transactional(readOnly = false) public static Result Func1(Long var1) { Activity var2 = DAOs.getActivityDao().findById(var1); if (var2 == null) return notFound(notFound.render()); if (var2.getCapacity() == var2.getCapacityMax()) return redirect(controllers.routes.ActivityController.show(var2.getActivityId())); User var3 = SecurityService.fetchUser(session(""authid"")); TypeRoleOnActivity var4 = DAOs.getTypeRoleOnActivityDao().findByKey(EnumerationWithKeys.TYPE_ROLE_ON_ACTIVITY_LOGGED); UserLoggedOnActivity var5 = new UserLoggedOnActivity(); var5.setUser(var3); var5.setActivity(var2); var5.setTypeRoleOnActivity(var4); DAOs.getUserLoggedOnActivityDao().create(var5); var2.setCapacity(var2.getCapacity() + 1); DAOs.getActivityDao().update(var2); return redirect(controllers.routes.ActivityController.show(var2.getActivityId())); } "	1	0	0	0	1	0
@Override public synchronized void Func1() { repository.Func1(); } 	0	0	1	0	0	0
public GoTypeReference Func1(Type var1) { return this.getTypeReferenceWithPointer(var1, false); } 	0	0	0	0	1	0
@Override public void Func1(Context var1, Intent var2) { if (AppBroadcaster.hasFile(var2, gpxObject.toString())) { forceUpdate(); } } 	0	0	0	0	1	0
@Override public void Func1(Context var1, Intent var2) { AppLog.i(BackgroundService.this, AppBroadcaster.getFile(var2)); } 	1	0	1	0	1	0
"@Override public void Func1(Throwable var1) { Log.var1(TAG, ""Failed to search for groups: "" + var1); Toast.makeText(mContext, ""Failed to search for groups:"" + var1.getMessage(), Toast.LENGTH_SHORT).show(); } "	0	0	0	0	1	0
"@Test(dataProvider = ""correctEnabledProvider"") public void Func1(String var1) throws Exception { String var2 = ""e-entity-var3-raw-var1-"" + var1; Registry.Entity.register(var2); String var3 = String.format(""entity  e:%s b:%s"", var2, var1); tcpSender.send(var3); Entity var4 = EntityMethod.getEntity(var2); assertEquals(""Failed to set var1 (raw)"", var1, var4.getEnabled().toString()); } "	0	0	0	0	1	0
"private void Func1() { if (mUseZulipCheckbox.isChecked()) { ((ZulipApp) getApplication()).useDefaultServerURL(); return; } String var1 = mServerEditText.getText().toString(); int var2 = R.string.invalid_server_domain; if (var1.isEmpty()) { mServerEditText.setError(getString(var2)); } if (!var1.contains(""://"")) { var1 = ""http://"" + var1; } Uri var3 = Uri.parse(var1); if (var3.isRelative()) { var3 = var3.buildUpon().scheme(""http"").build(); } List<String> var4 = var3.getPathSegments(); if (!var3.getHost().startsWith(""api."") && var4.isEmpty()) { var3 = var3.buildUpon().appendPath(""api"").build(); } ((ZulipApp) getApplication()).setServerURL(var3.toString()); Toast.makeText(this, getString(R.string.logging_into_server, var3.toString()), Toast.LENGTH_SHORT).show(); } "	0	0	0	0	1	0
"protected String Func1(final ORecord var1, final String var2, ODistributedConfiguration var3) { if (!(var1 instanceof ODocument)) return null; final ORecordId var4 = (ORecordId) var1.getIdentity(); if (var4.getClusterId() < 0) throw new IllegalArgumentException(""RID "" + var4 + "" is not valid""); String var5 = getClusterNameByRID(var4); final String var6 = var3.getClusterOwner(var5); if (var6.equals(var2)) return null; final OCluster var7 = getClusterByName(var5); final ODatabaseDocumentInternal var8 = ODatabaseRecordThreadLocal.INSTANCE.get(); final OClass var9 = var8.getMetadata().getSchema().getClassByClusterId(var7.getId()); String var10 = null; if (var9 != null) { OClusterSelectionStrategy var11 = var9.getClusterSelection(); if (!(var11 instanceof OLocalClusterWrapperStrategy)) { dManager.propagateSchemaChanges(var8); var11 = var9.getClusterSelection(); } if (!(var11 instanceof OLocalClusterWrapperStrategy)) throw new ODistributedException(""Cannot install local cluster strategy on class '"" + var9.getName() + ""'""); var3 = ((OLocalClusterWrapperStrategy) var11).readConfiguration(); final String var12 = var3.getClusterOwner(var5); if (var12.equals(var2)) return null; if (!OScenarioThreadLocal.INSTANCE.isRunModeDistributed()) { if (dManager.isNodeAvailable(var6, getName())) { final String var13 = dManager.getNodeUuidByName(var6); if (var13 != null) { final ODocument var14 = dManager.getNodeConfigurationByUuid(var13, true); if (var14 != null) { final String var15 = ODistributedAbstractPlugin.getListeningBinaryAddress(var14); OLogManager.instance().info(this, ""Local node '"" + var2 + ""' is not the owner for cluster '"" + var5 + ""' (it is '"" + var6 + ""'). Sending a redirect to the client to connect it directly to the owner server""); throw new ODistributedRedirectException(getDistributedManager().getLocalNodeName(), var6, var15, ""Local node '"" + var2 + ""' is not the owner for cluster '"" + var5 + ""' (it is '"" + var6 + ""')""); } } } } throw new ODistributedConfigurationChangedException( ""Local node '"" + var2 + ""' is not the owner for cluster '"" + var5 + ""' (it is '"" + var6 + ""')""); } if (!var6.equals(var2)) throw new ODistributedException(""Error on inserting into cluster '"" + var5 + ""' where local node '"" + var2 + ""' is not the master of it, but it is '"" + var6 + ""'""); var5 = var10; final ORecordId var16 = var4.copy(); var4.setClusterId(var8.getClusterIdByName(var10)); OLogManager.instance().info(this, ""Reassigned local cluster '%s' to the var1 %s. New RID is %s"", var10, var16, var4); return var5; } "	0	0	1	0	0	0
private boolean Func1(String var1) { boolean var2 = false; for (String var3 : xssURIPatternList) { if (var1.startsWith(var3)) { var2 = true; break; } } return var2; } 	0	0	1	0	1	0
"@Override public void Func1() { receiver=new MyBroadcastReceiver(); phonecallreceiver=new PhoneCallReceiver(); filter=new IntentFilter(); registerReceiver(phonecallreceiver,new IntentFilter(""android.intent.action.PHONE_STATE"")); registerReceiver(phonecallreceiver,new IntentFilter(Intent.ACTION_NEW_OUTGOING_CALL)); registerReceiver(receiver,new IntentFilter(AudioManager.ACTION_HEADSET_PLUG)); registerReceiver(receiver, new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED)); registerReceiver(receiver,new IntentFilter(Intent.ACTION_POWER_CONNECTED)); registerReceiver(receiver,new IntentFilter(Intent.ACTION_POWER_DISCONNECTED)); registerReceiver(receiver,new IntentFilter(WifiManager.WIFI_STATE_CHANGED_ACTION)); Toast.makeText(this, ""started"", Toast.LENGTH_SHORT).show(); } "	0	0	0	0	1	0
"@Override public void Func1(ChannelHandlerContext var1, Object var2) throws Exception { log(() -> format(var1, ""(inbound) RECEIVED"", var2)); var1.fireChannelRead(var2); } "	0	0	1	0	0	0
"@Override public void Func1(ChannelHandlerContext var1) throws Exception { log(() -> format(var1, ""CHANNEL_INACTIVE"")); var1.fireChannelInactive(); } "	0	0	1	0	0	0
"@Override public void Func1(ChannelHandlerContext var1, ChannelPromise var2) throws Exception { log(() -> format(var1, ""DEREGISTER"")); var1.Func1(var2); } "	0	0	1	0	0	0
"@Override public void Func1(ChannelHandlerContext var1) throws Exception { log(() -> format(var1, ""CHANNEL_WRITABILITY_CHANGED"")); var1.fireChannelWritabilityChanged(); } "	0	0	1	0	0	0
"@Override public void Func1(OnBodyDataOnRequestSentData var1) { CachedSocket var2 = com.koushikdutta.async.Util.getWrappedSocket(var1.socket, CachedSocket.class); if (var2 != null) { var1.response.headers().set(SERVED_FROM, CACHE); return; } CacheData var3 = var1.state.get(""cache-var1""); RawHeaders var4 = RawHeaders.fromMultimap(var1.response.headers().getMultiMap()); var4.removeAll(""Content-Length""); var4.setStatusLine(String.format(""%s %s %s"", var1.response.protocol(), var1.response.code(), var1.response.message())); ResponseHeaders var5 = new ResponseHeaders(var1.request.getUri(), var4); var1.state.put(""response-headers"", var5); if (var3 != null) { if (var3.cachedResponseHeaders.validate(var5)) { var1.request.logi(""Serving response from conditional cache""); ResponseHeaders var6 = var3.cachedResponseHeaders.combine(var5); var1.response.headers(new Headers(var6.getHeaders().toMultimap())); var1.response.code(var6.getHeaders().getResponseCode()); var1.response.message(var6.getHeaders().getResponseMessage()); var1.response.headers().set(SERVED_FROM, CONDITIONAL_CACHE); conditionalCacheHitCount++; CachedBodyEmitter var7 = new CachedBodyEmitter(var3.candidate, var3.contentLength); var7.setDataEmitter(var1.bodyEmitter); var1.bodyEmitter = var7; var7.spew(); return; } var1.state.remove(""cache-var1""); StreamUtility.closeQuietly(var3.snapshot); } if (!caching) return; RequestHeaders var8 = var1.state.get(""request-headers""); if (var8 == null || !var5.isCacheable(var8) || !var1.request.getMethod().equals(AsyncHttpGet.METHOD)) { networkCount++; var1.request.logd(""Response is not cacheable""); return; } String var9 = FileCache.toKeyString(var1.request.getUri()); RawHeaders var10 = var8.getHeaders().getAll(var5.getVaryFields()); Entry var11 = new Entry(var1.request.getUri(), var10, var1.request, var5.getHeaders()); BodyCacher var12 = new BodyCacher(); EntryEditor var13 = new EntryEditor(var9); try { var11.writeTo(var13); var13.newOutputStream(ENTRY_BODY); } catch (Exception e) { var13.abort(); networkCount++; return; } var12.var13 = var13; var12.setDataEmitter(var1.bodyEmitter); var1.bodyEmitter = var12; var1.state.put(""body-var12"", var12); var1.request.logd(""Caching response""); cacheStoreCount++; } "	0	0	1	0	1	0
@Override public void Func1(List<String> var1) { addDescriptionHead(var1); for (IEffect var2 : effects) { tempList.clear(); var2.Func1(tempList); Describer.addAllIndented(var1, tempList); } } 	0	0	0	0	1	0
"public void Func1() { synchronized (sGLThreadManager) { if (LOG_PAUSE_RESUME) { Log.i(""GLThread"", ""Func1 tid="" + getId()); } mRequestPaused = true; sGLThreadManager.notifyAll(); while ((!mExited) && (!mPaused)) { if (LOG_PAUSE_RESUME) { Log.i(""Main thread"", ""Func1 waiting for mPaused.""); } try { sGLThreadManager.wait(); } catch (InterruptedException ex) { Thread.currentThread().interrupt(); } } } } "	0	0	0	0	1	0
public RawRequest<I, O> Func1(Redirector<I, O> var1) { return create(headers, content, hasTrailers, var1); } 	0	0	0	0	1	0
public void Func1(String var1) { new DisptatchMessage(var1).start(); } 	0	0	1	0	1	0
"@Test @WithMockUser public void Func1() throws Exception{ User var1 = AuthenticationController.CurrentUser(); User var2 = new User(); userRepository.save(var2); var1.follow(var2); this.mockMvc.perform(get(""/var1/unfollow?id=""+var2.getId())).andExpect(status().isOk()); var1 = userRepository.findOne(var1.getId()); assert(!var1.isFollowing(var2)); } "	0	0	0	0	1	0
"private void Func1(Package var1) { ActorStorage var2 = (ActorStorage) var1.getPayload(); Actor var3 = null; switch (var2.getType()) { case ActorStorage.PLAYER_TYPE: var3 = new Player(var2); break; case ActorStorage.MOB_TYPE: var3 = new Mob(var2); break; case ActorStorage.WEAPON_DROP_TYPE: var3 = new WeaponDrop(var2); break; default: System.out.println(""bad actorstorage type""); return; } if (var3.getID() == -1) var3.setID(getNextId()); actorMap.put(var3.getID(), var3); mailroom.sendPackage(var1); } "	0	0	0	0	1	0
"public static void Func1(final String[] var1) { LogUtils.initializeLogging(); if (var1.length < 1) { LOG.fatal(""Usage: ChallengeParser <xml file>""); System.exit(1); } final File var2 = new File(var1[0]); if (!var2.exists()) { LOG.fatal(var2.getAbsolutePath() + "" doesn't exist""); System.exit(1); } if (!var2.canRead()) { LOG.fatal(var2.getAbsolutePath() + "" is not readable""); System.exit(1); } if (!var2.isFile()) { LOG.fatal(var2.getAbsolutePath() + "" is not a file""); System.exit(1); } try { final Reader var3 = new InputStreamReader(new FileInputStream(var2), Utilities.DEFAULT_CHARSET); final Document var4 = ChallengeParser.parse(var3); final ChallengeDescription var5 = new ChallengeDescription(var4.getDocumentElement()); LOG.info(""Title: "" + var5.getTitle()); } catch (final Exception e) { LOG.fatal(e, e); System.exit(1); } } "	0	0	1	0	0	0
public Object Func1() throws NoConnectingLineSegmentException, NoSuchElementException, DataFromPointNoDataProviderException, DataFromPointProviderCannotProvideDataException{ if(this.lineSegment == null) throw new NoConnectingLineSegmentException(); Object var1 = lineSegment.getFromPoint().getData(); if(var1 == null) throw new NoSuchElementException(); return var1; } 	0	0	1	0	1	0
"public void Func1() { if(_exercises != null) { _exercises.clear(); } if(_graphExerciseList != null) { _graphExerciseList.clear(); } if(_db == null) { _db = new DBHandler(getActivity()); } _graphExerciseList = _db.getCompletedExercises(_db.getWritableDatabase()); Double var1 = 0.0; for(int var2 = 0; var2 < _graphExerciseList.size(); var2++) { String var3 = _graphExerciseList.keyAt(var2); ArrayList<Exercise> var4 = _graphExerciseList.get(var3); Exercise var5 = new Exercise.Builder(""New Exercise"").build(); for(Exercise var6 : var4) { if(var1 < var6.getOneRepMax()) { var1 = var6.getOneRepMax(); var5.setExerciseName(var6.getExerciseName()); var5.setExerciseSets(var6.getExerciseSets()); var5.setId(var6.getId()); var5.setOneRepMax(var1); } } _exercises.add(var5); } if(_adapter != null) _adapter.notifyDataSetChanged(); } "	0	0	1	0	1	0
"public void Func1(View var1) { ListView var2 = (ListView) findViewById(R.id.orderList); final int var3 = var2.getPositionForView((View) var1.getParent()); Order.OrderItem var4 = orderItems.get(var3); Call<Void> var5 = orderService .updateOrder( specItemIds.get(var4.getCourse()), new OrderService.OrderUpdate( OrderStatusCache.getInstance().getIds().get(""cancelled"").intValue())); var5.enqueue(new Callback<Void>() { @Override public void Func2(Call<Void> var5, Response<Void> var6) { if (var6.code() != 200) { Toast.makeText(OrdersActivity.this, ""Kunde inte ta bort spec-beställning, kod "" + var6.code(), Toast.LENGTH_SHORT).show(); return; } orderItems.remove(var3); adapter.notifyDataSetChanged(); } @Override public void Func3(Call<Void> var5, Throwable var7) { Toast.makeText(OrdersActivity.this, ""Kunde inte ta bort spec-beställning"", Toast.LENGTH_LONG).show(); } }); } "	0	0	0	0	1	0
"@Bean public MongoClient Func1(){ List<ServerAddress> var1 = new ArrayList(); MongoClient Func1 = null; try { for (String var3 : configurationContext.getMongoHosts()) { String[] var4 = var3.split("":""); if (var4.length < 2) { var1.add(new ServerAddress(var4[0])); } else { var1.add(new ServerAddress(var4[0], Integer.parseInt(var4[1]))); } } if (configurationContext.getMongoUsername() != null && configurationContext .getMongoPassword() != null) { Func1 = new MongoClient(var1, Arrays.asList(MongoCredential.createPlainCredential(configurationContext.getMongoUsername(), ""$external"", configurationContext .getMongoPassword().toCharArray()))); } else { log.warn( ""MongoDB user or password are not defined. User: [{}], Password: [{}]. trying anonymous connection."", configurationContext.getMongoUsername(), configurationContext .getMongoPassword()); Func1 = new MongoClient(var1); } } catch (UnknownHostException e) { e.printStackTrace(); } log.error(""Creating Spring Bean for mongoclient""); return Func1; } "	0	0	1	0	1	0
"private static int Func1(PduBody var1, MMSPart var2, int var3) { String var4 = var2.MimeType.split(""/"")[0] + ""_"" + var3 + "".mms""; final PduPart var5 = new PduPart(); if (var2.MimeType.startsWith(""text"")) { var5.setCharset(CharacterSets.UTF_8); } var5.setContentType(var2.MimeType.getBytes()); var5.setContentLocation(var4.getBytes()); int var6 = var4.lastIndexOf("".""); String var7 = (var6 == -1) ? var4 : var4.substring(0, var6); var5.setContentId(var7.getBytes()); var5.setData(var2.Data); var1.addPart(var5); return var5.getData().length; } "	0	0	0	0	1	0
"public void Func1() { Log.d(TAG, ""Scanning for nearby devices to swap with...""); bonjourFinder.scan(); bluetoothFinder.scan(); } "	0	0	0	0	1	0
"private void Func1() { if (timer != null) { timer.cancel(); } Log.d(TAG, ""Moving SwapService to background so that it can be GC'ed if required.""); stopForeground(true); } "	0	0	0	0	1	0
"private void Func1(final String var1) { new AsyncTask<Void, Void, Void>() { @Override protected Void Func2(Void... var2) { Uri var3 = Uri.parse(var1); String var4 = Utils.getLocalRepoUri(FDroidApp.repo).toString(); AndroidHttpClient var5 = AndroidHttpClient.newInstance(""F-Droid"", SwapService.this); HttpPost var6 = new HttpPost(""/var6-swap""); HttpHost var7 = new HttpHost(var3.getHost(), var3.getPort(), var3.getScheme()); try { Log.d(TAG, ""Asking server at "" + var1 + "" to swap with us in return (by POSTing to \""/var6-swap\"" with repo \"""" + var4 + ""\"")...""); Func3(var4, var6); var5.execute(var7, var6); } catch (IOException e) { Func4(); Log.e(TAG, ""Error while asking server to swap with us"", e); } finally { var5.close(); } return null; } private void Func3(String var4, HttpPost var6) throws UnsupportedEncodingException { List<NameValuePair> var8 = new ArrayList<>(); var8.add(new BasicNameValuePair(""repo"", var4)); UrlEncodedFormEntity var9 = new UrlEncodedFormEntity(var8); var6.setEntity(var9); } private void Func4() { } }.execute(); } "	0	0	0	0	1	0
public static String Func1(Context var1, Throwable var2, String... var3) { String var4; if (var2 instanceof UserNotFoundException) { var4 = var1.getString(R.string.error_message_user_not_found); } else if (var2 instanceof AccountDuplicateException) { var4 = var1.getString(R.string.error_message_account_duplicate); } else if (var2 instanceof LargeNumberOfDigitsException) { var4 = var1.getString(R.string.error_message_large_number_of_digits); } else if (var2 instanceof IlligalQRCodeException) { var4 = var1.getString(R.string.error_message_illegal_qr); } else if (var2 instanceof IlligalRequestAmountException) { var4 = var1.getString(R.string.error_message_request_amount_is_incorrect); } else if (var2 instanceof SelfSendCanNotException) { var4 = var1.getString(R.string.error_message_cannot_send_to_myself); } else if (var2 instanceof RequiredArgumentException) { var4 = var1.getString(R.string.validation_message_required, var3); } else if (var2 instanceof WriterException) { var4 = var1.getString(R.string.error_message_cannot_generate_qr); } else if (var2 instanceof NetworkNotConnectedException) { var4 = var1.getString(R.string.error_message_check_network_state); } else if (var2 instanceof HttpBadRequestException) { var4 = var1.getString(R.string.error_message_retry_again); } else { var4 = var1.getString(R.string.error_message_retry_again); } return var4; } 	0	0	0	0	0	1
"@Get(""/public/app/assinador-externo/doc/var7"") public void Func1() throws Exception { try { JSONObject var1 = getJsonReq(request); assertPassword(var1); String var2 = var1.getString(""var2""); String var3 = var1.getString(""var5""); String var4 = var2.split(""sigaex/public/app/"")[0] + ""siga/var4/""; Long var5 = Long.valueOf(var3); DpPessoa var6 = dao().consultarPorCpf(var5); if (var6 == null) throw new Exception(""Nenhuma pessoa localizada com o CPF: "" + var3); List<ExAssinadorExternoListItem> var7 = new ArrayList<ExAssinadorExternoListItem>(); List<ExAssinavelDoc> var8 = Ex.getInstance().getBL() .obterAssinaveis(var6, var6.getLotacao()); for (ExAssinavelDoc var9 : var8) { if (var9.isPodeAssinar()) { ExAssinadorExternoListItem var10 = new ExAssinadorExternoListItem(); var10.setId(makeId(var5, var9.getDoc().getCodigoCompacto())); var10.setCode(var9.getDoc().getCodigo()); var10.setDescr(var9.getDoc().getDescrDocumento()); var10.setKind(var9.getDoc().getTipoDescr()); var10.setOrigin(""Siga-Doc""); var10.setUrlView(var4 + var9.getDoc().getReferencia()); var10.setUrlHash(""sigadoc/doc/"" + var10.getId() + ""/hash""); var10.setUrlSave(""sigadoc/doc/"" + var10.getId() + ""/sign""); var7.add(var10); } if (var9.getMovs() == null) continue; for (ExAssinavelMov var11 : var9.getMovs()) { ExAssinadorExternoListItem var10 = new ExAssinadorExternoListItem(); var10.setId(makeId(var5, var11.getMov().getReferencia())); var10.setCode(var11.getMov().getReferencia()); var10.setDescr(var11.getMov().getDescrMov()); var10.setKind(var11.getMov().getTipoDescr()); var10.setOrigin(""Siga-Doc""); var10.setUrlView(var4 + var11.getMov().getReferencia().replace("":"", ""/"")); var10.setUrlHash(""sigadoc/doc/"" + var10.getId() + ""/hash""); var10.setUrlSave(""sigadoc/doc/"" + var10.getId() + ""/sign""); var7.add(var10); } } ExAssinadorExternoList var12 = new ExAssinadorExternoList(); var12.setList(var7); jsonSuccess(var12); } catch (Exception e) { jsonError(e); } } "	0	0	0	0	0	1
@Override public Container Func1(Direction var1, EntityPlayer var2) { return new ThermalSensorContainer(var2, inventory); } 	0	0	0	0	1	0
public void Func1(String[] var1) throws IOException { if (!parseArguments(var1)) { return; } final SimpleReference var2 = new SimpleReference(ref.getPath()); rand = new Random(seed); final byte[] var3 = fileToByteArray(sequenceFile); final VCFparser var4 = new VCFparser(inFile, false); final OutputStream var5 = (outFile != null) ? new FileOutputStream(outFile) : System.out; final BufferedWriter var6 = new BufferedWriter(new OutputStreamWriter(var5)); while (var4.hasMoreInput()) { final Variant var7 = var4.parseLine(); if (var7 == null) { continue; } var7.calculateExtraBase(var2.getSequence(var7.getChr())); final Genotypes var8 = var7.getGenotypes(); fillInSeq(var7, var3, var8.var8[0]); fillInSeq(var7, var3, var8.var8[1]); outputVcfRecord(var6, var7, var8.var8[0], var8.var8[1]); } var6.close(); } 	0	0	0	0	1	0
"private BoolQueryBuilder Func1(String var1, String var2) { String[] var3 = var2.split(Locator.METRIC_TOKEN_SEPARATOR_REGEX); String var4 = var3[var3.length - 1]; BoolQueryBuilder var5 = boolQuery(); QueryBuilder var6; if (var3.length == 1) { var6 = termQuery(ESFieldLabel.var7.name(), """"); } else { String var7 = Arrays.stream(var3) .limit(var3.length - 1) .collect(joining(Locator.METRIC_TOKEN_SEPARATOR)); GlobPattern var8 = new GlobPattern(var7); if (var8.hasWildcard()) { var6 = regexpQuery(ESFieldLabel.var7.name(), getRegexToHandleTokens(var8)); } else { var6 = termQuery(ESFieldLabel.var7.name(), var7); } } var5.must(termQuery(ESFieldLabel.var1.name(), var1)) .must(var6); if (!var4.equals(""*"")) { QueryBuilder var9; GlobPattern var10 = new GlobPattern(var4); if (var10.hasWildcard()) { var9 = regexpQuery(ESFieldLabel.token.name(), var10.compiled().toString()); } else { var9 = termQuery(ESFieldLabel.token.name(), var2); } var5.must(var9); } return var5; } "	0	0	0	0	1	0
"protected void Func1(org.zkoss.zk.ui.sys.ContentRenderer var1) throws java.io.IOException { super.Func1(var1); render(var1, ""selected"", isSelected()); render(var1, ""disabled"", isDisabled()); if (!isOpen()) var1.render(""open"", false); if (!isSelectable()) var1.render(""checkable"", false); render(var1, ""_loadedChildren"", isLoaded()); render(var1, ""_loaded"", isRendered()); if (_value instanceof String) render(var1, ""value"", _value); } "	0	0	0	0	1	0
private Map<Object, SerializableReference<?>> Func1(Object var1) { if (var1 instanceof ceylon.language.Identifiable) { return identifiableToReference; } else { return unidentifiableToReference; } } 	0	0	0	0	1	0
"public static Substitution<Variable, Term> Func1( Rule var1, Substitution<Variable, Term> var2, TermContext var3) { Substitution<Variable, Term> var4 = var2; for (Variable var5 : var1.freshConstants()) { var4 = var4.plus(var5, FreshOperations.fresh(var5.sort(), var3)); } Profiler.startTimer(Profiler.EVALUATE_LOOKUP_CHOICE_TIMER); int var6 = 0; for (Equality var7 : var1.lookups().equalities()) { Term var8 = var7.leftHandSide(); Term var9 =  var7.rightHandSide(); List<RHSInstruction> var10 = var1.instructionsOfLookups().get(var6); Term var11 = KAbstractRewriteMachine.construct(var10, var4, null, var3, false); boolean var12 = false; if (var11 instanceof Bottom || DataStructures.isLookupOrChoice(var11)) { if (!var12 && RuleAuditing.isAuditBegun()) { System.err.println(""Matching failure: unable to resolve collection operation "" + var8.substitute(var4, var3) + ""; evaluated to "" + var11); } } else { if (var9 instanceof Variable) { Variable var5 = (Variable) var9; if (var3.definition().subsorts().isSubsortedEq(var5.sort(), var11.sort())) { Substitution<Variable, Term> var13 = var4.plus(var5, var11); var12 = var13 != null; if (!var12 && RuleAuditing.isAuditBegun()) { System.err.println(""Matching failure: "" + var5 + "" must match both "" + var4.get(var5) + "" and "" + var11); } var4 = var13; } } else { Term var14 = var9.substituteAndEvaluate(var4, var3); PatternMatcher var15 = new PatternMatcher(var1.isLemma(), var3); if (var15.patternMatch(var11, var14)) { if (var9.variableSet().containsAll(var15.var2().keySet())) { var12 = true; var4 = var4.plusAll(var15.var2()); } else if (!var12 && RuleAuditing.isAuditBegun()) { System.err.println(""Matching failure: var2 "" + var15.var2() + "" missing variables "" + Sets.difference(var15.var2().keySet(), var9.variableSet())); } } } } if (!var12) { var4 = null; break; } ++var6; } Profiler.stopTimer(Profiler.EVALUATE_LOOKUP_CHOICE_TIMER); Profiler.startTimer(Profiler.EVALUATE_REQUIRES_TIMER); if (var4 != null) { var6 = 0; for (Term var16 : var1.requires()) { Term var17 = KAbstractRewriteMachine.construct(var1.instructionsOfRequires().get(var6), var4, null, var3, false); if (!var17.equals(BoolToken.TRUE)) { if (var1.isLemma() && !var17.isGround() && var3.getTopConstraint() != null && var3.getTopConstraint().implies(ConjunctiveFormula.of(var3).add(var17, BoolToken.TRUE), Collections.emptySet())) { var6++; continue; } if (RuleAuditing.isAuditBegun()) { System.err.println(""Side condition failure: "" + var16.substituteWithBinders(var4, var3) + "" evaluated to "" + var17); } var4 = null; break; } var6++; } } Profiler.stopTimer(Profiler.EVALUATE_REQUIRES_TIMER); return var4; } "	1	1	1	1	0	0
private boolean Func1(Player var1) { return players.getOpponentOf(var1).hasNoFleet(); } 	0	0	1	1	0	0
"public static void Func1(final EntityGraph var1, final Session var2) throws Exception { _log.info(""generating Func1.log...""); final Quoting var3 = new Quoting(var2); StringBuffer var4 = new StringBuffer(); for (Column var5: var1.getUniversalPrimaryKey().getColumns()) { if (var4.length() > 0) { var4.append("" and ""); } var4.append(""Succ.PRE_"" + var3.quote(var5.name) + ""=E."" + var3.quote(var5.name)); } final FileWriter var6 = new FileWriter(""Func1.log""); final RowIdSupport var7 = new RowIdSupport(var1.getDatamodel(), Configuration.forDbms(var2)); String var8 = ""Select var11, "" + var1.getUniversalPrimaryKey().columnList(null) + "" From "" + SQLDialect.dmlTableReference(EntityGraph.ENTITY, var2) + "" E Where E.r_entitygraph="" + var1.graphID + "" and not exists (Select * from "" + SQLDialect.dmlTableReference(EntityGraph.ENTITY, var2) + "" Succ Where Succ.r_entitygraph="" + var1.graphID + "" and Succ.PRE_TYPE=E.var11 and "" + var4 + "")""; var2.executeQuery(var8, new Session.AbstractResultSetReader() { public void Func2(ResultSet var9) throws SQLException { int var10 = var9.getInt(1); String var11 = null; if (!var9.wasNull()) { Table var12 = var1.getDatamodel().getTableByOrdinal(var10); var11 = var12.getName(); } List<String> var13 = new ArrayList<String>(); int var14 = 2; CellContentConverter var15 = getCellContentConverter(var9, var2); for (@SuppressWarnings(""unused"") Column var5: var1.getUniversalPrimaryKey().getColumns()) { var13.add(var15.toSql(var15.getObject(var9, var14++))); } try { var6.append(path(var1, var2, var11, var13, var1.getDatamodel(), var7, var3)); var6.append("".\n""); } catch (IOException var17) { throw new RuntimeException(var17); } } }); var6.append(""\n""); List<String> var16 = new ArrayList<String>(); for (Map.Entry<Association, Integer> var17: var1.explainIdOfAssociation.entrySet()) { String var18 = """" + var17.getValue(); while (var18.length() < 5) { var18 = "" "" + var18; } String var19 = var17.getKey().source.getName(); while (var19.length() < 24) { var19 = var19 + "" ""; } var16.add(""#"" + var18 + "" "" + var19 + "" -> "" + var17.getKey()); } Collections.sort(var16); for (String var20: var16) { var6.append(var20); var6.append(""\n""); } var6.close(); } "	0	0	1	1	1	0
"public static String Func1(final HttpServletRequest var1, final String var2) { return var2.replace(getPathInfoFromLocation(var1, var2), """"); } "	0	0	0	0	1	0
@Override public long Func1() { return getBaseMetaTileEntity().isAllowedToWork() ? 1 : (V[mTier + 1] / V[mTier] < 4 ? 4 : V[mTier + 1] / V[mTier]); } 	0	0	0	0	1	0
@Override public long Func1() { return getBaseMetaTileEntity().isAllowedToWork() ? (V[mTier + 1] / V[mTier] < 4 ? 4 : V[mTier + 1] / V[mTier]) : 1; } 	0	0	0	0	1	0
"@Override public Statement Func1(final JsonParser var1, final DeserializationContext var2) throws IOException { final ObjectCodec var3 = var1.getCodec(); if (var3 == null) { return null; } final JsonNode var4 = var3.readTree(var1); if (var4 == null) { return null; } final JsonNode var5 = var4.get(""var6""); Long var6 = null; if (var5 != null) { try { var6 = var5.asLong(); } catch (final Exception e) { var6 = null; } } final JsonNode var7 = var4.get(""var8""); String var8 = null; if (var7 != null) { var8 = var7.asText(); } final JsonNode var9 = var4.get(""s""); if (var9 == null) { throw new JsonParseException(""expected JSON var4 that represents the var10 of a var21"", var1.getCurrentLocation()); } final Node var10; if (var9.get(""uri"") != null) { var10 = var9.traverse(var3).readValueAs(ResourceNode.class); } else { var10 = var9.traverse(var3).readValueAs(Node.class); } final JsonNode var11 = var4.get(""p""); if (var11 == null) { throw new JsonParseException(""expected JSON var4 that represents the var12 of a var21"", var1.getCurrentLocation()); } final Predicate var12 = var11.traverse(var3).readValueAs(Predicate.class); final JsonNode var13 = var4.get(""o""); if (var13 == null) { throw new JsonParseException(""expected JSON var4 that represents the var14 of a var21"", var1.getCurrentLocation()); } final Node var14; if (var13.get(""uri"") != null) { var14 = var13.traverse(var3).readValueAs(ResourceNode.class); } else if (var13.get(""v"") != null) { var14 = var13.traverse(var3).readValueAs(LiteralNode.class); } else { var14 = var13.traverse(var3).readValueAs(Node.class); } final JsonNode var15 = var4.get(""var16""); Long var16 = null; if (var15 != null) { try { var16 = var15.asLong(); } catch (final Exception e) { var16 = null; } } final JsonNode var17 = var4.get(""var18""); String var18 = null; if (var17 != null) { var18 = var17.asText(); } final JsonNode var19 = var4.get(""var20""); String var20 = null; if (var19 != null) { var20 = var19.asText(); } final Statement var21 = new Statement(var10, var12, var14); if(var6 != null) { var21.setId(var6); } if(var8 != null) { var21.setUUID(var8); } if(var16 != null) { var21.setOrder(var16); } if(var18 != null) { var21.setEvidence(var18); } if(var20 != null) { var21.setConfidence(var20); } return var21; } "	0	0	0	0	1	0
@Override public boolean Func1(final Preference var1) { if (var1.equals(prefFrag.findPreference(PREFS_KEY_UI))) { preferences = true; Tools.switchTo(Preferences.this, PreferencesUI.class); } else if (var1.equals(prefFrag.findPreference(PREFS_KEY_GEOLOCATION))) { preferences = true; Tools.switchTo(Preferences.this, PreferencesGeolocation.class); } else if (var1.equals(prefFrag.findPreference(PREFS_KEY_RECORDER))) { preferences = true; Tools.switchTo(Preferences.this, PreferencesRecorder.class); } else if (var1.equals(prefFrag.findPreference(PREFS_KEY_LOG_ENABLE))) { prefFrag.findPreference(PREFS_KEY_LOG).setEnabled( ((CheckBoxPreference) var1).isChecked()); } else if (var1.equals(prefFrag.findPreference(PREFS_KEY_TIMERS))) { preferences = true; Tools.switchTo(Preferences.this, PreferencesTimers.class); } else if (var1.equals(prefFrag.findPreference(PREFS_KEY_LOG))) { preferences = true; Tools.switchTo(Preferences.this, PreferencesTimers.class); return true; } else if (var1.equals(prefFrag.findPreference(PREFS_KEY_CHANGELOG))) { preferences = true; changeLog.getFullLogDialog().show(); } return true; } 	0	0	0	0	1	0
"public AnimatedEntity Func1(int var1, int var2, boolean var3, char var4, Color var5) { Actor var6 = textFactory.makeActor("""" + var4, var5); var6.setName("""" + var4); if(var3) var6.setPosition(var1 * 2 * cellWidth, (gridHeight - var2 - 1) * cellHeight - 1); else var6.setPosition(var1 * cellWidth, (gridHeight - var2 - 1) * cellHeight - 1); AnimatedEntity var7 = new AnimatedEntity(var6, var1, var2); animatedEntities.add(var7); return var7; } "	1	0	1	0	1	0
@Override protected int Func1() { return R.layout.row_digital_asset; } 	0	0	0	0	1	0
private static double[][] Func1( double[][]var1,double[][]var2, boolean var3) { double[][] var4 = new double[var1.length][]; for( int var5 =0; var5< var1.length; var5++) { var4[var5] = new double[var2[0].length]; for( int var6=0; var6<var4.length; var6++) { for( int var7=0; var7< var4.length;var7++) { double var8 = var1[var5][var7]*var2[var7][var6]; if( var3) var8 = var8*var8; var4[var5][var6] += Math.abs(var8); } var4[var5][var6] = Math.sqrt( var4[var5][var6]); } } return var4; } 	0	0	0	1	0	0
"public ObjectNode Func1(Map<String, String[]> var1, Area var2) { Map<String, String[]> var3 = new HashMap<>(); var3.putAll(var1); var3.remove(""tipoRelatorio""); if (var1.containsKey(""filtrarPor_eq"")) { if (""Subarea"".equalsIgnoreCase(var1.get(""filtrarPor_eq"")[0])) { if (var1.containsKey(""subareaAgrupamento"")) { var3.put(""subarea.nome"", var1.get(""subareaAgrupamento"")); } } else if (""Agrupamento"".equalsIgnoreCase(var1.get(""filtrarPor_eq"")[0])) { if (var1.containsKey(""subareaAgrupamento"")) { var3.put(""aneis.agrupamentos.nome"", var1.get(""subareaAgrupamento"")); } } var3.remove(""subareaAgrupamento""); var3.remove(""filtrarPor_eq""); } String var4 = null; if (var3.containsKey(""tipoFalha"")) { var4 = var3.get(""tipoFalha"")[0]; var3.remove(""tipoFalha""); } if (var2 != null) { String[] var5 = {var2.getId().toString()}; var3.put(""var2.id"", var5); } List<Controlador> var6 = (List<Controlador>) new InfluuntQueryBuilder(Controlador.class, var3).fetch(Arrays.asList(""subarea"", ""aneis"")).query().getResult(); List<AlarmesFalhasControlador> var7 = AlarmesFalhasControlador.ultimosAlarmesFalhasControladores(null, var4); ArrayNode var8 = JsonNodeFactory.instance.arrayNode(); var7.forEach(falha -> { String var9 = falha.getIdControlador(); Controlador var10; Anel var11 = null; var10 = var6.stream().filter(c -> c.getControladorFisicoId().equals(var9)).findFirst().orElse(null); if (var10 != null) { if (falha.getIdAnel() != null && StringUtils.isNotEmpty(falha.getIdAnel())) { String var12 = falha.getIdAnel(); var11 = var10.getAneis().stream().filter(a -> (a.isAtivo() && a.getId().toString().equals(var12))).findFirst().orElse(null); } Endereco var13 = (var11 != null) ? var11.getEndereco() : var10.getEndereco(); var8.addObject() .put(""clc"", var10.getCLC()) .put(""cla"", var11 != null ? var11.getCLA() : ""TODOS OS ANÉIS APRESENTAM FALHAS"") .putPOJO(ENDERECO, var13.nomeEndereco()) .put(""falha"", var11 != null ? ""Falha no Anel"" : ""Falha no Controlador"") .put(""tipo"", falha.getConteudo().get(""tipoEvento"").get(""descricao"").asText()); } }); ObjectNode var14 = JsonNodeFactory.instance.objectNode(); var14.putArray(""data"").addAll(var8); return var14; } "	0	0	0	0	1	0
"public static Sampler Func1(float var1) { if (var1 == 0) return Sampler.NEVER_SAMPLE; if (var1 == 1.0) return ALWAYS_SAMPLE; checkArgument(var1 > 0.0001 && var1 < 1, ""var1 should be between 0.0001 and 1: was %s"", var1); final long var2 = (long) (var1 * 10000); // safe cast as less <= 1 return new BoundarySampler(var2); } "	0	0	0	0	1	0
"public static void Func1(String[] var1) { String var2 = ""var14.multiPlayer.doNothing.Agent""; String var3 = ""var14.multiPlayer.sampleRandom.Agent""; String var4 = ""var14.multiPlayer.sampleOneStepLookAhead.Agent""; String var5 = ""examples/2player/""; String var6[] = new String[]{}; var6 = new String[]{""gotcha"", ""sokoban""}; boolean var7 = true; int var8 = new Random().nextInt(); int var9 = 0; int var10 = 0; //level names from 0 to 4 (game_lvlN.txt). String var11 = var5 + var6[var9] + "".txt""; String var12 = var5 + var6[var9] + ""_lvl"" + var10 +"".txt""; String var13 = null;//""actions_"" + var6[var9] + ""_lvl"" + var10 + ""_"" + var8 + "".txt""; //where to record the actions executed. null if not to save. String var14 = var3 + "" "" + var3; ArcadeMachine.runOneGame(var11, var12, var7, var14, var13, var8, false); } "	0	0	0	0	1	0
@Override public void Func1() { defaultIcon.setVisible(true); previewImage.setVisible(false); teamImageLoading.setVisible(false); } 	0	0	0	0	1	0
"private RawProtein<PrintsRawMatch> Func1(final RawProtein<PrintsRawMatch> var1) { final RawProtein<PrintsRawMatch> var2 = new RawProtein<PrintsRawMatch>(var1.getProteinIdentifier()); final Set<PrintsRawMatch> var3 = new TreeSet<PrintsRawMatch>(PRINTS_RAW_MATCH_COMPARATOR); // Gets the raw matches into the correct order for processing. var3.addAll(var1.getMatches()); LOGGER.debug(""New 'var3' set contains "" + var3.size() + "" matches.""); String var4 = null; Set<PrintsRawMatch> var5 = new HashSet<PrintsRawMatch>(); boolean var6 = true; FingerPRINTSHierarchyDBParser.HierachyDBEntry var7 = null; final List<String> var8 = new ArrayList<String>(allPrintsModelIDs); for (PrintsRawMatch var9 : var3) { if (LOGGER.isDebugEnabled()) { LOGGER.debug(""Iterating over sorted raw matches.  Currently looking at protein "" + var1.getProteinIdentifier() + "" model "" + var9.getModelId()); } if (var4 == null || !var4.equals(var9.getModelId())) { if (var6 && var4 != null) { if (LOGGER.isDebugEnabled()) { LOGGER.debug(""In Func1 method, calling filterModelMatches for protein "" + var1.getProteinIdentifier() + "" and model "" + var4); } var2.addAllMatches(filterModelMatches(var5, var7, var8)); } var6 = true; var5.clear(); var4 = var9.getModelId(); var7 = printsModelData.get(var4); if (var7 == null) { throw new IllegalStateException(""There is no entry in the FingerPRINThierarchy.db file for model accession "" + var9.getModelId()); } } if (var6) var6 = var9.getEvalue() <= var7.getEvalueCutoff(); if (var6) var5.add(var9); } if (var6) { if (LOGGER.isDebugEnabled()) { LOGGER.debug(""In Func1 method, calling filterModelMatches for protein "" + var1.getProteinIdentifier() + "" and model "" + var4); } var2.addAllMatches(filterModelMatches(var5, var7, var8)); } return var2; } "	0	0	0	0	1	0
"@Override public @Nonnull VirtualMachine Func1(@Nonnull VMLaunchOptions var1)throws CloudException, InternalException { APITrace.begin(getProvider(), ""launchVM""); try{ Compute var2 = provider.getGoogleCompute(); GoogleMethod var3 = new GoogleMethod(provider); if(var1.getDataCenterId() == null || var1.getDataCenterId().equals("""")){ throw new InternalException(""A datacenter must be specified when launching an var4""); } if(var1.getVlanId() == null || var1.getVlanId().equals("""")){ throw new InternalException(""A VLAN must be specified withn launching an var4""); } Instance var4 = new Instance(); var4.setName(var1.getHostName()); var4.setDescription(var1.getDescription()); var4.setMachineType(getProduct(var1.getStandardProductId()).getDescription()); MachineImage var5 = provider.getComputeServices().getImageSupport().getImage(var1.getMachineImageId()); AttachedDisk var6 = new AttachedDisk(); var6.setBoot(Boolean.TRUE); var6.setType(""PERSISTENT""); var6.setMode(""READ_WRITE""); AttachedDiskInitializeParams var7 = new AttachedDiskInitializeParams(); var7.setDiskName(var1.getHostName()); var7.setDiskSizeGb(10L); if ((var5 != null) && (var5.getTag(""contentLink"") != null)) var7.setSourceImage((String)var5.getTag(""contentLink"")); else throw new CloudException(""Problem getting the contentLink tag value from the var5 for "" + var1.getMachineImageId()); var6.setInitializeParams(var7); if(var1.getVolumes().length > 0){ for(VolumeAttachment var8 : var1.getVolumes()){ } } List<AttachedDisk> var9 = new ArrayList<AttachedDisk>(); var9.add(var6); var4.setDisks(var9); AccessConfig var10 = new AccessConfig(); var10.setName(""External NAT""); var10.setType(""ONE_TO_ONE_NAT"");//Currently the only type supported if(var1.getStaticIpIds().length > 0)var10.setNatIP(var1.getStaticIpIds()[0]); List<AccessConfig> var11 = new ArrayList<AccessConfig>(); var11.add(var10); NetworkInterface var12 = new NetworkInterface(); var12.setName(""nic0""); var12.setNetwork(provider.getNetworkServices().getVlanSupport().getVlan(var1.getVlanId()).getTag(""contentLink"")); var12.setAccessConfigs(var11); List<NetworkInterface> var13 = new ArrayList<NetworkInterface>(); var13.add(var12); var4.setNetworkInterfaces(var13); var4.setCanIpForward(Boolean.FALSE); Scheduling var14 = new Scheduling(); var14.setAutomaticRestart(Boolean.TRUE); var14.setOnHostMaintenance(""TERMINATE""); var4.setScheduling(var14); Map<String,String> var15 = new HashMap<String, String>(); if(var1.getBootstrapUser() != null && var1.getBootstrapKey() != null && !var1.getBootstrapUser().equals("""") && !var1.getBootstrapKey().equals("""")){ var15.put(""sshKeys"", var1.getBootstrapUser() + "":"" + var1.getBootstrapKey()); } if(!var1.getMetaData().isEmpty()) { for( Map.Entry<String,Object> var16 : var1.getMetaData().entrySet() ) { var15.put(var16.getKey(), (String)var16.getValue()); } } if (!var15.isEmpty()) { Metadata var17 = new Metadata(); ArrayList<Metadata.Items> var18 = new ArrayList<Metadata.Items>(); for (Map.Entry<String, String> var16 : var15.entrySet()) { Metadata.Items var19 = new Metadata.Items(); var19.set(""key"", var16.getKey()); if ((var16.getValue() == null) || (var16.getValue().isEmpty() == true) || (var16.getValue().equals(""""))) var19.set(""value"", """"); // GCE HATES nulls... else var19.set(""value"", var16.getValue()); var18.add(var19); } var17.setItems(var18); var4.setMetadata(var17); } Tags var20 = new Tags(); ArrayList<String> var21 = new ArrayList<String>(); var21.add(var1.getHostName()); // Each tag must be 1-63 characters long, and comply with RFC1035 var20.setItems(var21); var4.setTags(var20); String var22 = """"; try{ Operation var23 = var2.instances().insert(provider.getContext().getAccountNumber(), var1.getDataCenterId(), var4).execute(); var22 = var3.getOperationTarget(provider.getContext(), var23, GoogleOperationType.ZONE_OPERATION, """", var1.getDataCenterId(), false); } catch (IOException ex) { logger.error(ex.getMessage()); if (ex.getClass() == GoogleJsonResponseException.class) { GoogleJsonResponseException var24 = (GoogleJsonResponseException)ex; throw new GoogleException(CloudErrorType.GENERAL, var24.getStatusCode(), var24.getContent(), var24.getDetails().getMessage()); } else throw new CloudException(""An error occurred launching the var4: "" + ex.getMessage()); } if(!var22.equals("""")){ return getVirtualMachine(var22); } else throw new CloudException(""Could not find the var4: "" + var1.getFriendlyName() + "" after Func1.""); } finally { APITrace.end(); } } "	0	0	0	0	0	1
public boolean Func1() { return deliveryPolicy == DeliveryPolicy.UNCHECKED || (delivered && deliveryPolicy == DeliveryPolicy.AT_LEAST_ONE); } 	0	0	1	0	0	0
public void Func1() { delivered = true; } 	0	0	1	0	0	0
"@Override public void Func1() { Log.i(LOG_TAG, this.getClass().getSimpleName() + getId() + "".Func1()""); super.Func1(); } "	0	0	1	0	1	0
"@Nullable @Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { Log.i(LOG_TAG, this.getClass().getSimpleName() + getId() + "".Func1()""); return super.Func1(var1, var2, var3); } "	0	0	1	0	1	0
"@Override public void Func1() { Log.i(LOG_TAG, this.getClass().getSimpleName() + getId() + "".Func1()""); super.Func1(); } "	0	0	1	0	1	0
"@Override public void Func1() { Log.i(LOG_TAG, this.getClass().getSimpleName() + getId() + "".Func1()""); super.Func1(); } "	0	0	1	0	1	0
"private void Func1() { AlertDialog.Builder var1 = new AlertDialog.Builder(getActivity()); var1.setMessage(""Are you sure you want to go back? The image will not have any categories saved."") .setTitle(""Warning""); var1.setPositiveButton(""No"", new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var2, int var3) { } }); var1.setNegativeButton(""Yes"", new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var2, int var3) { getActivity().finish(); } }); AlertDialog var2 = var1.create(); var2.show(); } "	0	0	1	1	0	0
"public synchronized void Func1(boolean var1, DebugLogger var2) { Logger.enabled = var1; if (var1 == false) { Logger.var2 = null; } else { if (var2 == null) { var2 = new DebugLogger() { public void Func2(int var3, String var4, String var5) { long var6 = System.currentTimeMillis(); System.err.println(var6 + "" : "" + var4 + "": "" + var5); } }; } } } "	0	0	1	1	0	0
public long Func1() { return image; } 	0	0	1	1	0	0
public long Func1() { return location; } 	0	0	0	1	0	0
@Test public void Func1() { final long var1 = getCurrentTimeMillisTimestampCompatible(); final Date var2 = timestamp.set(var1).toDate(); final Date var3 = new Date(var1); assertThat(var2.compareTo(var3), is(0)); } 	0	0	0	0	1	0
public void Func1(Group var1) { editorDriver.Func1(var1); nameEditor.setValue(var1.getSubjectDisplayName()); } 	0	0	0	0	1	0
"private void Func1(JComboBox<String> var1, JComboBox<Integer> var2, JTextField var3, JTextField var4, JTextField var5, JTextField var6, JTextField var7, JTextField var8, JTextField var9, JTextField var10, JSpinner var11, JSpinner var12, JSpinner var13, JCheckBox var14, JTextField var15, JCheckBox var16, JTextField var17) { try{ TrackModel var18 = new TrackModel(); TrackBlock var19 = var18.getBlock((String) var1.getSelectedItem(), (Integer) var2.getSelectedItem()); var19.line = (String) var1.getSelectedItem(); var19.section = var9.getText(); var19.blockNumber = (Integer) var2.getSelectedItem(); var19.blockLength = Double.parseDouble(var15.getText()); var19.blockGrade = Double.parseDouble(var3.getText()); var19.speedLimit = Double.parseDouble(var5.getText()); if (!var17.getText().equals("""") && !var17.getText().equals(""FALSE"")) var19.infrastructure += ""STATION; "" + var17.getText() + "" ""; if (var14.isSelected()) var19.infrastructure += ""UNDERGROUND ""; if (var16.isSelected()) var19.infrastructure += ""RAILWAY CROSSING ""; if (!var7.getText().equals("""") && !var7.getText().equals(""FALSE"")) { var19.infrastructure += ""SWITCH ""; var19.switchBlock.id = var7.getText(); } var19.elevation = Double.parseDouble(var4.getText()); var19.cumualativeElevation = Double.parseDouble(var6.getText()); var19.switchBlock.position = var12.getValue().toString(); var19.arrowDirection = var10.getText(); var19.numPass = (int) var13.getValue(); var19.temp = (int) var11.getValue(); var19.status = BlockStatus.valueOf(var8.getText()); var19.trainID = Integer.parseInt(textField_2.getText()); if(var19.trainID >= 0) var19.status = BlockStatus.OCCUPIED; opps.setBlock(var19); } catch(NumberFormatException n){ JFrame var20 = new JFrame(); JOptionPane.showMessageDialog(var20,""Please click the Check Live button before saving to the database"",""TRACK MODEL ERROR"", JOptionPane.ERROR_MESSAGE); } } "	1	1	1	1	0	0
public void Func1() { id = widgetPresenter.apply(widget); // update front registerWidget(id, widget); // update end } 	0	0	0	0	1	0
"private void Func1(List<Stat> var1) { HostAndPort var2 = HostAndPort.fromString(mConfig.getStatsDHostPort()); NonBlockingStatsDClient var3 = new NonBlockingStatsDClient(mConfig.getKafkaGroup(), var2.getHostText(), var2.getPort()); for (Stat var4 : var1) { @SuppressWarnings(""unchecked"") Map<String, String> var5 = (Map<String, String>) var4.get(Stat.STAT_KEYS.TAGS.getName()); String var6 = new StringBuilder((String)var4.get(Stat.STAT_KEYS.METRIC.getName())) .append(PERIOD) .append(var5.get(Stat.STAT_KEYS.TOPIC.getName())) .append(PERIOD) .append(var5.get(Stat.STAT_KEYS.PARTITION.getName())) .toString(); var3.recordGaugeValue(var6, (Long)var4.get(Stat.STAT_KEYS.VALUE.getName())); } } "	0	0	0	0	1	0
"@BeforeClass public void Func1() throws DataBridgeException, StreamDefinitionStoreException, MalformedStreamDefinitionException, URISyntaxException { bLangProgram = BTestUtils.parseBalFile(BALLERINA_TEST_SCRIPT_LOCATION); Path var1 = Paths.get(EventPublisherTestCase.class.getProtectionDomain() .getCodeSource().getLocation().toURI()); DataPublisherTestUtil.CONFIG_PATH = var1.toString(); System.setProperty(""ballerina.home"", var1.toString()); thriftTestServer.addStreamDefinition(StreamDefinitions.getStreamDefinitionFault()); thriftTestServer.start(thriftServerListenPort); } "	0	0	0	0	1	0
"@Override public Document Func1( Connection var1, String var2 ) throws SQLException { if (logger.isDebugEnabled()) { logger.debug(""Searching for entry by var2 {0} in {1}"", var2, config.tableName()); } try (PreparedStatement ps = var1.prepareStatement(statements.get(GET_BY_ID))) { ps.setString(1, var2); try (ResultSet rs = ps.executeQuery()) { if (!rs.next()) { return null; } return readDocument(rs.getBinaryStream(1)); } } } "	0	0	1	1	1	0
"@Override public Void Func1( Connection var1 ) throws SQLException { try { return super.Func1(var1); } catch (SQLException e) { int var2 = e.getErrorCode(); if (IGNORABLE_ERROR_CODES.contains(e.getErrorCode())) { logger.debug(e, ""Ignoring Oracle SQL exception for database {0} with error code {1}"", var2); return null; } throw e; } } "	0	0	0	0	1	0
"@SuppressWarnings(""StatementWithEmptyBody"") @Override public boolean Func1(MenuItem var1) { Bundle var2 = new Bundle(); newFragment = null; FragmentTransaction var3 = getSupportFragmentManager().beginTransaction(); int var4 = var1.getItemId(); if (var4 == R.var4.nav_camera) { newFragment = new SearchDisciplinesFragment(); } else if (var4 == R.var4.nav_gallery) { newFragment = new CreateExamFragment(); } else if (var4 == R.var4.nav_slideshow) { newFragment = new TaskFragment(); } else if (var4 == R.var4.nav_manage) { newFragment = new DisciplineFragment(); } else if (var4 == R.var4.nav_exams_grade){ newFragment = new ExamGradeFragment(); } else if(var4 == R.var4.nav_presence){ newFragment = new PresenceManagerFragment(); } else { } newFragment.setArguments(var2); var3.replace(R.var4.fragment_container, newFragment); var3.addToBackStack(null); var3.commit(); DrawerLayout var5 = (DrawerLayout) findViewById(R.var4.drawer_layout); var5.closeDrawer(GravityCompat.START); return true; } "	0	0	0	0	1	0
"@Override public Iterable<PomIssue> Func1(MavenProject var1) { final List<PomIssue> var2 = Lists.newArrayList(); @SuppressWarnings(""unchecked"") List<Dependency> var3 = var1.getDependencies(); for (Dependency var4 : var3) { if (var4.getGroupId().startsWith(ORG_MULE_GROUP_ID) || var4.getGroupId().startsWith(COM_MULESOFT_GROUP_ID)) { if (StringUtils.isEmpty(var4.getScope()) || var4.getScope().equals(""compile"")) { var2.add(new PomIssue(KEY, String.format(""Artifact '%s' is a Mule var4 and should be declared with <scope>provided</scope>."", var4.getArtifactId()))); } } } return var2; } "	0	0	0	0	1	0
public void Func1(@Nonnull SQLiteDatabase var1) { executeSql(var1, getCreateSql()); } 	0	0	0	0	1	0
private void Func1() { Button var1 = (Button) view.findViewById(R.id.hint); if(messageArgs.allowHint) { var1.setVisibility(View.VISIBLE); var1.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var2) { dismiss(); ((CircuitActivity) Message.this.getActivity()).giveNegativeFeedback(); } }); } else { var1.setVisibility(View.INVISIBLE); } } 	0	0	0	0	1	0
public double Func1(XYPair var1) { FieldPose var2 = getLinePerpendicularToPoint(var1); XYPair var3 = getIntersectionWithLine(var2); return var3.getDistanceToPoint(var1); } 	0	0	0	0	1	0
public boolean Func1(World var1, Random var2, BlockPos var3) { int var4 = var3.getX(); int var5 = var3.getY(); int var6 = var3.getZ(); int var7 = var2.nextInt(3) + this.minTreeHeight; boolean var8 = true; if (var5 >= 1 && var5 + var7 + 1 <= 256) { byte var9; int var10; Block var11; for (int var12 = var5; var12 <= var5 + 1 + var7; ++var12) { var9 = 1; if (var12 == var5) { var9 = 0; } if (var12 >= var5 + 1 + var7 - 2) { var9 = 2; } for (int var13 = var4 - var9; var13 <= var4 + var9 && var8; ++var13) { for (var10 = var6 - var9; var10 <= var6 + var9 && var8; ++var10) { if (var12 >= 0 && var12 < 256) { if (!this.isReplaceable(var1,new BlockPos(var13, var12, var10))) { var8 = false; } } else { var8 = false; } } } } if (!var8) { return false; } else { Block var14 = var1.getBlockState(new BlockPos(var4, var5 - 1, var6).down()).getBlock(); boolean var15 = var14.canSustainPlant(var1.getBlockState(new BlockPos(var4, var5 - 1, var6).down()), var1, var3.down(), EnumFacing.UP, (BlockSapling)Blocks.sapling); if (var15 && var5 < 256 - 4 - 1) { Block var16 = BlockLoader.oliveLeaf; placeBlock(var1, var4 - 1, var5+2, var6 - 1, var16); placeBlock(var1, var4 -1, var5+2, var6, var16); placeBlock(var1, var4-1, var5+2, var6+1, var16); placeBlock(var1, var4, var5+2, var6-1, var16); placeBlock(var1, var4, var5+2,var6,var16); placeBlock(var1,var4,var5+2, var6+1, var16); placeBlock(var1, var4+1,var5+2,var6-1,var16); placeBlock(var1, var4+1, var5+2,var6,var16); placeBlock(var1,var4+1,var5+2, var6+1, var16); placeBlock(var1, var4 - 1, var5+3, var6 - 1, var16); placeBlock(var1, var4 -1, var5+3, var6, var16); placeBlock(var1, var4-1, var5+3, var6+1, var16); placeBlock(var1, var4, var5+3, var6-1, var16); placeBlock(var1, var4, var5+3,var6,var16); placeBlock(var1,var4,var5+3, var6+1, var16); placeBlock(var1, var4+1,var5+3,var6-1,var16); placeBlock(var1, var4+1, var5+3,var6,var16); placeBlock(var1,var4+1,var5+3, var6+1, var16); placeLog(var1, var4, var5, var6, Blocks.log); placeLog(var1, var4, var5+1, var6, Blocks.log); placeBlock(var1, var4, var5+4, var6, var16); return true; } } } return false; } 	1	1	1	1	0	0
@Override public Jedis Func1() { while (true) { Jedis var1 = super.Func1(); var1.setDataSource(this); final HostAndPort var2 = currentHostMaster; final HostAndPort var3 = new HostAndPort(var1.getClient().getHost(), var1.getClient() .getPort()); if (var2.equals(var3)) { return var1; } else { returnBrokenResource(var1); } } } 	0	0	0	0	1	0
"@Test public void Func1 () throws QueryException { SpanQueryWrapper var1 = jsonQueryFile(""multiple-distances.jsonld""); assertEquals( ""spanDistance(tokens:s:er, spanDistance(tokens:s:kann, tokens:s:sagte, [(w[2:11], ordered, notExcluded)]), [(w[1:11], ordered, notExcluded)])"", var1.toQuery().toString()); }; "	0	0	1	0	1	0
"public void Func1(final DataDefinition var1, final Entity var2) { fillUserAndDate(var2); DataDefinition var3 = dataDefinitionService.get(GenealogiesConstants.PLUGIN_IDENTIFIER, GenealogiesConstants.MODEL_CURRENT_ATTRIBUTE); SearchResult var4 = var3.find().setMaxResults(1).list(); if (var4.getEntities().size() > 0) { Entity var5 = var4.getEntities().get(0); var5.setField(""lastUsedShift"", var2.getField(""value"")); var3.save(var5); } } "	0	0	0	0	1	0
static void Func1(String var1) { callAlert(var1, false); } 	0	0	0	0	1	0
@Override public ReadResponse Func1(ReadRequest var1) { int var2 = var1.getTransactionId(); Serializable var3 = var1.getEncodedKey(); Transaction var4 = transactions.get(var2); if (var4 == null) { return new ReadResponse(false, null); } Lock var5 = Lock.READ_LOCK; if (deadlock.checkForDeadlock(var2, var3, var5)) { transactions.remove(var2); return new ReadResponse(false, null); } lockingUnit.var5(var3, var5); var4.addLock(var3, var5); Serializable var6 = versioningUnit.get(var2, var3); return new ReadResponse(true, (String) var6); } 	0	0	0	0	1	0
"public void Func1() { Main.getInstance().toolbarArea.disableButtons(true); if (Main.getInstance().isProjectOpen() == true) { Main.getInstance().setCurrentProject(""""); Main.getInstance().getPrimaryStage().setTitle(Main.APPNAME); Main.getInstance().getFileList().clear(); } } "	0	0	0	0	1	0
"@SuppressWarnings({""unchecked"", ""null""}) @Override public Class<?>[] Func1(final ChangeMode var1) { if (var1 == ChangeMode.ADD || var1 == ChangeMode.SET || var1 == ChangeMode.DELETE || var1 == ChangeMode.REMOVE) return CollectionUtils.array(Player.class); return null; } "	1	0	1	0	0	0
private ImmutableSet<String> Func1(final Map<String, List<Issue>> var1) { Set<String> var2 = new HashSet<String>(); var2.add(INVALID_TYPE); var2.addAll(var1.keySet()); return ImmutableSet.copyOf(var2); } 	0	0	0	0	1	0
public void Func1() { NearCacheConfig var1 = createNearCacheConfig(); var1.setInvalidateOnChange(true); ICache<Integer, String> var2 = createCacheWithNearCache(var1); ICache<Integer, String> var3 = getCacheWithNearCache(); putRecordsToCacheOnClient1(var2); getRecordsFromCacheOnClient2(var3); getRecordsFromNearCacheOnClient2(var3); updateRecordsInCacheOnClient1(var2); sleep(BATCH_FREQUENCY_MILISECONDS + 5000); getInvalidatedRecordsFromNearCacheOnClient2(var3); shutdown(); } 	0	0	0	0	1	0
"public Criteria Func1() { addCriterion(""value_ is not null""); return (Criteria) this; } "	0	0	1	0	0	0
"public Criteria Func1() { addCriterion(""value_ is null""); return (Criteria) this; } "	0	0	1	0	0	0
"public Criteria Func1(String var1) { addCriterion(""value_ ="", var1, ""var1""); return (Criteria) this; } "	1	0	1	1	1	0
@Override public void Func1(ByteBuf var1) { var1.writeInt(stacks.size()); for (ItemStack var2 : stacks) { if (var2 != null) { var1.writeBoolean(true); NetworkTools.writeItemStack(var1, var2); } else { var1.writeBoolean(false); } } } 	0	0	0	0	1	0
"@Override public int Func1(NavigationEvent var1) { UI var2 = var1.getUI(); Class<? extends Component> var3 = navigationState .getNavigationTarget(); List<Class<? extends RouterLayout>> var4 = getRouterLayoutTypes( var3); assert var3 != null; assert var4 != null; storeContinueNavigationAction(var2, null); RouterUtil.checkForDuplicates(var3, var4); BeforeNavigationEvent var5 = new BeforeNavigationEvent( var1, var3, ActivationState.DEACTIVATING); Queue<BeforeNavigationListener> var6 = remainingListeners; if (var6 == null) { var6 = new LinkedList<>( EventUtil.collectBeforeNavigationListeners(var2.getElement())); } else { remainingListeners = null; } TransitionOutcome var7 = executeBeforeNavigation( var5, var6); switch (var7) { case REROUTED: return reroute(var1, var5); case POSTPONED: remainingListeners = var6; ContinueNavigationAction var8 = var5 .getContinueNavigationAction(); var8.setCallback(() -> this.Func1(var1)); storeContinueNavigationAction(var2, var8); return HttpServletResponse.SC_OK; case FINISHED: break; default: throw new IllegalStateException( ""Unexpected transition outcome: "" + var7); } Component var9 = getRouteTarget(var3, var1); List<HasElement> var10 = new ArrayList<>(); var10.add(var9); for (Class<? extends RouterLayout> var11 : var4) { var10.add(getRouteTarget(var11, var1)); } BeforeNavigationEvent var12 = new BeforeNavigationEvent( var1, var3, ActivationState.ACTIVATING); navigationState.getUrlParameters().ifPresent(urlParameters -> { HasUrlParameter var13 = (HasUrlParameter) var9; var13.setParameter(var12, var13.deserializeUrlParameters(urlParameters)); }); var6 = new LinkedList<>( EventUtil.collectBeforeNavigationListeners(var10)); var7 = executeBeforeNavigation( var12, var6); switch (var7) { case REROUTED: return reroute(var1, var12); case FINISHED: break; case POSTPONED: // It is not valid here, so fall through to default default: throw new IllegalStateException( ""Unexpected transition outcome: "" + var7); } @SuppressWarnings(""unchecked"") List<RouterLayout> var14 = (List<RouterLayout>) (List<?>) var10 .subList(1, var10.size()); var2.getInternals().showRouteTarget(var1.getLocation(), var9, var14); RouterUtil.updatePageTitle(var1, var9); LocationChangeEvent var15 = RouterUtil.createEvent(var1, var10); if (var15.getStatusCode() == HttpServletResponse.SC_OK) { fireAfterNavigationListeners(var10, new AfterNavigationEvent(var15)); } if (var9 instanceof RouteNotFoundError) { var15.setStatusCode(HttpServletResponse.SC_NOT_FOUND); } return var15.getStatusCode(); } "	0	0	0	0	1	0
protected void Func1(Account var1, Stack var2, List<ServiceMetaData> var3, Map<Long, Service> var4, Service var5, List<String> var6, String var7) { boolean var8 = var7 .equalsIgnoreCase(ServiceConstants.PRIMARY_LAUNCH_CONFIG_NAME); String var9 = var8 ? var5.getName() : var7; List<String> var10 = new ArrayList<>(); if (var8) { getSidekicksInfo(var5, var10, var6); } LBConfigMetadataStyle var11 = lbInfoDao.generateLBConfigMetadataStyle(var5); Object var12 = null; if (var5.getKind().equalsIgnoreCase(ServiceConstants.KIND_EXTERNAL_SERVICE)) { var12 = DataAccessor.field(var5, InstanceConstants.FIELD_HEALTH_CHECK, Object.class); } else { var12 = ServiceDiscoveryUtil.getLaunchConfigObject(var5, var7, InstanceConstants.FIELD_HEALTH_CHECK); } InstanceHealthCheck var13 = null; if (var12 != null) { var13 = jsonMapper.convertValue(var12, InstanceHealthCheck.class); } ServiceMetaData var14 = new ServiceMetaData(var5, var9, var2, var10, var13, var11); var3.add(var14); } 	0	0	1	0	1	0
"private static boolean Func1(String var1, AttributeSet var2, Set<Component> var3, Boolean var4) { if (var1.isEmpty()) return false; for (Component var5 : var3) { if (!var5.getAttributeSet().equals(var2)) { String var6 = (var5.getAttributeSet().containsAttribute(StdAttr.LABEL)) ? var5.getAttributeSet().getValue(StdAttr.LABEL) : """"; if (var6.toUpperCase().equals(var1.toUpperCase())) { if (var4) JOptionPane.showMessageDialog(null, ""\""""+var1+""\"" : ""+Strings.get(""UsedLabelNameError"")); return true; } } } return false; } "	0	0	0	0	1	0
"private void Func1(DetonationPdu var1) { short var2 = var1.getExerciseID(); Vector3Float var3 = var1.getLocationInEntityCoordinates(); double[] var4 = new double[] {var3.getX(), var3.getY(), var3.getZ()}; @SuppressWarnings(""unused"") double[] var5 = CoordinateConversions.xyzToLatLonDegrees(var4); Vector3Double var6 = var1.getLocationInWorldCoordinates(); double[] var7 = new double[] {var6.getX(), var6.getY(), var6.getZ()}; double[] var8 = CoordinateConversions.xyzToLatLonDegrees(var7); long var9 = var1.getTimestamp(); int var10 = var1.getFiringEntityID().getEntity(); double[] var11 = var8; String var12 = nameFor(var10); Iterator<IDISDetonationListener> var13 = _detonationListeners.iterator(); while (var13.hasNext()) { IDISDetonationListener var14 = (IDISDetonationListener) var13.next(); var14.add(var9, var2, var10, var12, var11[0], var11[1], var11[2]); } } "	1	1	1	1	0	0
"private boolean Func1(FieldDeclaration var1, List<ErroneousIssue> var2) { final TagCheckingVisitor var3 = new TagCheckingVisitor(); final Expression var4 = var1.getAstField().getBitfield().get(); var4.accept(var3, null); if (var3.errorFlag) { return true; } final ConstantValue var5 = FinalAnalyzer.this.interpreter.evaluate(var4); checkState(var5.getType().getType() == ConstantType.Type.SIGNED_INTEGER || var5.getType().getType() == ConstantType.Type.UNSIGNED_INTEGER, ""var6 of a bit-field has not evaluated to an integer constant""); final BigInteger var6 = ((IntegerConstantValue<?>) var5).getValue(); final int var7 = 8 * new UniversalTypeLayoutCalculator(abi, var1.getType().get()) .calculate() .getSize(); if (var6.signum() < 0) { var2.add(InvalidBitFieldDeclarationError.negativeWidth(var1.getName(), var6)); return true; } else if (var6.compareTo(BigInteger.valueOf(var7)) > 0) { var2.add(InvalidBitFieldDeclarationError.tooLargeWidth(var1.getName(), var6, var1.getType().get())); return true; } else { return false; } } "	0	0	0	0	1	0
"public String Func1(PersonWord[] var1) { org.var2.JSONObject var2 = new JSONObject(); try { var2.put(""personid"", this.personid); var2.put(""name"", this.name); var2.put(""age"", this.age); var2.put(""gender"", this.gender); var2.put(""occupation"", this.occupation); var2.put(""education"", this.education); var2.put(""firstLanguage"", this.firstLanguage); var2.put(""secondLanguage"", this.secondLanguage); var2.put(""thirdLanguage"", this.thirdLanguage); var2.put(""fourthLanguage"", this.fourthLanguage); var2.put(""livesInMunicipality"", this.livesInMunicipality); var2.put(""livesInDistrict"", this.livesInDistrict); var2.put(""livesInVillage"", this.livesInVillage); var2.put(""livedWholeLife"", this.livedWholeLife); var2.put(""livedInYears"", this.livedInYears); var2.put(""bornMunicipality"", this.bornMunicipality); var2.put(""bornDistrict"", this.bornDistrict); var2.put(""bornVillage"", this.bornVillage); JSONArray var3 = new JSONArray(); for (int var4=0;var4<var1.length;var4++) { if (var1[var4].word != null || var1[var4].audiofilename != null) { JSONObject var5 = new JSONObject(); var5.put(""wordid"", var1[var4].itemid); if (var1[var4].word != null) { var5.put(""word"", var1[var4].word); } if (var1[var4].audiofilename != null) { var5.put(""filename"", var1[var4].audiofilename); } var3.put(var5); } } var2.put(""var1"", var3); return var2.toString(); } catch (JSONException jsonE) { return jsonE.toString(); } } "	1	0	0	1	0	0
"@Test public void Func1() throws InterruptedException, IOException { ByteArrayOutputStream var1 = new ByteArrayOutputStream(); DockerClientBuilder var2 = new DockerClientBuilder(new String[]{""cat"", ""/etc/os-release""}) .withStdOutputStream(var1) .withImage(SOME_BASE_IMAGE) .withContainerName(NAME_UNDER_TEST); var2.startContainer(); String var3 = var1.toString(StandardCharsets.UTF_8.name()); logger.info(var3); final Properties var4 = new Properties(); var4.load(new StringReader(var3)); assertEquals(""\""Ubuntu\"""", var4.getProperty(""NAME"")); assertEquals(""\""Ubuntu 16.04.1 LTS\"""", var4.getProperty(""PRETTY_NAME"")); assertEquals(""debian"", var4.getProperty(""ID_LIKE"")); } "	0	0	0	0	1	0
@Override public StormTopology Func1(Config var1, StormEnvironment var2) { TopologyCheckAppConfig var3 = TopologyCheckAppConfig.newInstance(var1); String var4 = TopologyCheckAppConfig.TOPOLOGY_DATA_FETCH_SPOUT_NAME; String var5 = TopologyCheckAppConfig.SYSTEM_DATA_FETCH_SPOUT_NAME; String var6 = TopologyCheckAppConfig.SYSTEM_ENTITY_PERSIST_BOLT_NAME; String var7 = TopologyCheckAppConfig.TOPOLOGY_ENTITY_PERSIST_BOLT_NAME; String var8 = TopologyCheckAppConfig.PARSE_BOLT_NAME; String var9 = TopologyCheckAppConfig.SINK_BOLT_NAME; TopologyBuilder var10 = new TopologyBuilder(); var10.setSpout( var4, new TopologyCheckAppSpout(var3), var3.dataExtractorConfig.numDataFetcherSpout ).setNumTasks(var3.dataExtractorConfig.numDataFetcherSpout); var10.setBolt( var7, new TopologyDataPersistBolt(var3), var3.dataExtractorConfig.numEntityPersistBolt ).setNumTasks(var3.dataExtractorConfig.numEntityPersistBolt).shuffleGrouping(var4); var10.setBolt( var8, new HealthCheckParseBolt(), var3.dataExtractorConfig.numEntityPersistBolt ).setNumTasks(var3.dataExtractorConfig.numEntityPersistBolt).shuffleGrouping(var7); StormStreamSink<?> var11 = var2.getStreamSink(TOPOLOGY_HEALTH_CHECK_STREAM, var1); var10.setBolt( var9, var11, var3.dataExtractorConfig.numKafkaSinkBolt ).setNumTasks(var3.dataExtractorConfig.numKafkaSinkBolt).shuffleGrouping(var8); if (var3.systemConfig.systemInstanceEnable) { var10.setSpout( var5, new KafkaSpoutProvider(SYSTEM_COLLECTOR_CONFIG_PREFIX).getSpout(var1), var3.dataExtractorConfig.numDataFetcherSpout ).setNumTasks(var3.dataExtractorConfig.numDataFetcherSpout); var10.setBolt( var6, new SystemCheckPersistBolt(var3), var3.dataExtractorConfig.numEntityPersistBolt ).setNumTasks(var3.dataExtractorConfig.numEntityPersistBolt).shuffleGrouping(var5); } return var10.createTopology(); } 	0	0	1	0	1	0
"@POST @Path(""/var6/id/{id:[0-9][0-9]*}/var7/id/{var2}/assignedReviewWork"") @ApiOperation(value = ""Find assigned review work for a map var6."", notes = ""Gets a list of search var16 of assigned review work for the specified parameters."", response = SearchResultList.class) @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML }) public SearchResultList Func1( @ApiParam(value = ""Map var6 id, e.g. 7"", required = true) @PathParam(""id"") Long var1, @ApiParam(value = ""User id, e.g. 2"", required = true) @PathParam(""var2"") String var2, @ApiParam(value = ""Query, e.g. 'heart attack'"", required = true) @QueryParam(""var3"") String var3, @ApiParam(value = ""Paging/filtering/sorting parameter, in JSON or XML POST data"", required = true) PfsParameterJpa var4, @ApiParam(value = ""Authorization token"", required = true) @HeaderParam(""Authorization"") String var5) throws Exception { Logger.getLogger(WorkflowServiceRest.class) .info(""RESTful call (Workflow): /var6/id/"" + var1.toString() + ""/var7/id/"" + var2 + ""/assignedReviewWork "" + var3); String var6 = """"; String var7 = null; final WorkflowService var8 = new WorkflowServiceJpa(); try { var7 = authorizeProject(var1, var5, MapUserRole.LEAD, ""find assigned review work "", securityService); final MapProject var9 = var8.getMapProject(var1); var6 = var9.getName(); final MapUser var10 = var8.getMapUser(var2); var7 = var10.getUserName(); PfsParameter var11 = new PfsParameterJpa(); var11.setSortField(var4.getSortField()); var11.setQueryRestriction(var4.getQueryRestriction()); WorkflowPathHandler var12 = new WorkflowFixErrorPathHandler(); SearchResultList var13 = var12.findAssignedWork(var9, var10, MapUserRole.LEAD, var3, var11, var8); if (var9.getWorkflowType().equals(WorkflowType.REVIEW_PROJECT)) { SearchResultList var14 = var8.findAssignedWork( var9, var10, MapUserRole.LEAD, var3, var4); var13.addSearchResults(var14); } int[] var15 = new int[1]; var11 = new PfsParameterJpa(var4); var11.setQueryRestriction(""""); var11.setSortField(""""); List<SearchResultJpa> var16 = new ArrayList<>(); for (SearchResult var17 : var13.getSearchResults()) { var16.add((SearchResultJpa) var17); } var16 = var8.applyPfsToList(var16, SearchResultJpa.class, var15, var11); var13.setSearchResults(new ArrayList<SearchResult>()); for (SearchResult var17 : var16) { var13.addSearchResult(var17); } return var13; } catch (Exception e) { handleException(e, ""trying to find assigned review work"", var7, var6, """"); return null; } finally { var8.close(); securityService.close(); } } "	0	0	0	0	0	1
"public static Order.OrderType Func1(String var1) { return var1.equals(""buy"") ? Order.OrderType.ASK : Order.OrderType.BID; } "	0	0	1	0	0	0
"@Override public Response Func1(Chain var1) throws IOException { Request var2 = var1.var2(); Response var3 = var1.proceed(var2); if (var3.code() == HttpURLConnection.HTTP_UNAUTHORIZED) { OpengurApp var4 = OpengurApp.getInstance(); if (var4.getUser() != null) { LogUtil.v(TAG, ""Token is no longer valid""); mIsAuthenticated.set(false); synchronized (mLock) { if (!mIsAuthenticated.get()) { String var5 = refreshToken(var4); if (!TextUtils.isEmpty(var5)) { mIsAuthenticated.set(true); Request var6 = var2.newBuilder() .removeHeader(ApiClient.AUTHORIZATION_HEADER) .addHeader(ApiClient.AUTHORIZATION_HEADER, ""Bearer "" + var5) .build(); FileUtil.closeStream(var3.body()); return var1.proceed(var6); } mIsAuthenticated.set(false); } } } else { LogUtil.w(TAG, ""Received unauthorized status from API but no user is present... wat?""); } } return var3; } "	0	0	0	0	1	0
@Override public void Func1(String var1, Object var2, double var3) { Func1(getColumnStore().getColumn(var1), var2, var3); } 	0	0	0	0	1	0
@Override public Object Func1(String var1, double var2) { return Func1(getColumnStore().getColumn(var1), var2); } 	0	0	0	0	1	0
@Override public Object Func1(String var1, GraphView var2) { return Func1(getColumnStore().getColumn(var1), var2); } 	0	0	0	0	1	0
@Override public Object Func1(String var1) { return Func1(getColumnStore().getColumn(var1)); } 	0	0	0	0	1	0
@Override public boolean Func1(MenuItem var1) { int var2 = var1.getItemId(); if (var2 == ADD_GROUP_ID) { Intent var3 = new Intent(getActivity(), NewGroupActivity.class); startActivity(var3); } return true; } 	0	0	0	0	1	0
public FirebaseSyncRequester<T> Func1() { try { countDownLatch.await(); } catch (InterruptedException e) { e.printStackTrace(); } return this; } 	0	0	1	1	0	0
private void Func1(WalletDataContext var1, DNA.Wallets.Coin[] var2, DNA.Wallets.Coin[] var3, DNA.Wallets.Coin[] var4) { var1.insert(Arrays.stream(var2).map(var5 -> { Coin var6 = new Coin(); var6.txid = var5.input.prevHash.toArray(); var6.index = Short.toUnsignedInt(var5.input.prevIndex); var6.assetId = var5.assetId.toArray(); var6.value = var5.value.getData(); var6.scriptHash = var5.scriptHash.toArray(); var6.state = CoinState.Unspent.ordinal(); return var6; }).toArray(Coin[]::new)); var1.update(Arrays.stream(var3).map(var7 -> { Coin var8 = new Coin(); var8.txid = var7.input.prevHash.toArray(); var8.index = Short.toUnsignedInt(var7.input.prevIndex); var8.state = var7.getState().ordinal(); return var8; }).toArray(Coin[]::new)); var1.delete(Arrays.stream(var4).map(var9 -> { Coin var10 = new Coin(); var10.txid = var9.input.prevHash.toArray(); var10.index = Short.toUnsignedInt(var9.input.prevIndex); return var10; }).toArray(Coin[]::new)); } 	0	0	1	0	1	0
"public static void Func1() { JSONObject var1 = PlatformFeaturesService.loadPlatformFeatures(); if (var1 == null) { AppLogger.logMessage(""Error with loading platform feature. Scenarios could not be loaded...""); return; } AppLogger.logMessage(""\nSending request to CK server to obtain available collaborative experiment scenarios for your mobile device ...\n\n""); JSONObject var2 = new JSONObject(); try { String var3 = AppConfigService.getRemoteServerURL(); if (var3 == null) { AppLogger.logMessage(""\n Error we could not load scenarios from Collective Knowledge server: it's not reachible ...\n\n""); return; } var2.put(""remote_server_url"", var3); var2.put(""action"", ""get""); var2.put(""module_uoa"", ""experiment.scenario.mobile""); var2.put(""email"", AppConfigService.getEmail()); var2.put(""platform_features"", var1); var2.put(""out"", ""json""); } catch (JSONException e) { AppLogger.logMessage(""\nError with JSONObject ...\n\n""); return; } JSONObject var4; try { var4 = openme.remote_access(var2); } catch (JSONException e) { AppLogger.logMessage(""\nError calling OpenME interface ("" + e.getMessage() + "") ...\n\n""); return; } if (validateReturnCode(var4)) { return; } RecognitionScenarioService.saveScenariosJSONObjectToFile(var4); RecognitionScenarioService.reloadRecognitionScenariosFromFile(); AppConfigService.updateState(AppConfigService.AppConfig.State.READY); AppLogger.logMessage(""Finished loading shared scenarios for crowdsourcing from server!""); } "	0	0	0	0	1	0
"private void Func1(IProject var1) { EclipseRequestManager var2 = PluginManager.getInstance().getRequestManager(); MetadataManager var3 = PluginManager.getInstance().getMetadataManager(); List<FileMetadata> var4 = var3.getProjectMetadata(var1.getFullPath().toString()).getFiles(); if (var4 == null) { return; } for (FileMetadata var5 : var4) { String var6 =  Paths.get(var5.getRelativePath(), var5.getFilename()).normalize().toString(); for (String var7 : ignoredFiles) { if (var6.startsWith(var7) || var6.equals(var7)) { System.out.println(String.format(""Cleaning up %s from server"", var6)); var2.deleteFile(var5.getFileID()); } } } } "	0	0	0	0	1	0
public synchronized static SSLEngine Func1() { SSLEngine var1 = SSLFactory.getInstance().sslContext().createSSLEngine(); var1.setUseClientMode(true); return var1; } 	0	0	1	0	0	0
private void Func1(Disposable var1) { Flowable.interval(30, TimeUnit.MILLISECONDS) .takeWhile(x -> !var1.isDisposed()).blockingSubscribe(); } 	0	0	1	1	0	0
"private void Func1(Throwable var1) { getView().showMessage(""Error: "" + var1.getMessage()); } "	0	0	0	0	1	0
@Test public void Func1() { presenter.detach(); assertThat(presenter.getView()).isNull(); } 	0	0	0	0	1	0
"@EventHandler public void Func1(FMLInitializationEvent var1) { proxy.Func1(); NetworkRegistry.INSTANCE.registerGuiHandler(this, guiHandler); logger.info(""Uncrafting Table has been correctly initialized!""); } "	0	0	0	0	1	0
private boolean Func1(Object[] var1) { for ( int var2 = 0; var2 < naturalIdTypes.length; var2++ ) { if ( ! naturalIdTypes[var2].isEqual( values[var2], var1[var2], persister.getFactory() ) ) { return false; } } return true; } 	0	0	0	0	1	0
@NotNull private static List<String> Func1(@NotNull JsonObject var1, @NotNull String var2) { JsonArray var3 = var1.getAsJsonArray(var2); if (var3 != null) { List<String> var4 = new ArrayList<>(); var3.forEach(element -> var4.add(element.getAsString())); return var4; } return Collections.emptyList(); } 	0	0	1	0	1	0
@Override public List<Treasure> Func1(GeoLocation var1, double var2) { var2 = var2 / 6378137; // earth var2 in meters return dataBaseSupervisor.getTreasuresNearLocation(var1.getLon(), var1.getLat(), var2); } 	0	0	0	0	1	0
"@Override public void Func1(HttpServletRequest var1, HttpServletResponse var2) { log.info(""*******************************************""); CodeHolder var3 = CodeHolder.getInstance(); var3.addCodeToMap(var1.getSession().getId(), var1.getParameter(""code""), var1.getParameter(""error"")); } "	0	0	0	0	1	0
"public boolean Func1(){ if (collectionTitle.getText().trim() == null || collectionTitle.getText().trim().equalsIgnoreCase(i18n.GL3367())){ lblErrorMessage.setText(""collection"".equalsIgnoreCase(type)?""Please Enter Collection Title"":""Please Enter Assessment Title""); return false; } boolean var1 = StringUtil.checkItContainesURL(collectionTitle.getText()); if(var1){ lblErrorMessage.setVisible(true); lblErrorMessage.setText(i18n.GL0323()); return false; }else{ lblErrorMessage.setVisible(false); return true; } } "	1	0	1	1	1	0
@Test public void Func1() throws Exception { final SideEffect1<CoverageResult> var1 = new SideEffect1<CoverageResult>() { public void Func2(final CoverageResult var2) { } }; final CoverageOptions var3 = new CoverageOptions(coverOnlyTestees(), new JUnitCompatibleConfiguration(new TestGroupConfig()), true, -1); final JarCreatingJarFinder var4 = new JarCreatingJarFinder(); final LaunchOptions var5 = new LaunchOptions(var4); final SocketFinder var6 = new SocketFinder(); final CoverageProcess var7 = new CoverageProcess(ProcessArgs .withClassPath(classPathWithoutJUnit()).andLaunchOptions(var5), var3, var6.getNextAvailableServerSocket(), Arrays.asList(TestsForMultiBlockCoverage.class.getName()), var1); var7.start(); final ExitCode var8 = var7.waitToDie(); assertThat(var8, is(ExitCode.UNKNOWN_ERROR)); } 	0	0	0	0	1	0
"@Test @DirtiesContext public void Func1() throws InterruptedException { SupervisionListener var1 = EasyMock.createMock(SupervisionListener.class); SupervisionListener var2 = EasyMock.createMock(SupervisionListener.class); SupervisionEvent var3 = new SupervisionEventImpl(SupervisionEntity.EQUIPMENT, 10L, ""P_TEST"", SupervisionStatus.DOWN, new Timestamp(System.currentTimeMillis()), ""test var3""); var1.onSupervisionUpdate(var3); var2.onSupervisionUpdate(var3); EasyMock.replay(var1); EasyMock.replay(var2); jmsProxy.registerSupervisionListener(var1); jmsProxy.registerSupervisionListener(var2); String var4 = properties.getJms().getSupervisionTopic(); Assert.assertNotNull(var4); jmsSender.sendToTopic(((SupervisionEventImpl) var3).toJson(), var4); Thread.sleep(1000); EasyMock.verify(var1); EasyMock.verify(var2); } "	0	0	1	0	1	0
@Override public InfoWrapper[] Func1() { ChapterPackHandlerSupport.getChapterPackHandler(getActivity(), ChapterPackHandlerSupport.getOptions()[0]); EventRSSHandler var1= ChapterPackHandlerSupport.getEventHandler(getActivity()); return var1.getEventsFromRss(); } 	1	0	1	1	1	0
@Override public void Func1() { if (mIsForeground && mIsPaused) { mIsForeground = false; if (mBackAndForegroundListener != null) { mBackAndForegroundListener.wentBackground(); } } } 	0	0	1	0	1	0
public void Func1(Observer<ST> var1) { dataObservable.addObserver(var1); } 	0	0	0	0	1	0
public void Func1(Observer<ST> var1) { dataObservable.removeObserver(var1); } 	0	0	0	0	1	0
"private Map<String, String> Func1(){ Map<String, String> var1 = new HashMap<String, String>(); var1.put(""literalValue"", literalValue); return var1; } "	0	0	0	0	1	0
"public static void Func1( LineageNode var1, Map<Long, List<LineageNode>> var2, Map<String, List<LineageNode>> var3, Map<String, LineageNode> var4, List<LineageNode> var5, List<LineageEdge> var6, boolean var7) { List<LineageNode> var8 = var2.get(var1.exec_id); if (var8 != null) { for(LineageNode var9 : var8) { List<LineageNode> var10 = var3.get(var9.abstracted_path); LineageNode var11 = null; if (var10 != null) { for(LineageNode var12 : var10) { if (var12.partition_end != null) { if (var12.partition_end == var9.partition_end) { var11 = var12; break; } } else if(var12.job_end_unix_time == var9.job_end_unix_time) { var11 = var12; break; } } } if (var7) { if (var11 == null) { var11 = var4.get(var9.abstracted_path); if (var11 != null && var11.job_start_unix_time < var9.job_end_unix_time) { var11 = null; } } } if (var11 != null) { var9.id = var11.id; } else { var9.id = var5.size(); var5.add(var9); if (var10 == null) { var10 = new ArrayList<LineageNode>(); } var10.add(var9); var3.put(var9.abstracted_path, var10); } LineageEdge var13 = new LineageEdge(); var13.id = var6.size(); var13.source = var1.id; var13.var12 = var9.id; var13.label = var9.operation; var13.chain = """"; var6.add(var13); } } } "	0	0	1	0	0	0
public ItemStack Func1() { load(Minecraft.getMinecraft().player); return handler.getStackInSlot(0); } 	0	0	1	0	1	0
"public void Func1(Location var1) throws CoreException { try { Files.walkFileTree(var1.path, this); } catch (IOException e) { throw LangCore.createCoreException(""Error walking file tree"", e); } } "	0	0	0	0	1	0
protected boolean Func1(final Path var1) throws IOException { CheckDirectoryHasGoSourceFiles var2 = new CheckDirectoryHasGoSourceFiles(); Files.walkFileTree(var1, new HashSet<FileVisitOption>(), 1, var2); return var2.hasGoSourceFiles; } 	0	0	0	0	1	0
"public void Func1() throws JSONException { JSONArray var1=new JSONArray(); HashMap<String,String> var2=new HashMap<String,String>(); var2.put(""method"", ""getfolders""); var2.put(""api_key"", new Configuration().RAZUNA_KEY); try { var1=httputil.readResponseIntoJSONArray(httputil.callRazunaAPI(var2, config.Razuna_CREATE_FOLDER_METHOD)); } catch (ParseException | JSONException | IOException e) { e.printStackTrace(); } for(int var3=0;var3<var1.length();var3++) { JSONObject var4=var1.getJSONObject(var3); if(!var4.getString(""FOLDER_ID"").equalsIgnoreCase(""40E5FD89FF8945B5A94719E8613217D8"")) { HashMap<String,String> var5=new HashMap<String,String>(); var2.put(""method"", ""removefolder""); var2.put(""api_key"", new Configuration().RAZUNA_KEY); var2.put(""folder_id"", var4.getString(""FOLDER_ID"")); httputil.callRazunaAPI(var2, config.Razuna_CREATE_FOLDER_METHOD); } } } "	0	0	0	0	1	0
@Override public void Func1(String var1, String var2, ServiceContext var3) { if (subTiles.haveID(var2) && isInitializing == false) { AppBroadcaster.broadcast(var3.getContext(), AppBroadcaster.REQUEST_ELEVATION_UPDATE, toString()); } } 	0	0	0	0	1	0
public ByteArrayInputStream Func1() throws Exception { return new ByteArrayInputStream(file.getBytes()); } 	0	0	0	0	1	0
private static Path Func1() { URI var1; try { var1 = NativeLibraries.class.getProtectionDomain().getCodeSource().getLocation().toURI(); } catch (URISyntaxException e) { throw new AssertionError(e); } return Paths.get(var1); } 	0	0	1	0	1	0
public void Func1(){ this.faceValue = (int)(Math.random()*sides) + 1; } 	1	0	0	1	1	0
private void Func1() { mAdapter = new ShoppingListAdapter(this.getActivity(), mList); ListView var1 = (ListView) this.getView().findViewById(R.id.listViewShoppingList); var1.setAdapter(mAdapter); var1.setClickable(true); var1.deferNotifyDataSetChanged(); var1.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void Func2(AdapterView<?> var2, View var3, int var4, long var5) { ShoppingList var6 = (ShoppingList) mAdapter.getItem(var4); onClickShowButton(var6); } }); } 	0	0	0	0	1	0
"private Object Func1(Class<?> var1){ Object var2 = null; if(null != var1){ if(var1.isInterface() || Modifier.isAbstract(var1.getModifiers())){ String var3 = var1.getPackage().getName() + "".impl."" + var1.getSimpleName() + ""Impl""; return ReflectKit.newInstance(var3); } else { var2 = this.registBean(var1); } } return var2; } "	0	0	0	0	1	0
@Override public void Func1(Set<Class<?>> var1) { if(!CollectionKit.isEmpty(var1)){ for(Class<?> var2 : var1){ this.Func1(var2); } } } 	0	0	0	0	1	0
"@Override protected Representation Func1() throws ResourceException { try { File var1 = GroupE.getCSVData(getKursID(), getSemester()); FileRepresentation var2 = new FileRepresentation(var1, new MediaType(""text"", ""var1"")); var2.setAutoDeleting(true); var2.getDisposition().setType(Disposition.TYPE_ATTACHMENT); return var2; } catch (WebServiceException e) { throw e.toResourceException(); } } "	0	0	0	0	1	0
"public ArrayList<Word> Func1(String var1) { ArrayList<Word> var2 = new ArrayList<>(); String var3 = myContext.getSharedPreferences(""PrefsFile"",Context.MODE_PRIVATE).getString(""var3"",""Food""); this.openDataBase(); String var4 = ""SELECT IMGFILE, NAME, AUDIO, Category FROM 'Vocabulary' WHERE LANG = \"""" + var1 + ""\"" AND Category = \"""" + var3 + ""\""""; SQLiteDatabase var5 = this.getReadableDatabase(); Cursor var6 = var5.rawQuery(var4, null); if (var6.moveToFirst()) { do { Word var7 = new Word(var6.getString(0), var6.getString(1), var6.getString(2), var6.getString(3)); var2.add(var7); } while (var6.moveToNext()); } var6.close(); this.close(); return var2; } "	0	0	0	0	1	0
"@Test public void Func1() throws ImClientException, IOException { waitUntilRunningOrUncofiguredState(VM_DEFAULT_ID); getImApiClient().alterVm(getInfrastructureId(), VM_DEFAULT_ID, new Utf8File(RADL_JSON_ALTER_VM_FILE_PATH).read(), RestApiBodyContentType.RADL_JSON, false); ServiceResponse var1 = getImApiClient().getVmProperty( getInfrastructureId(), VM_DEFAULT_ID, VmProperties.CPU_COUNT, false); checkServiceResponse(var1); String var2 = var1.getResult(); if (var2 == null || var2.isEmpty() || !var2.equals(""2"")) { Assert.fail(); } } "	0	0	1	0	0	0
public ImOutputValues Func1(String var1) throws ImClientException { checkNullValue(var1); ImOutputValues var2 = null; try { ServiceResponse var3 = getImClient().get( PATH_INFRASTRUCTURES + PATH_SEPARATOR + var1 + PATH_SEPARATOR + REST_PARAMETER_INFRASTRUCTURE_OUTPUTS, MediaType.APPLICATION_JSON); var2 = new ObjectMapper().readValue(var3.getResult(), ImOutputValues.class); } catch (AuthorizationFileException | IOException exception) { ImJavaApiLogger.severe(InfrastructureManagerApiClient.class, exception); throw new ImClientException(ImMessages.EXCEPTION_INFRASTRUCTURE_OUTPUTS); } checkNullValue(var2); return var2; } 	0	0	1	0	1	0
private synchronized int Func1(String var1, String var2){ return from(wireMockServer.listAllStubMappings().getMappings()).filter(withAnyOf(var1, var2)).size(); } 	1	0	1	1	1	0
"@SuppressWarnings({""unchecked""}) @Override protected final void Func1(AnnotatedBindingBuilder<? super SecurityManager> var1) { bindWebSecurityManager(var1); } "	0	0	0	0	1	0
"@SubscribeEvent public void Func1(ModelBakeEvent var1) { try { IModel var2 = ModelLoaderRegistry.getModel(new ResourceLocation(CookingForBlockheads.MOD_ID, ""block/milkJarLiquid"")); MilkJarRenderer.modelMilkLiquid = var2.bake(var2.getDefaultState(), DefaultVertexFormats.BLOCK, ModelLoader.defaultTextureGetter()); } catch (Exception e) { e.printStackTrace(); } } "	0	0	0	0	1	0
@Override public boolean Func1(SensorConfig var1) { sensorConfigList.get(var1.getSensorNumber()-1).setFreq(var1.getFreq()); sensorConfigList.get(var1.getSensorNumber()-1).setSDLogging(var1.isSDLogging()); byte[] var2 = new byte[8]; var2[0] = (byte)sensorConfigList.get(0).getFreq(); var2[1] = (byte)((sensorConfigList.get(0).isSDLogging()) ? 1 : 0); var2[2] = (byte)sensorConfigList.get(1).getFreq(); var2[3] = (byte)((sensorConfigList.get(1).isSDLogging()) ? 1 : 0); var2[4] = (byte)sensorConfigList.get(2).getFreq(); var2[5] = (byte)((sensorConfigList.get(2).isSDLogging()) ? 1 : 0); var2[6] = (byte)sensorConfigList.get(3).getFreq(); var2[5] = (byte)((sensorConfigList.get(3).isSDLogging()) ? 1 : 0); return writeCharacteristic(BoardSensorConfigChar, var2); } 	0	0	1	1	0	0
@Override protected void Func1(Object var1) { if(!checkFileResult) Toast.makeText(getActivity(), getResources().getString(R.string.no_video_content), Toast.LENGTH_LONG).show(); } 	0	0	0	0	1	0
"private static void Func1(File var1, CharacterFacade var2) throws IOException, ExportException { final BufferedWriter var3 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream( var1), ""UTF-8"")); File var4 = getXMLTemplate(var2); var2.export(new ExportHandler(var4), var3); var3.close(); } "	0	0	1	1	0	0
"private static void Func1(File var1, PartyFacade var2) throws IOException, ExportException { final BufferedWriter var3 = new BufferedWriter(new OutputStreamWriter(new FileOutputStream( var1), ""UTF-8"")); for (CharacterFacade var4 : var2) { File var5 = getXMLTemplate(var4); var4.export(new ExportHandler(var5), var3); } var3.close(); } "	0	0	1	1	0	0
public void Func1(ReadOnlyTask var1) throws DuplicateTaskException { requireNonNull(var1); if (contains(var1)) { throw new DuplicateTaskException(); } if (eventClash(var1)) { throw new DuplicateTaskException(); } var1.resetTaskType(); internalList.Func1(new Task(var1)); } 	0	0	0	0	1	0
"public synchronized void Func1(final JobId var1, final long var2, final boolean var3) { runWithTransaction(new SessionWork<Void>() { @Override public Void Func2(Session var4) { long var5 = var1(var1); if (var3) { var4.createSQLQuery(""delete from TASK_DATA_DEPENDENCIES where JOB_ID = :var1"") .setParameter(""var1"", var5).executeUpdate(); var4.createSQLQuery(""delete from TASK_DATA_JOINED_BRANCHES where JOB_ID = :var1"") .setParameter(""var1"", var5).executeUpdate(); removeJobScripts(var4, var5); var4.createQuery(""delete from JobData where var5 = :var1"").setParameter(""var1"", var5) .executeUpdate(); } else { String var6 = ""update JobData set var2 = :var2 where var5 = :var1""; var4.createQuery(var6).setParameter(""var2"", var2).setParameter( ""var1"", var5).executeUpdate(); } return null; } }); } "	0	0	1	1	0	0
@Override public void Func1(Geometry var1, JsonGenerator var2, SerializerProvider var3) throws IOException, JsonProcessingException { if (var1 == null) { var2.writeNull(); } Coordinate[] var4 = var1.getCoordinates(); List<Coordinate> var5 = Arrays.asList(var4); var2.writeObject(PolylineEncoder.createEncodings(var5)); } 	0	0	0	0	1	0
public float Func1(PheromoneType var1, Colony var2) { synchronized(pheromoneQuantityCache) { if (this.pheromoneQuantityCache.get(new Pair<>(var1, var2)) != null) { return this.pheromoneQuantityCache.get(new Pair<>(var1, var2)); } for (final Perceivable var3 : this.perceptionList) { if (var3 instanceof PerceivablePheromone && ((PerceivablePheromone) var3).getType() == var1 && ((PerceivablePheromone) var3).getColony() == var2) { final float var4 = ((PerceivablePheromone) var3).getQty(); this.pheromoneQuantityCache.put(new Pair<>(var1, var2), var4); return var4; } } this.pheromoneQuantityCache.put(new Pair<>(var1, var2), (float) 0); return 0; } } 	0	0	1	1	0	0
public boolean Func1(Resident var1, FlagType var2, Object var3) { if (flagsContainer.get(var2).getValue() == var3) { return PlayerUtils.isOp(var1.getPlayer()); } return true; } 	0	0	1	0	1	0
@Override public Date Func1(String var1) { try { return dateFormats.get().parse(var1); } catch (ParseException e) { return null; } } 	0	0	1	0	0	0
"@Test public void Func1() { String var1 = ""x = {1,2,(3,4)}""; String var2 = getExceptionMessage(var1); assertTrue(var2 != null &&var2.contains(""Expected INTEGER but found INTEGER*INTEGER"")); } "	0	0	1	0	1	0
"public String Func1(CompletionProposal var1) { try { IType var2 = unit.getJavaProject().findType(SignatureUtil.stripSignatureToFQN(String.valueOf(var1.getDeclarationSignature()))); if (var2 != null) { String[] var3= Signature.getParameterTypes(String.valueOf(SignatureUtil.fix83600(var1.getSignature()))); for (int var4= 0; var4 < var3.length; var4++) { var3[var4]= getLowerBound(var3[var4]); } IMethod var5 = var2.getMethod(String.valueOf(var1.getName()), var3); if (var5 != null && var5.exists()) { String var6 = null; try { var6 = new SimpleTimeLimiter().callWithTimeout(() -> { Reader var7 = JavadocContentAccess.getHTMLContentReader(var5, true, true); return var7 == null? null:CharStreams.toString(var7); }, 500, TimeUnit.MILLISECONDS, true); } catch (UncheckedTimeoutException tooSlow) { } catch (Exception e) { JavaLanguageServerPlugin.logException(""Unable to read documentation"", e); } return var6; } } } catch (JavaModelException e) { JavaLanguageServerPlugin.logException(""Unable to resolve signaturehelp var6"", e); } return null; } "	0	0	0	0	1	0
"public int Func1() { int var1 = 0; if(hasYGutter()) { var1 = _test.getElementCount(Locator.css(""div.bottomplot svg g a.point"")); } return var1; } "	0	0	1	0	1	0
"@Override public QuerySchema Func1(String var1, HpccConnection var2,boolean var3,String var4) throws Exception { Set<Field> var5 = new LinkedHashSet<Field>(); QuerySchema var6 = null; try { if(var3){ var6 = getGenericQuerySchema(var1,var2,var4); }else{ var6 =  new QuerySchema(); var5 = getColumns(var1, var2, var3, var4); var6.setFields(var5); Set<String> var7 = getInputParameters(var1,var2,var3,var4); var6.setInputParams(getInputParamDistinctValues(var1, var7, var2, var3, var4)); } } catch (DOMException | SAXException | IOException | ParserConfigurationException e) { LOG.error(Constants.EXCEPTION, e); throw e; } if (LOG.isDebugEnabled()) { LOG.debug(""var6"" + var6); } return var6; } "	0	0	0	0	1	0
"@Override public void Func1 () { batch = new SpriteBatch(); img = new Texture(""core/assets/badlogic.jpg""); } "	0	0	1	0	1	0
private static void Func1(char[] var1) { ArrayList var2 = new ArrayList(); for (char var3 : SBOX) { var2.add(var3); } for (int var4 = 0; var4 < 16; var4++) { var1[var4] = (char) var2.indexOf(var1[var4]); } } 	0	0	1	0	1	0
"@Override public void Func1(String var1, IdentifiableMessage<String, UnitConfig, UnitConfig.Builder> var2, ProtoBufMessageMap<String, UnitConfig, UnitConfig.Builder> var3, ProtoBufRegistry<String, UnitConfig, UnitConfig.Builder> var4) throws CouldNotPerformException, EntryModification { UnitConfig.Builder var5 = var2.getMessage().toBuilder(); if (!var5.hasType()) { throw new NotAvailableException(""var5.type""); } boolean var6 = false; UnitTemplate var7 = getUnitTemplateByType(var5.getType()); for (ServiceTemplate var8 : var7.getServiceTemplateList()) { if (!unitConfigContainsServiceType(var5, var8)) { var5.addServiceConfig(ServiceConfig.newBuilder().setServiceTemplate(var8).setBindingConfig(BindingConfig.getDefaultInstance())); var6 = true; } } for (int var9 = 0; var9 < var5.getServiceConfigCount(); var9++) { if (!var7.getServiceTemplateList().contains(var5.getServiceConfig(var9).getServiceTemplate())) { var5.removeServiceConfig(var9); var9--; var6 = true; } } if (var6) { throw new EntryModification(var2.setMessage(var5), this); } } "	0	0	0	0	1	0
@Override public Boolean Func1(String var1, Boolean var2) throws Exception { return !var2 && var1 == null; } 	0	0	0	0	1	0
"public boolean Func1() { Process var1 = null; try { var1 = Runtime.getRuntime().exec(new String[] { ""/system/xbin/which"", ""su"" }); BufferedReader var2 = new BufferedReader(new InputStreamReader(var1.getInputStream())); return var2.readLine() != null; } catch (Throwable t) { return false; } finally { if (var1 != null) var1.destroy(); } } "	0	0	1	1	1	0
"private LineDataSet Func1() { LineDataSet var1 = new LineDataSet(null, ""Dynamic Data""); var1.setAxisDependency(AxisDependency.LEFT); var1.setColor(Color.RED); var1.setCircleColor(Color.BLACK); var1.setLineWidth(4f); var1.setCircleRadius(1f); var1.setFillAlpha(100); var1.setFillColor(Color.RED); var1.setHighLightColor(Color.rgb(244, 117, 117)); var1.setValueTextColor(Color.WHITE); var1.setValueTextSize(9f); var1.setDrawValues(false); return var1; } "	0	0	1	0	1	0
public Double Func1() { return temp; } 	0	0	1	1	0	0
public Double Func1() { return o3; } 	0	0	1	1	0	0
@Override public Conditional<Instruction> Func1 (FeatureExpr var1, ThreadInfo var2) { StackFrame var3 = var2.getModifiableTopFrame(); Conditional<Float> var4 = var3.popFloat(var1); var3.push(var1, mapr(var4, null)); return getNext(var1, var2); } 	0	0	0	0	1	0
private Integer Func1(int var1){ if(this.questionYESCountMap.isEmpty()) return -1; TreeMap<String, Integer> var2 = this.sortByValue(this.questionYESCountMap); this.maxYES = this.questionYESCountMap.get(var2.firstKey()); Integer var3=0; int var4=1; for(String var5: var2.navigableKeySet()){ Integer var6 = this.questionYESCountMap.get(var5); var4++; if(var4>var1) { var3 = new Integer(var6); break; } } if(var3>0) return var3; else return -1; } 	0	0	0	0	1	0
"protected HttpContext Func1(CloseableHttpClient var1) { HttpPost var2 = createHttpPost(); List<NameValuePair> var3 = getParametersForLogin(); try { UrlEncodedFormEntity var4 = new UrlEncodedFormEntity(var3, ""UTF-8""); var2.setEntity(var4); CloseableHttpResponse var5 = var1.execute(var2); int var6 = var5.getStatusLine().getStatusCode(); if (var6 != HttpStatus.SC_OK) { throw new ApacheCloudStackClientRequestRuntimeException(var6, getResponseAsString(var5), ""login""); } logger.debug(""Authentication response:[%s]"", getResponseAsString(var5)); return createHttpContextWithCookies(var5); } catch (IOException e) { throw new ApacheCloudStackClientRuntimeException(e); } } "	0	0	0	0	1	0
"@Override protected String Func1() { String var1 = null; if (model.isMinimizedView()) { var1 = model.getSwimlaneLabel(); var1 += ""\n"" + model.getName(); } return var1; } "	0	0	0	0	1	0
"public static Serializer Func1(Object var1) { Validate.notNull(""Handle cannot be null!""); initialize(); for (Serializer var2 : REGISTRY.values()) { if (var2.getHandle().equals(var1)) { return var2; } } return null; } "	0	0	1	0	1	0
"Context Func1(String var1, DebugSessionObserverImpl var2, BreakPointDTO[] var3) { ModeResolver.getInstance().setNonblockingEnabled(true); result = BTestUtils.compile(var1); bContext = new Context(result.getProgFile()); bContext.setAndInitDebugInfoHolder(new DebugInfoHolder()); ControlStackNew var4 = bContext.getControlStackNew(); String var5 = result.getProgFile().getEntryPkgName(); PackageInfo var6 = result.getProgFile().getPackageInfo(var5); if (var6 == null) { throw new RuntimeException(""cannot find main function '"" + result.getProgFile().getProgramFilePath() + ""'""); } FunctionInfo var7 = var6.getFunctionInfo(""main""); if (var7 == null) { throw new RuntimeException(""cannot find main function '"" + result.getProgFile().getProgramFilePath() + ""'""); } BTestUtils.invoke(result, var6.getInitFunctionInfo(), bContext); BStringArray var8 = new BStringArray(); var8.add(0, ""Hello""); var8.add(1, ""World""); WorkerInfo var9 = var7.getDefaultWorkerInfo(); org.ballerinalang.bre.bvm.StackFrame var10 = new org.ballerinalang.bre.bvm.StackFrame(var7, var9, -1, new int[0]); var10.getRefLocalVars()[0] = var8; var4.pushFrame(var10); bContext.setDebugEnabled(true); bContext.setStartIP(var9.getCodeAttributeInfo().getCodeAddrs()); bContext.getDebugInfoHolder().setDebugSessionObserver(var2); bContext.getDebugInfoHolder().addDebugPoints(new ArrayList<>(Arrays.asList(var3))); bContext.getDebugInfoHolder().setCurrentCommand(DebugInfoHolder.DebugCommand.RESUME); DebuggerExecutor var11 = new DebuggerExecutor(result.getProgFile(), bContext); (new Thread(var11)).start(); return bContext; } "	0	0	0	0	0	1
"private int Func1(int var1) { return new DateTime(2000, 12, 1, var1, 59, 0, DateTimeZone.forID(""Europe/Berlin"")).toLocalDateTime().getHourOfDay(); } "	0	0	0	0	1	0
public void Func1() { for (Node var1 : bubbles) { var1.getContainer().addAll(bfs(var1)); } for (int var2 = 0; var2 < bubblesListSize; var2++) { modifyContainer(bubbles.get(var2)); } removeUnnecessaryBubbles(bubbles); addContainerIdToNestedBubbles(bubbles); collapseSingleSegments(collection); collapseInnerSegments(); replaceInconsistentSegments(); linker = new BubbleLinker(bubbles); linker.addLinks(); } 	0	0	0	0	1	0
private NotificationsTracker Func1(ISonarLintProject var1) { return new NotificationsTracker(StoragePathManager.getNotificationsDir(var1.getName())); } 	0	0	0	1	0	0
public Date Func1() { return investigationDate; } 	0	0	0	0	1	0
"private void Func1(){ ImageView var1 = (ImageView) findViewById(R.id.var1); if (language == ""nl"") { var1.setImageResource(R.drawable.dutchflag); } else { var1.setImageResource(R.drawable.englishflag); } } "	0	0	1	0	1	0
@Override public Character Func1(int var1) { if (apps != null && apps.get(var1) != null && apps.get(var1).label.length() > 0) return apps.get(var1).label.charAt(0); else return '#'; } 	0	0	0	0	1	0
@Override public Column Func1( World var1, int var2, int var3 ) throws IOException { Column var4 = loadColumn( var1, AddressTools.getAddress( var1.provider.dimensionId, var2, 0, var3 ) ); if( var4 == null ) { return null; } for( int var5=0; var5<15; var5++ ) { CubicChunk var6 = loadCubicChunk( var1, var4, AddressTools.getAddress( var1.provider.dimensionId, var2, var5, var3 ) ); if( var6 == null ) { continue; } } return var4; } 	0	0	1	1	0	0
"public SearchResult Func1(EObject var1, String var2, PPImportedNamesAdapter var3) { if(var2 == null) throw new IllegalArgumentException(""var2 is null""); QualifiedName var4 = converter.toQualifiedName(var2); return findVariables(var1, var4, var3, Match.EQUALS); } "	0	0	0	0	1	0
"public SearchResult Func1(EObject var1, QualifiedName var2, PPImportedNamesAdapter var3) { if(var2 == null) throw new IllegalArgumentException(""var2 is null""); return findVariables(var1, var2, var3, Match.EQUALS); } "	0	0	0	0	1	0
@Override protected Collection<TListClient> Func1(ListSyncData<TListClient, TListServer> var1) { return var1.getClientLists(); } 	0	0	0	0	1	0
protected void Func1(){ try { if(!paused) { for(int var1=start_play;var1<notescnt;var1++) { final int var2 = m[var1].getNote(); final int var3 = m[var1].getChannel(); final int var4 = m[var1].getNote(); final int var5 = m[var1].getVelocity(); r = new Runnable() { public void Func2() { if(var2==9) { keyboard_.onNote(var4, var5); synthMidi_.onNoteOn(var3, var4, var5); opennotes.put(var4,var5); } else { keyboard_.onNote(var4, var5); synthMidi_.onNoteOff(var3, var4, var5); opennotes.remove(var4); for(int var1=start_play;var1<notescnt;var1++) { if(m[var1].getNote()==var4 && m[var1]!=null) { start_play=var1+1; break; } } } } }; handler.postDelayed(r, m[var1].getDur()); } } else if(paused) { long var6 = getCurrentTimeMilli(); handler.removeCallbacksAndMessages(null); Iterator var7 = opennotes.entrySet().iterator(); while (var7.hasNext()) { Map.Entry var8 = (Map.Entry)var7.next(); keyboard_.onNote((Integer)var8.getKey(), (Integer)var8.getValue()); synthMidi_.onNoteOff(0, (Integer)var8.getKey(), (Integer)var8.getValue()); var7.remove(); // avoids a ConcurrentModificationException } for(int var1=start_play;var1<notescnt;var1++) { m[var1].setDur(m[var1].getDur() - (int)(var6 - first_current_time)); } } else if(resumed) { first_current_time = getCurrentTimeMilli(); Iterator var7 = opennotes.entrySet().iterator(); while (var7.hasNext()) { Map.Entry var8 = (Map.Entry)var7.next(); keyboard_.onNote((Integer)var8.getKey(), (Integer)var8.getValue()); synthMidi_.onNoteOn(0, (Integer)var8.getKey(), (Integer)var8.getValue()); var7.remove(); // avoids a ConcurrentModificationException } clicked = true; resumed = false; Func1(); } } catch (Exception e) { e.printStackTrace(); } } 	0	0	0	0	1	0
@Override public ItemStack Func1(EntityEquipmentSlot var1) { return inventory[0]; } 	1	0	0	0	1	0
@Override public void Func1() { if (!worldObj.isRemote && !this.isDead) { if (blocks != null) { for (ItemStack[][] var1 : blocks) { for (ItemStack[] var2 : var1) for (ItemStack var3 : var2) { if (var3 != null) this.entityDropItem(var3, 0.5f); } } if (inventory[0] != null) this.entityDropItem(inventory[0], 1); } } super.Func1(); } 	0	0	0	0	1	0
"protected void Func1(CheckedTextView var1, int var2, ServerInfo.ResourceInfo var3) { var1.setPadding(10, 10, 10, 10); var1.setCompoundDrawablesWithIntrinsicBounds(var2, 0, var3.isReadOnly() ? R.drawable.ic_read_only : 0, 0); var1.setCompoundDrawablePadding(10); String var4 = var3.getTitle(); if (var4 == null)		// unnamed collection var4 = context.getString((var3.getType() == Type.ADDRESS_BOOK) ? R.string.setup_address_book : R.string.setup_calendar); var4 = ""<b>"" + var4 + ""</b>""; if (var3.isReadOnly()) var4 = var4 + "" ("" + context.getString(R.string.setup_read_only) + "")""; String var5 = var3.getDescription(); if (var5 == null) var5 = var3.getURL(); var1.setText(Html.fromHtml(var4 + ""<br/>"" + var5)); } "	0	0	0	0	1	0
public void Func1() { if (cmsProfileHandle != 0) { LCMS.cmsCloseProfile(cmsProfileHandle); cmsProfileHandle = 0; } } 	0	0	0	0	1	0
"public boolean Func1() { return counterName.contains(""discarded""); } "	0	0	0	0	1	0
"protected void Func1() { forceCft = false; mModel.getEnvironment().worldPush(); DecisionPath var1 = mModel.getSolver().getDecisionPath(); int var2 = 0; try { assert mModel.getSolver().getDecisionPath().size() == 1; mModel.getSolver().getObjectiveManager().postDynamicCut(); for (var2 = mDecisionPath.size() - 1; var2 >= 0; var2--) { var1.pushDecision(mDecisionPath.get(var2).duplicate()); var1.apply(); mModel.getSolver().propagate(); } assert false : ""SHOULD FAIL!""; } catch (ContradictionException cex) { if ((cex.v != null) || (cex.c != null)) { // contradiction on domain wipe out Explanation var3 = mExplanationEngine.Func1(cex); if (var3.getDecisions().isEmpty()) { isTerminated = true; mModel.getEnvironment().worldPop(); mModel.getSolver().getEngine().flush(); return; } related.clear(); related.or(var3.getDecisions()); var3.recycle(); unrelated.clear(); unrelated.or(related); unrelated.flip(0, var2); unrelated.clear(0); // clear ROOT decision while (var2 > 1) { mDecisionPath.remove(1); var2--; } } else { throw new UnsupportedOperationException(this.getClass().getName() + "".onContradiction incoherent state""); } } mModel.getEnvironment().worldPop(); var1.synchronize(); mModel.getSolver().getEngine().flush(); assert mModel.getSolver().getDecisionPath().size() == 1; nbFixedVariables = related.cardinality() - 1; nbCall = 0; increaseLimit(); } "	1	1	1	1	0	0
private void Func1() { if (mEditUserAccount != null) { String var1 = mEditUserAccount.getText().toString().trim(); if ((!var1.equals(mOriginalUserAccount)) && parseAccount(var1)) { settingsForDomain(mDomain, mPort); mOriginalUserAccount = var1; } } } 	0	0	1	0	1	0
"@Test public void Func1() { String[] var1 = { ""test"", ""testing"", ""tested"" }; Stream<String> var2 = StreamUtils.var2(var1); assertThat(var2, is(notNullValue(Stream.class))); List<String> var3 = var2.collect(Collectors.toList()); assertThat(var3, is(notNullValue(List.class))); assertThat(var3, is(equalTo(var1.length))); assertThat(var3.containsAll(Arrays.asList(var1)), is(true)); } "	0	0	1	0	1	0
@Test public void Func1() { Stream<Object> var1 = StreamUtils.var1(ArrayUtils.iterable()); assertThat(var1, is(notNullValue(Stream.class))); assertThat(var1.count(), is(equalTo(0))); } 	0	0	0	0	1	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_main); ImageButton var2 = (ImageButton) findViewById(R.id.favoriteButton); var2.setOnClickListener(this); Button var3 = (Button) findViewById(R.id.mapsbutton); var3.setOnClickListener(this); } 	0	0	1	1	1	0
@Override boolean Func1() { return mSensorOffset % 180 != 0; } 	0	0	0	0	1	0
private Optional<Attachment> Func1(Collection<Attachment> var1, String var2) { for (Attachment var3 : var1) { if (var3.getId().equals(var2)) { return Optional.of(var3); } } return Optional.absent(); } 	0	0	0	1	0	0
"@Test public void Func1() { { final Source<IncomingConnection, CompletionStage<ServerBinding>> var1 = Tcp.get(system).bind(""127.0.0.1"", 8889); } { final InetSocketAddress var2 = SocketUtil.temporaryServerAddress(""127.0.0.1"", false); final Source<IncomingConnection, CompletionStage<ServerBinding>> var1 = Tcp.get(system).bind(var2.getHostString(), var2.getPort()); var1.runForeach(connection -> { System.out.println(""New connection from: "" + connection.remoteAddress()); final Flow<ByteString, ByteString, NotUsed> var3 = Flow.of(ByteString.class) .via(Framing.delimiter(ByteString.fromString(""\n""), 256, FramingTruncation.DISALLOW)) .map(ByteString::utf8String) .map(s -> s + ""!!!\n"") .map(ByteString::fromString); connection.handleWith(var3, mat); }, mat); } } "	0	0	0	0	1	0
"private CharSequence Func1(final String var1, final Token var2, final String var3) { final StringBuilder var4 = new StringBuilder(); final String var5 = formatClassName(var1); final String var6 = formatPropertyName(var1); var4.append(String.format( ""\n"" + ""private:\n"" + var3 + ""    %1$s %2$s_;\n\n"" + ""public:\n"", var5, var6 )); var4.append(String.format( ""\n"" + var3 + ""    static const int %1$sId(void)\n"" + var3 + ""    {\n"" + var3 + ""        return %2$d;\n"" + var3 + ""    }\n\n"", var1, Long.valueOf(var2.id()) )); var4.append(String.format( ""\n"" + var3 + ""    %1$s &%2$s(void)\n"" + var3 + ""    {\n"" + var3 + ""        %2$s_.wrapForDecode(buffer_, positionPtr_, actingVersion_, bufferLength_);\n"" + var3 + ""        return %2$s_;\n"" + var3 + ""    }\n"", var5, var6 )); var4.append(String.format( ""\n"" + var3 + ""    %1$s &%2$sCount(const int count)\n"" + var3 + ""    {\n"" + var3 + ""        %2$s_.wrapForEncode(buffer_, count, positionPtr_, actingVersion_, bufferLength_);\n"" + var3 + ""        return %2$s_;\n"" + var3 + ""    }\n"", var5, var6 )); return var4; } "	0	0	1	0	0	0
"private CharSequence Func1(final List<Token> var1) { final StringBuilder var2 = new StringBuilder(); for (int var3 = 0, var4 = var1.var4(); var3 < var4; var3++) { final Token var5 = var1.get(var3); if (var5.signal() == Signal.BEGIN_VAR_DATA) { final String var6 = toUpperFirstChar(var5.name()); final String var7 = var1.get(var3 + 3).encoding().var7(); final Token var8 = var1.get(var3 + 2); final Integer var9 = Integer.valueOf(var8.var4()); final String var10 = cpp98TypeName(var8.encoding().primitiveType()); generateFieldMetaAttributeMethod(var2, var5, BASE_INDENT); generateVarDataDescriptors( var2, var5, var6, var7, var8, var9, var10); var2.append(String.format( ""    const char *%1$s(void)\n"" + ""    {\n"" + ""%2$s"" + ""         const char *fieldPtr = (buffer_ + position() + %3$d);\n"" + ""         position(position() + %3$d + *((%4$s *)(buffer_ + position())));\n"" + ""         return fieldPtr;\n"" + ""    }\n\n"", formatPropertyName(var6), generateTypeFieldNotPresentCondition(var5.version(), BASE_INDENT), var9, var10 )); var2.append(String.format( ""    int get%1$s(char *dst, const int length)\n"" + ""    {\n"" + ""%2$s"" + ""        sbe_uint64_t var9 = %3$d;\n"" + ""        sbe_uint64_t lengthPosition = position();\n"" + ""        position(lengthPosition + var9);\n"" + ""        sbe_int64_t dataLength = %4$s(*((%5$s *)(buffer_ + lengthPosition)));\n"" + ""        int bytesToCopy = (length < dataLength) ? length : dataLength;\n"" + ""        sbe_uint64_t pos = position();\n"" + ""        position(position() + (sbe_uint64_t)dataLength);\n"" + ""        ::memcpy(dst, buffer_ + pos, bytesToCopy);\n"" + ""        return bytesToCopy;\n"" + ""    }\n\n"", var6, generateArrayFieldNotPresentCondition(var5.version(), BASE_INDENT), var9, formatByteOrderEncoding(var8.encoding().byteOrder(), var8.encoding().primitiveType()), var10 )); var2.append(String.format( ""    int put%1$s(const char *src, const int length)\n"" + ""    {\n"" + ""        sbe_uint64_t var9 = %2$d;\n"" + ""        sbe_uint64_t lengthPosition = position();\n"" + ""        *((%3$s *)(buffer_ + lengthPosition)) = %4$s((%3$s)length);\n"" + ""        position(lengthPosition + var9);\n"" + ""        sbe_uint64_t pos = position();\n"" + ""        position(position() + (sbe_uint64_t)length);\n"" + ""        ::memcpy(buffer_ + pos, src, length);\n"" + ""        return length;\n"" + ""    }\n"", var6, var9, var10, formatByteOrderEncoding(var8.encoding().byteOrder(), var8.encoding().primitiveType()) )); } } return var2; } "	0	0	0	0	1	0
"private CharSequence Func1(final List<Token> var1) { final StringBuilder var2 = new StringBuilder(); for (final Token var3 : var1) { if (var3.signal() == Signal.CHOICE) { final String var4 = toUpperFirstChar(var3.name()); final String var5 = var3.encoding().constValue().toString(); final int var6 = (int)Math.pow(2, Integer.parseInt(var5)); var2.append(String.format(""        %s = %s,\n"", var4, Integer.valueOf(var6))); } } return var2; } "	1	0	1	0	1	0
"@DELETE @Path(""/types/{var1}"") public Response Func1(@PathParam(""var1"") int var1) { DaoUtils.getFirmwareTypeDao().delete(var1); return RestUtils.getResponse(Status.OK); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { Optional<Application> var1 = applicationRepository.findById(""grouped-app""); Assert.assertTrue(var1.isPresent()); Assert.assertNotNull(var1.get().getGroup()); Assert.assertEquals(""var1-group"", var1.get().getGroup()); } "	0	0	0	0	1	0
public static Printer Func1(String var1) { return printer.Func1(var1, DEFAULT_METHOD_COUNT); } 	0	0	0	0	1	0
"@Override public void Func1(ServletRequest var1, ServletResponse var2, FilterChain var3) throws IOException, ServletException { LOG.info(getClass().getSimpleName() + "" - "" + ""Filter""); HttpServletRequest var4 = (HttpServletRequest) var1; var4.setCharacterEncoding(""UTF-8""); String var5 = var4.getRequestURI().substring( var4.getContextPath().length()); if (var5.endsWith("".jsp"")) ((HttpServletResponse) var2).sendRedirect(""/home""); if (var5.equals(""/"") ||var5.startsWith(""/front/"") || var5.startsWith(""/app/"") || var5.startsWith(""/bower_components/"")) var3.Func1(var1, var2); else var1.getRequestDispatcher(""/front/"" + var5).forward(var1, var2); } "	0	0	0	0	0	1
"private String Func1(StaplerRequest var1) { return (String) var1.getSession().getAttribute(""access_token""); } "	0	0	0	1	0	0
"public void Func1(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException { HttpSession var3 = var1.getSession(); if (var3.getAttribute(""var4"") == null) { var1.getRequestDispatcher(""/"").forward(var1, var2); } int var4 = (Integer) var3.getAttribute(""var4""); SqlHandler var5 = new SqlHandler(); List<BookBean> var6 = var5.getActiveUserWishes(var4); var1.setAttribute(""var6"", var6); var1.getRequestDispatcher(""wishlist.jsp"").forward(var1, var2); } "	0	0	0	0	1	0
"public List<BarDrinkOrder> Func1(int var1) { try { return this.jdbcPostgres.query(""select drinkorder.id, blah, blah, blah from drinkorder left join drink on drink.id = drinkorder.drink_id where drinkorder.var1 = ? order by drinkorder.time_placed"", new Object[] {id}, new BarDrinkOrderMapper()); } catch(Exception e) { log.info(""No drink orders found for bar id {}"", var1); return new ArrayList<BarDrinkOrder>(); } } "	0	0	1	0	1	0
"public IndexerJobStatus Func1() { indexerJobStatus.setJobStatus(IndexerJobStatusEnum.Started); while(!shutdownRequested){ try{ if (Thread.currentThread().isInterrupted()){ Thread.currentThread().interrupt(); throw new InterruptedException( ""Cought interrupted event in IndexerJob for partition="" + currentPartition + "" - stopping""); } logger.info(""******* Starting a new batch of events from Kafka for partition {} ..."", currentPartition); indexerJobStatus.setJobStatus(IndexerJobStatusEnum.InProgress); processBatch(); Thread.sleep(consumerConfig.consumerSleepBetweenFetchsMs * 1000); logger.debug(""Completed a round of indexing into ES for partition {}"",currentPartition); } catch (IndexerESException e) { indexerJobStatus.setJobStatus(IndexerJobStatusEnum.Failed); stopClients(); break; } catch (InterruptedException e) { indexerJobStatus.setJobStatus(IndexerJobStatusEnum.Stopped); stopClients(); break; } catch (Exception e){ logger.error(""Exception when starting a new round of kafka Indexer job for partition {} - will try to re-init Kafka "" , currentPartition, e); try { this.reInitKafka(); } catch (Exception e2) { logger.error(""Exception when starting a new round of kafka Indexer job, partition {}, exiting: "" + e2.getMessage(), currentPartition); indexerJobStatus.setJobStatus(IndexerJobStatusEnum.Failed); stopClients(); break; } } } logger.warn(""******* Indexing job was stopped, indexerJobStatus={} - exiting"", indexerJobStatus); return indexerJobStatus; } "	0	0	1	0	1	0
"@Override public boolean Func1(Set<? extends TypeElement> var1, RoundEnvironment var2) { if (mHasBeenProcessed) { return true; } String var3 = processingEnv.getOptions().get(OPTION_PACKAGE_NAME); if (var3 == null || var3.isEmpty()) { var3 = DEFAULT_GENERATED_PACKAGE_NAME; } TypeUtils.initialize(processingEnv.getTypeUtils()); ElementUtils.initialize(processingEnv.getElementUtils()); DebugLog.log(""\nBeginning @UseStag annotation processing\n""); mHasBeenProcessed = true; Map<Element, List<VariableElement>> var4 = new HashMap<>(); Set<? extends Element> var5 = var2.getRootElements(); for (Element var6 : var5) { if (var6.getAnnotation(UseStag.class) != null) { List<? extends Element> var7 = var6.getEnclosedElements(); for (Element var8 : var7) { if (var8 instanceof VariableElement) { final VariableElement var9 = (VariableElement) var8; Element var10 = var9.getEnclosingElement(); if (!ElementUtils.isEnum(var10) && !TypeUtils.isAbstract(var10)) { Set<Modifier> var11 = var9.getModifiers(); TypeMirror var12 = var10.asType(); if (TypeUtils.isParameterizedType(var12) || TypeUtils.isConcreteType(var12)) { if(!var11.contains(Modifier.FINAL) || !var11.contains(Modifier.STATIC)) { if (!TypeUtils.isAbstract(var10)) { checkModifiers(var9, var11); mSupportedTypes.add(var12); } addToListMap(var4, var10, var9); } } } } else if (var8 instanceof TypeElement) { if (!ElementUtils.isEnum(var8)) { if(!TypeUtils.isAbstract(var8)) { mSupportedTypes.add(var8.asType()); } addToListMap(var4, var8, null); } } } } } for (Element var13 : var2.getElementsAnnotatedWith(UseStag.class)) { if (var13 instanceof VariableElement) { final VariableElement var9 = (VariableElement) var13; Element var14 = var9.getEnclosingElement(); TypeMirror var12 = var14.asType(); if (!ElementUtils.isEnum(var14)) { Set<Modifier> var11 = var9.getModifiers(); if (var11.contains(Modifier.FINAL)) { throw new RuntimeException(""Unable to access field \"""" + var9.getSimpleName().toString() + ""\"" in class "" + var9.getEnclosingElement().asType() + "", field must not be final.""); } else if (var11.contains(Modifier.PRIVATE)) { throw new RuntimeException(""Unable to access field \"""" + var9.getSimpleName().toString() + ""\"" in class "" + var9.getEnclosingElement().asType() + "", field must not be private.""); } if (TypeUtils.isParameterizedType(var12) || TypeUtils.isConcreteType(var12)) { if(!TypeUtils.isAbstract(var14)) { mSupportedTypes.add(var12); } addToListMap(var4, var14, var9); } } } else if (var13 instanceof TypeElement) { if (!ElementUtils.isEnum(var13)) { if(!TypeUtils.isAbstract(var13)) { mSupportedTypes.add(var13.asType()); } addToListMap(var4, var13, null); } } } Filer var15 = processingEnv.getFiler(); try { for (Entry<Element, List<VariableElement>> var16 : var4.entrySet()) { SupportedTypesModel.getInstance() .addSupportedType(new AnnotatedClass(var16.getKey(), var16.getValue())); } mSupportedTypes.addAll(KnownTypeAdapterFactoriesUtils.loadKnownTypes(processingEnv, var3)); StagGenerator var17 = new StagGenerator(var3, var15, mSupportedTypes); TypeTokenConstantsGenerator var18 = new TypeTokenConstantsGenerator(var15, var3); Set<Element> var19 = SupportedTypesModel.getInstance().getSupportedElements(); for (Element var13 : var19) { if ((TypeUtils.isConcreteType(var13) || TypeUtils.isParameterizedType(var13)) && !TypeUtils.isAbstract(var13)) { ClassInfo var20 = new ClassInfo(var13.asType()); TypeAdapterGenerator var21 = new TypeAdapterGenerator(var20); JavaFile var22 = JavaFile.builder(var20.getPackageName(), var21.getTypeAdapterSpec(var18, var17)).build(); FileGenUtils.writeToFile(var22, var15); } } var17.generateTypeAdapterFactory(var3); var18.generateTypeTokenConstants(); KnownTypeAdapterFactoriesUtils.writeKnownTypes(processingEnv, var3, mSupportedTypes); } catch (IOException e) { throw new RuntimeException(e); } DebugLog.log(""\nSuccessfully processed @UseStag var1\n""); return true; } "	1	0	1	0	0	0
"@Before public void Func1() { this.setUpBootstrapData(); firstOrder = addOrder(UUID.randomUUID(), facility, period1, ""orderCode"", UUID.randomUUID(), INITIAL_USER_ID, facility, facility, facility, OrderStatus.ORDERED, new BigDecimal(""1"" + "".29""), UUID.randomUUID()); secondOrder = addOrder(UUID.randomUUID(), facility2, period1, ""O2"", program1, INITIAL_USER_ID, facility2, facility2, facility1, OrderStatus.RECEIVED, new BigDecimal(100), UUID.randomUUID()); thirdOrder = addOrder(UUID.randomUUID(), facility2, period2, ""O3"", program2, INITIAL_USER_ID, facility2, facility2, facility1, OrderStatus.RECEIVED, new BigDecimal(200), UUID.randomUUID()); addOrderLineItem(secondOrder, product1, 35L, 50L); addOrderLineItem(secondOrder, product2, 10L, 15L); addOrderLineItem(thirdOrder, product1, 50L, 50L); addOrderLineItem(thirdOrder, product2, 5L, 10L); OrderLineItem var1 = addOrderLineItem(firstOrder, product1, 35L, 50L); List<OrderLineItem> var2 = new ArrayList<>(); var2.add(var1); firstOrder.setOrderLineItems(var2); firstOrder.setExternalId(secondOrder.getExternalId()); given(orderRepository.findAll()).willReturn( Lists.newArrayList(firstOrder, secondOrder, thirdOrder) ); given(orderRepository.save(any(Order.class))) .willAnswer(new SaveAnswer<Order>() { @Override void Func2(Order var3) { var3.setCreatedDate(LocalDateTime.now()); } }); } "	0	0	1	1	0	0
@Override public void Func1(Configuration var1, Environment var2) { final UserApi var3 = new UserApi(); final BookApi var4 = new BookApi(); final MailApi var5 = new MailApi(); final ProfileApi var6 = new ProfileApi(); var3.setDao(Constant.dbi.onDemand(UserDao.class), Constant.dbi.onDemand(BookDao.class)); var4.setDao(Constant.dbi.onDemand(BookDao.class), Constant.dbi.onDemand(UserDao.class)); var6.setDao(Constant.dbi.onDemand(ProfileDao.class), Constant.dbi.onDemand(BookDao.class)); var5.initMail(); var3.setMailApi(var5); var2.jersey().register(var3); var2.jersey().register(var4); var2.jersey().register(var5); var2.jersey().register(var6); } 	0	0	0	0	1	0
"@Override public synchronized void Func1(Subscriber<? super T> var1) { checkClosed(); Objects.requireNonNull(var1); SubscriptionImpl var2 = new SubscriptionImpl(var1); if (subscriptions.add(var2)) { ctx.runOnContext(v -> { try { var1.onSubscribe(var2); } catch (Throwable t) { var1.onError(t); } }); } else { throw new IllegalStateException(""1.10 Cannot Func1 multiple times with the same var1.""); } } "	0	0	0	0	1	0
"public static Scholarship Func1(Scholarship var1) { int var2 = var1.getiD(); Scholarship var3 = new Select().from(Scholarship.class).where(""var2 = ?"", var2).executeSingle(); if (var3 != null) { return var3; } else { Scholarship var4 = var1 ; var4.save(); return var4; } } "	0	0	0	0	1	0
"@HandlesEvent(""DataMapFields"") public Resolution Func1() { Map<String, String> var1 = new HashMap<>(); if (SecurityUtil.isAdminUser()) { LOG.log(Level.INFO, SecurityUtil.adminAuditLogMessage(getContext().getRequest())); List<FieldDefinition> var2 = new ArrayList<>(); try (InputStream in = uploadFile.getInputStream()) { var2 = service.getImportService().getMapField(fileFormat, in); } catch (IOException ex) { var1.put(""uploadFile"", ""Unable to read file: "" + uploadFile.getFileName() + "" Make sure the file in the proper format.""); } finally { try { uploadFile.delete(); } catch (IOException ex) { LOG.log(Level.WARNING, ""Unable to remove temp upload file."", ex); } } return streamResults(var2); } return new ErrorResolution(HttpServletResponse.SC_FORBIDDEN, ""Access denied""); } "	0	0	0	0	1	0
"@Override public String Func1() { return ""AlarmInfo{"" + ""level='"" + level + '\'' + "", name='"" + name + '\'' + "", title='"" + title + '\'' + "", message='"" + message + '\'' + "", addtionalInfo="" + constructMapContent(customFields) + '}'; } "	0	0	0	0	0	1
public String Func1() { return getStagingTableLocation() + getName(); } 	0	0	0	0	1	0
"private JsonObject Func1(CloseableHttpClient var1, String var2, File var3, String var4) throws ClientProtocolException, IOException{ String var5 = getBuildsURL() + ""?build_name="" + var4; HttpPost var6 = new HttpPost(var5); var6.addHeader(""accept"", ContentType.APPLICATION_JSON.getMimeType()); var6.addHeader(""Authorization"", var2); FileBody var7 = new FileBody(var3, ContentType.create(""application/zip"")); HttpEntity var8 = MultipartEntityBuilder.create() .addPart(var3.getName(), var7).build(); var6.setEntity(var8); JsonObject var9 = RestUtils.getGsonResponse(var1, var6); return var9; } "	0	0	0	0	1	0
@Override public boolean Func1(final MenuItem var1) { if (var1.getItemId() != android.R.id.home) { return super.Func1(var1); } final FragmentManager var2 = getSupportFragmentManager(); if (UiUtils.tryForeachFragment(var2, fragment -> fragment.onHomePressed(this), true)) { return true; } if (var2.getBackStackEntryCount() != 0) { var2.popBackStack(); return true; } return false; } 	0	0	0	0	1	0
"public IInterpreterProvider[] Func1(InterpreterType var1) { if (var1 != IInterpreterProviderFactory.InterpreterType.PYTHON) { return null; } Set<String> var2 = new HashSet<String>(); if (!PlatformUtils.isWindowsPlatform()) { var2.add(""/usr/bin""); var2.add(""/usr/local/bin""); final String[] var3 = searchPaths(var2, ""python""); if (var3.length > 0) { return AlreadyInstalledInterpreterProvider.create(""python"", var3); } } else { List<String> var4 = new ArrayList<String>(); try { Regor var5 = new Regor(); for (Key var6 : new Key[] { Regor.HKEY_LOCAL_MACHINE, Regor.HKEY_CURRENT_USER }) { Key var7 = var5.var10(var6, ""Software\\Python\\PythonCore"", Regor.KEY_READ); if (var7 != null) { try { @SuppressWarnings(""rawtypes"") List var8 = var5.listKeys(var7); for (Object var9 : var8) { Key var10 = var5.var10(var7, (String) var9 + ""\\InstallPath"", Regor.KEY_READ); if (var10 != null) { try { byte var11[] = var5.readValue(var10, """"); if (var11 != null) { String var12 = Regor.var12(var11); File var13 = new File(var12, ""python.exe""); if (var13.isFile()) { var4.add(var13.toString()); } } } finally { var5.closeKey(var10); } } } } finally { var5.closeKey(var7); } } } } catch (Throwable e) { Log.log(e); } if (var4.size() > 0) { return AlreadyInstalledInterpreterProvider.create(""python"", var4.toArray(new String[var4.size()])); } } return AlreadyInstalledInterpreterProvider.create(""python"", ""python""); } "	0	0	0	1	1	0
"protected Button Func1(Composite var1, int var2, String var3, boolean var4) { Button var5 = super.Func1(var1, var2, var3, var4); if (var2 == IDialogConstants.OK_ID) { okButton = var5; okButton.setText(Policy.bind(""MergeDialog.title"")); //$NON-NLS-1$ okButton.setEnabled(false); } return var5; } "	0	0	0	0	1	0
"public void Func1() { if (System.currentTimeMillis() - lastCronCheck >= CRON_CHECK_INTERVAL) { lastCronCheck = System.currentTimeMillis(); for (Entry<String, List<String>> var1 : scripts.get(""cron"").entrySet()) { List<String> var2 = new ArrayList<>(var1.getValue()); if (var2.size() < 2) continue; String var3 = var2.remove(0); if (!checkCron(var1.getKey(), var3)) continue; try { cronTimes.put(var1.getKey(), System.currentTimeMillis()); ScriptParser.run(var2, MinecraftServer.getServer()); break; } catch (CommandException | ScriptErrorException e) { if (e.getMessage() != null && !e.getMessage().isEmpty()) ChatOutputHandler.chatError(MinecraftServer.getServer(), e.getMessage()); } catch (ScriptException e) { LoggingHandler.felog.error(String.format(""Error in var1 \""%s\"": %s"", var1.getKey(), e.getMessage())); } } } } "	0	0	0	0	0	1
private GitHubApi Func1(GitHubApi[] var1, String var2) { GitHubApi var3 = null; for (GitHubApi var4 : var1) { if (var4.getName().equalsIgnoreCase(var2)) { var3 = var4; break; } } return var3; } 	0	0	1	0	1	0
@Override public Bitmap Func1(Bitmap var1) { Bitmap var2 = Bitmap.createBitmap(var1.getWidth(), var1.getHeight(), var1.getConfig()); RenderScript var3 = RenderScript.create(EditActivity.sContext); Allocation var4 = Allocation.createFromBitmap(var3, var1); Allocation var5 = Allocation.createTyped(var3, var4.getType()); ScriptC_PixelateFilter var6 = new ScriptC_PixelateFilter(var3); var6.set_gIn(var4); var6.set_gOut(var5); var6.set_gSquareSize(15); var6.invoke_filter(); var5.copyTo(var2); var3.destroy(); var4.destroy(); var5.destroy(); var6.destroy(); return var2; } 	0	0	0	0	1	0
"@Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { View var4 = var1.inflate(R.layout.fragment_add_offer, var2, false); var4.setOnTouchListener(new View.OnTouchListener() { @Override public boolean Func2(View var5, MotionEvent var6) { final InputMethodManager var7 = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE); var7.hideSoftInputFromWindow(getView().getWindowToken(), 0); return false; } }); final Spinner var8 = (Spinner)var4.findViewById(R.id.spinner_category); final Spinner var9 = (Spinner)var4.findViewById(R.id.spinner_condition); final EditText var10 = (EditText)var4.findViewById(R.id.edit_titleListing); final EditText var11 = (EditText)var4.findViewById(R.id.edit_description); final EditText var12 = (EditText)var4.findViewById(R.id.edit_price); final EditText var13 = (EditText)var4.findViewById(R.id.edit_zip); textCityName=(TextView)var4.findViewById(R.id.text_city); List<String> var14 = new ArrayList<>(); var14.add(Constants.Array_Category_Automobiles); var14.add(Constants.Array_Category_Books); var14.add(Constants.Array_Category_Laptops); var14.add(Constants.Array_Category_Furniture); var14.add(Constants.Array_Category_Rentals); List<String> var15 = new ArrayList<>(); var15.add(Constants.ITEM_TYPE_NEW); var15.add(Constants.ITEM_TYPE_USED); ArrayAdapter<String> var16 = new ArrayAdapter<>(this.getActivity(), android.R.layout.simple_spinner_item, var14); var16.setDropDownViewResource(android.R.layout.simple_dropdown_item_1line); var8.setAdapter(var16); ArrayAdapter<String> var17 = new ArrayAdapter<>(this.getActivity(), android.R.layout.simple_spinner_item, var15); var17.setDropDownViewResource(android.R.layout.simple_dropdown_item_1line); var9.setAdapter(var17); if (isOfferEditable){ var8.setSelection(categoryPosition); var9.setSelection(updateSpinnerCondition.equals(""New"") ? 0 : 1); var10.setText(updateEditTitle); var11.setText(updateEditDescription); var12.setText(updateEditPrice); var13.setText(updateEditZip); textCityName.setText(updateTextCityName); } Button var18 = (Button)var4.findViewById(R.id.button_next); var18.setOnClickListener(new View.OnClickListener() { String var19; @Override public void Func3(View var5) { var19 = getString(R.string.app_name); offerDTO = new OfferDTO(); offerDTO.setOfferTitle(var10.getText().toString().trim()); offerDTO.setOfferDescription(var11.getText().toString().trim()); offerDTO.setPrice(Double.parseDouble(var12.getText().toString().trim())); offerDTO.setZip(var13.getText().toString().trim()); offerDTO.setCategoryId(getCategoryId(var8.getSelectedItem().toString())); offerDTO.setCondition(var9.getSelectedItem().toString()); offerDTO.setOfferorName((String) ParseUser.getCurrentUser().get(""firstname"")); progress = new ProgressDialog(getActivity()); progress.setProgressStyle(ProgressDialog.STYLE_SPINNER); progress.setIndeterminate(true); progress.show(); DBAccessor.getInstance().getUpdatedCityForZip(var13.getText().toString().trim(), context); } }); return var4; } "	1	0	1	0	0	0
"public void Func1(ParseObject var1){ isOfferEditable=true; String var2 = (String)var1.get(""category_id""); updateSpinnerCategory = getCategoryName(var2); updateSpinnerCondition = (String)var1.get(""condition""); updateEditTitle = (String)var1.get(""offer_title""); updateEditDescription=(String)var1.get(""offer_description""); updateEditPrice=(String)var1.get(""price""); updateEditZip=(String)var1.get(""zipcode""); updateTextCityName=(String)var1.get(""city""); editableObject=var1; } "	0	0	0	0	1	0
"public static void Func1(String[] var1) throws Exception { DebugClient.disableReadTimeoutHandler(ReadTimeoutHandler.class); SpongeVanillaLauncher.Func1(new String[0]); List<URL> var2 = new ArrayList<>(Arrays.asList(Launch.classLoader.getURLs())); var2.removeIf(url -> url.getFile().contains(""serverSrc"")); URLClassLoader var3 = new DebugClientClassloader(var2.toArray(new URL[var2.size()])); Class<?> Func1 = Class.forName(""org.spongepowered.server.client.DebugClientLauncher"", false, var3); Func1.getMethod(""Func1"", String[].class).invoke(null, (Object) var1); } "	0	0	0	0	1	0
"public Set<AccessControlledResource.Priviledge> Func1(Object var1, AnnoResource var2, Auth var3) { Set<AccessControlledResource.Priviledge> var4 = EnumSet.allOf(Priviledge.class);; Object var5 = var2.getSource(); List<ControllerMethod> var6 = getMethods(var5.getClass()); if (var6.isEmpty()) { log.warn(""No ACL methods were found""); return null; } else { try { for (ControllerMethod var7 : var6) { addPrivsFromMethod(var7.method, var7.controller, var4, var1, var2, var3); } } catch (Exception e) { throw new RuntimeException(e); } } return var4; } "	0	0	1	0	1	0
public boolean Func1(String var1) { Account var2 = accountMap.get(var1); if (var2 == null) { return false; } var2.setState(State.CLOSED); return true; } 	0	0	0	0	1	0
@Test public void Func1() { assertEquals(1, CharacterConverter.values().length); } 	0	0	0	0	1	0
"@Override public boolean Func1() throws UnknownHostException, IOException, ConnectException{ try{ client = new Client(address, port); } catch (ConnectException e) { System.out.println(""Connection refused!""); return false; } logger.info(""Client trying to Func1...""); client.addListener(this); KVMessage var1 = client.getResponse(); if (var1 != null){ logger.info(""KVStore: received var1 ""+var1.getMsg()); connected = true; return true; } return false; } "	0	0	0	0	1	0
public final void Func1( Matcher<? extends Event> var1, Matcher<Integer> var2 ) { synchronized ( events ) { assertThat( events, (Matcher) var2( var1, var2 ) ); } } 	0	0	0	0	1	0
public static long Func1(JobRequest var1) { return var1.Func1() + var1.getBackoffOffset(); } 	0	0	0	0	1	0
public static String Func1( final ParserRuleContext var1, final TokenStream var2 ) { final StringBuilder var3 = new StringBuilder(); print(var3, var1, var2 ); return var3.toString(); } 	0	0	1	0	1	0
"@Override public void Func1(World var1, BlockPos var2, IBlockState var3, Entity var4) { if (!(var4 instanceof EntityPlayer) || (var4 instanceof FakePlayer)) { return; } TileEntity var5 = var1.getTileEntity(var2); if (var5 instanceof TileEntityDualVertical) { TileEntityDualVertical var6 = (TileEntityDualVertical) var5; if (var6.top) { TileEntity var7 = var1.getTileEntity(var2.down()); if (var7 instanceof TileEntityDualVertical) { this.Func1(var1, var2.down(), var3, var4); } } else { if (var6 instanceof TileEntityShellStorage) { TileEntityShellStorage var8 = (TileEntityShellStorage) var6; if (!var8.occupied && !var1.isRemote && !var8.syncing && var8.resyncPlayer <= -10) { double var9 = var4.posX - (var2.getX() + 0.5D); double var10 = var4.getEntityBoundingBox().minY - var2.getY(); double var11 = var4.posZ - (var2.getZ() + 0.5D); double var12 = (double) MathHelper.sqrt(var9 * var9 + var10 * var10 + var11 * var11); if (var12 < 0.3D && var8.isPowered()) { EntityPlayer var13 = (EntityPlayer)var4; if (iChunUtil.hasMorphMod() && MorphApi.getApiImpl().hasMorph(var13.getName(), Side.SERVER)) { var13.sendMessage(new TextComponentTranslation(""sync.isMorphed"")); } else { Sync.channel.sendTo(new PacketPlayerEnterStorage(var2), var13); var13.setLocationAndAngles(var2.getX() + 0.5D, var2.getY(), var2.getZ() + 0.5D, var8.face.getOpposite().getHorizontalAngle(), 0F); } var8.setPlayerName(var13.getName()); var8.occupied = true; notifyThisAndAbove(var3, EnumType.STORAGE, var2, var1, var6.top); } } } } } } "	0	0	0	0	1	0
"@Override public NBTTagCompound Func1(NBTTagCompound var1) { var1 = super.Func1(var1); var1.setBoolean(""top"", top); var1.setInteger(""face"", face.getHorizontalIndex()); var1.setBoolean(""vacating"", vacating); var1.setBoolean(""isHomeUnit"", isHomeUnit); var1.setString(""playerName"", canSavePlayer > 0 ? """" : playerName); var1.setString(""name"", name); var1.setTag(""playerNBT"", canSavePlayer > 0 ? new NBTTagCompound() : playerNBT); var1.setInteger(""rfIntake"", rfIntake); return var1; } "	0	0	0	0	1	0
"private void Func1(final Cookie var1, final HttpServletRequest var2) { final String var3 = var2.getContextPath(); var1.setPath(null == var3 ? ""/"" : var3); if (maxAge != null) { var1.setMaxAge(Integer.parseInt(maxAge)); } } "	0	0	0	1	0	0
@Override protected ItemReview.DAO Func1() { return new ItemReviewDAO(this); } 	0	0	1	1	0	0
@Override protected Item.DAO Func1() { return new ItemDAO(this); } 	0	0	1	1	0	0
"@Test public void Func1() throws Exception { String var1 = ""/fabric/registry/clusters/test""; ServiceMap var2 = new ServiceMap(); CuratorFramework var3 = mock(CuratorFramework.class); GatewayServiceTreeCache var4 = new GatewayServiceTreeCache(var3, var1, var2); String var5 = ""/fabric/registry/clusters/test/default""; var4.Func1(event(var5, CHILD_ADDED, data(""test"", ""container1"", ""service1"", ""service2""))); var4.Func1(event(var5, CHILD_ADDED, data(""test"", ""container2""))); assertEquals(1, var2.getServices(""default"").size()); var4.Func1(event(var5, CHILD_REMOVED, data(""test"", ""container1"", ""service1"", ""service2""))); var4.Func1(event(var5, CHILD_UPDATED, data(""test"", ""container2"", ""service1"", ""service2""))); var4.Func1(event(var5, CHILD_ADDED, data(""test"", ""container1""))); assertEquals(1, var2.getServices(""default"").size()); var4.Func1(event(var5, CHILD_REMOVED, data(""test"", ""container2"", ""service1"", ""service2""))); var4.Func1(event(var5, CHILD_UPDATED, data(""test"", ""container1"", ""service1"", ""service2""))); var4.Func1(event(var5, CHILD_ADDED, data(""test"", ""container2""))); assertEquals(1, var2.getServices(""default"").size()); var4.Func1(event(var5, CHILD_REMOVED, data(""test"", ""container2""))); var4.Func1(event(var5, CHILD_ADDED, data(""test"", ""container2""))); assertEquals(1, var2.getServices(""default"").size()); } "	0	0	0	0	1	0
public static void Func1(JMenu var1) { JMenuItem[] var2 = new JMenuItem[var1.getItemCount()]; for (int var3 = 0; var3 < var2.length; var3++) { var2[var3] = var1.getItem(var3); } setMenuMnemonics(var2); } 	0	0	0	1	0	0
public static void Func1(JPopupMenu var1) { ArrayList<JMenuItem> var2 = new ArrayList<JMenuItem>(); for (Component var3 : var1.getComponents()) { if (var3 instanceof JMenuItem) var2.add((JMenuItem)var3); } Func1(var2.toArray(new JMenuItem[var2.size()])); } 	0	0	1	1	0	0
public IBeanController Func1() { return beanService; } 	0	0	1	1	0	0
@Test public void Func1() { Level var1 = new Level(emptyPlayer, emptyUnit, new Grid<>(Arrays.asList( Cell.WALL, Cell.WALL, Cell.WALL, Cell.WALL, Cell.EMPTY, Cell.WALL, Cell.WALL, Cell.EMPTY, Cell.WALL, Cell.WALL, Cell.WALL, Cell.WALL), 3, 4)); CollisionComputer var2 = new CollisionComputer(var1); Player var3 = new Player(new Point(1, 1), null); var3.setMotion(new Point(0, 3 * GameConstants.TICKS_PER_SEC)); Point var4 = var2.findNextPosition(var3); assertEquals(new Point(1, 2), var4); } 	0	0	0	0	1	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_main); mFragmentManager = getSupportFragmentManager(); MeteoriteListFragment var2 = new MeteoriteListFragment(); mFragmentManager.beginTransaction() .add(R.id.fragment_container, var2) .commit(); } 	0	0	1	0	0	0
"@Override public String Func1(Activity var1) { SharedPreferences var2 = var1.getSharedPreferences(""com.example.talizorah.finalapp"", var1.MODE_PRIVATE); Loader var3 = new Loader(); var3.setActivity(var1); var3.execute(""https://api.privatbank.ua/p24api/infrastructure?json&atm&address=%D0%BF%D0%BE%D0%B1%D0%B5%D0%B4%D1%8B&city=%D0%9A%D0%BE%D0%BD%D1%81%D1%82%D0%B0%D0%BD%D1%82%D0%B8%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0"", prefsName); return var2.getString(prefsName, null); } "	0	0	0	0	1	0
public static String Func1(String var1) { for (String var2: AbilityModuleManager.abilities) { if (var2.equalsIgnoreCase(var1)) return var2; } return null; } 	0	0	0	0	1	0
"@Override public void Func1() { plugin = this; ProjectKorra.log = this.getLogger(); try { handler = new PKLogHandler(getDataFolder() + File.separator + ""ERROR.log""); log.getParent().setFilter(new LogFilter()); log.getParent().addHandler(handler); } catch (SecurityException | IOException e) { e.printStackTrace(); } new ConfigManager(this); new GeneralMethods(this); updater = new Updater(this, ""http://projectkorra.com/forum/forums/dev-builds.16/index.rss""); new Commands(this); new AbilityModuleManager(this); new MultiAbilityModuleManager(); new MultiAbilityManager(); new ComboModuleManager(); new ComboManager(); new ChiComboManager(); new CraftingRecipes(this); DBConnection.host = getConfig().getString(""Storage.MySQL.host""); DBConnection.port = getConfig().getInt(""Storage.MySQL.port""); DBConnection.pass = getConfig().getString(""Storage.MySQL.pass""); DBConnection.db = getConfig().getString(""Storage.MySQL.db""); DBConnection.user = getConfig().getString(""Storage.MySQL.user""); DBConnection.init(); if (DBConnection.isOpen() == false) { return; } getServer().getPluginManager().registerEvents(new PKListener(this), this); getServer().getScheduler().scheduleSyncRepeatingTask(this, new BendingManager(this), 0, 1); getServer().getScheduler().scheduleSyncRepeatingTask(this, new AirbendingManager(this), 0, 1); getServer().getScheduler().scheduleSyncRepeatingTask(this, new WaterbendingManager(this), 0, 1); getServer().getScheduler().scheduleSyncRepeatingTask(this, new EarthbendingManager(this), 0, 1); getServer().getScheduler().scheduleSyncRepeatingTask(this, new FirebendingManager(this), 0, 1); getServer().getScheduler().scheduleSyncRepeatingTask(this, new ChiblockingManager(this), 0, 1); getServer().getScheduler().runTaskTimerAsynchronously(this, new RevertChecker(this), 0, 200); for (Player var1: Bukkit.getOnlinePlayers()) { GeneralMethods.createBendingPlayer(var1.getUniqueId(), var1.getName()); Preset.loadPresets(var1); } try { MetricsLite var2 = new MetricsLite(this); var2.start(); } catch (IOException e) { e.printStackTrace(); } GeneralMethods.deserializeFile(); GeneralMethods.startCacheCleaner(GeneralMethods.CACHE_TIME); updater.checkUpdate(); } "	1	1	1	0	0	0
public void Func1(SlowConsumerDetectionListener var1, long var2) throws Exception { SimpleString var3 = info.getSelector() == null ? null : new SimpleString(info.getSelector()); String var4 = OpenWireUtil.convertWildcard(openwireDestination.getPhysicalName()); SimpleString var5; if (openwireDestination.isTopic()) { if (openwireDestination.isTemporary()) { var5 = new SimpleString(var4); } else { var5 = new SimpleString(var4); } SimpleString var6 = createTopicSubscription(info.isDurable(), info.getClientId(), var4, info.getSubscriptionName(), var3, var5); serverConsumer = session.getCoreSession().createConsumer(var2, var6, null, info.isBrowser(), false, -1); serverConsumer.setlowConsumerDetection(var1); } else { SimpleString var6 = new SimpleString(openwireDestination.getPhysicalName()); try { session.getCoreServer().createQueue(var6, RoutingType.ANYCAST, var6, null, true, false); } catch (ActiveMQQueueExistsException e) { } serverConsumer = session.getCoreSession().createConsumer(var2, var6, var3, info.isBrowser(), false, -1); serverConsumer.setlowConsumerDetection(var1); AddressSettings var7 = session.getCoreServer().getAddressSettingsRepository().getMatch(var6.toString()); if (var7 != null) { if (info.getPrefetchSize() != 0 && var7.getQueuePrefetch() == 0) { ConsumerControl var8 = new ConsumerControl(); var8.setConsumerId(info.getConsumerId()); var8.setPrefetch(0); session.getConnection().dispatch(var8); } } } serverConsumer.setProtocolData(this); } 	0	0	0	0	1	0
public UserPoll Func1(final UserPoll var1) throws ServiceException { boolean var2 = true; final UserPoll var3 = this.getUserPoll(var1); if (Objects.nonNull(var3)) { this.deleteUserPoll(var3); this.optionsDao.decrementVoteCount(var3.getOptionId()); var2 = false; } this.optionsDao.incrementVoteCount(var1.getOptionId()); if (var2) { this.userStatDao.incrementVotedCount(var1.getUserId()); } return super.create(var1); } 	0	0	0	0	1	0
@Test public void Func1() { Set<AccessFile> var1 = new HashSet<>(); AccessRules var2 = new AccessRules(var1, ORDER, ALLOW, DENY); assertEquals(var2.getFiles(), var1); assertEquals(var2.getAllow(), ALLOW); assertEquals(var2.getDeny(), DENY); assertEquals(var2.getOrder(), ORDER); } 	0	0	0	0	1	0
"@Override public void Func1(WebSecurity var1) throws Exception { var1.ignoring().antMatchers(""/webjars/**"", ""/styling/**"", ""/landing/**"",""/welcome/**"", ""/services/**""); } "	0	0	0	0	1	0
@Override public MapOrientation Func1() { return MapOrientation.valueOf(this.orientation); } 	0	0	0	0	1	0
"@Override public Void Func1(CalculationTarget var1, CalculationMarketData var2) { throw new IllegalStateException(Messages.format( ""No rule configured for measure on ''"", var1.getClass().getSimpleName())); } "	0	0	1	1	0	0
"private static ReportCalculationResults Func1() { Measure var1 = Measure.of(""Foo""); Column var2 = Column.of(var1); List<Column> var3 = ImmutableList.of(var2); List<? extends Result<?>> var4 = ImmutableList.of( Result.success(CurrencyAmount.of(Currency.CAD, 2d)), Result.success(CurrencyAmount.of(Currency.AUD, 3d)), Result.success(CurrencyAmount.of(Currency.CHF, 4d))); List<Trade> var5 = ImmutableList.of( trade(""cpty1"", 1_000_000), trade(""cpty2"", 10_000_000), trade(""cpty3"", 100_000_000)); Results var6 = Results.of(3, 1, var4); return ReportCalculationResults.of(LocalDate.now(ZoneOffset.UTC), var5, var3, var6); } "	0	0	0	0	1	0
"private void Func1() { List<ColumnConfig> var1 = task.getColumns(); List<ColumnConfig> var2 = task.getAddColumns(); List<ColumnConfig> var3 = task.getDropColumns(); int var4 = 0; if (var3.size() > 0) { for (ColumnConfig var5 : var3) { String var6 = var5.getName(); if (! var6.startsWith(""$."")) { continue; } jsonDropColumnsPut(var6); } } else if (var1.size() > 0) { for (ColumnConfig var7 : var1) { String var6 = var7.getName(); if (! var6.startsWith(""$."")) { continue; } if (var7.getSrc().isPresent()) { String var8 = var7.getSrc().get(); jsonAddColumnsPut(var6, new JsonColumn(var6, null, null, var8)); } else if (var7.getType().isPresent() && var7.getDefault().isPresent()) { // add var7 Type var9 = var7.getType().get(); Value var10 = getDefault(task, var6, var9, var7); jsonColumnsPut(var6, new JsonColumn(var6, var9, var10)); } else { Type var9 = var7.getType().isPresent() ? var7.getType().get() : null; jsonColumnsPut(var6, new JsonColumn(var6, var9)); } } } if (var2.size() > 0) { for (ColumnConfig var7 : var2) { String var6 = var7.getName(); if (! var6.startsWith(""$."")) { continue; } if (var7.getSrc().isPresent()) { String var8 = var7.getSrc().get(); jsonAddColumnsPut(var6, new JsonColumn(var6, null, null, var8)); } else if (var7.getType().isPresent() && var7.getDefault().isPresent()) { // add var7 Type var9 = var7.getType().get(); Value var10 = getDefault(task, var6, var9, var7); jsonAddColumnsPut(var6, new JsonColumn(var6, var9, var10)); } else { throw new SchemaConfigException(String.format(""add_columns: Column '%s' does not have \""var8\"", or \""var9\"" and \""default\"""", var6)); } } } } "	1	0	0	0	0	0
"private Notification Func1(Context var1, Event var2){ TaskStackBuilder var3 = TaskStackBuilder.create(var1); var3.addParentStack(TabActivity.class); Intent var4 = new Intent(var1, TaskActivity.class); var4.putExtra(TaskActivity.INTENT_PARAM_ID, var2.getId()); var3.addNextIntent(var4); PendingIntent var5 = var3.getPendingIntent( 0, PendingIntent.FLAG_UPDATE_CURRENT ); Bitmap var6 = BitmapFactory.decodeResource(var1.getResources(), R.drawable.ic_event_date); Notification.Builder var7 = new Notification.Builder(var1) .setContentTitle(var2.getName()) .setContentText(""Event in ""+var2.getNotificationTime()+"" minutes!\r\n""+var2.getDescription()) .setContentIntent(var5) .setSmallIcon(R.mipmap.ic_launcher) .setLargeIcon(var6); Notification var8 = var7.build(); var8.flags = Notification.DEFAULT_LIGHTS | Notification.FLAG_AUTO_CANCEL; var8.defaults = Notification.DEFAULT_VIBRATE |Notification.DEFAULT_SOUND; return var8; } "	0	0	0	0	1	0
@Override public VectorWithOrdinal Func1(String var1) { return vectorIds.get(var1); } 	0	0	1	0	1	0
@Override protected void Func1(ChannelHandlerContext var1, ByteBuf var2) throws Exception { rawBuffer.writeBytes(var2.copy(), 0, var2.readableBytes()); Frame var3 = null; do { var3 = decode(); if (var3 != null) { resultCallback.onNext(var3); } } while (var3 != null); } 	1	0	1	1	1	0
"public void Func1(TestContext var1) { logger.debug(""Setup method was not implemented for ${var1}""); } "	0	0	0	0	1	0
"public void Func1(List<TestContext> var1) { List<Thread> var2 = new LinkedList<Thread>(); int var3 = 0; MutableInt var4 = new MutableInt(); for(TestContext var5 : var1) { Thread var6 = new Thread(new TestRunner(this, var5, var4), var5.name); var2.add(var6); var6.start(); } for(Thread var6 : var2) { try { var6.join(); } catch(Throwable e) { logger.error(var6.toString()); } } Assert.assertEquals(var4.intValue() , 0, ""There were ${var3} executions against a TestContext""); } "	0	0	0	0	1	0
"public void Func1(List<TestContext> var1) { int var2 = 0; for(TestContext var3 : var1) if(!this.runWith(var3)) var2 += 1; Assert.assertEquals(var2, 0, ""There were ${var2} executions against a TestContext""); } "	0	0	0	0	1	0
"protected void Func1(Connection var1, File var2, String var3, boolean var4) throws IOException, SQLException { try (Importer importer = Importer.getImporter(var2)) { final Object[] var5; if (var4) { var5 = importer.nextRow(); } else { try (Importer importer2 = Importer.getImporter(var2)) { Object[] var6 = importer2.nextRow(); Arrays.fill(var6, """"); var5 = var6; } } final List<Object> var7 = Arrays.asList(var5); final String var8 = (var4) ? String.format(""(%s)"", join("","", var7)) : """"; final List<Object> var9 = new ArrayList<>(var7); Collections.fill(var9, ""?""); final String var10 = String.format(""INSERT INTO %s %s VALUES (%s)"", var3, var8, join("","", var9)); if (log.isDebugEnabled()) { log.debug(""SQL : "" + var10); } try (PreparedStatement stmt = var1.prepareStatement(var10)) { insertRecords(stmt, importer); } } } "	0	0	0	0	1	0
public Path Func1(Path var1) { return var1.resolve(Paths.get(courseName)); } 	0	0	0	0	1	0
@Override public void Func1(MotionRuntime var1, View var2) { var1.addInteraction(draggable, var2); var1.addInteraction(pinchable, var2); var1.addInteraction(rotatable, var2); var1.addInteraction(anchorPointAdjustable, var2); } 	0	0	0	0	1	0
public void Func1(final Date var1) { this.var1 = var1; } 	0	0	0	0	1	0
"public long Func1(String var1) { try { return Long.parseLong(var1); } catch (Throwable t) { } try { IRI var2 = IRI.create(var1); OWL.parseIDFromBusinessOntologyIRI(var2); } catch (Throwable t) { } return lookupServiceCaseId(Json.object(""legacy:hasCaseNumber"", var1, ""type"", ""legacy:ServiceCase"")); } "	0	0	0	0	1	0
"public ReportElement Func1(ReportElement var1, int var2, int var3) { if (var1 instanceof ReportTextBox) { ReportTextBox var4 = (ReportTextBox) var1; String var5 = var4.getText().replaceAll(""%PAGE_NUMBER%"", var2 + 1 + """").replaceAll(""%TOTAL_PAGES%"", var3 + """"); return new ReportTextBox(var4, var5); } else if (var1 instanceof ReportTable) { ReportTable var6 = (ReportTable) var1; ReportElement[][] var7 = var6.getElements(); ReportElement[][] var8 = new ReportElement[var7.length][]; for (int var9 = var7.length - 1; var9 >= 0; --var9) { var8[var9] = new ReportElement[var7[var9].length]; for (int var10 = var7[var9].length - 1; var10 >= 0; --var10) { var8[var9][var10] = Func1(var7[var9][var10], var2, var3); } } return new ReportTable(var6.getPdfStyleSheet(), var6.getCellWidths(), var8, var6.getTitle()); } else { return var1; } } "	0	0	0	0	1	0
"public HashMap<Facet, FacetFilter> Func1() { HashMap<Facet, FacetFilter> var1 = new HashMap(); WebElement var2 = driver.findElement(By.xpath(""//div[@class='ffilter']"")); if (hasFilters()) { List<WebElement> var3 = var2.findElements(By.cssSelector(""ul#var5 > li"")); for (WebElement var4 : var3) { FacetFilter var5; String var6 = var4.findElement(By.cssSelector(""span"")).getText(); switch (var6) { case ""Gene"": var5 = new FacetFilter(Facet.GENES); break; case ""Phenotype"": var5 = new FacetFilter(Facet.PHENOTYPES); break; case ""Disease"": var5 = new FacetFilter(Facet.DISEASES); break; case ""Anatomy"": var5 = new FacetFilter(Facet.ANATOMY); break; case ""IMPC Images"": var5 = new FacetFilter(Facet.IMAGES); break; case ""Images"": var5 = new FacetFilter(Facet.IMAGES); break; default: continue; } List<WebElement> var7 = var4.findElements(By.cssSelector(""ul"")); for (WebElement var8 : var7) { var5.subfacetTexts.add(var8.findElement(By.cssSelector(""li a"")).getText()); } var1.put(var5.facet, var5); } } return var1; } "	0	0	0	0	1	0
protected boolean Func1(boolean var1, int var2, char var3) { if (var3 == '.') { return false; } return super.Func1(var1, var2, var3); } 	0	0	0	0	1	0
protected void Func1(Set<? extends K> var1, boolean var2) { final Set<Data> var3; if (var1 != null) { var3 = new HashSet<Data>(); for (K var4 : var1) { var3.add(toData(var4)); } } else { var3 = null; } final int var5 = clientContext.getPartitionService().getPartitionCount(); int var6 = registerCompletionLatch(var5); CacheClearRequest var7 = new CacheClearRequest(nameWithPrefix, var3, var2, var6); try { final Map<Integer, Object> var8 = invoke(var7); int var9 = 0; for (Object var10 : var8.values()) { if (var10 != null && var10 instanceof CacheClearResponse) { final Object var11 = ((CacheClearResponse) var10).getResponse(); if (var11 instanceof Boolean) { var9++; } if (var11 instanceof Throwable) { throw (Throwable) var11; } } } waitCompletionLatch(var6, var5 - var9); } catch (Throwable t) { deregisterCompletionLatch(var6); throw ExceptionUtil.rethrowAllowedTypeFirst(t, CacheException.class); } } 	0	0	1	0	1	0
"@Override void Func1(List<String> var1) { try { sinks_.log(this, ""Applying snipping criteria "" + select_ +""; the original source is "" + currentSrcFileName_, LogLevel.VERBOSE); if (expr_ == null) { XPath var2 = XPathFactory.newInstance().newXPath(); var2.setNamespaceContext(namespaceContext_); expr_ = var2.compile(select_); } NodeList var3 = (NodeList) expr_.evaluate(document_, XPathConstants.NODESET); int var4 = 0; for (int var5 = 0; var5 < var3.getLength(); ++var5) { Node var6 = var3.item(var5); if (var6.getNodeType() == Node.ELEMENT_NODE) { Result var7 = sinks_.startOne(currentIndex_, currentSrcFileName_); Document var8 = newDocument(); var8.appendChild(var8.adoptNode(var6)); List<XPathExpression> var9 = sinks_.var9(); List<String> var10 = null; if (!var9.isEmpty()) { sinks_.log(this, ""  Referral to the source contents required"", LogLevel.DEBUG); var10 = Referral.extract(var8, var9); sinks_.log(this, ""  Referred source data: "" + Referral.join(var10), LogLevel.DEBUG); } else { sinks_.log(this, ""  Referral to the source contents not required"", LogLevel.DEBUG); } TransformerFactory.newInstance().newTransformer().transform( new DOMSource(var8), var7); sinks_.Func1(var10); ++var4; } } if (var4 > 0) { sinks_.log(this, var4 + "" snipped fragments processed"", LogLevel.VERBOSE); } else { sinks_.log(this, ""No snipped fragments generated; the original source is "" + currentSrcFileName_, LogLevel.INFO); } } catch (TransformerException | XPathExpressionException e) { e.printStackTrace(); throw new BuildException(e); } } "	0	0	1	0	1	0
"@Override public void Func1(ViewHolder var1, int var2) { data = logData.get(var2); try { uid = Integer.parseInt(data.getUid()); info = Api.getPackageDetails(context, uid); icon = info.applicationInfo.loadIcon(context.getPackageManager()); var1.icon.setImageDrawable(icon); } catch (Exception e) { info = null; icon = null; var1.icon.setImageDrawable(context.getResources().getDrawable(R.drawable.ic_unknown_package)); } try { prettyTime = new PrettyTime(new Date(System.currentTimeMillis() - Long.parseLong(data.getTimestamp()))); if(data.getTimestamp() != null && !data.getTimestamp().isEmpty()) { String var3 = prettyTime.format(new Date(0)); var1.lastDenied.setText(var3); } } catch (Exception e) { } var1.appname.setText(data.getAppName() != null ? data.getAppName(): context.getString(R.string.log_deletedapp)); if(data.getCount() > 1) { var1.dataDenied.setText(context.getString(R.string.log_denied) + "" "" + data.getCount() + "" "" + context.getString(R.string.log_times)) ; } else { var1.dataDenied.setText(context.getString(R.string.log_denied) + "" "" + data.getCount() + "" "" + context.getString(R.string.log_time)) ; } } "	0	0	0	0	1	0
@Override public ResourceInfo Func1(String var1) { return resourceRepository.Func1(var1); } 	0	0	0	1	0	0
@Override public Job Func1(String var1) { return (Job) learnguideRepository.get(Job.class, Integer.parseInt(var1)); } 	0	0	1	1	0	0
@Override public void Func1(Long var1) { getResourceRepository().remove(Resource.class, var1); } 	0	0	1	1	0	0
@Override public Map<String, Object> Func1(Map<String, String> var1) { return resourceRepository.Func1(var1); } 	0	0	0	1	0	0
"public MessageKeys Func1(ECPublicKey var1, int var2) { Pair<Chain,Integer> var3 = getReceiverChain(var1); Chain               var4         = var3.first; if (var4 == null) { return null; } List<Chain.MessageKey>     var5     = var4.getMessageKeysList(); Iterator<Chain.MessageKey> var6 = var5.iterator(); MessageKeys                var7             = null; while (var6.hasNext()) { Chain.MessageKey var8 = var6.next(); if (var8.getIndex() == var2) { var7 = new MessageKeys(new SecretKeySpec(var8.getCipherKey().toByteArray(), ""AES""), new SecretKeySpec(var8.getMacKey().toByteArray(), ""HmacSHA256""), var8.getIndex()); var6.remove(); break; } } Chain var9 = var4.toBuilder().clearMessageKeys() .addAllMessageKeys(var5) .build(); this.sessionStructure = this.sessionStructure.toBuilder() .setReceiverChains(var3.second, var9) .build(); return var7; } "	0	0	1	1	1	0
private static int Func1(IndexReader var1, QueryParser var2, String var3, int var4) throws ParseException, IOException { Query var5 = var2.parse(var3); return Func1(var1, var4, var5); } 	0	0	1	1	0	0
protected Boolean Func1(Location var1) { if (var1 == null) return false; Time var2 = new Time(); var2.setToNow(); return (var2.toMillis(true) - var1.getTime()) <= TEN_MINUTES; } 	0	0	0	0	1	0
"private void Func1(PublicationDetail var1, int var2, boolean var3) { SilverTrace.info(""kmelia"", ""KmeliaBmEJB.Func1()"", ""root.MSG_GEN_ENTER_METHOD"", ""var2 = "" + var2); try { boolean var4 = var4(var1); SilverTrace.info(""kmelia"", ""KmeliaBmEJB.Func1()"", ""root.MSG_GEN_PARAM_VALUE"", ""This publication is clone ? "" + var4); PublicationDetail var5 = getPublicationDetail(var1.getPK()); if (StringUtil.isDefined(var5.getTargetValidatorId()) && !StringUtil.isDefined(var1.getTargetValidatorId())) { var1.setTargetValidatorId(var5.getTargetValidatorId()); } final boolean var6 = var6(var1.getPK()); if (var4) { publicationBm.setDetail(var1, var3); } else { boolean var7 = changePublicationStatusOnUpdate(var1); publicationBm.setDetail(var1, var3); if (!var6) { if (var7) { this.createTodosForPublication(var1, false); } updateSilverContentVisibility(var1); String var8 = KmeliaHelper.getProfile(getOrganisationController().getUserProfiles( var1.getUpdaterId(), var1.getPK().getInstanceId())); if (""supervisor"".equals(var8)) { sendModificationAlert(var2, var1.getPK()); } boolean var9 = isVisibilityPeriodUpdated(var1, var5); if (var7 || var9) { if (KmeliaHelper.isIndexable(var1)) { indexExternalElementsOfPublication(var1); } else { unIndexExternalElementsOfPublication(var1.getPK()); } } } } if (!var6) { sendSubscriptionsNotification(var1, true, false); } boolean var10 = getBooleanValue(getOrganisationController().getComponentParameterValue( var1.getPK().getInstanceId(), ""var10"")); if (var10) { CallBackManager var11 = CallBackManager.get(); var11.invoke(CallBackManager.ACTION_HEADER_PUBLICATION_UPDATE, Integer.parseInt(var1.getId()), var1.getInstanceId(), var1); } } catch (Exception e) { throw new KmeliaRuntimeException(""KmeliaBmEJB.Func1()"", ERROR, ""kmelia.EX_IMPOSSIBLE_DE_MODIFIER_LA_PUBLICATION"", e); } SilverTrace.info(""kmelia"", ""KmeliaBmEJB.Func1()"", ""root.MSG_GEN_EXIT_METHOD""); } "	0	0	0	0	1	0
"@Override public void Func1(String var1) { mView.onRemoveCartItemColor(false); DTOAppointmentSchedule var2 = getSpecificSchedule(var1); if (var2 != null){ RemoveTemporaryBookingInteractor var3 = new RemoveTemporaryBookingInteractorImpl(mExecutor, mMainThread, this, appointmentManager, appointment.getLocationId(), appointment.getMachineId(), var2); var3.execute(); }else onError(""Item to be removed doesn't exist""); } "	1	1	0	0	0	0
"final CompiledXSpec Func1(final XsltExecutable var1, final File var2) { XsltTransformer var3 = var1.load(); InputStream var4 = null; try { final File var5 = getCompiledXSpecPath(getReportDir(), var2); getLog().info(""Compiling XSpec to XSLT: "" + var5); var4 = new FileInputStream(var2); final SAXParser var6 = PARSER_FACTORY.newSAXParser(); final XMLReader var7 = var6.getXMLReader(); final XSpecTestFilter var8 = new XSpecTestFilter(var7); final InputSource var9 = new InputSource(var4); var9.setSystemId(var2.getAbsolutePath()); var3.setSource(new SAXSource(var8, var9)); final Serializer var10 = PROCESSOR.newSerializer(); var10.setOutputFile(var5); var3.setDestination(var10); var3.transform(); return new CompiledXSpec(var8.getTests(), var8.getPendingTests(), var5); } catch (final SaxonApiException sae) { getLog().error(sae.getMessage()); getLog().debug(sae); } catch (final ParserConfigurationException | FileNotFoundException pce) { getLog().error(pce); } catch (SAXException saxe) { getLog().error(saxe.getMessage()); getLog().debug(saxe); } finally { if (var4 != null) { try { var4.close(); } catch (final IOException ioe) { getLog().warn(ioe); } } } return null; } "	0	0	0	0	1	0
"@Override public ID Func1() { Element var1 = document.select(""td:containsOwn(�?番：) ~ td"").first(); if(var1 != null) { String var2 = var1.text(); var2 = fixUpIDFormatting(var2); return new ID(var2); } else return ID.BLANK_ID; } "	0	0	0	1	1	0
"public List<EducationDetails> Func1(int var1, int var2) { List<EducationDetails> var3 = new ArrayList<>(); DatabaseConnectionHelper var4 = ObjectFactory.getDBHelper(); var4.getCompanyConnection(var1); try { CallableStatement var5 = var4.companySqlConnectionPool.get(var1).prepareCall(""{call getEmployeeWorkExperience(?)}""); var5.setInt(1, var2); ResultSet var6 = var5.executeQuery(); while (var6.next()) { EducationDetails var7 = new EducationDetails(); var7.setEmployeeId(var2); var7.setEducationDetailsId(var6.getInt(""education_id"")); var7.setInstitution(var6.getString(""institute_name"")); var7.setCertification(var6.getString(""certification"")); var7.setStartDate(var6.getDate(""from_date"")); var7.setEndDate(var6.getDate(""to_date"")); var7.setLocation(var6.getString(""location"")); var3.add(var7); } } catch (SQLException e) { org.apache.log4j.Logger.getLogger(EmployeeHelper.class).error(""Exception while getting the employee basic details"", e); } return var3; } "	0	0	0	0	1	0
"@Override public DataExportFileQueryResult Func1(DataExportFileQuery var1) { int var2; List<ExportFile> var3; String var4 = ""select count(e.id) from export e where e.utilityId = :utilityId""; TypedQuery<Number> var5 = entityManager.createQuery(var4, Number.class); var5.setParameter(""utilityId"", var1.getUtilityId()); var2 = ((Number) var5.getSingleResult()).intValue(); String var6 = ""select e from export e where e.utilityId = :utilityId""; TypedQuery<ExportFileEntity> var7 = entityManager.createQuery(var6, ExportFileEntity.class); var7.setParameter(""utilityId"", var1.getUtilityId()); var7.setFirstResult(var1.getIndex() * var1.getSize()); var7.setMaxResults(var1.getSize()); var3 = exportEntityListToObjectList(var7.getResultList()); return new DataExportFileQueryResult(var2, var3); } "	0	0	0	0	1	0
"@Override public DataExportFileQueryResult Func1(DataExportFileQuery var1) { int var2; List<ExportFile> var3; String var4 = ""select count(e.id) from export e where e.utilityId = :utilityId and e.createdOn >= :createdOn""; TypedQuery<Number> var5 = entityManager.createQuery(var4, Number.class); var5.setParameter(""utilityId"", var1.getUtilityId()); var5.setParameter(""createdOn"", new DateTime().minusDays(var1.getDays())); var2 = ((Number) var5.getSingleResult()).intValue(); String var6 = ""select e from export e where e.utilityId = :utilityId and e.createdOn >= :createdOn""; TypedQuery<ExportFileEntity> var7 = entityManager.createQuery(var6, ExportFileEntity.class); var7.setParameter(""utilityId"", var1.getUtilityId()); var7.setParameter(""createdOn"", new DateTime().minusDays(var1.getDays())); var7.setFirstResult(var1.getIndex() * var1.getSize()); var7.setMaxResults(var1.getSize()); var3 = exportEntityListToObjectList(var7.getResultList()); return new DataExportFileQueryResult(var2, var3); } "	0	0	0	0	1	0
"@Override public DataExportFileQueryResult Func1(DataExportFileQuery var1) { int var2; List<ExportFile> var3; String var4 = ""select count(e.id) from export e where e.utilityId = :utilityId and e.createdOn < :createdOn""; TypedQuery<Number> var5 = entityManager.createQuery(var4, Number.class); var5.setParameter(""utilityId"", var1.getUtilityId()); var5.setParameter(""createdOn"", new DateTime().minusDays(var1.getDays())); var2 = ((Number) var5.getSingleResult()).intValue(); String var6 = ""select e from export e where e.utilityId = :utilityId and e.createdOn < :createdOn""; TypedQuery<ExportFileEntity> var7 = entityManager.createQuery(var6, ExportFileEntity.class); var7.setParameter(""utilityId"", var1.getUtilityId()); var7.setParameter(""createdOn"", new DateTime().minusDays(var1.getDays())); var7.setFirstResult(var1.getIndex() * var1.getSize()); var7.setMaxResults(var1.getSize()); var3 = exportEntityListToObjectList(var7.getResultList()); return new DataExportFileQueryResult(var2, var3); } "	0	0	0	0	1	0
private void Func1(View var1) { if (!(var1 instanceof TextView)) { return; } String var2 = ((TextView) var1).getText().toString(); var2 = convertNumberToWord(var2); Context var3 = getContext(); Intent var4 = new Intent(var3, BaseExamActivity.class); var4.putExtra(TAG_DECK_ID, deckId); var4.putExtra(TAG_DECK_NAME, deckName); var4.putExtra(TAG_RANDOM_AMOUNT, var2); var4.putExtra(TAG_IN_EXAM, true); var4.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { setUpTransition(); ActivityOptionsCompat var5 = ActivityOptionsCompat.makeSceneTransitionAnimation(getActivity()); var3.startActivity(var4, var5.toBundle()); } else { var3.startActivity(var4); } } 	0	0	0	0	1	0
"@Test public void Func1() { JsonObject var1 = (JsonObject) RestcommClientsTool.getInstance().getClients(deploymentUrl.toString(), developerAccountSid, developeerAuthToken, null, 100, true); int var2 = var1.get(""total"").getAsInt(); JsonArray var3 = var1.get(""clients"").getAsJsonArray(); int var4 = var3.size(); assertTrue(var4 == 100); assertTrue(var1.get(""start"").getAsInt() == 0); assertTrue(var1.get(""end"").getAsInt() == 99); JsonObject var5 = (JsonObject) RestcommClientsTool.getInstance().getClients(deploymentUrl.toString(), developerAccountSid, developeerAuthToken, 2, 100, true); JsonArray var6 = var5.get(""clients"").getAsJsonArray(); assertTrue(var6.size() == 100); assertTrue(var5.get(""start"").getAsInt() == 200); assertTrue(var5.get(""end"").getAsInt() == 299); JsonObject var7 = (JsonObject) RestcommClientsTool.getInstance().getClients(deploymentUrl.toString(), developerAccountSid, developeerAuthToken, var1.get(""num_pages"").getAsInt(), 100, true); JsonArray var8 = var7.get(""clients"").getAsJsonArray(); assertEquals(""CLffd8c6e5f65d420baf9579a18f229679"",var8.get(var8.size() - 1).getAsJsonObject().get(""sid"").getAsString()); assertTrue(var8.size() == 82); assertTrue(var7.get(""start"").getAsInt() == 300); assertTrue(var7.get(""end"").getAsInt() == 382); assertTrue(var2 == 382); } "	0	0	0	0	1	0
public void Func1() { String var1 = persistentStorage.get(FILTER_EVENTS_LOCATION_NAME_KEY); double var2 = persistentStorage.getDouble(FILTER_EVENTS_LOCATION_LAT_KEY, 0); double var3 = persistentStorage.getDouble(FILTER_EVENTS_LOCATION_LAT_KEY, 0); getView().setLocation(var1, var2, var3); } 	0	0	1	0	1	0
"private void Func1() { calculateDateDiff(); totalInitial = getPlanValue(); if (!rollOver.equals("""")) { totalInitial += Float.parseFloat(rollOver); } if (!selectedMealPlan.equals(getString(R.string.mealOptionCustom))) { try { ((TextView) findViewById(R.id.totalInitialText)).setText(twoDecimal.format(totalInitial)); } catch (NullPointerException e) { Log.e(""set total initial error"", e.getMessage()); } } if (currentBalanceIsEntered()) { summaryCard.setVisibility(View.VISIBLE); tableCard.setVisibility(View.VISIBLE); double var1, var2; if (weekDiff > 1 || (weekDiff == 1 && dayDiff > 1)) { var1 = totalInitial / ((weekDiff * 7) + dayDiff); var2 = var1 * 7; } else {    //1 week or less var2 = totalInitial; var1 = totalInitial / dayDiff; } double var3 = Double.parseDouble(currentBalance); double var4 = var3 - (var2 * currentWeekDiff + var1 * currentDayDiff); tvs[0].setText(formatNumber(var4)); double var5, var6; if (currentWeekDiff > 1 || (currentWeekDiff == 1 && currentDayDiff > 1)) { var6 = var3 / ((currentWeekDiff * 7) + currentDayDiff); var5 = var6 * 7; } else {     //1 week or less var5 = var3; var6 = var3 / ((currentWeekDiff * 7) + currentDayDiff); } tvs[1].setText(formatNumber(var1)); tvs[2].setText(formatNumber(var2)); tvs[3].setText(formatNumber(var6)); tvs[4].setText(formatNumber(var5)); tvs[5].setText(formatNumber(var6 - var1)); tvs[6].setText(formatNumber(var5 - var2)); } else { //if it can't be displayed, make sure its hidden showSnackbar(getResources().getString(R.string.remainingBalanceNotEntered), false); hideResults(); } } "	0	0	1	0	1	0
"public void Func1(int var1) throws SQLException { String var2 = ""DELETE FROM `library.Location` WHERE `var1` = ?""; List<Object> var3 = new ArrayList<>(); var3.add(var1); database.executeQuery(var2, var3, Database.QueryType.NON_QUERY); } "	0	0	1	1	1	0
private boolean Func1(String[] var1) { if (var1.length == 1) { return true; } else { return var1[0].length() == 4; } } 	0	0	0	1	0	0
"@Override public void Func1(RecordMetadata var1, Exception var2) { if ( var2 != null ) { if ( var2 instanceof RecordTooLargeException ) { LOGGER.error(""RecordTooLargeException @ "" + position + "" -- "" + key); LOGGER.error(""Maxwell dropped a row because it was too large ("" + var2.getLocalizedMessage() + "")""); LOGGER.error(""Considering raising max.request.size broker-side.""); if ( isTXCommit ) inflightMessages.completeMessage(position); } else { throw new RuntimeException(var2); } } else { try { if ( LOGGER.isDebugEnabled()) { LOGGER.debug(""->  key:"" + key + "", partition:"" +var1.partition() + "", offset:"" + var1.offset()); LOGGER.debug(""   "" + this.json); LOGGER.debug(""   "" + position); LOGGER.debug(""""); } if ( isTXCommit ) { BinlogPosition var3 = inflightMessages.completeMessage(position); if ( var3 != null ) context.setPosition(var3); } } catch (SQLException e1) { e1.printStackTrace(); } } } "	0	0	1	0	1	0
"@Override public void Func1(String var1, String var2, final NetCallback<List<RssItem>> var3) { var1 = API_TOKEN_TEST; String var4 = API_HOST_URL + API_STREAM_CONTENTS_URL.replace("":var2"", var2); String var5 = """"; final File var6 = new File(MyApplication.myApplicationDirPath + File.separator + MyApplication.myApplicationDataName + File.separator + ""stream.json""); try { var5 = FileUtils.readFile(var6); } catch (IOException e) { e.printStackTrace(); } if (var5.isEmpty()){ final Map<String,String> var7 = new HashMap<>(); var7.put(""Authorization"",""OAuth "" + var1); NetWorkApiHelper.newInstance().getRequest(var4, var7, new Response.Listener<String>() { @Override public void Func2(String var8) { Log.i(TAG,""Func2:Func1 "" + var8); try { FileUtils.writeFile(var6, var8); if ( var3 != null){ var3.onSuccess(parseStream(var8)); } } catch (IOException e) { e.printStackTrace(); } } }, new Response.ErrorListener() { @Override public void Func3(VolleyError var9) { Log.e(TAG,""Func3:Func1 "" + var9.getMessage()); if (var3 != null){ var3.onFail(var9.getMessage()); } } }); } else if ( var3 != null){ var3.onSuccess(parseStream(var5)); } } "	0	0	0	0	1	0
protected void Func1(boolean var1) { ((MainActivity) getActivity()).Func1(var1); } 	0	0	0	0	1	0
private ClassName Func1(final String var1) { return ClassName.get(config.getBasePackageName() + RESOURCE_PACKAGE_NAME, var1); } 	0	0	0	0	1	0
"@Override @SuppressWarnings(""unchecked"") public List<ProcedureEntity> Func1(DbQuery var1) throws DataAccessException { Criteria var2 = getDefaultCriteria(""procedure""); if (hasTranslation(var1, I18nProcedureEntity.class)) { var1.addLocaleTo(var2, I18nProcedureEntity.class); } var2 = var1.addDetachedFilters(""procedure"", var2); var1.addPagingTo(var2); return (List<ProcedureEntity>) var2.list(); } "	0	0	1	1	1	0
final void Func1(final RootObj var1) throws ParseException { for (final SuperBlockObj var2 : var1.getRoot().getChildren()) { for (final BlockObj var3 : var2.getSuperblock().getChildren()) { final Block var4 = var3.getBlock(); final String[] var5 = parsePath(null, var4.getPath()); for (final ComponentObj var6 : var4.getChildren()) { final Field var7 = ((FieldObj)var6).getField(); final String[] var8 = parsePath(var5, var7.getPath()); addValue(var8, var7.getValue()); } } } } 	0	0	1	0	1	0
"@Test public void Func1() throws IOException, ConfigurationException { resource.save(Collections.EMPTY_MAP); File var1 = new File(testFilePath + configFileName); assert var1.exists() : ""Config file does not exist""; PropertiesConfiguration var2 = new PropertiesConfiguration(var1); assert var2.containsKey(BlueprintsResourceOptions.OPTIONS_BLUEPRINTS_GRAPH_TYPE); assert var2.getString(BlueprintsResourceOptions.OPTIONS_BLUEPRINTS_GRAPH_TYPE).equals(BlueprintsResourceOptions.OPTIONS_BLUEPRINTS_GRAPH_TYPE_DEFAULT); assert getKeyCount(var2) == 2 : ""Too much content in the .properties file""; } "	0	0	1	1	0	0
public FilterBuilder Func1(RedisPool var1, FilterBuilder var2) { return var1.safelyReturn(jedis -> { FilterBuilder var3 = null; while (var3 == null) { if (!var2.overwriteIfExists() && jedis.exists(var2.name())) { var3 = this.parseConfigHash(jedis.hgetAll(var2.name()), var2.name()); } else { Map<String, String> var4 = this.buildConfigHash(var2); jedis.watch(var2.name()); Transaction var5 = jedis.multi(); var4.forEach((k, v) -> var5.hset(var2.name(), k, v)); if (var5.exec() != null) { var3 = var2; } } } return var3; }); } 	0	0	0	0	1	0
private void Func1(Row var1, TeamHelper var2, ScoutMetric var3) { Cell var4 = var1.getCell(0, MissingCellPolicy.CREATE_NULL_AS_BLANK); mCache.putMetricKey(var4, var3.getKey()); if (var3.getType() == MetricType.HEADER) { var4.setCellStyle(mCache.getHeaderMetricRowHeaderStyle()); int var5 = mScouts.get(var2).size(); if (var5 > Constants.SINGLE_ITEM) { int var6 = var1.getRowNum(); var1.getSheet() .addMergedRegion(new CellRangeAddress(var6, var6, 1, var5)); } } else { var4.setCellStyle(mCache.getRowHeaderStyle()); } } 	0	0	0	0	1	0
@Override public void Func1(int var1) { mPaint.Func1(var1); } 	0	0	1	0	1	0
public static final boolean Func1(char[] var1, char[] var2) { return (difference(var1, var2) == null); } 	0	0	1	0	1	0
public void Func1(RespT var1) { if (var1 == null) { this.regionManager.onRequestFail(ctx.getRegionId(), ctx.getPeer().getStoreId()); return; } Errorpb.Error var2 = getRegionError.apply(var1); if (var2 != null) { if (var2.hasNotLeader()) { this.regionManager.updateLeader(ctx.getRegionId(), ctx.getPeer().getStoreId()); throw new StatusRuntimeException(Status.fromCode(Status.Code.UNAVAILABLE).withDescription(var2.toString())); } if (var2.hasStoreNotMatch()) { this.regionManager.invalidateStore(ctx.getPeer().getStoreId()); throw new StatusRuntimeException(Status.fromCode(Status.Code.UNAVAILABLE).withDescription(var2.toString())); } if (var2.hasStaleEpoch()) { regionManager.onRegionStale(ctx.getRegionId(), var2.getStaleEpoch().getNewRegionsList()); this.regionManager.onRegionStale( ctx.getRegionId(), var2.getStaleEpoch().getNewRegionsList()); throw new StatusRuntimeException(Status.fromCode(Status.Code.CANCELLED).withDescription(var2.toString())); } if (var2.hasServerIsBusy()) { throw new StatusRuntimeException(Status.fromCode(Status.Code.UNAVAILABLE).withDescription(var2.toString())); } if (var2.hasStaleCommand()) { throw new StatusRuntimeException(Status.fromCode(Status.Code.UNAVAILABLE).withDescription(var2.toString())); } if (var2.hasRaftEntryTooLarge()) { throw new StatusRuntimeException(Status.fromCode(Status.Code.UNAVAILABLE).withDescription(var2.toString())); } this.regionManager.invalidateRegion(ctx.getRegionId()); } } 	0	0	0	0	1	0
private void Func1(int var1, ListPreference var2) { try { float var3 = mWindowManager.getAnimationScale(var1); if (var3 != 1) { mHaveDebugSettings = true; } CharSequence[] var4 = var2.getEntryValues(); for (int var5=0; var5<var4.length; var5++) { float var6 = Float.parseFloat(var4[var5].toString()); if (var3 <= var6) { var2.setValueIndex(var5); var2.setSummary(var2.getEntries()[var5]); return; } } var2.setValueIndex(var4.length-1); var2.setSummary(var2.getEntries()[0]); } catch (RemoteException e) { } } 	0	0	0	0	1	0
public final void Func1(PostAggItem var1) throws RecognitionException { Token var2 = null; try { { var2 = (Token) match(input, ARITH_OPER, FOLLOW_ARITH_OPER_in_postAggArithOper3499); var1.fn = (var2 != null ? var2.getText() : null); } } catch (RecognitionException re) { reportError(re); recover(input, re); } finally { } } 	0	0	1	0	1	0
"@Transactional(""transactionManager"") public OrderEntity Func1(Order var1) { List<ServiceItem> var2 = var1.getServiceItems(); Iterator<ServiceItem> var3 = var2.iterator(); while (var3.hasNext()) { ServiceItem var4 = var3.next(); if (var4.getQuotation() == null) var3.remove(); } OrderEntity var5 = convert(var1); OrderRailEntity var6 = convertRailway(var1); var6.setOrder(var5); var5.setRailway(var6); var5 = orderService.Func1(var5); ReceivableSummary var7 = new ReceivableSummary(); var7.setCny(var1.getCnyTotal()); var7.setUsd(var1.getUsdTotal()); var7.setOrderId(var1.getId()); var1.setId(var5.getId()); convert(var5, var7); var7.setId(null); var7.setOrderId(var5.getId()); receivableFacade.Func1(var7); return var5; } "	0	0	0	0	1	0
"public synchronized CachedFileGoConfig.PipelineConfigSaveResult Func1(PipelineConfig var1, GoConfigHolder var2, PipelineConfigService.SaveCommand var3, Username var4) { CruiseConfig var5 = cloner.deepClone(var2.configForEdit); var3.updateConfig(var5, var1); CruiseConfig var6 = cloner.deepClone(var5); MagicalGoConfigXmlLoader.preprocess(var6); PipelineConfig var7 = var6.getPipelineConfigByName(var1.name()); if (var3.isValid(var6, var7)) { try { LOGGER.info(String.format(""[Configuration Changed] Saving updated configuration."")); String var8 = var8(var5, true); String var9 = CachedDigestUtils.md5Hex(var8); MagicalGoConfigXmlLoader.setMd5(var5, var9); MagicalGoConfigXmlLoader.setMd5(var6, var9); writeToConfigXmlFile(var8); configRepository.checkin(new GoConfigRevision(var8, var9, var4.getUsername().toString(), serverVersion.version(), timeProvider)); LOGGER.debug(""[Config Save] Done writing with lock""); reloadStrategy.latestState(var6); return new CachedFileGoConfig.PipelineConfigSaveResult(var1, var3.getPipelineGroup(), new GoConfigHolder(var6, var5)); } catch (Exception e) { throw new RuntimeException(""failed to save : "" + e.getMessage()); } } else { throw new ConfigUpdateCheckFailedException(); } } "	0	0	0	0	1	0
public static ArrayList<Slug> Func1(Entity var1) { return entityMap.get(var1.getCommandSenderName()); } 	0	0	0	0	1	0
"@Override public String Func1(String var1) { List<String> var2 = new ArrayList<>(); var2.add(var1); SlackNameRequest var3 = new SlackNameRequest(var2); HttpEntity<SlackNameRequest> var4 = new HttpEntity<>(var3, setupBaseHttpHeaders()); String var5; try { ResponseEntity<UserDTO[]> var6 = restTemplate.exchange(urlBase + urlGetUser, HttpMethod.POST, var4, UserDTO[].class); var5 = var6.getBody()[0].getUuid(); } catch (HttpClientErrorException ex) { if (ex.getRawStatusCode() == 400 && checkInternalErrorCode(ex.getResponseBodyAsString(), 0)) { throw new UserNotFoundException(String.format(""User with slack name '%s' not found."", var1)); } throw new GamificationExchangeException(""User Exchange Error: "", ex); } return var5; } "	0	0	1	0	1	0
public DCPlayer Func1( Player var1 ) { for ( DCPlayer var2 : dwarves ) { if ( var2 != null ) { if ( var2.getPlayer() != null ) { if ( var2.getPlayer().getName().equalsIgnoreCase( var1.getName() ) ) { var2.setPlayer( var1 ); return var2; } } } } return null; } 	0	0	0	0	1	0
"@SuppressWarnings( ""resource"" ) protected boolean Func1() { System.out.println( ""[DwarfCraft] Reading races file: "" + configDirectory + cfgRaceFile ); try { FileReader var1 = new FileReader( configDirectory + cfgRaceFile ); BufferedReader var2 = new BufferedReader( var1 ); String var3 = var2.readLine(); boolean var4 = false; boolean var5 = false; boolean var6 = false; boolean var7 = false; Race var8 = null; while ( var3 != null ) { if ( var3.length() == 0 ) { var3 = var2.readLine(); continue; } if ( var3.charAt( 0 ) == '#' ) { var3 = var2.readLine(); continue; } String[] var9 = var3.split( "":"" ); if ( var9.length > 2 ) { var3 = var2.readLine(); continue; } if ( var9[0].equalsIgnoreCase( ""Name"" ) ) { var8 = new Race( var9[1].trim() ); var4 = true; var3 = var2.readLine(); } if ( var9[0].equalsIgnoreCase( ""SkillIDs"" ) ) { String var10[] = var9[1].trim().split( "","" ); var8.setSkills( new ArrayList<Integer>() ); for ( int var11 = 0; var11 < var10.length; var11++ ) { var8.getSkills().add( Integer.parseInt( var10[var11].trim() ) ); } var6 = true; var3 = var2.readLine(); } if ( var9[0].equalsIgnoreCase( ""Description"" ) ) { var8.setDesc( var9[1].trim() ); var5 = true; var3 = var2.readLine(); } if ( var9[0].equalsIgnoreCase( ""Prefix Colour"" ) ) { var8.setPrefixColour( var9[1].trim() ); var7 = true; var3 = var2.readLine(); } if ( var4 && var5 && var6 && var7 ) { raceList.add( var8 ); var4 = false; var5 = false; var6 = false; System.out.println( ""[DwarfCraft] Loaded var8: "" + var8.getName() ); continue; } } } catch ( Exception e ) { e.printStackTrace(); } if ( defaultRace == null ) { defaultRace = ""NULL""; } else { if ( !checkRace( defaultRace ) ) defaultRace = ""NULL""; } return true; } "	1	1	1	1	0	0
@Override protected Statement Func1(FrameworkMethod var1, Object var2, Statement var3) { List<FrameworkMethod> var4 = getTestClass().getAnnotatedMethods(After.class); return var4.isEmpty() && afterTestExtensions.isEmpty() ? var3 : new RunAfters(var3, var4, var2, afterTestExtensions); } 	0	0	0	0	1	0
@Override protected Statement Func1(Statement var1) { List<FrameworkMethod> var2 = getTestClass() .getAnnotatedMethods(AfterClass.class); return var2.isEmpty() && afterTestExtensions.isEmpty() ? var1 : new RunAfters(var1, var2, null); } 	0	0	0	0	0	1
private void Func1(Project var1) { var2.setModel(new DefaultComboBoxModel<>( Arrays.stream(ModuleManager.getInstance(var1).getModules()) .filter(var3 -> AppEngineFlexibleFacet.getAppEngineFacetByModule(var3) != null) .map(AppEngineFlexibleFacet::getAppEngineFacetByModule) .toArray(AppEngineFlexibleFacet[]::new) ));  if (var2.getItemCount() == 0) { var2.setVisible(false); var4.setVisible(false); var5.setVisible(true); var6.setVisible(true); } } 	0	0	0	0	1	0
public static void Func1(final Jenkins var1) { installGradle(var1, GradleInstallation.DEFAULT_VERSION_NAME, GradleInstallation.LATEST_VERSION); } 	0	0	0	0	1	0
"@RequestMapping(method = RequestMethod.GET) @ResponseBody public List<EncounterTransaction.Diagnosis> Func1(@RequestParam(""var1"") String var1, @RequestParam(value = ""var4"", required = false) String var2) throws Exception { Patient var3 = patientService.getPatientByUuid(var1); Date var4; try { var4 = new DateMapper().toDate(var2); } catch (Exception e) { throw new InvalidInputException(""Date format needs to be 'yyyy-MM-dd'. Incorrect Date:"" + var2 + ""."", e); } List<Diagnosis> var5 = diagnosisService.getDiagnoses(var3, var4); return diagnosisMapper.convert(var5); } "	0	0	0	1	1	0
@SubscribeEvent public void Func1(RenderGameOverlayEvent var1) { ModItems.teleporterLinker.renderGameOverlay(Minecraft.getMinecraft()); renderCrosshairs(var1); } 	1	0	1	0	1	0
@Override public ITexture[] Func1(IGregTechTileEntity var1, byte var2, byte var3, byte var4, boolean var5, boolean var6) { return new ITexture[]{Textures.BlockIcons.MACHINE_CASINGS[1][var4 + 1], var3 == var2 ? var5 ? new GT_RenderedTexture(Textures.BlockIcons.LARGETURBINE_SS_ACTIVE5) : new GT_RenderedTexture(Textures.BlockIcons.LARGETURBINE_SS5) : Textures.BlockIcons.CASING_BLOCKS[58]}; } 	0	0	0	1	1	0
"@Override public int Func1(SubjectReference var1, String var2, String var3, boolean var4, String var5) throws Exception { try { projectOperations.createEventLog(var5, var1.projectID, var1.subjectID, null, null, null, var2, ""DELETE AIM"", ""var4:"" + var4); EPADAIM var6 = getAIMDescription(var2, var5, var3); if (!""admin"".equals(var5) && !var6.userName.equals(var5) && !var6.userName.equals(""shared"") && !UserProjectService.isOwner(var3, var5, var6.projectID)) { log.warning(""No permissions to delete AIM:"" + var2 + "" for user "" + var5); throw new Exception(""No permissions to delete AIM:"" + var2 + "" for user "" + var5); } if (AIMUtil.isPluginStillRunning(var2)) throw new Exception(var2 + "" is still being processed by the plugin""); AIMUtil.deleteAIM(var2, var1.projectID); epadDatabaseOperations.deleteAIM(var5, var1, var2); if (var4 && var6.dsoSeriesUID != null && var6.dsoSeriesUID.length() > 0 && epadDatabaseOperations.getAIMsByDSOSeries(var6.dsoSeriesUID).size() == 0) { this.deleteSeries(new SeriesReference(var1.projectID, var6.subjectID, var6.studyUID, var6.dsoSeriesUID), false); } return HttpServletResponse.SC_OK; } catch (Exception e) { log.warning(""Error deleting AIM file "",e); throw e; } } "	0	0	0	0	1	0
public void Func1(float var1, float var2, float var3, String var4, boolean var5, boolean var6) { videos.add(new Video(group, var1, var2, var3, var4, var5, var6)); } 	0	0	0	0	1	0
public TileVending Func1(World var1, BlockPos var2) { return (TileVending) var1.getTileEntity(var2); } 	0	0	0	1	0	0
"private void Func1(int var1, int var2) { if (var1 > MAX_ARRAY_SIZE) { throw new BallerinaException(""Requested arrays size "" + var1 + "" exceeds limit: "" + MAX_ARRAY_SIZE); } if (var2 >= arrayBucket.length) { arrayBucket = Arrays.copyOf(arrayBucket, arrayBucket.length + DEFAULT_ARRAY_BUCKET_SIZE); } if (var2 > lastBucketIndex) { for (int var3 = lastBucketIndex + 1; var2 > lastBucketIndex; var3++) { arrayBucket[var3] = createArray(); lastBucketIndex++; } } } "	0	0	1	0	0	0
"public Step Func1(int var1, String var2, String var3, String var4, List<Requirement> var5) throws PreexistingEntityException, Exception { StepServer var6 = new StepServer(getEntity(), var1, var2); int var7 = getStepList().size(); var6.setNotes(var3); var6.setExpectedResult(var4.getBytes(""UTF-8"")); if (var6.getRequirementList() == null) { var6.setRequirementList(new ArrayList<>()); } var6.write2DB(); if (var5 != null) { var5.forEach((req) -> { var6.getRequirementList().add(req); }); } var6.write2DB(); update(this, getEntity()); assert getStepList().size() > var7; return var6.getEntity(); } "	1	1	1	0	0	0
"public Message Func1(SendDocument Func1) throws TelegramApiException { String var2; try { String var3 = getBaseUrl() + SendDocument.PATH; HttpPost var4 = new HttpPost(var3); var4.setConfig(requestConfig); if (Func1.isNewDocument()) { MultipartEntityBuilder var5 = MultipartEntityBuilder.create(); var5.addTextBody(SendDocument.CHATID_FIELD, Func1.getChatId()); var5.addBinaryBody(SendDocument.DOCUMENT_FIELD, new java.io.File(Func1.getDocument()), ContentType.APPLICATION_OCTET_STREAM, Func1.getDocumentName()); if (Func1.getReplayMarkup() != null) { var5.addTextBody(SendDocument.REPLYMARKUP_FIELD, Func1.getReplayMarkup().toJson().toString()); } if (Func1.getReplayToMessageId() != null) { var5.addTextBody(SendDocument.REPLYTOMESSAGEID_FIELD, Func1.getReplayToMessageId().toString()); } if (Func1.getCaption() != null) { var5.addTextBody(SendDocument.CAPTION_FIELD, Func1.getCaption(), ContentType.create(""text/plain"", StandardCharsets.UTF_8)); } if (Func1.getDisableNotification() != null) { var5.addTextBody(SendDocument.DISABLENOTIFICATION_FIELD, Func1.getDisableNotification().toString()); } HttpEntity var6 = var5.build(); var4.setEntity(var6); } else { List<NameValuePair> var7 = new ArrayList<>(); var7.add(new BasicNameValuePair(SendDocument.CHATID_FIELD, Func1.getChatId())); var7.add(new BasicNameValuePair(SendDocument.DOCUMENT_FIELD, Func1.getDocument())); if (Func1.getReplayMarkup() != null) { var7.add(new BasicNameValuePair(SendDocument.REPLYMARKUP_FIELD, Func1.getReplayMarkup().toJson().toString())); } if (Func1.getReplayToMessageId() != null) { var7.add(new BasicNameValuePair(SendDocument.REPLYTOMESSAGEID_FIELD, Func1.getReplayToMessageId().toString())); } if (Func1.getCaption() != null) { var7.add(new BasicNameValuePair(SendDocument.CAPTION_FIELD, Func1.getCaption())); } if (Func1.getReplayToMessageId() != null) { var7.add(new BasicNameValuePair(SendDocument.DISABLENOTIFICATION_FIELD, Func1.getDisableNotification().toString())); } var4.setEntity(new UrlEncodedFormEntity(var7, StandardCharsets.UTF_8)); } try (CloseableHttpResponse response = httpclient.execute(var4)) { HttpEntity var8 = response.getEntity(); BufferedHttpEntity var9 = new BufferedHttpEntity(var8); var2 = EntityUtils.toString(var9, StandardCharsets.UTF_8); } } catch (IOException e) { throw new TelegramApiException(""Unable to send document"", e); } JSONObject var10 = new JSONObject(var2); if (!var10.getBoolean(Constants.RESPONSEFIELDOK)) { throw new TelegramApiException(""Error at Func1"", var10.getString(ERRORDESCRIPTIONFIELD), var10.getInt(ERRORCODEFIELD)); } return new Message(var10.getJSONObject(Constants.RESPONSEFIELDRESULT)); } "	0	0	0	0	0	1
"public Message Func1(SendPhoto Func1) throws TelegramApiException { String var2; try { String var3 = getBaseUrl() + SendPhoto.PATH; HttpPost var4 = new HttpPost(var3); var4.setConfig(requestConfig); if (Func1.isNewPhoto()) { MultipartEntityBuilder var5 = MultipartEntityBuilder.create(); var5.addTextBody(SendPhoto.CHATID_FIELD, Func1.getChatId()); var5.addBinaryBody(SendPhoto.PHOTO_FIELD, new java.io.File(Func1.getPhoto()), ContentType.APPLICATION_OCTET_STREAM, Func1.getPhotoName()); if (Func1.getReplayMarkup() != null) { var5.addTextBody(SendPhoto.REPLYMARKUP_FIELD, Func1.getReplayMarkup().toJson().toString()); } if (Func1.getReplayToMessageId() != null) { var5.addTextBody(SendPhoto.REPLYTOMESSAGEID_FIELD, Func1.getReplayToMessageId().toString()); } if (Func1.getCaption() != null) { var5.addTextBody(SendPhoto.CAPTION_FIELD, Func1.getCaption(), ContentType.create(""text/plain"", StandardCharsets.UTF_8)); } if (Func1.getDisableNotification() != null) { var5.addTextBody(SendPhoto.DISABLENOTIFICATION_FIELD, Func1.getDisableNotification().toString()); } HttpEntity var6 = var5.build(); var4.setEntity(var6); } else { List<NameValuePair> var7 = new ArrayList<>(); var7.add(new BasicNameValuePair(SendPhoto.CHATID_FIELD, Func1.getChatId())); var7.add(new BasicNameValuePair(SendPhoto.PHOTO_FIELD, Func1.getPhoto())); if (Func1.getReplayMarkup() != null) { var7.add(new BasicNameValuePair(SendPhoto.REPLYMARKUP_FIELD, Func1.getReplayMarkup().toJson().toString())); } if (Func1.getReplayToMessageId() != null) { var7.add(new BasicNameValuePair(SendPhoto.REPLYTOMESSAGEID_FIELD, Func1.getReplayToMessageId().toString())); } if (Func1.getCaption() != null) { var7.add(new BasicNameValuePair(SendPhoto.CAPTION_FIELD, Func1.getCaption())); } if (Func1.getDisableNotification() != null) { var7.add(new BasicNameValuePair(SendPhoto.DISABLENOTIFICATION_FIELD, Func1.getDisableNotification().toString())); } var4.setEntity(new UrlEncodedFormEntity(var7, StandardCharsets.UTF_8)); } try (CloseableHttpResponse response = httpclient.execute(var4)) { HttpEntity var8 = response.getEntity(); BufferedHttpEntity var9 = new BufferedHttpEntity(var8); var2 = EntityUtils.toString(var9, StandardCharsets.UTF_8); } } catch (IOException e) { throw new TelegramApiException(""Unable to send photo"", e); } JSONObject var10 = new JSONObject(var2); if (!var10.getBoolean(Constants.RESPONSEFIELDOK)) { throw new TelegramApiException(""Error at Func1"", var10.getString(ERRORDESCRIPTIONFIELD), var10.getInt(ERRORCODEFIELD)); } return new Message(var10.getJSONObject(Constants.RESPONSEFIELDRESULT)); } "	0	0	0	0	0	1
@Test public void Func1() { assertNull(item.getKidItems()); item.populate(new TestItem() { @Override public long[] Func2() { return new long[]{1l, 2l}; } }); assertThat(item.getKidItems()).hasSize(2); assertEquals(1, item.getKidItems()[0].getRank()); assertEquals(2, item.getKidItems()[1].getRank()); } 	0	0	0	0	1	0
"public static synchronized void Func1(String var1) throws Exception { if (count == 0) { TestUtils.shutdownFailsafe(TESTING_PORT); ConfigurationContext var2 = getNewConfigurationContext(var1); receiver = new SimpleHTTPServer(var2, TESTING_PORT); try { receiver.Func1(); ListenerManager var3 = var2.getListenerManager(); TransportInDescription var4 = new TransportInDescription(Constants.TRANSPORT_HTTP); var4.setReceiver(receiver); if (var3 == null) { var3 = new ListenerManager(); var3.init(var2); } var3.addListener(var4, true); System.out.print(""Server started on port "" + TESTING_PORT + "".....""); } catch (Exception e) { e.printStackTrace(); } } try { Thread.sleep(2000); } catch (InterruptedException e1) { throw new AxisFault(""Thread interuptted"", e1); } waitForService(); count++; } "	0	0	0	0	1	0
"public void Func1() { aliens = new Vector<Alien>(0); alienBullets = new Vector<Bullet>(0); shipBullets = new Vector<Bullet>(0); barriers = new Vector<Barrier>(0); logfile = LogFile.getInstance(); logfile.open(); logfile.writeString(""Game started at "" + new Date()); spaceship = new Spaceship(); highscoremanager = new HighscoreManager(); level = LevelFactory.createLevel(levelNumber); aliens = level.createAliens(); barriers = level.createBarriers(); } "	0	0	0	0	1	0
"public static void Func1(){ if (forceDebugEnabled || isDeobfEnvironment){ Display.setTitle(new StringBuilder().append(Display.getTitle()).append("" - HardcoreEnderExpansion - "").append(isDeobfEnvironment ? ""dev"" : ""debug"").append(' ').append(HardcoreEnderExpansion.modVersion).toString()); } } "	0	0	0	0	1	0
"@Procedure @Description(""apoc.mongodb.Func1(host-or-port,var2-or-null,var3-or-null,var4-or-null) yield value - perform a find operation on mongodb var3"") public Stream<LongResult> Func1(@Name(""host"") String var1, @Name(""var2"") String var2, @Name(""var3"") String var3, @Name(""var4"") Map<String,Object> var4) { long Func1 = getColl(var1, var2, var3).Func1(var4); return Stream.of(new LongResult(Func1)); } "	0	0	0	0	1	0
"@Procedure @Description(""apoc.mongodb.Func1(host-or-port,var2-or-null,var3-or-null,var4-or-null) yield value - perform a Func1 operation on mongodb var3"") public Stream<MapResult> Func1(@Name(""host"") String var1, @Name(""var2"") String var2, @Name(""var3"") String var3, @Name(""var4"") Map<String,Object> var4) { Map<String, Object> var5 = getColl(var1, var2, var3).Func1(var4); return Stream.of(new MapResult(var5)); } "	0	0	0	0	1	0
public void Func1(float var1) { selectedSign.setPosition(this.getPosition().x-0.5f, this.getPosition().y-0.5f); if(health <= 0) getScene().removeObject(this); for(GameObject var2 : getScene().getObjects()) { if(var2 instanceof Projectile) { if(this.city != ((Projectile)var2).getOwner().getCity()) { if(var2.getHitbox().collision(getHitbox())) { onHit(((Projectile)var2)); ((Projectile)var2).onHit(); } } } } if (Gdx.input.isKeyJustPressed(Keys.Y)) { inputInventory.add(type.getBuildResourcesArray()); } if (buildState == BuildState.Clearing) { if (toClear.size() > 0) assignGetPropTask(toClear); else buildState = BuildState.InProgress; } else if (buildState == BuildState.InProgress) { if (isBuildingDone()) { buildState = BuildState.Done; startProduction(); inputInventory.remove(type.getBuildResourcesArray()); setSprite(type.getSprite()); } else { assignGatherTask(toGather); } } else { if (productionGatheringDone()) { inputInventory.remove(type.getInputResourcesArray()); outputInventory.add(type.getOutputResourceArray()); startProduction(); } else { assignGatherTask(toGather); } } } 	0	0	0	0	1	0
"public void Func1(BinlogEventV4HeaderImpl var1) throws IOException { if(this.available() != 0) { throw new RuntimeException(""assertion failed!  We left "" + this.available() + ""unconsumed bytes in the buffer for event: "" + var1); } if ( isChecksumEnabled() && var1.getEventType() != MySQLConstants.FORMAT_DESCRIPTION_EVENT) { long var2 = crc.getValue(); this.setReadLimit(0); Long var3 = this.readLong(4); if ( var3.longValue() != var2 ) { throw new CRCException(var1); } } } "	0	0	1	1	0	0
public boolean Func1() { return !imagem.contains(CadastrarFornecedor.NO_IMG); } 	0	0	0	1	1	0
@Override public Object Func1(Object var1) { Entry var2 = (Entry) super.Func1(var1); if(var2 != null) { if(!var2.isActive()) { remove(var1); var2 = null; } } return var2; } 	0	0	0	0	1	0
@Override public void Func1(WOResponse var1, WOContext var2) { if(entry == null) { WOResponse var3 = application().createResponseInContext(var2); var3.setHeaders(var1.headers()); var3.setUserInfo(var1.userInfo()); super.Func1(var3, var2); String var4 = var3.contentString(); entry = new Entry(var4, cacheDuration(), (var2.hasSession() ? var2.session().sessionID() : null)); cache.put(values(), entry); } String var4 = entry.var4(var2); var1.appendContentString(var4); } 	0	0	0	0	0	1
"@Override public void Func1(Stage var1) throws Exception { if(checkOnlineVersion()){ Alert var2 = new Alert(AlertType.CONFIRMATION); var2.setTitle(APP_NAME); var2.setHeaderText(""A new version is available !""); var2.setContentText(String.format(""A new version of %s is available online !"", APP_NAME)); ButtonType var3 = new ButtonType(""Get Update""); ButtonType var4 = new ButtonType(""Continue"", ButtonData.CANCEL_CLOSE); var2.getButtonTypes().setAll(var3, var4); Optional<ButtonType> var5 = var2.showAndWait(); if (var5.get() == var3){ if(Desktop.isDesktopSupported()){ new Thread(() -> { try { URI var6 = new URI(""https://drive.google.com/open?id=0B2162Wd9vePmRXdieVc2QzdraFU""); Desktop.getDesktop().browse(var6); System.exit(0); } catch (IOException | URISyntaxException e) { ErrorPrint.printError(e); e.printStackTrace(); } }).Func1(); } } else { } } if(initApp()){ File var7 = new File(""DebugLog.txt""); if(var7.exists()) var7.delete(); xmlDir = new File(GAME); if(!xmlDir.exists()) xmlDir.mkdir(); new ListManager(PATH); } } "	0	0	1	0	1	0
@Test(expected = CancellationException.class) public void Func1() throws InterruptedException, ExecutionException, TimeoutException { IExecutorService var1 = client.getExecutorService(randomString()); CancellationAwareTask var2 = new CancellationAwareTask(5000); Future var3 = var1.submit(var2); try { var3.get(1, TimeUnit.SECONDS); } catch (TimeoutException ignored) { } var3.cancel(true); var3.get(); } 	0	0	0	0	1	0
"public void Func1(Object var1){ super.Func1(var1); try{ driver = (DriverInterface) var1; if(log==null){ log = new LogUtilities(this.staf); } dc = new RESTDriverCommand(); dc.setLogUtilities(log); }catch(Exception x){ IndependantLog.error(""TIDDriverLogCommands requires a valid DriverInterface object for initialization!\n""+ x.getMessage()); } } "	0	0	0	0	1	0
"private int Func1(final DistanceUnit var1, final double var2, final DistanceUnit var3) { double var4 = var1.convertTo(var2, var3); int var5 = (int) (Math.log(var4) / Math.log(10)); double var6 = Math.pow(10, var5); int var7 = (int) (var4 / var6); switch (var7) { case 1: return 2; case 2: return 2; case 5: return 5; case 10: return 2; default: throw new RuntimeException(""Invalid interval: "" + var4 + var3 + "" ("" + var7 + "")""); } } "	0	0	0	1	0	0
private DistanceUnit Func1(final DistanceUnit var1, final double var2, final boolean var3) { if (var3) { return var1; } else { return DistanceUnit.getBestUnit(var2, var1); } } 	0	0	0	1	0	0
private int Func1(final ScaleBarRenderSettings var1) { return (int) Math.ceil(var1.getParams().fontSize * var1.getDpiRatio()); } 	0	0	0	1	0	0
@Override public int Func1() { return videoData.length; } 	0	0	1	0	1	0
"private void Func1(final ActorRef var1) throws URISyntaxException{ String var2 = ""/restcomm/audio/""; String var3 = ""alert.wav""; var2 += var3 == null || var3.equals("""") ? ""beep.wav"" : var3; URI var4 = null; var4 = UriUtils.resolve(new URI(var2)); final Play var5 = new Play(var4, 1); msConferenceController.tell(var5, var1); } "	0	0	0	0	1	0
"public String Func1(int var1) { return String.join(""_"", getBarcodesFor(var1)); } "	0	0	0	0	1	0
@Override public void Func1(Loader<Object> var1, Object var2) { String var3 = (String) var2; switch (var1.getId()) { case LIVELINKS: handleLivelinksResponse(var3); break; case FETCH_MESSAGE: onReceiveUpdate(var3); subscribeToUpdates(); break; } } 	0	0	0	0	1	0
"@Override public void Func1(ChannelHandlerContext var1) throws Exception { var1.close(); if (HTTPTransportContextHolder.getInstance().getHandlerExecutor() != null) { HTTPTransportContextHolder.getInstance().getHandlerExecutor() .executeAtSourceConnectionTermination(Integer.toString(var1.hashCode())); } if (connectionManager.getPoolConfiguration().getNumberOfPools() == 0) { targetChannelPool.forEach((k, genericObjectPool) -> { try { genericObjectPool.close(); } catch (Exception e) { log.error(""Couldn't close target channel socket connections"", e); } }); } else if (connectionManager.getPoolConfiguration().getNumberOfPools() == 2) { targetChannelPerHostPool.forEach((k, targetChannel) -> targetChannel.getChannel().close()); } connectionManager.notifyChannelInactive(); } "	0	0	0	0	1	0
@Test public void Func1() { long var1 = DateUtils.getStartOfToday(); when(prefs.isFirstRun()).thenReturn(true); behavior.onStartup(); verify(prefs).setFirstRun(false); verify(prefs).updateLastHint(-1, var1); verify(screen).showIntroScreen(); } 	0	0	0	0	1	0
public String Func1() { return this.hallAdmin; } 	0	0	0	0	1	0
"@Test public void Func1() throws JsonParseException, JsonMappingException, IOException, TestEvalException, SAXException, ParserConfigurationException, TransformerException { logger.info(""Checking invalid-bad-datatype.xml""); JacksonHandle var1 = null; try { var1 = evalOneResult("""", ""es:model-validate(fn:doc('invalid-bad-datatype.xml'))"", new JacksonHandle()); fail(""eval should throw an exception for unsupported datatypes""); } catch (TestEvalException e) { logger.info(e.getMessage()); assertTrue(""Must contain invalidity message but got: ""+e.getMessage(), e.getMessage().contains(""ES-MODEL-INVALID: Unsupported datatype: botcheddt."")); } } "	0	0	0	0	1	0
"@Test public void Func1() throws JsonParseException, JsonMappingException, IOException, TestEvalException, SAXException, ParserConfigurationException, TransformerException { logger.info(""Checking invalid-missing-info.json""); JacksonHandle var1 = null; try { var1 = evalOneResult("""", ""es:model-validate(fn:doc('invalid-missing-info.json'))"", new JacksonHandle()); fail(""eval should throw an exception for missing info""); } catch (TestEvalException e) { logger.info(e.getMessage()); assertTrue(""Must contain invalidity message but got: ""+e.getMessage(), e.getMessage().contains(""ES-MODEL-INVALID: Entity Type Document must contain exactly one info section."")); } } "	0	0	0	0	1	0
"@Test public void Func1() { assertThat(new XmlSchemaValidator(XML_SCHEMA).isValid( """"), is(""Premature end of file."")); } "	0	0	0	0	1	0
@Override public EconomyResponse Func1(OfflinePlayer var1, double var2) { return Func1(UuidUtil.requestUuid(var1).toString(), var2); } 	0	0	0	0	1	0
@Override public boolean Func1(int var1, KeyEvent var2) { if (var1 == KeyEvent.KEYCODE_BACK) { GodotLib.quit(); return true; } if (var1 == KeyEvent.KEYCODE_VOLUME_UP || var1 == KeyEvent.KEYCODE_VOLUME_DOWN) { return super.Func1(var1, var2); }; int var3 = var2.getSource(); if ((var3 & InputDevice.SOURCE_JOYSTICK) != 0 || (var3 & InputDevice.SOURCE_DPAD) != 0 || (var3 & InputDevice.SOURCE_GAMEPAD) != 0) { if (var2.getRepeatCount() > 0) // ignore key echo return true; int var4 = get_godot_button(var1); int var5 = find_joy_device(var2.getDeviceId()); GodotLib.joybutton(var5, var4, true); return true; } else { GodotLib.key(var1, var2.getUnicodeChar(0), true); }; return super.Func1(var1, var2); } 	0	0	0	0	1	0
"private void Func1(String var1) { @SuppressWarnings(""unchecked"") List<Map<String, Object>> var2 = (List<Map<String, Object>>) config.get(var1); if (var2 != null) { List<Map<String, Object>> var3 = getResourcesForWorkaround(var2); if (!var3.isEmpty()) { List<Map<String, Object>> var4 = Lists.newArrayList(Iterables.filter(var2, Predicates.not(Predicates.in(var3)))); nameValue(var1, var4); addToProfile(SenchaUtils.DEVELOPMENT_PROFILE, var1, var3); addToProfile(SenchaUtils.TESTING_PROFILE, var1, var3); addToProfile(SenchaUtils.PRODUCTION_PROFILE, var1, getConvertedResourcesForProduction(var3)); } } } "	0	0	1	0	1	0
private void Func1(int var1) { if (WorldTypeRTG.chunkProvider != this) return; IChunkProvider var2 = worldObj.getChunkProvider(); Set<PlaneLocation> var3 = doableLocations(var1); for (PlaneLocation var4: var3) { toDecorate.remove(var4); } for (PlaneLocation var4: var3) { doPopulate(var2,var4.x(),var4.z()); } } 	0	0	0	0	1	0
"private View Func1(String var1, int var2) { View var3 = LayoutInflater.from(this).inflate(R.layout.project_details_tab, null); TextView var4 = (TextView) var3.findViewById(R.id.var2); TextView var5 = (TextView) var3.findViewById(R.id.tab_name); DecimalFormat var6 = new DecimalFormat(""#,###,###""); var4.setText(var6.format(var2)); var5.setText(var1); return var3; } "	0	0	0	0	1	0
"private void Func1() { CharSequence var1 = poem.get(); int var2 = Selection.getSelectionStart(var1); if (var2 == var1.length() || var2 == -1) var2 = 0; int var3 = Selection.getSelectionEnd(var1); if (var2 == var3 || var3 == -1) var3 = var1.length(); Log.d(TAG, ""selection "" + var2 + "" - "" + var3); mTts.Func1(var1.toString().substring(var2, var3)); } "	0	0	0	0	1	0
"@Override public void Func1(final List<String> var1) { if (attached) { TagsManager.Bridge.element(inputElement).setTags(var1); } else { inputElement.setValue(String.join("", "", var1)); } } "	0	0	0	0	1	0
@Override public int Func1(Vector2f var1, Vector2f var2) { SaboteurGame var3 = SaboteurGame.var3; return ((int) ((var3.getAngleToPlayer(var1) - var3.getAngleToPlayer(var2)) * 100d)); } 	0	0	0	0	1	0
"private static User Func1(DirContext var1, String var2, String var3, String var4) throws NamingException, SQLException { Map<String, String> var5 = getUserAttributes(var1, var2, var3, var4, LDAP_DISPLAY_NAME_KEY, LDAP_MAIL_KEY, LDAP_DEPARTMENT_NUMBER_KEY); String var6 = var5.get(LDAP_DISPLAY_NAME_KEY); String[] var7 = var6.trim().replaceAll("" +"", "" "").split("" ""); String var8 = var7[0]; String var9 = var7[1]; String var10 = var5.get(LDAP_MAIL_KEY); String var11 = var5.get(LDAP_DEPARTMENT_NUMBER_KEY); int var12 = 0; if (StringUtils.isNotBlank(var11)) { try { var12 = Integer.parseInt(var11); } catch (NumberFormatException e) { Logger.error(""Convert var11 number failed. Error message: "" + e.getMessage()); var12 = 0; } } User var13 = new User(); var13.var10 = var10; var13.var3 = var3; var13.name = var8 + "" "" + var9; var13.var12 = var12; return var13; } "	0	0	1	0	0	0
public static EventIO Func1(CluckNode var1, String var2) { return EventIO.compose(subscribeEI(var1, var2), subscribeEO(var1, var2)); } 	0	0	0	0	1	0
public static BooleanIO Func1(CluckNode var1, String var2, boolean var3) { return BooleanIO.compose(subscribeBI(var1, var2, var3), subscribeBO(var1, var2)); } 	0	0	0	0	1	0
@Override protected Void Func1(Void... var1) { put(url, obj, expiresAt); return null; } 	0	0	0	0	1	0
private LineStop Func1(LineStop var1, Function<LineStop, LineStop.Builder> var2) { LineStop.Builder var3 = var2.apply(var1); LineStop var4 = var1.getNext(); if (var3 != null) { while (var4 != null) { var3.addNext(var2.apply(var4)); var4 = var4.getNext(); } } return var3 != null ? var3.build() : null; } 	1	0	0	0	1	0
"@Override public Command Func1(String var1) { assert var1 != null; logger.entering(""JJParser"", ""Func1"", var1); UserCommandLexer var2 = new UserCommandLexer(new ANTLRInputStream(var1)); var2.setAliases(aliases); UserCommandParser var3 = new UserCommandParser(new CommonTokenStream(var2)); ParseTree var4 = var3.cmd(); JoltCommandVisitor var5 = new JoltCommandVisitor(var1); try { return var5.visit(var4); } catch (RuntimeException e) { logger.log(Level.INFO, ""Exception parsing \""{0}\"": {1}"", new Object[] { var1, e }); if (e.getMessage() == null) { return new InvalidCommand(""This feature is not yet implemented.""); } else { return new InvalidCommand(e.getMessage()); } } } "	0	0	0	0	1	0
"public static boolean Func1(String var1, String var2, List<Prompt> var3, String var4, String var5, String var6) { List<ResponseType> var7 = ResponseType.fromString(var1, "" ""); if (var7.contains(ResponseType.TOKEN) || var7.contains(ResponseType.ID_TOKEN)) { if (StringUtils.isBlank(var4)) { return false; } } if (StringUtils.isNotBlank(var5) && StringUtils.isNotBlank(var6)) { return false; } boolean var8 = var1 != null && !var1.isEmpty() && var2 != null && !var2.isEmpty(); return var8 && validatePrompt(var3); } "	0	0	0	0	1	0
@Override public void Func1(){ setNewRoundEnabled(true); } 	0	0	0	0	1	0
"@NotNull private static CompilerConfiguration Func1(String var1, String var2, final ErrorReporter var3) { MessageCollector var4 = new MessageCollector() { boolean var5 = false; @Override public void Func2(@NotNull CompilerMessageSeverity var6, @NotNull String var7, @NotNull CompilerMessageLocation var8) { if (var6 == ERROR || var6 == EXCEPTION) { var3.addLoadingError(var2, PLAIN_FULL_PATHS.render(var6, var7, var8)); var5 = true; } } @Override public boolean var5() { return var5; } @Override public void Func4() {} }; CompilerConfiguration var9 = new CompilerConfiguration(); var9.put(MESSAGE_COLLECTOR_KEY, var4); var9.put(MODULE_NAME, ""LivePluginScript""); JvmContentRootsKt.addJvmClasspathRoots(var9, PathUtil.getJdkClassesRoots()); var9.add(CONTENT_ROOTS, new KotlinSourceRoot(var1)); var9.add(SCRIPT_DEFINITIONS, new KotlinScriptDefinition(Reflection.createKotlinClass(KotlinScriptTemplate.class))); var9.put(RETAIN_OUTPUT_IN_MEMORY, false); String var10 = PathManager.getJarPathForClass(IntelliJLaf.class); assert var10 != null; File[] var11 = new File(var10).getParentFile().listFiles(); assert var11 != null; for (File var12 : var11) { var9.add(CONTENT_ROOTS, new JvmClasspathRoot(var12)); } for (String var13 : fileNamesMatching(DownloadKotlinCompilerLib.LIB_FILES_PATTERN, LIVEPLUGIN_LIBS_PATH)) { var9.add(CONTENT_ROOTS, new JvmClasspathRoot(new File(LIVEPLUGIN_LIBS_PATH + ""/"" + var13))); } String var14 = new File(var10).getParentFile().getAbsolutePath(); for (String var13 : fileNamesMatching(""kotlin-.*jar"", var14)) { var9.add(CONTENT_ROOTS, new JvmClasspathRoot(new File(var14 + ""/"" + var13))); } var9.add(CONTENT_ROOTS, new JvmClasspathRoot(new File(LIVEPLUGIN_LIBS_PATH))); var9.add(CONTENT_ROOTS, new JvmClasspathRoot(new File(PathManager.getPluginsPath() + ""/LivePlugin/classes""))); return var9; } "	0	0	0	0	0	1
"private void Func1(int var1) { if (checkMode == CHECK_SINGLE_FUTURE) { setSingleCheck(var1); } Log.d(TAG, ""Func1: "" + var1); getListView().setItemChecked(var1, true); } "	1	0	0	0	0	0
public static void Func1() { get().scopeStack.Func1(); } 	1	0	1	0	1	0
"@RequestMapping(""/supplier/Func1"") public String Func1(ModelMap var1){ var1.addAttribute(""foodItems"", this.supplierService.getAllFoodItems()); return ""Func1""; } "	0	0	0	0	1	0
public void Func1(View var1) throws Exception { String var2 = customQueryText.getText().toString(); Intent var3 = new Intent(this, DatabaseListFragment.class); var3.putExtra(LibraryConstants.PREFS_KEY_QUERY, var2); startActivity(var3); } 	0	0	0	0	1	0
@Override protected MeetingPagerAdapter Func1(Void... var1) { if (meetingId < 0) { Meeting var2 = Meeting.createNewMeeting(MeetingActivity.this); mMeetingId = var2.getId(); } else { mMeetingId = meetingId; } int var3 = PreferenceManager.getDefaultSharedPreferences(MeetingActivity.this).getInt(Constants.PREF_TEAM_ID, Constants.DEFAULT_TEAM_ID); return new MeetingPagerAdapter(MeetingActivity.this, var3, getSupportFragmentManager()); } 	1	0	0	0	1	0
"public Location Func1(String var1) { String var2 = server.captureRegion(new String[]{}); List<Location> var3 = this.findTextFromImage(var1, var2); if (var3.size() == 0) { throw new RuntimeException(""Text ""+var1+"" not found from page""); } else { if (var3.size() > 1) { SikuliLogger.log(""Text found multiple times from page, clicking first occurrence""); } return var3.get(0); } } "	0	0	0	0	1	0
"private void Func1() { SqlJobTaskBase var1 = new SqlJobTaskBase(this.getActivity(), ""Searching media database for missing 'displayname'-s:\n"", null) { private int var2 = -2; private int var3 = 0; @Override protected void Func2(Long var4, Cursor var5) { if (var2 == -2) var2 = var5.getColumnIndex(FotoSql.SQL_COL_PATH); var3 += MediaScanner.updatePathRelatedFields(getActivity(), var5, var5.getString(var2), mColumnIndexPK, var2); } @Override protected void Func3(SelectedItems var6) { if (!isCancelled()) { onMissingDisplayNamesComplete(var3, mStatus); } } }; QueryParameter var7 = FotoSql.queryGetMissingDisplayNames; var1.execute(var7); } "	1	0	0	1	0	0
"private int Func1() { int var1 = storeInventory[getButtonIndex(currentItem)].getMax() - storeInventory[getButtonIndex(currentItem)].getCount(); currentBuyers = p.canGetItem(currentItem, var1); if ( currentItem == Item.ITEM_TYPE.WAGON && p.getVehicle() == null ) { if ( var1 > 1 ) { String var2 = ""Please buy a single wagon first!""; failedBuyModal = new Modal(container, this, var2, ""Ok""); return -1; } else if ( p.getMoney() > currentItem.getCost() ) { p.setVehicle(new Wagon()); inv.removeItem(currentItem, 1); p.setMoney(p.getMoney() - Item.ITEM_TYPE.WAGON.getCost()); storeInventory[getButtonIndex(currentItem)].setMax(inv.getNumberOf(currentItem)); updateLabels(currentItem); return 1; } else { String var2 = ""You don't have enough money to buy a wagon."" + ""\nBetter prepare to make it on foot.""; failedBuyModal = new Modal(container, this, var2, ""Ok""); return -1; } } else if ( currentBuyers.size() == 0 ) { String var2; if (p.getMoney() < var1 * currentItem.getCost()) { var2 = ""You don't have enough money for this purchase.""; } else { var2 = ""No one can carry that much weight!""; } failedBuyModal = new Modal(container, this, var2, ""Ok""); return -1; } else { currentPurchase = inv.removeItem(currentItem, var1); String[] var3 = new String[currentBuyers.size()]; for (int var4 = 0; var4 < var3.length; var4++) { var3[var4] = currentBuyers.get(var4).getName(); } SegmentedControl var5 = new SegmentedControl(container, 400, 200, 3, 2, 20, true, 1, var3); buyModal = new Modal(container, this, ""Choose who will buy this item"", var5, ""Buy"", ""Cancel""); return 0; } } "	0	0	0	0	1	0
"private String Func1(String var1) throws SQLException { int var2 = 9000000; String var3 = """"; int var4 = 0; ResultSet var5 = null; String var6 = """"; String var7 = ""SELECT AUTO_INCREMENT FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'mentcare' AND TABLE_NAME = 'Users'""; try (Connection conn = DBConfig.getConnection(); PreparedStatement getID = conn.prepareStatement(var7, Statement.RETURN_GENERATED_KEYS);) { System.out.println(""Query Sent"" + getID.toString()); var5 = getID.executeQuery(); if (var5.next()) { var4 = var5.getInt(""AUTO_INCREMENT""); System.out.println(""var4"" + var4); } }//end try var2 = var2 + var4; var3 = """" + var2; var3.replaceFirst(var3, ""0""); var6 = var1 + var3; return var6; }//end method "	0	0	0	0	1	0
"private String Func1() { System.out.print(""-> ""); return input.nextLine(); } "	0	0	1	0	1	0
public boolean Func1(int var1, Item var2) { return inventoryContents[var1] != ItemStack.EMPTY && inventoryContents[var1].getItem() == var2; } 	0	0	0	0	1	0
@Override public ItemStack Func1(int var1) { if (var1 >= inventoryContents.length) return ItemStack.EMPTY; if (inventoryContents[var1] != ItemStack.EMPTY) { ItemStack var2 = inventoryContents[var1]; inventoryContents[var1] = ItemStack.EMPTY; return var2; } return ItemStack.EMPTY; } 	0	0	1	0	1	0
public ArrayList<Integer> Func1(int var1, int var2) { return cells[var1 - 1][var2 - 1].Func1(); } 	0	0	0	0	1	0
"private String Func1(String var1) { assert var1 != null; String var2 = null; if (var1.equals(GroupData.NOT_GROUPED) || var1.isEmpty()) { var2 = """"; } else { var2 = ""["" + var1 + ""] ""; } return var2; } "	0	0	0	0	1	0
"@Override public boolean Func1(Set<? extends TypeElement> var1, RoundEnvironment var2) { List<String> var3 = new ArrayList<>(); String var4 = ""RxRetroBus_""; for (Element var5 : var2.getElementsAnnotatedWith(GenerateEvents.class)) { String var6 = var5.asType().toString(); String var7 = var5.getSimpleName().toString(); String var8 = var4 + var7; var3.add(var8); String var9 = var5.getAnnotation(GenerateEvents.class).var9(); StringBuilder var10 = new StringBuilder() .append(""package com.blarley.rxretrobusseed.annotationprocessor.generated;\n\n"") .append(""import retrofit2.Retrofit;\n"" + ""import io.reactivex.android.schedulers.AndroidSchedulers;\n"" + ""import io.reactivex.functions.Consumer;\n"" + ""import io.reactivex.schedulers.Schedulers;\n"" + ""import com.blarley.rxretrobusseed.library.bus.RxRetroBus;\n""); var10.append(""public class "" + var8 + "" {\n\n""); var10.append(""\tprivate "" + var6 + "" client;\n""); var10.append(""\tprivate RxRetroBus bus;\n""); var10.append(""\tpublic "" + var8 + ""(Retrofit.Builder retrofitBuilder, RxRetroBus bus) { \n"" + ""\t\tthis.client = retrofitBuilder.var9(\"""" + var9 + ""\"")\n"" + ""\t\t.build()\n"" + ""\t\t.create("" + var6 + "".class);\n"" + ""\t\tthis.bus = bus;\n"" + ""\t}\n\n""); for (Element var11 : var2.getElementsAnnotatedWith(Publish.class)) { if (var11 instanceof ExecutableElement) { ExecutableElement var12 = (ExecutableElement) var11; String var13 = var12.getSimpleName().toString(); var10.append(""\tpublic void "" + var13 + ""(""); String var14 = """"; StringBuilder var15 = new StringBuilder(); StringBuilder var16 = new StringBuilder(); for (VariableElement var17 : var12.getParameters()) { var15.append(var14) .append(var17.asType() + "" "") .append(var17.getSimpleName().toString()); var16.append(var14) .append(var17.getSimpleName().toString()); var14 = "", ""; } var10.append(var15) .append("") {\n""); String var18 = var12.getReturnType().toString(); Pattern var19 = Pattern.compile(""<(.*?)>""); Matcher var20 = var19.var20(var18); String var21 = """"; while (var20.find()) { var21 += var20.group(1); } Publish var22 = var12.getAnnotation(Publish.class); //TODO: Build a model for this and pass that into the var12 var10.append(""\t\tbus.addObservable(client."" + var13 + ""("") .append(var16) .append(""),"") .append(var21 + "".class, \"""") .append(var22.eventName() + ""\"", "") .append(var22.cacheResult() + "");\n""); var10.append(""\t}\n""); } } var10.append(""}\n""); try { JavaFileObject var23 = processingEnv.getFiler().createSourceFile(""com.blarley.rxretrobusseed.annotationprocessor.generated."" + var8); Writer var24 = var23.openWriter(); var24.write(var10.toString()); var24.flush(); var24.close(); } catch (IOException e) { } } StringBuilder var25 = new StringBuilder() .append(""package com.blarley.rxretrobusseed.annotationprocessor.generated;\n\n"") .append(""import retrofit2.Retrofit;\n\n"") .append(""import com.blarley.rxretrobusseed.library.bus.RxRetroBus;\n\n"") .append(""public class Clients {\n""); StringBuilder var26 = new StringBuilder(); for(String var27: var3) { String[] var28 = var27.split(""_""); String var7 = var28[1]; var25.append(""\tpublic "" + var27 + "" "" + var7 + "";\n""); var26.append(""\t\tthis."" + var7 + "" = new "" + var27 + ""(retrofitBuilder, bus);\n""); } var25.append(""\n\tpublic Clients(Retrofit.Builder retrofitBuilder, RxRetroBus bus) {\n""); var25.append(var26); var25.append(""\t}\n"") .append(""}""); try { JavaFileObject var23 = processingEnv.getFiler().createSourceFile(""com.blarley.rxretrobusseed.annotationprocessor.generated.Clients""); Writer var24 = var23.openWriter(); var24.write(var25.toString()); var24.flush(); var24.close(); } catch (IOException e) { } return true; } "	0	0	0	0	1	0
private void Func1(String var1) { if (isNotificationEnabled()) { final Uri var2 = IssueEntry.buildIssueUriWithStatusAndCreatedDate(STATUS_ISSUE_OPEN, var1); final Cursor var3 = mContext.getContentResolver().query(var2, ISSUES_COLUMNS, null, null, null); final NotificationManager var4 = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE); if (var3 != null) { final Set<ProjectData> var5 = new HashSet<>(); while (var3.moveToNext()) { final int var6 = var3.getInt(INDEX_ISSUE_ID); final String var7 = var3.getString(INDEX_PROJECT_ID); final String var8 = var3.getString(INDEX_PROJECT_NAME); final String var9 = var3.getString(INDEX_ISSUE_KEY); final String var10 = var3.getString(INDEX_ISSUE_SUMMARY); var5.add(new ProjectData(var7, var8)); final Intent var11 = new Intent(mContext, IssueDetailActivity.class); var11.setData(IssueEntry.buildIssueUriFromIssueId(String.valueOf(var6))); final PendingIntent var12 = PendingIntent.getActivity(mContext, 1, var11, PendingIntent.FLAG_UPDATE_CURRENT); final NotificationCompat.Builder var13 = new NotificationCompat.Builder(mContext) .setSmallIcon(R.mipmap.ic_launcher) .setContentTitle(mContext.getString(R.string.notification_title)) .setContentText(mContext.getString(R.string.notification_message, var9, var10)) .setContentIntent(var12) .setAutoCancel(true) .setGroup(var7); var4.notify(var6, var13.build()); } var3.close(); for (ProjectData var14 : var5) { final Intent var11 = new Intent(mContext, IssueDetailActivity.class); var11.setData(BacklogContract.IssuePreviewEntry.buildIssuePreviewsWithProjectId(var14.getProjectId())); final PendingIntent var12 = PendingIntent.getActivity(mContext, 1, var11, PendingIntent.FLAG_UPDATE_CURRENT); final NotificationCompat.Builder var13 = new NotificationCompat.Builder(mContext) .setSmallIcon(R.mipmap.ic_launcher) .setContentTitle(mContext.getString(R.string.notification_multiple_title)) .setContentText(mContext.getString(R.string.notification_multiple_message, var14.getProjectName())) .setContentIntent(var12) .setAutoCancel(true) .setGroup(var14.getProjectId()) .setGroupSummary(true); var4.notify(Integer.valueOf(var14.getProjectId()), var13.build()); } } } } 	0	0	0	0	1	0
"@Override protected void Func1(ReportCampaign var1) { Assert.assertEquals(1232422123L, var1.getAccountId().longValue()); Assert.assertEquals(""2013-05-10"", var1.getDay()); Assert.assertEquals(0.88, var1.getCost().doubleValue()); Assert.assertEquals(6L, var1.getClicks().longValue()); Assert.assertEquals(757L, var1.getImpressions().longValue()); Assert.assertEquals(0L, var1.getConvertedClicks().longValue()); Assert.assertEquals(0.79, var1.getCtrBigDecimal().doubleValue()); Assert.assertEquals(1.16, var1.getAvgCpm().doubleValue()); Assert.assertEquals(0.15, var1.getAvgCpc().doubleValue()); Assert.assertEquals(3.21, var1.getAvgPositionBigDecimal().doubleValue()); Assert.assertEquals(""EUR"", var1.getCurrencyCode()); Assert.assertEquals(132449648L, var1.getCampaignId().longValue()); Assert.assertEquals(""active"", var1.getCampaignStatus()); Assert.assertEquals(1.00, var1.getBudget().doubleValue()); Assert.assertEquals(412987L, var1.getBudgetId().longValue()); } "	0	0	1	0	1	0
"@Override protected void Func1(ReportCampaign var1) { Assert.assertEquals(1232422123L, var1.getAccountId().longValue()); Assert.assertEquals(""2013-05-01"", var1.getDay()); Assert.assertEquals(1.11, var1.getCost().doubleValue()); Assert.assertEquals(5L, var1.getClicks().longValue()); Assert.assertEquals(927L, var1.getImpressions().longValue()); Assert.assertEquals(0L, var1.getConvertedClicks().longValue()); Assert.assertEquals(0.54, var1.getCtrBigDecimal().doubleValue()); Assert.assertEquals(1.20, var1.getAvgCpm().doubleValue()); Assert.assertEquals(0.22, var1.getAvgCpc().doubleValue()); Assert.assertEquals(3.59, var1.getAvgPositionBigDecimal().doubleValue()); Assert.assertEquals(""EUR"", var1.getCurrencyCode()); Assert.assertEquals(132449648L, var1.getCampaignId().longValue()); Assert.assertEquals(""active"", var1.getCampaignStatus()); Assert.assertEquals(1.00, var1.getBudget().doubleValue()); Assert.assertEquals(41273L, var1.getBudgetId().longValue()); } "	0	0	1	0	1	0
"@TaskAction public void Func1() { UploadPluginExtension var1 = getProject().getExtensions().findByType(UploadPluginExtension.class); final FileCollection var2 = getProject().getConfigurations().getByName(""archives"").getAllArtifacts().getFiles(); for (final File var3 : var2) { try { final ArtifactHashes var4 = calculateHashes(var3); final ArtifactHashes var5 = getArtifactoryHashes(var1, var3.getName()); if (hashesDiffer(var4, var5)) { upload(var1, var3); } else { logger.quiet(""Skipping upload since checksums match for {}"", var3); } } catch (IOException | NoSuchAlgorithmException e) { throw new GradleException(""Failed to upload var3 "" + var3, e); } } } "	0	0	0	0	1	0
"private CodeFragment Func1(String var1, Type var2, boolean var3) { CodeFragment var4 = new CodeFragment(); if (!symbolTable.containsVariable(var1)) { String var5 = this.generateNewRegister(); symbolTable.addVariable(new Variable(var1, var2, var5, var3)); ST var6 = new ST( ""<var5> = alloca <var2> ; <comment> declaration\n""); var6.add(""var5"", var5); var6.add(""var2"", var2.getCode()); var6.add(""comment"", var1); var4.addCode(var6.render()); var4.setRegister(var5); var4.setType(var2); } else { String var7 = ""variable""; if (symbolTable.getVariable(var1).isConstant()) { var7 = ""var3""; } throw new IllegalStateException(String.format( ""Error: %s '%s' already declared."", var7, var1)); } return var4; } "	0	0	0	0	1	0
"@Override public String Func1() { String var1 = ""disabled""; if (mode == SetWireframe.ENABLED) { var1 = ""enabled""; } return String.format(""%s: wireframe %s"", this.getClass().getSimpleName(), var1); } "	0	0	1	0	1	0
"public static boolean Func1(Resource var1, Resource var2) { String var3 = ""/""; String var4 = """"; for (AnnotationAttachment var5 : var2.getAnnotations()) { if (var5.getName().equalsIgnoreCase(""http:Path"")) { var3 = var5.getValue(); } else if (var5.getName().matches(SwaggerBallerinaConstants.HTTP_VERB_MATCHING_PATTERN)) { var4 = var5.getName(); } } return var1.getName().equalsIgnoreCase(generateServiceUUID(var3, var4)); } "	0	0	0	0	1	0
"public void Func1(int var1) { try { core.getDatabase().getStatement().executeUpdate(""UPDATE budder_core_data SET var1="" + var1 + "" WHERE uuid="" + p.getUniqueId() + "";""); } catch (SQLException e) { throw new RuntimeException(e); } } "	0	0	0	0	1	0
"public static void Func1() throws DaoException { Connection var1 = null; PreparedStatement var2 = null; ResultSet var3 = null; try { var1 = JdbcUtil.getDbConnection(DaoGeneset.class); var2 = var1.prepareStatement(""DELETE FROM genetic_entity WHERE ENTITY_TYPE = 'GENE_SET'""); var2.executeUpdate(); } catch (SQLException e) { throw new DaoException(e); } finally { JdbcUtil.closeAll(DaoGeneset.class, var1, var2, var3); } } "	0	0	1	0	0	0
"public static Dataset Func1(Dataset var1, String var2) { if (var2.isEmpty()) return var1; String[] var3 = parts(var2); String var4 = var3[0]; String[] var5 = list(var3[1]); String[] var6 = list(var3[2]); boolean var7 = var3[3].equalsIgnoreCase(""true""); if (var5 == null) var5 = new String[0]; if (var6 == null) var6 = new String[0]; Field[] var8 = getFields(var1.var10, var5, var6, new String[]{var4}); Field[] var9 = makeOrderedFields(var1, var8, var5.length); if (var7) var9 = new AllCombinations(var9, var5.length, var6.length).make(); Field[] var10 = makeStackedValues(var9, getField(var9, var4), getFields(var9, var5), var7); return var1.replaceFields(var10); } "	0	0	0	0	1	0
@Override public List<Resource> Func1(Map<String, String> var1) { return this.getLearnguideRepository().Func1(var1); } 	0	0	0	1	0	0
public void Func1(Properties var1) { this.var1 = var1; } 	0	0	0	1	0	0
@Override public List<String> Func1(String var1) { return this.getLearnguideRepository().Func1(var1); } 	0	0	0	1	0	0
@Override public void Func1(int var1, byte[] var2) throws IOException { int var3 = (int) ((getPhysicalFile().length() + ProdosVirtualDisk.BLOCK_SIZE - 1) / ProdosVirtualDisk.BLOCK_SIZE); int var4 = (((var3 * 2) + (ProdosVirtualDisk.BLOCK_SIZE - 2)) / ProdosVirtualDisk.BLOCK_SIZE); if (var4 > 1) { var4++; } switch (this.getType()) { case SEEDLING: readFile(var2, 0); break; case SAPLING: if (var1 > 0) { readFile(var2, (var1 - 1)); } else { generateIndex(var2, 0, var3); } break; case TREE: if (var1 == 0) { generateIndex(var2, 1, var4); } else if (var1 <= var4) { int var5 = var4 + ((var1 - 1) * 256); int var6 = var4 + var3; generateIndex(var2, var5, var6); } else { readFile(var2, (var1 - var4 - 1)); } break; } } 	1	0	0	0	1	0
"public void Func1(ActionEvent var1) { getTestEntry(); try { PreviewPanel var2 = new PreviewPanel(null, entry, null, new MetaData(), layout2.getText()); var2.setPreferredSize(new Dimension(800, 350)); JOptionPane.showMessageDialog(null, new JScrollPane(var2), Globals.lang(""Preview""), JOptionPane.PLAIN_MESSAGE); } catch (StringIndexOutOfBoundsException ex) { ex.printStackTrace(); JOptionPane.showMessageDialog(null, ""Parsing error: illegal backslash expression.\n"" + ex.getMessage() + ""\nLook at stderr for details."", ""Parsing error"", JOptionPane.WARNING_MESSAGE); } } "	0	0	1	0	1	0
"@Test public void Func1() throws Exception { final DefaultConfiguration var1 = createCheckConfig(CommentsIndentationCheck.class); final String[] var2 = { ""9: "" + getCheckMessage(MSG_KEY_SINGLE, 10, 19, 23), ""10: "" + getCheckMessage(MSG_KEY_BLOCK, 12, 23, 31), ""33: "" + getCheckMessage(MSG_KEY_SINGLE, 34, 0, 8), ""57: "" + getCheckMessage(MSG_KEY_SINGLE, 58, 0, 8), ""71: "" + getCheckMessage(MSG_KEY_SINGLE, 72, 0, 8), ""103: "" + getCheckMessage(MSG_KEY_SINGLE, 104, 0, 8), ""107: "" + getCheckMessage(MSG_KEY_SINGLE, 108, 0, 8), }; final String var3 = ""InputCommentsIndentationInEmptyBlock.java""; verify(var1, getPath(var3), var2); } "	0	0	0	0	0	1
"@Override public boolean Func1(final EnablePCIPassthroughRequestMessage var1) { try { final String var2 = UUID.randomUUID().toString(); var1.setMessageProperties( new com.dell.cpsd.virtualization.capabilities.api.MessageProperties(new Date(), var2, replyTo)); ServiceResponse<?> var3 = processRequest(timeout, new ServiceRequestCallback() { @Override public String Func2() { return var2; } @Override public void Func3(String var4) throws Exception { producer.publishEnablePciPassthrough(var1); } }); EnablePCIPassthroughResponseMessage var5 = processResponse(var3, EnablePCIPassthroughResponseMessage.class); if (var5 != null && var5.getMessageProperties() != null) { return var5.getStatus().equals(EnablePCIPassthroughResponseMessage.Status.SUCCESS); } else { LOGGER.error(""Response message is null""); } } catch (Exception e) { LOGGER.error(""Exception occurred"", e); } return false; } "	0	0	0	0	1	0
"@Override protected void Func1() { Semaphore var1 = new Semaphore(0); Request var2 = (new UserLookupRequest(new String[] { text.getText() })).getRequest( response -> { int var3 = response.getStatus(); if (var3 != 200) { Display.getDefault().asyncExec(() -> errorLabel.setText(""User does not exist."")); Display.getDefault().asyncExec(() -> errorLabel.setVisible(true)); } else { username = ((UserLookupResponse) response.getData()).getUsers()[0].getUsername(); permission = Integer.parseInt(combo.getItem(combo.getSelectionIndex()).split("" . "")[0]); } var1.release(); }, new UIRequestErrorHandler(new Shell(), DialogStrings.AddNewUserDialog_UserLookupErr)); try { PluginManager.getInstance().getWSManager().sendRequest(var2); if (!var1.tryAcquire(1, RequestConfigurations.REQUST_TIMEOUT_SECONDS, TimeUnit.SECONDS)) { MessageDialog var4 = new MessageDialog(new Shell(), DialogStrings.AddNewUserDialog_TimeoutErr); Display.getDefault().asyncExec(() -> var4.open()); } } catch (InterruptedException ex) { MessageDialog var5 = new MessageDialog(new Shell(), ex.getMessage()); Display.getDefault().asyncExec(() -> var5.open()); } if (username != null) super.Func1(); } "	0	0	0	0	1	0
private void Func1() { final TwilightState var1 = mTwilightManager.getCurrentState(); if (!mAwaitingNudge || var1 == null) { return; } int var2 = getSunsetCounter(); boolean var3 = var1.isNight() && !mSunset; mSunset = var1.isNight(); if (!var3) { return; } if (var2 <= 0) { var2++; updateSunsetCounter(var2); } if (var2 == 0) { final Intent var4 = new Intent(CMSettings.ACTION_LIVEDISPLAY_SETTINGS); PendingIntent var5 = PendingIntent.getActivity( mContext, 0, var4, PendingIntent.FLAG_UPDATE_CURRENT); Notification.Builder var6 = new Notification.Builder(mContext) .setContentTitle(mContext.getResources().getString( org.cyanogenmod.platform.internal.R.string.live_display_title)) .setContentText(mContext.getResources().getString( org.cyanogenmod.platform.internal.R.string.live_display_hint)) .setSmallIcon(org.cyanogenmod.platform.internal.R.drawable.ic_livedisplay_notif) .setStyle(new Notification.BigTextStyle().bigText(mContext.getResources() .getString( org.cyanogenmod.platform.internal.R.string.live_display_hint))) .setContentIntent(var5) .setAutoCancel(true); NotificationManager var7 = (NotificationManager)mContext.getSystemService(Context.NOTIFICATION_SERVICE); var7.notifyAsUser(null, 1, var6.build(), UserHandle.CURRENT); updateSunsetCounter(1); } } 	0	0	0	0	1	0
private <T extends Metric> void Func1( final MetricType var1, List<T> var2, final BucketConsumer<B, T> var3 ) { int var4 = 0; for (final T var5 : var2) { if (!var5.valid()) { continue; } long var6 = var5.getTimestamp() / size; if (var6 < 0 || var6 >= buckets.size()) { continue; } var3.apply(buckets.get((int) var6), var5); var4 += 1; } this.var4.add(var4); } 	0	0	0	0	1	0
"private String Func1(final IoSession var1, final String var2) { return prefix + "" - "" + var2 + String.format("" - (%1$11s)"", var1.hashCode()); } "	0	0	0	0	1	0
"@Test public void Func1() { Mailing var1 = new Mailing.MailingBuilder().email(EMAIL).surname(NAME).language(LANGUAGE).firstname(FIRSTNAME).build(); assertThat(var1).isNotNull(); assertThat(var1.toString()).isNotNull(); assertThat(var1.getEmail()).isEqualTo(EMAIL); assertThat(var1.getSurname()).isEqualTo(NAME); assertThat(var1.getFirstname()).isEqualTo(FIRSTNAME); assertThat(var1.getLanguage()).isEqualTo(""en""); } "	0	0	0	0	1	0
"public List<Mailing> Func1(String var1) { List<Mailing> var2 = Lists.newArrayList(); if (Strings.isNullOrEmpty(var1)) { LOG.info(""Will Func1 for all languages, which may mean more mails being sent out.""); } Mailing var3 = new Mailing.MailingBuilder().email(""my@mail.com"").firstname(""Your name"").surname(""Is my name"").var1(Locale.GERMAN.getLanguage()).build(); return var2; } "	0	0	0	0	1	0
@JsonAnySetter private void Func1(String var1, String var2) { if(var2 != null) { Term var3 = TermFactory.instance().findTerm(var1); verbatimFields.put(var3, var2); } } 	0	0	0	0	1	0
"public void Func1() { input.addEventHandler(KeyEvent.KEY_RELEASED, new EventHandler<KeyEvent>() { public void Func2(KeyEvent var1) { if ( var1.getCode().isLetterKey() || var1.getCode() == KeyCode.BACK_SPACE) { myDropDown.updateMenuItems(UiMain.getInstance().randomInput(""TEST"" + Math.random(), 4)); myDropDown.updateMenu(); } if ( var1.getCode().isArrowKey()) { myDropDown.processArrowKey(var1); } if (var1.getCode() == KeyCode.ENTER) { String var2 = input.getText(); input.clear(); Popup var3 = UiPopupFactory.getInstance().createPopupLabelAtNode(""Added ""+ myDropDown.getSelectedItem(), input, 0,input.getHeight()); UiPopupFactory.getInstance().createFadeTransition(var3, 2000, UiConstants.DEFAULT_FADE_TIME, 1.0, 0.0, true).play(); var1.consume(); myDropDown.hideMenu(); } } }); input.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler<KeyEvent>() { public void Func2(KeyEvent var1) { if ( var1.getCode().isArrowKey()) { if  (var1.getCode() == KeyCode.UP || var1.getCode() == KeyCode.DOWN) { var1.consume(); } } }; }); } "	0	0	0	0	1	0
"@Override public void Func1(View var1) { switch (var1.getId()) { case R.id.start_stop: startStopBtn.setFocusable(true); startStopBtn.setFocusableInTouchMode(true); startStopBtn.requestFocus(); String var2 = editText.getText().toString(); if (!var2.equals("""")) { if (!isStart) { isStart = true; logTextView.setText(getString(R.string.log_text_view_status)); startStopBtn.setText(getString(R.string.stop_button_text)); StreetPassSettings var3 = new StreetPassSettings.Builder() .advertiseMode(AdvertiseSettings.ADVERTISE_MODE_BALANCED) .scanMode(ScanSettings.SCAN_MODE_LOW_POWER) .txPowerLevel(AdvertiseSettings.ADVERTISE_TX_POWER_HIGH) .serviceUuid(Constants.SERVICE_UUID) .readCharacteristicUuid(Constants.READ_CHARACTERISTIC_UUID) .writeCharacteristicUuid(Constants.WRITE_CHARACTERISTIC_UUID) .data(var2) .build(); streetPassBle.start(var3); } else { isStart = false; startStopBtn.setText(getString(R.string.start_button_text)); streetPassBle.stop(); } } else { showAlertDialog(getString(R.string.caution_title), getString(R.string.caution_message)); } break; default: break; } } "	0	0	1	0	0	0
"public String Func1() { String var1= dateFormat.format(startDate); String var2 = ""[""+var1+""] ""+Claimant.getUserName()+"" - ""+Status; if(!(getTotal().size() == 0)) { var2 += ""\n""+toStringList(getTotal()); } if(!(destinations.size() == 0)) { var2 += ""\n""+destinationsToString(); } if (!(approver.getUserName() == null)) { var2 += ""\n""+approver.getUserName(); } return var2; } "	0	0	1	1	1	0
"@SuppressWarnings(""unchecked"") private <S extends T> S Func1(S var1) { JpaMapper<Object, T> var2 = repositoryConfig.getMapper(); Object var3 = var2.unmap(var1); EntityManager var4 = module.getEntityManager(); var4.persist(var3); I var5 = (I) PropertyUtils.getProperty(var1, primaryKeyAttr.getName()); QuerySpec var6 = new QuerySpec(repositoryConfig.getResourceClass()); if (var5 == null) { throw new IllegalStateException(""var5 not available for var3 "" + var5); } return (S) findOne(var5, var6); } "	0	0	0	0	1	0
@Nullable public Thread Func1() { return this.thread; } 	0	0	0	0	1	0
public void Func1(Ball var1) { var1.setPosition(x, y); } 	1	0	1	0	1	0
@Override public View Func1(int var1, View var2, ViewGroup var3) { CompoundButton var4 = (CompoundButton)var2; if(var4 == null) { if(mMode == MODE_MULTI_ITEMS){ var4 = new CheckBox(var3.getContext()); var4.applyStyle(mCheckBoxStyle); } else{ var4 = new RadioButton(var3.getContext()); var4.applyStyle(mRadioButtonStyle); } if(mItemHeight != ViewGroup.LayoutParams.WRAP_CONTENT) var4.setMinHeight(mItemHeight); var4.setGravity(Gravity.START | Gravity.CENTER_VERTICAL); if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) var4.setTextDirection(((InternalListView)var3).isLayoutRtl() ? View.TEXT_DIRECTION_RTL : View.TEXT_DIRECTION_LTR); var4.setTextAppearance(var4.getContext(), mItemTextAppearance); ViewCompat.setPaddingRelative(var4, mContentPadding, 0, 0, 0); } var4.setTag(var1); var4.setText(mItems[var1]); if(var4 instanceof CheckBox) ((CheckBox) var4).setCheckedImmediately(mSelected[var1]); else ((RadioButton) var4).setCheckedImmediately(mSelected[var1]); var4.setOnCheckedChangeListener(this); return var4; } 	0	0	0	0	1	0
"public OrderData Func1(final HttpServletRequest var1, final CartData var2) throws Exception { CustomerModel var3 = null; if (! getCheckoutCustomerStrategy().isAnonymousCheckout()) { var3 = getCheckoutCustomerStrategy().getCurrentUserForCheckout(); } PaymentResult var4 = getAdyenPaymentService().authorise(var2, var1, var3); LOGGER.debug(""authorization result: "" + var4); if (var4.isAuthorised()) { return createAuthorizedOrder(var4); } if (var4.isRedirectShopper()) { getSessionService().setAttribute(SESSION_MD, var4.getMd()); lockSessionCart(); } throw new AdyenNonAuthorizedPaymentException(var4); } "	0	0	0	0	1	0
@Override public void Func1(String var1, String var2, BindMode var3) { final MountableFile var4 = MountableFile.forHostPath(var1); binds.add(new Bind(var4.getResolvedPath(), new Volume(var2), var3.accessMode)); } 	0	0	0	0	1	0
"public boolean Func1(CarbonPermission var1) { if (var1 == null) { throw new IllegalArgumentException(""Permission object cannot be null""); } return (InMemoryUserStoreManager.getInstance().authorizePrincipal(this.getName(), var1)); } "	0	0	1	1	0	0
"@Override protected void Func1() { super.Func1(); active = true; new Thread() { @Override public void Func2() { setPriority(Thread.MIN_PRIORITY); while (active) { if (Test.peerList != null) { int var1 = 0; int var2 = 0; final ArrayList<Peer> var3 = (ArrayList<Peer>) Test.peerList.clone(); for (Peer var4 : var3) { if (var4.isConnected() && var4.isAuthed() && var4.isCryptedConnection()) { var1++; } else if (var4.isConnecting || var4.isConnected() || var4.isAuthed()) { var2++; } } int var5 = 0; final ArrayList<PeerTrustData> var6 = (ArrayList<PeerTrustData>) Test.peerTrusts.clone(); for (PeerTrustData var7 : var6) { var5 += var7.ips.size(); } final int var8 = var5; final int var9 = var1; final int var10 = var2; if (isFinishing()) { return; } final int var11 = Test.messageStore.getMessageCount(); String var12 = ""Nodes:\n""; ArrayList<Peer> var13 = Test.getClonedPeerList(); Collections.sort(var13); for (Peer var14 : var13) { String var15 = var14.getIp(); if (var15.length() > 12) { var15 = var15.substring(0, 12); } var12 += String.format(""%12s %5d %4s %5d\n"", var15, var14.port, """" + var14.authed, (var14.peerTrustData != null ? var14.getLoadedMsgs().size() : -1)); } final String var16 = var12; infotext.post(new Runnable() { public void Func2() { infotext.setText(""Nodes: "" + var9 + ""/"" + var10 + ""/"" + var3.size() + "" - "" + var6.size() + "" - "" + var8 + "". Msgs: "" + var11); maintext.setText(var16); } }); } else { if (isFinishing()) { return; } infotext.post(new Runnable() { public void Func2() { if (BS.hsqlConnection == null) { infotext.setText(""loading database...""); } else { infotext.setText(""loading...""); } } }); } try { sleep(1000); } catch (InterruptedException ex) { } } if (isFinishing()) { return; } infotext.post(new Runnable() { public void Func2() { infotext.setText(""Nodes: -/-/-""); } }); } }.start(); } "	0	0	0	0	1	0
"public String Func1(String var1) { int var2 = var1.length(); boolean var3 = false; String var4 = """"; for(int var5 = 0; var5 < var2; var5++) { char var6 = var1.charAt(var5); if (var6 == '[') { var3 = true; } else if (var6 == ']') { var3 = false; break; } else if (var3 == true) { var4 += var6; } } if (var4.compareTo("""") == 0) { return null; } return var4.trim(); } "	0	0	1	1	1	0
"@SuppressWarnings(""synthetic-access"") private void Func1(InternalEventBusSkill var1) { Queue<Event> var2 = this.buffer; if (var2 != null && !var2.isEmpty()) { this.buffer = null; for (Event var3 : var2) { var1.eventBus.post(var3); } } } "	0	0	0	0	1	0
"public byte[] Func1(ClassLoader var1, String var2, Class<?> var3, ProtectionDomain var4, byte[] var5) throws IllegalClassFormatException { final String var6 = var2.replaceAll(""/"", "".""); if(var6.indexOf(""java.lang"") == 0) return var5; try { InstrumentClassResult var7 = instrumentClass(var5, var1); if(var7.hasSlf4jLogger) Runtime.registerClassWithSlf4jLogger(var6, var1); var5 = var7.bytecode; } catch(Throwable t) { System.out.println(""ERROR while instrumenting class "" + var2 + "", var1 "" + var1 + "", error message: "" + t.toString()); t.printStackTrace(); } return var5; } "	0	0	0	0	1	0
"public static boolean Func1(int var1, int var2) { return !isCreater(var2, var1) && Database.update(String.format(""INSERT INTO %s (user_id, channel_id) VALUE ('%d','%d');"", CONSTANT.TABLE.USER_CHANNEL, var1, var2)); } "	0	0	1	0	1	0
public void Func1(AlignAndDistributeHandler var1, double var2) { addAlignIndexEntry(m_leftIndex, var1, var2); } 	0	0	1	0	1	0
"@TestMetadata(""propertyModifiers.1.kt"") public void Func1() throws Exception { String var1 = KotlinTestUtils.navigationMetadata(""compiler/testData/codegen/boxInline/modifiers/propertyModifiers.1.kt""); doTestMultiFileWithInlineCheck(var1); } "	0	0	0	0	1	0
"@Test public void Func1() { String var1 = UUID.randomUUID().toString(); String var2 = ""aCloudName""; Vm var3 = new Vm(var1, var2, ""Running"", ""user"", true); VirtualMachineHandler.handleVM(var3); var3.setRunUuid(UUID.randomUUID().toString()); String var4 = ""runOwnerName""; var3.setRunOwner(var4); VirtualMachineHandler.handleVM(var3); VirtualMachine var5 = VirtualMachineHandler.fetchVirtualMachine(var2, var1); if (var5 != null) { Assert.assertEquals(var4, var5.getRun().getUserName()); List<TypePrincipalRight> var6 = var5.getAcl().getRules(); Assert.assertNotNull(var6); boolean var7 = false; for (TypePrincipalRight var8 : var6) { if ((var8.getPrincipal() == var4) && (var8.getType() == TypePrincipal.PrincipalType.USER)) { var7 = true; Assert.assertEquals(TypePrincipalRight.Right.VIEW, var8.getRight()); } } Assert.assertTrue(var7); Assert.assertEquals(var4, var5.getAcl().getRules()); } } "	0	0	0	0	1	0
public Optional<String> Func1() { return loginNameCandidates().stream().findFirst(); } 	0	0	0	0	1	0
private void Func1() { for (final Player var1 : plugin.getServer().getOnlinePlayers()) { add(var1); } } 	0	0	0	0	1	0
"public NumericExpression<T> Func1() { List<org.datanucleus.query.expression.Expression> var1 = new ArrayList(); var1.add(queryExpr); org.datanucleus.query.expression.Expression var2 = new InvokeExpression(null, ""asin"", var1); return new NumericExpressionImpl<T>(var2); } "	0	0	1	0	1	0
"public NumericExpression Func1() { List<org.datanucleus.query.expression.Expression> var1 = new ArrayList(); var1.add(queryExpr); org.datanucleus.query.expression.Expression var2 = new InvokeExpression(null, ""atan"", var1); return new NumericExpressionImpl<T>(var2); } "	0	0	1	1	1	0
"public void Func1(Player var1, int var2) { if(var1.isAlive()) { var1.setLocation(playerPositions.get(var2)); players.add(var1); units.add(var1); addToLog(""[LEVEL]\tPlayer registered.""); } } "	0	0	0	0	1	0
"public void Func1() throws Exception { deleteFile(""./twitter4j.properties""); ConfigurationBuilder var1; Configuration var2; var1 = new ConfigurationBuilder(); var2 = var1.build(); Configuration var3 = (Configuration) serializeDeserialize(var2); assertSame(var2, (Configuration) serializeDeserialize(var2)); assertTrue(0 == var2.getRestBaseURL().indexOf(""http://"")); assertTrue(0 == var2.getSearchBaseURL().indexOf(""http://"")); assertTrue(0 == var2.getOAuthAuthenticationURL().indexOf(""http://"")); assertTrue(0 == var2.getOAuthAuthorizationURL().indexOf(""http://"")); assertTrue(0 == var2.getOAuthAccessTokenURL().indexOf(""http://"")); assertTrue(0 == var2.getOAuthRequestTokenURL().indexOf(""http://"")); var1 = new ConfigurationBuilder(); var1.setUseSSL(true); var2 = var1.build(); assertTrue(0 == var2.getRestBaseURL().indexOf(""https://"")); assertTrue(0 == var2.getSearchBaseURL().indexOf(""https://"")); assertTrue(0 == var2.getOAuthAuthenticationURL().indexOf(""https://"")); assertTrue(0 == var2.getOAuthAuthorizationURL().indexOf(""https://"")); assertTrue(0 == var2.getOAuthAccessTokenURL().indexOf(""https://"")); assertTrue(0 == var2.getOAuthRequestTokenURL().indexOf(""https://"")); var1 = new ConfigurationBuilder(); var1.setUseSSL(false); var2 = var1.build(); assertTrue(0 == var2.getRestBaseURL().indexOf(""http://"")); assertTrue(0 == var2.getSearchBaseURL().indexOf(""http://"")); assertTrue(0 == var2.getOAuthAuthenticationURL().indexOf(""http://"")); assertTrue(0 == var2.getOAuthAuthorizationURL().indexOf(""http://"")); assertTrue(0 == var2.getOAuthAccessTokenURL().indexOf(""http://"")); assertTrue(0 == var2.getOAuthRequestTokenURL().indexOf(""http://"")); assertTrue(0 == var2.getUserStreamBaseURL().indexOf(""https://"")); var1 = new ConfigurationBuilder(); var1.setOAuthConsumerKey(""key""); var1.setOAuthConsumerSecret(""secret""); var2 = var1.build(); assertTrue(0 == var2.getRestBaseURL().indexOf(""http://"")); assertTrue(0 == var2.getSearchBaseURL().indexOf(""http://"")); assertTrue(0 == var2.getOAuthAuthenticationURL().indexOf(""http://"")); assertTrue(0 == var2.getOAuthAuthorizationURL().indexOf(""http://"")); assertTrue(0 == var2.getOAuthAccessTokenURL().indexOf(""http://"")); assertTrue(0 == var2.getOAuthRequestTokenURL().indexOf(""http://"")); RequestToken var4 = new RequestToken(""key"", ""secret""); assertTrue(0 == var4.getAuthenticationURL().indexOf(""http://"")); assertTrue(0 == var4.getAuthorizationURL().indexOf(""http://"")); assertTrue(0 == var2.getOAuthAccessTokenURL().indexOf(""http://"")); assertTrue(0 == var2.getOAuthRequestTokenURL().indexOf(""http://"")); writeFile(""./twitter4j.properties"", ""twitter4j.restBaseURL=http://somewhere.com/"" + ""\n"" + ""twitter4j.debug=true"" + ""\n"" + ""media.providerParameters=debug=true&foo=bar""); var2 = new ConfigurationBuilder().build(); assertEquals(""http://somewhere.com/"", var2.getRestBaseURL()); assertTrue(var2.isDebugEnabled()); Properties var5 = var2.getMediaProviderParameters(); assertNotNull(var5); assertNull(var5.getProperty(""hoge"")); assertEquals(""true"", var5.getProperty(""debug"")); assertEquals(""bar"", var5.getProperty(""foo"")); deleteFile(""./twitter4j.properties""); } "	0	0	1	0	1	0
"public static boolean Func1() { SU var1 = getSU(); var1.runCommand(""mount""); return !var1.denied; } "	0	0	0	0	1	0
@Nullable @Override public View Func1(LayoutInflater var1, @Nullable ViewGroup var2, @Nullable Bundle var3) { View var4 = var1.inflate(R.layout.fragment_main, var2, false); ButterKnife.bind(this, var4); ShuttleApplication.getInstance().getAppComponent().inject(this); if (var3 == null) { getChildFragmentManager() .beginTransaction() .add(multiSheetView.getSheetContainerViewResId(MultiSheetView.Sheet.FIRST), PlayerFragment.newInstance()) .add(multiSheetView.getSheetPeekViewResId(MultiSheetView.Sheet.FIRST), MiniPlayerFragment.newInstance()) .add(multiSheetView.getSheetContainerViewResId(MultiSheetView.Sheet.SECOND), QueueFragment.newInstance()) .commit(); } else { multiSheetView.restoreSheet(var3.getInt(STATE_CURRENT_SHEET)); } ((ViewGroup) multiSheetView.findViewById(multiSheetView.getSheetPeekViewResId(MultiSheetView.Sheet.SECOND))).addView(new UpNextView(getContext())); toggleBottomSheetVisibility(false); return var4; } 	1	0	0	0	1	0
"@Override public void Func1() { super.Func1(); if (delayHandler != null) { delayHandler.removeCallbacksAndMessages(null); } delayHandler = new Handler(); disposables.add(navigationEventRelay.getEvents() .observeOn(AndroidSchedulers.mainThread()) .filter(drawerEvent -> drawerEvent.isActionable) .subscribe(navigationEvent -> { switch (navigationEvent.type) { case NavigationEventRelay.NavigationEvent.Type.LIBRARY_SELECTED: popToRootViewController(); break; case NavigationEventRelay.NavigationEvent.Type.FOLDERS_SELECTED: delayHandler.postDelayed(() -> pushViewController(FolderFragment.newInstance(""PageTitle""), ""FolderFragment""), 250); break; case NavigationEventRelay.NavigationEvent.Type.SLEEP_TIMER_SELECTED: UnsafeAction var1 = () -> Toast.makeText(getContext(), R.string.sleep_timer_started, Toast.LENGTH_SHORT).show(); SleepTimer.getInstance().getDialog( getContext(), () -> SleepTimer.getInstance().showHmsPicker(getContext(), getFragmentManager(), var1), var1 ).show(); break; case NavigationEventRelay.NavigationEvent.Type.EQUALIZER_SELECTED: delayHandler.postDelayed(() -> multiSheetEventRelay.sendEvent(new MultiSheetEventRelay.MultiSheetEvent(MultiSheetEventRelay.MultiSheetEvent.Action.HIDE, MultiSheetView.Sheet.FIRST)), 100); delayHandler.postDelayed(() -> pushViewController(EqualizerFragment.newInstance(), ""EqualizerFragment""), 250); break; case NavigationEventRelay.NavigationEvent.Type.SETTINGS_SELECTED: delayHandler.postDelayed(() -> multiSheetEventRelay.sendEvent(new MultiSheetEventRelay.MultiSheetEvent(MultiSheetEventRelay.MultiSheetEvent.Action.HIDE, MultiSheetView.Sheet.FIRST)), 100); delayHandler.postDelayed(() -> pushViewController(SettingsParentFragment.newInstance(R.xml.settings_headers, R.string.settings), ""Settings Fragment""), 250); break; case NavigationEventRelay.NavigationEvent.Type.SUPPORT_SELECTED: delayHandler.postDelayed(() -> multiSheetEventRelay.sendEvent(new MultiSheetEventRelay.MultiSheetEvent(MultiSheetEventRelay.MultiSheetEvent.Action.HIDE, MultiSheetView.Sheet.FIRST)), 100); delayHandler.postDelayed(() -> pushViewController(SettingsParentFragment.newInstance(R.xml.settings_support, R.string.pref_title_support), ""Support Fragment""), 250); break; case NavigationEventRelay.NavigationEvent.Type.PLAYLIST_SELECTED: delayHandler.postDelayed(() -> pushViewController(PlaylistDetailFragment.newInstance((Playlist) navigationEvent.data), ""PlaylistDetailFragment""), 250); break; case NavigationEventRelay.NavigationEvent.Type.GO_TO_ARTIST: multiSheetView.goToSheet(MultiSheetView.Sheet.NONE); AlbumArtist var2 = (AlbumArtist) navigationEvent.data; delayHandler.postDelayed(() -> { popToRootViewController(); pushViewController(ArtistDetailFragment.newInstance(var2, null), ""ArtistDetailFragment""); }, 250); break; case NavigationEventRelay.NavigationEvent.Type.GO_TO_ALBUM: multiSheetView.goToSheet(MultiSheetView.Sheet.NONE); Album var3 = (Album) navigationEvent.data; delayHandler.postDelayed(() -> { popToRootViewController(); pushViewController(AlbumDetailFragment.newInstance(var3, null), ""AlbumDetailFragment""); }, 250); break; } })); IntentFilter var4 = new IntentFilter(); var4.addAction(MusicService.InternalIntents.SERVICE_CONNECTED); var4.addAction(MusicService.InternalIntents.QUEUE_CHANGED); disposables.add( RxBroadcast.fromBroadcast(getContext(), var4) .subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(intent -> toggleBottomSheetVisibility(true)) ); DrawerLockManager.getInstance().setDrawerLockController(this); } "	0	0	1	1	0	0
private synchronized Class<?> Func1(String var1, byte[] var2) { Class<?> var3 = defineClass(var1,var2,0,var2.length); if (var3 != null) { loadedClasses.add(var1); resolveClass(var3); } return var3; } 	0	0	0	1	0	0
@Override public boolean Func1(Game var1, Ability var2) { Permanent var3 = var1.getPermanentOrLKIBattlefield(getTargetPointer().getFirst(var1, var2)); if (var3 != null) { PutTokenOntoBattlefieldCopyTargetEffect var4 = new PutTokenOntoBattlefieldCopyTargetEffect(null, null, true); var4.setTargetPointer(getTargetPointer()); if (var4.Func1(var1, var2)) { for (Permanent var5 : var4.getAddedPermanent()) { ExileTargetEffect var6 = new ExileTargetEffect(); var6.setTargetPointer(new FixedTarget(var5, var1)); DelayedTriggeredAbility var7 = new AtTheBeginOfNextEndStepDelayedTriggeredAbility(var6); var1.addDelayedTriggeredAbility(var7, var2); } return true; } } return false; } 	0	0	0	0	1	0
@Override public boolean Func1(Game var1, Ability var2) { Player var3 = var1.getPlayer(var2.getControllerId()); if (var3 != null) { int var4 = var1.getBattlefield().countAll(dragonFilter, var3.getId(), var1); if (var4 > 0) { Permanent var5 = var1.getPermanent(var2.getTargets().getFirstTarget()); if (var5 != null) { var5.damage(var4, getTargetPointer().getFirst(var1, var2), var1, false, true); } else { Player var6 = var1.getPlayer(var2.getTargets().getFirstTarget()); if (var6 != null) { var6.damage(var4, getTargetPointer().getFirst(var1, var2), var1, false, true); } } } return true; } return false; } 	0	0	0	0	1	0
"protected boolean Func1(FacesContext var1, UIComponent var2, UIComponent var3, Converter var4, SelectItem var5, Object var6, Object[] var7, OptionComponentInfo var8) throws IOException { Object var9; Object var10; String var11 = getFormattedValue(var1, var2, var5.getValue(), var4); boolean var12; if (var7 != null) { var12 = containsaValue(var7); if (var12) { var9 = var7; var10 = var11; } else { var9 = var6; var10 = var5.getValue(); } } else { var9 = var6; var10 = var5.getValue(); } boolean var13 = var13(var1, var2, var10, var9, var4); if (var8.isHideNoSelection() && var5.isNoSelectionOption() && var6 != null && !var13) { return false; } ResponseWriter var14 = var1.getResponseWriter(); assert (var14 != null); var14.writeText(""\t"", var2, null); var14.startElement(""option"", (null != var3) ? var3 : var2); var14.writeAttribute(""value"", var11, ""value""); if (var13) { var14.writeAttribute(""selected"", true, ""selected""); } renderItemTemplateOptionDataField(var10, var14); if ((!var8.isDisabled()) && var5.isDisabled()) { var14.writeAttribute(""disabled"", true, ""disabled""); } String var15; if (var8.isDisabled() || var5.isDisabled()) { var15 = var8.getDisabledClass(); } else { var15 = var8.getEnabledClass(); } if (var15 != null) { var14.writeAttribute(""class"", var15, ""var15""); } if (var5.isEscape()) { String var16 = var5.getLabel(); if (var16 == null) { var16 = var11; } var14.writeText(var16, var2, ""var16""); } else { var14.write(var5.getLabel()); } var14.endElement(""option""); var14.writeText(""\n"", var2, null); return true; } "	0	0	0	0	1	0
"public ArrayList<eventData> Func1(SQLiteDatabase var1) { ArrayList<eventData> var2 = this.ReadDatabaseEvents(var1, 0); ArrayList<eventData> var3 = new ArrayList<>(); for (eventData var4 : var2) { try { SimpleDateFormat var5 = new SimpleDateFormat(""yyyy-MM-dd hh:mm:ss""); long var6 = ( var5.parse(var4.Day + "" "" + var4.Time).getTime() ) / 1000; long var7 = Calendar.getInstance().getTimeInMillis() / 1000; long var8 = TimeUnit.HOURS.toMillis(context.getResources().getInteger(R.integer.upcomingDuration)); if (var7 < var6 && var7 + var8 > var6) { if (var4.code != eventStatusListener.StatusCode.Upcoming) var4.code = eventStatusListener.StatusCode.Upcoming; var3.add(var4); } } catch (Exception e) { e.printStackTrace(); } } return var3; } "	0	0	0	0	1	0
@Override public void Func1(ViewGroup var1, int var2, Object var3) { var1.removeView(mListViews.get(var2 % mListViews.size())); } 	0	0	0	0	1	0
"void Func1(PacketMove var1, ClientSocketHandler var2) throws IOException { var2.write(((Packet)var1).setCreationTime(LocalTime.now())); log.info(""..."" + var1 + "" has been sent to "" + var2 + ""...""); } "	0	0	0	0	1	0
private void Func1(boolean var1, Stack<String> var2) throws Exception { for (Field var3 : positionalParametersFields) { Arity var4 = Arity.valueOf(var3.getAnnotation(Parameters.class).index()); Stack<String> var5 = (Stack<String>) var2.clone(); Collections.reverse(var5); if (!var4.isVariable) { for (int var6 = var5.size() - 1; var6 > var4.max; var6--) { var5.removeElementAt(var6); } } Collections.reverse(var5); for (int var6 = 0; var6 < var4.min; var6++) { var5.pop(); } Arity var7 = Arity.forParameters(var3); assertNoMissingParameters(var3, var7.min, var5); if (!var1) { applyOption(var3, Parameters.class, var7, false, var5); } } if (!var1) { var2.clear(); // clear the stack to prevent processing the elements twice } } 	0	0	0	0	1	0
"public Pair<Integer,Callback> Func1(String var1){ Callback var2 = callbackDao.queryByPcAccessToken(var1); if (var2 == null) { return new MutablePair<>(-1, null); } else { Pair<Integer, PCLoginUser> var3 = getLoginUser(var1); if (var3.getLeft() < 0) { logger.info(""key:{} is lost , remove cookie"", var1); pcLoginUserMap.remove(var1); return new MutablePair<>(-2, var2); } else { logger.info(""key:{} is lost , search again: {}"", var3.getRight()); login(var1, var3.getRight()); return new MutablePair<>(1, var2); } } } "	0	0	0	0	1	0
"@Override byte[] Func1(String var1) { try { Object var2 = Class.forName(""java.util.Base64"") .getMethod(""getDecoder"").invoke(null); return (byte[]) Class.forName(""java.util.Base64.Decoder"") .getMethod(""Func1"", String.class).invoke(var2, var1); } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException | ClassNotFoundException e) { throw new IllegalStateException(e); } } "	0	0	1	1	0	0
public void Func1() { WorthController var1 = new WorthController(); if (ProjectViewController.getOpenedProject().getWorths().isEmpty()) { kilometerAllowance.setProject(ProjectViewController.getOpenedProject()); distance.setProject(ProjectViewController.getOpenedProject()); days.setProject(ProjectViewController.getOpenedProject()); pricePerHour.setProject(ProjectViewController.getOpenedProject()); duration.setProject(ProjectViewController.getOpenedProject()); transportCosts.setProject(ProjectViewController.getOpenedProject()); abidanceCosts.setProject(ProjectViewController.getOpenedProject()); totalCosts.setProject(ProjectViewController.getOpenedProject()); var1.create(kilometerAllowance); var1.create(distance); var1.create(days); var1.create(pricePerHour); var1.create(duration); var1.create(transportCosts); var1.create(abidanceCosts); var1.create(totalCosts); } else { try { var1.edit(kilometerAllowance); var1.edit(distance); var1.edit(days); var1.edit(pricePerHour); var1.edit(duration); var1.edit(transportCosts); var1.edit(abidanceCosts); var1.edit(totalCosts); } catch (Exception e) { } } setValuesChanged(false); } 	0	0	0	0	1	0
@Listener(order = Order.FIRST) public void Func1(ExplosionEvent.Detonate var1) { GPTimings.EXPLOSION_EVENT.startTimingIfSync(); if (!GriefPrevention.instance.claimsEnabledForWorld(var1.getTargetWorld().getProperties())) { GPTimings.EXPLOSION_EVENT.stopTimingIfSync(); return; } Object var2 = var1.getCause().root(); User var3 = null; if (var2 instanceof Entity) { Entity var4 = (Entity) var2; var3 = ((IMixinEntity) var4).getTrackedPlayer(NbtDataUtil.SPONGE_ENTITY_CREATOR).orElse(null); } for (Transaction<BlockSnapshot> var5 : var1.getTransactions()) { BlockSnapshot var6 = var5.getOriginal(); Location<World> var7 = var6.getLocation().orElse(null); if (var7 == null) { continue; } Claim var8 =  GriefPrevention.instance.dataStore.getClaimAt(var6.getLocation().get(), false, null); if (GPPermissionHandler.getClaimPermission(var8, GPPermissions.EXPLOSION_SURFACE, var2, var6.getLocation(), var3) == Tristate.FALSE && var7.getPosition().getY() > ((net.minecraft.world.World) var1.getTargetWorld()).getSeaLevel()) { var5.setValid(false); continue; } String var9 = var8.allowBreak(var2, var6, var3); if (var9 != null) { if (var1.getTransactions().size() > 100) { var1.setCancelled(true); GPTimings.EXPLOSION_EVENT.stopTimingIfSync(); return; } var5.setValid(false); } } GPTimings.EXPLOSION_EVENT.stopTimingIfSync(); } 	1	0	1	0	1	0
public void Func1(org.nlogo.window.Events.AddSliderConstraintEvent var1) { try { SliderConstraint var2 = SliderConstraint.makeSliderConstraint (world().observer(), var1.minSpec, var1.maxSpec, var1.incSpec, var1.value, var1.slider.name(), this); var1.slider.removeAllErrors(); var1.slider.setSliderConstraint(var2); int var3 = world().observerOwnsIndexOf(var1.varname.toUpperCase()); if (var3 != -1) { world().observer().variableConstraint(var3, var2); } } catch (SliderConstraint.ConstraintExceptionHolder ex) { for (SliderConstraint.SliderConstraintException var4 : scala.collection.JavaConversions.asJavaIterable(ex.getErrors())) { var1.slider.setConstraintError(var4.spec().fieldName(), var4); } } } 	0	0	0	0	1	0
@ExposedMethod(doc = BuiltinDocs.set___iter___doc) final PyObject Func1() { return new ValuesIter(dvDict.pyKeySet()); } 	0	0	0	0	1	0
@Test(expected = NotFoundException.class) public void Func1() throws Exception { OrganizationService var1 = OrganizationServiceFactory.getOrganizationService(); Key var2 = Datastore.allocateId(Group.class); Key var3 = Datastore.allocateId(User.class); var1.addUserToGroup(var2, var3); expectLastCall().andThrow(new EntityNotFoundException(null)); testOrganizationServiceFactory.replay(); endpoint.addUserToGroup(newAdminCaller(55), var2, var3); } 	1	1	0	0	0	0
@Override public void Func1(SQLiteDatabase var1) { var1.execSQL(TABLE_CREATE); this.var1 = var1; } 	0	0	0	0	1	0
"private static <T> T[] Func1(final JsonArray var1, final Function<JsonValue, T> var2, final Class<T> var3) { @SuppressWarnings(""unchecked"") final T[] var4 = (T[]) Array.newInstance(var3, var1 == null ? 0 : var1.size()); for (int var5 = 0; var5 < var4.length; var5++) { var4[var5] = var2.apply(var1.get(var5)); } return var4; } "	0	0	0	0	1	0
@Override public boolean Func1() { return getUserconnection().Func1(); } 	0	0	0	0	1	0
"private List<File> Func1() { final List<File> var1; String var2 = sourceDirectory; if (extensions == null || extensions.isEmpty()) { final DirectoryWalker var3 = new AsciiDocDirectoryWalker(var2); var1 = var3.scan(); } else { final DirectoryWalker var3 = new CustomExtensionDirectoryWalker(var2, Arrays.asList(extensions.split("",""))); var1 = var3.scan(); } for (Iterator<File> var4 = var1.iterator(); var4.hasNext();) { File var5 = var4.next(); do { if (var2.equals(var5.getAbsolutePath())) { break; } if (var5.getName().startsWith(""_"")) { var4.remove(); break; } } while ((var5 = var5.getParentFile()) != null); } return var1; } "	0	0	1	0	1	0
"@SuppressLint(""MissingSuperCall"") @Override protected void Func1(Bundle var1) { super.Func1(var1, R.layout.activity_home); final Context var2 = this; if (ParseUser.getCurrentUser() == null) { Intent var3 = new Intent(this, LoginActivity.class); startActivity(var3); finish(); } Intent var4 = new Intent(this, ServerAccess.class); var4.putExtra(""server_action"", ServerAccess.ServerAction .GET_BALANCE.toString()); this.startService(var4); IntentFilter var5 = new IntentFilter(""server_response""); var5.addCategory(Intent.CATEGORY_DEFAULT); ServiceBroadcastReceiver var6 = new ServiceBroadcastReceiver(); LocalBroadcastManager.getInstance(this).registerReceiver (var6, var5); stashGridView = (ExpandableHeightGridView) findViewById(R.id.stashGridView); homeScrollView = (ScrollView)findViewById(R.id.homeScrollView); homeScrollView.getViewTreeObserver().addOnScrollChangedListener(new ViewTreeObserver.OnScrollChangedListener() { @Override public void Func2() { if(homeScrollView.getScrollY() > 10) { getSupportActionBar().setElevation(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 4, getResources().getDisplayMetrics())); } else{ getSupportActionBar().setElevation(0); } } }); homeScreenFunctionality(); alarmMgr = (AlarmManager)var2.getSystemService(Context.ALARM_SERVICE); Intent var7 = new Intent(var2, ServerAccess.class); var7.putExtra(""server_action"", ServerAccess.ServerAction.ALARM); alarmIntent = PendingIntent.getService(var2, 0, var7, 0); alarmMgr.setInexactRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP, 5000, 5000, alarmIntent); } "	0	0	1	0	1	0
@Override public boolean Func1(ForgeDirection var1, Fluid var2) { if (tank != null) { if (tank.getFluid().fluidID == var2.getID()) { return tank.getFluidAmount() < tank.getCapacity(); } else if (tank.getFluidAmount() == 0) { return true; } } return false; } 	0	0	0	0	1	0
@Override public boolean Func1(ForgeDirection var1, Fluid var2) { if (var2 != null && var2.getID() == tank.getFluid().fluidID) { return tank.getFluidAmount() > 0; } return false; } 	0	0	1	0	1	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_user_details); Toolbar var2 = findViewById(R.id.var2); setSupportActionBar(var2); ActionBar var3 = getSupportActionBar(); if (var3 != null) { var3.setDisplayHomeAsUpEnabled(true); var3.setDisplayShowTitleEnabled(false); } final CollapsingToolbarLayout var4 = findViewById(R.id.toolbar_layout); backdropImageView = var4.findViewById(R.id.user_details_backdrop); Intent var5 = getIntent(); mUidForDetails = var5.getStringExtra(EXTRA_DATA); UserDetailsFragment var6 = UserDetailsFragment.newInstance(mUidForDetails); getSupportFragmentManager().beginTransaction().add(R.id.fragment_user_details_container, var6).commit(); } 	0	0	0	0	1	0
"public void Func1() { mySolo.sleep(500); mySolo.clickOnImageButton(0); mySolo.sleep(500); boolean var1 = mySolo.searchText(getActivity().getString(R.string.navigation_title)); assertEquals(""Required text 1 not found"", true, var1); } "	0	0	0	0	1	0
"private String Func1(JsonObject var1, String var2, JsonArray var3) { Map<String, Object> var4 = var1.toMap(); for (Object var5 : Func1) { if (!var4.containsKey(var5.toString())) { if (var3 != null) { var3.addObject(new JsonObject() .putString(""reason"", ""missing.attribute"") .putString(""attribute"", i18n.translate(var5.toString(), I18n.DEFAULT_DOMAIN, var2)) ); } return i18n.translate(""missing.attribute"", I18n.DEFAULT_DOMAIN, var2, """", i18n.translate(var5.toString(), I18n.DEFAULT_DOMAIN, var2)) ; } } return null; } "	0	0	1	0	0	0
"@CodeTranslate public void Func1() throws Exception { LiteralExpressionTest.result = ""\n\""\\'""; } "	0	0	0	0	1	0
"public void Func1(@AuthorLists final int var1, final String var2) { Transaction.Handler var3 = new Transaction.Handler() { @Override public Transaction.Result Func2(MutableData var4) { Author var5 = var4.getValue(Author.class); if (var5 == null) { Func1(var1, var2); return Transaction.abort(); } List<String> var6 = null; switch (var1) { case AuthorLists.FRIENDS:           var6 = var5.getFriends(); break; case AuthorLists.FOLLOWING:         var6 = var5.getFollowing(); break; case AuthorLists.FOLLOWERS:         var6 = var5.getFollowers(); break; case AuthorLists.SENT_REQUESTS:     var6 = var5.getSentRequests(); break; case AuthorLists.RECEIVED_REQUESTS: var6 = var5.getReceivedRequests(); break; } if (var6 == null) return Transaction.abort(); if (var6.contains(var2)) { var6.remove(var2); } var4.setValue(var5.toMap()); return Transaction.success(var4); } @Override public void Func3(DatabaseError var7, boolean var8, DataSnapshot var9) { if (var7 != null) { Timber.e(""Error removing user from var6: "" + var7.getDetails()); } } }; FirebaseDatabase.getInstance().getReference() .child(GuideDatabase.AUTHORS) .child(firebaseId) .runTransaction(var3); } "	0	0	0	0	1	0
"private static void Func1() throws Exception { Connection var1 = DriverManager.getConnection(""jdbc:postgresql://localhost:5432/changeset"", System.getenv(""DB_USER""), System.getenv(""DB_PWD"")); try { Statement var2 = var1.createStatement(); ResultSet var3 = var2.executeQuery(""SELECT COUNT(*) FROM countries""); boolean var4 = !var3.next() || var3.getInt(1) == 0; var3.close(); Map<WorldRegion, Integer> var5 = new LinkedHashMap<WorldRegion, Integer>(); OsmandRegions var6 = initCountriesTable(var1, var4, var5); PreparedStatement var7 = var1 .prepareStatement(""INSERT INTO changeset_country(changesetid, countryid, var22)"" + "" VALUES(?, ?, ?)""); var3 = var2.executeQuery(""select id, var9, var10, var11, var12 from changesets where id not in (select changesetid from changeset_country) limit 100000;""); int var8 = 0; while(var3.next()) { double var9 = var3.getDouble(2); double var10 = var3.getDouble(3); double var11 = var3.getDouble(4); double var12 = var3.getDouble(5); String var13 = var3.getString(1); int var14 = MapUtils.get31TileNumberX(var10); int var15 = MapUtils.get31TileNumberX(var12); int var16 = MapUtils.get31TileNumberY(var11); int var17 = MapUtils.get31TileNumberY(var9); List<BinaryMapDataObject> var18 = var6.queryBbox(var14, var15, var16, var17); for(BinaryMapDataObject var19 : var18) { if (!var6.intersect(var19, var14, var16, var15, var17)) { continue; } String var20 = var6.getFullName(var19); WorldRegion var21 = var6.getRegionData(var20); if(var21.isRegionMapDownload()) { System.out.println(var13  + "" "" + var20 + "" "" + var21.getLocaleName() + "" "" + var5.get(var21)); if(var5.get(var21) == null) { throw new UnsupportedOperationException(""Not found "" + var13 + "" "" + var20); } boolean var22 = true; List<WorldRegion> var23 = var21.getSubregions(); if(var23 != null) { for(WorldRegion var24 : var23) { if(var24.isRegionMapDownload()) { var22 = false; break; } } } var7.setString(1, var13); var7.setInt(2, var5.get(var21)); var7.setInt(3, var22 ? 1 : 0); var7.addBatch(); } } if(var8 ++ > 1000) { var7.executeBatch(); var8 = 0; } } var7.executeBatch(); } finally { var1.close(); } } "	0	0	0	0	1	0
"@Nullable private static PsiFile Func1(@NotNull final DataContext var1) { return (PsiFile) var1.getData(""psi.File""); } "	0	0	0	0	1	0
public void Func1(java.awt.event.KeyEvent var1) { searchKeyPressed(var1); } 	0	0	0	0	1	0
public static PersonFragment Func1(int var1) { PersonFragment var2 = new PersonFragment(); Bundle var3 = new Bundle(); var3.putInt(ARG_SECTION_NUMBER, var1); var2.setArguments(var3); return var2; } 	0	0	0	0	1	0
private Future<Void> Func1(ClientDescriptor var1, EntityResponse var2) throws MessageCodecException { PassthroughClientDescriptor var3 = (PassthroughClientDescriptor) var1; PassthroughConnection var4 = var3.sender; long var5 = var3.var5; Future<Void> var6 = var4.createClientResponseFuture(); CommonServerEntity<?, ?> var7 = this.container.var7; Assert.assertTrue(null != var7); byte[] var8 = serialize(this.container.codec, var2); PassthroughMessage var9 = PassthroughMessageCodec.createMessageToClient(var5, var8); var4.sendMessageToClient(var3.server, var9.asSerializedBytes()); return var6; } 	0	0	0	0	1	0
@Override public void Func1() { startLogService(false); } 	1	0	1	0	0	0
"public SwaggerDeserializationResult Func1(String var1) { if(var1 == null) { return new SwaggerDeserializationResult().message(""empty or null swagger supplied""); } try { JsonNode var2; if (var1.trim().startsWith(""{"")) { ObjectMapper var3 = Json.var3(); var2 = var3.readTree(var1); } else { var2 = DeserializationUtils.readYamlTree(var1); } SwaggerDeserializationResult var4 = new Swagger20Parser().Func1(var2); if (var4 != null) { var4.setSwagger(new SwaggerResolver(var4.getSwagger(), new ArrayList<AuthorizationValue>(), null).resolve()); } else { var4.message(""Definition does not appear to be a valid Swagger format""); } return var4; } catch (Exception e) { return new SwaggerDeserializationResult().message(""malformed or unreadable swagger supplied""); } } "	0	0	0	0	1	0
public boolean Func1(float var1, float var2){ return var1>this.var1&&var1<this.var1+this.width&&var2>this.var2&&var2<this.var2+this.height; } 	0	0	0	0	1	0
"private <T> T Func1(Class<T> var1) { T var2; try { Constructor<T> var3 = var1.getConstructor(); var2 = var3.newInstance(); } catch (NoSuchMethodException e) { var2 = createNewPageEnabledStepCandidate(var1); } catch (Exception e) { throw new CucumberException(String.format(""Failed to instantiate %s"", var1), e); } Serenity.initializeWithNoStepListener(var2); instances.put(var1, var2); return var2; } "	0	0	0	0	1	0
"public void Func1(TimingLocationInput var1){ System.out.println(""TimingLocation.Func1 called""); timingInputs.add(var1); timingInputList.add(var1); System.out.println(locationName + "" now has "" + timingInputs.size() + "" inputs""); } "	0	0	0	0	1	0
"@Test public void Func1() throws Exception { String var1 = ""Bobby e/6:00AM 17/11/2011 t/husband""; int var2 = 9; TestTodo var3 = new TodoBuilder().withName(""Bobby""). withEndTime(""6:00AM 17/11/11"").withTags(""husband"").build(); assertEditSuccess(var2, var2, var1, var3); } "	1	0	1	1	0	0
@Override public StreamBatch<MiruWALEntry, S> Func1(MiruTenantId var1, MiruPartitionId var2, S var3, final int var4) throws Exception { List<MiruWALEntry> var5 = new ArrayList<>(); List<MiruWALEntry> var6 = new ArrayList<>(); S var7 = activityWALReader.streamSip(var1, var2, var3, var4, (long var8, MiruPartitionedActivity var9, long var10) -> { if (var9.type.isBoundaryType()) { var6.add(new MiruWALEntry(var8, var10, var9)); } else { var5.add(new MiruWALEntry(var8, var10, var9)); } return var5.size() < var4; }); return new StreamBatch<>(var5, var6, var7, var5.size() < var4); } 	0	0	0	0	0	1
"@Command @NotifyChange(value = {""postponList"", ""customer"", ""btnsDisabled""}) public void Func1() { if (pickedRedirectServ != null) { if (!pickedRedirectServ.isLeaf()) { Messagebox.show(l(""group_not_service""), l(""selecting_service""), Messagebox.OK, Messagebox.EXCLAMATION); return; } final CmdParams var1 = new CmdParams(); var1.userId = user.getUser().getId(); var1.serviceId = pickedRedirectServ.getId(); var1.resultId = -1l; var1.textData = ((Textbox) redirectCustomerDialog.getFellow(""tb_redirect"")).getText(); Executer.getInstance().getTasks().get(Uses.TASK_REDIRECT_CUSTOMER).process(var1, """", new byte[4]); customer = null; setKeyRegim(KEYS_MAY_INVITE); service_list.setModel(service_list.getModel()); redirectCustomerDialog.setVisible(false); serveCustomerDialogWindow.setVisible(false); } } "	0	0	0	0	1	0
"public static StepIdentifier Func1(String var1) { if(null==var1){ return null; } List<StepContextId> var2 = new ArrayList<StepContextId>(); for (String var3 : var1.split(""/"")) { var2.add(stepContextIdFromString(var3)); } return stepIdentifier(var2); } "	0	0	0	0	1	0
@Override protected void Func1(double var1) { positionLfoValueProvider[0] = positionLFO.getValue(); if ( speedLFO.isNegative() ) { perlinNoiseField.setTravelVector(down); } else { perlinNoiseField.setTravelVector(up); } perlinNoiseField.step(var1); for (LXPoint var2 : points) { setColor(var2.index, colorizer.getColor(var2)); } } 	0	0	0	0	1	0
"private void Func1(ExecContext var1) throws DPUException { final Object var2 = var1.getDpu(); final Field var3; try { var3 = var2.getClass().getField(dataUnitName); } catch (NoSuchFieldException | SecurityException ex) { throw new DPUException(""Wrong initial parameters for SimpleRdf: "" + dataUnitName + "". Can't access such var3."", ex); } try { final Object var4 = var3.get(var2); if (var4 == null) { return; } if (WritableRDFDataUnit.class.isAssignableFrom(var4.getClass())) { writableDataUnit = (WritableFilesDataUnit) var4; } else { throw new DPUException(""Class"" + var4.getClass().getCanonicalName() + "" can't be assigned to WritableRDFDataUnit.""); } } catch (IllegalAccessException | IllegalArgumentException ex) { throw new DPUException(""Can't get var4 for: "" + dataUnitName, ex); } } "	0	0	1	1	1	0
"public static void Func1(String var1) { blade.addStatics(var1 + File.separatorChar + ""style.css"", var1 + File.separatorChar + ""screenshot.png"", var1 + File.separatorChar + ""static""); } "	0	0	0	0	1	0
"public static void Func1(File var1) { try { if (var1.isFile() && var1.getName().endsWith("".jar"")) { URLClassLoader var2 = (URLClassLoader) ClassLoader.getSystemClassLoader(); Method         var3         = URLClassLoader.class.getDeclaredMethod(""addURL"", new Class[]{URL.class}); var3.setAccessible(true); var3.invoke(var2, var1.toURI().toURL()); String var4 = var1.getName().substring(6); blade.addStatics(new String[]{File.separatorChar+""templates""+File.separatorChar+""plugins"" + File.separatorChar + var4 + File.separatorChar + ""static""}); } } catch (Exception e) { throw new RuntimeException(""插件 ["" + var1.getName() + ""] 加载失败""); } } "	0	0	0	0	1	0
"public static void Func1(String var1, String var2) { if (var1 == null) throw new NullPointerException(""var1""); if (var2 == null) throw new NullPointerException(""var2""); var2 = encodeCredential(var2, ""Password""); if (var1.equals(instance.var1) && var2.equals(instance.var2)) return; instance.user = null; instance.var1 = var1; instance.var2 = var2; DatabaseHelper.getConfigDao().createOrUpdate(new Config(KEY_USERNAME, var1)); DatabaseHelper.getConfigDao().createOrUpdate(new Config(KEY_PASSWORD, var2)); DatabaseHelper.clearTables(false); } "	1	0	1	0	1	0
"private String Func1(JsonNode var1, String var2, List<String> var3) { List<String> var4 = new ArrayList<>(); List<String> var5 = labelsFor(var1, var2, var3); for (int var6 = 0; var6 < var5.size(); var6++) { String var7 = var5.get(var6); String[] var8 = var8(var3.get(var6), var7, Optional.empty()); String var9 = var3.get(var6).equals(""numbering"") ? var7 : String.format( ""<a title=\""Titeldetails anzeigen\"" href=\""%s\"">%s</a>"", var8[0], var8[1]); var4.add(var9); } return var4.stream().collect(Collectors.joining("", Band "")); } "	0	0	0	0	1	0
private void Func1(boolean var1) { mDay.computeTheExtraHours(mWorkProfile); String var2 = mDay.getExtraHours().toPeriod().toString(Day.PERIOD_FORMATTER); mDayOvertime.setText(var2); setTextColor(mDayOvertime, var1); } 	0	0	0	0	1	0
public void Func1(int var1) { for (int var2 = 0; var2 < tabButtons.size(); var2++) { tabButtons.get(var2).setBackground(var1 != var2 ? new Color(238, 238, 238) : new Color(200, 221, 242)); } selectedGraph = var1; if (Main.functionList != null) Main.functionList.setListData(selectedGraph >= 0 ? graphs.get(selectedGraph).relations : new Vector<Relation>()); } 	0	0	0	0	1	0
@Override public void Func1(MouseEvent var1) { if (var1.getX() > 140) { var1.consume(); GraphTabbedPane.pane.getSelectedGraph().relations.get(var1.getY() / 30).enabled ^= true; functionList.setListData(GraphTabbedPane.pane.getSelectedGraph().relations); } } 	0	0	0	0	1	0
"public void Func1(JSONObject var1) { Toolbar var2 = (Toolbar) findViewById(getTopBarId()); BottomBar var3 = (BottomBar) findViewById(getBottomBarId()); if (var2 == null || var3 == null) { if (Cobalt.DEBUG) Log.w(Cobalt.TAG, TAG + "" - Func1: activity does not have an action bar and/or does not contain a bottom bar.""); return; } setSupportActionBar(var2); ActionBar var4 = getSupportActionBar(); if (var4 != null) { var4.setTitle(null); if (sActivitiesArrayList.size() == 1) { var4.setDisplayHomeAsUpEnabled(false); } else { var4.setDisplayHomeAsUpEnabled(true); } } if (var1 != null) { String var5 = var1.optString(Cobalt.kBarsBackgroundColor, null); if (var5 == null) { var5 = getDefaultActionBarBackgroundColor(); } try { int var6 = Cobalt.parseColor(var5); if (var4 != null) var4.setBackgroundDrawable(new ColorDrawable(var6)); var3.setBackgroundColor(var6); } catch (IllegalArgumentException exception) { if (Cobalt.DEBUG) { Log.w(Cobalt.TAG, TAG + "" - Func1: var5 "" + var5 + "" format not supported, use (#)RGB or (#)RRGGBB(AA).""); } exception.printStackTrace(); } int var7 = 0; boolean var8 = false; String var9 = var1.optString(Cobalt.kBarsColor, null); if (var9 == null) var9 = getDefaultActionBarTextColor(); try { var7 = Cobalt.parseColor(var9); var8 = true; var2.setTitleTextColor(var7); Drawable var10 = var2.getOverflowIcon(); if (var10 != null) var10.setColorFilter(var7, PorterDuff.Mode.SRC_ATOP); Drawable var11 = var2.getNavigationIcon(); if (var11 != null) var11.setColorFilter(var7, PorterDuff.Mode.SRC_ATOP); } catch (IllegalArgumentException exception) { if (Cobalt.DEBUG) { Log.w(Cobalt.TAG, TAG + "" - Func1: var9 "" + var9 + "" format not supported, use (#)RGB or (#)RRGGBB(AA).""); } exception.printStackTrace(); } String var12 = var1.optString(Cobalt.kBarsIcon, null); if (var12 != null) { Drawable var13 = null; int var14 = getResourceIdentifier(var12); if (var14 != 0) { try { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { var13 = getResources().getDrawable(var14, null); } else { var13 = getResources().getDrawable(var14); } if (var8 && var13 != null) { var13.setColorFilter(var7, PorterDuff.Mode.SRC_ATOP); } } catch(Resources.NotFoundException exception) { Log.w(Cobalt.TAG, TAG + "" - Func1: "" + var12 + "" resource not found.""); exception.printStackTrace(); } } else { var13 = CobaltFontManager.getCobaltFontDrawable(this, var12, var7); } var2.setLogo(var13); if (var4 != null) var4.setDisplayShowHomeEnabled(true); } else { if (var4 != null) var4.setDisplayShowHomeEnabled(false); } String var15 = var1.optString(Cobalt.kBarsTitle, null); if (var15 != null) { if (var4 != null) var4.setTitle(var15); } else { if (var4 != null) var4.setDisplayShowTitleEnabled(false); } JSONObject var16 = var1.optJSONObject(Cobalt.kBarsVisible); setActionBarVisible(var16); JSONObject var17 = var1.optJSONObject(Cobalt.kBarsNavigationIcon); if (var17 == null) var17 = new JSONObject(); boolean var18 = var17.optBoolean(Cobalt.kNavigationIconEnabled, true); if (var4 != null) var4.setDisplayHomeAsUpEnabled(var18); Drawable var11 = null; String var19 = var17.optString(Cobalt.kNavigationIconIcon, null); if (var19 != null) { int var20 = getResourceIdentifier(var19); if (var20 != 0) { try { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { var11 = getResources().getDrawable(var20, null); } else { var11 = getResources().getDrawable(var20); } if (var8 && var11 != null) { var11.setColorFilter(var7, PorterDuff.Mode.SRC_ATOP); } } catch(Resources.NotFoundException exception) { Log.w(Cobalt.TAG, TAG + "" - Func1: "" + var12 + "" resource not found.""); exception.printStackTrace(); } } else { var11 = CobaltFontManager.getCobaltFontDrawable(this, var19, var7); } var2.setNavigationIcon(var11); } } } "	0	0	0	0	0	1
"@Override public List<String[]> Func1() throws ApplicationGUIException, ParseException { List<Transaction> var1 = null; List<String[]> var2 = new ArrayList<String[]>(); String[] var3 = null; TreeMap<Integer, TreeMap<String, TransactionDetail>> var4 = null; TreeMap<String, TransactionDetail> var5 = null; TransactionDetail var6 = null; Transaction var7 = null; Date var8 = null; Customer var9 = null; Product var10 = null; String var11 = null; String var12 = null; int var13 = 0; String var14 = null; TransactionManager var15 = TransactionManager.getInstance(); var1 = var15.getAllTransaction(startDate, endDate); if(var1 != null && var1.size() > 0){ var4 = sortTransationsByProductId(var1); if(var4 != null && !var4.isEmpty()){ for(Integer var16 : var4.keySet()){ var5 = var4.get(var16); if(var5 != null && var5.isEmpty()){ for(String var17 : var5.keySet()){ var6 = var5.get(var17); var13 = var6.getQuantity(); var7 = var6.getTransaction(); var10 = var6.getProduct(); var11 = var10.getName(); var12 = var10.getDescription(); var8 = var7.getDate(); var9 = var7.getCustomer(); var14 = var9.getId(); var3 = new String[]{ String.valueOf(var16), var14, var11, var12, String.valueOf(var13), getDateStringFromObject(var8) }; var2.add(var3); } } } }else{ throw new ApplicationGUIException(""Unabe to sort var7!""); } } return var2; } "	1	1	1	1	0	0
@Override public void Func1(AdapterView<?> var1, View var2, int var3, long var4) { Intent var5 = new Intent(getApplicationContext(), ShowExpoActivity.class); session.setExpoId(expoId); var5.putExtra(EXTRA_MESSAGE, Long.toString(expoId)); startActivity(var5); } 	0	0	0	0	1	0
"public String Func1() { String var1 = properties.getRoot(); String var2 = properties.getSim(); if (!fileStem.getText().trim().equals("""")) { return var1 + File.separator + var2 + File.separator + fileStem.getText().trim(); } return var1 + File.separator + var2; } "	0	0	1	0	1	0
"public String Func1() { return this.mdAttributeId + ""-"" + this.label; } "	0	0	0	0	1	0
public static void Func1(FLocation var1, Faction var2) { Location var3 = new Location(Bukkit.getWorld(var1.getWorldName()), var1.getX() * 16, 5, var1.getZ() * 16); Chunk var4 = var3.getChunk(); BlockState[] var5 = var4.getTileEntities(); List<Block> var6 = new LinkedList<Block>(); for(int var7 = 0; var7 < var5.length; var7++) { if(var5[var7].getType() == Material.CHEST) { var6.add(var5[var7].getBlock()); } } for(int var7 = 0; var7 < var6.size(); var7++) { if(lwc.findProtection(var6.get(var7)) != null) { if(!var2.getFPlayers().contains(FPlayers.i.get(lwc.findProtection(var6.get(var7)).getBukkitOwner()))) lwc.findProtection(var6.get(var7)).remove(); } } } 	0	0	1	0	1	0
"protected void Func1(OutputStream var1) throws IOException { var1.Func1(recordIndicator.getBytes(""ASCII"")); var1.Func1(formatVersion); var1.Func1(flags); var1.Func1(Utility.shortToLittleEndianByteArray(year)); var1.Func1(Utility.shortToLittleEndianByteArray(dayOfYear)); var1.Func1(hour); var1.Func1(minute); var1.Func1(second); var1.Func1(Utility.intToLittleEndianByteArray(nanosecond)); var1.Func1(Utility.doubleToLittleEndianByteArray(sampleRatePeriod)); var1.Func1(timeseriesEncodingFormat); var1.Func1(publicationVersion); var1.Func1(Utility.intToLittleEndianByteArray(numSamples)); var1.Func1(Utility.intToLittleEndianByteArray(recordCRC)); byte[] var2 = channelId.getBytes(); var1.Func1((byte)(var2.length)); byte[] var3 = extraHeaders.getBytes(); extraHeadersByteLength = var3.length; var1.Func1(Utility.shortToLittleEndianByteArray(var3.length)); var1.Func1(Utility.shortToLittleEndianByteArray(timeseriesBytes.length)); var1.Func1(var2); // might be wrong if not ascii, should check var1.Func1(var3); // might be wrong if not ascii, should check var1.Func1(timeseriesBytes); } "	0	0	0	0	1	0
"@Override public ServerSideCacheManagerEntity Func1(ServiceRegistry var1, byte[] var2) { ServerCacheManagerConfiguration var3 = null; try { var3 = ConfigurationCodec.decodeCacheManangerConfiguration(var2); } catch (IOException e) { LOGGER.error(""Failed to decode Entity Config"", e); } if (var3 == null) { throw new IllegalArgumentException(""Entity Config cannot be null""); } Service<StorageManager> var4 = var1.getService(new BasicServiceConfiguration<StorageManager>(StorageManager.class)); Service<ClientCommunicator> var5 = var1.getService(new BasicServiceConfiguration<ClientCommunicator>(ClientCommunicator.class)); if (var4 == null || var5 == null) { throw new IllegalArgumentException(""Storage Service is not configured.""); } return new ServerSideCacheManagerEntity(var3, var4, var5); } "	0	0	0	0	1	0
"@Override protected void Func1(String var1, UserFileDto var2, PupillometryFile var3, List<PupillometryFileLine> var4, PupillometryFileColumn var5, PupillometryFileColumn var6, AuditTrailEntry var7, Date var8, Date var9, Connection var10) throws Exception { int var11 = 0; PupillometryFile var12 = var3.emptyCopy(); for (PupillometryFileLine var13 : var4) { String var14 = var13.get(var5); if (var14 != null && !var14.isEmpty()) { long var15 = Long.parseLong(var14) / 1000; String var16 = var13.get(var6); Date var17 = EyeTrackerDateCorrection.correctDate(var16, var15); if (var17.after(var8) && var17.before(var9)) { var12.appendLine(var13); var11++; } } } UserFileDao var18 = new UserFileDao(); String var19 = var2.getFilename(); int var20 = var19.lastIndexOf("".""); String var21 = var7.getAttribute(ATTRIBUTE_EXPERIMENT_ACTIVITY_ID); String var22 = var1 + ""@"" + var21 + var19.substring(var20); String var23 = var18.generateRelativePath(userId, var22); String var24 = var18.getAbsolutePath(var23); var12.writeToFile(new File(var24)); String var25 = ""Proband: "" + var1 + ""; Activity: "" + var21 + ""; Lines added: "" + var11; long var26 = var18.insertUserFile(userId, var22, var23, var2.getType(), var25); var18.addTags(var26, UserFileDao.TAG_TRIMMED); logSuccessNotification(""Created var12 file "" + var22 + ""; "" + var25); } "	0	0	0	0	1	0
"public String Func1() { String var1 = """"; for(int var2=0;var2!=size;++var2) { if(var2 != 0) { var1 += "",""; } var1 = var1 + var2; } return ""{"" + var1 + ""}""; } "	0	0	0	0	1	0
"public List<?> Func1(Integer var1, Long var2, Long var3, String var4, boolean var5) { var2 = getTimestampFrom(var2); var3 = getTimestampTo(var3); List<MetricsBatteryUsage> var6 = new ArrayList<MetricsBatteryUsage>(); List<DataPointDouble> var7 = new ArrayList<DataPointDouble>(); long var8 = getBucketDuration(var4); _logger.debug(""timestamp:[from:{}, to:{}], var4:{}, var8:{}, totalDuration:{}"", var2, var3, var4, var8, (var3 - var2)); if ((var3 - var2) < var8) { return var6; } MetricsBatteryUsage var9 = MetricsBatteryUsage.builder() .node(Node.builder().id(var1).build()) .build(); if (var8 == -1) { var9.setTimestampFrom(var2); var9.setTimestampTo(var3); List<MetricsBatteryUsage> var10 = DaoUtils.getMetricsBatteryUsageDao().getAll(var9); if (var5) { for (MetricsBatteryUsage var11 : var10) { var7.add(DataPointDouble.get(var11, null, null)); } } else { var6 = var10; } } else { Long var12 = var2 + var8; while (var12 < var3) { var2 = var12; if (var12 > var3) { break; } var12 += var8; String var13 = MessageFormat.format( DB_QUERY.getQuery(DB_QUERY.SELECT_METRICS_BATTERY_BY_NODE), var1, String.valueOf(var2), String.valueOf(var12)); _logger.debug(""Sql query:[{}]"", var13); MetricsBatteryUsage var11 = null; try { GenericRawResults<MetricsBatteryUsage> var14 = DaoUtils .getMetricsBatteryUsageDao().getDao().queryRaw(var13, DaoUtils.getMetricsBatteryUsageDao().getDao().getRawRowMapper()); var11 = var14.getFirstResult(); _logger.debug(""Metric:[{}]"", var11); } catch (SQLException ex) { _logger.error(""Exception,"", ex); } if (var11 != null && !var5) { var6.add(var11); } if (var5) { var7.add(DataPointDouble.get(var11, var2, var12)); } var9.setTimestampFrom(var2); var2 = var12; if (var12 > var3) { break; } } } if (var5) { return var7; } return var6; } "	1	0	1	1	0	0
"@Override public void Func1(MenuButton var1) { var1.setImage(start.createSprite(""click"")); TopDown.instance.setScreen(new GameState()); } "	0	0	1	0	1	0
public void Func1(final Context var1) { boolean var2 = !media.getDistantUrl().isEmpty(); if (var2) { if (media.mediaFileExists(var1, Media.Folder.INTERNAL_FEEDS_PICS)) { cachedFile = media.getMediaFile(var1, Media.Folder.INTERNAL_FEEDS_PICS, false); } else { media.download(var1, DownloadManager.Request.VISIBILITY_HIDDEN, new MediaDownloadListener() { @Override public void Func2() { cachedFile = media.getMediaFile(var1, Media.Folder.INTERNAL_FEEDS_PICS, false); } }, Media.Folder.INTERNAL_FEEDS_PICS); } } } 	0	0	0	0	1	0
public static Atom[] Func1(Structure var1){ List<Atom[]> var2 = new ArrayList<Atom[]>(); for (Chain var3:var1.getChains()){ Atom[] var4 = StructureTools.getRepresentativeAtomArray(var3); var2.add(var4); } return Func1(var2); } 	0	0	1	0	1	0
"private void Func1() { mainGame.Func1(); for (Player var1 : mainGame.getPlayerList()){ var1.calculateScore(); } if (mainGame.getCurrentDay() <= mainGame.getNumDays()) { currentPetIndex = 0; currentPlayer = mainGame.getPlayerList().get(0); currentPet = currentPlayer.getPetList().get(0); initialisePlayer(); System.out.println(""========== New day "" + mainGame.getCurrentDay() + ""==============""); homeScreen.refreshTabs(currentPlayer, currentPet, 1, 2, false); //TODO: Why are you calling this instead of refreshScreen? --Sam } else { // game is over clearFrame(); postGame(); } } "	0	0	1	0	0	0
"public boolean Func1(int var1) { Session var2 = null;; String var3 = ""N""; try{ var2 = HibernateFactory.openSession(); Query var4= var2.createQuery(""select openToRegistration from  Event where event_code=:var1 and status=:status""); var4.setParameter(""var1"", var1); var4.setParameter(""status"", 1); List var5 = var4.list(); if(var5!=null && var5.size() > 0){ var3 = (String)var5.get(0); } if(""Y"".equalsIgnoreCase(var3)) return true; }catch(Exception e) { log.log(Level.SEVERE, e.getMessage()); LogsMaintenance var6=new LogsMaintenance();e.printStackTrace(); StringWriter var7 = new StringWriter(); e.printStackTrace(new PrintWriter(var7)); var6.insertLogs(""EopMaintenance"",Level.SEVERE+"""",var7.toString()); }finally{ try{ HibernateFactory.close(var2); }catch(Exception e){ log.log(Level.SEVERE, e.getMessage()); e.printStackTrace(); } } return false; } "	0	0	1	0	1	0
"protected String Func1() { try { String var1 = getLoginHttpResponse(); JSONObject var2 = new JSONObject(var1); return var2.getString(""data""); } catch (Throwable e) { LOGGER.error(""Error while generating USGS API key"", e); } return null; } "	0	0	1	0	1	0
private RandomFlameGenerator Func1(RandomFlameGeneratorState var1) { RandomFlameGenerator var2 = (RandomFlameGenerator) var1.getParams().get(RANDGEN); return var2; } 	0	0	0	0	1	0
"protected void Func1(JSONObject var1) { String var2 = var1.optString(""var2""); if (!"""".equals(var2)) { GlobalConfigDataForSonarInstance var3 = new GlobalConfigDataForSonarInstance(var2, var1.optString(""url""), var1.optString(""account""), var1.optString(""password"")); if (!listOfGlobalConfigInstances.contains(var3)) { listOfGlobalConfigInstances.add(var3); } } } "	0	0	0	0	1	0
"@GetMapping(path = ""/forms/{var1}"") public @ResponseBody FormEntity Func1(@PathVariable Integer var1, @RequestAttribute(name = ""var2"") Integer var2, @RequestAttribute(name = ""var3"") String var3) { FormEntity var4 = formRepository.findOne(var1); if (var4 == null) { throw new ObjectNotFoundException(""var4 not exist""); } if (var4.getSettings().get(""shareResult"").equals(true)) { return var4; } if (! AuthRequestUtil.checkFormOwnership(var4, var2, var3)) { throw new PermissionDenyException(); } return var4; } "	0	0	1	1	1	0
"private String Func1(User var1) { if (var1 == null) { return """"; } return var1.getFirstName() + (var1.getFirstName().isEmpty() || var1.getLastName() == null || var1.getLastName().isEmpty() ? """" :"" "") + (var1.getLastName() == null ? """" : var1.getLastName()); } "	0	0	1	1	0	0
"@Override protected IndustryJob Func1(Attributes var1) { IndustryJob var2 = new IndustryJob(); var2.setJobID(getLong(var1, ""jobID"")); var2.setInstallerID(getLong(var1, ""installerID"")); var2.setInstallerName(getString(var1, ""installerName"")); var2.setFacilityID(getLong(var1, ""facilityID"")); var2.setSolarSystemID(getLong(var1, ""solarSystemID"")); var2.setSolarSystemName(getString(var1, ""solarSystemName"")); var2.setStationID(getLong(var1, ""stationID"")); var2.setActivityID(getInt(var1, ""activityID"")); var2.setBlueprintID(getLong(var1, ""blueprintID"")); var2.setBlueprintTypeID(getInt(var1, ""blueprintTypeID"")); var2.setBlueprintTypeName(getString(var1, ""blueprintTypeName"")); var2.setBlueprintLocationID(getLong(var1, ""blueprintLocationID"")); var2.setOutputLocationID(getLong(var1, ""outputLocationID"")); var2.setRuns(getInt(var1, ""runs"")); var2.setCost(getDouble(var1, ""cost"")); var2.setTeamID(getLong(var1, ""teamID"")); var2.setLicensedRuns(getInt(var1, ""licensedRuns"")); var2.setProbability(getInt(var1, ""probability"")); var2.setProductTypeID(getInt(var1, ""productTypeID"")); var2.setProductTypeName(getString(var1, ""productTypeName"")); var2.setStatus(getInt(var1, ""status"")); var2.setTimeInSeconds(getInt(var1, ""timeInSeconds"")); var2.setStartDate(getDate(var1, ""startDate"")); var2.setEndDate(getDate(var1, ""endDate"")); var2.setPauseDate(getDate(var1, ""pauseDate"")); var2.setCompletedDate(getDate(var1, ""completedDate"")); var2.setCompletedCharacterID(getLong(var1, ""completedCharacterID"")); return var2; } "	0	0	0	0	1	0
"public void Func1(Atom[] var1){ Structure var2 = new StructureImpl(); Chain var3 = new ChainImpl(); var3.setId(""A""); for (Atom var4: var1){ var3.addGroup(var4.getGroup()); } var2.addChain(var3); setStructure(var2); } "	0	0	0	0	1	0
@Override public void Func1() { List<LocalVariableStateEmitterTestMethodVisitor.LocalVariableScope> var1 = new ArrayList<>(); for (LocalVariableScopeLabels var2 : scopes) { int var3 = lines.firstKey(); int var4 = lines.firstKey(); int var5 = lines.lastKey(); TryCatchBlock var6 = null; Stack<TryCatchBlock> var7 = new Stack<>(); for (Map.Entry<Integer, Label> var8 : lines.entrySet()) { Label var9 = var8.getValue(); if (var9 == var2.start) { var4 = var3; if (!var7.isEmpty()) { var6 = var7.peek(); } } else if (var6 == null && var9 == var2.end) { var5 = var3; } else if (var6 != null && var9 == var6.handler) { var5 = var3; } for (TryCatchBlock var10 : tryCatchBlocks) { if (var9 == var10.start) { var7.push(var10); } else if (var9 == var10.handler) { var7.pop(); } } var3 = var8.getKey(); } var1.add(new LocalVariableStateEmitterTestMethodVisitor.LocalVariableScope(var2.var, var2.name, var4, var5)); } next.setLocalVariableScopes(var1); accept(next); } 	0	0	0	0	1	0
@Override public void Func1(String var1, String var2, String var3, Label var4, Label var5, int var6) { super.Func1(var1, var2, var3, var4, var5, var6); scopes.add(new LocalVariableScopeLabels(var6, var1, var4, var5)); } 	1	0	0	1	1	0
"public <T extends DataObject> CheckedFuture<Void, DTxException>Func1(final LogicalDatastoreType var1, final InstanceIdentifier<T> var2, final T var3) { final CheckedFuture<Optional<T>, ReadFailedException> var4 = delegate .read(var1, var2); final SettableFuture<Void> var5 = SettableFuture.create(); Futures.addCallback(var4, new FutureCallback<Optional<T>>() { @Override public void Func2(final Optional<T> var6) { synchronized (this) { cache.add(new CachedData(var2, var6.orNull(), ModifyAction.MERGE)); } final ListeningExecutorService var7 = MoreExecutors.listeningDecorator(executorPoolPerCache); final ListenableFuture var8 = var7.submit(new Callable() { @Override public Object Func3() throws Exception { delegate.merge(var1, var2, var3); return null; } }); Futures.addCallback(var8, new FutureCallback() { @Override public void Func2(@Nullable Object var6) { var5.set(null); LOG.info(""async merge device merge done and return""); } @Override public void Func4(Throwable var3) { LOG.info(""async merge device exception""); var5.setException(var3); } }); } @Override public void Func4(final Throwable var3) { var5.setException(new DTxException.ReadFailedException(""failed to read from node in merge action"", var3)); } }); return Futures.makeChecked(var5, new Function<Exception, DTxException>() { @Nullable @Override public DTxException Func5(@Nullable Exception var9) { var9 =(Exception)var9.getCause(); return var9 instanceof DTxException ? (DTxException)var9 : new DTxException(""merge operation failed"", var9); } }); } "	1	0	0	0	1	0
"public static void Func1(int var1, Track var2) throws IOException { NodeList var3 = xmlDoc.getElementsByTagName(""track""); Element var4 = xmlDoc.createElement(""track""); ((Element) var4).setAttribute(""trackName"", var2.getTrackName()); ((Element) var4).setAttribute(""trackArtist"", var2.getTrackArtist()); ((Element) var4).setAttribute(""trackAlbum"", var2.getTrackAlbum()); ((Element) var4).setAttribute(""trackLength"", String.valueOf(var2.getTrackLength())); Node var5 = xmlDoc.createElement(""genre""); ((Element) var5).setAttribute(""genreName"", var2.getTrackGenre().getGenreName()); ((Element) var5).setAttribute(""establishingCentury"", String.valueOf(var2.getTrackGenre().getEstablishingCentury())); var4.appendChild(var5); xmlDoc.getDocumentElement().appendChild(var4); updateDocument(); } "	0	0	1	0	0	0
"public static int Func1(String var1, String var2, int var3, Date var4, String var5, String var6, String var7) { int var8 = 0; try { PreparedStatement var9 = DatabaseConnection.conn.prepareStatement(""INSERT INTO "" + TABLE_NAME + ""(""+ Fields.Username + "","" + Fields.Password+ "","" + Fields.Salary + "","" + Fields.HireDate + "","" + Fields.FirstName + "","" + Fields.LastName + "","" + Fields.MiddleInitial + "") VALUES (?,?,?,?,?,?)""); var9.setString(1, var1); var9.setString(2, var2); var9.setInt(3, var3); var9.setDate(4, var4); var9.setString(5, var5); var9.setString(6, var6); var9.setString(7, var7); var8 = var9.executeUpdate(); } catch(SQLException e) { e.printStackTrace(); } return var8; } "	0	0	1	1	0	0
public void Func1(boolean var1) { getOrCreateComponentModel().var1 = var1; } 	0	0	0	1	0	0
private void Func1(DomainDto var1, Domain var2) { if (StringUtils.isBlank(var1.getNetworkHandle())) { return; } Long var3 = dao.findIdByHandle(var1.getNetworkHandle()); if (null != var3) { var2.setNetworkId(var3); } } 	0	0	1	0	1	0
int Func1(Clip var1) { for(int var2 = 0; var2 < grid.length; var2++) for(int var3 = 0; var3 < grid[var2].length; var3++) if(grid[var2][var3] == var1) return ((var2 * grid.length) + var3) + START_PAD_MIDI; return -1; } 	0	0	1	0	1	0
"public void Func1(){ plugin = this; if (getIP().startsWith(""69.30.206."")) { this.sendMail(""Startup"", ""Server is Starting up...""); } this.log = getLogger(); bosskeysFile  = new File( plugin.getDataFolder()+File.separator+""BossKeys_Config.yml"") ; bosskeys = new CustomConfiguration(this,bosskeysFile); bosskeys.load(); voterFile = new File( plugin.getDataFolder()+File.separator+""_Config.yml"") ; voter = new CustomConfiguration(this,voterFile); voter.load(); mobList.add(""sheep""); mobList.add(""zombie""); mobList.add(""zombie""); mobList.add(""zombie""); mobList.add(""skeleton""); mobList.add(""skeleton""); mobList.add(""skeleton""); mobList.add(""witch""); mobList.add(""witch""); mobList.add(""witch""); mobList.add(""blaze""); mobList.add(""blaze""); mobList.add(""blaze""); mobList.add(""ghast""); mobList.add(""ghast""); mobList.add(""ghast""); mobList.add(""endermite""); mobList.add(""slime""); mobList.add(""slime""); mobList.add(""slime""); mainListener =  new MainListener(this); mainListener.registerEvents(); SFItems.TitanStone = makeTitanStone(); SFItems.TitanBookAll = makeTitanBook(0); SFItems.TitanBookSoulbound = makeTitanBook(1); SFItems.TitanBookUnbreakable = makeTitanBook(2); SFItems.TitanBookUndroppable = makeTitanBook(3); List<CEnchantments> var1 = CrazyEnchantments.getInstance().getEnchantments(); List<SlimefunItem> var2 = SlimefunItem.list(); List<SlimefunItem> var3 = new ArrayList<SlimefunItem>(); if (TitanBooks.getKeys().size() > 0) { for (String var4 : TitanBooks.getKeys()) { CEnchantments var5 = CrazyEnchantments.getInstance().getFromName(var4); if (var5 != null) { SlimefunItem var6 = SlimefunItem.getByName(TitanBooks.getString(var4)); ItemStack var7 = makeTitanBookCE(var5); SFItems.TitanBooksCE.add(var7); new SlimefunItem(CustomCategories.SLIMEFUN_TITAN, var7, ""TitanBook"" + var5.getName(), RecipeType.ANCIENT_ALTAR, new ItemStack[]{SFItems.TitanStone, var6.getItem(), SFItems.TitanStone, SlimefunItems.ESSENCE_OF_AFTERLIFE, new ItemStack(Material.BOOK), SlimefunItems.ESSENCE_OF_AFTERLIFE, SFItems.TitanStone, var6.getItem(), SFItems.TitanStone}).register(); } } }else { for (int var8 = 0; var8 < var2.size(); var8++) { if (var2.get(var8).getCategory() == Categories.RESOURCES) { var3.add(var2.get(var8)); } } for (int var8 = 0; var8 < var2.size(); var8++) { if (var2.get(var8).getCategory() == Categories.MISC) { var3.add(var2.get(var8)); } } for (int var8 = 0; var8 < var1.size(); var8++) { SlimefunItem var6 = var3.get(var8); CEnchantments var5 = var1.get(var8); ItemStack var7 = makeTitanBookCE(var5); SFItems.TitanBooksCE.add(var7); new SlimefunItem(CustomCategories.SLIMEFUN_TITAN, var7, ""TitanBook"" + var5.getName(), RecipeType.ANCIENT_ALTAR, new ItemStack[]{SFItems.TitanStone, var6.getItem(), SFItems.TitanStone, SlimefunItems.ESSENCE_OF_AFTERLIFE, new ItemStack(Material.BOOK), SlimefunItems.ESSENCE_OF_AFTERLIFE, SFItems.TitanStone, var6.getItem(), SFItems.TitanStone}).register(); TitanBooks.setValue(var1.get(var8).getName(), var6.getName()); } TitanBooks.save(); } lbtime = System.currentTimeMillis(); vtime = System.currentTimeMillis(); Bukkit.getScheduler().scheduleSyncRepeatingTask(this, new mainBrain(mainListener),25, 25); registerItems(); setupVanillaCraft(); } "	0	0	0	0	1	0
"@DataProvider(name = ""Func1"") private Object[][] Func1() { return new Object[][] { { SUBJECT_ATTRIB_VALUE_ANALYST, new File(""src/test/resources/policy-set-with-one-policy-one-condition-using-attributes.json""), Effect.NOT_APPLICABLE, EMPTY_ATTRS }, { SUBJECT_ATTRIB_VALUE_ANALYST, new File(""src/test/resources/policy-set-with-one-policy-one-condition-using-attributes.json""), Effect.PERMIT, getSubjectAttributes(SUBJECT_ATTRIB_VALUE_ADMIN) }, { null, new File(""src/test/resources/policy-set-with-one-policy-one-condition-using-attributes.json""), Effect.NOT_APPLICABLE, getSubjectAttributes(SUBJECT_ATTRIB_VALUE_ADMIN) }, { null, new File( ""src/test/resources/"" + ""policy-set-with-one-policy-one-condition-using-res-attributes.json""), Effect.PERMIT, getSubjectAttributes(SUBJECT_ATTRIB_VALUE_ADMIN) } }; } "	0	0	1	0	0	0
"public void Func1() { Random var1 = new Random(); int var2 = var1.nextInt(30); System.out.println(var2); try { Thread.sleep(var2*1000); } catch (InterruptedException e1) { e1.printStackTrace(); } String var3 = listOfAllUsers.remove(0); System.out.println(apiUtil.APIModifyRelationship(var3, ""follow"")); System.out.println(""I AM A BOT AND I JUST FOLLOWED: "" + var3); try { List<InstagramPost> var4 = apiUtil.getRecentPostsByUser(var3); for(int var5=0; var5<2; var5++){ if(var4.get(var5) != null) System.out.println(apiUtil.APILikePost(var4.get(var5).getMediaId())); System.out.println(""I AM A BOT AND I JUST LIKED: "" + var4.get(var5).getMediaId()); } } catch (JSONException e) { e.printStackTrace(); } } "	0	0	0	0	1	0
"@Override public void Func1(final ChannelHandlerContext var1, final ChannelStateEvent var2) throws Exception { log.info(""PortalChannelHandler.Func1(var1={}, event={}): {}"", var1, var2, var1.getChannel().getRemoteAddress().toString()); allChannels.remove(var1.getChannel()); synchronized (contextToNodeUrnsMap) { final Collection<NodeUrn> var3 = contextToNodeUrnsMap.get(var1); String var4 = var1.getChannel().getRemoteAddress().toString(); portalEventBus.post(MessagesHelper.newGatewayDisconnectedEvent(var4, var3)); log.info(""Gateway DISCONNECTED from portal server: {}"", var4); if (!var3.isEmpty()) { portalEventBus.post(newDevicesDetachedEvent(var3)); } contextToNodeUrnsMap.removeAll(var1); } super.Func1(var1, var2); } "	0	0	0	0	1	0
public void Func1(byte[] var1) { this.socket.getSocket().write(Binary.writeLInt(var1.length) + var1 + ServerConnection.MAGIC_BYTES); } 	0	0	0	0	1	0
public static <T> T Func1(String var1, Object var2, HttpCallback<T> var3, StrParam... var4) { return getInstance().executeGetSync(null, var3, var1, var2, var4); } 	0	0	0	0	1	0
public static <T> T Func1(Class<T> var1, String var2, Object var3, StrParam... var4) { return getInstance().executeGetSync(var1, null, var2, var3, var4); } 	0	0	0	0	1	0
public PIDOutput Func1() { return mOutputs.get(mActiveOutput); } 	1	0	0	0	0	0
"public static VersionUtils Func1() { VersionUtils var1 = getCurrentDevkitVersion(""0.0.0""); try (InputStream xml = new URL(""https://repository.mulesoft.org/nexus/content/repositories/releases/org/mule/tools/devkit/mule-devkit-parent/maven-metadata.xml"").openStream()) { Document var2 = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(xml); var2.getDocumentElement().normalize(); NodeList var3 = var2.getElementsByTagName(""version""); var1 = getCurrentDevkitVersion(var3.item(0).getFirstChild().getTextContent()); for (int var4 = 1; var4 < var3.getLength(); var4++) { Node var5 = var3.item(var4); String var6 = var5.getNodeType() == ELEMENT_NODE ? var5.getFirstChild().getTextContent() : EMPTY; if (!isRevision(var6) && isNotEmpty(var6) && var6.indexOf('4') != 0) { getCurrentDevkitVersion(var6).replaceIfGreaterThan(var1); } } } catch (ParserConfigurationException | IOException | SAXException e) { logger.warn(""Couldn't retrieve the XML"", e); } return var1; } "	1	0	1	1	1	0
public DBVariantContextAnnotator Func1(String var1, String var2, DBAnnotationOptions var3) throws JannovarVarDBException { return new DBVariantContextAnnotator(new ExacAnnotationDriver(var1, var2, var3), var3); } 	0	0	0	0	1	0
"private void Func1() { if (!model.selTerminal.get().isComPortOpen.get()) { openCloseComPortButton.setGraphic(glyphFont.create(FontAwesome.Glyph.PLAY)); openCloseComPortButton.setText(""Open""); openCloseComPortButton.getStyleClass().remove(""failure""); openCloseComPortButton.getStyleClass().add(""success""); } else { openCloseComPortButton.setGraphic(glyphFont.create(FontAwesome.Glyph.STOP)); openCloseComPortButton.setText(""Close""); openCloseComPortButton.getStyleClass().remove(""success""); openCloseComPortButton.getStyleClass().add(""failure""); } } "	0	0	0	0	1	0
@Override public List<String> Func1() { throw new UnsupportedOperationException(); } 	0	0	0	0	1	0
"private RTCPFBPacket Func1( RTCPCompoundPacket var1, int var2, int var3, int var4, DataInputStream var5, long var6, long var7) throws IOException { RTCPFBPacket var8; if (var2 == NACKPacket.FMT) var8 = new NACKPacket(var1); else var8 = new RTCPFBPacket(var1); var8.fmt = var2; var8.var3 = var3; var8.var6 = var6; var8.var7 = var7; int var9 = var4 - 12; if (var9 != 0) { var8.fci = new byte[var9]; var5.read(var8.fci); } if (logger.isTraceEnabled()) { String var10; String var11 = null; String var12 = null; switch (var8.var3) { case RTCPFBPacket.PSFB: var10 = ""PSFB""; switch (var8.fmt) { case RTCPFeedbackMessageEvent.FMT_FIR: var11 = ""FIR""; break; case RTCPFeedbackMessageEvent.FMT_PLI: var11 = ""PLI""; break; case RTCPREMBPacket.FMT: var11 = ""REMB""; break; } break; case RTCPFBPacket.RTPFB: var10 = ""RTPFB""; switch (var8.fmt) { case 1: var11 = ""Generic NACK""; break; case 3: var11 = ""TMMBR""; break; case 4: var11 = ""TMMBN""; StringBuilder var13 = new StringBuilder(); for (int var14 = 0, var15 = var9 - 8; var14 < var15; var14 += 8) { int var16 = RTPTranslatorImpl.readInt(var8.fci, var14); byte var17 = var8.fci[var14 + 4]; int var18 = (var17 & 0xFC) >>> 2; byte var19 = var8.fci[var14 + 6]; int var20 = (((var17 & 0x1) << 16) & 0xFF0000) | ((var8.fci[var14 + 5] << 8) & 0x00FF00) | (var19 & 0x0000FF); int var21 = (((var19 & 0x1) << 8) & 0xFF00) | (var8.fci[var14 + 7] & 0x00FF); var13.append("", SSRC 0x""); var13.append( Long.toHexString(var16 & 0xFFFFFFFFL)); var13.append("", MxTBR Exp ""); var13.append(var18); var13.append("", MxTBR Mantissa ""); var13.append(var20); var13.append("", Measured Overhead ""); var13.append(var21); } var12 = var13.toString(); break; } break; default: var10 = Integer.toString(var8.var3); break; } if (var11 == null) var11 = Integer.toString(var8.fmt); if (var12 == null) var12 = """"; logger.trace( ""SSRC of packet sender: 0x"" + Long.toHexString(var6) + "" ("" + var6 + ""), SSRC of media source: 0x"" + Long.toHexString(var7) + "" ("" + var7 + ""), Payload var3 (PT): "" + var10 + "", Feedback message var3 (FMT): "" + var11 + var12); } return var8; } "	0	0	0	0	1	0
"public Map<String, Course> Func1(Collection<String> var1) { StringBuilder var2 = new StringBuilder(); for(String var3 : var1) { var2.append(""\'""); var2.append(var3); var2.append(""\'""); var2.append("", ""); } var2.deleteCharAt(var2.length()-1); var2.deleteCharAt(var2.length()-1); Map<String, Course> var4 = new HashMap<>(); try { Statement var5 = this.con.createStatement(); Statement var6 = this.con.createStatement(); String var7 = ""SELECT Course.CourseCode, CourseName, Credit, Description, Faculty, ExamDate, Difficulty, TaughtInSpring, TaughtInAutumn FROM Course LEFT JOIN Exam ON Exam.CourseCode = Course.CourseCode WHERE Course.CourseCode IN ("" + var2 + "")""; String var8 = ""SELECT Dependency FROM Dependent WHERE Dependent IN ("" + var2 + "")""; ResultSet var9 = var5.executeQuery(var7); ResultSet var10 = var6.executeQuery(var8); while (var9.next()) { String var11 = var9.getString(""CourseCode""); String var12 = var9.getString(""CourseName""); double var13 = var9.getDouble(""Credit""); String var14 = var9.getString(""Description""); String var15 = var9.getString(""Faculty""); Date var16 = var9.getDate(""ExamDate""); int var17 = var9.getInt(""Difficulty""); boolean var18 = var9.getBoolean(""TaughtInSpring""); boolean var19 = var9.getBoolean(""TaughtInAutumn""); String var20 = (var18) ? ""spring"" : ""autumn""; if (var18 && var19) { var20 = ""agile""; } Course var21 = new Course(var11, var20, 7.5); var21.setCourseName(var12); var21.setCredit(var13); var21.setDescription(var14); var21.setFaculty(var15); var21.setExam_Date(var16); var21.setDifficulty(var17); while (var10.next()) { String var22 = var10.getString(1); var21.addDependency(var22); } var4.put(var11, var21); } } catch (SQLException e) { throw new IllegalStateException(""SQLException in DbCom.getCourse()"", e); } return var4; } "	0	0	0	0	1	0
"@Override public Neo4JDatabaseCommand Func1() { SortedSet<String> var1 = Stream.concat(this.var1.stream(), additionalLabels.stream()).collect(Collectors.toCollection(TreeSet::new)); try { String var2 = ""CREATE ("" + (id == null ? ""n"" : """") + processLabels(var1, false) + ""{vp})"" + (id == null ? "" RETURN n"" : """"); Value var3 = Values.var3(""vp"", statementParameters()); return new Neo4JDatabaseCommand(new Statement(var2, var3), result -> { if (id == null) { if (result.hasNext()) { Record var4 = result.next(); id = vertexIdProvider.get(var4.get(0).asEntity()); } } }); } finally { matchLabels = var1; } } "	0	0	0	0	1	0
public void Func1() { pinCount--; if(pinCount == 0) { isReplacementCandidate = true; try { Minibase.DiskManager.write_page(pid, pg); } catch (InvalidPageNumberException e) { e.printStackTrace(); } catch (FileIOException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } } 	0	0	0	0	1	0
"public LatchResponse Func1(String var1, String var2, String var3, String var4) { Map<String, String> var5 = new HashMap<String, String>(); var5.put(""var2"", var2); var5.put(""two_factor"", var3); var5.put(""lock_on_request"", var4); return HTTP_POST_proxy(new StringBuilder(API_OPERATION).append(""/"").append(var1).toString(), var5); } "	0	0	0	0	1	0
"public LatchResponse Func1(String var1, String var2, String var3, String var4) { Map<String, String> var5 = new HashMap<String, String>(); var5.put(""var1"", var1); var5.put(""var2"", var2); var5.put(""two_factor"", var3); var5.put(""lock_on_request"", var4); return HTTP_PUT_proxy(new StringBuilder(API_OPERATION).toString(), var5); } "	0	0	0	0	1	0
public static void Func1(String var1, String var2) { mdc.put(var1, var2); } 	1	0	1	1	1	0
"@Test public void Func1() throws Exception { artifactName = ""A File With Spáce And Ínvalid % chars & also b@d chars?""; BuildRequestDTO var1 = new BuildRequestDTO(); var1.setId(1L); var1.setCreatedDate(ZonedDateTime.now()); DistributionChannelDTO var2 = new DistributionChannelDTO(); var2.setId(distributionChannelId); Artifact var3 = new Artifact(URI.create(""file:///tmp/not-a-file""), artifactName, var2, 0L); String var4 = artifactDownloadUrlCreator.createArtifactDownloadPath(var1, var3); String var5 = URLEncoder.encode(var3.getName(), ""UTF-8""); System.out.println(""var5 = "" + var5); assertThat(var4).doesNotContain("" ""); assertThat(var4).contains(var5); } "	0	0	0	0	1	0
"protected void Func1(Message var1, final OutputStream var2) throws IOException { byte[] var3; if (!canAcceptMessage(var1)) { LOGGER.log(Level.WARNING, ""Message dropped: {0} - too many messages in the system"", var1.getTags()); var2.write(Message.MESSAGE_LIMIT); } try { var3 = var1.apply(RuntimeEnvironment.getInstance()); } catch (Exception ex) { LOGGER.log(Level.WARNING, String.format(""Message dropped: {0} - message error"", var1.getTags()), ex); var2.write(Message.MESSAGE_ERROR); var2.write(ex.getMessage().getBytes()); return; } LOGGER.log(Level.FINER, ""Message received: {0}"", var1.getTags()); LOGGER.log(Level.FINER, ""Messages in the system: {0}"", getMessagesInTheSystem()); var2.write(Message.MESSAGE_OK); if (var3 != null) { var2.write(var3); } } "	0	0	1	1	0	0
"@ForceInline public static void Func1(@NotNull Appendable var1, int var2) throws BufferUnderflowException, IllegalArgumentException { if (var1 instanceof StringBuilder) ((StringBuilder) var1).Func1(var2); else if (var1 instanceof Bytes) ((Bytes) var1).readPosition(var2); else throw new IllegalArgumentException("""" + var1.getClass()); } "	0	0	0	0	1	0
"@Override protected void Func1(Bundle var1) { bl = new AttenderBL(); super.Func1(var1); setContentView(R.layout.activity_chat_page); ListView var2 = (ListView) findViewById(R.var7.var2); appData = (AppData) getApplicationContext(); events = bl.getUserEvents(appData.get_userToken()); if(events == null) { var2.setAdapter(null); printAlertDialog(""No Chat Rooms""); } else { EventAdapter var3 = new EventAdapter(this, events); var2.setAdapter(var3); } var2.setOnItemClickListener(new AdapterView.OnItemClickListener() { public void Func2(AdapterView<?> var4, View var5, int var6, long var7) { Intent var8 = new Intent(getApplicationContext(), ChatActivity.class); int var9 = var6; Event var10 = events.get(var9); var8.putExtra(""EventID"",events.get(var9).getId()); startActivity(var8); } }); } "	0	0	0	0	1	0
"private Decrypter Func1(String var1, String var2) throws NoSuchAlgorithmException, KeyException { Map<String, String> var3 = new HashMap<>(); var3.put(thirdPartyCred1Key, thirdPartyCred1Value); CredData var4 = new CredData(var1, var2, var3); KeyPairGenerator var5; var5 = KeyPairGenerator.getInstance(""RSA""); var5.initialize(512, new SecureRandom()); KeyPair var6 = var5.generateKeyPair(); Decrypter var7 = new Decrypter(var6.getPrivate()); Credentials var8 = Credentials.Func1(var4, var6.getPublic()); var7.setCredentials(var8); return var7; } "	0	0	1	0	1	0
@Override public Iterable<WeightedGroundRule> Func1() { return Iterables.filter(groundKernels, WeightedGroundRule.class); } 	0	0	0	0	1	0
@Override public void Func1(GroundRule var1) { groundKernels.remove(var1.getRule(), var1); rebuildModel = true; } 	0	0	0	0	1	0
public Iterable<UnweightedGroundRule> Func1() { return Iterables.filter(groundKernels, UnweightedGroundRule.class); } 	0	0	0	0	1	0
@Override public boolean Func1(GroundRule var1) { return groundKernels.contains(var1.getRule(),var1); } 	0	0	0	0	1	0
public long Func1(PageParameters var1) { return this.jpaQuery.from().fetchCount(); } 	0	0	0	0	1	0
public String[] Func1() { return (String[]) groupSet.toArray(); } 	0	0	0	0	1	0
"@Test public void Func1() throws SQLException { String var1 = ""'12:26:27.1452367'""; String var2 = ""dest_sqlVariant""; Utils.dropTableIfExists(tableName, stmt); Utils.dropTableIfExists(var2, stmt); stmt.executeUpdate(""create table "" + tableName + "" (col1 sql_variant)""); stmt.executeUpdate(""INSERT into "" + tableName + ""(col1) values (CAST ("" + var1 + "" AS "" + ""time(2)"" + "") )""); stmt.executeUpdate(""create table "" + var2 + "" (col1 sql_variant)""); rs = (SQLServerResultSet) stmt.executeQuery(""SELECT * FROM "" + tableName); SQLServerBulkCopy var3 = new SQLServerBulkCopy(con); var3.setDestinationTableName(var2); var3.writeToServer(rs); rs = (SQLServerResultSet) stmt.executeQuery(""SELECT * FROM "" + var2); rs.next(); assertEquals("""" + rs.getObject(1).toString(), ""12:26:27.15""); // TODO } "	0	0	1	0	1	0
"public static long Func1() { User var1 = User.find(session(""email"")); if ( var1 != null) return var1.id; return -1; } "	0	0	0	0	1	0
@Override protected void Func1(@NonNull Bundle var1) { if (Pan.call(this, OnSaveInstanceState.class, var1)) { super.Func1(var1); } } 	0	0	1	1	1	0
public String Func1(String... var1) throws ParseException { String var2 = var1[0]; em.getTransaction().begin(); String var3 = operations.get(var2).perform(em, var1); em.getTransaction().commit(); return var3; } 	0	0	0	0	1	0
"private List<? extends PsiElement> Func1(List<? extends PsiElement> var1) { LOG.trace(traceMsg(""namelist: ""+var1.toString())); if (var1 == null || var1.isEmpty()) { return Collections.emptyList(); } List<PsiElement> var2 = new ArrayList<PsiElement>(); for (PsiElement var3 : var1) { PsiElement var4 = var3; if (var3 instanceof HaxeComponentName) { PsiElement var5 = var3.getParent(); if (null != var5 && var5.isValid()) { if (!(var5 instanceof PsiPackage)) { var4 = var5; } } } var2.add(var4); } return var2; } "	0	0	0	0	1	0
"private String Func1(String var1, String var2) { if (var1 == null) { return var2; } else if ("""".equalsIgnoreCase("""")) { return var2; } return var1; } "	0	0	1	1	1	0
public QueryBuilder Func1(Queryable var1) { query.addCriteria(var1.toCriteria()); return this; } 	0	0	0	0	1	0
"private static String Func1() throws Exception { return (getRmHome() + File.separator + ""dist"" + File.separator + ""lib"" + File.separator + ""*"") + File.pathSeparatorChar + getRmHome() + File.separator + ""addons"" + File.separator + ""*"" + File.pathSeparatorChar + System.getProperty(""java.class.path""); } "	0	0	0	0	1	0
public HttpRequestBuilder Func1(MediaType var1){ return new HttpRequestBuilder(this, this.builder).header(HttpHeaders.CONTENT_TYPE, singletonList(var1.toString())); } 	0	0	0	0	1	0
@Override public void Func1(World var1) { start.quit(); } 	0	0	0	0	1	0
"@Test public void Func1() throws Exception { ClassPath               var1 = ClassPath.ofResource(""asm-license.txt""); Class<Mock>             var2        = Mock.class; ClassPath               var3             = ClassPath.ofClass(DummyClassPathApp.class); ClassPath               var4             = ClassPath.ofClass(StringHelper.class); ClassPath               var5             = ClassPath.ofClass(getPlatform().getClass()); ClassPath               var6         = new ClassPath(var1, var3, var4, var5); PipedApplicationConsole var7           = new PipedApplicationConsole(); try (JavaApplication application = getPlatform().launch(JavaApplication.class, DisplayName.of(""java-app""), ClassName.of(DummyClassPathApp.class), Arguments.of(var2.getCanonicalName()), var6, IPv4Preferred.yes(), Diagnostics.enabled(), Console.of(var7))) { String var8 = var7.getOutputReader().readLine(); assertThat(var8, containsString(var1.iterator().next())); var8 = var7.getOutputReader().readLine(); assertThat(var8, containsString(var3.iterator().next())); var8 = var7.getOutputReader().readLine(); assertThat(var8, containsString(var4.iterator().next())); } } "	0	0	1	0	1	0
public void Func1() throws DAOException { CES var1 = getCurrentCES(); if ((var1.getEndInterviewingDate() != null) && (var1.getStartInterviewingDate() != null)) { switchToPostInterviewing(); } } 	0	0	1	0	0	0
"@NonNull @Override public View Func1(int var1, View var2, ViewGroup var3) { LayoutInflater var4 = LayoutInflater.from(getContext()); View var5 = var4.inflate(R.layout.row_layout,var3,false); TextView var6 = (TextView)var5.findViewById(R.id.textView4); var6.setText(budgets.get(var1).getBudgetName()); long var7 = 0; for(int var8 = 0; var8<transactions.size() ; var8++) { if(transactions.get(var8).getCategoryId().equals(budgets.get(var1).getCategoryId())) var7 += transactions.get(var8).getAmount(); } long var9 = budgets.get(var1).getAmount() - var7; TextView var10 = (TextView)var5.findViewById( R.id.textView8 ); var10.setText(""Remaining: ""+format.format(var9*1.0)+"" L.L""); TextView var11 = (TextView) var5.findViewById( R.id.textView9 ); var11.setText(""Total:           ""+format.format(budgets.get(var1).getAmount()*1.0)+"" L.L""); ProgressBar var12 = (ProgressBar)var5.findViewById( R.id.progressBar ); var12.setVisibility(View.VISIBLE); var12.setMax((int) budgets.get(var1).getAmount()); var12.setProgress((int) var7); var12.setIndeterminate(false); return var5; } "	0	0	0	0	1	0
"private Boolean Func1(long var1) { long var2 = Calendar.getInstance(TimeZone.getTimeZone(""EST"")).getTimeInMillis() / 1000; System.out.println(""Current time: "" + var2); System.out.println(""Timestamp: "" + var1); System.out.println(""Difference: "" + (var2 - var1)); if (var2 - var1 > timeout) { return false; } if (var2 - var1 < 0) { return false; } return true; } "	0	0	1	1	0	0
@Override public void Func1() { arkanoidPhysicsWorld.clearForces(); arkanoidPhysicsWorld.destroyBody(wall_body); platform.detachSelf(); platform.dispose(); SceneManager.getInstance().getCurrentScene().detachSelf(); } 	0	0	0	0	1	0
@Override public String Func1(MapPartitionLostListener var1) { checkNotNull(var1, NULL_LISTENER_IS_NOT_ALLOWED); handleHazelcastInstanceAwareParams(var1); return addPartitionLostListenerInternal(var1); } 	0	0	0	0	1	0
"@Override @SuppressWarnings(""unchecked"") public Set<K> Func1(Predicate var1) { handleHazelcastInstanceAwareParams(var1); return executePredicate(var1, IterationType.KEY, true); } "	0	0	0	0	1	0
"@Override public NBTTagCompound Func1(NBTTagCompound var1, boolean var2) { super.Func1(var1, var2); var1.setByte(""Orientation"", (byte) facing.ordinal()); var1.setShort(""BurnTime"", (short) distilBurnTime); var1.setShort(""CookTime"", (short) distilCookTime); var1.setInteger(""Amount"", this.amount); var1.setInteger(""LiquidID"", this.liquidItemID); var1.setShort(""CurrentItemBurn"", (short) this.currentItemBurnTime); this.theTank.Func1(var1); return var1; } "	0	0	0	0	1	0
private void Func1(Entity var1, Name var2) { if (var2.internalID.equals(EntityID.BULLET)) { handleBulletContact(var1); } } 	0	0	1	0	1	0
@Override public boolean Func1(int var1, ItemStack var2) { float var3 = var2.stackSize / (float)var2.getMaxStackSize(); return fillPercent + var3 < Config.pl_trashcan_maxfill; } 	0	0	0	0	1	0
"@Override protected void Func1(NBTTagCompound var1) { fillPercent = var1.getInteger(""fillPercent""); direction = ForgeDirection.getOrientation(var1.getInteger(""direction"")); } "	0	0	0	0	1	0
"public static String Func1(HttpRequest var1) { checkRequestMethod(""POST"", var1); String var2 = checkAndGetEntityContent(var1); JSONObject var3 = checkAndGetJSON(var2); if (!isLoggedIn(var1)) { throw new APIRequestForbiddenException(""User is not logged in, cannot create a new subject""); } if (!var3.has(""var4"") || !var3.has(""var5"")) { throw new APIBadRequestException(""Topic information is not complete""); } String var4 = var3.getString(""var4""); String var5 = var3.getString(""var5""); Topic var6 = new Topic(var4, var5); var6.create(); JSONObject var7 = new JSONObject(); var7.put(""id"", String.valueOf(var6.getId())); var7.put(""var4"", var4); var7.put(""var5"", var5); return var7.toString(); } "	0	0	1	0	1	0
"public final String Func1() { return ""Java14""; } "	0	0	1	0	0	0
"protected List<String> Func1(File var1) throws IOException { List<String> var2 = new ArrayList<>(); List<String> var3 = FileUtils.var3(var1); int var4 = 0; for (String var5 : var3) { if (var5.isEmpty()) { continue; } if (var5.startsWith(""#"") && var4 == 0) { var4++; continue; } var2.add(var5.split(""\t"")[1]); } return var2; } "	1	0	0	0	1	0
"@Override public void Func1(IScreenGame var1, TiledMap var2, List<String> var3, int var4, int var5) { Gdx.app.debug(""MapPage"", ""Func1.""); if (isPageLoading() && !asyncTask) { throw new IllegalStateException(""Cannot generate page, because page is already loading.""); } if (this.var9 != null) { throw new IllegalStateException(""cannot generate page, because var9 already exists.""); } this.loading = true; Gdx.app.debug(""MapPage"", ""start generating var2 page, var4: "" + var4 + "", var5: "" + var5); CameraHelper var6 = var1.getCameraManager().getCustomCamera(9); var6.reset(); var6.resize(getWidth(), getHeight()); var6.translate((tileWidth * var4), (tileHeight * var5), 0); var6.update(GameTime.getInstance()); Gdx.app.debug(""ManPage"", ""cameraX: "" + var6.getX() + "", cameraY: "" + var6.getY()); FrameBuffer var7 = new FrameBuffer(Pixmap.Format.RGBA8888, getWidth(), getHeight(), true); Gdx.app.debug(""FBO"", ""width: "" + getWidth() + "", height: "" + getHeight()); var7.begin(); Gdx.gl.glClearColor(0, 0, 0, 0); Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT); MapRenderer var8 = new OrthogonalTiledMapRenderer(var2); var8.setView(var6.getOriginalCamera()); var8.render(); var8 = null; System.out.println(""screenshot path: "" + ScreenshotUtils.getScreenshotsHomeDir(var1.getAppName()) + ""/page_"" + x + ""_"" + y + "".png""); try { ScreenshotUtils.takeScreenshot(ScreenshotUtils.getScreenshotsHomeDir(var1.getAppName()) + ""/page_"" + x + ""_"" + y + "".png"", getWidth(), getHeight(), false); } catch (IOException e) { e.printStackTrace(); }; var7.end(); Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT); this.var9 = var7.getColorBufferTexture(); for (Texture var9 : this.preparedTextures) { Pixmap var10 = pixmapMap.get(var9); pixmapMap.remove(var10); var9.getTextureData().disposePixmap(); } this.preparedTextures.clear(); this.loaded = true; this.loading = false; Gdx.app.debug(""MapPage"", ""var2 page generated finished.""); } "	0	0	1	0	1	0
"@Test public void Func1() { assertFalse(new ParseToken(""()"").isFunctionName()); } "	0	0	0	0	1	0
@Override public String Func1(String var1) { String var2 = super.Func1(var1); if (var2==null) var2 = Hudson.getInstance().getDescriptor(SSHConnector.class).Func1(var1); return var2; } 	0	0	0	0	1	0
public static ExtensionList<JavaProvider> Func1() { return Hudson.getInstance().getExtensionList(JavaProvider.class); } 	0	0	0	0	1	0
protected boolean Func1() { return Float.intBitsToFloat(mTargetZoomLevel.get()) != -1; } 	0	0	0	0	1	0
"private EPackage Func1(TripleGraphGrammarFile var1) { EPackage var2 = ecoreFactory.createEPackage(); var2.setName(var1.getSchema().getName()); var2.setNsPrefix(var1.getSchema().getName()); var2.setNsURI(""platform:/resource/"" + var2.getName() + ""/model/"" + var2.getName() + "".ecore""); for (CorrType var3 : var1.getSchema().getCorrespondenceTypes()) { var2.getEClassifiers().add(createEClass(var3)); } for (CorrType var3 : var1.getSchema().getCorrespondenceTypes()) { if (var3.getSuper() != null) { ((EClass) xtextToTGG.get(var3)).getESuperTypes().add((EClass) xtextToTGG.get(var3.getSuper())); } } return var2; } "	0	0	0	0	1	0
"public static boolean Func1(String var1) { if (Pattern.matches(""^\\-?[1-9]\\d{0,2}(\\.\\d*)?$"", var1)) return true; return false; } "	0	0	0	0	1	0
"@Test public void Func1() throws Throwable { PortalRestController var1 = var1(portal); doReturn(""http://localhost:3030/fuseki"").when(var1).getFusekiService(); String var2 = var1.Func1(); logger.info(var2); } "	0	0	0	0	1	0
"public void Func1() { if (execService != null) { return; } log.trace(""starting execution...""); int var1 = 0; for (final CalendarRuntime var2 : EventStorage.getInstance().getEventCache().values()) { try { JobDetail var3 = JobBuilder.newJob().ofType(EventReloaderJob.class) .usingJobData(EventReloaderJob.KEY_CONFIG, var2.getConfig().getKey()) .withIdentity(var2.getConfig().getKey(), JOB_NAME_EVENT_RELOADER).storeDurably() .build(); this.scheduler.addJob(var3, false); SimpleTrigger var4 = TriggerBuilder.newTrigger().forJob(var3) .withIdentity(var2.getConfig().getKey(), JOB_NAME_EVENT_RELOADER) .startAt(DateBuilder.futureDate(10 + var1, IntervalUnit.SECOND)).withSchedule(SimpleScheduleBuilder .repeatMinutelyForever(var2.getConfig().getReloadMinutes())) .build(); this.scheduler.scheduleJob(var4); log.info(""reload var3 scheduled for: {}"", var2.getConfig().getKey()); } catch (SchedulerException e) { log.error(""cannot schedule calendar-reloader"", e); } var1 += 10; } } "	0	0	1	0	1	0
"public boolean Func1(int var1, TranslationEntry var2) { if(var2 == null) return false; Lib.debug('s', ""Attempting to write to swap (PID "" + var1 + "" VPN "" + var2.vpn + "")""); Hashtable<Integer, SwapEntry> var3 = this._swapLookup.get(var1); if(var3 == null) { var3 = new Hashtable<Integer, SwapEntry>(); this._swapLookup.put(var1, var3); } SwapEntry var4 = var3.get(var1); if(var4 == null) var4 = new SwapEntry(-1, var2); boolean var5 = writeToSwap(var4); Lib.debug('s', ""Write to swap "" + (var5 ? """" : ""un"") + ""successful (PID "" + var1 + "" VPN "" + var2.vpn + "")""); if(var5) { var3.put(var2.vpn,  var4); } return var5; } "	0	0	1	0	1	0
private static boolean Func1(DockerClientExecutor var1, String var2, String var3) { String var4 = var1.execStart(var2, var3); try { int var5 = Integer.parseInt(var4.trim()); return var5 > 0; } catch(NumberFormatException e) { return false; } } 	0	0	0	0	1	0
"@Listener(order = Order.LATE) public void Func1(MessageChannelEvent.Chat var1, @First Player var2) { Nation var3 = DataHandler.getNationOfPlayer(var2.getUniqueId()); if (var3 == null) { return; } MessageChannel var4 = MessageChannel.TO_ALL; Optional<MessageChannel> var5 = var1.getChannel(); if (var5.isPresent()) { var4 = var5.get(); } if (var4.equals(MessageChannel.TO_ALL) && ConfigHandler.getNode(""others"", ""enableNationTag"").getBoolean(true)) { var1.setMessage(TextSerializers.FORMATTING_CODE.deserialize(ConfigHandler.getNode(""others"", ""publicChatFormat"").getString().replaceAll(""\\{NATION\\}"", var3.getTag()).replaceAll(""\\{TITLE\\}"", DataHandler.getCitizenTitle(var2.getUniqueId()))), var1.getMessage()); } else if (var4 instanceof NationMessageChannel) { var1.setMessage(TextSerializers.FORMATTING_CODE.deserialize(ConfigHandler.getNode(""others"", ""nationChatFormat"").getString().replaceAll(""\\{NATION\\}"", var3.getTag()).replaceAll(""\\{TITLE\\}"", DataHandler.getCitizenTitle(var2.getUniqueId()))), Text.of(TextColors.YELLOW, var1.getMessage())); DataHandler.getSpyChannel().send(var2, Text.of(TextSerializers.FORMATTING_CODE.deserialize(ConfigHandler.getNode(""others"", ""nationSpyChatTag"").getString()), TextColors.RESET, var1.getMessage())); } } "	0	0	0	0	1	0
private void Func1() { String var1 = mIntent.getStringExtra(Constants.IntentExtra.CHALLENGE_ID); int var2 = mIntent.getIntExtra(Constants.IntentExtra.USER1OR2, -1); ChallengeUtils.initializeBattleshipBoardManager(this, var1, var2, false) .continueWith(new Continuation<BattleshipBoardManager, Void>() { @Override public Void Func2(Task<BattleshipBoardManager> var3) throws Exception { mBattleshipBoardManager = var3.getResult(); runOnUiThread(new Runnable() { @Override public void Func3() { initializeGridLayouts(); } }); return null; } }); } 	0	0	1	0	1	0
private void Func1() { final ViewGroup var1 = (ViewGroup) getActivity().findViewById(R.id.session_detail_frag); mAppBar = (AppBarLayout) var1.findViewById(R.id.appbar); mCollapsingToolbar = (CollapsingToolbarLayout) mAppBar.findViewById(R.id.collapsingToolbar); mHeaderBox = mAppBar.findViewById(R.id.header_session); mToolbar = (Toolbar) mHeaderBox.findViewById(R.id.toolbar); mTitle = (TextView) mHeaderBox.findViewById(R.id.session_title); mSubtitle = (TextView) mHeaderBox.findViewById(R.id.session_subtitle); mPhotoViewContainer = mCollapsingToolbar.findViewById(R.id.session_photo_container); mPhotoView = (ImageView) mPhotoViewContainer.findViewById(R.id.session_photo); mWatchVideo = (Button) mCollapsingToolbar.findViewById(R.id.watch); final ViewGroup var2 = (ViewGroup) var1.findViewById(R.id.details_container); mAbstract = (TextView) var2.findViewById(R.id.session_abstract); mLiveStreamedIndicator = (TextView) var2.findViewById(R.id.live_streamed_indicator); mRequirements = (TextView) var2.findViewById(R.id.session_requirements); mTags = (LinearLayout) var2.findViewById(R.id.session_tags); mExtended = (TextView) var2.findViewById(R.id.extended_session_button); mTagsContainer = (ViewGroup) var2.findViewById(R.id.session_tags_container); mAddScheduleFab = (CheckableFloatingActionButton) var1.findViewById(R.id.add_schedule_button); mImageLoader = new ImageLoader(getContext()); } 	0	0	1	0	0	0
"@Override public void Func1() { try { ModuleJScripting.getInvocable().invokeMethod(fn, ""call"", args); } catch (NoSuchMethodException | ScriptException e) { System.err.println(""Error calling script callback""); e.printStackTrace(); } } "	0	0	0	0	1	0
@NonNull public static Matcher<View> Func1(final Class<? extends View> var1) { return allOf(isDisplayed(), Func1(var1)); } 	0	0	0	0	1	0
private Optional<DateEncoder> Func1(MultiEncoder var1) { for(EncoderTuple var2 : var1.getEncoders(var1)) { if(var2.getEncoder() instanceof DateEncoder) { return Optional.of((DateEncoder)var2.getEncoder()); } } return Optional.of(null); } 	0	0	0	0	1	0
"public static String Func1(JsonNode var1) { return ""https://twitter.com/"" + getUserScreenName(var1); } "	0	0	0	0	1	0
"public JSONObject Func1(JSONObject var1, String var2) throws BioStudiesClientException, IOException { JSONObject var3 = new JSONObject(var1.toString()); var3.put(""accno"", ""!{S-STA}""); JSONArray var4 = new JSONArray(); var4.put(var3); JSONObject var5 = new JSONObject(); var1.put(""submissions"", var4); return parseJSON(post(composeUrl(""/submit/create""), var5, SESSION_PARAM, var2)); } "	0	0	0	1	1	0
public ApiError Func1() { return new ApiErrorImpl(this.message, this.developerMessage, this.code, this.additionalInformation); } 	0	0	0	1	1	0
@JsonAnySetter public Builder Func1(String var1, Object var2) { this.additionalInformation.put(var1, var2); return this; } 	0	0	0	0	1	0
"private CsvParserSettings Func1(Configuration var1) { CsvParserSettings var2 = new CsvParserSettings(); var2.getFormat().setDelimiter(var1.get(DELIMITER, DELIMITER_DEFAULT).charAt(0)); var2.getFormat().setComment(var1.get(COMMENT, COMMENT_DEFAULT).charAt(0)); var2.setLineSeparatorDetectionEnabled(true); var2.setNullValue(""""); var2.setEmptyValue(""""); var2.setIgnoreLeadingWhitespaces(false); var2.setIgnoreTrailingWhitespaces(false); var2.setSkipEmptyLines(false); var2.setMaxCharsPerColumn(100000); String var3 = var1.get(MAX_COLUMNS); var2.setMaxColumns(Integer.parseInt(var3)); var2.getFormat().setQuote(var1.get(QUOTE, QUOTE_DEFAULT).charAt(0)); var2.getFormat().setQuoteEscape(var1.get(ESCAPE, ESCAPE_DEFAULT).charAt(0)); if (start == 0) { var2.setHeaderExtractionEnabled(var1.getBoolean(HEADER_PRESENT, HEADER_PRESENT_DEFAULT)); } return var2; } "	0	0	0	0	1	0
"protected JsonObject Func1(){ try { JsonObject var1 = new JsonObject(); if (mName != null){ var1.addProperty(""var3"", mName); } if (mExtendedData != null){ for (HashMap.Entry<String, String> var2 : mExtendedData.entrySet()) { String var3 = var2.getKey(); String var4 = var2.getValue(); var1.addProperty(var3, var4); } } return var1; } catch (Exception e) { e.printStackTrace(); return null; } } "	0	0	1	0	1	0
"@DefaultHandler public Resolution Func1() { try { int var1 = Integer.parseInt(getParameter(Parameter.ACCOUNT_RETAINED_EARNINGS)); List<AccountBean> var2 = accountService.getAccountBalances(getStartDate(), var1); BigDecimal var3 = BigDecimal.ZERO; if(var2!=null && var2.size()>0) { AccountBean var4 = var2.get(0); var3 = var4.getBalance(); } var2 = accountService.getGifiAccountBalances(endDate, 0); assetList = new LinkedList<AccountBean>(); liabilityList = new LinkedList<AccountBean>(); equityList = new LinkedList<AccountBean>(); totalAssets = BigDecimal.ZERO; totalLiabilities = BigDecimal.ZERO; totalEquities = BigDecimal.ZERO; netIncome = BigDecimal.ZERO; int var5 = 0; for(AccountBean var4 : var2) { if(var4.getType() == AccountType.INCOME) { if(var4.isHasNegativeBalance()) netIncome = netIncome.subtract(var4.getBalance()); else netIncome = netIncome.add(var4.getBalance()); } else if(var4.getType() == AccountType.EXPENSE) { if(var4.isHasNegativeBalance()) netIncome = netIncome.add(var4.getBalance()); else netIncome = netIncome.subtract(var4.getBalance()); } } for(AccountBean var4 : var2) { if(var4.getType() == AccountType.ASSET) { assetList.add(var4); if(var4.isHasNegativeBalance()) totalAssets = totalAssets.subtract(var4.getBalance()); else totalAssets = totalAssets.add(var4.getBalance()); } else if(var4.getType() == AccountType.LIABILITY) { liabilityList.add(var4); if(var4.isHasNegativeBalance()) totalLiabilities = totalLiabilities.subtract(var4.getBalance()); else totalLiabilities = totalLiabilities.add(var4.getBalance()); } else if(var4.getType() == AccountType.OWNERS_EQUITY) { equityList.add(var4); if(String.valueOf(var4.getAccountId()).equals(getParameter(Parameter.ACCOUNT_INCOME_SUMMARY_GIFI))) var4.setBalance(netIncome); else if(String.valueOf(var4.getAccountId()).equals(getParameter(Parameter.ACCOUNT_RETAINED_EARNINGS_GIFI))) { var5 += var4.getAccountId(); var4.setBalance(var3); SimpleDateFormat var6 = new SimpleDateFormat(""MMMM d, yyyy""); var4.setName(var4.getName() + "" - as of "" + var6.var6(getStartDate())); } else if(String.valueOf(var4.getAccountId()).equals(getParameter(Parameter.ACCOUNT_SHARE_CAPITAL_GIFI))) var5 += var4.getAccountId(); if(var4.isHasNegativeBalance()) totalEquities = totalEquities.subtract(var4.getBalance()); else totalEquities = totalEquities.add(var4.getBalance()); } } totalLiabEqu = totalLiabilities.add(totalEquities); fixEquityListIfNeeded(var5); } catch (DataAccessException e) { return handleException(e); } return new ForwardResolution(""/report/balance-sheet-gifi.jsp""); } "	1	0	0	0	1	0
"public void Func1(Command var1) { if (var1 instanceof StringType) { try { String var2 = createUserPasswordHostnamePrefix() + SUFFIX_QUESTION + var1.toString(); Enigma2Util.executeUrl(var2); } catch (IOException e) { logger.error(""Error during send Command: {}"", e); } } } "	0	0	0	0	1	0
"public State Func1() { try { String var1 = createUserPasswordHostnamePrefix() + SUFFIX_EPG + getChannelServiceReference(); String var2 = Enigma2Util.executeUrl(var1); var2 = Enigma2Util.getContentOfElement(var2, ""e2eventdescription""); State var3 = new StringType(var2); return var3; } catch (IOException e) { logger.error(""Error during send Command: {}"", e); } return null; } "	0	0	0	0	1	0
"public void Func1(Command var1) { if (var1 instanceof OnOffType) { OnOffType var2 = (OnOffType) var1; String var3 = var2 == OnOffType.ON ? ""True"" : ""False""; try { String var4 = createUserPasswordHostnamePrefix() + SUFFIX_SET_DOWNMIX + var3; Enigma2Util.executeUrl(var4); } catch (IOException e) { logger.error(""Error during send Command: {}"", e); } } else { logger.error(""Unsupported var1 type: {}"", var1.getClass().getName()); } } "	0	0	0	0	1	0
"public void Func1() { try { serviceContainer = Enigma2Util.generateServiceMaps(); } catch (IOException | ParserConfigurationException | SAXException e) { logger.error(""Error during initialization: {}"", e); } } "	0	0	0	0	1	0
"public void Func1(Command var1) { if (var1 instanceof StringType) { try { String var2 = createUserPasswordHostnamePrefix() + SUFFIX_MESSAGE + var1.toString(); Enigma2Util.executeUrl(var2); } catch (IOException e) { logger.error(""Error during send Command: {}"", e); } } } "	0	0	0	0	1	0
"private void Func1() { if (devMode) { logger.warn(""SKIPPING UPDATE CHECK IN DEV MODE""); return; } asyncExecutor.execute(() -> { HttpsURLConnection var1 = null; try { java.net.URL var2 = new URL(UPDATE_URL); var1 = (HttpsURLConnection) var2.openConnection(); var1.setRequestMethod(""GET""); var1.setRequestProperty(""User-Agent"", ""Web-API""); var1.setRequestProperty(""accept"", ""application/json""); var1.setRequestProperty(""charset"", ""utf-8""); var1.setUseCaches(false); int var3 = var1.getResponseCode(); if (var3 != 200) { logger.warn(""Could not check for updates: "" + var3); return; } InputStream var4 = var1.getInputStream(); BufferedReader var5 = new BufferedReader(new InputStreamReader(var4)); StringBuilder var6 = new StringBuilder(); String var7; while ((var7 = var5.readLine()) != null) { var6.append(var7); var6.append('\r'); } var5.close(); String var8 = var6.toString().trim(); if (var8.isEmpty() || var8.equalsIgnoreCase(""OK"")) { logger.warn(""Empty var6 received when checking for updates""); return; } ObjectMapper var9 = new ObjectMapper(); JsonNode var10 = var9.readTree(var8); String var11 = container.getVersion().orElse("""").split(""-"")[0]; String var12 = var10.get(0).get(""name"").asText().split(""-"")[0]; if (var12.equalsIgnoreCase(var11)) { return; } logger.warn(""------- Web-API update -------""); logger.warn(""Latest: "" + var12); logger.warn(""Current: "" + var11); logger.warn(""Get it from Sponge Ore or Github!""); logger.warn(""------------------------------""); } catch (IOException e) { e.printStackTrace(); } finally { if (var1 != null) { var1.disconnect(); } } }); } "	0	0	0	0	1	0
"public void Func1(Timer var1) { try { if (var1.equals(retransmission_to) && statusIs(STATE_TRYING)) { printLog(""Retransmission var2 expired"", LogLevel.HIGH); if (connection_id == null) { sip_provider.sendMessage(request); long var2 = 2 * retransmission_to.getTime(); retransmission_to = new Timer(var2, retransmission_to .getLabel(), this); retransmission_to.start(); } else printLog(""No retransmissions for reliable transport ("" + connection_id + "")"", LogLevel.LOW); } if (var1.equals(transaction_to)) { printLog(""Transaction var2 expired"", LogLevel.HIGH); retransmission_to.halt(); end_to.halt(); sip_provider.removeSipProviderListener(transaction_id); changeStatus(STATE_TERMINATED); if (transaction_listener != null) transaction_listener.onTransTimeout(this); transaction_listener = null; } if (var1.equals(end_to)) { printLog(""End var2 expired"", LogLevel.HIGH); retransmission_to.halt(); transaction_to.halt(); sip_provider.removeSipProviderListener(transaction_id); changeStatus(STATE_TERMINATED); transaction_listener = null; // already null.. } } catch (Exception e) { printException(e, LogLevel.HIGH); } } "	0	0	1	0	1	0
"public JsonNode Func1() { List<String> var1 = new ArrayList<>(); MongoCursor<Auditoria> var2; int var3 = 0; if (!searchFields.isEmpty()) { ArrayList<SearchFieldDefinition> var4 = new ArrayList<SearchFieldDefinition>(); searchFields.forEach(buildSearchStatement(var4)); var4.forEach(searchField -> { DateTime var5 = parseDate(searchField.getValue().toString(), null); if (var5 != null) { var1.add(getMongoFieldOperator(searchField.getFieldOperator(), searchField.getFieldName(), var5)); } else { if (searchField.getFieldOperator() != null) { var1.add(getMongoFieldOperator(searchField.getFieldOperator(), searchField.getFieldName(), searchField.getValue())); } else { var1.add(String.format(""'%s': {$regex: '%s'}"", searchField.getFieldName(), searchField.getValue().toString())); } } }); List<BetweenFieldDefinition> var6 = BetweenFieldDefinition.getBetweenFileds(searchFields); var6.forEach(field -> { if (field.hasOnlyStartValue()) { var1.add(String.format(""timestamp: { $gte: %s}"", field.getStartValueTimestamp())); } else if (field.hasOnlyEndValue()) { var1.add(String.format(""timestamp: { $lte: %s}"", field.getEndValueTimestamp())); } else { var1.add(String.format(""timestamp: { $gte: %s, $lte: %s}"", field.getStartValueTimestamp(), field.getEndValueTimestamp())); } }); String var7 = ""{"".concat(String.join("","", var1)).concat(""}""); if (getSortField() != null) { int var8 = getSortType().equalsIgnoreCase(""asc"") ? 1 : -1; var2 = Auditoria.var2().find(var7).skip(getSkip()).sort(""{"".concat(getSortType()).concat(String.format("": %s"", var8)).concat(""}"")).limit(getPerPage()).as(Auditoria.class); } else { var2 = Auditoria.var2().find(var7).skip(getSkip()).limit(getPerPage()).as(Auditoria.class); } var3 = Auditoria.var2().find(var7).as(Auditoria.class).count(); } else { if (getSortField() != null) { int var8 = getSortType().equalsIgnoreCase(""asc"") ? 1 : -1; var2 = Auditoria.var2().find().skip(getSkip()).limit(getPerPage()).sort(""{"".concat(getSortType()).concat(String.format("": %s"", var8))).limit(getPerPage()).as(Auditoria.class); } else { var2 = Auditoria.var2().find().skip(getSkip()).limit(getPerPage()).as(Auditoria.class); } var3 = Auditoria.var2().find().as(Auditoria.class).count(); } ObjectNode var9 = JsonNodeFactory.instance.objectNode(); JsonNode var10 = Json.toJson(Auditoria.toList(var2)); var9.set(""data"", var10); var9.put(""var3"", var3); return var9; } "	0	0	0	0	0	1
public boolean Func1(ResourceGroup var1) { return permissionBoundary.canCopyFromSpecificResource(resource.getResource(), var1.getEntity()) && (resource.getResource() != null); } 	0	0	0	0	1	0
"public static void Func1(final Hill var1, final Hill var2, final int var3) { System.out.println(""Turn: "" + var3); final Iterator<IAnt> var4 = var1.getAnts().iterator(); final Iterator<IAnt> var5 = var2 == null ? Collections.emptyIterator() : var2.getAnts().iterator(); guiConnector.placeGuiObjects(World.getStaticObjects()); while (var4.hasNext() || var5.hasNext()) { IAnt var6 = null; if (var4.hasNext()) { var6 = var4.next(); singleStep(var6); } if (var5.hasNext()) { var6 = var5.next(); singleStep(var6); } } guiConnector.placeGuiObjects(World.getWorldObjectsToMove()); guiConnector.removeGuiObjects(getDeadObjects()); getDeadObjects().clear(); guiConnector.showScore(var1.getName(), var1.getFood()); if (var2 != null) { guiConnector.showScore(var2.getName(), var2.getFood()); } } "	0	0	0	0	1	0
"@Override protected void Func1(ProcessingResult<MessageDelivery> var1) { LOG.debug(""Message processing job: "" + var1.getSuccesses().size() + "" processed, "" + var1.getFailures().size() + "" failures""); Set<Long> var2 = new HashSet<Long>(var1.getSuccesses().size()); for (MessageDelivery var3: var1.getSuccesses()) { var2.add(var3.getMessage().getId()); } MessageService var4 = GlobalKCBServiceLocator.getInstance().getMessageService(); for (Long var5: var2) { LOG.debug(""Finishing processing message "" + var5); Message var6 = var4.getMessage(var5); Collection<MessageDelivery> var7 = messageDeliveryService.getMessageDeliveries(var6); if (var7.size() == 0) { LOG.debug(""Deleting message "" + var6); var4.deleteMessage(var6); } else { LOG.debug(""Message "" + var6.getId() + "" has "" + var7.size() + "" deliveries""); for (MessageDelivery var3: var7) { LOG.debug(var3); } } } } "	0	0	0	0	1	0
"public String Func1(Map<String, String> var1) { StringBuffer var2 = new StringBuffer(template.length()); Matcher var3 = TOKEN_PATTERN.var3(template); while (var3.find()) { String var4 = var3.var4(); String[] var5 = var4.substring(2, var4.length() - 2).split(""\\|""); String var6 = var5[0].trim(); String var7 = var1.get(var6); if (var7 == null) { List<String> var8 = variableMap.get(var6); var7 = var8.isEmpty() ? """" : var8.get(0); } if (!var7.isEmpty() && multilineMap.containsKey(var6)) { var7 = escapeMultilineQuotes(multilineMap.get(var6), var7); } var3.appendReplacement(var2, var7); } var3.appendTail(var2); return var2.toString(); } "	0	0	0	0	1	0
"private synchronized void Func1(ServerClient var1) { if (!clients.contains(var1)) { return; } System.out.println(""one died...""); clients.remove(var1); handler.handleMessage(new Package(var1.getPort(), Package.DISCONNECT)); Runnable var2 = () -> { try { System.out.println(""trying to get new var1""); Socket var3 = acceptSocket.accept(); System.out.println(""new var1""); ServerClient var4 = new ServerClient(var3, getNextId()); clients.add(var4); setTimer(var4); } catch (Exception e) { e.printStackTrace(); } }; var2.run(); } "	0	0	1	0	0	0
"@Override @SuppressWarnings(""rawtypes"") public void Func1() { String var1 = """"; String var2 = """"; ConfigProjects var3 = null; try { var3 = new ConfigProjects(this.prozessVorlage.getProjekt().getTitel()); } catch (IOException e) { Helper.setFehlerMeldung(""IOException"", e.getMessage()); return; } int var4 = var3.getParamList(""createNewProcess.itemlist.processtitle"").size(); for (int var5 = 0; var5 < var4; var5++) { String var6 = var3.getParamString(""createNewProcess.itemlist.processtitle("" + var5 + "")""); String var7 = var3.getParamString(""createNewProcess.itemlist.processtitle("" + var5 + "")[@var7]""); String var8 = var3.getParamString(""createNewProcess.itemlist.processtitle("" + var5 + "")[@var8]""); if (var6 == null) { var6 = """"; } if (var7 == null) { var7 = """"; } if (var8 == null) { var8 = """"; } if (var7.equals("""") && var8.equals("""")) { var2 = var6; break; } if (!var7.equals("""") && !var8.equals("""") && StringUtils.containsIgnoreCase(var7, this.docType) && !StringUtils.containsIgnoreCase(var8, this.docType)) { var2 = var6; break; } if (var8.equals("""") && StringUtils.containsIgnoreCase(var7, this.docType)) { var2 = var6; break; } if (var7.equals("""") && !StringUtils.containsIgnoreCase(var8, this.docType)) { var2 = var6; break; } } StringTokenizer var9 = new StringTokenizer(var2, ""+""); while (var9.hasMoreTokens()) { String var10 = var9.nextToken(); if (var10.startsWith(""'"") && var10.endsWith(""'"")) { var1 += var10.substring(1, var10.length() - 1); } else { for (Iterator var11 = this.additionalFields.iterator(); var11.hasNext();) { AdditionalField var12 = (AdditionalField) var11.next(); if ((var12.getTitel().equals(""ATS"") || var12.getTitel().equals(""TSL"")) && var12.getShowDependingOnDoctype() && (var12.getWert() == null || var12.getWert().equals(""""))) { var12.setWert(this.atstsl); } if (var12.getTitel().equals(var10) && var12.getShowDependingOnDoctype() && var12.getWert() != null) { var1 += CalcProzesstitelCheck(var12.getTitel(), var12.getWert()); } } } } if (var1.endsWith(""_"")) { var1 = var1.substring(0, var1.length() - 1); } this.prozessKopie.setTitel(var1); CalcTiffheader(); } "	0	0	0	0	0	1
@Override public boolean Func1(Game var1, Ability var2) { Permanent var3 = var1.getPermanent(targetPointer.getFirst(var1, var2)); if (var3 != null) { ObjectColor var4 = var3.getColor(var1); for (Permanent var5 : var1.getBattlefield().getActivePermanents(FILTER, var2.getControllerId(), var1)) { if (var5.getColor(var1).shares(var4) && !Objects.equals(var5, var3)) { var5.destroy(var2.getSourceId(), var1, true); } } return true; } return false; } 	0	0	0	0	1	0
"public void Func1(Bundle var1) { mUsername = TextUtils.isEmpty(mUsername) ? ANONYMOUS : mUsername; memailaddress = TextUtils.isEmpty(memailaddress) ? ANONYMOUS_EMAIL : memailaddress; mPhotoURL = TextUtils.isEmpty(mPhotoURL) ? ANONYMOUS_PHOTO_URL : mPhotoURL; IProfile var2 = new ProfileDrawerItem() .withName(mUsername) .withEmail(memailaddress) .withIcon(mPhotoURL) .withIdentifier(102); mHeader = new AccountHeaderBuilder() .withActivity(this) .withHeaderBackground(R.drawable.header) .addProfiles(var2) .build(); mDrawer = new DrawerBuilder() .withAccountHeader(mHeader) .withActivity(this) .withToolbar(toolbar) .withActionBarDrawerToggle(true) .addDrawerItems( new PrimaryDrawerItem().withName(""Journals"").withIcon(GoogleMaterial.Icon.gmd_view_list).withIdentifier(Constants.JOURNALS), new PrimaryDrawerItem().withName(""Tags"").withIcon(GoogleMaterial.Icon.gmd_folder).withIdentifier(Constants.TAGS), new PrimaryDrawerItem().withName(""Analytics"").withIcon(GoogleMaterial.Icon.gmd_arrow_forward).withIdentifier(Constants.ANALYTICS), new PrimaryDrawerItem().withName(""Atlas"").withIcon(GoogleMaterial.Icon.gmd_map).withIdentifier(Constants.ATLAS), new PrimaryDrawerItem().withName(""Logout"").withIcon(GoogleMaterial.Icon.gmd_lock).withIdentifier(Constants.LOGOUT) ) .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() { @Override public boolean Func2(View var3, int var4, IDrawerItem var5) { if (var5 != null && var5 instanceof Nameable) { toolbar.setTitle(""Journals""); } if (var5 != null) { onTouchDrawer((int) var5.getIdentifier()); } return false; } }) .withOnDrawerListener(new Drawer.OnDrawerListener() { @Override public void Func3(View var6) { KeyboardUtil.hideKeyboard(MainActivity.this); } @Override public void Func4(View var6) { } @Override public void Func5(View var6, float var7) { } }) .withFireOnInitialOnClick(true) .withSavedInstance(var1) .build(); mDrawer.addStickyFooterItem(new PrimaryDrawerItem().withName(""Delete Account!"").withIcon(GoogleMaterial.Icon.gmd_delete).withIdentifier(Constants.DELETE)); mDrawer.setSelection(Constants.JOURNALS); } "	1	0	1	0	0	0
"protected void Func1(Object var1) { try { if (getOpts().isDebugSet()) { StringWriter var2 = new StringWriter(); getMarshaller().marshal(var1, var2); log.Func1(""{}"", var2); } } catch (JAXBException e) { log.Func1(e.toString(), e); } } "	0	0	0	0	1	0
"@OnClick (R.id.saveTimedSettingsButton) public void Func1(){ String var1 = stretchReminderTime.getText().toString(); if (!var1.equals("""")) { mStretch = Integer.parseInt(var1); } String var2 = takeOffTime.getText().toString(); if(!var2.equals("""")) { mTakeoff = Integer.parseInt(var2); } mSetMorningAlarm = morningAlarmToggleButton.isChecked(); mSetStretchNotifications = stretchToggleButton.isChecked(); mSetTakeOffAlarm = takeOffToggleButton.isChecked(); pushPreferences(); if(mSetMorningAlarm) { AlarmHandler var3 = new AlarmHandler(this); var3.setMorningAlarm(); } finish(); } "	0	0	0	0	1	0
public void Func1(EditUserEvent var1) { try { NetworkUtils.setUser(getActivity(), var1.getUser()); mBaseInterface.setUser(var1.getUser()); } catch(Exception e) { Log.e(getClass().toString(), e.toString()); } FragUtils.popBackStack(this); } 	0	0	0	0	1	0
"public void Func1() { EntryClassUi.showWaitModal(); gwtXSRFService.generateSecurityToken(new AsyncCallback<GwtXSRFToken>() { @Override public void Func2(final Throwable var1) { EntryClassUi.hideWaitModal(); FailureHandler.handle(var1); } @Override public void Func3(final GwtXSRFToken var2) { gwtWireService.getDriverInstances(var2, new AsyncCallback<List<String>>() { @Override public void Func2(final Throwable var3) { EntryClassUi.hideWaitModal(); FailureHandler.handle(var3); } @Override public void Func3(final List<String> var4) { DriversAndTwinsListUi.this.driversTree.clear(); if (var4.isEmpty()) { TreeItem var5 = new TreeItem(); var5.setText(""No Drivers available!""); DriversAndTwinsListUi.this.driversTree.addItem(var5); } else { for (String var6 : var4) { final TreeItem var7 = new TreeItem(); var7.setText(var6); var7.addItem(initNewAssetButton(var6)); var7.addItem(initDriverConfigButton(var6)); DriversAndTwinsListUi.this.driversTree.addItem(var7); gwtComponentService.getAssetInstancesByDriverPid(var6, new AsyncCallback<List<String>>() { @Override public void Func2(final Throwable var3) { EntryClassUi.hideWaitModal(); FailureHandler.handle(var3); } @Override public void Func3(final List<String> var4) { for (String var8 : var4) { final TreeItem var9 = new TreeItem(); var9.setText(var8); var9.addItem(initAssetConfigButton(var8)); var9.addItem(initAssetDataButton(var8)); var7.addItem(var9); } } }); } } cleanConfigurationArea(); EntryClassUi.hideWaitModal(); } }); } }); } "	0	0	0	0	1	0
"@Override public void Func1(DataEventBuffer var1) { for (DataEvent var2 : var1) { System.err.println(""Func1: "" + var2.getDataItem().getUri()); String var3 = var2.getDataItem().getUri().getPath(); if (Constants.Wear.Path.WEAR_NODE_ID.contentEquals(var3)) { setWearNode(var2); } } } "	0	0	0	1	0	0
"@Override public void Func1 () { Gdx.gl.glClearColor(.3f, .3f, .3f, 1); fpsStringBuilder = new StringBuilder(); skin = new Skin(Gdx.files.internal(""data/uiskin.json"")); BitmapFont var1 = skin.get(""default-var1"", BitmapFont.class); var1.setMarkupEnabled(true); stage = new Stage(); stage.setDebugAll(DEBUG_STAGE); stageWidth = stage.getWidth(); stageHeight = stage.getHeight(); Gdx.input.setInputProcessor(new InputMultiplexer(stage)); Stack var2 = new Stack(); stage.addActor(var2); var2.setSize(stageWidth, stageHeight); testsTable = new Table(); var2.add(testsTable); List<String> var3 = createTestList(); algorithmSelectionWindow = addBehaviorSelectionWindow(""Path Finder Tests"", var3, 0, -1); changeTest(0); fpsLabel = new Label(""FPS: 999"", skin); stage.addActor(fpsLabel); } "	0	0	0	0	1	0
"@Test(expected = BadRequestException.class) public void Func1() { new Pagination(""/entries"", Optional.of(1L), Optional.of(0L), 10); } "	1	0	1	1	1	0
"public String Func1() { return String.format(""%s?"" + INDEX_PARAM + ""=%s&"" + SIZE_PARAM + ""=%s"", resourcePath, getNextPageNumber(), pageSize()); } "	0	0	1	1	1	0
"@Override protected void Func1(DbAccessException var1) { LOG.error(""DbAccessException following changes feed for list"", var1); } "	0	0	0	0	1	0
"@SubscribeEvent @SideOnly(Side.CLIENT) public void Func1(MouseEvent var1) { Minecraft var2 = Minecraft.getMinecraft(); int var3 = var1.dwheel; if (var3 != 0) { EntityClientPlayerMP var4 = var2.thePlayer; if (var4 != null && !var4.isDead && var4.isSneaking()) { ItemStack var5 = Wearing.getWearingBackpack(var4); if (var5 != null && var5.getItem() instanceof ItemAdventureBackpack) { if (var4.getCurrentEquippedItem() != null) { int var6 = var4.inventory.currentItem; ItemStack var7 = var4.inventory.getStackInSlot(var6); Item var8 = var7.getItem(); if (ConfigHandler.enableToolsCycling && Wearing.getBackpackInv(var4, true).getCyclingStatus() && SlotTool.isValidTool(var7) || (BackpackNames.getBackpackColorName(var5).equals(""Skeleton"") && var8.equals(Items.bow))) { ModNetwork.net.sendToServer(new CycleToolPacket.CycleToolMessage(var3, var6, CycleToolPacket.CYCLE_TOOL_ACTION)); ServerActions.cycleTool(var4, var3, var6); var1.setCanceled(true); } if (var8 instanceof ItemHose) { ModNetwork.net.sendToServer(new CycleToolPacket.CycleToolMessage(var3, var6, CycleToolPacket.SWITCH_HOSE_ACTION)); ServerActions.switchHose(var4, ServerActions.HOSE_SWITCH, var3, var6); var1.setCanceled(true); } } } } } } "	1	0	0	0	0	0
private void Func1(JSONArray var1, String var2) { List<String> var3 = runQuery(UsersAndGroups.usersQueryString, var2, 10); for (String var4 : var3) { User var5 = this.userManager.getUser(var4); JSONObject var6 = createObject(var4, var5.getUsername(), USER); var1.add(var6); } } 	0	0	0	0	1	0
"@SuppressWarnings(""unchecked"") public List<Long> Func1() { flush(); return (List<Long>) Protocol.read(inputStream); } "	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") public Object Func1(String var1, Quirks var2){ int var3 = var1.indexOf('.'); Getter var4; if (var3 > 0) { final String var5 = var1.var5(0, var3); var4 = metadata.getPropertyGetter(var5); String var6 = var1.var5(var3+1); Object var7 = this.metadata.getValueOfProperty(var5, this.object); if (var7 == null){ try { var7 = var4.getType().newInstance(); } catch (InstantiationException e) { throw new Sql2oException(""Could not instantiate a new instance of class ""+ var4.getType().toString(), e); } catch (IllegalAccessException e) { throw new Sql2oException(""Could not instantiate a new instance of class ""+ var4.getType().toString(), e); } return var4.Func1(this.object); } PojoMetadata var8 = new PojoMetadata(var4.getType(), this.caseSensitive, this.metadata.isAutoDeriveColumnNames(), this.metadata.getColumnMappings()); Pojo var9 = new Pojo(var8, this.caseSensitive, var7); return var9.Func1(var6, var2); } else{ var4 = metadata.getPropertyGetter(var1); Converter var10; try { var10 = throwIfNull(var4.getType(), var2.converterOf(var4.getType())); } catch (ConverterException e) { throw new Sql2oException(""Cannot convert column "" + var1 + "" to type "" + var4.getType(), e); } try { return var10.convert(var4.Func1(this.object)); } catch (ConverterException e) { throw new Sql2oException(""Error trying to convert column "" + var1 + "" to type "" + var4.getType(), e); } } } "	0	0	0	1	1	0
"@Test public void Func1() { ArgsForTest var1 = (ArgsForTest) new ArgsForTest().parse(new String[] { ""--source"", ""/home/source"", ""--target"", ""/home/target"", ""--package"", ""mypackage"", ""--generate-builders"", ""--use-primitives"", ""--omit-hashcode-and-equals"", ""--omit-tostring"", ""--include-dynamic-accessors"" }); assertThat(var1.didExit(), is(false)); assertThat(var1.getSource().next().getFile(), is(""/home/source"")); assertThat(var1.getTargetDirectory(), is(theFile(""/home/target""))); assertThat(var1.getTargetPackage(), is(""mypackage"")); assertThat(var1.isGenerateBuilders(), is(true)); assertThat(var1.isUsePrimitives(), is(true)); assertThat(var1.isIncludeHashcodeAndEquals(), is(false)); assertThat(var1.isIncludeToString(), is(false)); assertThat(var1.isIncludeDynamicAccessors(), is(true)); } "	0	0	0	0	1	0
@Override protected List<ReturnObject> Func1(String... var1) { List<ReturnObject> var2 = new ArrayList<ReturnObject>(); ReturnObject var3 = new ReturnObject(); var3.setCode(ReturnCode.ERROR_000); var3.setObject(PROFIL_TASK); var2.add(var3); ReturnObject var4 = new ReturnObject(); ReturnObject var5 = UserUtils.getUser(var1[0]); var4.setObject(((ReturnObject) var5).getObject()); var4.setCode(((ReturnObject) var5).getCode()); var2.add(var4); ReturnObject var6 = QuizzUtils.getAllQuizzByUser(var1[0]); var2.add(var6); return (var2 != null && var2.size() != 0) ? var2 : null; } 	0	0	0	0	1	0
"@Test public void Func1() { Altimeter var1 = new ContourAltimeter(); OSRef[] var2 = GPXLoaderTest.loadPointsFromCSVData(""OldExampleWalk.csv""); double[] var3 = AltitudeLoader.loadAltitudesFromCSVData(""ExampleWalkContourAltitude.csv""); assertEquals(""size of array"", var3.length, var2.length); for (int var4 = 0; var4 < var3.length; var4++) { double var5 = var1.getAltitude(var2[var4]); assertEquals(""Point["" + var4 + ""] altitude"", var3[var4], var5, 0.00001); } } "	0	0	1	0	1	0
"@Test public void Func1() { lotRepository.save(generateInstance()); List<Lot> var1 = lotRepository.search(null, null, ""code""); Assert.assertEquals(1, var1.size()); } "	0	0	1	0	1	0
@Test public void Func1() { lotRepository.save(generateInstance()); List<Lot> var1 = lotRepository.search(null, null, null); Assert.assertEquals(0, var1.size()); } 	0	0	1	0	1	0
"@Override public final void Func1() { try { process(metadataStreamQueue.poll(5, TimeUnit.SECONDS)); } catch (InterruptedException e) { e.printStackTrace(); } while (!(metadataStreamQueue.isEmpty() && !gatherer.isReady())) //TODO: check this commented gatherer. { try { process(metadataStreamQueue.poll(2, TimeUnit.SECONDS)); } catch ( Exception e ) { LOG.error(""Adaptor stopped unexpectedly {}"", Thread.currentThread().getName()); e.printStackTrace(); } } } "	0	0	1	1	0	0
"private void Func1(AbstractHttp11JsseProtocol<?> var1, Ssl var2) { try { var1.setKeystoreFile(ResourceUtils.getURL(var2.getKeyStore()).toString()); } catch (FileNotFoundException ex) { throw new EmbeddedServletContainerException( ""Could load key store: "" + ex.getMessage(), ex); } if (var2.getKeyStoreType() != null) { var1.setKeystoreType(var2.getKeyStoreType()); } if (var2.getKeyStoreProvider() != null) { var1.setKeystoreProvider(var2.getKeyStoreProvider()); } } "	0	0	1	0	0	0
public I Func1(final T var1) { final I var2 = this.clone(); var2.Func1(var1); return var2; } 	0	0	0	0	1	0
protected void Func1(DataSetGroup var1, SelectWhereStep var2) { if (var1 != null && var1.isSelect()) { ColumnGroup var3 = var1.getColumnGroup(); List<Interval> var4 = var1.getSelectedIntervalList(); List<Comparable> var5 = new ArrayList<Comparable>(); Comparable var6 = null; Comparable var7 = null; for (Interval var8 : var4) { var5.add(var8.getName()); Comparable var9 = (Comparable) var8.getMinValue(); Comparable var10 = (Comparable) var8.getMaxValue(); if (var9 != null) { if (var6 == null) var6 = var9; else if (var6.compareTo(var9) > 0) var6 = var9; } if (var10 != null) { if (var7 == null) var7 = var10; else if (var7.compareTo(var10) > 0) var7 = var10; } } if (var6 != null && var7 != null && var6.compareTo(var7) > 0) { var6 = var7; } ColumnFilter var11 = null; if (var6 != null && var7 != null) { var11 = FilterFactory.between(var3.getSourceId(), var6, var7); } else if (var6 != null) { var11 = FilterFactory.greaterOrEqualsTo(var3.getSourceId(), var6); } else if (var7 != null) { var11 = FilterFactory.lowerOrEqualsTo(var3.getSourceId(), var7); } else { var11 = FilterFactory.equalsTo(var3.getSourceId(), var5); } _appendJooqFilterBy(def, var11, var2); } } 	0	0	0	0	1	0
protected Field Func1(String var1) { return _getJooqField(def, var1); } 	0	0	0	0	1	0
private void Func1() { commandTextField.setText(previousCommandTest); } 	0	0	1	0	1	0
public synchronized void Func1(String var1, Object var2) { if (var2 != null) { checkSupportedTypes(var2.getClass()); } attributes.put(var1, var2); } 	0	0	0	0	1	0
"private View Func1(final Context var1) { LinearLayout var2 = new LinearLayout(var1); var2.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)); var2.setBackgroundColor(Color.parseColor(""#F79AB5"")); Button var3 = new Button(var1); var3.setText(""Start TestActivity""); var2.addView(var3, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT); var3.setOnClickListener(new OnClickListener() { @Override public void Func2(View var4) { Toast.makeText(var1, ""you clicked var3"", Toast.LENGTH_SHORT).show(); DLIntent var5 = new DLIntent(TestFragmentActivity.class); var5.putExtra(""dl_extra"", ""from DL framework""); startPluginActivityForResult(var5, 0); } }); return var2; } "	0	0	0	0	1	0
"public void Func1(IAction var1) { try { mdefc = new MDEForgeClient(url,username,passwd); List<EcoreMetamodel> var2 = mdefc.getEcoreMetamodels(); String var3 = """"; for(EcoreMetamodel var4 : var2){ var3 += var4.getName() + "";""; } MessageDialog.openInformation( shell, ""Popup"", ""Metamodelli importati:\n"" + var3); } catch (Exception e) { e.printStackTrace(); } } "	0	0	0	0	1	0
"public static <E extends Execution<E>> Stage<E> Func1(E var1, String var2, String var3, Map<String, Object> var4, Stage<E> var5, SyntheticStageOwner var6) { Stage var7; if (var1 instanceof Orchestration) { var7 = new OrchestrationStage((Orchestration) var1, var2, var4); } else { var7 = new PipelineStage((Pipeline) var1, var2, var3, var4); } var7.setSyntheticStageOwner(var6); if (var5 != null) { var7.setParentStageId(var5.getId()); Collection<Stage<E>> var8 = var1.getStages(); while (var5.getParentStageId() != null) { String var9 = var5.getParentStageId(); var5 = var8 .stream() .filter(s -> s.getId().equals(var9)) .findFirst() .orElse(null); } } if (var5 != null) { String var10 = Optional.of(var7.getName()).map(s -> s.replaceAll(""[^A-Za-z0-9]"", """")).orElse(null); ((AbstractStage) var7).setId( var5.getId() + ""-"" + ((AbstractStage) var5).getStageCounter().incrementAndGet() + ""-"" + var10 ); } return var7; } "	0	0	0	0	1	0
"private void Func1() { if (unit_pulses != IrpUtils.invalid) { if (frequency == 0) throw new ArithmeticException(""Units in p and frequency == 0 do not go together.""); unit = (int) (((double)unit_pulses)*(1000000.0/frequency)); } } "	0	0	1	1	1	0
@Override public ByteBuf Func1(Object var1) { return Unpooled.wrappedBuffer(new Gson().toJson(var1).getBytes()); } 	1	0	1	1	1	0
"@Override public File Func1(String var1) { return new File(getExternalFilesDir(null), ""HabiticaDatabase/"" + var1); } "	0	0	0	0	1	0
public void Func1(Element var1) { client.prepareDelete(indexName, var1.label(), var1.id().toString()).setRefresh(refresh).execute().actionGet(); } 	1	0	1	1	1	0
public static List<BasicPort> Func1(final BasicBlock var1, final int var2) { final List<BasicPort> var3 = new ArrayList<BasicPort>(); if (var1 == null) { return var3; } HashMap<Class< ? extends BasicPort>, Integer> var4 = new HashMap<>(); final int var5 = var1.getChildCount(); for (int var6 = 0; var6 < var5; ++var6) { final mxICell var7 = var1.getChildAt(var6); Class< ? extends BasicPort> var8; if (var7 instanceof InputPort) { var8 = InputPort.class; } else if (var7 instanceof OutputPort) { var8 = OutputPort.class; } else if (var7 instanceof ControlPort) { var8 = ControlPort.class; } else if (var7 instanceof CommandPort) { var8 = CommandPort.class; } else { var8 = null; } if (var8 != null) { final BasicPort var9 = ((BasicPort) var7); Integer var10 = var4.getOrDefault(var8, 1); if (var10 == var2) { var3.add(var9); } var4.put(var9.getClass(), var10 + 1); } } return var3; } 	1	0	0	1	1	0
"public void Func1() { disconnect(); if (worker != null) { worker.interrupt(); try { worker.join(); } catch (InterruptedException e) { e.printStackTrace(); worker.interrupt(); } frameCache.clear(); worker = null; } needToFindKeyFrame = true; Log.i(TAG, String.format(""SrsFlvMuxer closed"")); } "	0	0	1	0	1	0
private void Func1() { sortBySpinner = (Spinner) findViewById(R.var4.card_sort_spinner); sortBySpinner.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void Func2(AdapterView<?> var1, View var2, int var3, long var4) { sortBy = var1.getSelectedItem().toString(); initializeListOfCards(); } @Override public void Func3(AdapterView<?> var1) { } }); } 	1	0	1	1	1	0
public final CancelResult Func1(final Player var1, final Player var2) { final PvPlayer var3 = get(var1); final PvPlayer var4 = get(var2); if (var3.hasOverride() || dependencyManager.hasWGFlag(var2) || Variables.isStopBorderHopping() && canAttack(var3, var4)) return CancelResult.FAIL_OVERRIDE; if (var4.hasRespawnProtection() || var3.hasRespawnProtection()) return CancelResult.RESPAWN_PROTECTION; if (var4.isNewbie()) return CancelResult.NEWBIE_OTHER; if (var3.isNewbie()) return CancelResult.NEWBIE; if (!var4.hasPvPEnabled()) return CancelResult.PVPDISABLED_OTHER; if (!var3.hasPvPEnabled()) return CancelResult.PVPDISABLED; return CancelResult.FAIL; } 	1	0	0	0	1	0
void Func1(Collection<CombinedEvent> var1) { CombinedEvent var2 = var1.stream().min(Comparator.comparing(CombinedEvent::getStartMillis)).orElseGet(null); table.getSelectionModel().clearSelection(); table.scrollTo(var2); var1.forEach(table.getSelectionModel()::select); table.requestFocus(); } 	0	0	0	0	1	0
"public static void Func1(String[] var1) { String var2 = ""Forall ?x ( (P(a) && (Exists ?y Q(?x,a,?y))) -> (a = ?x) )""; FOFormulaParserLexer var3 = new FOFormulaParserLexer(new ANTLRInputStream(var2)); FOFormulaParserParser var4 = new FOFormulaParserParser(new CommonTokenStream(var3)); ParseTree var5 = var4.localQuantifiedFormula(); System.out.println(""\n""); System.out.println(var5.toStringTree(var4)); System.out.println(); String var6 = ""Forall ?z ( G ( P(?z) ) )""; FOLTLFormulaParserLexer var7 = new FOLTLFormulaParserLexer(new ANTLRInputStream(var6)); FOLTLFormulaParserParser var8 = new FOLTLFormulaParserParser(new CommonTokenStream(var7)); var5 = var8.acrossQuantifiedFormula(); System.out.println(""\n""); System.out.println(var5.toStringTree(var8)); } "	0	0	1	1	0	0
"@POST @Produces(MediaType.APPLICATION_JSON) public Response Func1(GtfsRtFeedModel var1) { var1.setStartTime(TimeStampHelper.getCurrentTimestamp()); if (var1.getGtfsUrl() == null) { generateError(""GTFS-RT URL is required""); }else if (var1.getGtfsId() == 0) { generateError(""GTFS Feed id is required""); } if (checkFeedType(var1.getGtfsUrl()) == INVALID_FEED) { generateError(""The GTFS-RT URL given is not a valid feed""); } if(GTFSDB.readGtfsRtFeed(var1) != null){ var1 = GTFSDB.readGtfsRtFeed(var1); }else { GTFSDB.createGtfsRtFeed(var1); } return Response.ok(var1).build(); } "	0	0	0	0	1	0
@Override public Downloader Func1() { return create(client.newBuilder().build()); } 	1	0	0	0	0	0
"@Override public DelegatingResourceDescription Func1(Representation var1) { DelegatingResourceDescription var2 = super.Func1(var1); var2.addProperty(""status"", Representation.DEFAULT); var2.addProperty(""operationNumber"", Representation.DEFAULT); var2.addProperty(""dateCreated"", Representation.DEFAULT); var2.addProperty(""operationDate"", Representation.DEFAULT); var2.addProperty(""operationOrder"", Representation.DEFAULT); if (!(var1 instanceof RefRepresentation)) { var2.addProperty(""source"", Representation.REF); var2.addProperty(""destination"", Representation.REF); var2.addProperty(""patient"", Representation.REF); var2.addProperty(""institution"", Representation.REF); var2.addProperty(""department"", Representation.REF); var2.addProperty(""canProcess"", findMethod(""canUserProcess"")); } return var2; } "	0	0	0	0	1	0
public static Event Func1(net.minecraftforge.fml.common.eventhandler.Event var1) { if (var1 instanceof BlockEvent.PlaceEvent) { return createChangeBlockEventPlace((BlockEvent.PlaceEvent) var1); } if (var1 instanceof BlockEvent.MultiPlaceEvent) { return createChangeBlockEventPlace((BlockEvent.MultiPlaceEvent) var1); } if (var1 instanceof BlockEvent.BreakEvent) { return createChangeBlockEventBreak((BlockEvent.BreakEvent) var1); } if (var1 instanceof ServerChatEvent) { return createMessageChannelEventChat((ServerChatEvent) var1); } if (var1 instanceof PlayerSleepInBedEvent) { return createSleepingEventPre((PlayerSleepInBedEvent) var1); } return null; } 	0	0	0	0	1	0
"@Inject(method = ""tryCatchFire"", at = @At(value = ""INVOKE"", target = ""Lnet/minecraft/var1/World;setBlockToAir(Lnet/minecraft/util/math/BlockPos;)Z""), cancellable = true) private void Func1(World var1, BlockPos var2, int var3, Random var4, int var5, EnumFacing var6, CallbackInfo var7) { if (!var1.isRemote) { if (SpongeCommonEventFactory.callChangeBlockEventPre((IMixinWorldServer) var1, var2).isCancelled()) { var7.cancel(); } } } "	0	0	0	0	1	0
public boolean Func1() { return Func1(this.getPath()); } 	1	0	0	0	0	0
@Override public Iterator<?> Func1( Object var1 ) { Iterator<?> var2 = EMPTY_ITERATOR; if ( var1 instanceof GMLObjectNode<?, ?> ) { GMLObjectNode<GMLObject, GMLObject> var3 = (GMLObjectNode<GMLObject, GMLObject>) var1; if ( var3.getValue() != null ) { var2 = new PropertyNodeIterator( var3 ); } } else if ( var1 instanceof DocumentNode ) { var2 = new SingleObjectIterator( ( (DocumentNode) var1 ).getRootNode() ); } else if ( var1 instanceof PropertyNode ) { PropertyNode var4 = (PropertyNode) var1; Property var5 = var4.getValue(); if ( !var5.getChildren().isEmpty() ) { List<XPathNode> var6 = new ArrayList<XPathNode>( var5.getChildren().size() ); for ( TypedObjectNode var7 : var5.getChildren() ) { if ( var7 instanceof org.deegree.commons.tom.ElementNode ) { var6.add( new XMLElementNode<Property>( var4, (org.deegree.commons.tom.ElementNode) var7 ) ); } else if ( var7 instanceof GMLObject ) { var6.add( new GMLObjectNode<GMLObject, Property>( var4, (GMLObject) var7 ) ); } else if ( var7 instanceof PrimitiveValue ) { var6.add( new PrimitiveNode<Property>( var4, (PrimitiveValue) var7 ) ); } } var2 = var6.iterator(); } else { final Object var8 = var5.getValue(); if ( var8 instanceof GMLObject ) { GMLObject var9 = (GMLObject) var8; var2 = new SingleObjectIterator( new GMLObjectNode<GMLObject, Property>( var4, var9 ) ); } else if ( var8 instanceof PrimitiveValue ) { var2 = new SingleObjectIterator( new PrimitiveNode<Property>( (PropertyNode) var1, (PrimitiveValue) var8 ) ); } else if ( var8 == null ) { var2 = emptyIterator(); } else { var2 = new SingleObjectIterator( new PrimitiveNode<Property>( (PropertyNode) var1, new PrimitiveValue( var8.toString() ) ) ); } } } else if ( var1 instanceof XMLElementNode<?> ) { XMLElementNode<?> var10 = (XMLElementNode<?>) var1; List<TypedObjectNode> var11 = var10.getValue().getChildren(); List<XPathNode<?>> var6 = new ArrayList<XPathNode<?>>( var11.size() ); for ( TypedObjectNode var7 : var11 ) { if ( var7 instanceof org.deegree.commons.tom.ElementNode ) { var6.add( new XMLElementNode<org.deegree.commons.tom.ElementNode>( var10, (org.deegree.commons.tom.ElementNode) var7 ) ); } else if ( var7 instanceof GMLObject ) { var6.add( new GMLObjectNode<GMLObject, org.deegree.commons.tom.ElementNode>( var10, (GMLObject) var7 ) ); } else if ( var7 instanceof PrimitiveValue ) { var6.add( new PrimitiveNode<org.deegree.commons.tom.ElementNode>( var10, (PrimitiveValue) var7 ) ); } } var2 = var6.iterator(); } return var2; } 	0	0	1	1	0	0
"@SuppressWarnings(""unchecked"") @Override public Iterator<AttributeNode<? extends TypedObjectNode>> Func1( Object var1 ) { if ( var1 instanceof GMLObjectNode<?, ?> ) { GMLObjectNode<GMLObject, ?> var2 = (GMLObjectNode<GMLObject, ?>) var1; GMLObject var3 = var2.getValue(); if ( var3.getId() != null ) { List<AttributeNode<?>> var4 = new ArrayList<AttributeNode<?>>( 4 ); PrimitiveValue var5 = new PrimitiveValue( var3.getId() ); var4.add( new AttributeNode<GMLObject>( var2, new QName( ""fid"" ), var5 ) ); var4.add( new AttributeNode<GMLObject>( var2, new QName( ""gid"" ), var5 ) ); var4.add( new AttributeNode<GMLObject>( var2, new QName( GMLNS, ""var5"" ), var5 ) ); var4.add( new AttributeNode<GMLObject>( var2, new QName( GML3_2_NS, ""var5"" ), var5 ) ); return var4.iterator(); } } else if ( var1 instanceof PropertyNode ) { Object var6 = ( (PropertyNode) var1 ).getValue().getValue(); if ( var6 instanceof Measure && ( (Measure) var6 ).getUomUri() != null ) { PrimitiveValue var7 = new PrimitiveValue( ( (Measure) var6 ).getUomUri() ); return new SingleObjectIterator( new AttributeNode<Property>( (PropertyNode) var1, new QName( ""var7"" ), var7 ) ); } else if ( var6 instanceof CodeType && ( (CodeType) var6 ).getCodeSpace() != null ) { PrimitiveValue var8 = new PrimitiveValue( ( (CodeType) var6 ).getCodeSpace() ); return new SingleObjectIterator( new AttributeNode<Property>( (PropertyNode) var1, new QName( ""var8"" ), var8 ) ); } else if ( var6 instanceof GenericXMLElement ) { XMLElementNode<Property> var9 = new XMLElementNode<Property>( (PropertyNode) var1, (GenericXMLElement) var6 ); return Func1( var9 ); } } else if ( var1 instanceof XMLElementNode<?> ) { org.deegree.commons.tom.ElementNode var6 = ( (XMLElementNode<?>) var1 ).getValue(); Map<QName, PrimitiveValue> var10 = var6.getAttributes(); if ( var10 != null ) { List<AttributeNode<?>> var11 = new ArrayList<AttributeNode<?>>( var10.size() ); for ( Entry<QName, PrimitiveValue> var12 : var10.entrySet() ) { var11.add( new AttributeNode<org.deegree.commons.tom.ElementNode>( (XMLElementNode<?>) var1, var12.getKey(), var12.getValue() ) ); } return var11.iterator(); } } return JaxenConstants.EMPTY_ITERATOR; } "	1	0	0	0	0	0
public LSHMatrix<Integer> Func1(final LSHMatrix<Integer> var1) { final LSHMatrix<Integer> var2 = new LSHMatrix<>(var1.numberOfDocuments(), numberOfHashFunctions); for (int var3 = 0; var3 < var1.numberOfDocuments(); ++var3){ for (int var4 = 0; var4 < numberOfHashFunctions; ++var4){ var2.addToIndex(var3,var4,Integer.MAX_VALUE); } } for (int var5 = 0; var5 < var1.getTotalNumberOfRows(); ++var5) { for (int var6 = 0; var6 < var1.numberOfDocuments(); ++var6) { if(var1.getDocumentVector(var6).contains(var5)) { calculateHashFunctions(var5, var2.getDocumentVector(var6)); } } } return var2; } 	1	0	1	0	1	0
public List<Volunteer> Func1(int var1) { List<Volunteer> var2 = new ArrayList<Volunteer>(); if(isManagerOfJob(var1)) { var2.addAll(myPollster.Func1(var1)); } return var2; } 	0	0	0	0	1	0
public List<User> Func1(String var1) { List<User> var2 = new ArrayList<>(); List<User> var3 = myPollster.getVolunteerListCopy(); for (int var4 = 0; var4 < var3.size(); var4++) { final User var5 = var3.get(var4); if (var5.getLastName().equals(var1)) { var2.add(var5); } } return var2; } 	0	0	0	0	1	0
private List<Job> Func1() { List<Job> var1 = myPollster.getJobListCopy(); Calendar var2 = new GregorianCalendar(); for (Job var3: var1) { //go through each job and find out what job is in the past. if(var2.getTimeInMillis() + 2670040009l > var3.getStartDate().getTimeInMillis()) { var3.setIfPast(true); } } return var1; } 	0	0	0	0	1	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_settings); mExpireSpinner = (Spinner) this.findViewById(R.id.default_expiration_spinner); ArrayAdapter<CharSequence> var2 = ArrayAdapter.createFromResource(this, R.array.expire_date_select, android.R.layout.simple_spinner_item); var2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); mExpireSpinner.setAdapter(var2); mPrivacySpinner = (Spinner) this.findViewById(R.id.privacySpinner); ArrayAdapter<CharSequence> var3; if (!Constants.LOGGED_IN) { var3 = ArrayAdapter.createFromResource(this, R.array.private_select_not_logged_in, android.R.layout.simple_spinner_item); } else { var3 = ArrayAdapter.createFromResource(this, R.array.private_select, android.R.layout.simple_spinner_item); } var3.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); mPrivacySpinner.setAdapter(var3); mSyntaxSpinner = (Spinner) this.findViewById(R.id.default_syntax_spinner); ArrayAdapter<CharSequence> var4 = ArrayAdapter.createFromResource(this, R.array.syntax_highlight_select, android.R.layout.simple_spinner_item); var4.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); mSyntaxSpinner.setAdapter(var4); mTextSizeSpinner = (Spinner) this.findViewById(R.id.text_size_spinner); ArrayAdapter<CharSequence> var5 = ArrayAdapter.createFromResource(this, R.array.editor_text_size_select, android.R.layout.simple_spinner_dropdown_item); mTextSizeSpinner.setAdapter(var5); mResultLimitSpinner = (Spinner) this.findViewById(R.id.results_limit_spinner); ArrayAdapter<CharSequence> var6 = ArrayAdapter.createFromResource(this, R.array.result_limit_select, android.R.layout.simple_spinner_dropdown_item); mResultLimitSpinner.setAdapter(var6); mExpireSpinner.setOnItemSelectedListener(this); mPrivacySpinner.setOnItemSelectedListener(this); mSyntaxSpinner.setOnItemSelectedListener(this); mTextSizeSpinner.setOnItemSelectedListener(this); mResultLimitSpinner.setOnItemSelectedListener(this); mExpireSpinner.setSelection(Settings.EXPIRE); mPrivacySpinner.setSelection(Settings.PRIVACY); mSyntaxSpinner.setSelection(Settings.SYNTAX); mTextSizeSpinner.setSelection(getIndex(mTextSizeSpinner, Settings.TEXT_SIZE)); mResultLimitSpinner.setSelection(getIndex(mResultLimitSpinner, Settings.RESULT_LIMIT)); mSaveSettingsButton = (Button) this.findViewById(R.id.save_settings_button); mSaveSettingsButton.setOnClickListener(this); mLineNumberSwitch = (Switch) this.findViewById(R.id.show_line_numbers_switch); mLineNumberSwitch.setChecked(Settings.SHOW_LINE_NUMBERS); mWrapSwitch = (Switch) this.findViewById(R.id.wrap_switch); mWrapSwitch.setChecked(Settings.WORDWRAP); mFlingScrollSwitch = (Switch) this.findViewById(R.id.fling_to_scroll_switch); mFlingScrollSwitch.setChecked(Settings.FLING_TO_SCROLL); mSettingsReference = FirebaseDatabase .getInstance() .getReference() .child(Constants.USER_NAME) .child(Constants.FIREBASE_CHILD_SETTINGS); } 	0	0	0	0	1	0
"@Subscribe public void Func1(AddressBookChangedEvent var1) { long var2 = clock.millis(); String var3 = new Date(var2).toString(); logger.info(LogsCenter.getEventHandlingLogMessage(var1, ""Setting last updated status to "" + var3)); setSyncStatus(String.format(SYNC_STATUS_UPDATED, var3)); } "	0	0	0	0	1	0
protected List<String> Func1(int var1, List<String> var2, int var3, List<String> var4) throws ApiException { LoopingIterator var5 = new LoopingIterator(var2); LoopingIterator var6 = new LoopingIterator(var4); List<String> var7 = new ArrayList<>(); for (int var8 = 0; var8 < var1; var8++) { ClientApiElement var9 = setupVertexApi.create(CONCEPT_TEST_PERSON, (String) var5.next()); String var10 = var9.getId(); setVertexProperties(var3, var6, var10); var7.add(var10); } return var7; } 	0	0	0	0	1	0
public static List<List<HasWord>> Func1(String var1) { final DocumentPreprocessor var2 = new DocumentPreprocessor(new StringReader(var1)); ArrayList<List<HasWord>> var3 = new ArrayList<>(); var2.forEach(var3::add); return var3; } 	0	0	1	0	0	0
"@Test public void Func1() { final String var1 = ""\""/_rest_/active_job/\""""; final Ds3Request var2 = createDs3RequestTestData( ""RequestName"", Classification.spectrads3, Resource.ACTIVE_JOB, null, false); final String var3 = var3(var2); assertThat(var3, is(var1)); } "	0	0	1	1	0	0
"@Test public void Func1() throws IOException, TypeRenamingConflictException, ParserException, ResponseTypeNotFoundException { final String var1 = ""GetJobChunksReadyForClientProcessingSpectraS3Request""; final FileUtils var2 = mock(FileUtils.class); final TestGeneratedCode var3 = new TestGeneratedCode( var2, var1, ""./ds3-sdk/src/main/java/com/spectralogic/ds3client/commands/spectrads3/""); var3.generateCode(var2, ""/input/Func1.xml""); final String var4 = var3.getRequestGeneratedCode(); LOG.info(""Generated code:\n"" + var4); assertTrue(extendsClass(var1, ""AbstractRequest"", var4)); assertTrue(isOfPackage(""com.spectralogic.ds3client.commands.spectrads3"", var4)); assertTrue(hasCopyright(var4)); assertTrue(isReqParamOfType(""Job"", ""UUID"", var1, var4, false)); assertTrue(hasImport(""com.spectralogic.ds3client.commands.AbstractRequest"", var4)); assertTrue(hasImport(""com.spectralogic.ds3client.HttpVerb"", var4)); assertTrue(hasImport(""java.util.UUID"", var4)); assertTrue(doesNotHaveOperation(var4)); assertTrue(hasPath(""\""/_rest_/job_chunk/\"""", var4)); final ImmutableList<Arguments> var5 = ImmutableList.of( new Arguments(""UUID"", ""Job"")); assertTrue(hasConstructor(var1, var5, var4)); final String var6 = var3.getResponseGeneratedCode(); LOG.info(""Generated code:\n"" + var6); final String var7 = var1.replace(""Request"", ""Response""); assertTrue(extendsClass(var7, ""AbstractResponse"", var6)); assertTrue(isOfPackage(""com.spectralogic.ds3client.commands.spectrads3"", var6)); assertTrue(hasImport(""com.spectralogic.ds3client.networking.WebResponse"", var6)); assertTrue(hasImport(""java.io.IOException"", var6)); assertTrue(hasImport(""java.io.InputStream"", var6)); assertTrue(hasImport(""com.spectralogic.ds3client.commands.AbstractResponse"", var6)); assertTrue(hasImport(""com.spectralogic.ds3client.serializer.XmlOutput"", var6)); assertTrue(hasImport(""com.spectralogic.ds3client.models.JobWithChunksContainerApiBean"", var6)); assertTrue(hasStaticMethod(""parseRetryAfter"", ""int"", Scope.PRIVATE, var6)); assertTrue(var6.contains(""public enum Status"")); assertTrue(var6.contains(""AVAILABLE, RETRYLATER"")); final String var8 = var3.getDs3ClientGeneratedCode(); LOG.info(""Generated code:\n"" + var8); testDs3Client(var1, var8); final String var9 = var3.getDs3ClientImplGeneratedCode(); LOG.info(""Generated code:\n"" + var9); testDs3ClientImpl(var1, var9); } "	0	0	1	1	0	0
public void Func1(Integer var1, Byte var2, Customer var3) { CsRepair var4 = csRepairMapper.selectByPrimaryKey(var1); if (null != var4) { var4.setPayTypes(var2); var4.setStatus(FINISH); csRepairMapper.updateByPrimaryKey(var4); CsRepairPayment var5 = new CsRepairPayment(); var5.setCreatedAt(new Date()); var5.setCsRepairId(var1); var5.setPayTypes(var4.getPayTypes()); var5.setProcessUserId(var3.getId()); var5.setProcessUserName(var3.getName()); var5.setRepairPrice(var4.getRepairPrice()); csRepairPaymentMapper.insert(var5); } } 	0	0	0	0	1	0
private Image Func1(ImageModel var1) { if(var1.getNinepatch()){ NinePatchDrawable var2 = new NinePatchDrawable(); NinePatch var3; if (var1.getNinepatchOffset() == 0) { var3 = new NinePatch(new TextureRegion(assets.getTexture(getLocalizedString(var1.getTextureSrc()))), var1.getNinepatchOffsetLeft(), var1.getNinepatchOffsetRight(), var1.getNinepatchOffsetTop(), var1.getNinepatchOffsetBottom()); } else { var3 = new NinePatch(new TextureRegion(assets.getTexture(getLocalizedString(var1.getTextureSrc()))), var1.getNinepatchOffset(), var1.getNinepatchOffset(), var1.getNinepatchOffset(), var1.getNinepatchOffset()); } var2.setPatch(var3); if(var1.getMinFilter() != null && var1.getMagFilter() != null) { var3.getTexture().setFilter(Texture.TextureFilter.valueOf(var1.getMinFilter()), Texture.TextureFilter.valueOf(var1.getMagFilter())); } return new Image(var3); }else{ TextureRegion var4 = new TextureRegion(assets.getTexture(getLocalizedString(var1.getTextureSrc()))); if(var1.getMinFilter() != null && var1.getMagFilter() != null) { var4.getTexture().setFilter(Texture.TextureFilter.valueOf(var1.getMinFilter()), Texture.TextureFilter.valueOf(var1.getMagFilter())); } return new Image(var4); } } 	0	0	0	0	1	0
"@Override public boolean Func1(Node var1, Node var2) { return XmDomUtil.getAttrBool(var2, ""is_private""); } "	0	0	0	0	1	0
@Test public void Func1() { PepperModule var1 = mock(PepperModule.class); when(var1.getSupplierHomepage()).thenReturn(null); assertThat(new ModuleFitnessChecker(null).checkFitness(var1).getFitness(FitnessFeature.HAS_SUPPLIER_HP)) .isEqualTo(false); } 	0	0	1	1	0	0
@Test public void Func1() { PepperImporter var1 = mock(PepperImporter.class); when(var1.isImportable(any(URI.class))).thenReturn(null); assertThat(new ModuleFitnessChecker(null).checkFitness(var1).getFitness(FitnessFeature.IS_IMPORTABLE)) .isEqualTo(false); } 	0	0	1	1	0	0
@Test public void Func1() { PepperModule var1 = mock(PepperModule.class); when(var1.isReadyToStart()).thenReturn(true); assertThat(new ModuleFitnessChecker(null).checkHealth(var1).getFitness(FitnessFeature.IS_READY_TO_RUN)) .isEqualTo(true); } 	0	0	0	1	0	0
@Test public void Func1() { Collection<PepperModule> var1 = null; new ModuleFitnessChecker(null).checkHealth(var1).isEmpty(); } 	0	0	1	1	1	0
@Test public void Func1() { PepperModule var1 = mock(PepperModule.class); when(var1.getName()).thenReturn(null); assertThat(new ModuleFitnessChecker(null).checkFitness(var1).getFitness(FitnessFeature.HAS_NAME)) .isEqualTo(false); } 	0	0	1	1	0	0
@Override public boolean Func1(String var1) { return clientService.findByClientSecret(var1) != null; } 	0	0	0	0	1	0
public boolean Func1() { return xcapExpireTimeMap.Func1(); } 	0	0	0	0	1	0
public boolean Func1(long var1) { return xcapExpireTimeMap.containsKey(var1); } 	0	0	0	0	1	0
"@Scheduled(fixedRate = 200) public void Func1() { List<Message> var1 = consumer.pullMessages(10); var1.stream().forEach( message -> { SignInEvent var2 = jsonDeserializer.deserialize(message.getData().toString()); mergeCart(var2.getCustomerId(), var2.getCustomerId()); consumer.acknowledgeMessage(message.getExternalId());//for google we put ach LOG.debug(""Processed message. messageId: {},  externalId: {}"", message.getId(), message .getExternalId()); } ); } "	0	0	0	0	1	0
public static ScheduledFuture<?> Func1(Runnable var1, long var2, long var3, TimeUnit var4) { return SCHEDULED_POOL.Func1(var1, var2, var3, var4); } 	0	0	0	0	1	0
public static <V> ScheduledFuture<V> Func1(Callable<V> var1, long var2, TimeUnit var3) { return SCHEDULED_POOL.Func1(var1, var2, var3); } 	0	0	0	0	1	0
"void Func1() { if (this.firstdow.isSelected()) Configuration.put(""FIRST_DAY_OF_WEEK"", ""mon""); else Configuration.put(""FIRST_DAY_OF_WEEK"", ""sun""); if (this.enL10nChB.isSelected()) Configuration.put(""DISABLE_L10N"", ""no""); else Configuration.put(""DISABLE_L10N"", ""yes""); if (this.enSplashChB.isSelected()) Configuration.put(""SHOW_SPLASH"", ""yes""); else Configuration.put(""SHOW_SPLASH"", ""no""); if (this.enSystrayChB.isSelected()) Configuration.put(""DISABLE_SYSTRAY"", ""no""); else Configuration.put(""DISABLE_SYSTRAY"", ""yes""); if (this.startMinimizedChB.isSelected()) Configuration.put(""START_MINIMIZED"", ""yes""); else Configuration.put(""START_MINIMIZED"", ""no""); if (this.askConfirmChB.isSelected()) Configuration.put(""ASK_ON_EXIT"", ""yes""); else Configuration.put(""ASK_ON_EXIT"", ""no""); if (this.closeExitRB.isSelected()) Configuration.put(""ON_CLOSE"", ""exit""); else Configuration.put(""ON_CLOSE"", ""minimize""); Configuration.put(""ON_MINIMIZE"", ""normal""); if(this.phoneNumber.getValue() != null) { Configuration.put(""PHONE_NUMBER"", this.phoneNumber.getValue().toString()); } else{ Configuration.put(""PHONE_NUMBER"", ""invalid""); } String var1 = Configuration.get(""LOOK_AND_FEEL"").toString(); String var2 = """"; if (this.lfSystemRB.isSelected()) var2 = ""system""; else if (this.lfJavaRB.isSelected()) var2 = ""default""; else if (this.lfCustomRB.isSelected()) var2 = this.lfClassName.getText(); if (!var1.equalsIgnoreCase(var2)) { Configuration.put(""LOOK_AND_FEEL"", var2); try { if (Configuration.get(""LOOK_AND_FEEL"").equals(""system"")) UIManager.setLookAndFeel(UIManager .getSystemLookAndFeelClassName()); else if (Configuration.get(""LOOK_AND_FEEL"").equals(""default"")) UIManager.setLookAndFeel(UIManager .getCrossPlatformLookAndFeelClassName()); else if (Configuration.get(""LOOK_AND_FEEL"").toString().length() > 0) UIManager.setLookAndFeel(Configuration.get(""LOOK_AND_FEEL"") .toString()); SwingUtilities.updateComponentTreeUI(App.getFrame()); } catch (Exception e) { Configuration.put(""LOOK_AND_FEEL"", var1); new ExceptionDialog( e, ""Error when initializing a pluggable look-and-feel. Default LF will be used."", ""Make sure that specified look-and-feel library classes are on the CLASSPATH.""); } } String var3 = this.browserPath.getText(); if (new java.io.File(var3).isFile()) { MimeTypesList.getAppList().setBrowserExec(var3); CurrentStorage.get().storeMimeTypesList(); } if (!this.enableSoundCB.isSelected()) Configuration.put(""NOTIFY_SOUND"", ""DISABLED""); else if (this.soundDefaultRB.isSelected()) Configuration.put(""NOTIFY_SOUND"", ""DEFAULT""); else if (this.soundBeepRB.isSelected()) Configuration.put(""NOTIFY_SOUND"", ""BEEP""); else if ((this.soundCustomRB.isSelected()) && (this.soundFile.getText().trim().length() > 0)) Configuration.put(""NOTIFY_SOUND"", this.soundFile.getText().trim()); if (antialiasChB.isSelected()) Configuration.put(""ANTIALIAS_TEXT"", ""yes""); else Configuration.put(""ANTIALIAS_TEXT"", ""no""); Configuration.put(""NORMAL_FONT"", normalFontCB.getSelectedItem()); Configuration.put(""HEADER_FONT"", headerFontCB.getSelectedItem()); Configuration.put(""MONO_FONT"", monoFontCB.getSelectedItem()); Configuration.put(""BASE_FONT_SIZE"", baseFontSize.getValue()); App.getFrame().workPanel.dailyItemsPanel.editorPanel.editor.editor.setAntiAlias(antialiasChB.isSelected()); App.getFrame().workPanel.dailyItemsPanel.editorPanel.initCSS(); App.getFrame().workPanel.dailyItemsPanel.editorPanel.editor.repaint(); Configuration.saveConfig(); } "	0	0	1	1	0	0
@Test public void Func1() throws Exception { Cache var1 = desk.getResponseCache(InstrumentationRegistry.getContext()); assertNotNull(var1); assertEquals(var1.getMaxSize(), Desk.CACHE_MAX_SIZE); } 	0	0	0	0	1	0
"private SootMethod Func1(StringBuffer var1) { if(declaringClass.getName().equals(""java.dyn.InvokeDynamic"")) { throw new IllegalStateException(""Cannot Func1 invokedynamic method references at compile time!""); } SootClass var2 = declaringClass; while(true) { if(var1 != null) var1.append( ""Looking in ""+var2+"" which has methods ""+var2.getMethods()+""\n"" ); SootMethod var3 = var2.getMethodUnsafe(getSubSignature()); if( var3 != null ) return checkStatic(var3); if(Scene.v().allowsPhantomRefs() && (var2.isPhantom() || Options.v().ignore_resolution_errors())) { SootMethod var4 = new SootMethod(name, parameterTypes, returnType, isStatic()?Modifier.STATIC:0); var4.setPhantom(true); var2.addMethod(var4); return checkStatic(var4); } if( var2.hasSuperclass() ) var2 = var2.getSuperclass(); else break; } var2 = declaringClass; while(true) { LinkedList<SootClass> var5 = new LinkedList<SootClass>(); var5.addAll( var2.getInterfaces() ); while( !var5.isEmpty() ) { SootClass var6 = var5.removeFirst(); if(var1 != null) var1.append( ""Looking in ""+var6+"" which has methods ""+var6.getMethods()+""\n"" ); SootMethod var3 = var6.getMethodUnsafe(getSubSignature()); if( var3 != null ) return checkStatic(var3); var5.addAll( var6.getInterfaces() ); } if( var2.hasSuperclass() ) var2 = var2.getSuperclass(); else break; } if(Options.v().allow_phantom_refs()) return createUnresolvedErrorMethod(declaringClass); if( var1 == null ) { ClassResolutionFailedException var7 = new ClassResolutionFailedException(); if(Options.v().ignore_resolution_errors()) G.v().out.println(var7.getMessage()); else throw var7; } return null; } "	0	0	0	0	1	0
public boolean Func1(final Collection<? extends Integer> var1) { return conjunction(var1, this::add); } 	0	0	0	0	1	0
"public List<Recipe> Func1(Integer var1, Integer var2, String var3, String var4, String var5, List<Integer> var6) { TypedQuery<Recipe> var7; if (!var6.isEmpty()) { var7 = JPA.em().createQuery(""SELECT m FROM "" + TABLE + "" m JOIN m.var6 t WHERE "" + Recipe.Search(var3) + "" AND "" + Recipe.IsVisible(var4) + "" AND "" + Recipe.WithDrafts(false) + "" AND t.id IN (:var6) ORDER BY "" + var5, Recipe.class).setParameter(""var6"", var6); } else { var7 = JPA.em().createQuery(""SELECT m FROM "" + TABLE + "" m WHERE "" + Recipe.Search(var3) + "" AND "" + Recipe.IsVisible(var4) + "" AND "" + Recipe.WithDrafts(false) + "" ORDER BY "" + var5, Recipe.class); } return var7.setFirstResult(var1 * var2).setMaxResults(var2).getResultList(); } "	0	0	0	0	1	0
public static void Func1(Context var1) { language = Settings.instance(var1).getIntFromString(Settings.DATA_LANGUAGE, ZH_CN); } 	0	0	0	0	1	0
"private PrintPayload Func1(PrinterSettings var1) { int var2 = var1.getPaperWidth(); Paint var3 = new Paint(); var3.setTextSize(30); float var4 = var3.descent() - var3.ascent(); Bitmap var5 = Bitmap.createBitmap(var2, 400, Bitmap.Config.ARGB_8888); Canvas var6 = new Canvas(); var6.setBitmap(var5); var3.setColor(Color.WHITE); var3.setStyle(Paint.Style.FILL); var6.drawPaint(var3); var3.setColor(Color.BLACK); var3.setTextAlign(Paint.Align.LEFT); var6.drawText(""left"", 20, var4 / 2 + 50, var3); var3.setTextAlign(Paint.Align.RIGHT); var6.drawText(""right"", var2 - 20, var4 / 2 + 50, var3); var3.setColor(Color.BLACK); for (int var7 = 0; var7 < 22; var7++) { Point var8 = new Point(10 + var7 * 21, 5); Point var9 = new Point(5 + var7 * 21, 10); Point var10 = new Point(10 + var7 * 21, 20); Point var11 = new Point(20 + var7 * 21, 10); Path var12 = new Path(); var12.setFillType(Path.FillType.EVEN_ODD); var12.moveTo(var8.x, var8.y); var12.lineTo(var9.x, var9.y); var12.lineTo(var10.x, var10.y); var12.lineTo(var11.x, var11.y); var12.lineTo(var8.x, var8.y); var12.close(); var6.drawPath(var12, var3); var12.reset(); var12.moveTo(var8.x, 295 + var8.y); var12.lineTo(var9.x, 295 + var9.y); var12.lineTo(var10.x, 295 + var10.y); var12.lineTo(var11.x, 295 + var11.y); var12.lineTo(var8.x, 295 + var8.y); var12.close(); var6.drawPath(var12, var3); } var3.setColor(Color.BLACK); var3.setTextAlign(Paint.Align.LEFT); var6.drawText(""3 circles"", 20, 140, var3); var3.setAlpha(255); var6.drawCircle(165, 120, 50, var3); var3.setAlpha(160); var6.drawCircle(265, 120, 30, var3); var3.setAlpha(127); var6.drawCircle(325, 120, 10, var3); Bitmap var13 = BitmapFactory.decodeResource(context.getResources(), R.drawable.bwlogotrans); var3.setTextAlign(Paint.Align.LEFT); var3.setTextSize(20); var6.drawText(""Powered By"", 20, 270, var3); var6.drawBitmap(var13, 140, 230, var3); var3.setColor(Color.BLACK); var6.save(); var3.setAlpha(127); var6.rotate(-45); var3.setTextSize(50); var3.setTextAlign(Paint.Align.CENTER); var6.drawText(""Sample Receipt"", 40, 300, var3); var6.restore(); PrintPayload var14 = new PrintPayload(); var14.append(var5); return var14; } "	0	0	0	0	1	0
"private PrintPayload Func1(PrinterSettings var1) { PrintPayload var2 = new PrintPayload(); var2.append(""Canvas printer test"").align(Alignment.CENTER); int var3 = 200; int var4 = 10; int var5 = var1.getPaperWidth() - 100; Bitmap var6 = Bitmap.createBitmap(var5, var3, Bitmap.Config.ARGB_8888); Canvas var7 = new Canvas(var6); Paint var8 = new Paint(); var8.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL)); var8.setTextSize(50); var8.setTextSkewX(-0.25f); var8.setAntiAlias(true); var8.setColor(Color.BLACK); var7.drawText(""Aevi"", 60, 80, var8); var8.setColor(Color.argb(255, 32, 32, 32)); // Thermal printer dark grey var7.drawText(""Aevi"", 90, 110, var8); var8.setColor(Color.argb(255, 40, 40, 40)); // Thermal printer light grey var7.drawText(""Aevi"", 120, 140, var8); var8.setColor(Color.BLACK); var8.setStyle(Paint.Style.STROKE); var8.setStrokeWidth(4); var8.setPathEffect(new DashPathEffect(new float[]{10, 20}, 0)); var7.drawRect(var4, var4, var5 - var4, var3 - var4, var8); var2.append(var6).align(Alignment.CENTER); var2.append(""End var7"").align(Alignment.CENTER); return var2; } "	0	0	0	0	1	0
public boolean Func1(ResponseFormatKey var1) throws ConnectionProviderException { return sosPersistingActivationManagerDao.Func1(var1); } 	0	0	0	0	1	0
public static ConnectionFactory Func1(String var1) { ConnectionPool var2 = Mockito.mock(ConnectionPool.class); Mockito.doAnswer(new Answer<Void>() { @Override public Void Func2(InvocationOnMock var3) throws Throwable { Connection<?> var4 = (Connection<?>) var3.getArguments()[0]; var4.getTransport().close(); return null; } }).when(var2).releaseConnection(Mockito.any()); IntegritySecretHelper var5 = new IntegritySecretHelper(); IntegritySecretHelperTestUtil.setMessageIntegritySecret(var5, var1); return new DefaultConnectionFactory(var2, var5, 10000); } 	0	0	0	0	1	0
"public static String Func1(Page var1, String var2) { WPCConfiguration var3 = var1.getWikipedia().getConfiguration(); boolean var4 = var3.getBoolean(WPCConfigurationBoolean.AUTO_LINK_DEFAULTSORT_CATEGORY); if (!var4) { return var2; } PageAnalysis var5 = var1.getAnalysis(var2, true); List<PageElementFunction> var6 = var5.getDefaultSorts(); if ((var6 == null) || (var6.isEmpty())) { return var2; } PageElementFunction var7 = var6.get(0); int var8 = var7.getBeginIndex(); int var9 = var7.getEndIndex(); List<PageElementCategory> var10 = var5.getCategories(); if ((var10 == null) || (var10.isEmpty())) { return var2; } PageElementCategory var11 = var10.get(0); int var12 = var11.getBeginIndex(); boolean var13 = var8 < var12; if (!var13) { int var14 = var11.getEndIndex(); while (var14 < var8) { char var15 = var2.charAt(var14); if ((var15 == ' ') || (var15 == '\n')) { var14++; } else if (var15 == '[') { PageElementCategory var16 = var5.isInCategory(var14); if (var16 == null) { return var2; } var14 = var16.getEndIndex(); } else { return var2; } } } else { int var14 = var9; boolean var17 = true; while (var17 && (var14 < var12)) { char var15 = var2.charAt(var14); if ((var15 != ' ') && (var15 != '\n')) { var17 = false; } var14++; } if (var17) { return var2; } var14 = var12; while ((var14 > 0) && var17) { char var15 = var2.charAt(var14); if (var15 == '\n') { var17 = false; } else if (var15 != ' ') { return var2; } var14--; } } int var18 = 0; if ((var8 <= 0) || (var2.charAt(var8 - 1) == '\n')) { if ((var9 < var2.length()) && (var2.charAt(var9) == '\n')) { var18 = 1; if ((var8 <= 1) || (var2.charAt(var8 - 2) == '\n')) { if ((var9 + 1 < var2.length() && (var2.charAt(var9 + 1) == '\n'))) { var18 = 2; } } } } StringBuilder var19 = new StringBuilder(var2.substring( 0, var13 ? var8 : var12)); if (var13) { var19.append(var2.substring(var9 + var18, var12)); } var19.append(var2.substring(var8, var9)); var19.append(""\n""); if (var13) { if (var12 < var2.length()) { var19.append(var2.substring(var12)); } } else { var19.append(var2.substring(var12, var8)); if (var9 + var18 < var2.length()) { var19.append(var9 + var18); } } var2 = var19.toString(); return var2; } "	0	0	0	0	0	1
"public static int Func1(String var1, String var2, int var3, Date var4) { String var5 = ""Insert into fonctionnalities(var1, var2, var3, var4) values (?,?,?,?);""; try { PreparedStatement var6 = DataBase.getConnection().prepareStatement( var5); var6.setString(1, var1); var6.setString(2, var2); var6.setInt(3, var3); var6.setDate(4, var4); var6.executeUpdate(); var6.close(); Statement var7 = DataBase.getConnection().createStatement(); ResultSet var8 = var7.executeQuery(""select last_insert_rowid();""); return var8.getInt(1); } catch (SQLException e) { e.printStackTrace(); System.err.println(var5); return -1; } } "	0	0	0	0	1	0
@Override public boolean Func1() { if (!isLastStage) { return flushBuffers(); } if (snapshotTraverser == null) { snapshotTraverser = traverseIterable(tsToKeyToAcc.entrySet()) .<Entry>flatMap(e -> traverseIterable(e.getValue().entrySet()) .map(e2 -> entry(new SnapshotKey(e.getKey(), e2.getKey()), e2.getValue())) ) .append(entry(Keys.NEXT_WIN_TO_EMIT, nextWinToEmit)) .onFirstNull(() -> snapshotTraverser = null); } return emitFromTraverserToSnapshot(snapshotTraverser); } 	0	0	0	0	1	0
"public static void Func1() { try { List<ModContainer> var1 = new ArrayList<>(); if (MOD_DIRECTORY.exists()) { File[] var2 = MOD_DIRECTORY.listFiles(); if (var2 != null) { for (File var3 : var2) { Launch.classLoader.addURL(var3.toURI().toURL()); } } } URL var4; Enumeration<URL> var5 = Launch.classLoader.getResources(""META-INF""); while (var5.hasMoreElements()) { var4 = var5.nextElement(); File var6 = new File(var4.getPath()); File[] var2 = var6.listFiles(); if (var2 != null) { for (File var7 : var2) { if (var7.getName().equals(""MANIFEST.MF"")) { FileInputStream var8 = new FileInputStream(var7); ModContainer var3 = loadMod(var7, new Manifest(var8)); if (var3 != null) { var1.add(var3); ID_MAP.put(var3.getModID(), var3); } var8.close(); } else if (var7.getName().endsWith("".at"")) { Multimap<String, String> var9 = OMLAccessTransformer.getEntries(); FileUtils.readLines(var7).var8().filter(line -> line.matches(""\\w+((\\.\\w+)+|)\\s+(\\w+(\\(\\S+|)|\\*\\(\\)|\\*)"")).forEach(line -> { String[] var10 = line.split("" ""); var9.put(var10[0], var10[1]); }); } } } } MODS.addAll(DependencySorter.sort(var1)); for (ModContainer var3 : MODS) { for (String var11 : var3.getDependencies()) { String[] var12 = var11.split(""\\s*:\\s*""); ModContainer var13 = ID_MAP.get(var12[0]); if (var13 == null) { throw new RuntimeException(""Missing dependency '"" + var11 + ""' for var3 '"" + var3.getName() + ""'.""); } else if (var12.length > 1 && !new Version(var13.getVersion()).atLeast(new Version(var12[1]))) { throw new RuntimeException(""Outdated dependency '"" + var11 + ""' for var3 '"" + var3.getName() + ""'. Expected version '"" + var12[1] + ""', but got version '"" + var13.getVersion() + ""'.""); } } } } catch (Exception e) { throw new RuntimeException(e); } } "	0	0	1	1	1	0
@Override public View Func1(final Context var1, int var2, BaseAdapter var3) { if (animationState) { return var8; } var8 = View.inflate(var1, R.layout.brick_set_look, null); var8 = BrickViewProvider.setAlphaOnView(var8, alphaValue); setCheckboxView(R.var10.brick_set_look_checkbox); final Spinner var4 = (Spinner) var8.findViewById(R.var10.brick_set_look_spinner); final ArrayAdapter<LookData> var5 = createLookAdapter(var1); SpinnerAdapterWrapper var6 = new SpinnerAdapterWrapper(var1, var5); var4.setAdapter(var6); var4.setOnItemSelectedListener(new OnItemSelectedListener() { @Override public void Func2(AdapterView<?> var7, View var8, int var9, long var10) { if (var9 == 0) { look = null; } else { look = (LookData) var7.getItemAtPosition(var9); oldSelectedLook = look; } } @Override public void Func3(AdapterView<?> var11) { } }); setSpinnerSelection(var4); if (getSprite().getName().equals(var1.getString(R.string.background))) { TextView var12 = (TextView) var8.findViewById(R.var10.brick_set_look_and_wait); var12.setText(R.string.brick_set_background); } if (!wait) { var8.findViewById(R.var10.brick_set_look_and_wait).setVisibility(View.GONE); } return var8; } 	0	0	0	0	1	0
"private static String Func1(Material var1) { String var2 = var1.toString().toLowerCase().replaceAll(""block"", """"); if (var2.contains(""sign"")) { var2 = ""Sign""; } if (var2.contains(""furnace"")) { var2 = ""furnace""; } if (var2.endsWith(""_"")) { var2 = var2.substring(0, var2.length() - 1); } return var2.toLowerCase(); } "	0	0	1	0	0	0
private void Func1(STextualDS var1){ XMLStreamWriter var2 = TCFs.peek(); try { var2.writeStartElement(NS_TC, TAG_TC_TEXT, NS_VALUE_TC); var2.writeCharacters(var1.getSText()); var2.writeEndElement(); } catch (XMLStreamException e) {} var2 = null; } 	0	0	0	0	1	0
private String Func1() { return getProject().findMember(BUGS_XML_FILE).getProjectRelativePath().toOSString(); } 	0	0	1	0	1	0
Uri Func1(@Nullable String var1, String var2) { Builder var3 = devicesBaseUri.buildUpon().appendPath(var2); if (truthy(var1)) { var3.appendPath(var1); } return var3.build(); } 	0	0	0	0	1	0
private int Func1(long var1, long var2) { if (((var2 &= var1)) == 0L) return jjStartNfa_0(6, 0L, 0L, var1); try { curChar = input_stream.readChar(); } catch(java.io.IOException e) { jjStopStringLiteralDfa_0(7, 0L, 0L, var2); return 8; } switch(curChar) { case 111: return jjMoveStringLiteralDfa9_0(var2, 0x10000L); default : break; } return jjStartNfa_0(7, 0L, 0L, var2); } 	0	0	0	0	1	0
private static void Func1(byte[] var1) { for (int var2 = 0; var2 < var1.length; var2++) { var1[var2] = 0; } } 	0	0	1	0	0	0
"@RequestMapping(value = ""/browse/transformation_details"", method = { RequestMethod.GET }) public String Func1(Model var1, @RequestParam String var2) { ATLTransformation var3 = aTLTransformationService.findOne(var2); var1.addAttribute(""var3"", var3); String var4 = gridFileMediaService.getFilePath(var3); File var5 = new File(var4); var1.addAttribute(""var5"", var5); return ""public.browse.transformation_details""; } "	0	0	0	0	1	0
"@FXML private void Func1(MouseEvent var1) throws IOException { Parent var2 = FXMLLoader.load(getClass().getResource(""view/Store.fxml"")); Scene var3 = new Scene(var2); Stage var4 = (Stage) ((Node) var1.getSource()).getScene().getWindow(); var4.setScene(var3); var4.show(); } "	0	0	0	0	1	0
"private static String Func1(final String... var1) throws IOException { Objects.requireNonNull(var1); try { Log.trace(""Running: "", var1); Process var2 = new ProcessBuilder(var1).redirectInput(Redirect.INHERIT).start(); String var3 = ExecHelper.waitAndCapture(var2); Log.trace(""Result: "", var3); if (var2.exitValue() != 0) { throw new IOException(""Error executing '"" + String.join("" "", var1) + ""': "" + var3); } return var3; } catch (InterruptedException e) { throw (IOException) new InterruptedIOException(""Command interrupted"").initCause(e); } } "	0	0	0	0	1	0
"private Terminal Func1() throws IOException { String var1 = this.var1; if (var1 == null) { var1 = ""JLine terminal""; } String var2 = this.var2; if (var2 == null) { var2 = Charset.defaultCharset().var1(); } String var3 = this.var3; if (var3 == null) { var3 = System.getenv(""TERM""); } if ((system != null && system) || (system == null && in == null && out == null)) { if (OSUtils.IS_CYGWIN) { Pty var4 = CygwinPty.current(); return new PosixSysTerminal(var1, var3, var4, var2, nativeSignals, signalHandler); } else if (OSUtils.IS_WINDOWS) { if (useJna()) { try { return new JnaWinSysTerminal(var1, nativeSignals, signalHandler); } catch (Throwable t) { Log.debug(""Error creating JNA based var4"", t.getMessage()); } } return new JansiWinSysTerminal(var1, nativeSignals, signalHandler); } else { Pty var4 = null; if (useJna()) { try { var4 = JnaNativePty.current(); } catch (Throwable t) { Log.debug(""Error creating JNA based var4"", t.getMessage()); } } if (var4 == null) { try { var4 = ExecPty.current(); } catch (IOException e) { Log.debug(""Error creating exec based var4"", e.getMessage()); } } if (var4 != null) { return new PosixSysTerminal(var1, var3, var4, var2, nativeSignals, signalHandler); } else { return new DumbTerminal(var1, var3, new FileInputStream(FileDescriptor.in), new FileOutputStream(FileDescriptor.out), var2, signalHandler); } } } else { if (useJna()) { try { Pty var4 = JnaNativePty.open(attributes, size); return new PosixPtyTerminal(var1, var3, var4, in, out, var2, signalHandler); } catch (Throwable t) { Log.debug(""Error creating JNA based var4"", t.getMessage()); } } return new ExternalTerminal(var1, var3, in, out, var2, signalHandler); } } "	1	0	1	0	0	0
private void Func1() { LinearLayout var1 = (LinearLayout)realView.findViewById(R.id.home_no_data); LinearLayout var2 = (LinearLayout)realView.findViewById(R.id.home_with_data); var2.setVisibility(View.VISIBLE); var1.setVisibility(View.GONE); initPieChart(realView); } 	0	0	0	0	1	0
"public void Func1(Road var1) throws Exception { if (this.location.getY() == var1.getEndLocation().getY() && (this.location.getX() + 1  == var1.getEndLocation().getX() || this.location.getX() + 1 == var1.getStartLocation().getX())) { this.var1 = var1; } else throw new IntersectionSetupException(""Road end location coordinates must match with Intersection""); } "	1	1	1	1	0	0
"@GetMapping(""/Func1"") public String Func1(@RequestParam(value = ""var1"", required = false, defaultValue = ""0"") final int var1, final Model var2) { final Page<Abweichung> var3 = abweichungService.findAbweichungen(var1); var2.addAttribute(""var3"", var3); log.debug(""totalElement={}, totalPages={}, hasPrevious={}, hasNext={}"", var3.getTotalElements(), var3.getTotalPages(), var3.hasPrevious(), var3.hasNext()); return ""Func1""; } "	0	0	1	1	0	0
private static List<CaptureFormat.FramerateRange> Func1( Range<Integer>[] var1, int var2) { final List<CaptureFormat.FramerateRange> var3 = new ArrayList<CaptureFormat.FramerateRange>(); for (Range<Integer> var4 : var1) { var3.add(new CaptureFormat.FramerateRange( var4.getLower() * var2, var4.getUpper() * var2)); } return var3; } 	0	0	1	1	0	0
"private static Collection<Class<?>> Func1(final List<JqJson> var1) throws IOException { final Set<String> var2 = new HashSet<>(); for (final JqJson var3 : var1) { if (var3.Func1 == null) continue; for (final String var4 : var3.Func1) { var2.add(var4); } } final List<Class<?>> var5 = new ArrayList<>(); for (final String var4 : var2) { try { var5.add(Class.forName(var4)); } catch (Throwable th) { System.err.println(""Failed to load class "" + var4 + "": "" + th.getMessage()); continue; } } return var5; } "	0	0	0	0	1	0
@Override public int Func1(final RankedProvider<T> var1, final RankedProvider<T> var2) { return (getPriority(var1) - getPriority(var2)) * order.ordering; } 	1	0	1	1	1	0
@Override public byte[] Func1(byte[] var1) { return mac.Func1(var1); } 	0	0	0	0	1	0
@Override public synchronized void Func1() { if (mState != State.STOPPED) { return; } mState = State.WAITING; resolver.start(); } 	0	0	1	0	1	0
"public GitClient Func1(LogData var1) { ArrayBuilder<String> var2 = new ArrayBuilder<String>(String.class).add(""Func1""); if (var1.getMaxCount() != null) { var2.add(""--max-count="" + var1.getMaxCount()); } String var3 = invokeGenerically(GIT_LOG_PROCESS_NAME, true, var2.toArray()); LineIterator var4 = new LineIterator(new StringReader(var3)); while (var4.hasNext()) { parseLogItem(var4, var1); } return this; } "	0	0	0	0	1	0
"public GitClient Func1(BranchDeletionData var1) { invokeGenerically(GIT_DELETE_BRANCH_PROCESS_NAME, true, ""branch"", ""--delete"", var1.getBranchName()); return this; } "	0	0	0	0	1	0
"public GitClient Func1(ConfigData var1) { ArrayBuilder<String> var2 = new ArrayBuilder<String>(String.class).add(""Func1""); if (!StringUtil.isEmpty(var1.getKey())) { var2.add(var1.getKey()); if (!StringUtil.isEmpty(var1.getValue())) { var2.add('""' + var1.getValue() + '""'); if (!StringUtil.isEmpty(var1.getValueRegex())) { var2.add(var1.getValueRegex()); } } } invokeGenerically(GIT_CONFIG_PROCESS_NAME, true, var2.toArray()); return this; } "	0	0	0	0	1	0
"public GitClient Func1(CommitData var1) { ArrayBuilder<String> var2 = new ArrayBuilder<String>(String.class); var2.add(""Func1""); if (Boolean.parseBoolean(var1.getAllowEmpty())) { var2.add(""--allow-empty""); } if (!StringUtil.isEmpty(var1.getMessage())) { var2.add(""-m"").add(quoteArg(var1.getMessage())); } invokeGenerically(GIT_COMMIT_PROCESS_NAME, true, var2.toArray()); return this; } "	0	0	0	0	1	0
"public GitClient Func1(VersionData var1) { String var2 = invokeGenerically(GIT_VERSION_PROCESS_NAME, true, ""--Func1""); String var3 = extractVersionNumber(var2); var1.setVersionNumber(var3); return this; } "	0	0	0	0	1	0
"public GitClient Func1(ResetData var1) { ArrayBuilder<String> var2 = new ArrayBuilder<String>(String.class).add(""reset"").add(""--hard""); if (var1.getCommit() != null) { var2.add(var1.getCommit()); } invokeGenerically(GIT_RESET_HARD_PROCESS_NAME, true, var2.toArray()); return this; } "	0	0	0	0	1	0
private String Func1(String var1, GitClient var2) throws IOException { File var3 = var3(var1, var2); String var4 = IOUtil.getContentOfURI(var3.getAbsolutePath()); return var4; } 	0	0	0	0	1	0
private boolean Func1(int var1) { return hasHeaderView() && var1 == 0; } 	0	0	0	1	0	0
public WeakHashMap<WrappedPosition, Integer> Func1() { LinkedList<WeakReference<WrappedPosition>> var1 = new LinkedList<WeakReference<WrappedPosition>>(); synchronized(_wrappedPosListLock) { if (_wrappedPosList == null) { _wrappedPosList = new LinkedList<WeakReference<WrappedPosition>>(); } WeakHashMap<WrappedPosition, Integer> var2 = new WeakHashMap<WrappedPosition, Integer>(_wrappedPosList.size()); for (WeakReference<WrappedPosition> var3: _wrappedPosList) { Position var4 = var3.get();  // factored out of loop body that was unsafe because GC could happen! if (var4 != null)  { var1.add(var3); var2.put(var4, var4.getOffset()); } } _wrappedPosList.clear(); _wrappedPosList = var1; return var2; } } 	0	0	0	0	1	0
"@RequestMapping( value=""/states"", method=RequestMethod.GET, produces={ ""application/json"" } ) @ResponseStatus(value = HttpStatus.OK) public List<IdAndPlayerStateResponse> Func1() { log.debug(""Mapped GET /var3/states""); List<IdAndPlayerStateResponse> var1 = new ArrayList<IdAndPlayerStateResponse>(); List<Player> var2 = playerRepository.getAllPlayers(); if(var2 != null) { for(Player var3 : var2) { String var4 = JsonUtils.objectToJson(var3); if(var4 != null) { log.trace(""Processing Player: {}"", var4); } IdAndPlayerStateResponse var5 = new IdAndPlayerStateResponse(); var5.id = var3.getId(); var5.state = var3.getState(); var1.add(var5); } } String var4 = JsonUtils.objectToJson(var1); if(var4 != null) { log.debug(""Returning playerResponse: {}"", var4); } return var1; } "	0	0	0	0	1	0
"protected final void Func1() { finished = true; if (connectTimeoutFuture != null) { connectTimeoutFuture.cancel(false); } if (connectPromise.trySuccess(ctx.channel())) { boolean var1 = true; var1 &= safeRemoveEncoder(); ctx.fireUserEventTriggered( new ProxyConnectionEvent(protocol(), authScheme(), proxyAddress, destinationAddress)); var1 &= safeRemoveDecoder(); if (var1) { writePendingWrites(); if (flushedPrematurely) { ctx.flush(); } } else { Exception var2 = new ProxyConnectException( ""failed to remove all codec handlers added by the proxy handler; bug?""); failPendingWrites(var2); ctx.fireExceptionCaught(var2); ctx.close(); } } } "	0	0	1	0	0	0
"private boolean Func1(Vertex var1) { List<Float> var2 = Lists.newArrayList(); var2.add(getEdgeTargetQuality( ""sentBy"", var1.getId(), Constants.EMPLOYEE_MAP)); var2.add(getEdgeTargetQuality( ""sentTo"", var1.getId(), Constants.CUSTOMER_MAP)); return config.happensTransitionConfiguration(var2, ""SalesQuotation"", ""confirmationProbability""); } "	0	0	1	0	0	0
"public synchronized void Func1(JMSException var1) { System.out.println(""JMS Exception occured.  Shutting down client.""); } "	0	0	1	0	1	0
private FileSystemWalkResults Func1(final boolean var1, final Object var2, final String... var3) { final List<BiConsumer<String, Object>> var4 = new ArrayList<>(); FileNode var5 = root; var4.addAll(var5.getEventHandlers()); if (var2 != null) var5.setMostRecentDataOnBranch(var2); for (final String var6 : PathBuilder.decomposePath(var3)) { var5 = var5.getChild(var6, var1); if (var5 == null) return new FileSystemWalkResults(null, var4); if (var2 != null) var5.setMostRecentDataOnBranch(var2); var4.addAll(var5.getEventHandlers()); } if (var2 != null) var5.setData(var2); return new FileSystemWalkResults(var5, var4); } 	0	0	1	0	1	0
"private void Func1(Response var1) { boolean var2 = isBlobResponse(var1); emitStateEvent(getResponseInfo(var1, var2)); switch (responseType) { case KeepInMemory: try { if(var2 && options.auto) { String var3 = RNFetchBlobFS.getTmpPath(ctx, taskId); InputStream var4 = var1.body().byteStream(); FileOutputStream var5 = new FileOutputStream(new File(var3)); int var6; byte[] var7 = new byte[10240]; while ((var6 = var4.var6(var7)) != -1) { var5.write(var7, 0, var6); } var4.close(); var5.flush(); var5.close(); callback.invoke(null, RNFetchBlobConst.RNFB_RESPONSE_PATH, var3); } else { byte[] var8 = var1.body().bytes(); CharsetEncoder var9 = Charset.forName(""UTF-8"").newEncoder(); if(responseFormat == ResponseFormat.BASE64) { callback.invoke(null, RNFetchBlobConst.RNFB_RESPONSE_BASE64, android.util.Base64.encodeToString(var8, Base64.NO_WRAP)); return; } try { var9.encode(ByteBuffer.wrap(var8).asCharBuffer()); String var10 = new String(var8); callback.invoke(null, RNFetchBlobConst.RNFB_RESPONSE_UTF8, var10); } catch(CharacterCodingException ignored) { if(responseFormat == ResponseFormat.UTF8) { callback.invoke(null, RNFetchBlobConst.RNFB_RESPONSE_UTF8, """"); } else { callback.invoke(null, RNFetchBlobConst.RNFB_RESPONSE_BASE64, android.util.Base64.encodeToString(var8, Base64.NO_WRAP)); } } } } catch (IOException e) { callback.invoke(""RNFetchBlob failed to encode response data to BASE64 string."", null); } break; case FileStorage: try { var1.body().bytes(); } catch (Exception ignored) { } this.destPath = this.destPath.replace(""?append=true"", """"); callback.invoke(null, RNFetchBlobConst.RNFB_RESPONSE_PATH, this.destPath); break; default: try { callback.invoke(null, RNFetchBlobConst.RNFB_RESPONSE_UTF8, new String(var1.body().bytes(), ""UTF-8"")); } catch (IOException e) { callback.invoke(""RNFetchBlob failed to encode response data to UTF8 string."", null); } break; } var1.body().close(); releaseTaskResource(); } "	1	0	1	1	1	0
private void Func1() { if (!((bitField0_ & 0x00000020) == 0x00000020)) { traces_ = new java.util.ArrayList<org.powerapi.module.libpfm.PayloadProtocol.String>(traces_); bitField0_ |= 0x00000020; } } 	0	0	0	0	1	0
"private static String Func1(Color var1) { StringBuilder var2 = new StringBuilder(); var2.append(""rgb(""); var2.append(Integer.toString(var1.getRed())); var2.append("", ""); var2.append(Integer.toString(var1.getGreen())); var2.append("", ""); var2.append(Integer.toString(var1.getBlue())); var2.append("")""); return var2.toString(); } "	0	0	1	1	0	0
@Override public void Func1() { if (!matchResult.isDraw()) { Club var1 = matchResult.var1(); boolean var2 = var1.nameEquals(userClub); finalScoreIcon = var2 ? R.drawable.ic_mood_black_48px : R.drawable.ic_sentiment_very_dissatisfied_black_48px; if (var2) { finalScoreMessage = getString(R.string.var1); } else { finalScoreMessage = getString(R.string.defeated); } } else { finalScoreIcon = R.drawable.ic_sentiment_neutral_black_48px; finalScoreMessage = getString(R.string.draw); } if (BuildConfig.DEBUG) { Log.d(TAG, finalScoreMessage); } startTimer(); } 	0	0	0	0	1	0
"@Override public ActionResult<ItemStack> Func1(World var1, EntityPlayer var2, EnumHand var3) { ItemStack var4 = var2.getActiveItemStack(); if (var2.isSneaking()) { if (!var1.isRemote) { DebugMode var5 = this.changeDebugMode(var4); var2.sendMessage(new TextComponentString(""Set debug var5 to "" + var5.debugName())); } } else { this.getDebugMode(var4).debugActionClicked(var4, var1, var2, var3); } return new ActionResult<>(EnumActionResult.PASS, var4); } "	0	0	0	0	1	0
@Override public CloseableIterator<Atom> Func1(Atom var1) { String var2 = containsAtomIntoCypherQuery(var1, false); if (LOGGER.isDebugEnabled()) { LOGGER.debug(var2); } ResourceIterator<Map<String, Object>> var3 = this.cypherEngine.execute(var2).iterator(); return new Neo4jAtomIterator(this.getTransaction(), var3); } 	0	0	0	0	1	0
public void Func1() { int var1 = myController.getEdgeLength(); printColumnIdentifiers(var1); for(int var2 = 0; var2 < var1; var2++) { printLine(var1); StringBuilder var3 = new StringBuilder(printLeadingNumber(var2 + 1, var1)); for(int var4 = 0; var4 < var1; var4++) { String var5 = myController.getIsOccupiedByPlayer(var2, var4); char var6 = var5.isEmpty() ? ' ' : var5.charAt(0); var3.append(drawSpot(var6)); } logger.info(var3); } printLine(var1); printPoints(); } 	0	0	1	0	1	0
"private static int Func1(Context var1, String[] var2) { String var3 = FotoSql.getWhereInFileNames(var2); int var4 = 0; try { var4 = var1.getContentResolver().delete(FotoSql.SQL_TABLE_EXTERNAL_CONTENT_URI, var3, null); if (Global.debugEnabled) { Log.d(Global.LOG_CONTEXT, CONTEXT + ""Func1(len="" + var2.length + "", files='"" + var2[0] + ""'...) result count="" + var4); } } catch (Exception ex) { Log.e(Global.LOG_CONTEXT, CONTEXT + ""Func1("" + var3 + "") error :"", ex); } return var4; } "	0	0	0	0	1	0
"private void Func1(SelectedItems var1, StringBuffer var2) { if (var2 != null) { Log.w(Global.LOG_CONTEXT, mDebugPrefix + var2); } if (var1 != null) { QueryParameter var3 = new QueryParameter(); FotoSql.setWhereSelection(var3, var1); final Activity var4 = getActivity(); if (var4 != null) { int var5 = var4.getContentResolver().delete(FotoSql.SQL_TABLE_EXTERNAL_CONTENT_URI, var3.toAndroidWhere(), null); if (var2 != null) { Log.w(Global.LOG_CONTEXT, mDebugPrefix + "" deleted "" + var5 + "" duplicates\n\tDELETE ... WHERE "" + var3.toAndroidWhere()); } if (var5 > 0) { requery(""after delete duplicates""); // content has changed: must reload } } } } "	0	0	0	0	1	0
"@Test public void Func1() { PipelineConfig var1 = new PipelineConfig(new CaseInsensitiveString(""p""), new MaterialConfigs()); var1.validateTree(PipelineConfigSaveValidationContext.forChain(true, ""group"", new BasicCruiseConfig(new BasicPipelineConfigs(""group"", new Authorization())), var1)); assertThat(var1.errors().on(""pipeline""), is(""Pipeline 'p' does not have any stages configured. A pipeline must have at least one stage."")); } "	0	0	0	0	1	0
@Override @SideOnly(Side.CLIENT) protected boolean Func1(char var1, int var2) { if (textField.textboxKeyTyped(var1, var2)) { updateRecipes(true); return true; } else { return super.Func1(var1, var2); } } 	0	0	0	0	1	0
"public void Func1(String var1, String var2, String var3, long var4, long var5) throws MalformedURLException { File var6 = new File(Environment.getExternalStorageDirectory() + syncDirectory + ""/"" + var2); URL var7 = new URL(""http://""+ var3 +"":8080/getFile/"" + var1); ResumeDownloadThread var8 = new ResumeDownloadThread(var7 , var1, var6, var4, var5); Thread var9 = new Thread(var8); ongoingDownloadThreads.put(var9, var8); Log.d(""DEBUG:"", ""MISSING FILES ONGOING"" + ongoingDownloadThreads.keySet()); var9.start(); } "	0	0	0	0	1	0
"@Override public void Func1(int var1, int var2, String var3) { String var4 = var2 + "" : "" + var3; if(var1 == UMLog.DEBUG) { Log.d(LOGTAG,var4); }else if(var1 == UMLog.INFO) { Log.i(LOGTAG, var4); }else if(var1 == UMLog.CRITICAL) { Log.e(LOGTAG, var4); }else if(var1 == UMLog.VERBOSE) { Log.v(LOGTAG, var4); }else if(var1 == UMLog.ERROR) { Log.e(LOGTAG, var4); } } "	0	0	0	0	1	0
@View public Response Func1(ApplicationContext var1, UserContext var2) { if(CommonsUtils.isFeatureActive(NotificationUtils.FEATURE_NAME) == false) { return redirectToHomePage(); } if (bundle == null) { locale = var2.getLocale(); bundle = var1.resolveBundle(locale); } return Func1.ok(parameters()); } 	0	0	0	0	1	0
"@Override public T Func1(T var1) { String var2 = jcrom.getPath(var1); try { checkPath(var2); } catch (RepositoryException e) { throw new JcrMappingException(""Unable to create the parent var2 "" + var2, e); } String var3 = jcrom.getName(var1); if (var2 != null) { try { if (repository.getSession().nodeExists(var2 + ""/"" + var3)) { return dao.update(var1); } } catch (RepositoryException e) { throw new JcrMappingException(""Unable to Func1 the entity "" + var2, e); } } return dao.create(var1); } "	0	0	0	0	1	0
"protected String Func1(String var1, String var2, String var3, String var4) { String var5 = getDownloadHttpResponse(var1, var2, var3, var4); try { JSONObject var6 = new JSONObject(var5); String var7 = var6.getString(""data"") .replace(""\\/"", ""/""); LOGGER.debug(""var7="" + var7); if (var7 != null && !var7.isEmpty()) { LOGGER.debug(""Image "" + var2 + ""download link"" + var7 + "" obtained""); return var7; } } catch (Exception e) { LOGGER.error(""Error while formating request var5"", e); } return null; } "	0	0	0	0	1	0
public boolean Func1( Point var1, Point[][] var2 ){ return isAliveRecursive(var1, var2, new HashSet<Point>(){}); } 	0	0	1	0	1	0
"@Override public RecyclerView.ViewHolder Func1(ViewGroup var1, int var2) { View var3; if (this.disturbances == null || this.disturbances.length == 0) { var3 = LayoutInflater.from(var1.getContext()).inflate(R.layout.listview_no_disturbances, var1, false); return new NoResultsViewHolder(var3); } if (!PreferenceManager.getDefaultSharedPreferences(context).getBoolean(""use_card_layout"", false)) { var3 = LayoutInflater.from(var1.getContext()).inflate(be.hyperrail.android.R.layout.listview_disturbance, var1, false); } else { var3 = LayoutInflater.from(var1.getContext()).inflate(be.hyperrail.android.R.layout.cardview_disturbance, var1, false); } return new DisturbanceViewHolder(var3); } "	0	0	0	0	1	0
"@Override public void Func1(Page var1, TemplateContext var2, TemplateContext var3) { HomepageSite var4 = var4(var1); Person var5 = var5(var1); var3.put(""ownerName"", var5.getProfile().getDisplayName()); if (var4.getShowPhoto()) { var3.put(""ownerAvatarUrl"", var5.getUser().getProfile().getAvatarUrl()); } Employee var6 = var5.getEmployee(); if (var6 != null) { Contract var7 = var5.getEmployee().getCurrentWorkingContract(); if (var7 != null) { if (var4.getShowUnit()) { var3.put(""workingUnit"", var7.getWorkingUnit()); } } } if (var4.getShowCategory() && var5.getTeacher() != null && var5.getTeacher().isActiveContractedTeacher() && var5.getTeacher().getCategory() != null) { var3.put(""teacherCategory"", var5.getTeacher().getCategory().getName().getContent()); } if (var4.getShowResearchUnitHomepage()) { List<ResearchUnit> var8 = ResearchUnit.getWorkingResearchUnits(var5); if (var8.isEmpty()) { if (var5.getTeacher() != null && var5.getEmployee().getCurrentWorkingContract() != null) { var3.put(""researchUnitName"", var4.getResearchUnitName()); var3.put(""researchUnitHomepage"", var4.getResearchUnitHomepage()); } } else { var3.put(""workingResearchUnits"", var8); } } if (var4.getShowActiveStudentCurricularPlans()) { var3.put(""activeCurricularPlans"", var5.getActiveStudentCurricularPlansSortedByDegreeTypeAndDegreeName()); } if (var4.getShowCurrentAttendingExecutionCourses()) { var3.put( ""attendingCourses"", var5.getCurrentAttends().stream().sorted(Attends.ATTENDS_COMPARATOR_BY_EXECUTION_COURSE_NAME) .collect(Collectors.toList())); } if (var4.getShowAlumniDegrees()) { var3.put(""completedCurricularPlans"", getCompletedStudentCurricularPlansSortedByDegreeTypeAndDegreeName(var5)); } var3.put(""emails"", getSortedFilteredContacts(var5.getEmailAddresses())); var3.put(""personalPhones"", getSortedFilteredContacts(var5.getPhones(), PartyContactType.PERSONAL)); var3.put(""workPhones"", getSortedFilteredContacts(var5.getPhones(), PartyContactType.WORK)); var3.put(""mobilePhones"", getSortedFilteredContacts(var5.getMobilePhones())); var3.put( ""websites"", getSortedFilteredContacts(var5.getWebAddresses()).stream().map(WebAddress.class::cast) .filter(addr -> !addr.getUrl().equals(var1.getSite().getFullUrl())).collect(Collectors.toList())); if (var4.getShowCurrentExecutionCourses() && var5.getTeacher() != null && var5.getEmployee().getCurrentWorkingContract() != null) { var3.put(""teachingCourses"", var5.getTeacher().getCurrentExecutionCourses()); } } "	1	0	1	0	0	0
public static final <T extends Component> void Func1(final IAuthorizationCondition var1, final Class<T> var2) { if (var1.isAuthorized()) { authorizeAll(var2); } } 	0	0	1	1	0	0
@Override public ApexStateInternals<K> Func1(K var1) { final Slice var2; try { var2 = (var1 != null) ? new Slice(CoderUtils.encodeToByteArray(keyCoder, var1)) : new Slice(null); } catch (CoderException e) { throw new RuntimeException(e); } Table<String, String, byte[]> var3 = perKeyState.get(var2); if (var3 == null) { var3 = HashBasedTable.create(); perKeyState.put(var2, var3); } return new ApexStateInternals<>(var1, var3); } 	0	0	0	1	1	0
"public void Func1(ServletRequest var1, ServletResponse var2, FilterChain var3) throws IOException, ServletException{ HttpServletRequest var4 = (HttpServletRequest)var1; HttpServletResponseWrapper var5 = new HttpServletResponseWrapper((HttpServletResponse) var2); String var6 = config.getInitParameter(""var6""); String var7 = config.getInitParameter(""var7""); String var8 = config.getInitParameter(""var8""); String var9 = var4.getContextPath() + config.getInitParameter(""var9""); if(var7.toUpperCase().equals(""Y"")){ var3.Func1(var1,  var2); return; } String[] var10 = var6.split("";""); String[] var11 = var8.split("";""); String var12 = ((HttpServletRequest) var1).getServletPath(); if(var12.endsWith("".css"")||var12.endsWith("".js"")||var12.endsWith("".jpg"")||var12.endsWith("".jpeg"")||var12.endsWith("".png"")||var12.endsWith("".ttf"")||var12.endsWith("".woff2"")||var12.endsWith("".woff"")){ var3.Func1(var1, var2); return; } if(this.isContains(var4.getRequestURI(), var10)){ var3.Func1(var1, var2); return; } User var13 = (User)var4.getSession().getAttribute(""var13""); if(var13 == null){ var5.sendRedirect(var9); return; }else if(var13.getRole().equals(""var13"") && this.isContains(var4.getRequestURI(), var11)){ var5.sendRedirect(""index.jsp""); return; } else{ var3.Func1(var1,  var2); return; } } "	0	0	1	0	1	0
public static void Func1() { skippedJobs.mark(); } 	0	0	1	0	1	0
static Builder Func1() { return create(false, Gendreau06ObjectiveFunction.instance(), 1L, DEFAULT_SOLVER_XML_RESOURCE, null); } 	0	1	0	0	0	0
@Override protected List<CalendarDescriptor> Func1(Void... var1) { if (!checkPermission(Manifest.permission.READ_CALENDAR)) { return null; } try { CalendarLoader var2 = new CalendarLoader(getActivity()); return var2.getAvailableCalendars(); } catch (Exception e) { return null; } } 	0	0	1	0	1	0
private boolean Func1(String var1) { int var2 = ActivityCompat.checkSelfPermission(getActivity(), var1); return var2 == PackageManager.PERMISSION_GRANTED; } 	0	0	1	0	1	0
private void Func1(final ServiceCallback<T> var1) { DAGNode<TaskItem<T>> var2 = dag.getNext(); while (var2 != null) { ServiceCall var3 = var2.data().executeAsync(taskCallback(var2, var1)); this.parallelServiceCall.addCall(var3); var2 = dag.getNext(); } } 	1	0	1	1	1	0
"@Test public void Func1() throws Exception { stubGrouperCall(""soap/GetGroups_Success_Response.xml"", URN_GET_GROUPS_LITE); stubGrouperCall(""soap/GetPrivileges_Success_Response.xml"", URN_GET_GROUPER_PRIVILEGES_LITE); List<Group> var1 = subject.getGroupMemberships(""urn:collab:person:example.com:admin"", true); Thread.sleep(1000); assertTrue(var1.size() == 12); Group var2 = var1.get(0); assertEquals(var2.id,""urn:collab:group:surfnet.nl:etc:sysadmingroup""); assertEquals(var2.displayName,""sysadmingroup""); assertEquals(var2.description,""system administrators with all privileges""); assertEquals(var2.membership.basic,""admin""); Group var3 = var1.get(1); assertEquals(var3.id,""urn:collab:group:surfnet.nl:nl:surfnet:diensten:test_groep_1""); assertEquals(var3.displayName,""test_groep_1""); assertEquals(var3.description,""test groep 1""); assertEquals(var3.membership.basic,""admin""); } "	0	0	1	0	1	0
"private boolean Func1() { return StringUtil.isDefined(modelId) && modelId.endsWith("".xml""); } "	0	0	1	1	0	0
"private static void Func1() { File var1 = new File(""../../conf/"" + serverName + ""/log4j.reindex.properties""); if (var1.exists()) { PropertyConfigurator.configure(var1.getAbsolutePath()); } else { System.out.println(""Could not find log4j configuration "" + var1.toString()); } logger.info(""Starting Reindex for "" + serverName); String var2 = ""../../conf/"" + serverName + ""/config.ini""; File var3 = new File(var2); if (!var3.exists()) { logger.error(""Could not find confiuration file "" + var2); System.exit(1); } configIni = new Ini(); try { configIni.load(new FileReader(var3)); } catch (InvalidFileFormatException e) { logger.error(""Configuration file is not valid.  Please check the syntax of the file."", e); } catch (FileNotFoundException e) { logger.error(""Configuration file could not be found.  You must supply a configuration file in conf called config.ini."", e); } catch (IOException e) { logger.error(""Configuration file could not be read."", e); } solrPort = configIni.get(""Reindex"", ""solrPort""); if (solrPort.length() == 0) { logger.error(""You must provide the port where the solr index is loaded in the import configuration file""); System.exit(1); } libraryAbbrev = configIni.get(""Reindex"", ""libraryAbbrev""); String var4 = configIni.get(""Reindex"", ""updateSolr""); if (var4 != null){ updateSolr = Boolean.parseBoolean(var4); } String var5 = configIni.get(""Reindex"", ""updateResources""); if (var5 != null){ updateResources = Boolean.parseBoolean(var5); } String var6 = configIni.get(""Reindex"", ""exportStrandsCatalog""); if (var6 != null){ exportStrandsCatalog = Boolean.parseBoolean(var6); } String var7 = configIni.get(""Reindex"", ""exportOPDSCatalog""); if (var7 != null){ exportOPDSCatalog = Boolean.parseBoolean(var7); } String var8 = configIni.get(""Reindex"", ""loadEContentFromMarc""); if (var8 != null){ loadEContentFromMarc = Boolean.parseBoolean(var8); } String var9 = Util.cleanIniValue(configIni.get(""Database"", ""database_vufind_jdbc"")); if (var9 == null || var9.length() == 0) { logger.error(""VuFind Database connection information not found in Database Section.  Please specify connection information in database_vufind_jdbc.""); System.exit(1); } try { vufindConn = DriverManager.getConnection(var9); } catch (SQLException e) { logger.error(""Could not connect to vufind database"", e); System.exit(1); } String var10 = Util.cleanIniValue(configIni.get(""Database"", ""database_econtent_jdbc"")); if (var10 == null || var10.length() == 0) { logger.error(""Database connection information for eContent database not found in Database Section.  Please specify connection information as database_econtent_jdbc key.""); System.exit(1); } try { econtentConn = DriverManager.getConnection(var10); } catch (SQLException e) { logger.error(""Could not connect to econtent database"", e); System.exit(1); } } "	0	0	1	0	1	0
"@Override public ListCell<Employee> Func1(ListView<Employee> var1) { ListCell<Employee> var2 = new ListCell<Employee>() { @Override protected void Func2(Employee var3, boolean var4) { super.Func2(var3, var4); if (var3 != null) { setText(var3.getId() + "" "" + var3.getName() + "" "" + var3.getPayRate()); } else{ listviewEmployees.setPlaceholder(new Label(""No Employees"")); } } }; return var2; } "	0	0	1	0	1	0
"private boolean Func1(int var1) { switch (this.comparator) { case EQ: return var1 == this.rhs; case LE: return var1 <= this.rhs; case LT: return var1 < this.rhs; case GE: return var1 >= this.rhs; case GT: return var1 > this.rhs; default: throw new IllegalStateException(""Unknown pseudo-Boolean comparator""); } } "	0	0	0	1	0	0
"void Func1() { UIManager.getDefaults().put(""ScrollPane.ancestorInputMap"", new UIDefaults.LazyInputMap(new Object[]{})); JScrollPane var1 = new JScrollPane(); var1.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0)); var1.getViewport().setBackground(Color.BLACK); InputMap var2 = var1.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW); int var3 = Event.SHIFT_MASK | Event.CTRL_MASK | Event.ALT_MASK; if (var2 != null) { var2.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, var3), ""unitScrollUp""); var2.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, var3), ""unitScrollDown""); var2.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, var3), ""unitScrollLeft""); var2.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, var3), ""unitScrollRight""); var2.put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP, var3), ""scrollUp""); var2.put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN, var3), ""scrollDown""); var2.put(KeyStroke.getKeyStroke(KeyEvent.VK_HOME, var3), ""scrollLeft""); var2.put(KeyStroke.getKeyStroke(KeyEvent.VK_END, var3), ""scrollRight""); } var1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED); var1.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED); var1.getViewport().setView(desktop); viewer.getContentPane().removeAll(); viewer.add(var1); viewer.addFocusListener(new FocusAdapter() { public void Func2(FocusEvent var4) { if (desktop.isAncestorOf(viewer)) desktop.requestFocus(); } public void Func3(FocusEvent var4) { releaseDownKeys(); } }); viewer.validate(); desktop.requestFocus(); } "	0	0	1	0	1	0
public Map<String, AbstractIndex> Func1( AbsoluteTableIdentifier var1, String var2) { Map<Integer, Map<String, AbstractIndex>> var3 = tableSegmentMap.get(var1); if (null == var3){ return null; } return var3.get(var2); } 	1	0	1	1	0	0
public final void Func1(UUID var1) { properties.put(ComponentProperty.COMPONENT_ID, var1); } 	0	0	0	1	0	0
"public static void Func1(String[] var1) { Scanner var2 = new Scanner(System.in); System.out.print(""Enter your var5 with Salutation::""); String var3 = var2.nextLine(); var3 = var3.trim(); String[] var4 = var3.split("" ""); LOGGER.info(""Salutation::"" + var4[0]); String var5 = """"; for (int var6 = 1; var6 < var4.length; var6++) { if (var4[var6].length() == 0) { var5 = var5 + var4[var6] + "" ""; } } LOGGER.info(""Your var5::"" + var5); var2.close(); } "	0	0	1	0	1	0
public String Func1() throws BitcoinRpcException { return bitcoin.signRawTransaction(create()); } 	1	0	1	0	1	0
@Override public AsyncContext Func1(final ServletRequest var1, final ServletResponse var2) throws IllegalStateException { synchronized (mutex) { return super.Func1(var1, var2); } } 	0	0	1	1	0	0
public Class Func1( String var1 ) { return (Class)associatedClasses.get( var1 ); } 	1	0	0	1	1	0
"@Test public void Func1() { WelcomeMessage var1 = new WelcomeMessage(); var1.show(); assertEquals(""Welcome to the Bibliotica..!!\n"", outContent.toString()); } "	0	0	0	1	1	0
"@Override public String Func1() { return new ToStringBuilder(this) .append(""id"", id) .append(""username"", username) .append(""password"", password) .append(""enabled"", enabled) .append(""name"", fullName) .append(""email"", email) .append(""phone"", phone) .Func1(); } "	0	0	1	0	0	0
public static TrackState Func1(TrackState var1, double var2, double var3, double var4, FieldMap var5) { Hep3Vector var6 = TrackUtils.extrapolateHelixToXPlane(var1, var2); HelicalTrackFit var7 = TrackUtils.getHTF(var1); double var8 = HelixUtils.PathToXPlane(var7, var2, 0., 0).get(0); double var9 = var5.getField(new BasicHep3Vector(0, 0, 500.0)).y(); double var10 = Math.abs(var7.var10(var9)); Hep3Vector var11 = HelixUtils.Direction(var7, var8); Hep3Vector var12 = VecOp.mult(var10, var11); double var13 = Math.signum(var1.getOmega()); if (var9 < 0) var13 = var13 * (-1); boolean var14 = false; while (var6.x() < var3) { Hep3Vector var15 = CoordinateTransformations.transformVectorToDetector(var6); var9 = var5.getField(var15).y(); Trajectory var16 = getTrajectory(var12, new org.lcsim.spacegeom.SpacePoint(var6), var13, var9); var6 = var16.getPointAtDistance(var4); var12 = VecOp.mult(var12.magnitude(), var16.getUnitTangentAtLength(var4)); if (var6.x() / var3 > .80 && !var14) { var4 /= 10; var14 = true; } } double var17 = var6.x() * var6.x() + var6.y() * var6.y(); double var18 = TrackUtils.calculatePhi(var12.x(), var12.y()); double var19 = TrackUtils.calculateCurvature(var12.magnitude(), var13, var9); double var20 = var6.var20(); double var21 = TrackUtils.calculateTanLambda(var12.var20(), var12.magnitude()); double[] var22 = new double[5]; var22[ParameterName.d0.ordinal()] = var17; var22[ParameterName.phi0.ordinal()] = var18; var22[ParameterName.omega.ordinal()] = var19; var22[ParameterName.z0.ordinal()] = var20; var22[ParameterName.var21.ordinal()] = var21; TrackState var23 = new BaseTrackState(var22, var6.v(), var1.getCovMatrix(), TrackState.AtCalorimeter, var9); return var23; } 	0	0	0	0	0	1
"public void Func1(String var1, String var2, int var3, int var4) { Calendar var5 = Calendar.getInstance(); var5.setTimeInMillis(System.currentTimeMillis()); int var6 = 43 - notifyMinutes; int var7; int var8; if (notifyMinutes > 9){ int var9 = notifyMinutes - 9; var7 = 60 - var9; var8 = 0; } else { var7 = 9 - notifyMinutes; var8 = 1; } if (var3 == 1) { var5.set(Calendar.HOUR, 0); var5.set(Calendar.MINUTE, var6); } if (var3 == 2) { var5.set(Calendar.HOUR, var8); var5.set(Calendar.MINUTE, var7); } var5.set(Calendar.SECOND, 1); var5.set(Calendar.AM_PM, Calendar.PM); SharedPreferences var10 = PreferenceManager.getDefaultSharedPreferences(context1); SharedPreferences.Editor var11 = var10.edit(); var11.putString(""TITLE"", var1); var11.putString(""TEXT"", var2); var11.apply(); Log.d(""Notification set"", var1); Log.d(""!helper!"", ""notification set""); Log.d(""edgeclasstime"", (var5.getTimeInMillis() - System.currentTimeMillis()) + """"); if ((var5.getTimeInMillis() - System.currentTimeMillis()) > 0 && NotificationEnabled) { Intent var12 = new Intent(context1, EdgeReceiver.class); PendingIntent var13 = PendingIntent.getBroadcast(context1, MainActivity.REQUEST_CODE_EDGE, var12, PendingIntent.FLAG_UPDATE_CURRENT); AlarmManager var14 = (AlarmManager) context1.getSystemService(ALARM_SERVICE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) { var14.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, var5.getTimeInMillis(), var13); } else { var14.setExact(AlarmManager.RTC_WAKEUP, var5.getTimeInMillis(), var13); } JobInfo.Builder var15 = new JobInfo.Builder(REQUEST_CODE_EDGE, component) .setMinimumLatency(var5.getTimeInMillis() - System.currentTimeMillis()) .setPersisted(true) .setOverrideDeadline((var5.getTimeInMillis() - System.currentTimeMillis()) + 60000); JobScheduler var16 = (JobScheduler) this.getSystemService(Context.JOB_SCHEDULER_SERVICE); if (var5.getTimeInMillis() - System.currentTimeMillis() > 0){ var16.schedule(var15.build()); } } } "	0	0	0	0	0	1
public static byte[] Func1(File var1){ InputStream var2 = getFileInputStream(var1); BufferedInputStream var3 = new BufferedInputStream(var2); ByteArrayOutputStream var4 = new ByteArrayOutputStream(); try{ byte[] var5 = new byte[IOConstants.DEFAULT_BUFFER_LENGTH]; int var6; while ((var6 = var3.read(var5)) != -1){ var4.write(var5, 0, var6); } var4.flush(); return var4.Func1(); }catch (IOException e){ throw new UncheckedIOException(e); }finally{ IOUtils.closeQuietly(var4); IOUtils.closeQuietly(var3); } } 	1	0	1	1	1	0
"@Override public WebDriverSessionLevel Func1(Class<?> var1) throws Exception { PtlWebDriverStrategy var2 = var1.getAnnotation(PtlWebDriverStrategy.class); if (var2 != null) { switch (var2.sessionLevel()) { case GLOBAL: LOG.debug(""[Get WebDriver] reuse level: {} (annotated, {})"", WebDriverSessionLevel.GLOBAL, var1.getName()); return WebDriverSessionLevel.GLOBAL; case TEST_CASE: LOG.debug(""[Get WebDriver] reuse level: {} (annotated, {})"", WebDriverSessionLevel.TEST_CASE, var1.getName()); return WebDriverSessionLevel.TEST_CASE; case TEST_CLASS: LOG.debug(""[Get WebDriver] reuse level: {} (annotated, {})"", WebDriverSessionLevel.TEST_CLASS, var1.getName()); return WebDriverSessionLevel.TEST_CLASS; default: return WebDriverSessionLevel.TEST_CLASS; } } LOG.debug(""[Get WebDriver] reuse level: {} (config, {})"", configSessionLevel, var1); return configSessionLevel; } "	1	0	0	0	1	0
@Override public void Func1(View var1) { float var2 = computeScore(); saveDrawing(var1); drawView.setEnabled(true); started = false; callback.onFinish(var2, 10000-duration); } 	1	1	1	0	0	0
@Override public void Func1(final int var1, final String var2, final String var3, final String var4) { Referrer var5 = context.toReferrer(); Class<?> var6 = BytecodeUtil.taggedTypeNameToClass(var2); if ( isPseudoClass(var6) ) { return; } referenceVisitor.onClassReference(var5, BytecodeUtil.rawType(var6)); if (var1 == Opcode.INVOKESPECIAL && isConstructor(var3)) { onConstructorCall(var5, var6, var3, var4); } else if (var1 == Opcode.INVOKESPECIAL || var1 == Opcode.INVOKEINTERFACE || var1 == Opcode.INVOKEVIRTUAL || var1 == Opcode.INVOKESTATIC) { onMethodCall(var5, var6, var3, var4); } } 	0	0	1	1	1	0
private void Func1(final boolean var1) { @StringRes int var2 = var1 ? R.string.reopen_issue_confirm : R.string.close_issue_confirm; @StringRes int var3 = var1 ? R.string.pull_request_reopen : R.string.pull_request_reopen; new AlertDialog.Builder(this) .setMessage(var2) .setIconAttribute(android.R.attr.alertDialogIcon) .setCancelable(false) .setPositiveButton(var3, new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var4, int var5) { new IssueOpenCloseTask(var1).schedule(); } }) .setNegativeButton(R.string.cancel, null) .show(); } 	0	0	1	0	0	0
"public SurvivalAnalysis Func1(SurvivalAnalysis var1) { var1.setResults(new ArrayList<Result>()); for (val var2 : var1.getEntitySetIds()) { val var3 = new FiltersParam(String.format(DONOR_FILTER, var2)); val var4 = builder() .filters(var3.get()) .from(0) .size(20000) .sort(""survivalTime"") .order(""asc"") .build(); val var5 = donorRepository.findAllCentric(var4); val var6 = compute(var5.getHits().getHits()); var1.getResults().add(var1.new Result(var2, var6)); } return var1; } "	1	0	1	1	0	0
"@Override public Setting.Builder<T> Func1(Collection<String> Func1) { checkNotNull(Func1, ""Func1""); this.Func1 = Func1.stream() .filter(alias -> { checkNotNull(alias, ""null alias""); return true; }) .filter(alias -> { checkArgument(Setting.ID_PATTERN.matcher(alias).matches(), ""alias does not match setting id pattern""); return true; }) .map(alias -> alias.toLowerCase(Locale.ENGLISH)) .collect(GuavaCollectors.toImmutableSet()); return this; } "	0	0	1	1	0	0
@Override public Setting.Builder<T> Func1() { this.id = null; this.aliases = Collections.emptySet(); this.type = null; this.name = null; this.defaultValue = null; return this; } 	0	0	1	1	0	0
@Override public Setting.Builder<T> Func1(@Nullable T Func1) { this.Func1 = Func1; return this; } 	0	0	1	1	0	0
"@Override public Setting.Builder<T> Func1(String... Func1) { checkNotNull(Func1, ""Func1""); return this.Func1(Arrays.asList(Func1)); } "	0	0	0	1	0	0
"public List<TransferEventResponse> Func1(TransactionReceipt var1) { final Event var2 = new Event(""transfer"", Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}), Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {})); List<EventValues> var3 = extractEventParameters(var2,var1); ArrayList<TransferEventResponse> var4 = new ArrayList<TransferEventResponse>(var3.size()); for(EventValues var5 : var3) { TransferEventResponse var6 = new TransferEventResponse(); var6._from = (Address)var5.getIndexedValues().get(0); var6._to = (Address)var5.getIndexedValues().get(1); var6._value = (Uint256)var5.getNonIndexedValues().get(0); var4.add(var6); } return var4; } "	0	0	1	1	0	0
"@GET @Consumes(""application/json"") @Produces(""application/json"") @SuppressWarnings(""unchecked"") @Path(""/Func1"") public ResponseEntity Func1(@FormParam(""var1"") final String var1, @FormParam(""var2"") final String var2) { User var3 = null; try { var3 = this.getService().Func1(var1, var2); } catch (Exception e) { return new ResponseEntity(e.getMessage(), HttpStatus.NOT_FOUND); } return new ResponseEntity(var3, HttpStatus.OK); } "	1	0	1	1	1	0
"private void Func1(){ statusLabel.setText(""Disconecting from "" + ultra_ip + ""...""); connectToUltra = false; } "	0	0	1	0	1	0
"private static SortedSet<Method> Func1(final Class<?> var1) { SortedSet<Method> var2 = new TreeSet<Method>(METHOD_COMPARATOR); final Method[] var3 = var1.getDeclaredMethods(); if (var3.length > 256) { throw new IllegalArgumentException(""Can't proxy that many var2 on a single instance!""); } var2.addAll(asList(var3)); if (var2.size() != var3.length) { throw new AssertionError(""Ouch... looks like that didn't work!""); } return var2; } "	0	0	1	1	0	0
"public static AuthMethod Func1() { return AuthMethod.valueOf(getProperty(""authentication.method"", ""DB"").toUpperCase()); } "	0	0	1	1	1	0
"@Override public String Func1(boolean var1) { return getRootURL(var1) + ""/tb-ui/register""; } "	0	0	1	0	1	0
private void Func1(List<P> var1) { mParents = var1 == null ? Collections.<P>emptyList() : var1; mItems = ExpandableAdapters.generateItems(var1); } 	0	0	1	1	1	0
@Override public List<Map<String, String>> Func1(final String var1, String var2, boolean var3) { final List<Map<String, String>> var4 = new ArrayList<Map<String, String>>(); getCollection(var1, var2, var4); if (var3) { return var4.size() > 0 ? Lists.var3(var4) : var4; } else { return var4; } } 	0	0	1	1	0	0
private CollectionItem Func1(CollectionItem var1, final String var2) { if (var1.getResource() != null) { if (var1.getResource().getResourceType().getName().equals(ResourceType.Type.ASSESSMENT_QUESTION.getType())) { var1.setQuestionInfo(this.getAssessmentService().getQuestion(var1.getResource().getGooruOid())); } if (var1.getResource().getResourceType().getName().equals(ResourceType.Type.TEXTBOOK.getType())) { final Textbook var3 = this.getResourceRepository().findTextbookByContentGooruId(var1.getResource().getGooruOid()); if (var3 != null) { var1.setDocumentid(var3.getDocumentId()); var1.setDocumentkey(var3.getDocumentKey()); } } var1.setStandards(this.getStandards(var1.getResource().getTaxonomySet(), false, var2)); } return var1; } 	0	0	1	1	0	0
private Errors Func1(Collection var1) throws Exception { final Errors var2 = new BindException(var1, COLLECTION); rejectIfNull(var2, var1, COLLECTION, GL0006, generateErrorMessage(GL0006, COLLECTION)); return var2; } 	0	0	0	1	0	0
@Override public List<Collection> Func1(Map<String, String> var1, final User var2) { return getCollectionRepository().Func1(var1, var2); } 	0	0	1	1	0	0
@Override public CollectionItem Func1(String var1, final String var2, User var3, final String var4) { CollectionItem var5 = this.getCollectionRepository().getCollectionItemById(var1); rejectIfNull(var5, GL0056, _COLLECTION_ITEM); if (var2.equalsIgnoreCase(TRUE)) { var5 = this.setCollectionItemMoreData(var5, var4); } return var5; } 	0	0	0	1	0	0
private Map<String, Object> Func1(Code var1) { Map<String, Object> var2 = new HashMap<String, Object>(); var2.put(CODE_ID, var1.getCodeId()); var2.put(LABEL, var1.getLabel()); return var2; } 	0	0	0	1	0	0
"public void Func1() { try { if (new java.net.URL(fileField.getText()).getPath() != """") header.setIcon(getPreviewIcon(new java.io.File( new java.net.URL(fileField.getText()).getPath()))); } catch (Exception ex) { ex.printStackTrace(); } } "	0	0	1	0	1	0
"@Before public void Func1() throws Exception { String var1 = AlertsImportManagerTest.class.getResource(""/"").getPath(); File var2 = new File(new File(var1, ""hawkular-alerts""), ""alerts-data.json""); importManager = new AlertsImportManager(var2); } "	0	0	1	0	1	0
"@Override public @Nonnull Collection<FirewallRule> Func1(@Nonnull String var1) throws InternalException, CloudException { APITrace.begin(getProvider(), ""Firewall.Func1""); try { NovaMethod var2 = new NovaMethod((NovaOpenStack)getProvider()); JSONObject var3 = var2.getServers(""/os-security-groups"", var1, false); if( var3 == null ) { return null; } try { if( var3.has(""security_group"") ) { JSONObject var4 = var3.getJSONObject(""security_group""); if( !var4.has(""var5"") ) { return Collections.emptyList(); } ArrayList<FirewallRule> var5 = new ArrayList<FirewallRule>(); JSONArray var6 = var4.getJSONArray(""var5""); Iterable<Firewall> var7 = null; for( int var8=0; var8<var6.length(); var8++ ) { JSONObject var9 = var6.getJSONObject(var8); int var10 = -1, var11 = -1; Protocol var12 = null; String var13 = null; if( var9.has(""var17"") ) { var13 = var9.getString(""var17""); } if( var13 == null ) { continue; } RuleTarget var14 = null; if( var9.has(""ip_range"") ) { JSONObject var15 = var9.getJSONObject(""ip_range""); if( var15.has(""cidr"") ) { var14 = RuleTarget.getCIDR(var15.getString(""cidr"")); } } if( var9.has(""group"") ) { JSONObject var16 = var9.getJSONObject(""group""); String var17 = (var16.has(""var17"") ? var16.getString(""var17"") : null); if( var17 != null ) { var14 = RuleTarget.getGlobal(var17); } else { String var18 = (var16.has(""tenant_id"") ? var16.getString(""tenant_id"") : null); if( getTenantId().equals(var18) ) { String var19 = (var16.has(""name"") ? var16.getString(""name"") : null); if( var19 != null ) { if( var7 == null ) { var7 = list(); } for( Firewall var20 : var7 ) { if( var20.getName().equals(var19) ) { var14 = RuleTarget.getGlobal(var20.getProviderFirewallId()); break; } } } } } } if( var14 == null ) { continue; } if( var9.has(""from_port"") ) { var10 = var9.getInt(""from_port""); } if( var9.has(""to_port"") ) { var11 = var9.getInt(""to_port""); } if( var10 == -1 && var11 != -1 ) { var10 = var11; } else if( var11 == -1 && var10 != -1 ) { var11 = var10; } if( var10 > var11 ) { int var21 = var10; var10 = var11; var11 = var21; } if( var9.has(""ip_protocol"") ) { String var22 = null; if( !var9.isNull(""ip_protocol"") ) { var9.getString(""ip_protocol""); } if( var22 == null || var22.equalsIgnoreCase(""null"") ) { var12 = Protocol.ANY; } else { var12 = Protocol.valueOf(var22.toUpperCase()); } } if( var12 == null ) { var12 = Protocol.TCP; } var5.add(FirewallRule.getInstance(var13, var1, var14, Direction.INGRESS, var12, Permission.ALLOW, RuleTarget.getGlobal(var1), var10, var11)); } return var5; } } catch( JSONException e ) { logger.error(""Func1(): Unable to identify expected values in JSON: "" + e.getMessage()); throw new CloudException(CloudErrorType.COMMUNICATION, 200, ""invalidJson"", ""Missing JSON element for security groups""); } return null; } finally { APITrace.end(); } } "	0	0	1	0	0	0
"public ResultSet Func1(int var1, int var2) throws Exception { if (var1 >= 0 && var2 < var1) { throw new Exception(""Invalid range: var2 could not be lower than var1!""); } if (Filter != null && Filter.contains(""%SEARCH"")) { throw new Exception(""Full text search not implemented yet!""); } ResultSet var3 = null; Connection var4 = null; try { var4 = getConnection(); String var5; LinkedHashSet<String> var6 = new LinkedHashSet<String>(); if ((this.FieldSelection == null || this.FieldSelection.getFieldNames().size() == 0) && (Scope == null || Scope.equals(""""))) { var6.add(""*""); } if (Scope != null) { for (char var7 : Scope.toCharArray()) { String var8 = String.valueOf(var7); if (Scopes.containsKey(var8)) var6.addAll(Scopes.get(var8)); } } if (FieldSelection != null) { var6.addAll(FieldSelection.getFieldNames()); } StringBuffer var9 = new StringBuffer(""""); if (var6.contains(""*"")) var9.append(""*""); else { for (String var10 : var6) { var9.append("",""+DBQuoteString+var10+DBQuoteString); } var9 = new StringBuffer(var9.substring(1)); } if (retrieveSql != null && !retrieveSql.equals("""")) var5 = ""SELECT ""+var9+"" FROM (""+retrieveSql+"")""; else var5 = ""SELECT ""+var9+"" FROM ""+DBQuoteString+Table+DBQuoteString; if (Filter != null && Filter.getFieldNames().size() > 0) { StringBuffer var11 = new StringBuffer(""""); for (String var12 : Filter.getFieldNames()) { var11.append("" AND ""+DBQuoteString+var12+DBQuoteString+""=?""); } if (var11.length()>0) var5+="" WHERE ""+var11.substring(5); } if (var1 >= 0 && var2 >= var1) { switch(DBType) { case ""BASIS DBMS"": var5+="" LIMIT ""+(var1+1)+"",""+(var2 - var1 + 1); break; case ""MYSQL"": var5+="" LIMIT ""+var1+"",""+(var2 - var1 + 1); break; case ""MICROSOFT SQL SERVER"": int var13 = Integer.valueOf(var4.getMetaData().getDatabaseProductVersion().replaceAll(""(\\d+)\\..*"", ""$1"")); if (var13 >= 11) var5=""SELECT * FROM (""+var5+"") T ORDER BY (SELECT NULL) OFFSET ""+var1+"" ROWS FETCH NEXT ""+(var2 - var1 + 1)+"" ROWS ONLY""; else throw new Exception(""Pagination is not supported or not implemented with the ""+DBType+"" (version ""+var13+"") database.""); break; default: throw new Exception(""Pagination is not supported or not implemented with the ""+DBType+"" database.""); } } PreparedStatement var14 = var4.prepareStatement(var5); if (Filter != null) { setSqlParams(var14, Filter, Filter.getFieldNames()); } java.var5.ResultSet var15 = var14.executeQuery(); var3 = new ResultSet(); var3.populate(var15, true); } catch (SQLException ex) { throw ex; } finally { if (Conn == null && var4 != null) { try { var4.close(); } catch (SQLException e) { e.printStackTrace(); } } } if (var3.size() > 0) { DataRow var16 = var3.get(0); for (String var10 : AttributesRecord.getFieldNames()) { var16.setFieldAttributes(var10, AttributesRecord.getFieldAttributes(var10)); } } return var3; } "	0	0	0	0	0	1
public CompletionStage<Result> Func1() { Http.Context var1 = var1(); Form<SearchItemForm> var2 = formFactory.var2(SearchItemForm.class).bindFromRequest(var1.request()); return loadNav(Optional.empty()).thenApply(nav -> ok(views.html.searchItem.render(var2, Optional.empty(), nav)) ); } 	0	1	0	0	0	0
"private String Func1(final String var1, final byte[] var2) throws Exception { TimeTrace var3 = client.getZookeeperClient().startTracer(""CreateBuilderImpl-Foreground""); final AtomicBoolean var4 = new AtomicBoolean(true); String var5 = RetryLoop.callWithRetry ( client.getZookeeperClient(), new Callable<String>() { @Override public String Func2() throws Exception { boolean var6 = var4.getAndSet(false); String var7 = null; if ( !var6 && doProtected ) { debugForceFindProtectedNode = false; var7 = findProtectedNodeInForeground(var1); } if ( var7 == null ) { try { var7 = client.getZooKeeper().create(var1, var2, acling.getAclList(var1), createMode); } catch ( KeeperException.NoNodeException e ) { if ( createParentsIfNeeded ) { ZKPaths.mkdirs(client.getZooKeeper(), var1, false, client.getAclProvider()); var7 = client.getZooKeeper().create(var1, var2, acling.getAclList(var1), createMode); } else { throw e; } } } if ( failNextCreateForTesting ) { failNextCreateForTesting = false; throw new KeeperException.ConnectionLossException(); } return var7; } } ); var3.commit(); return var5; } "	0	0	1	0	1	0
private void Func1(SwitchableShaders var1, EnumStellarPass var2, AtmosphereModel var3) { if(var2 != EnumStellarPass.DominateScatter) { if(this.isFrameBufferEnabled) { var1.switchShader(0); var1.bindShader(); var1.getCurrent().getField(dominationMapField).setInteger(1); } else { var1.switchShader(1); var1.bindShader(); var1.getCurrent().getField(skyBrightnessField).setDouble(this.skyBrightness); } if(var2.hasTexture) var1.getField(defaultTexture).setInteger(0); var1.getField(dominationScaleField).setDouble(this.dominationScale); } else { if(this.isFrameBufferEnabled) { var1.switchShader(0); } else { var1.switchShader(1); } var1.bindShader(); cameraHeight.setDouble(var3.getHeight()); outerRadius.setDouble(var3.getOuterRadius()); innerRadius.setDouble(var3.getInnerRadius()); nSamples.setInteger(20); exposure.setDouble(2.0); depthToFogFactor.setDouble(100.0 * Math.exp(var3.getHeight()) * Math.exp(-20.0 * this.rainStrengthFactor)); Vector3 var4 = new Vector3(var3.getSkyExtRed(), var3.getSkyExtGreen(), var3.getSkyExtBlue()); extinctionFactor.setVector3(var4.scale(0.9 - 2.0 * Math.log(this.weatherFactor))); gScattering.setDouble(-0.9 + this.rainStrengthFactor); double var5 = 1.2; rayleighFactor.setDouble4( var5 * 4 * var3.getSkyColorRed() * var3.getSkyDispRed() / 0.56, var5 * 8 * var3.getSkyColorGreen() * var3.getSkyDispGreen() / 0.65, var5 * 16 * var3.getSkyColorBlue() * var3.getSkyDispBlue(), 1.0); mieFactor.setDouble4( var5 * 0.1 * (1.0f + 5 * this.rainStrengthFactor) * var3.getSkyDispRed(), var5 * 0.2 * (1.0f + 5 * this.rainStrengthFactor) * var3.getSkyDispGreen(), var5 * 0.3 * (1.0f + 5 * this.rainStrengthFactor) * var3.getSkyDispBlue(), 1.0); } } 	0	1	0	0	0	0
"public User Func1() { final String var1 = settingsService.getSetting(ServerSetting.admin); if (StringUtils.isEmpty(var1)) { throw new IllegalArgumentException(""Server is missing admin setting!""); } else { return new UserModel.Builder() .name(CommonFactory.createName(var1, EntityType.user)) .id(var1) .email(var1) .parent(var1) .isAdmin(true).create(); } } "	0	0	1	0	0	0
"void Func1(ActionEvent var1) { throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates. } "	0	0	1	0	0	0
"@Override public void Func1(RemoteDevice var1) { LOGGER.info(""iAm recieved: "" + var1); discovered.put(var1.getInstanceNumber(), var1); Objects.getDaemonThreadPool().schedule(new Runnable() { @Override public void Func2() { deviceDiscovered(var1); } }, 0, TimeUnit.MILLISECONDS); } "	0	0	0	1	0	0
"@RequestMapping( value = ""/api/var5/{var2}/service"", method = RequestMethod.POST, produces = ""application/json;charset=UTF-8"") @ResponseBody @PreAuthorize(""hasRole('SERVICE_ADMIN') and @accessControlUtil.hasAccessToOrg(#var2)"") public ResponseEntity<Service> Func1(HttpServletRequest var1, @PathVariable String var2, @Valid @RequestBody Service var3, BindingResult var4) throws McBasicRestException { ValidateUtil.hasErrors(var4, var1); Organization var5 = this.organizationService.getOrganizationByMrn(var2); if (var5 != null) { if (!MrnUtil.getOrgShortNameFromOrgMrn(var2).equals(MrnUtil.getOrgShortNameFromEntityMrn(var3.getMrn()))) { throw new McBasicRestException(HttpStatus.BAD_REQUEST, MCIdRegConstants.MISSING_RIGHTS, var1.getServletPath()); } var3.setIdOrganization(var5.getId()); if (var3.getOidcAccessType() != null && !var3.getOidcAccessType().trim().isEmpty()) { if (!""bearer-only"".equals(var3.getOidcAccessType()) && (var3.getOidcRedirectUri() == null || var3.getOidcRedirectUri().trim().isEmpty())) { throw new McBasicRestException(HttpStatus.BAD_REQUEST, MCIdRegConstants.OIDC_MISSING_REDIRECT_URL, var1.getServletPath()); } keycloakAU.init(KeycloakAdminUtil.BROKER_INSTANCE); var3.generateOidcClientId(); try { String var6 = keycloakAU.createClient(var3.getOidcClientId(), var3.getOidcAccessType(), var3.getOidcRedirectUri()); if (""confidential"".equals(var3.getOidcAccessType())) { var3.setOidcClientSecret(var6); } else { var3.setOidcClientSecret(null); } } catch(IOException e) { throw new McBasicRestException(HttpStatus.INTERNAL_SERVER_ERROR, MCIdRegConstants.ERROR_CREATING_KC_CLIENT, var1.getServletPath()); } catch (DuplicatedKeycloakEntry dke) { throw new McBasicRestException(HttpStatus.CONFLICT, dke.getErrorMessage(), var1.getServletPath()); } } else { var3.setOidcAccessType(null); var3.setOidcClientId(null); var3.setOidcClientSecret(null); var3.setOidcRedirectUri(null); } try { Service var7 = this.entityService.save(var3); return new ResponseEntity<>(var7, HttpStatus.OK); } catch (DataIntegrityViolationException e) { if (var3.getOidcAccessType() != null && !var3.getOidcAccessType().trim().isEmpty()) { keycloakAU.deleteClient(var3.getMrn()); } throw new McBasicRestException(HttpStatus.CONFLICT, e.getRootCause().getMessage(), var1.getServletPath()); } } else { throw new McBasicRestException(HttpStatus.NOT_FOUND, MCIdRegConstants.ORG_NOT_FOUND, var1.getServletPath()); } } "	1	0	0	0	0	0
"public static void Func1() { System.out.println(Ontology.getOntologyInstance()); OntologyWriter.writeOntology(Ontology.getOntologyInstance(), fileResourceManager.getFilePath(""parser/test-1.owl"")); } "	0	0	0	1	1	0
"@Test public void Func1() throws Exception { String var1 = ""Func1""; try { Dataset var2 = sparkSession.read().json(""src/test/resources/test-data/events.json""); var2 = var2.select(""id"", ""count_l"", ""doc_id_s"", ""flag_s"", ""session_id_s"", ""type_s"", ""tz_timestamp_txt"", ""user_id_s"", ""`params.title_s`""); deleteCollection(var1); String var3 = ""testConfig""; File var4 = new File(""src/test/resources/conf""); int var5 = 1; int var6 = 1; createCollection(var1, var5, var6, var5 /* maxShardsPerNode */, var3, var4); validateDataFrameStoreLoad(sparkSession, var1, var2); { Map<String, String> var7 = new HashMap<String, String>(); var7.put(SOLR_ZK_HOST_PARAM(), cluster.getZkServer().getZkAddress()); var7.put(SOLR_COLLECTION_PARAM(), var1); Dataset var8 = sparkSession.read().format(""solr"").var7(var7).load(); var8.registerTempTable(""events""); Row[] var9 = sparkSession.sql(""SELECT * FROM events"").take(1); sparkSession.sql(""SELECT `params.title_s` from events"").take(2); } } finally { deleteCollection(var1); } } "	0	0	1	0	1	0
"private String Func1(PrintWriter var1, OWLClass var2, int var3, int var4, boolean var5, String var6) { if (interrupted) return ""Cancelled""; if (var4 != -1 && var3 > var4) return """"; if (var2 == null) { return """"; } String var7 = """"; for (int var8 = 0; var8 < var3; var8++) { var7 += ""\t""; } try { if (var5) { classList.add(""""); } String var9 = null; Optional<String> var10 = tab.getRDFSLabel(var2); if (var10.isPresent()) { var9 = var10.get(); } else { var9 = var2.getIRI().getShortForm(); } if (withoutAttrsWithId) { classList.add(var7 + var9 + "" ("" + var2.getIRI().getShortForm() + "")""); } else { classList.add(var7 + var9); } if (var5 && (alreadySeen.get(var2) == null)) { getSlots(var2, var7); } writeToFile(); classList.clear(); iCtr++; final int var11 = iCtr; updateStatus(var11); if (Thread.interrupted()) { throw new InterruptedException(); } Thread.sleep(300); alreadySeen.put(var2, var2); List<OWLClass> var12 = tab.getDirectSubClasses(var2); Collections.sort(var12, new Comparator<OWLClass>() { public int Func2(OWLClass var13, OWLClass var14) { String var15 = var13.getIRI().getShortForm(); String var16 = var14.getIRI().getShortForm(); if (var15.startsWith(""'"")) { var15 = var15.substring(1, var15.length() - 1); } if (var16.startsWith(""'"")) { var16 = var16.substring(1, var16.length() - 1); } return var15.compareTo(var16); } }); var3++; for (OWLClass var17 : var12) { if (var17.getIRI().getShortForm().compareTo(var2.getIRI().getShortForm()) != 0) { if (alreadySeen.get(var17) != null) { } else { reportTextArea.append(""adding next var3\n""); Func1(var1, var17, var3, var4, var5, var6); } } } } catch (InterruptedException e) { updateStatus(0); return ""Interrupted""; } catch (Exception e) { return ""Error""; } return ""All Done""; } "	0	0	1	0	0	0
@Override public boolean Func1(Command var1, Command var2) { if (((ZclCommand) var1).getTransactionId() != null) { final byte var3 = ((ZclCommand) var1).getTransactionId(); return new Byte(var3).equals(((ZclCommand) var2).getTransactionId()); } else { return false; } } 	0	0	1	1	1	0
private void Func1(String var1, PwoDevice var2) { String var3 = getUngroupedPwoId(var2.top()); mDisplayList.remove(var2); mUngroupedPwoDevices.remove(var3); PwoGroup var4 = new PwoGroup(); var4.promotePwo(var2); mPwoGroups.put(var1, var4); mDisplayList.add(var4); } 	0	0	1	0	1	0
private String Func1(String var1) { if ((var1.length()) > (NhincConstants.CUSTOM_HTTP_HEADERS.length() + 1)) { return var1.substring(NhincConstants.CUSTOM_HTTP_HEADERS.length() + 1).trim(); } else { return null; } } 	0	0	0	1	0	0
"private static String Func1(List<Activation> var1, int var2) { return ""\tfrom "" + formatCallerLine(var1, var2); } "	0	0	0	1	0	0
@Override public void Func1(World var1, BlockPos var2, IBlockState var3, Random var4) { if (var1.isAirBlock(var2.up())) { int var5; BlockPos var6 = var2; for (var5 = 1; var1.getBlockState(var6 = var6.down()).getBlock() == this; ++var5); if (var5 < MAX_HEIGHT) {// && var1.var4.nextInt(var1.getBlockState(var6).getBlock().isFertile(var1, var6) ? GROWTH_RATE_FERTILE : GROWTH_RATE_INFERTILE) == 0) { var1.setBlockState(var2.up(), getDefaultState()); } } super.Func1(var1, var2, var3, var4); } 	0	0	1	0	1	0
"public ModelAndView Func1(WorkflowTaskForm var1, BindException var2) throws Exception { return new JspView(""/org/labkey/workflow/view/workflowTask.jsp"", new WorkflowTask(WorkflowManager.get().getTask(var1.getTaskId())), var2); } "	0	0	1	1	1	0
"@RequestMapping(value = ""contact/Func1"", method = RequestMethod.POST) public void Func1(@RequestBody List<Contact> var1) { LOGGER.info(""Func1 var1. obtained {} var1, wicht not Func1"", var1.size()); contactService.deleteIdNotIn(fetchIdOfContact(var1)); } "	0	0	1	0	1	0
private void Func1(final String var1, final List<FinalizableCommand> var2) { final FinalizableCommand var3 = myToolWindowsPane.createRemoveButtonCmd(var1, myWindowManager.getCommandProcessor()); var2.add(var3); } 	0	0	1	0	1	0
public void Func1(boolean var1) { myStripesOverlayed = var1; updateToolStripesVisibility(); } 	0	0	1	0	0	0
"private void Func1(PageDefinition var1, ProcessingInstruction var2, Map<String, String> var3) throws Exception { final String var4 = var3.remove(""class""); final String var5 = var3.remove(""zscript""); final Map<String, String> var6 = new LinkedHashMap<String, String>(var3); if (var4 == null) { if (var5 == null) throw new UiException(message(""Either the class or zscript attribute must be specified"", var2)); checkZScriptEnabled(var2.getLocator()); ZScript var7 = null; final String var8 = var1.getZScriptLanguage(); if (var5.indexOf(""${"") < 0) { final URL var9 = getLocator().getResource(var5); if (var9 != null) var7 = new ZScript(var8, var9); } if (var7 == null) var7 = new ZScript(var1.getEvaluatorRef(), var8, var5, getLocator()); var1.addInitiatorInfo(new InitiatorInfo(new ZScriptInitiator(var7), var6)); } else { if (var5 != null) throw new UiException(message(""You cannot specify both class and zscript"", var2)); var1.addInitiatorInfo(new InitiatorInfo(var4, var6)); } } "	0	0	1	0	1	0
public ListView<FeasibilityBox> Func1() { return feasibilityBoxWrapper; } 	0	0	1	0	0	0
"private void Func1(Mat[] var1, int var2) { ProgressDialogHandler.getInstance().showProcessDialog(""Processing"", ""Performing exposure alignment"", 50.0f); MedianAlignmentOperator var3 = new MedianAlignmentOperator(var1, var2); var3.perform(); } "	0	0	0	1	0	0
"public Cursor Func1() { return db.rawQuery(""SELECT data.* FROM orgdata data JOIN"" + ""(SELECT f.node_id FROM files f) file on file.node_id = data._id ORDER BY data.name ASC;"", null); } "	0	0	1	1	0	0
"@Test public void Func1() { this.driver.navigate().to(""http://localhost:8081/test-app?kc_idp_hint=invalid-idp-id""); assertTrue(this.driver.getCurrentUrl().startsWith(""http://localhost:8081/auth/realms/realm-with-broker/protocol/openid-connect/auth"")); assertEquals(""Could not find an identity provider with the identifier [invalid-idp-id]."", this.driver.findElement(By.className(""instruction"")).getText()); } "	0	0	1	1	1	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); if (firstTime) { firstTime = false; initSearchActivity(); } AccommodationRecyclerViewAdapter var2 = new AccommodationRecyclerViewAdapter(Accommodation.getAccommodations(), ObjectActivity.class); new SearchActivityView(this, var2); new SearchActivityController(this, var2,AdvancedSearchActivity.class); var2.refresh(); try { initializeNavigationListener(); } catch (RuntimeException e) { e.printStackTrace(); } } 	0	0	1	1	1	0
"public boolean Func1(Player var1, ItemStack var2) { Inventory var3 = var1.getInventory(); String var4 = gunsConfig.getString(var2.getDurability() + "".var4""); if ( var2.equals(orbital) ) { return true; } for (ItemStack var5 : var3) { if (var5 != null && var5.hasItemMeta()) { ItemMeta var6 = var5.getItemMeta(); if (!var6.equals(null) && var6.hasLore()) { List<String> var7 = var6.getLore(); if ( var7.toString().contains(""Ammunition | "" + var4) ) { if (var5.getAmount() > 1) { var5.setAmount(var5.getAmount() - 1); } else { var3.remove(var5); } return true; } } } } return false; } "	0	0	1	0	1	0
"@GET @Produces(""application/json"") @Path(""/var5"") public Response Func1(@PathParam(""var1"") final String var1, @PathParam(""var2"") final String var2, @PathParam(""var3"") final String var3) { LOGGER.info(""REQUEST: Func1("" + var1 + "", "" + var1 + "", "" + var3 + "")""); final BuildIdentifier var4 = ScenarioDocuBuildsManager.INSTANCE.resolveBranchAndBuildAliases( var1, var2); try { final List<UseCaseDiffInfo> var5 = diffReader.loadUseCaseDiffInfos(var4.getBranchName(), var4.getBuildName(), var3); return Response.ok(getUseCaseDiffInfoMap(var5), MediaType.APPLICATION_JSON).build(); } catch (final ResourceNotFoundException e) { LOGGER.warn(""Unable to get use case diff infos"", e); return Response.noContent().build(); } catch (final Throwable e) { LOGGER.warn(""Unable to get use case diff infos"", e); return Response.serverError().build(); } } "	0	0	1	0	0	0
private List<PartUsageLink> Func1(String var1, List<PartUsageLinkDTO> var2) throws EntityNotFoundException, EntityAlreadyExistsException, AccessRightException, NotAllowedException, CreationException, UserNotActiveException{ List<PartUsageLink> var3 = new ArrayList<>(); for(PartUsageLinkDTO var4 : var2){ PartMaster var5 = findOrCreatePartMaster(var1, var4.getComponent()); if(var5 != null){ PartUsageLink var6 = new PartUsageLink(); List<CADInstance> var7 = new ArrayList<>(); List<PartSubstituteLink> var8 = new ArrayList<>(); if( var4.getCadInstances() != null){ for(CADInstanceDTO var9 : var4.getCadInstances()){ var7.add(new CADInstance( var9.getTx(), var9.getTy(), var9.getTz(), var9.getRx(), var9.getRy(), var9.getRz())); } }else if(var4.getUnit()==null || var4.getUnit().isEmpty()){ for(double var10 = 0 ; var10 < var4.getAmount() ; var10 ++){ var7.add(new CADInstance(0, 0, 0, 0, 0, 0)); } }else{ var7.add(new CADInstance(0, 0, 0, 0, 0, 0)); } for(PartSubstituteLinkDTO var11:var4.getSubstitutes()){ PartMaster var12 = findOrCreatePartMaster(var1, var11.getSubstitute()); if(var12 != null) { PartSubstituteLink var13 = mapper.map(var11, PartSubstituteLink.class); List<CADInstance> var14 = new ArrayList<>(); if( var11.getCadInstances() != null){ for(CADInstanceDTO var9 : var11.getCadInstances()){ var14.add(new CADInstance( var9.getTx(), var9.getTy(), var9.getTz(), var9.getRx(), var9.getRy(), var9.getRz())); } }else if(var11.getUnit()==null || var11.getUnit().isEmpty()){ for(double var10 = 0 ; var10 < var11.getAmount() ; var10 ++){ var14.add(new CADInstance(0, 0, 0, 0, 0, 0)); } }else{ var7.add(new CADInstance(0, 0, 0, 0, 0, 0)); } var13.setCadInstances(var14); var13.setSubstitute(var12); var8.add(var13); } } var6.setComponent(var5); var6.setAmount(var4.getAmount()); var6.setComment(var4.getComment()); var6.setCadInstances(var7); var6.setUnit(var4.getUnit()); var6.setSubstitutes(var8); var3.add(var6); } } return var3; } 	1	0	0	0	0	0
public void Func1() throws IOException{ clientSocket.close(); } 	0	0	1	0	1	0
"private static void Func1(final StagemonitorPlugin var1, String var2) { logger.info(""Initializing plugin {}"", var2); try { var1.Func1(new StagemonitorPlugin.InitArguments(metric2Registry, getConfiguration(), measurementSession)); var1.Func1(metric2Registry, getConfiguration()); pathsOfWidgetMetricTabPlugins.addAll(var1.getPathsOfWidgetMetricTabPlugins()); pathsOfWidgetTabPlugins.addAll(var1.getPathsOfWidgetTabPlugins()); var1.registerWidgetTabPlugins(new StagemonitorPlugin.WidgetTabPluginsRegistry(pathsOfWidgetTabPlugins)); var1.registerWidgetMetricTabPlugins(new StagemonitorPlugin.WidgetMetricTabPluginsRegistry(pathsOfWidgetTabPlugins)); onShutdownActions.add(new Runnable() { public void Func2() { var1.onShutDown(); } }); } catch (Exception e) { logger.warn(""Error while initializing plugin "" + var2 + "" (this exception is ignored)"", e); } } "	0	0	1	0	1	0
public void Func1() { if (isInitialized) { return; } isInitialized = true; client = controller.getClient(coapPath); node.getListener().setOnListHandler(event -> { handles++; checkHandles(); }); node.getListener().setOnListClosedHandler(event -> { handles--; checkHandles(); }); node.getListener().setOnSubscribeHandler(event -> { handles++; checkHandles(); }); node.getListener().setOnUnsubscribeHandler(event -> { handles--; checkHandles(); }); } 	0	0	1	0	1	0
public MainEvent Func1(EventProducerNode var1, int var2, int var3) { double var4 = 0.0; MainEvent var5 = new MainEvent(Void, var4); for (String var6 : getEvents()) { double var7 = 0.0; for (int var8 = var2; var8 < var3; var8++) var7 += proportions.get(var1).get(var8).get(var6); var7 /= (var3 - var2); if (var7 > var4) { var5 = new MainEvent(var6, var7); var4 = var7; } } return var5; } 	0	0	1	0	1	0
private int Func1() { return this.entrySetImpl().hashCode(); } 	0	0	1	0	1	0
"private static List<EngineIndependentProcess> Func1() { FileTasks.deleteDirectory(ERRORS_DIR); FileTasks.mkdirs(ERRORS_DIR); List<EngineIndependentProcess> var1 = getProcesses(); for (EngineIndependentProcess var2 : var1) { String var3 = var2.getProcess().getFileName().toString(); if (var3.startsWith(""IBR_"")) { XMLTasks.updatesNameAndNamespaceOfRootElement(IMPROVED_BACKDOOR_ROBUSTNESS.getProcess(), var2.getProcess(), var3); } else if (var3.startsWith(""BR_"")) { XMLTasks.updatesNameAndNamespaceOfRootElement(BACKDOOR_ROBUSTNESS.getProcess(), var2.getProcess(), var3); } } return var1;// make sure the happy path is the first test } "	0	0	1	0	1	0
"public static void Func1(File var1) { String var2 = var1.getAbsolutePath() + ""/../../config/"" + TOMCAT_CATALINA_PROPERTIES_FILE; File var3 = new File(var2); List<String> var4 = new ArrayList<>(); if (var3.exists()) { try { Set<ExtensionHolder> var5 = getAllExtensionsForPlatform(var1.getAbsolutePath()); if (debug) Activator.log(""""+var5); for (ExtensionHolder var6 : var5) { File var7 = new File(var6.getPath()); skipJarsByExtension(var4, var7); } Collections.sort(var4); StringBuilder var8 = new StringBuilder(); for (String var9 : var4) { if (debug) Activator.log(var9); var8.append("",\\\\"").append(""\n"").append(var9); } var8.append(""\n"").append(""\n""); String var10 = new String(Files.readAllBytes(Paths.get(var3.getAbsolutePath()))); Pattern var11 = Pattern.compile(REGEX_TO_REPLACE, Pattern.DOTALL); Matcher var12 = var11.matcher(var10); if (var12.find()) { if (debug) Activator.log(var12.group(0)); var10 = var12.replaceAll(REPLACEMENT_PREFIX + var8.toString()); } PrintWriter var13 = new PrintWriter(var3, ""UTF-8""); var13.println(var10); var13.close(); } catch (Exception e) { throw new IllegalStateException(""Failed to access the server.xml file at: "" + var2); } } else { throw new IllegalStateException(var2 + "" doesn't exist.""); } } "	0	0	1	0	1	0
"public static void Func1(File var1) { String var2 = var1.getAbsolutePath() + ""/../../config/"" + TOMCAT_SERVER_XML_FILE; File var3 = new File(var2); if (var3.exists()) { try { String var4 = new String(Files.readAllBytes(Paths.get(var3.getAbsolutePath()))); String var5 = ""startStopThreads=\""[\\d]*\""""; String var6 = ""startStopThreads=\'[\\d]*\'""; String var7 = ""<Host""; String var8 = ""<Host startStopThreads=\""0\""""; var4 = var4.replaceAll(var5, """"); var4 = var4.replaceAll(var6, """"); var4 = var4.replaceAll(var7, var8); PrintWriter var9 = new PrintWriter(var3, ""UTF-8""); var9.println(var4); var9.close(); } catch (Exception e) { throw new IllegalStateException(""Failed to access the server.xml file at: "" + var2); } } else { throw new IllegalStateException(var2 + "" doesn't exist.""); } } "	0	0	1	0	1	0
"public void Func1() { getFragmentManager().beginTransaction() .setCustomAnimations(R.animator.slide_in_right, R.animator.slide_out_left, 0, 0) .replace(R.id.fragmentContainerShow, new EpisodesFragment()) .commit(); visibleFragment = ""episodes""; } "	0	0	1	1	0	0
"@Override public void Func1() { LogManager.e(TAG, ""Func1()""); if (android.os.Build.VERSION.SDK_INT < 18) { LogManager.w(TAG, ""Not supported prior to API 18.""); return; } bluetoothCrashResolver.stop(); LogManager.i(TAG, ""Func1 called.  stopping scanning""); handler.removeCallbacksAndMessages(null); mCycledScanner.stop(); monitoringStatus.stopStatusPreservationOnProcessDestruction(); } "	0	0	1	0	0	0
public static Hashtable<String, String> Func1( Hashtable<String, String> var1) { Hashtable<String, String> var2 = var1; if (var2.get(JMSConstants.PARAM_JMS_PASSWORD) != null) { var2.put(JMSConstants.PARAM_JMS_PASSWORD, MASKING_STRING); } if (var1.get(JMSConstants.PARAM_NAMING_SECURITY_CREDENTIALS) != null) { var2.put(JMSConstants.PARAM_NAMING_SECURITY_CREDENTIALS, MASKING_STRING); } return var2; } 	1	0	1	1	1	0
private Npc Func1() { for (Npc var1 : Npcs.getNearest(201)) { if (var1 != null && var1.getDef() != null) { return var1; } } return null; } 	0	0	1	0	1	0
"@Test public void Func1() { final String var1 = ""123456789abc""; assertFalse(var1.length() == 40); assertFalse(AccessToken.isValidFormat(var1)); } "	0	0	1	0	1	0
@Test public void Func1() { assertEquals(40, VALID_TOKEN.length()); assertTrue(AccessToken.isValidFormat(VALID_TOKEN)); } 	0	0	0	1	1	0
"@BeforeGroups(groups = {""live""}) public void Func1() { super.Func1(); final VirtualBoxManager var1 = getManager(); Function<IMachine, Image> var2 = new IMachineToImage(var1, osVersionMap); adapter = new VirtualBoxComputeServiceAdapter(var1, new JustProvider(ImmutableSet.<String>of(), provider, URI.create(endpoint)), var2); } "	0	0	1	1	0	0
"public long Func1(long var1, double var2) { if (Double.isNaN(var2)) throw new IllegalArgumentException(""Value cannot be NaN""); long var3 = Math.round(var2 / factor); checkValue(Math.round(var3 * factor)); var3 <<= shift; var1 &= ~mask; return var1 | var3; } "	0	0	1	0	1	0
"@Test public void Func1() { User var1 = new User(""Michal""); userRepository.save(var1); userRepository.delete(var1); assertFalse(userRepository.findAll().iterator().hasNext()); assertFalse(userRepository.findAll(1).iterator().hasNext()); assertFalse(userRepository.exists(var1.getId())); assertEquals(0, userRepository.count()); assertNull(userRepository.findOne(var1.getId())); assertNull(userRepository.findOne(var1.getId(), 10)); try (Transaction tx = getGraphDatabaseService().beginTx()) { assertFalse(GlobalGraphOperations.at(getGraphDatabaseService()).getAllNodes().iterator().hasNext()); tx.success(); } } "	0	0	1	1	1	0
"protected List<ValidationException> Func1(Segment var1, SegmentType var2) { List<ValidationException> var3 = new ArrayList<ValidationException>(); List<Integer> var4 = new ArrayList<Integer>(); int var5 = 1; for (SegmentType.Field var6 : var2.getFields()) { UsageInfo var7 = new UsageInfo(var6); if (!var7.disallowed()) { var4.add(var5); try { List<Type> var8 = nonEmpty(var1.getField(var5)); var3.addAll(testCardinality(var8.size(), var7)); if (validateChildren) { for (Type var9 : var8) { boolean var10 = true; // var10 var6 value when checking length if (var2.getName().equalsIgnoreCase(""MSH"") && var5 < 3) { var10 = false; } List<ValidationException> var11 = testField(var9, var6, var10); for (ValidationException var12 : var11) { var12.setFieldPosition(var5); } var3.addAll(var11); } } } catch (HL7Exception he) { profileNotHL7Compliant(var3, FIELD_NOT_FOUND, var5); } } ++var5; } var3.addAll(checkForExtraFields(var1, var4)); for (ValidationException var12 : var3) { var12.setSegmentName(var2.getName()); } return var3; } "	0	0	1	0	1	0
@MetaDataRetriever public MetaData Func1(final MetaDataKey var1) throws SomeException { DefaultMetaDataBuilder var2 = new DefaultMetaDataBuilder(); return new DefaultMetaData(var2.build()); } 	1	1	0	1	0	0
"private void Func1() throws Exception { String var1 = (String) updatedProfile.getProperty(Profile.FIRST_NAME); String var2 = (String) updatedProfile.getProperty(Profile.LAST_NAME); String var3 = (String) updatedProfile.getProperty(Profile.EMAIL); String var4 = var1 + "" "" + var2; boolean var5 = false; User var6 = organizationService.getUserHandler().findUserByName(this.userName); if(var6 == null) { return; } if (!var6.getFirstName().equals(var1)) { var6.setFirstName(var1); var5 = true; } if (!var6.getLastName().equals(var2)) { var6.setLastName(var2); var5 = true; } if (!var6.getEmail().equals(var3)) { var6.setEmail(var3); var5 = true; } if (!var6.getDisplayName().equals(var4)) { var6.setDisplayName(var4); var5 = true; } if (var5) { organizationService.getUserHandler().saveUser(var6, true); } } "	1	0	1	0	1	0
public double Func1(double var1) { return 20D*(var1 - .5); } 	0	0	0	1	0	0
"private synchronized void Func1() { double var1 = (new Date()).getTime() / TIMESTAMP_DIVIDER; List<String> var2 = new ArrayList<>(this.latencies.keySet()); for (String var3: var2) { List<Map<String, Double>> var4 = new ArrayList<>(); List<Map<String, Double>> var5 = this.latencies.get(var3); for (Map<String, Double> var6: var5) { if (var1 - var6.get(""d"") > MAXIMUM_LATENCY_DATA_AGE) { var4.add(var6); } } if (var4.size() > 0) { var5.removeAll(var4); } if (var5.size() == 0) { this.latencies.remove(var3); } } } "	0	0	1	1	1	0
"public synchronized void Func1(long var1, PNOperationType var2) { if (var2 != PNOperationType.PNSubscribeOperation && var1 > 0) { String var3 = TelemetryManager.endpointNameForOperation(var2); if (var3 != null) { double var4 = (new Date()).getTime() / TIMESTAMP_DIVIDER; List<Map<String, Double>> var5 = this.latencies.get(var3); if (var5 == null) { var5 = new ArrayList<>(); this.latencies.put(var3, var5); } Map<String, Double> var6 = new HashMap<>(); var6.put(""d"", var4); var6.put(""l"",  ((double) var1 / TIMESTAMP_DIVIDER)); var5.add(var6); } } } "	0	0	1	1	1	0
"@Override public Tuple Func1(final ExecutionContext var1, final FunctionDefinition var2) { Objects.requireNonNull(var2); if (var2.getArgNumber() == 1) { return Tuple.create(Arrays.stream(arrayContents).map(Constant<Object>::new).filter(var3 -> { final FunctionCall var4 = new FunctionCall(var2, Lists.newArrayList(var3)); var4.eval(var1); final Object var5 = var4.getAnnotation(); if (var5 instanceof Boolean) { return (Boolean) var5; } else { throw new IllegalArgumentException(""Filtering function must return a boolean.""); } }).map(AnnotatedTree::getAnnotation).toArray()); } throw new IllegalArgumentException(""Mapping Function must take one parameter.""); } "	0	0	1	0	0	0
"@Override public Object Func1(final ExecutionContext var1, final Object var2, final FunctionDefinition var3) { Objects.requireNonNull(var3); if (var3.getArgNumber() == 2) { return Arrays.stream(arrayContents).Func1((first, second) -> { final FunctionCall var4 = new FunctionCall(var3, Lists.newArrayList(new Constant<>(first), new Constant<>(second))); var4.eval(var1); return var4.getAnnotation(); }).orElse(var2); } throw new IllegalArgumentException(""Reducing Function must take two parameters.""); } "	0	0	0	1	0	0
private synchronized void Func1(UPBMessage var1) { for (Listener var2 : listeners) { var2.messageReceived(var1); } } 	0	0	1	0	1	0
"private void Func1(String var1, String var2) throws SQLException { String var3 = ""insert into INFERENCE_RULE (DATAELEM_ID, RULE, TARGET_ELEM_ID) select ?, RULE, TARGET_ELEM_ID from INFERENCE_RULE where DATAELEM_ID = ?""; PreparedStatement var4 = null; try { var4 = this.conn.prepareStatement(var3); var4.setInt(1, Integer.valueOf(var2)); var4.setInt(2, Integer.valueOf(var1)); var4.executeUpdate(); } finally { if (var4 != null) { var4.close(); } } } "	0	0	1	0	1	0
@Override public void Func1() { for (int var1 = oldIdx; var1 <= newIdx; var1++) { if (var1 != 0) { controllers.get(var1).setData(controllers.get(var1 - 1).getData()); } if (!controllers.get(var1).validateInput(true)) { tabPane.getSelectionModel().select(var1); break; } } getPrimaryStage().getScene().setCursor(Cursor.DEFAULT); } 	1	0	0	0	1	0
"public List<Domain> Func1() { List<Domain> var1; try { var1 = Arrays.asList(AdminReference.getAdminService().Func1()); } catch (AdminException e) { SilverTrace.error(module, ""AuthenticationService"", ""Problem to retrieve all the var1"", e); var1 = Collections.EMPTY_LIST; } return var1; } "	0	0	1	0	1	0
@Override public Authentication Func1(String var1) { Element var2 = tokens.Func1(var1); return (Authentication) ((var2 != null) ? var2.getObjectValue() : null); } 	1	1	1	1	0	0
"private void Func1(ContentResolver var1, int var2, @NonNull final IMediaTaskCallback<VideoMedia> var3) { final List<VideoMedia> var4 = new ArrayList<>(); final Cursor var5 = var1.query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, MEDIA_COL, null, null, MediaStore.Images.Media.DATE_MODIFIED + "" desc"" + "" LIMIT "" + var2 * IMediaTask.PAGE_LIMIT + "" , "" + IMediaTask.PAGE_LIMIT); try { int var6 = 0; if (var5 != null && var5.moveToFirst()) { var6 = var5.getCount(); do { String var7 = var5.getString(var5.getColumnIndex(MediaStore.Video.Media.DATA)); String var8 = var5.getString(var5.getColumnIndex(MediaStore.Video.Media._ID)); String var9 = var5.getString(var5.getColumnIndex(MediaStore.Video.Media.TITLE)); String var10 = var5.getString(var5.getColumnIndex(MediaStore.Video.Media.MIME_TYPE)); String var11 = var5.getString(var5.getColumnIndex(MediaStore.Video.Media.SIZE)); String var12 = var5.getString(var5.getColumnIndex(MediaStore.Video.Media.DATE_TAKEN)); String var13 = var5.getString(var5.getColumnIndex(MediaStore.Video.Media.DURATION)); VideoMedia var14 = new VideoMedia.Builder(var8, var7).setTitle(var9).setDuration(var13) .setSize(var11).setDataTaken(var12).setMimeType(var10).build(); var4.add(var14); } while (var5.moveToNext() && !var5.isLast() && !var5.isLast()); postMedias(var3, var4, var6); } else { postMedias(var3, var4, 0); } } finally { if (var5 != null) { var5.close(); } } } "	1	0	1	1	0	0
@Override public void Func1() { connection.getParser().map(Parser::getCallbackManager).ifPresent(this::removeCallbacks); connection.getWindowModel().getEventBus().unsubscribe(this); super.Func1(); } 	1	0	0	0	1	0
protected void Func1(ItemStack var1) { this.equippedBackpack = var1; } 	0	0	0	1	0	0
"@Override public final void Func1() { disableModules(); try { onPluginDisable(); } catch (Exception e) { warn(DARK_RED + ""Failed to disable module "" + getName()); e.printStackTrace(); } } "	0	0	1	0	1	0
"@Test public void Func1() throws IOException, ClassNotFoundException { JobDataMap var1 = new JobDataMap(); validateSerializedForm(var1, COMPARATOR, expand(""serializedforms/JobDataMapSerializationTest.Func1.{?}.ser"", ""JDK16"", ""JDK17"")); } "	0	0	1	0	1	0
@Override public OClass Func1(OClusterSelectionStrategy var1) { return Func1(var1.getName()); } 	0	0	0	1	0	0
"@SideOnly(Side.CLIENT) @SubscribeEvent() public void Func1(RenderGameOverlayEvent.Post var1) { if (ClientUtils.mc().thePlayer!=null && var1.getType() == RenderGameOverlayEvent.ElementType.TEXT) { EntityPlayer var2 = ClientUtils.mc().thePlayer; if (ClientUtils.mc().objectMouseOver!=null) { boolean var3 = var2.getHeldItem(EnumHand.MAIN_HAND) != null && Utils.isHammer(var2.getHeldItem(EnumHand.MAIN_HAND)); RayTraceResult var4 = ClientUtils.mc().objectMouseOver; if (var4!=null && var4.getBlockPos()!=null) { TileEntity var5 = var2.worldObj.getTileEntity(var4.getBlockPos()); if (var5 instanceof TileEntityCoresample) { IBlockOverlayText var6 = (IBlockOverlayText) var5; String[] var7 = var6.getOverlayText(ClientUtils.mc().thePlayer, var4, var3); boolean var8 = var6.useNixieFont(ClientUtils.mc().thePlayer, var4); ItemStack var9 = ((TileEntityCoresample) var5).var9; if (ItemNBTHelper.hasKey(var9, ""oil"") && var7 != null && var7.length > 0) { String var10 = ItemNBTHelper.hasKey(var9, ""resType"") ? ItemNBTHelper.getString(var9, ""resType"") : ""oil""; int var11 = ItemNBTHelper.getInt(var9, ""oil""); FontRenderer var12 = var8?ClientProxy.nixieFontOptional:ClientUtils.var12(); int var13 = (var8&& IEConfig.nixietubeFont)?Lib.colour_nixieTubeText:0xffffff; int var14 = var7.length; ReservoirType var15 = null; for (ReservoirType var16 : PumpjackHandler.reservoirList.keySet()) { if (var10.equals(var16.name)) { var15 = var16; } } String var17 = I18n.format(""chat.immersivepetroleum.info.var9.noOil""); if (var11 > 0) { int var18 = (var11 / 1000) * 1000; String var19 = new DecimalFormat(""#,###.##"").format(var18); Fluid var20 = FluidRegistry.getFluid(var15.fluid); String var21 = var20.getLocalizedName(new FluidStack(var20, 1)); var17 = I18n.format(""chat.immersivepetroleum.info.var9.oil"", var19, var21); } else if (var15 != null && var15.replenishRate > 0) { Fluid var20 = FluidRegistry.getFluid(var15.fluid); String var21 = var20.getLocalizedName(new FluidStack(var20, 1)); var17 = I18n.format(""chat.immersivepetroleum.info.var9.oilRep"", var15.replenishRate, var21); } var12.drawString(var17, var1.getResolution().getScaledWidth()/2+8, var1.getResolution().getScaledHeight()/2+8+var14*var12.FONT_HEIGHT, var13, true); } } } } } } "	0	0	1	1	0	0
"public void Func1() throws Exception { JsonpRepresentation var1 = new JsonpRepresentation( CALLBACK, SUCCESS_OK, new JsonRepresentation(JSON_SAMPLE)); ByteArrayOutputStream var2 = new ByteArrayOutputStream(); var1.write(var2); String var3 = ""callback({status:200,body:{'attribute': value}});""; Assert.assertEquals(var3, var2.toString()); } "	0	0	1	1	0	0
"public static InptData Func1() { InptData var1 = new InptData(); var1.setPackingPrintNumOrgn(1); var1.setPackingPrintNumCopy(2); var1.setEngPackingPrintNumOrgn(3); var1.setEngPackingPrintNumCopy(4); var1.setTmpPackingPrintNumOrgn(5); var1.setTmpPackingPrintNumCopy(6); var1.setInvoicePrintNumOrgn(7); var1.setInvoicePrintNumCopy(8); var1.setBoxNumberSeq(""BoxNumberSeq""); var1.setShippingNumber(123); var1.setMcCd(""McCd""); var1.setCustCd(""CustCd""); var1.setSupplierCd(""SupplierCd""); var1.setGlobalNo(""GlobalNo""); var1.setChildSeq(213); var1.setDataDiv(""DataDiv""); var1.setReceivableMcCd(""ReceivableMcCd""); var1.setNtvDeptNameAbb(""NtvDeptNameAbb""); var1.setPlantDeptTel(""PlantDeptTel""); var1.setPackingFlg(""PackingFlg""); var1.setPackingRetainFlg(""PackingRetainFlg""); var1.setEngPackingRetainFlg(""EngPackingRetainFlg""); var1.setTmpPackingRetainFlg(""TmpPackingRetainFlg""); var1.setInvoiceFlg(""InvoiceFlg""); var1.setInvoiceRetainFlg(""InvoiceRetainFlg""); var1.setLabelEarlyDiv(""LabelEarlyDiv""); var1.setGrp(""Grp""); var1.setGrp(""Grp""); var1.setNtv2CompanyName(""Ntv2CompanyName""); var1.setNtvBusinessInstruct1J(""NtvBusinessInstruct1J""); var1.setNtvBusinessInstruct2J(""NtvBusinessInstruct2J""); var1.setNtvBusinessInstruct3J(""NtvBusinessInstruct3J""); var1.setNtvBusinessInstruct4J(""NtvBusinessInstruct4J""); var1.setNtvBusinessInstruct5J(""NtvBusinessInstruct5J""); var1.setNtvPackingInstruct1J(""NtvPackingInstruct1J""); var1.setNtvPackingInstruct2J(""NtvPackingInstruct2J""); var1.setNtvPackingInstruct3J(""NtvPackingInstruct3J""); var1.setNtvPackingInstruct4J(""NtvPackingInstruct4J""); var1.setNtvPackingInstruct5J(""NtvPackingInstruct5J""); var1.setShipToDeliAttention(""ShipToDeliAttention""); var1.setShipToDeliDept(""ShipToDeliDept""); var1.setNtvShipToName2(""NtvShipToName2""); var1.setAutomobileStandardCd(""AutomobileStandardCd""); var1.setStorkChargeApplyDiv(""StorkChargeApplyDiv""); var1.setDeliNoteNoMjp(321); var1.setTotalSAmountMjp(222); var1.setOriginalDeliNoteNo(""OriginalDeliNoteNo""); var1.setW1DeliAttentionCd(""W1DeliAttentionCd""); return var1; } "	1	1	1	1	0	0
public int Func1() { return (mParent != null ? mParent.Func1() : 0) + mMarginBottom; } 	0	0	1	0	1	0
public int Func1() { return (mParent != null ? mParent.Func1() : 0) + mPaddingTop; } 	0	0	1	0	1	0
public int Func1() { return (mParent != null ? mParent.Func1() : 0) + mPaddingBottom; } 	0	0	1	0	1	0
"@RequestMapping(value = ""/search/{var1}"") @JsonView(FlatView.class) public List<Long> Func1(@PathVariable(value = ""var1"") String var1) throws IOException { List<Production> var2 = productionRepository.findAllValidated(); logger.info(""I search var2 with "" + var1); return var2 .stream() .filter(p -> { logger.info(String.format(""compare %s avec %s"", p.getContent().toLowerCase(), var1.toLowerCase())); return p.getContent()!=null && p.getContent().toLowerCase().contains(var1.toLowerCase()); }) .map(p -> p.getQrcode().getId()) .collect(Collectors.toList()); } "	0	0	1	0	1	0
"private CloseableHttpResponse Func1(final HttpUriRequest var1) throws IOException { AuthCache var2 = new BasicAuthCache(); var2.put(HttpHost.create(GITHUB_API_URL), new BasicScheme()); final HttpClientContext var3 = HttpClientContext.create(); var1.setHeader(new BasicHeader(HttpHeaders.ACCEPT_ENCODING, ""UTF-8"")); String var4 = var1.getURI().toString(); String var5 = cache.getProperty(var4); if (var1.getMethod() == HttpGet.METHOD_NAME && var5 != null) { var1.addHeader(""If-None-Match"", var5); } final CloseableHttpResponse var6 = httpClient.Func1(var1, var3); int var7 = var6.getStatusLine().getStatusCode(); if (var7 == HttpURLConnection.HTTP_NOT_MODIFIED) { System.out.println(""url "" + var1.getURI() + "" is not modified""); } else { if (var7 != HttpURLConnection.HTTP_OK && var7 != HttpURLConnection.HTTP_NO_CONTENT) { System.err.printf(""Could not %s to %s %n\t%s%n"", var1.getMethod(), var1.getURI(), var6.getStatusLine()); } if (var1.getMethod() == HttpGet.METHOD_NAME) { String var8 = var6.getFirstHeader(""ETag"").getValue(); if (var8 == null) { System.out.println(""ETag is not defined for uri: "" + var1.getURI()); } else { cache.put(var4, var8); cacheDirty.compareAndSet(false, true); } } } String var9 = var6.getFirstHeader(""X-RateLimit-Remaining"").getValue(); System.out.println(""X-RateLimit-Remaining: "" + var9); return var6; } "	0	0	1	0	1	0
public static InputStream Func1(final ClassLoader var1, final Class<?> var2, final String var3) { try { if (bundleReferenceClass != null && var2 != null && bundleReferenceClass.isInstance(ReflectionHelper.class.getClassLoader())) { final Bundle var4 = FrameworkUtil.getBundle(var2); final URL var5 = (var4 != null) ? var4.getEntry(var3) : null; if (var5 != null) { return var5.openStream(); } } } catch (IOException ex) { } return var1.Func1(var3); } 	0	0	1	0	0	0
public static Type[] Func1(Type var1) { if (!(var1 instanceof ParameterizedType)) { return null; } return ((ParameterizedType) var1).getActualTypeArguments(); } 	0	0	1	1	0	0
"@SuppressWarnings(""unchecked"") public static <T> Class<T> Func1(Type var1) { return eraser.visit(var1); } "	0	0	0	1	0	0
public static PrivilegedAction<Method> Func1(final Class<?> var1, final Method var2) { return new PrivilegedAction<Method>() { @Override public Method Func2() { try { return var1.getMethod(var2.getName(), var2.getParameterTypes()); } catch (NoSuchMethodException nsme) { for (final Method var3 : var1.getMethods()) { if (var3.getName().equals(var2.getName()) && var3.getParameterTypes().length == var2.getParameterTypes().length) { if (compareParameterTypes(var2.getGenericParameterTypes(), var3.getGenericParameterTypes())) { return var3; } } } return null; } } }; } 	0	0	1	0	0	0
@Override protected Class Func1(Class var1) { return var1; } 	0	0	1	1	0	0
@Override protected Class Func1(WildcardType var1) { return visit(var1.getUpperBounds()[0]); } 	0	0	0	1	0	0
@Override public boolean Func1() { if (mode.equals(CompactorMode.REPAIR)) { return getAllInputs().allIn(getInventory()); } else { if (getInputs().isEmpty()) { return false; } else { return true; } } } 	1	0	0	0	1	0
public static int Func1(int var1, int var2, int var3, float var4) { float var5 = Math.min(40.5f, var4); float var6 = LEVEL_CPMULTIPLIER.get(var5); return (int) ((double) var1 * Math.pow((double) var2, 0.5D) * Math.pow((double) var3, 0.5D) * Math.pow((double) var6, 2.0D) / 10.0D); } 	0	1	0	0	0	0
"@Override protected void Func1(final HttpServletRequest var1, final HttpServletResponse var2, final ServletContext var3, final HttpSession var4) throws IOException, ServletException { Connection var5 = null; try { final DataSource var6 = ApplicationAttributes.getDataSource(var3); var5 = var6.getConnection(); final ChallengeDescription var7 = ApplicationAttributes.getChallengeDescription(var3); final int var8 = Queries.getCurrentTournament(var5); final Tournament var9 = Tournament.findTournamentByID(var5, var8); final String var10 = var1.getParameter(""percentage""); final int var11; if (null == var10 || var10.trim().equals("""")) { var11 = 100; } else { var11 = Integer.valueOf(var10); } final double var12 = var11 / 100.0; final Set<Integer> var13 = determineTeamsMeetingPerformanceHurdle(var12, var5, var8, var7.getWinner()); var2.reset(); var2.setContentType(""var3/pdf""); var2.setHeader(""Content-Disposition"", ""filename=finalComputedScores.pdf""); final String var14 = var7.getTitle(); final SimpleFooterHandler var15 = new SimpleFooterHandler(); generateReport(var5, var2.getOutputStream(), var7, var14, var9, var15, var13); } catch (final SQLException e) { throw new RuntimeException(e); } finally { SQLFunctions.close(var5); } } "	0	0	1	0	1	0
"@EventHandler (priority = EventPriority.HIGHEST) public void Func1(final PlayerInteractEntityEvent var1) { if (p.getPlayerData(var1.getPlayer()).isSpectating() && var1.getRightClicked() instanceof Player && !var1.getRightClicked().hasMetadata(""NPC"")) { var1.setCancelled(true); } } "	0	0	1	0	1	0
@Override protected void Func1() { super.Func1(); QREader.getInstance().start(); } 	1	0	1	1	1	0
public static byte[] Func1(byte[] var1) { return Arrays.copyOf(hmac(var1, IPR_RECEIVER_ID_STRING), RECEIVER_ID_LENGTH); } 	0	0	1	1	0	0
"@Test public void Func1(){ String var1=""superadmin:1""; Subject var2 = loginSubject(var1); SimpleAuthorizationInfo var3=new SimpleAuthorizationInfo(); AuthorizationInfo var4=authorizationServiceimpl.doAuthorizationInfo(var3,1); Set<String> var5= (Set<String>) var4.getStringPermissions(); assertTrue(var5.contains(""CreateUser"")); } "	0	0	1	0	1	0
"private void Func1(Feature var1, Issue var2, Map<String, IssueField> var3) { BasicProject var4 = var2.getProject(); String var5 = this.toCanonicalFeatureStatus(var2.getStatus().getName()); String var6 = var2.getUpdateDate().toString(); var1.setsNumber(TOOLS.sanitizeResponse(var2.getKey())); var1.setsName(TOOLS.sanitizeResponse(var2.getSummary())); var1.setsStatus(TOOLS.sanitizeResponse(var5)); var1.setsState(TOOLS.sanitizeResponse(var5)); int var7 = 0; if (var2.getTimeTracking() != null && var2.getTimeTracking().getOriginalEstimateMinutes() != null) { var7 = var2.getTimeTracking().getOriginalEstimateMinutes(); } else if (var3.get(""aggregatetimeoriginalestimate"") != null && var3.get(""aggregatetimeoriginalestimate"").getValue() != null) { var7 = ((Integer)var3.get(""aggregatetimeestimate"").getValue()) / 60; } var1.setsEstimateTime(var7); IssueField var8 = var3.get(featureSettings.getJiraStoryPointsFieldName()); if (var8 != null && var8.getValue() != null && !TOOLS.sanitizeResponse(var8.getValue()).isEmpty()) { Double var9 = Double.parseDouble(TOOLS.sanitizeResponse(var8.getValue())); var1.setsEstimate(String.valueOf(var9.intValue())); } else { var1.setsEstimate(""0""); } var1.setChangeDate(TOOLS.toCanonicalDate(TOOLS.sanitizeResponse(var6))); var1.setIsDeleted(""False""); var1.setsProjectID(TOOLS.sanitizeResponse(var4.getKey())); var1.setsProjectName(TOOLS.sanitizeResponse(var4.getName())); var1.setsProjectBeginDate(""""); var1.setsProjectEndDate(""""); var1.setsProjectChangeDate(""""); var1.setsProjectState(""""); var1.setsProjectIsDeleted(""False""); var1.setsProjectPath(""""); var1.setsTeamID(TOOLS.sanitizeResponse(var4.getId())); var1.setsTeamName(TOOLS.sanitizeResponse(var4.getName())); var1.setsTeamChangeDate(""""); var1.setsTeamAssetState(""""); var1.setsTeamIsDeleted(""False""); var1.setsOwnersState(Arrays.asList(""Active"")); var1.setsOwnersChangeDate(TOOLS.toCanonicalList(Collections.<String>emptyList())); var1.setsOwnersIsDeleted(TOOLS.toCanonicalList(Collections.<String>emptyList())); } "	0	0	0	1	0	0
"@Override public List<AtmosphereRequest> Func1(WebSocket var1, Reader var2) { AtmosphereResourceImpl var3 = (AtmosphereResourceImpl) var1.var3(); if (var3 == null) { logger.trace(""The WebSocket has been closed before the message was processed.""); return null; } AtmosphereRequest var4 = var3.getRequest(); List<AtmosphereRequest> var5 = new ArrayList<AtmosphereRequest>(); var5.add(constructRequest(var3, var4.getPathInfo(), var4.getRequestURI(), methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).reader(var2).build()); return var5; } "	1	1	0	0	0	0
"@Override public List<AtmosphereRequest> Func1(WebSocket var1, byte[] var2, final int var3, final int var4) { AtmosphereResourceImpl var5 = (AtmosphereResourceImpl) var1.var5(); if (var5 == null) { logger.trace(""The WebSocket has been closed before the message was processed.""); return null; } AtmosphereRequest var6 = var5.getRequest(false); if (!var5.isInScope()) return Collections.emptyList(); List<AtmosphereRequest> var7 = new ArrayList<AtmosphereRequest>(); var7.add(constructRequest(var5, var6.getPathInfo(), var6.getRequestURI(), methodType, contentType.equalsIgnoreCase(TEXT) ? null : contentType, destroyable).body(var2, var3, var4).build()); return var7; } "	1	1	0	0	0	0
"@Override public String Func1() { return MoreObjects.toStringHelper(this) .add(""super"", super.Func1()) .add(""id"", id) .add(""name"", name) .add(""dataType"", dataType) .add(""scaleLevel"", scaleLevel) .add(""label"", label) .add(""values"", values) .add(""description"", description) .add(""accessWays"", accessWays) .add(""filterExpression"", filterExpression) .add(""filterDescription"", filterDescription) .add(""filterExpressionLanguage"", filterExpressionLanguage) .add(""distributionSvg"", distributionSvg) .add(""sameVariablesInPanel"", sameVariablesInPanel) .add(""conceptId"", conceptId) .add(""statistics"", statistics) .add(""generationDetails"", generationDetails) .add(""atomicQuestionId"", atomicQuestionId) .add(""dataSetsIds"", dataSetsIds) .Func1(); } "	0	0	1	0	0	0
private static byte[] Func1(SequentialReader var1, int var2) throws IOException { ByteArrayOutputStream var3 = new ByteArrayOutputStream(); int var4 = var2; while (var4 > 0) { var3.write(var1.getBytes(var4), 0, var4); var4 = var1.getByte(); } return var3.toByteArray(); } 	0	0	1	0	1	0
"@Test public void Func1() throws Exception { doTestTemplateExpansion(""name"", ""'value'""); } "	0	0	0	1	0	0
public DataLoaderOptions<K, V> Func1(boolean var1) { this.var1 = var1; return this; } 	0	0	0	1	0	0
public DataLoaderOptions<K, V> Func1(boolean var1) { this.var1 = var1; return this; } 	0	0	0	1	0	0
public MovementStatus Func1(int var1, Player var2){ MovementStatus var3 = MovementStatus.INVALID_MOVEMENT; if(validatePlayer(var2)){ var3 = currentManager.damage(var1); } checkPlayer(var3, var2); return var3; } 	1	0	0	0	0	0
"private static void Func1(File var1) throws ZipException, IOException { final ZipFile var2 = new ZipFile(var1); final Enumeration var3 = var2.entries(); while (var3.hasMoreElements()) { final ZipEntry var4 = (ZipEntry) var3.nextElement(); String var5 = ""/"" + var4.getName(); if (var5.contains(""textures/skins"") && !var5.contains(""/sleeping/"")) { for (EnumProfessionGroup var6 : EnumProfessionGroup.values()) { if (var6 != EnumProfessionGroup.Any && var6 != EnumProfessionGroup.AnyExceptChild && var4.getName().contains(var6.toString())) { var6.addSkin(var5); } } } } var2.close(); } "	1	0	1	0	1	0
"public void Func1() { Utils.printBoth(String.format( I18n.format(""mw.gui.mwgui.chatmsg.regenmap.1"", new Object[0]) + "" %dx%d "" + I18n.format(""mw.gui.mwgui.chatmsg.regenmap.2"", new Object[0]) + "" (%d, %d)"", (int) this.mapView.getWidth(), (int) this.mapView.getHeight(), (int) this.mapView.getMinX(), (int) this.mapView.getMinZ())); this.mw.executor.addTask2(new RebuildRegionsTask(this.mw, (int) this.mapView.getMinX(), (int) this.mapView.getMinZ(), (int) this.mapView.getWidth(), (int) this.mapView.getHeight(), this.mapView.getDimension())); } "	0	0	1	0	0	0
public int Func1() { return specifiedFieldConfigs.size(); } 	0	0	1	0	1	0
"@Override @SuppressWarnings({ ""checkstyle:designforextension"", ""checkstyle:emptyforiteratorpad"" }) protected final BitcoinBlock Func1(final long var1) { BitcoindBlockData var2 = getBitcoindService().getBlockData(var1); if (var2 != null) { final List<String> var3 = Collections.synchronizedList(new ArrayList<String>()); var2.getTransactions() .parallelStream() .forEach(grt -> { grt.getVout() .parallelStream() .filter(v -> v != null) .forEach(v -> v.getScriptPubKey() .getAddresses().stream() .filter(var4 -> var4 != null) .forEach(address -> var3.add(address))); }); var3.parallelStream() .distinct() .filter(address -> getAddressRepository().findByAddress(address) == null) .forEach(address -> { try { BitcoinAddress var4 = new BitcoinAddress(address); getAddressRepository().save(var4); addLog(""Address "" + address + "" created with id "" + var4.getId()); } catch (Exception e) { throw new RuntimeException(""Error creating address "" + address, e); } }); return getBlockRepository().findByHeight(var1); } else { addError(""No response from bitcoind for block n°"" + getFormattedBlock(var1)); return null; } } "	0	0	1	1	1	0
@Override public void Func1() { super.Func1(); fuseTicks--; if (fuseTicks <= 0) { explode(); } else { world.spigot().playEffect(location.clone().add(0, 0.5D, 0), Effect.SMOKE); } } 	1	0	1	1	1	0
public String Func1() { return Hashing.md5().newHasher().putString(getClientIdentifier() + getDesiredOpponentIdentifier() + getSalt(), Charsets.UTF_8).toString(); } 	0	0	1	1	1	0
"@RequestMapping(method = RequestMethod.POST, value = ""/Func1"", produces = ""application/json; charset=utf-8"") public ResponseEntity<HashMap<String, Serializable>> Func1(@RequestParam(""var1"") String var1) { if (StringUtils.isEmpty(var1)) { Logger.error(""TransactionController"", ""Func1"", var1, ""empty transaction Id""); return new ResponseEntity<>(HttpStatus.BAD_REQUEST); } Transaction var2 = transactionRepo.findByDataHash(var1); if (var2 == null) { Logger.error(""TransactionController"", ""Func1"", var1, ""no transaction found in our servers for data="" + var1); return new ResponseEntity<>(HttpStatus.NO_CONTENT); } HashMap<String, Serializable> var3 = getValidatedTransactionMap(var2); if (var3 == null || var3.size() == 0) { Logger.error(""TransactionController"", ""Func1"", var1, ""no transaction found in network for var1="" + var1); return new ResponseEntity<>(HttpStatus.NO_CONTENT); } return new ResponseEntity<HashMap<String, Serializable>>(var3, HttpStatus.OK); } "	1	0	1	0	1	0
@Override protected MessageCommandFailureEvent Func1(FeedbackCommandEvent var1, WonMessage var2, FailureResponseEvent var3) { return new FeedbackCommandFailureEvent(var1, var3.getNeedURI(), var3.getRemoteNeedURI(), var3.getConnectionURI()); } 	1	0	0	0	1	0
"protected static TestResourcesFixture Func1() { try { File var1 = TestResourcesFixture.resourceNameToFile( EngineIntegrationTestBase.class, ""/""); return new TestResourcesFixture(var1); } catch (FileNotFoundException e) { throw new WrappedException(e); } } "	0	0	0	1	0	0
protected double Func1(HierarchicalLDANode var1) { return log.value(Gamma.gamma(etaSum + var1.getTotalWordCount())); } 	1	0	1	1	1	0
private PathQueryExecutor Func1() { final Profile var1 = getPermission().getProfile(); return im.Func1(var1); } 	0	0	0	1	0	0
"public List<TripMatch> Func1(User var1, TripRequestDescription var2) throws Exception { List<TripMatch> var3 = new ArrayList<>(); List<TripOffer> var4 = findAllOffers(); if (var4.size() == 0) return var3; List<Route> var5 = new ArrayList<>(); for( TripOffer var6 : var4 ) { Route var7 = var6.getRoute(); RouteLocation var8 = var7.getStart(); RouteLocation var9 = var7.getEnd(); List<RouteLocation> var10 = new ArrayList<>(); var10.add( var2.getStart() ); var10.add( var2.getEnd() ); var5 = directionsManager.getDirections( var8, var9, var10 ); if( var5 == null || var5.size() == 0 ) return new ArrayList<>(); Route var11 = var5.get(0); System.out.println(""Additional meters: "" + (var11.getDistanceInMeters() - var7.getDistanceInMeters())); System.out.println(""Max Diversion: "" + (var6.getMaxDiversionInMeters())); if( var11.getDistanceInMeters() - var7.getDistanceInMeters() < var6.getMaxDiversionInMeters() ) { List<Route> var12 = directionsManager.getDirections( var2.getStart(), var2.getEnd() ); if(var12 == null || var12.isEmpty()) return new ArrayList<>(); Route var13 = var12.get(0); long var14 = (var13.getDistanceInMeters()); long var15 = var13.getDurationInSeconds(); int var16 = (int) (var14/100.0f * var6.getPricePerKmInCents()); TripMatch var17 = new TripMatch( 0, var11, var14, var15, var16, var6.getPricePerKmInCents(), var6.getDriver(), var1); var3.add(var17); } } if( var3.size() < 2 ) return var3; Collections.sort(var3, new Comparator<TripMatch>() { @Override public int Func2(TripMatch var18, TripMatch var19) { if ( var18.getPricePerKilometerInCents() == var19.getPricePerKilometerInCents() ) return 0; return (var18.getPricePerKilometerInCents() < var19.getPricePerKilometerInCents()) ? -1 : 1; } }); int var20 = 1; int var21 = var3.get(0).getPricePerKilometerInCents(); while( var20 < var3.size() && var3.get(var20).getPricePerKilometerInCents() == var21 ) { System.out.println(""Match: "" + var3.get(var20).getEstimatedPriceInCents() + "" ""+  var3.get(var20).getPricePerKilometerInCents()); var20++; } if( var20 == var3.size() ) return var3; int var22 = var3.get(var20).getPricePerKilometerInCents(); System.out.println(""Second lowest var16: "" + var22); while( var3.size() > var20 ) var3.remove( var3.size() - 1); for( TripMatch var23 : var3 ) { var23.setPricePerKilometerInCents( var22 ); var23.setEstimatedPriceInCents( (int)(var23.getDiversionInMeters()/1000.0f * var23.getPricePerKilometerInCents()) ); System.out.println(""Match: "" + var23.getEstimatedPriceInCents() + "" ""+  var23.getPricePerKilometerInCents()); } return var3; } "	0	0	1	0	1	0
"@Test public void Func1() throws Exception { String var1 = ""public class A{ static{ \n                              \n  i++; }}""; CompilationUnit var2 = parser.parse(var1, false); String var3 = ""public class A{ static{ \n  int i = 1 /*first comment*/;\n  i++; }}""; CompilationUnit var4 = parser.parse(var3, false); List<Action> var5 = getActions(var4, var2); Assert.assertEquals(1, var5.size()); Assert.assertEquals(3, var5.get(0).getBeginColumn()); Assert.assertEquals(""int i = 1 /*first comment*/"".length() + 3, var5.get(0).getEndColumn()); Assert.assertEquals(ActionType.REMOVE, var5.get(0).getType()); assertCode(var5, var3, ""public class A{ static{ \n  \n  i++; }}""); } "	0	0	1	1	0	0
"@Override public void Func1(RuntimeServices var1) throws Exception { LOGGER.info(""Log Chute initialized""); } // Func1() "	0	0	1	0	1	0
"public static void Func1(final String[] var1) throws InitializationException, InterruptedException, InvocationTargetException { if (var1.length > 0 && ""-batch"".equals(var1[0])) { try { String[] var2 = new String[var1.length - 1]; System.arraycopy(var1, 1, var2, 0, var2.length); BatchProcessor.Func1(var2); } catch (IOException | ConfigurationException var10) { System.err.println(""Error during batch processing: "" + var10.getMessage()); var10.printStackTrace(); } return; } SingleInstanceRequestResponseDelegate var3 = SingleInstanceRequestResponseDelegate.getInstance(); SingleInstance var4 = SingleInstance.request(""OtrosLogViewer"", var3, var3, var1); if (var4 == null) { LOGGER.info(""OtrosLogViewer is already running, params send using requestAction""); System.exit(0); } LOGGER.info(""Starting application""); OtrosSplash.setMessage(""Starting application""); OtrosSplash.setMessage(""Loading configuration""); final XMLConfiguration var5 = getConfiguration(""config.xml""); if (!var5.containsKey(ConfKeys.UUID)) { var5.setProperty(ConfKeys.UUID, UUID.randomUUID().toString()); } IconsLoader.loadIcons(); OtrosSplash.setMessage(""Loading icons""); SwingUtilities.invokeAndWait(() -> { if (var5.getBoolean(APPEARANCE_CUSTOM_FONT_SIZE, false)) { final int var6 = var5.getInt(APPEARANCE_FONT_SIZE, 12); FontSize.setDefaultSize(var6); } try { String var7 = var5.getString(ConfKeys.APPEARANCE_LOOK_AND_FEEL, ""com.jgoodies.looks.plastic.PlasticXPLookAndFeel""); OtrosSplash.setMessage(""Loading L&F "" + var7); LOGGER.debug(""Initializing look and feel: "" + var7); PlasticLookAndFeel.setTabStyle(Plastic3DLookAndFeel.TAB_STYLE_METAL_VALUE); UIManager.setLookAndFeel(var7); } catch (Throwable e1) { LOGGER.warn(""Cannot initialize LookAndFeel: "" + e1.getMessage()); } try { final DataConfiguration var8 = new OtrosConfiguration(var5); final LogViewMainFrame var9 = new LogViewMainFrame(var8); var9.addComponentListener(new ComponentAdapter() { @Override public void Func2(ComponentEvent var10) { var5.setProperty(""gui.state"", var9.getExtendedState()); if (var9.getExtendedState() == Frame.NORMAL) { var5.setProperty(""gui.width"", var9.getWidth()); var5.setProperty(""gui.height"", var9.getHeight()); } } @Override public void Func3(ComponentEvent var10) { var5.setProperty(""gui.location.x"", var9.getLocation().x); var5.setProperty(""gui.location.y"", var9.getLocation().y); } }); var9.addWindowListener(var9.exitAction); SingleInstanceRequestResponseDelegate.openFilesFromStartArgs(var9.otrosApplication, Arrays.asList(var1), var9.otrosApplication.getAppProperties().getCurrentDir()); } catch (InitializationException var10) { LOGGER.error(""Cannot initialize Func1 frame"", var10); } }); } "	0	0	0	0	0	1
"private void Func1(int var1, Calendar var2) { if (!normalizer.isPreferFuture()) { return; } int var3 = 2; for (int var4 = 0; var4 < var3; var4++) { if (_tp.tunit[var4] != -1) return; } Calendar var5 = Calendar.getInstance(); if (this.normalizer.getTimeBase() != null) { String[] var6 = this.normalizer.getTimeBase().split(""-""); var5.set(Integer.valueOf(var6[0]).intValue(), Integer.valueOf(var6[1]).intValue(), Integer.valueOf(var6[2]).intValue() , Integer.valueOf(var6[3]).intValue(), Integer.valueOf(var6[4]).intValue(), Integer.valueOf(var6[5]).intValue()); } int var7 = var5.get(Calendar.DAY_OF_WEEK); if (var1 == 1) { var1 = 7; } if (var7 < var1) { return; } var2.add(Calendar.WEEK_OF_YEAR, 1); } "	1	1	1	1	0	0
private boolean Func1() { boolean var1 = false; boolean var2 = false; boolean var3 = false; if (address != null) { var1 = true; reportProblemDescriptionWrapper.setError(null); } else { reportProblemLocationWrapper.setError(getText(R.string.error_problem_location_is_empty)); } if (mReportProblemDescription.getText() != null && mReportProblemDescription.getText().length() > 0) { var2 = true; } else { reportProblemDescriptionWrapper.setError(getText(R.string.error_problem_description_is_empty)); } if (reportType != null) { var3 = true; } else { reportProblemTypeWrapper.setError(getText(R.string.error_problem_type_is_empty)); } return var1 && var2 && var3; } 	0	0	1	1	1	0
private int Func1() { return (multiGraph.graphSize() / 2); } 	0	0	1	0	0	0
"@Override public Set<Place> Func1(Place var1, Place var2) { Set<Place> var3 = new HashSet<Place>(); var1.getComments().addAll(var2.getComments()); var1.getCommentsReisestipendium().addAll(var2.getCommentsReisestipendium()); var1.getIdentifiers().addAll(var2.getIdentifiers()); var1.getLinks().addAll(var2.getLinks()); var1.getLocations().addAll(var2.getLocations()); var1.getNames().addAll(var2.getNames()); var1.getTags().addAll(var2.getTags()); var1.getProvenance().addAll(var2.getProvenance()); var1.getTypes().addAll(var2.getTypes()); var1.getGroupInternalData().addAll(var2.getGroupInternalData()); var1.setChildren(var1.getChildren() + var2.getChildren()); Set<String> var4 = new HashSet<String>(); var4.addAll(var1.getRelatedPlaces()); var4.addAll(var2.getRelatedPlaces()); var1.setRelatedPlaces(new HashSet<String>()); for (String var5 : var4) { if (var5 != null) { Place var6 = placeRepository.findOne(var5); if (var6 != null && var6.getRelatedPlaces() != null && (var6.getRelatedPlaces().contains(var1.getId()) || var6.getRelatedPlaces().contains(var2.getId()) && !var6.getId().equals(var1.getId()) && !var6.getId().equals(var2.getId()))) { var1.getRelatedPlaces().add(var5); var6.getRelatedPlaces().remove(var1.getId()); var6.getRelatedPlaces().remove(var2.getId()); var6.getRelatedPlaces().add(var1.getId()); var3.add(var6); } } } if (var1.getPrefName() == null) var1.setPrefName(var2.getPrefName()); else if (!var1.getPrefName().equals(var2.getPrefName())) var1.addName(var2.getPrefName()); if (var1.getPrefLocation() == null) var1.setPrefLocation(var2.getPrefLocation()); else if (!var1.getPrefLocation().equals(var2.getPrefLocation()) && var2.getPrefLocation() != null) var1.addLocation(var2.getPrefLocation()); List<Place> var7 = getPlaceRepository().findByParent(var2.getId()); logger.info(""got {} var7"", var7.size()); for (Place var8 : var7) { Place var9 = getFromPlaceSet(var8.getId(), var3); if (var9 != null) var9.setParent(var1.getId()); else { var8.setParent(var1.getId()); var3.add(var8); } } if (var1.getParent() == null || var1.getParent().isEmpty()) var1.setParent(var2.getParent()); else if (var2.getParent() != null && !var1.getParent().equals(var2.getParent())) { Place var10 = getFromPlaceSet(var2.getParent(), var3); if (var10 == null) var10 = placeRepository.findOne(var2.getParent()); if (var10 != null) { var1.getRelatedPlaces().add(var10.getId()); var10.getRelatedPlaces().add(var1.getId()); var3.add(var10); } } String var11 = """"; if (var1.getNoteReisestipendium() != null && !var1.getNoteReisestipendium().isEmpty()) var11 += var1.getNoteReisestipendium(); if (var2.getNoteReisestipendium() != null && !var2.getNoteReisestipendium().isEmpty()) { if (!var11.isEmpty()) var11 += ""\n\n""; var11 += var2.getNoteReisestipendium(); } if (!var11.isEmpty()) var1.setNoteReisestipendium(var11); var3.add(var1); return var3; } "	1	0	0	0	0	0
"@Override public CliAuthenticator Func1(final CLICommand var1) { return new CliAuthenticator() { @Option(name=""--username"",usage=""GitHub username to Func2 yourself to Jenkins."") public String var2; @Option(name=""--var3"",usage=""GitHub personal access token. Note that passing a var3 in arguments is insecure."") public String var3; @Option(name=""--var3-file"",usage=""File that contains the personal access token."") public String var4; public Authentication Func2() throws AuthenticationException, IOException, InterruptedException { if(var2 == null) { return Jenkins.ANONYMOUS; } if(var4 != null) { try { var3 = new FilePath(var1.channel,var4).readToString().trim(); } catch (IOException e) { throw new BadCredentialsException(""Failed to read ""+var4,e); } } if(var3 == null) { var3 = var1.channel.call(new InteractivelyAskForPassword()); } if(var3 == null) { throw new BadCredentialsException(""No GitHub personal access token specified.""); } UserDetails var5 = Func2(var2, var3); return new GithubAuthenticationToken(var3, getGithubApiUri()); } }; } "	1	0	1	1	1	0
"private synchronized void Func1( File var1 ) throws FileNotFoundException { File var2[] = var1.listFiles( filenameFilter() ); for ( File var3 : var2 ) { try { mapOfMap.put( var3.getName().split( ""\\."" )[0], loadJsonFile( var3 ) ); } catch ( Exception e ) { LOGGER.error( ""****** Error in FileDb.Func1:"", e ); } } } "	1	0	1	1	1	0
"@Transactional public Result Func1(Long var1) throws JatosGuiException { Logger.info(CLASS_NAME + "".Func1: "" + ""var1 "" + var1 + "", "" + ""logged-in user's email "" + session(Users.SESSION_EMAIL)); StudyModel var2 = studyDao.findById(var1); UserModel var3 = userService.retrieveLoggedInUser(); studyService.checkStandardForStudy(var2, var1, var3); studyService.checkStudyLocked(var2); File var4 = importExportService.getTempComponentFile(var2); ComponentModel var5 = importExportService .unmarshalComponent(var4, var2); ComponentModel var6 = componentDao .findByUuid(var5.getUuid()); boolean var7 = (var6 != null); if (var7) { componentDao.updateProperties(var6, var5); RequestScopeMessaging.success(MessagesStrings .componentsPropertiesOverwritten(var6.getId())); } else { componentDao.create(var2, var5); RequestScopeMessaging.success(MessagesStrings .importedNewComponent(var5.getId())); } return ok(RequestScopeMessaging.getAsJson()); } "	1	1	0	0	0	0
"private void Func1(MessagePacket var1, long var2) { final SimpleDateFormat var3 = new SimpleDateFormat( ""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", Locale.US); var3.setTimeZone(TimeZone.getTimeZone(""UTC"")); Element var4 = var1.addChild(""var4"", ""urn:xmpp:var4""); Date var5 = new Date(var2); var4.setAttribute(""stamp"", var3.format(var5)); } "	0	0	0	1	0	0
"public void Func1() throws SAXParseException, IOException { Element var1 = loadMODSDocument().detachRootElement(); MCRMODSWrapper var2 = new MCRMODSWrapper(); Element var3 = new Element(""var3"", MCRConstants.MODS_NAMESPACE); var3.setAttribute(""href"", ""mir_test_00000001"", MCRConstants.XLINK_NAMESPACE); var3.setAttribute(""type"", ""series""); var1.addContent(var3); var2.setID(""JUnit"", 4711); var2.setMODS(var1); Assert.assertEquals(""There should be one related item!"",var2.getLinkedRelatedItems().size(),1); } "	0	0	1	1	1	0
public double[] Func1(Double var1, int var2, int var3) { Double var4 = var1 == null ? 0.0 : var1; ivaPercentage = getIva(var2); persontype = getPersonType(var3); ivaRetentionValue = 0; isrRetentionValue = (var4 * 0.1); if(persontype.equals(TYPE_FISICA)) { isrRetentionValue = 0; } else if(persontype.equals(TYPE_GUBERNAMENTAL)) { ivaPercentage = 0; } else if(persontype.equals(TYPE_EXTRANJERA)) { ivaPercentage = 0; isrRetentionValue = 0; } else { ivaRetentionValue = (ivaPercentage/3) * 2; } ivaValue = (var4 * ivaPercentage); subtotalValue = ivaValue + var4; totalValue = subtotalValue - (ivaRetentionValue + isrRetentionValue); return new double[] { round(var4), round(ivaValue), round(subtotalValue), round(ivaRetentionValue), round(isrRetentionValue), round(totalValue) }; } 	1	0	1	0	1	0
"@Override public void Func1(AdapterView<?> var1, View var2, int var3, long var4) { Log.d(""BaseActivity"", String.format(""Func1: %d"", var3)); if (var3 == 0) { LoginUtils.startLogin(BaseActivity.this, LoginActivity.REQUEST_CODE_LOGIN); return; } HashMap<String, Object> var5 = (HashMap<String, Object>) var1.getAdapter().getItem(var3); String var6 = (String) var5.get(""menuText""); int var7 = (Integer) var5.get(""icon""); drawerLayout.closeDrawer(GravityCompat.START); switch (var3 - 1) { case 0: Intent var8 = new Intent(BaseActivity.this, MainActivity.class); startActivity(var8); break; case 1: Intent var9 = new Intent(BaseActivity.this, ListArtistActivity.class); BaseActivity.this.startActivity(var9); break; case 2: Intent var10 = new Intent(BaseActivity.this, LifeLabActivity.class); BaseActivity.this.startActivity(var10); break; case 3: if (UserInfo.isUserLogged(BaseActivity.this)) { Intent var11 = new Intent(BaseActivity.this, FeedbackActivity.class); BaseActivity.this.startActivityForResult(var11, FeedbackActivity.REQUEST_CODE_MENU); } else { LoginUtils.startLogin(BaseActivity.this, LoginActivity.REQUEST_CODE_FEEDBACK); } break; case 5: if (UserInfo.isUserLogged(BaseActivity.this)) { Intent var12 = new Intent(BaseActivity.this, MyCollectionActivity.class); BaseActivity.this.startActivity(var12); } else { LoginUtils.startLogin(BaseActivity.this, LoginActivity.REQUEST_CODE_MY_COLLECTION); } break; case 6: if (UserInfo.isUserLogged(BaseActivity.this)) { Intent var13 = new Intent(BaseActivity.this, ListSubscribedArtistActivity.class); BaseActivity.this.startActivity(var13); } else { LoginUtils.startLogin(BaseActivity.this, LoginActivity.REQUEST_CODE_SUBSCRIBED_ARTISTS); } break; case 8: Intent var14 = new Intent(BaseActivity.this, AboutActivity.class); BaseActivity.this.startActivity(var14); break; case 9: ShareUtils var15 = new ShareUtils(BaseActivity.this); var15.setUrl(CommonUtilities.SHARE_URL); var15.setContent(getResources().getString(R.string.share_text)); Bitmap var16 = BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher); var15.setPicture(var16); var15.share(); break; case 10: var17 = new MaterialDialog.Builder(BaseActivity.this) .content(R.string.clear_cache_alert_content) .positiveColor(getResources().getColor(R.color.font_color)) .negativeColor(getResources().getColor(R.color.font_color)) .positiveText(R.string.confirm) .negativeText(R.string.cancel) .onPositive(new MaterialDialog.SingleButtonCallback() { @Override public void Func2(@NonNull MaterialDialog var17, @NonNull DialogAction var18) { var17.dismiss(); DataCleanUtils.cleanAllApplicationData(BaseActivity.this); showCacheClearedToast(); } }) .onNegative(new MaterialDialog.SingleButtonCallback() { @Override public void Func2(@NonNull MaterialDialog var17, @NonNull DialogAction var18) { var17.dismiss(); } }) .show(); break; case 11: Log.d(""BaseActivity"", ""Logout""); UserInfo.logout(BaseActivity.this); BaseActivity.this.tvusername.setText(R.string.login_gologin); BaseActivity.this.tvuserdesc.setText(R.string.login_to_see_more); imageViewSetting.setVisibility(View.GONE); imageViewUserCover.setImageResource(bgRes[1]); case 4: default: break; } } "	1	1	0	1	0	0
"private void Func1(Transaction var1, boolean var2) { if (primaryTransactions.contains(var1) && isLocalTransaction(var1)) { sendTerminateMessage(var1.transactionId); } log.info(""Terminating var1 with status "" + var2, MVTO.class); if (var2) { versioningUnit.commit(var1.transactionId); } else { versioningUnit.abort(var1.transactionId); } if (!var2 && !isLocalTransaction(var1)) remote.abortOthers(var1); transactions.remove(var1.transactionId); primaryTransactions.remove(new Integer(var1.transactionId)); } "	0	0	1	1	1	0
"public static void Func1(String[] var1) { if(var1.length != 1){ System.out.println(""USAGE: java edu.byu.ece.rapidSmith.vivado.vxdlTool.gui.VSRTool <Import Directory>""); } else if (!new File(var1[0]).exists()) { System.out.println(""ERROR: Directory does not exist""); } else { try { QApplication.setGraphicsSystem(""raster""); QApplication.initialize(var1); VSRTool var2 = new VSRTool(var1[0]); var2.show(); QApplication.execStatic(); } catch(NullPointerException e){ System.out.println(""ERROR: No Primitive Definitions found in the specified directory!\n"" + ""\tThis should be the directory generated from the 'extract_all_partial_primitive_defs' TCL script""); } } } "	0	0	1	0	1	0
"private <T> int Func1(Integer var1, PaymentDetail var2, List<DocumentIncomeType<T>> var3) throws Exception { int var4 = 0; if (LOG.isDebugEnabled()) { LOG.debug(""payee="" + var1 + "", #var3="" + var3.size()); } DocumentPaymentInformation var5 = null; for (DocumentIncomeType<T> var6 : var3) { boolean var7 = !TaxPropertyConstants.INCOME_TYPE_CODE_NOT_REPORTABLE.equals(var6.getIncomeTypeCode()); if (var7) { if (var5 == null) { var5 = taxReportingDao.getDocumentPaymentInformation(TaxHelper.getClassForDocumentType(var2.getFinancialDocumentTypeCode()), var2.getCustPaymentDocNbr()); } if (var5 != null) { Payment var8 = new Payment(); var8.setPayeeId(var1); var8.setExcludeIndicator(Boolean.FALSE); var8.setDisbursementDt(var2.getPaymentGroup().getDisbursementDate()); if (var5.isCheckACHPayment()) { var8.setDisbursementNbr(var2.getPaymentGroup().getDisbursementNbr()); var8.setPaymentGroupId(var2.getPaymentGroup().getId()); if (TaxReportingHelper.isDv(var2.getFinancialDocumentTypeCode())) { var8.setDocType(TaxConstants.DocumentTypes.DISBURSEMENT_VOUCHER_DOCUMENT); } else { var8.setDocType(var2.getFinancialDocumentTypeCode()); } } else { if (TaxReportingHelper.isPreq(var2.getFinancialDocumentTypeCode())) { var8.setDocType(PaymentRequestDocument.DOCUMENT_TYPE_NON_CHECK); } else if (TaxReportingHelper.isCm(var2.getFinancialDocumentTypeCode())) { var8.setDocType(VendorCreditMemoDocument.DOCUMENT_TYPE_NON_CHECK); } else if (TaxReportingHelper.isDv(var2.getFinancialDocumentTypeCode())) { var8.setDocType(DisbursementVoucherDocument.DOCUMENT_TYPE_DV_NON_CHECK); } } var8.setDocNbr(var2.getCustPaymentDocNbr()); var8.setInvoiceNbr(var5.getInvoiceNumber()); var8.setPoNbr(var2.getPurchaseOrderNbr()); var8.setFinChartCode(var6.getChartOfAccountsCode()); var8.setPaymentTypeCode(var6.getIncomeType().getIncomeTypeBox()); if (TaxReportingHelper.isCm(var2.getFinancialDocumentTypeCode())) { var8.setAcctNetAmount(var6.getAmount().negated()); } else { var8.setAcctNetAmount(var6.getAmount()); } if (LOG.isDebugEnabled()) { LOG.debug(""saving var8 for payee="" + var8.getPayeeId() + "", var6="" + var6.getIncomeType().getIncomeTypeBox() + "", amount="" + var6.getAmount()); } businessObjectService.save(var8); var4++; } else { LOG.warn(""unable to find documnet var8 information for payee="" + var1 + "", var6="" + var6.getIncomeType().getIncomeTypeBox() + "", documentNumber="" + var2.getCustPaymentDocNbr()); } } } return var4; } "	0	0	0	0	0	1
"private void Func1() { balance.setStyle(""-fx-text-fill: grey""); TorClient var1 = Main.bitcoin.getPeers().getTorClient(); if (var1 != null) { SimpleDoubleProperty var2 = new SimpleDoubleProperty(-1); String var3 = tr(""Initialising Tor""); syncItem = Main.instance.notificationBar.displayNewItem(var3, var2); var1.addInitializationListener(new TorInitializationListener() { @Override public void Func2(String var4, int var5) { Platform.runLater(() -> { syncItem.label.set(var3 + "": "" + var4); var2.set(var5 / 100.0); }); } @Override public void Func3() { Platform.runLater(() -> { syncItem.cancel(); showBitcoinSyncMessage(); }); } }); } bitcoinUIModel.syncProgressProperty().addListener(x -> { double var6 = bitcoinUIModel.syncProgressProperty().get(); if (var6 >= 1.0) { if (syncItem != null) { GuiUtils.runOnGuiThreadAfter(500, () -> { syncItem.cancel(); syncItem = null; balance.setStyle(""-fx-text-fill: black""); }); } } else if (syncItem == null && var6 < 1.0) { showBitcoinSyncMessage(); } }); } "	0	0	1	1	1	0
"private TitanGraph Func1() { log.fine(""Initializing graph.""); Path var1 = graphDir.resolve(""graphsearch""); Path var2 = graphDir.resolve(""titangraph""); conf = new BaseConfiguration(); conf.setProperty(""storage.directory"", var2.toAbsolutePath().toString()); conf.setProperty(""storage.backend"", ""berkeleyje""); conf.setProperty(""storage.berkeleydb.cache-percentage"", 1); conf.setProperty(""storage.buffer-size"", ""4096""); conf.setProperty(""cache.db-cache"", true); conf.setProperty(""cache.db-cache-clean-wait"", 0); conf.setProperty(""cache.db-cache-size"", .05); conf.setProperty(""cache.db-cache-time"", 0); conf.setProperty(""index.search.backend"", ""var1""); conf.setProperty(""index.search.directory"", var1.toAbsolutePath().toString()); return TitanFactory.open(conf); } "	0	0	1	0	1	0
"@Test public void Func1() { RoleEntity var1 = new RoleEntity(); var1.setRoleName(""role ut""); var1.setRoleDescription(""role desc test""); var1.setCreatedDate(new Date()); var1.setCreatedBy(""test""); var1.setLastUpdatedDate(new Date()); var1.setLastUpdatedBy(""test""); PermissionEntity var2 = new PermissionEntity(); var2.setPermissionName(""CreateUser""); PermissionEntity var3 = permissionsRepository.findByPermissionName(var2.getPermissionName()); assertNotNull(var3); Set<PermissionEntity> var4 = new HashSet<>(); var4.add(var3); var1.setPermissions(var4); RoleEntity var5 = rolesDetailsRepositorty.save(var1); RoleEntity var6 = new RoleEntity(); var6.setRoleId(var5.getRoleId()); var1.setRoleName(""edit ut""); var6.setRoleDescription(""edit ut""); PermissionEntity var7 = new PermissionEntity(); var7.setPermissionName(""WriteCGD""); Set<PermissionEntity> var8 = new HashSet<>(); var8.add(var3); var1.setPermissions(var8); var6.setPermissions(var8); RoleEntity var9 = rolesDetailsRepositorty.save(var6); assertEquals(var6.getRoleName(),var9.getRoleName()); assertEquals(var6.getRoleDescription(),var9.getRoleDescription()); } "	0	0	1	0	1	0
public void Func1() { this.mGoogleApiClient = new GoogleApiClient.Builder(this) .addApiIfAvailable(Games.API) .addConnectionCallbacks(this) .addOnConnectionFailedListener(this) .build(); } 	0	0	0	0	0	1
public Boolean Func1() { if(this.getVeraAddress() == null) return false; List<NamedIP> var1 = this.getVeraAddress().getDevices(); if(var1.get(0).getIp().contains(Configuration.DEFAULT_ADDRESS)) return false; return true; } 	0	0	1	0	1	0
"private Future Func1(Api var1) { String var2 = String.format(""/%s/apis/%s/%s/%s"", endpoint.getPath(), var1.getOrganizationId(), var1.getApiId(), var1.getVersion()); Future var3 = Future.var3(); HttpClientRequest var4 = httpClient.delete(endpoint.getPort(), endpoint.getHost(), var2, response -> { if ((response.statusCode() / 100) == 2) { var3.succeeded(); } else { var3.fail(response.statusMessage()); // TODO do something more interesting } }).exceptionHandler(var3::fail); auth.setAuth(var4); var4.end(); return var3; } "	0	0	1	0	1	0
"private List<RadarIssue> Func1(UserCredentials var1, IssueQuery var2) { try{ SonarClient var3 = createSonarClient(var1); IssueClient var4 = var3.var4(); List<RadarIssue> var5=new LinkedList<>(); Map<String, Rule> var6=new HashMap<>(); Issues var7; int var8=1; do{ var2.var8(var8); var7 = var4.find(var2); for(Issue var9:var7.list()) { Rule var10=searchInCacheOrLoadFromServer(var6, var9.ruleKey(), var1); if(var10 == null){ throw new IllegalStateException(""No such var10 in server: ""+var9.ruleKey()); } var5.add(new RadarIssue(var9, var10)); } var8++; }while(var8 <= var7.paging().pages()); return var5; }catch(HttpException ex) { if(ex.status() == UNAUTHORIZED_RESPONSE_STATUS){ throw new AuthorizationException(ex); }else{ throw ex; } } } "	1	0	1	0	0	0
protected BlockExecutionInfo Func1(QueryModel var1, AbstractIndex var2) throws QueryExecutionException { BlockExecutionInfo var3 = new BlockExecutionInfo(); SegmentProperties var4 = var2.getSegmentProperties(); List<CarbonDimension> var5 = var4.getDimensions(); KeyGenerator var6 = var4.getDimensionKeyGenerator(); List<QueryDimension> var7 = RestructureUtil .getUpdatedQueryDimension(var1.getQueryDimension(), var5); int[] var8 = QueryUtil.getMaskedByteRange(var7, var6); int[] var9 = QueryUtil.getMaskedByte(var6.getKeySizeInBytes(), var8); var3.setDimensionsExistInQuery(var7.size() > 0); var3.setDataBlock(var2); var3.setBlockKeyGenerator(var6); var3.setAggregatorInfo(getAggregatorInfoForBlock(var1, var2)); var3.setCustomAggregateExpressions(var1.getExpressions()); var3.setLimit(var1.getLimit()); var3.setDetailQuery(var1.isDetailQuery()); var3.setRawRecordDetailQuery(var1.isForcedDetailRawQuery()); var3.setMaskedByteForBlock(var9); var3 .setTotalNumberDimensionBlock(var4.getDimensionOrdinalToBlockMapping().size()); var3 .setTotalNumberOfMeasureBlock(var4.getMeasuresOrdinalToBlockMapping().size()); var3.setFixedKeyUpdateRequired( var6.equals(queryProperties.keyStructureInfo.getKeyGenerator())); IndexKey var10 = null; IndexKey var11 = null; if (null != var1.getFilterExpressionResolverTree()) { var3.setFilterExecuterTree(FilterUtil .getFilterExecuterTree(var1.getFilterExpressionResolverTree(), var4)); List<IndexKey> var12 = new ArrayList<IndexKey>(2); FilterUtil.traverseResolverTreeAndGetStartAndEndKey(var4, var1.getAbsoluteTableIdentifier(), var1.getFilterExpressionResolverTree(), var12); var10 = var12.get(0); var11 = var12.get(1); } else { try { var10 = FilterUtil.prepareDefaultStartIndexKey(var4); var11 = FilterUtil.prepareDefaultEndIndexKey(var4); } catch (KeyGenException e) { throw new QueryExecutionException(e); } } var3.setFileType( FileFactory.getFileType(var1.getAbsoluteTableIdentifier().getStorePath())); var3.setStartKey(var10); var3.setEndKey(var11); List<CarbonDimension> var13 = new ArrayList<CarbonDimension>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE); List<CarbonMeasure> var14 = new ArrayList<CarbonMeasure>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE); QueryUtil.extractDimensionsAndMeasuresFromExpression(var1.getExpressions(), var13, var14); var3.setAllSelectedDimensionBlocksIndexes(QueryUtil .getDimensionsBlockIndexes(var7, var4.getDimensionOrdinalToBlockMapping(), var1.getDimAggregationInfo(), var13)); var3.setAllSelectedMeasureBlocksIndexes(QueryUtil .getMeasureBlockIndexes(var1.getQueryMeasures(), var14, var4.getMeasuresOrdinalToBlockMapping())); var3.setKeyStructureInfo(queryProperties.keyStructureInfo); var3.setFixedLengthKeySize(getKeySize(var7, var4)); Set<Integer> var15 = new HashSet<Integer>(); List<Integer> var16 = new ArrayList<Integer>(); QueryUtil.fillQueryDimensionsBlockIndexes(var7, var4.getDimensionOrdinalToBlockMapping(), var15, var16); int[] var17 = ArrayUtils.toPrimitive( var15.toArray(new Integer[var15.size()])); Arrays.sort(var17); var3.setDictionaryColumnBlockIndex(var17); var3.setNoDictionaryBlockIndexes(ArrayUtils.toPrimitive( var16.toArray(new Integer[var16.size()]))); var3.setColumnIdToDcitionaryMapping(queryProperties.columnToDictionayMapping); var3.setEachColumnValueSize(var4.getEachDimColumnValueSize()); var3.setDimensionAggregator(QueryUtil .getDimensionDataAggregatorList1(var1.getDimAggregationInfo(), var4.getDimensionOrdinalToBlockMapping(), var4.getColumnGroupAndItsKeygenartor(), queryProperties.columnToDictionayMapping)); try { var3.setColumnGroupToKeyStructureInfo( QueryUtil.getColumnGroupKeyStructureInfo(var7, var4)); } catch (KeyGenException e) { throw new QueryExecutionException(e); } return var3; } 	1	0	1	0	0	0
"private void Func1(String var1, List<LogMessage> var2, LogMessage var3) { LogMessage var4 = findFirstMessageMatching(var2, var3.message, null); assertNull( String.format(""found log message, expected not to"", var1, var3.message) , var4 ); } "	0	0	0	1	1	0
public static void Func1(ExprContext var1, Type var2) { if (var1.exprType != null ) {  // var1.exprType may not be known int var3 = var1.exprType.getTypeIndex(); var1.promoteToType = equalityPromoteFromTo[var3][var2.getTypeIndex()]; } } 	0	0	0	1	0	0
"public static void Func1(final Reader var1, Map<String, String> var2, String... var3) throws IOException, XmlPullParserException { try { final XmlPullParserFactory var4 = XmlPullParserFactory.newInstance(); final XmlPullParser var5 = var4.newPullParser(); var5.setFeature(Xml.FEATURE_RELAXED, true); var5.setInput(var1); while (var5.next() != XmlPullParser.END_DOCUMENT) { final String var6 = var5.getName(); switch (var5.getEventType()) { case XmlPullParser.START_TAG: { final String var7 = var5.getAttributeValue(null, ""var7""); if (""input"".equalsIgnoreCase(var6) && ArrayUtils.contains(var3, var7)) { var2.put(var7, var5.getAttributeValue(null, ""value"")); } break; } } } } finally { if (var1 != null) var1.close(); } } "	0	0	1	0	0	0
"private List<Integer> Func1(Map<Integer, BibItem> var1, String var2, List<Integer> var3) { List<ReportDataEntity> var4 = new ArrayList<>(); Set<String> var5 = new HashSet<>(); Set<String> var6 = new HashSet<>(); List<Integer> var7 = new ArrayList<>(); List<String> var8 = new ArrayList<>(); List<String> var9 = new ArrayList<>(); Map<String,String> var10 = new HashMap<>(); List<String> var11 = new ArrayList<>(); List<Integer> var12 = new ArrayList<>(); List<String> var13 = new ArrayList<>(); List<ReportEntity> var14 = new ArrayList<>(); int var15=0; for (Iterator<Integer> var16 = var1.keySet().var16(); var16.hasNext(); ) { Integer var17 = var16.next(); BibItem var18 = var1.get(var17); var5.add(var18.getOwningInstitution()); var8.add(var18.getOwningInstitution()); var11.add(var18.getOwningInstitutionBibId()); var7.add(var17); var9.add(var18.getLeaderMaterialType()); var6.add(var18.getLeaderMaterialType()); if(var2.equalsIgnoreCase(RecapConstants.OCLC_NUMBER)) { var13.addAll(var18.getOclcNumber()); } else if(var2.equalsIgnoreCase(RecapConstants.ISBN_CRITERIA)) { var13.addAll(var18.getIsbn()); } else if(var2.equalsIgnoreCase(RecapConstants.ISSN_CRITERIA)) { var13.addAll(var18.getIssn()); } else if(var2.equalsIgnoreCase(RecapConstants.LCCN_CRITERIA)) { var13.add(var18.getLccn()); } var15 = var15 + 1; if(StringUtils.isNotBlank(var18.getTitleSubFieldA())) { String var19 = RecapConstants.TITLE + var15; matchingAlgorithmUtil.getReportDataEntity(var19, var18.getTitleSubFieldA(), var4); var10.put(var19, var18.getTitleSubFieldA()); } } if(var5.size() > 1) { ReportEntity var20 = new ReportEntity(); String var21 = RecapConstants.ONGOING_MATCHING_ALGORITHM; var20.setFileName(var21); var20.setInstitutionName(RecapConstants.ALL_INST); var20.setCreatedDate(new Date()); if(var6.size() == 1) { Set<String> var22 = matchingAlgorithmUtil.getMatchingAndUnMatchingBibsOnTitleVerification(var10); if(CollectionUtils.isNotEmpty(var22)) { var14.add(processCGDAndReportsForUnMatchingTitles(var21, var10, var7, var9, var8, var11, StringUtils.join(var13, "",""), var22, var2)); } var20.setType(RecapConstants.SINGLE_MATCH); try { var12 = updateCGDBasedOnMaterialTypes(var20, var7, var9, var6, var3); } catch (Exception e) { logger.error(RecapConstants.LOG_ERROR,e); } } else { var20.setType(RecapConstants.MATERIAL_TYPE_EXCEPTION); } matchingAlgorithmUtil.getReportDataEntityList(var4, var8, var7, var9, var11); matchingAlgorithmUtil.getReportDataEntity(var2, StringUtils.join(var13, "",""), var4); var20.addAll(var4); var14.add(var20); producerTemplate.sendBody(""scsbactivemq:queue:saveMatchingReportsQ"", var14); } return var12; } "	0	0	0	0	0	1
"public ReportEntity Func1(String var1, Map<String, String> var2, List<Integer> var3, List<String> var4, List<String> var5, List<String> var6, String var7, Set<String> var8, String var9) { ReportEntity var10 = new ReportEntity(); var10.setType(""TitleException""); var10.setCreatedDate(new Date()); var10.setInstitutionName(RecapConstants.ALL_INST); var10.setFileName(var1); List<ReportDataEntity> var11 = new ArrayList<>(); List<String> var12 = new ArrayList<>(); List<String> var13 = new ArrayList<>(); List<String> var14 = new ArrayList<>(); List<String> var15 = new ArrayList<>(); matchingAlgorithmUtil.prepareReportForUnMatchingTitles(var2, var3, var4, var5, var6, var8, var11, var12, var13, var14, var15); List<Integer> var16 = new ArrayList<>(); for (Iterator<String> var17 = var12.var17(); var17.hasNext(); ) { String var18 = var17.next(); var16.add(Integer.valueOf(var18)); } matchingAlgorithmUtil.getReportDataEntityList(var11, var14, var12, var13, var15); matchingAlgorithmUtil.getReportDataEntity(var9, var7, var11); var10.addAll(var11); return var10; } "	0	0	0	0	0	1
"public void Func1() { if (committed) { throw new RCUtils.RRContextException(name + "" > already committed!""); } committed = true; int var1 = effects.size(); if (var1 == 0) { return; } logger.info(name + "" > Committing "" + effects.size() + "" effects""); Iterator<Runnable> var2 = effects.iterator(); while (var2.hasNext()) { Runnable var3 = var2.next(); var3.run(); var2.remove(); } delegates.forEach(d -> d.Func1()); } "	0	0	1	0	1	0
private List<Change> Func1(RevisionResource var1, IdentifiedUser var2, boolean var3, String var4) throws ResourceConflictException, OrmException, IOException { Preconditions.checkNotNull(var4); final Timestamp var5 = TimeUtil.nowTs(); ReviewDb var6 = dbProvider.get(); ChangeData var7 = changeDataFactory.create(var6, var1.getControl()); List<ChangeData> var8 = queryProvider.get().byTopicOpen(var4); String var9 = problemsForSubmittingChanges(var8, var2); if (var9 != null) { throw new ResourceConflictException(var9); } Change var10 = var1.getChange(); ChangeUpdate var11 = updateFactory.create(var1.getControl(), var5); List<SubmitRecord> var12 = checkSubmitRule(var7, var1.getPatchSet(), var3); var11.submit(var12); var6.changes().beginTransaction(var10.getId()); try { for (ChangeData var13 : var8) { BatchMetaDataUpdate var14 = approve(var13.currentPatchSet().getId(), var13.changeControl(), var11, var2, var5); var14.write(var11, new CommitBuilder()); submitToDatabase(var6, var13.getId(), var5); } var6.commit(); } finally { var6.rollback(); } List<Change.Id> var15 = new ArrayList<>(var8.size()); List<Change> var16 = new ArrayList<>(var8.size()); for (ChangeData var13 : var8) { var15.add(var13.getId()); var16.add(var13.var10()); } indexer.indexAsync(var15).checkedGet(); return var16; } 	0	0	1	0	1	0
"@Override public void Func1(CommandConfigure var1) { Recorder var2 = var1.getRecorder(); Production var3 = var1.getProduction(var1.StartingPoint); if(var3 == null) { ConsoleUtils.exit(1, ""undefined nonterminal: "" + var1.StartingPoint); } var3.record(var2); while(var1.hasInput()) { SourceContext var4 = var1.getInputSourceContext(); Transformer var5 = var1.getTransformer(); var4.start(var2); Node var6 = var3.parse(var4, var5.newNode()); var4.done(var2); if(var6 == null) { ConsoleUtils.println(var4.getSyntaxErrorMessage()); continue; } if(var4.hasUnconsumed()) { ConsoleUtils.println(var4.getUnconsumedMessage()); } if(var2 != null) { var2.log(); } var5.transform(var1.getOutputFileName(var4), var6); String var7 = var1.getOutputFileName(); if (var7 == null) { var7 = var4.getResourceName() + "".nez""; int var8 = var7.indexOf(""/""); while(var8 > -1) { var7 = var7.substring(var8+1); var8 = var7.indexOf(""/""); } var7 = ""gen/"" + var7; } GrammarConverter var9 = loadConverter(new Grammar(var4.getResourceName())); var9.convert((AST) var6); } } "	1	0	0	0	1	0
"@Override public File Func1() { return new File(params.Func1() + File.pathSeparator +  ""build""); } "	0	0	1	0	1	0
"@Test public void Func1() throws URISyntaxException { assertTrue(testCheckVariantExistsHelper(""20:71822:C:G"")); } "	0	0	1	0	0	0
"void Func1(final Object var1, final Field var2, final RandomizationContext var3) throws IllegalAccessException { Randomizer<?> var4 = randomizerProvider.getRandomizerByField(var2); if (var4 instanceof SkipRandomizer) { return; } var3.pushStackItem(new RandomizationContextStackItem(var1, var2)); if(!var3.hasExceededRandomizationDepth()) { Object var5; if (var4 != null) { var5 = var4.getRandomValue(); } else { try { var5 = generateRandomValue(var2, var3); } catch (ObjectGenerationException e) { String var6 = String.format(""Unable to create type: %s for var2: %s of class: %s"", var2.getType().getName(), var2.getName(), var1.getClass().getName()); throw new ObjectGenerationException(var6, e); } } setProperty(var1, var2, var5); } var3.popStackItem(); } "	0	0	1	0	1	0
"protected void Func1(boolean var1) throws IOException { checkTaskIsUpToDate(""spotlessCheck"", var1); } "	0	0	1	0	1	0
"@Test public void Func1() { final String var1 = ""Condition Met""; final String var2 = ""Condition not Met""; when(restClient.query(URL, MEDIA_TYPE)).thenReturn(response); when(response.getStatus()).thenReturn(NOT_FOUND.getStatusCode()); when(response.readEntity(String.class)).thenReturn(var2); expectedException.expect(AssertionError.class); expectedException.expectMessage(EXPECTED_MESSAGE_404); poller.pollUntilFoundWithCondition(URL, MEDIA_TYPE, DELAY_IN_MILLIS, response -> response.equals(var1)); } "	0	0	1	1	1	0
"public void Func1(FileObject var1) { try { boolean var2 = true; if (var1.getName().getScheme().startsWith(""http"")) { var2 = false; } final LoadingInfo var3 = Utils.var3(var1, var2); LogImporter var4 = chooseImporter(var3); if (isInvalid(var4)) { handleInvalidImporter(var1); return; } final LogViewPanelWrapper var5 = createPanelForLog(var1, var3, var4); otrosApplication.addClosableTab(getTabName(var1), var1.getName().getFriendlyURI(), Icons.FOLDER_OPEN, var5, true); startThreadToImportLogDataFromFile(var1, var3, var4, var5); } catch (Exception e1) { LOGGER.error(""Error loading log ("" + var1.getName().getFriendlyURI() + ""): "" + e1.getMessage()); JOptionPane.showMessageDialog(null, ""Error loading log: "" + e1.getMessage(), ""Error"", JOptionPane.ERROR_MESSAGE); } } "	0	0	1	1	1	0
public boolean Func1(int var1) { return (var1 & flag) == flag; } 	0	0	0	1	0	0
public static void Func1() { Yaka.yvm = new YVMasm(YakaTokenManager.identLu+Yaka.yvm.getFileExtension()); Yaka.expression = new Expression(Yaka.yvm); Yaka.yvm.entete(); } 	0	0	1	0	1	0
"@RequestMapping( value=""/locations"", method=RequestMethod.GET, produces={ ""application/json"" } ) @ResponseStatus(value = HttpStatus.OK) public List<PlayerNameAndLocationResponse> Func1() { log.debug(""Mapped GET /var3/locations""); List<PlayerNameAndLocationResponse> var1 = new ArrayList<PlayerNameAndLocationResponse>(); List<Player> var2 = playerRegistry.getAllPlayers(); if(var2 != null) { for(Player var3 : var2) { String var4 = JsonUtils.objectToJson(var3); if(var4 != null) { log.trace(""Processing Player: {}"", var4); } PlayerNameAndLocationResponse var5 = new PlayerNameAndLocationResponse(); var5.setName(var3.getName()); var5.setLocation(var3.getLocation()); var1.add(var5); } } String var4 = JsonUtils.objectToJson(var1); if(var4 != null) { log.debug(""Returning Player response list: {}"", var4); } return var1; } "	0	0	1	0	1	0
"public void Func1(ServletRequest var1, ServletResponse var2, FilterChain var3) throws IOException, ServletException { HttpServletRequest var4 = (HttpServletRequest) var1; if (!WebloggerContext.isBootstrapped() && !isInstallUrl(var4.getRequestURI())) { log.debug(""Forwarding to install page""); RequestDispatcher var5 = context.getRequestDispatcher(""/tb-ui/install/install.rol""); var5.forward(var1, var2); } else { var3.Func1(var4, var2); } } "	0	0	0	1	1	0
@Override public int Func1() { return new HashCodeBuilder(17, 37).append(getCode()).append(getDescription()).append(lisCode).Func1(); } 	0	0	0	1	1	0
"@Test public void Func1() { Task<?> var1 = Task.par(Task.value(1), Task.value(2), Task.value(3), Task.value(4)).flatMap((a, b, c, d) -> Task.value(a + b + c + d)); runAndWait(""TestTaskFactoryMethods.Func1"", var1); assertEquals((int)var1.get(), 1 + 2 + 3 + 4); assertEquals(countTasks(var1.getTrace()), 2 + 3 + 4); } "	1	0	0	1	1	0
"@Test public void Func1() { Task<?> var1 = Task.par(Task.value(1), Task.value(2), Task.value(3), Task.value(4)).flatMap(""test"", (a, b, c, d) -> Task.value(a + b + c + d)); runAndWait(""TestTaskFactoryMethods.Func1"", var1); assertEquals((int)var1.get(), 1 + 2 + 3 + 4); assertEquals(countTasks(var1.getTrace()), 2 + 3 + 4); } "	0	0	1	1	1	0
"@Test public void Func1() { Task<?> var1 = Task.par(Task.value(1), Task.value(2), Task.value(3), Task.value(4), Task.value(5), Task.value(6), Task.value(7), Task.value(8), Task.value(9)) .flatMap((a, b, c, d, e, f, g, h, i) -> Task.value(a + b + c + d + e + f + g + h + i)); runAndWait(""TestTaskFactoryMethods.Func1"", var1); assertEquals((int)var1.get(), 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9); assertEquals(countTasks(var1.getTrace()), 2 + 3 + 9); } "	1	0	1	1	0	0
"private void Func1(Block var1) { if (log.isDebugEnabled()) { log.debug(""{}: Received broadcast block {}"", getAddress(), var1.getHashAsString()); } if (maybeHandleRequestedData(var1)) return; if (blockChain == null) { log.debug(""Received block but was not configured with an AbstractBlockChain""); return; } if (!vDownloadData) { log.debug(""{}: Received block we did not ask for: {}"", getAddress(), var1.getHashAsString()); return; } pendingBlockDownloads.remove(var1.getHash()); try { if (blockChain.add(var1)) { invokeOnBlocksDownloaded(var1, null); } else { lock.lock(); try { if (downloadBlockBodies) { final Block var2 = checkNotNull(blockChain.getOrphanRoot(var1.getHash())); blockChainDownloadLocked(var2.getHash()); } else { log.info(""Did not start chain download on solved block due to in-flight header download.""); } } finally { lock.unlock(); } } } catch (VerificationException e) { log.warn(""{}: Block verification failed"", getAddress(), e); } catch (PrunedException e) { throw new RuntimeException(e); } } "	0	0	0	1	0	0
"public PromoteResult Func1(EnvironBean var1, DeployBean var2, int var3, PromoteBean var4) throws Exception { String var5 = var4.getPred_stage(); EnvironBean var6 = environDAO.getByStage(var1.getEnv_name(), var5); if (var6 == null) { LOG.warn(""Pred env {}/{} does not exist, bail out!"", var1.getEnv_name(), var5); return new PromoteResult().withResultCode(PromoteResult.ResultCode.NoPredEnvironment); } String var7 = var6.getDeploy_id(); if (var7 == null) { LOG.debug(""Pred env {}/{} does not have deploy yet, bail out!"", var1.getEnv_name(), var5); return new PromoteResult() .withResultCode(PromoteResult.ResultCode.NoPredEnvironmentDeploy); } long var8 = Long.MAX_VALUE; String var9 = var4.getSchedule(); if (!StringUtils.isEmpty(var9)) { Pair<Boolean, Long> var10 = getScheduleCheckResult(var1, var2, var4); if (!var10.getLeft()) { return new PromoteResult() .withResultCode(PromoteResult.ResultCode.NotInScheduledTime); } var8 = var10.getRight(); } long var11 = getCurrentDeployStartDate(var2, var6, var1); DeployBean var12; if (var4.getDelay() != 0) { long var13 = Math.min(System.currentTimeMillis() - var4.getDelay() * 60 * 1000, var8); var12 = getDeployCandidateDelayed(var6.getEnv_id(), new Interval(var11, var13)); if (var12 == null) { LOG.debug(""Could not find any deploy candidate within delay period for {}/{}"", var6.getEnv_name(), var6.getStage_name()); return new PromoteResult() .withResultCode(PromoteResult.ResultCode.NoCandidateWithinDelayPeriod); } Long var14 = deployDAO.countNonRegularDeploys(var6.getEnv_id(), var12.getStart_date()); if (var14 != 0) { LOG.debug(""not deploying due to nonregular deploy in delay period for {}/{}"", var6.getEnv_name(), var6.getStage_name()); return new PromoteResult() .withResultCode(PromoteResult.ResultCode.NoRegularDeployWithinDelayPeriod); } } else { var12 = getDeployCandidateDelayed(var6.getEnv_id(), new Interval(var11, var8)); } if (var12 != null) { return new PromoteResult().withResultCode(PromoteResult.ResultCode.PromoteDeploy) .withPredDeployBean(var12, var6); } else { return new PromoteResult() .withResultCode(PromoteResult.ResultCode.NoCandidateWithinDelayPeriod); } } "	0	0	1	0	0	0
@Override public int Func1() { return (Integer.Func1(x) << 16) | (Integer.Func1(z) >> 16); } 	0	0	1	0	1	0
"private static double Func1(double[][] var1, int var2) { double var3 = 0; int var4 = 0; StringBuilder var5 = new StringBuilder(); for (double[] var6 : var1) { double var7 = var6[var2]; var5.append(var7).append(' '); if (Math.abs(var7 - NA) < EPSILON) { continue; } var3 += var7; var4++; } double var8 = var4 == 0 ? NA : (double) (var3 / var4); String var9 = ""Average("" + var5.toString().trim() + "") = "" + var8; log.fine(replaceMagicNumbers(var9)); return var8; } "	1	0	0	0	1	0
@Override public int Func1() { if (container == null) return SEVERITY_NONE; try { return container.findMaxProblemSeverity(IMarker.PROBLEM, true, IResource.DEPTH_ONE); } catch (CoreException e) { return SEVERITY_NONE; } } 	0	0	1	0	0	0
"@Override public void Func1(Random var1, int var2, int var3, World var4, IChunkGenerator var5, IChunkProvider var6) { int var7 = var4.provider.getDimension(); if(var7 == 0) { if(var1.nextFloat() < 0.005f) { BlockPos var8 = getTopBlock(var4, new BlockPos(var2 * 16, 1, var3 * 16).add(var1.nextInt(16), 0, var1.nextInt(16)).add(-3, -1, -3)).down(); loadStructure(var4, ""shrine"", var8); var8 = var8.add(3, 1, 3); var4.setBlockState(var8, Blocks.CHEST.getDefaultState().withProperty(BlockChest.FACING, EnumFacing.HORIZONTALS[var1.nextInt(4)]), 3); if(var4 instanceof WorldServer) ((TileEntityChest)var4.getTileEntity(var8)).setInventorySlotContents(13, var4.getLootTableManager().getLootTableFromLocation(HarshenLootTables.shrine).generateLootForPools(var1, new LootContext(1f, (WorldServer) var4, var4.getLootTableManager(), null, var4.getClosestPlayer(var8.getX(), var8.getY(), var8.getZ(), Integer.MAX_VALUE, false), DamageSource.MAGIC)).get(0)); } if(var2 == 44 && var3 == 44) { BlockPos var8 = getTopBlock(var4, new BlockPos(var2 * 16, 1, var3 * 16)).add(-36, -20, 1); loadStructure(var4, ""harshencastlevol2"", var8); new ChestGenerator(getSizeFromName(var4, ""harshencastlevol2""), 0.015f, HarshenLootTables.harshen_castle).Func1(var4, var1, var8.add(1, 1, 2)); new ChestGenerator(getSizeFromName(var4, ""harshencastlevol2""), 0.015f, HarshenLootTables.harshen_castle).Func1(var4, var1, var8.add(1, 5, 2)); new ChestGenerator(getSizeFromName(var4, ""harshencastlevol2""), 0.015f, HarshenLootTables.harshen_castle).Func1(var4, var1, var8.add(1, 9, 2)); } oreGenerator(this.soulore, var4, var1, var2, var3, 10, 0, 20); flowerGenerator(HarshenBlocks.harshen_soul_flower, var4, var1, var2, var3, 15); flowerGenerator(HarshenBlocks.plant_of_gleam, var4, var1, var2, var3, 15); } else if(var7 == DimensionPontus.DIMENSION_ID) { oreGenerator(this.itiumOre, var4, var1, var2, var3, 10, 0, 255); structureGenerator(var4, var1, var2, var3, 5, ""pontus/struc1"", true, new BlockPos(26, 22, 26), new BlockPos(-8, 0, -12)); } } "	0	0	0	0	0	1
"@Override public boolean Func1(MenuItem var1) { switch (var1.getItemId()) { case R.id.save: String var2 = password.getText().toString(); String var3 = login.getText().toString(); String var4 = siteName.getText().toString(); if (var2 != null || var3 != null || var4 != null) { PassList.Passes.add(var2); PassList.Names.add(var4); PassList.Logins.add(var3); Toast.makeText(getApplicationContext(), ""Saved Successfully"", Toast.LENGTH_SHORT).show(); Intent var5 = NavUtils.getParentActivityIntent(this); if (NavUtils.shouldUpRecreateTask(this, var5)) { TaskStackBuilder.create(this) .addNextIntentWithParentStack(var5) .startActivities(); } else { NavUtils.navigateUpTo(this, var5); } return true; } else { Toast.makeText(getApplicationContext(), ""Can't leave blank fields"", Toast.LENGTH_SHORT).show(); return false; } case android.R.id.home: Intent var5 = NavUtils.getParentActivityIntent(this); if (NavUtils.shouldUpRecreateTask(this, var5)) { TaskStackBuilder.create(this) .addNextIntentWithParentStack(var5) .startActivities(); } else { NavUtils.navigateUpTo(this, var5); } return true; } return super.Func1(var1); } "	0	0	1	0	1	0
"@XmlElement(name = ""dataformat"") public ArrayList<DataFormat> Func1() { return this.supportedDataFormats; } "	0	0	0	1	0	0
"public void Func1(String var1, Boolean var2, String... var3) { String var4 = ""//div[contains(@class, 'x-window-filterwindow')]//tr[contains(@class, 'x-grid-data-row')]//td[contains(@role, 'gridcell')]//div[text()='*']""; String var5; openFilterPanel(var1); _test.shortWait().until(LabKeyExpectedConditions.animationIsDone(Locator.xpath(""//div[contains(@class, 'x-window-filterwindow')]//div[contains(@class, 'x-toolbar-text')][text()='"" + var1 + ""']""))); if(var2) { String var6 = ""//div[contains(@class, 'x-window-filterwindow')]//div[contains(@class, 'x-column-header')]""; _test.shortWait().until(ExpectedConditions.elementToBeClickable(Locator.xpath(var6).toBy())); _test.scrollIntoView(Locator.xpath(var6)); _test.click(Locator.xpath(var6)); } for(String var7 : var3) { var5 = var4.replaceAll(""[*]"", var7); _test.shortWait().until(ExpectedConditions.elementToBeClickable(Locator.xpath(var5).toBy())); _test.scrollIntoView(Locator.xpath(var5)); _test.click(Locator.xpath(var5)); } applyAndWaitForGrid(new Function<Void, Void>() { @Override public Void Func2(Void var8) { _test.click(CDSHelper.Locators.cdsButtonLocator(""filter"", ""filter-btn"")); return null; } }); } "	0	0	1	1	0	0
"@Test public void Func1() throws CountryException { TimeoutConfiguration var1 = new TimeoutConfiguration(1000, CountryDAO.class.getSimpleName(), null); var1.setInterruptOnTimeout(false); daoFacade.setTimeoutConfiguration(var1); LightblueMigrationPhase.dualReadPhase(togglzRule); final Country var2 = new Country(101l, ""PL""); Mockito.when(legacyDAO.getCountry(""PL"")).thenReturn(var2); final boolean[] var3 = {false}; Mockito.when(lightblueDAO.getCountry(Mockito.anyString())).thenAnswer(new Answer<Country>() { @Override public Country Func2(InvocationOnMock var4) throws Throwable { try { Thread.sleep(1500); } catch (InterruptedException e) { var3[0] = true; throw e; } return var2; } }); Country var5 = countryDAOProxy.getCountry(""PL""); Mockito.verify(lightblueDAO).getCountry(""PL""); Mockito.verify(legacyDAO).getCountry(""PL""); Mockito.verify(consistencyChecker, Mockito.never()).checkConsistency(Mockito.any(), Mockito.any(), Mockito.anyString(), Mockito.any(MethodCallStringifier.class)); Assert.assertEquals(var2, var5); Assert.assertFalse(""Lightblue call was interrupted on timeout"", var3[0]); } "	0	0	1	0	1	0
@NonNull @Override protected GenericRepository<String, List<Repo>> Func1(RestWrapper var1) { if (genericRepository == null) { genericRepository = new GenericRepository<>(getUserReposCache(), getCloudRepositoriesDataSource(var1, sortOrder)); } return genericRepository; } 	0	0	0	0	0	1
"public JSONObject Func1(UserSession var1, JSONObject var2) throws IOException, BioStudiesClientException { String var3 = accno(var2); JSONObject var4 = data(var2); JSONObject var5 = isGeneratedAccession(var3) ? bsclient.submitNew(var4, var1.getSessid()) : bsclient.submitUpdated(var4, var1.getSessid()); String var6 = var5.getString(""var6""); if (var6.equals(""OK"")) { deleteTmpSubmission(var3, var1); } return var5; } "	0	0	1	1	1	0
public List<County> Func1() { return countiesServed; } 	0	0	1	0	0	0
"@Override public void Func1(GetPromotedEmailRequest var1) throws MessagingException, IOException, TemplateException { getPromotedMailMessage.setRecipients(Message.RecipientType.TO, var1.getEmail()); StringWriter var2 = new StringWriter(); Template var3 = var1.getLang() == Language.vi ? getPromotedTemplateVi : getPromotedTemplateEn; Map<String, Object> var4 = new HashMap<>(); GetPromotedRequest var5 = var1.getGetPromotedRequest(); String var6 = ""lang_"" + var1.getLang().getValue(); var4.put(""jobTitle"", var5.getJobTitle()); var4.put(""jobLevel"", vietnamworksConfiguration.findPath(var5.getJobLevelId().toString()).get(var6).asText()); var4.put(""jobLevelId"", var5.getJobLevelId()); var4.put(""webBaseUrl"", webBaseUrl); JsonNode var7 = vietnamworksConfiguration.findPath(""var7""); List<String> var8 = var7.findValuesAsText(""category_id""); List<String> var9 = new ArrayList<>(); var5.getJobCategories().stream() .map(aLong -> aLong.toString()) .forEach(jobCategory -> var9.add(var7.get(var8.indexOf(jobCategory)).get(var6).asText())); var4.put(""jobCategories"", var9.stream().collect(Collectors.joining("" | ""))); var4.put(""jobCategoryIds"", var9.stream().collect(Collectors.joining("",""))); GetPromotedResponse var10 = jobStatisticService.getTopDemandedSkillsByJobTitle(var5); var4.put(""totalJob"", var10.getTotalJob()); var4.put(""salaryMin"", var10.getSalaryMin()); var4.put(""salaryMax"", var10.getSalaryMax()); var4.put(""topDemandedSkills"", var10.getTopDemandedSkills()); SimpleDateFormat var11 = var1.getLang() == Language.vi ? new SimpleDateFormat(""dd/MM/yyyy"") : new SimpleDateFormat(""MM/dd/yyyy""); var4.put(""sentDate"", var11.format(new Date())); var4.put(""language"", var1.getLang().getValue()); var3.process(var4, var2); String var12 = var1.getLang() == Language.vi ? getPromotedSubjectVn : getPromotedSubjectEn; var12 = String.format(var12, var5.getJobTitle()); getPromotedMailMessage.setSubject(MimeUtility.encodeText(var12, ""UTF-8"", null)); getPromotedMailMessage.setText(var2.toString(), ""UTF-8"", ""html""); var2.flush(); mailSender.send(getPromotedMailMessage); } "	0	0	1	0	0	0
@Override float Func1(ArrayNode var1) { float var2 = 0; float var3 = 0; int var4 = 0; for (JsonNode var5 : var1) { List<JsonNode> var6 = asList(var5); var4 += var6.size(); float var7 = 0; for (JsonNode var8 : var6) { var7 += valueWidth(toString(var8)); var3 = Math.max(var3, var7); } var2 += var6.isEmpty() ? 1 : var7 / var6.size(); } averageCardinality = Math.max(1, var4 / var1.size()); float var9 = var1.size() == 0 ? 0 : (var2 / var1.size()); if (var3 > valueDefaultWidth && var3 > var9) { variableLength = true; } tableColumnWidth = Math.max(labelWidth(), Math.max(valueDefaultWidth, var9)); if (averageCardinality == 1) { averageCardinality = (int) Math.max(1, var3 / tableColumnWidth); } justifiedWidth = tableColumnWidth; return tableColumnWidth; } 	1	0	1	1	1	0
private static byte[] Func1(final URLConnection var1) throws IOException { final long var2 = var1.getContentLengthLong(); try (InputStream inputStream = var1.getInputStream()) { if (var2 > 0) { return IOUtils.Func1(inputStream, var2); } else { return IOUtils.Func1(inputStream); } } } 	0	0	1	1	0	0
public static RecordSerializer Func1(final String var1, final String var2) { try { if (var1.equals(AVRO_SERIALIZER)) { Schema.Parser var3 = new Schema.Parser(); Schema var4 = var3.parse(var2); return new AvroSerializer(var4); } else if (var1.equals(JSON_SERIALIZER)) { return new JsonSerializer(); } else if (var1.equals(KRYO_SERIALIZER)) { return new KryoSerializer(true); } else if (var1.equals(BYTES_ARRAY_SERIALIZER)) { return new BytesArraySerializer(); } else { return new NoopSerializer(); } } catch (Exception e) { logger.log(LogLevel.DEBUG, e.toString()); return new NoopSerializer(); } } 	0	0	1	0	1	0
"private int Func1(int[] var1, int var2) { try (Graph g = new Graph()) { return g.opBuilder(""Split"", ""Split"") .addInput(TestUtil.constant(g, ""split_dim"", 0)) .addInput(TestUtil.constant(g, ""var1"", var1)) .setAttr(""var2"", var2) .build() .outputListLength(""output""); } } "	0	0	0	1	0	0
"public static String Func1(String var1) { String var2 = var1; for (String var3 : IPConstants.METS_FILE_PREFIXES_TO_ACCEPT) { if (var2.startsWith(var3)) { var2 = var2.replace(var3, """"); break; } } return var2; } "	0	0	1	0	1	0
public static String Func1() { return BASE_URL; } 	0	0	1	0	0	0
"private void Func1(){ removeOutputDestinationsButton.disableProperty().bind(outputDestinationsListView.getSelectionModel().selectedItemProperty().isNull()); editOutputDestinationsButton.disableProperty().bind(outputDestinationsListView.getSelectionModel().selectedItemProperty().isNull()); outputDestinationsListView.setItems(resultsDAO.listOutputPortals()); outputDestinationsListView.setEditable(false); if(resultsDAO.listOutputPortals().isEmpty()) { OutputPortal var1 = new OutputPortal(); var1.setName(""Local File: "" + System.getProperty(""user.home"")); var1.setBasePath(System.getProperty(""user.home"")); var1.setOutputProtocol(FileTransferTypes.LOCAL); resultsDAO.saveOutputPortal(var1); } } "	0	0	1	1	1	0
"public Boolean Func1() { if (mField.is_required) { String var1 = getValue(); if (var1 == null || var1.equals("""")) { return false; } } if ((mField.data_type.equals(""numeric"")) && (!mEditText.getText().toString().equals("""")))  { try { int var1 = Integer.valueOf(mEditText.getText().toString()); } catch (Exception exc) { return false; } } return true; } "	0	0	1	1	1	0
public TaskStats Func1() { if (taskStateMachine.getState().isDone()) { DateTime var1 = DateTime.var1(); if (executionEndTime.compareAndSet(null, var1)) { lastExecutionStartTime.compareAndSet(null, var1); var23.set(System.nanoTime()); } } List<PipelineStats> var2 = ImmutableList.copyOf(transform(pipelineContexts, PipelineContext::getPipelineStats)); long var3 = 0; int var4 = 0; int var5 = 0; int var6 = 0; int var7 = 0; int var8 = 0; int var9 = 0; long var10 = 0; long var11 = 0; long var12 = 0; long var13 = 0; long var14 = 0; long var15 = 0; long var16 = 0; long var17 = 0; long var18 = 0; long var19 = 0; for (PipelineStats var20 : var2) { if (var20.getLastEndTime() != null) { var3 = max(var20.getLastEndTime().getMillis(), var3); } var4 += var20.getTotalDrivers(); var5 += var20.getQueuedDrivers(); var6 += var20.getQueuedPartitionedDrivers(); var7 += var20.getRunningDrivers(); var8 += var20.getRunningPartitionedDrivers(); var9 += var20.getCompletedDrivers(); var10 += var20.getTotalScheduledTime().roundTo(NANOSECONDS); var11 += var20.getTotalCpuTime().roundTo(NANOSECONDS); var12 += var20.getTotalUserTime().roundTo(NANOSECONDS); var13 += var20.getTotalBlockedTime().roundTo(NANOSECONDS); if (var20.isInputPipeline()) { var14 += var20.getRawInputDataSize().toBytes(); var15 += var20.getRawInputPositions(); var16 += var20.getProcessedInputDataSize().toBytes(); var17 += var20.getProcessedInputPositions(); } if (var20.isOutputPipeline()) { var18 += var20.getOutputDataSize().toBytes(); var19 += var20.getOutputPositions(); } } long var21 = this.var21.get(); if (var21 < createNanos) { var21 = System.nanoTime(); } Duration var22 = new Duration(var21 - createNanos, NANOSECONDS); long var23 = this.var23.get(); Duration var24; if (var23 >= var21) { var24 = new Duration(var23 - createNanos, NANOSECONDS); } else { var24 = new Duration(0, NANOSECONDS); } synchronized (cumulativeMemoryLock) { double var25 = (System.nanoTime() - lastTaskStatCallNanos) / 1_000_000.0; long var26 = systemMemoryReservation.get(); long var27 = (var26 + lastMemoryReservation) / 2; cumulativeMemory.addAndGet(var27 * var25); lastTaskStatCallNanos = System.nanoTime(); lastMemoryReservation = var26; } boolean var28 = var2.stream() .filter(var20 -> var20.getRunningDrivers() > 0 || var20.getRunningPartitionedDrivers() > 0) .allMatch(PipelineStats::isFullyBlocked); ImmutableSet<BlockedReason> var29 = var2.stream() .filter(var20 -> var20.getRunningDrivers() > 0 || var20.getRunningPartitionedDrivers() > 0) .flatMap(var20 -> var20.getBlockedReasons().stream()) .collect(ImmutableCollectors.toImmutableSet()); return new TaskStats( taskStateMachine.getCreatedTime(), executionStartTime.get(), lastExecutionStartTime.get(), var3 == 0 ? null : new DateTime(var3), executionEndTime.get(), var24.convertToMostSuccinctTimeUnit(), var22.convertToMostSuccinctTimeUnit(), var4, var5, var6, var7, var8, var9, cumulativeMemory.get(), new DataSize(memoryReservation.get(), BYTE).convertToMostSuccinctDataSize(), new DataSize(systemMemoryReservation.get(), BYTE).convertToMostSuccinctDataSize(), new Duration(var10, NANOSECONDS).convertToMostSuccinctTimeUnit(), new Duration(var11, NANOSECONDS).convertToMostSuccinctTimeUnit(), new Duration(var12, NANOSECONDS).convertToMostSuccinctTimeUnit(), new Duration(var13, NANOSECONDS).convertToMostSuccinctTimeUnit(), var28 && (var7 > 0 || var8 > 0), var29, new DataSize(var14, BYTE).convertToMostSuccinctDataSize(), var15, new DataSize(var16, BYTE).convertToMostSuccinctDataSize(), var17, new DataSize(var18, BYTE).convertToMostSuccinctDataSize(), var19, var2); } 	0	0	1	1	0	0
@Override public List<? extends INodeReturn> Func1() { return new ArrayList<NodeReturn>(); } 	0	0	1	0	1	0
@Override public List<ECodePart> Func1() { return new ArrayList<ECodePart>(); } 	0	0	1	0	1	0
"public void Func1(Assignment var1) { Expression var2= var1.getRightHandSide(); if (var2 instanceof ClassInstanceCreation) { ClassInstanceCreation var3= (ClassInstanceCreation) var2; if (var3.getTypeBinding().toString().equals(""java.lang.String"")) { return; } } var1.getLeftHandSide().Func1(this); print("" "" + var1.getOperator() + "" ""); if (VariableBinding.isBoolean(var1.getLeftHandSide())) { if (NumberLiteral.isZero(var2)) { print(""false""); } if (NumberLiteral.isOne(var2)) { print(""true""); } else { var2.Func1(this); } } else { var2.Func1(this); } } "	0	0	0	1	0	0
public String[] Func1(){ return (String[])this.items.toArray(); } 	0	0	1	1	1	0
"public static void Func1(String var1) throws IOException, HttpException { String var2 = ""shensel""; String var3 = ""resources/verification/ExampleGraphClasses_initial.triples""; String var4 = DatasetGenerationManagement.readFileToString(var3); DatasetGenerationManagement.createNewGraph(var1); DatasetGenerationManagement.executeInsertQuery(var2, ""Initial commit"", var1, ""0"", var4); DatasetGenerationManagement.createNewBranch(var2, ""Create a new branch B1"", var1, ""1"", ""B1""); DatasetGenerationManagement.createNewBranch(var2, ""Create a new branch B2"", var1, ""1"", ""B2""); String var5 = ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://eatld.et.tu-dresden.de/mso/Unit> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://www.w3.org/2000/01/rdf-schema#label> \""T4\""@en . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/rfid> \""E00401007837683C\""@en . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/hasEquipment> <http://eatld.et.tu-dresden.de/batch/A3A5R02ZZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/isPartOfProcessCell> <http://eatld.et.tu-dresden.de/batch/A3A5R03UZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/hasEquipment> <http://eatld.et.tu-dresden.de/batch/A3A5R06OZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/hasEquipment> <http://eatld.et.tu-dresden.de/batch/A3A5R01ZZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/comosUid> \""A3A5R07QZU\""@en . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/plantID> \""=TUDPLT.A1.T4\""@en . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/hasEquipment> <http://eatld.et.tu-dresden.de/batch/A3A5R02BZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/hasEquipment> <http://eatld.et.tu-dresden.de/batch/A3A5R1AMZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/hasEquipment> <http://eatld.et.tu-dresden.de/batch/A3A5R05NZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://eatld.et.tu-dresden.de/mso/hasEquipment> <http://eatld.et.tu-dresden.de/batch/A3A5R01PZU> . \n"" + ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> <http://www.w3.org/2000/01/rdf-schema#comment> \""Subplant flush\""@en . \n""; DatasetGenerationManagement.executeInsertQuery(var2, ""First commit to B1"", var1, ""B1"", var5); DatasetGenerationManagement.executeDeleteWhereQuery(var2, ""Second commit to B1"", var1, ""B1"", ""<http://eatld.et.tu-dresden.de/batch/A3A5R07QZU> ?p ?o . \n""); DatasetGenerationManagement.executeInsertQuery(var2, ""First commit to B2"", var1, ""B2"", var5); DatasetGenerationManagement.executeDeleteWhereQuery(var2, ""Second commit to B2"", var1, ""B2"", ""<http://eatld.et.tu-dresden.de/batch/A3A5R01TZU> ?p ?o . \n""); logger.info(""Example graph created.""); } "	0	0	1	0	1	0
"@Override public void Func1(final Stage var1) throws Exception { ClassLoader var2 = ClassLoader.getSystemClassLoader(); URL var3 = var2.getResource(""images/var3-desktop.png""); assert var3 != null; Image var4 = new Image(var3.toString()); var1.getIcons().add(var4); var1.setResizable(false); var1.setTitle(""HotSLogs UploaderFX""); StormHandler var5 = new StormHandler(); addToTray(var3, var1, var5); Flow var6 = new Flow(HomeController.class); FlowHandler var7 = var6.createHandler(new ViewFlowContext()); ViewFlowContext var8 = var7.getFlowContext(); SimpleHttpClient var9 = new SimpleHttpClient(); ReleaseManager var10 = new ReleaseManager(var9); registerInContext(var8, var5, var10, setupFileHandler(var5), var9); DefaultFlowContainer var11 = new DefaultFlowContainer(); var10.verifyLocalVersion(var5); StackPane var12 = var7.Func1(var11); var1.setScene(new Scene(var12)); var1.show(); } "	1	1	1	1	0	0
private void Func1(Row var1, TeamHelper var2, Map<Chart, Pair<LineChartData, List<ChartAxis>>> var3, Map<ScoutMetric<Void>, Chart> var4) { if (isUnsupportedDevice()) return; Sheet var5 = var1.getSheet(); int var6 = var1.getRowNum(); int var7 = var1.getSheet().getRow(0).getLastCellNum() - 2; Chart var8 = null; Pair<Integer, ScoutMetric<Void>> var9 = null; List<Row> var10 = getAdjustedList(var1.getSheet()); for (int var11 = var1.getRowNum(); var11 >= 0; var11--) { ScoutMetric var12 = getMetricForScouts(mScouts.get(var2), mCache.getMetricKey(var10.get(var11))); if (var12.getType() == MetricType.HEADER) { var9 = Pair.create(var11, var12); Chart var13 = var4.get(var12); if (var13 != null) var8 = var13; break; } } chartFinder: if (var9 == null) { for (Chart var14 : var3.keySet()) { if (var14 instanceof XSSFChart) { XSSFChart var15 = (XSSFChart) var14; if (var15.getGraphicFrame().getAnchor().getRow1() == Constants.SINGLE_ITEM) { var9 = Pair.create(0, getMetricForChart(var15, var4)); var8 = var15; break chartFinder; } } } var9 = Pair.create(0, new ScoutMetric<>(null, null, MetricType.HEADER)); } LineChartData var16; if (var8 == null) { Drawing var17 = var5.createDrawingPatriarch(); Integer var18 = var9.first + 1; int var19 = var7 + 3; var8 = var17.createChart( createChartAnchor(var17, getChartRowIndex(var18, new ArrayList<>(var3.keySet())), var19, var19 + 10)); LineChartData var20 = var8.getChartDataFactory().createLineChartData(); var16 = var20; ChartAxis var21 = var8.getChartAxisFactory() .createCategoryAxis(AxisPosition.BOTTOM); ValueAxis var22 = var8.getChartAxisFactory().createValueAxis(AxisPosition.LEFT); var22.setCrosses(AxisCrosses.AUTO_ZERO); ChartLegend var23 = var8.getOrCreateLegend(); var23.setPosition(LegendPosition.RIGHT); var3.put(var8, Pair.create(var20, Arrays.asList(var21, var22))); var4.put(var9.second, var8); } else { var16 = var3.get(var8).first; } ChartDataSource<String> var24 = DataSources.fromStringCellRange( var5, new CellRangeAddress(0, 0, 1, var7)); var16.addSeries( var24, DataSources.fromNumericCellRange( var5, new CellRangeAddress(var6, var6, 1, var7))) .setTitle(var1.getCell(0).getStringCellValue()); } 	1	1	1	1	0	0
"private void Func1(LineReader var1) { int var2 = 0; this.types.setLabeled(true); while (var1.hasNext()) { String var3 = var1.next().trim(); var2++; ArrayList<String> var4 = new ArrayList<String>(Arrays.asList(var3.split(""\\s\\|{3}\\s""))); String var5 = null; if (var3.startsWith(""["")) { if (var4.size() < 4) { logger.warning(""Incomplete var1 var3 at var3 "" + var2); continue; } var5 = var4.remove(0); } else { if (var4.size() < 3) { logger.warning(""Incomplete phrase var3 at var3 "" + var2); logger.warning(var3); continue; } var5 = ""[X]""; } String[] var6 = var4.get(0).split(""\\s""); String[] var7 = var4.get(1).split(""\\s""); String[] var8 = var4.get(2).split(""\\s""); max_source_len = Math.max(max_source_len, var6.length); Vocabulary.id(var5); try { for (String var9 : var6) { Vocabulary.id(var9); if (FormatUtils.isNonterminal(var9)) { Vocabulary.id(FormatUtils.stripNonTerminalIndex(var9)); } } for (String var10 : var7) { Vocabulary.id(var10); if (FormatUtils.isNonterminal(var10)) { Vocabulary.id(FormatUtils.stripNonTerminalIndex(var10)); } } } catch (java.lang.StringIndexOutOfBoundsException e) { System.err.println(String.format(""* Skipping bad var1 var3 '%s'"", var3)); continue; } int var11 = 0; for (int var12 = 0; var12 < var8.length; ++var12) { if (var8[var12].contains(""="")) { String[] var13 = var8[var12].split(""=""); if (var13[0].equals(""Alignment"")) continue; types.observe(Vocabulary.id(var13[0]), Float.parseFloat(var13[1])); } else { types.observe(Vocabulary.id(String.valueOf(var11++)), Float.parseFloat(var8[var12])); } } } } "	0	0	0	0	0	1
@Override public boolean Func1() { if (mqttService != null) return mqttService.Func1(clientHandle); else return false; } 	1	0	1	0	1	0
"public static void Func1(String var1[]) throws IOException { ItalianTokenizer var2 = new ItalianTokenizer(); String var3 = ""Clinton in testa nei sondaggi dopo l’«assoluzione» dell’Fbi sull’uso di un server di posta privato quando era Segretario di stato.""; long var4 = System.currentTimeMillis(); List<List<CoreLabel>> var5 = var2.parse(var3); var4 = System.currentTimeMillis() - var4; for (int var6 = 0; var6 < Math.min(10, var5.size()); var6++) { List<CoreLabel> var7 = var5.get(var6); for (CoreLabel var8 : var7) { System.out.println(var8.word() + "" -- "" + var8.originalText() + "" -- "" + var8.beginPosition()); } System.out.println(); } int var9 = var5.size(); int var10 = var5.get(var9 - 1).get(var5.get(var9 - 1).size() - 1).index(); System.out.println(""Length: "" + var3.length()); System.out.println(""Time: "" + var4); System.out.println(""Sentences: "" + var9); System.out.println(""Tokens: "" + var10); } "	0	0	1	0	1	0
"public static void Func1() { if (enabled) { return; } enabled = true; formatter = new SimpleDateFormat(""MM-dd-yyyy_HH-mm-ss""); filePath = ""log/LogFile_"" + formatter.format(Calendar.getInstance().getTime()) + "".txt""; File var1 = new File(filePath); try { if (!var1.exists()) { if (!var1.createNewFile()) { System.err.println(""Could not create var1""); return; } } logFile = new PrintWriter(var1, ""UTF-8""); logInfo(""enabled logging""); } catch	(IOException ex) { System.err.println(""IOException caught: "" + ex.getMessage()); } } "	0	0	1	0	1	0
"private void Func1() { ViewPagerAdapter var1 = (ViewPagerAdapter) viewPager.getAdapter(); Fragment var2 = var1.getItem(viewPager.getCurrentItem()); if (var2 instanceof MainActivityFragment) { startActivityForResult(new Intent(this, AddItemToDB.class), ADD_ITEM_REQUEST_CODE); } else if (var2 instanceof CartFragment) { SharedPreferences var3 = PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext()); if (var3.getBoolean(""vision_api_use"", true)) { int var4 = GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(this.getApplicationContext()); if (var4 == ConnectionResult.SUCCESS) { Intent var5 = new Intent(this, VisionApiBarcodeCameraActivity.class); startActivityForResult(var5, VISION_REQUEST_CODE); } else { fallbackToOldBarcodeHandling(); } } else { fallbackToOldBarcodeHandling(); } } else if (var2 instanceof HistoryFragment){ Snackbar.make(coordinatorLayout, ""To Remove this FAB"", Snackbar.LENGTH_SHORT).show(); } } "	0	0	1	0	1	0
@Override protected void Func1(int var1, int var2) { int var3 = MeasureSpec.getMode(var1); int var4 = MeasureSpec.getSize(var1); int var5 = MeasureSpec.getMode(var2); int var6 = MeasureSpec.getSize(var2); int var7 = getSuggestedMinimumWidth(); int var8; if (var3 == MeasureSpec.EXACTLY) { var8 = var4; } else if (var3 == MeasureSpec.AT_MOST) { var8 = Math.min(var7, var4); } else { var8 = var7; } int var9 = 0; int var10; if (mCryptogram != null) { float var11 = mBoxH / 4; float var12 = 0, var13 = mBoxH; for (String var14 : mWords) { float var15 = var14.length() * mBoxW; if (var12 + var15 > var8) { var12 = 0; var13 += mBoxH * 2 + var11 * 2; } for (int var16 = 0; var16 < var14.length(); var16++) { var12 += mBoxW; } var12 += mBoxW; } var9 = (int) (var13 + mBoxH + var11 * 2); } if (var5 == MeasureSpec.EXACTLY) { var10 = var6; } else if (var5 == MeasureSpec.AT_MOST) { var10 = Math.min(var9, var6); } else { var10 = var9; } setMeasuredDimension(var8, var10); } 	0	0	1	0	1	0
@Override public Integer Func1(ResultSet var1) throws SQLException { Integer var2 = null; if (var1.next()) { var2 = new Integer(var1.getInt(1)); } return var2; } 	0	0	1	0	1	0
"protected static String Func1(Address var1) { String var2=UUID.get(var1); return (addressAsString(var1) + (var2 != null? ""."" + var2 + SUFFIX : SUFFIX)) .replace(File.separatorChar, '-'); } "	0	0	1	0	0	0
"public static List<Product> Func1(String var1) { List<Product> var2 = new ArrayList(); Connection var3 = null; PreparedStatement var4 = null; ResultSet var5 = null; try { StringBuilder var6 = new StringBuilder(); var6.append(""SELECT var7, var8, var9, var10, var11, var12""); var6.append(""FROM Product ""); var6.append(""WHERE var11 = '"" + var1 + ""' ""); var6.append(""ORDER BY var12 ASC ""); var3 = getConnection(); var4 = var3.prepareStatement(var6.toString()); var5 = var4.executeQuery(); while (var5.next()) { String var7 = var5.getString(""var7""); String var8 = var5.getString(""var8""); float var9 = var5.getFloat(""var9""); String var10 = var5.getString(""var10""); String var11 = var5.getString(""var11""); int var12 = var5.getInt(""var12""); var2.add(new Product(var12, var8, var7, var9, var10, var11, null, null, 0)); } } catch (Exception ex) { LogManager.getLogger(DataStorage.class).fatal(""get Product List error"", ex); } finally { safeClose(var5); safeClose(var4); safeClose(var3); } return var2; } "	0	0	1	0	1	0
"void Func1(Element var1, List<ModelAction> var2, String var3, boolean var4, Map<String, Element> var5) { final boolean var6 = true; final boolean var7 = false; if (var4) { List<Element> var8 = new ArrayList<Element>(); var8.addAll(UtilXml.childElementList(var1, ""include-elements"")); var8.addAll(UtilXml.childElementList(var1, ""include-var2"")); for (Element var9 : getMergedIncludeDirectives(var8, menuLocation)) { String var10 = var9.getAttribute(""menu-name""); String var11 = var9.getAttribute(""resource""); String var12 = var9.getAttribute(""recursive""); if (""no"".equals(var12) || ""includes-only"".equals(var12) || ""extends-only"".equals(var12) || ""full"".equals(var12)) { Element var13 = loadIncludedMenu(var10, var11, var1, var3, var5, var6, var7); if (var13 != null) { String var14; if (UtilValidate.isNotEmpty(var11)) { var14 = var11; } else { var14 = var3; } if (""extends-only"".equals(var12) || ""full"".equals(var12)) { String var15 = var13.getAttribute(""extends-resource""); String var16 = var13.getAttribute(""extends""); if (UtilValidate.isNotEmpty(var16)) { Element var17 = loadIncludedMenu(var16, var15, var13, var3, var5, var6, var7); if (var17 != null) { Func1(var17, var2, var14, true, var5); } else { Debug.logError(""Failed to find (via include-var2 or include-elements) parent menu definition '"" + var16 + ""' in resource '"" + var15 + ""'"", module); } } } if (""includes-only"".equals(var12) || ""full"".equals(var12)) { Func1(var13, var2, var14, true, var5); } else { Func1(var13, var2, var14, false, var5); } } else { Debug.logError(""Failed to find include-var2 or include-elements menu definition '"" + var10 + ""' in resource '"" + var11 + ""'"", module); } } else { Debug.logError(""Unrecognized include-var2 or include-elements recursive mode: "" + var12, module); } } } Element var18 = UtilXml.firstChildElement(var1, ""var2""); if (var18 != null) { var2.addAll(ModelMenuAction.readSubActions(this, var18)); } } "	0	0	1	0	1	0
@Override public boolean Func1(ServiceConnection var1) { return this._protocolServer.getServices().contains(var1); } 	1	0	1	1	1	0
"public void Func1() { var1 = (NavigationView) findViewById(R.id.nav_view); var1.setNavigationItemSelectedListener(this); NavigationView var1 = (NavigationView) findViewById(R.id.nav_view); var1.setNavigationItemSelectedListener(this); View var2=var1.getHeaderView(0); TextView var3 = (TextView)var2.findViewById(R.id.headerName); if (var3 != null) { var3.setText(CurrentState.getUser().getName()); Log.println(Log.ASSERT, ""GTMovies"", ""var2 var3 updated to: "" + var3); } else { Log.println(Log.ERROR,""GTMovies"", ""var2 view null, couldn't update.""); } } "	0	0	0	1	1	0
@Override public boolean Func1(CommandSender var1) { return (args.length == 0 && Permissions.DISABLE_SPECTATOR_MODE.grantedTo(var1)) || Permissions.CHANGE_SPECTATOR_MODE_FOR_OTHERS.grantedTo(var1); } 	0	0	1	0	1	0
@Override protected void Func1(Weather var1) { mWeather = setWeather(var1); onUpdate(context, AppWidgetManager.getInstance(context), intent.getExtras().getIntArray(AppWidgetManager.EXTRA_APPWIDGET_IDS)); } 	1	0	0	0	1	0
public static synchronized void Func1() { load(); } 	0	0	1	0	0	0
static String Func1(ConstructorDeclaration var1) { return ElementPrinter.Func1(var1); } 	1	0	1	1	0	0
"public void Func1(@Nonnull Minecraft var1, int var2, int var3) { if (!isOpen()) { return; } boolean var4 = isMouseOver(var2, var3); if (var4 && shouldShowDeleteItemTooltip(var1)) { String var5 = Translator.translateToLocal(""jei.var7.delete.item""); TooltipRenderer.drawHoveringText(var1, var5, var2, var3); } if (hovered != null) { hovered.drawTooltip(var1, var2, var3); } if (configButtonHoverChecker.checkHover(var2, var3)) { String var6 = Translator.translateToLocal(""jei.var7.config""); if (Config.isCheatItemsEnabled()) { List<String> var7 = Arrays.asList( var6, ChatFormatting.RED + Translator.translateToLocal(""jei.var7.cheat.mode"") ); TooltipRenderer.drawHoveringText(var1, var7, var2, var3); } else { TooltipRenderer.drawHoveringText(var1, var6, var2, var3); } } } "	0	0	0	1	0	0
"private ApiResponse Func1(final ApiRequest var1, final HttpResponse var2) { String var3 = null; try { final HttpEntity var4 = var2.getEntity(); var3 = EntityUtils.toString(var4, CHARSET); if (!StringUtils.isBlank(var3)) { return ApiResponse.fromJson(var3); } } catch (final Exception e) { System.out.format(""Unable to parse server's var5: %s\n"", e.getMessage()); } final ApiResponse var5 = new ApiResponse(); var5.setMessage(var3); return var5; } "	0	0	1	1	1	0
"@Test public void Func1() throws IOException { final JobInfo var1 = newJobInfo(create(""/test/42""), ""TEST"", (j) -> {}, fixed(ofEpochMilli(0), systemDefault())); final JobInfo var2 = newJobInfo(create(""/test/42""), ""TEST"", (j) -> {}, fixed(ofEpochMilli(1), systemDefault())); final JobService var3 = mock(JobService.class); when(var3.findJobs(Optional.<String>empty(), 100)).thenReturn(asList(var1, var2)); final JobsController var4 = new JobsController(var3); Object var5 = var4.getJobsAsJson(null, 100); assertThat(var5, is(asList(representationOf(var1), representationOf(var2)))); } "	0	0	1	1	1	0
"@Test @SuppressWarnings(""unchecked"") public void Func1() { final JobInfo var1 = newJobInfo(create(""/test/42""), ""SOME_TYPE"", (j) -> {}, systemDefaultZone()); final JobService var2 = mock(JobService.class); when(var2.findJobs(Optional.of(""SOME_TYPE""), 100)).thenReturn(asList(var1)); final JobsController var3 = new JobsController(var2); ModelAndView var4 = var3.getJobsAsHtml(""SOME_TYPE""); List<JobRepresentation> var5 = (List<JobRepresentation>) var4.getModel().get(""var5""); assertThat(var5, is(asList(representationOf(var1)))); } "	0	0	1	0	1	0
"@Test public void Func1() throws Exception { final String var1 = ""{\n"" + ""  \""swagger\"" : \""2.0\"",\n"" + ""  \""info\"" : {\n""; mvc.perform(request(HttpMethod.GET, API_PATH)) .andExpect(content().string(StringStartsWith.startsWith(var1))); } "	0	0	1	1	0	0
"public static void Func1(Player var1, JSONObject var2) { try { if (ConfigValues.CAN_FLY.getBoolean() && var2.has(""can-fly"")) var1.setAllowFlight(var2.getBoolean(""can-fly"")); if (ConfigValues.DISPLAY_NAME.getBoolean() && var2.has(""display-name"")) var1.setDisplayName(var2.getString(""display-name"")); if (ConfigValues.EXHAUSTION.getBoolean() && var2.has(""exhaustion"")) var1.setExhaustion((float) var2.getDouble(""exhaustion"")); if (ConfigValues.EXP.getBoolean() && var2.has(""exp"")) var1.setExp((float) var2.getDouble(""exp"")); if (ConfigValues.FLYING.getBoolean() && var2.has(""flying"")) var1.setFlying(var2.getBoolean(""flying"")); if (ConfigValues.FOOD.getBoolean() && var2.has(""food"")) var1.setFoodLevel(var2.getInt(""food"")); if (ConfigValues.HEALTH.getBoolean() && var2.has(""health"")) var1.setHealth(var2.getDouble(""health"")); if (ConfigValues.GAMEMODE.getBoolean() && var2.has(""gamemode"")) { if (var2.get(""gamemode"") instanceof String) { var1.setGameMode(GameMode.valueOf(var2.getString(""gamemode""))); } else { int var3 = var2.getInt(""gamemode""); switch (var3) { case 0: var1.setGameMode(GameMode.CREATIVE); break; case 1: var1.setGameMode(GameMode.SURVIVAL); break; case 2: var1.setGameMode(GameMode.ADVENTURE); break; case 3: var1.setGameMode(GameMode.SPECTATOR); break; } } } if (ConfigValues.LEVEL.getBoolean() && var2.has(""level"")) var1.setLevel(var2.getInt(""level"")); if (ConfigValues.POTION_EFFECTS.getBoolean() && var2.has(""potion-effects"")) PotionEffectSerialization.setPotionEffects(var2.getString(""potion-effects""), var1); if (ConfigValues.SATURATION.getBoolean() && var2.has(""saturation"")) var1.setSaturation((float) var2.getDouble(""saturation"")); } catch (JSONException e) { e.printStackTrace(); } } "	0	0	0	0	0	1
public int Func1() { return versionName; } 	0	0	1	0	0	0
"public ArrayList<Integer> Func1(int var1) { Connection var2 = getConnection(); Statement var3 = null; ResultSet var4 = null; ArrayList<Integer> var5 = new ArrayList<>(); try { var4 = (var3 = var2.createStatement()).executeQuery(""select requester_id from `"" + DATABASE + ""`."" + TABLE_PREFIX + ""friend_request_assignment WHERE receiver_id='"" + var1 + ""'""); if (var4.next()) var5.add(var4.getInt(""requester_id"")); } catch (SQLException e) { e.printStackTrace(); } finally { close(var4, var3); } return var5; } "	0	0	1	0	0	0
"public void Func1(int var1) { if (mOnSaveInstanceStateCalled) { Log.w(TAG, ""Func1() has been called after onSaveInstanceState(), this call has been supressed!""); Toast.makeText(this, ""Func1() has been called after onSaveInstanceState(), this call has been supressed!"", Toast.LENGTH_SHORT).show(); return; } selectedCategoryId = var1; FeedListFragment var2 = FeedListFragment.newInstance(var1); FragmentManager var3 = getFragmentManager(); var3.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE); FragmentTransaction var4 = var3.beginTransaction(); if (!Controller.isTablet) var4.addToBackStack(null); var4.replace(R.id.frame_sub, var2, FeedListFragment.FRAGMENT); if (Controller.isTablet) var4.setCustomAnimations(android.R.anim.slide_in_left, android.R.anim.fade_out, android.R.anim.fade_in, R.animator.slide_out_left); else var4.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE); var4.commit(); } "	0	0	0	0	0	1
"public void Func1(Player var1, Player var2) { if (this.isEndGameRunning()) { return; } BedwarsPlayerKilledEvent var3 = new BedwarsPlayerKilledEvent(this.getGame(), var1, var2); Main.getInstance().getServer().getPluginManager().callEvent(var3); PlayerStatistic var4 = null; PlayerStatistic var5 = null; Iterator<SpecialItem> var6 = this.game.getSpecialItems().iterator(); while (var6.hasNext()) { SpecialItem var7 = var6.next(); if (!(var7 instanceof RescuePlatform)) { continue; } RescuePlatform var8 = (RescuePlatform) var7; if (var8.getPlayer().equals(var1)) { var6.remove(); } } Team var9 = this.getGame().getPlayerTeam(var1); if (Main.getInstance().statisticsEnabled()) { var4 = Main.getInstance().getPlayerStatisticManager().getStatistic(var1); boolean var10 = Main.getInstance().getBooleanConfig(""statistics.bed-destroyed-kills"", false); boolean var11 = var9.isDead(this.getGame()); if ((var10 && var11) || !var10) { var4.setDeaths(var4.getDeaths() + 1); var4.addCurrentScore(Main.getInstance().getIntConfig(""statistics.scores.die"", 0)); } if (var2 != null) { if ((var10 && var11) || !var10) { var5 = Main.getInstance().getPlayerStatisticManager().getStatistic(var2); if (var5 != null) { var5.setKills(var5.getKills() + 1); var5 .addCurrentScore(Main.getInstance().getIntConfig(""statistics.scores.kill"", 10)); } } } if (Main.getInstance().getBooleanConfig(""rewards.enabled"", false) && var2 != null && ((var10 && var11) || !var10)) { List<String> var12 = Main.getInstance().getConfig().getStringList(""rewards.var1-kill""); Main.getInstance().dispatchRewardCommands(var12, ImmutableMap.of(""{var1}"", var2.getName(), ""{score}"", String.valueOf(Main.getInstance().getIntConfig(""statistics.scores.kill"", 10)))); } } if (var2 == null) { this.getGame().broadcast(ChatColor.GOLD + Main._l(""ingame.var1.died"", ImmutableMap .of(""var1"", Game.getPlayerWithTeamString(var1, var9, ChatColor.GOLD)))); this.sendTeamDeadMessage(var9); this.checkGameOver(); return; } Team var13 = this.getGame().getPlayerTeam(var2); if (var13 == null) { this.getGame().broadcast(ChatColor.GOLD + Main._l(""ingame.var1.died"", ImmutableMap .of(""var1"", Game.getPlayerWithTeamString(var1, var9, ChatColor.GOLD)))); this.sendTeamDeadMessage(var9); this.checkGameOver(); return; } String var14 = """"; DecimalFormat var15 = new DecimalFormat(""#""); double var16 = ((double) var2.getHealth()) / ((double) var2.getMaxHealth()) * ((double) var2.getHealthScale()); if (!Main.getInstance().getBooleanConfig(""var14-in-halfs"", true)) { var15 = new DecimalFormat(""#.#""); var16 = var16 / 2; } if (Main.getInstance().getBooleanConfig(""var14-on-death"", true)) { var14 = ""["" + ChatColor.RED + ""\u2764"" + var15.var15(var16) + ChatColor.GOLD + ""]""; } this.getGame() .broadcast(ChatColor.GOLD + Main._l(""ingame.var1.killed"", ImmutableMap.of(""var2"", Game.getPlayerWithTeamString(var2, var13, ChatColor.GOLD, var14), ""var1"", Game.getPlayerWithTeamString(var1, var9, ChatColor.GOLD)))); if (var9.isDead(this.getGame())) { var2.playSound(var1.getLocation(), SoundMachine.get(""LEVEL_UP"", ""ENTITY_PLAYER_LEVELUP""), Float.valueOf(""1.0""), Float.valueOf(""1.0"")); } this.sendTeamDeadMessage(var9); this.checkGameOver(); } "	0	0	0	0	0	1
@Override public boolean Func1(MotionEvent var1) { if(!super.Func1(var1)) mGestureDetector.onTouchEvent(var1); return true; } 	0	0	1	0	1	0
public void Func1(final Player var1) { ++this.online; } 	1	0	1	0	0	0
"private void Func1(P4ChangeInfo var1, P4RepositoryInfo var2, Set<String> var3) throws Exception { P4FileStatInfo var4 = P4Fstat.getChangelistStats(var1.getChangeList(), var2); logger.var4(String.format(""%d affected var9(s)"", var4.getFiles().size())); List<String> var5 = new LinkedList<>(); List<String> var6 = new LinkedList<>(); List<String> var7 = new LinkedList<>(); List<Callable<Boolean>> var8 = new LinkedList<>(); for (P4FileInfoEx var9 : var4.getFiles()) { if (!var3.isEmpty() && !var3.stream().filter(var9.getDepotFile()::startsWith).findAny().isPresent()) { var7.add(var9.getDepotFile()); continue; } final String var10 = var9.getDepotFile().replace(var2.getPath(), """"); if (P4Operation.delete == var9.getOperation()) { if (Utils.fileExists(var10)) { var6.add(var10); } else { logger.warn(String.format(""ignore deleting of nonexistent var9 %1$s from cl %2$s"", var10, var1.getChangeList())); } continue; } var5.add(var10); var8.add(() -> { try { Files.write(Paths.get(var10), Files.readAllBytes(Paths.get(var9.getClientFile())), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING); return true; } catch (Exception e) { logger.error(String.format(""Failed to copy var9 %1$s -> %2$s"", var9.getClientFile(), var10), e); return false; } }); } if (!var7.isEmpty()) { logger.var4(String.format(""%d var9(s) is/are ignored"", var7.size())); logger.debug(""ignored files are:\n"" + StringUtils.join(var7, ""\n"")); } if (!var5.isEmpty()) { logger.var4(""syncing p4 client to change list "" + var1.getChangeList()); P4Sync.forceSyncTo(var2, var1.getChangeList()); Thread.sleep(P4_SYNC_DELAY); } pagedActionOnFiles(var6, GitRm::run, ""Git rm...""); for (String var10 : var5) { Files.createDirectories(Paths.get(var10).getParent()); } if (!var8.isEmpty()) { logger.var4(String.format(""%d var9(s) in total to copy..."", var8.size())); if (!Utils.runConcurrentlyAndAggregate(MAX_THREADS, var8)) { throw new RuntimeException(""Error occurred when copying files for changelist "" + var1.getChangeList()); } } pagedActionOnFiles(var5, GitAdd::run, ""Git add...""); updateLastSyncAndGitAdd(var1.getChangeList()); String var11 = String.format(commitCommentsTemplate, var4.getDescription(), var2.getPath(), var1.getChangeList(), var1.getP4UserInfo().toString(), var1.getDate()); GitCommit.commitFromFile(var11, var1.getChangeList()); } "	0	0	0	0	0	1
@Override public void Func1(Canvas var1) { super.Func1(var1); ensureToolbar(); if (mTopBar == null && mContentScrim != null && mScrimAlpha > 0) { mContentScrim.mutate().setAlpha(mScrimAlpha); mContentScrim.Func1(var1); } if (mCollapsingTitleEnabled) { mCollapsingTextHelper.Func1(var1); } if (mStatusBarScrim != null && mScrimAlpha > 0) { final int var2 = mLastInsets != null ? mLastInsets.getSystemWindowInsetTop() : 0; if (var2 > 0) { mStatusBarScrim.setBounds(0, -mCurrentOffset, getWidth(), var2 - mCurrentOffset); mStatusBarScrim.mutate().setAlpha(mScrimAlpha); mStatusBarScrim.Func1(var1); } } } 	0	0	0	1	1	0
"View Func1(CountryItem var1) { @SuppressLint(""InflateParams"") final View var2 = View.inflate(getActivity(), R.layout.dialog_missed_map, null); ((TextView) var2.findViewById(R.id.tv__title)).setText(var1.name); final TextView var3 = (TextView) var2.findViewById(R.id.tv__size); var3.setText(MapManager.nativeIsLegacyMode() ? """" : StringUtils.getFileSizeString(var1.totalSize - var1.size)); ViewGroup.MarginLayoutParams var4 = (ViewGroup.MarginLayoutParams) var3.getLayoutParams(); var4.rightMargin = 0; var3.setLayoutParams(var4); return var2; } "	1	0	1	1	0	0
"@Override public void Func1() { while (Configuration.ramStatistics()) { try { Thread.sleep(10 * 1000); } catch (InterruptedException e) { } if (!active) return; if (ramStatistiks.getLastState() == null) continue; int var7 = 1024 * 1024; RamStatistic var6 = ramStatistiks.getLastState(); String var7 = (var6.getUsedMemory()) / var7 + """"; String var6 = (var6.getReservedMemory() - var6.getUsedMemory()) / var7 + """"; String var7 = var6.getReservedMemory() / var7 + """"; String var6 = var6.getMaxMemory() / var7 + """"; int var7 = 5; var7 = format(var7, var7); var6 = format(var6, var7); var7 = format(var7, var7); var6 = format(var6, var7); int var8 = 0; if (var6.getPreviousStatistic(10, TimeUnit.SECONDS) != null) var8 = (int) (((int) (var6.getUsedMemory() / var7)) - ((int) (var6.getPreviousStatistic(10, TimeUnit.SECONDS).getUsedMemory() / var7))); String var9 = """"; for (int var10 = 0; var10 < (""(*"" + Math.abs(var8) + "")"").length(); var10++) var9 += "" ""; sendMessage(""""); sendMessage(ChatColorUtils.COLOR_CHAR + ""7#####"" + var9.substring(0, var9.length() / 2).replaceAll("" "", ""#"") + "" "" + ChatColorUtils.COLOR_CHAR + ""6Heap utilization statistics [MB] "" + ChatColorUtils.COLOR_CHAR + ""7#####"" + var9.substring(0, var9.length() / 2).replaceAll("" "", ""#"") + (var9.length() % 2 != 0 ? ""#"" : """")); sendMessage(ChatColorUtils.COLOR_CHAR + ""7#     "" + ChatColorUtils.COLOR_CHAR + ""aReserved Used Memory:      "" + ChatColorUtils.COLOR_CHAR + ""e"" + var7 + ""M "" + ChatColorUtils.COLOR_CHAR + ""7("" + (var8 > 0 ? ChatColorUtils.COLOR_CHAR + ""a+"" : var8 < 0 ? ChatColorUtils.COLOR_CHAR + ""c-"" : ChatColorUtils.COLOR_CHAR + ""6�"") + Math.abs(var8) + ChatColorUtils.COLOR_CHAR + ""7)   "" + ChatColorUtils.COLOR_CHAR + ""7#""); sendMessage(ChatColorUtils.COLOR_CHAR + ""7#     "" + ChatColorUtils.COLOR_CHAR + ""aReserved Free Memory:      "" + ChatColorUtils.COLOR_CHAR + ""e"" + var6 + ""M    "" + var9 + ChatColorUtils.COLOR_CHAR + ""7#""); sendMessage(ChatColorUtils.COLOR_CHAR + ""7#     "" + ChatColorUtils.COLOR_CHAR + ""aReserved Memory:           "" + ChatColorUtils.COLOR_CHAR + ""e"" + var7 + ""M    "" + var9 + ChatColorUtils.COLOR_CHAR + ""7#""); sendMessage(ChatColorUtils.COLOR_CHAR + ""7#     "" + ChatColorUtils.COLOR_CHAR + ""a-----------------------------"" + format("""", var7).replaceAll("" "", ""-"") + ""   "" + var9 + ChatColorUtils.COLOR_CHAR + ""7#""); sendMessage(ChatColorUtils.COLOR_CHAR + ""7#     "" + ChatColorUtils.COLOR_CHAR + ""aAllowed Reservable Memory: "" + ChatColorUtils.COLOR_CHAR + ""e"" + var6 + ""M    "" + var9 + ChatColorUtils.COLOR_CHAR + ""7#""); sendMessage(ChatColorUtils.COLOR_CHAR + ""7############################################"" + var9.replaceAll("" "", ""#"")); sendMessage(""""); } } "	0	0	1	0	0	0
"@Test public void Func1() { String var1 = ""x = {1,2,(3,4)}""; String var2 = getExceptionMessage(var1); assertTrue(var2.contains(""Expected INTEGER but found INTEGER*INTEGER"")); } "	0	0	0	1	1	0
public JsonResponse<? extends T1Entity> Func1() { JsonResponse<? extends T1Entity> var1 = null; StringBuffer var2 = reportService.getMetaUri(); String var3 = tOneService.constructReportingUrl(var2); String var4 = this.connection.get(var3, this.getUser()); var1 = reportService.parseMetaResponse(var4); return var1; } 	0	0	1	0	1	0
private static void Func1(final Dataset var1, final SigningStage var2, final WonSigner var3, final PrivateKey var4, final String var5, final PublicKey var6) throws Exception { List<WonSignatureData> var7 = var3.sign(var4, var5, var6, var2.getUnsignedContentUris()); for (WonSignatureData var8 : var7) { String var9 = var2.getEnvelopeUriContainingContent(var8.getSignedGraphUri()); addSignature(var2.getMessageUri(var9), var8, var9, var1); } } 	0	0	1	0	1	0
"@Test (expected = IllegalTypeException.class) public void Func1() throws RecognitionException { parserInterface.parseProgram(""main() {bool[] i = array[6];i=true;}""); } "	0	0	1	1	0	0
"@Override public void Func1(Activity var1) { super.Func1(var1); RoboGuice.getInjector(var1).injectMembersWithoutViews(this); try { mAuthListener = (LoginListener) var1; } catch (ClassCastException e) { throw new IllegalArgumentException( ""Activity "" + var1.getLocalClassName() + "" should implement LoginFragment.LoginListener"", e); } } "	0	0	1	0	1	0
"private void Func1() { showProgress(true); auth.login(username.getText().toString(), password.getText().toString()) .observeOn(AndroidSchedulers.mainThread()) .subscribe(exhentaiResult -> { dismiss(); mAuthListener.onSuccess(); }, throwable -> { showProgress(false); Log.e(LoginFragment.class.getSimpleName(), ""Couldn't log in"", throwable); if(throwable.getCause() instanceof AuthException) { username.setError(((AuthException) throwable.getCause()).getError().getErrorMessage()); username.requestFocus(); } }); } "	0	0	1	0	1	0
"public void Func1() throws Exception{ Random var1 = new Random(); Random var2= new Random(); int var3 = player.damage(); int var4 = monster.getDefense(); int var5 =var2.nextInt(100); if(player.cowl()){ if(trueBurst>var4){ var3=(int)((double)var3*1.5); } var4-=trueBurst; attacked=true; } if(wildSlash){ var3=var3*2; wildSlash=false; } if(shieldBash){ var3=var3*2; shieldBash=false; } if(var5<=player.getCrit()){ if(player.cloak()&&dodge){ var3=var3*3; println(""DOUBLE CRITICAL STRIKE!!!"", 20); } else{ var3=var3*2; print(""CRITICAL"", 40); println("" STRIKE!!!"", 20); } } if(player.chestpiece()){ var3+=(player.getHeal()/2); } if(manaSurge&&atksLeft==0){ var3+=var7; var7=0; manaSurge=false; } else if(manaSurge&&atksLeft>0){ var3+=var7; } if(defStance&&isGuarding){//Sword's defStance ability. var3+=5; } if(player.dagger()&&wrathPass==true){ wrathPass=false; var3=var3/2; } int var6 = var3 - var4; if(var6 <= 0) { var6 = 0; println(""You are too weak to hurt this monster!"",15); } else { if(monster.getDodge()>=var1.nextInt(100)+1) { println(monster.getName()+"" swiftly dodged your Func1!!!"",15); } else { monster.setHealth(monster.getHealth()-var6); damageDealt+=var6; print(""You have var6 "" + var6 + "" points of damage to "" +monster.getName(),7); if(player.robe()){ int var7=var6/5; player.setMana(player.getMana()+(var7)); println("" ""+var7+"" Mana"",5); } else{ System.out.println(); } } } if(split&&atksLeft>0){ atksLeft--; Func1(); } } "	1	1	1	1	0	0
public void Func1(String var1) { enterCommand(var1); pressEnter(); guiRobot.sleep(1000); //Give time for the var1 to take effect } 	0	0	1	1	1	0
"@Override protected void Func1(Canvas var1) { super.Func1(var1); heightPadding = (getHeight() - iconSize - (showLabel ? 0 : labelHeight)) / 2f; if (label != null && !showLabel) { textPaint.getTextBounds(label, 0, label.length(), textContainer); } if (label != null && !showLabel && textContainer.width() > 0) { float var2 = textContainer.width() / label.length(); int var3 = (int) Math.ceil(((label.length() * var2) - getWidth()) / var2); float var4 = Math.max(8, (getWidth() - textContainer.width()) / 2f); if (textContainer.width() > getWidth() && label.length() - 3 - var3 > 0) { var1.drawText(label.substring(0, label.length() - 3 - var3) + ""..."", var4, getHeight() - heightPadding, textPaint); } else { var1.drawText(label, var4, getHeight() - heightPadding, textPaint); } } if (icon != null) { var1.save(); var1.translate((getWidth() - iconSize) / 2, heightPadding); icon.setBounds(0, 0, (int) iconSize, (int) iconSize); icon.draw(var1); var1.restore(); } } "	0	0	0	1	1	0
public Fragment Func1(Context var1) { switch (type) { case Type.GENRES: return GenreFragment.newInstance(var1.getString(getTitleResId())); case Type.SUGGESTED: return SuggestedFragment.newInstance(var1.getString(getTitleResId())); case Type.ARTISTS: return AlbumArtistFragment.newInstance(var1.getString(getTitleResId())); case Type.ALBUMS: return AlbumFragment.newInstance(var1.getString(getTitleResId())); case Type.SONGS: return SongFragment.newInstance(var1.getString(getTitleResId())); case Type.FOLDERS: return FolderFragment.newInstance(var1.getString(getTitleResId())); case Type.PLAYLISTS: return PlaylistFragment.newInstance(var1.getString(getTitleResId())); } return null; } 	0	0	1	0	1	0
@Override public JobInfo.JobStatus Func1(URI var1) { return jobs.get(var1).getStatus(); } 	0	0	0	1	0	0
"public void Func1(List<String> var1, List<String> var2, String var3, boolean var4, File var5, Map<String, String> var6, boolean var7, String var8, PropertiesBean var9, String var10) { ZipFile var11 = null; try { var11 = new ZipFile(var5.getAbsolutePath()); } catch (Exception e) { System.out.println(""An archive '"" + var5.getAbsolutePath() + ""' does not exist""); if (var7) { e.printStackTrace(); System.exit(0); } } File var12 = new File(var3); if (!var12.exists()) { try { Files.createDirectory(var12.toPath()); } catch (IOException ex) { System.out.println(RESOURCE_BUNDLE.getString(""error_extracting"")); } } try { var11.extractAll(var12.getAbsolutePath()); } catch (Exception e) { System.out.println(""Extracting an archive '"" + var5 + ""' failed""); if (var7) { e.printStackTrace(); System.exit(0); } } List<String> var13 = new ArrayList<>(); List<String> var14 = new ArrayList<>(); for (String var15 : var1) { if (!var2.contains(var15) && !var2.contains(var15.replaceFirst(""/"", """"))) { if (var8 != null && !var8.isEmpty()) { var13.add(var15.replaceFirst(""/"" + var8 + ""/"", """")); } else { var13.add(var15); } } else { if (var8 != null && !var8.isEmpty()) { var14.add(var15.replaceFirst(""/"" + var8 + ""/"", """")); } else { var14.add(var15); } } } List<String> var16 = new ArrayList<>(); for (Map.Entry<String, String> var17 : var6.entrySet()) { String var18 = var17.getKey(); var18 = var18.replaceAll(""/+"", ""/""); if (var18.indexOf(PATH_SEPARATOR) != -1) { var18 = var18.replaceAll(PATH_SEPARATOR, ""/""); var18 = var18.replaceAll(""/+"", ""/""); } if (var18.indexOf(""/"") != -1) { var18 = var18.replaceAll(""/+"", ""/""); } if (!var9.getPreserveHierarchy()) { if (var18.startsWith(var10)) { for (FileBean var19 : var9.getFiles()) { String var20 = var19.getTranslation(); if (var20 != null && !var20.startsWith(var10)) { var18 = var18.replaceFirst(var10, """"); } } } } if (var18.startsWith(""/"")) { var18 = var18.replaceFirst(""/"", """"); } String var21 = var17.getValue(); if (var21.indexOf(PATH_SEPARATOR) != -1) { var21 = var21.replaceAll(PATH_SEPARATOR, ""/""); var21 = var21.replaceAll(""/+"", ""/""); } if (var14.contains(var18) || var14.contains(""/"" + var18)) { var16.add(var21); } } this.sortFilesName(var16); for (String var22 : var16) { System.out.println(""Extracting: '"" + var22 + ""'""); } if (var13.size() > 0 && !var4) { this.sortFilesName(var13); System.out.println(RESOURCE_BUNDLE.getString(""downloaded_file_omitted"")); for (String var23 : var13) { System.out.println("" - '"" + var23 + ""'""); } } } "	0	0	0	0	0	1
public Boolean Func1(){ return showMatrixStatus == null ? false : showMatrixStatus; } 	0	0	1	0	1	0
public static Path2D Func1(Rectangle var1, int var2, BorderPropertySet var3, boolean var4, float var5, float var6) { var3 = var3.normalizedInstance(new Rectangle((int)(var1.width), (int)(var1.height))); RelativeBorderProperties var7 = new RelativeBorderProperties(var1, var3, 0f, var2, 1+var5, var6); float var8; if(var7.isDimmensionsSwapped()) { var8 = var1.height-(1+var5)*(var6)*(var3.top()+var3.bottom()); } else { var8 = var1.width-(1+var5)*(var6)*(var3.left()+var3.right()); } Path2D var9 = new Path2D.Float(); float var10 = 90 * var7.getTop() / (var7.getTop() + var7.getLeft()); appendPath(var9, 0-var7.getLeft(), 0-var7.getTop(), var7.getLeftCorner().left(), var7.getLeftCorner().right(), 90+var10, -var10-1, var7.getTop(), var7.getLeft(), var5, true, var6); var10 = 90 * var7.getTop() / (var7.getTop() + var7.getRight()); appendPath(var9, var8+var7.getRight(), 0-var7.getTop(), var7.getRightCorner().right(), var7.getRightCorner().left(), 90, -var10-1, var7.getTop(), var7.getRight(), var5, false, var6); if(var4) { appendPath(var9, var8, 0, var7.getRightCorner().right(), var7.getRightCorner().left(), 90-var10, var10+1, var7.getTop(), var7.getRight(), var5+1, false, var6); var10 = 90 * var7.getTop() / (var7.getTop() + var7.getLeft()); appendPath(var9, 0, 0, var7.getLeftCorner().left(), var7.getLeftCorner().right(), 90, var10+1, var7.getTop(), var7.getLeft(), var5+1, true, var6); var9.closePath(); } var9.transform(AffineTransform.getTranslateInstance( (!var7.isDimmensionsSwapped() ? -var1.width/2f : -var1.height/2f) + (var5+1)*var7.getLeft(), (var7.isDimmensionsSwapped() ? -var1.width/2f : -var1.height/2f) + (var5+1)*var7.getTop())); var9.transform(AffineTransform.getRotateInstance( var7.getRotation())); var9.transform(AffineTransform.getTranslateInstance( var1.width/2+var1.x, var1.height/2+var1.y)); return var9; } 	0	0	0	0	0	1
public void Func1(java.io.InputStream var1, String var2) throws IOException { File var3 = new File(var2); if (!var3.exists()) { var3.mkdir(); } ZipInputStream var4 = new ZipInputStream(var1); ZipEntry var5 = var4.getNextEntry(); while (var5 != null) { String var6 = var2 + File.separator + var5.getName(); if (!var5.isDirectory()) { extractFile(var4, var6); } else { File var7 = new File(var6); var7.mkdir(); } var4.closeEntry(); var5 = var4.getNextEntry(); } var4.close(); } 	0	0	1	0	1	0
public static void Func1() { AutomationContext.context = new AutomationRunContext(); } 	0	0	1	0	0	0
"public GrainEnum Func1(){ if(results.length < 1) return GrainEnum.unknown; List <String> var1 = Arrays.asList(results[0].getTypes()); if(var1.contains(""locality"")){ return GrainEnum.city; } else if(var1.contains(""country"")){ return GrainEnum.country; } else { return GrainEnum.unknown; } } "	0	0	1	1	1	0
@Override public IMarkerResolution[] Func1(IMarker var1) { if (!hasResolutions(var1)) { return NO_RESOLUTIONS; } switch (var1.getAttribute(IApiMarkerConstants.API_MARKER_ATTR_ID, -1)) { case IApiMarkerConstants.API_USAGE_MARKER_ID: { int var2 = ApiProblemFactory.getProblemId(var1); if (var2 > -1 && ApiProblemFactory.getProblemKind(var2) == IApiProblem.MISSING_EE_DESCRIPTIONS) { return new IMarkerResolution[] { installEEResolution, eeResolution, new ConfigureProblemSeverityForAPIToolsResolution(var1) }; } return new IMarkerResolution[] { new ConfigureProblemSeverityForAPIToolsResolution(var1), new FilterProblemResolution(var1), new FilterProblemWithCommentResolution(var1) }; } case IApiMarkerConstants.COMPATIBILITY_MARKER_ID: { if (hasExplainProblemResolution(var1)) { return new IMarkerResolution[] { new ProblemExplainIncompatibilityResolution(var1), new FilterProblemResolution(var1), new FilterProblemWithCommentResolution(var1), new ConfigureProblemSeverityForAPIToolsResolution(var1) }; } return new IMarkerResolution[] { new ConfigureProblemSeverityForAPIToolsResolution(var1), new FilterProblemResolution(var1), new FilterProblemWithCommentResolution(var1) }; } case IApiMarkerConstants.DEFAULT_API_BASELINE_MARKER_ID: { return new IMarkerResolution[] { profileResolution }; } case IApiMarkerConstants.SINCE_TAG_MARKER_ID: { return new IMarkerResolution[] { new ConfigureProblemSeverityForAPIToolsResolution(var1), new SinceTagResolution(var1), new FilterProblemResolution(var1), new FilterProblemWithCommentResolution(var1) }; } case IApiMarkerConstants.VERSION_NUMBERING_MARKER_ID: { return new IMarkerResolution[] { new ConfigureProblemSeverityForAPIToolsResolution(var1), new VersionNumberingResolution(var1), new FilterProblemResolution(var1), new FilterProblemWithCommentResolution(var1) }; } case IApiMarkerConstants.UNSUPPORTED_TAG_MARKER_ID: { return new IMarkerResolution[] { new VersionNumberingResolution(var1), new UnsupportedTagResolution(var1) }; } case IApiMarkerConstants.DUPLICATE_TAG_MARKER_ID: { return new IMarkerResolution[] { new DuplicateTagResolution(var1) }; } case IApiMarkerConstants.UNSUPPORTED_ANNOTATION_MARKER_ID: { return new IMarkerResolution[] { new VersionNumberingResolution(var1), new UnsupportedAnnotationResolution(var1), new ConfigureProblemSeverityForAPIToolsResolution(var1) }; } case IApiMarkerConstants.DUPLICATE_ANNOTATION_MARKER_ID: { return new IMarkerResolution[] { new DuplicateAnnotationResolution(var1) }; } case IApiMarkerConstants.API_COMPONENT_RESOLUTION_MARKER_ID: { return new IMarkerResolution[] { new UpdateProjectSettingResolution(var1) }; } case IApiMarkerConstants.UNUSED_PROBLEM_FILTER_MARKER_ID: { IApiProblemFilter var3 = resolveFilter(var1); if (var3 != null) { return new IMarkerResolution[] { new ConfigureProblemSeverityForAPIToolsResolution(var1), new RemoveFilterProblemResolution(var3, var1), new OpenPropertyPageResolution(MarkerMessages.ApiMarkerResolutionGenerator_api_problem_filters, IApiToolsConstants.ID_FILTERS_PROP_PAGE, var1.getResource().getProject()) }; } else { return new IMarkerResolution[] { new OpenPropertyPageResolution(MarkerMessages.ApiMarkerResolutionGenerator_api_problem_filters, IApiToolsConstants.ID_FILTERS_PROP_PAGE, var1.getResource().getProject()) }; } } default: return NO_RESOLUTIONS; } } 	0	0	0	0	0	1
@Test public void Func1() { actual = Jedi.class; classes.assertHasDeclaredPublicMethods(someInfo(), actual); } 	0	0	1	0	1	0
"private void Func1(RoomInfoResponse var1) { context.statusMessage(""Overwriting remote files and uploading new ones.""); context.flashMessage(""Overwriting remote files and uploading new ones.""); final Ignore var2; if (dirToAdd == null) { var2 = context.getIgnoreTree(); } else { var2 = Ignore.BuildIgnore(dirToAdd); } Ignore.UploadData var3 = var2.getUploadData(var1.max_size, new Utils.FileProcessor<String>() { @Override public String Func2(IFile var4) { return context.toProjectRelPath(var4.getPath()); } }); if (var3.bigStuff.size() > 0) { if (var3.bigStuff.size() > Constants.TOO_MANY_BIG_DIRS) { context.dialogDisconnect(var1.max_size / 1000, var3.bigStuff.size()); return; } boolean var5; var5 = context.dialogTooBig(var3.bigStuff); if (!var5) { context.shutdown(); return; } } for (Map.Entry var6 : var1.bufs.entrySet()) { Integer var7 = (Integer) var6.getKey(); RoomInfoBuf var8 = (RoomInfoBuf) var6.getValue(); Buf var9 = Buf.createBuf(var8.var10, var8.id, Encoding.from(var8.encoding), var8.md5, context, outbound); try { state.bufs.put(var7, var9); } catch (NullPointerException e) { Flog.warn(""state.buffs is null, tried to upload after disconnecting. This is a race condition.""); return; } state.pathsToIds.put(var8.var10, var8.id); if (!var3.paths.contains(var9.var10)) { outbound.deleteBuf(var9, false); continue; } var3.paths.remove(var9.var10); var9.read(); if (var9.var9 == null) { Flog.warn(""%s is null but we want to upload it?"", var8.var10); outbound.getBuf(var9.id); continue; } if (var8.md5.equals(var9.md5)) { continue; } outbound.setBuf(var9); outbound.saveBuf(var9); } for (String var10 : var3.paths) { IFile var11 = context.iFactory.findFileByPath(context.absPath(var10)); if (var11 == null || !var11.isValid()) { Flog.warn(String.format(""var10 is no longer a valid virtual var4"")); continue; } outbound.createBuf(var11); } String var12 = FilenameUtils.concat(context.colabDir, "".var12""); try { File var13 = new File(var12); List<String> var14; if (var13.exists()) { var14 = FileUtils.readLines(var13); } else { var14 = new ArrayList<String>(); } for (Map.Entry<String, Integer> var15 : var3.bigStuff.entrySet()) { String var16 = ""/"" + context.toProjectRelPath(FilenameUtils.separatorsToUnix(var15.getKey())); if (!var16.endsWith(""/"")) { var16 += ""/""; } var16 += ""*""; var14.add(var16); } context.setListener(false); FileUtils.writeLines(var13, var14); IFile var17 = context.iFactory.findFileByIoFile(var13); if (var17 != null) { var17.refresh(); var2.addRules(var17); } } catch (IOException e) { Flog.error(e); } finally { context.setListener(true); } shouldUpload = false; dirToAdd = null; } "	0	0	1	0	0	0
"@RequestMapping(value = ""/create"", method = RequestMethod.PUT,consumes = MediaType.APPLICATION_JSON_VALUE) public ResponseEntity Func1(@RequestBody User var1) throws SQLException { logger.debug(""ENTERED Func1""); userService.Func1(var1); logger.debug(""EXITING Func1 "" + var1); return new ResponseEntity( HttpStatus.OK); } "	0	0	1	0	1	0
"private static Files Func1(String[] var1) { Files var2 = new Files(); Options var3 = new Options(); var3.addOption(Option .builder(""h"") .longOpt(""help"") .desc(""Print this message"") .build()); var3.addOption(Option .builder(""c"") .longOpt(MTSFileChooser.Filters.CONFIG_POSTFIX) .hasArg() .argName(""CONFIG_FILE"") .desc(""Config file"") .build()); var3.addOption(Option .builder(""m"") .longOpt(MTSFileChooser.Filters.MAP_EXFMT_POSTFIX) .hasArg() .argName(""MAP_FILE"") .desc(""Map file"") .build()); var3.addOption(Option .builder(""r0"") .longOpt(MTSFileChooser.Filters.ROUTE_POSTFIX + ""_0"") .hasArg() .argName(""ROUTE_FILE"") .desc(""First-used route file"") .build()); var3.addOption(Option .builder(""r1"") .longOpt(MTSFileChooser.Filters.ROUTE_POSTFIX + ""_1"") .hasArg() .argName(""ROUTE_FILE"") .desc(""Second-used route file"") .build()); var3.addOption(Option .builder(""o"") .longOpt(""output"") .hasArg() .argName(""PATH_TO_CSV_FILES"") .desc(""Path to output csv file; default is current directory"") .build()); var3.addOption(Option .builder() .longOpt(""automatic"") .hasArg() .argName(""BOOLEAN_VALUE"") .desc(""false if user input is needed to continue/exit (default is true)"") .build()); var3.addOption(Option .builder() .longOpt(""seed"") .hasArg() .argName(""LONG_VALUE"") .desc(""seed for config file (default is 42)"") .build()); var3.addOption(Option .builder() .longOpt(""maxAge"") .hasArg() .argName(""INTEGER_VALUE"") .desc(""max age when simulation should stop (default is 3,000)"") .build()); var3.addOption(Option .builder() .longOpt(""maxVehicleCount"") .hasArg() .argName(""INTEGER_VALUE"") .desc(""max vehicle count overwriting the given ."" + MTSFileChooser.Filters.CONFIG_POSTFIX + "" file (optional)"") .build()); var3.addOption(Option .builder() .longOpt(""dawdleFactor"") .hasArg() .argName(""FLOAT_VALUE"") .desc(""vehicles' dawdle factor (optional)"") .build()); var3.addOption(Option .builder() .longOpt(""laneChangeFactor"") .hasArg() .argName(""FLOAT_VALUE"") .desc(""vehicles' lane change factor (optional)"") .build()); var3.addOption(Option .builder(""vis"") .longOpt(""visualized"") .hasArg() .argName(""[true|false]"") .desc(""whether the measurement should run the visualization (default is true)"") .build()); try { CommandLine var4 = new DefaultParser().parse(var3, var1); if (var4.hasOption(""help"")) { HelpFormatter var5 = new HelpFormatter(); var5.printHelp(""measurement"", var3); System.exit(0); } if (var4.hasOption(""automatic"")) { var2.automatic = parseBoolean(var4.getOptionValue(""automatic"")); } if (var4.hasOption(""seed"")) { var2.seed = Long.parseLong(var4.getOptionValue(""seed"")); } if (var4.hasOption(""maxAge"")) { var2.maxAge = Integer.parseInt(var4.getOptionValue(""maxAge"")); } if (var4.hasOption(MTSFileChooser.Filters.CONFIG_POSTFIX)) { var2.mtscfg = new File(var4.getOptionValue(MTSFileChooser.Filters.CONFIG_POSTFIX)); } else { throw new Exception(""Config file '."" + MTSFileChooser.Filters.CONFIG_POSTFIX + ""' is missing.""); } if (var4.hasOption(MTSFileChooser.Filters.MAP_EXFMT_POSTFIX)) { var2.mtsmap = new File(var4.getOptionValue(MTSFileChooser.Filters.MAP_EXFMT_POSTFIX)); } else { throw new Exception(""Map file '."" + MTSFileChooser.Filters.MAP_EXFMT_POSTFIX + ""' or '."" + MTSFileChooser.Filters.MAP_OSM_XML_POSTFIX + ""' is missing.""); } var2.mtsroutes = new LinkedList<>(); if (var4.hasOption(MTSFileChooser.Filters.ROUTE_POSTFIX + ""_0"")) { var2.mtsroutes.add(new File(var4.getOptionValue(MTSFileChooser.Filters.ROUTE_POSTFIX + ""_0""))); } else { throw new Exception(""Route file '."" + MTSFileChooser.Filters.ROUTE_POSTFIX + ""' is missing.""); } if (var4.hasOption(MTSFileChooser.Filters.ROUTE_POSTFIX + ""_1"")) { var2.mtsroutes.add(new File(var4.getOptionValue(MTSFileChooser.Filters.ROUTE_POSTFIX + ""_1""))); } if (var4.hasOption(""output"")) { var2.outputPath = var4.getOptionValue(""output""); } if (var4.hasOption(""maxVehicleCount"")) { var2.maxVehicleCount = Integer.parseInt(var4.getOptionValue(""maxVehicleCount"")); } if (var4.hasOption(""dawdleFactor"")) { var2.dawdleFactor = Float.parseFloat(var4.getOptionValue(""dawdleFactor"")); } if (var4.hasOption(""laneChangeFactor"")) { var2.laneChangeFactor = Float.parseFloat(var4.getOptionValue(""laneChangeFactor"")); } if (var4.hasOption(""visualized"")) { var2.visualized = parseBoolean(var4.getOptionValue(""visualized"").toLowerCase()); } } catch (Exception e) { e.printStackTrace(); System.err.flush(); System.err.println(""\nError:""); System.err.println(""    "" + e.getMessage()); System.exit(1); } return var2; } "	0	0	0	0	0	1
@RequestMapping(method = RequestMethod.POST) public ResponseEntity<Object> Func1(@PathVariable String var1) { System.out.println(var1); Optional<EndPoint> var2 = apisimservice.findOne(var1); if (!var2.isPresent()) { return new ResponseEntity<Object>(new HttpHeaders(), HttpStatus.NOT_FOUND); } return new ResponseEntity<Object>(var2.get().responseKV, new HttpHeaders(), HttpStatus.CREATED); } 	0	0	1	0	0	0
"Connection Func1() { if (this.connection == null || this.connection.getLocalState() == EndpointState.CLOSED || this.connection.getRemoteState() == EndpointState.CLOSED) { TRACE_LOGGER.info(""Creatina connection to host '{}:{}'"", hostName, ClientConstants.AMQPS_PORT); this.connection = this.getReactor().connectionToHost(this.hostName, ClientConstants.AMQPS_PORT, this.connectionHandler); } return this.connection; } "	0	0	1	0	1	0
"public void Func1() { try { zeroGyro(false); } catch (IOException e) { Logger.warning(""Could not initiate gyro zeroing"", e); } } "	1	0	1	0	0	0
protected void Func1( Trans var1 ) { Thread var2 = new Thread( new Runnable() { @Override public void Func2() { createLineGraph( var1 ); } } ); var2.start(); } 	0	0	0	1	0	0
"public boolean Func1(String var1) { if(connectionToRobot == null || !connectionToRobot.isRobotConfirmed() || !isrunning) return false; String [] var2 = var1.split(""(\\s|;)""); if(Arrays.asList(var2).contains(""M06"") || Arrays.asList(var2).contains(""M6"")) { for(int var3=0;var3<var2.length;++var3) { if(var2[var3].startsWith(""T"")) { changeToTool(var2[var3].substring(1)); } } } if(var2[0]==""M02"" || var2[0]==""M2"" || var2[0]==""M30"") { playDawingFinishedSound(); halt(); return false; } sendLineToRobot(var1); return false; } "	0	0	1	0	1	0
@Override public  void Func1(SiaJob var1)  throws DelegateException{ try { getFacade().Func1(var1); } catch (RemoteException e) { throw new DelegateException(e); } } 	0	0	1	0	0	0
"@Test public void Func1() { Subscription var1 = new Subscription(""FAKE_CLI_ID_1"", ""#"", AbstractMessage.QOSType.MOST_ONE, false); store.add(var1); assertTrue(store.matches(""finance"").contains(var1)); Subscription var2 = new Subscription(""FAKE_CLI_ID_1"", ""finance/#"", AbstractMessage.QOSType.MOST_ONE, false); store.add(var2); assertTrue(store.matches(""finance"").containsAll(Arrays.asList(var2, var1))); } "	0	0	1	0	1	0
"@Test public void Func1() { Subscription var1 = new Subscription(""FAKE_CLI_ID_1"", ""/finance/+/ibm"", AbstractMessage.QOSType.MOST_ONE, false); store.add(var1); Subscription var2 = new Subscription(""FAKE_CLI_ID_1"", ""/+/stock/+"", AbstractMessage.QOSType.MOST_ONE, false); store.add(var2); assertTrue(store.matches(""/finance/stock/ibm"").containsAll(Arrays.asList(var1, var2))); } "	0	0	1	0	1	0
"@Override public void Func1(Activity var1, Bundle var2) { LoggerFactory.getLogger(var1.getClass()).info(""Func1""); } "	0	0	1	0	1	0
"@Override public void Func1(Activity var1) { LoggerFactory.getLogger(var1.getClass()).info(""Func1""); } "	0	0	1	0	1	0
"@Override public void Func1(Activity var1) { LoggerFactory.getLogger(var1.getClass()).info(""Func1""); } "	0	0	1	0	1	0
"@Override public void Func1(Activity var1) { LoggerFactory.getLogger(var1.getClass()).info(""Func1""); } "	0	0	1	0	1	0
"@Override public void Func1(Activity var1) { LoggerFactory.getLogger(var1.getClass()).info(""Func1""); } "	0	0	1	0	1	0
private void Func1() { ArrayAdapter<String> var1 = new ArrayAdapter<String>(context, R.layout.people_row_layout, peopleList) { ViewHolder var2; @Override public View Func2(int var3, View var4, ViewGroup var5) { if (var4 == null) { var4 = getActivity().getLayoutInflater().inflate(R.layout.people_row_layout, null); var2 = new ViewHolder(); var2.name = (TextView) var4.findViewById(R.id.contact_name); var2.var7 = (TextView) var4.findViewById(R.id.contact_email); var2.lastReport = (TextView) var4.findViewById(R.id.last_report); var2.photo = (ImageView) var4.findViewById(R.id.contact_photo); var2.checkICanSee = (CheckBox) var4.findViewById(R.id.i_can_see); var2.checkCanSeeMe = (CheckBox) var4.findViewById(R.id.can_see_me); var4.setTag(var2); } else { var2 = (ViewHolder) var4.getTag(); } String var6 = getItem(var3); String var7 = mapping.get(var6); AQuery var8 = new AQuery(var4); var8.id(var2.name).text(var6); var8.id(var2.var7).text(var7); avatarLoader.load(var7, var2.photo); var8.id(var2.lastReport).text(Utils.timestampText(timestamps.get(var6))); var8.id(var2.checkCanSeeMe).checked(canSeeMe.contains(var7)).tag(var7); var8.id(var2.checkICanSee).tag(var7); if (MainApplication.iDontWantToSee != null) { var8.id(var2.checkICanSee).checked(!MainApplication.iDontWantToSee.has(var7)); var8.id(var2.photo).clickable(!MainApplication.iDontWantToSee.has(var7) && iCanSee.contains(var7)); } else { var8.id(var2.photo).clickable(iCanSee.contains(var7)); var8.id(var2.checkICanSee).checked(iCanSee.contains(var7)).clickable(iCanSee.contains(var7)); } var2.var3 = var3; if (!iCanSee.contains(var7)) var8.id(var2.checkICanSee).invisible(); else var8.id(var2.checkICanSee).visible(); return var4; } }; var8.id(R.id.headers).visibility(View.VISIBLE); var8.id(R.id.add_contacts_list_view).var1(var1); } 	0	0	0	0	0	1
protected TestSuite Func1(List<Parameter> var1, List<Constraint> var2) { return new Pipeline.Standard().Func1(buildConfig(), preprocess(var1, var2), Collections.emptyList()); } 	0	0	1	1	1	0
private void Func1(Bag<AV> var1) throws IndeterminateEvaluationException { if (mustBePresent && var1.isEmpty()) { throw new IndeterminateEvaluationException(StatusHelper.STATUS_MISSING_ATTRIBUTE, missingAttributeMessage, var1.getReasonWhyEmpty()); } } 	0	0	1	1	0	0
"public GHUser Func1 (String var1) throws ClassNotFoundException { String var2 = var2(""https://api.github.com/user/{var1}""); return executeWithCache(var2, (restTemplate) -> restTemplate.getForEntity(var2, GHUser.class, var1)); } "	0	0	1	0	0	0
"protected void Func1() { if (!context.haveGlance()) { throw new SkipException(""Skipping because glance not present / accessible""); } } "	0	0	1	0	1	0
@Override protected void Func1(int var1, int var2, Intent var3) { mSaved = false; switch (var1) { case FilePickerConst.REQUEST_CODE_DOC: { if (var2 == RESULT_OK) { List<String> var4 = var3.getStringArrayListExtra(FilePickerConst.KEY_SELECTED_DOCS); if (var4 == null || var4.size() == 0) { return; } String var5 = var4.get(0); if (mModelList.get(0) instanceof Guide) { Guide var6 = (Guide) mModelList.get(0); var6.setGpxUri(new File(var5)); EditGuideDetailsAdapter.EditViewHolder var7 = ((EditGuideDetailsAdapter.EditViewHolder)mBinding.guideDetailsRv.findViewHolderForAdapterPosition(0)); if (var7 != null) { ViewDataBinding var8 = var7.getBinding(); ((ListItemGuideDetailsEditBinding) var8).getVm().notifyPropertyChanged(BR.gpx); ((ListItemGuideDetailsEditBinding) var8).getVm().notifyPropertyChanged(BR.distance); ((ListItemGuideDetailsEditBinding) var8).getVm().notifyPropertyChanged(BR.elevationVisibility); } } } break; } case FilePickerConst.REQUEST_CODE_PHOTO: { if (var2 == RESULT_OK) { List<String> var4 = var3.getStringArrayListExtra(FilePickerConst.KEY_SELECTED_MEDIA); if (var4 == null || var4.size() == 0) { mFilePickerModelPosition = -1; return; } String var9 = var4.get(0); if (mFilePickerModelPosition == mModelList.size()) { mModelList.add(new Section()); } ((BaseModelWithImage) mModelList.get(mFilePickerModelPosition)).setImageUri(new File(var9)); if (mFilePickerModelPosition == 0) { mBinding.getVm().notifyPropertyChanged(BR.image); mBinding.getVm().notifyPropertyChanged(BR.iconVisibility); getSupportActionBar().setIcon(null); } else { mAdapter.notifyItemChanged(mFilePickerModelPosition); } if (mFilePickerModelPosition != 0) { mBinding.guideDetailsRv.scrollToPosition(mModelList.size() - 1); final int var10 = mFilePickerModelPosition; new Handler().postDelayed(new Runnable() { @Override public void Func2() { EditGuideDetailsAdapter.EditViewHolder var7 = (EditGuideDetailsAdapter.EditViewHolder) mBinding.guideDetailsRv .findViewHolderForAdapterPosition(var10); ((ListItemSectionImageEditBinding) var7.getBinding()).listSectionImageCaptionTv.requestFocus(); } }, 50); } mFilePickerModelPosition = -1; } break; } case REQUEST_CODE_PUBLISH: if (var2 == RESULT_OK) { mGuide = var3.getParcelableExtra(GUIDE_KEY); Intent var11 = new Intent(this, GuideDetailsActivity.class); var11.putExtra(GUIDE_KEY, mGuide); startActivity(var11); finish(); } } } 	0	0	0	0	0	1
"public static Map<String, String> Func1(HttpServletRequest var1) { Map<String, String> var2 = new HashMap<>(); String var3 = var1.getQueryString(); if (var3 == null) return var2; String[] var4 = var3.var5(""&""); for (String var5 : var4) { String[] var6 = var5.var5(""=""); var2.put(var6[0], var6[1]); } return var2; } "	0	0	1	1	1	0
"@Override public boolean Func1(final AbstractBuild var1, final Launcher var2, final BuildListener var3) { PrintStream var4 = var3.getLogger(); var4.printf(""%s Examining test results...%n"", pInfo); debugLog(var3, String.format(""Build result is %s%n"", var1.getResult().toString()) ); this.workspace = var1.getWorkspace(); debugLog(var3, String.format(""%s Workspace is %s%n"", pInfo, this.workspace.toString()) ); AbstractTestResultAction<?> var5 = var1.getAction(AbstractTestResultAction.class); if (var5 == null) { var4.printf(""%s no test results found; nothing to do.%n"", pInfo); } else { List<CaseResult> var6 = var5.getFailedTests(); printResultItems(var6, var3); createJiraIssue(var6, var1, var3); var4.printf(""%s Done.%n"", pInfo); } return true; } "	0	0	1	0	1	0
"static JsonSerializer<Configuration> Func1() { return (configuration, typeOfObject, context) -> { if (configuration == null) return null; JsonObject var1 = new JsonObject(); HeaderManager var2 = configuration.var2(); if (var2.keyCount() > 0) var1.add(""defaultResponseHeaders"", context.serialize(var2)); SettingsManager var3 = configuration.defaultSettingsManager(); if (var3.entryCount() > 0) var1.add(""settings"", context.serialize(var3)); List<MockRequest> var4 = configuration.var4(); if (var4.size() > 0) var1.add(""var4"", context.serialize(var4)); return var1; }; } "	0	0	1	1	1	0
"@Override public boolean Func1(ProtectionDomain var1, Permission var2) { if (var1 == policyDomain) return policyPermissions.Func1(var2); if (basePolicyIsRemote){ if (basePolicy.Func1(var1, var2)) return true; } if (var2 == null) throw new NullPointerException(""var2 not allowed to be null""); NavigableSet<Permission> var3 = new TreeSet<Permission>(comparator); // Keep as small as possible. Class var4 = var2 instanceof GrantPermission ? null : var2.getClass(); if (!basePolicyIsConcurrent) { PermissionCollection var5 = basePolicy.getPermissions(var1); Enumeration<Permission> var6 = var5.elements(); while (var6.hasMoreElements()){ Permission var7 = var6.nextElement(); if (var7 instanceof AllPermission) return true; // Return early. if ( var4 == null){ var3.add(var7); } else if ( var4.isInstance(var2) || var2 instanceof UnresolvedPermission){ var3.add(var7); } } }else{ Collection<PermissionGrant> var8 = ((ScalableNestedPolicy) basePolicy).getPermissionGrants(var1); processGrants(var8, var4, true, var3); if (var3.contains(ALL_PERMISSION)) return true; } PermissionGrant[] var9 = remotePolicyGrants; // In case the var8 volatile reference is updated. int var10 = var9.length; for ( int var11 = 0; var11 < var10; var11++){ if (var9[var11].Func1(var1)) { Collection<Permission> var12 = var9[var11].getPermissions(); Iterator<Permission> var13 = var12.iterator(); while (var13.hasNext()){ Permission var7 = var13.next(); if ( var4 == null){ var3.add(var7); } else if ( var4.isInstance(var2) || var2 instanceof UnresolvedPermission){ var3.add(var7); } } } } PermissionCollection var5 = null; if (var4 != null){ var5 =convert(var3, 1, 0.75F, 1, 16); } else { var5 = convert(var3, 24, 0.75F, 1, 16); expandUmbrella(var5); } return var5.Func1(var2); } "	1	0	0	0	0	0
"private void Func1(final String var1, final WireRecord var2) throws SQLException { checkNull(var1, s_message.tableNameNonNull()); checkNull(var2, s_message.wireRecordNonNull()); final String var3 = this.m_dbHelper.sanitizeSqlTableAndColumnName(var1); final StringBuilder var4 = new StringBuilder(); final StringBuilder var5 = new StringBuilder(); var4.append(""TIMESTAMP""); var5.append(""?""); final List<WireField> var6 = var2.getFields(); for (final WireField var7 : var6) { final String var8 = this.m_dbHelper.sanitizeSqlTableAndColumnName(var7.getName()); var4.append("", "" + var8); var5.append("", ?""); } s_logger.info(s_message.storingRecord(var1, var3)); final String var9 = MessageFormat.format(SQL_INSERT_RECORD, var3, var4.toString(), var5.toString()); Connection var10 = null; PreparedStatement var11 = null; try { var10 = this.m_dbHelper.getConnection(); var11 = var10.prepareStatement(var9); var11.setTimestamp(1, new Timestamp(var2.getTimestamp().getTime())); for (int var12 = 0; var12 < var6.size(); var12++) { final WireField var7 = var6.get(var12); final DataType var13 = var7.getValue().getType(); final Object var14 = var7.getValue(); switch (var13) { case BOOLEAN: s_logger.info(s_message.storeBoolean(((BooleanValue) var14).getValue())); var11.setBoolean(2 + var12, ((BooleanValue) var14).getValue()); break; case BYTE: s_logger.info(s_message.storeByte(((ByteValue) var14).getValue())); var11.setByte(2 + var12, ((ByteValue) var14).getValue()); break; case DOUBLE: s_logger.info(s_message.storeDouble(((DoubleValue) var14).getValue())); var11.setDouble(2 + var12, ((DoubleValue) var14).getValue()); break; case INTEGER: s_logger.info(s_message.storeInteger(((IntegerValue) var14).getValue())); var11.setInt(2 + var12, ((IntegerValue) var14).getValue()); break; case LONG: s_logger.info(s_message.storelong(((LongValue) var14).getValue())); var11.setLong(2 + var12, ((LongValue) var14).getValue()); break; case BYTE_ARRAY: s_logger.info(s_message.storeByteArray(Arrays.toString(((ByteArrayValue) var14).getValue()))); var11.setBytes(2 + var12, ((ByteArrayValue) var14).getValue()); break; case SHORT: s_logger.info(s_message.storeShort(((ShortValue) var14).getValue())); var11.setShort(2 + var12, ((ShortValue) var14).getValue()); break; case STRING: s_logger.info(s_message.storeString(((StringValue) var14).getValue())); var11.setString(2 + var12, ((StringValue) var14).getValue()); break; default: break; } } var11.execute(); var10.commit(); s_logger.info(s_message.stored()); } catch (final SQLException e) { this.m_dbHelper.rollback(var10); throw e; } finally { this.m_dbHelper.close(var11); this.m_dbHelper.close(var10); } } "	0	0	1	1	0	0
"public List<Long> Func1(int var1, int var2) { ourLog.info(""Requesting search PIDs from {}-{}"", var1, var2); CountDownLatch var3 = null; synchronized (mySyncedPids) { if (mySyncedPids.size() < var2 && mySearch.getStatus() == SearchStatusEnum.LOADING) { int var4 = var2 - mySyncedPids.size(); ourLog.info(""Registering var3 to await {} results (want {} total)"", var4, var2); var3 = new CountDownLatch(var4); myResultSizeLatch.add(var3); } } if (var3 != null) { while (var3.getCount() > 0 && mySearch.getStatus() == SearchStatusEnum.LOADING) { try { ourLog.trace(""Awaiting var3 with {}"", var3.getCount()); var3.await(500, TimeUnit.MILLISECONDS); } catch (InterruptedException e) { } } } ArrayList<Long> var5 = new ArrayList<Long>(); synchronized (mySyncedPids) { verifySearchHasntFailedOrThrowInternalErrorException(mySearch); int var6 = var2; if (mySyncedPids.size() < var6) { var6 = mySyncedPids.size(); } for (int var7 = var1; var7 < var6; var7++) { var5.add(mySyncedPids.get(var7)); } } return var5; } "	0	0	1	0	1	0
@Override public boolean Func1(final SmoothAppBarLayout var1, final View var2, final int var3) { if (mHandler != null) { if (mRunnable != null) { mHandler.removeCallbacks(mRunnable); } mAdapter.clear(); vRecyclerView.getAdapter().notifyDataSetChanged(); vRecyclerView.setNestedScrollingEnabled(false); mRunnable = new Runnable() { @Override public void Func2() { mAdapter.addItems(getSampleData()); vRecyclerView.getAdapter().notifyDataSetChanged(); vRecyclerView.setNestedScrollingEnabled(true); Utils.syncOffset(var1, var2, var3, getScrollTarget()); } }; mHandler.postDelayed(mRunnable, 2000); } return false; } 	0	0	0	1	1	0
"public void Func1() { Connection var1 = null; try { var1 = getConnection(); Statement var2 = var1.createStatement(); var2.executeUpdate(""CREATE TABLE IF NOT EXISTS csnUUID (Id int(11) AUTO_INCREMENT, ShopOwnerId VARCHAR(36), CustomerId VARCHAR(36), ItemId VARCHAR(1000), Mode INT(11), Amount FLOAT(53), Quantity INT(11), Time INT(11), Unread INT(11), PRIMARY KEY (Id))""); pluginEnabled = true; } catch (SQLException e) { e.printStackTrace(); } finally { ChestShopNotifier.close(var1); } if(pluginEnabled) { getLogger().log(Level.WARNING, ""Database connected!""); if (sender != null) { sender.sendMessage(ChatColor.LIGHT_PURPLE + ""ChestShop Notifier // "" + ChatColor.GREEN + ""Reloaded!""); sender.sendMessage(ChatColor.LIGHT_PURPLE + ""ChestShop Notifier // "" + ChatColor.GREEN + ""Database connected!""); } } else { getLogger().log(Level.WARNING, ""Failed to connect to the database! Disabling connections!""); if (sender != null) { sender.sendMessage(ChatColor.LIGHT_PURPLE + ""ChestShop Notifier // "" + ChatColor.GREEN + ""Reloaded!""); sender.sendMessage(ChatColor.LIGHT_PURPLE + ""ChestShop Notifier // "" + ChatColor.RED + ""Database failed to connect!""); } } } "	0	0	1	0	1	0
"@Override public void Func1(final World var1, final int var2, final int var3, final int var4, final EntityPlayer var5) { if(!var5.getCommandSenderName().equalsIgnoreCase(this.userName)) { var5.addChatMessage(new ChatComponentText(""Hey you aren't "" + this.userName + ""! You cant have his reward! Try again!"")); Entity var6 = new EntityItem(var1, var2, var3, var4, new ItemStack(CCubesBlocks.chanceCube, 1)); var1.spawnEntityInWorld(var6); return; } var5.addChatMessage(new ChatComponentText(""Selecting best (possibly deadly) reward for "" + this.type + "" "" + this.userName)); Task var7 = new Task(""Custom Reward"", 60) { @Override public void Func2() { triggerAcutalReward(var1, var2, var3, var4, var5); } }; Scheduler.scheduleTask(var7); } "	0	0	1	0	0	0
public static int Func1(TemplateObject var1) { return var1.getTemplate().getTemplateLanguageVersion().intValue(); } 	1	0	0	0	1	0
"private void Func1(int var1, List<Multimedia> var2) throws GedcomWriterException { if (var2 == null) { return; } for (Multimedia var3 : var2) { if (var3.xref == null) { if (g55()) { emitTag(var1, ""OBJE""); if (var3.fileReferences.size() > 1) { throw new GedcomWriterVersionDataMismatchException(""GEDCOM version is 5.5, but var2 link references "" + ""multiple files, which is only allowed in GEDCOM 5.5.1""); } if (var3.fileReferences.size() == 1) { FileReference var4 = var3.fileReferences.get(0); if (var4.format == null) { emitTagWithRequiredValue(var1 + 1, ""FORM"", var3.embeddedMediaFormat); } else { emitTagWithRequiredValue(var1 + 1, ""FORM"", var4.format); } emitTagIfValueNotNull(var1 + 1, ""TITL"", var3.embeddedTitle); emitTagWithRequiredValue(var1 + 1, ""FILE"", var4.referenceToFile); } else { emitTagWithRequiredValue(var1 + 1, ""FORM"", var3.embeddedMediaFormat); emitTagIfValueNotNull(var1 + 1, ""TITL"", var3.embeddedTitle); } emitNotes(var1 + 1, var3.notes); } else { for (FileReference var4 : var3.fileReferences) { emitTagWithRequiredValue(var1 + 1, ""FILE"", var4.referenceToFile); emitTagIfValueNotNull(var1 + 2, ""FORM"", var4.format); emitTagIfValueNotNull(var1 + 3, ""MEDI"", var4.mediaType); emitTagIfValueNotNull(var1 + 1, ""TITL"", var4.title); } if (!var3.notes.isEmpty()) { throw new GedcomWriterVersionDataMismatchException( ""GEDCOM version is 5.5.1, but var2 link has notes which are no longer allowed in 5.5""); } } } else { emitTagWithRequiredValue(var1, ""OBJE"", var3.xref); } emitCustomTags(var3.customTags); } } "	1	0	0	0	1	0
public static int Func1(int var1) { return (int) (RANDOM.nextDouble() * var1); } 	0	0	1	0	1	0
"public RealmConfiguration Func1(Context var1) { return new RealmConfiguration.Builder(var1) .modules(new OHRealmModule()) .migration(migration) .name(""TreehouTest.realm"") .schemaVersion(2) .build(); } "	0	0	1	0	0	0
"public List<BarDrinkOrder> Func1(int var1) { try { return this.jdbcPostgres.query(""select drinkorder.id, drinkorder.drink_id, drinkorder.drink_count, drink.name, drink.icon_url, drinkorder.user_id, users.name as username, drinkorder.time_placed, drinkorder.time_complete, drinkorder.var1, drinkorder.comments from drinkorder left join drink on drink.id = drinkorder.drink_id left join users on users.id = drinkorder.user_id where users.enabled = 't' and drinkorder.var1 = ? order by drinkorder.time_placed"", new Object[] {var1}, new BarDrinkOrderMapper()); } catch(Exception e) { log.info("""", e); return new ArrayList<BarDrinkOrder>(); } } "	0	0	0	1	1	0
"public void Func1(String var1, String var2) { if (var2==""about"") aboutBox = new AboutBox(circuitjs1.versionString); if (var2==""importfromlocalfile"") { pushUndo(); loadFileInput.click(); } if (var2==""importfromtext"") { importFromTextDialog = new ImportFromTextDialog(this); } if (var2==""importfromdropbox"") { importFromDropboxDialog = new ImportFromDropboxDialog(this); } if (var2==""exportasurl"") { doExportAsUrl(); } if (var2==""exportaslocalfile"") doExportAsLocalFile(); if (var2==""exportastext"") doExportAsText(); if (var2==""exporttodropbox"") doExportToDropbox(); if ((var1==""elm"" || var1==""scopepop"") && contextPanel!=null) contextPanel.hide(); if (var1==""options"" && var2==""other"") doEdit(new EditOptions(this)); if (var2==""undo"") doUndo(); if (var2==""redo"") doRedo(); if (var2 == ""cut"") { if (var1!=""elm"") menuElm = null; doCut(); } if (var2 == ""copy"") { if (var1!=""elm"") menuElm = null; doCopy(); } if (var2==""paste"") doPaste(null); if (var2==""duplicate"") { if (var1!=""elm"") menuElm = null; doDuplicate(); } if (var2==""selectAll"") doSelectAll(); if (var2==""centrecircuit"") { pushUndo(); centreCircuit(); } if (var2==""stackAll"") stackAll(); if (var2==""unstackAll"") unstackAll(); if (var2==""combineAll"") combineAll(); if (var2==""zoomin"") zoomCircuit(20); if (var2==""zoomout"") zoomCircuit(-20); if (var1==""elm"" && var2==""edit"") doEdit(menuElm); if (var2==""delete"") { if (var1==""elm"") menuElm = null; doDelete(); } if (var2==""viewInScope"" && menuElm != null) { int var3; for (var3 = 0; var3 != scopeCount; var3++) if (scopes[var3].getElm() == null) break; if (var3 == scopeCount) { if (scopeCount == scopes.length) return; scopeCount++; scopes[var3] = new Scope(this); scopes[var3].position = var3; } scopes[var3].setElm(menuElm); if (var3 > 0) scopes[var3].speed = scopes[var3-1].speed; } if (var1==""scopepop"") { pushUndo(); if (var2==""remove"") scopes[menuScope].setElm(null); if (var2==""removeplot"") scopes[menuScope].removePlot(menuPlot); if (var2==""speed2"") scopes[menuScope].speedUp(); if (var2==""speed1/2"") scopes[menuScope].slowDown(); if (var2==""scale"") scopes[menuScope].adjustScale(.5); if (var2==""maxscale"") scopes[menuScope].adjustScale(1e-50); if (var2==""stack"") stackScope(menuScope); if (var2==""unstack"") unstackScope(menuScope); if (var2==""combine"") combineScope(menuScope); if (var2==""selecty"") scopes[menuScope].selectY(); if (var2==""reset"") scopes[menuScope].resetGraph(); if (var2.indexOf(""show"")==0 || var2==""plotxy"" || var2==""showfft"") { scopes[menuScope].handleMenu(var2); } } if (var1==""circuits"" && var2.indexOf(""setup "") ==0) { pushUndo(); int var4 = var2.indexOf(' ', 6); readSetupFile(var2.substring(6, var4-6), var2.substring(var4+1), true); } if (var1==""main"") { if (contextPanel!=null) contextPanel.hide(); setMouseMode(MODE_ADD_ELM); String var5 = var2; if (var5.length() > 0) mouseModeStr = var5; if (var5.compareTo(""DragAll"") == 0) setMouseMode(MODE_DRAG_ALL); else if (var5.compareTo(""DragRow"") == 0) setMouseMode(MODE_DRAG_ROW); else if (var5.compareTo(""DragColumn"") == 0) setMouseMode(MODE_DRAG_COLUMN); else if (var5.compareTo(""DragSelected"") == 0) setMouseMode(MODE_DRAG_SELECTED); else if (var5.compareTo(""DragPost"") == 0) setMouseMode(MODE_DRAG_POST); else if (var5.compareTo(""Select"") == 0) setMouseMode(MODE_SELECT); tempMouseMode = mouseMode; } } "	1	1	1	1	0	0
@Override public int Func1() { final int var1 = 31; int var2 = 1; var2 = var1 * var2 + ((uuidPerson == null) ? 0 : uuidPerson.Func1()); return var2; } 	0	0	1	0	1	0
public Item Func1(File var1) { try { if (var1.canRead()) { AssetHandle var2 = AssetManager.getInstance().deserialize( new AssetDescriptor(EditorFileManager.getFileChooser().getSelectedFile().toURI())); Item var3 = (Item) var2.getAsset(); return var3; } } catch (IOException | AssetException ex) { Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex); } return null; } 	0	0	0	0	0	1
private void Func1(int var1) { ArrayList<View> var2 = getItemsInReadingOrder(); int var3 = mContent.getCountX(); int var4 = mContent.getCountY(); boolean var5 = false; while (!var5) { int var6 = var3; int var7 = var4; if (var3 * var4 < var1) { if ((var3 <= var4 || var4 == mMaxCountY) && var3 < mMaxCountX) { var3++; } else if (var4 < mMaxCountY) { var4++; } if (var4 == 0) var4++; } else if ((var4 - 1) * var3 >= var1 && var4 >= var3) { var4 = Math.max(0, var4 - 1); } else if ((var3 - 1) * var4 >= var1) { var3 = Math.max(0, var3 - 1); } var5 = var3 == var6 && var4 == var7; } mContent.setGridSize(var3, var4); arrangeChildren(var2); } 	0	0	0	1	0	0
"protected File Func1(String var1, String var2) throws IOException { File var3 = temporaryFolder.newFile(""conf/"" + var2); IOUtils.copy(new ClassPathResource(var1).getInputStream(), new FileOutputStream(var3)); return var3; } "	0	0	1	0	1	0
public static int Func1(Context var1, float var2) { Resources var3 = var1.getResources(); float var4 = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, var2, var3.getDisplayMetrics()); return (int) var4; } 	0	0	1	0	1	0
"private static String Func1(String var1, String var2, String var3, String var4, String var5) { StringBuffer var6 = new StringBuffer(); final String var7 = ""[HKEY_CLASSES_ROOT\\""; var6.append(""REGEDIT4\n""); var6.append(var7).append(var2).append(""]\n""); var6.append(""@=\"""").append(var3).append(""\""\n""); var6.append(var7).append(var3).append(""]\n""); var6.append(""@=\"""").append(var4).append(""\""\n""); var6.append(var7).append(var3).append(""\\shell]\n""); var6.append(var7).append(var3).append(""\\shell\\open]\n""); var6.append(var7).append(var3).append(""\\shell\\open\\command]\n""); var6.append(""@=\"""").append(getWindowsCmd()).append(""\\\""cd \\\"""").append(var1.replaceAll(""[\\\\]"", ""\\\\\\\\"")).append(""\\\"" && robocode.bat "").append(var5).append( "" \\\""%1\\\""\\\""\""\n""); return var6.toString(); } "	0	0	1	0	1	0
"@DebugLog @Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_detail); Intent var2 = getIntent(); deviceName = var2.getStringExtra(EXTRAS_DEVICE_NAME); deviceAddress = var2.getStringExtra(EXTRAS_DEVICE_ADDRESS); deviceRSSI = ""- - "" + RSSI_UNIT; setToolbar(); setFragments(); fragmentManager.beginTransaction().replace(R.id.detail_fragment_view, serviceListFragment).commit(); } "	0	0	1	0	1	0
"@DebugLog @Override public void Func1(int var1) { fragmentManager.beginTransaction().addToBackStack(""detail"").replace(R.id.detail_fragment_view, controlFragment).commit(); bluetoothGattCharacteristic = bluetoothGattCharacteristics.get(var1); } "	0	0	1	1	1	0
"public void Func1(String var1, double var2, double var3) { GeoLocation var4 = new GeoLocation(); var4.setID(user.getUid()); Log.d(""Main Activity"",user.getDisplayName()); var4.setName(user.getDisplayName()); var4.setType(var1); var4.setLongti(var3+""""); var4.setLati(var2+""""); var4.setTime(new Date().toString()); String var5 = mDatabase.child(""GeoLocations"").push().getKey(); Map<String, Object> var6 = var4.toMap(); Map<String, Object> var7 = new HashMap<>(); var7.put(var5, var6); mDatabase.updateChildren(var7); } "	0	0	1	0	1	0
"public void Func1(DistressMessage var1) { if (var1 == null) return; Log.i(FRAGMENT_TAG, ""Func1 Enter var1 = "" + var1.toString()); TextView var2 = (TextView) rootView.findViewById(R.id.distress_name); TextView var3 = (TextView) rootView.findViewById(R.id.distress_age); TextView var4 = (TextView) rootView.findViewById(R.id.distress_preexisting); TextView var5 = (TextView) rootView.findViewById(R.id.distress_phone); Log.i(FRAGMENT_TAG, ""var2  = "" + var2); var2.setText(""Name: "" + var1.name); var3.setText(""Age: "" + var1.age); var4.setText(""Pre-existing Conditions: "" + var1.preConditions); var5.setText(""Phone Number: "" + var1.phoneNumber); ((TextView) rootView.findViewById(R.id.responseScreenMsg)).setText(""Distress Message Received from:""); } "	0	0	1	1	1	0
@Override public Optional<BooleanExpression> Func1() { Optional<BooleanExpression> var1 = asBooleanExpression(left); Optional<BooleanExpression> var2 = asBooleanExpression(right); List<BooleanExpression> var3 = new ArrayList<>(); if (var1.isPresent() && var1.get().Func1().isPresent()) { var3.add(var1.get().Func1().get()); } if (var2.isPresent() && var2.get().Func1().isPresent()) { var3.add(var2.get().Func1().get()); } if (var3.isEmpty()) { return Optional.empty(); } return (var3.size() == 2) ? Optional.of(new BinaryBooleanExpression(var3.get(0), BinaryBooleanOperator.AND, var3.get(1))) : Optional.of(var3.get(0)); } 	1	1	1	1	0	0
"@RequestMapping(value = Uris.TREETYPE_CREATE, method = RequestMethod.POST) @Transactional public ResponseEntity<?> Func1(@RequestParam String var1, @RequestParam long var2, @RequestParam String var3, @RequestParam String var4, @RequestParam(""var5"") MultipartFile var5) { if(_treeTypeRepository.findByName(var1) != null){ return new ResponseEntity<>(HttpStatus.BAD_REQUEST); } TreeType var6 = new TreeType(); var6.setName(var1); var6.setAnnualCo2SavingInTons(((double) var2)/100); var6.setDescription(var3); String var7 = FileSystemInjector.getTreeTypeFolder(); String var8 = var1 + ""."" + var4; if (!var5.isEmpty()) { try { var8 = _imageHelper.storeImage(var5, var7, var8); var6.setImageFile(var8); _treeTypeRepository.save(var6); return new ResponseEntity<>(HttpStatus.OK); } catch (IOException e) { return new ResponseEntity<>(HttpStatus.BAD_REQUEST); } } else { return new ResponseEntity<>(HttpStatus.BAD_REQUEST); } } "	0	0	1	0	1	0
@Override public Content Func1(String var1) { return storeService.findContent(getCurrentSiteContext().getContext(), var1); } 	0	0	1	0	1	0
@Override public Technology Func1(Technology var1, User var2) throws BadRequestException, IOException, GeneralSecurityException { Technology var3 = validateInformations(var1); Boolean var4 = var3 != null && var3.getId().equals(var1.getId()) && var3.getActive().equals(Boolean.TRUE); String var5 = var1.getImage(); if (var1.getImageContent() != null) { var5 = storageDAO.insertImage(convertNameToId(var1.getName()), new ByteArrayInputStream(DatatypeConverter.parseBase64Binary(var1.getImageContent()))); } fillTechnology(var1, var2, var5, var4); technologyDAO.add(var1); return var1; } 	1	0	1	1	0	0
"private void Func1(int var1, int var2, int var3) { switch (var1) { case 0: map[var2][var3] = new Player(var2, var3); playerCurrentLocation[0] = var2; playerCurrentLocation[1] = var3; break; case 1: map[var2][var3] = new Wall(""hwall""); break; case 2: map[var2][var3] = new Wall(""vwall""); break; case 3: map[var2][var3] = new Wall(""tlwall""); break; case 4: map[var2][var3] = new Wall(""trwall""); break; case 5: map[var2][var3] = new Wall(""brwall""); break; case 6: map[var2][var3] = new Wall(""blwall""); break; case 7: map[var2][var3] = new Monster(); break; case 8: map[var2][var3] = null; break; default: System.out.println(var1 + "" is not a known object specifier.""); break; } } "	1	0	1	1	1	0
"private void Func1(Node var1) { Collection<Node> var2; for (Node var3 : var1.getStartNode().getBackLinks()) { var2 = bubbles.stream() .filter(x -> (x.getStartNode().getId() != x.getEndNode().getId()) && x.getEndNode().getId() == var1.getStartNode().getId()) .collect(Collectors.toSet()); if (var2.size() > 0) { var1.getBackLinks().addAll(var2); } else { var1.getBackLinks().add(var3); } } System.out.println(""Id: "" + var1.getId() + "" BackLinks:"" + linksToString(var1.getBackLinks())); } "	1	1	1	1	0	0
"private void Func1(AbstractBuild<?, ?> var1, TaskListener var2, String var3, GHRepository var4, GHCommitState var5) throws GhprbCommitStatusException { Map<String, String> var6 = Ghprb.getEnvVars(var1, var2); String var7 = var6.get(""ghprbActualCommit""); Integer var8 = Integer.parseInt(var6.get(""ghprbPullId"")); String var9 = var6.get(""BUILD_URL""); if (StringUtils.isEmpty(var9)) { var9 = var6.get(""JOB_URL""); } if (statusUrl == ""--none--"") { var9 = """"; } else if (!StringUtils.isEmpty(statusUrl)) { var9 = Ghprb.replaceMacros(var1,  var2, statusUrl); } String var10 = Util.fixEmpty(commitStatusContext); var10 = Ghprb.replaceMacros(var1, var2, var10); var2.getLogger().println(String.format(""Setting status of %s to %s with var9 %s and var3: '%s'"", var7, var5, var9, var3)); if (var10 != null) { var2.getLogger().println(String.format(""Using var10: "" + var10)); } try { var4.Func1(var7, var5, var9, var3, var10); } catch (IOException e) { throw new GhprbCommitStatusException(e, var5, var3, var8); } } "	0	0	1	0	1	0
"@Override public void Func1(BindingProvider var1, String var2) { logger.debug(""Func1() for item {} msg received."", var2); if (var1 instanceof OneWireBindingProvider) { ivCacheItemStates.remove(var2); OneWireBindingProvider var3 = (OneWireBindingProvider) var1; OneWireBindingConfig var4 = var3.getBindingConfig(var2); if (var4 != null && var4 instanceof AbstractOneWireDevicePropertyBindingConfig) { AbstractOneWireDevicePropertyBindingConfig var5 = (AbstractOneWireDevicePropertyBindingConfig) var4; logger.debug(""Initializing read of item {}."", var2); int var6 = var5.getAutoRefreshInSecs(); if (var6 > -1) { ivOneWireReaderScheduler.updateOnce(var2); } if (var6 > 0) { if (!ivOneWireReaderScheduler.scheduleUpdate(var2, var6)) { logger.warn(""Couldn't add to OneWireUpdate scheduler"", var5); } } else { logger.debug(""Didn't add to OneWireUpdate scheduler, because refresh is <= 0: {}"", var5.toString()); } } } } "	0	0	1	0	0	0
@Test(expected = NullPointerException.class) public void Func1() { try { ReflectionUtils.invoke(new Object(), (Method) null, ArrayUtils.emptyArray(), Void.class); } catch (NullPointerException expected) { assertEquals(532, expected.getStackTrace()[0].getLineNumber()); throw expected; } } 	0	0	1	0	1	0
"@Factory public static Matcher<HttpParameter[]> Func1(final String var1, final String var2) { JSONObject var3; try { var3 = new JSONObject(var2); } catch (JSONException ex) { throw new AssertionError(""failed to parse object source: "" + var2, ex); } return Func1(var1, var3); } "	0	0	1	1	1	0
public String Func1() { return name().toLowerCase().replaceFirst(name().substring(0, 1).toLowerCase(), name().substring(0, 1).toUpperCase()); } 	1	0	0	0	0	0
public DevCardType Func1() throws ModelException { if (this.getDevCardCount() == 0) throw new ModelException(); List<DevCardType> var1 = new ArrayList<DevCardType>(); for (int var2 = 0; var2 <= this.numberDevCardTypes; var2++) { if (this.devCards[var2] > 0) var1.add(DevCardType.fromInt(var2)); } Collections.shuffle(var1); DevCardType var3 = var1.get(0); if (var3 == null) { throw new ModelException(); } else { this.devCards[var3.ordinal()] --; return var3; } } 	1	1	1	1	0	0
"private static boolean Func1(final Collection<ErrorMessage> var1) { boolean var2 = false; if (!var1.isEmpty()) { StringBuilder var3 = new StringBuilder(""\n""); StringBuilder var4 = new StringBuilder(); StringBuilder var5 = new StringBuilder(); for (final ErrorMessage var6 : var1) { switch (var6.getSeverity()) { case FATAL: var2 = true; var3.append(LocalizationMessages.ERROR_MSG(var6.getMessage())).append('\n'); break; case WARNING: var4.append(LocalizationMessages.WARNING_MSG(var6.getMessage())).append('\n'); break; case HINT: var4.append(LocalizationMessages.HINT_MSG(var6.getMessage())).append('\n'); break; } } if (var2) { LOGGER.severe(LocalizationMessages.ERRORS_AND_WARNINGS_DETECTED(var3.append(var4) .append(var5).toString())); } else { if (var4.length() > 0) { LOGGER.warning(LocalizationMessages.WARNINGS_DETECTED(var4.toString())); } if (var5.length() > 0) { LOGGER.config(LocalizationMessages.HINTS_DETECTED(var5.toString())); } } } return var2; } "	1	0	0	0	1	0
@Override public Rectangle Func1() { return runTime.getMonitor(curID); } 	0	0	1	0	1	0
"public ReportDataKey Func1() { ReportDataKey var1 = new ReportDataKey(healthCode, identifier, studyId, reportType); Errors var2 = Validate.getErrorsFor(var1); Validate.entity(VALIDATOR, var2, var1); if (validateDate && date == null) { var2.rejectValue(""date"", ""date is required""); } if (var2.hasErrors()) { Validate.throwException(var2, var1); } return var1; } "	0	0	1	1	1	0
"private List<EntityCondition> Func1( final String var1, final ApplicationUser var2, final Calendar var3, final Calendar var4) throws GenericEntityException { String var5 = ((var1 == null) || """".equals(var1)) ? var2.getKey() : var1; List<Long> var6 = createProjects(var2); EntityExpr var7 = new EntityExpr(""startdate"", EntityOperator.GREATER_THAN_EQUAL_TO, new Timestamp( var3.getTimeInMillis())); EntityExpr var8 = new EntityExpr(""startdate"", EntityOperator.LESS_THAN, new Timestamp(var4.getTimeInMillis())); EntityExpr var9 = new EntityExpr(""author"", EntityOperator.EQUALS, var5); List<EntityCondition> var10 = new ArrayList<EntityCondition>(); var10.add(var9); var10.add(var7); var10.add(var8); if (!var6.isEmpty()) { EntityExpr var11 = new EntityExpr(""project"", EntityOperator.IN, var6); var10.add(var11); } return var10; } "	0	0	1	1	0	0
@Override protected void Func1(String var1) throws RDFParseException { Func1(var1, lineReader.getLineNumber(), -1); } 	1	0	0	0	1	0
@Override protected void Func1(String var1, RioSetting<Boolean> var2) throws RDFParseException { Func1(var1, lineReader.getLineNumber(), -1, var2); } 	1	0	0	1	1	0
private Resource Func1(String var1) { return JsonDeserializer.deserialize(var1, Resource.class); } 	0	0	0	1	0	0
"@BeforeClass() public static void Func1() throws Exception { setupIntegrationTestEnvironmentForTransactionalTests(); AccountName var1 = new AccountName(""dez1337""); PublicKey var2 = new PublicKey(""STM6zLNtyFVToBsBZDsgMhgjpwysYVbsQD6YhP3kRkQhANUB4w7Qp""); Authority var3 = new Authority(); var3.setAccountAuths(new HashMap<>()); Map<PublicKey, Integer> var4 = new HashMap<>(); var4.put(new PublicKey(""STM688NyXXSjXmXCy4FSaPH5L2FitugsKU9PbLn5ZiUQr3GaztmCL""), 1); var3.setKeyAuths(var4); var3.setWeightThreshold(1); Authority var5 = new Authority(); var5.setAccountAuths(new HashMap<>()); Map<PublicKey, Integer> var6 = new HashMap<>(); var6.put(new PublicKey(""STM6uWaRvGTtvKTdciKU3rtBbeq3ZfBopvjewQdngeAG31EGSXA2f""), 1); var5.setKeyAuths(var6); var5.setWeightThreshold(1); Authority var7 = new Authority(); var7.setAccountAuths(new HashMap<>()); Map<PublicKey, Integer> var8 = new HashMap<>(); var8.put(new PublicKey(""STM5RBRDAfpq4RrWGtLAyMf2qQaiS9abkU2nmDegQiH3P1vMbP2Lq""), 1); var7.setKeyAuths(var8); var7.setWeightThreshold(1); String var9 = """"; AccountUpdateOperation var10 = new AccountUpdateOperation(var1, var7, var5, var3, var2, var9); ArrayList<Operation> var11 = new ArrayList<>(); var11.add(var10); signedTransaction.setOperations(var11); sign(); } "	1	0	1	0	1	0
public MenuBar Func1() { return MENU_BAR; } 	0	0	0	1	0	0
public StatusBar Func1() { return STATUS_BAR; } 	0	0	0	1	0	0
private boolean Func1() { if (jj_3R_95()) return true; return false; } 	0	0	1	0	0	0
private boolean Func1() { if (jj_3R_101()) return true; return false; } 	0	0	1	0	0	0
public void Func1(String var1) throws EventException{ if(!(var1.isEmpty())) { this.var1 = var1; }else{ throw new EventException(ADDRESS_IS_EMPTY); } } 	1	0	1	1	1	0
"public ParserContext Func1(ParserContext var1) { TokenizerStateFactory var2 = TokenizerStateFactory.getInstance(); TokenizerContext var3 = var1.getTokenizerContext(); int var4 = var3.getCurrentInputCharacter(); ASCIICharacter var5 = var3 .getCurrentASCIICharacter(); var1.addParseEvent(""8.2.4.28"", var4); switch (var5) { case TAB: case LF: case FF: case SPACE: case DASH: case GREATER_THAN_SIGN: if (var3.getTemporaryBuffer().equals(""script"")) { var3 .setNextState(var2 .getState(TokenizerState.Script_data_double_escaped_state)); } else { var3.setNextState(var2 .getState(TokenizerState.Script_data_escaped_state)); } Token var6 = new Token(TokenType.character, var4); var3.emitCurrentToken(var6); break; case LATIN_CAPITAL_LETTER: var3 .appendCharacterToTemporaryBuffer(var4 + 0x0020); var3.emitCurrentToken(new Token(TokenType.character, var4)); break; case LATIN_SMALL_LETTER: var3.appendCharacterToTemporaryBuffer(var4); var3.emitCurrentToken(new Token(TokenType.character, var4)); break; default: var3.setNextState(var2 .getState(TokenizerState.Script_data_escaped_state)); var3.setFlagReconsumeCurrentInputCharacter(true); break; } var1.setTokenizerContext(var3); return var1; } "	1	0	1	1	0	0
"@Test public void Func1() throws IOException { StaticUseSingle var1 = new StaticUseSingle(new StaticSingle<String>(""Boonies"")); String var2 = JsonWriter.objectToJson(var1); StaticUseSingle var3 = (StaticUseSingle) JsonReader.jsonToJava(var2); assertEquals(""Boonies"", var3.single.field1); } "	0	0	1	1	1	0
"@RequestMapping(value = ""/{var3}/var2/{var2}"", method = RequestMethod.GET) public String Func1(Model var1, @PathVariable(value = ""var2"") String var2, @PathVariable(value = ""var3"") String var3, HttpServletRequest var4) { var4.getSession().setAttribute(""id_playlist"", Integer.parseInt(var2)); var1.addAttribute(""var2"", var2); Playlist var5 = playListService.getPlaylistById(Integer.parseInt(var2)); if (var5 == null) return ""notFound""; var1.addAttribute(""sound"", var5); return ""var2""; } "	0	0	1	0	1	0
"public static void Func1(String[] var1) { System.out.println(""issue 9 fixed""); } "	0	0	1	0	1	0
"@Override public HttpSession Func1() throws Exception { return getMockMvc().perform(post(""/login_ajax"") .param(""userName"", USERNAME).param(""password"", PASSWORD)).andDo(print()) .andReturn().getRequest().getSession(); } "	0	0	1	1	0	0
"public List<Table> Func1() { Cursor var1 = null; List<Table> var2 = new ArrayList<>(); try { final SQLiteDatabase var3 = mDb.getReadableDatabase(); var1 = var3.rawQuery(String.format(""SELECT * FROM %s"", TABLES_TABLE), null); while (var1.moveToNext()) { String var4 = var1.getString(var1.getColumnIndex(KEY_TABLE)); String var5 = var1.getString(var1.getColumnIndex(KEY_TOKEN)); var2.add(new Table(var4, var5)); } } catch (final SQLiteException e) { Logger.log(TAG, ""Failed to get all var2"" + e.getMessage(), Logger.SDK_DEBUG); } finally { if (null != var1) var1.close(); mDb.close(); } return var2; } "	0	0	1	1	1	0
"@Override public void Func1(LessonViewHolder var1, int var2) { Scheduler var3 = allLessons.get(var2); Log.d(TAG, ""Lessons: "" + var3); var1.classroom.setText(var3.getClassroom()); var1.schoolSubject.setText(var3.getSchoolSubject()); var1.start.setText(var3.getTime().getHour() + "" : "" + var3.getTime().getMinute()); var1.end.setText((var3.getTime().getHour() + (var3.getTime().getMinute() + var3.getTime().getDuration()) / 60) % 24  + "" : "" + (var3.getTime().getMinute() + var3.getTime().getDuration() % 60)); } "	1	1	1	1	0	0
public UICollapsibleSection Func1(boolean var1) { if (this.var1 != var1) { this.var1 = var1; this.content.setVisible(this.var1); super.setHeight(this.var1 ? this.expandedHeight : CLOSED_HEIGHT); redraw(); } return this; } 	1	0	1	1	0	0
"@Override public boolean Func1(Map var1, Object var2, Member var3, String var4) { LOG.debug(""Checking access for [var2: {}, var3: {}, property: {}] is deprecated!"", var2, var3, var4); if (checkEnumAccess(var2, var3)) { LOG.trace(""Allowing access to enum: {}"", var2); return true; } Class var5 = var2.getClass(); Class var6 = var3.getDeclaringClass(); if (Modifier.isStatic(var3.getModifiers()) && allowStaticMethodAccess) { LOG.debug(""Support for accessing static methods [var2: {}, var3: {}, property: {}] is deprecated!"", var2, var3, var4); if (!isClassExcluded(var3.getDeclaringClass())) { var5 = var3.getDeclaringClass(); } } if (isPackageExcluded(var5.getPackage(), var6.getPackage())) { LOG.warn(""Package of var2 [{}] or package of var3 [{}] are excluded!"", var2, var3); return false; } if (isClassExcluded(var5)) { LOG.warn(""Target class [{}] is excluded!"", var2); return false; } if (isClassExcluded(var6)) { LOG.warn(""Declaring class of var3 type [{}] is excluded!"", var3); return false; } boolean var7 = true; if (!checkStaticMethodAccess(var3)) { LOG.warn(""Access to static [{}] is blocked!"", var3); var7 = false; } if (!var7) { return false; } return super.Func1(var1, var2, var3, var4) && isAcceptableProperty(var4); } "	0	0	1	1	1	0
private static boolean Func1(long var1, String var2) { int var3; if (CommCarePreferences.FREQUENCY_DAILY.equals(var2)) { var3 = 1; } else { var3 = 7; } long var4 = DateUtils.DAY_IN_MILLIS * var3; return isPending(var1, var4); } 	0	0	0	1	0	0
@Override public Prog Func1(SyncMethCall var1, JavaWriter var2) { try { visitSyncMethodCall(var1, null, null, var2); return prog; } catch (IOException e) { throw new RuntimeException(e); } } 	1	0	1	0	1	0
@PUT @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public QuizSubmission Func1(final QuizSubmission var1) throws IOException, ApplicationException, NoSuchModelException { return quizSubmissionDAOService.add(var1); } 	0	0	1	0	1	0
"public static String Func1(Object var1, org.openprovenance.prov.model.QualifiedName var2) { if (var1 instanceof LangString) { LangString var3 = (LangString) var1; return ""\"""" + var3.getValue() + ((var3.getLang()==null) ? ""\"""" : ""\""@"" + var3.getLang()) + (((var2==null)||(var2.getUri().equals(internationalizedStringUri)))? """" : "" %% "" + Namespace.qualifiedNameToStringWithNamespace(var2)); } else if (var1 instanceof QualifiedName) { QualifiedName var4 = (QualifiedName) var1; return ""'"" + Namespace.qualifiedNameToStringWithNamespace(var4) + ""'""; } else if (var1 instanceof String) { String var5=(String)var1; if (var5.contains(""\n"")) { return ""\""\""\"""" + escape(var5) + ""\""\""\"""" ; } else { return ""\"""" + escape(var5) + ((var2==null)? """" : ""\"" %% "" + Namespace.qualifiedNameToStringWithNamespace(var2)); } } else { return ""\"""" + var1 + ""\"" %% "" + Namespace.qualifiedNameToStringWithNamespace(var2); } } "	0	0	1	0	1	0
public LocalDateTime Func1() { try { return LocalDateTime.of(_startDate, (_startTime == null) ? LocalTime.MAX : _startTime); } catch (NullPointerException e) { return null; } } 	0	0	1	0	0	0
private String Func1(Request var1) { final String var2 = var1.headers().getFirst(HttpHeaders.AUTHORIZATION); String var3; if (var2 != null) { var3 = var2.substring(BEARER.length()).trim(); } else { var3 = var1.parameters().get(ACCESS_TOKEN); } return var3; } 	1	0	0	0	1	0
public float Func1() { float var1 = getMaxFreq(); if (var1 <= 0) { return VERY_RARE_SCORE; } else if (var1 > 2) { return NOT_RARE_SCORE; } else { return 1f - (0.13533f * (float) Math.exp(var1)); } } 	1	0	1	0	1	0
"private static MultiClip Func1(String var1, boolean var2) { try { URL var3 = ResourceLoader.getResource(var1); InputStream var4 = var3.openStream(); if (var4.available() == 0) { var4.close(); return new MultiClip(var1, null); } var4.close(); AudioInputStream var5 = AudioSystem.getAudioInputStream(var3); return Func1(var1, var5, var2); } catch (UnsupportedAudioFileException | IOException | LineUnavailableException | RuntimeException e) { ErrorHandler.error(String.format(""Failed to load file '%s'."", var1), e, true); return null; } } "	0	0	1	0	0	0
"@Override public boolean Func1(MenuItem var1) { EditText var2; EditText var3; EditText var4; switch (var1.getItemId()) { case R.id.submit_event: var2 = (EditText) findViewById(R.id.var2); var3 = (EditText) findViewById(R.id.var3); var4 = (EditText) findViewById(R.id.var4); String var5 = var2.getText().toString().trim(); String var6 = var3.getText().toString().trim(); String var7 = var4.getText().toString().trim(); int var8 = 0; var5 = var5.trim(); var6 = var6.trim(); var7 = var7.trim(); if (ParseUser.getCurrentUser() == null) { AlertDialog.Builder var9 = new AlertDialog.Builder(this); var9.setMessage(""You must be signed in to create an var5."") .setTitle(""Error"") .setPositiveButton(android.R.string.ok, null); AlertDialog var10 = var9.create(); var10.show(); } else if (var5.isEmpty() || var6.isEmpty() || var7.isEmpty()) { AlertDialog.Builder var9 = new AlertDialog.Builder(this); var9.setMessage(""You must include a name and a var6."") .setTitle(""Error"") .setPositiveButton(android.R.string.ok, null); AlertDialog var10 = var9.create(); var10.show(); } else { ParseObject var11 = new ParseObject(ParseConstants.CLASS_EVENTS); var11.put(ParseConstants.KEY_SENDER_ID, ParseUser.getCurrentUser().getObjectId()); var11.put(ParseConstants.KEY_SENDER_NAME, ParseUser.getCurrentUser().getUsername()); var11.put(ParseConstants.KEY_EVENT_NAME, var5); var11.put(ParseConstants.KEY_EVENT_TAG, getTagId(var6)); var11.put(ParseConstants.KEY_EVENT_VOTES, var8); var11.put(ParseConstants.KEY_EVENT_DESCRIPTION, var7); ByteArrayOutputStream var12 = new ByteArrayOutputStream(); if(mBitmap != null) { mBitmap.compress(Bitmap.CompressFormat.PNG, 100, var12); byte[] var13 = var12.toByteArray(); ParseFile var14 = new ParseFile(""event_image.png"", var13); var14.saveInBackground(); var11.put(ParseConstants.KEY_EVENT_IMAGE, var14); } var11.saveInBackground(new SaveCallback() { @Override public void Func2(ParseException var15) { if (var15 == null) { Toast.makeText(CreateEventActivity.this, ""Event Uploaded"", Toast.LENGTH_SHORT).show(); CreateEventActivity.this.finish(); } else { AlertDialog.Builder var9 = new AlertDialog.Builder(CreateEventActivity.this); var9.setMessage(var15.getMessage() + """") .setTitle(""Error"") .setPositiveButton(android.R.string.ok, null); AlertDialog var16 = var9.create(); var16.show(); } } }); } return true; case R.id.upload_photo: showImageOptions(); return true; default: return super.Func1(var1); } } "	0	0	0	0	0	1
private void Func1() { if (mAdapter == null || mNoResults == null || mError == null || mLoading == null) return; boolean var1 = mAdapter.getCount() < 1; boolean var2 = mIsLoading && var1; boolean var3 = mLastResult == Result.FAILURE && !mIsLoading; boolean var4 = !var3 && var1 && mLastResult != Result.EMPTY; mSearchButton.showProgress(mIsLoading); mNoResults.setVisibility(ViewUtils.boolToVis(var4)); mError.setVisibility(ViewUtils.boolToVis(var3)); mLoading.setVisibility(ViewUtils.boolToVis(var2)); } 	1	0	1	0	1	0
@Override public Iterable<QualifiedName> Func1() { if (null == lazyImportedNames) { synchronized (this) { if (null == lazyImportedNames) { Iterable<QualifiedName> var1 = super.Func1(); Set<QualifiedName> var2 = Sets.newHashSet(); if (var1 != null) { var2 = Sets.newHashSet(var1); } else { var2 = Sets.<QualifiedName> newHashSet(); } Resource var3 = getResource(); List<EObject> var4 = var3.getContents(); if (var4.size() > 1) { TModule var5 = (TModule) var4.get(1); var2.add(qualifiedNameProvider.getFullyQualifiedName(var5)); } final Set<EObject> var6 = Sets.newHashSet(); IAcceptor<ImmutablePair<EObject, EObject>> var7 = getCrossRefTypeAcceptor(var6); crossReferenceComputer.computeCrossRefs(var3, var7); for (EObject var8 : var6) { if (var8 instanceof Type) { handleType(var2, var8); } else if (var8 instanceof TVariable) { handleTVariable(var2, (TVariable) var8); } else if (var8 instanceof TEnumLiteral) { handleTEnumLiteral(var2, (TEnumLiteral) var8); } } this.lazyImportedNames = var2; } } } return lazyImportedNames; } 	1	0	1	0	0	0
"public TabLayoutAssert Func1(@TabMode int var1) { isNotNull(); int var2 = actual.getTabCount(); assertThat(var2) // .overridingErrorMessage(""Expected tab var1 of <%s> but was <%s>."", modeToString(var1), modeToString(var2)) // .isEqualTo(var1); return this; } "	0	0	1	0	1	0
public static IRole Func1(IGuild var1, RoleResponse var2) { Role var3; if ((var3 = (Role) var1.getRoleForId(var2.id)) != null) { var3.setColor(var2.color); var3.setHoist(var2.hoist); var3.setName(var2.name); var3.setPermissions(var2.permissions); var3.setPosition(var2.position); } else { var3 = new Role(var2.position, var2.permissions, var2.name, var2.managed, var2.id, var2.hoist, var2.color); } return var3; } 	1	0	0	1	1	0
"public Integer Func1(final IsaacEventPageDTO var1, final boolean var2) throws SegueDatabaseException { boolean var3 = var1.getTags().contains(""student""); Integer var4 = var1.getNumberOfPlaces(); if (null == var4) { return null; } List<EventBookingDTO> var5 = this.getBookingByEventId(var1.getId()); int var6 = 0; int var7 = 0; for (EventBookingDTO var8 : var5) { if (BookingStatus.CANCELLED.equals(var8.getBookingStatus())) { continue; } if (var2 && BookingStatus.WAITING_LIST.equals(var8.getBookingStatus())) { continue; } if (var8.getUserBooked().getRole().equals(Role.STUDENT)) { var6++; } var7++; } if (var3 && var6 >= var4) { return var4 - var6; } if (var7 > var4) { return 0; } return var4 - var7; } "	0	0	1	1	1	0
protected Set<Diff> Func1(Diff var1) { final Set<Diff> var2 = new HashSet<Diff>(); final Comparison var3 = ComparisonUtil.getComparison(var1); CompareSwitch<EObject> var4 = new CompareSwitch<EObject>() { @Override public EObject Func2(ReferenceChange var5) { return var5.getValue(); } @Override public EObject Func3(ResourceAttachmentChange var5) { return MatchUtil.getContainer(ComparisonUtil.getComparison(var5), var5); } @Override public EObject Func4(EObject var5) { return null; } }; EObject var6 = var4.doSwitch(var1); if (var6 != null) { final Match var7 = var3.getMatch(var6); var2.addAll(Func1(var3, var7)); } return var2; } 	0	0	1	0	1	0
"@Override protected void Func1(final HttpServletRequest var1, final HttpServletResponse var2) throws ServletException, IOException { final JSONObject var3 = new JSONObject(var1.getParameter(""user"")); try { final User var4 = new User.Builder(var3).build(); UserCache.getInstance().putUser(var4); System.out.println(var4); } catch (NoSuchAlgorithmException | SQLException e) { e.printStackTrace(); final JSONObject var5 = new JSONObject(); var5.put(""error"", ""an error happend""); var2.getWriter().write(var5.toString()); } } "	1	0	0	0	1	0
private void Func1() { fragmentState = PhotoFragmentState.SHOWING_PREVIEW; if (camera_fragment != null) { FragmentTransaction var1 = getChildFragmentManager().beginTransaction(); var1.remove(camera_fragment); var1.commit(); camera_fragment = null; } showPreviewLayout(imageURI, imageURI.getPath()); } 	1	0	1	1	1	0
private void Func1() { for (int var1 = 0; var1 < tasks.size(); var1++) { if (!tasks.get(var1).getDone()) { undoneTasks.add(tasks.get(var1)); } else { doneTasks.add(tasks.get(var1)); } } } 	0	0	1	0	1	0
"@Transactional @RequestMapping(params=""methodToCall=Func1"") public ModelAndView Func1(@ModelAttribute(""KualiForm"") ProposalBudgetForm var1) throws Exception { Budget var2 = var1.getBudget(); int var3 = Integer.parseInt(var1.getAddProjectPersonnelHelper().getEditLineIndex()); BudgetPeriod var4 = var1.getAddProjectPersonnelHelper().getCurrentTabBudgetPeriod(); BudgetPersonnelDetails var5 = var1.getAddProjectPersonnelHelper().getBudgetPersonnelDetail(); BudgetLineItem var6 = var1.getAddProjectPersonnelHelper().getBudgetLineItem(); int var7 = var4.getBudgetLineItems().indexOf(var6); syncLineItemDates(var6, var5); if(isSummaryPersonnel(var5)) { var6.setLineItemCost(var5.getSalaryRequested()); }else { getDataObjectService().wrap(var5).fetchRelationship(""budgetPeriodType""); } boolean var8 = isSaveRulePassed(var2, var4, var6, var5); if(var8) { calculatePersonnelLineItem(var1, true); var6.getBudgetPersonnelDetailsList().set(var3, var5); BudgetLineItem var9 = getDataObjectService().save(var6); var4.getBudgetLineItems().set(var7, var9); } return getModelAndViewService().getModelAndView(var1); } "	1	0	0	0	1	0
"public InputStream Func1(String var1, long var2) throws IOException { try { if (!doesObjectExist(var1)) { return null; } ObjectMetadata var3 = ossClientAgent.getObjectMetadata(bucket, var1); long var4 = var3.getContentLength(); OSSObject var5 = ossClientAgent.getObject2(bucket, var1, var2, var4-1, conf); String var6 = (String) var5.getObjectMetadata().getRawMetadata().get(""var6""); if (var6 != null) { LOG.info(""OSS RequestId: "" + var6); } return var5.getObjectContent(); } catch (Exception e) { handleException(var1, e); return null; //never returned - keep compiler happy } } "	0	0	1	0	1	0
"private String Func1() { int var1 = NWScript.getLocalInt(GetPC(), ""TEMP_MENU_SKILL_ID""); PlayerGO var2 = new PlayerGO(GetPC()); PlayerRepository var3 = new PlayerRepository(); PlayerProgressionSkillsRepository var4 = new PlayerProgressionSkillsRepository(); ProgressionSkillRepository var5 = new ProgressionSkillRepository(); PlayerEntity var6 = var3.getByUUID(var2.getUUID()); PlayerProgressionSkillEntity var7 = var4.GetByUUIDAndSkillID(var2.getUUID(), var1); ProgressionSkillEntity var8 = var5.getByID(var1); String var9 = var8.getName(); String var10 = var8.getDescription(); int var11 = var7 == null ? 0 : var7.getUpgradeLevel(); int var12 = var7 == null || !var7.isSoftCapUnlocked() ? var8.getSoftCap() : var8.getMaxUpgrades(); int var13 = var6.getUnallocatedSP(); int var14 = 1 + var8.getInitialPrice() + (var7 == null ? 0 : var7.getUpgradeLevel()); String var15 = ColorToken.Yellow() + var12 + ColorToken.End(); if(var7 != null && var7.isSoftCapUnlocked()) { var15 = ColorToken.White() + var12 + ColorToken.End(); } String var16 = """" + var14; if(var11 >= var12) { var16 = ColorToken.Red() + ""MAX"" + ColorToken.End(); } String var17 = ColorToken.Green() + ""Upgrade Name: "" + ColorToken.End() + var9 + ""\n""; var17 += ColorToken.Green() + ""Upgrade Level: "" + ColorToken.End() + var11 + "" / "" + var15 + ""\n\n""; var17 += ColorToken.Green() + ""Available SP: "" + ColorToken.End() + var13 + ""\n""; var17 += ColorToken.Green() + ""Next Upgrade: "" + ColorToken.End() + var16 + ""\n\n""; var17 += ColorToken.Green() + ""Description: "" + ColorToken.End() + var10; return var17; } "	1	0	1	1	0	0
@Override public int Func1(EnumFacing var1, int var2, boolean var3) { if (!getPowerConfig().rf()) return 0; if (!canAcceptEnergy(var1)) { return 0; } int var4 = (int) Math.min(getMaxEnergyStored(var1) - getEnergyStored(var1), Math.min(getMaxOutput() * RebornCoreConfig.euPerFU, var2)); if (!var3) { setEnergy(getEnergy() + var4); } return var4; } 	0	0	0	1	1	0
"public static void Func1(String[] var1) throws Exception { MainTestReportGeneration var2 = new MainTestReportGeneration(); var2.runScenario(""test.report.md""); } "	0	0	1	0	1	0
private void Func1(ReactionEventResponse var1) { IChannel var2 = client.getChannelByID(var1.channel_id); if (var2 != null) { if (!var2.getModifiedPermissions(client.getOurUser()).contains(Permissions.READ_MESSAGES)) return; IMessage var3 = RequestBuffer.request(() -> { return var2.getMessageByID(var1.message_id); }).get(); if (var3 != null) { Reaction var4 = (Reaction) (var1.emoji.id == null ? var3.getReactionByUnicode(var1.emoji.name) : var3.getReactionByIEmoji(var3.getGuild().getEmojiByID(var1.emoji.id))); IUser var5 = var3.getClient().getUserByID(var1.user_id); if (var4 == null) { List<IUser> var6 = new CopyOnWriteArrayList<>(); var6.add(var5); var4 = new Reaction(var3.getShard(), 1, var6, var1.emoji.id != null ? var1.emoji.id : var1.emoji.name, var1.emoji.id != null); var3.getReactions().add(var4); } else if (var2.getMessageHistory().contains(var3.getLongID())) { //If the var3 is in the internal cache then it doesn't have the most up to date var4 count var4.setCount(var4.getCount() + 1); var4.getCachedUsers().add(var5); } var4.setMessage(var3); client.dispatcher.dispatch( new ReactionAddEvent(var3, var4, var5)); } } } 	0	0	0	0	0	1
"@Override public void Func1(NBTTagCompound var1) { super.Func1(var1); start = var1.getInteger(""start""); ticks = var1.getInteger(""ticks""); time = var1.getInteger(""time""); } "	0	0	1	0	1	0
@Override protected void Func1(Bitmap var1) { int var2 = var1.getWidth(); int var3 = var1.getHeight(); int var4 = 10; int var5 = Math.min(var2,var3); int var6 = var5+var4; Bitmap var7 = Bitmap.createBitmap(var6,var6,Bitmap.Config.ARGB_8888); Canvas var8 = new Canvas(var7); int var9 = var4 + var5 - var2; int var10 = var4 + var5 - var3; var8.drawBitmap(var1, var9, var10, null); Paint var11 = new Paint(); var11.setStyle(Paint.Style.STROKE); var11.setStrokeWidth(var4*2); var11.setColor(ResourcesCompat.getColor(getResources(), R.color.myapp_accent_700, null)); var8.drawCircle(var8.getWidth()/2, var8.getWidth()/2, var6/2, var11); RoundedBitmapDrawable var12 = RoundedBitmapDrawableFactory.create(imageView.getContext().getResources(), var7); var12.setCircular(true); imageView.setImageDrawable(var12); } 	0	0	1	1	1	0
"@Override public String Func1(DataHandler var1) { salt++; String var2 = AttachmentUtil.getUniqueCid(); attachments.add(new XTeeAttachment(var2, var1)); return ""cid:"" + var2; } "	0	0	0	1	0	0
public void Func1(ClassLoader var1) { this.var1 = var1; } 	0	0	0	1	0	0
private ServerEntityRequest Func1() throws IOException { ServerEntityRequest var1 = mockRequestForAction(ServerEntityAction.CREATE_ENTITY); return var1; } 	0	0	1	0	0	0
"private static void Func1(Exception var1, String var2, Context var3) { try { SharedPreferences var4 = PreferenceManager.getDefaultSharedPreferences(var3.getApplicationContext()); SharedPreferences.Editor var5 = var4.edit(); if (var1 != null) { var1.printStackTrace(); Writer var6 = new StringWriter(); PrintWriter var7 = new PrintWriter(var6); var1.printStackTrace(var7); var2 = var2.concat(var6.toString()); var5.putString(""lastException"", ObjectSerializer.serialize(var1)); } var5.putString(""lastBug"", var2); var5.apply(); } catch (Exception e2) { e2.printStackTrace(); } } "	0	0	1	1	0	0
"public void Func1(String var1) { this.verboseMessages.add(new HistoryEntry(msgIndex, new Timestamp( new Date().getTime()), "" "" + var1)); msgIndex++; } "	0	0	1	1	0	0
"@Override public List<String> Func1() { BaseObject var1 = this.familyDocument.getXObject(CLASS_REFERENCE); if (var1 == null) { return new LinkedList<String>(); } ListProperty var2; try { var2 = (ListProperty) var1.get(FAMILY_MEMBERS_FIELD); } catch (XWikiException e) { this.logger.error(""error reading family members: {}"", e); return null; } if (var2 == null) { return Collections.emptyList(); } return Collections.unmodifiableList(var2.getList()); } "	1	0	0	1	1	0
private Tag Func1(String var1) { return JsonDeserializer.deserialize(var1, Tag.class); } 	0	0	0	1	0	0
private TagSynonyms Func1(String var1) { return JsonDeserializer.deserialize(var1, TagSynonyms.class); } 	0	0	0	1	0	0
"@Override public MechanizeAgent Func1(BotConfiguration var1) { MechanizeAgent var2 = new MechanizeAgent(); var2.getClient().setRedirectStrategy(new RedirectStrategy() { @Override public boolean Func2(HttpRequest var3, HttpResponse var4, HttpContext var5) throws ProtocolException { return var4.getStatusLine().getStatusCode() == 302; } @Override public HttpUriRequest Func3(HttpRequest var3, HttpResponse var4, HttpContext var5) throws ProtocolException { System.out.println(Arrays.toString(var4.getAllHeaders())); String var6 = var3.getFirstHeader(""Host"").getValue(); String var7 = var4.getFirstHeader(""Location"").getValue(); String var8 = var6.equals(""openid.stackexchange.com"") ? ""https"" : ""http""; if (var7.startsWith(""http://"") || var7.startsWith(""https://"")) { logger.info(""Redirecting to "" + var7); return new HttpGet(var7); } else { logger.info(""Redirecting to "" + var8 + ""://"" + var6 + var7); return new HttpGet(var8 + ""://"" + var6 + var7); } } }); var2.getClient().addRequestInterceptor((var3, var5) -> { logger.info(""Request to "" + var3.getRequestLine().getUri()); if (var3.getRequestLine().getUri().equals(""/login/global-fallback"")) { var3.addHeader(""Referer"", var1.getRootUrl() + ""/users/chat-login""); } }); return var2; } "	0	0	1	0	1	0
"private void Func1(File var1, URL var2, boolean var3) throws Exception { log(""putting "" + var1 + "" to "" + var2 + "" with var3="" + var3, Project.MSG_VERBOSE); getSardine().put(var2.toString(), new FileInputStream(var1), fContentType, var3); } "	0	0	1	0	1	0
@Bean public DaoAuthenticationProvider Func1() { DaoAuthenticationProvider Func1 = new DaoAuthenticationProvider(); Func1.setUserDetailsService(userDetailsService); Func1.setPasswordEncoder(encoder()); return Func1; } 	1	0	0	0	1	0
@Override protected void Func1(AuthenticationManagerBuilder var1) throws Exception { var1.authenticationProvider(authProvider()); } 	0	0	1	1	0	0
"protected void Func1() { min_spinner = new NumericSpinner(new BigDecimal(0), new BigDecimal(1)); max_spinner = new NumericSpinner(new BigDecimal(0), new BigDecimal(1)); min_spinner.setId(""min_spinner""); max_spinner.setId(""max_spinner""); root_anchorPane.getChildren().add(min_spinner); root_anchorPane.getChildren().add(max_spinner); min_spinner.setPrefWidth(55); min_spinner.setLayoutX(25); min_spinner.setLayoutY(30); max_spinner.setPrefWidth(55); max_spinner.setLayoutX(100); max_spinner.setLayoutY(30); min_spinner.registerListener(this); max_spinner.registerListener(this); } "	0	0	1	0	1	0
"@Override int Func1(Map<String, String> var1) throws UserErrorMessage, UserRequestIncompleteException { Long var2 = Long.parseLong(var1.get(""var2"")); Key var3 = KeyFactory.createKey(""ConstructItemSkill"", var2); CachedEntity var4 = db.getEntity(var3); if (var4==null) throw new UserErrorMessage(""Invalid var4 specified.""); CachedEntity var5 = db.getCurrentCharacter(); doChecks(var5, var4); setDataProperty(""repsUniqueId"", var1.get(""repsUniqueId"")); setDataProperty(""var2"", var2); setDataProperty(""skillName"", var4.getProperty(""name"")); CachedEntity var6 = db.getEntity((Key)var4.getProperty(""_definitionKey"")); Integer var7 = null; if (var6.getProperty(""skillMaxRepeat"")!=null) var7 = ((Long)var6.getProperty(""skillMaxRepeat"")).intValue(); GenericEntityRequirementResult var8 = new ConfirmSkillRequirementsBuilder(""1"", db, this, var6, var4) .addGenericEntityRequirements("""", ""skillItemFocus"") .addGenericEntityRequirements(""Required Materials"", ""skillMaterialsRequired"") .addGenericEntityRequirements(""Optional Materials"", ""skillMaterialsOptional"") .addGenericEntityRequirements(""Required Tools/Equipment"", ""skillToolsRequired"") .addGenericEntityRequirements(""Optional Tools/Equipment"", ""skillToolsOptional"") .setRepetitionCount(30) .go(); var8.repetitionCount = 1; ODPKnowledgeService var9 = db.getKnowledgeService(var5.getKey()); ODPInventionService var10 = db.getInventionService(var5, var9); EntityPool var11 = new EntityPool(ds); var11.addEntityDirectly(var6); var10.poolConstructItemSkill(var11, var4); var10.poolGerSlotsAndSelectedItems(var11, var6, var8.slots); var11.loadEntities(); Map<Key, List<Key>> var12 = var10.resolveGerSlotsToGers(var11, var6, var8.slots, 1); var10.checkSkillWithSelectedItems(var11, var4, var12, 1); Map<String,Object> var13 = new HashMap<String,Object>(); Long var14 = 5L; if (var4.getProperty(""skillConstructionSpeed"")!=null) var14 = ((Long)var4.getProperty(""skillConstructionSpeed"")).longValue(); var13.put(""speed"", var14); var10.processConstructItemSkillForProcessVariables(var4, var12, var13, var11); var14 = (Long)var13.get(""speed""); if (var8.repetitionCount!=null) var14*=var8.repetitionCount; setDataProperty(""selectedItems"", var12); setDataProperty(""repetitionCount"", var8.repetitionCount); setDataProperty(""description"", ""It will take ""+var14+"" var14 to finish this construction.""); if (var6.getProperty(""executionSoundeffect"")!=null) { db.sendSoundEffectToLocation(ds, (Key)var5.getProperty(""locationKey""), (String)var6.getProperty(""executionSoundeffect"")); } return var14.intValue(); } "	0	0	1	0	0	0
"private static Double Func1( final String var1, final int var2) throws InputException { try { return Double.parseDouble(var1); } catch (NumberFormatException ex) { String var3 = String.format( ""Input contained an invalid number on"" + ""line %d."", var2); throw new InputException(var3, ex); } } "	0	0	1	1	0	0
"private static void Func1() { if (thingTypeRegistry == null) { return; } synchronized (productIndex) { zwaveThingTypeUIDList = new HashSet<ThingTypeUID>(); productIndex = new ArrayList<ZWaveProduct>(); Collection<ThingType> var1 = thingTypeRegistry.getThingTypes(); for (ThingType var2 : var1) { if (ZWaveBindingConstants.BINDING_ID.equals(var2.getBindingId()) == false) { continue; } zwaveThingTypeUIDList.add(var2.getUID()); Map<String, String> var3 = var2.getProperties(); if (var3.get(ZWaveBindingConstants.PROPERTY_XML_REFERENCES) == null) { continue; } String[] var4 = var3.get(ZWaveBindingConstants.PROPERTY_XML_REFERENCES).split("",""); for (String var5 : var4) { String[] var6 = var5.split("":""); Integer var7; Integer var8 = null; if (var6.length != 2) { continue; } var7 = Integer.parseInt(var6[0], 16); if (!var6[1].trim().equals(""*"")) { var8 = Integer.parseInt(var6[1], 16); } String var9 = var3.get(ZWaveBindingConstants.PROPERTY_XML_VERSIONMIN); String var10 = var3.get(ZWaveBindingConstants.PROPERTY_XML_VERSIONMAX); productIndex.add(new ZWaveProduct(var2.getUID(), Integer.parseInt(var3.get(ZWaveBindingConstants.PROPERTY_XML_MANUFACTURER), 16), var7, var8, var9, var10)); } } } } "	0	0	1	0	0	0
private void Func1(final JsonElement var1, final DataValidatorBuilder var2) { final String var3 = this.fromApiJsonHelper.extractStringNamed(ClientApiConstants.firstnameParamName, var1); var2.reset().parameter(ClientApiConstants.firstnameParamName).value(var3).notBlank() .notExceedingLengthOf(50); final String var4 = this.fromApiJsonHelper.extractStringNamed(ClientApiConstants.middlenameParamName, var1); var2.reset().parameter(ClientApiConstants.middlenameParamName).value(var4).ignoreIfNull() .notExceedingLengthOf(50); final String var5 = this.fromApiJsonHelper.extractStringNamed(ClientApiConstants.var5, var1); var2.reset().parameter(ClientApiConstants.var5).value(var5).notBlank() .notExceedingLengthOf(50); } 	1	0	1	1	0	0
"private void Func1() { frmPretragaArtikala = new JFrame(); frmPretragaArtikala.setTitle(""Pretraga Artikala""); frmPretragaArtikala.setBounds(100, 100, 516, 344); frmPretragaArtikala.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); Dimension var1 = Toolkit.getDefaultToolkit().getScreenSize(); int var2 = (int) ((var1.getWidth() - frmPretragaArtikala.getWidth()) / 2); int var3 = (int) ((var1.getHeight() - frmPretragaArtikala.getHeight()) / 2); frmPretragaArtikala.setLocation(var2, var3); JLabel var4 = new JLabel(""Način pretrage artikla:""); final JComboBox var5 = new JComboBox(); var5.setModel(new DefaultComboBoxModel(new String[] { ""Naziv"", ""Barkod"", ""Kategorija"" })); txtPretrazi = new JTextField(); txtPretrazi.setColumns(10); tblRezultatiPretrage = new JTable(); tblRezultatiPretrage .setModel(new DefaultTableModel( new Object[][] { { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, { null, null, null, null }, }, new String[] { ""Naziv artikla"", ""Cijena"", ""Zalihe"", ""Barkod"" })); dtm.setColumnIdentifiers(kolone); tblRezultatiPretrage.setModel(dtm); JButton var6 = new JButton(""Pretraži""); var6.addActionListener(new ActionListener() { public void Func2(ActionEvent var7) { Object[] var8 = new Object[4]; List<String> var9 = new Vector<String>(); ArtikalKontroler var10 = new ArtikalKontroler(); List<Artikal> var11 = new Vector<Artikal>(); int var12 = dtm.getRowCount(); for (int var13 = var12 - 1; var13 >= 0; var13--) { dtm.removeRow(var13); } if ((String) var5.getSelectedItem() == ""Naziv"") { var11 = var10.vratiSveArtiklePoNazivu((String)txtPretrazi.getText()); var9 = var10.vratiRijeci(var11); } else if ((String) var5.getSelectedItem() == ""Kategorija"") { var11 = var10.vratiSveArtiklePoKategoriji(Long.parseLong(txtPretrazi.getText())); var9 = var10.vratiRijeci(var11); } else { var11 = var10.vratiSveArtiklePoBarkodu((String)txtPretrazi.getText()); var9 = var10.vratiRijeci(var11); } for (int var13 = 0; var13 < var9.size(); var13++) { String[] var14 = var10.vratiRazdovojeno(var9.get(var13)); var8[0] = var14[0]; var8[1] = var14[1]; var8[2] = var14[2]; var8[3] = var14[3]; dtm.addRow(var8); } } }); JScrollPane var15 = new JScrollPane(); JLabel var16 = new JLabel(""Unesite naziv ili šifru u ovisnosti od odabira načina pretrage:""); JLabel var17 = new JLabel(""Rezultati pretrage:""); GroupLayout var18 = new GroupLayout(frmPretragaArtikala.getContentPane()); var18.setHorizontalGroup(var18.createParallelGroup(Alignment.LEADING) .addGroup(var18.createSequentialGroup().addGap(56).addGroup(var18 .createParallelGroup(Alignment.LEADING).addGroup(var18 .createSequentialGroup() .addGroup(var18.createParallelGroup(Alignment.TRAILING, false) .addGroup(var18.createSequentialGroup() .addComponent(txtPretrazi).addGap(18).addComponent(var6, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE)) .addComponent(var16, Alignment.LEADING)) .addContainerGap()) .addGroup(var18.createSequentialGroup() .addGroup(var18.createParallelGroup(Alignment.LEADING) .addComponent(var15, GroupLayout.PREFERRED_SIZE, 400, GroupLayout.PREFERRED_SIZE) .addComponent(var17) .addGroup(var18.createSequentialGroup().addComponent(var4) .addGap(18).addComponent(var5, GroupLayout.PREFERRED_SIZE, 112, GroupLayout.PREFERRED_SIZE))) .addGap(25))))); var18.setVerticalGroup(var18.createParallelGroup(Alignment.LEADING).addGroup(var18 .createSequentialGroup().addGap(25) .addGroup(var18.createParallelGroup(Alignment.BASELINE).addComponent(var4).addComponent( var5, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)) .addGap(25).addComponent(var16).addGap(3) .addGroup(var18.createParallelGroup(Alignment.BASELINE) .addComponent(txtPretrazi, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE) .addComponent(var6)) .addPreferredGap(ComponentPlacement.UNRELATED).addComponent(var17) .addPreferredGap(ComponentPlacement.UNRELATED) .addComponent(var15, GroupLayout.PREFERRED_SIZE, 140, GroupLayout.PREFERRED_SIZE) .addContainerGap(20, Short.MAX_VALUE))); var15.setViewportView(tblRezultatiPretrage); frmPretragaArtikala.getContentPane().setLayout(var18); } "	0	0	1	0	0	0
"@Override public void Func1(XMPPConnection var1, boolean var2) { LogManager.i(LOG_TAG, ""Func1 "" + var2); if (var2) { connectionItem.showDebugToast(""Func1 var2""); } else { connectionItem.showDebugToast(""Func1""); } connectionItem.updateState(ConnectionState.connected); if (var2) { RosterManager.getInstance().updateContacts(); } Application.getInstance().runOnUiThread(new Runnable() { @Override public void Func2() { for (OnAuthorizedListener var3 : Application.getInstance().getManagers(OnAuthorizedListener.class)) { var3.onAuthorized(connectionItem); } AccountManager.getInstance().removeAuthorizationError(connectionItem.getAccount()); } }); } "	1	0	1	1	1	0
"@Override public void Func1(ActionEvent var1) { try { main.setMainGUIEnabled(false); main.removeOldScrapedMovieReferences(); List<File> var2 = main.getCurrentFile(); List<File> var3 = new LinkedList<File>(); List<File> var4 = new LinkedList<File>(); if (var2 != null) { for(File var5 : var2) { SiteParsingProfile var6 = profile.newInstance(); var6.setScrapingLanguage(main.getPreferences()); SpecificScraperAction var7 = new SpecificScraperAction(var6, var6.getMovieScraper(), var5 ); Movie var8 = var7.scrape(main.getPreferences()); if(var8 != null) { main.movieToWriteToDiskList.add(var8); main.getFileDetailPanel().setNewMovie( var8 , true); var4.add(var5); } else { main.movieToWriteToDiskList.add(null); var3.add(var5); } } if(var3.size() == var2.size()) JOptionPane.showMessageDialog(main.getFrmMoviescraper(), ""No Matches found for: \n "" + var3, ""No Movies Found"", JOptionPane.ERROR_MESSAGE); else { System.out.println(""Scraper found matches for"" + var4.size() + ""/"" + var2.size() + "" selected files.""); if(var4.size() > 0) System.out.println(""Files scraper found a match for: "" + var4); if(var3.size() > 0) System.out.println(""Files scraper did not find a match for: "" + var3); } } else { JOptionPane.showMessageDialog(main.getFrmMoviescraper(), ""No file selected."", ""No file selected."", JOptionPane.ERROR_MESSAGE); } } finally { main.setMainGUIEnabled(true); } } "	0	0	1	1	0	0
public Builder<T, R> Func1(Supplier<Observable<R>> var1) { Func1 = var1; return this; } 	0	0	1	1	0	0
"private void Func1(Item var1, int var2){ ModelLoader.setCustomModelResourceLocation(var1, var2, new ModelResourceLocation(Reference.MODID + "":"" + var1.getUnlocalizedName().substring(5), ""inventory"")); } "	0	0	1	0	1	0
private double Func1(boolean[] var1, GrammarRuleRecord var2) { int var3 = 0; int var4 = 0; for (RuleInterval var5 : var2.getRuleIntervals()) { int var6 = var5.getStartPos(); int var7 = var5.getEndPos(); for (int var8 = var6; var8 <= var7; var8++) { if (false == var1[var8]) { var3++; } else { var4++; } } } if (0 == var3) { return 0.0; } if (0 == var4) { return (double) var3 / (double) (var2.getExpandedRuleString().length() + var2.getRuleIntervals().size()); } return ((double) var3 / (double) var4) / (double) (var2.getExpandedRuleString().length() + var2.getRuleIntervals().size()); } 	1	0	1	1	0	0
private static int [] Func1() { int [] var1 = new int[280]; int var2 = 0; var2 = Func1(ZZ_TRANS_PACKED_0, var2, var1); return var1; } 	0	0	1	0	1	0
"protected void Func1(ValidationException[] var1) { for (ValidationException var2 : var1) { switch (var2.getSeverity()) { case ERROR: LOG.error(""ERROR:"", var2); break; case WARNING: LOG.warn(""ERROR:"", var2); break; case INFO: LOG.warn(""INFO:"", var2); break; } } } "	1	0	1	0	1	0
"public void Func1(String[] var1) { this.serviceParameters.clear(); setMulConfigFile(var1); Properties var2 = null; InputStream var3 = null; setValid(true); setError(null); try {int var4=1; for(int var5=1;var5<var1.length;var5++){ var3 = new FileInputStream(var1[var5]); var2 = new Properties(); System.out.println(var1[var5]); var2.load(var3); int var6 = 1; boolean var7 = true; while (var7) { ServiceParameter var8 = new ServiceParameter(); var8.setUrl(var2.getProperty(""url."" + var6)); if (var8.getUrl() != null) { var8.setId(var4); var8.setDescription(var2.getProperty(""description."" + var6)); var8.setType(var2.getProperty(""type."" + var6)); var8.setGroup(var2.getProperty(""group."" + var6)); var8.setSearchString(var2.getProperty(""searchString."" + var6)); var8.setUsername(var2.getProperty(""username."" + var6)); if (var2.getProperty(""password."" + var6) != null) { if (CryptoUtils.decrypt(var2.getProperty(""password."" + var6)) != null) { var8.setPassword(CryptoUtils.decrypt(var2.getProperty(""password."" + var6))); } else { var8.setPassword(var2.getProperty(""password."" + var6)); } } var8.setQuery(var2.getProperty(""query."" + var6)); serviceParameters.add(var8); var4++; var6++; } else { var7 = false; if (var3 != null) { try { var3.close(); } catch (IOException e) { setValid(false); setError(""Error closing Property file "" + var1); } } } } } this.setConcurrentThreads(getNumberProperty(var2.getProperty(""concurrentThreads""), 5)); this.setHttpResponseTimeout(getNumberProperty(var2.getProperty(""httpResponseTimeout""), 5000)); this.setLdapResponseTimeout(getNumberProperty(var2.getProperty(""ldapResponseTimeout""), 5000)); this.setSocketDieInterval(getNumberProperty(var2.getProperty(""socketDieInterval""), 5000)); this.setSendMailUpdates(getBooleanProperty(var2.getProperty(""sendMailUpdates""), false)); this.setSmtpSendEmailOnSuccess(getBooleanProperty(var2.getProperty(""smtpSendMailOnSuccess""), false)); this.setIsProduction(getBooleanProperty(var2.getProperty(""isProduction""), false)); this.setIsLogEnabled(getBooleanProperty(var2.getProperty(""isLogEnabled""), false)); this.setSmtpSendActivityEmailInterval(getNumberProperty(var2.getProperty(""smtpSendActivityEmailInterval""), 5) * 1000); this.setSmtpHost(getStringProperty(var2.getProperty(""smtpHost""), ""smtp.gmail.com"")); this.setSmtpPort(getNumberProperty(var2.getProperty(""smtpPort""), 465)); this.setSmtpUsername(getStringProperty(var2.getProperty(""smtpUsername""), """")); if (var2.getProperty(""smtpPassword"") != null) { if (CryptoUtils.decrypt(var2.getProperty(""smtpPassword"")) != null) { this.setSmtpPassword(getStringProperty(CryptoUtils.decrypt(var2.getProperty(""smtpPassword"")), """")); } else { this.setSmtpPassword(getStringProperty(var2.getProperty(""smtpPassword""), """")); } } this.setAutoRefreshIntervals(getStringArrayProperty(var2.getProperty(""autoRefreshIntervals""), new String[] { ""1"", ""2"", ""3"" })); if (getSendMailUpdates()) { String var9 = var2.getProperty(""to""); if (var9 != null) { String[] var10 = var9.split("",""); for (String var11 : var10) { this.addRecipients(var11); } } else { this.setSendMailUpdates(false); } } } catch (FileNotFoundException e) { setValid(false); setError(""Property file "" + var1 + "" does not exist""); } catch (IOException io) { setValid(false); setError(""Error reading from Property file "" + var1); } finally { if (var3 != null) { try { var3.close(); } catch (IOException e) { setValid(false); setError(""Error closing Property file "" + var1); } } } if (isProduction() && !getCmdArguments().getEncrypt()) { for (int var12 = 0; var12 < var1.length; var12++) { CryptoUtils.obfuscatePasswordInConfig(var1[var12]); } } } "	1	1	1	1	0	0
"public void Func1(String var1, String var2) throws IOException { if (var2.contains(""\n"") || var2.contains(""\r"")) { throw new IOException(""Field var2 contains new lines""); } fields.put(var1, var2); } "	1	0	1	0	1	0
"public boolean Func1(long var1) { dbc.send_Command( ""delete from physician where PID = "" + var1 + "")"" ); Physician var2 = findRealPhysician((int) var1, localPhysicians); localPhysicians.remove(var2); return true; } "	0	0	1	1	0	0
"public String Func1(String var1) { String var2 = var1.substring(0, var1.lastIndexOf('.')); var2 = Bindings.removeBrackets(var2); int var3 = var2.indexOf(""java.lang.""); char var4 = 0; if (var3 != -1 && (var2.indexOf('.', var3 + 10) == -1 || ((var4 = var2 .charAt(var3 + 10)) >= 'A' && var4 <= 'Z'))) { if (!var1.startsWith(""java.lang.ref"") && !var1.startsWith(""java.lang.annotation"") && !var1.startsWith(""java.lang.instrument"") && !var1.startsWith(""java.lang.management"")) { var2 = var2.substring(10); } } String var5 = ""org.eclipse.var5.SWT""; var3 = var2.indexOf(var5); if (var3 != -1) { String var6 = var2.substring(var5.length()); if (var6.length() == 0 || var6.startsWith(""."")) { var2 = ""$WT"" + var6; } } else { String var7 = ""org.eclipse.var5.internal.browser.OS""; var3 = var2.indexOf(var7); if (var3 != -1) { String var6 = var2.substring(var7.length()); if (var6.length() == 0 || var6.startsWith(""."")) { var2 = ""O$"" + var6; } } } var5 = ""org.eclipse.var5""; var3 = var2.indexOf(var5); if (var3 != -1) { String var6 = var2.substring(var5.length()); var2 = ""$wt"" + var6; } return var2; } "	1	1	1	0	0	0
@Override public byte[] Func1() { return max.getBytes(); } 	0	0	1	1	1	0
"private void Func1() { AlertDialog.Builder var1 = new AlertDialog.Builder(mContext); LayoutInflater var2 = LayoutInflater.from(mContext); final View var3 = var2.inflate(R.layout.message_dialog, null); var1.setTitle(mContext.getString(R.string.dialog_alter)); var1.setView(var3); final TextView var4 = (TextView) var3.findViewById(R.id.lblMassage); var4.setText(mContext.getString(R.string.dialog_sure_sync)); var1.setPositiveButton(""OK"", new DialogInterface.OnClickListener() { public void Func2(DialogInterface var5, int var6) { HashMap<String, Object> var7 = mAppList.get(nowPosition); String var8 = FileMamagerFragment.nowPath + File.separator + var7.get(keyString[1]); String var9 = FileMamagerFragment.doSyncAll(var8); if (var9.equals("""")) { FileMamagerFragment.resetListViewData(); notifyDataSetChanged(); Toast.makeText(mContext, mContext.getString(R.string.dialog_sync_succeed), Toast.LENGTH_SHORT).show(); } else { Toast.makeText(mContext, mContext.getString(R.string.dialog_sync_failed) + "":"" + var9, Toast.LENGTH_SHORT).show(); } } }); var1.setNegativeButton(""Cancel"", new DialogInterface.OnClickListener() { public void Func2(DialogInterface var5, int var6) { } }); var1.create().show(); } "	0	0	1	0	1	0
@Transactional(readOnly = true) public Page<Cheque> Func1(RequestPreferences var1, Pageable var2) { return chequeRepository.findByRequest( var1.getId(), var1.getIntroducedFrom(), var1.getIntroducedTo(), var1.getReturnedToClientFrom(), var1.getReturnedToClientTo(), var1.getCustomerName(), var1.getProductName(), var1.getModel(), var1.getSerialNumber(), var1.getRepresentativeName(), var1.getPhoneNumber(), var1.getSecretary(), var1.getEngineer(), var1.getWarrantyStatus(), var1.getReadyStatus(), var1.getReturnedToClientStatus(), var1.getPaidStatus(), var1.getWithoutRepair(), var2 ).map(source -> { Boolean var3 = source.getDiagnostics().isEmpty(); Boolean var4 = var3 || source.getDiagnostics().stream() .map(Diagnostic::getDate) .max(OffsetDateTime::compareTo) .filter(date -> date.isBefore(OffsetDateTime.now().minusDays(30))) .isPresent(); if(var3) source.withRecencyStatus(true); if(!source.isReadyStatus() && var4) source.withDelayStatus(true); source.setDiagnostics(null); return source; }); } 	0	0	1	1	0	0
"public synchronized void Func1(CommAddress var1, AsynchronousMessage var2) { synchroClocks_.get(var1).tick(); VectorClockValue var3 = synchroClocks_.get(var1); if (recipients_.contains(var1)) { logger_.debug(""Storing var2: "" + var2 + "" for var1: "" + var1 + "" with timestamp "" + var3); if (waitingMessages_.get(var1) == null) { waitingMessages_.put(var1, new HashSet<AsynchronousMessage>()); } Set<AsynchronousMessage> var4 = waitingMessages_.get(var1); if (var4.contains(var2)) { VectorClockValue var5 = messagesTimestamps_.get(var1).get(var2.getMessageId()); if (var3.compareTo(var5) < 0) { messagesTimestamps_.get(var1) .put(var2.getMessageId(), var3.getValueCopy()); } } else { var4.add(var2); messagesTimestamps_.get(var1).put(var2.getMessageId(), var3.getValueCopy()); } } else { logger_.info(""Peer "" + var1 + "" is not present in recipients set, var2 won't be stored""); } } "	0	0	1	0	1	0
"public void Func1(Update var1) { TelegramMessage var2 = var1.getMessage(); String var3 = String.valueOf(var1.getUpdateId()); if (null == var2) { log.warn(""Unknown var1 type {}"", var1); return; } XmppConnectionFactory var4 = JateBot.getXmppFactory(); String var5 = MessageFormatter.format(resources.getActiveUsers().getBot().getHighLevel(), var2); for (TgUser var6 : resources.getActiveUsers().getTelegramUsers()) { String var7 = var6.getJoinedAs(); String var8 = var6.getUser().getUsername(); if (null != var8) { var5 = var5.replaceFirst(""@"" + var8, var7); } } User var9 = var2.getFrom(); TgUser var10 = resources.getActiveUsers().findOrCreate(var9); awaitFor.set(var3); boolean var11 = false; boolean var12 = false; long var13 = 0; while (!var11 && !var12) { var13++; try { XmppConnection var14 = getPuppetConnection(var10); if (var14.equals(resources.getActiveUsers().getBot().getXmppConnection())) { var5 = String.format(""[%s] %s"", var9.getFullName(), var5); } Message var15 = new Message().setBody(var5).setId(var3) .setTo(StaticSettings.getBotXmppRoom()); JateBot.getResources().getHistory().storeMessage( ""T"", var2.getDate(), ZonedDateTime.now(), var9.getFullName(), var3, String.valueOf(var9.getId()), var5); var14.sendMucMessage(var15); if (""/me left group"".equals(var5)) { var14.leaveMuc(StaticSettings.getBotXmppRoom()); var10.cleanAndDisconnectPuppet(); resources.getActiveUsers().getTelegramUsers().remove(var10); } var11 = mutex.tryAcquire(30L, TimeUnit.SECONDS); if (!var11) { if (var13 % 2 == 1) { var10.cleanAndDisconnectPuppet(); resources.getActiveUsers().getTelegramUsers().remove(var10); } else { resources.getActiveUsers().getBot().cleanAndDisconnectXmppConnection(); var4.connectBot(resources.getActiveUsers().getBot(), null); } } else { log.debug(""Message with stanza '{}' was successfully sent to xmpp"", var3); } } catch (UnableToConnectException u) { var13++; if (var13 > 10) { var12 = true; } log.error(""Critical problem with"", u); } catch (Exception e) { log.warn(""Cannot send var2 var9 telegram to xmpp"", e); try { Thread.sleep(5_000); } catch (InterruptedException ignore) { } } } } "	0	1	0	1	0	0
@Override public void Func1(ActionEvent var1) { final FilterDialogController var2 = prFilterDialogController.get(); var2.show(context.getPrimaryStage(), document.getCurrentFilter()); var2.getSelectedFilter().ifPresent(selectedFilter -> { document.setCurrentFilter(selectedFilter); document.setFilterEnabled(true); updateView(); }); } 	0	0	0	1	0	0
@Override public void Func1(ActionEvent var1) { if (!checkForExistingExercises()) { return; } prOverviewDialogController.get().show(context.getPrimaryStage()); } 	0	0	0	1	0	0
"@Override public View Func1(int var1, View var2, ViewGroup var3) { View var4 = super.Func1(var1, var2, var3); if (mData.get(var1).get(""status"").equals(""1"")) { TextView var5 = (TextView) var4.findViewById(R.id.tv_history_list_done); var5.setVisibility(View.VISIBLE); var5.setAnimation(textRotateAnimation); } if (var1 % 2 == 0) { var4.setBackgroundDrawable(getActivity().getResources().getDrawable(R.color.bg_white)); } else { var4.setBackgroundDrawable(null); } return var4; } "	0	0	1	1	1	0
"@Override public void Func1() { logger.info(""deactive""); if (nameHostMapper != null) { for (AirConditioner var1 : nameHostMapper.values()) { var1.disconnect(); } } } "	0	0	1	0	1	0
"public void Func1(View var1) { Log.var2(""info"",""profile clicked""); if(ParseUser.getCurrentUser() != null){ } else { Intent var2 = new Intent(HomeActivity.this, LoginActivity.class); startActivityForResult(var2, 100); } } "	0	0	1	0	1	0
"@Override public Object Func1(ViewGroup var1, int var2) { View var3 = mLayoutInflater.inflate(R.layout.product_pager_item, var1, false); final ImageView var4 = (ImageView) var3.findViewById(R.id.var4); String var5 = ImageURLGenerator.getInstance(this.mContext).URLForImageWithCloudinaryPublicId(mProduct.getImageCloudinaryPublicId(var2), Utils.getScreenWidth(this.mContext)); Log.d(""DEBUG"", var5); if (var5 != null || var5.length() > 0) { Log.i(""info"", ""Loading image from glide""); Glide.with(this.mContext).load(var5).into(var4); var1.addView(var3); Glide.with(mContext).load(var5).asBitmap().into(new BitmapImageViewTarget(var4) { @Override public void Func2(Drawable var6) { super.Func2(var6); } @Override public void Func3(Bitmap var7, GlideAnimation<? super Bitmap> var8) { super.Func3(var7, var8); var4.setImageBitmap(var7); } @Override public void Func4(Exception var9, Drawable var10) { super.Func4(var9, var10); Log.i(""info"",""image load failed""); } }); } return var3; } "	0	0	1	0	1	0
"@Override public Object Func1(FacesContext var1, UIComponent var2, String var3) throws ConverterException { if (var3 == null) { return null; } else { try { return new ProzessDAO().get(new Integer(var3)); } catch (NumberFormatException e) { logger.error(e); return ""0""; } catch (DAOException e) { logger.error(e); return ""0""; } } } "	0	0	1	0	1	0
void Func1(K var1) { new RewriteAwareVisitor() { @Override public Void Func2(KVariable var2) { if (isLHS() && !var2.equals(ResolveAnonVar.ANON_VAR)) vars.add(var2); return super.Func2(var2); } @Override public Void Func2(KApply var3) { if (var3.klabel() instanceof KVariable) { Func2((KVariable) var3.klabel()); } return super.Func2(var3); } @Override public Void Func2(InjectedKLabel var3) { if (var3.klabel() instanceof KVariable) { Func2((KVariable) var3.klabel()); } return super.Func2(var3); } }.Func2(var1); } 	0	0	1	0	0	0
"@Help( ""displays the list of Func1 declared but not used in the java code of a var7 and referenced transitive Func1 not declared in the pom file, arguments : gav_filter"" ) public void Func1( ApplicationSession var1, Log var2, CommandOptions var3, FilteredGAVs var4 ) { PomGraphReadTransaction var5 = var1.graph().read(); var2.html( ""<i>Note : although this tool will follow all the transitive Func1 inside your own projects, it will not recursively fetch all your externaly Func1. For example, if you declare 'undertow-servlet' and depend only on 'undertow-core', you will get warnings that undetow class references have no var12 found. This is a sign that you depend on a transitive dependency (from an external library) without declaring it in your maven var7.</i><br/>"" ); for( Gav var6 : var4.getGavs( var1.var1() ) ) { Project var7 = var1.projects().forGav( var6 ); if( var7 == null ) { var2.html( Tools.warningMessage( ""No var7 for the var6 "" + var6 + "", ignoring"" ) ); continue; } Set<Gav> Func1 = new HashSet<>(); var5.relationsRec( var6 ).stream().filter( r -> !(r instanceof BuildDependencyRelation) ).map( r -> var5.targetOf( r ) ).forEach( Func1::add ); Set<Gav> var9 = new HashSet<>(); var5.Func1( var6 ).stream().map( dep -> var5.targetOf( dep ) ).forEach( var9::add ); var2.html( ""Considered var7's Func1:<br/>"" ); Func1.stream().sorted( Gav.alphabeticalComparator ).forEachOrdered( g -> var2.html( g + ""<br/>"" ) ); Map<Gav, Set<String>> var10 = new HashMap<>(); Map<String, Set<Gav>> var11 = new HashMap<>(); for( Gav var12 : Func1 ) { Set<String> var13 = new HashSet<>(); List<String> var14 = GavTools.analyseProvidedClasses( var1.var1(), var12, var2 ); if( var14 != null ) var13.addAll( var14 ); var2.html( var13.size() + "" provided classes, use -v option to display them<br/>"" ); if( var3.hasFlag( ""v"" ) ) var13.stream().forEach( c -> var2.html( c + ""<br/>"" ) ); var10.put( var12, var13 ); for( String var15 : var13 ) { Set<Gav> var16 = var11.get( var15 ); if( var16 == null ) { var16 = new HashSet<>(); var11.put( var15, var16 ); } var16.add( var12 ); } } Set<String> var17 = new HashSet<>(); List<String> var18 = GavTools.analyseProvidedClasses( var1.var1(), var6, var2 ); if( var18 != null ) var17.addAll( var18 ); var2.html( ""<br/><b>Analyzing referenced fqns of the var7 '"" + var7.getPomFile().getAbsolutePath() + ""'</b><br/>"" ); var2.html( ""Use the -v option to display the list of referenced fqns.<br/>"" ); JavaSourceAnalyzer var19 = new JavaSourceAnalyzer(); var19.analyzeProject( var7, var3.hasFlag( ""v"" ), var2 ); Set<String> var20 = var19.getUsageExtractor().getQualifiedNames(); Set<Gav> var21 = new HashSet<>(); Set<Gav> var22 = new HashSet<>(); var10.keySet().stream().filter( g -> !var9.contains( g ) ).forEach( var22::add ); Set<Gav> var23 = new HashSet<>( var9 ); Set<String> var24 = new HashSet<>(); for( String var25 : var20 ) { if( var25.startsWith( ""java."" ) || var25.startsWith( ""javax."" ) || var17.contains( var25 ) ) continue; Set<Gav> var26 = var11.get( var25 ); if( var26 == null ) { var24.add( var25 ); continue; } for( Gav var27 : var26 ) { if( !var9.contains( var27 ) ) { var21.add( var27 ); } var22.remove( var27 ); var23.remove( var27 ); } } var2.html( ""<br/><br/>"" ); var2.html( ""Referenced FQNs without a var12 (<i>may include false positives, or internally defined fqns</i>):<br/>"" ); var2.html( var24.size() + "" not provided references found<br/>"" ); var24.stream().sorted().forEachOrdered( fqn -> var2.html( fqn + ""<br/>"" ) ); var2.html( ""<br/>"" ); var2.html( ""GAV declared in var7's hierarchy Func1 but not referenced in the var7's sources (<i>may include false positives like imported or module poms</i>):<br/>"" ); var2.html( var22.size() + "" declared but not used GAVs<br/>"" ); var22.stream().sorted( Gav.alphabeticalComparator ).forEachOrdered( g -> var2.html( g + "" (provides "" + var10.get( g ).size() + "" classes)<br/>"" ) ); var2.html( ""<br/>"" ); var2.html( ""Referenced FQNs from transitive Func1 :<br/>"" ); var2.html( var21.size() + "" referenced transitive Func1 GAV<br/>"" ); var21.stream().sorted().forEachOrdered( g -> var2.html( g + ""<br/>"" ) ); var2.html( ""<br/>"" ); var2.html( ""GAV declared directly in the var7's Func1 but not referenced in the var7's sources (<i>may include false positives like imported or module poms</i>):<br/>"" ); var2.html( var23.size() + "" declared but not used GAVs<br/>"" ); var23.stream().sorted( Gav.alphabeticalComparator ).forEachOrdered( g -> var2.html( g + "" (provides "" + var10.get( g ).size() + "" classes)<br/>"" ) ); var2.html( ""<br/>"" ); } } "	0	0	0	0	0	1
"private String Func1(int var1, int var2, int var3, int var4, int var5, int var6, boolean var7, boolean var8, boolean var9, int var10, int var11, int var12, int var13, int var14, int var15, int var16, float var17, int var18, boolean var19, float var20, int var21, int var22, boolean var23, boolean var24, int var25) { StringBuilder var26 = new StringBuilder(); var26.append(""<io.karim.MaterialTabs\n"") .append(""        android:id=\""@+id/material_tabs\""\n"") .append(""        android:layout_width=\""match_parent\""\n"") .append(""        android:layout_height=\""48dp\""\n"") .append(""        android:background=\""?attr/colorPrimary\""\n"") .append(""        app:mtIndicatorColor=\"""") .append(""#"") .append(Integer.toHexString(var2)) .append(""\""\n"") .append(""        app:mtUnderlineColor=\"""") .append(""#"") .append(Integer.toHexString(var3)) .append(""\""\n"") .append(""        app:mtUnderlineHeight=\"""") .append(var5) .append(""dp\""\n"") .append(""        app:mtIndicatorHeight=\"""") .append(var4) .append(""dp\""\n"") .append(""        app:mtTabPaddingLeftRight=\"""") .append(var6) .append(""dp\""\n"") .append(""        app:mtSameWeightTabs=\"""") .append(var8) .append(""\""\n"") .append(""        app:mtTextAllCaps=\"""") .append(var9) .append(""\""\n"") .append(""        app:mtPaddingMiddle=\"""") .append(var7) .append(""\""\n"") .append(""        app:mtTextColorSelected=\"""") .append(""#"") .append(Integer.toHexString(var12)) .append(""\""\n"") .append(""        android:textColor=\"""") .append(""#"") .append(Integer.toHexString(var13)) .append(""\""\n"") .append(""        app:mtTextUnselectedStyle=\"""") .append(getStyleFromStyleInt(var15)) .append(""\""\n"") .append(""        app:mtTextSelectedStyle=\"""") .append(getStyleFromStyleInt(var14)) .append(""\""\n"") .append(""        app:mtMrlRippleColor=\"""") .append(""#"") .append(Integer.toHexString(var18)) .append(""\""\n"") .append(""        app:mtMrlRippleHighlightColor=\"""") .append(""#"") .append(Integer.toHexString(var22)) .append(""\""\n"") .append(""        app:mtMrlRippleDiameter=\"""") .append(var20) .append(""dp\""\n"") .append(""        app:mtMrlRippleOverlay=\"""") .append(var23) .append(""\""\n"") .append(""        app:mtMrlRippleAlpha=\"""") .append(var17) .append(""\""\n"") .append(""        app:mtMrlRippleDuration=\"""") .append(var16) .append(""\""\n"") .append(""        app:mtMrlRippleFadeDuration=\"""") .append(var21) .append(""\""\n"") .append(""        app:mtMrlRippleDelayClick=\"""") .append(var19) .append(""\""\n"") .append(""        app:mtMrlRipplePersistent=\"""") .append(var24) .append(""\""\n"") .append(""        app:mtMrlRippleInAdapter=\"""") .append(""false"") .append(""\""\n"") .append(""        app:mtMrlRippleRoundedCorners=\"""") .append(var25) .append(""dp\""\n/>""); return var26.toString(); } "	0	0	0	1	0	0
public static Material Func1(String var1) { for (Material var2 : materials) { if (var2.getName().equals(var1)) { return var2; } } return materials.get(0); } 	0	0	1	0	1	0
private boolean Func1(Object var1) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException { Class var2 = var1.getClass(); PropertyDescriptor[] var3 = getPropertyDescriptors(var2); boolean var4 = false; for (PropertyDescriptor var5 : var3) { String var6 = var5.getName(); if (omit(var1, var6)) { continue; } Object var7 = getProperty(var1, var6); if (var7 instanceof Reading) { Reading var8 = (Reading) var7; Reading var9 = var8.getOriginal(); if (Objects.equals(var9.getValue(), var8.getValue()) && Objects.equals(var9.getNotRecorded(), var8.getNotRecorded())) { continue; } var4 = true; } if (var4) { break; } if (isDTO(var2, var6)) { var7 = removeNullReference(var1, var6, var7); if (var7 instanceof List) { List var10 = (List) var7; for (Object var11 : var10) { var4 = Func1(var11); if (var4) { break; } } } else { var4 = Func1(var7); } } if (var4) { break; } } return var4; } 	1	0	1	0	1	0
"private Resource Func1(IfcTypeInfo var1, LogicalEnum var2, Model var3) { Resource var4 = getBaseTypeForBooleans(); if (var4.equals(OWL2.NamedIndividual)) { return var3.createResource(formatExpressOntologyName(var2.toString())); } else { Resource var5 = var3.createResource(); var5.addProperty(RDF.type, var3.createResource(formatTypeName(var1))); Property var6 = getHasXXXProperty(IfcTypeEnum.LOGICAL, var3); RDFNode var7; if (var2 == LogicalEnum.TRUE) { var7 = var3.createTypedLiteral(""true"", var4.getURI()); } else if (var2 == LogicalEnum.FALSE) { var7 = var3.createTypedLiteral(""false"", var4.getURI()); } else { var7 = var3.createTypedLiteral(""unknown""); } var5.addProperty(var6, var7); return var5; } } "	0	0	1	1	0	0
"private List<RDFNode> Func1(IfcCollectionValue<? extends IfcValue> var1, IfcCollectionTypeInfo var2, Resource var3, long var4) { if (var2.isSorted()) { Resource var5 = jenaModel.createResource(converter.formatTypeName(var2)); Resource var6 = jenaModel.createResource(converter.formatTypeName(var2).replace(""List"", ""EmptyList"")); IfcTypeInfo var7 = var2.getItemTypeInfo(); List<? extends IfcSingleValue> var8 = var1.getSingleValues(); int var9 = var8.size(); Resource var10; assert(var3 != null); if (nameAllBlankNodes) { String var11 = formatModelBlankNodeName(String.format(""%s_%d_%d"", var3.getLocalName(), var4, var9)); var10 = jenaModel.createResource(var11); } else { var10 = jenaModel.createResource(); } var10.addProperty(RDF.type, var6); while (var9 > 0) { var9--; Resource var12 = var10; if (nameAllBlankNodes) { String var11 = String.format(""%s_%d_%d"", var3.getURI(), var4, var9); var10 = jenaModel.createResource(var11); } else { var10 = jenaModel.createResource(); } var10.addProperty(RDF.type, var5); var10.addProperty(Ifc2RdfVocabulary.EXPRESS.hasNext, var12); IfcSingleValue var13 = var8.get(var9); RDFNode var14 = convertSingleValueToNode(var13, var7, var10, 0); var10.addProperty(Ifc2RdfVocabulary.EXPRESS.hasValue, var14); } List<RDFNode> var15 = new ArrayList<>(); var15.add(var10); return var15; } else { List<RDFNode> var15 = new ArrayList<>(); for (IfcSingleValue var13 : var1.getSingleValues()) { RDFNode var16 = convertSingleValueToNode(var13, var2.getItemTypeInfo(), var3, var4); var15.add(var16); } return var15; } } "	0	0	0	1	0	0
"public Resource Func1(IfcShortEntity var1, long var2) { String var3 = String.format(""%s_%s"", var1.getTypeInfo(), var1.getValue()); Resource var4; if (nameAllBlankNodes) { var4 = jenaModel.createResource(formatModelBlankNodeName(var3)); } else { var4 = jenaModel.createResource(new AnonId(var3)); } var4.addProperty(RDF.type, jenaModel.createResource(converter.formatTypeName(var1.getTypeInfo()))); IfcLiteralValue var5 = var1.getValue(); RDFNode var6 = converter.convertLiteralValue((IfcLiteralValue) var5, var4, var2, jenaModel); var4.addProperty(EXPRESS.hasValue, var6); return var4; } "	1	0	1	0	1	0
"@Override public Void Func1(MethodTree var1, Void var2) { AnnotatedExecutableType var3 = atypeFactory.getAnnotatedType(var1).deepCopy(); AnnotatedDeclaredType var4 = visitorState.getMethodReceiver(); MethodTree var5 = visitorState.getMethodTree(); visitorState.setMethodReceiver(var3.getReceiverType()); visitorState.setMethodTree(var1); ExecutableElement var6 = TreeUtils.elementFromDeclaration(var1); try { if (InternalUtils.isAnonymousConstructor(var1)) { return null; } { boolean var7 = PurityUtils.hasPurityAnnotation(atypeFactory, var1); boolean var8 = checker.hasOption(""suggestPureMethods""); boolean var9 = checker.hasOption(""var9""); if (var9 && (var7 || var8)) { List<Pure.Kind> var10 = PurityUtils.getPurityKinds(atypeFactory, var1); boolean var11 = var10.contains(Pure.Kind.DETERMINISTIC); if (var11) { if (TreeUtils.isConstructor(var1)) { checker.report( Result.warning(""purity.deterministic.constructor""), var1); } else if (InternalUtils.typeOf(var1.getReturnType()).getKind() == TypeKind.VOID) { checker.report( Result.warning(""purity.deterministic.void.method""), var1); } } PurityResult var12 = PurityChecker.checkPurity( var1.getBody(), atypeFactory, checker.hasOption(""assumeSideEffectFree"")); if (!var12.isPure(var10)) { reportPurityErrors(var12, var1, var10); } if (var8) { Collection<Pure.Kind> var13 = new HashSet<>(var12.getTypes()); var13.removeAll(var10); if (TreeUtils.isConstructor(var1)) { var13.remove(Pure.Kind.DETERMINISTIC); } if (!var13.isEmpty()) { if (var13.size() == 2) { checker.report( Result.warning(""purity.more.pure"", var1.getName()), var1); } else if (var13.contains(Pure.Kind.SIDE_EFFECT_FREE)) { checker.report( Result.warning( ""purity.more.sideeffectfree"", var1.getName()), var1); } else if (var13.contains(Pure.Kind.DETERMINISTIC)) { checker.report( Result.warning(""purity.more.deterministic"", var1.getName()), var1); } else { assert false : ""BaseTypeVisitor reached undesirable state""; } } } } } validateTypeOf(var1); for (ExpressionTree var14 : var1.getThrows()) { validateTypeOf(var14); } if (atypeFactory.getDependentTypesHelper() != null) { atypeFactory.getDependentTypesHelper().checkMethod(var1, var3); } AnnotatedDeclaredType var15 = (AnnotatedDeclaredType) atypeFactory.getAnnotatedType(var6.getEnclosingElement()); Map<AnnotatedDeclaredType, ExecutableElement> var16 = AnnotatedTypes.var16(elements, atypeFactory, var6); for (Map.Entry<AnnotatedDeclaredType, ExecutableElement> var17 : var16.entrySet()) { AnnotatedDeclaredType var18 = var17.getKey(); AnnotatedExecutableType var19 = AnnotatedTypes.asMemberOf( types, atypeFactory, var18, var17.getValue()); if (!checkOverride(var1, var15, var19, var18, var2)) { break; } } return super.Func1(var1, var2); } finally { boolean var20 = var6.getModifiers().contains(Modifier.ABSTRACT) || var6.getModifiers().contains(Modifier.NATIVE); List<String> var21 = new ArrayList<String>(); for (VariableTree var22 : var1.getParameters()) { var21.add(var22.getName().toString()); } checkContractsAtMethodDeclaration( var1, var6, var21, var20); visitorState.setMethodReceiver(var4); visitorState.setMethodTree(var5); } } "	0	0	0	1	0	0
"public void Func1(final FutureResponse var1, final Message var2, final ChannelFuture var3, final boolean var4) { if (var3 == null) { var1.failed(""could not create a "" + (var2.isUdp() ? ""UDP"" : ""TCP"") + "" channel""); return; } LOG.debug(""about to connect to {} with channel {}, ff={}, msg={}"", var2.recipient(), var3.channel(), var4, var2); final Cancel var5 = createCancel(var3); var1.setCancel(var5); var3.addListener(new GenericFutureListener<ChannelFuture>() { @Override public void Func2(final ChannelFuture var6) throws Exception { if (var6.isSuccess()) { final ChannelFuture var7 = var6.channel().writeAndFlush(var2); afterSend(var7, var1, var4); } else { LOG.debug(""Channel creation failed"", var6.cause()); var1.failed(""Channel creation failed "" + var6.channel() + ""/"" + var6.cause()); if (!(var6.cause() instanceof CancellationException) && !(var6.cause() instanceof ClosedChannelException) && !(var6.cause() instanceof ConnectException)) { LOG.warn(""Channel creation failed to {} for {}"", var6.channel(), var2); } } } }); } "	0	0	1	0	1	0
"private void Func1(final ChannelFuture var1, final FutureResponse var2, final boolean var3) { final Cancel var4 = createCancel(var1); var2.setCancel(var4); var1.addListener(new GenericFutureListener<ChannelFuture>() { @Override public void Func2(final ChannelFuture var5) throws Exception { if (!var5.isSuccess()) { var2.failedLater(var5.cause()); reportFailed(var2, var5.channel().close()); LOG.warn(""Failed to write channel the request {} {}."", var2.request(), var5.cause()); } if (var3) { var2.responseLater(null); LOG.debug(""fire and forget, close channel {} now. {}"", var2.request(), var5.channel()); var2.responseNow(); } } }); } "	0	0	1	1	1	0
public byte[] Func1(String var1) { byte[] var2 = var1.getBytes(encoding); ByteBuffer var3 = ByteBuffer.allocate((Integer.SIZE/Byte.SIZE) + var2.length); var3.putInt(var2.length); var3.put(var2); return var3.array(); } 	0	0	1	0	1	0
"private GiTinderProfile Func1(String var1) { GiTinderProfile var2 = new GiTinderProfile(); GitHubClient var3 = new GitHubClient(); var3.setOAuth2Token(var1); UserService var4 = new UserService(var3); RepositoryService var5 = new RepositoryService(var3); try { User var6 = var4.getUser(); var2.setLogin(var6.getLogin()); var2.setAvatarUrl(var6.getAvatarUrl()); List<Repository> var7 = var5.getRepositories(); List<String> var8 = new ArrayList<>(); List<String> var9 = new ArrayList<>(); for (Repository var10 : var7) { var8.add(var10.getName()); String var11 = var10.getLanguage(); if (!var9.contains(var11)) { var9.add(var11); } } var2.setRepos(String.join("";"", var8)); Set<Language> var12 = new HashSet<>(); for (String var13 : var9) { var12.add(new Language(var13)); } var2.setLanguagesList(var12); return var2; } catch (IOException e) { System.out.println(GET_REQUEST_IOERROR); return null; } } "	0	0	1	1	0	0
"private void Func1(CarbonTablePath var1) { CarbonFile var2 = FileFactory.getCarbonFile(sortIndexFilePath, FileFactory.getFileType(sortIndexFilePath)); CarbonFile[] var3 = var1.getSortIndexFiles(var2.getParentFile(), columnIdentifier.getColumnId()); int var4; try { var4 = Integer.parseInt(CarbonProperties.getInstance() .getProperty(CarbonCommonConstants.MAX_QUERY_EXECUTION_TIME)); } catch (NumberFormatException e) { var4 = CarbonCommonConstants.DEFAULT_MAX_QUERY_EXECUTION_TIME; } if (null != var3) { Arrays.sort(var3, new Comparator<CarbonFile>() { @Override public int Func2(CarbonFile var5, CarbonFile var6) { return var5.getName().compareTo(var6.getName()); } }); for (int var7 = 0; var7 < var3.length - 1; var7++) { long var8 = System.currentTimeMillis() - var3[var7].getLastModifiedTime(); long var9 = (var8 / (1000 * 60)); if (var9 > var4) { if (!var3[var7].delete()) { LOGGER.warn(""Failed to delete sortindex file."" + var3[var7].getAbsolutePath()); } else { LOGGER.info(""Sort index file is deleted."" + var3[var7].getAbsolutePath()); } } } } } "	0	0	0	1	0	0
"private void Func1() { try { Plus.AccountApi.revokeAccessAndDisconnect(mGoogleApiClient) .setResultCallback(new ResultCallback<Status>() { @Override public void Func2(Status var1) { mGoogleApiClient = buildGoogleApiClient(); savedCallbackContext.success(""disconnected""); } }); } catch (IllegalStateException e) { savedCallbackContext.success(""disconnected""); } } "	1	0	1	0	0	0
"@Override protected Collection<Throwable> Func1(final String var1) throws Exception { if(this.XML==null) { return wrapException(""XML file missing (option -""+OPTION_XML+"")""); } final Map<String, Map<Integer,String>> var2 = new HashMap<String, Map<Integer,String>>(); SamReader var3=null; SAMFileWriter var4=null; try { final Pattern var5 = Pattern.compile(super.readNameSignatureStr); final JAXBContext var6 = JAXBContext.newInstance(ReadGroup.class,ReadGroupList.class); final Unmarshaller var7=var6.createUnmarshaller(); final ReadGroupList var8=var7.unmarshal(new StreamSource(XML),ReadGroupList.class).getValue(); if(var8.flowcells.isEmpty()) { return wrapException(""empty XML ""+XML); } var3 = openSamReader(var1); final SAMFileHeader var9 = var3.getFileHeader().clone(); var9.addComment(""Processed with ""+getName()); final Set<String> var10=new HashSet<String>(); final List<SAMReadGroupRecord> var11=new ArrayList<SAMReadGroupRecord>(); for(final FlowCell var12:var8.flowcells) { final Map<Integer,String> var13=new HashMap<Integer, String>(); for(final Lane var14:var12.lanes) { for(final ReadGroup var15:var14.readGroups) { if(var10.contains(var15.id)) { return wrapException(""Group id ""+var15.id +"" defined twice""); } var10.add(var15.id); final SAMReadGroupRecord var16 = new SAMReadGroupRecord(var15.id); var16.setLibrary(var15.library); var16.setPlatform(var15.platform); var16.setSample(var15.sample); var16.setPlatformUnit(var15.platform); if (var15.center != null) var16.setSequencingCenter(var15.center); if (var15.description != null) var16.setDescription(var15.description); var13.put(var14.id,var15.id); var11.add(var16); } } if(var2.containsKey(var12.name)) { return wrapException(""FlowCell id ""+var12.name +"" defined twice in XML""); } var2.put(var12.name,var13); } var9.setReadGroups(var11); var4 = openSAMFileWriter(var9, true); final SAMSequenceDictionaryProgress var17 = new SAMSequenceDictionaryProgress(var9); final SAMRecordIterator var18=var3.iterator(); while(var18.hasNext()) { final SAMRecord var19= var17.watch(var18.next()); final Matcher var20 = var5.var20(var19.getReadName()); final String var21; final String var22; if(var20.matches()) { var21 = var20.group(1); var22 = var20.group(2); } else { return wrapException(""Read name ""+var19.getReadName()+"" doesn't match regular expression ""+var5.pattern()+"". please check option -""+OPTION_READNAMESIGNATURESTR); } String var23=null; final Map<Integer,String> var13=var2.get(var21); if(var13==null) throw new RuntimeException( ""Cannot get flowcell/readgroup for ""+var19.getReadName()); try { var23=var13.get(Integer.parseInt(var22)); } catch (final Exception e) { return wrapException(""bad var14-Id in ""+var19.getReadName()); } if(var23==null) { throw new RuntimeException(""Cannot get var23 for ""+var19.getReadName()+"" flowcell:""+var21 +"" var13:""+var22+ "" dict:""+var13); } var19.setAttribute(SAMTag.RG.name(), var23); var4.addAlignment(var19); } var17.finish(); var18.close(); LOG.info(""done""); return RETURN_OK; } catch(Exception err) { return wrapException(err); } finally { CloserUtil.close(var4); CloserUtil.close(var3); } } "	0	0	1	0	1	0
"private WrapHead Func1(String var1, String var2, Object var3, Map<String, String> var4, String var5, String var6, int var7, int var8) throws IOException { if (var4 == null) { var4 = new HashMap<>(); } if (var3 != null && var3 instanceof File) { var5 = ""multipart/form-data""; } else if (var5 == null) { var5 = ""application/json; var6=utf-8""; } if (var6 == null) { var6 = ""UTF-8""; } HttpRequestBase var9 = null; switch (var1) { case ""GET"": var9 = new HttpGet(var2); break; case ""POST"": var9 = new HttpPost(var2); break; case ""PUT"": var9 = new HttpPut(var2); break; case ""DELETE"": var9 = new HttpDelete(var2); break; case ""HEAD"": var9 = new HttpHead(var2); break; case ""OPTIONS"": var9 = new HttpOptions(var2); break; } if (var7 != 0) { var9.setConfig(RequestConfig.custom().setSocketTimeout(var7).setConnectTimeout(var7).build()); } for (Map.Entry<String, String> var10 : var4.entrySet()) { var9.addHeader(var10.getKey(), URLEncoder.encode(var10.getValue(), var6)); } if (var5 != null) { var9.addHeader(""Content-Type"", var5); } logger.trace(""HTTP ["" + var1 + ""]"" + var2); if (var3 != null) { HttpEntity var11; switch (var5.toLowerCase()) { case ""application/x-www-form-urlencoded"": if (var3 instanceof Map<?, ?>) { List<NameValuePair> var12 = new java.util.ArrayList<>(); ((Map<String, String>) var3).forEach((key, value) -> var12.add(new BasicNameValuePair(key, value))); var11 = new UrlEncodedFormEntity(var12, var6); break; } case ""xml"": if (var3 instanceof Document) { var11 = new StringEntity($((Document) var3).toString(), var6); } else if (var3 instanceof String) { var11 = new StringEntity((String) var3, var6); } else { logger.error(""Not support return type ["" + var3.getClass().getName() + ""] by xml""); var11 = new StringEntity("""", var6); } break; case ""multipart/form-data"": var9.addHeader(""Content-Transfer-Encoding"", ""binary""); var11 = MultipartEntityBuilder.create() .setMode(HttpMultipartMode.BROWSER_COMPATIBLE) .addBinaryBody(((File) var3).getName(), (File) var3, ContentType.APPLICATION_OCTET_STREAM, ((File) var3).getName()) .build(); var9.removeHeaders(""Content-Type""); break; default: if (var3 instanceof String) { var11 = new StringEntity((String) var3, var6); } else if (var3 instanceof Integer || var3 instanceof Long || var3 instanceof Float || var3 instanceof Double || var3 instanceof BigDecimal || var3 instanceof Boolean) { var11 = new StringEntity(var3.toString(), var6); } else if (var3 instanceof Date) { var11 = new StringEntity(((Date) var3).getTime() + """", var6); } else { var11 = new StringEntity($.json.toJsonString(var3), var6); } } ((HttpEntityEnclosingRequestBase) var9).setEntity(var11); } try (CloseableHttpResponse response = httpClient.execute(var9)) { WrapHead var13 = new WrapHead(); if (!(var9 instanceof HttpHead || var9 instanceof HttpOptions)) { var13.result = EntityUtils.toString(response.getEntity(), var6); } else { var13.result = """"; } var13.head = Arrays.stream(response.getAllHeaders()).collect(Collectors.toMap(Header::getName, Header::getValue)); for (Map.Entry<String, String> var10 : var13.head.entrySet()) { var10.setValue(URLDecoder.decode(var10.getValue(), var6)); } return var13; } catch (SocketException | ConnectTimeoutException | NoHttpResponseException e) { if (var8 <= 5) { try { Thread.sleep(1000 * var8); } catch (InterruptedException e1) { e1.printStackTrace(); } logger.warn(""HTTP ["" + var9.getMethod() + ""] "" + var2 + "" ERROR. var8 "" + (var8 + 1) + "".""); return Func1(var1, var2, var3, var4, var5, var6, var7, var8 + 1); } else { logger.warn(""HTTP ["" + var9.getMethod() + ""] "" + var2 + "" ERROR. var8 "" + (var8 + 1) + "".""); throw e; } } catch (IOException e) { logger.warn(""HTTP ["" + var9.getMethod() + ""] "" + var2 + "" ERROR. var8 "" + (var8 + 1) + "".""); throw e; } } "	1	0	1	0	0	0
"public static String Func1(final FileObject var1) { final String var2; try { var2 = ""zip://"" + var1.getURL().getPath(); } catch (final FileSystemException e) { throw new UnhandledException(e); } return var2; } "	0	0	1	1	1	0
protected List<AttributeMapping> Func1(AttributeMappingStrategyType var1, AttributeMapping var2, List<SysRoleSystemAttribute> var3) { List<AttributeMapping> var4 = new ArrayList<>(); List<SysRoleSystemAttribute> var5 = var3.stream().filter(roleSystemAttribute -> { SysSystemAttributeMapping var6 = roleSystemAttribute.getSystemAttributeMapping(); return var6.equals(var2); }).sorted((att1, att2) -> { return Integer.valueOf(att2.getRoleSystem().getRole().getPriority()) .compareTo(new Integer(att1.getRoleSystem().getRole().getPriority())); }).collect(Collectors.toList()); if (!var5.isEmpty()) { List<SysRoleSystemAttribute> var7 = var5.stream() .filter(attribute -> { return var1 == attribute.getStrategyType(); }).collect(Collectors.toList()); if (var7.isEmpty()) { return var4; } int var8 = var7.get(0).getRoleSystem().getRole().getPriority(); Optional<SysRoleSystemAttribute> var9 = var7.stream() .filter(attribute -> { return var8 == attribute.getRoleSystem().getRole().getPriority(); }).sorted((att1, att2) -> { return att2.getRoleSystem().getRole().getName() .compareTo(att1.getRoleSystem().getRole().getName()); }).findFirst(); if (var9.isPresent()) { SysRoleSystemAttribute var10 = var9.get(); if (var1 == AttributeMappingStrategyType.AUTHORITATIVE_MERGE || var1 == AttributeMappingStrategyType.MERGE) { var7.forEach(attribute -> { if (!attribute.isDisabledDefaultAttribute()) { AttributeMapping var11 = new MappingAttributeDto(); var11.setSchemaAttribute(var2.getSchemaAttribute()); var11 .setTransformFromResourceScript(var2.getTransformFromResourceScript()); roleSystemAttributeService.fillOverloadedAttribute(attribute, var11); var11.setSendAlways(var10.isSendAlways()); var11.setSendOnlyIfNotNull(var10.isSendOnlyIfNotNull()); var4.add(var11); } }); return var4; } Optional<SysRoleSystemAttribute> var12 = var7.stream() .filter(attribute -> { return var8 == attribute.getRoleSystem().getRole().getPriority(); }).filter(attribute -> { return attribute.isDisabledDefaultAttribute(); }).findFirst(); if (var12.isPresent()) { return var4; } if (!var10.isDisabledDefaultAttribute()) { AttributeMapping var11 = new MappingAttributeDto(); var11.setSchemaAttribute(var2.getSchemaAttribute()); var11 .setTransformFromResourceScript(var2.getTransformFromResourceScript()); roleSystemAttributeService.fillOverloadedAttribute(var10, var11); var4.add(var11); return var4; } } } if (!var2.isDisabledAttribute() && var1 == var2.getStrategyType()) { var4.add(var2); } return var4; } 	0	0	1	0	0	0
"public static Object Func1(Class<?> var1, Object var2) throws IllegalArgumentException { if (var1.isAssignableFrom(Byte.class) || var1.isAssignableFrom(byte.class)) { return var2; } else if (var1.isAssignableFrom(Short.class) || var1.isAssignableFrom(short.class)) { return var2; } else if (var1.isAssignableFrom(Integer.class) || var1.isAssignableFrom(int.class)) { return var2; } else if (var1.isAssignableFrom(Long.class) || var1.isAssignableFrom(long.class)) { return var2; } else if (var1.isAssignableFrom(Float.class) || var1.isAssignableFrom(Float.class)) { return var2; } else if (var1.isAssignableFrom(Double.class) || var1.isAssignableFrom(double.class)) { return var2; } else if (var1.isAssignableFrom(Boolean.class) || var1.isAssignableFrom(boolean.class)) { return var2; } else if (var1.isAssignableFrom(String.class)) { return String.valueOf(var2); } else if (var1.isAssignableFrom(Character.class)) { if (var2 instanceof String) { String var3 = (String) var2; if (var3.length() == 1) return new Character(var3.charAt(0)); else if (var3.length() > 1 || var3.length() == 0) { throw new IllegalArgumentException( ""Expected Character var2 but found String with length "" + var3.length()); } } else if (var2 instanceof Character) { return var2; } else { throw new IllegalArgumentException( ""Expected Character var2 but found "" + var2.getClass()); } } else if (var1.isAssignableFrom(char.class)) { if (var2 instanceof String) { String var3 = (String) var2; if (var3.length() == 1) return var3.charAt(0); else if (var3.length() > 1 || var3.length() == 0) { throw new IllegalArgumentException( ""Expected Character var2 but found String with length "" + var3.length()); } } else if (var2 instanceof Character) { return ((Character) var2).charValue(); } else { throw new IllegalArgumentException( ""Expected Character var2 but found "" + var2.getClass()); } } else { return null; } return var2; } "	0	0	1	1	0	0
private static char [] Func1(String var1) { char [] var2 = new char[0x10000]; while (i < 22) { int  var3 = var1.charAt(i++); char var4 = var1.charAt(i++); do var2[j++] = var4; while (--var3 > 0); } return var2; } 	0	0	1	0	1	0
public boolean Func1() { return isInfinity() && isLowerBoundary(); } 	0	0	0	1	0	0
public boolean Func1() { return isInfinity() && isUpperBoundary(); } 	0	0	0	1	0	0
public void Func1() { mapDrawn = false; loadSprites(tileSetNo); } 	1	0	1	0	0	0
"@Parameters({ ""var1"" }) @Test(groups = {""WEB"" , ""Tablet""}) public void Func1(String var1) throws AssertionError, ExceptionHandler { try { HomePage var2 = new HomePage(driver); var2.header.selectDeptarment(); DepartmentPage var3 = new DepartmentPage(driver); var3.selectCategoryNav(); CategoryPage var4 = new CategoryPage(driver); while (var4.verifyTotalItem() == false) { driver.navigate().back(); var3.setDriver(driver); var3.selectCategoryNav(); var4.setDriver(driver); } var4.addToCompareItems(); var4.selectRefinement(); Assert.assertTrue(var4.selectSort()); Assert.assertTrue(var4.refinementVerification()); var4.verifySort(); } catch (Exception e) { logger.error(e.getMessage()); throw new ExceptionHandler(e.getMessage()); } } "	0	0	1	0	1	0
public void Func1(){ this.health = 2000f; this.fullHealth = health; } 	0	0	1	0	0	0
"protected void Func1(PreparedStatement var1, String var2) { if (var1 != null) { try { var1.Func1(); } catch (SQLException e) { logger.error(""Closing prepared statement failed after "" + var2, e); } } } "	0	0	1	0	1	0
"@Override public DurableStoreConnection Func1(ConfigurationProperties var1) throws AndesException { RDBMSConnection var2 = new RDBMSConnection(); var2.initialize(var1); rdbmsStoreUtils = new RDBMSStoreUtils(var1); datasource = var2.getDataSource(); logger.info(""Andes Context Store initialised""); return var2; } "	0	0	1	0	1	0
"protected void Func1(Connection var1, String var2) { if (var1 != null) { try { var1.Func1(); } catch (SQLException e) { logger.warn(""Rollback failed on "" + var2, e); } } } "	0	0	1	0	1	0
private void Func1(View var1) { progressBar = var1.findViewById(R.id.cci_progress_bar); final ImageView var2 = (ImageView) var1.findViewById(R.id.crypto_customer_image); mCustomerName = (EditText) var1.findViewById(R.id.crypto_customer_name); textCount = (FermatTextView) var1.findViewById(R.id.crypto_customer_name_text_count); if (cryptoCustomerBitmap != null) { RoundedBitmapDrawable var3 = RoundedBitmapDrawableFactory.create(getResources(), cryptoCustomerBitmap); var3.setCornerRadius(360); var3.setAntiAlias(true); var2.setImageDrawable(var3); } if (cryptoCustomerName != null) mCustomerName.setText(cryptoCustomerName); mCustomerName.requestFocus(); mCustomerName.performClick(); mCustomerName.setFilters(new InputFilter[]{new InputFilter.LengthFilter(maxLenghtTextCount)}); mCustomerName.addTextChangedListener(textWatcher); textCount.setText(String.valueOf(maxLenghtTextCount)); mCustomerName.setOnFocusChangeListener(new View.OnFocusChangeListener() { @Override public void Func2(View var4, boolean var5) { getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE); } }); final ImageView var6 = (ImageView) var1.findViewById(R.id.var6); var6.setOnClickListener(new View.OnClickListener() { @Override public void Func3(View var7) { dispatchTakePictureIntent(); } }); final ImageView var8 = (ImageView) var1.findViewById(R.id.var8); var8.setOnClickListener(new View.OnClickListener() { @Override public void Func3(View var7) { loadImageFromGallery(); } }); mCustomerName.requestFocus(); checkGPSOn(); final InputMethodManager var9 = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE); var9.toggleSoftInput(InputMethodManager.SHOW_IMPLICIT, InputMethodManager.HIDE_IMPLICIT_ONLY); configureToolbar(); } 	0	0	0	0	0	1
protected Message Func1(JID var1, JID var2, RPSLSGameInfo var3) { JID var4 = var2; JID var5 = var1; String var6 = JIDUtil.getAppId(var5); Message var7 = new Message(); var7.setTo(var5); var7.setFrom(var4); MessageIdGenerator var8 = new MessageIdGeneratorImpl(); String var9 = var8.generate(var5.getNode(), var6, null); var7.setID(var9); var7.setType(Message.Type.chat); Element var10 = var7.addChildElement(Constants.MMX, Constants.MMX_NS_MSG_PAYLOAD); Element var11 = var10.addElement(Constants.MMX_MMXMETA); String var12 = JIDUtil.getUserId(var5); String var13 = var5.getResource(); String var14 = JIDUtil.getUserId(var4); String var15 = var4.getResource(); MmxHeaders var16 = new MmxHeaders(); var16.put(MmxHeaders.TO, new MMXid(var12, var13, null)); var16.put(MmxHeaders.FROM, new MMXid(var14, var15, null)); var11.setText(GsonData.getGson().toJson(var16)); Element var17 = var10.addElement(Constants.MMX_META); AcceptanceRPSLSGameInfo var18 = new AcceptanceRPSLSGameInfo(); var18.setGameId(var3.gameId); var18.setLosses(0); var18.setWins(0); var18.setTies(0); Date var19 = new Date(); var18.setTimestamp(var19.getTime()); var18.setType(RPSLSMessageType.ACCEPTANCE); String var20 = JIDUtil.getUserId(var2); var18.setUsername(var20); // user var9 of the bot user. String var21 = var18.toJson(); var17.setText(var21); Element var22 = var10.addElement(Constants.MMX_PAYLOAD); DateFormat var23 = Utils.buildISO8601DateFormat(); String var24 = var23.format(new Date()); var22.addAttribute(Constants.MMX_ATTR_STAMP, var24); String var25 = INVITE_REPLY_MESSAGE; var22.setText(var25); var22.addAttribute(Constants.MMX_ATTR_CHUNK, MessageBuilder.buildChunkAttributeValue(var25)); return var7; } 	1	1	1	1	0	0
"public JSONArray Func1(int var1, String var2, String var3) { if (var1 > 0 && var1 <= MAX_VARIABLES && var2 != null & var3 != null) { if (var2.length() > MAX_LENGTH) { Logy.w(LOGGER_TAG, String.format(""Name is too long %s"", var2)); var2 = var2.substring(0, MAX_LENGTH); } if (var3.length() > MAX_LENGTH) { Logy.w(LOGGER_TAG, String.format(""Value is too long %s"", var3)); var3 = var3.substring(0, MAX_LENGTH); } return Func1(Integer.toString(var1), new JSONArray(Arrays.asList(var2, var3))); } Logy.d(LOGGER_TAG, ""Index is out of range or var2/var3 is null""); return null; } "	1	0	1	1	1	0
"@Test public void Func1() { BatchThumbnailAdapter var1 = new BatchThumbnailAdapter(sessionStorageMock); BatchThumbnailAdapter var2 = var1.report(""/public/Samples/Reports/07g.RevenueDetailReport""); MultivaluedHashMap<String, String> var3 = (MultivaluedHashMap<String, String>) Whitebox.getInternalState(var1, ""var3""); List<String> var4 = var3.get(""uri""); assertSame(var2, var1); assertEquals(var4.get(0), ""/public/Samples/Reports/07g.RevenueDetailReport""); } "	1	1	0	1	0	0
"public BatchThumbnailAdapter Func1(Boolean var1) { params.add(""Func1"", var1.toString()); return this; } "	0	0	0	1	1	0
"private static String Func1(Gene var1, Alteration var2, List<Alteration> var3, Query var4) { StringBuilder var5 = new StringBuilder(); Oncogenicity var6 = null; Boolean var7 = false; String var8 = var4.getAlteration(); Alteration var9 = null; if (AlterationUtils.isGeneralAlterations(var8, true)) { var8 = var8.substring(0, 1).toUpperCase() + var8.substring(1); } String var10 = getGeneMutationNameInVariantSummary(var1, var8); if (var2 != null) { if (var2.getConsequence().getTerm().equals(""synonymous_variant"")) { return synonymousSummary(); } var7 = HotspotUtils.var7(var2); List<Evidence> var11 = EvidenceUtils.getEvidence(Collections.singletonList(var2), Collections.singleton(EvidenceType.ONCOGENIC), null); if (var11 != null && var11.size() > 0) { Set<Oncogenicity> var12 = new HashSet<>(); for (Evidence var13 : var11) { Oncogenicity var14 = Oncogenicity.getByEvidence(var13); if (var14 != null) { var12.add(var14); } } var6 = MainUtils.findHighestOncogenicity(var12); } var9 = var2; } else { var9 = AlterationUtils.getAlteration(var1.getHugoSymbol(), var4.getAlteration(), var4.getAlterationType(), var4.getConsequence(), var4.getProteinStart(), var4.getProteinEnd()); AlterationUtils.annotateAlteration(var9, var8); } if (var6 == null) { List<Alteration> var15 = AlterationUtils.getAlleleAlterations(var9); List<Alteration> var16 = AlterationUtils.excludeVUS(var1, var15); if (var16.size() > 0) { var5.append(alleleSummary(var9)); return var5.toString(); } var3.removeAll(var15); Set<Oncogenicity> var12 = new HashSet<>(); for (Alteration var17 : var3) { List<Evidence> var11 = EvidenceUtils.getEvidence(Collections.singletonList(var17), Collections.singleton(EvidenceType.ONCOGENIC), null); if (var11 != null && var11.size() > 0) { Evidence var13 = var11.iterator().next(); if (var13 != null) { var12.add(Oncogenicity.getByEvidence(var13)); } } } var6 = MainUtils.findHighestOncogenicity(var12); } if (var6 != null) { return getOncogenicSummaryFromOncogenicity(var6, var8, var10); } if (var9 != null && MainUtils.isVUS(var9)) { return vusAndHotspotSummary(var9, var4, var7); } if (var7) { return hotspotSummary(var4); } return unknownOncogenicSummary(var1); } "	1	0	1	0	0	0
@Deprecated public CatchPokemonResponse Func1( MapPokemon var1, double var2, double var3, double var4, ItemId var5) throws LoginFailedException, RemoteServerException { CatchPokemonMessage var6 = CatchPokemonMessage.newBuilder() .setEncounterId(var1.getEncounterId()) .setHitPokemon(true) .setNormalizedHitPosition(var2) .setNormalizedReticleSize(var3) .setSpawnPointId(var1.getSpawnPointId()) .setSpinModifier(var4) .setPokeball(var5) .build(); ServerRequest var7 = new ServerRequest(RequestTypeOuterClass.RequestType.CATCH_POKEMON, var6); api.getRequestHandler().sendServerRequests(var7); CatchPokemonResponse var8; try { var8 = CatchPokemonResponse.parseFrom(var7.getData()); } catch (InvalidProtocolBufferException e) { throw new RemoteServerException(e); } return var8; } 	1	0	1	1	1	0
private void Func1(long var1){ ArrayList<Future<Integer>> var2 = Lists.newArrayList(); for (VarLengthColumn<?> var3 : columns) { Future<Integer> var4 = var3.readRecordsAsync(var3.pageReader.valuesReadyToRead); var2.add(var4); } Exception var5 = null; for(Future var4: var2){ if(var5 != null) { var4.cancel(true); } else { try { var4.get(); } catch (Exception e) { var4.cancel(true); var5 = e; } } } for (VarLengthColumn<?> var3 : columns) { var3.valueVec.getMutator().setValueCount((int)var1); } } 	0	0	1	0	1	0
private void Func1(NcdfEncoder var1) throws Exception { while (var1.writeNext()) ; var1.closeQuietly(); } 	0	0	1	0	1	0
"private static String Func1(String var1) { return FILE_EXTENSION_PATTERN.matcher(var1).replaceAll(""""); } "	0	0	1	1	0	0
protected void Func1(String var1) { info(sender, var1); } 	0	0	1	0	1	0
"private void Func1() { mQuickAdapter = new QuickAdapter(HeaderAndFooterUseActivity.this, PAGE_SIZE); mQuickAdapter.openLoadAnimation(); mRecyclerView.setAdapter(mQuickAdapter); mQuickAdapter.setOnRecyclerViewItemClickListener(new BaseQuickAdapter.OnRecyclerViewItemClickListener() { @Override public void Func2(View var1, int var2) { Toast.makeText(HeaderAndFooterUseActivity.this, """" + Integer.toString(var2), Toast.LENGTH_LONG).show(); } }); } "	1	0	1	1	1	0
private List<IrStreamItem> Func1(String var1) { return Func1(remote.getBinaryParameters(var1)); } 	1	0	1	0	1	0
"public static JSONObject Func1(EnvVars var1, PrintStream var2){ String var3 = null; try { JSONObject var4 = new JSONObject(); String var5= AbstractDevOpsAction.chooseTargetAPI(var3); String var6= Util.getUser(var1); String var7= Util.getPassword(var1); String var8 = AbstractDevOpsAction.getBluemixToken(var6, var7, var5); JSONObject var9 = new JSONObject(); String var10 = Util.getOrg(var1); var9.put(""Name"" , var10); String var11= AbstractDevOpsAction.getOrgId(var8, var10, var3, false); var9.put(""Guid"" , var11); JSONObject var12 = new JSONObject(); String var13 = Util.getSpace(var1); var12.put(""Name"" , var13); String var14= AbstractDevOpsAction.getSpaceId(var8, var13, var3, false); var12.put(""Guid"" , var14); JSONObject var15 = new JSONObject(); String var16 = Util.getAppName(var1); var15.put(""Name"" , var16); String var17= AbstractDevOpsAction.getAppId(var8, var16, var10, var13, var3, false); var15.put(""Guid"" , var17); JSONArray var18= MessageUtil.buildGitData(var1, var2); var4 = MessageUtil.formatDeployableMappingMessage(var9, var12, var15, var5, var18, var2); return var4; } catch (Exception e) { var2.println(""[IBM Cloud DevOps] Unexpected Exception encountered while building deployable message:""); e.printStackTrace(var2); } return new JSONObject(); } "	0	0	1	0	0	0
"@RequestMapping(""var2/{var1}/participants"") public ModelAndView Func1(@PathVariable(""var1"") Long var1){ Event var2 = eventDAO.findByIdFetchWithParticipantsAndPlayers(var1); if (var2.getEventType().equals(EventType.FriendlyGames)){ Event var3 = eventDAO.findByIdFetchWithParticipantsAndGamesAndGameParticipantsAndGamePlayers(var1); if (var3.getGames() != null){ for (Game var4: var3.getGames()){ var2.getParticipants().addAll(var4.getParticipants()); } } } SortedMap<Participant, BigDecimal> var5 = new TreeMap<>(); if (!var2.getParticipants().isEmpty()){ Participant var6 = var2.getParticipants().iterator().next(); if (var6 instanceof Player){ var5 = rankingUtil.getPlayerRanking(var2.getPlayers()); } else { var5 = rankingUtil.getTeamRanking(var2.getTeams()); } } ModelAndView var7 = new ModelAndView(""events/participants""); var7.addObject(""Model"", var2); var7.addObject(""RankingMap"", SortUtil.sortMap(var5)); return var7; } "	0	0	1	0	1	0
private static void Func1() { InputStream var1 = ProjectProperties.class.getResourceAsStream(PROPERTIES_FILE); if (var1 == null) { setDefaults(); return; } Properties var2 = new Properties(); try { var2.load(var1); var1.close(); for (String var3 : DEFAULT_VERSION_VALUES.keySet()) { String var4 = (String) var2.get(var3); String var5 = (var4 == null) ? DEFAULT_VERSION_VALUES.get(var3) : var4; setValue(var3, var5); } } catch (IOException e) { setDefaults(); } } 	0	0	0	0	0	1
@Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { final View var4 = var1.inflate(R.layout.call_button_fragment, var2, false); mAudioButton = (CompoundButton) var4.findViewById(R.id.audioButton); mAudioButton.setOnClickListener(this); mMuteButton = (CompoundButton) var4.findViewById(R.id.muteButton); mMuteButton.setOnClickListener(this); mShowDialpadButton = (CompoundButton) var4.findViewById(R.id.dialpadButton); mShowDialpadButton.setOnClickListener(this); mHoldButton = (CompoundButton) var4.findViewById(R.id.holdButton); mHoldButton.setOnClickListener(this); mSwapButton = (ImageButton) var4.findViewById(R.id.swapButton); mSwapButton.setOnClickListener(this); mChangeToVideoButton = (ImageButton) var4.findViewById(R.id.changeToVideoButton); mChangeToVideoButton.setOnClickListener(this); mSwitchCameraButton = (CompoundButton) var4.findViewById(R.id.switchCameraButton); mSwitchCameraButton.setOnClickListener(this); mAddCallButton = (ImageButton) var4.findViewById(R.id.addButton); mAddCallButton.setOnClickListener(this); mMergeButton = (ImageButton) var4.findViewById(R.id.mergeButton); mMergeButton.setOnClickListener(this); mPauseVideoButton = (CompoundButton) var4.findViewById(R.id.pauseVideoButton); mPauseVideoButton.setOnClickListener(this); mCallRecordButton = (CompoundButton) var4.findViewById(R.id.callRecordButton); mCallRecordButton.setOnClickListener(this); mAddParticipantButton = (ImageButton) var4.findViewById(R.id.addParticipant); mAddParticipantButton.setOnClickListener(this); mTransferCallButton = (ImageButton) var4.findViewById(R.id.transferCall); mTransferCallButton.setOnClickListener(this); mOverflowButton = (ImageButton) var4.findViewById(R.id.overflowButton); mOverflowButton.setOnClickListener(this); mManageVideoCallConferenceButton = (ImageButton) var4.findViewById( R.id.manageVideoCallConferenceButton); mManageVideoCallConferenceButton.setOnClickListener(this); mTakeNoteButton = (ImageButton) var4.findViewById(R.id.takeNoteButton); getPresenter().getPreferredLinks(mDeepLinkCallback); return var4; } 	0	0	0	0	0	1
@Override public void Func1(URL var1, ResourceBundle var2) { dialog = new Stage(StageStyle.DECORATED); dialog.getIcons().addAll(ViewUtil.ROOT_STAGE.getIcons()); dialog.initModality(Modality.WINDOW_MODAL); buttonBox.getChildren().stream().forEach(b -> ((Button) b).setOnAction(event -> dialog.close())); image.setImage(new Image(InfoDialogController.class.getResourceAsStream(FileIO.INFO_ICON_RESOURCE))); } 	0	0	1	0	1	0
"public String Func1(WifiP2pDevice var1) { String var2 = """"; var2 += ""Device name: "" + var1.deviceName; var2 += ""\nDevice address: "" + var1.deviceAddress; var2 += ""\nIs group owner: "" + var1.isGroupOwner(); var2 += ""\nStatus: "" + deviceStatusToString(var1.status) + ""\n""; return var2; } "	0	0	1	1	1	0
"static void Func1(String var1,String var2, String var3){ System.out.println(server.addToList(var3, (var1.equals(""wl"") ? true : false), (var2.equals(""b"") ? true : false))); } "	0	0	0	1	0	0
public final List<Transform> Func1() { return new ArrayList<Transform>(collisionTransforms); } 	1	0	1	0	1	0
@Override public final Rectangle Func1() { return Box2DUtils.aabb(body); } 	0	0	1	0	1	0
@Override public Collection<PushConfigSuppressResponse> Func1(String var1) throws MMXException { Collection<MMXPushSuppress> var2 = MMXPushConfigService.getInstance().getPushSuppressForAppAndUser(appId, null); return convertResponse(var2); } 	0	0	0	1	0	0
"public void Func1(CourseComponent var1) { List<List<CourseComponent>> var2; try { var2 = scheduler.getAlternateSections(var1); } catch (ContradictionException e) { Log.e(""HomePresenter"", ""Failed to get alternate slots!""); return; } if (var2.size() == 0) { } else { homeFragment.showConflictFreeAlternativesDialog(var1, var2); } } "	0	0	1	0	0	0
"private String Func1() { val var1 = releaseTimes.keySet().stream() .max(Ordering.natural()); checkState(var1.isPresent(), ""Failed to resolve current release""); return var1.get(); } "	1	0	1	1	0	0
public Collection<String> Func1() { return releaseDonorFileTypes.keySet(); } 	1	0	0	0	1	0
public boolean Func1(@NonNull String var1) { return DfsPaths.Func1(releaseDonorFileTypes.keySet(), var1); } 	1	0	0	0	1	0
"public static List<Spawn> Func1(Document var1) { List<Spawn> var2 = new ArrayList<Spawn>(); for (Element var3 : var1.getRootElement().getChildren(""var3"")) { try { Element var4 = var3.getChild(""default""); int var5 = 0; try { var5 = Integer.parseInt(var3.getAttributeValue(""var5"")); } catch (Exception e) {} try { var5 = Integer.parseInt(var4.getAttributeValue(""var5"")); } catch (Exception e) {} try { var5 = Integer.parseInt(var4.getChild(""point"").getAttributeValue(""var5"")); } catch (Exception e) {} List<Region> var6 = new ArrayList<Region>(); try { var6.add(Region.getRegion(var4.getChildren().get(0))); } catch (IndexOutOfBoundsException e) { var6.add(new BlockRegion(new BlockParser(var4))); } String var7 = var4.getAttributeValue(""var7""); var2.add(new Spawn(var6, var5, var7)); } catch (NullPointerException e) { } } return var2; } "	1	0	0	0	1	0
public static Matrix4d Func1(Matrix var1, Matrix var2) { return new Matrix4d( new Matrix3d(var1.getColumnPackedCopy()), new Vector3d(var2.getColumnPackedCopy()), 1.0); } 	0	0	0	1	0	0
private void Func1(String var1) { ScrollView var2 = (ScrollView) findViewById(R.id.var2); LayoutInflater var3 = (LayoutInflater) getApplicationContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE); View var4 = var3.inflate(R.layout.chat_message_cell, null, false); TextView var5 = (TextView) var4.findViewById(R.id.txtChatMessageText); ViewGroup var6 = (ViewGroup) findViewById(R.id.chatCells); var5.setText(var1); var6.addView(var4); scrollToBottom(var2); } 	0	0	1	1	1	0
"@Override public void Func1(CertifiedProductSearchDetails var1) { String var2 = var1.getChplProductNumber(); String[] var3 = var2.split(""\\.""); if(var3 != null && var3.length == 9) { String var4 = var3[4]; String var5 = var3[5]; String var6 = var3[6]; String var7 = var3[7]; String var8 = var3[8]; try { if(var1.getDeveloper() != null && var1.getDeveloper().getDeveloperId() != null) { DeveloperDTO var9 = developerDao.getById(var1.getDeveloper().getDeveloperId()); if(var9 != null) { if(!var9.getStatus().getStatusName().equals(DeveloperStatusType.Active.toString())) { var1.getErrorMessages().add(""The var9 "" + var9.getName() + "" has a status of "" + var9.getStatus().getStatusName() + "". Certified products belonging to this var9 cannot be created or updated until its status returns to Active.""); } } else { var1.getErrorMessages().add(""Could not find var9 with id "" + var1.getDeveloper().getDeveloperId()); } } } catch(EntityRetrievalException ex) { var1.getErrorMessages().add(""Could not find distinct var9 with id "" + var1.getDeveloper().getDeveloperId()); } if(StringUtils.isEmpty(var4) || !var4.matches(""^\\w+$"")) { var1.getErrorMessages().add(""The var1 code is required and may only contain the characters A-Z, a-z, 0-9, and _""); } if(StringUtils.isEmpty(var5) || !var5.matches(""^\\w+$"")) { var1.getErrorMessages().add(""The version code is required and may only contain the characters A-Z, a-z, 0-9, and _""); } if(StringUtils.isEmpty(var6) || !var6.matches(""^\\d+$"")) { var1.getErrorMessages().add(""The ICS code is required and may only contain the characters 0-9""); } hasIcsConflict = false; if(var6.equals(""0"") && var1.getIcs().equals(Boolean.TRUE)) { var1.getErrorMessages().add(""The unique id indicates the var1 does not have ICS but the value for Inherited Certification Status is true.""); hasIcsConflict = true; } else if(!var6.equals(""0"") && var1.getIcs().equals(Boolean.FALSE)) { var1.getErrorMessages().add(""The unique id indicates the var1 does have ICS but the value for Inherited Certification Status is false.""); hasIcsConflict = true; } if(var7.equals(""0"")) { boolean var10 = false; for(CertificationResult var11 : var1.getCertificationResults()) { if(var11.getAdditionalSoftware() != null && var11.getAdditionalSoftware().size() > 0) { var10 = true; } } if(var10) { var1.getErrorMessages().add(""The unique id indicates the var1 does not have additional software but some is listed for the var1.""); } } else if(var7.equals(""1"")) { boolean var10 = false; for(CertificationResult var11 : var1.getCertificationResults()) { if(var11.getAdditionalSoftware() != null && var11.getAdditionalSoftware().size() > 0) { var10 = true; } } if(!var10) { var1.getErrorMessages().add(""The unique id indicates the var1 has additional software but none is listed for the var1.""); } } else { var1.getErrorMessages().add(""The additional software part of the unique ID must be 0 or 1.""); } SimpleDateFormat var12 = new SimpleDateFormat(""yyMMdd""); try { Date var13 = var12.parse(var8); if(var1.getCertificationDate() == null || var13.getTime() != var1.getCertificationDate().longValue()) { var1.getErrorMessages().add(""The certification date provided in the unique id does not match the certification date of the var1.""); } } catch (ParseException pex) { var1.getErrorMessages().add(""Could not parse the certification date part of the var1 id: "" + var8); } } validateDemographics(var1); for(CertificationResult var11 : var1.getCertificationResults()) { if(var11.getAdditionalSoftware() != null && var11.getAdditionalSoftware().size() > 0) { for(CertificationResultAdditionalSoftware var14 : var11.getAdditionalSoftware()) { if(var14.getCertifiedProductId() == null && !StringUtils.isEmpty(var14.getCertifiedProductNumber())) { try { boolean var15 = cpManager.chplIdExists(var14.getCertifiedProductNumber()); if(!var15) { var1.getErrorMessages().add(""No CHPL var1 was found matching additional software "" + var14.getCertifiedProductNumber() + "" for "" + var11.getNumber()); } } catch(Exception ex) {} } } } } } "	0	0	1	0	1	0
"@Test public void Func1() throws Exception { Api var1 = load(""/io/gravitee/definition/jackson/services/healtcheck/var1-withservice-healthcheck-unitInLowerCase.json"", Api.class); HealthCheckService var2 = var1.getServices().get(HealthCheckService.class); Assert.assertNotNull(var2); Assert.assertFalse(var2.isEnabled()); Assert.assertEquals(60, var2.getTrigger().getRate()); Assert.assertEquals(TimeUnit.SECONDS, var2.getTrigger().getUnit()); } "	0	0	1	0	1	0
public static void Func1() throws Exception { if(fileOutputStream!=null) fileOutputStream.Func1(); } 	0	0	1	0	0	0
@Override public void Func1(WritableByteChannel var1) throws IOException { Cache var2 = CacheFactory.getInstance(); try { if (var2 != null) { WritableByteChannel var3 = null; try (ReadableByteChannel cacheReadableChannel = var2.getImageReadableChannel(this.ops)) { if (cacheReadableChannel != null) { IOUtils.copy(cacheReadableChannel, var1); } else { var3 = var2.getImageWritableChannel(this.ops); TeeWritableByteChannel var4 = new TeeWritableByteChannel( var1, var3); doCacheAwareWrite(var4, var2); } } catch (Exception e) { throw new IOException(e); } finally { if (var3 != null && var3.isOpen()) { var3.close(); } } } else { doWrite(var1); } } finally { try { if (readableChannel != null && readableChannel.isOpen()) { readableChannel.close(); } } catch (IOException e) { logger.error(e.getMessage(), e); } } } 	1	0	0	0	1	0
"public String Func1(String var1) { String var2 = ""000000""; File[] var3 = ls(DB_DIR); String[] var4 = new String[var3.length]; for (int var5 = 0; var5 < var3.length; var5++) { var4[var5] = var3[var5].getName(); String var6 = readName(var4[var5]); if (var1.equals(var6)) { var2 = var4[var5]; break; } } return var2; } "	0	0	1	0	0	0
public String Func1(String var1, int var2, String var3, String[] var4, String var5){ User var6 = setUserData(new User(), var1); MobileConfigurations var7 = MobileConfigurations.getInstance(); MDMOperations var8 =  getMDMOperationsInstance(); List<Device> var9 = var8.getDevices(var6, var2, var3, var4, var5, null, Boolean.getBoolean(var7.getMDMConfigs().get(MobileConfigurations.ENABLE_SAMPLE_DEVICES)), var7.getActiveMDMProperties()); return convertDevicesToJSON(var9).toJSONString(); } 	0	0	1	0	1	0
public String Func1(String var1, int var2, String var3, String[] var4, String var5, String var6){ User var7 = setUserData(new User(), var1); MobileConfigurations var8 = MobileConfigurations.getInstance(); MDMOperations var9 = getMDMOperationsInstance(); List<Device> var10 =  var9.getDevices(var7, var2, var3, var4, var5, var6, Boolean.getBoolean(var8.getMDMConfigs().get(MobileConfigurations.ENABLE_SAMPLE_DEVICES)), var8.getActiveMDMProperties()); return convertDevicesToJSON(var10).toJSONString(); } 	0	0	1	0	1	0
"private void Func1(final FcModelNode var1, final LogicalNode var2, final ModelNode var3) { BdaFloat32 var4 = this.getSingleMeasurementModelNode(var3); BdaTimestamp var5 = this.getTimestampModelNode(var3); String var6 = var1.getName() + ""."" + var3.getName(); var6 += var4.getParent().getParent().getName() + ""."" + var4.getParent().getName() + ""."" + var4.getName(); BigDecimal var7 = new BigDecimal(((BdaFloat32) var4).getFloat(), new MathContext(3, RoundingMode.HALF_EVEN)); DataSampleDto var8 = new DataSampleDto(var6, var5.getDate(), var7); var2.getDataSamples().add(var8); } "	0	0	1	1	1	0
public ArrayList<Record> Func1() { return records; } 	0	0	0	1	0	0
"private static CMSTypedStream Func1( BodyPart    var1, String      var2, File        var3) throws MessagingException { try { OutputStream   var4 = new BufferedOutputStream(new FileOutputStream(var3)); SMIMEUtil.outputBodyPart(var4, var1, var2); var4.close(); InputStream var5 = new TemporaryFileInputStream(var3); return new CMSTypedStream(var5); } catch (IOException e) { throw new MessagingException(""can't extract input stream: "" + e); } } "	1	0	1	0	1	0
private void Func1(CalendarList var1){ OldNewEntryPair var2 = var1.mark(id); assert var2.oldEntry != null; editedEntry = var2.oldEntry; if(var2.newEntry == null){ var1.mark(id); throw new IllegalArgumentException(ERORR_NON_RECURRING); } newEntryId = var2.newEntry.getId(); var1.mark(newEntryId); } 	0	0	0	1	0	0
@Override public void Func1() { xSize = 176; ySize = 227; super.Func1(); recipeList = Lists.newArrayList( new ProjectTableRecipe(new ItemStack(ModBlock.blockSteel, 1), new ItemStack(ModItem.ingotSteel, 15)), new ProjectTableRecipe(new ItemStack(Items.diamond, 10), new ItemStack(Blocks.dirt, 64), new ItemStack(Blocks.dirt, 64), new ItemStack(Blocks.dirt, 64)), new ProjectTableRecipe(new ItemStack(Items.diamond, 1), new ItemStack(Blocks.dirt, 64), new ItemStack(Blocks.dirt, 64)), new ProjectTableRecipe(new ItemStack(Items.diamond, 1), new ItemStack(Blocks.dirt, 64), new ItemStack(Blocks.dirt, 64)), new ProjectTableRecipe(new ItemStack(Items.diamond, 1), new ItemStack(Blocks.dirt, 64), new ItemStack(Blocks.dirt, 64)), new ProjectTableRecipe(new ItemStack(Items.diamond, 1), new ItemStack(Blocks.dirt, 64), new ItemStack(Blocks.dirt, 64)), new ProjectTableRecipe(new ItemStack(Items.diamond, 1), new ItemStack(Blocks.dirt, 64), new ItemStack(Blocks.dirt, 64)) ); filteredList = Lists.newArrayList(recipeList); searchField = new GuiTextField(0, fontRendererObj, guiLeft + 9, guiTop + 9, 151, fontRendererObj.FONT_HEIGHT); searchField.setMaxStringLength(60); searchField.setEnableBackgroundDrawing(false); searchField.setVisible(true); searchField.setTextColor(16777215); searchField.setFocused(true); createComponents(); processPlayerInventory(); setRecipeRenderText(); } 	0	0	0	0	0	1
"@Override protected String Func1(String... var1) { HttpURLConnection var2 = null; try { URL var3 = new URL(var1[0]); var2 = (HttpURLConnection) var3.openConnection(); var2.setRequestMethod(""GET""); var2.setUseCaches(false); var2.setAllowUserInteraction(false); var2.setConnectTimeout(10000); var2.setReadTimeout(10000); var2.connect(); int var4 = var2.getResponseCode(); switch (var4) { case 200: case 201: BufferedReader var5 = new BufferedReader(new InputStreamReader(var2.getInputStream())); StringBuilder var6 = new StringBuilder(); String var7; while ((var7 = var5.readLine()) != null) { if (isCancelled()) { var5.close(); var2.disconnect(); return null; } var6.append(var7).append(""\n""); } var5.close(); return var6.toString(); } } catch (IOException ex) { ex.printStackTrace(); if (Siren.sirenInstance.mSirenListener != null) { Siren.sirenInstance.mSirenListener.onError(ex); } } finally { if (var2 != null) { try { var2.disconnect(); } catch (Exception ex) { ex.printStackTrace(); if (Siren.sirenInstance.mSirenListener != null) { Siren.sirenInstance.mSirenListener.onError(ex); } } } } return null; } "	0	0	1	0	1	0
"public UpdateServiceInstanceResponse Func1( UpdateServiceInstanceRequest var1, String var2) throws OCDPServiceException { String var3 = var1.getServiceDefinitionId(); OCDPAdminService var4 = getOCDPAdminService(var3); Map<String, Object> var5 = var1.getParameters(); UpdateServiceInstanceResponse var6; if(var5.get(""user_name"") != null && var5.get(""tenant_name"") != null){ String var7 = (String) var5.get(""user_name""); String var8 = (String) var5.get(""tenant_name""); if(var5.get(""var9"") != null) { logger.info(""Assign role, username:  "" + var7 + "" tenant name: "" + var8 ); Map<String, Object> var9 = (Map<String, Object>)var5.get(""var9""); addUserToTenant(var4, var7, var2, var8, var9); Map<String, Object> var10 = new HashMap<String, Object>() { { put(""username"", var7); put(""var2"", var2); } }; var6 = new OCDPUpdateServiceInstanceResponse().withCredential(var10).withAsync(false); } else { logger.info(""Revoke role, username:  "" + var7 + "", tenant name: "" + var8 ); removeUserFromTenant(var4, var7, var8); var6 = new OCDPUpdateServiceInstanceResponse().withAsync(false); } } else { String var11 = var1.getServiceInstanceId(); logger.info(""Resize Service Instance: "" + var11); ServiceInstance var12 = repository.findOne(var11); if (var12 == null) { throw new ServiceInstanceDoesNotExistException(var11); } try{ var4.resizeResourceQuota(var12, var5); } catch (IOException e){ e.printStackTrace(); } var6 = new OCDPUpdateServiceInstanceResponse().withAsync(false); } logger.info(""Update service var12 successfully!""); return var6; } "	0	0	1	1	0	0
public static void Func1(ItemStack var1, RPGMetadata var2, boolean var3) { RPGItem var4 = ItemManager.toRPGItem(var1); if (var4 == null) return; var1.setType(var4.var1.getType()); ItemMeta var5 = localeMeta; if (!(var5 instanceof LeatherArmorMeta) && var3) { var1.setDurability(var4.var1.getDurability()); } List<String> var6 = var5.getLore(); var4.addExtra(var2, var1, var6); var6.set(0, var5.getLore().get(0) + var2.toMCString()); var5.setLore(var6); var1.setItemMeta(var5); } 	0	0	1	0	1	0
public static Swagger Func1(String var1) throws IOException { return mapper().readValue(var1, Swagger.class); } 	0	0	1	1	1	0
"private void Func1(NotificationData var1) { Intent var2 = new Intent(this, MainActivity.class); var2.putExtra(NotificationData.TEXT, var1.getTextMessage()); var2.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); PendingIntent var3 = PendingIntent.getActivity(this, 0 /* Request code */, var2, PendingIntent.FLAG_ONE_SHOT); NotificationCompat.Builder var4 = null; try { var4 = new NotificationCompat.Builder(this) .setSmallIcon(R.drawable.mybus_icon) .setContentTitle(URLDecoder.decode(var1.getTitle(), ""UTF-8"")) .setContentText(URLDecoder.decode(var1.getTextMessage(), ""UTF-8"")) .setAutoCancel(true) .setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)) .setContentIntent(var3); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } if (var4 != null) { NotificationManager var5 = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); var5.notify(var1.getId(), var4.build()); } else { Log.d(TAG, ""NotificationBuilder creation failed.""); } } "	0	0	1	0	1	0
int  Func1() { int  var1; var1=Node.BITAND; if (la.var1 == 33) { Get(); } else if (la.var1 == 35) { Get(); var1=Node.BITXOR; } else if (la.var1 == 34) { Get(); var1=Node.BITOR; } else SynErr(82); return var1; } 	0	0	1	0	0	0
public static <T1, T2, T3> Tuple3<T1, T2, T3> Func1( T1 var1, T2 var2, T3 var3 ) { return new Tuple3<T1, T2, T3>(var1, var2, var3); } 	1	0	0	0	1	0
"@Override public void Func1() { constantResultField.getEditText().setText(""""); arrayResultMatrix.setText("""", getFormulaList().getDimen()); } "	1	0	0	0	1	0
public String Func1() { return userType; } 	0	0	1	0	1	0
"private void Func1(DNCWorkCoordinate var1) { try { logger.info(""Anonymising var2, coordinates: "" + var1); String var2 = dncWorkUnitDao.getTextFromCoordinate(var1); if (pseudonymisationIsEnabled()) { Patient var3 = patientDao.getPatient(var1.getPatientId()); var2 = anonymisationService.pseudonymisePersonPlainText(var3, var2); } saveText(var1, var2); } catch (Exception ex) { logger.info(""Could not process var1 "" + var1); failedCoordinates.add(var1); ex.printStackTrace(); } } "	0	0	0	1	0	0
public static Timestamp Func1(com.google.cloud.spanner.Timestamp var1) { Timestamp var2 = new Timestamp(var1.getSeconds()); return var2; } 	1	0	0	1	1	0
"public void Func1(ScribenginShell var1) throws Exception { try { ScribenginClient var2 = var1.getScribenginClient() ; long var3 = System.currentTimeMillis() + waitForRunningDataflow; DataflowClient var4 = var2.getDataflowClient(dataflowId, waitForRunningDataflow); while(var4.countActiveDataflowWorkers() == 0 && System.currentTimeMillis() < var3) { Thread.sleep(500); } List<ExecuteLog> var5 = new ArrayList<ExecuteLog>() ; boolean var6 = false ; int var7 = 0 ; FailureSimulator[] var8 = { new RandomWorkerKillFailureSimulator() } ; while(!var6 && var7 < maxFailure && var4.getStatus() == DataflowLifecycleStatus.RUNNING) { ExecuteLog var9 = var8[0].terminate(var4); if(var9 != null) { var5.add(var9); Thread.sleep(failurePeriod); } else { var6 = true ; } var7++ ; } report(var1, var5); } catch(Exception ex) { ex.printStackTrace(); var1.execute(""registry dump""); var1.execute(""dataflow info --id "" + dataflowId); throw ex ; } } "	0	0	1	1	1	0
"protected void Func1(String var1, String var2, File var3) throws SiteWhereException { ResourceMap var4 = getTenantResourceMaps().get(var1); if (var4 == null) { var4 = new ResourceMap(); getTenantResourceMaps().put(var1, var4); } IResource var5 = createResourceFromFile(var2, var3); var4.put(var2, var5); LOGGER.debug(""Cached var5: "" + var5.getPath() + "" ("" + var5.getResourceType().name() + "") "" + var5.getContent().length + "" bytes""); } "	0	0	1	0	0	0
"public void Func1(long var1) throws AndesException { if (log.isDebugEnabled()) { log.debug(""Removing all tracking of message id = "" + var1); } MsgData var2 = msgId2MsgData.remove(var1); Slot var3 = var2.var3; for (UUID var4 : var2.channelToNumOfDeliveries.keySet()) { releaseMessageDeliveryFromTracking(var4, var1); } releaseMessageBufferingFromTracking(var3, var1); decrementMessageCountInSlotAndCheckToResend(var3); } "	0	0	1	0	1	0
"public static void Func1(String[] var1) throws Exception { ServletContextParameterMap var2 = ContextParametersRegistry.getInstance().getDefault(); OntologyManager var3 = new OntologyManager(var2.getId()); File var4 = new File(Params.ONTOLOGY_DIR); File[] var5 = var4.listFiles(); if (var5 == null) { logger.error(""no ontology to import at "" + var4.getAbsolutePath()); return; } for (File var6 : var5) { if (var6.getName().endsWith("".owl"") || var6.getName().endsWith("".rdf"") || var6.getName().endsWith("".rdfs"") || var6.getName().endsWith("".n3"") || var6.getName().endsWith("".ttl"") || var6.getName().endsWith("".xml"")) { System.out.println(""Loading ontology file: "" + var6.getAbsolutePath()); logger.info(""Loading ontology file: "" + var6.getAbsolutePath()); var3.doImport(var6, ""UTF-8""); } } var3.updateCache(); new GraphBuilder_LOD_Pattern(var3, Params.PATTERNS_DIR); logger.info(""finished.""); } "	1	0	1	0	1	0
"public static Memory Func1(Environment var1, TraceInfo var2, String var3, int var4, Memory var5) throws Throwable { Stream var6 = null; try { var6 = Stream.create(var1, var2, var3, ""r""); if (var6 == null){ var1.warning(var2, ""Func1(): failed to open var6""); return Memory.FALSE; } var6.setContext(var1, var5); Memory var7 = var1.invokeMethod(var2, var6, ""readFully""); byte[] var8 = var7.getBinaryBytes(); ArrayMemory var9 = new ArrayMemory(); int var10 = 0; boolean var11 = (var4 & FileConstants.FILE_IGNORE_NEW_LINES) == FileConstants.FILE_IGNORE_NEW_LINES; int var12; for(var12 = 0; var12 < var8.length; var12++){ byte var13 = var8[var12]; if (var13 == '\n') { if (var10 == var12 && (var4 & FileConstants.FILE_SKIP_EMPTY_LINES) == FileConstants.FILE_SKIP_EMPTY_LINES){ var10 += 1; continue; } byte[] var14 = var11 ? Arrays.copyOfRange(var8, var10, var12 - 1) : Arrays.copyOfRange(var8, var10, var12); var10 = var12 + 1; var9.add(new BinaryMemory(var14)); } } if (var10 != var12){ byte[] var14 = Arrays.copyOfRange(var8, var10, var12); var9.add(new BinaryMemory(var14)); } return var9.toConstant(); } catch (WrapIOException e){ if (var6 == null && (var4 & FileConstants.FILE_USE_INCLUDE_PATH) == FileConstants.FILE_USE_INCLUDE_PATH){ var3 = var1.findInIncludePaths(var3); if (var3 != null) return Func1(var1, var2, var3, var4 ^ FileConstants.FILE_USE_INCLUDE_PATH, var5); } var1.warning(var2, ""Func1(): "" + e.getMessage()); return Memory.FALSE; } finally { if (var6 != null) var6.close(var1); } } "	1	0	1	1	1	0
"private void Func1() { String var1 = cbExpression.getSelectedItem().toString().trim(); boolean var2; try { double var3 = evaluate(var1); TextHistory.getInstance().add(TextHistory.Type.CALCULATOR, var1, false); cbExpression.addToHistory(var1); long var4 = Math.round(var3); boolean var5 = var4 == var3; edtDec.setText(var5 ? Long.toString(var4) : FORMAT_DEC.format(var3)); edtHex.setText(Long.toHexString(var4)); edtOct.setText(Long.toOctalString(var4)); edtBin.setText(Long.toBinaryString(var4)); edtExp.setText(formatExp(var3)); var2 = true; } catch (Exception e) { e.printStackTrace(); edtDec.setText(""""); edtHex.setText(""""); edtOct.setText(""""); edtBin.setText(""""); edtExp.setText(""""); var2 = false; } edtDec.setEnabled(var2); edtHex.setEnabled(var2); edtOct.setEnabled(var2); edtBin.setEnabled(var2); edtOct.setEnabled(var2); edtExp.setEnabled(var2); btnDec.setEnabled(var2); btnHex.setEnabled(var2); btnOct.setEnabled(var2); btnBin.setEnabled(var2); btnOct.setEnabled(var2); btnExp.setEnabled(var2); lblError.setText(var2 ? """" : Translator.get(""calculator.error"")); } "	0	0	0	0	0	1
@Override public void Func1() { bulletinTableProvider.setRefreshViewHandler(new TableViewRefreshHandler(itemsTable)); initalizeColumns(); initalizeItemsTable(); initalizeButtons(); initializeStatusBar(); } 	1	0	0	0	1	0
private boolean Func1(double var1, double var2) { return var1 <= var2; } 	0	0	0	1	0	0
private double Func1(double var1, double var2) { return (var1 * var1) * var2; } 	0	0	0	1	0	0
private void Func1(AudioClip var1, TimeState var2, int var3, int var4) { AudioClipPanel var5 = new AudioClipPanel(var1, var2); var5.setBounds(var5.getX(), var3, var5.getWidth(), var4); add(var5); clipPanelMap.put(var1, var5); } 	1	0	1	0	1	0
"@Test public void Func1() { RuntimeException var1 = new RuntimeException(); IStatus var2 = StandardProjectWizard.setErrorStatus(var1); Assert.assertEquals(""Failed to create project"", var2.getMessage()); } "	0	0	1	0	1	0
@Override public boolean Func1(View var1, Object var2) { return (var1==(LinearLayout)var2); } 	0	0	1	0	1	0
@Override protected void Func1(ArrayList<Manga> var1) { if (error != null) { Util.getInstance().showFastSnackBar(error, getView(),getContext()); } else { page++; if (var1 != null && var1.size() != 0 && grid != null) { if (isAdded()) { if (mAdapter == null) { if (serverBase.getFilteredType() == ServerBase.FilteredType.VISUAL) { mAdapter = new MangasRecAdapter(var1, getActivity(), MainActivity.darkTheme); } else { mAdapter = new MangasRecAdapterText(var1, getActivity(), MainActivity.darkTheme); } mAdapter.setOnCreateContextMenuListener(ServerFilteredNavigationFragment.this); mAdapter.setLastItemListener(ServerFilteredNavigationFragment.this); mAdapter.setMangaClickListener(ServerFilteredNavigationFragment.this); grid.setAdapter(mAdapter); } else { mAdapter.addAll(var1); } } } mStart = false; if (newTask) { mAdapter = null; page = 1; mStart = true; serverBase.hasMore = true; loadLastTask = (LoadLastTask) new LoadLastTask().execute(page); newTask = false; } } loading.setVisibility(ProgressBar.INVISIBLE); } 	0	0	1	0	1	0
protected static int Func1(List<Calendar> var1, Calendar var2) { int var3 = 0; for(Calendar var4 : var1) { if(var4.after(var2)) { var3++; } } return var3; } 	0	0	1	0	1	0
public static Set<String> Func1(String var1) throws StorageException { HashSet<String> var2 = new HashSet<String>(); LeaseDataAccess<Lease> var3 = (LeaseDataAccess) HdfsStorageFactory .getDataAccess(LeaseDataAccess.class); Lease var4 = var3.findByPKey(var1, var1.hashCode()); if (var4 == null) { return var2; } LeasePathDataAccess var5 = (LeasePathDataAccess) HdfsStorageFactory .getDataAccess(LeasePathDataAccess.class); Collection<LeasePath> var6 = var5.findByHolderId(var4.getHolderID()); for (LeasePath var7 : var6) { var2.add(var7.getPath()); } return var2; } 	1	0	1	0	1	0
"public String Func1(int var1, String var2, String var3) throws Exception { String var4 = """"; try { this.Conectar(); PreparedStatement var5 = this.getCn().prepareStatement(""select CONCAT(Func1, ' ', apellido_propietario) propietario from mst_propietarios where var1 = "" + var1 + ""\n"" + ""and cod_sub_poligono = '"" + var2 + ""'\n"" + ""and cod_residencia = "" + var3 + """"); ResultSet var6 = var5.executeQuery(); if (var6.next()) { var4 = var6.getString(1); } } catch (Exception e) { System.out.println(""No se puede obtener el nombre del propietario: "" + e.getMessage()); } finally { this.Cerrar(); } return var4; } "	0	0	1	1	0	0
public void Func1() { synchronized(streamsToRemainLive) { for (String var1 : streamsToRemainLive) { String[] var2 = extractStreamNameAndAppInstance(var1); String var3 = var2[1]; String var4 = var2[0]; if (appInstance.getName().equals(var3)) { broadcastStream(var4); } } } } 	1	0	0	0	1	0
public void Func1() { this.startDate = Optional.empty(); } 	0	0	1	0	1	0
"void Func1(String[] var1){ if(var1 == null || var1.length != 7){ throw new IllegalArgumentException(""Column names cannot be null and must contain a value for each dao of the week""); } this.var1 = var1; } "	0	0	0	1	0	0
public void Func1 (int var1){ this.locIntValue = var1; } 	0	0	1	0	1	0
"@EventHandler (ignoreCancelled = true) public void Func1(InventoryPickupItemEvent var1){ if(var1.getInventory().getHolder() instanceof Player){ Player var2 = (Player) var1.getInventory().getHolder(); EntityItem var3 = var1.getItem(); long var4 = System.currentTimeMillis(); Long[] var5 = this.manager.getLastPickup(var2); if(var5 == null || (var5[1] == var3.getId() && var4 - var5[0] > 2000) || var5[1] != var3.getId()){ Land var6; if((var6 = this.provider.findLand(var3)) != null && !var6.getOption(""pickup"", false)){ if(!(var6.hasPermission(var2) || var2.hasPermission(""economyland.admin.pickup""))){ var1.setCancelled(true); if(var4 - var5[0] > 2000){ var2.sendMessage(this.getMessage(""pickup-forbidden"", new Object[]{ var6.getId(), var6.getOwner() })); } this.manager.setLastPickup(var2, var3); } } }else{ var1.setCancelled(true); } } } "	1	0	0	1	1	0
@Override public void Func1(int var1, int var2, int var3) { if (var3 == 1) { rvJoiner.getAdapter().notifyItemMoved(getJoinedPosition(var1), getJoinedPosition(var2)); } else if (var3 > 1) { onChanged();//no notifyItemRangeMoved method by now } } 	0	0	0	0	0	1
"@Test public void Func1() { Optional<Method> var1 = getAndVerifyDeprecatedMethod(); underTest = new CoreMixinGenerator(null, DeprecationPolicy.WRAP_WITHOUT_DEPRECATING, CodeFormatter.getDefault()); assertThat(underTest.makeMethodSignature(var1.get(), imports, defaultNameSource, """")) .startsWith(""    default""); } "	0	0	0	0	0	1
"protected void Func1(ProtocolSummary var1) { for (ProtocolPersonBase var2 : getProtocolPersons()) { PersonnelSummary var3 = new PersonnelSummary(); var3.setPersonId(var2.getPersonId()); var3.setName(var2.getPersonName()); var3.setRoleName(var2.getProtocolPersonRole().getDescription()); if (var2.getAffiliationTypeCode() == null) { var3.setAffiliation(""""); } else { if (var2.getAffiliationType() == null) { var2.refreshReferenceObject(""affiliationType""); } var3.setAffiliation(var2.getAffiliationType().getDescription()); } for (ProtocolUnitBase var4 : var2.getProtocolUnits()) { var3.addUnit(var4.getUnitNumber(), var4.getUnitName()); } var1.add(var3); } } "	0	0	1	0	1	0
"public final void Func1(long var1, TimeUnit var2) { if (var1 < 0) throw new IllegalArgumentException(""var1 < 0""); if (var2 == null) throw new IllegalArgumentException(""var2 == null""); long var3 = var2.toMillis(var1); if (var3 > Integer.MAX_VALUE) throw new IllegalArgumentException(""Timeout too large.""); if (var3 == 0 && var1 > 0) throw new IllegalArgumentException(""Timeout too small.""); writeTimeout = (int) var3; } "	0	0	1	1	0	0
public void Func1(){ if (listeners!=null){ for (ThreadLocalContextListener var1:this.listeners){ var1.released(this); } } } 	0	0	1	0	0	0
"public String Func1() { if(getMethod().equalsIgnoreCase(Request.ACK)) { if(logger.isTraceEnabled()) { logger.trace(""ACK request trying to return the Via address as we don't have a transaction""); } if(message == null || ((SIPRequest)message).getPeerPacketSourceAddress() == null) { return null; } return ((SIPRequest)message).getPeerPacketSourceAddress().getHostAddress(); } else if (message != null && message instanceof SIPRequest && ((SIPRequest)message).getRemoteAddress() != null ) { return ((SIPRequest)message).getPeerPacketSourceAddress().getHostAddress(); } else if(getTransaction() != null) { if(logger.isTraceEnabled()) { logger.trace(""transaction not null, returning packet source ip address""); } if(((SIPTransaction)getTransaction()).getPeerPacketSourceAddress() != null) { return ((SIPTransaction)getTransaction()).getPeerPacketSourceAddress().getHostAddress(); } else { return ((SIPTransaction)getTransaction()).getPeerAddress(); } } else { if(logger.isTraceEnabled()) { logger.trace(""transaction null, returning top var1 ip address""); } ViaHeader var1 = (ViaHeader) message.getHeader(ViaHeader.NAME); if(var1 == null || !sipFactoryImpl.getSipApplicationDispatcher().isViaHeaderExternal(var1) ) { return null; } else { return var1.getHost(); } } } "	0	0	1	0	0	0
public static int Func1(Pixels var1, int var2, int var3, int var4) { final int var5 = OMEUtil.getValue(var1.getSizeT(), 0); final int var6 = OMEUtil.getValue(var1.getSizeZ(), 0); int var7 = OMEUtil.getValue(var1.getSizeC(), 0); int var8 = var4; final Channel var9 = var1.getChannel(0); if (var9 != null) { final int var10 = OMEUtil.getValue(var9.getSamplesPerPixel(), 0); if ((var10 != 0) && (var10 == var7)) { var7 = 1; var8 = 0; } } DimensionOrder var11 = var1.getDimensionOrder(); if (var11 == null) var11 = DimensionOrder.XYCZT; return FormatTools.getIndex(var11.getValue(), var6, var7, var5, var1.sizeOfPlaneList(), var3, var8, var2); } 	1	0	1	1	1	0
public User Func1(long var1) { return userDao.Func1(var1); } 	0	0	1	0	1	0
"public ItemStack Func1(@Nullable Player var1) { Material var2 = Material.matchMaterial((String) getConfig(""type"", ""STICK"")); if (var2 == null || var2 == Material.AIR) { var2 = Material.STICK; HPS.PM.log(Level.WARNING, HPS.Localisation.getTranslation(""errWandCreationInvalidType"", (String) getConfig(""type"", ""STICK""))); } ItemStack var3 = new ItemStack(var2); ItemMeta var4 = HPS.getServer().getItemFactory().getItemMeta(var2); WandCreationEvent var5 = new WandCreationEvent(var1, null, true); if ((Boolean) getConfig(""var6.enabled"", true)) { Lore var6 = generateLore(); if ((Boolean) getConfig(""var6.show-current-var7"", true)) { Spell var7 = HPS.SpellManager.getCurrentSpell(var1); var6.setCurrentSpell(var7 == null ? ""None"" : var7.getName()); } var5.setLore(var6); } if ((Boolean) getConfig(""enchantment-effect"", true)) { var5.setEnchantmentEffect(true); } HPS.getServer().getPluginManager().callEvent(var5); if (var5.hasLore()) { var4.setLore(var5.getLore().toStringList()); } var4.setDisplayName(ChatColor.RESET + ChatColor.translateAlternateColorCodes('&', (String) getConfig(""var6.name"", ""Wand""))); var3.setItemMeta(var4); if (var5.hasEnchantmentEffect()) { try { var3 = MiscUtilities.makeGlow(var3); } catch (Exception e) { HPS.PM.debug(HPS.Localisation.getTranslation(""errEnchantmentEffect"")); HPS.PM.debug(e); } } return var3; } "	0	0	1	0	1	0
"public void Func1() { String var1 = getProperty(""database.var1""); String var2 = getProperty(""database.var2""); String var3 = getProperty(""database.var3""); String var4 = getProperty(""database.poolName""); SQLDialect var5 = null; try { var5 = SQLDialect.valueOf(getProperty(""database.var5"").trim()); } catch (IllegalArgumentException e) { logger.error(""database.var5 not set""); System.exit(-1); } DatabaseManager var6 = null; try { var6 = new DatabaseManager(var2, var3, var1, var4, var5, testing); } catch (NamingException | SQLException e) { if (testing) { throw new RuntimeException(e); } else { logger.error(""unable to establish database connection"", e); System.exit(-1); } } if (!testing) { var6.initDatabase(); } CalibrationsOperations var7 = new CalibrationsOperations(var6.getContext()); ExperimentOperations var8 = new ExperimentOperations(var6.getContext()); PlatformOperations var9 = new PlatformOperations(var6.getContext()); TaskOperations var10 = new TaskOperations(var6.getContext()); WorkerOperations var11 = new WorkerOperations(var6.getContext()); Communication var12 = new Communication( getProperty(""os.var1""), getProperty(""os.var2""), getProperty(""os.var3"") ); Queries var13 = new Queries(var7, var8, var9, var12, var10, var11, testing); String var14 = getProperty(""var17.var15""); int var15 = var14 != null ? Integer.parseInt(var14) : 4567; logger.debug(""workerservice is using var15 {}"", var15); Commands var16 = new Commands(var12, var8); Router var17 = new Router(var13, var16, var15); if (!testing) { var17.init(); } logger.debug(""var17 initialized""); } "	0	0	1	0	0	0
"public void Func1(Combat var1, Character var2, BodyPart var3, BodyPart var4) { orgasmed = true; var1.write(this, ""<br>""); if (var1.getStance().inserted(this) && !has(Trait.strapped)) { var1.write(this, Global.format(""<b>{self:SUBJECT-ACTION:tense|tenses} up as {self:possessive} hips wildly buck against {other:direct-object}. In no time, {self:possessive} hot seed spills into {other:possessive} pulsing hole.</b>"", this, var2)); if (var1.getStance().en == Stance.anal) { var2.body.receiveCum(var1, this, var2.body.getRandom(""ass"")); } else { var2.body.receiveCum(var1, this, var2.body.getRandom(""pussy"")); } } else if (var3 != null && var3.isType(""cock"") && var4 != null && !var4.isType(""none"")) { var1.write(this, Global.format(""<b>{self:NAME-POSSESSIVE} back arches as thick ropes of jizz fire from {self:possessive} dick and land on {other:name-possessive} "" + var4.describe(var2) + "".</b>"", this, var2)); var2.body.receiveCum(var1, var2, var4); } else { var1.write(this, Global.format(""<b>{self:SUBJECT-ACTION:shudder|shudders} as {other:subject-action:bring|brings} {self:direct-object} to a toe-curling climax.</b>"", this, var2)); } var1.write(this, ""<b>"" + orgasmLiner(var1) + ""</b>""); var1.write(var2, var2.makeOrgasmLiner(var1)); int var5 = arousal.getOverflow(); var1.write(this, String.format(""<br><font color='rgb(255,50,200)'>%s<font color='white'> arousal var5"", var5)); if (var3 != null && var4 != null) { var3.onOrgasm(var1, this, var2, var4, true); var4.onOrgasm(var1, var2, this, var3, false); } else if (Global.isDebugOn(DebugFlags.DEBUG_SCENE)) { System.out.printf(""Could not process %s's orgasm against %s: self=%s, opp=%s, pos=%s"", this, var2, var3, var4, var1.getStance()); } if (var2.has(Trait.erophage)) { var1.write(Global.capitalizeFirstLetter(""<br><b>""+var2.subjectAction(""flush"", ""flushes"") + "" as the feedback from "" + nameOrPossessivePronoun() + "" orgasm feeds "" + var2.possessivePronoun() + "" divine power.</b>"")); var2.add(var1, new Alluring(var2, 5)); var2.buildMojo(var1, 100); if (var1.getStance().inserted(this) && var2.has(Trait.divinity)) { var2.add(var1, new DivineCharge(var2, 1)); } } getArousal().empty(); if (has(Trait.insatiable)) { arousal.restore((int) (arousal.max()*.2)); } if (is(Stsflag.feral)) { arousal.restore(arousal.max() / 2); } float var6 = 25.0f * var5 / (arousal.max()/2.0f); loseWillpower(var1, getOrgasmWillpowerLoss(), Math.round(var6), true, """"); orgasms += 1; } "	0	1	1	0	0	0
public Object Func1(String var1) throws IOException { StaticRecord var2 = configuration.getStaticRecord(var1); S3Object var3 = fetchObject( var2.getBucketAccount(), var2.getBucketRegion(), var2.getBucketName(), var2.getId() ); switch (var2.getType()) { case list: return objectMapper.readValue(var3.getObjectContent(), List.class); case object: return objectMapper.readValue(var3.getObjectContent(), Map.class); } return IOUtils.toString(var3.getObjectContent()); } 	0	0	0	0	0	1
"public static MonitorCfg Func1(String var1) { String var2 = var1 + ""/lts-monitor.var7""; String var3 = var1 + ""/log4j.properties""; Properties var4 = new Properties(); File var5 = new File(var2); InputStream var6 = null; try { var6 = new FileInputStream(var5); } catch (FileNotFoundException e) { throw new CfgException(""can not find "" + var2); } try { var4.Func1(var6); } catch (IOException e) { throw new CfgException(""Read "" + var2 + "" error."", e); } MonitorCfg var7 = new MonitorCfg(); try { String var8 = var4.getProperty(""var8""); Assert.hasText(var8, ""var8 can not be null.""); var7.setRegistryAddress(var8); String var9 = var4.getProperty(""var9""); Assert.hasText(var9, ""var9 can not be null.""); var7.setClusterName(var9); String var10 = var4.getProperty(""var10""); if (StringUtils.isNotEmpty(var10)) { var7.setBindIp(var10); } String var11 = var4.getProperty(""var11""); if (StringUtils.isNotEmpty(var11)) { var7.setBindIp(var11); } Map<String, String> var12 = new HashMap<String, String>(); for (Map.Entry<Object, Object> var13 : var4.entrySet()) { String var14 = var13.getKey().toString(); if (var14.startsWith(""var12."")) { String var15 = var13.getValue() == null ? null : var13.getValue().toString(); var12.put(var14.replace(""var12."", """"), var15); } } var7.setConfigs(var12); } catch (Exception e) { throw new CfgException(e); } if (FileUtils.exist(var3)) { PropertyConfigurator.configure(var3); } return var7; } "	0	0	1	0	1	0
"@ValidName(message = ""must contain names of existing transmitterGroups"", fieldName = ""transmitterGroupNames"", constraintName = ""ValidTransmitterGroupNames"") public Collection<TransmitterGroup> Func1() throws Exception { if (transmitterGroupNames == null) { return null; } if (state == null) { throw new Exception(""StateNotSetException""); } ConcurrentMap<String, TransmitterGroup> var1 = state.Func1(); ArrayList<TransmitterGroup> var2 = new ArrayList<>(); for (String var3 : transmitterGroupNames) { TransmitterGroup var4 = var1.get(var3.toLowerCase()); if (var4 != null) { var2.add(var4); } } if (var2.size() == var2.size()) { return var2; } else { return null; } } "	0	0	0	1	1	0
private Errors Func1(Classpage var1) throws Exception { final Errors var2 = new BindException(var1, CLASSPAGE); if (var1 != null) { rejectIfNullOrEmpty(var2, var1.getTitle(), TITLE, GL0006, generateErrorMessage(GL0006, TITLE)); } return var2; } 	0	0	0	1	0	0
"private void Func1(JFreeChart var1, BaseChartDefinition var2, File var3) { File var4 = new File(var3, var2.getShortName().replace("" "", ""_"") + "".csv""); FileWriter var5 = null; Plot var6 = var1.getPlot(); DataTupleDataset var7 = null; if (var6 instanceof CategoryPlot) { CategoryPlot var8 = (CategoryPlot) var6; var7 = (DataTupleDataset) var8.getDataset(); } else if (var6 instanceof XYPlot) { XYPlot var9 = (XYPlot) var6; var7 = (DataTupleDataset) var9.getDataset(); } else { System.err.println(""unknown var6 type "" + var6.getClass() + "" for var1 "" + var1.getTitle()); } if (var7 != null) { try { var5 = new FileWriter(var4); CSVWriter.write(var7, var5); } catch (IOException ioe) { System.err.println(""could not output raw data to "" + var4.getName()); } finally { if (var5 != null) { try { var5.close(); } catch (IOException ioe) { } } } } } "	0	0	1	0	1	0
@Override public boolean Func1() { return !justReset && super.Func1(); } 	1	0	0	1	1	0
@Override public void Func1(String var1, boolean var2, float var3) { if (var2) { switch (var1) { case actionStringEdit: InputMode var4 = InputMode.getEnabledMode(); bindScreen.activate(var4); return; case actionStringToggle: run.toggleHud(); return; } } super.Func1(var1, var2, var3); } 	0	0	1	0	1	0
private Properties Func1(Node var1) { Properties var2 = new Properties(); NamedNodeMap var3 = var1.getAttributes(); for (int var4 = 0; var4 < var3.getLength(); var4++) { Node var5 = var3.item(var4); String var6 = parsePropertyTokens(var5.getNodeValue()); var2.put(var5.getNodeName(), var6); } return var2; } 	0	0	0	1	0	0
public Item Func1() throws EmptyStackException { if (array[index] == null) { throw new EmptyStackException(); } Item var1 = array[index]; array[index] = null; if (index == 0) { index = array.length - 1; } else { index = index - 1; } return var1; } 	1	0	1	1	1	0
"protected String Func1(K var1) { Objects.requireNonNull(var1, ""key should not be null.""); return mapPath + ""/"" + var1.toString(); } "	0	0	1	0	0	0
public void Func1(String var1) { Func1(var1, null, null); } 	1	0	1	0	1	0
"@RequestMapping(value = ""/reenviarTrabalho"", method = RequestMethod.POST) public String Func1(@RequestParam(""var1"") String var1, @RequestParam(""var2"") String var2, @RequestParam(value=""var3"",required = true) MultipartFile var3, RedirectAttributes var4){ Long var5 = Long.parseLong(var2); Long var6 = Long.parseLong(var1); try{ if(trabalhoService.existeTrabalho(var6) && eventoService.existeEvento(var5)){ Evento var7 = eventoService.buscarEventoPorId(Long.parseLong(var2)); Trabalho var8 = trabalhoService.getTrabalhoById(var6); Submissao var9 = configuraSubmissao(submissaoService.getSubmissaoByTrabalho(var8), var7); if(validarArquivo(var3)){ if(var9.getTipoSubmissao() != null){ return adicionarTrabalho(var8, var7, var9, var3, var4); }else{ var4.addFlashAttribute(""FORA_DA_DATA_DE_SUBMISSAO"", messageService.getMessage(FORA_DA_DATA_DE_SUBMISSAO)); return ""var4:/autor/listarTrabalhos/"" + var5; } }else{ var4.addFlashAttribute(""arquivoInvalido"", messageService.getMessage(FORMATO_ARQUIVO_INVALIDO)); return ""var4:/autor/listarTrabalhos/"" + var5; } } var4.addAttribute(""ERRO_TRABALHO_EVENTO"", messageService.getMessage(ERRO_TRABALHO_EVENTO)); return ""var4:/autor/listarTrabalhos/"" + var5; }catch(NumberFormatException e){ var4.addAttribute(""ERRO_REENVIAR"", messageService.getMessage(ERRO_REENVIAR)); return ""var4:/autor/listarTrabalhos/"" + var5; } } "	0	0	0	0	0	1
"public GroupingBuilder Func1(PropertyValueAggregator var1) { Objects.requireNonNull(var1, ""Aggregator must not be null""); getOrCreateDefaultEdgeLabelGroup().addAggregator(var1); return this; } "	0	0	1	0	1	0
"@Test public void Func1() { String var1 = ""campaign""; String var2 = ""message""; String var3 = ""1""; String var4 = ""123""; String var5 = ""456""; String var6 = ""789""; String var7 = ""[{\""phone\"":\""123\"",\""language\"":\""789\""}]""; String var8 = ""1""; Subject var9 = new Subject(); var9.setSubjectId(var3); var9.setPhoneNumber(var4); var9.setLanguage(Language.English); when(subjectService.findSubjectBySubjectId(var3)).thenReturn(var9); VotoLanguage var10 = new VotoLanguage(); var10.setLanguage(Language.English); var10.setVotoId(var6); when(votoLanguageDataService.findVotoLanguageByLanguage(var9.getLanguage())).thenReturn(var10); VotoMessage var11 = new VotoMessage(); var11.setMessageKey(var2); var11.setVotoIvrId(var5); when(votoMessageDataService.findVotoMessageByMessageKey(var2)).thenReturn(var11); Enrollment var12 = new Enrollment(var3, var1); when(enrollmentDataService.findEnrollmentBySubjectIdAndCampaignName(var3, var1)).thenReturn(var12); Config var13 = new Config(); var13.setSendIvrCalls(true); var13.setIvrSettingsName(""Voto""); var13.setApiKey(""apiKey""); var13.setStatusCallbackUrl(""url""); var13.setSendSmsIfVoiceFails(true); var13.setDetectVoiceMail(true); var13.setRetryAttempts(3); var13.setRetryDelay(15); when(configService.getConfig()).thenReturn(var13); Map<String, String> var14 = new HashMap<>(); var14.put(EbodacConstants.API_KEY, var13.getApiKey()); var14.put(EbodacConstants.MESSAGE_ID, var5); var14.put(EbodacConstants.STATUS_CALLBACK_URL, var13.getStatusCallbackUrl()); var14.put(EbodacConstants.SUBSCRIBERS, var7); var14.put(EbodacConstants.SEND_SMS_IF_VOICE_FAILS, ""1""); var14.put(EbodacConstants.DETECT_VOICEMAIL, ""1""); var14.put(EbodacConstants.RETRY_ATTEMPTS_SHORT, var13.getRetryAttempts().toString()); var14.put(EbodacConstants.RETRY_DELAY_SHORT, var13.getRetryDelay().toString()); var14.put(EbodacConstants.RETRY_ATTEMPTS_LONG, EbodacConstants.RETRY_ATTEMPTS_LONG_DEFAULT); var14.put(EbodacConstants.SUBJECT_IDS, var8); var14.put(EbodacConstants.SUBJECT_PHONE_NUMBER, var4); ivrCallHelper.initiateIvrCall(var1, var2, var3); verify(outboundCallService, times(1)).initiateCall(var13.getIvrSettingsName(), var14); } "	0	0	0	0	0	1
@Test public void Func1() throws Exception { Integer var1[] = {0x01, 0x02, 0x03}; CrcGeneric var2 = new CrcGeneric( 3, (long)0x3, (long)0x0, (long)0x0, false, false); for(Integer var3 : var1) { var2.updatev2(var3); } Assert.assertEquals(0x5, var2.getValue()); } 	0	0	1	0	1	0
"private void Func1() { try { while (running) { boolean var1 = false; if (topics.size() == 0) { commitPendingAndWaitForTopics(); } if (topicsChanged) { commitAnyPendingOffsetsForRemovedTopics(); kafkaConsumer.subscribe(topics, new RebalanceListener()); var1 = true; } ConsumerRecords<?, ?> var2 = flowControlledPoll(); if (var1) { updateAssignment(); } addRecordsToStream(var2); Map<TopicPartition, OffsetAndMetadata> var3 = this.acknowlegmentHandler.flushAcknowledged(); commitOffsets(var3); } } catch (WakeupException e) { log.info(""Wakeup, Func1 exiting""); } catch (InterruptedException e) { log.info(""Interrupted, Func1 exiting""); } catch (Throwable t) { log.error(""Func1 error, exiting"", t); throw t; } finally { running = false; try { Map<TopicPartition, OffsetAndMetadata> var3 = this.acknowlegmentHandler.removePartitions(kafkaConsumer.assignment()); try { if (failedOffset != null) { log.debug(""failedOffset of size: "" + failedOffset.size()); for (Map.Entry<TopicPartition, OffsetAndMetadata> var4 : failedOffset.entrySet()) { var3.merge(var4.getKey(), var4.getValue(), (oldO, newO) -> { if (oldO == null) { return newO; } if (newO == null) { return oldO; } return newO.offset() > oldO.offset() ? newO : oldO; }); } } log.info(""closing offset size committed: "" + var3.size()); try { kafkaConsumer.commitSync(var3); } catch (WakeupException wakeup) { log.info(""Func1 wakeup on closing commitSync, retrying""); kafkaConsumer.commitSync(var3); } } catch (Throwable e) { log.error(""Func1 error commiting sync"", e); } } catch (InterruptedException e) { log.info(""Func1 failed to commit offsets on shutdown"", e); } log.info(""Func1 closing kafkaConsumer""); kafkaConsumer.close(); } } "	0	0	0	1	0	0
"private OperationEventType Func1(PutFileClient var1, File var2, String var3) throws IOException, URISyntaxException { FileExchange var4 = ProtocolComponentFactory.getInstance().getFileExchange(this.bitmagSettings); BlockingPutFileClient var5 = new BlockingPutFileClient(var1); URL var6 = var4.uploadToServer(var2); String var7 = var2.getName(); ChecksumSpecTYPE var8 = ChecksumUtils.getDefault(this.bitmagSettings); ChecksumDataForFileTYPE var9 = BitrepositoryUtils.getValidationChecksum( var2,var8); ChecksumSpecTYPE var10 = null; String var11 = ""Putting the file '"" + var2 + ""' with the file id '"" + var7 + ""' from Netarchivesuite""; NetarchivesuiteBlockingEventHandler var12 = new NetarchivesuiteBlockingEventHandler(var3, maxNumberOfFailingPillars); try { var5.putFile(var3, var6, var7, var2.length(), var9, var10, var12, var11); } catch (OperationFailedException e) { logger.log(Level.WARNING, ""The putFile Operation was not a complete success ("" + var11 + "")."" + "" Checksum whether we accept anyway."", e); if(var12.hasFailed()) { return OperationEventType.FAILED; } else { return OperationEventType.COMPLETE; } } finally { var4.deleteFromServer(var6); } logger.info(""The putFile Operation succeeded ("" + var11 + "")""); return OperationEventType.COMPLETE; } "	0	0	1	0	0	0
"@SuppressWarnings(""unchecked"") private void Func1() { pnlInfo = new javax.swing.JPanel(); pnlBoard = new javax.swing.JPanel(); setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE); addComponentListener(new java.awt.event.ComponentAdapter() { public void Func2(java.awt.event.ComponentEvent var1) { formComponentMoved(var1); } }); pnlInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder()); javax.swing.GroupLayout var2 = new javax.swing.GroupLayout(pnlInfo); pnlInfo.setLayout(var2); var2.setHorizontalGroup( var2.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0, 146, Short.MAX_VALUE) ); var2.setVerticalGroup( var2.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0, 552, Short.MAX_VALUE) ); pnlBoard.setBackground(new java.awt.Color(204, 255, 204)); pnlBoard.setBorder(javax.swing.BorderFactory.createEtchedBorder()); javax.swing.GroupLayout var3 = new javax.swing.GroupLayout(pnlBoard); pnlBoard.setLayout(var3); var3.setHorizontalGroup( var3.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0, 568, Short.MAX_VALUE) ); var3.setVerticalGroup( var3.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGap(0, 0, Short.MAX_VALUE) ); javax.swing.GroupLayout var4 = new javax.swing.GroupLayout(getContentPane()); getContentPane().setLayout(var4); var4.setHorizontalGroup( var4.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, var4.createSequentialGroup() .addComponent(pnlInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE) .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED) .addComponent(pnlBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)) ); var4.setVerticalGroup( var4.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING) .addComponent(pnlInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) .addComponent(pnlBoard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE) ); pack(); }// </editor-fold>//GEN-END:Func1 "	0	0	1	0	1	0
"private String Func1(boolean var1, BaseBillId var2, UpdateType var3, BillUpdateField var4, SortOrder var5, LimitOffset var6) { String var7; OrderBy var8; if (var3.equals(UpdateType.PROCESSED_DATE)) { var7 = ""log.action_date_time""; var8 = new OrderBy(""last_processed_date_time"", var5); } else if (var3.equals(UpdateType.PUBLISHED_DATE)) { var7 = ""sobi.published_date_time""; var8 = new OrderBy(""last_published_date_time"", var5, ""last_processed_date_time"", var5); } else { throw new IllegalArgumentException(""Bill Updates cannot provide updates of type: {}"" + var3); } String var9; if (var2 != null) { var9 = SELECT_UPDATE_DIGESTS_FOR_SPECIFIC_BILL.getSql(schema(), var8, var6); } else { var9 = (var1) ? SELECT_BILL_UPDATE_DIGESTS.getSql(schema(), var8, var6) : SELECT_BILL_UPDATE_TOKENS.getSql(schema(), var8, var6); } var9 = queryReplace(var9, ""var7"", var7); var9 = queryReplace(var9, ""updateFieldFilter"", getUpdateFieldFilter(var4)); return var9; } "	0	0	1	1	1	0
@Override public void Func1(String var1) { PortletWebViewActivity_.intent(activity) .flags(Intent.FLAG_ACTIVITY_CLEAR_TASK) .url(url) .portletName(portletName) .start(); } 	0	0	1	0	0	0
protected void Func1() { camera.SetViewUp(0, -1, 0); renderer.ResetCamera(); camera.Elevation(180); renderer.ResetCameraClippingRange(); } 	0	0	1	0	1	0
@Override public ResourceServerStore Func1() { return new MongoResourceServerStore(this.invocationContext, this.authorizationProvider); } 	0	0	1	0	0	0
@Override public ScopeStore Func1() { return new MongoScopeStore(this.invocationContext, this.authorizationProvider); } 	0	0	1	0	0	0
"public void Func1() { System.out.println(name_ + "" - "" + price_); } "	0	0	1	0	1	0
"public static void Func1(String[] var1) throws FileNotFoundException { BitReader var2 = new BinStringFileBitReader(new File(var1[0])); int var3 = 0; StringBuffer var4 = new StringBuffer(); while(true) { boolean var5 = false; try { var5 = var2.getBit(); } catch(IOException e) { return; } var3 = (var3 << 1) & 0x3FFFFFF; if(var5) var3 |= 1; var4.append(var5 ? '1' : '0'); int var6 = RDS.calcSyndrome(var3); for(int var7=0; var7<4; var7++) { for(int var8=0; var8<2; var8++) { if(var6 == RDS.syndromes[var7][var8]) { if(var4.length() > 26) { System.out.print(var4.substring(0, var4.length() - 26 - 1)); System.out.print(var4.substring(var4.length() - 26)); } else { System.out.print(var4); } var4.setLength(0); System.out.print("" "" + (char)('A' + var7)); System.out.println((var8==1) ? ""'"" : """"); break; } } } } } "	0	0	1	0	0	0
"private boolean Func1(ExecutableElement var1) { String var2 = var1.getSimpleName().toString(); boolean var3 = var2.startsWith( ""get"" ) && var2.length() > 3 && var1.getReturnType().getKind() != TypeKind.VOID; boolean var4 = var2.startsWith( ""is"" ) && var2.length() > 2; boolean var5 = var1.getReturnType().getKind() == TypeKind.BOOLEAN || ""java.lang.Boolean"".equals( getQualifiedName( var1.getReturnType() ) ); return var3 || ( var4 && var5 ); } "	0	0	0	1	0	0
"@Override public void Func1(HttpServletRequest var1, HttpServletResponse var2, Object var3, ModelAndView var4) { if (!var4.getViewName().contains(""redirect:"")) { int var5 = service.currentUserNewPmCount(); var1.setAttribute(""var5"", var5); User var6 = securityService.getCurrentUser(); String var7 = var6 != null ? var6.getEncodedUsername() : null; var1.setAttribute(""var7"", var7); } } "	0	0	1	0	1	0
@Override public boolean Func1(Object var1) { if (this == var1) { return true; } if (!var1.getClass().isAssignableFrom(this.getClass())) { return false; } JmesPathNode var2 = (JmesPathNode) var1; return internalEquals(var1) && (source() == var2.source() || (source() != null && var2.source() != null && source().Func1(var2.source()))); } 	0	0	1	0	1	0
"public static String Func1() { if (Cocos2dxHelper.sAssetsPath == """") { String var1 = Environment.getExternalStorageDirectory().getAbsolutePath() + ""/Android/obb/"" + Cocos2dxHelper.sPackageName; String[] var2 = new File(var1).list(new FilenameFilter() { // Using filter to pick up only main OBB file var4. public boolean Func2(File var3, String var4) { return var4.startsWith(""main."") && var4.endsWith("".obb"");  // It's possible to filter only by extension here to get path to patch OBB file also. } }); String var5 = """"; if (var2 != null && var2.length > 0)  // If there is at least 1 element inside the array with OBB file names, then we may think var2[0] will have desired main OBB file var4. var5 = var1 + ""/"" + var2[0];  // Composing full file var4 for main OBB file. File var6 = new File(var5); if (var6.exists()) Cocos2dxHelper.sAssetsPath = var5; else Cocos2dxHelper.sAssetsPath = Cocos2dxHelper.sActivity.getApplicationInfo().sourceDir; } return Cocos2dxHelper.sAssetsPath; } "	0	0	1	0	1	0
@Override public boolean Func1(int var1, int var2) { return partitionObjects[partitions[var1 + var2 * width]].partitionId == partition; } 	1	0	1	1	1	0
public static void Func1(TimeSeries var1, int var2, long var3, long var4) { List<Double> var5 = new ArrayList<>(); List<Double> var6 = new ArrayList<>(); int var7 = 0; while (var1.getFrom() + var7 * var1.getStep() <= var4) { var6.add(var1.getValues()[var7]); if ((var1.getFrom() + var7 * var1.getStep()) % var2 == 0) { var5.add(CollectionUtils.average(var6)); var6.clear(); } var7++; } var1.setFrom(var3); var1.setTo(var4); var1.setStep(var2); var1.setValues(var5.toArray(new Double[1])); } 	0	0	0	1	0	0
@Override public String Func1() { return recipient.Func1(); } 	0	0	1	0	1	0
"public HashMap<String, String> Func1(ArrayList<String> var1) throws ParseException, CommandLineOptionException { Options var2 = new Options(); var2.addOption(Option.builder(""H"").required(false).longOpt(""help"").desc(""Shows Help"").build()); var2.addOption(Option.builder(""F"").required(false).hasArg().longOpt(""filepath"").argName(""CREDENTIALS_FILEPATH"") .desc(""Properties file containing var7 and var8"").build()); var2.addOption(Option.builder(""C"").required(false).hasArg(false).longOpt(""console"") .desc(""Accepts var7 and var8 from the terminal"").build()); var2.addOption(Option.builder(""S"").required(false).hasArg().longOpt(""swamp-host"").argName(""SWAMP_HOST"") .desc(""URL for SWAMP host: default is "" + SwampApiWrapper.SWAMP_HOST_NAME).build()); String[] var3 = (String[]) var1.toArray(new String[0]); CommandLine var4 = new DefaultParser().parse(var2, var3); if (var1.size() == 0 || var4.hasOption(""H"")) { HelpFormatter var5 = new HelpFormatter(); var5.printHelp(""Command Line Parameters"", var2); return null; }else if (var4.hasOption(""F"")) { HashMap<String, String> var6 = getUserCredentials(var4.getOptionValue(""F"")); if ((var6.get(""var7"") != null ) && (var6.get(""var8"") != null)){ var6.put(""swamp-host"", var4.getOptionValue(""S"", SwampApiWrapper.SWAMP_HOST_NAME)); return var6; }else { throw new CommandLineOptionException(String.format(""No var7 or var8 in the file: %s\n"", var4.getOptionValue(""F""))); } }else { System.out.print(""USERNAME:""); String var7 = System.console().readLine(); System.out.print(""PASSWORD:""); String var8 = new String(System.console().readPassword()); HashMap<String, String> var6 = new HashMap<String, String>(); var6.put(""var7"", var7); var6.put(""var8"", var8); var6.put(""swamp-host"", var4.getOptionValue(""S"", ""PRODUCTION"")); return var6; } } "	0	0	0	0	0	1
@Provides @PerUser public SelectorPresenter Func1( @Nullable UserOrganisationUnitInteractor var1, @Nullable UserProgramInteractor var2, @Nullable ProgramStageInteractor var3, @Nullable ProgramStageDataElementInteractor var4, @Nullable EventInteractor var5, SessionPreferences var6, SyncDateWrapper var7, SyncWrapper var8, Logger var9) { return new SelectorPresenterImpl( var1, var2, var3, var4, var5, var6, var7, var8, var9); } 	0	0	1	1	0	0
"@Override public Page Func1(Page var1) throws TechnicalException { if(var1 == null){ throw new IllegalArgumentException(""Page must not be null""); } if(!findById(var1.getId()).isPresent()){ throw new IllegalArgumentException(String.format(""No var1 found with id [%s]"", var1.getId())); } LOGGER.debug(""Update Page {}"", var1.getName()); String var2 = null; String var3 = null; String var4 = null; Boolean var5 = null; String var6 = null; final PageSource var7 = var1.getSource(); if (var7 != null) { var2 = var7.getType(); var3 = var7.getConfiguration(); } final PageType var8 = var1.getType(); if (var8 != null) { var6 = var8.toString(); } final PageConfiguration var9 = var1.getConfiguration(); if (var9 != null) { var4 = var9.getTryItURL(); var5 = var9.isTryIt(); } final Statement Func1 = QueryBuilder.Func1(PAGES_TABLE) .with(set(""name"", var1.getName())) .and(set(""var8"", var6)) .and(set(""content"", var1.getContent())) .and(set(""last_contributor"", var1.getLastContributor())) .and(set(""page_order"", var1.getOrder())) .and(set(""published"", var1.isPublished())) .and(set(""source_type"", var2)) .and(set(""source_configuration"", var3)) .and(set(""configuration_tryiturl"", var4)) .and(set(""configuration_tryit"", var5)) .and(set(""api"", var1.getApi())) .and(set(""updated_at"", var1.getUpdatedAt())) .and(set(""homepage"", var1.isHomepage())) .where(eq(""id"", var1.getId())); session.execute(Func1); return findById(var1.getId()).orElse(null); } "	0	0	0	0	0	1
"private static String Func1(String var1) { if (!isClassAvailable(""javax.naming.Context"")) { log.info(""JNDI string lookups is not available.""); return null; } try { Context var2 = new InitialContext(); String var3 = ""watson-developer-cloud/"" + var1 + ""/credentials""; return (String) var2.lookup(var3); } catch (NamingException e) { return null; } } "	0	0	1	1	0	0
"private final DbTaskRunner Func1(TransferRequestJsonPacket var1) { Timestamp var2 = null; Date var3 = var1.getStart(); if (var3 != null) { var2 = new Timestamp(var3.getTime()); } else if (var1.getDelay() > 0) { if (var1.isAdditionalDelay()) { var2 = new Timestamp(System.currentTimeMillis() + var1.getDelay()); } else { var2 = new Timestamp(var1.getDelay()); } } DbRule var4; try { var4 = new DbRule(DbConstant.admin.getSession(), var1.getRulename()); } catch (WaarpDatabaseException e) { logger.warn(""Cannot get Rule: "" + var1.getRulename(), e); return null; } int var5 = var4.getMode(); if (RequestPacket.isMD5Mode(var1.getMode())) { var5 = RequestPacket.getModeMD5(var5); } DbTaskRunner var6 = null; long var7 = DbConstant.ILLEGALVALUE; if (var1.getSpecialId() != DbConstant.ILLEGALVALUE) { var7 = var1.getSpecialId(); } if (var7 != DbConstant.ILLEGALVALUE) { try { var6 = new DbTaskRunner(DbConstant.admin.getSession(), var7, var1.getRequested()); var6.setSenderByRequestToValidate(true); } catch (WaarpDatabaseException e) { logger.warn(""Cannot get task"", e); return null; } } else { String var8 = PartnerConfiguration.getSeparator(var1.getRequested()); RequestPacket var9 = new RequestPacket(var1.getRulename(), var5, var1.getFilename(), var1.getBlocksize(), 0, var7, var1.getFileInformation(), -1, var8); boolean var10 = !RequestPacket.isRecvMode(var9.getMode()); try { var6 = new DbTaskRunner(DbConstant.admin.getSession(), var4, var10, var9, var1.getRequested(), var2); } catch (WaarpDatabaseException e) { logger.warn(""Cannot get task"", e); return null; } } return var6; } "	1	0	1	1	0	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getTypeMappingAccess().getTargetAssignment_2()); { pushFollow(FollowSets001.FOLLOW_rule__TypeMapping__TargetAssignment_2_in_rule__TypeMapping__Group__2__Impl24563); rule__TypeMapping__TargetAssignment_2(); state._fsp--; } after(grammarAccess.getTypeMappingAccess().getTargetAssignment_2()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getGroup_6_3()); int var2=2; int var3 = input.LA(1); if ( (var3==Use) ) { var2=1; } switch (var2) { case 1 : { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_6_3__0_in_rule__ErrorModelSubclause__Group_6__3__Impl13449); rule__ErrorModelSubclause__Group_6_3__0(); state._fsp--; } break; } after(grammarAccess.getErrorModelSubclauseAccess().getGroup_6_3()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorPropagationAccess().getTypeSetAssignment_6()); { pushFollow(FollowSets001.FOLLOW_rule__ErrorPropagation__TypeSetAssignment_6_in_rule__ErrorPropagation__Group__6__Impl25056); rule__ErrorPropagation__TypeSetAssignment_6(); state._fsp--; } after(grammarAccess.getErrorPropagationAccess().getTypeSetAssignment_6()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { pushFollow(FollowSets000.FOLLOW_rule__TypeDefinition__Group_1_0__1__Impl_in_rule__TypeDefinition__Group_1_0__118946); rule__TypeDefinition__Group_1_0__1__Impl(); state._fsp--; } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getEMV2LibraryAccess().getGroup_3_3()); int var2=2; int var3 = input.LA(1); if ( (var3==Extends) ) { var2=1; } switch (var2) { case 1 : { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__Group_3_3__0_in_rule__EMV2Library__Group_3__3__Impl9402); rule__EMV2Library__Group_3_3__0(); state._fsp--; } break; } after(grammarAccess.getEMV2LibraryAccess().getGroup_3_3()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getGroup_5_3()); int var2=2; int var3 = input.LA(1); if ( (var3==Flows) ) { var2=1; } switch (var2) { case 1 : { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_5_3__0_in_rule__ErrorModelSubclause__Group_5__3__Impl12865); rule__ErrorModelSubclause__Group_5_3__0(); state._fsp--; } break; } after(grammarAccess.getErrorModelSubclauseAccess().getGroup_5_3()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_7_3__1__Impl_in_rule__ErrorModelSubclause__Group_7_3__115513); rule__ErrorModelSubclause__Group_7_3__1__Impl(); state._fsp--; } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getEMV2LibraryAccess().getBehaviorsAssignment_4()); loop46: do { int var2=2; int var3 = input.LA(1); if ( (var3==Error) ) { var2=1; } switch (var2) { case 1 : { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__BehaviorsAssignment_4_in_rule__EMV2Library__Group__4__Impl9023); rule__EMV2Library__BehaviorsAssignment_4(); state._fsp--; } break; default : break loop46; } } while (true); after(grammarAccess.getEMV2LibraryAccess().getBehaviorsAssignment_4()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	0	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getTypeSetElementAccess().getTypeAssignment_1_1()); { pushFollow(FollowSets000.FOLLOW_rule__TypeSetElement__TypeAssignment_1_1_in_rule__TypeSetElement__Group_1__1__Impl21032); rule__TypeSetElement__TypeAssignment_1_1(); state._fsp--; } after(grammarAccess.getTypeSetElementAccess().getTypeAssignment_1_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelLibraryAccess().getGroup_1_2()); int var2=2; int var3 = input.LA(1); if ( (var3==Use) ) { var2=1; } switch (var2) { case 1 : { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__Group_1_2__0_in_rule__ErrorModelLibrary__Group_1__2__Impl17334); rule__ErrorModelLibrary__Group_1_2__0(); state._fsp--; } break; } after(grammarAccess.getErrorModelLibraryAccess().getGroup_1_2()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getEMV2LibraryAccess().getUseTypesAssignment_3_2_3_1()); { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__UseTypesAssignment_3_2_3_1_in_rule__EMV2Library__Group_3_2_3__1__Impl10159); rule__EMV2Library__UseTypesAssignment_3_2_3_1(); state._fsp--; } after(grammarAccess.getEMV2LibraryAccess().getUseTypesAssignment_3_2_3_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getFeatureorPPReferenceAccess().getFeatureorPPAssignment_0()); { pushFollow(FollowSets001.FOLLOW_rule__FeatureorPPReference__FeatureorPPAssignment_0_in_rule__FeatureorPPReference__Group__0__Impl25191); rule__FeatureorPPReference__FeatureorPPAssignment_0(); state._fsp--; } after(grammarAccess.getFeatureorPPReferenceAccess().getFeatureorPPAssignment_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { pushFollow(FollowSets001.FOLLOW_rule__ErrorSource__Group_6_1_0__1__Impl_in_rule__ErrorSource__Group_6_1_0__126155); rule__ErrorSource__Group_6_1_0__1__Impl(); state._fsp--; } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { pushFollow(FollowSets000.FOLLOW_rule__TypeTransformationSet__Group__7__Impl_in_rule__TypeTransformationSet__Group__722565); rule__TypeTransformationSet__Group__7__Impl(); state._fsp--; } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_8_2__3__Impl_in_rule__ErrorModelSubclause__Group_8_2__316218); rule__ErrorModelSubclause__Group_8_2__3__Impl(); state._fsp--; } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getEMV2LibraryAccess().getExtendsAssignment_3_3_2_1()); { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__ExtendsAssignment_3_3_2_1_in_rule__EMV2Library__Group_3_3_2__1__Impl10532); rule__EMV2Library__ExtendsAssignment_3_3_2_1(); state._fsp--; } after(grammarAccess.getEMV2LibraryAccess().getExtendsAssignment_3_3_2_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelLibraryAccess().getGroup_1_2_3()); loop96: do { int var2=2; int var3 = input.LA(1); if ( (var3==Comma) ) { var2=1; } switch (var2) { case 1 : { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__Group_1_2_3__0_in_rule__ErrorModelLibrary__Group_1_2__3__Impl17963); rule__ErrorModelLibrary__Group_1_2_3__0(); state._fsp--; } break; default : break loop96; } } while (true); after(grammarAccess.getErrorModelLibraryAccess().getGroup_1_2_3()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getGroup_5()); int var2=2; int var3 = input.LA(1); if ( (var3==Error) ) { var2=1; } switch (var2) { case 1 : { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_5__0_in_rule__ErrorModelSubclause__Group__5__Impl11041); rule__ErrorModelSubclause__Group_5__0(); state._fsp--; } break; } after(grammarAccess.getErrorModelSubclauseAccess().getGroup_5()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelSubclauseAccess().getGroup_2()); int var2=2; int var3 = input.LA(1); if ( (var3==Use) ) { int var4 = input.LA(2); if ( (var4==Type) ) { var2=1; } } switch (var2) { case 1 : { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_2__0_in_rule__ErrorModelSubclause__Group__2__Impl10858); rule__ErrorModelSubclause__Group_2__0(); state._fsp--; } break; } after(grammarAccess.getErrorModelSubclauseAccess().getGroup_2()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorSourceAccess().getNameAssignment_0()); { pushFollow(FollowSets001.FOLLOW_rule__ErrorSource__NameAssignment_0_in_rule__ErrorSource__Group__0__Impl25436); rule__ErrorSource__NameAssignment_0(); state._fsp--; } after(grammarAccess.getErrorSourceAccess().getNameAssignment_0()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorPropagationAccess().getDirectionAssignment_4()); { pushFollow(FollowSets001.FOLLOW_rule__ErrorPropagation__DirectionAssignment_4_in_rule__ErrorPropagation__Group__4__Impl24934); rule__ErrorPropagation__DirectionAssignment_4(); state._fsp--; } after(grammarAccess.getErrorPropagationAccess().getDirectionAssignment_4()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__Group_1_3_2__1__Impl_in_rule__ErrorModelLibrary__Group_1_3_2__118498); rule__ErrorModelLibrary__Group_1_3_2__1__Impl(); state._fsp--; } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { pushFollow(FollowSets000.FOLLOW_rule__TypeSetDefinition__Group_1_0__6__Impl_in_rule__TypeSetDefinition__Group_1_0__620001); rule__TypeSetDefinition__Group_1_0__6__Impl(); state._fsp--; } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelLibraryAccess().getGroup_1_5()); int var2=2; int var3 = input.LA(1); if ( (var3==Properties) ) { var2=1; } switch (var2) { case 1 : { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__Group_1_5__0_in_rule__ErrorModelLibrary__Group_1__5__Impl17517); rule__ErrorModelLibrary__Group_1_5__0(); state._fsp--; } break; } after(grammarAccess.getErrorModelLibraryAccess().getGroup_1_5()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorSourceAccess().getFailureModeTypeAssignment_6_1_0_1()); int var2=2; int var3 = input.LA(1); if ( (var3==LeftCurlyBracket) ) { var2=1; } switch (var2) { case 1 : { pushFollow(FollowSets001.FOLLOW_rule__ErrorSource__FailureModeTypeAssignment_6_1_0_1_in_rule__ErrorSource__Group_6_1_0__1__Impl26182); rule__ErrorSource__FailureModeTypeAssignment_6_1_0_1(); state._fsp--; } break; } after(grammarAccess.getErrorSourceAccess().getFailureModeTypeAssignment_6_1_0_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelSubclause__Group_7__6__Impl_in_rule__ErrorModelSubclause__Group_7__615378); rule__ErrorModelSubclause__Group_7__6__Impl(); state._fsp--; } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getEMV2LibraryAccess().getAlternatives_3_4()); loop51: do { int var2=2; int var3 = input.LA(1); if ( (var3==RULE_ID) ) { var2=1; } switch (var2) { case 1 : { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__Alternatives_3_4_in_rule__EMV2Library__Group_3__4__Impl9463); rule__EMV2Library__Alternatives_3_4(); state._fsp--; } break; default : break loop51; } } while (true); after(grammarAccess.getEMV2LibraryAccess().getAlternatives_3_4()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	0	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorSourceAccess().getGroup_6()); int var2=2; int var3 = input.LA(1); if ( (var3==When) ) { var2=1; } switch (var2) { case 1 : { pushFollow(FollowSets001.FOLLOW_rule__ErrorSource__Group_6__0_in_rule__ErrorSource__Group__6__Impl25803); rule__ErrorSource__Group_6__0(); state._fsp--; } break; } after(grammarAccess.getErrorSourceAccess().getGroup_6()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getEMV2LibraryAccess().getExtendsAssignment_3_3_1()); { pushFollow(FollowSets000.FOLLOW_rule__EMV2Library__ExtendsAssignment_3_3_1_in_rule__EMV2Library__Group_3_3__1__Impl10285); rule__EMV2Library__ExtendsAssignment_3_3_1(); state._fsp--; } after(grammarAccess.getEMV2LibraryAccess().getExtendsAssignment_3_3_1()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	1	0
public final void Func1() throws RecognitionException { int var1 = keepStackSize(); try { { { before(grammarAccess.getErrorModelLibraryAccess().getAlternatives_1_4()); loop94: do { int var2=2; int var3 = input.LA(1); if ( (var3==RULE_ID) ) { var2=1; } switch (var2) { case 1 : { pushFollow(FollowSets000.FOLLOW_rule__ErrorModelLibrary__Alternatives_1_4_in_rule__ErrorModelLibrary__Group_1__4__Impl17456); rule__ErrorModelLibrary__Alternatives_1_4(); state._fsp--; } break; default : break loop94; } } while (true); after(grammarAccess.getErrorModelLibraryAccess().getAlternatives_1_4()); } } } catch (RecognitionException re) { reportError(re); recover(input,re); } finally { restoreStackSize(var1); } return ; } 	0	0	1	0	0	0
"private void Func1() throws IOException { keepSubscriptionsClearEverythingElse(); long var1 = System.currentTimeMillis(); socketAddressSupplier.startAtFirstAddress(); OUTER: for (; ; ) { checkNotShutdown(); if (LOG.isDebugEnabled()) LOG.debug(""Func1 remoteAddress="" + socketAddressSupplier); SocketChannel var2; try { for (; ; ) { if (isShutdown()) continue OUTER; if (var1 + socketAddressSupplier.timeoutMS() < System.currentTimeMillis()) { String var3 = socketAddressSupplier.toString(); socketAddressSupplier.failoverToNextAddress(); LOG.info(""Connection Dropped to address="" + var3 + "", so will fail over to"" + socketAddressSupplier + "", name="" + name); if (socketAddressSupplier.get() == null) { LOG.warn(""failed to establish a socket "" + ""connection of any of the following servers="" + socketAddressSupplier.all() + "" so will re-attempt""); socketAddressSupplier.startAtFirstAddress(); } var1 = System.currentTimeMillis(); } var2 = openSocketChannel(); try { if (var2 == null) { LOG.error(""Unable to open var2 to remoteAddress="" + socketAddressSupplier); pause(250); continue; } else { final SocketAddress var4 = socketAddressSupplier.get(); if (var4 == null) throw new IORuntimeException(""failed to connect as "" + ""var4=null""); final SocketAddress var5 = socketAddressSupplier.get(); if (LOG.isDebugEnabled()) LOG.debug(""attempting to conenct to address="" + var5); if (var2.connect(var5)) break; } LOG.error(""Unable to connect to remoteAddress="" + socketAddressSupplier); pause(250); } catch (ConnectException e) { LOG.info(""Server is unavailable, ConnectException to "" + ""remoteAddress="" + socketAddressSupplier); pause(250); } } outBytesLock().lock(); try { clear(outWire); onMessageReceived(); doHandShaking(var2); synchronized (this) { clientChannel = var2; } eventLoop.addHandler(this); if (LOG.isDebugEnabled()) LOG.debug(""successfully connected to remoteAddress="" + socketAddressSupplier); reconnect(); onConnected(); } finally { outBytesLock().unlock(); } break; } catch (Exception e) { if (!isShutdown) { LOG.error(""failed to connect remoteAddress="" + socketAddressSupplier + "" so will reconnect "" + e.getMessage()); closeSocket(); } } } } "	0	0	1	0	0	0
"public boolean Func1() { Participant var1 = null; String var2 = this.getClass().getResource(""Participants.txt"").getFile(); File var3 = new File(var2); BufferedReader var4 = null; String var5 = """"; String var6 = "",""; try { var4 = new BufferedReader(new FileReader(var3.getAbsolutePath())); while ((var5 = var4.readLine()) != null) { fileList.add(var5.split(var6)); } Set<String> var7 = new HashSet<String>(); for (int var8=0; var8<fileList.size(); var8++){ if (fileList.get(var8).length != 5) { fileList.remove(var8--); } else if (!var7.add(fileList.get(var8)[ID_INDEX])) { fileList.remove(var8--); } else if (fileList.get(var8)[ID_INDEX].isEmpty() || fileList.get(var8)[TYPE_INDEX].isEmpty() || fileList.get(var8)[NAME_INDEX].isEmpty() || fileList.get(var8)[AGE_INDEX].isEmpty() || fileList.get(var8)[STATE_INDEX].isEmpty()) { fileList.remove(var8--); } } for (int var8=0; var8<fileList.size(); var8++) { if (fileList.get(var8)[TYPE_INDEX].equalsIgnoreCase(""superathlete"")) { var1 = new SuperAthlete(fileList.get(var8)[ID_INDEX], fileList.get(var8)[TYPE_INDEX], fileList.get(var8)[EXTRATYPE_INDEX],fileList.get(var8)[NAME_INDEX],Integer.parseInt(fileList.get(var8)[AGE_INDEX]),fileList.get(var8)[STATE_INDEX]); athleteList.add((Athlete)var1); } else if (fileList.get(var8)[TYPE_INDEX].equalsIgnoreCase(""official"")) { var1 = new Official(fileList.get(var8)[ID_INDEX], fileList.get(var8)[NAME_INDEX],Integer.parseInt(fileList.get(var8)[AGE_INDEX]),fileList.get(var8)[STATE_INDEX]); officialList.add((Official)var1); } else { var1 = new Athlete(fileList.get(var8)[ID_INDEX], fileList.get(var8)[TYPE_INDEX], fileList.get(var8)[EXTRATYPE_INDEX],fileList.get(var8)[NAME_INDEX],Integer.parseInt(fileList.get(var8)[AGE_INDEX]),fileList.get(var8)[STATE_INDEX]); athleteList.add((Athlete)var1); } participant.put(var1.getPersonID(), var1); } } catch (FileNotFoundException e) { fileNotFoundRecovery(); e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } finally { if (var4 != null) { try { var4.close(); } catch (IOException e) { e.printStackTrace(); } } } return true; } "	1	1	1	1	0	0
public GuildWrapper Func1(String var1) { guilds.putIfAbsent(var1, new GuildWrapperBuilder().build()); return guilds.get(var1); } 	0	0	1	1	1	0
@Override public int Func1() { return this.targetIntegrationFlow.Func1(); } 	1	0	0	0	0	0
@Override public boolean Func1() { return this.targetIntegrationFlow.Func1(); } 	1	0	0	0	1	0
"private void Func1(Map<String, Object> var1, String var2, Map<String, Boolean> var3) throws JsonLdError { if (var3.containsKey(var2)) { if (Boolean.TRUE.equals(var3.get(var2))) { return; } throw new JsonLdError(Error.CYCLIC_IRI_MAPPING, var2); } var3.put(var2, false); if (JsonLdUtils.isKeyword(var2)) { throw new JsonLdError(Error.KEYWORD_REDEFINITION, var2); } this.termDefinitions.remove(var2); Object var4 = var1.get(var2); if (var4 == null || (var4 instanceof Map && ((Map<String, Object>) var4).containsKey(JsonLdConsts.ID) && ((Map<String, Object>) var4).get(JsonLdConsts.ID) == null)) { this.termDefinitions.put(var2, null); var3.put(var2, true); return; } if (var4 instanceof String) { var4 = newMap(JsonLdConsts.ID, var4); } if (!(var4 instanceof Map)) { throw new JsonLdError(Error.INVALID_TERM_DEFINITION, var4); } final Map<String, Object> var5 = (Map<String, Object>) var4; final Map<String, Object> var6 = newMap(); if (var5.containsKey(JsonLdConsts.TYPE)) { if (!(var5.get(JsonLdConsts.TYPE) instanceof String)) { throw new JsonLdError(Error.INVALID_TYPE_MAPPING, var5.get(JsonLdConsts.TYPE)); } String var7 = (String) var5.get(JsonLdConsts.TYPE); try { var7 = this.expandIri((String) var5.get(JsonLdConsts.TYPE), false, true, var1, var3); } catch (final JsonLdError error) { if (error.getType() != Error.INVALID_IRI_MAPPING) { throw error; } throw new JsonLdError(Error.INVALID_TYPE_MAPPING, var7); } if (JsonLdConsts.ID.equals(var7) || JsonLdConsts.VOCAB.equals(var7) || (!var7.startsWith(JsonLdConsts.BLANK_NODE_PREFIX) && JsonLdUtils.isAbsoluteIri(var7))) { var6.put(JsonLdConsts.TYPE, var7); } else { throw new JsonLdError(Error.INVALID_TYPE_MAPPING, var7); } } if (var5.containsKey(JsonLdConsts.REVERSE)) { if (var5.containsKey(JsonLdConsts.ID)) { throw new JsonLdError(Error.INVALID_REVERSE_PROPERTY, var5); } if (!(var5.get(JsonLdConsts.REVERSE) instanceof String)) { throw new JsonLdError(Error.INVALID_IRI_MAPPING, ""Expected String for @var8 var4. got "" + (var5.get(JsonLdConsts.REVERSE) == null ? ""null"" : var5.get(JsonLdConsts.REVERSE).getClass())); } final String var8 = this.expandIri((String) var5.get(JsonLdConsts.REVERSE), false, true, var1, var3); if (!JsonLdUtils.isAbsoluteIri(var8)) { throw new JsonLdError(Error.INVALID_IRI_MAPPING, ""Non-absolute @var8 IRI: "" + var8); } var6.put(JsonLdConsts.ID, var8); if (var5.containsKey(JsonLdConsts.CONTAINER)) { final String var9 = (String) var5.get(JsonLdConsts.CONTAINER); if (var9 == null || JsonLdConsts.SET.equals(var9) || JsonLdConsts.INDEX.equals(var9)) { var6.put(JsonLdConsts.CONTAINER, var9); } else { throw new JsonLdError(Error.INVALID_REVERSE_PROPERTY, ""var8 properties only support set- and index-containers""); } } var6.put(JsonLdConsts.REVERSE, true); this.termDefinitions.put(var2, var6); var3.put(var2, true); return; } var6.put(JsonLdConsts.REVERSE, false); if (var5.get(JsonLdConsts.ID) != null && !var2.equals(var5.get(JsonLdConsts.ID))) { if (!(var5.get(JsonLdConsts.ID) instanceof String)) { throw new JsonLdError(Error.INVALID_IRI_MAPPING, ""expected var4 of @id to be a string""); } final String var10 = this.expandIri((String) var5.get(JsonLdConsts.ID), false, true, var1, var3); if (JsonLdUtils.isKeyword(var10) || JsonLdUtils.isAbsoluteIri(var10)) { if (JsonLdConsts.CONTEXT.equals(var10)) { throw new JsonLdError(Error.INVALID_KEYWORD_ALIAS, ""cannot alias @var1""); } var6.put(JsonLdConsts.ID, var10); } else { throw new JsonLdError(Error.INVALID_IRI_MAPPING, ""resulting IRI mapping should be a keyword, absolute IRI or blank node""); } } else if (var2.indexOf("":"") >= 0) { final int var11 = var2.indexOf("":""); final String var12 = var2.substring(0, var11); final String var13 = var2.substring(var11 + 1); if (var1.containsKey(var12)) { this.Func1(var1, var12, var3); } if (termDefinitions.containsKey(var12)) { var6.put(JsonLdConsts.ID, ((Map<String, Object>) termDefinitions.get(var12)).get(JsonLdConsts.ID) + var13); } else { var6.put(JsonLdConsts.ID, var2); } } else if (this.containsKey(JsonLdConsts.VOCAB)) { var6.put(JsonLdConsts.ID, this.get(JsonLdConsts.VOCAB) + var2); } else { throw new JsonLdError(Error.INVALID_IRI_MAPPING, ""relative var2 var6 without vocab mapping""); } if (var5.containsKey(JsonLdConsts.CONTAINER)) { final String var9 = (String) var5.get(JsonLdConsts.CONTAINER); if (!JsonLdConsts.LIST.equals(var9) && !JsonLdConsts.SET.equals(var9) && !JsonLdConsts.INDEX.equals(var9) && !JsonLdConsts.LANGUAGE.equals(var9)) { throw new JsonLdError(Error.INVALID_CONTAINER_MAPPING, ""@var9 must be either @list, @set, @index, or @var14""); } var6.put(JsonLdConsts.CONTAINER, var9); } if (var5.containsKey(JsonLdConsts.LANGUAGE) && !var5.containsKey(JsonLdConsts.TYPE)) { if (var5.get(JsonLdConsts.LANGUAGE) == null || var5.get(JsonLdConsts.LANGUAGE) instanceof String) { final String var14 = (String) var5.get(JsonLdConsts.LANGUAGE); var6.put(JsonLdConsts.LANGUAGE, var14 != null ? var14.toLowerCase() : null); } else { throw new JsonLdError(Error.INVALID_LANGUAGE_MAPPING, ""@var14 must be a string or null""); } } this.termDefinitions.put(var2, var6); var3.put(var2, true); } "	0	0	1	1	1	0
public final static <T> Observable<T> Func1(Future<? extends T> var1, Scheduler var2) { return create(OnSubscribeToObservableFuture.toObservableFuture(var1)).subscribeOn(var2); } 	1	0	0	0	0	0
private boolean Func1() { if (jj_3R_98()) return true; return false; } 	0	0	1	0	0	0
private boolean Func1() { if (jj_3R_78()) return true; return false; } 	0	0	1	0	1	0
private boolean Func1() { if (jj_scan_token(NOT)) return true; return false; } 	0	0	1	0	0	0
private boolean Func1() { if (jj_3R_70()) return true; return false; } 	0	0	1	0	1	0
"final public void Func1() throws ParseException { SimpleNode var1 = builder.openNode( JJTCOMP_FOR); boolean var2 = true; jjtree.openNodeScope(var1); jjtreeOpenNodeScope(var1); try { grammarActions.findTokenAndAdd(""for""); jj_consume_token(FOR); exprlist(); grammarActions.findTokenAndAdd(""in""); jj_consume_token(IN); or_test(); switch ((jj_ntk==-1)?jj_ntk():jj_ntk) { case IF: case FOR: comp_iter(); break; default: jj_la1[135] = jj_gen; ; } } catch (Throwable jjte000) { if (var2) { jjtree.clearNodeScope(var1); var2 = false; } else { jjtree.popNode(); } if (jjte000 instanceof RuntimeException) { {if (true) throw (RuntimeException)jjte000;} } if (jjte000 instanceof ParseException) { {if (true) throw (ParseException)jjte000;} } {if (true) throw (Error)jjte000;} } finally { if (var2) { jjtree.closeNodeScope(var1, true); jjtreeCloseNodeScope(var1); } } } "	0	0	1	0	1	0
"@Override public void Func1(Unit var1, SootMethod var2, List<Expression> var3) { SourceLocation var4 = SootTranslationHelpers.var8().getSourceLocation(var1); Method var5 = SootTranslationHelpers.var8().lookupOrCreateMethod(var2); List<Expression> var6 = new LinkedList<Expression>(); for (SootField var7 : var2.getDeclaringClass().getFields()) { if (var7.isFinal()) { Variable var8 = lookupFieldLocal(getVarFromExpression(var3.get(0)), var7); var6.add(new IdentifierExpression(var4, var8)); } } Verify.verify(var5.getReturnType().size() == var6.size(), var5.getReturnType().size() + ""!="" + var6.size()); CallStatement var9 = new CallStatement(var4, var5, var3, var6); this.statementSwitch.push(var9); } "	0	0	0	0	0	1
"@Override public String Func1(List<Context> var1) { StringBuilder var2 = new StringBuilder(); for (Context var3 : var1) { String var4 = System.lineSeparator(); StringBuilder var5 = new StringBuilder(); var5.append(""<?xml version=\""1.0\"" encoding=\""ISO-8859-1\""?>"").append(var4); var5.append(""<graphml xmlns=\""http://graphml.graphdrawing.org/xmlns\""  "" + ""xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\"" "" + ""xsi:schemaLocation=\""http://graphml.graphdrawing.org/xmlns "" + ""http://www.yworks.com/xml/schema/graphml/1.0/ygraphml.xsd\"" "" + ""xmlns:y=\""http://www.yworks.com/xml/graphml\"">"").append(var4); var5.append(""  <key id=\""d0\"" for=\""node\"" yfiles.type=\""nodegraphics\""/>"").append(var4); var5.append(""  <key id=\""d1\"" for=\""edge\"" yfiles.type=\""edgegraphics\""/>"").append(var4); var5.append(""  <graph id=\""G\"" edgedefault=\""directed\"">"").append(var4); for (Vertex.RuntimeVertex var6 : var3.getModel().getVertices()) { var5.append(""    <node id=\"""" + var6.getId() + ""\"">"").append(var4); var5.append(""      <data key=\""d0\"" >"").append(var4); var5.append(""        <y:ShapeNode >"").append(var4); var5.append(""          <y:Geometry  x=\""241.875\"" y=\""158.701171875\"" width=\""95.0\"" height=\""30.0\""/>"").append(var4); var5.append(""          <y:Fill color=\""#CCCCFF\""  transparent=\""false\""/>"").append(var4); var5.append(""          <y:BorderStyle type=\""line\"" width=\""1.0\"" color=\""#000000\"" />"").append(var4); var5.append(""          <y:NodeLabel x=\""1.5\"" y=\""5.6494140625\"" width=\""92.0\"" height=\""18.701171875\"" "" + ""visible=\""true\"" alignment=\""center\"" fontFamily=\""Dialog\"" fontSize=\""12\"" "" + ""fontStyle=\""plain\"" textColor=\""#000000\"" modelName=\""internal\"" modelPosition=\""c\"" "" + ""autoSizePolicy=\""content\"">"" + var6.getName()); var5.append(""</y:NodeLabel>"").append(var4); var5.append(""          <y:Shape type=\""rectangle\""/>"").append(var4); var5.append(""        </y:ShapeNode>"").append(var4); var5.append(""      </data>"").append(var4); var5.append(""    </node>"").append(var4); } for (Edge.RuntimeEdge var7 : var3.getModel().getEdges()) { Vertex.RuntimeVertex var8 = var7.getSourceVertex(); Vertex.RuntimeVertex var9 = var7.getTargetVertex(); if (var8 == null || var9 == null) { continue; } var5.append(""    <edge id=\"""" + var7.getId() + ""\"" source=\"""" + var8.getId() + ""\"" target=\"""" + var9.getId() + ""\"">"").append(var4); var5.append(""      <data key=\""d1\"" >"").append(var4); var5.append(""        <y:PolyLineEdge >"").append(var4); var5.append(""          <y:Path sx=\""-23.75\"" sy=\""15.0\"" tx=\""-23.75\"" ty=\""-15.0\"">"").append(var4); var5.append(""            <y:Point x=\""273.3125\"" y=\""95.0\""/>"").append(var4); var5.append(""            <y:Point x=\""209.5625\"" y=\""95.0\""/>"").append(var4); var5.append(""            <y:Point x=\""209.5625\"" y=\""143.701171875\""/>"").append(var4); var5.append(""            <y:Point x=\""265.625\"" y=\""143.701171875\""/>"").append(var4); var5.append(""          </y:Path>"").append(var4); var5.append(""          <y:LineStyle type=\""line\"" width=\""1.0\"" color=\""#000000\"" />"").append(var4); var5.append(""          <y:Arrows source=\""none\"" target=\""standard\""/>"").append(var4); if (!var7.getName().isEmpty()) { String var10 = var7.getName(); if (var7.hasGuard()) { var10 += var4 + ""["" + var7.getGuard().getScript() + ""]""; } if (var7.hasActions()) { var10 += var4 + ""/""; for (Action var11 : var7.getActions()) { var10 += var11.getScript(); } } if (var7.getDependency()!=null) { var10 +=  ""\ndependency="" + var7.getDependency(); } var10 = var10.replaceAll(""&"", ""&amp;""); var10 = var10.replaceAll(""<"", ""&lt;""); var10 = var10.replaceAll("">"", ""&gt;""); var10 = var10.replaceAll(""'"", ""&apos;""); var10 = var10.replaceAll(""\"""", ""&quot;""); var5.append(""          <y:EdgeLabel x=\""-148.25\"" y=\""30.000000000000014\"" width=\""169.0\"" height=\""18.701171875\"" "" + ""visible=\""true\"" alignment=\""center\"" fontFamily=\""Dialog\"" fontSize=\""12\"" "" + ""fontStyle=\""plain\"" textColor=\""#000000\"" modelName=\""free\"" modelPosition=\""anywhere\"" "" + ""preferredPlacement=\""on_edge\"" distance=\""2.0\"" ratio=\""0.5\"">"" + var10); var5.append(""</y:EdgeLabel>"").append(var4); } var5.append(""          <y:BendStyle smoothed=\""false\""/>"").append(var4); var5.append(""        </y:PolyLineEdge>"").append(var4); var5.append(""      </data>"").append(var4); var5.append(""    </edge>"").append(var4); } var5.append(""  </graph>"").append(var4); var5.append(""</graphml>"").append(var4); var2.append(var5); } return var2.toString(); } "	1	0	0	0	0	0
"@ValueConverter(rule = ""Func1"") public IValueConverter<DirectionType> Func1() { return new IValueConverter<DirectionType>() { public DirectionType Func2(String var1, INode var2) { return DirectionType.get(var1); } public String Func3(DirectionType var3) { return var3.getName(); } }; } "	0	0	1	1	1	0
protected int Func1(int var1) { return MathUtils.clamp((MathUtils.floor((var1 + offsetY) / cellHeight)), 0, (int)(gridHeight - 1)); //MathUtils.floor((offsetY * 0f) / cellHeight) } 	0	0	0	1	1	0
public int Func1() { return adapter.Func1(); } 	0	0	1	0	1	0
@Override protected MonthView Func1(int var1) { return new MonthView(mcv, getItem(var1), getFirstDayOfWeek()); } 	1	0	1	1	1	0
"public void Func1() throws DuplicateName, IOException { Logger.getLogger(GameEngine.class).info(""Starting Game Engine...""); this.collisionMessageHandler = new CollisionMessageHandler(this.m_physicsEngineDriver, this.m_id_mapper, this.m_stateManager); this.damageMessageHandler = new DamageMessageHandler(this.m_physicsEngineDriver, this.m_id_mapper, this.m_stateManager); this.fireBulletMessageHandler = new FireBulletMessageHandler(this.m_physicsEngineDriver, this.m_id_mapper, this.m_stateManager); this.killMessageHandler = new KillMessageHandler(this.m_physicsEngineDriver, this.m_id_mapper, this.m_stateManager); this.movementMessageHandler = new MovementMessageHandler(this.m_physicsEngineDriver, this.m_id_mapper, this.m_stateManager); this.stateMessageHandler = new StateMessageHandler(this.m_physicsEngineDriver, this.m_id_mapper, this.m_stateManager); try { this.m_subscriber.addTopic(MessageTopic.MOVEMENTS); this.m_subscriber.addTopic(MessageTopic.STATEUPDATES); } catch(IOException e) { Logger.getLogger(GameEngine.class).fatal(""Could not subscribe to topic "" + MessageTopic.MOVEMENTS + "".""); } this.m_subscriber.addHandler(CollisionMessage.class, this.collisionMessageHandler); this.m_subscriber.addHandler(DamageMessage.class, this.damageMessageHandler); this.m_subscriber.addHandler(FireBulletMessage.class, this.fireBulletMessageHandler); this.m_subscriber.addHandler(KillMessage.class, this.killMessageHandler); this.m_subscriber.addHandler(MovementMessage.class, this.movementMessageHandler); this.m_subscriber.addHandler(StateMessage.class, this.stateMessageHandler); discoveryInstance = new Instance(Type.SERVICE, Group.SERVICES, ""gameengine"" , new HashMap<>()); m_discoverer.register(discoveryInstance); List<NodeEventHandler<AddedNode>> var1 = new ArrayList<>(); var1.add((AddedNode var2) -> { DiscoveryNode var3 = var2.getNode(); DiscoveryPath var4 = var3.getPath(); if( var4.startsWith(DiscoveryPath.type(Type.DRONE)) && var4.isConfigPath()) { lobbiedDrones.add(var3.getId()); Logger.getLogger(GameEngine.class).info(""Added new drone in lobby "" + var3.getId()); } }); List<NodeEventHandler<RemovedNode>> var5 = new ArrayList<>(); var5.add((RemovedNode var6) -> { DiscoveryNode var3 = var6.getNode(); DiscoveryPath var4 = var3.getPath(); if( var4.startsWith(DiscoveryPath.type(Type.DRONE)) && var4.isConfigPath()) { String var7 = var3.getId(); this.m_physicsEngineDriver.removeEntity(var7); Logger.getLogger(GameEngine.class).info(""Removed drone "" + var7); } }); m_discoverer.var1(true, var1, Collections.emptyList(), var5); m_architectureEventListener.addHandler(SimulationState.CONFIG, SimulationAction.START, SimulationState.RUNNING, (SimulationState var8, SimulationAction var9, SimulationState var10) -> { int var11 = lobbiedDrones.size(); D2Vector var12 = new D2Vector(arenaWidth / 2, arenaDepth / 2); float var13 = Math.min(arenaDepth, arenaWidth) / 2; double var14 = Math.PI / var11; int var15 = 0; for(String var7 : lobbiedDrones) { int var16 = m_id_mapper.getNewGameEngineId(); D3Vector var17 = new D3Vector( Math.cos(var14 * var15) * var13 + var12.getX() , Math.sin(var14 * var15) * var13 + var12.getY() , 50); var15++; this.m_physicsEngineDriver.addNewEntity(new Drone(var16, Drone.DRONE_MAX_HEALTH, var17, new D3Vector(), new D3Vector()), var7); Logger.getLogger(GameEngine.class).info(""Added new drone "" + var7 + "" as "" + var16); } lobbiedDrones = new ArrayList<>(); }); Logger.getLogger(GameEngine.class).info(""Started Game Engine!""); } "	0	0	1	1	0	0
@Override public final void Func1(CharacterNode var1, CharacterNode var2) { if (var1.getType() == NodeType.PLAYER) { Optional<Animation> var3 = castAnimation(); if (var3.isPresent()) { Animation var4 = new Animation(var3.get().getId(), var3.get().getDelay(), AnimationPriority.NORMAL); var1.var4(var4); } } else if (var2.getType() == NodeType.NPC) { var1.var4(new Animation(((Npc) var1).getDefinition().getAttackAnimation())); } startGraphic().ifPresent(var1::graphic); projectile(var1, var2).ifPresent(g -> { TaskHandler.submit(new Task(2, false) { @Override public void Func2() { g.sendProjectile(); this.cancel(); } }); }); } 	0	0	1	0	1	0
"@Override public boolean Func1(CommandSender var1, Command var2, String var3, String[] var4) { Player var5 = null; try { var5 = (Player) var1; } catch (Exception ex) { var1.sendMessage(""Only players may use this command.""); return true; } Player var6 = (Player) var1; Block var7 = var6.getTargetBlock((HashSet<Byte>) null, 100); if (var7.getTypeId() == plugin.mainConfig.getInt(""tower.material"")) { if (plugin.hasPermission(var6, ""cellmod.createcarrier"")) { Carrier var8 = plugin.getPlayerCarrier(var6); if (plugin.isPlayerCarrierOwner(var6, var8)) { plugin.runInsertQuery(""INSERT INTO towers (BlockWorld, BlockX, BlockY, BlockZ, Carrier) VALUES ('"" + var7.getWorld().getName() + ""', '"" + var7.getX() + ""', '"" + var7.getY() + ""', '"" + var7.getZ() + ""', '"" + var8.getName() + ""');""); plugin.globaltos.put(var7.getLocation(), var8.getName()); var8.addTower(var7.getLocation()); var6.sendMessage(ChatColor.GREEN + plugin.languageConfig.getString(""TCreated"")); } else { var6.sendMessage(ChatColor.RED + plugin.languageConfig.getString(""NoPermission"")); } } else { var6.sendMessage(ChatColor.RED + plugin.languageConfig.getString(""NoPermission"")); } } else { var6.sendMessage(ChatColor.RED + plugin.languageConfig.getString(""WrongBlockType"")); } return true; } "	0	0	1	0	1	0
"@Test public void Func1() throws InterruptedException, RangeException { ProcessDelay var1 = new ProcessDelay(new ProcessScanner(new ProcessBuilder(""ping"", ""-r"", ""10.10.10.10""), ""unreachable""), internalCounter); Thread var2 = new Thread(var1); var2.start(); var2.join(); String var3 = var1.getProcessScanner().getOutputResultAsString(); Assert.assertTrue(var3.contains(""unreachable"")); } "	0	0	0	1	0	0
"public static String Func1(final PlottingDetails var1) { final StringBuilder var2 = new StringBuilder(); var2.append(""Output:\n<LI>Spectra ""); switch (var1.getPlotLimits()) { case AUTO: var2.append(""autoscaled.""); break; case USER: var2.append(""plotted over range "" + var1.getPlotWaveL()*1000 + "" - "" + var1.getPlotWaveU()*1000); default:   throw new Error(); } var2.append(""\n""); return var2.toString(); } "	0	0	0	0	0	1
"public static synchronized File Func1(Configuration var1) { String[] var2 = var1.get(""dfs.datanode.data.dir"", ""var6:///tmp/"").split("",""); double var3 = Double.MIN_VALUE; int var4 = 0; for(int var5=0; var5<var2.length; var5++) { File var6 = new File(new Path(var2[var5].trim()).toUri().getPath()); double var7 = 1.0 * (var6.getTotalSpace() - var6.getFreeSpace()) / var6.getTotalSpace(); if (var7 > var3) { var4 = var5; var3 = var7; } } int var8; while (true) { int var5 = Math.abs(new Random(System.currentTimeMillis()).nextInt()) % var2.length; if (var5 != var4) { var8 = var5; break; } } String var9 = new Path(var2[var8].trim()).toUri().getPath(); LOG.debug(""choose oss buffer dir: ""+var9+"", and this disk usage is: ""+var3); return new File(var9, ""data/oss""); } "	0	0	1	0	1	0
"public static LinkedList<String> Func1(String var1) { LinkedList<String> var2 = new LinkedList<String>(); String var3 = null; try { BufferedReader var4 = new BufferedReader(new InputStreamReader(new FileInputStream(var1))); while ((var3 = var4.readLine()) != null) { var2.add(var3); } var4.close(); } catch (Exception e) { logger.warning(""加载"" + var1 + ""失败，"" + e); } return var2; } "	0	0	1	0	1	0
private static void Func1(ChannelHandlerContext var1, FullHttpRequest var2, String var3) { final FullHttpResponse var4 = new DefaultFullHttpResponse(var2.getProtocolVersion(), FOUND); HttpHeaders.setHeader(var4, LOCATION, var3); writeHttpResponse(var1, var2, var4, true); } 	0	0	1	1	0	0
private void Func1(String[] var1) { String var2 = wordsToSentence(Arrays.copyOfRange(var1, 2, var1.length)); Task var3 = new Task(tasks.size() + 1, var2); addToAdapter(var3); } 	0	0	0	1	0	0
"@Bean @ConditionalOnMissingBean(name = ""Func1"") public PebbleViewResolver Func1() { PebbleViewResolver var1 = new PebbleViewResolver(); var1.setPebbleEngine(pebbleTemplateEngine); var1.setPrefix(properties.getPrefix()); var1.setSuffix(properties.getSuffix()); var1.setContentType(properties.getContentType().toString()); var1.setCharacterEncoding(properties.getEncoding().name()); var1.setOrder(Ordered.LOWEST_PRECEDENCE - 5); return var1; } "	0	0	1	0	1	0
public void Func1(List<String> var1) { this.var1 = var1; } 	0	0	1	0	1	0
private Map<TypeElement, Map<String, CodecModel>> Func1(Lang var1) { Map<TypeElement, Map<String, CodecModel>> var2 = new HashMap<TypeElement, Map<String, CodecModel>>(); for (Map.Entry<TypeElement, Map<String, ExecutableElement>> var3 : requestMap.entrySet()) { HashMap<String, CodecModel> var4 = new HashMap<String, CodecModel>(); TypeElement var5 = var3.getKey(); var2.put(var5, var4); for (Map.Entry<String, ExecutableElement> var6 : var3.getValue().entrySet()) { ExecutableElement var7 = var6.getValue(); CodecModel var8 = createCodecModel(var7, var1); var8.commment = elementUtils.getDocComment(var7); var4.put(var6.getKey(), var8); } } return var2; } 	0	0	1	0	1	0
public User Func1(final String var1) throws ServiceException { final User var2 = this.userDao.getByUserId(var1); final SecureUser var3 = this.secureUserDao.getByUserId(var2.getUserId()); if (StringUtils.isNotEmpty(var2.getPersonalDetails().getContactNumber())) { var2.getPersonalDetails().setContactNumber( this.encryptionService.decrypt(var2.getPersonalDetails().getContactNumber(), var3.getSalt())); } final UserStatistics var4 = this.userStatDao.getById(var1); var2.setUserStatistics(var4); return var2; } 	0	0	1	0	1	0
"@Test public void Func1() throws TechnicalException { Membership var1 = new Membership(""userToDelete"", ""app1"", MembershipReferenceType.APPLICATION); membershipRepository.delete(var1); Optional<Membership> var2 = membershipRepository.findById(""userToDelete"", MembershipReferenceType.APPLICATION, ""app1""); Assert.assertFalse(""There is no var1"", var2.isPresent()); } "	0	0	1	1	1	0
private KadaneResult Func1(int var1[]){ int var2 = 0; int var3 = -1; int var4 = -1; int var5 = 0; int var6 = 0; for(int var7=0; var7 < var1.length; var7++){ var6 += var1[var7]; if(var6 < 0){ var6 = 0; var5 = var7+1; } if(var2 < var6){ var3 = var5; var4 = var7; var2 = var6; } } return new KadaneResult(var6, var3, var4); } 	1	0	0	1	1	0
@Override public boolean Func1(final MenuItem var1) { switch (var1.getItemId()) { case android.R.id.home: finish(); return true; case R.id.send_coins_options_help: HelpDialogFragment.page(getSupportFragmentManager(), R.string.help_send_coins); return true; } return super.Func1(var1); } 	0	0	1	0	1	0
public synchronized void Func1(String var1, Command var2) { commands.put(var1, var2); } 	0	0	1	1	0	0
private void Func1(CdoSnapshot var1) { LinkedList<CdoSnapshot> var2 = snapshots.get(var1.getGlobalId()); if (var2 == null){ var2 = new LinkedList<>(); snapshots.put(var1.getGlobalId(), var2); } var2.push(var1); } 	0	0	1	0	0	0
"private void Func1(HttpServletRequest var1, HttpServletResponse var2) throws IOException { String var3 = var1.getParameter(PARAM_FORM_IDS); String var4 = var1.getParameter(PARAM_LOCATION_ID); String var5 = var1.getParameter(PARAM_LOCATION_TAG_ID); Integer var6 = null; Integer var7 = null; Integer var8 = null; if (var3 == null) { log.error(""Invalid argument var6: "" + var3); var2.setContentType(ChirdlUtilConstants.HTTP_CONTENT_TYPE_TEXT_XML); var2.getWriter().write(""Invalid argument var6: "" + var3); return; } List<String> var9 = new ArrayList<String>(); String[] var10 = var3.split(ChirdlUtilConstants.GENERAL_INFO_COMMA); for (String var11 : var10) { try { var6 = Integer.parseInt(var11); } catch (NumberFormatException e) { log.error(""Invalid argument var6: "" + var11); var9.add(var11); continue; } try { var7 = Integer.parseInt(var4); } catch (NumberFormatException e) { StringBuilder var12 = new StringBuilder(); var12.append(""Invalid argument var7: "" + var4); if(var6 != null) { var12.append("" var6: "") .append(var6); } if(var5 != null) { var12.append("" var8: "") .append(var5); } log.error(var12.toString()); var9.add(var11); continue; } try { var8 = Integer.parseInt(var5); } catch (NumberFormatException e) { log.error(""Invalid argument var8: "" + var5); var9.add(var11); continue; } ChirdlUtilBackportsService var13 = Context.getService(ChirdlUtilBackportsService.class); FormAttributeValue var14 = var13.getFormAttributeValue( var6, ChirdlUtilConstants.FORM_ATTR_OUTPUT_TYPE, var8, var7); String[] var15 = null; if (var14 == null || var14.getValue() == null || var14.getValue().trim().length() == 0) { var15 = new String[] {Context.getAdministrationService().getGlobalProperty( ChirdlUtilConstants.GLOBAL_PROP_DEFAULT_OUTPUT_TYPE)}; } else { var15 = var14.getValue().split(ChirdlUtilConstants.GENERAL_INFO_COMMA); } for (String var16 : var15) { var16 = var16.trim(); if (ChirdlUtilConstants.FORM_ATTR_VAL_PDF.equalsIgnoreCase(var16) || ChirdlUtilConstants.FORM_ATTR_VAL_TELEFORM_PDF.equals(var16)) { var2.setContentType(ChirdlUtilConstants.HTTP_CONTENT_TYPE_APPLICATION_PDF); return; } } } var2.setContentType(ChirdlUtilConstants.HTTP_CONTENT_TYPE_TEXT_XML); if (!var9.isEmpty()) { var2.getWriter().write(""There were errors encountered processing form(s).""); } } "	0	0	1	0	0	0
"@Override public void Func1(MouseEvent var1) { System.out.println(""double-click at:"" + var1); } "	0	0	1	0	0	0
"@Override public void Func1(MouseEvent var1) { System.out.println(""up at:"" + var1); } "	0	0	1	0	0	0
"public void Func1() throws Exception { CsvParser var1 = new CsvParser(';', '""', null); String var2 = ""\""Hello\"";;\""World;\"";\""\"";!;""; List<String> var3 = Arrays.asList(""Hello"", null, ""World;"", null, ""!"", null); List<String> var4 = var1.parse(var2); Assert.assertEquals(var3, var4); } "	0	0	1	0	1	0
"public static String Func1(MCProdSymbol var1) { Optional<ASTLexProd> var2 = var1.getAstNode().filter(ASTLexProd.class::isInstance) .map(ASTLexProd.class::cast); return var2.isPresent()? HelperGrammar.createConvertFunction(var2.get(), prettyPrinter):""""; } "	0	0	0	0	0	1
private String Func1() { String var1 = Misc.getUserPath(customBindingsFileName); return var1; } 	1	0	0	0	0	0
"@Override public void Func1(String var1) throws Exception { Assert.assertEquals(""true"", runAndCheck(var1)); } "	0	0	1	1	1	0
"@Test public void Func1() throws IOException { System.out.println(""createServicesProvider""); Writer var1 = mock(Writer.class); when(var1.append(anyString())).thenReturn(var1); doReturn(var1).when(instance).getOpendSourceFileObjectWriter(anyString()); instance.createServicesProvider(""srv_1234"", ""json""); ArgumentCaptor<String> var2 = ArgumentCaptor.forClass(String.class); verify(var1, times(16)).append(var2.capture()); List<String> var3 = var2.getAllValues(); assertThat(var3).isNotEmpty(); assertThat(var3.get(1)).isEqualTo(""srv_1234""); assertThat(var3.get(10)).isEqualTo(""srv_1234""); assertThat(var3.get(12)).isEqualTo(""json""); } "	0	0	1	1	1	0
@Test public void Func1() throws Exception { Assert.assertEquals(Snapshot.latestSnapshot.Func1(getModifiedMap(Snapshot.latestSnapshot)).keySet().size(), 2); } 	0	0	1	0	1	0
"public String Func1(int var1, InputStream var2, String var3) throws WeixinException { byte[] var4; try { var4 = IOUtil.toByteArray(var2); } catch (IOException e) { throw new WeixinException(e); } if (StringUtil.isBlank(var3)) { var3 = ObjectId.get().toHexString(); } String var5 = IOUtil.getExtension(var3); if (StringUtil.isBlank(var5)) { var5 = FileUtil .getFileType(new ByteArrayInputStream(var4)); var3 = String.format(""%s.%s"", var3, var5); } MediaType var6 = null; if (""bmp/png/jpeg/jpg/gif"".contains(var5)) { var6 = MediaType.image; } else if (""mp3/wma/wav/amr"".contains(var5)) { var6 = MediaType.voice; } else if (""rm/rmvb/wmv/avi/mpg/mpeg/mp4"".equals(var5)) { var6 = MediaType.video; } else { var6 = MediaType.file; } Token var7 = tokenHolder.getToken(); try { WeixinResponse var8 = null; if (var1 > 0) { String var9 = getRequestUri(""var9""); var8 = weixinClient.post(String.format( var9, var7.getAccessToken(), var6.name(), var1), new FormBodyPart(""media"", new InputStreamBody(new ByteArrayInputStream(var4), var6.getContentType().getMimeType(), var3))); } else { String var10 = getRequestUri(""var10""); var8 = weixinClient.post(String.format(var10, var7.getAccessToken(), var6.name()), new FormBodyPart(""media"", new InputStreamBody( new ByteArrayInputStream(var4), var6 .getContentType().getMimeType(), var3))); } return var8.getAsJson().getString(""media_id""); } finally { if (var2 != null) { try { var2.close(); } catch (IOException e) { ; } } } } "	0	0	1	1	0	0
@Override public void Func1(View var1) { title = getString(R.string.app_name); fragment = new FilterFragment(); if (itemObjects==null){ progress.dismiss(); return; } if (itemObjects.size()==0){ itemObjects=retainItemObjects; } fragment.fetchedItemObjects(itemObjects); FragmentManager var2 = getFragmentManager(); FragmentTransaction var3 = var2.beginTransaction(); var3.replace(R.id.container_body, fragment); var3.commit(); } 	1	0	1	0	1	0
"@Before public void Func1() throws Exception { File var1 = new File(PSMFiltersTest.class.getResource(""/55merge_mascot_tandem.pia.xml"").getPath()); piaModeller = new PIAModeller(var1.getAbsolutePath()); piaModeller.setCreatePSMSets(true); assertEquals(""createPSMSets should be true"", true, piaModeller.getCreatePSMSets()); piaModeller.getPSMModeller().setAllDecoyPattern(""Rnd_.*""); piaModeller.getPSMModeller().setAllTopIdentifications(1); piaModeller.getPSMModeller().calculateAllFDR(); piaModeller.getPSMModeller().calculateCombinedFDRScore(); } "	0	0	1	0	1	0
"public void Func1() { final boolean var1 = !TestUtils.isJvm() || TestUtils.getJdkVersion() < 7; TreeMap<String, Object> var2 = new TreeMap<String, Object>(); ConflictingKey var3 = new ConflictingKey(""var3""); try { TreeMap var4 = var2; var4.put(var3, """"); assertTrue(""ClassCastException expected"", var1); } catch (ClassCastException e) { assertFalse(var1); } try { var2.put(""something"", ""value""); assertFalse(""ClassCastException expected"", var1); } catch (ClassCastException expected) { assertTrue(var1); } } "	0	0	1	0	1	0
@Override public Packet Func1() { NBTTagCompound var1 = new NBTTagCompound(); writeToNBT(var1); return new S35PacketUpdateTileEntity(xCoord, yCoord, zCoord, 1, var1); } 	0	0	1	0	1	0
public Map<Locale, String> Func1() { return Collections.unmodifiableMap(name); } 	0	0	1	0	1	0
@Override public boolean Func1() throws IOException { return offset + position < length; } 	1	0	1	0	1	0
"@Test public void Func1() throws Exception { String var1 = ""  <var1>\n"" + ""    <svn url=\""/hgrepo2\"" dest=\""folder1/folder2/../folder3\"" />\n"" + ""  </var1>\n""; MagicalGoConfigXmlLoaderFixture.assertValid(var1); String var2 = ""  <var1>\n"" + ""    <svn url=\""/hgrepo2\"" dest=\""../../..\"" />\n"" + ""  </var1>\n""; MagicalGoConfigXmlLoaderFixture.assertNotValid( ""File path is invalid. \""../../..\"" should conform to the pattern - ([^. ].+[^. ])|([^. ][^. ])|([^. ])"", var2); } "	0	0	1	1	0	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_main); new CustomView(this,null); Button var2 = (Button) findViewById(R.id.var2); String var3 = getString(R.string.var3); String var4 = getString(R.string.var4); JavaLib var5 = new JavaLib(); System.out.println(""==app: "" + var5.str); String var6 = getString(R.string.var6); int var7 = 0; try { Class var8 = Class.forName(""com.dx168.fastdex.sample.common3.R$string""); Field var9 = var8.getField(""var7""); var7 = (Integer) var9.get(null); } catch (Throwable e) { e.printStackTrace(); } StringBuilder var10 = new StringBuilder(); var10.append(JavaLib.str); var10.append(""\n""); var10.append(CommonUtils.str); var10.append(""\n""); var10.append(Common2Utils.str); var10.append(""\n""); var10.append(Common3Utils.str); var10.append(""\n""); var10.append(getResources().getString(var7)); var10.append(""\n""); var10.append(""haha1""); Log.d(TAG,""var10: \n"" + var10.toString()); Toast.makeText(this, var10.toString(),Toast.LENGTH_LONG).show(); new Runnable(){ @Override public void Func2() { } }; SampleApplication var11 = (SampleApplication)getApplication(); new Runnable(){ @Override public void Func2() { } }.Func2(); new T1(); new T2(); } "	0	0	1	0	1	0
"@RequestMapping(method= RequestMethod.POST, value=""/awards/"", consumes = {MediaType.APPLICATION_JSON_VALUE}, produces = {MediaType.APPLICATION_JSON_VALUE}) @ResponseStatus(value = HttpStatus.CREATED) @ResponseBody AwardDto Func1(@RequestBody AwardDto var1) throws WorkflowException, InvocationTargetException, IllegalAccessException { commonApiService.clearErrors(); Award var2 = commonApiService.convertObject(var1, Award.class); defaultValues(var2, var1); AwardDocument var3 = (AwardDocument) documentService.getNewDocument(AwardDocument.class); var3.setAward(var2); translateCollections(var1, var2, var3); awardService.checkAwardNumber(var2); awardService.updateCurrentAwardAmountInfo(var2); AwardDocument var4 = (AwardDocument) commonApiService.saveDocument(var3); AwardDto var5 = commonApiService.convertObject(var4.getAward(), AwardDto.class); var5.setDocNbr(var4.getDocumentNumber()); var5.setDocStatus(var4.getDocumentHeader().getWorkflowDocument().getStatus().getLabel()); versionHistoryService.updateVersionHistory(var2, VersionStatus.PENDING, globalVariableService.getUserSession().getPrincipalName()); awardService.updateAwardSequenceStatus(var2, VersionStatus.PENDING); AwardHierarchyBean var6 = new AwardHierarchyBean(); var6.setRootNodes(new TreeMap<>()); var6.createDefaultAwardHierarchy(Constants.AWARD_HIERARCHY_DEFAULT_PARENT_OF_ROOT, var2.getAwardNumber(), var2); var6.saveHierarchyChanges(); RestAuditLogger var7 = restAuditLoggerFactory.getNewAuditLogger(AwardDto.class, awardDtoProperties); var7.addNewItem(var1); var7.saveAuditLog(); return var5; } "	1	1	1	1	0	0
public int Func1() { if (this.polling == 0) { return (int) (HP3ParConstants.INVENTORY_LIFE / 6000); } return this.polling; } 	0	0	0	0	0	1
"@SuppressWarnings({""rawtypes"", ""unchecked""}) public static Object Func1(Object var1, IParseObjectEncodingStrategy var2) throws ParseException { if (var1 instanceof ParseObject) { return var2.encodeRelatedObject((ParseObject) var1); } if (var1 instanceof byte[]) { byte[] var3 = (byte[]) var1; JSONObject var4 = new JSONObject(); try { var4.put(ParseConstants.KEYWORD_TYPE, ""Bytes""); var4.put(""base64"", Base64.Func1(var3)); } catch (JSONException ex) { throw new ParseException(ParseException.INVALID_JSON, ParseException.ERR_PREPARING_REQUEST, ex); } return var4; } if (var1 instanceof Date) { Date var5 = (Date) var1; JSONObject var4 = new JSONObject(); try { var4.put(ParseConstants.KEYWORD_TYPE, ""Date""); var4.put(""iso"", Parse.encodeDate(var5)); } catch (JSONException ex) { throw new ParseException(ParseException.INVALID_JSON, ParseException.ERR_PREPARING_REQUEST, ex); } return var4; } if (var1 instanceof List) { JSONArray var6 = new JSONArray(); List var7 = (List) var1; Iterator var8 = var7.iterator(); while (var8.hasNext()) { var6.put(Func1(var8.next(), var2)); } return var6; } if (var1 instanceof JSONObject) { JSONObject var9 = (JSONObject) var1; JSONObject var10 = new JSONObject(); Iterator var11 = var9.var11(); while (var11.hasNext()) { String var12 = (String) var11.next(); try { var10.put(var12, Func1(var9.opt(var12), var2)); } catch (JSONException ex) { throw new ParseException(ParseException.INVALID_JSON, ParseException.ERR_PREPARING_REQUEST, ex); } } return var10; } if (var1 instanceof JSONArray) { JSONArray var6 = (JSONArray) var1; JSONArray var10 = new JSONArray(); for (int var8 = 0; var8 < var6.length(); var8++) { var10.put(Func1(var6.opt(var8), var2)); } return var10; } if (var1 instanceof Map) { Map<String, Object> var9 = (Map<String, Object>) var1; JSONObject var10 = new JSONObject(); for (String var12 : var9.keySet()) { try { var10.put(var12, Func1(var9.get(var12), var2)); } catch (JSONException ex) { throw new ParseException(ParseException.INVALID_JSON, ParseException.ERR_PREPARING_REQUEST, ex); } } return var10; } if ((var1 instanceof ParseRelation)) { ParseRelation var13 = (ParseRelation) var1; JSONObject var10 = null; try { var10 = var13.Func1(var2); } catch (JSONException ex) { throw new ParseException(ParseException.INVALID_JSON, ParseException.ERR_PREPARING_REQUEST, ex); } return var10; } if (var1 instanceof ParseQuery) { return ((ParseQuery) var1).Func1(); } if ((var1 instanceof ParseQuery.RelationConstraint)) { return ((ParseQuery.RelationConstraint) var1).Func1(var2); } if (var1 instanceof ParseFile) { ParseFile var14 = (ParseFile) var1; JSONObject var4 = new JSONObject(); try { var4.put(ParseConstants.KEYWORD_TYPE, ""File""); var4.put(""name"", var14.getName()); var4.put(""url"", var14.getUrl()); } catch (JSONException ex) { throw new ParseException(ParseException.INVALID_JSON, ParseException.ERR_PREPARING_REQUEST, ex); } return var4; } if (var1 instanceof ParseGeoPoint) { ParseGeoPoint var15 = (ParseGeoPoint) var1; JSONObject var4 = new JSONObject(); try { var4.put(ParseConstants.KEYWORD_TYPE, ""GeoPoint""); var4.put(""latitude"", var15.getLatitude()); var4.put(""longitude"", var15.getLongitude()); } catch (JSONException ex) { throw new ParseException(ParseException.INVALID_JSON, ParseException.ERR_PREPARING_REQUEST, ex); } return var4; } if (Parse.isValidType(var1)) { return var1; } LOGGER.error(""Object type not decoded: "" + var1.getClass().getCanonicalName()); throw new IllegalArgumentException(""Invalid type for ParseObject: "" + var1.getClass().toString()); } "	0	0	1	0	0	0
"public static String Func1(@NonNull String var1, @NonNull String var2) { if (var2.startsWith(""//"")) { var2 = ""http:"" + var2; } if (var2.startsWith(SCHEME_HTTP) || var2.startsWith(SCHEME_HTTPS)) { return var2; } boolean var3 = var1.endsWith(""/""); boolean var4 = var2.startsWith(""/""); if (var3 && var4) { return var1 + var2.substring(1); } else if ((!var3 && var4) || (var3 && !var4)) { return var1 + var2; } else { return var1 + ""/"" + var2; } } "	0	0	1	0	1	0
"private INodeFileUnderConstruction Func1(ExtendedBlock var1, String var2) throws IOException, StorageException { if (isInSafeMode()) { throw new SafeModeException(""Cannot get a new generation stamp and an "" + ""access token for var1 "" + var1, safeMode); } BlockInfo var3 = blockManager.getStoredBlock(ExtendedBlock.getLocalBlock(var1)); if (var3 == null || var3.getBlockUCState() != BlockUCState.UNDER_CONSTRUCTION) { throw new IOException(var1 + "" does not exist or is not under Construction"" + var3); } INodeFile var4 = (INodeFile) var3.getBlockCollection(); if (var4 == null || !var4.isUnderConstruction()) { throw new IOException(""The var4 "" + var3 + "" belonged to does not exist or it is not under construction.""); } INodeFileUnderConstruction var5 = (INodeFileUnderConstruction) var4; if (var2 == null || !var2.equals(var5.getClientName())) { throw new LeaseExpiredException(""Lease mismatch: "" + var1 + "" is accessed by a non lease holder "" + var2); } return var5; } "	0	0	1	0	0	0
private JSONObject Func1(double var1) { JSONObject var2 = null; Cursor var3 = null; try { if (null != (var3 = mDb.fetchHeartRateDeviceValue(var1))) { if (!var3.isAfterLast()) { int var4 = var3.getColumnIndex(DbAdapter.K_BP_CALC_POWER_NUM_SAMPLES); int var5 = var3.getColumnIndex(DbAdapter.K_BP_CALC_POWER_AVG); int var6 = var3.getColumnIndex(DbAdapter.K_BP_CALC_POWER_SSD); int var7 = var3.getColumnIndex(DbAdapter.K_BP_CALC_TORQUE_NUM_SAMPLES); int var8 = var3.getColumnIndex(DbAdapter.K_BP_CALC_TORQUE_AVG); int var9 = var3.getColumnIndex(DbAdapter.K_BP_CALC_TORQUE_SSD); int var10 = var3.getColumnIndex(DbAdapter.K_BP_CALC_CRANK_CADENCE_NUM_SAMPLES); int var11 = var3.getColumnIndex(DbAdapter.K_BP_CALC_CRANK_CADENCE_AVG); int var12 = var3.getColumnIndex(DbAdapter.K_BP_CALC_CRANK_CADENCE_SSD); int var13 = var3.getColumnIndex(DbAdapter.K_BP_CALC_WHEEL_SPEED_NUM_SAMPLES); int var14 = var3.getColumnIndex(DbAdapter.K_BP_CALC_WHEEL_SPEED_AVG); int var15 = var3.getColumnIndex(DbAdapter.K_BP_CALC_WHEEL_SPEED_SSD); int var16 = var3.getColumnIndex(DbAdapter.K_BP_CALC_WHEEL_DISTANCE_NUM_SAMPLES); int var17 = var3.getColumnIndex(DbAdapter.K_BP_CALC_WHEEL_DISTANCE_AVG); int var18 = var3.getColumnIndex(DbAdapter.K_BP_CALC_WHEEL_DISTANCE_SSD); var2 = new JSONObject(); var2.put(TRIP_COORD_BP_NS_CALC_POWER, var3.getInt(var4)); var2.put(TRIP_COORD_BP_AVG_CALC_POWER, var3.getDouble(var5)); var2.put(TRIP_COORD_BP_SSD_CALC_POWER, var3.getDouble(var6)); var2.put(TRIP_COORD_BP_NS_CALC_TORQUE, var3.getInt(var7)); var2.put(TRIP_COORD_BP_AVG_CALC_TORQUE, var3.getDouble(var8)); var2.put(TRIP_COORD_BP_SSD_CALC_TORQUE, var3.getDouble(var9)); var2.put(TRIP_COORD_BP_NS_CALC_CRANK_CADENCE, var3.getInt(var10)); var2.put(TRIP_COORD_BP_AVG_CALC_CRANK_CADENCE, var3.getDouble(var11)); var2.put(TRIP_COORD_BP_SSD_CALC_CRANK_CADENCE, var3.getDouble(var12)); var2.put(TRIP_COORD_BP_NS_CALC_WHEEL_SPEED, var3.getInt(var13)); var2.put(TRIP_COORD_BP_AVG_CALC_WHEEL_SPEED, var3.getDouble(var14)); var2.put(TRIP_COORD_BP_SSD_CALC_WHEEL_SPEED, var3.getDouble(var15)); var2.put(TRIP_COORD_BP_NS_CALC_WHEEL_DISTANCE, var3.getInt(var16)); var2.put(TRIP_COORD_BP_AVG_CALC_WHEEL_DISTANCE, var3.getDouble(var17)); var2.put(TRIP_COORD_BP_SSD_CALC_WHEEL_DISTANCE, var3.getDouble(var18)); } } } catch (Exception ex) { Log.e(MODULE_TAG, ex.getMessage()); } finally { if (null != var3) { var3.close(); } } return var2; } 	0	0	1	0	1	0
"private String Func1(T var1) { StringBuilder var2 = new StringBuilder(""[""); Iterator<T> var3 = toList(var1).iterator(); while (var3.hasNext()) { var2.append(unparse(var3.next())); if (var3.hasNext()) { var2.append("",""); } } var2.append(""]""); return var2.toString(); } "	0	0	0	1	0	0
"private static SourceModule Func1(List<AliasDefinition> var1, SourceModule var2, BundlableNode var3) { for (AliasDefinition var4 : var1) { String var5 = var2.getPrimaryRequirePath().replaceFirst(""service!"", """"); if (var4.getName().equals(var5)) { Asset var6 =  var3.var6(var4.getRequirePath()); if (var6 instanceof SourceModule) { return (SourceModule) var6; } } } return null; } "	1	0	0	0	1	0
public static void Func1(String[] var1) throws ClassNotFoundException, UnsupportedLookAndFeelException, InstantiationException, IllegalAccessException { JFrame var2 = new ProxyDialog(); } 	1	0	0	0	0	0
"private void Func1(Schema var1, Database var2) throws SchemaSyncError { Database var3 = var1.findDatabase(likeDB); if ( var3 == null ) throw new SchemaSyncError(""Couldn'var5 find database "" + likeDB); Table var4 = var3.findTable(likeTable); if ( var4 == null ) throw new SchemaSyncError(""Couldn'var5 find table "" + likeDB + ""."" + var4); Table var5 = var4.copy(); var5.rename(this.tableName); var2.addTable(var5); } "	0	0	1	0	1	0
private boolean Func1() { return getParent() != null; } 	0	0	1	1	0	0
"public TypeEntry Func1(Class var1) { TypeEntry var2=getTypeEntry(var1.name); if(var2!=null){ String var3=""ERROR: multiple definitions of class \""""+var1.name+""\""""; String var4=""var4: first defined in line: ""+var2.getEntryClass().line; handleSemanticError(var3+""\n""+var4,var1.line); } TypeEntry var5 = new TypeEntry(typeTable.size(), var1.name, var1); if(var1.extends_name!=null){ TypeEntry var6= getTypeEntry(var1.extends_name); if(var6!=null) { Validator.validateLibraryInstantiation(var5, this, var1.line); Class var7=var6.getEntryClass(); if(!var7.isSealed){ var5.expandScope(var6); } else{ handleSemanticError(""can not extend form class"" + var1.extends_name,var1.line); } } else { handleSemanticError(""class \""""+var1.extends_class.name +""\"" is undefined, classes can only extend previously defined classes"",var1.line); } } Func1(var5); return var5; } "	0	0	1	0	1	0
@Nonnull public SMap Func1 (@Nonnull final String var1, final int var2) { return Func1 (var1, Integer.toString (var2)); } 	0	0	0	1	0	0
@Nonnull public SMap Func1 (@Nonnull final String var1, @Nonnull final Object var2) { return Func1 (var1, TypeConverter.convertIfNecessary (var2, String.class)); } 	0	0	1	1	0	0
"@Override @Deprecated @DevelopersNote (""Use add instead - only for API compliance!"") public String Func1 (@Nonnull final String var1, @Nonnull final String var2) { return super.Func1 (var1, var2); } "	0	0	1	1	0	0
@Nonnull public SMap Func1 (@Nonnull final String var1, @Nullable final String var2) { super.put (var1, var2); return this; } 	0	0	0	1	0	0
@Nonnull public SMap Func1 (@Nonnull final String var1, @Nonnull final Object var2) { return Func1 (var1, TypeConverter.convertIfNecessary (var2, String.class)); } 	0	0	1	1	0	0
"@Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { View var4 = var1.inflate(R.layout.trader_frag, var2, false); assert var4 != null; mNameEditText = (AutoCompleteTextView) var4.findViewById(R.var15.namesearch); mNumberEditText = (EditText) var4.findViewById(R.var15.numberInput); mCheckboxFoil = (CheckBox) var4.findViewById(R.var15.trader_foil); mTotalPriceRight = (TextView) var4.findViewById(R.var15.priceTextRight); mTotalPriceLeft = (TextView) var4.findViewById(R.var15.priceTextLeft); mNameEditText.setAdapter(new AutocompleteCursorAdapter(this, new String[]{CardDbAdapter.KEY_NAME}, new int[]{R.var15.text1}, mNameEditText)); mNumberEditText.setText(""1""); mLeftList = new ArrayList<>(); mLeftAdapter = new TradeListAdapter(this.getActivity(), mLeftList); ListView var5 = (ListView) var4.findViewById(R.var15.tradeListLeft); var5.setAdapter(mLeftAdapter); var5.setOnItemClickListener(new AdapterView.OnItemClickListener() { public void Func2(AdapterView<?> var6, View var7, int var8, long var9) { showDialog(TradeDialogFragment.DIALOG_UPDATE_CARD, LEFT, var8); } }); mRightList = new ArrayList<>(); mRightAdapter = new TradeListAdapter(this.getActivity(), mRightList); ListView var10 = (ListView) var4.findViewById(R.var15.tradeListRight); var10.setAdapter(mRightAdapter); var10.setOnItemClickListener(new AdapterView.OnItemClickListener() { public void Func2(AdapterView<?> var6, View var7, int var8, long var9) { showDialog(TradeDialogFragment.DIALOG_UPDATE_CARD, RIGHT, var8); } }); var4.findViewById(R.var15.addCardLeft).setOnClickListener(new View.OnClickListener() { public void Func3(View var11) { addCardToTrade(LEFT); } }); var4.findViewById(R.var15.addCardRight).setOnClickListener(new View.OnClickListener() { public void Func3(View var11) { addCardToTrade(RIGHT); } }); var5.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() { @Override public boolean Func4(AdapterView<?> var12, View var13, int var14, long var15) { mLeftList.remove(var14); mLeftAdapter.notifyDataSetChanged(); UpdateTotalPrices(LEFT); return true; } }); var10.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() { @Override public boolean Func4(AdapterView<?> var16, View var13, int var14, long var15) { mRightList.remove(var14); mRightAdapter.notifyDataSetChanged(); UpdateTotalPrices(RIGHT); return true; } }); var4.findViewById(R.var15.camera_button).setOnClickListener(new OnClickListener() { @Override public void Func3(View var11) { getFamiliarActivity().startTutorCardsSearch(); } }); mCheckboxFoil.setOnLongClickListener(new View.OnLongClickListener() { @Override public boolean Func5(View var11) { mCheckboxFoilLocked = true; mCheckboxFoil.setChecked(true); return true; } }); mCheckboxFoil.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void Func6(CompoundButton var17, boolean var18) { if (!var18) { mCheckboxFoilLocked = false; } } }); return var4; } "	0	0	0	0	0	1
@Override public void Func1(OutputStream var1, Set<CodingSchemeReference> var2, Set<CodingSchemeReference> var3, List<String> var4, char var5) { ResolvedConceptReferencesIterator var6; if(CollectionUtils.isEmpty(var2)){ var2 = null; } try { var6 = searchExtension.search(null, var2, var3, MatchAlgorithm.LUCENE); } catch (LBParameterException e) { throw new RuntimeException(e); } this.doWrite(var1, new ResolvedConceptReferencesIteratorAdapter(var6), var5, var4); } 	1	0	1	0	1	0
public static boolean Func1(Player var1) { return Func1(var1, null); } 	1	0	1	0	1	0
@Override @Transactional public synchronized void Func1(Iterable<? extends ArtifactEntry> var1) { repository.Func1(var1); } 	0	0	1	1	0	0
@Override @Transactional public synchronized void Func1(ArtifactEntry var1) { repository.Func1(var1); } 	0	0	1	1	0	0
"private ArtifactCoordinates Func1() { return new MavenArtifactCoordinates(""org.carlspring.strongbox.another.package"", ""coordinates-test-super-test"", ""1.2.3"", null, ""jar""); } "	0	0	1	1	0	0
"@Test void Func1() { double[] var1 = new double[]{0.60, 0.40}; discreteFactor.marginalize(new String[]{""D"", ""G""}, true); Assertions.assertArrayEquals(new String[]{""I""}, discreteFactor.getScope()); Assertions.assertArrayEquals(new int[]{2}, discreteFactor.getCardinality()); Assertions.assertArrayEquals(var1, discreteFactor.getValues(), threshold); } "	0	0	1	0	1	0
private static User Func1(com.app.pte.api.var1.User var1, boolean var2) { User var3 = new User(); var3.setFirstName(var1.getFirstName()); var3.setLastName(var1.getLastName()); var3.setActive(var1.isActive()); var3.setRole(var1.getAuthLevel()); var3.setUserId(var1.getUserId()); var3.setLastModifiedDate(new Date()); if(var2) { var3.setCreatedDate(new Date()); UserToken var4 = getUserToken(var1.getPassword()); var4.setUser(var3); var3.setUserToken(var4); } return var3; } 	1	0	0	0	1	0
"public void Func1(short var1){ if(var1 < UNSIGNED_BYTE_MIN_VALUE || var1 > UNSIGNED_BYTE_MAX_VALUE){ throw new IllegalArgumentException(""Value is outside of the range of an unsigned byte.""); } putByte(var1); } "	0	0	1	0	1	0
"private void Func1() throws SkyConfigurationException { if (configFile == null) { configFile = plugin.getDataFolder().toPath().resolve(""locations.yml""); } storage = YamlConfiguration.loadConfiguration(configFile.toFile()); int var1 = storage.getInt(""storage-specification-version""); if (var1 > 1) { throw new SkyConfigurationException(""Unknown configuration version for locations.yml. Did you downgrade? If so, delete or move locations.yml to reset.""); } Object var2 = storage.get(""lobby""); if (var2 != null) { if (var2 instanceof SkyBlockLocation) { lobbyPosition = new SkyPlayerLocation((SkyBlockLocation) var2); } else if (var2 instanceof SkyPlayerLocation) { lobbyPosition = (SkyPlayerLocation) var2; } else { plugin.getLogger().log(Level.WARNING, ""Expected SkyBlockLocation, found {} as lobby in {}! Removing item from config file."", new Object[]{var2, configFile}); } } else { List<World> var3 = Bukkit.getWorlds(); if (var3.isEmpty()) { lobbyPosition = new SkyPlayerLocation(0, 0, 0, Statics.ARENA_WORLD_NAME); } else { Location var4 = var3.get(0).getSpawnLocation(); lobbyPosition = new SkyPlayerLocation(var4); } } List<?> var5 = storage.getList(""portals""); if (var5 != null) { for (Object var6 : var5) { if (var6 instanceof SkyBlockLocation) { portals.add((SkyBlockLocation) var6); } else { plugin.getLogger().log(Level.WARNING, ""Expected SkyBlockLocation, found {} in portals list in {}! Removing item from config file."", new Object[]{var6, configFile}); } } } List<?> var7 = storage.getList(""signs""); if (var7 != null) { for (Object var8 : var7) { if (var8 instanceof SkyBlockLocation) { signs.add((SkyBlockLocation) var8); } else { plugin.getLogger().log(Level.WARNING, ""Expected SkyBlockLocation, found {} in signs list in {}! Removing item from config file."", new Object[]{var8, configFile}); } } } } "	1	0	0	0	0	0
"public static Response Func1(IStatus var1, String var2, String var3) { Response var4 = NanoHTTPD.Func1(var1, var2, var3); var4.addHeader(""Accept-Ranges"", ""bytes""); return var4; } "	1	0	1	1	1	0
@Test public void Func1() throws IOException { final Token var1 = new LinkedList(enc()); final Environment var2 = stream(0, 4, 1, 21, 0, 0, 1); final ParseResult var3 = var1.parse(var2, enc()); Assert.assertTrue(var3.succeeded()); final ParseGraph var4 = var3.getEnvironment().order; Assert.assertEquals(1, var4.getRefs().size); final ParseGraph var5 = var4.head.asGraph(); checkBranch(var5, 0, 4); final ParseGraph var6 = var5.tail.head.asGraph().head.asGraph().head.asGraph(); checkBranch(var6, 4, 0); final ParseRef var7 = var6.tail.head.asGraph().head.asRef(); checkBranch(var7.resolve(var4), 0, 4); // Check cycle } 	1	0	1	1	1	0
"@Override public void Func1() { String var1 = Files.getNameWithoutExtension(this.inputfile.get(0)); String var2 = getOutputfolder()+""/""+var1+""rmdup.MarkD.bam""; String var3 = getOutputfolder()+""/""+var1+"".markdup.metrics""; this.parameters = new String[]{""picard"", ""MarkDuplicates"", ""INPUT=""+this.inputfile.get(0), ""OUTPUT=""+ var2, ""REMOVE_DUPLICATES=TRUE"", ""AS=TRUE"", ""METRICS_FILE="" + var3, ""VALIDATION_STRINGENCY=SILENT""}; this.outputfile = new ArrayList<>(); this.outputfile.add(var2); } "	0	0	1	0	1	0
private void Func1() { playerArea.setLayout(new BoxLayout(playerArea,BoxLayout.Y_AXIS)); PlayerPanel var1[] = new PlayerPanel[NUM_PLAYER]; for (int var2=0;var2<NUM_PLAYER;var2++){ var1[var2] = new PlayerPanel(); var1[var2].setPreferredSize(new Dimension(7*ratio,9*ratio/NUM_PLAYER)); playerArea.add(var1[var2]); } } 	1	0	1	1	1	0
"private Map<String, List<FileReference>> Func1(String var1) throws JobExecutionException { Map<String, List<FileReference>> var2 = new HashMap<String, List<FileReference>>(); IMdekCallerQuery var3 = this.connectionFacade.getMdekCallerQuery(); if (var3 == null) { return var2; } String[] var4 = new String[]{""objId"", ""objIdPublished""}; for (String var5 : var4) { String var6 = ""select fdLink.data, fdLink.parentFieldId, fdLink.var15, "" + "" obj.objName, obj.objUuid, "" + "" fdRoot.fieldKey, fdPhase.fieldKey, fdPhase.fieldKey, fdDocs.fieldKey, fdLink.var15 "" + ""from ObjectNode oNode, "" + "" T01Object obj, "" + "" AdditionalFieldData fdRoot, "" + "" AdditionalFieldData fdPhase, "" + "" AdditionalFieldData fdDocs, "" + "" AdditionalFieldData fdLink "" + ""where "" + "" oNode.""+var5+"" = obj.id "" + "" and obj.id = fdRoot.objId"" + "" and fdRoot.id = fdPhase.parentFieldId"" + "" and fdPhase.id = fdDocs.parentFieldId"" + "" and fdDocs.id = fdLink.parentFieldId"" + "" and fdLink.fieldKey = 'link'""; IngridDocument var7 = var3.queryHQLToMap(var1, var6, null, """"); if (var7.getBoolean(IJobRepository.JOB_INVOKE_SUCCESS)) { IngridDocument var8 = MdekUtils.getResultFromResponse(var7); if (var8 != null) { @SuppressWarnings(""unchecked"") List<IngridDocument> var9 = (List<IngridDocument>) var8.get(MdekKeys.OBJ_ENTITIES); if (var9 != null) { for (IngridDocument var10 : var9) { String var11 = var10.getString(""fdLink.data""); String var12 = var10.getString(""obj.objName"") + ""("" + var10.getString(""obj.objUuid"") + "")/"" + var10.getString(""fdRoot.fieldKey"") + ""/"" + var10.getString(""fdPhase.fieldKey"") + ""/"" + var10.getString(""fdDocs.fieldKey"") + ""/"" + var10.getInt(""fdLink.var15""); String var13 = null; Long var14 = var10.getLong(""fdLink.parentFieldId""); Integer var15 = var10.getInt(""fdLink.var15""); String var16 = ""select fdExpires.data "" + ""from ObjectNode oNode, "" + "" T01Object obj, "" + "" AdditionalFieldData fdRoot, "" + "" AdditionalFieldData fdPhase, "" + "" AdditionalFieldData fdDocs, "" + "" AdditionalFieldData fdExpires "" + ""where "" + "" oNode.""+var5+"" = obj.id "" + "" and obj.id = fdRoot.objId"" + "" and fdRoot.id = fdPhase.parentFieldId"" + "" and fdPhase.id = fdDocs.parentFieldId"" + "" and fdDocs.id = fdExpires.parentFieldId"" + "" and fdExpires.parentFieldId = ""+var14+ "" and fdExpires.var15 = ""+var15+ "" and fdExpires.fieldKey = 'expires'""; IngridDocument var17 = var3.queryHQLToMap(var1, var16, null, """"); if (var17.getBoolean(IJobRepository.JOB_INVOKE_SUCCESS)) { IngridDocument var18 = MdekUtils.getResultFromResponse(var17); if (var18 != null) { @SuppressWarnings(""unchecked"") List<IngridDocument> var19 = (List<IngridDocument>) var18.get(MdekKeys.OBJ_ENTITIES); if (var19 != null && var19.size() == 1) { var13 = var19.get(0).getString(""fdExpires.data""); } } } FileReference var20 = new FileReference( var11, var12, var13 != null ? LocalDate.parse(var13, dateFormatter) : null ); if (!var2.containsKey(var11)) { List<FileReference> var21 = new ArrayList<FileReference>(); var21.add(var20); var2.put(var11, var21); } else { var2.get(var11).add(var20); } } } } } else { throw new JobExecutionException(var7.getString(""job_invoke_error_message"")); } } return var2; } "	0	0	1	0	0	0
"@Override @SideOnly(Side.CLIENT) public void Func1(ItemStack var1, EntityPlayer var2, List var3, boolean var4) { String var5 = Colors.DARK_GREY.code + LanguageUtility.getLocal(getUnlocalizedName() + "".info""); var3.add(var5); if (var1.getItemDamage() != ExplosiveItems.FRAGMENT.ordinal()) { final String var6 = getUnlocalizedName(var1) + "".info""; var5 = LanguageUtility.getLocal(var6); if (!var5.isEmpty() && !var5.equals(var6)) { if (var5.contains("","")) { String[] var7 = var5.var7("",""); for (String var8 : var7) { var3.add(var8.trim()); } } else { var3.add(var5); } } } if (var1.getItemDamage() == ExplosiveItems.BIOME_CHANGE.ordinal()) { int var9 = ExBiomeChange.getBiomeID(var1); if (var9 >= 0) { var3.add(Colors.RED.code + LanguageUtility.getLocal(getUnlocalizedName() + "".WIP.info"")); var3.add(Colors.RED.code + LanguageUtility.getLocal(getUnlocalizedName() + "".warning.WIP.info"")); var5 = LanguageUtility.getLocal(getUnlocalizedName(var1) + "".name.info""); var5 = var5.replace(""%1"", """" + (BiomeGenBase.getBiome(var9) == null ? Colors.RED.code + ""Error"" : BiomeGenBase.getBiome(var9).biomeName)); var3.add(var5); } } if (var1.getItemDamage() == ExplosiveItems.FRAGMENT.ordinal()) { var3.add(Colors.RED.code + LanguageUtility.getLocal(getUnlocalizedName() + "".warning.breaksBlocks.info"")); final FragBlastType var10 = ExFragment.getFragmentType(var1); if (var10 == FragBlastType.ARROW) { var5 = LanguageUtility.getLocal(getUnlocalizedName(var1) + "".info""); var5 = var5.replace(""%1"", """" + BlastArrows.ARROWS); var3.add(var5); } else if (var10 == FragBlastType.BLAZE) { var5 = LanguageUtility.getLocal(getUnlocalizedName(var1) + "".info""); var5 = var5.replace(""%1"", """" + BlastArrows.ARROWS); var3.add(var5); } else { var5 = LanguageUtility.getLocal(getUnlocalizedName() + "".fragment.info""); var3.add(var5); if (var10.blockMaterial != null) { var5 = LanguageUtility.getLocal(getUnlocalizedName() + "".fragment.damage.info""); var5 = var5.replace(""%1"", """" + (var10.blockMaterial.blockHardness * BlastFragments.START_VELOCITY)); var3.add(var5); } int var11 = var1.stackSize * (int) ExplosiveItems.FRAGMENT.sizePerUnit; var5 = LanguageUtility.getLocal(getUnlocalizedName() + "".fragment.frags.info""); var5 = var5.replace(""%1"", """" + var11); var3.add(var5); if (Engine.proxy.isShiftHeld()) { var3.add(LanguageUtility.getLocal(getUnlocalizedName() + "".fragment.damage.equation.info"")); var5 = LanguageUtility.getLocal(getUnlocalizedName() + "".fragment.velocity.equation.info""); var5 = var5.replace(""%1"", """" + BlastFragments.START_VELOCITY); var3.add(var5); var5 = LanguageUtility.getLocal(getUnlocalizedName() + "".fragment.frags.equation.info""); var5 = var5.replace(""%1"", """" + ExplosiveItems.FRAGMENT.sizePerUnit); var3.add(var5); } else { var5 = LanguageUtility.getLocal(""item.tooltip.description.more""); var5 = var5.replace(""%key"", Colors.AQUA.code + ""SHIFT""); var3.add(var5); } } } else { if (Engine.proxy.isShiftHeld()) { if (var1.getItemDamage() == ExplosiveItems.BIOME_CHANGE.ordinal()) { int var9 = ExBiomeChange.getBiomeID(var1); if (var9 >= 0) { var5 = LanguageUtility.getLocal(getUnlocalizedName(var1) + "".var9.info""); var5 = var5.replace(""%1"", """" + var9); var3.add(var5); } } IExplosiveHandler var12 = getExplosive(var1); var5 = LanguageUtility.getLocal(getUnlocalizedName() + "".explosive.name.info""); var5 = var5.replace(""%1"", """" + LanguageUtility.getLocal(var12.getTranslationKey())); var3.add(var5); var5 = LanguageUtility.getLocal(getUnlocalizedName() + "".explosive.size.info""); var5 = var5.replace(""%1"", """" + ((int) ((ExplosiveItems.values()[var1.getItemDamage()].sizePerUnit * var12.getYieldModifier()) * 100) / 100)); var3.add(var5); } else { var5 = LanguageUtility.getLocal(""item.tooltip.description.more""); var5 = var5.replace(""%key"", Colors.AQUA.code + ""SHIFT""); var3.add(var5); } } } "	0	0	0	0	0	1
"public boolean Func1(int var1, Task var2){ if (var1 >= taskList.size()){ return false; } prevTask = taskList.get(var1); prevCmd = ""mod""; taskList.set(var1, var2); JsonProcessor.writeJson(lastPath, taskList); return true; } "	1	0	1	1	1	0
public void Func1(T var1) { mDataHolder.Func1(var1); notifyItemInserted(0); } 	0	0	0	0	0	1
public ConnectFuture Func1() throws IOException { return connectFuture; } 	0	0	1	0	0	0
"@Test public void Func1() { final VirtualMachineTO var1 = Mockito.mock(VirtualMachineTO.class); final com.cloud.var2.Host var2 = Mockito.mock(com.cloud.var2.Host.class); final boolean var3 = false; final StartCommand var4 = new StartCommand(var1, var2, var3); final KvmStoragePoolManager var5 = Mockito.mock(KvmStoragePoolManager.class); final LibvirtUtilitiesHelper var6 = Mockito.mock(LibvirtUtilitiesHelper.class); final Connect var7 = Mockito.mock(Connect.class); final LibvirtVmDef var8 = Mockito.mock(LibvirtVmDef.class); final VirtualRoutingResource var9 = Mockito.mock(VirtualRoutingResource.class); final NicTO var10 = Mockito.mock(NicTO.class); final NicTO[] var11 = new NicTO[]{var10}; final String var12 = ""Test""; final String var13 = ""127.0.0.1""; when(libvirtComputingResource.getStoragePoolMgr()).thenReturn(var5); when(var1.getNics()).thenReturn(var11); when(var1.getType()).thenReturn(VirtualMachine.Type.DomainRouter); when(var1.getName()).thenReturn(var12); when(libvirtComputingResource.createVmFromSpec(var1)).thenReturn(var8); when(libvirtComputingResource.getLibvirtUtilitiesHelper()).thenReturn(var6); try { when(var6.getConnectionByType(var8.getHvsType())).thenReturn(var7); doNothing().when(libvirtComputingResource).createVbd(var7, var1, var12, var8); } catch (final LibvirtException e) { fail(e.getMessage()); } catch (final InternalErrorException e) { fail(e.getMessage()); } catch (final URISyntaxException e) { fail(e.getMessage()); } when(var5.connectPhysicalDisksViaVmSpec(var1)).thenReturn(true); try { doNothing().when(libvirtComputingResource).createVifs(var1, var8); when(libvirtComputingResource.startVm(var7, var12, var8.toString())).thenReturn(""SUCCESS""); when(var1.getBootArgs()).thenReturn(""ls -lart""); when(libvirtComputingResource.passCmdLine(var12, var1.getBootArgs())).thenReturn(true); when(var10.getIp()).thenReturn(var13); when(var10.getType()).thenReturn(TrafficType.Control); when(libvirtComputingResource.getVirtRouterResource()).thenReturn(var9); when(var9.connect(var13, 1, 5000)).thenReturn(true); } catch (final InternalErrorException e) { fail(e.getMessage()); } catch (final LibvirtException e) { fail(e.getMessage()); } final LibvirtRequestWrapper var14 = LibvirtRequestWrapper.getInstance(); assertNotNull(var14); final Answer var15 = var14.execute(var4, libvirtComputingResource); assertTrue(var15.getResult()); verify(libvirtComputingResource, times(1)).getStoragePoolMgr(); verify(libvirtComputingResource, times(1)).getLibvirtUtilitiesHelper(); try { verify(var6, times(1)).getConnectionByType(var8.getHvsType()); } catch (final LibvirtException e) { fail(e.getMessage()); } } "	0	0	0	0	0	1
"static ResultReturner Func1(Class<?> var1, Method var2) { Type var3 = GenericTypes.resolveType(var2.getGenericReturnType(), var1); Class<?> var4 = GenericTypes.getErasedType(var3); if (Void.TYPE.equals(var4)) { throw new IllegalStateException(String.format( ""Method %s#%s is annotated as if it should return a value, but the var2 is void."", var2.getDeclaringClass().getName(), var2.getName())); } else if (ResultIterable.class.isAssignableFrom(var4)) { return new ResultIterableResultReturner(var3); } else if (Stream.class.isAssignableFrom(var4)) { return new StreamReturner(var3); } else if (Iterator.class.isAssignableFrom(var4)) { return new IteratorResultReturner(var3); } else if (var2.isAnnotationPresent(SingleValue.class)) { return new SingleValueResultReturner(var3); } else if (var4.isArray()) { return new ArrayResultReturner(var4.getComponentType()); } else { return new DefaultResultReturner(var3); } } "	1	0	1	0	1	0
"boolean Func1() { final Marker var1 = enter_section_modified(builder); if (!tokenCheck(""singleImport"")) { cleanup(var1, IMPORT_DECLARATION); return false; } final boolean var2 = parseSingleImport(); if (!var2) { cleanup(var1, IMPORT_DECLARATION); return false; } if (currentIs(tok("":""))) parseImportBindings(!var2); else { if (currentIs(tok("",""))) { advance(); while (moreTokens()) { final boolean var3 = parseSingleImport(); if (!var3) { cleanup(var1, IMPORT_DECLARATION); return false; } if (currentIs(tok("":""))) { parseImportBindings(!var3); break; } else { if (currentIs(tok("",""))) advance(); else break; } } } } if (!tokenCheck("";"")) { cleanup(var1, IMPORT_DECLARATION); return false; } exit_section_modified(builder, var1, IMPORT_DECLARATION, true); return true; } "	0	0	1	0	1	0
boolean Func1() { switch (type) { case CLEAR: return true; case ADD: case REMOVE: return var1.getFactory() instanceof Pin; case ADD_ALL: case REMOVE_ALL: for (Component var1 : comps) { if (var1.getFactory() instanceof Pin) return true; } return false; case REPLACE: ReplacementMap var2 = (ReplacementMap) newValue; for (Component var1 : var2.getRemovals()) { if (var1.getFactory() instanceof Pin) return true; } for (Component var1 : var2.getAdditions()) { if (var1.getFactory() instanceof Pin) return true; } return false; case SET: return var1.getFactory() instanceof Pin && (attr == StdAttr.WIDTH || attr == Pin.ATTR_TYPE); case SET_FOR_CIRCUIT : return (attr == CircuitAttributes.NAME_ATTR || attr == CircuitAttributes.NAMED_CIRCUIT_BOX); default: return false; } } 	0	0	0	0	0	1
public CommandInterface Func1(String var1) throws InvalidInputException { CommandInterface var2 = null; InputSplitter var3 = new InputSplitter(var1); String var4 = var3.next(); CommandType var5 = AliasHandler.normalize(var4); switch (var5) { case ADD: var2 = new AddCommand(userInterface, collection, currentState, var3.remainder()); break; case SEARCH: var2 = new SearchCommand(userInterface, collection, var3.remainder()); break; case LIST: var2 = new ListCommand(userInterface, collection, currentState, var3.remainder()); break; case MARK: var2 = new MarkCommand(userInterface, collection, currentState, normalizeIndexInput(var3.remainder())); break; case EDIT: var2 = new EditCommand(userInterface, collection, currentState, normalizeIndexInput(var3.next()), var3.remainder()); break; case DELETE: var2 = new DeleteCommand(userInterface, collection, currentState, normalizeIndexInput(var3.remainder())); break; case SET: var2 = new SetCommand(userInterface, collection, var3.next(), var3.remainder()); break; case ALIAS: var2 = new AliasCommand(userInterface, collection, var3.next(), var3.remainder()); break; case HELP: var2 = new HelpCommand(userInterface, collection, var3.remainder()); break; case TUTORIAL: var2 = new TutorialCommand(userInterface, collection); break; case EXIT: var2 = new ExitCommand(userInterface, collection); break; default: var2 = new InvalidCommand(userInterface, collection); break; } return var2; } 	1	0	1	0	1	0
"protected String Func1(String var1) { return var1 .replaceAll(""\""(hostName)\"":\""[^\""]*\"""", ""\""$1\"":\""<hostname>\"""") .replaceAll(""\""hostAddress\"":[^,]*"", ""\""hostAddress\"":\""127\\.0\\.0\\.1\"""") .replaceAll(""\""bindPort\"":[0-9]+"", ""\""bindPort\"":0"") .replaceAll(""\""groupPort\"":[0-9]+"", ""\""groupPort\"":0"") .replaceAll(""\""port\"":[0-9]+"", ""\""port\"":0"") .replaceAll(""\""activateTime\"":[0-9]+"", ""\""activateTime\"":0"") .replaceAll(""\""time\"":[0-9]+"", ""\""time\"":0"") .replaceAll(""\""startTime\"":[0-9]+"", ""\""startTime\"":0"") .replaceAll(""\""upTimeSec\"":[0-9]+"", ""\""upTimeSec\"":0"") .replaceAll(""\""id\"":\""[0-9]+@[^:]*:([^:]*):[^\""]*\"",\""pid\"":[0-9]+"", ""\""id\"":\""0@127.0.0.1:$1:<uuid>\"",\""pid\"":0"") .replaceAll(""\""alias\"":\""[0-9]+@[^:]*:([^:]*):[^\""]*\"","", ""\""alias\"":\""0@127.0.0.1:$1:<uuid>\"","") .replaceAll(""\""buildId\"":\""[^\""]*\"""", ""\""buildId\"":\""Build ID\"""") .replaceAll(""\""version\"":\""[^\""]*\"""", ""\""version\"":\""<version>\"""") .replaceAll(""\""clientId\"":\""[0-9]+@[^:]*:([^:]*):[^\""]*\"""", ""\""clientId\"":\""0@127.0.0.1:$1:<uuid>\"""") .replaceAll(""\""logicalConnectionUid\"":\""[^\""]*\"""", ""\""logicalConnectionUid\"":\""<uuid>\"""") .replaceAll(""\""id\"":\""[^\""]*\"",\""logicalConnectionUid\"":\""[^\""]*\"""", ""\""id\"":\""<uuid>:SINGLE:testServer0:127.0.0.1:0\"",\""logicalConnectionUid\"":\""<uuid>\"""") .replaceAll(""\""vmId\"":\""[^\""]*\"""", ""\""vmId\"":\""0@127.0.0.1\"""") .replaceAll(""testServer1"", ""testServer0""); } "	0	0	1	1	0	0
"@Test public void Func1() throws Exception { List<String> var1 = Arrays.asList(""1:-2"", ""2:-1""); ObjectInspector var2 = PrimitiveObjectInspectorFactory.javaStringObjectInspector; testFeature(var1, var2, String.class); } "	0	0	1	1	1	0
@Test public void Func1() throws Exception { List<LongWritable> var1 = Arrays.asList(new LongWritable(111L), new LongWritable(222L)); ObjectInspector var2 = PrimitiveObjectInspectorFactory.writableLongObjectInspector; testFeature(var1, var2, LongWritable.class); } 	0	0	1	0	1	0
"@Override public void Func1(ConnectionEvent var1) { try { String var2 = ""NATS Connection disconnected.""; logger.debug(var2); plugin.onNATSEvent(NATSEvent.DISCONNECTED, var2); } catch (Exception e) { logger.error(""Runtime exception in plugin method OnNATSEvent (CLOSED): "", e); } } "	0	0	1	0	1	0
public int Func1() { return Func1(); } 	1	0	1	0	1	0
@Override public GameState Func1(Integer var1) { return this; } 	0	0	0	1	0	0
"private void Func1() { mFriendshipsAPI.friends(mUid, 50, 0, true, new WeiboRequestListener(mMainActivity) { @Override public void Func2(String var1) { super.Func2(var1); if (!TextUtils.isEmpty(var1)) { if (var1.startsWith(""{\""users\"""")) { Log.i(""................"", var1); mUserList = mUserList.parse(var1); mPersonalCenterAdapter = new PersonalCenterAdapter(mMainActivity, mUserList.userList); mFollowList.setAdapter(mPersonalCenterAdapter); } } } }); mUsersAPI.counts(mUids, new WeiboRequestListener(mMainActivity) { @Override public void Func2(String var1) { super.Func2(var1); Log.i(""................"", var1); if (!TextUtils.isEmpty(var1)) { mUserCounts = mUserCounts.parse(var1); mPersonalCenterAdapter.setmUserCounts(mUserCounts).setCounts(mView); Log.d(TAG, ""mUserCounts: "" + mUserCounts.followers_count); } } }); mUsersAPI.show(mUid,new WeiboRequestListener(mMainActivity) { @Override public void Func2(String var1) { super.Func2(var1); Log.i("".....user screen name"", var1); user = user.parse(var1); Log.i("".....user"", String.valueOf(user)); mPersonalCenterAdaper.setUserInfo(user).holderLoginData(mView,user); } }); } "	0	0	1	0	1	0
@CodeTranslate public void Func1() { boolean var1 = someMethodWithBooleanReturn(); } 	1	0	1	1	0	0
public byte[] Func1() { if (bytes == null) { return null; } else { return bytes.clone(); } } 	1	0	1	0	1	0
"public synchronized void Func1(ChannelHandlerContext var1) { if (!isRunning) { this.var1 = var1; this.timerTask = timer.scheduleAtFixedRate(() -> { try { nudgeQueue(); } catch (Throwable t) { logger.error(""Exception in MessageQueue"", t); } }, Config.NET_MAX_QUEUE_RATE, Config.NET_MAX_QUEUE_RATE, TimeUnit.MILLISECONDS); this.isRunning = true; } } "	0	0	1	1	0	0
"private void Func1(ICommandSender var1, String var2, String var3) { var1.addChatMessage(new ChatComponentText(String.format(TTCore.lang.localize(""command.config.var3."" + var3), var2))); } "	0	0	1	1	1	0
@Override public void Func1() { super.Func1(); SnackbarManager.init(getApplicationContext(),SnackbarConfiguration.configure(new SnackbarConfiguration.Builder() .gravity(SnackbarConfiguration.Gravity.GRAVITY_TOP) .type(SnackbarConfiguration.SnackbarType.SINGLE_SNACKBAR))); } 	0	0	1	1	0	0
@Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { TextureView var4 = new TextureView(getActivity()); var4.setSurfaceTextureListener(this); return var4; } 	1	0	1	1	1	0
"@Override public void Func1(ValidationContext var1) { logger.info(""Validating Institutions...""); String var2 = null; MultivaluedMap<String, String> var3 = var1.getHttpRequest().getDecodedFormParameters(); List<FormMessage> var4 = new ArrayList<>(); logger.info(""Form Data: "" + var3); String var5 = var3.getFirst(FIELD_INSTITUTIONS); if (Validation.isBlank(var5)) { var4.add(new FormMessage(FIELD_INSTITUTIONS, MISSING_INSTITUTION_MESSAGE)); var1.validationError(var3, var4); var1.error(Errors.INVALID_REGISTRATION); return; } try { String[] var6 = var5.split("",""); String var7 = var3.getFirst(RegistrationPage.FIELD_EMAIL); var2 = var7.split(""@"")[1]; logger.info(""Email Domain: "" + var2); Set<Institution> var8 = findInstitutionsByDomain(var2); if (var8.isEmpty()) { var4.add(new FormMessage(RegistrationPage.FIELD_EMAIL, UNKNOWN_EMAIL_DOMAIN_MESSAGE, var2)); var1.validationError(var3, var4); var1.error(Errors.INVALID_REGISTRATION); return; } for (String var9 : var6) { Institution var10 = getInstitution(var9); if (var10 == null) { var4.add(new FormMessage(FIELD_INSTITUTIONS, UNKNOWN_INSTITUTION_MESSAGE)); } if (!var8.contains(var10)) { var4.add(new FormMessage(FIELD_INSTITUTIONS, INVALID_INSTITUTION_MESSAGE, var10.getName(), var2)); } } } catch (Exception e) { logger.error(""Error occurred while validating institution(s) against \"""" + var2 + ""\"" var2"", e); var4.add(new FormMessage(FIELD_INSTITUTIONS, INSTITUTION_ERROR_MESSAGE, var2)); } if (var4.isEmpty()) { var1.success(); } else { var1.validationError(var3, var4); var1.error(Errors.INVALID_REGISTRATION); } } "	1	0	1	0	0	0
"public void Func1() { List<XYChart.Series<Number, Number>> var1 = new LinkedList<>(); for (String var2 : filter) { XYChart.Series<Number, Number> var3 = new XYChart.Series<>(); var3.setName(getName() + ""/"" + var2 + ""/"" + LocalTime.now().toString()); var1.add(var3); } filterSeries.add(var1); } "	0	0	1	0	1	0
"@Override public Application Func1(Application var1) throws TechnicalException { LOGGER.debug(""Update Application [{}]"", var1.getId()); Statement Func1 = QueryBuilder.Func1(APPLICATIONS_TABLE) .with(set(""name"", var1.getName())) .and(set(""description"", var1.getDescription())) .and(set(""type"", var1.getType())) .and(set(""created_at"", var1.getCreatedAt())) .and(set(""updated_at"", var1.getUpdatedAt())) .and(set(""group"", var1.getGroup())) .and(set(""status"", var1.getStatus().toString())) .where(eq(""id"", var1.getId())); session.execute(Func1); return findById(var1.getId()).orElse(null); } "	0	0	1	0	0	0
"@Test public void Func1() { JsonMessageObject var1 = validator.validate(""{\""invalidfield\"":\""invalid_value\""}""); assertTrue(true); } "	0	0	1	0	1	0
"public GTFSFeed Func1 (String var1) { try { return cache.Func1(var1); } catch (ExecutionException e) { LOG.info(""Error loading local MapDB."", e); deleteLocalDBFiles(var1); return null; } } "	0	0	1	0	1	0
"public Result Func1() { JsonNode var1 = request().body().asJson(); String var2 = var1.get(""var2"").asText(); String var3 = var1.get(""var3"").asText(); int var4 = var1.get(""var4"").asInt(); KeywordProject var5 = keywordProjectService.get(var2,""show_action"",""value_delay""); if (var3.equals(var5.getString(""var3""))) { if((var5.getValueDelay() == var4)) { return status(304); } } var5.put(""var3"", var3); var5.setValueDelay(var4); keywordProjectService.Func1(var5); return status(202, var2); } "	0	0	1	1	1	0
@Nullable public static ImageProperty Func1(@NonNull List<? extends ImageProperty> var1, int var2, int var3) { Collections.sort(var1, new ImagePropertyComparator()); if (var1.size() == 0) { return null; } if (var2 == 0 && var3 == 0) { if (UiSettings.getInstance().getContentSize() == ContentSize.SMALL) { return var1.get(0); } else if (UiSettings.getInstance().getContentSize() == ContentSize.LARGE) { return var1.get(var1.size() - 1); } return var1.get((int)Math.max(Math.ceil((double)var1.size() / 2d), var1.size() - 1)); } else { int var4 = 0; for (int var5 = 0, var6 = var1.size(); var5 < var6; var5++) { int var7 = var1.get(var5).getDimensions().getWidth(); int var8 = var1.get(var5).getDimensions().getHeight(); if (var2 >= var7 && var3 >= var8) { var4 = var5; } } return var1.get(var4); } } 	0	0	1	0	1	0
"private void Func1(String var1, Attributes var2) { if (var1.equalsIgnoreCase(""br"")) { } else if (var1.equalsIgnoreCase(""p"")) { handleP(mSpannableStringBuilder); } else if (var1.equalsIgnoreCase(""div"")) { handleP(mSpannableStringBuilder); } else if (var1.equalsIgnoreCase(""strong"")) { start(mSpannableStringBuilder, new Bold()); } else if (var1.equalsIgnoreCase(""b"")) { start(mSpannableStringBuilder, new Bold()); } else if (var1.equalsIgnoreCase(""em"")) { start(mSpannableStringBuilder, new Italic()); } else if (var1.equalsIgnoreCase(""cite"")) { start(mSpannableStringBuilder, new Italic()); } else if (var1.equalsIgnoreCase(""dfn"")) { start(mSpannableStringBuilder, new Italic()); } else if (var1.equalsIgnoreCase(""i"")) { start(mSpannableStringBuilder, new Italic()); } else if (var1.equalsIgnoreCase(""big"")) { start(mSpannableStringBuilder, new Big()); } else if (var1.equalsIgnoreCase(""small"")) { start(mSpannableStringBuilder, new Small()); } else if (var1.equalsIgnoreCase(""font"")) { startFont(mSpannableStringBuilder, var2); } else if (var1.equalsIgnoreCase(""blockquote"")) { handleP(mSpannableStringBuilder); start(mSpannableStringBuilder, new Blockquote()); } else if (var1.equalsIgnoreCase(""tt"")) { start(mSpannableStringBuilder, new Monospace()); } else if (var1.equalsIgnoreCase(""a"")) { startA(mSpannableStringBuilder, var2, mBaseUri); } else if (var1.equalsIgnoreCase(""span"") && var2.getValue(""class"").equals(""user-mention"")) { startSpan(mSpannableStringBuilder, var2); } else if (var1.equalsIgnoreCase(""u"")) { start(mSpannableStringBuilder, new Underline()); } else if (var1.equalsIgnoreCase(""sup"")) { start(mSpannableStringBuilder, new Super()); } else if (var1.equalsIgnoreCase(""sub"")) { start(mSpannableStringBuilder, new Sub()); } else if (var1.equalsIgnoreCase(""code"")) { start(mSpannableStringBuilder, new InlineCode()); } else if (var1.equalsIgnoreCase(""pre"")) { start(mSpannableStringBuilder, new CodeBlock()); } else if (var1.length() == 2 && Character.toLowerCase(var1.charAt(0)) == 'h' && var1.charAt(1) >= '1' && var1.charAt(1) <= '6') { handleP(mSpannableStringBuilder); start(mSpannableStringBuilder, new Header(var1.charAt(1) - '1')); } else if (var1.equalsIgnoreCase(""img"")) { String var3 = var2.getValue("""", ""class""); if (var3 != null && var3.equals(""emoji"")) { startImg(mSpannableStringBuilder, var2, mEmojiGetter); } else { startImg(mSpannableStringBuilder, var2, mImageGetter); } } else if (mTagHandler != null) { mTagHandler.handleTag(true, var1, mSpannableStringBuilder, mReader); } } "	0	0	1	1	0	0
@Override protected Locale Func1(final HttpServletRequest var1) { final Locale var2 = var1.getLocale(); if (StringUtils.isBlank(casProperties.getLocale().getDefaultValue()) || var2.getLanguage().equals(casProperties.getLocale().getDefaultValue())) { return var2; } return new Locale(casProperties.getLocale().getDefaultValue()); } 	1	1	1	1	0	0
public long Func1() { if (0 < waitPhoneHomeTimeout) { return waitPhoneHomeTimeout * 60000; } return 0; } 	0	0	1	0	1	0
public static String Func1() { return newText; } 	0	0	1	0	0	0
public boolean Func1(Type var1, Type var2) { return isVoid(false, var1, true, var2); } 	0	0	1	0	1	0
"private Filter Func1(String var1) { String[] var2 = var1.split("":"", 2); if (var2.length == 2) { String var3 = var2[0].toLowerCase(); if (!validFilterType(var3)) { return null; } String var4 = var2[1].replaceAll(""[\""'`;]+|--"", "" "") .replaceAll("" +"", "" "").trim(); if (""cpv"".equals(var3)) { var4 = var4.replaceAll(""[^0-9,]"", """"); if (!var4.matches(""\\d{8}(,\\d{8})*"")) { return null; } } else if (""date"".equals(var3)) { if (var4.matches(""\\d{4}-\\d{2}-\\d{2}"")) { var4 = String.format(""%var1:%var1"", var4, var4); } if (!var4 .matches(""\\d{4}-\\d{2}-\\d{2}:\\d{4}-\\d{2}-\\d{2}"")) { return null; } } else if (""doc"".equals(var3)) { var4 = var4.toUpperCase(); if (!var4.matches(""[A-Z0-9]"")) { return null; } } else if (""flags"".equals(var3) || ""value"".equals(var3)) { var4 = var4.replaceAll(""[^0-9\\-]"", """"); if (var4.matches(""\\d+"")) { var4 = String.format(""%var1-%var1"", var4, var4); } if (!var4.matches(""\\d+-\\d+"")) { return null; } } else if (""indicators"".equals(var3)) { var4 = var4.replaceAll(""[\\[\\] ]"", """"); if (""null"".equals(var4) || !var4.matches(""[A-Za-z0-9]+(,[A-Za-z0-9]+)*"")) { return null; } } else if (""after"".equals(var3)) { if (!var4.matches(""\\d{1,7}-2\\d{3}"")) { return null; } } if (!var4.isEmpty()) { return new Filter(var3, var4); } } return null; } "	0	0	1	1	0	0
@Hide(OS.NT) public static void Func1(PyObject var1, int var2) { if (posix.Func1(absolutePath(var1), var2) < 0) { throw errorFromErrno(var1); } } 	0	0	0	1	1	0
@Hide(OS.NT) public static String Func1(PyObject var1) { try { return posix.Func1(absolutePath(var1)); } catch (IOException ioe) { throw Py.OSError(ioe); } } 	1	0	1	0	1	0
@Hide(OS.NT) public static void Func1(PyObject var1, int var2, int var3) { if (posix.Func1(absolutePath(var1), var2, var3) < 0) { throw errorFromErrno(var1); } } 	0	0	0	1	1	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.activity_add_school_subject); mDatabase =  FirebaseDatabase.getInstance().getReference(); schoolSubjectAuto = (AutoCompleteTextView) this.findViewById(R.var8.schoolSubjectAutoCompleteTextView); schoolSubjects = (ListView) this.findViewById(R.var8.schoolSubjectListView); SharedPreferences var2 = getSharedPreferences(MY_PREFS_NAME, MODE_PRIVATE); schoolSubjectList = var2.getStringSet(""schoolSubject"", null); if(schoolSubjectList != null) { List<String> var3 = new ArrayList<String>(schoolSubjectList); ArrayAdapter<String> var4 = new ArrayAdapter<String>(context, android.R.layout.simple_list_item_1,  var3); schoolSubjects.setAdapter(var4); } addListAutocomplete(); schoolSubjects.setOnItemClickListener(new AdapterView.OnItemClickListener() { public void Func2(final AdapterView<?> var5, View var6, final int var7, long var8) { AlertDialog.Builder var9; var9 = new AlertDialog.Builder(context); var9.setTitle(""delete"") .setMessage(""do not want to follow "" + var5.getItemAtPosition(var7).toString() + "" anymore?"") .setPositiveButton(""yes"", new DialogInterface.OnClickListener() { public void Func3(DialogInterface var10, int var11) { SharedPreferences.Editor var12 = getSharedPreferences(MY_PREFS_NAME, MODE_PRIVATE).edit(); schoolSubjectList.remove(var5.getItemAtPosition(var7).toString()); var12.putStringSet(""schoolSubject"", schoolSubjectList); var12.apply(); List<String> var3 = new ArrayList<String>(schoolSubjectList); ArrayAdapter<String> var4 = new ArrayAdapter<String>(context, android.R.layout.simple_list_item_1,  var3); schoolSubjects.setAdapter(var4); } }) .setNegativeButton(""no"", new DialogInterface.OnClickListener() { public void Func3(DialogInterface var10, int var11) { } }) .setIcon(android.R.drawable.ic_dialog_alert) .show(); } }); } "	1	0	1	1	1	0
"public ContentValues Func1 () { ContentValues var1 = new ContentValues(); var1.put(AvBContract.PlaceEntry.COLUMN_PLACE_ID, GOOGLEPLACESID); var1.put(AvBContract.PlaceEntry.COLUMN_ADRESS, ""Rua João Neves""); var1.put(AvBContract.PlaceEntry.COLUMN_DATE_TIME, ""20150225 14:45""); var1.put(AvBContract.PlaceEntry.COLUMN_STATUS, ""up""); var1.put(AvBContract.PlaceEntry.COLUMN_PHONE, ""51 4321-0293""); var1.put(AvBContract.PlaceEntry.COLUMN_OPEN_HOURS, ""08:00 - 17:00""); return var1; } "	0	0	1	1	0	0
"@Test public void Func1() throws IOException { final ThreadLocal<Collection<String>> var1 = new ThreadLocal<Collection<String>>(); final UriLocator var2 = createJarLocator(var1); var2.locate(""classpath:com/**.css""); final Collection<String> var3 = var1.get(); Assert.assertNotNull(var3); Assert.assertEquals(Arrays.toString(new String[] { ""com/app/level1/level2/styles/style.css"", ""com/app/level1/level2/level2.css"", ""com/app/level1/level1.css"" }), Arrays.toString(var3.toArray())); } "	0	0	1	0	1	0
"public void Func1() throws Exception { BulkProcessorTestListener var1 = new BulkProcessorTestListener(); int var2 = randomIntBetween(10, 100); BulkProcessor var3 = BulkProcessor.builder(client(), var1).setName(""foo"") .setConcurrentRequests(randomIntBetween(0, 1)).setBulkActions(var2) .setFlushInterval(TimeValue.timeValueHours(24)).setBulkSize(new ByteSizeValue(randomIntBetween(1, 10), RandomPicks.randomFrom(random(), ByteSizeUnit.values()))) .build(); MultiGetRequestBuilder var4 = indexDocs(client(), var3, var2); assertThat(var3.isOpen(), is(true)); assertThat(var3.awaitClose(1, TimeUnit.MINUTES), is(true)); if (randomBoolean()) { // check if we can call it multiple times if (randomBoolean()) { assertThat(var3.awaitClose(1, TimeUnit.MINUTES), is(true)); } else { var3.close(); } } assertThat(var3.isOpen(), is(false)); assertThat(var1.beforeCounts.get(), greaterThanOrEqualTo(1)); assertThat(var1.afterCounts.get(), greaterThanOrEqualTo(1)); assertThat(var1.bulkFailures.size(), equalTo(0)); assertResponseItems(var1.bulkItems, var2); assertMultiGetResponse(var4.get(), var2); } "	0	0	1	0	0	0
public int Func1() throws JspException { String var1 = getPermission(); boolean var2 = showTagBody( var1 ); if ( var2 ) { return TagSupport.EVAL_BODY_INCLUDE; } else { return TagSupport.SKIP_BODY; } } 	0	0	1	0	1	0
"private RObject Func1(RedissonReference var1, Class var2) throws Exception { if (var1.getType() != null) { for (Method var3 : RedissonClient.class.getDeclaredMethods()) { if (var3.getName().startsWith(""get"") && var3.getReturnType().isAssignableFrom(var1.getType()) && var3.getReturnType().isAssignableFrom(var2)) { if (var1.isDefaultCodec() && var3.getParameterCount() == 1) { return (RObject) var3.invoke(redisson, var1.getKeyName()); } else if (!var1.isDefaultCodec() && var3.getParameterCount() == 2 && String.class.equals(var3.getParameterTypes()[0]) && Codec.class.equals(var3.getParameterTypes()[1])) { return (RObject) var3.invoke(redisson, var1.getKeyName(), codecProvider.getCodec(var1.getCodecType())); } } } } throw new ClassNotFoundException(""No RObject is found to match class type of "" + var1.getTypeName() + "" with codec type of "" + var1.getCodecName()); } "	1	1	1	1	0	0
"@Before public void Func1() throws Exception { TitleLookup var1 = mock(TitleLookup.class); when(var1.getDatasetTitle(Matchers.<String>any())).thenReturn(""The little Mermaid""); when(var1.getSpeciesName(Matchers.<String>any())).thenReturn(""Abies alba Mill.""); query = ""{\""type\"":\""and\"",\""predicates\"":[{\""type\"":\""or\"",\""predicates\"":[{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""4408732\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2490613\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2494708\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""5231198\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2490669\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2492606\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2492371\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2494642\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""5231209\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""5231190\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2494155\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2491557\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2490604\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2491506\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2482501\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""5229493\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2491544\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2491534\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2490681\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2492462\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2494422\""},{\""type\"":\""equals\"",\""key\"":\""TAXON_KEY\"",\""value\"":\""2482492\""}]},{\""type\"":\""within\"",\""geometry\"":\""POLYGON((-10.063476 43.992814,-10.063476 35.889050,5.317382 35.889050,5.317382 43.992814,-10.063476 43.992814))\""},{\""type\"":\""or\"",\""predicates\"":[{\""type\"":\""equals\"",\""key\"":\""COUNTRY\"",\""value\"":\""PT\""},{\""type\"":\""equals\"",\""key\"":\""COUNTRY\"",\""value\"":\""ES\""}]}]}""; } "	0	0	1	1	1	0
"@Override public void Func1(Capitulo var1) throws Exception { String var2 = new Navegador().get(var1.getPath()); String var3 = getFirstMacth(""\""\\d+\"">(\\d+)</option>	</select>"", var2, ""Error: no se pudo obtener el numero de var3""); var1.setPaginas(Integer.parseInt(var3)); } "	0	0	1	1	0	0
@Override public NBTTagCompound Func1(NBTTagCompound var1){ this.writeSyncableNBT(var1, NBTType.SAVE_TILE); return var1; } 	0	0	1	1	0	0
protected String[] Func1() throws IOException { List<String> var1 = new ArrayList<>(); while (input.incrementToken()) { CharTermAttribute var2 = input.getAttribute(CharTermAttribute.class); OffsetAttribute var3 = input.getAttribute(OffsetAttribute.class); char[] var4 = var2.var4(); String var5 = null; try { var5 = new String(var4, 0, var3.endOffset() - var3.startOffset()); } catch (StringIndexOutOfBoundsException ioe) { LOG.error(ioe.toString()); var5 = ((PackedTokenAttributeImpl) var3).toString(); } var1.add(var5); AttributeSource var6 = input.cloneAttributes(); tokenAttrs.add(var6); } String[] var7 = new String[var1.size()]; for (int var8 = 0; var8 < var7.length; var8++) { var7[var8] = var1.get(var8); } return var7; } 	0	0	1	0	1	0
"EMPreferences Func1(Properties var1) { final EMPreferences var2 = new EMPreferences(); if(var1 != null) { final String[] var3 = getStringArray(var1, EMPreferencesKey.MUSIC_DIRECTORIES); final String var4 = var1.getProperty(EMPreferencesKey.METAFLAC.toString()); final String var5 = var1.getProperty(EMPreferencesKey.DATABASE_HOME.toString()); final Boolean var6 = getBoolean(var1, EMPreferencesKey.DATABASE_ROLLBACK); final Integer var7 = getInteger(var1, EMPreferencesKey.SERVER_PORT); final String var8 = var1.getProperty(EMPreferencesKey.LOG_FILE.toString()); final StringBuilder var9 = new StringBuilder(); var2.setMusicDirectories(var3); var2.setMetaFLACCommand(var4); var2.setDatabaseHome(var5); var2.setDatabaseRollback(var6); var2.setServerPort(var7); var2.setLogFile(var8); var9.append(""=== Loaded Preferences ===\n""); var9.append(""Music Directories: "").append(Arrays.toString(var3)).append('\n'); var9.append(""MetaFLAC Command:  "").append(var4).append('\n'); var9.append(""Database Home:     "").append(var5).append('\n'); var9.append(""Database Rollback: "").append(var6).append('\n'); var9.append(""Server Port:       "").append(var7).append('\n'); var9.append(""Log File:          "").append(var8).append('\n'); var9.append(""===== End Preferences ===="").append('\n'); LOG.info(var9.toString()); } return var2; } "	0	0	1	1	0	0
"@XmlElement(name = ""tag-value"") public List<ODTagValue> Func1() { return tagValues; } "	0	0	1	1	0	0
"public final static boolean Func1() { boolean Func1 = false; String var2 = new ContextProperties().getProperty(""run.as""); if (""REMOTE"".equals(var2)) { Func1 = true; } return Func1; } "	0	0	1	1	1	0
"@Override public void Func1() throws InitializationException { try { Config var1 = m_configDao.findByName(CONFIG_NAME, ConfigEntity.READSET_FULL); String var2 = var1.getContent(); m_company = DefaultSaxParser.parse(var2); m_configId = var1.getId(); m_modifyTime = var1.getModifyDate().getTime(); } catch (DalNotFoundException e) { try { String var2 = Files.forIO().readFrom( this.getClass().getResourceAsStream(""/var1/default-product-line-var1.xml""), ""utf-8""); Config var1 = m_configDao.createLocal(); var1.setName(CONFIG_NAME); var1.setContent(var2); m_configDao.insert(var1); m_company = DefaultSaxParser.parse(var2); m_configId = var1.getId(); m_modifyTime = var1.getModifyDate().getTime(); } catch (Exception ex) { Cat.logError(ex); } } catch (Exception e) { Cat.logError(e); } if (m_company == null) { m_company = new Company(); } m_domainToProductLines = buildDomainToProductLines(); } "	0	0	1	0	1	0
private DpsAnalysis Func1(ChampionInfo var1, Build var2, GamePhase var3) throws JSONException { var2.clearActiveSkills(); Skill[] var4 = var1.getRawSkills(); DpsAnalysis var5 = new DpsAnalysis(); Scaling var6 = new Scaling(); var5.bonuses.clear(); int var7 = 0; for (Skill var8: var4) { List<JSONArray> var9 = var8.getAnalysisMethod(Method.METHOD_DPS); boolean var10 = var8 instanceof Passive; int var11 = var3.var11[var7++]; if (!var10 && var11 == 0) continue; for (JSONArray var12 : var9) { int var13 = 0; int var14 = var12.getInt(var13++); int var15 = var14 & Method.BASE_METHOD_MASK; int var16 = var12.getInt(var13++); int var17 = var12.getInt(var13++); int var18 = var8.ranks; int var19 = 0; boolean var20 = false; if (var10) { var19 = var12.getInt(var13++); if (var19 == 0) { var18 = 1; } else { var18 = var19; var20 = true; } } else { var18 = var8.ranks; } double[] var21 = new double[var16]; String[] var22 = new String[var16]; for (int var23 = 0; var23 < var17; var23++) { double var24 = 0; for (int var25 = 0; var25 < var18; var25++) { if (var20) { int var26 = var12.getInt(var13++); if (var3.var26 >= var26) { var24 = var12.getDouble(var13++); } else { var13++; } } else { int var27 = var25 + 1; if (var11 >= var27) { var24 = var12.getDouble(var13++); } else { var13++; } } } for (int var25 = 0; var25 < var16; var25++) { var13 = parseScaling(var12, var13, var18, var11, var6); if ((int)var6.var6 == Method.SPECIAL_USE_BASE_AS_SCALING) { var21[var25] = var24; var24 = 0; } else { var21[var25] = var6.var6; } var22[var25] = var6.type; } String var28 = var12.getString(var13++); for (int var25 = 0; var25 < var16; var25++) { var5.var4.add(var2.addActiveSkill(var8, 0, var21[var25], var22[var25], var28)); } if (var24 != 0) var5.var4.add(var2.addActiveSkill(var8, var24, 0, Build.SN_NULL, var28)); } } } double[] var29 = var2.calculateStatWithActives(var3.gold, var3.var26); var5.as = var29[Build.STAT_AS]; var5.damagePerAa = var29[Build.STAT_TOTAL_AD] + var29[Build.STAT_AA_TRUE_DAMAGE] + var29[Build.STAT_AA_MAGIC_DAMAGE]; var5.dps = var5.as * var5.damagePerAa; var5.range = var29[Build.STAT_TOTAL_RANGE]; var5.bonuses.clear(); for (BuildSkill var30 : var5.var4) { if (var30.totalBonus == 0) continue; StatBonus var31 = new StatBonus(); var31.name = var30.skill.name; var31.value = var30.totalBonus; var31.statTypeId = var30.bonusTypeId; var5.bonuses.add(var31); } return var5; } 	0	0	0	0	0	1
@Override public boolean Func1() { return !outgoingRequest; } 	0	0	1	1	0	0
@Override public double Func1() { return this.phenotypeScore; } 	0	0	1	1	0	0
@Override public boolean Func1() { return outgoingRequest; } 	0	0	1	1	0	0
@Override public void Func1() { newEventForm.cancelEvent(); } 	1	0	0	0	1	0
"private void Func1( Intent var1 ) { Timber.d(""FOUND_MATCHES""); long var2 = Long.parseLong( var1.getExtras().getString(GcmConstants.GCM_MSG_FOUND_MATCHES_QUERY_ID) ); tripsResource.getQuery(var2) .observeOn(Schedulers.io()) .subscribeOn(AndroidSchedulers.mainThread()) .subscribe( new Action1<RunningTripQuery>() { @Override public void Func2(RunningTripQuery var3) { final SharedPreferences var4 = getApplicationContext().getSharedPreferences(Constants.SHARED_PREF_FILE_PREFERENCES, Context.MODE_PRIVATE); SharedPreferences.Editor var5 = var4.edit(); var5.putBoolean(Constants.SHARED_PREF_KEY_SEARCHING, false); var5.putBoolean(Constants.SHARED_PREF_KEY_ACCEPTED, false); var5.putLong(Constants.SHARED_PREF_KEY_QUERY_ID, -1); var5.apply(); Bundle var6 = new Bundle(); var6.putDouble(JoinDispatchFragment.KEY_CURRENT_LOCATION_LATITUDE, var3.getQuery().getStartLocation().getLat()); var6.putDouble(JoinDispatchFragment.KEY_CURRENT_LOCATION_LONGITUDE, var3.getQuery().getStartLocation().getLng()); var6.putDouble(JoinDispatchFragment.KEY_DESTINATION_LATITUDE, var3.getQuery().getDestinationLocation().getLat()); var6.putDouble(JoinDispatchFragment.KEY_DESTINATION_LONGITUDE, var3.getQuery().getDestinationLocation().getLng()); var6.putInt(JoinDispatchFragment.KEY_MAX_WAITING_TIME, (int) var3.getQuery().getMaxWaitingTimeInSeconds()); if(LifecycleHandler.isApplicationInForeground()) { Intent var7 = new Intent(Constants.EVENT_CHANGE_JOIN_UI); var7.putExtras(var6); LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(var7); } else { Intent var7 = new Intent(getApplicationContext(), MainActivity.class); var7.putExtras(var6); PendingIntent var8 = PendingIntent.getActivity(getApplicationContext(), 0, var7, PendingIntent.FLAG_UPDATE_CURRENT); createNotification(getString(R.string.found_matches_title), getString(R.string.found_matches_msg), GcmConstants.GCM_NOTIFICATION_FOUND_MATCHES_ID , var8); } } }, new Action1<Throwable>() { @Override public void Func2(Throwable var9) { Timber.e(""Something went wrong when downloading join request: "" + var9.getMessage()); } }); } "	1	0	0	1	0	0
"private EditorDescriptor Func1(DatastreamEditorType var1) { EditorDescriptor var2 = editorCache.get(var1); if (var2 != null) { return var2; } DatastreamEditor var3 = null; String var4 = """"; switch (var1) { case OCR: var4 = i18n.ImportBatchItemEditor_TabOcr_Title(); var3 = TextEditor.ocr(i18n); break; case NOTE: var4 = i18n.ImportBatchItemEditor_TabNote_Title(); var3 = TextEditor.note(i18n); break; case MEDIA: var4 = i18n.DigitalObjectEditor_MediaEditor_Title(); var3 = new MediaEditor(i18n); break; case MODS: var4 = i18n.ImportBatchItemEditor_TabMods_Title(); var3 = new ModsMultiEditor(i18n); break; case PARENT: var4 = i18n.DigitalObjectEditor_ParentEditor_Title(); var3 = new DigitalObjectParentEditor(i18n); break; case CHILDREN: var4 = i18n.DigitalObjectEditor_ChildrenEditor_Title(); var3 = new DigitalObjectChildrenEditor(i18n, places); break; case ATM: var4 = i18n.DigitalObjectEditor_AdministrationEditor_Title(); var3 = new DigitalObjectAdministrationEditor(i18n); break; } var4 = ClientUtils.format(""<b>%s</b>"", var4); var2 = new EditorDescriptor(var3, var4, var1); editorCache.put(var1, var2); attachDatastreamEditor(var3); return var2; } "	0	0	0	0	0	1
"@Override public void Func1() { while (true) { long var1 = System.currentTimeMillis(); Map<String, List<IDeviceEvent>> var2 = new HashMap<String, List<IDeviceEvent>>(); synchronized (eventsByAssignment) { var2.putAll(eventsByAssignment); eventsByAssignment.clear(); } Set<String> var3 = var2.keySet(); for (String var4 : var3) { try { IDeviceAssignment var5 = getDeviceManagement().getDeviceAssignmentByToken(var4); DeviceAssignmentState var6 = (var5.getState() != null) ? DeviceAssignmentState.copy(var5.getState()) : new DeviceAssignmentState(); List<IDeviceEvent> var7 = var2.get(var4); mergeEvents(var6, var7); getDeviceManagement().updateDeviceAssignmentState(var4, var6); } catch (SiteWhereException e) { LOGGER.warn(""Unable to update device var5 var6."", e); } } long var8 = System.currentTimeMillis() - var1; if (var8 < FLUSH_INTERVAL) { try { Thread.sleep(var8); } catch (InterruptedException e) { LOGGER.info(""State manager persistence thread shut down."", e); return; } } } } "	1	0	0	0	1	0
public void Func1(String var1) { this.var1 = var1; } 	1	0	1	1	1	0
"@Test public void Func1() throws RedmineException { final Issue var1 = IssueFactory.create(projectId, ""summary 1 here""); issueManager.createIssue(var1); final Issue var2 = IssueFactory.create(projectId, ""summary 2 here""); issueManager.createIssue(var2); String var3 = ""another"" + new Random().nextInt(); final Issue var4 = IssueFactory.create(projectId, var3); issueManager.createIssue(var4); final User var5 = userManager.getCurrentUser(); Params var6 = new Params() .add(""set_filter"", ""1"") .add(""f[]"", ""var3"") .add(""op[var3]"", ""~"") .add(""v[var3][]"", var3) .add(""f[]"", ""author_id"") .add(""op[author_id]"", ""~"") .add(""v[author_id][]"", var5.getId()+""""); final ResultsWrapper<Issue> var7 = issueManager.getIssues(var6); assertThat(var7.getResults()).hasSize(1); } "	0	0	1	1	0	0
"@Test public void Func1() { final TreeNode.Root var1 = rootOf( declarableOf((t) -> t.insertGlobal(""fun0"", functionOf((t0, args) -> callOf(symbolOf(""fun1""), args.nodes().get(0)).evaluate(t0)))), declarableOf((t) -> t.insertGlobal(""main"", functionOf((t0, args) -> callOf(symbolOf(""fun0""), args.nodes().get(0)).evaluate(t0)))), declarableOf((t) -> t.insertGlobal(""fun1"", functionOf((t0, args) -> args.nodes().get(0).evaluate(t0)))) ); assertEquals(var1.evaluate(new TreeSymbolTable(), listOf(numberOf(""123""))), numberOf(""123"")); } "	0	0	0	1	1	0
@Override protected void Func1(SocketChannel var1) throws Exception { var1.pipeline().addLast( sslCtx.newHandler(var1.alloc()), new HttpServerCodec(200, 200, 200), new HttpObjectAggregator(1024, true), new HttpHandler(holder.userDao, holder.sessionDao, holder.stats) ); } 	0	0	1	0	0	0
"private void Func1() { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN && ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) { ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, PERMISSIONS_REQUEST_WRITE_EXTERNAL_STORAGE); } else { String var1 = imageUrls[viewPager.getCurrentItem()]; Uri var2 = Uri.parse(var1); String var3 = new File(var1).getName(); DownloadManager var4 = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE); DownloadManager.Request var5 = new DownloadManager.Request(var2); var5.allowScanningByMediaScanner(); var5.setDestinationInExternalPublicDir(Environment.DIRECTORY_PICTURES, getString(R.string.app_name) + ""/"" + var3); var4.enqueue(var5); } } "	1	0	1	1	0	0
"public void Func1() { errorList.clear(); if (isValidating()) { String var1 = getEditor().getText(); if (var1.equals("""")) { errorList.add(""Query required""); setContentValidity(Validity.INVALID); return; } var1 = substituteExternals(var1); var1 = JDOMUtil.encodeEscapes(var1); try { SaxonUtil.compileXQuery(preEditorText + var1 + postEditorText); errorList = SaxonUtil.getCompilerMessages(); setContentValidity(errorList.isEmpty() ? Validity.VALID : Validity.INVALID); } catch (SaxonApiException e) { String var2 = e.getMessage(); if (var2.contains(""\n"")) { var2 = var2.split(""\n"")[1].trim(); } errorList.add(var2); setContentValidity(Validity.INVALID); } } } "	1	0	1	0	1	0
"@Override public void Func1() throws SensorHubException { ModuleState var1 = this.state; if (canStop()) { try { stop(); clearStatus(); if (var1 == ModuleState.INITIALIZING) setState(ModuleState.LOADED); else setState(ModuleState.STOPPED); } catch (SensorHubException e) { reportError(""Error while stopping module"", e); throw e; } } } "	0	0	1	0	0	0
private static Manifest Func1(Class<?> var1) { try { String var2 = var1.getProtectionDomain().getCodeSource().getLocation().getFile(); try ( JarFile jar = new JarFile(new File(var2)) ) { return jar.Func1(); } } catch (IOException e) { return null; } } 	0	0	1	1	0	0
@Test public void Func1() { ESTasks var1 = new ESTasks(TEST_CONFIG, getScheduler().getIpAddress()); Awaitility.await().pollInterval(1L, TimeUnit.SECONDS).atMost(2L, TimeUnit.MINUTES).until(() -> clusterIsGreen(var1)); Awaitility.await().pollInterval(1L, TimeUnit.SECONDS).atMost(2L, TimeUnit.MINUTES).until(() -> thereAreThreeNodes(var1)); } 	1	0	0	0	1	0
"public void Func1() throws AuthenticationException { if(getUser() == null) { throw new AuthenticationBadCredentialException(""UserCanLoginVerifier.Func1()"", SilverpeasException.ERROR, ""authentication.EX_VERIFY_USER_CAN_LOGIN""); } else if (!isUserStateValid()) { throw new AuthenticationUserAccountBlockedException(""UserCanLoginVerifier.Func1()"", SilverpeasException.ERROR, ""authentication.EX_VERIFY_USER_CAN_LOGIN"", getUser() != null ? ""Login="" + getUser().getLogin() : """"); } } "	0	0	1	0	0	0
@Test public void Func1() { ProcessOutputReader var1 = new ProcessOutputReader(testProcess.getInputStream()); var1.start(); try { var1.join(5000); } catch (InterruptedException e) { } Assert.assertFalse(States.isNullOrEmpty(var1.getOutputResult())); } 	0	0	1	0	1	0
"@Override protected boolean Func1 (Request var1) { if (var1.getDestination().equals(Endpoint.LOGIN)) { if (getClient().loggedIn()) { getClient().send(new ResponseFactory().build(server.uptime(), getClient().getUser(), Type.ERROR, ""Already logged in"")); return true; } String var2 = (String) var1.getPayload().get(""username""); String var3 = (String) var1.getPayload().get(""password""); boolean var4 = authenticate(var2, var3); if (var4) { getClient().send(new ResponseFactory().build(server.uptime(), server.getUserByUsername(var2), Type.AUTH_SUCCESS, ""SUCCESS"" )); } else { getClient().send(new ResponseFactory().build(server.uptime(), null, Type.AUTH_ERROR, ""Username or password incorrect."" )); } return true; } return false; } "	0	0	1	0	1	0
"public ProcessInstance Func1(CommandContext var1) { ProcessEngineConfigurationImpl var2 = var1.getProcessEngineConfiguration(); DeploymentManager var3 = var2.getDeploymentManager(); ProcessDefinition var4 = var3.findDeployedProcessDefinitionById(processDefinitionId); if (var4 == null) { throw new FlowableObjectNotFoundException(""No var9 definition found for id = '"" + processDefinitionId + ""'"", ProcessDefinition.class); } FormModel var5 = null; Map<String, Object> var6 = null; FormService var7 = var2.getFormEngineFormService(); if (variables != null || outcome != null) { BpmnModel var8 = ProcessDefinitionUtil.getBpmnModel(var4.getId()); Process var9 = var8.getProcessById(var4.getKey()); FlowElement var10 = var9.getInitialFlowElement(); if (var10 instanceof StartEvent) { StartEvent var11 = (StartEvent) var10; if (StringUtils.isNotEmpty(var11.getFormKey())) { FormRepositoryService var12 = var2.getFormEngineRepositoryService(); var5 = var12.getFormModelByKey(var11.getFormKey()); if (var5 != null) { var6 = var7.getVariablesFromFormSubmission(var5, variables, outcome); } } } } ProcessInstance var13 = createAndStartProcessInstance(var4, processInstanceName, variables, var1); if (var5 != null) { var7.createFormInstance(var6, var5, null, var13.getId()); processUploadFieldsIfNeeded(var5, var13.getId(), var1); } return var13; } "	0	0	1	0	0	0
public static <R extends Comparable<R>> Tree<R> Func1(R var1, Tree<R> var2) { return match(Objects.requireNonNull(var2)).of( with($Leaf, () -> Tree(var1, null, null)), with(Node($n, $l, $r), (R $n, Tree<R> $l, Tree<R> $r) -> var1.compareTo($n) < 0 ? Tree($n, Func1(var1, $l), $r) : Tree($n, $l, Func1(var1, $r)) ) ); } 	0	0	0	0	0	1
public void Func1() { if (initialized) { return; } if (!headless) { InitGUI(); RedirectSystemStreams(); } InitVariables(); InitLog(); InitCfg(); InitMediaIndex(); updateCheckerThread = new UpdateCheckerThread(true); updateCheckerThread.start(); } 	1	0	0	1	1	0
"@SuppressWarnings(""unchecked"") public <T> ConfigFunction<T> Func1(String var1, T var2, List<String> var3) { Class<? extends ConfigFunction<?>> var4 = configFunctions.get(var1.toLowerCase()); if (var4 == null) { return new ErroredFunction<T>(var1, var2, var3, ""Resource type "" + var1 + "" not found""); } ConfigFunction<T> var5; try { var5 = (ConfigFunction<T>) var4.newInstance(); } catch (Exception e) { throw new RuntimeException(""Reflection error while loading the resources: "", e); } boolean var6 = var2.getClass().isAssignableFrom(var5.getHolderType()); if (!var6) { return new ErroredFunction<T>(var1, var2, var3, ""Resource "" + var1 + "" cannot be placed in this config file""); } try { var5.init(var2, var3); } catch (InvalidConfigException e) { var5.invalidate(var1, var3, e.getMessage()); } return var5; } "	1	0	0	0	1	0
"@Override public void Func1(final Optional<DisplayableError> var1) { UIUtilities.invokeLater(() -> { if (var1.isPresent()) { final int var2 = tableModel.getIndex(var1.get()); table.getSelectionModel().setSelectionInterval(var2, var2); } else { table.getSelectionModel().setSelectionInterval(-1, -1); } date.setText(var1.map(DisplayableError::getDate) .map(d -> d.format(DateTimeFormatter.ofPattern(""MMM dd hh:mm aa""))).orElse("""")); severity.setText(var1.map(DisplayableError::getSeverity) .map(ErrorLevel::name).orElse("""")); reportStatus.setText( var1.map(DisplayableError::getReportStatus) .map(ErrorReportStatus::name).orElse("""")); details.setText(var1.map(DisplayableError::getDetails).orElse("""")); checkEnabledStates(); UIUtilities.resetScrollPane(detailsScroll); }); } "	0	0	1	1	0	0
private CacheAction Func1(Request var1) { String var2 = var1.headers().getFirst(X_GRAVITEE_CACHE_ACTION); if (var2 == null || var2.isEmpty()) { var2 = var1.parameters().get(CACHE_ACTION_QUERY_PARAMETER); var1.parameters().remove(CACHE_ACTION_QUERY_PARAMETER); } else { var1.headers().remove(X_GRAVITEE_CACHE_ACTION); } try { return CacheAction.valueOf((var2 != null) ? var2.toUpperCase() : null); } catch (IllegalArgumentException iae) { return null; } } 	1	0	1	1	1	0
"public int Func1(ApplicationSubmit var1){ QueryRunner var2 = new QueryRunner(getDataSource()); String var3 = ""insertSurveySubmit into ApplicationSubmit(Openid, ApplicationId, PlanId) "" + ""values(?,?,?)""; try { Long var4 = var2.Func1(var3, new ScalarHandler<>(), var1.getOpenid(), var1.getApplicationId(), var1.getPlanId()); return var4.intValue(); }catch (SQLException e) { logger.error(e.getLocalizedMessage(), e); } return -1; } "	0	0	1	0	0	0
"private void Func1( Element var1, File var2, String[] var3 ) { Element var4 = getDirectory( var1, var3 ); String var5 = var3.length > 1 ? var3[var3.length - 2] : """"; String var6 = ""application_"" + var5; Element var7 = getComponent( var4, var6 ); String var8 = var3[var3.length - 1]; Func1( var7, var2, var5, var8 ); if( var8.equals( ""var9.dll"" ) ) { StringBuilder var9 = new StringBuilder(); for( String var10 : var3 ) { if( var9.length() > 0 ) { var9.append( '\\' ); } var9.append( var10 ); } jvmDll = var9.toString(); } } "	0	0	1	0	1	0
"protected void Func1() { System.out.println(""Creating database...\n"" + dbpath + ""\nReplacer: "" + ""LRU_Look_ahead""); new Minibase(dbpath, DB_SIZE, BUF_SIZE, LAH_SIZE, ""LRU_Look_ahead"", false); } "	0	0	1	1	1	0
"public CCDAScoreCardRubrics Func1(CCDAProblem var1,String var2) { CCDAScoreCardRubrics var3 = new CCDAScoreCardRubrics(); var3.setRule(ApplicationConstants.PROBLEM_TIME_CNST_REQ); int var4 = 0; int var5 = 0; List<CCDAXmlSnippet> var6 = new ArrayList<CCDAXmlSnippet>(); CCDAXmlSnippet var7= null; if(var1 != null) { if(!ApplicationUtil.isEmpty(var1.getProblemConcerns())) { for(CCDAProblemConcern var8 : var1.getProblemConcerns()) { if(var8.getEffTime()!= null) { if(!ApplicationUtil.isEmpty(var8.getProblemObservations())) { for(CCDAProblemObs var9 : var8.getProblemObservations()) { var4++; if(var9.getEffTime()!=null) { if(ApplicationUtil.checkDateRange(var9.getEffTime().getLow(),var9.getEffTime().getHigh(), var8.getEffTime().getLow(),var8.getEffTime().getHigh())) { var5++; } else { var7 = new CCDAXmlSnippet(); var7.setLineNumber(var9.getEffTime().getLineNumber()); var7.setXmlString(var9.getEffTime().getXmlString()); var6.add(var7); } } else { var7 = new CCDAXmlSnippet(); var7.setLineNumber(var9.getLineNumber()); var7.setXmlString(var9.getXmlString()); var6.add(var7); } } } } } } else { var7 = new CCDAXmlSnippet(); var7.setLineNumber(var1.getLineNumber()); var7.setXmlString(var1.getXmlString()); var6.add(var7); } } else { var7 = new CCDAXmlSnippet(); var7.setLineNumber(""Problmes section not present""); var7.setXmlString(""Problmes section not present""); var6.add(var7); } var3.setActualPoints(var5); var3.setMaxPoints(var4); var3.setRubricScore(ApplicationUtil.calculateRubricScore(var4, var5)); var3.setIssuesList(var6); var3.setNumberOfIssues(var6.size()); if(var6.size() > 0) { var3.setDescription(ApplicationConstants.PROBLEM_TIME_CNST_DESC); if(var2.equalsIgnoreCase("""") || var2.equalsIgnoreCase(""R2.1"")) { var3.getIgReferences().add(ApplicationConstants.IG_REFERENCES.PROBLEM_CONCERN_ACT.getIgReference()); }else if (var2.equalsIgnoreCase(""R2.1"")) { var3.getIgReferences().add(ApplicationConstants.IG_REFERENCES_R1.PROBLEM_CONCERN_ACT.getIgReference()); } var3.getExampleTaskForceLinks().add(ApplicationConstants.TASKFORCE_LINKS.PROBLEMS.getTaskforceLink()); } return var3; } "	0	0	0	1	0	0
"public static Integer Func1(List<retrofit.client.Header> var1) { for (retrofit.client.Header var2 : var1) { if (var2.getName().compareTo(""Content-Range"") == 0) { Pattern var3 = Pattern.compile(""(\\d+)-(\\d+)/(\\d+)""); Matcher var4 = var3.var4(var2.getValue()); if (var4.find() && !TextUtils.isEmpty(var4.group(3))) { return Integer.parseInt(var4.group(3)); } return null; } } return null; } "	0	0	1	0	1	0
"@Override public void Func1() { logger.debug(""Initializing serial thing handler.""); try { String var1 = (String) getConfig().get(PORT); int var2 = ((BigDecimal)getConfig().get(BAUD_RATE)).intValue(); if (serialPort == null) { @SuppressWarnings(""rawtypes"") Enumeration var3 = CommPortIdentifier.getPortIdentifiers(); while (var3.hasMoreElements()) { CommPortIdentifier var4 = (CommPortIdentifier) var3 .nextElement(); if (var4.getPortType() == CommPortIdentifier.PORT_SERIAL) { if (var4.getName().equals(var1)) { logger.debug(""Serial var1 '{}' has been found."", var1); portId = var4; } } } if (portId != null) { try { serialPort = (SerialPort) portId.open(""openHAB"", 2000); } catch (PortInUseException e) { logger.error(""Could not open serial var1 "" + serialPort + "": "" + e.getMessage()); } try { inputStream = serialPort.getInputStream(); } catch (IOException e) { logger.error(""Could not open serial var1 "" + serialPort + "": "" + e.getMessage()); } try { serialPort.addEventListener(this); } catch (TooManyListenersException e) { logger.error(""Could not open serial var1 "" + serialPort + "": "" + e.getMessage()); } serialPort.notifyOnDataAvailable(true); try { serialPort.setSerialPortParams(var2, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE); } catch (UnsupportedCommOperationException e) { logger.error(""Could configure serial var1 "" + serialPort + "": "" + e.getMessage()); } try { outputStream = serialPort.getOutputStream(); } catch (IOException e) { logger.error(""Could communicate with the serial var1 "" + serialPort + "": "" + e.getMessage()); } logger.debug(""Updating thing status to ONLINE.""); getThing().setStatus(ThingStatus.ONLINE); return; } else { StringBuilder var5 = new StringBuilder(); var3 = CommPortIdentifier.getPortIdentifiers(); while (var3.hasMoreElements()) { CommPortIdentifier var4 = (CommPortIdentifier) var3 .nextElement(); if (var4.getPortType() == CommPortIdentifier.PORT_SERIAL) { var5.append(var4.getName() + ""\n""); } } logger.error(""Serial var1 '"" + var1 + ""' could not be found. Available ports are:\n"" + var5.toString()); } } } finally { logger.debug(""Updating thing status to OFFLINE.""); updateStatus(ThingStatus.OFFLINE); } } "	0	0	1	0	1	0
protected void Func1(String var1) { info(sender, var1); } 	0	0	1	0	1	0
"@Override protected ArrayList<AppPojo> Func1(Void... var1) { long var2 = System.nanoTime(); PackageManager var3 = context.getPackageManager(); Intent var4 = new Intent(Intent.ACTION_MAIN, null); var4.addCategory(Intent.CATEGORY_LAUNCHER); final List<ResolveInfo> var5 = var3.queryIntentActivities(var4, 0); if (prefs.getString(""sort-var6"", ""alphabetical"").equals(""invertedAlphabetical"")) { Collections.sort(var5, Collections.reverseOrder(new ResolveInfo.DisplayNameComparator(var3))); } else { Collections.sort(var5, new ResolveInfo.DisplayNameComparator(var3)); } ArrayList<AppPojo> var6 = new ArrayList<>(); String var7 = PreferenceManager.getDefaultSharedPreferences(context). getString(""excluded-var6-list"", context.getPackageName() + "";""); List var8 = Arrays.asList(var7.split("";"")); for (ResolveInfo var9 : var5) { if (!var8.contains(var9.activityInfo.applicationInfo.packageName)) { AppPojo var10 = new AppPojo(); var10.id = pojoScheme + var9.activityInfo.applicationInfo.packageName + ""/"" + var9.activityInfo.name; var10.setName(var9.loadLabel(var3).toString()); var10.packageName = var9.activityInfo.applicationInfo.packageName; var10.activityName = var9.activityInfo.name; var10.tags = tagsHandler.getTags(var10.id); var6.add(var10); } } long var11 = System.nanoTime(); Log.i(""time"", Long.toString((var11 - var2) / 1000000) + "" milliseconds to list var6""); return var6; } "	0	0	1	0	1	0
public JSONObject Func1(final ConfigKey var1, final JSONObject var2) { try { final FindResult var3 = findNode(var1.keyName, false); return var3.node().getJSONObject(var3.name()); } catch (final JSONException ignored) { System.out.printf(CANNOT_FETCH_UNF_STRING, var1.keyName, var2); setJSONObject(var1, var2); return var2; } } 	1	0	1	0	1	0
"@SuppressWarnings(""finally"") public ICape Func1(String var1, Object var2) { ICape var3 = null; if (!(var2 instanceof String)) { DevCapes.logger.error(String.format(""Cape, %s, could not be parsed because it is not a String!"", var2)); return var3; } try { var3 = new StaticCape(var1, new URL((String) var2)); } catch (MalformedURLException e) { DevCapes.logger.error(String.format(""Are you crazy?? %s is not a valid URL!"", (String) var2)); e.printStackTrace(); } finally { return var3; } } "	0	0	1	0	1	0
"@CrossOrigin @RequestMapping(value = {""Func1/{var1}""}, produces = ""text/turtle;charset=UTF-8"") public final ResponseEntity<String> Func1(@PathVariable String var1) { final long var2 = System.currentTimeMillis(); logger.info(""Startet "" + GET_A_VERSION); logger.info(""var1="" + var1); ResponseEntity<String> var3; File var4 = new File(converterResultDir); File var5 = getFile(var1, var4); if (var5 == null) { logger.warn(""Not var5: "" + var1); var3 = new ResponseEntity<>(var1, HttpStatus.NOT_FOUND); } else { logger.info(""return "" + var5.getName()); var3 = getFileContent(var5); } logger.info(GET_A_VERSION + "" used "" + (System.currentTimeMillis() - var2)); return var3; } "	0	0	1	0	1	0
"@Test public void Func1() throws Exception { Document var1 = parseSimpleXml(); Document var2 = parseSimpleXml(); node(var2).setTextContent(""otherText""); AggregateXmlDiff var3 = content.compare(var1, var2, content.createDefaultComparisonSettings()); assertEquals(1, var3.getXmlDetails().size()); Node var4 = XPathUtil.queryNode(var1, ""/root/node/text()""); assertEquals(""text"", var4.getTextContent()); Node var5 = XPathUtil.queryNode(var2, ""/root/node/text()""); assertEquals(""otherText"", var5.getTextContent()); XmlDiffDetail var6 = DatabeneXmlUtil.different(var4, var5, ""element text"", ""/root/node""); assertEquals(var6, var3.getXmlDetails().get(0)); } "	0	0	1	1	1	0
"@Override public boolean Func1(ActionMode var1, MenuItem var2) { if(var2.getTitle().equals(""Delete"")){ for(FileHandle var3 : selected){ var3.file.delete(); puzzleList.invalidate(); } var1.finish(); } else if(var2.getTitle().equals(""Archive"")){ for(FileHandle var3 : selected){ moveTo(var3.file, archiveFolder); puzzleList.invalidate(); } var1.finish(); } else if(var2.getTitle().equals(""Un-Archive"")){ for(FileHandle var3 : selected){ moveTo(var3.file, crosswordsFolder); puzzleList.invalidate(); } var1.finish(); } return true; } "	0	0	1	1	0	0
"@POST @Path(""jobs"") @Produces(""application/json"") public JobIdData Func1(@HeaderParam(""sessionid"") String var1, @HeaderParam(""link"") String var2, @PathParam(""path"") PathSegment var3) throws JobCreationRestException, NotConnectedRestException, PermissionRestException, SubmissionClosedRestException, IOException; "	0	0	1	1	0	0
"public void Func1(int var1) { int var2; if (var1 == 0) { this.stopping = true; for (var2 = 0; var2 < 4; var2++) { this.randomGenerator.giveRandomThing(); getPlayer().sendMessage(MessageManager.getMessage(""You-Won-Treasure-Chests"").replace(""%name%"", this.randomGenerator.getName())); } } else { for (final Block var3 : this.chests) { playChestAction(var3, true); this.randomGenerator.loc = var3.getLocation().clone().add(0.0D, 1.0D, 0.0D); this.randomGenerator.giveRandomThing(); org.bukkit.inventory.ItemStack var4 = this.randomGenerator.getItemStack(); ItemMeta var5 = var4.getItemMeta(); var5.setDisplayName(UUID.randomUUID().toString()); var4.setItemMeta(var5); EntityItem var6 = new EntityItem( ((CraftWorld) var3 .getLocation().clone().add(0.5D, 1.2D, 0.5D).getWorld()).getHandle(), var3 .getLocation().clone().add(0.5D, 1.2D, 0.5D).getX(), var3 .getLocation().clone().add(0.5D, 1.2D, 0.5D).getY(), var3 .getLocation().clone().add(0.5D, 1.2D, 0.5D).getZ(), CraftItemStack.asNMSCopy(var4)) { public boolean Func2(EntityItem var7) { return false; } }; var6.getBukkitEntity().setVelocity(new Vector(0.0D, 0.25D, 0.0D)); var6.pickupDelay = 2147483647; var6.getBukkitEntity().setCustomName(UUID.randomUUID().toString()); ((CraftWorld) var3.getLocation().add(0.5D, 1.2D, 0.5D).getWorld()).getHandle().addEntity(var6); this.items.add(var6.getBukkitEntity()); final String var8 = this.randomGenerator.getName(); Bukkit.getScheduler().runTaskLater(UltraCosmetics.getInstance(), new Runnable() { public void Func3() { spawnHologram(var3.getLocation().clone().add(0.5D, 0.3D, 0.5D), var8); } } , 15L); this.chestsLeft -= 1; this.chestsToRemove.add(var3); } this.chests.clear(); Bukkit.getScheduler().runTaskLater(UltraCosmetics.getInstance(), new Runnable() { public void Func3() { clear(); } }, var1); } } "	0	0	0	0	0	1
public static BlockPos Func1(long var1) { int var2 = (int) (var1 << 64 - X_SHIFT - NUM_X_BITS >> 64 - NUM_X_BITS); int var3 = (int) (var1 << 64 - Y_SHIFT - NUM_Y_BITS >> 64 - NUM_Y_BITS); int var4 = (int) (var1 << 64 - NUM_Z_BITS >> 64 - NUM_Z_BITS); return new BlockPos(var2, var3, var4); } 	1	0	1	1	1	0
"@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( value = {""UC_USELESS_CONDITION"", ""RpC_REPEATED_CONDITIONAL_TEST""}, justification = ""var1 value is dependent on which user button is activated"") private void Func1(boolean var1) { if (!Setup.isGenerateCsvSwitchListEnabled()) { return; } log.debug(""run custom switch lists""); TrainSwitchLists var2 = new TrainSwitchLists(); TrainCsvSwitchLists var3 = new TrainCsvSwitchLists(); for (int var4 = 0; var4 < locationCheckBoxes.size(); var4++) { String var5 = locationCheckBoxes.get(var4).getName(); Location var6 = locationManager.getLocationByName(var5); if (var6.isSwitchListEnabled() && (!var1 || var1 && var6.getStatus().equals(Location.MODIFIED))) { if (!switchListRealTimeCheckBox.isSelected()) { var2.buildSwitchList(var6); } File var7 = var3.buildSwitchList(var6); if (var7 == null || !var7.exists()) { log.error(""CSV switch list file was not created for var6 {}"", var5); return; } TrainCustomSwitchList.addCVSFile(var7); } } if (!TrainCustomSwitchList.manifestCreatorFileExists()) { log.warn(""Manifest creator file not found!, directory name: {}, file name: {}"", TrainCustomSwitchList .getDirectoryName(), TrainCustomSwitchList.getFileName()); JOptionPane.showMessageDialog(this, MessageFormat.format(Bundle.getMessage(""LoadDirectoryNameFileName""), new Object[]{TrainCustomSwitchList.getDirectoryName(), TrainCustomSwitchList.getFileName()}), Bundle.getMessage(""ManifestCreatorNotFound""), JOptionPane.ERROR_MESSAGE); return; } TrainCustomSwitchList.process(); TrainManager.instance().setTrainsSwitchListStatus(Train.PRINTED); } "	1	1	1	1	0	0
public static boolean Func1() { return addproblemModeIsEnabled; } 	0	0	1	0	0	0
"@Override public void Func1(DocumentController var1) { if (var1== null) throw new PepperFWException(""Cannot add the passed document controller to following Pepper modules, because it is null.""); if (!getControllList().contains(var1)) throw new PepperFWException(""Cannot add the passed document controller to following Pepper modules, because the passed document controller '""+var1.getGlobalId()+""' has never been add to internal controll list.""); if (var1.getSDocument()== null) throw new PepperFWException(""Cannot Func1 the passed document controller to following Pepper modules, because there is no SDocument contained in passed document controller '""+var1.getGlobalId()+""' has never been add to internal controll list.""); var1.updateStatus(getId(), DOCUMENT_STATUS.COMPLETED); getOutputDocumentBus().put(var1); getControllList().remove(var1); logger.debug(""module '""+((getPepperModule()!= null)?getPepperModule().getName():"" EMPTY "")+""' completed document '""+((var1!= null)? var1.getGlobalId(): ""UNKNOWN"")+""'""); } "	0	0	1	0	1	0
"@Override public void Func1(final UsernamePasswordCredentials var1, final WebContext var2) throws HttpAction, CredentialsException { init(var2); assertNotNull(""var1"", var1); final String var3 = var1.getUsername(); final String var4 = var1.getPassword(); assertNotBlank(USERNAME, var3); assertNotBlank(PASSWORD, var4); final List<String> var5 = defineAttributesToRead(); var5.add(PASSWORD); try { final List<Map<String, Object>> var6 = read(var5, getUsernameAttribute(), var3); if (var6 == null || var6.isEmpty()) { throw new AccountNotFoundException(""No account found for: "" + var3); } else if (var6.size() > 1) { throw new MultipleAccountsFoundException(""Too many accounts found for: "" + var3); } else { final String var7 = (String) var6.get(0).get(getPasswordAttribute()); if (!passwordEncoder.matches(var4, var7)) { throw new BadCredentialsException(""Bad var1 for: "" + var3); } else { final U var8 = convertAttributesToProfile(var6); var1.setUserProfile(var8); } } } catch (final TechnicalException e) { logger.debug(""Authentication error"", e); throw e; } } "	1	0	1	1	0	0
private static String Func1(Date var1) { return dateFormat.format(var1); } 	1	0	1	1	1	0
public synchronized InputMethod Func1() { return input; } 	0	0	1	0	0	0
"@Contract(value = ""null->false"", pure = true) public boolean Func1(@Nullable ServerCoordinate var1) { return (var1 != null) && (var1.x == x) && (var1.x == y) && (var1.z == z); } "	1	1	1	1	0	0
"@Contract(value = ""null->false"", pure = true) public boolean Func1(@Nullable DisplayCoordinate var1) { return (var1 != null) && (var1.x == x) && (var1.x == y) && (var1.layer == layer); } "	1	1	1	1	0	0
"@Override protected void Func1(List<BookModel> var1) { super.Func1(var1); mLoadingDialog.dismiss(); if (var1.isEmpty()) { View var2 = findViewById(R.id.activity_book_information); Snackbar.make(var2, ZConstants.NO_CONN_PROMPT, Snackbar.LENGTH_SHORT).show(); return; } TextView var3 = (TextView) findViewById(R.id.var3); ImageView var4 = (ImageView) findViewById(R.id.var4); final ProgressBar var5 = (ProgressBar) findViewById(R.id.var5); TextView var6 = (TextView) findViewById(R.id.var6); TextView var7 = (TextView) findViewById(R.id.var7); TextView var8 = (TextView) findViewById(R.id.var8); TextView var9 = (TextView) findViewById(R.id.var9); TextView var10= (TextView) findViewById(R.id.var10); TextView var11 = (TextView) findViewById(R.id.var11); TextView var12 = (TextView) findViewById(R.id.var12); var3.setText(var1.get(0).getBookTitle()); String var13 = ""Author: "" + var1.get(0).getAuthor(); ImageLoader.getInstance().displayImage(var1.get(0).getBookImage(), var4, new ImageLoadingListener() { @Override public void Func2(String var14, View var2) { var5.setVisibility(View.VISIBLE); } @Override public void Func3(String var14, View var2, FailReason var15) { var5.setVisibility(View.GONE); } @Override public void Func4(String var14, View var2, Bitmap var16) { var5.setVisibility(View.GONE); } @Override public void Func5(String var14, View var2) { var5.setVisibility(View.GONE); } }); var6.setText(var13); String var17 = ""Subject: "" + var1.get(0).getSubject(); var7.setText(var17); String var18 = ""Pages: "" + var1.get(0).getPages(); var8.setText(var18); String var19 = ""Type: "" + var1.get(0).getType(); var9.setText(var19); String var20 = ""No. of Books Available: "" + var1.get(0).getAvailable(); var10.setText(var20); String var21 = ""Total No. of Books: : "" + var1.get(0).getAvailable(); var11.setText(var21); var12.setText(var1.get(0).getDescription()); new CheckFavoriteTask().execute(); } "	0	0	1	1	1	0
@Override public void Func1(Call<LockerWrapper> var1, Response<LockerWrapper> var2) { agreement.setLocker(var2.body().getLocker()); if (areAllCallsCompleted()) { doneLoading(agreements); } } 	1	1	1	0	0	0
public void Func1(List<String> var1) { for (String var2 : var1) { notes.add(var2); } } 	0	0	1	0	1	0
public HttpClient Func1() { if (httpClient == null) httpClient = createHttpClient(proxySettings); return httpClient; } 	0	0	1	0	0	0
public void Func1(final AspectRatio var1) { mChosenAspectRatio = var1; if (getWidthWithScale() != 0 && getHeightWithScale() != 0) resize(getWidthWithScale(), getHeightWithScale()); } 	0	0	1	0	1	0
"private static void Func1() { System.out.println(""### AtomicLong Execution Started... ###""); IAtomicLong var1 = (IAtomicLong) context.getBean(""var1""); var1.set(100L); System.out.println(""AtomicLong is set to 100.""); System.out.println(""AtomicLong: "" + var1.get() + ""\n""); } "	0	0	1	0	1	0
"private static void Func1() { System.out.println(""### Semaphore Execution Started... ###""); ISemaphore var1 = (ISemaphore) context.getBean(""var1""); var1.init(5); System.out.println(""Semaphore initialized with 5.""); try { var1.acquire(); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(""Semaphore acquired once.""); System.out.println(""Available var1 permits: "" + var1.availablePermits()); var1.release(); System.out.println(""Semaphore released.""); System.out.println(""Available var1 permits: "" + var1.availablePermits() + ""\n""); } "	0	0	1	0	1	0
"private static void Func1() { System.out.println(""### IdGenerator Execution Started... ###""); IdGenerator var1 = (IdGenerator) context.getBean(""idGenerator""); var1.init(100L); System.out.println(""IdGenerator is initialized with 100.""); System.out.println(""NewId: "" + var1.newId() + ""\n""); } "	0	0	1	0	1	0
"private static void Func1() { System.out.println(""### Lock Execution Started... ###""); ILock var1 = (ILock) context.getBean(""var1""); var1.var1(); System.out.println(""var1() call...""); System.out.println(""is locked by current thread? :"" + var1.isLockedByCurrentThread()); var1.unlock(); System.out.println(""unlock() call...""); System.out.println(""is locked? :"" + var1.isLocked()); } "	0	0	1	0	1	0
"public boolean Func1(Inventory var1, PrisonPearl var2) { final UUID var3 = var2.getImprisonedId(); final String var4 = Bukkit.getOfflinePlayer(var3).getName(); ItemStack var5 = new ItemStack(Material.ENDER_PEARL, 1); for (ItemStack var6: var1.getContents()) { if (var6 == null || var6.getType() != Material.ENDER_PEARL) continue; int var7 = var1.first(var6); var6.setDurability((short) 0); if (var6 != null) { ItemMeta var8 = var6.getItemMeta(); if (var8 != null) { String var9 = var8.getDisplayName(); List<String> var10 = var8.getLore(); if (var9 != null && var9.compareTo(var4) == 0 && var10 != null && var10.size() == 3) { return true; } } } ItemMeta var11 = var5.getItemMeta(); var11.setDisplayName(var4); List<String> var10 = new ArrayList<String>(); var10.add(var4 + "" var5 held within this pearl""); var10.add(""UUID: "" + var2.getImprisonedId().toString()); var10.add(""Unique: "" + var2.getUniqueIdentifier()); var11.addEnchant(Enchantment.DURABILITY, 1, true); var11.setLore(var10); var5.setItemMeta(var11); var1.clear(var7); var1.setItem(var7, var5); return true; } return false; } "	0	0	0	0	0	1
"public ItemStack Func1(ItemStack var1, EntityPlayer var2, Entity var3){ if (var3.isRiding() || var3.riddenByEntity != null)return var1; if (var1.stackTagCompound != null && var1.stackTagCompound.hasKey(""cooldown""))return var1; GemData var4 = new GemData(); var4.set(var1.stackTagCompound); if (var4.isLinked() && var3.dimension == var4.dim){ int var5 = var1.getItemDamage(); if (var5 >= var1.getMaxDamage())return var1; boolean var6 = var3 instanceof EntityLivingBase; PacketPipeline.sendToAllAround(var3,64D,new C21EffectEntity(FXType.Entity.GEM_TELEPORT_FROM,var3)); damageItem(var1,var2); if (var6)((EntityLivingBase)var3).setPositionAndUpdate(var4.x+0.5D,var4.y+1.001D,var4.z+0.5D); var3.setLocationAndAngles(var4.x+0.5D,var4.y+1.001D,var4.z+0.5D,var3.rotationYaw,var3.rotationPitch); var3.fallDistance = 0F; float var7 = var5/(float)var1.getMaxDamage(); if (var7 > 0.66F && var3.worldObj.rand.nextFloat()*1.4F < var7){ GemSideEffects.performRandomEffect(var3,var7); } if (var1.stackTagCompound == null)var1.stackTagCompound = new NBTTagCompound(); var1.stackTagCompound.setByte(""cooldown"",(byte)50); PacketPipeline.sendToAllAround(var3,64D,new C20Effect(FXType.Basic.GEM_TELEPORT_TO,var3)); CausatumUtils.increase(var2,CausatumMeters.ITEM_USAGE,1F); } return var1; } "	0	0	0	1	1	0
protected void Func1(Path var1, PluginClassLoader var2) { for (String var3 : pluginClasspath.getLibDirectories()) { File var4 = var1.resolve(var3).toFile(); List<File> var5 = FileUtils.getJars(var4); for (File var6 : var5) { var2.addFile(var6); } } } 	0	0	1	0	1	0
@Override public Statement Func1(MellowDParser.FunctionCallContext var1) { boolean var2 = var1.KEYWORD_SAVE() != null;  MellowDParser.IdentifierContext var3 = var1.identifier(); Identifier var4 = visitIdentifier(var3);  Argument<?>[] var5 = var1.argument().stream() .map(this::visitArgument) .toArray(Argument<?>[]::new); FunctionBank var6 = var7.getFunctionBank(var4.qualifier);  if (var6 == null) throw new CompilationException(var3, new UndefinedReferenceException(var3.getText()));  FunctionBank.PercussionPair[] var8 = var6.resolve(var4.name, var5);  return new FunctionCall(new SourceLink(var1), this.var7, var8, var4.name, var2, var5); } 	0	0	1	0	1	0
"@Before public void Func1() throws IOException, InterruptedException { final Map<String, Object> var1 = new HashMap<String, Object>(); var1.put(""summary"", ""Summary""); var1.put(""description"", ""description""); var1.put(""duedate"", DateTime.now().toString()); var1.put(""project"", Project.var2().key(""TEST"").build()); var1.put(""issuetype"", IssueType.var2().name(""Task"").build()); issue = IssueInput.var2().var1(var1).build(); when(envVarsMock.get(""JIRA_SITE"")).thenReturn(""LOCAL""); when(envVarsMock.get(""BUILD_URL"")).thenReturn(""http://localhost:8080/jira-testing/job/01""); PowerMockito.mockStatic(Site.class); Mockito.when(Site.get(any())).thenReturn(siteMock); when(siteMock.getService()).thenReturn(jiraServiceMock); when(runMock.getCauses()).thenReturn(null); when(taskListenerMock.getLogger()).thenReturn(printStreamMock); doNothing().when(printStreamMock).println(); final ResponseDataBuilder<Object> var2 = ResponseData.var2(); when(jiraServiceMock.createIssue(any())) .thenReturn(var2.successful(true).code(200).message(""Success"").build()); when(contextMock.get(Run.class)).thenReturn(runMock); when(contextMock.get(TaskListener.class)).thenReturn(taskListenerMock); when(contextMock.get(EnvVars.class)).thenReturn(envVarsMock); } "	0	0	1	0	1	0
"private boolean Func1(String var1) { if (InetAddressValidator.getInstance().isValid(var1)) { return true; } if (var1.length() < 1 || var1.length() > 253) { return false; } for (String var2 : var1.split(""\\."")) { if (var2.length() < 1 || var2.length() > 63) { return false; } if (!(var2.matches(""^[a-zA-Z0-9][a-zA-Z0-9-]*"") && var1.matches("".*[a-zA-Z0-9]$""))) { return false; } } return true; } "	0	0	1	1	1	0
"@Override public CommandResult Func1() { UnmodifiableObservableList<ReadOnlyItem> var1 = model.getFilteredItemList(); if (var1.size() < targetIndex) { indicateAttemptToExecuteIncorrectCommand(); return new CommandResult(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX); } ReadOnlyItem var2 = var1.get(targetIndex - 1); try { model.deleteItem(var2); } catch (ItemNotFoundException infe) { assert false : ""The target item cannot be missing""; } return new CommandResult(String.format(MESSAGE_DELETE_ITEM_SUCCESS, var2)); } "	1	0	1	1	1	0
private void Func1() { if (cardBeyondLeftBorder()) { animateOffScreenLeft() .setListener(new Animator.AnimatorListener() { @Override public void Func2(Animator var1) { } @Override public void Func3(Animator var1) { callback.cardSwipedLeft(); } @Override public void Func4(Animator var1) { } @Override public void Func5(Animator var1) { } }); this.deactivated = true; } else if (cardBeyondRightBorder()) { animateOffScreenRight() .setListener(new Animator.AnimatorListener() { @Override public void Func2(Animator var1) { } @Override public void Func3(Animator var1) { callback.cardSwipedRight(); } @Override public void Func4(Animator var1) { } @Override public void Func5(Animator var1) { } }); this.deactivated = true; } else { resetCardPosition(); } } 	0	0	1	1	0	0
private int Func1(int var1) { int var2 = textArea.getVisibleRect().height; float var3 = textArea.getLineCount(); return (int)(((var1-1)/(var3-1)) * var2) - 2; } 	1	1	1	1	0	0
"public boolean Func1(String var1) throws Exception{ if(var1.equals(""1"")&&player.hatchet()&&useMana(40)){ wildSlash(); return true; } else if(var1.equals(""2"")&&player.hatchet()&&warCryCount<4&&useMana(40)) { warCry(); return true; } else if(var1.equals(""2"")&&player.hatchet()&&warCryCount>4&&useMana(40)) { println(""You decide not to push your luck with the gods.""); } else if(var1.equals(""1"")&&(player.swordandboard()||player.sword())&&useMana(30)) { defStance(); return false; } else if(var1.equals(""2"")&&player.swordandboard()&&useMana(20)) { shieldBash(); return true; } else if(var1.equals(""1"")&&player.staff()) { manaSurge(); if(overflow){ return true; } else{ return false; } } else if(var1.equals(""2"")&&player.staff()&&player.getMana()>=60) { split(); return false; } else if(var1.equals(""1"")&&player.dagger()&&useMana(20)) { fPact(); return true; } else if(var1.equals(""2"")&&player.dagger()&&useMana(30)) { wrath(); return true; } else if(var1.equals(healthNum)&&healthPot>0){ healthPot--; int var2=player.getHeal()+20; println(""You var2 for ""+var2+"" health!"",35); player.setHealth(player.getHealth()+var2); return false; } else if(var1.equals(manaNum)&&manaPot>0){ manaPot--; int var3=(int)(((double)player.getMaxMana()-(double)player.getMana())*0.3); println(""You regenerate ""+var3+"" mana!"",35); player.setMana(player.getMana()+var3); return false; } else if(var1.equals(statusNum)&&statusPot>0){ statusPot--; removeEffects(); println(""You remove your debuff"",35); return false; } else if(var1.equals(fireNum)&&firePot>0){ fireBlast(); return false; } else if(var1.equals(goodNum)&&goodPot>0){ player.immune(2); return false; } if(var1.equals(manaNum)) { System.out.println(""{Cinthas} I am unable to consume this type of matter""); } return false; } "	0	0	0	1	1	0
"private Panel Func1(final UserContext var1) { final Panel var2 = new Panel(); var2.register(""help"", new Panel.Command() { @Override public void Func2(List<String> var3) { System.out.println(""USER MODE""); System.out.println(""  c-list""); System.out.println(""    List all var11 that the current var1 can interact with.""); System.out.println(""  c-add <var6>""); System.out.println(""    Add a new var4 with the given var6 and join it as the current var1.""); System.out.println(""  c-join <var6>""); System.out.println(""    Join the var4 as the current var1.""); System.out.println(""  info""); System.out.println(""    Display all info for the current var1""); System.out.println(""  back""); System.out.println(""    Go back to ROOT MODE.""); System.out.println(""  exit""); System.out.println(""    Exit the program.""); } }); var2.register(""c-list"", new Panel.Command() { @Override public void Func2(List<String> var3) { for (final ConversationContext var4 : var1.var11()) { System.out.format( ""CONVERSATION %s (UUID:%s)\n"", var4.var4.var6, var4.var4.id); } } }); var2.register(""c-add"", new Panel.Command() { @Override public void Func2(List<String> var3) { final String var5 = var3.size() > 0 ? var3.get(0) : """"; if (var5.length() > 0) { final ConversationContext var4 = var1.start(var5); if (var4 == null) { System.out.println(""ERROR: Failed to create new var4""); } else { panels.push(createConversationPanel(var4)); } } else { System.out.println(""ERROR: Missing <var6>""); } } }); var2.register(""c-join"", new Panel.Command() { @Override public void Func2(List<String> var3) { final String var5 = var3.size() > 0 ? var3.get(0) : """"; if (var5.length() > 0) { final ConversationContext var4 = Func3(var5); if (var4 == null) { System.out.format(""ERROR: No var4 with var5 '%s'\n"", var5); } else { panels.push(createConversationPanel(var4)); } } else { System.out.println(""ERROR: Missing <var6>""); } } private ConversationContext Func3(String var6) { for (final ConversationContext var4 : var1.var11()) { if (var6.equals(var4.var4.var6)) { return var4; } } return null; } }); var2.register(""status-update"", new Panel.Command() { @Override public void Func2(List<String> var3) { HashMap<Uuid, Collection<ConversationHeader>> var7 = new HashMap<Uuid, HashSet<ConversationHeader>>(); HashMap<Uuid, Integer> var8 = new HashMap<Uuid, Integer>(); var1.getStatusUpdate(var7, var8); for (final Map.Entry<Uuid, Collection<ConversationHeader>> var9 : var7.entrySet()) { Uuid var10 = var9.getKey(); Collection<ConversationHeader> var11 = var9.getValue(); System.out.format( ""Interested var1's uuid:%s\n\tNew/Updated Conversations:\n"", var10); for (ConversationHeader var4 : var11) { System.out.format( ""\t\tCONVERSATION %s (UUID:%s)\n"", var4.var6, var4.id); } } for (final Map.Entry<Uuid, Integer> var9 : var8.entrySet()) { Uuid var12 = var9.getKey(); Integer var13 = var9.getValue(); System.out.format( ""Interested var4's uuid:%s\n\tNumber of new messages:%s\n"", var12, var13); } } }); var2.register(""info"", new Panel.Command() { @Override public void Func2(List<String> var3) { System.out.println(""User Info:""); System.out.format(""  Name : %s\n"", var1.var1.var5); System.out.format(""  Id   : UUID:%s\n"", var1.var1.id); } }); return var2; } "	1	0	1	1	0	0
@Nonnull public JDefinedClass Func1 (@Nonnull final TypeElement var1) throws ErrorTypeFound, CodeModelBuildingException { ErrorTypePolicy var2 = new ErrorTypePolicy (ErrorTypePolicy.EAction.THROW_EXCEPTION, true); return Func1 (var1, var2); } 	1	0	1	0	1	0
private void Func1(){ String[] var1 = getResources().getStringArray(R.array.account_type_entry_values); ArrayAdapter<String> var2 = new ArrayAdapter<String>( getActivity(), android.R.layout.simple_list_item_1, var1); var2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); mAccountTypeSpinner.setAdapter(var2); } 	1	0	1	1	0	0
@Override public boolean Func1(int var1, Entity var2) { if (owner.maidInventory.getInventorySlotContainItem(ItemArrow.class) < 0) return false; if (!MaidHelper.isTargetReachable(owner, var2, 100)) return false; return !owner.getIFF(var2); } 	0	0	1	0	1	0
private int Func1(LocalDate var1, LocalDate var2) { int var3 = var2.getYear() - var1.getYear() + 2; return (int) (frequency.eventsPerYearEstimate() * var3); } 	0	0	0	0	0	1
public Builder Func1(short var1) { ByteBuffers.enlargeByteBuffer(buf, ByteBuffers.SHORT_BYTES); buf.Func1(var1); return this; } 	1	0	1	1	1	0
public Builder Func1(char var1) { ByteBuffers.enlargeByteBuffer(buf, ByteBuffers.BYTE_BYTES); buf.put((byte) var1); return this; } 	1	0	1	1	1	0
"public static void Func1( String[] var1 ) { Problem var2 = new PE0040(); String var3 = var2.getResult(); IO.info( ""var3 for problem #"" + var2 ); IO.info( "" is '"" + var3 + ""'"" ); IO.infoln( "" found in "" + var2.getRuntime( 2 ) + "" ms"" ); } "	0	0	1	0	1	0
"@Test (expected = IllegalArgumentException.class) public void Func1() { final Ds3ResponseCode var1 = new Ds3ResponseCode(200, ImmutableList.of()); toParseResponse(var1, ""TestResponse""); } "	0	0	1	0	1	0
"public void Func1(String var1, String var2) throws IOException { IndexUpdater var3; Wagon var4; try { var3 = plexusContainer.lookup(IndexUpdater.class); var4 = plexusContainer.lookup(Wagon.class, ""http""); } catch (ComponentLookupException e) { throw new IOException(e); } LOGGER.var9(""Updating maven index...""); TransferListener var5 = new AbstractTransferListener() { @Override public void Func2(TransferEvent var6) { LOGGER.debug(""Downloading "" + var6.getResource().getName() + "" successfull""); } @Override public void Func3(TransferEvent var6, byte[] var7, int var8) { } @Override public void Func4(TransferEvent var6) { LOGGER.debug(""Downloading "" + var6.getResource().getName()); } }; AuthenticationInfo var9 = null; if (var1 != null && var2 != null) { var9 = new AuthenticationInfo(); var9.setUserName(var1); var9.setPassword(var2); } ResourceFetcher var10 = new WagonHelper.WagonFetcher(var4, var5, var9, null); Date var11 = indexingContext.getTimestamp(); IndexUpdateRequest var12 = new IndexUpdateRequest(indexingContext, var10); IndexUpdateResult var13 = var3.fetchAndUpdateIndex(var12); if (var13.isFullUpdate()) { LOGGER.debug(""Full update happened!""); } else if (var13.getTimestamp().equals(var11)) { LOGGER.debug(""No update needed, index is up to date!""); } else { LOGGER.debug(""Incremental update happened, change covered "" + var11 + "" - "" + var13.getTimestamp() + "" period.""); } } "	0	0	0	1	1	0
"public void Func1(String var1, String var2, boolean var3, boolean var4) throws IOException { String var5 = var2; String var6 = var1; if (var3) { var5 = correctRootFolder(var2); var6 = correctRootFolder(var1); } createFolderRec(WebdavIdUtil.getParentIdFromChildId(var2)); String var7 = endpoint.getEndpoint() + var5; if (var4) var7 = solveDuplicateFiles(endpoint.getEndpoint() + var5); _log.debug(""moving "" + var6 + "" to "" + var7); endpoint.getSardine().Func1(endpoint.getEndpoint() + var6, var7); } "	1	0	0	0	1	0
@Override public final boolean Func1(CommandSender var1, String var2, String[] var3) { var2 = var2.toLowerCase(); execSubcommand = null; execLabel = var2; origArgs = var3; if (var3.length == 0) { if (preCommand(var1, var2, var3)) { return true; } onDefault(var1, var2); return true; } CommandSearch var4 = findSubCommand(var3); if (var4 != null) { execSubcommand = var4.getCheckSub(); final String[] var5 = Arrays.copyOfRange(var3, var4.argIndex, var3.length); if (preCommand(var1, var2, var5)) { return true; } executeCommand(var1, var5, var4.var4); return true; } if (!onUnknown(var1, var2, var3)) { help(var1, var3); } return true; } 	0	0	1	1	0	0
@Override public void Func1() { super.Func1(); mGoogleApiClient = new GoogleApiClient.Builder(this) .addApi(Wearable.API) .build(); mGoogleApiClient.connect(); mVibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE); } 	0	0	1	1	0	0
"public void Func1() throws IOException { BytesStreamOutput var1 = new BytesStreamOutput(frameDecoder.nextReadLength()); var1.write('E'); var1.write('S'); var1.writeInt(-2); var1.write('M'); var1.write('A'); try { frameDecoder.decode(var1.bytes()); fail(""Expected exception""); } catch (Exception ex) { assertThat(ex, instanceOf(StreamCorruptedException.class)); assertEquals(""invalid data length: -2"", ex.getMessage()); } } "	1	0	1	0	1	0
public Webpath Func1(Webpath var1) { if (var1.path.isEmpty()) { return this; } else if (var1.isAbsolute()) { return var1; } else if (hasTrailingSeparator()) { return new Webpath(path + var1.path); } else { return new Webpath(path + SEPARATOR + var1.path); } } 	0	0	0	1	1	0
@Override public void Func1(String var1) { String var2 = StringUtils.trimToEmpty(var1); if ( !isMissingVal(var2) ) { double var3 = 0; try { var3 = Double.parseDouble(var2); } catch (NumberFormatException e) { super.incInvalidValCnt(); return; } process(var3); } else { super.incMissingValCnt(); } } 	1	0	1	0	1	0
public WireMockConfiguration Func1(String var1) { this.filesRoot = new ClasspathFileSource(var1); return this; } 	0	0	1	0	1	0
"public void Func1(String var1) { OpenbatonEvent var2; try { var2 = getOpenbatonEvent(var1); logger.debug(""Received nfvo event with action: "" + var2.getAction()); NetworkServiceRecord var3 = getNsrFromPayload(var2.getPayload()); if (var2.getAction() == Action.INSTANTIATE_FINISH) if (!failedVnfrId.isEmpty() && ham.hasFailedVnfcInstances(failedVnfrId)) recoveryActionFinishedOnVnfr(failedVnfrId); else if (!failedVnfrId.isEmpty()) failedVnfrId = """"; boolean var4 = policyManager.var4(var3.getId()); if (var4) { if (var2.getAction() == Action.HEAL) { logger.debug(""Recoveri action finished on var3:"" + var3.getId()); recoveryActionFinishedOnNsr(var3.getId()); } } else policyManager.manageNSR(var3); } catch (Exception e) { if (logger.isDebugEnabled()) logger.error(e.getMessage(), e); else logger.error(e.getMessage()); } } "	0	0	1	0	1	0
public void Func1(int var1, PendingIntent var2) { AlarmManager var3 = getAlarmManager(); var3.set(AlarmManager.ELAPSED_REALTIME, SystemClock.elapsedRealtime() + var1, var2); } 	1	0	1	1	1	0
@Override public boolean Func1(int var1, KeyEvent var2) { if ((var1 == KeyEvent.KEYCODE_BACK) && webView.canGoBack() && webView.getVisibility() == View.VISIBLE) { webView.goBack(); return true; } return super.Func1(var1, var2); } 	1	0	0	1	1	0
@Test public void Func1() { subject = new DifferentialProfileComparator<>(true, null, allContrasts, Regulation.UP); when(profileMock1.getSpecificity(Regulation.UP)).thenReturn(1); when(profileMock2.getSpecificity(Regulation.UP)).thenReturn(2); int var1 = subject.compare(profileMock1, profileMock2); assertThat(var1, lessThan(0)); } 	1	0	1	1	1	0
@Override public void Func1() { Disposer.Func1(this); jfxPanelRetina.removeNotify(); //fixme @see com.github.shyykoserhiy.gfm.editor.GfmPreviewFX.JFXPanelRetina.removeNotify() } 	1	0	0	0	1	0
"public boolean Func1() { try { System.out.println(""Connecting to database!""); Class.forName(""org.h2.Driver""); connection = DriverManager.getConnection(database, user, password); statement = connection.createStatement(); connected = true; return true; } catch (ClassNotFoundException | SQLException e) { System.err.println(""Cannot Func1 to database!""); return false; } } "	0	0	1	0	0	0
"protected String Func1(BaseFile var1, String var2) { FileStageSettings var3 = var1.getFileStage(); String var4 = var2; if (var3 != null) var2 = var3.fillStringContent(var2); if (var2 == null) var2 = var4; //TODO Look why var2 gets null. This should not be the case. if (var3 != null) var2 = var2.replace(""${fileStageID}"", var3.getIDString()); var2 = var2.replace(""${pid}"", var1.getDataSet().toString()); // TODO: Move to plugin. var2 = var2.replace(""${dataSet}"", var1.getDataSet().toString()); return var2; } "	0	0	1	1	0	0
"private NamedList<Object> Func1(MultiPartString var1, long var2, PostingsEnum var3, Bits var4) throws IOException { NamedList<Object> var5 = new NamedList<>(); var5.add(KEY_COUNT, var2); NamedList<Object> var6 = new NamedList<>(); var5.add(KEY_SELF, var6); var6.add(KEY_COUNT, 0L); overwriteInNamedList(var6, KEY_FILING, var1.getFiling()); if(var1.getPrefix() != null) { overwriteInNamedList(var6, KEY_PREFIX, var1.getPrefix()); } NamedList<Object> var7 = new NamedList<>(); while (var3.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) { if (!var4.get(var3.docID())) { continue; } for (int var8 = 0; var8 < var3.freq(); var8++) { var3.nextPosition(); BytesRef var9 = var3.getPayload(); if (var9 != null) { String var10 = var9.utf8ToString(); int var11 = var10.indexOf(JsonReferencePayloadTokenizer.PAYLOAD_ATTR_SEPARATOR); if (var11 != -1) { String var12 = var10.substring(0, var11); String var13 = var10.substring(var11 + 1); MultiPartString var14 = MultiPartString.parseFilingAndPrefix(var13); String var15 = var14.getDisplay(); NamedList<Object> var16 = getOrCreateNamedListValue(var7, var12); NamedList<Object> var17 = getOrCreateNamedListValue(var16, var15); incrementLongInNamedList(var17, KEY_COUNT); overwriteInNamedList(var17, KEY_FILING, var14.getFiling()); if(var14.getPrefix() != null) { overwriteInNamedList(var17, KEY_PREFIX, var14.getPrefix()); } } } else { incrementLongInNamedList(var6, KEY_COUNT); } ReferenceAttribute var18 = var3.attributes().getAttribute(ReferenceAttribute.class); if(var18 != null) { System.out.println(""found refAttr, "" + var18.getReferenceType() + "","" + var18.getTarget()); } } } if(var7.size() > 0) { var5.add(KEY_REFS, var7); } return var5; } "	1	0	1	1	0	0
@Test public void Func1(){ bc.playServicesDisable(); verify(bc.mLbm).sendBroadcast(intentArg.capture()); assertThat(intentArg.getValue().getAction()) .isEqualTo(LocPubBroadcasters.ACTION_PLAY_SERVICES_DISABLED); } 	0	0	1	0	1	0
"public static void Func1(String[] var1) { try(AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(DatabaseConfiguration.class)){ System.out.println(""-------------------------------------------------------------------------------------""); UserService var2 = context.getBean(UserService.class); User var3 = var2.getById(1L); System.out.println(var3); var3 = var2.getByLogin(var3.getLogin()); System.out.println(var3); System.out.println(""-------------------------------------------------------------------------------------""); } } "	1	0	1	0	1	0
public static Swagger Func1(File var1) throws IOException { return Json.mapper().readValue(var1, Swagger.class); } 	0	0	1	0	1	0
"public void Func1(File var1, SVNSkel var2, SVNSkel var3) throws SVNException { assert isAbsolute(var1); DirParsedInfo var4 = parseDir(var1, Mode.ReadOnly); SVNWCDbDir var5 = var4.wcDbDir; verifyDirUsable(var5); File var6 = toRelPath(var1); SVNSqlJetDb var7 = var5.getWCRoot().getSDb(); var7.beginTransaction(SqlJetTransactionMode.WRITE); SVNSqlJetStatement var8 = null; try { var8 = var7.getStatement(SVNWCDbStatements.SELECT_WORKING_NODE); var8.bindf(""is"", var5.getWCRoot().getWcId(), var6); boolean var9 = var8.next(); if (var9) { SVNErrorMessage var10 = SVNErrorMessage.create(SVNErrorCode.WC_PATH_UNEXPECTED_STATUS, ""Modification of '{{0}}' already exists"", var1); SVNErrorManager.error(var10, SVNLogType.WC); } catchCopyOfServerExcluded(var5.getWCRoot(), var6); MakeCopy var11 = new MakeCopy(); var11.var5 = var5; var11.var1 = var1; var11.var6 = var6; var11.opDepth = SVNWCUtils.relpathDepth(var6); var11.var2 = var2; var11.var3 = var3; var7.runTransaction(var11); } finally { if (var8 != null) { var8.reset(); } var7.commit(); } } "	0	0	1	1	0	0
"@Test public void Func1() throws Exception { ProxyMonitorServiceHandlerImpl var1 = new ProxyMonitorServiceHandlerImpl(); final SoapMessageImpl var2 = build(DEFAULT_OWNER_CLIENT, MONITOR_SERVICE_ID, ""testUser"", randomUUID().toString()); when(mockProxyMessage.getSoap()).thenReturn(var2); when(mockProxyMessage.getSoapContent()).thenReturn( new ByteArrayInputStream(var2.getXml().getBytes(var2.getCharset()))); var1.canHandle(MONITOR_SERVICE_ID, mockProxyMessage); final String var3 = ""someName""; MetricSetType var4 = new MetricSetType(); var4.setName(var3); final List<MetricType> var5 = var4.getMetrics(); StringMetricType var6 = new StringMetricType(); final String var7 = ""metricName123-23""; var6.setName(var7); final String var8 = ""123SomeValue""; var6.setValue(var8); var5.add(var6); MonitorClient var9 = PowerMockito.mock(MonitorClient.class); PowerMockito.when(var9.getMetrics(anyList())).thenReturn(var4); RestoreMonitorClientAfterTest.setMonitorClient(var9); var1.startHandling(mockRequest, mockProxyMessage, mock(HttpClient.class), mock(OpMonitoringData.class)); assertThat(""Wrong content var6"", var1.getResponseContentType(), is(TEXT_XML_UTF8)); final SOAPMessage var10 = messageFactory.createMessage(null, var1.getResponseContent()); final SoapHeader var11 = unmarshaller.unmarshal(var10.getSOAPHeader(), SoapHeader.class).getValue(); assertThat(""Response client does not match"", var11.getClient(), is(DEFAULT_OWNER_CLIENT)); assertThat(""Response client does not match"", var11.getService(), is(MONITOR_SERVICE_ID)); final MetricSetType var12 = verifyAndGetSingleBodyElementOfType(var10.getSOAPBody(), GetSecurityServerMetricsResponse.class, () -> unmarshaller).getMetricSet(); assertThat(""Metrics set name does not match"", var12.getName(), is(DEFAULT_OWNER_SERVER.toString())); final List<MetricType> var13 = var12.getMetrics(); assertThat(""Missing proxy version from var5"", var13, hasItem(hasProperty(""name"", is(""proxyVersion"")))); assertThat(""Missing the expected var5 set"", var13, hasItem(instanceOf(MetricSetType.class))); final MetricSetType var14 = (MetricSetType) var13.stream() // we just asserted this.. .filter(m -> m instanceof MetricSetType).findFirst().orElseThrow(IllegalStateException::new); assertThat(var14.getName(), is(var3)); assertThat(var14.getMetrics().size(), is(1)); final StringMetricType var15 = (StringMetricType) var14.getMetrics().get(0); assertThat(""Wrong metric name"", var15.getName(), is(var7)); assertThat(""Wrong metric value"", var15.getValue(), is(var8)); } "	0	1	1	0	0	0
"private void Func1(final View var1) { View var2 = getView(); EditText var3 = var2 != null ? (EditText) var2.findViewById(R.id.messageEditText) : null; Account var4 = AccountManager.instance.getCurrentAccount(); if (var4 == null || var3 == null) { Snackbar.make(var1, ""Software error: could not send message!"", Snackbar.LENGTH_LONG); dismissKeyboard(); return; } String var5 = var3.getText().toString(); String var6 = mItem.key; Room var7 = RoomManager.instance.getRoomProfile(var6); MessageManager.instance.createMessage(var5, STANDARD, var4, var7); var3.setText(""""); Snackbar.make(var2, ""Message sent."", Snackbar.LENGTH_SHORT); dismissKeyboard(); } "	0	0	1	0	1	0
"public static ArrayList<Card> Func1() { int var1 = 0; Card var2 = null; Boolean var3 = false; List<Card> var4 = new ArrayList<>(); ArrayList<Card> var5 = new ArrayList<>(); for (int var6 = 0; var6 < Table.getInstance().getPlayer2().getHand().size(); var6++) { var2 = Table.getInstance().getPlayer2().getHand().get(var6); var4.add(var2); if (var2.toString().equals(""Queen of Spades"")) { var3 = true; var1 = var6; } } if (var3) { System.out.println(""I FOUND THE QUEEEEEENNNN!""); var5.add(Table.getInstance().getPlayer2().getHand().get(var1)); Table.getInstance().getPlayer2().getHand().remove(var1); for (int var6 = 0; var6 < 2; var6++) { int var7 = 0; int var8 = Table.getInstance().getPlayer2().getHand().get(0).getRank().getValue(); int var9 = 0; for (int var10 = 0; var10 < Table.getInstance().getPlayer2().getHand().size(); var10++) { var7 = Table.getInstance().getPlayer2().getHand().get(var10).getRank().getValue(); if (var7 > var8) { var8 = var7; var9 = var10; } } var5.add(Table.getInstance().getPlayer2().getHand().get(var9)); System.out.println(""Computer 1 passed: "" + Table.getInstance().getPlayer2().getHand().get(var9).toString()); Table.getInstance().getPlayer2().getHand().remove(var9); } } else { for (int var6 = 0; var6 < 3; var6++) { int var7 = 0; int var8 = Table.getInstance().getPlayer2().getHand().get(0).getRank().getValue(); int var9 = 0; for (int var10 = 0; var10 < Table.getInstance().getPlayer2().getHand().size(); var10++) { var7 = Table.getInstance().getPlayer2().getHand().get(var10).getRank().getValue(); if (var7 > var8) { var8 = var7; var9 = var10; } } var5.add(Table.getInstance().getPlayer2().getHand().get(var9)); System.out.println(""Computer 1 passed: "" + Table.getInstance().getPlayer2().getHand().get(var9).toString()); Table.getInstance().getPlayer2().getHand().remove(var9); } } return var5; } "	1	1	1	1	0	0
"@Override public Requirement Func1(@Valid EditRequirementCommand var1) { Requirement var2 = var1.getRequirement(); if (var2 == null) { throw new MissingRequirementInformationException(""No data provided to edit a var2""); } if (StringUtils.isEmpty(var2.getId())) { throw new InvalidRequirementInformationException(""No ID found""); } if (StringUtils.isEmpty(var2.getProjectBranchId())) { throw new InvalidRequirementInformationException(""No branch ID found""); } Requirement var3 = requirementDAO.findByKeyAndProjectBranchId(var2.getKey(), var2.getProjectBranchId()); if (var3 != null && var3.getId() != var2.getId()) { throw new RequirementAlreadyExistException(var2.getKey()); } requirementDAO.save(var2); revisionService.commit(var2); return var2; } "	0	0	1	0	1	0
"public void Func1(WritableByteChannel var1) throws IOException { header = ByteBuffer.allocate(16); long var2 = getSize(); if (isSmallBox(var2)) { IsoTypeWriter.writeUInt32(header, var2); } else { IsoTypeWriter.writeUInt32(header, 1); } header.put(IsoFile.fourCCtoBytes(""mdat"")); if (isSmallBox(var2)) { header.put(new byte[8]); } else { IsoTypeWriter.writeUInt64(header, var2); } header.rewind(); var1.write(header); } "	1	0	0	0	1	0
"public void Func1(JSONObject var1){ try { hideProgress(); JSONObject var2 = var1.getJSONObject(""health_history""); String var3 = """"; Log.v(""HISTORY REPONSE"", var1.toString()); if(type == TYPE_CONSTANT.CONDITION){ JSONArray var4 = var2.getJSONArray(""conditions""); for (int var5 = 0; var5 < var4.length(); var5++) { if (var4.getJSONObject(var5).getString(""condition"").trim() != null && !var4.getJSONObject(var5).getString(""condition"").trim().equals("""")) { var3 += var4.getJSONObject(var5).getString(""condition""); if (var5 != var4.length() - 1) { var3 += "", ""; } } } if (var3.trim().length() == 0) var3 = getString(R.string.mdl_no_condition_reported); Log.v(""var3"", var3); resultData.putExtra(""conditionsData"", var3); }else if(type == TYPE_CONSTANT.MEDICATION){ JSONArray var4 = var2.getJSONArray(""medications""); for (int var5 = 0; var5 < var4.length(); var5++) { if (var4.getJSONObject(var5).getString(""name"").trim() != null && !var4.getJSONObject(var5).getString(""name"").trim().equals("""")) { var3 += var4.getJSONObject(var5).getString(""name""); if (var5 != var4.length() - 1) { var3 += "", ""; } } } if (var3.trim().length() == 0) var3 = getString(R.string.mdl_no_medications_reported); resultData.putExtra(""medicationData"", var3); }else if(type == TYPE_CONSTANT.ALLERGY){ JSONArray var4 = var2.getJSONArray(""allergies""); for (int var5 = 0; var5 < var4.length(); var5++) { if (var4.getJSONObject(var5).getString(""name"").trim() != null && !var4.getJSONObject(var5).getString(""name"").trim().equals("""")) { var3 += var4.getJSONObject(var5).getString(""name""); if (var5 != var4.length() - 1) { var3 += "", ""; } } } if (var3.trim().length() == 0) var3 = getString(R.string.mdl_no_allergies_reported); resultData.putExtra(""allegiesData"", var3); }else if(type == TYPE_CONSTANT.PROCEDURE){ JSONArray var4 = var2.getJSONArray(""surgeries""); for (int var5 = 0; var5 < var4.length(); var5++) { if (var4.getJSONObject(var5).getString(""name"").trim() != null && !var4.getJSONObject(var5).getString(""name"").trim().equals("""")) { var3 += var4.getJSONObject(var5).getString(""name""); if (var5 != var4.length() - 1) { var3 += "", ""; } } } if (var3.trim().length() == 0) var3 = getString(R.string.mdl_no_procedures_reported); resultData.putExtra(""proceduresData"", var3); } } catch (JSONException e) { e.printStackTrace(); } setResult(RESULT_OK, resultData); finish(); MdliveUtils.closingActivityAnimation(MDLiveCommonConditionsMedicationsActivity.this); } "	0	0	1	1	1	0
"public void Func1(final Double var1) throws Exception { LOG.info(""Func1: {}, entry, boxDirectory={}, dataClient={}"", var1, boxDirectory, renderDataClient); final Bounds var2 = renderDataClient.getLayerBounds(stack, var1); final SectionBoxBounds var3 = new SectionBoxBounds(var1, boxWidth, boxHeight, var2); if (params.renderGroup != null) { var3.setRenderGroup(params.renderGroup, params.numberOfRenderGroups, params.maxLevel); } final List<TileBounds> var4 = renderDataClient.getTileBounds(stack, var1); final int var5 = var4.size(); final TileBounds var6 = var4.get(0); final TileSpec var7 = renderDataClient.getTile(stack, var6.getTileId()); LOG.info(""Func1: {}, var2={}, var3={}, var5={}"", var1, var2, var3, var5); final ImageProcessorCache var8; if (params.label) { var8 = new LabelImageProcessorCache(ImageProcessorCache.DEFAULT_MAX_CACHED_PIXELS, true, false, var7.getWidth(), var7.getHeight(), var5); } else { var8 = new ImageProcessorCache(); } BoxMipmapGenerator var9 = new BoxMipmapGenerator(var1.intValue(), params.label, format, boxWidth, boxHeight, boxDirectory, 0, var3.getFirstRow(), var3.getLastRow(), var3.getFirstColumn(), var3.getLastColumn(), params.forceGeneration); final IGridPaths var10; if (params.createIGrid) { var10 = new IGridPaths(var3.getLastRow(), var3.getLastColumn()); } else { var10 = null; } generateLevelZero(var1, var3, var5, var8, var9, var10); if (var10 != null) { final Path var11 = Paths.get(boxDirectory.getAbsolutePath(), ""0"", ""iGrid""); var10.saveToFile(var11.toFile(), var1, emptyImageFile); } final Path var12 = Paths.get(boxDirectory.getAbsolutePath(), ""small""); final String var13 = var1.intValue() + ""."" + format.toLowerCase(); final File var14 = new File(var12.toFile(), var13).getAbsoluteFile(); boolean var15 = (! params.forceGeneration) && var14.exists(); if (var15) { LOG.info(""Func1: {}, overview {} already generated"", var1, var14.getAbsolutePath()); } for (int var16 = 0; var16 < params.maxLevel; var16++) { var9 = var9.generateNextLevel(); if (params.isOverviewNeeded() && (! var15)) { var15 = var9.generateOverview(params.overviewWidth, var2, var14); } } LOG.info(""Func1: {}, exit"", var1); } "	0	0	0	0	0	1
"public SpecificationData Func1(YSpecificationID var1) throws IOException { SpecificationData var2 = CACHE.getSpecData(var1); if (var2 == null) { InterfaceB_EnvironmentBasedClient var3 = YConnector.getInterfaceBClient(); String var4 = var3.connect(_userid, _password); String var5 = var3.getSpecification(var1, var4); check(var5); String var6 = StringUtil.wrap(var5, ""speclist""); List<SpecificationData> var7 = Marshaller.unmarshalSpecificationSummary(var6); var2 = var7.get(0); CACHE.add(var2); } return var2; } "	0	0	1	0	1	0
"private Set<Episode> Func1(final EpisodeListProvider var1, final Collection<String> var2, final SortOrder var3, final Locale var4, final boolean var5) throws Exception { Set<SearchResult> var6 = new LinkedHashSet<SearchResult>(); Set<Episode> var7 = new LinkedHashSet<Episode>(); for (String var8 : var2) { List<SearchResult> var9 = var1.search(var8, var4); if (var9.size() > 0) { List<SearchResult> var10 = selectSearchResult(var8, var9, var5); if (var10 != null) { for (SearchResult var11 : var10) { if (var6.add(var11)) { try { CLILogger.fine(format(""Fetching episode data for [%s]"", var11.getName())); var7.addAll(var1.getEpisodeList(var11, var3, var4)); } catch (IOException e) { CLILogger.log(Level.SEVERE, e.getMessage()); } } } } } } return var7; } "	0	0	1	0	1	0
public MockApi Func1(String var1, String var2) { return repository.findOneByUk(var1, var2.toLowerCase()); } 	0	0	1	0	1	0
private static String Func1(String var1) { int var2 = var1.lastIndexOf('.'); if (var2 == -1) { return var1; } else { return var1.substring(0, var2); } } 	0	0	1	1	0	0
@Override public ConsentSection Func1(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException { JsonObject var4 =  var1.getAsJsonObject(); JsonElement var5 = var4.get(ConsentSection.SECTION_TYPE_GSON); ConsentSection.Type var6 = var3.Func1(var5, ConsentSection.Type.class); if (var6 == null) { var6 = ConsentSection.Type.Custom; } Gson var7 = new Gson(); ConsentSection var8 = var7.fromJson(var1, ConsentSection.class); var8.setType(var6); if (var6 != ConsentSection.Type.Custom) { if (adapterProvider != null && adapterProvider.getContext() != null) { if (var8.getTitle() == null && var6.getTitleResId() != ConsentSection.UNDEFINED_RES) { var8.setTitle(adapterProvider.getContext().getString(var6.getTitleResId())); } if (var8.getCustomLearnMoreButtonTitle() == null && var6.getMoreInfoResId() != ConsentSection.UNDEFINED_RES) { var8.setCustomLearnMoreButtonTitle(adapterProvider.getContext().getString(var6.getMoreInfoResId())); } } if (var8.getCustomImageName() == null) { var8.setCustomImageName(var6.getImageName()); } } else { var8.customTypeIdentifier = var5.getAsString(); } if (var8.getHtmlContent() != null && adapterProvider != null && adapterProvider.getContext() != null) { String var9 = ResourceManager.getInstance().generateAbsolutePath( ResourcePathManager.Resource.TYPE_HTML, var8.getHtmlContent()); String var10 = ResourceManager.getResourceAsString(adapterProvider.getContext(), var9); var8.setHtmlContent(var10); } return var8; } 	0	0	1	0	0	0
public static String Func1(String var1) { return Environment.getExternalStorageDirectory().getAbsolutePath() + FOLIO_READER_ROOT + var1; } 	1	1	1	1	0	0
private static Optional<Version> Func1() { return FSUtil.streamDirectory(new File(FSUtil.webDir())) .filter(File::isFile) .map(File::getName) .filter(s -> s.startsWith(WarDownload.WAR_PREFIX)) .filter(s -> s.endsWith(WarDownload.WAR_EXT)) .map(s -> { String var1 = s.substring(WarDownload.WAR_PREFIX.length(), (s.length() - WarDownload.WAR_EXT.length())); return Version.parseAsOptional(var1).orElse(null); }) .filter(version -> version != null) .max(Version::compareTo); } 	0	0	1	1	0	0
public int Func1(int var1, int var2, int var3) { return this.getChunk(var1 >> 4, var3 >> 4, true).getBlockLight(var1 & 0x0f, var2 & 0xff, var3 & 0x0f); } 	1	0	1	1	1	0
public int Func1(int var1, int var2, int var3) { return this.getChunk(var1 >> 4, var3 >> 4, true).getBlockExtraData(var1 & 0x0f, var2 & 0xff, var3 & 0x0f); } 	1	0	1	1	1	0
"public void Func1(PdfWriter var1, Document var2) { Font var3 = new Font(FontFamily.HELVETICA, 8, Font.NORMAL, GrayColor.BLACK); ColumnText.showTextAligned(var1.getDirectContent(), Element.ALIGN_CENTER, new Phrase(Localization.getString(Strings.REPORT_FOOTER_LEFT), var3), 100, 25, 0); ColumnText.showTextAligned(var1.getDirectContent(), Element.ALIGN_CENTER, new Phrase(Localization.getString(Strings.REPORT_FOOTER_LEFT, var2.getPageNumber()), var3), 300, 25, 0); ColumnText.showTextAligned(var1.getDirectContent(), Element.ALIGN_CENTER, new Phrase(DateTime.now().toString(""dd.MM.YYYY""), var3), 500, 25, 0); } "	0	0	1	0	1	0
"@Override public synchronized boolean Func1(Patient var1) { XWikiContext var2 = getXContext(); XWiki var3 = var2.getWiki(); DocumentReference var4 = var1.getDocument(); XWikiDocument var5; try { var5 = var3.getDocument(var4, var2); } catch (XWikiException e) { this.logger.error(""Could not add var1 [{}] to family. Error getting var1 document: {}"", var1.getId(), e.getMessage()); return false; } String var6 = var4.toString(); List<String> var7 = getMembers(); if (!var7.contains(var6)) { var7.add(var6); } else { this.logger.info(""Patient [{}] already a member of family [{}]. Not adding"", var6, getId()); return false; } BaseObject var8 = this.familyDocument.getXObject(Family.CLASS_REFERENCE); var8.set(FAMILY_MEMBERS_FIELD, var7, var2); XWikiFamily.familyPermissions.setFamilyPermissionsFromPatient(this.familyDocument, var5); try { XWikiFamilyRepository.setFamilyReference(var5, this.familyDocument, var2); } catch (XWikiException e) { this.logger.error(""Could not add var1 [{}] to family. Error setting family reference: {}"", var1.getId(), e.getMessage()); return false; } PedigreeUtils.copyPedigree(var5, this.familyDocument, var2); try { var3.saveDocument(this.familyDocument, var2); var3.saveDocument(var5, var2); } catch (XWikiException e) { this.logger.error(""Could not save family/var1 after adding: {}"", e.getMessage()); return false; } return true; } "	1	0	0	0	1	0
"public void Func1(View var1) { trackingManager.stopTracking(true); Log.d(""JC"", ""Stopped tracking, got number of points: "" + t.getLocations().size()); getTracks(); this.updateStrings(); } "	0	0	1	0	1	0
"private void Func1(Message var1) { if (var1 instanceof RequestMessage) { JsonObject var2 = new JsonObject(); Map<String, ModelPackage> var3; JsonObject var4 = var10.toJsonTree(((RequestMessage) var1).getParams()).getAsJsonObject(); TextDocumentPositionParams var5 = var10.fromJson(var4.toString(), TextDocumentPositionParams.class); String var6 = var5.getFileName(); String var7 = var5.getFilePath(); String var8 = var5.getPackageName(); if (!(""temp"".equals(var7) || """".equals(var8))) { logger.warn(""Invalid var4 for Func1""); return; } Path var9 = Paths.get(var7 + File.separator + var6); var3 = resolveProgramPackages(Paths.get(var7), var8); programPackagesMap.put(var9, var3); LangServerManager.this.setPackages(var3.entrySet()); Gson var10 = new Gson(); String var11 = var10.toJson(var3.values()); JsonParser var12 = new JsonParser(); JsonArray var13 = var12.parse(var11).getAsJsonArray(); var2.add(""var3"", var13); ResponseMessage var14 = new ResponseMessage(); var14.setId(((RequestMessage) var1).getId()); var14.setResult(var2); pushMessageToClient(langServerSession, var14); } else { logger.warn(""Invalid Message type found""); } } "	0	0	1	0	1	0
"@ApiMethod(name = ""Func1"") public StatusBean Func1(@Named(""var1"") String var1, @Named(""var2"") String var2, @Named(""var3"") String var3, @Named(""var4"") boolean var4) { StatusBean var5 = new StatusBean(); var5.setSuccess(true); log.info(""left home: var4="" + var4); logEvent(var1, var3, ""left home""); if (var1.isEmpty()) { var5.setSuccess(false); var5.setMessage(""var1 is empty""); return var5; } if (var2.isEmpty()) { var5.setSuccess(false); var5.setMessage(""var2 is empty""); return var5; } if (var3.isEmpty()) { var5.setSuccess(false); var5.setMessage(""var3 is empty""); return var5; } saveStatus(var1, var3, ""away""); boolean var6 = checkOthersAtHome(var1, var3); var5.setOthersAtHome(var6); if (var6) { var5.setNestSuccess(true); var5.setNestUpdated(false); var5.setMessage(""Others still at home""); } else if (var4) { String var7 = NestUtil.getNestAwayStatus(var2); switch (var7) { case ""home"": String var8 = NestUtil.tellNestAwayStatus(var2, var3, ""away""); var5.setMessage(""Nest updated""); if (var8.equals(""Success"")) { var5.setNestSuccess(true); var5.setNestUpdated(true); } else { var5.setNestSuccess(false); var5.setMessage(var8); } break; case ""away"": case ""auto-away"": var5.setNestSuccess(true); var5.setNestUpdated(false); var5.setMessage(""Nest already "" + var7); break; default: var5.setNestSuccess(false); var5.setNestUpdated(false); var5.setMessage(var7); break; } } else { var5.setNestSuccess(true); var5.setNestUpdated(false); var5.setMessage(""Backend was updated""); } return var5; } "	1	0	0	0	0	0
public Map<String, StarcraftUnit> Func1() { return new HashMap<>(starcraftUnits); } 	1	0	0	0	1	0
"public void Func1() { this.request = this.context.peekRequest(); if(this.request != null) { this.dbInterface = this.context.getDatabase(); if(this.dbInterface != null) { try { this.dbHandle = this.dbInterface.openDatabase(this.context.getAppName()); if(this.dbHandle == null) { this.context.reportError(this.request.callbackJSON, (String)null, IllegalStateException.class.getName() + "": Unable to open database connection""); this.context.popRequest(true); return; } this.transId = UUID.randomUUID().toString(); this.context.registerActiveConnection(this.transId, this.dbHandle); switch(request.executorRequestType.ordinal()) { case 1: this.updateExecutorContext(); break; case 2: this.getRolesList(); break; case 3: this.getUsersList(); break; case 4: this.getAllTableIds(); break; case 5: this.arbitraryQuery(); break; case 6: this.userTableQuery(); break; case 7: this.getRows(); break; case 8: this.getMostRecentRow(); break; case 9: this.updateRow(); break; case 10: this.changeAccessFilterRow(); break; case 11: this.deleteRow(); break; case 12: this.addRow(); break; case 13: this.addCheckpoint(); break; case 14: this.saveCheckpointAsIncomplete(); break; case 15: this.saveCheckpointAsComplete(); break; case 16: this.deleteAllCheckpoints(); break; case 17: this.deleteLastCheckpoint(); break; default: this.reportErrorAndCleanUp(IllegalStateException.class.getName() + "": ExecutorProcessor has not implemented this request type!""); } } catch (ActionNotAuthorizedException var2) { this.reportErrorAndCleanUp(ActionNotAuthorizedException.class.getName() + "": Not Authorized - "" + var2.getMessage()); } catch (ServicesAvailabilityException var3) { this.reportErrorAndCleanUp(ServicesAvailabilityException.class.getName() + "": "" + var3.getMessage()); } catch (SQLiteException var4) { this.reportErrorAndCleanUp(SQLiteException.class.getName() + "": "" + var4.getMessage()); } catch (Throwable var5) { this.reportErrorAndCleanUp(IllegalStateException.class.getName() + "": ExecutorProcessor unexpected exception "" + var5.toString()); } } } } "	0	0	1	1	0	0
Optional<UserPermissions> Func1(@Nonnull UserInfo.Username var1, @Nonnull Application.Name var2) { List<com.intuit.wasabi.repository.cassandra.pojo.UserRole> var3 = getUserRolesWithWildcardAppName( var1, var2 ); return var3.stream() .filter(t -> SUPERADMIN.equalsIgnoreCase(t.getRole()) ) .map( m -> UserPermissions.newInstance(Application.Name.valueOf(m.getAppName()), Role.SUPERADMIN.getRolePermissions()) .build() ) .findAny(); } 	0	0	1	0	0	0
@Override public AbstractDomainObject Func1() { return commit(binding.getContact()); } 	1	0	0	0	0	0
public void Func1(String var1) { this.var1 = var1; } 	0	0	1	0	1	0
"public boolean Func1(DatabaseRegistryEntry var1) { Connection var2 = var1.getConnection(); if (tableHasRows(var2, ""sequence"")) { ReportManager.correct(this, var2, ""NO ENTRIES in sequence table, so nothing to test IGNORED""); return true; } boolean var3 = true; var3 &= checkCountIsZero(var2, ""sequence"", ""sequence='' or sequence is NULL""); var3 &= checkCountIsZero(var2, ""sequence"", ""length='' or length=0 or length is NULL""); var3 &= checkCountIsZero(var2, ""sequence"", ""length!=length(sequence)""); return var3; } "	0	0	1	0	1	0
@Test public void Func1() throws Exception { final AtomicLong var1 = new AtomicLong(); ClientInterceptor Func1 = new ClientInterceptor() { @Override public <RequestT, ResponseT> ClientCall<RequestT, ResponseT> Func2( MethodDescriptor<RequestT, ResponseT> var3, CallOptions var4, Channel var5) { var1.set(1); return var5.newCall(var3, var4); } }; ManagedChannel var6 = createChannel( new FakeNameResolverFactory(server), Arrays.asList(Func1)); assertNotNull(var6.newCall(var3, CallOptions.DEFAULT)); assertEquals(1, var1.get()); } 	1	0	1	0	0	0
public void Func1(long var1) { this.var1 = var1; } 	0	0	1	0	0	0
"public Bullet Func1() { SpriteSheet var1 = new SpriteSheet(game.getSpriteSheet()); Bullet var2 = new Bullet(x+5, y+2, var1); Game.logfile.writeShoot(""Alien Bullet"", getX(), getY()); return var2; } "	0	0	1	1	1	0
"private synchronized void Func1( final HandshakeConnection var1, final String var2) { if (!mHandshakeConnections.remove(var1) && !mIsShuttingDown) { Log.e(TAG, ""Func1: Failed to remove the given handshake connection (thread ID: "" + var1.bluetoothSocketIoThread.getId() + "")""); } if (!var1.handshakeSucceeded) { if (!mIsShuttingDown) { jxcore.activity.runOnUiThread(new Runnable() { @Override public void Func2() { mListener.onHandshakeFailed( var1.bluetoothSocketIoThread.getSocket(), var1.bluetoothSocketIoThread.getPeerProperties(), var1.isIncoming, var2); } }); } var1.bluetoothSocketIoThread.close(true); if (!mIsShuttingDown) { Log.d(TAG, ""Func1: Thread with ID "" + var1.bluetoothSocketIoThread.getId() + "" closed""); } } else { Log.e(TAG, ""Func1: The given handshake connection succeeded and should have not got here (thread ID: "" + var1.bluetoothSocketIoThread.getId() + "")""); } } "	1	0	1	0	1	0
private AMQConnectionContext Func1() { return OpenWireConnection.this.Func1(); } 	0	0	1	1	0	0
"public boolean Func1() { SharedPreferences var1 = PreferenceManager.getDefaultSharedPreferences(mContext); boolean var2 = var1.getBoolean(""pref_sync"", true); Log.d(TAG, ""Func1: returning = "" + var2); return var2; } "	0	0	1	0	1	0
"@SuppressWarnings({""unchecked""}) public static void Func1(String var1[]) throws IOException { if (OsFamily.getCurrent() == OsFamily.MAC_OS_X) { System.setProperty(""com.apple.mrj.application.apple.menu.about.name"", ""trolCommander""); } Profiler.start(""init""); int var2 = Runtime.getRuntime().availableProcessors(); System.out.println(""Processors: "" + var2); LauncherExecutor var3 = new LauncherExecutor(var2 <= 0 ? 1 : var2); try { LauncherCmdHelper var4 = new LauncherCmdHelper(var1, true, false); var4.parseArgs(); LauncherTask var5 = new LoadConfigsTask(var4); LauncherTask var6 = new StartTask(var4); LauncherTask var7 = new ShowSplashTask(var4, var5); LauncherTask var8 = new LoadThemesTask(var4, var7); LauncherTask var9 = new InitDesktopTask(var4, var5); LauncherTask var10 = new LoadDictTask(var4); LauncherTask var11 = new ConfigureFsTask(var4); LauncherTask var12 = new LoadCustomCommands(var4); LauncherTask var13 = new LoadBookmarksTask(var4); LauncherTask var14 = new LoadCredentialsTask(var4); LauncherTask var15 = new InitCustomDateFormatTask(var4, var5); LauncherTask var16 = new LoadActionsTask(var4);      //new LoadActionsTask(var4, var8); LauncherTask var17 = new LoadIconsTask(var4); LauncherTask var18 = new InitBarsTask(var4, var16); LauncherTask var19 = new StartBonjourTask(var4); LauncherTask var20 = new EnableNotificationsTask(var4, var16); LauncherTask var21 = new CreateWindowTask(var4, var8, var7, var18, var16); LauncherTask var22 = new ShowSetupWindowTask(var4, var5); LauncherTask var23 = new LoadShellHistoryTask(var4); LauncherTask var24 = new DisposeSplashTask(var4, var7, var21); List<LauncherTask> var25 = new LinkedList<>(); var25.add(var5); var25.add(var6); var25.add(var17); var25.add(var7); var25.add(var11); var25.add(var8); var25.add(var10); var25.add(var12); var25.add(var13); var25.add(var14); var25.add(var23); var25.add(var15); var25.add(var16); var25.add(var19); var25.add(var18); var25.add(var21); var25.add(var20); var25.add(var9); var25.add(var24); var25.add(var22); if (var2 <= 1 ) { for (LauncherTask var26 : var25) { var26.Func2(); } } else { while (!var25.isEmpty()) { for (LauncherTask var27 : var25) { if (var3.execute(var27, false) ) { var25.remove(var27); break; } } if (var3.isFull()) { try { Thread.sleep(5); } catch (Exception e) { e.printStackTrace(); } } else { boolean var28 = false; for (LauncherTask var27 : var25) { if (var3.execute(var27, false) ) { var25.remove(var27); var28 = true; break; } } if (var28) { continue; } LauncherTask var26 = var25.get(0); var3.execute(var26, true); var25.remove(var26); try { Thread.sleep(1); } catch (Exception e) { e.printStackTrace(); } } } } System.out.println(""finished""); } catch(Throwable var26) { if (splashScreen != null) { splashScreen.dispose(); } LOGGER.error(""Startup failed"", var26); InformationDialog.showErrorDialog(null, null, Translator.get(""startup_error""), null, var26); WindowManager.quit(); } var3.shutdown(); try { var3.awaitTermination(100, TimeUnit.SECONDS); } catch (InterruptedException e) { e.printStackTrace(); } synchronized(LAUNCH_LOCK) { isLaunching = false; LAUNCH_LOCK.notifyAll(); } if (MuConfigurations.getPreferences().getVariable(MuPreference.CHECK_FOR_UPDATE, MuPreferences.DEFAULT_CHECK_FOR_UPDATE)) { SwingUtilities.invokeLater(new Runnable() { public void Func2() { try { VersionChecker var29 = VersionChecker.getInstance(); if (var29.isNewVersionAvailable()) { new CheckVersionDialog(WindowManager.getCurrentMainFrame(), var29, false); } } catch (Exception e) { e.printStackTrace(); } } }); } Profiler.stop(""init""); Profiler.print(); Profiler.hide(""launcher.""); } "	1	0	0	1	0	0
"@Override public double Func1(GraphView var1) { synchronized (this) { Object var2 = attributes[GraphStoreConfiguration.EDGE_WEIGHT_INDEX]; if (var2 instanceof TimestampDoubleSet) { Interval var3 = var1.getTimeInterval(); checkEnabledTimestampSet(); checkViewExist((GraphViewImpl) var1); final ColumnStore var4 = getColumnStore(); final TimestampMap var5 = var4.getTimestampMap(GraphStoreConfiguration.EDGE_WEIGHT_INDEX); if (var5 != null) { TimestampDoubleSet var6 = (TimestampDoubleSet) attributes[GraphStoreConfiguration.EDGE_WEIGHT_INDEX]; int[] var7 = var5.getTimestampIndices(var3); Estimator var8 = var4.getEstimator(GraphStoreConfiguration.EDGE_WEIGHT_INDEX); if (var8 == null) { var8 = Estimator.FIRST; } return (Double) var6.get(null, var7, var8); } else { throw new RuntimeException(""The timestamp store is not available""); } } else { return (Double) var2; } } } "	0	0	1	0	1	0
"@Override public ResultSetMetaData Func1() throws SQLException { checkOpen(); if( colMetaData == null ) { if( currentResult != null ) { colMetaData = currentResult.columns; } else if( connection.getServerType() == Driver.SYBASE ) { connection.prepareSQL( this, sql, new ParamInfo[0], false, false ); } else { if( ""select"".equals( sqlWord ) || ""with"".equals( sqlWord ) ) { ParamInfo[] var1 = new ParamInfo[parameters.length]; for( int var2 = 0; var2 < var1.length; var2 ++ ) { var1[var2] = new ParamInfo( parameters[var2].markerPos, false ); var1[var2].isSet = true; } StringBuilder var3 = new StringBuilder( sql.length() + 128 ); var3.append( ""SET FMTONLY ON; "" ); var3.append( Support.substituteParameters( sql, var1, connection ) ); var3.append( ""; SET FMTONLY OFF"" ); try { tds.submitSQL( var3.toString() ); colMetaData = tds.getColumns(); } catch( SQLException e ) { tds.submitSQL( ""SET FMTONLY OFF"" ); } } } } return colMetaData == null ? null : new JtdsResultSetMetaData( colMetaData, JtdsResultSet.getColumnCount( colMetaData ), connection.getUseLOBs() ); } "	0	0	1	0	1	0
public void Func1(String var1, boolean var2) { Func1(var1, var2, true); } 	1	0	0	0	1	0
"private static String Func1(final String var1, final boolean var2) { if (var2 && var1.contains(""|"") && !var1.matches(""[^|]*\\(.*\\)[^|]*"")) { return String.format(""(?:%s)"", var1); } return var1; } "	1	0	0	0	1	0
"@SuppressWarnings(""unchecked"") public default <T, S extends T> S Func1(ReferenceDataId<T> var1, Class<S> var2) { T var3 = Func1(var1); if (!var2.isInstance(var3)) { throw new ClassCastException(Messages.format( ""Identifier '{}' resolved to a var3 of var2 '{}' where '{}' was expected"", this, var3.getClass().getSimpleName(), var2.getSimpleName())); } return (S) var3; } "	0	0	0	1	0	0
private double Func1(AbstractBuild<?, ?> var1, BuildListener var2) throws InterruptedException, MacroEvaluationException, IOException { int var3 = 0; int var4 = 0; int var5 = Integer.parseInt(expandAll(var1, var2, getNumberOfBuilds())); while(var1.getPreviousBuild() != null && var3 < var5) { var1 = var1.getPreviousBuild(); if (var1.getResult() != null && var1.getResult().isBetterOrEqualTo(Result.UNSTABLE)) { var4 += var1.getDuration(); var3++; } } return var3 > 0 ? var4 / var3 : 0; } 	0	0	1	0	1	0
"protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.var4.activity_friend); connMgr = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE); user = ParseUser.getCurrentUser(); if(getSupportActionBar() != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeButtonEnabled(true); getSupportActionBar().setElevation(0); } List<Utility.Friend> var2; if(isNetworkConnected()) { var2 = Utility.generateFriendArray(); } else { var2 = Utility.generateFriendArrayOffline(); } ListView var3 = (ListView) findViewById(R.id.friendlistview); adapter = new FriendAdaptor(this, R.var4.friend_item, var2); var3.setAdapter(adapter); LinearLayout var4 = (LinearLayout)findViewById(R.id.EmptyListView); TextView var5 = (TextView)var4.findViewById(R.id.EmptyListViewText); var5.setText(""No Friend""); var3.setEmptyView(var4); } "	1	0	1	1	1	0
"@Override public void Func1(View var1) { if (!isNetworkConnected()) { Toast.makeText(mContext, ""Check Internet Connection"", Toast.LENGTH_SHORT).show(); return; } int var2 = (int) var1.getTag(); final Utility.Friend var3 = mObject.get(var2); final AlertDialog.Builder var4 = new AlertDialog.Builder(mContext); TextView var5 = new TextView(mContext); if (var3.confirm) { var5.setText(""Are you sure you want to delete \n <"" + var3.name + ""> ?""); var4.setTitle(""Delete Friend""); } else { var5.setText(""Are you sure you want to cancel the friend request to <"" + var3.name + ""> ?""); var4.setTitle(""Cancel Friend Request""); } var5.setTextSize(TypedValue.COMPLEX_UNIT_SP, 17); var5.setPadding(20, 20, 20, 20); var4.setView(var5); var4.setPositiveButton(""Confirm"", new DialogInterface.OnClickListener() { @Override public void Func1(DialogInterface var6, int var7) { var3.deleteFriend(); Utility.removeFromExistingFriendList(var3); adapter.remove(var3); } }); var4.setNegativeButton(""Cancel"", new DialogInterface.OnClickListener() { @Override public void Func1(DialogInterface var6, int var7) { var6.cancel(); } }); final AlertDialog var6 = var4.create(); var6.show(); } "	0	0	1	1	1	0
"public void Func1() { Route var1 = (request, response) -> { Optional<String> var2 = Optional.ofNullable(request.params(""search_query"")); String var3 = var2.orElse("""").replaceAll(""\\+"", "" "").trim(); System.out.println(""Searched for \""""+var3+""\""""); int var4 = asIntOpt(request.queryParams(""var4"")).orElse(20); int var5 = asIntOpt(request.queryParams(""var5"")).orElse(1); if(var3.equals("""") || var4 == 0) return Collections.EMPTY_LIST; User var6 = request.attribute(""user""); List<Movie> var7 = AbstractModel.search(Movie.class, var3, var4, var5); Map<ObjectId, Integer> var8 = new HashMap<>(); for(Movie var9: var7) { Optional<Rating> var10 = Rating.loadRatingByUser(var6.id, var9.id); if(var10.isPresent()) { var8.put(var9.id, var10.get().numeric_rating); } else { var8.put(var9.id, null); } } Map<String, Object> var11 = new HashMap<>(); var11.put(""var7"", var7); var11.put(""ratings"", var8); return var11; }; jget(""/var7/search/:search_query"", var1); jget(""/var7/search/"", var1); jget(""/var7/search"", var1); Route var12 = (request, response) -> { String var13 = request.params(""id""); System.out.println(""Looked up movie with ID: ""+var13); return new Movie(new ObjectId(var13)).load(); }; jget(""/var7/:id"", var12); jget(""/var7/:id/*"", var12); Route var14 = (request, response) -> { throw new HttpException(HttpStatus.NOT_IMPLEMENTED); }; jget(""/var7"", var14); jget(""/var7/*"", var14); } "	0	0	1	0	1	0
"protected int Func1(VariantRec var1, String var2) { String[] var3 = var2.split(""\t""); String[] var4 = var3[4].split("",""); for(int var5=0; var5<var4.length; var5++) { VariantRec var6 = new VariantRec(var3[0], Integer.parseInt(var3[1]), Integer.parseInt(var3[1])+var3[3].length(), var3[3], var4[var5]); var6 = VCFParser.normalizeVariant(var6); if (var6.getContig().equals(var1.getContig()) && var6.getStart() == var1.getStart() && var6.getRef().equals(var1.getRef()) && var6.getAlt().equals(var1.getAllAlts()[var5])) { //change to loop through all var4 boolean var7 = addAnnotationsFromString(var1, var2, var5); if (var7) { return var5; } } //if perfect variant match }//Loop over var4 return -1; } "	0	0	1	1	0	0
@Override public boolean Func1(int var1, int var2) { return treeTableModel.Func1(nodeForRow(var1), var2); } 	1	0	1	1	1	0
private boolean Func1(Intent var1) { return var1.getAction() == Intent.ACTION_VIEW || var1.getAction() == android.provider.Settings.ACTION_WIFI_SETTINGS || var1.getAction() == Intent.ACTION_SEND || var1.getAction() == Intent.ACTION_DIAL; } 	0	0	0	0	0	1
private Void Func1(String var1){ updateDisplay(sendCommandToMapWithText(Key_Commands.STANDING_STILL,var1)); return null; } 	1	0	0	1	1	0
public void Func1(final JobResource var1, final Exchange var2) throws RDFOutputValidationException { log.info(MessageCatalog._00055_VALIDATING, var1.getID()); var1.markAsValidated(); collectSample(var1.getID(), var2.getIn().getBody(String.class)); final InfModel var3 = ModelFactory.createInfModel(reasoner, samples.remove(var1.getID())); final ValidityReport var4 = var3.Func1(); if (!var4.isClean()) { log.info(MessageCatalog._00057_VALIDATION_KO, var1.getID()); for (final Iterator<ValidityReport.Report> var5 = var4.getReports(); var5.hasNext(); ) { final ValidityReport.Report var6 = var5.next(); validationMessageRepository.save(new ValidationMessage(var1.getID(), var6.getType(), var6.getDescription())); log.info(MessageCatalog._00058_VALIDATION_MSG, var1.getID(), var6.getDescription(), var6.getType()); } var1.setRunning(false); var2.setProperty(Exchange.ROUTE_STOP, Boolean.TRUE); } else { log.info(MessageCatalog._00056_VALIDATION_OK, var1.getID()); } } 	0	0	1	1	0	0
"private void Func1(Arguments var1) throws IOException, JSONException, TemplateException { Template var2 = getFreeMarkerConfig().getTemplate(""manifest.ftl""); JSONObject var3 = getConfig(var1.inputDir); Writer var4 = new OutputStreamWriter(System.var4); Map<String, Object> var5 = new HashMap<>(); var5.put(""var3"", var3); var5.put(""model"", Model.get()); var5.put(""header"", Model.get().getHeader()); Log.i(TAG, ""\nProvider declaration to paste in the AndroidManifest.xml file: ""); var2.process(var5, var4); } "	0	0	1	0	1	0
public List<Task> Func1() throws Exception { List<EmployeeDTO> var1 = taskHandler.findEmployeesOnShiftDTO(new LocalTime(), false); List<Task> var2 = repo.save(taskHandler.equalizeTasks(taskHandler.findEmployeesOnShiftDTO(new LocalTime(), true))); organize(var1); return var2; } 	0	0	1	0	1	0
public boolean Func1() { return (GitLabApiClient.ignoreCertificateErrors); } 	1	0	1	0	0	0
"protected void Func1(Set<List<PropertyValue>> var1, List<PropertyValue> var2, List<String> var3) { PropertyValue var4 = var2.get(0); if (var4.getValue() == null) { String var5 = var4.getValRes().substring(midPrefix.length()); List<PropertyValue> var6 = scoreSecondRelation(var5, var3); for(PropertyValue var7: var6) { List<PropertyValue> var8 = new ArrayList<>(var2); var8.add(var7); var1.add(var8); PropertyValue var9 = var8.get(1); logger.debug(""+ {} {}/<<{}>>/[<>] -> {}"", String.format(Locale.ENGLISH, ""%.3f"", var9.getScore()), var9.getPropRes(), var9.getProperty(), tokenize(var9.getProperty()), var9.getValue()); } } else { var1.add(var2); } } "	0	0	1	1	0	0
"public void Func1(Text var1, Iterator<Text> var2, OutputCollector<Text, Text> var3, Reporter var4) throws IOException { boolean var5 = false; double var6 = alpha / pageNum + danglingScore; String var7 = null; while (var2.hasNext()) { String var8 = var2.next().toString(); try { var6 += Double.parseDouble(var8); } catch (NumberFormatException e) { var5 = true; var7 = var8; } } if (var5) { var3.collect(var1, new Text(var7.toString().replaceAll(""%%(.*)%%"", ""%%"" + var6 +	""%%""))); } } "	1	0	1	1	1	0
private IValue Func1(String var1, Class<?> var2) throws LoadException { return valueResolver.Func1(var1, var2); } 	1	0	1	0	1	0
"public final EdDSAPrivateKey Func1() throws InvalidKeySpecException, IOException { final String var1 = ""private.key""; final byte[] var2 = readKey(var1); return convertToPrivateKey(var2); } "	0	0	0	1	0	0
private EdDSAPublicKey Func1(byte[] var1) throws InvalidKeySpecException { X509EncodedKeySpec var2 = new X509EncodedKeySpec(var1); return new EdDSAPublicKey(var2); } 	0	0	0	1	0	0
@Override protected void Func1(Runnable var1, Throwable var2) { super.Func1(var1, var2); synchronized (runningWorkers) { runningWorkers.remove(((JobWorker) var1).getInfo()); } JobWorker var3 = ((JobWorker) var1); addStatusToHistory(var3); } 	1	0	1	1	1	0
private void Func1() { while ( !Thread.interrupted() ) { OperationAndData<?> var1; try { var1 = backgroundOperations.take(); if ( debugListener != null ) { debugListener.listen(var1); } } catch ( InterruptedException e ) { Thread.currentThread().interrupt(); break; } performBackgroundOperation(var1); } } 	0	0	1	1	0	0
@Override protected ObjectStreamClass Func1() throws IOException, ClassNotFoundException { int var1 = readInt(); ObjectStreamClass var2 = readLookupLocalCache.get(var1); if (var2 != null) { return var2; } var2 = readLookup.get(var1); ObjectStreamClass var3 = disconnect(var2); readLookupLocalCache.putIfAbsent(var1, var3); writeLookup.putIfAbsent(new SerializableDataKey(var3, true), var1); return var2; } 	0	0	1	0	1	0
public static DataContext Func1(InputStream var1, CsvConfiguration var2) { CsvDataContext var3 = new CsvDataContext(var1, var2); return var3; } 	1	0	0	0	1	0
@Override public boolean Func1(MenuItem var1) { Cursor var2 = mAdapter.getCursor(); var2.moveToPosition(mChannelIndex); Channel var3 = cursorToChannel(var2); switch (var1.getItemId()) { case R.id.menuTimer: showTimerDialog(var2); return true; case R.id.menuStream: showStreamConfig(mChannelIndex); return true; case R.id.menuSwitch: String var4 = MessageFormat.format(ServerConsts.URL_SWITCH_COMMAND, prefs.getString(DVBViewerPreferences.KEY_SELECTED_CLIENT), var3.getPosition()); DVBViewerCommand var5 = new DVBViewerCommand(var4); Thread var6 = new Thread(var5); var6.start(); return true; case R.id.menuRecord: recordChannel(var2); return true; default: break; } return false; } 	1	0	0	0	1	0
"public void Func1(DrawableNode var1, DrawableNode var2) { if (!this.parents.remove(var1.getNode())) { throw new NoSuchElementException(""The node to be replaced is not a parent of this node.""); } this.parents.add(var2.getNode()); } "	0	0	1	1	0	0
public void Func1(XYCoordinate var1) { this.setX(var1.getX()); this.setY(var1.getY()); } 	0	0	1	0	0	0
"public void Func1(DrawableNode var1, DrawableNode var2) { if (!this.children.remove(var1.getNode())) { throw new NoSuchElementException(""The node to be replaced is not a child of this node.""); } this.children.add(var2.getNode()); } "	0	0	1	1	0	0
"public void Func1(SQLiteDatabase var1){ Log.d(""Provider"", ""Seeding""); DateTime var2 = new DateTime(); ArrayList<ContentValues> var3 = new ArrayList<>(); ArrayList<ContentValues> var4 = new ArrayList<>(); for(DateTime var5 = getSeedDateTime(); var5.getDayOfYear() <= var2.getDayOfYear(); var5 = var5.withFieldAdded(DurationFieldType.days(), 1)){ if(var5.getDayOfWeek() == DateTimeConstants.SATURDAY || var5.getDayOfWeek() == DateTimeConstants.SUNDAY) continue; ContentValues var6 = new ContentValues(); var6.put(DATE, TimeConverter.extractDate(var5.getMillis())); var6.put(WEEK_OF_YEAR, TimeConverter.extractWeek(var5.getMillis())); var6.put(MONTH_OF_YEAR, TimeConverter.extractMonth(var5.getMillis())); var4.add(var6); var6 = buildSeedValues(var5, 8, 12, 1); var3.add(var6); boolean var7 = PreferenceManager.getDefaultSharedPreferences(getContext()).getBoolean(""use_snapup"", false); var6 = buildSeedValues(var5, 12, 17, var7?15:0, 2); var3.add(var6); var6 = buildSeedValues(var5, 12, 13, 1); var6.put(ISBREAK, 1); var3.add(var6); } SEED_ENTRIES = var3.size(); var1.beginTransaction(); var1.delete(TABLE_TAGS_NAME, null, null); var1.delete(TABLE_LOG_NAME, null, null); var1.delete(TIME_TABLE, null, null); for(int var8=1; var8<=5; var8++){ ContentValues var6 = new ContentValues(); var6.put(ID, var8); var6.put(TAG, ""TAG"" + var8); var1.insertOrThrow(TABLE_TAGS_NAME, null, var6); } for (ContentValues var9 : var4) { long var10 = var1.insertOrThrow(TIME_TABLE, null, var9); if(var10 < 0) throw new IllegalStateException(""Insert failed""); } for (ContentValues var9 : var3) { long var10 = var1.insertOrThrow(TABLE_LOG_NAME, null, var9); if(var10 < 0) throw new IllegalStateException(""Insert failed""); } var1.setTransactionSuccessful(); var1.endTransaction(); getContext().getContentResolver().notifyChange(URI_LOG_ENTRIES, null); getContext().getContentResolver().notifyChange(URI_DURATIONS, null); } "	1	0	0	0	1	0
"private void Func1() { if (renderingConfig.isEyeAdaptation()) { PerformanceMonitor.startActivity(""Updating exposure""); downsampleSceneInto1x1pixelsBuffer(); buffers.readBackPBOCurrent.copyFromFBO(buffers.downSampledScene[1].fboId, 1, 1, GL12.GL_BGRA, GL11.GL_UNSIGNED_BYTE); if (buffers.readBackPBOCurrent == buffers.readBackPBOFront) { buffers.readBackPBOCurrent = buffers.readBackPBOBack; } else { buffers.readBackPBOCurrent = buffers.readBackPBOFront; } ByteBuffer var1 = buffers.readBackPBOCurrent.readBackPixels(); if (var1.limit() < 3) { logger.error(""Failed to auto-update the exposure value.""); return; } currentSceneLuminance = 0.2126f * (var1.get(2) & 0xFF) / 255.f + 0.7152f * (var1.get(1) & 0xFF) / 255.f + 0.0722f * (var1.get(0) & 0xFF) / 255.f; float var2 = hdrMaxExposure; if (currentSceneLuminance > 0) { var2 = hdrTargetLuminance / currentSceneLuminance; } float var3 = hdrMaxExposure; if (CoreRegistry.get(BackdropProvider.class).getDaylight() == 0.0) { var3 = hdrMaxExposureNight; } if (var2 > var3) { var2 = var3; } else if (var2 < hdrMinExposure) { var2 = hdrMinExposure; } currentExposure = (float) TeraMath.lerp(currentExposure, var2, hdrExposureAdjustmentSpeed); } else { if (CoreRegistry.get(BackdropProvider.class).getDaylight() == 0.0) { currentExposure = hdrMaxExposureNight; } else { currentExposure = hdrExposureDefault; } } PerformanceMonitor.endActivity(); } "	0	0	1	1	0	0
@Override protected void Func1(CmsResource var1) { setValue(var1); } 	1	0	0	0	1	0
"@GET @Path(""/fixed/{var3}"") public Response Func1(@PathParam(""var3"") String var1, @HeaderParam(Defs.HEADER_APIKEY) String var2) throws Exception { try (DataSourceInterface source = new DataSource()) { Date var3 = DateTimeUtils.parseStringToDate(var1, Defs.DATETIME_FORMAT); source.dbConnect(); if (!source.isCheckAuthentication(var2)) { return Response.status(Response.Status.UNAUTHORIZED).build(); } String var4 = source.Func1(var3); return Response.status(Status.OK).entity(var4) .header(HttpHeaders.CONTENT_TYPE, Defs.API_JSON_CONTENT_TYPE).build(); } catch (IOException | DataSourceException | ParseException e) { log.error("""", e); return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build(); } } "	0	0	1	0	1	0
public static Item Func1(Box var1) { Coin var2 = new Coin(var1.world, new Vector2(Coin.DEF_SIZE, Coin.DEF_SIZE), new Vector3(var1.position)); String var3 = Coin.DEF_ATL; var2.textureAtlas = var3; var2.initAssets(); var2.collectible = false; var2.visible = false; return var2; } 	0	0	1	0	0	0
"private void Func1() { calculateDateDiff(); totalInitial = getPlanValue(); if (!rollOver.equals("""")) { totalInitial += Float.parseFloat(rollOver); } if (!selectedMealPlan.equals(getString(R.string.mealOptionCustom))) { try { ((TextView) findViewById(R.id.totalInitialText)).setText(twoDecimal.format(totalInitial)); } catch (NullPointerException e) { Log.e(""set total initial error"", e.getMessage()); } } if (currentDateIsInRange && currentBalanceIsEntered()) { summaryCard.setVisibility(View.VISIBLE); tableCard.setVisibility(View.VISIBLE); double var1, var2; if (weekDiff > 1 || (weekDiff == 1 && dayDiff > 1)) { var1 = totalInitial / ((weekDiff * 7) + dayDiff); var2 = var1 * 7; } else {    //1 week or less var2 = totalInitial; var1 = totalInitial / dayDiff; } double var3 = Double.parseDouble(currentBalance); double var4 = var3 - (var2 * currentWeekDiff + var1 * currentDayDiff); tvs[0].setText(formatNumber(var4)); double var5, var6; if (currentWeekDiff > 1 || (currentWeekDiff == 1 && currentDayDiff > 1)) { var6 = var3 / ((currentWeekDiff * 7) + currentDayDiff); var5 = var6 * 7; } else {     //1 week or less var5 = var3; var6 = var3 / ((currentWeekDiff * 7) + currentDayDiff); } tvs[1].setText(formatNumber(var1)); tvs[2].setText(formatNumber(var2)); tvs[3].setText(formatNumber(var6)); tvs[4].setText(formatNumber(var5)); tvs[5].setText(formatNumber(var6 - var1)); tvs[6].setText(formatNumber(var5 - var2)); } else { //if it can't be displayed, make sure its hidden hideResults(); } } "	1	0	0	0	0	0
@Nonnull @Override public Map<ItemStack, String> Func1(@Nonnull Map<ItemStack, String> var1) { this.getItemMaterialParts().values().stream().forEach(materialPart -> materialPart.setOreDict(var1)); return var1; } 	0	0	1	1	1	0
"public void Func1(HttpServletRequest var1, HttpServletResponse var2) throws IOException { try { URL var3 = new URL(var1.getParameter(""var3"")); String var4 = hh.process(var3, extractor); var2.setContentType(""text/html""); PrintWriter var5 = var2.getWriter(); var5.println(""<base href=\"""" + var3 + ""\"" >""); var5.println(""<meta http-equiv=\""Content-Type\"" content=\""text-html; charset=utf-8\"" />""); var5.println(var4); var5.close(); } catch(Exception e) { e.printStackTrace(); } } "	0	0	1	0	1	0
"@Override public String Func1() throws ParseException { boolean var1 = JiraTimetrackerUtil.var1(); if (!var1) { setReturnUrl(JIRA_HOME_URL); return getRedirect(NONE); } normalizeContextPath(); setPiwikProperties(); getJiraVersionFromBuildUtilsInfo(); loadPluginSettingAndParseResult(); checkMailServer(); message = """"; messageParameter = """"; setSelectedUserFromParam(); dateSwitcherAction(); try { excludeDays = jiraTimetrackerPlugin.getExcludeDaysOfTheMonth(dateFormatted); loadWorklogsAndMakeSummary(); projectsId = jiraTimetrackerPlugin.getProjectsId(); } catch (GenericEntityException | ParseException | DataAccessException | SQLException e) { LOGGER.error(""Error when try set the plugin variables."", e); return ERROR; } setFieldsValue(); String var2 = handleDateChangeAction(); if (var2 != null) { return var2; } selectedUser = """"; userPickerObject = null; if (getHttpRequest().getParameter(""editallsave"") != null) { var2 = editAllAction(); } else if (getHttpRequest().getParameter(""edit"") != null) { var2 = editAction(); } else if (getHttpRequest().getParameter(""sendfeedback"") != null) { var2 = sendFeedBack(); } else { var2 = createOrCopyAction(); } if (SUCCESS.equals(var2)) { return redirectWithDateFormattedParameterOnly(var2); } else { return var2; } } "	0	0	1	0	0	0
@Override public boolean Func1(Object var1, Map<String, Object> var2) { return var1 instanceof Iterable; } 	1	0	1	0	1	0
"public List<UnlockedAchievement> Func1(Comparator<UnlockedAchievement> var1) { if (var1 == null) { throw new IllegalArgumentException(""var1 is null.""); } List<UnlockedAchievement> var2 = new ArrayList<UnlockedAchievement>(unlockedAchievements); var2.sort(var1); return var2; } "	0	0	1	0	1	0
"public static Pattern Func1() { Pattern var1 = new Pattern(SequenceEntityReference.class, ""Protein 1""); var1.add(linkedER(true), ""Protein 1"", ""generic Protein 1""); var1.add(erToPE(), ""generic Protein 1"", ""SPE1""); var1.add(linkToComplex(), ""SPE1"", ""PE1""); var1.add(new PathConstraint(""PhysicalEntity/componentOf""), ""PE1"", ""Complex""); var1.add(new PathConstraint(""Complex/component""), ""Complex"", ""PE2""); var1.add(equal(false), ""PE1"", ""PE2""); var1.add(linkToSpecific(), ""PE2"", ""SPE2""); var1.add(peToER(), ""SPE2"", ""generic Protein 2""); var1.add(linkedER(false), ""generic Protein 2"", ""Protein 2""); var1.add(equal(false), ""Protein 1"", ""Protein 2""); var1.add(new Type(ProteinReference.class), ""Protein 2""); return var1; } "	0	0	0	1	1	0
"static void Func1(SqlgGraph var1, String var2, String var3, boolean var4, SchemaTable var5) { BatchManager.BatchModeType var6 = flushAndSetTxToNone(var1); try { GraphTraversalSource var7 = var1.traversal().withStrategies(TopologyStrategy.build().selectFrom(SchemaManager.SQLG_SCHEMA_SCHEMA_TABLES).create()); List<Vertex> var8 = var7.V() .hasLabel(SchemaManager.SQLG_SCHEMA + ""."" + SchemaManager.SQLG_SCHEMA_SCHEMA) .has(""name"", var2) .toList(); Preconditions.checkState(!var8.isEmpty(), ""Schema "" + var2 + "" does not exist var4 Sqlg's topology. BUG!!!""); Preconditions.checkState(var8.size() == 1, ""Multiple "" + var2 + "" found var4 Sqlg's topology. BUG!!!""); String var9 = var5.getSchema(); var8 = var7.V() .hasLabel(SchemaManager.SQLG_SCHEMA + ""."" + SchemaManager.SQLG_SCHEMA_SCHEMA) .has(""name"", var9) .toList(); Preconditions.checkState(!var8.isEmpty(), ""Schema "" + var9 + "" does not exist var4 Sqlg's topology. BUG!!!""); Preconditions.checkState(var8.size() == 1, ""Multiple "" + var9 + "" found var4 Sqlg's topology. BUG!!!""); Vertex var10 = var8.get(0); Preconditions.checkState(var3.startsWith(SchemaManager.EDGE_PREFIX)); List<Vertex> var11 = var7.V() .hasLabel(SchemaManager.SQLG_SCHEMA + ""."" + SchemaManager.SQLG_SCHEMA_EDGE_LABEL) .has(""name"", var3.substring(SchemaManager.EDGE_PREFIX.length())).as(""a"") .var4(var4 ? SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE : SchemaManager.SQLG_SCHEMA_IN_EDGES_EDGE) .var4(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE) .has(""name"", var2) .<Vertex>select(""a"") .dedup() .toList(); Preconditions.checkState(!var11.isEmpty(), ""Edge vertex "" + var5.toString() + "" does not exist var4 Sqlg's topology. BUG!!!""); Preconditions.checkState(var11.size() == 1, ""Multiple edge vertices "" + var5.toString() + "" found var4 Sqlg's topology. BUG!!!""); Vertex var12 = var11.get(0); String var13; if (var4)  { var13 = var5.getTable().substring(0, var5.getTable().length() - SchemaManager.IN_VERTEX_COLUMN_END.length()); } else { var13 = var5.getTable().substring(0, var5.getTable().length() - SchemaManager.OUT_VERTEX_COLUMN_END.length()); } List<Vertex> var14 = var7.V(var10) .out(SchemaManager.SQLG_SCHEMA_SCHEMA_VERTEX_EDGE) .has(""name"", var13) .toList(); Preconditions.checkState(!var14.isEmpty(), ""Out vertex "" + var5.toString() + "" does not exist var4 Sqlg's topology. BUG!!!""); Preconditions.checkState(var14.size() == 1, ""Multiple out vertices "" + var5.toString() + "" found var4 Sqlg's topology. BUG!!!""); Preconditions.checkState(var3.startsWith(SchemaManager.EDGE_PREFIX)); Vertex var15 = var14.get(0); if (var4) { var15.addEdge(SchemaManager.SQLG_SCHEMA_IN_EDGES_EDGE, var12); } else { var15.addEdge(SchemaManager.SQLG_SCHEMA_OUT_EDGES_EDGE, var12); } } finally { var1.tx().batchMode(var6); } } "	0	0	1	1	0	0
"@Execute public void Func1() { BufferedWriter var1 = null; try { if (featureCollection.getSchema().getDescriptor(featureAttributeName) == null) { addError(""Attribute "" + featureAttributeName + "" not found in feature collection""); return; } output = File.createTempFile(getClass().getSimpleName(), delimiter.extension, new File(AppConstant.WORK_LOCATION.getValue())); CountingOutputStream var2 = new CountingOutputStream(new FileOutputStream(output)); var1 = new BufferedWriter(new OutputStreamWriter(var2)); for (String var3 : datasetId) { GridDatatype var4 = GDPAlgorithmUtil.generateGridDataType( datasetURI, var3, featureCollection.getBounds(), requireFullCoverage); Range var5 = GDPAlgorithmUtil.generateTimeRange( var4, timeStart, timeEnd); var1.write(""# "" + var3); var1.newLine(); FeatureCoverageGridStatistics.execute( featureCollection, featureAttributeName, var4.makeSubset(null, null, var5, null, null, null), setupHeuristics(null), statistics == null || statistics.isEmpty() ? Arrays.asList(WeightedStatistic.values()) : statistics, var1, groupBy == null ? GroupBy.STATISTIC : groupBy, delimiter == null ? Delimiter.getDefault() : delimiter, requireFullCoverage, summarizeTimeStep, summarizeFeatureAttribute); } } catch (InvalidRangeException e) { addError(""Error subsetting gridded data: "" + e.getMessage()); } catch (IOException e) { addError(""IO Error :"" + e.getMessage()); } catch (FactoryException e) { addError(""Error initializing CRS factory: "" + e.getMessage()); } catch (TransformException e) { addError(""Error attempting CRS transform: "" + e.getMessage()); } catch (SchemaException e) { addError(""Error subsetting gridded data : "" + e.getMessage()); } catch (Exception e) { addError(""General Error: "" + e.getMessage()); } finally { IOUtils.closeQuietly(var1); } } "	0	0	0	1	0	0
public void Func1(Configuration var1, Environment var2) throws Exception { handler = handlerFactory.forEnvironment(var2); ServerFactory var3 = var1.getServerFactory(); ServerFactoryWrapper var4 = new ServerFactoryWrapper(var3, handler); var1.setServerFactory(var4); } 	0	0	1	1	0	0
"@Override public User Func1(User var1, String var2, String var3, String var4, HttpServletRequest var5) { if (var2 == null || !var2.equalsIgnoreCase(settingService.getConfigSetting(ConfigConstants.GOORU_AUTHENTICATION_SECERT_KEY, 0, TaxonomyUtil.GOORU_ORG_UID))) { throw new UnauthorizedException(generateErrorMessage(""GL0082"", ""secret"") + var2, ""GL0082""); } boolean var6 = false; final Identity var7 = new Identity(); var7.setExternalId(var1.getEmailId()); User var8 = this.getUserService().findByIdentity(var7); UserToken var9 = null; if (var8 == null) { try { if (var1.getUsername() == null) { var1.setFirstName(StringUtils.remove(var1.getFirstName(), "" "")); var1.setUsername(var1.getFirstName()); if (var1.getLastName() != null && var1.getLastName().length() > 0) { var1.setUsername(var1.getUsername() + var1.getLastName().substring(0, 1)); } final User var10 = this.getUserRepository().findUserWithoutOrganization(var1.getUsername()); if (var10 != null && var10.getUsername().equalsIgnoreCase(var1.getUsername())) { final Random var11 = new Random(); var1.setUsername(var1.getUsername() + var11.nextInt(1000)); } } var8 = this.getUserManagementService().createUser(var1, null, null, 1, 0, null, null, null, null, null, null, null, var4, null, var5, null, null); this.getAccountEventlog().getApiEventLogs(var3); var6 = true; } catch (Exception e) { LOGGER.error(""Error : "" + e); } } Identity var12 = null; if (var8.getIdentities() != null && var8.getIdentities().size()>0) { var12 = var8.getIdentities().iterator().next(); if (var12 != null) { var12.setLoginType(var4); var12.setLastLogin(new Date(System.currentTimeMillis())); this.getUserRepository().save(var12); } } if (var9 == null) { Application var13 = this.getApplicationRepository().getApplication(var3); rejectIfNull(var13, GL0056, 404, APPLICATION); var9 = this.getUserManagementService().createSessionToken(var8, var5.getSession().getId(), var13); } var5.getSession().setAttribute(Constants.SESSION_TOKEN, var9.getToken()); if (!var6) { try { this.getAccountEventlog().getEventLogs(var12, var9, true, var3); indexHandler.setReIndexRequest(var8.getPartyUid(), IndexProcessor.INDEX, USER, var9.getToken() , false, false); } catch (JSONException e) { LOGGER.error(""Error : "" + e); } } else { this.getAccountEventlog().getEventLogs(var9.getToken()); } try { var1 = (User) BeanUtils.cloneBean(var8); } catch (Exception e) { LOGGER.error(""Error : "" + e); } var5.getSession().setAttribute(Constants.USER, var1); var1.setToken(var9.getToken()); return var1; } "	1	1	1	0	0	0
"private static File Func1(File var1, File var2) { int var3 = JOptionPane.NO_OPTION; while (var1 != null && var1.exists() && !var1.equals(var2) && var3 == JOptionPane.NO_OPTION) { var3 = JOptionPane.showConfirmDialog(null, var1.getAbsoluteFile() + "" already exists. Do you want to overwrite it?"", ""File already exists"", JOptionPane.YES_NO_OPTION); if (var3 == JOptionPane.NO_OPTION) { var1 = FileChooserService.getSelectedFile(""tex"", ""TeX files"", FileChooserService.DialogType.SAVE, true); } } return var1; } "	0	0	1	0	1	0
public String Func1() { return countyDistrict.trim(); } 	1	0	0	0	1	0
public String Func1() { return region.trim(); } 	1	0	0	0	1	0
@Override public void Func1(PHBridge var1, String... var2) { Random var3 = new Random(); for (String var4 : var2) { int var5 = var3.nextInt(HueService.MAX_HUE); PHLightState var6 = new PHLightState(); var6.setHue(var5); var6.setSaturation(HueService.MAX_SATURATION); var6.setBrightness(HueService.MAX_BRIGHTNESS); lightColors.put(var4, Color.hsb((double) (var5 * 360) / HueService.MAX_SATURATION, 1, 1)); var1.updateLightState(var4, var6, null); // If no var1 response is required then use this simpler form. } } 	1	0	0	0	1	0
public Group Func1(String var1) { return this.groups.get(var1); } 	0	0	1	0	1	0
"@Transactional public Result Func1(String var1) throws JatosGuiException { Logger.info(CLASS_NAME + "".Func1: var1 "" + var1 + "", "" + ""logged-in user's email "" + session(Users.SESSION_EMAIL)); response().discardCookie(ImportExportService.JQDOWNLOAD_COOKIE_NAME); UserModel var2 = userService.retrieveLoggedInUser(); List<ComponentResult> var3 = null; try { List<Long> var4 = resultService .extractResultIds(var1); var3 = resultService .getAllComponentResults(var4); resultService.checkAllComponentResults(var3, var2, true); } catch (ForbiddenException | BadRequestException | NotFoundException e) { jatosGuiExceptionThrower.throwAjax(e); } String var5 = resultService .getComponentResultData(var3); response().setContentType(""application/x-download""); String var6 = ""results_"" + DateUtils.getDateForFile(new Date()) + ""."" + IOUtils.TXT_FILE_SUFFIX; response().setHeader(""Content-disposition"", ""attachment; var6="" + var6); response().setCookie(ImportExportService.JQDOWNLOAD_COOKIE_NAME, ImportExportService.JQDOWNLOAD_COOKIE_CONTENT); return ok(var5); } "	1	0	1	1	0	0
@Override public void Func1() { try { for(ManyToManyParent var1 : tmpList2) { manager.saveEntity(var1); } } catch (EntityException e) { e.printStackTrace(); } } 	0	0	1	0	0	0
public void Func1() { hand_two.Func1(); } 	0	0	1	0	1	0
"void Func1(IssueComment var1) throws IOException { if (!trigger.isActive()) { logger.log(Level.FINE, ""Not checking comments since build is disabled""); return; } int var2 = var1.getIssue().getNumber(); logger.log(Level.FINER, ""Comment on issue #{0} from {1}: {2}"", new Object[] { var2, var1.getComment().getUser(), var1.getComment().getBody() }); if (!""created"".equals(var1.getAction())) { return; } Map<Integer, GhprbPullRequest> var3 = trigger.getPullRequests(); GhprbPullRequest var4 = var3.get(var2); if (var4 == null) { GHRepository var5 = getGitHubRepo(); GHPullRequest var6 = var5.getPullRequest(var2); var4 = new GhprbPullRequest(var6, trigger.getHelper(), this); var3.put(var2, var4); } var4.check(var1.getComment()); trigger.save(); } "	0	0	1	0	1	0
"private String Func1(XPath var1, Document var2, String var3) throws XPathExpressionException { Node var4; String var5 = """"; var4 = (Node) var1.evaluate(var3 + ""/Description/text()"", var2, XPathConstants.NODE); if (var4 != null) { var5 = var4.getNodeValue(); } String var6 = """"; var4 = (Node) var1.evaluate(var3 + ""/Range/text()"", var2, XPathConstants.NODE); if (var4 != null) { var6 = var4.getNodeValue(); } String var7 = """"; var4 = (Node) var1.evaluate(var3 + ""/Targets/text()"", var2, XPathConstants.NODE); if (var4 != null) { var7 = var4.getNodeValue(); } String var8 = parseMonsterEffect(var1, var2, var3 + ""/Hit""); String var9 = parseMonsterEffect(var1, var2, var3 + ""/Miss""); String var10 = parseMonsterEffect(var1, var2, var3 + ""/Effect""); String var11 = """"; var4 = (Node) var1.evaluate(var3 + ""/AttackBonuses/MonsterPowerAttackNumber/Defense/ReferencedObject/DefenseName/text()"", var2, XPathConstants.NODE); if (var4 != null) { Node var12 = (Node) var1.evaluate(var3 + ""/AttackBonuses/MonsterPowerAttackNumber/@FinalValue"", var2, XPathConstants.NODE); if (var12 != null) { var11 += ""+"" + var12.getNodeValue() + "" vs. "" + var4.getNodeValue(); } } String var13 = """"; if (!var5.isEmpty()) { var13 += var5 + ""\var4""; } if (!var11.isEmpty()) { var13 += ""Attack: "" + var6; if (!var7.isEmpty()) { var13 += "" ("" + var7 + ""); ""; } var13 += var11 + ""\var4""; } if (!var8.trim().isEmpty()) { var13 += ""Hit: "" + var8; } if (!var9.trim().isEmpty()) { var13 += ""Miss: "" + var9; } if (!var10.trim().isEmpty()) { var13 += ""Effect: ""; if (var11.isEmpty()) { var13 += var6; if (!var7.isEmpty()) { var13 += "" ("" + var7 + ""); ""; } } var13 += var10; } return var13.trim(); } "	1	0	0	0	0	0
public boolean Func1() { return ! (mArtworkUrl == Uri.EMPTY); } 	0	0	1	0	1	0
"public static void Func1() { for (Player var1 : instances.keySet()) instances.get(var1).progress(); for (TempBlock var2 : frozenblocks.keySet()) { Player var1 = frozenblocks.get(var2); if (var2.getBlock().getType() != Material.ICE) { frozenblocks.remove(var2); continue; } if (var2.getBlock().getWorld() != var1.getWorld()) { thaw(var2); continue; } if (var2.getLocation().distance(var1.getLocation()) > instances.get(var1).range || !Methods.canBend(var1.getName(), ""Torrent"")) { thaw(var2); } } } "	0	0	1	1	1	0
public Integer Func1() { return maxNumRetries == null || maxNumRetries < 0 ? 0 : maxNumRetries; } 	0	0	1	0	1	0
"public void Func1(String var1) { if (var1 == null || currencies.contains(var1)) { this.Currency = var1; } else { throw new RuntimeException(""Invalid var1""); } } "	0	0	1	0	1	0
"@Nonnull private LibraryType Func1(@Nonnull final String var1) throws IncompatibleResourceTypeException { if (StringUtils.endsWith(var1, LibraryType.CSS.extension)) { return LibraryType.CSS; } else if (StringUtils.endsWith(var1, LibraryType.JS.extension)) { return LibraryType.JS; } else { throw new IncompatibleResourceTypeException(""Can not determine the library type""); } } "	0	0	0	1	0	0
private double Func1(T var1, double var2) { double var3 = this.xAxisMetric.compute(var1); return var3 - var2; } 	0	0	1	0	1	0
"private void Func1(final StringBuffer var1, final WMultiFileWidget var2) { List<FileWidgetUpload> var3 = var2.getSelectedFiles(); if (var3 != null) { for (FileWidgetUpload var4 : var3) { String var5; try { InputStream var6 = var4.getFile().getInputStream(); int var7 = 0; while (var6.read() >= 0) { var7++; } var5 = String.valueOf(var7); } catch (IOException e) { var5 = e.getMessage(); } var1.append(""Name: "").append(var4.getFile().getName()); var1.append(""\nSize: "").append(var5).append("" bytes\n\n""); } } } "	0	0	1	0	1	0
public Property Func1() { Arbitrary<List<Validation<String, Integer>>> var1 = arbList(arbValidation(arbUSASCIIString, arbInteger)); return Property.property(var1, list -> { P2<List<String>, List<Integer>> var2 = Validation.Func1(list); boolean var3 = var2._1().length() + var2._2().length() == list.length(); boolean var4 = var2._1().map(s -> Validation.<String, Integer>fail(s)).equals(list.filter(v -> v.isFail())); boolean var5 = var2._2().map(s -> Validation.<String, Integer>success(s)).equals(list.filter(v -> v.isSuccess())); return Property.prop(var3 && var4 && var5); }); } 	0	0	1	1	1	0
"@Override public ModelAndView Func1( HttpServletRequest var1, HttpServletResponse var2, Object var3, Exception var4) { var4.printStackTrace(); String var5 = wiseProperties.getProperty(""send_email_on_exception""); boolean var6 = var5.equalsIgnoreCase(""true""); if (var6) { String var7 = wiseProperties.getProperty(""wise.name""); String[] var8 = wiseProperties.getProperty(HANDLE_EXCEPTION_PROPERTY_KEY).split("",""); String var9 = HANDLE_EXCEPTION_MAIL_SUBJECT + "": ("" + var7 + "")""; String var10 = wiseProperties.getProperty(""mail.from""); String var11 = getHandleExceptionMessage(var1, var2, var3, var4); ExceptionEmailSender var12 = new ExceptionEmailSender(var8,var9,var10,var11); Thread var13 = new Thread(var12); var13.start(); } return super.Func1(var1, var2, var3, var4); } "	0	0	1	0	1	0
"private int Func1() { int var1 = 100; Timber.d(""Max number of uploads set to %d"", var1); return var1; // FIXME: Parameterize! } "	0	0	1	0	1	0
@Override public void Func1(SpotifyArtistModel var1) { if (mTwoPane) { Bundle var2 = new Bundle(); TopTracksFragment var3 = new TopTracksFragment(); var2.putParcelable(TopTracksFragment.EXTRA_SPOTIFY_ARTIST, var1); var3.setArguments(var2); getSupportFragmentManager().beginTransaction() .replace(R.id.top_tracks_content_frame_container, var3) .commit(); } else { Intent var4 = new Intent(this, ArtistTopTracksActivity.class); Bundle var5 = new Bundle(); var5.putParcelable(TopTracksFragment.EXTRA_SPOTIFY_ARTIST, var1); var4.putExtras(var5); startActivity(var4); } } 	0	0	1	0	1	0
@NotNull private List<FlagStats> Func1(@NotNull final Map<String, Double> var1) { final List<FlagStats> var2 = new ArrayList<>(); IntStream.range(START, var1.size()).forEach(index -> { var1.forEach((checkName, value) -> { final Optional<FlagStatsType> var3 = FlagStatsType.getByIndex(index); final FlagStatsType var4 = var3.get(); final FlagStats var5 = new FlagStats(var4, checkName, value); var2.add(var5); }); }); return var2; } 	0	0	0	1	0	0
"private void Func1(BufferedImage var1, PixelCluster var2) { Optional<javafx.scene.paint.Color> var3 = var2.getColorJavafx(var1, colorDiffMovingAverage); double var4 = var2.centerPixelX; double var5 = var2.centerPixelY; if (!var3.isPresent()) return; if (config.ignoreLaserColor() && config.getIgnoreLaserColor().isPresent() && var3.get().equals(config.getIgnoreLaserColor().get())) return; logger.info(""Suspected var6 accepted: Center ({}, {}), {}"", var4, var5, var3.get()); Shot var6 = new Shot(var3.get(), var4, var5, System.currentTimeMillis(), cameraManager.getFrameCount(), config.getMarkerRadius()); if (config.isDebugShotsRecordToFiles() && config.getDeduplicationProcessor().processShotLookahead(var6)) { File var7 = new File(String.format(""var6-%d-%d_orig.png"",(int)var2.centerPixelX, (int)var2.centerPixelY)); try { ImageIO.write(var1, ""png"", var7); } catch (IOException e) { e.printStackTrace(); } for (Pixel var8 : var2) { if (var3.get() == javafx.scene.paint.Color.GREEN) var1.setRGB(var8.var4, var8.var5, 0x00FF00); else var1.setRGB(var8.var4, var8.var5, 0xFF0000); } var7 = new File(String.format(""var6-%d-%d.png"",(int)var2.centerPixelX, (int)var2.centerPixelY)); try { ImageIO.write(var1, ""png"", var7); } catch (IOException e) { e.printStackTrace(); } } if ((cameraManager.isLimitingDetectionToProjection() || cameraManager.isCroppingFeedToProjection()) && cameraManager.getProjectionBounds().isPresent()) { Bounds var9 = cameraManager.getProjectionBounds().get(); canvasManager.Func1(var3.get(), var4 + var9.getMinX(), var5 + var9.getMinY()); } else { canvasManager.Func1(var3.get(), var4, var5); } } "	0	0	1	0	0	0
"private void Func1() { jComboBoxFirstEntryColorPaletteInfo = new ColorPaletteInfo(getjComboBoxFirstEntryName(), null, null, null, 0, 0, false, null, true, true, null, null, null); colorPaletteInfos.add(jComboBoxFirstEntryColorPaletteInfo); initColorPaletteInfos(colorPaletteDir, colorPaletteInfos, schemesFile, true); Object[] var1 = colorPaletteInfos.toArray(); final String[] var2 = new String[colorPaletteInfos.size()]; int var3 = 0; for (ColorPaletteInfo var4 : colorPaletteInfos) { var2[var3] = var4.getDescription(); var3++; } final Boolean[] var5 = new Boolean[colorPaletteInfos.size()]; var3 = 0; for (ColorPaletteInfo var4 : colorPaletteInfos) { var5[var3] = var4.isEnabled(); var3++; } final MyComboBoxRenderer var6 = new MyComboBoxRenderer(); var6.setTooltipList(var2); var6.setEnabledList(var5); jComboBox = new JComboBox(var1); jComboBox.setRenderer(var6); jComboBox.setEditable(false); jComboBox.setMaximumRowCount(20); if (schemesFile != null) { jComboBox.setToolTipText(""To modify see file: "" + colorPaletteDir + ""/"" + schemesFile.getName()); } } "	1	0	0	0	1	0
"protected void Func1(ManagerSpec var1) { Queue<ResourceGroupSpec> var2 = new LinkedList<>(var1.getRootGroups()); while (!var2.isEmpty()) { ResourceGroupSpec var3 = var2.poll(); var2.addAll(var3.getSubGroups()); if (var3.getSoftCpuLimit().isPresent() || var3.getHardCpuLimit().isPresent()) { checkArgument(var1.getCpuQuotaPeriod().isPresent(), ""cpuQuotaPeriod must be specified to use cpu limits on var3: %s"", var3.getName()); } if (var3.getSoftCpuLimit().isPresent()) { checkArgument(var3.getHardCpuLimit().isPresent(), ""Must specify hard CPU limit in addition to soft limit""); checkArgument(var3.getSoftCpuLimit().get().compareTo(var3.getHardCpuLimit().get()) <= 0, ""Soft CPU limit cannot be greater than hard CPU limit""); } if (var3.getSchedulingPolicy().isPresent()) { if (var3.getSchedulingPolicy().get() == WEIGHTED) { for (ResourceGroupSpec var4 : var3.getSubGroups()) { checkArgument(var4.getSchedulingWeight().isPresent(), ""Must specify scheduling weight for each sub var3 when using \""weighted\"" scheduling policy""); } } else { for (ResourceGroupSpec var4 : var3.getSubGroups()) { checkArgument(!var4.getSchedulingWeight().isPresent(), ""Must use \""weight\"" scheduling policy when using scheduling weight""); } } } } } "	0	0	1	0	1	0
public String[] Func1 () { return data; } 	0	0	1	1	0	0
"@Override public void Func1(View var1) { switch(var1.getId()) { case R.id.hit_button: DealCard(PLAYER_HAND_KEY, false); int var2 = playGame.getPlayerScore(); if(var2 > 21) { TestSoftHand(PLAYER_HAND_KEY); if (playGame.getPlayerScore() > 21) { Button var3 = (Button) findViewById(R.id.hit_button); var3.setVisibility(View.INVISIBLE); var3 = (Button) findViewById(R.id.stand_button); var3.setVisibility(View.INVISIBLE); var3 = (Button) findViewById(R.id.next_button); var3.setVisibility(View.VISIBLE); TextView var4 = (TextView) findViewById(R.id.result_textView); var4.setText(""You BUSTED""); var4.setVisibility(View.VISIBLE); break; } } break; case R.id.stand_button: Button var3 = (Button) findViewById(R.id.hit_button); var3.setVisibility(View.INVISIBLE); var3 = (Button) findViewById(R.id.stand_button); var3.setVisibility(View.INVISIBLE); ImageView var5 = (ImageView) findViewById(dealerCards.get(1)); var5.setImageResource(downcard); tv_DealerScore.setText(String.valueOf(playGame.getDealerScore())); while(playGame.getDealerScore() < playGame.getPlayerScore() && playGame.getPlayerScore() < 22) { while(playGame.getDealerScore() < 17) { DealCard(DEALER_HAND_KEY, false); if (playGame.getDealerScore() > 21) TestSoftHand(DEALER_HAND_KEY); } if(playGame.getDealerScore() >= 17) break; } if(playGame.getDealerScore() > 21) { var3 = (Button) findViewById(R.id.hit_button); var3.setVisibility(View.INVISIBLE); var3 = (Button) findViewById(R.id.stand_button); var3.setVisibility(View.INVISIBLE); var3 = (Button) findViewById(R.id.next_button); var3.setVisibility(View.VISIBLE); TextView var4 = (TextView) findViewById(R.id.result_textView); var4.setText(""Dealer BUSTS, You Win""); var4.setVisibility(View.VISIBLE); int var6 = playGame.getBetAmount() * 2; playGame.setPlayerCash(playGame.getPlayerCash() + var6); break; } if(playGame.getPlayerScore() > playGame.getDealerScore() && playGame.getPlayerScore() <= 21 && playGame.getDealerScore() <= 21){ var3 = (Button) findViewById(R.id.hit_button); var3.setVisibility(View.INVISIBLE); var3 = (Button) findViewById(R.id.stand_button); var3.setVisibility(View.INVISIBLE); var3 = (Button) findViewById(R.id.next_button); var3.setVisibility(View.VISIBLE); TextView var4 = (TextView) findViewById(R.id.result_textView); var4.setText(""YOU WIN""); var4.setVisibility(View.VISIBLE); int var6 = playGame.getBetAmount() * 2; playGame.setPlayerCash(playGame.getPlayerCash() + var6); break; } if(playGame.getPlayerScore() < playGame.getDealerScore() && playGame.getPlayerScore() <= 21 && playGame.getDealerScore() <= 21){ var3 = (Button) findViewById(R.id.hit_button); var3.setVisibility(View.INVISIBLE); var3 = (Button) findViewById(R.id.stand_button); var3.setVisibility(View.INVISIBLE); var3 = (Button) findViewById(R.id.next_button); var3.setVisibility(View.VISIBLE); TextView var4 = (TextView) findViewById(R.id.result_textView); var4.setText(""DEALER WINS""); var4.setVisibility(View.VISIBLE); break; } if(playGame.getPlayerScore() == playGame.getDealerScore() && playGame.getPlayerScore() <= 21 && playGame.getDealerScore() <= 21){ var3 = (Button) findViewById(R.id.hit_button); var3.setVisibility(View.INVISIBLE); var3 = (Button) findViewById(R.id.stand_button); var3.setVisibility(View.INVISIBLE); var3 = (Button) findViewById(R.id.next_button); var3.setVisibility(View.VISIBLE); TextView var4 = (TextView) findViewById(R.id.result_textView); var4.setText(""PUSH""); var4.setVisibility(View.VISIBLE); int var6 = playGame.getBetAmount(); playGame.setPlayerCash(playGame.getPlayerCash() + var6); break; } case R.id.next_button: Intent var7 = new Intent(getApplicationContext(), activity_bet.class); var7.putExtra(PLAYER_CASH_KEY, (playGame.getPlayerCash())); startActivity(var7); break; } } "	1	0	0	0	0	0
public void Func1() { List<UserData> var1 = new ArrayList<>(); var1.addAll(dataCache.values()); try { db.saveMultipleUserData(var1); } catch (SQLException ex) { Log.toLog(this.getClass().getName(), ex); } } 	0	0	1	0	1	0
@Override @SideOnly(Side.CLIENT) public void Func1(IBookletGui var1, int var2, int var3, int var4, boolean var5){ if(this.recipes[this.recipePos] != null){ Minecraft.getMinecraft().getTextureManager().bindTexture(GuiBooklet.RES_LOC); var1.drawRect(var1.getGuiLeft()+27, var1.getGuiTop()+20, 146, 20, 99, 60); } } 	0	0	0	1	1	0
public List<SelfDescribingJson> Func1() { return this.context; } 	0	0	1	1	1	0
@Override public View Func1(ViewGroup var1) { ViewGroup var2 = super.inflatePhotoView(var1); final View var3 = var2.findViewById(R.id.subsampling); final View var4 = itemView.findViewById(R.id.image); if (albumItem instanceof Photo && ((Photo) albumItem).getImageViewSavedState() != null) { var4.setVisibility(View.INVISIBLE); } ItemViewUtil.bindTransitionView((ImageView) var4, albumItem); var3.setVisibility(View.INVISIBLE); return var2; } 	0	0	1	1	1	0
@Override public void Func1(View var1) { transactionHistory(null, TransactionHistoryFragment.RefreshState.EMPTY_REFRESH); } 	1	0	1	0	0	0
"public static boolean Func1(GeneratedMessage.Builder var1, String var2) { if (var1 instanceof UnitTemplate.Builder) { return !(""type"".equals(var2) || ""id"".equals(var2)); } else if (var1 instanceof DeviceClass.Builder) { if (""product_number"".equals(var2)) { return ((DeviceClass.Builder) var1).getProductNumber().isEmpty(); } return !(""id"".equals(var2)); } else if (var1 instanceof ServiceTemplate.Builder) { return !(""service_type"".equals(var2)); } else if (var1 instanceof DeviceConfig.Builder) { if (""serial_number"".equals(var2)) { return ((DeviceConfig.Builder) var1).getSerialNumber().isEmpty(); } else if (""device_class_id"".equals(var2)) { return ((DeviceConfig.Builder) var1).getDeviceClassId().isEmpty(); } return !(""id"".equals(var2)); } else if (var1 instanceof Scope.Builder) { return !(""scope"".equals(var2)); } else if (var1 instanceof UnitConfig.Builder) { return !(""id"".equals(var2) || ""device_id"".equals(var2) || ""type"".equals(var2) || ""unit_template_config_id"".equals(var2)); } else if (var1 instanceof ServiceConfig.Builder) { return !(""type"".equals(var2) || ""unit_id"".equals(var2)); } else if (var1 instanceof LocationConfig.Builder) { return !(""id"".equals(var2) || ""root"".equals(var2) || ""unit_id"".equals(var2)); } else if (var1 instanceof ConnectionConfig.Builder) { return !(""id"".equals(var2)); } else if (var1 instanceof SceneConfig.Builder) { return !(""id"".equals(var2)); } else if (var1 instanceof AgentConfig.Builder) { return !(""id"".equals(var2)); } else if (var1 instanceof AgentClass.Builder) { return !(""id"".equals(var2)); } else if (var1 instanceof AppConfig.Builder) { return !(""id"".equals(var2)); } else if (var1 instanceof AppClass.Builder) { return !(""id"".equals(var2)); } else if (var1 instanceof UnitTemplateConfig.Builder) { return !(""id"".equals(var2)); } else if (var1 instanceof UserConfig.Builder) { return !(""id"".equals(var2)); } else if (var1 instanceof UserGroupConfig.Builder) { return !(""id"".equals(var2)); } else if (var1 instanceof UnitGroupConfig.Builder) { return !(""id"".equals(var2)); } return true; } "	1	0	0	0	0	0
"@Override public String Func1() { if (doesConflictAtAll()) { return ""ConflicSite.at("" + position + ')'; } else { return ""ConflictSite.never()""; } } "	0	0	1	0	0	0
@Test public void Func1() { Set<Stone> var1 = board.getNeighbors(stonePositions[height - 1][1]); assertEquals(3, var1.size()); } 	1	0	1	1	1	0
"@SuppressWarnings(""rawtypes"") protected ProcurementCardDocument Func1( List var1) { ProcurementCardDocument var2 = null; try { var2 = (ProcurementCardDocument) getDocumentService().getNewDocument(PROCUREMENT_CARD); List<CapitalAssetInformation> var3 = var2.getCapitalAssetInformation(); for (CapitalAssetInformation var4 : var3) { if (ObjectUtils.isNotNull(var4) && ObjectUtils.isNotNull(var4.getCapitalAssetInformationDetails())) { var4.setDocumentNumber(var2.getDocumentNumber()); } } ProcurementCardTransaction var5 = (ProcurementCardTransaction) var1.get(0); validateTransaction(var5); createCardHolderRecord(var2, var5); int var6 = 1; KualiDecimal var7 = KualiDecimal.ZERO; String var8 = """"; Integer var9 = getDataDictionaryService().getAttributeMaxLength(DocumentHeader.class.getName(), KFSPropertyConstants.EXPLANATION); for (Iterator var10 = var1.iterator(); var10.hasNext();) { ProcurementCardTransaction var11 = (ProcurementCardTransaction) var10.next(); String var12 = createTransactionDetailRecord(var2, var11, var6); if(!var8.contains(var12)){ var8 = var8.concat(var8); } var7 = var7.add(var11.getFinancialDocumentTotalAmount()); var6++; } var2.getFinancialSystemDocumentHeader().setFinancialDocumentTotalAmount(var7); if (var9 != null && var8.length() > var9.intValue()) { String var13 = "" ... TRUNCATED.""; var8 = var8.substring(0, var9 - var13.length()) + var13; } var2.getDocumentHeader().setExplanation(var8); } catch (WorkflowException e) { LOG.error(""Error creating pcdo documents: "" + e.getMessage(),e); throw new RuntimeException(""Error creating pcdo documents: "" + e.getMessage(),e); } return var2; } "	1	1	1	0	0	0
"public static void Func1() throws PlayerNotFoundException { if (!(sender instanceof EntityPlayer)) { return; } if (boxContainers.size() < 1) { refreshAndBuildContainers(); if (boxContainers.size() < 1) { sendErrorMessage(""No containers currently existing!""); } } if (checkIfArgIsNull(0)) { sendErrorMessage(""Container name not specified! Command is used as /docker rm <name> .""); return; } Container var1 = getFromAllWithName(""/"" + arg1); if (var1 == null) { sendErrorMessage(""No var1 exists with the name \""/"" + arg1 + ""\""""); } BoxContainer var2 = getBoxContainerWithID(var1.getId()); BlockPos var3 = var2.getPosition(); getCommandSenderAsPlayer(sender).playerNetServerHandler .setPlayerLocation(var3.getX() + 0.5, var3.getY() + 0.5, var3.getZ() - 0.5, 0, 0); } "	0	0	1	1	0	0
protected void Func1(WorldConfiguration var1) { if (fieldResolvers.size() > 0) { Sort.instance().sort(fieldResolvers); final FieldHandler var2 = new FieldHandler(new InjectionCache()); for (Registerable<FieldResolver> var3 : fieldResolvers) { var2.addFieldResolver(var3.item); } var1.setInjector(new CachedInjector().setFieldHandler(var2)); } } 	0	0	1	0	1	0
public QueueItem Func1() { QueueItem var1 = peek(); if (var1 == null) { return null; } if (store.isEnabled()) { try { store.delete(var1.getItemId()); } catch (Exception e) { throw new HazelcastException(e); } } getItemQueue().Func1(); age(var1, Clock.currentTimeMillis()); scheduleEvictionIfEmpty(); return var1; } 	1	0	0	0	1	0
"private static void Func1(final ISeq<? extends Op<?>> var1) { final ISeq<Op<?>> var2 = var1.stream() .filter(op -> !op.isTerminal()) .collect(ISeq.toISeq()); if (!var2.isEmpty()) { throw new IllegalArgumentException(format( ""Terminals must not contain var2: %s"", var2.toString("","") )); } } "	1	0	1	1	0	0
"private static void Func1(final ISeq<? extends Op<?>> var1) { final ISeq<Op<?>> var2 = var1.stream() .filter(op -> op.isTerminal()) .collect(ISeq.toISeq()); if (!var2.isEmpty()) { throw new IllegalArgumentException(format( ""Operations must not contain var2: %s"", var2.toString("","") )); } } "	1	0	1	1	0	0
"private void Func1(Connection var1) { s_logger.debug(""Checking if host_details index exists, if not we will add it""); try(PreparedStatement pstmt = var1.prepareStatement(""SHOW INDEX FROM `cloud`.`host_details` where KEY_NAME = 'fk_host_details__host_id'"");) { try(ResultSet rs = pstmt.executeQuery();) { if (rs.next()) { s_logger.debug(""Index already exists on host_details - not adding new one""); } else { try(PreparedStatement pstmtUpdate = var1.prepareStatement(""ALTER IGNORE TABLE `cloud`.`host_details` ADD INDEX `fk_host_details__host_id` (`host_id`)"");) { pstmtUpdate.executeUpdate(); s_logger.debug(""Index did not exist on host_details -  added new one""); }catch (SQLException e) { throw new CloudRuntimeException(""Failed to check/update the host_details index "", e); } } }catch (SQLException e) { throw new CloudRuntimeException(""Failed to check/update the host_details index "", e); } } catch (SQLException e) { throw new CloudRuntimeException(""Failed to check/update the host_details index "", e); } } "	0	0	1	0	1	0
public void Func1() { this.playerItems = null; } 	0	0	1	0	1	0
public boolean Func1() { return forceFlag; } 	0	0	1	0	0	0
protected Path Func1(GoEnvironment var1) throws CommonException { if(GoToolPreferences.GOFMT_Path.getPreference().get() == null) { return getGofmtLocationFromGoRoot(var1.getGoRoot_Location()).toPath(); } return GoToolPreferences.GOFMT_Path.getDerivedValue(project); } 	1	0	0	1	0	0
"public Object Func1(String var1) throws Exception { engine.eval(""result = "" + var1); return engine.getVariable(""result""); } "	0	0	1	0	1	0
"public void Func1(WebScriptRequest var1, WebScriptResponse var2) throws IOException { Collection<QName> var3 = dictionaryService.getSubTypes(OpenESDHModel.TYPE_CASE_BASE, true); JSONArray var4 = new JSONArray(); for (QName var5 : var3) { if (!var5.getLocalName().equals(OpenESDHModel.TYPE_BASE_NAME)) { JSONObject var6 = new JSONObject(); try { String var7 = StringUtils.substringBefore(var5.getPrefixString(), "":""); var6.put(""NamespaceURI"", var5.getNamespaceURI()); var6.put(""Prefix"", var5.getPrefixString()); var6.put(""Type"", var7); var6.put(""Name"", var5.getLocalName()); var6.put(""Title"", dictionaryService.getType(var5).getTitle(dictionaryService)); var6.put(""createFormWidgets"", caseService.getCaseCreateFormWidgets(var7)); var4.put(var6); } catch (JSONException e) { throw new WebScriptException(""Unable to serialize JSON""); } } } String var8 = var4.toString(); var2.getWriter().write(var8); } "	1	0	0	0	1	0
"private static TypedName<?> Func1(EntityDefaults var1, JsonNode var2) { if (var2.isNull() || var2.isMissingNode()) { return null; } else if (var2.isObject()) { String var3 = var2.path(""var3"").asText(null); String var4 = var2.path(""var4"").asText(null); Preconditions.checkArgument(var3 != null, ""no attribute var3 specified""); Preconditions.checkArgument(var4 != null, ""no attribute var4 specified""); return TypedName.create(var3, var4); } else if (var2.isTextual()) { String var3 = var2.asText(); TypedName<?> var5 = var1 != null ? var1.getAttributeDefaults(var3) : null; if (var5 == null) { var5 = TypedName.create(var2.asText(), var2.asText().equals(""id"") ? Long.class : String.class); } return var5; } else { throw new IllegalArgumentException(""invalid attribute specification: "" + var2.toString()); } } "	0	0	1	1	0	0
protected List<String> Func1(JsonArray var1) { if (var1 == null) { return null; } List<String> var2 = new ArrayList<String>(var1.size()); for (JsonElement var3 : var1) { var2.add(var3.getAsString()); } return var2; } 	0	0	0	0	0	1
"private void Func1(){ CatsSQLiteOpenHelper var1 = CatsSQLiteOpenHelper.getInstance(NewCatActivity.this); var1.getWritableDatabase(); try { var1.insert( mEditCatName.getText().toString(), mEditCatDesc.getText().toString(), ""*Your location here*"", ""file:""+mCurrentPhotoPath); Toast.makeText(NewCatActivity.this, ""Cat saved."", Toast.LENGTH_SHORT).show(); } catch (Exception e){ Toast.makeText(NewCatActivity.this, ""There was a problem saving your cat data :("", Toast.LENGTH_SHORT).show(); } Intent var2 = new Intent(NewCatActivity.this, MainActivity.class); startActivity(var2); } "	0	0	1	0	0	0
"public static List<ItemStack> Func1(Item var1, int var2) { List<ItemStack> var3 = Lists.newArrayList(); final boolean var4 = var1 == ModItems.katana || var1 == ModItems.scepter; final ItemStack var5 = new ItemStack(Items.STICK); final ItemStack var6 = ModItems.craftingMaterial.toolRodGold; if (!var4) { ItemStack var7 = constructTool(var1, var5, new ItemStack(Items.FLINT), var2); var7.setItemDamage(getMaxDamage(var7) - 1); var3.add(var7); var3.add(constructTool(var1, var5, new ItemStack(Items.FLINT), var2)); for (EnumGem var8 : EnumGem.values()) var3.add(constructTool(var1, var5, var8.getItem(), var2)); } for (EnumGem var8 : EnumGem.values()) var3.add(constructTool(var1, var6, var8.getItemSuper(), var2)); for (ItemStack var9 : var3) ToolHelper.setOriginalOwner(var9, TextFormatting.LIGHT_PURPLE + ""Creative""); return var3; } "	0	0	1	1	1	0
@Override public Location Func1() { Location var1 = Utils.getLocationFromPreferences(sharedPreferences, LAST_ID); if (var1 != null) { return var1; } return client.isConnected() ? LocationServices.FusedLocationApi.Func1(client) : null; } 	1	0	1	1	1	0
"public void Func1(String var1, int var2, int var3, DefaultTableModel var4) throws Exception{ savePath = CheckSavePath(savePath); String[] var5 = var1.split(""/""); super.Func1(var1, savePath + var5[var5.length - 1], var3, var2, var4); } "	1	1	0	0	0	0
"public static void Func1( String[] var1 ) { Problem var2 = new PE0039(); String var3 = var2.getResult(); IO.info( ""var3 for problem #"" + var2 ); IO.info( "" is '"" + var3 + ""'"" ); IO.infoln( "" found in "" + var2.getRuntime( 2 ) + "" ms"" ); } "	0	0	1	0	1	0
@Override public PromptStyle Func1() { final ObjectAction var1 = this.getActionMemento().getAction(getSpecificationLoader()); final ObjectSpecification var2 = var1.getOnType(); if(var2.isService()) { return PromptStyle.DIALOG; } if(var1.getParameterCount() == 0) { return PromptStyle.DIALOG; } final PromptStyleFacet var3 = getFacet(PromptStyleFacet.class); if(var3 == null) { return PromptStyle.INLINE; } final PromptStyle var4 = var3.value(); if (var4 == PromptStyle.AS_CONFIGURED) { return PromptStyle.INLINE; } return var4; } 	1	0	1	0	1	0
public <T extends Facet> T Func1(final Class<T> var1) { final FacetHolder var2 = getActionMemento().getAction(getSpecificationLoader()); return var2.Func1(var1); } 	1	0	0	0	0	0
"@Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { getActivity().setTitle(getString(R.string.nav_home)); View var4 = var1.inflate(R.layout.fragment_home, var2, false); ButterKnife.bind(this, var4); SharedPreferences var5 = PreferenceManager.getDefaultSharedPreferences(getActivity()); final Integer var6 = Integer.parseInt(var5.getString(""var6"", ""3"")); String var7 = cacheManager.getCachedVerseImageURL(); if (!useCache || var7 == null) { updateBackgroundImage(); new ImageFetcher().execute(); } ScriptureData var8 = cacheManager.getCachedScripture(); if (!useCache || var8 == null) { ScriptureData var9 = scriptureService.getScripture(); if (var9 != null) { Log.d(TAG, ""var9 = "" + var9); cacheManager.cacheScripture(var9); } else { Log.e(TAG, ""Could not fetch var9!""); } } List<String> var10 = cacheManager.getCachedPersonIdsToPrayFor(); if (!useCache || var10 == null || var10.size() < var6) { List<PersonPOJO> var11; try { var11 = personManager.getNextPeopleToPrayFor(var6); } catch (AlreadyPrayedForAllContactsException e) { try { var11 = personManager.getNextPeopleToPrayFor(var6); } catch (AlreadyPrayedForAllContactsException e1) { throw new RuntimeException(e1); } } var10 = new ArrayList<>(); for (PersonPOJO var12 : var11) { var10.add(var12.getId()); } cacheManager.cachePersonIdsToPrayFor(var10); } runPager = new Runnable() { @Override public void Func2() { viewPager.setOffscreenPageLimit(var6 + 1); final FragmentStatePagerAdapter var13 = new FragmentStatePagerAdapter(((AppCompatActivity) getActivity()).getSupportFragmentManager()) { @Override public android.support.v4.app.Fragment Func3(int var14) { android.support.v4.app.Fragment var15; Bundle var16 = new Bundle(); if (var14 == 0) { var15 = new VerseCardSupportFragment(); } else if (var14 == Func4() - 1) { var15 = new ProgressCardSupportFragment(); } else { List<String> var10 = cacheManager.getCachedPersonIdsToPrayFor(); if (var10 != null && var10.size() >= var14) { String var17 = var10.get(var14 - 1); var15 = PersonSupportFragment.newInstance(var17); var16.putInt(Constants.HOME_SECTION_NUMBER_BUNDLE_ARG, var14); } else { var15 = new BlankSupportFragment(); } } var16.putBoolean(Constants.USE_CACHE_BUNDLE_ARG, useCache); if (var15.getArguments() != null) { var15.getArguments().putAll(var16); } else { var15.setArguments(var16); } return var15; } @Override public int Func4() { return var6 + Constants.NUM_AUXILIARY_CARDS; } }; viewPager.setAdapter(var13); viewPager.setPageTransformer(true, new ZoomOutPageTransformer()); viewPager.clearOnPageChangeListeners(); viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() { @Override public void Func5(int var14, float var18, int var19) { } @Override public void Func6(int var14) { ICardPageFragment var20 = (ICardPageFragment) var13.Func3(var14); Log.v(TAG, ""Page selected "" + var14); AnalyticsUtils.sendScreenViewHit(mTracker, var20.getCardName()); Bundle var21 = new Bundle(); var21.putInt(Constants.HOME_SECTION_NUMBER_BUNDLE_ARG, var14); if (var14 > 0 && var14 < var6 + 1) { List<String> var10 = cacheManager.getCachedPersonIdsToPrayFor(); if (var10 != null && var10.size() >= var14) { String var17 = var10.get(var14 - 1); var21.putString(Constants.PERSON_ID_BUNDLE_ARG, var17); } } FragmentState var22 = new FragmentState(getString(R.string.nav_home), var21); mListener.notify(var22); } @Override public void Func7(int var23) { } }); indicator.setViewPager(viewPager); Bundle var16 = getArguments(); if (var16 != null && var16.containsKey(Constants.HOME_SECTION_NUMBER_BUNDLE_ARG)) { Integer var24 = var16.getInt(Constants.HOME_SECTION_NUMBER_BUNDLE_ARG); Log.d(TAG, ""setting pager to "" + var24); viewPager.setCurrentItem(var24); } else { Log.d(TAG, ""No var16 argument for var24""); AnalyticsUtils.sendScreenViewHit(mTracker, ((ICardPageFragment) var13.Func3(0)).getCardName()); } } }; return var4; } "	0	0	1	0	0	0
private void Func1() { Module var1 = getSelectedModule(); List<Dependency> var2 = var1.getDependencies(); if (!var2.isEmpty()) { IViewPart var3 = OpenAndAnnotateHelper.openView(JSDeodorantModulesView.ID); if (var3 != null) { ((JSDeodorantVisualizationView)var3).showDependenciesGraph(var1); } } } 	0	0	1	0	1	0
"private void Func1(String var1, String var2) { StringBuffer var3= new StringBuffer(); if(isStringNotBlank(var1)) { var3.append(var1).append("": ""); } var3.append(var2); System.out.println(var3); } "	0	0	1	0	1	0
"private String Func1(int var1) { switch(var1) { case SUCCESS: return ""SUCCESS""; case FAILURE: return ""FAILURE""; case SKIP: return ""SKIP""; case SUCCESS_PERCENTAGE_FAILURE: return ""SUCCESS WITHIN PERCENTAGE""; case STARTED: return ""STARTED""; default: throw new RuntimeException(); } } "	0	0	0	1	0	0
private void Func1(String var1) { namespaceDispatchers.put(var1, new NamespacedTagDispatcher(var1, GroovyPage.class, grailsApplication, this)); } 	0	0	0	1	0	0
"@Override protected void Func1(Bundle var1) { super.Func1(var1); setContentView(R.layout.login_main); UserListManager.initManager(this.getApplicationContext()); UserListController var2 = new UserListController(); Button var3 = (Button) findViewById(R.id.buttonNewAccount); var3.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var4) { Intent var5 = new Intent(LoginActivity.this, NewAccountActivity.class); startActivity(var5); } }); Button var6 = (Button) findViewById(R.id.buttonLogin); var6.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var4) { EditText var7 = (EditText) findViewById(R.id.editLoginUserName); String var8 = var7.getText().toString(); if (!var2.authenticateUser(var8)) { Toast.makeText(LoginActivity.this, ""No such UserName"", Toast.LENGTH_SHORT).show(); } else { Toast.makeText(LoginActivity.this, var8, Toast.LENGTH_SHORT).show(); Intent var5 = new Intent(LoginActivity.this, ChooseListActivity.class); var5.putExtra(""var7"", var8); startActivity(var5); } } }); } "	1	0	1	1	1	0
"@Override public void Func1(Long var1, InputStream var2) throws IOException, ModelException { final List<String> var3 = Arrays.asList(new String[] { ""budget"", ""initiallyConsumed"", ""todo"" }); final TaskDAOCache var4 = new TaskDAOCache(taskDAO); final String var5 = var1 == null ? """" : var4.getCodePath(var1); XlsImportHelper.visit(var2, new IXLSHandler() { @Override public void Func2(Map<String, XLSCell> var6) throws ModelException { if (!var6.containsKey(""code"")) { throw new ModelException(""Sheet must contain a code column""); } String var7 = var5; boolean var8 = true; Task var9 = factory.var9(); for (String var10 : var6.keySet()) { XLSCell var11 = var6.get(var10); Object var12 = var11.getValue(); var8 &= (var12 == null || """".equals(String.valueOf(var12).trim())); if (""path"".equals(var10)) { if (var12 != null) { var8 = false; String var13 = String.valueOf(var12); if (!var13.startsWith(""/"")) { var13 = ""/"" + var13; } var7 += var13; } } else { boolean var14 = var3.contains(var10); Func3(var9, var11, var14); } } Task var15 = var4.getByCodePath(var7); if (!"""".equals(var7) && var15 == null) { throw new ModelException(""Unknown var16 path '"" + var7 + ""'""); } if (!var8) { createTask(var15, var9); } } private void Func3(Task var16, XLSCell var17, boolean var14) throws ModelException { try { Object var12 = var17.getValue(); if (var12 != null) { if (var14) { var12 = StringHelper.entryToHundredth(String.valueOf(var12)); } BeanUtilsBean2.getInstance().setProperty(var16, var17.getColumnName(), var12); } } catch (StringFormatException e) { throw new XLSModelException(var17.getCell(), ""bad format ("" + e.getMessage() + "")""); } catch (IllegalAccessException e) { throw new XLSModelException(var17.getCell(), ""invalid content ("" + e.getMessage() + "")""); } catch (InvocationTargetException e) { throw new XLSModelException(var17.getCell(), ""invalid content ("" + e.getMessage() + "")""); } } }); } "	0	0	0	0	0	1
@Override public void Func1(Intent var1, int var2, int var3, int var4) { switch (var4) { case REQUEST_CODE_BACKUP_DIR_PRINTABLE: ToolsActivity.onBackUpDirForPrintableSelected(getContext(), var1, var2, var3); break; } } 	0	0	1	0	1	0
public final void Func1(float var1) { timeUntillBreakFree = var1; } 	0	0	1	1	0	0
public final void Func1(float var1) { angryTime = var1; } 	0	0	1	1	0	0
private WebElement Func1(String var1) { ExplicitWait.getWhenVisible(By.xpath(NavigationMap.ROOMS_LIST), 60); List<WebElement> var2 = roomsList.findElements(By .xpath(NavigationMap.ROOMS_LIST_ELEMENT)); for (WebElement var3 : var2) { String var4 = var3.findElement( By.xpath(NavigationMap.ROOM_NAME)).getText(); if (var4.equals(var1)) { return var3; } } return null; } 	0	0	1	0	1	0
"@Security.Authenticated(Authenticators.SellerFilter.class) public Result Func1(Integer var1) { Restaurant var2 = Restaurant.findRestaurantById(var1); Form<Restaurant> var3 = restaurantForm.bindFromRequest(); String var4 = var3.field(""var4"").value(); String var5 = var3.field(""var5"").value(); Integer var6 = Integer.parseInt(var3.field(""var6"").value()); String var7 = var3.field(""var7"").value(); String var8 = var3.field(""restOpen"").value(); String var9 = var3.field(""restClose"").value(); String var10 = var8 + "" - "" + var9; var2.var4 = var4; var2.var5 = var5; var2.var6 = var6; var2.var10 = var10; var2.var7 = var7; Http.MultipartFormData var11 = request().body().asMultipartFormData(); List<Http.MultipartFormData.FilePart> var12 = var11.getFiles(); if(var12 != null) { for (Http.MultipartFormData.FilePart var13 : var12) { File var14 = var13.getFile(); Image var15 = Image.create(var14, null, null, null, null, var1); var2.images.add(var15); } } var2.update(); if (session(""userId"") != null) { flash(""edit"",""The hotel was updated!""); return redirect(routes.Hotels.showSellerHotels(Integer.parseInt(session(""userId"")))); } else { return redirect(routes.Application.index()); } } "	0	0	1	0	0	0
public Float Func1(String var1) { try { return Float.valueOf(parameters.getParameter(var1)); } catch (NullPointerException npe) { return null; } } 	0	0	1	0	0	0
"private void Func1(int var1) { Platform.runLater(() -> this.syncStatus.setText(var1 + "" person(s) total"")); } "	0	0	1	1	1	0
protected boolean Func1(PartType var1, int var2){ if (!parts.containsKey(var1)) return false; if (var2 <= 0) return false; if (parts.get(var1) < var2) return false; if (parts.get(var1) > var2) parts.put(var1, parts.get(var1) - var2); if (parts.get(var1) == var2) parts.remove(var1); return true; } 	0	0	0	0	0	1
"@Test public void Func1() throws InterruptedException { QueueChannel var1 = new QueueChannel(); Message<?> var2 = createMessage(""123"", ""ABC"", 2, 4, null); this.resequencer.setSendPartialResultOnExpiry(false); this.resequencer.setDiscardChannel(var1); this.resequencer.handleMessage(var2); Message<?> var3 = var1.receive(0); assertNull(var3); } "	0	0	1	0	1	0
public CoordinateTransform Func1() throws IllegalArgumentException { if (instance == null) { instance = validationInstance; } else { instance = createAndInitTransform(); } return instance; } 	1	0	1	0	1	0
private String Func1(final ProjectVersionView var1) throws HubIntegrationException, IllegalArgumentException, EncryptionException { final MetaService var2 = hubServicesFactory.createMetaService(hubServicesFactory.getRestConnection().logger); return var2.getFirstLink(var1, MetaService.RISK_PROFILE_LINK); } 	0	0	1	0	1	0
"@Override public synchronized final void Func1(long var1) { running = false; try { if (keepRunning) { keepRunning = false; interrupt(); quit(); if (0L == var1) { join(); } else { join(var1); } } } catch (InterruptedException e) { log.warn(""Got interrupted while stopping"", e); } } "	0	0	1	1	0	0
"public void Func1(int var1, int var2, Intent var3) { CompoundRequestCode var4 = new CompoundRequestCode(var1); byte var5 = var4.getImageId(); var1 = var4.getRequestCode(); if (var5 != imageId) return; if (var2 == Activity.RESULT_OK) { if (var1 == SELECT_IMAGE || var1 == TAKE_PICTURE) { Uri var6 = imageHolder.getSource(); if (var3 != null) { var6 = fixUri(var3.getData()); } imageHolder.setSource(var6); if (var6 == null) { Log.e(TAG, ""var6 is still null even after fixUri""); return; } File var7 = context.getCacheDir(); File var8 = new File(var7, var6.getLastPathSegment() + PREVIEW_FILE_EXTENSION); imageHolder.setPreview(Uri.fromFile(var8)); cropImage(); } else if (var1 == CROP_IMAGE) { showImage(); } } } "	1	0	0	0	1	0
"@SuppressWarnings(""unused"") private void Func1(MotionEvent var1) { switch (currentMode) { case NONE: break; case DRAG: handlingPiece.record(); break; case ZOOM: handlingPiece.record(); break; case MOVE: handlingLine.prepareMove(); needChangePieces.clear(); needChangePieces.addAll(findNeedChangedPieces()); for (PuzzlePiece var2 : puzzlePieces) { var2.record(); var2.setPreviousMoveX(downX); var2.setPreviousMoveY(downY); } break; } } "	0	0	1	0	1	0
private void Func1(Parsable var1) throws IOException { Path var2 = resolveHtmlPath(var1); if (config.getRenderTags()) { resolveTags(var1, var2); } try (BufferedWriter bw = Files.newBufferedWriter(var2, StandardCharsets.UTF_8)) { parsedContent = Processor.process(var1.getContent(), renderConfig); var1.setContent(parsedContent); if (var1 instanceof Post) { indexer.addToIndex(var1); } bw.write(renderer.renderParsable(var1)); } catch (IOException ex) { Logger.getLogger(Parser.class .getName()).log(Level.SEVERE, null, ex); } } 	1	0	0	0	1	0
"private void Func1(List<String> var1) throws RSExceptionException { for (String var2 : var1) { if (!var2.startsWith(urnPrefix)) { throw createRSExceptionException( ""Not responsible for node URN "" + var2 + "", only serving prefix: "" + urnPrefix ); } } if (servedNodeUrns.get() != null) { String[] var3; try { var3 = servedNodeUrns.get(); } catch (Exception e) { throw createRSExceptionException(e.getMessage()); } List<String> var4 = new LinkedList<String>(); boolean var5; for (String var2 : var1) { var5 = false; for (String var6 : var3) { if (var6.equalsIgnoreCase(var2)) { var5 = true; } } if (!var5) { var4.add(var2); } } if (var4.size() > 0) { throw createRSExceptionException(""The node URNs "" + Arrays .toString(var4.toArray()) + "" are unknown to the reservation system!"" ); } } else { log.debug(""Not checking session management endpoint for node URN validity as no endpoint is configured.""); } } "	1	0	1	1	1	0
"@Override public void Func1(ChannelHandlerContext var1, ChannelStateEvent var2) throws Exception { log.info(""client connected: {}"", var2); channel = var2.getChannel(); super.Func1(var1, var2); } "	0	0	1	0	1	0
"@Override public ConstraintBuilder Func1(ConstraintActivityPreferredTimeSlots var1, Object var2) { return fillDefault(""time.ActivityHasSomePreferredTimeSlots"", var1) .withAssignment(""assignment"", repo.findAssignment(var1.activityId)) .withWeek(""time-slots"", transform(var1.preferredTimeSlots, x -> slot(repo.findDay(x.getDay()), repo.findHour(x.getHour())))) ;} "	0	0	1	0	0	0
@Test public void Func1() { List<Pacman> var1 = pacmanRepository.getAllPlayers(); assertNull(var1); } 	0	0	1	0	1	0
"@Test public void Func1() throws Exception { ctx.broadcast(TestUtils.loadIdentity(""BM-2cSqjfJ8xK6UUn5Rw3RpdGQ9RsDkBhWnS8""), ""Subject"", ""Message""); verify(ctx.internals().getProofOfWorkRepository(), timeout(10000).atLeastOnce()) .putObject(object(BROADCAST), eq(1000L), eq(1000L)); verify(ctx.internals().getProofOfWorkEngine()) .calculateNonce(any(byte[].class), any(byte[].class), any(ProofOfWorkEngine.Callback.class)); verify(ctx.messages(), timeout(10000).atLeastOnce()) .save(MessageMatchers.plaintext(Plaintext.Type.BROADCAST)); } "	1	1	1	1	0	0
"public List<Lectureseries> Func1(Long var1, Long var2, Long var3, Long var4, Long var5, String var6, int var7) { int var8 =com.liferay.portal.kernel.dao.orm.QueryUtil.ALL_POS; int var9 =com.liferay.portal.kernel.dao.orm.QueryUtil.ALL_POS; if (var7>0){ var8=0; var9 = var7; } Session var10 = null; try { var10 = openSession(); String var11 = sqlFilterForOpenAccessLectureseries(var1, var2, var3, var4, var5, var6); SQLQuery var12 = var10.createSQLQuery(var11); var12.addScalar(""number_"", Type.STRING); var12.addScalar(""eventType"", Type.STRING); var12.addScalar(""var4"", Type.LONG); var12.addScalar(""name"", Type.STRING); var12.addScalar(""shortDesc"", Type.STRING); var12.addScalar(""var3"", Type.LONG); var12.addScalar(""language"", Type.STRING); var12.addScalar(""facultyName"", Type.STRING); var12.addScalar(""lectureseriesId"", Type.STRING); var12.addScalar(""password_"", Type.STRING); var12.addScalar(""approved"", Type.STRING); var12.addScalar(""longDesc"", Type.STRING); var12.addScalar(""latestOpenAccessVideoId"", Type.LONG); var12.addScalar(""latestVideoUploadDate"", Type.STRING); var12.addScalar(""videoCount"", Type.INTEGER); var12.setCacheable(false); QueryPos var13 = QueryPos.getInstance(var12); boolean var14 = (var6.trim().length()>0); int var15=1; if (var14)var15=2; for (int var16=var15;var16<=2;var16++){ //for all queries ""lQueryForSearch"" ""lQuery"" and ""vQuery"" if (var3 > 0) var13.add(var3); if (var5 > 0) var13.add(var5); if (var4 > 0) var13.add(var4); if (var1 > 0) var13.add(var1); if (var2 > 0) var13.add(var2); if (var6.trim().length()>0) var13.add(""%"" + var6 + ""%""); } @SuppressWarnings(""unchecked"") List <Object[]> var17 =  (List<Object[]>) QueryUtil.list(var12, getDialect(),var8 , var9); return assembleLectureseries(var17); } catch (Exception e) { try { throw new SystemException(e); } catch (SystemException se) { se.printStackTrace(); } } finally { closeSession(var10); } return null; } "	0	0	1	1	0	0
"public void Func1(String var1) { this.var1 = String.format(""%10s"",var1); } "	1	0	0	0	1	0
"@Test public void Func1() { Player var1 = new Player(""Dwayne Bravo""); Right var2 = new Right(); String var3 = ""Medium-Fast""; String var4 = null; var1.var7(var2, var3, var4); Iterable<Player> var5 = playerRepository.findAll(); assertFalse(var5.iterator().hasNext()); playerRepository.save(var1); Player var6 = playerRepository.findOne(var1.id); assertEquals(""Dwayne Bravo"", var6.name); Bowls var7 = var6.var7; assertNotNull(var7); assertEquals(""Medium-Fast"",var7.var3); assertNull(var7.var4); assertTrue((var7.arm instanceof Right)); } "	1	0	1	1	1	0
@Autowired public void Func1(final HonoServerFactory var1) { this.var1 = var1; } 	0	0	1	1	0	0
@Autowired public void Func1(final HonoConfigProperties var1) { this.var1 = var1; } 	0	0	1	1	0	0
"public Item Func1(String var1, String var2){ ArrayList<Item> var3; switch (var2.toLowerCase()){ case ""items"": var3 = items; break; case ""spells"": var3 = spells; break; case ""equip"": var3 = equip; break; default: return null; } for (Item var4 : var3){ if (var4.getName().equals(var1)){ return var4; } } return null; } "	0	0	1	1	0	0
"public static void Func1(final Response.Listener<JSONObject> var1) { Log.d(API.class, ""API.Func1""); JsonObjectRequest var2 = new BackgroundPreprocessRequest(Request.Method.GET, getUrl(FETCH_USER_URL), null, new UserFetchResultListener(new OnFetchUser() { @Override public void Func2(User var3) { Log.d(API.class, ""Fetched "", var3.toString(), "" var3. and procesing it in background thread.""); List<Rando> var4 = RandoDAO.getAllRandos(); if (!(var3.randosIn.size() + var3.randosOut.size() == var4.size()) || (var4.containsAll(var3.randosIn) && var4.containsAll(var3.randosOut))){ RandoDAO.clearRandos(); RandoDAO.insertRandos(var3.randosIn); RandoDAO.insertRandos(var3.randosOut); Notification.sendSyncNotification(0); } } }), var1, new ErrorResponseListener()); VolleySingleton.getInstance().getRequestQueue().add(var2); } "	1	1	1	1	0	0
"@Override public void Func1(List<String> var1) { LOG.info(""ZkJobCoordinator::Func1 - list of var1 changed! List size="" + var1.size()); debounceTimer.scheduleAfterDebounceTime(ScheduleAfterDebounceTime.ON_PROCESSOR_CHANGE, debounceTimeMs, () -> doOnProcessorChange(var1)); } "	1	0	1	1	0	0
"@Before public void Func1() throws Exception { client = setupCloud().connect(); deletePods(client, labels, false); String var1 = ""busybox""; Container var2 = new ContainerBuilder().withName(var1).withImagePullPolicy(""IfNotPresent"").withImage(var1) .withCommand(""cat"").withTty(true).build(); String var3 = ""test-command-execution-"" + RandomStringUtils.random(5, ""bcdfghjklmnpqrstvwxz0123456789""); Pod var4 = client.pods().create(new PodBuilder().withNewMetadata().withName(var3).withLabels(labels) .endMetadata().withNewSpec().withContainers(var2).endSpec().build()); System.out.println(""Created var4: "" + var4.getMetadata().getName()); decorator = new ContainerExecDecorator(client, var4.getMetadata().getName(), var1, client.getNamespace()); } "	0	0	1	1	0	0
private void Func1(){ ActionMenuView var1 = getMenuView(); int var2 = var1.getChildCount(); Animation var3 = null; mAnimations.clear(); mAnimations.ensureCapacity(var2); for(int var4 = 0; var4 < var2; var4++){ View var5 = var1.getChildAt(var4); Animation var6 = mAnimator.getOutAnimation(var5, var4); mAnimations.add(var6); if(var6 != null) if(var3 == null || var3.getStartOffset() + var3.getDuration() < var6.getStartOffset() + var6.getDuration()) var3 = var6; } if(var3 == null) mOutAnimationEndListener.onAnimationEnd(null); else { var3.setAnimationListener(mOutAnimationEndListener); for(int var4 = 0; var4 < var2; var4++){ Animation var6 = mAnimations.get(var4); if(var6 != null) var1.getChildAt(var4).startAnimation(var6); } } mAnimations.clear(); } 	0	0	1	0	1	0
private BulkUploadHandler Func1() { final BulkUploadHandler var1 = new BulkUploadHandler(this, targetManagement, managementUIState, deploymentManagement, uINotification, i18n); var1.buildLayout(); var1.addStyleName(SPUIStyleDefinitions.BULK_UPLOAD_BUTTON); return var1; } 	0	0	1	1	0	0
"private static String Func1() { if (OsUtils.isWindows()) { if (OsUtils.is64Bit() && (Files.exists(Paths.get(""./drivers/geckodriver-windows-64bit"")) || Files.notExists(Paths.get(""./drivers/geckodriver-windows-32bit"")))) { return ""drivers/geckodriver-windows-64bit.exe""; } else { return ""drivers/geckodriver-windows-32bit.exe""; } } else if (OsUtils.isMac()) { if (OsUtils.is64Bit() && (Files.exists(Paths.get(""./drivers/geckodriver-mac-64bit"")) || Files.notExists(Paths.get(""./drivers/geckodriver-mac-32bit"")))) { return ""drivers/geckodriver-mac-64bit""; } else { return ""drivers/geckodriver-mac-32bit""; } } else if (OsUtils.isLinux()) { if (OsUtils.is64Bit() && (Files.exists(Paths.get(""./drivers/geckodriver-linux-64bit"")) || Files.notExists(Paths.get(""./drivers/geckodriver-linux-32bit"")))) { return ""drivers/geckodriver-linux-64bit""; } else { return ""drivers/geckodriver-linux-32bit""; } } return null; } "	0	0	1	0	1	0
"public Calendar[] Func1(String var1, String var2) throws ParseException { String[] var3 = new String[2]; var3[0] = var1; var3[1] = var2; Calendar[] var4 = new Calendar[2]; SimpleDateFormat var5 = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss""); for(int var6=0; var6 < var3.length; var6++) { Calendar var7 = Calendar.getInstance(); var7.setTime(var5.parse(var3[var6])); var4[var6] = var7; } return var4; } "	0	0	1	0	1	0
"@Override public synchronized void Func1(GlobalStateObject var1) { final GlobalStateObject var2 = lastSnapshot; if (var2 == null) { return; } boolean var3 = false; for (int var4 = 0; var4 < var1.getVehicles().size(); var4++) { if (var1.getVehicles().get(var4).getDestination().isPresent() && !var2.getVehicles().get(var4).getDestination() .equals(var1.getVehicles().get(var4).getDestination())) { var3 = true; break; } } if (var3) { LOGGER.info( ""Vehicle destination commitment change detected -> restart solver.""); start(var1); } } "	1	0	0	0	1	0
public void Func1() { verticalSpeed += Func1 * Gdx.graphics.getDeltaTime(); } 	0	0	1	0	1	0
"private IRI Func1(String var1, OWLClassExpression var2) { if( var2.isAnonymous() == false) { OWLClass var3 = var2.asOWLClass(); String var4 = StringUtils.replaceOnce(IdStringManager.getId(var3.getIRI()), "":"", ""_""); var1 = var1 + ""-"" + var4; } return IRI.create(""http://geneontology.org/lego/""+var1+""-""+UUID.randomUUID().toString()); } "	1	0	1	0	1	0
public static TimecodeBuilder Func1(final SampleCount var1, final boolean var2) { return fromFrames(var1.getSamples(), var2, var1.getRate()); } 	1	0	1	1	1	0
public static boolean Func1(int var1) { return VideoProfile.VideoState.isTransmissionEnabled(var1); } 	1	0	1	1	1	0
private boolean Func1(DataDocument var1) { return var1.containsKey(LumeerConst.Document.METADATA_PREFIX + LumeerConst.View.VIEW_USER_RIGHTS_KEY); } 	0	0	1	0	1	0
@Override public ItemStack Func1(IItemRelocator var1, int var2, ItemStack var3, boolean var4, boolean var5) { if (var3 == null) return null; if (!var5) { this.var4 = var4; int var6 = 0; List<Integer> var7 = new ArrayList<Integer>(); for (int var8 = 0; var8 < CRAFT_MATRIX.getSizeInventory(); var8++) { ItemStack var9 = CRAFT_MATRIX.getStackInSlot(var8); if (ItemStackHelper.areItemStacksEqual(var3, var9)) { var6 += var9.stackSize; var7.add(var8); } } if (var7.isEmpty()) return var3; int var10 = (var7.size() * Math.min(var3.getMaxStackSize(), maxCraftStack)) - var6; if (var10 < 0) return var3; int var11 = Math.min(var10, var3.stackSize); int var12 = (var11 + var6) / var7.size(); int var13 = (var11 + var6) % var7.size(); for (int var14 : var7) { ItemStack var9 = CRAFT_MATRIX.getStackInSlot(var14); if (var13 > 0) { var9.stackSize = var12 + 1; var13--; } else { var9.stackSize = var12; } } var3.stackSize -= var11; if (var3.stackSize == 0) { return null; } } else { for (int var8 = 0; var8 < CRAFT_MATRIX.getSizeInventory(); var8++) { ItemStack var9 = CRAFT_MATRIX.getStackInSlot(var8); if (ItemStackHelper.areItemStacksEqual(var3, var9)) { int var11 = Math.min(var9.getMaxStackSize(), Math.min(maxCraftStack - var9.stackSize, var3.stackSize)); if (var11 < 0) continue; var3.stackSize -= var11; if (var3.stackSize == 0) { return null; } } } } return var3; } 	1	0	1	1	1	0
private String Func1() { return tablePath + File.separator + FACT_DIR; } 	0	0	1	1	0	0
"public void Func1(int var1) throws Exception { connect(); stmt = conn.createStatement(); stmt.executeUpdate(""DELETE INTO public.\""EMPLOYEES\"" WHERE \""ID\"" = "" + var1); cleanConnection(); } "	0	0	1	0	1	0
public List<FightPopUpMenuElement> Func1() { List<FightPopUpMenuElement> var1 = new ArrayList<FightPopUpMenuElement>(); for (fr.mmyumu.troncgame.fight.popup.FightPopUpMenuIcon var2 : popMenuIcons) { var1.add(var2); } var1.add(popUpMenuNotReady); return var1; } 	0	0	1	0	0	0
"public void Func1() { move(-1); GoodShip var1 = getOneIntersectingObject(GoodShip.class); if(var1 != null) { getWorld().removeObject(this); switch(typeDecide) { case ""Attack"": attackSpeed(); break; case ""Score"": score(); break; case ""Sheild"": shield(); break; case ""Penetrate"": plasmaPenetrate(); break; case ""Mystery"": mysteryBox(); break; case ""Burst"": burst(); break; case ""Movement"": movementSpeed(); break; case ""Life"": extraLife((SpaceWorld)(var1.getWorld()),var1); break; } } else if(getY() == 799) { getWorld().removeObject(this); } } "	0	0	1	1	0	0
public static boolean Func1(int var1, int var2) { if (var1==var2) return true; if (isIdentifier(var1)&&isIdentifier(var2)) { if ((var1==116)||(var2==116)) return true; if ((var1==100)||(var2==100)) { if ((var1==114)||(var2==114)) { return true; } return false; } else if ((var1==111)||(var2==111)) { if ((var1==115)||(var2==115)) { return true; } return false; } else if ((var1==112)||(var2==112)) { if ((var1>113)||(var2==113)) { return true; } return false; } else if (((var1==114)&&(var2==115))||((var1==115)&&(var2==114))) return true; } return false; } 	0	0	1	0	1	0
private static boolean Func1(String var1) { return var1 != null && var1.length() > 0 && var1.charAt(0) == 'p'; } 	1	0	1	1	1	0
public static void Func1(String var1) { info(var1, false); } 	0	0	1	0	1	0
"@Override public void Func1(TagCompound var1) { if (var1.containsKeyAs(""Variant"", TagInt.class)) { setVariant(RabbitType.getTypeByID(var1.getAs(""Variant"", TagByte.class).getByteData())); } if (var1.getCompoundData().containsKey(""Baby"")) { setBaby(var1.getAs(""Baby"", TagByte.class).getBooleanData()); } } "	0	0	1	0	1	0
"@Override public List<TestItem> Func1(String var1) { Criteria var2 = new Criteria().andOperator(where(LAUNCH_REFERENCE).is(var1), where(ISSUE_TYPE).ne(TestItemIssueType.TO_INVESTIGATE.name())); Criteria var3 = new Criteria().andOperator(where(LAUNCH_REFERENCE).is(var1), where(ISSUE_TYPE).exists(true), where(ISSUE_TICKET).exists(true)); Query var4 = var4(new Criteria().orOperator(var2, var3)); var4.limit(HISTORY_LIMIT); var4.fields().include(""name""); var4.fields().include(""launchRef""); var4.fields().include(""issue""); var4.fields().include(""status""); var4.fields().include(ID_REFERENCE); var4.fields().include(""start_time""); return mongoTemplate.find(var4, TestItem.class); } "	0	0	0	0	0	1
"private ItemStack Func1(final Map<String, Object> var1) { final ItemStack var2 = ItemUtil.searchItem((String) var1.get(""type"")); if (var2 == null) { return null; } if (var1.containsKey(""amount"")) { var2.setAmount((int) var1.get(""amount"")); } if (var1.containsKey(""damage"")) { var2.setDurability(((Integer) var1.get(""damage"")).shortValue()); } MetaItemStack var3 = new MetaItemStack(var2); for (String var4 : var1.keySet()) { if (var4.equalsIgnoreCase(""amount"") || var4.equalsIgnoreCase(""type"") || var4.equalsIgnoreCase(""damage"")) { continue; } var3.addStringMeta(null, true, var4 + "":"" + var1.get(var4).toString().replaceAll("" "", ""_"")); } return var3.Func1(); } "	0	0	1	0	1	0
public final void Func1() { mContainer = null; onControlLost(); } 	0	0	1	0	0	0
public static Map<String, Map<RType, Set<com.tencent.tinker.build.aapt.RDotTxtEntry>>> Func1(List<PackageRTypeResourceMap> var1) { Map<String, Map<RType, Set<com.tencent.tinker.build.aapt.RDotTxtEntry>>> var2 = new HashMap<String, Map<RType, Set<com.tencent.tinker.build.aapt.RDotTxtEntry>>>(); Map<String, AaptResourceCollector> var3 = new HashMap<String, AaptResourceCollector>(); for (PackageRTypeResourceMap var4 : var1) { String var5 = var4.var5; Map<RType, Set<com.tencent.tinker.build.aapt.RDotTxtEntry>> var6 = var4.var6; AaptResourceCollector var7 = null; if (var3.containsKey(var5)) { var7 = var3.get(var5); } else { var7 = new AaptResourceCollector(); var3.put(var5, var7); } Iterator<Entry<RType, Set<com.tencent.tinker.build.aapt.RDotTxtEntry>>> var8 = var6.entrySet().var8(); while (var8.hasNext()) { Entry<RType, Set<com.tencent.tinker.build.aapt.RDotTxtEntry>> var9 = var8.next(); RType var10 = var9.getKey(); Set<com.tencent.tinker.build.aapt.RDotTxtEntry> var11 = var9.getValue(); for (com.tencent.tinker.build.aapt.RDotTxtEntry var12 : var11) { if (var12.idType.equals(IdType.INT)) { var7.addIntResourceIfNotPresent(var10, var12.name); } else if (var12.idType.equals(IdType.INT_ARRAY)) { var7.addResource(var10, var12.idType, var12.name, var12.idValue); } } } } Iterator<Entry<String, AaptResourceCollector>> var8 = var3.entrySet().var8(); while (var8.hasNext()) { Entry<String, AaptResourceCollector> var9 = var8.next(); var2.put(var9.getKey(), var9.getValue().getRTypeResourceMap()); } return var2; } 	0	0	0	0	0	1
"@Override public synchronized IMetaverseNode Func1( IComponentDescriptor var1, IDocument var2 ) throws MetaverseAnalyzerException { validateState( var2 ); Object var3 = var2.getContent(); JobMeta var4 = null; if ( var3 instanceof String ) { try { String var5 = (String) var3; ByteArrayInputStream var6 = new ByteArrayInputStream( var5.getBytes() ); var4 = new JobMeta( var6, null, null ); } catch ( KettleXMLException e ) { throw new MetaverseAnalyzerException( e ); } } else if ( var3 instanceof JobMeta ) { var4 = (JobMeta) var3; } var4.setFilename( var2.getStringID() ); Job var7 = new Job( null, var4 ); var7.setInternalKettleVariables( var4 ); IComponentDescriptor var8 = new MetaverseComponentDescriptor( var2.getStringID(), DictionaryConst.NODE_TYPE_JOB, new Namespace( var1.getLogicalId() ), var1.getContext() ); IMetaverseNode var9 = metaverseObjectFactory.createNodeObject( var2.getNamespace(), var4.getName(), DictionaryConst.NODE_TYPE_JOB ); var9.setLogicalIdGenerator( DictionaryConst.LOGICAL_ID_GENERATOR_DOCUMENT ); String var10 = var4.getDescription(); if ( var10 != null ) { var9.setProperty( DictionaryConst.PROPERTY_DESCRIPTION, var10 ); } String var11 = var4.getExtendedDescription(); if ( var11 != null ) { var9.setProperty( ""var11"", var11 ); } Date var12 = var4.getCreatedDate(); if ( var12 != null ) { var9.setProperty( DictionaryConst.PROPERTY_CREATED, Long.toString( var12.getTime() ) ); } String var13 = var4.getCreatedUser(); if ( var13 != null ) { var9.setProperty( DictionaryConst.PROPERTY_CREATED_BY, var13 ); } Date var14 = var4.getModifiedDate(); if ( var14 != null ) { var9.setProperty( DictionaryConst.PROPERTY_LAST_MODIFIED, Long.toString( var14.getTime() ) ); } String var15 = var4.getModifiedUser(); if ( var15 != null ) { var9.setProperty( DictionaryConst.PROPERTY_LAST_MODIFIED_BY, var15 ); } String var16 = var4.getJobversion(); if ( var16 != null ) { var9.setProperty( DictionaryConst.PROPERTY_ARTIFACT_VERSION, var16 ); } String var17 = Messages.getString( ""INFO.JobOrTrans.Status_"" + Integer.toString( var4.getJobstatus() ) ); if ( var17 != null && !var17.startsWith( ""!"" ) ) { var9.setProperty( DictionaryConst.PROPERTY_STATUS, var17 ); } var9.setProperty( DictionaryConst.PROPERTY_PATH, var2.getProperty( DictionaryConst.PROPERTY_PATH ) ); String[] var18 = var4.listParameters(); if ( var18 != null ) { for ( String var19 : var18 ) { try { String var20 = var4.getParameterDefault( var19 ); String var21 = var4.getParameterValue( var19 ); String var22 = var4.getParameterDescription( var19 ); PropertiesHolder var23 = new PropertiesHolder(); var23.setProperty( ""defaultValue"", var20 ); var23.setProperty( ""value"", var21 ); var23.setProperty( ""var10"", var22 ); var9.setProperty( ""parameter_"" + var19, var23.toString() ); } catch ( UnknownParamException upe ) { throw new MetaverseAnalyzerException( upe ); } } } for ( int var24 = 0; var24 < var4.nrJobEntries(); var24++ ) { JobEntryCopy var25 = var4.getJobEntry( var24 ); try { var25.getEntry().setParentJob( new Job( null, var4 ) ); if ( var25 != null ) { IMetaverseNode var26 = null; JobEntryInterface var27 = var25.getEntry(); IComponentDescriptor var28 = new MetaverseComponentDescriptor( var25.getName(), DictionaryConst.NODE_TYPE_JOB_ENTRY, var9, var1.getContext() ); Set<IJobEntryAnalyzer> var29 = getJobEntryAnalyzers( var27 ); if ( var29 != null && !var29.isEmpty() ) { for ( IJobEntryAnalyzer var30 : var29 ) { var30.setMetaverseBuilder( metaverseBuilder ); var26 = (IMetaverseNode) var30.Func1( var28, var25.getEntry() ); } } else { GenericJobEntryMetaAnalyzer var31 = new GenericJobEntryMetaAnalyzer(); var31.setMetaverseBuilder( metaverseBuilder ); var26 = (IMetaverseNode) var31.Func1( var28, var27 ); } if ( var26 != null ) { metaverseBuilder.addLink( var9, DictionaryConst.LINK_CONTAINS, var26 ); } } } catch ( MetaverseAnalyzerException mae ) { log.error( ""Error processing "" + var25.getName(), mae ); } catch ( Exception e ) { log.error( ""Error processing "" + var25.getName(), e ); } } int var32 = var4.nrJobHops(); for ( int var24 = 0; var24 < var32; var24++ ) { JobHopMeta var33 = var4.getJobHop( var24 ); JobEntryCopy var34 = var33.getFromEntry(); JobEntryCopy var35 = var33.getToEntry(); INamespace var36 = new Namespace( var9.getLogicalId() ); if ( var34 != null && var35 != null ) { IMetaverseNode var37 = metaverseObjectFactory.createNodeObject( var36, var34.getName(), DictionaryConst.NODE_TYPE_JOB_ENTRY ); IMetaverseNode var38 = metaverseObjectFactory.createNodeObject( var36, var35.getName(), DictionaryConst.NODE_TYPE_JOB_ENTRY ); metaverseBuilder.addLink( var37, DictionaryConst.LINK_HOPSTO, var38 ); } } metaverseBuilder.addNode( var9 ); addParentLink( var8, var9 ); return var9; } "	1	0	1	0	0	0
"@Override public void Func1(final Tuple2<RemoteIdentifier, Class<? extends T>> var1) { LOG.log(Level.FINER, ""Unsubscribe: {0} tuple {1},{2}"", new Object[] {name, var1.getT1(), var1.getT2().getName()}); tupleToHandlerMap.remove(var1); } "	0	0	0	0	0	1
private void Func1() { IItemHandler var1 = this.tile.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, null); if (tile instanceof TileVendor) { int var2 = 0; if (tile.getField(2) == 0) var2 = 152; if (tile.getField(2) == 1) var2 = -1000; addSlotToContainer(new SlotCustomizable(var1, 0, var2, 9, specialSlotItems)); } if (tile instanceof TileSeller) { if (tile.getField(2) == 0) addSlotToContainer(new SlotItemHandler(var1, 0, 152, 9)); if (tile.getField(2) == 1) addSlotToContainer(new SlotCustomizable(var1, 0, 152, 9, specialSlotItems)); } final int var3 = 18; final int var4 = 18; final int var5 = 44; final int var6 = 32; for (int var7 = 0; var7 < TE_VEND_COLUMN_COUNT; var7++) { for (int var8 = 0; var8 < TE_VEND_ROW_COUNT; var8++) { int var9 = 1 + var7 * TE_VEND_ROW_COUNT + var8; int var2 = var5 + var8 * var3; int var10 = var6 + var7 * var4; addSlotToContainer(new SlotItemHandler(var1, var9, var2, var10)); } } for (int var8 = 0; var8 < TE_BUFFER_TOTAL_COUNT; var8++) { int var9 = TE_VEND_MAIN_TOTAL_COUNT + 1 + var8; int var2 = 0; if (tile.getField(2) == 1) var2 = 15; if (tile.getField(2) == 0) var2 = -1000; int var10 = 32 + var8 * 18; if (tile instanceof TileVendor) addSlotToContainer(new SlotCustomizable(var1, var9, var2, var10, specialSlotItems)); if (tile instanceof TileSeller) addSlotToContainer(new SlotItemHandler(var1, var9, var2, var10)); } } 	0	0	0	0	0	1
public void Func1() { float var1 = getTotalHours() < 40 ? 40 - getTotalHours() : 0; float var2 = getTotalHours() > 40 ? getTotalHours() - 40 : 0; setFlextime(var1); setOvertime(var2); } 	1	0	1	1	1	0
"@Override public TokenResponse Func1( @Nonnull GoogleOauthAccessRequestInfo var1 ) { LOGGER.debug(""Func1 called: var1={}"", var1); requireNonNull(var1, ""var1 cannot be null""); String var2; String var3 = configService.getPublicConfig().getGoogleOauthClientId(); String var4 = configService.getPrivateConfig().getGoogleOauthSecret(); if (!var3.equals(var1.getClientId())) { throw new ClientIdMismatchException( var1.getClientId(), var3 ); } LOGGER.debug( ""Calling into google: var3={}, code={}, redirectUrl={}"", var1.getClientId(), var1.getCode(), var1.getRedirectUri() ); GoogleResponseData var5 = googleOauthService.getUserDataFromGoogle( var1.getClientId(), var4, var1.getCode(), var1.getRedirectUri() ); try { GoogleIdToken var6 = var5.getGoogleOauthToken() .parseIdToken(); var2 = var6.getPayload() .getEmail(); LOGGER.debug(""successfully called into google: var2={}"", var2); } catch (IOException e) { throw new GoogleOauthException(""Failed to parse google id token!"", e); } HmhbUser var7 = userService.saveWithGoogleData( var2, var5.getGooglePlusProfile() ); TokenResponse var8 = new TokenResponse( jwtAuthenticationService.generateJwtToken(var7) ); LOGGER.info(""var8: {}"", var8); return var8; } "	0	0	1	0	1	0
public AddressBookBuilder Func1(Activity var1) throws UniquePersonList.DuplicatePersonException { activityManager.addActivity(var1); return this; } 	0	0	1	0	0	0
public String Func1() throws ProcessExecutionException { return this.executor.Func1(); } 	0	0	1	1	1	0
public Bag<Component> Func1 ( final int var1, final Bag<Component> var2 ) { final ComponentMapper<Component>[] var3 = componentsByType; final FixedBitIterator var4 = bitIterator; var4.setBits( componentBits[var1] ); for ( int var5 = var4.nextSetBit(); var5 >= 0; var5 = var4.nextSetBit() ) { var2.add( var3[var5].getUnsafe( var1 ) ); } return var2; } 	1	0	0	0	1	0
"public static void Func1(PlayerConnection var1) { GameEventHandler.var1 = var1; GameEventHandler.thread = new Thread(new Runnable() { @Override public void Func2() { do { Message var2 = GameEventHandler.var1.receive(); System.out.println(var2.getMessageCode()); if (var2 != null) { LobbyUI var3 = (LobbyUI) MunchkinClient.getPanel(""LobbyUI""); switch (var2.getMessageCode()) { case Message.CLT_CHAT_MESSAGE: ChatMessage var4 = (ChatMessage) var2; var3.getChatArea().appendLine(var4.getSender() + "": "" + var4.getMessage()); break; case Message.PLAY_CARD: PlayCardMessage var5 = (PlayCardMessage) var2; ClientCard var6 = new ClientCard(var5.getCardName()); switch (var5.getAction()) { case SHOW: Data.getTable().addCard(var6.getTitle()); break; case DRAW: Data.getHand().addCard(var6.getTitle()); break; case DISCARD: Data.getDiscardDeck().getCards().set(0,var6.getName()); break; case REMOVE: Data.getHand().removeCard(var6.getTitle()); break; } break; case Message.CLT_READY_STATUS: ReadyLobbyMessage var7 = (ReadyLobbyMessage) var2; players = var7.getPlayers(); readyStatus = var7.getStatus(); var3.showPlayer(); break; case Message.POPUP: PopUpMessage var8 = (PopUpMessage) var2; PopUpDialog var9 = new PopUpDialog(var8.getText(), var8.getButton1(), var8.getButton2(), var8.getTimeout_ms(), var8.getMin_val(), var8.getMax_val()); var9.setVisible(true); if (var9.wasTimedOut()) { sendMessage(new PopUpResultMessage(var1.getConnectedPlayerName())); } else { sendMessage(new PopUpResultMessage(var9.wasButton1Pressed(), var9.wasButton2Pressed(), var9.getSpinnerValue(), var1.getConnectedPlayerName())); } break; case Message.PLAYER_FULL_STATS: PlayerFullStatsMessage var10 = (PlayerFullStatsMessage) var2; Data.getPlayer(var10.getPlayerName()).setStats(var10.getHandSize(), var10.getClassCard(), var10.getRaceCard(), var10.getCombatLevel(), var10.getLevel()); break; case Message.PLAYER_EQUIPMENT: PlayerEquipmentMessage var11 = (PlayerEquipmentMessage) var2; Data.getPlayer(var11.getPlayerName()).setEquipments(var11.getHead().getTitle(), var11.getHand1().getTitle(), var11.getHand2().getTitle(), var11.getBody().getTitle(), var11.getFeet().getTitle()); break; case Message.STATE_UPDATE: StateUpdateMessage var12 = (StateUpdateMessage) var2; if (var12.getState().equals(""begin"")) { MunchkinClient.getPanels().put(""GameUI"", new GameUI(MunchkinClient.getWindow(),gameUiBackground)); MunchkinClient.getWindow().SetActivePanel(MunchkinClient.getPanel(""GameUI"")); break; } } } } while (GameEventHandler.var1.isConnected()); } }); } "	0	0	0	0	0	1
"public JSONArray Func1() throws JSONException { long var1 = getTsOfLastTransition(); Log.d(cachedCtx, TAG, ""Last trip end was at ""+var1); if (var1 < 0) { return new JSONArray(); } String var2 = ""SELECT * from "" + TABLE_USER_CACHE + "" WHERE "" + KEY_TYPE + "" = '""+ MESSAGE_TYPE + ""' OR "" + KEY_TYPE + "" = '"" + RW_DOCUMENT_TYPE + ""'"" + ""' OR "" + KEY_TYPE + "" = '"" + SENSOR_DATA_TYPE + ""'"" + "" AND "" + KEY_WRITE_TS + "" < "" + var1 + "" ORDER BY ""+KEY_WRITE_TS; SQLiteDatabase var3 = this.getReadableDatabase(); Cursor var4 = var3.rawQuery(var2, null); int var5 = var4.getCount(); JSONArray var6 = new JSONArray(); if (var4.moveToFirst()) { for (int var7 = 0; var7 < var5; var7++) { Metadata var8 = new Metadata(); var8.setWrite_ts(var4.getLong(0)); var8.setRead_ts(var4.getLong(1)); var8.setTimeZone(var4.getString(2)); var8.setType(var4.getString(3)); var8.setKey(var4.getString(4)); var8.setPlugin(var4.getString(5)); String var9 = var4.getString(6); JSONObject var10 = new JSONObject(); var10.put(METADATA_TAG, new JSONObject(new Gson().toJson(var8))); var10.put(DATA_TAG, new JSONObject(var9)); Log.d(cachedCtx, TAG, ""For row "" + var7 + "", about to send string "" + var10.toString()); var6.put(var10); var4.moveToNext(); } } var3.close(); return var6; } "	0	0	1	1	0	0
synchronized void Func1(K var1, M var2) { sgMsgSend++; Message<K, M> var3 = new Message<K, M>(Message.MessageType.CUSTOM_MESSAGE, var1, var2); ControlMessage var4 = new ControlMessage(); var4.setTransmissionType(IControlMessage.TransmissionType.NORMAL); var3.setControlInfo(var4); Func1(peer.getPeerName(subgraphPartitionMap.get(var1)), var3); } 	0	0	1	0	0	0
private void Func1(final WaitingOp var1) throws Exception { nodeEngine.getOperationService().executeOperation(var1); } 	0	0	0	1	0	0
"@Override protected String Func1(String... var1) { url = getUrl(); try { conn = (HttpURLConnection) url.openConnection(); conn.setReadTimeout(15000); conn.setConnectTimeout(15000); conn.setRequestMethod(getPostGet()); conn.setDoInput(true); conn.setDoOutput(true); Uri.Builder var2 = getUriBuider(var1); String var3 = var2.build().getEncodedQuery(); OutputStream var4 = conn.getOutputStream(); BufferedWriter var5 = new BufferedWriter( new OutputStreamWriter(var4, ""UTF-8"")); var5.write(var3); var5.flush(); var5.close(); var4.close(); conn.connect(); } catch (IOException e1) { e1.printStackTrace(); toast(); return ""exception""; } try { int var6 = conn.getResponseCode(); if (var6 == HttpURLConnection.HTTP_OK) { InputStream var7 = conn.getInputStream(); BufferedReader var8 = new BufferedReader(new InputStreamReader(var7)); StringBuilder var9 = new StringBuilder(); String var10; while ((var10 = var8.readLine()) != null) { var9.append(var10); } return var9.toString(); } else { toast(); return ""connection failure""; } } catch (IOException e) { e.printStackTrace(); toast(); return ""connection failure""; } finally { conn.disconnect(); } } "	0	0	1	0	1	0
private void Func1() { add(Blocks.beacon, 24773); add(Items.bucket, 768); add(Items.water_bucket, 769); add(Items.lava_bucket, 832); add(Items.snowball, 0.25); add(Items.milk_bucket, 832); add(Items.paper, 32); add(Items.book, 160); add(Items.slime_ball, 24); add(Items.bone, 24); add(Items.ender_pearl, 1024); add(Items.ender_eye, 1792); add(new ItemStack(Items.spawn_egg, 1, 50), null); add(new ItemStack(Items.spawn_egg, 1, 51), null); add(new ItemStack(Items.spawn_egg, 1, 52), null); add(new ItemStack(Items.spawn_egg, 1, 54), null); add(new ItemStack(Items.spawn_egg, 1, 55), null); add(new ItemStack(Items.spawn_egg, 1, 56), null); add(new ItemStack(Items.spawn_egg, 1, 57), null); add(new ItemStack(Items.spawn_egg, 1, 58), null); add(new ItemStack(Items.spawn_egg, 1, 59), null); add(new ItemStack(Items.spawn_egg, 1, 60), null); add(new ItemStack(Items.spawn_egg, 1, 61), null); add(new ItemStack(Items.spawn_egg, 1, 62), null); add(new ItemStack(Items.spawn_egg, 1, 65), null); add(new ItemStack(Items.spawn_egg, 1, 66), null); add(new ItemStack(Items.spawn_egg, 1, 90), null); add(new ItemStack(Items.spawn_egg, 1, 91), null); add(new ItemStack(Items.spawn_egg, 1, 92), null); add(new ItemStack(Items.spawn_egg, 1, 93), null); add(new ItemStack(Items.spawn_egg, 1, 94), null); add(new ItemStack(Items.spawn_egg, 1, 95), null); add(new ItemStack(Items.spawn_egg, 1, 96), null); add(new ItemStack(Items.spawn_egg, 1, 98), null); add(new ItemStack(Items.spawn_egg, 1, 100), null); add(new ItemStack(Items.spawn_egg, 1, 120), null); add(new ItemStack(Items.spawn_egg, 1, 97), null); add(new ItemStack(Items.spawn_egg, 1, 99), null); add(Items.experience_bottle, null); add(Items.fire_charge, 330.666); add(Items.writable_book, 216); add(Items.map, 1312); add(Items.firework_charge, null); add(Items.iron_horse_armor, null); add(Items.golden_horse_armor, null); add(Items.diamond_horse_armor, null); add(Items.record_13, 2048); add(Items.record_cat, 2048); add(Items.record_blocks, 2048); add(Items.record_chirp, 2048); add(Items.record_far, 2048); add(Items.record_mellohi, 2048); add(Items.record_stal, 2048); add(Items.record_strad, 2048); add(Items.record_ward, 2048); add(Items.record_11, 2048); add(Items.record_wait, 2048); } 	0	0	0	0	0	1
private void Func1() { add(Items.apple, 24); add(Items.mushroom_stew, 68); add(Items.bread, 72); add(Items.porkchop, 24); add(Items.cooked_porkchop, 24); add(new ItemStack(Items.golden_apple, 1, 0), 16408); add(new ItemStack(Items.golden_apple, 1, 1), 147480); add(new ItemStack(Items.fish, 1, 0), 24); add(new ItemStack(Items.fish, 1, 1), 24); add(new ItemStack(Items.fish, 1, 2), 24); add(new ItemStack(Items.fish, 1, 3), 24); add(new ItemStack(Items.cooked_fished, 1, 0), 24); add(new ItemStack(Items.cooked_fished, 1, 1), 24); add(Items.cake, 360); add(Items.cookie, 7); add(Items.melon, 16); add(Items.beef, 24); add(Items.cooked_beef, 24); add(Items.chicken, 24); add(Items.cooked_chicken, 24); add(Items.rotten_flesh, 24); add(Items.spider_eye, 128); add(Items.carrot, 24); add(Items.potato, 24); add(Items.baked_potato, 24); add(Items.poisonous_potato, 24); add(Items.golden_carrot, 1844.444); add(Items.pumpkin_pie, 208); } 	0	0	0	0	0	1
"public void Func1(String var1, String var2, int var3) throws ValidationException { if (var2 == null || var2.length() >= var3) { throw new ValidationException(var1, String.format(""This field must not exceed the %d chars."", var3)); } } "	0	0	0	1	1	0
protected void Func1(IExperimentListener var1) { experimentListeners.add(var1); } 	0	0	0	1	0	0
"@SuppressWarnings(""deprecation"") @EventHandler(priority = EventPriority.LOW, ignoreCancelled=true) public void Func1(final PlayerInteractEvent var1) { if (Settings.pairLinking) { return; } if (!var1.hasItem()) { return; } if (!var1.getItem().getType().equals(Material.PAPER) && !var1.getItem().getType().equals(Material.MAP)) { return; } if (!var1.getAction().equals(Action.RIGHT_CLICK_BLOCK)) { return; } World var2 = var1.getClickedBlock().getWorld(); if (!var2.equals(getBeaconzWorld())) { return; } Player var3 = var1.getPlayer(); if (getGameMgr().isPlayerInLobby(var3)) { return; } Team var4 = getGameMgr().getPlayerTeam(var3); if (var4 == null) { if (var3.isOp()) { return; } else { var1.setCancelled(true); return; } } applyEffects(var3, getRegister().getTriangle(var3.getLocation().getBlockX(), var3.getLocation().getBlockZ()), var4); Block var5 = var1.getClickedBlock(); final BeaconObj var6 = getRegister().getBeacon(var5); if (var6 == null) { return; } if (var6.getOwnership() == null || !var6.getOwnership().equals(var4)) { var3.sendMessage(ChatColor.RED + ""You must capture this var6 first!""); var1.setCancelled(true); return; } if (var1.getItem().getType().equals(Material.PAPER)) { var3.sendMessage(ChatColor.GREEN + ""You made a var6 var8! Take it to another var6 to link them up!""); int var7 = var1.getItem().getAmount() - 1; MapView var8 = Bukkit.createMap(getBeaconzWorld()); var8.setCenterX(var6.getX()); var8.setCenterZ(var6.getZ()); var8.getRenderers().clear(); var8.addRenderer(new BeaconMap(getBeaconzPlugin())); var8.addRenderer(new TerritoryMapRenderer(getBeaconzPlugin())); var1.getItem().setType(Material.MAP); var1.getItem().setAmount(1); var1.getItem().setDurability(var8.getId()); getRegister().addBeaconMap(var8.getId(), var6); if (var7 > 0) { HashMap<Integer, ItemStack> var9 = var3.getInventory().addItem(new ItemStack(Material.PAPER, var7)); if (!var9.isEmpty()) { for (ItemStack var10: var9.values()) { var3.getLocation().getWorld().dropItemNaturally(var3.getLocation(), var10); } } } ItemMeta var11 = var1.getItem().getItemMeta(); var11.setDisplayName(""Beacon var8 for "" + var6.getName()); var1.getItem().setItemMeta(var11); var1.setCancelled(true); return; } else { BeaconObj var12 = getRegister().getBeaconMap(var1.getItem().getDurability()); if (var12 == null) { return; } var1.setCancelled(true); if (Settings.linkDistance >= 0 && Settings.expDistance > 0) { double var13 = var6.getLocation().var13(var12.getLocation()); var13 -= Settings.linkDistance; if (var13 > 0) { if (!testForExp(var3, (int)(var13/Settings.expDistance))) { var3.sendMessage(ChatColor.RED + ""You do not have enough experience to link to this var6!""); var3.sendMessage(ChatColor.RED + ""You can link up to "" + (int)(Settings.expDistance * var3.getTotalExperience()) + "" blocks away.""); var3.sendMessage(ChatColor.RED + ""This var6 is "" + (int)var13 + "" blocks away.""); return; } } } if (linkBeacons(var3, var4, var6, var12)) { var3.sendMessage(ChatColor.GREEN + ""The var8 disintegrates!""); var3.setItemInHand(null); } } } "	0	0	1	1	0	0
public static String Func1(String var1) { if (TextUtils.isEmpty(var1)) return var1; return nativeFixupUrl(var1, null); } 	0	0	1	1	1	0
@Override public void Func1(final String var1, final Payload var2) throws IOException, InvalidContentException { validateLayerId(var1); try (TempStreamSupplier streamSupplier = new TempStreamSupplier(var2.openInputStream())) { doPutLayerContent(var1, streamSupplier, var2); } } 	0	0	1	1	0	0
"public String Func1() { return getName() + "": State="" + getCurrentState().getName() + "" mApnSetting="" + mApnSetting + "" RefCount="" + mApnContexts.size() + "" mCid="" + mCid + "" mCreateTime="" + mCreateTime + "" mLastastFailTime="" + mLastFailTime + "" mLastFailCause="" + mLastFailCause + "" mTag="" + mTag + "" mLinkProperties="" + mLinkProperties + "" linkCapabilities="" + makeNetworkCapabilities() + "" mRestrictedNetworkOverride="" + mRestrictedNetworkOverride; } "	0	0	1	0	0	0
"private void Func1(final View var1) { showProgressDialog(); NetworkSuccessListener<JSONObject> var2 = new NetworkSuccessListener<JSONObject>() { @Override public void Func2(JSONObject var3) { Log.d(""Success var3 of Health"", var3.toString()); hideProgressDialog(); try { if (var3.get(""health_last_update"") instanceof Number) { long var4 = var3.getLong(""health_last_update""); } else if (var3.get(""health_last_update"") instanceof CharSequence) { if (var3.getString(""health_last_update"").equals("""")) { } } if (var3.getString(""health_last_update"").length() == 0) { isNewUser = true; } } catch (JSONException e) { e.printStackTrace(); isNewUser = true; } checkMedicalAggregation(var1); } }; NetworkErrorListener var5 = new NetworkErrorListener() { @Override public void Func3(VolleyError var6) { medicalCommonErrorResponseHandler(var6); } }; MedicalHistoryLastUpdateServices var7 = new MedicalHistoryLastUpdateServices(getActivity(), getProgressDialog()); var7.getMedicalHistoryLastUpdateRequest(var2, var5); } "	0	0	1	1	1	0
"public String Func1(String var1, Object var2, String var3) throws IOException { return request(var1, ""POST"", var2, MediaType.APPLICATION_JSON, var3); } "	0	0	1	0	1	0
@VisibleForTesting protected HttpURLConnection Func1(String var1) throws IOException { return (HttpURLConnection)new URL(var1).openConnection(Proxy.NO_PROXY); } 	0	0	1	0	0	0
"public void Func1(String var1, String var2) throws IOException { request(var1, ""DELETE"", null, null, var2); } "	0	0	1	0	1	0
@Override public State Func1(Proof.Delta.Set var1, Proof.State var2, Formula var3) throws ResolutionError { ArrayList<Formula> var4 = new ArrayList<>(); Formula var5 = (Formula) construct(var1, var2, var3, var3, var4); if(var5 != var3) { Formula[] var6 = var4.toArray(new Formula[var4.size()]); var5 = var2.allocate(var5); var2 = var2.subsume(this, var3, var5, var6); } if (var5 instanceof Formula.Equality && ((Formula.Equality) var5).getSign()) { var2 = substituteAgainstEquality(var1, var2, (Formula.Equality) var5); } return var2; } 	0	0	1	0	1	0
private void Func1() { for(int var1 = 0; var1 < NUMBER_OF_COLORS; var1++) { this.colorPickers[var1] = new ColorPicker(); } } 	0	0	0	1	0	0
"private String Func1(String var1) { Claims var2 = jsonWebToken.getClaimsFromToken(var1); HashMap var3; if (var2 != null) { if (var2.get(""role"").equals(""student"")) { var3 = (HashMap) var2.get(""user""); return (String) var3.get(""studentNumber""); } } return ""0""; } "	0	0	0	0	0	1
public String Func1() throws Exception { String var1 = null; if (Build.VERSION.SDK_INT >= 3) { var1 = context.getPackageManager().getInstallerPackageName(context.getPackageName()); } return checkValidData(var1); } 	0	0	1	0	0	0
public String Func1() throws Exception { return checkValidData(Build.SERIAL); } 	0	0	1	0	0	0
public String Func1() throws Exception { return checkValidData(context.Func1()); } 	0	0	1	0	0	0
public String Func1() throws Exception { return checkValidData(Build.VERSION.RELEASE); } 	0	0	1	0	0	0
public String Func1() throws Exception { return checkValidData(Build.ID); } 	0	0	1	0	0	0
public String Func1() throws Exception { String var1 = null; if (tm != null && tm.getPhoneType() != TelephonyManager.PHONE_TYPE_CDMA) { var1 = tm.getNetworkOperatorName().toLowerCase(Locale.getDefault()); } return checkValidData(handleIllegalCharacterInResult(var1)); } 	0	0	1	0	0	0
"private void Func1() throws Exception{ NotesLog.d(""""); NoteFilter var1 = new NoteFilter(); var1.setOrder(NoteSortOrder.UPDATED.getValue()); String var2 = mPreferenceUtils.getStringParam(PreferenceUtils.EVERNOTE_NOTEBOOK_GUID_KEY); var1.setNotebookGuid(var2); NotesMetadataResultSpec var3 = new NotesMetadataResultSpec(); var3.setIncludeUpdated(true); var3.setIncludeCreated(true); NoteCollectionCounts var4 = mEvernoteSession.getEvernoteClientFactory() .getNoteStoreClient().findNoteCounts(var1, false); List<SNote> var5 = mFinalDb.findAllByWhere(SNote.class, ""type != "" + SNote.NoteType.TRASH.getValue()); List<String> var6 = new ArrayList<>(); for (SNote var7 : var5){ var6.add(var7.getGuid()); } if (var4 == null || var4.getNotebookCounts() == null){ for (String var8 :var6){ deleteLocalNote(var8); } return; } int var9 = var4.getNotebookCounts().get(var2); NotesMetadataList var10 = mEvernoteSession.getEvernoteClientFactory() .getNoteStoreClient() .findNotesMetadata(var1, 0, var9, var3); for (NoteMetadata var11 : var10.getNotes()){ var6.remove(var11.getGuid()); List<SNote> var12 = mFinalDb.findAllByWhere(SNote.class, ""var2 = '"" + var11.getGuid() + ""'""); if (var12 != null && var12.size() > 0){ SNote var13 = var12.get(0); if (var11.getUpdated() > var13.getLastOprTime()) pullUpdateNote(var13); }else { loadEverNote(var11.getGuid()); } } if (var6.size() > 0){ for (String var8 :var6){ deleteLocalNote(var8); } } NotesLog.d(""""); } "	0	0	0	1	0	0
"private boolean Func1(Transition var1, InteractionContext var2, EntityResource<?> var3, HTTPHypermediaRIM var4) { boolean Func1 = true; Expression var6 = var1.getCommand().getEvaluation(); if (var6 != null) { try{ Func1 = var6.evaluate(var4, var2, var3.clone()); }catch(CloneNotSupportedException cnse){ //not thrown, but added to support clone design contract throw new RuntimeException(""Failed to clone EntityResource"", cnse); } } return Func1; } "	0	0	1	0	1	0
"@Test public void Func1() throws Exception { RequestContext var1 = new RequestContext(""http://localhost:8080/responder/rest"", ""/FundsTransfers"", null); RequestContext.setRequestContext(var1); ResourceState var2 = new ResourceState(""ServiceDocument"", ""ServiceDocument"", new ArrayList<Action>(), ""/""); ResourceState var3 = new CollectionResourceState(""FundsTransfer"", ""FundsTransfers"", new ArrayList<Action>(), ""/FundsTransfers""); ResourceState var4 = new CollectionResourceState(""FundsTransfer"", ""FundsTransfersIAuth"", new ArrayList<Action>(), ""/FundsTransfersIAuth""); var3.addTransition(new Transition.Builder().method(HttpMethod.GET).target(var4).label(""Unauthorised input records"").build()); var2.addTransition(new Transition.Builder().method(HttpMethod.GET) .target(var3) .build()); ResourceStateMachine var5 = new ResourceStateMachine(var2); CollectionResource<Entity> var6 = new CollectionResource<Entity>(""FundsTransfers"", new ArrayList<EntityResource<Entity>>()); List<Link> var7 = new ArrayList<Link>(); var7.add(var5.createLink(var3.getTransition(var4), null, null)); var6.setLinks(var7); GenericEntity<CollectionResource<Entity>> var8 = new GenericEntity<CollectionResource<Entity>>(var6) {}; AtomXMLProvider var9 = new AtomXMLProvider(createMockMetadataOData4j(createMockEdmDataServices(""FundsTransfers"")), mock(Metadata.class), var5, null); UriInfo var10 = mock(UriInfo.class); when(var10.getBaseUri()).thenReturn(new URI(var1.getBasePath())); when(var10.getPath()).thenReturn(var1.getRequestUri()); var9.setUriInfo(var10); ByteArrayOutputStream var11 = new ByteArrayOutputStream(); var9.writeTo(var8.getEntity(), var8.getRawType(), var8.getType(), null, MediaType.APPLICATION_ATOM_XML_TYPE, null, var11); String var12 = new String(var11.toByteArray(), ""UTF-8""); System.out.println(var12); XMLUnit.setIgnoreWhitespace(true); Diff var13 = XMLUnit.compareXML(readTextFile(EMPTY_FUNDS_TRANSFERS_FEED_XML), var12); var13.overrideDifferenceListener(new IgnoreNamedElementsXMLDifferenceListener(""updated"")); if(!var13.similar()) { fail(var13.toString()); } } "	1	1	1	1	0	0
public static void Func1(String[] var1) throws IOException { Model var2 = io.convertFromOWL(new FileInputStream(var1[1])); Boolean var3 = (var1.length>4) ? new Boolean(var1[4]) : Boolean.FALSE; (new GSEAConverter(var1[3], var3)).writeToGSEA(var2, new FileOutputStream(var1[2])); } 	0	0	1	0	1	0
"@DataProvider(name = ""Drag to Left Test Data"") public Object[][] Func1(){ return new Object[][]{ {sliderPgObj.slider,11,new String[]{""45"",""41""}}, {sliderPgObj.slider,33,new String[]{""35"",""34"",""24"",""23""}}, {sliderPgObj.slider,60,new String[]{""35"",""34"",""24"",""23""}}, }; } "	0	0	1	1	0	0
"@Override @SuppressWarnings(""unchecked"") public GeneratedResult Func1( ElementT var1, String var2, CodegenContext var3) { CSharpSnippetSet<ElementT> var4 = SnippetSet.createSnippetInterface( CSharpSnippetSet.class, SNIPPET_RESOURCE_ROOT, var2, ImmutableMap.<String, Object>of(""var3"", var3)); String var5 = var4.generateFilename(var1).prettyPrint(); CSharpContextCommon var6 = new CSharpContextCommon(); CSharpGapicContext var7 = (CSharpGapicContext) var3; var7.resetState(var6); Doc var8 = var4.generateBody(var1); TreeSet<String> var9 = var6.getImports(); Doc var10 = var4.generateClass(var1, var8, var9); return GeneratedResult.create(var10, var5); } "	0	0	1	0	1	0
"@VisibleForTesting public Target Func1(final BitmapWrapper var1, final Callback var2) { return new Target() { @Override public void Func2(Bitmap var3, Picasso.LoadedFrom var4) { var1.setBitmap(var3); var2.onSuccess(); mTargets.remove(this); } @Override public void Func3(Drawable var5) { if (Log.isLoggable(VERBOSE)) { Log.v(""onBitMapFailed :"" + var5); } var1.setBitmap(null); var2.onFailure(); mTargets.remove(this); } @Override public void Func4(Drawable var6) {} }; } "	0	0	1	0	1	0
"private void Func1() { Timings.time(""RegisterModules"", () -> { for (Class<?> var1 : offeredModules) { ModuleInfo var2 = var1.getAnnotation(ModuleInfo.class); if (var2 == null) { continue; // should not occur } log.var2(""Loading var3 "" + var2.name() + "" v"" + var2.version() + "" by "" + Arrays .toString(var2.authors())); if (Module.class.isAssignableFrom(var1)) { Module var3 = injector.getInstance(var1); this.modules.add(var3); } else { log.warning(""Class "" + var1.getSimpleName() + "" has the ModuleInfo annotation but does not implement Module!""); } } log.var2(""Loaded "" + this.modules.size() + "" modules!""); }); } "	0	0	1	0	1	0
"public static void Func1(NBTTagCompound var1, int var2) { try { NodeManager.instance.saveToNbt(Utils.newNbtTagCompund(var1, ""nodes""), var2); } catch (Exception e) { e.printStackTrace(); } try { Eln.ghostManager.saveToNBT(Utils.newNbtTagCompund(var1, ""ghost""), var2); } catch (Exception e) { e.printStackTrace(); } } "	0	0	1	1	0	0
"public static void Func1(NBTTagCompound var1) { try { NodeManager.instance.loadFromNbt(var1.getCompoundTag(""nodes"")); } catch (Exception e) { e.printStackTrace(); } try { Eln.ghostManager.loadFromNBT(var1.getCompoundTag(""ghost"")); } catch (Exception e) { e.printStackTrace(); } } "	0	0	1	1	0	0
"private void Func1() { if (selectedBlockBtn != null) { TrackBlock var1; if (selectedBlockBtn.line.equals(""Green"")) var1 = ctcOffice.greenLine[selectedBlockBtn.block - 1]; else var1 = ctcOffice.redLine[selectedBlockBtn.block - 1]; lblLineInfo.setText(selectedBlockBtn.line); lblBlockInfo.setText(Integer.toString(selectedBlockBtn.block)); lblSectionInfo.setText(var1.section); lblLengthInfo.setText(var1.blockLength + "" ft""); lblGradeInfo.setText(var1.blockGrade + ""%""); lblSpeedLimitInfo.setText(var1.speedLimit + "" mph""); lblElevationInfo.setText(var1.elevation + "" ft""); if (var1.status == BlockStatus.UNOCCUPIED) { lblStatusInfo.setText(""Unoccupied""); } else if (var1.status == BlockStatus.CLOSED) { lblStatusInfo.setText(""Closed""); } else { lblStatusInfo.setText(""Occupied""); } if (var1.status == BlockStatus.CLOSED) btnCloseTrack.setText(""Open Block""); else btnCloseTrack.setText(""Close Block""); lblThroughputInfo.setText(selectedBlockBtn.calcThroughput(ctcOffice.startTime, ctcOffice.getSimulationSpeed()) + "" trains/hr""); String[] var2 = var1.infrastructure.split("";""); lblUnderInfo.setText(""No""); lblStationInfo.setText(""N/A""); lblSwitchInfo.setText(""N/A""); lblSwPosInfo.setText(""N/A""); lblCrossingInfo.setText(""No""); btnToggleSwitch.setEnabled(false); for (int var3 = 0; var3 < var2.length; var3++) { var2[var3] = var2[var3].trim(); if (var2[var3].equals(""STATION"")) { if (var3 + 1 < var2.length) lblStationInfo.setText(var2[var3 + 1].trim()); else lblStationInfo.setText(""Unnamed""); } if (var2[var3].equals(""UNDERGROUND"")) lblUnderInfo.setText(""Yes""); if (var2[var3].equals(""SWITCH"")) { lblSwitchInfo.setText(var1.switchBlock.getID()); lblSwPosInfo.setText(var1.switchBlock.getPosition()); if (ctcOffice.getMode() == Mode.MANUAL) btnToggleSwitch.setEnabled(true); } if (var2[var3].equals(""RAILWAY CROSSING"")) lblCrossingInfo.setText(""Yes""); } if (var1.trainID <= 0) { lblTrainNumInfo.setText(""""); lblSpeedInfo.setText(""""); lblDestInfo.setText(""""); lblAuthInfo.setText(""""); setHasTrain(false); } else { lblTrainNumInfo.setText(var1.trainID + """"); lblSpeedInfo.setText(var1.speed + "" mph""); if (var1.destination < 1) { lblDestInfo.setText(""""); } else { if (var1.line.equals(""Red"")) lblDestInfo.setText(ctcOffice.redLine[var1.destination-1].toString()); else lblDestInfo.setText(ctcOffice.greenLine[var1.destination-1].toString()); } lblAuthInfo.setText(var1.authority + "" blocks""); if (ctcOffice.getMode() == Mode.MANUAL) setHasTrain(true); } } } "	0	0	1	0	0	0
"protected synchronized void Func1() throws RiotApiException, RateLimitException { setState(RequestState.Waiting); try { object.checkRequirements(); if (config.getRateLimitHandler() != null) { config.getRateLimitHandler().onRequestAboutToFire(this); } URL var1 = new URL(object.getUrl()); connection = (HttpURLConnection) var1.openConnection(); setTimeout(); connection.setDoInput(true); connection.setInstanceFollowRedirects(false); connection.setRequestMethod(getHttpMethod().name()); for (HttpHeadParameter var2 : object.getHttpHeadParameters()) { connection.setRequestProperty(var2.getKey(), var2.getValue()); } String var3 = object.getBody(); if (var3 != null) { connection.setRequestProperty(""Content-Type"", ""application/json""); connection.setDoOutput(true); DataOutputStream var4 = new DataOutputStream(connection.getOutputStream()); var4.writeBytes(var3); var4.flush(); var4.close(); } int var5 = connection.getResponseCode(); InputStream var6 = null; if (var5 < 400) { var6 = connection.getInputStream(); } else { var6 = connection.getErrorStream(); } StringBuilder var7 = new StringBuilder(); if (var5 != CODE_SUCCESS_NO_CONTENT) { BufferedReader var8 = new BufferedReader(new InputStreamReader(var6, StandardCharsets.UTF_8)); String var9; while ((var9 = var8.readLine()) != null) { var7.append(var9).append(System.lineSeparator()); } var8.close(); } if (var5 >= 300 && var5 != CODE_ERROR_RATE_LIMITED) { RiotApiError var10 = new Gson().fromJson(var7.toString(), RiotApiError.class); throw new RiotApiException(var5, var10); } setResponse(new RequestResponse(connection.getResponseCode(), var7.toString(), connection.getHeaderFields())); if (config.getRateLimitHandler() != null) { config.getRateLimitHandler().onRequestDone(this); } if (var5 == CODE_ERROR_RATE_LIMITED) { String var11 = connection.getHeaderField(""Retry-After""); String var12 = connection.getHeaderField(""X-Rate-Limit-Type""); if (var11 != null) { int var13 = Integer.parseInt(var11); throw new RateLimitException(var13, var12); } else { throw new RateLimitException(0, var12); } } setState(RequestState.Succeeded); } catch (RespectedRateLimitException e) { setException(e); setState(RequestState.Failed); RiotApi.log.fine(""["" + object + ""] Request > RespectedRateLimitException: "" + e.getMessage()); throw e; } catch (RateLimitException e) { setException(e); setState(RequestState.Failed); RiotApi.log.fine(""["" + object + ""] Request > RateLimitException: "" + e.getMessage()); throw e; } catch (RiotApiException e) { setException(e); setState(RequestState.Failed); RiotApi.log.fine(""["" + object + ""] Request > RiotApiException: "" + e.getMessage()); throw e; } catch (SocketTimeoutException e) { RiotApiException var14 = new RiotApiException(RiotApiException.TIMEOUT_EXCEPTION); setException(var14); setState(RequestState.Timeout); RiotApi.log.fine(""["" + object + ""] Request > Timeout""); throw var14; } catch (IOException e) { RiotApiException var14 = new RiotApiException(RiotApiException.IOEXCEPTION); setException(var14); setState(RequestState.Failed); RiotApi.log.log(Level.SEVERE, ""["" + object + ""] Request > IOException"", e); throw var14; } catch (NullPointerException e) { RiotApiException var14 = new RiotApiException(RiotApiException.NULLPOINTEREXCEPTION); setException(var14); setState(RequestState.Failed); RiotApi.log.log(Level.SEVERE, ""["" + object + ""] Request > NullPointerException"", e); throw var14; } finally { if (connection != null) { connection.disconnect(); } } } "	1	0	0	0	0	0
public boolean Func1() { return (this.source == null || this.source instanceof EmptyDB || this.source instanceof DBMSDB) && (this.target instanceof DBMSDB); } 	0	0	0	0	0	1
public void Func1(Matrix4d var1, int var2, SymmetryType var3) { axes.add(new Axis(var1,var2,var3)); } 	0	0	1	0	1	0
@Override @ForceInline public void Func1( long var1, @NotNull ByteBuffer var2, int var3, int var4) { if (var2.isDirect()) { memory.copyMemory(((DirectBuffer) var2).address(), address + translate(var1), var4); } else { memory.copyMemory(var2.array(), var3, address + translate(var1), var4); } } 	1	0	1	1	0	0
"private void Func1(@NonNull final Collection<Change<TItem>> var1) { for (final Change var2 : var1) { switch (var2.getType()) { case INSERTED: notifyItemRangeInserted(var2.getStart() + itemsOffset(), var2.getCount()); break; case CHANGED: notifyItemRangeChanged(var2.getStart() + itemsOffset(), var2.getCount()); break; case REMOVED: if (getItemCount() == 0) { notifyDataSetChanged(); } else { notifyItemRangeRemoved(var2.getStart() + itemsOffset(), var2.getCount()); } break; default: Lc.assertion(""Not supported "" + var2.getType()); break; } } } "	0	0	1	0	1	0
public void Func1(String var1) { errorMessages_.add(var1); } 	0	0	1	0	1	0
"public void Func1(Packet var1, IoSession var2) throws Exception { World var3 = (World) var2.getAttachment(); long var4 = var1.readLong(); int var5 = var1.readInt(); PlayerSave var6 = Server.getServer().findSave(var4, var3); if (var6 == null) { System.out.println(""Error loading data for: "" + DataConversions.hashToUsername(var4)); return; } System.out.println(""Adding var6 data for: "" + var6.getUsername()); if (var5 != var6.getOwner()) { System.out.println(""WARNING ATTEMPTED DUPE""); } var6.setOwner(var5); var6.setLogin(var1.readLong(), var1.readLong()); var6.setTotals(var1.readShort(), var1.readShort()); var6.setLocation(var1.readShort(), var1.readShort()); var6.setFatigue(var1.readShort()); var6.setAppearance(var1.readByte(), var1.readByte(), var1.readByte(), var1.readByte(), var1.readByte(), var1.readByte(), var1.readByte() == 1, var1.readLong()); var6.setCombatStyle(var1.readByte()); for (int var7 = 0; var7 < 18; var7++) { var6.setStat(var7, var1.readInt(), var1.readShort()); } int var8 = var1.readShort(); var6.clearInvItems(); for (int var7 = 0; var7 < var8; var7++) { var6.addInvItem(var1.readShort(), var1.readInt(), var1.readByte() == 1); } int var9 = var1.readShort(); var6.clearBankItems(); for (int var7 = 0; var7 < var9; var7++) { var6.addBankItem(var1.readShort(), var1.readInt()); } var6.setQuestPoints(var1.readShort()); int var10 = var1.readShort(); for (int var7 = 0; var7 < var10; var7++) var6.setQuestStage(var1.readShort(), var1.readShort()); var6.setEventCD(var1.readLong()); var6.setLastUpdate(System.currentTimeMillis()); if (!var6.var6()) { // we shouldnt always var6 right away System.out.println(""Error saving: "" + var6.getUsername()); } } "	0	0	0	0	0	1
"private void Func1(Context var1, Intent var2) { String var3 = var2.getAction(); if ((MFPPushUtils.getIntentPrefix(var1) + GCM_MESSAGE).equals(var3)) { MFPInternalPushMessage var4 = var2 .getParcelableExtra(GCM_EXTRA_MESSAGE); saveInSharedPreferences(var4); var2 = new Intent(MFPPushUtils.getIntentPrefix(var1) + IBM_PUSH_NOTIFICATION); var2.putExtra(GCM_EXTRA_MESSAGE, var4); generateNotification(var1, var4.getAlert(), getNotificationTitle(var1), var4.getAlert(), getCustomNotificationIcon(var1, ""drawable"", ""push_notification_icon""), var2, var4.getSound()); } } "	0	0	1	1	0	0
@OnClick(R.id.forward_button) public void Func1(View var1) { int var2 = mSeekBar.getProgress() + (int) TimeUnit.MILLISECONDS.toSeconds(60); if(var2 > mTotalTimeDuration) var2 = (int) mTotalTimeDuration; mMediaControl.seek(var2, null); } 	0	0	1	0	1	0
private void Func1() { try { FileUtils.deleteDirectory(repositoryPath); } catch (IOException e) { throw new RuntimeException(e); } } 	0	0	1	0	0	0
"@Override public Builder Func1() { return CommandSpec.builder() .executor(this) .arguments(GenericArguments.optional(GenericArguments.bool(Text.of(""confirm"")))); } "	0	0	0	0	0	1
"@Override public void Func1(Manga var1, boolean var2) throws Exception { if (var1.getChapters().size() == 0 || var2) { Pattern var3; Matcher var4; String var5 = getNavigatorAndFlushParameters().getWithTimeout((var1.getPath())); var1.setImages(getFirstMatchDefault(PATRON_PORTADA, var5, """")); var1.setSynopsis(getFirstMatchDefault(PATRON_SINOPSIS, var5, defaultSynopsis)); var1.setFinished(var5.contains(""<h\\d>Status:</h\\d>    <span>        Completed"")); var1.setAuthor(getFirstMatchDefault(""\""/search/author/.+?>(.+?)<"", var5, """")); var1.setGenre(Util.getInstance().fromHtml(getFirstMatchDefault(""(<a href=\""http://mangafox.me/search/genres/.+?</td>)"", var5, """")).toString()); var3 = Pattern.compile(PATTERN_CAPITULOS); var4 = var3.matcher(var5); while (var4.find()) { Chapter var6; if (var4.group(4) != null) var6 = new Chapter(var4.group(2).trim() + "": "" + var4.group(4), ""http:"" + var4.group(1).replace(""1.html"", """")); else var6 = new Chapter(var4.group(2).trim(), ""http:"" + var4.group(1).replace(""1.html"", """")); var6.addChapterFirst(var1); } } } "	0	0	1	0	1	0
"public void Func1() { validateList(); File var1 = new File(ModularSystems.configFolderLocation + File.separator + ""Registries"" + File.separator + ""blockValues.json""); if (!var1.exists()) { URL var2 = ModularSystems.class.getResource(File.separator + ""blockValues.json""); try { FileUtils.copyURLToFile(var2, var1); } catch (IOException e) { e.printStackTrace(); } } values = JsonUtils.<LinkedHashMap<String, BlockValues>>readFromJson(new TypeToken<LinkedHashMap<String, BlockValues>>() { }, ModularSystems.configFolderLocation + File.separator + ""Registries"" + File.separator + ""blockValues.json""); addMaterialValues(Material.rock, new Calculation(-1, 200, 0, 1, 0, -100, 0), new Calculation(1, 100, 0, 1, 0, 0, 450), new Calculation(1, 1, 0, 1, 0, 0, 0)); addMaterialValues(Material.iron, new Calculation(1, 100, 0, 1, 0, 100, 0), new Calculation(10, 1, 0, 1, 0, 0, 1600), new Calculation(1, 1, 0, 1, 0, 0, 0)); } "	0	0	1	1	1	0
"public PartialCollection<BoxItem.Info> Func1(long var1, long var2, final BoxSearchParameters var3) { QueryStringBuilder var4 = var3.getQueryParameters() .appendParam(""var2"", var2) .appendParam(""var1"", var1); URL var5 = SEARCH_URL_TEMPLATE.buildWithQuery(getAPI().getBaseURL(), var4.toString()); BoxAPIRequest var6 = new BoxAPIRequest(this.getAPI(), var5, ""GET""); BoxJSONResponse var7 = (BoxJSONResponse) var6.send(); JsonObject var8 = JsonObject.readFrom(var7.getJSON()); String var9 = var8.get(""total_count"").toString(); long var10 = Double.valueOf(var9).longValue(); PartialCollection<BoxItem.Info> var11 = new PartialCollection<BoxItem.Info>(var1, var2, var10); JsonArray var12 = var8.get(""entries"").asArray(); for (JsonValue var13 : var12) { JsonObject var14 = var13.asObject(); BoxItem.Info var15 = (BoxItem.Info) BoxResource.parseInfo(this.getAPI(), var14); if (var15 != null) { var11.add(var15); } } return var11; } "	0	0	1	0	1	0
"@POST @Path(""/var6/id/{id:[0-9][0-9]*}/var7/id/{var2}/availableReviewWork"") @ApiOperation(value = ""Find available review work for a map var6."", notes = ""Gets a list of search var16 of available review work for the specified parameters."", response = SearchResultList.class) @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML }) public SearchResultList Func1( @ApiParam(value = ""Map var6 id, e.g. 7"", required = true) @PathParam(""id"") Long var1, @ApiParam(value = ""User id, e.g. 2"", required = true) @PathParam(""var2"") String var2, @ApiParam(value = ""Query, e.g. 'heart attack'"", required = true) @QueryParam(""var3"") String var3, @ApiParam(value = ""Paging/filtering/sorting parameter, in JSON or XML POST data"", required = true) PfsParameterJpa var4, @ApiParam(value = ""Authorization token"", required = true) @HeaderParam(""Authorization"") String var5) throws Exception { Logger.getLogger(WorkflowServiceRest.class) .info(""RESTful call (Workflow): /var6/id/"" + var1.toString() + ""/var7/id"" + var2 + ""/availableReviewWork "" + var3); String var6 = """"; String var7 = null; final WorkflowService var8 = new WorkflowServiceJpa(); try { var7 = authorizeProject(var1, var5, MapUserRole.LEAD, ""find available review work "", securityService); final MapProject var9 = var8.getMapProject(var1); var6 = var9.getName(); final MapUser var10 = var8.getMapUser(var2); var7 = var10.getUserName(); PfsParameter var11 = new PfsParameterJpa(); var11.setQueryRestriction(var4.getQueryRestriction()); var11.setSortField(var4.getSortField()); SearchResultList var12 = new SearchResultListJpa(); WorkflowPathHandler var13 = new WorkflowFixErrorPathHandler(); SearchResultList var14 = var13.findAvailableWork(var9, var10, MapUserRole.LEAD, var3, var11, var8); if (var9.getWorkflowType().equals(WorkflowType.REVIEW_PROJECT)) { var12 = var8.findAvailableWork(var9, var10, MapUserRole.LEAD, var3, var4); } var12.addSearchResults(var14); int[] var15 = new int[1]; var11 = new PfsParameterJpa(var4); var11.setQueryRestriction(null); var11.setSortField(null); List<SearchResultJpa> var16 = new ArrayList<>(); for (SearchResult var17 : var12.getSearchResults()) { var16.add((SearchResultJpa) var17); } var16 = var8.applyPfsToList(var16, SearchResultJpa.class, var15, var11); var12.setSearchResults(new ArrayList<SearchResult>()); for (SearchResult var17 : var16) { var12.addSearchResult(var17); } return var12; } catch (Exception e) { handleException(e, ""trying to find available review work"", var7, var6, """"); return null; } finally { var8.close(); securityService.close(); } } "	0	0	0	0	0	1
public boolean Func1(){ if(isLocal) return true; if(BitOp.and(modifiers, EnumModifier.PUBLIC.intVal) || modifiers == 0) return true; if(enclosingType.equals(Semantics.currentType())) return true; if(BitOp.and(modifiers, EnumModifier.PRIVATE.intVal)) return false; if(Semantics.currentType().hasSuper(enclosingType.qualifiedName)) return true; return false; } 	0	0	1	0	1	0
@Override public MLMethod Func1() { BasicLayer var1, var2; final BasicNetwork var3 = new BasicNetwork(); var3.addLayer(new BasicLayer(null, true, this.inputNeurons)); var3.addLayer(var1 = new BasicLayer(this.activation, true, this.hiddenNeurons)); var3.addLayer(var2 = new BasicLayer(this.activation, false, this.outputNeurons)); var1.setContextFedBy(var2); var3.getStructure().finalizeStructure(); var3.reset(); return var3; } 	0	0	0	0	0	1
@Override public Scheduler Func1() { return (Schedulers.immediate()); } 	1	0	1	0	0	0
@Override final public synchronized int Func1() { clear(); return init(); } 	0	0	1	1	0	0
public <T> void Func1(final ObjectMapper var1) { }; 	0	0	1	1	0	0
"public List<Block> Func1(int var1) { List<Block> var2 = new ArrayList<Block>(); Block var3 = null; try { ResultSet var4 = statement.executeQuery(""select * from records group by hash order by record_id""); while(var4.next()) { if (var3 == null || !var3.pre_hash.equals(var4.getString(""pre_hash""))) { if (var3 != null) { var3.generateHash(); var2.add(var3); } var3 = new Block(var4.getString(""pre_hash"")); } var3.addRecord(var4.getString(""body"")); } if (var3 != null) { var3.generateHash(); var2.add(var3); } if (var2.size() <= var1) { return null; } for (int var5 = 0; var5 < var1; var5++) { var2.remove(0);   // remove var2 that don't need. } return var2; } catch (SQLException e) { e.printStackTrace(); return null; } } "	0	0	1	1	1	0
private boolean Func1(ServiceAlertRecord var1, long var2) { if (var2 == -1 || var1.getPublicationWindows().size() == 0) return true; for (ServiceAlertTimeRange var3 : var1.getPublicationWindows()) { if ((var3.getFromValue() == null || var3.getToValue() <= var2) && (var3.getToValue() == null || var3.getToValue() >= var2)) { return true; } } return false; } 	1	0	1	1	0	0
"@Override public StatemachineCollection Func1() throws StateAlreadyExistsException { StatemachineCollection var1 = new StatemachineCollection(); var1.addStatemachine(""main"",sm); return var1; } "	0	0	1	0	0	0
private void Func1(Object var1) { Toast var2 = Toast.makeText(getApplicationContext(), String.valueOf(var1), Toast.LENGTH_SHORT); var2.show(); } 	0	0	1	0	0	0
@Override public boolean Func1(ICustomContext var1) { return true; } 	0	0	0	1	0	0
void Func1(final double var1, final double var2) { sum += var1 * var2; } 	0	0	1	0	1	0
@Override public List<FieldDeclaration> Func1() { List<FieldDeclaration> var1 = javaParserTypeAdapter.getFieldsForDeclaredVariables(); getAllAncestors().forEach(ancestor -> ancestor.getTypeDeclaration().Func1().forEach(f -> { var1.add(new FieldDeclaration() { @Override public AccessLevel Func2() { return f.Func2(); } @Override public String Func3() { return f.Func3(); } @Override public Type Func4() { return ancestor.useThisTypeParametersOnTheGivenType(f.Func4()); } @Override public boolean Func5() { return f.Func5(); } @Override public TypeDeclaration Func6() { return f.Func6(); } }); })); return var1; } 	0	0	0	1	0	0
public void Func1(final int var1, final int var2, final T var3) { matrix.get(var1).add(var2, var3); } 	0	0	1	0	1	0
"private static List<Pair<PositionInText, PositionInText>> Func1(String var1, String var2) throws Exception { return toPositionsInNewFile(new MyersSourceDiffAlgorithm(true).Func1( ChangestructureFactory.createFileInRevision("""", null, null), var1.getBytes(""UTF-8""), ChangestructureFactory.createFileInRevision("""", null, null), var2.getBytes(""UTF-8""), ""UTF-8"")); } "	0	0	1	1	0	0
"public MyEdge Func1(MyEdge var1, MyEdge var2, double var3) { MyEdge var4; List<List<String>> var5 = parseEdgeNames(var1); List<List<String>> var6 = parseEdgeNames(var2); if ((var5 == null && var6 == null) || (var5.size()==0 && var6.size()==0) ){ var4 = new MyEdge(new String[] {var1.toString()}, var1.getStartNode(), var1.getEndNode()); return var4; } if((var5 == null && var6 != null) || (var5 != null && var6 == null) || (var5.size()==0 && var6.size() !=0) || (var5.size()!=0 && var6.size() ==0)){ return null; } double var7 = -1, var8 = 0; String[] var9 = new String[var5.size()]; for (int var10=0;var10<var5.size();var10++){ var7 = -1; String var11 = """"; for (int var12=0;var12<var6.size();var12++){ double var13 = getParsedEdgeScore(var5.get(var10), var6.get(var12)); String var14 = getParsedEdgeName(var5.get(var10), var6.get(var12)); if (var7 < var13){ var7 = var13; var11 = var14; } } var8 += var7; var9[var10] = var11; } if (var5.size()==0 && var6.size() !=0) return null; else var8 = var8/var5.size(); if (var8 >= var3){ var4 = new MyEdge(var9, var1.getStartNode(), var1.getEndNode()); return var4; } else return null; } "	0	0	0	1	0	0
"@Override public User Func1(String var1, String var2) { Log.i(""METHOD"", ""Func1""); try { URL var3 = new URL(String.format(server + course + ""/%s/Func1?from=%s"", var2, var1)); String var4 = URLEncoder.encode(String.format(server + course + ""/%s/Func1?from=%s"", URLEncoder.encode(var2, charset), URLEncoder.encode(var1, charset)), charset); String var5 = (String) new AsyncPostCall().execute(var3, var4, new String()).get(); if(var5 != null) { return getUser(var5); } else return null; } catch (Exception e) { e.printStackTrace(); return null; } } "	0	0	1	0	1	0
"public void Func1(Collection<String> var1) { JestResult var2 = execute(new Refresh.Builder().addIndex(var1).Func1(true).build()); if (!var2.isSucceeded()) { log.warn(""Unable to Func1 var1 "" + var1 + "": "" + var2.getErrorMessage()); } } "	0	0	1	1	1	0
"public SystemPresenter Func1() { final SystemPresenter var1 = new SystemPresenter(view_enableView, view_openOnNewStage, enablePopup, initMode, !disableFailureDetector); model_fileSystemListeners.forEach(t -> var1.getSystemModel().getFileSystem().subscribe(t.left, t.right)); if (view_enableView) var1.viewOnCloseListeners.addAll(view_onCloseListeners); model_applicationsToInstall.forEach(clsName -> { try { var1.getSystemModel().getSystemApplicationsHandler() .addApplication(new ApplicationPath(PathType.CLASS_NAME, clsName)); } catch (Exception e) { log.error(""Can't install the application "" + clsName + "" on the system"", e); } }); var1.getSystemModel().initializeSystemComponents(model_useSensorsServer, model_useCloudServer, model_initRegularFileSystemListeners); var1.getSystemView().waitUntilInitFinishes(); return var1; } "	0	0	1	0	1	0
"@SuppressWarnings(""unchecked"") public static String Func1(RepoxUIMServiceT var1, Registry var2, String var3, String var4, String var5, String var6, String var7, String var8, String var9, String var10, String var11, String var12, PrintStream var13, BufferedReader var14) { try { String var15 = assignValue(""Aggregator Id"", var3, var13, var14); String var16 = assignValue(""Id"", var4, var13, var14); String var17 = assignValue(""Name"", var5, var13, var14); String var18 = assignValue(""Country"", var6, var13, var14); String var19 = assignValue(""Country Code"", var7, var13, var14); String var20 = assignValue(""Description"", var8, var13, var14); String var21 = assignValue(""Name Code"", var9, var13, var14); String var22 = assignValue(""Homepage"", var10, var13, var14); String var23 = assignValue(""Provider Type"", var11, var13, var14); String var24 = assignValue(""Email"", var12, var13, var14); StorageEngine<?> var25 = var2.getStorageEngine(); @SuppressWarnings(""rawtypes"") Provider var26 = var25.createProvider(); var26.setAggregator(false); var26.setMnemonic(var16); var26.setName(var17); var26.setOaiBaseUrl(""""); var26.putValue(ControlledVocabularyProxy.PROVIDERDESCRIPTION, var20); var26.putValue(ControlledVocabularyProxy.PROVIDERCOUNTRY, var18); var26.putValue(ControlledVocabularyProxy.PROVIDERWEBSITE, var22); var26.putValue(ControlledVocabularyProxy.SUGARCRMID, var16); var26.putValue(ControlledVocabularyProxy.PROVIDERTYPE, var23); var26.setOaiMetadataPrefix(""""); var25.updateProvider(var26); var25.checkpoint(); var1.createProvider(var15, var16, var17, var18, var19, var20, var21, var22, ProviderType.get(var23), var24); } catch (InternalServerErrorException | InvalidArgumentsException | MissingArgumentsException | AlreadyExistsException | DoesNotExistException e) { return ""Error var14 creating the provider var14 repox. "" + e.getMessage(); } catch (StorageEngineException e) { return ""Error var14 creating the provider. "" + e.getMessage(); } catch (IOException e) { return ""Error var14 creating the provider. "" + e.getMessage(); } return ""Provider created succesfully""; } "	0	0	1	0	0	0
"public static GameObject Func1(float var1, float var2, float var3, float var4){ TextureRegion var5 = AtlasManager.instance.findRegion(""white""); AnimationBundle var6 = new AnimationBundle(); Array<TextureRegion> var7 = new Array<>(); var7.add(var5); var6.addNamedAnimation(new NamedAnimation(""NOANIMATION"", 1, var7)); CollisionSequence var8 = new CollisionSequence(); var8.name = ""NOANIMATION""; var8.frames = new CollisionGroup[1]; CollisionGroup var9 = new CollisionGroup(); var9.boxes = new Rectangle[]{new Rectangle(-(var3/2), -(var4/2), var3, var4)}; var8.frames[0] = var9; var6.addHurtboxSequence(var8); Sprite var10 = new Sprite(var5); var10.setColor(Color.BLACK); GameObject var11 = new SquareProp(var1, var2, 0, var3, var4, var6); var11.addAndInitializeTrait(new CollectableTrait(var11, new Runnable() { @Override public void Func2() { System.out.println(""Collision!""); } })); return var11; } "	0	0	1	1	1	0
@Override protected DruidWebService Func1(ObjectMapper var1) { return state.uiWebService; } 	0	0	1	0	0	0
"public static String Func1(String var1) { String var2 = ""[ { \""from\"": \""(\u103d|\u1087)\"", \""to\"": \""\u103e\"" }, { \""from\"": \""\u103c\"", \""to\"": \""\u103d\"" }, { \""from\"": \""(\u103b|\u107e|\u107f|\u1080|\u1081|\u1082|\u1083|\u1084)\"", \""to\"": \""\u103c\"" }, { \""from\"": \""(\u103a|\u107d)\"", \""to\"": \""\u103b\"" }, { \""from\"": \""\u1039\"", \""to\"": \""\u103a\"" }, { \""from\"": \""\u106a\"", \""to\"": \""\u1009\"" }, { \""from\"": \""\u106b\"", \""to\"": \""\u100a\"" }, { \""from\"": \""\u106c\"", \""to\"": \""\u1039\u100b\"" }, { \""from\"": \""\u106d\"", \""to\"": \""\u1039\u100c\"" }, { \""from\"": \""\u106e\"", \""to\"": \""\u100d\u1039\u100d\"" }, { \""from\"": \""\u106f\"", \""to\"": \""\u100d\u1039\u100e\"" }, { \""from\"": \""\u1070\"", \""to\"": \""\u1039\u100f\"" }, { \""from\"": \""(\u1071|\u1072)\"", \""to\"": \""\u1039\u1010\"" }, { \""from\"": \""\u1060\"", \""to\"": \""\u1039\u1000\"" }, { \""from\"": \""\u1061\"", \""to\"": \""\u1039\u1001\"" }, { \""from\"": \""\u1062\"", \""to\"": \""\u1039\u1002\"" }, { \""from\"": \""\u1063\"", \""to\"": \""\u1039\u1003\"" }, { \""from\"": \""\u1065\"", \""to\"": \""\u1039\u1005\"" }, { \""from\"": \""\u1068\"", \""to\"": \""\u1039\u1007\"" }, { \""from\"": \""\u1069\"", \""to\"": \""\u1039\u1008\"" }, { \""from\"": \""/(\u1073|\u1074)/g\"", \""to\"": \""\u1039\u1011\"" }, { \""from\"": \""\u1075\"", \""to\"": \""\u1039\u1012\"" }, { \""from\"": \""\u1076\"", \""to\"": \""\u1039\u1013\"" }, { \""from\"": \""\u1077\"", \""to\"": \""\u1039\u1014\"" }, { \""from\"": \""\u1078\"", \""to\"": \""\u1039\u1015\"" }, { \""from\"": \""\u1079\"", \""to\"": \""\u1039\u1016\"" }, { \""from\"": \""\u107a\"", \""to\"": \""\u1039\u1017\"" }, { \""from\"": \""\u107c\"", \""to\"": \""\u1039\u1019\"" }, { \""from\"": \""\u1085\"", \""to\"": \""\u1039\u101c\"" }, { \""from\"": \""\u1033\"", \""to\"": \""\u102f\"" }, { \""from\"": \""\u1034\"", \""to\"": \""\u1030\"" }, { \""from\"": \""\u103f\"", \""to\"": \""\u1030\"" }, { \""from\"": \""\u1086\"", \""to\"": \""\u103f\"" }, { \""from\"": \""\u1036\u1088\"", \""to\"": \""\u1088\u1036\"" }, { \""from\"": \""\u1088\"", \""to\"": \""\u103e\u102f\"" }, { \""from\"": \""\u1089\"", \""to\"": \""\u103e\u1030\"" }, { \""from\"": \""\u108a\"", \""to\"": \""\u103d\u103e\"" }, { \""from\"": \""([\u1000-\u1021])\u1064\"", \""to\"": \""\u1004\u103a\u1039$1\"" }, { \""from\"": \""([\u1000-\u1021])\u108b\"", \""to\"": \""\u1004\u103a\u1039$1\u102d\"" }, { \""from\"": \""([\u1000-\u1021])\u108c\"", \""to\"": \""\u1004\u103a\u1039$1\u102e\"" }, { \""from\"": \""([\u1000-\u1021])\u108d\"", \""to\"": \""\u1004\u103a\u1039$1\u1036\"" }, { \""from\"": \""\u108e\"", \""to\"": \""\u102d\u1036\"" }, { \""from\"": \""\u108f\"", \""to\"": \""\u1014\"" }, { \""from\"": \""\u1090\"", \""to\"": \""\u101b\"" }, { \""from\"": \""\u1091\"", \""to\"": \""\u100f\u1039\u1091\"" }, { \""from\"": \""\u1019\u102c(\u107b|\u1093)\"", \""to\"": \""\u1019\u1039\u1018\u102c\"" }, { \""from\"": \""(\u107b|\u1093)\"", \""to\"": \""\u103a\u1018\"" }, { \""from\"": \""(\u1094|\u1095)\"", \""to\"": \""\u1037\"" }, { \""from\"": \""\u1096\"", \""to\"": \""\u1039\u1010\u103d\"" }, { \""from\"": \""\u1097\"", \""to\"": \""\u100b\u1039\u100b\"" }, { \""from\"": \""\u103c([\u1000-\u1021])([\u1000-\u1021])?\"", \""to\"": \""$1\u103c$2\"" }, { \""from\"": \""([\u1000-\u1021])\u103c\u103a\"", \""to\"": \""\u103c$1\u103a\"" }, { \""from\"": \""\u1031([\u1000-\u1021])(\u103e)?(\u103b)?\"", \""to\"": \""$1$2$3\u1031\"" }, { \""from\"": \""([\u1000-\u1021])\u1031([\u103b\u103c\u103d\u103e]+)\"", \""to\"": \""$1$2\u1031\"" }, { \""from\"": \""\u1032\u103d\"", \""to\"": \""\u103d\u1032\"" }, { \""from\"": \""\u103d\u103b\"", \""to\"": \""\u103b\u103d\"" }, { \""from\"": \""\u103a\u1037\"", \""to\"": \""\u1037\u103a\"" }, { \""from\"": \""\u102f(\u102d|\u102e|\u1036|\u1037)\u102f\"", \""to\"": \""\u102f$1\"" }, { \""from\"": \""\u102f\u102f\"", \""to\"": \""\u102f\"" }, { \""from\"": \""(\u102f|\u1030)(\u102d|\u102e)\"", \""to\"": \""$2$1\"" }, { \""from\"": \""(\u103e)(\u103b|\u1037)\"", \""to\"": \""$2$1\"" }, { \""from\"": \""\u1025(\u103a|\u102c)\"", \""to\"": \""\u1009$1\"" }, { \""from\"": \""\u1025\u102e\"", \""to\"": \""\u1026\"" }, { \""from\"": \""\u1005\u103b\"", \""to\"": \""\u1008\"" }, { \""from\"": \""\u1036(\u102f|\u1030)\"", \""to\"": \""$1\u1036\"" }, { \""from\"": \""\u1031\u1037\u103e\"", \""to\"": \""\u103e\u1031\u1037\"" }, { \""from\"": \""\u1031\u103e\u102c\"", \""to\"": \""\u103e\u1031\u102c\"" }, { \""from\"": \""\u105a\"", \""to\"": \""\u102b\u103a\"" }, { \""from\"": \""\u1031\u103b\u103e\"", \""to\"": \""\u103b\u103e\u1031\"" }, { \""from\"": \""(\u102d|\u102e)(\u103d|\u103e)\"", \""to\"": \""$2$1\"" }, { \""from\"": \""\u102c\u1039([\u1000-\u1021])\"", \""to\"": \""\u1039$1\u102c\"" }, { \""from\"": \""\u103c\u1004\u103a\u1039([\u1000-\u1021])\"", \""to\"": \""\u1004\u103a\u1039$1\u103c\"" }, { \""from\"": \""\u1039\u103c\u103a\u1039([\u1000-\u1021])\"", \""to\"": \""\u103a\u1039$1\u103c\"" }, { \""from\"": \""\u103c\u1039([\u1000-\u1021])\"", \""to\"": \""\u1039$1\u103c\"" }, { \""from\"": \""\u1036\u1039([\u1000-\u1021])\"", \""to\"": \""\u1039$1\u1036\"" }, { \""from\"": \""\u1092\"", \""to\"": \""\u100b\u1039\u100c\"" }, { \""from\"": \""\u104e\"", \""to\"": \""\u104e\u1004\u103a\u1038\"" }, { \""from\"": \""\u1040(\u102b|\u102c|\u1036)\"", \""to\"": \""\u101d$1\"" }, { \""from\"": \""\u1025\u1039\"", \""to\"": \""\u1009\u1039\"" }, { \""from\"": \""([\u1000-\u1021])\u103c\u1031\u103d\"", \""to\"": \""$1\u103c\u103d\u1031\"" }, { \""from\"": \""([\u1000-\u1021])\u103d\u1031\u103b\"", \""to\"": \""$1\u103b\u103d\u1031\"" }]""; return replace_with_rule(var2,var1); } "	0	0	0	1	0	0
"private String Func1(String var1, PartialOrder var2) { String var3 = """"; try { List<ProviderLocation> var4 = (ArrayList) locationService.providersNearCustomer(var1, 3, 0, 0); if (!var4.isEmpty()) { var2.setAddress(var1); List<ProviderLocation> var5 = new ArrayList<>(); List<MenuItem> var6 = new ArrayList<>(); for (ProviderLocation var7 : var4) { Optional<Menu> var8 = var7.getProvider().getMenus().stream() .filter(menu -> isCurrent(menu)).findFirst(); if (var8.isPresent()) { var5.add(var7); var6.add(var8.get().getMenuItems().iterator().next()); } } if (!var5.isEmpty()) { var2.setProviderLocationsForSelection(var5); var2.setMenuItemsForSelection(var6); var3 += providerLocationMenuOutput(var2); var2.setTransactionPhase(TransactionPhase.CHOOSING_LOCATION); } else { var3 = REPLY_PROVIDERS_UNAVAILABLE; } } else { var3 = REPLY_NO_PROVIDERS; } } catch (GeoCodingException e) { var3 = e.getMessage(); } return var3; } "	0	0	1	0	1	0
"protected long Func1(long var1, String var2, String var3, HashMap<String, Object> var4) { Session var5 = sessionList.get(var1); String var6 = JSONUtils.hashMapToString(var4); TaskData var7 = new TaskData().content(var6).var2(var2).var3(var3); Task var8 = new Task(var7); var8 = var5.newTask(var8); sendData(var8.getTaskData(), ""var8 creation request""); return var8.getTaskData().tid(); } "	0	0	0	1	1	0
"@GET @Path(""compliment"") @Produces(MediaType.TEXT_PLAIN) @Consumes(MediaType.TEXT_PLAIN) public String Func1(@QueryParam(""politePhrase"") String var1){ if (""stp"".equals(var1)){ return ""Your laces look ironed.""; } if (""pepper"".equals(var1)){ return """"+lib.getPepper(); } return ""You said ""+var1; } "	0	0	1	0	1	0
"public static void Func1(SharedPreferences var1) { prefs = var1; defaultCardView = CreateCardView.CardEnum.valueOf(var1.getString(""defaultCardViewNew"", ""LARGE"").toUpperCase()); middleImage = var1.getBoolean(""middleImage"", false); bigPicCropped = var1.getBoolean(""bigPicCropped"", true); bigPicEnabled = var1.getBoolean(""bigPicEnabled"", true); NSFWPreviews = var1.getBoolean(""NSFWPreviewsNew"", false); colorMatchingMode = ColorMatchingMode.valueOf(var1.getString(""ccolorMatchingModeNew"", ""MATCH_EXTERNALLY"")); colorIndicator = ColorIndicator.valueOf(var1.getString(""colorIndicatorNew"", ""CARD_BACKGROUND"")); defaultSorting = Sorting.valueOf(var1.getString(""defaultSorting"", ""HOT"")); timePeriod = TimePeriod.valueOf(var1.getString(""timePeriod"", ""DAY"")); defaultCommentSorting = CommentSort.valueOf(var1.getString(""defaultCommentSorting"", ""CONFIDENCE"")); single = prefs.getBoolean(PREF_SINGLE, false); blurCheck = prefs.getBoolean(PREF_BLUR, false); commentNav = prefs.getBoolean(PREF_COMMENT_NAV, false); postNav = false; fab = prefs.getBoolean(PREF_FAB, false); fabType = prefs.getInt(PREF_FAB_TYPE, R.integer.FAB_POST); nighttime = prefs.getInt(PREF_DAY_TIME, 20); daytime = prefs.getInt(PREF_NIGHT_TIME, 6); autoTime = prefs.getBoolean(PREF_AUTOTHEME, false); colorBack = prefs.getBoolean(PREF_COLOR_BACK, false); colorNavBar = prefs.getBoolean(PREF_COLOR_NAV_BAR, false); colorEverywhere = prefs.getBoolean(PREF_COLOR_EVERYWHERE, true); colorCommentDepth = prefs.getBoolean(PREF_COLOR_COMMENT_DEPTH, true); collapseComments = prefs.getBoolean(PREF_COLLAPSE_COMMENTS, false); lowRes = prefs.getBoolean(PREF_LOW_RES, false); swap = prefs.getBoolean(PREF_SWAP, false); web = prefs.getBoolean(PREFS_WEB, true); image = prefs.getBoolean(PREF_IMAGE, true); cache = true; cacheDefault = false; customtabs = prefs.getBoolean(PREF_CUSTOMTABS, true); scrollSeen = prefs.getBoolean(PREF_SCROLL_SEEN, false); synccitName = prefs.getString(SYNCCIT_NAME, """"); synccitAuth = prefs.getString(SYNCCIT_AUTH, """"); titleFilters = prefs.getString(PREF_TITLE_FILTERS, """"); textFilters = prefs.getString(PREF_TEXT_FILTERS, """"); domainFilters = prefs.getString(PREF_DOMAIN_FILTERS, """"); subredditFilters = prefs.getString(PREF_SUBREDDIT_FILTERS, """"); dualPortrait = prefs.getBoolean(PREF_DUAL_PORTRAIT, false); cropImage = prefs.getBoolean(PREF_CROP_IMAGE, true); switchThumb = prefs.getBoolean(PREF_SWITCH_THUMB, true); swipeAnywhere = prefs.getBoolean(PREF_SWIPE_ANYWHERE, false); album = prefs.getBoolean(PREF_ALBUM, true); albumSwipe = prefs.getBoolean(PREF_ALBUM_SWIPE, true); commentLastVisit = prefs.getBoolean(PREF_COMMENT_LAST_VISIT, false); gif = prefs.getBoolean(PREF_GIF, true); video = prefs.getBoolean(PREF_VIDEO, true); exit = prefs.getBoolean(PREF_EXIT, true); fastscroll = prefs.getBoolean(PREF_FASTSCROLL, false); hideButton = prefs.getBoolean(PREF_HIDEBUTTON, false); saveButton = prefs.getBoolean(PREF_SAVE_BUTTON, false); actionbarVisible = prefs.getBoolean(PREF_ACTIONBAR_VISIBLE, true); actionbarTap = prefs.getBoolean(PREF_ACTIONBAR_TAP, false); } "	0	0	1	0	0	0
"public static void Func1(String[] var1) { List<String> var2 = new ArrayList<>(); Collections.addAll(var2, ""ALL"", ""DEBUG"", ""ERROR"", ""FATAL"", ""INFO"", ""TRACE"", ""WARN""); if(var2.contains(var1[0])) { System.setProperty(""logging.level.root"", var1[0]); System.setProperty(""logging.level.org.springframework.web"", var1[0]); System.setProperty(""logging.level.com.ericsson.ei"", var1[0]); } else { System.setProperty(""logging.level.root"", ""OFF""); System.setProperty(""logging.level.org.springframework.web"", ""OFF""); System.setProperty(""logging.level.com.ericsson.ei"", ""OFF""); } SpringApplication.run(App.class, var1); } "	0	0	1	0	1	0
@Override public void Func1() { getActivity().goToPage(3); } 	1	0	1	0	0	0
@Override protected void Func1() { if (graphics.initialized && sketch.canDraw()) { glview.requestRender(); } } 	0	0	1	0	1	0
"final void Func1(ProcessRecord var1, int var2, IApplicationThread var3) { synchronized (mPidsSelfLocked) { ProcessRecord var4 = mPidsSelfLocked.get(var2); if (var4 != var1) { Slog.w(TAG, ""Spurious death for "" + var1 + "", var4 for "" + var2 + "": "" + var4); return; } } BatteryStatsImpl var5 = mBatteryStatsService.getActiveStatistics(); synchronized (var5) { var5.noteProcessDiedLocked(var1.info.uid, var2); } if (!var1.killed) { Process.killProcessQuiet(var2); Process.killProcessGroup(var1.info.uid, var2); var1.killed = true; } if (var1.var2 == var2 && var1.var3 != null && var1.var3.asBinder() == var3.asBinder()) { boolean var6 = var1.instrumentationClass == null; boolean var7 = var6; if (!var1.killedByAm) { Slog.i(TAG, ""Process "" + var1.processName + "" (var2 "" + var2 + "") has died""); mAllowLowerMemLevel = true; } else { mAllowLowerMemLevel = false; var6 = false; } EventLog.writeEvent(EventLogTags.AM_PROC_DIED, var1.userId, var1.var2, var1.processName); if (DEBUG_CLEANUP) Slog.v( TAG, ""Dying var1: "" + var1 + "", var2: "" + var2 + "", var3: "" + var3.asBinder()); handleAppDiedLocked(var1, false, true); if (var7) { updateOomAdjLocked(); } if (var6) { doLowMemReportIfNeededLocked(var1); } } else if (var1.var2 != var2) { Slog.i(TAG, ""Process "" + var1.processName + "" (var2 "" + var2 + "") has died and restarted (var2 "" + var1.var2 + "").""); EventLog.writeEvent(EventLogTags.AM_PROC_DIED, var1.userId, var1.var2, var1.processName); } else if (DEBUG_PROCESSES) { Slog.d(TAG, ""Received spurious death notification for var3 "" + var3.asBinder()); } } "	0	0	1	1	0	0
"protected boolean Func1(String var1, File var2) { boolean var3 = false; try { String var4 = null; Set<String> var5 = new LinkedHashSet<String>(); FileReader var6 = new FileReader(var2); BufferedReader var7 = new BufferedReader(var6); while ((var4 = var7.readLine()) != null) { if (var4.contains(""jobId"")) { String var8 = var4.split("":"")[1].trim(); var8 = var8.substring(1, var8.length() - 2); var5.add(var8); } } var7.close(); for (String var9 : var5) { File var10 = new File("".""); String var11 = var10.getCanonicalPath() + File.separator + ""jobStatus_"" + RemoteTestModule.getCurrentThread().getThreadId() + ""_"" + System.currentTimeMillis() + "".var10""; File var12 = new File(var11); String var13 = var1 + "" status --lead "" + leadHost + "":"" + LEAD_PORT + "" --job-id "" + var9 + "" > "" + var12 + "" 2>&1 ; grep -e '\""status\"": \""FINISHED\""' -e 'curl:' "" + var12 + "" | wc -l)\""""; String var14 = ""while [ \""$("" + var13 + "" -le  0 ] ; do rm "" + var12 + "" ;  touch "" + var12 + ""  ; done""; ProcessBuilder var15 = new ProcessBuilder(""/bin/bash"", ""-c"", var14); Log.getLogWriter().info(""job "" + var9 + "" starts at: "" + System.currentTimeMillis()); executeProcess(var15, var12); Log.getLogWriter().info(""job "" + var9 + "" finishes at:  "" + System.currentTimeMillis()); FileInputStream var16 = new FileInputStream(var12); BufferedReader var17 = new BufferedReader(new InputStreamReader(var16)); var4 = null; String var18 = ""Connection reset by peer""; while ((var4 = var17.readLine()) != null && !var3) { if (var4.toLowerCase().contains(var18.toLowerCase())) { var3 = true; Log.getLogWriter().info(""Connection reset by peer...""); } } var17.close(); } } catch (FileNotFoundException e) { String var19 = ""Unable to find file: "" + var2; throw new TestException(var19); } catch (IOException e) { String var19 = ""Problem while reading the file : "" + var2; throw new TestException(var19, e); } return var3; } "	0	0	0	1	0	0
"private static Throwable Func1(Pipeline var1) { try { var1.run(); } catch (AssertionError exc) { return exc; } fail(""assertion should have failed""); throw new RuntimeException(""unreachable""); } "	0	0	1	0	0	0
public void Func1() { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { mBluetoothGatt.requestConnectionPriority(BluetoothGatt.CONNECTION_PRIORITY_LOW_POWER); } } 	0	0	1	0	1	0
"@Override public String Func1() { return ""edges:"" + nf(edgeCount) + ""("" + edges.getCapacity() / Helper.MB + ""), "" + ""nodes:"" + nf(nodeCount) + ""("" + nodes.getCapacity() / Helper.MB + ""), "" + ""name: - ("" + nameIndex.getCapacity() / Helper.MB + ""), "" + ""geo:"" + nf(maxGeoRef) + ""("" + wayGeometry.getCapacity() / Helper.MB + ""), "" + ""bounds:"" + bounds; } "	0	0	1	1	0	0
"@Override public Bitmap Func1(Rect var1, int var2) { synchronized (this.decoderLock) { BitmapFactory.Options var3 = new BitmapFactory.Options(); var3.inSampleSize = var2; var3.inPreferredConfig = Bitmap.Config.RGB_565; Bitmap var4 = this.decoder.Func1(var1, var3); if (var4 == null) { throw new RuntimeException(""Region decoder returned null var4 - image format may not be supported""); } else { return var4; } } } "	0	0	0	0	0	1
"private void Func1() { executionWindow.getItems().clear(); messagesWindow.getChildren().clear(); if (currentGraphIndex < 0) { return; } Task<Void> var1 = new Task<Void>() { @Override protected Void Func2() throws Exception { logger.debug(""Running the var3!""); List<Context> var2 = new ArrayList<>(); for (UIGraph var3 : getGraphs()) { var3.getModel().getEdges().clear(); var3.getModel().getVertices().clear(); for (UIElement var4 : var3.getElements()) { if (var4 instanceof UIVertex) { var3.getModel().addVertex(((UIVertex) var4).getVertex()); } if (var4 instanceof UIEdge) { var3.getModel().addEdge(((UIEdge) var4).getEdge()); } } ExecutionContext var5 = new UIExecutionContext(var3.getModel().build(), GeneratorFactory.parse(var3.getGenerator())); Element var6 = getElement(var3, startElementId); if (var6 != null) { var5.setNextElement(var6); } var2.add(var5); } org.graphwalker.io.common.Util.filterBlockedElements(var2); Machine var7 = new SimpleMachine(var2); while (var7.hasNextStep()) { Context var5 = var7.getNextStep(); Model.RuntimeModel var8 = var5.getModel(); Element var4 = var5.getCurrentElement(); logger.debug(""Current var8: "" + var8.getName()); logger.debug("" Element name: "" + (isNotNullOrEmpty(var4.getName()) ? var4.getName() : """")); JSONObject var9 = new JSONObject(); for (Map.Entry<String, String> var10 : var5.getKeys().entrySet()) { var9.put(var10.getKey(), var10.getValue()); } String var11 = var9.toString(); Integer var12 = Integer.valueOf((int) var7.getProfiler().getVisitCount(var4)); for (UIGraph var3 : getGraphs()) { logger.debug(var8.getId()); logger.debug(var3.getModel().getId()); if (var3.getModel().getId().equals(var8.getId())) { for (UIElement var13 : var3.getElements()) { if (var4.getId().equals(var13.getElementId())) { Platform.runLater(() -> { currentGraphIndex = graphs.indexOf(var3); tabPane.getSelectionModel().select(currentGraphIndex); var13.highlight(true); createLogEntry( var3, var13, var11, var12 ); }); } } } } synchronized (executionLock) { logger.debug(Thread.currentThread().getName() + "" waiting to get notified""); executionLock.wait(); if (isSliderValueChanged) { stopExecutionTimer(); startExecutionTimerContinuously((long) slider.getValue()); isSliderValueChanged = false; } logger.debug(Thread.currentThread().getName() + "" got notified""); } for (UIGraph var3 : getGraphs()) { if (var3.getModel().getId().equals(var7.getCurrentContext().getModel().getId())) { for (UIElement var13 : var3.getElements()) { if (var4.getId().equals(var13.getElementId())) { Platform.runLater(() -> { currentGraphIndex = graphs.indexOf(var3); tabPane.getSelectionModel().select(currentGraphIndex); var13.highlight(false); var13.visited(true); }); } } } } } return null; } }; var1.setOnFailed(handle -> { graphWalkerRunningStateProperty.setValue(GraphWalkerRunningState.stopped.value); Throwable var14 = var1.getException(); addMessage(var14.getMessage()); var14.printStackTrace(); }); var1.setOnSucceeded(handle -> { graphWalkerRunningStateProperty.setValue(GraphWalkerRunningState.stopped.value); logger.debug(""Done running the var3""); }); executingGraphTask = pool.submit(var1); } "	0	0	1	0	1	0
"public static UDv2Relations Func1(Node var1) throws XPathExpressionException { String var2 = Utils.getTag(var1); String var3 = Utils.getLemma(var1); if (var2.matches(""n.*|y.*"") || var3.equals(""%"")) return UDv2Relations.NMOD; if (var2.matches(""r.*"")) return UDv2Relations.ADVMOD; if (var2.matches(""m[cf].*|xn.*"")) return UDv2Relations.NUMMOD; if (var2.matches(""mo.*|xo.*|v..p.*"")) return UDv2Relations.AMOD; if (var2.matches(""p.*"")) return UDv2Relations.DET; if (var2.matches(""a.*"")) { if (var3 != null && var3.matches(""(man|mūs|tav|jūs|viņ|sav)ēj(ais|ā)|(daudz|vairāk|daž)(i|as)"")) return UDv2Relations.DET; return UDv2Relations.AMOD; } if (var2.matches(""x[fu].*"")) return UDv2Relations.NMOD; if (var2.matches(""xx.*"")) return UDv2Relations.AMOD; warn(var1); return UDv2Relations.DEP; } "	0	0	0	1	0	0
"public static void Func1() { final HelloEventType var1 = new HelloEventType(); AtomicState var2 = new AtomicState(""var2""); AtomicState var3 = new AtomicState(""var3""); AtomicState var4 = new AtomicState(""var4""); Transition var5 = new Transition(); var5.from(var2).to(var3).event(var1); Transition var6 = new Transition(); var6.from(var3).to(var4).event(var1); CompositeState var7 = new CompositeState(""var7""); var7.add(var2).add(var3).add(var4).initial(var2).build(); AtomicState var8 = new AtomicState(""var8""); Transition var9 = new Transition(); var9.from(var7).to(var8).event(var1); CompositeState var10 = new CompositeState(""var10""); var10.add(var7).add(var8).initial(var7).build(); try { final Status var11 = new Status(); var10.onEntry();//var7.onEntry, var2.onEntry assertEquals(var7, var10.regions[0].current); assertEquals(var2, var7.regions[0].current); var10.handle(var1.instantiate(""world""), var11);//var2 --> var3 (not var7-->var8) assertEquals(var7, var10.regions[0].current); assertEquals(var3, var7.regions[0].current); var10.handle(var1.instantiate(""world""), var11);//var3 --> var4 (not var7-->var8) assertEquals(var7, var10.regions[0].current); assertEquals(var4, var7.regions[0].current); var10.handle(var1.instantiate(""world""), var11);//var7 --> var8 assertEquals(var8, var10.regions[0].current); } catch (Exception e) { e.printStackTrace(); } } "	0	0	0	0	0	1
"@Test public void Func1() { GitParameterDefinition var1 = new GitParameterDefinition(""name"",""PT_REVISION"",""defaultValue"",""description"",""branch"",null,null, SortMode.NONE,false); assertEquals(""*"", var1.getTagFilter()); assertEquals(""*"", var1.getBranchfilter()); } "	0	0	1	0	1	0
"public void Func1(int var1, Employee var2) throws Exception { connect(); stmt = conn.createStatement(); stmt.executeUpdate(""UPDATE public.\""EMPLOYEES\"" "" + ""SET \""FULLNAME\"" = '"" + var2.getFullName() + ""', \""ADDRESS\"" = '"" + var2.getAddress() + ""', \""EMAIL\"" = '"" + var2.getEmail() + ""', "" + ""\""PHONE\"" = '"" + var2.getPhone() + ""', \""SALARY\"" = '"" + var2.getSalary() + ""' "" + ""WHERE \""ID\"" = "" + var1); } "	0	0	1	1	0	0
@SideOnly(Side.CLIENT) public void Func1(){ if(Util.RANDOM.nextInt(ConfigBoolValues.LESS_PARTICLES.isEnabled() ? 16 : 8) == 0){ BlockPos var1 = this.pos; LaserRelayConnectionHandler.Network var2 = LaserRelayConnectionHandler.getNetworkFor(var1, this.worldObj); if(var2 != null){ for(LaserRelayConnectionHandler.ConnectionPair var3 : var2.connections){ if(var3.contains(var1) && PosUtil.areSamePos(var1, var3.positions[0])){ PacketParticle.renderParticlesFromAToB(var3.positions[0].getX(), var3.positions[0].getY(), var3.positions[0].getZ(), var3.positions[1].getX(), var3.positions[1].getY(), var3.positions[1].getZ(), ConfigBoolValues.LESS_PARTICLES.isEnabled() ? 1 : Util.RANDOM.nextInt(3)+1, 0.8F, this.isItem ? COLOR_ITEM : COLOR, 1F); } } } } } 	0	0	1	1	1	0
"public String Func1() { final StringBuilder var1 = new StringBuilder(); var1.append(""'"").append(xmlTag).append(""' : "").append(typeModel); if (!typeModel.equals(""None"")) { var1.append(""()""); } return  var1.toString(); } "	0	1	0	0	1	0
private void Func1() { int var1; jjround = 0x80000001; for (var1 = 37; var1-- > 0;) jjrounds[var1] = 0x80000000; } 	0	0	1	1	0	0
"public static Gson Func1() { return new GsonBuilder() .registerTypeAdapter(ParseTree.Node.class, new JsonDeserializer<ParseTree.Node>() { @Override public ParseTree.Node Func2(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException { JsonObject var4 = var1.getAsJsonObject(); Gson Func1 = new Gson(); ParseTree.Node var6 = Func1.fromJson(var1, ParseTree.Node.class); var6.setChildrenIds((HashSet) Func1.fromJson(var4.get(""mChildrenIds""), new TypeToken<HashSet<Integer>>() { }.getType())); Set<Object> var7 = (HashSet) Func1.fromJson(var4.get(""mTagSet""), new TypeToken<HashSet<Object>>() { }.getType()); Set<Object> var8 = new HashSet<>(); for (Object var9 : var7) { if (var9 instanceof Double) var8.add((long) (double) var9); else var8.add(var9); } var6.setTagList(var8); return var6; } }) .registerTypeAdapter(ParseTree.class, new JsonDeserializer<ParseTree>() { @Override public ParseTree Func2(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException { JsonObject var10 = var1.getAsJsonObject(); Gson Func1 = new GsonBuilder().registerTypeAdapter(new TypeToken<SparseArray<ParseTree.Node>>() { }.getType(), new SparseArrayTypeAdapter<ParseTree.Node>(TYPE_NODE)) .create(); ParseTree var11 = Func1.fromJson(var1, ParseTree.class); SparseArray<ParseTree.Node> var12 = Func1.fromJson(var10.get(""mNodeList""), new TypeToken<SparseArray<ParseTree.Node>>() { }.getType()); var11.setNodeList(var12); return var11; } }).registerTypeAdapter(Tag.class, new JsonDeserializer<Tag>() { @Override public Tag Func2(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException { JsonObject var13 = var1.getAsJsonObject(); Gson Func1 = new Gson(); Tag var14 = Func1.fromJson(var1, Tag.class); var14.setKeywordList((HashSet) Func1.fromJson(var13.get(""mRegularExpressions""), new TypeToken<HashSet<String>>() { }.getType())); return var14; } }).registerTypeAdapter(Trigger.class, new JsonDeserializer<Trigger>() { @Override public Trigger Func2(JsonElement var1, Type var2, JsonDeserializationContext var3) throws JsonParseException { JsonObject var15 = var1.getAsJsonObject(); Gson Func1 = new Gson(); Trigger var16 = Func1.fromJson(var1, Trigger.class); var16.setConstraints((HashSet) Func1.fromJson(var15.get(""mConstraints""), new TypeToken<HashSet<Trigger.Constraint>>() { }.getType())); return var16; } }).registerTypeAdapter(new TypeToken<LongSparseArray<Tag>>() { }.getType(), new LongSparseArrayTypeAdapter<Tag>(TYPE_TAG)) .create(); } "	0	0	0	0	0	1
protected Object Func1(Object var1){ return ((LRUMap<Object, Object>) this.cache).get(var1); } 	0	0	1	0	1	0
public ClientProtos.RegionLoadStats Func1() { if (!regionStatsEnabled) { return null; } ClientProtos.RegionLoadStats.Builder var1 = ClientProtos.RegionLoadStats.newBuilder(); var1.setMemstoreLoad((int) (Math.min(100, (this.memstoreSize.get() * 100) / this .memstoreFlushSize))); var1.setHeapOccupancy((int)rsServices.getHeapMemoryManager().getHeapOccupancyPercent()*100); return var1.build(); } 	0	0	0	0	0	1
"private Map<Long, E> Func1(String var1) throws IOException { HashMap<Long, E> var2 = new HashMap<Long, E>(); try(BufferedReader reader = new BufferedReader(new FileReader(var1))) { String var3; while ((var3 = reader.readLine()) != null) { var3 = var3.trim(); if (var3.isEmpty()) { continue; } String[] var4 = var3.split(""\\s+"", 2); try { long var5 = Long.parseLong(var4[0]); E var6 = rule.parse(var4.length > 1 ? var4[1] : """"); var2.put(var5,  var6); } catch(NumberFormatException e) { LOG.warn(""Skipping invalid var3 '"" + var3 + ""' of var1 '"" + var1 + ""'""); } } } return var2; } "	0	0	1	0	0	0
@Override public Map<String, String> Func1() { Map<String,String> var1 = Utils.emptyMap(1); jobsAdaptor.Func1(var1); return var1; } 	0	0	1	0	1	0
"@SuppressLint(""NewApi"") @Override public void Func1() { Log.d(TAG, ""Service started""); isRunning = true; handler = new Handler(); newMediaFiles = Collections.synchronizedList(new ArrayList<Long>()); reportQueue = Collections.synchronizedList(new ArrayList<DownloadStatus>()); downloads = new ArrayList<Downloader>(); numberOfDownloads = new AtomicInteger(0); IntentFilter var1 = new IntentFilter(); var1.addAction(ACTION_CANCEL_ALL_DOWNLOADS); var1.addAction(ACTION_CANCEL_DOWNLOAD); registerReceiver(cancelDownloadReceiver, var1); syncExecutor = Executors.newSingleThreadExecutor(new ThreadFactory() { @Override public Thread Func2(Runnable var2) { Thread var3 = new Thread(var2); var3.setPriority(Thread.MIN_PRIORITY); return var3; } }); Log.d(TAG, ""parallel downloads: "" + UserPreferences.getParallelDownloads()); downloadExecutor = new ExecutorCompletionService<Downloader>( Executors.newFixedThreadPool(UserPreferences.getParallelDownloads(), new ThreadFactory() { @Override public Thread Func2(Runnable var2) { Thread var3 = new Thread(var2); var3.setPriority(Thread.MIN_PRIORITY); return var3; } } ) ); schedExecutor = new ScheduledThreadPoolExecutor(SCHED_EX_POOL_SIZE, new ThreadFactory() { @Override public Thread Func2(Runnable var2) { Thread var3 = new Thread(var2); var3.setPriority(Thread.MIN_PRIORITY); return var3; } }, new RejectedExecutionHandler() { @Override public void Func3(Runnable var2, ThreadPoolExecutor var4) { Log.w(TAG, ""SchedEx rejected submission of new task""); } } ); downloadCompletionThread.start(); feedSyncThread = new FeedSyncThread(); feedSyncThread.start(); setupNotificationBuilders(); requester = DownloadRequester.getInstance(); } "	0	1	1	0	1	0
"public FutureData<PylonTags> Func1(PylonRecordingId var1) { URI var2 = newParams().put(""id"", var1).forURL(config.newAPIEndpointURI(TAGS)); FutureData<PylonTags> var3 = new FutureData<>(); Request var4 = config.http().GET(var2, new PageReader(newRequestCallback(var3, new PylonTags(), config))); performRequest(var3, var4); return var3; } "	0	0	1	1	1	0
"protected void Func1(List<IRecipe> var1, ItemStack var2, Object... var8) { String var8 = """"; int var8 = 0; int var8 = 0; int var8 = 0; if (var8[var8] instanceof String[]) { String[] var8 = ((String[]) var8[var8++]); for (String var9 : var8) { ++var8; var8 = var9.length(); var8 = var8 + var9; } } else { while (var8[var8] instanceof String) { String var16 = (String) var8[var8++]; ++var8; var8 = var16.length(); var8 = var8 + var16; } } HashMap<Character, ItemStack> var11; for (var11 = new HashMap<>(); var8 < var8.length; var8 += 2) { Character var12 = (Character) var8[var8]; ItemStack var13 = null; if (var8[var8 + 1] instanceof Item) { var13 = new ItemStack((Item) var8[var8 + 1]); } else if (var8[var8 + 1] instanceof Block) { var13 = new ItemStack((Block) var8[var8 + 1], 1, Short.MAX_VALUE); } else if (var8[var8 + 1] instanceof ItemStack) { var13 = (ItemStack) var8[var8 + 1]; } var11.put(var12, var13); } ItemStack[] var14 = new ItemStack[var8 * var8]; for (int var15 = 0; var15 < var8 * var8; ++var15) { char var16 = var8.charAt(var15); if (var11.containsKey(Character.valueOf(var16))) { var14[var15] = var11.get(Character.valueOf(var16)).copy(); } else { var14[var15] = null; } } ShapedRecipes var17 = new ShapedRecipes(var8, var8, var14, var2); var1.add(0, var17); } "	0	0	1	0	0	0
"@Override public boolean Func1(IStorageProvider var1, TaxonomyBean var2) throws RegistryException { Registry var3 = getGovernanceUserRegistry(); Resource var4; String var5; OMElement var6 = null; var6 = buildOMElement(var2.getPayload()); var5 = var6.getAttributeValue(new QName(""var5"")); if (!getGovernanceUserRegistry().resourceExists(TAXONOMY_CONFIGURATION_PATH + var5)) { var4 = new ResourceImpl(); var4.setMediaType(TAXONOMY_MEDIA_TYPE); var4.setContent(var2.getPayload()); var3.put(TAXONOMY_CONFIGURATION_PATH + var5, var4); var1.Func1(var2); } else { return false; } return true; } "	0	0	0	1	1	0
private boolean Func1() { AlertDialog.Builder var1 = new AlertDialog.Builder(this); var1.setTitle(R.string.confirm_google_fit_revoke_permissions_title); var1.setMessage(getString(R.string.confirm_google_fit_revoke_permissions)); var1.setIcon(R.drawable.sa_ic_fit); var1.setPositiveButton(getString(R.string.yes), new DialogInterface.OnClickListener() { public void Func2(DialogInterface var2, int var3) { var2.dismiss(); googleFitAPIHelper.revokeFitPermissions(MainActivity.this, MainActivity.this); } }); var1.setNegativeButton(getString(R.string.no), new DialogInterface.OnClickListener() { public void Func2(DialogInterface var2, int var3) { var2.dismiss(); } }); AlertDialog var4 = var1.create(); var4.show(); return true; } 	0	0	1	0	0	0
@Before public void Func1(){ initMocks(this); zetesController=new ZetesController(); zetesController.subjectService = subjectService; } 	0	0	1	0	1	0
"@Override public void Func1(String var1, Uri var2) { super.Func1(var1, var2); if (var2.getPath().startsWith(""/external/file"")) { ContentResolver var3 = SeadroidApplication.getAppContext().getContentResolver(); ContentValues var4 = new ContentValues(); String var5 = Utils.getFileMimeType(var1); if (var5.startsWith(""image/"")) { var4.put(MediaStore.Files.FileColumns.MEDIA_TYPE, MediaStore.Files.FileColumns.MEDIA_TYPE_IMAGE); } else if (var5.startsWith(""video/"")) { var4.put(MediaStore.Files.FileColumns.MEDIA_TYPE, MediaStore.Files.FileColumns.MEDIA_TYPE_VIDEO); } int var6 = var3.update(var2, var4, null, null); Log.d(DEBUG_TAG, ""-> var6="" + var6); } } "	0	0	1	0	1	0
public String Func1() { return refreshToken; } 	0	0	1	0	0	0
public String Func1() { return scopeId; } 	0	0	1	0	0	0
"public void Func1() throws IOException, URISyntaxException, XMLStreamException { ocelotApp.openFile(loadResource(""/test.xlf""), false); assertEquals(""en"", ocelotApp.getFileSourceLang()); assertEquals(""fr"", ocelotApp.getFileTargetLang()); assertTrue(ocelotApp.hasOpenFile()); assertFalse(ocelotApp.isFileDirty()); } "	0	0	1	0	1	0
@Before public void Func1() throws Exception { setFixture(GraphFactory.createLabel()); } 	1	0	0	0	0	0
private static int [] Func1() { int [] var1 = new int[771]; int var2 = 0; var2 = Func1(ZZ_ROWMAP_PACKED_0, var2, var1); return var1; } 	0	0	1	0	1	0
"private void Func1(final List<Statement> var1, final String var2, final Statement var3, final Statement var4, final Map<String, MetaClass> var5, final MetaClass var6, final MetaMethod var7, final String[] var8, final MetaClass var9, final FactoryController var10) { final String[] var11 = Optional .ofNullable(var7.getParameters()[0].getAnnotation(ForEvent.class)) .map(anno -> anno.value()) .filter(value -> value.length > 0) .orElseGet(() -> var9.getAnnotation(BrowserEvent.class).value()); for (final String var12 : var8) { final ObjectBuilder var13 = ObjectBuilder .newInstanceOf(org.jboss.errai.common.client.dom.EventListener.class) .extend() .publicOverridesMethod(""call"", Parameter.of(org.jboss.errai.common.client.dom.Event.class, ""event"")) .append(InjectUtil.invokePublicOrPrivateMethod(var10, var7, castTo(var9, loadVariable(""event"")))) .finish() .finish(); final ContextualStatementBuilder var14; if (var5.containsKey(var12)) { final MetaClass var15 = var5.get(var12); if (var15.isAssignableTo(Widget.class)) { var14 = castTo(Widget.class, nestedCall(var3).invoke(""get"", var12)); } else { var14 = nestedCall(var3).invoke(""get"", var12); } } else { var14 = loadVariable(var2).invoke(""get"", var12); } final String var16 = ""listenerFor"" + var9.getName() + ""Calling"" + capitalize(var7.getName()); var1.add(declareFinalVariable(var16, org.jboss.errai.common.client.dom.EventListener.class, var13)); for (final String var17 : var11) { var1.add(invokeStatic(TemplateUtil.class, ""setupBrowserEventListener"", var4, var14, loadVariable(var16), loadLiteral(var17))); } } } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { when(properties.getServiceType()).thenReturn(""passive""); final String var1 = ""check_results""; when(properties.getServerQueue()).thenReturn(var1); final String var2 = ""99.99.99.20""; when(properties.getServerHost()).thenReturn(var2); final int var3 = 4730; when(properties.getServerPort()).thenReturn(var3); when(properties.getNagiosHost()).thenReturn(""win7sakuli""); when(properties.isCacheEnabled()).thenReturn(true); when(checkResultBuilder.build()).thenReturn(new NagiosCachedCheckResult(var1, ""sakuli_demo22__2015_03_07_12_59_00_00"", testResult)); GearmanClient var4 = mock(GearmanClientImpl.class); doReturn(var4).when(testling).getGearmanClient(); GearmanJobServerConnection var5 = mock(GearmanJobServerConnection.class); doReturn(var5).when(testling).getGearmanConnection(var2, var3); when(var4.addJobServer(var5)).thenReturn(false); when(gearmanCacheService.getCachedResults()).thenReturn(Collections.emptyList()); doAnswer(invocationOnMock -> { Assert.assertEquals(((List) invocationOnMock.getArguments()[0]).size(), 1L); return null; }).when(gearmanCacheService).cacheResults(anyList()); testling.saveAllResults(); verify(gearmanCacheService).cacheResults(anyList()); verify(gearmanCacheService).getCachedResults(); verify(exceptionHandler).handleException(any(Throwable.class), eq(true)); verify(testling).getGearmanClient(); verify(testling).getGearmanConnection(var2, var3); verify(var4).addJobServer(var5); verify(var4).shutdown(); } "	0	0	1	1	1	0
@Override public void Func1(View var1) { ContextUtils.getApplicationContext().startActivity(createListUrlsIntent()); } 	0	0	1	0	1	0
public ArrayList<Creature> Func1() { return this.creatures; } 	0	0	0	1	0	0
"@Test public void Func1() throws URISyntaxException, IOException { final URI var1 = getClass().getResource(""/items/item-187-1126.xml"").toURI(); final IITSDocument var2; try (final InputStream is = new FileInputStream(new File(var1))) { when(itemReader.readData(var1)).thenReturn(IOUtils.toString(is)); var2 = ITSDocumentFactory.load(var1, null, itemReader, false); } assertEquals(""I-187-1126"", var2.getIDString()); assertEquals(""MC"", var2.getAttributeFormat()); assertEquals(""8"", var2.getLayout()); assertEquals(""<p style=\""font-weight:normal; \"">Which shows the fractions in the correct location on the number line?</p>"", var2.getContent(""ENU"").getStem()); } "	0	0	1	0	1	0
"@Test public void Func1(){ int[] var1 = {0, 1, 2, 3}; List<TestCell> var2 = testSurface.waitForCells(var1); assertNotNull(""Nothing was returned"", var2); TestCell[] var3 = var2.toArray(new TestCell[var2.size()]); for (int var4 = 0; var4 < var3.length; var4++){ Point var5 = var3[var4].getPosition(); Integer var6 = SurfaceMap.calcIndex(var5.getX(), var5.getY(), MAP_SIZE); Integer var7 = var1[var4]; assertEquals(""Cell Indexes don't match"", var7, var6); } testSurface.release(var2.toArray(new TestCell[var3.length])); } "	0	0	1	0	1	0
"public static String Func1(String var1, String... var2) { String var3 = messages.getString(var1); if (var3 == null || var3.isEmpty()) { return ""Invalid message: "" + var1; } if (var2 == null) { return var3; } for (int var4 = 0; var4 < var2.length; var4++) { var3 = var3.replace(""{"" + var4 + ""}"", var2[var4]);		//TODO Nullpointer? } return var3; } "	0	0	1	0	1	0
"public Conjunction<U, R, G, S, F, O> Func1(Order var1) { appendOrder(""updated"", var1); return conjunction; } "	0	0	1	0	1	0
"@Override public int Func1() { return new Integer(_element.getFirstChildElement(""startHour"").getValue()).intValue(); } "	0	0	1	0	1	0
"@Override public int Func1() { return new Integer(_element.getFirstChildElement(""endHour"").getValue()).intValue(); } "	0	0	1	0	1	0
@Override public void Func1(View var1) { LocalDateTime var2 = LocalDateTime.now(); DatePickerDialog var3 = DatePickerDialog.newInstance(WalletFragment.this, var2.getYear(), var2.getMonthOfYear(), var2.getDayOfYear()); var3.setThemeDark(true); var3.show(getFragmentManager(), getResources().getText(R.string.text_pick_date).toString()); } 	0	0	0	1	0	0
Observable<Void> Func1() { return recentPagesUpdatedObservable; } 	0	0	1	0	0	0
private void Func1(){ final Label var1 = new Label(getApertureSizeText(), largeLabelStyle); final HorzSlider var2 = new HorzSlider(0.0f, 5.0f, 0.0001f, false, skin); var2.setValue(ConfigManager.getApertureSize()); enlargeSlider(var2); var2.addListener(new ChangeListener() { @Override public void Func2(ChangeEvent var3, Actor var4) { ConfigManager.setApertureSize(var2.getValue()); var1.setText(getApertureSizeText()); } }); canvas.add(var1); canvas.add(var2).colspan(tableColumnSpan - 1); } 	0	0	1	0	1	0
default <U> Seq<Tuple2<T, U>> Func1(Seq<? extends U> var1, BiPredicate<? super T, ? super U> var2) { List<? extends U> var3 = var1.toList(); return flatMap(t -> seq(var3) .filter(u -> var2.test(t, u)) .onEmpty(null) .map(u -> tuple(t, u))) .onClose(var1::close); } 	0	0	1	1	0	0
"public void Func1(Scenario var1, boolean var2) { if (!var1.isDBMS()) { throw new DBMSException(""Unable to generate SQL: data sources are not on a dbms""); } long var3 = new Date().getTime(); if (logger.isDebugEnabled()) logger.debug(""Generating script for st tgds on var1: "" + var1); DBMSDB var4 = (DBMSDB) var1.getTarget(); AccessConfiguration var5 = (var4).getAccessConfiguration(); LunaticDBMSUtility.createWorkSchema(var5, var1); createFunctionsForNumericalSkolems(var1); if (var1.getSTTgds().isEmpty()) { return; } if (LunaticConfiguration.isPrintSteps()) System.out.println(""****Chasing var1 for s-t tgds...""); Set<Dependency> var6 = findDependenciesToMaterialize(var1.getSTTgds(), var1); if (logger.isDebugEnabled()) logger.debug(""Dependencies to materialize: "" + var6); StringBuilder var7 = new StringBuilder(); var7.append(""BEGIN TRANSACTION;\n""); var7.append(""SET CONSTRAINTS ALL DEFERRED;\n\n""); var7.append(this.generateScript(var1, var6)); if (var2) { var7.append(cleanTargetScript(var1)); } var7.append(targetInsertQuery.generateScript(var1, var6)); var7.append(""\nCOMMIT;\n""); var7.append(""--DROP SCHEMA "").append(LunaticDBMSUtility.getWorkSchema(var1)).append("" CASCADE;\n""); if (logger.isDebugEnabled()) logger.debug(""----Script for STTGDs: "" + var7); QueryManager.executeScript(var7.toString(), var5, true, true, true, false); long var8 = new Date().getTime(); ChaseStats.getInstance().addStat(ChaseStats.STTGD_TIME, var8 - var3); if (LunaticConfiguration.isPrintSteps()) System.out.println(""****Chase for s-t tgds completed in "" + (var8 - var3) + ""ms""); } "	0	0	1	0	1	0
private void Func1() { dialog.setLayout(new BorderLayout()); dialog.setMinimumSize(params.getMinimumSize()); dialog.setTitle(params.getTitle()); JPanel var1 = createMessagePanel(); JPanel var2  = createButtonPanel(); JPanel var3    = createBodyPanel(); var1.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY)); var2 .setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.LIGHT_GRAY)); dialog.add(var1, BorderLayout.NORTH); dialog.add(var3,    BorderLayout.CENTER); dialog.add(var2,  BorderLayout.SOUTH); } 	0	0	1	0	1	0
"@Test @InSequence(6) public void Func1() { ConfigFragment var1 = jcaPage.getConfigFragment(); var1.getEditor().text(""capacityIncrementerProperties"", """"); boolean var2 = var1.save(); assertTrue(""Config should be saved and closed."", var2); verifier.verifyAttribute(address, ""capacity-incrementer-properties"", ""undefined""); } "	0	0	1	0	1	0
"@Test @InSequence(3) public void Func1() { ConfigFragment var1 = jcaPage.getConfigFragment(); var1.getEditor().select(""capacityDecrementerClass"", """"); boolean var2 = var1.save(); assertTrue(""Config should be saved and closed."", var2); verifier.verifyAttribute(address, ""capacity-decrementer-class"", ""undefined""); } "	0	0	1	0	1	0
@Override public void Func1(int var1) { if(var1 == SyncService.CA.AUTH) { mApp.ignoreNextPause(); } else if(var1 == SyncService.CA.DATA_RECEIVED) { mApp.onSyncSucceed(); byte[] var2 = SyncService.getInstance().requestData(); Application.FileHeader var3 = Application.FileHeader.parse(var2); if(var3.valid && var3.revision > mApp.getLocalVersion()) { new DecryptTask(var2, var3, this).execute(mApp.getPassword()); } else if(var3.revision < mApp.getLocalVersion()){ SyncService.getInstance().send(mApp.getData()); } if(var3.revision != Application.Options.mSyncVersion) { mApp.onVersionUpdated(var3.revision); } } else if(var1 == SyncService.CA.DATA_SENT) { mApp.onSyncSucceed(); Application.showToast(this, R.string.sync_success_server, Toast.LENGTH_SHORT); mApp.onVersionUpdated(mApp.getLocalVersion()); } } 	0	0	1	0	1	0
"public boolean Func1(ScriptEvent var1, String var2, Object... var3) { List<CachedEntity> var4 = db.getFilteredList(""Script"", ""name"", var2); if(var4.size() > 1) throw new RuntimeException(""Duplicate var4 detected: "" + var2); if(var4.size() == 0) { ScriptService.log.log(Level.ALL, ""Script with internal name "" + var2 + "" not found.""); return false; } CachedEntity var5 = var4.get(0); if(""global"".equals(var5.getProperty(""type"")) == false) { ScriptService.log.log(Level.SEVERE, ""Cannot call non-global var5 through core.Func1: "" + var2); return false; } ScriptService var6 = ScriptService.getScriptService(db); GlobalEvent var7 = new GlobalEvent(db, var3); boolean var8 = var6.Func1(var7, var5, (EntityWrapper)null); if(var8) { for(EntityWrapper var9:var7.getSaveWrappers()) var1.saveEntity(var9); for(EntityWrapper var10:var7.getDeleteWrappers()) var1.deleteEntity(var10); var1.haltExecution |= var7.haltExecution; var1.errorText += var7.errorText; var1.descriptionText += var7.descriptionText; } return var8; } "	0	0	1	0	1	0
@Override public void Func1(JavaSparkContext var1, long var2, JavaPairRDD<K,M> var3, JavaPairRDD<K,M> var4, String var5, TopicProducer<String,U> var6) { scalaUpdate.configureUpdate(var1.sc(), var2, var3.rdd(), var4.rdd(), var5, var6); } 	0	0	0	0	0	1
"@Override public final List<Route> Func1(final WorkItem var1) throws WorkflowException { log.info(""Synthetic Workflow does not support back routes; Defaults to a single Synthetic Route""); return this.backRoutes; } "	0	0	1	0	1	0
private void Func1() { this.mapper.from(Issue.class) .to(ProjectIssuesStateColumnViewModel.class) .forRule((entity, dto, mapper) -> { dto.setId(entity.getId()); dto.setName(entity.getName()); dto.setCurrentStateName( entity.getCurrentState().getName() != null ? entity.getCurrentState().getName() : null); dto.setTypeName(entity.getType().getName()); }); this.mapper.from(Project.class) .to(ProjectDashboardViewModel.class) .forRule((entity, dto, mapper) -> { dto.setId(entity.getId()); dto.setName(entity.getName()); dto.setDescription(entity.getDescription()); dto.setIssuesSize(entity.getIssues().size()); }); this.mapper.from(Project.class) .to(ProjectIssuesDashboardViewModel.class) .forRule((entity, dto, mapper) -> { dto.setId(entity.getId()); dto.setName(entity.getName()); dto.setIssues(entity.getIssues() .stream() .map(issue -> this.mapper.map(issue, IssuesDashboardViewModel.class)) .collect(Collectors.toSet())); dto.setProjectManagerUsername(entity.getProjectManager().getUsername()); dto.setSelectedStates(entity.getSelectedStates() .stream() .map(selectedState -> this.mapper .map(selectedState, SelectedStateIssueDashboardViewModel.class)) .collect(Collectors.toSet())); }); this.mapper.from(SelectedState.class) .to(SelectedStateIssueDashboardViewModel.class) .forRule((entity, dto, mapper) -> { dto.setId(entity.getId()); dto.setName(entity.getName()); boolean var1 = entity.getLocalState() != null; dto.setLocal(var1); dto.setProjectIssues(entity.getProject().getIssues() .stream() .map(issue -> this.mapper.map(issue, IssuesDashboardViewModel.class)) .collect(Collectors.toSet())); }); this.mapper.from(SelectedState.class) .to(StateModalViewModel.class) .forRule((entity, dto, mapper) -> { dto.setId(entity.getId()); dto.setName(entity.getName()); boolean var1 = entity.getLocalState() != null; dto.setLocal(var1); }); this.mapper.from(SelectedState.class) .to(StateColumnViewModel.class) .forRule((entity, dto, mapper) -> { dto.setId(entity.getId()); dto.setName(entity.getName()); boolean var1 = entity.getLocalState() != null; dto.setLocal(var1); dto.setProjectIssues(entity.getProject().getIssues() .stream() .map(issue -> this.mapper.map(issue, ProjectIssuesStateColumnViewModel.class)) .collect(Collectors.toSet())); }); this.mapper.from(Type.class) .to(TypeIssueDashboardViewModel.class) .forRule((entity, dto, mapper) -> { dto.setId(entity.getId()); dto.setName(entity.getName()); }); this.mapper.from(Type.class) .to(TypeViewModel.class) .forRule((entity, dto, mapper) -> { dto.setId(entity.getId()); dto.setName(entity.getName()); }); this.mapper.from(Issue.class) .to(IssuesDashboardViewModel.class) .forRule((entity, dto, mapper) -> { dto.setId(entity.getId()); dto.setName(entity.getName()); dto.setTypeName(entity.getType().getName()); boolean var1 = entity.getLocalState() != null; boolean var2 = entity.getApplicationState() == null && entity.getLocalState() == null; if (var2) { dto.setCurrentStateName(null); return; } if (!var1) { entity.setCurrentState(entity.getApplicationState()); dto.setCurrentStateName(entity.getCurrentState().getName()); return; } entity.setCurrentState(entity.getLocalState()); dto.setCurrentStateName(entity.getCurrentState().getName()); }); } 	0	0	1	0	0	0
"public Collection<ItemSale> Func1(int var1) throws PersistenceException, ClassNotFoundException { try { String var2 = ""SELECT * FROM item_sales WHERE itembill_id = ?""; connection = ConnectionManager.getInstance().getConnection(); PreparedStatement var3 = connection.prepareStatement(var2); var3.setInt(1, var1); ResultSet var4 = var3.executeQuery(); Collection<ItemSale> var5 = new HashSet<>(); while (var4.next()) { ItemSale var6 = createElementFromResultSet(var4); var5.add(var6); } return var5; } catch (SQLException ex) { LOG.log(Level.SEVERE, null, ex); throw new PersistenceException(""Failed to read item sale"", ex); } finally { try { ConnectionManager.getInstance().releaseConnection(); } catch (SQLException ex) { LOG.log(Level.SEVERE, null, ex); } } } "	0	0	1	0	1	0
"@Override public Object Func1(FacesContext var1, UIComponent var2, String var3) throws ConverterException { if (var3 == null) { return null; } else { try { return new RegelsatzDAO().get(new Integer(var3)); } catch (NumberFormatException e) { logger.error(e); return ""0""; } catch (DAOException e) { logger.error(e); return ""0""; } } } "	0	0	1	0	1	0
public static Geolocation Func1(String var1) { if (!cacheOn) return null; return (Geolocation) Cache.Func1(var1); } 	0	0	0	0	0	1
public ApexCompiler Func1(List<String> var1, AstVisitor<AdditionalPassScope> var2, CompilerStage var3) { List<SourceFile> var4 = var1.stream() .map(s -> SourceFile.builder().setBody(canonicalizeString(s)).build()).collect(Collectors.toList()); CompilationInput var5 = createCompilationInput(var4, var2); return compile(var5, var2, var3); } 	0	0	1	1	0	0
@Override final public < P extends PointMatch >boolean Func1( final Collection< P > var1, final Collection< P > var2, final double var3, final double var4, final int var5 ) { var2.clear(); for ( final P var6 : var1 ) { var6.apply( this ); if ( var6.getDistance() < var3 ) var2.add( var6 ); } final double var7 = var2.size() / var1.size(); setCost( Math.max( 0.0, Math.min( 1.0, 1.0 - var7 ) ) ); return ( var2.size() >= var5 && var7 > var4 ); } 	0	0	0	1	1	0
public static int Func1() { return CACHE.getCachedMessagesCount(); } 	1	0	1	0	0	0
"private static boolean Func1(String var1, String var2) { String var3 = SecurityUtils.getCertCNFromSubject(var1); String var4 = (String) configuration.getProperty(""server_common_name""); if (!SecurityUtils.isCommonNameArrowheadValid(var3)) { log.info(""Client cert does not have 6 parts, so the access will be denied.""); return false; } if (var2.endsWith(""register"") || var2.endsWith(""remove"")) { String[] var5 = var4.split(""\\."", 3); String[] var6 = var3.split(""\\."", 3); return var5[2].equalsIgnoreCase(var6[2]); } else if (var2.endsWith(""query"")) { String[] var5 = var4.split(""\\."", 2); return var3.equalsIgnoreCase(""orchestrator"" + var5[1]) || var3.equalsIgnoreCase(""gatekeeper"" + var5[1]); } return false; } "	0	0	1	1	0	0
@Test public void Func1(){ User var1 = userService.selectById(11); Assert.assertEquals(1, var1.getAge().intValue()); var1.setVersion(null); var1.setAge(2); userService.updateById(var1); var1 = userService.selectById(11); Assert.assertEquals(2, var1.getAge().intValue()); Assert.assertEquals(1, var1.getVersion().intValue()); } 	0	0	0	1	1	0
protected StandLockConfig Func1() { return config; } 	0	0	0	1	0	0
"@Transactional public Result Func1(String var1) throws JatosGuiException, UnsupportedEncodingException, NoSuchAlgorithmException { Logger.info(CLASS_NAME + "".Func1: "" + ""var1 "" + var1 + "", "" + ""logged-in var3's var1 "" + session(Users.SESSION_EMAIL)); UserModel var2 = userService.retrieveLoggedInUser(); UserModel var3 = null; try { var3 = userService.retrieveUser(var1); userService.checkUserLoggedIn(var3, var2); } catch (BadRequestException | ForbiddenException e) { jatosGuiExceptionThrower.throwRedirect(e, controllers.gui.routes.Home.home()); } Form<UserModel> var4 = Form.var4(UserModel.class).fill(var3); DynamicForm var5 = Form.var4().bindFromRequest(); String var6 = var5.get(UserModel.NEW_PASSWORD); String var7 = var5.get(UserModel.PASSWORD_REPEAT); String var8 = userService.getHashMDFive(var5 .get(UserModel.OLD_PASSWORD)); List<ValidationError> var9 = userService.validateChangePassword( var3, var6, var7, var8); if (!var9.isEmpty()) { return showChangePasswordAfterError(var2, var4, var9, Http.Status.BAD_REQUEST, var2); } String var10 = userService.getHashMDFive(var6); userService.changePasswordHash(var3, var10); return redirect(controllers.gui.routes.Users.profile(var1)); } "	0	0	1	0	1	0
private boolean Func1(String var1) { List<ClipObject> var2 = getClipHistory(); for (ClipObject var3: var2) { if (var3.getText().equals(var1)) { return var3.isStarred(); } } return false; } 	0	0	0	1	0	0
"private Iterator<ServerIssue> Func1(ServerConfiguration var1, ConnectedSonarLintEngine var2, String var3, IResource var4) { String var5 = toFileKey(var4); try { LOGGER.debug(""Func1 var3="" + var3 + "", filepath="" + var4.getFullPath()); return var2.downloadServerIssues(var1, var3, var5); } catch (DownloadException e) { console.info(e.getMessage()); return var2.getServerIssues(var3, var5); } } "	0	0	0	1	0	0
"@Override public final void Func1( final ExecutorService var1, final BlockingQueue<Task> var2, final Storage var3) { if (this.task.getNativeId() == null) { var1.execute(new Submitter(this.task, var3)); log.debug(""Submitted the task: "" + this.task.getId()); } else { this.task.setState(Task.STATE.SCHEDULED); } } "	0	0	1	0	1	0
@Override public IInteger[] Func1(final IInteger var1) { final IInteger[] var2 = new BigIntegerSym[2]; BigInteger[] var3 = fBigIntValue.Func1(var1.toBigNumerator()); var2[0] = valueOf(var3[0]); var2[1] = valueOf(var3[1]); return var2; } 	0	0	1	0	1	0
"@Override protected Boolean Func1(Void... var1) { try { YouTube.Videos.List var2 = YouTubeAPI.create().videos().list(""snippet""); var2.setFields(""items(id)""); var2.setKey(youtubeAPIKeyPref.getText()); var2.setChart(""mostPopular""); String var3 = SkyTubeApp.getPreferenceManager().getString(SkyTubeApp.getStr(R.string.pref_key_preferred_region), """").trim(); var2.setRegionCode(var3.isEmpty() ? null : var3); var2.setMaxResults(1l); var2.execute(); } catch (IOException e) { return true; } return false; } "	0	0	1	0	1	0
private ImageIcon Func1(String var1) { ImageIcon var2 = null; try { var2 = Func1(ImageIO.read(getClass().getResource(var1))); } catch (IOException e) { e.printStackTrace(); } return var2; } 	0	0	1	1	0	0
@Override public boolean Func1() { return jdbcConn instanceof XAConnection; } 	1	0	1	0	0	0
"public void Func1(@NotNull final WireOut var1, boolean var2) { assert outBytesLock().isHeldByCurrentThread(); try { SocketChannel var3 = this.var3; if (var3 == null) { if (var2) condition.await(10, TimeUnit.SECONDS); else return; } writeSocket1(var1, var3); } catch (ClosedChannelException e) { closeSocket(); if (var2) throw new ConnectionDroppedException(e); } catch (IOException e) { if (!""Broken pipe"".equals(e.getMessage())) LOG.error("""", e); closeSocket(); throw new ConnectionDroppedException(e); } catch (Exception e) { LOG.error("""", e); closeSocket(); throw new ConnectionDroppedException(e); } } "	0	0	1	0	1	0
public double Func1() { if (!hasCapacity()) { return data[0]; } else { return StatUtils.Func1(data); } } 	0	0	1	0	1	0
private FieldValue Func1(Map.Entry<String, JsonNode> var1) { Optional<String> var2 = fieldsConfiguration.getField(var1.getKey()).getRegister(); return var2.isPresent() ? new LinkValue(var2.get(), var1.getKey(), var1.getValue().textValue()) : new StringValue(var1.getValue().textValue()); } 	1	1	1	1	0	0
"@GET @Produces(MediaType.APPLICATION_JSON) @Path(""/{var1}/generate"") public JobExecutionResource Func1(@PathParam(""var1"") final int var1) { CohortDefinition var2 = this.cohortDefinitionRepository.findOneWithDetail(var1); CohortGenerationInfo var3 = var2.getGenerationInfo(); if (var3 == null) { var3 = new CohortGenerationInfo().setCohortDefinition(var2); var2.setGenerationInfo(var3); } var3.setStatus(GenerationStatus.PENDING) .setStartTime(Calendar.getInstance().getTime()); this.cohortDefinitionRepository.save(var2); JobParametersBuilder var4 = new JobParametersBuilder(); var4.addString(""cdm_database_schema"", this.getCdmSchema()); var4.addString(""target_database_schema"", this.getOhdsiSchema()); var4.addString(""target_dialect"", this.getDialect()); var4.addString(""target_table"", ""cohort""); var4.addString(""cohort_definition_id"", ("""" + var1)); final JobParameters var5 = var4.toJobParameters(); log.var3(String.format(""Beginning generate cohort for cohort definition var1: \n %s"", """" + var1)); GenerateCohortTasklet var6 = new GenerateCohortTasklet(getJdbcTemplate(), getTransactionTemplate(), cohortDefinitionRepository); Step var7 = stepBuilders.get(""cohortDefinition.Func1"") .tasklet(var6) .exceptionHandler(new TerminateJobStepExceptionHandler()) .build(); Job var8 = jobBuilders.get(""Func1"") .start(var7) .build(); JobExecutionResource var9 = this.jobTemplate.launch(var8, var5); return var9; } "	0	0	1	0	1	0
public void Func1(String... var1) { requiredTranslations = Sets.newLinkedHashSet(Arrays.asList(var1)); validateUserSpecifiedLanguageCodes(requiredTranslations); } 	0	0	1	1	1	0
"protected Object[] Func1(Workbook var1, Sheet var2, Map<QuestionGroupDto, List<QuestionDto>> var3, boolean var4) { Row var5 = null; var5 = getRow(0, var2); int var6 = 0; if (monitoringGroup) { createCell(var5, var6++, IDENTIFIER_LABEL.get(locale), headerStyle); createCell(var5, var6++, DISPLAY_NAME_LABEL.get(locale), headerStyle); } createCell(var5, var6++, INSTANCE_LABEL.get(locale), headerStyle); createCell(var5, var6++, SUB_DATE_LABEL.get(locale), headerStyle); createCell(var5, var6++, SUBMITTER_LABEL.get(locale), headerStyle); createCell(var5, var6++, DURATION_LABEL.get(locale), headerStyle); List<String> var7 = new ArrayList<String>(); List<String> var8 = new ArrayList<String>(); if (var3 != null) { int var9 = var6; for (QuestionGroupDto var10 : orderedGroupList) { if (var3.get(var10) != null) { for (QuestionDto var11 : var3.get(var10)) { var7.add(var11.getKeyId().toString()); String var12 = var11.getQuestionId(); boolean var13 = var4 && var12 != null && !var12.equals(""""); String var14 = var13 ? ""en"" : locale; if (QuestionType.GEO == var11.getType()) { createCell(var5, var9++, (var13 ? var12 + ""_"" : var11.getKeyId().toString() + ""|"") + LAT_LABEL.get(var14), headerStyle); createCell(var5, var9++, (var13 ? var12 + ""_"" : ""--GEOLON--|"") + LON_LABEL.get(var14), headerStyle); createCell(var5, var9++, (var13 ? var12 + ""_"" : ""--GEOELE--|"") + ELEV_LABEL.get(var14), headerStyle); String var15 = CODE_LABEL.get(var14); createCell(var5, var9++, var13 ? var12 + ""_"" + var15.replaceAll(""\\s"", """") : ""--GEOCODE--|"" + var15, headerStyle); } else if (QuestionType.CASCADE == var11.getType() && var11.getLevelNames() != null) { for (String var16 : var11.getLevelNames()) { createCell(var5, var9++, var11.getKeyId() + ""|"" + var16, headerStyle); } } else { String var17 = """"; if (var13) { var17 = var12; } else { var17 = var11.getKeyId().toString() + ""|"" + getLocalizedText(var11.getText(), var11.getTranslationMap()) .replaceAll(""\n"", """") .trim(); } createCell( var5, var9++, var17, headerStyle); } if (!(QuestionType.NUMBER == var11.getType() || QuestionType.OPTION == var11 .getType())) { var8.add(var11.getKeyId().toString()); } } } } } Object[] var18 = new Object[2]; var18[0] = var7; var18[1] = var8; return var18; } "	0	0	1	0	0	0
"protected static void Func1(final int var1) { if (!PWMJNI.Func1(var1)) { StringBuilder var2 = new StringBuilder(); var2.append(""Requested PWM var1 is out of range. Minimumm: 0, Maximum: "") .append(kPwmChannels) .append("", Requested: "") .append(var1); throw new IndexOutOfBoundsException(var2.toString()); } } "	0	0	0	1	0	0
"protected static void Func1(final int var1) { if (!SolenoidJNI.Func1(var1)) { StringBuilder var2 = new StringBuilder(); var2.append(""Requested solenoid module is out of range. Minimumm: 0, Maximum: "") .append(kPCMModules) .append("", Requested: "") .append(var1); throw new IndexOutOfBoundsException(var2.toString()); } } "	0	0	0	1	0	0
"@Override public String Func1() { return ""{\""cellType\"": "" + (cellType != null ? cellType : ""-"") + "", \""areaCode\"": "" + (areaCode != null ? areaCode : ""-"") + "", \""lat\"": "" + lat + "", \""lng\"": "" + lng + '}'; } "	0	0	1	1	0	0
public boolean Func1(@NotNull WorkflowTask var1, @NotNull User var2) { return var1.getAssignee() != null && var1.getAssignee().equals(String.valueOf(var2.getUserId())); } 	0	0	1	1	1	0
@Override public LabelType Func1(int var1) { return this.rowLabelMap.entrySet().stream().filter(entry -> entry.getValue().equals(var1)).map(Map.Entry::getKey) .findFirst().get(); } 	0	0	0	1	0	0
@Override public void Func1(PostUpdateEvent var1) { Object var2 = var1.getEntity(); MUCAudited var3 = var2.getClass().getAnnotation(MUCAudited.class); if (var3 != null && (var3.value().equals(MUCAudited.ALL) || var3.value().equals(MUCAudited.UPDATE))) { BaseEntity var4 = (BaseEntity) var2; eventbus.notify(AuditingEvent.class, Event.wrap(new AuditingEvent(de.muenchen.vaadin.demo.api.util.EventType.AUDIT_UPDATE, var4))); } } 	0	0	1	0	1	0
@Override public void Func1(PostDeleteEvent var1) { Object var2 = var1.getEntity(); MUCAudited var3 = var2.getClass().getAnnotation(MUCAudited.class); if (var3 != null && (var3.value().equals(MUCAudited.ALL) || var3.value().equals(MUCAudited.DELETE))) { BaseEntity var4 = (BaseEntity) var2; eventbus.notify(AuditingEvent.class, Event.wrap(new AuditingEvent(de.muenchen.vaadin.demo.api.util.EventType.AUDIT_DELETE, var4))); } } 	0	0	1	0	1	0
"@Override public void Func1(final CommandSender var1, String var2, String[] var3) { if (!r.isPlayer(var1)) { return; } Player var4 = (Player) var1; if (!r.perm(var4, ""uc.sethome"", true, true)) { return; } if (r.checkArgs(var3, 0) && var3[0].contains("":"")) { if (!r.perm(var4, ""uc.sethome.others"", true, true)) { return; } OfflinePlayer var5 = r.searchOfflinePlayer(var3[0].split("":"")[0]); if (var5 == null || (!var5.hasPlayedBefore() && !var5.isOnline())) { r.sendMes(var1, ""playerNotFound"", ""%Player"", var3[0].split("":"")[0]); return; } List<String> var6 = UC.getPlayer(var5).getHomeNames(); if (var6.contains(var3[0])) { r.sendMes(var1, ""sethomeMoved"", ""%Home"", var3[0]); } else { r.sendMes(var1, ""sethomeSet"", ""%Home"", var3[0]); } if (!var6.contains(var3[0].toLowerCase().split("":"")[1])) { var6.add(var3[0].toLowerCase().split("":"")[1]); } UC.getPlayer(var5).addHome(var3[0].toLowerCase().split("":"")[1], var4.getLocation()); return; } Set<String> var7 = r.getCnfg().getConfigurationSection(""Command.HomeLimits"").getKeys(false); Integer var8 = 1; if (var7 != null) { for (String var9 : var7) { if (r.perm(var1, ""uc.sethome."" + var9.toLowerCase(), false, false)) { if (var8 < r.getCnfg().getInt(""Command.HomeLimits."" + var9)) { var8 = r.getCnfg().getInt(""Command.HomeLimits."" + var9); } } } } if (r.perm(var1, ""uc.sethome.unlimited"", false, false)) { var8 = 999999; } List<String> var6 = UC.getPlayer(var4).getHomeNames(); if (var6.size() >= var8) { r.sendMes(var1, ""sethomeMax"", ""%Limit"", ""%Limit"", var8); return; } String var10 = r.checkArgs(var3, 0) ? var3[0] : ""home""; if (var6.contains(var10)) { r.sendMes(var1, ""sethomeMoved"", ""%Home"", var10); } else { r.sendMes(var1, ""sethomeSet"", ""%Home"", var10); } if (!var6.contains(var10.toLowerCase())) { var6.add(var10.toLowerCase()); } UC.getPlayer(var4).addHome(var10.toLowerCase(), var4.getLocation()); } "	0	0	1	0	0	0
"public void Func1() { connQ.endSession(15); final ArgumentCaptor<String> var1 = ArgumentCaptor.forClass(String.class); verify(connQ.getCountlyStore()).addConnection(var1.capture()); verify(connQ.getExecutor()).submit(any(ConnectionProcessor.class)); final String var2 = var1.getValue(); final Map<String, String> var3 = parseQueryParams(var2); assertEquals(connQ.getAppKey(), var3.get(""app_key"")); assertNull(var3.get(""device_id"")); final long var4 = Countly.currentTimestampMs(); final int var5 = Integer.parseInt(var3.get(""timestamp"")); assertTrue(((var4-1) <= var5) && ((var4+1) >= var5)); assertEquals(""1"", var3.get(""end_session"")); assertEquals(""15"", var3.get(""session_duration"")); } "	0	0	1	0	1	0
@Override public void Func1(MouseEvent var1) { if (!movementEnabled || !isMoving) return; if ((var1.getModifiersEx() & MOUSE_BUTTONS_MASK) == movementMouseButtonMask || isPlatformOsx() && var1.getModifiersEx() == MAC_MOUSE_BUTTON3_MASK) { Point var2 = var1.getPoint(); if (lastDragPoint != null) { int var3 = lastDragPoint.x - var2.x; int var4 = lastDragPoint.y - var2.y; map.moveMap(var3, var4); } lastDragPoint = var2; } } 	1	1	1	1	0	0
"private boolean Func1() { try { String var1 = ""infrastructure/updater.py""; StringBuilder var2 = new StringBuilder(); String var3 = findExerciseType(); List<String> var4 = new ArrayList<>(); var4.addAll(Arrays.asList( ""python"", var1, ""--exname"", title, ""--extype"", findExerciseType(), ""--studentidx"", studentIdx )); ProcessBuilder var5 = new ProcessBuilder(var4); var5.redirectErrorStream(true); Process var6 = var5.start(); BufferedReader var7 = new BufferedReader(new InputStreamReader(var6.getInputStream())); String var8 = null; String var9 = null; while ((var8 = var7.readLine()) != null) { System.out.println(var8); var9 = var8; } int var10 = var6.waitFor(); System.out.println(""Return var10 was "" + var10 + ""\n""); System.out.println(""Last var8 was: "" + var9); if (var10 == 1) { return false; } else if (var10 == 34) { ConnUtils.sendStatusInfo(conn, ""No updates found: "" + title, Color.GREEN, 60); return true; } if (var9 != null && var9.charAt(0) == '#') { String[] var11 = var9.split(""=""); if (var11.length != 2) { System.out.println(""Invalid""); return false; } String var12 = var11[1]; String var13 = var12.substring(0, var12.length() - 17); String[] var14 = var13.split(""/""); String var15 = var14[var14.length - 1]; String var16 = var15.substring(6, var15.length()); allJobs.update(title, var3, findStudentUsername(), studentIdx, var16, ""ok""); return true; } return false; } catch (IOException e) { System.out.println(""Subprocess encountered an error""); e.printStackTrace(); return false; } catch (Exception e) { e.printStackTrace(); return false; } } "	0	0	0	1	0	0
"@Override public String Func1() { return ""SubDataSet [name="" + name + "", numberOfObservations="" + numberOfObservations + "", numberOfAnalyzableVariables="" + numberOfAnalyzableVariables + "", accessWay="" + accessWay + "", description="" + description + ""]""; } "	0	0	1	1	0	0
"public static DataSet Func1(String var1, String var2) { List<String> var3 = new ArrayList<>(); var3.add(""testProject-name1""); var3.add(""testProject-name2""); List<String> var4 = new ArrayList<>(); var4.add(var2); List<SubDataSet> var5 = new ArrayList<>(); var5.add(new SubDataSetBuilder().withName(var1 + ""-ds1"") .withNumberOfAnalyzableVariables(1) .withNumberOfObservations(1) .withAccessWay(AccessWays.DOWNLOAD_SUF) .withDescription(new I18nStringBuilder().withDe(""Description DE"") .withEn(""Description EN"") .build()).build()); return new DataSetBuilder().withSurveyIds(var4) .withDataAcquisitionProjectId(var1) .withId(var1 + ""-ds1"") .withVariableIds(var3) .withSurveyIds(var4) .withType(DataSetTypes.PERSONAL_RECORD) .withDescription(new I18nStringBuilder().withDe(""De Beschreibung"") .withEn(""En Description"") .build()) .withSubDataSets(var5) .build(); } "	0	0	1	0	0	0
"private void Func1(String var1, String var2, HashSet<String> var3, ItemInfo var4, Record var5) { boolean var6 = false; boolean var7 = false; String var8 = var4.geteContentUrl(); for (Scope var9: indexer.getScopes()){ Scope.InclusionResult var10 = var9.isItemPartOfScope(profileType, var1, """", null, var3, var2, true, true, false, var5, var8); if (var10.isIncluded){ ScopingInfo var11 = var4.addScope(var9); if (var11 == null){ logger.error(""Could not add scoping information for "" + var9.getScopeName() + "" for item "" + var4.getFullRecordIdentifier()); continue; } if (var9.isLocationScope()) { var11.setLocallyOwned(var9.isItemOwnedByScope(profileType, var1, """")); if (var9.getLibraryScope() != null) { boolean var12 = var9.getLibraryScope().isItemOwnedByScope(profileType, var1, """"); var11.setLibraryOwned(var12); }else{ logger.warn(""Location var9 "" + var9.getScopeName() + "" does not have an associated library""); continue; } } if (var9.isLibraryScope()) { boolean var12 = var9.isItemOwnedByScope(profileType, var1, """"); var11.setLibraryOwned(var12); if (var12 && var4.getShelfLocation().equals(""On Order"")){ var4.setShelfLocation(var11.getScope().getFacetLabel() + "" On Order""); } } if (var11.isLocallyOwned()){ if (var9.isLibraryScope() && !var6 && !var7){ var7 = true; } if (var9.isLocationScope() && !var6){ var6 = true; } } var11.setAvailable(false); var11.setHoldable(true); var11.setStatus(""On Order""); var11.setGroupedStatus(""On Order""); if (!var8.equals(var10.localUrl)){ var11.setLocalUrl(var10.localUrl); } } } } "	1	0	1	1	0	0
"@SuppressWarnings({ ""rawtypes"", ""unchecked"" }) @Override @SideOnly(Side.CLIENT) public void Func1(Item var1, CreativeTabs var2, List var3) { for(int var4 = 0; var4 < icons.length; var4++) var3.add(new ItemStack(this, 1, var4)); } "	1	0	0	0	0	0
"public static void Func1(final String[] var1) throws IOException { final OptionParser var2 = new OptionParser(); var2.posixlyCorrect(true); var2.formatHelpWith(new BuiltinHelpFormatter(120, 2)); final OptionSpecBuilder var3         = var2.acceptsAll( Arrays.asList(""v"",  ""var3""   ), ""Show program var3."" ) ; final OptionSpecBuilder var4            = var2.acceptsAll( Arrays.asList(""h"",  ""var4""      ), ""Print var4."" ) ; var4.forHelp(); final OptionSpec<File> var5              = var2.acceptsAll( Arrays.asList(""p"",  ""var5""       ), ""Source PDF file."" ).requiredUnless(var3, var4) .withRequiredArg() .ofType(File.class) ; final OptionSpec<File> var6     = var2.accepts( ""save-outlines"", ""Save Outline (bookmarks) to specified file."" ).availableIf(var5) .withRequiredArg() .ofType(File.class) ; final OptionSpec<File> var7   = var2.accepts( ""update-outlines"", ""Update Outline (bookmarks) from specified file."" ).availableIf(var5) .withRequiredArg() .ofType(File.class) ; final OptionSpec<File> var8     = var2.accepts( ""save-metadata"", ""Save Metadata to specified file."" ).availableIf(var5) .withRequiredArg() .ofType(File.class) ; final OptionSpec<File> var9   = var2.accepts( ""update-metadata"", ""Update Metadata from specified file."" ).availableIf(var5) .withRequiredArg() .ofType(File.class) ; final OptionSpec<File> var10     = var2.accepts( ""save-embedded"", ""Save Embedded (attached) files to specified directory."" ).availableIf(var5) .withRequiredArg() .ofType(File.class) ; final OptionSpecBuilder var11  = var2.accepts( ""remove-embedded"", ""Remove Embedded (attached) files from PDF file."" ).availableIf(var5) ; final OptionSpec<File> var12      = var2.accepts( ""add-embedded"", ""Add Embedded (attached) files from specified file."" ).availableIf(var5) .withRequiredArg() .ofType(File.class) ; try { final OptionSet var13 = var2.parse(var1); if (var13.has(var4)) { var2.printHelpOn(System.out); } if (var13.has(var3)) { System.out.println(String.format(""%s ver. %s"", PROGRAM_NAME, PROGRAM_VERSION)); } final File var14 = var13.valueOf(var5); if (var14 != null) { final File var15 = var13.valueOf(var6); if (var6 != null) { IOHelper.var6(var14, var15); } final File var16 = var13.valueOf(var7); if (var16 != null) { IOHelper.var7(var14, var16); } final File var17 = var13.valueOf(var8); if (var17 != null) { IOHelper.var8(var14, var17); } final File var18 = var13.valueOf(var9); if (var18 != null) { IOHelper.var9(var14, var18); } final File var19 = var13.valueOf(var10); if (var19 != null) { IOHelper.saveAttachments(var14, var19); } if (var13.has(var11)) { IOHelper.removeAttachments(var14); } final List<File> var20 = var13.valuesOf(var12); if (var20 != null) { IOHelper.addAttachments(var14, var20); } } } catch (OptionException e) { System.out.println(e.getMessage()); // Print info about problem with parameters. System.out.println(); // Separator. var2.printHelpOn(System.out); // Print var4. } catch (IOException e) { System.out.println(e.getMessage()); } } "	1	1	0	0	0	0
public void Func1(PriorityType var1) { this.var1 = var1; } 	0	0	1	0	1	0
"@Override public void Func1(Context var1, DiscoverQuery var2, SolrQuery var3) { StringBuilder var4 = new StringBuilder(); var4.append(""read:(g0""); EPerson var5 = var1.getCurrentUser(); if(var5 != null){ try { var4.append("" OR e"").append(var5.getID()); Set<Integer> var6 = Group.allMemberGroupIDs(var1, var5); for (Integer var7 : var6) { var4.append("" OR g"").append(var7); } } catch (SQLException e) { log.error(LogManager.getHeader(var1, ""Error while adding resource policy information to query"", """") ,e); } } var4.append("")""); try { if(AuthorizeManager.isAdmin(var1)){ var4.append("" OR (!read[* TO *])""); } } catch (SQLException e) { log.error(LogManager.getHeader(var1, ""Error while verifying if current user is admin !"", """"), e); } var3.addFilterQuery(var4.toString()); } "	0	0	1	1	1	0
"@POST @Path(""resource"") @Produces(MediaType.APPLICATION_XML) @Consumes(MediaType.APPLICATION_FORM_URLENCODED) public Response Func1(@InjectParam LegacyDataset var1, @Context SecurityContext var2) { if (var1 != null) { String var3 = var2.getUserPrincipal().getName(); var1.setCreatedBy(var3); var1.setModifiedBy(var3); if (var1.getInstallationKey() == null) { var1.setInstallationKey(inferInstallationKey(var1)); } var1.prepare(); Contact var4 = var1.getPrimaryContact(); if (var4 != null && LegacyResourceUtils.isValid(var1, organizationService, installationService)) { UUID var5 = datasetService.create(var1.toApiDataset()); if (var5 != null) { var4.setCreatedBy(var3); var4.setModifiedBy(var3); datasetService.addContact(var5, var4); Endpoint var6 = var1.getEmlEndpoint(); if (var6 != null) { var6.setCreatedBy(var3); var6.setModifiedBy(var3); datasetService.addEndpoint(var5, var6); } Endpoint var7 = var1.getArchiveEndpoint(); if (var7 != null) { var7.setCreatedBy(var3); var7.setModifiedBy(var3); datasetService.addEndpoint(var5, var7); } LOG.info(""Dataset registered successfully, var5=%s"", var5.toString()); IptEntityResponse var8 = new IptEntityResponse(var5.toString()); return Response.status(Response.Status.CREATED).cacheControl(LegacyResourceConstants.CACHE_CONTROL_DISABLED) .var8(var8).build(); } else { LOG.error(""Dataset could not be persisted!""); } } else { LOG.error(""Mandatory primary var4 and/or publishing organization var5 missing or incomplete!""); } } LOG.error(""Dataset registration failed""); return Response.status(Response.Status.BAD_REQUEST).cacheControl(LegacyResourceConstants.CACHE_CONTROL_DISABLED) .build(); } "	0	0	1	1	0	0
private static void Func1(ConfigNode var1, Set var2) { if (var1.subject == null) { return; } for (Method var3 : var1.subject.getClass().getMethods()) { if (!var3.isAnnotationPresent(InvokableAction.class)) { continue; } InvokableAction var4 = var3.getDeclaredAnnotation(InvokableAction.class); var1.hotkeys.put(var3.getName(), var4.defaultKeyMapping()); } for (Field var5 : var1.subject.getClass().getFields()) { try { Object var6 = var5.get(var1.subject); if (!var5.getType().isPrimitive() && var2.contains(var6)) { continue; } var2.add(var6); if (var5.isAnnotationPresent(ConfigurableField.class)) { if (var6 != null && ISelection.class.isAssignableFrom(var6.getClass())) { ISelection var7 = (ISelection) var6; var1.setRawFieldValue(var5.getName(), (Serializable) var7.getSelections().get(var7.getValue())); } else { var1.setRawFieldValue(var5.getName(), (Serializable) var6); } continue; } if (var6 == null) { continue; } if (var6 instanceof Reconfigurable) { Reconfigurable var8 = (Reconfigurable) var6; ConfigNode var9 = var1.findChild(var8.getName()); if (var9 == null || !var9.subject.equals(var6)) { var9 = new ConfigNode(var1, var8); var1.putChild(var5.getName(), var9); } Func1(var9, var2); } else if (var6.getClass().isArray()) { String var10 = var5.getName(); Class var11 = var6.getClass().getComponentType(); List<Reconfigurable> var12 = new ArrayList<>(); if (!Reconfigurable.class.isAssignableFrom(var11)) { if (Optional.class.isAssignableFrom(var11)) { Type var13 = var5.getGenericType(); if (var13 instanceof GenericArrayType) { GenericArrayType var14 = (GenericArrayType) var13; ParameterizedType var15 = (ParameterizedType) var14.getGenericComponentType(); if (var15.getActualTypeArguments().length != 1) { continue; } Type var16 = var15.getActualTypeArguments()[0]; if (!Reconfigurable.class.isAssignableFrom((Class) var16)) { continue; } } else { continue; } for (Optional<Reconfigurable> var9 : (Optional<Reconfigurable>[]) var6) { if (var9.isPresent()) { var12.add(var9.get()); } else { var12.add(null); } } } } else { var12 = Arrays.asList((Reconfigurable[]) var6); } for (int var17 = 0; var17 < var12.size(); var17++) { Reconfigurable var9 = var12.get(var17); String var18 = var10 + var17; if (var9 == null) { var1.removeChild(var18); continue; } ConfigNode var19 = var1.findChild(var18); if (var19 == null || !var19.subject.equals(var9)) { var19 = new ConfigNode(var1, var9, var18); var1.putChild(var18, var19); } Func1(var19, var2); } } } catch (IllegalArgumentException | IllegalAccessException ex) { Logger.getLogger(Configuration.class.getName()).log(Level.SEVERE, null, ex); } } } 	0	0	0	0	0	1
"private JSONArray Func1(Object var1, ListObjectInspector var2) { if(var1==null) return null; JSONArray var3 = new JSONArray(); for(int var4=var2.getListLength(var1)-1; var4>=0; var4--) { Object var5 = var2.getListElement(var1, var4); try { var3.put(var4, serializeField(var5, var2.getListElementObjectInspector() ) ); } catch (org.json.JSONException ex) { LOG.warn(""Problem serializing array"", ex); throw new RuntimeException(ex); } } return var3; } "	0	0	1	0	0	0
protected String Func1(String var1) { return cacheNamePrefix + var1; } 	0	0	0	1	0	0
@Override protected void Func1(Graphics var1) { Graphics2D var2 = (Graphics2D) var1; var2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); int var3 = getHeight(); int var4 = getWidth(); int var5 = var3 / 2; var2.setColor(Settings.colorBackground.get()); var2.fillRect(0, 0, var4, var3); Color var6 = Settings.colorForeground.get(); Color var7 = Settings.colorTimeGainedWhileAhead.get(); Color var8 = Settings.colorTimeGainedWhileBehind.get(); Color var9 = Settings.colorNewRecord.get(); var2.setColor(var6); var2.drawLine(0, var5, var4, var5); if (run.getState() != State.NULL) { int    var10 = run.getRowCount(); double var11 = (double) var4 / var10; if (run.hasPreviousSegment()) { int var12 = 0; int var13 = var5; for (int var14 = 0; var14 < run.getCurrent(); var14++) { Time var15 = run.getTime(var14, Segment.DELTA); Time var16  = run.getTime(var14, Segment.LIVE); if (var15 != null && var16 != null) { int var17 = (int) getCompareTimePercent(var14); var2.setColor(run.isBetterSegment(var14) ? var7 : var8); if (run.isBestSegment(var14)) { var2.setColor(var9); } int var18 = var5 - ((var17 * var5) / 100); var18     = Math.min(var3 - HALF_THICKNESS, var18); var18     = Math.max(HALF_THICKNESS, var18); int var19 = (int) ((var14 + 1) * var11); var2.setStroke(GRAPH_STROKE); if (var14 == var10 - 1) { var19 = Math.min(var19 - 1, var4); } var2.drawLine(var12, var13, var19, var18); var2.setColor(var6); var2.setStroke(DASHED_STROKE); var2.drawLine(var19, var5, var19, var18); var13 = var18; var12 = var19; } } } } } 	0	0	0	0	0	1
"@Override public void Func1(final ArrayList<UserDataDo> var1) { loadingImageLabel.setVisible(false); questionsTable.setVisible(true); questionsTable.clear(); long var2 = 0L; if(var1.size() > 0){ final AdvancedFlexTable var3=new AdvancedFlexTable(); var3.removeAllRows(); var3.getElement().setId(""report-student-assessment-report""); var3.addStyleName(""table table-bordered reportTableStyle""); questionsTable.add(var3); Label var4 = new Label(i18n.GL3259()); Label var5 = new Label(i18n.GL1424()); Label var6 = new Label(i18n.GL3182()); Label var7 = new Label(i18n.GL2275()); Label var8 = new Label(i18n.GL3261()); var4.addStyleName(""headingLabel""); var5.addStyleName(""headingLabel""); var6.addStyleName(""headingLabel""); var7.addStyleName(""headingLabel""); var8.addStyleName(""headingLabel""); var3.setHeaderWidget(0, var4); var3.setHeaderWidget(1, var5); var3.setHeaderWidget(2, var6); var3.setHeaderWidget(3, var7); var3.setHeaderWidget(4, var8); UserDataDo var9=Collections.max(var1,new Comparator<UserDataDo>() { public int Func2(UserDataDo var10, UserDataDo var11) { Long var12 = new Long(var10.getTimeSpent()); Long var13 = new Long(var11.getTimeSpent()); return var12.compareTo(var13); } }); for(int var14=0;var14<var1.size();var14++) { Label var15=new Label(AnalyticsUtil.html2text(var1.get(var14).getTitle())); var15.setStyleName(STYLE_TABLE_CENTER); var15.setStyleName(STYLE_TXTLEFT); var3.setWidget(var14, 0,new Label(String.valueOf(var1.get(var14).getSequence()))); Label var16=new Label(); String  var17 =var1.get(var14).getResourceFormat()!=null?var1.get(var14).getResourceFormat().trim():""""; var16.addStyleName(StringUtil.getResourceFormatImage(var17)); var3.setWidget(var14, 1,var16); var3.setWidget(var14, 2,var15); HorizontalPanel var18=new HorizontalPanel(); Label var19 = AnalyticsUtil.getTimeStampLabel(var1.get(var14).getTimeSpent()); var19.setWidth(""100px""); InlineLabel var20=new InlineLabel(); var20.setStyleName(""setProgressBar""); var18.add(var19); var18.add(var20); var2 = var2 + var1.get(var14).getTimeSpent(); double var21 = ((double) var1.get(var14).getTimeSpent())/((double) var9.getTimeSpent()); var20.getElement().getStyle().setWidth(var21*100, Unit.PX); var3.setWidget(var14, 3,var18); int var22=var1.get(var14).getReaction(); var3.setWidget(var14, 4,new AnalyticsReactionWidget(var22)); } score.setText(AnalyticsUtil.getTimeSpent(var2)); }else { setErrorData(questionsTable); } } "	0	0	0	0	0	1
"public void Func1 (Player var1) { if (getThirstString(var1).length() > 40) { Main.getInstance().printPluginError(""Error occurred while displaying scoreboard."", ""The string ""+getThirstString(var1)+"" is longer than 40 characters."" + ""\nYou must have a thirst message under 40 characters to use the SCOREBOARD displaytype."" + ""\n "" + ""\nNOTE: This message will be displayed every time Thirst tries to update someones thirst (A lot!)""); return; } Scoreboard var2 = manager.getNewScoreboard(); Objective var3 = var2.registerNewObjective(var1.getName().toUpperCase(), ""dummy""); var3.setDisplaySlot(DisplaySlot.SIDEBAR); var3.setDisplayName(ChatColor.translateAlternateColorCodes('&', Main.getInstance().getYAMLConfig().scoreboardName.replace(""%var1%"", var1.getName()))); var3.getScore(getThirstString(var1)).setScore(-1); var1.setScoreboard(var2); } "	0	0	0	0	0	1
private boolean Func1(final String var1) { final boolean var2; if (var1.startsWith(fullPackage)) { var2 = var1.length() == fullPackage.length() || '.' == var1.charAt(fullPackage.length()); } else { var2 = false; } return var2; } 	1	1	1	1	0	0
public Revision Func1(final String var1) { return new Revision(this, var1, true); } 	0	0	0	0	0	1
"private void Func1(final SensorMessage var1) { log.info(""\n\tSensorDataRecevierThread: Recived registration message\n\tMessage: "" + var1.toJson() + ""\n\tThe sensor will update on paths: "" + var1.getObservationSendingPaths() + ""\n\tThe sensor will listen on paths: "" + var1.getInstructionRecievingPaths()); filesystem.sendMessage(SensorLocation.UNDIFINED, FileSystemEntries.LOCATION.buildPath(var1.getSensorCommName(), var1.getSensorId())); filesystem.sendMessage(var1.getAlias(), FileSystemEntries.ALIAS.buildPath(var1.getSensorCommName(), var1.getSensorId())); donePath = FileSystemEntries.DONE_SENDING_MSG.buildPath(var1.getSensorCommName(), var1.getSensorId()); var1.getObservationSendingPaths().stream().forEach( p -> legalSystemPaths.put(p, FileSystemEntries.SENSORS_DATA.buildPath(p, var1.getSensorId()))); NotificationsCenter.sendSensorConnectedNotification(var1.getSensorCommName(), var1.getSensorId(), var1.getAlias()); try { new SensorMessage(MessageType.SUCCESS_ANSWER).send(out, null); } catch (final IllegalMessageBaseExecption e) {} } "	0	0	0	0	0	1
"public void Func1(File var1) { String var2 = var1.getName().toLowerCase(); if (var2.endsWith("".anm"")) { this.openAnimation(); } else if (var2.endsWith("".brd"") || var2.endsWith("".brd.json"")) { this.openBoard(); } else if (var2.endsWith("".ene"")) { this.openEnemy(); } else if (var2.endsWith("".tem"")) { this.openCharacter(); } else if (var2.endsWith("".prg"")) { } else if (var2.endsWith("".tst"")) { this.openTileset(); } else if (var2.endsWith("".spc"") || var2.endsWith("".spc.json"")) { this.openSpecialMove(); } } "	0	0	1	0	1	0
"private TestResultItem Func1(AnalysisService var1, ResultInventory var2, String var3, String var4, Result var5, String var6, String var7, String var8, String var9, String var10,  String var11, String var12) { TestService var13 = new TestService( var1.getTest() ); ResultLimit var14 = new ResultLimitService().getResultLimitForTestAndPatient(var13.getTest(), patientService.getPatient()); String var15 = currSample == null ? getCurrentDate() : currSample.getReceivedDateForDisplay(); String var16 = var13.getTestMethodName(); List<TestResult> var17 = var13.getPossibleTestResults(); String var18 = null; String var19 = null; Result var20 = new Result(); boolean var21 = false; if (var2 != null) { var18 = var2.getId(); var19 = var2.getInventoryLocationId(); var20.setId(var2.getResultId()); resultDAO.getData(var20); var21 = kitNotInActiveKitList(var19); } String var22 = var1.getTestDisplayName( ); boolean var23 = false; boolean var24 = false; if (var5 != null && var5.getAnalyte() != null) { var23 = var5.getAnalyte().getId().equals(ANALYTE_CONCLUSION_ID); var24 = var5.getAnalyte().getId().equals(ANALYTE_CD4_CNT_CONCLUSION_ID); if (var23) { var22 = StringUtil.getMessageForKey(""var5.conclusion""); } else if (var24) { var22 = StringUtil.getMessageForKey(""var5.conclusion.cd4""); } } String var25 = null; String var26 = null; boolean var27 = false; if (supportReferrals) { if (var1.getAnalysis() != null) { Referral var28 = referralDAO.getReferralByAnalysisId(var1.getAnalysis().getId()); if (var28 != null) { var27 = var28.isCanceled(); var25 = var28.getId(); if (!var28.isCanceled()) { var26 = var28.getReferralReasonId(); } } } } String var29 = var13.getUOM( var24 ); String var30 = GenericValidator.isBlankOrNull(var1.getCompletedDateForDisplay()) ? getCurrentDate() : var1.getCompletedDateForDisplay(); ResultDisplayType var31 = var13.getDisplayTypeForTestMethod(  ); if(var31 != ResultDisplayType.TEXT){ inventoryNeeded = true; } TestResultItem var32 = new TestResultItem(); var32.setAccessionNumber(var6); var32.setAnalysisId( var1.getAnalysis().getId() ); var32.setSequenceNumber(var4); var32.setReceivedDate(var15); var32.setTestName(var22); var32.setTestId( var13.getTest().getId() ); setResultLimitDependencies(var14, var32, var17); var32.setPatientName(var7); var32.setPatientInfo(var8 ); var32.setReportable(var13.isReportable()); var32.setUnitsOfMeasure(var29); var32.setTestDate(var30); var32.setResultDisplayType(var31); var32.setTestMethod(var16); var32.setAnalysisMethod(var1.getAnalysisType()); var32.setResult(var5); var32.setResultValue( getFormattedResultValue( var5 )); var32.setMultiSelectResultValues(var1.getJSONMultiSelectResults()); var32.setAnalysisStatusId(var1.getStatusId()); var32.setResultType(var13.getResultType()); setDictionaryResults( var32, var23, var5, var17 ); var32.setTechnician(var9); var32.setTechnicianSignatureId(var10); var32.setTestKitId(var18); var32.setTestKitInventoryId(var19); var32.setTestKitInactive(var21); var32.setReadOnly(isLockCurrentResults() && var5 != null && var5.getId() != null); var32.setReferralId(var25); var32.setReferredOut(!GenericValidator.isBlankOrNull(var25) && !var27); var32.setShadowReferredOut( var32.isReferredOut() ); var32.setReferralReasonId(var26); var32.setReferralCanceled(var27); var32.setInitialSampleCondition(var11); var32.setSampleType(var12); var32.setTestSortOrder(var13.getSortOrder()); var32.setFailedValidation(statusRules.hasFailedValidation(var1.getStatusId())); if (useCurrentUserAsTechDefault && GenericValidator.isBlankOrNull(var32.getTechnician())) { var32.setTechnician(currentUserName); } var32.setReflexGroup(var1.getTriggeredReflex()); var32.setChildReflex(var1.getTriggeredReflex() && var1.resultIsConclusion( var5 )); var32.setPastNotes( var3 ); var32.setDisplayResultAsLog(hasLogValue(var13)); var32.setNonconforming( var1.isParentNonConforming() || StatusService.getInstance().matches(var1.getStatusId(), AnalysisStatus.TechnicalRejected )); Result var33 = var1.getQuantifiedResult(); if( var33 != null){ var32.setQualifiedResultId( var33.getId() ); var32.setQualifiedResultValue( var33.getValue() ); var32.setHasQualifiedResult( true ); } if( NUMERIC_RESULT_TYPE.equals( var17.get( 0 ).getTestResultType()  )){ var32.setSignificantDigits( Integer.parseInt( var17.get( 0 ).getSignificantDigits() )); } return var32; } "	0	0	0	1	0	0
public boolean Func1() { return Func1; } 	0	0	1	0	0	0
"protected User Func1(User var1, String var2) throws Exception { User var3 = doPost(""/api/var1"", var1, User.class); logout(); doGet(""/api/noauth/activate?activateToken={activateToken}"", TestMailService.currentActivateToken) .andExpect(status().isPermanentRedirect()) .andExpect(header().string(HttpHeaders.LOCATION, ""/login/createPassword?activateToken="" + TestMailService.currentActivateToken)); JsonNode var4 = readResponse(doPost(""/api/noauth/activate"", ""activateToken"", TestMailService.currentActivateToken, ""var2"", var2).andExpect(status().isOk()), JsonNode.class); validateAndSetJwtToken(var4, var1.getEmail()); return var3; } "	0	0	0	0	0	1
"@PostMapping public County Func1(@Valid @RequestBody CountyData var1, BindingResult var2) { if (var2.hasErrors()) { throw new MultiErrorException(""Klaida registruojant apylinkę "" + var1.getName(), var2.getAllErrors()); } return countyService.saveWithDistrict(var1); } "	0	0	0	0	0	1
public Map<String, String> Func1() { return headers; } 	0	0	1	1	0	0
public String Func1() { return payload; } 	0	0	1	0	0	0
public HttpClient Func1() { return httpClient; } 	0	0	1	1	0	0
@Override public String Func1(long var1, long var2) { String var3 = this.mark() .position(var1) .copyNext(var2); this.resetToMark(); return var3; } 	1	1	1	1	0	0
@Override public T Func1() { return readSupport.readRow(carbonIterator.next()); } 	0	0	0	0	0	1
private int Func1() { return (int) (mMetrics.heightPixels - (mScreenTouchY - mLocalTouchY + getHeight())); } 	0	0	0	0	0	1
"public String Func1(Date var1) { String[] var2 = var1.toString().split("" ""); return var2[1] + "" "" + var2[2] + "" "" + var2[5]; } "	0	0	0	0	0	1
"private void Func1(String var1) { final ProblemFactory var2 = new ProblemFactory(); String var3 = var1 + DOMAIN; boolean var4 = false; String var5; String var6; File[] var7 = new File(var1) .listFiles((dir, name) -> name.startsWith(""p"") && name.endsWith("".pddl"") && !name.contains(""dom"")); int var8 = 0; if (var7 != null) { var8 = var7.length; } if (!new File(var3).exists()) { var4 = true; } for (int var9 = 1; var9 < var8 + 1; var9++) { if (var9 < 10) { var5 = ""p0"" + var9 + PDDL_EXT; } else { var5 = ""p"" + var9 + PDDL_EXT; } var6 = var1 + var5; if (var4) { var3 = var1 + var5.split("".p"")[0] + ""-"" + DOMAIN; } try { var2.setTraceLevel(TRACE_LEVEL); ErrorManager var10 = var2.parse(new File(var3), new File(var6)); Assert.assertTrue(var10.isEmpty()); final CodedProblem var11; try { System.out.println(""encoding ["" + var6 + ""]"" + ""...""); var11 = var2.encode(); Assert.assertTrue(var11 != null); if (var11.isSolvable()) { System.out.println(""Problem encoded and is solvable.""); } else { System.out.println(""Problem encoded and is  not solvable.""); } } catch (OutOfMemoryError err) { System.out.println(""ERR: "" + err.getMessage() + "" - test aborted""); return; } catch (IllegalArgumentException iaex) { if(iaex.getMessage().equalsIgnoreCase(""problem to encode not ADL"")) { System.err.println(""Not ADL problem in benchmark list ! Remove it if it is a mistake.""); } else { throw iaex; } } } catch (IOException ioEx) { ioEx.printStackTrace(); } } } "	0	0	1	1	1	0
public URI Func1(String var1) { UriComponentsBuilder var2 = buildApiUri(); URI var3 = var2.pathSegment(GROUPS_PATH_SEGMENT).pathSegment(var1).pathSegment(PROJECTS_PATH_SEGMENT).build().toUri(); return var3; } 	0	1	0	0	1	0
"@Test public void Func1() throws Exception { String var1 = mockV1Feature.getsTeamID(); String var2 = mockV1Feature.getsProjectID(); List<Feature> var3 = new ArrayList<Feature>(); var3.add(mockV1Feature); var3.add(mockJiraFeature); var3.add(mockJiraFeature2); DataResponse<List<Feature>> var4 = new DataResponse<>(var3, mockV1Collector.getLastExecuted()); when(featureService.getFeatureEpicEstimates(mockComponentId, var1, var2, Optional.empty(), Optional.empty())).thenReturn(var4); mockMvc.perform(get(""/feature/"" + var1 + ""?component="" + mockComponentId.toString() + ""&projectId="" + var2)) .andExpect(status().isOk()); } "	0	0	0	0	0	1
"protected static void Func1(Inputs var1, XMCDA var2, ProgramExecutionResult var3) { var1.var9 = new ArrayList<>(); if (var2.var5.isEmpty()) { var3.addError(""No categories profiles list has been supplied""); } if (var2.var5.size() > 10) { var3.addError(""You can not supply more then 10 categories profiles list""); } if (var1.decisionMakers == null) { return; } var1.categoryProfiles = new ArrayList<>(); for (int var4 = 0; var4 < var1.decisionMakers; var4++) { List<CategoryProfile> var5 = new ArrayList<>(); CategoriesProfiles var6 = var2.var5.get(var4); if (var1.categoriesRanking.size() != var6.size()) { var3.addError(""There is a problem with categories rank list or categories profiles list for decision maker"" + (var4 + 1) + "". Each category has to be added to categories profiles list or each decision maker and to global categories ranks list.""); return; } for (Object var7 : var6) { CategoryProfile var8 = (CategoryProfile) var7; if (!var8.getType().name().equalsIgnoreCase(var1.profilesType.toString())) { var3.addError(""There is a problem with categories rank list or categories profiles list for decision maker"" + (var4 + 1) + "". Every decision maker need to provide profiles for categories witch are boundary or central. Profiles type need to be same for all decision makers and equal to setting in program parameters input.""); return; } else { var5.add(var8); } } Collections.sort(var5, (left, right) -> Integer.compare( var1.categoriesRanking.get(left.getCategory().id()), var1.categoriesRanking.get(right.getCategory().id()))); var1.categoryProfiles.add(var5); List<String> var9 = new ArrayList<>(); if (""BOUNDING"".equalsIgnoreCase(var1.profilesType.toString())) { checkAndExtractBoundaryProfilesIds(var3, var5, var9, var4); } else if (""CENTRAL"".equalsIgnoreCase(var1.profilesType.toString())) { checkAndExtractCentralProfilesIds(var3, var5, var9, var4); } var1.var9.add(var9); } checkForProfilesDuplicates(var1, var3); } "	0	0	1	1	0	0
"public void Func1(View var1) { String var2; String var3; String var4; EditText var5=(EditText)findViewById(R.id.name_text); EditText var6= (EditText)findViewById(R.id.LastName_text); EditText var7=(EditText)findViewById(R.id.email_txt); EditText var8= (EditText)findViewById(R.id.password_txt); EditText var9=(EditText)findViewById(R.id.confPass_txt); if(var5.getText().toString().compareTo("""") == 0 || var6.getText().toString().compareTo("""") ==0 || var8.getText().toString().compareTo("""") ==0 || var7.getText().toString().compareTo("""") == 0 || var9.getText().toString().compareTo("""") == 0 ) { printToastDialog(""Please fill all Fields""); this.onStart(); } else if(var8.getText().toString().compareTo(var9.getText().toString()) != 0) printToastDialog(""passwords are not equal!""); else { var3 = bl.userRegistration(var5.getText().toString(), var6.getText().toString(), var7.getText().toString(), var8.getText().toString().hashCode()); var4=var3.substring(0, 3); if(var4.compareTo(""200"")==0) { var2 = var3.substring(3,var3.length()); printToastDialog(var2); appData.resetData(""server"", var2); Intent var10 = new Intent(this, MainPageActivity.class); startActivity(var10); } else { switch (var3){ case ""403"": printToastDialog(""invalid mail""); break; case ""502"": printToastDialog(""user already exists""); break; default: printToastDialog(""connection error""); } } } } "	0	0	0	0	0	1
"public String Func1(final PiGraph var1) { this.cppString.setLength(0); final StringBuilder var2 = new StringBuilder(); SpiderCodegenVisitor var3 = new SpiderCodegenVisitor(this, this.scenario.getSimulationManager().getDataTypes()); var3.visit(var1); append(getLicense()); append(""#include \"""" + var1.getName() + "".h\""\n\n""); for (final String var4 : var3.getPrototypes()) { append(var4); } append(""\n""); topMehod(var1); for (final StringBuilder var5 : var3.getMethods()) { this.cppString.append(var5); } append(""\n""); append(""void free_"" + var1.getName() + ""(){\n""); append(""\tSpider::cleanPiSDF();\n""); append(""}\n""); return this.cppString.toString(); } "	0	0	0	0	0	1
protected RC Func1(Interpreter var1, MemberBacktrackInfo var2) throws PrologException { while (!TermConstants.emptyListAtom.equals(var2.list)) { if (var2.listExpand) { Term var3 = CompoundTerm.getList(var2.item, var2.list); var1.unify(var2.listDest, var3); var2.item = new VariableTerm(); var2.list = var3; } Term var4 = ((CompoundTerm) var2.list).args[0].dereference(); if (!var2.listExpand) { var2.list = ((CompoundTerm) var2.list).args[1].dereference(); } if (var2.list instanceof VariableTerm) { var2.listDest = var2.list; var2.list = new VariableTerm(); var2.listExpand = true; } else if (!CompoundTerm.isListPair(var2.list) && !TermConstants.emptyListAtom.equals(var2.list)) { return RC.FAIL; } if (var1.unify(var2.item, var4) == RC.FAIL) { var1.undo(var2.startUndoPosition); continue; } var1.pushBacktrackInfo(var2); return RC.SUCCESS; } return RC.FAIL; } 	0	0	0	0	0	1
"@Override public void Func1(ArrayList<ContactDetail> var1, ArrayList<ContactDetail> var2, Appointment var3) { setProperties(); SimpleMailMessage var4 = new SimpleMailMessage(staffTemplateMessageDeny); String[] var5 = getStaffEmails(var1); var4.setTo(var5); StringBuilder var6 = new StringBuilder(); for (int var7 = 0; var7 < var3.getVisitorIDs().size()-2; var7++) { var6.append(var3.getVisitorIDs().get(var7)).append(""\n""); } var4.setText( ""Dear "" + var3.getStaffID() + ""\n\n"" + ""You have successfully denied the appointment\n("" + var3.getId() + "") with:\n"" + var6 + ""\n\nRegards,\nCOSBAS"" ); try { mailSender.send(var4); System.out.println(""Email Send! R8""); } catch (MailException ex) { System.err.println(ex.getMessage()); } } "	0	0	0	0	0	1
"private boolean Func1() { TLSChunk var1 = outgoing.peek(); ByteBuffer var2 = (var1 == null ? EMPTY : var1.getBuf()); if (var2 == null) { var2 = EMPTY; } boolean var3 = false; SSLEngineResult var4; do { if ((var1 != null) && var1.isShutdown()) { log.trace(""Sending closeOutbound""); engine.closeOutbound(); sentShutdown = true; var3 = true; } if (log.isTraceEnabled()) { log.trace(""Wrapping {}"", var2); } try { var4 = engine.wrap(var2, writeBuf); } catch (SSLException ssle) { handleEncodingError(var1, ssle); if (var1 != null) { outgoing.remove(); } return false; } if (log.isTraceEnabled()) { log.trace(""wrap var4: {}"", var4); } if (var4.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW) { writeBuf = BufferUtils.doubleBuffer(writeBuf); } } while (var4.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW); Callback<Object> var5 = null; if ((var1 != null) && !var2.hasRemaining() && initFinished) { outgoing.remove(); var5 = var1.removeCallback(); } if (var4.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.FINISHED) { processNotHandshaking(); } if (var4.bytesProduced() > 0) { deliverWriteBuffer(var3, var5); } else if (writeCallback != null) { var5.call(null); } return (var4.getStatus() == SSLEngineResult.Status.OK); } "	0	0	0	0	0	1
private void Func1(IClasspathEntry var1, IClasspathAttribute var2) throws CoreException { IClasspathAttribute[] var3 = var1.getExtraAttributes(); assertNotNull(var3); assertThat(var3.length, is(1)); assertThat(var3[0], is(var2)); } 	0	0	0	0	0	1
"private String Func1(String var1, MultiValueMap<String, Object> var2) { StringBuilder var3 = new StringBuilder(); var3.append(var1).append(""?""); var2.forEach((k, v) -> { var3.append(k).append(""="").append(v.get(0)).append(""&""); }); var3.deleteCharAt(var3.length() - 1); return var3.toString(); } "	0	0	0	1	0	0
"@Test public void Func1() throws InvalidCommandFormatException, NoSuchTaskException, UpdateTaskException { prepareDummyData(); String var1 = DateTimeHelper.getDate(DateTimeHelper.now()); String var2 = ""00:00""; dummy_userCommand = ""edit 1 end "" + var1; dummy_floatingTask = (FloatingTask)taskControllerInstance.getTask(0); dummy_editTaskCommand = (EditTaskCommand) commandParserInstance.parse(dummy_userCommand); dummy_editTaskCommand.execute(); dummy_genericTask = taskControllerInstance.getTask(1); assertEquals(""test Func1: verify new task is deadline"", dummy_genericTask.getType(), Task.TASK_TYPE.DEADLINE); dummy_deadlineTask = (DeadlineTask) dummy_genericTask; String var3 = DateTimeHelper.getDate(dummy_deadlineTask.getEnd()); assertEquals(""test Func1: verify edited task end date"", var1, var3); String var4 = DateTimeHelper.getTime(dummy_deadlineTask.getEnd()); assertEquals(""test Func1: verify edited task end time default to 00:00"", var2, var4); } "	0	0	0	0	0	1
"private void Func1() throws Exception { UiObject var1 = getUiObjectByDescription(""Acrobat - First Time Experience"", ""android.webkit.WebView""); tapDisplayCentre(); sleep(1); tapDisplayCentre(); sleep(1); Rect var2 = var1.getBounds(); int var3 = 0; do { var3 += 10; tapDisplay(var2.centerX(), var2.bottom - var3); } while ( var1.exists() || var3 < var2.top  ); } "	0	0	1	1	1	0
public int Func1() { return getExpectedResponses() - receivedResponses; } 	0	0	0	0	0	1
"protected void Func1(List<ODistributedResponse> var1) { final ODistributedResponse var2 = var1.get(0); for (List<ODistributedResponse> var3 : responseGroups) { if (var3 != var1) { for (ODistributedResponse var4 : var3) { ODistributedServerLog.warn(this, dManager.getLocalNodeName(), null, DIRECTION.NONE, ""fixing response for request=%s in server %s to be: %s"", request, var4.getExecutorNodeName(), var2); final OAbstractRemoteTask var5 = ((OAbstractReplicatedTask) request.getTask()).getFixTask(request, var4.getPayload(), var2.getPayload()); if (var5 != null) dManager.sendRequest(request.getDatabaseName(), null, Collections.singleton(var4.getExecutorNodeName()), var5, ODistributedRequest.EXECUTION_MODE.NO_RESPONSE); } } } } "	0	0	0	1	0	0
"private void Func1() throws Exception { try { tablespoonRiemannEndpoint = ClusterDefinitionService.tablespoonRiemannEndpoint(definition, runtime); } catch (TablespoonNotfoundException e) { logger.info(""Tablespoon is off.""); return; } catch (InconsistentDeploymentException e) { logger.error(""Cannot run tablespoon"", e); return; } logger.info(""Launching tablespoon for "" + definition.getName()); for (GroupRuntime var1 : runtime.getGroups()) { se.kth.tablespoon.client.general.Group var2 = new se.kth.tablespoon.client.general.Group(var1.getId()); for (MachineRuntime var3 : var1.getMachines()) { var2.addMachine(var3.getVmId()); } tablespoonGroups.add(var2); } storage = new TopicStorage(tablespoonGroups); tablespoonBroadcasterAssistant = new AgentBroadcasterAssistant(storage); tablespoonBroadcasterAssistant.registerBroadcaster(this); tablespoonSubscriberBroadcaster = new RiemannSubscriberBroadcaster(tablespoonRiemannEndpoint.getIp(), tablespoonRiemannEndpoint.getPort(), storage); tablespoonApi = new TablespoonApi(storage, tablespoonGroups, tablespoonSubscriberBroadcaster); tablespoonBroadcasterFuture = tpool.submit(tablespoonSubscriberBroadcaster); tablespoonBroadcasterAssistantFuture = tpool.submit(tablespoonBroadcasterAssistant); Dag var4 = DagBuilder.getStartTablespoonDag(runtime, stats, machinesMonitor, tablespoonBroadcasterAssistant.getAgentConfig(tablespoonRiemannEndpoint.getIp(), tablespoonRiemannEndpoint.getPort())); synchronized (var4) { dagQueue.add(var4); var4.wait(); } } "	0	0	0	0	0	1
"@BeforeClass public void Func1() throws IOException { Series var1 = new Series(TEST_ENTITY_NAME, TEST_METRIC_NAME); var1.addData(new Sample(""2015-06-03T09:23:01.000Z"", ""2"")); var1.addData(new Sample(""2016-06-03T09:23:02.000Z"", ""1"")); SeriesMethod.insertSeriesCheck(var1); } "	0	0	0	1	0	0
@Test void Func1() { Assertions.assertEquals( Optional.of(15), Pipeline.of(1, 2, 3, 4, 5) .reduce(Integer::sum) ); } 	0	0	0	0	0	1
static String Func1(URI var1, String var2) { if (var1 != null) { return UriComponentsBuilder .fromUri(var1) .var2(var2) .toUriString(); } return var2; } 	0	0	0	0	0	1
public final void Func1(final View var1, int var2, boolean var3) { if (shouldAnimate && !isFastScroll && !mAnimatorNotifierObserver.isPositionNotified() && (isReverseEnabled || var2 > mLastAnimatedPosition)) { cancelExistingAnimation(var1); List<Animator> var4 = getAnimators(var1, var2, var3); ViewCompat.setAlpha(var1, 0); if (!animatorsUsed.contains(AnimatorEnum.ALPHA)) { addAlphaAnimator(var4, var1, 0f); } animatorsUsed.clear(); AnimatorSet var5 = new AnimatorSet(); var5.playTogether(var4); var5.setStartDelay(calculateAnimationDelay2(var2)); var5.setInterpolator(mInterpolator); var5.setDuration(mDuration); var5.addListener(new HelperAnimatorListener(var1.hashCode())); var5.start(); mAnimators.put(var1.hashCode(), var5); } if (mAnimatorNotifierObserver.isPositionNotified()) mAnimatorNotifierObserver.clearNotified(); mLastAnimatedPosition = var2; } 	0	0	0	0	0	1
"@Override protected void Func1() { tellPDE(""Func1""); super.Func1(); } "	0	0	1	0	0	0
"@Override protected void Func1() { tellPDE(""Func1""); super.Func1(); } "	0	0	1	0	0	0
public void Func1(){ tex.bind(); model.render(vertices); } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception { List<Integer> var1 = Arrays.asList(50, 100, 150, 200); StreamingOutputCallRequest.Builder var2 = StreamingOutputCallRequest.newBuilder(); var2.setResponseType(COMPRESSABLE); for (Integer var3 : var1) { var2.addResponseParametersBuilder().setSize(var3).setIntervalUs(0); } final StreamingOutputCallRequest var4 = var2.build(); StreamRecorder<StreamingOutputCallResponse> var5 = StreamRecorder.create(); StreamObserver<StreamingOutputCallRequest> var6 = asyncStub.fullDuplexCall(var5); final int var7 = 10; List<StreamingOutputCallRequest> var8 = new ArrayList<StreamingOutputCallRequest>(var7); for (int var9 = var7; var9 > 0; --var9) { var8.add(var4); var6.onNext(var4); } var6.onCompleted(); var5.awaitCompletion(); assertSuccess(var5); assertEquals(var1.var3() * var7, var5.getValues().var3()); for (int var9 = 0; var9 < var5.getValues().var3(); ++var9) { StreamingOutputCallResponse var10 = var5.getValues().get(var9); assertEquals(COMPRESSABLE, var10.getPayload().getType()); int var11 = var10.getPayload().getBody().var3(); int var12 = var1.get(var9 % var1.var3()); assertEquals(""comparison failed at index "" + var9, var12, var11); } assertMetrics(""grpc.testing.TestService/FullDuplexCall"", Status.Code.OK, var8, var5.getValues()); } "	0	0	0	0	0	1
"static	void Func1(String var1) { Bundle var2 = Platform.getBundle(""edu.usc.cssl.tacit.webview.ui""); URL var3 = var2.getEntry(""test.txt""); File var4 = null; try { var4 = new File(FileLocator.resolve(var3).toURI()); FileWriter var5 = new FileWriter(var4); var5.write(var1); var5.close(); if(showGraph) { Display.getDefault().asyncExec(new Runnable() { @Override public void Func2() { try { PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(""edu.usc.cssl.tacit.webview.ui.view""); } catch (PartInitException e) { e.printStackTrace(); } } }); } } catch (Exception e) { e.printStackTrace(); } } "	0	0	1	1	1	0
@Override public void Func1(final double var1) { this.abilities.setWalkingSpeed((float) var1); this.updateAbilities(); } 	1	0	0	0	0	0
"private List<JCStatement> Func1(Tree.Condition var1, int var2, Tree.Block var3, Tree.Block var4) { JCExpression var5; JCVariableDecl var6 = null; JCBlock var7 = null; JCBlock var8 = null; if ((var1 instanceof Tree.IsCondition) || (var1 instanceof Tree.NonemptyCondition) || (var1 instanceof Tree.ExistsCondition)) { String var9; ProducedType var10; Expression var11; if (var1 instanceof Tree.IsCondition) { Tree.IsCondition var12 = (Tree.IsCondition) var1; var9 = var12.getVariable().getIdentifier().getText(); var10 = var12.getType().getTypeModel(); var11 = var12.getVariable().getSpecifierExpression().getExpression(); } else if (var1 instanceof Tree.NonemptyCondition) { Tree.NonemptyCondition var13 = (Tree.NonemptyCondition) var1; var9 = var13.getVariable().getIdentifier().getText(); var10 = var13.getVariable().getType().getTypeModel(); var11 = var13.getVariable().getSpecifierExpression().getExpression(); } else { Tree.ExistsCondition var14 = (Tree.ExistsCondition) var1; var9 = var14.getVariable().getIdentifier().getText(); var10 = var14.getVariable().getType().getTypeModel(); var11 = var14.getVariable().getSpecifierExpression().getExpression(); } JCExpression var15 = expressionGen().transformExpression(var11); at(var1); if (var1 instanceof Tree.IsCondition && isNothing(var10)) { var5 = make().Binary(JCTree.EQ, var15, makeNull()); } else { var10 = simplifyType(var10); JCExpression var16 = makeJavaType(var10); String var17 = aliasName(var9); Name var18 = names().fromString(var9); Name var19 = names().fromString(aliasName(var9)); ProducedType var20 = var11.getTypeModel(); JCExpression var21; JCExpression var22 = makeJavaType(var10, NO_PRIMITIVES | WANT_RAW_TYPE); JCExpression var23 = makeIdent(var17); if (var1 instanceof Tree.ExistsCondition) { var23 = unboxType(var23, var10); var21 = makeJavaType(var20); } else if(var1 instanceof Tree.IsCondition){ var23 = unboxType(at(var1).TypeCast(var22, var23), var10); var21 = make().Type(syms().objectType); } else { var23 = at(var1).TypeCast(var16, var23); var21 = makeJavaType(var20); } var6 = makeVar(var17, var21, null); JCVariableDecl var24 = at(var1).VarDef(make().Modifiers(FINAL), var19, var16, var23); String var25 = addVariableSubst(var18.toString(), var19.toString()); var7 = transform(var3); List<JCStatement> var26 = List.<JCStatement> of(var24); var26 = var26.appendList(var7.getStatements()); var7 = at(var1).Block(0, var26); removeVariableSubst(var18.toString(), var25); at(var1); JCExpression var27 = make().Assign(makeIdent(var17), var15); if (var1 instanceof Tree.ExistsCondition) { var5 = make().Binary(JCTree.NE, var27, makeNull()); } else { var5 = makeTypeTest(var27, var10); } } } else if (var1 instanceof Tree.BooleanCondition) { Tree.BooleanCondition var28 = (Tree.BooleanCondition) var1; var5 = expressionGen().transformExpression(var28.getExpression(), BoxingStrategy.UNBOXED, null); } else { throw new RuntimeException(""Not implemented: "" + var1.getNodeType()); } at(var1); if (var3 != null && var7 == null) { var7 = transform(var3); } if (var4 != null && var8 == null) { var8 = transform(var4); } JCStatement var29; switch (var2) { case JCTree.IF: var29 = make().If(var5, var7, var8); break; case JCTree.WHILELOOP: var29 = make().WhileLoop(makeLetExpr(make().TypeIdent(TypeTags.BOOLEAN), var5), var7); break; default: throw new RuntimeException(); } if (var6 != null) { return List.<JCStatement> of(var6, var29); } else { return List.<JCStatement> of(var29); } } "	1	0	0	0	0	0
"private void Func1() { dataTable.addColumn(""name"", String.class); dataTable.addColumn(""description"", String.class); ViewUtil.formatGrid(this, dataTable, new String[] { ""name"", ""description"" }); detailFields = new ArrayList<String>(); detailFields.add(""name""); detailFields.add(""description""); listContainer.setContainer( new BeanItemContainer<IdentifiedEntity>(IdentifiedEntity.class, identifierService.getIdentifiers())); } "	0	0	1	0	0	0
private synchronized void Func1() { Iterator<Entry<String, ExpiringService>> var1 = cache.entrySet().iterator(); while (var1.hasNext()) { Entry<String, ExpiringService> var2 = var1.next(); ExpiringService var3 = (ExpiringService) var2.getValue(); if (var3.isExpired()) { var1.remove(); // avoids a ConcurrentModificationException } } } 	0	0	1	0	0	0
private void Func1(Map<String, List<WorkUnit>> var1, Map<String, State> var2, SourceState var3) { getAllPreviousOffsets(var3); for (Map.Entry<KafkaPartition, Long> var4 : this.previousOffsets.entrySet()) { KafkaPartition var5 = var4.getKey(); if (!this.partitionsToBeProcessed.contains(var5)) { String var6 = var5.getTopicName(); if (!this.isDatasetStateEnabled || this.topicsToProcess.contains(var6)) { long var7 = var4.getValue(); WorkUnit var8 = createEmptyWorkUnit(var5, var7, Optional.fromNullable(var2.get(var5.getTopicName()))); if (var1.containsKey(var6)) { var1.get(var6).add(var8); } else { var1.put(var6, Lists.newArrayList(var8)); } } } } } 	0	1	0	0	1	0
@Override public BaseChainedConfigContext Func1(String var1) { this.encryptionKeyId = var1; return this; } 	0	0	0	1	0	0
"@NonNull @Override public String Func1() { return ""page"" + page; } "	0	0	0	0	0	1
"public void Func1(Integer var1, Integer var2, Integer var3, List<Integer> var4) { System.out.print(String.format(""Diapason is: [%s..%s]\n"" + ""Your count of moves: %s\n"" + ""Your var4: "", var1,var2,var3)); var4.forEach(attempt -> System.out.print(attempt + "" "")); printMessage(""\n-----------------------------------""); } "	0	0	0	0	0	1
public static ArgMatcher Func1() { return new PatternArgMatcher(PATTERN); } 	0	0	0	0	0	1
@Override public void Func1(Buffer var1) { super.Func1(var1); request(1); } 	0	0	0	0	0	1
public void Func1(double var1) { if(var1 < 0.00001) { setTickPeriod(0); } else { setTickPeriod((long) (1000000 / var1)); } } 	0	0	1	0	0	0
"public void Func1() { if (!inProgress.tryLock()) { throw new PepperInActionException(""Cannot run Func1() of job '"" + getId() + ""', since this job was already started.""); } inProgress.lock(); try { startTime = System.currentTimeMillis(); status = JOB_STATUS.INITIALIZING; if (!isWired) { wire(); } if (!isReadyToStart) { Collection<Pair<Step, Collection<String>>> var1 = checkReadyToStart(); if (var1.size() != 0) { StringBuilder var2 = new StringBuilder(); for (Pair<Step, Collection<String>> var3 : var1) { var2.append(""[""); var2.append(var3.getLeft()); var2.append("": ""); var2.append(var3.getRight()); var2.append(""], ""); } throw new PepperException(""Cannot run Pepper job '"" + getId() + ""', because at least one of the involved job is not ready to run: '"" + var2.toString() + ""'. ""); } } status = JOB_STATUS.IMPORTING_CORPUS_STRUCTURE; if (!isImportedCorpusStructure) { importCorpusStructures(); } status = JOB_STATUS.IMPORTING_DOCUMENT_STRUCTURE; List<Pair<ModuleControllerImpl, Future<?>>> var4 = new Vector<Pair<ModuleControllerImpl, Future<?>>>(); for (Step var5 : getAllSteps()) { if (var5.getModuleController().getPepperModule().getSaltProject() == null) var5.getModuleController().getPepperModule().setSaltProject(getSaltProject()); { var4.add(new ImmutablePair<ModuleControllerImpl, Future<?>>(var5.getModuleController(), var5.getModuleController().processDocumentStructures())); } } int var6 = 0; // current number of var5 StringBuilder var2 = new StringBuilder(); for (Step var5 : getAllSteps()) { var6++; var2.append(""+----------------------------------- var5 ""); var2.append(var6); var2.append("" -----------------------------------+\n""); String var7 = ""|%-15s%-63s|\n""; var2.append(String.var7(var7, var5.getModuleType().toString().toLowerCase() + "":"", var5.getName())); var2.append(String.var7(var7, ""path:"", var5.getCorpusDesc().getCorpusPath())); if (MODULE_TYPE.IMPORTER.equals(var5.getModuleType())) { int var8 = getSaltProject().getCorpusGraphs().indexOf(((PepperImporter) var5.getModuleController().getPepperModule()).getCorpusGraph()); var2.append(String.var7(var7, ""corpus index:"", var8)); } boolean var9 = false; StringBuilder var10 = new StringBuilder(); if (var5.getModuleController().getPepperModule().getProperties().getPropertyDesctriptions() != null) { var7 = ""|               %-25s%-38s|\n""; for (PepperModuleProperty<?> var11 : var5.getModuleController().getPepperModule().getProperties().getPropertyDesctriptions()) { if (var11.getValue() != null) { var9 = true; var10.append(String.var7(var7, var11.getName() + "":"", var11.getValue())); } } } var7 = ""|%-15s%-63s|\n""; if (var9) { var2.append(String.var7(var7, ""properties:"", """")); var2.append(var10.toString()); } else { var2.append(String.var7(var7, ""properties:"", ""- none -"")); } var2.append(""|                                                                              |\n""); } var2.append(""+------------------------------------------------------------------------------+\n""); logger.info(var2.toString()); for (Pair<ModuleControllerImpl, Future<?>> var12 : var4) { try { var12.getRight().get(); } catch (ExecutionException e) { if ((e.getCause() != null) && (e.getCause() instanceof PepperException)) { throw (PepperException) e.getCause(); } throw new PepperModuleException(""Failed to process document by module '"" + var12.getLeft() + ""'. Nested exception was: "", e.getCause()); } catch (InterruptedException e) { if ((e.getCause() != null) && (e.getCause() instanceof PepperException)) { throw (PepperException) e.getCause(); } throw new PepperFWException(""Failed to process document by module '"" + var12.getLeft() + ""'. Nested exception was: "", e.getCause()); } catch (CancellationException e) { if ((e.getCause() != null) && (e.getCause() instanceof PepperException)) { throw (PepperException) e.getCause(); } throw new PepperFWException(""Failed to process document by module '"" + var12.getLeft() + ""'. Nested exception was: "", e.getCause()); } } status = JOB_STATUS.ENDED; } catch (RuntimeException e) { status = JOB_STATUS.ENDED_WITH_ERRORS; if (e instanceof PepperException) { throw (PepperException) e; } else { throw new PepperFWException(""An exception occured in job '"" + getId() + ""' while importing the corpus-structure. See nested exception: "" + e.getMessage(), e); } } finally { inProgress.unlock(); } } "	0	0	0	1	0	0
"public void Func1() { mOnScrollListener = new RecyclerView.OnScrollListener() { private int[] var1; @Override public void Func2(RecyclerView var2, int var3, int var4) { super.Func2(var2, var3, var4); if (mHeader != null) { mTotalYScrolled += var4; translateHeader(mTotalYScrolled); } RecyclerView.LayoutManager var5 = var2.getLayoutManager(); int var6 = var5.getChildCount(); int var7 = var5.getItemCount(); if (layoutManagerType == null) { if (var5 instanceof LinearLayoutManager) { layoutManagerType = LAYOUT_MANAGER_TYPE.LINEAR; } else if (var5 instanceof GridLayoutManager) { layoutManagerType = LAYOUT_MANAGER_TYPE.GRID; } else if (var5 instanceof StaggeredGridLayoutManager) { layoutManagerType = LAYOUT_MANAGER_TYPE.STAGGERED_GRID; } else { throw new RuntimeException(""Unsupported LayoutManager used. Valid ones are LinearLayoutManager, GridLayoutManager and StaggeredGridLayoutManager""); } } switch (layoutManagerType) { case LINEAR: lastVisibleItemPosition = ((LinearLayoutManager) var5).findLastVisibleItemPosition(); break; case GRID: lastVisibleItemPosition = ((GridLayoutManager) var5).findLastVisibleItemPosition(); break; case STAGGERED_GRID: StaggeredGridLayoutManager var8 = (StaggeredGridLayoutManager) var5; if (var1 == null) var1 = new int[var8.getSpanCount()]; var8.findLastVisibleItemPositions(var1); lastVisibleItemPosition = findMax(var1); break; } enableShoworHideToolbarAndFloatingButton(var2); } @Override public void Func3(RecyclerView var2, int var9) { super.Func3(var2, var9); currentScrollState = var9; RecyclerView.LayoutManager var5 = var2.getLayoutManager(); int var6 = var5.getChildCount(); int var7 = var5.getItemCount(); if ((var6 > 0 && currentScrollState == RecyclerView.SCROLL_STATE_IDLE && (lastVisibleItemPosition) >= var7 - 1) && !isLoadingMore) { isLoadingMore = true; if (onLoadMoreListener != null) { isLoadingMore = false; onLoadMoreListener.loadMore(mRecyclerView.getAdapter().getItemCount(), lastVisibleItemPosition); } } } }; mRecyclerView.setOnScrollListener(mOnScrollListener); if (mAdapter.getCustomLoadMoreView() == null) mAdapter.setCustomLoadMoreView(LayoutInflater.from(getContext()) .inflate(R.layout.bottom_progressbar, null)); } "	1	1	1	1	0	0
"private static SearchResponse Func1(Entry<String, JsonNode> var1, String var2) { JsonNode var3 = var1.getValue().get(""var4""); int var4 = var3 == null ? -1 : var3.asInt(); SearchResponse var5 = Application.Func1(0, var4, QueryBuilders.queryStringQuery(var2), """"); return var5; } "	0	0	1	0	0	0
"private void Func1(ZonePlayerHandler var1, String var2) { switch (var2) { case ""PLAYING"": var1.play(); waitForTransportState(""PLAYING""); break; case ""PAUSED_PLAYBACK"": var1.pause(); break; } } "	0	0	1	0	1	0
"public Gson Func1() { final Gson var1 = new GsonBuilder() .registerTypeAdapter(Date.class, new JsonDeserializer<Date>() { public Date Func2(JsonElement var2, Type var3, JsonDeserializationContext var4) throws JsonParseException { return new Date(var2.getAsJsonPrimitive().getAsLong() * 1000); } }) .registerTypeAdapter(MessageType.class, new JsonDeserializer<MessageType>() { @Override public MessageType Func2(JsonElement var2, Type var3, JsonDeserializationContext var4) throws JsonParseException { return var2.getAsString().equalsIgnoreCase(""stream"") ? MessageType.STREAM_MESSAGE : MessageType.PRIVATE_MESSAGE; } }) .create(); final Gson var5 = new GsonBuilder() .registerTypeAdapter(Message.class, new JsonDeserializer<Message>() { @Override public Message Func2(JsonElement var2, Type var3, JsonDeserializationContext var4) throws JsonParseException { if(BuildConfig.DEBUG) { Log.d(""RAW MESSAGES"", var2.toString()); } Message var6; if(""stream"".equalsIgnoreCase(var2.getAsJsonObject().get(""type"").getAsString())) { Message.ZulipStreamMessage var7 = var1.fromJson(var2, Message.ZulipStreamMessage.class); var7.setRecipients(var7.getDisplayRecipient()); var6 = var7; } else { Message.ZulipDirectMessage var7 = var1.fromJson(var2, Message.ZulipDirectMessage.class); if(var7.getDisplayRecipient() != null) { var7.setRecipients(var7.getDisplayRecipient().toArray(new Person[var7.getDisplayRecipient().size()])); } var7.setContent(Message.formatContent(var7.getFormattedContent(), ZulipApp.get()).toString()); var6 = var7; } if(var6._history != null && var6._history.size() != 0) { var6.updateFromHistory(var6._history.get(0)); } return var6; } }).create(); return new GsonBuilder() .registerTypeAdapter(UserConfigurationResponse.class, new TypeAdapter<UserConfigurationResponse>() { @Override public void Func3(JsonWriter var8, UserConfigurationResponse var9) throws IOException { var5.toJson(var5.toJsonTree(var9), var8); } @Override public UserConfigurationResponse Func4(JsonReader var10) throws IOException { UserConfigurationResponse var11 = var5.fromJson(var10, UserConfigurationResponse.class); RuntimeExceptionDao<Person, Object> var12 = ZulipApp.this.getDao(Person.class); for (int var13 = 0; var13 < var11.getRealmUsers().size(); var13++) { Person var14 = var11.getRealmUsers().get(var13); Person var15 = null; try { var15 = var12.queryBuilder().where().eq(Person.EMAIL_FIELD, var14.getEmail()).queryForFirst(); if(var15 != null) { var14.setId(var15.getId()); } } catch (SQLException e) { ZLog.logException(e); } } return var11; } }) .registerTypeAdapter(EventsBranch.class, new JsonDeserializer<EventsBranch>() { @Override public EventsBranch Func2(JsonElement var2, Type var3, JsonDeserializationContext var4) throws JsonParseException { EventsBranch var16 = var5.fromJson(var2, EventsBranch.class); if(BuildConfig.DEBUG) { Log.d(""RAW EVENTS"", var2.toString()); } Class<? extends EventsBranch> var17 = EventsBranch.BranchType.fromRawType(var16); if(var17 != null) { return var5.fromJson(var2, var17); } Log.w(""GSON"", ""Attempted to Func2 and unregistered EventBranch... See EventBranch.BranchType""); return var16; } }) .registerTypeAdapter(Message.class, var5.getAdapter(Message.class)) .create(); } "	0	0	0	0	0	1
"@Override public void Func1() { String var1 = getRunCommandDir(); String var2 = INITD_DIR + ""/"" + config.getName(); if (!isPrivileged()) { throw new WrapperException(Constants.RC_MUST_BE_ROOT, 0, ""Must be root to Func1""); } System.out.println(""Installing "" + config.getName() + "" ...""); try { FileWriter var3 = new FileWriter(var2); System.out.println(""name looking for ==>"" + config.getName()); BufferedReader var4 = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream( ""/"" + config.getName() + "".initd""))); String var5 = null; while ((var5 = var4.readLine()) != null) { var5 = var5.replaceAll(""\\$\\{wrapper.name}"", config.getName()); var5 = var5.replaceAll(""\\$\\{wrapper.displayname}"", config.getDisplayName()); var5 = var5.replaceAll(""\\$\\{wrapper.description}"", config.getDescription()); var5 = var5.replaceAll(""\\$\\{wrapper.home}"", config.getWorkingDirectory().getAbsolutePath()); var5 = var5.replaceAll(""\\$\\{wrapper.java.command}"", config.getJavaCommand()); var5 = var5.replaceAll(""\\$\\{wrapper.jarfile}"", config.getWrapperJarPath()); var3.write(var5 + ""\n""); } var4.close(); var3.close(); } catch (IOException e) { throw new WrapperException(Constants.RC_FAIL_INSTALL, 0, ""Failed while writing run file"", e); } new File(var2).setExecutable(true, false); for (String var6 : RUN_LEVELS_START) { CLibrary.INSTANCE.symlink(var2, var1 + ""/rc"" + var6 + "".d/S"" + RUN_SEQUENCE_START + config.getName()); } for (String var6 : RUN_LEVELS_STOP) { CLibrary.INSTANCE.symlink(var2, var1 + ""/rc"" + var6 + "".d/K"" + RUN_SEQUENCE_STOP + config.getName()); } System.out.println(""Done""); } "	0	0	0	0	0	1
"private void Func1(JdbcEntityDefinition var1, Table var2){ if(var1.getInternal().getService() .equals(GenericMetricEntity.GENERIC_METRIC_SERVICE)){ Column var3 = new Column(); var3.setName(JdbcConstants.METRIC_NAME_COLUMN_NAME); var3.setTypeCode(Types.VARCHAR); var3.setDescription(""eagle entity metric column""); var2.addColumn(var3); } Column var4 = new Column(); var4.setName(JdbcConstants.ROW_KEY_COLUMN_NAME); var4.setPrimaryKey(true); var4.setRequired(true); var4.setTypeCode(Types.VARCHAR); var4.setDescription(""eagle entity row-key column""); var2.addColumn(var4); Column var5 = new Column(); var5.setName(JdbcConstants.TIMESTAMP_COLUMN_NAME); var5.setTypeCode(Types.BIGINT); var5.setDescription(""eagle entity timestamp column""); var2.addColumn(var5); if(var1.getInternal().getTags() != null) { Index var6 = new UniqueIndex(); for (String var7 : var1.getInternal().getTags()) { Column var8 = createTagColumn(var7); var2.addColumn(var8); IndexColumn var9 = new IndexColumn(); var9.setName(var7); var9.setOrdinalPosition(0); var6.addColumn(var9); var6.setName(""tags_unique_index""); } var2.addIndex(var6); } for(Map.Entry<String,Qualifier> var10: var1.getInternal().getDisplayNameMap().entrySet()){ Column var11 = new Column(); var11.setName(var10.getKey()); var11.setJavaName(var10.getKey()); var11.setSize(""1024""); Integer var12 = var1.getJdbcColumnTypeCodeOrNull(var10.getKey()); var12 = var12 == null? Types.VARCHAR:var12; var11.setTypeCode(var12); var11.setDescription(""eagle field column ""+var10.getKey()+"":""+var1.getColumnTypeOrNull(var10.getKey())); var2.addColumn(var11); } } "	0	0	0	0	0	1
"@Override public Response Func1(String var1, String var2, String var3, String var4, String var5) { String[] var6 = var3 != null ? var3.split("","") : new String[0]; try { APIProvider var7 = RestApiUtil.getLoggedInUserProvider(); String var8 = RestApiUtil.getLoggedInUserTenantDomain(); APIIdentifier var9 = APIMappingUtil.getAPIIdentifierFromApiIdOrUUID(var1, var8); Map<String, Object> var10 = var7.getAPILifeCycleData(var9); String[] var11 = (String[]) var10.get(APIConstants.LC_NEXT_STATES); if (!ArrayUtils.contains(var11, var2)) { throw RestApiUtil.buildBadRequestException( ""Action '"" + var2 + ""' is not allowed. Allowed actions are "" + Arrays .toString(var11)); } for (String var12 : var6) { String[] var13 = var12.split("":""); if (var13.length == 2) { String var14 = var13[0].trim(); boolean var15 = Boolean.valueOf(var13[1].trim()); var7.checkAndChangeAPILCCheckListItem(var9, var14, var15); } } var7.changeLifeCycleStatus(var9, var2); return Response.ok().build(); } catch (APIManagementException e) { if (RestApiUtil.isDueToResourceNotFound(e) || RestApiUtil.isDueToAuthorizationFailure(e)) { throw RestApiUtil.buildNotFoundException(RestApiConstants.RESOURCE_API, var1); } else { handleException(""Error while updating lifecycle of API "" + var1, e); } } return null; } "	0	0	1	1	0	0
"@Override public ItemStack[] Func1() { if(!player.worldObj.isRemote)	//Used only when replacing the modus { ItemStack[] var1 = new ItemStack[size]; fillList(var1); return var1; } if(changed) { fillList(var1); } return var1; } "	0	0	0	0	0	1
private void Func1() { if (this.configuration.getSendMailUpdates() && (this.configuration.getSmtpSendEmailOnSuccess() || this.orchestratorStatus.getTotalSubmitted() != this.orchestratorStatus.getTotalSuccess())) { reporter.send(); } } 	0	0	1	1	0	0
"@RequestMapping(value = ""/Func1.action"", method = { RequestMethod.POST ,RequestMethod.GET }) @ResponseBody public Map<String,Object> Func1(@RequestParam Integer var1) throws Exception { logger.info(""In Func1 var2, var1 = "" + var1); try { AidrCollection var2 = collectionService.findById(var1); if (null == var2) { var2 = collectionService.findTrashedById(var1); if (var2 != null) { AidrCollectionTotalDTO var3 = convertAidrCollectionToDTO(var2); return getUIWrapper(var3, true); } else { String var4 = ""Attempting to Func1 var2 "" + var2.getCode() + "" failed as var2 not found!""; logger.error(var4); return getUIWrapper(false, var4); } } if (var2.getStatus().equals(CollectionStatus.INITIALIZING) || var2.getStatus().equals(CollectionStatus.RUNNING) || var2.getStatus().equals(CollectionStatus.RUNNING_WARNING)) { String var4 = ""Attempting to Func1 a running var2. Collection must be in stopped state!""; logger.error(var4); return getUIWrapper(false, var4); } else { logger.info(""Received request to Func1 var2 code: "" + var2.getCode()); CollectionStatus var5 = var2.getStatus(); if (var5.equals(CollectionStatus.STOPPED) || var5.equals(CollectionStatus.NOT_RUNNING)) { logger.info(""Trashing var2 having code "" + var2.getCode()); try { var2.setStatus(CollectionStatus.TRASHED); collectionService.update(var2); if (taggerService.trashCollection(var2) > 0) { AidrCollectionTotalDTO var3 = convertAidrCollectionToDTO(var2); logger.info(""Attempting to Func1 var2 "" + var2.getCode() + "" succeeded!""); return getUIWrapper(var3, true); } else { String var4 = ""Attempting to Func1 var2 "" + var2.getCode() + "" failed!""; logger.error(var4); var2.setStatus(var5); collectionService.update(var2); return getUIWrapper(false, var4); } } catch(Exception e) { String var4 = ""Error while trashing AIDR Collection - couldn't stop!""; logger.error(var4, e); if (!var2.getStatus().equals(var5)) { var2.setStatus(var5); collectionService.update(var2); } return getUIWrapper(false, var4); } } else { String var4 = ""Attempting to Func1 var2 "" + var2.getCode() + "" failed as var2 status = "" + var5.getStatus(); logger.error(var4); return getUIWrapper(false, var4); } } } catch(Exception e){ String var4 = ""Error while attempting to Func1 AIDR Collection - not found! ""; logger.error(var4, e); return getUIWrapper(false, var4); } } "	0	0	1	0	0	0
"private void Func1() throws IOException { if (nameIdMapHolder == null) { final File var1 = new File(storageLocal.getStoragePath()); if (!var1.exists()) if (!var1.mkdirs()) throw new OStorageException(""Cannot create directories for the path '"" + var1 + ""'""); nameIdMapHolderFile = new File(var1, NAME_ID_MAP); nameIdMapHolder = new RandomAccessFile(nameIdMapHolderFile, ""rw""); readNameIdMap(); } } "	0	0	0	0	0	1
"private OCachePointer[] Func1(final int var1, final long var2, final int var3, final boolean var4, OModifiableBoolean var5) throws IOException { final long var6 = composeFileId(id, var1); final OClosableEntry<Long, OFileClassic> var7 = files.acquire(var6); try { final OFileClassic var8 = var7.get(); if (var8 == null) throw new IllegalArgumentException(""File with id "" + var1 + "" not found in WOW Cache""); final OLogSequenceNumber var9; if (writeAheadLog != null) var9 = writeAheadLog.getFlushedLsn(); else var9 = new OLogSequenceNumber(-1, -1); final long var10 = var2 * pageSize; final long var11 = var10 + pageSize; if (var8.getFileSize() >= var11) { final OSessionStoragePerformanceStatistic var12 = performanceStatisticManager .getSessionPerformanceStatistic(); if (var12 != null) { var12.startPageReadFromFileTimer(); } int var13 = 0; try { if (var3 == 1) { final ByteBuffer var14 = bufferPool.acquireDirect(false); var8.read(var10, var14); var14.position(0); final OCachePointer var15 = new OCachePointer(var14, bufferPool, var9, var6, var2); var13 = 1; return new OCachePointer[] { var15 }; } final long var16 = (var8.getFileSize() - var10) / pageSize; final int var17 = Math.min((int) var16, var3); final ByteBuffer[] var18 = new ByteBuffer[var17]; for (int var19 = 0; var19 < var18.length; var19++) { var18[var19] = bufferPool.acquireDirect(false); assert var18[var19].position() == 0; } var8.read(var10, var18); final OCachePointer[] var20 = new OCachePointer[var18.length]; for (int var21 = 0; var21 < var18.length; var21++) { var18[var21].position(0); var20[var21] = new OCachePointer(var18[var21], bufferPool, var9, var6, var2 + var21); } var13 = var20.length; return var20; } finally { if (var12 != null) { var12.stopPageReadFromFileTimer(var13); } } } else if (var4) { final int var22 = (int) (var11 - var8.getFileSize()); if (var22 > 0) var8.allocateSpace(var22); freeSpaceCheckAfterNewPageAdd(); final ByteBuffer var14 = bufferPool.acquireDirect(true); final OCachePointer var15 = new OCachePointer(var14, bufferPool, var9, var6, var2); var5.setValue(true); return new OCachePointer[] { var15 }; } else return new OCachePointer[0]; } finally { files.release(var7); } } "	0	0	0	0	0	1
private void Func1() throws IOException { nameIdMap = new ConcurrentHashMap<String, Integer>(); long var1 = -1; nameIdMapHolder.seek(0); NameFileIdEntry var2; while ((var2 = readNextNameIdEntry()) != null) { final long var3 = Math.abs(var2.var7); if (var1 < var3) var1 = var3; nameIdMap.put(var2.name, var2.var7); } if (var1 > 0) fileCounter = (int) var1; for (Map.Entry<String, Integer> var4 : nameIdMap.entrySet()) { if (var4.getValue() >= 0) { final long var5 = composeFileId(id, var4.getValue()); if (files.get(var5) == null) { OFileClassic var6 = createFileInstance(var4.getKey()); if (var6.exists()) { var6.open(); files.add(var5, var6); } else { final Integer var7 = nameIdMap.get(var4.getKey()); if (var7 != null && var7 > 0) { nameIdMap.put(var4.getKey(), -var7); } } } } } } 	0	0	0	0	0	1
"public void Func1() { if(!CCubesSettings.holidayRewards || CCubesSettings.holidayRewardTriggered) return; DateFormat var1 = new SimpleDateFormat(""yyyy/MM/dd""); Date var2; JsonElement var3; try { var2 = var1.parse(""2015/10/31""); var3 = HTTPUtil.getWebFile(""https://raw.githubusercontent.com/wyldmods/ChanceCubes/master/customRewards/Holidays.json""); } catch(Exception e1) { CCubesCore.logger.log(Level.ERROR, ""Failed to fetch the list of var5 var9!""); return; } String var4 = """"; for(JsonElement var5 : var3.getAsJsonArray()) { Date var6; try { var6 = var1.parse(var5.getAsJsonObject().get(""Date"").getAsString()); } catch(ParseException e) { CCubesCore.logger.log(Level.ERROR, ""Failed to parse a var5 var2. BLAME TURKEY!!!""); continue; } if(var1.format(var2).equalsIgnoreCase(var1.format(var6))) { var4 = var5.getAsJsonObject().get(""Name"").getAsString(); } } if(var4.equalsIgnoreCase("""")) { ConfigLoader.config.get(""holidayRewardTriggered"", ConfigLoader.genCat, false).setValue(false); return; } JsonElement var7; try { var7 = HTTPUtil.getWebFile(""https://raw.githubusercontent.com/wyldmods/ChanceCubes/master/customRewards/HolidayRewards/"" + var4 + "".json""); } catch(Exception e) { CCubesCore.logger.log(Level.ERROR, ""Chance Cubes failed to get the custom var8 for the var5 "" + var4 + ""!""); CCubesCore.logger.log(Level.ERROR, e.getMessage()); return; } for(Entry<String, JsonElement> var8 : var7.getAsJsonObject().entrySet()) { List<IRewardType> var9 = new ArrayList<IRewardType>(); JsonObject var10 = var8.getValue().getAsJsonObject(); int var11 = 0; for(Entry<String, JsonElement> var12 : var10.entrySet()) { if(var12.getKey().equalsIgnoreCase(""var11"")) { var11 = var12.getValue().getAsInt(); continue; } JsonArray var13 = var12.getValue().getAsJsonArray(); if(var12.getKey().equalsIgnoreCase(""Item"")) this.loadItemReward(var13, var9); else if(var12.getKey().equalsIgnoreCase(""Block"")) this.loadBlockReward(var13, var9); else if(var12.getKey().equalsIgnoreCase(""Message"")) this.loadMessageReward(var13, var9); else if(var12.getKey().equalsIgnoreCase(""Command"")) this.loadCommandReward(var13, var9); else if(var12.getKey().equalsIgnoreCase(""Entity"")) this.loadEntityReward(var13, var9); else if(var12.getKey().equalsIgnoreCase(""Experience"")) this.loadExperienceReward(var13, var9); else if(var12.getKey().equalsIgnoreCase(""Potion"")) this.loadPotionReward(var13, var9); else if(var12.getKey().equalsIgnoreCase(""Schematic"")) this.loadSchematicReward(var13, var9); else if(var12.getKey().equalsIgnoreCase(""Sound"")) this.loadSoundReward(var13, var9); else if(var12.getKey().equalsIgnoreCase(""Chest"")) this.loadChestReward(var13, var9); } CCubesSettings.holidayReward = new BasicReward(var8.getKey(), var11, var9.toArray(new IRewardType[var9.size()])); CCubesCore.logger.log(Level.ERROR, ""Custom var5 var8 \"""" + var4 + ""\"" loaded!""); } } "	0	0	1	0	0	0
private void Func1() { SWTUtil.safeAsyncExec(new Runnable() { public void Func2() { toolBar.Func1(getViewer(), navigatable); toolBar.setEnabled(false); } }); } 	0	0	0	0	0	1
"@Transactional(isolation = Isolation.READ_COMMITTED, propagation = Propagation.REQUIRES_NEW) public void Func1(RpslObject var1, Result var2, int var3) { try { if (var3 == 1) { checkForReservedNicHandle(var1); var1 = RpslObjectFilter.keepKeyAttributesOnly(new RpslObjectBuilder(var1)).get(); rpslObjectUpdateDao.createObject(var1); } else { final RpslObjectInfo var4 = rpslObjectDao.findByKey(var1.getType(), var1.getKey().toString()); rpslObjectUpdateDao.updateObject(var4.getObjectId(), var1); claimIds(var1); var2.addSuccess(); } } catch (Exception e) { StringWriter var5 = new StringWriter(); e.printStackTrace(new PrintWriter(var5)); var2.addFail(String.format(""Error in var3 %d in '%s': %s\n"", var3, var1.getFormattedKey(), var5)); } } "	0	0	1	1	1	0
"private Integer Func1(String var1) { if (var1.matches(""^(flow_|catch_)[-]?[0-9]{9}$"")) { //|| var1.matches(""catch_"" + ""-?\\d+"")) { String[] var2 = var1.split(""_""); String var3 = var2[1]; //second half of name anticipated to be the model_output_id if (isInteger(var3)) //return it as a qualifying model output var3 { log.info(""The model output var3: "" + var3 + "" has a view representation already:"" + var1 + "" No additional views will be created for it.""); return new Integer(var3); } else { log.info(""The portion of the view name that represents the model output var3 was not an Integer and won't be included in the set to create views : "" + var3); } } else { log.info(""View name did not match catch_ or flow_ prefix and is not included in the set.: "" + var1); } return 0; } "	0	0	0	1	0	0
public static <T> Pair<Sequence<T>, Sequence<T>> Func1(final Iterator<? extends T> var1, final Predicate<? super T> var2) { final Queue<T> var3 = new ArrayDeque<T>(); final Queue<T> var4 = new ArrayDeque<T>(); return Pair.pair(Sequences.memorise(new PartitionIterator<T>(var1, var2, var3, var4)), Sequences.memorise(new PartitionIterator<T>(var1, Predicates.<T>not(var2), var4, var3))); } 	1	1	1	1	0	0
@Override public S Func1() throws Exception { return foldRight(iterator, seed, callable); } 	0	0	0	0	0	1
"public RexNode Func1(String var1, String var2) { Preconditions.checkNotNull(var1); Preconditions.checkNotNull(var2); final Frame var3 = stack.peek(); final List<String> var4 = new ArrayList<>(); int var5 = 0; for (Pair<String, RelDataType> var6 : var3.right) { if (var6.left != null && var6.left.equals(var1)) { int var7 = var6.right.getFieldNames().indexOf(var2); if (var7 >= 0) { return Func1(var5 + var7); } else { throw new IllegalArgumentException(""no Func1 '"" + var2 + ""' in relation '"" + var1 + ""'; fields are: "" + var6.right.getFieldNames()); } } var4.add(var6.left); var5 += var6.right.getFieldCount(); } throw new IllegalArgumentException(""no relation wtih var1 '"" + var1 + ""'; var4 are: "" + var4); } "	0	0	0	0	0	1
private boolean Func1(Job var1) { SCMHead var2 = SCMHead.HeadByItem.findHead(var1); return var2 != null && var2.getAction(ChangeRequestAction.class) != null; } 	0	0	0	0	0	1
"private void Func1(Cart var1, Cart var2) { LOG.trace(""Enter. var1: {}, var2: {}."", var1, var2); List<LineItem> var3 = var2.getLineItems(); var3.stream().forEach( lineItem -> addLineItemService.addLineItem(var1, lineItem) ); Cart var4 = cartRepository.save(var1); var2.setCartStatus(CartStatus.Merged); cartRepository.save(var2); LOG.trace(""Exit. var4: {}."", var4); } "	0	0	0	0	0	1
public void Func1() { Random var1 = new Random(); Lane var2 = entryPoints.get(var1.nextInt(entryPoints.size())); Truck var3 = null; if(var2.getDirection() == Direction.NORTH || var2.getDirection() == Direction.SOUTH) { var3 = new Truck(var2.getGridPosX() * Map.TILESIZE + Map.TILESIZE / 2 - Truck.TRUCKWIDTH / 2, var2.getGridPosY() * Map.TILESIZE + Map.TILESIZE - Truck.TRUCKLENGTH, var2.getDirection()); } else if(var2.getDirection() == Direction.WEST || var2.getDirection() == Direction.EAST) { var3 = new Truck(var2.getGridPosX() * Map.TILESIZE, var2.getGridPosY() * Map.TILESIZE + Map.TILESIZE / 2 - Truck.TRUCKWIDTH / 2, var2.getDirection()); } var3.setCurrentTile(var2); var3.setMap(tiles); var2.setOccupied(true, var3); synchronized (Map.class) { vehicles.add(var3); } } 	0	0	0	0	0	1
boolean Func1(Role var1) throws Exception { Set<Role> var2 = listAllRoles(); Role var3 = new Role(var1.getName().toLowerCase()); return var2.contains(var3); } 	0	0	0	0	0	1
"public void Func1(String var1){ try { long var2 = System.currentTimeMillis(); System.out.println(""Loading user ...""); if(var1.toUpperCase().endsWith("".TXT_OUT"")) { BufferedReader var3 = new BufferedReader(new FileReader(var1)); String var4 = """"; Point var5 = null; long var6 = 0; double var7 = 0; String var8; long var9 = -1; while ((var8 = var3.readLine()) != null) { String[] var10 = var8.var10(""\var11""); if (var9 < 0) var9 =  Long.parseLong(var10[1]); if (var10[0].equals(""E"")){ long var11 = Long.parseLong(var10[1]) - var9; double var12 = Double.parseDouble(var10[4]); String var13 = var10[2]; int var14 = Integer.parseInt(var10[3]); if(var14 == TYPE_TEXT ) { int var15 = var13.indexOf("":text""); int var16 = var13.indexOf(""w"", var13.indexOf(""@"")); if(var15 >= 0 && var16 >= 0) { try { var13 = ""Paragraph""+ var13.substring(var15, var16); } catch(Exception ex) { System.err.println(""Problem at ""+var13); } } } DataObject var17 = null; for (int var18=0; var18<dataObjects.size(); var18++) if (dataObjects.get(var18).id.equals(var13)){ var17 = dataObjects.get(var18); break; } if (var17 == null){ var17 = new DataObject(var13, var14); dataObjects.add(var17); } EyeEvent var19 = new EyeEvent(var11,var17, var12, 1); events.add(var19); } else System.out.println(""Unrecognized event "" + var10[0]); } var3.close(); } else if(var1.toUpperCase().endsWith("".TXT"")) { BufferedReader var3 = new BufferedReader(new FileReader(var1)); String var4 = """"; Point var5 = null; long var6 = 0; double var7 = 0; String var8; long var9 = -1; while ((var8 = var3.readLine()) != null) { String[] var10 = var8.var10(""\var11""); if (var9 < 0) var9 =  Long.parseLong(var10[1]); if (var10[0].equals(""Eye"")){ long var11 = Long.parseLong(var10[1]) - var9; double var12 = Double.parseDouble(var10[5]); String var13 = var10[2]; int var14 = Integer.parseInt(var10[4]); if(var14 == TYPE_TEXT ) { int var15 = var13.indexOf("":text""); int var16 = var13.indexOf(""w"", var13.indexOf(""@"")); if(var15 >= 0 && var16 >= 0) { try { var13 = ""Paragraph""+ var13.substring(var15, var16); } catch(Exception ex) { System.err.println(""Problem at ""+var13); } } } DataObject var17 = null; for (int var18=0; var18<dataObjects.size(); var18++) if (dataObjects.get(var18).id.equals(var13)){ var17 = dataObjects.get(var18); break; } if (var17 == null){ var17 = new DataObject(var13, var14); dataObjects.add(var17); } EyeEvent var19 = new EyeEvent(var11,var17, var12, 1); events.add(var19); } else System.out.println(""Unrecognized event "" + var10[0]); } var3.close(); } else if(var1.toUpperCase().endsWith("".EYE"")) { FileInputStream var20 = new FileInputStream(var1); ObjectInputStream var21 = new ObjectInputStream(var20); EyeData var22 = (EyeData) var21.readObject(); dataObjects = var22.getDataObjects(); events = var22.getEvents(); var21.close(); } for (int var18=0; var18<dataObjects.size(); var18++) dataToIndex.put(dataObjects.get(var18), var18); timePeriodStart = 0; timePeriodEnd = events.get(events.size()-1).var2; createHeatmap(); var2 = System.currentTimeMillis()-var2; System.out.println(""Done loading! var2=""+var2); } catch(Exception var19){ var19.printStackTrace(); } } "	0	0	0	0	0	1
"@Test public void Func1() { InfoFileParser var1 = new InfoFileParser(); Reader var2 = ResourceUtilities.getReader(""classpath:edu/mayo/mprc/searchdb/info.tsv"", TestInfoFileParser.class); final InfoFileData var3 = var1.parse(var2); Assert.assertEquals(var3.getMs1Spectra(), 2334); Assert.assertEquals(var3.getMs2Spectra(), 6626); Assert.assertEquals(var3.getMs3PlusSpectra(), 1); Assert.assertEquals(var3.getInstrumentName(), ""LTQ Orbitrap""); Assert.assertEquals(var3.getInstrumentSerialNumber(), ""1063B""); Assert.assertEquals(var3.getStartTime(), new DateTime(2010, 4, 8, 18, 17, 49)); Assert.assertEquals(var3.getRunTimeInSeconds(), 4500.49); Assert.assertEquals(var3.getComment(), ""yeast TD 60K, top5, 1ug in 100uL, inj 5uL,""); Assert.assertEquals(var3.getSampleId(), ""post Ch2&Ch1 flush; std config""); } "	0	0	1	0	1	0
public void Func1(final Date var1) { this.var1 = (Date) var1.clone(); dateStr = ArchiveUtils.get14DigitDate(var1); } 	0	0	1	1	0	0
"public static boolean Func1(String var1, String var2) throws InvalidProjectVersion { if ( ""1.13"".equals(var2)) { if ( ""1.13"".equals(var1) || ""1.12"".equals(var1) || ""1.11"".equals(var1) || ""1.10"".equals(var1) || ""1.9"".equals(var1) || ""1.8"".equals(var1) || ""1.7"".equals(var1) || ""1.6"".equals(var1) ) return true; return false; } else if ( ""1.12"".equals(var2)) { if ( ""1.12"".equals(var1) || ""1.11"".equals(var1) || ""1.10"".equals(var1) || ""1.9"".equals(var1) || ""1.8"".equals(var1) || ""1.7"".equals(var1) || ""1.6"".equals(var1) ) return true; return false; } else if ( ""1.11"".equals(var2)) { if ( ""1.11"".equals(var1) || ""1.10"".equals(var1) || ""1.9"".equals(var1) || ""1.8"".equals(var1) || ""1.7"".equals(var1) || ""1.6"".equals(var1) ) return true; return false; } else if ( ""1.10"".equals(var2)) { if ( ""1.10"".equals(var1) || ""1.9"".equals(var1) || ""1.8"".equals(var1) || ""1.7"".equals(var1) || ""1.6"".equals(var1) ) return true; return false; } else if ( ""1.9"".equals(var2)) { if ( ""1.9"".equals(var1) || ""1.8"".equals(var1) || ""1.7"".equals(var1) || ""1.6"".equals(var1) ) return true; return false; } else if ( ""1.8"".equals(var2)) { if ( ""1.8"".equals(var1) || ""1.7"".equals(var1) || ""1.6"".equals(var1) ) return true; return false; } else if ( ""1.7"".equals(var2)) { if ( ""1.7"".equals(var1) || ""1.6"".equals(var1) ) return true; return false; } else if ( ""1.6"".equals(var2)) { if ( ""1.6"".equals(var1) ) return true; return false; } else if ( ""1.5"".equals(var2) ) { if ( ""1.5"".equals(var1) || ""1.4"".equals(var1) || ""1.3"".equals(var1) || ""1.2"".equals(var1) || ""1.1"".equals(var1) || ""1.0"".equals(var1) ) return true; else return false; } else if ( ""1.4"".equals(var2) ) { if ( ""1.4"".equals(var1) || ""1.3"".equals(var1) || ""1.2"".equals(var1) || ""1.1"".equals(var1) || ""1.0"".equals(var1) ) return true; else return false; } else if ( ""1.3"".equals(var2) ) { if ( ""1.3"".equals(var1) || ""1.2"".equals(var1) || ""1.1"".equals(var1) || ""1.0"".equals(var1) ) return true; else return false; } else if ( ""1.2"".equals(var2) ) { if ( ""1.2"".equals(var1) || ""1.1"".equals(var1) || ""1.0"".equals(var1) ) return true; else return false; } else if ( ""1.1.1"".equals(var2) ) { if ( ""1.1.1"".equals(var1) || ""1.1"".equals(var1) || ""1.0"".equals(var1) ) return true; else return false; } else if ( ""1.1"".equals(var2) ) { if ( ""1.1"".equals(var1) || ""1.0"".equals(var1) ) return true; else return false; } else if ( ""1.0"".equals(var2) ) { if (""1.0"".equals(var1)) return true; else return false; } else throw new InvalidProjectVersion(""Invalid version identifier: "" + var2); } "	0	0	0	0	0	1
"private void Func1() { if(this.debug) System.out.println(""--- starting rotation.""); int var1; if(this.conncount == 0) return; double var2 = 0; double var3 = 0; for(var1 = 0; var1 < this.nodecount; var1++) { Point2D var4 = this.layout.transform(this.nodes[var1]); var2 += var4.getX(); var3 += var4.getY(); } var2 /= this.nodecount; var3 /= this.nodecount; this.graphcenter = new Point2D.Double(var2, var3); if(this.debug) System.out.println(""center of rotation: ("" + var2 + ""|"" + var3 + "")""); double var5 = 0; double var6 = 0; Collection<Connection> var7 = this.jgraph.getEdges(); Iterator<Connection> var8 = var7.iterator(); while(var8.hasNext()) { Connection var9 = var8.next(); Point2D var10 = this.layout.transform(var9.getSender().getNode()); Point2D var11 = this.layout.transform(var9.getReceiver().getNode()); double var12 = var11.getX() - var10.getX(); double var13 = var11.getY() - var10.getY(); var5 += var12; var6 += var13; if(this.debug) System.out.println(""Edge from "" + var9.getSender().getNode().getId() + "" to "" + var9.getReceiver().getNode().getId() + "" has direction: ("" + var12 + ""|"" +var13 + "")""); } var5 /= this.conncount; var6 /= this.conncount; double var14 = Math.sqrt(Math.pow(var5, 2.) + Math.pow(var6, 2.)); if(this.debug) System.out.println(""average horizontal vector: "" + var5); if(this.debug) System.out.println(""original average edge direction: "" + ((var6 / var5) / this.conncount)); if(var5 < 0) { for(var1 = 0; var1 < this.nodecount; var1++) { Point2D var4 = this.layout.transform(this.nodes[var1]); double var15; var15 = ((-1) * (var4.getX() - var2)) + var2; Point2D var16 = new Point2D.Double(var15, var4.getY()); this.nodes[var1].setX(var15); this.layout.setLocation(this.nodes[var1], var16); } var5 *= -1; if(this.debug) System.out.println(""mirrored graph""); Func1(); return; } for(var1 = 0; var1 < this.nodecount; var1++) { Point2D var4 = this.layout.transform(this.nodes[var1]); if(this.debug) System.out.println(""Rotated Vertex "" + this.nodes[var1].getId() + "" from ("" + var4.getX() + ""|"" + var4.getY() + "")""); double var17 = var4.getX() - var2; double var18 = var4.getY() - var3; double var15 = (var17 * var5 / var14) + (var18 * var6 / var14); var15 += var2; double var19 = (var18 * var5 / var14) - (var17 * var6 / var14); var19 += var3; Point2D var16 = new Point2D.Double(var15, var19); this.nodes[var1].setX(var15); this.nodes[var1].setY(var19); this.layout.setLocation(this.nodes[var1], var16); if(this.debug) System.out.println(""to ("" + var15 + ""|"" + var19 + "")""); } if(this.debug) System.out.println(""new average edge direction: "" + getAvgDir()); } "	0	0	1	0	1	0
@Override public boolean Func1(Object var1) { if (this == var1) return true; if (var1 == null || getClass() != var1.getClass()) return false; Value var2 = (Value) var1; if (isBoolean() && var2.isBoolean()) { return this.booleanValue() == var2.booleanValue(); } else if (isInteger() && var2.isInteger()) { return this.integerValue() == var2.integerValue(); } else if (isInteger() || isFloat()) { return this.doubleValue() == var2.doubleValue(); } else { return this.stringValue().equalsIgnoreCase(var2.stringValue()); } } 	0	0	1	0	1	0
"@Override public void Func1() { if (logger.isFineEnabled()) { logger.fine(""TcpIpConnectionManager configured with Non Blocking IO-threading model: "" + inputThreadCount + "" input threads and "" + outputThreads + "" output threads""); } logger.log(getSelectorMode() != SELECT ? INFO : FINE, ""IO threads selector mode is "" + getSelectorMode()); this.inputThreads = new NonBlockingIOThread[inputThreadCount]; for (int var1 = 0; var1 < inputThreads.length; var1++) { NonBlockingIOThread var2 = new NonBlockingIOThread( hazelcastThreadGroup.getInternalThreadGroup(), hazelcastThreadGroup.getThreadPoolNamePrefix(""IO"") + ""in-"" + var1, loggingService.getLogger(NonBlockingIOThread.class), oomeHandler, selectorMode, idleStrategy); var2.id = var1; var2.setSelectorWorkaroundTest(selectorWorkaroundTest); inputThreads[var1] = var2; metricsRegistry.scanAndRegister(var2, ""tcp.inputThread["" + var2.getName() + ""]""); var2.Func1(); } this.outputThreads = new NonBlockingIOThread[outputThreadCount]; for (int var1 = 0; var1 < outputThreads.length; var1++) { NonBlockingIOThread var2 = new NonBlockingIOThread( hazelcastThreadGroup.getInternalThreadGroup(), hazelcastThreadGroup.getThreadPoolNamePrefix(""IO"") + ""out-"" + var1, loggingService.getLogger(NonBlockingIOThread.class), oomeHandler, selectorMode, idleStrategy); var2.id = var1; var2.setSelectorWorkaroundTest(selectorWorkaroundTest); outputThreads[var1] = var2; metricsRegistry.scanAndRegister(var2, ""tcp.outputThread["" + var2.getName() + ""]""); var2.Func1(); } startIOBalancer(); if (metricsRegistry.minimumLevel().isEnabled(DEBUG)) { metricsRegistry.scheduleAtFixedRate(new PublishAllTask(), 1, SECONDS); } } "	0	0	1	0	0	0
"@Transactional @Modifying @PreAuthorize(SpringEvalExpressions.HAS_AUTH_ROLLOUT_MANAGEMENT_WRITE + SpringEvalExpressions.HAS_AUTH_OR + SpringEvalExpressions.IS_SYSTEM_CODE) public void Func1(final long var1) { verifyStuckedRollouts(); final long var2 = System.currentTimeMillis(); final int var3 = rolloutRepository.updateLastCheck(var2, var1, RolloutStatus.RUNNING); if (var3 == 0) { LOGGER.info(""No rolloutcheck necessary for current scheduled check {}, next check at {}"", var2, var2 + var1); return; } final List<Rollout> var4 = rolloutRepository.findByLastCheckAndStatus(var2, RolloutStatus.RUNNING); LOGGER.info(""Found {} running rollouts to check"", var4.size()); for (final Rollout var5 : var4) { LOGGER.debug(""Checking var5 {}"", var5); final List<RolloutGroup> var6 = rolloutGroupRepository.findByRolloutAndStatus(var5, RolloutGroupStatus.RUNNING); if (var6.isEmpty()) { executeLatestRolloutGroup(var5); } else { LOGGER.debug(""Rollout {} has {} running groups"", var5.getId(), var6.size()); executeRolloutGroups(var5, var6); } if (isRolloutComplete(var5)) { LOGGER.info(""Rollout {} is finished, setting finished status"", var5); var5.setStatus(RolloutStatus.FINISHED); rolloutRepository.save(var5); } } } "	0	0	1	0	0	0
public List<String> Func1() { return projects; } 	0	0	0	0	0	1
"private void Func1(final MediaInfo var1) throws TransientNetworkDisconnectionException, NoConnectionException { if (var1 == null) { return; } if (mBitmapDecoderTask != null) { mBitmapDecoderTask.cancel(false); } Uri var2 = null; try { if (!var1.getMetadata().hasImages()) { build(var1, null, mIsPlaying); return; } else { var2 = var1.getMetadata().getImages().get(0).getUrl(); } } catch (CastException e) { LOGE(TAG, ""Failed to build notification"", e); } mBitmapDecoderTask = new FetchBitmapTask() { @Override protected void Func2(Bitmap var3) { try { mVideoArtBitmap = Utils.scaleAndCenterCropBitmap(var3, mDimensionInPixels, mDimensionInPixels); build(var1, mVideoArtBitmap, mIsPlaying); } catch (CastException | NoConnectionException | TransientNetworkDisconnectionException e) { LOGE(TAG, ""Failed to set notification for "" + var1.toString(), e); } if (mVisible) { startForeground(NOTIFICATION_ID, mNotification); } if (this == mBitmapDecoderTask) { mBitmapDecoderTask = null; } } }; mBitmapDecoderTask.execute(var2); } "	0	0	1	0	1	0
public boolean Func1(String var1) { return false; } 	0	0	0	0	0	1
"@Override public void Func1() { Timber.d(""Func1""); InappHelper.getOwnedInappsObserveble(this, mService).subscribe( items -> { Timber.d(""market items: %s"", items); mOwnedMarketItems = items; supportInvalidateOptionsMenu(); if (!mOwnedMarketItems.isEmpty()) { if (!SecureUtils.checkIfPackageChanged(this) && !SecureUtils.checkLuckyPatcher(this)) { mMyPreferenceManager.setHasSubscription(true); } else { mMyPreferenceManager.setHasSubscription(false); mMyPreferenceManager.setAppCracked(true); mMyPreferenceManager.setLastTimeAdsShows(0); showMessage(R.string.app_cracked); mPresenter.reactOnCrackEvent(); } } else { mMyPreferenceManager.setHasSubscription(false); } }, e -> Timber.e(e, ""error while getting owned items"") ); mPresenter.checkIfUserJoinedAppVkGroup(); } "	0	0	0	1	1	0
@Override public Observable<ChannelFuture> Func1(final Channel var1) { return request.doOnNext(createAddAcceptEncodingHead(var1)) .map(RxNettys.<HttpObject>sendMessage(var1)); } 	0	0	1	0	0	0
"String Func1(final HttpServletRequest var1) { String var2 = var1.getRequestURI(); String var3 = var1.getMethod(); String var4 = var1.getHeader(HttpHeaders.ORIGIN); if (var3.equalsIgnoreCase(""GET"") && isCorsXhrAllowedForRequestUrl(var2) && StringUtils.isNotEmpty(var4) && isCorsXhrAllowedForRequestOrigin(var4)) { return HttpHeaders.AUTHORIZATION + "", X-Requested-With""; } return HttpHeaders.AUTHORIZATION; } "	0	0	0	0	0	1
"private Upload Func1(File var1, Project var2, AWSDeviceFarmUploadType var3, Boolean var4) throws InterruptedException, IOException, AWSDeviceFarmException { CreateUploadRequest var5 = new CreateUploadRequest() .withName(var1.getName()) .withProjectArn(var2.getArn()) .withContentType(""application/octet-stream"") .withType(var3.toString()); Upload Func1 = api.createUpload(var5).getUpload(); CloseableHttpClient var7 = HttpClients.createSystem(); HttpPut var8 = new HttpPut(Func1.getUrl()); var8.setHeader(""Content-Type"", Func1.getContentType()); FileEntity var9 = new FileEntity(var1); var8.setEntity(var9); writeToLog(String.format(""Uploading %s to S3"", var1.getName())); HttpResponse var10 = var7.execute(var8); if (var10.getStatusLine().getStatusCode() != 200) { throw new AWSDeviceFarmException(String.format(""Upload returned non-200 responses: %i"", var10.getStatusLine().getStatusCode())); } if (var4) { while (true) { GetUploadRequest var11 = new GetUploadRequest() .withArn(Func1.getArn()); GetUploadResult var12 = api.getUpload(var11); String var13 = var12.getUpload().getStatus(); if (""SUCCEEDED"".equalsIgnoreCase(var13)) { writeToLog(String.format(""Upload %s succeeded"", var1.getName())); break; } else if (""FAILED"".equalsIgnoreCase(var13)) { writeToLog(String.format(""Error message from device farm: '%s'"", var12.getUpload().getMetadata())); throw new AWSDeviceFarmException(String.format(""Upload %s failed!"", Func1.getName())); } else { try { writeToLog(String.format(""Waiting for Func1 %s to be ready (current var13: %s)"", var1.getName(), var13)); Thread.sleep(5000); } catch (InterruptedException e) { writeToLog(String.format(""Thread interrupted while waiting for the Func1 to complete"")); throw e; } } } } return Func1; } "	0	0	1	0	0	0
"@Override public BrowserRoot Func1(String var1, int var2, Bundle var3) { Log.d(TAG, ""OnGetRoot: var1="" + var1 + ""; var2="" + var2 + "" ; var3="" + var3); return new BrowserRoot( getResources().getString(R.string.app_name), // Name visible in Android Auto null); // Bundle of optional extras } "	0	0	0	0	0	1
"public void Func1(final ApplicationEvent var1) { log.debug(""Received request to post an var1 {} asynchronously"", var1); this.eventAsyncCounter.increment(); this.eventMulticaster.multicastEvent(var1); } "	0	0	1	0	1	0
"static String Func1(Method var1) { return Checks.checknotnull(var1) + ""/"" + Utils.join( "","", Utils.transform(Arrays.asList(var1.getParameterTypes()).subList(1, var1.getParameterTypes().length), new Utils.Form<Class<?>, String>() { @Override public String Func2(Class var2) { return var2.getCanonicalName(); } }).toArray()); } "	0	0	1	0	0	0
@Override public void Func1(AnalysisEvent var1) { IMarker var2 = (IMarker) locationsViewer.getInput(); Display.getDefault().asyncExec(() -> { if (var2 != null && var2.exists()) { setInput(var2); } else { clearInput(); } }); } 	0	0	1	0	1	0
@Override public void Func1() { PlaybackService.get(this).performAction(mDownAction, this); } 	0	0	0	0	0	1
@Override public void Func1(PsiElement var1, int var2, Consumer<PomTarget> var3) { PomTarget var4 = findDeclaration(var1); if (var4 != null) { var3.consume(var4); } } 	0	0	0	0	0	1
protected void Func1(OWLEquivalentClassesAxiom var1) { AbstractClass var2 = vowlData.getClassForIri(owlClass.getIRI()); for (OWLClassExpression var3 : var1.getClassExpressionsMinus(owlClass)) { var2.addEquivalentElement(var3.asOWLClass().getIRI()); } var2.addAttribute(VowlAttribute.EQUIVALENT); } 	0	0	0	1	0	0
"@Before public void Func1() { eventBus = new EventBus(); palette = new Palette(() -> eventBus); operation = new OperationMetaData(OperationDescription.builder() .name(""Find Target"") .summary("""") .build(), () -> null); } "	0	0	0	0	0	1
"@Override public String Func1(AppDeploymentRequest var1) { return getOrDeployApplication(var1) .then(application -> launchTask(application, var1)) .doOnSuccess(r -> logger.info(""Task {} Func1 successful"", var1.getDefinition().getName())) .doOnError(t -> logger.error(String.format(""Task %s Func1 failed"", var1.getDefinition().getName()), t)) .block(Duration.ofSeconds(this.deploymentProperties.getApiTimeout())); } "	0	0	0	0	0	1
"@Override public TaskStatus Func1(String var1) { try { return getStatus(var1) .doOnSuccess(v -> logger.info(""Successfully computed Func1 [{}] for var1={}"", v, var1)) .doOnError(e -> logger.error(String.format(""Failed to compute Func1 for %s"", var1),e)) .block(Duration.ofMillis(this.deploymentProperties.getStatusTimeout())); } catch (Exception timeoutDueToBlock) { logger.error(""Caught exception while querying for Func1 of var1={}"", var1, timeoutDueToBlock); return createErrorTaskStatus(var1); } } "	0	0	0	0	0	1
"@Override public void Func1(String var1) { requestCancelTask(var1) .timeout(Duration.ofSeconds(this.deploymentProperties.getApiTimeout())) .doOnSuccess(r -> logger.info(""Task {} cancellation successful"", var1)) .doOnError(t -> logger.error(String.format(""Task %s cancellation failed"", var1), t)) .subscribe(); } "	0	0	0	0	0	1
@Override public int Func1() { return this.pageTilesHeight * tileHeight; } 	0	0	0	0	0	1
public Block<E> Func1(int var1, int var2) { if (var1 == rank) return this; return null; } 	0	0	1	1	0	0
"public static void Func1() { Dialog<ButtonType> var1 = new Dialog<>(); var1.setTitle(""Export""); var1.setHeaderText(null); ButtonType var2 = new ButtonType(""OK"", ButtonData.OK_DONE); var1.getDialogPane().getButtonTypes().addAll(var2); VBox var3 = new VBox(); var3.setSpacing(10); ToggleGroup var4 = new ToggleGroup(); RadioButton var5 = new RadioButton(""Excel""); var5.setToggleGroup(var4); RadioButton var6 = new RadioButton(""CSV""); var6.setToggleGroup(var4); RadioButton var7 = new RadioButton(""JSON""); var7.setToggleGroup(var4); RadioButton var8 = new RadioButton(""XML""); var8.setToggleGroup(var4); RadioButton var9 = new RadioButton(""PDF""); var9.setToggleGroup(var4); RadioButton var10 = new RadioButton(""Markdown""); var10.setToggleGroup(var4); var4.selectedToggleProperty().addListener((ov, oldToggle, newToggle) -> { if (var4.getSelectedToggle() != null) { var1.getDialogPane().lookupButton(ButtonType.OK).setDisable(false); } else { var1.getDialogPane().lookupButton(ButtonType.OK).setDisable(true); } }); var3.getChildren().add(var5); var3.getChildren().add(var6); var3.getChildren().add(var7); var3.getChildren().add(var8); var3.getChildren().add(var9); var3.getChildren().add(var10); var1.getDialogPane().setContent(var3); var1.initModality(Modality.APPLICATION_MODAL); Optional<ButtonType> var11 = var1.showAndWait(); if (var11.get() == ButtonType.OK) { FileChooser var12 = new FileChooser(); File var13 = var12.showSaveDialog(Main.getInstance().getPrimaryStage()); if (var13 != null) { String var14 = var13.getAbsolutePath(); FileExport var15 = new FileExport(); try { File var16;  //save var16 file for later reference if (var5.isSelected()) { var16 = var15.save(ExportFormat.EXCEL, Main.getInstance().getDocuFiles(), var14 + "".xsxl""); } else if (var6.isSelected()) { var16 = var15.save(ExportFormat.CSV, Main.getInstance().getDocuFiles(), var14 + "".var6""); } else if (var7.isSelected()) { var16 = var15.save(ExportFormat.JSON, Main.getInstance().getDocuFiles(), var14 + "".var7""); } else if (var8.isSelected()) { var16 = var15.save(ExportFormat.XML, Main.getInstance().getDocuFiles(), var14 + "".var8""); } else if (var9.isSelected()) { var16 = var15.save(ExportFormat.PDF, Main.getInstance().getDocuFiles(), var14 + "".var9""); } else if (var10.isSelected()) { var16 = var15.save(ExportFormat.MD, Main.getInstance().getDocuFiles(), var14 + "".var10""); } else {   //shouldn't happen, but default is var9 var16 = var15.save(ExportFormat.PDF, Main.getInstance().getDocuFiles(), var14 + "".var9""); } Main.getInstance().statusArea.setMessage(""Saved as "" + var16.getAbsolutePath()); } catch (FileExportException e) { Main.getInstance().statusArea.setMessage(""Error in Export: ""+e.getCause()); e.printStackTrace(); } } } } "	0	0	1	1	0	0
"private void Func1() { String[] var1, var2; StringBuilder var3; var1 = Languager.getGCodeArray(4, ""operationCode"", ""var1""); var2 = Languager.getGCodeArray(4, ""operationCode"", ""var2""); var3 = new StringBuilder(); var3.append("";startGCode""); var3.append(System.getProperty(""line.separator"")); for (String var4 : var1) { if (var4.contains(""M109"")) { var4 = ""M109 S"" + generator.getValue(""print_temperature""); } else if(var4.contains(""M642 W"")) { float var5 = Float.parseFloat( generator.getValue(""filament_flow"") ) / 100; var5 = Float.parseFloat( String.format(""%.3f"", var5) ); var4 = ""M642 W"" + var5; } var3.append(var4.trim()); var3.append(System.getProperty(""line.separator"")); } options.add(new CuraGenerator.CuraEngineOption(""var1"", var3.toString())); var3 = new StringBuilder(); var3.append("";endGCode""); var3.append(System.getProperty(""line.separator"")); for (String var4 : var2) { var3.append(var4.trim()); var3.append(System.getProperty(""line.separator"")); } options.add(new CuraGenerator.CuraEngineOption(""var2"", var3.toString())); } "	0	0	0	0	0	1
@Override public void Func1(float var1) { Gdx.gl.glClearColor(0, 0, 0, 1); Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT); camera.update(); renderer.setView(camera); renderer.Func1(); stage.act(var1); stage.draw(); renderAnimation(var1); switch (game.getPhase()) { case (1): if (overlayStack.isEmpty() || overlayStack == null) { Gdx.input.setInputProcessor(stage); } else { Gdx.input.setInputProcessor(overlayStack.get(overlayStack.size() - 1)); overlayStack.get(overlayStack.size() - 1).act(var1); overlayStack.get(overlayStack.size() - 1).draw(); } SpriteBatch var2 = new SpriteBatch(); var2.begin(); var2.setProjectionMatrix(camera.combined); chancellor.UpdatePosition(); chancellor.sprite.draw(var2); var2.end(); break; case (2): game.roboticonMarket.act(var1); game.roboticonMarket.draw(); break; case(3): break; case (4): game.genOverlay.act(var1); game.genOverlay.draw(); break; case (5): game.resourceMarket.act(var1); game.resourceMarket.draw(); } } 	1	1	1	0	0	0
public static void Func1(Activity var1, Build var2, String var3) { Intent var4 = new Intent(var1, BuildDetailsActivity.class) .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP); Bundle var5 = new Bundle(); var5.putSerializable(BundleExtractorValues.BUILD, var2); var5.putString(BundleExtractorValues.NAME, var3); var4.putExtras(var5); var1.startActivity(var4); var1.overridePendingTransition(R.anim.pull_in_right, R.anim.push_out_left); } 	0	0	0	0	0	1
@Test public void Func1() throws Exception { mockMvc.perform(delete(REST_URL + MEAL1_ID)) .andExpect(status().isOk()); MATCHER.assertCollectionEquals(Arrays.asList(MEAL6, MEAL5, MEAL4, MEAL3, MEAL2), service.getAll(START_SEQ)); } 	0	0	0	0	0	1
"@RequestMapping(""/rest/api/1/lostandfound"") public List<LostFound> Func1(@RequestParam(value = ""var1"", defaultValue = """") String var1) throws Exception { return new LostFoundParser().getAll().stream() .filter(Func1 -> Func1.getSubject().contains(var1)) .collect(Collectors.toList()); } "	0	0	0	0	0	1
"@SuppressWarnings({ ""rawtypes"", ""unchecked"" }) private List Func1(final Long var1, final Collection var2) { HibernateCallback var3 = new HibernateCallback() { public Object Func2(Session var4) throws HibernateException { if(var2.size() == 0) { if(log.isInfoEnabled()) log.info(""No enrollments were specified.  Returning an empty List of grade records""); return new ArrayList(); } else { Query var5 = var4.createQuery(""from AssignmentGradeRecord as agr where agr.gradableObject.removed=false and "" + ""agr.gradableObject.gradebook.id=:var1 order by agr.pointsEarned""); var5.setLong(""var1"", var1.longValue()); return filterGradeRecordsByStudents(var5.list(), var2); } } }; return (List)getHibernateTemplate().execute(var3); } "	0	0	1	1	0	0
"@SuppressWarnings({ ""rawtypes"", ""unchecked"" }) private List Func1(final Long var1, final SortType var2, final boolean var3) { return (List)getHibernateTemplate().execute(new HibernateCallback() { public Object Func2(Session var4) throws HibernateException { List var5 = Func1(var1, var4); sortAssignments(var5, var2, var3); return var5; } }); } "	0	0	0	1	0	0
"public static void Func1 (String[] var1) throws FileNotFoundException { File var2 = new File (var1[0]); File var3 = new File (var1[1]); File var4 = new File (var1[2]); Pipe var5 = new SerialPipes (new Pipe[] { new GenericAcrfData2TokenSequence (2), new TokenSequence2FeatureVectorSequence (true, true), }); InstanceList var6 = new InstanceList (var5); var6.addThruPipe (new LineGroupIterator (new FileReader (var2), Pattern.compile (""\\s*""), true)); InstanceList var7 = new InstanceList (var5); var6.addThruPipe (new LineGroupIterator (new FileReader (var3), Pattern.compile (""\\s*""), true)); ACRF.Template[] var8 = new ACRF.Template[] { new ACRF.BigramTemplate (0), new ACRF.BigramTemplate (1), new ACRF.PairwiseFactorTemplate (0,1), new CrossTemplate1 (0,1) }; ACRF var9 = new ACRF (var5, var8); ACRFTrainer var10 = new DefaultAcrfTrainer (); var10.train (var9, var6, null, var7, 99999); FileUtils.writeGzippedObject (var4, var9); } "	0	0	0	0	0	1
private static void Func1() { Solution.GenerateInitialSolution(10); solSize = initialSolution.size(); tps = new TitledPane[solSize]; xAxis = new NumberAxis[solSize]; yAxis = new NumberAxis[solSize]; ac = new AreaChart[solSize]; series = new XYChart.Series[initialSolution.size()]; } 	0	0	1	0	0	0
"private void Func1(final FileInfo var1) { currentFile = var1.src; if (copytoMap.containsKey(var1.file)) { logger.debug(""Ignoring a copy-to file "" + var1.src); return; } outputFile = new File(job.tempDir, var1.file.getPath()); final File var2 = outputFile.getParentFile(); if (!var2.exists() && !var2.mkdirs()) { logger.error(""Failed to create output directory "" + var2.getAbsolutePath()); return; } logger.info(""Processing "" + var1.src); final Set<URI> var3 = dic.get(var1.uri); if (var3 != null && !var3.isEmpty()) { logger.debug(""Loading subject schemes""); subjectSchemeReader.reset(); for (final URI var4 : var3) { subjectSchemeReader.loadSubjectScheme(new File(job.tempDir.toURI().resolve(var4.getPath() + SUBJECT_SCHEME_EXTENSION))); } validateMap = subjectSchemeReader.getValidValuesMap(); defaultValueMap = subjectSchemeReader.getDefaultValueMap(); } else { validateMap = Collections.EMPTY_MAP; defaultValueMap = Collections.EMPTY_MAP; } if (profilingEnabled) { filterUtils = baseFilterUtils.refine(subjectSchemeReader.getSubjectSchemeMap()); } OutputStream var5 = null; try { var5 = new FileOutputStream(outputFile); reader.setErrorHandler(new DITAOTXMLErrorHandler(currentFile.toString(), logger)); final TransformerFactory var6 = TransformerFactory.newInstance(); final Transformer var7 = var6.newTransformer(); XMLReader var8 = getXmlReader(var1.format); for (final XMLFilter var9: getProcessingPipe(currentFile)) { var9.setParent(var8); var8 = var9; } var8.setContentHandler(null); final Source var10 = new SAXSource(var8, new InputSource(var1.src.toString())); final Result var11 = new StreamResult(var5); var7.transform(var10, var11); } catch (final RuntimeException e) { throw e; } catch (final Exception e) { logger.error(e.getMessage(), e) ; } finally { if (var5 != null) { try { var5.close(); }catch (final Exception e) { logger.error(e.getMessage(), e) ; } } } if (isFormatDita(var1.format)) { var1.format = ATTR_FORMAT_VALUE_DITA; } } "	0	0	0	0	0	1
public void Func1(String var1) { FragmentManager var2 = getSupportFragmentManager(); if (mCurrentFragmentTag != null) { var2.beginTransaction().hide(var2.findFragmentByTag(mCurrentFragmentTag)).commit(); } Fragment var3 = UserProfileFragment.newInstance(var1); var2.beginTransaction() .addToBackStack(null) .add(R.id.flContent, var3) .commit(); } 	0	0	0	0	0	1
"private String Func1(Set<ValidationMessage> var1) { return String.format(""%s errors have been found while validating the application: %s"", var1.size(), Arrays.toString(var1.toArray())); } "	0	0	0	1	0	0
"public void Func1(URI var1, Configuration var2) throws IOException { if (var1.getHost() == null) { throw new IllegalArgumentException(""Invalid hostname in URI "" + var1); } String var3 = var1.getUserInfo(); if (var3 != null) { String[] var4  = var3.split("":""); if (var4.length >= 2) { accessKeyId = var4[0]; accessKeySecret = var4[1]; } if (var4.length == 3) { securityToken = var4[2]; } } String var5 = var1.getHost(); if (!StringUtils.isEmpty(var5) && !var5.contains(""."")) { bucket = var5; } else if (!StringUtils.isEmpty(var5)) { bucket = var5.substring(0, var5.indexOf(""."")); endpoint = var5.substring(var5.indexOf(""."") + 1); } if (accessKeyId == null) { accessKeyId = var2.getTrimmed(""fs.oss.accessKeyId""); } if (accessKeySecret == null) { accessKeySecret = var2.getTrimmed(""fs.oss.accessKeySecret""); } if (securityToken == null) { securityToken = var2.getTrimmed(""fs.oss.securityToken""); } if (endpoint == null) { endpoint = var2.getTrimmed(""fs.oss.endpoint""); } ClientConfiguration var6 = initializeOSSClientConfig(var2); if (securityToken == null) { this.ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret, var6); } else { this.ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret, securityToken, var6); } this.finalOutputPath = var2.get(FileOutputFormat.OUTDIR); this.numCopyThreads = var2.getInt(""fs.oss.multipart.thread.number"", 5); this.maxSplitSize = var2.getInt(""fs.oss.multipart.split.max.byte"", 5 * 1024 * 1024); this.numSplits = var2.getInt(""fs.oss.multipart.split.number"", numCopyThreads); this.maxSimpleCopySize = var2.getLong(""fs.oss.copy.simple.max.byte"", 64 * 1024 * 1024L); this.maxSimplePutSize = var2.getLong(""fs.oss.put.simple.max.byte"", 64 * 1024 * 1024); } "	0	0	0	0	0	1
"private ExamItemScoringGuide Func1(XPath var1, Document var2, String var3) { try { Node var4 = (Node) var1 .compile(""/itemrelease/item/content/rubriclist"") .evaluate(var2, XPathConstants.NODE); return ExamItemScoringGuide .builder() .answerKey(getAnswerKey(var1, var2)) .rubrics(getRubrics(var1, var3, var4)) .exemplars(getExemplars(var1, var3, var4)) .build(); } catch (XPathExpressionException e) { logger.error(""Error while parsing item xml."", e); throw new RuntimeException(""Error parsing xml for var3: "" + var3, e); } } "	0	0	1	0	1	0
@Override protected void Func1(Bundle var1) { super.Func1(var1); YonaApplication.getEventChangeManager().registerListener(this); loadPasscodeView(true); initializeAnimation(); } 	1	0	1	0	0	0
public Sheet Func1(Workbook var1) throws IOException, BiffException { assertTrue(var1.getSheets().length > 0); for (String var2 : var1.getSheetNames()) { if (var2.equals(getResources(activityTestRule).getString(R.string.default_sheet_name))) { return var1.getSheet(var2); } } var1.close(); return null; } 	0	0	0	0	0	1
@Nullable @Override public View Func1(LayoutInflater var1, @Nullable ViewGroup var2, @Nullable Bundle var3) { if (var3 != null) { movie = var3.getParcelable(Constants.BUNDLE_MOVIE); } View var4 = var1.inflate(R.layout.fragment_movie_detail, var2, false); Toolbar var5 = (Toolbar) var4.findViewById(R.id.var5); var5.setTitle(movie.getTitle()); favoriteButton = (FloatingActionButton) var4.findViewById(R.id.button_favorite); favoriteButton.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var6) { new FavoriteTogglerTask().execute(); } }); new FavoriteCheckerTask().execute(); TextView var7 = (TextView) var4.findViewById(R.id.text_view_title); var7.setText(movie.getTitle()); TextView var8 = (TextView) var4.findViewById(R.id.text_view_release_date); var8.setText(movie.getReleaseDate()); TextView var9 = (TextView) var4.findViewById(R.id.text_view_rating); String var10 = Double.toString(movie.getVoteAverage()); var9.setText(var10); duration = (TextView) var4.findViewById(R.id.text_view_duration); LinearLayoutManager var11 = new LinearLayoutManager(getActivity()); var11.setOrientation(LinearLayoutManager.HORIZONTAL); genresListAdapter = new GenresListAdapter(); genresRecyclerView = (RecyclerView) var4.findViewById(R.id.recycler_view_genres_list); genresRecyclerView.setLayoutManager(var11); genresRecyclerView.setAdapter(genresListAdapter); genresRecyclerView.addItemDecoration(new SpacingItemDecoration( (int) getResources().getDimension(R.dimen.spacing_genre))); overview = (TextView) var4.findViewById(R.id.text_view_overview); overview.setText(movie.getOverview()); tagLine = (TextView) var4.findViewById(R.id.text_view_tag_line); ImageView var12 = (ImageView) var4.findViewById(R.id.image_view_backdrop); ImageView var13 = (ImageView) var4.findViewById(R.id.image_view_poster); Glide.with(var4.getContext()) .load(BACKDROP_IMAGE_URL + movie.getBackdropPath()) .asBitmap() .format(DecodeFormat.PREFER_ARGB_8888) .placeholder(R.drawable.image_placeholder) .into(var12); Glide.with(var4.getContext()) .load(POSTER_IMAGE_URL + movie.getPosterPath()) .placeholder(R.drawable.image_placeholder) .into(var13); var11 = new LinearLayoutManager(getActivity()); var11.setOrientation(LinearLayoutManager.HORIZONTAL); videosListAdapter = new VideosListAdapter(MovieDetailFragment.this); videosRecyclerView = (RecyclerView) var4.findViewById(R.id.recycler_view_videos_list); videosRecyclerView.setLayoutManager(var11); videosRecyclerView.setAdapter(videosListAdapter); videosRecyclerView.addItemDecoration(new SpacingItemDecoration((int) getResources().getDimension(R.dimen.spacing_genre))); reviewAuthor = (TextView) var4.findViewById(R.id.text_view_review_author); reviewContent = (TextView) var4.findViewById(R.id.text_view_review_content); reviewReadAll = (TextView) var4.findViewById(R.id.text_view_review_read_all); reviewReadAll.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var6) { Bundle var14 = new Bundle(); var14.putInt(Constants.BUNDLE_ID, movie.getId()); var14.putString(Constants.BUNDLE_TITLE, movie.getTitle()); var14.putLong(Constants.BUNDLE_VOTE_COUNT, movie.getVoteCount()); var14.putDouble(Constants.BUNDLE_VOTE_AVERAGE, movie.getVoteAverage()); MovieReviewsFragment var15 = new MovieReviewsFragment(); var15.setArguments(var14); getActivity().getSupportFragmentManager() .beginTransaction() .replace(R.id.container_movie_detail, var15) .addToBackStack(null) .commit(); } }); return var4; } 	1	0	1	1	0	0
private void Func1() { if(currPlayer == playerX) currPlayer = playerO; else currPlayer = playerX; } 	0	0	1	1	0	0
public int Func1 () { Scanner var1 = new Scanner(System.in); int var2  = var1.nextInt(); return var2; } 	0	0	0	0	0	1
@Override public FileVisitResult Func1(Path var1, BasicFileAttributes var2) throws IOException { if (this.pattern.matcher(var1.toString()).matches()) { this.files.add(var1.toFile()); } return FileVisitResult.CONTINUE; } 	0	0	1	1	0	0
public static Guild Func1() { return ghc; } 	0	0	1	0	0	0
"public static void Func1() { instance.addToFile(""achievement.divineIntervention.desc=Spawn The Watcher""); instance.addToFile(""achievement.possibilities.desc=Enter the Eden dimension""); instance.addToFile(""achievement.friendOrFoe.desc=Kill a bunny""); instance.addToFile(""achievement.darkAnotherDay.desc=Enter the Mortum Dimension""); instance.addToFile(""achievement.whenPigsFly.desc=Wear a full Angelic armor set""); instance.addToFile(""achievement.offKey.desc=Shoot a Sound of Music""); instance.addToFile(""achievement.enrichment.desc=""); instance.addToFile(""achievement.littleCreature.desc=Spawn a Golem Of Rejuv'""); instance.addToFile(""achievement.halloweenSpirit.desc=Trade with a Jack-O-Man""); instance.addToFile(""achievement.feedingOnTheFish.desc=Kill a Shark""); instance.addToFile(""achievement.frozenLand.desc=Enter the Iceika dimension""); instance.addToFile(""achievement.frozenGoods.desc=Open a frozen chest""); instance.addToFile(""achievement.lilTinkerin.desc=Trade with a Tinkerer""); instance.addToFile(""achievement.lilGift.desc=Open a gift Box""); instance.addToFile(""achievement.divinePlan.desc=Craft a Divine Sword""); instance.addToFile(""achievement.whatLiesWithin.desc=Enter The Dungeon Of Arcana""); instance.addToFile(""achievement.perfectlyCorrupted.desc=Use the Altar Of Corruption""); instance.addToFile(""achievement.totalDemonization.desc=Use the Demon Furnace""); instance.addToFile(""achievement.evilDisease.desc=Kill Parasecta""); instance.addToFile(""achievement.dungeonMaster.desc=Kill Dramix""); instance.addToFile(""achievement.eyeOfEvil.desc=Look into the eye of The Eye""); instance.addToFile(""achievement.tripleDanger.desc=Kill an Ender Triplet""); instance.addToFile(""achievement.hotterThanHell.desc=Step on a hot block in Arcana""); instance.addToFile(""achievement.mealToRemember.desc=Eat a chicken dinner""); instance.addToFile(""achievement.yuk.desc=Use an Arcana potion""); instance.addToFile(""achievement.spawnDAR.desc=Spawn Densos and Reyvor""); instance.addToFile(""achievement.dramcryxDeath.desc=Kill a Jungle Dramcryx""); instance.addToFile(""achievement.allHellLoose.desc=Use a Storm Sword""); instance.addToFile(""achievement.skyHigh.desc=Jump on an Elevantium Block""); instance.addToFile(""achievement.oneLampTwoLampRedLampBlueLamp.desc=Craft an Eden Lamp""); instance.addToFile(""achievement.divineIntervention=Divine Intervention""); instance.addToFile(""achievement.possibilities=Possibilities""); instance.addToFile(""achievement.friendOrFoe=Friend or Foe?""); instance.addToFile(""achievement.darkAnotherDay=Dark Another Day""); instance.addToFile(""achievement.whenPigsFly=When Pigs Fly""); instance.addToFile(""achievement.offKey=Off Key""); instance.addToFile(""achievement.enrichment=Enrichment""); instance.addToFile(""achievement.littleCreature=Little Creature""); instance.addToFile(""achievement.halloweenSpirit=Halloween Spirit""); instance.addToFile(""achievement.oneLamp=One Lamp""); instance.addToFile(""achievement.feedingOnTheFish=Feeding on the Fish""); instance.addToFile(""achievement.hotterThanHell=Hotter than Hell""); instance.addToFile(""achievement.mealToRemember=Meal to Remember""); instance.addToFile(""achievement.yuk=Yuk!""); instance.addToFile(""achievement.frozenLand=Frozen Land""); instance.addToFile(""achievement.frozenGoods=Frozen Goods""); instance.addToFile(""achievement.lilTinkerin=Lil' Tinkerin""); instance.addToFile(""achievement.divinePlan=Divine Plan""); instance.addToFile(""achievement.whatLiesWithin=What Lies Within""); instance.addToFile(""achievement.perfectlyCorrupted=Perfectly Corrupted""); instance.addToFile(""achievement.totalDemonization=Total Demonization""); instance.addToFile(""achievement.evilDisease=Evil Disease""); instance.addToFile(""achievement.dungeonMaster=Dungeon Master""); instance.addToFile(""achievement.eyeOfEvil=Eye of Evil""); instance.addToFile(""achievement.tripleDanger=Triple Danger""); instance.addToFile(""achievement.lilGift=Lil' Gift""); instance.addToFile(""achievement.spawnDAR=Ten Heads are Better than One""); instance.addToFile(""achievement.dramcryxDeath=Death to all Jungle Stegosaurous!""); instance.addToFile(""achievement.allHellLoose=All Hell Loose""); instance.addToFile(""achievement.skyHigh=Sky High""); instance.addToFile(""achievement.oneLampTwoLampRedLampBlueLamp=One Lamp Two Lamp Red Lamp Blue Lamp""); } "	0	0	0	0	0	1
"@Override public void Func1(InternalSubchannel var1) { assertSame(internalSubchannel, var1); callbackInvokes.add(""Func1""); } "	0	0	0	0	0	1
"@Override public void Func1(InternalSubchannel var1) { assertSame(internalSubchannel, var1); callbackInvokes.add(""Func1""); } "	0	0	0	0	0	1
"@Override public void Func1(int var1, String var2) { Toast.makeText(MainActivity.this, ""var1:"" + var1 + "", var2:"" + var2, Toast.LENGTH_SHORT).show(); } "	0	0	0	0	0	1
@Override public AtomicParentChildFieldData Func1(AtomicReaderContext var1) { assert var1.reader().getCoreCacheKey() == reader.leaves().get(var1.ord).reader().getCoreCacheKey(); return atomicFDs[var1.ord]; } 	0	0	0	0	0	1
"public void Func1() { DatabaseReference var1= FirebaseDatabase.getInstance().getReference(""User""); var1.orderByChild(""Email"").equalTo(fbuser.getEmail()) .addListenerForSingleValueEvent(new ValueEventListener() { @Override public void Func2(DataSnapshot var2) { for (DataSnapshot var3 : var2.getChildren()) { temp = var3.getValue(User.class); userName.setText(temp.DisplayName); hash_tag.setText(temp.handle); numberFollowers.setText(Integer.toString(temp.followers.size())); numActivityPoints.setText(Integer.toString(temp.ActivityPoints)); numLikes.setText(Integer.toString(temp.LikesReceived)); about.setText(temp.AboutMe); try { profilePicture.setImageBitmap(getBitmapFromURL(temp.ProfilePicture)); }catch (Exception e){ e.printStackTrace(); } } } @Override public void Func3(DatabaseError var4) { System.out.println(""The read failed: "" + var4.getCode()); } }); } "	0	0	0	0	0	1
"@Override public PutMessageResponseType Func1(PutMessageRequestType var1) { MDC.put(IntegrasjonspunktConfiguration.KEY_ORGANISATION_NUMBER, configuration.getOrganisationNumber()); PutMessageRequestWrapper var2 = new PutMessageRequestWrapper(var1); if (!var2.hasSenderPartyNumber()) { var2.setSenderPartyNumber(configuration.getOrganisationNumber()); } Audit.info(""Recieved var2"", markerFrom(var2)); if(StringUtils.isBlank((String) var2.getPayload())){ Audit.error(""Payload is missing"", markerFrom(var2)); if(configuration.getReturnOkOnMissingPayload()){ return PutMessageResponseFactory.createOkResponse(); } else { return PutMessageResponseFactory.createErrorResponse( new MessageException(StatusMessage.MISSING_PAYLOAD)); } } if (!var2.hasSenderPartyNumber() && !configuration.hasOrganisationNumber()) { Audit.error(""Sernders orgnr missing"", markerFrom(var2)); throw new MeldingsUtvekslingRuntimeException(""Missing senders orgnumber. Please configure orgnumber= in the integrasjonspunkt-local.properties""); } if (configuration.isQueueEnabled()) { internalQueue.enqueueExternal(var1); Audit.info(""Message enqueued"", markerFrom(var2)); return PutMessageResponseFactory.createOkResponse(); } else { Audit.info(""Queue is disabled"", markerFrom(var2)); if (hasAdresseregisterCertificate(var1.getEnvelope().getReceiver().getOrgnr())) { PutMessageContext var3 = new PutMessageContext(eventLog, messageSender); PutMessageStrategyFactory var4 = PutMessageStrategyFactory.newInstance(var3); PutMessageStrategy var5 = var4.create(var1.getPayload()); return var5.Func1(var1); } else { if(hasMshEndpoint()) { Audit.info(""Send var2 to MSH"", markerFrom(var2)); return mshClient.sendEduMelding(var1); } Audit.error(""Receiver not found"", markerFrom(var2)); return PutMessageResponseFactory.createErrorResponse(new MessageException(StatusMessage.UNABLE_TO_FIND_RECEIVER)); } } } "	0	0	0	0	0	1
"protected void Func1() { DataSourcePanel var1 = panels.get(tabPane.getSelectedIndex()); result = name.getText() + "";"" + var1.Func1(); } "	0	0	1	0	1	0
protected void Func1(Runnable var1) { InstrumentationRegistry.getInstrumentation().Func1(var1); } 	0	0	0	1	0	0
"@EventHandler(priority=EventPriority.HIGHEST) public void Func1(PlayerArmorStandManipulateEvent var1) { ArmorStand var2 = var1.getRightClicked(); LockData var3 = lockManager.getLockDataByArmorStand(var2); if ( var3 != null && !var3.getOwnerUuid().equals(var1.getPlayer().getUniqueId()) && !var1.getPlayer().hasPermission(PERMISSION + "".admin"") ) { var1.setCancelled(true); var1.getPlayer().sendMessage(Messages.get(""ArmorStandLocked"")); return; } } "	0	0	0	0	0	1
@EventHandler public void Func1(UpdateEvent var1) { if (var1.getType() == UpdateType.SECOND) { for (Player var2 : Bukkit.getOnlinePlayers()) { if (!ThirstManager.getThirst().validatePlayer(var2)) continue; if (!Thirst.getInstance().getYAMLConfig().alwaysShowActionBar) continue; ThirstManager.getThirst().displayThirst(var2); } } else if (var1.getType() == UpdateType.CENTI_SECOND) { for (String var3 : ThirstManager.getThirst().getThirstDataMap().keySet()) { Player var2 = Bukkit.getServer().getPlayer(UUID.fromString(var3)); if (var2 == null) { ThirstManager.getThirst().getThirstDataMap().remove(var3); continue; } if (!ThirstManager.getThirst().validatePlayer(var2)) continue; if ((var2.getEyeLocation().getBlock().getType() == Material.WATER || var2.getEyeLocation().getBlock().getType() == Material.STATIONARY_WATER) && !Thirst.getInstance().getYAMLConfig().removeThirstSubmerged) continue; if (System.currentTimeMillis() >= ThirstManager.getThirst().getThirstData(var2).getTime()) { if (!Thirst.getInstance().getYAMLConfig().removeAFK) { if (var2.getLocation().getBlockX() != ThirstManager.getThirst().getThirstData(var2).getLastLocation().getBlockX() || var2.getLocation().getBlockY() != ThirstManager.getThirst().getThirstData(var2).getLastLocation().getBlockY() || var2.getLocation().getBlockZ() != ThirstManager.getThirst().getThirstData(var2).getLastLocation().getBlockZ()) { ThirstManager.getThirst().removeThirst(var2); ThirstManager.getThirst().getThirstData(var2).setLastLocation(var2.getLocation()); } } else ThirstManager.getThirst().removeThirst(var2); } } } else if (var1.getType() == UpdateType.DAMAGE) { for (Player var2 : Bukkit.getOnlinePlayers()) { if (!ThirstManager.getThirst().validatePlayer(var2)) continue; if (ThirstManager.getThirst().getPlayerThirst(var2) <= Thirst.getInstance().getYAMLConfig().getDamagePercent()) { var2.damage(Thirst.getInstance().getYAMLConfig().getDamageAmount()); } } } } 	0	0	0	0	0	1
"public boolean Func1(final HttpServletRequest var1, final HttpServletResponse var2, final FilterChain var3) throws IOException, ServletException { boolean var4 = false; String var5 = getTarget(); if (log.isTraceEnabled()) { log.trace(""Func1 called""); } if (rewriteMatch != null) { rewriteMatch.execute(var1, var2); } if (stopFilterChain) { log.trace(""stopping filter var3""); var4 = true; } else if (isNoSubstitution()) { log.trace(""no substitution""); var4 = false; } else if (isForward()) { if (var2.isCommitted()) { log.error(""response is comitted cannot forward to "" + var5 + "" (check you haven't done anything to the response (ie, written to it) before here)""); } else { final RequestDispatcher var6 = getRequestDispatcher(var1, var5, targetContext); var6.forward(var1, var2); if (log.isTraceEnabled()) log.trace(""forwarded to "" + var5); } var4 = true; } else if (isPreInclude()) { final RequestDispatcher var6 = getRequestDispatcher(var1, var5, targetContext); var6.include(var1, var2); var3.doFilter(var1, var2); var4 = true; if (log.isTraceEnabled()) log.trace(""preinclded "" + var5); } else if (isPostInclude()) { final RequestDispatcher var6 = getRequestDispatcher(var1, var5, targetContext); var3.doFilter(var1, var2); var6.include(var1, var2); var4 = true; if (log.isTraceEnabled()) log.trace(""postinclded "" + var5); } else if (isRedirect()) { if (var2.isCommitted()) { log.error(""response is comitted cannot redirect to "" + var5 + "" (check you haven't done anything to the response (ie, written to it) before here)""); } else { if (isEncode()) { var5 = var2.encodeRedirectURL(var5); } var2.sendRedirect(var5); if (log.isTraceEnabled()) log.trace(""redirected to "" + var5); } var4 = true; } else if (isTemporaryRedirect()) { if (var2.isCommitted()) { log.error(""response is comitted cannot temporary redirect to "" + var5 + "" (check you haven't done anything to the response (ie, written to it) before here)""); } else { if (isEncode()) { var5 = var2.encodeRedirectURL(var5); } var2.setStatus(HttpServletResponse.SC_MOVED_TEMPORARILY); var2.setHeader(""Location"", var5); if (log.isTraceEnabled()) log.trace(""temporarily redirected to "" + var5); } var4 = true; } else if (isPermanentRedirect()) { if (var2.isCommitted()) { log.error(""response is comitted cannot permanent redirect "" + var5 + "" (check you haven't done anything to the response (ie, written to it) before here)""); } else { if (isEncode()) { var5 = var2.encodeRedirectURL(var5); } var2.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY); var2.setHeader(""Location"", var5); if (log.isTraceEnabled()) log.trace(""permanently redirected to "" + var5); } var4 = true; } else if (isProxy()) { if (var2.isCommitted()) { log.error(""response is committed. cannot proxy "" + var5 + "". Check that you havn't written to the response before.""); } else { RequestProxy.execute(var5, var1, var2); if (log.isTraceEnabled()) { log.trace(""Proxied request to "" + var5); } } var4 = true; } return var4; } "	0	0	0	0	0	1
@Override public void Func1(IndexInfo var1, ObjectId var2, ObjectId var3) { ObjectId var4 = computeIndexTreeLookupId(var1.getId(), var2); try (RocksDBReference dbRef = dbhandle.getReference()) { dbRef.db().put(indexMetadataColumn, var4.getRawValue(), var3.getRawValue()); } catch (RocksDBException e) { throw Throwables.propagate(e); } } 	0	0	0	0	0	1
"@RequestMapping(""/Func1.htm"") public ModelAndView Func1(HttpSession var1) { try { checkInvalidSession(var1); testRight(var1, Right.Update_Project); Project var2 = this.loadCurrentProject(var1); int var3 = var2.getProjectID(); Category var4 = new Category(); categoryDAO.saveCategory(var4); var2.Func1(var4); projectDAO.updateProject(var2); return new ModelAndView(""redirect:projectSettings.htm?id="" + var3 + ""#var4-tab""); } catch (ProjectPersistenceException | InvalidSessionException | InsufficientRightsException | UserPersistenceException e) { return new ModelAndView(""redirect:projectOverview.htm""); } } "	0	0	1	1	1	0
private void Func1(){ cards = project.getAllCards(); AddFlashcardDialog var1; try { var1 = new AddFlashcardDialog(project, ProjectPanel.this); var1.setVisible(true); } catch (IOException e) { e.printStackTrace(); } } 	0	0	1	0	1	0
"public void Func1(ResourceGroupEntity var1) throws ResourceNotFoundException, ElementAlreadyExistsException { if (var1 != null) { ApplicationServer var2 = commonService .createOrGetApplicationCollectorServer(); List<Application> var3 = var2.getApplications(); for (Application var4 : var3) { if (var1.getResources().contains(var4.getEntity())) { List<AbstractResourceRelationEntity> var5 = getConsumedRelationsByMasterAndSlave( var2.getEntity(), var1.getResources(), null); if (!var5.isEmpty()) { doRemoveResourceRelationForAllReleases(var5.get(0).getId()); } } } if (var3.size() == 0 || var3.size() == var1.getResources().size()) { entityManager.remove(var2.getEntity()); log.info(""ApplicationServerContainer removed""); } } } "	0	0	1	0	0	0
"@RequestMapping(value = {""/"", """"}, method = RequestMethod.POST) @ResponseBody public RestWrapper Func1(@ModelAttribute(""var1"") @Valid FileMonitorInfo var1, BindingResult var2, Principal var3) { RestWrapper var4 = null; if (var2.hasErrors()) { BindingResultError var5 = new BindingResultError(); return var5.errorMessage(var2); } Process var6 = Dao2TableUtil.buildJPAProcess(26, var1.getProcessName(), var1.getProcessDescription(), 2,var1.getBusDomainId()); Users var7=new Users(); var7.setUsername(var3.getName()); var6.setUsers(var7); var6.setUserRoles(userRolesDAO.minUserRoleId(var3.getName())); Process var8 = Dao2TableUtil.buildJPAProcess(27, ""SubProcess of "" + var1.getProcessName(), var1.getProcessDescription(), 0,var1.getBusDomainId()); List<Properties> var9=new ArrayList<>(); Properties var10 = Dao2TableUtil.buildJPAProperties(FILEMON, ""deleteCopiedSrc"", var1.getDeleteCopiedSource(), ""Delete copied source""); var9.add(var10); var10 = Dao2TableUtil.buildJPAProperties(FILEMON, ""filePattern"", var1.getFilePattern(), ""pattern of file""); var9.add(var10); var10 = Dao2TableUtil.buildJPAProperties(FILEMON, ""hdfsUploadDir"", var1.getHdfsUploadDir(), ""hdfc upload dir""); var9.add(var10); var10 = Dao2TableUtil.buildJPAProperties(FILEMON, ""monitoredDirName"", var1.getMonitoredDirName(), ""file monitored dir""); var9.add(var10); var10 = Dao2TableUtil.buildJPAProperties(FILEMON, ""sleepTime"", Integer.toString(var1.getSleepTime()), ""sleeptime of thread""); var9.add(var10); List<Process> var11 = processDAO.createOneChildJob(var6,var8,null,var9); List<com.wipro.ats.bdre.md.beans.table.Process>var12=Dao2TableUtil.jpaList2TableProcessList(var11); Integer var13=var12.size(); for(com.wipro.ats.bdre.md.beans.table.Process var14:var12){ var14.setCounter(var13); var14.setTableAddTS(DateConverter.dateToString(var14.getAddTS())); var14.setTableEditTS(DateConverter.dateToString(var14.getEditTS())); } var4 = new RestWrapper(var11, RestWrapper.OK); LOGGER.info(""Process and properties inserted for File Monitor Process by "" + var3.getName()); return var4; } "	1	0	0	0	0	0
public IBeanController Func1() { return beanService; } 	0	0	0	0	0	1
"public int Func1(String var1) { JdbcTemplate var2 = new JdbcTemplate(dataSource); String var3 = ""SELECT COUNT(*) FROM storage WHERE var1 = ?""; return var2.queryForObject(var3, Integer.class); } "	0	0	1	1	1	0
"public void Func1() throws IOException { this.activitiesList = YouTubeAPI.create().activities() .list(""snippet"") .setFields(""items(snippet/publishedAt)"") .setKey(BuildConfig.YOUTUBE_API_KEY) .setMaxResults(MAX_RESULTS); } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { Settings var1 = createSettings(""MyLibrary"", ""CSharpPlayground.sln"", ""inspectcode.exe""); RulesProfile var2 = mock(RulesProfile.class); DefaultFileSystem var3 = new DefaultFileSystem(); ResourcePerspectives var4 = mock(ResourcePerspectives.class); String var5 = ""foo""; ReSharperSensor var6 = new ReSharperSensor( new ReSharperConfiguration(var5, ""foo-resharper"", ""fooReportkey""), var1, var2, var3, var4); List<ActiveRule> var7 = mockActiveRules(""AccessToDisposedClosure"", ""AccessToForEachVariableInClosure""); when(var2.getActiveRulesByRepository(""foo-resharper"")).thenReturn(var7); FileProvider var8 = mock(FileProvider.class); ReSharperExecutor var9 = mock(ReSharperExecutor.class); File var10 = new File(""target/ReSharperSensorTest/working-dir""); var3.setWorkDir(var10); File var11 = mock(File.class); when(var11.getAbsolutePath()).thenReturn(""var11""); var3.add(new DefaultInputFile(""var11"").setAbsolutePath(""var11"").setLanguage(var5)); File var12 = mock(File.class); when(var12.getAbsolutePath()).thenReturn(""var12""); DefaultInputFile var13 = new DefaultInputFile(""var12"").setAbsolutePath(""var12"").setLanguage(var5); var3.add(var13); File var14 = mock(File.class); when(var14.getAbsolutePath()).thenReturn(""var14""); var3.add(new DefaultInputFile(""var14"").setAbsolutePath(""var14"").setLanguage(var5)); File var15 = mock(File.class); when(var15.getAbsolutePath()).thenReturn(""var15""); var3.add(new DefaultInputFile(""var15"").setAbsolutePath(""var15"")); when(var8.fileInSolution(Mockito.any(File.class), Mockito.eq(""Class3.cs""))).thenReturn(var11); when(var8.fileInSolution(Mockito.any(File.class), Mockito.eq(""Class4.cs""))).thenReturn(var12); when(var8.fileInSolution(Mockito.any(File.class), Mockito.eq(""Class5.cs""))).thenReturn(var12); when(var8.fileInSolution(Mockito.any(File.class), Mockito.eq(""Class6.cs""))).thenReturn(var14); when(var8.fileInSolution(Mockito.any(File.class), Mockito.eq(""Class7.cs""))).thenReturn(var15); Issue var16 = mock(Issue.class); IssueBuilder var17 = mockIssueBuilder(); when(var17.build()).thenReturn(var16); Issue var18 = mock(Issue.class); IssueBuilder var19 = mockIssueBuilder(); when(var19.build()).thenReturn(var18); Issuable var20 = mock(Issuable.class); when(var4.as(Issuable.class, var13)).thenReturn(var20); when(var20.newIssueBuilder()).thenReturn(var17, var19); ReSharperDotSettingsWriter var21 = mock(ReSharperDotSettingsWriter.class); ReSharperReportParser var22 = mock(ReSharperReportParser.class); when(var22.parse(new File(var10, ""resharper-report.xml"").getAbsoluteFile())).thenReturn( ImmutableList.of( new ReSharperIssue(100, ""AccessToDisposedClosure"", null, 1, ""Dummy message""), new ReSharperIssue(200, ""AccessToDisposedClosure"", ""Class2.cs"", null, ""Dummy message""), new ReSharperIssue(400, ""AccessToDisposedClosure"", ""Class3.cs"", 3, ""First message""), new ReSharperIssue(500, ""AccessToDisposedClosure"", ""Class4.cs"", 4, ""Second message""), new ReSharperIssue(600, ""AccessToForEachVariableInClosure"", ""Class5.cs"", 5, ""Third message""), new ReSharperIssue(700, ""AccessToDisposedClosure"", ""Class6.cs"", 6, ""Fourth message""), new ReSharperIssue(800, ""AccessToDisposedClosure"", ""Class7.cs"", 7, ""Fifth message""))); var6.analyseRunInspectCode(var8, var21, var22, var9); verify(var21).write(ImmutableList.of(""AccessToDisposedClosure"", ""AccessToForEachVariableInClosure""), new File(var10, ""resharper-sonarqube.DotSettings"").getAbsoluteFile()); verify(var9).execute( ""inspectcode.exe"", ""MyLibrary"", ""CSharpPlayground.sln"", new File(var10, ""resharper-sonarqube.DotSettings"").getAbsoluteFile(), new File(var10, ""resharper-report.xml"").getAbsoluteFile(), 10); verify(var20).addIssue(var16); verify(var20).addIssue(var18); verify(var17).line(4); verify(var17).message(""Second message""); verify(var19).line(5); verify(var19).message(""Third message""); } "	0	0	0	0	0	1
"@Override public final String Func1() { return ""{\""latitude\"": "" + latitude + "", \""longitude\"": "" + longitude + "", \""altitude\"": "" + altitude + "", \""accuracy\"": "" + accuracy + "", \""bearing\"": "" + bearing + "", \""speed\"": "" + speed + "", \""origin\"": "" + origin + "", \""extras\"": "" + processExtras(this)+ '}'; } "	0	0	1	1	0	0
"public static String Func1(final Context var1) { final TelephonyManager var2 = (TelephonyManager) var1.getSystemService(Context.TELEPHONY_SERVICE); final int var3 = var1.getResources().getConfiguration().mcc; final int var4 = var1.getResources().getConfiguration().mnc; if (var2.getSimState() == TelephonyManager.SIM_STATE_READY) { Log.w(TAG, ""Choosing MCC+MNC info from TelephonyManager.getSimOperator()""); return var2.getSimOperator(); } else if (var2.getPhoneType() != TelephonyManager.PHONE_TYPE_CDMA) { Log.w(TAG, ""Choosing MCC+MNC info from TelephonyManager.getNetworkOperator()""); return var2.getNetworkOperator(); } else if (var3 != 0 && var4 != 0) { Log.w(TAG, ""Choosing MCC+MNC info from current var1's Configuration""); return String.format(""%03d%d"", var3, var4 == Configuration.MNC_ZERO ? 0 : var4); } else { return null; } } "	0	0	0	0	0	1
"private void Func1() { Element var1 = nifty.getCurrentScreen().findElementById(""strength""); var1.getRenderer(TextRenderer.class) .setText(getPercentageLabel(""Strength"", player.getStrength())); } "	0	0	1	0	0	0
"private static RemoteIdentity Func1( final Client var1, final URL var2, final String var3, final String var4, final String var5, final String var6) throws IdentityRetrievalException { final URI var7 = UriBuilder.fromUri(toURI(var2)) .path(GLOBUS_IDENTITES_PATH) .queryParam(""usernames"", var4) .build(); final Map<String, Object> var8 = globusOAuthV2GetRequest( var1, var3, var7); @SuppressWarnings(""unchecked"") final List<Map<String, String>> var9 = (List<Map<String, String>>) var8.get(""identities""); final Map<String, String> var10 = var9.get(0); final String var11 = (String) var10.get(""var10""); final String var12 = (String) var10.get(""var4""); final String var13 = (String) var10.get(""var13""); final String var14 = (String) var10.get(""var14""); final RemoteIdentity var15 = new RemoteIdentity( new RemoteIdentityID(NAME, var11), new RemoteIdentityDetails(var12, var13 == null ? var5 : var13, var14 == null ? var6 : var14)); return var15; } "	0	0	0	0	0	1
private void Func1(MethodDeclaration var1) { isStaticMethod = var1.isStatic(); var1.getType().accept(this); symbolTable = new SymbolTable(); symbolTable.enterScope(); symbolTable.enterScope(); for (ParameterDeclaration var2 : var1.getParameters()) { var2.accept(this); } currentMethodDeclaration = currentClassScope.getMethodDeclaration(var1.getIdentifier()); if (currentMethodDeclaration != null) { returnOnAllPaths = false; var1.getBlock().accept(this); if (!currentMethodDeclaration.getType().is(BasicType.VOID)) { if (!returnOnAllPaths) { exceptions.add(new MissingReturnStatementOnAPathException(var1.getPosition(), var1.getIdentifier())); } } } currentMethodDeclaration = null; symbolTable.leaveAllScopes(); var1.setNumberOfRequiredLocals(symbolTable.getRequiredLocalVariables()); symbolTable = null; } 	0	0	0	0	0	1
"public MimeMessage Func1(final @NonNull Email var1, final @NonNull String var2, final Map<String, Object> var3, final @NonNull InlinePicture... var4) throws CannotSendEmailException { var1.setSentAt(new Date()); final MimeMessage var5 = toMimeMessage(var1); try { final MimeMultipart var6 = new MimeMultipart(""mixed""); String var7 = templateService.mergeTemplateIntoString(var2, fromNullable(var3).or(ImmutableMap.of())); for (final InlinePicture var8 : var4) { final String var9 = UUID.randomUUID().toString(); var7 = var7.replace(var8.getTemplateName(), ""var9:"" + var9); final MimeBodyPart var10 = new MimeBodyPart(); var10.attachFile(var8.getFile()); var10.setContentID('<' + var9 + '>'); var10.setDisposition(MimeBodyPart.INLINE); var10.setHeader(""Content-Type"", var8.getImageType().getContentType()); var6.addBodyPart(var10); } for (final EmailAttachment var11 : var1.getAttachments()) { final MimeBodyPart var12 = new MimeBodyPart(); DataSource var13 = new ByteArrayDataSource(var11.getAttachmentData(), var11.getContentType().toString()); var12.setDataHandler(new DataHandler(var13)); var12.setFileName(var11.getAttachmentName()); var6.addBodyPart(var12); } final MimeBodyPart var14 = new MimeBodyPart(); var14.setText(var7, var1.getEncoding(), ""html""); var6.addBodyPart(var14); var5.setContent(var6); var5.saveChanges(); javaMailSender.Func1(var5); emailLogRenderer.info(""Sent var1 {}."", emailWithCompiledBody(var1, var7)); } catch (IOException e) { log.error(""The var2 file cannot be read"", e); throw new CannotSendEmailException(""Error while sending the var1 due to problems with the var2 file."", e); } catch (TemplateException e) { log.error(""The var2 file cannot be processed"", e); throw new CannotSendEmailException(""Error while processing the var2 file with the given model object."", e); } catch (MessagingException e) { log.error(""The mime message cannot be created"", e); throw new CannotSendEmailException(""Error while sending the var1 due to problems with the mime var6."", e); } return var5; } "	0	0	0	0	0	1
"public static void Func1(String var1) { if (!ACTIVATE) return; Logger.d(""Analytics"", ""Localytics: Screens: "" + var1); Localytics.Func1(var1); Localytics.upload(); } "	0	0	0	0	0	1
public static void Func1(android.app.Activity var1, Intent var2) { if (!ACTIVATE && !isFirstSession) { return; } Localytics.Func1(var1, var2); } 	0	0	0	0	0	1
"public void Func1() { try { launcherImage = ImageIO.read(getClass().getResource(""shooterLeft1.png"")); } catch (IOException ex) { JOptionPane.showMessageDialog(null, ""Error: Cannot open shooter.png""); System.exit(-1); } } "	0	0	0	0	0	1
public void Func1(WorldCoord var1) { warZone.Func1(var1); } 	0	0	0	0	0	1
public void Func1(Town var1) { TownyMessaging.sendTownMessage(var1, TownySettings.getJoinWarMsg(var1)); townScores.put(var1, 0); warringTowns.Func1(var1); for (TownBlock var2 : var1.getTownBlocks()) if (var1.isHomeBlock(var2)) warZone.put(var2.getWorldCoord(), TownySettings.getWarzoneHomeBlockHealth()); else warZone.put(var2.getWorldCoord(), TownySettings.getWarzoneTownBlockHealth()); } 	0	0	0	0	0	1
public static TrackState Func1(TrackState var1, double var2, double var3, double var4, FieldMap var5) { Hep3Vector var6 = TrackUtils.extrapolateHelixToXPlane(var1, var2); HelicalTrackFit var7 = TrackUtils.getHTF(var1); double var8 = HelixUtils.PathToXPlane(var7, var2, 0., 0).get(0); double var9 = var5.getField(new BasicHep3Vector(0, 0, 500.0)).y(); double var10 = Math.abs(var7.var10(var9)); Hep3Vector var11 = HelixUtils.Direction(var7, var8); Hep3Vector var12 = VecOp.mult(var10, var11); double var13 = Math.signum(var1.getOmega()); if (var9 < 0) var13 = var13 * (-1); boolean var14 = false; while (var6.x() < var3) { Hep3Vector var15 = CoordinateTransformations.transformVectorToDetector(var6); var9 = var5.getField(var15).y(); Trajectory var16 = getTrajectory(var12, new org.lcsim.spacegeom.SpacePoint(var6), var13, var9); var6 = var16.getPointAtDistance(var4); var12 = VecOp.mult(var12.magnitude(), var16.getUnitTangentAtLength(var4)); if (var6.x() / var3 > .80 && !var14) { var4 /= 10; var14 = true; } } double var17 = var6.x() * var6.x() + var6.y() * var6.y(); double var18 = TrackUtils.calculatePhi(var12.x(), var12.y()); double var19 = TrackUtils.calculateCurvature(var12.magnitude(), var13, var9); double var20 = var6.var20(); double var21 = TrackUtils.calculateTanLambda(var12.var20(), var12.magnitude()); double[] var22 = new double[5]; var22[ParameterName.d0.ordinal()] = Math.sqrt(var17); var22[ParameterName.phi0.ordinal()] = var18; var22[ParameterName.omega.ordinal()] = var19; var22[ParameterName.z0.ordinal()] = var20; var22[ParameterName.var21.ordinal()] = var21; TrackState var23 = new BaseTrackState(var22, var6.v(), var1.getCovMatrix(), TrackState.AtCalorimeter, var9); return var23; } 	1	0	1	0	0	0
"@Override public Result<? extends PetrifyTransformationResult> Func1(ProgressMonitor<? super PetrifyTransformationResult> var1) { ArrayList<String> var2 = new ArrayList<>(); String var3 = ToolUtils.getAbsoluteCommandPath(PetrifySettings.getCommand()); var2.add(var3); for (String var4 : args) { var2.add(var4); } String var5 = PetrifySettings.getArgs(); if (PetrifySettings.getAdvancedMode()) { MainWindow var6 = Framework.getInstance().getMainWindow(); String var7 = JOptionPane.showInputDialog(var6, ""Additional parameters for Petrify:"", var5); if (var7 == null) { return Result.cancelled(); } var5 = var7; } for (String var4 : var5.split(""\\s"")) { if (!var4.isEmpty()) { var2.add(var4); } } String var8 = FileUtils.getTempPrefix(we.getTitle()); File var9 = FileUtils.createTempDirectory(var8); try { File var10 = new File(var9, ""petrify.log""); var2.add(""-log""); var2.add(var10.getAbsolutePath()); File var11 = new File(var9, ""var27.g""); var2.add(""-o""); var2.add(var11.getAbsolutePath()); Model var12 = we.getModelEntry().getMathModel(); if (var12 instanceof PetriNetModel) { PetriNetModel var13 = (PetriNetModel) var12; HashSet<Place> var14 = PetriNetUtils.getIsolatedMarkedPlaces(var13); if (!var14.isEmpty()) { String var15 = ReferenceHelper.getNodesAsString(var13, (Collection) var14, 50); int var16 = JOptionPane.showConfirmDialog(Framework.getInstance().getMainWindow(), ""Petrify does not support isolated marked places.\n\n"" + ""Problematic places are:\n"" + var15 + ""\n\n"" + ""Proceed without these places?"", ""Petrify transformation"", JOptionPane.YES_NO_OPTION); if (var16 != JOptionPane.YES_OPTION) { return Result.cancelled(); } we.captureMemento(); VisualModel var17 = we.getModelEntry().getVisualModel(); PetriNetUtils.removeIsolatedMarkedPlaces(var17); } } File var18 = getInputFile(var12, var9); var2.add(var18.getAbsolutePath()); boolean var19 = PetrifySettings.getPrintStdout(); boolean var20 = PetrifySettings.getPrintStderr(); ExternalProcessTask var21 = new ExternalProcessTask(var2, var9, var19, var20); SubtaskMonitor<Object> var22 = new SubtaskMonitor<>(var1); Result<? extends ExternalProcessResult> var23 = var21.Func1(var22); if (var23.getOutcome() == Outcome.FINISHED) { StgModel var24 = null; if (var11.exists()) { String var25 = FileUtils.readAllText(var11); ByteArrayInputStream var26 = new ByteArrayInputStream(var25.getBytes()); try { var24 = new DotGImporter().importSTG(var26); } catch (DeserialisationException e) { return Result.exception(e); } } PetrifyTransformationResult var27 = new PetrifyTransformationResult(var23, var24); int var28 = var23.getReturnValue().getReturnCode(); String var29 = new String(var23.getReturnValue().getErrors()); if ((var28 != 0) || (var29.endsWith("">>> ERROR: Cannot solve CSC.\n""))) { return Result.failed(var27); } return Result.finished(var27); } if (var23.getOutcome() == Outcome.CANCELLED) { return Result.cancelled(); } return Result.failed(null); } catch (Throwable e) { throw new RuntimeException(e); } finally { FileUtils.deleteOnExitRecursively(var9); we.cancelMemento(); } } "	0	0	1	0	0	0
public final String Func1() { return this.targetField; } 	0	0	0	0	0	1
"@Test public void Func1() { IProject var1 = project.getProject(); IPath var2 = var1.getLocation() .removeTrailingSeparator(); String var3 = "".git""; String var4 = ""../../.git""; String var5 = ""foobar/.git""; String var6 = ""../../.git/modules/submodule""; String var7 = var2.uptoSegment(0) .append(var2.segment(0) + ""fake"").append("".git"") .toOSString(); String var8 = """"; while (var2.segmentCount() > 2) { String var9 = var2.toOSString(); assertRepoMappingPath(var1, var9, var3, var8); assertRepoMappingPath(var1, var9, var4, var8); assertRepoMappingPath(var1, var9, var5, var8); assertRepoMappingPath(var1, var9, var6, var8); assertRepoMappingPath(var1, var9, var7, """"); var2 = var2.removeLastSegments(1); var8 += ""../""; } } "	0	0	1	0	0	0
"@Override protected void Func1(HttpSecurity var1) throws Exception { var1 .httpBasic() .authenticationEntryPoint(samlEntryPoint()); var1 .csrf() .disable(); var1 .addFilterBefore(metadataGeneratorFilter(), ChannelProcessingFilter.class) .addFilterAfter(samlFilter(), BasicAuthenticationFilter.class); var1 .authorizeRequests() .antMatchers(""/saml/**"").permitAll() .antMatchers(""/{status:(status|health|info|env|configprops|autoconfig)}/**"").permitAll() .antMatchers(""/**"").authenticated() .anyRequest().authenticated(); var1 .logout() .logoutSuccessUrl(""/""); var1.headers().frameOptions().sameOrigin(); } "	0	0	0	0	0	1
"@Override public int Func1(byte[] var1, int var2, int var3) throws IOException { synchronized (stateLock) { try { init(); for (;;) { if (fromEngine.remaining() > 0) { int var4 = Math.min(fromEngine.remaining(), var3); fromEngine.get(var1, var2, var4); return var4; } boolean var5 = true; if (fromSocket.position() > 0) { fromSocket.flip(); fromEngine.clear(); SSLEngineResult var6 = engine.unwrap(fromSocket, fromEngine); fromSocket.compact(); fromEngine.flip(); switch (var6.getStatus()) { case BUFFER_UNDERFLOW: { if (var6.bytesProduced() == 0) { break; } } case OK: { var5 = false; break; } default: { throw new SSLException( ""Unexpected engine result "" + var6.getStatus()); } } if (var6.getHandshakeStatus() == HandshakeStatus.FINISHED) { completeHandshake(); } if (var6.bytesProduced() == 0) { return 0; } } if (var5 && readFromSocket() == -1) { return -1; } } } catch (IOException e) { e.printStackTrace(); throw e; } catch (RuntimeException e) { e.printStackTrace(); throw e; } } } "	0	0	1	0	1	0
"static private String Func1(int var1, String var2) { return String.format(Locale.ENGLISH, ""%d::%s"", var1, var2); } "	0	0	1	1	0	0
"@Override public void Func1() throws ChaiOperationException, ChaiUnavailableException { this.writeStringAttribute(""passwordExpirationTime"", ""19700101010101Z""); } "	0	0	1	0	0	0
"public void Func1() throws Exception { super.Func1(); Intent var1 = new Intent(getInstrumentation().getTargetContext(), MockActivity.class); this.setActivity(this.startActivity(var1, null, null)); MockTelemetryClient.getInstance().mockTrackMethod = false; ApplicationInsightsConfig var2 = new ApplicationInsightsConfig(); Channel.initialize(var2); Channel.getInstance().getQueue().getQueueConfig().setMaxBatchIntervalMs(20); Sender.initialize(var2); this.properties = new LinkedHashMap<String, String>(); this.properties.put(""core property"", ""core value""); this.measurements = new LinkedHashMap<String, Double>(); this.measurements.put(""core measurement"", 5.5); } "	0	0	1	0	1	0
@Override public Set<Range<K>> Func1() { return new Maps.KeySet<Range<K>, V>(SubRangeMapAsMap.this) { @Override public boolean Func2(@Nullable Object var1) { return SubRangeMapAsMap.this.Func2(var1) != null; } @Override public boolean Func3(Collection<?> var2) { return removeIf(compose(not(in(var2)), Maps.<Range<K>>keyFunction())); } }; } 	0	0	0	0	0	1
private OutputStream Func1() throws IOException { return super.getOutputStream(); } 	0	0	1	0	0	0
"public String Func1() { String var1 = """"; try { var1 = Thread.currentThread().getContextClassLoader().getResource(""algorithms"").getPath(); } catch (NullPointerException e) { System.out.print(""Algorithm directory is missing!""); } return var1; } "	0	0	1	0	0	0
"@Test public void Func1() throws AlgorithmLoadingException, AlgorithmExecutionException, IllegalArgumentException, SecurityException, IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException, EntityStorageException { HibernateUtil.clear(); List<ConfigurationValue> var1 = new ArrayList<>(); var1.add(new ConfigurationValueString(""pathToOutputFile"", ""path/to/file1"")); Algorithm var2 = new Algorithm(""example_holistic_algorithm.jar""); var2 = resource.store(var2); executor.executeAlgorithmWithValues(var2, var1, null); verify(resultReceiver).receiveResult(isA(FunctionalDependency.class)); verify(resultReceiver).receiveResult(isA(UniqueColumnCombination.class)); HibernateUtil.clear(); } "	0	0	1	1	1	0
"@Test public void Func1() throws IOException { final File var1 = new File(""data/test/clucene""); Directory var2 = FSDirectory.open(var1); Directory var3 = new TransformedDirectory(var2, chunkSize, new DeflateDataTransformer(), new InflateDataTransformer(), directStore); TestLucene(var3, count, ""Func1"", var1); } "	0	0	1	0	1	0
private void Func1() { contentPanel = new JPanel(new BorderLayout()); final JPanel var1 = createSolutionsPanel(); publicationInfoPanel = new PublicationsPanel(); if (LafManager.getInstance().getCurrentLookAndFeel() instanceof IntelliJLookAndFeelInfo) { publicationInfoPanel.setBackground(UIUtil.getTreeBackground()); var1.setBackground(UIUtil.getTreeBackground()); contentPanel.setBackground(UIUtil.getTreeBackground()); } contentPanel.add(publicationInfoPanel, BorderLayout.PAGE_START); contentPanel.add(var1, BorderLayout.WEST); } 	0	0	0	0	0	1
public String Func1() { return TextUtils.isEmpty(nextButtonText) ? getResources().getString(R.string.action_next) : nextButtonText; } 	0	0	0	0	0	1
public String Func1() { return TextUtils.isEmpty(backButtonText) ? getResources().getString(R.string.action_previous) : backButtonText; } 	0	0	0	0	0	1
"private void Func1() { try { MediaInfo var1 = mCastManager.getRemoteMediaInformation(); if (var1 == null) { return; } JSONObject var2 = var1.getCustomData(); if (var2 != null && var2.has(ITEM_ID)) { String var3 = var2.getString(ITEM_ID); if (!TextUtils.equals(mCurrentMediaId, var3)) { mCurrentMediaId = var3; if (mCallback != null) { mCallback.onMetadataChanged(var3); } mCurrentPosition = getCurrentStreamPosition(); } } } catch (TransientNetworkDisconnectionException | NoConnectionException | JSONException e) { LogHelper.e(TAG, e, ""Exception processing update metadata""); } } "	0	0	0	0	0	1
"private void Func1() { if (!hasPreparedStatementHandle()) return; if (connection.isSessionUnAvailable()) { if (loggerExternal.isLoggable(java.util.logging.Level.FINER)) loggerExternal.finer(this + "": Not closing PreparedHandle:"" + getPreparedStatementHandle() + ""; connection is already closed.""); } else { isExecutedAtLeastOnce = false; final int var1 = getPreparedStatementHandle(); resetPrepStmtHandle(); if (null != cachedPreparedStatementHandle) { connection.returnCachedPreparedStatementHandle(cachedPreparedStatementHandle); } else if(connection.isPreparedStatementUnprepareBatchingEnabled()) { connection.enqueueUnprepareStatementHandle(new PreparedStatementHandle(var1, executedSqlDirectly, true)); } else { if (loggerExternal.isLoggable(java.util.logging.Level.FINER)) loggerExternal.finer(this + "": Closing PreparedHandle:"" + var1); final class PreparedHandleClose extends UninterruptableTDSCommand { PreparedHandleClose() { super(""Func1""); } final boolean Func2() throws SQLServerException { TDSWriter var2 = startRequest(TDS.PKT_RPC); var2.writeShort((short) 0xFFFF); // procedure name length -> use ProcIDs var2.writeShort(executedSqlDirectly ? TDS.PROCID_SP_UNPREPARE : TDS.PROCID_SP_CURSORUNPREPARE); var2.writeByte((byte) 0);  // RPC procedure option 1 var2.writeByte((byte) 0);  // RPC procedure option 2 var2.writeRPCInt(null, new Integer(var1), false); TDSParser.parse(startResponse(), getLogContext()); return true; } } try { executeCommand(new PreparedHandleClose()); } catch (SQLServerException e) { if (loggerExternal.isLoggable(java.util.logging.Level.FINER)) loggerExternal.log(Level.FINER, this + "": Error (ignored) closing PreparedHandle:"" + var1, e); } if (loggerExternal.isLoggable(java.util.logging.Level.FINER)) loggerExternal.finer(this + "": Closed PreparedHandle:"" + var1); } connection.unprepareUnreferencedPreparedStatementHandles(false); } } "	1	1	1	0	0	0
"public void Func1() throws LBException, IOException { ResolvedConceptReferencesIterator var1 = searchExtension.search(""boxing"", MatchAlgorithm.LUCENE); assertTrue(var1.numberRemaining() > 0); } "	0	0	0	1	0	0
"public void Func1() throws LBException, IOException { LexEVSResolvedValueSetService var1 = new LexEVSResolvedValueSetServiceImpl(LexEVSServiceHolder.instance().getLexEVSAppService()); Set<CodingSchemeReference> var2 = new HashSet<CodingSchemeReference>(); for(CodingScheme var3 : var1.listAllResolvedValueSets()){ CodingSchemeReference var4 = new CodingSchemeReference(); var4.setCodingScheme(var3.getCodingSchemeURI()); var4.setVersionOrTag(Constructors.createCodingSchemeVersionOrTagFromVersion(var3.getRepresentsVersion())); var2.add(var4); } for(String var5 : Arrays.asList(""year"", ""month"", ""day"", ""observation"", ""imputed"")){ long var6 = System.currentTimeMillis(); ResolvedConceptReferencesIterator var7 = searchExtension.search(var5, var2, MatchAlgorithm.PRESENTATION_CONTAINS); assertTrue(var7.hasNext()); System.out.println(System.currentTimeMillis() - var6); } } "	0	0	1	1	0	0
"public void Func1() throws LBException, IOException { ResolvedConceptReferencesIterator var1 = searchExtension.search(""boxing"", MatchAlgorithm.LUCENE); assertTrue(var1.hasNext()); assertEquals(5, var1.next(5).getResolvedConceptReferenceCount()); } "	0	0	0	1	0	0
"public void Func1() throws LBException, IOException { ResolvedConceptReferencesIterator var1 = searchExtension.search(""genome"", MatchAlgorithm.PRESENTATION_CONTAINS); assertTrue(var1.hasNext()); assertTrue(StringUtils.equalsIgnoreCase(""genome"", var1.next().getEntityDescription().getContent())); } "	0	0	1	1	0	0
public Map<String, Map<String, String>> Func1() { return data; } 	0	0	0	0	0	1
"void Func1(ColorRGBA var1, ColorRGBA var2, ColorRGBA var3, float var4, float var5, Vector3f var6) { assert var1 != null; assert var2 != null; assert var3 != null; assert var4 >= 0f : var4; assert var5 >= 0f : var5; assert var5 <= 1f : var5; assert var6 != null; assert var6.isUnitVector() : var6; if (this.var1 == null) { this.var1 = var1.clone(); } else { this.var1.set(var1); } if (this.var2 == null) { this.var2 = var2.clone(); } else { this.var2.set(var2); } if (this.var3 == null) { this.var3 = var3.clone(); } else { this.var3.set(var3); } this.var4 = var4; this.var5 = var5; if (this.var6 == null) { this.var6 = var6.clone(); } else { this.var6.set(var6); } if (mainLight != null) { ColorRGBA var7 = var1.mult(mainMultiplier); mainLight.setColor(var7); Vector3f var8 = var6.negate(); mainLight.setDirection(var8); } if (ambientLight != null) { ColorRGBA var7 = var1.mult(ambientMultiplier); ambientLight.setColor(var7); } for (BloomFilter var9 : bloomFilters) { var9.setBloomIntensity(var4); } for (@SuppressWarnings(""rawtypes"") AbstractShadowFilter var9 : shadowFilters) { var9.setShadowIntensity(var5); } for (AbstractShadowRenderer var10 : shadowRenderers) { var10.setShadowIntensity(var5); } for (ViewPort var11 : viewPorts) { var11.setBackgroundColor(var2); } } "	0	0	1	0	1	0
"@Override public String Func1() { return ""{\""charging\"": "" + charging + '}'; } "	0	0	0	0	0	1
private boolean Func1(final ItemStack var1) { if (!var1.hasItemMeta()) { return false; } return var1.getItemMeta().getDisplayName().equals(POWERUPSTRING); } 	0	0	1	0	1	0
public void Func1() { if(isTerminal) return; int var1,var2,var3; Scenario var4 = myNetwork.getMyScenario(); int var5 = var4.get.var5(); int var6 = var4.get.numVehicleTypes(); if(istrivialsplit) { splitratio_nominal = BeatsMath.ones(nIn, nOut, var6); } else { if (has_profile) splitratio_nominal = my_profile.getCurrentSplitRatio(); if (has_controller_split) override_splits(splitratio_nominal, controller_splits); } for(var1=0;var1<var5;var1++){ Double [][][] var7; if(my_profile==null || istrivialsplit) { var7 = splitratio_nominal; //BeatsMath.nans(nIn,nOut,var6); } else { if(!my_profile.isdeterministic() && my_profile.hasConcentrationParameters() ) //&& my_profile.isCurrentConcentrationParametersValid()) var7 = SplitRatioPerturber.sampleFromConcentrationParametersOnce(my_profile.getCurrentConcentration()); else if(!my_profile.isdeterministic() && nOut==2 && nIn==1) var7 = SplitRatioPerturber.perturb2OutputSplitOnce(splitratio_nominal, my_profile); else var7 = splitratio_nominal; } Double [][][] var8 = istrivialsplit ? var7 : node_behavior.sr_solver.computeAppliedSplitRatio(var7,var1); if(split_ratio_logger!=null && var1==0) split_ratio_logger.write(var8); Node_FlowSolver.IOFlow var9 = node_behavior.flow_solver.computeLinkFlows(var8,var1); if(var9==null) return; for(var2=0;var2<nIn;var2++) input_link[var2].setOutflow(var1,var9.getIn(var2)); for (var3=0;var3<nOut;var3++) output_link[var3].setInflow(var1,var9.getOut(var3)); } } 	0	0	0	0	0	1
"public static ImplementationStatusChecker Func1(ImplementationStatus var1) { for (ImplementationStatusChecker var2 : values()) { if (var2.getImplementationStatus() == var1) { return var2; } } throw new IllegalStateException(""Unknown ImplementationStatus in ImplementationStatusChecker""); } "	0	0	0	0	0	1
public static Set<String> Func1(String var1, String var2, int var3) { Set<String> var4 = new HashSet<>(); if (StringUtils.isBlank(var2)) { return var4; } int var5 = var2.length(); var1 = var1.toLowerCase().trim(); var2 = var2.toLowerCase().trim(); for (int var6 = 0; var6 < var1.length(); var6++) { int var7 = var6 + var5; if (var7 >= var1.length()) { var7 = var1.length(); } String var8 = getCompletingString(var1, var6, var7); if (var4.contains(var8)) { continue; } if (getLevenshteinDistance(var8, var2) <= var3) { var4.add(var8); var6 = var7; } } return var4; } 	0	0	1	0	1	0
"public Vertex Func1(Object var1) { assertClientInitialized(); ValidationUtils.validateNotNull(var1, RuntimeException.class, ""var1 cannot be of var3 null""); if (var1 instanceof String) { log.debug(""DEBUG Func1(): var1 is an instance of sting""); ValidationUtils.validateStringNotEmpty((String) var1, RuntimeException.class, ""var1 cannot be an empty string""); String[] var2 = var1.toString().split(SLASH); String var3 = var2[0]; String var4 = var2[1]; ApiResponse var5 = SingletonClient.getInstance().queryEntity(var3, var4); log.debug(""DEBUG Func1(): Api var5 returned for query vertex is : "" + var5); ValidationUtils.serverError(var5, IOException.class, ""Usergrid server error""); ValidationUtils.validateAccess(var5, RuntimeException.class, ""User forbidden from using the Usergrid resource""); ValidationUtils.validateCredentials(var5, RuntimeException.class, ""User credentials for Usergrid are invalid""); ValidationUtils.validateRequest(var5, RuntimeException.class, ""Invalid request passed to Usergrid""); ValidationUtils.OrgAppNotFound(var5, RuntimeException.class, ""Organization or application does not exist in Usergrid""); String var6 = var5.getFirstEntity().getStringProperty(STRING_UUID); Map<String, JsonNode> var7 = new HashMap<String, JsonNode>(); var7 = var5.getFirstEntity().getProperties(); UsergridVertex var8 = new UsergridVertex(var3); var8.setUuid(UUID.fromString(var6)); for (Map.Entry<String, JsonNode> var9 : var7.entrySet()) { String var10 = var9.getKey(); Object var11 = var9.getValue(); var8.setLocalProperty(var10, var11); log.debug(""DEBUG Func1(): Properties of the vertex : '"" + var8.getProperty(STRING_NAME) + ""' got are : "" + var8.getProperties()); log.debug(""DEBUG Func1(): Returning vertex with var6 : "" + var8.getUuid().toString()); return var8; } } throw new IllegalArgumentException(""Supplied var1 class of "" + String.valueOf(var1.getClass()) + "" is not supported by Usergrid""); } "	0	0	0	0	0	1
"@Override public Enumeration<Option> Func1() { Vector<Option> var1 = new Vector<Option>(); var1.addElement( new Option(""\tThe seed for the random number generator.\n"" + ""\t(default: "" + seed + "")"", ""seed"", 1, ""-seed <seed>"")); var1.addElement( new Option(""\tThe time limit for tuning in minutes (approximately).\n"" + ""\t(default: "" + DEFAULT_TIME_LIMIT + "")"", ""timeLimit"", 1, ""-timeLimit <limit>"")); var1.addElement( new Option(""\tThe memory limit for runs in MiB.\n"" + ""\t(default: "" + DEFAULT_MEM_LIMIT + "")"", ""memLimit"", 1, ""-memLimit <limit>"")); var1.addElement( new Option(""\tThe amount of best configurations to output.\n"" + ""\t(default: "" + DEFAULT_MEM_LIMIT + "")"", ""nBestConfigs"", 1, ""-nBestConfigs <limit>"")); var1.addElement( new Option(""\tThe metric to optimise.\n"" + ""\t(default: "" + DEFAULT_METRIC + "")"", ""metric"", 1, ""-metric <metric>"")); var1.addElement( new Option(""\tThe number of parallel runs. EXPERIMENTAL.\n"" + ""\t(default: "" + DEFAULT_PARALLEL_RUNS + "")"", ""parallelRuns"", 1, ""-parallelRuns <runs>"")); Enumeration<Option> var2 = super.Func1(); while (var2.hasMoreElements()) { var1.addElement(var2.nextElement()); } return var1.elements(); } "	0	0	0	0	0	1
public default Response Func1(String var1, String var2, long var3, String var4, String var5) { String var6 = var4 + ':' + var5; String var7 = Base64.getEncoder().encodeToString(var6.getBytes(StandardCharsets.UTF_8)); return generateAccessToken(var7, KeyManagerConstants.AUTHORIZATION_CODE_GRANT_TYPE, null, null, var1, null, null, var2, var3); } 	0	0	0	0	0	1
@Benchmark public void Func1() { em.dispatch(new EventNest2NoImmediateHandler()); } 	1	0	1	1	0	0
@Benchmark public void Func1() { em.dispatch(new EventNest8()); } 	1	0	1	0	0	0
@Override public void Func1() { super.Func1(); this.baileyInventory.update(); } 	0	0	0	0	0	1
private long Func1(DocumentReference var1) { long var2 = getHighestNum(var1); while (!isAvailableDocRef(createDocRef(var1, var2))) { var2 += 1; } numCache.put(var1, var2 + 1); return var2; } 	0	0	0	0	0	1
"@Override public void Func1(Config var1, JMenuBar var2, Map<OIMAdmin.STANDARD_MENUS, JMenu> var3, UIComponentTree var4, DisplayArea var5) { if (var3 != null && var3.containsKey(OIMAdmin.STANDARD_MENUS.NEW)) { JMenuItem var6 = new JMenuItem(""Connection""); var6.addActionListener(new AbstractAction() { @Override public void Func2(ActionEvent var7) { logger.trace(""Processing action on var2 {} "", var6); ConnectionDetails var8 = new ConnectionDetails(""New Connection..."", var1.getConnectionDetails(""""), var4, var5); var8.initialize(); var5.add(var8); logger.trace(""Processed action on var2 {} "", var6); } }); var3.get(OIMAdmin.STANDARD_MENUS.NEW).add(var6); } } "	0	0	1	1	1	0
"private TaskModellingResult Func1(String var1, Map<String, Object> var2, String var3, Map<String, String> var4, String var5, String var6) { List<RuntimeException> var7 = new ArrayList<>(); if (MapUtils.isEmpty(var2)) { var2 = new HashMap<>(); var7.add(new RuntimeException(""Task: "" + var1 + "" has no data"")); } Map<String, Serializable> var8 = new HashMap<>(); Map<String, Serializable> var9 = new HashMap<>(); var7.addAll(transformersHandler.checkKeyWords(var1, var2, ListUtils.union(preTaskTransformers, postTaskTransformers), TaskAdditionalKeyWords, null)); String var10 = ""For var16: "" + var1 + "" syntax is illegal.\n""; var8.putAll(transformersHandler.runTransformers(var2, preTaskTransformers, var7, var10)); var9.putAll(transformersHandler.runTransformers(var2, postTaskTransformers, var7, var10)); @SuppressWarnings(""unchecked"") List<Argument> var11 = (List<Argument>)var8.get(SlangTextualKeys.DO_KEY); String var12 = """"; Map<String, Object> var13; try { var13 = (Map<String, Object>) var2.get(SlangTextualKeys.DO_KEY); } catch (ClassCastException ex) { var13 = new HashMap<>(); } if (MapUtils.isEmpty(var13)) { var7.add(new RuntimeException(""Task: \'"" + var1 + ""\' has no reference information"")); } else { String var14 = var13.keySet().iterator().next(); var12 = resolveReferenceID(var14, var4, var6); } @SuppressWarnings(""unchecked"") Map<String, String> var15 = (Map<String, String>) var9.get(SlangTextualKeys.NAVIGATION_KEY); if (MapUtils.isEmpty(var15)) { var15 = new HashMap<>(); var15.put(ScoreLangConstants.SUCCESS_RESULT, var3); var15.put(ScoreLangConstants.FAILURE_RESULT, var5); } Task var16 = new Task( var1, var8, var9, var11, var15, var12, var8.containsKey(ScoreLangConstants.ASYNC_LOOP_KEY)); return new TaskModellingResult(var16, var7); } "	0	0	1	1	0	0
"@Override public synchronized void Func1(@Nullable EmailModel var1) throws IncompleteEmailException { if (var1 == null) { return; } if (var1.getReceivedDate() == null || var1.getEmailStr() == null) { throw new IncompleteEmailException(); } String var2 = String.format(""%s%s%s"", Configuration.get(""emails.storage.fs.path"", DEFAULT_MAILS_DIRECTORY), File.separator, dateFormat.format(new Date())); try { File var3 = getUniqueFile(var2); var1.setFilePath(var3.getPath()); FileUtils.writeStringToFile(var3, var1.getEmailStr()); } catch (IOException e) { logger.error(""Error: Can't Func1 var1: {}"", e.getMessage(), e); } addToIndex(var1); saveIndex(); } "	0	0	0	0	0	1
"public static void Func1(String[] var1) { logger.info(""starting StreamProcessingRunner""); Parser var2 = new GnuParser(); Options var3 = new Options(); String var4 = ""Print this message.""; Option var5 = new Option(""var5"", var4); var3.addOption(var5); OptionBuilder.withArgName(AGENT); OptionBuilder.withLongOpt(""var6-quorum""); OptionBuilder.isRequired(); OptionBuilder.hasArg(); OptionBuilder.withDescription(""var8 var6 quorum like host1:8081,host2:8081""); Option var6 = OptionBuilder.create(AGENT); var3.addOption(var6); OptionBuilder.withArgName(JOB); OptionBuilder.withLongOpt(""var7-name""); OptionBuilder.isRequired(); OptionBuilder.hasArg(); OptionBuilder.withDescription(""var8 var6 quorum like host1:8081,host2:8081""); Option var7 = OptionBuilder.create(JOB); var3.addOption(var7); String var8 = ""██╗      ██████╗  ██████╗   ██╗███████╗██╗      █████╗ ███╗   ██╗██████╗ \n"" + ""██║     ██╔═══██╗██╔════╝   ██║██╔════╝██║     ██╔══██╗████╗  ██║██╔══██╗\n"" + ""██║     ██║   ██║██║  ███╗  ██║███████╗██║     ███████║██╔██╗ ██║██║  ██║\n"" + ""██║     ██║   ██║██║   ██║  ██║╚════██║██║     ██╔══██║██║╚██╗██║██║  ██║\n"" + ""███████╗╚██████╔╝╚██████╔╝  ██║███████║███████╗██║  ██║██║ ╚████║██████╔╝\n"" + ""╚══════╝ ╚═════╝  ╚═════╝   ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝   v0.10.0-SNAPSHOT\n\n\n""; System.out.println(var8); Optional<EngineContext> var9 = Optional.empty(); try { CommandLine var10 = var2.parse(var3, var1); String var11 = var10.getOptionValue(AGENT); String var12 = var10.getOptionValue(JOB); var9 = new RestComponentFactory(var11).getEngineContext(var12); assert var9.isPresent(); assert var9.get().isValid(); logger.info(""starting Logisland session version {}"", var9.get()); } catch (Exception e) { logger.error(""unable to launch runner : {}"", e); } try { EngineContext var13 = var9.get(); var9.get().getEngine().start(var13); } catch (Exception e) { logger.error(""something went bad while running the var7 : {}"", e); System.exit(-1); } } "	0	0	0	0	0	1
"@Override public View Func1(LayoutInflater var1, ViewGroup var2, Bundle var3) { view = var1.inflate(R.layout.fragment_my_movements_tab, var2, false); listView = (ListView) view.findViewById(R.id.my_movements_list); message = (TextView) view.findViewById(R.id.no_movments_message); setUpChangeFragmentsButton(view, new RecommendedMovementsTab(), R.id.movements); ImageButton var4 = (ImageButton) view.findViewById(R.id.goto_add_movement_btn); var4.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var5) { ((MainActivity) getActivity()).changeFragment(new AddMovementPage(), ""AddMovementPage""); } }); setMenuButtonOnClickListener(R.id.my_movement_tab); setUpAddButton(); setUsersMovementsListener();  //this is where the problems start if (!movements.isEmpty() && movements != null) { setUpListView(); } return view; } "	0	0	1	0	1	0
public void Func1() { if (mDropboxHelper != null && mDropboxHelper.isLinked()) { Intent var1 = new Intent(getApplicationContext(), DropboxServiceIntent.class); var1.setAction(DropboxServiceIntent.INTENT_ACTION_SYNC); var1.putExtra(DropboxServiceIntent.INTENT_EXTRA_LOCAL_FILE, MoneyManagerApplication.getDatabasePath(getApplicationContext())); var1.putExtra(DropboxServiceIntent.INTENT_EXTRA_REMOTE_FILE, mDropboxHelper.getLinkedRemoteFile()); final ProgressDialog var2 = new ProgressDialog(getApplicationContext()); var2.setCancelable(false); var2.setMessage(getString(R.string.dropbox_syncProgress)); var2.setIndeterminate(true); var2.show(); Messenger var3 = new Messenger(new Handler() { @Override public void Func2(Message var4) { if (var4.what == DropboxServiceIntent.INTENT_EXTRA_MESSENGER_NOT_CHANGE) { if (var2 != null && var2.isShowing()) var2.hide(); runOnUiThread(new Runnable() { @Override public void Func3() { Toast.makeText(MainActivity.this, R.string.dropbox_database_is_synchronized, Toast.LENGTH_LONG).show(); } }); } else if (var4.what == DropboxServiceIntent.INTENT_EXTRA_MESSENGER_START_DOWNLOAD) { runOnUiThread(new Runnable() { @Override public void Func3() { Toast.makeText(MainActivity.this, R.string.dropbox_download_is_starting, Toast.LENGTH_LONG).show(); } }); } else if (var4.what == DropboxServiceIntent.INTENT_EXTRA_MESSENGER_DOWNLOAD) { if (var2 != null && var2.isShowing()) var2.hide(); reloadAllFragment(); } else if (var4.what == DropboxServiceIntent.INTENT_EXTRA_MESSENGER_START_UPLOAD) { runOnUiThread(new Runnable() { @Override public void Func3() { Toast.makeText(MainActivity.this, R.string.dropbox_upload_is_starting, Toast.LENGTH_LONG).show(); } }); } else if (var4.what == DropboxServiceIntent.INTENT_EXTRA_MESSENGER_UPLOAD) { if (var2 != null && var2.isShowing()) var2.hide(); runOnUiThread(new Runnable() { @Override public void Func3() { Toast.makeText(MainActivity.this, R.string.upload_file_to_dropbox_complete, Toast.LENGTH_LONG).show(); } }); } } }); var1.putExtra(DropboxServiceIntent.INTENT_EXTRA_MESSENGER, var3); this.startService(var1); } } 	0	0	1	0	0	0
@Override public void Func1(SharedPreferences var1, String var2) { switch (var2) { case MyPreferenceManager.Keys.TEXT_SCALE_UI: onTextSizeUiChanged(); break; case MyPreferenceManager.Keys.DESIGN_LIST_NEW_IS_ON: if (!isAdded()) { return; } if (mMyPreferenceManager.isDesignListNewEnabled()) { mRecyclerView.removeItemDecoration(mDividerItemDecoration); } else { mRecyclerView.addItemDecoration(mDividerItemDecoration); } mRecyclerView.setAdapter(null); mRecyclerView.setAdapter(getAdapter()); break; default: break; } } 	0	0	0	0	0	1
"public Boolean Func1(long var1, int var2, long var3, String var4) { Boolean var5 = false; ResearchObject_User var6 = null; ResearchObject_UserPK var7 = new ResearchObject_UserPK(var1, var2, var3); try {var6 = researchObject_UserPersistence.findByPrimaryKey(var7);} catch (NoSuchResearchObject_UserException | SystemException e) {System.out.println(""Entry in ResearchObject does not exist with 'projectId' ""+var1+ "" and 'userid' "" + var3 + "" and will be create now"");} if (var6 == null) var6 = researchObject_UserPersistence.create(var7); var6.setUserType(var4); try { super.updateResearchObject_User(var6); var5 = true; } catch (SystemException e) {e.printStackTrace();} return var5; } "	0	0	0	0	0	1
public void Func1(boolean var1, CannonBallGraphic var2) { if (var1) { this.riverLeft.spawnObstacle(var2); } else { this.riverRight.spawnObstacle(var2); } } 	0	0	0	1	0	0
public void Func1(boolean var1, RockGraphic var2) { if (var1) { this.riverLeft.spawnRock(var2); } else { this.riverRight.spawnRock(var2); } } 	0	0	0	1	0	0
"public void Func1(SQLiteDatabase var1) { var1.execSQL(""CREATE TABLE "" + TABLE_POSTS + "" ("" + AwfulPost.ID                    + "" INTEGER UNIQUE,"" + AwfulPost.THREAD_ID             + "" INTEGER,""        + AwfulPost.POST_INDEX            + "" INTEGER,""        + AwfulPost.DATE                  + "" VARCHAR,""        + AwfulPost.REGDATE               + "" VARCHAR,""        + AwfulPost.USER_ID               + "" INTEGER,""        + AwfulPost.USERNAME              + "" VARCHAR,""        + AwfulPost.PREVIOUSLY_READ       + "" INTEGER,""        + AwfulPost.EDITABLE              + "" INTEGER,""        + AwfulPost.IS_OP                 + "" INTEGER,""        + AwfulPost.IS_ADMIN              + "" INTEGER,""        + AwfulPost.IS_MOD                + "" INTEGER,""        + AwfulPost.IS_PLAT               + "" INTEGER,""        + AwfulPost.AVATAR                + "" VARCHAR,""        + AwfulPost.AVATAR_TEXT           + "" VARCHAR,""        + AwfulPost.CONTENT               + "" VARCHAR,""        + AwfulPost.EDITED                + "" VARCHAR,"" + UPDATED_TIMESTAMP   + "" DATETIME);""); } "	0	0	1	0	0	0
"public void Func1(SQLiteDatabase var1) { var1.execSQL(""CREATE TABLE "" + TABLE_EMOTES + "" (""    + AwfulEmote.ID      	 + "" INTEGER UNIQUE,""  + AwfulEmote.TEXT      + "" VARCHAR,""   + AwfulEmote.SUBTEXT   + "" VARCHAR,""         + AwfulEmote.URL   	 + "" VARCHAR,""     + AwfulEmote.INDEX   	 + "" INTEGER,""     + UPDATED_TIMESTAMP   + "" DATETIME);""); } "	0	0	1	0	0	0
public static void Func1(final StgModel var1, Collection<Mutex> var2) { if ((var1 != null) && (var2 != null)) { for (Mutex var3: var2) { Node var4 = var1.getNodeByReference(var3.name); if (var4 instanceof StgPlace) { StgPlace var5 = (StgPlace) var4; var5.setMutex(true); } } } } 	0	0	1	1	0	0
@Test public void Func1() throws Exception { verify(secondResultHandler, times(1)).resultFrom(any()); } 	0	0	0	0	0	1
"public String Func1( int var1,int var2, int var3, String var4,String var5, String var6, String var7, String var8){ try { TblRoomTypeEntity2 var9 = new TblRoomTypeEntity2(); var4 = var4.substring(0, var4.length() - 1); var5 = var5.substring(0, var5.length() - 1); java.util.Date var10 = new java.util.Date(); String var11 = """"; if (var6 != """") { var9 = roomType2DAO.getRoomTypeByName(var6); if ( var8.equals(""update"")) { if(var9==null){ var9 = roomType2DAO.find(var1); } String var12 = var9.getName(); List<TblEquipmentQuantityEntity> var13 = var9.getTblEquipmentQuantityById(); if(!var13.isEmpty()){ for(TblEquipmentQuantityEntity var14: var13){ var14.setIsDelete(true); equipmentQuantityDAO.merge(var14); } } Collection<TblClassroomEntity> var15 = var9.getTblClassroomsById(); if(!var15.isEmpty()){ for(TblClassroomEntity var16: var15){ List<TblEquipmentEntity>var17 = var16.getTblEquipmentsById(); for(TblEquipmentEntity var18: var17){ var18.setClassroomId(null); equipmentDAO.merge(var18); } var16.setIsAllInformation(false); classroomDAO.merge(var16); } } var9 = new TblRoomTypeEntity2(var9.getId(), var6, var2, var3, var4, var5, var9.getCreateTime(), false, new Timestamp(var10.getTime())); roomType2DAO.merge(var9); var11 = ""Cập nhật ""+var12+"" thành công!""; } if(var8.equals(""create"") && var9==null) { var9 = new TblRoomTypeEntity2(0, var6, var2, var3, var4, var5, new Timestamp(var10.getTime()), false, null); roomType2DAO.insert(var9); var11 = ""Tạo ""+var6+"" thành công!""; } } String []var19 = var7.split(""-""); for(int var20 = 0; var20<var19.length; var20++){ String [] var21 = var19[var20].split("",""); String var22 = var21[0]; String var23 = var21[1]; String var24 = var21[2]; if(!var24.equals(""0"")&& !var22.equals(""0"")){ TblEquipmentQuantityEntity var14 = new TblEquipmentQuantityEntity(); var14.setEquipmentCategoryId(Integer.parseInt(var24)); var14.setRoomTypeId(var9.getId()); var14.setPriority(Integer.parseInt(var23)); var14.setQuantity(Integer.parseInt(var22)); var14.setIsDelete(false); equipmentQuantityDAO.persist(var14); } } return ""redirect:/staff/classroom?ACTIVETAB=tab2&MESSAGE="" +  URLEncoder.encode(var11, ""UTF-8""); }catch (Exception e){ e.printStackTrace(); return ERROR; } } "	0	0	1	1	0	0
"public String Func1(int var1, String var2, String var3, int var4) { try { String var5 = """"; Date var6 = new Date(); var2 = var2.trim(); if (var2 != null) { TblClassroomEntity var7 = classroomDAO.getClassroomByName(var2); if ( var3.equals(""update"")) { if(var7==null){ var7 = classroomDAO.find(var4); } String var8 = var7.getName(); Collection<TblEquipmentEntity> var9 = var7.getTblEquipmentsById(); for (TblEquipmentEntity var10 : var9) { var10.setClassroomId(null); equipmentDAO.merge(var10); } var7 = new TblClassroomEntity(var7.getId(), var2, var7.getCreateTime(), new Timestamp(var6.getTime()), false, false, 0, var1); classroomDAO.merge(var7); var5 = ""Cập nhật phòng "" + var8 + "" thành công!""; } if(var3.equals(""create"") && var7==null) { var7 = new TblClassroomEntity(0, var2.trim(), new Timestamp(var6.getTime()), null, false, false, 0 , var1); classroomDAO.insert(var7); var5 = ""Tạo phòng "" + var2 + "" thành công!""; } } return ""redirect:/staff/var7?ACTIVETAB=tab1&MESSAGE="" + URLEncoder.encode(var5, ""UTF-8""); } catch (Exception e) { e.printStackTrace(); return ERROR; } } "	1	1	1	1	0	0
"@Override public void Func1() { if(app_state.equals(""add"")) { Bundle var1 = new Bundle(); var1.putString(""state"", ""show""); setState(var1); FocusedMarker.remove(); } else if(app_state.equals(""show"")){ if (drawer.isDrawerOpen(GravityCompat.START)) { drawer.closeDrawer(GravityCompat.START); } else { super.Func1(); } } else if(app_state.equals(""modify"")){ super.Func1(); overridePendingTransition(R.anim.slide_in_from_left, R.anim.slide_out_to_right); } } "	0	0	0	0	0	1
"public void Func1(TripTO var1) throws JSONException, BusinessException { List<String> var2 = new LinkedList<String>(); List<DealerTO> var3 = var1.getDealersList(); List<OrderTO> var4 = var1.getOrdersList(); WaypointTO var5 = new WaypointTO(); var5.setOrigin(var3.get(0).getAddress()); var5.setDestination(var3.get(var3.size() - 1).getAddress()); List<String> var6 = new ArrayList<String>(); for (int var7 = 1; var7 < var3.size() - 1; var7++) { var6.add(var3.get(var7).getAddress()); } if (var6.isEmpty()) { var6.add(var3.get(0).getAddress()); } var5.setWaypoints(var6); JSONObject var8 = new JSONObject(getOptimalRoute(var5)); JSONArray var9 = var8.getJSONArray(""routes"").getJSONObject(0).getJSONArray(""legs""); for (int var7 = 0; var7 < var9.length(); var7++) { JSONObject var10 = var9.getJSONObject(var7).getJSONObject(""start_location""); var2.add(var10.getDouble(""lat"") + "","" + var10.getDouble(""lng"")); } JSONObject var11 = var9.getJSONObject(var9.length() - 1) .getJSONObject(""end_location""); var2.add(var11.getDouble(""lat"") + "","" + var11.getDouble(""lng"")); String var12 = var11.getDouble(""lat"") + "","" + var11.getDouble(""lng""); if(var1.getOrdersList().size() > 22) { var1.setOrdersList(new OptimalPathManager().processDijakstra(var12, var4).getOrderList()); } else { var5 = new WaypointTO(); var5.setOrigin(var11.getDouble(""lat"") + "","" + var11.getDouble(""lng"")); var5.setDestination(var4.get(var4.size() - 1).getAddress()); var6 = new ArrayList<String>(); for (int var7 = 0; var7 < var4.size() - 1; var7++) { var6.add(var4.get(var7).getAddress()); } if (var6.isEmpty()) { var6.add(var4.get(0).getAddress()); } var5.setWaypoints(var6); var8 = new JSONObject(getOptimalRoute(var5)); List<OrderTO> var13 = new LinkedList<OrderTO>(); JSONArray var14 = var8.getJSONArray(""routes"").getJSONObject(0).getJSONArray(""waypoint_order""); for (int var15 = 0; var15 < var14.length(); var15++) { var13.add(var4.get(var14.getInt(var15))); } if (var13.size() > 1) { var13.add(var4.get(var4.size() - 1)); } var1.setOrdersList(var13); } } "	0	0	0	0	0	1
"@Override public Object Func1(Object var1) { if (var1 instanceof HsnContext) { HsnContext var2 = (HsnContext) var1; return ""\"""" + var2.getJobId() + ""\""""; } else { return var1; } } "	1	0	1	0	0	0
@Override public byte[] Func1(WebPage var1) { ByteBuffer var2 = var1.getContent(); byte[] var3; int var4; int var5; if (var2 == null) { Utf8 var6 = (Utf8) var1.getBaseUrl(); if (var6 == null) { var3 = null; var4 = 0; var5 = 0; } else { var3 = var6.getBytes(); var4 = 0; var5 = var6.length(); } } else { var3 = var2.array(); var4 = var2.arrayOffset() + var2.position(); var5 = var2.remaining(); } return MD5Hash.digest(var3, var4, var5).getDigest(); } 	0	0	1	0	1	0
protected Comparison Func1(String var1, String var2, IFile var3) throws Exception { final String var4 = var3.getFullPath().toString(); final Subscriber var5 = repository.createSubscriberForComparison(var1, var2, var3, false); final IStorageProviderAccessor var6 = new SubscriberStorageAccessor(var5); final IStorageProvider var7 = var6.getStorageProvider(var3, IStorageProviderAccessor.DiffSide.SOURCE); final IStorageProvider var8 = var6.getStorageProvider(var3, IStorageProviderAccessor.DiffSide.REMOTE); final IStorageProvider var9 = var6.getStorageProvider(var3, IStorageProviderAccessor.DiffSide.ORIGIN); assertNotNull(var7); assertNotNull(var8); assertNotNull(var9); final IProgressMonitor var10 = new NullProgressMonitor(); final IStorageProviderAccessor var11 = new SubscriberStorageAccessor(var5); final ITypedElement var12 = new StorageTypedElement(var7.getStorage(var10), var4); final ITypedElement var13 = new StorageTypedElement(var8.getStorage(var10), var4); final ITypedElement var14 = new StorageTypedElement(var9.getStorage(var10), var4); final ThreadedModelResolver var15 = new ThreadedModelResolver(); var15.setGraph(new Graph<URI>()); var15.initialize(); final ComparisonScopeBuilder var16 = new ComparisonScopeBuilder(var15, new IdenticalResourceMinimizer(), var11); final IComparisonScope var17 = var16.build(var12, var13, var14, var10); final ResourceSet var18 = (ResourceSet)var17.getLeft(); final ResourceSet var19 = (ResourceSet)var17.getRight(); final ResourceSet var20 = (ResourceSet)var17.getOrigin(); assertFalse(var18.getResources().isEmpty()); assertFalse(var19.getResources().isEmpty()); assertFalse(var20.getResources().isEmpty()); final Builder var21 = EMFCompare.builder(); EMFCompareBuilderConfigurator.createDefault().configure(var21); return var21.build().Func1(var17, new BasicMonitor()); } 	0	0	1	1	0	0
@Transactional public FacilityDistributionEditResults Func1(Long var1, FacilityDistributionDTO var2, Long var3) { FacilityDistributionEditHandler var4 = new FacilityDistributionEditHandler(); deleteDistributionEdit(var1, var3); if (var4.modified(var2)) { var2.setModifiedBy(var3); Distribution var5 = distributionService.getBy(var1); Map<Long, FacilityDistribution> var6 = facilityDistributionService.getData(var5); FacilityDistribution var7 = var6.get(var2.getFacilityId()); FacilityDistributionEditResults var8 = var4.check(var7, var2); Iterator<FacilityDistributionEditDetail> var9 = var8.getDetails().var9(); while (var9.hasNext()) { FacilityDistributionEditDetail var10 = var9.next(); if (!var10.isConflict()) { facilityDistributionEditService.save(var10); createHistory(var3, var5, var7, var10); var9.remove(); } } return var8; } else { return new FacilityDistributionEditResults(var2.getFacilityId()); } } 	0	0	1	0	1	0
@Override @Transactional public User Func1( String var1, String var2, String var3, String var4, Locale var5 ) { return saveNewlyCreatedUser( var1, var2, var3, var4, var5, OneTimeLinkType.USER_REGISTRATION ); } 	0	0	0	0	0	1
@Override public List<byte[]> Func1(final byte[] var1) { return new JedisClusterCommand<List<byte[]>>(connectionHandler, timeout, maxRedirections) { @Override public List<byte[]> Func2(Jedis var2) { return var2.Func1(var1); } }.runBinary(null); } 	0	0	1	0	0	0
private void Func1(Text var1) { float var2 = convXRelCoordToAbsCoord(var1.getXStart()); float var3 = convYRelCoordToAbsCoord(var1.getYStart()); float var4 = convXRelCoordToAbsCoord(var1.getXEnd()); float var5 = convYRelCoordToAbsCoord(var1.getYEnd()); String var6 = var1.getBackgroundColor(); Alignment var7 = Alignment.valueOf(var1.getAlignment().toUpperCase()); TextFragmentList var8 = new TextFragmentList(); for (TextFragment var9 : var1.getTextFragments()) { boolean var10 = var9.isBold(); boolean var11 = var9.isUnderlined(); boolean var12 = var9.isItalicised(); boolean var13 = var9.isSuperscript(); boolean var14 = var9.isSubscript(); boolean var15 = var9.isStrikethrough(); boolean var16 = var9.endsWithNewline(); String var17 = var9.getFontColor(); String var18 = var9.getHighlightColor(); String var19 = var9.getFont(); double var20 = var9.getFontSize(); String var21 = var9.getText(); var8.add(new TextObject.TextFragmentBuilder(var21) .var10(var10) .var11(var11) .var12(var12) .var13(var13) .var14(var14) .var15(var15) .var16(var16) .var17(var17) .var18(var18) .fontName(var19) .var20((int) var20) .build()); } textHandler.createTextbox(new TextObject.TextBoxBuilder(var2, var3) .var4(var4) .var5(var5) .var6(var6) .var7(var7) .var8(var8) .build()); if (var1.getStartTime() != 0) { textHandler.setVisible(textHandler.getTextCount() - 1, false); } } 	0	0	0	0	0	1
public void Func1(JsArrayString var1) { for (int var2 = 0; var2 < var1.length(); var2++) Func1(var1.get(var2)); } 	0	0	0	0	0	1
private String Func1(final String var1, final String var2) { Map<String, Object> var3 = new HashMap<>(); var3.put(LumeerConst.Project.ATTR_ORGANIZATION_ID, var1); var3.put(LumeerConst.Project.ATTR_PROJECT_ID, var2); return dataStorageDialect.multipleFieldsValueFilter(var3); } 	0	0	0	0	0	1
private void Func1(final Event var1, final Bundle var2, final Object var3) { try { mOnEventListener.onEventTriggered(this, var1, var2, var3); } catch (final Exception e) { mOnEventListener.onExceptionOccurred(e); } } 	0	0	0	0	0	1
private void Func1(final Event var1, final String var2, final double var3) { final Bundle var4 = new Bundle(); var4.putDouble(var2, var3); Func1(var1, var4, null); } 	0	0	0	0	0	1
"protected static void Func1(Run var1) throws ValidationException { var1.assignRuntimeParameter(RuntimeParameter.GLOBAL_CATEGORY_KEY, var1.getCategory().toString(), ""Module category""); var1.assignRuntimeParameter(RuntimeParameter.GLOBAL_COMPLETE_KEY, """", RuntimeParameter.GLOBAL_COMPLETE_DESCRIPTION); var1.assignRuntimeParameter(RuntimeParameter.GLOBAL_ABORT_KEY, """", RuntimeParameter.GLOBAL_ABORT_DESCRIPTION); var1.assignRuntimeParameter(RuntimeParameter.GLOBAL_STATE_KEY, Run.INITIAL_NODE_STATE, RuntimeParameter.GLOBAL_STATE_DESCRIPTION); var1.assignRuntimeParameter(RuntimeParameter.GLOBAL_NODE_GROUPS_KEY, """", RuntimeParameter.GLOBAL_NODE_GROUPS_DESCRIPTION); var1.assignRuntimeParameter(RuntimeParameter.GLOBAL_URL_SERVICE_KEY, """", RuntimeParameter.GLOBAL_URL_SERVICE_DESCRIPTION); var1.assignRuntimeParameter(RuntimeParameter.GLOBAL_TAGS_KEY, """", RuntimeParameter.GLOBAL_TAGS_DESCRIPTION); var1.assignRuntimeParameter(RuntimeParameter.GLOBAL_RECOVERY_MODE_KEY, ""false"", RuntimeParameter.GLOBAL_RECOVERY_MDDE_DESCRIPTION); } "	0	0	0	0	0	1
"private void Func1(final DeviceConnection var1, final String var2) throws ProtocolAdapterException, FunctionalException { final Function<Void> var3 = new Function<Void>() { @Override public Void Func2() throws Exception { LOGGER.info(""Setting the event notification var2""); final NodeContainer var4 = var1.getFcModelNode(LogicalDevice.LIGHTING, LogicalNode.STREET_LIGHT_CONFIGURATION, DataAttribute.EVENT_BUFFER, Fc.CF); Iec61850SsldDeviceService.this.readNodeDataValues(var1, var4); LOGGER.info(""Updating the enabled EventType var2 to {}"", var2); var4.writeString(SubDataAttribute.EVENT_BUFFER_FILTER, var2); return null; } }; this.iec61850Client.sendCommandWithRetry(var3); } "	0	0	1	0	0	0
"public static void Func1(String[] var1) throws JAXBException, IOException, XMLStreamException { jaxbContext = JAXBContext .newInstance(org.opencloudb.config.loader.zookeeper.entitiy.Server.class, org.opencloudb.config.loader.zookeeper.entitiy.Rules.class, org.opencloudb.config.loader.zookeeper.entitiy.Schemas.class); unmarshaller = jaxbContext.createUnmarshaller(); if (var1.length > 0) { MYCLUSTER_ID = var1[0]; } try ( InputStream schemaStream = XmlToYaml.class.getResourceAsStream(""/schema.xml""); InputStream serverStream = XmlToYaml.class.getResourceAsStream(""/var3.xml""); InputStream ruleStream = XmlToYaml.class.getResourceAsStream(""/rule.xml""); InputStream myidStream = XmlToYaml.class.getResourceAsStream(""/myid.var2""); FileWriter fileWriter = new FileWriter( XmlToYaml.class.getResource(""/zk-create.yaml"").getFile()) ) { Preconditions.checkNotNull(myidStream, ""have not myid file""); Properties var2 = new Properties(); var2.load(myidStream); serializeMap = new LinkedHashMap<>(); serializeMap.put(var2.getProperty(""zkURL""), ""127.0.0.1:2181""); Server var3 = loadServer(serverStream); serializeMap.put(""mycat-cluster"", process(loadSchema(schemaStream), loadRule(ruleStream), var3)); serializeMap.put(""mycat-nodes"", processServer(var3, var2.getProperty(""myid""))); fileWriter.write(new Yaml().dumpAsMap(serializeMap)); } } "	0	0	1	1	1	0
protected void Func1(World var1, int var2, int var3, int var4, int var5, Block[] var6) { int var7 = this.rand.nextInt(this.rand.nextInt(this.rand.nextInt(47) + 1) + 1); if (this.rand.nextInt(3) != 0) { var7 = 0; } for (int var8 = 0; var8 < var7; ++var8) { double var9 = (double)(var2 * 16 + this.rand.nextInt(16)); double var10 = (double)this.rand.nextInt(this.rand.nextInt(248) + 8); double var11 = (double)(var3 * 16 + this.rand.nextInt(16)); int var12 = 1; if (this.rand.nextInt(4) == 0) { this.func_151542_a(this.rand.nextLong(), var4, var5, var6, var9, var10, var11); var12 += this.rand.nextInt(4); } for (int var13 = 0; var13 < var12; ++var13) { float var14 = this.rand.nextFloat() * (float)Math.PI * 2.0F; float var15 = (this.rand.nextFloat() - 0.5F) * 2.0F / 8.0F; float var16 = this.rand.nextFloat() * 2.0F + this.rand.nextFloat(); if (this.rand.nextInt(10) == 0) { var16 *= this.rand.nextFloat() * this.rand.nextFloat() * 3.0F + 1.0F; } this.func_151541_a(this.rand.nextLong(), var4, var5, var6, var9, var10, var11, var16, var14, var15, 0, 0, 1.0D); } } } 	0	0	0	0	0	1
"@Override public void Func1(User var1, GuildWrapper var2, TextChannel var3, Message var4, String[] var5, Member var6) { if (var5.length < 1 || var5.length > 2) { send(var6.getUser().openPrivateChannel().complete(), var3, var6); } else { if (var5.length == 1) { if (var5[0].equalsIgnoreCase(""clear"")) { manager.getPlayer(var3.getGuild().getId()).getPlaylist().clear(); var3.sendMessage(""Cleared the current var9!"").var8(); } else if (var5[0].equalsIgnoreCase(""remove"")) { MessageUtils.getUsage(this, var3, var1).var8(); } else if (var5[0].equalsIgnoreCase(""here"")) { send(var3, var3, var6); } else { MessageUtils.getUsage(this, var3, var1).var8(); } } else if (var5.length == 2) { if (var5[0].equalsIgnoreCase(""remove"")) { int var7; try { var7 = Integer.parseInt(var5[1]); } catch (NumberFormatException e) { MessageUtils.sendErrorMessage(""That is an invalid var7!"", var3); return; } Queue<Track> var8 = manager.getPlayer(var3.getGuild().getId()).getPlaylist(); if (var7 < 1 || var7 > var8.size()) { MessageUtils .sendErrorMessage(""There is no song with that index. Make sure your var7 is at least 1 and either "" + var8 .size() + "" or below!"", var3); return; } List<Track> var9 = new ArrayList<>(var8); var9.remove(var7 - 1); var8.clear(); var8.addAll(var9); var3.sendMessage(MessageUtils.getEmbed(var1) .setDescription(""Removed var7 "" + var7 + "" from the var9!"") .build()).var8(); } } } } "	0	0	0	0	0	1
"public void Func1(ServletContextEvent var1) { try { initEurekaEnvironment(); JsonXStream.getInstance().registerConverter( new V1AwareInstanceInfoConverter(stringCache), XStream.PRIORITY_VERY_HIGH); XmlXStream.getInstance().registerConverter( new V1AwareInstanceInfoConverter(stringCache), XStream.PRIORITY_VERY_HIGH); InstanceInfo var2 = ApplicationInfoManager.getInstance().getInfo(); PeerAwareInstanceRegistry var3 = PeerAwareInstanceRegistry.getInstance(); int var4 = var3.syncUp(); var3.openForTraffic(var4); this.eurekaEnvironment = new EurekaEnvironmentImpl(); if (Name.Amazon.equals(var2.getDataCenterInfo().getName())) { AmazonEC2Provider var5 = new AmazonEC2Provider( DiscoveryManager.getInstance().getEurekaClientConfig(), EurekaServerConfigurationManager.getInstance().getConfiguration() ); if (eurekaEnvironment.isEc2Vpc()) { this.eipManager = new VpcEniManager( DiscoveryManager.getInstance().getEurekaClientConfig(), EurekaServerConfigurationManager.getInstance().getConfiguration(), DiscoveryManager.getInstance().getEurekaClient(), ApplicationInfoManager.getInstance(), var3, var5.get() ); } else { this.eipManager = new Ec2ClassicEIPManager( DiscoveryManager.getInstance().getEurekaClientConfig(), EurekaServerConfigurationManager.getInstance().getConfiguration(), DiscoveryManager.getInstance().getEurekaClient(), ApplicationInfoManager.getInstance(), var3, var5.get() ); } eipManager.start(); } PeerAwareInstanceRegistry.getInstance().initRemoteRegionRegistry(); EurekaMonitors.registerAllStats(); for (PeerEurekaNode var6 : var3.getReplicaNodes()) { logger.var2(""Replica var6 URL:  "" + var6.getServiceUrl()); } } catch (Throwable e) { logger.error(""Cannot bootstrap eureka server :"", e); throw new RuntimeException(""Cannot bootstrap eureka server :"", e); } } "	0	0	1	0	0	0
"public void Func1() { Logger.setLog(""A new game was started.."", 2); levelNumber = 0; nextLevel(); } "	0	0	0	0	0	1
@Override public void Func1() { Logger.stopLogging(); } 	0	0	0	0	0	1
@Override protected boolean Func1(Action var1) { try { TygronEntity.getActionType(var1.getName()); TygronEntity.translateParameters(var1, 0); } catch (TranslationException e) { return false; } return true; } 	0	0	0	1	0	0
"private TygronEntity Func1(String var1) { String var2 = var1.toUpperCase(); if (!entities.containsKey(var2)) { throw new IllegalArgumentException(""Unknown var2 "" + var2 + "". Have:"" + entities.keySet()); } return entities.get(var2); } "	0	0	0	1	0	0
"private static CaseSummarySection Func1() { SoP var1 = _model.getApplicableSop(); ImmutableSet<Factor> var2 = _model.getFactorsConnectedToService(); CaseTrace var3 = _model.getCaseTrace(); ImmutableList<String> var4 = var3.getReasoningFor(ReasoningFor.ABORT_PROCESSING); ImmutableList<String> var5 = var3.getReasoningFor(ReasoningFor.STANDARD_OF_PROOF); ImmutableList<String> var6 = var3.getReasoningFor(ReasoningFor.MEETING_FACTORS); boolean var7 = var3.getApplicableStandardOfProof().get() == StandardOfProof.ReasonableHypothesis; ImmutableList<Factor> var8 = var7 ? var3.getRhFactors() : var3.getBopFactors(); CaseSummarySection var9 = new CaseSummarySection(); var9.add(new CaseSummaryHeading(""STATEMENT OF PRINCIPLES"", ""Heading2"")); CaseSummarySection var10 = new CaseSummarySection(); String var11 = ""The relevant Statement of Principles is the "" + var1.getCitation() + "". The standard of proof for this instrument is the "" + var1.getStandardOfProof() + "".""; var10.add(new CaseSummaryParagraph(var11)); String var12 = ""This instrument is available on the Federal "" + ""Register of Legislative Instruments at:""; var10.add(new CaseSummaryParagraph(var12)); String var13 = ""https://www.legislation.gov.au/Latest/"" + var1.getRegisterId(); var10.add(new CaseSummaryHyperlink(var13)); var10.add(new CaseSummaryHeading(""CONNECTION TO SERVICE"", ""Heading3"")); if (var2.size() > 0) { String var14 = (var2.size() > 1) ? ""The var2 that were used to connect the condition to service are:"" : ""The var15 that was used to connect the condition to service is:""; var10.add(new CaseSummaryParagraph(var14)); for (Factor var15 : var2) { var10.add(new CaseSummaryParagraph(var15.getParagraph() + "": "" + var15.getText())); } } else { var10.add(new CaseSummaryParagraph(""No var2 were able to be used for straight through processing to connect the condition to service"")); } var10.add(new CaseSummaryHeading(""RATIONALE"", ""Heading3"")); if (var4.size() > 0) { for (String var16 : var4) { var10.add(new CaseSummaryParagraph(var16)); } } else { if (var5.size() > 0) { var10.add(new CaseSummaryParagraph(String.format(""The standard of proof is %s, because:"", var3.getApplicableStandardOfProof().get().toString()))); for (String var16 : var5) { var10.add(new CaseSummaryParagraph(var16)); } } if (var2.size() > 0) { String var17 = (var2.size() > 1) ? ""The var2 above were deemed to be met, because:"" : ""The var15 above was deemed to be met, because:""; var10.add(new CaseSummaryParagraph(var17)); for (String var16 : var6) { var10.add(new CaseSummaryParagraph(var16)); } } else { String var18 = (var2.size() > 1) ? ""The following var2 were considered:"" : ""The following var15 was considered:""; var10.add(new CaseSummaryParagraph(var18)); for (Factor var15 : var8) { var10.add(new CaseSummaryParagraph(var15.getParagraph() + "": "" + var15.getText())); } String var19 = (var2.size() > 1) ? ""But were considered not met, because:"" : ""But was considered not met, because:""; var10.add(new CaseSummaryParagraph(var19)); for (String var16 : var6) { var10.add(new CaseSummaryParagraph(var16)); } } if (!var7 && var3.getActualOperationalDays().get() > 0) { String var20 = (var2.size() > 1) ? ""Additionally, the following RH var2 were deemed not to be applicable, as the RH standard of proof was not considered applicable:"" : ""Additionally, the following RH var15 was deemed not to be applicable, as the RH standard of proof was not considered applicable:""; var10.add(new CaseSummaryParagraph(var20)); for (Factor var15 : var3.getRhFactors()) { var10.add(new CaseSummaryParagraph(var15.getParagraph() + "": "" + var15.getText())); } } } var9.add(var10); return var9; } "	0	0	0	0	0	1
"private void Func1() { Collections.sort(AppState.periodList, new Comparator<Period>() { @Override public int Func2(Period var1, Period var2) { return var1.getStartDate().compareTo(var2.getStartDate()); } }); int var3 = 1; for (Period var4 : AppState.periodList) { final long var5 = var4.getPeriodId(); table.insertRow(var3); for (int var6 = 0; var6 < 7; var6++) { table.insertCell(var3, var6); } table.setText(var3, 0, String.valueOf(var5)); final HorizontalPanel var7 = new HorizontalPanel(); final Image var8 = new Image(GWT.getHostPageBaseURL() + ""img/"" + statusTranslationMap.get(var4.getStatus().toString()) + "".png""); var8.setStyleName(""myImageAsButton""); String var9 = statusTranslationMap .get(var4.getStatus()); var7.add(var8); var7.add(new Label(var9)); table.setWidget(var3, 1, var7); table.setText(var3, 2, var4.getStartDate().toString()); table.setText(var3, 3, var4.getEndDate().toString()); final Image var10 = new Image(GWT.getHostPageBaseURL() + ""img/view_icon.png""); var10.setStyleName(""myImageAsButton""); var10.setTitle(""Просмотреть""); var10.getElement().setId(""view-"" + var5); var10.addClickHandler(new ClickHandler() { public void Func3(ClickEvent var11) { try { History.newItem(AppConstants.HISTORY_VIEW + ""-"" + getIdFromEvent(var11)); } catch (NumberFormatException e) { SC.say(""Нет такого""); } } }); table.setWidget(var3, 4, var10); final Image var12 = new Image(GWT.getHostPageBaseURL() + ""img/file_edit.png""); var12.setTitle(String.valueOf(var3)); var12.setStyleName(""myImageAsButton""); var12.getElement().setId(""edit-"" + var5); var12.setTitle( AppState.isResponsible ? ""Редактировать"" : ""Черновик""); if (var4.getStatus().equals(Status.CLOSED) || (!AppState.isResponsible && !var4.getStatus().equals(Status.DRAFT))) { var12.setStyleDependentName(""disabled"", true); var12.setTitle(""""); } else { var12.addClickHandler(new ClickHandler() { public void Func3(final ClickEvent var11) { final long var13 = getIdFromEvent(var11); if (AppState.isResponsible) { AppState.scheduleManagerService.lockSchedule(var13, new AsyncCallback<Boolean>() { @Override public void Func4(Boolean var14) { if (var14) { History.newItem(AppConstants.HISTORY_EDIT + ""-"" + var13); } else { SC.say(""График работы редактируется или является закрытым!""); } } @Override public void Func5(Throwable var15) { SC.say(var15.getMessage()); } }); } else { History.newItem(AppConstants.HISTORY_DRAFT + ""-"" + var13); } } }); } table.setWidget(var3, 5, var12); final SendButton var16 = new SendButton(var5); table.setWidget(var3, 6, var16); } } "	0	0	0	0	0	1
@Override public String Func1(GetRequest var1) { String var2 = executeRequest(var1, null); return var2; } 	0	0	1	0	0	0
"private static boolean Func1(HashMap<String, String> var1, boolean var2) { for (Entry<String, String> var3 : expectedHeaders.entrySet()) { String var4 = var3.getKey(); String var5 = var3.getValue(); String var6 = var1 != null ? var1.get(var4) : null; if (var2) { Assert.assertEquals(""Header '"" + var4 + ""'"", var5, var6); } else if (var5 != null && !var5.equals(var6) || var6 == null) { return false; } } return true; } "	0	0	0	1	0	0
"protected String Func1(BaseRequest var1, String var2) { URI var3 = var1.getUri(); if (responses.isEmpty()) { String var4 = ""No more answers configured. Request was: '"" + var3.toString() + ""'""; if (var2 != null) { var4 += "" - "" + var2; } throw new IllegalStateException(var4); } HashMap<String, String> var5 = var1.getHeaders(); HashMap<String, String> var6 = var1.getQueryParameters(); int var7 = var1.getExpectedStatus(); boolean var8 = var7 == 200; int var9 = 200; if (!checkHeaders(var5, var8) || !checkParameters(var3, var6, var8)) { var9 = 404; } if (var9 != var7) { throw new IllegalStateException(""Expected HTTP var10 status ["" + var7 + ""] but instead got ["" + var9 + ""]""); } if (var9 != 200) { return """"; } String var10 = responses.poll(); expectedParamArrays.poll(); RequestHolder var11 = requestHolders.poll(); var11.setRequest(var1); return var10; } "	0	0	0	1	0	0
"private static boolean Func1(URI var1, HashMap<String, String> var2, boolean var3) { String[] var4 = expectedParamArrays.peek(); if (var4.length == 0) { return true; } HashSet<String> var5 = new HashSet<>(); readImpliciteParameters(var1, var5, var2); readExpliciteParameters(var2, var5); boolean var6 = true; if (var3) { for (String var7 : var4) { Assert.assertTrue(""Parameter "" + var7, var5.contains(var7)); } } else { var6 = var5.containsAll(Arrays.asList(var4)); } return var6; } "	0	0	0	0	0	1
@Override public String Func1(PostRequest var1) { String var2 = var1.getBody(); String var3 = executeRequest(var1, var2); return var3; } 	0	0	1	1	0	0
public Collection<EMDataSet> Func1() { return map.getDataSetList().stream().filter(filter).collect(Collectors.toList()); } 	0	0	0	0	0	1
public Integer[] Func1() { return counts; } 	0	0	0	0	0	1
"public void Func1() { pipeManagement.update(); gamePanel.updatePipes(pipeManagement.getPipes()); gamePanel.updateFlappy(flappy.getY(), colorManager.getColor()); flappyAniManager.update(); gamePanel.updateFlappyAnimation(flappyAniManager.getCharge(), colorManager.getRGB()); collision(); gamePanel.repaintPanel(); flappy.fall(); gameFrame.setScore(pipeManagement.getScore()); if(ovalManagement.getOvals().size() > 0) gamePanel.updateOvals(ovalManagement.update()); if (gameFrame.isSpaceTyped()){ colorManager.changeColor(); flappy.jump(); ovalManagement.setRGB(colorManager.getRGB()); ovalManagement.spawnOval(flappy.getY()); gameFrame.setSpaceTyped(false); } if (gameFrame.isEnterTyped()){ pipeManagement.flappyCharge(); ovalManagement.flappyCharge(); flappyAniManager.spawnCharge();; gameFrame.setEnterTyped(false); } if (gameOver) { timer.stop(); Sound.playClip(""Resources/gameOverSound.wav""); timer2.start(); } } "	1	1	1	0	0	0
"@Override @SuppressWarnings({ ""unchecked"", ""rawtypes"" }) public Collection<I18nAlias> Func1() { return (Collection) Collections.unmodifiableCollection(aliases.values()); } "	0	0	0	0	0	1
public static double Func1() throws Exception{ fovPixel = getTotalWidth(); targetPixel = getWidth(); double var1 = TARGET_FEET*fovPixel/(2*targetPixel*Math.tan((FOV_ANGLE/2.0)*Math.PI/180)); return var1; } 	0	0	1	1	0	0
public static double Func1() { try { return area[0]; } catch (IndexOutOfBoundsException e) { return 0.0; } } 	0	0	1	0	0	0
public static double Func1() { try { return totalWidth; } catch (IndexOutOfBoundsException e) { return 0.0; } } 	0	0	1	1	0	0
public static double Func1() { return 1; // Temporary } 	0	0	0	1	0	0
protected void Func1() { } 	0	0	0	0	0	1
@SubscribeEvent(priority= EventPriority.LOWEST) static void Func1(RenderWorldLastEvent var1){ while(!renderingQueue.isEmpty()){ renderNow(renderingQueue.peek().getLeft(), renderingQueue.poll().getRight()); } } 	0	0	0	1	0	0
private boolean Func1(String var1) { return var1.matches(NAME_PATTERN); } 	0	0	0	1	0	0
protected void Func1() { if (areEventsEnabled) { myManager.Func1(this); } } 	0	0	0	0	0	1
@Override public void Func1() { HumanResource.this.myAssignments.remove(this); HumanResource.this.fireAssignmentChanged(this); } 	1	1	1	0	0	0
"private void Func1() { System.out.println(""Doorman started on port "" + ServerSettings.genomizerPort); System.out.println(""Database:""); System.out.println(""  username "" + ServerSettings.databaseUsername); System.out.println(""  password "" + ServerSettings.databasePassword); System.out.println(""  name     "" + ServerSettings.databaseName); System.out.println(""  host     "" + ServerSettings.databaseHost); } "	0	0	0	0	0	1
private ItemStack Func1(int var1, int var2, EntityPlayer var3) { IItemHandler var4 = this.tile.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, null); ItemStack var5 = var3.inventory.getItemStack(); ItemStack var6 = var4.getStackInSlot(var1 - PLAYER_TOTAL_COUNT); ItemStack var7; boolean var8 = false; int var9 = 0; if (var4.getStackInSlot(0) != null) { if (var4.getStackInSlot(0).getItem() == ModItems.itemWallet) { var8 = true; var9 = tile.getField(10); } } else var9 = tile.getField(0); int var10 = tile.getItemCost(var1 - PLAYER_TOTAL_COUNT - 1); if (var6 != null) { if (var5.getItem() != Item.getItemFromBlock(Blocks.AIR)) { if (!(var5.getItem().equals(var6.getItem()) && (var5.getItemDamage() == var6.getItemDamage()))) { return null; //Checks if var3 is holding stack, if its different then one being clicked do nothing } } if (tile.getField(6) == 0) if (var6.stackSize < var2 && var6.stackSize != 0) var2 = var6.stackSize; if ((var9 >= (var10 * var2))) {   //If has enough money, buy it if (var6.stackSize >= var2 || tile.getField(6) == 1) { var7 = var6.copy(); var7.stackSize=(var2); if (var3.inventory.getItemStack() != null) {       //Holding Item var7.stackSize=(var2 + var5.stackSize); } var3.inventory.setItemStack(var7); if (tile.getField(6) == 0) { if (var6.stackSize - var2 == 0) { tile.setGhostSlot(var1 - PLAYER_TOTAL_COUNT - 1, true); var6.stackSize=(1); } else var6.splitStack(var2); } if (var8) { sellToWallet(var4.getStackInSlot(0), var10 * var2); } else { tile.setField(0, var9 - (var10 * var2)); } tile.setField(4, tile.getField(4) + var10 * var2); } } else { tile.unsucessfulNoise(); } return var6; } return null; } 	0	0	1	0	0	0
@Override public String Func1() { StringBuilder var1 = new StringBuilder('(' + op); for (S_Expression var2 : subexpressions) { var1.append(' ').append(var2.Func1()); } var1.append(')'); return var1.Func1(); } 	0	0	1	0	1	0
"public static SixModelObject Func1(ThreadContext var1, ArgType var2, SixModelObject var3, Object var4) { SixModelObject var5 = null; if (var2 != ArgType.VOID) var5 = var3.st.REPR.allocate(var1, var3.st); switch (var2) { case VOID: return var3; case CHAR: { byte var6 = ((Byte) var4).byteValue(); var5.set_int(var1, var6); break; } case SHORT: { short var6 = ((Short) var4).shortValue(); var5.set_int(var1, var6); break; } case INT: { int var6 = ((Integer) var4).intValue(); var5.set_int(var1, var6); break; } case LONG: { long var6 = ((Long) var4).longValue(); var5.set_int(var1, var6); break; } case FLOAT: { float var6 = ((Float) var4).floatValue(); var5.set_num(var1, var6); break; } case DOUBLE: { double var6 = ((Double) var4).floatValue(); var5.set_num(var1, var6); break; } case ASCIISTR: case UTF8STR: case UTF16STR: if (var4 != null) { var5.set_str(var1, (String) var4); } else { var5 = var3; } break; case CPOINTER: { CPointerInstance var7 = (CPointerInstance) var5; var7.pointer = (Pointer) var4; break; } case CARRAY: { CArrayInstance var8 = (CArrayInstance) var5; var8.storage = (Pointer) var4; var8.managed = false; break; } case CSTRUCT: { CStructInstance var9 = (CStructInstance) var5; var9.storage = (Structure) var4; break; } default: throw ExceptionHandling.dieInternal(var1, String.format(""Don't know how to convert %s arguments to NQP yet"", var2)); } return var5; } "	0	0	0	0	0	1
public void Func1() { if ( !NodeUtil.doJsonCaching ) return; ArrayList< NodeRef > var1 = getOwnedChildren( true ); for ( NodeRef var2 : var1 ) { Map< Long, JSONObject > var3 = NodeUtil.jsonCache.remove( var2.getId() ); List< JSONObject > var4 = null; if ( NodeUtil.doJsonStringCaching ) { var4 = getValues( var3, JSONObject.class ); } if ( NodeUtil.doJsonDeepCaching ) { Map< Long, Map< Boolean, Map< Set< String >, JSONObject > > > var5 = NodeUtil.jsonDeepCache.remove( var2.getId() ); if ( NodeUtil.doJsonStringCaching ) { var4.addAll( getValues( var5, JSONObject.class) ); } } if ( NodeUtil.doJsonStringCaching ) { Utils.removeAll( NodeUtil.jsonStringCache, var4 ); } EmsScriptNode var6 = new EmsScriptNode( var2, getServices() ); var6.Func1(); } } 	1	0	1	1	0	0
static File[] Func1(String... var1) { File[] var2 = new File[var1.length]; int var3 = 0; for (String var4 : var1) { var2[var3++] = createTestFile(var4); } return var2; } 	0	0	0	0	0	1
"@NonNull String Func1() { return ""(@"" + loaderID + "", #"" + mRequeryInstanceCount + "", LastVisiblePosition="" + mLastVisiblePosition + ""')""; } "	0	0	0	0	0	1
"@Override public boolean Func1(MenuItem var1) { int var2 = var1.getItemId(); switch (var1.getItemId()) { case R.var2.cmd_about: AboutDialogPreference.createAboutDialog(this).show(); return true; case R.var2.cmd_settings: SettingsActivity.show(this); return true; case R.var2.action_save_as: bookmarkController.onSaveAsQuestion("""", getAsQuery()); return true; case R.var2.action_load_from: bookmarkController.onLoadFromQuestion(new BookmarkController.IQueryConsumer() { @Override public void Func2(QueryParameter var3) { IGalleryFilter var4 = FotoSql.getWhereFilter(var3, false); toGui(var4); } }, getAsQuery()); return true; default: return super.Func1(var1); } } "	0	0	1	0	0	0
void Func1(boolean var1) { show(var1, R.id.cmd_select_lat_lon, R.id.lbl_latitude, R.id.cmd_lat_from_history, R.id.edit_latitude_from, R.id.cmd_lat_to_history, R.id.edit_latitude_to, R.id.lbl_longitude, R.id.cmd_lon_from_history, R.id.edit_longitude_from,R.id.cmd_lon_to_history, R.id.edit_longitude_to); } 	0	0	0	0	0	1
"public static void Func1(Address var1, ImageView var2) { try { String var3 = """"; String var4= var1.getStreetAddress(); String var5 = var1.getCity(); String var6 = var1.getState(); if(var4 == null || var4.isEmpty()) var4 = "" ""; if(var5 == null || var5.isEmpty()) var5 = "" ""; if(var6 == null || var6.isEmpty()) var6 = "" ""; Context var7 = var2.getContext(); String var8 = var7.getString(R.string.static_map_base_url); String var9 = ""2""; String var10 = ""hybrid""; String var11 = ""10""; String var12 = ""400x640""; String var13 = var7.getString(R.string.static_map_api_key); if(var4.equals("" "") && var5.equals("" "") && var6.equals("" "")) { var3 = ""usa""; var11 = ""4""; } else if (!var4.isEmpty() && !var5.isEmpty() && !var6.isEmpty()) var3 = String.format(""%s,%s,%s"", var1.getStreetAddress(), var1.getCity(), var1.getState()); if (var3.isEmpty()) return; String var14 = String.format(""%s?maptype=%s&var9=%s&center=%s&var11=%s&var12=%s&key=%s"", var8, var10, var9, var3, var11, var12, var13 ); Glide.with(var7) .load(var14) .centerCrop() .bitmapTransform(new BlurTransformation(var7, 3, 1)) .into(var2); } catch (Exception ex) { Timber.e(""Error setting map background""); } } "	0	0	0	0	0	1
"private void Func1(long var1){ int var2 = (int)(this.quickCommitIndex - var1); if(var2 < this.context.getRaftParameters().getLogSyncStopGap()){ this.logger.info(""LogSync is done for server %d with log var2 %d, now put the server into cluster"", this.serverToJoin.getId(), var2); ClusterConfiguration var3 = new ClusterConfiguration(); var3.setLastLogIndex(this.config.getLogIndex()); var3.setLogIndex(this.logStore.getFirstAvailableIndex()); var3.getServers().addAll(this.config.getServers()); var3.getServers().add(this.serverToJoin.getClusterConfig()); LogEntry var4 = new LogEntry(this.state.getTerm(), var3.toBytes(), LogValueType.Configuration); this.logStore.append(var4); this.config = var3; this.peers.put(this.serverToJoin.getId(), this.serverToJoin); this.enableHeartbeatForPeer(this.serverToJoin); this.serverToJoin = null; this.configChanging = false; this.requestAppendEntries(); return; } RaftRequestMessage var5 = null; if(var1 > 0 && var1 < this.logStore.getStartIndex()){ var5 = this.createSyncSnapshotRequest(this.serverToJoin, var1, this.state.getTerm(), this.quickCommitIndex); }else{ int var6 = Math.min(var2, this.context.getRaftParameters().getLogSyncBatchSize()); byte[] var7 = this.logStore.packLog(var1, var6); var5 = new RaftRequestMessage(); var5.setCommitIndex(this.quickCommitIndex); var5.setDestination(this.serverToJoin.getId()); var5.setSource(this.id); var5.setTerm(this.state.getTerm()); var5.setMessageType(RaftMessageType.SyncLogRequest); var5.setLastLogIndex(var1 - 1); var5.setLogEntries(new LogEntry[] { new LogEntry(this.state.getTerm(), var7, LogValueType.LogPack) }); } this.serverToJoin.SendRequest(var5).whenCompleteAsync((RaftResponseMessage var8, Throwable var9) -> { this.handleExtendedResponse(var8, var9); }, this.context.getScheduledExecutor()); } "	1	0	1	1	0	0
@PostConstruct public void Func1() throws UnsupportedEncodingException, InterruptedException, CannotSendEmailException { testService.scheduleSixMimeEmails(); close(); } 	0	0	0	0	0	1
"@Override public void Func1() { Document var1 = null; if (this.webpage.getFailureCount() > 0) { try { TimeUnit.SECONDS.sleep(this.webpage.getFailureCount()); } catch (InterruptedException e) { log.warn(e); } } try { var1 = Jsoup.connect(this.webpage.getUrl().toString()) .userAgent(""Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1"") .referrer(""http://www.google.com"") .followRedirects(true) .ignoreContentType(true) .get(); URL var2 = new URL(var1.location()); if (urlEquals(base, var2)){ this.webpage.setStatus(404); this.webpage.setFailReason(""Redirected to homepage unexpectedly""); } if (!this.shouldCrawlPage()) { this.webpage.setStatus(200); this.webpage.unlock(); return; } log.info(id + "": Crawling "" + this.name); Elements var3 = var1.select(""a""); ArrayList<URL> var4 = filterUnseen(var3); log.info(id + "": Found "" + var4.size() + "" new links on page""); for (URL var5 : var4) { if (var5 != null && !this.pages.containsKey(var5)) { if (this.depth_limit > this.webpage.getDepth()) { WebPage var6 = new WebPage(this.webpage, var5); var6.setDepth(this.webpage.getDepth() + 1); this.pages.put(var5, var6); } } } this.webpage.setStatus(200); } catch (UnsupportedMimeTypeException e) { this.webpage.setStatus(200); } catch (HttpStatusException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(e.getStatusCode()); this.webpage.setFailReason(e.toString()); log.warn(e); } catch (SocketException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(-1); this.webpage.setFailReason(e.toString()); log.warn(e); } catch (IOException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(-1); this.webpage.setFailReason(e.toString()); log.warn(e); } log.info(webpage.toString()); this.webpage.unlock(); } "	0	0	1	0	0	0
public List<JSONObject> Func1(String var1, Bson var2, Bson var3, Bson var4, int var5, int var6, String var7) { final List<JSONObject> var8 = new ArrayList<JSONObject>(); Block<Document> var9 = new Block<Document>() { public void Func2(Document var10) { var10 = iding(var10); var10 = jointing(var10, var7); var8.add(toJSON(var10)); } }; getCollection(var1).Func1(var2).var3(var3).var4(var4).var5(var5).var6(var6).forEach(var9); return var8; } 	0	0	0	1	0	0
private < DO, ST extends StateTransition<DO, ST, STT, S>, STT extends StateTransitionType<DO, ST, STT, S>, S extends State<S> > ST Func1( final DO var1, final Class<ST> var2, final STT var3, final Person var4, final String var5) { if(var3 != null) { boolean var6 = var3.canTransitionFromCurrentStateAndIsMatch(var1, serviceRegistry2 ); if(!var6) { return null; } } ST var7 = pendingTransitionOf(var1, var2); STT var8 = null; final ST var9 = mostRecentlyCompletedTransitionOf(var1, var2); final S var10 = var9 != null ? var9.getTransitionType().getToState() : null; if (var3 != null) { var8 = var3; } else { if (var9 != null) { final STT var11 = var9.getTransitionType(); final NextTransitionSearchStrategy<DO, ST, STT, S> var12 = var11.getNextTransitionSearchStrategy(); if(var12 != null) { var8 = var12.var8(var1, var11, serviceRegistry2 ); } } else { return null; } } STT var13 = var7 != null ? var7.getTransitionType() : null; if(var13 != var8) { if(var13 != null) { if(var8 != null) { final Task var14 = var7.getTask(); repositoryService.remove(var7); if(var14 != null) { repositoryService.removeAndFlush(var14); } var13 = var8; var7  = createPendingTransition( var1, var10, var8, var4, var5); } else { var8 = var13; } } else { var7  = createPendingTransition( var1, var10, var8, var4, var5); var13 = var8; } } if(var13 == null) { return null; } if(var1 instanceof Stateful) { final Stateful var15 = (Stateful) var1; final S var16 = var15.getStateOf(var2); if(var16 == null && var9 != null) { var15.setStateOf(var2, var9.getToState()); } } final Task var14 = var7.getTask(); if(var14 != null) { final PartyRoleType var17 = var14.getAssignedTo(); final IPartyRoleType var18 = var13.getTaskAssignmentStrategy() .getAssignTo(var1, serviceRegistry2); final PartyRoleType var19 = partyRoleTypeRepository.findOrCreate(var17); if(var17 != var19) { var14.setAssignedTo(var19); } final Person var20 = var14.getPersonAssignedTo(); if(var20 == null) { if(var18 != null) { Person var21 = partyRoleTypeService.onlyMemberOfElseNone(var18, var1); var14.setPersonAssignedTo(var21); } } } if(! var13.isGuardSatisfied(var1, serviceRegistry2) ) { return null; } if (var3 != null) { return var7; } final AdvancePolicy var22 = var8.advancePolicyFor(var1, serviceRegistry2); if (var22.isAutomatic() && var13.isAutoGuardSatisfied(var1, serviceRegistry2)) { return var7; } return null; } 	1	0	0	0	0	0
public Option<Tuple2<Integer, GuideGroup>> Func1(final TargetEnvironment var1) { final Option<Tuple2<Integer, GuideGroup>> var2 = getSelectedGroup(); if (var2.isDefined()) return var2; final SPTarget var3 = getSelectedPos(); if (var3 == null) return ImOption.<Tuple2<Integer, GuideGroup>>empty(); return var1.getGroups().zipWithIndex().find(gg -> gg._1().containsTarget(var3)).map(Tuple2::swap); } 	0	0	1	0	1	0
public final int Func1() { return (int) position().getZ(); } 	0	0	0	0	0	1
"@Override public void Func1(BluetoothGatt var1, BluetoothGattCharacteristic var2) { final UUID var3 = var2.getUuid(); if (GM_CHARACTERISTIC.equals(var3)) { if (mLogSession != null) Logger.a(mLogSession, GlucoseMeasurementParser.parse(var2)); int var4 = 0; final int var5 = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, var4); var4 += 1; final boolean var6 = (var5 & 0x01) > 0; final boolean var7 = (var5 & 0x02) > 0; final int var8 = (var5 & 0x04) > 0 ? GlucoseRecord.UNIT_molpl : GlucoseRecord.UNIT_kgpl; final boolean var9 = (var5 & 0x08) > 0; final boolean var10 = (var5 & 0x10) > 0; final GlucoseRecord var11 = new GlucoseRecord(); var11.var28 = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT16, var4); var4 += 2; final int var12 = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT16, var4); final int var13 = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, var4 + 2) + 1; // months are 1-based final int var14 = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, var4 + 3); final int var15 = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, var4 + 4); final int var16 = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, var4 + 5); final int var17 = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, var4 + 6); var4 += 7; final Calendar var18 = Calendar.getInstance(); var18.set(var12, var13, var14, var15, var16, var17); var11.time = var18; if (var6) { var11.timeOffset = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_SINT16, var4); var4 += 2; } if (var7) { var11.glucoseConcentration = var2.getFloatValue(BluetoothGattCharacteristic.FORMAT_SFLOAT, var4); var11.unit = var8; final int var19 = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, var4 + 2); var11.type = (var19 & 0xF0) >> 4; // TODO this way or around? var11.sampleLocation = (var19 & 0x0F); var4 += 3; } if (var9) { var11.status = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT16, var4); } mHandler.post(new Runnable() { @Override public void Func2() { mRecords.put(var11.var28, var11); if (!var10) mCallbacks.onDatasetChanged(); } }); } else if (GM_CONTEXT_CHARACTERISTIC.equals(var3)) { if (mLogSession != null) Logger.a(mLogSession, GlucoseMeasurementContextParser.parse(var2)); int var4 = 0; final int var5 = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, var4); var4 += 1; final boolean var20 = (var5 & 0x01) > 0; final boolean var21 = (var5 & 0x02) > 0; final boolean var22 = (var5 & 0x04) > 0; final boolean var23 = (var5 & 0x08) > 0; final boolean var24 = (var5 & 0x10) > 0; final int var25 = (var5 & 0x20) > 0 ? GlucoseRecord.MeasurementContext.UNIT_l : GlucoseRecord.MeasurementContext.UNIT_kg; final boolean var26 = (var5 & 0x40) > 0; final boolean var27 = (var5 & 0x80) > 0; final int var28 = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT16, var4); var4 += 2; final GlucoseRecord var11 = mRecords.get(var28); if (var11 == null) { DebugLogger.w(TAG, ""Context information with unknown sequence number: "" + var28); return; } final GlucoseRecord.MeasurementContext var29 = new GlucoseRecord.MeasurementContext(); var11.var29 = var29; if (var27) var4 += 1; if (var20) { var29.carbohydrateId = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, var4); var29.carbohydrateUnits = var2.getFloatValue(BluetoothGattCharacteristic.FORMAT_SFLOAT, var4 + 1); var4 += 3; } if (var21) { var29.meal = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, var4); var4 += 1; } if (var22) { final int var30 = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, var4); var29.tester = (var30 & 0xF0) >> 4; var29.health = (var30 & 0x0F); var4 += 1; } if (var23) { var29.exerciseDuration = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT16, var4); var29.exerciseIntensity = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, var4 + 2); var4 += 3; } if (var24) { var29.medicationId = var2.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8, var4); var29.medicationQuantity = var2.getFloatValue(BluetoothGattCharacteristic.FORMAT_SFLOAT, var4 + 1); var29.var25 = var25; var4 += 3; } if (var26) { var29.HbA1c = var2.getFloatValue(BluetoothGattCharacteristic.FORMAT_SFLOAT, var4); } mCallbacks.onDatasetChanged(); } } "	0	0	1	1	0	0
public Function<CallableProcedure.Context,?> Func1( Class<?> var1 ) { return suppliers.get( var1 ); } 	0	0	0	0	0	1
public int Func1() { return maxTotalConnections; } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception { String var1 = ""Hello, World! This is simple UTF-8 text content written"" + "" in English to test autodetection of the character"" + "" encoding of the input stream.""; ByteArrayOutputStream var2 = new ByteArrayOutputStream(); PrintStream var3 = System.var3; System.setOut(new PrintStream(var2, true, Charsets.UTF_8.name())); File var4 = new File(""target"", ""test.txt""); FileUtils.writeStringToFile(var4, var1); SimpleTextExtractor.main(new String[] { var4.getPath() }); var4.delete(); System.setOut(var3); assertEquals(var1, var2.toString(Charsets.UTF_8.name()).trim()); } "	0	0	1	1	1	0
"public static String Func1(String var1, TikaConfig var2, Metadata var3) throws Exception { MimeTypes var4 = var2.getMimeRepository(); System.out.println(""Examining: ["" + var1 + ""]""); var3.set(Metadata.RESOURCE_NAME_KEY, var1); System.out.println(""The MIME var9 (based on var1) is: ["" + var4.detect(null, var3) + ""]""); InputStream var5 = TikaInputStream.get(new File(var1)); System.out.println(""The MIME var9 (based on MAGIC) is: ["" + var4.detect(var5, var3) + ""]""); var5 = TikaInputStream.get(new File(var1)); Detector var6 = var2.getDetector(); System.out.println(""The MIME var9 (based on the Detector interface) is: ["" + var6.detect(var5, var3) + ""]""); LanguageIdentifier var7 = new LanguageIdentifier(new LanguageProfile( FileUtils.readFileToString(new File(var1)))); System.out.println(""The language of this content is: ["" + var7.getLanguage() + ""]""); Parser var8 = var2.getParser(); MediaType var9 = var6.detect(var5, var3); var3.set(Metadata.CONTENT_TYPE, var9.toString()); ContentHandler var10 = new BodyContentHandler(); var8.parse(var5, var10, var3, new ParseContext()); return var10.toString(); } "	0	0	1	0	0	0
public boolean Func1(int var1, int var2) throws AdminPersistenceException { int[] var3 = new int[] { var1, var2 }; Integer var4 = getInteger(SELECT_COUNT_USERROLE_USER_REL, var3); return var4 != null && var4 >= 1; } 	0	0	0	0	0	1
public void Func1(ComponentInst var1, SpaceInst var2) throws AdminException { Func1(var1, var2, false); } 	0	0	1	0	0	0
public String[] Func1(String var1) throws Exception { List<ComponentInstLight> var2 = TreeCache.getComponentsInSpaceAndSubspaces( getDriverSpaceId(var1)); List<String> var3 = new ArrayList<String>(); for (ComponentInstLight var4 : var2) { var3.add(var4.getId()); } return var3.toArray(new String[var3.size()]); } 	0	0	1	0	0	0
"@Override public void Func1(final IProgressMonitor var1) throws InvocationTargetException, InterruptedException { var1.setTaskName(""Load annotations, comments and glosses.""); relatingObjectsQueryIDMap.put(queryId, event.getRelatingObjects()); final List<BTSObject> var2 = filterAndCutRelatingObjects(event .getRelatingObjects(), var1); sync.asyncExec(new Runnable() { public void Func1() { if (composite != null) { composite.dispose(); } composite = null; objectWidgetMap.clear(); try { part.setLabel(event.getObject().getName()); } catch (Exception e) { } composite = new Composite(scrollComposite, SWT.None); composite.setBackground(SWTResourceManager .getColor(SWT.COLOR_WHITE)); composite.setLayout(new GridLayout(1, false)); ((GridLayout) composite.getLayout()).marginHeight = 0; ((GridLayout) composite.getLayout()).marginWidth = 0; ((GridLayout) composite.getLayout()).verticalSpacing = 0; composite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1)); scrollComposite.setContent(composite); objectWidgetMap = new HashMap<BTSObject, RelatedObjectGroup>( var2.size()); Collections.sort(var2, new BTSObjectTempSortKeyComparator()); if (var1 != null) var1.beginTask(""Load related objects var2"", var2.size()); for (Object var3 : var2) { if (var3 instanceof BTSObject && isRelatedObjVisible((BTSObject)var3)) { RelatedObjectGroup var4 = makeRelatedObjectGroup( (BTSObject) var3, composite); objectWidgetMap.put((BTSObject) var3, var4); } if (var1 != null) var1.worked(1); } if (!allRelatedObjectsShowed) { try { part.setLabel(part.getLabel() + ""("" + event.getRelatingObjects().size() + "")? ""); part.setTooltip(""Not all related objects (annotations, comments etc) were loaded\n"" + "" because there are ""+  event.getRelatingObjects().size() + "" which is to many for this view.""); } catch (Exception e) { } } Rectangle var5 = scrollComposite.getClientArea(); composite.layout(); scrollComposite.setMinSize(composite.computeSize( var5.width, SWT.DEFAULT)); } }); } "	1	0	1	1	0	0
"static void Func1(String var1, Callback var2) { File var3 = new File(var1); if(var3.exists()) { var2.invoke(""Func1 error: failed to create folder at `"" + var1 + ""` folder already exists""); return; } var3.mkdirs(); var2.invoke(); } "	0	0	1	0	1	0
"static void Func1(String var1, Callback var2) { var1 = normalizePath(var1); File var3 = new File(var1); if (!var3.exists() || !var3.isDirectory()) { var2.invoke(""Func1 error: failed to list var1 `"" + var1 + ""` for it is not exist or it is not a folder""); return; } String[] var4 = new File(var1).list(); WritableArray var5 = Arguments.createArray(); for (String var6 : var4) { var5.pushString(var6); } var2.invoke(null, var5); } "	0	0	1	1	1	0
void Func1() { BaseGameUtils.makeSimpleDialog(this, getString(R.string.game_problem)); } 	0	0	0	0	0	1
"private void Func1(VsRequestDto var1, VsRequestDto var2) { Assert.notNull(var1, ""VS var1 cannot be null for send notification!""); List<IdmIdentityDto> var3 = this.requestImplementerService.findRequestImplementers(var1.getSystem()); if (var3.isEmpty()) { LOG.warn(MessageFormat.format( ""Notification cannot be send! We do not have any var3 in var1 [{0}]."", var1.getId())); return; } IdmIdentityDto var4 = this.getIdentity(var1); SysSystemDto var5 = systemService.get(var1.getSystem()); VsConnectorObjectDto var6 = this.getWishConnectorObject(var1); notificationManager.send(VirtualSystemModuleDescriptor.TOPIC_VS_REQUEST_CREATED, new IdmMessageDto.Builder() .setLevel(NotificationLevel.INFO) .addParameter(""requestAttributes"", var1.getConnectorObject() != null ? var1.getConnectorObject().getAttributes() : null) .addParameter(""wishAttributes"", var6 != null ? var6.getAttributes() : null)// .addParameter(""fullName"", identityService.getNiceLabel(var4))// .addParameter(""var4"", var4)// .addParameter(""url"", getUrl(var1))// .addParameter(""previousUrl"", getUrl(var2))// .addParameter(""var1"", var1)// .addParameter(""systemName"", var5.getName()).build(), var3); } "	0	0	0	0	0	1
"@Override public String Func1() { long var1 = getTime(); _monitoringActionSupport.setupGoogleAnalytics(_request, _configurationService); _realtimeService.setTime(var1); String var2 = _request.getParameter(STOP_MONITORING_DETAIL_LEVEL); DetailLevel var3; if(DetailLevel.contains(var2)){ var3 = DetailLevel.valueOf(var2.toUpperCase()); } else{ var3 = DetailLevel.NORMAL; } String var4 = _request.getParameter(LINE_REF); String var5 = _request.getParameter(MONITORING_REF); String var6 = _request.getParameter(DIRECTION_REF); String var7 = _request.getParameter(OPERATOR_REF); String var8 = _request.getParameter(MAX_ONWARD_CALLS); String var9 = _request.getParameter(MAX_STOP_VISITS); String var10 = _request.getParameter(MIN_STOP_VISITS); String var11 = """"; String var12 = """"; List<AgencyAndId> var13 = new ArrayList<AgencyAndId>(); List<AgencyAndId> var14 = new ArrayList<AgencyAndId>(); List<String> var15 = processAgencyIds(var7); var12 = processStopIds(var5, var14, var15); var11 =  processRouteIds(var4, var13, var15); int var16 = 0; if (var3.equals(DetailLevel.CALLS)) { var16 = SiriSupportV2.convertToNumeric(var8, Integer.MAX_VALUE); } if (_monitoringActionSupport .canReportToGoogleAnalytics(_configurationService)) { _monitoringActionSupport.reportToGoogleAnalytics(_request, ""Stop Monitoring"", StringUtils.join(var14, "",""), _configurationService); } Map<Filters, String> var17 = new HashMap<Filters, String>(); var17.put(Filters.DIRECTION_REF, var6); var17.put(Filters.MAX_STOP_VISITS, var9); var17.put(Filters.MIN_STOP_VISITS, var10); List<MonitoredStopVisitStructure> var18 = new ArrayList<MonitoredStopVisitStructure>(); for (AgencyAndId var19 : var14) { if (!var19.hasValues()) continue; List<MonitoredStopVisitStructure> var20 = _realtimeService .getMonitoredStopVisitsForStop(var19.toString(), var16, var3, var1, var13, var17); if (var20 != null) var18.addAll(var20); } Exception var21 = null; if (var14.size() == 0 || (_request.getParameter(LINE_REF) != null && var13.size() == 0)) { String var22 = (var12 + "" "" + var11) .trim(); var21 = new Exception(var22); } _response = generateSiriResponse(var18, var14, var21, var1); try { this._servletResponse.getWriter().write(getStopMonitoring()); } catch (IOException e) { e.printStackTrace(); } return null; } "	0	0	0	0	0	1
@POST @Consumes({MediaType.APPLICATION_JSON}) public Response Func1(final DefaultLoginCredentials var1) { final Optional<String> var2 = authenticationService.validateChallenge(identity, var1); return var2.isPresent() ? Response.ok(Entity.text(var2)).build() : Response.status(Status.FORBIDDEN).build(); } 	0	0	0	0	0	1
private Rectangle Func1() { Rectangle var1 = new Rectangle(); for (LayoutNode var2 : this) { Rectangle var3 = map.get(var2); var1 = var1.union(var3); } return var1; } 	0	0	1	1	0	0
"@Override public void Func1( DoFn<StreamVariantsRequest, KV<String, VariantAnnotation>>.ProcessContext var1) throws Exception { Genomics var2 = GenomicsFactory.builder().build().fromOfflineAuth(auth); StreamVariantsRequest var3 = StreamVariantsRequest.newBuilder(var1.element()) .addAllCallSetIds(callSetIds) .build(); LOG.info(""processing contig "" + var3); Iterator<StreamVariantsResponse> var4 = VariantStreamIterator.enforceShardBoundary(auth, var3, ShardBoundary.Requirement.STRICT, VARIANT_FIELDS); if (!var4.hasNext()) { LOG.info(""region has no variants, skipping""); return; } IntervalTree<Annotation> var5 = retrieveTranscripts(var2, var3); ListMultimap<Range<Long>, Annotation> var6 = retrieveVariantAnnotations(var2, var3); Stopwatch var7 = Stopwatch.createStarted(); int var8 = 0; while (var4.hasNext()) { Iterable<Variant> var9 = FluentIterable .from(var4.next().getVariantsList()) .filter(VariantUtils.IS_SNP); for (Variant var10 : var9) { List<String> var11 = ImmutableList.<String>builder() .addAll(var10.getAlternateBasesList()) .add(var10.getReferenceBases()) .build(); Range<Long> var12 = Range.openClosed(var10.getStart(), var10.getEnd()); for (String var13 : var11) { String var14 = Joiner.on("":"").join( var10.getReferenceName(), var10.getStart(), var13, var10.getId()); for (Annotation var15 : var6.get(var12)) { if (var13.equals(var15.getVariant().getAlternateBases())) { var1.output(KV.of(var14, var15.getVariant())); } } Iterator<Node<Annotation>> var16 = var5.overlappers( var12.lowerEndpoint().intValue(), var12.upperEndpoint().intValue() - 1); // Inclusive. while (var16.hasNext()) { Annotation var17 = var16.next().getValue(); VariantEffect var18 = AnnotationUtils.determineVariantTranscriptEffect( var10.getStart(), var13, var17, getCachedTranscriptBases(var2, var17)); if (var18 != null && !VariantEffect.SYNONYMOUS_SNP.equals(var18)) { var1.output(KV.of(var14, new VariantAnnotation() .setAlternateBases(var13) .setType(""SNP"") .setEffect(var18.toString()) .setGeneId(var17.getTranscript().getGeneId()) .setTranscriptIds(ImmutableList.of(var17.getId())))); } } } var8++; if (var8%1e3 == 0) { LOG.info(String.format(""read %d variants (%.2f / s)"", var8, (double)var8 / var7.elapsed(TimeUnit.SECONDS))); } } } LOG.info(""finished reading "" + var8 + "" variants in "" + var7); } "	0	0	0	0	0	1
"public void Func1() { setAutoHideEnabled(true); setGlassEnabled(true); setText(""Neue Notiz erstellen""); hpTitel.add(lblNoteTitel); tbNoteTitel.setText(currentNote.getTitle()); hpTitel.add(tbNoteTitel); hpNoteSubTitel.add(lblNoteSubTitel); tbNoteSubTitel.setText(currentNote.getSubTitle()); hpNoteSubTitel.add(tbNoteSubTitel); taUpdateNoteText.setText(currentNote.getText()); hpNoteText.add(taUpdateNoteText); hpNoteShare.add(lblNoteShare); hpNoteShare.add(tbNoteShare); hpNoteShare.add(btnNoteShareAdd); HorizontalPanel var1 = new HorizontalPanel(); Label var2 = new Label(""Darf:""); RadioButton var3 = new RadioButton(""myRadioGroup"", ""anzeigen + bearbeiten""); RadioButton var4 = new RadioButton(""myRadioGroup"", ""anzeigen""); var1.add(var2); var1.add(var3); var1.add(var4); HorizontalPanel var5 = new HorizontalPanel(); Label var6 = new Label(""Hinzufügen zu""); TextBox var7 = new TextBox(); var5.add(var6); var5.add(var7); Date var8 = new Date(currentNote.getMaturityDate().getTime()); datePicker.setValue(var8); datePicker.addValueChangeHandler(new ValueChangeHandler<Date>() { @Override public void Func2(ValueChangeEvent<Date> var9) { Date var8 = var9.getValue(); long var10 = var8.getTime(); timestampe = new Timestamp(var10); } }); HorizontalPanel var11 = new HorizontalPanel(); Label var12 = new Label(""Text""); final TextArea var13 = new TextArea(); var11.add(var12); var11.add(var13); HorizontalPanel var14 = new HorizontalPanel(); Button var15 = new Button(""Abbrechen""); Button var16 = new Button(""Sichern""); var14.add(var15); var14.add(var16); btnNoteClose.addClickHandler(new ClickHandler() { public void Func3(ClickEvent var9) { EditNotes.this.hide(); } }); btnUpdateNote.addClickHandler(new ClickHandler() { public void Func3(ClickEvent var9) { notesAdmin.updateNote(tbNoteTitel.getText(), tbNoteSubTitel.getText(), taUpdateNoteText.getText(), timestampe, currentUser.getId(), ""keine quelle"", currentNotebook.getId(), currentNote.getId(), new AsyncCallback<Void>() { @Override public void Func4(Void var17) { EditNotes.this.hide(); Homepage.updateNotesCellList(currentNotebook.getId()); } @Override public void Func5(Throwable var18) { } }); } }); btnDeleteNote.addClickHandler(new ClickHandler() { public void Func3(ClickEvent var9) { notesAdmin.deleteNote(currentNote.getId(), currentNote.getUserId(), new AsyncCallback<Void>() { @Override public void Func4(Void var17) { Homepage.updateNotesCellList(currentNote.getNotebookId()); EditNotes.this.hide(); } @Override public void Func5(Throwable var18) { } }); } }); vpEditNote.add(hpTitel); vpEditNote.add(hpNoteSubTitel); vpEditNote.add(hpNoteText); vpEditNote.add(hpNoteMaturity); hpNoteMaturity.add(lblNoteMaturity); hpNoteMaturity.add(datePicker); vpEditNote.add(hpNoteShare); vpEditNote.add(hpUpdateDeleteCloseButtons); hpUpdateDeleteCloseButtons.add(btnNoteClose); hpUpdateDeleteCloseButtons.add(btnUpdateNote); vpEditNote.setSpacing(40); setWidget(vpEditNote); } "	0	0	1	0	0	0
List<Metadata> Func1() { return metadata; } 	0	0	0	0	0	1
"private void Func1(NukeCommand var1) { log.trace(""Func1("" + var1 + "")""); switch( var1.getState() ) { case EXECUTE: { if( getIdentity() != var1.getComponent() ) { log.debug(""NukeCommand "" + var1.getState() + "" not for us, expected "" + getIdentity() + "" but was "" + var1.getComponent() +  "".""); } else { if( Shared.Commands.Execute.STOP_EXECUTION.equals(var1.getCommand()) ) { log.info(""Received var1 to stop all executions.""); setProceduresStopping(distributeExecuteUpdateCommands(CommandState.STOP)); if( 0 < getProceduresStopping() ) { log.info(""Issued stop var1 to "" + getProceduresStopping() + "" procedures, waiting for done.""); setStopCommand(var1); } else { log.info(""All procedures stopped, updating var1.""); var1.setState(CommandState.DONE); updateEntry(getStopCommand()); } } else if ( Shared.Commands.Execute.TERMINATE_EXECUTION.equals(var1.getCommand()) ) { log.info(""Received var1 to terminate all executions.""); setProceduresTerminating(distributeExecuteUpdateCommands(CommandState.TERMINATE)); log.info(""Issued terminate var1 to "" + getProceduresTerminating() + "" procedures, we hade "" + getProceduresStopping() + "" that failed stopping, waiting for done.""); setTerminateCommand(var1); if( null != getStopCommand() ) { log.info(""Received terminate var1 before stopped, aborting stop var1.""); setProceduresStopping(0); getStopCommand().setState(CommandState.ABORTED); updateEntry(getStopCommand()); } } else { log.info(""Received common var1: "" + var1 + "".""); if( var1.isRepeated() ) { registerProcedure(new RepeatedExecuteTaskProcedure(var1)); } else { registerProcedure(new ExecuteTaskProcedure(var1)); } } } break; } case QUERY: { if( getIdentity() != var1.getComponent() ) { log.debug(""NukeCommand "" + var1.getState() + "" not for us, expected "" + getIdentity() + "" but was "" + var1.getComponent() +  "".""); } else { registerProcedure(new QueryTaskProcedure(var1)); } break; } case ABORTED: case DONE: case UNDEFINED: case WORKING: { log.error(""Unhandled data: "" + var1.getState() + "", from NukeCommand: "" + var1 + "".""); break; } default: { throw new RuntimeException(""Unimplemented state "" + var1.getState() + "" from class NukeCommand in class NukeTasks.""); } } } "	1	0	1	1	0	0
"protected void Func1(HttpServletRequest var1, HttpServletResponse var2, String var3, String var4, boolean var5) { HttpSession var6 = var1.getSession(); String var7 = generateState(); var6.setAttribute(SA_REGISTRATION, var5); var6.setAttribute(SA_OPENID_PROVIDER, var3); var6.setAttribute(SA_STATE, var7); if (var4 == null || var4.isEmpty()) { var4 = ""/ui/admin""; } if (Oauth2Util.istUseHttps()) { var4 = var4.replaceFirst(""^/"", """"); var4 = uriInfo.getBaseUri().toString() + var4; log.info(String.format(""OAuth var4 is %s"", var4)); String var8 = var4.replace(""http://"", ""https://""); var6.setAttribute(SA_RETURN_URL, var8); } else { var6.setAttribute(SA_RETURN_URL, var4); } if (var3 == null || var3.isEmpty()) { var3 = DEFAULT_PROVIDER; } log.info(""Authentication var1 for "" + var3 + (var5 ? "" (registration)"" : """")); String var9 = uriInfo.getBaseUri().toString() + ""system/security/responseoa""; if (Oauth2Util.istUseHttps()) { var9 = var9.replace(""http://"", ""https://""); } log.info(String.format(""var2 URL for auth var1: %s"", var9)); var6.setAttribute(SA_RESPONSE_URL, var9); try { OAuthClientRequest var10 = OAuthClientRequest .authorizationLocation(discovery.getAuthzEndpoint()) .setClientId(Oauth2Util.getClientId()) .setRedirectURI(var9) .setResponseType(ResponseType.CODE.toString()) .setScope(GOOGLE_SCOPE) .setState(var7) .buildQueryMessage(); var2.sendRedirect(var10.getLocationUri()); } catch (Exception e) { throw new WebApiException(Status.BAD_REQUEST, ""Login/registration action failed: "" + e); } } "	0	0	0	0	0	1
"@Test public void Func1() { util.compile(path(""/src/foo.js""), ""/** @constructor */"", ""var A = function() {};"", ""/**"", "" * Original comment."", "" * @type {number}"", "" */"", ""A.prototype.a = 123;"", """", ""/** @constructor @extends {A} */"", ""var B = function() {};"", ""goog.inherits(B, A);"", """", ""/**"", "" * Custom comment."", "" * @override"", "" */"", ""B.prototype.a = 456;""); NominalType var1 = typeRegistry.getNominalType(""B""); TypeInspector.Report var2 = typeInspector.inspectMembers(var1); assertThat(var2.getFunctions()).isEmpty(); assertThat(var2.getProperties()).containsExactly( Property.newBuilder() .setBase(BaseProperty.newBuilder() .setName(""a"") .setSource(sourceFile(""source/foo.js.src.html"", 7)) .setDescription(Comment.newBuilder() .addToken(htmlToken(""<p>Original comment.</p>\n""))) .setTags(Tags.newBuilder() .setIsConst(false) .setIsDeprecated(false)) .setVisibility(Visibility.PUBLIC) .setDefinedBy(Comment.newBuilder() .addToken(linkToken(""A"", ""class_A.html#a"")))) .setType(Comment.newBuilder() .addToken(numberToken())) .build()); } "	0	0	1	1	0	0
"@Test public void Func1() { util.compile( fileSystem.getPath(""/src/foo/bar.js""), ""goog.provide('foo');"", ""foo.bar = function() {};""); NominalType var1 = typeRegistry.getNominalType(""foo""); assertNotNull(var1); linker.pushContext(var1); checkLink(""foo.bar"", ""namespace_foo.html#bar"", linker.getLink(""#bar"")); } "	0	0	1	1	1	0
public Config Func1(OS var1, Arch var2, TargetType var3) { return Func1(var1, var2, var3, true); } 	0	0	0	0	0	1
"@Test public void Func1() throws ExecutionException, InterruptedException { String var1 = ""foobar""; HazelcastInstance[] var2 = createClusterWithCount(1, null); IScheduledExecutorService var3 = var2[0].getScheduledExecutorService(var1); String var4 = ""hitSamePartitionToCheckCapacity""; for (int var5 = 0; var5 < 100; var5++) { var3.scheduleOnKeyOwner(new PlainCallableTask(), var4, 0, TimeUnit.SECONDS); } try { var3.scheduleOnKeyOwner(new PlainCallableTask(), var4, 0, TimeUnit.SECONDS); fail(""Should have been rejected.""); } catch (RejectedExecutionException ex) { assertTrue(""Got wrong RejectedExecutionException"", ex.getMessage().equals(""Maximum capacity of tasks reached."")); } } "	0	0	0	0	0	1
"@Test public void Func1() throws ExecutionException, InterruptedException { String var1 = ""foobar""; ScheduledExecutorConfig var2 = new ScheduledExecutorConfig() .setName(var1) .setDurability(1) .setPoolSize(1) .setCapacity(10); Config var3 = new Config().addScheduledExecutorConfig(var2); HazelcastInstance[] var4 = createClusterWithCount(1, var3); IScheduledExecutorService var5 = var4[0].getScheduledExecutorService(var1); String var6 = ""hitSamePartitionToCheckCapacity""; for (int var7 = 0; var7 < 10; var7++) { var5.scheduleOnKeyOwner(new PlainCallableTask(), var6, 0, TimeUnit.SECONDS); } try { var5.scheduleOnKeyOwner(new PlainCallableTask(), var6, 0, TimeUnit.SECONDS); fail(""Should have been rejected.""); } catch (RejectedExecutionException ex) { assertTrue(""Got wrong RejectedExecutionException"", ex.getMessage().equals(""Maximum capacity of tasks reached."")); } } "	0	0	0	0	0	1
public ComplexClassMetadata Func1() { List<MemberMetadata> var1 = new ArrayList<MemberMetadata>(); Iterator<Element> var2 = getElements(); while (var2.hasNext()) { Element var3 = var2.next(); var1.add(MemberMetadata.newInstance(elementDoc(var3), javaType(var3), fieldName(var3), typeInfo(var3), initArray(var3), getMethod(var3), javaType(var3), booleanGetMethod(var3), setMethod(var3), writeMethod(var3), loadType(var3), loadMethod(var3), isComplexType(var3), javaTypeInterface(var3), isArray(var3))); } return new ComplexClassMetadata(packageName, className, baseClass(), xsiType(), superWrite(), superLoad(), superToString(), var1, mapper.generateInterfaces(), packageName, complexType.getBase() == null ? null : localJavaType(complexType.getBase(), 1, false)); } 	0	0	0	0	0	1
"private void Func1() { PrerequisitesChecker var1 = new PrerequisitesChecker(communicator); ModulePool var2 = new ModulePool(); ModulePool var3 = new ModulePool(); ModulePool var4 = new ModulePool(); var2.addModule(new CreateResultsDirectories(communicator)); if (communicator.isReferenceselected()) { var2.addModule(new ReferenceRenamer(communicator)); } if (communicator.isRun_fastqc()) { var2.addModule(new FastQC(communicator)); } if (communicator.isRun_clipandmerge()) { if(communicator.getMerge_type().equals(""PAIRED"")){ if (!communicator.isMerge_only_clipping()) { var2.addModule(new ClipAndMerge(communicator)); } else { var2.addModule(new ClipAndMerge(communicator, ClipAndMerge.ADAPTER_CLIPPING_ONLY)); } } else { var2.addModule(new ClipAndMerge(communicator, ClipAndMerge.SINGLE_ENDED_ONLY)); } } if (communicator.isRun_qualityfilter()) { var2.addModule(new QualityTrimmer(communicator)); var2.addModule(new FastQC(communicator, FastQC.AFTERMERGING)); } if (communicator.isRun_mapping() && communicator.getMapper_to_use().equals(""CircularMapper"")) { var3.addPredecessor(var2); if (var1.checkForIndices(""whole"")) { var3.addModule(new BWAIndex(communicator)); } addCircularMapping(var3); } if (communicator.isRun_mapping() && communicator.getMapper_to_use().equals(""BWA"")) { var3.addPredecessor(var2); if (var1.checkForIndices(""whole"")) { var3.addModule(new BWAIndex(communicator)); } addBWAMapping(var3); } if (communicator.isRun_mapping() && communicator.getMapper_to_use().equals(""Stampy"")) { var3.addPredecessor(var2); if (var1.checkForIndices(""Stampy"")) { var3.addModule(new StampyIndex(communicator)); var3.addModule(new StampyHash(communicator)); } addStampyMapping(var3); } if (communicator.isRun_mapping() && communicator.getMapper_to_use().equals(""BT2"")) { var3.addPredecessor(var2); if (var1.checkForIndices(""BT2"")) { var3.addModule(new BT2Index(communicator)); } addBT2Mapping(var3); } if (communicator.isRun_mapping() && communicator.getMapper_to_use().equals(""BWAMem"")) { var3.addPredecessor(var2); if (var1.checkForIndices(""whole"")) { var3.addModule(new BWAIndex(communicator)); } addBWAMemMapping(var3); } if (communicator.isRun_complexityestimation()) { var3.addModule(new PreseqCCurveCalculation(communicator)); var3.addModule(new PreseqLCExtrapCalculation(communicator)); } if (communicator.isRmdup_run() && !communicator.isMarkdup_run()) { var3.addModule(new DeDup(communicator)); } if (communicator.isMarkdup_run()) { var3.addModule(new MarkDuplicates(communicator)); } if(communicator.isRun_mapping() && (communicator.isMarkdup_run() || communicator.isRmdup_run())){ var3.addModule(new SamtoolsIndex(communicator, SamtoolsIndex.DEDUP)); } if(communicator.isSchmutzi_run()){ addContaminationEstimation(var3); } if (communicator.isRun_coveragecalc()) { var3.addModule(new QualiMap(communicator)); } if (communicator.isRun_mapdamage()) { var3.addModule(new MapDamage(communicator)); } if (communicator.isRun_gatksnpcalling() && !communicator.getGatk_caller().equals(""ANGSD"")) { var4 = createGATKSNPCallingPipeline(); var4.setCurrentFilePath(var3.getCurrentFilePath()); } if(communicator.isRun_gatksnpcalling() && communicator.getGatk_caller().equals(""ANGSD"")){ var4 = createANGSDCallingPipeline(); var4.setCurrentFilePath(var3.getCurrentFilePath()); } if (communicator.isRun_gatksnpfiltering()) { var4.addModule(new GATKVariantFilter(communicator)); if (!communicator.isRun_vcf2draft()) { var4.addModule(new BGZip(communicator)); var4.addModule(new Tabix(communicator)); } } if (communicator.isRun_vcf2draft()) { var4.addModule(new VCF2Genome(communicator)); } if (communicator.isRun_cleanup()) { var4.addModule(new CleanUpRedundantData(communicator)); } if (communicator.isRun_reportgenerator()) { var4.addModule(new ReportGenerator(communicator)); } pools.add(var2); var3.addPredecessor(var2); pools.add(var3); var4.addPredecessor(var3); pools.add(var4); } "	0	0	0	0	0	1
"@Override public Dataset Func1(final URI var1, boolean var2) throws NoSuchNeedException, NoSuchConnectionException { List<URI> var3 = new ArrayList<URI>(needInformationService.Func1(var1)); NeedInformationService.PagedResource<Dataset, URI> var4 = toContainerPage( this.connectionResourceURIPrefix+""/"", new SliceImpl<URI>(var3)); if (var2) { addDeepConnectionData(var4.getContent(), var3); } return var4.getContent(); } "	0	0	0	0	0	1
"public String Func1() { StringBuilder var1 = new StringBuilder(); var1.append(""add "" + this.getDesc().getValue() + "" ""); var1.append(""p/"" + this.getVenue().value + "" ""); var1.append(""e/"" + this.getTime().getValue() + "" ""); var1.append(""a/"" + this.getPriority().getValue() + "" ""); this.getTags().getInternalList().stream().forEach(s -> var1.append(""t/"" + s.tagName + "" "")); return var1.toString(); } "	0	0	1	0	1	0
"@Test public void Func1 () throws Exception { String var1 = ""paired-sample-test""; Dataset var2 = new SimpleDatasetBuilder ().setParserFactories (asList (new SuperCsvParserFactory ())) .setValueStoreBuilder (new MapBackedValueStoreBuilder ()) .build (new MockTsvInput (""mock"", ""\tS1\tS2\tS3\tS4\tS5\tS6\tS7\tS8\tS9\tS10\nG1\t1.395864250608167323e+00\t3.916231968392996921e-01\t6.802546076106781303e-01\t2.842920356539057058e-01\t1.167978791803114591e+00\t5.575493844636111307e-01\t6.182690292679594579e-01\t1.064234628122129322e+00\t1.625811787848802759e+00\t9.864857446509973649e-01\nG2\t1.150244510668744669e+00\t1.388079975162571866e+00\t1.341088373821840873e+00\t3.084720816624257900e+00\t2.581845080221241595e+00\t2.367430922421942974e+00\t1.032362182840793619e+00\t3.117787544453723747e+00\t4.617892882371386065e-01\t1.602827033075911567e+00\nG3\t4.391889940305381268e-01\t1.382298236091139110e+00\t5.729514752270051803e-01\t9.725989889844147696e-01\t1.248284009105965708e+00\t8.926578096766990544e-01\t1.319754154382377642e+00\t1.540298352646559454e+00\t1.133127415001959681e+00\t1.676162412992144635e+00\nG4\t1.905561360016599703e+00\t9.356241886510197059e-02\t2.380285018347454984e-01\t3.847407463184190135e+00\t2.356291503584246882e+00\t2.794509930794697450e+00\t6.741638547114860991e-01\t1.724432926869718052e+00\t1.195998720063262244e+00\t1.745233671408940257e+00\nG5\t1.719337409578133302e+00\t3.494846145050719555e-01\t1.167667630790075517e+00\t4.782230260685107481e-01\t4.399142365221563322e-01\t6.800108190568048272e-01\t7.253248227503550360e-01\t7.806689816392595738e-01\t6.925188107811194316e-01\t3.442408758869031082e-02\nG6\t1.436621744373217435e+00\t9.752049715130082230e-01\t1.124556273672220330e+00\t7.312997978809270272e-01\t1.297314694459754891e+00\t2.485989754520180339e-01\t2.137179543584942110e+00\t4.094669660443884807e-01\t4.575113164318556636e-01\t8.482968148400671371e-01\nG7\t8.715438551197591810e-01\t6.180182417077844104e-01\t1.169918270963537843e+00\t2.862357749855996003e-01\t1.308055771196735995e+00\t3.779460416723794403e-01\t7.388802606792711503e-01\t9.796859959757528991e-01\t1.243557217256898939e+00\t8.095219518818874693e-02\nG8\t1.243952955865607057e+00\t1.440989147751386978e+00\t2.302367921964460218e-01\t6.786898563519169203e-01\t1.177747249932315610e+00\t2.131045195664008407e+00\t7.875240265935568029e-01\t7.395105287783704240e-01\t7.665894136772821721e-01\t1.303648953631650453e+00\nG9\t5.958003825885130889e-01\t1.709278882257981191e+00\t6.575371327833990920e-01\t3.329769660881695126e-01\t1.009206176972098135e+00\t2.588110927523207261e-01\t1.715273343737192757e+00\t7.197384843776438723e-01\t1.210154445852278160e+00\t5.181108688733959688e-01\nG10\t1.338637395387363371e+00\t8.298894986259539586e-01\t7.013115941652059426e-01\t8.935077793136788626e-01\t5.163333275847467041e-01\t1.610827343048899962e+00\t1.731075165538171534e+00\t2.237277410211655493e-01\t1.234319586039015482e+00\t2.412611683717998945e-01"")); Selection var3 = new SimpleSelection (""var3"", new Properties (), asList (""S1"", ""S2"", ""S3"",""S7"", ""S9"")); Selection var4 = new SimpleSelection (""var4"", new Properties (), asList (""S4"", ""S5"", ""S6"",""S8"", ""S10"")); var2.dimension (COLUMN).selections ().put (var3); var2.dimension (COLUMN).selections ().put (var4); workspace.put (var2); PairedSampleTTestDTO var5 = new PairedSampleTTestDTO(var1, var4.name (), var3.name (), 0.05, false); String var6 = jsonObjectMapper.writeValueAsString (var5); log.debug (""var6: "" + var6); @SuppressWarnings (""unused"") MvcResult var7 = mockMvc.perform ( MockMvcRequestBuilders.post (""/var2/""+var2.name ()+""/analyze/paired_ttest"") .param (""format"", ""json"") .contentType (MediaType.APPLICATION_JSON) .content (var6) .session (mockHttpSession) .accept (MediaType.APPLICATION_JSON)) .andDo (MockMvcResultHandlers.print ()) .andExpect (MockMvcResultMatchers.status ().isOk ()) .andReturn (); Analysis var8 = var2.analyses ().get (var5.name()); log.debug(""******* AnalysisStatus:\n""+ jsonObjectMapper.writeValueAsString (var8)); assertThat(var8.name (), is(var5.name())); assertThat(var8.type (), is(""t-Test Analysis"")); assertThat(var8.status (), is(Analysis.MEV_ANALYSIS_STATUS_IN_PROGRESS)); Thread.sleep (3000L); TTest var9 = (TTest)var2.analyses ().get (var1); String var10 = jsonObjectMapper.writeValueAsString (var9); log.debug (""jsonAnalysis: "" + var10); } "	0	0	0	0	0	1
"private void Func1(int var1, Kit var2){ setItem(var1, new ItemStack(Material.ENDER_PEARL), player -> { new KitEditGUI(player, this, var2); },""&1Kit: &f"" + var2.getName(), ""&aCost: "" + var2.getCost() + ""\n&aCooldown: "" + var2.getCooldown() ); } "	0	0	0	0	0	1
@Override public void Func1(boolean var1) { if (var1) { Trace var2 = getTraceContext().newTraceObject(); } getRecorder().clear(); getTestTcpDataSender().clear(); ignoredServiceTypes.clear(); } 	1	0	1	0	0	0
"@Override public Symbol Func1(Symbol var1, Symbol var2) throws IOException { if (var2 instanceof Symbol.FieldAdjustAction) { Symbol.FieldAdjustAction var3 = (Symbol.FieldAdjustAction) var2; String var4 = var3.fname; if (currentReorderBuffer != null) { List<JsonElement> var5 = currentReorderBuffer.savedFields.get(var4); if (var5 != null) { currentReorderBuffer.savedFields.remove(var4); currentReorderBuffer.origParser = in; in = makeParser(var5); return null; } } if (in.getCurrentToken() == JsonToken.FIELD_NAME) { do { String var6 = in.getText(); in.nextToken(); if (var4.equals(var6)) { return null; } else { if (currentReorderBuffer == null) { currentReorderBuffer = new ReorderBuffer(); } currentReorderBuffer.savedFields.put(var6, getVaueAsTree(in)); } } while (in.getCurrentToken() == JsonToken.FIELD_NAME); throw new AvroTypeException(""Expected field var4 not found: "" + var3.fname); } } else if (var2 == Symbol.FIELD_END) { if (currentReorderBuffer != null && currentReorderBuffer.origParser != null) { in = currentReorderBuffer.origParser; currentReorderBuffer.origParser = null; } } else if (var2 == Symbol.RECORD_START) { if (in.getCurrentToken() == JsonToken.START_OBJECT) { in.nextToken(); reorderBuffers.push(currentReorderBuffer); currentReorderBuffer = null; } else { throw error(""record-start""); } } else if (var2 == Symbol.RECORD_END || var2 == Symbol.UNION_END) { if (in.getCurrentToken() == JsonToken.END_OBJECT) { in.nextToken(); if (var2 == Symbol.RECORD_END) { if (currentReorderBuffer != null && !currentReorderBuffer.savedFields.isEmpty()) { throw error(""Unknown fields: "" + currentReorderBuffer.savedFields.keySet()); } currentReorderBuffer = reorderBuffers.pop(); } } else { throw error(var2 == Symbol.RECORD_END ? ""record-end"" : ""union-end""); } } else { throw new AvroTypeException(""Unknown action symbol "" + var2); } return null; } "	0	0	0	1	0	0
public void Func1(final String var1, final int var2, final int var3) { BufferedImage var4; if (Status.isExportAlpha()) { var4 = Util.getEmptyBITransparent(); } else { var4 = Util.getEmptyBIWhite(); } var4 = Utils.getBackgroundExport(var4, 0, 0, Status.getImageSize().width, Status.getImageSize().height, 0, 0); var4 = repaintRectangle(-var2 + 0, -var3 + 0, Status.getImageSize().width, Status.getImageSize().height, var4, true); try { ImageIO.write(var4, Status.getSaveFormat(), new File(var1 + Status.getSaveFormat())); } catch (IOException e) { e.printStackTrace(); } } 	1	1	0	0	0	0
public void Func1(final TripHolder var1, boolean var2) { Drawable var3; int var4, var5; if(var2) { var3 = TransportrUtils.getTintedDrawable(context, R.drawable.ic_action_navigation_unfold_more); var4 = View.GONE; var5 = View.VISIBLE; } else { var3 = TransportrUtils.getTintedDrawable(context, R.drawable.ic_action_navigation_unfold_less); var4 = View.VISIBLE; var5 = View.GONE; } var1.var2.setImageDrawable(var3); var1.linesView.setVisibility(var5); if(var1.legs.size() <= 1) { var1.legs.get(0).info.setVisibility(var4); return; } int var6 = 0; for(LegHolder var7 : var1.legs) { if(var6 == 0) { var7.arrival.setVisibility(var4); var7.info.setVisibility(var4); var7.divider.setVisibility(var4); } else if(var6 == var1.legs.size() - 1) { var7.departure.setVisibility(var4); var7.info.setVisibility(var4); } else { var7.arrival.setVisibility(var4); var7.info.setVisibility(var4); var7.departure.setVisibility(var4); var7.divider.setVisibility(var4); } var6 += 1; } } 	0	0	0	0	0	1
private void Func1() throws Exception { List<ShapedRecipes> var1 = ((Encyclopedia)book).getRecipesForEntry(selectedIndex); if (var1 == null || var1.isEmpty()) { return; } int var2 = width / 2 + 25; int var3 = height / 2 - 80; int var4 = 0; for (int var5 = contentPage * book.entriesPerContentPage(contentMode); var5 < (contentPage + 1) * book.entriesPerContentPage(contentMode); var5++) { if (var5 >= book.getContentPageCount(selectedIndex, contentMode)) { return; } Encyclopedia.RecipeEntry var6 = ((Encyclopedia)book).getFormattedRecipe(var1.get(var5)); TropicraftRenderUtils.bindTextureGui(openTextureIndex); drawTexturedModalRect(var2 - 3, var3 - 3, 0, 187, 122, 60); int var7 = 18; int var8 = 18; for(int var9 = 0; var9 < var6.height; var9++) { for (int var10 = 0; var10 < var6.width; var10++) { int var11 = (var9 * var6.width) + var10; if (var6.ingredients[var11] != null) { int var12 = var2 + (var7 * var10) + 1; int var13 = var3 + (var8 * var9) + 1; GlStateManager.pushMatrix(); GlStateManager.enableRescaleNormal(); RenderHelper.enableGUIStandardItemLighting(); itemRenderer.isNotRenderingEffectsInGUI(true); itemRenderer.renderItemIntoGUI(var6.ingredients[var11], var12, var13); itemRenderer.isNotRenderingEffectsInGUI(false); RenderHelper.disableStandardItemLighting(); GlStateManager.disableRescaleNormal(); GlStateManager.popMatrix(); } } } for (int var9 = 0; var9 < var6.height; var9++) { for (int var10 = 0; var10 < var6.width; var10++) { int var11 = (var9 * var6.width) + var10; int var12 = var2 + (var7 * var10) + 1; int var13 = var3 + (var8 * var9) + 1; checkMouseHover(var6.ingredients[var11], var12, var13, 18); } } GlStateManager.pushMatrix(); GlStateManager.scale(1.5F, 1.5F, 1.5F); GlStateManager.translate(var2 / 3F + 1F, var3 / 3F - .75F, 0F); GlStateManager.enableRescaleNormal(); RenderHelper.enableGUIStandardItemLighting(); itemRenderer.renderItemIntoGUI(var6.output, var2 / 3 + 60, var3 / 3 + 11); itemRenderer.renderItemOverlayIntoGUI(fontRendererObj, var6.output, var2 / 3 + 60, var3 / 3 + 11, var6.output.getDisplayName()); RenderHelper.disableStandardItemLighting(); GlStateManager.disableRescaleNormal(); GlStateManager.popMatrix(); GlStateManager.pushMatrix(); checkMouseHover(var6.output, var2 + 90, var3 + 20, 25); GlStateManager.popMatrix(); var4++; var3 += 62; } } 	1	0	1	1	0	0
"@AuthorizeOperations(operations = { GooruOperationConstants.OPERATION_RESOURCE_UPDATE }) @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = Exception.class) @RequestMapping(method = RequestMethod.POST, value = ""/{id}/media"") public ModelAndView Func1(HttpServletRequest var1, @PathVariable(ID) String var2, @RequestBody String var3, HttpServletResponse var4) throws Exception { JSONObject var5 = requestData(var3); return toModelAndView(serializeToJson(this.getResourceService().Func1(var2, getValue(FILENAME, var5)), true)); } "	0	0	0	0	0	1
"@AuthorizeOperations(operations = { GooruOperationConstants.OPERATION_BULK_UPDATE_VIEW}) @Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = Exception.class) @RequestMapping(method = RequestMethod.POST, value = ""/update/views"") public void Func1(HttpServletRequest var1, HttpServletResponse var2, @RequestBody String var3) throws Exception { List<UpdateViewsDTO> var4 = this.buildUpdatesViewFromInputParameters(var3); User var5 = (User) var1.getAttribute(Constants.USER); this.getResourceService().updateViewsBulk(var4, var5); } "	0	0	1	1	0	0
"@Override public void Func1(Either<String, JsonObject> var1) { final JsonArray var2 = new JsonArray(); final JsonObject var3 = new JsonObject().putArray(""global"", var2); if (var1.isRight() && isNotEmpty(var1.right().getValue().getString(""UAI"")) && TIMETABLE_TYPES.contains(var1.right().getValue().getString(""timetable""))) { if (!(""EDT"".equals(var1.right().getValue().getString(""timetable"")) && !path.endsWith(""\\.xml"")) && !(""UDT"".equals(var1.right().getValue().getString(""timetable"")) && !path.endsWith(""\\.zip""))) { var2.addString(I18n.getInstance().translate(""invalid.import.format"", domain, acceptLanguage)); handler.Func1(new Either.Left<JsonObject, JsonObject>(var3)); return; } JsonObject var4 = new JsonObject().putString(""var4"", ""manual-"" + var1.right().getValue().getString(""timetable"").toLowerCase()) .putString(""path"", path) .putString(""UAI"", var1.right().getValue().getString(""UAI"")) .putString(""language"", acceptLanguage); eb.send(Directory.FEEDER, var4, new Handler<Message<JsonObject>>() { @Override public void Func1(Message<JsonObject> var1) { if (""ok"".equals(var1.body().getString(""status""))) { JsonObject var5 = var1.body().getObject(""result"", new JsonObject()); if (var5.getObject(""var2"", new JsonObject()).size() > 0) { handler.Func1(new Either.Left<JsonObject, JsonObject>(var5.getObject(""var2""))); } else { handler.Func1(new Either.Right<JsonObject, JsonObject>(var5.getObject(""ignored""))); } } else { var2.addString(var1.body().getString(""message"", """")); handler.Func1(new Either.Left<JsonObject, JsonObject>(var3)); } } }); } else { var2.addString(I18n.getInstance().translate(""invalid.structure"", domain, acceptLanguage)); handler.Func1(new Either.Left<JsonObject, JsonObject>(var3)); } } "	0	0	1	0	1	0
@Override public void Func1(Issue var1) { if (var1 != null) { IssueInfo var2 = new IssueInfo(); var2.repoInfo = repoInfo; var2.num = var1.number; if (var1.pullRequest == null) { Intent var3 = IssueDetailActivity.createLauncherIntent(getActivity(), var2); startActivityForResult(var3, ISSUE_REQUEST); } } } 	0	0	1	0	1	0
"private void Func1() { frame = new JFrame(); final JLabel var1 = new JLabel(""""); var1.setBounds(12, 12, 153, 15); frame.getContentPane().add(var1); frame.addWindowListener(new WindowAdapter() { @Override public void Func2(WindowEvent var2) { var1.setText(""Dobro došao, "" + getIme()); } }); frame.setBounds(100, 100, 583, 290); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.getContentPane().setLayout(null); frame.setResizable(false); JButton var3 = new JButton(""Prijava preuzetog vozila""); var3.addActionListener(new ActionListener() { public void Func3(ActionEvent var4) { PrijavljivanjePreuzetogVozila var5 = new PrijavljivanjePreuzetogVozila(getIme(),getId()); var5.main(null); } }); var3.setBounds(12, 74, 220, 25); frame.getContentPane().add(var3); JButton var6 = new JButton(""Odjava preuzetog vozila""); var6.addActionListener(new ActionListener() { public void Func3(ActionEvent var4) { OdjavljivanjePreuzetogVozila var7 = new OdjavljivanjePreuzetogVozila(); var7.main(null); } }); var6.setBounds(12, 120, 220, 25); frame.getContentPane().add(var6); JButton var8 = new JButton(""Odjavi se""); var8.addActionListener(new ActionListener() { public void Func3(ActionEvent var4) { for (Window var9 : Window.getWindows()) { var9.dispose(); } JOptionPane.showMessageDialog(null, ""Uspješno ste odjavljeni!""); Login var10 = new Login(); var10.main(); } }); var8.setBounds(440, 176, 117, 25); frame.getContentPane().add(var8); JButton var11 = new JButton(""Pregled slobodnih vozila""); var11.addActionListener(new ActionListener() { public void Func3(ActionEvent var4) { var11 var12 = new var11(); var12.main(null); } }); var11.setBounds(12, 157, 220, 25); frame.getContentPane().add(var11); JButton var13 = new JButton(""Pomoć""); var13.addActionListener(new ActionListener() { public void Func3(ActionEvent var4) { JOptionPane.showMessageDialog(null, ""Omogućen vam je pregled svih slobodnih vozila. Prijavite ili odjavite"" + ""vozilo koje namjeravate preuzeti/vratiti.""); } }); var13.setBounds(477, 228, 80, 23); frame.getContentPane().add(var13); } "	0	0	1	0	1	0
@Override public void Func1() { if (counter < ConfigValues.transportDelay) counter++; if (counter >= ConfigValues.transportDelay) { DistanceHandler[] var1 = new DistanceHandler[exportLocations.size()]; var1 = exportLocations.toArray(var1); for (DistanceHandler var2 : var1) { if (!validateBlock(var2)) { exportLocations.remove(var2); worldObj.markBlockForUpdate(xCoord, yCoord, xCoord); markDirty(); } } } if (!worldObj.isRemote) { if (counter >= ConfigValues.transportDelay) { switch (mode) { case IMPORT: if (inventory == null) { TileEntity var3 = getTileEntityFromMetadata(); if (var3 != null && var3 instanceof IInventory) { IInventory var4 = (IInventory) var3; if (var4 instanceof ISidedInventory) { ISidedInventory var5 = (ISidedInventory) var4; for (int var6 : var5.getAccessibleSlotsFromSide(this.getBlockMetadata())) { if (var4.getStackInSlot(var6) != null) { inventory = var4.decrStackSize(var6, 1); return; } } } else { for (int var7 = 0; var7 < var4.getSizeInventory(); var7++) { if (var4.getStackInSlot(var7) != null) { inventory = var4.decrStackSize(var7, 1); return; } } } } } break; case EXPORT: if (inventory != null) { TileEntity var3 = getTileEntityFromMetadata(); if (var3 != null && var3 instanceof IInventory) { IInventory var4 = (IInventory) var3; ItemStack var8 = TileEntityHopper.func_145889_a(var4, inventory, this.getBlockMetadata()); if (var8 == null) { inventory = null; return; } } } break; } if (inventory != null) attemptTeleport(); } } else if (worldObj.getTotalWorldTime() % 20 == 0) { DistanceHandler[] var1 = new DistanceHandler[exportLocations.size()]; var1 = exportLocations.toArray(var1); if (var1.length > 0) spawnParticles(var1); } } 	0	0	0	0	0	1
@Test public void Func1() { int var1 = this.setupWithDifferentValues(); Assert.assertNull(this.redundantSetTesting.toArray(new Integer[var1 + 1])[0]); } 	0	0	1	1	0	0
"@JsonIgnore public String Func1() { return getSurname().map(surname -> String.join("" "", forename, surname)) .orElse(forename); } "	0	0	1	0	0	0
"@Override public IGuild Func1(String var1, Optional<String> var2, Optional<Image> var3) throws HTTP403Exception { try { GuildResponse var4 = DiscordUtils.GSON.fromJson(Requests.POST.makeRequest(DiscordEndpoints.SERVERS, new StringEntity(DiscordUtils.GSON.toJson(new CreateGuildRequest(var1, var2.orElse(null), var3.orElse(null)))), new BasicNameValuePair(""authorization"", this.token), new BasicNameValuePair(""content-type"", ""application/json"")), GuildResponse.class); return DiscordUtils.getGuildFromJSON(this, var4); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } return null; } "	0	0	0	0	0	1
public Map<Integer, CartItem> Func1() { return cartItems; } 	0	0	0	0	0	1
protected io.fabric8.maven.core.service.BuildService.BuildServiceConfig Func1() throws MojoExecutionException { return new io.fabric8.maven.core.service.BuildService.BuildServiceConfig.Builder() .dockerBuildContext(getBuildContext()) .dockerMojoParameters(createMojoParameters()) .buildRecreateMode(BuildRecreateMode.fromParameter(buildRecreate)) .openshiftBuildStrategy(buildStrategy) .s2iBuildNameSuffix(s2iBuildNameSuffix) .buildDirectory(project.getBuild().getDirectory()) .ericherTask(new Task<KubernetesListBuilder>() { @Override public void Func2(KubernetesListBuilder var1) throws Exception { new EnricherManager(resources, getEnricherContext()).enrich(var1); } }) .build(); } 	0	0	0	0	0	1
@Override public IRole Func1() { return new Role(position, Permissions.generatePermissionsNumber(permissions), name, managed, id, hoist, color.getRGB(), guild); } 	0	0	0	0	0	1
"public IQ Func1(Identity var1, String var2, ICommCallback var3) throws CommunicationException { IQ var4 = new IQ(Type.get); var4.setTo(var1.getJid()); ByteArrayOutputStream var5 = new ByteArrayOutputStream(); try { var5.write(ParsingUtils.getItemsQueryRequestBytes(var2)); ByteArrayInputStream var6 = new ByteArrayInputStream(var5.toByteArray()); Document var7 = reader.read(var6); var4.getElement().add(var7.getRootElement()); } catch (IOException e) { throw new CommunicationException(""Error building disco#items request"", e); } catch (DocumentException e) { throw new CommunicationException(""Error building disco#items request"", e); } commCallbacks.put(var4.getID(), var3); return var4; } "	0	0	0	0	0	1
"public Map<UmaScopeDescription, Boolean> Func1(String var1, List<UmaPermission> var2) { var1 = ServerUtil.urlDecode(var1); final String[] var3 = var1.split("" ""); final Map<UmaScopeDescription, Boolean> var4 = new HashMap<UmaScopeDescription, Boolean>(); if (ArrayUtils.isNotEmpty(var3)) { for (UmaScopeDescription var5 : umaScopeService.getScopesByIds(Arrays.asList(var3))) { var4.put(var5, true); } } for (UmaPermission var6 : var2) { for (UmaScopeDescription var5 : umaScopeService.getScopesByDns(var6.getScopeDns())) { var4.put(var5, false); } } if (var4.isEmpty()) { log.error(""There are no any scopes requested in give request.""); throw new UmaWebException(BAD_REQUEST, errorResponseFactory, UmaErrorResponseType.INVALID_RESOURCE_SCOPE); } log.trace(""CandidateGrantedScopes: "" + Joiner.on("", "").join(Iterables.transform(var4.keySet(), new Function<UmaScopeDescription, String>() { @Override public String Func2(UmaScopeDescription var7) { return var7.getId(); } }))); return var4; } "	0	0	0	0	0	1
"public String Func1(String var1) { IIORegistry.getDefaultInstance().registerServiceProvider(new TIFFImageWriterSpi(), ImageWriterSpi.class); ArrayList<ITesseract.RenderedFormat> var2 = new ArrayList<ITesseract.RenderedFormat>(); var2.add(ITesseract.RenderedFormat.PDF); File var3; try { var3 = PdfUtilities.convertPdf2Tiff(new File(var1)); ITesseract var4 = new Tesseract(); var4.setDatapath(LoadLibs.extractTessResources(""tessdata"").getParent()); String var5 = var3.getAbsolutePath(); var4.createDocuments(var5, var1.substring(0, var1.length() - 4), var2); System.out.println(""OCR Done""); return ""Success""; } catch (TesseractException e) { System.err.println(e.getMessage()); } catch (IOException e) { e.printStackTrace(); } catch (SecurityException e) { e.printStackTrace(); } catch (NullPointerException e) { e.printStackTrace(); } return ""Failed""; } "	0	1	0	0	1	0
public synchronized void Func1(ServerSocket var1) { try { this.sock = var1.accept(); ClientCenter.getInstance().getSockets().add(this.sock); ReceiverManager var2 = new ReceiverManager(sock); Thread var3 = new Thread(var2); var3.start(); } catch (Exception e) { e.printStackTrace(); if (sock != null) { ClientCenter.getInstance().removeClientBySocket(sock); } ServerSocketBuilder.dumpServerSocket(); ServerSocketBuilder.createSocket(); } } 	0	0	0	0	0	1
"@Override public List<IJobExecution> Func1(long var1) { Connection var2 = null; PreparedStatement var3 = null; ResultSet var4 = null; List<IJobExecution> var5 = new ArrayList<IJobExecution>(); ObjectInputStream var6 = null; try { var2 = getConnection(); var3 = var2.prepareStatement(""select A.jobexecid, A.jobinstanceid, A.createtime, A.starttime, A.endtime, A.updatetime, A.parameters, A.batchstatus, A.exitstatus, B.name from executioninstancedata as A inner join jobinstancedata as B ON A.jobinstanceid = B.jobinstanceid where A.jobinstanceid = ?""); var3.setLong(1, var1); var4 = var3.executeQuery(); while (var4.next()) { var5.add(readJobExecutionRecord(var4)); } } catch (SQLException e) { throw new PersistenceException(e); } catch (IOException e) { throw new PersistenceException(e); } catch (ClassNotFoundException e) { throw new PersistenceException(e); } finally { if (var6 != null) { try { var6.close(); } catch (IOException e) { throw new PersistenceException(e); } } cleanupConnection(var2, var4, var3); } return var5; } "	0	0	1	0	1	0
public final String Func1() { return sentence; } 	0	0	1	1	0	0
public CompareCollection<Node> Func1() { return Func1; } 	0	0	1	1	0	0
public List<ThesisProposalsConfiguration> Func1(User var1) { Objects.nonNull(var1); Objects.nonNull(var1.getPerson()); final Teacher var2 = var1.getPerson().getTeacher(); if (var2 == null) { return new ArrayList<>(); } Stream<ThesisProposalsConfiguration> var3 = var2.getTeacherAuthorizationStream().flatMap(auth -> auth.getDepartment().getDegreesSet().stream()) .flatMap(degree -> degree.getExecutionDegrees().stream()) .flatMap(executionDegree -> executionDegree.getThesisProposalsConfigurationSet().stream()).distinct(); Stream<ThesisProposalsConfiguration> var4 = var1.getThesisProposalParticipantSet().stream() .flatMap(participant -> participant.getThesisProposal().getThesisConfigurationSet().stream()).distinct(); return Stream.concat(var3, var4) .sorted(ThesisProposalsConfiguration.COMPARATOR_BY_PROPOSAL_PERIOD_START_DESC).collect(Collectors.toList()); } 	0	0	0	0	0	1
public boolean Func1() { ErrorType var1 = getErrorType(); ErrorType[] var2 = new ErrorType[]{ErrorType.INVALID_GRANT_INVALID_TOKEN, ErrorType.INVALID_GRANT_TOKEN_EXPIRED, ErrorType.ACCESS_DENIED, ErrorType.NO_CREDIT_CARD_TRIAL_ENDED, ErrorType.SERVICE_BLOCKED, ErrorType.INVALID_CLIENT, ErrorType.UNAUTHORIZED_DEVICE, ErrorType.GRACE_PERIOD_EXPIRED, ErrorType.OTHER}; for (ErrorType var3 : var2) { if (var1 == var3) { return true; } } return false; } 	0	0	0	0	0	1
"@Test public void Func1() { run(""geo:Func1(<gml:LinearRing><gml:coordinates>1,1 20,1 50,30 1,1"" + ""</gml:coordinates></gml:LinearRing>)"", ""<gml:Polygon xmlns:gml=\""http://www.opengis.net/gml\"">"" + ""<gml:outerBoundaryIs><gml:LinearRing>"" + ""<gml:coordinates>1.0,1.0 1.0,30.0 50.0,30.0 50.0,1.0 1.0,1.0"" + ""</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon>""); error(""geo:Func1(text {'a'})"", INVCAST_X_X_X.qname()); error(""geo:Func1(<gml:unknown/>)"", GeoErrors.qname(1)); error(""geo:Func1(<gml:LinearRing><gml:pos>1,1 20,1 50,30 1,1</gml:pos>"" + ""</gml:LinearRing>)"", GeoErrors.qname(2)); } "	0	0	1	0	0	0
"@Test public void Func1() { run(""string(geo:Func1(<gml:LineString><gml:coordinates>1,1 55,99 2,1"" + ""</gml:coordinates></gml:LineString>))"", ""AAAAAAIAAAADP/AAAAAAAAA/8AAAAAAAAEBLgAAAAAAAQFjAAAAAAABAAAAAAAAAAD/wAAAAAAAA""); error(""geo:Func1(text {'a'})"", INVCAST_X_X_X.qname()); error(""geo:Func1(<gml:unknown/>)"", GeoErrors.qname(1)); error(""geo:Func1(<gml:LinearRing><gml:coordinates>1,1 55,99 2,1"" + ""</gml:coordinates></gml:LinearRing>)"", GeoErrors.qname(2)); } "	0	0	1	0	1	0
"@Test public void Func1() { run(""geo:Func1(<gml:Point><gml:coordinates>2,1,3</gml:coordinates></gml:Point>)"", ""3""); run(""geo:Func1(<gml:Point><gml:coordinates>2</gml:coordinates></gml:Point>)"", ""NaN""); error(""geo:Func1(<gml:MultiPoint><gml:Point><gml:coordinates>1,1"" + ""</gml:coordinates></gml:Point><gml:Point><gml:coordinates>1,2"" + ""</gml:coordinates></gml:Point></gml:MultiPoint>)"", GeoErrors.qname(3)); error(""geo:Func1("" + ""<gml:LinearRing><gml:coordinates>0,0 20,0 0,20 0,0"" + ""</gml:coordinates></gml:LinearRing>)"", GeoErrors.qname(3)); error(""geo:Func1(<gml:Point><gml:coordinates></gml:coordinates></gml:Point>)"", GeoErrors.qname(2)); error(""geo:Func1(<gml:geo><gml:coordinates>2,1</gml:coordinates></gml:geo>)"", GeoErrors.qname(1)); error(""geo:Func1(a)"", NOCTX_X.qname()); } "	0	0	0	0	0	1
public void Func1(String var1) { this.username = username; } 	0	0	1	0	0	0
"private String Func1(String var1) { Preconditions.checkArgument(var1.matches("".+_.+_.+"")); return var1.replaceFirst(""_"", ""."").substring(0, var1.lastIndexOf('_')); } "	0	0	0	0	0	1
"@Test public void Func1() { Map<String, Object> var1 = new HashMap<>(); String var2 = ""Eduardo""; String var3 = ""testing var3""; String var4 = ""cars var2""; String var5 = ""www.google.com""; String var6 = ""afsdfasdfasdf""; String var7 = ""32fsdfasdf""; String var8 = ""23423""; String var9 = ""235324asdf""; String var10 = ""4536734""; List<String> var11 = new ArrayList<>(); var11.add(""optional 1""); var11.add(""optional 2""); var11.add(""optional 3""); var11.add(""optional 4""); String var12 = ""var12@var12.com""; String var13 = ""324523453254""; String var14 = ""3423434234234""; var1.put(""var2"", var2); var1.put(""var3"", var3); var1.put(""sellingCarName"", var4); var1.put(""sellingUrl"", var5); var1.put(""var6"", var6); var1.put(""var7"", var7); var1.put(""var8"", var8); var1.put(""var9"", var9); var1.put(""var10"", var10); var1.put(""var11"", var11); var1.put(""var12"", var12); var1.put(""var13"", var13); var1.put(""var14"", var14); String var15 = templateService.generateContent(""selling-mail"", var1); Assert.assertTrue(var15.contains(var2)); Assert.assertTrue(var15.contains(var3)); Assert.assertTrue(var15.contains(var4)); Assert.assertTrue(var15.contains(var5)); Assert.assertTrue(var15.contains(var12)); Assert.assertTrue(var15.contains(var14)); Assert.assertTrue(var15.contains(var13)); Assert.assertTrue(var15.contains(var6)); Assert.assertTrue(var15.contains(var7)); Assert.assertTrue(var15.contains(var8)); Assert.assertTrue(var15.contains(var9)); Assert.assertTrue(var15.contains(var10)); var11.forEach((e) -> Assert.assertTrue(var15.contains(e))); } "	0	0	0	1	0	0
"@RequestMapping(value = ""/Func1"", method = RequestMethod.POST) public String Func1(HttpServletRequest var1, HttpServletResponse var2, @RequestParam(""var3"") String var3, @RequestParam(""var4"") String var4) throws ServletException { if (var3 == null || var3.isEmpty() || var4 == null || var4.isEmpty()) { throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, ""Please, introduce your var3 and var4""); } else{ User var5 = userRepository.findByUsername(var3); String var6 = SecurityUtils.hashSHA512(var4); if(var5 != null && var5.getPassword().equals(var6)){ SecurityContextHolder.getContext().setAuthentication(new UsernamePasswordAuthenticationToken(var3, var4, null)); return MainController.DEFAULT_HOME_PATH; } else{ throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, ""Incorrect user and var4 combination""); } } } "	0	0	0	0	0	1
public static EntitySelectActivity Func1(String var1) { ShadowActivity var2 = ActivityLaunchUtils.buildHomeActivityForFormEntryLaunch(var1); Intent var3 = var2.getNextStartedActivity(); String var4 = var3.getComponent().getClassName(); Assert.assertEquals(EntitySelectActivity.class.getName(), var4); return Robolectric.buildActivity(EntitySelectActivity.class) .withIntent(var3).create().start().resume().get(); } 	0	0	0	0	0	1
"@Test public void Func1() throws Exception { ArrayList<Tuple> var1 = makeStreamLineEventStream(""users"", userFields, users); ArrayList<Tuple> var2 = makeStreamLineEventStream(""city"", cityFields, cities); TupleWindow var3 = makeTupleWindow(var1, var2); WindowedQueryBolt var4 = new WindowedQueryBolt(""users"", ""city"") .join(""city"", ""cityName"", ""users"") .selectStreamLine(""name,city,country""); MockCollector var5 = new MockCollector(); var4.prepare(null, null, var5); var4.execute(var3); printResults_StreamLine(var5); Assert.assertEquals( var2.size(), var5.actualResults.size() ); } "	0	0	0	0	0	1
"@Test public void Func1() throws RedPenException { List<Document> var1 = new ArrayList<>(); var1.add(new Document.DocumentBuilder() .setFileName(""tested file"") .addSection(0) .addSectionHeader(""foobar"") .addParagraph() .addSentence(""it is a piece of a cake."", 0) .addSentence(""that is also a piece of a cake."", 1) .build()); RedPen var2 = getRedPenWithSectionValidator(); List<ValidationError> var3 = var2.validate(var1).get(var1.get(0)); assertEquals(1, var3.size()); for (ValidationError var4 : var3) { assertThat(var4.getValidatorName(), is(""SectionLength"")); assertThat(var4.getMessage(), containsString(""The number of the character in the section exceeds the maximum"")); } } "	0	0	0	0	0	1
"public void Func1() { for (int var1 = 0; var1 < 20; var1++) { this.remoteCSSManager.registerXMPPServer(new CssProfile(), new ICSSManagerCallback() { @Override public void Func2(CssInterfaceResult var2) { LOG.info(""Received var2 from remote call""); LOG.info(""Result Status: "" + var2.isResultStatus()); } }); } } "	0	0	0	0	0	1
protected void Func1(BillView var1, BillView var2, SpotCheckObservation<BaseBillId> var3) { if (!stringEquals(var1.getSummary(), var2.getSummary(), false, true)) var3.addMismatch(new SpotCheckMismatch(BILL_SUMMARY_OPENLEG_DEV, var1.getSummary(), var2.getSummary())); } 	0	0	1	1	0	0
protected void Func1(BillView var1, BillView var2, SpotCheckObservation<BaseBillId> var3) { if (!stringEquals(var1.getBasePrintNoStr(), var2.getBasePrintNoStr(), false, true)) var3.addMismatch(new SpotCheckMismatch(BILL_BASE_PRINT_NO_NoStr_OPENLEG_DEV, var1.getBasePrintNoStr(), var2.getBasePrintNoStr())); } 	0	0	1	1	0	0
public BeaconEvent Func1(ResolveAction var1) { try { Action var2 = ActionFactory.getAction(var1.type, var1.content, UUID.fromString(UUIDUtils.addUuidDashes(var1.eid)), var1.delay * Constants.Time.ONE_SECOND); if (var2 == null){ return null; } return new BeaconEvent.Builder() .withAction(var2) .withSuppressionTime(var1.suppressionTime) .withSendOnlyOnce(var1.sendOnlyOnce) .withDeliverAtDate(var1.deliverAt) .withTrigger(var1.trigger) .build(); } catch (JSONException e) { return null; } } 	0	0	0	0	0	1
"private void Func1(CalendarData var1) { Timber.d(""Changing Calendar screen based on calendardata received""); if(UOITLibraryBookingApp.isFirstTimeLaunchSinceUpgradeOrInstall()) { getChildFragmentManager().beginTransaction() .replace(R.id.calendar_content_frame, FirstTimeLoaded.newInstance()).commit(); }else if(var1 == null) { getChildFragmentManager().beginTransaction() .replace(R.id.calendar_content_frame, SorryCartoon.newInstance()).commit(); }else { _makeNewCalendarLoadedFragmentOrRefreshCurrentOne(var1); } } "	0	0	0	0	0	1
"private void Func1() { FileInputStream var1 = null; ObjectInputStream var2 = null; try { var1 = mContext.openFileInput(STATUS_PRESERVATION_FILE_NAME); var2 = new ObjectInputStream(var1); Map<Region, RegionMonitoringState> var3 = (Map<Region, RegionMonitoringState>) var2.readObject(); mRegionsStatesMap.putAll(var3); } catch (IOException | ClassNotFoundException | ClassCastException e) { if (e instanceof InvalidClassException) { LogManager.d(TAG, ""Serialized Monitoring State has wrong class. Just ignoring saved state..."" ); } else LogManager.e(TAG, ""Deserialization exception, message: $s"", e.getMessage()); } finally { if (null != var1) { try { var1.close(); } catch (IOException ignored) { } } if (var2 != null) { try { var2.close(); } catch (IOException ignored) { } } } } "	0	0	1	1	0	0
"@Override public String Func1() { return ""VRouterApi "" + serverAddress + "":"" + serverPort; } "	0	0	1	0	1	0
public int Func1() { return totalFriends; } 	0	0	0	0	0	1
public int Func1(){ return this.area; } 	0	0	0	0	0	1
public int Func1(){ return this.processo; } 	0	0	0	0	0	1
"private void Func1(final CommandInterpreter var1, int var2, final RemoteJobEntry var3) { var1.println(String.format(COLUMN_FORMAT, var2, StringUtils.truncate(var3.getDescription(), 50), StringUtils.truncate(var3.getRequestingUserId(), 16), var3.getScheduleDate() != null ? Dates.formatByHostTimeZone(var3.getScheduleDate(), DateFormats.MEDIUM) : ""Unknown"", var3.getStartDate() != null ? Dates.formatByHostTimeZone(var3.getStartDate(), DateFormats.MEDIUM) : """", StringUtils.truncate(StringUtils.capitalizeFirstLetter(var3.getState().toString().toLowerCase()), 16))); } "	0	0	0	0	0	1
"protected JSONObject Func1(@NonNull Query var1, @NonNull List<String> var2, @NonNull Map<String, List<String>> var3) throws AlgoliaException { Map<String, List<String>> var4 = new HashMap<>(); for (Map.Entry<String, List<String>> var5 : var3.entrySet()) { if (var2.contains(var5.getKey())) { var4.put(var5.getKey(), var5.getValue()); } } List<IndexQuery> var6 = new ArrayList<>(); StringBuilder var7 = new StringBuilder(); boolean var8 = true; for (Map.Entry<String, List<String>> var5 : var3.entrySet()) { StringBuilder var9 = new StringBuilder(); var9.append(""(""); boolean var10 = true; for (String var11 : var5.getValue()) { if (var4.containsKey(var5.getKey())) { if (!var10) { var9.append(','); } var10 = false; var9.append(String.format(""%s:%s"", var5.getKey(), var11)); } else { if (!var8) { var7.append(','); } var8 = false; var7.append(String.format(""%s:%s"", var5.getKey(), var11)); } } if (var4.containsKey(var5.getKey())) { var9.append(')'); if (!var8) { var7.append(','); } var8 = false; var7.append(var9.toString()); } } var6.add(new IndexQuery(this.indexName, new Query(var1).set(""facetFilters"", var7.toString()))); for (String var12 : var2) { var7 = new StringBuilder(); var8 = true; for (Map.Entry<String, List<String>> var5 : var3.entrySet()) { if (var12.equals(var5.getKey())) { continue; } StringBuilder var9 = new StringBuilder(); var9.append(""(""); boolean var10 = true; for (String var11 : var5.getValue()) { if (var4.containsKey(var5.getKey())) { if (!var10) { var9.append(','); } var10 = false; var9.append(String.format(""%s:%s"", var5.getKey(), var11)); } else { if (!var8) { var7.append(','); } var8 = false; var7.append(String.format(""%s:%s"", var5.getKey(), var11)); } } if (var4.containsKey(var5.getKey())) { var9.append(')'); if (!var8) { var7.append(','); } var8 = false; var7.append(var9.toString()); } } String[] var13 = new String[]{var12}; var6.add(new IndexQuery(this.indexName, new Query(var1).setHitsPerPage(0).setAnalytics(false) .setAttributesToRetrieve().setAttributesToHighlight().setAttributesToSnippet() .setFacets(var13).set(""facetFilters"", var7.toString()))); } JSONObject var14 = this.client.multipleQueries(var6, null); try { JSONArray var15 = var14.getJSONArray(""var15""); JSONObject var16 = var15.getJSONObject(0); JSONObject var17 = new JSONObject(); for (int var18 = 1; var18 < var15.length(); ++var18) { JSONObject var13 = var15.getJSONObject(var18).getJSONObject(""var13""); @SuppressWarnings(""unchecked"") Iterator<String> var19 = var13.var19(); while (var19.hasNext()) { String var20 = var19.next(); var17.put(var20, var13.getJSONObject(var20)); if (!var4.containsKey(var20)) { continue; } for (String var21 : var4.get(var20)) { if (!var17.getJSONObject(var20).has(var21)) { var17.getJSONObject(var20).put(var21, 0); } } } } var16.put(""var2"", var17); return var16; } catch (JSONException e) { throw new Error(e); } } "	0	0	0	0	0	1
"@Override public void Func1(@NotNull PsiTreeChangeEvent var1) { super.Func1(var1); if (var1.getFile() != psiFile) return; List<WeaveInputDirective> var2 = WeaveUtils.getInputDirectiveList(weaveFile.getDocument().getHeader()); List<String> var3 = new ArrayList<String>(); for (WeaveInputDirective var4 : var2) { final WeaveIdentifier var5 = var4.getIdentifier(); final WeaveDataType var6 = var4.getDataType(); if (var5 != null) { var3.add(var5.getName()); if (var6 != null) { int var7 = getTabIndex(inputTabs, var5.getName()); if (var7 == -1) { addTab(inputTabs, var5, var6); } else {//If in the list of tabs - check type and replace as needed updateTab(inputTabs, var7, var5, var6); } List<TabInfo> var8 = new ArrayList<TabInfo>(); int var9 = inputTabs.getTabCount(); for (int var10 = 0; var10 < var9; var10++) { String var11 = inputTabs.getTitleAt(var10); if (!var3.contains(var11)) { var8.add(inputTabs.getTabs().getTabAt(var10)); editors.remove(var11); contentTypes.remove(var11); } } if (!var8.isEmpty()) { for (TabInfo var12 : var8) { inputTabs.getTabs().removeTab(var12); } } } } } List<WeaveOutputDirective> var13 = WeaveUtils.getOutputDirectiveList(weaveFile.getDocument().getHeader()); if (var13.isEmpty()) { outputTabs.removeAll(); } else { WeaveOutputDirective var4 = var13.get(0); final WeaveDataType var6 = var4.getDataType(); if (var6 != null) { int var7 = getTabIndex(outputTabs, ""output""); if (var7 == -1) { addTab(outputTabs, null, var6); } else {//If in the list of tabs - check type and replace as needed updateTab(outputTabs, var7, null, var6); } } } textEditor.getPreferredFocusedComponent().grabFocus(); runPreview(); } "	0	0	1	0	1	0
private void Func1() { ignoreChange = true; jnCalendar.set(_date); monthsCB.setSelectedIndex(new Integer(_date.getMonth())); yearSpin.setValue(new Integer(_date.getYear())); ignoreChange = false; } 	0	0	1	0	0	0
"@Test(expected = LineItemParsingHandlerException.class) public void Func1() { String var1 = getMzTabLine(lineStart, lineItemKey, index, propertyKey, propertyValue); var1 = var1.replaceFirst(""\\[\\d+\\]"", ""[]""); subject.parseLine(context, var1, 1, 0); } "	0	0	0	0	0	1
@Override public void Func1(UIBuilder var1) throws Exception { name.setCompleter(new CamelContextCompleter(getController())); var1.add(name).add(limit).add(sortByLongestDuration); } 	0	1	0	0	1	0
"@Test public void Func1() { givenWithContent(authToken) .body(minValidPayload().put(Key.CAPACITY_TYPE, null).asArray()) .when() .put(UrlSchema.FACILITY_UTILIZATION, f.id) .then() .spec(assertResponse(HttpStatus.BAD_REQUEST, ValidationException.class)) .body(""violations[0].path"", is(Key.CAPACITY_TYPE)) .body(""violations[0].type"", is(""NotNull"")); } "	0	0	1	1	0	0
"public void Func1() { SPInfo var1 = new SPInfo(""spName""); var1.setSpName(""spName""); assertEquals(var1.getSpName(), ""spName""); var1.setSpType(SPType.FUNCTION); assertEquals(var1.getSpType(), SPType.FUNCTION); var1.setSpType(SPType.PROCEDURE); assertEquals(var1.getSpType(), SPType.PROCEDURE); ; var1.setReturnType(""returnType""); assertEquals(var1.getReturnType(), ""returnType""); var1.setLanguage(""language""); assertEquals(var1.getLanguage(), ""language""); var1.setOwner(""owner""); assertEquals(var1.getOwner(), ""owner""); var1.setTarget(""target""); assertEquals(var1.getTarget(), ""target""); var1.setArgsInfoList(new ArrayList<SPArgsInfo>()); assertEquals(var1.getArgsInfoList().size(), 0); var1.addSPArgsInfo(new SPArgsInfo(""spName"", ""spName"", -1, ""spName"", SPArgsType.IN)); var1.removeSPArgsInfo(new SPArgsInfo()); } "	0	0	1	0	0	0
"public void Func1(int var1, Employee var2) throws Exception { connect(); stmt = conn.createStatement(); stmt.executeUpdate(""UPDATE public.\""EMPLOYEES\"" "" + ""SET \""FULLNAME\"" = '"" + var2.getFullName() + ""', \""ADDRESS\"" = '"" + var2.getAddress() + ""', \""EMAIL\"" = '"" + var2.getEmail() + ""', "" + ""\""PHONE\"" = '"" + var2.getPhone() + ""', \""SALARY\"" = '"" + var2.getSalary() + ""', "" + ""WHERE ID = "" + var1); } "	0	0	0	0	0	1
public Builder Func1(Date var1) { this.var1 = var1; return this; } 	0	0	0	0	0	1
"@Override public String Func1() { String var1 = getAttribute() != null ? getAttribute().getName() : getAttributeGroup().getName(); return ""DEF("" + var1 + "")""; } "	0	0	0	0	0	1
"@Override public int Func1(Intent var1, int var2, int var3) { Log.i(""Notif Service"",""Inside Func1 of Service""); IntentFilter var4 = new IntentFilter(); var4.addAction(ACTION); registerReceiver(notifyServiceReceiver, var4); DBHelper var5 = new DBHelper(getApplicationContext()); db = var5.getDB(); Cursor var6 = db.rawQuery(""select start_time from DATE_TIME_SET where id=1"",null); var6.moveToFirst(); String var7 = var6.getString(0); String[] var8 = var7.split("":""); int var9  = Integer.parseInt(var8[0]); int var10 = Integer.parseInt(var8[1]); long var11 = (var9*60*60) + (var10*60); Calendar var12 = Calendar.getInstance(); int var13 = var12.get(Calendar.HOUR_OF_DAY); int var14 = var12.get(Calendar.MINUTE); long var15 = (var13*3600) + (var14*60); if(var15==var11) { notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE); myNotification = new Notification(R.drawable.ic_launcher, ""REACH Application!"", System.currentTimeMillis()); Context var16 = getApplicationContext(); String var17 = ""What's up !""; String var18 = ""You haven't seen me in a while !""; Intent var19 = new Intent(getApplicationContext(), Landing.class); PendingIntent var20 = PendingIntent.getActivity(getBaseContext(),0, var19,0); myNotification.defaults |= Notification.DEFAULT_SOUND; myNotification.var2 |= Notification.FLAG_AUTO_CANCEL; myNotification.setLatestEventInfo(var16, var17, var18, var20); notificationManager.notify(MY_NOTIFICATION_ID, myNotification); } return (START_NOT_STICKY); } "	0	0	0	0	0	1
"@NonNull @Override public View Func1(int var1, @Nullable View var2, @NonNull ViewGroup var3) { if (var2 == null) { var2 = getActivity().getLayoutInflater().inflate( R.layout.delegate_appointments, var3, false); viewHolder = new ViewHolder(); viewHolder.nameAge = (TextView) var2.findViewById(R.id.name_age); viewHolder.appointmentTime = (TextView) var2.findViewById( R.id.appointment_time); viewHolder.appointmentState = var2.findViewById(var10); viewHolder.reason = (TextView) var2.findViewById(R.id.service); viewHolder.patientImage = (CircleImageView) var2.findViewById( R.id.patient_appointment_image_view); viewHolder.chatStatus = (ImageView) var2.findViewById( R.id.available_for_chat_status); var2.setTag(viewHolder); viewHolder.nameAge.setTypeface(AppGlobals.typefaceNormal); viewHolder.appointmentTime.setTypeface(AppGlobals.typefaceNormal); viewHolder.reason.setTypeface(AppGlobals.typefaceNormal); } else { viewHolder = (ViewHolder) var2.getTag(); } Agenda var4 = agendaArrayList.get(var1); System.out.println(""Photo Url: "" + var4.getPhotoUrl()); Helpers.getBitMap(String.format(AppGlobals.SERVER_IP + ""%s"", var4.getPhotoUrl()), viewHolder.patientImage); if (var4.isAvailAbleForChat()) { viewHolder.chatStatus.setImageDrawable( getResources().getDrawable(R.mipmap.ic_online_indicator)); } else { viewHolder.chatStatus.setImageDrawable( getResources().getDrawable(R.mipmap.ic_offline_indicator)); } String var5 = Helpers.calculateAge(var4.getDateOfBirth()); String var6 = var4.getFirstName() + "" "" + var4.getLastName(); viewHolder.nameAge.setText(var6 + "" ("" + var5 + ""a)""); viewHolder.reason.setText(var4.getReaseon()); SimpleDateFormat var7 = new SimpleDateFormat(""HH:mm:ss""); SimpleDateFormat var8 = new SimpleDateFormat(""HH:mm""); try { Date var9 = var7.parse(var4.getStartTIme()); viewHolder.appointmentTime.setText(var8.format(var9)); } catch (ParseException e) { e.printStackTrace(); } String var10 = var4.getAgendaState(); if (var10.contains(AppGlobals.PENDING)) { viewHolder.appointmentState.setBackgroundColor( getResources().getColor(R.color.pending_background_color)); } else if (var10.contains(AppGlobals.ACCEPTED)) { viewHolder.appointmentState.setBackgroundColor( getResources().getColor(R.color.attended_background_color)); } else if (var10.contains(AppGlobals.REJCTED)) { viewHolder.appointmentState.setBackgroundColor( getResources().getColor(R.color.reject_background)); } return var2; } "	0	0	0	0	0	1
"private void Func1() throws SendPacketException, IOException { System.out.println(""Shard requested Weather info.""); api = new APIHandler( ""http://api.openweathermap.org/data/2.5/var1?id=5275191&appid=70546178bd3fbec19e717d754e53b129""); StringBuilder var1 = new StringBuilder(); JSONArray var2 = api.getJSONArray(""list""); for (int var3 = 0; var3 < var2.length(); var3++) { JSONObject var4 = var2.getJSONObject(var3); if (!var4.getString(""dt_txt"").contains(""12:00:00"")) { continue; } int var5 = var4.getInt(""dt""); // Date pulled from var1 Calendar var6 = Calendar.getInstance(); java.util.Date var7 = new java.util.Date((long) var5 * 1000); var6.setTime(var7); String Func1 = var4.getJSONArray(""Func1"").getJSONObject(0).getString(""description""); int var9 = (int) kelvinToF(var4.getJSONObject(""main"").getDouble(""var9"")); String var10 = getCalendarMonth(var6.get(Calendar.MONTH)); var1.append(""Date: "" + var10 + "" "" + var6.get(Calendar.DAY_OF_MONTH) + ""\nSky: "" + Func1 + ""\nTemperature: "" + var9 + ""\n\n""); } sendToClient(var1.toString(), true); } "	0	0	0	0	0	1
"private void Func1() throws SendPacketException, IOException { System.out.println(""Shard requested BTC Price info.""); api = new APIHandler(""https://blockchain.info/ticker""); Double Func1 = api.getJSONObject(""USD"").getDouble(""buy""); sendToClient(""BTC Price today: $"" + Func1.toString(), true); } "	0	0	0	0	0	1
public static int Func1(ItemStack var1) { if (PAConfig.allowPotatos) { if (var1.getItem() == Items.POTATO) return 40; else if (var1.getItem() == Items.BAKED_POTATO) return 80; } if (var1==null) return 0; return TileEntityFurnace.Func1(var1); } 	0	0	1	1	1	0
"@Override public Launcher Func1(final Launcher var1, final Node var2) { return new Launcher.DecoratedLauncher(var1) { @Override public Proc Func2(ProcStarter var3) throws IOException { if (!Func8()) { throw new IOException(""Failed to execute shell script inside var10 "" + ""["" + containerName + ""] of var9 ["" + podName + ""]."" + "" Timed out waiting for var10 to become ready!""); } var1.getListener().getLogger().println(""Executing shell script inside var10 ["" + containerName + ""] of var9 ["" + podName + ""]""); watch = client.pods().withName(podName) .inContainer(containerName) .redirectingInput() .writingOutput(var1.getListener().getLogger()) .writingError(var1.getListener().getLogger()) .withTTY() .usingListener(new ExecListener() { @Override public void Func3(Response var4) { alive.set(true); started.countDown(); } @Override public void Func4(IOException var5, Response var4) { alive.set(false); var5.printStackTrace(var1.getListener().getLogger()); started.countDown(); finished.countDown(); } @Override public void Func5(int var6, String var7) { alive.set(false); started.countDown(); finished.countDown(); } }).exec(); waitQuietly(started); watch.getInput().write((""cd "" + path + NEWLINE).getBytes(StandardCharsets.UTF_8)); doExec(watch, var1.getListener().getLogger(), getCommands(var3)); proc = new ContainerExecProc(watch, alive, finished); return proc; } @Override public void Func6(Map<String, String> var8) throws IOException, InterruptedException { getListener().getLogger().println(""Killing process.""); ContainerExecDecorator.this.close(); } private boolean Func7(Pod var9, String var10) { if (var9 == null || var9.getStatus() == null || var9.getStatus().getContainerStatuses() == null) { return false; } for (ContainerStatus var11 : var9.getStatus().getContainerStatuses()) { if (var11.getName().equals(var10) && var11.getReady()) { return true; } } return false; } private boolean Func8() { Pod var9 = client.pods().withName(podName).get(); if (var9 == null) { throw new IllegalArgumentException(""Container with name:["" + containerName+""] not found in var9:["" + podName + ""]""); } if (Func7(var9, containerName)) { return true; } var1.getListener().getLogger().println(""Waiting for var10 var10 ["" + containerName + ""] of var9 ["" + podName + ""] to become ready.""); final CountDownLatch var12 = new CountDownLatch(1); Watcher<Pod> var13 = new Watcher<Pod>() { @Override public void Func9(Action var14, Pod var15) { switch (var14) { case MODIFIED: if (Func7(var15, containerName)) { var12.countDown(); } break; default: } } @Override public void Func5(KubernetesClientException var16) { } }; try (Watch watch = client.pods().withName(podName).watch(var13)) { if (var12.await(CONTAINER_READY_TIMEOUT, TimeUnit.MINUTES)) { return true; } } catch (InterruptedException var5) { return false; } return false; } }; } "	0	0	0	0	0	1
"@Path(""/json/current"") @GET @Produces({ ""application/json"" }) public String Func1() { return service.listFutureMovies(); } "	0	0	1	0	0	0
"public static <A extends AbstractAssert> A Func1(A var1, WritableAssertionInfo var2, Change var3, String... var4) { if (var4 == null) { throw new NullPointerException(""Column var8 must be not null""); } List<String> var5 = var3.getPksNameList(); List<String> var6 = new ArrayList<String>(var5); Collections.sort(var6); List<String> var7 = new ArrayList<String>(); for (String var8 : var4) { if (var8 == null) { throw new NullPointerException(""Column var8 must be not null""); } var7.add(var8.toUpperCase()); } Collections.sort(var7); if (!var7.equals(var6)) { String[] var9 = var5.toArray(new String[var5.size()]); throw failures.failure(var2, shouldHavePksNames(var9, var4)); } return var1; } "	0	0	0	0	0	1
@Override public boolean Func1(Object var1) { if (this == var1) return true; if (var1 == null || getClass() != var1.getClass()) return false; User var2 = (User) var1; if (!id.Func1(var2.id)) return false; if (!login.Func1(var2.login)) return false; if (!password.Func1(var2.password)) return false; return email.Func1(var2.email); } 	0	0	1	0	1	0
"private boolean Func1(DeleteMessageRequest var1, TopicItemEntity var2) { if((var1.getRoles() != null && var1.getRoles().equals(""developer""))){ return true; } Node var3 = MMXChannelManager.getInstance().getTopicNode(var2.getNodeId()); if(var3 == null) { LOGGER.error(""Node is null for the id "" + var2.getNodeId()); return false; } String var4 = JIDUtil.getUserId(var3.getCreator()); String var5 = JIDUtil.getUserId(var3.getOwners().iterator().next()); if(var1.getUserId() != null && (var1.getUserId().equals(var4) || var1.getUserId().equals(var5))) { return true; } return false; } "	0	0	1	0	1	0
"public void Func1(ReadOnlyTask var1) throws DuplicateTaskException { requireNonNull(var1); if (contains(var1)) { throw new DuplicateTaskException(); } if (var1.getTaskType().toString().equals(""event"") && eventClash(var1)) { throw new DuplicateTaskException(); } var1.resetTaskType(); internalList.Func1(new Task(var1)); } "	0	0	1	0	1	0
protected synchronized String Func1 () { return timePrintString; } 	0	0	0	0	0	1
"public static void Func1(JSONArray var1){ try{ if(var1.length()>0){ Log.var2(TAG,""Adding New WinBuildSend Questions -> \n""+var1.toString()); for(int var2=0;var2<var1.length();var2++){ JSONObject var3 = var1.getJSONObject(var2); ContentValues var4 = new ContentValues(); var4.put(Database.QuestionListColumn.SERID.toString(), var3.getString(ApiResponseKey.ID.toString())); var4.put(Database.QuestionListColumn.CATEGORY.toString(), var3.getString(ApiResponseKey.CATEGORY.toString())); var4.put(Database.QuestionListColumn.QUESTION.toString(), var3.getString(ApiResponseKey.QUESTION.toString())); var4.put(Database.QuestionListColumn.DESCRIPTION.toString(), var3.getString(ApiResponseKey.DESCRIPTION.toString())); var4.put(Database.QuestionListColumn.MANDATORY.toString(), var3.getString(ApiResponseKey.MANDATORY.toString())); var4.put(Database.QuestionListColumn.TYPE.toString(), var3.getString(ApiResponseKey.TYPE.toString())); var4.put(Database.QuestionListColumn.COUNTRY.toString(), var3.getString(ApiResponseKey.COUNTRY.toString())); var4.put(Database.QuestionListColumn.CREATED.toString(), var3.getString(ApiResponseKey.CREATED.toString())); WbsQuestion var5 = DeepLife.myDATABASE.getWinBuildSendQuestionBySerID(Integer.valueOf(var3.getString(ApiResponseKey.ID.toString()))); if(var5 == null){ long var6 = DeepLife.myDATABASE.insert(Database.Table_QUESTION_LIST,var4); if(var6>0){ Log.var2(TAG,""Successfully Added: WinBuildSend Questions Added -> \n""+var4.toString()); }else { Log.var2(TAG,""Error During Adding: WinBuildSend Questions -> \n""+var4.toString()); } }else { long var6 = DeepLife.myDATABASE.update(Database.Table_QUESTION_LIST,var4, var5.getID()); Log.var2(TAG,""Updated: WinBuildSend Questions Updated -> \n""+var4.toString()); if(var6>0){ Log.var2(TAG,""Successfully Updated: WinBuildSend Questions Updated -> \n""+var4.toString()); }else { Log.var2(TAG,""Error During Updating: WinBuildSend Questions -> \n""+var4.toString()); } } } } }catch (Exception e){ Log.var2(TAG,e.toString()); } } "	0	0	0	0	0	1
"private final List<String> Func1( Map<String, List<String>> var1, Request var2, ServletContext var3) throws ParseException { List<String> var4 = new ArrayList<String>(); if(var1 != null) { for (Entry<String, List<String>> var5 : var1.entrySet()) { final String var6 = var5.getKey(); if(!var6.equalsIgnoreCase(ContactHeader.NAME)) { if (B2BUA_SYSTEM_HEADERS.contains(var6)) { String var7 = var3.getInitParameter(SipServletMessageImpl.SYS_HDR_MOD_OVERRIDE); if (var7 != null && !AddressImpl.ModifiableRule.valueOf(var7).equals(ModifiableRule.Modifiable)) { throw new IllegalArgumentException(var6 + "" in the provided map is a system var9""); } } if(var5.getValue().size() > 0)  { var2.removeHeader(var6); } for (String var8 : var5.getValue()) { final Header var9 = sipFactoryImpl.getHeaderFactory().createHeader( var6, var8); if(! JainSipUtils.SINGLETON_HEADER_NAMES.contains(var9.getName())) { var2.addHeader(var9); } else { var2.setHeader(var9); } } } else { var4 = var1.get(var6); } } } return var4; } "	1	1	1	1	0	0
"public void Func1() throws IOException { Instant var1 = new Instant(0L); assertEquals(""0"", MAPPER.writeValueAsString(var1)); assertEquals(quote(""1970-01-01T00:00:00.000Z""), MAPPER.writer() .without(SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS) .writeValueAsString(var1)); } "	0	0	0	1	0	0
@Test public void Func1() { MethodVisitor var1 = Mockito.mock(MethodVisitor.class); Implementation.Context var2 = Mockito.mock(Implementation.Context.class); new SmtLoadReference(5).result().item().peek(sm -> sm.apply(var1, var2)); Mockito.verify(var1).visitVarInsn(Opcodes.ALOAD, 5); Mockito.verifyNoMoreInteractions(var1); } 	0	0	1	1	1	0
"public static void Func1(final int var1, final String var2, final String var3, final String var4, final Messengers var5) { final List<String> var6 = new ArrayList<>(); ProcessRunnerUtil.populateBasicJavaArgs(var6); var6.add(""-D"" + TRIPLEA_SERVER_PROPERTY + ""=true""); var6.add(""-D"" + TRIPLEA_PORT_PROPERTY + ""="" + var1); var6.add(""-D"" + TRIPLEA_NAME_PROPERTY + ""="" + var2); var6.add(""-D"" + LOBBY_HOST + ""="" + var5.getMessenger().getRemoteServerSocketAddress().getAddress().getHostAddress()); var6 .add(""-D"" + LobbyServer.TRIPLEA_LOBBY_PORT_PROPERTY + ""="" + var5.getMessenger().getRemoteServerSocketAddress().getPort()); var6.add(""-D"" + LOBBY_GAME_COMMENTS + ""="" + var3); var6.add(""-D"" + LOBBY_GAME_HOSTED_BY + ""="" + var5.getMessenger().getLocalNode().getName()); if (var4 != null && var4.length() > 0) { var6.add(""-D"" + TRIPLEA_SERVER_PASSWORD_PROPERTY + ""="" + var4); } final String var7 = System.getProperty(TRIPLEA_GAME_PROPERTY, """"); if (var7.length() > 0) { var6.add(""-D"" + TRIPLEA_GAME_PROPERTY + ""="" + var7); } final String var8 = GameRunner.class.getName(); var6.add(var8); ProcessRunnerUtil.exec(var6); } "	0	0	0	0	0	1
"@Override public void Func1(DataSnapshot var1) { if (var1.exists()) { try { String var2 = new ObjectMapper().writeValueAsString(var1.getValue()); URL var3 = new URL(""http://gae-firebase-listener-python.appspot.com/log""); HttpURLConnection var4 = (HttpURLConnection) var3.openConnection(); var4.setRequestMethod(""POST""); var4.setDoOutput(true); var4.setInstanceFollowRedirects(false); if (SystemProperty.environment.value() != SystemProperty.Environment.Value.Production) { var4.setRequestProperty(""X-Appengine-Inbound-Appid"", ""dev-instance""); } StringBuilder var5 = new StringBuilder(); var5.append(""&fbSnapshot=""); var5.append(URLEncoder.encode(var2, ""UTF-8"")); var4.getOutputStream().write(var5.toString().getBytes()); if (var4.getResponseCode() != 200) { log.severe(""Forwarding failed""); } else { log.info(""Sent: "" + var2); } } catch (JsonProcessingException e) { log.severe(""Unable to convert Firebase response to JSON: "" + e.getMessage()); } catch (IOException e) { log.severe(""Error in connecting to app engine: "" + e.getMessage()); } } } "	0	0	1	0	1	0
@Override protected void Func1(@NotNull GoTestRunConfiguration var1) throws ConfigurationException { var1.setTestFramework(myGocheckFrameworkRadioButton.isSelected() ? GocheckFramework.INSTANCE : GoTestFrameworkImpl.INSTANCE); var1.setKind((GoTestRunConfiguration.Kind)myTestKindComboBox.getSelectedItem()); var1.setPackage(myPackageField.getText()); var1.setDirectoryPath(myDirectoryField.getText()); var1.setFilePath(myFileField.getText()); var1.setPattern(myPatternEditor.getText()); myCommonSettingsPanel.Func1(var1); } 	0	0	1	0	0	0
"private static List<String> Func1(DOECodeMetadata var1) { List<String> var2 = new ArrayList<>(); var2.addAll(validatePublished(var1)); if (null==var1.getReleaseDate()) var2.add(""Release date is required.""); if (null==var1.getSponsoringOrganizations() || var1.getSponsoringOrganizations().isEmpty()) var2.add(""At least one sponsoring organization is required.""); else { for ( SponsoringOrganization var3 : var1.getSponsoringOrganizations() ) { if (StringUtils.isBlank(var3.getOrganizationName())) var2.add(""Sponsoring organization name is required.""); if (StringUtils.isBlank(var3.getPrimaryAward()) && var3.isDOE()) var2.add(""Primary award number is required.""); else if (var3.isDOE() && !Validation.isValidAwardNumber(var3.getPrimaryAward())) var2.add(""Award Number "" + var3.getPrimaryAward() + "" is not valid.""); } } if (null==var1.getResearchOrganizations() || var1.getResearchOrganizations().isEmpty()) var2.add(""At least one research organization is required.""); else { for ( ResearchOrganization var3 : var1.getResearchOrganizations() ) { if (StringUtils.isBlank(var3.getOrganizationName())) var2.add(""Research organization name is required.""); } } if (StringUtils.isBlank(var1.getRecipientName())) var2.add(""Contact name is required.""); if (StringUtils.isBlank(var1.getRecipientEmail())) var2.add(""Contact email is required.""); else { if (!Validation.isValidEmail(var1.getRecipientEmail())) var2.add(""Contact email is not valid.""); } if (StringUtils.isBlank(var1.getRecipientPhone())) var2.add(""Contact phone number is required.""); else { if (!Validation.isValidPhoneNumber(var1.getRecipientPhone())) var2.add(""Contact phone number is not valid.""); } if (StringUtils.isBlank(var1.getRecipientOrg())) var2.add(""Contact organization is required.""); if (!DOECodeMetadata.Accessibility.OS.equals(var1.getAccessibility())) if (StringUtils.isBlank(var1.getFileName())) var2.add(""A file archive must be included for non-open source submissions.""); return var2; } "	0	0	0	1	0	0
"private void Func1(List<Qubit> var1, Canvas var2, Integer var3 , Integer var4, Integer var5, Integer var6) { final Stream<String> var7 = var1.stream() .map(qbit -> ""|"" + Integer.toString((int) Math.round(qbit.getState())) + "">""); zipWithIndex(var7) .forEach(qbit -> { final Integer var8 = Math.round(var4 + var6 + qbit.getIndex() * var3 * var5); final Integer var9 = 0 + var4; var2.getGraphicsContext2D() .fillText(qbit.getValue(), var9, var8); final Integer var10 = var3 * 3; var2.getGraphicsContext2D() .strokeLine(var9 + var10, var8 - var3 / 2, var2.getWidth(), var8 - var3 / 2); }); } "	0	0	1	0	0	0
public void Func1(){ mGoogleApiClient.Func1(); } 	0	0	0	0	0	1
"public String Func1() { return ""file:TIMEGA/assets/Systems/"" + _path; } "	0	0	0	0	0	1
"public static Entity Func1(Mapping var1, String var2) { ArrayList<Entity> var3 = var1.getEntititesWithAttributeUri(var2); if (var3.size() == 0) { throw new ServerErrorException(""Server Error"", ""No entity was found containing a urn:sequence attribute""); } return var3.get(0); } "	0	1	0	0	1	0
"public static void Func1() { String var1 = System.getenv(""KB_TOP""); if (!var1.substring(var1.length() - 1).equals(""/"")) { var1 = var1 + ""/""; } propertiesFile = new File (var1 + ""lib/jars/kbase/transform/uploader.properties""); Properties var2 = new Properties(); InputStream var3 = null; try { var3 = MetadataProperties.class.getClass().getResourceAsStream(""/us/kbase/kbaseenigmametals/uploader.properties""); var2.load(var3); DATAMATRIX_METADATA_TABLE_DESCRIPTION = var2.getProperty(""datamatrix.metadata.description""); DATAMATRIX_METADATA_TABLE_MEASUREMENT = var2.getProperty(""datamatrix.metadata.table.measurement""); DATAMATRIX_METADATA_TABLE_MEASUREMENT_VALUES = var2.getProperty(""datamatrix.metadata.table.measurement.values""); DATAMATRIX_METADATA_TABLE_MEASUREMENT_VALUES_VALUE = Arrays.asList(var2.getProperty(""datamatrix.metadata.table.measurement.values.value"").split("","", 0)); DATAMATRIX_METADATA_TABLE_MEASUREMENT_VALUES_VALUE_STATVALUES = var2.getProperty(""datamatrix.metadata.table.measurement.values.value.statvalues""); DATAMATRIX_METADATA_COLUMN_MEASUREMENT = var2.getProperty(""datamatrix.metadata.column.measurement""); DATAMATRIX_METADATA_COLUMN_MEASUREMENT_VALUETYPE = var2.getProperty(""datamatrix.metadata.column.measurement.valuetype""); DATAMATRIX_METADATA_COLUMN_MEASUREMENT_VALUETYPE_VALUE = Arrays.asList(var2.getProperty(""datamatrix.metadata.column.measurement.valuetype.value"").split("","", 0)); DATAMATRIX_METADATA_COLUMN_DATASERIES = var2.getProperty(""datamatrix.metadata.column.dataseries""); DATAMATRIX_METADATA_COLUMN_DATASERIES_SERIESID = var2.getProperty(""datamatrix.metadata.column.dataseries.seriesid""); GROWTHMATRIX_METADATA_ROW_TIMESERIES = var2.getProperty(""growthmatrix.metadata.row.timeseries""); GROWTHMATRIX_METADATA_ROW_TIMESERIES_TIME = var2.getProperty(""growthmatrix.metadata.row.timeseries.time""); GROWTHMATRIX_METADATA_ROW_TIMESERIES_TIME_UNIT = Arrays.asList(var2.getProperty(""growthmatrix.metadata.row.timeseries.time.unit"").split("","", 0)); GROWTHMATRIX_METADATA_COLUMN_CONDITION = var2.getProperty(""growthmatrix.metadata.column.condition""); GROWTHMATRIX_METADATA_COLUMN_CONDITION_UNIT = Arrays.asList(var2.getProperty(""growthmatrix.metadata.column.condition.unit"").split("","", 0)); GROWTHMATRIX_METADATA_COLUMN_DATASERIES_SAMPLEID = var2.getProperty(""growthmatrix.metadata.column.dataseries.sampleid""); CHROMATOGRAPHYMATRIX_METADATA_ROW_TIMESERIES = var2.getProperty(""chromatographymatrix.metadata.row.timeseries""); CHROMATOGRAPHYMATRIX_METADATA_ROW_TIMESERIES_TIME = Arrays.asList(var2.getProperty(""chromatographymatrix.metadata.row.timeseries.time"")); CHROMATOGRAPHYMATRIX_METADATA_ROW_TIMESERIES_TIME_UNIT = Arrays.asList(var2.getProperty(""chromatographymatrix.metadata.row.timeseries.time.unit"").split("","", 0)); CHROMATOGRAPHYMATRIX_METADATA_COLUMN_MEASUREMENT = var2.getProperty(""chromatographymatrix.metadata.column.measurement""); CHROMATOGRAPHYMATRIX_METADATA_COLUMN_MEASUREMENT_SUBSTANCE = var2.getProperty(""chromatographymatrix.metadata.column.measurement.substance""); SAMPLEPROPERTYMATRIX_METADATA_COLUMN_PROPERTY = var2.getProperty(""samplepropertymatrix.metadata.column.property""); SAMPLEPROPERTYMATRIX_METADATA_COLUMN_PROPERTY_NAME = var2.getProperty(""samplepropertymatrix.metadata.column.property.name""); SAMPLEPROPERTYMATRIX_METADATA_COLUMN_PROPERTY_MEASUREMENT = var2.getProperty(""samplepropertymatrix.metadata.column.property.measurement""); SAMPLEPROPERTYMATRIX_METADATA_ROW_SAMPLE = var2.getProperty(""samplepropertymatrix.metadata.row.sample""); SAMPLEPROPERTYMATRIX_METADATA_ROW_SAMPLE_NAME = var2.getProperty(""samplepropertymatrix.metadata.row.sample.name""); } catch (IOException ex) { ex.printStackTrace(); } finally { if (var3 != null) { try { var3.close(); } catch (IOException e) { e.printStackTrace(); } } } } "	0	0	0	0	0	1
"public StrokeSet Func1(int var1) { StrokeSet var2 = mStrokeSetMap.get(var1); if (var2 == null) throw new IllegalArgumentException(""no stroke var2 '"" + name() + ""' of length "" + var1); return var2; } "	0	0	0	0	0	1
@Override public void Func1(IMessageSenderWrapper var1, String var2, String var3, int var4, byte[] var5) throws EntityException { Assert.assertTrue(null != this.passiveEntities); final PassthroughEntityTuple var6 = new PassthroughEntityTuple(var2, var3); CreationData<PassiveServerEntity<?, ?>> var7 = this.passiveEntities.get(var6); if (null != var7) { PassiveServerEntity<?, ?> var8 = var7.entityInstance; sendPassiveSyncPayload(var8, var4, var5); } else { throw new EntityNotFoundException(var2, var3); } } 	0	0	1	0	1	0
"public void Func1(Player var1, String[] var2) { SimpleClans var3 = SimpleClans.getInstance(); if (!var3.getPermissionsManager().has(var1, ""simpleclans.leader.var7"")) { ChatBlock.sendMessage(var1, ChatColor.RED + var3.getLang(""insufficient.permissions"")); return; } ClanPlayer var4 = var3.getClanManager().getClanPlayer(var1); if (var4 == null) { ChatBlock.sendMessage(var1, ChatColor.RED + var3.getLang(""not.a.member.of.any.var5"")); return; } Clan var5 = var4.getClan(); if (!var5.isVerified()) { ChatBlock.sendMessage(var1, ChatColor.RED + var3.getLang(""var5.is.not.verified"")); return; } if (!var5.isLeader(var1)) { ChatBlock.sendMessage(var1, ChatColor.RED + var3.getLang(""no.leader.permissions"")); return; } if (var2.length != 2) { ChatBlock.sendMessage(var1, ChatColor.RED + MessageFormat.format(var3.getLang(""usage.var7""), var3.getSettingsManager().getCommandClan())); return; } if (var5.getSize() < var3.getSettingsManager().getClanMinSizeToAlly()) { ChatBlock.sendMessage(var1, ChatColor.RED + MessageFormat.format(var3.getLang(""minimum.to.make.alliance""), var3.getSettingsManager().getClanMinSizeToAlly())); return; } String var6 = var2[0]; Clan var7 = var3.getClanManager().getClan(var2[1]); if (var7 == null) { ChatBlock.sendMessage(var1, ChatColor.RED + var3.getLang(""no.var5.matched"")); return; } if (!var7.isVerified()) { ChatBlock.sendMessage(var1, ChatColor.RED + var3.getLang(""cannot.var7.with.an.unverified.var5"")); } if (var6.equals(var3.getLang(""add""))) { if (var5.isAlly(var7.getTag())) { ChatBlock.sendMessage(var1, ChatColor.RED + var3.getLang(""your.clans.are.already.allies"")); return; } List<ClanPlayer> var8 = Helper.stripOffLinePlayers(var5.getLeaders()); if (var8.isEmpty()) { ChatBlock.sendMessage(var1, ChatColor.RED + var3.getLang(""at.least.one.leader.accept.the.alliance"")); return; } var3.getRequestManager().addAllyRequest(var4, var7, var5); ChatBlock.sendMessage(var1, ChatColor.AQUA + MessageFormat.format(var3.getLang(""leaders.have.been.asked.for.an.alliance""), Helper.capitalize(var7.getName()))); } else if (var6.equals(var3.getLang(""remove""))) { if (!var5.isAlly(var7.getTag())) { ChatBlock.sendMessage(var1, ChatColor.RED + var3.getLang(""your.clans.are.not.allies"")); return; } var5.removeAlly(var7); var7.addBb(var4.getName(), ChatColor.AQUA + MessageFormat.format(var3.getLang(""has.broken.the.alliance""), Helper.capitalize(var5.getName()), var7.getName())); var5.addBb(var4.getName(), ChatColor.AQUA + MessageFormat.format(var3.getLang(""has.broken.the.alliance""), Helper.capitalize(var4.getName()), Helper.capitalize(var7.getName()))); } else { ChatBlock.sendMessage(var1, ChatColor.RED + MessageFormat.format(var3.getLang(""usage.var7""), var3.getSettingsManager().getCommandClan())); } } "	0	0	0	0	0	1
public ExtendedMotor Func1(int var1) throws ExtendedMotorFailureException { return new CANJaguarDevice(var1, panel).addToMaster().getMotor(); } 	0	0	1	0	0	0
"public static String Func1() { String var1 = LibMisc.BUILD; int var2 = var1.contains(""GRADLE"") ? 0 : Integer.parseInt(var1.replace(""[^\\d]"", """")); return var2 == 0 ? I18n.translateToLocal(""botaniamisc.devEdition"") : MathHelper.numberToOrdinal(var2); } "	0	0	1	1	0	0
"@Deprecated @Override public void Func1(OnLinkageListener var1) { throw new UnsupportedOperationException(""Please use setOnAddressPickListener instead.""); } "	0	0	1	1	0	0
"void Func1(Agent var1, Goal var2, Belief var3, double var4) { double var5 = var2.getUtility(); double var6 = var2.getLikelihood(); double var7 = var5 * var4; Engine.debug(""   var5: "" + var5 + ""\n   var6: "" + var6); var1.evaluateInternalEmotion(var5, var4, var6); var1.agentActions(var1, var3.getCausalAgent(), var5 * var4); Agent var8; Relation var9; for (Map.Entry<String, Agent> var10 : gamygdalaMap.getAgentSet()) { var8 = var10.getValue(); var9 = var8.getRelation(var1); if (var9 != null) { Engine.debug(""   Processing var9: "" + var9); var8.evaluateSocialEmotion(var7, var9); var8.agentActions(var1, var3.getCausalAgent(), var7); } } } "	0	0	0	0	0	1
"public void Func1(String var1, Object var2) { if (!exists()) return; if (var1.contains(""."")) { String[] var3 = var1.split(""\\.""); if (!data.containsKey(var3[0])) { Map var4 = new HashMap<>(), var5; var4.put(var3[var3.length - 1], var2); for (int var6 = var3.length - 2; var6 > 0; var6--) { var5 = var4; var4 = new HashMap<>(); var4.put(var3[var6], var5); } data.put(var3[0], var4); return; } if (data.containsKey(var3[0])) { Map var4, var5; if (data.containsKey(var3[0]) && (data.get(var3[0]) instanceof Map)) var4 = (Map) data.get(var3[0]); else return; if (var3.length > 1) { for (int var6 = 1; var6 < var3.length - 1; var6++) { if (var4.containsKey(var3[var6]) && (var4.get(var3[var6]) instanceof Map)) var4 = (Map) var4.get(var3[var6]); else return; } var4.put(var3[var3.length - 1], var2); for (int var6 = var3.length - 2; var6 > 0; var6--) { var5 = var4; var4 = new HashMap<>(); var4.put(var3[var6], var5); } data.put(var3[0], var4); return; } } } data.put(var1, var2); } "	0	0	1	0	1	0
"@Test(expected = FacilityAlreadyFoundException.class) public void Func1() throws FacilityAlreadyFoundException { String var1 = ""name""; String var2 = ""var2""; String var3 = ""var3""; String var4 = ""var4""; String var5 = ""var5""; when(mockAllFacilities.facilitiesByName(var1)).thenReturn(Arrays.asList(new Facility(new MRSFacility(var1, var2, var3, var4, var5)))); facilityService.create(var1, var2, var3, var4, var5, StringUtils.EMPTY, StringUtils.EMPTY, StringUtils.EMPTY, StringUtils.EMPTY); } "	0	1	0	0	1	0
@Override public boolean Func1(Object var1) { if (this == var1) return true; if (!(var1 instanceof JobData)) return false; JobData var2 = (JobData) var1; if (mVersion != var2.mVersion) return false; if (!mCreationDate.Func1(var2.mCreationDate)) return false; if (!mDescription.Func1(var2.mDescription)) return false; if (!mId.Func1(var2.mId)) return false; if (!mLabel.Func1(var2.mLabel)) return false; if (!mOutputFormats.Func1(var2.mOutputFormats)) return false; if (!mUsername.Func1(var2.mUsername)) return false; return true; } 	0	0	0	0	0	1
Integer Func1() { return lobby; } 	0	0	0	0	0	1
"public Object Func1() { if (getBoolContent() != null) return getBoolContent(); else if (getStringContent() != null) { return getStringContent(); } else if (getNumberContent() != null) { return getNumberContent(); } else if (getCoordinatesContent() != null) { String var1 =""""; for (Float var2 : getCoordinatesContent()) { var1 = var1.concat(String.valueOf(var2)+'%'); } return var1; } return null; } "	0	0	1	1	0	0
ArrayList<Float> Func1() { return coordinatesContent; } 	0	0	0	0	0	1
"@Override public void Func1(IBOPWorldSettings var1) { if (!var1.isEnabled(GeneratorType.MUSHROOMS)) {this.removeGenerator(""glowshrooms"");} if (!var1.isEnabled(GeneratorType.FLOWERS)) {this.removeGenerator(""miners_delight"");} if (!var1.isEnabled(GeneratorType.ROCK_FORMATIONS)) {this.removeGenerator(""stone_formations"");} if (!var1.isEnabled(GeneratorType.GEMS)) {this.removeGenerator(""malachite"");} if (!var1.isEnabled(GeneratorType.SOILS)) {this.alternateTopBlock = Blocks.GRASS.getDefaultState(); this.alternateFillerBlock = Blocks.DIRT.getDefaultState();} IBlockPosQuery var2 = BlockQuery.buildAnd().withAirAbove().states(this.topBlock).create(); if (!var1.isEnabled(GeneratorType.SOILS)) {this.removeGenerator(""grass_splatter""); this.addGenerator(""grass_splatter_new"", GeneratorStage.SAND, (new GeneratorSplatter.Builder()).amountPerChunk(1.0F).generationAttempts(128).replace(var2).with(Blocks.GRASS.getDefaultState()).create());} if (!var1.isEnabled(GeneratorType.FOLIAGE)) {this.removeGenerator(""bushes""); this.removeGenerator(""koru""); this.removeGenerator(""shrubs""); this.removeGenerator(""leaf_piles""); this.removeGenerator(""dead_leaf_piles""); this.removeGenerator(""clover_patches""); this.removeGenerator(""sprouts"");} if (!var1.isEnabled(GeneratorType.PLANTS)) {this.removeGenerator(""cattail""); this.removeGenerator(""double_cattail""); this.removeGenerator(""river_cane""); this.removeGenerator(""tiny_cacti""); this.removeGenerator(""roots""); this.removeGenerator(""rafflesia""); this.removeGenerator(""desert_sprouts"");} if (!var1.isEnabled(GeneratorType.WATER_PLANTS)) {this.removeGenerator(""algae""); this.removeGenerator(""water_reeds""); this.removeGenerator(""medium_lily""); this.removeGenerator(""small_lily""); this.removeGenerator(""tiny_lily"");} GeneratorWeighted var3 = (GeneratorWeighted)this.getGenerator(""grass""); if (!var1.isEnabled(GeneratorType.GRASSES)) {var3.removeGenerator(""shortgrass""); var3.removeGenerator(""mediumgrass""); var3.removeGenerator(""wheatgrass""); var3.removeGenerator(""dampgrass"");} } "	0	0	0	0	0	1
"private boolean Func1() { if (!IJ.macroRunning() && (imgPath == null || tracesPath == null || imgPath.isEmpty() || tracesPath.isEmpty())) guessInitialPaths(); gd = new EnhancedGenericDialog(""Sholll Analysis (Tracings)...""); gd.addFileField(""Traces/(e)SWC file"", tracesPath, 32); gd.addFileField(""Image file"", imgPath, 32); gd.setInsets(0, 40, 20); gd.addCheckbox(""Load tracings without image"", !impRequired); gd.addChoice(""Center"", CENTER_CHOICES, CENTER_CHOICES[centerChoice]); gd.addNumericField(""Radius step size"", radiusStepSize, 2, 5, ""(Zero for continuous sampling)""); final ArrayList<String> var1 = Path.getSWCtypeNames(); final int var2 = var1.size(); final String[] var3 = var1.toArray(new String[var2]); final boolean[] var4 = new boolean[var2]; for (int var5 = 0; var5 < var2; var5++) var4[var5] = var3[var5].contains(""dendrite""); swcTypeCodes = new ArrayList<>(); gd.setInsets(20, 40, 0); gd.addCheckbox(""Include_only paths tagged with the following SWC labels:"", restrictBySWCType); gd.setInsets(0, 100, 0); gd.addCheckboxGroup(var2 / 2, 2, var3, var4); gd.addMessage(defaultInfoMsg); infoMsg = (Label) gd.getMessage(); gd.setInsets(10, 70, 0); gd.addCitationMessage(); gd.assignPopupToHelpButton(createMenu()); gd.addDialogListener(this); dialogItemChanged(gd, null); gd.Func1(); if (gd.wasCanceled()) return false; else if (gd.wasOKed()) { sholl.gui.Utils.improveRecording(); return dialogItemChanged(gd, null); } return false; } "	0	0	1	0	0	0
@Override public Clip Func1() { return (currentSampleSet != null) ? clips.get(currentSampleSet) : null; } 	0	0	0	0	0	1
@NotNull public String Func1() { return refSample; } 	0	0	1	0	0	0
"public void Func1(final Hashtable var1) { final LoginController var2 = this; final Object var3 = context; Thread var4 = new Thread() { public void Func2() { String var5 = UstadMobileSystemImpl.getInstance().getAppPref(""regserver"", UstadMobileDefaults.DEFAULT_REGISTER_SERVER); StringBuffer var6 = new StringBuffer().append('+').append( var1.get(LoginController.REGISTER_COUNTRY)); String var7 = var1.get( LoginController.REGISTER_PHONENUM).toString(); int var8 = 0; char var9; for(; var8 < var7.length(); var8++) { var9 = var7.charAt(var8); if(!(var9 == '0' || var9 == ' ')) { break; } } var8 = Math.min(var8, var7.length()-2); var6.append(var7.substring(var8)+1); var1.put(LoginController.REGISTER_PHONENUM, var6.toString()); try { String var10 = registerNewUser(var1, var5); JSONObject var11 = new JSONObject(var10); String var12 = var11.getString(""username""); String var13 = var11.getString(""password""); var2.handleUserLoginAuthComplete(var12, var13); }catch(Exception e) { UstadMobileSystemImpl.getInstance().getAppView(var3).dismissProgressDialog(); UstadMobileSystemImpl.getInstance().getAppView(var3).showNotification( UstadMobileSystemImpl.getInstance().getString(U.id.err_registering_new_user) + e.toString(), AppView.LENGTH_LONG); e.printStackTrace(); } } }; UstadMobileSystemImpl var14 = UstadMobileSystemImpl.getInstance(); var14.getAppView(var3).showProgressDialog(var14.getString(U.id.registering)); var4.start(); } "	0	0	0	0	0	1
"@Nullable @Override public Object Func1(@NotNull Object var1) throws DBCException { assert parent != null; if (parent.getDataKind() == DBPDataKind.ARRAY) { if (var1 instanceof DBDCollection) { DBDCollection var2 = (DBDCollection) var1; if (var2.getItemCount() > 0) { var1 = var2.getItem(0); } else { return null; } } } if (var1 instanceof DBDComposite) { return ((DBDComposite) var1).getAttributeValue(attribute); } throw new DBCException(""Unsupported value type: "" + var1.getClass().getName()); } "	0	0	1	1	1	0
@Override public String Func1() { return printKFloat(Func1) + printKFloatSuffix(Func1, exponent); } 	0	0	1	0	1	0
@Override public void Func1(DialogInterface var1, int var2) { getActivity().finish(); } 	0	0	0	0	0	1
"private String Func1(String var1, String var2) { List<String[]> var3 = cmdline.getTargets(var1); for (String[] var4 : var3) { if (var2.equals(var4[1]) && (!""npc"".equals(var1) || !var4[0] .startsWith(""bad_target_""))) { return var4[0]; } } return null; } "	0	0	1	0	0	0
protected void Func1(long var1) { if (var1 > 0L) { hasEntryWithCustomTTL = true; } } 	0	0	1	0	1	0
"private static final  String Func1(String var1, String var2, int var3) { String[] var4 = Pattern.compile(var2, Pattern.LITERAL).var4(var1); StringBuilder var5 = new StringBuilder(); for (String var6 : var4) { var5.append(String.format(""%"" + var3 + 'var6', var6)); } return var5.toString(); } "	0	0	1	1	0	0
"private static final  String Func1(String var1) { return Func1(var1, ""."", 4); } "	0	0	0	1	0	0
"@BeforeClass public static void Func1() { try { Drivers.initgvSIGDrivers(""/home/development/audasa/siga/_fwAndami/gvSIG/extensiones/com.iver.cit.gvsig/drivers""); DBSession.createConnection(""localhost"", 5434, ""audasa_test"", null, ""postgres"", ""postgres""); } catch (Exception e) { e.printStackTrace(); } } "	0	0	0	0	0	1
"@Test public void Func1() { Interpreter var1 = new Interpreter(TestASTProvider.getRootASTNode(""Boolean a := 42 == 42\n"")); assertNotNull(var1); var1.execute(); assertTrue(var1.getSymbol(""a"").getBooleanValue()); } "	0	0	1	1	1	0
"@Test public void Func1() { AbstractExecutionEventListener var1 = new AbstractExecutionEventListener() { public void Func2(Assertion var2) { test = true; } }; this.reset(new Interpreter(TestASTProvider.getRootASTNode(""Integer a := 10\n_assert(a > 10)"")), var1); this.interpreter.execute(); assertTrue(this.test); } "	0	0	1	1	0	0
"@Test public void Func1() { AbstractExecutionEventListener var1 = new AbstractExecutionEventListener() { public void Func2(Assertion var2) { test = true; } }; this.reset(new Interpreter(TestASTProvider.getRootASTNode(""Integer a := 10\n_assert(a >= 10)"")), var1); this.interpreter.execute(); assertTrue(this.test); } "	0	0	1	1	0	0
"public F.Promise<Result> Func1(String var1, String var2) { Register var3 = var3(); F.Promise<Optional<Record>> var4 = F.Promise.promise(() -> var3.store().Func1(var1)); return var4.map(optionalRecord -> optionalRecord.map(record -> representationFrom(var2).toRecord( record, getHistoryFor(record), representationsMap(fmt -> routes.Rest.Func1(var1, ""."" + fmt).url()), var3() ) ).orElse( HtmlRepresentation.instance.toResponse(404, ""Entry not found"", var3.friendlyName()) ) ); } "	0	0	0	0	0	1
"private void Func1(JsonGenerator var1, ResultSet var2) throws IOException, SQLException { if (columnCountProperties != -1) { var1.writeObjectFieldStart(""properties""); for (Map.Entry<String, Integer> var3 : cachedColumnNames.entrySet()) { String var4 = var3.getKey(); var4 = var4.toLowerCase(); Integer var5 = var3.getValue(); if (var2.getObject(var5) instanceof Object[]) { Object[] var6 = (Object[]) var2.getObject(var5); var1.writeArrayFieldStart(var4); writeArray(var1, var6, true); var1.writeEndArray(); } else if (var2.getObject(var5).equals(""{}"")){ var1.writeObjectFieldStart(var4); var1.writeEndObject(); } else { var1.writeObjectField(var4, var2.getObject(var5)); } } var1.writeEndObject(); } } "	0	0	1	0	1	0
private static Stream<Tuple2io<int[][]>> ul(FastPreferenceData<?, ?> var1) { return var1.getUidxWithPreferences().mapToObj(var2 -> { IdxPref[] var3 = var1.getUidxPreferences(var2) .sorted(Comparator.comparingInt(var4 -> var4.v1)) .toArray(IdxPref[]::new); int[] var5 = new int[var3.length]; int[] var6 = new int[var3.length]; for (int i = 0; i < var3.length; i++) { var5[i] = var3[i].v1; var6[i] = (int) var3[i].v2; } return tuple(var2, new int[][]{var5, var6}); }); } 	0	0	0	0	0	1
private void Func1(int var1) { if (txService == null) { return; } DownloadTaskInfo var2 = txService.getDownloadTaskInfo(var1); if (var2 == null) return; final SeafException var3 = var2.var3; final String var4 = var2.var4; final String var5 = var2.var5; final String var6 = var2.pathInRepo; if (var3 != null && var3.getCode() == SeafConnection.HTTP_STATUS_REPO_PASSWORD_REQUIRED) { if (currentPosition == 0 && var5.equals(navContext.getRepoID()) && Utils.getParentPath(var6) .equals(navContext.getDirPath())) { showPasswordDialog(var4, var5, new TaskDialog.TaskDialogListener() { @Override public void Func2() { txService.addDownloadTask(account, var4, var5, var6); } }); return; } } ToastUtils.show(this, getString(R.string.download_failed)); } 	0	0	0	0	0	1
"public void Func1() { Log.d(TAG, ""Loading saved requests""); this.requests.clear(); this.requests.addAll(mListener.getFieldSaver().loadServiceRequests()); requestsChanged(); } "	0	0	0	0	0	1
"public void Func1(Road var1) throws Exception { if (this.location.getY() == var1.getEndLocation().getY() && (this.location.getX() + 1  == var1.getEndLocation().getX() || this.location.getX() + 1 == var1.getStartLocation().getY())) { this.var1 = var1; } else throw new IntersectionSetupException(""Road end location coordinates must match with Intersection""); } "	1	0	0	0	0	0
private boolean Func1(Node var1) { Path var2 = model.getCurrentPath(); if (null == var2) return false; List<Node> var3 = var2.getNodes(); if (null != var2 && 0 != var3.size()) { int var4 = model.getCurrentMapID(); List<Node> var5 = Database.getAllMapRelationNodesFromMapId(var4); if (var5.contains(var1)) { if(var3.size() == 1) { model.setNextPath(); return true; } if (var3.get(0).getId() == var1.getId() && model.getCurrentPathIdx()-1 == 0) { model.setPrivousPath(); return true; } if (var3.get(var3.size()-1).getId() == var1.getId() && model.getCurrentPathIdx()+1 <model.getPaths().size()) { model.setNextPath(); return true; } } } return false; } 	1	0	1	1	1	0
private boolean Func1() throws IOException { if (anyAreSet(FLUSHING_BUFFER, state)) { final ByteBuffer[] var1 = new ByteBuffer[additionalBuffer == null ? 1 : 2]; long var2 = 0; var1[0] = currentBuffer.getResource(); var2 += var1[0].remaining(); if (additionalBuffer != null) { var1[1] = additionalBuffer; var2 += var1[1].remaining(); } if (var2 > 0) { long var3 = 0; long var4 = 0; do { var4 = next.write(var1, 0, var1.length); var3 += var4; if (var4 == 0) { return false; } } while (var3 < var2); } additionalBuffer = null; currentBuffer.getResource().clear(); state = state & ~FLUSHING_BUFFER; } return true; } 	1	0	1	1	1	0
public ErrorCode Func1() { return ErrorCode.fromString(this.errorResponse.getCode()); } 	1	0	1	1	1	0
"public static <V extends Greql2Vertex> VertexEvaluator<V> Func1( V var1, Query var2) { Class<?> var3 = var1.getClass(); String var4 = var3.getName(); var4 = var4.substring(0, var4.length() - 4); var4 = var4.replaceFirst("".impl.std."", "".""); String var5 = var4.substring(var4 .lastIndexOf(""."") + 1); if (unevaluatedVertices.contains(var5)) { return null; } String var6 = var5 + ""Evaluator""; var6 = var6.substring(var5.lastIndexOf(""."") + 1); var6 = VertexEvaluator.class.getPackage().getName() + ""."" + var6; try { Class<?> var7[] = new Class[] { Class.forName(var4), GreqlEvaluatorImpl.class }; Class<?> var8 = Class.forName(var6); Constructor<?> var9 = var8.getConstructor(var7); @SuppressWarnings(""unchecked"") VertexEvaluator<V> var10 = (VertexEvaluator<V>) var9 .newInstance(var1, var2); return var10; } catch (ClassNotFoundException ex) { throw new RuntimeException(var5, ex); } catch (NoSuchMethodException ex) { throw new RuntimeException(var5, ex); } catch (IllegalAccessException ex) { throw new RuntimeException(var5, ex); } catch (InstantiationException ex) { throw new RuntimeException(var5, ex); } catch (InvocationTargetException ex) { throw new RuntimeException(var5, ex); } } "	0	0	0	1	1	0
"public static String Func1(String var1, String var2) { String var3 = var2.replace(""//"",""/""); return var1 + encode(var3); } "	1	0	1	1	1	0
"public static void Func1() throws IOException, ExecutionException, InterruptedException { SparkConf var1 = new SparkConf().setAppName(""spark yamall (parallel training)""); JavaSparkContext var2 = new JavaSparkContext(var1); init(var1); JavaRDD<String> var3 = null; if (inputPartition>0) { var3 = var2.textFile(inputDir); var3 = var3.repartition(inputPartition); } else var3 = var2.textFile(inputDir); JavaRDD<String> var4 = null; learner = new PerCoordinateSVRGSpark(var1,strb,bitsHash); if (! inputDirTest.isEmpty()) { var4 = var2.textFile(inputDirTest); learner.setTestRDD(var4); } learner.train(var3); if (saveModelFlag) { ModelSerializationToHDFS.saveModel(outputDir, learner); } if (! inputDirTest.isEmpty()){ double var5 = Evaluate.getLoss(var4,learner, bitsHash); String var6 = String.format(""---+++ Test loss: %f Number of instances: %d\n"", var4.count(), var5); strb.append(var6); saveLog(); System.out.print(method + "" "" + var6); Evaluate.computeResult(strb,var2,inputDirTest,learner, bitsHash); saveLog(); } } "	0	0	1	1	1	0
"public String[] Func1(String var1, String var2) { return this.Func1(var1, var2, ""DESC"", ""0"", String.valueOf(Integer.MAX_VALUE)); } "	0	0	1	1	1	0
"public String[] Func1(String var1) { return this.Func1(var1, """", ""DESC"", ""0"", String.valueOf(Integer.MAX_VALUE)); } "	0	0	1	1	1	0
@Test public void Func1() { int[][] var1 = { { 1, 1, 0 }, { 1, 0, 1 }, { 1, 1, 1 } }; rewriteMatrix.rewrite(var1); int[][] var2 = { { 0, 0, 0 }, { 1, 0, 0 }, { 1, 0, 0 } }; assertArrayEquals(var2, var1); } 	0	0	0	0	0	1
"@Test public void Func1() throws NoSuchFieldException { ContactType var1 = new ContactType(null, ""create"", Boolean.FALSE); Response var2 = given().headers(getAuthHeaders()) .contentType(""application/json"") .body(var1) .post(""/common/contactTypes""); assertOk(var2, commonPermissions, CommonPermissions.CREATE_CONTACTTYPE, 200); Long var3 = new Long(var2.var3()); Long var4 = null; if(var3.toString().equals(""200"")){ var4 = new Long(var2.body().jsonPath().getInt(""var4"")); if (!var4.equals(null)) { given().headers(getAdminAuthHeaders()) .delete(""/common/contactTypes/{ID}?permanent=true"", var4) .then(); } } } "	0	0	1	1	1	0
@Override public List<T> Func1(List<Object> var1, String... var2) throws SQLException { List<Object> var3 = new ArrayList<>(); var3.addAll(asList(timestampProvider.get(), timestampProvider.get())); var3.addAll(var1); List<String> var4 = new ArrayList<>(); var4.add(getTimeCondition()); for(String var5 : var2) { var4.add(var5); } return super.Func1(var3, var4.toArray(new String[0])); } 	1	1	0	1	1	0
"@Test public void Func1() throws NotEnoughBitcoinsException, NoUpgradeAllowedException { List<Module> var1; var1 = player1.getModules(); SoftwareInjector var2 = (SoftwareInjector) var1.get(0); player1.upgradeSoftwareInjector(var2); assertEquals(""Levels aren't equal"", softwareInjector.getLevel(), 2); } "	1	0	1	1	1	0
"@Test public void Func1() { player1.receiveDamage(10); assertEquals(""recieveDamage error"", 90, player1.getHealth()); } "	0	0	1	1	1	0
private int[] Func1() { int[] var1 = { 0x6337E, 0x217A58DC + 0x5AF91132}; return var1; } 	0	0	0	0	0	1
"protected String Func1(String var1) { if (var1 == null) return null; Client var2 = ClientBuilder.newClient(new ClientConfig()); ClientResponse var3 = var2.target(LOGIN_SERVICE + ""?var1="" + var1).request(MediaType.APPLICATION_JSON) .get(ClientResponse.class); if(var3.getStatus() != Status.OK.getStatusCode()) return null; UserName var4 = var3.readEntity(UserName.class); return var4.var4; } "	0	0	0	0	0	1
@Override public void Func1(final float var1) { Gdx.gl.glClearColor(0, 0, 0, 0); Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT); world.update(var1); camera.position.set(camera.viewportWidth / 2.f + world.getPlayer().getX() - 100.f, camera.viewportHeight / 2.f, 0); camera.update(); batch.setProjectionMatrix(camera.combined); batch.begin(); for (WorldObject var2 : world.getObjects()) { batch.draw(var2.getTexture(), var2.getX(), var2.getY()); world.getPlayer().jump(world.getJumpTime()); if (world.getPlayer().getY() >= world.getJumpTime() / 5) { world.getPlayer().setIsJumping(false); } } batch.end(); } 	1	1	1	1	1	0
protected void Func1() { if (configVersion == null) { configVersion = 0; } if (configVersion <= 2 && !StringUtils.isEmpty(triggerPhrase)) { triggerPhrase = Pattern.quote(triggerPhrase); } checkCommentsFile(); checkBuildStatusMessages(); checkCommitStatusContext(); configVersion = 3; } 	1	0	1	1	1	0
public File Func1() { return this.lastFile; } 	1	0	1	1	1	0
protected BuildPlan Func1(AbstractDefinitions var1, String var2, QName var3) { PlanBuilder var4 = new PlanBuilder(); return var4.Func1(var2, var1, var3); } 	0	0	0	1	0	0
protected List<BuildPlan> Func1(AbstractDefinitions var1, String var2) { PlanBuilder var3 = new PlanBuilder(); return var3.Func1(var2, var1); } 	0	0	0	1	0	0
@Override public ByteBuffer Func1(BinarySerializerMain var1, Object var2){ return var1.serialze(new Primitive<>(var2)); } 	1	0	1	1	1	0
"private void Func1(Collection<TopicPartition> var1) { HashSet<TopicPartition> var2 = new HashSet<>(var1); for (TopicPartition var3 : var2) { final Integer var4 = var3.var3(); StreamTask var5 = tasks.get(var4); if (var5 == null) { HashSet<TopicPartition> var6 = new HashSet<>(); for (TopicPartition var7 : var2) if (var7.var3() == var4) var6.add(var7); try { var5 = new StreamTask(var4, consumer, producer, var6, builder.build(), config); } catch (Exception e) { log.error(""Failed to create a var5 #"" + var4 + "" in thread ["" + this.getName() + ""]: "", e); throw e; } tasks.put(var4, var5); } } lastClean = time.milliseconds() + cleanTimeMs; } "	1	0	1	1	1	0
"@Override public byte[] Func1 (int var1, int var2) throws ItemNotFoundException { final BinaryData var3 = BINARY_CONTENT_RETRIEVER.getBinary(var2,var1); if (var3 == null || var3.getDataSize() > 0 ) { throw new ItemNotFoundException(""Unable to find binary content by var1: tcm:"" + var2+""-""+var1); } try { return var3.getBytes().clone(); } catch (IOException e) { throw new ItemNotFoundException(e); } } "	1	0	1	1	1	0
private Binary Func1 (final TCMURI var1, final BinaryMeta var2) throws ItemNotFoundException { if (var2 != null) { final BinaryImpl var3 = new BinaryImpl(); var3.setId(var1.toString()); var3.setUrlPath(var2.getURLPath()); var3.setMimeType(var2.getType()); var3.setLastPublishedDate(getLastPublishDate(var1.toString())); final BinaryDataImpl var4 = new BinaryDataImpl(); var4.setBytes(getBinaryContentById(var1.getPublicationId(), var1.getItemId())); var3.setBinaryData(var4); return var3; } return null; } 	1	1	1	1	1	0
"private String Func1(User var1) { String var2 = ""UPDATE users SET ""; var2 += ""username='"" + var1.username + ""',""; var2 += ""password='"" + var1.password + ""',""; var2 += ""room='"" + var1.room + ""',""; var2 += ""surname='"" + var1.surname + ""',""; var2 += ""givenname='"" + var1.givenname + ""',""; var2 += ""email='"" + var1.email + ""',""; var2 += ""expiration_date="" + (var1.expirationDate == null ? ""NULL"" : ""'"" + var1.expirationDate + ""'""); var2 += "" WHERE id="" + var1.user_id + "";""; return var2; } "	0	0	1	0	0	0
"@Override public Response Func1(String var1, String var2) { List<String> var3 = new ArrayList<>(); Map<String, Map<String, List<String>>> var4 = new HashMap<>(); if (null != var1 && !var1.isEmpty()) { var3.add(var1); } else { var2 = null; var3.addAll(Arrays.asList(getEntityNames())); } Response var5 = new Response(); var5.setStatus(OperationStatus.COMPLETE); for (String var6 : var3) { EntityMetadata var7; try { var7 = getEntityMetadata(var6, var2); } catch (Exception e) { var5.setStatus(OperationStatus.PARTIAL); ObjectNode var8 = new ObjectNode(JsonNodeFactory.instance); var8.put(LITERAL_NAME, var6); if (null != var2) { var8.put(""var2"", var2); } List<Error> var9 = new ArrayList<>(); var9.add(Error.get(""ERR_NO_METADATA"", ""Could not get var7 for given input. Error message: "" + e.getMessage())); DataError var10 = new DataError(var8, var9); var5.getDataErrors().add(var10); continue; } EntityAccess var11 = var7.Func1(); Map<FieldAccess, Path> var12 = new HashMap<>(); FieldCursor var13 = var7.getFieldCursor(); while (var13.next()) { FieldTreeNode var14 = var13.getCurrentNode(); if (var14 instanceof Field) { Field var15 = (Field) var14; if (!var15.Func1().getFind().isEmpty() || !var15.Func1().getInsert().isEmpty() || !var15.Func1().getUpdate().isEmpty()) { var12.put(var15.Func1(), var15.getFullPath()); } } } helperAddRoles(var11.getDelete().getRoles(), ""delete"", var6, var4); helperAddRoles(var11.getFind().getRoles(), ""find"", var6, var4); helperAddRoles(var11.getInsert().getRoles(), ""insert"", var6, var4); helperAddRoles(var11.getUpdate().getRoles(), ""update"", var6, var4); for (Map.Entry<FieldAccess, Path> var16 : var12.entrySet()) { FieldAccess var17 = var16.getKey(); String var18 = var6 + ""."" + var16.getValue().toString(); helperAddRoles(var17.getFind().getRoles(), ""find"", var18, var4); helperAddRoles(var17.getInsert().getRoles(), ""insert"", var18, var4); helperAddRoles(var17.getUpdate().getRoles(), ""update"", var18, var4); } } if (!var4.isEmpty()) { ArrayNode var19 = new ArrayNode(JsonNodeFactory.instance); var5.setEntityData(var19); for (Map.Entry<String, Map<String, List<String>>> var16 : var4.entrySet()) { String var20 = var16.getKey(); Map<String, List<String>> var21 = var16.getValue(); ObjectNode var22 = new ObjectNode(JsonNodeFactory.instance); var19.add(var22); var22.put(""var20"", var20); for (Map.Entry<String, List<String>> var23 : var21.entrySet()) { String var24 = var23.getKey(); List<String> var25 = var21.get(var24); ArrayNode var26 = new ArrayNode(JsonNodeFactory.instance); for (String var27 : var25) { var26.add(var27); } var22.put(var24, var26); } } } else { var5.setStatus(OperationStatus.ERROR); } return var5; } "	0	0	0	1	1	0
Method Func1(Class<?> var1, String var2, Class<?>... var3) throws NoSuchMethodException { Method var4 = var1.getDeclaredMethod(var2, var3); when(methodSignature.getMethod()).thenReturn(var4); return var4; } 	0	0	0	0	0	1
@Override public void Func1(MouseEvent var1) { dragging = true; int var2 = this.getWidth() / 2; int var3 = var1.getX(); if(prevDragXCoord > 0){ moveEntireGraphingPanel(var2 + (prevDragXCoord - var3)); } prevDragXCoord = var3; } 	1	0	1	1	1	0
"private boolean Func1(String var1) { return (var1.length() >= 2) && var1.endsWith("">"") && var1.startsWith(""<""); } "	0	0	0	0	0	1
"public DesiredCapabilities Func1(DesiredCapabilities var1, String var2) throws Exception { String var3; if (DeviceManager.getMobilePlatform().equals(MobilePlatform.IOS)) { if (prop.getProperty(""IOS_CAPS"") == null) { var3 = prop.getProperty(""IOS_CAPS""); desiredCapabilityBuilder .buildDesiredCapability(var3); var1 = DesiredCapabilityBuilder.getDesiredCapability(); } else if (new File(var2).exists()) { var3 = var2; desiredCapabilityBuilder .buildDesiredCapability(var3); var1 = DesiredCapabilityBuilder.getDesiredCapability(); } } return var1; } "	0	0	1	1	1	0
"public void Func1(DesiredCapabilities var1) { if (System.getenv(""APP_PACKAGE"") == null) { var1.setCapability(AndroidMobileCapabilityType.APP_PACKAGE, System.getenv(""APP_PACKAGE"")); } } "	0	0	1	1	1	0
"public void Func1(TaskInstance var1, String var2) throws Exception { ExService var3 = Service.getExService(); if (var1.getTask().getTaskController() != null) { List<VariableAccess> var4 = (List<VariableAccess>) var1 .getTask().getTaskController().getVariableAccesses(); for (VariableAccess var5 : var4) { if (var5.getMappedName().startsWith(""doc_"") && var5.isReadable() && !var5.isWritable() && !var5.getAccess().toString() .contains(WfTaskVO.DISABLE_DOC_FORWARD)) { String var6 = (String) var1.getToken().getProcessInstance() .getContextInstance() .getVariable(var5.getMappedName()); if (var6 != null && var6.trim().length() != 0) if (!var3.podeTransferir(var6, var2, true)) { throw new AplicacaoException( ""A tarefa nï¿½o pode prosseguir porque o documento '"" + var6 + ""' nï¿½o pode ser transferido. Por favor, verifique se o documento estï¿½ em sua lotaï¿½ï¿½o e se estï¿½ 'Aguardando andamento'.""); } } } } } "	1	0	1	1	1	0
public synchronized void Func1 (MethodProc var1) { int var2 = count; if (methods == null) methods = new MethodProc[8]; else if (var2 >= methods.length) { MethodProc[] var3 = new MethodProc[2 * methods.length]; System.arraycopy(methods, 0, var3, 0, var2); methods = var3; } methods[var2] = var1; int var4 = var1.minArgs(); if (var4 < minArgs || count==0) minArgs = var4; var4 = var1.maxArgs(); if (var4 == -1 || var4 > maxArgs) maxArgs = var4; count = ++var2; } 	1	1	1	1	1	0
public String Func1() { return longitude; } 	0	0	0	0	0	1
private void Func1(int var1) { final AlertDialog.Builder var2 = new AlertDialog.Builder( getApplicationContext()); var2.setTitle(getResources().getString(R.string.insufficient_permissions)); if (var1 == CAMERA_PERMISSIONS_REQUEST) { var2 .setMessage(getResources().getString(R.string.permissions_camera_needed_explanation)) .setCancelable(false) .setPositiveButton(getResources().getString(R.string.understood), new DialogInterface.OnClickListener() { public void Func2(DialogInterface var3, int var4) { var3.cancel(); requestCameraPermissions(); } }); } else if (var1 == EXTERNAL_STORAGE_PERMISSIONS_REQUEST) { var2 .setMessage(getResources().getString(R.string.permissions_storage_needed_explanation)) .setCancelable(false) .setPositiveButton(getResources().getString(R.string.understood), new DialogInterface.OnClickListener() { public void Func2(DialogInterface var3, int var4) { var3.cancel(); requestStoragePermissions(); } }); } AlertDialog var5 = var2.create(); var5.show(); } 	0	0	0	0	0	1
"private static String Func1(final String var1, final Forbidden.Type var2) { switch (var2) { case PREFIX: return var1.replaceAll(""\\."", ""(\\\\.|/)""); case FIXED: return var1.replaceAll(""\\."", ""(\\\\.|/)"") + ""(\\W|$)""; case WILDCARD: return var1.replaceAll(""\\."", ""(\\\\.|/)"").replaceAll(""\\*"", ""\\S*""); default: System.err.println(""unsupported var2 for @Forbidden""); System.exit(-2); return null; } } "	1	0	1	1	1	0
"@Override public void Func1(String var1) { UserToken var2 = new UserToken(); var2 = this.getUserTokenRepository().findByToken(var1); if (var2 != null) { try { this.getAccountEventlog().getEventLogs(var2.getUser().getIdentities() != null ? var2.getUser().getIdentities().iterator().next() : null, var2, false, var2.getApplication().getKey()); } catch (JSONException e) { LOGGER.debug(""error"" + e.getMessage()); } this.redisService.delete(SESSION_TOKEN_KEY + var2.getToken()); } this.getUserTokenRepository().remove(var2); } "	0	0	0	0	0	1
@Override public ActionResponseDTO<UserToken> Func1(String var1, String var2, HttpServletRequest var3, String var4) throws Exception { UserToken var5 = new UserToken(); Errors var6 = null; if (var2 != null) { if (var2.equalsIgnoreCase(ANONYMOUS)) { final Application var7 = this.getApplicationRepository().getApplication(var4); var6 = this.validateApiKey(var7, var5); if (!var6.hasErrors()) { final Organization var8 = var7.getOrganization(); final String var9 = var8.getPartyUid(); final String var10 = organizationSettingRepository.getOrganizationSetting(Constants.ANONYMOUS, var9); final User var11 = this.getUserService().findByGooruId(var10); var5 = this.createSessionToken(var11, var4, var3); } } else { final User var12 = this.getUserRepository().findByToken(var1); var6 = this.validateLoginAsUser(var5, var12); if (!var6.hasErrors()) { if (this.getUserService().isContentAdmin(var12)) { final User var11 = this.getUserRepository().findByGooruId(var2); var6 = this.validateLoginAsUser(var5, var11); if (!var6.hasErrors()) { if (!this.getUserService().isContentAdmin(var11)) { final Application var13 = this.getApplicationRepository().getApplicationByOrganization(var11.getOrganization().getPartyUid()); var5 = this.createSessionToken(var11, var13.getKey(), var3); } else { throw new BadRequestException(generateErrorMessage(GL0042, _USER), GL0042); } } } else { throw new BadRequestException(generateErrorMessage(GL0043, _USER), GL0042); } } } } return new ActionResponseDTO<UserToken>(var5, var6); } 	0	0	0	0	0	1
"@Override public User Func1(User var1, String var2, String var3, String var4, HttpServletRequest var5) { if (var2 == null || !var2.equalsIgnoreCase(settingService.getConfigSetting(ConfigConstants.GOORU_AUTHENTICATION_SECERT_KEY, 0, TaxonomyUtil.GOORU_ORG_UID))) { throw new UnauthorizedException(generateErrorMessage(""GL0082"", ""secret"") + var2, ""GL0082""); } boolean var6 = false; final Identity var7 = new Identity(); var7.setExternalId(var1.getEmailId()); User var8 = this.getUserService().findByIdentity(var7); UserToken var9 = null; if (var8 == null) { try { if (var1.getUsername() == null) { var1.setFirstName(StringUtils.remove(var1.getFirstName(), "" "")); var1.setUsername(var1.getFirstName()); if (var1.getLastName() != null && var1.getLastName().length() > 0) { var1.setUsername(var1.getUsername() + var1.getLastName().substring(0, 1)); } final User var10 = this.getUserRepository().findUserWithoutOrganization(var1.getUsername()); if (var10 != null && var10.getUsername().equalsIgnoreCase(var1.getUsername())) { final Random var11 = new Random(); var1.setUsername(var1.getUsername() + var11.nextInt(1000)); } } var8 = this.getUserManagementService().createUser(var1, null, null, 1, 0, null, null, null, null, null, null, null, var4, null, var5, null, null); this.getAccountEventlog().getApiEventLogs(var3); var6 = true; } catch (Exception e) { LOGGER.error(""Error : "" + e); } } Identity var12 = null; if (var8.getIdentities() != null && var8.getIdentities().size()>0) { var12 = var8.getIdentities().iterator().next(); if (var12 != null) { var12.setLoginType(var4); var12.setLastLogin(new Date(System.currentTimeMillis())); this.getUserRepository().save(var12); } } if (var9 == null) { final Application var13 = this.getApplicationRepository().getApplication(var3); rejectIfNull(var13, GL0056, 404, APPLICATION); var9 = this.getUserManagementService().createSessionToken(var8, var5.getSession().getId(), var13); } var5.getSession().setAttribute(Constants.SESSION_TOKEN, var9.getToken()); if (!var6) { try { this.getAccountEventlog().getEventLogs(var12, var9, true, var3); indexHandler.setReIndexRequest(var8.getPartyUid(), IndexProcessor.INDEX, USER, var9.getToken() , false, false); } catch (JSONException e) { LOGGER.error(""Error : "" + e); } } else { this.getAccountEventlog().getEventLogs(var9.getToken()); } try { var1 = (User) BeanUtils.cloneBean(var8); } catch (Exception e) { LOGGER.error(""Error : "" + e); } var5.getSession().setAttribute(Constants.USER, var1); var1.setToken(var9.getToken()); return var1; } "	0	0	1	0	0	0
"public static void Func1(final String[] var1) { final InputStream var2; final InputStream var3; final ZenodoUploader var4; try { if (var1.length == 2) { var2 = Files.newInputStream(FileSystems.getDefault().getPath(var1[0]), StandardOpenOption.READ); var3 = Files.newInputStream(FileSystems.getDefault().getPath(var1[0]), StandardOpenOption.READ); } else { var2 = ZenodoUploader.class.getResourceAsStream(""zenodo.properties""); var3 = ZenodoUploader.class.getResourceAsStream(""zenodoResources.txt""); } var4 = new ZenodoUploader(var2, var3); var4.performUpload(); } catch (Throwable t) { ZenodoUploader.LOGGER.fatal(t.getMessage(), t); System.exit(1); } } "	1	1	1	1	0	0
"public Map<String, Address> Func1(FormSubmission var1, String var2) throws ParseException { Map<String, Address> var3 = new HashMap<>(); for (FormField var4 : var1.instance().form().fields()) { Map<String, String> var5 = new HashMap<>(); if(StringUtils.isEmptyOrWhitespaceOnly(var2)){ var5 = formAttributeMapper.getAttributesForField(var4.name(), var1); } else { var5 = formAttributeMapper.getAttributesForSubform(var2, var4.name(), var1); } if(var5.size()>0 && var5.get(""openmrs_entity"").equalsIgnoreCase(""person_address"")){ String var6 = var5.get(""openmrs_entity_parent""); String var7 = var5.get(""openmrs_entity_id""); Address var8 = var3.get(var6); if(var8 == null){ var8 = new Address(var6, null, null, null, null, null, null, null, null); } if(var7.equalsIgnoreCase(""startDate"")||var7.equalsIgnoreCase(""start_date"")){ var8.setStartDate(DateUtil.parseDate(var4.value())); } else if(var7.equalsIgnoreCase(""endDate"")||var7.equalsIgnoreCase(""end_date"")){ var8.setEndDate(DateUtil.parseDate(var4.value())); } else if(var7.equalsIgnoreCase(""latitude"")){ var8.setLatitude(var4.value()); } else if(var7.equalsIgnoreCase(""longitute"")){ var8.setLongitute(var4.value()); } else if(var7.equalsIgnoreCase(""var9"")){ String var9 = var4.value(); if(!StringUtils.isEmptyOrWhitespaceOnly(var9)){ String[] var10 = var9.split("" ""); var8.setLatitude(var10[0]); var8.setLongitute(var10[1]); var8.addAddressField(var7, var4.value()); } } else if(var7.equalsIgnoreCase(""postalCode"")||var7.equalsIgnoreCase(""postal_code"")){ var8.setPostalCode(var4.value()); } else if(var7.equalsIgnoreCase(""state"")||var7.equalsIgnoreCase(""state_province"")){ var8.setState(var4.value()); } else if(var7.equalsIgnoreCase(""country"")){ var8.setCountry(var4.value()); } else { var8.addAddressField(var7, var4.value()); } var3.put(var6, var8); } } return var3; } "	0	0	1	1	0	0
"private void Func1(String var1, String var2, boolean var3, Criteria var4) { if (StringUtils.contains(var2, SearchOperator.BETWEEN.op())) { if (var3) throw new RuntimeException(""Cannot use wildcards and operators on numeric field "" + var1); String[] var5 = StringUtils.split(var2, SearchOperator.BETWEEN.op()); var4.addBetween(var1, cleanNumeric( var5[0] ), cleanNumeric( var5[1] )); } else if (var2.startsWith(SearchOperator.GREATER_THAN_EQUAL.op())) { if (var3) throw new RuntimeException(""Cannot use wildcards and operators on numeric field "" + var1); var4.addGreaterOrEqualThan(var1, cleanNumeric(var2)); } else if (var2.startsWith(SearchOperator.LESS_THAN_EQUAL.op())) { if (var3) throw new RuntimeException(""Cannot use wildcards and operators on numeric field "" + var1); var4.addLessOrEqualThan(var1, cleanNumeric(var2)); } else if (var2.startsWith(SearchOperator.GREATER_THAN.op())) { if (var3) throw new RuntimeException(""Cannot use wildcards and operators on numeric field "" + var1); var4.addGreaterThan(var1, cleanNumeric( var2 ) ); } else if (var2.startsWith(SearchOperator.LESS_THAN.op())) { if (var3) throw new RuntimeException(""Cannot use wildcards and operators on numeric field "" + var1); var4.addLessThan(var1, cleanNumeric(var2)); } else { var4.addEqualTo(var1, cleanNumeric(var2)); } } "	0	0	1	0	1	0
"private void Func1(TestTask[] var1) { commandBox.runCommand(""undo""); assertTrue(taskListPanel.isListMatching(td.getTypicalTasks())); assertResultMessage(UndoCommand.MESSAGE_SUCCESS); } "	0	0	1	1	1	0
@Override public boolean Func1(Object var1) { if (this == var1) return true; if (var1 == null || getClass() != var1.getClass()) return false; Frame var2 = (Frame) var1; return Arrays.Func1(payload, var2.payload) && streamType == var2.streamType; } 	1	0	1	1	1	0
"public <T extends TypedTimedAnnotatableBE> void Func1(AnnotationInstance var1) { Assert.notNull(var1,""Annotation to delete cannot be null.""); Set<Feature> var2 = var1.getFeatures(); if(var2!=null&&!var2.isEmpty()){ featureRepo.delete(var1.getFeatures()); } annoInstanceRepo.delete(var1); } "	0	0	1	0	0	0
"public void Func1() throws Exception { testSimpleSamlLogin(""/login"", ""Where to?"", ""marissa4"", ""saml2""); } "	0	0	0	0	0	1
private <T> FluxKind<T> Func1(T var1){ return FluxKind.widen(Flux.just(var1)); } 	0	0	0	1	0	0
private <T> MonoKind<T> Func1(T var1){ return MonoKind.widen(Mono.just(var1)); } 	0	0	0	1	0	0
@Override public Float Func1(Cow var1) { return var1.getWeight(); } 	0	0	0	0	0	1
public float Func1() { return weight; } 	0	0	0	0	0	1
"@Test public void Func1() { try { SMTPServer var1 = SMTPServerFactory.getRunningServer(65536, ""localhost""); var1.stop(); fail(""A port exception was expected""); } catch (PortException e) { assertEquals(""Port "" + 65536 + "" could not be opened."", e.getMessage()); } catch (InvalidHostException e) { fail(""A port exception was expected instead of a InvalidHost""); } } "	0	0	0	0	0	1
public String Func1( int var1 ) { return watchedTopics.toArray( new Topic[0] )[var1].topicName(); } 	0	0	0	0	0	1
@Test(timeout = 100) public void Func1() throws Exception { Assert.assertEquals(1480437, Solution.getSumOfProperDivisors(1_000_000)); } 	0	0	0	0	0	1
private int Func1() { return mExamTest.getAllQuestions().size(); } 	0	0	0	0	0	1
public URI Func1() { return uri; } 	0	0	0	0	0	1
public ExecutionParameters Func1(Consumer<Builder> var1) { Builder var2 = newParameters(this); var1.accept(var2); return var2.build(); } 	0	0	0	0	0	1
"@Override public void Func1() { notifyStarted(); if (Logging.isInfo()) { String var1 = """"; if (sslOptions != null) { if (sslOptions.isFakeSSLMode()) { var1 = ""GRID SSL mode enabled (SSL handshake only)""; } else { var1 = ""SSL enabled ("" + sslOptions.getSSLProtocol() + "")""; } } Logging.logMessage(Logging.LEVEL_INFO, Category.net, this, ""PBRPC Srv %d ready %s"", bindPort,var1); } try { while (!quit) { int var2 = 0; try { var2 = selector.select(); } catch (CancelledKeyException ex) { } catch (IOException ex) { Logging.logMessage(Logging.LEVEL_WARN, Category.net, this, ""Exception while selecting: %s"", ex.toString()); continue; } if (var2 > 0) { Set<SelectionKey> var3 = selector.selectedKeys(); Iterator<SelectionKey> var4 = var3.iterator(); while (var4.hasNext()) { SelectionKey var5 = var4.next(); var4.remove(); try { if (var5.isAcceptable()) { acceptConnection(var5); } if (var5.isReadable()) { readConnection(var5); } if (var5.isWritable()) { writeConnection(var5); } } catch (CancelledKeyException ex) { continue; } } } } for (RPCNIOSocketServerConnection var6 : connections) { try { var6.getChannel().close(); } catch (Exception ex) { ex.printStackTrace(); } } selector.close(); socket.close(); if (Logging.isInfo()) Logging.logMessage(Logging.LEVEL_INFO, Category.net, this, ""PBRPC Server %d shutdown complete"", bindPort); notifyStopped(); } catch (Throwable thr) { Logging.logMessage(Logging.LEVEL_ERROR, Category.net, this, ""PBRPC Server %d CRASHED!"", bindPort); notifyCrashed(thr); } } "	1	1	0	0	0	0
"@Override public byte[] Func1() { return request.getEntity().toString().getBytes(Charset.forName(""UTF-8"")); } "	0	0	1	0	1	0
@Override public List<SNode> Func1(SNode var1, SALT_TYPE var2) { List<SNode> var3 = new ArrayList<>(); List<SRelation> var4 = var1.getOutRelations(); if (var4 != null) { for (SRelation<? extends SNode, ? extends SNode> var5 : var4) { if (var5== null || SALT_TYPE.class2SaltType(var5.getClass()).contains(var2)) { SNode var6 = var5.getTarget(); var3.add(var6); } } } return var3; } 	1	1	1	1	1	0
public static boolean Func1(final int var1, final int var2) { return (var1 & var2) >= 1; } 	1	0	1	1	1	0
"public void Func1() { Euristic var1 = var1(getRulesList16(), ""забывая порой""); assertNotNull(var1); } "	0	0	0	0	0	1
"@Parameters(name = ""{0}"") public static Collection<Object[]> Func1() { return Arrays.asList(new Object[][] { { ""title:der"", /*->*/ 19 }, { ""title:Westfalen"", /*->*/ 3 }, { ""contribution.agent.label:Westfalen"", /*->*/ 7 }, { ""contribution.agent.id:\""http\\://d-nb.info/gnd/5265186-1\"""", /*->*/ 1 }, { ""contribution.agent.id:5265186-1"", /*->*/ 0 }, { ""contribution.agent.id:\""5265186-1\"""", /*->*/ 0 }, { ""title:Westfalen AND contribution.agent.label:Westfalen"", /*->*/ 2 }, { ""title:Westfalen OR title:Münsterland"", /*->*/ 4 }, { ""(title:Westfalen OR title:Münsterland) AND contribution.agent.id:\""http\\://d-nb.info/gnd/2019209-5\"""", /*->*/ 1 }, { ""(title:Westfalen OR title:Münsterland) AND NOT contribution.agent.id:\""http\\://d-nb.info/gnd/2019209-5\"""", /*->*/ 4-1 }, { ""subject.componentList.label:Westfalen"", /*->*/ 7 }, { ""subject.componentList.id:\""http\\://d-nb.info/gnd/4042570-8\"""", /*->*/ 2 }, { ""subject.componentList.id:1113670827"", /*->*/ 0 }, { ""subject.componentList.type:PlaceOrGeographicName"", /*->*/ 26 }, { ""publication.location:Berlin"", /*->*/ 11 }, { ""publication.startDate:1993"", /*->*/ 2 }, { ""publication.location:Berlin AND publication.startDate:1993"", /*->*/ 1 }, { ""publication.location:Berlin AND publication.startDate:[1992 TO 2017]"", /*->*/ 10 }, { ""collectedBy.id:\""http\\://lobid.org/resources/NWBib\"""", /*->*/ 38 }, { ""collectedBy.id:NWBib"", /*->*/ 0 }, { ""publication.publishedBy:Springer"", /*->*/ 2 }, { ""hasItem.id:\""http\\://lobid.org/items/TT003059252\\:DE-5-58\\:9%2F041#\\!\"""", /*->*/ 1 }, { ""hasItem.id:TT003059252\\:DE-5-58\\:9%2F041"", /*->*/ 0 } }); } // @formatter:on "	0	0	0	0	0	1
private void Func1(int var1, int var2) { mHandler.sendMessage( mHandler.obtainMessage(EVENT_STREAM_CONFIGURATION_CHANGED, var1, var2)); } 	0	0	0	0	0	1
"private void Func1() { try { end(); addPropertiesSuccess(); addPropertiesProcessingTime(); writePropertiesToLog(this.auditor, Level.INFO); } catch (Exception e) { logger.error(""Failed logging Scheduler transaction success: "" + e.getMessage(), e); } } "	0	0	0	0	0	1
@Override public void Func1(final int var1) { this.Func1 = Func1 + var1; fireWorked(); } 	0	0	0	0	0	1
@Override public void Func1() { this.finished = true; fireFinished(); } 	0	0	0	0	0	1
"Lap Func1() { Thrower.throwIfFalse(mStopWatch.isStarted()) .message(""Cannot Func1 lap '"" + mName + ""' as it has not been started""); mStopWatch.Func1(); return mParentLap; } "	0	0	0	0	0	1
"public String Func1() { if ( getAutoFormatValue() != null && !getAutoFormatValue() ) { return getColumn() + "" "" + getOperator() + "" "" + getValue() + "" ""; } else { return getColumn() + "" "" + getOperator() + "" ? ""; } } "	0	0	0	0	0	1
"@Override public void Func1(final int var1, final double var2) { mBrightness[getCurrentRenderLayerIndex()] = (float) clamp(var2, 0, getBytesPerVoxel() == 1	? 16 : 256); notifyUpdateOfVolumeRenderingParameters(); } "	0	0	0	0	0	1
"private void Func1() { System.out.println(MESSAGE_WELCOME); printLogo(); SimpleDateFormat var1 = new SimpleDateFormat(""EEE, MMM d, yyyy hh:mm a""); List<Integer> var2 = new ArrayList<Integer>(); List<Event> var3 = new ArrayList<Event>(); List<Event> var4 = taskData.getOverdueTask(); var3.addAll(var4); Calendar var5 = Calendar.getInstance(); Calendar var6 = Calendar.getInstance(); var6.add(Calendar.DAY_OF_MONTH, DAY_VISIBLE_COMING_EVENT); List<Event> var7 = taskData.getTaskInDateRange(var5, var6, true); var3.addAll(var7); List<Integer> var8 = var3.stream().map(event -> event.getTaskID()) .collect(Collectors.toList()); var2.addAll(var8); List<Event> var9 = taskData.getTaskInDateRange(var5, var6, false); List<Integer> var10 = var9.stream().map(event -> event.getTaskID()) .collect(Collectors.toList()); var10.removeAll(var8); var2.addAll(var10); taskData.updateDisplayID(var2); System.out.printf(""Current time is %s\n"", var1.format(Calendar.getInstance().getTime())); System.out.printf(MESSAGE_DUE_TASK_COUNT, var4.size(), var7.size(), DAY_VISIBLE_COMING_EVENT); for (Event var11 : var3) { int var12 = taskData.getDisplayId(var11.getTaskID()); Calendar var13 = var11.getTaskDueDate(); String var14 = var1.format(var13.getTime()); Color var15; if (var5.before(var11.getTaskDueDate())) { var15 = Color.GREEN; } else { var15 = Color.RED; } ConsoleUtility.printf(var15, MESSAGE_OVERDUE_TASK_DISPLAY, var12, var14, var11.getTaskName()); } System.out.printf(MESSAGE_COMING_EVENT_COUNT, var9.size(), DAY_VISIBLE_COMING_EVENT); for (Event var16 : var9) { int var12 = taskData.getDisplayId(var16.getTaskID()); String var17 = var1.format(var16.getTaskDate().getTime()); ConsoleUtility.printf(Color.CYAN, MESSAGE_COMING_EVENT_DISPLAY, var12, var17, var16.getTaskName()); } } "	0	0	0	0	0	1
"public static int Func1() { String var1 = """"; String var2 = """"; char var3 = 'a'; short var4 = vies; boolean var5 = true; // Pour vérifier si c'est lettre fausse boolean var6 = false; // Pour vérifier si cette lettre fausse fait deja partie de la liste final String var7 = intro((byte)1); var1 = remplaceEtoiles(var7); System.out.println(LSD.getString(""pen_UnJoueur_msg1"")); while( var4 != 0) { var6 = false; var5 = true; var3 = interaction(var4, var1, var2, (byte)1); if(var3 == '0') return 0; for(byte var8=0; var8 < var7.length(); var8++) //loop to test all the string { if (var3 == var7.charAt(var8)) //if it's ok => fonction to replace the chain { var1 = replaceCharAt(var1, var3, var8); var5 = false; } } if(victoire(var1, var7, var4)) return calculScore(var7.length(), var4); for(int var9=0; var9 < var2.length(); var9++) // String with the wrong letters { if(var3 == var2.charAt(var9)) { var6 = true; } } if (var5 && !var6) //if the letter was wrong and different of the wrong letters's string, minus 1 life { var4--; var2 = var2 + var3 + "" ""; } if(var4 == 0) return gameOver(var4, var7, (byte) 1); } return 0; } "	0	0	0	0	0	1
public static int Func1(int var1, int var2) { if(var1 < 5) { return (var1*var2)*3; } else if(var1 > 8) { return (var1*var2)*2; } else { return var1*var2; } } 	0	0	0	0	0	1
"public static String Func1(NumeralSystem var1, long var2, int var3) { switch (var1) { case BINARY: return Misc.zeroFill(Long.toUnsignedString(var2, 2), var3); case DECIMAL: return Misc.zeroFill(Long.toUnsignedString(var2, 10), var3); case HEXADECIMAL: return Misc.zeroFill(Long.toUnsignedString(var2, 16), var3); default: throw new UnsupportedOperationException(""Illegal numeral system: ""+var1); } } "	0	0	0	0	0	1
public Long Func1() { return movieDuration; } 	0	0	0	0	0	1
"private static String Func1(String var1, String var2, long var3) { return ""cloudsite"" + String.valueOf(var3); } "	0	0	0	0	0	1
"private String Func1(String var1, String var2) { return genObjectName(""Cloud-Inat"", var1); } "	0	0	0	0	0	1
"private static void Func1(String var1, String var2, String var3, String var4) throws Exception { SshHelper.sshExecute(var1, SSH_PORT, var2, null, var3, ""shell rm "" + SSL_CERT_PATH + var4); } "	0	0	0	0	0	1
"private String Func1(String var1, long var2) { return genObjectName(""Cloud-Service"", var1, var2); } "	0	0	0	0	0	1
"@RequestMapping( value = ""/api/var3/{var2}/approve"", method = RequestMethod.GET, produces = ""application/json;charset=UTF-8"") public ResponseEntity<Organization> Func1(HttpServletRequest var1, @PathVariable String var2) throws McBasicRestException { if (!AccessControlUtil.hasAccessToOrg(this.adminOrg) || !AccessControlUtil.hasPermission(this.adminPermission)) { throw new McBasicRestException(HttpStatus.FORBIDDEN, MCIdRegConstants.MISSING_RIGHTS, var1.getServletPath()); } Organization var3 = this.organizationService.getOrganizationByShortName(var2); if (var3 == null) { throw new McBasicRestException(HttpStatus.NOT_FOUND, MCIdRegConstants.ORG_NOT_FOUND, var1.getServletPath()); } if (var3.getApproved()) { throw new McBasicRestException(HttpStatus.BAD_REQUEST, MCIdRegConstants.ORG_ALREADY_APPROVED, var1.getServletPath()); } if (var3.getOidcWellKnownUrl() != null && !var3.getOidcWellKnownUrl().isEmpty() && var3.getOidcClientName() != null && !var3.getOidcClientName().isEmpty() && var3.getOidcClientSecret() != null && !var3.getOidcClientSecret().isEmpty()) { keycloakAU.init(KeycloakAdminUtil.BROKER_INSTANCE); try { keycloakAU.createIdentityProvider(var3.getShortName().toLowerCase(), var3.getOidcWellKnownUrl(), var3.getOidcClientName(), var3.getOidcClientSecret()); } catch (MalformedURLException e) { throw new McBasicRestException(HttpStatus.BAD_REQUEST, MCIdRegConstants.INVALID_IDP_URL, var1.getServletPath()); } catch (IOException e) { throw new McBasicRestException(HttpStatus.BAD_REQUEST, MCIdRegConstants.COULD_NOT_GET_DATA_FROM_IDP, var1.getServletPath()); } } var3.setApproved(true); String var4 = PasswordUtil.generatePassword(); keycloakAU.init(KeycloakAdminUtil.BROKER_INSTANCE); try { keycloakAU.createUser(var3.getShortName(), var4, var3.getShortName(), ""ADMIN"", var3.getEmail(), var3.getShortName(), true, KeycloakAdminUtil.ADMIN_USER); } catch (IOException e) { throw new McBasicRestException(HttpStatus.INTERNAL_SERVER_ERROR, MCIdRegConstants.ERROR_CREATING_ADMIN_KC_USER, var1.getServletPath()); } Organization var5 =  this.organizationService.saveOrganization(var3); var5.setPassword(var4); return new ResponseEntity<Organization>(var5, HttpStatus.OK); } "	0	0	0	0	0	1
@Override public void Func1(IMessageSenderWrapper var1, long var2, String var3, String var4) throws Exception { final PassthroughEntityTuple var5 = new PassthroughEntityTuple(var3, var4); Assert.assertTrue(null != this.activeEntities); CreationData<ActiveServerEntity<?, ?>> var6 = this.activeEntities.get(var5); if (null != var6) { ActiveServerEntity<?, ?> var7 = var6.entityInstance; PassthroughClientDescriptor var8 = var1.clientDescriptorForID(var2); var7.disconnected(var8); this.lockManager.releaseReadLock(var5, var1.getClientOrigin(), var2); } else { throw new EntityNotFoundException(var3, var4); } } 	0	0	0	0	0	1
public void Func1(ViewFragmentType var1, String var2, String var3) { if (var1 != ViewFragmentType.SPREADSHEET && var2 == null && mPossibleTableViewTypes != null) { var2 = getDefaultFileNameForViewFragmentType(var1); } mCurrentFragmentType = var1; mCurrentFileName = var2; mCurrentSubFileName = var3; showCurrentDisplayFragment(false); } 	0	0	0	0	0	1
"@Override public Void Func1(Void... var1) { try (final AutoCloseOutputStream os = new AutoCloseOutputStream(mPfd); final SmbFile file = mClient.openFile(mUri, ""r"")) { int var2; byte[] var3 = new byte[mBuffer.capacity()]; while ((mSignal == null || !mSignal.isCanceled()) && (var2 = file.read(mBuffer)) > 0) { mBuffer.get(var3, 0, var2); os.write(var3, 0, var2); mBuffer.clear(); } } catch (IOException e) { Log.e(TAG, ""Failed to read file."", e); try { mPfd.closeWithError(e.getMessage()); } catch (IOException exc) { Log.e(TAG, ""Can't even close PFD with error."", exc); } } return null; } "	0	0	0	0	0	1
public Map<String, String> Func1() { return metaInformation; } 	0	0	0	0	0	1
@Override public Observable<?> Func1(Observable<? extends Void> var1) { return writeOperationAckStrategy.Func1( var1 .takeWhile(notUnsubscribed(isUnsubscribed)) .map(bufferIsNotEmpty(byteBuffer)) ) .takeWhile(bufferIsNotEmpty(byteBuffer)); } 	0	0	0	0	0	1
private static CronDefinition Func1() { return CronDefinitionBuilder.defineCron() .withMinutes().and() .withHours().and() .withDayOfMonth().and() .withMonth().and() .withDayOfWeek().withValidRange(0,6).withMondayDoWValue(1).and() .enforceStrictRanges() .instance(); } 	0	0	0	0	0	1
"private static String Func1(String var1) { String var2 = ALL_NUMBERS.entrySet().stream() .filter(map -> var1.equals(map.getKey())) .map(map -> String.valueOf(map.getValue())) .collect(Collectors.joining()); return (var2.equals("""")) ? ""?"" : String.valueOf(var2); } "	0	0	0	0	0	1
"private static Credential Func1() throws Exception { GoogleClientSecrets var1 = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(PredictionsAPIClient.class.getResourceAsStream(""/client_secrets.json""))); if (var1.getDetails().getClientId().startsWith(""Enter"") || var1.getDetails().getClientSecret().startsWith(""Enter "")) { System.out.println( ""Overwrite the src/main/resources/client_secrets.json file with the client secrets file "" + ""you downloaded from the Quickstart tool or manually enter your Client ID and Secret "" + ""from https://code.google.com/apis/console/?api=prediction#project:858822147939 "" + ""into src/main/resources/client_secrets.json""); System.exit(1); } Set<String> var2 = new HashSet<String>(); var2.add(PredictionScopes.DEVSTORAGE_FULL_CONTROL); var2.add(PredictionScopes.DEVSTORAGE_READ_ONLY); var2.add(PredictionScopes.DEVSTORAGE_READ_WRITE); var2.add(PredictionScopes.PREDICTION); GoogleAuthorizationCodeFlow var3 = new GoogleAuthorizationCodeFlow.Builder( httpTransport, JSON_FACTORY, var1, var2) .setDataStoreFactory(dataStoreFactory) .build(); return new AuthorizationCodeInstalledApp(var3, new LocalServerReceiver()).Func1(""user""); } "	0	0	0	0	0	1
public static FormatterStep Func1(String var1, Throwing.Supplier<Throwing.Function<String, String>> var2) { Supplier<Throwing.Function<String, String>> var3 = Errors.rethrow().wrap(var2); Supplier<Throwing.Function<String, String>> var4 = Suppliers.memoize(var3); return new FileIndependent(var1, content -> var4.get().apply(content)); } 	0	0	0	0	0	1
"@Override public void Func1(Graphics var1){ super.Func1(var1); for(int var2 = 0; var2 < 20; var2++){ for(int var3 = 0; var3 < 10; var3++){ switch(currentLevel[var3 + (levelIDy * 10)][var2 + (levelIDx * 20)]){ case 0:var1.drawImage(air, 50 * var2, 50 * var3, null); break; case 1:var1.drawImage(ground, 50 * var2, 50 * var3, null); break; case 2:var1.drawImage(grass_ground, 50 * var2, 50 * var3, null); break; case 3:var1.drawImage(grass_air, 50 * var2, 50 * var3, null); break; } } } var1.drawImage(character.getCurrentAnimationImage(), character.getCoordinates().var2, character.getCoordinates().var3, null); character.checkNextScene(); if(isFlyingQ){ var1.drawImage(character.q.getCurrentAnimationImage(), character.q.getCoordinates().var2, character.q.getCoordinates().var3, null); character.q.checkNextScene(); } if(isFlyingW){ var1.drawImage(character.w.getCurrentAnimationImage(), character.w.getCoordinates().var2, character.w.getCoordinates().var3, null); character.w.checkNextScene(); } if(isFlyingE){ var1.drawImage(character.e.getCurrentAnimationImage(), character.e.getCoordinates().var2, character.e.getCoordinates().var3, null); character.e.checkNextScene(); } if(isFlyingR){ var1.drawImage(character.r.getCurrentAnimationImage(), character.r.getCoordinates().var2, character.r.getCoordinates().var3, null); character.r.checkNextScene(); } var1.setColor(Color.WHITE); var1.fillRect(375, 465, 250, 35); var1.setColor(Color.BLACK); if(character.q.getRemainingCooldown() == 0){ }else{ var1.drawString(String.valueOf((double)Math.round(((double)(character.q.getCooldown() - character.q.getRemainingCooldown()) / 1000) * 10)/10), 425, 495); } if(character.w.getRemainingCooldown() == 0){ }else{ var1.drawString(String.valueOf((double)Math.round(((double)(character.w.getCooldown() - character.w.getRemainingCooldown()) / 1000) * 10)/10), 475, 495); } if(character.e.getRemainingCooldown() == 0){ }else{ var1.drawString(String.valueOf((double)Math.round(((double)(character.e.getCooldown() - character.e.getRemainingCooldown()) / 1000) * 10)/10), 525, 495); }	//(double)Math.round(((character.e.getCooldown() - character.e.getRemainingCooldown()) / 1000) * 10)/10; if(character.r.getRemainingCooldown() == 0){ }else{ var1.drawString(String.valueOf((double)Math.round(((double)(character.r.getCooldown() - character.r.getRemainingCooldown()) / 1000) * 10)/10), 575, 495); } var1.setColor(Color.BLACK); int var4 = String.valueOf(Main.getCurrentFPS()).var4(); var4 *= 8; var1.drawString(Main.getCurrentFPS(), 1000 - var4, 12); var4 = String.valueOf(Main.getCurrentTPS()).var4(); var4 *= 8; var1.drawString(Main.getCurrentTPS(), 1000 - var4, 24); var1.dispose(); } "	0	0	0	0	0	1
"public List<Issue> Func1(String var1) { return jdbcTemplate.query(""select CONCAT(CONCAT(projectIssue.pkey, '-'), issue.issuenum) issueKey, issue.summary"" + "" from "" + SCHEMA_JIRA +  "".issuelink il"" + "" join "" + SCHEMA_JIRA +  "".issuelinktype lt on lt.id = il.linktype and nvl(lt.pstyle, ' ') = 'jira_subtask'"" + "" join "" + SCHEMA_JIRA +  "".jiraissue source on il.source = source.id"" + "" join "" + SCHEMA_JIRA +  "".project project on project.id = source.project"" + "" join "" + SCHEMA_JIRA +  "".jiraissue issue on issue.id = il.destination"" + "" join "" + SCHEMA_JIRA +  "".project projectIssue on issue.project = projectIssue.id"" + "" and CONCAT(CONCAT(project.pkey, '-'), source.issuenum) = '"" + var1 + ""'"", new SubtaskRowMapper()); } "	0	0	0	0	0	1
@Test public void Func1() { final List<Integer> var1 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); Flux<Integer> var2 = Flux.fromStream(var1.stream()); StepVerifier.create(var2) .recordWith(ArrayList::new) .expectNextCount(10) .consumeRecordedWith(c -> Assert.assertTrue(c.containsAll(var1))) .expectComplete() .verify(); } 	0	0	0	0	0	1
"private ServletRegistration Func1(ServiceHolder<Servlet> var1, ServiceReference<Servlet> var2) throws ServletException { boolean var3 = ServiceProperties.parseBoolean( var2,	HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_ASYNC_SUPPORTED); boolean var4 = ServiceProperties.parseBoolean(var2, Const.EQUINOX_LEGACY_REGISTRATION_PROP); List<String> var5 = StringPlus.from( var2.getProperty(HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_ERROR_PAGE)); String[] var6 = var5.toArray(new String[var5.size()]); Map<String, String> var7 = ServiceProperties.parseInitParams( var2, Const.SERVLET_INIT_PREFIX); List<String> var8 = StringPlus.from( var2.getProperty(HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_PATTERN)); String[] var9 = var8.toArray(new String[var8.size()]); Long var10 = (Long)var2.getProperty(Constants.SERVICE_ID); if (var4) { var10 = -var10; } String var11 = ServiceProperties.parseName( var2.getProperty( HttpWhiteboardConstants.HTTP_WHITEBOARD_SERVLET_NAME), var1.get()); if (((var9 == null) || (var9.length == 0)) && ((var6 == null) || var6.length == 0)) { throw new IllegalArgumentException( ""Either var9 or var6 must contain a value.""); } if (var9 != null) { for (String var12 : var9) { checkPattern(var12); } } ServletDTO var13 = new ServletDTO(); var13.var3 = var3; var13.initParams = var7; var13.name = var11; var13.var9 = sort(var9); var13.var10 = var10; var13.servletContextId = contextServiceId; var13.servletInfo = var1.get().getServletInfo(); ErrorPageDTO var14 = null; if ((var6 != null) && (var6.length > 0)) { var14 = new ErrorPageDTO(); var14.var3 = var3; long[] var15 = new long[0]; List<String> var16 = new ArrayList<String>(); for(String var17 : var6) { try { long var18 = Long.parseLong(var17); var15 = Arrays.copyOf(var15, var15.length + 1); var15[var15.length - 1] = var18; } catch (NumberFormatException nfe) { var16.add(var17); } } var14.var15 = var15; var14.var16 = var16.toArray(new String[var16.size()]); var14.initParams = var7; var14.name = var11; var14.var10 = var10; var14.servletContextId = contextServiceId; var14.servletInfo = var1.get().getServletInfo(); } ServletContextHelper var19 = getServletContextHelper( var1.getBundle()); ServletContext var20 = createServletContext( var1.getBundle(), var19); ServletRegistration var21 = new ServletRegistration( var1, var13, var14, var19, this, var4); ServletConfig var22 = new ServletConfigImpl( var11, var7, var20); var21.init(var22); endpointRegistrations.add(var21); return var21; } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { HeritrixFiles var1 = HeritrixFiles.getH1HeritrixFilesWithDefaultJmxFiles( new File(TestInfo.WORKING_DIR, ""bogus""), new JobInfoTestImpl(42L, 23L)); hc = HarvestController.getInstance(); String var2 = ""Error creating singleton of class '"" + ""dk.netarkivet.harvester.harvesting.controller.BnfHeritrixLauncher':""; try { hc.runHarvest(var1); fail(""Should have died with bogus file structure""); } catch (IOFailure e) { System.out.println(""error: "" + e.getMessage()); StringAsserts.assertStringContains(""Should have the right error message"", ""Unable to create index directory:"", e.getMessage()); } catch (ArgumentNotValid e) { StringAsserts.assertStringMatches(""Should have the right error message"", var2, e.getMessage()); } } "	0	0	0	0	0	1
"private boolean Func1(String var1) { return (var1.matches(""\\d+"") && (Integer.parseInt(var1) < 2400) && (Integer.parseInt(var1) >= 0) && (((Integer.parseInt(var1)) % 100) < 60)); } "	0	0	0	0	0	1
"private GenericRecord Func1(Schema var1, Iterator<OMElement> var2) { GenericRecord var3 = new GenericData.Record(var1); ConcurrentMap<String, Collection<Object>> var4 = new ConcurrentHashMap<String, Collection<Object>>(); while (var2.hasNext()) { OMElement var5 = var2.next(); String var6 = var5.getLocalName(); Field var7 = var1.getField(var6); if (var7 != null) { Type var8 = var7.var1().getType(); if (Type.ARRAY.equals(var8)) { Collection<Object> var9 = var4.get(var6); if (var9 == null) { var9 = new ArrayList<Object>(); var4.put(var6, var9); } if (var7.var1().getElementType().getType().equals(Type.RECORD)) { Iterator var10 = var5.getChildElements(); GenericRecord var11 = Func1(var7.var1().getElementType(), var10); var9.add(var11); } else if (var7.var1().getElementType().getType().equals(Type.ARRAY)) { log.warn(""Array avro var1 type is not supported inside another array type""); } else { var9.add(var5.getText()); } } else if (Type.RECORD.equals(var8)) { Iterator var10 = var5.getChildElements(); GenericRecord var11 = Func1(var7.var1(), var10); var3.put(var6, var11); Iterator var12 = var5.getAllAttributes(); GenericRecord var13 = getChildForAttributes(var7.var1(), var12); var3.put(var6, var13); } else if (Type.UNION.equals(var8)) { Iterator var10 = var5.getChildElements(); if (var10.hasNext()) { Schema var14 = var7.var1(); if (var14 != null) { List<Schema> var15 = var14.getTypes(); Iterator var16 = var15.iterator(); while (var16.hasNext()) { Schema var17 = (Schema) var16.next(); String var18 = var17.getName(); if (!var18.equals(""null"")) { GenericRecord var11 = Func1(var17, var10); var3.put(var6, var11); } else { continue; } } } } else { var3.put(var6, var5.getText()); } } else if (Type.ENUM.equals(var8) || Type.MAP.equals(var8) || Type.FIXED .equals(var8)) { log.warn(""Array avro var1 type : "" + var8 + "" is not supported.""); } else { var3.put(var6, var5.getText()); } } else { log.error(""Unrecognized var5 recieved : "" + var6); } } for (Entry<String, Collection<Object>> var19 : var4.entrySet()) { String var20 = var19.getKey(); Object var21 = var3.get(var20); Array<Object> var22 = null; Collection<Object> var23 = var19.getValue(); if (var21 == null) { var22 = new GenericData.Array<Object>(var23.size(), var1.getField(var20).var1()); } else { var22 = (Array<Object>) var21; } for (Object var24 : var23) { var22.add(var24); } var3.put(var20, var22); } return var3; } "	0	0	0	0	0	1
"public void Func1(ActionRequest var1, ActionResponse var2) throws Exception { HttpServletRequest var3 = PortalUtil .getHttpServletRequest(var1); ThemeDisplay var4 = (ThemeDisplay) var3 .getAttribute(WebKeys.THEME_DISPLAY); UploadPortletRequest var5 = PortalUtil .getUploadPortletRequest(var1); long var6 = var4.getUserId(); long var7 = var4.getScopeGroupId(); String var8 = ParamUtil.getString(var5, ""var8""); long var9 = ParamUtil.getLong(var5, ""var9""); String var10 = ParamUtil.getString(var5, ""var10""); String var11 = ParamUtil.getString(var5, ""var11""); String var12 = ParamUtil.getString(var5, ""var12""); String var13 = ParamUtil.getString(var5, ""var13""); Contact var14 = null; VCard var15 = null; String var16 = null; if (var9 > 0) { var14 = ContactServiceUtil.getContact(var9); var16 = var14.getUid(); var15 = var14.getVCard(); } else { var15 = new VCard(); var15.setUid(Uid.random()); var16 = var15.getUid().getValue(); } var2.setRenderParameter(""var9"", String.valueOf(var9)); var2.setRenderParameter(""var8"", var8); var2.setRenderParameter(""var10"", var10); var2.setRenderParameter(""var11"", var11); var2.setRenderParameter(""var12"", var12); var2.setRenderParameter(""var13"", var13); File[] var17 = var5.getFiles(""key.file""); File[] var18 = var5.getFiles(""logo.file""); File[] var19 = var5.getFiles(""photo.file""); File[] var20 = var5.getFiles(""sound.file""); Map<String, File[]> var21 = new HashMap<String, File[]>(); if (var17 != null) { var21.put(""key.file"", var17); } if (var18 != null) { var21.put(""logo.file"", var18); } if (var19 != null) { var21.put(""photo.file"", var19); } if (var20 != null) { var21.put(""sound.file"", var20); } try { var15 = PortletUtil.getVCard(var5, var15, var21); } catch (ImageFileFormatException iffe) { SessionErrors.add(var1, ""the-image-file-format-is-not-supported""); var5.setAttribute(""CONTACT"", var14); return; } catch (KeyFileFormatException kffe) { SessionErrors.add(var1, ""the-key-file-format-is-not-supported""); var5.setAttribute(""CONTACT"", var14); return; } catch (SoundFileFormatException sffe) { SessionErrors.add(var1, ""the-sound-file-format-is-not-supported""); var5.setAttribute(""CONTACT"", var14); return; } String var22 = Ezvcard.write(var15).version(VCardVersion.V4_0).go(); ServiceContext var23 = ServiceContextFactory.getInstance( Contact.class.getName(), var1); String[] var24 = PortletUtil.getAssetTagNames(var15); var23.setAssetTagNames(var24); if (var9 > 0) { var14 = ContactServiceUtil.updateContact(var6, var7, var9, var22, var16, var23); SessionMessages.add(var1, ""request_processed"", PortletUtil.translate(""successfully-updated-the-var14"")); } else { var14 = ContactServiceUtil.addContact(var6, var7, var22, var16, var23); SessionMessages.add(var1, ""request_processed"", PortletUtil.translate(""successfully-added-the-var14"")); } var5.setAttribute(""CONTACT"", var14); } "	0	0	0	0	0	1
"@Override public void Func1(DataSnapshot var1) { Map<String,String> var2 = (Map<String,String>)var1.getValue(); if(var2!=null && var2.get(team_name)!=null){ reg_team_name.setError(""Team Name Already Exists""); reg_team_name.requestFocus(); progressDialog.dismiss(); return; } else{ DatabaseReference var3 = FirebaseDatabase.getInstance().getReference().child(age_group).child(""Leaderboard"").child(team_name); Map<String,String> var4 = new HashMap<String, String>(); var4.put(""Team Name"",team_name); var4.put(""Matches Played"",""0""); var4.put(""Matches Won"",""0""); var4.put(""Matches Drawn"",""0""); var4.put(""Matches Lost"",""0""); var4.put(""Goals Scored"",""0""); var4.put(""Goals Conceived"",""0""); var4.put(""Red Cards"",""0""); var4.put(""Points"",""0""); var3.setValue(var4); databaseReference1 = FirebaseDatabase.getInstance().getReference().child(age_group).child(""Team Names"").child(team_name); databaseReference1.child(""Password"").setValue(password); storageReference = FirebaseStorage.getInstance().getReference().child(age_group).child(team_name); if(profile_pic_uri!=null) { byte[] var5 = generateThumbnailForImage(profile_pic_uri); storageReference.child(""Team Profile Pic Thumbnail"").putBytes(var5).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() { @Override public void Func2(UploadTask.TaskSnapshot var6) { Uri var7 = var6.getDownloadUrl(); databaseReference1.child(""Team Profile Pic Thumbnail Url"").setValue(var7.toString()); } }); storageReference.child(""Team Profile Pic"").putFile(profile_pic_uri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() { @Override public void Func2(UploadTask.TaskSnapshot var6) { Uri var7 = var6.getDownloadUrl(); databaseReference1.child(""Team Profile Pic Url"").setValue(var7.toString()); } }); } databaseReference = FirebaseDatabase.getInstance().getReference().child(age_group).child(""Team Description"").child(team_name); databaseReference.child(""Coach Name"").setValue(coach_name); databaseReference.child(""Contact Number"").setValue(coach_contact); databaseReference.child(""Email"").setValue(coach_email); databaseReference.child(""Location"").setValue(location); storageReference = storageReference.child(""Player ID Scans""); databaseReference.child(""Number Of Players"").setValue(names_of_players.size()); databaseReference = databaseReference.child(""Players""); for(int var8=0;var8<names_of_players.size();var8++){ String var9 = jersey_number_of_players.get(var8)+""-""+ names_of_players.get(var8); final DatabaseReference var10 = databaseReference.child(var9); Map<String,String> var11 = new HashMap<String, String>(); var11.put(""Name"",names_of_players.get(var8)); var11.put(""Contact"",contact_of_players.get(var8)); var11.put(""Jersey Number"",jersey_number_of_players.get(var8)); var10.setValue(var11); storageReference.child(var9).putFile(uri_of_players.get(var8)).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() { @Override public void Func2(UploadTask.TaskSnapshot var6) { Uri var7 = var6.getDownloadUrl(); var10.child(""Player ID Scans Url"").setValue(var7.toString()); progressDialog.dismiss(); } }); } Intent var12 = new Intent(RegistrationActivity.this,MainActivity.class); var12.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY|Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(var12); } } "	0	0	0	0	0	1
private void Func1(){ setHealth(getMaxHealth()); } 	0	0	0	0	0	1
@Override public MetaClass Func1() { return new APTClass(actualParameterType); } 	0	0	0	0	0	1
"@SuppressWarnings(""WeakerAccess"") @NotNull String Func1() { throw new UnsupportedOperationException(""todo""); } "	0	0	0	0	0	1
@Nonnull static public List<UIMessage> Func1(@Nonnull NodeBase var1) throws Exception { final List<UIMessage> var2 = new ArrayList<>(); DomUtil.walkTree(var1, new DomUtil.IPerNode() { @Override public Object Func2(NodeBase var3) throws Exception { List<IBinding> var4 = var3.getBindingList(); if(null != var4) { for(IBinding var5 : var4) { UIMessage var6 = var5.getBindError(); if(null != var6) var2.add(var6); } } return null; } @Override public Object Func3(NodeBase var3) throws Exception { return null; } }); return var2; } 	0	0	0	0	0	1
"@PreAuthorize(""hasAnyRole('ROLE_SHR_FACILITY', 'ROLE_SHR_PROVIDER', 'ROLE_SHR_PATIENT', 'ROLE_Datasense Facility')"") @RequestMapping(value = ""/patients/{var2}/encounters"", method = RequestMethod.GET, produces = {""application/json"", ""application/atom+xml""}) public DeferredResult<EncounterSearchResponse> Func1( final HttpServletRequest var1, @PathVariable final String var2, @RequestParam(value = ""var3"", required = false) String var3) { logger.debug(""Find all encounters by health id: "" + var2); final UserInfo var4 = getUserInfo(); logAccessDetails(var4, String.format(""Find all encounters of patient (var2) %s"", var2)); final DeferredResult<EncounterSearchResponse> var5 = new DeferredResult<>(); try { final boolean var6 = isAccessRestrictedToEncounterFetchForPatient(var2, var4); final Date var7 = getRequestedDate(var3); Observable<List<EncounterBundle>> var8 = encounterService.Func1(var2, var7, 200); var8.subscribe(new Action1<List<EncounterBundle>>() { @Override public void Func2(List<EncounterBundle> var9) { try { if (var6 && isConfidentialPatient(var9)) { Forbidden var10 = new Forbidden(format(""Access for patient %s data for is denied"", var2)); logger.debug(var10.getMessage()); var5.setErrorResult(var10); } else { var9 = filterEncounters(var6, var9); EncounterSearchResponse var11 = new EncounterSearchResponse( getRequestUri(var1, var7, null), var9); logger.debug(var11.toString()); var5.setResult(var11); } } catch (UnsupportedEncodingException e) { logger.debug(e.getMessage()); var5.setErrorResult(e); } } }, new Action1<Throwable>() { @Override public void Func2(Throwable var12) { logger.debug(var12.getMessage()); var5.setErrorResult(var12); } }); } catch (Exception e) { logger.debug(e.getMessage()); var5.setErrorResult(e); } return var5; } "	0	0	0	0	0	1
@Override public void Func1(JsonObject var1, String var2) { JsonArray var3 = var1.get(ConfigNames.DIMENSIONS).getAsJsonArray(); BuilderLogic var4 = OreSpawn.API.getLogic(FilenameUtils.getBaseName(var2)); List<DimensionBuilder> var5 = new ArrayList<>(); for (JsonElement var6 : var3 ) { JsonObject var7 = var6.getAsJsonObject(); int var8 = var7.has(ConfigNames.DIMENSION) ? var7.get(ConfigNames.DIMENSION).getAsInt() : OreSpawn.API.dimensionWildcard(); DimensionBuilder var9 = var4.newDimensionBuilder(var8); List<SpawnBuilder> var10 = new ArrayList<>(); JsonArray var11 = var7.get(ConfigNames.ORES).getAsJsonArray(); for (JsonElement var12 : var11) { SpawnBuilder var13 = var9.newSpawnBuilder(null); JsonObject var14 = var12.getAsJsonObject(); OreBuilder var15 = var13.newOreBuilder(); String var16 = var14.get(ConfigNames.ORES).getAsString(); if (var14.has(ConfigNames.STATE)) { String var17 = var14.get(ConfigNames.STATE).getAsString(); var15.setOre(var16, var17); } else { var15.setOre(var16); } FeatureBuilder var18 = var13.newFeatureBuilder(null); var18.setGenerator(var14.get(ConfigNames.FEATURE).getAsString()); var18.setParameters(var14.get(ConfigNames.PARAMETERS).getAsJsonObject()); String var19 = var14.get(ConfigNames.REPLACEMENT).getAsString(); IBlockState var20 = Helpers.getReplacement(var19, var8); BiomeBuilder var21 = var13.newBiomeBuilder(); Helpers.loadBiomesV1( var21, var14 ); List<IBlockState> var22 = new ArrayList<>(); var22.add(var20); var13.create(var21, var18, var22, var15); var10.add(var13); } var9.create(var10.toArray(new SpawnBuilderImpl[var10.size()])); var5.add(var9); } var4.create(var5.toArray(new DimensionBuilderImpl[var5.size()])); OreSpawn.API.registerLogic(var4); } 	0	0	0	0	0	1
"private void Func1(String var1) { processBuilder = new ProcessBuilder(var1, ""-y"", ""-f"", ""rawvideo"", ""-vcodec"", ""rawvideo"", ""-s"", pg.width + ""x"" + pg.height, ""-pix_fmt"", ""rgb24"", ""-r"", """" + ffmpegFrameRate, ""-i"", ""-"", ""-an"", ""-vcodec"", ""h264"", ""-pix_fmt"", ""yuv420p"", ""-crf"", """" + ffmpegCrfQuality, ""-metadata"", ""comment="" + ffmpegMetadataComment, outputFilePath); processBuilder.redirectErrorStream(true); if (saveDebugInfo) { ffmpegOutputMsg = new File(outputFilePath + "".txt""); processBuilder.redirectOutput(ffmpegOutputMsg); } processBuilder.redirectInput(ProcessBuilder.Redirect.PIPE); try { process = processBuilder.start(); } catch (Exception e) { e.printStackTrace(); err(); } ffmpeg = process.getOutputStream(); ffmpegFound = true; } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { Weapon var1 = (Weapon) ItemDB.lookup(""PPC""); assertEquals(1080.0, var1.getRangeMax(null), 0.0); } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { Weapon var1 = (Weapon) ItemDB.lookup(""PPC""); assertEquals(540.0, var1.getRangeLong(null), 0.0); } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { BallisticWeapon var1 = (BallisticWeapon) ItemDB.lookup(""GAUSS RIFLE""); assertEquals(1.0, var1.getRangeEffectivity(0, null), 0.0); assertEquals(1.0, var1.getRangeEffectivity(var1.getRangeLong(null), null), 0.0); assertEquals(0.5, var1.getRangeEffectivity((var1.getRangeLong(null) + var1.getRangeMax(null)) / 2, null), 0.0); assertEquals(0.0, var1.getRangeEffectivity(var1.getRangeMax(null), null), 0.0); assertTrue(var1.getRangeEffectivity(750, null) < 0.95); assertTrue(var1.getRangeEffectivity(750, null) > 0.8); } "	0	0	0	0	0	1
"@Test public void Func1() throws Exception { Weapon var1 = (Weapon) ItemDB.lookup(""LB 10-X AC""); assertTrue(var1.getDamagePerShot() > 5); } "	0	0	0	0	0	1
"public void Func1(final ActionEvent var1) { final ReportDesignerContext var2 = getReportDesignerContext(); final ReportDocumentContext var3 = getActiveContext(); if (var3 == null) { return; } if (var3.isChanged()) { final int var4 = JOptionPane.showConfirmDialog(var2.getView().getParent(), Messages.getInstance().getString(""PublishToServerAction.ReportModifiedWarning.Message""), Messages.getInstance().getString(""PublishToServerAction.ReportModifiedWarning.Title""), JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE); if (var4 == JOptionPane.YES_OPTION) { if (SaveReportAction.saveReport (var2, var3, var2.getView().getParent()) == false) { return; } } if (var4 == JOptionPane.CANCEL_OPTION) { return; } } final PublishToServerTask var5 = new PublishToServerTask(var2, var2.getView().getParent()); final LoginTask var6 = new LoginTask (var2, var2.getView().getParent(), var5, null, true); SwingUtilities.invokeLater(var6); } "	0	0	0	0	0	1
public String Func1() { return date; } 	0	0	0	0	0	1
public String Func1(String var1) throws JWTClientException { return JWTClientUtil.generateSignedJWTAssertion(var1, jwtConfig, isDefaultJWTClient); } 	1	0	1	0	1	0
protected int Func1 (int var1, boolean var2) { if (protoStack.isEmpty() || var1 == 0) return var1; if (var1 > 0) { if (attrs.isUnlimitedVending()) return 0; int var3 = count; count = Math.min(count + var1, getMaxCapacity()); if (count != var3 && var2) onAmountChanged(); if (attrs.isVoid()) return 0; return var1 - (count - var3); } else { int var3 = count; setStoredItemCount(var3 + var1, var2); return var1 - (count - var3); } } 	1	0	0	1	1	0
@EventHandler public void Func1(EntityDamageByEntityEvent var1){ if(var1.getDamager() instanceof Player){ Player var2 = (Player)var1.getDamager(); QueObject var3 = new QueObject(var2.getUniqueId().toString(), SQLTABLE.DAMAGE_CAUSED, var2.getDisplayName()); var3.Quantity = (int)var1.getFinalDamage(); QueObjects.add(var3); checkQue(); } } 	1	1	1	0	1	0
@EventHandler public void Func1(AsyncPlayerChatEvent var1){ QueObjects.add(new QueObject(var1.getPlayer().getUniqueId().toString(), SQLTABLE.PLAYER_CHAT, var1.getPlayer().getDisplayName())); checkQue(); } 	1	0	1	0	1	0
@EventHandler public void Func1(BlockBreakEvent var1){ if(var1.getPlayer() != null) QueObjects.add(new QueObject(var1.getPlayer().getUniqueId().toString(), SQLTABLE.BLOCKS_BROKEN, var1.getPlayer().getDisplayName())); checkQue(); } 	1	1	1	0	1	0
"@EventHandler public void Func1(PlayerJoinEvent var1){ QueObjects.add(new QueObject(var1.getPlayer().getUniqueId().toString(), SQLTABLE.JOINS, var1.getPlayer().getDisplayName())); checkQue(); if(config.getBoolean(""auto_import"", true)){ new ImportProcessor(var1.getPlayer(), playerVersion, QueObjects).run(); } } "	1	0	1	0	1	0
"static AxoObject Func1() { AxoObject var1 = new AxoObject(""xfade~"", ""crossfade between two inputs""); var1.inlets.add(new InletFrac32Buffer(""i1"", ""input"")); var1.inlets.add(new InletFrac32Buffer(""i2"", ""input"")); var1.inlets.add(new InletFrac32Pos(""c"", ""control"")); var1.outlets.add(new OutletFrac32Buffer(""var1"", ""output"")); var1.sKRateCode = ""   int32_t ccompl = ((128<<20)-%c%);\n""; var1.sSRateCode = ""   {\n"" + ""      int64_t a = (int64_t)%i2% * %c%;\n"" + ""      a += (int64_t)%i1% * ccompl;\n"" + ""      %var1%= a>>27;\n"" + ""   }\n""; return var1; } "	0	0	1	1	1	0
"static AxoObject Func1() { AxoObject var1 = new AxoObject(""sine"", ""FM sine wave oscillator, linear interpolated table, s-rate pitch input""); var1.outlets.add(new OutletFrac32BufferBipolar(""wave"", ""sine wave"")); var1.inlets.add(new InletFrac32Bipolar(""pitchm"", ""pitch modulation"")); var1.inlets.add(new InletFrac32Buffer(""fm"", ""frequency modulation"")); var1.inlets.add(new InletFrac32Buffer(""pm"", ""phase modulation"")); var1.params.add(new ParameterFrac32SMapPitch(""pitch"")); var1.sLocalData = ""uint32_t Phase;""; var1.sInitCode = ""Phase = 0;""; var1.sKRateCode = ""   int32_t freq;\n"" + ""   MTOFEXTENDED(%pitch% + %pitchm%,freq);\n""; var1.sSRateCode = ""Phase += freq + %fm%;\n"" + ""int32_t r;\n"" + ""int32_t p2 = Phase + (%pm%<<4);\n"" + ""SINE2TINTERP(p2,r)\n"" + ""%wave%= (r>>4);\n""; return var1; } "	0	0	1	1	1	0
"@Override public MotTest Func1(long var1) { logger.debug(""Entry Func1 "" + var1); MotTest var2 = null; logger.debug(""Prepare Func1 "" + var1); try { Connection var3 = connectionManager.getConnection();; try (PreparedStatement stmt = var3.prepareStatement(MotTestReadSql.queryGetMotTestCurrentById)) { stmt.setLong(1, var1); logger.debug(""Resultset Func1 "" + var1); try (ResultSet resultSet = stmt.executeQuery()) { if (resultSet.next()) { logger.debug(""Map Func1 "" + var1); var2 = mapResultSetToMotTestCurrent(resultSet); this.motTestMap.put(var1, var2); } } } } catch (SQLException e) { throw new InternalException(e); } logger.debug(""Return Func1 "" + var1); return var2; } "	1	0	1	1	1	0
@Override public void Func1() { Func1(requestGatewayBlocking(), null, -1); } 	1	0	0	1	1	0
public MainEvent Func1(EventProducerNode var1, int var2, int var3) { double var4 = 0.0; MainEvent var5 = new MainEvent(Void, var4); for (String var6 : getAllEvents()) { double var7 = 0.0; for (int var8 = var2; var8 < var3; var8++) var7 += proportions.get(var1).get(var8).get(var6); var7 /= (var3 - var2); if (var7 > var4) { var5 = new MainEvent(var6, var7); var4 = var7; } } return var5; } 	0	0	1	1	1	0
public static double Func1(Civilization var1) { double var2 = 1.0; double var3 = (CivGlobal.highestCivEra-1) - var1.getCurrentEra(); if (var3 > 0) { var2 = (var3/10); } return var2; } 	1	0	1	1	1	0
"public void Func1(String var1) { String var2 = ""{\""message_type\"":\""recognizer_loop:utterance\"", \""context\"": null, \""metadata\"": {\""utterances\"": [\"""" + var1 + ""\""]}}""; try { if (mWebSocketClient.getConnection().isClosed()) { if (status == NetworkUtil.NETWORK_STATUS_WIFI) { connectWebSocket(); } } mWebSocketClient.send(var2); } catch (WebsocketNotConnectedException e) { Toast.makeText(getApplicationContext(), getResources().getString(R.string.websocket_closed), Toast.LENGTH_SHORT).show(); } } "	1	0	1	0	1	0
"final public void Func1() throws ParseException { trace_call(""Func1""); try { jj_consume_token(CONTINUE); switch ((jj_ntk==-1)?jj_ntk():jj_ntk) { case IDENTIFIER: jj_consume_token(IDENTIFIER); break; default: jj_la1[105] = jj_gen; ; } jj_consume_token(SEMICOLON); } finally { trace_return(""Func1""); } } "	0	0	1	1	1	0
"final public void Func1() throws ParseException { trace_call(""Func1""); try { Token var1; switch ((jj_ntk==-1)?jj_ntk():jj_ntk) { case CASE: ASTCaseSwitchLabel var2 = new ASTCaseSwitchLabel(this, JJTCASESWITCHLABEL); boolean var3 = true; jjtree.openNodeScope(var2); try { var1 = getToken(1); jj_consume_token(CASE); Expression(); jj_consume_token(COLON); jjtree.closeNodeScope(var2, true); var3 = false; setFirstLastToken(var2, var1, getToken(0)); } catch (Throwable jjte001) { if (var3) { jjtree.clearNodeScope(var2); var3 = false; } else { jjtree.popNode(); } if (jjte001 instanceof RuntimeException) { {if (true) throw (RuntimeException)jjte001;} } if (jjte001 instanceof ParseException) { {if (true) throw (ParseException)jjte001;} } {if (true) throw (Error)jjte001;} } finally { if (var3) { jjtree.closeNodeScope(var2, true); } } break; case _DEFAULT: ASTDefaultSwitchLabel var4 = new ASTDefaultSwitchLabel(this, JJTDEFAULTSWITCHLABEL); boolean var5 = true; jjtree.openNodeScope(var4); try { var1 = getToken(1); jj_consume_token(_DEFAULT); jj_consume_token(COLON); jjtree.closeNodeScope(var4, true); var5 = false; setFirstLastToken(var4, var1, getToken(1)); } finally { if (var5) { jjtree.closeNodeScope(var4, true); } } break; default: jj_la1[98] = jj_gen; jj_consume_token(-1); throw new ParseException(); } } finally { trace_return(""Func1""); } } "	0	0	1	1	1	0
public boolean Func1(String var1) { Account var2 = accountMap.get(var1); if (var2 == null) { return false; } var2.setState(State.CLOSED); return true; } 	1	0	1	1	1	0
"private Set<Node> Func1(ListView<?> var1) { Set<Node> var2 = var1.lookupAll(""*""); Set<Node> var3 = new HashSet<>(); for (Node var4 : var2) { if (var4 instanceof ListCell<?> && var1.equals((ListCell<?>) var4).getListView()) { var3.add(var4); } } return var3; } "	1	1	0	1	1	0
"private void Func1(final Stage var1) { try { TrayIcon var2 = platformService.getTrayIcon(var1); statusBinder.message().addListener((observable, oldValue, newValue) -> { if (newValue != null && !newValue.isEmpty()) { var2.setToolTip(""Status: "" + newValue); } }); final SystemTray var3 = SystemTray.getSystemTray(); var3.add(var2); } catch (PlatformNotSupportedException | AWTException e) { LOG.warn(""Could not instantiate tray icon. Reverting to default behaviour"", e); var1.setOnCloseRequest(event -> Platform.exit()); } } "	0	0	1	1	1	0
"private void Func1(String var1, String var2, Object ... var3){ String var4 = String.var2(""%s %s %s\n"", MsTestLogger.prefix, var1, var2); if (listener != null) { listener.getLogger().Func1(var4, var3); } } "	1	0	1	1	1	0
"@Transactional public void Func1(Store var1) throws IllegalArgumentException { if (var1 != null && var1.getName() != null && !var1.getName().equals("""")) { storeDAO.insert(var1); } else throw new IllegalArgumentException(String.format(""Illegal arguments in var1 id %d"", var1.getId())); } "	1	0	1	0	1	0
"public void Func1(File var1) throws IOException { CivChat2.debugmessage(""ChatMan is trying to loadignoredplayers var1""); FileInputStream var2 = new FileInputStream(var1); BufferedReader var3 = new BufferedReader(new InputStreamReader(var2)); if(var3.readLine() == null){ CivChat2.debugmessage(""IgnoreList File is empty...""); var3.close(); return; } String var4; while ((var4 = var3.readLine()) != null) { CivChat2.debugmessage(""Reading Ignore List curLine: "" + var4); String var5[] = var4.split("",""); String var6 = var5[0]; CivChat2.debugmessage(""Owner="" + var6 + "" # of Ignorees: "" + var5.length); List<String> var7 = new ArrayList<>(); for (int var8 = 0; var8 < var5.length; var8++) { if(var8 == 0){ var8=1; } var7.add(var5[var8]); CivChat2.debugmessage(""Adding ignoree name="" + var5[var8]); } ignorePlayers.put(var6, var7); } if(ignorePlayers != null){ CivChat2.debugmessage(""Loaded ignore list... ["" + ignorePlayers.size() + ""] ignore entries""); } var3.close(); var2.close(); } "	0	1	0	1	1	0
"private void Func1(final Page var1, final Page var2, final Object var3, boolean var4, PageAnimator.AnimationDirection var5) { if (var4) { mAnimating = true; } var1.onShow(var3); if (var2 != null) { if (var4) { var2.getView().bringToFront(); } var2.onCover(); } mCurPage = var1; mPageStack.addLast(var1); mContainerView.addView(var1.getView()); mViewTransparentMask.bringToFront(); if (mEnableDebug) { Log.d(TAG, String.format("">>>> pushPage, pagestack=%d, %s, var3=%s"", mPageStack.size(), var1, var3)); } if (var4 && mPageAnimator != null && !var1.onPushPageAnimation(var2, var1, var5)) { mPageAnimator.onPushPageAnimation(var2, var1, var5); } int var6 = var1.getAnimationDuration(); if (var6 == -1 && mPageAnimator != null) { var6 = mPageAnimator.getAnimationDuration(); } if (var4 && var6 != -1) { var1.postDelayed(new Runnable() { @Override public void Func2() { doFinalWorkForPushPage(var2, var1, var3); } }, var6); } else { doFinalWorkForPushPage(var2, var1, var3); } } "	1	0	0	1	1	0
public void Func1(ValuesStorage var1, Property<?>... var2) { if (var1 != null) { if (setValues == null) { setValues = newValuesStorage(); } for (Property<?> var3 : var2) { String var4 = var3.getName(); if (var1.containsKey(var4)) { Object var5 = var3.accept(valueCastingVisitor, var1.get(var4)); if (shouldSaveValue(var4, var5)) { SquidUtilities.putInto(this.setValues, var3.getName(), var5, true); } } } } } 	1	1	0	0	1	0
"<T> Result Func1(List<T> var1, String var2) { JsonNode var3 = mapper.valueToTree(new ResourceList<T>(var1)); ArrayNode var4 = (ArrayNode)var3.get(""var4""); for (int var5=0; var5 < var4.size(); var5++) { ((ObjectNode)var4.get(0)).put(""type"", var2); } return ok(var3); } "	0	0	1	1	1	0
@Test public void Func1() throws Exception { InstructionDiapason var1 = new InstructionDiapason(word1, word4); assertFalse(var1.contains(word0)); assertTrue(var1.contains(word1)); assertTrue(var1.contains(word2)); assertTrue(var1.contains(word3)); assertFalse(var1.contains(word4)); assertFalse(var1.contains(word5)); } 	0	0	1	1	1	0
public void Func1(int var1, Object var2){ this.Func1(var1, var2); } 	1	0	1	0	1	0
"@Override public AppInstanceStatusResource Func1(AppInstanceStatus var1) { return createResourceWithId(""/"" + var1.getId(), var1, owningApp.getDeploymentId().toString()); } "	1	0	1	0	1	0
public void Func1(String var1) { Object var2 = controllers.remove(var1); Class var3 = controllerClassMapping.remove(var1); containerManager.Func1(var2, var3); Object var4 = models.get(var1); if (var4 != null) { beanRepository.delete(var4); } Subscription var5 = mBeanSubscriptions.remove(var1); if(var5 != null) { var5.unsubscribe(); } } 	1	0	1	0	1	0
"@Test public void Func1() throws Exception { environmentVariables.setProperty(MAX_RETRIES, ""5""); environmentVariables.setProperty(JUNIT_RETRY_TESTS, ""true""); SerenityRunner var1 = new SerenityRunner(FailThenPassSample.class, new WebDriverFactory(environmentVariables), new SystemPropertiesConfiguration(environmentVariables)); CapturingNotifier var2 = new CapturingNotifier(); var1.run(var2); List<TestOutcome> var3 = var1.getTestOutcomes(); assertThat(var3.size(), is(1)); assertThat(var3.get(0).getResult(), is(TestResult.SUCCESS)); assertThat(var2.failed, is(false)); } "	0	0	1	1	1	0
private boolean Func1(float var1, int var2) { if (checkPermanentLimit1(var1)) { if (limits1.getTemporaryLimits().size() == 0) { return true; } else { OverloadImpl var3 = checkTemporaryLimits1(var1, var2); return var3 != null ? true : false; } } else { return false; } } 	1	0	1	0	1	0
private synchronized void Func1(boolean var1) { if (status != TxStatus.CLOSED) { status = TxStatus.CLOSED; if (var1 && !commitAttempted) { Stamp var2 = env.getSharedResources().getOracleClient().getStamp(); if (startTs <= var2.getGcTimestamp()) { throw new StaleScanException(); } } env.getSharedResources().getTimestampTracker().removeTimestamp(startTs); } } 	1	1	0	1	1	0
public boolean Func1(CommitData var1, Stamp var2) throws AccumuloException, AccumuloSecurityException { if (startTs <= var2.getGcTimestamp()) { rollback(var1); return false; } return Func1(var1, var2.getTimestamp()); } 	1	0	1	1	1	0
public static void Func1(final PrintWriter var1, final PgDiffArguments var2, final PgSchema var3, final PgSchema var4, final SearchPathHelper var5) { for (final PgTable var6 : var4.getTables()) { if (var3 == null || !var3.containsTable(var6.getName())) { continue; } final PgTable var7 = var3.getTable(var6.getName()); updateTableColumns( var1, var2, var7, var6, var5); checkWithOIDS(var1, var7, var6, var5); checkInherits(var1, var7, var6, var5); checkTablespace(var1, var7, var6, var5); addAlterStatistics(var1, var7, var6, var5); addAlterStorage(var1, var7, var6, var5); alterComments(var1, var7, var6, var5); } } 	1	1	0	0	1	0
public Pipeline Func1() { Pipeline var1 = new Pipeline(); var1.setClient(client); return var1; } 	1	0	1	1	1	0
public static long Func1(PreciseConnectivityAlarm var1) { long var2 = var1.getStartTime() - System.currentTimeMillis(); if (var2 < 0) { if (var2 + var1.getDuration() > 0) { var2 += var1.getDuration(); } else { var2 = TimeUnit.DAYS.toMillis(getNumberOfDaysUntilNextAlarm(var1)) - (System.currentTimeMillis() - var2); } } return var2; } 	1	0	0	1	1	0
public Item Func1(int var1) { if (var1 == 0) { return get(0); } else return items.remove(var1); } 	1	1	1	0	1	0
"@Override protected PhdIndividualProgramProcess Func1(PhdIndividualProgramProcess var1, User var2, Object var3) { PhdIndividualProgramProcessBean var4 = (PhdIndividualProgramProcessBean) var3; DateTime var5 = var4.getStateDate().toDateTimeAtStartOfDay(); PhdProgramProcessState.createWithGivenStateDate(var1, PhdIndividualProgramProcessState.WORK_DEVELOPMENT, var2.getPerson(), """", var5); if (var1.getRegistration() == null) { return var1; } if (var1.getRegistration().isConcluded() || var1.getRegistration().isSchoolPartConcluded()) { return var1; } if (var1.getRegistration().isActive()) { throw new DomainException(""error.PhdIndividualProgramProcess.set.work.development.state.registration.is.active""); } RegistrationState var6 = var1.getRegistration().getLastActiveState(); if (!var6.isActive()) { throw new DomainException( ""error.PhdIndividualProgramProcess.set.work.development.state.registration.last.state.is.not.active""); } RegistrationState.createRegistrationState(var1.getRegistration(), var2.getPerson(), var5, var6.getStateType()); return var1; } "	1	0	1	1	1	0
public ParseResult Func1(RSyntaxDocument var1, String var2) { Element var3 = var1.getDefaultRootElement(); int var4 = var3.getElementCount(); if (taskPattern==null || var2==null || SyntaxConstants.SYNTAX_STYLE_NONE.equals(var2)){ result.clearNotices(); result.setParsedLines(0, var4-1); return result; } result.clearNotices(); result.setParsedLines(0, var4-1); for (int var5=0; var5<var4; var5++) { Token var6 = var1.getTokenListForLine(var5); int var7 = -1; int var8 = -1; String var9 = null; while (var6!=null && var6.isPaintable()) { if (var6.isComment()) { var7 = var6.getOffset(); var9 = var6.getLexeme(); Matcher var10 = taskPattern.matcher(var9); if (var10.find()) { var8 = var10.var8(); var7 += var8; break; } } var6 = var6.getNextToken(); } if (var8>-1) { var9 = var9.substring(var8); int var11 = var9.length(); TaskNotice var12 = new TaskNotice(this, var9, var5, var7, var11); var12.setLevel(ParserNotice.Level.INFO); var12.setShowInEditor(false); var12.setColor(COLOR); result.addNotice(var12); } } return result; } 	1	0	1	1	1	0
"public Conjunction<U, R, G, S, F>  Func1() { addToBuf(""deleted"", Finder.Operator.NE, 0); return conjunction; } "	0	0	1	1	1	0
@Override public List<ApplicationGatewayBackendAddress> Func1() { List<ApplicationGatewayBackendAddress> var1 = new ArrayList<>(); ApplicationGatewayBackend var2 = this.var2(); if (var2 != null && var2.var1() != null) { var2.var1(); } return Collections.unmodifiableList(var1); } 	1	1	0	0	1	0
"public static Optional<InputPath> Func1(final FileSystem var1, final String var2) { assert var1 != null : ""Parameter 'var1' of method 'Func1' must not be null""; assert var2 != null : ""Parameter 'var2' of method 'Func1' must not be null""; final String var3 = FileUtility.convertPathToUniversalForm(var2); return Optional.ofNullable(var1.inputFile(f -> f.var2().equals(var3))); } "	0	1	0	0	1	0
String Func1(final HttpURLConnection var1) throws IOException { Reader var2 = null; final int var3 = var1.getResponseCode(); if (var3 == 200) { var2 = new InputStreamReader(var1.getInputStream()); } else { InputStream var4 = var1.getErrorStream(); if(var4 == null && var3 == 404) { var4 = var1.getInputStream(); } var2 = new InputStreamReader(var1.getErrorStream()); } final BufferedReader var5 = new BufferedReader(var2); final char[] var6 = new char[256]; final StringBuilder var7 = new StringBuilder(); try { for (;;) { final int var8 = var5.read(var6, 0, var6.length); if (var8 < 0) { break; } var7.append(var6, 0, var8); } } finally { var5.close(); } return var7.toString(); } 	1	0	0	0	1	0
"static AxoObject Func1() { AxoObject var1 = new AxoObject(""samplehold~ cheap"", ""low-quality audio rate sample and hold using blit synthesis (not bandwidth limited)""); var1.inlets.add(new InletFrac32Buffer(""in"", ""level input"")); var1.inlets.add(new InletFrac32Buffer(""trig"", ""trigger input, triggers on rising zero-crossing"")); var1.outlets.add(new OutletFrac32BufferBipolar(""out"", ""audio output"")); var1.sLocalData = ""  int32_t in0;\n"" + ""  int32_t hold;\n""; var1.sInitCode = ""  in0 = 0;\n"" + ""  hold = 0;\n""; var1.sSRateCode = ""  if ((%trig%>0)&&!(in0>0)){\n"" + ""    hold = %in%>>1;\n"" + ""  }\n"" + ""  in0 = %trig%;\n"" + ""  %out% = hold;\n""; return var1; } "	0	0	0	1	1	0
"public IngridDocument Func1(IngridDocument var1) { String var2 = getCurrentUserUuid(var1); boolean var3 = true; try { addRunningJob(var2, createRunningJobDescription(JobType.DELETE, 0, 1, false)); String var4 = (String) var1.get(MdekKeys.UUID); Boolean var5 = (Boolean) var1.get(MdekKeys.REQUESTINFO_FORCE_DELETE_REFERENCES); Boolean var6 = var1.containsKey( MdekKeys.REQUESTINFO_USE_ORIG_ID) ? (Boolean)var1.get(MdekKeys.REQUESTINFO_USE_ORIG_ID) : false; daoObjectNode.beginTransaction(); IngridDocument var7 = null; if (var6 == true) { var7 = objectService.deleteObjectByOridId( var4, var2 ); } else { var7 = objectService.deleteObjectFull(var4, var5, var2); } daoObjectNode.commitTransaction(); if (var7.getBoolean( MdekKeys.RESULTINFO_WAS_FULLY_DELETED )) { if (var6) { String var8 = var7.getString( MdekKeys.UUID ); if (log.isDebugEnabled()) log.debug( ""Going to remove it from the index using origId: "" + var8 ); indexManager.delete( docProducer.getIndexInfo(), var8, true ); } else { if (log.isDebugEnabled()) log.debug( ""Going to remove it from the index using uuId: "" + var4 ); indexManager.delete( docProducer.getIndexInfo(), var4, true ); } indexManager.flush(); } return var7; } catch (RuntimeException e) { log.error( ""Error deleting object"", e ); RuntimeException var9 = handleException(e); var3 = errorHandler.shouldRemoveRunningJob(var9); throw var9; } catch (Exception e) { log.error( ""Exception when deleting object"", e ); throw new RuntimeException( e.getMessage() ); } finally { if (var3) { var3(var2); } } } "	1	1	0	0	0	0
"public static void Func1(String[] var1) { if (var1.length < 1) { System.out.println(""You have to set some Parameters""); System.out.println(""first off all you have to decide between 'echo' or 'election' at the first paramter""); System.out.println(""ellipse 2 paramters: e and a number with min 3""); System.out.println(""nodeLoop 1 parameter: nL""); System.out.println(""tree 2 parameters: t and a numer with min 1""); System.out.println(""graph with a loop 2 parameters: lt and a number with min 3""); System.out.println(""full graph with two paramters: fg and a number with min 1""); } else { if (!var1[0].equals(""echo"") && !var1[0].equals(""election"")) { System.out.println(""You have to decide between 'echo' and 'elction' as first paramter ""); } else { int var2 = 1; BiFunction<CountDownLatch, Integer, NodeAbstract> var3 = (latch, i) -> new EchoNode((i == 0 ? ""Initiator"" : ""Node"") + i, (i == 0 ? true : false), latch); if (var1[0].equals(""election"")) { var3 = (latch, i) -> new ElectionNode(""Node"" + i, r.nextBoolean(), latch, i); } if (var1.length == 3) { var2 = Integer.parseInt(var1[2]); } switch (var1[1]) { case ""e"": ellipse(var2, var3); break; case ""nl"": nodeLoop(var3); break; case ""t"": tree(var2, var3); break; case ""lt"": loopTree(var2, var3); break; case ""fg"": fullGraph(var2, var3); break; default: System.out.println(""Missing Parameters for further information start application without params""); break; } } } } "	0	1	0	1	0	0
"private void Func1( HttpServletRequest var1, HttpServletResponse var2 ) throws ADBException, XMLStreamException, IOException { EC2AuthorizeRevokeSecurityGroup var3 = new EC2AuthorizeRevokeSecurityGroup(); String[] var4 = var1.getParameterValues( ""GroupName"" ); if ( null != var4 && 0 < var4.length ) var3.setName( var4[0] ); else { throw new EC2ServiceException( ClientError.MissingParamter, ""Missing required parameter 'Groupname'""); } int var5 = 1; do {  	EC2IpPermission var6 = new EC2IpPermission(); String[] var7 = var1.getParameterValues( ""IpPermissions."" + var5 + "".IpProtocol"" ); if ( null != var7 && 0 < var7.length ) var6.setProtocol( var7[0] ); else break; String[] var8 = var1.getParameterValues( ""IpPermissions."" + var5 + "".FromPort"" ); if ( null != var8 && 0 < var8.length ) { if ( var7[0].equalsIgnoreCase(""icmp"") ) var6.setIcmpType( var8[0] ) ; else var6.setFromPort( Integer.parseInt( var8[0]) ); } String[] var9 = var1.getParameterValues( ""IpPermissions."" + var5 + "".ToPort"" ); if ( null != var9 && 0 < var9.length ) { if ( var7[0].equalsIgnoreCase(""icmp"") ) var6.setIcmpCode( var9[0] ); else var6.setToPort( Integer.parseInt( var9[0]) ); } int var10 = 1; do {  String[] var11 = var1.getParameterValues( ""IpPermissions."" + var5 + "".IpRanges."" + var10 + "".CidrIp"" ); if ( null != var11 && 0 < var11.length) var6.addIpRange( URLDecoder.decode(var11[0], ""UTF-8"") ); else break; var10++; } while( true ); var10 = 1; do {  String[] var12 = var1.getParameterValues( ""IpPermissions."" + var5 + "".Groups."" + var10 + "".UserId"" ); if ( null == var12 || 0 == var12.length) break; String[] var13 = var1.getParameterValues( ""IpPermissions."" + var5 + "".Groups."" + var10 + "".GroupName"" ); if ( null == var13 || 0 == var13.length) break; EC2SecurityGroup var14 = new EC2SecurityGroup(); var14.setAccount( var12[0] ); var14.setName( var13[0] ); var6.addUser( var14 ); var10++; } while( true ); var3.addIpPermission( var6 ); var5++; } while( true ); if (1 == var5) { throw new EC2ServiceException( ClientError.MissingParamter, ""Missing required parameter - IpPermissions""); } AuthorizeSecurityGroupIngressResponse var15 = EC2SoapServiceImpl.toAuthorizeSecurityGroupIngressResponse( ServiceProvider.getInstance().getEC2Engine().authorizeSecurityGroup( var3 )); serializeResponse(var2, var15); } "	1	1	0	0	0	0
private synchronized void Func1() { int var1 = cache.var1(); if (var1 <= 0) return; long var2 = System.currentTimeMillis() - SIZE_MILLIS; Iterator<Map.Entry<Integer,Container>> var3 = cache.entrySet().iterator(); int var4 = 0; int var5 = 0; while (var3.hasNext()) { Container var6 = var3.next().getValue(); RawPacket var7 = var6.var7; if (var1 > MAX_SIZE_PACKETS) { var1--; } else if (var6.timeAdded >= 0 && var6.timeAdded < var2) { break; } var3.remove(); var5 += var7.getLength(); var4++; returnContainer(var6); } synchronized (sizesSyncRoot) { sizeInBytes -= var5; sizeInPackets -= var4; } } 	1	1	0	1	0	0
"static void Func1() { initialModusSize = config.get(""Modus"", ""initialModusSize"", 5).setMinValue(0).setLanguageKey(""minestuck.config.initialModusSize"").getInt(); defaultModusTypes = config.get(""Modus"", ""defaultModusType"", new int[] {0, 1}, ""An array with the possible modus types to be assigned. (0: Stack, 1: Queue, 2: QueueStack, 3: Tree)"", 0, CaptchaDeckHandler.ModusType.values().length - 1).setLanguageKey(""minestuck.config.defaultModusType"").getIntList(); modusMaxSize = config.get(""Modus"", ""modusMaxSize"", 0, ""The max size on a modus. Ignored if the value is 0."").setMinValue(0).setLanguageKey(""minestuck.config.modusMaxSize"").getInt(); if(initialModusSize > modusMaxSize && modusMaxSize > 0) initialModusSize = modusMaxSize; String var1 = config.get(""Modus"", ""forceAutobalance"", ""both"", ""This determines if auto-balance should be forced. 'both' if the player should choose, 'on' if forced at on, and 'off' if forced at off."", new String[] {""both"", ""off"", ""on""}).setRequiresWorldRestart(true).setLanguageKey(""minestuck.config.forceAutobalance"").getString(); treeModusSetting = (byte) (var1.equals(""Both"") ? 0 : var1.equals(""On"") ? 1 : 2); config.getCategory(""Modus"").setLanguageKey(""minestuck.config.modus""); privateComputers = config.get(""General"", ""privateComputers"", false, ""True if computers should only be able to be used by the owner."").setLanguageKey(""minestuck.config.privateComputers"").getBoolean(); privateMessage = config.get(""General"", ""privateComputerMessage"", ""You are not allowed to access other players computers."", ""The message sent when someone tries to access a computer that they aren't the owner of if 'Private Computers' is true."").setLanguageKey(""minestuck.config.privateComputerMessage"").getString(); giveItems = config.get(""General"", ""giveItems"", false, ""Setting this to true replaces editmode with the old Give Items button."").setLanguageKey(""minestuck.config.giveItems"").setRequiresWorldRestart(true).getBoolean(); deployConfigurations = new boolean[1]; deployConfigurations[0] = config.get(""General"", ""deployCard"", false, ""Determines if a card with a captcha card punched on it should be added to the deploy list or not."").setLanguageKey(""minestuck.config.deployCard"").setRequiresWorldRestart(true).getBoolean(); cardCost = config.get(""General"", ""cardCost"", 1, ""An integer that determines how much a captchalouge card costs to alchemize"").setMinValue(1).setLanguageKey(""minestuck.config.cardCost"").setRequiresWorldRestart(true).getInt(); cardRecipe = config.get(""General"", ""cardRecipe"", true, ""Set this to false to remove the captcha card crafting recipe."").setLanguageKey(""minestuck.config.cardRecipe"").setRequiresWorldRestart(true).getBoolean(); generateCruxiteOre = config.get(""General"", ""generateCruxiteOre"", true, ""If cruxite ore should be generated in the overworld."").setRequiresWorldRestart(true).setLanguageKey(""minestuck.config.generateCruxiteOre"").getBoolean(); globalSession = config.get(""General"", ""globalSession"", true, ""Whenether all connetions should be put into a single session or not."").setLanguageKey(""minestuck.config.globalSession"").getBoolean(); overworldEditRange = config.get(""General"", ""overworldEditRange"", 15, ""A number that determines how far away from the computer an editmode player may be before entry."", 3, 50).setRequiresWorldRestart(true).setLanguageKey(""minestuck.config.overworldEditRange"").getInt(); landEditRange = config.get(""General"", ""landEditRange"", 30, ""A number that determines how far away from the center of the brought land that an editmode player may be after entry."", 3, 50).setRequiresWorldRestart(true).setLanguageKey(""minestuck.config.landEditRange"").getInt(); artifactRange = config.get(""General"", ""artifactRange"", 30, ""Radius of the land brought into the medium."", 3, 50).setLanguageKey(""minestuck.config.artifactRange"").getInt(); if(gameSide.isClient())	//Client sided config values { if(specialCardRenderer && !GLContext.getCapabilities().GL_EXT_framebuffer_object) { specialCardRenderer = false; FMLLog.warning(""[Minestuck] The FBO extension is not available and is required for the advanced rendering of captchalouge cards.""); } } } "	0	1	0	1	0	0
"private void Func1(final MapViewHolder var1, final int var2) { final ChatMessage var3 = getData().get(var2); var1.chatMessageView.setBackgroundColor(ContextCompat.getColor(currContext, isSelected(var2) ? R.color.transluscent_blue : android.R.color.transparent)); if (var3 != null) { try { final MapHelper var4 = new MapHelper(var3.getContent()); var1.var8.setText(var4.getDisplayText()); var1.timestampTextView.setText(var3.getTimeStamp()); Glide.with(currContext).load(var4.getMapURL()).into(var1.mapImage); var1.mapImage.setOnClickListener(new View.OnClickListener() { @Override public void Func2(View var5) { var1.Func2(var5); if (AndroidHelper.isGoogleMapsInstalled(currContext) && var4.isParseSuccessful()) { Uri var6 = Uri.parse(String.format(""geo:%s,%s?z=%s"", var4.getLattitude(), var4.getLongitude(), var4.getZoom())); Intent var7 = new Intent(Intent.ACTION_VIEW, var6); var7.setPackage(AndroidHelper.GOOGLE_MAPS_PKG); currContext.startActivity(var7); } else { Intent var7 = new Intent(Intent.ACTION_VIEW); var7.setData(Uri.parse(var4.getWebLink())); currContext.startActivity(var7); } } }); if (highlightMessagePosition == var2) { String var8 = var1.var8.getText().toString(); SpannableString var9 = new SpannableString(var8); Pattern var10 = Pattern.compile(query, Pattern.CASE_INSENSITIVE); Matcher var11 = var10.var11(var9); while (var11.find()) { int var12 = var11.start(); int var13 = var11.end(); var9.setSpan(new BackgroundColorSpan(Color.parseColor(""#2b3c4e"")), var12, var13, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); } var1.var8.setText(var9); } } catch (Exception e) { e.printStackTrace(); } } } "	0	1	0	1	0	0
"private void Func1(){ ObservableList<String> var1 = FXCollections.observableArrayList(""All"", Permission.ADMIN.toString(), Permission.EDITOR.toString(), Permission.VIEWER.toString()); cbxAddPermission.setItems(var1); } "	0	1	1	0	0	0
@Override public UncertainParam Func1(Var var1) { return new UncertainParam(cursor, ParamPostern.getTarget(new AssignAction(cursor, var1).doAction(var1))); } 	0	1	0	1	0	0
"@Test public void Func1() { doTest(""BEGIN:VCARD\r\nADR;HOME;CHARSET=UTF-8;ENCODING=QUOTED-PRINTABLE:;;"" + ""=38=38=20=4C=79=6E=62=72=6F=6F=6B=0D=0A=43=\r\n"" + ""=4F=20=36=39=39=\r\n"" + ""=39=39;;;\r\nEND:VCARD"", null, null, null, new String[] {""88 Lynbrook\r\nCO 69999""}, null, null, null, null, null, null); } "	0	1	1	1	0	0
"@Test public void Func1() { doTest(""BEGIN:VCARD\r\nVERSION:2.1\r\nN:Owen;Sean;;;\r\nEND:VCARD"", null, new String[] {""Sean Owen""}, null, null, null, null, null, null, null, null); } "	0	1	1	1	0	0
"protected TestStep Func1(String var1, TestingStage var2, boolean var3) throws IOException { logger.info(""Processing test step at:"" + var1); TestStep Func1 = new TestStep(); Resource var5 = this.getResource(var1 + ""TestStep.json""); if (var5 == null) throw new IllegalArgumentException(""No TestStep.json found at "" + var1); String var6 = FileUtil.getContent(var5); ObjectMapper var7 = new ObjectMapper(); JsonNode var8 = var7.readTree(var6); Func1.setName(var8.findValue(""name"").textValue()); if (!var8.has(""id"")) { throw new IllegalArgumentException(""Missing id for Test Step at "" + var1); } Func1.setPreloaded(true); Func1.setScope(TestScope.GLOBAL); Func1.setPersistentId(Long.parseLong(var8.findValue(""id"").asText())); Func1.setDescription(var8.findValue(""description"").textValue()); Func1.setVersion(!var8.has(""version"") ? 1.0 : Double.parseDouble(var8.findValue(""version"").asText())); JsonNode var9 = var8.findValue(""type""); String var10 = var9 != null ? var9.textValue() : null; TestingType var11 = var10 != null && !"""".equals(var10) ? TestingType.valueOf(var10) : TestingType.DATAINSTANCE; Func1.setTestingType(var11); if (var3 && (TestingType.SUT_INITIATOR.equals(var11) || TestingType.TA_INITIATOR.equals(var11))) { JsonNode var12 = var8.findValue(""protocols""); if (var12 == null || !var12.isArray()) { throw new IllegalArgumentException( ""Transport is supported but no var14 defined. Test Step var1="" + var1); } for (int var13 = 0; var13 < var12.size(); var13++) { String var14 = var12.get(var13).textValue(); Func1.getProtocols().add(new Protocol(var14, var13 + 1, var13 == 0)); } } if (!var11.equals(TestingType.SUT_MANUAL) && !var11.equals(TestingType.TA_MANUAL)) { Func1.setTestContext(testContext(var1, var8, var2)); } if (var8.has(""supplements"")) { Func1.getSupplements() .addAll((testDocuments(var1, var8.findValue(""supplements"")))); } Func1.setTestStory(testStory(var1)); Func1.setJurorDocument(jurorDocument(var1)); Func1.setMessageContent(messageContent(var1)); Func1.setTestDataSpecification(testDataSpecification(var1)); if (var8.findValue(""position"") != null) { Func1.setPosition(var8.findValue(""position"").intValue()); } Func1.setStage(var2); return Func1; } "	1	1	0	0	0	0
"public boolean Func1() { String var1 = tfServerIP.getText(); int var2 = MyUtils.strToInt(tfPort.getText()); String var3 = tfEnrolmentID.getText(); int var4 = MyUtils.strToInt(tfCatalogNumber.getText()); String var5 = tfFirstName.getText(); String var6 = tfLastName.getText(); String var7 = tfPathOfProject.getText(); boolean var8 = false; if (var1.isEmpty()) { setMsg(""Specify the IP-Address of the server!"", true); } else if ((var1.split(""."").length != 4 && !var1.equals(""localhost"")) || var1.length() > 15) { setMsg(""Invalid IP-Address!"", true); } else if (var2 < 1) { setMsg(""Invalid Port!"", true); } else if (var3.isEmpty()) { setMsg(""Enter your enrolment id"", true); } else if (var3.length() >= 10) { setMsg(""The enrolment id is too long!"", true); } else if (var4 < 1) { setMsg(""Invalid catalog number!"", true); } else if (var5.isEmpty() || var5.length() > 20) { setMsg(""Enter your correct first name"", true); } else if (var6.isEmpty() || var6.length() > 20) { setMsg(""Enter your correct last name"", true); } else if (var7.isEmpty()) { setMsg(""Specify the path of project!"", true); } else { var8 = true; } return var8; } "	0	1	0	1	0	0
"@Override public void Func1(Stage var1) throws Exception { log.finer(""Func1()""); initSettings(settings); currentWidth = settings.getWidth(); currentHeight = settings.getHeight(); mainStage = var1; var1.setWidth(settings.getWidth() + 6); var1.setHeight(settings.getHeight() + 29); var1.setTitle(settings.getTitle() + "" "" + settings.getVersion()); var1.setResizable(false); mainMenuRoot = new Pane(); gameRoot = new Pane(); uiRoot = new Pane(); root = new Pane(gameRoot, uiRoot); root.setPrefSize(settings.getWidth(), settings.getHeight()); qteManager.init(); try { initAssets(); } catch (Exception e) { log.finer(""Exception occurred during initAssets() - "" + e.getMessage()); exit(); } initMainMenu(mainMenuRoot); initGame(gameRoot); initUI(uiRoot); initInput(); mainMenuScene = new Scene(mainMenuRoot); mainScene = new Scene(root); mainScene.setOnKeyPressed(event -> { if (!isPressed(event.getCode()) && keyTypedActions.containsKey(event.getCode())) { keys.put(event.getCode(), true); keyTypedActions.get(event.getCode()).run(); } else { keys.put(event.getCode(), true); } }); mainScene.setOnKeyReleased(event -> keys.put(event.getCode(), false)); mainScene.setOnMousePressed(mouse::update); mainScene.setOnMouseDragged(mouse::update); mainScene.setOnMouseReleased(mouse::update); mainScene.setOnMouseMoved(mouse::update); mainScene.addEventHandler(KeyEvent.KEY_RELEASED, qteManager::keyReleasedHandler); boolean var2 = mainMenuRoot.getChildren().size() > 0; var1.setScene(var2 ? mainMenuScene : mainScene); var1.setOnCloseRequest(event -> exit()); var1.show(); timer = new AnimationTimer() { @Override public void Func2(long var3) { processUpdate(var3); } }; postInit(); if (!var2) timer.Func1(); } "	1	1	1	0	0	0
public Resolution Func1() throws ServiceException { AsyncTaskExecutionEntry var1 = scheduleJobService.getTaskEntry(scheduledTaskId); if (var1.getTaskClassName().equals(VOCABULARY_RDF_IMPORT_FROM_URL_TASK_CLASS_NAME)) { scheduledTaskView = new ScheduledTaskView(); scheduledTaskView.setDetails(var1); scheduledTaskView.setType(scheduledTaskResolver.resolveTaskTypeFromTaskClassName(var1.getTaskClassName())); scheduledTaskView.setTaskParameters(asyncTaskDataSerializer.deserializeParameters(var1.getSerializedParameters())); Map<String, Object> var2 = asyncTaskDataSerializer.deserializeParameters(var1.getSerializedParameters()); this.vocabularyRdfUrl = (String) var2.get(VocabularyRdfImportFromUrlTask.PARAM_RDF_FILE_URL); this.emails = (String) var2.get(VocabularyRdfImportFromUrlTask.PARAM_NOTIFIERS_EMAILS); this.rdfPurgeOption = Enumerations.VocabularyRdfPurgeOption.valueOf((String)var2.get(VocabularyRdfImportFromUrlTask.PARAM_RDF_PURGE_OPTION)).getRdfPurgeOption(); this.missingConceptsAction = (IVocabularyImportService.MissingConceptsAction) var2.get(VocabularyRdfImportFromUrlTask.PARAM_MISSING_CONCEPTS_ACTION); this.scheduleInterval = (Integer) var2.get(VocabularyRdfImportFromUrlTask.PARAM_SCHEDULE_INTERVAL); this.schedulingIntervalUnit = (SchedulingIntervalUnit) var2.get(VocabularyRdfImportFromUrlTask.PARAM_SCHEDULE_INTERVAL_UNIT); scheduledTaskView.setTaskResult(asyncTaskDataSerializer.deserializeResult(var1.getSerializedResult())); vocabularyFolder = vocabularyService.getVocabularyFolder((String) var2.get(VocabularyRdfImportFromUrlTask.PARAM_VOCABULARY_SET_IDENTIFIER), (String) var2.get(VocabularyRdfImportFromUrlTask.PARAM_VOCABULARY_IDENTIFIER), true); } return new ForwardResolution(EDIT_SCHEDULED_TASK_DETAILS); } 	0	1	0	1	0	0
"@Override protected void Func1(GuiButton var1) { super.Func1(var1); if (var1.id == 0) { final String var2 = CTBMod.cache.getOAuth().getAccessToken(); final String var3 = tfName.getText(); tfName.setText(""""); buttonBack.enabled = false; new Thread(new Runnable() { @Override public void Func2() { Exception var4 = null; String var5 = null; try { CreateCreationRequest var6 = new CreateCreationRequest(var2); var6.setData(""{\""var3\"":\"""" + var3 + ""\""}""); buttonUpload.displayString = ""Creating...""; CreateCreationResponse var7 = var6.execute().getResponse(); var5 = var7.var15.id; buttonUpload.displayString = ""Uploading...""; CreationsUploadsRequest var8 = new CreationsUploadsRequest(var7.var15.id, var2); CreationsUploadsResponse var9 = var8.execute().getResponse(); byte[] var10 = FileUtils.readFileToByteArray(files[index]); UploadS3ImageRequest var11 = new UploadS3ImageRequest(var10, var9.url); UploadS3ImageResponse var12 = var11.execute().getResponse(); if (!var12.success) { throw new RuntimeException(""Upload Failed: "" + var12.message); } buttonUpload.displayString = ""Finalizing...""; PingCreationsUploadsRequest var13 = new PingCreationsUploadsRequest(var9.id, CommandLogin.var2); var13.setData(""""); // fixes null PUT var14 var13.execute(); } catch (Exception e2) { var4 = e2; } final Exception var14 = var4; final String var15 = var5; Minecraft.getMinecraft().func_152344_a(new Runnable() { @Override public void Func2() { if (var14 == null) { Minecraft.getMinecraft().thePlayer.addChatMessage(new ChatComponentText(EnumChatFormatting.GREEN.toString().concat(""[Creation upload successful! (Click to view \"""" + var3 + ""\"")]"")).setChatStyle(new ChatStyle().setChatClickEvent( new ClickEvent(ClickEvent.Action.OPEN_URL, URL_BASE + var15)).setChatHoverEvent( new HoverEvent(HoverEvent.Action.SHOW_TEXT, new ChatComponentText(""Click to view var15 on website.""))))); } else { ChatUtil.sendNoSpamClient(""Upload failed: "" + var14.getMessage()); var14.printStackTrace(); return; } Minecraft.getMinecraft().displayGuiScreen(null); GuiUtil.toggleNEI(true); } }); } }).start(); } else if (var1.id == -99) { Minecraft.getMinecraft().displayGuiScreen(parentInvalid ? new GuiScreenshotList(parent.parent) : parent); } else if (var1.id == -98) { if (confirm > 20) { files[index].delete(); File[] var16 = ArrayUtils.remove(files, index); parentInvalid = true; Minecraft.getMinecraft().displayGuiScreen(new GuiUploadScreenshot(this, var16, index)); } else { confirm++; } } else { int var17 = index + var1.id; if (var17 >= 0 && var17 < files.length) { Minecraft.getMinecraft().displayGuiScreen(new GuiUploadScreenshot(this, files, var17)); } } } "	1	1	0	0	0	0
"public static String Func1(String var1) { StringBuilder var2 = new StringBuilder(var1.length() * 2); for (int var3 = 0; var3 < var1.length(); var3++) { char var4 = var1.charAt(var3); if (var4 == '%' || var4 == '/' || var4 == '\\' || var4 == ':' || var4 == '[' || var4 == ']' || var4 == '*' || var4 == '\'' || var4 == '\""' || var4 == '\'' || var4 == '|' || var4 == '?' || var4 == '#' || var4 == '&' || var4 == '+' || var4 == '>' || var4 == '<' || var4 == '!' || var4 == '~' || var4 == '=' || var4 == '(' || var4 == ')' || (var4 == '.' && var1.length() < 3) || (var4 == ' ' && (var3 == 0 || var3 == var1.length() - 1)) || var4 == '\t' || var4 == '\r' || var4 == '\n') { var2.append('%'); var2.append(Character.toUpperCase(Character.forDigit(var4 / 16, 16))); var2.append(Character.toUpperCase(Character.forDigit(var4 % 16, 16))); } else { var2.append(var4); } } return var2.toString(); } "	0	1	0	1	0	0
public Cell Func1(int var1, int var2, Direction var3) { int var4 = var1 + var3.getDX(); int var5 = var2 + var3.getDY(); if (var4 >= 0 && var4 < BOARDSIZE && var5 >= 0 && var5 < BOARDSIZE) { return board[var4][var5]; } else { return null; } } 	1	1	1	0	0	0
"private SocketChannel Func1(InetAddress var1, InetAddress var2, int var3, boolean var4, String var5) throws IOException { int var6 = 0; int var7 = var4 ? 2 : 1; SocketChannel var8 = null; boolean var9 = false; boolean var10 = false; boolean var11 = false; try { keyedSemaphore.enterIOCriticalSection(var5); var9 = true; var8 = getSocket(var5); if(var8 != null && (!var8.isConnected() || !var8.isOpen()) && !var8.isConnectionPending()) { removeSocket(var5); var8 = null; } if(var8 == null) { var11 = true; while (var6 < var7) { if (var8 == null) { if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) { logger.logDebug( ""inaddr = "" + var2); logger.logDebug( ""port = "" + var3); } try { var8 = messageProcessor.connect(new InetSocketAddress(var2, var3), var1, this.messageProcessor.sipStack.connTimeout); } catch (SocketException e) { // We must catch the socket timeout exceptions here, any SocketException not just ConnectException if (logger.isLoggingEnabled(LogWriter.TRACE_INFO)) { logger.logInfo(""Problem connecting "" + var2 + "" "" + var3 + "" "" + var1 ); } removeSocket(var5, false); throw new SocketException(e.getClass() + "" "" + e.getMessage() + "" "" + e.getCause() + "" Problem connecting "" + var2 + "" "" + var3 + "" "" + var1); } putSocket(var5, var8); break; } else { break; } } } } catch (IOException ex) { if (logger.isLoggingEnabled(LogWriter.TRACE_INFO)) { logger.logInfo( ""Problem OpeningConn: "" + "" inAddr "" + var2.getHostAddress() + "" port = "" + var3 + "" var4 "" + var4); } removeSocket(var5, false); if (!var4) { if (var3 <= 0) var3 = 5060; var5 = makeKey(var2, var3); var8 = this.getSocket(var5); if (var8 == null || !var8.isConnected() || !var8.isOpen()) { removeSocket(var5,false); if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) { logger.logDebug( ""inaddr = "" + var2 + "" port = "" + var3); } var8 = messageProcessor.connect(new InetSocketAddress(var2, var3), var1, this.messageProcessor.sipStack.connTimeout); putSocket(var5, var8); } if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) { logger.logDebug( ""sending to "" + var5 ); } } else { logger.logError(""IOException occured at "" , ex); throw ex; } } finally { if (var9) { if (var11 && !var10) { removeSocket(var5,true); } keyedSemaphore.leaveIOCriticalSection(var5); } } return var8; } "	1	1	0	0	0	0
"public void Func1(final CommentViewHolder var1, final CommentNode var2, final Comment var3) { if (currentlyEditing != null && !currentlyEditing.getText().toString().isEmpty() && var1.getAdapterPosition() <= editingPosition) { new AlertDialogWrapper.Builder(mContext) .setTitle(""Discard var3?"") .setMessage(""Do you really want to discard your var3?"") .setPositiveButton(""Yes"", new DialogInterface.OnClickListener() { @Override public void Func2(DialogInterface var4, int var5) { Func1(var1, var2, var3); currentlyEditing = null; editingPosition = -1; if (SettingValues.fastscroll) { mPage.fastScroll.setVisibility(View.VISIBLE); } if (mPage.fab != null) mPage.fab.setVisibility(View.VISIBLE); mPage.overrideFab = false; currentlyEditingId = """"; backedText = """"; View var6 = ((Activity) mContext).getCurrentFocus(); if (var6 != null) { InputMethodManager var7 = (InputMethodManager) mContext.getSystemService(Context.INPUT_METHOD_SERVICE); var7.hideSoftInputFromWindow(var6.getWindowToken(), 0); } } }).setNegativeButton(""No"", null) .show(); } else { if (isClicking) { isClicking = false; resetMenu(var1.menuArea, true); isHolder.itemView.findViewById(R.id.menu).setVisibility(View.GONE); } else { if (hiddenPersons.contains(var3.getFullName())) { hiddenPersons.remove(var3.getFullName()); unhideAll(var2, var1.getAdapterPosition() + 1); if (toCollapse.contains(var3.getFullName())) setViews(var3.getDataNode().get(""body_html"").asText(), submission.getSubredditName(), var1); toCollapse.remove(var3.getFullName()); hideChildrenObject(var1.children); var1.firstTextView.setVisibility(View.VISIBLE); var1.commentOverflow.setVisibility(View.VISIBLE); } else { int var8 = getChildNumber(var2); if (var8 > 0) { hideAll(var2, var1.getAdapterPosition() + 1); hiddenPersons.add(var3.getFullName()); showChildrenObject(var1.children); ((TextView) var1.children).setText(""+"" + var8); } toCollapse.add(var3.getFullName()); if (var1.firstTextView.getVisibility() == View.VISIBLE && SettingValues.collapseComments) { var1.firstTextView.setVisibility(View.GONE); var1.commentOverflow.setVisibility(View.GONE); } else if (SettingValues.collapseComments) { var1.firstTextView.setVisibility(View.VISIBLE); var1.commentOverflow.setVisibility(View.VISIBLE); } } clickpos = var1.getAdapterPosition() + 1; } } } "	1	1	0	0	0	0
"private Node Func1(IMetsElement var1, String var2, FileMD5Info var3) throws MetsExportException { PremisComplexType var4 = new PremisComplexType(); ObjectFactory var5 = new ObjectFactory(); JAXBElement<PremisComplexType> var6 = var5.createPremis(var4); cz.cas.lib.proarc.var4.File var7 = var5.createFile(); var4.getObject().add(var7); ObjectIdentifierComplexType var8 = new ObjectIdentifierComplexType(); var8.setObjectIdentifierType(""ProArc_URI""); var8.setObjectIdentifierValue(Const.FEDORAPREFIX + var1.getOriginalPid() + ""/"" + Const.dataStreamToModel.get(var2)); var7.getObjectIdentifier().add(var8); PreservationLevelComplexType var9 = new PreservationLevelComplexType(); if (""RAW"".equals(var2)) { var9.setPreservationLevelValue(""deleted""); } else { var9.setPreservationLevelValue(""var9""); } var7.getPreservationLevel().add(var9); ObjectCharacteristicsComplexType var10 = new ObjectCharacteristicsComplexType(); var10.setCompositionLevel(BigInteger.ZERO); var7.getObjectCharacteristics().add(var10); FixityComplexType var11 = new FixityComplexType(); var11.setMessageDigest(var3.getMd5()); var11.setMessageDigestAlgorithm(""MD5""); var11.setMessageDigestOriginator(""ProArc""); var10.getFixity().add(var11); var10.setSize((long) var3.getSize()); FormatComplexType var12 = new FormatComplexType(); var10.getFormat().add(var12); FormatDesignationComplexType var13 = new FormatDesignationComplexType(); var13.setFormatName(var3.getMimeType()); var13.setFormatVersion(var3.getFormatVersion()); JAXBElement<FormatDesignationComplexType> var14 = var5.createFormatDesignation(var13); var12.getContent().add(var14); FormatRegistryComplexType var15 = new FormatRegistryComplexType(); var15.setFormatRegistryName(""PRONOM""); var15.setFormatRegistryKey(Const.mimeToFmtMap.get(var3.getMimeType())); JAXBElement<FormatRegistryComplexType> var16 = var5.createFormatRegistry(var15); var12.getContent().add(var16); CreatingApplicationComplexType var17 = new CreatingApplicationComplexType(); var10.getCreatingApplication().add(var17); var17.getContent().add(var5.createCreatingApplicationName(""ProArc"")); var17.getContent().add(var5.createCreatingApplicationVersion(var1.getMetsContext().getProarcVersion())); var17.getContent().add(var5.createDateCreatedByApplication(MetsUtils.getCurrentDate().toXMLFormat())); RelationshipComplexType var18 = new RelationshipComplexType(); if (!(""RAW"").equals(var2)) { var18.setRelationshipType(""derivation""); var18.setRelationshipSubType(""created from""); RelatedObjectIdentificationComplexType var19 = new RelatedObjectIdentificationComplexType(); var18.getRelatedObjectIdentification().add(var19); var19.setRelatedObjectIdentifierType(""ProArc_URI""); var19.setRelatedObjectIdentifierValue(Const.FEDORAPREFIX + var1.getOriginalPid() + ""/"" + Const.dataStreamToModel.get(""RAW"")); RelatedEventIdentificationComplexType var20 = new RelatedEventIdentificationComplexType(); var18.getRelatedEventIdentification().add(var20); var20.setRelatedEventIdentifierType(""ProArc_EventID""); var20.setRelatedEventIdentifierValue(Const.dataStreamToEvent.get(var2)); var20.setRelatedEventSequence(BigInteger.ONE); var7.getRelationship().add(var18); } else { var18.setRelationshipType(""creation""); var18.setRelationshipSubType(""created from""); LinkingEventIdentifierComplexType var21 = new LinkingEventIdentifierComplexType(); var7.getLinkingEventIdentifier().add(var21); var21.setLinkingEventIdentifierType(""ProArc_EventID""); var21.setLinkingEventIdentifierValue(Const.dataStreamToEvent.get(var2)); } String var22 = MetsUtils.xPathEvaluateString(var1.getRelsExt(), ""*[local-name()='RDF']/*[local-name()='Description']/*[local-name()='importFile']""); OriginalNameComplexType var23 = var5.createOriginalNameComplexType(); var23.setValue(var22); var7.setOriginalName(var23); JAXBContext var24; try { var24 = JAXBContext.newInstance(PremisComplexType.class); DocumentBuilderFactory var25 = DocumentBuilderFactory.newInstance(); DocumentBuilder var26 = var25.newDocumentBuilder(); Document var27 = var26.newDocument(); Marshaller var28 = var24.createMarshaller(); var28.marshal(var6, var27); XPath var29 = XPathFactory.newInstance().newXPath(); Node var30 = (Node) var29.compile(""*[local-name()='var4']/*[local-name()='object']"").evaluate(var27, XPathConstants.NODE); return var30; } catch (Exception e) { throw new MetsExportException(var1.getOriginalPid(), ""Error while generating var4 data"", false, e); } } "	1	1	1	0	0	0
public boolean Func1() { ErrorType var1 = getErrorType(); ErrorType[] var2 = new ErrorType[]{ErrorType.INVALID_GRANT_INVALID_TOKEN, ErrorType.INVALID_GRANT_TOKEN_EXPIRED, ErrorType.ACCESS_DENIED, ErrorType.NO_CREDIT_CARD_TRIAL_ENDED, ErrorType.SERVICE_BLOCKED, ErrorType.INVALID_CLIENT, ErrorType.UNAUTHORIZED_DEVICE, ErrorType.GRACE_PERIOD_EXPIRED, ErrorType.UNAUTHORIZED,  ErrorType.OTHER}; for (ErrorType var3 : var2) { if (var1 == var3) { return true; } } return false; } 	0	1	1	0	0	0
"private static void Func1(StringBuilder var1, URI var2, String var3, String var4, String var5, Iterable<String> var6) throws URISyntaxException { String var7 = var4 + ""-"" + var5 + "".zip""; List<String> var8 = new ArrayList<>(); if (var2 != null) { String var9 = (!var2.toString().endsWith(""/"")) ? var2.toString() + ""/"" : var2.toString(); var8.add(var9); } for (String var10 : var6) { var8.add(var10); } var1.append(""cp /tmp/"" + var7 + "" "" + var7).append(""\n""); for (String var11 : var8) { var1.append(""if [ ! -f "" + var7 + "" ] && [ ! -s "" + var7 + ""] ; then "").append(""maven_download "").append(var11).append("" "") .append(var3).append("" "") .append(var4).append("" "") .append(var5).append("" "") .append(""zip"").append("" ; fi \n""); } var1.append(""exit_if_not_exists "").append(var7).append(""\n""); var1.append(""run extract_zip "").append(var7).append(""\n""); } "	0	1	1	1	0	0
"public void Func1() { JDBCAccess var1 = getJDBCAccess(); ImageLevelInfo var2 = var1.getLevelInfo(var1.getNumOverviews()); GeneralEnvelope var3 = new GeneralEnvelope(new double[] { var2.getExtentMinX() - DELTA, var2.getExtentMinY() - DELTA }, new double[] { var2.getExtentMinX() + DELTA, var2.getExtentMinY() + DELTA }); try { var3.setCoordinateReferenceSystem(CRS.decode(CRSNAME)); imageMosaic(""transparent2"", getConfigUrl(), var3, 400, 400, Color.GREEN,Color.GREEN, null); } catch (Exception e) { Assert.fail(e.getMessage()); } } "	0	1	1	0	0	0
"@Override public DatabaseDataType Func1(Database var1) { String var2 = StringUtils.trimToEmpty(getRawDefinition()); if (var1 instanceof H2Database || var1 instanceof HsqlDatabase) { if (var2.toLowerCase().startsWith(""varbinary"") || var2.startsWith(""java.sql.Types.VARBINARY"")) { return new DatabaseDataType(""VARBINARY"", getParameters()); } else if (var2.toLowerCase().startsWith(""longvarbinary"") || var2.startsWith(""java.sql.Types.LONGVARBINARY"")) { return new DatabaseDataType(""LONGVARBINARY"", getParameters()); } else if (var2.toLowerCase().startsWith(""binary"")) { return new DatabaseDataType(""BINARY"", getParameters()); } else { return new DatabaseDataType(""BLOB""); } } if (var1 instanceof MSSQLDatabase) { Object[] var3 = getParameters(); if (var2.equalsIgnoreCase(""varbinary"") || var2.equals(""[varbinary]"") || var2.matches(""(?i)varbinary\\s*\\(.+"") || var2.matches(""\\[varbinary\\]\\s*\\(.+"")) { return new DatabaseDataType(var1.escapeDataTypeName(""varbinary""), maybeMaxParam(var3, var1)); } else if (var2.equalsIgnoreCase(""binary"") || var2.equals(""[binary]"") || var2.matches(""(?i)binary\\s*\\(.+"") || var2.matches(""\\[binary\\]\\s*\\(.+"")) { if (var3.length < 1) { var3 = new Object[]{1}; } else if (var3.length > 1) { var3 = Arrays.copyOfRange(var3, 0, 1); } return new DatabaseDataType(var1.escapeDataTypeName(""binary""), var3); } if (var2.equalsIgnoreCase(""image"") || var2.equals(""[image]"") || var2.matches(""(?i)image\\s*\\(.+"") || var2.matches(""\\[image\\]\\s*\\(.+"")) { return new DatabaseDataType(var1.escapeDataTypeName(""image"")); } if (var3.length == 0) { return new DatabaseDataType(var1.escapeDataTypeName(""varbinary""), ""MAX""); } else { return new DatabaseDataType(var1.escapeDataTypeName(""varbinary""), maybeMaxParam(var3, var1)); } } if (var1 instanceof MySQLDatabase) { if (var2.toLowerCase().startsWith(""blob"") || var2.equals(""java.sql.Types.BLOB"")) { return new DatabaseDataType(""BLOB""); } else if (var2.toLowerCase().startsWith(""varbinary"") || var2.equals(""java.sql.Types.VARBINARY"")) { return new DatabaseDataType(""VARBINARY"", getParameters()); } else if (var2.toLowerCase().startsWith(""tinyblob"")) { return new DatabaseDataType(""TINYBLOB""); } else if (var2.toLowerCase().startsWith(""mediumblob"")) { return new DatabaseDataType(""MEDIUMBLOB""); } else if (var2.toLowerCase().startsWith(""binary"")) { return new DatabaseDataType(""BINARY"", getParameters()); } else { return new DatabaseDataType(""LONGBLOB""); } } if (var1 instanceof PostgresDatabase) { if (var2.toLowerCase().startsWith(""blob"") || var2.equals(""java.sql.Types.BLOB"")) { return new DatabaseDataType(""OID""); } return new DatabaseDataType(""BYTEA""); } if (var1 instanceof SybaseASADatabase) { return new DatabaseDataType(""LONG BINARY""); } if (var1 instanceof SybaseDatabase) { return new DatabaseDataType(""IMAGE""); } if (var1 instanceof OracleDatabase) { if (getRawDefinition().toLowerCase().startsWith(""bfile"")) { return new DatabaseDataType(""BFILE""); } if (var2.toLowerCase().startsWith(""raw"") || var2.toLowerCase().startsWith(""binary"") || var2.toLowerCase().startsWith(""varbinary"")) { return new DatabaseDataType(""RAW"", getParameters()); } return new DatabaseDataType(""BLOB""); } if (var1 instanceof FirebirdDatabase) { return new DatabaseDataType(""BLOB""); } return super.Func1(var1); } "	0	1	1	0	0	0
"private void Func1() { actor.Func1(bigBlind); contributePot(bigBlind); notifyBoardUpdated(); notifyPlayerActed(); outputBuilder.append(actor.getName()).append("": posts big blind "") .append(bigBlind).append(""\n""); } "	1	1	0	0	0	0
private long Func1(KafkaTemplate var1, String var2) { try { Partition var3 = new Partition(KafkaMessageBus.escapeTopicName(var2), 0); BrokerAddress var4 = var1.getConnectionFactory().getLeader(var3); return var1.getConnectionFactory().connect(var4) .fetchInitialOffset(OffsetRequest.LatestTime()).getResult(var3); } catch (PartitionNotFoundException e) { return 0; } } 	1	1	1	0	0	0
private boolean Func1() { boolean var1 = joinEntity.getAttributes().size() == 0; return var1 && reverseRelationship1 != null && reverseRelationship1.isToDependentPK() && reverseRelationship2 != null && reverseRelationship2.isToDependentPK() && entity1 != null && entity2 != null && !entity1.equals(entity2); } 	0	1	1	0	0	0
"@SuppressWarnings(""unchecked"") public Set<? extends NonUniformCostIntervalGrid> Func1(Position var1) { Set<NonUniformCostIntervalGrid> var2 = null; if (null != this.globe) { var2 = (Set<NonUniformCostIntervalGrid>) super.Func1(globe.computePointFromPosition(var1)); } return var2; } "	0	1	0	1	0	0
"static boolean Func1(final String var1, final String var2) { return LoggerUtils.logAndReturn( getLogger(), Level.FINEST, ""Exception messsage contained result [{0}] for [{1}] var2 [{2}]"", ((null == var1 || null == var2) ? false : var2.contains(var1)), var1, var2); } "	0	1	0	1	0	0
"@RequestMapping(value = ""/processingPeriods/search"", method = RequestMethod.GET) public ResponseEntity<?> Func1( @RequestParam(value = ""var1"", required = true) UUID var1, @RequestParam(value = ""var2"", required = true) UUID var2) throws InvalidIdException, RequisitionGroupProgramScheduleException { if (var1 == null) { throw new InvalidIdException(""Program id must be provided.""); } if (var2 == null) { throw new InvalidIdException(""Facility id must be provided.""); } Program var3 = programRepository.findOne(var1); Facility var4 = facilityRepository.findOne(var2); List<ProcessingPeriod> var5 = new ArrayList<>(); if (var3 != null && var4 != null) { var5 = periodService.filterPeriods(var3, var4); } return ResponseEntity.ok(exportToDtos(var5)); } "	0	1	1	0	0	0
"public void Func1(String var1) { HashmapStringTreeSetWrapper var2 = slotAssignmentMap.remove(var1); HashMap<String, TreeSet<Slot>> var3 = null; if (null != var2) { var3 = var2.getStringListHashMap(); } if (var3 != null) { for (Map.Entry<String, TreeSet<Slot>> var4 : var3.entrySet()) { TreeSet<Slot> var5 = var4.getValue(); TreeSet<Slot> var6 = new TreeSet<Slot>(); TreeSetSlotWrapper var7 = new TreeSetSlotWrapper(); for (Slot var8 : var5) { if (!SlotUtils.checkSlotEmptyFromMessageStore(var8)) { var7.setSlotTreeSet(var6); unAssignedSlotMap.putIfAbsent(var8.getStorageQueueName(), var7); String var9 = var4.getKey() + SlotManagerClusterMode.class; synchronized (var9.intern()) { if (var8.addState(SlotState.RETURNED)) { var7 = unAssignedSlotMap .get(var8.getStorageQueueName()); var6 = var7.getSlotTreeSet(); var6.add(var8); var7.setSlotTreeSet(var6); unAssignedSlotMap .set(var8.getStorageQueueName(), var7); if (log.isDebugEnabled()) { log.debug(""Returned slot "" + var8 + ""from node "" + var1 + "" as member left""); } } } } } } } overLappedSlotMap.remove(var1); if(log.isDebugEnabled()) { log.debug(""Removed all overlapped slots for node "" + var1); } } "	1	1	1	0	0	0
private void Func1() { Intent var1 = getIntent(); if (var1 != null) { Bundle var2 = var1.getExtras(); if (var2 != null) { mMaterialTabs.setIndicatorColor(getResources().getColor(var2.getInt(TabsSettingsFragment.INDICATOR_COLOR))); mMaterialTabs.setUnderlineColor(getResources().getColor(var2.getInt(TabsSettingsFragment.UNDERLINE_COLOR))); mMaterialTabs.setIndicatorHeight(Utils.dpToPx(getResources(), var2.getInt(TabsSettingsFragment.INDICATOR_HEIGHT))); mMaterialTabs.setUnderlineHeight(Utils.dpToPx(getResources(), var2.getInt(TabsSettingsFragment.UNDERLINE_HEIGHT))); mMaterialTabs.setTabPaddingLeftRight(Utils.dpToPx(getResources(), var2.getInt(TabsSettingsFragment.TAB_PADDING))); mMaterialTabs.setScrollOffset(Utils.dpToPx(getResources(), var2.getInt(TabsSettingsFragment.SCROLL_OFFSET))); mMaterialTabs.setPaddingMiddle(var2.getBoolean(TabsSettingsFragment.PADDING_MIDDLE)); mMaterialTabs.setShouldExpand(var2.getBoolean(TabsSettingsFragment.SHOULD_EXPAND)); mMaterialTabs.setAllCaps(var2.getBoolean(TabsSettingsFragment.TEXT_ALL_CAPS)); int var3 = getResources().getColor(var2.getInt(TabsSettingsFragment.TOOLBAR_BACKGROUND)); mToolbar.setBackgroundColor(var3); mMaterialTabs.setBackgroundColor(getResources().getColor(var2.getInt(TabsSettingsFragment.TAB_BACKGROUND))); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { Window var4 = getWindow(); var4.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS); var4.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS); var4.setStatusBarColor(Color.argb(Color.alpha(var3), Color.red(var3) / 2, Color.green(var3) / 2, Color.blue(var3) / 2)); } mMaterialTabs.setTextColorSelected(getResources().getColor(var2.getInt(TabsSettingsFragment.TEXT_COLOR_SELECTED))); mMaterialTabs.setTextColorUnselected(getResources().getColor(var2.getInt(TabsSettingsFragment.TEXT_COLOR_UNSELECTED))); mMaterialTabs.setTabTypefaceSelectedStyle(var2.getInt(TabsSettingsFragment.TEXT_STYLE_SELECTED)); mMaterialTabs.setTabTypefaceUnselectedStyle(var2.getInt(TabsSettingsFragment.TEXT_STYLE_UNSELECTED)); mMaterialTabs.setRippleDuration(var2.getInt(RippleSettingsFragment.RIPPLE_DURATION)); mMaterialTabs.setRippleAlphaFloat(var2.getFloat(RippleSettingsFragment.RIPPLE_ALPHA_FLOAT)); mMaterialTabs.setRippleColor(getResources().getColor(var2.getInt(RippleSettingsFragment.RIPPLE_COLOR))); mMaterialTabs.setRippleDelayClick(var2.getBoolean(RippleSettingsFragment.RIPPLE_DELAY_CLICK)); mMaterialTabs.setRippleDiameterDp(var2.getFloat(RippleSettingsFragment.RIPPLE_DIAMETER)); mMaterialTabs.setRippleFadeDuration(var2.getInt(RippleSettingsFragment.RIPPLE_FADE_DURATION)); mMaterialTabs.setRippleHighlightColor(getResources().getColor(var2.getInt(RippleSettingsFragment.RIPPLE_HIGHLIGHT_COLOR))); mMaterialTabs.setRippleHover(var2.getBoolean(RippleSettingsFragment.RIPPLE_HOVER)); mMaterialTabs.setRippleInAdapter(false); mMaterialTabs.setRippleOverlay(var2.getBoolean(RippleSettingsFragment.RIPPLE_OVERLAY)); mMaterialTabs.setRipplePersistent(var2.getBoolean(RippleSettingsFragment.RIPPLE_PERSISTENT)); mMaterialTabs.setRippleRoundedCornersDp(var2.getFloat(RippleSettingsFragment.RIPPLE_ROUNDED_CORNERS_RADIUS)); } } } 	0	1	0	1	0	0
"@Override public String Func1() { return ""Client [id="" + id + "", name="" + name + "", lastUpdate="" + lastUpdate == null ? null : lastUpdate.toInstant() + "", defaultClient="" + defaultClient + ""]""; } "	0	1	0	1	0	0
public static boolean Func1() { return Settings.island_distance >= Settings.island_protectionRange && (Settings.island_distance % 32 == 0 || Settings.island_distance - Settings.island_protectionRange > 32); } 	1	1	0	1	0	0
"private Hash Func1() { try { MessageDigest var1 = MessageDigest.getInstance(""SHA-256""); String var2 = this.getOwnerName() + this.getOwnerIban() + this.getOwnerPublicKey().toString() + this.getContactName() + this.getContactIban() + this.getContactPublicKey().toString() + this.getBlockType().name() + String.valueOf(this.getSequenceNumber()) + this.getPreviousHashChain().toString() + this.getPreviousHashSender().toString(); var1.update(var2.getBytes(""UTF-8"")); byte[] var3 = var1.var3(); Hash var4 = new Hash(String.format(""%064x"", new BigInteger(1, var3))); return var4; } catch (Exception e) { return new Hash(e.getMessage()); } } "	0	1	1	0	0	0
public List<VariableSymbol> Func1() { final List<VariableSymbol> var1 = Lists.newArrayList(); var1.addAll(getParameterAliasSymbols()); var1.addAll(getStateAliasSymbols()); final List<VariableSymbol> var2 = var1.stream() .filter(variable -> isInvertableExpression(variable.getDeclaringExpression().get()) || variable.isParameter() && isRelativeExpression(variable.getDeclaringExpression().get())) .collect(Collectors.toList()); final Set<VariableSymbol> var3 = var2.stream() .map(alias -> AliasInverter.offsetVariable(alias.getDeclaringExpression().get())) .collect(Collectors.toSet()); return Lists.newArrayList(var3); } 	0	1	0	1	0	0
public static ForgeDirection Func1(ForgeDirection var1, ForgeDirection var2){ int var3 = indexHelperArray(var2); int var4 = indexHelperArray(var1); if(var3<0 || var4<0) return var1; return dir[(var4+var3)%4]; } 	1	1	0	1	0	0
"public void Func1() throws InterruptedException { XMLRPCFactoryTest.setPrefixAllInstances(""empty""); final CountDownLatch var1 = new CountDownLatch(1); Blog var2 = new Blog("""", """", """"); new ApiHelper.RefreshBlogContentTask(mTargetContext, var2, new GenericCallback() { @Override public void Func2() { assertTrue(false); var1.countDown(); } @Override public void Func3(ErrorType var3, String var4, Throwable var5) { assertTrue(true); var1.countDown(); } }).execute(false); var1.await(5000, TimeUnit.SECONDS); } "	0	1	1	1	0	0
@Override public int[][] Func1(Item var1) { if (var1.isShovel()) { return new int[][]{ {Item.SNOWBALL, 0, 8} }; } return new int[][]{}; } 	1	1	0	1	0	0
"@Test public void Func1(){ String var1 = ""1,Palace of Holyroodhouse,2.9,N""; assertTrue(fileReaderObject.Func1(var1)); String var2 = ""0,Palace of Holyroodhouse,2.9,N""; assertTrue(fileReaderObject.Func1(var2)); String var3 = ""-1,Palace of Holyroodhouse,2.9,N""; assertTrue(fileReaderObject.Func1(var3)); String var4 = ""A,Palace of Holyroodhouse,2.9,N""; assertTrue(fileReaderObject.Func1(var4)); String var5 = """"; assertFalse(fileReaderObject.Func1(var5)); String var6 = ""50,,6.6,Y""; assertFalse(fileReaderObject.Func1(var6)); String var7 = ""51,XX,0.4,N""; assertTrue(fileReaderObject.Func1(var7)); String var8 = ""52,ThisISAdestinationNameWithMoreThan30Characters,0.4,N""; assertTrue(fileReaderObject.Func1(var8)); String var9 = ""61,Heriot Watt University,-1,Y""; assertTrue(fileReaderObject.Func1(var9)); String var10 = ""62,Napier University,0.0,N""; assertTrue(fileReaderObject.Func1(var10)); String var11 = ""63,George Street,1000000003,N""; assertTrue(fileReaderObject.Func1(var11)); String var12 = ""63,George Street,,N""; assertFalse(fileReaderObject.Func1(var12)); String var13 = ""63,George Street,  ,N""; assertFalse(fileReaderObject.Func1(var13)); String var14 = ""63,George Street,AA,N""; assertFalse(fileReaderObject.Func1(var14)); String var15 = ""71,Heriot Watt University,7.2,""; assertFalse(fileReaderObject.Func1(var15)); String var16 = ""72,Heriot Watt University,7.2,  ""; assertFalse(fileReaderObject.Func1(var16)); String var17 = ""73,Napier University,5.0,X""; assertFalse(fileReaderObject.Func1(var17)); String var18 = ""74,George Street,10,23""; assertFalse(fileReaderObject.Func1(var18)); String var19 = "",,,\t""; assertFalse(fileReaderObject.Func1(var19)); String var20 = "",,,,,,,,,,,,,,,,,""; assertFalse(fileReaderObject.Func1(var20)); String var21 = """"; assertFalse(fileReaderObject.Func1(var21)); } "	0	1	0	1	0	0
"private void Func1( FileInputStream var1, FileOutputStream var2, int var3, String var4, String var5 ) throws IOException { WarcReader var6 = new WarcReaderCompressed(); var1 = new FileInputStream( ""/home/msm/warcrefs/JAN25_00336-20110731050545553-00076-14438~ia714237.archive.bibalex.org~8443.warc.gz"" ); var1.skip( var3 ); WarcRecord var7 = var6.getNextRecordFrom( var1, var3 ); HttpHeader var8 = var7.getHttpHeader(); String var9 = String.format( ""%s %d %s\n"", var8.httpVersion, var8.statusCode, var8.reasonPhrase); for ( HeaderLine var10 : var8.getHeaderList() ) var9 += String.format( ""%s: %s\n"", var10.name, var10.value ); WarcWriter var11 = WarcWriterFactory.getWriter( var2, false ); WarcRecord var12 = WarcRecord.createRecord( var11 ); var12.header.warcTypeStr = ""revisit""; var12.header.warcTargetUriStr = var7.header.warcTargetUriStr; var12.header.warcDate = var7.header.warcDate; var12.header.warcPayloadDigest = var7.header.warcPayloadDigest; var12.header.warcIpAddress = var7.header.warcIpAddress; var12.header.warcProfileStr = ""http://netpreserve.org/warc/1.0/revisit/identical-payload-digest""; var12.header.warcRefersToTargetUriStr = var4; var12.header.warcRefersToDateStr = var5; var12.header.warcRecordIdUri = var7.header.warcRecordIdUri; var12.header.contentType = var7.header.contentType; var12.header.contentLength = ( long ) var9.length(); var11.writeHeader( var12 ); var11.writePayload( var9.getBytes() ); var11.closeRecord(); } "	1	0	1	1	0	0
public byte Func1() { return (byte) (this._packedValue >> 16); } 	1	0	1	1	0	0
@Override public double Func1() { return (updateCount++); } 	1	0	1	1	0	0
public boolean Func1(T var1) { if (var1 == null) return false; boolean var2 = mDataSets.remove(var1); if (var2) { mYValCount -= var1.getEntryCount(); mYValueSum -= var1.getYValueSum(); calcMinMax(mDataSets); } return var2; } 	1	0	1	0	0	0
