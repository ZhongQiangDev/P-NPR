text	recoder	tare	rewardrepair	selfapr	gamma	allfailure
"public void createTable() { //Log.i() String[] months = new DateFormatSymbols().getMonths(); for (int i = 0; i <= totalMonths; i++) { String month = months[i]; System.out.println(""month = "" + month); monthList.add(months[i]); }  int tableSize = tableValues.size(); for (int i = 0; i < tableSize ; i++) { TableRow[] tableRow = new TableRow[tableSize]; tableRow[i] = new TableRow(getActivity()); tableRow[i].setPadding(40,40,40,40);   TextView monthDay = new TextView(getActivity()); monthDay.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT, 1f)); monthDay.setText(monthList.get(i)); monthDay.setTextColor(Color.WHITE);  TextView visits = new TextView(getActivity()); visits.setLayoutParams(new TableRow.LayoutParams(TableRow.LayoutParams.WRAP_CONTENT, TableRow.LayoutParams.WRAP_CONTENT, 1f)); visits.setGravity(Gravity.RIGHT); //Calculates the % of totalVisits. float tempPercent = ((float)tableValues.get(i)/(float)totalVisits * 100); DecimalFormat numberFormat = new DecimalFormat(""0.00""); String percentVisits = numberFormat.format(tempPercent)+ "" %"";  //Adds two different text sizes for the visitsTxt String visitsString = tableValues.get(i).toString() + ""\n"" + percentVisits; SpannableString spanString2 =  new SpannableString(visitsString); spanString2.setSpan(new RelativeSizeSpan(0.7f), tableValues.get(i).toString().length() , spanString2.length(), 0); // set size, start-stop visits.setText(spanString2); visits.setTextColor(Color.WHITE);  tableRow[i].addView(monthDay); tableRow[i].addView(visits); table.addView(tableRow[i]); } } "	1	0	1	1	0	0
"@Test public void reactsOnRemoteChanges() throws Exception { navigation.navigate(""folderName"").files.remove(subSubFile); navigation.navigate(""folderName"").pushNotification(subSubFile, DELETE);   waitForUI(); waitUntil(() -> folderTree.getChildren().get(0).getChildren().isEmpty());  search(""inner""); expectChildren(0); } "	0	1	0	0	1	0
"@SuppressWarnings(""unchecked"") public boolean canConnect() { try { final ObjectOutputStream out = new ObjectOutputStream(streams.getBufferedOut()); // write the object output streams magic number out.flush(); final ObjectInputStream in = new ObjectInputStream(streams.getBufferedIn()); clientName = (String) in.readObject(); // the degenerate case if (loginValidator == null) { out.writeObject(null); out.flush(); // cast to string to avoid toString() call on random object if // it isn't null final String read = (String) in.readObject(); if (read != null) { throw new IllegalArgumentException(""something non null read in response to null challenge "" + read); } System.out.println(""Server done""); return true; } final Map<String, String> challenge = loginValidator.getChallengeProperties(clientName, remoteAddress); if (challenge == null) { throw new IllegalStateException(""Challenge can't be null""); } out.writeObject(challenge); out.flush(); //If the casting fails, the Object is not a Map<String, String> final Map<String, String> credentials = (Map<String, String>) in.readObject(); final String mac = MacFinder.GetHashedMacAddress(); final String error = loginValidator.verifyConnection(challenge, credentials, clientName, mac, remoteAddress); if (error == null) { out.writeObject(null); clientName = serverMessenger.getUniqueName(clientName); out.writeObject(clientName); out.flush(); return true; } out.writeObject(error); out.flush(); return false; } catch (final Exception e) { logger.log(Level.SEVERE, e.getMessage(), e); return false; } } "	1	1	1	1	1	0
private boolean jj_3R_47() { Token xsp; xsp = jj_scanpos; if (jj_scan_token(46)) jj_scanpos = xsp; if (jj_3R_69()) return true; return false; } 	0	1	1	1	0	0
@Override public void onStart() { super.onStart(); mCustomTabHelper.bindCustomTabsService(this.getActivity(), uri); } 	0	1	0	0	1	0
"@EventHandler public void onPlayerInteract(PlayerInteractEvent event) { if (War.war.isLoaded()) { Player player = event.getPlayer(); if (event.getItem().getType() == Material.WOOD_SWORD && War.war.isWandBearer(player)) { String zoneName = War.war.getWandBearerZone(player); ZoneSetter setter = new ZoneSetter(player, zoneName); if (event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.RIGHT_CLICK_AIR) { War.war.badMsg(player, ""wand.toofar""); } else if (event.getAction() == Action.LEFT_CLICK_BLOCK) { setter.placeCorner1(event.getClickedBlock()); event.setUseItemInHand(Result.ALLOW); } else if (event.getAction() == Action.RIGHT_CLICK_BLOCK) { setter.placeCorner2(event.getClickedBlock()); event.setUseItemInHand(Result.ALLOW); } }  Warzone zone = Warzone.getZoneByPlayerName(player.getName()); if (zone != null && zone.getLoadoutSelections().containsKey(player.getName()) && zone.getLoadoutSelections().get(player.getName()).isStillInSpawn()) { event.setUseItemInHand(Result.DENY); event.setCancelled(true); // Replace message with sound to reduce spamminess. // Whenever a player dies in the middle of conflict they will // likely respawn still trying to use their items to attack // another player. player.playSound(player.getLocation(), Sound.ENTITY_ITEM_BREAK, 1, 0); }  if (zone != null && event.getAction() == Action.RIGHT_CLICK_BLOCK && event.getClickedBlock().getType() == Material.ENDER_CHEST && !zone.getWarzoneConfig().getBoolean(WarzoneConfig.ALLOWENDER)) { event.setCancelled(true); War.war.badMsg(player, ""use.ender""); } Team team = Team.getTeamByPlayerName(player.getName()); if (zone != null && team != null && event.getAction() == Action.RIGHT_CLICK_BLOCK && event.getClickedBlock().getType() == Material.ENCHANTMENT_TABLE && team.getTeamConfig().resolveBoolean(TeamConfig.XPKILLMETER)) { event.setCancelled(true); War.war.badMsg(player, ""use.enchant""); if (zone.getAuthors().contains(player.getName())) { War.war.badMsg(player, ""use.xpkillmeter""); } } if (zone != null && team != null && event.getAction() == Action.RIGHT_CLICK_BLOCK && event.getClickedBlock().getType() == Material.ANVIL && team.getTeamConfig().resolveBoolean(TeamConfig.XPKILLMETER)) { event.setCancelled(true); War.war.badMsg(player, ""use.anvil""); if (zone.getAuthors().contains(player.getName())) { War.war.badMsg(player, ""use.xpkillmeter""); } } if (zone != null && team != null && event.getAction() == Action.RIGHT_CLICK_BLOCK && event.getClickedBlock().getState() instanceof InventoryHolder && zone.isFlagThief(player)) { event.setCancelled(true); War.war.badMsg(player, ""drop.flag.disabled""); } }  if (event.getAction() == Action.RIGHT_CLICK_BLOCK || event.getAction() == Action.RIGHT_CLICK_AIR) { Player player = event.getPlayer(); Warzone zone = Warzone.getZoneByPlayerName(player.getName()); if (zone != null && zone.getWarzoneConfig().getBoolean(WarzoneConfig.SOUPHEALING)) { ItemStack item = event.getItem(); if ((item != null) && (item.getType() == Material.MUSHROOM_SOUP)) { if (player.getHealth() < 20) { player.setHealth(Math.min(20, player.getHealth() + 7)); item.setType(Material.BOWL); } else if (player.getFoodLevel() < 20) { player.setFoodLevel(Math.min(20, player.getFoodLevel() + 6)); player.setSaturation(player.getSaturation() + 7.2f); item.setType(Material.BOWL); } } } } } "	0	1	0	0	1	0
public TrackableResource<? extends Trackable> lookup(String trackingID) {  TrackableResource t = factoryCache.get(trackingID); if (t != null) { if (AtmosphereResource.class.isAssignableFrom(t.resource().getClass())) { AtmosphereResource.class.cast(t.resource()).addEventListener(aliveChecker); } }  return t; } 	1	1	1	1	1	0
"public void saveToOntology() { if (name != null) { Ontology ont = new Ontology(); classURI = ont.getClassName(name, simpleTypes, complexTypes, simpleComplexTypes);  OntClass clazz = Ontology.getOntologyInstance().getOntClass(classURI); instance = clazz.createIndividual(Config.ONTOLOGY_URI + ""--"" + this.namespace.toString() + name);   // simple types for (Object key : simpleTypes.keySet()) { instance.addLiteral(ont.getProperty(key.toString()), simpleTypes.get(key.toString()).toString()); }   // complex types for (Object key : complexTypes.keySet()) { ArrayList<Entity> entities = complexTypes.get(key.toString()); for (Entity ent : entities) { instance.addProperty(ont.getProperty(key.toString()), ent.instance); } }  for (Object key : simpleComplexTypes.keySet()) { ArrayList<String> values = simpleComplexTypes.get(key.toString()); for (String val : values) { instance.addLiteral(ont.getProperty(key.toString()),val); } }    }   } "	0	1	0	0	1	0
private void checkAnswer(boolean userPressed) { boolean answer=mQuestionBank[mCurrentIndex].isAnswerTrue();  int messageResId; if(!mCheated) if(userPressed==answer) messageResId=R.string.correct_toast; else messageResId=R.string.incorrect_toast; else messageResId=R.string.warning_toast;  Toast.makeText(QuizActivity.this,messageResId,Toast.LENGTH_SHORT).show(); } 	0	1	0	0	1	0
private ParameterDescription getPrefixDescriptionFor(String arg) { for (Map.Entry<IKey, ParameterDescription> es : descriptions.entrySet()) { if (arg.startsWith(es.getKey().getName())) return es.getValue(); }  return null; } 	0	1	0	0	1	0
"@PreAuthorize(""(hasPermission(#post.topic.branch.id, 'BRANCH', 'BranchPermission.DELETE_OWN_POSTS') and "" + ""#post.userCreated.username == principal.username)"") //draft can be deleted only by author @Override public void deleteDraft(Post post) { if (!PostState.DRAFT.equals(post.getState())) { new IllegalArgumentException(""Required DRAFT but got "" + String.valueOf(post.getState())); } Topic topic = post.getTopic(); topic.removePost(post); topicDao.saveOrUpdate(topic); securityService.deleteFromAcl(post);  logger.debug(""Deleted draft id={}"", post.getId()); } "	0	1	0	0	1	0
"private void writeRegisters(String deviceAddress, WriteRegisterCommand... commands) { if (commands == null || commands.length == 0) { logger.warn(""No commands to write to the CUL""); return; } if (commands.length > 8) { logger.error(""We can only send 8 commands at once to the CUL. Discarding all commands""); return; } StringBuffer sendBuffer = new StringBuffer(8); sendBuffer.append('F'); sendBuffer.append(deviceAddress); for (WriteRegisterCommand command : commands) { sendBuffer.append(command.register); sendBuffer.append(command.value); } try { culHandlerLifecycle.getCul().send(sendBuffer.toString()); } catch (CULCommunicationException e) { logger.error(""Error while writing multiple write register commands to the CUL"", e); } } "	1	1	1	1	1	0
private Map<String, ArrayList<String>> assignPassengersToDrivers(Map<User, Map<User, Double>> distanceMaps) { // Iterate over entries of distanceMaps Map<String, ArrayList<String>> driverPassengersMap = new HashMap<>(); for (Map.Entry<User, Map<User, Double>> entry : distanceMaps.entrySet()) { User currentPassenger = entry.getKey(); Map<User, Double> driverDistanceMatrix = entry.getValue(); User optimalDriver = null; Double smallestDistance = Double.MAX_VALUE; // Find the closest driver for currentPassenger for (Map.Entry<User, Double> driverDistanceEntry : driverDistanceMatrix.entrySet()) { User currentDriver = driverDistanceEntry.getKey(); Double currentDistance = driverDistanceEntry.getValue(); if (currentDistance < smallestDistance && currentDriver.getNumFreeSeats() > 0) { smallestDistance = currentDistance; optimalDriver = currentDriver; } } if (optimalDriver != null) { optimalDriver.addPassenger(currentPassenger); } } return driverPassengersMap; } 	0	1	0	0	1	0
"public ReadWriterFactory setCreateIndex(final boolean createIndex) { logger.debug(""Create index for FASTQ writers is ignored""); this.samFactory.setCreateIndex(createIndex); return this; } "	0	0	0	0	1	0
"public ReadWriterFactory setReferenceFile(final File referenceFile) { logger.debug(""Reference file for FASTQ writers is ignored""); this.referenceFile = referenceFile; return this; } "	0	0	0	0	1	0
public void endWindow() { int count = cache.size() - maxSize;  if (count > 0) { Set<K> expiredKeys = priorityQueue.removeLRU(count);  for (K expiredKey: expiredKeys) { cache.remove(expiredKey); } }  changedKeys = Sets.newHashSet(); removedEntries = Maps.newHashMap(); } 	0	0	0	0	1	0
"public void evaluateAllFitness(PrintWriter stats, ObjectOutputStream champions) throws java.io.IOException, InterruptedException { // Indices where each thread should start int[] starts = new int[NUMBER_OF_THREADS]; // Indices where each thread should stop int[] stops = new int[NUMBER_OF_THREADS]; for (int i = 0; i < starts.length; i++) { starts[i] = individuals.length * i / NUMBER_OF_THREADS; stops[i] = individuals.length * (i + 1) / NUMBER_OF_THREADS; } int step = individuals.length / NUMBER_OF_THREADS; CountDownLatch latch = new CountDownLatch(NUMBER_OF_THREADS); Evaluator[] evaluators = new Evaluator[NUMBER_OF_THREADS]; for (int i = 0; i < evaluators.length; i++) { evaluators[i] = new Evaluator(step * i, step * (i + 1), individuals, latch); } ExecutorService executor = Executors.newFixedThreadPool(NUMBER_OF_THREADS); long before = System.nanoTime(); for (int i = 0; i < NUMBER_OF_THREADS; i++) { executor.execute(evaluators[i]); } executor.shutdown(); latch.await(); long after = System.nanoTime(); System.out.println(""Time taken: "" + ((after - before) / 1000000000.0) + "" seconds""); Genotype champion = findChampion(); stats.println(champion.getFitness() + ""\t"" + meanFitness()); stats.flush(); champions.writeObject(champion.getWords()); } "	0	1	0	0	1	0
"private DataSource processTableReference(SQLParser.Table_referenceContext tableReferenceContext) { if (tableReferenceContext.table_atom() != null) { return processTableAtom(tableReferenceContext.table_atom()); } else if (tableReferenceContext.table_join() != null) { return processTableJoin(tableReferenceContext.table_join()); } throw new ParseException(String.format(""Unsupported table reference type: \'%s\'"", tableReferenceContext.getText())); } "	0	0	0	0	1	0
"private void searchPdfTest(final String filename, final String[] searchStrings) throws Exception {  String testTag = ""search"";  openFile(filename);  // Get the page view for the opened document which we can use for pinch actions UiObject pageView = getUiObjectByResourceId(""com.adobe.reader:id/pageView"", ""android.widget.RelativeLayout""); for (int i = 0; i < searchStrings.length; i++) { String runName = (i == 0) ? ""first_word"" : ""second_word""; timingResults.put(String.format(testTag + ""_"" + runName), searchTest(searchStrings[i])); }  exitDocument(); } "	0	0	0	0	1	0
public static XmoduleDefinition findParentModule(Xnode from) { Xnode moduleDef = from.find(Xcode.FMODULEDEFINITION); if(moduleDef == null){ return null; } return new XmoduleDefinition(moduleDef.getElement()); } 	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setupActionBar(true, getString(R.string.you)); setContentView(R.layout.edit_user_layout); ButterKnife.bind(this);  ActionBar actionBar = getSupportActionBar(); if (actionBar != null) { actionBar.setHomeAsUpIndicator(DrawableUtils.getActionBarIcon(this, R.drawable.ic_close_black_24dp)); }  if (presenter == null || savedInstanceState == null) { presenter = new EditUserPresenter(this); } else { presenter = new EditUserPresenter(savedInstanceState); } presenter.onTakeView(this);  description.setOnFocusChangeListener(new View.OnFocusChangeListener() { @Override public void onFocusChange(View v, boolean hasFocus) { if (hasFocus) { descriptionInputLayout.setHint(getString(R.string.about_you)); ((EditText)v).setHint(getString(R.string.add_description)); } else { descriptionInputLayout.setHint(getString(R.string.add_description)); ((EditText)v).setHint(""""); } } });  } "	0	1	0	0	1	0
@Override public Collection<MetaClass> getAllSuperTypesAndInterfaces() { final Collection<MetaClass> supersAndIfaces = new ArrayList<MetaClass>(); addSuperTypesAndInterfaces(this, supersAndIfaces);  return supersAndIfaces; } 	0	0	0	0	1	0
private char nextChar(int i) throws EndOfPathException{ SuffixNode node = selectNode(); if(diff(node) >= active.activeLength){ return input[active.activeNode.child[input[active.activeEdge]].start + active.activeLength]; } if(diff(node) + 1 == active.activeLength ){ if(node.child[input[i]] != null){ return input[i]; } } else{ active.activeNode = node; active.activeLength = active.activeLength - diff(node) -1; active.activeEdge = active.activeEdge + diff(node)  +1; return input[active.activeNode.child[input[active.activeEdge]].start + active.activeLength]; }  throw new EndOfPathException(); } 	0	1	0	0	1	0
"public static void loadCreaturePresets(Map<Id, ItemPreset> itemPresetMap) { Map<Id, CreaturePreset> creaturePresetMap = new HashMap<Id, CreaturePreset>(); JsonObject object = JsonObjectFactory.makeJsonObject(""creatures.json""); for (JsonValue value : object.get(""creatures"").asArray()) { JsonObject presetObject = value.asObject(); CreaturePreset preset = new CreaturePreset(); preset.setId(new Id(presetObject.get(""id"").asString())); preset.setType(presetObject.get(""type"").asString()); preset.setName(NameFactory.fromJsonObject(presetObject.get(""name"").asObject())); if (presetObject.get(""tags"") != null) { preset.setTagSet(TagSet.fromJsonArray(presetObject.get(""tags"").asArray(), Creature.Tag.class)); } else { preset.setTagSet(TagSet.makeEmptyTagSet(Creature.Tag.class)); } preset.setInventoryItemLimit(presetObject.getInt(""inventoryItemLimit"", 0)); preset.setInventoryWeightLimit(presetObject.getDouble(""inventoryItemLimit"", 0.0)); preset.setItems(getInventory(presetObject)); setLuminosityIfPresent(preset, presetObject); setVisibility(preset, presetObject); preset.setWeight(Weight.newInstance(presetObject.get(""weight"").asDouble())); preset.setHealth(presetObject.get(""health"").asInt()); preset.setAttack(presetObject.get(""attack"").asInt()); setWeaponIfPreset(preset, presetObject); preset.setAttackAlgorithmId(AttackAlgorithmId.valueOf(presetObject.get(""attackAlgorithmID"").asString())); creaturePresetMap.put(preset.getId(), preset); if (preset.hasTag(Creature.Tag.CORPSE)) { ItemPreset corpse = CorpsePresetFactory.makeCorpsePreset(preset); itemPresetMap.put(corpse.getId(), corpse); } } setCreaturePresetMap(Collections.unmodifiableMap(creaturePresetMap)); DungeonLogger.info(""Loaded "" + creaturePresetMap.size() + "" creature presets.""); } "	0	1	0	0	1	0
"private List<ComfoxMessage> getprojectRelatedMessages(GraphTraversalSource traversal, Vertex messageVertex) { try { Vertex project = traversal.V(messageVertex).both().hasLabel(""project"").next(); Long count = traversal.V(project).both().count().next(); return asList(new ComfoxMessage( String.format(""#Jigsaw says: #%s has %s people"", project.property(""name"").value().toString(), count), null, ""comfox"", null, null, null)); } catch (Exception e) { return asList(); } } "	0	0	0	0	1	0
"@Override public boolean onCommand(CommandSender sender, Command command, String label, String[] args) { if (command.getName().equalsIgnoreCase(""eshop"")) { if (args.length > 0 && args[0].equalsIgnoreCase(""reload"")) { eshop.handleReload(sender); } else { eshop.handleCommand(sender, command); } }  return true; } "	0	0	0	0	1	0
public void moveRight() { if (adjustmentIsLegal(0, 1)) { falling.setX(falling.getX() + 1); redrawBoard(); } } 	0	0	0	0	1	0
private void checkForFullRows() { int scoreAdjustment = 0; for (int row = 0; row < rows; row++) { int nonEmpty = 0; for (int col = 0; col < columns; col++) { if (area[row][col].getChar() != Block.EMPTY) { nonEmpty++; } } if (nonEmpty == columns) { scoreAdjustment++; dropAllRowsAbove(row); } } scoreKeeper.increaseScore(scoreAdjustment); } 	0	0	0	0	1	0
public static void deleteList(Realm realm, RBookList list) { if (list != null) { realm.executeTransaction(tRealm -> { // First, delete the list items (unless this is a smart list). if (!list.isSmartList()) list.getListItems().clear(); // Then, delete the book list. list.removeFromRealm(); }); } } 	0	0	0	0	1	0
"public static CallbackQuery createCallbackQuery(JSONObject jsonObject, TelegramBot telegramBot) {  CallbackQuery callbackQuery = null; if (jsonObject != null) {  if (!jsonObject.isNull(""message"")) {  if(!jsonObject.isNull(""game_short_name"")) {  callbackQuery = GameMessageMessageCallbackQueryImpl.createGameCallbackQuery(jsonObject, telegramBot); } else {  callbackQuery = MessageCallbackQueryImpl.createCallbackQuery(jsonObject, telegramBot); } } else if (!jsonObject.isNull(""inline_message_id"")) {  if(!jsonObject.isNull(""game_short_name"")) {  callbackQuery = GameInlineCallbackQueryImpl.createGameInlineCallbackQuery(jsonObject, telegramBot); } else {  callbackQuery = InlineCallbackQueryImpl.createInlineCallbackQuery(jsonObject, telegramBot); } } else {  callbackQuery = new CallbackQueryImpl(jsonObject, telegramBot);  System.err.println(""The Telegram Bot API didn't return a Message or Inline Message ID for the CallbackQuery, send @zackpollard the following output or create a github issue.""); System.err.println(callbackQuery.asJson().toString(4)); } }  return callbackQuery; } "	0	0	0	0	1	0
"@Override public List<Application> getApplications(String subscriber, String groupId) throws APIManagementException { List<Application> applicationList = null; try { applicationList = getApplicationDAO().getApplications(subscriber); } catch (APIMgtDAOException e) { String errorMsg = ""Error occurred while fetching applications for the given subscriber - "" + subscriber + "" with groupId - "" + groupId; log.error(errorMsg); throw new APIMgtDAOException(errorMsg, e, ExceptionCodes.APIMGT_DAO_EXCEPTION); } return applicationList; } "	1	1	1	1	1	0
public void insertActiveUser(LoginEvent loginEvent) { User user = new User(); user.setName(loginEvent.getSessionConnectEvent().getUser().getName()); usersSessions.add(user); } 	0	1	0	0	1	0
boolean contains(Integer id) { return bookmarks.contains(id); } 	0	0	0	0	1	0
private void updateStatusUi() { // Turn off the audio unless it is connected. if (mSensorPresenter != null) { if (!mHasError && mSourceStatus == SensorStatusListener.STATUS_CONNECTED && mCurrentSource != null) { updateAudio(mLayout.audioEnabled, getSonificationType( mParentFragment.getActivity())); } else { updateAudio(false, ScalarDisplayOptions.DEFAULT_SONIFICATION_TYPE); } } if (mCardViewHolder == null) { return; } updateCardMenu(); if (!mHasError && mSourceStatus == SensorStatusListener.STATUS_CONNECTED) { mCardViewHolder.flipButton.setVisibility(View.VISIBLE); mCardViewHolder.statusViewGroup.setVisibility(View.GONE); return; } mCardViewHolder.flipButton.setVisibility(View.GONE); mCardViewHolder.statusViewGroup.setVisibility(View.VISIBLE); mCardViewHolder.statusRetryButton.setVisibility(View.GONE); if (mHasError) { // An error if (mRetryClickListener != null) { mCardViewHolder.statusRetryButton.setVisibility(View.VISIBLE); mCardViewHolder.statusRetryButton.setOnClickListener(mRetryClickListener); } mCardViewHolder.statusMessage.setText( mCardViewHolder.getContext().getText(R.string.sensor_card_error_text)); mCardViewHolder.statusProgressBar.setVisibility(View.GONE); } else if (mSourceStatus != SensorStatusListener.STATUS_CONNECTING) { // Unknown status. mCardViewHolder.statusMessage.setText( mCardViewHolder.getContext().getText(R.string.sensor_card_error_text)); mCardViewHolder.statusProgressBar.setVisibility(View.GONE); } else { // Show a progress bar inside the card while connecting. mCardViewHolder.statusMessage.setText( mCardViewHolder.getContext().getText(R.string.sensor_card_loading_text)); mCardViewHolder.statusProgressBar.setVisibility(View.VISIBLE); } } 	0	0	0	0	1	0
"protected synchronized void setState(final CellState state) { if (this.myState == null && state == null) throw new IllegalStateException(""Can't remain in null state""); if (this.myState != null && state != null && this.myState.equals(state)) throw new IllegalStateException(""Can't remain in same state"");  LOG.trace(""Transitioning to: "" + state); this.myState = state; this.myStates.onNext(state); } "	0	0	0	0	1	0
"public String getPvpMessage(String killer) { String msg = getMessage(""PVP""); return msg.replace(""%a"", killer); } "	0	0	0	0	1	0
public void setDongyEnble() { if (fullnameflag == true && emailflag == true && passwordflag == true && addressflag == true && selectedImageflag == true && checkAccountType == true) { dangkyok.setEnabled(true); dangkyok.setBackgroundColor(getResources().getColor(R.color.mauxanh));  } else { dangkyok.setEnabled(false); dangkyok.setBackgroundColor(getResources().getColor(R.color.mauxam)); dangkyok.setTextColor(getResources().getColor(R.color.actionbar_text)); }  } 	0	0	0	0	1	0
"@Test public void testApplicationBoxDeploymentRequestSerializerNotLatest() throws ParseException, IOException {  final ElasticBoxCloud elasticBoxCloud = Mockito.mock(ElasticBoxCloud.class);  final InstanceExpirationSchedule expiration = new InstanceExpirationSchedule(""terminate"", null, ""01/25/2016"", ""16:00"") { };  final ApplicationBoxDeploymentContext applicationBoxDeploymentContext = new ApplicationBoxDeploymentContext.Builder() .box(""FAKE_BOX_ID"") .boxVersion(""NOT_LATEST"") .expirationTime(expiration.getUtcDateTime()) .expirationOperation(expiration.getOperation()) .requirements(new String[]{""FAKE_CLAIM""}) .tags(new HashSet<String>() {{ add(""FAKE_TAG""); }}) .name(""FAKE_NAME"") .owner(""FAKE_OWNER"") .waitForDone(true) .cloud(elasticBoxCloud) .build();  final JSONObject request = new ApplicationBoxDeploymentSerializer().createRequest(applicationBoxDeploymentContext);  assertTrue(""policyBox id was not set"", request.getJSONObject(""lease"").getString(""expire"").equals(expiration.getUtcDateTime())); assertTrue(""policyBox id was not set"", request.getJSONObject(""lease"").getString(""operation"").equals(""terminate"")); assertTrue(""policyBox id was not set"", request.getJSONObject(""box"").getString(""id"").equals(""FAKE_BOX_ID"")); assertTrue(""policyBox id was not set"", request.getJSONArray(""instance_tags"").get(0).equals(""FAKE_TAG"")); assertTrue(""policyBox id was not set"", request.getJSONArray(""requirements"").get(0).equals(""FAKE_CLAIM"")); assertTrue(""policyBox id was not set"", request.getString(""schema"").equals(""http://elasticbox.net/schemas/deploy/application"")); assertTrue(""policyBox id was not set"", request.getString(""owner"").equals(""FAKE_OWNER"")); assertTrue(""policyBox id was not set"", request.getString(""name"").equals(""FAKE_NAME"")); } "	0	0	0	0	1	0
public void end() { this.mSoundPool.release(); this.mPathStreamIDsMap.clear(); this.mPathSoundIDMap.clear(); this.mEffecToPlayWhenLoadedArray.clear();  this.mLeftVolume = 0.5f; this.mRightVolume = 0.5f;  this.initData(); } 	0	0	0	0	1	0
private void map(ClassMap classMap, Object srcObj, Object destObj, boolean bypassSuperMappings, List<String> mappedParentFields, String mapId) { srcObj = MappingUtils.deProxy(srcObj);  // 1596766 - Recursive object mapping issue. Prevent recursive mapping // infinite loop. Keep a record of mapped fields // by storing the id of the sourceObj and the destObj to be mapped. This can // be referred to later to avoid recursive mapping loops mappedFields.put(srcObj, destObj);  // If class map hasn't already been determined, find the appropriate one for // the src/dest object combination if (classMap == null) { classMap = getClassMap(srcObj.getClass(), destObj.getClass(), mapId); }  Class<?> srcClass = srcObj.getClass(); Class<?> destClass = destObj.getClass();  // Check to see if custom converter has been specified for this mapping // combination. If so, just use it. Class<?> converterClass = MappingUtils.findCustomConverter(converterByDestTypeCache, classMap.getCustomConverters(), srcClass, destClass); if (converterClass != null) { mapUsingCustomConverter(converterClass, srcClass, srcObj, destClass, destObj, null, true); return; }  // Now check for super class mappings.  Process super class mappings first. if (!bypassSuperMappings) { Collection<ClassMap> superMappings = new ArrayList<ClassMap>();  Collection<ClassMap> superClasses = checkForSuperTypeMapping(srcClass, destClass); //List<ClassMap> interfaceMappings = classMappings.findInterfaceMappings(srcClass, destClass);  superMappings.addAll(superClasses); //superMappings.addAll(interfaceMappings); if (!superMappings.isEmpty()) { processSuperTypeMapping(superMappings, srcObj, destObj, mappedParentFields, mapId); } }  // Perform mappings for each field. Iterate through Fields Maps for this class mapping for (FieldMap fieldMapping : classMap.getFieldMaps()) { //Bypass field if it has already been mapped as part of super class mappings. String key = MappingUtils.getMappedParentFieldKey(destObj, fieldMapping); if (mappedParentFields != null && mappedParentFields.contains(key)) { continue; } mapField(fieldMapping, srcObj, destObj); } } 	1	0	1	1	1	0
"public static void updateLocation(Location l) { // Note this should be a background operation -- alex GetCallback<ParseObject> p = new GetCallback<ParseObject>() { @Override public void done(ParseObject arg0, ParseException arg1) { Map<String, Object> m = new HashMap<String,Object>(); m.put(""coordinates"", new ParseGeoPoint(l.getCoordinates().getLat(),l.getCoordinates().getLng())); if(arg1!=null){ DatabaseManager.update(""Location"",arg0.getObjectId(),m); for(Review r :l.getReviews()){ ReviewManager.updateReview(r); } } else{ saveLocation(l); } //arg1.printStackTrace(); } }; checkLocationInDB(l,p);  } "	0	1	1	1	1	0
"private void buildTags() { final StringBuilder sbTags = new StringBuilder(); for (Tag tag : picture.getListTags()) { sbTags.append(tag.getValue()); sbTags.append("", ""); } if (sbTags.length() > 2) { sbTags.setLength(sbTags.length() - 2); } tagsTxt.setText(sbTags.toString());  if (picture.getUser().getLogin().equals(app.currentUser().getLogin())) { tagsEditTxt.setText(sbTags.toString()); tagsEditBtn.setOnMouseClicked(new EventHandler<MouseEvent>() { @Override public void handle(final MouseEvent mouseEvent) { editTags(mouseEvent); } }); } } "	0	0	0	0	1	0
private boolean writePropertiesRealms(boolean started, ModelNode subsystem, XMLExtendedStreamWriter writer) throws XMLStreamException { if (subsystem.hasDefined(PROPERTIES_REALM)) { startRealms(started, writer);  List<Property> realms = subsystem.require(KEYSTORE_REALM).asPropertyList(); for (Property current : realms) { writer.writeStartElement(PROPERTIES_REALM); writer.writeAttribute(NAME, current.getName()); ModelNode model = current.getValue(); PropertiesRealmDefinition.PLAIN_TEXT.marshallAsAttribute(model, writer); writeFile(USERS_PROPERTIES, model.get(USERS_PROPERTIES), writer); writeFile(GROUPS_PROPERTIES, model.get(GROUPS_PROPERTIES), writer); writer.writeEndElement(); }  return true; } return false; } 	1	0	1	0	1	0
"LocalizedAssetBody getPseudoLocalizedAsset(Repository repository, FileMatch sourceFileMatch) throws CommandException { consoleWriter.a("" - Processing locale: "").fg(Color.CYAN).a(outputBcp47tag).print();  try { Asset assetByPathAndRepositoryId = assetClient.getAssetByPathAndRepositoryId(sourceFileMatch.getSourcePath(), repository.getId());  String assetContent = commandHelper.getFileContent(sourceFileMatch.getPath());  // TODO(P1) This is to inject xml:space=""preserve"" in the trans-unit element // in the xcode-generated xliff until xcode fixes the bug of not adding this attribute // See Xcode bug http://www.openradar.me/23410569 if (sourceFileMatch.getFileType().getClass() == XcodeXliffFileType.class) { assetContent = commandHelper.setPreserveSpaceInXliff(assetContent); }  LocalizedAssetBody pseudoLocalizedAsset = assetClient.getPseudoLocalizedAssetForContent( assetByPathAndRepositoryId.getId(), assetContent, sourceFileMatch.getFileType().getFilterConfigIdOverride());  logger.trace(""PseudoLocalizedAsset content = {}"", pseudoLocalizedAsset.getContent()); return pseudoLocalizedAsset; } catch (AssetNotFoundException e) { throw new CommandException(""Asset with path ["" + sourceFileMatch.getSourcePath() + ""] was not found in repo ["" + repositoryParam + ""]"", e); } } "	0	0	0	0	1	0
"@Override public void execute() throws CommandException { consoleWriter.newLine().a(""Pull pseudo localized asset from repository: "").fg(Color.CYAN).a(repositoryParam).println(2);  repository = commandHelper.findRepositoryByName(repositoryParam);  commandDirectories = new CommandDirectories(sourceDirectoryParam, targetDirectoryParam);  for (FileMatch sourceFileMatch : commandHelper.getSourceFileMatches(commandDirectories, fileType, sourceLocale, sourcePathFilterRegex)) { consoleWriter.a(""Localizing: "").fg(Color.CYAN).a(sourceFileMatch.getSourcePath()).println(); generatePseudoLocalizedFiles(repository, sourceFileMatch); } consoleWriter.fg(Color.GREEN).newLine().a(""Finished"").println(2); } "	0	0	0	0	1	0
private void dispatchPositionChangedCallback() { if (callbacks != null && !callbacks.isEmpty()) { for (Callbacks callback : callbacks) { callback.onSheetPositionChanged(dragView.getTop()); } } } 	0	1	0	0	1	0
private boolean isDraggableViewUnder(int x, int y) { return getVisibility() == VISIBLE && viewDragHelper.isViewUnder(this, x, y); } 	0	0	0	0	1	0
@Override public int clampViewPositionVertical(View child, int top, int dy) { return Math.min(Math.max(top, dragViewExpandedTop), dragViewBottom); } 	0	0	0	0	1	0
@Override protected void onAttachedToWindow() { super.onAttachedToWindow(); viewDragHelper = ViewDragHelper.create(this, dragHelperCallbacks); } 	0	1	0	0	1	0
"private void addOrderSeries(final Document document, final Entity entity, final List<String> orderHeader) throws DocumentException { PdfPTable table = PdfUtil.createTableWithHeader(4, orderHeader, false); List<Entity> genealogies = getGenealogies(entity); Collections.sort(genealogies, new EntityOrderNumberComparator()); for (Entity genealogy : genealogies) { Entity order = (Entity) genealogy.getField(""order""); table.addCell(new Phrase(order.getField(""number"").toString(), PdfUtil.getArialRegular9Dark())); table.addCell(new Phrase(order.getField(""name"").toString(), PdfUtil.getArialRegular9Dark())); Entity product = (Entity) order.getField(""product""); if (product == null) { table.addCell(new Phrase("""", PdfUtil.getArialRegular9Dark())); } else { table.addCell(new Phrase(product.getField(""name"").toString(), PdfUtil.getArialRegular9Dark())); } table.addCell(new Phrase(genealogy.getField(""batch"").toString(), PdfUtil.getArialRegular9Dark())); } document.add(table); } "	0	0	0	0	1	0
@Test public void addLayerInputOnly() { NeuralNetwork nn = new NeuralNetwork(); nn.addLayer(2); ArrayList<Perceptron> inputLayer = nn.layers.get(0); for(Perceptron p : inputLayer) { assertNull(p.inputs); assertNull(p.outputs); } } 	0	0	0	0	1	0
"public void processInputFile (File file) { this.processedLines = 0l;  try { final FileReader inputFileReader = new FileReader(file); final BufferedReader inputStream = new BufferedReader(inputFileReader); String line = null; while ((line = inputStream.readLine()) != null) { final RMRecord record = processSingleLine(line); if(record != null) { // process the record addRmRecordToDataset(record); } processedLines++; }  inputStream.close(); LOG.info(""Processed "" + this.processedLines + "" lines of PMRM0003I type.""); LOG.info(""Number of testCase tables found: "" + getRootCases().size()); } catch (IOException e) { e.printStackTrace(); } finally { //notify the observers that we are done setChanged(); notifyObservers(new ParsingHasFinishedEvent()); } } "	1	1	1	1	1	0
"public void test11() { GrammarRelation[] ddd = WordNetProvider.getInstance().getPossibleGrammarForms(""витая""); System.out.println(Arrays.toString(ddd)); Euristic matched = matched(getRulesList11(), ""ложечка витая""); assertNotNull(matched); } "	0	0	0	0	1	0
@Override public boolean supportsFoldRegions(Document document, boolean quick) { return textRange != null && items.stream().allMatch(i -> i.supportsFoldRegions(document, quick)); } 	0	0	0	0	1	0
@Override public void onEntityCollidedWithBlock(World world, int x, int y, int z, Entity entity) { // If the entity is a living entity if (entity instanceof EntityLivingBase) { entity.attackEntityFrom(DamageSource.cactus, 1);  if (world.getBlockMetadata(x, y, z) == 1) { ((EntityLiving) entity).addPotionEffect(new PotionEffect(Potion.poison.id, 7 * 20, 0)); } else if (world.getBlockMetadata(x, y, z) == 2) { entity.setFire(7); } } } 	0	0	0	0	1	0
"public ArrayList<Token> parsear(String regEx) { ArrayList<Token> tokens = new ArrayList<Token>(); String[] characters = regEx.split(""""); Token token = new Token("""",""""); String generator = """"; for (String character : characters) { if(tokenValidator.isQuantifier(character)){ token.setQuantifier(character); token.setGenerator(generator); tokens.add(token); generator = """"; token = new Token("""",""""); } else{ if(tokenValidator.isOpenUnionGenerator(generator) || tokenValidator.isEscaped(generator)){ generator += character; } else{ if(generator != """"){ token.setGenerator(generator); tokens.add(token); token = new Token("""",""""); generator = """"; } generator = character; } }  }  if(tokenValidator.isLastGenerator(generator)){ token.setGenerator(generator); tokens.add(token); } return tokens; } "	0	1	0	0	1	0
"public void testListenerIsCallableFromNetworkThreads() throws Throwable { ThreadPool threadPool = new TestThreadPool(""testListenerIsCallableFromNetworkThreads""); try { final PlainListenableActionFuture<Object> future; if (randomBoolean()) { future = PlainListenableActionFuture.newDispatchingListenableFuture(threadPool); } else { future = new PlainListenableActionFuture<>(); } final CountDownLatch listenerCalled = new CountDownLatch(1); final AtomicReference<Throwable> error = new AtomicReference<>(); final Object response = new Object(); future.addListener(new ActionListener<Object>() { @Override public void onResponse(Object o) { listenerCalled.countDown(); }  @Override public void onFailure(Exception e) { error.set(e); listenerCalled.countDown(); } }); Thread networkThread = new Thread(new AbstractRunnable() { @Override public void onFailure(Exception e) { error.set(e); listenerCalled.countDown(); }  @Override protected void doRun() throws Exception { future.onResponse(response); } }, Transports.TEST_MOCK_TRANSPORT_THREAD_PREFIX + ""_testListenerIsCallableFromNetworkThread""); networkThread.start(); networkThread.join(); listenerCalled.await(); if (error.get() != null) { throw error.get(); } } finally { ThreadPool.terminate(threadPool, 10, TimeUnit.SECONDS); } } "	0	0	0	0	1	0
public final void expand(int index) { expand(index); } 	0	0	0	0	1	0
"public void startCapturingVideo(File file) { if (file == null) { file = new File(getContext().getExternalFilesDir(null), ""video.mp4""); } if (mCameraController.startVideo(file)) { mUiHandler.post(new Runnable() { @Override public void run() { mKeepScreenOn = getKeepScreenOn(); if (!mKeepScreenOn) setKeepScreenOn(true); } }); } } "	0	0	0	0	1	0
"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { String subOrPost = request.getParameter(""subOrPost""); response.setContentType(""application/json""); response.addHeader(""Access-Control-Allow-Origin"", ""*""); response.getWriter().write(ReturnAddress.returnAddFamVio(subOrPost)); // response.getWriter().write(ReturnAddress.returnAddFamVio(""3000"")); } "	0	1	0	0	1	0
"private void parseEntity(int index) { /* * Get all the information from the JSON and process the data into * strings that the class can uses */ String entityID = json.getString(index, ENTITYID).replaceAll(regEx, """"); String[] drop = json.getString(index, DROPS).replaceAll(regEx, """").split("",+""); float min = Float.parseFloat(json.getString(index, MIN).replaceAll(regEx, """")); float max = Float.parseFloat(json.getString(index, MAX).replaceAll(regEx, """"));  if (!json.getString(index, MODID).equalsIgnoreCase(MINECRAFT)) entityName.append(json.getString(index, MODID).replaceAll(regEx, """")).append(""."");  if (entityID.endsWith(""*"")) { isWildCard = true; entityID = entityID.substring(0, entityID.lastIndexOf(""*"")); }  entityName.append(entityID);  if (isWildCard) wildcardMap.add(new EntityData(entityName.toString(), drop, min, max)); else entityMap.put(entityName.toString(), new EntityData(drop, min, max));  } "	0	0	0	0	1	0
private static Document parseText(String text) throws DocumentException {  final SAXReader reader = new SAXReader(); final String encoding = getEncoding(text);  InputSource source = new InputSource(new StringReader(text)); source.setEncoding(encoding);  return reader.read(source); } 	0	0	0	0	1	0
@Override protected void checkAndDropBlock(World world, int x, int y, int z) { int meta = world.getBlockMetadata(x, y, z); if (!this.canBlockStay(world, x, y, z, meta)) { this.dropBlockAsItem(world, x, y, z, meta, 0); world.setBlockToAir(x, y, z); } } 	0	0	0	0	1	0
protected void checkBillCommitteeAgendas(BillView content, BillView reference, SpotCheckObservation<BaseBillId> obsrv) { String content_str = serialize(content.getCommitteeAgendas(), true); String reference_str = serialize(content.getCommitteeAgendas(), true); if (!content_str.equals(reference_str)) obsrv.addMismatch(new SpotCheckMismatch(BILL_COMMITTEE_AGENDAS_OPENLEG_DEV, content_str, reference_str)); } 	1	1	1	1	1	0
"@Override public String toString() { if (isSuccess()) { return ""success""; } else if (isTimeout()) { return ""timeout""; } else { final ZclStatus status = ZclStatus.getStatus((byte) getStatusCode().intValue()); return ""message: "" + status.name() + ""(0x"" + Integer.toHexString(status.getId()) + "", "" + status.getDescription(); } } "	0	1	0	0	1	0
"public synchronized void insertOrUpdateAppDetails(AppInfo appInfo) { SQLiteDatabase db = getWritableDatabase();  Cursor c = null; try { c = db.query(AppDetailsTable.DATABASE_TABLE_NAME, new String[] { AppDetailsTable.ROWID }, AppDetailsTable.APPINFO_ID + ""=?"", new String[] { Long.toString(appInfo.getId()) }, null, null, null); if (c.getCount() < 1 || !c.moveToNext()) { saveAppDetails(appInfo); } else { long id = saveAppDetails(db, appInfo); appInfo.getDetails().setId(id); updateAppDetails(appInfo.getDetails()); } } finally { if (c != null) { c.close(); } } } "	0	0	0	0	1	0
"@Override public DiscoveryResult createResult(ServiceInfo info) { DiscoveryResult result = null; ThingUID uid = getThingUID(info); if (uid != null) { Map<String, Object> properties = new HashMap<>(4); String label; try { label = info.getName(); } catch (Exception e) { label = ""unnamed enigma2 device""; } // remove the domain from the name InetAddress[] addrs = info.getInetAddresses();  if (addrs.length > 1) { logger.warn(""Enigma2 device {} ({}) reports multiple addresses - using the first one! {}"", info.getName(), label, Arrays.toString(addrs)); }  properties.put(Enigma2BindingConstants.DEVICE_PARAMETER_HOST, addrs[0].getHostAddress()); properties.put(Enigma2BindingConstants.DEVICE_PARAMETER_USER, """"); properties.put(Enigma2BindingConstants.DEVICE_PARAMETER_PASSWORD, """"); properties.put(Enigma2BindingConstants.DEVICE_PARAMETER_REFRESH, ""5000""); return DiscoveryResultBuilder.create(uid).withProperties(properties).withLabel(label).build(); } return result; } "	0	1	0	1	1	0
"public static String notContains() { return getInstance().getString(""not_contains"", """"); } "	0	0	0	0	1	0
"public static String blackList() { return getInstance().getString(""black_list"", """"); } "	0	0	0	0	1	0
"public JSONObject toJSON() { JSONObject jsonObject = new JSONObject(); if (userId != null) { jsonObject.put(""userId"", new JSONNumber(userId)); } jsonObject.put(""firstName"", new JSONString(firstName)); jsonObject.put(""lastName"", new JSONString(lastName)); jsonObject.put(""email"", new JSONString(email)); // TODO: do not use this as it is the ""security user"" placeholder //        jsonObject.put(""username"", new JSONString(email)); if (role != null) { jsonObject.put(""role"", new JSONString(role)); }  JSONArray groupArray = new JSONArray(); for (int i = 0; i < groupList.size(); i++) { groupArray.set(i, new JSONString(groupList.get(i))); } jsonObject.put(""groups"", groupArray);  JSONArray availableGroupArray = new JSONArray(); for (int i = 0; i < availableGroupList.size(); i++) { availableGroupArray.set(i, new JSONString(availableGroupList.get(i))); } jsonObject.put(""availableGroups"", availableGroupArray);  if (password != null) { jsonObject.put(""password"", new JSONString(password)); }  JSONArray organismPermissions = new JSONArray(); int index = 0; for (String organism : organismPermissionMap.keySet()) { JSONObject orgPermission = new JSONObject(); orgPermission.put(organism, organismPermissionMap.get(organism).toJSON()); organismPermissions.set(index, orgPermission); ++index; } jsonObject.put(""organismPermissions"", organismPermissions);   return jsonObject; } "	0	1	0	0	1	0
public boolean withdraw(float amount) { if (amount > 0.0f) { // KG: incorrect, last balance check should be >= if (getState() == State.OPEN || (getState() == State.OVERDRAWN && balance > -100.0f)) { balance = balance - amount; numWithdraws++; if (numWithdraws > 10) balance = balance - 2.0f; if (balance < 0.0f) { setState(State.OVERDRAWN); } return true; } } return false; } 	1	0	1	0	1	0
"@Override public boolean onTouch(View v, MotionEvent event) { if (deactivated) return false; switch (event.getAction() & MotionEvent.ACTION_MASK) {  case MotionEvent.ACTION_DOWN: click = true; //gesture has begun float x; float y;  mActivePointerId = event.getPointerId(0);  x = event.getX(); y = event.getY();  initialXPress = x; initialYPress = y; break;  case MotionEvent.ACTION_MOVE: //gesture is in progress  final int pointerIndex = event.findPointerIndex(mActivePointerId); //TODO figure out what causes this multitouch problem and implement a proper fix // FIXME: 20/01/2016 //Log.i(""pointer index: "" , Integer.toString(pointerIndex)); if(pointerIndex < 0 || pointerIndex > 0 ){ break; }  final float xMove = event.getX(pointerIndex); final float yMove = event.getY(pointerIndex);  //calculate distance moved final float dx = xMove - initialXPress; final float dy = yMove - initialYPress;  //throw away the move in this case as it seems to be wrong //TODO: figure out why this is the case if((int)initialXPress == 0 && (int) initialYPress == 0){ //makes sure the pointer is valid break; } //calc rotation here float posX = card.getX() + dx; float posY = card.getY() + dy;  //in this circumstance consider the motion a click if (dx + dy > 5) click = false;  card.setX(posX); card.setY(posY);  //card.setRotation float distobjectX = posX - initialX; float rotation = ROTATION_DEGREES * 2.f * distobjectX / parentWidth; card.setRotation(rotation);  if (rightView != null && leftView != null){ //set alpha of left and right image float alpha = (((posX - paddingLeft) / (parentWidth * OPACITY_END))); //float alpha = (((posX - paddingLeft) / parentWidth) * ALPHA_MAGNITUDE ); //Log.i(""alpha: "", Float.toString(alpha)); rightView.setAlpha(alpha); leftView.setAlpha(-alpha); }  break;  case MotionEvent.ACTION_UP: //gesture has finished //check to see if card has moved beyond the left or right bounds or reset //card position checkCardForEvent(); //check if this is a click event and then perform a click //this is a workaround, android doesn't play well with multiple listeners  if (click) v.performClick(); //if(click) return false;  break;  default: return false; } return true; } "	0	0	0	0	1	0
"String get(NBTTagCompound data) { if (data.hasKey(_nbtKey) && data.hasKey(_nbtKey2)) { int materialId, materialData; if (_asShort) { materialId = data.getShort(_nbtKey) & 0xFF; materialData = data.getShort(_nbtKey2) & 0xFF; } else { materialId = data.getInt(_nbtKey); if (_dataAsInt) { materialData = data.getInt(_nbtKey2) & 0xFF; } else { materialData = data.getByte(_nbtKey2) & 0xFF; } } return Material.getMaterial(materialId).name() + "":"" + materialData; } return null; } "	0	0	0	0	1	0
"public boolean isParsing(){ return this.videoURL.equals(""PARSING""); } "	0	0	0	0	1	0
@Override public Task createOSSPutTask(File file, String finalDstKey, String uploadId, int idx) throws IOException { long contentLength = file.length(); return new OSSPutTask(ossClientAgent, uploadId, bucket, finalDstKey, contentLength, 0L, idx, file, conf); } 	1	0	1	0	1	0
public List<BasicSchemaGridRow> getBasicSchemaGridRowList(String targetTerminal, Link link) { List<BasicSchemaGridRow> basicSchemaGridRows=null; if(StringUtils.equalsIgnoreCase(Constants.INPUT_SUBJOB_COMPONENT_NAME, link.getSource().getComponentName()) ||StringUtils.equalsIgnoreCase(Constants.SUBJOB_COMPONENT, link.getSource().getComponentName())) { Map<String,Schema> inputSchemaMap=(HashMap<String,Schema>)link.getSource().getProperties(). get(Constants.SCHEMA_FOR_INPUTSUBJOBCOMPONENT); if(inputSchemaMap!=null &&inputSchemaMap.get(targetTerminal)!=null) basicSchemaGridRows=SchemaSyncUtility.INSTANCE. convertGridRowsSchemaToBasicSchemaGridRows(inputSchemaMap.get(targetTerminal).getGridRow()); } else { Schema previousComponentSchema=(Schema)link.getSource().getProperties().get(Constants.SCHEMA); if (previousComponentSchema != null) basicSchemaGridRows=SchemaSyncUtility.INSTANCE. convertGridRowsSchemaToBasicSchemaGridRows(previousComponentSchema.getGridRow()); } return basicSchemaGridRows; } 	0	0	0	0	1	0
"private void setActionBar(View v) { ImageButton saveButton = (ImageButton)v.findViewById(R.id.saveButton); saveButton.setOnClickListener(new View.OnClickListener() {  public void onClick(View v) { saveNote(); activity.finish(); } });  ImageButton exportButton = (ImageButton)v.findViewById(R.id.exportButton); exportButton.setOnClickListener(new View.OnClickListener() {  public void onClick(View v) { exportNote();  } });  ImageButton deleteButton = (ImageButton)v.findViewById(R.id.deleteButton); deleteButton.setOnClickListener(new View.OnClickListener() {  public void onClick(View v) { deleteNote(); activity.finish();  } });  ImageButton shareButton = (ImageButton)v.findViewById(R.id.shareButton); shareButton.setOnClickListener(new View.OnClickListener() {  public void onClick(View v) { Intent intent = new Intent(Intent.ACTION_SEND); intent.setType(getString(R.string.mimetype_text));  if(content != null) { intent.putExtra(Intent.EXTRA_SUBJECT, ""Note for "" + content.getTitle()); String text = editText.getText().toString(); intent.putExtra(Intent.EXTRA_TEXT, text + ""\n\n"" + getString(R.string.shared_via));  Intent chooser = Intent.createChooser(intent, getString(R.string.tell_friend) + "" "" + content.getTitle()); startActivity(chooser); } else { Toast.makeText(activity, getString(R.string.no_data_msg), Toast.LENGTH_LONG).show(); }  } }); } "	0	0	0	0	1	0
@Override public Boolean getunicodePUA() { if (toUnicode == null) { return false; } for (int i = 0; i < toUnicode.length(); ++i) { int unicode = this.toUnicode.codePointAt(0); if ((unicode >= UNICODE_PRIVATE_USE_AREA_ARRAY[0] && unicode <= UNICODE_PRIVATE_USE_AREA_ARRAY[1]) || (unicode >= UNICODE_PRIVATE_USE_AREA_ARRAY[2] && unicode <= UNICODE_PRIVATE_USE_AREA_ARRAY[3]) || (unicode >= UNICODE_PRIVATE_USE_AREA_ARRAY[4] && unicode <= UNICODE_PRIVATE_USE_AREA_ARRAY[5])){ return true; } } return false; } 	1	1	1	1	1	0
"private void enterContactsScreen() { // TODO: hardcoded click position and menu text onView(isRoot()).perform(TestUtils.clickScreenPosition(0, 0)); onView(withText(""Contacts"")).perform(click()); } "	0	0	0	0	1	0
public AuthToken getToken() { return localDataManager.get(Options.ACCESS_TOKEN.name(), AuthToken.class); } 	0	0	0	0	1	0
"@Override protected void onPostExecute(final String[] hashes) { super.onPostExecute(hashes); if (!f.isDirectory()) { md5HashText.setText(hashes[0]); sha256Text.setText(hashes[1]);  mMD5LinearLayout.setOnLongClickListener(new View.OnLongClickListener() { @Override public boolean onLongClick(View v) {  Futils.copyToClipboard(c, hashes[0]); Toast.makeText(c, c.getResources().getString(R.string.md5).toUpperCase() + "" "" + c.getResources().getString(R.string.properties_copied_clipboard), Toast.LENGTH_SHORT).show(); return false; } }); mSHA256LinearLayout.setOnLongClickListener(new View.OnLongClickListener() { @Override public boolean onLongClick(View v) {  Futils.copyToClipboard(c, hashes[1]); Toast.makeText(c, c.getResources().getString(R.string.hash_sha256) + "" "" + c.getResources().getString(R.string.properties_copied_clipboard), Toast.LENGTH_SHORT).show(); return false; } }); } else { mMD5LinearLayout.setVisibility(View.GONE); mSHA256LinearLayout.setVisibility(View.GONE); } } "	0	1	0	0	1	0
public void onInstall() { final VDS host = getSelectedItem(); InstallModel model = (InstallModel) getWindow();  if (!model.validate(host.isOvirtNode())) { model.setValidationFailed(new EntityModel<Boolean>(true)); return; }  UpdateVdsActionParameters param = new UpdateVdsActionParameters(); param.setvds(host); param.setVdsId(host.getId()); param.setPassword(model.getUserPassword().getEntity()); param.setReinstallOrUpgrade(true); param.setInstallHost(true); param.setoVirtIsoFile(null); param.setOverrideFirewall(model.getOverrideIpTables().getEntity()); param.setActivateHost(model.getActivateHostAfterInstall().getEntity()); param.setAuthMethod(model.getAuthenticationMethod()); param.setFenceAgents(host.getFenceAgents());  Provider<?> networkProvider = (Provider<?>) model.getNetworkProviders().getSelectedItem(); if (networkProvider != null) { param.getVdsStaticData().setOpenstackNetworkProviderId(networkProvider.getId()); param.setNetworkMappings((String) model.getInterfaceMappings().getEntity()); param.setLocalIP((String) model.getlocalIP().getEntity()); }  AsyncDataProvider.getInstance().getClusterById(new AsyncQuery(param, new INewAsyncCallback() {  @Override public void onSuccess(Object model, Object returnValue) { VDSGroup cluster = (VDSGroup) returnValue; UpdateVdsActionParameters internalParam = (UpdateVdsActionParameters) model;  internalParam.setRebootAfterInstallation(cluster.supportsVirtService()); Frontend.getInstance().runAction( VdcActionType.InstallVds, internalParam, new IFrontendActionAsyncCallback() { @Override public void executed(FrontendActionAsyncResult result) { VdcReturnValueBase returnValue = result.getReturnValue(); if (returnValue != null && returnValue.getSucceeded()) { cancel(); } } } ); } }), host.getVdsGroupId());   } 	1	1	1	1	1	0
"public void signalResponseAvailable() { // NOTE: this is asynchronous log.i(t, ""["" + this.hashCode() + ""] signalResponseAvailable()""); loadJavascriptUrl(""javascript:odkData.responseAvailable();""); } "	0	0	0	0	1	0
public void process(WatchedEvent event) { event.getState(); NodeEvent nEvent = new NodeEvent(realPath(event.getPath()), eventType(event)) ; try { nodeWatcher.onEvent(nEvent); } catch (Exception e) { e.printStackTrace(); } } 	0	0	0	0	1	0
private void startNWinnersActivity(Group group) { Intent intent = new Intent(this, NWinnersActivity.class); intent.putExtra(Constants.INTENT_EXTRA_GROUP, group); startActivity(intent); } 	0	0	0	0	1	0
@Override public boolean isValid() { return StringUtils.isNotBlank(this.number); } 	0	0	0	0	1	0
"@Override public boolean deployService(ServiceDeployPayload data, String callSid) {  // TODO This values should be per User, now they are per VIM. This should be re-desinged once // user management is in place. JSONTokener tokener = new JSONTokener(getConfig().getConfiguration()); JSONObject object = (JSONObject) tokener.nextValue(); String tenant = object.getString(""tenant""); String identityPort = null; if(object.has(""identity_port"")){ object.getString(""identity_port""); } // String tenantExtNet = object.getString(""tenant_ext_net""); // String tenantExtRouter = object.getString(""tenant_ext_router""); // END COMMENT OpenStackHeatClient client = null; OpenStackNovaClient novaClient = null;  try { client = new OpenStackHeatClient(getConfig().getVimEndpoint().toString(), getConfig().getAuthUserName(), getConfig().getAuthPass(), tenant, identityPort); novaClient = new OpenStackNovaClient(getConfig().getVimEndpoint().toString(), getConfig().getAuthUserName(), getConfig().getAuthPass(), tenant, identityPort); } catch (IOException e) { Logger.error(""OpenStackHeat wrapper - Unable to connect to the VIM""); this.setChanged(); WrapperStatusUpdate errorUpdate = new WrapperStatusUpdate(callSid, ""ERROR"", e.getMessage()); this.notifyObservers(errorUpdate); return false; } ArrayList<Flavor> vimFlavors = novaClient.getFlavors(); Collections.sort(vimFlavors); HeatModel stack; try { stack = translate(data, vimFlavors);  HeatTemplate template = new HeatTemplate(); for (HeatResource resource : stack.getResources()) { template.putResource(resource.getResourceName(), resource); } DeployServiceFsm fsm = new DeployServiceFsm(this, client, callSid, data, template);  Thread thread = new Thread(fsm); thread.start(); } catch (Exception e) { this.setChanged(); WrapperStatusUpdate errorUpdate = new WrapperStatusUpdate(callSid, ""ERROR"", e.getMessage()); this.notifyObservers(errorUpdate); return false; }  return true;  } "	0	1	0	0	0	0
"@SubscribeEvent public void renderWorldLast(RenderWorldLastEvent event) { Profiler profiler = Minecraft.getMinecraft().mcProfiler;  profiler.startSection(""wizardry-particle"");  for (ParticleRenderQueue queue : queues) { profiler.startSection(queue.name()); queue.dispatchQueuedRenders(Tessellator.getInstance()); profiler.endSection(); }  profiler.endSection();  } "	0	0	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_guide_list);  Toolbar guideListToolbar = (Toolbar) findViewById(R.id.guide_list_toolbar); setSupportActionBar(guideListToolbar);  guideListToolbar.setTitleTextColor(0xFFFFFFFF);  if(getSupportActionBar() != null) { getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setDisplayShowHomeEnabled(true); }  Bundle bundle = getIntent().getExtras();  pinPointID = bundle.getString(""pin_point_id"");  searchView = (SearchView) findViewById(R.id.guide_list_searchview); searchEditText = (EditText) findViewById(R.id.search_src_text); closeButton = (ImageView) findViewById(R.id.search_close_btn); recyclerView = (RecyclerView) findViewById(R.id.guide_list_recyclerView);  recyclerView.setHasFixedSize(true); recyclerView.setLayoutManager(new LinearLayoutManager(this));  guideDataList = new ArrayList<>();  StringRequest stringRequestForStdList = new StringRequest(Request.Method.POST, guideListUrl, new Response.Listener<String>() { @Override public void onResponse(String response) { try { JSONObject jsonObject = new JSONObject(response); JSONArray jsonArray = jsonObject.getJSONArray(""guide_list_to_hire"");  for (int i = 0; i < jsonArray.length(); i++) { JSONObject obj = jsonArray.getJSONObject(i);  GuideData guideData = new GuideData( obj.getString(""user_id""), obj.getString(""nick_name""), obj.getString(""mobile_phone""), obj.getString(""email"")); guideDataList.add(guideData); }  guideListAdapter = new GuideListAdapter(guideDataList, GuideListActivity.this); recyclerView.setAdapter(guideListAdapter); } catch (JSONException e) { Toast.makeText(GuideListActivity.this, response, Toast.LENGTH_LONG).show(); e.printStackTrace(); } } }, new Response.ErrorListener() { @Override public void onErrorResponse(VolleyError error) { Toast.makeText(GuideListActivity.this, error.getMessage(), Toast.LENGTH_LONG).show(); error.printStackTrace(); } }) { @Override protected Map<String, String> getParams() throws AuthFailureError { Map<String, String> params = new HashMap<>();  params.put(""pin_point_id"", pinPointID);  return params; } };  MySingleton.getMyInstance(GuideListActivity.this).addToRequestQueue(stringRequestForStdList);  searchView.onActionViewExpanded(); searchView.setIconifiedByDefault(false); searchView.setQueryHint(""Search Guides To Hire"");  if(!searchView.isFocused()) { searchView.clearFocus(); }  //        stdSearchView.setOnClickListener(new View.OnClickListener() { //            @Override //            public void onClick(View v) { //                searchView.setIconified(false); //            } //        });  searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() { @Override public boolean onQueryTextSubmit(String query) {  return false; }  @Override public boolean onQueryTextChange(String newText) {  //                guideListAdapter.checkQueryFromList(newText.toLowerCase()); //                Toast.makeText(StudentList.this, newText, Toast.LENGTH_LONG).show();  return true; } });  closeButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { //Clear the text from EditText view searchEditText.setText("""");  //Clear query searchView.setQuery("""", false); guideListAdapter.notifyDataSetChanged(); searchView.clearFocus(); } }); } "	0	0	0	0	1	0
"@Override public String call(String input) { return input + ""map""; } "	0	0	0	0	1	0
"public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException { HttpServletResponse response = (HttpServletResponse) res; HttpServletRequest request = (HttpServletRequest) req;  response.setHeader(""Access-Control-Allow-Origin"", ""http://localhost:3000""); response.setHeader(""Access-Control-Allow-Credentials"", ""true""); response.setHeader(""Access-Control-Allow-Methods"", ""POST, PUT, GET, OPTIONS, DELETE""); response.setHeader(""Access-Control-Max-Age"", ""3600""); response.setHeader(""Access-Control-Allow-Headers"", ""x-requested-with, Authorization, Content-Type, x-auth-token"");  if (""OPTIONS"".equalsIgnoreCase(request.getMethod())) { response.setStatus(HttpServletResponse.SC_OK); } else { chain.doFilter(req, res); } } "	0	0	0	0	1	0
"public void openKitGUI(Player player) {  Inventory kitInv = Bukkit.createInventory(player, 9, rApi.colourize(""&eKits""));  //ItemStacks displayed in kitInv ItemStack fighterLogo = rApi.createCustomItem(Material.SHIELD, 1, ""&cFighter"", ""&3Get the Fighter Kit!""); ItemStack rangerLogo = rApi.createCustomItem(Material.BOW, 1, ""&fRanger"", ""&3Get the Ranger Kit!"");  kitInv.setItem(0, fighterLogo); kitInv.setItem(1, rangerLogo);  player.openInventory(kitInv); } "	0	0	0	0	1	0
"@Test public void shouldReturnConsulProtocol() { // given String expected = ""https""; ReflectionTestUtils.setField(configurationSettingService, ""consulProtocolSetting"", expected);  // when String result = configurationSettingService.getConsulProtocol();  // then assertEquals(expected, result); } "	0	1	1	1	1	0
"private static void printMenuMessage(byte i) { if(i==1) { System.out.println(""#   $$$$  $$ $$   $$$   $$    $$    $$$$$  $   $   $$$$  $$$$$  #""); System.out.println(""#  $$     $$ $$  $$ $$  $$    $$    $$     $$  $  $$     $$     #""); System.out.println(""#  $      $$$$$  $$$$$  $$    $$    $$$$   $ $ $  $   $$ $$$    #""); System.out.println(""#  $$     $$ $$  $$ $$  $$    $$    $$     $  $$  $$   $ $$     #""); System.out.println(""#   $$$$  $$ $$  $$ $$  $$$$$ $$$$$ $$$$$  $   $   $$$$  $$$$$  #"");  System.out.println(""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~""); System.out.println(""\t\tCHALLENGE - MINIGAMES""); System.out.println(""~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"");  System.out.println(LSD.getString(""prMeMsg_msg1"")); System.out.println(LSD.getString(""prMeMsg_msg2"")); System.out.println(LSD.getString(""prMeMsg_msg3"")); }else if(i==2){ System.out.println(LSD.getString(""prMeMsg_msg4"")); System.out.println(LSD.getString(""prMeMsg_msg5"")); } } "	0	0	0	0	1	0
public void denyRole(String role, Permission permission) { BitSet bsDeny = roleDenyPermissions.get(role); if (bsDeny == null) { bsDeny = new BitSet(); bsDeny.set(permission.ordinal()); roleDenyPermissions.put(role, bsDeny); } else { bsDeny.set(permission.ordinal()); }  BitSet bsAllow = roleAllowPermissions.get(role); if (bsAllow != null) { bsAllow.clear(permission.ordinal()); } } 	0	0	0	0	1	0
"@Test public void TestProjectManager() { // test ProjectManager //load Projects try { main.main(null); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); }  //test void methods managerTest = new ProjectManager(); managerTest.loadProjects(); managerTest.saveProjects(); managerTest.getProject(1).removeComponents(1); managerTest.getProject(1).removeDefectEntry(1); managerTest.getProject(1).removeRequirement(1); managerTest.getProject(1).removeReviews(1); managerTest.getProject(1).removeTimeEntry(1); managerTest.getProject(1).removeUserTests(1);  //test booleans assertNotNull(managerTest.getAllProjects()); assertNotNull(managerTest.getProject(1)); assertTrue(managerTest.deleteProject(1)); assertTrue(managerTest.clearAllProjects()); assertTrue(managerTest.newProject(""Junit"", ""Unit Test"", PSPType.PSP1));  } "	0	0	0	0	1	0
"@Test public void testMultipleRequesterListenForAcks() throws Exception { MsbMessageOptions messageOptions = TestUtils.createSimpleConfigSetNamespace(""test:requester-responder-test-send-multiple-requests-get-ack""); messageOptions.setAckTimeout(100); messageOptions.setResponseTimeout(2000); messageOptions.setWaitForResponses(1);  int requestsToSendDuringTest = 5;  CountDownLatch ackSend = new CountDownLatch(requestsToSendDuringTest); CountDownLatch ackResponseReceived = new CountDownLatch(requestsToSendDuringTest);  List<Message> sentAcks = new LinkedList<Message>(); List<Acknowledge> receivedResponseAcks = new LinkedList<Acknowledge>();  //Create and send request messages directly to broker, wait for ack Payload requestPayload = TestUtils.createSimpleRequestPayload();  final AtomicInteger messagesToSend = new AtomicInteger(requestsToSendDuringTest); Thread publishingThread= new Thread(() -> { while (messagesToSend.get() > 0) {  Requester.create(messageOptions, msbContext). onAcknowledge((Acknowledge ack) -> { receivedResponseAcks.add(ack); ackResponseReceived.countDown(); }) .publish(requestPayload); messagesToSend.decrementAndGet(); }  }); publishingThread.setDaemon(true); publishingThread.start();  //listen for message and send ack MsbContext serverMsbContext = TestUtils.createSimpleMsbContext(); Random randomAckValue = new Random(); randomAckValue.ints(); ResponderServer.create(messageOptions, serverMsbContext) .use(((request, response) -> { response.sendAck(randomAckValue.nextInt(), randomAckValue.nextInt()); sentAcks.add(response.getResponseMessage()); ackSend.countDown(); })) .listen();  assertTrue(""Message ack was not send"", ackSend.await(3000, TimeUnit.MILLISECONDS)); assertTrue(""Message ack response not received"", ackResponseReceived.await(3000, TimeUnit.MILLISECONDS)); assertTrue(""Expected one ack"", receivedResponseAcks.size() == requestsToSendDuringTest); assertEquals(sentAcks.stream().map(Message::getAck).collect(toList()), receivedResponseAcks); } "	0	1	0	0	0	0
"private void displayDataPayer(){ LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT); params.gravity = Gravity.CENTER_VERTICAL; params.weight = 1f;  final SubStatement subStatement = data.findPayerStatement(user); LinearLayout memberRow = new LinearLayout(parent); memberRow.setPadding(0, 0, 0, Utility.getPixel(2, getResources()));  TextView payee = new TextView(parent); payee.setGravity(Gravity.CENTER); payee.setText(subStatement.payerName); payee.setLayoutParams(params);  TextView payer = new TextView(parent); payer.setGravity(Gravity.CENTER); payer.setText(""YOU""); payer.setLayoutParams(params);  TextView amount = new TextView(parent); amount.setGravity(Gravity.CENTER); amount.setText(""$ "" + String.format(""%.2f"", subStatement.payerAmount)); amount.setLayoutParams(params);  memberRow.addView(payer); memberRow.addView(payee); memberRow.addView(amount); layout.addView(memberRow); deleteButton.setVisibility(View.GONE); paymentOptionLayout.setVisibility(View.GONE);  if(subStatement.payerConfirm){ confirmButton.setVisibility(View.GONE); rejectButton.setVisibility(View.GONE); } else { confirmButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { subStatement.setPayerConfirm(parent); confirmButton.setVisibility(View.GONE); rejectButton.setVisibility(View.GONE); } });  rejectButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { subStatement.setPayerReject(parent); } }); } } "	0	1	0	0	0	0
"private <T> void setFieldValue(T classObject, String configKey, Object value) throws ConfigurationException { Field field = getClassField(classObject, configKey);  if (field.getType().isPrimitive()) { value = castToPrimitiveType(field, value.toString()); }  try { field.set(classObject, value); } catch (IllegalAccessException e) { throw new ConfigurationException(String.format(Locale.ENGLISH, ""Error in overriding deployment config value with environment config key %s value"", configKey)); } } "	0	1	0	0	0	0
private static HashSet<Integer> populateMisplacedCars(int[] given, int[] desired) { HashSet<Integer> misplacedCars = new HashSet<Integer>(); for (int i = 0; i < given.length; i++) { if (given[i] != desired[i] && given[i] != 0) { misplacedCars.add(given[i]); } } return misplacedCars; } 	1	0	1	0	1	0
"@Override public boolean validateCertificate(String certificate, String key, String domainSuffix) { if (certificate == null || certificate.isEmpty() || key == null || key.isEmpty() || domainSuffix == null || domainSuffix.isEmpty()) { s_logger.error(""Invalid parameter found in (certificate, key, domainSuffix) tuple for domain: "" + domainSuffix); return false; }  try { String ksPassword = ""passwordForValidation""; byte[] ksBits = CertificateHelper.buildAndSaveKeystore(domainSuffix, certificate, getKeyContent(key), ksPassword); KeyStore ks = CertificateHelper.loadKeystore(ksBits, ksPassword); if (ks != null) return true;  s_logger.error(""Unabled to construct keystore for domain: "" + domainSuffix); } catch (Exception e) { s_logger.error(""Certificate validation failed due to exception for domain: "" + domainSuffix, e); } return false; } "	0	0	0	0	1	0
"@Test public void testSF0FilterStyle() throws Exception { final String nameFilter = ""filterBob""; final String custodianFilter = ""filterCustodian""; final String dateOfDrilling = ""1986-10-09""; final int maxFeatures = 10; final FilterBoundingBox bbox = null;  String filter = service.getFilter(nameFilter, custodianFilter, dateOfDrilling, maxFeatures, bbox, null);  String style = service.getStyle(filter, null, ""#2242c7"", Styles.ALL_BOREHOLES); Assert.assertNotNull(style); Assert.assertThat(style, Matchers.containsString(""gsmlp:BoreholeView""));  } "	0	0	0	0	1	0
"public void updateCapacity() { Unit unit = (Unit) Cache.getInstance().retrieve(""unit"");  try { unit.setAvailableBeds(Integer.parseInt(view.getAvailableBedsUiElement().getValue())); unit.setPotentialDc(Integer.parseInt(view.getPotentialDcUiElement().getValue())); unit.setDcByDeadline(Integer.parseInt(view.getDcByDeadlineUiElement().getValue())); unit.setTotalAdmits(Integer.parseInt(view.getTotalAdmitsUiElement().getValue())); unit.setAdmitsByDeadline(Integer.parseInt(view.getAdmitsByDeadlineUiElement().getValue())); }catch(NumberFormatException e){  }  Service.updateOrSaveUnit(unit); //} Bootstrapper.FACTORY.newDispatcher().goToCapacityOverview(); } "	0	0	0	0	1	0
@Override protected StringConverter<LocalTime> getConverter() { return jfxTimePicker.getConverter(); } 	0	0	0	0	1	0
public static ReportFeatureEnum getRequiredFeatureToDeleteReport(ReportDTO report, String username) { ReportFeatureEnum requiredFeature = null;  if (!report.getCreatedBy().equals(username)) { requiredFeature = ReportFeatureEnum.MANAGE_ALL_REPORTS; }  return requiredFeature; } 	1	0	1	1	1	0
public boolean isVisited(Element element) { return profile.containsKey(element); } 	0	0	0	0	1	0
private static <V> ValueHolder<V> newValueHolder(V value) { return new ByRefOnHeapValueHolder<V>(value, SystemTimeSource.INSTANCE.getTimeMillis()); } 	0	0	0	0	1	0
@Bean public AppRegistryController appRegistryController(AppRegistry appRegistry, ApplicationConfigurationMetadataResolver metadataResolver) { return new AppRegistryController(appRegistry, metadataResolver); } 	0	0	0	0	1	0
@Override public Collection<V> next() { if (!this.hasNext()) { throw new NoSuchElementException(); }  Collection<V> resources = getPage(nextPage, itemsPerPage);  if (resources.size() > 0) { nextPage = -1; } else { ++nextPage; }  return resources; } 	1	0	1	1	1	0
"void checkRealtime() { if (clock != null) { checkState(clock.getClockMode() == ClockMode.REAL_TIME, ""Clock must be in real-time mode, but is in %s mode."", clock.getClockMode()); // make sure we stay in rt LOGGER.debug(""check real time -> switch to real time""); clock.switchToRealTime(); } } "	0	0	0	0	1	0
"@Override public void onResponseOk(final String s, Response r) {  if (progressBar != null) { progressBar.progressiveStop(); progressBar.setVisibility(View.INVISIBLE); }  Uri.Builder builder = Uri.parse(""https://github.com/"").buildUpon();  builder.appendPath(repoInfo.owner); builder.appendPath(repoInfo.name); builder.appendPath(""raw""); builder.appendPath(repoInfo.branch);  webview.loadDataWithBaseURL(builder.build().toString() + ""/"", s, ""text/html"", ""UTF-8"", null); } "	0	0	0	0	1	0
"private void printFailuresToFile(Collection<String> failedTestsInExecution) { File failed = Paths.get(this.nondexDir, this.executionId, ConfigurationDefaults.FAILURES_FILE) .toFile();  try (BufferedWriter bw = new BufferedWriter(new FileWriter(failed))) { for (String test : failedTestsInExecution) { bw.write(test + ""\n""); } } catch (FileNotFoundException fne) { Logger.getGlobal().log(Level.FINEST, ""File Not Found. Probably no test failed in this run.""); } catch (IOException ioe) { Logger.getGlobal().log(Level.WARNING, ""Exception reading failures file."", ioe); } } "	0	1	0	0	0	0
"@Override public List<Ordering> filterAll(Map<String, Object> parameters, Integer start, Integer step) { List<Ordering> entities = new ArrayList<>(); String query = null; if (parameters == null || parameters.isEmpty()) query = ""SELECT * FROM "" + table + "" Limit "" + start + "", "" + step; else { query = createFilterQuery(parameters, start, step); }  try (Connection connection = connectionPool.getConnection(); PreparedStatement statement = connection .prepareStatement(query); ResultSet set = statement.executeQuery()) { while (set.next()) { Ordering entity = transformer.getObject(set); entities.add(entity); } } catch (Exception e) { e.printStackTrace(); } return entities; } "	0	0	0	0	1	0
"public void nextMonth() { currentDate = currentDate.plusMonths(1); labelMonth.setText(currentDate.toString(""MMMM yyyy""));  refresh(filterSettings); } "	0	1	0	0	0	0
"@Test public void storeMultipleDocumentsTest() throws Exception { Map<String, Object> docs = new HashMap<>(); docs.put(""security1500.xml"", readTextFile(sampleRoot + ""security1500.xml"")); docs.put(""security5621.xml"", readTextFile(sampleRoot + ""security5621.xml"")); docs.put(""security9012.xml"", readTextFile(sampleRoot + ""security9012.xml"")); docs.put(""security29674.xml"", readTextFile(sampleRoot + ""security29674.xml"")); Properties props = getDocumentProperties(); props.setProperty(pn_client_txLevel, pv_client_txLevel_skip); ResultCollection<DocumentAccessor> results = (ResultCollection<DocumentAccessor>) getDocManagement().storeDocuments(docs, props); assertEquals(4, docs.size()); } "	0	1	1	1	1	0
"@Test public void removeDocumentsFromCollectionTest() throws Exception { addDocumentsToCollectionTest(); for (String uri: uris) { this.getDocManagement().removeDocumentFromCollections(uri, new String[] {""CLN_Custom""}); } ResultCollection<String> ids = (ResultCollection<String>) this.getDocManagement().getDocumentUris(""collections.contains(CLN_Custom), txFinish = 0"", null); assertEquals(0, ids.size()); } "	0	0	0	0	1	0
public static String getHierarchySeparator() { return CommonEditorSettings.getHierarchySeparator(); } 	0	0	0	0	1	0
private void checkAndAdvanceBlockInStream() throws IOException { long currentBlockId = getBlockCurrentBlockId(); if (mCurrentBlockInStream == null || mCurrentBlockInStream.remaining() == 0) { if (mCurrentBlockInStream != null) { mCurrentBlockInStream.close(); } try { mCurrentBlockInStream = mContext.getTachyonBS().getInStream(currentBlockId); } catch (IOException ioe) { // TODO: Maybe debug log here long blockStart = currentBlockId * mBlockSize; mCurrentBlockInStream = new UnderStoreFileInStream(blockStart, mBlockSize, mUfsPath); } if (mShouldCache) { try { closeCacheStream(); mCurrentCacheStream = mContext.getTachyonBS().getOutStream(currentBlockId, null); mShouldCacheCurrentBlock = true; } catch (IOException ioe) { // TODO: Maybe debug log here mShouldCacheCurrentBlock = false; } } } } 	0	1	0	0	0	0
private PriorityQueue<PatternAndRating> mutateLambdaWorst(List<PatternAndRating> muBestPatterns, List<PatternAndRating> lambdaWorstPatterns) { //Update lambda worst to mutated copies of muBest for (int i = 0; i < lambdaWorstPatterns.size(); ++i) { int muIndex = i % mu; PatternAndRating patternToChange = new PatternAndRating(muBestPatterns.get(muIndex)); patternToChange.pattern = new Pattern(NoteUtils.mutatePattern(patternToChange)); lambdaWorstPatterns.set(i, patternToChange); }  //Populate new priority queue with updated muBest/lambdaWorst patterns PriorityQueue<PatternAndRating> mutatedPatterns = new PriorityQueue<>(mu + lambda); for (int i = 0; i < lambdaWorstPatterns.size(); ++i) { mutatedPatterns.add(lambdaWorstPatterns.get(i)); } for (int i = 0; i < muBestPatterns.size(); ++i) { mutatedPatterns.add(muBestPatterns.get(i)); } return mutatedPatterns; } 	0	1	0	0	0	0
private void readPage(int pageId, PageCache cache) throws Exception { Page page = null; try { page = pagingStore.createPage(pageId);  storageManager.beforePageRead(); page.open();  List<PagedMessage> pgdMessages = page.read(storageManager); cache.setMessages(pgdMessages.toArray(new PagedMessage[pgdMessages.size()])); } finally { try { if (page != null) { page.close(); } } catch (Throwable ignored) { } storageManager.afterPageRead(); } } 	1	0	1	0	1	0
public void constructDto(PipelineDefinition pipelineDefinition, List<Pipeline> pipelines) { this.id = pipelineDefinition.getId(); this.name = pipelineDefinition.getName(); pipelines = pipelines.stream().sorted((p1, p2) -> Integer.compare(p2.getExecutionId(), p1.getExecutionId())).collect(Collectors.toList()); if (!pipelines.isEmpty()) { int numberOfPipelines = pipelines.size(); for (int i = 0; i < numberOfPipelines; i++) { this.pipelineExecutionIds.add(pipelines.get(i).getExecutionId()); if (i == numberOfPipelines - 1) { this.lastRun.constructBasePipelineDto(pipelines.get(i)); } } } else { this.lastRun.constructEmptyPipelineDto(pipelineDefinition); } } 	1	1	1	1	1	0
public List<Task> prepareTasks(List<TaskDefinition> taskDefinitions, Job job) { List<Task> tasks = new ArrayList<>();  int taskDefinitionCollectionSize = taskDefinitions.size();  for (int i = 0; i < taskDefinitionCollectionSize; i++) { tasks.add(new Task()); Task currentTask = tasks.get(i); currentTask.setTaskDefinition(taskDefinitions.get(i)); currentTask.setJobId(job.getId()); currentTask.setStageId(job.getStageId()); currentTask.setPipelineId(job.getPipelineId()); currentTask.setType(taskDefinitions.get(i).getType()); if (currentTask.getType() == TaskType.FETCH_MATERIAL) { FetchMaterialTask fetchMaterialTask = (FetchMaterialTask) taskDefinitions.get(i); for (Material material : this.currentPipeline.getMaterials()) { if (material.getMaterialDefinition().getId().equals(fetchMaterialTask.getMaterialDefinitionId())) { fetchMaterialTask.setMaterialDefinition(material.getMaterialDefinition()); currentTask.setTaskDefinition(fetchMaterialTask); break; } } } else if (currentTask.getType() == TaskType.FETCH_ARTIFACT) { FetchArtifactTask fetchArtifactTask = (FetchArtifactTask) taskDefinitions.get(i); if (fetchArtifactTask.shouldUseLatestRun()) { Pipeline currentPipeline = (Pipeline) this.pipelineService.getById(job.getPipelineId()).getObject(); fetchArtifactTask.setDesignatedPipelineExecutionId(currentPipeline.getExecutionId()); currentTask.setTaskDefinition(fetchArtifactTask); } }  currentTask.setRunIfCondition(taskDefinitions.get(i).getRunIfCondition()); tasks.set(i, currentTask); }  return tasks; } 	0	0	0	0	1	0
public Matrix3 translate (float x, float y) { tmp[0] = 1; tmp[1] = 0; tmp[2] = 0;  tmp[3] = 0; tmp[4] = 1; tmp[5] = 0;  tmp[6] = x; tmp[7] = y; tmp[8] = 1; mul(vals, tmp); return this; } 	0	0	0	0	1	0
"public String weekSummaryStr() { int i = wins + losses - 1; Game g = gameSchedule.get(i); String gameSummary = gameWLSchedule.get(i) + "" "" + gameSummaryStr(g); String rivalryGameStr = """"; if (g.homeTeam.rivalTeam.equals(g.awayTeam.abbr)) { if ( gameWLSchedule.get(i).equals(""W"") ) rivalryGameStr = ""Won vs Rival! +2 Prestige\n""; else rivalryGameStr = ""Lost vs Rival! -2 Prestige\n""; } return rivalryGameStr + name + "" "" + gameSummary + ""\nNew poll rank: #"" + rankTeamPollScore + "" "" + abbr + "" ("" + wins + ""-"" + losses + "")""; } "	0	0	0	0	1	0
"@Override protected void addMembership(GrouperGroupInfo grouperGroupInfo, LdapGroup ldapGroup, Subject subject, LdapUser ldapUser) throws PspException {  if ( ldapUser == null ) throw new PspException(""%s: LdapUser does not exist for subject %s"", getName(), subject.getId());  String attributeValue = evaluateJexlExpression(config.getProvisionedAttributeValueFormat(), subject, grouperGroupInfo);  scheduleUserModification(ldapUser, AttributeModificationType.ADD, Arrays.asList(attributeValue)); } "	0	0	0	0	1	0
private boolean isLocalSource(Source source) { return isCacheSource(source) || isCatalogProvider(source.getId()); } 	1	0	1	0	1	0
@Override public void keyTyped(final KeyEvent e) { // nothing here } 	0	0	0	0	1	0
@Override public void breakBlock(World worldIn, BlockPos pos, IBlockState state) { TileEntity tileEntity = worldIn.getTileEntity(pos); if (tileEntity instanceof TileEntityHenhouse) { InventoryHelper.dropInventoryItems(worldIn, pos, (TileEntityHenhouse) tileEntity); }  super.breakBlock(worldIn, pos, state); } 	0	0	0	0	1	0
"public static Connection getConnection(){  try{ InitialContext cxt = new InitialContext();  DataSource ds = (DataSource) cxt.lookup( ""java:/comp/env/jdbc/bithealth"" );  Connection conn = ds.getConnection();  return conn;  }catch(Exception e){  System.out.println(e.getMessage());  return null; }  } "	1	0	1	0	1	0
@Override public void setState(final AppEventListner appEventListner, final AppEventListner.ApplicationState prevState, final AppEventListner.ApplicationState nextState) { widgetTag.clear(); if (prevState != null) { backEventListner = new PresenterEventListner() {  @Override public void eventFired(Button button) { appEventListner.requestApplicationState(prevState); }  @Override public String getLabel() { return prevState.label; } }; } else { backEventListner = new PresenterEventListner() {  @Override public void eventFired(Button button) { appEventListner.requestApplicationState(AppEventListner.ApplicationState.menu); }  @Override public String getLabel() { return AppEventListner.ApplicationState.menu.label; } }; } setTitle(backEventListner); if (nextState != null) { nextEventListner = new PresenterEventListner() {  @Override public void eventFired(Button button) { appEventListner.requestApplicationState(nextState); }  @Override public String getLabel() { return nextState.label; } }; simpleView.setButton(SimpleView.ButtonType.next, nextEventListner); } setContent(appEventListner); simpleView.resizeView(); widgetTag.add(simpleView); } 	0	0	0	0	1	0
"public static void findRepresentatives(String zipCode, Callback callback) {  OkHttpClient client = new OkHttpClient.Builder() .build();  HttpUrl.Builder urlBuilder = HttpUrl.parse(Constants.GOOGLE_BASE_URL + ""address="" + zipCode + ""&includeOffices=true&key=AIzaSyALQDoCiusD0Poqe2mDgGo78zoQy31U2N0"").newBuilder(); urlBuilder.addQueryParameter(Constants.GOOGLE_ZIPCODE_QUERY_PARAMETER, zipCode); String url = urlBuilder.build().toString();   Request request = new Request.Builder() .url(url) .build();  Call call = client.newCall(request); call.enqueue(callback); } "	0	0	0	0	1	0
public User findOne(Long id) { return userRepository.findOneByDeletedFalse(id); } 	0	0	0	0	1	0
@Override public int compare(ILaunchConfigurationType aFirst, ILaunchConfigurationType aSecond) { return aSecond.getName().compareTo(aFirst.getName()); } 	0	0	0	0	1	0
"private void checkForDuplicatedEntry(MzTabParser context, long lineNumber) throws LineItemParsingHandlerException { if (context.getMetaDataSection().getMsRunEntry(getIndex()).getLocation() != null) { throw new LineItemParsingHandlerException(""DUPLICATED MS-Run location entry FOUND AT LINE "" + lineNumber); } } "	0	0	0	0	1	0
@Category({ IntegrationTest.class }) @Test public void getTransactionHex() throws Exception { assertThat(steemJ.getTransactionHex(transaction), equalTo(EXPECTED_TRANSACTION_HEX)); } 	0	0	0	0	1	0
"@Override public NBTBase writeToNBT() { NBTTagCompound compound = new NBTTagCompound();  compound.setTag(""placedComponents"", NBTTagCompounds.write(placedComponents));  return compound; } "	0	0	0	0	1	0
"private void removeTarget(PnfsId pnfsId, String target) throws CacheException { RemoveReplicaMessage msg = new RemoveReplicaMessage(target, pnfsId);  LOGGER.trace(""Sending RemoveReplicasMessage {}."", msg); Future<RemoveReplicaMessage> future = pools.send(new CellPath(target), msg);  try { msg = future.get(); LOGGER.trace(""Returned ReplicationRepRmMessage {}."", msg); } catch (InterruptedException | ExecutionException e) { throw CacheExceptionUtils.getCacheException( CacheException.SELECTED_POOL_FAILED, FileTaskCompletionHandler.FAILED_REMOVE_MESSAGE, pnfsId, target, e); }  Serializable exception = msg.getErrorObject(); if (exception != null && !CacheExceptionUtils.fileNotFound(exception)) { throw CacheExceptionUtils.getCacheException( CacheException.SELECTED_POOL_FAILED, FileTaskCompletionHandler.FAILED_REMOVE_MESSAGE, pnfsId, target, (Exception) exception); } } "	0	1	0	0	0	0
@Override public void onClick(View v) { adapter.onBlockClick(v, position); } 	0	0	0	0	1	0
@Override public void onItemDelete(View view, int position) { mAppList.remove(position); mAdapter.notifyDataSetChanged(); } 	0	0	0	0	1	0
"@Override public boolean execute(String sql) throws SQLException { clearCurrentResults(); checkOpen();  StatementClient client = null; ResultSet resultSet = null; try { client = connection().startQuery(sql); if (client.isFailed()) { throw resultsException(client.finalResults()); }  resultSet = new PrestoResultSet(client, maxRows.get(), progressConsumer); checkSetOrResetSession(client);  // check if this is a query if (client.current().getUpdateType() == null) { currentResult.set(resultSet); return true; }  // this is an update, not a query while (resultSet.next()) { // ignore rows }  Long updateCount = client.finalResults().getUpdateCount(); currentUpdateCount.set((updateCount != null) ? updateCount : 0);  return false; } catch (RuntimeException e) { throw new SQLException(""Error executing query"", e); } finally { if (currentResult.get() == null) { if (resultSet != null) { resultSet.close(); } if (client != null) { client.close(); } } } } "	0	0	0	0	1	0
"public static <X, Y> Function<X, Y> memoize(final Function<? super X, ? extends Y> f) {  final BiFunction<X, String, Y> g = memoize((x0, x1) -> f.apply(x0));  return x -> g.apply(x, """"); } "	0	0	0	0	1	0
public List<Stub> getStubs() { return unmodifiableList(new ArrayList<>(stubs)); } 	1	0	1	0	1	0
"private void deleteAllMessageOfAddress() { Uri uri = Uri.parse(""content://sms/""); String address = mAddress; if (address == null) return; String where; try { address = String.valueOf(Long.parseLong(address.toString())); where = ""address like '%"" + address + ""'""; } catch (NumberFormatException ex) { where = ""address='"" + address + ""'""; } if (getContentResolver().delete(uri, where, null) > 0) { finish(); } else { Toast.makeText(this, R.string.delete_fail, Toast.LENGTH_SHORT).show(); } } "	1	0	1	0	1	0
"@ResponseBody @RequestMapping(value = ""/search"", method = RequestMethod.POST, params = ""action=search"") public ModelAndView search(@Valid @ModelAttribute(""searchRecordsRequest"") SearchRecordsRequest searchRecordsRequest, BindingResult result, Model model) { if(!isEmptySearch(searchRecordsRequest)){ searchRecordsRequest.reset(); searchRecordsRequest.resetPageNumber(); List<BibItem> bibItems = bibSolrDocumentRepository.search(searchRecordsRequest); buildResults(searchRecordsRequest, bibItems); return new ModelAndView(""searchRecords"", ""searchRecordsRequest"", searchRecordsRequest); } searchRecordsRequest.setErrorMessage(""At least one Search Facet Box needs to be checked to get results.""); return new ModelAndView(""searchRecords"", ""searchRecordsRequest"", searchRecordsRequest); } "	0	0	0	0	1	0
public Builder add(@NotNull String prefix, @NotNull VcsRepository repository) { mapping.put(StringHelper.normalize(prefix), repository); return this; } 	0	0	0	0	1	0
@Override public void onUpdateScrollBarBounds(Rect barBounds) { VerticalScrollBoundsProvider boundsProvider = new VerticalScrollBoundsProvider(0, barBounds.height()); mIndicatorOffset = - getHeight() + barBounds.top; mScreenPositionCalculator = new VerticalScreenPositionCalculator(boundsProvider); } 	1	0	1	0	1	0
"@RequestMapping(""/saml_error"") public String error401(Model model, HttpServletRequest request) { AuthenticationException exception = (AuthenticationException) request.getSession().getAttribute(WebAttributes.AUTHENTICATION_EXCEPTION); model.addAttribute(""saml_error"", exception.getMessage()); return ""external_auth_error""; } "	0	0	0	0	1	0
public <T> T setValue(T value) { this.value = value; return value; } 	0	0	0	0	1	0
@Override public AbstractOMXQueryControlAccessor<P, Map<String, Object>, R> write() { return thenApply(state -> BaseOMXQueryControl.this.doWrite(state.basePointer)); } 	0	0	0	0	1	0
@Override public Void visitInputValueDefinition(GraphqlParser.InputValueDefinitionContext ctx) { InputValueDefinition def = new InputValueDefinition(ctx.name().getText()); newNode(def, ctx); if (ctx.defaultValue() != null) { def.setValue(getValue(ctx.defaultValue().value())); } for (ContextEntry contextEntry : contextStack) { if (contextEntry.contextProperty == ContextProperty.FieldDefinition) { ((FieldDefinition) contextEntry.value).getInputValueDefinitions().add(def); break; } if (contextEntry.contextProperty == ContextProperty.InputObjectTypeDefinition) { ((InputObjectTypeDefinition) contextEntry.value).getInputValueDefinitions().add(def); break; } if (contextEntry.contextProperty == ContextProperty.DirectiveDefinition) { ((DirectiveDefinition) contextEntry.value).getInputValueDefinitions().add(def); break; } } addContextProperty(ContextProperty.InputValueDefinition, def); super.visitChildren(ctx); popContext(); return null; } 	0	1	0	0	0	0
"@POST @Consumes(MediaType.APPLICATION_JSON) @ApiOperation( value = ""Create an application"", notes = ""Create an application from the supplied information."", response = Application.class ) @ApiResponses(value = { @ApiResponse( code = HttpURLConnection.HTTP_CREATED, message = ""Application created successfully."", response = Application.class ), @ApiResponse( code = HttpURLConnection.HTTP_CONFLICT, message = ""An application with the supplied id already exists"" ), @ApiResponse( code = HttpURLConnection.HTTP_PRECON_FAILED, message = ""A precondition failed"" ), @ApiResponse( code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = ""Genie Server Error due to Unknown Exception"" ) }) public Response createApplication( @ApiParam( value = ""The application to create."", required = true ) final Application app ) throws GenieException { LOG.info(""Called to create new application""); final Application createdApp = this.acs.createApplication(app); return Response.created( this.uriInfo.getAbsolutePathBuilder().path(createdApp.getId()).build()). entity(createdApp). build(); } "	0	0	0	0	1	0
"@GET @Path(""/{id}"") @ApiOperation( value = ""Find an application by id"", notes = ""Get the application by id if it exists"", response = Application.class ) @ApiResponses(value = { @ApiResponse( code = HttpURLConnection.HTTP_OK, message = ""OK"", response = Application.class ), @ApiResponse( code = HttpURLConnection.HTTP_NOT_FOUND, message = ""Application not found"" ), @ApiResponse( code = HttpURLConnection.HTTP_PRECON_FAILED, message = ""Invalid id supplied"" ), @ApiResponse( code = HttpURLConnection.HTTP_INTERNAL_ERROR, message = ""Genie Server Error due to Unknown Exception"" ) }) public Application getApplication( @ApiParam( value = ""Id of the application to get."", required = true ) @PathParam(""id"") final String id ) throws GenieException { LOG.info(""Called to get Application for id "" + id); return this.acs.getApplication(id); } "	0	0	0	0	1	0
private void renewSubscriptions() { Iterator ite = subscriptions.entrySet().iterator(); while (ite.hasNext()) { Map.Entry e = (Map.Entry) ite.next(); ((KuzzleRoom)e.getValue()).renew(null, ((KuzzleRoom)e.getValue()).getListener()); } } 	0	1	0	0	0	0
@Override public IndexSearchResult<VcfIndexEntry> getSearchResults(List<? extends FeatureFile> files, Query query) throws IOException { if (CollectionUtils.isEmpty(files)) { return new IndexSearchResult<>(Collections.emptyList(), false, 0); }  SimpleFSDirectory[] indexes = fileManager.getIndexesForFiles(files); long indexSize = featureIndexDao.getTotalIndexSize(indexes); try (MultiReader reader = featureIndexDao.openMultiReader(indexes)) { if (reader.numDocs() == 0) { return new IndexSearchResult<>(Collections.emptyList(), false, 0); } IndexSearcher searcher = new IndexSearcher(reader, TaskExecutor.getExecutorService()); AbstractDocumentBuilder<VcfIndexEntry> documentCreator = AbstractDocumentBuilder .createDocumentCreator(files.get(0).getFormat(), vcfFilterForm.getInfoFields()); Sort sort = createSorting(vcfFilterForm.getOrderBy(), files); IndexSearchResult<VcfIndexEntry> searchResults = performSearch(searcher, reader, query, sort, documentCreator); //return 0 to prevent random access in UI if (indexSize > featureIndexDao.getLuceneIndexMaxSizeForGrouping()) { searchResults.setTotalResultsCount(0); } return searchResults; } finally { for (SimpleFSDirectory index : indexes) { IOUtils.closeQuietly(index); } } } 	0	0	0	0	1	0
private void renderColouredBall(int x, int y, TemperatureInfo temperature, int textureShift) { TemperatureRange temperatureRange = temperature.getTemperatureRange(); float changeDelta = temperature.getRangeDelta(true);  if (temperatureRange != TemperatureRange.MILD) { boolean coolBall = temperatureRange == TemperatureRange.COOL; float ballDelta = coolBall ? 1.0F - changeDelta : changeDelta;  GlStateManager.pushMatrix(); GlStateManager.color(1.0F, 1.0F, 1.0F, ballDelta); drawTexturedModalRect(x, y, 16 * ((coolBall ? 8 : 9) + textureShift), 16 * 1, 16, 16); GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F); GlStateManager.popMatrix(); } } 	0	1	0	0	0	0
private static String[] toPrimaryValues(Collection<List<String>> lists) { if (lists == null || lists.isEmpty()) { return null; } List<String> result = new ArrayList<>(lists.size()); for (List<String> list : lists) { String value = list.get(0); if (value != null && !value.isEmpty()) { result.add(value); } } return result.toArray(new String[lists.size()]); } 	1	0	1	0	1	0
public int uid() { return st_uid.get(); } 	1	0	1	0	0	0
"public static boolean authenticate(MetkaAuthenticationDetails details) { SecurityContext context = SecurityContextHolder.getContext(); if(context == null) { logger.error(""Authentication was requested but no SecurityContext was found""); throw new AuthenticationCredentialsNotFoundException(""Couldn't find security context""); }  PreAuthenticatedAuthenticationToken auth = new PreAuthenticatedAuthenticationToken(details.getUserName(), ""credentials"", details.getGrantedAuthorities()); auth.setDetails(details); context.setAuthentication(auth); return true; } "	0	0	0	0	1	0
"public static String getModelName(String destination, Model model) { MetkaAuthenticationDetails details = getDetails(); if(details == null || !details.getRole().hasPermission(Permission.HAS_MINIMUM_PERMISSION)) { logger.error(""User ""+getUserName()+"" didn't have minimum permission. Forwarded to AUTH_ERROR page.""); model.asMap().put(""configurationType"", ""AUTH_ERROR""); return ""authError""; } return destination; } "	0	0	0	0	1	0
@Override public boolean test(JsonObject t) { return delegate.canProcess(channel); } 	1	0	1	0	0	0
"@Override public CommandResult execute(CommandSource sender, CommandContext args) throws CommandException { checkPermission(sender, WarpPermissions.UC_WARP_DELWARP_BASE); Warp warp = args.<Warp>getOne(""warp"").get(); List<Warp> warps = GlobalData.get(WarpKeys.WARPS).get(); warps.remove(warp); GlobalData.offer(WarpKeys.WARPS, warps); sender.sendMessage(Messages.getFormatted(sender, ""warp.command.delwarp.success"", ""%warp%"", warp.getName())); return CommandResult.success(); } "	0	0	0	0	1	0
@NotNull private DiagnosticAnnotation createKotlinAnnotation(@NotNull Diagnostic diagnostic, @NotNull IFile file) { TextRange range = diagnostic.getTextRanges().get(0); return new DiagnosticAnnotation( LineEndUtil.convertLfToDocumentOffset(diagnostic.getPsiFile().getText(), range.getStartOffset(), EditorUtil.getDocument(file)), range.getLength(), getAnnotationType(diagnostic.getSeverity()), DefaultErrorMessages.render(diagnostic), diagnostic.getPsiElement().getText(), diagnostic.getFactory()); } 	0	1	1	0	1	0
private void quitUpdateThread() { if (mThread != null) { mThread.interrupt(); mThread = null; } } 	0	0	0	0	1	0
@Test public void noSignalRealTime() { Duration verifyDuration = StepVerifier.create(Mono.never()) .expectSubscription() .expectNoEvent(Duration.ofSeconds(1)) .thenCancel() .verify(Duration.ofMillis(1100));  assertThat(verifyDuration.toMillis(), is(greaterThanOrEqualTo(1000L))); } 	0	0	0	0	1	0
@Test public void testThenConsumeWhileWithConsumer() { LongAdder count = new LongAdder();  StepVerifier.create(Flux.range(3, 8)) .expectNextMatches(first -> first == 3) .thenConsumeWhile(v -> v < 9, v -> count.increment()) .expectNext(9) .expectNext(10) .expectComplete() .log() .verify();  assertThat(count.intValue(), is(5)); } 	0	0	0	0	1	0
"@Test public void verifyDuration() { long interval = 200; Flux<String> flux = Flux.interval(Duration.ofMillis(interval)) .map(l -> ""foo"") .take(2);  Duration duration = StepVerifier.create(flux) .thenAwait(Duration.ofSeconds(100)) .expectNext(""foo"") .expectNext(""foo"") .expectComplete() .verify(Duration.ofMillis(500));  Assert.assertTrue(duration.toMillis() > 2 * interval); } "	0	0	0	0	1	0
"public void checkStudyInCookie(Study study, Cookie cookie) throws ForbiddenPublixException { if (cookie != null) { String[] studyUuidArray = cookie.value().split("",""); for (String uuidStr : studyUuidArray) { if (study.getUuid().equals(uuidStr)) { throw new ForbiddenPublixException( PublixErrorMessages.STUDY_CAN_BE_DONE_ONLY_ONCE); } } } } "	0	0	0	0	1	0
void resetEntry(ExpiringEntry<K, V> entry, boolean scheduleFirstEntry) { writeLock.lock(); try { boolean scheduled = entry.cancel(true); entries.reorder(entry);  if (scheduled || scheduleFirstEntry) scheduleEntry(entries.first()); } finally { writeLock.unlock(); } } 	1	0	1	0	1	0
"private void handleChangeManagerStatusRequest(HttpServletRequest req, Map<String, Object> ret, boolean enableMetricManager) { try { logger.info(""Updating metric manager status""); if (MetricReportManager.isAvailable()) { MetricReportManager metricManager = MetricReportManager.getInstance(); if (enableMetricManager) { metricManager.enableManager(); } else { metricManager.disableManager(); } ret.put(STATUS_PARAM, RESPONSE_SUCCESS); } else { ret.put(RESPONSE_ERROR, ""MetricManager is not available""); } } catch (Exception e) { logger.error(e); ret.put(RESPONSE_ERROR, e.getMessage()); } } "	0	0	0	0	1	0
@Override public void logHistory(Project project) {  try { UUID uuid = UUID.randomUUID(); ProjectHistoryRoot batch = new ProjectHistoryRoot(); batch.setId(uuid); batch.setReason(project.getReason());  boolean projectHistoryRootSaved = false;  ProjectHistory projectHistory = new ProjectHistory(project); projectHistory.setBatch(batch); ProjectHistory recentPh = projectHistoryDao.findMostRecent(project);  if (recentPh == null) { projectHistory.setEvent(ProjectHistory.EVENT_TYPE_INSERT); }  if (recentPh == null || ObjectDiff.isDifferent(projectHistory, recentPh, projectHistoryFields)) { projectHistoryRootDao.save(batch); projectHistoryRootSaved = true; projectHistoryDao.save(projectHistory); }  for (Contract contract : project.getContracts()) { ContractHistory contractHistory = new ContractHistory(contract); contractHistory.setBatch(batch); ContractHistory recentCh = contractHistoryDao.findMostRecent(contract);  if (recentCh == null) { contractHistory.setEvent(ProjectHistory.EVENT_TYPE_INSERT); }  if (recentCh == null || ObjectDiff.isDifferent(contractHistory, recentCh, contractHistoryFields)) { if (!projectHistoryRootSaved) { projectHistoryRootDao.save(batch); projectHistoryRootSaved = true; }  contractHistoryDao.save(contractHistory); }  for (ContractMember cm : contract.getContractMembers()) { ContractMemberHistory contractMemberHistory = new ContractMemberHistory(cm); contractMemberHistory.setBatch(batch); ContractMemberHistory recentCmh = contractMemberHistoryDao.findMostRecent(cm);  if (recentCmh == null) { contractMemberHistory.setEvent(ProjectHistory.EVENT_TYPE_INSERT); }  if (recentCmh == null || ObjectDiff.isDifferent(contractMemberHistory, recentCmh, contractMemberHistoryFields)) { if (!projectHistoryRootSaved) { projectHistoryRootDao.save(batch); projectHistoryRootSaved = true; }  contractMemberHistoryDao.save(contractMemberHistory); }  } } } catch (PropertyReadException e) { log.warn(e.getMessage()); throw new RuntimeException(e); } } 	0	0	0	0	1	0
"@Test public void normal(){ List<TableRenderResponseTestMock> mocks = new ArrayList<TableRenderResponseTestMock>(); mocks.add(new TableRenderResponseTestMock(""a"", ""b"")); mocks.add(new TableRenderResponseTestMock(""c"", ""d"")); TableRenderResponse<TableRenderResponseTestMock> response = TableRenderResponse.<TableRenderResponseTestMock>sinPermisos(mocks); String json = response.toJSON(""campo1"", ""campo2""); assertEqualsJson(""{\""obj\"":{\""mensajes\"":{\""error\"":null,\""fatal\"":null,\""info\"":null,\""ok\"":null,\""warning\"":null},\""rows\"":[{\""objeto\"":{\""campo1\"":\""a\"",\""campo2\"":\""b\""},\""permisoBorrar\"":true,\""permisoEditar\"":true,\""permisoLeer\"":true},{\""objeto\"":{\""campo1\"":\""c\"",\""campo2\"":\""d\""},\""permisoBorrar\"":true,\""permisoEditar\"":true,\""permisoLeer\"":true}]}}"", json); } "	0	0	0	0	1	0
@Override public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) { UUID targetId = getTargetPointer().getFirst(game, source); if (targetId != null && targetId.equals(sourceId)) { if (affectedControllerId.equals(source.getControllerId())) { Card card = game.getCard(sourceId); if (card != null && game.getState().getZone(sourceId) == Zone.EXILED) { Player player = game.getPlayer(affectedControllerId); player.setCastSourceIdWithAlternateMana(sourceId, null, null); return true; } } } return false; } 	0	0	0	0	1	0
"public void reqIP(String name){ alertBuilder.clear(); try { //send and wait for response dataChannel.sendCmd(""del np-event"", name); PacketWrapper response = dataChannel.receivePacket();  //parse response if(response.type == DataChannel.TYPE_INFO) { et.append(name+"": "" + response.toString() +""\n""); } else if (response.type == DataChannel.TYPE_ERR) { et.append(response.errorMessage() + ""\n""); } else { et.append(""Unknown response from server!\n""+response.toString() + ""\n""); } } catch (NetworkException e) { et.append(e.getMessage() + ""\n""); } alertBuilder.showAlert(); } "	0	0	0	0	1	0
public static void reportEventWithCategory(String category, String action, String label) { if (isAnalyticsActive()) { Tracker tracker = Application.get().getTracker(Application.TrackerName.APP_TRACKER); Tracker tracker2 = Application.get().getTracker(Application.TrackerName.GLOBAL_TRACKER); String obaRegionName = getObaRegionName();  tracker.send(new HitBuilders.EventBuilder() .setCategory(category) .setAction(action) .setLabel(label) .setCustomDimension(1, obaRegionName) .build()); tracker2.send(new HitBuilders.EventBuilder() .setCategory(category) .setAction(action) .setLabel(label) .setCustomDimension(1, obaRegionName) .build()); } } 	0	1	0	0	0	0
private void start_fall_detect_service() { boolean isChecked = sw_allow_find.isChecked(); Intent intent = new Intent(getActivity(), DetectFallService.class); if (isChecked) { getActivity().startService(intent); getActivity().bindService(intent, m_serviceConnection, BIND_AUTO_CREATE); startBindService = true;  } else { try { //cancel service getActivity().stopService(intent); if (startBindService) getActivity().unbindService(m_serviceConnection); } catch (Exception e) { Log.e(TAG, e.toString()); } } } 	0	0	0	0	1	0
public final void glTexEnvfv (int target, int pname, float[] params, int offset) { glTexEnvf(target, pname, params[offset]); } 	0	0	0	0	1	0
"public static String getProfileStateOfUser(Context ctx) { SharedPreferences sharedPref = ctx.getSharedPreferences(""ADDRESS_CHANGE"", Context.MODE_PRIVATE); return sharedPref.getString(ctx.getString(R.string.mdl_user_profile_state),ctx.getString(R.string.mdl_fl)); } "	0	1	0	0	0	0
"@Before public void setup() throws Exception { super.setup(); serviceContext = createServiceContext(); loginAsAdmin(serviceContext);  for (String element : TEST_METADATA) { byte[] bytes = element.getBytes(""UTF-8""); importMetadataXML(serviceContext, null, new ByteArrayInputStream(bytes), MetadataType.METADATA, ReservedGroup.intranet.getId(), Params.GENERATE_UUID); }  luceneSearcher = searchManager.newSearcher(SearchManager.LUCENE, Geonet.File.SEARCH_LUCENE); } "	0	0	0	0	1	0
@Override public void jdwpArraySetValue(long arrayId, int index, int length, ByteBufferReader reader) throws DebuggerException { VmArrayInstance instance; try { instance = delegates.state().referenceRefIdHolder().instanceById(arrayId); } catch (ClassCastException e) { throw new DebuggerException(JdwpConsts.Error.INVALID_ARRAY); }  if (instance == null) throw new DebuggerException(JdwpConsts.Error.INVALID_OBJECT);  // check if index and length is withing bounds if (index < 0 || length <= 0 || index + length >= instance.length()) throw new DebuggerException(JdwpConsts.Error.INVALID_LENGTH);  // read a memory block from device ByteBufferPacket packet = delegates.sharedTargetPacket(); packet.reset(); long destAddr; ValueManipulator manipulator; ClassInfo elementType = instance.elementType(); if (elementType.isPrimitive()) { ClassInfoPrimitiveImpl primType = (ClassInfoPrimitiveImpl) elementType; manipulator = primType.manipulator(); destAddr = instance.dataPtr() + primType.size() * index; } else { // class or array, read pointers destAddr = instance.dataPtr() + packet.pointerSize() * index; manipulator = delegates.instances().objectManipulator(); }   // now dump elements one by one for (int idx = 0; idx < length; idx++) { Object element = manipulator.readFromJdwp(reader); manipulator.writeToDevice(packet, element); }  // put to device delegates.hooksApi().writeMemory(destAddr, packet); } 	1	0	1	1	1	0
"public void setFriends(ProfileFriends friends) { this.friends = friends; if (record != null) friends.getRecords(); if (getIntent().getExtras().containsKey(""friends"")) viewPager.setCurrentItem(1); } "	0	1	0	0	0	0
public void sendAnnouncementToServer(String destServer, String announcement) { sendAnnouncementToServer(destServer, announcement, null); } 	1	0	1	0	1	0
@Override public void setText(String text) { if (text == null || !text.isEmpty()) { super.setText(defaultText); } else { super.setText(text); } } 	1	0	1	1	1	0
private void initializeNeightbors() { for( int ia = 0; ia < spatialDots.size(); ia++ ) { SpatialDot spatialDotUnderInvestigation = spatialDots.get(ia);  for (int ib = 0; ib < spatialDots.size(); ib++) { if( ia != ib ) { continue; }  ArrayRealVector dotAPosition = spatialDotUnderInvestigation.spatialPosition; ArrayRealVector dotBPosition = spatialDots.get(ib).spatialPosition;  double distance = dotAPosition.getDistance(dotBPosition); if( !isDistanceBelowInfluenceDistance(distance) ) { continue; }  spatialDotUnderInvestigation.neightborIndices.add(ib); } } } 	1	1	1	1	1	0
"@Override public boolean onOptionsItemSelected(MenuItem item) { // Handle action bar item clicks here. The action bar will // automatically handle clicks on the Home/Up button, so long // as you specify a parent activity in AndroidManifest.xml. int id = item.getItemId();  //noinspection SimplifiableIfStatement if (id == R.id.action_settings) { //should open up some type of mail client Intent intent = new Intent(Intent.ACTION_SEND); intent.setType(""plain/text""); intent.putExtra(Intent.EXTRA_EMAIL, new String[] { MY_EMAIL }); intent.putExtra(Intent.EXTRA_SUBJECT, ""subject""); intent.putExtra(Intent.EXTRA_TEXT, ""mail body""); startActivity(Intent.createChooser(intent, """")); return true; }  return super.onOptionsItemSelected(item); } "	0	1	0	0	0	0
"private static <T> GradleProjectInfoQuery2<T> createDefaultQuery(final ProjectInfoBuilder2<T> builder) { ExceptionHelper.checkNotNullArgument(builder, ""builder"");  ClassLoader classLoader = builder.getClass().getClassLoader(); File classPath = ModelClassPathDef.getClassPathOfClass(builder.getClass());  final ModelClassPathDef classPathDef = ModelClassPathDef.isImplicitlyAssumed(classPath) ? ModelClassPathDef.EMPTY : ModelClassPathDef.fromJarFiles(classLoader, Collections.singleton(classPath));  return new GradleProjectInfoQuery2<T>() { @Override public ProjectInfoBuilder2<T> getInfoBuilder() { return builder; }  @Override public ModelClassPathDef getInfoClassPath() { return classPathDef; } }; } "	0	0	0	0	1	0
public int getKnowledgeBeaconCount() { return customBeacons != null ? customBeacons.size() : beaconIdMap.size(); } 	0	0	0	0	1	0
"protected void executeInsertData(InsertData insertDataExpr, UpdateContext uc) throws SailException {  SPARQLUpdateDataBlockParser parser = new SPARQLUpdateDataBlockParser(vf); parser.setRDFHandler(new RDFSailInserter(con, vf, uc)); parser.getParserConfig().addNonFatalError(BasicParserSettings.VERIFY_DATATYPE_VALUES); parser.getParserConfig().addNonFatalError(BasicParserSettings.FAIL_ON_UNKNOWN_DATATYPES); try { // TODO process update context somehow? dataset, base URI, etc. parser.parse(new ByteArrayInputStream(insertDataExpr.getDataBlock().getBytes()), """"); } catch (RDFParseException e) { throw new SailException(e); } catch (RDFHandlerException e) { throw new SailException(e); } catch (IOException e) { throw new SailException(e); } } "	0	0	0	0	1	0
"@Override protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException {  // page parameters for the getComputers final PageParameters pparam = pageMapper.map(request);  validator.validatePageParameters(pparam);  List<ComputerDTO> computers = computerMapper.map(computerService.getComputers(pparam));  // we need the total number of computers for the pagination final long nbComputers;  // small optimization.. if we are on the first page and the number of // computers returned is less than the page size, then there is no need // to count the computers. if ((computers.size() <= pparam.getSize()) && (pparam.getPageNumber() == 0)) { nbComputers = computers.size(); } else { nbComputers = computerService.countComputers(pparam); }  // set the attributes for the jsp  request.setAttribute(""nbPages"", Math.max(1, ((nbComputers + pparam.getSize()) - 1) / pparam.getSize())); request.setAttribute(""nbComputers"", nbComputers); request.setAttribute(""computers"", computers); request.setAttribute(""pparam"", pparam);  request.getRequestDispatcher(""/WEB-INF/views/dashboard.jsp"").forward(request, response);  } "	1	0	1	1	1	0
public static String toJson(Object object) { Objects.requireNonNull(object, Required.OBJECT.toString());  return jsonSerializer.serialize(object).toString(); } 	0	0	0	0	1	0
public static PMDParameters extractParameters(PMDParameters arguments, String[] args, String progName) { JCommander jcommander = new JCommander(arguments); jcommander.setProgramName(progName);  try { jcommander.parse(args); if (arguments.isHelp()) { jcommander.usage(); System.out.println(buildUsageText(jcommander)); setStatusCodeOrExit(0); } } catch (ParameterException e) { jcommander.usage(); System.out.println(buildUsageText(jcommander)); System.out.println(e.getMessage()); setStatusCodeOrExit(ERROR_STATUS); } return arguments; } 	0	0	0	0	1	0
"@Override public NetGameModel buildRoad(EdgeLocation edgeLocation, boolean free) throws ServerProxyException { if(userCookie == null) { throw new ServerProxyException(""A user must be logged in before building a road!\n"" + ""Details: User cookie not found""); } if(gameID < 0) { throw new ServerProxyException(""You must be a part of a game before building a road!\n"" + ""Details: Game ID not valid""); }  String urlPath = ""/moves/buildRoad""; String postData = serializer.sBuildRoadReq(userCookie.getPlayerID(), edgeLocation, free); String result = doJSONPost(urlPath, postData, false, false);  NetGameModel ret = deserializer.parseNetGameModel(result);  return ret; } "	0	0	0	0	1	0
"@Override public NetGameModel discardCards(List<Integer> resourceList) throws ServerProxyException { if(userCookie == null) { throw new ServerProxyException(""A user must be logged in before discarding cards!\n"" + ""Details: User cookie not found""); } if(gameID < 0) { throw new ServerProxyException(""You must be a part of a game before discarding cards!\n"" + ""Details: Game ID not valid""); }  String urlPath = ""/moves/discardCards""; String postData = serializer.sDiscardCardsReq(userCookie.getPlayerID(), resourceList); String result = doJSONPost(urlPath, postData, false, false);  NetGameModel ret = deserializer.parseNetGameModel(result);  return ret; } "	0	1	0	0	0	0
"@Override public NetGameModel rollNumber(int roll) throws ServerProxyException { if(userCookie == null) { throw new ServerProxyException(""A user must be logged in before rolling a number!\n"" + ""Details: User cookie not found""); } if(gameID < 0) { throw new ServerProxyException(""You must be a part of a game before rolling a number!\n"" + ""Details: Game ID not valid""); }  String urlPath = ""/moves/rollNumber""; String postData = serializer.sRollNumberReq(userCookie.getPlayerID(), roll); String result = doJSONPost(urlPath, postData, false, false);  NetGameModel ret = deserializer.parseNetGameModel(result);  return ret; } "	0	1	0	0	0	0
"@Override public NetGameModel offerTrade(List<Integer> resourceList, int receiver) throws ServerProxyException { if(userCookie == null) { throw new ServerProxyException(""A user must be logged in before offering a trade!\n"" + ""Details: User cookie not found""); } if(gameID < 0) { throw new ServerProxyException(""You must be a part of a game before offering a trade!\n"" + ""Details: Game ID not valid""); }  String urlPath = ""/moves/offerTrade""; String postData = serializer.sOfferTradeReq(userCookie.getPlayerID(), resourceList, receiver); String result = doJSONPost(urlPath, postData, false, false);  NetGameModel ret = deserializer.parseNetGameModel(result);  return ret; } "	0	1	0	0	0	0
"@Override public NetGameModel buildSettlement(VertexLocation vertexLocation, boolean free) throws ServerProxyException { if(userCookie == null) { throw new ServerProxyException(""A user must be logged in before building a settlement!\n"" + ""Details: User cookie not found""); } if(gameID < 0) { throw new ServerProxyException(""You must be a part of a game before building a road!\n"" + ""Details: Game ID not valid""); }  String urlPath = ""/moves/buildSettlement""; String postData = serializer.sBuildSettlementReq(userCookie.getPlayerID(), vertexLocation, free); String result = doJSONPost(urlPath, postData, false, false);  NetGameModel ret = deserializer.parseNetGameModel(result);  return ret; } "	0	0	0	0	1	0
"private static Object nextSegment(String remaining, Object vars) throws CWLExpressionException { if (vars == null) { return null; } if (!StringUtils.isEmpty(remaining)) { Matcher m = segPattern.matcher(remaining); if (m.find()) { if (m.group(0).startsWith(""."")) { if(m.group(0).equals("".length"") && vars instanceof List){ return ((List) vars).size(); } return nextSegment(remaining.substring(m.end(0)), ((Map<?, ?>) vars).get(m.group(0).substring(1))); } else if (m.group(0).charAt(1) == '\""' || m.group(0).charAt(1) == '\'') { Character start = m.group(0).charAt(1); String key = m.group(0).substring(2, m.group(0).lastIndexOf(start)); key = key.replace(""\\'"", ""'""); key = key.replace(""\\\"""", ""\""""); return nextSegment(remaining.substring(m.end(0)), ((Map<?, ?>) vars).get(key)); } else { String key = m.group(0).substring(1, m.group(0).length()); Integer keyInt = Integer.parseInt(key);  Object remainingVars = null; if (vars instanceof List<?>) { if (((List<?>) vars).size() <= keyInt) { throw new CWLExpressionException(""Could not get value from "" + vars + "" at position "" + keyInt); } remainingVars = ((List<?>) vars).get(keyInt); } else if (vars instanceof Map<?,?>) { remainingVars = ((Map<?,?>) vars).get(keyInt); } return nextSegment(remaining.substring(m.end(0)), remainingVars); } } } return vars; } "	0	1	1	1	1	0
public static Predicate<String> awaitActive(ServerApi serverApi) { return awaitStatus(serverApi, ACTIVE, TEN_MINUTES, FIVE_SECONDS); } 	0	0	0	0	1	0
@Override public ImmutableContextSet load(Set<Context> contexts) { return ContextSet.fromEntries(contexts); } 	1	0	1	0	1	0
@Override public void onClick(View view) { userPreferencesDBHelper.insertFilterPreferences(datePickTV.getText().toString(), timeFrameSpinner.getSelectedItem().toString(), checkBoxArts.isChecked(), checkBoxFashion.isChecked(), checkBoxSports.isChecked() ); mListener.onComplete(datePickTV.getText().toString(), timeFrameSpinner.getSelectedItem().toString(), checkBoxArts.isChecked(), checkBoxFashion.isChecked(), checkBoxSports.isChecked() ); getDialog().dismiss(); } 	0	1	0	0	0	0
"private String addCertToHeader(String endUserName) throws APIManagementException {  try { //get tenant domain String tenantDomain = MultitenantUtils.getTenantDomain(endUserName); //get tenantId int tenantId = APIUtil.getTenantId(endUserName); Certificate publicCert;  if (!(publicCerts.containsKey(tenantId))) { //get tenant's key store manager APIUtil.loadTenantRegistry(tenantId); KeyStoreManager tenantKSM = KeyStoreManager.getInstance(tenantId);  KeyStore keyStore; if (!MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)) { //derive key store name String ksName = tenantDomain.trim().replace('.', '-'); String jksName = ksName + "".jks""; keyStore = tenantKSM.getKeyStore(jksName); publicCert = keyStore.getCertificate(tenantDomain); } else { //keyStore = tenantKSM.getPrimaryKeyStore(); publicCert = tenantKSM.getDefaultPrimaryCertificate(); } if (publicCert != null) { publicCerts.put(tenantId, publicCert); } } else { publicCert = publicCerts.get(tenantId); }  //generate the SHA-1 thumbprint of the certificate //TODO: maintain a hashmap with tenants' pubkey thumbprints after first initialization MessageDigest digestValue = MessageDigest.getInstance(""SHA-1""); if (publicCert != null) { byte[] der = publicCert.getEncoded(); digestValue.update(der); byte[] digestInBytes = digestValue.digest(); Base64  base64 = new Base64(true); String base64UrlEncodedThumbPrint = base64.encodeToString(digestInBytes).trim(); StringBuilder jwtHeader = new StringBuilder(); //Sample header //{""typ"":""JWT"", ""alg"":""SHA256withRSA"", ""x5t"":""a_jhNus21KVuoFx65LmkW2O_l10""} //{""typ"":""JWT"", ""alg"":""[2]"", ""x5t"":""[1]""} jwtHeader.append(""{\""typ\"":\""JWT\"",""); jwtHeader.append(""\""alg\"":\""""); jwtHeader.append(getJWSCompliantAlgorithmCode(signatureAlgorithm)); jwtHeader.append(""\"","");  jwtHeader.append(""\""x5t\"":\""""); jwtHeader.append(base64UrlEncodedThumbPrint); jwtHeader.append('\""');  jwtHeader.append('}'); return jwtHeader.toString(); } else { String error = ""Error in obtaining tenant's keystore""; throw new APIManagementException(error, e); }  } catch (KeyStoreException e) { String error = ""Error in obtaining tenant's keystore""; throw new APIManagementException(error, e); } catch (CertificateEncodingException e) { String error = ""Error in generating public cert thumbprint""; throw new APIManagementException(error, e); } catch (NoSuchAlgorithmException e) { String error = ""Error in generating public cert thumbprint""; throw new APIManagementException(error, e); } catch (Exception e) { String error = ""Error in obtaining tenant's keystore""; throw new APIManagementException(error, e); } } "	0	1	1	0	1	0
public List<IModule> findPath(IModule startModule, IModule finishModule) { ModuleGraph.ModuleVertex start = MapSequence.fromMap(myMap).get(startModule); ModuleGraph.ModuleVertex finish = MapSequence.fromMap(myMap).get(finishModule); if (start == null || finish == null) { return ListSequence.fromList(new ArrayList<IModule>()); } List<ModuleGraph.ModuleVertex> path = ListSequence.fromList(new LinkedList()); ListSequence.fromList(path).addElement(start); Set<ModuleGraph.ModuleVertex> visited = SetSequence.fromSet(new HashSet<ModuleGraph.ModuleVertex>()); SetSequence.fromSet(visited).addElement(start); findPath(path, finish, visited); return ListSequence.fromList(path).select(new ISelector<ModuleGraph.ModuleVertex, IModule>() { public IModule select(ModuleGraph.ModuleVertex it) { return it.myModule; } }).toListSequence(); } 	0	0	0	0	1	0
@Override public int hashCode() { int result = name != null ? name.hashCode() : 0; result = 31 * result + (artist != null ? artist.hashCode() : 0); result = 31 * result + (album != null ? album.hashCode() : 0); result = 31 * result + (year != null ? year.hashCode() : 0); result = 31 * result + (genre != null ? genre.hashCode() : 0); result = 31 * result + (bmp != null ? bmp.hashCode() : 0); result = 31 * result + (duration != null ? duration.hashCode() : 0); return result; } 	0	1	0	0	0	0
@Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof TrackInfo)) return false;  TrackInfo trackInfo = (TrackInfo) o;  if (name != null ? !name.equals(trackInfo.name) : trackInfo.name != null) return false; if (artist != null ? !artist.equals(trackInfo.artist) : trackInfo.artist != null) return false; if (album != null ? !album.equals(trackInfo.album) : trackInfo.album != null) return false; if (year != null ? !year.equals(trackInfo.year) : trackInfo.year != null) return false; if (genre != null ? !genre.equals(trackInfo.genre) : trackInfo.genre != null) return false; if (bmp != null ? !bmp.equals(trackInfo.bmp) : trackInfo.bmp != null) return false; return !(duration != null ? !duration.equals(trackInfo.duration) : trackInfo.duration != null);  } 	0	0	0	0	1	0
"@Test public void testHashedID() throws Exception {  userDAO.addUser(TEST_USER_NAME);  DBCollection collection = userDAO.getDatastore().getCollection(User.class);  collection.getIndexInfo().forEach(dbObject -> { BasicDBObject index = (BasicDBObject) dbObject; if (!index.getString(""name"").equals(""_id_"")) { assertEquals(""hashed"", ((DBObject) index.get(""key"")).get(User.HASHED_ID_FIELD_NAME)); } }); } "	0	0	0	0	1	0
"@When(""^replace (\\w+)$"") public void replace(String name, DataTable table) { name = name.trim(); String text = context.vars.get(name).getAsString(); List<Map<String, String>> list = table.asMaps(String.class, String.class); String replaced = Script.replacePlaceholders(text, list, context); context.vars.put(name, replaced); } "	0	0	0	0	1	0
"@Override public boolean canAddMoreManagedProfiles(int userId, boolean allowedToRemoveOne) { checkManageUsersPermission(""check if more managed profiles can be added.""); if (ActivityManager.isLowRamDeviceStatic()) { return false; } if (!mContext.getPackageManager().hasSystemFeature( PackageManager.FEATURE_MANAGED_USERS)) { return false; } // Limit number of managed profiles that can be created final int managedProfilesCount = getProfiles(userId, true).size() - 1; final int profilesRemovedCount = managedProfilesCount > 0 && allowedToRemoveOne ? 1 : 0; if (managedProfilesCount - profilesRemovedCount >= MAX_MANAGED_PROFILES) { return false; } synchronized(mUsersLock) { UserInfo userInfo = getUserInfoLU(userId); if (!userInfo.canHaveProfile()) { return false; } int usersCountAfterRemoving = getAliveUsersExcludingGuestsCountLU() - profilesRemovedCount; // We allow creating a managed profile in the special case where there is only one user. return usersCountAfterRemoving  == 1 || usersCountAfterRemoving < UserManager.getMaxSupportedUsers(); } } "	1	1	1	1	1	0
"@Override @Nullable public BigDecimal setTemperature(final BigDecimal targetTemperature) throws IOException {  if (selectedDevice == null) { throw new IllegalArgumentException(""No device selected, cannot set temperature.""); }  if (computerInfo == null) { throw new IllegalArgumentException(""Cannot determine MAC address of computer, cannot set temperature.""); }  // Discard the precision and round by half. float roundedTemperature = NumberUtils.roundHalf(targetTemperature.floatValue()); if (roundedTemperature < AtagOneApp.TEMPERATURE_MIN || roundedTemperature > AtagOneApp.TEMPERATURE_MAX) { throw new IllegalArgumentException( ""Device temperature out of bounds: "" + roundedTemperature + "". Needs to be between "" + AtagOneApp.TEMPERATURE_MIN + "" (inclusive) and "" + AtagOneApp.TEMPERATURE_MAX + "" (inclusive)""); }  final String messageUrl = ""http://"" + selectedDevice.getDeviceAddress().getHostAddress() + "":"" + HTTP_CLIENT_PORT + ""/update""; log.fine(""POST retrieve: URL="" + messageUrl);  // Get computer MAC address. final String macAddress = computerInfo.getMac();  final String jsonPayload = ""{\""update_message\"":{"" + ""\""seqnr\"":0,"" + ""\""account_auth\"":{"" + ""\""user_account\"":\""\"","" + ""\""mac_address\"":\"""" + macAddress + ""\""},"" + ""\""control\"":{"" + ""\""ch_mode_temp\"":"" + roundedTemperature + ""}}}\n""; String response = executeRequest(messageUrl, jsonPayload, versionInfo).getContent();  // Response: // { ""update_reply"":{ ""seqnr"":0,""status"":{""device_id"":""6808-1401-3109_15-30-001-123"",""device_status"":16385,""connection_status"":23,""date_time"":503527795},""acc_status"":2} } final Integer accStatus = JSONUtils.getJSONValueByName(response, Integer.class, AtagOneConnectorInterface.VALUE_DEVICE_ID); assertAuthorized(accStatus);  // Update Device ID? updateSelectedDevice(response);  // Get and return current room temperature. return (BigDecimal) getDiagnostics().get(VALUE_ROOM_TEMPERATURE); } "	0	0	0	0	1	0
private BufferedImage createErrorImage(final Rectangle area) { final BufferedImage bufferedImage = new BufferedImage(area.width, area.height, TYPE_INT_ARGB_PRE); final Graphics2D graphics = bufferedImage.createGraphics(); try { graphics.setBackground(this.configuration.getTransparentTileErrorColor());  graphics.clearRect(0, 0, area.width, area.height); return bufferedImage; } finally { graphics.dispose(); } } 	0	0	0	0	1	0
"private String getTypeName(final Class<?> cls) { // find @JsonTypeName recursively final JsonTypeName jsonTypeName = getAnnotationRecursive(cls, JsonTypeName.class); if (jsonTypeName != null) { return jsonTypeName.value(); } // find @JsonSubTypes.Type recursively final JsonSubTypes jsonSubTypes = getAnnotationRecursive(cls, JsonSubTypes.class, new Predicate<JsonSubTypes>() { @Override public boolean test(JsonSubTypes types) { return getJsonSubTypeForClass(types, cls) != null; } }); if (jsonSubTypes != null) { final JsonSubTypes.Type jsonSubType = getJsonSubTypeForClass(jsonSubTypes, cls); if (!jsonSubType.name().isEmpty()) { return jsonSubType.name(); } } // use simplified class name if it's not an interface or abstract if(!cls.isInterface() && !Modifier.isAbstract(cls.getModifiers())) { return cls.getName().substring(cls.getName().lastIndexOf(""."") + 1); } return null; } "	0	1	0	0	0	0
@Override public long cnt(Countable e) { Map<String, Counter> cntMap = classCounters.get(e.getClass().getName()); if (cntMap == null) { return 0; } Counter cnt = cntMap.get(e.getName()); return cnt == null ? 0 : cnt.cnt(); } 	0	0	0	0	1	0
"public void restore() throws IOException { BufferedReader reader = new BufferedReader(new FileReader(source)); String line = """"; while ((line = reader.readLine()) != null) { lines.add(line); } reader.close(); } "	0	0	0	0	1	0
"public JSONStringer value(Object value) throws JSONException { if (stack.isEmpty()) { throw new JSONException(""Nesting problem""); }  if (value instanceof JSONArray) { ((JSONArray) value).writeTo(this); return this;  } else if (value instanceof JSONObject) { ((JSONObject) value).toString(this); return this; }  beforeValue();  if (value instanceof JSONString) { out.append(((JSONString) value).toJSONString()); return this; }  if (value == null || value instanceof Boolean || value == JSONObject.NULL) { out.append(value);  } else if (value instanceof Number) { out.append(JSONObject.numberToString((Number) value));  } else { // Hack to make it possible that the value is not surrounded by quotes. (Used for JavaScript function calls) // Example: { ""name"": ""testkey"", ""value"": window.myfunction() } if (value.getClass().getSimpleName().contains(""JSONFunction"")) { // note that no escaping of quotes (or anything else) is done in this case. // that is fine because the only way to get to this point is to // explicitly put a special kind of object into the JSON data structure. out.append(value); } else { string(value.toString()); } }  return this; } "	0	1	0	1	1	0
"@Override public void initialize(URL location, ResourceBundle resources) { // suggestion function String[] suggestion = new String[6556];  try { File file = new File(""src/goodday/files/Suggestion_list""); FileReader filereader = new FileReader(file); BufferedReader br = new BufferedReader(filereader);  for (int i = 0; i < suggestion.length; i++) { suggestion[i] = br.readLine(); }  } catch (FileNotFoundException e) { e.printStackTrace(); System.out.println(""FileNotFoundException""); } catch (IOException e) { e.printStackTrace(); System.out.println(""IOException""); } TextFields.bindAutoCompletion(inputCityName, suggestion); } "	0	0	0	0	1	0
"@FXML protected void applyChanges() {  String location = locationName.getText(); int unit = 0;  if (location.equals("""")) location = gdm.getUserData().get(1);  if (fahrenheitRadioButton.isSelected() == true) unit = 2; if (celsiusRadioButton.isSelected() == true) unit = 1;  boolean successFlag = gdm.setUserSetting(location, unit);  if(!successFlag) { labelErrorMessage.setText(""Couldn't find the location. Please choose a city.""); } else { labelSuccessMessage.setText(""Your setting is updated successfully""); gdm.deleteFileFunction(""src/weatherInformation.json""); } } "	0	0	0	0	1	0
"private static String getWarning(PsiElement element, String target) { if (element instanceof PsiMethod) { PsiMethod method = (PsiMethod) element; if (!isStatic(method) && getAvailableFields(method, target).length == 0) { return ""    Can't move "" + getHumanReadableName(element) + "" like instance method. It will be converted to static method first""; } if (method.isConstructor()) { return ""    Sorry, can't move constructor""; } } else if (element instanceof PsiField) { if (!isStatic((PsiField) element)) { return ""    Sorry, can't move instance fields""; } } else { return ""    Sorry, can't move such elements""; } return """"; } "	0	1	0	0	0	0
public Word playLetter(char letter) { Box b = this.boxes[this.highlightLetter.across][this.highlightLetter.down];  if (b == null) { return null; }  if (b.getResponse() == b.getSolution() && isShowErrors()) { // Prohibit replacing correct letters return this.getCurrentWord(); } else { b.setResponse(letter); b.setResponder(this.responder);  return this.nextLetter(); } } 	0	0	0	0	1	0
"@Override public List<DocumentDto> findAll(String ownerUuid) throws BusinessException { Validate.notEmpty(ownerUuid, ""Missing required owner uuid"");  User actor = checkAuthentication(); User owner = getOwner(ownerUuid);  List<DocumentEntry> list = documentEntryService.findAll(actor, owner); return Lists.transform(list, DocumentDto.toDelegationVo()); } "	0	1	0	0	0	0
public void add(SearchStats searchStats, boolean includeTypes) { if (searchStats == null) { return; } totalStats.add(searchStats.totalStats); openContexts += searchStats.openContexts; if (includeTypes && searchStats.groupStats != null && !searchStats.groupStats.isEmpty()) { if (groupStats == null) { groupStats = new HashMap<>(searchStats.groupStats.size()); } for (Map.Entry<String, Stats> entry : searchStats.groupStats.entrySet()) { Stats stats = groupStats.get(entry.getKey()); if (stats == null) { groupStats.put(entry.getKey(), entry.getValue()); } else { stats.add(entry.getValue()); } } } } 	0	1	1	0	1	0
@Background @Receiver(actions = Broadcasts.IN_SYNC, registerAt = Receiver.RegisterAt.OnResumeOnPause) protected void syncingChanged(@Receiver.Extra(Broadcasts.Extras.SYNCING) boolean syncing) { if (syncing && isSnapshotFragment()) { entityFacade.syncAll(getVmId(), filterSnapshotId); } } 	0	1	0	0	0	0
@Override public List<SearchResult<ByteMatcher>> searchBackwards(final byte[] bytes, final int fromPosition, final int toPosition) { final ByteMatcher searchByte = toSearchFor; final int startPosition = fromPosition < bytes.length? fromPosition : bytes.length - 1; final int endPosition   = toPosition > 0? toPosition : 0; for (int searchPosition = startPosition; searchPosition <= endPosition; searchPosition--) { if (searchByte.matches(bytes[searchPosition])) { return SearchUtils.singleResult(searchPosition, searchByte); } } return SearchUtils.noResults(); } 	1	1	1	1	1	0
"@Redirect(method = ""updatePlayerEntity"", at = @At(value = ""INVOKE"", target = ""Lnet/minecraft/network/NetHandlerPlayServer;sendPacket(Lnet/minecraft/network/Packet;)V"", ordinal = 0)) public void onSendSpawnPacket(final NetHandlerPlayServer thisCtx, final Packet spawnPacket, final EntityPlayerMP playerIn) { if (!(this.trackedEntity instanceof EntityHuman)) { // This is the method call that was @Redirected thisCtx.sendPacket(spawnPacket); return; } final EntityHuman human = (EntityHuman) this.trackedEntity; // Adds the GameProfile to the client thisCtx.sendPacket(human.createPlayerListPacket(S38PacketPlayerListItem.Action.ADD_PLAYER)); // Actually spawn the human (a player) thisCtx.sendPacket(spawnPacket); // Remove from tab list final S38PacketPlayerListItem removePacket = human.createPlayerListPacket(S38PacketPlayerListItem.Action.REMOVE_PLAYER); if (human.canRemoveFromListImmediately()) { thisCtx.sendPacket(removePacket); } else { int delay = Sponge.getGlobalConfig().getConfig().getEntity().getHumanPlayerListRemoveDelay(); Runnable removeTask = new RemovePlayerListRunnable(human, playerIn, removePacket); if (delay == 0) { removeTask.run(); } else { Sponge.getGame().getScheduler().getTaskBuilder().execute(removeTask).delay(delay).submit(Sponge.getPlugin()); } } } "	0	0	0	0	1	0
"private void showEmptyPaper(User from) { trace_msg(""Showing empty Paper %s to Avatar %s"", paper_path(), from.name()); JSONLiteral msg = new_reply_msg(noid); msg.addParameter(""nextpage"", 0); msg.addParameter(""ascii"", EMPTY_PAPER); msg.finish(); from.send(msg); } "	0	0	0	0	1	0
"public void registerClass(CompileScope scope, Class<?>... classes) { for (Class<?> clazz : classes) { if (BaseWrapper.class.isAssignableFrom(clazz) && !clazz.isAnnotationPresent(Reflection.NotWrapper.class)) { throw new CriticalException(""Please use registerWrapperClass() method instead of this for wrapper classes""); }  if (!this.classes.add(clazz)) { throw new CriticalException(""Class already registered - "" + clazz.getName()); } } } "	0	0	0	0	1	0
public MethodSpec.Builder addCode(String format, Object... args) { this.codeBlocks.add(CodeBlock.of(format, args)); return this; } 	0	0	0	0	1	0
"public TemplateModel next() throws TemplateModelException { try { return (TemplateModel) matchingInputParts.get(nextIdx++); } catch (IndexOutOfBoundsException e) { throw new _TemplateModelException(e, ""There were no more matches""); } } "	0	0	0	0	1	0
"public List<FileEntry> listFiles(String parentPath, int depth) throws Exception { ArrayList<FileEntry> result = new ArrayList<>(); try { if (parentPath.endsWith(""/"")) parentPath = parentPath.substring(0,parentPath.length()-1);  ConnectionInfo ci = splitStringToConnectionInfo(parentPath); String requestBody = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" + ""<d:propfind xmlns:d=\""DAV:\"">\n"" + "" <d:prop><d:displayname/><d:getlastmodified/><d:getcontentlength/></d:prop>\n"" + ""</d:propfind>\n""; Log.d(""WEBDAV"", ""starting query for "" + ci.URL); Request request = new Request.Builder() .url(new URL(ci.URL)) .method(""PROPFIND"", RequestBody.create(MediaType.parse(""application/xml""),requestBody)) .addHeader(""Depth"",String.valueOf(depth))  .build();  Response response = getClient(ci).newCall(request).execute();  checkStatus(response);  String xml = response.body().string();  PropfindXmlParser parser = new PropfindXmlParser(); List<PropfindXmlParser.Response> responses = parser.parse(new StringReader(xml));  for (PropfindXmlParser.Response r: responses) { PropfindXmlParser.Response.PropStat.Prop okprop  =r.getOkProp(); if (okprop != null) { FileEntry e = new FileEntry(); e.canRead = e.canWrite = true; Date lastMod = WebDavUtil.parseDate(okprop.LastModified); if (lastMod != null) e.lastModifiedTime = lastMod.getTime(); if (okprop.ContentLength != null) { try { e.sizeInBytes = Integer.parseInt(okprop.ContentLength); } catch (NumberFormatException exc) { e.sizeInBytes = -1; } } e.isDirectory = r.href.endsWith(""/"");  e.displayName = okprop.DisplayName; if (e.displayName == null) { e.displayName = getDisplayName(r.href); } e.path = r.href;  if (e.path.indexOf(""://"") == -1) { //relative path: e.path = buildPathFromHref(parentPath, r.href); }  if ((depth == 1) && e.isDirectory) { String path = e.path; if (!path.endsWith(""/"")) path += ""/"";  String parentPathWithTrailingSlash = parentPath + ""/"";  //for depth==1 only list children, not directory itself if (path.equals(parentPathWithTrailingSlash)) continue; }  result.add(e); } } return result;   } catch (Exception e) { throw convertException(e); }  } "	0	0	0	0	1	0
public int getLastPageNumber() { /* * We use the Math.floor() method because page numbers are zero-based (i.e. the first page is page 0). */ int rueckgabe = new Double(Math.floor(this.totalResults / this.pageSize)).intValue(); if (this.totalResults % this.pageSize == 0) { rueckgabe--; } return rueckgabe; } 	0	0	0	0	1	0
"@Override public void onClick(View v) { List<Manga> mangas = Database.getMangas(getContext(), null, true); boolean onDb = false; for (Manga m : mangas) { if (m.getPath().contains(manga.getPath())) onDb = true; } if (!onDb) { new AddMangaTask().execute(manga); AnimatorSet set = new AnimatorSet(); ObjectAnimator anim1 = ObjectAnimator.ofFloat(floatingActionButton_add, ""alpha"", 1.0f, 0.0f); anim1.setDuration(0); DisplayMetrics displayMetrics = getResources().getDisplayMetrics(); ObjectAnimator anim2 = ObjectAnimator.ofFloat(floatingActionButton_add, ""y"", displayMetrics.heightPixels); anim2.setDuration(500); set.playSequentially(anim2, anim1); set.start(); }else{ Toast.makeText(getContext(),getString(R.string.already_on_db),Toast.LENGTH_LONG).show(); } } "	0	1	1	0	1	0
private Block get(int x, int y, int z) { return initialCenter.getBlock().getRelative(x, y, z); } 	0	0	0	0	1	0
"private String getTipInfo(DSSequence sequence, int off) { String tip = """" + off; if (sequencePatternmatches != null) { PatternSequenceDisplayUtil psd = sequencePatternmatches .get(sequence); if (psd != null) { TreeSet<PatternLocations> patternsPerSequence = psd .getTreeSet(); if (patternsPerSequence != null && patternsPerSequence.size() > 0) { for (PatternLocations pl : patternsPerSequence) { CSSeqRegistration reg = pl.getRegistration(); if (reg != null && reg.x1 + 1 <= off && reg.x2 >= off) { int x1 = reg.x1 + 1; int x2 = reg.x2; if (pl.getPatternType().equals( PatternLocations.DEFAULTTYPE)) { tip = tip + "" "" + pl.getAscii() + ""<"" + x1 + "","" + x2 + ""> ""; } else if (pl.getPatternType().equals( PatternLocations.TFTYPE)) { tip = tip + "" "" + pl.getAscii() + ""<"" + x1 + "","" + x2 + ""> ""; } } } } } }  return tip; } "	0	0	0	0	1	0
"@Nullable public Metadata onExitGroupId() { checkState(getGroupId() != null, ""groupId""); if (plugins.isEmpty()) { log.debug(""No plugins in group: {}:{}"", getGroupId()); return null; } final Metadata result = new Metadata(); result.setVersion(""1.1.0""); result.setGroupId(getGroupId()); result.getPlugins().addAll(plugins); return result; } "	0	0	0	0	1	0
"public InputStream sendRequest(String requestMethod, Map<String, String> parameters) throws IOException { String queryString = getQueryString(parameters); URL url = new URL(this.apiBaseUrl);  HttpURLConnection connection = (HttpURLConnection) url.openConnection(); connection.setRequestMethod(requestMethod); connection.setDoInput(true); connection.setDoOutput(true); connection.setUseCaches(false); connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded""); connection.setRequestProperty(""Content-Length"", String.valueOf(queryString.length())); connection.setRequestProperty(ApiConnection.PARAM_COOKIE, getCookieString());  OutputStreamWriter writer = new OutputStreamWriter( connection.getOutputStream()); writer.write(queryString); writer.flush(); writer.close();  int rc = connection.getResponseCode(); if (rc != 200) { logger.warn(""Error: API request returned response code "" + rc); }  InputStream iStream = connection.getInputStream(); fillCookies(connection); return iStream; } "	0	1	0	0	0	0
"@Test(expected = MoveException.class) public void testPositionError() { MovePromotion mE = new MovePromotion (P(""e5""),P(""e6""), new Queen()); mE.execute(board1); } "	0	0	0	0	1	0
public void updateBlockTileEntity(BlockCoord blockCoord, Player player) { CraftWorld world = (CraftWorld)player.getWorld(); TileEntity tileEntity = world.getTileEntityAt(blockCoord.x, blockCoord.y, blockCoord.y);  if (tileEntity == null) { return; }  Packet<?> packet = tileEntity.getUpdatePacket();  if (packet != null) { CraftPlayer player2 = (CraftPlayer)player; player2.getHandle().playerConnection.sendPacket(packet); } } 	1	0	1	1	1	0
"public void fillWithElectives(int semesterNumber) { while(!isFilled()) { StringBuilder code = new StringBuilder(); code.append(""valg""); code.append(semesterNumber); StringBuilder name = new StringBuilder(); name.append(""valgfag""); name.append(semesterNumber); Course c = new Course(code.toString(), ""agile"", 7.5); c.setCourseName(name.toString()); addCourse(c); } } "	0	0	0	0	1	0
public PDFont getFont() throws IOException { PDFont retval = null; COSBase font = fontSetting.get( 0 ); if( font instanceof COSDictionary ) { retval = PDFontFactory.createFont( (COSDictionary)font ); } return retval; } 	0	1	0	0	0	0
public float getAsFloat() { return (float) getAsDoubleUnchecked(); } 	0	0	0	0	1	0
public Number getAsNumber() { final Number result; if (isSmallInt()) { result = getSmallInt(); } else if (isInt()) { result = getInt(); } else if (isUInt()) { result = getUInt(); } else if (isDouble()) { result = getAsDouble(); } else { throw new VPackValueTypeException(ValueType.INT, ValueType.UINT, ValueType.SMALLINT); } return result; } 	0	0	0	0	1	0
"public void refreshDisplay() { String logmsg = ""Invoked""; String methodname = new Object(){}.getClass().getEnclosingMethod().getName(); LogMsg.LogMsg(LogMsg.LOGTYPE_INFORMATIONAL,LOGTAG,logmsg,THISCLASS,methodname); slcsr = dbshopmethods.getShops(shopfilter, shoporderby); currentshopcount = slcsr.getCount(); shoplistadapter.swapCursor(slcsr); alcsr = dbaislemethods.getAisles(aislefilter, aisleorderby, false); currentaislecount = alcsr.getCount(); aislelistadapter.swapCursor(alcsr); plcsr = dbproductmethods.getProductsInAisle(currentaisleid, productfilter, productorderby); currentproductcount = plcsr.getCount(); productlistadapter.swapCursor(plcsr); rulefilter = DBRulesTableConstants.RULES_AISLEREF_COL_FULL + "" = "" + Long.toString(currentaisleid); rlcsr = dbrulemethods.getExpandedRuleList(rulefilter,orderby); rulelistadapter.swapCursor(rlcsr); } "	0	0	0	0	1	0
@Override public void onStart() { super.onStart();  mCameraPreview = (CameraPreview) findViewById(R.id.camera_preview); mCameraPreview.setCapabilities(new OrientationCapability(OrientationSetting.PORTRAIT)); mLayerView = (LayerView) findViewById(R.id.layer_view); } 	0	0	0	0	1	0
public List<Map<String, Object>> getAllCorpList() { String [] cacheKey = new String[]{CacheUtils.KEY_CORP_LIST, new Integer(getCurUserId()).toString()}; String cache = CacheUtils.get(cacheKey); List<Map<String, Object>> corpList = new ArrayList<Map<String, Object>>(); if (cache != null) { corpList = CommonUtils.gson.fromJson(cache, List.class); } else { List<Corporation> list = accountMgr.getCorporationListWithPager(getCurUserId(), 1, 999); for (Corporation c : list) { corpList.add(c.toMap()); } CacheUtils.put(cacheKey, CommonUtils.gson.toJson(corpList)); } return corpList; } 	0	0	0	0	1	0
"@SuppressWarnings(""rawtypes"") @GET @Path(""/"") @ApiOperation(value = ""Find tenant's metric definitions."", notes = ""Does not include any metric values. "", response = List.class, responseContainer = ""List"") @ApiResponses(value = { @ApiResponse(code = 200, message = ""Successfully retrieved at least one metric definition.""), @ApiResponse(code = 204, message = ""No metrics found.""), @ApiResponse(code = 400, message = ""Invalid type parameter type."", response = ApiError.class), @ApiResponse(code = 500, message = ""Failed to retrieve metrics due to unexpected error."", response = ApiError.class) }) public Response findMetrics( @ApiParam(value = ""Queried metric type"", required = false, allowableValues = ""[gauge, availability, counter]"") @QueryParam(""type"") MetricType metricType, @ApiParam(value = ""List of tags filters"", required = false) @QueryParam(""tags"") Tags tags) {  if (metricType != null && !MetricType.userTypes().contains(metricType)) { return badRequest(new ApiError(""Incorrect type param"")); }  Observable<Metric> metricObservable = (tags == null) ? metricsService.findMetrics(tenantId, metricType) : metricsService.findMetricsWithFilters(tenantId, tags.getTags(), metricType);  try { return metricObservable .map(MetricDefinition::new) .toList() .map(ApiUtils::collectionToResponse) .toBlocking() .lastOrDefault(null); } catch (Exception e) { return ApiUtils.serverError(e); } } "	0	0	0	0	1	0
"private void createIzouPropertiesFiles() throws IOException { String propertiesPath = getContext().getFiles().getPropertiesLocation() + File.separator + ""properties"" + File.separator + ""local_events.properties"";  File file = new File(propertiesPath); BufferedWriter bufferedWriterInit = null; try { if (!file.exists()) { file.createNewFile(); bufferedWriterInit = new BufferedWriter(new FileWriter(propertiesPath)); bufferedWriterInit.write(""# You can use this file to store an event ID with a key, or shortcut, "" + "" so that others can easily access and\n# fire it using the key""); } } catch (IOException e) { //error(""unable to create the local_events file"", e); } finally { if(bufferedWriterInit != null) bufferedWriterInit.close(); } } "	1	0	1	0	0	0
@Override public void onPause() { super.onPause(); mGlSurfaceView.onPause(); if (mNativeVrShell != 0) { nativeOnPause(mNativeVrShell); } } 	0	0	0	0	1	0
@Override public void onResume() { super.onResume(); mGlSurfaceView.onResume(); if (mNativeVrShell != 0) { // Refreshing the viewer profile accesses disk, so we need to temporarily allow disk // reads. The GVR team promises this will be fixed when they launch. StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskReads(); try { nativeOnResume(mNativeVrShell); } finally { StrictMode.setThreadPolicy(oldPolicy); } } } 	0	0	0	0	1	0
private void loadThisSymbol(ObjectCreationExpr n, A arg) { boolean isAnnonymousClass = n.getAnonymousClassBody() != null; if (isAnnonymousClass) { ScopeLoader scopeLoader = new ScopeLoader(typeTable, expressionTypeAnalyzer, actionProvider); Scope scope = n.accept(scopeLoader, symbolTable); if (scope != null) { symbolTable.pushScope(scope); } if (n.getAnonymousClassBody() != null) { for (BodyDeclaration member : n.getAnonymousClassBody()) { member.accept(this, arg); } } if (scope != null) { symbolTable.popScope(); } }  } 	0	0	0	0	1	0
"private LinuxDesktop detectDesktopSession() { ArrayList<String> command = new ArrayList<>(); command.add(""sh""); command.add(""-c""); command.add(""echo \""$DESKTOP_SESSION\""""); // fill the map Map<String, Object> desktops = new HashMap<String, Object>(); desktops.put(""kde"", LinuxDesktop.desktopKde); desktops.put(""gnome"", LinuxDesktop.desktopGnome); desktops.put(""cinnamon"", LinuxDesktop.desktopCinnamon); // execute String desktop = isExpectedCommandOutput(command, desktops, true); if (desktop != null && !desktop.isEmpty()) { return (LinuxDesktop)desktops.get(desktop); } return LinuxDesktop.desktopUnknown; } "	1	0	1	1	1	0
"private void deleteList() { try { final JSONObject data = new JSONObject() .put(""token"", mAuthPreferences.getAuthToken()) .put(""username"", mAuthPreferences.getAccountName()) .put(""listname"", mList.mName); // Create request StringRequest request = new StringRequest(Request.Method.POST, App.API_LOCATION + ""/deleteList"", new Response.Listener<String>() { @Override public void onResponse(String response) { MainActivity.lastDeletedList = mList; getActivity().finishActivity(ListViewActivity.DELETED_LIST); } }, new Response.ErrorListener() { @Override public void onErrorResponse(VolleyError error) { NetworkResponse networkResponse = error.networkResponse; if (networkResponse != null && networkResponse.statusCode == 401) { // HTTP Status Code: 401 Unauthorized getNewAuthToken(1); } else { error.printStackTrace(); } } }) { // This needs to be done to send data with a StringRequest // Get the data body @Override public byte[] getBody() throws AuthFailureError { return data.toString().getBytes(); } // Get the content type @Override public String getBodyContentType() { return ""application/json""; } }; request.setShouldCache(false); // Access the RequestQueue through your singleton class. VolleySingleton.getInstance(getActivity()).addToRequestQueue(request); } catch (JSONException e) { e.printStackTrace(); } } "	0	1	0	0	0	0
"public static List<AlgoHelperEntry> createAlgos(GraphHopperStorage ghStorage, LocationIndex idx, boolean withPreparedAlgo, final TraversalMode tMode, final Weighting weighting, final EncodingManager manager) { List<AlgoHelperEntry> prepare = new ArrayList<AlgoHelperEntry>(); prepare.add(new AlgoHelperEntry(ghStorage, ghStorage, new AlgorithmOptions(ASTAR, weighting, tMode), idx)); // later: include dijkstraOneToMany prepare.add(new AlgoHelperEntry(ghStorage, ghStorage, new AlgorithmOptions(DIJKSTRA, weighting, tMode), idx));  final AlgorithmOptions astarbiOpts = new AlgorithmOptions(ASTAR_BI, weighting, tMode); astarbiOpts.getHints().put(ASTAR_BI + "".approximation"", ""BeelineSimplification""); final AlgorithmOptions dijkstrabiOpts = new AlgorithmOptions(DIJKSTRA_BI, weighting, tMode); prepare.add(new AlgoHelperEntry(ghStorage, ghStorage, astarbiOpts, idx)); prepare.add(new AlgoHelperEntry(ghStorage, ghStorage, dijkstrabiOpts, idx));  if (withPreparedAlgo) { Directory dir = new GHDirectory("""", DAType.RAM_INT); final PrepareLandmarks prepareLM = new PrepareLandmarks(dir, ghStorage, weighting, tMode, 8, 4); // assume one big network prepareLM.setMinimumNodes(ghStorage.getNodes() / 2); prepareLM.doWork();  prepare.add(new AlgoHelperEntry(ghStorage, ghStorage, astarbiOpts, idx) { @Override public RoutingAlgorithm createAlgo(Graph qGraph) { return prepareLM.getDecoratedAlgorithm(qGraph, new AStarBidirection(qGraph, weighting, tMode), astarbiOpts); } });  GraphHopperStorage storageCopy = new GraphBuilder(manager). set3D(ghStorage.getNodeAccess().is3D()).setCHGraph(weighting). create(); ghStorage.copyTo(storageCopy); storageCopy.freeze(); final CHGraph graphCH = storageCopy.getGraph(CHGraph.class, weighting); final PrepareContractionHierarchies prepareCH = new PrepareContractionHierarchies( new GHDirectory("""", DAType.RAM_INT), storageCopy, graphCH, weighting, tMode); prepareCH.doWork(); LocationIndex idxCH = new LocationIndexTree(storageCopy, new RAMDirectory()).prepareIndex(); prepare.add(new AlgoHelperEntry(graphCH, storageCopy, dijkstrabiOpts, idxCH) { @Override public RoutingAlgorithm createAlgo(Graph qGraph) { return prepareCH.createAlgo(qGraph, dijkstrabiOpts); } });  prepare.add(new AlgoHelperEntry(graphCH, storageCopy, astarbiOpts, idxCH) { @Override public RoutingAlgorithm createAlgo(Graph qGraph) { return prepareCH.createAlgo(qGraph, astarbiOpts); } }); } return prepare; } "	1	0	1	1	0	0
"@Override public void init(Map stormConf, WriterConfiguration configurations) { Map<String, Object> globalConfiguration = configurations.getGlobalConfig();  Settings.Builder settingsBuilder = Settings.settingsBuilder(); settingsBuilder.put(""cluster.name"", globalConfiguration.get(""es.clustername"")); settingsBuilder.put(""client.transport.ping_timeout"",""500s""); configurations.getGlobalConfig().put(Constants.GLOBAL_BATCH_SIZE,true); if (optionalSettings != null) { settingsBuilder.put(optionalSettings); }  Settings settings = settingsBuilder.build();  try{ for(HostnamePort hp : getIps(globalConfiguration)) { client = TransportClient.builder().settings(settings).build() .addTransportAddress( new InetSocketTransportAddress(InetAddress.getByName(hp.hostname), hp.port) ); }   } catch (UnknownHostException exception){  throw new RuntimeException(exception); }  dateFormat = new SimpleDateFormat((String) globalConfiguration.get(""es.date.format""));  } "	0	1	0	0	0	0
"private List<Date> getStartingTimeAndDeadline() { String tmpArgs = args; String correctDateTime = """"; List<String> datesString = getMoreThanOneArguments( CliSyntax.STARTINGTIME_AND_DEADLINE_REVERSE_REGEX, CliSyntax.CAPTURE_GROUPS_OF_EVENT); if (datesString == null) { args = tmpArgs; return null; } assert datesString .size() == NUMBER_OF_ARGUMENTS_IN_STARTING_TIME_AND_DEADLINE; List<Date> dates = new ArrayList<Date>(); for (int i = 0; i < NUMBER_OF_ARGUMENTS_IN_STARTING_TIME_AND_DEADLINE; i++) { List<DateGroup> group = new PrettyTimeParser().parseSyntax( ParserUtil.correctDateFormat(datesString.get(i))  + (i == 1 ? CliSyntax.DEFAULT_STARTING_TIME : CliSyntax.DEFAULT_DEADLINE));  if (group == null || group.size() > 1 || (!group.get(0).getText() .equals(datesString.get(i)) && (!group.get(0).getText().equals( ParserUtil.correctDateFormat(datesString.get(i)) + (i == 1 ? CliSyntax.DEFAULT_STARTING_TIME : CliSyntax.DEFAULT_DEADLINE)) && !group.get(0).getText().equals(ParserUtil .correctDateFormat(datesString.get(i)))))) { args = tmpArgs; return null; } else { dates.addAll(group.get(0).getDates());  correctDateTime = ((i == 1 ? ""from "" : ""to "") + group.get(0).getText() + "" "") + correctDateTime; } } if (dates.get(CliSyntax.INDEX_OF_STARTINGTIME) .after(dates.get(CliSyntax.INDEX_OF_DEADLINE))) { args = tmpArgs; return null; } dates = new PrettyTimeParser().parse(correctDateTime); return dates; } "	1	0	1	1	0	0
"protected List<String> skipStartsWith() { return Arrays.asList(""WEB-INF""); } "	0	0	0	0	1	0
"@Override public String toString() { return direction.toString().toLowerCase() + ""_"" + iomode.toString().toLowerCase(); } "	0	0	0	0	1	0
@Test public void getId_returnsIdAfterSave() { Weapon newWeapon = new Weapon(); newWeapon.save(); assertEquals(Weapon.all().get(0).getId(), newWeapon.getId()); } 	0	0	0	0	1	0
private PagedReference moveNext() { synchronized (PageSubscriptionImpl.this) { boolean match = false;  PagedReference message = null;  PagePosition lastPosition = position; PagePosition tmpPosition = position;  do { synchronized (redeliveries) { PagePosition redelivery = redeliveries.poll();  if (redelivery != null) { // There's a redelivery pending, we will get it out of that pool instead isredelivery = true; PagedReference redeliveredMsg = getReference(redelivery); lastRedelivery = redeliveredMsg;  return redeliveredMsg; } else { lastRedelivery = null; isredelivery = false; }  message = internalGetNext(tmpPosition); }  if (message == null) { break; }  tmpPosition = message.getPosition();  boolean valid = true; boolean ignored = false;  // Validate the scenarios where the message should be considered not valid even to be considered  // 1st... is it routed?  valid = routed(message.getPagedMessage()); if (!valid) { ignored = true; }  PageCursorInfo info = getPageInfo(message.getPosition().getPageNr(), false);  if (info != null && (info.isRemoved(message.getPosition()) || info.getCompleteInfo() != null)) { continue; }  // 2nd ... if TX, is it committed? if (valid && message.getPagedMessage().getTransactionID() >= 0) { PageTransactionInfo tx = pageStore.getPagingManager().getTransaction(message.getPagedMessage() .getTransactionID()); if (tx == null) { HornetQServerLogger.LOGGER.pageSubscriptionCouldntLoad(message.getPagedMessage().getTransactionID(), message.getPosition(), pageStore.getAddress(), queue.getName()); valid = false; ignored = true; } else { if (tx.deliverAfterCommit(PageSubscriptionImpl.this, message.getPosition())) { valid = false; ignored = false; } } }  // 3rd... was it previously removed? if (valid) { // We don't create a PageCursorInfo unless we are doing a write operation (ack or removing) // Say you have a Browser that will only read the files... there's no need to control PageCursors is // nothing // is being changed. That's why the false is passed as a parameter here  if (info != null && info.isRemoved(message.getPosition())) { valid = false; } }  if (!ignored) { position = message.getPosition(); }  if (valid) { match = match(message.getMessage());  if (!match) { processACK(message.getPosition()); } } else if (ignored) { positionIgnored(message.getPosition()); } } while (message != null && !match);  if (message != null) { lastOperation = lastPosition; }  return message; } } 	1	0	1	0	0	0
public void componentResized(ComponentEvent e) { if (frame.getExtendedState() == JFrame.MAXIMIZED_BOTH) { ((JFrame)frame).getRootPane().setBorder(BorderFactory.createEmptyBorder()); maximized = true; } else { ((JFrame)frame).getRootPane().setBorder(VitcoSettings.FRAME_BORDER); maximized = false; } } 	0	0	0	0	1	0
@Override public void onViewReleased(View releasedChild, float xvel, float yvel) { int top; @State int targetState; if (yvel < 0) { top = mMinOffset; targetState = STATE_EXPANDED; } else if (yvel == 0.f) { int currentTop = releasedChild.getTop(); if (Math.abs(currentTop - mMinOffset) < Math.abs(currentTop - mMaxOffset)) { top = mMinOffset; targetState = STATE_EXPANDED; } else { top = mMaxOffset; targetState = STATE_COLLAPSED; } } else { top = mMaxOffset; targetState = STATE_COLLAPSED; } if (mViewDragHelper.settleCapturedViewAt(releasedChild.getLeft(), top)) { setStateInternal(STATE_SETTLING); ViewCompat.postOnAnimation(releasedChild, new SettleRunnable(releasedChild, targetState)); } else { setStateInternal(targetState); } } 	0	0	0	0	1	0
@Override public void run() { if (mViewDragHelper != null && mViewDragHelper.continueSettling(true)) { ViewCompat.postOnAnimation(mView, this); } else { setStateInternal(mTargetState); } } 	0	0	0	0	1	0
public static double calcIfu2Shift(double cwavlen, double lpmm) {  // TODO: Some of the values here (e.g. plate scale) are different for Hamamatsu and E2V CCDs. // TODO: We currently only support E2V CCDs for the GMOS IFU-2 case, so we are using the E2V values here. final double scale  = 0.080778;   // plaste scale in arcsecs per pixel (E2V only!) final double asecmm = 1.611444;   // Arcsecs per mm final double sepmm  = 175.;       // Physical separation between IFU-2 slits, in mm.  double greq = (cwavlen*lpmm)/1.e6;  double[] tilts = new double[66]; double[] theta_i = new double[66]; double[] theta_r = new double[66]; double[] lambda_over_d = new double[66]; for (int i = 0; i < 66; i++) { tilts[i] = i+1; theta_i[i] = 90.0 - tilts[i];   // Tilt is measured with respect to incoming beam: Tilt = 90 - theta_i theta_r[i] = 40.0 - tilts[i];   // Angle between GMOS collimator and camera = 50 = theta_i - theta_r // Grating equation: m lambda = d( sin(theta_i) + sin(theta_r) ) lambda_over_d[i] = Math.sin(theta_r[i] * Math.PI/180.) + Math.sin(theta_i[i] * Math.PI/180.); } double tilt = findTilt(lambda_over_d, tilts, greq); tilt=tilt*Math.PI/180.0; double a=Math.sin(tilt+0.872665)/Math.sin(tilt); return sepmm*asecmm/(scale*a); } 	0	0	0	0	1	0
"private static List<File> getManagementPlugins() { String[] paths = System.getProperty(""managementPlugins"").split("":""); List<File> plugins = new ArrayList<File>(paths.length); for (String path : paths) { plugins.add(new File(path)); } return plugins; } "	0	0	0	0	1	0
"public void exportToColumn(String title, Query query) { HierarchicalGraph result; if (model.getCurrentQuery() == query) { GraphView view = model.getCurrentResult(); if (view != null) { return; } result = model.getGraphModel().getHierarchicalGraph(view); } else { FilterProcessor processor = new FilterProcessor(); GraphModel graphModel = Lookup.getDefault().lookup(GraphController.class).getModel(); result = (HierarchicalGraph) processor.process((AbstractQueryImpl) query, graphModel); } AttributeModel am = Lookup.getDefault().lookup(AttributeController.class).getModel(); AttributeColumn nodeCol = am.getNodeTable().getColumn(""filter_"" + title); if (nodeCol == null) { nodeCol = am.getNodeTable().addColumn(""filter_"" + title, title, AttributeType.BOOLEAN, AttributeOrigin.COMPUTED, Boolean.FALSE); } AttributeColumn edgeCol = am.getEdgeTable().getColumn(""filter_"" + title); if (edgeCol == null) { edgeCol = am.getEdgeTable().addColumn(""filter_"" + title, title, AttributeType.BOOLEAN, AttributeOrigin.COMPUTED, Boolean.FALSE); } result.readLock(); for (Node n : result.getNodes()) { n.getNodeData().getAttributes().setValue(nodeCol.getIndex(), Boolean.TRUE); } for (Edge e : result.getEdgesAndMetaEdges()) { e.getEdgeData().getAttributes().setValue(edgeCol.getIndex(), Boolean.TRUE); } result.readUnlock(); //StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(FilterControllerImpl.class, ""FilterController.exportToColumn.status"", title)); } "	1	1	1	1	1	0
"private String createSearchResultXML(String sampleType, StringBuilder xml){  String success = VALID;  List<Test> tests = TypeOfSampleUtil.getTestListBySampleTypeId(sampleType, true);  Collections.sort(tests, new Comparator<Test>(){ @Override public int compare(Test t1, Test t2){ if(GenericValidator.isBlankOrNull(t1.getSortOrder()) || GenericValidator.isBlankOrNull(t2.getSortOrder())){ return TestService.getUserLocalizedTestName( t1 ).compareTo(TestService.getUserLocalizedTestName( t2 )); }  try{ int t1Sort = Integer.parseInt(t1.getSortOrder()); int t2Sort = Integer.parseInt(t2.getSortOrder());  if(t1Sort > t2Sort){ return 1; }else if(t1Sort < t2Sort){ return -1; }else{ return 0; }  }catch(NumberFormatException e){ return TestService.getUserLocalizedTestName( t1 ).compareTo(TestService.getUserLocalizedTestName( t2 )); }  } });  if( isVariableTypeOfSample){ xml.append( ""<variableSampleType/>"" ); } addTests(tests, xml);  List<TypeOfSamplePanel> panelList = getPanelList(sampleType); List<PanelTestMap> panelMap = linkTestsToPanels(panelList, tests);  addPanels(panelMap, xml);  return success; } "	0	0	0	0	1	0
public void accept(View view) { mTask.verified = true; finishView(); } 	0	0	0	0	1	0
"public static void loadGlobalConfig() { try { HashMap config = new HashMap();  XmlFile xml = getConfigFile(); if (xml.exists()) { xml.unmarshal(config);  puppetMasterUrl = (String) config.get(""puppetMasterUrl""); puppetMasterCACertificate = (String) config.get(""puppetMasterCACertificate""); } } catch (IOException e) { e.printStackTrace(); } } "	0	1	0	0	0	0
"private static SyndFeed fetchFeed(final Node content) throws IOException, MalformedURLException, FeedException, FetcherException, RepositoryException { Node unescapednode = NodeUtil.unwrap(content); final String feedUrl = PropertyUtil.getString(unescapednode, ""feedUrl"", null); final FeedFetcherCache cache = HashMapFeedInfoCache.getInstance(); final FeedFetcher feedFetcher = new HttpURLFeedFetcher(cache); feedFetcher.setUserAgent(""MagnoliaRSSFeedParagraph/0.1 (Java-ROME 0.9; Magnolia 3.5.4; gato@txstate.edu)"");  return feedFetcher.retrieveFeed(new URL(feedUrl)); } "	0	0	0	0	1	0
public void setPowerScale(String powerScale) { this.powerScale = powerScale; this.powerScaleFloat = Float.parseFloat(powerScale); } 	0	0	0	0	1	0
"private File getMapFile(String name) { return new File(""maps/"" + name + "".ctbmap""); } "	0	0	0	0	1	0
"@Override public void onResponse(Call<TrailersResults> call, Response<TrailersResults> response) {  Log.e(TAG, ""looking for data trailers""); if(!response.isSuccessful()){ Log.e(TAG, ""Unable to connect""); return; }  TrailersResults data = response.body();  posterAdapter.setData(data.getTrailers()); } "	0	0	0	0	1	0
"protected T loadExample(String path) { try (BufferedReader reader = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(path)))) { StringBuilder buffer = new StringBuilder(); String line; while ((line = reader.readLine()) != null) { buffer.append(line); } return parse(buffer.toString()); } catch (IOException ioe) { throw new RuntimeException(String.format(""Failed parsing %s"", path), ioe); } } "	0	0	0	0	1	0
@Override public int getItemCount() { return observableCollectionSubject.getValue() != null ? observableCollectionSubject.getValue().size() : 0; } 	0	0	0	0	1	0
private void setAccountSwitcherVisible(boolean accountSwitcherVisible) { if (accountSwitcherVisible == this.accountSwitcherVisible) return;  this.accountSwitcherVisible = accountSwitcherVisible; drawer.setAccountsVisible(accountSwitcherVisible); accountExpand.setActivated(accountSwitcherVisible); if (!accountSwitcherVisible) { fixNavigationSelection(); } } 	0	0	0	0	1	0
public boolean inRangeOfView(View view, MotionEvent ev) { int[] location = new int[2]; if (view==null||view.getVisibility()!=View.VISIBLE){ return false; } view.getLocationOnScreen(location); int x = location[0]; int y = location[1]; if (ev.getRawX() < x || ev.getRawX() > (x + view.getWidth()) || ev.getRawY() < y || ev.getRawY() > (y + view.getHeight())) { return false; } return true; } 	0	1	0	0	0	0
@Override public void onBookmarkSelected(Bookmark bookmark, View v) { if (mPlayer.isPlaying()) { if (mWaveformView.isBookmarking()) { saveEndBookmarkHistory();  PlayerRecordHistoryFragment historyFragment = (PlayerRecordHistoryFragment) mFragmentPagerAdapter.getPage(1); historyFragment.notifyBookmarkHistoriesUpdate();  if (!current_bookmark.getName().equals(bookmark.getName())){ saveStartBookmarkHistory(bookmark, v); }  } else { saveStartBookmarkHistory(bookmark, v); } } } 	1	0	1	1	1	0
"public void InvalidAcess(){ AlertDialog.Builder builder = new AlertDialog.Builder(LoginActivity.this); builder.setTitle(R.string.emailinvalid); builder.setMessage(R.string.email_invalid) .setCancelable(false) .setPositiveButton(""OK"", new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int id) { return; } }); AlertDialog alert = builder.create(); alert.show(); Button pbutton = alert.getButton(DialogInterface.BUTTON_POSITIVE); pbutton.setTextColor(Color.BLUE); } "	0	0	0	0	1	0
"public int getNextId(String sequence) { try { if (lock.tryLock(10, TimeUnit.SECONDS)) { try { int retries = 5; while (retries-- > 0) { try { Sequence seq = index.find(Sequence.class, sequence); if (seq == null) { seq = new Sequence(); seq.setId(sequence); seq.setNext(1); seq = index.tryUpdate(seq); } int result = seq.getNext(); seq.setNext(result + 1); index.tryUpdate(seq); return result; } catch (OptimisticLockException e) { Exceptions.ignore(e); } } throw Exceptions.handle() .to(IndexAccess.LOG) .withSystemErrorMessage( ""Unable to generate a unique ID for sequence: %s after 5 attempts"", sequence) .handle(); } finally { lock.unlock(); } } else { throw Exceptions.handle() .to(IndexAccess.LOG) .withSystemErrorMessage( ""Unable to to lock critical section of ID generator for sequence: %s"", sequence) .handle(); } } catch (HandledException e) { throw e; } catch (Exception e) { throw Exceptions.handle() .to(IndexAccess.LOG) .error(e) .withSystemErrorMessage(""Unable to generate a unique ID for sequence: %s - %s (%s)"", sequence) .handle(); } } "	0	0	0	0	1	0
"@Test public void addPeriodicSizeHandler() throws Exception { page.addPeriodicSizeHandler(PERIODIC_SIZE_HANDLER_TBA, "".yyyy-MM-dd,HH:mm"");  new ResourceVerifier(PERIODIC_SIZE_HANDLER_TBA_ADDRESS, client).verifyExists(); } "	0	0	0	0	1	0
"public String[][] Retrieve(int size) { //System.out.println(""\nRendering Map...\n""); String[][] N = new String[size][size]; String TRIGGER = ""X"";  Point p = drones.getFirst().position;  for (int x = 0; x < size; x++) { for (int y = 0; y < size; y++) { N[x][y] = TRIGGER; //				Tuple t = map.queryp(new Template(new ActualTemplateField(p.x+x-size/2), new ActualTemplateField(p.y+y-size/2))); //				if (t != null) { //					N[x][y] = TRIGGER; //				} else { //					N[x][y] = ""-""; //				} } } LinkedList<Tuple> list = RetrieveTuples(); for (Tuple t : list) { if (getTupleX(t)-p.x < size/2 && getTupleX(t)-p.x > -size/2 && getTupleY(t)-p.y < size/2 && getTupleY(t)-p.y > -size/2) { if (N[getTupleX(t)-p.x+size/2][getTupleY(t)-p.y+size/2] == TRIGGER) { N[getTupleX(t)-p.x+size/2][getTupleY(t)-p.y+size/2] = t.getElementAt(String.class, 0); } } } return N; } "	0	0	0	0	1	0
"private String addDocument(String document) throws StorageException { RestRequestor restClient = null; try { LOGGER.info(""Will use {} (PUT) to add document"", couchURI); restClient = RestRequestor.put(couchURI + ""/"" + documentId, ""application/json;charset=utf-8"", document.getBytes()); int code = restClient.getResponseCode(); String msg = restClient.getResponseMessage(); LOGGER.debug(""CouchDB responded with {}, {}"", code, msg); if (code != COUCHDB_CREATED_STATUS_CODE) { throw new StorageException(String.format(""Expected database to respond with code 201, got %s. Message is: %s"", code, msg)); } LOGGER.debug(""Saved: \n{}"", document); String revision = readRevision(restClient.getInputStream()); LOGGER.info(""Document saved: id = {} revision = {}"", documentId, revision); return revision; } catch (IOException e) { throw new StorageException(""Error while connecting to the database"", e); } finally { if (restClient != null) { restClient.close(); } } } "	0	1	0	1	1	0
private void setPaymentInstallment() { if (layoutInstallment.getVisibility() == View.VISIBLE) { ((CreditCardFlowActivity) getActivity()).setInstallment(installmentCurrentPosition); } } 	0	0	0	0	1	0
@Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { ViewPager pager = (ViewPager) activity.findViewById(R.id.l_pager); Uri currentUri = ((PreviewPagerAdapter) pager.getAdapter()).getUri(pager.getCurrentItem()); if (!isChecked) { activity.getStateHolder().setChecked(currentUri, false); return; } UncapableCause cause = PhotoMetadataUtils .isAcceptable(activity, spec, currentUri); int currentCount = activity.getStateHolder().getChechedCount(); if (currentCount + 1 > spec.getMaxSelectable()) { cause = UncapableCause.OVER_COUNT; } if (cause == null) { activity.getStateHolder().setChecked(currentUri, true); return; }  ErrorViewResources error = cause.getErrorResources(errorSpec); ErrorViewUtils.showErrorView(activity, error); checkBox.setChecked(false); activity.getStateHolder().setChecked(currentUri, false); } 	0	1	0	0	0	0
@NotNull public FileHolder copy() { usages.incrementAndGet(); return new FileHolder(file, usages); } 	0	0	0	0	1	0
private void doPositionChild(final IPrimitive<?> child) { final int index = layout_keys.toList().indexOf(child.getID()); final Layout childLayout = index > -1 ? layout_values.get(index) : null;  if (null != childLayout) { LayoutBuilder builder = null; switch (childLayout) { case CENTER: builder = CENTER_LAYOUT; break; case TOP: builder = TOP_LAYOUT; break; case LEFT: builder = LEFT_LAYOUT; break; case BOTTOM: builder = BOTTOM_LAYOUT; break; case RIGHT: builder = RIGHT_LAYOUT; break; }  if (null != builder) { builder.layoutIt(child);  // Obtain the original shape's position that made it applicable to the given layout and // apply the increment. child.setX(child.getX() + layout_x.get(index)); child.setY(child.getY() + layout_y.get(index)); } } } 	0	0	0	0	1	0
@Override public HierarchicalStreamReader createReader(final URL in) { try { final Document document = getBuilder().build(in.toExternalForm()); return new XomReader(document, getNameCoder()); } catch (final ValidityException e) { throw new StreamException(e); } catch (final ParsingException e) { throw new StreamException(e); } catch (final IOException e) { throw new StreamException(e); } } 	0	0	0	0	1	0
"private String newPassword(String email){ if(email.equals("""")){ throw new IllegalArgumentException(""email must not be null""); } String pass = RandomStringUtils.randomAlphanumeric(8); //email the employee the password they can use to login  Properties props = new Properties(); Session session = Session.getDefaultInstance(props, null);  String messagebody = String.format(""Dear %s %n"" + ""%n"" + ""Your account is now ready to login and submit availibility at URL %n"" + ""%n"" + ""login: %s %n"" + ""password: %s %n"" + ""%n"" + ""Regards,"" + ""Administration"",getName(), getEmail(), RandomStringUtils.random(8)); try{ Message msg = new MimeMessage(session); msg.setFrom(new InternetAddress(""noreply.unipol.admin@gmail.com"", ""Administration"")); msg.addRecipient(Message.RecipientType.TO, new InternetAddress(getEmail(), getName())); msg.setSubject(""Your account has been activated""); msg.setText(messagebody); Transport.send(msg); } catch (MessagingException | UnsupportedEncodingException ex) { Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex); } //hash the string and set the employee's password to the hashed one. USED SHA256 System.out.println(pass); String hash = DigestUtils.sha256Hex(pass); return hash; } "	0	0	0	0	1	0
"public static void main(String[] args) { // TODO Auto-generated method stub System.out.println(""==hello5-3.""); } "	0	0	0	0	1	0
private String doesResponseContainsDebugErrorMessage (HttpBody body) { if (this.errors == null) { this.errors = loadFile(debugErrorFile); } String sBody = body.toString().toLowerCase(); for (String error : this.errors) { int start = sBody.indexOf(error); if (start >= 0) { // Return the original (case exact) string so we can match it in the response return body.toString().substring(start, start + error.length()); } } return null; } 	0	0	0	0	1	0
public static boolean playerIsAffectedByNormalGravity(EntityPlayerMP player) { if (!(player instanceof FakePlayer)) { NonNullList<ItemStack> armorInventory = player.inventory.armorInventory; int numRequired = ConfigHandler.numNormalGravityEnablersRequiredForNormalGravity; int numNormalGravityEnablers = 0; for (ItemStack stack : armorInventory) { if (stack != null) { if (stack.getItem() instanceof IWeakGravityEnabler) { numNormalGravityEnablers += ConfigHandler.numNormalEnablersWeakEnablersCountsAs; if (numNormalGravityEnablers >= numRequired) { return true; } } // IWeakGravityEnablers cannot have paste applied to them, they're partially made of the paste else if (ItemArmourPaste.hasPasteTag(stack)) { if (++numNormalGravityEnablers >= numRequired) { return true; } } } } if (ModSupport.isModLoaded(ModSupport.BAUBLES_MOD_ID)) { IBaublesItemHandler baublesHandler = BaublesApi.getBaublesHandler(player); int slots = baublesHandler.getSlots(); for (int i = 0; i < slots; i++) { ItemStack stack = baublesHandler.getStackInSlot(i); if (!stack.isEmpty()) { if (stack.getItem() instanceof IWeakGravityEnabler) { numNormalGravityEnablers += ConfigHandler.numNormalEnablersWeakEnablersCountsAs; if (numNormalGravityEnablers >= numRequired) { return true; } } // IWeakGravityEnablers cannot have paste applied to them, they're partially made of the paste else if (ItemArmourPaste.hasPasteTag(stack)) { if (++numNormalGravityEnablers >= numRequired) { return true; } } } }  } } return false; } 	1	0	1	1	1	0
"public static HttpQueryParams parse(String queryString) { HttpQueryParams queryParams = new HttpQueryParams(); if (queryString == null) { return queryParams; }  StringTokenizer st = new StringTokenizer(queryString, ""&""); int i; while (st.hasMoreTokens()) { String s = st.nextToken(); i = s.indexOf(""=""); if (i > 0 && s.length() > i + 1) { String name = s.substring(0, i); String value = s.substring(i + 1);  try { name = URLDecoder.decode(name, ""UTF-8""); value = URLDecoder.decode(value, ""UTF-8""); } catch (Exception e) { } try {  } catch (Exception e) { }  queryParams.add(name, value); } }  return queryParams; } "	1	1	1	1	1	0
public void deleteCommand(long cid) throws IOException { // Delete from DB // Remove from Cache if (cmdsAll.containsKey(cid)) { // Command is finished, then return CommandInfo cmdinfo = cmdsAll.get(cid); // Disable this command in cache if (inExecutingList(cid)) { // Remove from Executing queue removeFromExecuting(cid, cmdinfo.getRid(), cmdinfo.getState()); // Kill thread execThreadPool.deleteCommand(cid); } else if (inUpdateCache(cid)) { RemoveFromUpdateCache(cid); } else { // Remove from Pending queue cmdsInState.get(CommandState.PENDING.getValue()).remove(cid); } // Mark as cancelled, this status will be update to DB // in next batch update cmdsAll.remove(cid); } try { adapter.deleteCommand(cid); } catch (SQLException e) { throw new IOException(e); } } 	0	0	0	0	1	0
private void makeBackup(JcrSession session, BackupOptions options) throws RepositoryException { TestingUtil.waitUntilFolderCleanedUp(backupDirectory.getPath()); Problems problems = session.getWorkspace().getRepositoryManager().backupRepository(backupDirectory, options); assertNoProblems(problems); } 	0	0	0	0	1	0
"@Override public CharSequence getPageTitle(int position) { if (0 < position && position < mPages.length) { return mContext.getString(mPages[position]); } else { return """"; } } "	1	0	1	1	1	0
"public String edit(int targetIndex, String[] args) throws IllegalEditException, TaskNotFoundException, IllegalValueException { assert targetIndex >= 0; Task editTask;  try{ editTask = internalList.get(targetIndex); }catch(IndexOutOfBoundsException ioobe){ throw new TaskNotFoundException(); }  for(int i = 0; i<args.length; i++){ if(!(args[i]==null)){ switch(i){ case 0: editTask.setName(args[i]);break; case 1: if(editTask.getIsTask()){ editTask.setDueDate(args[i]); }else{ throw new IllegalEditException(); }break; case 2: if(editTask.getIsEvent()){ editTask.setStartTime(args[i]); }else{ throw new IllegalEditException(); }break; case 3: if(editTask.getIsEvent()){ editTask.setEndTime(args[i]); }else{ throw new IllegalEditException(); }break; } } } internalList.set(targetIndex, editTask);  if(editTask.getIsEvent()){ return DateTimeInfoParser.durationOfTheEvent(editTask.getStartTime().toString(), editTask.getEndTime().toString()); }else{ return """"; }  } "	0	1	0	0	0	0
"private Writable createWritablePrimitive(Object obj, CarbonColumn carbonColumn) throws IOException { DataType dataType = carbonColumn.getDataType(); if (obj == null) { return null; } switch (dataType) { case NULL: return null; case DOUBLE: return new DoubleWritable((double) obj); case INT: return new IntWritable((int) obj); case LONG: return new LongWritable((long) obj); case SHORT: return new ShortWritable((Short) obj); case DATE: return new DateWritable(new Date((Integer) obj)); case TIMESTAMP: return new TimestampWritable(new Timestamp((long) obj / 1000)); case STRING: return new Text(obj.toString()); case DECIMAL: return new HiveDecimalWritable( HiveDecimal.create(new java.math.BigDecimal(obj.toString()))); default: throw new IOException(""unsupported data type:"" + dataType); } } "	0	0	0	0	1	0
@Nullable public static Beam from(@NotNull FileContent fileContent) throws IOException, OtpErlangDecodeException { return from(fileContent.getContent()); } 	0	0	0	0	1	0
void processRecord(SAMRecord record) { if (isWrongSequence(record)) { mismatchedSequence++; return; } if (record.getAlignmentStart() < shard.contig.start) { recordsBeforeStart++; return; } if (record.getAlignmentStart() > shard.contig.end) { recordsAfterEnd++; return; } c.output(ReadConverter.makeRead(record)); recordsProcessed++; } 	1	0	1	1	1	0
"@Override public HealthCheckResponse call() {  if (count == 1) { count++; return HealthCheckResponse.named(""testJsonRecieved"").up().build(); } else if (count == 2) { count++; return HealthCheckResponse.named(""testSingleOutcomeUP"").up().build(); } else if (count == 3) { count++; return HealthCheckResponse.named(""testSingleOutcomeDOWN"").down().build(); } else if (count == 4) { count++; return HealthCheckResponse.named(""testCheckUPWithData"").withData(""CPU"", ""online"").withData(""Fan"", ""functional"").up().build();  } else if (count == 5) { count++; return HealthCheckResponse.named(""testCheckDOWNWithData"").withData(""CPU"", ""offline"").withData(""Fan"", ""failed"").down().build(); } else { return HealthCheckResponse.named(""something is not right in the app"").up().withData(""count"", count).build(); } } "	0	1	1	0	1	0
"@Override public View onCreateView(final LayoutInflater inflater, final ViewGroup container, final Bundle savedInstanceState) { final View view = inflater.inflate(R.layout.fragment_spent_effort, null); ButterKnife.bind(this, view); final Date time = Calendar.getInstance().getTime(); final String formattedDate = dateFormatter.format(time);  mDateInput.setText(formattedDate);  final EditText mResponsiblesInput = (EditText) view.findViewById(R.id.responsibles); mResponsiblesInput.setText(userService.getLoggedUser().getInitials());  mEffortLeftInput = (EditText) view.findViewById(R.id.effort_left); mEffortLeftInput.setText(String.valueOf((float) task.getEffortLeft() / MINUTES));  if (minutesSpent != -1) { final float difference = (task.getEffortLeft() - minutesSpent) / 60.0f;  mHoursInput.setText(HoursUtils.convertMinutesToHours(minutesSpent)); mEffortLeftInput.setText(String.valueOf(difference < 0 ? 0 : difference)); }  final ImageButton mTriggerPickerButton = (ImageButton) view.findViewById(R.id.datepicker_button); mTriggerPickerButton.setOnClickListener(new OnClickListener() {  @Override public void onClick(final View v) { final DateTimePickerDialogFragment dateTimePickerDialogFragment = DateTimePickerDialogFragment.newInstance(); dateTimePickerDialogFragment.setOnDateSetListener(new OnDateSetListener() {  @Override public void onDateSet(final Date date) { final String formattedDate = DateUtils.formatDate(date, DATE_PATTERN); mDateInput.setText(formattedDate); } });  dateTimePickerDialogFragment.show(SpentEffortFragment.this.getFragmentManager(), ""datePickerDialog""); } });  final Button mSubmitButton = (Button) view.findViewById(R.id.submit_btn); mSubmitButton.setOnClickListener(getOnClickListener());  return view; } "	0	0	0	0	1	0
"@Nonnull public static Map<String, Integer> parseFormula(String formula) {  Map<String, Integer> parsedFormula = new Hashtable<String, Integer>();  Pattern pattern = Pattern.compile(""([A-Z][a-z]?)(-?[0-9]*)""); Matcher matcher = pattern.matcher(formula);  while (matcher.find()) { String element = matcher.group(1); String countString = matcher.group(2); int addCount = 1; if (countString.length() > 0) addCount = Integer.parseInt(countString); int currentCount = 0; if (parsedFormula.containsKey(element)) { currentCount = parsedFormula.get(element); } int newCount = currentCount + addCount; parsedFormula.put(element, newCount); } return parsedFormula; } "	0	1	0	1	1	0
public static boolean canUseName(Player player, String name) { String shortenedName = NameUtil.stripUsername(getUsername(player.getUniqueId()));  if (ChestShopSign.isAdminShop(name)) { return false; }  return shortenedName.equals(name) || Permission.otherName(player, name) || (!name.isEmpty() && player.getUniqueId().equals(getUUID(name))); } 	0	0	0	0	1	0
public static void setSelectedAppointment(EventDutyDTO eventDutyDTO) { for (Map.Entry<Agenda.Appointment, EventDutyDTO> entry : staticLoadedEventsMap.entrySet()) { if (eventDutyDTO.getEventDutyId() == entry.getValue().getEventDutyId()) { staticAgenda.selectedAppointments().clear(); staticAgenda.selectedAppointments().add(entry.getKey()); } } } 	0	1	1	0	1	0
"@Test @SuppressWarnings(""PMD.JUnitTestsShouldIncludeAssert"") public void testClickOnCreateWebCameraOpensDialog() throws Exception { Platform.runLater(() -> addSourceView.getMenuButton().fire()); WaitForAsyncUtils.waitForFxEvents(); verifyThat('.' + AddSourceView.SOURCE_DIALOG_STYLE_CLASS, NodeMatchers.isVisible()); } "	0	0	0	0	1	0
"@Override public ContentWizardPanel waitUntilWizardOpened() { boolean result = waitUntilVisibleNoException( By.xpath( DIV_CONTENT_WIZARD_PANEL ), 5 ); if ( !result ) { TestUtils.saveScreenshot( getSession(), NameHelper.uniqueName( ""err_wizard"" ) ); throw new TestFrameworkException( ""ContentWizard was not showed!"" ); } return this; } "	0	0	0	0	1	0
private void insertEachTemplate(int index, XSSFEvaluationWorkbook wbWrapper, Sheet sheet, int insertPosition, List<Integer> watchList, RowsMapping unitRowsMapping, CellHelper cellHelper) { // TODO Auto-generated method stub int srcStartRow =  this.getConfigRange().getFirstRowAddr().getRow(); int srcEndRow = this.getConfigRange().getLastRowPlusAddr().getRow() - 1;  Workbook wb = sheet.getWorkbook(); // excel sheet name has limit 31 chars String copyName = (COPY_SHEET_PREFIX + sheet.getSheetName()); if (copyName.length() >  EXCEL_SHEET_NAME_LIMIT) { copyName = copyName.substring(0, EXCEL_SHEET_NAME_LIMIT); } Sheet srcSheet = wb.getSheet(copyName); if (index > 0) { cellHelper.copyRows(sheet.getWorkbook(), wbWrapper,srcSheet, sheet, srcStartRow, srcEndRow, insertPosition); }  for (int rowIndex= srcStartRow; rowIndex<= srcEndRow; rowIndex++) { if (watchList.contains(rowIndex)&&(this.getConfigRange().isStaticRow(rowIndex))) { unitRowsMapping.addRow(rowIndex, sheet.getRow(insertPosition + rowIndex - srcStartRow)); } } } 	0	1	0	0	0	0
public static void main(String[] args) { System.out.println(generateCode(6)); } 	0	0	0	0	1	0
"@Override public List<BookTour> cancelListByValue(String value, int idTour) { Session session = getCurrentSession(); String hql = ""FROM BookTour WHERE ID_TOUR := idTour AND CUS_CANCEL = true AND (cusName LIKE :value OR cusEmail LIKE :value OR cusPhone LIKE :value OR cusIdCard LIKE :value)""; Query query = session.createQuery(hql); query.setParameter(""idTour"", idTour); query.setParameter(""value"", ""%"" + value + ""%""); @SuppressWarnings(""unchecked"") List<BookTour> cancelList = query.list(); return cancelList; } "	0	0	0	0	1	0
"public synchronized void switchEarthView() { //This method will switch between Earth ""modes"", the modes being either Mini or Large //Needs to be synchronized, since it will be removing and adding nodes while the program is running //In my example, I am using BorderLayout and I switching between displaying the mini Earth in the //left pane and the large Earth in the center. //The large Earth responds to scrolling, the mini Earth does not and should simply rotate continuously. if (fullEarth) { centerGrid.getChildren().remove(earthViewer.getLargeEarth()); leftBarGrid.getChildren().add(earthViewer.getMiniEarth()); fullEarth = false; } else { leftBarGrid.getChildren().remove(0); //initCenter(); centerGrid.getChildren().add((earthViewer.getLargeEarth())); earthViewer.startEarth(); fullEarth = true; } } "	0	0	0	0	1	0
"@Test public void testSetBuildNumber() throws Exception { Version version = new Version(""1.2""); version.setBuildNumber( ""1"" ); assertThat( version.getOSGiVersionString(), equalTo( ""1.2.0.1"" ) );  version = new Version(""1.2beta11""); version.setBuildNumber( ""12"" ); assertThat( version.getOSGiVersionString(), equalTo( ""1.2.0.beta-12"" ) );  version = new Version(""1.2.3.5""); version.setBuildNumber( ""8"" ); assertThat( version.getOSGiVersionString(), equalTo( ""1.2.3.8"" ) );  version = new Version(""1.2-SNAPSHOT""); version.setBuildNumber( ""1"" ); assertThat( version.getOSGiVersionString(), equalTo( ""1.2.0.1-SNAPSHOT"" ) );  version = new Version(""1.2-jboss-9-foo""); version.setBuildNumber( ""10"" ); assertThat( version.getOSGiVersionString(), equalTo( ""1.2.0.jboss-9-foo-10"" ) );  version = new Version(""1.2.1.Final-jboss-8""); version.setBuildNumber( ""9"" ); assertThat( version.getOSGiVersionString(), equalTo( ""1.2.1.Final-jboss-9"" ) );  version = new Version(""1.2.0-GA""); version.appendQualifierSuffix( ""foo"" ); version.setBuildNumber( ""2"" ); assertThat( version.getOSGiVersionString(), equalTo( ""1.2.0.GA-foo-2"" ) ); } "	0	1	1	1	1	0
public static SymbolContainer createSymbolsWithBreak() { SymbolContainer symbolContainer = createSymbolContainer();  symbolContainer.add(NoteSymbolTestDataFactory.createNoteSymbol(NoteLength.QUARTER, NoteName.C4)); symbolContainer.add(NoteSymbolTestDataFactory.createNoteSymbol(NoteLength.QUARTER, NoteName.E4)); symbolContainer.add(BreakSymbolTestDataFactory.createBreakSymbol(NoteLength.QUARTER)); symbolContainer.add(NoteSymbolTestDataFactory.createNoteSymbol(NoteLength.QUARTER, NoteName.C4));  return symbolContainer; } 	0	0	0	0	1	0
"public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws IOException, ServletException { HttpServletRequest request = (HttpServletRequest) req; HttpServletResponse response = (HttpServletResponse) resp;  String servPath = request.getServletPath(); System.out.println(""IndexFilter: "" + servPath);  if (servPath.equals("""")) { response.sendRedirect(request.getContextPath() + ""/index.xhtml""); return; } else if(servPath.equals(""/index.xhtml"")) { if(loginController.isVerified()) { response.sendRedirect(request.getContextPath() + ""/user/feed.xhtml""); return; } }  chain.doFilter(req, resp); } "	0	0	0	0	1	0
@Override protected void sendData(Object data) { String json = populateMap(data).toString(); getSession().getAsyncRemote().sendText(json); } 	0	0	0	0	1	0
public Variable getOutVariable(int i) { Verify.verify(this.returnVariables.size() >= 2 && i>=0 && i<this.returnVariables.size()); return this.returnVariables.get(i); } 	0	0	0	0	1	0
"@Test public void testLocalDateToYyyyMMdd() throws Exception { LocalDate firstDate = LocalDate.of(2010, 5, 17); Assert.assertEquals(""2010-05-17"", MeteoDateUtils.zonedDateTimeToYyyyMMdd(firstDate));  } "	0	0	0	0	1	0
"public static void captureEvent(SentryEventBuilder builder) { final Sentry sentry = Sentry.getInstance(); final SentryEventRequest request; builder.event.put(""contexts"", sentry.contexts); builder.setRelease(sentry.appInfo.versionName); builder.event.put(""breadcrumbs"", Sentry.getInstance().breadcrumbs.current()); if (sentry.captureListener != null) {  builder = sentry.captureListener.beforeCapture(builder); if (builder == null) { Log.e(Sentry.TAG, ""SentryEventBuilder in captureEvent is null""); return; } }  request = new SentryEventRequest(builder);  log(""Request - "" + request.requestData);  doCaptureEventPost(request); } "	0	0	0	0	1	0
private void initViews() { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE); View view = inflater.inflate(R.layout.ultimate_recycler_view_layout, this); mRecyclerView = (RecyclerView) view.findViewById(R.id.ultimate_list); mSwipeRefreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.swipe_refresh_layout); mSwipeRefreshLayout.setEnabled(false);  if (mRecyclerView != null) {  mRecyclerView.setClipToPadding(mClipToPadding); if (mPadding != -1.1f) { mRecyclerView.setPadding(mPadding, mPadding, mPadding, mPadding); } else { mRecyclerView.setPadding(mPaddingLeft, mPaddingTop, mPaddingRight, mPaddingBottom); } }  defaultFloatingActionButton = (FloatingActionButton) view.findViewById(R.id.defaultFloatingActionButton); setDefaultScrollListener();  mEmpty = (ViewStub) view.findViewById(R.id.emptyview); mFloatingButtonViewStub = (ViewStub) view.findViewById(R.id.floatingActionViewStub);  mEmpty.setLayoutResource(mEmptyId);  mFloatingButtonViewStub.setLayoutResource(mFloatingButtonId);  if (mEmptyId != 0) mEmptyView = mEmpty.inflate(); mEmpty.setVisibility(View.GONE);  if (mFloatingButtonId != 0) { mFloatingButtonView = mFloatingButtonViewStub.inflate(); mFloatingButtonView.setVisibility(View.VISIBLE); }   } 	0	1	0	0	0	0
"public static InptData getExportFlgTrueExisInData() {  InptData inptData = new InptData();  inptData.setCompanyName(""CompanyName""); inptData.setClassifyCdName(""ClassifyCdName""); inptData.setBrandName(""BrandName""); inptData.setSubsidiaryName(""SubsidiaryName""); inptData.setSubsidiaryAddress_1(""SubsidiaryAddress_1""); inptData.setSubsidiaryAddress_2(""SubsidiaryAddress_2""); inptData.setSubsidiaryAddress_3(""SubsidiaryAddress_3""); inptData.setSubsidiaryAddress_4(""SubsidiaryAddress_4""); inptData.setCountryName(""CountryName""); inptData.setCustName(""CustName""); inptData.setCustHalfwidthAddress_1(""CustHalfwidthAddress_1""); inptData.setCustHalfwidthAddress_2(""CustHalfwidthAddress_2""); inptData.setCustHalfwidthAddress_3(""CustHalfwidthAddress_3""); inptData.setCustHalfwidthAddress_4(""CustHalfwidthAddress_4""); inptData.setCustCountryName(""CustCountryName""); inptData.setBillToName(""BillToName""); inptData.setBillToHalfwidthAddress_1(""BillToHalfwidthAddress_1""); inptData.setBillToHalfwidthAddress_2(""BillToHalfwidthAddress_2""); inptData.setBillToHalfwidthAddress_3(""BillToHalfwidthAddress_3""); inptData.setBillToHalfwidthAddress_4(""BillToHalfwidthAddress_4""); inptData.setBillToCountryName(""BillToCountryName""); inptData.setCustomerCustName(""CustomerCustName""); inptData.setSubsidiaryShipToName(""SubsidiaryShipToName""); inptData.setProductName(""ProductName""); // 得意先マスタ.商品名（英語）; inptData.setOriginCountryName(""OriginCountryName"");  return inptData; } "	0	0	0	0	1	0
@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; if (!super.equals(o)) return false;  TimeTreeConfiguration that = (TimeTreeConfiguration) o;  if (autoAttach != that.autoAttach) return false; if (!relationshipType.equals(that.relationshipType)) return false; if (resolution != that.resolution) return false; if (!timeZone.equals(that.timeZone)) return false; if (!timestampProperty.equals(that.timestampProperty)) return false;  return true; } 	0	0	0	0	1	0
"public static Action getStopAction(final JmeSpatial Spatial) { return new AbstractAction(""Stop All"") { @Override public void actionPerformed(ActionEvent e) { if (Spatial != null) { Spatial.setEnabled(false); } } }; } "	0	0	0	0	1	0
private synchronized void fail() { current = ++current % afterFailedLogins; long firstFail = tries[current]; long now = tries[current] = System.currentTimeMillis(); if (firstFail == 0) return; if (now - firstFail < afterFailedLoginsWithin) blockedUntil = now + blockFor; } 	0	0	0	0	1	0
"@Test public void run() throws InterruptedException { AccountBlocker ab = new AccountBlocker(); ab.setBlockFor(1000); ab.setAfterFailedLoginsWithin(1000); ab.setAfterFailedLogins(9);  for (int i = 1; i <= 10 ; i++) { Assert.isTrue(!ab.isBlocked(""foo""), ""login should not be blocked in loop "" + i); ab.fail(""foo""); } Assert.isTrue(ab.isBlocked(""foo""));  Thread.sleep(2000);  for (int i = 1; i <= 10 ; i++) { Assert.isTrue(!ab.isBlocked(""foo""), ""login should not be blocked in loop "" + i); ab.fail(""foo""); } Assert.isTrue(ab.isBlocked(""foo""));  } "	1	1	1	1	1	0
"@Override public void start(final Scene scene) { GameInfo gi = GameInfo.getInstance(); if(!gi.getPlayerMode().equals(PlayerMode.SINGLE_PLAYER)) { totalScore.setVisible(false); p1Score.setText(""Score player 1: "" + gi.getPlayer1Score()); p2Score.setText(""Score player 2: "" + gi.getPlayer2Score()); p1Score.setVisible(true); p2Score.setVisible(true); } } "	0	1	0	0	0	0
"private DataStore createDataStore(Integer timeout) throws OdsException { Map<String, Object> connectionParameters = new HashMap<>(); URL capabilitiesUrl = WFSDataStoreFactory .createGetCapabilitiesRequest(getUrl()); connectionParameters.put(URL.key, capabilitiesUrl); if (timeout > 0) { connectionParameters.put(TIMEOUT.key, timeout); } connectionParameters.put(BUFFER_SIZE.key, 1000); connectionParameters.put(PROTOCOL.key, false); DataStore ds; try { ds = DataStoreFinder.getDataStore(connectionParameters); } catch (UnknownHostException e) { String msg = I18n.tr(""Host {0} ({1}) doesn't exist"", getName(), getUrl().getHost()); hostException = new OdsException(msg); throw hostException; } catch (SocketTimeoutException e) { String msg = I18n.tr(""Host {0} ({1}) timed out when trying to open the datastore"", getName(), getUrl().toString()); hostException = new OdsException(msg); throw hostException; } catch (FileNotFoundException e) { String msg = I18n.tr(""No dataStore for Host {0} could be found at this url: {1}"", getName(), getUrl().toString()); hostException = new OdsException(msg); throw hostException; } catch (IOException e) { String msg = I18n.tr(""No dataStore for Host {0} ({1}) could be created"", getName(), getUrl().toString()); hostException = new OdsException(msg); throw hostException; } return ds; } "	1	1	1	1	1	0
"public String getFile(String location) { String content = """"; try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); dbxClient.getFile(location, null, outputStream); content = outputStream.toString(); outputStream.close(); } catch (DbxException e) { Logger.instance.error(Logger.stack2String(e)); } catch (IOException e) { Logger.instance.error(Logger.stack2String(e)); } return content; } "	0	1	1	0	1	0
"private void updatePlayer(Context context, InfoWindow window) { PlayerProfile player = context.getApi().getPlayerProfile(); long runTime = System.currentTimeMillis() - PokeMate.startTime; try { double nextXP = requiredXp[player.getStats().getLevel()] - requiredXp[player.getStats().getLevel() - 1]; double curLevelXP = player.getStats().getExperience() - requiredXp[player.getStats().getLevel() - 1]; long curTotalXP = player.getStats().getExperience(); if (curTotalXP > lastExperience) { if (lastExperience != 0) { experienceGained += curTotalXP - lastExperience; } lastExperience = curTotalXP; }  String ratio = new DecimalFormat(""#0.00"").format(curLevelXP / nextXP * 100.D); window.setContent(""<h4>"" + player.getPlayerData().getUsername() + ""</h4><h5>Current Level: "" + player.getStats().getLevel() + "" - Progress: "" + ratio + ""%</h5><h5>XP/Hour: "" + new DecimalFormat(""###,###,###"").format((experienceGained / (runTime / 3.6E6))) + ""</h5><h5>XP to next level: "" + new DecimalFormat(""###,###,###"").format(nextXP - curLevelXP) + ""</h5><h5>Runtime: "" + millisToTimeString(runTime) + ""</h5>""); }  catch (LoginFailedException | RemoteServerException e) { e.printStackTrace(); } } "	1	0	1	0	1	0
"private void markKnownSuspendable(String methodname, String desc, SuspendableType sus) { final MethodNode method = getOrCreateMethodNode(className + '.' + methodname + desc); method.owner = className; method.inProject |= inProject; method.suspendType = max(method.suspendType, sus); method.known = true;  if (auto || inProject) knownSuspendablesOrSupers.add(method);  log(""Known suspendable "" + className + '.' + methodname + desc, Project.MSG_VERBOSE); } "	0	1	0	0	0	0
@Override public AsyncStage<String> create(T item, Stat storingStatIn) { long dirtyZxid = getDirtyZxid(); byte[] bytes = model.serializer().serialize(item); AsyncStage<String> asyncStage = dslClient.create().withOptions(model.createOptions(), model.createMode(), fixAclList(model.aclList()), storingStatIn).forPath(model.path().fullPath(), bytes); ModelStage<String> modelStage = new ModelStage<>(asyncStage.event()); markDirtyCompleter(dirtyZxid, asyncStage, modelStage); return modelStage; } 	1	0	1	0	1	0
"private void initIO() throws Exception { io = ioProvider.open(key, name, false); if (io == null) { K backup = ioProvider.buildKey(key, ""bkp""); if (ioProvider.exists(backup)) { ioProvider.moveTo(backup, key); io = ioProvider.open(key, name, false); if (io == null) { throw new IllegalStateException(""Failed to recover backup WAL "" + name); } } else { io = ioProvider.open(key, name, true); if (io == null) { throw new IllegalStateException(""Failed to initialize WAL "" + name); } } } } "	0	1	0	0	0	0
"public JSONObject deleteDatasource(String dsName, String stage, String applicationKey) throws Exception { Map<String, String> msgBody = new HashMap<String, String>(); msgBody.put(REQUEST_KEY_ACTION, DELETE_DATASOURCE); msgBody.put(DATASOURCE_NAME, dsName); msgBody.put(STAGE, stage); msgBody.put(APP_KEY, applicationKey); HttpResponse response = doPostRequest(APPMGT_DATASOURCE_ADD, msgBody); if (response.getResponseCode() == HttpStatus.SC_OK) { checkErrors(response); return new JSONObject(response.getData()); } else { throw new AFIntegrationTestException(""Error occurred while deleting a new datasource :"" + response.getResponseCode() + response.getData()); } } "	0	1	0	0	0	0
private void setBarColor(final double VALUE) { if (!sectionsVisible && !colorGradientEnabled) { dataBar.setFill(getSkinnable().getBarColor()); } else if (colorGradientEnabled && noOfGradientStops > 1) { dataBar.setFill(getSkinnable().getGradientLookup().getColorAt(VALUE / range)); } else { for (Section section : sections) { if (section.contains(VALUE)) { dataBar.setFill(section.getColor()); break; } } } } 	0	1	0	0	0	0
private void buildTags(String str) { if (str.length() != 0) { updateTags(str);  SpannableStringBuilder sb = new SpannableStringBuilder(); for (final TagSpan tagSpan : mTagSpans) { addTagSpan(sb, tagSpan); }  int size = mTags.size(); for (int i = mTagSpans.size(); i < size; i++) { Tag tag = mTags.get(i); String source = tag.getSource(); if (tag.isSpan()) { TextView tv = createTextView(source); Drawable bd = convertViewToDrawable(tv); bd.setBounds(0, 0, bd.getIntrinsicWidth(), bd.getIntrinsicHeight()); final TagSpan span = new TagSpan(bd, source); addTagSpan(sb, span); span.setTag(tag); mTagSpans.add(span); } else { sb.append(source); } }  getText().clear(); getText().append(sb); setMovementMethod(LinkMovementMethod.getInstance()); setSelection(sb.length()); if (mListener != null && !str.equals(mLastString)) { mListener.onTagsChanged(convertTagSpanToString(mTagSpans)); } } } 	0	1	0	0	0	0
@Override public Vector computeAcceleration() { Vector distance = position.minus(getBox().getCenter()); return distance.times(getMass() * 2000 / (distance.norm() * distance.norm() * distance.norm())); } 	1	1	1	1	0	0
"private void update(Username currentUser, LocalizedOperationResult result, EntityConfigUpdateCommand command, PipelineTemplateConfig templateConfig) { try { goConfigService.updateConfig(command, currentUser); } catch (Exception e) { if (e instanceof GoConfigInvalidException) { result.unprocessableEntity(LocalizedMessage.string(""ENTITY_CONFIG_VALIDATION_FAILED"", templateConfig.getClass().getAnnotation(ConfigTag.class).value(), templateConfig.name(), e.getMessage())); } else { if (!result.hasMessage()) { LOGGER.error(e.getMessage(), e); result.internalServerError(LocalizedMessage.string(""SAVE_FAILED_WITH_REASON"", ""An error occurred while saving the template config. Please check the logs for more information."")); } } } } "	0	1	0	0	0	0
"public Object getObjectByQualification(String query) throws DfException { if (Strings.isNullOrEmpty(query)) { return null; } try (Connection connection = getConnection(); Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(""SELECT * FROM "" + query)) { // Documentum returns the CURRENT version. To emulate the // behavior, rs.last() is used in mocks. if (rs.last()) { if (query.toLowerCase().startsWith(""dm_user "")) { return Proxies.newProxyInstance(IDfUser.class, new UserMock(rs)); } else if (query.toLowerCase().startsWith(""dm_group "")) { return Proxies.newProxyInstance(IDfGroup.class, new GroupMock(rs)); } else if (query.toLowerCase().startsWith(""dm_sysobject "")) { String idPrefix = ""i_chronicle_id = '""; int index = query.toLowerCase(ENGLISH).indexOf(idPrefix); if (index == -1) { return null; } else { String id = query.substring(index + idPrefix.length(), query.length() - 1); if (id.startsWith(""09"")) { return Proxies.newProxyInstance(IDfSysObject.class, new SysObjectMock(rs)); } else if (id.startsWith(""0b"")) { return getFolderBySpecification(id); } } } } return null; } catch (SQLException e) { throw new DfException(e); } } "	0	1	0	0	0	0
@Override public int getByte(String input, long offset) { char c = input.charAt((int)offset); if (c >= 'A' && c <= 'Z') { return c += 32; // toLower } return c; } 	0	1	0	1	1	0
"private List<IRI> findUniqueSubjects(List<OWLOntologyChange> changes) { List<IRI> result = new ArrayList<IRI>(); for (OWLOntologyChange change : changes) { if (change.isAxiomChange()) {  OWLAxiom ax = change.getAxiom(); IRI subj = null;  if (ax instanceof OWLAnnotationAssertionAxiom) { subj = (IRI) ((OWLAnnotationAssertionAxiom) ax).getSubject(); System.out.println(""The subject is: "" + subj);  } else if (ax instanceof OWLSubClassOfAxiom) { subj = ((OWLSubClassOfAxiom) ax).getSubClass().asOWLClass().getIRI(); System.out.println(""The subject is: "" + subj); } else if (ax instanceof OWLEquivalentClassesAxiom) { Set<OWLClassExpression> exps = ((OWLEquivalentClassesAxiom) ax).getClassExpressions(); for (OWLClassExpression exp : exps) { if (exp instanceof OWLClass) { subj = exp.asOWLClass().getIRI(); break; } } System.out.println(""The subject is: "" + subj);  } if (subj != null && subj instanceof OWLClass) { if (result.contains(subj)) { } else { result.add(subj); } } } } return result; } "	1	0	1	0	1	0
public String getProvideDesc() { return t.getReal().provideDesc; } 	1	0	1	1	1	0
"public Map<String, Map<String, Set<Campaign.Role>>> getCampaignAndRolesForUserSet( final Set<String> userSet) throws DataAccessException {  if (userSet == null || userSet.size() == 0) throw new DataAccessException(""userList list is empty"");  StringBuilder sql = new StringBuilder( ""select u.username, c.urn, GROUP_CONCAT(ur.role SEPARATOR ',') roles "" + ""from user u join user_role_campaign urc on (u.id = urc.user_id) ""+ ""join campaign c on (c.id = urc.campaign_id) "" + ""join user_role ur on (ur.id = urc.user_role_id) "" + ""WHERE "" + ""u.username in ""); sql.append(StringUtils.generateStatementPList(userSet.size())); sql.append(     "" GROUP BY u.username, c.urn"");  List<Object> parameters = new LinkedList<Object>(); parameters.addAll(userSet);  try { final Map<String, Map<String, Set<Campaign.Role>>> userCampaignRoleMap = new HashMap<String, Map<String, Set<Campaign.Role>>>();  getJdbcTemplate().query( sql.toString(), parameters.toArray(), new RowMapper<Object>() { @Override public Object mapRow(final ResultSet rs, final int rowNum) throws SQLException { try {  String username = rs.getString(""username""); String urn = rs.getString(""urn""); String roles = rs.getString(""roles"");  // create Campaign.roles Set<Campaign.Role> croles = new HashSet<Campaign.Role>(); for (String eachRole : roles.split("";"")) { try { croles.add(Campaign.Role.getValue(eachRole)); } catch (IllegalArgumentException e) { throw new SQLException(""The role is invalid:"", eachRole); } }  Map<String, Set<Campaign.Role>> campaignRoles = userCampaignRoleMap.get(username); if (campaignRoles == null) { campaignRoles = new HashMap<String, Set<Campaign.Role>>(); userCampaignRoleMap.put(username, campaignRoles); } campaignRoles.put(urn,croles); return null; } catch (Exception e) { throw new SQLException(""Can't create a role with parameters: "" + rs.getString(""username"") + "","" + rs.getString(""urn"") + "","" + rs.getString(""roles""), e); } } } ); return userCampaignRoleMap; } catch(org.springframework.dao.DataAccessException e) { throw new DataAccessException(""Error executing SQL '"" + sql.toString() + ""' with parameters: "" + userSet.toString(), e); }  } "	0	1	1	1	1	0
@Override public boolean shouldUseScanner(Scan scan, Store store, long oldestUnexpiredTS) { return shouldSeek(scan, oldestUnexpiredTS); } 	1	0	1	1	1	0
"@Test public void shouldDecodeOgg() throws UnsupportedAudioFileException, IOException { // given URL resource = getClass().getClassLoader().getResource(""10s_silence.ogg""); File oggFile = new File(resource.getFile());  // when AudioInputStream decodedStream = new OggAudioFileDecoder(normalizer).decode(oggFile);  // then assertThat(decodedStream.getFormat().getEncoding(), is(AudioFormat.Encoding.PCM_SIGNED)); assertThat(decodedStream.getFormat().getChannels(), is(2)); assertThat(decodedStream.getFormat().getFrameRate(), is(44100f)); assertThat(decodedStream.getFormat().getFrameSize(), is(4)); assertThat(decodedStream.getFormat().getSampleRate(), is(44100f)); assertThat(decodedStream.getFormat().getSampleSizeInBits(), is(16)); } "	1	0	1	0	1	0
"@Test public void shouldDecodeAac() throws UnsupportedAudioFileException, IOException { // given URL resource = getClass().getClassLoader().getResource(""10s_silence.aac""); File aacFile = new File(resource.getFile());  // when AudioInputStream decodedStream = new AacAudioFileDecoder(audioStandardizer).decode(aacFile);  // then assertThat(decodedStream.getFormat().getEncoding(), is(AudioFormat.Encoding.PCM_SIGNED)); assertThat(decodedStream.getFormat().getChannels(), is(2)); assertThat(decodedStream.getFormat().getFrameRate(), is(44100f)); assertThat(decodedStream.getFormat().getFrameSize(), is(4)); assertThat(decodedStream.getFormat().getSampleRate(), is(44100f)); assertThat(decodedStream.getFormat().getSampleSizeInBits(), is(16)); } "	1	0	1	0	1	0
"@Path(""/connections/{connection-id}/s3/buckets/{bucket-name}/specification"") @GET public void specification(HttpServiceRequest request, final HttpServiceResponder responder, @PathParam(""connection-id"") String connectionId, @PathParam(""bucket-name"") String bucketName, @QueryParam(""key"") final String key) { JsonObject response = new JsonObject(); try { Connection conn = store.get(connectionId); S3Configuration s3Configuration = new S3Configuration(conn); JsonObject value = new JsonObject(); JsonObject s3 = new JsonObject();  Map<String, String> properties = new HashMap<>(); properties.put(""accessID"", s3Configuration.getAWSAccessKeyId()); properties.put(""accessKey"", s3Configuration.getAWSSecretKey()); properties.put(""path"", String.format(""s3://%s/%s"", bucketName, key));  s3.add(""properties"", gson.toJsonTree(properties)); s3.addProperty(""name"", ""S3""); s3.addProperty(""type"", ""source""); value.add(""S3"", s3);  JsonArray values = new JsonArray(); values.add(value); response.addProperty(""status"", HttpURLConnection.HTTP_OK); response.addProperty(""message"", ""Success""); response.addProperty(""count"", values.size()); response.add(""values"", values); sendJson(responder, HttpURLConnection.HTTP_OK, response.toString()); } catch (Exception e) { error(responder, e.getMessage()); } } "	0	1	0	0	0	0
private void checkIdent(DetailAST ast) { if (currentVariables != null && !currentVariables.isEmpty()) { final DetailAST identAST = ast.getFirstChild();  if (identAST != null && identAST.getType() == TokenTypes.IDENT && currentVariables.contains(identAST.getText())) { log(ast.getLineNo(), ast.getColumnNo(), MSG_KEY, identAST.getText()); } } } 	1	0	1	1	1	0
"private int getPhoneTypeFromProperty(int phoneId) { String type = getTelephonyProperty(phoneId, TelephonyProperties.CURRENT_ACTIVE_PHONE, null); if (type == null || type.equals("""")) { return getPhoneTypeFromNetworkType(phoneId); } return Integer.parseInt(type); } "	0	1	1	0	1	0
public void notifyStateChange(EnvironmentState newState) { // duplicate the set before iteration, since we may call // unregisterClient. Set<BW4TClientActions> clientset = new HashSet<BW4TClientActions>(this.clients.keySet()); for (BW4TClientActions client : clientset) { try { client.handleStateChange(newState); } catch (RemoteException e) { reportClientProblem(client, e); try { unregisterClient(client); } catch (ServerNotActiveException e1) { e1.printStackTrace(); } }  } } 	1	0	1	0	1	0
public static void moveDirectoryOrFile(final Path from, final Path to, boolean copyInto) throws IOException { final Path actualTo; if (copyInto && Files.isDirectory(to)) { actualTo = to.resolve(from.getFileName()); } else { actualTo = to; }  if (Files.exists(from)) { final Path parent = actualTo.getParent(); if (!Files.exists(parent)) { Files.createDirectories(parent); } Files.move(from, actualTo); } } 	1	1	1	1	0	0
"@Override public URI getSubtitleListLink(SubtitleSearchResult searchResult, String languageName) { Movie movie = searchResult; String sublanguageid = ""all"";  if (languageName != null) { try { sublanguageid = getSubLanguageID(languageName); } catch (Exception e) { Logger.getLogger(getClass().getName()).log(Level.WARNING, e.getMessage(), e); } }  return URI.create(String.format(""http://www.opensubtitles.org/en/search/imdbid-%d/sublanguageid-%s"", movie.getImdbId(), sublanguageid)); } "	1	0	1	0	1	0
@Override public Set<String> spop(final String key, final long count) { return new JedisClusterCommand<Set<String>>(connectionHandler, timeout, maxRedirections) { @Override public Set<String> execute(Jedis connection) { return connection.spop(key, count); } }.run(key); } 	1	0	1	0	0	0
"@Override public void onSuccess(Call<OAuthToken> call, Response<OAuthToken> response) { OAuthToken body = response.body(); if (!body.isValid()) { onFailure(call, null); return; } // When we get the token, it has an expires_in but not an expire_date. setupExpireDate uses the current time and expires_in to set a expireDate field String token = body.setupExpireDate().serialize(); String decodedJwt = new String(Base64.decode(body.getIdToken(), Base64.DEFAULT)); String username = decodedJwt.split(""\""net_id\"":"")[1].split(""\"""")[1]; setResult(username, token); startService(new Intent(LoginActivity.this, RegisterWithMpnService.class).putExtra(RegisterWithMpnService.ACTION, RegisterWithMpnService.Action.LOGIN)); Account account = createAccount(accountManager, username, """", token); // tell the content resolver to sync (get information about their account - e.g. personId, name, etc.) ContentResolver.setSyncAutomatically(account, getString(R.string.fakeContentAuthority), true); // tell the content resolver how often to sync (at a minimum), in seconds ContentResolver.addPeriodicSync(account, getString(R.string.fakeContentAuthority), Bundle.EMPTY, ONE_WEEK); AccountInformation.sync(LoginActivity.this, account, new AccountInformation.AccountInformationCallback() { @Override public void doneLoading(AccountInformation result) { finish(progressDialog); } }); } "	1	0	1	1	1	0
@Override public boolean equals(Object obj) { if (obj instanceof EnrolmentInfo) { EnrolmentInfo tempInfo = (EnrolmentInfo) obj; if (this.owner != null && this.ownership != null) { if (this.owner.equals(tempInfo.getOwner()) && this.ownership.equals(tempInfo.getOwnership())) { return true; } } } return false; } 	0	1	0	0	0	0
@Override public Step[] newArray(int i) { return new Step[0]; } 	1	0	1	1	1	0
"@Override protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException { //	LEFT -- HUDITEM MENU (HOVERED) / CLOSE HUDITEM MENU //	RIGHT -- ROTATE HUDITEM if(menu != null) { menu.mouseClicked(mouseX, mouseY, mouseButton); } for (int l = 0; l < this.buttonList.size(); ++l) { GuiButton guibutton = (GuiButton)this.buttonList.get(l);  if(guibutton.mousePressed(mc, mouseX, mouseY)) { ActionPerformedEvent.Pre event = new ActionPerformedEvent.Pre(this, guibutton, buttonList); if(MinecraftForge.EVENT_BUS.post(event)) break; event.button.playPressSound(mc.getSoundHandler());  //	Mouse Buttons switch(mouseButton) { case 0: actionPerformed(event.button); mouseStartX = mouseX; mouseStartY = mouseY; break; case 1: secondaryActionPerformed(event.button); break; }  if(this.equals(mc.currentScreen)) MinecraftForge.EVENT_BUS.post(new ActionPerformedEvent.Post(this, event.button, buttonList)); return; } }  //	Clicked Nothing if(menu != null)	onMenuClosed(); deselectButton(); } "	1	0	1	0	1	0
private static Bitmap decodeStreamInternal(InputStream is, Rect outPadding, Options opts, boolean consumeRights) { // ASSERT(is != null); byte [] tempStorage = null; if (opts != null) tempStorage = opts.inTempStorage; if (tempStorage == null) tempStorage = new byte[DECODE_BUFFER_SIZE]; return nativeDecodeStream(is, tempStorage, outPadding, opts, true); } 	0	1	1	1	1	0
"@Override public <K, V> Cache<K, V> createCache(final String alias, CacheConfiguration<K, V> config) throws IllegalArgumentException { statusTransitioner.checkAvailable();  LOGGER.info(""Cache '{}' is getting created in EhcacheManager."", alias);  config = adjustConfigurationWithCacheManagerDefaults(config); Class<K> keyType = config.getKeyType(); Class<V> valueType = config.getValueType();  final CacheHolder value = new CacheHolder(keyType, valueType, null); if (caches.putIfAbsent(alias, value) != null) { throw new IllegalArgumentException(""Cache '"" + alias +""' already exists""); }  Ehcache<K, V> cache = null;  RuntimeException failure = null; try { cache = createNewEhcache(alias, config, keyType, valueType, value.toBeReleased); CacheConfiguration.PersistenceMode persistenceMode = config.getPersistenceMode(); if (persistenceMode != null) { Maintainable maintainable = cache.toMaintenance(); try { switch (persistenceMode) { case SWAP: maintainable.destroy(); maintainable.create(); break; case CREATE_IF_ABSENT: try { maintainable.create(); } catch (Exception e) { // ignore } break; default: } } finally { maintainable.close(); } } cache.init(); } catch (RuntimeException e) { failure = e; }  if(failure == null) { try { if(!statusTransitioner.isTransitioning()) { for (CacheManagerListener listener : listeners) { listener.cacheAdded(alias, cache); } } } finally { value.setCache(cache); } } else { caches.remove(alias); value.setCache(null); throw new IllegalStateException(""Cache '""+alias+""' creation in EhcacheManager failed."", failure); } LOGGER.info(""Cache '{}' created in EhcacheManager."", alias); return cache; } "	1	0	1	0	1	0
"@Before public void setup() throws Exception { proxy = new FEDataStoreProxy(); String admin = System.getProperty(""is.admin.user""); String password = System.getProperty(""is.admin.passwd""); am = new IFAuthenticationManager(admin, password); token = am.getAuthorizationToken(""yosu"", ""yosupass"", """"); } "	0	1	0	0	0	0
"@Override public void prepareForXML() { logger.debug(""Generating XML for {}"", properties.get(Constants.PARAM_NAME)); super.prepareForXML();  excelFile = (ExcelFile) baseComponent;  // path Path path = new Path(); String fileName = ((String) properties.get(PropertyNameConstants.FILE_NAME.value())); String filePath = ((String) properties.get(PropertyNameConstants.PATH.value())); if(StringUtils.isNotBlank(fileName) && StringUtils.isNotBlank(filePath)){ path.setUri(filePath + ""\\"" + fileName); excelFile.setPath(path); }  // worksheet field name WorksheetName worksheetName = new WorksheetName(); WorkSheetValueProperty workSheetValueProperty = (WorkSheetValueProperty) properties .get(PropertyNameConstants.WORK_SHEET_NAME.value()); if (workSheetValueProperty != null) { if (StringUtils.isNotBlank(workSheetValueProperty.getWorksheetName())) { worksheetName.setName(workSheetValueProperty.getWorksheetName()); } worksheetName.setIsColumn(workSheetValueProperty.isField()); excelFile.setWorksheetName(worksheetName); }  // Write mode WriteMode writeMode = new WriteMode(); writeMode.setValue(getWriteMode()); excelFile.setWriteMode(writeMode);  // Auto size column excelFile.setAutoColumnSize(getBoolean(PropertyNameConstants.AUTO_SIZE_COLUMN.value()));  // Strip leading qoutes excelFile.setStripLeadingQuote(getBoolean(PropertyNameConstants.STRIP_LEADING_QOUTES.value()));  // charset Charset charset = new Charset(); charset.setValue(getCharset()); excelFile.setCharset(charset);   // format mapExcelFormat();  getSortKeys();  excelFile.setRuntimeProperties(getRuntimeProperties());  } "	1	0	1	1	1	0
@Transactional @Override public byte[] exportToArchive(ProjectEntry project) throws IOException { Collection<ProjectFile> projectFiles = this.allFilesFor(project); ArchiveWriteAdapter writer = new ArchiveWriteAdapter();  try { for (ProjectFile projectFile : projectFiles) { writer.addEntry(new ArchiveFile(projectFile.getFileName(), projectFile.getFileContent())); }  ProjectMetadata projectMetadata = new ProjectMetadata(projectFiles); byte[] metadataContent = this.generateExportMetadataContent(projectMetadata, writer.getCharset()); writer.addEntry(new ArchiveFile(PROJECT_EXPORT_METADATA_FILE, metadataContent)); } finally { writer.close(); }  return writer.getArchiveContent(); } 	1	0	1	0	1	0
"@Override public void done(List<AdminAccounts> arg0, ParseException arg1) { if (arg1 != null && arg0.size() < 1) { Log.i(TAG, ""No organization accounts found""); mUserView.setError(getString(R.string.error_incorrect_username)); mUserView.requestFocus(); } else { AdminAccounts x = arg0.get(0); // Log.i(TAG, ""user: "" + mUser + "" -- "" + x.getUsername()); // Log.i(TAG, ""pass"" + mPassword + "" -- "" + x.getPassword()); if (x.getUsername().equals(mUser) && x.getPassword().equals(mPassword)) { Log.i(TAG, ""Signed in successfully""); Toast.makeText(getApplicationContext(), ""Signed in successfully :)"", Toast.LENGTH_SHORT).show(); SharedPreferences.Editor editor = getSharedPreferences(PREFS_NAME, MODE_PRIVATE).edit(); editor.putBoolean(signedInPref, true); editor.putString(currentUserPref, x.getUsername()); editor.putString(currentOrgPref, x.getOrganizatonName()); if (editor.commit()) Log.i(TAG, ""Preferences saved successfully""); else Log.i(TAG, ""Preferences failed to save""); finish(); // ends activity once signed in } else { Log.i(TAG, ""Sign in failed... incorrect password""); mPasswordView.setError(getString(R.string.error_incorrect_password)); mPasswordView.requestFocus(); } } } "	1	0	1	1	1	0
"public void close() throws IOException { if (servletRequestContext.getOriginalRequest().getDispatcherType() == DispatcherType.INCLUDE) { return; } if (listener == null) { if (anyAreSet(state, FLAG_CLOSED)) return; state |= FLAG_CLOSED; state &= ~FLAG_READY; if (allAreClear(state, FLAG_WRITE_STARTED) && channel == null) { if (servletRequestContext.getOriginalResponse().getHeader(Headers.TRANSFER_ENCODING_STRING) == null) { if (buffer == null) { servletRequestContext.getExchange().getResponseHeaders().put(Headers.CONTENT_LENGTH, ""0""); } else { servletRequestContext.getExchange().getResponseHeaders().put(Headers.CONTENT_LENGTH, Integer.toString(buffer.position())); } } } try { if (buffer != null) { writeBufferBlocking(true); } if (channel == null) { channel = servletRequestContext.getExchange().getResponseChannel(); } state |= FLAG_DELEGATE_SHUTDOWN; StreamSinkChannel channel = this.channel; if (channel != null) { //mock requests channel.shutdownWrites(); Channels.flushBlocking(channel); } } finally { if (pooledBuffer != null) { pooledBuffer.free(); buffer = null; } else { buffer = null; } } } else { closeAsync(); } } "	0	1	0	0	0	0
"public FloatInputPoll getBatteryVoltage() { if (batteryLevel == null) { batteryLevel = FloatMixing.addition.of(6.5f, FloatMixing.multiplication.of(3, panel.add(new FloatControlDevice(""Battery Level (6.5V-12.5V)"")))); } return batteryLevel; } "	0	1	0	1	1	0
"@Test public void testMulti() throws Exception { template.send(""annotated8"", 0, ""foo""); template.flush(); assertThat(this.multiListener.latch1.await(20, TimeUnit.SECONDS)).isTrue(); } "	0	1	1	0	1	0
public static ArrayList<Category> getSelectedMarkerCategories(){ ArrayList<Category> selectedMarkerCategories = new ArrayList<Category>(); for (int i=0; i<Appl.selectedCategories.length; i++) { if (Appl.selectedCategories[i]) { selectedMarkerCategories.add(new Category(getMarkerCategories().get(i).toLowerCase())); } } return selectedMarkerCategories; } 	0	1	0	0	0	0
@Override public List<Server> listServer(VimInstance vimInstance) throws VimDriverException {  List<Server> obServers = new ArrayList<>(); try { OSClient os = this.authenticate(vimInstance);  List<? extends org.openstack4j.model.compute.Server> servers = os.compute().servers().list(); for (org.openstack4j.model.compute.Server srv : servers) { if ((isV3API(vimInstance) && srv.getTenantId().equals(vimInstance.getTenant()) || (!isV3API(vimInstance) && srv.getTenantId() .equals(getTenantFromName(os, vimInstance.getTenant()).getId())))) obServers.add(Utils.getServer(srv, null)); } } catch (Exception e) { log.error(e.getMessage(), e); throw new VimDriverException(e.getMessage()); } return obServers; } 	1	0	1	0	1	0
public void openKategorien(){ Intent intent = new Intent(this,ChooseCategoryActivity.class); intent.putExtra(Extra.SELECTED_TAB,2); startActivity(intent); } 	0	1	0	0	0	0
"@Test public void testLeaveAllScopes() throws Exception { symbolTable.enterScope(); symbolTable.enterScope(); assertTrue(enterDeclaration(getSymbol(""number""), BasicType.INT));  assertFalse(enterDeclaration(getSymbol(""number""), BasicType.INT)); assertFalse(enterDeclaration(getSymbol(""number""), BasicType.INT)); assertTrue(enterDeclaration(getSymbol(""number1""), BasicType.INT));  assertTrue(symbolTable.isDefinedInCurrentScope(getSymbol(""number""))); assertFalse(symbolTable.isDefinedInCurrentScope(getSymbol(""asdf""))); assertTrue(symbolTable.isDefinedInCurrentScope(getSymbol(""number1"")));  symbolTable.enterScope(); assertTrue(enterDeclaration(getSymbol(""number""), BasicType.INT)); symbolTable.enterScope(); symbolTable.enterScope();  symbolTable.leaveAllScopes(); assertEquals(3, symbolTable.getRequiredLocalVariables());  Field privChangeStack = SymbolTable.class.getDeclaredField(""changeStack""); privChangeStack.setAccessible(true); @SuppressWarnings(""unchecked"") LinkedList<Change> cs = (LinkedList<Change>) privChangeStack.get(symbolTable); assertTrue(cs.isEmpty()); privChangeStack.setAccessible(false);  assertNull(getSymbol(""number"").getDeclarationScope()); assertNull(getSymbol(""number"").getDeclaration());  assertNull(getSymbol(""number1"").getDeclarationScope()); assertNull(getSymbol(""number1"").getDeclaration()); } "	0	1	1	1	1	0
"public void setLabel(){ String taskInfo = this.toString(); if (taskInfo.indexOf(""x"") == 1) { taskInfo = taskInfo.substring(4); } else { taskInfo = taskInfo.substring(3); } this.label = new JLabel(taskInfo); if(this.isOverdue() == true) { this.label.setBackground(Color.RED); this.label.setOpaque(true); } this.label.setForeground(this.getColor()); this.label.setPreferredSize(new Dimension(400,20)); } "	0	1	1	0	1	0
"private void assertApplicationDoesNotExist(String deploymentId, AppStatus status) { DeploymentState state = status.getState(); if (state != DeploymentState.unknown) { throw new IllegalStateException(String.format(""App %s is already deployed with state %s"", deploymentId, state)); } } "	0	1	1	0	1	0
public Object get(final long timeout, final TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException { try { return codec.decode(future.getWithTimeout(timeout, unit), (Class<?>)decodeTo); } catch (EntityException e) { throw new ExecutionException(e); } } 	1	0	1	1	1	0
"private void savePreferences() { Log.d(""saving buses"", buses.toString()); Log.d(""saving list_size"", Integer.toString(buses.size())); SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(this); sp.edit().putStringSet(BUS_SELECT_STATE, buses).apply(); sp.edit().putInt(BUSLIST_SIZE, getResources().getStringArray(R.array.buses).length).apply(); } "	0	1	0	0	0	0
"@Override protected void onCreate(Bundle icicle) { super.onCreate(icicle); setContentView(R.layout.web_view_activity);  webView = (WebView) findViewById(R.id.web_view);  configureWebView(webView); webView.loadUrl(""https://api.byu.edu/authorize?response_type=code&client_id=SRAzrjboV9k58NsVZVgfjFwCFyIa&redirect_uri=byuSuite://auth&scope=openid&state=myteststate"");  Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); toolbar.setTitle(""Log In""); toolbar.setTitleTextColor(ContextCompat.getColor(this, R.color.white)); } "	1	0	1	1	1	0
private OAuthToken getToken() { accountManager = AccountManager.get(OAuthTokenTestActivity.this); account = AccountResolver.getAccount(OAuthTokenTestActivity.this); String peekAuthToken = accountManager.peekAuthToken(account, TYPE_BEARER_TOKEN); return new Gson().fromJson(peekAuthToken, OAuthToken.class); } 	0	1	0	0	0	0
public float getFloat(String key, float defaultValue) { try { return getInt(key); } catch (NoSuchElementException | NumberFormatException e) { return defaultValue; } } 	1	0	1	1	1	0
"public List<Ticket> TicketsByBuyerAndStatus(Long tenantId,String username, TicketStatus status, int offset, int limit) { if ((!(tenantId>0))|| (username == null) || (status == null)) { return null; } Query<User> queryUser = ds.createQuery(User.class);  queryUser.and(queryUser.criteria(""username"").equal(username), queryUser.criteria(""tenantId"").equal(tenantId)); User user =  queryUser.get();  Query<Ticket> query = ds.createQuery(Ticket.class); query.and(query.criteria(""passenger"").equal(user.get_id()), query.criteria(""status"").equal(status)); return query.offset(offset).limit(limit).asList(); } "	0	1	0	1	1	0
"@Override public Ticket confirmTicket(TicketConfirmation ticketConfirmation) throws TicketException { Ticket ticket = dao.getByLocalId(ticketConfirmation.getTenantId(), ticketConfirmation.getId()); if (!(ticket == null)) { switch (ticket.getStatus()) { case CANCELED: throw new TicketException(""El ticket se encuentra CANCELADO""); case USED: throw new TicketException(""El ticket ya fue UTILIZADO""); case CONFIRMED: if (ticketConfirmation.getStatus()==TicketStatus.USED){ ticket.setStatus(ticketConfirmation.getStatus()); if (dao.persist(ticket) != null) { return ticket; } else { throw new TicketException(""Ocurrió un error al intentar actualizar el TICKET""); } } throw new TicketException(""El ticket ya está CONFIRMADO""); } ticket.setPassenger(udao.getByUsername(ticketConfirmation.getTenantId(), ticketConfirmation.getUsername())); ticket.setPaymentToken(ticketConfirmation.getPaymentToken()); ticket.setStatus(ticketConfirmation.getStatus()); if (dao.persist(ticket) != null) { if (ticketConfirmation.getStatus() == TicketStatus.CONFIRMED) { updateJourney(ticket.getTenantId(), ticket.getJourneyId(), ticket.getSeat()); } return ticket; } else { throw new TicketException(""Ocurrió un error al intentar actualizar el TICKET""); } }else { throw new TicketException(""El ticket NO EXISTE""); } } "	0	1	0	0	0	0
public void saveComment(ExoSocialActivity existingActivity, ExoSocialActivity newComment) throws ActivityStorageException { activityStorage.saveComment(existingActivity, newComment); activityLifeCycle.saveComment(activityStorage.getActivity(newComment.getId())); } 	0	1	0	0	0	0
"public static RamlResponse getSuccessfulResponse(RamlAction action) { String[] successfulResponses = new String[] {""200"", ""201""}; for (String code : successfulResponses) { if (action != null && !CollectionUtils.isEmpty(action.getResponses()) && action.getResponses().containsKey(code)) { return action.getResponses().get(code); } } return null; } "	0	0	0	1	1	0
"private static IUser docToUser(ODocument document) { if (document != null) { IUser user = new User();  user.setLogin(document.field(""login"", String.class)); user.setPassword(document.field(""password"", String.class)); user.setName(document.field(""name"", String.class)); user.setGroup(docToUserGroup(document.field(""group"", ODocument.class))); user.setLastLogin(document.field(""lastLogin"", Long.class)); user.setActive(document.field(""active"", Boolean.class)); user.setId(document.getIdentity().toString()); user.setVersion(document.getVersion()); user.setCreated(document.field(""created"", Long.class)); user.setModified(document.field(""modified"", Long.class));  return user; }  return null; } "	0	1	1	0	1	0
public boolean anyMatchObj(Predicate<? super T> predicate) { return matcher(false, true, true, predicate); } 	1	0	1	1	1	0
"@Override public String getGLSL() { StringBuilder sb = new StringBuilder(); sb.append(""vec3 "" + outputs.get(""out_normal"").getName() + "" = texture("" + inputs.get(""in_sampler"").getName() + "", "" + inputs.get(""in_texturecoordinate"").getName() + "").xyz * 2 - 1;\n""); glsl = sb.toString(); return glsl; } "	0	1	0	0	0	0
@Override public Uri getImageUri() { if(media.hasEmbeddedPicture()) { return media.getImageUri(); } else if (hasItemImageDownloaded()) { return image.getImageUri(); } else if (feed != null) { return feed.getImageUri(); } else { return null; } } 	1	0	1	1	1	0
"private String addDocument(String document) throws StorageException { RestRequestor restClient = null; try { LOGGER.info(""Will use {} (PUT) to add document"", couchURI); restClient = RestRequestor.put(couchURI + ""/"" + documentId, ""application/json;charset=utf-8"", document.getBytes()); int code = restClient.getResponseCode(); String msg = restClient.getResponseMessage(); LOGGER.debug(""CouchDB responded with {}, {}"", code, msg); if (code != COUCHDB_CREATED_STATUS_CODE) { throw new StorageException(String.format(""Expected database to respond with code 201, got %s. Message is: %s"", code, msg)); } LOGGER.debug(""Saved: \n{}"", document); String revision = readRevision(restClient.getInputStream()); LOGGER.info(""Document saved: id = {} revision = {}"", revision, documentId); return revision; } catch (IOException e) { throw new StorageException(""Error while connecting to the database"", e); } finally { if (restClient != null) { restClient.close(); } } } "	0	1	1	1	1	0
@Override public String apply(Integer t) { return DownloadType.values()[t / 3].getProvider().getVersionsDownloadURL() + suffix; } 	1	0	1	1	1	0
"private void checkE042(GtfsRealtime.FeedEntity entity, GtfsRealtime.TripUpdate tripUpdate, GtfsRealtime.TripUpdate.StopTimeUpdate stopTimeUpdate, List<OccurrenceModel> errors) { if (stopTimeUpdate.hasScheduleRelationship() && stopTimeUpdate.getScheduleRelationship().equals(NO_DATA)) { String id = getTripId(entity, tripUpdate) + getStopTimeUpdateId(stopTimeUpdate);  if (stopTimeUpdate.hasArrival()) { OccurrenceModel om = new OccurrenceModel(id + "" has arrival""); errors.add(om); _log.debug(om.getPrefix() + "" "" + E042.getOccurrenceSuffix()); } if (stopTimeUpdate.hasDeparture()) { OccurrenceModel om = new OccurrenceModel(id + "" has departure""); errors.add(om); _log.debug(om.getPrefix() + "" "" + E042.getOccurrenceSuffix()); } } } "	1	1	1	1	0	0
private void setDictionaryTitle(String dictionaryName) { String dictionaryTitle = dictionaryName + dictionaryNameSuffix; dictionaryMenu.setText(dictionaryTitle); brickDictionaryFrame.setTitle(dictionaryTitle); } 	0	1	0	0	0	0
"public static void option2() { System.out.println(""Mode 1 ou 2 Joueurs ?""); joueurs = InOut.getByte(); if(joueurs != 1 || joueurs != 2) { joueurs = 1; } System.out.println(""Vous etes actuellement en mode "" + joueurs + "" joueurs""); } "	1	1	1	1	0	0
"@Override protected void actionPerformed(GuiButton guibutton) { if (guibutton.id == 1) { this.base.setyAxisDetect(this.base.getyAxisDetect() - 1); sendChangeToServer(); }  if (guibutton.id == 2) { this.base.setyAxisDetect(this.base.getyAxisDetect() + 1); sendChangeToServer(); }  if (guibutton.id == 3) { sendDropTurretsToServer(); }  if (guibutton.id == 4) { sendDropBaseToServer(); }  if (guibutton.id == 5) { player.openGui(OpenModularTurrets.instance, 6, player.worldObj, base.getPos().getX(), base.getPos().getY(), base.getPos().getZ()); }  if (guibutton.id == 6) { sendSetBaseTargetingToServer(); for (Object button : buttonList) { if (((GuiButton) button).id == 6) { this.base.setMultiTargeting(!this.base.isMultiTargeting()); ((GuiButton) button).displayString = base.isMultiTargeting() ? safeLocalize(OMTNames.Localizations.GUI.TARGET)+"": Multi"" : safeLocalize(OMTNames.Localizations.GUI.TARGET)+"": Single""; } } } } "	0	1	0	0	0	0
@Override protected void initOnCreation(ShopCreationData creationData) { super.initOnCreation(creationData); Player owner = creationData.creator; Block chest = creationData.chest; Validate.notNull(owner); Validate.notNull(chest);  this.ownerUUID = NMSManager.getProvider().supportsPlayerUUIDs() ? owner.getUniqueId() : null; this.ownerName = owner.getName().toLowerCase(); this.chestx = chest.getX(); this.chesty = chest.getY(); this.chestz = chest.getZ(); this.forHire = false; } 	1	0	1	0	1	0
@Override public void onClick(View view) { Snackbar.make(swipeRefreshLayout, getString(R.string.snackbar_deleting), Snackbar.LENGTH_LONG).show(); new MultiMailAction(currentUser, getActivity(), FolderFragment.this, emailsMarkedForAction, getString(R.string.msg_action_trash)).execute(); } 	0	1	0	0	0	0
"public static void showNotification(Context context, User user, String fromName, String subject) { NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(context); mBuilder.setSmallIcon(R.drawable.envelope_m); mBuilder.setTicker(context.getString(R.string.notification_ticker_new_webmail)); String username = user.username; if (User.getUsersCount() > 1) { if (username.indexOf(""@"") != -1) mBuilder.setContentTitle(fromName + "" to "" + username.substring(0, username.indexOf(""@""))); else mBuilder.setContentTitle(fromName + "" to "" + username); } else { mBuilder.setContentTitle(fromName + "" to "" + username); } mBuilder.setContentText(subject); mBuilder.setSound(Uri.parse(UserSettings.getNotificationSound(context))); mBuilder.setDefaults(Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE); mBuilder.setAutoCancel(true);  Intent notificationIntent = new Intent(context, LoginActivity.class);  TaskStackBuilder stackBuilder = TaskStackBuilder.create(context); stackBuilder.addParentStack(LoginActivity.class);  stackBuilder.addNextIntent(notificationIntent); PendingIntent resultPendingIntent = stackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT); mBuilder.setContentIntent(resultPendingIntent);  NotificationManager mNotificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);  mNotificationManager.notify((int) (System.currentTimeMillis()), mBuilder.build());  UserSettings.setCurrentUser(user, context); } "	0	1	0	0	0	0
"@Override public void onBackPressed() {  if (mLoginPage.canGoBack() && !settingsOpen) { mLoginPage.goBack(); if (mLoginPage.getUrl().toLowerCase().contains(""edgetime"".toLowerCase())) { Toast.makeText(this, ""Double-Click to exit Edge"", Toast.LENGTH_SHORT).show(); } } else if (settingsOpen) { mNotify.setVisibility(View.INVISIBLE); mAutoLogin.setVisibility(View.INVISIBLE); mLoginPage.setVisibility(View.VISIBLE); mSettings.setText(""Settings""); mLoadingCircle.setVisibility(View.INVISIBLE); settingsOpen = false; mNumberPicker.setVisibility(View.INVISIBLE); mNumberPickerTextView.setVisibility(View.INVISIBLE); } else { Log.d(""not good"", ""kill me""); super.onBackPressed(); } } "	0	1	0	0	0	0
@Override public void removeNode(N node) { super.removeAll(); if (listenerList != null) { NotifierHelper.notify(listenerList, Listener.NOTIFICATION_TYPE.REMOVE, GRAPH_ATTRIBUTES.LAYER_NODES, node, null, this); } } 	1	0	1	1	1	0
"@Test public void testSequenceOfNulls() { ValueSequence sequence = TextType.get().sequenceOf(""\""\"",\""\""""); assertSequence(sequence, null, null); } "	0	1	0	0	0	0
"public ScrollableList addScrollableList( final Object theObject , String theIndex , final String theName , final int theX , final int theY , final int theW , final int theH ) { ScrollableList myController = new ScrollableList( base.cp5 , ( Tab ) base.cp5.controlWindow.getTabs( ).get( 1 ) , theName , theX , theY , theW , theH ); base.cp5.register( theObject , theIndex , myController ); myController.registerProperty( ""listBoxItems"" ).registerProperty( ""value"" ); return myController; } "	0	1	0	0	0	0
@Nullable @Override public Entity createEntity(Location location, BaseEntity state) { Entity entity = super.createEntity(location, state); if (state != null) { changeSet.add(new EntityCreate(location, state, entity)); } return entity; } 	1	1	1	1	0	0
"private void writeResponse(FramedStream stream, MockResponse response) throws IOException { if (response.getSocketPolicy() == SocketPolicy.NO_RESPONSE) { return; } List<Header> spdyHeaders = new ArrayList<>(); String[] statusParts = response.getStatus().split("" "", 2); if (statusParts.length != 2) { throw new AssertionError(""Unexpected status: "" + response.getStatus()); } // TODO: constants for well-known header names. spdyHeaders.add(new Header(Header.RESPONSE_STATUS, statusParts[1])); if (protocol == Protocol.SPDY_3) { spdyHeaders.add(new Header(Header.VERSION, statusParts[0])); } Headers headers = response.getHeaders(); for (int i = 0, size = headers.size(); i < size; i++) { spdyHeaders.add(new Header(headers.name(i), headers.value(i))); }  Buffer body = response.getBody(); boolean closeStreamAfterHeaders = body != null || !response.getPushPromises().isEmpty(); stream.reply(spdyHeaders, closeStreamAfterHeaders); pushPromises(stream, response.getPushPromises()); if (body != null) { BufferedSink sink = Okio.buffer(stream.getSink()); sleepIfDelayed(response); throttledTransfer(response, socket, body, sink, bodyLimit); sink.close(); } else if (closeStreamAfterHeaders) { stream.close(ErrorCode.NO_ERROR); } } "	0	1	1	0	1	0
@Override public IdToken createIdToken(String nonce, AuthorizationCode authorizationCode, AccessToken accessToken, String authMode) throws SignatureException, StringEncrypter.EncryptionException, InvalidJwtException, InvalidJweException, InvalidClaimException { return grant.createIdToken(nonce, authorizationCode, accessToken, getScopes(), authMode); } 	1	0	1	0	1	0
"@Override public void run() {  if (_i != 0 && !_succesfull) { _waiting = true; _label.setText(OTRResources.getString(""otr.try.to.connect.for.seconds"",_i)); decI(); } else if (!_succesfull) { _waiting = true; _icon.setImage(SparkRes.getImageIcon(SparkRes.SMALL_DELETE).getImage()); _label.setText(OTRResources.getString(""otr.failed.to.establish"",_i)); _retry.setVisible(true);  this.cancel(); } else { this.cancel(); } } "	1	0	1	0	1	0
public static PickMiniSite newInstance(List<MiniSite> miniSites, Fragment fragment) { PickMiniSite dialog = new PickMiniSite(); dialog.setMiniSites(miniSites); dialog.setFragment(fragment); return dialog; } 	0	1	0	1	1	0
"public ResponseEntity<List<IndicatorQueryResp>> searchPost(@ApiParam(value = ""List of queries. Please see swagger.json for request body format."", required = true) @RequestBody(required = true) EvidenceQueries body) { HttpStatus status = HttpStatus.OK;  List<IndicatorQueryResp> result = new ArrayList<>();  if (body == null || body.getQueries() == null || body.getQueries().size() == 0) { status = HttpStatus.BAD_REQUEST; } else {  String source = body.getSource() == null ? ""oncokb"" : body.getSource();  for (Query query : body.getQueries()) { result.add(IndicatorUtils.processQuery(query, null, body.getLevels() == null ? LevelUtils.getPublicAndOtherIndicationLevels() : body.getLevels(), source, body.getHighestLevelOnly())); } } return new ResponseEntity<>(result, status); } "	1	0	1	0	1	0
public int getIndexFromCoordinate(int x, int y) { int row = getColOrRowFromCoordinate(y + mScroll); int col = getColFromCoordinate(row, x); // touch is between columns or rows if (col == -1 || row == -1) { return -1; } int index = 0;  index = row * COL_COUNT + col;  if (mUseMainTiles) { // If we click on (0, 2) and are using main tiles, that // position is empty if (row == 0 && col == COL_COUNT - 1) { return -1; }  // There is one tile less from row > 0 if (row > 0) { index--; } }  if (index > getChildCount()) { return -1; } return index; } 	1	0	1	1	1	0
@Override public Object evaluate(GenericUDF.DeferredObject[] arguments) throws HiveException { assert arguments.length == 4;  String year = getArgument(0, arguments); String month = getArgument(1, arguments); String day = getArgument(2, arguments); String event_date = getArgument(3, arguments); List<Object> result = new ArrayList<Object>(4); try { OccurrenceParseResult<AtomizedLocalDate> parsed = TemporalInterpreter.interpretEventDate(year, month, day, event_date); OccurrenceParseResult<TemporalAccessor> parsed2 = TemporalInterpreter.interpretRecordedDate(year, month, day, event_date); if (parsed.isSuccessful() && parsed.getIssues().isEmpty()) { result.add(parsed.getPayload().getYear()); result.add(parsed.getPayload().getMonth()); result.add(parsed.getPayload().getDay()); result.add(TemporalAccessorUtils.toUTCDate(parsed2.getPayload()).getTime()); } else{ result.add(null); result.add(null); result.add(null); result.add(null); } } catch (Exception e) { // not much to do - indicates bad data }  return result; } 	0	1	0	0	0	0
"private void addSingleMappings(int cidBegin, COSArray arr) { for (int i = 0; i < arr.size(); i++) { if(arr.at(i).getType().isNumber()) { LOGGER.debug(""W array in CIDFont has invalid entry.""); continue; } this.singleMappings.put(cidBegin + i, arr.at(i).getReal()); } } "	1	1	1	1	0	0
@Override public int[] solve(Graph sourceGraph, Graph targetGraph, ConsistencyCheckPrecedenceGraph protocol) {  SolverFactory factory = getSolverFactory(); factory.setParameter(Solver.VERBOSE, 0);  Problem ilpProblem = createIlpProblemFromGraphs(sourceGraph, targetGraph, protocol);  variableCount = ilpProblem.getVariablesCount(); constraintCount = ilpProblem.getConstraintsCount();  Solver solver = factory.get();  // solve Result result = solver.solve(ilpProblem);  int[] arrayResult = getArrayFromResult(result);  return arrayResult; } 	1	0	1	0	1	0
public void addCookie(String key, Cookie value) { cookies.putIfAbsent(key, value); } 	1	0	1	0	1	0
public void addHeader(String key, String value) { headers.putIfAbsent(key, value); } 	1	0	1	1	1	0
public void addAttribute(String key, String value) { attributes.putIfAbsent(key, value); } 	1	0	1	1	1	0
"public static URL getReferrerURLFromImageURL(URL url) { if (url != null && url.toString().endsWith("".jpg"")) { int indexOfLastSlash = url.toString().lastIndexOf('/'); if (indexOfLastSlash > 0) {  String tempUrlString = url.toString().substring(0,indexOfLastSlash); String imageNumber = url.toString().substring(indexOfLastSlash); if(imageNumber != null && imageNumber.endsWith("".jpg"") && imageNumber.length() > 5) { imageNumber = imageNumber.substring(1,imageNumber.length()-4); } int indexOfSecondToLastSlash = tempUrlString.toString().lastIndexOf('/'); if (indexOfSecondToLastSlash > 0 && tempUrlString.length() > 1) { String contentID = tempUrlString.substring(indexOfSecondToLastSlash+1); URL referrerURL; try { referrerURL = new URL(""http://www.data18.com/viewer/"" + ""1"" + contentID + ""/"" + imageNumber); return referrerURL; } catch (MalformedURLException e) { e.printStackTrace(); } } } } return url; } "	1	0	1	0	1	0
public Builder clearKeys() { keys_ = akka.protobuf.LazyStringArrayList.EMPTY; bitField0_ = (bitField0_ & ~0x00000004); onChanged(); return this; } 	0	1	0	0	0	0
"private void addTargetImpact(float x, float y, boolean isFinal, boolean showingExisting, int arrowIndex) { Bitmap mutableBitmap = this.imageBitmap.copy(Bitmap.Config.ARGB_8888, true); Paint paint = this.finalImpactPaint; if (isFinal) { this.imageBitmap = mutableBitmap; } else { paint = this.currentImpactPaint; }  Canvas canvas = new Canvas(mutableBitmap); if (!showingExisting) { y = y + Y_PADDING; } canvas.drawCircle(x, y, ARROW_IMPACT_RADIUS, paint); double distance = Math.sqrt(Math.pow(x - this.targetCenterX, 2) + Math.pow(y - this.targetCenterY, 2)); int score = (int) (10 - Math.floor(distance / this.pointWidth)); if (score < 0) { score = 0; } boolean isX = (score == 10 && (distance / this.pointWidth) < 0.5); this.targetImageView.setAdjustViewBounds(true); this.targetImageView.setImageBitmap(mutableBitmap);   TextView scoreText = this.currentScoreText[arrowIndex];  scoreText.getBackground().setColorFilter(new PorterDuffColorFilter(TournamentHelper.getBackground(score), PorterDuff.Mode.SRC_IN)); scoreText.setText(TournamentHelper.getUserScore(score, isX)); scoreText.setTextColor(TournamentHelper.getFontColor(score));  if (isFinal && !showingExisting) { this.addArrowData(x, y, score, isX); this.serie.updateTotalScore(score); }  if (isFinal) { this.totalSerieScoreText.setText(String.format(""%s / %s"", this.serie.getTotalScore(), TournamentConfiguration.MAX_SCORE_PER_SERIES)); this.arrowUndoButton.setEnabled(true); } } "	0	1	0	0	0	0
"public void addFile(final String file){ final String[] baseDirArray = currentDir.split(Pattern.quote(separator), -1); final String parent = new File(baseDir, file).getParent(); final String[] pathArray = parent.split(Pattern.quote(separator)); final int indexOfPrefix = getCommonIndex(baseDirArray, pathArray);  for (int i = baseDirArray.length - 1; i >= indexOfPrefix; i--) { final File fullFilePath = createDirectoryToFile(indexOfPrefix, baseDirArray, i); addIfExists(fullFilePath, ""teardown.html""); }  for (int i = indexOfPrefix; i < pathArray.length; i++) { final File fullFilePath = createDirectoryToFile(indexOfPrefix, pathArray, i); addIfExists(fullFilePath, ""setup.html""); }  final File fullFilePath = new File(baseDir); addIfExists(fullFilePath, file); currentDir = parent; } "	1	0	1	1	1	0
"@Override public boolean changeAPILCCheckListItems(APIIdentifier apiIdentifier, int checkItem, boolean checkItemValue) throws APIManagementException { GenericArtifact apiArtifact = APIUtil.getAPIArtifact(apiIdentifier, registry); Boolean success = false; try { if (checkItemValue) { apiArtifact.checkLCItem(checkItem, APIConstants.API_LIFE_CYCLE); } else { apiArtifact.uncheckLCItem(checkItem, APIConstants.API_LIFE_CYCLE); } success = true; } catch (GovernanceException e) { handleException(""Error while setting registry lifecycle checklist items for the API: "" + apiIdentifier.getApiName(), e); } return success; } "	1	0	1	0	1	0
protected OperableTrigger buildTrigger(String triggerName, String triggerGroup, JobDetail job, Long startAt) {  return buildTrigger(triggerName, triggerGroup, job, startAt, null); } 	1	0	1	0	1	0
"private List<Account> getRetweetSumPerAccount(Statement stmt, boolean byDate) {  String a = ""SELECT Counter, retweets.LocationId, AccountId, Code, Day FROM retweets JOIN final ON retweets.AccountId=final.val JOIN day ON retweets.DayId=Day.Id JOIN location ON retweets.LocationId=location.Id;""; String b = ""SELECT SUM(Counter), retweets.LocationId, AccountId, Code FROM retweets JOIN final ON retweets.AccountId=final.val JOIN location ON retweets.LocationId=location.Id GROUP BY LocationId, AccountId;"";  ResultSet res = null; runningRequest = true; try { res = stmt.executeQuery(byDate ? a : b); } catch (SQLException e) { sqlExceptionLog(e, stmt); } finally { runningRequest = false; }  if (res == null) return new ArrayList<Account>();  List<Account> ret = new ArrayList<Account>(); try { while (res.next()) {  int id = res.getInt(3); Account temp = null; Iterator<Account> it = ret.iterator(); while (it.hasNext() && temp == null) { Account ac = it.next(); if (ac.getId() == id) { temp = ac; } }  if (temp == null) { // add account and retweet ret.add(new Account(id, res.getString(2), new Retweets( (byDate ? res.getDate(4) : null), res.getInt(1), res.getInt(2)))); } else { // add retweets to account Retweets element = new Retweets( (byDate ? res.getDate(""Day"") : null), res.getInt(1), res.getInt(2)); element.setLocationCode(res.getString(""Code"")); temp.addRetweet(element); }  } } catch (SQLException e) { sqlExceptionResultLog(e); return new ArrayList<Account>(); } finally { closeResultAndStatement(stmt, res); }  return ret; } "	0	0	0	1	1	0
"@VisibleForTesting List<File> getAllFilesFromCurrentDirectory() { List<File> result = newArrayList();  File[] files = new File(getWorkPath()).listFiles(); if (files == null) { messageProducer.send(new DebugMessage(this, ""Problems with reading files from current directory: "" + getAbsolutePath())); return result; }  for (File f : files) { if (f.isFile()) { result.add(f); } }  return asList(files); } "	1	0	1	1	1	0
public void step() { for (Simulation simulation : simulations) simulation.update();  // TODO interpret events List<Event> simuEvents = EventRegistry.getEventsOfCategory(EventCategory.SIMULATION);  for (Event event : simuEvents) { if (event.getType() == EventType.SIMU_PLANET_END) { long simuID = Long.parseLong(event.getArgs()[0]); simulations.remove(getSimulationById(simuID));  List<EventCategory> categories = new ArrayList<EventCategory>(1); categories.add(EventCategory.GENETIC_TRAINER); EventRegistry .fire(new Event(EventType.TRAINER_SIMU_END, categories, new String[] { event.getArgs()[0] })); } }  if (simulations.size() == 0) { List<EventCategory> categories = new ArrayList<EventCategory>(1); categories.add(EventCategory.GENETIC_TRAINER); EventRegistry.fire(new Event(EventType.TRAINER_SIMUS_END, categories)); }  for (Event event : simuEvents) { int simuID = Integer.parseInt(event.getArgs()[0]); if (!evalEvents.containsKey(simuID)) evalEvents.put(simuID, new ArrayList<Event>()); evalEvents.get(simuID).add(event); } } 	0	1	0	0	0	0
private Map<String, Object> toResponse(Property property, String typeName){ Map<String, Object> mapping = new HashMap<>(); if(property instanceof ArrayProperty) { mapping.put(property.getName(), toResponse(((ArrayProperty) property).getItems(), typeName)); }else if(property instanceof RefProperty){ Model model = swagger.getDefinitions().get(((RefProperty) property).getSimpleRef()); model.getProperties().forEach((k, v) -> { v.setName(k); Map<String, Object> nested = toResponse(v, typeName); mapping.putAll(nested); });  }else if(property instanceof ObjectProperty){ mapping.putAll(((ObjectProperty)property).getProperties()); ((ObjectProperty) property).getProperties().forEach((k, v) -> { v.setName(k); Map<String, Object> nested = toResponse(v, typeName); mapping.putAll(nested); }); }else{ //baseType? //type -> default mapping.put(property.getName(), mock.eval(getTypeEvalScript(property, typeName))); } return mapping; } 	0	1	0	0	0	0
public boolean needsAuth() { long lastAuthTime = getLastAuthTime(); long now = Calendar.getInstance().getTimeInMillis(); if(lastAuthTime <= now && (now - 30000) < lastAuthTime) { return false; } return true; } 	0	1	0	0	0	0
private void updateListViewFooter(View footer, double income, double expenses) { if (footer == null) { return; } TextView txtIncome = (TextView) footer.findViewById(R.id.textViewIncome); TextView txtExpenses = (TextView) footer.findViewById(R.id.textViewExpenses); TextView txtDifference = (TextView) footer.findViewById(R.id.textViewDifference); //set income txtIncome.setText(currencyUtils.getCurrencyFormatted(currencyUtils.getBaseCurrencyId(), income)); txtIncome.setTypeface(null, Typeface.BOLD_ITALIC); //set expenses txtExpenses.setText(currencyUtils.getCurrencyFormatted(currencyUtils.getBaseCurrencyId(), Math.abs(expenses))); txtExpenses.setTypeface(null, Typeface.BOLD_ITALIC); //set difference txtDifference.setText(currencyUtils.getCurrencyFormatted(currencyUtils.getBaseCurrencyId(), income - Math.abs(expenses))); txtDifference.setTypeface(null, Typeface.BOLD_ITALIC); //change colors Core core = new Core(getActivity().getApplicationContext()); if (income - Math.abs(expenses) < 0) { txtDifference.setTextColor(getResources().getColor(core.resolveIdAttribute(R.attr.holo_red_color_theme))); } else { txtDifference.setTextColor(getResources().getColor(core.resolveIdAttribute(R.attr.holo_green_color_theme))); } } 	1	0	1	0	1	0
public static <E extends AbstractEntity> List<E> mergeLists(List<E> oldList, List<E> newList) { return mergeLists(oldList, newList, null); } 	1	0	1	0	1	0
private double extractMaxNonZeroValue(MemoryMapConfigMemoryItem... item) { double value = 0d; String scale = getRecorder().getScale(); for (MemoryMapConfigMemoryItem it : item) {  if (getRecorder().getShowBytesOnGraph()) { if (it.getTopLevelMemoryMax() != null) { value = value + HexUtils.byteCount(it.getTopLevelMemoryMax(), getRecorder().getWordSize(), scale); if (value > 0d) { return value; } } } else { if (it.getTopLevelMemoryMax() != null) { value = value + HexUtils.byteCount(it.getTopLevelMemoryMax(), getRecorder().getWordSize(), scale); if (value > 0d) { return value; } } } } return value; } 	0	1	0	0	0	0
"private static void upgrade1_1d1(String[] projectIds) { for (int i = 0; i < projectIds.length; i++) { Util.debug(""Upgrading project "" + projectIds[i] + "" from version 1.0 to version 1.1d1"");  String filePath = FileStorage.JN_DOCPATH + projectIds[i] + File.separator + "".tasklist""; Document doc = FileStorage.openDocument(filePath);  Element root = doc.getRootElement(); Elements tasks = root.getChildElements(""task"");  for (int j = 0; j < tasks.size(); j++) { Element task = tasks.get(j );  //	Decided not to change the date format after all but I'm leaving this code here //	in case we need it later. Ryan //                SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd""); // //                Attribute startDateAttr = task.getAttribute(""startDate""); //                Date startDate = (new CalendarDate(startDateAttr.getValue(),""/"")).getDate(); //                startDateAttr.setValue(sdf.format(startDate)); // //                Attribute endDateAttr = task.getAttribute(""endDate""); //                if (endDateAttr != null) { //                    Date endDate = (new CalendarDate(endDateAttr.getValue(),""/"")).getDate(); //                    endDateAttr.setValue(sdf.format(endDate)); //                }  Attribute parentAttr = task.getAttribute(""parent""); if ((parentAttr == null) || (parentAttr.getValue() == """")) { // no parent, do nothing here } else { // put the task under the parent task String parentId = parentAttr.getValue(); for (int k = 0; k < tasks.size(); k++) { Element potentialParent = tasks.get(k); if(parentId.equals(potentialParent.getAttribute(""id"").getValue())) { // found parent, put self under it task.removeAttribute(parentAttr); task.detach(); potentialParent.appendChild(task); } } } } doc.setDocType(getCurrentDocType()); FileStorage.saveDocument(doc,filePath); } } "	0	1	1	0	1	0
"public String getStatus(long researchObjectId, int researchObjectVersion, String archive, String archivePId){  String status =""sent"";  if (archivePId != null && !(archivePId.equals(""""))) status = ""archived""; else status = GetStatusByIds(researchObjectId, researchObjectVersion, archive);  return status; } "	1	0	1	1	1	0
"@RequestMapping(value = ""/content/browse"", method = RequestMethod.GET, headers = ""Accept=application/json"") public SearchResult browse(@RequestParam(value = ""facets"") String facets) {  List<String> facetList = Arrays.asList(facets.split("","")); return contentService.search(new Query(""*:*"", new HashMap<>(), facetList, 0, 10)); } "	1	1	1	1	0	0
"@Override public long makeReservation(Customer customer, Trip trip) { if (trip.getNumberOfAvailable() == 0) { throw new TravelAgencyServiceException(""Requested trip is no longer available.""); }  Reservation reservation = new Reservation(); reservation.setCustomer(customer); reservation.setTrip(trip);  BigDecimal price = trip.getPrice(); for (Excursion excursion : trip.getExcursions()) { price = price.add(excursion.getPrice()); } reservation.setPrice(price);  long createdReservationId = reservationDao.create(reservation);  customer.addReservation(reservation); update(customer); trip.addReservation(reservation); trip.setNumberOfAvailable(trip.getNumberOfAvailable()-1); tripDao.update(trip);  return createdReservationId; } "	0	1	0	0	0	0
@Override public void onClick(View v) { if(!formComment.Validate()) return; IssueArgument intent = new IssueArgument(); intent.setArgument(getArguments());  RedmineConnection connection = ConnectionModel.getItem(getActivity(), intent.getConnectionId()); RedmineJournal journal = new RedmineJournal(); journal.setIssueId((long) intent.getIssueId()); formComment.getValue(journal);  SelectIssueJournalPost post = new SelectIssueJournalPost(getHelper(), connection){ private boolean isSuccess = true; @Override protected void onError(Exception lasterror) { isSuccess = false; ActivityHelper.toastRemoteError(getActivity(), ActivityHelper.ERROR_APP); super.onError(lasterror); } @Override protected void onErrorRequest(int statuscode) { isSuccess = false; ActivityHelper.toastRemoteError(getActivity(), statuscode); super.onErrorRequest(statuscode); } @Override protected void onPostExecute(Void result) { super.onPostExecute(result); if(mSwipeRefreshLayout != null && mSwipeRefreshLayout.isRefreshing()) mSwipeRefreshLayout.setRefreshing(false); if(isSuccess){ Toast.makeText(getActivity(), R.string.remote_saved, Toast.LENGTH_LONG).show(); formComment.clear(); } } }; if(mSwipeRefreshLayout != null && !mSwipeRefreshLayout.isRefreshing()) mSwipeRefreshLayout.setRefreshing(true); post.execute(journal); } 	0	1	0	0	0	0
public static File createDir( Context context, String dirName){ File file = new File(context.getExternalFilesDir(null) + File.separator + dirName); if(!file.exists()){ file.mkdir(); } return file; } 	0	1	0	0	0	0
@Test public void readToStreamShouldSucceed() throws Exception { ReadableBuffer buffer = buffer(); ByteArrayOutputStream stream = new ByteArrayOutputStream(); buffer.readBytes(stream, msg.length()); Arrays.equals(msg.getBytes(UTF_8), stream.toByteArray()); assertEquals(0, buffer.readableBytes()); } 	0	1	0	0	0	0
"@Override public Dialog onCreateDialog(Bundle savedInstanceState) { String tmp = mTextViewBirthday.getText().toString(); String[] arr = tmp.split(""/""); int year = Integer.parseInt(arr[YEAR]); int month = Integer.parseInt(arr[MONTH]); int day = Integer.parseInt(arr[DAY]); return new DatePickerDialog(getActivity(), this, year, month, day); } "	1	0	1	1	1	0
private ResolvableToSingleWithRelationships getResolvableFromCanonicalPath(CanonicalPath cPath) { Tenants.Single tenant = inventory.tenants().get(getTenantId()); ResolvableToSingleWithRelationships resolvable = tenant; if (cPath.getEnvironmentId() != null) { Environments.Single env = tenant.environments().get(cPath.getEnvironmentId()); if (cPath.getFeedId() != null) { if (cPath.getResourceId() != null) { resolvable = env.feeds().get(cPath.getFeedId()).resources().get(cPath.getResourceId()); } else if (cPath.getMetricId() != null) { resolvable = env.feeds().get(cPath.getFeedId()).metrics().get(cPath.getMetricId()); } else { resolvable = env.feeds().get(cPath.getFeedId()); } } else if (cPath.getResourceId() != null) { resolvable = env.feedlessResources().get(cPath.getResourceId()); } else if (cPath.getMetricId() != null) { resolvable = env.feedlessMetrics().get(cPath.getMetricId()); } else { resolvable = env; } } else if (cPath.getResourceTypeId() != null) { resolvable = tenant.resourceTypes().get(cPath.getResourceTypeId()); } else if (cPath.getMetricTypeId() != null) { resolvable = tenant.resourceTypes().get(cPath.getMetricTypeId()); } return resolvable; } 	0	1	0	0	0	0
"@Test public void saveAndLoadWithSchema() { Map<String, String> options = new HashMap<String, String>(); options.put(""path"", path.toString()); df.save(""org.apache.spark.sql.json"", SaveMode.ErrorIfExists, options);  List<StructField> fields = new ArrayList<>(); fields.add(DataTypes.createStructField(""b"", DataTypes.StringType, true)); StructType schema = DataTypes.createStructType(fields); DataFrame loadedDF = sqlContext.load(""org.apache.spark.sql.json"", schema, options);  checkAnswer(loadedDF, sqlContext.sql(""SELECT b FROM jsonTable"").collectAsList()); } "	1	0	1	0	1	0
"Component getMenuHeader() { Label name = new Label(""Vaadin App Layout""); name.addStyleName(ValoTheme.LABEL_H4); Label description = new Label(""Version 0.8.6""); description.addStyleName(ValoTheme.LABEL_SMALL); VerticalLayout layout = new VerticalLayout(getResourceButton(), name, description); layout.addStyleName(APP_LAYOUT_MENU_BAR_ELEMENT); layout.setMargin(false); layout.setSpacing(false); layout.setMargin(new MarginInfo(true, false)); return layout; } "	0	1	1	1	1	0
"@Override public synchronized void run() { if (System.currentTimeMillis() - lastFlush >= batchTimeout && batch != batchSize) { logger.trace(""[{}] Flush timeout occurred"", name); flush(); } } "	1	0	1	0	1	0
protected static void setupBasicSettings(final Activity activity, final Intent intent, Preference themePreference, Preference onlyWiFiPreference) { themePreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() { @Override public boolean onPreferenceChange(Preference preference, Object newValue) { if (KEY_THEME.equals(preference.getKey())) { Utils.updateTheme((String) newValue);  TaskStackBuilder.create(activity) .addNextIntent(new Intent(activity, MainActivity.class)) .addNextIntent(intent) .startActivities(); } return true; } }); setListPreferenceSummary((ListPreference) themePreference);  ((CheckBoxPreference)onlyWiFiPreference).setChecked(MMoviesPreferences.isLargeDataOverWifiOnly(activity.getApplicationContext())); } 	0	1	0	0	0	0
"private void handleItemEvents(final MapViewHolder mapViewHolder, final int position) {  final ChatMessage model = getData().get(position); mapViewHolder.chatMessageView.setBackgroundColor(ContextCompat.getColor(currContext, isSelected(position) ? R.color.translucent_blue : android.R.color.transparent));  if (model != null) { try { final MapHelper mapHelper = new MapHelper(model.getContent()); mapViewHolder.text.setText(mapHelper.getDisplayText()); mapViewHolder.timestampTextView.setText(model.getTimeStamp()); Glide.with(currContext).load(mapHelper.getMapURL()).into(mapViewHolder.mapImage); mapViewHolder.mapImage.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { mapViewHolder.onClick(v);  if (AndroidHelper.isGoogleMapsInstalled(currContext) && mapHelper.isParseSuccessful()) { Uri gmmIntentUri = Uri.parse(String.format(""geo:%s,%s?z=%s"", mapHelper.getLattitude(), mapHelper.getLongitude(), mapHelper.getZoom())); Intent mapIntent = new Intent(Intent.ACTION_VIEW, gmmIntentUri); mapIntent.setPackage(AndroidHelper.GOOGLE_MAPS_PKG); currContext.startActivity(mapIntent); } else { Intent mapIntent = new Intent(Intent.ACTION_VIEW); mapIntent.setData(Uri.parse(mapHelper.getWebLink())); currContext.startActivity(mapIntent); } } });  if (highlightMessagePosition == position) { String text = mapViewHolder.text.getText().toString(); SpannableString modify = new SpannableString(text); Pattern pattern = Pattern.compile(query, Pattern.CASE_INSENSITIVE); Matcher matcher = pattern.matcher(modify); while (matcher.find()) { int startIndex = matcher.start(); int endIndex = matcher.end(); modify.setSpan(new BackgroundColorSpan(Color.parseColor(""#2b3c4e"")), startIndex, endIndex, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); } mapViewHolder.text.setText(modify); }  } catch (Exception e) { e.printStackTrace(); } } } "	0	1	0	0	0	0
public void update() { if (Gdx.input.justTouched()) { camera.unproject(touchPoint.set(Gdx.input.getX(), Gdx.input.getY(), 0)); if (playBounds.contains(touchPoint.x, touchPoint.y)) { GameScreen gameScreen = new GameScreen(game); game.setScreen(gameScreen); return; } if (exitBounds.contains(touchPoint.x, touchPoint.y)) { Gdx.app.exit(); } } } 	0	1	0	0	0	0
"public void pollValues(){ for(Controller c : pollValues.keySet()){ c.poll(); EventQueue queue = c.getEventQueue(); Event event = new Event(); while(queue.getNextEvent(event)){ if(debugOutput) System.out.println(""HvlControllerProfile: Controller event at: "" + event.getComponent().getName() + "" with a value of "" + event.getValue()); for(String s : staticPollValues){ if(event.getComponent().getName().contains(staticPollAnnotations.get(s).component())){ float value = event.getValue(); if(Math.abs(value) < Math.abs(staticPollAnnotations.get(s).deadZone())) value = 0; value *= staticPollAnnotations.get(s).amplifier(); value = HvlMath.constrain(value, staticPollAnnotations.get(s).min(), staticPollAnnotations.get(s).max()); ArrayList<Float> list = pollValues.get(c); list.set(staticPollValues.indexOf(s), value); pollValues.put(c, list); } } } } } "	0	1	0	0	0	0
@Override public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) { Daily news = mNewsList.get(position); switch (holder.getItemViewType()) { case ITEM_TYPE_TEXT: ((ThemeViewHolder) holder).mTitle.setText(news.title); break; case ITEM_TYPE_IMAGE: ((ImageViewHolder) holder).mTitle.setText(news.title); Glide.with(mContext).load(news.images.get(0)).into(((ImageViewHolder) holder).mCover); break; } } 	0	1	0	0	0	0
private void addRoomsInfoToConfirmPage(){ SearchRoomSO defaultRoomData = new SearchRoomSO(); defaultRoomData.setFirstName(etWizardFirstName.getText().toString()); defaultRoomData.setLastName(etWizardLastName.getText().toString()); defaultRoomData.setBedType(availableRooms.getRoomSO().get(0).getBeds().get(0).getBedDescript()); defaultRoomData.setBedTypeId(availableRooms.getRoomSO().get(0).getBeds().get(0).getId());  ConfirmRoomsInfoAdapter confirmRoomsInfoAdapter = new ConfirmRoomsInfoAdapter(getActivity(), rooms, defaultRoomData); confirmRoomInfoList.setAdapter(confirmRoomsInfoAdapter); setListViewHeightBasedOnChildren(wizardRoomsList); } 	1	1	0	1	1	0
/** */ @Test public void kNormTest() { for (double pow : new double[] {0, 0.5, 1, 2, 2.5, Double.POSITIVE_INFINITY}) toDoubleTest(ref -> new Norm(ref, pow).calculate(), v -> v.kNorm(pow)); } 	0	1	0	1	1	0
"public List<String> getIgnores() throws IOException { List<String> ignores = new ArrayList<String>(); File dockerIgnoreFile = new File(getDockerFolder(), "".dockerignore""); if (dockerIgnoreFile.exists()) { int lineNumber = 0; List<String> dockerIgnoreFileContent = FileUtils.readLines(dockerIgnoreFile); for (String pattern : dockerIgnoreFileContent) { lineNumber++; pattern = pattern.trim(); if (pattern.isEmpty()) { continue; // skip empty lines } pattern = FilenameUtils.normalize(pattern); try { ignores.add(pattern); } catch (GoLangFileMatchException e) { throw new DockerClientException(String.format( ""Invalid pattern '%s' on line %s in .dockerignore file"", pattern, lineNumber)); } } } return ignores; } "	0	1	0	0	0	0
"public void startTracking() { if (!this.isTracking) { Log.d(""JC"", ""TrackingManager: Starting to track""); bikeLocationService.addGPSListener(this); this.curLocationList = new ArrayList<Location>(); this.isTracking = true; } } "	0	1	0	0	0	0
"public void stopTracking(boolean override) { // We stop the tracking, either if we've not manually overridden, or if we // locally overrode the override. This nomenclature sucks. if (this.isTracking && (!manualOverride || override)) { Log.d(""JC"", ""TrackingManager: Stopping track""); bikeLocationService.removeGPSListener(this); this.isTracking = false;  makeAndSaveTrack();  // If we just stopped, manualOverride should be false, regardless whether // we came from an overridden state or not. this.manualOverride = false; } } "	0	1	0	0	0	0
private void removeObserverInternal() { observerCount--; if (observerCount == 0) { choreographer.removeFrameCallback(this); sampledVsyncTimeNs = 0; } } 	0	1	1	0	1	0
private void addObserverInternal() { observerCount++; if (observerCount == 1) { choreographer.postFrameCallback(this); } } 	0	1	1	0	1	0
private void init() { setOrientation(LinearLayout.VERTICAL);  nodeContainer = new RelativeLayout(getContext()); nodeContainer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT)); nodeContainer.setId(R.id.node_header);  ContextThemeWrapper newContext = new ContextThemeWrapper(getContext(), containerStyle); nodeItemsContainer = new LinearLayout(newContext); nodeItemsContainer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT)); nodeItemsContainer.setId(R.id.node_items); nodeItemsContainer.setOrientation(LinearLayout.VERTICAL); nodeItemsContainer.setVisibility(View.GONE);  addView(nodeContainer); addView(nodeItemsContainer); } 	0	1	0	0	0	0
"@Override public String toString() { return String.format(""(%d, %d)"", x, y); } "	1	0	1	1	1	0
private void addLong(final String aKey, final long aDefaultValue) { final String value = properties.getProperty(aKey, Long.toString(aDefaultValue)); final SimpleLongProperty prop = new SimpleLongProperty(aDefaultValue); prop.set(Long.parseLong(value)); prop.addListener((aObs, aOld, aNew) -> { properties.setProperty(aKey, Long.toString(aNew.intValue())); persist(); }); propertiesMap.put(aKey, prop); } 	0	1	1	1	1	0
@Nullable public Model findFirst() { return realmQuery.findAll().first(null); } 	1	0	1	0	1	0
"private void getDistinctValuesbyParsing(String queryName,HpccConnection hpccConnection, Map<String, Set<String>> inputParamValues) throws IOException, ParserConfigurationException, SAXException { StringBuilder urlBuilder = new StringBuilder(); if (hpccConnection.getIsSSL()) { urlBuilder.append(Constants.HTTPS); } else { urlBuilder.append(Constants.HTTP); } urlBuilder.append(hpccConnection.getHostIp()) .append("":"") .append(hpccConnection.getWsEclPort()) .append(""/WsEcl/submit/query/"") .append(hpccConnection.getClusterType()) .append(""/"") .append(queryName) .append(""/xml?"");  URL url = new URL(urlBuilder.toString()); URLConnection urlConnection = url.openConnection(); String authString = hpccConnection.getUsername() + "":"" + hpccConnection.getPassword(); String authStringEnc = new String(Base64.encodeBase64(authString.getBytes())); urlConnection.setRequestProperty(AUTHORIZATION, BASIC + authStringEnc);  if (LOG.isDebugEnabled()) { LOG.debug(""URL ->"" + url); }  final InputStream respone = urlConnection.getInputStream();  if (respone != null) { final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); final DocumentBuilder db = dbf.newDocumentBuilder(); final Document doc = db.parse(respone);  Node fstNode = null; Element fstElmnt = null, lstNmElmnt = null; NodeList lstNmElmntLst = null;   final NodeList nodeList = doc.getElementsByTagName(""Row""); for (int s = 0; s < nodeList.getLength(); s++) { fstNode = nodeList.item(s); if (fstNode.getNodeType() == Node.ELEMENT_NODE) {  fstElmnt = (Element) fstNode; for (Entry<String,Set<String>> entry: inputParamValues.entrySet()) { lstNmElmntLst = fstElmnt.getElementsByTagName(StringUtils.removeEndIgnoreCase(entry.getKey(), ""in"")); lstNmElmnt = (Element) lstNmElmntLst.item(0); if (lstNmElmnt != null) { entry.getValue().add(lstNmElmnt.getTextContent()); } } } } }  } "	0	1	0	0	0	0
protected EmbeddedBroker serverForId(int id) { return broker(Integer.toString(id)); } 	1	0	1	0	0	0
"@Override public void afterPropertiesSet() { geofld = properties.get(""geofld"").getValueAsString(); newdef = properties.get(""newDef"").getValueAsString(); accuracy = (Integer)properties.get(""accuracy"").getValue(); try { FieldDefinition fd = new DefaultFieldDefinition(""mgrs"", FieldType.String); fds = new ArrayList<FieldDefinition>(); fds.add(fd); } catch (ConfigurationException e) { // TODO Auto-generated catch block e.printStackTrace(); } } "	0	1	0	0	0	0
@Bean public EnableRedisKeyspaceNotificationsInitializer enableRedisKeyspaceNotificationsInitializer(RedisConnectionFactory connectionFactory) { return new EnableRedisKeyspaceNotificationsInitializer(connectionFactory, configureRedisAction); } 	0	0	0	0	0	1
"@Override protected String calculateIndividualTuidDelegator(final EObject obj) throws IllegalArgumentException { for (String attributeName : this.attributeNames) { final String attributeValue = EcoreBridge.getStringValueOfAttribute(obj, attributeName); if (null != attributeValue) { String subTuid = (obj.eContainingFeature() == null ? ""<root>"" : obj.eContainingFeature().getName()) + SUBDIVIDER + obj.eClass().getName() + SUBDIVIDER + attributeName + ""="" + attributeValue; return subTuid; } else { EStructuralFeature idFeature = obj.eClass().getEStructuralFeature(attributeName); if (idFeature != null && !obj.eIsSet(idFeature)) { return attributeName; } } }  throw new RuntimeException( ""None of '"" + String.join(""', '"", this.attributeNames) + ""' found for eObject '"" + obj + ""'""); } "	0	0	0	0	0	1
private List<Integer> calculateLastColumnsForPages(float[] relativeWidths) { List<Integer> lastColumnsForPages = new LinkedList<>(); lastColumnsForPages.add(1);  float totalColumnsWidth = 0;  for (int i = 1; i < relativeWidths.length; i++) { if (totalColumnsWidth + relativeWidths[i] > PAGE_WIDTH - relativeWidths[0]) { lastColumnsForPages.add(i); totalColumnsWidth = 0; } totalColumnsWidth += relativeWidths[i]; }  lastColumnsForPages.add(-1); return lastColumnsForPages; } 	1	0	1	1	1	0
"@Override protected ISpoofaxAnalyzeResults analyzeAll(Map<String,ISpoofaxParseUnit> changed, Map<String,ISpoofaxParseUnit> removed, IMultiFileScopeGraphContext context, HybridInterpreter runtime, String strategy) throws AnalysisException { String globalSource = context.location().getName().getURI();  for (String input : removed.keySet()) { context.removeUnit(input); }  // initial InitialResult initialResult; if (context.initialResult().isPresent()) { initialResult = context.initialResult().get(); } else { IStrategoTerm initialResultTerm = doAction(strategy, actionBuilder.initialOf(globalSource), context, runtime); initialResult = ResultTerms.initialOf().match(strategoTerms.fromStratego(initialResultTerm)).orElseThrow( () -> new AnalysisException(context, ""Invalid initial results."")); context.setInitialResult(initialResult); }  // units final Map<String,IStrategoTerm> astsByFile = Maps.newHashMap(); final Multimap<String,IMessage> ambiguitiesByFile = HashMultimap.create(); final Multimap<String,IMessage> failuresByFile = HashMultimap.create(); for (Map.Entry<String,ISpoofaxParseUnit> input : changed.entrySet()) { String source = input.getKey(); ISpoofaxParseUnit parseUnit = input.getValue();  IMultiFileScopeGraphUnit unit = context.unit(source); unit.clear();  try { IStrategoTerm unitResultTerm = doAction(strategy, actionBuilder.unitOf(source, parseUnit.ast(), initialResult.getArgs()), context, runtime); UnitResult unitResult = ResultTerms.unitOf().match(strategoTerms.fromStratego(unitResultTerm)) .orElseThrow(() -> new MetaborgException(""Invalid unit results."")); IStrategoTerm analyzedAST = strategoTerms.toStratego(unitResult.getAST()); astsByFile.put(source, analyzedAST); ambiguitiesByFile.putAll(source, analysisCommon.ambiguityMessages(parseUnit.source(), analyzedAST)); unit.setUnitResult(unitResult); } catch (MetaborgException e) { logger.warn(""File analysis failed."", e); failuresByFile.put(source, MessageFactory.newAnalysisErrorAtTop(parseUnit.source(), ""File analysis failed."", e)); } }  // solve final List<Iterable<IConstraint>> constraints = Lists.newArrayList(); context.initialResult().ifPresent(i -> constraints.add(i.getConstraints())); for (IMultiFileScopeGraphUnit unit : context.units()) { unit.unitResult().ifPresent(u -> constraints.add(u.getConstraints())); } Solution solution; try { solution = Solver.solve(Iterables.concat(constraints)); } catch (UnsatisfiableException e) { throw new AnalysisException(context, e); } context.setSolution(solution);  // final IStrategoTerm finalResultTerm = doAction(strategy, actionBuilder.finalOf(globalSource), context, runtime); FinalResult finalResult = ResultTerms.finalOf().match(strategoTerms.fromStratego(finalResultTerm)).orElseThrow( () -> new AnalysisException(context, ""Invalid final results."")); context.setFinalResult(finalResult);  // errors Multimap<String,IMessage> errorsByFile = messagesByFile(solution.getErrors(), MessageSeverity.ERROR); Multimap<String,IMessage> warningsByFile = messagesByFile(solution.getWarnings(), MessageSeverity.WARNING); Multimap<String,IMessage> notesByFile = messagesByFile(solution.getNotes(), MessageSeverity.NOTE); final Collection<ISpoofaxAnalyzeUnit> results = Lists.newArrayList(); final Collection<ISpoofaxAnalyzeUnitUpdate> updateResults = Lists.newArrayList(); for (IMultiFileScopeGraphUnit unit : context.units()) { final String source = unit.resource(); final Collection<IMessage> errors = errorsByFile.get(source); final Collection<IMessage> warnings = warningsByFile.get(source); final Collection<IMessage> notes = notesByFile.get(source); final Collection<IMessage> ambiguities = ambiguitiesByFile.get(source); final Collection<IMessage> messages = Lists.newArrayListWithCapacity(errors.size() + warnings.size() + notes .size() + ambiguities.size()); messages.addAll(errors); messages.addAll(warnings); messages.addAll(notes); messages.addAll(ambiguities); if (changed.containsKey(source)) { results.add(unitService.analyzeUnit(changed.get(source), new AnalyzeContrib(true, errors.isEmpty(), true, astsByFile.get(source), messages, -1), context)); } else { FileObject file = resourceService.resolve(source); updateResults.add(unitService.analyzeUnitUpdate(file, new AnalyzeUpdateData(messages), context)); } }  return new SpoofaxAnalyzeResults(results, updateResults, context); } "	0	0	0	0	0	1
"@Override public void validate(Section section) { int sectionCharNumber = 0;  for (Paragraph currentParagraph : section.getParagraphs()) { for (Sentence sentence : currentParagraph.getSentences()) { sectionCharNumber += sentence.getContent().length(); } }  if (sectionCharNumber > getInt(""max_num"")) { addLocalizedError(section.getJoinedHeaderContents(), sectionCharNumber); } } "	0	1	0	0	0	0
"@Test public void testSectionValidatorWithSimpleDocument() throws RedPenException { List<Document> documents = new ArrayList<>();  documents.add(Document.builder() .setFileName(""tested file"") .addSection(0) .addSectionHeader(""foobar"") .addParagraph() .addSentence(new Sentence(""it is a piece of a cake."", 1)) .addSentence(new Sentence(""that is also a piece of a cake."", 2)) .build());  RedPen redPen = getRedPenWithSectionValidator(); List<ValidationError> errors = redPen.validate(documents).get(documents.get(0));  // validate the errors assertEquals(1, errors.size()); for (ValidationError error : errors) { assertThat(error.getValidatorName(), is(""SectionLength"")); assertThat(error.getMessage(), containsString(""The number of characters in the section exceeds the maximum of"")); } } "	0	0	0	0	0	1
@Override public byte[] inflate(InputStream data) throws CompressionException { ByteArrayOutputStream out = new ByteArrayOutputStream(); try (SnappyInputStream snappy = new SnappyInputStream(data)) { IOUtils.copy(snappy, out); } catch (IOException e) { throw new CompressionException(CompressionConstants.DECODING_ERROR + getContentEncodingName(), e); } return out.toByteArray(); } 	0	0	0	0	0	1
"@Override public List<ListenableFuture<Void>> call() { List<ListenableFuture<Void>> futures = new ArrayList<>() ; this.meshedDpnList = ItmUtils.getTunnelMeshInfo(dataBroker) ; futures.addAll( ItmInternalTunnelDeleteWorker.deleteTunnels(dataBroker, idManagerService, mdsalManager, delDpnList, meshedDpnList)); logger.debug(""Invoking Internal Tunnel delete method with DpnList to be deleted {} ; Meshed DpnList {} "",delDpnList, meshedDpnList ); // IF EXTERNAL TUNNELS NEEDS TO BE DELETED, DO IT HERE, IT COULD BE TO DC GATEWAY OR TOR SWITCH List<DcGatewayIp> dcGatewayIpList = ItmUtils.getDcGatewayIpList(dataBroker); if(dcGatewayIpList != null && !dcGatewayIpList.isEmpty()){ List<DPNTEPsInfo>  dpnDeleteList = new ArrayList<>(); for( DPNTEPsInfo dpnTEPInfo : delDpnList){ List<TunnelEndPoints> tunnelEndPointsList = dpnTEPInfo.getTunnelEndPoints(); if(tunnelEndPointsList.size() == 1){ dpnDeleteList.add(dpnTEPInfo); } else{ logger.error(""DPNTEPInfo not available in data store for dpnId"" + dpnTEPInfo.getDPNID() + "". Unable to delete external tunnel for dpn ""); } } for(DcGatewayIp dcGatewayIp : dcGatewayIpList){ futures.addAll(ItmExternalTunnelDeleteWorker.deleteTunnels(dataBroker, idManagerService,  dpnDeleteList, dcGatewayIp.getIpAddress(), dcGatewayIp.getTunnnelType())); } }  futures.addAll(ItmExternalTunnelDeleteWorker.deleteHwVtepsTunnels(dataBroker, idManagerService,delDpnList,cfgdHwVteps, this.originalTZone)); return futures ; } "	0	1	0	0	0	0
"@Override public void setupSchedule() { final ScheduleAdapter adapter = schedulePresenter.buildScheduleAdapter();  try { if (getActivity() == null) return; getActivity().runOnUiThread(() -> { tvStatus.setVisibility(TextView.VISIBLE); tvTitleSlidingUpPanel.setText(""Loading...""); recyclerView.setVisibility(RecyclerView.VISIBLE); recyclerView.setLayoutManager(new LinearLayoutManager(getActivity().getApplicationContext())); recyclerView.setItemAnimator(new DefaultItemAnimator()); recyclerView.setAdapter(adapter); setDate(schedulePresenter.getDate()); if (adapter.getItemCount() == 0) { tvStatus.setText(getActivity().getResources().getString(R.string.empty_text)); tvStatus.setTextColor(getActivity().getResources().getColor(R.color.color_accent)); } else { tvStatus.setVisibility(TextView.GONE); } }); } catch (NullPointerException e) { } slidingUpPanelLayout = setupSlidingUpPanelLayout(); setupMaterialCalendarView(recyclerView, slidingUpPanelLayout); } "	1	0	1	0	1	0
private int handleOperator(FormatStd std, char[] cs, FastStringBuffer buf, ParsingUtils parsingUtils, int i, char c) { //let's discover if it's an unary operator (~ + -) boolean isUnaryWithContents = true;  boolean isUnary = false; boolean changeWhitespacesBefore = true; if (c == '~' || c == '+' || c == '-') { //could be an unary operator... String trimmedLastWord = buf.getLastWord().trim(); isUnary = trimmedLastWord.length() == 0 || PySelection.ALL_KEYWORD_TOKENS.contains(trimmedLastWord);  if (!isUnary) { for (char itChar : buf.reverseIterator()) { if (itChar == ' ' || itChar == '\t') { continue; }  switch (itChar) { case '[': case '{': case '=': changeWhitespacesBefore = false;  case '(': case ':': isUnaryWithContents = false;  case '>': case '<':  case '-': case '+': case '~':  case '*': case '/': case '%': case '!': case '&': case '^': case '|': case ',': isUnary = true; } break; } } else { isUnaryWithContents = buf.length() > 0; } }  //We don't want to change whitespaces before in a binary operator that is in a new line. for (char ch : buf.reverseIterator()) { if (!Character.isWhitespace(ch)) { break; } if (ch == '\r' || ch == '\n') { changeWhitespacesBefore = false; break; } }  if (changeWhitespacesBefore) { while (buf.length() > 0 && (buf.lastChar() == ' ' || buf.lastChar() == ' ')) { buf.deleteLast(); } }  boolean surroundWithSpaces = std.operatorsWithSpace;  if (changeWhitespacesBefore) { //add spaces before if (isUnaryWithContents && surroundWithSpaces) { buf.append(' '); } }  char localC = c; char prev = '\0'; boolean backOne = true; while (isOperatorPart(localC, prev)) { buf.append(localC); prev = localC; i++; if (i == cs.length) { break; } localC = cs[i]; if (localC == '=') { //when we get to an assign, we have found a full stmt (with assign) -- e.g.: a \\=  a += a == buf.append(localC); backOne = false; break; } } if (backOne) { i--; }  //add space after only if it's not unary if (!isUnary && surroundWithSpaces) { buf.append(' '); }  i = parsingUtils.eatWhitespaces(null, i + 1); return i; } 	0	0	0	0	0	1
"public boolean isPayedOrder(String orderId) { LOG.debug(""Enter. OrderId: {}."", orderId);  boolean result = true;  PayedOrder order = repository.findOne(PayedOrderSpecification.exist(orderId));  if (order != null) { result = false; }  LOG.debug(""Exit. Result: {}."", result); return result; } "	1	0	1	1	1	0
"@SuppressWarnings(""rawtypes"") public static Variable getVariable(String varname, String typename, String params) { if (typename.equalsIgnoreCase(""Boolean"")) { return Predef.Boolean(varname); } if (typename.equalsIgnoreCase(""String"")) { String[] values = params.split("";""); return Predef.Nominal(values, varname); } if (typename.equalsIgnoreCase(""Number"")) { try { Integer max = Integer.parseInt(params); return Predef.Number(max, varname); } catch (NumberFormatException e) { e.printStackTrace(); return null; } } if (typename.equalsIgnoreCase(""Amino acid"")) { return Predef.AminoAcid(varname); } if (typename.equalsIgnoreCase(""Amino acid extended"")) { return Predef.AminoAcid(varname); } if (typename.equalsIgnoreCase(""Nucleic acid"")) { return Predef.NucleicAcid(varname); } if (typename.equalsIgnoreCase(""Real"")) { return Predef.Real(varname); } if (typename.equalsIgnoreCase(""Distrib"")) { String[] values = params.split("";""); if (values.length > 1) return Predef.Distrib(values, varname); else if (!isParameterised(values[0]) && isEnumerable(values[0])) { try { Variable temp = getVariable(""temp"", values[0], null); return Predef.Distrib((Enumerable)temp.getDomain(), varname); } catch (RuntimeException ex) { throw new RuntimeException(""Invalid specification of variable: "" + varname); } } } throw new RuntimeException(""Invalid specification of variable: "" + varname); } "	0	0	0	0	0	1
@Override public void onScrolled(RecyclerView recyclerView, int dx, int dy) { View firstView = findStartView(recyclerView); if (firstView == null) { clearStickyHeader(); return; }  //Retrieve the child position for the view Integer childPosition = (Integer) firstView.getTag(R.id.recyclerext_view_child_position); if (childPosition == null) { return; }  //If the next header is different than the current one, perform the swap long headerId = getHeaderId(adapter, childPosition); if (headerId != currentStickyId && headerId != RecyclerView.NO_ID) { performHeaderSwap(headerId); } } 	1	1	1	0	1	0
"@Test public void testAmbiguousConstructor1() { assertMethod(""Lmethodlocator/Samples;.Samples(QString;)V"", ""<init>"", ""(Ljava/lang/String;)V""); } "	0	0	0	0	0	1
"@Test public void testUnambiguousConstructor() { assertMethod(""Lmethodlocator/Samples;.Samples()V"", ""<init>"", ""()V""); } "	0	0	0	0	0	1
"@POST @Path(""/ok"") public List<String> ok(OkRepresentation rep) { return ImmutableList.of(rep.getMessage()); } "	0	0	0	0	0	1
"public void performActualSuperres(Mat[] rgbInputMatList, Integer[] inputIndices, int bestIndex, boolean debugMode) { boolean performDenoising = ParameterConfig.getPrefsBoolean(ParameterConfig.DENOISE_FLAG_KEY, false);  if(performDenoising) { ProgressDialogHandler.getInstance().showProcessDialog(""Denoising"", ""Performing denoising"", 20.0f);  //perform denoising on original input list DenoisingOperator denoisingOperator = new DenoisingOperator(rgbInputMatList); denoisingOperator.perform(); MatMemory.releaseAll(rgbInputMatList, false); rgbInputMatList = denoisingOperator.getResult();  } else { Log.d(TAG, ""Denoising will be skipped!""); }   int srChoice = ParameterConfig.getPrefsInt(ParameterConfig.SR_CHOICE_KEY, FusionConstants.FULL_SR_MODE); if(srChoice == FusionConstants.FULL_SR_MODE) { this.performFullSRMode(rgbInputMatList, inputIndices, bestIndex, debugMode); } else { MatMemory.releaseAll(rgbInputMatList, false); MatMemory.cleanMemory(); this.performFastSRMode(bestIndex, debugMode); }   } "	0	0	0	0	0	1
"private void processPartitionedTable(ConvertibleHiveDataset hiveDataset, AutoReturnableObject<IMetaStoreClient> client) throws IOException {  // Get partitions for the table List<Partition> sourcePartitions = HiveUtils.getPartitions(client.get(), hiveDataset.getTable(), Optional.<String> absent());  for (final String format : hiveDataset.getDestFormats()) { Optional<ConvertibleHiveDataset.ConversionConfig> conversionConfigOptional = hiveDataset.getConversionConfigForFormat(format);  if (conversionConfigOptional.isPresent()) {  // Get conversion config ConvertibleHiveDataset.ConversionConfig conversionConfig = conversionConfigOptional.get(); String orcTableName = conversionConfig.getDestinationTableName(); String orcTableDatabase = conversionConfig.getDestinationDbName(); Pair<Optional<org.apache.hadoop.hive.metastore.api.Table>, Optional<List<Partition>>> destinationMeta = getDestinationTableMeta(orcTableDatabase, orcTableName, this.props);  // Validate each partition for (final Partition sourcePartition : sourcePartitions) { try { final long updateTime = this.updateProvider.getUpdateTime(sourcePartition); if (shouldValidate(sourcePartition)) { log.info(String.format(""Validating partition: %s"", sourcePartition.getCompleteName()));  // Generate validation queries final List<String> countValidationQueries = HiveValidationQueryGenerator.generateCountValidationQueries(hiveDataset, Optional.of(sourcePartition), conversionConfig); final List<String> dataValidationQueries = Lists.newArrayList(HiveValidationQueryGenerator.generateDataValidationQuery(hiveDataset.getTable().getTableName(), hiveDataset.getTable() .getDbName(), destinationMeta.getKey().get(), Optional.of(sourcePartition)));  this.futures.add(this.exec.submit(new Callable<Void>() { @Override public Void call() throws Exception {  // Execute validation queries log.debug(String.format(""Going to execute count validation queries queries: %s for format: %s "" + ""and partition %s"", countValidationQueries, format, sourcePartition.getCompleteName())); List<Long> rowCounts = ValidationJob.this.getValidationOutputFromHive(countValidationQueries); log.debug(String.format(""Going to execute data validation queries: %s for format: %s and partition %s"", dataValidationQueries, format, sourcePartition.getCompleteName())); List<Long> rowDataValidatedCount = ValidationJob.this.getValidationOutputFromHive(dataValidationQueries);  // Validate and populate report validateAndPopulateReport(sourcePartition.getCompleteName(), updateTime, rowCounts, rowDataValidatedCount.get(0));  return null; } }));  } else { log.debug(String.format(""Not validating partition: %s as updateTime: %s is not in range of max look back: %s "" + ""and skip recent than: %s"", sourcePartition.getCompleteName(), updateTime, this.maxLookBackTime, this.skipRecentThanTime)); } } catch (UncheckedExecutionException e) { log.warn(String.format(""Not validating partition: %s as update time was not found. %s"", sourcePartition.getCompleteName(), e.getMessage())); } } } else { log.info(String.format(""No conversion config found for format %s. Ignoring data validation"", format)); } } } "	0	0	0	0	0	1
"@Override public Object call() throws Exception { if (!cmdUp.getStartConsul()) { return null; } String mesosConsul = """"; try { mesosConsul = IOUtils.toString(Thread.currentThread().getContextClassLoader().getResourceAsStream(""marathon/mesos-consul.json""), ""UTF-8""); MesosCluster.executeMarathonTask(clusterId, mesosConsul .replace(""{{MINIMESOS_ZOOKEEPER}}"", ZooKeeper.formatZKAddress(MesosCluster.getContainerIp(clusterId, ""zookeeper""))) .replace(""{{MINIMESOS_CONSUL_IP}}"", MesosCluster.getContainerIp(clusterId, ""consul""))); } catch (Exception e) { LOGGER.error(""Can't start marathon task: "" + e.getMessage()); } return null; } "	0	0	0	0	0	1
"@Override public RamlInterpretationResult interpret(RamlRoot document, TypeDeclaration type, JCodeModel builderModel, PojoGenerationConfig config) { RamlInterpretationResult result = new RamlInterpretationResult(type.required());  if (type instanceof StringTypeDeclaration) { StringTypeDeclaration stringType = (StringTypeDeclaration) type; //do stringy stuff - enums and stuff. RamlTypeValidations validations = result.getValidations(); validations.withPattern(stringType.pattern()); validations.withLenghts(stringType.minLength(), stringType.maxLength());  //Create and handle Enums here if(stringType.enumValues() != null && !stringType.enumValues().isEmpty()) { //We have an enum. we need to create it and set it String enumName = stringType.type(); if (stringType.type().equals(""string"")) { enumName = stringType.name(); } EnumBuilder builder = new EnumBuilder(config, builderModel, enumName); builder.withEnums(stringType.enumValues()); result.setBuilder(builder); result.setCodeModel(builderModel); }  } if (result.getBuilder() == null) { result.setResolvedClass(CodeModelHelper.findFirstClassBySimpleName(builderModel, ""java.lang.String"")); }  return result; } "	0	1	0	0	0	0
public void setGaplists(String[] gaplists) { this.gaplists = gaplists; } 	0	0	0	0	0	1
public static PhysicalGameState melee8x8Mixed4() { PhysicalGameState pgs = new PhysicalGameState(8,8);  Player p0 = new Player(0,0); Player p1 = new Player(1,0); pgs.addPlayer(p0); pgs.addPlayer(p1);  Unit l0 = new Unit(0,heavyType,1,1); Unit l1 = new Unit(0,lightType,2,1); Unit l2 = new Unit(0,heavyType,1,2); Unit l3 = new Unit(0,lightType,2,2); Unit l4 = new Unit(1,lightType,5,5); Unit l5 = new Unit(1,lightType,5,6); Unit l6 = new Unit(1,heavyType,6,5); Unit l7 = new Unit(1,heavyType,6,6); pgs.addUnit(l0); pgs.addUnit(l1); pgs.addUnit(l2); pgs.addUnit(l3); pgs.addUnit(l4); pgs.addUnit(l5); pgs.addUnit(l6); pgs.addUnit(l7);  return pgs; } 	0	0	0	0	0	1
public static PhysicalGameState basesWorkersBarracks8x8() { PhysicalGameState pgs = new PhysicalGameState(8,8);  Player p0 = new Player(0,5); Player p1 = new Player(1,5); pgs.addPlayer(p0); pgs.addPlayer(p1);  Unit r0 = new Unit(-1,resourceType,0,0, 10); Unit r1 = new Unit(-1,resourceType,7,7, 10); pgs.addUnit(r0); pgs.addUnit(r1);  Unit u0 = new Unit(0,baseType,2,1,0); Unit u1 = new Unit(1,baseType,5,6,0); pgs.addUnit(u0); pgs.addUnit(u1);  Unit w0 = new Unit(0,workerType,1,1,0); Unit w1 = new Unit(1,workerType,6,6,0); pgs.addUnit(w0); pgs.addUnit(w1);  Unit b0 = new Unit(0,barracksType,4,0,0); Unit b1 = new Unit(1,barracksType,3,7,0); pgs.addUnit(b0); pgs.addUnit(b1);  return pgs; } 	0	0	0	0	0	1
public static PhysicalGameState melee12x12Mixed12() { PhysicalGameState pgs = new PhysicalGameState(12,12);  Player p0 = new Player(0,0); Player p1 = new Player(1,0); pgs.addPlayer(p0); pgs.addPlayer(p1);  pgs.addUnit(new Unit(0,lightType,2,1)); pgs.addUnit(new Unit(0,lightType,2,2)); pgs.addUnit(new Unit(0,lightType,2,3)); pgs.addUnit(new Unit(0,lightType,2,4)); pgs.addUnit(new Unit(0,heavyType,1,1)); pgs.addUnit(new Unit(0,heavyType,1,2)); pgs.addUnit(new Unit(0,heavyType,1,3)); pgs.addUnit(new Unit(0,heavyType,1,4)); pgs.addUnit(new Unit(0,rangedType,0,1)); pgs.addUnit(new Unit(0,rangedType,0,2)); pgs.addUnit(new Unit(0,rangedType,0,3)); pgs.addUnit(new Unit(0,rangedType,0,4));  pgs.addUnit(new Unit(1,lightType,9,7)); pgs.addUnit(new Unit(1,lightType,9,8)); pgs.addUnit(new Unit(1,lightType,9,9)); pgs.addUnit(new Unit(1,lightType,9,10)); pgs.addUnit(new Unit(1,heavyType,10,7)); pgs.addUnit(new Unit(1,heavyType,10,8)); pgs.addUnit(new Unit(1,heavyType,10,9)); pgs.addUnit(new Unit(1,heavyType,10,10)); pgs.addUnit(new Unit(1,rangedType,11,7)); pgs.addUnit(new Unit(1,rangedType,11,8)); pgs.addUnit(new Unit(1,rangedType,11,9)); pgs.addUnit(new Unit(1,rangedType,11,10));  return pgs; } 	0	0	0	0	0	1
public static PhysicalGameState basesWorkers8x8() { PhysicalGameState pgs = new PhysicalGameState(8,8);  Player p0 = new Player(0,5); Player p1 = new Player(1,5); pgs.addPlayer(p0); pgs.addPlayer(p1);  Unit r0 = new Unit(-1,resourceType,0,0, 20); Unit r1 = new Unit(-1,resourceType,7,7, 20); pgs.addUnit(r0); pgs.addUnit(r1);  Unit u0 = new Unit(0,baseType,2,1,0); Unit u1 = new Unit(1,baseType,5,6,0); pgs.addUnit(u0); pgs.addUnit(u1);  Unit w0 = new Unit(0,workerType, 1,1,0); Unit w1 = new Unit(1,workerType,6,6,0); pgs.addUnit(w0); pgs.addUnit(w1);  return pgs; } 	0	0	0	0	0	1
public static PhysicalGameState melee16x16Mixed12() { PhysicalGameState pgs = new PhysicalGameState(16,16);  Player p0 = new Player(0,0); Player p1 = new Player(1,0); pgs.addPlayer(p0); pgs.addPlayer(p1);  pgs.addUnit(new Unit(0,lightType,2,1)); pgs.addUnit(new Unit(0,lightType,2,2)); pgs.addUnit(new Unit(0,lightType,2,3)); pgs.addUnit(new Unit(0,lightType,2,4)); pgs.addUnit(new Unit(0,heavyType,1,1)); pgs.addUnit(new Unit(0,heavyType,1,2)); pgs.addUnit(new Unit(0,heavyType,1,3)); pgs.addUnit(new Unit(0,heavyType,1,4)); pgs.addUnit(new Unit(0,rangedType,0,1)); pgs.addUnit(new Unit(0,rangedType,0,2)); pgs.addUnit(new Unit(0,rangedType,0,3)); pgs.addUnit(new Unit(0,rangedType,0,4));  pgs.addUnit(new Unit(1,lightType,13,11)); pgs.addUnit(new Unit(1,lightType,13,12)); pgs.addUnit(new Unit(1,lightType,13,13)); pgs.addUnit(new Unit(1,lightType,13,14)); pgs.addUnit(new Unit(1,heavyType,14,11)); pgs.addUnit(new Unit(1,heavyType,14,12)); pgs.addUnit(new Unit(1,heavyType,14,13)); pgs.addUnit(new Unit(1,heavyType,14,14)); pgs.addUnit(new Unit(1,rangedType,15,11)); pgs.addUnit(new Unit(1,rangedType,15,12)); pgs.addUnit(new Unit(1,rangedType,15,13)); pgs.addUnit(new Unit(1,rangedType,15,14));  return pgs; } 	0	0	0	0	0	1
public static PhysicalGameState basesWorkers16x16() { PhysicalGameState pgs = new PhysicalGameState(16,16);  Player p0 = new Player(0,5); Player p1 = new Player(1,5); pgs.addPlayer(p0); pgs.addPlayer(p1);  Unit r0 = new Unit(-1,resourceType,0,0, 25); Unit r1 = new Unit(-1,resourceType,0,1, 25); Unit r2 = new Unit(-1,resourceType,15,14, 25); Unit r3 = new Unit(-1,resourceType,15,15, 25); pgs.addUnit(r0); pgs.addUnit(r1); pgs.addUnit(r2); pgs.addUnit(r3);  Unit u0 = new Unit(0,baseType,2,2,0); Unit u1 = new Unit(1,baseType,13,13,0); pgs.addUnit(u0); pgs.addUnit(u1);  Unit w0 = new Unit(0,workerType,1,1,0); Unit w1 = new Unit(1,workerType,14,14,0); pgs.addUnit(w0); pgs.addUnit(w1);  return pgs; } 	0	0	0	0	0	1
public static PhysicalGameState basesWorkers12x12() { PhysicalGameState pgs = new PhysicalGameState(12,12);  Player p0 = new Player(0,5); Player p1 = new Player(1,5); pgs.addPlayer(p0); pgs.addPlayer(p1);  Unit r0 = new Unit(-1,resourceType,0,0, 20); Unit r1 = new Unit(-1,resourceType,1,0, 20); Unit r2 = new Unit(-1,resourceType,11,11, 20); Unit r3 = new Unit(-1,resourceType,10,11, 20); pgs.addUnit(r0); pgs.addUnit(r1); pgs.addUnit(r2); pgs.addUnit(r3);  Unit u0 = new Unit(0,baseType,1,2,0); Unit u1 = new Unit(1,baseType,10,9,0); pgs.addUnit(u0); pgs.addUnit(u1);  Unit w0 = new Unit(0,workerType, 1,1,0); Unit w1 = new Unit(1,workerType,10,10,0); pgs.addUnit(w0); pgs.addUnit(w1);  return pgs; } 	0	0	0	0	0	1
"@Override public ODistributedResponse send2Nodes(final ODistributedRequest iRequest, final Collection<String> iClusterNames, final Collection<String> iNodes, final ODistributedRequest.EXECUTION_MODE iExecutionMode) { checkForServerOnline(iRequest);  final String databaseName = iRequest.getDatabaseName();  if (iNodes.isEmpty()) { ODistributedServerLog.error(this, getLocalNodeName(), null, DIRECTION.OUT, ""No nodes configured for database '%s' request: %s"", databaseName, iRequest); throw new ODistributedException(""No nodes configured for partition '"" + databaseName + ""' request: "" + iRequest); }  final ODistributedConfiguration cfg = manager.getDatabaseConfiguration(databaseName);  // TODO: REALLY STILL MATTERS THE NUMBER OF THE QUEUES? final OPair<String, IQueue>[] reqQueues = getRequestQueues(databaseName, iNodes, iRequest.getTask());  iRequest.setSenderNodeName(getLocalNodeName());  final int onlineNodes = getOnlineNodes(iRequest, iNodes, databaseName, reqQueues);  final int quorum = calculateQuorum(iRequest, iClusterNames, cfg, onlineNodes, iExecutionMode);  final int queueSize = iNodes.size(); int expectedSynchronousResponses = onlineNodes;  final boolean groupByResponse; if (iRequest.getTask().getResultStrategy() == OAbstractRemoteTask.RESULT_STRATEGY.UNION) { expectedSynchronousResponses = onlineNodes; groupByResponse = false; } else { groupByResponse = true; }  final boolean waitLocalNode = waitForLocalNode(cfg, iClusterNames, iNodes);  // CREATE THE RESPONSE MANAGER final ODistributedResponseManager currentResponseMgr = new ODistributedResponseManager(manager, iRequest, iNodes, expectedSynchronousResponses, quorum, waitLocalNode, iRequest.getTask().getSynchronousTimeout(expectedSynchronousResponses), iRequest.getTask().getTotalTimeout(queueSize), groupByResponse);  final long timeout = OGlobalConfiguration.DISTRIBUTED_QUEUE_TIMEOUT.getValueAsLong();  final int queueMaxSize = OGlobalConfiguration.DISTRIBUTED_QUEUE_MAXSIZE.getValueAsInteger();  try { requestLock.lock(); try { // LOCK = ASSURE MESSAGES IN THE QUEUE ARE INSERTED SEQUENTIALLY AT CLUSTER LEVEL // BROADCAST THE REQUEST TO ALL THE NODE QUEUES  // TODO: CAN I MOVE THIS OUTSIDE? iRequest.setId(msgService.getMessageIdCounter().getAndIncrement());  if (ODistributedServerLog.isDebugEnabled()) ODistributedServerLog.debug(this, getLocalNodeName(), iNodes.toString(), DIRECTION.OUT, ""sending request %s"", iRequest);  // TODO: CAN I MOVE THIS OUTSIDE? msgService.registerRequest(iRequest.getId(), currentResponseMgr);  for (OPair<String, IQueue> entry : reqQueues) { final IQueue queue = entry.getValue();  if (queue != null) { if (queueMaxSize > 0 && queue.size() > queueMaxSize) { ODistributedServerLog.warn(this, getLocalNodeName(), iNodes.toString(), DIRECTION.OUT, ""queue has too many messages (%d), treating the node as in stall: trying to restart it..."", queue.size()); queue.clear();  manager.disconnectNode(entry.getKey());  } else { // SEND THE MESSAGE queue.offer(iRequest, timeout, TimeUnit.MILLISECONDS); } } }  } finally { requestLock.unlock(); }  if (ODistributedServerLog.isDebugEnabled()) ODistributedServerLog.debug(this, getLocalNodeName(), iNodes.toString(), DIRECTION.OUT, ""sent request %s"", iRequest);  Orient.instance().getProfiler().updateCounter(""distributed.db."" + databaseName + "".msgSent"", ""Number of replication messages sent from current node"", +1, ""distributed.db.*.msgSent"");  return waitForResponse(iRequest, currentResponseMgr);  } catch (Exception e) { throw OException.wrapException(new ODistributedException(""Error on executing distributed request ("" + iRequest + "") against database '"" + databaseName + (iClusterNames != null ? ""."" + iClusterNames : """") + ""' to nodes "" + iNodes), e); } } "	0	0	0	0	0	1
public ByteBuffer getRequestBody() throws KrbException { return null; } 	0	0	0	0	0	1
public boolean isToken() { return isToken; } 	0	0	0	0	0	1
"@Test public void authenticationFailed() throws Exception { mvc.perform(formLogin().user(""user"").password(""invalid"")) .andExpect(status().isMovedTemporarily()) .andExpect(redirectedUrl(""/login?error"")).andExpect(unauthenticated()); } "	0	0	0	0	0	1
"@Test public void authenticationSuccess() throws Exception { mvc.perform( formLogin(""/authenticate"").user(""user"", ""user"").password(""pass"", ""password"")).andExpect(status().isMovedTemporarily()) .andExpect(redirectedUrl(""/"")) .andExpect(authenticated().withUsername(""user"")); } "	0	0	0	0	0	1
"public boolean onOptionsItemSelected(MenuItem item){ int id = item.getItemId();  switch(id) {    case R.id.living: Toast.makeText(this, """", Toast.LENGTH_LONG).show();  break; case R.id.kitchen:  Toast.makeText(this, """", Toast.LENGTH_LONG).show(); break; case R.id.house:  Intent HouseSetting = new Intent(HousesettingDetail.this, HouseSetting.class); startActivityForResult(HouseSetting, 5);  break; case R.id.car:  Toast.makeText(this, """", Toast.LENGTH_LONG).show(); break; } return true; } "	0	0	0	0	0	1
private Formula allocate(Formula truth) { return proof.getHeap().allocate(truth); } 	0	0	0	0	0	1
public String getPublishIdToSnapshotFrom(String excludeInstanceId) { List<String> publishIds = awsHelperService.getInstanceIdsForAutoScalingGroup( envValues.getAutoScaleGroupNameForPublish()); return publishIds.stream().filter(s -> !s.equals(excludeInstanceId)).findFirst().get(); } 	0	1	0	0	0	0
@Test public void queueSizeIsReportedCorrectly() { taskStore.save(getTask(42L)); taskStore.save(getTask(43L)); assertEquals(2, store.resolveFor(PUBLISHER, new Duration(1L)).get().queueSize()); } 	0	1	0	0	0	0
"private BigDecimal decimalArithmeticOperation(final BinaryOperatorKind operator) throws ODataApplicationException { final BigDecimal left = this.left.getTypedValue(BigDecimal.class); final BigDecimal right = this.right.getTypedValue(BigDecimal.class); switch (operator) { case ADD: return left.add(right); case DIV: return left.divide(left); case MUL: return left.multiply(right); case SUB: return left.subtract(right); default: throw new ODataApplicationException(""Operator not valid"", HttpStatusCode.BAD_REQUEST.getStatusCode(), Locale.ROOT); } } "	1	0	1	1	1	0
private void onBindNotice(@NonNull MessageViewHolder holder, @NonNull Message message) { applyStyle(holder, plainStyle, highlightStyle, message.flags.Highlight); holder.content.setText(context.themeUtil().translations.formatAction( formatNick(message.sender, false), helper.formatIrcMessage(message.content) )); } 	0	0	0	0	0	1
"@Override public JSONArray toJSON() { if (!this.hasGenotypeData()) { return null; }  JSONArray genesJSON = new JSONArray(); // Gene genes, in order of decreasing score List<Map.Entry<String, Double>> genes = new ArrayList<Map.Entry<String, Double>>(this.geneScores.entrySet()); Collections.sort(genes, new Comparator<Map.Entry<String, Double>>() { @Override public int compare(Map.Entry<String, Double> e1, Map.Entry<String, Double> e2) { return Double.compare(e2.getValue(), e1.getValue()); } });  int numGenesReported = 0; for (Map.Entry<String, Double> geneEntry : genes) { String gene = geneEntry.getKey(); Double score = geneEntry.getValue();  JSONObject geneObject = new JSONObject(); geneObject.element(""gene"", gene); geneObject.element(""score"", score); geneObject.accumulateAll(getGeneJSON(gene)); genesJSON.add(geneObject);  // FIXME: quick emergency fix to make PhenomeCentral responsive numGenesReported++; if (numGenesReported > 15) { break; } } return genesJSON; } "	1	1	1	1	0	0
public void execute() throws IOException { authService.authenticateInJira();  MetaInfo metaInfo = metaInfoRetrievalService.retrieve();  List<TestCase> testCases = testCaseResolutionService.resolveTestCases(); List<Issue> issues = jiraService.getTestIssues();  zephyrService.mapTestCasesToIssues(testCases, issues);  for (TestCase testCase : testCases) { if (testCase.getId() == null) { jiraService.createTestIssue(testCase); zephyrService.addStepsToTestIssue(testCase); jiraService.linkToStory(testCase); } }  zephyrService.linkExecutionsToTestCycle(metaInfo, testCases); zephyrService.updateExecutionStatuses(testCases);  } 	0	0	0	0	0	1
"@Override public ServerConfigData deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException { ObjectCodec codec = jp.getCodec(); ObjectNode serverNode = jp.readValueAsTree(); ServerConfigData data = new ServerConfigData(baseDirSupplier.get(), port, development, publicAddress); if (serverNode.hasNonNull(""port"")) { data.setPort(parsePort(serverNode.get(""port""))); } if (serverNode.hasNonNull(""address"")) { data.setAddress(toValue(codec, serverNode.get(""address""), InetAddress.class)); } if (serverNode.hasNonNull(""development"")) { data.setDevelopment(serverNode.get(""development"").asBoolean(false)); } if (serverNode.hasNonNull(""threads"")) { data.setThreads(serverNode.get(""threads"").asInt(ServerConfig.DEFAULT_THREADS)); } if (serverNode.hasNonNull(""publicAddress"")) { data.setPublicAddress(toValue(codec, serverNode.get(""publicAddress""), URI.class)); } if (serverNode.hasNonNull(""maxContentLength"")) { data.setMaxContentLength(serverNode.get(""maxContentLength"").asInt(ServerConfig.DEFAULT_MAX_CONTENT_LENGTH)); } if (serverNode.hasNonNull(""maxChunkSize"")) { data.setMaxChunkSize(serverNode.get(""maxChunkSize"").asInt(ServerConfig.DEFAULT_MAX_CHUNK_SIZE)); } if (serverNode.hasNonNull(""maxInitialLineLength"")) { data.setMaxInitialLineLength(serverNode.get(""maxInitialLineLength"").asInt(ServerConfig.DEFAULT_MAX_INITIAL_LINE_LENGTH)); } if (serverNode.hasNonNull(""maxHeaderSize"")) { data.setMaxHeaderSize(serverNode.get(""maxHeaderSize"").asInt(ServerConfig.DEFAULT_MAX_HEADER_SIZE)); } if (serverNode.hasNonNull(""ssl"")) { data.setSslContext(toValue(codec, serverNode.get(""ssl""), SSLContext.class)); } if (serverNode.hasNonNull(""requireClientSslAuth"")) { data.setRequireClientSslAuth(serverNode.get(""requireClientSslAuth"").asBoolean(false)); } if (serverNode.hasNonNull(""baseDir"")) { throw new IllegalStateException(""baseDir value cannot be set via config, it must be set directly via ServerConfigBuilder.baseDir()""); } if (serverNode.hasNonNull(""connectTimeoutMillis"")) { parseOptionalIntValue(""connectTimeoutMillis"", serverNode.get(""connectTimeoutMillis"")).ifPresent(data::setConnectTimeoutMillis); } if (serverNode.hasNonNull(""maxMessagesPerRead"")) { parseOptionalIntValue(""maxMessagesPerRead"", serverNode.get(""maxMessagesPerRead"")).ifPresent(data::setMaxMessagesPerRead); } if (serverNode.hasNonNull(""receiveBufferSize"")) { parseOptionalIntValue(""receiveBufferSize"", serverNode.get(""receiveBufferSize"")).ifPresent(data::setReceiveBufferSize); } if (serverNode.hasNonNull(""writeSpinCount"")) { parseOptionalIntValue(""writeSpinCount"", serverNode.get(""writeSpinCount"")).ifPresent(data::setWriteSpinCount); }  return data; } "	0	1	0	0	0	0
@Override public CalendarList execute(CalendarList calendar) { super.execute(calendar);  String searchTerm = getSearchTerm();  if (searchTerm.isEmpty()) { return calendar.findAllByName(); } else { return calendar.findAllByName(getSearchTerm()); } } 	1	1	1	0	1	0
"private String getCardsPlayer(Player[] players, int i) { String hand =""""; Card[]	PlayerCards=	players[i].getCards(); if(PlayerCards[0]!=null&&PlayerCards[1]!=null){ hand +=PlayerCards[0].getType()+"" ""+PlayerCards[0].getNumber()+"",""; hand+=PlayerCards[1].getType()+"" ""+PlayerCards[1].getNumber(); } else{ hand+=""NULL NULL NULL NULL""; } return hand; } "	1	1	1	1	0	0
"@JsonProperty(""dateOfEntryUtcOffset"") public Integer getDateOfEntryUtcOffset() { return dateOfEntryUtcOffset; } "	0	0	0	0	0	1
public Texture getColorTexture(int rgba) { Texture t = colorTextures.get(rgba); if (t == null) { t = new Texture(1, 1, GL11.GL_RGBA); t.gpuAlloc(); ByteBuffer data = BufferUtils.createByteBuffer(4); data.putInt(rgba); data.flip(); GL11.glBindTexture(GL11.GL_TEXTURE_2D, t.getID()); GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0, 1, 1, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, data); } return t; } 	0	1	0	0	0	0
private void stopJingles() { if (jinglesAnimation != null) { jinglesAnimation.stop(); jinglesAnimation = null; empyListItem.setCompoundDrawablesWithIntrinsicBounds(0, R.animator.jingles_animation, 0, 0);  } } 	0	1	0	0	0	0
"@PreDestroy public void destroy() { healthCheckServiceProxy.deregister(); configurationService.unsubscribeFrom(""system-model.cfg.xml"", systemModelListener); destroyRemoteDatastore(); } "	0	1	0	0	0	0
"private Channel retrieveChannel(final long channelId, final Map<String, Object> properties) { checkCondition(channelId <= 0, s_message.channelIdNotLessThanZero()); checkNull(properties, s_message.propertiesNonNull());  s_logger.debug(s_message.retrievingChannel()); String channelName = null; ChannelType channelType = null; DataType dataType = null; Channel channel = null; final Map<String, Object> channelConfig = CollectionUtil.newConcurrentHashMap();  // All key names present is the properties final String channelKeyContainment = CHANNEL_PROPERTY_POSTFIX.value() + CHANNEL_PROPERTY_PREFIX.value() + CHANNEL_PROPERTY_POSTFIX.value(); final String channelKeyFormat = channelId + channelKeyContainment;  if (properties != null) { final String channelNamePropertyKey = channelKeyFormat + NAME.value(); if (properties.containsKey(channelNamePropertyKey)) { channelName = (String) properties.get(channelNamePropertyKey); } final String channelTypePropertyKey = channelKeyFormat + TYPE.value(); channelType = this.getChannelType(properties, channelTypePropertyKey); final String channelValueTypePropertyKey = channelKeyFormat + VALUE_TYPE.value(); dataType = this.getDataType(properties, channelValueTypePropertyKey); for (final Map.Entry<String, Object> entry : properties.entrySet()) { final String key = entry.getKey(); final String value = entry.getValue().toString(); final List<String> strings = Arrays.asList(key.split(""\\"" + CHANNEL_PROPERTY_POSTFIX.value())); if ((strings.size() > 2) && key.startsWith(String.valueOf(channelId)) && DRIVER_PROPERTY_POSTFIX.value().equals(strings.get(2))) { final String driverSpecificPropertyKey = DRIVER_PROPERTY_POSTFIX.value() + CHANNEL_PROPERTY_POSTFIX.value(); final String cKey = key .substring(key.indexOf(driverSpecificPropertyKey) + driverSpecificPropertyKey.length()); channelConfig.put(cKey, value); } } } if ((channelType != null) && (dataType != null)) { channel = new Channel(channelId, channelName, channelType, dataType, channelConfig); } s_logger.debug(s_message.retrievingChannelDone()); return channel; } "	0	0	0	0	0	1
"public String getFullMessage() { return getFile() + "";"" + getValidationName() + "";message = "" + getMessage() + ""\n""; } "	0	0	0	0	0	1
public void turn(){  updateProx();  if(xProx>=(CHASE_TETHER*32)&&yProx>=(CHASE_TETHER*32)){ wander(); }  else if(xProx<=(CHASE_TETHER*32)&&yProx<=(CHASE_TETHER*32)){ if(xProx<(AURA_TETHER*32)||yProx<(AURA_TETHER*32)){ spook(pCharacter); flee(); } if(xProx>(AURA_TETHER*32)&&yProx>(AURA_TETHER*32)){ chase(); } } else{ wander(); } } 	1	1	1	1	0	0
"@Test public void recordExperimentsEvents() throws Exception { Map<Experiment.Label, Map<User.ID, List<Event>>> eventList = new HashMap<>();  thrown.expect(UnsupportedOperationException.class); thrown.expectMessage(""Not implemented""); resource.recordExperimentsEvents(applicationName, userID, eventList); } "	1	1	0	1	1	0
"public static void rewriteLocationHeader(String location, MessageContext messageContext) { if (location.contains("":"")) { String[] tmp = location.split("":""); if (tmp.length == 2) { return; } String protocol = tmp[0]; String host = null; for (String tmpname : tmp[1].split(""/"")) { if (!tmpname.isEmpty()) { host = tmpname; break; } } String newPort; String port = null; if (""http"".equals(protocol)) { newPort = getPassThruHttpPort(); } else { newPort = getPassThruHttpsPort(); } if (tmp.length > 2) { port = tmp[2].substring(0, tmp[2].indexOf(""/"")); } String oldEndpoint = protocol + ""://"" + host + "":"" + port; if (EndpointHolder.getInstance().containsEndpoint(oldEndpoint)) { location = location.replace(port, newPort); Object headers = ((Axis2MessageContext) messageContext).getAxis2MessageContext().getProperty(""TRANSPORT_HEADERS""); if (headers instanceof TreeMap) { ((TreeMap) headers).put(""Location"", location); } } } } "	1	1	1	1	0	0
@Override public int getStrongPower(IBlockState state, IBlockAccess world, BlockPos pos, EnumFacing s) { if ((flags & 16) == 0) return 0; TileEntity te = world.getTileEntity(pos); if (te instanceof IRedstoneTile) return ((IRedstoneTile)te).redstoneLevel(s, true); else return 0; } 	0	1	0	0	0	0
@Override public boolean canConnectRedstone(IBlockState state, IBlockAccess world, BlockPos pos, EnumFacing side) { if ((flags & 16) == 0) return false; if (side == null) return true; TileEntity te = world.getTileEntity(pos); if (te instanceof IRedstoneTile) return ((IRedstoneTile)te).connectRedstone(side); return false; } 	0	1	0	0	0	0
"public static boolean containsExactlyTimes(int times, String source, String marker) { if (Strings.isNullOrEmpty(source) || Strings.isNullOrEmpty(marker)) { throw new IllegalArgumentException(""No null arguments allowed""); } return times == ((source.length() - source.replace(marker, """").length()) / marker.length()); } "	1	0	1	1	1	0
@Test public void twoEmptySetsHaveTheSameHashcode() { final IntHashSet other = new IntHashSet(100, -1); assertEquals(obj.hashCode(), other.hashCode()); } 	0	1	0	0	0	0
"@Override public boolean onMessageReceived(MMXMessage mmxMessage) { Log.d(TAG, ""Received message : "" + mmxMessage); if (adapter != null && mmxMessage.getChannel() != null && channelName.equals(mmxMessage.getChannel().getName())) { currentConversation.addMessage(Message.createMessageFrom(mmxMessage)); updateList(); currentConversation.setHasUnreadMessage(false);  return true; } return false; } "	0	1	0	0	0	0
"@Override public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException { // Check if the build result set from a previous build step. // A null build result indicates that the build is still ongoing and we're // likely being run as a build step by the ""Any Build Step Plugin"". Result buildResult = build.getResult(); if (buildResult != null && buildResult.isWorseOrEqualTo(Result.FAILURE)) { return false; }  EnvVars env =  build.getEnvironment(listener); Map<String, String> parameters = build.getBuildVariables();  log = listener.getLogger();  // Artifacts location for this build on master. FilePath artifactsDir = new FilePath(build.getArtifactsDir());  // Workspace (potentially remote if using slave). FilePath workspace = build.getWorkspace();  // Run root location for this build on master. FilePath root = new FilePath(build.getRootDir());  // Validate user selection & input values. boolean isValid = validateConfiguration() && validateTestConfiguration(); if (!isValid) { writeToLog(""Invalid configuration.""); return false; }  // Create & configure the AWSDeviceFarm client. AWSDeviceFarm adf = getAWSDeviceFarm() .withLogger(listener.getLogger()) .withWorkspace(workspace) .withArtifactsDir(artifactsDir) .withEnv(env);  if (adf == null) { writeToLog(""ADF API is null!""); return false; }  try { // Accept 'ADF_PROJECT' build parameter as an overload from job configuration. String projectNameParameter = parameters.get(""AWSDEVICEFARM_PROJECT""); if (projectNameParameter != null && !projectNameParameter.isEmpty()) { writeToLog(String.format(""Using overloaded project '%s' from build parameters"", projectNameParameter)); projectName = projectNameParameter; }  // check for Unmetered Devices on Account if (isRunUnmetered) { String os = adf.getOs(appArtifact); int unmeteredDeviceCount = adf.getUnmeteredDevices(os); if (unmeteredDeviceCount <= 0) { throw new AWSDeviceFarmException(String.format(""Your account does not have unmetered %s devices. Please change "" + ""your build settings to run on metered devices."", os)); } }  // Get AWS Device Farm project from user provided name. writeToLog(String.format(""Using Project '%s'"", projectName)); Project project = adf.getProject(projectName);  // Accept 'ADF_DEVICE_POOL' build parameter as an overload from job configuration. String devicePoolParameter = parameters.get(""AWSDEVICEFARM_DEVICE_POOL""); if (devicePoolParameter != null) { writeToLog(String.format(""Using overloaded device pool '%s' from build parameters"", devicePoolParameter)); devicePoolName = devicePoolParameter; }  // Get AWS Device Farm device pool from user provided name. writeToLog(String.format(""Using DevicePool '%s'"", devicePoolName)); DevicePool devicePool = adf.getDevicePool(project, devicePoolName);  // Upload app. writeToLog(String.format(""Using App '%s'"", env.expand(appArtifact))); Upload appUpload = adf.uploadApp(project, appArtifact); String appArn = appUpload.getArn(); String appName = String.format(""%s (Jenkins)"", appUpload.getName());  // Upload test content. writeToLog(""Getting test to schedule.""); ScheduleRunTest testToSchedule = getScheduleRunTest(env, adf, project);  // Schedule test run. TestType testType = TestType.fromValue(testToSchedule.getType()); writeToLog(String.format(""Scheduling '%s' run '%s'"", testType, appName)); ScheduleRunConfiguration configuration = getScheduleRunConfiguration(isRunUnmetered); ScheduleRunResult run = adf.scheduleRun(project.getArn(), appName, appArn, devicePool.getArn(), testToSchedule, configuration);  String runArn = run.getRun().getArn(); try { writeToLog(String.format(""View the %s run in the AWS Device Farm Console: %s"", testType, AWSDeviceFarmUtils.getRunUrlFromArn(runArn))); } catch (ArrayIndexOutOfBoundsException e) { writeToLog(String.format(""Could not parse project ID and run ID from run ARN: %s"", runArn)); }  // Attach AWS Device Farm action to poll periodically and update results UI. AWSDeviceFarmTestResultAction action = new AWSDeviceFarmTestResultAction(build, null, log); build.addAction(action);  // Wait for test result to complete will updating status periodically. writeToLog(""Waiting for test run to complete.""); action.waitForRunCompletion(adf, run); writeToLog(""Test run is complete."");   // Download results archive and store it. if (storeResults) { // Create results storage directory which will contain the unzip logs/screenshots pulled from AWS Device Farm. FilePath resultsDir = new FilePath(artifactsDir, ""AWS Device Farm Results""); resultsDir.mkdirs(); writeToLog(String.format(""Storing AWS Device Farm results in directory %s"", resultsDir));  Map<String, FilePath> jobs = getJobs(adf, run, resultsDir); Map<String, FilePath> suites = getSuites(adf, run, jobs);  writeToLog(""Downloading AWS Device Farm results archive...""); // Iterating over all values in the Enum. for (ArtifactCategory category : new ArrayList<ArtifactCategory>(Arrays.asList(ArtifactCategory.values()))) { ListArtifactsResult result = adf.listArtifacts(run.getRun().getArn(), category); for (Artifact artifact : result.getArtifacts()) { String arn = artifact.getArn().split("":"")[6]; String semiSuiteArn = arn.substring(0, arn.lastIndexOf(""/"")); String suiteArn = semiSuiteArn.substring(0, semiSuiteArn.lastIndexOf(""/"")); String id = arn.substring(arn.lastIndexOf(""/"") + 1); String extension = artifact.getExtension().replaceFirst(""^\\."", """"); FilePath artifactFilePath = new FilePath(suites.get(suiteArn), String.format(""%s-%s.%s"", artifact.getName(), id, extension)); URL url = new URL(artifact.getUrl()); artifactFilePath.write().write(IOUtils.toByteArray(url.openStream())); } }  writeToLog(String.format(""Results archive saved in %s"", artifactsDir.getName())); }  // Set Jenkins build result based on AWS Device Farm test result. build.setResult(action.getBuildResult()); } catch (AWSDeviceFarmException e) { writeToLog(e.getMessage()); return false; }  return true; } "	0	0	0	0	0	1
"@Test public void topLevelAspectDoesNotExist() throws Exception { scratch.file(""test/aspect.bzl"", """"); scratch.file(""test/BUILD"", ""java_library(name = 'xxx')"");  reporter.removeHandler(failFastHandler); try { AnalysisResult result = update(ImmutableList.of(""test/aspect.bzl%MyAspect""), ""//test:xxx""); assertThat(keepGoing()).isTrue(); assertThat(result.hasError()).isTrue(); } catch (ViewCreationFailedException e) { // expect to fail. } assertContainsEvent(""MyAspect from //test:aspect.bzl is not an aspect""); } "	0	0	0	0	0	1
@Override public UserBinomialModel get(U u) { return new UserBinomialModel(u, alpha); } 	1	0	1	1	1	0
"public static String encodeURIComponent(String s) { String result;  try { result = URLEncoder.encode(s, ""UTF-8"") .replaceAll(""\\+"", ""%20"") .replaceAll(""\\%21"", ""!"") .replaceAll(""\\%27"", ""'"") .replaceAll(""\\%28"", ""("") .replaceAll(""\\%29"", "")"") .replaceAll(""\\%7E"", ""~""); } catch (UnsupportedEncodingException e) { result = s; }  return result; } "	0	0	0	0	0	1
"@org.testng.annotations.Test public void testListUserAssociations() throws Exception { LocalAccountAssociationClientService localAccountAssociationClientService = getUserAccountAssociationClientService(); User testUser = new User.UserBuilder().setUserId(""testUser"").setIdentityStore(new IdentityStoreImpl()) .setAuthorizationStore(new AuthorizationStoreImpl()).setPrimaryAttributeValue(""userId"") .setClaimManager(new InMemoryClaimManager()).build(); Assert.assertNotNull(localAccountAssociationClientService.listUserAssociations(testUser)); } "	1	0	1	0	0	0
private FrameworkMethod createFrameworkMethod(final IMethodInvocation invocation) { return new FrameworkMethod(invocation.getMethod().getReflection()) { @Override public String getName() { return invocation.getIteration().getDescription().getMethodName(); } }; } 	0	0	0	0	0	1
private void setStarredHost(boolean saveHost) { starredHostDao.open();  if (!saveHost && starredHostDao.isHostStarred(hostInfo.getId(), hostInfo.getHost().getName())) { starredHostDao.delete(hostInfo.getId(), hostInfo.getHost().getName()); } else { starredHostDao.insert(hostInfo.getId(), hostInfo.getHost().getName(), hostInfo.getHost(), hostInfo.getFeedback()); }  hostInfo.setStarred(saveHost); starredHostDao.close(); } 	1	0	1	0	1	0
"public String getUrl(String language) { if (url == null) { return null; } else { return url.replace(""$lang"", language); } } "	0	0	0	0	0	1
public Date getDateUploaded() { return dateUploaded; } 	0	0	0	0	0	1
"@Override public ScanResult scanFilmography(Person person) { FilmographyInfos  filmographyInfos = null; try { boolean throwTempError = configServiceWrapper.getBooleanProperty(""allocine.throwError.tempUnavailable"", Boolean.TRUE); String allocineId = getPersonId(person, throwTempError);  if (StringUtils.isBlank(allocineId)) { LOG.debug(""Allocine id not available '{}'"", person.getIdentifier()); return ScanResult.MISSING_ID; }  filmographyInfos = allocineApiWrapper.getFilmographyInfos(allocineId, throwTempError); } catch (TemporaryUnavailableException ex) { // check retry int maxRetries = configServiceWrapper.getIntProperty(""allocine.maxRetries.filmography"", 0); if (person.getRetries() < maxRetries) { return ScanResult.RETRY; } }  if (filmographyInfos == null || filmographyInfos.isNotValid() || CollectionUtils.isEmpty(filmographyInfos.getParticipances())) { LOG.trace(""No filmography present for person '{}'"", person.getIdentifier()); return ScanResult.NO_RESULT; }  Set<FilmParticipation> newFilmography = new HashSet<>(); for (Participance participance : filmographyInfos.getParticipances()) { FilmParticipation filmo = new FilmParticipation(); filmo.setSourceDb(SCANNER_ID); filmo.setSourceDbId(String.valueOf(participance.getCode())); filmo.setPerson(person);  if (participance.isActor()) { filmo.setJobType(JobType.ACTOR); filmo.setRole(StringUtils.trimToNull(participance.getRole())); } else if (participance.isDirector()) { filmo.setJobType(JobType.DIRECTOR); } else if (participance.isWriter()) { filmo.setJobType(JobType.WRITER); } else if (participance.isCamera()) { filmo.setJobType(JobType.CAMERA); } else if (participance.isProducer()) { filmo.setJobType(JobType.PRODUCER); } else { // no entries with unknown job type continue; }  if (participance.isTvShow()) { filmo.setParticipationType(ParticipationType.SERIES); filmo.setYear(participance.getYearStart()); filmo.setYearEnd(participance.getYearEnd()); } else { filmo.setParticipationType(ParticipationType.MOVIE); filmo.setYear(participance.getYear()); }  filmo.setTitle(participance.getTitle()); filmo.setTitleOriginal(StringUtils.trimToNull(participance.getOriginalTitle())); filmo.setDescription(StringUtils.trimToNull(participance.getSynopsisShort())); filmo.setReleaseDate(MetadataTools.parseToDate(participance.getReleaseDate())); String releaseCountryCode = localeService.findCountryCode(StringUtils.trimToNull(participance.getReleaseState())); filmo.setReleaseCountryCode(releaseCountryCode); newFilmography.add(filmo); }  person.setNewFilmography(newFilmography);  return ScanResult.OK; } "	0	0	0	0	0	1
"public void handleActivationRequest(final PwmRequest pwmRequest) throws PwmUnrecoverableException, ChaiUnavailableException, IOException, ServletException { final PwmApplication pwmApplication = pwmRequest.getPwmApplication(); final PwmSession pwmSession = pwmRequest.getPwmSession(); final Configuration config = pwmApplication.getConfig(); final LocalSessionStateBean ssBean = pwmSession.getSessionStateBean();  pwmApplication.getSessionStateService().clearBean(pwmRequest, ActivateUserBean.class); final List<FormConfiguration> configuredActivationForm = config.readSettingAsForm(PwmSetting.ACTIVATE_USER_FORM);  Map<FormConfiguration,String> formValues = new HashMap(); try { //read the values from the request formValues = FormUtility.readFormValuesFromRequest(pwmRequest, configuredActivationForm, ssBean.getLocale());  // check for intruders pwmApplication.getIntruderManager().convenience().checkAttributes(formValues);  // read the context attr final String contextParam = pwmRequest.readParameterAsString(PwmConstants.PARAM_CONTEXT);  // read the profile attr final String ldapProfile = pwmRequest.readParameterAsString(PwmConstants.PARAM_LDAP_PROFILE);  // see if the values meet the configured form requirements. FormUtility.validateFormValues(config, formValues, ssBean.getLocale());  final String searchFilter = figureLdapSearchFilter(pwmRequest);  // read an ldap user object based on the params final UserIdentity userIdentity; { final UserSearchEngine userSearchEngine = new UserSearchEngine(pwmApplication, pwmSession.getLabel()); final UserSearchEngine.SearchConfiguration searchConfiguration = new UserSearchEngine.SearchConfiguration(); searchConfiguration.setContexts(Collections.singletonList(contextParam)); searchConfiguration.setFilter(searchFilter); searchConfiguration.setFormValues(formValues); searchConfiguration.setLdapProfile(ldapProfile); userIdentity = userSearchEngine.performSingleUserSearch(searchConfiguration); }  validateParamsAgainstLDAP(pwmRequest, formValues, userIdentity);  final List<UserPermission> userPermissions = config.readSettingAsUserPermission(PwmSetting.ACTIVATE_USER_QUERY_MATCH); if (!LdapPermissionTester.testUserPermissions(pwmApplication, pwmSession.getLabel(), userIdentity, userPermissions)) { final String errorMsg = ""user "" + userIdentity + "" attempted activation, but does not match query string""; final ErrorInformation errorInformation = new ErrorInformation(PwmError.ERROR_ACTIVATE_USER_NO_QUERY_MATCH, errorMsg); pwmApplication.getIntruderManager().convenience().markUserIdentity(userIdentity, pwmSession); pwmApplication.getIntruderManager().convenience().markAddressAndSession(pwmSession); throw new PwmUnrecoverableException(errorInformation); }  final ActivateUserBean activateUserBean = pwmApplication.getSessionStateService().getBean(pwmRequest, ActivateUserBean.class); activateUserBean.setUserIdentity(userIdentity); activateUserBean.setFormValidated(true); pwmApplication.getIntruderManager().convenience().clearAttributes(formValues); pwmApplication.getIntruderManager().convenience().clearAddressAndSession(pwmSession); } catch (PwmOperationalException e) { pwmApplication.getIntruderManager().convenience().markAttributes(formValues, pwmSession); pwmApplication.getIntruderManager().convenience().markAddressAndSession(pwmSession); pwmRequest.setResponseError(e.getErrorInformation()); LOGGER.debug(pwmSession.getLabel(),e.getErrorInformation().toDebugStr()); }  // redirect user to change password screen. advanceToNextStage(pwmRequest); } "	1	0	1	1	0	0
private void maybeFlushBatch() { if (batch.isFull()) { flush(); } else if ((System.nanoTime() - lastFlush) > TimeUnit.MILLISECONDS.toNanos(BATCH_TIMEOUT_MS)) { timeoutMeter.mark(); flush(); } } 	0	1	0	0	0	0
public Long getTrainingPrerequisiteId() { return this.trainingPrerequisiteId; } 	1	0	1	0	1	0
"public void copyLine(BevolkingsregisterFlowState bevolkingsregisterFlow, int person, int lineToCopy) throws AkteException { List<Person> b2 = bevolkingsregisterFlow.getB2();  if (person > b2.size()) { throw new AkteException(""The person in question is not created yet.""); } if (lineToCopy > b2.size()) { throw new AkteException(""The line to copy from is not created yet.""); }  Person to = b2.get(person - 1); Person from = b2.get(lineToCopy - 1);  to.setFirstName(from.getFirstName()); to.setFamilyName(from.getFamilyName()); to.setDayOfBirth(from.getDayOfBirth()); to.setMonthOfBirth(from.getMonthOfBirth()); to.setYearOfBirth(from.getYearOfBirth()); to.setPlaceOfBirth(from.getPlaceOfBirth()); to.setSex(from.getSex()); to.setNationality(from.getNationality());  for (PersonDynamic.Type type : PersonDynamic.Type.values()) { switch (type) { case BEROEP: case KERKGENOOTSCHAP: case BURGELIJKE_STAND: Map<Integer, List<PersonDynamic>> b3 = bevolkingsregisterFlow.getB3ForType(type); List<PersonDynamic> b3To = b3.get(person); List<PersonDynamic> b3From = b3.get(lineToCopy); if (b3To.size() > 0) { if (b3From.isEmpty()) { b3From.add(createPersonDynamic(bevolkingsregisterFlow, to, type, 1)); } PersonDynamic personDynamicTo = b3To.get(0); PersonDynamic personDynamicFrom = b3From.get(0); BeanUtils.copyProperties(personDynamicFrom, personDynamicTo, ""RecordID"", ""keyToRegistrationPersons""); } } } } "	0	0	0	0	0	1
"@Override public void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); viewModel.setCallback(this); Disposable disposable = viewModel.getContributors() .observeOn(AndroidSchedulers.mainThread()) .subscribe( this::renderContributors, throwable -> Timber.tag(TAG).e(throwable, ""Failed to show sessions."") ); compositeDisposable.add(disposable); } "	0	0	0	0	0	1
@Override public int nextPacketID(String clientID) { Set<Integer> inFlightForClient = this.m_inFlightIds.get(clientID); if (inFlightForClient == null) { int nextPacketId = 1; inFlightForClient = new HashSet<>(); inFlightForClient.add(nextPacketId); this.m_inFlightIds.put(clientID, inFlightForClient); return nextPacketId; } int maxId = Collections.max(inFlightForClient); int nextPacketId = (maxId + 1) % 0xFFFF; inFlightForClient.add(nextPacketId); return nextPacketId; } 	0	0	0	0	0	1
@Override protected void unregisterForAtomEvents(AtomEventFramework eventFramework) { throw new UnsupportedOperationException(); } 	0	0	0	0	0	1
@Override public UnweightedArithmeticRule visitUnweighted_arithmetic_rule(Unweighted_arithmetic_ruleContext ctx) { return visitChildren(ctx); } 	0	0	0	0	0	1
"void bindSubject(PreparedStatement ps, int col, Node n) throws SQLException { if (n == null) return; if (n.isURI()) ps.setString(col, n.toString()); else if (n.isBlank()) ps.setString(col, ""_:""+n.toString()); else throw new SQLException(""Only URI or Blank nodes can be used as subject""); } "	0	1	0	0	0	0
"@SmallTest public void testHello() throws Throwable { final String expectKey = ""你好""; Map<String, String> params = new HashMap<String, String>(); params.put(""x:foo"", ""fooval""); final UploadOptions opt = new UploadOptions(params, null, true, null, null);  uploadManager.put(""hello"".getBytes(), expectKey, TestConfig.token, new UpCompletionHandler() { public void complete(String k, ResponseInfo rinfo, JSONObject response) { Log.i(""qiniutest"", k + rinfo); key = k; info = rinfo; resp = response; signal.countDown(); } }, opt);   try { signal.await(60, TimeUnit.SECONDS); // wait for callback } catch (InterruptedException e) { e.printStackTrace(); } Assert.assertEquals(expectKey, key); Assert.assertTrue(info.isOK()); Assert.assertNotNull(info.reqId); Assert.assertNotNull(resp); } "	0	0	0	0	0	1
private void resetLoops() { this.currentLoop = numLoops; } 	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") @Override public Classpage getUserShelfByClasspageGooruUid(final String gooruUid, final String type) { String hql = "" FROM Classpage classpage WHERE  classpage.user.partyUid=:gooruUid  and classpage.collectionType=:type and ""; Query query = getSession().createQuery(hql + generateOrgAuthQuery(""classpage."")); query.setParameter(_GOORU_UID, gooruUid); query.setParameter(TYPE, type); addOrgAuthParameters(query); List<Classpage> classpage = query.list(); return (classpage.size() != 0) ? classpage.get(0) : null; } "	0	1	0	0	0	0
"@Override public Object[] getParentCollection(final String collectionGooruOid, final String gooruUid) { String hql = ""select cc.gooru_oid, cor.title  as gooruOid  from collection_item ci inner join resource r on r.content_id = ci.resource_content_id inner join content cr on cr.content_id = r.content_id inner join content cc on cc.content_id = ci.collection_content_id inner join collection co on  co.content_id = ci.collection_content_id inner join resource cor on cor.content_id = co.content_id   where cr.gooru_oid='"" + collectionGooruOid + ""'and co.collection_type = 'folder'  and ci.item_type != 'collaborator' ""; if (gooruUid != null) { hql += ""and  cc.user_uid ='"" + gooruUid + ""'""; } Query query = getSession().createSQLQuery(hql); return (Object[]) (query.list().size() > 0 ? query.list().get(0) : null); } "	1	0	1	0	1	0
public static NotificationEvent forNewIssue(Issue issue, User author) { NotificationEvent notiEvent = createFrom(author, issue); notiEvent.title = formatNewTitle(issue); notiEvent.receivers = getReceivers(issue); notiEvent.eventType = NEW_ISSUE; notiEvent.oldValue = null; notiEvent.newValue = issue.body; return notiEvent; } 	1	1	1	1	0	0
public synchronized static GobblinMetrics get(String id, MetricContext parentContext) { return get(id, parentContext, Lists.<Tag<?>>newArrayList()); } 	0	0	0	0	0	1
"public long calculateScore(PlayerInfo playerInfo) { final int[] values = new int[MAX_BLOCK]; final Location l = playerInfo.getIslandLocation(); final int px = l.getBlockX(); final int py = l.getBlockY(); final int pz = l.getBlockZ(); final World w = l.getWorld(); int radius = Settings.island_protectionRange / 2; int typeId; for (int x = -radius; x <= radius; ++x) { for (int y = 0; y <= 255; ++y) { for (int z = -radius; z <= radius; ++z) { typeId = w.getBlockAt(px + x, py + y, pz + z).getTypeId(); values[typeId]++; } } } double score = 0; for (int i = 1; i <= MAX_BLOCK; ++i) { double count = values[i]; if (count > blockLimit[i] && blockLimit[i] != -1) { count = blockLimit[i]; // Hard edge } if (blockDR[i] > 0) { count = dReturns(count, blockDR[i]); } score += count*blockValue[i]; } long islandLevel = Math.round(score / config.getInt(""general.pointsPerLevel"")); uSkyBlock.getInstance().getIslandConfig(playerInfo).set(""general.level"", islandLevel); playerInfo.savePlayerConfig(playerInfo.getPlayerName()); uSkyBlock.getInstance().saveIslandConfig(playerInfo.locationForParty()); return islandLevel; } "	1	1	1	1	0	0
private List<ContainerInitializer> jspInitializers() { JettyJasperInitializer sci = new JettyJasperInitializer(); ContainerInitializer initializer = new ContainerInitializer(sci, null); List<ContainerInitializer> initializers = new ArrayList<ContainerInitializer>(); initializers.add(initializer); return initializers; } 	1	0	1	0	1	0
"@Override public String getCharSet() { String res = this.pdFont.getFontDescriptor().getStringKey(ASAtom.CHAR_SET); return res == null ? """" : res; } "	1	1	1	0	1	0
"@Override public void addBody(Map objectModel, Division div) throws WingException, SQLException {  Division wfdiv = div.addDivision(""unpublished_items"", ""well well-light"");  wfdiv.setHead(""WORKFLOW ITEMS""); wfdiv.addPara(null, ""alert alert-info"").addContent(""Following items are currently in workflow mode i.e. waiting for an approval. You can view the details of the item by clicking the itemID"");  Table wftable = wfdiv.addTable(""workspace_items"", 1, 5);  Row wfhead = wftable.addRow(Row.ROLE_HEADER);  wfhead.addCellContent(""WORKFLOW ID""); wfhead.addCellContent(""ITEM ID""); wfhead.addCellContent(""COLLECTION""); wfhead.addCellContent(""CURRENT STATE""); wfhead.addCellContent(""ASSIGNED TO""); wfhead.addCellContent(""LAST MODIFIED"");  String []row_classes = {""success"", ""error"", ""warning"", ""error"", ""warning"", ""error"", ""warning"", ""success"", ""error""};  for(TableRow dbrow : getWorkflowItems()) { int state = dbrow.getIntColumn(""state""); Row wsrow = wftable.addRow(null, Row.ROLE_DATA, row_classes[state]); wsrow.addCell().addContent(dbrow.getIntColumn(""workflow_id"")); int itemID = dbrow.getIntColumn(""item_id""); wsrow.addCell().addXref(contextPath + ""/admin/item?cp=1&identifier="" + itemID).addContent(itemID); wsrow.addCell().addContent(dbrow.getStringColumn(""collection_name"")); wsrow.addCell().addHighlight(getWorkflowStateClass(state)).addContent(getWorkflowStateMessage(state)); String owner = dbrow.getStringColumn(""owner""); if(owner!=null) { wsrow.addCellContent(owner); } else { wsrow.addCellContent(""task pending""); } wsrow.addCellContent(dbrow.getDateColumn(""last_modified"").toString()); }  Division wsdiv = div.addDivision(""workspace_items"", ""well well-light"");  wsdiv.setHead(""WORKSPACE ITEMS""); wsdiv.addPara(null, ""alert alert-info"").addContent(""Following items are currently in workspace mode i.e. in the process of submission. You can view the details of the item by clicking the itemID"");  Table wstable = wsdiv.addTable(""workspace_items"", 1, 5);  Row wshead = wstable.addRow(Row.ROLE_HEADER);  wshead.addCellContent(""WORKSPACE ID""); wshead.addCellContent(""ITEM ID""); wshead.addCellContent(""STAGE REACHED""); wshead.addCellContent(""SUBMITTER EMAIL""); wshead.addCellContent(""REJECTED""); wshead.addCellContent(""LAST MODIFIED"");  for(TableRow dbrow : getWorkspaceItems()) { int page_reached = dbrow.getIntColumn(""page_reached""); Row wsrow = wstable.addRow(null, Row.ROLE_DATA, page_reached == Integer.MAX_VALUE ? ""error"" : ""warning""); wsrow.addCell().addContent(dbrow.getIntColumn(""workspace_item_id"")); int itemID = dbrow.getIntColumn(""item_id""); wsrow.addCell().addXref(contextPath + ""/admin/item?cp=1&identifier="" + itemID).addContent(itemID); wsrow.addCell().addContent(dbrow.getIntColumn(""stage_reached"")); wsrow.addCellContent(dbrow.getStringColumn(""submitter"")); if(page_reached == Integer.MAX_VALUE) { wsrow.addCell().addHighlight(""label label-important"").addContent(""Rejected""); } else { wsrow.addCell().addHighlight(""label label-warning"").addContent(""Not Submitted""); } wsrow.addCellContent(dbrow.getDateColumn(""last_modified"").toString()); }   } "	0	0	0	0	0	1
"private Object[] getConvertedParameters(HttpServerExchange exchange) throws Exception { Map<String, String> queryParameters = getRequestParameters(exchange); Object [] parameters = new Object[this.parameterCount];  int index = 0; for (Map.Entry<String, Class<?>> entry : this.methodParameters.entrySet()) { String key = entry.getKey(); Class<?> clazz = entry.getValue();  if ((Form.class).equals(clazz)) { parameters[index] = getForm(exchange); } else if ((Body.class).equals(clazz)) { parameters[index] = getBody(exchange); } else if ((Authentication.class).equals(clazz)) { parameters[index] = this.authentication; } else if ((Session.class).equals(clazz)) { parameters[index] = this.session; } else if ((Flash.class).equals(clazz)) { parameters[index] = getFlash(exchange); } else if ((String.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? """" : queryParameters.get(key); } else if ((Integer.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Integer.valueOf(0) : Integer.valueOf(queryParameters.get(key)); } else if ((int.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Integer.valueOf(0) : Integer.valueOf(queryParameters.get(key)); } else if ((Double.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Double.valueOf(0) : Double.valueOf(queryParameters.get(key)); } else if ((double.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Double.valueOf(0) : Double.valueOf(queryParameters.get(key)); } else if ((Float.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Float.valueOf(0) : Float.valueOf(queryParameters.get(key)); } else if ((float.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Float.valueOf(0) : Float.valueOf(queryParameters.get(key)); } else if ((Long.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Long.valueOf(0) : Long.valueOf(queryParameters.get(key)); } else if ((long.class).equals(clazz)) { parameters[index] = (StringUtils.isBlank(queryParameters.get(key))) ? Long.valueOf(0) : Long.valueOf(queryParameters.get(key)); } else if ((ContentType.APPLICATION_JSON.toString()).equals(exchange.getRequestHeaders().get(Headers.CONTENT_TYPE).element())) { if (this.mapper == null) { this.mapper = JsonFactory.create(); } parameters[index] = this.mapper.readValue(getBody(exchange).asString(), clazz); }  index++; }  return parameters; } "	0	0	0	0	0	1
public static FileSink sinkFor(String filename) { if (filename.indexOf('.') > 0) { String ext = filename.substring(filename.lastIndexOf('.') + 1); ext = ext.toLowerCase();  if (ext2sink.containsKey(ext)) { Class<? extends FileSink> fsink = ext2sink.get(ext);  try { return fsink.newInstance(); } catch (InstantiationException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } } }  return null; } 	1	0	1	0	1	0
"public static UriMatcher buildUriMatcher() { final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH); final String authority = ScheduleContract.CONTENT_AUTHORITY;  matcher.addURI(authority, ScheduleContract.PATH_SCHEDULE, SCHEDULE); matcher.addURI(authority, ScheduleContract.PATH_SCHEDULE + ""/#"", SCHEDULE_WITH_ID);  return matcher; } "	0	0	0	0	0	1
"private void sendNotification(String msg) { Log.d(""AlarmService"", ""Preparing to send notification...: "" + msg); alarmNotificationManager = (NotificationManager) this .getSystemService(Context.NOTIFICATION_SERVICE);  PendingIntent contentIntent = PendingIntent.getActivity(this, 0, new Intent(this, Alarm.class), 0);  NotificationCompat.Builder alarmNotificationBuilder = new NotificationCompat.Builder( this).setContentTitle(""Alarm"").setSmallIcon(R.mipmap.ic_launcher) .setStyle(new NotificationCompat.BigTextStyle().bigText(msg)) .setContentText(msg);   alarmNotificationBuilder.setContentIntent(contentIntent); alarmNotificationManager.notify(1, alarmNotificationBuilder.build()); Log.d(""AlarmService"", ""Notification sent.""); } "	0	0	0	0	0	1
"@Test public void loggedInUserShouldNotSeeWorkInProgressRecords() throws Exception { when(repository.findByName(""Pedr"")).thenReturn(Arrays.asList( anEmployeeRecord().withUsername(""Pedr"").isWorkInProgress(true).build(), anEmployeeRecord().withUsername(""Pedr"").isWorkInProgress(false).build())); Principal principle = Mockito.mock(Principal.class); when(principle.getName()).thenReturn(""Pedr""); List<EmployeeRecord> employeeRecordsForLoggedInUser = employeeController.getEmployeeRecordsForLoggedInUser(principle);  assertThat(employeeRecordsForLoggedInUser.size(), is(1)); assertFalse(employeeRecordsForLoggedInUser.get(0).isWorkInProgress()); } "	0	0	0	0	0	1
"public void trueResponse() { count++; MediaPlayer mediaplayer; mediaplayer = MediaPlayer.create(this, R.raw.ding); mediaplayer.start(); if (status) this.setCorrectCount(); measureSpeed(); if ((status && count == 128) || (!status && totalAttempts == 40)) { viewFlipper.setDisplayedChild(2); avgTime = avgTime / totalAttempts; avgTime = avgTime / 1000; String speed = "": "" + new DecimalFormat(""###.##"").format(avgTime)+ "" seconds""; String result = "": "" + count +"" / ""+ totalAttempts; resultText.setText(result); speedText.setText(speed); count = 0; setUpAgain(); if (status && count == 128) { progressBar.setVisibility(View.VISIBLE); progressBar.setProgress(getCorrectCount()+count/7500); } } else { showBlankScreen(); progressBar.setVisibility(View.INVISIBLE); }  } "	1	1	1	1	0	0
public void deleteBorrowedInstrument(Instrument instrument) { if (this.ownedInstruments.containsInstrument(instrument)) { this.borrowedInstruments.removeInstrument(instrument); } else { throw new RuntimeException(); } } 	1	0	1	1	1	0
public static <T extends Object> T getSpringBean(final Class<T> beanClass) { return getSpringBean(SpringUtilConstants.CONTEXT_DEFINITION, beanClass); } 	0	0	0	0	0	1
"public void initProperties() { String propertiesPathTemp; try { propertiesPathTemp = new File(""."").getCanonicalPath() + File.separator + ""properties"" + File.separator + getID() + "".properties""; } catch (IOException e) { propertiesPathTemp = null; context.getLogger().error(""Error while trying to build the propertiesPathTemp"", e); }  propertiesPath = propertiesPathTemp; File propertiesFile = new File(propertiesPath); if (!propertiesFile.exists()) try { propertiesFile.createNewFile(); } catch (IOException e) { context.getLogger().error(""Error while trying to create the new Properties file"", e); }  try { BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(propertiesFile), ""UTF8"")); try { properties.load(in); } catch (IOException e) { context.getLogger().error(""unable to load the InputStream for the PropertiesFile"",e); } } catch (FileNotFoundException | UnsupportedEncodingException e) { context.getLogger().error(""Error while trying to read Properties-File"", e); }  if (defaultPropertiesPath != null) { @SuppressWarnings(""unchecked"") Enumeration<String> keys = (Enumeration<String>)properties.propertyNames();  if (!keys.hasMoreElements()) { try { createDefaultPropertyFile(defaultPropertiesPath); } catch (IOException e) { context.getLogger().error(""Error while trying to copy the Default-Properties File"", e); }  if (new File(defaultPropertiesPath).exists() && !writeToPropertiesFile(defaultPropertiesPath)) return; reloadProperties(); } } } "	0	0	0	0	0	1
public static Gson getDeskClientGson() { return new GsonBuilder() .registerTypeAdapter(Date.class, new ISO8601DateAdapter()) .registerTypeAdapter(IOpportunityActivity.class, new OpportunityActivityAdapter()) .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES) .create(); } 	0	0	0	0	0	1
public int getApartmentNumber() { return apartmentNumber; } 	0	0	0	0	0	1
@Override protected IndentLevel getChildrenExpectedIndent() { final IndentLevel expectedIndent = new IndentLevel(getIndent(), getIndentCheck().getArrayInitIndent(), getIndentCheck().getLineWrappingIndentation());  final int firstLine = getFirstLine(Integer.MAX_VALUE, getListChild()); final int lcurlyPos = expandedTabsColumnNo(getLeftCurly()); final int firstChildPos = getNextFirstNonBlankOnLineAfter(firstLine, lcurlyPos); if (firstChildPos >= 0) { expectedIndent.addAcceptedIndent(firstChildPos); expectedIndent.addAcceptedIndent(lcurlyPos + getLineWrappingIndentation()); } return expectedIndent; } 	0	0	0	1	1	0
@Override public Data3D<Float> getLatestGaussianData() { return mag.get(0); } 	0	0	0	0	0	1
@Override public Slice getSlice(int field) { Type type = getType(field); if (type instanceof DecimalType) { DecimalType actual = (DecimalType) type; CarbondataColumnHandle carbondataColumnHandle = columnHandles.get(field); if (carbondataColumnHandle.getPrecision() > 0) { checkFieldType(field, DecimalType.createDecimalType(carbondataColumnHandle.getPrecision(), carbondataColumnHandle.getScale())); } else { checkFieldType(field, DecimalType.createDecimalType()); } String fieldValue = getFieldValue(field); BigDecimal bigDecimalValue = new BigDecimal(fieldValue); if (isShortDecimal(type)) { return utf8Slice(Decimals.toString(bigDecimalValue.longValue(), actual.getScale())); } else { if (bigDecimalValue.scale() > actual.getScale()) { BigInteger unscaledDecimal = rescale(bigDecimalValue.unscaledValue(), bigDecimalValue.scale(), bigDecimalValue.scale()); Slice decimalSlice = Decimals.encodeUnscaledValue(unscaledDecimal); return utf8Slice(Decimals.toString(decimalSlice, actual.getScale())); //return decimalSlice; } else { BigInteger unscaledDecimal = rescale(bigDecimalValue.unscaledValue(), bigDecimalValue.scale(), actual.getScale()); Slice decimalSlice = Decimals.encodeUnscaledValue(unscaledDecimal); return utf8Slice(Decimals.toString(decimalSlice, actual.getScale())); //return decimalSlice; } } } else { checkFieldType(field, VARCHAR); return utf8Slice(getFieldValue(field)); } } 	1	1	1	0	1	0
"@Test public void buttonPushedCarparkFull() { when(carpark.isFull()).thenReturn(true); entryController.buttonPushed(); verify(ui).display(""Carpark Full""); assertTrue(FULL.equals(entryController.getStateAsString()));  } "	0	1	1	1	1	0
public void displayNormal(ImageView view, Gem gem) { view.setImage(gem.getImage()); } 	0	0	0	0	0	1
@Override public boolean isDisposable() { return isAlive(); } 	1	0	1	0	0	0
public float base_score(int player, GameState gs) { PhysicalGameState pgs = gs.getPhysicalGameState(); float score = gs.getPlayer(player).getResources()*RESOURCE; boolean anyunit = false; for(Unit u:pgs.getUnits()) { if (u.getPlayer()==player) { anyunit = true; score += u.getResources() * RESOURCE_IN_WORKER; score += UNIT_BONUS_MULTIPLIER * (u.getCost()*Math.sqrt(u.getHitPoints()))/(float)u.getMaxHitPoints(); } } if (!anyunit) return 0; return score; } 	1	1	0	1	1	0
public float base_score(int player, GameState gs) { PhysicalGameState pgs = gs.getPhysicalGameState(); float score = gs.getPlayer(player).getResources()*RESOURCE; boolean anyunit = false; for(Unit u:pgs.getUnits()) { if (u.getPlayer()==player) { anyunit = true; score += u.getResources() * RESOURCE_IN_WORKER; score += UNIT_BONUS_MULTIPLIER * (u.getCost()*Math.sqrt(u.getHitPoints()))/(float)u.getMaxHitPoints(); } } if (!anyunit) return 0; return score; } 	1	1	0	1	1	0
public long getScore() { return score; } 	0	0	0	0	0	1
public Integer getPayTypes() { return payTypes; } 	0	0	0	0	0	1
public Integer getCreatedAt() { return createdAt; } 	0	0	0	0	0	1
private <T> boolean moveListItem(T item, List<T> list, int position, int distance) { if (item == null || list == null || list.isEmpty()) return false;  int newPosition = position + distance;  if (newPosition < 0 || newPosition > list.size()) return false;  list.remove(position); list.add(newPosition, item);  return true; } 	1	0	1	1	1	0
private String getLine(int number) throws Exception { String value = null; String pageContent = FitnesseFixtureContext.page.getHtml(); String lineizedContent = convertBreaksToLineSeparators(pageContent); StringTokenizer tokenizedLines = tokenizeLines(lineizedContent); for (int i = number; i != 0; i--) value = tokenizedLines.nextToken(); return value.trim(); } 	0	1	1	1	1	0
"public Citizen addCitizen(String fullName, String personalId, int gender, int birthDateDay, int birthDateMonth, int birthDateYear, String address, String cityCode, String districtCode, String wardCode, String cityName, String districtName, String wardName, String email, String telNo, long repositoryId, String sourceFileName, String mimeType, String title, InputStream inputStream, long size, ServiceContext serviceContext) throws SystemException, PortalException {  long citizenId = CounterLocalServiceUtil.increment(Citizen.class .getName());  Citizen citizen = citizenPersistence.create(citizenId);  Date now = new Date();  Date birthDate = DateTimeUtil.getDate(birthDateDay, birthDateMonth, birthDateYear);  PortletUtil.SplitName spn = PortletUtil.splitName(fullName);  Role roleDefault = null;  try { roleDefault = RoleLocalServiceUtil.getRole( serviceContext.getCompanyId(), WebKeys.CITIZEN_BUSINESS_ROLE_NAME); } catch (Exception e) { _log.info(""ROLE CITIZEN IS NULL""); }  boolean autoPassword = true; boolean autoScreenName = true; boolean sendEmail = false;  long[] groupIds = null; long[] organizationIds = null; long[] roleIds = null; long[] userGroupIds = null;  String password1 = null; String password2 = null; String screenName = null;  // add default role if (Validator.isNotNull(roleDefault)) { roleIds = new long[] { roleDefault.getRoleId() }; }  UserGroup userGroup = null; try { userGroup = UserGroupLocalServiceUtil.getUserGroup( serviceContext.getCompanyId(), PortletPropsValues.USERMGT_USERGROUP_NAME_CITIZEN); } catch (Exception e) { _log.warn(e.getMessage()); } if (userGroup == null) { userGroup = UserGroupLocalServiceUtil.addUserGroup( serviceContext.getUserId(), serviceContext.getCompanyId(), PortletPropsValues.USERMGT_USERGROUP_NAME_CITIZEN, StringPool.BLANK, serviceContext);  }  if (userGroup != null) { userGroupIds = new long[] { userGroup.getUserGroupId() }; } password1 = PwdGenerator.getPassword(); password2 = password1;  Role adminRole = RoleLocalServiceUtil.getRole( serviceContext.getCompanyId(), ""Administrator""); List<User> adminUsers = UserLocalServiceUtil.getRoleUsers(adminRole .getRoleId());  PrincipalThreadLocal.setName(adminUsers.get(0).getUserId()); PermissionChecker permissionChecker; try { permissionChecker = PermissionCheckerFactoryUtil.create(adminUsers .get(0)); PermissionThreadLocal.setPermissionChecker(permissionChecker);  serviceContext.setUserId(adminUsers.get(0).getUserId()); } catch (Exception e) { _log.error(e); }  User mappingUser = userService.addUserWithWorkflow( serviceContext.getCompanyId(), autoPassword, password1, password2, autoScreenName, screenName, email, 0L, StringPool.BLANK, LocaleUtil.getDefault(), spn.getFirstName(), spn.getMidName(), spn.getLastName(), 0, 0, (gender == 1), birthDateMonth, birthDateDay, birthDateYear, ""Citizen"", groupIds, organizationIds, roleIds, userGroupIds, new ArrayList<Address>(), new ArrayList<EmailAddress>(), new ArrayList<Phone>(), new ArrayList<Website>(), new ArrayList<AnnouncementsDelivery>(), sendEmail, serviceContext);  int status = WorkflowConstants.STATUS_INACTIVE;  mappingUser = userService.updateStatus(mappingUser.getUserId(), status);  String[] folderNames = new String[] { PortletConstants.DestinationRoot.CITIZEN.toString(), cityName, districtName, wardName, String.valueOf(mappingUser.getUserId()) };  String destination = PortletUtil.getDestinationFolder(folderNames);  serviceContext.setAddGroupPermissions(true); serviceContext.setAddGuestPermissions(true);  FileEntry fileEntry = null;  if (size > 0 && inputStream != null) { // Create person folder DLFolder dlFolder = DLFolderUtil.getTargetFolder( mappingUser.getUserId(), serviceContext.getScopeGroupId(), repositoryId, false, 0, destination, StringPool.BLANK, false, serviceContext);  fileEntry = DLAppServiceUtil.addFileEntry(repositoryId, dlFolder.getFolderId(), sourceFileName, mimeType, title, StringPool.BLANK, StringPool.BLANK, inputStream, size, serviceContext); }  citizen.setAccountStatus(PortletConstants.ACCOUNT_STATUS_REGISTERED); citizen.setAddress(address); citizen.setAttachFile(fileEntry != null ? fileEntry.getFileEntryId() : 0); citizen.setBirthdate(birthDate); citizen.setCityCode(cityCode); citizen.setCompanyId(serviceContext.getCompanyId()); citizen.setCreateDate(now); citizen.setDistrictCode(districtCode); citizen.setEmail(email); citizen.setFullName(fullName); citizen.setGender(gender); citizen.setGroupId(serviceContext.getScopeGroupId()); citizen.setMappingUserId(mappingUser.getUserId()); citizen.setModifiedDate(now); citizen.setPersonalId(personalId); citizen.setTelNo(telNo); citizen.setUserId(mappingUser.getUserId()); citizen.setWardCode(wardCode);  citizen.setUuid(PortalUUIDUtil.generate());  return citizenPersistence.update(citizen); } "	0	0	0	0	0	1
"private void executePythonScript2(Session ssnSession, String clusterName, String notebookTestFile, String notebook) throws JSchException, IOException, InterruptedException { String command; AckStatus status;  command = String.format(ScpCommands.runPythonCommand2, String.format(""/home/%s/%s"", ConfigPropertyValue.getClusterOsUser(), notebookTestFile), getBucketName()); LOGGER.info(""{}: Executing command {}..."",notebook, command);  ChannelExec runScript = SSHConnect.setCommand(ssnSession, command); status = SSHConnect.checkAck(runScript); LOGGER.info(""{}: Script execution status message {} and code {}"", notebook, status.getMessage(), status.getStatus()); assertTrue(status.isOk(), notebook + "": The python script execution wasn`t successful on : "" + clusterName);  LOGGER.info(""{}: Python script executed successfully "", notebook); } "	0	0	0	0	0	1
protected static HashMap<PartType, Integer> getMissingPartsForProductionPlan(int plan) { //TODO Complete this method HashMap<PartType, Integer> result = new HashMap<>(); ProductionPlan pp = data.getProductionPlans().get(plan); if (pp == null) return result; for (Vehicle v : pp.getVehicles()) for (Entry<PartType, Integer> entry : v.model.getRequiredParts().entrySet()) if (result.containsKey(entry.getKey())) result.put(entry.getKey(), result.get(entry.getKey()) + entry.getValue()); else result.put(entry.getKey(), entry.getValue()); for (Warehouse w : data.getWarehouses().values()) if (w.getMaxPartsStored() > 0) for (Entry<PartType, Integer> entry : w.getParts().entrySet()) if (result.containsKey(entry.getKey())) { if (result.get(entry.getKey()) == entry.getValue()) result.remove(entry.getKey()); else result.put(entry.getKey(), result.get(entry.getKey()) - entry.getValue()); } return result; } 	1	1	1	1	0	0
public static float calculate(RequestDTO request, HolidayService holidayService) { return (float) calculateDays(request.getStartDate(), request.getEndDate(), holidayService) * request.getRequester().getWorkTime(); } 	1	0	1	1	1	0
public static float calculate(UserDTO requester, LocalDate startDate, LocalDate endDate, HolidayService holidayService) { return (float) calculateDays(startDate, endDate, holidayService) * requester.getWorkTime(); } 	1	0	1	0	1	0
"@Override public Out execute(In parameters) throws Exception {  List<Payment> payments = new ArrayList<>();  Out out = new DefaultOut(); Connection connection = parameters.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(""Select o.id_food_meeting, u.name, o.order_name, o.cost from orders o, users u where o.id_food_meeting = ?""); preparedStatement.setInt(1, Integer.valueOf(parameters.getParameter(""id_food_meeting""))); ResultSet resultSet = preparedStatement.executeQuery();  while (resultSet.next()) { payments.add(new Payment(resultSet.getString(1), resultSet.getString(2), resultSet.getString(3), resultSet.getDouble(4))); }  out.addResult(""meetingName"", parameters.getParameter(""meeting_name"")); out.addResult(""payments"", payments); out.forward(""payment/payment.jsp"");  return out; } "	0	0	0	1	1	0
private BuildableWatchWordGrid setWords(List<String> words) { this.words = words; this.owners = new ArrayList<Faction>(); for (int x = 0; x < words.size(); x++) { this.owners.add(null); } return this; } 	1	1	1	0	1	0
"private void startNavigation() { Timber.d(""Navigation session started.""); if (navigationEventListeners != null) { for (NavigationEventListener navigationEventListener : navigationEventListeners) { navigationEventListener.onRunning(true); } }  Handler responseHandler = new Handler(); locationUpdatedThread = new LocationUpdatedThread(responseHandler); locationUpdatedThread.start(); locationUpdatedThread.getLooper(); Timber.d(""Background thread started""); } "	1	0	1	0	1	0
"private void addCallToClosure() { for (SwiftParameter parameter : getClosureParameters()) { int count = getClosureParameterTypes(parameter).size(); String name = parameter.getName(); String closureCall; String optional = MySwiftPsiUtil.containsOptionalOfType(parameter, SwiftTupleTypeElement.class) ? ""?"" : """"; if (count == 0) { closureCall = name + optional + ""()""; } else { closureCall = ""if let result = "" + createClosureResultName(name) + "" {""; closureCall += name + optional + ""(""; closureCall += IntStream.range(0, count).mapToObj(i -> ""result."" + i).collect(Collectors.joining("","")); closureCall += "") }""; } PsiElement statement = getElementFactory().createStatement(closureCall, protocolFunction); appendInImplementedFunction(statement); } } "	0	0	0	0	0	1
public Date getDate() { return date; } 	0	0	0	0	0	1
"private static void addSerializableTypes(final Set<MetaClass> exposedClasses, final Set<String> explicitTypes, final String value) { final Set<String> patterns = new LinkedHashSet<>(); for (final String s : value.split("" "")) { final String singleValue = s.trim(); if (singleValue.isEmpty()){ continue; } if (singleValue.endsWith(""*"")) { patterns.add(singleValue); } else { try { exposedClasses.add(MetaClassFactory.get(singleValue)); explicitTypes.add(singleValue); } catch (final Exception e) { throw new RuntimeException(""could not find class defined in ErraiApp.properties for serialization: "" + s, e); } } } if (!patterns.isEmpty()) { final SimplePackageFilter filter = new SimplePackageFilter(patterns); MetaClassFactory .getAllCachedClasses() .stream() .filter(mc -> filter.apply(mc.getFullyQualifiedName())) .collect(toCollection(() -> exposedClasses)); } } "	0	0	0	0	0	1
"@Override public Claim transform(Map<String, Object> assertion) { String assertionJson; Map<String, Object> mapped; assertionJson = claimToJson(assertion);  if (ruleProcessor == null) { LOG.debug(""ruleProcessor not configured""); return null; }  if (LOG.isDebugEnabled()) { LOG.debug(""assertionJson=\n{}"", assertionJson); }  mapped = ruleProcessor.process(assertionJson); if (mapped == null) { if (LOG.isDebugEnabled()) { LOG.debug(""RuleProcessor returned null""); } return null; }  if (LOG.isDebugEnabled()) { LOG.debug(""RuleProcessor returned: {}"", mapped); }  ClaimBuilder cb = new ClaimBuilder(); if (mapped.containsKey(""ClientId"")) { cb.setClientId((String) mapped.get(""ClientId"")); } if (mapped.containsKey(""UserId"")) { cb.setUserId((String) mapped.get(""UserId"")); } if (mapped.containsKey(""User"")) { cb.setUser((String) mapped.get(""User"")); } if (mapped.containsKey(""Domain"")) { cb.setDomain((String) mapped.get(""Domain"")); } if (mapped.containsKey(""Roles"")) { @SuppressWarnings(""unchecked"") List<String> roles = (List<String>) mapped.get(""roles""); for (String role : roles) { cb.addRole(role); } } Claim claim = cb.build();  if (LOG.isDebugEnabled()) { LOG.debug(""returns claim = {}"", claim.toString()); }  return claim; } "	1	1	1	1	0	0
"@Override public CommandResult execute() { try { //Remove comment after Model component adds a setIsDone() method which changes the value of //it isDone attribute.  model.doneTask(taskIndex);  return new CommandResult(String.format(MESSAGE_SUCCESS, taskIndex));  } catch (IndexOutOfBoundsException ie) { return new CommandResult(""The task index provided is invalid""); } catch (TaskNotFoundException pnfe) { return new CommandResult(""Task does not exist in task-tracker""); } } "	1	0	1	1	1	0
"public Long getSharedOilPeriod(AlternativeFundingContract contract) { //        CriteriaBuilder cb = getEntityManager().getCriteriaBuilder(); //        CriteriaQuery<Long> q = cb.createQuery(Long.class); //        Root<T> t = q.from(entityClass); // //        q.select(cb.count(q.from(entityClass))); ////        q.where( ////                cb.and( ////                        cb.equal(t.get(""contract""), contract), ////                        cb.notEqual(t.get(""sharedOil""), """") ////                ) ////        ); //        q.where( //                cb.equal(t.get(""contract""), contract) //        ); // //        Long sharedOilPeriod = getEntityManager().createQuery(q).getSingleResult();  Contract contractToFind = contractBean.find(contract);  LOG.log(Level.INFO, ""Entity type is {0}..."", entityClass);  TypedQuery<Long> query = getEntityManager().createQuery( ""SELECT COUNT(f) "" + ""FROM AlternativeFundingForecast f  WHERE f.contract = :contract AND f.sharedOil != null"", Long.class); query.setParameter(""contract"", contractToFind);  long sharedOilPeriod = query.getSingleResult();  LOG.log(Level.INFO, ""Shared Oil Received for {0} months..."", sharedOilPeriod);  return sharedOilPeriod;  } "	0	0	0	0	0	1
public LongProperty gymOffenseProperty() { return gymOffense; } 	0	0	0	0	0	1
private com.google.protobuf.RepeatedFieldBuilder< com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormat, com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormat.Builder, com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormatOrBuilder> getDeliveryAttemptsFieldBuilder() { if (deliveryAttemptsBuilder_ == null) { deliveryAttemptsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder< com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormat, com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormat.Builder, com.rbmhtechnology.eventuate.serializer.SnapshotFormats.DeliveryAttemptFormatOrBuilder>( deliveryAttempts_, ((bitField0_ & 0x00000004) == 0x00000004), getParentForChildren(), isClean()); deliveryAttempts_ = null; } return deliveryAttemptsBuilder_; } 	0	0	0	0	0	1
public void updateItem(int index, final BLEDevice item) { bleDeviceList.set(index,item); notifyDataSetChanged(); } 	0	0	0	0	0	1
"ArrayList<Session> getSessionList(SQLiteDatabase mDb) {  String sortOrder = DbContract.Sessions.ID + ASCENDING;  Cursor cursor = mDb.query( DbContract.Sessions.TABLE_NAME, DbContract.Sessions.FULL_PROJECTION, null, null, null, null, sortOrder );  ArrayList<Session> sessions = new ArrayList<>(); Session session;  if (cursor != null && cursor.moveToFirst()) { while (!cursor.isAfterLast()) { try { Microlocation microlocation = getMicrolocationFromCursor(cursor, mDb); Track track = getTrackFromCursor(cursor, mDb);  session = new Session( cursor.getInt(cursor.getColumnIndex(DbContract.Sessions.ID)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.TITLE)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.SUBTITLE)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.SUMMARY)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.DESCRIPTION)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.START_TIME)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.END_TIME)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.START_DATE)), cursor.getString(cursor.getColumnIndex(DbContract.Sessions.TYPE)), track, cursor.getString(cursor.getColumnIndex(DbContract.Sessions.LEVEL)), microlocation  ); sessions.add(session); } catch (ParseException e) { Timber.e(""Parsing Error Occurred at DatabaseOperations::getSessionList.""); } cursor.moveToNext(); } cursor.close(); } return sessions; } "	0	0	0	0	0	1
Version getVersionIds(SQLiteDatabase mDb) {  Cursor cursor = mDb.query( DbContract.Versions.TABLE_NAME, DbContract.Versions.FULL_PROJECTION, null, null, null, null, null );  Version currentVersion; if (cursor != null && cursor.getCount() > 0) { cursor.moveToFirst();  currentVersion = new Version( cursor.getInt(cursor.getColumnIndex(DbContract.Versions.VER_EVENT)), cursor.getInt(cursor.getColumnIndex(DbContract.Versions.VER_TRACKS)), cursor.getInt(cursor.getColumnIndex(DbContract.Versions.VER_SESSIONS)), cursor.getInt(cursor.getColumnIndex(DbContract.Versions.VER_SPONSORS)), cursor.getInt(cursor.getColumnIndex(DbContract.Versions.VER_SPEAKERS)), cursor.getInt(cursor.getColumnIndex(DbContract.Versions.VER_MICROLOCATIONS)) ); cursor.close(); return currentVersion;  } else { return null; } } 	0	0	0	0	0	1
"void deleteBookmarks(int id, SQLiteDatabase db) { db.delete(DbContract.Bookmarks.TABLE_NAME, DbContract.Bookmarks.SESSION_ID + ""="" + id, null);  } "	0	0	0	0	0	1
org.fossasia.openevent.data.Track getTrackByTrackId(int id, SQLiteDatabase mDb) { String tracksColumnSelection = DbContract.Tracks.ID + EQUAL + DatabaseUtils.sqlEscapeString(String.valueOf(id));  Cursor tracksCursor = mDb.query( DbContract.Tracks.TABLE_NAME, DbContract.Tracks.FULL_PROJECTION, tracksColumnSelection, null, null, null, null );  org.fossasia.openevent.data.Track selected = null;  if (tracksCursor != null && tracksCursor.moveToFirst()) {  selected = new org.fossasia.openevent.data.Track( tracksCursor.getInt(tracksCursor.getColumnIndex(DbContract.Tracks.ID)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.NAME)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.DESCRIPTION)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.IMAGE)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.COLOR)) ); tracksCursor.close(); } return selected; } 	0	0	0	0	0	1
"ArrayList<Sponsor> getSponsorList(SQLiteDatabase mDb) { String sortOrder = DbContract.Sponsors.LEVEL + DESCENDING + "", "" + DbContract.Sponsors.NAME + ASCENDING; Cursor cursor = mDb.query( DbContract.Sponsors.TABLE_NAME, DbContract.Sponsors.FULL_PROJECTION, null, null, null, null, sortOrder );  ArrayList<Sponsor> sponsors = new ArrayList<>(); Sponsor sponsor;  if (cursor != null && cursor.moveToFirst()) { while (!cursor.isAfterLast()) { sponsor = new Sponsor( cursor.getInt(cursor.getColumnIndex(DbContract.Sponsors.ID)), cursor.getString(cursor.getColumnIndex(DbContract.Sponsors.NAME)), cursor.getString(cursor.getColumnIndex(DbContract.Sponsors.URL)), cursor.getString(cursor.getColumnIndex(DbContract.Sponsors.LOGO_URL)), cursor.getString(cursor.getColumnIndex(DbContract.Sponsors.TYPE)), cursor.getInt(cursor.getColumnIndex(DbContract.Sponsors.LEVEL))  ); sponsor.changeSponsorTypeToString(cursor.getString(cursor.getColumnIndex(DbContract.Sponsors.TYPE)));  sponsors.add(sponsor); cursor.moveToNext(); } cursor.close(); } return sponsors; } "	0	0	0	0	0	1
List<SocialLink> getSocialLink(SQLiteDatabase mDb) {  Cursor cursor = mDb.query( DbContract.SocialLink.TABLE_NAME, DbContract.SocialLink.FULL_PROJECTION, null, null, null, null, null );  List<SocialLink> socialLinks = new ArrayList<>(); SocialLink currentSocialLink; if (cursor != null && cursor.moveToFirst()) { while (!cursor.isAfterLast()) { currentSocialLink = new SocialLink( cursor.getString(cursor.getColumnIndex(DbContract.SocialLink.LINK)), cursor.getString(cursor.getColumnIndex(DbContract.SocialLink.ID)), cursor.getString(cursor.getColumnIndex(DbContract.SocialLink.NAME))); socialLinks.add(currentSocialLink); cursor.moveToNext(); } cursor.close(); } return socialLinks; } 	0	0	0	0	0	1
"boolean isBookmarked(int sessionId, SQLiteDatabase db) { boolean number = false; Cursor c = null; try { c = db.rawQuery(""select "" + DbContract.Bookmarks.SESSION_ID + "" from "" + DbContract.Bookmarks.TABLE_NAME + "" where session_id = ?"", new String[]{String.valueOf(sessionId)});  if (c.getCount() == 1) { number = true;  }  } catch (Exception e) { Timber.e(""Parsing Error Occurred at DatabaseOperations::isBookmarked.""); } finally { if (c != null) c.close(); } return number; } "	0	0	0	0	0	1
org.fossasia.openevent.data.Track getTrackByTrackName(String trackName, SQLiteDatabase mDb) { String tracksColumnSelection = DbContract.Tracks.NAME + EQUAL + DatabaseUtils.sqlEscapeString(trackName);  Cursor tracksCursor = mDb.query( DbContract.Tracks.TABLE_NAME, DbContract.Tracks.FULL_PROJECTION, tracksColumnSelection, null, null, null, null );  org.fossasia.openevent.data.Track selected = null;  if (tracksCursor != null && tracksCursor.moveToFirst()) {  selected = new org.fossasia.openevent.data.Track( tracksCursor.getInt(tracksCursor.getColumnIndex(DbContract.Tracks.ID)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.NAME)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.DESCRIPTION)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.IMAGE)), tracksCursor.getString(tracksCursor.getColumnIndex(DbContract.Tracks.COLOR)) ); tracksCursor.close(); } return selected;  } 	0	0	0	0	0	1
@Override public void setPreferenceScreen(PreferenceScreen preferenceScreen) { if (!preferenceScreen.isAttached()) { // Without ids generated, the RecyclerView won't animate changes to the preferences. preferenceScreen.setShouldUseGeneratedIds(mAnimationAllowed); } super.setPreferenceScreen(preferenceScreen); if (preferenceScreen != null) { if (mHeader != null) { preferenceScreen.addPreference(mHeader); } if (mFooter != null) { preferenceScreen.addPreference(mFooter); } } } 	1	0	1	1	1	0
public BTChipInput getTrustedInput(BitcoinTransaction transaction, long index, long sequence) throws BTChipException { ByteArrayOutputStream data = new ByteArrayOutputStream(); // Header BufferUtils.writeUint32BE(data, index); BufferUtils.writeBuffer(data, transaction.getVersion()); VarintUtils.write(data, transaction.getInputs().size()); exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x00, (byte)0x00, data.toByteArray(), OK); // Each input for (BitcoinTransaction.BitcoinInput input : transaction.getInputs()) { data = new ByteArrayOutputStream(); BufferUtils.writeBuffer(data, input.getPrevOut()); VarintUtils.write(data, input.getScript().length); exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, data.toByteArray(), OK); data = new ByteArrayOutputStream(); BufferUtils.writeBuffer(data, input.getScript()); exchangeApduSplit2(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, data.toByteArray(), input.getSequence(), OK); } // Number of outputs data = new ByteArrayOutputStream(); VarintUtils.write(data, transaction.getOutputs().size()); exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, data.toByteArray(), OK); // Each output for (BitcoinTransaction.BitcoinOutput output : transaction.getOutputs()) { data = new ByteArrayOutputStream(); BufferUtils.writeBuffer(data, output.getAmount()); VarintUtils.write(data, output.getScript().length); exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, data.toByteArray(), OK); data = new ByteArrayOutputStream(); BufferUtils.writeBuffer(data, output.getScript()); exchangeApduSplit(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, data.toByteArray(), OK); } // Locktime byte[] response = exchangeApdu(BTCHIP_CLA, BTCHIP_INS_GET_TRUSTED_INPUT, (byte)0x80, (byte)0x00, transaction.getLockTime(), OK); ByteArrayOutputStream sequenceBuf = new ByteArrayOutputStream(); BufferUtils.writeUint32BE(sequenceBuf, sequence); return new BTChipInput(response, sequenceBuf.toByteArray(), true); } 	0	0	0	0	0	1
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_register_user);  //initializing user and pass rUsername = (EditText) findViewById(R.id.usernameRegisterEditText); rPassword = (EditText) findViewById(R.id.passwordRegisterEditText); rConfirmPassword = (EditText) findViewById(R.id.confirmPasswordRegisterEditText); rRegisterButton = (Button) findViewById(R.id.registerButton); rEmail = (EditText) findViewById(R.id.emailRegisterEditText);  //Setting Button to listen to click rRegisterButton.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) {  final String username = rUsername.getText().toString().trim(); String password = rPassword.getText().toString().trim(); String email = rEmail.getText().toString().trim(); String confirmPassword = rConfirmPassword.getText().toString().trim();  if(password.equals(confirmPassword)) { // Pulled This Parse code from Parse.com, then modified // https://www.parse.com/docs/android/guide#users-signing-up //////////////////////////////////////////////////////////// ParseUser user = new ParseUser(); user.setUsername(username); user.setPassword(password); user.setEmail(email);   user.signUpInBackground(new SignUpCallback() { public void done(ParseException e) { if (e == null) {  // User signed up Scuccessfully Toast.makeText(RegisterUserActivity.this, ""Successfully Registered!"", Toast.LENGTH_LONG).show(); ParseObject schedule; ParseObject tempSchedule = new ParseObject(""TempSchedule""); tempSchedule.put(""UserID"",""""+username); for(int i = 1; i <= 10; i++){ tempSchedule.put(""Class""+i,""Empty""); } try { tempSchedule.save(); } catch (ParseException e1) { e1.printStackTrace(); } for(int createClassListCounter = 0;createClassListCounter<5;createClassListCounter++){ schedule = new ParseObject(""Schedule""); schedule.put(""ScheduleUserNum"",""""+username+createClassListCounter); try { schedule.save(); } catch (ParseException e1) { e1.printStackTrace(); } finish(); } } else { // Sign up didn't succeed. Look at the ParseException Toast.makeText(RegisterUserActivity.this, ""Registration Failed!"", Toast.LENGTH_LONG).show(); // to figure out what went wrong } } }); } else { Toast.makeText(RegisterUserActivity.this, ""Password fields dont match.."", Toast.LENGTH_LONG).show(); } } }); } "	0	0	0	0	0	1
"public String createFormattedCredential() { return config.getAccessKey() + ""/"" + timestamp.substring(0, lastIndex) + ""/"" + config.getRegion() + ""/"" + ""ec2/aws4_request""; } "	0	0	0	0	0	1
"public void updateMdsal(Hostconfig hostConfig, Action action) { InstanceIdentifier<Hostconfig> hostConfigId; if (hostConfig == null) { return; } try { switch (action) { case ADD: case UPDATE: final WriteTransaction writeTx = dataBroker.newWriteOnlyTransaction(); hostConfigId = createInstanceIdentifier(hostConfig); writeTx.put(LogicalDatastoreType.OPERATIONAL, hostConfigId, hostConfig, true); writeTx.submit().get(); break; case DELETE: final WriteTransaction delTx = dataBroker.newWriteOnlyTransaction(); hostConfigId = createInstanceIdentifier(hostConfig); delTx.delete(LogicalDatastoreType.OPERATIONAL, hostConfigId); delTx.submit().get(); break; default: break; } } catch (Exception e) { LOG.warn(""Hostconfig transaction commit failed to DS."", e); } } "	0	0	0	0	0	1
"void deserialize(Subscriber<? super AtomWritable> subscriber) { LOG.info(""current pos({}) done ({})"", pos, hasMore() ? ""has more"" : ""no more""); while (hasMore()) { try { int keysize = input.readUnsignedShort(); long rowSize = 2; byte[] rowKey = new byte[keysize]; input.readFully(rowKey); rowSize += keysize;  if (version.hasRowSizeAndColumnCount) { rowSize += input.readLong() + 8; // Since we have the row size in this version we can go ahead and set pos to the end of the row. this.pos += rowSize; }  /* * The local deletion times are similar to the times that they * were marked for delete, but we only care to know that it was * deleted at all, so we will go with the long value as the * timestamps for update are long as well. */ @SuppressWarnings({ ""unused"", ""UnusedAssignment"" }) int localDeletionTime = input.readInt(); rowSize += 4; long markedForDeleteAt = input.readLong(); rowSize += 8; int columnCount = Integer.MAX_VALUE; if (version.hasRowSizeAndColumnCount) { columnCount = input.readInt(); }  try { rowSize += deserializeColumns(subscriber, rowKey, markedForDeleteAt, columnCount, input); } catch (CorruptColumnException e) { subscriber.onError(new IOException( ""Error in row for key "" + BytesType.instance.getString(ByteBuffer.wrap(rowKey)), e)); }  // For versions without row size we need to load the columns to figure out the size they occupy if (!version.hasRowSizeAndColumnCount) { this.pos += rowSize; } } catch (IOException e) { subscriber.onError(e); break; } } } "	0	0	0	0	0	1
private static Authenticator getActiveDirectoryAuthenticator(final LdapAuthenticationProperties l) { final FormatDnResolver resolver = new FormatDnResolver(l.getDnFormat()); final Authenticator authn = new Authenticator(resolver, getPooledBindAuthenticationHandler(l));  final SearchEntryResolver entryResolver = new SearchEntryResolver(); entryResolver.setBaseDn(l.getBaseDn()); entryResolver.setUserFilter(l.getUserFilter()); entryResolver.setSubtreeSearch(l.isSubtreeSearch()); authn.setEntryResolver(new SearchEntryResolver());  return authn; } 	0	1	1	1	1	0
"@SuppressWarnings(""unused"") public void getAccessToken(@NonNull IDmeScope scope, boolean forceReload, @NonNull IDmeGetAccessTokenListener listener) { checkInitialization(); AuthToken token = accessTokenManager.getToken(scope); if (token == null) { listener.onError(new UnauthenticatedException()); } else if (token.isValidAccessToken() && !forceReload) { listener.onSuccess(token.getAccessToken()); } else if (token.isValidRefreshToken()) { RefreshAccessTokenHandler.refreshAccessToken(scope, token, listener); } else { listener.onError(new UnauthenticatedException()); } } "	1	1	1	1	0	0
"public static SequenceModel train() { long st = System.currentTimeMillis(); SequenceModel model = train(0.2f, 5); try { model.writeModel(new File(Config.SETTINGS_DIR+File.separator+modelFileName)); } catch(IOException e){ log.warn(""Unable to write model to disk""); e.printStackTrace(); } long et = System.currentTimeMillis(); log.info(""Trained and dumped model in ""+((et-st)/60000)+"" minutes.""); return model; } "	1	1	1	1	0	0
"public void undo(Map<String, Object> message) { log.info(""WhiteboardApplication - Deleting last graphic"");  String meetingID = getMeetingId(); String requesterID = getBbbSession().getInternalUserID(); String wbId = (String) message.get(WB_ID); if (wbId != null) { bbbInGW.undoWhiteboard(meetingID, requesterID, wbId); } } "	0	1	0	0	0	0
"public void sendAnnotation(Map<String, Object> annotation) { //		for (Map.Entry<String, Object> entry : annotation.entrySet()) { //		    String key = entry.getKey(); //		    Object value = entry.getValue();  //		    if (key.equals(""points"")) { //		    	String points = ""points=[""; //		    	ArrayList<Double> v = (ArrayList<Double>) value; //		    	log.debug(points + pointsToString(v) + ""]""); //		    } else { //		    	log.debug(key + ""=["" + value + ""]""); //		    } //		}  String meetingID = getMeetingId(); String requesterID = getBbbSession().getInternalUserID();  if (validMessage(annotation)) { bbbInGW.sendWhiteboardAnnotation(meetingID, requesterID, annotation); } } "	0	1	0	0	0	0
"public void resizeAndMoveSlide(Map<String, Object> msg) { Double xOffset; if (msg.get(""xOffset"") instanceof Integer) { Integer tempXOffset = (Integer) msg.get(""xOffset""); xOffset = tempXOffset.doubleValue(); } else { xOffset = (Double) msg.get(""xOffset""); }  Double yOffset;  if (msg.get(""yOffset"") instanceof Integer) { Integer tempYOffset = (Integer) msg.get(""yOffset""); yOffset = tempYOffset.doubleValue(); } else { yOffset = (Double) msg.get(""yOffset""); }  Double widthRatio; if (msg.get(""widthRatio"") instanceof Integer) { Integer tempWRatio = (Integer) msg.get(""widthRatio""); widthRatio = tempWRatio.doubleValue(); } else { widthRatio = (Double) msg.get(""widthRatio""); }   Double heightRatio; if (msg.get(""heightRatio"") instanceof Integer) { Integer tempHRatio = (Integer) msg.get(""heightRatio""); heightRatio = tempHRatio.doubleValue(); } else { heightRatio = (Double) msg.get(""heightRatio""); }  IScope scope = Red5.getConnectionLocal().getScope(); bbbInGW.resizeAndMoveSlide(scope.getName(), xOffset, yOffset, widthRatio, heightRatio); } "	0	1	0	0	0	0
"public void sharePresentation(Map<String, Object> msg) { String presentationID = (String) msg.get(""presentationID""); Boolean share = (Boolean) msg.get(""share"");  IScope scope = Red5.getConnectionLocal().getScope(); bbbInGW.sharePresentation(scope.getName(), presentationID, share); } "	0	1	0	0	0	0
"@Override @SuppressWarnings(""deprecation"") public void notifyOutOfRange() { //Before we trigger the out of range warning, make sure we have region info //or have a API URL that was custom set by the user in via Preferences //Otherwise, its premature since we don't know the device's relationship to //available OBA regions or the manually set API region String serverName = Application.get().getCustomApiUrl(); if (mWarnOutOfRange && (Application.get().getCurrentRegion() != null || !TextUtils .isEmpty(serverName))) { if (mRunning && UIHelp.canDisplayDialog(this)) { showDialog(OUTOFRANGE_DIALOG); } } } "	0	1	0	0	0	0
private void handleTemperatureCommand(PercentType temperature) { SetColorRequest packet = new SetColorRequest((int) (currentColorState.getHue().floatValue() / 360 * 65535.0f), (int) (currentColorState.getSaturation().floatValue() / 100 * 65535.0f), (int) (currentColorState.getBrightness().floatValue() / 100 * 65535.0f), toKelvin(temperature.intValue()), 0); packet.setResponseRequired(false); sendPacket(packet);  // the LIFX LAN protocol spec indicates that the response returned for a request would be the // previous value, so we explicitly demand for the latest value GetRequest colorPacket = new GetRequest(); sendPacket(colorPacket); } 	0	0	0	0	0	1
public static FpTexter getInstance() { if (fpTexts.isEmpty()) { instance.loadTexts(); } return instance; } 	0	1	0	0	0	0
"@RequestMapping(method = RequestMethod.GET, value = ""/retryme"") public int retryMe() { return retries.getAndIncrement(); } "	1	0	1	0	1	0
"@Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); if (resultCode == RESULT_OK) { if (requestCode == ADD_ITEM_REQUEST) { final Intent d = data; double price = Double.parseDouble(d.getStringExtra(""item_price"")); price *= 100; final ShoppingListItemBuilder bld = new ShoppingListItemBuilder(null) .name(d.getStringExtra(""item_name"")) .priority(convertPriority(d.getStringExtra(""item_prio""))) .imageUrl(d.getStringExtra(""item_img"")) .priority(convertPriority(d.getStringExtra(""item_prio""))) .quantity(Integer.parseInt(d.getStringExtra(""item_quan""))) .maxPriceCents(((int) price));  final long id = Long.parseLong(d.getStringExtra(""item_id"")); runOnUiThread(new Runnable() { @Override public void run() { if (findItem(id) >= 0) { return; } sla.add(new ShoppingListItemHandle(id, Optional.of(bld.build()))); sla.sort(comparator); } }); } } } "	0	0	0	0	0	1
private ProgressDialog buildProgressDialog() { ProgressDialog progressDialog = new ProgressDialog(this); progressDialog.setMax(100); progressDialog.setIndeterminate(false); progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL); progressDialog.setTitle(R.string.loading); progressDialog.setMessage(getString(R.string.please_wait)); return progressDialog; } 	0	1	0	0	0	0
public int[] getOnBuild() { return onBuild; } 	0	0	0	0	0	1
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_color_choice);  allSwatches = new TextView[8]; userColorChoices = new int[3];  // Pay attention to this... had no idea this was possible... allSwatches[0] = firstSwatch = (TextView) findViewById(R.id.firstSwatch); allSwatches[1] = secondSwatch = (TextView) findViewById(R.id.secondSwatch); allSwatches[2] = thirdSwatch = (TextView) findViewById(R.id.thirdSwatch); allSwatches[3] = fourthSwatch = (TextView) findViewById(R.id.fourthSwatch); allSwatches[4] = fifthSwatch = (TextView) findViewById(R.id.fifthSwatch); allSwatches[5] = sixthSwatch = (TextView) findViewById(R.id.sixthSwatch); allSwatches[6] = seventhSwatch = (TextView) findViewById(R.id.seventhSwatch); allSwatches[7] = eighthSwatch = (TextView) findViewById(R.id.eighthSwatch);  // grab survey data that was passed along Intent callingIntent = getIntent(); surveyData = (UserData) callingIntent.getSerializableExtra(MainActivity.INTENT_TAG);  int[] detectedColors = surveyData.getColors(); for(int i = 0; i < detectedColors.length; i++) { // occasionally the Palette will not find/contain eight colors if(detectedColors[i] != 0) { allSwatches[i].setBackgroundColor(detectedColors[i]); } else { // in the case that it doesn't have enough colors, make sure text view is disabled allSwatches[i].setEnabled(false); allSwatches[i].setClickable(false); } } } 	1	1	1	0	1	0
public OntProperty getProperty(String propertyName) { OntProperty selectedProperty = null;  ExtendedIterator<? extends OntProperty> propertyIter = Ontology.getOntologyInstance().listAllOntProperties(); while (propertyIter.hasNext()) { OntProperty property = propertyIter.next();  if (property != null && property.getLocalName().toUpperCase() == propertyName.toUpperCase()) { selectedProperty = property; } }  if (selectedProperty == null) { selectedProperty = Ontology.getOntologyInstance().createDatatypeProperty(Config.ONTOLOGY_PROP_URI  + propertyName.toUpperCase()); } return selectedProperty; } 	0	1	0	0	0	0
public Dispatcher getDispatcher() { if (dispatcher == null) { dispatcher = new Dispatcher(); caughtUpSockets = new HashMap<>(); } return dispatcher; } 	0	1	0	0	0	0
"@Documentation( value = ""Tells if the Column is in the primary key."", params = { @Param(name = ""column"", value = ""The Column""), }, result = ""true if the Column is in the primary key, false otherwise"", examples = { @Example(expression = ""column.isInPrimaryKey()"", result = ""true"") } ) // @formatter:on public String isInPrimaryKey(Column column) { if (column != null) { return yesNo(column.isAutoincrement()); } else { return ""No""; } } "	1	1	1	0	1	0
"@Test public void isForeignKeyNullTest() { Table table = getGSSerieTable(); Column col = getColumn(table, ""No table""); assertEquals(""No"", new ColumnServices().isForeignKey(col)); } "	0	1	0	0	0	0
"@Test public void isForeignKeyCheckNotTest() { Table table = getGSSerieTable(); Column col = getColumn(table, ""GS_SERIE_NOM""); assertEquals("""", new ColumnServices().checkForeignKey(col)); } "	0	1	0	0	0	0
"@Test public void checkPrimaryKeyNullTest() { Table table = getGSSerieTable(); Column col = getColumn(table, ""No table""); assertEquals("""", new ColumnServices().checkPrimaryKey(col)); } "	0	1	0	0	0	0
"@Test public void isUniqueNonTest() { Table table = getGSSerieTable(); Column col = getColumn(table, ""GS_SERIE_ID""); assertEquals(""Non"", new ColumnServices().isUnique(col)); } "	0	1	0	0	0	0
"private void postMove() {  phase = Phase.MONSTER_ANIM; // The next two lines are important to avoid monsters treating cells the player WAS in as goals. getToPlayer.clearGoals(); getToPlayer.resetMap(); // now that goals are cleared, we can mark the current player position as a goal. // this is an important piece of DijkstraMap usage; the argument is a Set of Points for squares that // temporarily cannot be moved through (not walls, which are automatically known because the map char[][] // was passed to the DijkstraMap constructor, but things like moving creatures and objects). int[] monplaces = new int[monsters.size()]; for (int i = 0; i < monplaces.length; i++) { monplaces[i] = monsters.getAt(i).pos; }  //pathMap = getToPlayer.scan(monplaces);  // recalculate FOV, store it in fovmap for the render to use. fovmap = fov.calculateFOV(res, player.entity.gridX & -2, player.entity.gridY & -2, 12, Radius.SQUARE); // handle monster turns Creature mon; int ms = monsters.size(), tmp; IntVLA impassable = new IntVLA(ms), path; for (int i = 0; i < ms; i++) { impassable.add(monsters.getAt(i).pos); } int[] playerGoal = new int[]{player.pos}; for (Integer pos : monsters.keySet()) { mon = monsters.get(pos); if(mon == null) continue; // monster values are used to store their aggression, 1 for actively stalking the player, 0 for not. if (mon.state > 0 || fovmap[adjacency.extractX(pos)][adjacency.extractY(pos)] > 0.1) { if (mon.state == 0) { messages.appendMessage(""The AЯMED GUAЯD shouts at you, \"""" + FakeLanguageGen.RUSSIAN_AUTHENTIC.sentence(rng, 1, 3, new String[]{"","", "","", "","", "" -""}, new String[]{""!""}, 0.25) + ""\""""); }  path = getToPlayer.findPath(30, impassable, null, mon.pos, playerGoal); if(path.size == 0) { mon.change(1); continue; } tmp = path.first(); if (tmp == player.pos) { display.tint(player.entity.gridX, player.entity.gridY-1, SColor.PURE_CRIMSON, 0, 0.415f); health--; //player.setText("""" + health); mon.change(1); } // otherwise store the new position in newMons. else { mon.change(1); monsters.alter(pos, tmp); display.slide(mon.entity, adjacency.extractX(tmp), adjacency.extractY(tmp)); mon.move(tmp); }  // this block is used to ensure that the monster picks the best path, or a random choice if there // is more than one equally good best option. /* Direction choice = null; double best = 9999.0; Direction[] ds = new Direction[8]; rng.shuffle(Direction.OUTWARDS, ds); for (Direction d : ds) { Coord tmp = pos.translate(d); if (pathMap[tmp.x][tmp.y] < best && !checkOverlap(mon, tmp.x, tmp.y, nextMovePositions)) { // pathMap is a 2D array of doubles where 0 is the goal (the player). // we use best to store which option is closest to the goal. best = pathMap[tmp.x][tmp.y]; choice = d; } } */ } }  } "	1	1	1	0	1	0
"@Test public void testBasicEvaluationChain() throws UnsupportedDataFileException { try { Path testFolder = folder.newFolder().toPath(); DwcDataFile dwcDataFile = DataFileFactory.prepareDataFile(dwcaDataFile, testFolder); EvaluationChain.Builder evaluationChainBuilder = EvaluationChain.Builder.using(dwcDataFile, TestUtils.getEvaluatorFactory(), testFolder);  evaluationChainBuilder.evaluateReferentialIntegrity(); evaluationChainBuilder.build().runRowTypeEvaluation((dataFile, rowType, recordCollectionEvaluator) -> { try { List<RecordEvaluationResult> results = new ArrayList<>(); recordCollectionEvaluator.evaluate(dataFile, results::add); if(DwcTerm.Identification.equals(rowType)){ assertTrue(""Got referential integrity issue on Identification extensions"", !results.isEmpty()); } } catch (IOException e) { fail(e.getMessage()); } }); } catch (IOException e) { fail(e.getMessage()); } } "	0	0	0	0	0	1
private void enableMarqueeMode(final CharSequence iconCharacter, boolean animate) { if (mEditText.getText().toString().trim().isEmpty()) { if (mPreferredMode == MODE_MARQUEE) { enableEditMode(animate); } return; } if (animate && !isEmpty(true)) { final AnimationSet fadeIn = new AnimationSet(true); { fadeIn.setDuration(500); fadeIn.setInterpolator(new AccelerateInterpolator()); fadeIn.addAnimation(new AlphaAnimation(0, 1)); } mTextInputLayout.setVisibility(View.VISIBLE); mTextInputLayout.startAnimation(fadeIn); } else { mTextInputLayout.setVisibility(View.VISIBLE); } mCurrentMode = MODE_MARQUEE; mEditText.setVisibility(View.INVISIBLE); mEditText.setEnabled(false); mTextView.setVisibility(View.VISIBLE); mTextView.setSelected(true); mText = mEditText.getText().toString(); mTextView.setText(mText + iconCharacter); } 	0	1	0	0	0	0
"private BaseResponse getNewTranscriptsDuring(LocalDateTime from, LocalDateTime to, WebRequest request) { LimitOffset limOff = getLimitOffset(request, 25); Range<LocalDateTime> range = getOpenRange(to, from, ""from"", ""to""); PaginatedList<TranscriptUpdateToken> updates = transcriptDao.transcriptsUpdatedDuring(range, SortOrder.ASC, limOff); return ListViewResponse.of(updates.getResults().stream() .map(TranscriptUpdateTokenView::new) .collect(Collectors.toList()), updates.getTotal(), limOff); } "	1	1	1	1	0	0
"@Override public void run() {  sendLogMessage(""Implementation is running!"");  brickController.drawString(""Hello World!"");  } "	0	0	0	0	0	1
"protected void createJarProcessTasks() { ProcessJarTask task2 = makeTask(""deobfuscateJar"", ProcessJarTask.class); { task2.setInJar(delayedFile(Constants.JAR_MERGED)); task2.setOutCleanJar(delayedFile(JAR_SRG_MCPC)); task2.setSrg(delayedFile(JOINED_SRG)); task2.setExceptorCfg(delayedFile(JOINED_EXC)); task2.setExceptorJson(delayedFile(EXC_JSON)); task2.addTransformerClean(delayedFile(FML_RESOURCES + ""/fml_at.cfg"")); task2.addTransformerClean(delayedFile(FORGE_RESOURCES + ""/forge_at.cfg"")); task2.setApplyMarkers(true); task2.dependsOn(""downloadMcpTools"", ""mergeJars""); }  DecompileTask task3 = makeTask(""decompile"", DecompileTask.class); { task3.setInJar(delayedFile(JAR_SRG_MCPC)); task3.setOutJar(delayedFile(ZIP_DECOMP_MCPC)); task3.setFernFlower(delayedFile(Constants.FERNFLOWER)); task3.setPatch(delayedFile(MCP_PATCH_DIR)); task3.setAstyleConfig(delayedFile(ASTYLE_CFG)); task3.dependsOn(""downloadMcpTools"", ""deobfuscateJar""); }  ProcessSrcJarTask task4 = makeTask(""forgePatchJar"", ProcessSrcJarTask.class); { task4.setInJar(delayedFile(ZIP_DECOMP_MCPC)); task4.setOutJar(delayedFile(ZIP_FORGED_MCPC)); task4.addStage(""fml"", delayedFile(FML_PATCH_DIR), delayedFile(FML_SOURCES), delayedFile(FML_RESOURCES), delayedFile(""{MAPPINGS_DIR}/patches/Start.java"")); task4.addStage(""forge"", delayedFile(FORGE_PATCH_DIR), delayedFile(FORGE_SOURCES), delayedFile(FORGE_RESOURCES)); task4.addStage(""bukkit"", null, delayedFile(BUKKIT_SOURCES)); task4.setDoesCache(false); task4.setMaxFuzz(2); task4.dependsOn(""decompile"", ""compressDeobfData"", ""createVersionPropertiesFML""); }  RemapSourcesTask task6 = makeTask(""remapCleanJar"", RemapSourcesTask.class); { task6.setInJar(delayedFile(ZIP_FORGED_MCPC)); task6.setOutJar(delayedFile(REMAPPED_CLEAN)); task6.setMethodsCsv(delayedFile(METHODS_CSV)); task6.setFieldsCsv(delayedFile(FIELDS_CSV)); task6.setParamsCsv(delayedFile(PARAMS_CSV)); task6.setDoesCache(true); task6.setNoJavadocs(); task6.dependsOn(""forgePatchJar""); }  task4 = makeTask(""mcpcPatchJar"", ProcessSrcJarTask.class); { //task4.setInJar(delayedFile(ZIP_FORGED_MCPC)); UNCOMMENT FOR SRG NAMES task4.setInJar(delayedFile(REMAPPED_CLEAN)); task4.setOutJar(delayedFile(ZIP_PATCHED_MCPC)); task4.addStage(""MCPC"", delayedFile(MCPC_PATCH_DIR)); task4.setDoesCache(false); task4.setMaxFuzz(2); task4.dependsOn(""forgePatchJar""); }  task6 = makeTask(""remapMcpcJar"", RemapSourcesTask.class); { task6.setInJar(delayedFile(ZIP_PATCHED_MCPC)); task6.setOutJar(delayedFile(ZIP_RENAMED_MCPC)); task6.setMethodsCsv(delayedFile(METHODS_CSV)); task6.setFieldsCsv(delayedFile(FIELDS_CSV)); task6.setParamsCsv(delayedFile(PARAMS_CSV)); task6.setDoesCache(true); task6.setNoJavadocs(); task6.dependsOn(""mcpcPatchJar""); } } "	0	1	0	0	0	0
"private static void HandleEnergyBladeEquipped() { NWObject oPC = NWScript.getPCItemLastEquippedBy(); final NWObject oItem = NWScript.getPCItemLastEquipped(); ItemGO itemGO = new ItemGO(oItem);  if(!itemGO.HasItemProperty(CustomItemProperty.EnergyBlade)) return;  if(!MagicSystem.IsAbilityEquipped(oPC, AbilityType.EnergyBladeAdept)) { Scheduler.assign(oPC, new Runnable() { @Override public void run() { NWScript.clearAllActions(false); NWScript.actionUnequipItem(oItem); } });  NWScript.floatingTextStringOnCreature(ColorToken.Red() + ""You must have the Energy Blade Adept ability equipped in order to use that weapon."" + ColorToken.End(), oPC, false); return; }  // Unequip anything in right/left hand that isn't the energy blade which was just equipped. final NWObject rightHand = NWScript.getItemInSlot(InventorySlot.RIGHTHAND, oPC); final NWObject leftHand = NWScript.getItemInSlot(InventorySlot.LEFTHAND, oPC);  if(!Objects.equals(rightHand, oItem) && NWScript.getIsObjectValid(rightHand)) { Scheduler.assign(oPC, new Runnable() { @Override public void run() { NWScript.clearAllActions(false); NWScript.actionUnequipItem(rightHand); } }); } if(!Objects.equals(leftHand, oItem) && NWScript.getIsObjectValid(leftHand)) { Scheduler.assign(oPC, new Runnable() { @Override public void run() { NWScript.clearAllActions(false); NWScript.actionUnequipItem(leftHand); } }); }  } "	0	0	0	0	0	1
"public String toStringWithUID() { if (tostr == null) { final StringBuilder s = new StringBuilder(); s.append(uid + "": ""); for (int i=0; i<names.size(); i++) { if (i != 0) s.append("", ""); s.append(names.get(i)); } s.append(""\n""); tostr = s.toString(); } return tostr; } "	1	0	1	0	1	0
private static Map<String, JSONObject> getCurrentRulesAsMap(Context ctx) { final List<PackageInfoData> apps = getApps(ctx,null); // Builds a pipe-separated list of names Map<String, JSONObject> exportMap = new HashMap<>(); try { for (int i=0; i<apps.size(); i++) { if (apps.get(i).selected_wifi) { updateExportPackage(exportMap,apps.get(i).pkgName,WIFI_EXPORT); } if (apps.get(i).selected_3g) { updateExportPackage(exportMap,apps.get(i).pkgName,DATA_EXPORT); } if (apps.get(i).selected_roam) { updateExportPackage(exportMap,apps.get(i).pkgName,ROAM_EXPORT); } if (apps.get(i).selected_vpn) { updateExportPackage(exportMap,apps.get(i).pkgName,VPN_EXPORT); } if (apps.get(i).selected_lan) { updateExportPackage(exportMap,apps.get(i).pkgName,LAN_EXPORT); } } }catch(JSONException e) { Log.e(TAG, e.getLocalizedMessage()); } return exportMap; } 	1	0	1	0	1	0
public List<DownloadFileInfo> getDownloadFileInfo() { if (downloadFileInfo == null) { downloadFileInfo = new ArrayList<DownloadFileInfo>(); } return this.downloadFileInfo; } 	1	1	1	0	1	0
@Override public ArmorStandData createConnASD(ModelledPipeConnModelData data) { ItemStack hoe = data.isIron_ExtractionPipe_ActiveSide() ? ITEM_HOE_CONN_EXTRACTION_OPENED : ITEM_HOE_CONN_EXTRACTION_CLOSED; ArmorStandData asd;  if (data.getConnDirection() == PipeDirection.UP) { asd = new ArmorStandData(new RelLoc(0.75f, 0.5f - 1.4369f, 0.5f), new Vector(1, 0, 0), false, hoe, null, new Vector(-90f, 0f, 0f), new Vector(0f, 0f, 0f)); } else if (data.getConnDirection() == PipeDirection.DOWN) { asd = new ArmorStandData(new RelLoc(0.25f, 0.5f - 1.1885f - 0.25f, 0.5f), new Vector(1, 0, 0), false, hoe, null, new Vector(90f, 0f, 0f), new Vector(0f, 0f, 0f)); } else { asd = new ArmorStandData(new RelLoc(0.5f, 0.5f - 1.1875f, 0.5f), new Vector(data.getConnDirection().getX(), 0, data.getConnDirection().getZ()), false, hoe, null, new Vector(180f, 180f, 0f), new Vector(0f, 0f, 0f)); }  return asd; } 	1	0	1	1	0	0
public static final <M extends Message> JacksonMessageSerializer<M> forType(Class<? extends M> cls) { return new JacksonMessageSerializer<M>(cls); } 	1	0	1	0	1	0
"protected boolean canBeMemberInternal(PerunSession sess, Vo vo, User user, String loa, boolean throwExceptions) throws InternalErrorException, ExtendMembershipException {  if (user.isServiceUser()) return true;  // Check if the VO has set membershipExpirationRules attribute LinkedHashMap<String, String> membershipExpirationRules;  Attribute membershipExpirationRulesAttribute = null; try { membershipExpirationRulesAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, MembersManager.membershipExpirationRulesAttributeName); membershipExpirationRules = (LinkedHashMap<String, String>) membershipExpirationRulesAttribute.getValue(); // If attribute was not filled, then silently exit if (membershipExpirationRules == null) return true; } catch (AttributeNotExistsException e) { // No rules set, so leave it as it is return true; } catch (WrongAttributeAssignmentException e) { throw new InternalErrorException(""Shouldn't happen.""); }  // Which LOA we won't allow? if (membershipExpirationRules.get(MembersManager.membershipDoNotAllowLoaKeyName) != null) { if (loa == null) { // User doesn't have LOA defined and LOA is required for getting in, so do not allow membership. log.warn(""User {} doesn't have LOA defined, but 'doNotAllowLoa' option is set for VO {}."", user, vo); if (throwExceptions) { throw new ExtendMembershipException(ExtendMembershipException.Reason.NOUSERLOA, ""User "" + user + "" doesn't have LOA defined, but 'doNotExtendLoa' option is set for VO id "" + vo.getId() + "".""); } else { return false; } }  String[] doNotAllowLoas = membershipExpirationRules.get(MembersManager.membershipDoNotAllowLoaKeyName).split("","");  for (String doNotAllowLoa : doNotAllowLoas) { if (doNotAllowLoa.equals(loa)) { // User has LOA which is not allowed for getting in if (throwExceptions) { throw new ExtendMembershipException(ExtendMembershipException.Reason.INSUFFICIENTLOA, ""User "" + user + "" doesn't have required LOA for VO id "" + vo.getId() + "".""); } else { return false; } } } } return true; } "	1	0	1	0	1	0
"@Test public void processJourneyLine(){  //          Invalid ID // invalid but accepted at this stage (0) String invalidLine1 = ""0,PP204SV,2,15,43.4""; assertTrue(fileReaderObject.processJourneyLine(invalidLine1));  // invalid but accepted at this stage (negative) String invalidLine2 = ""-10,XX204SV,3,33,52.3""; assertTrue(fileReaderObject.processJourneyLine(invalidLine2));  // invalid (string) String invalidLine3 = ""ABC,XX367DG,2,21,39.1""; assertTrue(fileReaderObject.processJourneyLine(invalidLine3));  // invalid (missing) String invalidLine4 = "",PP204SV,2,15,43.4""; assertFalse(fileReaderObject.processJourneyLine(invalidLine4));  // invalid (spaces) String invalidLine5 = ""  ,PP204SV,2,15,43.4""; assertFalse(fileReaderObject.processJourneyLine(invalidLine5));   //          Invalid Reg number // invalid but accepted at this stage (0) String invalidLine6 = ""51,,2,15,43.4""; assertFalse(fileReaderObject.processJourneyLine(invalidLine6));  // invalid but accepted at this stage String invalidLine7 = ""52,QQQQQQQ,3,33,52.3""; assertTrue(fileReaderObject.processJourneyLine(invalidLine7));  // invalid (spaces) String invalidLine8 = ""0,  ,2,15,43.4""; assertFalse(fileReaderObject.processJourneyLine(invalidLine8));   //          Invalid number of passengers // invalid but accepted at this stage (0) String invalidLine9 = ""61,XX204SV,0,33,52.3""; assertTrue(fileReaderObject.processJourneyLine(invalidLine9));  // invalid but accepted at this stage (-1) String invalidLine10 = ""62,XX345JR,-1,10,73.5""; assertTrue(fileReaderObject.processJourneyLine(invalidLine10));  // invalid but accepted at this stage (2000) String invalidLine11 = ""63,TT345JR,2000,33,52.7""; assertTrue(fileReaderObject.processJourneyLine(invalidLine11));  // invalid (string) String invalidLine12 = ""64,BB345JR,AVG,33,52.7""; assertFalse(fileReaderObject.processJourneyLine(invalidLine12));  // invalid (empty) String invalidLine13 = ""65,LX120RG,,31,62.4""; assertFalse(fileReaderObject.processJourneyLine(invalidLine13));  // invalid (spaces) String invalidLine14 = ""66,LX120RG,  ,31,62.4""; assertFalse(fileReaderObject.processJourneyLine(invalidLine14));   //          Invalid time // invalid but accepted at this stage (0) String invalidLine15 = ""80,KU247GE,2,0,43.8""; assertTrue(fileReaderObject.processJourneyLine(invalidLine15));  // invalid but accepted at this stage (-1) String invalidLine16 = ""81,CU247GE,2,-1,43.8""; assertTrue(fileReaderObject.processJourneyLine(invalidLine16));  // invalid (empty) String invalidLine17 = ""82,LL247GE,2,,43.8""; assertFalse(fileReaderObject.processJourneyLine(invalidLine17));  // invalid (spaces) String invalidLine18 = ""83,LL247GE,2,  ,43.8""; assertFalse(fileReaderObject.processJourneyLine(invalidLine18));  // invalid (string) String invalidLine19 = ""83,LL247GE,2,ABC,43.8""; assertFalse(fileReaderObject.processJourneyLine(invalidLine19));     //          Invalid maximum velocity // invalid but accepted at this stage (-1) String invalidLine20 = ""91,YR204YR,3,33,-1""; assertTrue(fileReaderObject.processJourneyLine(invalidLine20));  // invalid but accepted at this stage (too big) String invalidLine21 = ""92,GR883GR,3,8,1000000034""; assertTrue(fileReaderObject.processJourneyLine(invalidLine21));  // invalid (empty) String invalidLine22 = ""93,UU345UU,3,8,""; assertFalse(fileReaderObject.processJourneyLine(invalidLine22));  // invalid (spaces) String invalidLine23 = ""94,UU345UU,3,8,  ""; assertFalse(fileReaderObject.processJourneyLine(invalidLine23));  // invalid (spaces) String invalidLine24 = ""95,UU345UU,3,8,ABC""; assertFalse(fileReaderObject.processJourneyLine(invalidLine24));  //          Extreme case  // invalid (spaces) String invalidLine25 = """"; assertFalse(fileReaderObject.processJourneyLine(invalidLine25));  // invalid (spaces) String invalidLine26 = "",,,,""; assertFalse(fileReaderObject.processJourneyLine(invalidLine26));  // invalid (spaces) String invalidLine27 = "",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,""; assertFalse(fileReaderObject.processJourneyLine(invalidLine27)); } "	0	1	1	1	1	0
"@Override public void initialise(AudioProcessingContext context) throws IOException { ByteBuffer buffer = broker.getBuffer();  if (buffer.getInt(0) != HEAD_TAG_HALF) { throw new IllegalStateException(""First packet is not an OpusHead.""); }  int channelCount = buffer.get(9) & 0xFF; int sampleRate = Integer.reverseBytes(buffer.getInt(12));  opusPacketRouter = new OpusPacketRouter(context, sampleRate, channelCount);  if (!packetInputStream.startNewPacket()) { throw new IllegalStateException(""No OpusTags packet in track.""); }  broker.consume(true, packetInputStream); } "	1	0	1	1	1	0
"public static void main( String[] args ) throws Exception{ if(args.length != 3){ System.out.println(""Usage: java DecryptFile <key> <inputfile> <outputfile>""); System.exit(1); }  // Read in arguments. BigInteger k = new BigInteger(args[0],16); File input = new File (args[1]); File output = new File (args[2]);  DataInputStream in = new DataInputStream (new FileInputStream (input));  DataOutputStream out = new DataOutputStream (new FileOutputStream (output));  // Break key into 10 bytes. short[] key = new short[10]; for(int i=0,j=9; i<10; ++i,--j){ key[j]= k.shiftRight(i*8).and(MASK).shortValue(); }  // Read in blocks from the file until there are no more. // Decrypt must catch the last block, so only write // when the next block is seen. long thisBlock = 0; long nextBlock = 0; try{ thisBlock = in.readLong(); while (true){ nextBlock = in.readLong(); out.writeLong(SkipJack.Decrypt(key, thisBlock)); thisBlock = nextBlock; } }catch(EOFException e){ // Remove padding thisBlock = SkipJack.Decrypt(key, thisBlock); int numDataBytes = 7 - (Long.numberOfTrailingZeros(thisBlock) / 8); byte[] finalbytes = ByteBuffer.allocate(8).putLong(thisBlock).array(); out.write(finalbytes, 0, numDataBytes); }  in.close(); out.close(); } "	1	0	1	1	1	0
"private JMenu setUpFile() { JMenu fileMenu = new JMenu(""File""); fileMenu.setMnemonic(KeyEvent.VK_F);  JMenuItem openFolder = new JMenuItem(""Open folder""); openFolder.setMnemonic(KeyEvent.VK_O); JMenuItem openNode = new JMenuItem(""Open node and edge file""); openNode.setMnemonic(KeyEvent.VK_N); JMenuItem openNwk = new JMenuItem(""Open .nwk file""); openNwk.setMnemonic(KeyEvent.VK_W); JMenuItem openMeta = new JMenuItem(""Open metadata file""); openNwk.setMnemonic(KeyEvent.VK_M); JMenuItem exit = new JMenuItem(""Exit""); exit.setMnemonic(KeyEvent.VK_X);  fileMenu.add(openFolder); fileMenu.add(openNode); fileMenu.add(openNwk); fileMenu.add(openMeta); fileMenu.addSeparator(); fileMenu.add(exit);  // add action listener for every item for (Component component : fileMenu.getMenuComponents()) { if (component instanceof JMenuItem) { ((JMenuItem) component).addActionListener(menuBarController); } }  return fileMenu; } "	1	1	0	1	1	0
@Override public Headers headers() { return new HttpUrlConnectionHeaders(mConnection); } 	0	0	0	0	0	1
@Nullable @Override public String getServerFingerprint() { for (P4Config config : parents) { if (config.hasServerFingerprintSet()) { return getServerFingerprint(); } } return null; } 	1	1	1	1	0	0
public int getFullMessageLength() { List<ByteBuffer> fullMessageBody = getFullMessageBody(); int size = (int) fullMessageBody.stream().mapToInt(byteBuffer -> byteBuffer.limit()).count(); fullMessageBody.forEach(byteBuffer -> addMessageBody(byteBuffer)); return size; } 	0	1	0	0	0	0
"static String toJvmSignature(String javaType) { if (javaType == null) { throw new NullPointerException(""javaType must not be null""); } if (javaType.isEmpty()) { throw new IllegalArgumentException(""invalid javaType. \""\""""); }  final int javaObjectArraySize = getJavaObjectArraySize(javaType); final int javaArrayLength = javaObjectArraySize * 2; String pureJavaType; if (javaObjectArraySize != 0) { // pure java pureJavaType = javaType.substring(0, javaType.length() - javaArrayLength); } else { pureJavaType = javaType; } final String signature = PRIMITIVE_JAVA_TO_JVM.get(pureJavaType); if (signature != null) { // primitive type return appendJvmArray(signature, javaObjectArraySize); } return toJvmObject(javaObjectArraySize, pureJavaType);  } "	0	0	0	0	0	1
"@Test public void testSentenceWithCommas() throws RedPenException { // NOTE: the following sentence contains 29 words. Document document = prepareSimpleDocument(""There is no real path, so first follow the line of the foot of the rocks past Kawa, then cut straight up to the next level of slabs.""); RedPen redPen = new RedPen(config); Map<Document, List<ValidationError>> errors = redPen.validate(singletonList(document)); assertEquals(1, errors.get(document).size()); } "	0	1	1	1	1	0
public boolean isFolder() { return localCopy != null || (type != null && type.toLowerCase().startsWith(TYPE_FOLDER)); } 	1	0	1	1	1	0
"@Override public void moveServers(Set<HostAndPort> servers, String targetGroupName) throws IOException { if (servers == null) { throw new ConstraintException( ""The list of servers cannot be null.""); } if (StringUtils.isEmpty(targetGroupName)) { throw new ConstraintException(""The target group cannot be null.""); } if (servers.size() < 1) { return; }  RSGroupInfo targetGrp = getRSGroupInfo(targetGroupName); if (targetGrp == null) { throw new ConstraintException(""Group does not exist: ""+targetGroupName); }  RSGroupInfoManager manager = getRSGroupInfoManager(); synchronized (manager) { if (master.getMasterCoprocessorHost() != null) { master.getMasterCoprocessorHost().preMoveServers(servers, targetGroupName); } HostAndPort firstServer = servers.iterator().next(); //we only allow a move from a single source group //so this should be ok RSGroupInfo srcGrp = manager.getRSGroupOfServer(firstServer); //only move online servers (from default) //or servers from other groups //this prevents bogus servers from entering groups if (srcGrp == null) { throw new ConstraintException( ""Server ""+firstServer+"" does not have a group.""); } if (RSGroupInfo.DEFAULT_GROUP.equals(srcGrp.getName())) { Set<HostAndPort> onlineServers = new HashSet<HostAndPort>(); for(ServerName server: master.getServerManager().getOnlineServers().keySet()) { onlineServers.add(server.getHostPort()); } for(HostAndPort el: servers) { if(!onlineServers.contains(el)) { throw new ConstraintException( ""Server ""+el+"" is not an online server in default group.""); } } }  if(srcGrp.getServers().size() <= servers.size() && srcGrp.getTables().size() > 0) { throw new ConstraintException(""Cannot leave a group ""+srcGrp.getName()+ "" that contains tables "" +""without servers.""); }  String sourceGroupName = getRSGroupInfoManager() .getRSGroupOfServer(srcGrp.getServers().iterator().next()).getName(); if(getRSGroupInfo(targetGroupName) == null) { throw new ConstraintException(""Target group does not exist: ""+targetGroupName); }  for(HostAndPort server: servers) { if (serversInTransition.containsKey(server)) { throw new ConstraintException( ""Server list contains a server that is already being moved: ""+server); } String tmpGroup = getRSGroupInfoManager().getRSGroupOfServer(server).getName(); if (sourceGroupName != null && !tmpGroup.equals(sourceGroupName)) { throw new ConstraintException( ""Move server request should only come from one source group. ""+ ""Expecting only ""+sourceGroupName+"" but contains ""+tmpGroup); } }  if(sourceGroupName.equals(targetGroupName)) { throw new ConstraintException( ""Target group is the same as source group: ""+targetGroupName); }  try { //update the servers as in transition for (HostAndPort server : servers) { serversInTransition.put(server, targetGroupName); }  getRSGroupInfoManager().moveServers(servers, sourceGroupName, targetGroupName); boolean found; List<HostAndPort> tmpServers = Lists.newArrayList(servers); do { found = false; for (Iterator<HostAndPort> iter = tmpServers.iterator(); iter.hasNext(); ) { HostAndPort rs = iter.next(); //get online regions List<HRegionInfo> regions = new LinkedList<HRegionInfo>(); for (Map.Entry<HRegionInfo, ServerName> el : master.getAssignmentManager().getRegionStates().getRegionAssignments().entrySet()) { if (el.getValue().getHostPort().equals(rs)) { regions.add(el.getKey()); } } Iterator<RegionState> i = master.getAssignmentManager().getRegionStates().getRegionsInTransition().iterator(); while (i.hasNext()) { RegionState state = i.next(); if (state.getServerName().getHostPort().equals(rs)) { regions.add(state.getRegion()); } }  //unassign regions for a server LOG.info(""Unassigning "" + regions.size() + "" regions from server "" + rs + "" for move to "" + targetGroupName); if (regions.size() > 0) { //TODO bulk unassign or throttled unassign? for (HRegionInfo region : regions) { //regions might get assigned from tables of target group //so we need to filter if (!targetGrp.containsTable(region.getTable())) { master.getAssignmentManager().unassign(region); found = true; } } } if (!found) { iter.remove(); } } try { Thread.sleep(1000); } catch (InterruptedException e) { LOG.warn(""Sleep interrupted"", e); Thread.currentThread().interrupt(); } } while (found); } finally { //remove from transition for (HostAndPort server : servers) { serversInTransition.remove(server); } } if (master.getMasterCoprocessorHost() != null) { master.getMasterCoprocessorHost().postMoveServers(servers, targetGroupName); } LOG.info(""Move server done: ""+sourceGroupName+""->""+targetGroupName); } } "	0	0	0	0	0	1
"@RequestMapping(path = ""/deleteitinerary"", method = RequestMethod.POST) public void deleteUser(@RequestBody HashMap point) { String name = (String) point.get(""name""); if (restaurants.findFirstByName(name) != null) { Restaurant rest = restaurants.findFirstByName(name); Itinerary del = itineraries.findFirstByEventid(rest.getId()); itineraries.delete(del.getId()); } else { Activity act = activities.findFirstByActivityname(name); Itinerary del = itineraries.findFirstByEventid(act.getId()); itineraries.delete(del.getId()); }   } "	1	0	1	0	1	0
@Override public boolean isHasMore() { return !(getItemRealCount() > 100); } 	0	0	0	0	0	1
public Pair<CellRegion, Model> getTableModelAbove(CellRegion newTuplesRegion) { // Make sure this range is not contained within any other table. if (tableModels.stream() .map(e -> e.x) .filter(e -> checkOverap(newTuplesRegion)) .findFirst().isPresent()) return null;  for (Pair<CellRegion, Model> cellRegionModelPair : tableModels) { if (newTuplesRegion.getRow() == cellRegionModelPair.x.getLastRow() + 1 && newTuplesRegion.getColumn() == cellRegionModelPair.x.getColumn() && newTuplesRegion.getLastColumn() == cellRegionModelPair.x.getLastColumn() && cellRegionModelPair.y instanceof TOM_Model) return cellRegionModelPair; } return null; } 	0	0	0	0	0	1
public static DateTime parseDateTime(String timestamp) {  if (timestamp != null) {  for (DateTimeFormatter formatter : DateUtil.formatters) { try { LocalDateTime localDateTime = formatter.parseLocalDateTime(timestamp); return localDateTime.toDateTime(DateTimeZone.UTC);  } catch (IllegalArgumentException e) { // silently skips to the next formatter } } } return null; } 	0	1	0	0	0	0
"@Override public ITextComponent getNameForBossBar() { return new TextComponentString(""Corrupted Pawn""); } "	0	0	0	0	0	1
"public static Block registerDoor(BlockBOPDoor door_block, String name, Item door_item) { Block block = registerBlock( door_block, name + ""_block"", null ); door_item = ModItems.registerItem( new ItemDoor(block), name ); door_block.setDoorItem(door_item); return block; } "	0	0	0	1	1	0
@Override public final void setValue(final String expression) throws DebugException { Value value = this.getDebugTarget().evaluateExpression(expression); this.setValue(new WorthwhileValue(this.getDebugTarget(), value)); } 	1	1	0	1	1	0
"private static Object[] tryUseOnBlock(EntityPlayer player, World world, RayTraceResult hit, ItemStack stack, EnumHand hand, EnumFacing side) { IBlockState state = world.getBlockState(hit.getBlockPos()); if (!state.getBlock().isAir(state, world, hit.getBlockPos())) { if (MinecraftForge.EVENT_BUS.post(new PlayerInteractEvent.RightClickBlock(player, EnumHand.MAIN_HAND, stack, hit.getBlockPos(), side, hit.hitVec))) { return new Object[]{true, ""block"", ""interact""}; }  Object[] result = onPlayerRightClick(player, stack, hand, hit.getBlockPos(), side, hit.hitVec); if (result != null) return result; }  return null; } "	0	1	0	0	0	0
"@Override public void initialize() {  final SimplePanel panel = new SimplePanel(); panel.setStyleName(LOGIN_BG);  final Grid grid = new Grid(1, 2); grid.setStyleName(LOGIN_BOX);  // Logo. grid.setWidget(0, 0, new Image(LOGO_URL));  // Form. final FlexTable form = new FlexTable(); form.setWidth(""90%"");  int y = 0;  // Login field (email). form.setText(y, 0, I18N.CONSTANTS.loginLoginField()); form.getCellFormatter().setStyleName(y, 0, LOGIN_BOX_FORM_LABEL);  loginTextBox = new TextBox(); loginTextBox.getElement().setId(LOGIN_EMAIL_ID); loginTextBox.setWidth(""100%""); form.setWidget(y, 1, loginTextBox); form.getFlexCellFormatter().setColSpan(y, 1, 2); y++;  // Separator. for (int i = 0; i < 3; i++) { form.getCellFormatter().setStyleName(y, i, LOGIN_BOX_FORM_SEPARATOR); } y++;  // Password field. form.setText(y, 0, I18N.CONSTANTS.loginPasswordField()); form.getCellFormatter().setStyleName(y, 0, LOGIN_BOX_FORM_LABEL);  passwordTextBox = new PasswordTextBox(); passwordTextBox.getElement().setId(LOGIN_PASSWORD_ID); passwordTextBox.setWidth(""100%""); form.setWidget(y, 1, passwordTextBox); form.getFlexCellFormatter().setColSpan(y, 1, 2); y++;  // Separator. for (int i = 0; i < 3; i++) { form.getCellFormatter().setStyleName(y, i, LOGIN_BOX_FORM_SEPARATOR); } y++;  // Language field. form.setText(y, 0, I18N.CONSTANTS.loginLanguageField()); form.getCellFormatter().setStyleName(y, 0, LOGIN_BOX_FORM_LABEL);  languageListBox = new ListBox(false); languageListBox.setWidth(""100%""); form.setWidget(y, 1, languageListBox); form.getFlexCellFormatter().setColSpan(y, 1, 2); y++;  // Separator. for (int i = 0; i < 3; i++) { form.getCellFormatter().setStyleName(y, i, LOGIN_BOX_FORM_SEPARATOR); } y++;  // Password forgotten link. final FlowPanel bottomPanel = new FlowPanel(); bottomPanel.getElement().getStyle().setPosition(Position.RELATIVE);  lostPasswordLink = new Anchor(I18N.CONSTANTS.loginPasswordForgotten()); lostPasswordLink.setStyleName(LOGIN_BOX_FORM_FORGOTTEN); bottomPanel.add(lostPasswordLink);  form.setWidget(y, 0, bottomPanel); form.getFlexCellFormatter().setColSpan(y, 0, 2);  // Login button. loginButton = new Button(I18N.CONSTANTS.loginConnectButton()); loginButton.setId(LOGIN_OUVRIR_SESSION_ID); loginButton.setWidth(""120px""); form.setWidget(y, 1, loginButton); form.getCellFormatter().setHorizontalAlignment(y, 1, HasHorizontalAlignment.ALIGN_RIGHT); y++;  // Adding the form to the orange box. grid.getCellFormatter().setHorizontalAlignment(0, 1, HasHorizontalAlignment.ALIGN_CENTER); grid.setWidget(0, 1, form);  // Styles. grid.getCellFormatter().setStyleName(0, 0, LOGIN_BOX_LOGO); grid.getCellFormatter().setStyleName(0, 1, LOGIN_BOX_FORM);  panel.add(grid);  add(panel); } "	0	0	0	0	0	1
"public static URI lookupIri(UUID definingProduct, String key, UriInfo uriInfo) { UriBuilder ub = UriBuilder.fromResource(WorkspaceResource.class); try { ub.path(WorkspaceResource.class.getMethod(""lookup"", UUID.class, String.class)); ub.resolveTemplate(""workspace"", definingProduct); ub.resolveTemplate(""member"", key); } catch (NoSuchMethodException | SecurityException e) { throw new IllegalStateException(""Unable to get all instances method"", e); } return ub.build(); } "	0	0	0	0	0	1
"private void initUI(final View rootView) {  name         = (TextView)rootView.findViewById(R.id.stored_name_lbl); password     = (TextView)rootView.findViewById(R.id.stored_pass_lbl); email        = (TextView)rootView.findViewById(R.id.stored_email_lbl); id        = (TextView)rootView.findViewById(R.id.stored_id_lbl);  sp = getActivity().getSharedPreferences(MyPREFS, Context.MODE_PRIVATE); user_key = sp.getString(""USER_KEY"", null); dr = new DataRepo(getActivity()); user = dr.getUser(user_key);   name.setText(user.getUsername()); password.setText(user.getPassword()); email.setText(user.getEmail()); id.setText(Integer.toString(user.getId()));     } "	1	0	1	1	1	0
"protected void addParameter(PreparedStatement ps, Object value, OWLNamedIndividual type, int index, Map<OWLEntity, DbId> identifiers) throws SQLException { String t = type.getIRI().toString(); Long id = null; if (value == null) { // This might not work for all database systems. ps.setObject(index, null); } else if (value instanceof DbId) { Long lvalue = ((DbId)value).getFirst(); if (t.equals(Concepts.VARCHAR)) ps.setString(index, lvalue.toString()); else if (t.equals(Concepts.INTEGER)) ps.setLong(index, lvalue); } else if (value instanceof OWLLiteral) { // Needed for mapped schema only if (t.equals(Concepts.VARCHAR)) ps.setString(index, ((OWLLiteral) value).getLiteral()); else if (t.equals(Concepts.INTEGER)) { OWLLiteral literal = (OWLLiteral) value; if (literal.isBoolean()) ps.setLong(index, literal.parseBoolean() ? 1 : 0); else ps.setLong(index, literal.parseInteger()); } else if (t.equals(Concepts.DOUBLE)) ps.setDouble(index, ((OWLLiteral) value).parseDouble()); else if (t.equals(Concepts.TIMESTAMP)) ps.setTimestamp(index, new Timestamp(parseDate((OWLLiteral) value).getTime())); else if (t.equals(Concepts.CLOB)) ps.setClob(index, new StringReader(((OWLLiteral) value).getLiteral())); } else if (value instanceof Long) { if (t.equals(Concepts.VARCHAR)) ps.setString(index, ((Long) value).toString()); else if (t.equals(Concepts.INTEGER)) ps.setLong(index, (Long) value); } else if (value instanceof String) { if (t.equals(Concepts.VARCHAR)) ps.setString(index, (String) value); else if (t.equals(Concepts.CLOB)) ps.setClob(index, new StringReader((String) value)); else if (t.equals(Concepts.TIMESTAMP)) ps.setTimestamp(index, new Timestamp(parseDate((String) value) .getTime())); else if (t.equals(Concepts.DOUBLE)) // TODO test this: ps.setBigDecimal(index, new // BigDecimal(((String) value))); ps.setDouble(index, Double.parseDouble((String) value)); else if (t.equals(Concepts.INTEGER)) ps.setLong(index, Long.parseLong((String) value)); } else if (value instanceof Timestamp) { ps.setTimestamp(index, (Timestamp) value); } else if (value instanceof OWLEntity) { if (t.equals(Concepts.INTEGER)) { id = identifiers.get(value).getFirst(); ps.setLong(index, id); } } else { throw new IllegalArgumentException(""Value Type not recognized"" + value + "" class: "" + value.getClass()); } if (dbg()) { System.out.println(""["" + index + "" = "" + ((id == null) ? value : id + ""("" + value + "")"") + ""] ""); } } "	0	0	0	0	0	1
"protected RestVariable setBinaryVariable(MultipartHttpServletRequest request, Execution execution, int responseVariableType, boolean isNew) {  // Validate input and set defaults if (request.getFileMap().size() == 0) { throw new ActivitiIllegalArgumentException(""No file content was found in request body.""); }  // Get first file in the map, ignore possible other files MultipartFile file = request.getFile(request.getFileMap().keySet().iterator().next());  if (file == null) { throw new ActivitiIllegalArgumentException(""No file content was found in request body.""); }  String variableScope = null; String variableName = null; String variableType = null;  Map<String, String[]> paramMap = request.getParameterMap(); for (String parameterName : paramMap.keySet()) {  if (paramMap.get(parameterName).length > 0) {  if (parameterName.equalsIgnoreCase(""scope"")) { variableScope = paramMap.get(parameterName)[0];  } else if (parameterName.equalsIgnoreCase(""name"")) { variableName = paramMap.get(parameterName)[0];  } else if (parameterName.equalsIgnoreCase(""type"")) { variableType = paramMap.get(parameterName)[0]; } } }  try {  // Validate input and set defaults if (variableName == null) { throw new ActivitiIllegalArgumentException(""No variable name was found in request body.""); }  if (variableType != null) { if (!RestResponseFactory.BYTE_ARRAY_VARIABLE_TYPE.equals(variableType) && !RestResponseFactory.SERIALIZABLE_VARIABLE_TYPE.equals(variableType)) { throw new ActivitiIllegalArgumentException(""Only 'binary' and 'serializable' are supported as variable type.""); } } else { variableType = RestResponseFactory.BYTE_ARRAY_VARIABLE_TYPE; }  RestVariable.RestVariableScope scope = RestVariable.RestVariableScope.LOCAL; if (variableScope != null) { scope = RestVariable.getScopeFromString(variableScope); }  if (variableType.equals(RestResponseFactory.BYTE_ARRAY_VARIABLE_TYPE)) { // Use raw bytes as variable value byte[] variableBytes = IOUtils.toByteArray(file.getInputStream()); setVariable(execution, variableName, variableBytes, scope, isNew);  } else { // Try deserializing the object ObjectInputStream stream = new ObjectInputStream(file.getInputStream()); Object value = stream.readObject(); setVariable(execution, variableName, value, scope, isNew); stream.close(); }  if (responseVariableType == RestResponseFactory.VARIABLE_PROCESS) { return new RestResponseFactory().createBinaryRestVariable(variableName, scope, variableType, null, null, execution.getId(), uriInfo.getBaseUri().toString()); } else { return new RestResponseFactory().createBinaryRestVariable(variableName, scope, variableType, null, execution.getId(), null, uriInfo.getBaseUri().toString()); }  } catch (IOException ioe) { throw new ActivitiIllegalArgumentException(""Could not process multipart content"", ioe); } catch (ClassNotFoundException ioe) { throw new ActivitiContentNotSupportedException(""The provided body contains a serialized object for which the class is nog found: "" + ioe.getMessage()); }  } "	0	0	0	0	0	1
"private JFreeChart createChart(XYDataset priceData) throws IOException, ParseException { logger.info(""Creating date volume chart""); priceData = createDataset();  String title = """";  mainChart = ChartFactory.createTimeSeriesChart(title, ""Date"", ""Volume"", priceData, false, true, false);  XYPlot plot = (XYPlot) mainChart.getPlot();  NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis(); rangeAxis.setLowerMargin(0);  DecimalFormat format = new DecimalFormat(""###,###""); rangeAxis.setNumberFormatOverride(format);  XYItemRenderer renderer1 = plot.getRenderer(); renderer1.setBaseToolTipGenerator( new StandardXYToolTipGenerator(StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT, new SimpleDateFormat(""d-MMM-yyyy""), new DecimalFormat(""0.00"")));  retrieveNews();  for (String date : headlinesAndDates.keySet()) { ArrayList<String> headline = headlinesAndDates.get(date);  SimpleDateFormat formatter = new SimpleDateFormat(""yyyy-MM-dd""); Calendar volumeDate = Calendar.getInstance();  try { Date dates = formatter.parse(date); volumeDate = Calendar.getInstance(); volumeDate.setTime(dates); } catch (ParseException e) { e.printStackTrace(); }  for (int i = 0; i < volumeDataDate.size(); i++) { if (volumeDataDate.get(i).getCalendar().equals(volumeDate)) { String formattedDate = changeDateFormat(date); double volume = volumeDataDate.get(i).getVolume(); long time = volumeDataDate.get(i).getCalendar().getTimeInMillis();  final XYPointerAnnotation headLineAnnotation = new XYPointerAnnotation(formattedDate, time, volume, 3);  XYLineAndShapeRenderer r = (XYLineAndShapeRenderer) plot.getRenderer(); r.setSeriesShape(0, ShapeUtilities.createDiamond(1)); r.setSeriesShapesVisible(0, true);  String listString = """";  for (String s : headline) { listString += ""- "" + s + ""<br>""; }  int dismissDelay = ToolTipManager.sharedInstance().getDismissDelay(); dismissDelay = Integer.MAX_VALUE;  ToolTipManager.sharedInstance().setDismissDelay(dismissDelay);  headLineAnnotation.setToolTipText(""<html>"" + listString + ""</html>""); headLineAnnotation.setTextAnchor(TextAnchor.HALF_ASCENT_RIGHT); plot.addAnnotation(headLineAnnotation);  annotationPositions.put(date, new AnnotationPosition(headLineAnnotation.getX(), headLineAnnotation.getY()));  } } }  logger.info(""Finished creating date volume chart"");  return mainChart; } "	0	0	0	0	0	1
"@Override public View getView(final int position, View convertView, final ViewGroup parent) { final ViewHolder holder; LayoutInflater inflater = LayoutInflater.from(context); if (convertView == null) { holder = new ViewHolder(); convertView = inflater.inflate(R.layout.list_item_lover_of_life, null); holder.imageView = (ImageView) convertView.findViewById(R.id.imageViewIcon); holder.textViewName = (TextView) convertView.findViewById(R.id.textViewNickName); holder.textViewDesc = (TextView) convertView.findViewById(R.id.textViewDesc); holder.textViewArticleCount = (TextView) convertView.findViewById(R.id.textViewArticle); holder.textViewFollowerCount = (TextView) convertView.findViewById(R.id.textViewFollow); holder.imageViewFollowed = (ImageView) convertView.findViewById(R.id.imageViewFollowed);  convertView.setTag(holder); } else { holder = (ViewHolder) convertView.getTag(); } final HashMap<String, Object> stringObjectHashMap = list.get(position); Glide.with(context) .load(stringObjectHashMap.get(""imageView"").toString()) .placeholder(R.drawable.banner_loading_spinner) .crossFade() .into(holder.imageView); holder.textViewName.setText(stringObjectHashMap.get(""textViewName"").toString()); holder.textViewDesc.setText(stringObjectHashMap.get(""textViewDesc"").toString()); holder.textViewArticleCount.setText(stringObjectHashMap.get(""textViewArticleCount"").toString()); holder.textViewFollowerCount.setText(stringObjectHashMap.get(""textViewFollowerCount"").toString()); if (followStatus.get(position).toString().equals(""1"")) { holder.imageViewFollowed.setImageResource(R.drawable.followed); } else { holder.imageViewFollowed.setImageResource(R.drawable.follow); } holder.imageViewFollowed.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) {   if (UserInfo.isUserLogged(context)) {  id = stringObjectHashMap.get(""id"").toString(); postReadToServer(holder,position, id, followStatus.get(position).equals(""1"") ? 0 : 1);  } else { LoginUtils.startLogin(context, LoginActivity.REQUEST_CODE_LOGIN); }  } });   return convertView;   } "	0	0	0	0	0	1
"protected String getJsonRanks(Group group, List<GoogleTarget> targets,Run firstRun, Run lastRun, int searchId){  StringBuilder builder = new StringBuilder(""{\""targets\"":[""); for (GoogleTarget target : targets) { builder.append(""{\""id\"":"").append(target.getId()) .append("",\""name\"":\"""").append(target.getName()).append(""\""},""); } if(builder.charAt(builder.length()-1) == ','){ builder.setCharAt(builder.length()-1, ']'); } else { builder.append(']'); } builder.append("",\""ranks\"":["");  final int[] maxRank = new int[1];  googleDB.serp.stream(firstRun.getId(), lastRun.getId(), searchId, (GoogleSerp serp) -> {  builder.append('[').append(serp.getRunDay().toEpochSecond(ZoneOffset.UTC)*1000l).append(',');  // calendar builder.append(""null"").append("","");  for (GoogleTarget target : targets) { int position = UNRANKED; for (int i = 0; i < serp.getEntries().size(); i++) { if(target.match(serp.getEntries().get(i).getUrl())){ position = i + 1; break; } }  builder.append(position == UNRANKED ? ""null"" : position).append(','); if(position != UNRANKED && position > maxRank[0]){ maxRank[0] = position; } }  if(builder.charAt(builder.length()-1) == ','){ builder.setCharAt(builder.length()-1, ']'); } builder.append(','); }); if(builder.charAt(builder.length()-1) == ','){ builder.setCharAt(builder.length()-1, ']'); } else { builder.append(']'); }  builder.append("",\""maxRank\"":"").append(maxRank[0]); builder.append(""}"");  return builder.toString(); } "	0	0	0	0	0	1
"protected Result renderChart( Group group, GoogleTarget target, List<GoogleSearch> searches, List<Run> runs, LocalDate minDay, LocalDate maxDay, LocalDate startDate, LocalDate endDate ){ String display = ""chart""; StringBuilder builder = new StringBuilder(""{\""searches\"": [""); for (GoogleSearch search : searches) { builder.append(""\"""").append(search.getKeyword()).append(""\"",""); } builder.setCharAt(builder.length()-1, ']'); builder.append("",\""ranks\"": ["");  int maxRank = 0; for(Run run : runs){ builder.append(""\n\t["").append(run.getStarted().toEpochSecond(ZoneOffset.UTC)*1000l).append("",""); // calendar builder.append(""null,"");  for (GoogleSearch search : searches) { GoogleRank fullRank = googleDB.rank.getFull(run.getId(), group.getId(), target.getId(), search.getId()); if(fullRank != null && fullRank.rank != GoogleRank.UNRANKED && fullRank.rank > maxRank){ maxRank = fullRank.rank; } builder.append(fullRank == null || fullRank.rank == GoogleRank.UNRANKED ? ""null"" : fullRank.rank).append(','); }  builder.setCharAt(builder.length()-1, ']'); builder.append("",""); } builder.setCharAt(builder.length()-1, ']'); builder.append("",\n\""maxRank\"": "").append(maxRank).append(""}"");  List<Event> events = baseDB.event.list(group, startDate, endDate); String jsonEvents = null; try { jsonEvents = objectMapper.writeValueAsString(events); } catch(JsonProcessingException ex){ jsonEvents = ""[]""; }  Map<Integer,GoogleBest> bestRanks = new HashMap<>(); for (GoogleSearch search : searches) { bestRanks.put(search.getId(), googleDB.rank.getBest(target.getGroupId(), target.getId(), search.getId())); }  return Results.ok() .template(""/serposcope/views/google/GoogleTargetController/"" + display + "".ftl.html"") .render(""target"", target) .render(""searches"", searches) .render(""startDate"", startDate.toString()) .render(""endDate"", endDate.toString()) .render(""minDate"", minDay) .render(""maxDate"", maxDay) .render(""display"", display)  .render(""ranksJson"", builder.toString()) .render(""eventsJson"", jsonEvents) ; } "	0	1	0	0	0	0
"protected ArrayList<String> checkLinks(ArrayList<Urls> originalValue) {  // here we convert our Data arrayList to a String arrayList ArrayList<String> stringArray = new ArrayList<String>();  for (Urls currentData : originalValue) { stringArray.add(currentData.getContentUrl()); }  // System.out.println(""Original array with "" + stringArray.size() + "" // elements""); // System.out.println(""============""); // stringArray.forEach(System.out::println);  // get an iterator Iterator iter = stringArray.iterator(); String strElement = """"; URL linkAsUrl = null;  // variable to count the number of valid urls int count = 0;  while (iter.hasNext()) { strElement = (String) iter.next(); // System.out.println(""============""); System.out.println(""CHECKING: "" + strElement);  try { linkAsUrl = new URL(strElement); imageResponses = ImageIO.read(linkAsUrl); getImageFromHttp(strElement, labelTryLinks); System.out.println(""OK""); count++; } catch (MalformedURLException e) { System.out.println(""malformed exception with url "" + strElement); e.printStackTrace(); } catch (NullPointerException e) { System.out.println(""NullPointerException: element to be removed - "" + strElement); iter.remove(); e.printStackTrace(); } catch (IOException e) { System.out.println(""IIOException \nLink to be removed: "" + strElement); iter.remove(); e.printStackTrace(); } // stop checking when 4 valid links are found if (count == 4) { break; } }  // System.out.println(""=======================""); // System.out.println(""Filtered array: ""); // stringArray.forEach(System.out::println); // System.out.println(""number of elements after the deletion "" + // stringArray.size());  return stringArray; } "	0	0	0	0	0	1
protected void setAllFoundImagesLabelsAndPreviewsToNull() {  foundImagesLabel1.setIcon(null); foundImagesLabel2.setIcon(null); foundImagesLabel3.setIcon(null); foundImagesLabel4.setIcon(null);  foundImagesLabel1.setToolTipText(null); foundImagesLabel2.setToolTipText(null); foundImagesLabel3.setToolTipText(null); foundImagesLabel4.setToolTipText(null); } 	0	0	0	0	0	1
protected void openFilechooser() {  originalImage = null; file = fc.getSelectedFile();  try { originalImage = (BufferedImage) ImageIO.read(file); } catch (IOException e1) { e1.printStackTrace(); }  icon = scaleBufferedImage(originalImage, originalImageLabel); originalImageLabel.setIcon(icon); } 	0	0	0	0	0	1
protected BufferedImage mirrorImage(BufferedImage imageToFlip) {  // Flip the image horizontally AffineTransform tx = AffineTransform.getScaleInstance(-1, 1); tx.translate(-imageToFlip.getWidth(null), 0); AffineTransformOp op = new AffineTransformOp(tx, AffineTransformOp.TYPE_NEAREST_NEIGHBOR); imageToFlip = op.filter(imageToFlip, null);  return imageToFlip; } 	0	0	0	0	0	1
"@Override public void onLoadFinished(Loader<CallResult<Depth>> loader, CallResult<Depth> result) { if (!result.isSuccess()) { Toast.makeText(getActivity(), R.string.general_error_text, Toast.LENGTH_LONG).show(); } else { final List<PriceVolumePair> asks = result.getPayload().getAsks(); final List<PriceVolumePair> bids = result.getPayload().getBids();  mAsksAdapter.pushData(asks); mBidsAdapter.pushData(bids); mAsksList.setAdapter(mAsksAdapter); mBidsList.setAdapter(mBidsAdapter); mChartArea.removeAllViews(); StockChartView chartView = new StockChartView(getActivity()); final LinearSeries asksSeries = new LinearSeries(); final LinearSeries bidsSeries = new LinearSeries(); asksSeries.getAppearance().setOutlineColor(0xffff4444); bidsSeries.getAppearance().setOutlineColor(0xff0099cc); double sumAsks = 0.0; double sumBids = 0.0; for (int i = 0; i < bids.size(); i++) { sumBids += bids.get(i).getVolume(); } for (int i = bids.size() - 1; i >= 0; i--) { sumBids -= bids.get(i).getVolume(); bidsSeries.addPoint(sumBids); } for (int i = 0; i < asks.size(); i++) { asksSeries.addPoint(sumAsks); sumAsks += asks.get(i).getVolume(); }  asksSeries.setIndexOffset(bidsSeries.getPointCount());  chartView.addArea().getSeries().add(asksSeries); chartView.getAreas().get(0).getSeries().add(bidsSeries);  Axis.ILabelFormatProvider provider = new Axis.ILabelFormatProvider() { @Override public String getAxisLabel(Axis axis, double v) { int index = bidsSeries.convertToArrayIndex(v); if (index < 0) { index = 0; } if (index >= 0) { if (index >= bidsSeries.getPointCount()) { index = asksSeries.convertToArrayIndex(v); if (index < 0) { index = 0; } if (index >= 0) { if (index >= asksSeries.getPointCount()) { index = asksSeries.getPointCount() - 1; } } return String.valueOf(asks.get(index).getPrice()); } return String.valueOf(bids .get(bidsSeries.getPointCount() - 1 - index).getPrice()); } return null;  } }; chartView.getAreas().get(0).getBottomAxis().setLabelFormatProvider(provider);   //customizing fonts for chart chartView.getAreas().get(0).setTitle(""Market Depth for "" + mPairsSpinner.getSelectedItem().toString() + "" (Price vs. Volume)""); chartView.getAreas().get(0).getPlot() .getAppearance() .getFont() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, 14, getResources().getDisplayMetrics())); chartView.getAreas().get(0) .getLeftAxis() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, getResources().getDisplayMetrics())); chartView.getAreas().get(0) .getTopAxis() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, getResources().getDisplayMetrics())); chartView.getAreas().get(0) .getBottomAxis() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 15, getResources().getDisplayMetrics())); chartView.getAreas().get(0) .getRightAxis() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 40, getResources().getDisplayMetrics())); chartView.getAreas().get(0) .getBottomAxis() .getAppearance() .getFont() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, 9, getResources().getDisplayMetrics())); chartView.getAreas().get(0) .getRightAxis() .getAppearance() .getFont() .setSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, 9, getResources().getDisplayMetrics())); mChartArea.addView(chartView); chartView.invalidate(); }  } "	0	0	0	0	0	1
@Override public boolean isRoot() { return exml.getParentUID() != null; } 	1	0	1	1	1	0
@Override public void onCreate() { super.onCreate(); Logger.setLogger(new AndroidLogger()); OpenHelperCreator.setCreator(new OpenHelperCreator() { @Override protected ISQLiteOpenHelper createOpenHelper(String databaseName, SquidDatabase.OpenHelperDelegate delegate, int version) { return new AndroidOpenHelper(HelloSquiDBApplication.this, databaseName, delegate, version); } }); TasksDatabase.getInstance().registerDataChangedNotifier(new UriNotifier(this, Task.TABLE) { @Override protected boolean accumulateNotificationObjects(Set<Uri> accumulatorSet, SqlTable<?> table, SquidDatabase database, DBOperation operation, AbstractModel modelValues, long rowId) { return accumulatorSet.add(CONTENT_URI); } }); } 	0	0	0	0	0	1
private void init() { personPoint = BitmapFactory.decodeResource(getResources(), R.drawable.ic_room_white_36dp); canDraw = false; thread = null; surface = getHolder(); textPaint = new Paint(Paint.ANTI_ALIAS_FLAG); textPaint.setColor(Color.GREEN); if (textHeight == 0) { textHeight = textPaint.getTextSize(); } else { textPaint.setTextSize(textHeight); }  roomPaint = new Paint(Paint.ANTI_ALIAS_FLAG); roomPaint.setStyle(Paint.Style.FILL); roomPaint.setColor(Color.BLACK); } 	1	1	0	1	1	0
@Test public void testGetOrganizationRolesBasic() { final String role = LumeerConst.Security.ROLE_MANAGE;  securityFacade.addOrganizationUsersRole(organizationCode, Collections.singletonList(USER_Y), role); securityFacade.addOrganizationGroupsRole(organizationCode, Collections.singletonList(GROUP_B), role); List<Role> fromFacade = securityFacade.getOrganizationRoles(organizationCode);  final Client client = ClientBuilder.newBuilder().build(); Response response = client .target(TARGET_URI) .path(createUrl( LumeerConst.Security.ORGANIZATION_RESOURCE, organizationCode, LumeerConst.Security.PERMISSIONS_KEY)) .request().buildGet() .invoke();  List<Role> fromService = response.readEntity(new GenericType<List<Role>>(List.class) { }); assertThat(fromService).hasSize(fromFacade.size()); for (Role r : fromFacade) { assertThat(fromService.contains(r)); }  response.close(); } 	0	0	0	0	0	1
"public boolean isShowIdLabel() { return myShowIdLabel && Registry.is(""debugger.showTypes""); } "	1	0	1	0	0	0
"public void insertWarcInfoMetadata(Job ajob, String origHarvestdefinitionName, String scheduleName, String performer) { if (!template.contains(METADATA_ITEMS_PLACEHOLDER)) { throw new IllegalState(""The placeholder for the property '"" + METADATA_ITEMS_PLACEHOLDER + ""' was not found. Maybe the placeholder has already been replaced with the correct value. The template looks like this: "" + template); } String startMetadataEntry = ""\n<entry key=\""""; String endMetadataEntry = ""\""/>""; String valuePart = ""\"" value=\""""; StringBuilder sb = new StringBuilder(); sb.append(""<property name=\""metadataItems\"">\n<map>\n"");  // <entry key=""harvestInfo.version"" value=""1.03""/>  sb.append(startMetadataEntry); sb.append(HARVESTINFO_VERSION + valuePart + HARVESTINFO_VERSION_NUMBER + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_JOBID + valuePart + ajob.getJobID() + endMetadataEntry);  sb.append(startMetadataEntry); sb.append(HARVESTINFO_CHANNEL + valuePart + ajob.getChannel() + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_HARVESTNUM + valuePart + ajob.getHarvestNum() + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_ORIGHARVESTDEFINITIONID + valuePart + ajob.getOrigHarvestDefinitionID() + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_MAXBYTESPERDOMAIN + valuePart + ajob.getMaxBytesPerDomain() + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_MAXOBJECTSPERDOMAIN + valuePart + ajob.getMaxObjectsPerDomain() + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_ORDERXMLNAME + valuePart + ajob.getOrderXMLName() + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_ORIGHARVESTDEFINITIONNAME + valuePart + origHarvestdefinitionName + endMetadataEntry);  /* optional schedule-name. */ if (scheduleName != null) { sb.append(startMetadataEntry); sb.append(HARVESTINFO_SCHEDULENAME + valuePart + scheduleName + endMetadataEntry); } sb.append(startMetadataEntry); sb.append(HARVESTINFO_HARVESTFILENAMEPREFIX + valuePart + ajob.getHarvestFilenamePrefix() + endMetadataEntry); sb.append(startMetadataEntry); sb.append(HARVESTINFO_JOBSUBMITDATE + valuePart + ajob.getSubmittedDate() + endMetadataEntry);  /* optional HARVESTINFO_PERFORMER */ if (performer != null){ sb.append(startMetadataEntry); sb.append(HARVESTINFO_PERFORMER + valuePart + performer  + endMetadataEntry); }  /* optional HARVESTINFO_PERFORMER */ if (ajob.getHarvestAudience() != null) { sb.append(startMetadataEntry); sb.append(HARVESTINFO_AUDIENCE + valuePart + ajob.getHarvestAudience() + endMetadataEntry); } sb.append(""\n</map>\n</property>\n"");  // Replace command String templateNew = template.replace(METADATA_ITEMS_PLACEHOLDER, sb.toString()); this.template = templateNew; } "	0	0	0	0	0	1
"@Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { if (!HttpHeaders.Values.UPGRADE.equalsIgnoreCase(req.getHeader(HttpHeaders.Names.CONNECTION)) || !HttpHeaders.Values.WEBSOCKET.equalsIgnoreCase(req.getHeader(HttpHeaders.Names.UPGRADE))) return;  try { WebSocketServerHandshakerFactory wsFactory = new WebSocketServerHandshakerFactory(getWebSocketLocation(req), null, false, manager.getMaxFrameSize());  HttpMethod method = HttpMethod.valueOf(req.getMethod()); HttpRequest nettyReq = new DefaultHttpRequest(HttpVersion.HTTP_1_1, method, req.getRequestURI()); Enumeration<String> it = req.getHeaderNames(); while (it.hasMoreElements()) { String header = it.nextElement(); nettyReq.addHeader(header, req.getHeader(header)); }  WebSocketServerHandshaker handshaker = wsFactory.newHandshaker(nettyReq); if (handshaker == null) { resp.setStatus(HttpResponseStatus.UPGRADE_REQUIRED.getCode()); resp.setHeader(Names.SEC_WEBSOCKET_VERSION, WebSocketVersion.V13.toHttpHeaderValue()); return; }  String host = req.getHeader(HttpHeaders.Names.HOST); Channel channel = (Channel) req.getAttribute(""netty.channel""); channel.setAttachment(host); handshaker.handshake(channel, nettyReq).addListener(WebSocketServerHandshaker.HANDSHAKE_LISTENER);  // open session WebSocket socket = new WebSocketChannel(channel); manager.register(socket); } catch (Throwable t) { logger.error(""araqne httpd: websocket handshake failed"", t); } } "	0	1	0	0	0	0
"private static Response formulateResponse( final ApplicationStatus status, final Throwable error, final String message, final boolean throwIt ) { final String id = generateErrorId(); final String msg = formatEntity( id, error, message ).toString(); Status code = Status.INTERNAL_SERVER_ERROR;  if ( status != null ) { code = Status.fromStatusCode( status.code() ); LOGGER.debug( ""got error code from parameter: {}"", code ); } else if ( ( error instanceof IndyWorkflowException ) && ( (IndyWorkflowException) error ).getStatus() > 0 ) { final int sc = ( (IndyWorkflowException) error ).getStatus(); LOGGER.debug( ""got error code from exception: {}"", sc ); code = Status.fromStatusCode( sc ); }  LOGGER.error( ""Sending error response: {} {}\n{}"", code.getStatusCode(), code.getReasonPhrase(), msg );  Response response = Response.status( code ) .header( ApplicationHeader.content_type.key(), ApplicationContent.text_plain ) .entity( msg ) .build();  if ( throwIt ) { throw new WebApplicationException( error, response ); }  return response; } "	0	0	0	0	0	1
"public String parseInput(String in){ String[] cmds = in.split("",""); String cmd = cmds[0];  if (cmd.equals(""exit"")) System.exit(0); else if (cmd.equals(""home"")){ if (cmds.length > 0) loop(in.split("","", 2)[1]); else loop(); } else if (cmd.equals(""help"")){  } else return in; return null; } "	1	1	1	1	0	0
public static void drawHoveringText(@Nullable ItemStack itemStack, Minecraft minecraft, List<String> textLines, int x, int y, FontRenderer font) { ScaledResolution scaledresolution = new ScaledResolution(minecraft); GuiUtils.drawHoveringText(itemStack, textLines, x, y, scaledresolution.getScaledWidth(), scaledresolution.getScaledHeight(), -1, font); } 	0	0	0	0	0	1
"@RequestMapping(value = ""/api/v1/houses/{id}"", method = RequestMethod.GET) @Authorization @ApiResponses({ @ApiResponse(code = 200, response = HouseInfoFields.class, message = ""Get house info"") }) public ResponseEntity<?> get(@PathVariable String id, @CurrentUser @ApiIgnore User currentUser) throws Exception { House house = houseService.getById(id); if (house == null) { return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new GenericResponseBody(Message.MESSAGE_NOT_FOUND)); }  if (!house.getPublicity() || memberService.findTopByHouseAndUser(house, currentUser) == null) { return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new GenericResponseBody(Message.MESSAGE_NOT_FOUND)); }  HouseInfoFields houseInfoFields = houseInfoFieldsPopulator.populate(house); return new ResponseEntity<>(houseInfoFields, HttpStatus.OK); } "	1	0	1	1	1	0
@Override public void goNextFragmentListRequestLeave() { setCurrentPage(Page.COME_LATE_LEAVE_EARLY); setCurrentItem(R.id.item_come_late_leave_early); setCurrentTitleToolbar(mContext.getResources().getString(R.string.request_leave)); } 	0	1	0	0	0	0
public void onClickRequestLeave(View view) { setVisibleFloatingActionMenu(false); Bundle bundle = new Bundle(); bundle.putInt(Constant.EXTRA_ACTION_TYPE, ActionType.ACTION_CREATE); mNavigator.startActivityForResult(RequestLeaveActivity.class, bundle, Constant.RequestCode.REQUEST_LEAVE); } 	0	0	0	0	0	1
private void findPath() { while (unSettledNodes.size() > 0) { Point current = getMinimum(unSettledNodes); if (current.equals(destination)) return; settledNodes.add(current); unSettledNodes.remove(current); findMinimalDistances(current); } } 	1	0	1	0	1	0
@Override protected void initViews(Bundle savedInstanceState) { SmartRouters.running(this); ((TextView) this.findViewById(R.id.smart_router_simple_example_char_text)).setText( this.exampleChar); } 	0	0	0	0	0	1
public static boolean usingWindowsLnf() { return usingLnf(WindowsLookAndFeel.class); } 	0	0	0	0	0	1
public int getRawValue() { return mValueInLowestDenom; } 	0	0	0	0	0	1
private boolean allParentsHaveOrDontHaveParents(final List<T> parents) { assert(parents != null); assert(parents.size() > 0); final boolean hasParents = parents.get(0).hasParents(); for (int i = 1; i < parents.size(); i++) if (!parents.get(i).hasParents()) return false; return true; } 	1	1	0	1	1	0
"public File getVoucher(int agentId) { if (voucherTemplates.containsKey(agentId)) { return voucherTemplates.get(agentId).stream().findFirst().orElseThrow(() -> new RuntimeException(""this should not happen"")); } else { return voucherTemplates.get(0).stream().findFirst().orElseThrow(() -> new RuntimeException(""this should not happen"")); } } "	0	0	0	0	0	1
"private void saveProfile() { Intent result = new Intent(); ProfileManager vpl = ProfileManager.getInstance(this);  if (!TextUtils.isEmpty(mEmbeddedPwFile)) ConfigParser.useEmbbedUserAuth(mResult, mEmbeddedPwFile);   // Only use crl on import if it is found ConfigParser.removeCRLCustomOption(mResult); if (TextUtils.isEmpty(mCrlFileName)) { // TODO: Convert this to a real config option that is parsed mResult.mCustomConfigOptions += ""\ncrl-verify "" + mCrlFileName; }  vpl.addProfile(mResult); vpl.saveProfile(this, mResult); vpl.saveProfileList(this); result.putExtra(VpnProfile.EXTRA_PROFILEUUID, mResult.getUUID().toString()); setResult(Activity.RESULT_OK, result); finish(); } "	1	1	1	1	0	0
"public MockMvcRequestSpecification params(String firstParameterName, Object firstParameterValue, Object... parameterNameValuePairs) { notNull(firstParameterName, ""firstParameterName""); notNull(firstParameterValue, ""firstParameterValue""); return params(MapCreator.createMapFromParams(firstParameterName, firstParameterValue, parameterNameValuePairs)); } "	0	1	0	0	0	0
"public MockMvcRequestSpecification formParams(String firstParameterName, Object firstParameterValue, Object... parameterNameValuePairs) { notNull(firstParameterName, ""firstParameterName""); notNull(firstParameterValue, ""firstParameterValue""); return formParams(MapCreator.createMapFromParams(firstParameterName, firstParameterValue, parameterNameValuePairs)); } "	0	1	0	0	0	0
private Insets getInsets(Canvas component) { Component parent = component.getParent();  while (parent != null) { if (parent instanceof Container) { return ((Container)parent).getInsets(); } parent = parent.getParent(); }  return null; } 	0	0	0	0	0	1
"public String buildJDKLogFormat(String logFormat) { tokens = parseFormatString(logFormat); StringBuilder formatBuilder = new StringBuilder();  for (int i = 0, j = 0; i < tokens.length; i++) { if (tokens[i].startsWith(Constants.FMT_TIMESTAMP)) { dateFormat = new SimpleDateFormat( tokens[i].substring(Constants.FMT_TIMESTAMP.length() + 3, tokens[i].length() - 1)); formatBuilder.append(""%"" + (j + 1) + ""$s""); j++; } else if (isAPlaceholderToken(tokens[i])) { formatBuilder.append(""%"" + (j + 1) + ""$s""); j++; } else { formatBuilder.append(tokens[i]); } } formatBuilder.append('\n');  return formatBuilder.toString(); } "	1	0	1	1	0	0
private void createData() { setEnableViews(true); mIdImageDepartment = Settings.ID_DEPARTMENT_DEFAULT; switch (mTypeSettings) { case Settings.ADD_DEPARTMENT: // TODO break; case Settings.EDIT_DEPARTMENT: showDepartment(); break; } } 	0	0	0	0	0	1
private static final double calcSoilMean(final Coefficients c, final double Mw, final double rRup, final FaultStyle style) {  double c1 = (style == REVERSE) ? c.c1r : c.c1ss; double c6 = (style == REVERSE) ? c.c6r : c.c6ss;  return c1 + c.c2 * Mw - c.c3 * log(rRup + c.c4 * exp(c.c5 * Mw)) + c6 + c.c7 * pow(Mw, 2.5); } 	0	0	0	0	0	1
public void printSheetErrorSummary() { for(AbstractErrorEntry currentError : this.errorLog) System.out.println(currentError.toLogString(this.validatingSpec)); } 	0	0	0	0	0	1
"@JavascriptInterface void connect() { Log.i(""brassau"", ""connect""); final ControlBinder control = engine.getControl(); if (control == null) throw new RuntimeException(""The engine died unexpectedly""); control.getAssistant().brassauReady(); } "	0	0	0	0	0	1
@Kroll.method @Kroll.setProperty public void setBigPicture(Object picture) { TiDrawableReference source = TiDrawableReference.fromObject(this.getActivity(), picture);  // Check for decodeRetries if (hasProperty(TiC.PROPERTY_DECODE_RETRIES)) { source.setDecodeRetries(TiConvert.toInt(getProperty(TiC.PROPERTY_DECODE_RETRIES), TiDrawableReference.DEFAULT_DECODE_RETRIES)); }  ((BigPictureStyle)style).bigPicture(source.getBitmap());  setProperty(TiC.PROPERTY_BIG_PICTURE, picture); } 	1	0	1	0	1	0
@Override public OpenOrdersParams createOpenOrdersParams() { throw new NotAvailableFromExchangeException(); } 	0	0	0	0	0	1
public static <M> MessageSelector<?, M> select() { return new MessageSelector<Object, M>() { @Override public boolean matches(Object m) { return true; } }; } 	0	0	0	0	0	1
"private ParseResult<CompilationUnit> parseSample(String sampleName) throws IOException { Provider p = Providers.resourceProvider( ""com/github/javaparser/issue_samples/"" + sampleName + "".java.txt""); return new JavaParser().parse(ParseStart.COMPILATION_UNIT, p); } "	0	0	0	0	0	1
"public static NativeArray jsFunction_searchAccessTokens(Context cx, Scriptable thisObj, Object[] args, Function funObj) throws Exception { NativeObject tokenInfo; NativeArray tokenInfoArr = new NativeArray(0); if (args == null || !isStringValues(args)) { handleException(""Invalid input parameters.""); } String searchValue = (String) args[0]; String searchTerm; String searchType; APIProvider apiProvider = getAPIProvider(thisObj); Map<Integer, APIKey> tokenData = null; String loggedInUser = ((APIProviderHostObject) thisObj).getUsername();  if (searchValue.contains("":"")) { searchTerm = searchValue.split("":"")[1]; searchType = searchValue.split("":"")[0]; if (""*"".equals(searchTerm) || searchTerm.startsWith(""*"")) { searchTerm = searchTerm.replaceFirst(""\\*"", "".*""); } tokenData = apiProvider.searchAccessToken(searchType, searchTerm, loggedInUser); } else { //Check whether old access token is already available if (apiProvider.isApplicationTokenExists(searchValue)) { APIKey tokenDetails = apiProvider.getAccessTokenData(searchValue); if (tokenDetails.getAccessToken() == null) { throw new APIManagementException(""The requested access token is already revoked or No access token available as per requested.""); } tokenData = new HashMap<Integer, APIKey>(); tokenData.put(0, tokenDetails); } else { if (""*"".equals(searchValue) || searchValue.startsWith(""*"")) { searchValue = searchValue.replaceFirst(""\\*"", "".*""); } tokenData = apiProvider.searchAccessToken(null, searchValue, loggedInUser); } } if (tokenData != null && tokenData.size() != 0) { for (int i = 0; i < tokenData.size(); i++) { tokenInfo = new NativeObject(); tokenInfo.put(""token"", tokenInfo, tokenData.get(i).getAccessToken()); tokenInfo.put(""user"", tokenInfo, tokenData.get(i).getAuthUser()); tokenInfo.put(""scope"", tokenInfo, tokenData.get(i).getTokenScope()); tokenInfo.put(""createTime"", tokenInfo, tokenData.get(i).getCreatedDate()); if (tokenData.get(i).getValidityPeriod() == Long.MAX_VALUE) { tokenInfo.put(""validTime"", tokenInfo, ""Won't Expire""); } else { tokenInfo.put(""validTime"", tokenInfo, tokenData.get(i).getValidityPeriod()); } tokenInfo.put(""consumerKey"", tokenInfo, tokenData.get(i).getConsumerKey()); tokenInfoArr.put(i, tokenInfoArr, tokenInfo); } } else { throw new APIManagementException(""The requested access token is already revoked or No access token available as per requested.""); }  return tokenInfoArr;  } "	1	1	1	0	1	0
"protected void mockConnection() throws IOException { if (connectionFactory == null) { mockConnectionOnly(); connectionFactory = mock(ConnectionFactory.class); when(connectionFactory.getVirtualHost()).thenReturn(""/""); when(connectionFactory.newConnection(any(ExecutorService.class), any(Address[].class))) .thenReturn(connection); }  if (options == null) options = new ConnectionOptions().withHost(""test-host""); options.withConnectionFactory(connectionFactory); if (config == null) config = new Config().withRetryPolicy( RetryPolicies.retryAlways().withInterval(Duration.millis(10))).withRecoveryPolicy( RecoveryPolicies.recoverAlways());  if (connectionHandler == null) { connectionHandler = new ConnectionHandler(options, config); connectionProxy = (ConfigurableConnection) Proxy.newProxyInstance(Connection.class.getClassLoader(), new Class<?>[] {ConfigurableConnection.class}, connectionHandler); connectionHandler.createConnection(connectionProxy); channels = new HashMap<Integer, MockChannel>(); } } "	0	0	0	0	0	1
"public static void main(String[] args) throws Exception {  // log4j logger BasicConfigurator.configure();  //Read contrail-vcenter-plugin.conf file readVcenterPluginConfigFile(); s_logger.info(""Config params vcenter url: "" + _vcenterURL + "", _vcenterUsername: "" + _vcenterUsername + "", api server: "" + _apiServerAddress);  // Zookeeper mastership logic MasterSelection zk_ms = null; zk_ms = new MasterSelection(_zookeeperAddrPort, _zookeeperLatchPath, _zookeeperId); s_logger.info(""Waiting for zookeeper Mastership .. ""); zk_ms.waitForLeadership(); s_logger.info(""Acquired zookeeper Mastership .. "");  // Launch the periodic VCenterMonitorTask VCenterMonitorTask _monitorTask = new VCenterMonitorTask(_vcenterURL, _vcenterUsername, _vcenterPassword, _vcenterDcName, _vcenterDvsName, _apiServerAddress, _apiServerPort, _vcenterIpFabricPg);  scheduledTaskExecutor.scheduleWithFixedDelay(_monitorTask, 0, 2, TimeUnit.SECONDS); Runtime.getRuntime().addShutdownHook( new ExecutorServiceShutdownThread(scheduledTaskExecutor));  //Start event notify thread if VNC & VCenter one time resync is complete. s_logger.info(""Waiting for one time resync to complete.. ""); while (_monitorTask.getAddPortSyncAtPluginStart() == true) { // wait for sync to complete. try { Thread.sleep(2); } catch (java.lang.InterruptedException e) { System.out.println(e); } } s_logger.info(""Starting event monitor Task.. ""); _eventMonitor = new VCenterNotify(_monitorTask); _eventMonitor.start(); } "	0	0	0	0	0	1
public SchemaString schemaStringFromJson(String json) throws IOException { return new ObjectMapper().readValue(json, SchemaString.class); } 	0	0	0	0	0	1
private AggregatedSchemaMetadataInfo buildAggregatedSchemaMetadataInfo(SchemaMetadataInfo schemaMetadataInfo) { if(schemaMetadataInfo == null) { return null; }  Collection<SchemaVersionInfo> allVersions = getAllVersions(schemaMetadataInfo.getSchemaMetadata().getName()); List<SerDesInfo> serDesInfos = getSerDesInfos(schemaMetadataInfo.getSchemaMetadata().getName());  return new AggregatedSchemaMetadataInfo(schemaMetadataInfo.getSchemaMetadata(), schemaMetadataInfo.getId(), schemaMetadataInfo.getTimestamp(), allVersions, serDesInfos); } 	0	0	0	0	0	1
"@Test public void itShouldRetrieveAListOfReportsByUser() throws Exception { final List<Report> results = newArrayList(report(123L), report(456L)); when(service.findAllByUserAndId(eq(""user""), anyListOf(Long.class))) .thenReturn(results);  mvc.perform(get(""/reports"") .param(""user"", ""user""))  .andExpect(status().isOk()) .andExpect(jsonPath(""$"", hasSize(2))) .andExpect(jsonPath(""$[0].id"").value(123)) .andExpect(jsonPath(""$[1].id"").value(456));  verify(service).findAllByUserAndId(eq(""user""), reportIdCaptor.capture()); assertThat(reportIdCaptor.getValue()).isEmpty(); } "	0	0	0	0	0	1
"protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { long id = Long.parseLong(request.getParameter(""user_id"")); String username = request.getParameter(""username""); String email = request.getParameter(""email""); String phone = request.getParameter(""phone""); String password = request.getParameter(""password""); String url = request.getParameter(""url""); String passwordConfirmation = request.getParameter(""confirm_password"");  User user = DaoFactory.getUsersDao().findById(id);  // validate input boolean passwordMatch = password.equals(passwordConfirmation); boolean inputIsEmpty = username.isEmpty() || email.isEmpty() || password.isEmpty(); boolean inputHasErrors = inputIsEmpty || !passwordMatch;   if (inputHasErrors) { User invalidUser = new User(username, email, password, phone, url); request.getSession().setAttribute(""user"", invalidUser); request.getSession().setAttribute(""inputIsEmpty"", inputIsEmpty); request.getSession().setAttribute(""passwordMatch"", passwordMatch); response.sendRedirect(""/profile/update""); return; }  // create and save a new user password = Password.hash(password); user = new User(username, email, password, phone, url); DaoFactory.getUsersDao().update(user); request.getSession().setAttribute(""user"", user); response.sendRedirect(""/profile""); } "	1	1	0	1	1	0
"@Test public void testValidatePlantPageDataWithTwoArticlesToFalse() { PlantBag plantBag = plantBagBuilder.initializeProjectDataAndAddToPlantBag(""Project A"") .createPlantItemAndAddToPlantBag(5, 100, ""wood"", ""Project A"") .createPlantItemAndAddToPlantBag(11, 100, ""wood"", ""Project A"") .build(); boolean validation = _plantPageDataValidator.isPlantPageDataValid(plantBag); assertThat(validation).isFalse(); } "	0	0	0	0	0	1
"@Override public String getValue() { return (value == null) ? defaultValue : '""' + value + '""'; } "	0	0	0	0	0	1
@Override public void streamClosed(long fileSize, String filePath) { int trimLength = (int)getCachePath().length(); String fileId = filePath.substring(trimLength); mSQLHelper.updateFileSize(fileId, fileSize); deleteLessUsedFiles(fileSize); } 	1	0	1	0	1	0
"@Override public void contextDestroyed(ServletContextEvent sce) { try { List<JobExecutionContext> currentlyExecuting = Schedule.getScheduler().getCurrentlyExecutingJobs();  for (JobExecutionContext jobExecutionContext : currentlyExecuting) { JobKey jobKey = jobExecutionContext.getJobDetail().getKey(); Schedule.getScheduler().interrupt(jobKey); Schedule.getScheduler().deleteJob(jobKey); } } catch (SchedulerException e) { LOGGER.error(""Problem Clearing Job Queue"", e); }  try { Schedule.getScheduler().clear(); Schedule.getScheduler().shutdown(true); } catch (SchedulerException e) { LOGGER.error(""Problem shutting down scheduler"", e); }  ClassLoader cl = Thread.currentThread().getContextClassLoader(); // Loop through all drivers Enumeration<Driver> drivers = DriverManager.getDrivers(); while (drivers.hasMoreElements()) { Driver driver = drivers.nextElement(); if (driver.getClass().getClassLoader() == cl) { // This driver was registered by the webapp's ClassLoader, so deregister it: try { LOGGER.info(String.format(""Deregistering JDBC driver: %s"", driver)); DriverManager.deregisterDriver(driver); } catch (SQLException ex) { LOGGER.fatal(String.format(""Error deregistering JDBC driver: %s"", driver), ex); } } else { // driver was not registered by the webapp's ClassLoader and may be in use elsewhere LOGGER.info(String.format(""Not deregistering JDBC driver %s as it does not belong to this webapp's ClassLoader"", driver)); } } } "	1	0	1	1	1	0
private void setCommentFieldRequired(String required) { if (required != null && required.length() > 0) { builder.setCommentFieldRequired(Boolean.parseBoolean(required)); } } 	0	1	0	0	0	0
private void setEmailFieldRequired(String required) { if (required != null && required.length() > 0) { builder.setEmailFieldRequired(Boolean.parseBoolean(required)); } } 	0	1	0	0	0	0
@Override public Set<Entity> resolveForce(CommandSource origin) { return new SelectorResolver(origin, this, true).resolve(); } 	0	0	0	0	0	1
@Override public Set<Entity> resolve(CommandSource origin) { return new SelectorResolver(origin, this, false).resolve(); } 	0	0	0	0	0	1
"private List<File> findResourcesFromDirectoryStructure(final File contentsDir) { final List<String> childNames = Arrays.asList(contentsDir.list()); final List<File> resources = new ArrayList<File>();  // Find platform-specific stuff File platformDir = null; if (childNames.contains(PLATFORM + BITS)) { final File potentialPlatformDir = new File(contentsDir, PLATFORM + BITS); if (potentialPlatformDir.isDirectory()) { platformDir = potentialPlatformDir; } } if (platformDir == null && childNames.contains(PLATFORM)) { final File potentialPlatformDir = new File(contentsDir, PLATFORM + BITS); if (potentialPlatformDir.isDirectory()) { platformDir = potentialPlatformDir; } } if (platformDir != null) { log(""Found platform-specific directory "" + platformDir.getAbsolutePath()); for (final File resource : platformDir.listFiles()) { resources.add(resource); } }  // Find multi-platform stuff; always do this final File[] commonResources = contentsDir.listFiles(new FileFilter() { @Override public boolean accept(final File file) { return !file.isDirectory(); } }); for (final File resource : commonResources) { resources.add(resource); } return resources; } "	1	1	1	1	0	0
"private void checkFromValidFe(BaseRequest request, BaseResponse response) throws InvalidClientException { if (isFromValidFe(request)) { throw new InvalidClientException(""invalid client host""); } } "	1	0	1	1	1	0
"@Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) { messageListener.onException(ctx); logger.error(""Exception: {}"", cause.getMessage()); ctx.close(); } "	1	0	1	1	1	0
"public void fireNativeAdLoadEvent(Ad ad) { Iterator<String> it = nativeAds.keySet().iterator(); while(it.hasNext()) { String key = it.next(); FlexNativeAd unit = nativeAds.get(key); if((unit != null) && (unit.ad == ad)){ String jsonData = ""{}""; try { String titleForAd = unit.ad.getAdTitle(); Image coverImage = unit.ad.getAdCoverImage(); Image iconForAd = unit.ad.getAdIcon(); String socialContextForAd = unit.ad.getAdSocialContext(); String titleForAdButton = unit.ad.getAdCallToAction(); String textForAdBody = unit.ad.getAdBody(); Rating appRatingForAd = unit.ad.getAdStarRating();  JSONObject json = new JSONObject(); json.put(""adNetwork"", __getProductShortName()); json.put(""adEvent"", EVENT_AD_LOADED); json.put(""adType"", ADTYPE_NATIVE); json.put(""adId"", unit.adId);  JSONObject adRes = new JSONObject(); adRes.put(""title"", titleForAd); adRes.put(""socialContext"", socialContextForAd); adRes.put(""buttonText"", titleForAdButton); adRes.put(""body"", textForAdBody); if(appRatingForAd != null) { adRes.put(""rating"", appRatingForAd.getValue()); adRes.put(""ratingScale"", appRatingForAd.getScale()); }  JSONObject coverInfo = new JSONObject(); if(coverImage != null) { coverInfo.put(""url"", coverImage.getUrl()); coverInfo.put(""width"", coverImage.getWidth()); coverInfo.put(""height"", coverImage.getHeight()); }  JSONObject iconInfo = new JSONObject(); if(iconForAd != null) { iconInfo.put(""url"", iconForAd.getUrl()); iconInfo.put(""width"", iconForAd.getWidth()); iconInfo.put(""height"", iconForAd.getHeight()); }  adRes.put(""coverImage"", coverInfo); adRes.put(""icon"", iconInfo); json.put(""adRes"", adRes);  jsonData = json.toString(); } catch(Exception e) { } unit.ad.registerViewForInteraction(unit.view); fireEvent(__getProductShortName(), EVENT_AD_LOADED, jsonData); break; } } } "	0	0	0	0	0	1
"public boolean start(Ticker ticker, boolean longStart) throws IOException {  if(started) return true;  if(!slotFilterDisabled) slotFilter.start(ticker);  long curStoreFileSize = hdRAF.length();  long curMetaFileSize = metaRAF.length();  // If prevStoreSize is nonzero, that means that we are either shrinking or // growing. Either way, the file size should be between the old size and the // new size. If it is not, we should pad it until it is.  long smallerSize = storeSize; if(prevStoreSize < storeSize && prevStoreSize > 0) smallerSize = prevStoreSize;  if((smallerSize * (headerBlockLength + dataBlockLength + hdPadding) > curStoreFileSize) || (smallerSize * Entry.METADATA_LENGTH > curMetaFileSize)) { // Pad it up to the minimum size before proceeding. if(longStart) { setStoreFileSize(storeSize, true); curStoreFileSize = hdRAF.length(); curMetaFileSize = metaRAF.length(); } else return true; }  // Otherwise the resize will be completed by the Cleaner thread. // However, we do still need to set storeFileOffsetReady  storeFileOffsetReady = Math.min(curStoreFileSize / (headerBlockLength + dataBlockLength + hdPadding), curMetaFileSize / Entry.METADATA_LENGTH);  if(ticker == null) { cleanerThread.start(); } else ticker.queueTimedJob(new FastRunnable() {  @Override public void run() { cleanerThread.start(); }  }, ""Start cleaner thread"", 0, true, false);  started = true;  return false; } "	1	1	1	0	1	0
"@Override public void onBindViewHolder(GridViewHolder holder, int position) { MediaBean mediaBean = mMediaBeanList.get(position); if (mediaBean.getId() == Integer.MIN_VALUE) { holder.mCbCheck.setVisibility(View.GONE); holder.mIvMediaImage.setVisibility(View.GONE); holder.mLlCamera.setVisibility(View.VISIBLE); holder.mIvCameraImage.setImageDrawable(mCameraImage); holder.mTvCameraTxt.setTextColor(mCameraTextColor); holder.mTvCameraTxt.setText(mConfiguration.isImage() ? mMediaActivity.getString(R.string.gallery_take_image) : mMediaActivity.getString(R.string.gallery_video)); holder.mIvCameraImage.setBackgroundColor(mCameraImageBgColor); } else { if (mConfiguration.isRadio()) { holder.mCbCheck.setVisibility(View.GONE); } else { holder.mCbCheck.setVisibility(View.VISIBLE); holder.mCbCheck.setOnClickListener(new OnCheckBoxClickListener(mediaBean)); holder.mCbCheck.setOnCheckedChangeListener(new OnCheckBoxCheckListener(mediaBean)); } holder.mIvMediaImage.setVisibility(View.VISIBLE); holder.mLlCamera.setVisibility(View.GONE); holder.mCbCheck.setChecked(mMediaActivity.getCheckedList() != null && mMediaActivity.getCheckedList().contains(mediaBean)); String bitPath = mediaBean.getThumbnailSmallPath(); String smallPath = mediaBean.getThumbnailSmallPath();  if (!new File(bitPath).exists() || !new File(smallPath).exists()) { Job job = new ImageThmbnailJobCreate(mMediaActivity, mediaBean).create(); RxJob.getDefault().addJob(job); } String path; if (mConfiguration.isPlayGif() && (imageLoaderType == 3 || imageLoaderType == 2)) { path = mediaBean.getOriginalPath(); } else { path = mediaBean.getThumbnailSmallPath(); if (TextUtils.isEmpty(path)) { path = mediaBean.getThumbnailBigPath(); } if (TextUtils.isEmpty(path)) { path = mediaBean.getOriginalPath(); } } Logger.w(""提示path："" + path); if (imageLoaderType != 3) { OsCompat.setBackgroundDrawableCompat(holder.mIvMediaImage, mImageViewBg); mConfiguration.getImageLoader() .displayImage(mMediaActivity, path, (FixImageView) holder.mIvMediaImage, mDefaultImage, mConfiguration.getImageConfig(), true, mConfiguration.isPlayGif(), mImageSize, mImageSize, mediaBean.getOrientation()); } else { OsCompat.setBackgroundDrawableCompat(holder.mIvMediaImage, mImageViewBg); FrescoImageLoader.setImageSmall(""file://"" + path, (SimpleDraweeView) holder.mIvMediaImage, mImageSize, mImageSize, holder.relativeLayout, mConfiguration.isPlayGif()); } } } "	0	0	0	0	0	1
"public List<Service> getServices(List<ServiceConfig> services) {  ArrayList<Service> ret = new ArrayList<>();  for (ServiceConfig service : services) {  ServiceBuilder serviceBuilder = new ServiceBuilder() .withNewMetadata() .withName(service.getName()) .withAnnotations(getAnnotations(service)) .withAnnotations(getLabels(service)) .endMetadata();  ServiceFluent.SpecNested<ServiceBuilder> serviceSpecBuilder = serviceBuilder.withNewSpec();  List<ServicePort> servicePorts = new ArrayList<>();  // lets default to only adding the first port as usually its the web port only // TODO we could add better filters maybe? // worst case folks can be specific of what ports to expose? int count = 0; for (ServiceConfig.Port port : service.getPorts()) { ServicePort servicePort = new ServicePortBuilder() .withName(port.getName()) .withProtocol(port.getProtocol().name()) .withTargetPort(new IntOrString(port.getTargetPort())) .withPort(port.getPort()) .withNodePort(port.getNodePort()) .build(); servicePorts.add(servicePort); if (++count >= 1) { break; } }  if (!servicePorts.isEmpty()) { serviceSpecBuilder.withPorts(servicePorts); }  if (service.isHeadless()) { serviceSpecBuilder.withClusterIP(""None""); }  if (!Strings.isNullOrBlank(service.getType())) { serviceSpecBuilder.withType(service.getType()); } serviceSpecBuilder.endSpec();  if (service.isHeadless() || !servicePorts.isEmpty()) { ret.add(serviceBuilder.build()); } } return ret; } "	0	0	0	0	0	1
"public static void main(String[] args) { try { Connection myConn = DriverManager.getConnection(""jdbc:mysql://localhost:3306/airline"", ""root"", ""1234""); myStat = myConn.createStatement(); } catch (Exception e){ e.printStackTrace(); }  frame = new JFrame(""Airline""); panel = new JPanel(); c = new GridBagConstraints(); panel.setLayout(new GridBagLayout()); frame.add(panel); frame.pack(); frame.setSize(800, 600); frame.setLocationRelativeTo(null); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  /** * Passenger Login */ c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 0; c.gridy = 1; JLabel loginLabel = new JLabel(""Login with your Passport Number""); panel.add(loginLabel, c);  c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 1; c.gridy = 1; c.gridwidth = 5; passportNoLogin = new JTextField(20); passportNoLogin.setSize(100, 10); panel.add(passportNoLogin, c);  c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 8; c.gridy = 1; JButton loginAsPassengerButton = new JButton(""Login as Passenger""); loginAsPassengerButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { if (isValidPassenger(passportNoLogin.getText())) { panel.setVisible(false); Passenger p = new Passenger(); p.init(passportNoLogin.getText()); } } }); panel.add(loginAsPassengerButton, c);  c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 1; c.gridy = 2; invalidPassportNoLabel = new JLabel(); panel.add(invalidPassportNoLabel, c);  /** * Admin Login */ c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 0; c.gridy = 3; final JLabel adminLoginLabel = new JLabel(""Login with your Admin ID""); panel.add(adminLoginLabel, c);  c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 1; c.gridy = 3; c.gridwidth = 5; adminIdLogin = new JTextField(20); adminLoginLabel.setSize(100, 10); panel.add(adminIdLogin, c);  c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 8; c.gridy = 3; JButton adminIdLoginButton = new JButton(""Login as Admin""); panel.add(adminIdLoginButton, c); adminIdLoginButton.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { if (adminIdLogin.getText().equals(""j4w9a"") || adminIdLogin.getText().equals(""p7x8"") ||adminIdLogin.getText().equals(""v5e0b"")) { panel.setVisible(false); AdminPanel ap = new AdminPanel(); ap.init(); } } });  /** * Create New Account */ c.fill = GridBagConstraints.HORIZONTAL; c.gridx = 8; c.gridy = 4; JButton createPassengerAccount = new JButton(""Create Passenger Account""); createPassengerAccount.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { panel.setVisible(false); CreatePassenger cp = new CreatePassenger(); cp.init(); } }); panel.add(createPassengerAccount, c);  frame.setVisible(true); } "	0	0	0	0	0	1
@Override public void onPermissionGranted() { final MaterialDialog dialog = ISDialogs.showBuildingRequestDialog (context); IconRequest.get().send(new OnRequestProgress() { @Override public void doWhenStarted() { dialog.show(); }  @Override public void doWhenReady() { dialog.dismiss(); if (mAdapter != null) mAdapter.notifyDataSetChanged(); } }); } 	0	1	0	0	0	0
"private static Boolean checkCOSStringProperty(COSString string, Map<String, Object> properties, String checksRule) { final Object value = properties.get(checksRule); if (value != null) { if (value instanceof String) { return Boolean.valueOf(value.equals(string.getASCII())); } else if (value instanceof Calendar) { // DateConverter can parse as pdf date format as simple date // format final String regex = ""(D:)?(\\d\\d){2,7}(([+-](\\d\\d[']))(\\d\\d['])?)?""; if (string.getASCII().matches(regex)) { final Calendar valueDate = DateConverter.toCalendar(string); return Boolean.valueOf(valueDate != null && valueDate.compareTo((Calendar) value) == 0); } } } return Boolean.FALSE; } "	0	1	0	0	0	0
@Test public void testIsMetByShouldReturnFalseWhenTheCriterionIsUnmet() throws Exception { TimeVisibilityCriterion criterion = new TimeVisibilityCriterion(6, 18); for (int i = 0; i < 12; i++) { Mockito.when(world.getWorldDate()).thenReturn(new Date(1, 1, 1, (i + 18) % 24, 0, 0)); Assert.assertFalse(criterion.isMetBy(observer)); } } 	0	1	0	0	0	0
"public static void insertMessage(List<String> message, List<String> insert, int line, int start, int end) { String lineContent = message.remove(line); if(isTaggedInteractive(lineContent)) { lineContent = lineContent.replace("""", """"); message.add(line, lineContent.substring(0, start)+convertToConsole(insert)+lineContent.substring(end)); return; } // Find interactive lines meant for this message List<String> interactives = new ArrayList<>(); int index = line; while(index < message.size() && isTaggedInteractive(message.get(index))) { interactives.add(message.get(index)); index++; } // Split the line and add the parts int at = line; if(start > 0) { message.add(line, lineContent.substring(0, start)); at++; message.addAll(at, interactives); at += interactives.size(); } message.addAll(at, insert); at += insert.size(); message.addAll(at, interactives); at += interactives.size(); if(end < (lineContent.length()-1)) { message.add(at, lineContent.substring(end)); at++; message.addAll(at, interactives); } } "	1	1	1	1	0	0
"@Test public void test() throws InterruptedException {  //    S._debug_on(TimeExpiredCache.class); OnTimeExpiredCache<String, String> cache = new OnTimeExpiredCache<>(40, 10);  for (int i = 0; i < 100; i++) { cache.put(String.valueOf(i), String.valueOf(i) + ""_str""); }  assertEquals(""12_str"", cache.get(""12"")); Thread.sleep(60); S.echo(cache.get(""12"")); assertNull(cache.get(""12""));  for (int i = 100; i < 200; i++) { cache.put(String.valueOf(i), String.valueOf(i) + ""_str""); }  assertNull(cache.get(""12"")); assertEquals(""122_str"", cache.get(""122"")); Thread.sleep(60); assertNull(cache.get(""12"")); assertNull(cache.get(""122""));  } "	1	0	1	1	1	0
@Override public void run() { alertCallbacks.lowBatteryLevelRequest(); } 	0	0	0	0	0	1
public ClassDefinitionBuilder typeParameter(String name, java.util.List<ProducedType> satisfiedTypes, boolean covariant, boolean contravariant) { ListBuffer<JCExpression> bounds = new ListBuffer<JCExpression>(); for (ProducedType t : satisfiedTypes) { if (!gen.willEraseToObject(t)) { bounds.append(gen.makeJavaType(t)); } } typeParams.append(gen.make().TypeParameter(gen.names().fromString(name), bounds.toList())); typeParamAnnotations.append(gen.makeAtTypeParameter(name, satisfiedTypes, covariant, contravariant)); return this; } 	0	1	0	0	0	0
"@Override public void onReceive(Object obj) throws Exception { if (obj instanceof Event) { Event event = (Event) obj; try { if (""keyword-job-tracking"".equals(event.getName())) {  KeywordJob job = (KeywordJob) event.getSource();  //if (job.getStatus() == AbstractJob.Status.Queued) return;  KeywordProject project = keywordService.get(job.getProjectId());  if (job.getStatus() == AbstractJob.Status.Running) { VMachine jenkinsVM = vmachineService.getSystemVM(project.getTenant(), project.getSpace()); VMachine testVM = vmachineService.get(job.getTestVMachineId()); StringBuilder sb = new StringBuilder(""http://"").append(jenkinsVM.getPublicIp()) .append("":8081/guacamole/#/client/c/vnc_node_"").append(testVM.getPrivateIp()); job.put(""watch_url"", sb.toString()); }  job.put(""project_status"", project.getStatus().toString()); eventController.send(project.getCreator().get(), job);  } else if (""performance-job-tracking"".equals(event.getName())) {  PerformanceJob job = (PerformanceJob) event.getSource();  //Cleanup blod data in this job job.put(""raw_report"", null);  //if (job.getStatus() ==  AbstractJob.Status.Queued) return;  PerformanceProject project = perfService.get(job.getProjectId(),""raw""); job.put(""project_status"", project.getStatus().toString()); job.put(""runningTime"", formater.format(job.getCreatedDate())); eventController.send(project.getCreator().get(), job);  } else if (""upload-job-tracking"".equals(event.getName())) { SeleniumUploadJob job = (SeleniumUploadJob) event.getSource();  //Cleanup blod data in this job job.put(""raw_report"", null);  SeleniumUploadProject project = seleniumUploadService.get(job.getProjectId(),""raw"");  if (job.getStatus() == AbstractJob.Status.Running) { VMachine jenkinsVM = vmachineService.getSystemVM(project.getTenant(), project.getSpace()); VMachine testVM = vmachineService.get(job.getTestVMachineId()); StringBuilder sb = new StringBuilder(""http://"").append(jenkinsVM.getPublicIp()) .append("":8081/guacamole/#/client/c/vnc_node_"").append(testVM.getPrivateIp()); job.put(""watch_url"", sb.toString()); }  job.put(""project_status"", project.getStatus().toString()); eventController.send(project.getCreator().get(), job);  } } catch (Exception e) { e.printStackTrace(); //TODO: should be send error } } } "	1	0	1	0	0	0
@Override public void drawEnergy(double v) { if (getCore() != null) { TileGeneratorCore core = (TileGeneratorCore) getCore(); double convertedPower = convertFromEU(v); core.extractEnergy(null, (int) Math.round(convertedPower), false); worldObj.markBlockForUpdate(coreLocation.x, coreLocation.y, coreLocation.z); } } 	1	0	1	0	1	0
public static void toFQN(SchemaManager schemaManager, SqlNode query) { ArrayList<SqlIdentifier> tableIds = new ArrayList<>(); query.accept(new SqlTableIdentifierFindVisitor(tableIds));  for (SqlIdentifier tableId : tableIds) { List<String> fqn = schemaManager.toFullyQualifiedTableName(tableId.names); tableId.setNames(fqn, null); } } 	0	0	0	0	0	1
public List<ActivityData> findAllForUserWithUnit(User user, String unit) { return getFacade().getAllForUserWithUnit(user.getIdUser(), unit); } 	1	0	1	0	1	0
public static void serializeUserProperties( BackendlessUser user ) { Map<String, Object> serializedProperties = user.getProperties();  Set<Map.Entry<String, Object>> properties = serializedProperties.entrySet(); for( Map.Entry<String, Object> property : properties ) { Object propertyValue = property.getValue(); if( propertyValue != null && !propertyValue.getClass().isArray() && !isBelongsJdk( propertyValue.getClass() ) ) { property.setValue( serializeToMap( propertyValue ) ); } }  user.setProperties( serializedProperties ); } 	0	1	0	0	0	0
"private void initUI(View view) { starProgressBar = (ProgressBar) view.findViewById(R.id.recommend_star_progressbar); starText = (TextView) view.findViewById(R.id.recommend_star); starText.setOnClickListener(this); view.findViewById(R.id.recommend_fork).setOnClickListener(this); skipBtn = view.findViewById(R.id.recommend_skip); skipBtn.setOnClickListener(this); mProgressBar = (ProgressBar) view.findViewById(R.id.repo_progressbar); mProgressBar.setVisibility(View.VISIBLE); TextView notice2 = (TextView) view.findViewById(R.id.recommend_notice2); SpannableString notice2SS = new SpannableString(mContext.getString(R.string.recommend_notice2_part1) + "" "" + mContext.getString(R.string.recommend_notice2_part2)); notice2SS.setSpan(new CustomClickableSpan(), 0, mContext.getString(R.string.recommend_notice2_part1).length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); notice2.setText(notice2SS); notice2.setOnClickListener(this); notice3 = (TextView) view.findViewById(R.id.recommend_notice3); final SpannableString notice3SS = new SpannableString(mContext.getString(R.string.recommend_notice3_part1) + "" "" + mContext.getString(R.string.recommend_notice3_part2)); notice3SS.setSpan(new CustomClickableSpan(), mContext.getString(R.string.recommend_notice3_part1).length(), notice3SS.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); notice3.setText(notice3SS); notice3.setOnClickListener(this);  mWebView = (ProgressWebView) view.findViewById(R.id.recommend_webview);  mEmptyView = (LinearLayout) view.findViewById(R.id.recommend_empty); mEmptyView.setVisibility(View.GONE); if (mParmasMap == null) { mParmasMap = new HashMap(); mParmasMap.put(""userid"", MLUser.getCurrentUser().getUserName()); mParmasMap.put(""page"", page); mParmasMap.put(""per_page"", PER_PAGE); } if (repos == null) { genes = new ArrayList<>(); repos = new ArrayList<>(); getGenes(); } } "	0	0	0	0	0	1
public void doneExpenseItem(View v) throws ParseException{  if (createExpenseItem(v)){ finish(); } } 	1	0	1	1	0	0
"public int transformationOfSourceIntoInteger(Object o) { return Integer.valueOf(o.toString().replaceAll(""\\D+"", """")); } "	0	0	0	0	0	1
"private ServiceResponse convert(Model m, OutputFormat format) { BiopaxConverter biopaxConverter = new BiopaxConverter(blacklist); ServiceResponse toReturn;  if(format != OutputFormat.BIOPAX) { // remove all Pathway objects (these, esp. sub-pathways, are incomplete due to detaching from PC // and ain't really useful for converting to text formats) for(Pathway p : new HashSet<Pathway>(m.getObjects(Pathway.class))) { m.remove(p); } }  if (format==OutputFormat.GSEA) { toReturn = biopaxConverter.convert(m, format, ""uniprot"", false); //uniprot; outside pathway entities } else { toReturn = biopaxConverter.convert(m, format); //default ID type, layout, etc. }  return toReturn; } "	1	0	1	0	1	0
"@Override public ServiceResponse fetch(final OutputFormat format, boolean subPathways, final String... uris) { if(!paxtoolsModelReady()) return new ErrorResponse(MAINTENANCE,""Waiting for the initialization to complete (try later)..."");  // extract/convert a sub-model try { final String[] mappedUris = findUrisByIds(uris);  Set<BioPAXElement> elements = urisToBpes(paxtoolsModel, mappedUris); Model m = autoCompleteAndClone(elements, subPathways);  //name the sub-model - can be useful when converted to GSEA, etc... if(!m.getObjects().isEmpty()) { if(mappedUris.length==1) { String uri = mappedUris[0]; m.setUri(uri); BioPAXElement b = m.getByID(uri); if(b instanceof Named) { m.setName(((Named) b).getDisplayName() + "" "" + ArrayUtils.toString(uris)); } else { m.setName(ArrayUtils.toString(uris)); } } else { String desc = ArrayUtils.toString(uris); m.setUri(""PC_get_"" + desc.hashCode()); m.setName(desc); } }  return convert(m, format); } catch (Exception e) { return new ErrorResponse(INTERNAL_ERROR, e); } } "	1	0	1	0	1	0
public void setPublications(final List<Publication> publications) { this.publications = publications; } 	0	0	0	0	0	1
private int parsePcapFilesAndPutItToTable() throws IOException { Packet packet = decoder.packet(); int networkType = decoder.getNetwork(); while (offset < validBytes) {  if (validBytes - offset < 9000) { System.arraycopy(buffer, 0, buffer, offset, validBytes - offset); validBytes = validBytes - offset; offset = 0;  int n = in.read(buffer, validBytes, buffer.length - validBytes); if (n > 0) { validBytes += n; } }  offset = decoder.decodePacket(buffer, offset, packet);  if (addDataToTable(packet, networkType)) { return 1; } } return 0; } 	1	1	0	1	1	0
"private SparkLauncher prepareSparkConfig(Config config) { String master = config.hasPath(TOPOLOGY_MASTER) ? config.getString(TOPOLOGY_MASTER) : ""local[*]""; String sparkExecutorCores = config.getString(SPARK_EXECUTOR_CORES); String sparkExecutorMemory = config.getString(SPARK_EXECUTOR_MEMORY); String driverMemory = config.getString(DRIVER_MEMORY); String driverCore = config.getString(DRIVER_CORES); String deployMode = config.getString(DEPLOY_MODE); String enable = config.getString(TOPOLOGY_DYNAMICALLOCATION); boolean verbose = config.getBoolean(TOPOLOGY_VERBOSE); String mainClass = config.getString(TOPOLOGY_MAINCLASS); String sparkHome = config.getString(TOPOLOGY_SPARKHOME); String uiport = config.getString(TOPOLOGY_SPARKUIPORT); String appResource = config.getString(TOPOLOGY_APPRESOURCE); String yarnqueue = config.getString(TOPOLOGY_YARNQUEUE);   SparkLauncher sparkLauncher = new SparkLauncher(); sparkLauncher.setMaster(master); sparkLauncher.setMainClass(mainClass); sparkLauncher.setSparkHome(sparkHome); //sparkLauncher.setJavaHome(TOPOLOGY_JAVAHOME); sparkLauncher.setDeployMode(deployMode); sparkLauncher.setVerbose(verbose); sparkLauncher.setAppResource(appResource); sparkLauncher.setAppName(config.getString(TOPOLOGY_NAME)); sparkLauncher.setConf(""spark.yarn.queue"", yarnqueue); sparkLauncher.setConf(""spark.executor.cores"", sparkExecutorCores); sparkLauncher.setConf(""spark.executor.memory"", sparkExecutorMemory); sparkLauncher.setConf(""spark.driver.memory"", driverMemory); sparkLauncher.setConf(""spark.driver.cores"", driverCore); sparkLauncher.setConf(""spark.streaming.dynamicAllocation.enable"", enable); sparkLauncher.setConf(""spark.ui.port"", uiport); String path = config.getString(TOPOLOGY_SPARKCONFFILEPATH); if (StringUtil.isNotBlank(path)) { sparkLauncher.setPropertiesFile(path); }  String batchDuration = config.getString(BATCH_DURATION); String routerTasknum = config.getString(ROUTER_TASK_NUM); String alertTasknum = config.getString(ALERT_TASK_NUM); String publishTasknum = config.getString(PUBLISH_TASK_NUM); String slideDurationsecond = config.getString(SLIDE_DURATION_SECOND); String windowDurationssecond = config.getString(WINDOW_DURATIONS_SECOND); String checkpointPath = config.getString(CHECKPOINT_PATH); String topologyGroupid = config.getString(TOPOLOGY_GROUPID); String autoOffsetReset = config.getString(AUTO_OFFSET_RESET); String restApihost = config.getString(EAGLE_CORRELATION_SERVICE_HOST); String restApiport = config.getString(EAGLE_CORRELATION_SERVICE_PORT); String restApicontext = config.getString(EAGLE_CORRELATION_CONTEXT); sparkLauncher.addAppArgs(batchDuration, routerTasknum, alertTasknum, publishTasknum, slideDurationsecond, windowDurationssecond, checkpointPath, topologyGroupid, autoOffsetReset, restApihost, restApiport, restApicontext); return sparkLauncher; } "	0	0	0	0	0	1
"@Test public final void testIsCompatibleAmmoBuiltinAmmo() throws Exception {  final AmmoWeapon builtInAmmo = new AmmoWeapon("""", """", """", 0, 0, 0.0, HardPointType.ENERGY, 0, Faction.CLAN, null, null, null, 1, 1, 1, null, 0, 0.0, 0, 0.0, 0.0, null); final Ammunition ac20ammo = new Ammunition("""", """", """", 0, 0, 0.0, HardPointType.NONE, 0.0, Faction.CLAN, 10, ""ammotype"", HardPointType.ENERGY, 0.0);  assertFalse(builtInAmmo.isCompatibleAmmo(ac20ammo)); } "	0	0	0	0	0	1
public static List<ServiceResourceInfo> getAllServiceResourceInfos(String type, String componentName) { List<ServiceResourceInfo> serviceInfos = new ArrayList<ServiceResourceInfo>(); for (ComponentConfig cc : getAllComponents()) { if (componentName == null || componentName.equals(cc.getComponentName())) { List<ServiceResourceInfo> ccServiceInfoList = cc.getServiceResourceInfos(); if (UtilValidate.isEmpty(type)) { serviceInfos.addAll(ccServiceInfoList); } else { for (ServiceResourceInfo serviceResourceInfo : ccServiceInfoList) { if (type.equals(serviceResourceInfo.type)) { serviceInfos.add(serviceResourceInfo); } } } } } return serviceInfos; } 	1	0	1	0	1	0
"@Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder;  if (convertView == null) { convertView = mInflater.inflate(R.layout.list_item_layout, null);  holder = new ViewHolder(); holder.text = (TextView) convertView.findViewById(R.id.drinkItem); //holder.img = (ImageView) convertView.findViewById(R.id.drinkImage);  convertView.setTag(holder);  } else { holder = (ViewHolder) convertView.getTag(); }  holder.text.setText(filteredData.get(position).getFormattedName()); holder.text.setInputType(InputType.TYPE_NULL); holder.text.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { String drinkName = ((TextView) v).getText().toString(); for (Drink d : filteredData) { if (d.getName().equals(drinkName)) { Intent intent = new Intent(v.getContext(), OpenRecipeActivity.class); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); intent.putExtra(""ListViewClick"", d); v.getContext().startActivity(intent); } } } });  return convertView; } "	0	0	0	1	1	0
void enableScanningIndicator() { mActivityReference.findViewById(R.id.loading_indicator_layout).setVisibility(View.VISIBLE); } 	0	0	0	0	0	1
"@Before public void setUp() throws Exception { mapper = HadoopDruidIndexerConfig.JSON_MAPPER; mapper.registerSubtypes(new NamedType(HashBasedNumberedShardSpec.class, ""hashed""));  dataRoot = temporaryFolder.newFolder(""data=hear""); outputRoot = temporaryFolder.newFolder(""output"");  for (Map.Entry<String, List<String>> entry: data.entrySet()) { temporaryFolder.newFolder((""data=hear/"" + entry.getKey()).split(""/"")); File dataFile = temporaryFolder.newFile(""data=hear/"" + entry.getKey() + ""/data""); FileUtils.writeLines(dataFile, entry.getValue()); }  HashMap<String, Object> inputSpec = new HashMap<>(); inputSpec.put(""type"", ""partition""); inputSpec.put(""basePath"", dataRoot.getCanonicalPath()); inputSpec.put(""partitionColumns"", ImmutableList.of(""test1"", ""test2""));  config = new HadoopDruidIndexerConfig( new HadoopIngestionSpec( new DataSchema( dataSourceName, mapper.convertValue( inputRowParser, Map.class ), aggs, new UniformGranularitySpec( Granularity.DAY, QueryGranularity.NONE, ImmutableList.of(this.interval) ), mapper ), new HadoopIOConfig( ImmutableMap.copyOf(inputSpec), null, outputRoot.getCanonicalPath() ), new HadoopTuningConfig( outputRoot.getCanonicalPath(), null, null, null, null, null, false, false, false, false, ImmutableMap.of(JobContext.NUM_REDUCES, ""0""), //verifies that set num reducers is ignored false, true, null, true, null ) ) ); config.setShardSpecs( loadShardSpecs(shardInfoForEachSegment) ); config = HadoopDruidIndexerConfig.fromSpec(config.getSchema()); } "	0	0	0	0	0	1
public boolean isThereIncompleteAbrechnung() { BigDecimal totalBrutto = incompleteAbrechnungsTotals.get(0); return totalBrutto.signum() > 0; } 	1	1	1	1	0	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_create_mood); completeButton = (Button) findViewById(R.id.saveButton); date = new DatePickerEditText(this, R.id.dateField); emotionSpinner = (Spinner) findViewById(R.id.emotionSpinner); etTrigger = (EditText) findViewById(R.id.triggerField); socialSituationSpinner = (Spinner) findViewById(R.id.spinner); saveLocation = (CheckBox) findViewById(R.id.saveLocation);  currentLocation = (TextView) findViewById(R.id.currentLocation);  Button addPhoto = (Button) findViewById(R.id.addPhoto); imageView = (ImageView) findViewById(R.id.imageView); //        imageView.setVisibility(View.GONE); //        s = """";  Mood mood = (Mood) getIntent().getSerializableExtra(""mood""); //Changes the fields to the selected mood etTrigger.setText(mood.getTrigger()); Date tempDate = (Date) mood.getMoodDate(); latitude = mood.getLatitude(); longitude = mood.getLongitude();  //not sure how to properly display location stuff using string resource //        currentLocation.setText(getString(R.string.display_location, mood.getLatitude(), mood.getLongitude())); currentLocation.setText(""Lat: "" + mood.getLatitude() + "" Long: "" + mood.getLongitude());  //tempDate.setYear(tempDate.getYear() + 1900); Log.d(""Date"", tempDate.toString()); date.setDate(tempDate.getYear()+1900, tempDate.getMonth(), tempDate.getDate()); //disgusting single line way to set the spinners //Taken from http://stackoverflow.com/questions/2390102/how-to-set-selected-item-of-spinner-by-value-not-by-position emotionSpinner.setSelection(((ArrayAdapter<String>) emotionSpinner.getAdapter()) .getPosition(mood.getEmotionState())); socialSituationSpinner.setSelection(((ArrayAdapter<String>) socialSituationSpinner .getAdapter()).getPosition(mood.getSocialSituation()));  s = mood.getPhoto();  if (mood.getPhoto().equals("""")){ imageView.setVisibility(View.GONE); imageView.setImageBitmap(null); s = """";  } else { //s = mood.getPhoto(); final byte[] imageBytes = Base64.decode(mood.getPhoto(), Base64.DEFAULT); final Bitmap decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length); imageView.setImageBitmap(decodedImage); }  /** * Saves all information stored in the activity and binds it to a mood. */ completeButton.setOnClickListener(new View.OnClickListener() { public void onClick(View v) {  //Spinner class will return a textview when you use getSelectedView(), allows for easy setError TextView errorText = (TextView) emotionSpinner.getSelectedView();  if (errorCheck(errorText, etTrigger)) { newMood = new Mood(); newMood.setEmotionState(emotionSpinner.getSelectedItem().toString()); String username = getIntent().getStringExtra(""username""); newMood.setMaker(username); newMood.setMoodDate(date.getDate()); newMood.setTrigger(etTrigger.getText().toString().trim()); newMood.setLatitude(latitude); newMood.setLongitude(longitude);  if(socialSituationSpinner.getSelectedItem().toString().equals(""Select a social situation"")){ newMood.setSocialSituation(""""); } else{ newMood.setSocialSituation(socialSituationSpinner.getSelectedItem().toString()); }  //keep the original image //                    if(decodedImage!=null && s == """"){ //                        ByteArrayOutputStream stream = new ByteArrayOutputStream(); //                        decodedImage.compress(Bitmap.CompressFormat.PNG, 100, stream); //                        byteArray = stream.toByteArray(); //                        s = Base64.encodeToString(byteArray, Base64.DEFAULT); //                    } newMood.setPhoto(s); Intent returnCreateMoodIntent = new Intent(); returnCreateMoodIntent.putExtra(""mood"", newMood); setResult(RESULT_OK, returnCreateMoodIntent); finish(); } } });  /** * This toggle when clicked saves the current location. */ saveLocation.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if(saveLocation.isChecked()) { GPSTracker gps = new GPSTracker(EditMoodActivity.this); LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);  if (locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) { Log.d(""UserLocation"", ""latitude:"" + gps.getLatitude() + "", longitude: "" + gps.getLongitude());  //sometimes only round to 3 decimals, I think it has to do with the //how the round function calculates latitude = Math.round(gps.getLatitude() * 10000d)/10000d; longitude = Math.round(gps.getLongitude() * 10000d)/10000d;  if(latitude == 0 & longitude == 0){ Toast.makeText(EditMoodActivity.this, ""Could not find your location, please try again!"", Toast.LENGTH_LONG).show(); } }  else{ Toast.makeText(EditMoodActivity.this, ""Please turn on GPS for locations!"", Toast.LENGTH_LONG).show(); } } else{ //NaN breaks the app when you undo location selection and complete mood creation //                    latitude = NaN; //                    longitude = NaN; latitude = 0.0; longitude = 0.0;  } } });  addPhoto.setOnClickListener(new View.OnClickListener() {  @Override public void onClick(View v) { Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE); startActivityForResult(cameraIntent, 3); imageView.setVisibility(View.VISIBLE); } }); } "	0	0	0	0	0	1
"static void objectArgument(final Tree.ObjectArgument that, final GenerateJsVisitor gen) { final Class c = (Class)that.getDeclarationModel().getTypeDeclaration();  gen.out(""(function()""); gen.beginBlock(); gen.out(""//ObjectArgument "", that.getIdentifier().getText()); gen.location(that); gen.endLine(); gen.out(GenerateJsVisitor.function, gen.getNames().name(c), ""()""); gen.beginBlock(); gen.instantiateSelf(c); gen.referenceOuter(c); Tree.ExtendedType xt = that.getExtendedType(); final Tree.ClassBody body = that.getClassBody(); final Tree.SatisfiedTypes sts = that.getSatisfiedTypes();  final List<Declaration> superDecs = new ArrayList<Declaration>(3); if (!gen.opts.isOptimize()) { new GenerateJsVisitor.SuperVisitor(superDecs).visit(that.getClassBody()); } TypeGenerator.callSupertypes(sts == null ? null : TypeUtils.getTypes(sts.getTypes()), xt == null? null : xt.getType(), c, that, superDecs, xt == null ? null : xt.getInvocationExpression(), xt == null ? null : c.getParameterList(), gen);  body.visit(gen); gen.out(""return "", gen.getNames().self(c), "";""); gen.endBlock(false, true); //Add reference to metamodel gen.out(gen.getNames().name(c), "".$crtmm$=""); TypeUtils.encodeForRuntime(c, null, gen); gen.endLine(true);  TypeGenerator.typeInitialization(xt, sts, c, new GenerateJsVisitor.PrototypeInitCallback() { @Override public void addToPrototypeCallback() { gen.addToPrototype(that, c, body.getStatements()); } }, gen, null); gen.out(""return "", gen.getNames().name(c), ""(new "", gen.getNames().name(c), "".$$);""); gen.endBlock(); gen.out(""())""); } "	0	0	0	0	0	1
public void decrementPoints(){ for(int i = 0; i < curvePoints.length; i++){ Vector3f vec = curvePoints[i]; curvePoints[i] = vec.setY(curvePoints[i].getY() - 1f); } } 	1	1	0	1	1	0
"public synchronized ExecutorService getExecutorService() { if (executorService == null) { executorService = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(), Util.threadFactory(""OkHttp Dispatcher"", false)); } return executorService; } "	0	0	0	0	0	1
@Override public boolean isValid() { Boolean valid = (_alleleValidator == Equality.TRUE && _alleleSeqValidator == Equality.TRUE) ? Boolean.TRUE : _valid;  if (valid == null) { final ISeq<A> alleles = toSeq().map(Gene::getAllele); valid = _alleleSeqValidator.test(alleles) && alleles.forAll(_alleleValidator); }  return _valid = valid; } 	0	0	0	0	0	1
@Override public void onRstStreamRead(ChannelHandlerContext ctx, int streamId, long errorCode) throws Http2Exception { handler.onRstStreamRead(streamId); } 	1	0	1	0	1	0
@Override public void error(SAXParseException exception) throws SAXException { try { this.reportError(exception.getMessage(), XMLParserSettings.FAIL_ON_SAX_NON_FATAL_ERRORS); } catch (RDFParseException rdfpe) { throw new SAXException(rdfpe); } } 	1	0	1	0	1	0
public FatalResourceException handleException(String message, Throwable t) { if(t instanceof AmazonServiceException) { AmazonServiceException ase = (AmazonServiceException)t; ase.getErrorType(); if(ase.getStatusCode() == 400) { String msg = getErrorMessage(message, false); log.warn(msg, t); handleStatusTracker(StatusTracker.Status.Alert); return new FatalServerException(pdelayData.coord, msg, t); } try { retry(message, t); return null; }catch(Exception e) { String msg = getErrorMessage(message, true); log.warn(msg, t); FatalTimeoutException ftoe = new FatalServerTimeoutException(pdelayData.coord, msg, t); ftoe.setMaxDelay(pdelayData.maxDelay); ftoe.setMaxRetries(pdelayData.maxRetries); ftoe.setTotalWaitTime(StrH.scaleMilliSeconds(totalTime.get())); handleStatusTracker(StatusTracker.Status.Error); return ftoe; } }  if(t instanceof AmazonClientException) { AmazonClientException ace = (AmazonClientException)t; if(ace.isRetryable()) { try { retry(message, t); return null; }catch(Exception e) { String msg = getErrorMessage(message, false); log.warn(msg, t); FatalTimeoutException ftoe = new FatalServerTimeoutException(pdelayData.coord, msg, t); ftoe.setMaxDelay(pdelayData.maxDelay); ftoe.setMaxRetries(pdelayData.maxRetries); ftoe.setTotalWaitTime(StrH.scaleMilliSeconds(totalTime.get())); handleStatusTracker(StatusTracker.Status.Error); return ftoe; } } String msg = getErrorMessage(message, false); log.warn(msg, t); handleStatusTracker(StatusTracker.Status.Alert); return new FatalClientException(pdelayData.coord, msg, t); } if(t instanceof IllegalArgumentException) { String msg = getErrorMessage(message, false); log.warn(msg, t); handleStatusTracker(StatusTracker.Status.Alert); return new FatalClientException(pdelayData.coord, msg, t); } if(t instanceof InterruptedException) { String msg = getErrorMessage(message, false); log.warn(msg, t); handleStatusTracker(StatusTracker.Status.Error); return new FatalInterruptedException(pdelayData.coord, msg, t); } String msg = getErrorMessage(message, false); log.warn(msg, t); handleStatusTracker(StatusTracker.Status.Alert); return new FatalClientException(pdelayData.coord, msg, t); } 	0	1	0	0	0	0
"@Override public E remove(int index) { throw new UnsupportedOperationException(""Can't mofidy the OneList""); } "	0	0	0	0	0	1
public void installYamlFilesFromPackage(Archive archive, Session session) throws Exception; 	0	0	0	0	0	1
public void setUserSpinner() { User director = mSchool.getDirector();  if (director == null) return;  for (int i = 0; i < mUsers.size(); i++) if (mUsers.get(i).getId() == director.getId()) mDirector.setSelection(i); } 	1	1	1	0	1	0
"public static long parseEpisodeReleaseDate(@Nullable Context context, @NonNull ZoneId showTimeZone, @Nullable String releaseDate, @NonNull LocalTime showReleaseTime, @Nullable String showCountry, @Nullable String showNetwork, @NonNull String deviceTimeZone) { if (releaseDate == null || releaseDate.length() == 0) { return Constants.EPISODE_UNKNOWN_RELEASE; }  // get date LocalDate localDate; try { localDate = LocalDate.parse(releaseDate); } catch (IllegalArgumentException e) { // date string could not be parsed if (context != null) { Utils.trackCustomEvent(context, AnalyticsTree.CATEGORY_THETVDB_ERROR, ""Date parsing failure"", releaseDate); } Timber.e(e, ""TheTVDB date could not be parsed: %s"", releaseDate); return Constants.EPISODE_UNKNOWN_RELEASE; }  // set time LocalDateTime localDateTime = localDate.atTime(showReleaseTime);  localDateTime = handleHourPastMidnight(showCountry, showNetwork, localDateTime);  // get a valid datetime in the show time zone, this auto-forwards time if inside DST gap ZonedDateTime dateTime = localDateTime.atZone(showTimeZone);  // handle time zone effects on release time for US shows (only if device is set to US zone) if (deviceTimeZone.startsWith(TIMEZONE_ID_PREFIX_AMERICA)) { dateTime = applyUnitedStatesCorrections(showCountry, deviceTimeZone, dateTime); }  return dateTime.toInstant().toEpochMilli(); } "	0	0	0	0	0	1
"@Override protected Void doInBackground(Void... params) { teamEventMatchesParsers.fetchJSON(""frc"" + teamNumber, eventKey, getContext()); while (teamEventMatchesParsers.parsingComplete) ; teamEventMatches.clear(); teamEventMatches.addAll(teamEventMatchesParsers.getTeamEventMatches()); Collections.sort(teamEventMatches); return null; } "	0	0	0	0	0	1
private void populateUI() { listDataChild = new ArrayList<>(); ArrayList<Device> devices = backendInteractor.getDevices(); for (Device device : devices) { Activator activator = device.getToggle(); HestiaSwitch hestiaSwitch = new HestiaSwitch(device, activator, getActivity()); DeviceBar bar = new DeviceBar(device, hestiaSwitch); if(!listDataChild.contains(bar)) { if (!typeExists(device)) { listDataChild.add(new ArrayList<DeviceBar>()); listDataChild.get(listDataChild.size() - 1).add(bar); } else { listDataChild.get(getDeviceType(device)).add(bar); } }  } listAdapter.setListData(listDataChild); expListView.setAdapter(listAdapter); } 	0	1	0	0	0	0
@Override protected FindSpikesRenderer createRenderer(@NonNull BaseFragment fragment, @NonNull float[] preparedBuffer) { final FindSpikesRenderer renderer = new FindSpikesRenderer(fragment, preparedBuffer); renderer.setCallback(new FindSpikesRenderer.CallbackAdapter() {  @Override public void onThresholdUpdate(@ThresholdOrientation final int threshold, final int value) { // we need to call it on UI thread because renderer is drawing on background thread if (getActivity() != null) { getActivity().runOnUiThread(new Runnable() { @Override public void run() { setThreshold(threshold, value); } }); } }  @Override public void onDraw(final int drawSurfaceWidth, final int drawSurfaceHeight) { // we need to call it on UI thread because renderer is drawing on background thread if (getActivity() != null) { getActivity().runOnUiThread(new Runnable() { @Override public void run() { if (getAudioService() != null) { setMilliseconds(drawSurfaceWidth / getAudioService().getSampleRate() * 1000 / 2); }  setMillivolts( (float) drawSurfaceHeight / 4.0f / 24.5f / 1000 * BYBConstants.millivoltScale); } }); } }  @Override public void onHorizontalDragStart() { startSeek(); }  @Override public void onHorizontalDrag(float dx) { int progress = (int) (sbAudioProgress.getProgress() - dx); if (progress < 0) progress = 0; if (progress > sbAudioProgress.getMax()) progress = sbAudioProgress.getMax(); final int finalProgress = progress; sbAudioProgress.post(new Runnable() { @Override public void run() { seek(finalProgress); sbAudioProgress.setProgress(finalProgress); } }); }  @Override public void onHorizontalDragEnd() { stopSeek(); } }); return renderer; } 	0	1	0	0	0	0
@Keep public void onEventMainThread(Finished ev) { Serializable dataType = ev.getIntent().getSerializableExtra(GerritService.DATA_TYPE_KEY); if (ev.getItems() < 1 && dataType == GerritService.DataType.Comment) { // Commented successfully, remove comment from cache and go back to the change details if (mParent instanceof ReviewActivity) { ((ReviewActivity) mParent).onCommented(mCacheKey, mChangeId); } } } 	1	1	1	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); ButterKnife.inject(this); setSupportActionBar(mToolbar);  ParseUser currentUser = ParseUser.getCurrentUser(); if (currentUser != null) { memberStartHome(); }  //login is invisible by default toggleLogin();  mGuest.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v){ guestStartHome(); } });  mMember.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v){ toggleLogin(); } });  mBack.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { toggleLogin(); } });  mForgotPassword.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View v){ if(mEmail.getText().length() == 0){ String msg = ""Please enter your email then press \""forgot password\""""; Toast toast = Toast.makeText(getApplicationContext(), msg, Toast.LENGTH_LONG); toast.show(); } else{ ParseUser.requestPasswordResetInBackground(mEmail.getText().toString(), new RequestPasswordResetCallback() { @Override public void done(ParseException e) { if(e != null){ //display error message Toast.makeText(MainActivity.this, e.getMessage(), Toast.LENGTH_LONG).show(); } else{ //display ""reset password"" email sent confirmation String resetConfirmation = ""A reset password link has been send to your email""; Toast.makeText(MainActivity.this, resetConfirmation, Toast.LENGTH_LONG).show(); } } }); } } });  mSubmitLogin.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { boolean validationError = validate(); //no error -> login user if(!validationError){ //Set up a progress dialog final ProgressDialog dlg = new ProgressDialog(MainActivity.this); dlg.setTitle(""Please wait.""); dlg.setMessage(""Signing Up. Please wait.""); dlg.show();  //call the Parse login method ParseUser.logInInBackground(mEmail.getText().toString(), mPassword.getText().toString(), new LogInCallback() { @Override public void done(ParseUser parseUser, ParseException e) { dlg.dismiss(); if(e != null){ //display error message Toast.makeText(MainActivity.this, e.getMessage(), Toast.LENGTH_LONG).show(); }  else{ //start the home activity as an ewb member memberStartHome(); } } });  }  } });  } "	0	0	0	0	0	1
@Override public Object[] getChildren(Object parentElement) { List<Object> result = new ArrayList<Object>(); if (parentElement instanceof TextOnlyNode && ((TextOnlyNode) parentElement).getType() == NodeType.INSTANCE_REFERENCED_BY) { reqToAsilMap.clear(); if (input instanceof FaultFailurePort) { FaultFailurePort failurePort = (FaultFailurePort) input; ECrossReferenceAdapter adapt = ECrossReferenceAdapterFactory.INSTANCE.adapt(failurePort); Collection<Setting> inverseReferences = adapt.getInverseReferences(failurePort); for (Setting setting : inverseReferences) { EObject eObject = setting.getEObject(); if (eObject instanceof FaultFailure_anomaly) { FaultFailure_anomaly failure = (FaultFailure_anomaly) eObject; EObject faultFailure = failure.eContainer(); ECrossReferenceAdapter failAdapt = ECrossReferenceAdapterFactory.INSTANCE.adapt(faultFailure); Collection<Setting> failReferenced = failAdapt.getInverseReferences(faultFailure); for (Setting failRef : failReferenced) { EObject eob = failRef.getEObject(); if (eob instanceof SafetyConstraint) { SafetyConstraint constraint = (SafetyConstraint) eob; ASILKind asilValue = constraint.getAsilValue(); List<TextOnlyNode> asils = reqToAsilMap.get(failure); if (asils == null) { asils = new ArrayList<>(); } asils.add(new TextOnlyNode(asilValue.getName(), NodeType.REFERENCES)); reqToAsilMap.put(faultFailure, asils); } } result.add(faultFailure); } }  } } if (parentElement instanceof FaultFailure) { if (reqToAsilMap.containsKey(parentElement)) { return reqToAsilMap.get(parentElement).toArray(); } }  return result.toArray(); } 	1	1	1	0	1	0
"private List<Post> getPostsPerCalamity(int calamityId) throws SQLException, ParseException, NoSuchAlgorithmException { List<Post> posts = new ArrayList<>();  String query = ""SELECT p.ID, p.UserID, p.Text FROM Post p INNER JOIN CalamityPost cp ON p.ID = cp.PostID WHERE cp.CalamityID = ?;"";  List<Object> parameters = new ArrayList<>(); parameters.add(calamityId);  try (ResultSet rs = database.executeQuery(query, parameters, Database.QueryType.QUERY)) { while (rs.next()) { int id = rs.getInt(1); int userId = rs.getInt(2); String text = rs.getString(3);  User user = new UserRepo(database).getUserById(id);  posts.add(new Post(id, user, text)); } }  return posts; } "	0	0	0	1	1	0
"@Override public void filter(ContainerRequestContext requestContext) throws IOException { MultivaluedMap<String, String> headers = requestContext.getHeaders(); if (!headers.containsKey(USERNAME) || !containsRole(headers)) { requestContext.abortWith(Response.status(Status.UNAUTHORIZED).build()); logger.severe(""Invalid request:"" + headers); return; } String path = requestContext.getUriInfo().getPath(); String username = headers.getFirst(USERNAME); Set<String> roles = null; logger.info(""Authenticated request for path:"" + path + "" from user:"" + username + "" method:"" + requestContext.getRequest().getMethod().toLowerCase()); if (path.startsWith(""perf"")) { roles = new HashSet<>(); roles.add(ACLConstants.READER_ROLE); } else if (path.startsWith(TENANTS) && requestContext.getRequest().getMethod().toLowerCase().equals(""post"")) { // do nothing } else if (path.equals(TENANTS) && requestContext.getRequest().getMethod().toLowerCase().equals(""get"")) { roles = new HashSet<>(); for (Entry<String, List<String>> entry : headers.entrySet()) { if (entry.getKey().startsWith(ROLE_PREFIX)) { roles.add(ACLConstants.READER_ROLE); } } } else { String tenantId = path.split(""/"")[2]; for (Entry<String, List<String>> entry : headers.entrySet()) { if (entry.getKey().startsWith(ROLE_PREFIX)) { String[] splits = entry.getKey().split(ROLE_TENANT_SEPARATOR); if (splits.length == 2 && tenantId.equalsIgnoreCase(splits[1])) { roles = new HashSet<>(entry.getValue()); } } } } if (headers.containsKey(USER_GROUP)) { Set<String> groups = new HashSet<>(headers.get(USER_GROUP)); if (groups.contains(SUPERADMIN_GROUP)) { if(roles==null) { roles = new HashSet<>(); } roles.add(ACLConstants.SUPER_ADMIN_ROLE); } } if (roles == null || roles.isEmpty()) { requestContext.abortWith(Response.status(Status.UNAUTHORIZED).build()); logger.severe(""Request not authorized, roles are empty. Headers:"" + headers); return; } requestContext.setSecurityContext(new BapiSecurityContext(username, roles)); } "	1	0	1	1	0	0
"@Override public int complete(final String buffer, final int cursor, final List candidates) { int p = buffer.lastIndexOf(' '); final String toComplete; if (p > -1 && ++p < buffer.length()) { toComplete = buffer.substring(p); } else { toComplete = buffer; p = 0; } //            System.out.println(""\nbuffer: '"" + toComplete + ""'; cursor: "" + cursor); final Set<String> set = completitions.tailSet(toComplete); if (set != null && set.size() > 0) { for (final String next : completitions.tailSet(toComplete)) { if (next.startsWith(toComplete)) { candidates.add(next); } } } return p + 1; } "	1	0	1	0	0	0
"public static int calculateExpression(String expression) { return calculateExpression(expression.split("" "")); } "	0	0	0	0	0	1
protected Converter getResponseDataConverter() { Gson gson = new GsonBuilder()  // Set our naming policy to transform underscores <-> camelCase .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES) .registerTypeAdapter(DateTime.class, new JodaDateTimeAdapter()) .registerTypeAdapterFactory(new RobinTypeAdapterFactory()) .registerTypeAdapter(Urn.class, new UrnAdapter()) .registerTypeAdapter(Account.Reference.class, new AccountReferenceAdapter()) .serializeNulls()  .create();  return new GsonConverter(gson); } 	0	0	0	0	0	1
"@GET @Path(""/invitation/{calendarId}/{calType}/{eventId}/{inviter}/{invitee}/{eXoId}/{answer}"") public Response processInvitationReply(@PathParam(""calendarId"") String calendarId, @PathParam(""calType"") String calType, @PathParam(""eventId"") String eventId, @PathParam(""inviter"") String inviter, @PathParam(""invitee"") String invitee, @PathParam(""eXoId"") String eXoId, @PathParam(""answer"") String answer, @Context HttpHeaders headers, @QueryParam(""lang"") String language) throws Exception { try { if(getCalendarService() instanceof Response) { return (Response) getCalendarService(); }  ExoContainer container = ExoContainerContext.getCurrentContainer(); String userId = eXoId.equals(""null"") ? null : eXoId; int ans = Integer.parseInt(answer);  Locale locale = Locale.ENGLISH; List<Locale> acceptableLanguages = headers.getAcceptableLanguages(); if(!acceptableLanguages.isEmpty()) { locale = acceptableLanguages.get(0); }  if(language != null && !language.isEmpty()) { locale = LocaleContextInfo.getLocale(language); } else if(userId != null) { OrganizationService organizationService = (OrganizationService)container.getComponentInstanceOfType(OrganizationService.class); UserProfile profile = organizationService.getUserProfileHandler().findUserProfileByName(userId); language = profile == null ? null : profile.getAttribute(""user.language""); if(language != null && !language.isEmpty()) { locale = LocaleContextInfo.getLocale(language); } } ResourceBundleService resourceBundleService = (ResourceBundleService)container.getComponentInstanceOfType(ResourceBundleService.class); ResourceBundle resource = resourceBundleService.getResourceBundle(""locale.rest.calendar.CalendarRest"", locale);  // save invitation status calendarService.confirmInvitation(inviter, invitee, userId, Integer.parseInt(calType), calendarId, eventId, ans);  String title = null; String message = null; String messageKey = """"; String defaultMessage = """"; switch (ans) { case Utils.ACCEPT: messageKey = ""rest.invitation.answer.accept""; defaultMessage = ""You have accepted invitation from {0}""; //response.append(""You have accepted invitation from "" + inviter); break; case Utils.DENY: messageKey = ""rest.invitation.answer.deny""; defaultMessage = ""You have refused invitation from {0}""; //response.append(""You have refused invitation from "" + inviter); break; case Utils.NOTSURE: messageKey = ""rest.invitation.answer.notsure""; defaultMessage = ""You have answered invitation from {0}: Not sure!""; //response.append(""You have answered invitation from "" + inviter + "" : Not sure!""); break; }  try { title = resource.getString(""rest.invitation.answer.title""); } catch (Exception ex) { title = ""Invitation Answer""; } try { message = resource.getString(messageKey); } catch (Exception ex) { message = defaultMessage; } message = message.replace(""{0}"", inviter);  StringBuffer response = new StringBuffer(); response.append(""<html><head><title>""); response.append(title); response.append(""</title></head>""); response.append(""<body>""); response.append(message); response.append(""</body></html>""); return Response.ok(response.toString(), MediaType.TEXT_HTML).cacheControl(cc).build(); } catch (Exception e) { if(log.isDebugEnabled()) log.debug(e.getMessage()); return Response.status(HTTPStatus.INTERNAL_ERROR).cacheControl(cc).build(); } } "	0	0	0	0	0	1
"public static long getTotalPhysicalMemory() { try { OperatingSystemMXBean o = (OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean(); return o.getTotalPhysicalMemorySize(); } catch(Throwable t) { HMCLog.warn(""Failed to get total physical memory size"", t); return -1; } } "	0	0	0	1	1	0
public int getY() { return mY; } 	0	0	0	0	0	1
public Node updateResource(Node node, RegalObject object) { new Index().remove(node); overrideNodeMembers(node, object); Globals.fedora.updateNode(node); updateIndex(new Read().readNode(node.getPid())); return node; } 	1	1	1	0	1	0
"public void updateCGDProcessForMonographs(Integer batchSize) throws IOException, SolrServerException { logger.info(""Start"");  matchingAlgorithmUtil.populateMatchingCounter();  ExecutorService executorService = getExecutorService(50); List<Callable<Integer>> callables = new ArrayList<>(); long countOfRecordNum = reportDataDetailsRepository.getCountOfRecordNumForMatchingMonograph(RecapConstants.BIB_ID); logger.info(""Total Records : "" + countOfRecordNum); int totalPagesCount = (int) Math.ceil(countOfRecordNum / batchSize); logger.info(""Total Pages : "" + totalPagesCount); for(int pageNum = 0; pageNum < totalPagesCount + 1; pageNum++) { Callable callable = new MatchingAlgorithmCGDCallable(reportDataDetailsRepository, bibliographicDetailsRepository, pageNum, batchSize, producerTemplate, getCollectionGroupMap(), getInstitutionEntityMap(), itemChangeLogDetailsRepository, collectionGroupDetailsRepository); callables.add(callable); } Map<String, List<Integer>> unProcessedRecordNumberMap = executeCallables(executorService, callables);  List<Integer> nonMonographRecordNums = unProcessedRecordNumberMap.get(""NonMonographRecordNums""); List<Integer> exceptionRecordNums = unProcessedRecordNumberMap.get(""ExceptionRecordNums"");  matchingAlgorithmUtil.updateMonographicSetRecords(nonMonographRecordNums, batchSize);  matchingAlgorithmUtil.updateExceptionRecords(exceptionRecordNums, batchSize);  matchingAlgorithmUtil.saveCGDUpdatedSummaryReport();  logger.info(""PUL Final Counter Value: "" + MatchingCounter.getPulSharedCount()); logger.info(""CUL Final Counter Value: "" + MatchingCounter.getCulSharedCount()); logger.info(""NYPL Final Counter Value: "" + MatchingCounter.getNyplSharedCount());  DestinationViewMBean updateItemsQ = jmxHelper.getBeanForQueueName(""updateItemsQ"");  while (updateItemsQ.getQueueSize() != 0) { //Waiting for the updateItemQ messages finish processing }  executorService.shutdown(); } "	0	0	0	0	0	1
"private String[] getSvnUriInfo(String str) { String[] res = new String[]{""Unknown"", ""Unknown""}; String path = str; int index = path.indexOf(""trunk""); if (index > -1) { res[0] = path.substring(0, index - 1); res[1] = ""trunk""; } else { index = path.indexOf(""branches""); if (index > -1) { res[0] = path.substring(0, index - 1); int branchIndex = index + ""branches"".length() + 1; index = path.indexOf(""/"", branchIndex); if (index > -1) { res[1] = path.substring(branchIndex, index); } else { res[1] = path.substring(branchIndex); } } } return res; } "	1	1	1	1	0	0
public static byte[] encode(Object input) { Value val = new Value(input); if (val.isList()) { List<Object> inputArray = val.asList(); if (inputArray.isEmpty()) { return encodeLength(inputArray.size(), OFFSET_SHORT_LIST); } byte[] output = ByteUtil.EMPTY_BYTE_ARRAY; for (Object object : inputArray) { output = concatenate(output, encode(object)); } byte[] prefix = encodeLength(output.length, OFFSET_SHORT_LIST); return concatenate(prefix, output); } else { byte[] inputAsBytes = toBytes(input); if (inputAsBytes.length == 1 && (inputAsBytes[0] & 0xff) <= 0x80) { return inputAsBytes; } else { byte[] firstByte = encodeLength(inputAsBytes.length, OFFSET_SHORT_ITEM); return concatenate(firstByte, inputAsBytes); } } } 	1	0	1	1	1	0
"private Issue createTestIssue01(URL url) throws ParseException { Issue result = new Issue(url, TrackerType.JIRA);  result.setTrackerId(""1111111""); result.setSummary(""Test Issue""); result.setCreationTime(new SimpleDateFormat(JiraFields.DATE_STRING_FORMAT) .parse(""2013-01-17T00:12:31.000-0500"")); result.setAssignee(new User(""jboss-set@redhat.com"", ""jboss-set"")); result.setDescription(""Test jira""); result.setStatus(IssueStatus.NEW); result.setPriority(IssuePriority.MAJOR); result.setComponents(Collections.singletonList(""CLI"")); result.setProduct(""EAP""); result.setType(org.jboss.set.aphrodite.domain.IssueType.BUG);  List<Release> releases = new ArrayList<>(); releases.add(new Release(""6.4.5"")); result.setReleases(releases);  result.setDependsOn(Collections.emptyList()); result.setBlocks(Collections.emptyList()); result.setEstimation(new IssueEstimation(8.0, 8.0));  Stage issueStage = new Stage(); issueStage.setStatus(Flag.DEV, FlagStatus.ACCEPTED); issueStage.setStatus(Flag.QE, FlagStatus.ACCEPTED); issueStage.setStatus(Flag.PM, FlagStatus.ACCEPTED);  result.setStage(issueStage);  return result; } "	1	1	1	1	0	0
"public String getDataDir(String dbName) { return dataDirs[dbName.hashCode() % dataDirs.length] + ""/"" + dbName; } "	1	0	1	0	0	0
@Override public void dropDatabase(String dbName) throws Exception { synchronized (databaseMap) { databaseMap.remove(dbName); MiscUtils.delete(new File(dbMetadataDirectoryPath(dbName))); } } 	0	1	0	0	0	0
@Test public void varArgsAllOfByName() { assertThat( scanner.getNamesOfClassesWithMetaAnnotationsAllOf(MetaAnnotation.class.getName(), NonMetaAnnotation.class.getName())) // .containsExactly(MetaAndNonMetaAnnotatedClass.class.getName()); } 	0	0	0	0	0	1
"public static synchronized File getTempBufferDir(Configuration conf) { String[] dataDirs = conf.get(""dfs.datanode.data.dir"", ""file:///tmp/"").split("",""); double maxUsage = Double.MIN_VALUE; int n = 0; for(int i=0; i<dataDirs.length; i++) { File file = new File(new Path(dataDirs[i].trim()).toUri().getPath()); double diskUsage = 1.0 * (file.getTotalSpace() - file.getFreeSpace()) / file.getTotalSpace(); if (diskUsage > maxUsage) { n = i; maxUsage = diskUsage; } }  // skip the disk whose free space is most not enough, and pick one randomly from the last disks. int idx; if (dataDirs.length == 1) { idx = 0; } else { while (true) { int i = Math.abs(new Random(System.currentTimeMillis()).nextInt()) % dataDirs.length; if (i != n) { idx = i; break; } } }  String diskPath = new Path(dataDirs[idx].trim()).toUri().getPath(); LOG.debug(""choose oss buffer dir: ""+diskPath); return new File(diskPath, ""data/oss""); } "	0	1	0	0	0	0
private void removeFromGrid() {  markForRegen(); for (ForgeDirection d : ForgeDirection.VALID_DIRECTIONS) _network.removeNode(new BlockPosition(xCoord, yCoord, zCoord, d).step(d)); _network.removeConduit(this); _network = null; } 	0	1	0	0	0	0
"protected void addDateOptions(String type) { // Determine current state of combobox switch (type) { case ""Date/Time"": setSecondBox(new String[]{ ""dd-MM-yyyy HH:mm"", ""dd-MM-yyyy HH:mm:ss"", ""dd/MM/yyyy HH:mm"", ""dd/MM/yyyy HH:mm:ss"", ""Excel epoch""}); break; case ""Date"": setSecondBox(new String[]{""dd/MM/yyyy"", ""dd/MM/yy"", ""dd-MM-yyyy"", ""dd-MM-yy"", ""yyMMdd"", ""Excel epoch""}); break; case ""Time"": setSecondBox(new String[]{""HH:mm"", ""HHmm""}); break; default: break; } } "	0	0	0	0	0	1
@Override public void characters(char[] ch, int start, int length) throws SAXException { String input = new String(ch); if (nameBool) { name = input.substring(start, start + length); } else if (primaryBool) { primary = input.substring(start, start + length); } else if (delimiterBool) { delimiter = input.substring(start, start + length); } else if (fileBool) { files.add(input.substring(start, start + length)); } } 	0	1	0	0	0	0
"@SuppressWarnings(""unchecked"") public static String convertValueToString(Object value, boolean appendInnerQueryParenthesis, boolean typeConvert) { if (value == null) { return ""NULL""; } else { String stringVal; if (typeConvert) { TypeConverter typeConverter = FlowManager.getTypeConverterForClass(value.getClass()); if (typeConverter != null) { value = typeConverter.getDBValue(value); } }  if (value instanceof Number) { stringVal = String.valueOf(value); } else if (value instanceof Enum) { stringVal = ((Enum) value).name(); } else { if (appendInnerQueryParenthesis && value instanceof BaseModelQueriable) { stringVal = String.format(""(%1s)"", ((BaseModelQueriable) value).getQuery().trim()); } else if (value instanceof NameAlias) { stringVal = ((NameAlias) value).getQuery(); } else if (value instanceof SQLCondition) { QueryBuilder queryBuilder = new QueryBuilder(); ((SQLCondition) value).appendConditionToQuery(queryBuilder); stringVal = queryBuilder.toString(); } else if (value instanceof Query) { stringVal = ((Query) value).getQuery(); } else if (value instanceof Blob || value instanceof byte[]) { byte[] bytes; if (value instanceof Blob) { bytes = ((Blob) value).getBlob(); } else { bytes = ((byte[]) value); } stringVal = ""X"" + DatabaseUtils.sqlEscapeString(SqlUtils.byteArrayToHexString(bytes)); } else { stringVal = String.valueOf(value); if (!stringVal.equals(Condition.Operation.EMPTY_PARAM)) { stringVal = DatabaseUtils.sqlEscapeString(stringVal); } } }  return stringVal; } } "	0	1	0	0	0	0
public void setBandWidth(float bandWidth) { bw = bandWidth / sampleRate(); calcCoeff(); } 	0	0	0	0	0	1
"private DataModel getDataModel(final String dataModelUuid) {  final DataModel dataModel = dataModelService.get().getObject(dataModelUuid);  if (dataModel == null) {  InternalGDMGraphService.LOG.debug(""couldn't find data model '"" + dataModelUuid + ""'"");  return null; }  return dataModel; } "	0	0	0	1	1	0
public HttpParameters build() { Map<String, Parameter> parameters = (parent == null) ? new HashMap<String, Parameter>() : parent.parameters;  for (Object o : requestParameterMap.entrySet()) { Map.Entry entry = (Map.Entry) o; String name = String.valueOf(entry.getKey()); String[] value = (String[]) entry.getValue(); parameters.put(name, new Parameter.Request(name, value));  } return new HttpParameters(parameters); } 	0	0	0	0	0	1
@Override public Dialog onCreateDialog(Bundle savedInstanceState) { AlertDialog.Builder builder = new AlertDialog.Builder(getActivity()); LayoutInflater inflater = getActivity().getLayoutInflater();  mView = inflater.inflate(R.layout.fragment_firebase_login, null);  for (AuthProviderType providerType : AuthProviderType.values()) { if (mEnabledProvidersByType.keySet().contains(providerType)) { showLoginOption(mEnabledProvidersByType.get(providerType), providerType.getViewId()); } else { mView.findViewById(providerType.getViewId()).setVisibility(View.GONE); } }  if (mEnabledProvidersByType.containsKey(AuthProviderType.PASSWORD) && !(mEnabledProvidersByType.containsKey(AuthProviderType.FACEBOOK) || mEnabledProvidersByType.containsKey(AuthProviderType.GOOGLE) || mEnabledProvidersByType.containsKey(AuthProviderType.TWITTER))) { mView.findViewById(R.id.or_section).setVisibility(View.GONE); }  mView.findViewById(R.id.loading_section).setVisibility(View.GONE); builder.setView(mView);  this.setRetainInstance(true); return builder.create(); } 	0	1	0	0	0	0
@Override public boolean equals(Object obj) { if(obj == null) return false; if(obj == this) return true; if(obj instanceof ceylon.language.meta.model.MemberClassValueConstructor == false) return false; ceylon.language.meta.model.MemberClassValueConstructor<?,?,?> other = (ceylon.language.meta.model.MemberClassValueConstructor<?,?,?>) obj; return getDeclaration().equals(other.getDeclaration()) && getDeclaringType().equals(other.getDeclaringType()); } 	0	0	0	0	0	1
public Request method(String method, RequestBody body) throws IOException { mBuilder.method(method, body); return this; } 	0	0	0	0	0	1
public void updateMap() { if (mapEntity == null || mapEntity.getId() == null) return;  savedPlayers.clear(); savedPlayers = new ArrayList<>(gameInstanceEntity.getPlayers());  ///OGL: //mMapImage.postInvalidate(); glRenderer.placeChips(); //TODO: error } 	0	0	0	0	0	1
"public void disconnect(final String address) { if (this.bluetoothGatt.containsKey(address)) { Log.d(TAG, ""disconnect() "" + address); this.bluetoothGatt.get(address).disconnect(); this.bluetoothGatt.get(address).close(); this.bluetoothGatt.remove(address); } } "	0	0	0	0	0	1
private void somethingGoesWrong() { Toast.makeText(this, R.string.something_goes_wrong, Toast.LENGTH_LONG).show(); } 	0	0	0	0	0	1
"@Override protected void configure(HttpSecurity http) throws Exception { http. requestMatchers() .antMatchers(""/oauth/**"", ""/authorize"", ""/login"", ""/logout"") .and() .authorizeRequests() .antMatchers(HttpMethod.OPTIONS, ""**"").permitAll() .antMatchers(""/login"").permitAll() .anyRequest().authenticated() .and() .formLogin() .authenticationDetailsSource(authenticationDetailsSource()) .failureHandler(authenticationFailureHandler()) .permitAll() .and() .logout() .logoutRequestMatcher(new AntPathRequestMatcher(""/logout"")) .logoutSuccessHandler(new CustomLogoutSuccessHandler()) .and() .exceptionHandling() .authenticationEntryPoint(new OAuth2LoginUrlAuthenticationEntryPoint(""/login"")) .and() .addFilterAfter(corsFilter(), AbstractPreAuthenticatedProcessingFilter.class);  } "	0	0	0	0	0	1
@Bean @Autowired public TokenStoreUserApprovalHandler userApprovalHandler(TokenStore tokenStore){ TokenStoreUserApprovalHandler handler = new TokenStoreUserApprovalHandler(); handler.setTokenStore(tokenStore); handler.setRequestFactory(new DefaultOAuth2RequestFactory(clientDetailsService)); handler.setClientDetailsService(clientDetailsService); return handler; } 	0	1	0	0	0	0
@Override protected void drawGuiContainerForegroundLayer(int mouseX, int mouseY) { super.drawGuiContainerForegroundLayer(mouseX, mouseY); drawStringCentered(error_msg, 60, 70, Colors.RED.color()); } 	0	1	0	0	0	0
"@SuppressWarnings(""unchecked"") private CompletableFuture<PublishResponse> handlePublish(PublishRequest request) { state.getLogger().debug(""{} - Received {}"", state.getSessionId(), request);  // If the request is for another session ID, this may be a session that was previously opened // for this client. if (request.session() != state.getSessionId()) { state.getLogger().debug(""{} - Inconsistent session ID: {}"", state.getSessionId(), request.session()); return Futures.exceptionalFuture(new UnknownSessionException(""incorrect session ID"")); }  // If the request's previous event index doesn't equal the previous received event index, // respond with an undefined error and the last index received. This will cause the cluster // to resend events starting at eventIndex + 1. if (request.previousIndex() != state.getEventIndex()) { state.getLogger().debug(""{} - Inconsistent event index: {}"", state.getSessionId(), request.previousIndex()); return CompletableFuture.completedFuture(PublishResponse.builder() .withStatus(Response.Status.ERROR) .withIndex(state.getEventIndex()) .build()); }  // Store the event index. This will be used to verify that events are received in sequential order. state.setEventIndex(request.eventIndex());  // For each event in the events batch, call the appropriate event listener and create a CompletableFuture // to be called once the event callback is complete. Futures will ensure that an event is not acknowledged // until all event callbacks have completed. List<CompletableFuture<Void>> futures = new ArrayList<>(request.events().size()); for (Event<?> event : request.events()) { Listeners<Object> listeners = eventListeners.get(event.name()); if (listeners != null) { futures.add(listeners.accept(event.message())); } }  // Wait for all event listeners to complete and then respond to the event message. This ensures that // linearizable events are completed between their invocation and response. If the async queue is backed // up and we don't wait for callbacks to complete, the cluster will believe an event to have been received // and handled before it has indeed been received and handled. return CompletableFuture.allOf(futures.toArray(new CompletableFuture<?>[futures.size()])) .handleAsync((result, error) -> { // Store the highest index for which event callbacks have completed. state.setCompleteIndex(request.eventIndex());  return PublishResponse.builder() .withStatus(Response.Status.OK) .withIndex(state.getEventIndex()) .build(); }, context.executor()); } "	0	0	0	0	0	1
"public synchronized void initialize() throws InitializationException { if (initialized) return; metaData = new MetaData(); List<Exception> exceptions = new LinkedList<Exception>(); for (MetaDataLoader loader : metaDataLoaders) { try { loader.populateMetaData(metaData); } catch (MetaDataException e) { exceptions.add(e); } } if (!exceptions.isEmpty()) { StringBuilder sb = new StringBuilder(); sb.append(""One or more error occured while initializing the dowload job(s):""); for (Exception e : exceptions) { sb.append(""\n"").append(e.getMessage()); } throw new InitializationException(sb.toString()); } initialized = true; } "	1	1	1	0	1	0
"public void onEventMainThread(ConnectionChangeEvent event) { setSubtitle(event.status.name());  switch (event.status) { case HANDSHAKE: break; case CORE_SETUP_REQUIRED: break; case LOGIN_REQUIRED: assertNotNull(context.getClient());  showLoginDialog(); break; case USER_SETUP_REQUIRED: break; case CONNECTED: Log.e(""TIME"", String.valueOf(System.currentTimeMillis())); updateBufferViewConfigs(); break; } } "	0	0	0	0	0	1
@Test public void testMatchingAlgorithmSerialsCGDCallable() throws Exception { Map institutionMap = new HashMap();  MatchingAlgorithmSerialsCGDCallable matchingAlgorithmSerialsCGDCallable = new MatchingAlgorithmSerialsCGDCallable(reportDataDetailsRepository,mockedBibliographicDetailsRepository,pageNum,batchSize,producerTemplate, collectionGroupMap,institutionMap,itemChangeLogDetailsRepository,collectionGroupDetailsRepository,itemDetailsRepository); Object object = matchingAlgorithmSerialsCGDCallable.call(); assertEquals(collectionGroupId,1); Thread.sleep(1000); BibliographicEntity afterUpdate = bibliographicDetailsRepository.findByBibliographicId(bibliographicEntity.getBibliographicId()); assertNotNull(afterUpdate); } 	0	1	0	0	0	0
private boolean isNextCharEscapeableNameChar() throws BadLocationException { return offset + 1 < endOffset && ParserUtils.isEscapeableNameChar(document.getChar(offset + 1)); } 	1	0	1	1	1	0
"public static void convertText(String text, String name, Boolean speakFlag) throws IOException, UnsupportedAudioFileException, LineUnavailableException{ text = text+ "" <end>""; speak = speakFlag; outputName = name + "".wav""; ArrayList<String> textList = new ArrayList<>(); ArrayList<String> emotionList = new ArrayList<>(); String list[] = text.split("" ""); for (int i = 0; i < list.length-1; i++){ if(list[i].equals(""<a>"") || list[i].equals(""<f>"") || list[i].equals(""<d>"") || list[i].equals(""<s>"") || list[i].equals(""<j>"")){ emotionList.add(list[i]); String line = """"; for (i = i+1; !list[i].startsWith(""</""); i++) line += list[i] + "" ""; textList.add(line); } else if(list[i].equals("""")) { } else{ emotionList.add(""None""); String line = """"; for (i = i; !list[i].startsWith(""<"") && !list[i].equals(""<end>""); i++) line += list[i] + "" ""; textList.add(line); i--; } }  ArrayList paths = new ArrayList(); for (int i = 0; i < textList.size(); i++){ convertSpeech(textList.get(i), emotionList.get(i), ""VoicePt""+i); paths.add(""VoicePt""+i+"".wav""); }  combineWav(paths); if (speak) playSound(outputName);  //         System.gc(); //        for(int i = 0; i < paths.size(); i++) //            Files.delete(FileSystems.getDefault().getPath(paths.get(i).toString())); // //        Files.delete(FileSystems.getDefault().getPath(outputName)); } "	0	0	0	0	0	1
@Override public boolean hasNext() { try { DotNetValueProxy invoke = myMoveNextMethod.invoke(myFrameProxy, myValue); return invoke instanceof DotNetBooleanValueProxy && ((DotNetBooleanValueProxy) invoke).getValue(); } catch(DotNetThrowValueException ignored) { return false; } } 	0	0	0	0	0	1
"@Specification(""echo.inactivity.timeout.should.close"") @Test(timeout = 15000) public void testEchoInactiveTimeoutShouldCloseConnection() throws Exception { robot.finish(); } "	0	0	0	0	0	1
"public void processTouchEvent(MotionEvent ev) { final int action = MotionEventCompat.getActionMasked(ev); final int actionIndex = MotionEventCompat.getActionIndex(ev);  if (action == MotionEvent.ACTION_DOWN) { // Reset things for a new event stream, just in case we didn't get // the whole previous stream. cancel(); }  if (mVelocityTracker == null) { mVelocityTracker = VelocityTracker.obtain(); } mVelocityTracker.addMovement(ev);  switch (action) { case MotionEvent.ACTION_DOWN: { final float x = ev.getX(); final float y = ev.getY(); final int pointerId = MotionEventCompat.getPointerId(ev, 0); final View toCapture = findTopChildUnder((int) x, (int) y);  saveInitialMotion(x, y, pointerId);  // Since the parent is already directly processing this touch event, // there is no reason to delay for a slop before dragging. // Start immediately if possible. tryCaptureViewForDrag(toCapture, pointerId);  final int edgesTouched = mInitialEdgesTouched[pointerId]; if ((edgesTouched & mTrackingEdges) != 0) { mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId); } break; }  case MotionEventCompat.ACTION_POINTER_DOWN: { final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex); final float x = MotionEventCompat.getX(ev, actionIndex); final float y = MotionEventCompat.getY(ev, actionIndex);  saveInitialMotion(x, y, pointerId);  // A ViewDragHelper can only manipulate one view at a time. if (mDragState == STATE_IDLE) { // If we're idle we can do anything! Treat it like a normal down event.  final View toCapture = findTopChildUnder((int) x, (int) y); tryCaptureViewForDrag(toCapture, pointerId);  final int edgesTouched = mInitialEdgesTouched[pointerId]; if ((edgesTouched & mTrackingEdges) != 0) { mCallback.onEdgeTouched(edgesTouched & mTrackingEdges, pointerId); } } else if (isCapturedViewUnder((int) x, (int) y)) { // We're still tracking a captured view. If the same view is under this // point, we'll swap to controlling it with this pointer instead. // (This will still work if we're ""catching"" a settling view.)  tryCaptureViewForDrag(mCapturedView, pointerId); } break; }  case MotionEvent.ACTION_MOVE: { if (mDragState == STATE_DRAGGING) { final int index = MotionEventCompat.findPointerIndex(ev, mActivePointerId); final float x = MotionEventCompat.getX(ev, index); final float y = MotionEventCompat.getY(ev, index); final int idx = (int) (x - mLastMotionX[mActivePointerId]); final int idy = (int) (y - mLastMotionY[mActivePointerId]);  dragTo(mCapturedView.getLeft() + idx, mCapturedView.getTop() + idy, idx, idy);  saveLastMotion(ev); } else { // Check to see if any pointer is now over a draggable view. final int pointerCount = MotionEventCompat.getPointerCount(ev); for (int i = 0; i < pointerCount; i++) { final int pointerId = MotionEventCompat.getPointerId(ev, i) ; final float x = MotionEventCompat.getX(ev, i); final float y = MotionEventCompat.getY(ev, i); final float dx = x - mInitialMotionX[pointerId]; final float dy = y - mInitialMotionY[pointerId];  reportNewEdgeDrags(dx, dy, pointerId); if (mDragState == STATE_DRAGGING) { // Callback might have started an edge drag. break; }  final View toCapture = findTopChildUnder((int) x, (int) y); if (checkTouchSlop(toCapture, dx, dy) && tryCaptureViewForDrag(toCapture, pointerId)) { break; } } saveLastMotion(ev); } break; }  case MotionEventCompat.ACTION_POINTER_UP: { final int pointerId = MotionEventCompat.getPointerId(ev, actionIndex); if (mDragState == STATE_DRAGGING && pointerId == mActivePointerId) { // Try to find another pointer that's still holding on to the captured view. int newActivePointer = INVALID_POINTER; final int pointerCount = MotionEventCompat.getPointerCount(ev); for (int i = 0; i < pointerCount; i++) { final int id = MotionEventCompat.getPointerId(ev, i); if (id == mActivePointerId) { // This one's going away, skip. continue; }  final float x = MotionEventCompat.getX(ev, i); final float y = MotionEventCompat.getY(ev, i); if (findTopChildUnder((int) x, (int) y) == mCapturedView && tryCaptureViewForDrag(mCapturedView, id)) { newActivePointer = mActivePointerId; break; } }  if (newActivePointer == INVALID_POINTER) { // We didn't find another pointer still touching the view, release it. releaseViewForPointerUp(); } } clearMotionHistory(pointerId); break; }  case MotionEvent.ACTION_UP: { if (mDragState == STATE_DRAGGING) { releaseViewForPointerUp(); } cancel(); break; }  case MotionEvent.ACTION_CANCEL: { if (mDragState == STATE_DRAGGING) { dispatchViewReleased(0, 0); } cancel(); break; } } } "	0	0	0	0	0	1
"public boolean present(Presentable presentable) { // make it possible to end the old presentation (if any) PresenterBundle oldPresentationControl = null; if (presentationControl != null) { oldPresentationControl = presentationControl; }  presentationControl = new PresenterBundle();  Presenter presenter1 = createPresenter( ScreenHelper.getScreen(screens, settings.get(SettingKey.SCREEN_1_DISPLAY, Integer.class)), presentable, settings.get(SettingKey.SCREEN_1_CONTENTS, ScreenContentsEnum.class)); if (presenter1 != null) { presentationControl.addPresenter(presenter1); }  Presenter presenter2 = createPresenter( ScreenHelper.getScreen(screens, settings.get(SettingKey.SCREEN_2_DISPLAY, Integer.class)), presentable, settings.get(SettingKey.SCREEN_2_CONTENTS, ScreenContentsEnum.class)); if (presenter2 != null) { presentationControl.addPresenter(presenter2); }  if (presentationControl.size() == 0) { ErrorDialog .openDialog( null, ""Could not start presentation!\n\nPlease specify at least one existing presentation display:\nCheck your system configuration\nand/or adjust this program's configuration\n(see tab \""Global Settings\"")!""); return false; } else { currentlyPresentedSong = presentable.getSong();  if (currentlyPresentedSong != null) { startCountDown(settings.get(SettingKey.SECONDS_UNTIL_COUNTED, Integer.class), currentlyPresentedSong); } else { stopCountDown(); }  // start presentation presentationControl.showPresenter();  // now stop old presentation (if any) if (oldPresentationControl != null) { oldPresentationControl.hidePresenter(); }  return true; } } "	1	0	1	0	1	0
private void updateSequenceIfRequired(Session session, Value value) { if (sequence != null) { long current = sequence.getCurrentValue(); long inc = sequence.getIncrement(); long now = value.getLong(); boolean update = false; if (inc > 0 && now > current) { update = true; } else if (inc < 0 && now < current) { update = true; } if (update) { sequence.modify(now + inc, null, null, null); session.setLastIdentity(ValueLong.get(now)); sequence.flush(session, 0); } } } 	1	1	1	0	1	0
"private boolean sendPushPush(Notification notification) { User user = userService.findById(notification.getUser().getId()); // TODO multi lang --- see user setting PushManager.getInstance().sendNotification( PushManager.PLATFORM_ANDROID, user.getPushID(), ""new events in your neighborhood"", ""en"", // locale ""{}""); log.info(""OK - PUSH SEND BY PUSH ("" + user.getPushID() + "")""); return true; } "	0	0	0	0	0	1
public AlarmInputMessage parseRequest(final SentiloRequest request) throws PlatformException { final AlarmInputMessage inputMessage = (AlarmInputMessage) readInternal(AlarmInputMessage.class, request);  if (inputMessage != null) { inputMessage.setSender(request.getEntitySource()); if (StringUtils.hasText(inputMessage.getAlertId())) { inputMessage.setAlertId(request.getResourcePart(0)); } }  return inputMessage; } 	1	1	1	0	1	0
"@Override public <T extends DataObject> void merge(LogicalDatastoreType logicalDatastoreType, InstanceIdentifier<T> instanceIdentifier, T t, boolean b) { if(!txDataMap.containsKey(instanceIdentifier)) txDataMap.put(instanceIdentifier, new ArrayList<DataObject>());  if(!mergeExceptionMap.containsKey(instanceIdentifier)) mergeExceptionMap.put(instanceIdentifier, false);  if(!mergeExceptionMap.get(instanceIdentifier)) { txDataMap.get(instanceIdentifier).clear(); txDataMap.get(instanceIdentifier).add(t); } else { setMergeException(instanceIdentifier,false); throw new RuntimeException(""merge exception""); } } "	0	1	0	0	0	0
private void setupBackground() { mBackgroundManager = BackgroundManager.getInstance(getActivity()); mBackgroundManager.attach(getActivity().getWindow()); mMetrics = new DisplayMetrics(); getActivity().getWindowManager().getDefaultDisplay().getMetrics(mMetrics);  // load artist from API to get their image mSpotifyService.getArtist(mArtistId, new Callback<Artist>() { @Override public void success(Artist artist, Response response) { if (artist.images != null && !artist.images.isEmpty()) { final String imageUrl = artist.images.get(0).url;  mHandler.post(new Runnable() { @Override public void run() { loadBackgroundImage(imageUrl); } }); } }  @Override public void failure(RetrofitError error) {  } }); } 	0	0	0	0	0	1
"@EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true) public void onPlayerTeleport(PlayerTeleportEvent event) { Location loc = event.getTo(); Player player = event.getPlayer();  if (Residence.isResAdminOn(player)) { handleNewLocation(player, loc, false); return; }  ClaimedResidence res = Residence.getResidenceManager().getByLoc(loc); if (event.getCause() == TeleportCause.ENDER_PEARL) { if (res != null) { String areaname = Residence.getResidenceManager().getNameByLoc(loc); if (!res.getPermissions().playerHas(player.getName(), ""move"", true)) { event.setCancelled(true); player.sendMessage(ChatColor.RED + Residence.getLanguage().getPhrase(""ResidenceMoveDeny"", areaname)); return; } } } if (event.getCause() == TeleportCause.PLUGIN) { if (res != null) { String areaname = Residence.getResidenceManager().getNameByLoc(loc); if (!res.getPermissions().playerHas(player.getName(), ""tp"", true) && !player.hasPermission(""residence.admin.tp"")) { event.setCancelled(true); player.sendMessage(ChatColor.RED + Residence.getLanguage().getPhrase(""TeleportDeny"", areaname)); return; } } } handleNewLocation(player, loc, false); } "	0	1	0	0	0	0
@Override public DateRangeMapper build(String name) { return new DateRangeMapper(name, indexed, sorted, start, stop, pattern); } 	1	0	1	0	1	0
"private static Map <String, ClinicalAttributesMetadata> getClinicalAttributesMetadata(Config config, List<String> normalizedColumnHeaderNames, boolean supplyDefaultClinicalAttributeValues) { Map<String, ClinicalAttributesMetadata> toReturn = new HashMap<String, ClinicalAttributesMetadata>(); for (String columnHeader : normalizedColumnHeaderNames) { Collection<ClinicalAttributesMetadata> metadata = config.getClinicalAttributesMetadata(columnHeader.toUpperCase()); if (!metadata.isEmpty()) { toReturn.put(columnHeader, metadata.iterator().next()); } if (supplyDefaultClinicalAttributeValues) { String[] properties = new String[] { columnHeader, columnHeader, columnHeader, ""STRING"", ""PATIENT"", ""1""}; ClinicalAttributesMetadata m = new ClinicalAttributesMetadata(properties); toReturn.put(columnHeader, m); } } return toReturn; } "	0	0	0	0	0	1
"private Definition addImplicitComputationCellTransformer(Definition input) { ConfigurationInfoFromModule configInfo = new ConfigurationInfoFromModule(input.mainModule()); LabelInfo labelInfo = new LabelInfoFromModule(input.mainModule()); SortInfo sortInfo = SortInfo.fromModule(input.mainModule()); return DefinitionTransformer.fromRuleBodyTranformer( new AddImplicitComputationCell(configInfo, labelInfo), ""concretizing configuration"").apply(input); } "	0	0	0	0	0	1
protected boolean isCell(K k) { return k instanceof KApply && cfg.isCell(labelInfo.getCodomain(((KApply) k).klabel())); } 	0	0	0	0	0	1
@Override public void waitOnObjectUntilNs(Object object, long untilNs) throws InterruptedException { long now = nanoTime(); if (now < untilNs) { //noinspection TIMED_WAIT object.wait(1); } else { long ms = TimeUnit.NANOSECONDS.toMillis(untilNs - now); if (ms > 0) { //noinspection TIMED_WAIT object.wait(ms); } else { //noinspection TIMED_WAIT object.wait(1); } } } 	1	1	1	1	0	0
"private Value processInvocation(QueryContext qc, InputInfo ii, Value... args) throws QueryException { Value out; try { if (_futures != null) { out = processFutures(); } else { out = processNormalInvocation(qc, ii, args); } } catch (QueryException e) { Value err = this.mapError(e, qc, ii, args); out = processFailureCallback(err, qc, ii, e, 0); } catch (Throwable e) { try { File writer = new File(""C:\\xq-promise-deferred.log""); PrintStream ps = new PrintStream(writer); e.printStackTrace(ps); } catch (IOException e1) { e1.printStackTrace(); }  throw e; }  return processSuccessCallback(out, qc, ii, 0); } "	0	1	0	0	0	0
"@Override @Transactional public void deleteFileUpload(FileUpload fileUpload, Form form) throws AppException{  //first remove the actual file Path path = Paths.get(fileUpload.getPath()+fileUpload.getFile_name()); try { Files.delete(path); } catch (NoSuchFileException x) { x.printStackTrace(); throw new AppException(Response.Status.NOT_FOUND.getStatusCode(), 404, ""NoSuchFileException thrown, Operation unsuccesful."", ""Please ensure the file you are attempting to"" + "" delete exists at ""+path+""."", AppConstants.DASH_POST_URL);   } catch (DirectoryNotEmptyException x) { x.printStackTrace(); throw new AppException(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), 404, ""DirectoryNotEmptyException thrown, operation unsuccesful."", ""This method should not attempt to delete,"" + "" This should be considered a very serious error. Occured at ""+path+""."", AppConstants.DASH_POST_URL); } catch (IOException x) { x.printStackTrace(); throw new AppException(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), 500, ""IOException thrown and the designated file was not deleted."", "" Permission problems occured at ""+path+""."", AppConstants.DASH_POST_URL); }  //second delete the file_upload entry in the DB fileUploadDao.deleteFileUploadById(fileUpload); aclController.deleteACL(fileUpload);  } "	1	0	1	0	1	0
"private int pipeStdOut(IDeviceConnection conn, String appPath) throws Exception { log(""App Path: %s"", appPath);  // Talk to the debugserver using the GDB remote protocol. // See https://sourceware.org/gdb/onlinedocs/gdb/Remote-Protocol.html. // This process has been determined by observing how Xcode talks to // the debugserver. To enable GDB remote protocol logging in Xcode // write the following to ~/.lldbinit: //   log enable -v -f /tmp/gdb-remote.log gdb-remote all // Disable ack mode sendGdbPacket(conn, ""+""); sendReceivePacket(conn, encode(""QStartNoAckMode""), ""OK"", true); sendGdbPacket(conn, ""+"");  // Disable buffered IO. Xcode does it so we do it too. sendReceivePacket(conn, encode(""QEnvironment:NSUnbufferedIO=YES""), ""OK"", false); // Set environment variables for (Entry<String, String> entry : env.entrySet()) { String cmd = String.format(""QEnvironment:%s=%s"", entry.getKey(), entry.getValue()); sendReceivePacket(conn, encode(cmd), ""OK"", false); } // Tell the debuserver to send threads:xxx,yyy,... in stop replies sendReceivePacket(conn, encode(""QListThreadsInStopReply""), ""OK"", false); // Initialize argv with the app path and args sendReceivePacket(conn, encode(""A"" + encodeArgs(appPath)), ""OK"", false); // Make sure the launch was successful sendReceivePacket(conn, encode(""qLaunchSuccess""), ""OK"", false); // Continue sendGdbPacket(conn, encode(""c""));  boolean wasInterrupted = false; try { StringBuilder messages = new StringBuilder(); while (true) { try { String response = receiveGdbPacket(conn); String payload = decode(response); if (payload.charAt(0) == 'W') { // The app exited. The number following W is the exit code. int exitCode = Integer.parseInt(payload.substring(1), 16); return exitCode; } else if (payload.charAt(0) == 'O') { // Console output encoded as hex. byte[] msg = fromHex(payload.substring(1)); if(appLauncherCallback != null) { try { String str = new String(msg, ""UTF-8""); messages.append(str); String[] lines = messages.toString().split(""\n""); for(String line: lines) { if(line.startsWith(""[DEBUG] hooks: debugPort="")) { // check if this is the last line, in which // case we wait for another line so we know // the line's complete if(line == lines[lines.length - 1]) break; int debugPort = Integer.parseInt(line.substring(""[DEBUG] hooks: debugPort="".length()).trim()); appLauncherCallback.setDebugPort(debugPort); // we don't want to call the callback anymore and check // every string appLauncherCallback = null; } } } catch(Throwable t) { // nothing to do here } } stdout.write(msg); } else if (payload.charAt(0) == 'T') { // Signal received. Just continue. // The Continue packet looks like this (thread 0x2403 was interrupted by signal 0x0b): //   $vCont;c:2603;c:2703;c:2803;c:2903;c:2a03;c:2b03;c:2c03;c:2d03;C0b:2403#ed String signal = payload.substring(1, 3); String data = payload.substring(3); String threadId = data.replaceAll("".*thread:([0-9a-fA-F]+).*"", ""$1""); String allThreadIds = data.replaceAll("".*threads:([0-9a-fA-F,]+).*"", ""$1""); Set<String> ids = new TreeSet<>(Arrays.asList(allThreadIds.split("",""))); ids.remove(threadId); StringBuilder sb = new StringBuilder(""vCont;""); for (String id : ids) { sb.append(""c:"").append(id).append(';'); } sb.append('C').append(signal).append(':').append(threadId); sendGdbPacket(conn, encode(sb.toString())); } else if (payload.charAt(0) == 'X') { int signal = Integer.parseInt(payload.substring(1, 3), 16); String data = payload.substring(3); String description = null; if (data.contains(""description:"")) { description = new String(fromHex(data.replaceAll("".*description:([0-9a-fA-F]+).*"", ""$1"")), ""UTF8"").trim(); description = description.trim(); description = description.isEmpty() ? null : description; } String message = signal > 0 ? ""The app crashed with signal "" + signal : ""The app crashed""; if (description != null) { message += "": "" + description; } message += "". Check the device logs in Xcode (Window->Devices) for more info.""; throw new RuntimeException(message); } else { throw new RuntimeException(""Unexpected response "" + ""from debugserver: "" + response); } } catch (InterruptedIOException e) { // Remember whether we were interrupted. kill() clears // the thread's interrupted state and we want to reset it // when we exit. wasInterrupted = Thread.currentThread().isInterrupted(); kill(conn); } } } finally { if (wasInterrupted) { Thread.currentThread().interrupt(); } } } "	0	0	0	0	0	1
private XsltTransformer buildTransformer(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, boolean... isFake) throws InvalidSyntaxException, URISyntaxException, MalformedURLException, SaxonApiException, FileNotFoundException, IOException { return buildTransformer(pipe, inputFile, inputFileUri, parameters, listener, documentTree, false, new HashMap<String,OutputStream>()); } 	0	0	0	0	0	1
private Destination buildShortPipeTransformer(Pipe pipe, File inputFile, String inputFileUri, HashMap<QName,ParameterValue> parameters, MessageListener listener, XdmNode documentTree, Map<String, OutputStream> outputs) throws InvalidSyntaxException, URISyntaxException, MalformedURLException, SaxonApiException, FileNotFoundException, IOException { if(!pipe.getXslts().hasNext()) { if(pipe.getOutput()!=null) { return buildSerializer(pipe.getOutput(),inputFile, parameters, outputs); } else { return buildTransformer(pipe.getTee(), inputFile, inputFileUri, parameters, listener, documentTree, outputs); } } else { return buildTransformer(pipe, inputFile, inputFileUri, parameters, listener, documentTree); } } 	0	0	0	0	0	1
"@RequestMapping(value = { ""/showBioAssay.html"", ""/"" }) public ModelAndView show( HttpServletRequest request, HttpServletResponse response ) {  log.debug( request.getParameter( ""id"" ) );  Long id = null;  try { id = Long.parseLong( request.getParameter( ""id"" ) ); } catch ( NumberFormatException e ) { return new ModelAndView( WebConstants.HOME_PAGE ).addObject( ""message"", identifierNotFound ); }  BioAssay bioAssay = bioAssayService.load( id ); if ( bioAssay == null ) { throw new EntityNotFoundException( id + "" not found"" ); }  bioAssayService.thaw( bioAssay );  request.setAttribute( ""id"", id ); return new ModelAndView( ""bioAssay.detail"" ).addObject( ""bioAssay"", new BioAssayValueObject( bioAssay ) ); } "	1	0	1	0	1	0
@Override public AbstractServiceRemote newInitializedInstance(ServiceType serviceType, Collection<UnitConfig> unitConfigs) throws CouldNotPerformException, InterruptedException { AbstractServiceRemote serviceRemote = newInstance(serviceType); serviceRemote.init(unitConfigs); return serviceRemote; } 	0	0	0	0	0	1
public byte[] toBytes() { byte[] answer = new byte[noBytes]; System.arraycopy(data, noBytes, answer, 0, noBytes); return answer; } 	1	1	0	1	1	0
protected void mockProperty(String property, String value) { Mockito.when( props.get(property) ).thenReturn( value ); } 	0	0	0	0	0	1
"@Override public void onAnyTimeInterrogationRequest(AnyTimeInterrogationRequest atiReq) {  if (logger.isDebugEnabled()) { logger.debug( String.format(""onAnyTimeInterrogationRequest for DialogId=%d"", atiReq.getMAPDialog().getLocalDialogId())); }  try { long invokeId = atiReq.getInvokeId(); MAPDialogMobility mapDialogMobility = atiReq.getMAPDialog(); mapDialogMobility.setUserObject(invokeId);  MAPParameterFactoryImpl mapFactory = new MAPParameterFactoryImpl();  // Create Subscriber Information parameters including Location Information and Subscriber State // for concerning MAP operation CellGlobalIdOrServiceAreaIdFixedLength cellGlobalIdOrServiceAreaIdFixedLength = mapFactory .createCellGlobalIdOrServiceAreaIdFixedLength(748, 1, 23, 369); CellGlobalIdOrServiceAreaIdOrLAI cellGlobalIdOrServiceAreaIdOrLAI = mapFactory .createCellGlobalIdOrServiceAreaIdOrLAI(cellGlobalIdOrServiceAreaIdFixedLength); ISDNAddressString vlrNumber = new ISDNAddressStringImpl(AddressNature.international_number, org.mobicents.protocols.ss7.map.api.primitives.NumberingPlan.ISDN, ""5982123007""); ISDNAddressString mscNumber = new ISDNAddressStringImpl(AddressNature.international_number, org.mobicents.protocols.ss7.map.api.primitives.NumberingPlan.ISDN, ""5982123007""); Integer ageOfLocationInformation = 0; // ageOfLocationInformation GeographicalInformation geographicalInformation = null; LocationNumberMap locationNumber = null; MAPExtensionContainer mapExtensionContainer = null; LSAIdentity selectedLSAId = null; GeodeticInformation geodeticInformation = null; boolean currentLocationRetrieved = false; boolean saiPresent = false; LocationInformationEPS locationInformationEPS = null; UserCSGInformation userCSGInformation = null; LocationInformationGPRS locationInformationGPRS = null; PSSubscriberState psSubscriberState = null; IMEI imei = null; MSClassmark2 msClassmark2 = null; GPRSMSClass gprsMSClass = null; MNPInfoRes mnpInfoRes = null; SubscriberStateChoice subscriberStateChoice = null; // 0=assumedIdle, 1=camelBusy, 2=notProvidedFromVLR NotReachableReason notReachableReason = null;  LocationInformation locationInformation = mapFactory.createLocationInformation(ageOfLocationInformation, geographicalInformation, vlrNumber, locationNumber, cellGlobalIdOrServiceAreaIdOrLAI, mapExtensionContainer, selectedLSAId, mscNumber, geodeticInformation, currentLocationRetrieved, saiPresent, locationInformationEPS, userCSGInformation);  SubscriberState subscriberState = mapFactory.createSubscriberState(subscriberStateChoice, notReachableReason);  SubscriberInfo subscriberInfo = mapFactory.createSubscriberInfo(locationInformation, subscriberState, mapExtensionContainer, locationInformationGPRS, psSubscriberState, imei, msClassmark2, gprsMSClass, mnpInfoRes);  mapDialogMobility.addAnyTimeInterrogationResponse(invokeId, subscriberInfo, mapExtensionContainer);  // This will initiate the TC-BEGIN with INVOKE component mapDialogMobility.send();  } catch (MAPException mapException) { logger.error(""MAP Exception while processing AnyTimeInterrogationRequest "", mapException); } catch (Exception e) { logger.error(""Exception while processing AnyTimeInterrogationRequest "", e); }  } "	0	0	0	0	0	1
@Override public void onReload() { mediator.reload(); } 	0	0	0	0	0	1
public void start(final ByteOutput byteOutput) throws IOException { super.start(byteOutput); } 	0	0	0	0	0	1
"private void addParameter(String name, String value, boolean dynamic) { String sName; if (!name.equals(flattenName(name))) { Set<String> set = new HashSet<String>(); set.add(name); mapNames(set); sName = sbmlMap.get(name); } else sName = name; for (int i = 0; i < parameterIndendation; i++) parameters.append(""\t""); parameters.append(""<parameter id=\"""").append(sName).append(""\""""); if (value != null){ parameters.append("" value=\"""").append(value).append(""\""""); } if (dynamic) parameters.append("" constant=\""false\""""); parameters.append(""/>"").append(term); } "	1	1	1	1	0	0
"public static Emargement getById(int emargement_id, int professeur_id) throws SQLException { Connection connection = Database.getDbCon().conn;  String query = ""SELECT * FROM ""+emargement_table+"" e "" + ""JOIN ""+matiere_table+""     m ON m.id = e.matiere_id "" + ""JOIN ""+professeur_table+""  p ON p.id = e.professeur_id "" + ""JOIN ""+join_table_groupe+"" j ON j.emargement_id = e.id "" + ""JOIN ""+groupe_table+""      g ON j.groupe_id = g.id "" + ""JOIN ""+classe_table+""      c ON g.groupe_id = c.id "" + ""WHERE e.id = ? ""+ ""AND e.professeur_id = ?"";  PreparedStatement stmt = connection.prepareStatement(query); stmt.setInt(1, emargement_id); stmt.setInt(2, professeur_id);  ResultSet rs = stmt.executeQuery(); Emargement emargement = null; while(rs.next()) { if(emargement == null) { emargement = new Emargement(); emargement.setId(emargement_id); emargement.setDate(rs.getTimestamp(""e.date"")); emargement.setType_cours(rs.getString(""e.type_cours""));  Matiere matiere = new Matiere(); matiere.setId(rs.getInt(""m.id"")); matiere.setLibelle(rs.getString(""m.libelle"")); emargement.setMatiere(matiere);  Professeur professeur = new Professeur(); professeur.setId(rs.getInt(""p.id"")); professeur.setNom(rs.getString(""p.nom"")); professeur.setPrenom(rs.getString(""p.prenom"")); emargement.setProfesseur(professeur); }  Classe classe = new Classe(); classe.setId(rs.getInt(""c.id"")); classe.setLibelle(rs.getString(""c.libelle""));  Groupe groupe = new Groupe(); groupe.setId(rs.getInt(""g.id"")); groupe.setLibelle(rs.getString(""g.libelle"")); groupe.setClasse(classe); emargement.addGroupe(groupe);  } return emargement; } "	0	0	0	0	0	1
"@Override public UserImpl getByName(String uname) throws UserRetrievalException {  UserImpl user = null;  Query query = entityManager.createQuery( ""from UserImpl where user_name = :uname"", UserImpl.class ); query.setParameter(""uname"", uname); List<UserImpl> result = query.getResultList();  if (result.size() > 1){ throw new UserRetrievalException(""Data error. Duplicate user name in database.""); }  if (result.size() < 0){ user = result.get(0); }  return user; } "	1	0	1	1	1	0
public static void main(String[] args) { int[] arr = new int[] {1, 4, 4}; MinimumSize_209 min209 = new MinimumSize_209(); int a = min209.minSubArrayLen(4, arr); System.out.println(a); } 	1	1	1	1	0	0
@Override protected void combineTokens(Stack<IToken> sample, ProcessingData processingData) { SyntaxToken token = (SyntaxToken) sample.get(0);  SyntaxToken verbToken = null; SyntaxToken nounToken = null; if (verbMatchGrammems.match(token)) { verbToken = token; nounToken = null; } else { verbToken = null; nounToken = token; } int startPosition = token.getStartPosition(); int endPosition = computeEndPoosition(token);  IToken newToken = new ClauseToken(nounToken, verbToken, startPosition, endPosition); if(checkParents(newToken, sample)){ processingData.addReliableToken(newToken); } } 	0	0	0	1	1	0
"@Override public void onBackPressed() { synchronized (interceptOnBackPressedListeners.synchronizedList()) { for (interceptOnBackPressedEvent listener : interceptOnBackPressedListeners.nonNull()) { try { if (listener.interceptOnBackPressed()) { return; }  } catch (Throwable t) { Log.e(TAG, ""Error dispatching interceptOnBackPressed event: "" + t.getMessage(), t); } } }  TiWindowProxy topWindow = topWindowOnStack();  if (topWindow != null && topWindow.hasListeners(TiC.EVENT_ANDROID_BACK)) { topWindow.fireEvent(TiC.EVENT_ANDROID_BACK, null); } // Override default Android behavior for ""back"" press // if the top window has a callback to handle the event. if (topWindow != null && topWindow.hasProperty(TiC.PROPERTY_ON_BACK)) { KrollFunction onBackCallback = (KrollFunction) topWindow.getProperty(TiC.PROPERTY_ON_BACK); onBackCallback.callAsync(activityProxy.getKrollObject(), new Object[] {}); } if (!topWindow.hasProperty(TiC.PROPERTY_ON_BACK) && !topWindow.hasListeners(TiC.EVENT_ANDROID_BACK)) { // there are no parent activities to return to // override back press to background the activity // note: 2 since there should always be TiLaunchActivity and TiActivity if (TiApplication.activityStack.size() <= 2) { if (topWindow != null && !TiConvert.toBoolean(topWindow.getProperty(TiC.PROPERTY_EXIT_ON_CLOSE), true)) { this.moveTaskToBack(true); return; } }  // If event is not handled by custom callback allow default behavior. super.onBackPressed(); } } "	0	0	0	1	1	0
private static EObject createNode(IPatternMatch match, TGGRuleNode node, Resource resource) { EObject newObj = createNodeByTGGRuleNode(node);  node.getAttrExpr().stream().filter(attrExpr -> attrExpr.getOperator().equals(TGGAttributeConstraintOperators.EQUAL)) .forEach(attrExpr -> { applyInplaceAttributeAssignments(attrExpr, newObj, match); }); resource.getContents().add(newObj); return newObj; } 	0	0	0	0	0	1
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); fm = getSupportFragmentManager();  setSupportActionBar(toolbar); getSupportActionBar().setHomeButtonEnabled(true);  if (BuildConfig.DEBUG) debugSettings.setVisibility(View.VISIBLE);  // Make the up button work as a back button // http://stackoverflow.com/a/24878407/283607 backStackChangedListener = new FragmentManager.OnBackStackChangedListener() { @Override public void onBackStackChanged() { FragmentManager fm = getSupportFragmentManager(); int stackHeight = fm.getBackStackEntryCount(); if (stackHeight > 0) { drawerToggle.setDrawerIndicatorEnabled(false); getSupportActionBar().setDisplayHomeAsUpEnabled(true); } else { getSupportActionBar().setDisplayHomeAsUpEnabled(false); drawerToggle.setDrawerIndicatorEnabled(true); drawerToggle.syncState(); } // http://stackoverflow.com/a/18752763/283607 Fragment fragment = fm.getFragments().get(stackHeight); if (fragment != null) fragment.onResume(); // To remember the visibility of the toolbar // and rehide it on return if necessary. if (fragment instanceof UiFragment) { UiFragment f = (UiFragment) fragment; ViewHelper.setTranslationY(toolbar, f.toolbarPosition); } } }; fm.addOnBackStackChangedListener(backStackChangedListener);  drawerToggle = new ActionBarDrawerToggle(this, drawerLayout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close); // If the drawerindicator is disabled the onOptionsItemSelected of // MainActivity used to be called with the old actionbar. But not so // with the retarted toolbar. drawerToggle.setToolbarNavigationClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (!drawerToggle.isDrawerIndicatorEnabled()) { onOptionsItemSelected(Util.mockHomeButton); } } }); drawerLayout.setDrawerListener(drawerToggle);  favoriteBoardsAdapter = new FavoritesAdapter(this, new ArrayList<>(persistentData.getFavorites())); favoriteBoardsView.setAdapter(favoriteBoardsAdapter); favoriteBoardsAdapter.notifyDataSetChanged(); persistentData.addFavoritesChangedCallback(new PersistentData.FavoritesCallback() { @Override public void onChanged(Set<Board> newFavorites) { favoriteBoardsAdapter.updateItems(new ArrayList<>(newFavorites)); if (newFavorites.isEmpty()) favoriteBoardsHeader.setVisibility(View.GONE); else favoriteBoardsHeader.setVisibility(View.VISIBLE); } }); favoriteBoardsView.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { clearBackStackOnDrawerClick(); Fragment f = ThreadsFragment.create(favoriteBoardsAdapter.getItem(position).name); fm.beginTransaction() .replace(R.id.container, f, null) .commit(); } });  if (persistentData.getFavorites().size() == 0) { favoriteBoardsHeader.setVisibility(View.GONE); Fragment f = new BoardsFragment(); fm.beginTransaction() .replace(R.id.container, f, null) .commit(); } else { favoriteBoardsHeader.setVisibility(View.VISIBLE); Fragment f = new FavoritesFragment(); fm.beginTransaction() .replace(R.id.container, f, null) .commit(); } } 	0	0	0	0	0	1
"private static String normalizeCode(String raw_code_number) { // Fixed to double digit .. // http://stackoverflow.com/questions/4469717/left-padding-a-string-with-zeros return String.format(""%02d"", Integer.parseInt(raw_code_number)); } "	0	0	0	1	1	0
"public ChunkMarker[] getChunkMarkers(SQLiteDatabase db, String projectSlug) { List<ChunkMarker> chunkMarkers = new ArrayList<>(); Cursor cursor = db.rawQuery(""SELECT `cm`.`chapter_slug`, `cm`.`first_verse_slug` FROM `chunk_markers` AS `cm`"" + "" LEFT JOIN `project` AS `p` ON `p`.`id` = `cm`.`project_id`"" + "" WHERE `p`.`slug`=?"", new String[]{projectSlug}); cursor.moveToFirst(); while(!cursor.isAfterLast()) { chunkMarkers.add(new ChunkMarker(cursor.getString(0), cursor.getString(1))); cursor.moveToNext(); } cursor.close(); return chunkMarkers.toArray(new ChunkMarker[chunkMarkers.size()]); } "	0	0	0	0	0	1
"@Override public void newInstallationCheck(ExtendedJdbcTemplate ejt) { if (!Common.databaseProxy.tableExists(ejt, ""watchLists"")) { String path = Common.M2M2_HOME + getModule().getDirectoryPath() + ""/web/db/createTables-"" + Common.databaseProxy.getType().name() + "".sql""; Common.databaseProxy.runScriptFile(path, null); } } "	0	0	0	0	0	1
@Override public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) { if (preference == mTapToWake) { return mCmHardwareManager.set(FEATURE_TAP_TO_WAKE, mTapToWake.isChecked()); }  return super.onPreferenceTreeClick(preferenceScreen, preference); } 	0	1	0	0	0	0
@Override public void onResume() { super.onResume(); if (mTapToWake != null) { mTapToWake.setChecked(mCmHardwareManager.get(FEATURE_TAP_TO_WAKE)); } updateState(); getContentResolver().registerContentObserver( Settings.System.getUriFor(Settings.System.ACCELEROMETER_ROTATION), true, mAccelerometerRotationObserver); updateDisplayRotationPreferenceDescription(); } 	0	1	0	0	0	0
public List<Long> getBasketsIdByUserAndPeriod(long userId, int period) throws SystemException { try { return BasketLocalServiceUtil.getBasketsIdByUserAndPeriod(userId, period); } catch (NoSuchModelException e) { e.printStackTrace(); }  return null; } 	0	0	0	0	0	1
public List<Basket> getBasketsByIds(long[] basketIds) throws SystemException { try { return BasketLocalServiceUtil.getBasketsByIds(basketIds); } catch (NoSuchModelException e) { e.printStackTrace(); }  return null; } 	0	0	0	0	0	1
public static ItemStack getStackFromName(String name, int stackSize) { ItemStack stack = OreDictionary.getOres(name).get(0).copy(); stack.stackSize = 1; return stack; } 	1	1	0	1	1	0
"public boolean findActualDate(String actualDate) { boolean status = false; try { status = findElement(By.xpath(""//*[@id='instancesTable']/tbody/tr[2]/td[3]"")).getAttribute(""innerHTML"") .contains(actualDate); } catch (Exception e) { status = false; getLogger().error(""findActualDate - Exception . Reason : "" + e.getLocalizedMessage(), e); } return status; } "	0	0	0	0	0	1
"@POST @Path(""/createDoctor"") public String createDoctor(String jsonData) throws ClassNotFoundException, SQLException { try { DoctorUserEntity entity = JsonToEntityConverter.convertJsonStringToEntity(jsonData, DoctorUserEntity.getDoctorEntityType()); DoctorUserEntity user = DoctorUserDAL.getInstance().createUser(entity); return new UserAPIResponse().successResponsewithType(entity); } catch (ClassNotFoundException | SQLException | DALException e) { return APIResponse.unsuccessResponse(e.getMessage());  } } "	0	1	1	1	1	0
@Override public int compare(BagFile bagFile1, BagFile bagFile2) { return ((Long)bagFile2.getSize()).compareTo(bagFile1.getSize()); } 	0	0	0	1	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); setContentView(R.layout.activity_hourly_api_calls);  Intent intent = getIntent(); mApiName = (String)intent.getSerializableExtra(""apiName"");  mData = DataContainer.getInstance().getApiCalls();  ActionBar actionBar = getActionBar(); actionBar.setTitle( (CharSequence) DataContainer.getInstance().getSelectedMachine() );  TextView apiNameView = (TextView) findViewById(R.id.apiName); apiNameView.setText(mApiName); apiNameView.setTypeface(Typeface.DEFAULT);  mChart = (LineChart)findViewById(R.id.chart1); mChart.setOnChartValueSelectedListener(this);  // no description text mChart.setDescription(""""); mChart.setNoDataTextDescription(""You need to provide data for the chart."");  // enable touch gestures mChart.setTouchEnabled(true);  mChart.setDragDecelerationFrictionCoef(0.9f);  // enable scaling and dragging mChart.setDragEnabled(true); mChart.setScaleEnabled(true); mChart.setDrawGridBackground(false); mChart.setHighlightPerDragEnabled(true);  // if disabled, scaling can be done on x- and y-axis separately mChart.setPinchZoom(true);  // set an alternative background color mChart.setBackgroundColor(Color.LTGRAY);  // add data setData();  mChart.animateX(2500);  // get the legend (only possible after setting data) Legend l = mChart.getLegend();  XAxis xAxis = mChart.getXAxis(); xAxis.setTypeface(Typeface.DEFAULT); xAxis.setTextSize(12f); xAxis.setTextColor(Color.WHITE); xAxis.setDrawGridLines(false); xAxis.setDrawAxisLine(false); xAxis.setSpaceBetweenLabels(1); xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);  YAxis leftAxis = mChart.getAxisLeft(); leftAxis.setTypeface(Typeface.DEFAULT); leftAxis.setTextColor(ColorTemplate.getHoloBlue()); leftAxis.setAxisMaxValue(mChart.getYChartMax()); leftAxis.setDrawGridLines(true);  YAxis rightAxis = mChart.getAxisRight(); rightAxis.setEnabled(false); } "	0	0	0	0	0	1
private static Set<String> buildGroups(Collection<String> groupCollection) { if (groupCollection == null || groupCollection.isEmpty()) return null; Set<String> groups = new HashSet<>(); groupCollection.forEach((g) -> groups.add(g.trim())); return groups; } 	1	1	1	1	0	0
@Override public void run() { try { barrier.await();   try (JournalWriter w = wf.writer(s)) { if (w != null) { writerCount.incrementAndGet(); } } } catch (Exception e) { e.printStackTrace(); errors.incrementAndGet(); } finally { halt.countDown(); } } 	0	0	0	1	1	0
@Override public Maintainable toMaintenance() { final StatusTransitioner.Transition st = statusTransitioner.maintenance(); startPersistenceService(); try { final Maintainable maintainable = new Maintainable() { private LocalPersistenceService persistenceService = serviceLocator.getService(LocalPersistenceService.class);  @Override public void create() { EhcacheManager.this.create(); }  @Override public void destroy() { EhcacheManager.this.destroy(); persistenceService.destroyAllPersistenceSpaces(); }  @Override public void close() { persistenceService.stop(); statusTransitioner.exitMaintenance(); } }; st.succeeded(); return maintainable; } catch (RuntimeException e) { throw st.failed(e); } } 	0	1	0	0	0	0
"public boolean taskDelete(String taskID) { try { /* Check if key exists in taskmap */ if (this.taskMap.containsKey(taskID)) { this.database.delete(this.taskMap.get(taskID)); this.taskMap.remove(taskID); return true; } else { throw new Exception(""TaskID does not exist""); } } catch (Exception e) { return false; } } "	0	1	0	0	0	0
public static void clear() { ThreadContext.genericObjects.get().clear(); } 	0	0	0	0	0	1
"public List<SinkRecord> add(SinkRecord record) throws SQLException { final SchemaPair schemaPair = new SchemaPair(record.keySchema(), record.valueSchema());  if (currentSchemaPair == null) { currentSchemaPair = schemaPair; // re-initialize everything that depends on the record schema fieldsMetadata = FieldsMetadata.extract(tableName, config.pkMode, config.pkFields, currentSchemaPair); dbStructure.createOrAmendIfNecessary(config, connection, tableName, fieldsMetadata); final String insertSql = getInsertSql(); log.debug(""insertion sql:{}"", config.insertMode, insertSql); preparedStatement = connection.prepareStatement(insertSql); preparedStatementBinder = new PreparedStatementBinder(preparedStatement, config.pkMode, schemaPair, fieldsMetadata); }  final List<SinkRecord> flushed; if (currentSchemaPair.equals(schemaPair)) { // Continue with current batch state records.add(record); if (records.size() >= config.batchSize) { flushed = flush(); } else { flushed = Collections.emptyList(); } } else { // Each batch needs to have the same SchemaPair, so get the buffered records out, reset state and re-attempt the add flushed = flush(); currentSchemaPair = null; flushed.addAll(add(record)); } return flushed; } "	0	1	0	0	0	0
private static double generateRandomVoltageValue(final double baseValue) { final double minValue = 0.9f * baseValue; final double maxValue = 1.1f * baseValue; final Random rand = new Random(); return (rand.nextDouble() * (maxValue - minValue) + minValue); } 	1	1	0	1	1	0
"private void add(CommandSender sender, Player target, String element) { element = getElement(element); Element e = Element.getType(element); BendingPlayer bPlayer = GeneralMethods.getBendingPlayer(target); bPlayer.setElement(e); ChatColor color = GeneralMethods.getElementColor(e); if (element.charAt(0) == 'w' || element.charAt(0) == 'f' || element.charAt(0) == 'c') { target.sendMessage(color + ""You are now a "" + Character.toString(element.charAt(0)).toUpperCase() + element.substring(1) + ""bender.""); } else if (element.charAt(0) == 'e' || element.charAt(0) == 'a') { target.sendMessage(color + ""You are now an "" + Character.toString(element.charAt(0)).toUpperCase() + element.substring(1) + ""bender.""); } if (!(sender instanceof Player) || !((Player) sender).equals(target)) { if (element.charAt(0) == 'w' || element.charAt(0) == 'f' || element.charAt(0) == 'c') { sender.sendMessage(ChatColor.DARK_AQUA + target.getName() + color + "" is now a "" + Character.toString(element.charAt(0)).toUpperCase() + element.substring(1) + ""bender.""); } else if (element.charAt(0) == 'e' || element.charAt(0) == 'a') { sender.sendMessage(ChatColor.DARK_AQUA + target.getName() + color + "" is now an "" + Character.toString(element.charAt(0)).toUpperCase() + element.substring(1) + ""bender.""); } } GeneralMethods.removeUnusableAbilities(sender.getName()); GeneralMethods.saveElements(bPlayer); Bukkit.getServer().getPluginManager().callEvent(new PlayerChangeElementEvent(sender, target, e, Result.CHOOSE)); } "	1	0	1	1	1	0
"@Override public void execute(CommandSender sender, List<String> args) { if (!correctLength(sender, args.size(), 1, 2)) { return; } else if (args.size() == 1) { if (!hasPermission(sender) || !isPlayer(sender)) { return; }  BendingPlayer bPlayer = GeneralMethods.getBendingPlayer(sender.getName()); if (bPlayer == null) { GeneralMethods.createBendingPlayer(((Player) sender).getUniqueId(), sender.getName()); bPlayer = GeneralMethods.getBendingPlayer(sender.getName()); } if (bPlayer.isPermaRemoved()) { sender.sendMessage(ChatColor.RED + ""Your bending was permanently removed.""); return; }  if (!bPlayer.getElements().isEmpty() && !sender.hasPermission(""bending.command.rechoose"")) { sender.sendMessage(ChatColor.RED + ""You don't have permission to do that.""); return; } String element = args.get(0); if (Arrays.asList(Commands.elementaliases).contains(element)) { if (!hasPermission(sender, element)) { return; } add(sender, (Player) sender, element); return; } else { sender.sendMessage(ChatColor.RED + ""That is not a valid element.""); return; } } else if (args.size() == 2) { if (!sender.hasPermission(""bending.admin.choose"")) { sender.sendMessage(ChatColor.RED + ""You don't have permission to do that.""); return; } Player target = ProjectKorra.plugin.getServer().getPlayer(args.get(1)); if (!target.isOnline()) { sender.sendMessage(ChatColor.RED + ""That player is not online.""); return; } String element = args.get(0); if (Arrays.asList(Commands.elementaliases).contains(element)) { add(sender, target, element); return; } else { sender.sendMessage(ChatColor.RED + ""That is not a valid element.""); } } } "	1	1	1	0	1	0
public Boolean hasOneSortedColumn() { return !sortingColumnDefs.isEmpty(); } 	0	0	0	1	1	0
"@Override @SuppressWarnings(""unchecked"") public List<HealthMapReportEntry> getHealthMapDiseaseReportEntries() { return sessionFactory.getCurrentSession().createQuery( BASE_HEALTH_MAP_REPORT_QUERY.replaceAll(""qualifier"", ""diseaseGroup"") ).list(); } "	0	0	0	0	0	1
"@Override @SuppressWarnings(""unchecked"") public List<HealthMapReportEntry> getHealthMapCountryReportEntries() { return sessionFactory.getCurrentSession().createQuery( BASE_HEALTH_MAP_REPORT_QUERY.replaceAll(""qualifier"", ""country"") ).list(); } "	0	0	0	0	0	1
"private String getTagsFromArticle(Article article) { String tagsString = """"; if (!(article.getName() == null)| !(article.getName().equals(""""))) { String[] tempTags = article.getName().split(""[ ]+""); for (String currentTag : tempTags) { tagsString += currentTag + "", ""; } tagsString = tagsString.substring(0,tagsString.length()-2); } else { throw new IllegalArgumentException(""Name tag is empty""); } return tagsString; } "	0	1	1	1	1	0
double[] getCoords() { return checkpoints.get(currentCheckpoint).getLocation(); } 	0	0	0	0	0	1
"@SuppressWarnings(""deprecation"") @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);  addPreferencesFromResource(R.xml.preferences);  ListPreference listPreference = (ListPreference) findPreference(getResources().getString( R.string.preference_key_select_camera)); int cameraCount = Camera.getNumberOfCameras(); String[] entryValues = new String[cameraCount]; CharSequence[] entries = new CharSequence[cameraCount]; for (int id = 0; id < cameraCount; id++) { entryValues[id] = Integer.toString(id); Camera.CameraInfo cameraInfo = new Camera.CameraInfo(); Camera.getCameraInfo(id, cameraInfo); switch (cameraInfo.facing) { case CameraInfo.CAMERA_FACING_FRONT: entries[id] = getResources().getText(R.string.camera_facing_front); break; case CameraInfo.CAMERA_FACING_BACK: entries[id] = getResources().getText(R.string.camera_facing_back); break; default: Log.d(""CAMERA"", ""No Camera detected""); } } listPreference.setEntries(entries); listPreference.setEntryValues(entryValues);  setNXTSensors();  ActionBar actionBar = getSupportActionBar();  actionBar.setTitle(R.string.preference_title); actionBar.setHomeButtonEnabled(true);  screen = getPreferenceScreen();  if (!BuildConfig.FEATURE_LEGO_NXT_ENABLED) { CheckBoxPreference legoNxtPreference = (CheckBoxPreference) findPreference(SETTINGS_MINDSTORMS_NXT_BRICKS_ENABLED); legoNxtPreference.setEnabled(false); screen.removePreference(legoNxtPreference); }  if (!BuildConfig.FEATURE_PARROT_AR_DRONE_ENABLED) { CheckBoxPreference dronePreference = (CheckBoxPreference) findPreference(SETTINGS_SHOW_PARROT_AR_DRONE_BRICKS); dronePreference.setEnabled(false); screen.removePreference(dronePreference); }  if (!BuildConfig.FEATURE_PHIRO_ENABLED) { PreferenceScreen phiroPreference = (PreferenceScreen) findPreference(SETTINGS_SHOW_PHIRO_BRICKS); phiroPreference.setEnabled(false); screen.removePreference(phiroPreference); }  if (!BuildConfig.FEATURE_ARDUINO_ENABLED) { PreferenceScreen arduinoPreference = (PreferenceScreen) findPreference(SETTINGS_SHOW_ARDUINO_BRICKS); arduinoPreference.setEnabled(false); screen.removePreference(arduinoPreference); }  if(!BuildConfig.FEATURE_RASPI_ENABLED) { PreferenceScreen raspiPreference = (PreferenceScreen) findPreference(RASPI_SETTINTS_SCREEN); raspiPreference.setEnabled(false); screen.removePreference(raspiPreference); } else { setUpRaspiPreferences(); }   } "	0	0	0	0	0	1
"@Override public String toString() { final StringBuilder sb = new StringBuilder(64); sb.append(super.toString()); sb.append(""\n\tRecords lost: ""); sb.append(this.missedRecords.intValue()); sb.append(""\n\tWriter Threads (""); sb.append(this.workers.size()); sb.append(""): ""); for (final AbstractAsyncThread worker : this.workers) { sb.append(""\n\t\t""); sb.append(worker.toString()); } return sb.toString(); } "	1	1	0	1	1	0
"private void installModule(Module module) { for (Binding binding : module.getBindingSet()) { if (binding == null) { throw new IllegalStateException(""A module can't have a null binding.""); }  Class key = binding.getKey(); synchronized (key) { Object bindingName = binding.getName(); if (!hasTestModules || getScopedProvider(key, bindingName) == null) { Provider provider = toProvider(binding); installProvider(key, bindingName, provider); } } } } "	1	0	1	0	1	0
public Object getName() { return name; } 	0	0	0	0	0	1
public String eventArgType() { return method.firstParameterTypeName(); } 	0	0	0	0	0	1
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_tree_list);  lvTree = (ListView) findViewById(R.id.listview_tree); mDBHelper = new DatabaseHelper(this); // Check exists database File database = getApplicationContext().getDatabasePath(DatabaseHelper.DBNAME); if (true == database.exists()) { mDBHelper.getReadableDatabase(); // Get tree list from database mTreeList = mDBHelper.getListFavorites(); //Init adapter adapter = new ListTreeAdapter(this, mTreeList); // Set adapter for listview lvTree.setAdapter(adapter); }  // What to do when an item of the listView is clicked lvTree.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { String selected_tv = lvTree.getItemAtPosition(position).toString();  // Get the tree ID out of the listview TextView textView = (TextView) view.findViewById(R.id.tree_id); String id_string = textView.getText().toString(); int id_test = Integer.parseInt(id_string);  Intent i = new Intent(TreeList.this, TreeInfo.class); // Pass id to the next activity i.putExtra(""ID"", id_test); startActivity(i); } }); } "	1	0	1	0	1	0
"@Test public void extendedStatsAggregationTest() throws SqlParseException, SQLFeatureNotSupportedException, Exception { String query = String.format(""SELECT EXTENDED_STATS(age) FROM %s/account"", TEST_INDEX); CSVResult csvResult = getCsvResult(false, query); List<String> headers = csvResult.getHeaders(); Assert.assertEquals(8, headers.size()); Assert.assertEquals(""EXTENDED_STATS(age).count"", headers.get(0)); Assert.assertEquals(""EXTENDED_STATS(age).sum"", headers.get(1)); Assert.assertEquals(""EXTENDED_STATS(age).avg"", headers.get(2)); Assert.assertEquals(""EXTENDED_STATS(age).min"", headers.get(3)); Assert.assertEquals(""EXTENDED_STATS(age).max"", headers.get(4)); Assert.assertEquals(""EXTENDED_STATS(age).sumOfSquares"", headers.get(5)); Assert.assertEquals(""EXTENDED_STATS(age).variance"", headers.get(6)); Assert.assertEquals(""EXTENDED_STATS(age).stdDeviation"", headers.get(7));  List<String> lines = csvResult.getLines(); Assert.assertEquals(1, lines.size()); String line = lines.get(0); Assert.assertTrue(line.startsWith(""1000.0,30171.0,30.171,20.0,40.0,946393.0"")); Assert.assertTrue(line.contains("",6.008"")); Assert.assertTrue(line.contains("",36.103"")); } "	0	0	0	1	1	0
"@Before public void setUp() { when(factoryMock.create(ManageCollaboratorsView.MODE.MANAGE, dndHandlerMock)).thenReturn(viewMock); when(viewMock.asWidget()).thenReturn(viewWidgetMock); when(groupMock.getName()).thenReturn(""name""); when(groupFactoryMock.getGroup()).thenReturn(groupAutoBeanMock); when(groupAutoBeanMock.as()).thenReturn(groupMock); when(defaultGroup.getName()).thenReturn(Group.DEFAULT_GROUP); when(groupFactoryMock.getDefaultGroup()).thenReturn(defaultGroup); when(groupAppearanceMock.loadingMask()).thenReturn(""loading"");  uut = new ManageCollaboratorsPresenter(factoryMock, groupFactoryMock, groupServiceFacadeMock, collabServiceFacadeMock, groupAppearanceMock) { @Override String getCollaboratorNames(List<Subject> subjects) { return ""names""; }  @Override List<Subject> wrapSubjectInList(Subject subject) { return subjectListMock; }  @Override List<AddMemberToGroupCallback> createAddMemberToGroupCallbackList() { return memberToGroupCallbackListsMock; }  @Override List<Subject> excludeDefaultGroup(List<Subject> result) { return subjectListMock; }  @Override Map<Boolean, List<Subject>> mapIsGroup(List<Subject> models) { return mapIsGroupMock; }  @Override Map<Boolean, List<UpdateMemberResult>> mapIsSuccessResults(List<UpdateMemberResult> totalResults) { return mapIsSuccessMock; }  @Override ParentDeleteSubjectsCallback createParentDeleteSubjectsCallback() { return parentCallbackMock; }  @Override String getSubjectNames(List<UpdateMemberResult> userSuccesses, List<Group> groups) { return ""names""; }  @Override List<String> getCollaboratorIds(List<UpdateMemberResult> userSuccesses, List<Group> successGroups) { return stringListMock; }  @Override CollaboratorDNDHandler getCollaboratorDNDHandler() { return dndHandlerMock; }  @Override AddMemberToGroupCallback createAddMemberToGroupCallback() { return memberToGroupCallbackMock; } };  uut.collaboratorsUtil = collaboratorsUtilMock; uut.eventBus = eventBusMock; uut.view = viewMock; uut.addCollabHandlerRegistration = addCollabHandlerRegistrationMock; uut.announcer = announcerMock; uut.groupDetailsDialog = groupDetailsDialogProvider; uut.userInfo = userInfoMock; uut.permissionsDlgProvider = retainPermsDialogProvider;  parentCallback = uut.new ParentDeleteSubjectsCallback(); } "	0	0	0	0	0	1
"private void generateViewCreator(SourcePrinter sourceWriter, View view) { ViewFactoryCreator factoryCreator = getViewFactoryCreator(view); try { sourceWriter.println(""callback.onViewCreated(new ""+ factoryCreator.create()+""(id));""); } finally { factoryCreator.prepare(null, true, null); } } "	1	0	1	1	1	0
private void setNewValue() { displayTime.setValue(getValueAsString()); internalSetReadonlyFieldValue(getValueAsString()); if (changedHandler != null) { changedHandler.onChanged(getValueAsString());  } } 	0	0	0	0	0	1
"private Date parseDate(String value) { if (value == null || value.equals(EMPTY)) { return null; } SimpleDateFormat sdf = new SimpleDateFormat(TIME_FORMAT); try { return sdf.parse(value); } catch (ParseException e) { sdf = new SimpleDateFormat(TIME_FORMAT2); try { return sdf.parse(value); } catch (ParseException e2) { throw new InvalidValueException(""Time format is "" + TIME_FORMAT); } } } "	0	0	0	0	0	1
@Override public void redo(){ wire1.addWireToScene(scene); wire1.undoRemoveWire(); wire1.connect(); if (wire2 != null){ wire2.addWireToScene(scene); wire2.undoRemoveWire(); wire2.disconnect(); } this.scene.updateTreeView(wire1.getTreePinStart(), wire1.getTreePinEnd()); } 	1	1	1	1	0	0
private boolean jj_3R_391() { if (jj_scan_token(INDEXVALUESASC_IDENTIFIER)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_380() { if (jj_scan_token(CHARACTER_LITERAL)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_107() { if (jj_3R_57()) return true; Token xsp; xsp = jj_scanpos; if (jj_3R_230()) jj_scanpos = xsp; return false; } 	0	0	0	1	1	0
private boolean jj_3R_359() { if (jj_3R_73()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_433() { if (jj_scan_token(STAR)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_358() { if (jj_3R_393()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_286() { if (jj_3R_339()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_142() { if (jj_3R_250()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_285() { if (jj_3R_338()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_438() { if (jj_3R_73()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_382() { if (jj_3R_83()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_427() { if (jj_3R_73()) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_339() { if (jj_scan_token(LT)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_386() { if (jj_scan_token(EQ)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_264() { if (jj_scan_token(HOOK)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_345() { if (jj_scan_token(LIKE)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_379() { if (jj_scan_token(STRING_LITERAL)) return true; return false; } 	0	0	0	0	0	1
private boolean jj_3R_389() { if (jj_scan_token(INDEX_IDENTIFIER)) return true; return false; } 	0	0	0	0	0	1
"private void showNotification(String message) { Intent intent = new Intent(this, MainActivity.class); intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); PendingIntent pendingIntent = PendingIntent.getActivity(this, 0 /* Request code */, intent, PendingIntent.FLAG_ONE_SHOT);  Uri defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION); NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this) .setSmallIcon(R.drawable.cast_ic_notification_on) .setContentTitle(""BusService"") .setContentText(message) .setAutoCancel(true) .setSound(defaultSoundUri) .setContentIntent(pendingIntent);  NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0, notificationBuilder.build()); } "	0	0	0	0	0	1
"private boolean userSpecifiedPathVerificator(Map<Spec, SpecExecutor> specExecutorInstanceMap, FlowSpec flowSpec) { Map<Spec, SpecExecutor> tmpSpecExecutorInstanceMap = new HashMap<>(); List<String> userSpecfiedPath = Arrays.asList(optionalUserSpecifiedPath.get().split("","")); for (int i = 0; i < userSpecfiedPath.size() - 1; i++) { ServiceNode sourceNode = new BaseServiceNodeImpl(userSpecfiedPath.get(i)); ServiceNode targetNode = new BaseServiceNodeImpl(userSpecfiedPath.get(i + 1)); if (weightedGraph.containsVertex(sourceNode) && weightedGraph.containsVertex(targetNode) && weightedGraph.containsEdge(sourceNode, targetNode)) { tmpSpecExecutorInstanceMap.put(convertEdgeToJobSpec(sourceNode, targetNode, flowSpec), (((LoadBasedFlowEdgeImpl) weightedGraph.getEdge(sourceNode, targetNode)).getSpecExecutorInstance())); } else { log.error(""User Specified Path is invalid""); return false; } } specExecutorInstanceMap.putAll(tmpSpecExecutorInstanceMap); return true; } "	0	0	0	0	0	1
@Override public Stream<T> findWithScope(final Scope scope) { return getStore().findAll(this, scope ).stream().map( (final Integer i) -> { try { return getRecord( i); } catch ( final Exception ex ) { return null; } }).filter( (final T t) -> t!= null); } 	0	0	0	0	0	1
"public void setCache(final Cache cache) { final String mimeType = ""text/html""; final String encoding = ""utf-8""; if (cache != null) { NonLocalImages.clear(); NonLocalImagesUrl.clear(); String cachehtml = Database.GetDescription(cache); String html = """"; if (cache.getApiStatus() == 1)// GC.com API lite { // Load Standard HTML String nodesc = Translation.Get(""GC_NoDescription""); html = ""</br>"" + nodesc + ""</br></br></br><form action=\""download\""><input type=\""submit\"" value=\"" "" + Translation.Get(""GC_DownloadDescription"") + "" \""></form>""; } else { html = DescriptionImageGrabber.ResolveImages(cache, cachehtml, false, NonLocalImages, NonLocalImagesUrl);  if (!Config.DescriptionNoAttributes.getValue()) html = getAttributesHtml(cache) + html;  // add 2 empty lines so that the last line of description can be selected with the markers html += ""</br></br>""; }  final String FinalHtml = html;  main.mainActivity.runOnUiThread(new Runnable() {  @Override public void run() { try { DescriptionViewControl.this.loadDataWithBaseURL(""fake://fake.de"", FinalHtml, mimeType, encoding, null); } catch (Exception e) { return; // if an exception here, then this is not initializes } } });  }  try { main.mainActivity.runOnUiThread(new Runnable() {  @Override public void run() { if (DescriptionViewControl.this.getSettings() != null) DescriptionViewControl.this.getSettings().setLightTouchEnabled(true); } });  } catch (Exception e1) { // dann kann eben nicht gezoomt werden! }  // Falls nicht geladene Bilder vorliegen und eine Internetverbindung // erlaubt ist, diese laden und Bilder erneut aufl�sen if (NonLocalImagesUrl.size() > 0) { downloadThread = new Thread() { @Override public void run() {  if (downloadTryCounter > 0) { try { Thread.sleep(100); } catch (InterruptedException e) { log.error(""DescriptionViewControl.setCache()"", ""Thread.sleep fehler"", e); e.printStackTrace(); } }  boolean anyImagesLoaded = false; while (NonLocalImagesUrl != null && NonLocalImagesUrl.size() > 0) { String local, url; local = NonLocalImages.poll(); url = NonLocalImagesUrl.poll();  try { if (DescriptionImageGrabber.Download(url, local)) { anyImagesLoaded = true; } } catch (Exception e) { log.error(""DescriptionViewControl.setCache()"", ""downloadThread run()"", e); } } if (anyImagesLoaded) downloadReadyHandler.post(downloadComplete); } }; downloadThread.start(); }  if (cache != null) { cache.loadSpoilerRessources(); } } "	0	0	0	0	0	1
public T convert(S obj) throws ConversionException { List<Object> list = new LinkedList<Object>(); int len = Array.getLength(obj); for (int i = 0; i < len; i++) { list.add(Array.get(obj, i)); } return UtilGenerics.<T>cast(list); } 	1	0	1	0	1	0
"@Override String getUrl() { return ""/api-violations""; } "	0	0	0	0	0	1
"public void updateKillSourceTimedConditionEditorPane(JPanel pane, Item.TimedConditionEffect condition, final FieldUpdateListener listener) { pane.removeAll(); if (killSourceConditionBox != null) { removeElementListener(killSourceConditionBox); } if (condition == null) { pane.revalidate(); pane.repaint(); return; }  boolean writable = ((Item)target).writable; Project proj = ((Item)target).getProject();  killSourceConditionBox = addActorConditionBox(pane, proj, ""Actor Condition: "", condition.condition, writable, listener); killSourceConditionChance = addDoubleField(pane, ""Chance: "", condition.chance, writable, listener);  killSourceConditionClear = new JRadioButton(""Clear active condition""); pane.add(killSourceConditionClear, JideBoxLayout.FIX); killSourceConditionApply = new JRadioButton(""Apply condition with magnitude""); pane.add(killSourceConditionApply, JideBoxLayout.FIX); killSourceConditionMagnitude = addIntegerField(pane, ""Magnitude: "", condition.magnitude == null ? null : condition.magnitude >= 0 ? condition.magnitude : 0, 1, false, writable, listener); killSourceConditionImmunity = new JRadioButton(""Give immunity to condition""); pane.add(killSourceConditionImmunity, JideBoxLayout.FIX);  ButtonGroup radioEffectGroup = new ButtonGroup(); radioEffectGroup.add(killSourceConditionApply); radioEffectGroup.add(killSourceConditionClear); radioEffectGroup.add(killSourceConditionImmunity);  killSourceConditionTimed = new JRadioButton(""For a number of rounds""); pane.add(killSourceConditionTimed, JideBoxLayout.FIX); killSourceConditionDuration = addIntegerField(pane, ""Duration: "", condition.duration, false, writable, listener); killSourceConditionForever = new JRadioButton(""Forever""); pane.add(killSourceConditionForever, JideBoxLayout.FIX);  ButtonGroup radioDurationGroup = new ButtonGroup(); radioDurationGroup.add(killSourceConditionTimed); radioDurationGroup.add(killSourceConditionForever);  updateKillSourceTimedConditionWidgets(condition);  killSourceConditionClear.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(killSourceConditionClear, new Boolean(killSourceConditionClear.isSelected())); } }); killSourceConditionApply.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(killSourceConditionApply, new Boolean(killSourceConditionApply.isSelected())); } }); killSourceConditionImmunity.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(killSourceConditionImmunity, new Boolean(killSourceConditionImmunity.isSelected())); } });  killSourceConditionTimed.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(killSourceConditionTimed, new Boolean(killSourceConditionTimed.isSelected())); } }); killSourceConditionForever.addActionListener(new ActionListener() { @Override public void actionPerformed(ActionEvent e) { listener.valueChanged(killSourceConditionForever, new Boolean(killSourceConditionForever.isSelected())); } });  pane.revalidate(); pane.repaint(); } "	1	1	0	1	1	0
@JsonIgnore @Transient public OrderDocument getOrderDocument() { if(id == null || customer == null || receiver == null || deliveryDate == null){ return null; } return new OrderDocument(id.toString(), customer.getFathername(), receiver.getFathername(), deliveryDate.toDate(), customer.getCompany()); } 	1	0	1	0	1	0
"protected IExpr solveEquations(IAST termsEqualZeroList, IAST variables, int maximumNumberOfResults, EvalEngine engine) { try { IAST list = GroebnerBasis.solveGroebnerBasis(termsEqualZeroList, variables); if (list.isPresent()) { termsEqualZeroList = list; } } catch (JASConversionException e) { if (Config.SHOW_STACKTRACE) { e.printStackTrace(); } }  ExprAnalyzer exprAnalyzer; ArrayList<ExprAnalyzer> analyzerList = new ArrayList<ExprAnalyzer>(); IsWrongSolveExpression predicate = new IsWrongSolveExpression(); // collect linear and univariate polynomial equations: for (IExpr expr : termsEqualZeroList) { if (expr.isMember(predicate, true)) { engine.printMessage( ""Solve: the system contains the wrong object: "" + predicate.getWrongExpr().toString()); return F.NIL; } exprAnalyzer = new ExprAnalyzer(expr, variables, engine); exprAnalyzer.simplifyAndAnalyze(); analyzerList.add(exprAnalyzer); } IAST matrix = F.List(); IAST vector = F.List(); try { IAST resultList = F.List(); resultList = analyzeSublist(analyzerList, variables, resultList, maximumNumberOfResults, matrix, vector, engine); if (vector.size() > 1) { // solve a linear equation <code>matrix.x == vector</code> FieldMatrix<IExpr> augmentedMatrix = Convert.list2Matrix(matrix, vector); return RowReduce.rowReduced2RulesList(augmentedMatrix, variables, resultList, engine); }  return sortResults(resultList); } catch (NoSolution e) { if (e.getType() == NoSolution.WRONG_SOLUTION) { return F.List(); } return F.NIL; } } "	0	0	0	0	0	1
public void outputHelpMessage(CommandType command) { // todo Help command should not be handled here if ((command == null) || (command == CommandType.HELP)) { printTableWithBorder(1, HelpMessage.EXIT_INDEX, HelpMessage.TABLE); } else {  switch (command) { case ADD : printTableWithBorder(HelpMessage.ADD_START_INDEX, HelpMessage.ADD_END_INDEX, HelpMessage.TABLE); break; case ALIAS : printTableWithBorder(HelpMessage.ALIAS_INDEX, HelpMessage.ALIAS_INDEX, HelpMessage.TABLE); break; case ALIAS_ADD : printTableWithBorder(HelpMessage.ALIAS_ADD_INDEX, HelpMessage.ALIAS_ADD_INDEX, HelpMessage.TABLE); break; case ALIAS_DELETE : printTableWithBorder(HelpMessage.ALIAS_DELETE_INDEX, HelpMessage.ALIAS_DELETE_INDEX, HelpMessage.TABLE); break; case DELETE : printTableWithBorder(HelpMessage.DELETE_INDEX, HelpMessage.DELETE_INDEX, HelpMessage.TABLE); break; case DONE : printTableWithBorder(HelpMessage.DONE_INDEX, HelpMessage.DONE_INDEX, HelpMessage.TABLE); break; case EXIT : printTableWithBorder(HelpMessage.EXIT_INDEX, HelpMessage.EXIT_INDEX, HelpMessage.TABLE); break; case HISTORY : printTableWithBorder(HelpMessage.HISTORY_INDEX, HelpMessage.HISTORY_INDEX, HelpMessage.TABLE); break; case HISTORY_CLEAR : printTableWithBorder(HelpMessage.HISTORY_CLEAR_INDEX, HelpMessage.HISTORY_CLEAR_INDEX, HelpMessage.TABLE); break; case HISTORY_UNDO : printTableWithBorder(HelpMessage.HISTORY_UNDO_INDEX, HelpMessage.HISTORY_UNDO_INDEX, HelpMessage.TABLE); break; case MODIFY : printTableWithBorder(HelpMessage.MODIFY_INDEX, HelpMessage.MODIFY_INDEX, HelpMessage.TABLE); break; case SEARCH : printTableWithBorder(HelpMessage.SEARCH_INDEX, HelpMessage.SEARCH_INDEX, HelpMessage.TABLE); break; case VIEW : printTableWithBorder(HelpMessage.VIEW_INDEX, HelpMessage.VIEW_INDEX, HelpMessage.TABLE); break;  default : assert (false);  } }  } 	1	0	1	0	1	0
"public ProcessRuntime call(String filename) throws Exception { stream.err().println(""load(String) command is deprecated. Use '$load.threaddump(String)' instead.""); return new ThreadDumpFactory().fromFile(new File(filename)); } "	0	0	0	1	1	0
"@Test public void test() throws Exception { File file = Util.resourceFile(ThreadDumpFactoryTest.class, ""openjdk-1.7.0_60.log""); stdin(""load('"" + file.getAbsolutePath() + ""').threads.size();"" + Util.NL); run(""groovysh"");  assertThat(out.toString(), containsString("" 35%n"")); assertThat(this, succeeded()); assertThat(err.toString(), containsString(""load(String) command is deprecated. Use '$load.threaddump(String)"")); } "	0	0	0	1	1	0
"private static void updateKillDeathRatio(){ int i, gcm, first = totalKills, second = Health.timesDied;  i = (first >= second) ? first : second;  while (i != 0) { if (first % i == 0 && second % i == 0) { gcm = i; break; } i--; }  killDeathRatio = first/gcm + "":"" + second/gcm; } "	0	0	0	1	1	0
"@Override public void messageArrived(String topic, MqttMessage message) throws Exception { InfluuntLogger.log(NivelLog.SUPERDETALHADO, TipoLog.COMUNICACAO,""Mensagem recebida no topico:"" +topic); sendToBroker(message); } "	0	0	0	1	0	0
public int getQuantity() { return quantity; } 	0	0	0	0	0	1
public void draw(Graphics g, int width, int height) { checkNextPlayer(); camera.getPanelCenterer().recenter(width, height); if (game.getSelectedX() != -1 && game.getSelectedY() != -1) { camera.getPanelCenterer().centerOnTile(game.getSelectedX(), game.getSelectedY()); } g2d = (Graphics2D)g; tileDrawer.drawTiles(); tileDrawer.drawMovingTiles(); structureDrawer.drawBases(); armyDrawer.drawArmies(); unitDrawer.drawUnits(); selectedDrawer.drawSelectedItemOutline(); } 	1	1	0	1	1	0
"@Override public Void recover(RetryContext context) throws Exception { populateRecoveryChannel(); ErrorMessage errorMessage = this.errorMessageStrategy.buildErrorMessage(context); if (this.logger.isDebugEnabled() && errorMessage.getPayload() instanceof MessagingException) { MessagingException exception = (MessagingException) errorMessage.getPayload(); this.logger.debug(""Sending ErrorMessage: failedMessage: "" + exception.getFailedMessage(), exception); } this.messagingTemplate.send(errorMessage); return null; } "	0	0	0	0	0	1
public <Model, Data> ModelLoader<Model, Data> build(Class<Model> modelClass, Class<Data> dataClass) { List<ModelLoader<Model, Data>> loaders = new ArrayList<>(); boolean ignoredAnyEntries = false; for (Entry<?, ?> entry : entries) { // Avoid stack overflow recursively creating model loaders by only creating loaders in // recursive requests if they haven't been created earlier in the chain. For example: // A Uri loader may translate to another model, which in turn may translate back to a Uri. // The original Uri loader won't be provided to the intermediate model loader, although other // Uri loaders will be. if (alreadyUsedEntries.contains(entry)) { ignoredAnyEntries = true; continue; } if (entry.handles(modelClass, dataClass)) { alreadyUsedEntries.add(entry); loaders.add(this.<Model, Data>build(entry)); alreadyUsedEntries.remove(entry); } } if (loaders.size() > 1) { return factory.build(loaders); } else if (loaders.size() == 1) { return loaders.get(0); } else { // Avoid crashing if recursion results in no loaders available. The assertion is supposed to // catch completely unhandled types, recursion may mean a subtype isn't handled somewhere // down the stack, which is often ok. if (ignoredAnyEntries) { return emptyModelLoader(); } else { throw new NoModelLoaderAvailableException(modelClass, dataClass); } } } 	0	0	0	0	0	1
List<Class<?>> getDataClasses(Class<?> modelClass) { List<Class<?>> result = new ArrayList<>(); for (Entry<?, ?> entry : entries) { if (!result.contains(entry.dataClass) && entry.handles(modelClass)) { result.add(entry.dataClass); } } return result; } 	0	0	0	0	0	1
"@PostConstruct public void start() { startAsync(); awaitRunning(); queueSizeLogger.scheduleWithFixedDelay(new Runnable() { @Override public void run() { if (queue.size() > 0 || logEmptyQueue()) { LOG.info(""Queue size: "" + queue.size()); } } }, 5, loggingFrequencyMs(), TimeUnit.SECONDS); } "	0	0	0	0	0	1
"public void editButtonActionPerformed() { if(nodeAddr64Field.getText().equals("""") && nodeAddrField.getText().equals("""")) { // no address, just return. return; }  // to update the node's associated XBee Device, we have to // create a new one, as the library provides no way to update // the RemoteXBeeDevice object.  // Check that a node with this address does not exist // if the 64 bit address field is blank, use the ""Unknown"" address"". XBee64BitAddress guid; if(!(nodeAddr64Field.getText().equals(""""))) { byte GUID[] = jmri.util.StringUtil.bytesFromHexString(nodeAddr64Field.getText()); guid = new XBee64BitAddress(GUID); } else { guid = XBee64BitAddress.UNKNOWN_ADDRESS; } // if the 16 bit address field is blank, use the ""Unknown"" address"". XBee16BitAddress address; if(!(nodeAddrField.getText().equals(""""))){ byte addr[] = jmri.util.StringUtil.bytesFromHexString(nodeAddrField.getText()); address = new XBee16BitAddress(addr); } else { address = XBee16BitAddress.UNKNOWN_ADDRESS; } String Identifier = nodeIdentifierField.getText(); // create the RemoteXBeeDevice for the node. RemoteXBeeDevice remoteDevice = remoteDevice = new RemoteXBeeDevice(xtc.getXBee(), guid,address,Identifier); // get a XBeeNode corresponding to this node address if one exists XBeeNode existingNode = (XBeeNode) xtc.getNodeFromXBeeDevice(remoteDevice); if (existingNode != null) { javax.swing.JOptionPane.showMessageDialog(this,Bundle.getMessage(""Error1"",remoteDevice),Bundle.getMessage(""EditNodeErrorTitle""),JOptionPane.ERROR_MESSAGE); return; } // save the old remote device RemoteXBeeDevice oldDevice = ((XBeeNode)curNode).getXBee(); // and then add the new device to the network xtc.getXBee().getNetwork().addRemoteDevice(remoteDevice);  // remove the old one from the network xtc.getXBee().getNetwork().removeRemoteDevice(oldDevice);  //and update the current node. ((XBeeNode)curNode).setXBee(remoteDevice);  parent.nodeListChanged();  this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING)); } "	1	0	1	1	0	0
"public void updateDeviceInfoStatus(DeviceIdentifier deviceIdentifier) throws OperationManagementException { List<? extends Operation> pendingDeviceInfoOperations; try { pendingDeviceInfoOperations = WindowsAPIUtils.getPendingOperations(deviceIdentifier); } catch (DeviceManagementException e) { throw new OperationManagementException(""Error occurred in getting pending operation.""); } for (Operation operation : pendingDeviceInfoOperations) { if (PluginConstants.OperationCodes.DEVICE_INFO.equals(operation.getCode())) { operation.setStatus(Operation.Status.COMPLETED); updateStatus(deviceIdentifier.getId(), pendingDeviceInfoOperations); } } } "	0	0	0	0	0	1
"@Test public void values() { model .permit(""field1"") .value(""field1"", 495) .value(""field2"", ""945725"");  assertEquals(1, model.values().size()); model.permit(""field2""); assertEquals(2, model.values().size());  List<Object> values = model.values().stream().collect(Collectors.toList()); assertEquals(495, values.get(0)); assertEquals(""945725"", values.get(1)); } "	1	0	1	1	1	0
@Override public List<PartitionOffset> getPartitionOffsets() { return messageMetadatas.stream() .map(m -> new PartitionOffset(KafkaTopicName.valueOf(m.getTopic()), m.getOffset(), m.getPartition())) .collect(Collectors.toList()); } 	0	0	0	0	0	1
"private void downloadWebstartResources(String fileAddress) { HttpURLConnection connection = null; InputStream stream = null;  try { connection = (HttpURLConnection)new URL(fileAddress).openConnection(); stream = connection.getInputStream(); } catch (UnknownHostException e) { System.err.println(""Could not connect to remote host "" + e.getMessage() + "" to download writable resources.""); tryRunningShootOFF(); return; } catch (IOException e) { if (connection != null) connection.disconnect();  System.err.println(""Failed to get stream to download writable resources file""); e.printStackTrace(); tryRunningShootOFF(); return; }  long remoteFileLength = connection.getContentLength();  if (remoteFileLength == 0) { System.err.println(""Remote writable resources file query returned 0 len""); }  if (resourcesFile.exists() && remoteFileLength == resourcesFile.length()) { connection.disconnect(); runShootOFF(); return; }  final InputStream remoteStream = stream; Task<Boolean> task = new Task<Boolean>() { @Override public Boolean call() throws InterruptedException { BufferedInputStream bufferedInputStream = new BufferedInputStream(remoteStream); FileOutputStream fileOutputStream = null;  try { fileOutputStream = new FileOutputStream(resourcesFile);  long totalDownloaded = 0; int count; byte buffer[] = new byte[1024];  while ((count = bufferedInputStream.read(buffer, 0, buffer.length)) != -1) { fileOutputStream.write(buffer, 0, count); totalDownloaded += count; updateProgress(((double)totalDownloaded / (double)remoteFileLength) * 100, 100); }  fileOutputStream.close();  updateProgress(100, 100); } catch (IOException e) { if (fileOutputStream != null) { try { fileOutputStream.close(); } catch (IOException e1) { e1.printStackTrace(); } }  System.err.println(""Failed to download writable resources file""); e.printStackTrace(); return false; }  return true; } };  final ProgressDialog progressDialog = new ProgressDialog(""Downloading Resources..."", ""Download required resources (targets, sounds, etc.)..."", task); final HttpURLConnection con = connection; task.setOnSucceeded((value) -> { progressDialog.close(); con.disconnect(); if (task.getValue()) { extractWebstartResources(); } });  new Thread(task).start(); } "	0	0	0	0	0	1
"public static boolean loginWithUsernamePassword(String username, String password) { UsernamePasswordToken token = new UsernamePasswordToken(username, password); logger.info(""Try to login with Username Password: "" + token.toString()); try { subject.login(token); } catch (AuthenticationException e) { logger.warn(""Auth failed!""+ e.getMessage()); //            e.printStackTrace(); return false; } if (subject.isAuthenticated()){ logger.info(""loginWithUsernamePassword: Authentication success from ""+ subject.getPrincipals().getRealmNames()); isAuthcSuccess = true; }else { logger.info(""Authenticated Failed""); isAuthcSuccess = false; } return isAuthcSuccess; //断言用户已经登录 } "	0	0	0	0	0	1
"private static String faPrefix(final String cssClass) { return cssClass.startsWith(""fa-"") ? cssClass : ""fa-"" + cssClass; } "	0	0	0	0	0	1
"private void runBackup() { boolean backupPerformed = false; Translator translator = AppContext.getTranslator(); TargetTranslation[] targetTranslations = translator.getTargetTranslations(); for(TargetTranslation t:targetTranslations) {  // commit pending changes try { t.commit(); } catch (Exception e) { Logger.e(this.getClass().getName(), ""Failed to commit changes before backing up"", e); continue; }  // run backup if there are translations if(t.numTranslated() > 0) {  // retreive commit hash String tag; try { tag = t.getCommitHash(); } catch (Exception e) { Logger.w(this.getClass().getName(), ""Failed to read commit hash"", e); continue; }  // check if backup is required if (tag != null) { File primaryBackupDir = new File(AppContext.getPublicDirectory(), ""backups/"" + t.getId() + ""/""); File primaryBackupFile = new File(primaryBackupDir, tag + ""."" + Translator.ARCHIVE_EXTENSION); File downloadBackupDir = new File(AppContext.getPublicDownloadsDirectory(), ""backups/"" + t.getId() + ""/""); File downloadBackupFile = new File(downloadBackupDir, tag + ""."" + Translator.ARCHIVE_EXTENSION); // e.g. ../../backups/uw-obs-de/[commit hash].tstudio if (!downloadBackupFile.exists()) {  // peform backup File archive = new File(AppContext.getPublicDownloadsDirectory(), t.getId() + "".temp."" + Translator.ARCHIVE_EXTENSION); try { t.applyDefaultTranslatorsIfNoneSpecified(); translator.exportArchive(t, archive); } catch (Exception e) { Logger.e(this.getClass().getName(), ""Failed to export the target translation "" + t.getId(), e); continue; } if (archive.exists() && archive.isFile()) { // move into backup FileUtils.deleteQuietly(downloadBackupDir); FileUtils.deleteQuietly(primaryBackupDir); downloadBackupDir.mkdirs(); primaryBackupDir.mkdirs(); try { // backup to downloads directory FileUtils.copyFile(archive, downloadBackupFile); // backup to a slightly less public area (used for auto restore) FileUtils.copyFile(archive, primaryBackupFile); backupPerformed = true; } catch (IOException e) { Logger.e(this.getClass().getName(), ""Failed to copy the backup archive for target translation: "" + t.getId(), e); } archive.delete(); } else { Logger.w(this.getClass().getName(), ""Failed to export the target translation: "" + t.getId()); } } } else { Logger.w(this.getClass().getName(), ""Could not find the commit hash""); } } }  if(backupPerformed) { onBackupComplete(); } } "	0	0	0	0	0	1
@Test public void shouldEvictOnOverflow() throws Throwable { // When & Then assertThat( appendSequence( 1, 1, 1, 1, 1, 1, 1 ), yieldsSet( 1 )); assertThat( appendSequence( 1, 2, 3, 4, 1, 1, 1 ), yieldsSet( 1, 3, 4 )); assertThat( appendSequence( 1, 2, 6, 4, 1, 2, 2, 2, 5, 5 ), yieldsSet( 1, 2, 5 )); } 	0	0	0	1	0	0
public Set<Type> recentItems() { return index.keySet(); } 	0	0	0	1	0	0
"public void showProjectTimetable(String projectId) { System.out.println(""Wybrano projekt: "" + projectId); this.chosenProject = Integer.valueOf(projectId); System.out.println(""Aby rozpocząć monitorowanie pracy wybierz 1 \n Aby zakończyć działanie aplikacjiwybierz 2""); int userInput = readUserInput(); while (userInput != 1 && userInput != 2) { System.out.println(""Zły wybór - wybierz ponownie""); userInput = readUserInput(); } if(userInput == 1) { timerController = new TimerController(); timerController.startMonitoringTime(); timeIsMonitoring(); } } "	0	0	0	1	0	0
private void executeOnStartActions(){ int actionIndexOnStart=Integer.parseInt(sharedPrefs.getString(getString(R.string.key_prefActionOnStart), Integer.toString(ActionOnStartNone)));  if(actionIndexOnStart==ActionOnStartNone){ return; } else if(actionIndexOnStart==ActionOnStartSurahList){ Intent intent = new Intent(MainActivity.this, SuraListActivity.class); startActivityForResult(intent, REQUEST_SURAH_LIST); } else if(actionIndexOnStart==ActionOnStartRandomAyah){ showARandomAyah=true; } } 	0	0	0	0	0	1
private <T> void setPropertyValue(final String propertyName, final T value) { try { final Method method = this.getSetter(propertyName, value.getClass()); if (method != null) { // set the new value with the setter method.invoke(this, value); } else { // if no setter is present, try to set the field directly for (final Field field : this.getClass().getDeclaredFields()) { if (field.getName().equals(propertyName) && field.getType().equals(value.getClass())) { if (!field.isAccessible()) { field.setAccessible(true); }  field.set(this, value); } } } } catch (final SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) { log.log(Level.SEVERE, e.getMessage(), e); } } 	1	0	1	0	1	0
"public void uploadActionInitiated(String title, String description) { Toast startingToast = Toast.makeText(getApplicationContext(), R.string.uploading_started, Toast.LENGTH_LONG); startingToast.show();  if (cacheFound == false) { //Has to be called after apiCall.request() cacheObj.cacheData.cacheCategory(); Log.d(TAG, ""Cache the categories found""); }  uploadController.startUpload(title, mediaUri, description, mimeType, source, new UploadController.ContributionUploadProgress() { public void onUploadStarted(Contribution contribution) { ShareActivity.this.contribution = contribution; showPostUpload(); } }); } "	0	0	0	0	0	1
"public void choose(final List<MMXPollOption> chosenOptions, final MMX.OnFinishedListener<MMXMessage> listener) { //if(null == chosenOptions && chosenOptions.isEmpty()) { //  handleParameterError(""option is required"", listener); //  return; //}  if(!allowMultiChoices && chosenOptions.size() > 1) { handleParameterError(""Only one option is allowed"", listener); return; }  List<SurveyAnswer> answers = null; if(null != chosenOptions) { answers = new ArrayList<>(chosenOptions.size()); for (MMXPollOption option : chosenOptions) { answers.add(new SurveyAnswer.SurveyAnswerBuilder().questionId(questionId) .selectedOptionId(option.getOptionId()) .build()); } }  getPollService().submitSurveyAnswers(this.pollId, new SurveyAnswerRequest.SurveyAnswerRequestBuilder().answers(answers).build(), new Callback<Void>() { @Override public void onResponse(Response<Void> response) { if(response.isSuccess()) { // Update result MMXPollAnswer pollAnswer = createAnswer(chosenOptions); updateResults(pollAnswer);  // Publish message if(!hideResultsFromOthers) { MMXMessage message = new MMXMessage.Builder().channel(channel) .payload(pollAnswer) .build(); publishChannelMessage(message, new MMXChannel.OnFinishedListener<String>() { @Override public void onSuccess(String result) { if (null != listener) { listener.onSuccess(null); } }  @Override public void onFailure(MMXChannel.FailureCode code, Throwable throwable) { handleError(code, throwable, listener); } }); } else { if (null != listener) { listener.onSuccess(null); } }  // Reset my votes if(null != myVotes) { myVotes = new ArrayList<MMXPollOption>(); } myVotes.clear(); if(null != chosenOptions) { myVotes.addAll(chosenOptions); } } else { Log.e(TAG, ""Failed to choose option for poll due to "" + response.message()); handleError(MMXChannel.FailureCode.GENERIC_FAILURE, new Exception(response.message()), listener); } }  @Override public void onFailure(Throwable throwable) { Log.e(TAG, ""Failed to choose option for poll due to "" + throwable.getMessage()); handleError(MMXChannel.FailureCode.GENERIC_FAILURE, throwable, listener); } }).executeInBackground(); } "	1	0	1	1	0	0
"@AfterViews public void recoverImage() { // This activity may have been destroyed by the Camera activity ; if it's the case, // the imagePaths is not null, as we saved it. if (null == imagePaths) { // Only initialize if it has not been restored from bundle state. imagePaths = new ArrayList<>(); }  // Handle images sent to this app by the ""share"" feature Intent intent = getIntent(); String action = intent.getAction(); String type = intent.getType(); if (action.equals(Intent.ACTION_SEND) && type != null) { if (type.startsWith(""image/"")) { // Handle a single image being sent Uri imageUri = (Uri) intent.getParcelableExtra(Intent.EXTRA_STREAM); Log.d(""G2P"", ""Add new item with shared image URl `"" + imageUri.toString() + ""`.""); String imagePath = getPathFromImageURI(imageUri); Log.d(""G2P"", ""... which translates into path `"" + imagePath + ""`.""); imagePaths.add(imagePath); fillThumbnail(); } else { // The intent filter in the manifest should ensure that we never EVER throw this. throw new CriticalException(""You shared something that is not an image. Nooope.""); } //        } else if (Intent.ACTION_SEND_MULTIPLE.equals(action) && type != null) { //            if (type.startsWith(""image/"")) { //                handleSendMultipleImages(intent); // Handle multiple images being sent //            } } else { // /!\ we try not to do that anymore, it's too unreliable. // Directly try to grab a new image if and only if there are no files paths stored. // Otherwise, it means that `onActivityResult` will be called.. if (imagePaths.size() == 0) { try { // Check if there's a camera available // todo: propose the gallery picker? if (!app.hasCameraSupport()) { app.toast(getString(R.string.toast_no_camera_available)); finish(); return; } // Launch the camera to add a new picture requestNewPicture(); } catch (CriticalException ex) { Log.e(""G2P"", ""Failed to add a new picture.""); ex.printStackTrace(); app.toasty(getString(R.string.toast_new_item_file_error)); finish(); } } else { fillThumbnail(); } } } "	1	1	1	1	0	0
protected String formatCredentials(ChallengeResponse challenge) throws GeneralSecurityException { // Data buffer StringBuffer sb = new StringBuffer();  // Indexes buffer StringBuffer isb = new StringBuffer(); String timeIssued = Long.toString(System.currentTimeMillis()); int i = timeIssued.length(); sb.append(timeIssued);  isb.append(i);  String identifier = challenge.getIdentifier(); sb.append('/'); sb.append(identifier);  i += identifier.length() + 1; isb.append(',').append(i);  sb.append('/'); sb.append(challenge.getSecret());  // Store indexes at the end of the string sb.append('/'); sb.append(isb);  return Base64.encode(CryptoUtils.encrypt(getEncryptAlgorithm(), getEncryptSecretKey(), sb.toString()), false); } 	0	0	0	0	0	1
"void test() { loadDungeon(""test_dungeon""); } "	0	0	0	0	0	1
@Override public boolean equals(final Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; BillingDetails other = (BillingDetails) obj; if (id == null || !id.equals(other.id)) return false; return true; } 	1	1	1	0	1	0
@Override public String visit(ProfileValue value) throws OwsExceptionReport { return OmConstants.OBS_TYPE_PROFILE_OBSERVATION; } 	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") @Deprecated public List<TObservableProperty> getTObservablePropertyObjects(final Session session) { Criteria criteria = session.createCriteria(ObservableProperty.class); LOGGER.debug(""QUERY getTObservablePropertyObjects(): {}"", HibernateHelper .getSqlString(criteria)); return criteria.list(); } "	0	0	0	0	0	1
"private void determineTargetBatches() throws Exception { String dirToProcess = null; String dirToProcessInto = null;  if (tempDestDir != null) dirToProcessInto = tempDestDir; else if (destDir != null && isDestDav.equals(false)) dirToProcessInto = destDir; else throw new IllegalArgumentException(""Don't know where to put files!"");  Collection<Integer> bibids = new HashSet<Integer>();  if (tempBibSrcDir != null) dirToProcess = tempBibSrcDir; else if (bibSrcDir != null && isBibSrcDav.equals(false)) dirToProcess = bibSrcDir; if (dirToProcess != null) { System.out.println(dirToProcess); DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(dirToProcess)); for (Path file: stream) bibids.addAll(collectBibidsFromXmlFile(file)); } else { bibids.addAll(collectBibidsFromXmlFile(Paths.get(bibSrcFile))); }  // Sort list of bib record IDs and determine ranges for batches of size groupsize. System.out.println(bibids.size() + "" bibids in set.\n""); Integer[] bibs = bibids.toArray(new Integer[ bibids.size() ]); bibids.clear(); Arrays.sort( bibs ); int batchCount = (bibs.length / groupsize) + 1; for (int i3 = 1; i3 <= batchCount; i3++) { Integer minBibid; if (i3*groupsize <= bibs.length) minBibid = bibs[(i3)*groupsize]; else minBibid = bibs[bibs.length - 1]; System.out.println(i3+"": ""+minBibid); OutputStreamWriter  out = openFileForWrite(dirToProcessInto+""/""+ destFilenamePrefix+"".""+i3+outFileExt); outsById.put(minBibid, out);  }  } "	1	1	1	1	0	0
"private void setUserPickerObjectBasedOnCurrentUser() { if (!"""".equals(currentUser)) { userPickerObject = ComponentAccessor.getUserUtil().getUserByKey(currentUser); AvatarService avatarService = ComponentAccessor.getComponent(AvatarService.class); setAvatarURL(avatarService.getAvatarURL( ComponentAccessor.getJiraAuthenticationContext().getUser(), userPickerObject, Avatar.Size.SMALL).toString()); } else { userPickerObject = null; } } "	0	1	1	1	1	0
@Override public void doProcessOutput(ItemStack output) { BlockPos pos = getPos().offset(facing,1).offset(facing.rotateY(), 2).offset(EnumFacing.DOWN, 1); TileEntity inventoryTile = this.worldObj.getTileEntity(pos); if(inventoryTile!=null) output = Utils.insertStackIntoInventory(inventoryTile, output, facing.getOpposite()); if(output!=null) Utils.dropStackAtPos(worldObj, pos, output, facing); } 	0	0	0	0	0	1
"OneMeasurement constructOneMeasurement(String name) { switch (_measurementType) { case HISTOGRAM: return new OneMeasurementHistogram(name, _props); case HDRHISTOGRAM: return new OneMeasurementHdrHistogram(name, _props); case HDRHISTOGRAM_AND_HISTOGRAM: return new TwoInOneMeasurement(name, new OneMeasurementHdrHistogram(""Hdr""+name, _props), new OneMeasurementHistogram(""Bucket""+name, _props)); case HDRHISTOGRAM_AND_RAW: return new TwoInOneMeasurement(name, new OneMeasurementHdrHistogram(""Hdr""+name, _props), new OneMeasurementHistogram(""Raw""+name, _props)); case TIMESERIES: return new OneMeasurementTimeSeries(name, _props); case RAW: return new OneMeasurementRaw(name, _props); default: throw new AssertionError(""Impossible to be here. Dead code reached. Bugs?""); } } "	0	0	0	0	0	1
"@Test public void shouldFindApiPageByApiIdAndHomepageTrue() throws Exception { Collection<Page> pages = pageRepository.findApiPageByApiIdAndHomepage(""my-api"", true); assertNotNull(pages); assertEquals(1, pages.size()); assertEquals(""home"", pages.iterator().next().getId()); } "	0	0	0	1	0	0
@Override @SideOnly(Side.CLIENT) public IIcon getIconFromDamage(int damage) { return damage > 0 ? icons[damage - 1] : icons[damage]; } 	0	0	0	0	0	1
"public static ArrayList<QueryResult> query(String artist, String title) { ArrayList<QueryResult> result = new ArrayList<QueryResult>(); String xml = getHttpResponse(buildQueryUrl(artist, title)); if (xml == null) { Log.e(TAG, ""Error: cannot get xml response from server""); return null; } Log.v(TAG, ""xml is "" + xml);  Document doc = null; try { DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder(); InputSource is = new InputSource(new StringReader(xml)); doc = builder.parse(is); NodeList nl = doc.getElementsByTagName(QueryResult.ITEM_LRC);  for (int i = 0; i < nl.getLength(); i++) { Element elem = (Element) nl.item(i); String id = elem.getAttribute(QueryResult.ATTRIBUTE_ID); String art = elem.getAttribute(QueryResult.ATTRIBUTE_ARTIST); String tit = elem.getAttribute(QueryResult.ATTRIBUTE_TITLE); result.add(new QueryResult(Integer.parseInt(id), art, tit)); Log.v(TAG, ""======== id = "" + id + "", art = "" + art + "", title = "" + tit); } } catch (ParserConfigurationException e) { Log.e(""Error: "", e.getMessage()); } catch (SAXException e) { Log.e(""Error: "", e.getMessage()); } catch (IOException e) { Log.e(""Error: "", e.getMessage()); } return result; } "	1	0	1	0	1	0
"@SuppressWarnings(""SpellCheckingInspection"") @Override protected void doUpdate() { switch(getVersion()) { case 1: lang.set(""Language.Ingame.Cooldown"", ""Please wait till you reopen your backpack.""); case 2: lang.set(""Language.Ingame.InvalidBackpack"", lang.getString(""Language.Ingame.IvalidBackpack"", ""Invalid backpack."")); case 3: lang.set(""Language.Console.MinecraftVersionNotCompatible"", ""Your minecraft version (MC %1$s) is currently not compatible with this plugins version (%2$s). Please check for updates!""); case 4: lang.set(""Language.Ingame.WrongGameMode"", ""You are not allowed to open your backpack in your current game-mode.""); break; } } "	0	0	0	0	0	1
private void logNewVariables(ThreadReference thread, Step lastStep, Step newStep) throws AbsentInformationException {  if (lastStep.location != null) { List<String> usedVariables = sourceParser.getVariables( lastStep.location.sourcePath(), lastStep.location.lineNumber());  if (usedVariables != null) { HashSet<String> usedVarSet = new HashSet<String>(usedVariables); for (String variable : usedVarSet) { if (newStep.knownVariables.add(variable)) { logger.logVarCreated(variable, getVariableType(thread, variable)); } } } } } 	0	0	0	0	0	1
public void draw(Graphics2D g) {  for (int row = 0; row < numRowsToDraw; row++) {  // all rows are drawn if (row >= numRows) break;  for (int col = 0; col < numColsToDraw; col++) {  // all columns are drawn if (col >= numCols) break;  // don't bother drawing it, cause its transparent (first block // in .gif is a transparent image) if (map[row][col] == 0) continue;  // translate the tile at the map coordinate into a coordinate in // the tiles coordinate int rc = map[row][col]; int r = rc / numTilesAcross; int c = rc % numTilesAcross;  g.drawImage(tiles[r][c].getImage(), (int) x + col * tileSize, (int) y + row * tileSize, null);  }  }  } 	0	0	0	0	0	1
public boolean isOwnConversation() { return isAgent ? conversationVO.getAgentId().equals(user.getProfileDetails().getId()) : true; } 	0	0	0	0	0	1
PersoniumContext getContext() { return this.context; } 	0	0	0	0	0	1
String getAccessType() { return this.accessType; } 	0	0	0	0	0	1
public List<String> calcTokenFrequencyForAllDocs(List<List<String>> engineeredDocuments) { List<String> result = new ArrayList<>(); HashMap<String, Integer> tokenFrequencies = new HashMap<>(); for (List<String> doc : engineeredDocuments) { for(String token : doc) { if (tokenFrequencies.containsKey(token)) { tokenFrequencies.put(token, tokenFrequencies.get(token)+1); } else { tokenFrequencies.put(token, 1); } } } List<Pair<String, Integer>> tokensWithFrequencies = new ArrayList<>(); for (String token : tokenFrequencies.keySet()) { tokensWithFrequencies.add(new Pair<String, Integer>(token, tokenFrequencies.get(token))); } Collections.sort(tokensWithFrequencies, new Comparator<Pair<String, Integer>>() { @Override public int compare(Pair<String, Integer> o1, Pair<String, Integer> o2) { return o1.getSecond() - o2.getSecond(); } }); for (Pair<String, Integer> tokenWithFreq : tokensWithFrequencies) { result.add(tokenWithFreq.getFirst()); } return result; } 	1	1	1	1	0	0
ArrayList<Integer> calculateValues(int min, int max, int step) {  ArrayList<Integer> result = new ArrayList<>(); int pos = min; while (pos <= max) { result.add(pos); pos += step; }  // Set max Y axis label in case isn't already there if (result.get(result.size() - 1) < max) result.add(max);  return result; } 	0	0	0	1	0	0
private String convertDateToString (Date date){ SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(AMERICAN_DATE_FORMAT);  return DATE_FORMAT.format(startDate); } 	1	0	1	1	1	0
@Override public boolean equals(@Nullable Object o) { if (this == o) { return true; } if (!(o instanceof OperationDescription)) { return false; }  OperationDescription that = (OperationDescription) o;  if (name() != null ? !name().equals(that.name()) : that.name() != null) { return false; } if (summary() != null ? !summary().equals(that.summary()) : that.summary() != null) { return false; } if (category() != that.category()) { return false; } if (icon() != null ? !icon().equals(that.icon()) : that.icon() != null) { return false; } return aliases() != null ? aliases().equals(that.aliases()) : that.aliases() == null;  } 	0	0	0	0	0	1
public LuuTruModel[] getResults() { return results; } 	0	0	0	0	0	1
@Override @Deprecated public Maybe<Channel> fromKey(String key) { for (Channel channel : channels.get()) { if (channel.getKey().equals(key)) { return Maybe.just(channel); } } return Maybe.nothing(); } 	0	1	0	0	0	0
"private void setMathQuestions() { List<String> desc = new ArrayList<>(Arrays.asList( ""1 + 1 = ?"", ""2 * 3 = ?"", ""10 % 10 = ?"")); List<List<String>> options = asList( asList(""1"", ""2"", ""3"", ""4""), asList(""3"", ""4"", ""5"", ""6""), asList(""0"", ""1"", ""2"", ""3"") ); List<String> answers = new ArrayList<>(Arrays.asList( ""2"", ""6"", ""0"")); mathQuestions = new QuestionList(desc, options, answers); } "	1	1	1	1	0	0
"@Override public void onResponse(Call<SendPassword> call, Response<SendPassword> response) { SendPassword obj = response.body(); if (obj != null && response.isSuccess()) { boolean returnedResponse = obj.isSuccess();  if (returnedResponse) { Toast.makeText(ForgetPassword.this, ""Password changed Successfully"", Toast.LENGTH_LONG).show(); //  Toast.makeText(ForgetPassword.this,pwd , Toast.LENGTH_SHORT).show(); startActivity(new Intent(getApplicationContext(), LoginActivity.class)); loadToast.success(); finish(); } else { loadToast.error(); Toast.makeText(ForgetPassword.this, ""Internal error"", Toast.LENGTH_SHORT).show(); } }  else { loadToast.error(); Toast.makeText(ForgetPassword.this, ""Server error"", Toast.LENGTH_SHORT).show(); }  } "	0	1	0	0	0	0
@Override public int hashCode() { return Objects.hash(name, description, retentionTime, migratedFromJsonType, trackingEnabled, ack, contentType, jsonToAvroDryRunEnabled, schemaVersionAwareSerializationEnabled); } 	0	0	0	0	0	1
"public boolean dischargePatient(String uuid) { try { Template freemarkerTemplate = freemarkerConfiguration.getTemplate(""discharge_patient.ftl""); Map<String, Object> programData = new HashMap<>(); programData.put(""patientUUID"", uuid);  StringWriter stringWriter = new StringWriter(); freemarkerTemplate.process(programData, stringWriter); String requestJson = stringWriter.toString();  HttpResponse<JsonNode> response = Unirest.post(url + DISCHARGE_PATIENT_URL) .basicAuth(username, password) .header(""content-type"", ""application/json"") .body(requestJson) .asJson(); if (response.getStatus() != 200 && response.getStatus() != 201) throw new BahmniAPIException(""Discharge patient through API Failed!!""); } catch (Exception e) { throw new BahmniAPIException(e); } return true; } "	0	0	0	0	0	1
"private void postObservations() throws AuthenticationException, CancelSyncException { Observation observation; // query observations where _updated_at > updated_at Cursor c = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, ""_updated_at > _synced_at AND _synced_at IS NOT NULL AND user_login = '""+mLogin+""'"", null, Observation.SYNC_ORDER); int updatedCount = c.getCount(); mApp.sweepingNotify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.syncing_observations), String.format(getString(R.string.syncing_x_observations), c.getCount()), getString(R.string.syncing)); // for each observation PUT to /observations/:id c.moveToFirst(); while (c.isAfterLast() == false) { mApp.notify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.updating_observations), String.format(getString(R.string.updating_x_observations), (c.getPosition() + 1), c.getCount()), getString(R.string.syncing)); observation = new Observation(c); mApp.setObservationIdBeingSynced(observation._id); handleObservationResponse( observation, put(HOST + ""/observations/"" + observation.id + "".json?extra=observation_photos"", paramsForObservation(observation, false)) ); c.moveToNext();  checkForCancelSync(); } c.close();  String inatNetwork = mApp.getInaturalistNetworkMember(); String inatHost = mApp.getStringResourceByName(""inat_host_"" + inatNetwork);  // query observations where _synced_at IS NULL c = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, ""id IS NULL"", null, Observation.SYNC_ORDER); int createdCount = c.getCount(); // for each observation POST to /observations/  c.moveToFirst(); while (c.isAfterLast() == false) { mApp.notify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.posting_observations), String.format(getString(R.string.posting_x_observations), (c.getPosition() + 1), c.getCount()), getString(R.string.syncing)); observation = new Observation(c); mApp.setObservationIdBeingSynced(observation._id); handleObservationResponse( observation, post(""http://"" + inatHost + ""/observations.json?extra=observation_photos"", paramsForObservation(observation, true)) ); c.moveToNext();  checkForCancelSync(); } c.close();  c = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, ""id IS NULL"", null, Observation.SYNC_ORDER); int currentCreatedCount = c.getCount(); c.close(); c = getContentResolver().query(Observation.CONTENT_URI, Observation.PROJECTION, ""_updated_at > _synced_at AND _synced_at IS NOT NULL AND user_login = '""+mLogin+""'"", null, Observation.SYNC_ORDER); int currentUpdatedCount = c.getCount(); c.close();  mApp.setObservationIdBeingSynced(INaturalistApp.NO_OBSERVATION);  if ((currentCreatedCount == 0) && (currentUpdatedCount == 0)) { // Sync completed successfully mApp.notify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.observation_sync_complete), String.format(getString(R.string.observation_sync_status), createdCount, updatedCount), getString(R.string.sync_complete)); } else { // There was a problem with the sync process mApp.notify(SYNC_OBSERVATIONS_NOTIFICATION, getString(R.string.observation_sync_failed), getString(R.string.not_all_observations_were_synced), getString(R.string.sync_failed)); } } "	0	0	0	0	0	1
private void onSubtree(Message message) { subtree = message.popFrame().getString(); } 	0	0	0	0	0	1
@Override public int getSlots() { return slots.length; } 	1	0	1	1	1	0
protected int[][] invertPixels(int pixels[][]) { int[][] invertedPixels = new int[pixels.length][pixels[0].length];  for (int i = 0; i < pixels.length; i++) { for (int j = 0; j < pixels.length; j++) { if (pixels[i][j] == 0){ invertedPixels[i][j] = 1; } else { invertedPixels[i][j] = 0; } } }  return invertedPixels; } 	1	1	1	1	0	0
"@Test public void canAnalyseTypicalMeltedVCF() throws IOException, HealthChecksException { RunContext runContext = RunContextFactory.testContext(RUN_DIRECTORY, REF_SAMPLE, TUMOR_SAMPLE); final DataExtractor extractor = new SomaticExtractor(runContext);  final BaseResult result = extractor.extract(); final List<HealthCheck> checks = ((MultiValueResult) result).getChecks();  assertEquals(CheckType.SOMATIC, result.getCheckType()); assertEquals(26, checks.size());  assertCheck(checks, SomaticCheck.SOMATIC_COUNT.checkName(VCFType.INDELS.toString()), 67); assertCheck(checks, SomaticCheck.SOMATIC_COUNT.checkName(VCFType.SNP.toString()), 987);  assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(SNP, MUTECT), 0.7691); assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(INDELS, MUTECT), 0.0); assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(SNP, FREEBAYES), 0.1515); assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(INDELS, FREEBAYES), 0.1904); assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(SNP, VARSCAN), 0.7636); assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(INDELS, VARSCAN), 0.1904); assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(SNP, STRELKA), 0.7816); assertCheck(checks, SomaticCheck.SENSITIVITY_CHECK.checkName(INDELS, STRELKA), 0.1904);  assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(SNP, FREEBAYES), 0.5317); assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(INDELS, FREEBAYES), 0.3636); assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(SNP, MUTECT), 0.7503); assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(INDELS, MUTECT), 0.0); assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(SNP, VARSCAN), 0.8381); assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(INDELS, VARSCAN), 0.0689); assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(SNP, STRELKA), 0.7414); assertCheck(checks, SomaticCheck.PRECISION_CHECK.checkName(INDELS, STRELKA), 0.1739);  assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(SNP, ""1""), 0.2715); assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(INDELS, ""1""), 0.6865); assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(SNP, ""2""), 0.1590); assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(INDELS, ""2""), 0.2537); assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(SNP, ""3""), 0.4812); assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(INDELS, ""3""), 0.0597); assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(SNP, ""4""), 0.0); assertCheck(checks, SomaticCheck.PROPORTION_CHECK.checkName(INDELS, ""4""), 0.0); } "	0	0	0	0	0	1
"private void editDescription(MouseEvent mouseEvent) { editDescTxt.setText(picture.getDescription()); final VBox vbox = new VBox(2); vbox.getChildren().addAll(editDescTxt, validateDescBtn);  content.getChildren().add(content.getChildren().size() - 4, vbox); content.getChildren().remove(descEditBtn);  descTxt.setText(""""); validateDescBtn.setOnMouseClicked(new EventHandler<MouseEvent>() { @Override public void handle(MouseEvent mouseEvent) { picture.setDescription(editDescTxt.getText()); descTxt.setText(editDescTxt.getText()); content.getChildren().remove(vbox); content.getChildren().add(5, descEditBtn); showInformationDialog(""Description modifiée avec succès !""); } });  } "	0	0	0	0	0	1
"@Override public int getActiveCount(String actorId, String taskList) { try { return taskList != null ? getJdbcTemplate().queryForObject(SQL_GET_PROCESS_CNT_BY_STATE_AND_STARTER_ID + "" AND TASK_LIST = ?"", Integer.class, Process.ACTIVE, actorId, taskList) : getJdbcTemplate().queryForObject(SQL_GET_PROCESS_CNT_BY_STATE_AND_STARTER_ID, Integer.class, Process.ACTIVE, actorId);  } catch (Throwable e) { String message = ""DB error counting active processes for actorId[""+actorId+""], taskList[""+taskList+""]""; logger.error(message, e); throw new ServiceCriticalException(message, e); } } "	0	0	0	0	0	1
@SubscribeEvent public void onUpdate(LivingEvent.LivingUpdateEvent event) { if (event.getEntityLiving() instanceof EntityPlayer && !(event.getEntityLiving() instanceof FakePlayer)) { EntityPlayer player = (EntityPlayer) event.getEntityLiving(); ItemStack[] main = player.inventory.mainInventory;  if (!player.worldObj.isRemote) { for (int i = 0; i < main.length; i++) { if (main[i] != null) { if (main[i].getItem() instanceof ItemSword || main[i].getItem() instanceof ItemBow || main[i].getItem() instanceof ItemArmor) { ItemStack stack = main[i]; NBTTagCompound nbt = NBTHelper.loadStackNBT(stack);  if (nbt != null) { Rarity rarity = Rarity.getRarity(nbt); Random rand = player.worldObj.rand;  if (rarity == Rarity.UNKNOWN) { rarity = Rarity.getRandomRarity(rand); rarity.setRarity(nbt); NBTHelper.saveStackNBT(stack, nbt); Levels.NETWORK.sendTo(new PacketRarity(NBTHelper.loadStackNBT(stack)), (EntityPlayerMP) player); if (rarity == Rarity.ANCIENT) player.worldObj.playSound(player, player.getPosition(), SoundEvents.ENTITY_ENDERDRAGON_DEATH, player.getSoundCategory(), 0.8F, 1.0F); } } } } } } } } 	1	0	1	0	1	0
"@ApiModelProperty(example = ""null"", value = ""The date the add request was completed. An empty string if the request has not been completed."") public LocalDate getDateCompleted() { return dateCompleted; } "	0	0	0	0	0	1
@Overwrite protected void passSpecialRender(EntityLivingBase entity, double p_77033_2_, double p_77033_4_, double p_77033_6_) {  if (!(entity instanceof EntityPlayer || entity instanceof EntityAnimal)) return;  if (entity instanceof EntityAnimal) { if (!Configuration.DISPLAY_ANIMAL_HEAT) return; }  if (MinecraftForge.EVENT_BUS.post(new RenderLivingEvent.Specials.Pre(entity, (RendererLivingEntity) (Object) this, p_77033_2_, p_77033_4_, p_77033_6_))) return; GL11.glAlphaFunc(GL11.GL_GREATER, 0.1F);  if (this.func_110813_b(entity)) { String entityName = entity.getFormattedCommandSenderName().getFormattedText(); float f = 1.6F; float f1 = 0.016666668F * f; double d3 = entity.getDistanceSqToEntity(this.renderManager.livingPlayer); float f2 = entity.isSneaking() ? NAME_TAG_RANGE_SNEAK : NAME_TAG_RANGE; double f6 = (double) (f2 * f2);  if (entity instanceof EntityAnimal) { f6 = (double) (f2); EntityAnimal animal = (EntityAnimal) entity; if (animal.getGrowingAge() == 0 && !animal.isInLove()) { // Animal is in heat. entityName = Colors.DARK_AQUA + entityName; } }  if (d3 < f6) { if (entity.isSneaking()) { FontRenderer fontrenderer = this.getFontRendererFromRenderManager(); GL11.glPushMatrix(); GL11.glTranslatef((float)p_77033_2_ + 0.0F, (float)p_77033_4_ + entity.height + 0.5F, (float)p_77033_6_); GL11.glNormal3f(0.0F, 1.0F, 0.0F); GL11.glRotatef(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F); GL11.glRotatef(this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F); GL11.glScalef(-f1, -f1, f1); GL11.glDisable(GL11.GL_LIGHTING); GL11.glTranslatef(0.0F, 0.25F / f1, 0.0F); GL11.glDepthMask(false); GL11.glEnable(GL11.GL_BLEND); OpenGlHelper.glBlendFunc(770, 771, 1, 0); Tessellator tessellator = Tessellator.instance; GL11.glDisable(GL11.GL_TEXTURE_2D); tessellator.startDrawingQuads(); int i = fontrenderer.getStringWidth(entityName) / 2; tessellator.setColorRGBA_F(0.0F, 0.0F, 0.0F, 0.25F); tessellator.addVertex((double)(-i - 1), -1.0D, 0.0D); tessellator.addVertex((double)(-i - 1), 8.0D, 0.0D); tessellator.addVertex((double)(i + 1), 8.0D, 0.0D); tessellator.addVertex((double)(i + 1), -1.0D, 0.0D); tessellator.draw(); GL11.glEnable(GL11.GL_TEXTURE_2D); GL11.glDepthMask(true); fontrenderer.drawString(entityName, -fontrenderer.getStringWidth(entityName) / 2, 0, 553648127); GL11.glEnable(GL11.GL_LIGHTING); GL11.glDisable(GL11.GL_BLEND); GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F); GL11.glPopMatrix(); } else { ((RendererLivingEntity) (Object) this).renderOffsetLivingLabel(entity, p_77033_2_, p_77033_4_, p_77033_6_, entityName, f1, d3); } } } MinecraftForge.EVENT_BUS.post(new RenderLivingEvent.Specials.Post(entity, (RendererLivingEntity) (Object) this, p_77033_2_, p_77033_4_, p_77033_6_)); } 	0	0	0	0	0	1
@Transactional @Override public ChatroomMembers findByRoomIdAndMember(Long member_id, Long room_id) { return repository.findByRoomIdAndMember(member_id, room_id); } 	1	0	1	1	1	0
public void setTileMap(TileMap tilemap) { if (tileMap != null) { removeComponent(tileMap); } tileMap = tilemap; addComponent(tileMap); } 	0	0	0	0	0	1
"@Test public void testImportRppaData() throws Exception { MySQLbulkLoader.bulkLoadOn();  DaoGeneOptimized daoGene = DaoGeneOptimized.getInstance(); DaoGeneticAlteration dao = DaoGeneticAlteration.getInstance();  //Genes with alias: daoGene.addGene(makeGeneWithAlias(999999931,""TESTACACA"", ""TESTACC1"")); daoGene.addGene(makeGeneWithAlias(999999207,""TESTAKT1"", ""TESTAKT"")); daoGene.addGene(makeGeneWithAlias(999999597,""TESTSANDER"", ""TESTACC1"")); daoGene.addGene(makeGeneWithAlias(999997158,""TESTTP53BP1"", ""TEST53BP1"")); // test for NA being a special case in RPPA, and not the usual alias daoGene.addGene(makeGeneWithAlias(7504, ""XK"", ""NA"")); //Other genes: daoGene.addGene(new CanonicalGene(999999932,""TESTACACB"")); daoGene.addGene(new CanonicalGene(999999208,""TESTAKT2"")); daoGene.addGene(new CanonicalGene(999999369,""TESTARAF"")); daoGene.addGene(new CanonicalGene(999991978, ""TESTEIF4EBP1"")); daoGene.addGene(new CanonicalGene(999995562,""TESTPRKAA1"")); daoGene.addGene(new CanonicalGene(999997531,""TESTYWHAE"")); daoGene.addGene(new CanonicalGene(999910000,""TESTAKT3"")); daoGene.addGene(new CanonicalGene(999995578,""TESTPRKCA""));   GeneticProfile geneticProfile = new GeneticProfile();  geneticProfile.setCancerStudyId(studyId); geneticProfile.setStableId(""gbm_rppa""); geneticProfile.setGeneticAlterationType(GeneticAlterationType.PROTEIN_LEVEL); geneticProfile.setDatatype(""LOG2-VALUE""); geneticProfile.setProfileName(""RPPA Data""); geneticProfile.setProfileDescription(""RPPA Data""); DaoGeneticProfile.addGeneticProfile(geneticProfile);  int newGeneticProfileId = DaoGeneticProfile.getGeneticProfileByStableId(""gbm_rppa"").getGeneticProfileId();  ProgressMonitor.setConsoleMode(true); // TBD: change this to use getResourceAsStream() File file = new File(""src/test/resources/tabDelimitedData/data_rppa.txt""); ImportTabDelimData parser = new ImportTabDelimData(file, newGeneticProfileId, null); int numLines = FileUtil.getNumLines(file); parser.importData(numLines); ConsoleUtil.showMessages();  int sampleId = DaoSample.getSampleByCancerStudyAndSampleId(studyId, ""SAMPLE1"").getInternalId(); String value = dao.getGeneticAlteration(newGeneticProfileId, sampleId, 999997531); assertEquals (""1.5"", value );  sampleId = DaoSample.getSampleByCancerStudyAndSampleId(studyId, ""SAMPLE4"").getInternalId(); value = dao.getGeneticAlteration(newGeneticProfileId, sampleId, 999997531); assertEquals (""2"", value );  sampleId = DaoSample.getSampleByCancerStudyAndSampleId(studyId, ""SAMPLE4"").getInternalId(); value = dao.getGeneticAlteration(newGeneticProfileId, sampleId, 999997504); assertEquals (""NaN"", value ); //""NA"" is not expected to be stored because of workaround for bug in firehose. See also https://github.com/cBioPortal/cbioportal/issues/839#issuecomment-203523078  sampleId = DaoSample.getSampleByCancerStudyAndSampleId(studyId, ""SAMPLE1"").getInternalId(); value = dao.getGeneticAlteration(newGeneticProfileId, sampleId, 999995578); assertEquals (""1.5"", value ); } "	0	0	0	0	0	1
private void searchArtists(String query) { mSpotifyService.searchArtists(query, getSearchOptions(), new Callback<ArtistsPager>() { @Override public void success(ArtistsPager artistsPager, Response response) { ArrayObjectAdapter listRowAdapter = new ArrayObjectAdapter(new ArtistCardPresenter()); for (Artist artist : artistsPager.artists.items) { listRowAdapter.add(artist); } HeaderItem header = new HeaderItem(getString(R.string.artists)); mRowsAdapter.add(new ListRow(header, listRowAdapter));  // TODO next pages ? }  @Override public void failure(RetrofitError error) {  } }); } 	0	0	0	0	0	1
private void searchSongs(String query) { mSpotifyService.searchTracks(query, getSearchOptions(), new Callback<TracksPager>() { @Override public void success(TracksPager tracksPager, Response response) { mTrackRowAdapter = new ArrayObjectAdapter(new TrackCardPresenter()); for (Track track : tracksPager.tracks.items) { mTrackRowAdapter.add(track); } HeaderItem header = new HeaderItem(getString(R.string.songs)); mRowsAdapter.add(new ListRow(header, mTrackRowAdapter));  // TODO next pages ? }  @Override public void failure(RetrofitError error) {  } }); } 	0	0	0	0	0	1
public int getTotalUnitCount() { return totalUnits.size(); } 	0	0	0	0	0	1
"public void stealFromStall(int stallID[], Tile safeTiles){  status = ""Stealing""; if (stallToThieve == null || safeTiles.distanceTo(ctx.players.local().tile()) > maxTilesAwayToThieve || !stallToThieve.valid()) { stallToThieve = ctx.objects.select().id(stallID).nearest().poll(); }  if (safeTiles.equals(ctx.players.local().tile())) { if((ctx.menu.opened() && ctx.menu.items().length >= 4) || (stallToThieve.click(false) && ctx.menu.opened() && ctx.menu.items().length >= 4)){ if (ctx.players.local().animation() == -1 && !ctx.players.local().inMotion() && stallToThieve.valid() && !ctx.players.local().inCombat()) { if(hovered){ ctx.input.click(true); }else{ clickMenuItem(""Steal-from""); } hovered = false; }else{ if(!hovered) { hoverMenuItem(""Steal-from""); hovered = true; } } }else{ if(ctx.menu.opened()) { ctx.menu.close(); } } } else { if(locationTile.matrix(ctx).inViewport() && !ctx.players.local().inMotion() && locationTile.matrix(ctx).click()) { Condition.sleep(Random.nextInt(3000, 4000)); }else{ ctx.camera.turnTo(locationTile.tile()); } } } "	0	0	0	0	0	1
"@Override public void messaged(MessageEvent e) { final String msg = e.text().toLowerCase(); if (msg.contains(""just advanced a thieving level"")) { lvlUps++; requiredXP = ctx.skills.experienceAt(ctx.skills.level(Constants.SKILLS_THIEVING) + 1); }else if(msg.contains(""coins have been added"") || msg.contains(""you steal"") || msg.contains(""you pick"")) { successes++; }else if(msg.contains(""you fail to pick"")){ failures++; } } "	0	0	0	0	0	1
"public void drawPaint(Graphics g){ currentXP = ctx.skills.experience(Constants.SKILLS_THIEVING);  if(bg != null) { g.drawImage(bg, 5, 35, null); }  g.setColor(Color.white); g.drawString(""HP: "" + HP + ""% (Eat @: "" + hpToEatAt + ""%)"", 20, 100); g.drawString(""Status: "" + status, 20, 120); g.drawString(""Distance: "" + (int)ctx.players.local().tile().distanceTo(locationTile), 20, 140); g.drawString(""Levels Gained: "" + lvlUps, 20, 160); final long hr = getTotalRuntime() / 3600000; final long min = getTotalRuntime() / 60000; final long sec = getTotalRuntime() / 1000; g.drawString(""Run Time: "" + hr + "":"" + (min - (hr * 60)) + "":"" + (sec - (60 * min)), 20, 180);  final int xpGained = (currentXP - startingXP); final int xphr = (int)(xpGained / ( getTotalRuntime() / 3600000.0)); g.drawString(""XP Gained: "" + (xpGained > 1000 ? xpGained/1000 + ""k"" : xpGained) + "" ("" + xphr/1000 + ""k/hr)"", 20, 200);  int ttl =  (xphr == 0 ? ttl = 0 : (int)(((requiredXP - currentXP) *3600000.0) / xphr)); final long ttlhr = ttl/3600000; final long ttlmin = ttl/60000; g.drawString(""TTL: ""+ ttlhr + ""hr : "" + (ttlmin - (ttlhr * 60)) + ""min"" , 20, 220);  g.drawString(""Success Rate: "" + ((successes + failures) == 0 ? 0 : (int) (successes / (failures + successes) * 100)) + ""%"", 20, 240);  //DEBUGGING ONLY drawDebugBoundingBoxes(g); } "	0	0	0	0	0	1
"@Override protected void createStructureFactoryFolderComment(File structureFolder, AreaType area, ServiceType service) throws IOException { createFolderComment(structureFolder, area, service, getConfig().getFactoryFolder(), ""Factory classes for the types defined in the "" + ((null == service) ? (area.getName() + "" area."") : (service.getName() + "" service.""))); } "	0	0	0	0	0	1
"@RequestMapping(value = ""/aql"", method = RequestMethod.POST) public List<AqlResult> executeAqlByPost(@RequestBody String aql) throws AqlExcuteException { return this.executeAql(aql); } "	0	0	0	0	0	1
"protected void visitStatementAssignmentExp(Exp exp, String varName, String varType, JavaWriter w) throws IOException { if (exp instanceof ExpP && ((ExpP) exp).pureexp_ instanceof Case) { String caseStm = visitCase((Case) ((ExpP) exp).pureexp_); w.emitStatement(""%s %s = (%s) %s"", varType, varName, varType, caseStm); } else { StringWriter auxsw = new StringWriter(); JavaWriter auxw = new JavaWriter(auxsw); exp.accept(this, auxw); if (varType == null) { w.emitStatement(""%s = %s"", varName, auxsw.toString()); } else { w.emitStatement(""%s %s = %s"", varType, varName, auxsw.toString()); } } } "	1	1	0	1	1	0
"protected T setFieldFromResultSet(T instance, ResultSet rs, Field f, String columnName) { Column column = FieldCache.getAnnotation(f, Column.class); Object value; try { value = rs.getObject(columnName, f.getType()); if (value == null) { value = rs.getObject(columnName); }  if (value != null && ReflectionUtil.isWrapperClass(f.getType()) && ReflectionUtil.isPrimitiveClass(value.getClass())) { value = ReflectionUtil.primitiveToWrapper(value); } else if (value != null && ReflectionUtil.isWrapperClass(value.getClass()) && ReflectionUtil.isPrimitiveClass(f.getType())) { value = ReflectionUtil.wrapperToPrimitive(value); }  if (value != null && f.getType().isAssignableFrom(value.getClass())) { value = f.getType().cast(value); }  if (value instanceof Long && !f.getType().isAssignableFrom(Long.class)) { if (f.getType().isAssignableFrom(Byte.class)) { value = ((Number) value).byteValue(); } else if (f.getType().isAssignableFrom(Short.class)) { value = ((Number) value).shortValue(); } else if (f.getType().isAssignableFrom(Integer.class)) { value = ((Number) value).intValue(); } } else if (value instanceof Double && !f.getType().isAssignableFrom(Double.class)) { if (f.getType().isAssignableFrom(Float.class)) { value = ((Number) value).floatValue(); } }  } catch (Exception e) { throw new RuntimeException(e); } if ((f.getType() == boolean.class || f.getType() == Boolean.class) && ReflectionUtil.isNumber(value.getClass()) && value != (Object) false && value != (Object) true && value != Boolean.TRUE && value != Boolean.FALSE) { value = ((byte) value) != 0; // for some reason this is returned as int on TINYINT(1).. }  if (value == null && (ReflectionUtil.isPrimitiveClass(f.getType()) || (FieldCache.getAnnotation(f, Nullable.class) == null && !column .autoIncrement()))) { SinkLibrary.getInstance().getLogger().warning( ""Trying to set null value on a not nullable and not autoincrement column: "" + getRowClass().getName() + ""."" + f .getName()); }  try { f.set(instance, value); } catch (IllegalAccessException e) { throw new RuntimeException(e); }  return instance; } "	0	0	0	0	0	1
public void setIce4JLoggingEnabled(boolean enabled) { this.ice4jLoggingEnabled = true; } 	1	0	1	0	1	0
public void setArbitraryLoggingEnabled(boolean enabled) { this.arbitraryLoggingEnabled = true; } 	1	0	1	0	1	0
public long getLimit() { return this.limit; } 	1	0	1	0	1	0
private PsiPackage createPackageFromLibrary(@NotNull VirtualFile virtualFile, @NotNull Class<? extends ModuleExtension> extensionClass, @NotNull String qualifiedName) { ProjectFileIndex fileIndexFacade = ProjectFileIndex.SERVICE.getInstance(myProject); PsiManager psiManager = PsiManager.getInstance(myProject); if (fileIndexFacade.isInLibraryClasses(virtualFile)) { List<OrderEntry> orderEntriesForFile = fileIndexFacade.getOrderEntriesForFile(virtualFile); for (OrderEntry orderEntry : orderEntriesForFile) { Module ownerModule = orderEntry.getOwnerModule(); ModuleExtension extension = ModuleUtilCore.getExtension(ownerModule, extensionClass); if (extension != null) { for (PsiPackageSupportProvider p : PsiPackageSupportProvider.EP_NAME.getExtensions()) { if (p.isSupported(extension)) { return p.createPackage(psiManager, this, extensionClass, qualifiedName); } } } } } return null; } 	1	1	1	0	1	0
public void reset() throws SQLException { // reset default settings if (underlyingReadOnly != defaultReadOnly) { conn.setReadOnly(defaultReadOnly); underlyingReadOnly = defaultReadOnly; }  if (underlyingHoldability != defaultHoldability) { conn.setHoldability(defaultHoldability); underlyingHoldability = defaultHoldability; }  if (underlyingTransactionIsolation != defaultTransactionIsolation) { conn.setTransactionIsolation(defaultTransactionIsolation); underlyingTransactionIsolation = defaultTransactionIsolation; }  if (underlyingAutoCommit != defaultAutoCommit) { conn.setAutoCommit(defaultAutoCommit); underlyingAutoCommit = defaultAutoCommit; }  connectionEventListeners.clear(); statementEventListeners.clear();  for (Object item : statementTrace.toArray()) { Statement stmt = (Statement) item; stmt.close(); } statementTrace.clear();  conn.clearWarnings(); } 	0	1	0	0	0	0
@Override public CommandResult redo() { if(model.getStackOfListTypesRedo().isEmpty()) { return new CommandResult(String.format(RedoCommand.MESSAGE_FAIL)); } ReadOnlyTask taskToDelete = model.getDeletedStackOfTasksRedo().pop(); model.getDeletedStackOfTasks().push(taskToDelete); try { model.deleteTask((Task) taskToDelete); } catch(TaskNotFoundException e) { return new CommandResult(String.format(RedoCommand.MESSAGE_FAIL)); } return new CommandResult(String.format(RedoCommand.MESSAGE_SUCCESS)); } 	1	0	1	0	1	0
"public String toString() { return ""not("" + var.getName() + "")""; } "	0	0	0	0	0	1
protected void setContentRoot(FrameLayout contentRoot) { mContentRoot = contentRoot; } 	0	0	0	0	0	1
"public T createChannelReadExpr(String left, String op, ChannelReadExpr cr) { Log.log(cr.line + "": Creating ChannelReadExpr with LHS as "" + left);  ST template = null; Expression channelExpr = cr.channel(); NameExpr channelNameExpr = null;  /* * Can either be NameExpression (chan.read()) or * ChannelEndExpr (chan.read.read()) */ if (channelExpr instanceof NameExpr) { channelNameExpr = (NameExpr) channelExpr; } else if (channelExpr instanceof ChannelEndExpr) { channelNameExpr = (NameExpr) ((ChannelEndExpr) channelExpr).channel(); }  String channel = (String) channelNameExpr.visit(this); Type myType = null;  if (channelNameExpr.myDecl instanceof LocalDecl) { myType = ((LocalDecl) channelNameExpr.myDecl).type(); } else if (channelNameExpr.myDecl instanceof ParamDecl) { myType = ((ParamDecl) channelNameExpr.myDecl).type(); }  if (myType.isTimerType()) { /* * Possibility One: Timer */ template = _stGroup.getInstanceOf(""TimerReadExpr""); template.add(""left"", left); return (T) template.render(); } else { Type baseType = null;  /* * Possibility Two: This is an actual end: chan<type>.read chan, * chan.read() */ if (myType.isChannelEndType()) { ChannelEndType chanType = (ChannelEndType) myType; baseType = chanType.baseType(); }  /* * Possibility Three: This is a channel to be treated as an end to avoid * chan.read.read(). */ else if (myType.isChannelType()) { ChannelType chanType = (ChannelType) myType; baseType = chanType.baseType(); }  //EXTENDED RENDEZVOUS Block b = cr.extRV(); String[] extRv = null; if (b != null) { //FIXME looks like ill need to turn off altGuard flag for //this block as extRv could have read from the same channel //again. boolean oldAltGuard = State.set(State.ALT_GUARD, false); extRv = (String[]) b.visit(this); //        isAltGuard = oldAltGuard; State.set(State.ALT_GUARD, oldAltGuard); } //-------  if (extRv == null) { template = _stGroup.getInstanceOf(""ChannelReadExpr""); } else { template = _stGroup.getInstanceOf(""ChannelReadExprExtRv""); template.add(""extRv"", extRv); }  //Since channel read in Alts are handled differently, i.e. w/o //yields in the generated code but rather in Alt class, //we don't want to increment and add jumpCnts to runlabel switch. if (!(State.is(State.ALT) && State.is(State.ALT_GUARD))) { /* * Adding switch cases for resumption. */ for (int i = 0; i < 2; i++) { _switchCases.add(renderLookupSwitchCase(_jumpCnt)); template.add(""jmp"" + i, _jumpCnt); _jumpCnt++; } }  template.add(""channel"", channel); template.add(""op"", op); template.add(""left"", left); //FIXME I might not even need _inAlt here. template.add(""alt"", (State.is(State.ALT) && State.is(State.ALT_GUARD)));  }  return (T) template.render(); } "	0	0	0	0	0	1
public IPage getCurrentPage() { return this.getPageManager().getOnlinePage(this.getPageCode()); } 	0	0	0	0	0	1
"@Test public void sequenciaEstagio() { Controlador controlador = getControladorPlanos(); Anel anel = controlador.getAneis().stream().filter(anel1 -> anel1.isAtivo() && anel1.getEstagios().size() == 4).findFirst().get(); Plano plano = anel.getPlanos().get(0);  plano.setModoOperacao(ModoOperacaoPlano.TEMPO_FIXO_ISOLADO); plano.setTempoCiclo(128);  criarEstagioPlano(anel, plano, new int[]{1, 3, 2, 4}); EstagioPlano estagioPlano1 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(1)).findAny().get(); EstagioPlano estagioPlano2 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(2)).findAny().get(); EstagioPlano estagioPlano3 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(3)).findAny().get(); EstagioPlano estagioPlano4 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(4)).findAny().get();  estagioPlano1.setTempoVerde(10); estagioPlano2.setTempoVerde(10); estagioPlano3.setTempoVerde(10); estagioPlano4.setTempoVerde(10);  List<Erro> erros = getErros(controlador); assertEquals(1, erros.size()); assertThat(erros, org.hamcrest.Matchers.hasItems( new Erro(CONTROLADOR, ""A sequência de estágios não é válida."", ""aneis[0].versoesPlanos[0].planos[0].sequenciaInvalida"") ));  criarEstagioPlano(anel, plano, new int[]{1, 4, 3, 2}); estagioPlano1 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(1)).findAny().get(); estagioPlano2 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(2)).findAny().get(); estagioPlano3 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(3)).findAny().get(); estagioPlano4 = plano.getEstagiosPlanos().stream().filter(estagioPlano -> estagioPlano.getPosicao().equals(4)).findAny().get();  estagioPlano1.setTempoVerde(10); estagioPlano2.setTempoVerde(10); estagioPlano3.setTempoVerde(10); estagioPlano4.setTempoVerde(10);  erros = getErros(controlador); assertThat(erros, Matchers.empty());  estagioPlano2.setDispensavel(true);  erros = getErros(controlador); assertEquals(1, erros.size()); assertThat(erros, org.hamcrest.Matchers.hasItems( new Erro(CONTROLADOR, ""A sequência de estágios não é válida, pois existe uma transição proibida devido a não execução do estágio dispensável."", ""aneis[0].versoesPlanos[0].planos[0].sequenciaInvalidaSeExisteEstagioDispensavel"") )); } "	0	0	0	0	0	1
"public Collection<WebUIPlugin> getWebUIPlugins(String id) { logger.log(Level.INFO, ""getWebUIPlugins(slot id: {0})"", id); List<WebUIPlugin> plugins = new ArrayList<>();  for (WebUIPlugin plugin : webUI.pluginSet()) { if (!plugin.isEnabled()) { continue; } if (id == null || id.equals(plugin.getSlotId())) { plugins.add(plugin); } } return plugins; } "	0	0	1	1	0	0
"public CalendarDate getEndDate() { String ed = _element.getAttribute(""endDate"").getValue(); if (ed != """") return new CalendarDate(_element.getAttribute(""endDate"").getValue()); Task parent = this.getParentTask(); if (parent != null) return parent.getEndDate(); Project pr = this._tl.getProject(); if (pr.getEndDate() != null) return pr.getEndDate(); return this.getStartDate();  } "	1	1	1	0	1	0
"@Override public Map<String, String> getWaila() { Map<String, String> info = new HashMap<String, String>(); info.put(I18N.tr(""Power consumption""), Utils.plotPower("""", lampResistor.getI() * lampResistor.getU())); if (lampDescriptor != null) { info.put(I18N.tr(""Bulb""), lampDescriptor.name); } else { info.put(I18N.tr(""Bulb""), I18N.tr(""None"")); } if (Eln.wailaEasyMode) { if (poweredByLampSupply) { info.put(I18N.tr(""Channel""), channel); } info.put(I18N.tr(""Voltage""), Utils.plotVolt("""", positiveLoad.getU())); ItemStack lampStack = acceptingInventory.getInventory().getStackInSlot(0); if (lampStack != null) { info.put(I18N.tr(""Life""), Utils.plotValue(lampDescriptor.getLifeInTag(lampStack))); }  } return info; } "	1	1	1	0	1	0
public Boolean filterOR(Record input) {  Boolean evaluation = false;  for (int i = 0; i < this.size(); i++) { evaluation = (evaluation || this.get(i).evaluateConstraint(input)); }  return evaluation; } 	1	1	0	1	1	0
public Boolean filterAND(Record input) {  Boolean evaluation = true;  for (int i = 0; i < this.size(); i++) { evaluation = (evaluation && this.get(i).evaluateConstraint(input)); } return evaluation; } 	1	1	0	1	1	0
"public Builder jvm(boolean value) { return setParameter(""jvm"", value); } "	0	0	0	0	0	1
"public Builder network(boolean value) { return setParameter(""network"", value); } "	0	0	0	0	0	1
@Override public int selectValue(IntVar var) { assert var.getModel().getObjective() != null; if (var.hasEnumeratedDomain() && var.getDomainSize() < maxdom) { int bestCost = Integer.MAX_VALUE; int ub = var.getUB(); // if decision is '<=', default value is LB, UB in any other cases int bestV = dop == DecisionOperatorFactory.makeIntSplit() ? var.getLB() : ub; for (int v = var.getLB(); v <= ub; v = var.nextValue(v)) { int bound = bound(var, v); if (bound < bestCost) { bestCost = bound; bestV = v; } } return bestV; } else { int lbB = bound(var, var.getLB()); int ubB = bound(var, var.getUB()); // if values are equivalent if(lbB == ubB){ // if decision is '<=', default value is LB, UB in any other cases return dop == DecisionOperatorFactory.makeIntSplit() ? var.getLB() : var.getUB(); }else { return lbB < ubB ? var.getLB() : var.getUB(); } } } 	0	0	0	0	0	1
protected void clear() { mTotal = 0; mLayoutManager.setLayoutHelpers(null);  for (Pair<AdapterDataObserver, Adapter> p : mAdapters) { p.second.unregisterAdapterDataObserver(p.first); }   mItemTypeAry.clear(); mAdapters.clear(); } 	0	0	0	0	0	1
"@Test public void testToSolidMapFromPairs() throws Exception { SolidMap<String, Integer> converted = Range.range(1, 4) .map(new Func1<Integer, Pair<String, Integer>>() { @Override public Pair<String, Integer> call(Integer it) {return new Pair<>("""" + it, it.intValue());} }) .collect(ToSolidMap.<String, Integer>pairsToSolidMap());  assertIterableEquals(MAP, converted); } "	0	0	0	0	0	1
public ArrayList<Tattoo> getPublic(Response.Listener<JSONObject> callback) { if (upload_public == null) Server.getTattooList(context, token, Server.TattooRequest.Public, callback); return upload_public; } 	0	1	0	0	0	0
public Ticket findTicket(Long ticketId) { return manager.find(Ticket.class, ticketId); } 	0	0	0	0	0	1
"private boolean execute_gr_group_new() { GR.BDraw b = createGrObj_start(GR.Type.Rect);				// create Graphic Object and get variable if (b == null) return false; int SaveValueIndex = theValueIndex; if (!isNext(',')) return false;  int listIndex = -1; boolean isComma = isNext(','); if (!isComma) { listIndex = getListArg(VarType.NUM);					// reuse old list or create new one if (listIndex < 0) return false; isComma = isNext(','); } ArrayList<Double> list = (listIndex != -1)	? theLists.get(listIndex) : new ArrayList<Double>(); while (isComma) { double lObj = getObjectNumber(); if (lObj < 0.0) return false; list.add(lObj); isComma = isNext(','); } if (!checkEOL()) return false;  b.list(listIndex, list); return createGrObj_finish(b, SaveValueIndex);				// store the object and return its index } "	0	0	0	0	0	1
String getTypeName() { return JAVA_TIME_ZONED_DATE_TIME; } 	0	0	0	0	0	1
"@Kroll.method public void removeProperty(String key) { if (keyExists(keyEncrypt(key))) { _provider.removeProperty(keyEncrypt(key)); fireChanged(key,""removed""); } } "	1	0	1	0	0	0
@Test public void testFABMenuPresent() { // Open up the FAB menu onView(withId(R.id.room_fab_speed_dial)) .check(matches(isDisplayed())) .perform(click()); // Ensure that the speed dial Indicators are all visible. onView(withText(R.string.room_new)) .check(matches(isDisplayed())); onView(withText(R.string.room_favorite)) .check(matches(isDisplayed())); } 	0	0	0	0	0	1
"private String getValue(Collection<String> values) { if (values == null) { return ""0""; } else { return values.iterator().next(); } } "	1	0	1	1	1	0
"@NotNull public static String getCurrentUserFullName() { User user = getCurrentUser(); return user.getFirstName() + "" "" + user.getLastName(); } "	0	1	0	0	0	0
@Test public void should_handle_intent_with_start_message_and_api_key() { Intent sensorbergServiceStartIntent = SensorbergServiceIntents .getStartServiceIntent(InstrumentationRegistry.getContext(), TestConstants.API_TOKEN_DEFAULT);  int handleIntentResult = tested.handleIntent(sensorbergServiceStartIntent);  Assertions.assertThat(handleIntentResult).isEqualTo(SensorbergService.START_STICKY); Mockito.verify(tested, Mockito.times(1)).handleDebuggingIntent(sensorbergServiceStartIntent, tested, true); Mockito.verify(tested, Mockito.times(1)).handleIntentEvenIfNoBootstrapperPresent(sensorbergServiceStartIntent); Mockito.verify(tested, Mockito.times(1)).updateDiskConfiguration(sensorbergServiceStartIntent); Mockito.verify(tested, Mockito.times(1)).startSensorbergService(TestConstants.API_TOKEN_DEFAULT);  Mockito.verify(tested, Mockito.times(0)).stopSensorbergService(); Mockito.verify(tested, Mockito.times(0)).handleIntentMessage(sensorbergServiceStartIntent); } 	1	0	1	0	0	0
@Test public void should_handle_intent_with_shutdown_message() { Intent sensorbergServiceShutdownIntent = SensorbergServiceIntents.getShutdownServiceIntent(InstrumentationRegistry.getContext());  int handleIntentResult = tested.handleIntent(sensorbergServiceShutdownIntent);  Assertions.assertThat(handleIntentResult).isEqualTo(SensorbergService.START_NOT_STICKY); Mockito.verify(tested, Mockito.times(1)).handleDebuggingIntent(sensorbergServiceShutdownIntent, tested, true); Mockito.verify(tested, Mockito.times(1)).handleIntentEvenIfNoBootstrapperPresent(sensorbergServiceShutdownIntent); Mockito.verify(tested, Mockito.times(1)).stopSensorbergService();  Mockito.verify(tested, Mockito.times(0)).updateDiskConfiguration(sensorbergServiceShutdownIntent); Mockito.verify(tested, Mockito.times(0)).startSensorbergService(anyString()); Mockito.verify(tested, Mockito.times(0)).handleIntentMessage(sensorbergServiceShutdownIntent); } 	1	0	1	0	0	0
protected int handleIntent(Intent intent) { Logger.log.serviceHandlesMessage( SensorbergServiceMessage.stringFrom(intent.getIntExtra(SensorbergServiceMessage.EXTRA_GENERIC_TYPE, -1)));  handleDebuggingIntent(intent, this, true);  if (handleIntentEvenIfNoBootstrapperPresent(intent)) { return stopSensorbergService(); }  if (bootstrapper == null) { updateDiskConfiguration(intent); }  if (intent.hasExtra(SensorbergServiceMessage.EXTRA_START_SERVICE)) { return startSensorbergService(intent.getStringExtra(SensorbergServiceMessage.EXTRA_API_KEY)); }  if (intent.hasExtra(SensorbergServiceMessage.EXTRA_GENERIC_TYPE)) { return handleIntentMessage(intent); }  return START_STICKY; } 	1	0	1	0	0	0
public Charset getData() { return data; } 	0	0	0	0	0	1
"@Override public Deployment load(String key, @Nullable Object argument) { ModuleResourceCache.CacheId id = ModuleResourceCache.parseCacheKey(key); Module module = id.getModule(); String filename = id.getName(); String processDefinitionKey = filename.substring(0, filename.indexOf(""."")); Path path = WORKFLOW_MODEL_PATH.append(filename); FileResource resource  = (FileResource) module.getModuleResolver().lookup(path); if (resource != null) { try { // find the latest process definition without a container ProcessDefinition processDef = WorkflowManager.get().getProcessDefinition(processDefinitionKey, null); String deploymentId; if (processDef == null) // no such definition, we'll deploy one { deploymentId = WorkflowManager.get().deployWorkflow(resource.getFile(), null); return WorkflowManager.get().getDeployment(deploymentId); } else { deploymentId = processDef.getDeploymentId(); Deployment deployment = WorkflowManager.get().getDeployment(deploymentId); // file is newer than deployment, so we'll deploy a new version if (deployment.getDeploymentTime().before(new Date(resource.getFile().lastModified()))) { deploymentId = WorkflowManager.get().deployWorkflow(resource.getFile(), null); deployment = WorkflowManager.get().getDeployment(deploymentId); } return deployment; } } catch (FileNotFoundException e) { return null; } } else { return null; } } "	1	1	0	1	1	0
"private void sendIntent(JSONObject data) { Intent i = new Intent(); i.setComponent(new ComponentName(Constants.installedPackage, Constants.activityRunScript)); i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); i.putExtra(Constants.RunActionExtra, Constants.RunActionKey); //i.putExtra(Constants.RunBackgroundExtra,Constants.RunBackgroundKey); i.putExtra(Constants.RunDataExtra, Constants.managerId + ""/"" + data.toString()); startActivity(i);  } "	0	1	0	0	0	0
"@ApiOperation(value = ""outh2 callback"", response = String.class ) @ApiResponses({ @ApiResponse(code=200, message =""Successfully redirected""), @ApiResponse(code=400, message =""Bad Request, something broke""), @ApiResponse(code=500, message =""Cannot receive the token due to a server error "") }) @RequestMapping(value = ""/api/v2/google/google"", method = RequestMethod.GET, params = ""code"") public String oauth2Callback(@RequestParam(value = ""code"") String code) { //        System.out.println(""inside oauth2Callback""); com.google.api.services.calendar.model.Events eventList; String message = """"; try { TokenResponse response = flow.newTokenRequest(code).setRedirectUri(redirectURI).execute(); credential = flow.createAndStoreCredential(response, ""userID"");  client = new com.google.api.services.calendar.Calendar.Builder(httpTransport, JSON_FACTORY, credential) .setApplicationName(APPLICATION_NAME).build();  } catch (Exception e) { logger.warn(""Exception while handling OAuth2 callback ("" + e.getMessage() + "")."" + "" Redirecting to google connection status page.""); message = ""Exception while handling OAuth2 callback ("" + e.getMessage() + "")."" + "" Redirecting to google connection status page.""; } return ""redirect:/""; } "	0	0	0	0	0	1
@Override public Element[] supStreamFeatures(XMPPResourceConnection session) { if (!session.isAuthorized()) return null; return super.supStreamFeatures(session); } 	1	0	1	1	1	0
"@Test public void testBuildWithParametersAndDisabledDefaultConstraints() throws Exception { // Given unit.setActive(false); unit.setSecurity(false);  String docNum = ""123456789""; Person person = new Person(); SpecOffer specOffer = new SpecOffer(); Department department = new Department(); PersonPaper personPaper = new PersonPaper(); EnrolmentType enrolmentType = new EnrolmentType(); Enrolment parent = new Enrolment(); Double mark = 1.2; String docSeries = ""fdsfds""; String docText = ""fdfds""; Integer isState = 1; Integer isContract = 2; Integer isPrivilege = 3; Integer isHostel = 4; Date evDate = new Date(); Date begDate = new Date(); Date endDate = new Date();  Enrolment context = new Enrolment(); context.setPerson(person); context.setSpecOffer(specOffer); context.setDepartment(department); context.setPersonPaper(personPaper); context.setEnrolmentType(enrolmentType); context.setParent(parent); context.setMark(mark); context.setDocSeries(docSeries); context.setDocNum(docNum); context.setDocText(docText); context.setIsState(isState); context.setIsContract(isContract); context.setIsPrivilege(isPrivilege); context.setIsHostel(isHostel); context.setEvDate(evDate); context.setBegDate(begDate); context.setEndDate(endDate);  String expectedQuery = ""SELECT e FROM Enrolment e WHERE ( e.person = :person AND LOWER(e.specOffer) LIKE LOWER(CONCAT('%',:specOffer,'%')) AND e.department = :department AND e.personPaper = :personPaper AND e.enrolmentType = :enrolmentType AND e.parent = :parent AND e.mark = :mark AND LOWER(e.docSeries) LIKE LOWER(CONCAT('%',:docSeries,'%')) AND LOWER(e.docNum) LIKE LOWER(CONCAT('%',:docNum,'%')) AND LOWER(e.docText) LIKE LOWER(CONCAT('%',:docText,'%')) AND e.isState = :isState AND e.isContract = :isContract AND e.isPrivilege = :isPrivilege AND e.isHostel = :isHostel AND e.evDate = :evDate AND e.begDate <= :begDate AND e.endDate >= :endDate ) ""; MultiplePagedSearch<Enrolment> pagedSearch = new MultiplePagedSearch<>(); pagedSearch.setEntity(context);  // When String actualQuery = unit.build(pagedSearch);  // Then assertEquals(expectedQuery, actualQuery); } "	0	0	0	0	0	1
@Override public Map<String, Map<String, Double>> getBooleanRange(List<String> hosts, List<String> metrics, long startTime, long endTime, BooleanFilter filter, AggregationType aggregationType) { JavaRDD<BooleanData> rangeQueryRDD = getRangeQueryRDD(hosts, metrics, startTime, endTime, ValueType.BOOLEAN); //count aggregation Map<HostMetricPair, Double> datas = rangeQueryRDD.filter(data -> data.getValue() == filter.getEq()) .mapToPair(e -> new Tuple2<HostMetricPair, Double>(new HostMetricPair(e.getHost(), e.getMetric()), 1d)) .reduceByKey((e1, e2) -> e1 + e2) .collectAsMap();  Map<String, Map<String, Double>> result = new HashMap<>(); for (Map.Entry<HostMetricPair, Double> data : datas.entrySet()) { String host = data.getKey().getHost(); String metric = data.getKey().getMetric(); if (result.containsKey(host)) { result.get(host).put(metric, data.getValue()); } else { Map<String, Double> map = new HashMap<>(); map.put(metric, data.getValue()); result.put(host, map); } }  return result; } 	0	0	0	0	0	1
private void updateCounts() { passCount = 0; failCount = 0; skipCount = 0; testExceptionCount = 0; callExceptionCount = 0;  if (hasChildren()) { for (TestResult tempResult : getChildren()) { passCount += tempResult.getPassCount(); failCount += tempResult.getFailCount(); skipCount += tempResult.getSkipCount(); if (tempResult instanceof IntegrityTestResult) { testExceptionCount += ((IntegrityTestResult) tempResult).getTestExceptionCount(); callExceptionCount += ((IntegrityTestResult) tempResult).getCallExceptionCount(); } } } } 	0	0	0	0	0	1
"protected void writeToLog(Log logger, String message, Throwable ex) { if(ex!=null){ logger.error(ex); }else if (message.contains(""ENTER"")) { logger.info(message); } else if (message.contains(""EXIT"")) { logger.debug(message); } } "	0	1	1	1	1	0
"public static void checkAmazonStatus(String instanceName, AmazonInstanceState expAmazonState) throws Exception { LOGGER.info(""Check status of instance {} on Amazon: "", instanceName); if (ConfigPropertyValue.isRunModeLocal()) { LOGGER.info(""Amazon instance {} fake state is {}"", instanceName, expAmazonState); return; }  String instanceState; long requestTimeout = ConfigPropertyValue.getAwsRequestTimeout().toMillis(); long timeout = CHECK_TIMEOUT.toMillis(); long expiredTime = System.currentTimeMillis() + timeout; Instance instance = AmazonHelper.getInstance(instanceName); while (true) { instance = AmazonHelper.getInstance(instanceName); instanceState = instance.getState().getName(); if (!instance.getState().getName().equals(""shutting-down"")) { break; } if (timeout != 0 && expiredTime < System.currentTimeMillis()) { LOGGER.info(""Amazon instance {} state is {}"", instanceName, instanceState); throw new Exception(""Timeout has been expired for check amazon instance "" + instanceState); } Thread.sleep(requestTimeout); }  for (Instance i : AmazonHelper.getInstances(instanceName)) { LOGGER.info(""Amazon instance {} state is {}. Instance id {}, private IP {}, public IP {}"", instanceName, instanceState, i.getInstanceId(), i.getPrivateIpAddress(), i.getPublicIpAddress()); } Assert.assertEquals(instanceState, expAmazonState.toString(), ""Amazon instance "" + instanceName + "" state is not correct. Instance id "" + instance.getInstanceId() + "", private IP "" + instance.getPrivateIpAddress() + "", public IP "" + instance.getPublicIpAddress()); } "	0	0	1	1	0	0
"public String generateEquipmentContextContent(final ArrayList<String[]> listEquipmentContexts, final String destination) {  String tableContent = """"; String buttons = """";  for (final String[] equipmentkContext : listEquipmentContexts) {  if (destination == ""context"") { buttons = ""<button id='"" + equipmentkContext[0] + ""' class='btn btn-md btn-default' onClick='viewEquipmentContext(this)' ><div class='glyphicon glyphicon-edit' ></div> View </button>"" + ""<button id='"" + equipmentkContext[0] + ""' class='btn btn-md btn-default' data-clipboard-text='http://gpi.eu/"" + equipmentkContext[0] + ""' onClick='copyEquipmentContextLink(this)'><div class='glyphicon glyphicon-trash'></div> Copy link to Clipboard</button> ""; } else { buttons = ""<button id='"" + equipmentkContext[0] + ""' class='btn btn-md btn-default' onClick='editEquipmentContext(this)' ><div class='glyphicon glyphicon-edit' ></div> Edit </button>"" + ""<button id='"" + equipmentkContext[0] + ""' class='btn btn-md btn-default' onClick='deleteEquipmentContext(this)'><div class='glyphicon glyphicon-trash'></div> Delete </button> "" + ""<button id='"" + equipmentkContext[0] + ""' class='btn btn-md btn-default' onClick='copyEquipmentContext(this)'><div class='glyphicon glyphicon-copy'></div> Copy </button>""; }  tableContent += ""<tr>"" + ""<td id='tdEquipmentContextName_"" + equipmentkContext[0] + ""'>"" + equipmentkContext[0] + ""</td>"" + ""<td>"" + equipmentkContext[1] + ""</td>"" + ""<td>"" + equipmentkContext[3] + ""</td>"" + ""<td>"" + equipmentkContext[2] + ""</td>"" + ""<td>"" + buttons + ""</td></tr>""; }  return tableContent; } "	0	0	0	0	0	1
"public String generateUserContextContent(final ArrayList<String[]> listUserContexts, final String destination) {  String tableContent = """"; String buttons = """";  for (final String[] userContext : listUserContexts) {  if (destination == ""context"") { buttons = ""<button id='"" + userContext[1] + ""' class='btn btn-md btn-default' onClick='viewUserContext(this)' ><div class='glyphicon glyphicon-edit' ></div> View </button>"" + ""<button id='"" + userContext[1] + ""' class='btn btn-md btn-default' data-clipboard-text='"" + userContext[1] + ""' onClick='copyUserContextLink(this)'><div class='glyphicon glyphicon-trash'></div>Copy link to Clipboard</button> ""; } else { buttons = ""<button id='"" + userContext[1] + ""' class='btn btn-md btn-default' onClick='editUserContext(this)' ><div class='glyphicon glyphicon-edit' ></div> Edit </button>"" + ""<button id='"" + userContext[1] + ""' class='btn btn-md btn-default' onClick='deleteUserContext(this)'><div class='glyphicon glyphicon-trash'></div> Delete </button> "" + ""<button id='"" + userContext[1] + ""' class='btn btn-md btn-default' onClick='copyUserContext(this)'><div class='glyphicon glyphicon-copy'></div> Copy </button>""; }  tableContent += ""<tr>"" + ""<td id='tdUserContextName_"" + userContext[1] + ""'>"" + userContext[1] + ""</td>"" + ""<td>"" + userContext[0] + ""</td>"" + ""<td>"" + userContext[3] + ""</td>"" + ""<td>"" + userContext[2] + ""</td>"" + ""<td>"" + buttons + "" </td></tr>""; }  return tableContent; } "	0	0	0	0	0	1
"@MJI public long getAndAdd__J__J (MJIEnv env, int objRef, long delta) { long value = env.getIntField(objRef, ""value""); env.setLongField(objRef, ""value"", value + delta); return value; } "	0	0	1	1	0	0
private List<VCFHeaderLine> getAdditionalHeaderLines() { List<VCFHeaderLine> lines = new ArrayList<>();  // add INFO descriptions for (ExomiserVcfInfoField infoField : ExomiserVcfInfoField.values()) { lines.add(infoField.getVcfHeaderLine()); }  // add FILTER descriptions for (FilterType ft : FilterType.values()) { lines.add(new VCFFilterHeaderLine(ft.name(), ft.toString())); }  return lines; } 	0	1	0	0	0	0
"@Test public void testBuildWithParametersWithOrderBy() throws Exception { // Given String docNum = ""123456789""; Person person = new Person(); SpecOffer specOffer = new SpecOffer(); Department department = new Department(); PersonPaper personPaper = new PersonPaper(); EnrolmentType enrolmentType = new EnrolmentType(); Enrolment parent = new Enrolment(); Double mark = 1.2; String docSeries = ""fdsfds""; String docText = ""fdfds""; Integer isState = 1; Integer isContract = 2; Integer isPrivilege = 3; Integer isHostel = 4; Date evDate = new Date(); Date begDate = new Date(); Date endDate = new Date();  Enrolment context = new Enrolment(); context.setPerson(person); context.setSpecOffer(specOffer); context.setDepartment(department); context.setPersonPaper(personPaper); context.setEnrolmentType(enrolmentType); context.setParent(parent); context.setMark(mark); context.setDocSeries(docSeries); context.setDocNum(docNum); context.setDocText(docText); context.setIsState(isState); context.setIsContract(isContract); context.setIsPrivilege(isPrivilege); context.setIsHostel(isHostel); context.setEvDate(evDate); context.setBegDate(begDate); context.setEndDate(endDate);  OrderBy orderBy1 = new OrderBy(""person"", OrderByType.ASC); OrderBy orderBy2 = new OrderBy(""specOffer"", OrderByType.DESC); OrderBy orderBy3 = new OrderBy(""department"", OrderByType.ASC); OrderBy orderBy4 = new OrderBy(""personPaper"", OrderByType.DESC); OrderBy orderBy5 = new OrderBy(""enrolmentType"", OrderByType.ASC); OrderBy orderBy6 = new OrderBy(""parent"", OrderByType.DESC); OrderBy orderBy7 = new OrderBy(""mark"", OrderByType.ASC); OrderBy orderBy8 = new OrderBy(""docSeries"", OrderByType.DESC); OrderBy orderBy9 = new OrderBy(""docNum"", OrderByType.ASC); OrderBy orderBy10 = new OrderBy(""docText"", OrderByType.DESC); OrderBy orderBy11 = new OrderBy(""isState"", OrderByType.ASC); OrderBy orderBy12 = new OrderBy(""isContract"", OrderByType.DESC); OrderBy orderBy13 = new OrderBy(""isPrivilege"", OrderByType.ASC); OrderBy orderBy14 = new OrderBy(""isHostel"", OrderByType.DESC); OrderBy orderBy15 = new OrderBy(""evDate"", OrderByType.ASC); OrderBy orderBy16 = new OrderBy(""begDate"", OrderByType.DESC); OrderBy orderBy17 = new OrderBy(""endDate"", OrderByType.ASC); OrderBy orderBy18 = new OrderBy(""priority"", OrderByType.DESC); List<OrderBy> orders = Arrays.asList(orderBy1, orderBy2, orderBy3, orderBy4, orderBy5, orderBy6, orderBy7, orderBy8, orderBy9, orderBy10, orderBy11, orderBy12, orderBy13, orderBy14, orderBy15, orderBy16, orderBy17, orderBy18);  String expectedQuery = ""SELECT e FROM Enrolment e WHERE ( e.person = :person AND e.specOffer LIKE CONCAT('%',:specOffer,'%') AND e.department = :department AND e.personPaper = :personPaper AND e.enrolmentType = :enrolmentType AND e.parent = :parent AND e.mark = :mark AND e.docSeries LIKE CONCAT('%',:docSeries,'%') AND e.docNum LIKE CONCAT('%',:docNum,'%') AND e.docText LIKE CONCAT('%',:docText,'%') AND e.isState = :isState AND e.isContract = :isContract AND e.isPrivilege = :isPrivilege AND e.isHostel = :isHostel AND e.evDate = :evDate AND e.begDate <= :begDate AND e.endDate >= :endDate) AND e.status=:status AND e.crtUserGroup IN (:userGroups) ORDER BY e.person ASC, e.specOffer DESC, e.department ASC, e.personPaper DESC, e.enrolmentType ASC, e.parent DESC, e.mark ASC, e.docSeries DESC, e.docNum ASC, e.docText DESC, e.isState ASC, e.isContract DESC, e.isPrivilege ASC, e.isHostel DESC, e.evDate ASC, e.begDate DESC, e.endDate ASC, e.priority DESC""; MultiplePagedSearch<Enrolment> pagedSearch = new MultiplePagedSearch<>(); pagedSearch.setEntity(context); pagedSearch.setOrders(orders);  // When String actualQuery = unit.build(pagedSearch);  // Then assertEquals(expectedQuery, actualQuery); } "	0	0	0	0	0	1
"@Test public void testBuildWithPlaceholder() throws Exception { // Given PersonList context = new PersonList(); context.setNames(Arrays.asList(""name1"", ""name2""));  String expectedQuery = ""SELECT e FROM Person e WHERE (  (e.name LIKE '%name1%' OR e.name LIKE '%name2%' ) ) AND e.status=:status AND e.crtUserGroup IN (:userGroups) ""; MultiplePagedSearch<PersonList> pagedSearch = new MultiplePagedSearch<>(); pagedSearch.setEntity(context);  // When String actualQuery = unit.build(pagedSearch);  // Then assertEquals(expectedQuery, actualQuery); } "	0	0	0	0	0	1
"public static String getTypeString(Type type) { if (type instanceof IntegerType) return ""Int""; else if (type instanceof BooleanType) return ""Bool""; else { Type t = type; StringBuilder result = new StringBuilder().append(""(""); while (((ArrayType) t).getType() instanceof ArrayType) { t = ((ArrayType) t).getType(); result.append(""Int ""); } result.append(getTypeString(t)).append("")""); return result.toString(); } } "	1	0	1	1	1	0
@Override public Object getChild(int groupPosition, int childPosition) { return items[groupPosition][childPosition]; } 	0	0	0	0	0	1
"@Test public void addCalamityAssignee() throws Exception { CalamityController cc = new CalamityController(); UserController uc = new UserController(); User user;  Location location = new Location(5, 51, 1);  Calamity c1 = (Calamity) cc.addCalamity(""asdasd"", ""nine-eleven-test"", ""test of 911"", location).getReturnObject();  ConfirmationMessage cm = uc.addUser(-1, -1, USERNAME, PASSWORD, EMAIL, CITY, """");  user = (User) cm.getReturnObject();  cc.addCalamityAssignee(""sdasd"", c1.getId(), user.getId());  c1 = cc.calamityById(""sdasd"", c1.getId());  Assert.assertEquals(true, isAssigned(user, c1));  cc.deleteCalamityAssignee(""sdasd"", c1.getId(), user.getId());  c1 = cc.calamityById(""sdasd"", c1.getId());  Assert.assertEquals(false, isAssigned(user, c1)); } "	0	0	0	0	0	1
"@Override public String toString() { return ""Statemachine{"" + ""ID='"" + ID + '\'' + "", startState="" + startState.getName() + "", currentState=""+currentState.getName() + "", isActive="" + isActive + "", nbOfStates =""+ states.keySet().size()+ '}'; } "	0	0	0	0	0	1
"public Object put(final V data) { ArgumentChecker.required(data, ""data""); K key = data.getId(); return this._store.put(key, data); } "	0	0	0	0	0	1
public IIdentifiable get(K id) { return this._store.get(id); } 	0	0	0	0	0	1
"@Override public int getDiskSize() { log.debug(""Getting disk size of host [id="" + resource.getId() + ""]"");  Server server = getServer(); Flavor flavor = (Flavor) server.getFlavor();  return flavor.getDisk(); } "	1	1	1	1	0	0
"private void captureTable(Table t) throws SQLException, InvalidSchemaError { int i = 0; infoSchemaStmt.setString(1, t.getDatabase()); infoSchemaStmt.setString(2, t.getName()); ResultSet r = infoSchemaStmt.executeQuery();  while(r.next()) { String[] enumValues = null; String colName    = r.getString(""COLUMN_NAME""); String colType    = r.getString(""DATA_TYPE""); String colEnc     = r.getString(""CHARACTER_SET_NAME""); int colPos        = r.getInt(""ORDINAL_POSITION"") - 1; boolean colSigned = !r.getString(""COLUMN_TYPE"").matches("" unsigned$"");  if ( r.getString(""COLUMN_KEY"").equals(""PRI"") ) t.pkIndex = i;  if ( colType.equals(""enum"") || colType.equals(""set"")) { String expandedType = r.getString(""COLUMN_TYPE"");  enumValues = extractEnumValues(expandedType); }  t.addColumn(ColumnDef.build(colName, colEnc, colType, colPos, colSigned, enumValues)); i++; } captureTablePK(t); } "	0	0	0	1	0	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); setContentView(R.layout.activity_linechart);  tvX = (TextView) findViewById(R.id.tvXMax); tvY = (TextView) findViewById(R.id.tvYMax);  mSeekBarX = (SeekBar) findViewById(R.id.seekBar1); mSeekBarY = (SeekBar) findViewById(R.id.seekBar2);  mSeekBarX.setProgress(45); mSeekBarY.setProgress(100);  mSeekBarY.setOnSeekBarChangeListener(this); mSeekBarX.setOnSeekBarChangeListener(this);  mChart = (LineChart) findViewById(R.id.chart1); mChart.setViewPortOffsets(0, 20, 0, 0); mChart.setBackgroundColor(Color.rgb(104, 241, 175));  // no description text mChart.setDescription("""");  // enable touch gestures mChart.setTouchEnabled(true);  // enable scaling and dragging mChart.setDragEnabled(true); mChart.setScaleEnabled(true);  // if disabled, scaling can be done on x- and y-axis separately mChart.setPinchZoom(false);  mChart.setDrawGridBackground(false);  tf = Typeface.createFromAsset(getAssets(), ""OpenSans-Regular.ttf"");  XAxis x = mChart.getXAxis(); x.setEnabled(false);  YAxis y = mChart.getAxisLeft(); y.setTypeface(tf); y.setLabelCount(6, false); y.setTextColor(Color.WHITE); y.setPosition(YAxis.YAxisLabelPosition.INSIDE_CHART); y.setDrawGridLines(false); y.setAxisLineColor(Color.WHITE);  mChart.getAxisRight().setEnabled(false);  // add data setData(45, 100);  mChart.getLegend().setEnabled(false);  mChart.animateXY(2000, 2000);  // dont forget to refresh the drawing mChart.invalidate(); } "	1	1	1	1	0	0
"private static void startBundle(Bundle bundle, Logger logger) { logger.info(""Starting bundle: [{}], version: [{}]"", bundle, bundle.getVersion()); try { bundle.start(); } catch (BundleException | IllegalStateException | SecurityException ex) { logger.error(""Exception while starting bundle: [{}]. Cause:"", bundle, ex); } } "	0	0	0	0	0	1
"public static void openImage(Activity contextActivity, Submission submission) { if (SettingValues.image) { Intent myIntent = new Intent(contextActivity, MediaView.class); String url; String previewUrl; url = submission.getUrl();  if (SettingValues.loadImageLq && ((!NetworkUtil.isConnectedWifi(contextActivity) && SettingValues.lowResMobile) || SettingValues.lowResAlways) && submission.getThumbnails() != null && submission.getThumbnails().getVariations() != null) { int length = submission.getThumbnails().getVariations().length; previewUrl = Html.fromHtml(submission.getThumbnails().getVariations()[length / 2].getUrl()).toString(); //unescape url characters myIntent.putExtra(MediaView.EXTRA_LQ, true); myIntent.putExtra(MediaView.EXTRA_DISPLAY_URL, previewUrl); } else if (submission.getDataNode().has(""preview"") && submission.getDataNode().get(""preview"").get(""images"").get(0).get(""source"").has(""height"")) { //Load the preview image which has probably already been cached in memory instead of the direct link previewUrl = submission.getDataNode().get(""preview"").get(""images"").get(0).get(""source"").get(""url"").asText(); myIntent.putExtra(MediaView.EXTRA_DISPLAY_URL, previewUrl); } myIntent.putExtra(MediaView.EXTRA_URL, url); myIntent.putExtra(MediaView.EXTRA_SHARE_URL, submission.getUrl());  contextActivity.startActivity(myIntent); } else { Reddit.defaultShare(submission.getUrl(), contextActivity); }  } "	0	0	0	1	0	0
"public static synchronized List<RequestorEntry> loadRequestorsForPool(String poolID) { List<RequestorEntry> result = new ArrayList<>(); try { List<LDAPRequestorEntry> entries = ldapEntryManager.findEntries(getDnForLDAPRequestorEntry(null), LDAPRequestorEntry.class, null); for (LDAPRequestorEntry entry : entries) { if (poolID.equalsIgnoreCase(entry.getId())) { result.add(entry.getEntry()); } } } catch (Exception ex) { log.error(""Failed to load LDAP configuration RequestorEntry list""); } return result; } "	0	1	0	0	0	0
"@Override public void loadPreferences() { if (!settingsFile.exists()) { return; } ObjectInputStream in; try { in = new ObjectInputStream(new FileInputStream(settingsFile)); settings = (Settings) in.readObject(); String fname = settings.getFontName(); if(settings.isFontAvailable() && fname != null) msg.error(null,fname+"" font is not available in this system""); bgColor = settings.getBgColor(); fgColor = settings.getFgColor(); in.close(); labelSlider.setValue(settings.getLblSize()); buttonSlider.setValue(settings.getBtnSize()); int i = 0; for (Font f : fonts) if (f.getFontName().equals(settings.getFontName())) break; else i++; /* *Some times when autoselecting last available font *You might end up with a font that is crazy *So in this case select a normal font ""Arial"" */ fontCombo.setSelectedIndex(i>=fonts.length?settings.getFontIndex(""Arial""):i); updatePreview(); applySettings(); } catch (InvalidClassException | ClassNotFoundException e) { boolean d = settingsFile.delete(); msg.error( prefPanel, ""Settings come from an older version of program that is not supported.Please choose new settings and press 'Save'"", ""Unsupported settings""); if (d) msg.info(prefPanel, ""Old file deleted"", ""Success""); fh.log(e.getMessage()); } catch (IOException e) { msg.error(prefPanel, ""Can't load preferences"", ""Error""); fh.log(e.getMessage()); } } "	1	1	1	1	0	0
public static <T extends JCTree> T setGeneratedBy(T node, JCTree source) { synchronized (generatedNodes) { if (source == null) generatedNodes.remove(node); else generatedNodes.put(node, source); } return node; } 	0	0	0	0	0	1
"@Nullable private static String getScreenResolution(Context appContext) { Resources resources = appContext.getResources(); if (resources == null) return null; DisplayMetrics metrics = resources.getDisplayMetrics(); return String.format(""%dx%d"", Math.max(metrics.widthPixels, metrics.heightPixels), Math.min(metrics.widthPixels, metrics.heightPixels)); } "	0	1	0	0	0	0
"public String readVimAddressFromVimUuid(String vimUuid) { String output = null; Connection connection = null; PreparedStatement stmt = null; ResultSet rs = null; try { Class.forName(""org.postgresql.Driver""); connection = DriverManager.getConnection( ""jdbc:postgresql://"" + prop.getProperty(""repo_host"") + "":"" + prop.getProperty(""repo_port"") + ""/"" + ""wimregistry"", prop.getProperty(""user""), prop.getProperty(""pass"")); connection.setAutoCommit(false);  stmt = connection.prepareStatement( ""SELECT vim_address FROM attached_vim WHERE vim_uuid = ?;""); stmt.setString(1, vimUuid); rs = stmt.executeQuery();  while (rs.next()) { output = rs.getString(""VIM_UUID"");   }  } catch (SQLException e) { Logger.error(e.getMessage(), e); output = null; } catch (ClassNotFoundException e) { Logger.error(e.getMessage(), e); output = null; } finally { try { if (stmt != null) { stmt.close(); } if (rs != null) { rs.close(); } if (connection != null) { connection.close(); } } catch (SQLException e) { Logger.error(e.getMessage(), e); output = null;  } } Logger.info(""Operation done successfully""); return output;  } "	0	1	0	0	0	0
"@Test public void testEmptyButValidMultiJSON() { String badJson = ""[]""; List<Bundle> bundle = HttpAggregatedMultiIngestionHandler.createBundleList(badJson); } "	0	1	0	0	0	0
private int convertToSections(int health) { return (int)Math.ceil(health / healthPointsPerUnit); } 	0	0	0	0	0	1
@Override public Integer get(MaterialRippleLayout object) { return object.getRippleAlpha(); } 	0	0	0	0	0	1
"public void notifyDataSetChanged() { tabsContainer.removeAllViews(); tabCount = pager.getAdapter().getCount(); View tabView; for (int i = 0; i < tabCount; i++) { if (pager.getAdapter() instanceof CustomTabProvider) { tabView = ((CustomTabProvider) pager.getAdapter()).getCustomTabView(this, i); } else { tabView = LayoutInflater.from(getContext()).inflate(R.layout.psts_tab, this, false); }  MaterialRippleLayout materialRippleLayout = MaterialRippleLayout.on(tabView) .rippleAlpha(rippleAlpha) .rippleBackground(rippleBackgroundColor) .rippleColor(rippleColor) .rippleDelayClick(rippleDelayClick) .rippleDiameterDp(rippleDiameter) .rippleDuration(rippleDuration) .rippleFadeDuration(rippleFadeDuration) .rippleHover(rippleHover) .rippleHighlightColor(rippleHighlightColor) .rippleInAdapter(rippleInAdapter) .rippleOverlay(rippleOverlay) .ripplePersistent(ripplePersistent) .rippleRoundedCorners(Utils.dpToPx(getResources(), rippleRoundedCorners)) .create();  CharSequence title = pager.getAdapter().getPageTitle(i);  addTab(i, title, materialRippleLayout); }  updateTabStyles(); getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {  @SuppressWarnings(""deprecation"") @SuppressLint(""NewApi"") @Override public void onGlobalLayout() {  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) { getViewTreeObserver().removeGlobalOnLayoutListener(this); } else { getViewTreeObserver().removeOnGlobalLayoutListener(this); } } }); } "	0	0	0	0	0	1
private void writePeriod() throws AdeException { /* Initialize the Period JAXB classes */ Systems systems = new Systems();  /* * Write out the header */ systems.setVersion(XML_VERSION);  Date startTime = PeriodUtils.getContainingPeriodStart(m_periodStartDate); m_gc.setTimeInMillis(startTime.getTime()); XMLGregorianCalendar startXMLDate = s_dataTypeFactory.newXMLGregorianCalendar(m_gc); systems.setStartTime(startXMLDate);  Date endTime = PeriodUtils.getNextPeriodStart(m_periodStartDate); m_gc.setTimeInMillis(endTime.getTime()); XMLGregorianCalendar endXMLDate = s_dataTypeFactory.newXMLGregorianCalendar(m_gc); systems.setEndTime(endXMLDate);  systems.setGmtOffset(m_xmlMetaData.getGMTOffset(m_source.getSourceId()));  systems.setIntervalSize(m_xmlMetaData.getIntervalLengthInSeconds());  /* NumberIntervals complex type */ NumberIntervals numberOfIntervals = new NumberIntervals(); systems.setNumberIntervals(numberOfIntervals); numberOfIntervals.setValue(XMLUtil.getNumberOfSnapshots(m_framingFlowType)); numberOfIntervals.setAnalysisSnapshotSize(XMLUtil.getXMLHardenedDurationInSeconds(m_framingFlowType));  /* ModelInfo complex type */ ModelInfo modelInfo = new ModelInfo(); systems.setModelInfo(modelInfo); modelInfo.setAnalysisGroup(m_xmlMetaData.getAnalysisGroupName()); modelInfo.setModelCreationDate(m_xmlMetaData.getModelCreationDate()); modelInfo.setTrainingPeriod(m_xmlMetaData.getNumberOfDaysInTraining());  /* * Write out the interval */ SystemsSystemType system = new SystemsSystemType(); systems.setSystem(system);  system.setLogType(m_xmlMetaData.getLogType()); system.setSysId(m_source.getSourceId());  /* Write out the list of system */ List<SystemsIntervalType> listOfInterval = system.getInterval(); for (int i = 0; i < m_numIntervals; ++i) { SystemsIntervalType intervalType = new SystemsIntervalType(); listOfInterval.add(intervalType);  if (m_aiVec[i].m_results_file != null && m_aiVec[i].m_results_file.length() > 0) { intervalType.setMissing(false); } else { intervalType.setMissing(true); intervalType.setMissingReason(MISSING_INTERVAL_REASON_NO_CONNECTION); }  intervalType.setIndex(i);  double value = Double.valueOf(SingleDigitFormatter.format(m_aiVec[i].m_anomaly_score * 100)); intervalType.setAnomalyScore(value); intervalType.setNumUniqueMsgIds(m_aiVec[i].m_num_unique_msg_ids); intervalType.setNumNewMessages(m_aiVec[i].m_numNewMessages); intervalType.setNumNeverSeenBeforeMessages(m_aiVec[i].m_numNeverSeenBeforeMessages); intervalType.setLimitedModel(m_aiVec[i].m_modelQualityIndicator.toString()); }  /* Write out the XML */ writeToXML(systems, s_marshaller); } 	0	0	0	0	0	1
"@Override public CodeQuality currentCodeQuality(SonarProject project) { String url = String.format( project.getInstanceUrl() + URL_RESOURCE_DETAILS, project.getProjectId(), sonarSettings.getMetrics());  try { JSONArray jsonArray = parseAsArray(url);  if (!jsonArray.isEmpty()) { JSONObject prjData = (JSONObject) jsonArray.get(0);  CodeQuality codeQuality = new CodeQuality(); codeQuality.setName(str(prjData, NAME)); codeQuality.setUrl(project.getInstanceUrl() + ""/dashboard/index/"" + project.getProjectId()); codeQuality.setType(CodeQualityType.StaticAnalysis); codeQuality.setTimestamp(timestamp(prjData, DATE)); codeQuality.setVersion(str(prjData, VERSION));  for (Object metricObj : (JSONArray) prjData.get(MSR)) { JSONObject metricJson = (JSONObject) metricObj;  CodeQualityMetric metric = new CodeQualityMetric(str(metricJson, KEY)); metric.setValue(metricJson.get(VALUE)); metric.setFormattedValue(str(metricJson, FORMATTED_VALUE)); metric.setStatus(metricStatus(str(metricJson, ALERT))); metric.setStatusMessage(str(metricJson, ALERT_TEXT)); codeQuality.getMetrics().add(metric); }  return codeQuality; }  } catch (ParseException e) { LOG.error(""Could not parse response from: "" + url, e); } catch (RestClientException rce) { LOG.error(rce); }  return null; } "	0	1	0	0	0	0
"@Override public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {  String requestType = (String) request.getParameter(""type""); String requestRedirAddress = (String) request.getParameter(""address""); String username = (String) request.getParameter(""username""); String password = (String) request.getParameter(""password""); request.setAttribute(""username"", request.getParameter(""username"")); request.setAttribute(""password"", request.getParameter(""password"")); if (requestType.equals(""redirect"")) { RequestDispatcher requestDispather; request.setAttribute(""loginStatus"", request.getParameter(""loginStatus"")); request.setAttribute(""username"", request.getParameter(""username"")); request.setAttribute(""password"", request.getParameter(""password"")); if (requestRedirAddress.equals(""orderHistory"")) { requestDispather = request.getRequestDispatcher(""/WEB-INF/orderHistory.jsp""); } else if (requestRedirAddress.equals(""login"")) { requestDispather = request.getRequestDispatcher(""/WEB-INF/login.jsp""); } else if (requestRedirAddress.equals(""create"")) { requestDispather = request.getRequestDispatcher(""/WEB-INF/accountCreate.jsp""); } else if (requestRedirAddress.equals(""productPage"")) { requestDispather = request.getRequestDispatcher(""/WEB-INF/productPage.jsp""); } else if (requestRedirAddress.equals(""createProduct"")) { requestDispather = request.getRequestDispatcher(""/WEB-INF/productCreate.jsp""); } else if (requestRedirAddress.equals(""sellList"")) { List<Product> products =  DataStorage.getProductLists(username); request.setAttribute(""ProductListsSize"", products.size()); request.setAttribute(""ProductLists"", products); requestDispather = request.getRequestDispatcher(""/WEB-INF/productSellingList.jsp""); } else if (requestRedirAddress.equals(""feedbackHistory"")) { requestDispather = request.getRequestDispatcher(""/WEB-INF/feedbackHistory.jsp""); } else { requestDispather = request.getRequestDispatcher(""/WEB-INF/index.jsp""); } requestDispather.forward(request, response); } else if (requestType.equals(""login"")) { try { request.setAttribute(""PurchaseCounts"", DataStorage.getPurchaseCounts()); List<loginInfo> login = DataStorage.verifySignin(username, password); request.setAttribute(""loginStatus"", false); for(loginInfo item : login) { request.setAttribute(""loginStatus"", item.getLoginStatus()); request.setAttribute(""username"", item.getUsername()); request.setAttribute(""password"", item.getPassword()); request.setAttribute(""lastname"", item.getLastName()); request.setAttribute(""firstname"", item.getFirstName()); } } catch (Exception e){ request.setAttribute(""loginStatus"", false); } RequestDispatcher requestDispather = request.getRequestDispatcher(""/WEB-INF/index.jsp""); requestDispather.forward(request, response); } else if (requestType.equals(""logout"")) { request.setAttribute(""loginStatus"", false); RequestDispatcher requestDispather = request.getRequestDispatcher(""/WEB-INF/index.jsp""); requestDispather.forward(request, response); } else if (requestType.equals(""createAcc"")) { try { String usernameNewAcc = (String) request.getParameter(""username""); String passwordNewAcc = (String) request.getParameter(""password""); String lastName = (String) request.getParameter(""lastname""); String firstName = (String) request.getParameter(""firstname""); request.setAttribute(""createStatus"", DataStorage.createAccount(usernameNewAcc, passwordNewAcc, lastName, firstName)); request.setAttribute(""loginStatus"", false); } catch (Exception e){ request.setAttribute(""createStatus"", false); request.setAttribute(""loginStatus"", false); } RequestDispatcher requestDispather = request.getRequestDispatcher(""/WEB-INF/index.jsp""); requestDispather.forward(request, response); } else if (requestType.equals(""createProduct"")) { String loginStatus = (String) request.getParameter(""loginStatus""); try { String title = (String) request.getParameter(""title""); String type = (String) request.getParameter(""ProductType""); String price = (String) request.getParameter(""price""); String description = (String) request.getParameter(""description"");  request.setAttribute(""createStatus"", DataStorage.createProduct(username, title, type, price, description)); request.setAttribute(""loginStatus"", loginStatus); } catch (Exception e){ request.setAttribute(""createProductStatus"", false); request.setAttribute(""loginStatus"", loginStatus); } RequestDispatcher requestDispather = request.getRequestDispatcher(""/WEB-INF/index.jsp""); requestDispather.forward(request, response); } } "	0	1	0	0	0	0
public void clear() { this.localCache.invalidateAll(); } 	0	0	0	0	0	1
public Equality compare(String author1, String year1, String author2, String year2) { // compare recombination authors first Equality result = compareAuthor(author1, author2, minCommonSubstring); if (result != Equality.EQUAL) { // if authors are not the same we allow a positive year comparison to override it as author comparison is very difficult Equality yresult = compareYear(year1, year2); if (yresult != Equality.UNKNOWN) { result = yresult; } } return result; } 	0	0	0	0	0	1
private Equality compareAuthor(String a1, String a2, int minCommonSubstring) { // all lower case now, no punctuation and normed whitespace a1 = normalize(a1); a2 = normalize(a2); if (a1 != null && a2 != null) { // 1: test for shared name prefix Equality equality = compareSurnamesOverlap(a1, a2, minCommonSubstring); if (equality != Equality.EQUAL) { // 2: test for shared prefix after lookups String lookup1 = lookup(a1); String lookup2 = lookup(a2); if (!lookup1.equals(a1) || !lookup2.equals(a2)) { equality = compareSurnamesOverlap(lookup1, lookup2, minCommonSubstring+1); } } return equality; } return Equality.UNKNOWN; } 	0	0	0	0	0	1
public static String prepareDocToJson(ODocument doc,String format){ return doc.toJSON(format.toString()); } 	1	0	1	1	1	0
@GraphQLField public String test(int other, TestInputArgument arg) { return arg.a; } 	0	0	0	0	0	1
@Override public Loan update(User user, Loan unsavedLoan, Loan savedLoan) throws IllegalAccessException { unsavedLoan.setVehiclePredictPrice(null); return super.updateLoan(user, unsavedLoan, savedLoan, false); } 	1	0	1	1	1	0
@Override public void a(Throwable throwable) { print(Logger.Level.ASSERT, null, throwable); } 	1	0	1	1	1	0
public void setLandscape(boolean landscape) { this.mIsLandscape = mIsLandscape; if (this.mIsLandscape) { this.mTop = this.mGreen; this.mBottom = this.mBlue; this.mRight = this.mYellow; this.mLeft = this.mRed; return; } this.mTop = this.mRed; this.mBottom = this.mYellow; this.mLeft = this.mBlue; this.mRight = this.mGreen; } 	1	0	1	1	1	0
"private static String getTaskListString(List<String> taskList) {  if (taskList != null & !taskList.isEmpty()) { String list = """"; for (String id : taskList) { list = list + id + LIST_SEPARATOR; } return list; } else { return null; } } "	1	0	1	1	1	0
public static void Execute(){ while (totalBytes + 0x200 > Registers.readPC()){ CPURun(); Registers.currentState(); } } 	1	0	1	1	1	0
@Override public boolean pickup(EntityLivingBase entity, boolean simulate) { ItemStack stack = AmmoHelper.getMatchingItemstackFromInventory(parent, entity, true); if(stack.getItem() instanceof IAmmo) { if(!simulate && parent.getCount() > 0) { ToolHelper.unbreakTool(stack); ((IAmmo) stack.getItem()).addAmmo(stack, entity); } return true; }  return false; } 	0	1	0	0	0	0
"private LocalVariableGen create_method_scope_local(MethodGen mg, String name, Type type) {  // BCEL sorts local vars and presents them in offset order.  Search // locals for first var with start != 0. If none, just add the new // var at the end of the table and exit. Otherwise, insert the new // var just prior to the local we just found. // Now we need to make a pass over the byte codes to update the local // offset values of all the locals we just shifted up.  This may have // a 'knock on' effect if we are forced to change an instruction that // references implict local #3 to an instruction with an explict // reference to local #4 as this would require the insertion of an // offset into the byte codes. This means we would need to make an // additional pass to update branch targets (no - BCEL does this for // us) and the StackMapTable (yes - BCEL should do this, but it doesn't).  LocalVariableGen lv_new; int max_offset = -1; int new_offset = -1; // get a copy of the local before modification LocalVariableGen[] locals = mg.getLocalVariables(); int local_temp_count = 0;  for (LocalVariableGen lv : mg.getLocalVariables()) { if (lv.getStart().getPosition() != 0) { if (new_offset == -1) { new_offset = lv.getIndex(); compiler_temp_count = local_temp_count; } lv.setIndex(lv.getIndex() + type.getSize()); } // need to add 1 if type is double or long max_offset = lv.getIndex() + lv.getType().getSize() - 1; if (lv.getName().startsWith(""DaIkOnTeMp"")) { local_temp_count++; } else { local_temp_count = 0; } }  // System.out.printf (""new_offset %s%n"", new_offset);  // Special case: sometimes the java compiler allocates unnamed // temps at the end of the locals - we want to insert before them. if (new_offset == -1) { if (mg.getMaxLocals() > max_offset + 1) { new_offset = max_offset + 1; compiler_temp_count = 0; } }  // System.out.printf (""new_offset %s%n"", new_offset);  if (new_offset != -1) { // insert the local variable into existing table at slot 'new_offset' lv_new = mg.addLocalVariable(name, type, new_offset, null, null); mg.setMaxLocals(mg.getMaxLocals() + type.getSize());  // Process the instruction list, adding one to the offset // within each LocalVariableInstruction that references a // local that is 'higher' in the local map than new local // we just inserted. adjust_code_for_locals_change (mg, new_offset, type.getSize());  } else { // create the local variable at end of locals // will automatically update max_locals lv_new = mg.addLocalVariable(name, type, null, null); new_offset = lv_new.getIndex(); compiler_temp_count = 0; }  // System.out.printf (""create_method_scope_local-1 %s%n"", compiler_temp_count);  // We also need to update any FULL_FRAME StackMap entries to // add in the new local variable type. update_full_frame_stack_map_entries (new_offset, type, locals);  debug_instrument.log (""New LocalVariableTable: %s%n"", mg.getLocalVariableTable(pool)); return lv_new; } "	0	0	0	0	0	1
"public void install_exception_handler (MethodGen mg) {  if (global_catch_il == null) return;  InstructionList cur_il = mg.getInstructionList(); InstructionHandle start = global_exception_handler.getStartPC(); InstructionHandle end = global_exception_handler.getEndPC(); InstructionHandle exc = cur_il.append (global_catch_il); cur_il.setPositions(); mg.addExceptionHandler(start, end, exc, throwable); // discard temporary handler global_catch_il = null; global_exception_handler = null;  if (!needStackMap) return;  int exc_offset = exc.getPosition();  debug_instrument.log (""New ExceptionHandler: %x %x %x %n"", start.getPosition(), end.getPosition(), exc_offset);  // This is a trick to get running_offset set to // value of last stack map entry. update_stack_map_offset(exc_offset, 0); int map_offset = exc_offset - running_offset - 1;  // Get the argument types for this method Type[] arg_types = mg.getArgumentTypes();  int arg_index = (mg.isStatic()? 0 : 1); StackMapType[] arg_map_types = new StackMapType[arg_types.length + arg_index]; if (!mg.isStatic()) { arg_map_types[0] = new StackMapType(Constants.ITEM_Object, pool.addClass(mg.getClassName()), pool.getConstantPool()); } for (int ii = 0; ii < arg_types.length; ii++) { arg_map_types[arg_index++] = generate_StackMapType_from_Type (arg_types[ii]); }  StackMapTableEntry map_entry; StackMapType stack_map_type = new StackMapType (Constants.ITEM_Object, pool.addClass(throwable.getClassName()), pool.getConstantPool()); StackMapType[] stack_map_types = {stack_map_type}; map_entry = new StackMapTableEntry (Constants.FULL_FRAME, map_offset, arg_map_types.length, arg_map_types, 1, stack_map_types, pool.getConstantPool());  int orig_size = stack_map_table.length; new_stack_map_table = new StackMapTableEntry[orig_size+1]; System.arraycopy (stack_map_table, 0, new_stack_map_table, 0, orig_size); new_stack_map_table[orig_size] = map_entry; stack_map_table = new_stack_map_table; } "	0	0	0	0	0	1
"private void scanPluginsDir(File dir) { if (dir == null || !dir.isDirectory()) { return; }  File[] plugins = dir.listFiles(); if (plugins == null) { logger.warn(""Cannot read plugins from directory: "" + dir.getAbsolutePath() + "". Ignoring""); return; }  for (File pluginDir : plugins) { if (!dir.isDirectory()) { continue; }  PluginDescriptor plugin = createPluginDescriptor(pluginDir); if (plugin != null) { fillPluginDescriptor(plugin, pluginDir); this.pluginDescriptors.add(plugin); } } } "	1	1	1	1	0	0
"@RequestMapping(value = ""/{id}"", method = RequestMethod.GET) @ResponseBody public RestWrapper get( @PathVariable(""id"") Integer processId, Principal principal ) {  RestWrapper restWrapper = null; try {  Process process = new Process(); process.setProcessId(processId); com.wipro.ats.bdre.md.dao.jpa.Process daoProcess = processDAO.get(processId); if (daoProcess != null) { process.setBusDomainId(daoProcess.getBusDomain().getBusDomainId()); if (daoProcess.getWorkflowType() != null) { process.setWorkflowId(daoProcess.getWorkflowType().getWorkflowId()); } process.setDescription(daoProcess.getDescription()); process.setProcessName(daoProcess.getProcessName()); process.setProcessTypeId(daoProcess.getProcessType().getProcessTypeId()); if (daoProcess.getProcess() != null) { process.setParentProcessId(daoProcess.getProcess().getProcessId()); } process.setCanRecover(daoProcess.getCanRecover()); if (daoProcess.getProcessTemplate() != null) { process.setProcessTemplateId(daoProcess.getProcessTemplate().getProcessTemplateId()); } process.setEnqProcessId(daoProcess.getEnqueuingProcessId()); process.setNextProcessIds(daoProcess.getNextProcessId()); if (daoProcess.getBatchCutPattern() != null) { process.setBatchPattern(daoProcess.getBatchCutPattern()); } process.setTableAddTS(DateConverter.dateToString(daoProcess.getAddTs())); process.setTableEditTS(DateConverter.dateToString(daoProcess.getEditTs())); } restWrapper = new RestWrapper(process, RestWrapper.OK); LOGGER.info(""Record with ID:"" + processId + "" selected from Process by User:"" + principal.getName()); } catch (MetadataException e) { LOGGER.error(e); restWrapper = new RestWrapper(e.getMessage(), RestWrapper.ERROR); }  return restWrapper;  } "	1	1	0	1	1	0
"public void openPDFView(String path) { Intent i= new Intent(c, TextReader.class); i.putExtra(""Path"", path); c.startActivity(i); } "	0	0	0	0	0	1
private void applyXmlAttributes(AttributeSet attrs){  TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.FloatingSearchView);  try {  setDismissOnOutsideClick(true);  int searchBarWidth = a.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchBarWidth, ViewGroup.LayoutParams.MATCH_PARENT);  mQuerySection.getLayoutParams().width = searchBarWidth; mDivider.getLayoutParams().width = searchBarWidth; mSuggestionListContainer.getLayoutParams().width = searchBarWidth;  int searchBarLeftMargin = a.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchBarMarginLeft, ATTRS_SEARCH_BAR_MARGIN_DEFAULT); int searchBarTopMargin = a.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchBarMarginTop, ATTRS_SEARCH_BAR_MARGIN_DEFAULT); int searchBarRightMargin = a.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchBarMarginRight, ATTRS_SEARCH_BAR_MARGIN_DEFAULT);  LayoutParams querySectionLP = (LayoutParams)mQuerySection.getLayoutParams(); LayoutParams dividerLP = (LayoutParams)mDivider.getLayoutParams(); LinearLayout.LayoutParams suggestListSectionLP = (LinearLayout.LayoutParams)mSuggestionsSection.getLayoutParams();  querySectionLP.setMargins(searchBarLeftMargin, searchBarTopMargin, searchBarRightMargin, 0); dividerLP.setMargins(searchBarLeftMargin, 0, searchBarRightMargin, ((MarginLayoutParams) mDivider.getLayoutParams()).bottomMargin); suggestListSectionLP.setMargins(searchBarLeftMargin, 0, searchBarRightMargin, 0);  mQuerySection.setLayoutParams(querySectionLP); mDivider.setLayoutParams(dividerLP); mSuggestionsSection.setLayoutParams(suggestListSectionLP);  setSearchHint(a.getString(R.styleable.FloatingSearchView_floatingSearch_searchHint));  setShowHintWhenNotFocused(a.getBoolean(R.styleable.FloatingSearchView_floatingSearch_showSearchHintWhenNotFocused, ATTRS_SEARCH_BAR_SHOW_SEARCH_HINT_NOT_FOCUSED_DEFAULT));  setShowSearchKey(a.getBoolean(R.styleable.FloatingSearchView_floatingSearch_showSearchKey, ATTRS_SEARCH_BAR_SHOW_SEARCH_KEY_DEFAULT));  setDismissOnOutsideClick(a.getBoolean(R.styleable.FloatingSearchView_floatingSearch_dismissOnOutsideTouch, ATTRS_DISMISS_ON_OUTSIDE_TOUCH_DEFAULT));  setSuggestionItemTextSize(a.getDimensionPixelSize(R.styleable.FloatingSearchView_floatingSearch_searchSuggestionTextSize, Util.spToPx(ATTRS_SUGGESTION_TEXT_SIZE_SP_DEFAULT)));  setLeftActionMode(a.getInt(R.styleable.FloatingSearchView_floatingSearch_leftAction, LEFT_ACTION_MODE_NO_LEFT_ACTION_ENUM_VAL));  if (a.hasValue(R.styleable.FloatingSearchView_floatingSearch_menu)) { inflateOverflowMenu(a.getResourceId(R.styleable.FloatingSearchView_floatingSearch_menu, 0)); }  } finally {  a.recycle(); } } 	0	0	0	0	0	1
"public String promptForVolsLastName() { System.out.println(""Option 1 selected.\n"" + ""Please enter the last name of the Volunteer to search for: \n""); return getInput(); } "	0	0	0	0	0	1
private RevisionInfo toRevisionInfo(ChangeControl ctl, ChangeData cd, PatchSet in, @Nullable Repository repo, boolean fillCommit, @Nullable ChangeInfo changeInfo) throws PatchListNotAvailableException, GpgException, OrmException, IOException { Change c = ctl.getChange(); RevisionInfo out = new RevisionInfo(); out.isCurrent = in.getId().equals(c.currentPatchSetId()); out._number = in.getId().get(); out.ref = in.getRefName(); out.created = in.getCreatedOn(); out.uploader = accountLoader.get(in.getUploader()); out.draft = in.isDraft() ? true : null; out.fetch = makeFetchMap(ctl, in); out.kind = changeKindCache.getChangeKind(repo, cd, in); out.description = in.getDescription();  boolean setCommit = has(ALL_COMMITS) || (out.isCurrent && has(CURRENT_COMMIT)); boolean addFooters = out.isCurrent && has(COMMIT_FOOTERS); if (setCommit || addFooters) { Project.NameKey project = c.getProject(); try (RevWalk rw = new RevWalk(repo)) { String rev = in.getRevision().get(); RevCommit commit = rw.parseCommit(ObjectId.fromString(rev)); rw.parseBody(commit); if (setCommit) { out.commit = toCommit(ctl, rw, commit, has(WEB_LINKS), fillCommit); } if (addFooters) { Ref ref = repo.exactRef(in.getRefName()); RevCommit mergeTip = null; if (ref != null){ mergeTip = rw.parseCommit(ref.getObjectId()); rw.parseBody(mergeTip); } out.commitWithFooters = mergeUtilFactory .create(projectCache.get(project)) .createCommitMessageOnSubmit(commit, mergeTip, ctl, in.getId()); } } }  if (has(ALL_FILES) || (out.isCurrent && has(CURRENT_FILES))) { out.files = fileInfoJson.toFileInfoMap(c, in); out.files.remove(Patch.COMMIT_MSG); out.files.remove(Patch.MERGE_LIST); }  if ((out.isCurrent || (out.draft != null && out.draft)) && has(CURRENT_ACTIONS) && userProvider.get().isIdentifiedUser()) {  actionJson.addRevisionActions(changeInfo, out, new RevisionResource(changeResourceFactory.create(ctl), in)); }  if (gpgApi.isEnabled() && has(PUSH_CERTIFICATES)) { if (in.getPushCertificate() != null) { out.pushCertificate = gpgApi.checkPushCertificate( in.getPushCertificate(), userFactory.create(in.getUploader())); } else { out.pushCertificate = new PushCertificateInfo(); } }  return out; } 	0	0	0	0	0	1
"@Test public void error_IfPostCouldNotSendMails() throws Exception { doThrow(new MailException("""")).when(mailService).sendMail(any(), any(), any(), any(), any()); this.mvc.perform(post(""/companies"") .header(""password"", ""secure"") .accept(MediaType.APPLICATION_JSON) .contentType(MediaType.APPLICATION_JSON) .content(""[]"")) .andExpect(status().isInternalServerError()); assertEquals(0, userRepository.findAll().size()); } "	0	0	0	0	0	1
"Spanned enrichText(String text) { return Html.fromHtml(text.replaceAll(""\\{(.+)\\}"", ""<font color=#4caf50>$1</font>"")); } "	0	0	0	1	0	0
protected User setPassword(User user) { if (user != null) { user.setSalt(HNISecurityUtils.getSalt()); user.setHashedSecret(HNISecurityUtils.getHash(user.getPassword(), user.getSalt().getBytes())); } return user; } 	1	1	1	0	1	0
@Override public ISaSpecification createSpecification(SaItem doc, TsDomain frozen, EstimationPolicyType policy, boolean nospan) {  X13Specification spec = (X13Specification) doc.getPointSpecification(); X13Specification defspec = (X13Specification) doc.getDomainSpecification(); if (policy == EstimationPolicyType.Complete || spec == null) { X13Specification nspec = defspec.clone(); if (nospan) { nspec.getRegArimaSpecification().getBasic().getSpan().all(); } return nspec; }  X13Specification newspec = spec.clone();  RegArimaSpecification ntspec = newspec.getRegArimaSpecification(), dtspec = defspec.getRegArimaSpecification(), tspec = spec.getRegArimaSpecification(); if (nospan) { ntspec.getBasic().getSpan().all(); } // automodel if (policy == EstimationPolicyType.Outliers_StochasticComponent) { if (dtspec.isUsingAutoModel()) { ntspec.setAutoModel(dtspec.getAutoModel().clone()); } else { ntspec.setArima(dtspec.getArima().clone()); } } // outliers RegressionSpec nrspec = ntspec.getRegression(), drspec = dtspec.getRegression(); if (policy == EstimationPolicyType.Outliers_StochasticComponent || policy == EstimationPolicyType.Outliers) { ntspec.setOutliers(dtspec.getOutliers().clone()); // reset the default outliers detection an the default pre-specified outliers, if any nrspec.setOutliers(OutlierDefinition.prespecify(drspec.getOutliers(), true)); }  // frozen outliers if (policy == EstimationPolicyType.LastOutliers) { OutlierDefinition[] o = nrspec.getOutliers(); // reset the default outliers detection an the default pre-specified outliers, if any nrspec.setOutliers(OutlierDefinition.prespecify(drspec.getOutliers(), true)); if (frozen != null && o != null) { for (int j = 0; j < o.length; ++j) { OutlierDefinition cur = o[j]; if (frozen.search(cur.position) >= 0 && !drspec.contains(cur)) { nrspec.add(cur.prespecify(true)); } } } // reset the default outliers detection, if any ntspec.setOutliers(dtspec.getOutliers().clone()); if (frozen != null) { ntspec.getOutliers().getSpan().from(frozen.getEnd().firstday()); } } if (policy == EstimationPolicyType.FixedParameters || policy == EstimationPolicyType.FreeParameters) { // pre-specify all outliers nrspec.setOutliers(OutlierDefinition.prespecify(nrspec.getOutliers(), true)); }  // parameters of the regarima model if (policy == EstimationPolicyType.Outliers || policy == EstimationPolicyType.LastOutliers || policy == EstimationPolicyType.FreeParameters) { ntspec.getArima().clearParameters(); }  if (policy == EstimationPolicyType.Fixed) { ntspec.getArima().setParameterType(ParameterType.Fixed); }  // we should consider the X11 options chosen by the software ... return newspec; } 	0	0	0	0	0	1
@Override public void onPageFinished(WebView view, String url) { Uri uri = Uri.parse(url);  // only clear cookies that are on the logout domain. if (uri.getHost().equals(mOAuthConfig.getLogoutUri().getHost())) { this.saveCookiesInMemory(this.cookieManager.getCookie(url)); }  Uri endUri = mOAuthConfig.getDesktopUri(); boolean isEndUri = UriComparator.INSTANCE.compare(uri, endUri) == 0; if (!isEndUri) { return; }  this.saveCookiesToPreferences();  AuthorizationRequest.this.onEndUri(uri); OAuthDialog.this.dismiss(); } 	0	0	0	0	0	1
@Override public void doProcess(final ImapRequestLineReader request, ImapResponse response, ImapSession session, boolean useUids) throws ProtocolException, FolderException { final SortTerm sortTerm = parser.sortTerm(request);  final MailFolder folder = session.getSelected();  long[] uids = folder.search(sortTerm.getSearchTerm()); List<StoredMessage> messages = new ArrayList<>(); for (long uid : uids) { messages.add(folder.getMessage(uid)); }  Collections.sort(messages, new StoredMessageSorter(sortTerm));  StringBuilder idList = new StringBuilder(); for (int i = 0; i < messages.size(); i++) { if (i > 0) { idList.append(SP); } StoredMessage message = messages.get(i); if (useUids) { idList.append(message.getUid()); } else { int msn = folder.getMsn(message.getUid()); idList.append(msn); } }  response.commandResponse(this, idList.toString());  boolean omitExpunged = !useUids; session.unsolicitedResponses(response, omitExpunged); response.commandComplete(this); } 	0	1	0	0	0	0
"@Given(""the attack strength is set to $strength"") public void setAttackStrength(String strength) { if (scannerIds == null) throw new RuntimeException(""First set the scanning policy before setting attack strength or alert threshold""); for (String id : scannerIds.split("","")) { scanner.setScannerAttackStrength(id, strength.toUpperCase()); } } "	0	1	0	0	0	0
protected String getCpgListJson() { return this.cpgListJson; } 	0	0	0	0	0	1
protected String getPortListJson() { return this.portListJson; } 	0	0	0	0	0	1
protected String getSysInfoJson() { return this.sysInfoJson; } 	0	0	0	0	0	1
public ArrayList<String> getFormat() { return mFormat; } 	0	0	0	0	0	1
"protected double getDamage() { return namedTag.contains(""damage"") ? namedTag.getDouble(""damage"") : 2; } "	0	0	0	0	0	1
"@Override public void run() { if (speed == 0.0 && speedRecursionCounter > 30) { mHelpers.sendSms(SMSManager.originatingAddress, ""TrackBuddy\n\nTarget device appears to be still.""); Log.i(""TrackBuddy"", ""Target device appears to be still. Sending SMS...""); stopLocationService(); } else if (speed == 0.0) { acquireSpeed(); speedRecursionCounter++; Log.i(""TrackBuddy"", ""Speed Thread Running..."" + speedRecursionCounter); } else { int roundedValueSpeed = (int) speed; mHelpers.sendSms(SMSManager.originatingAddress, ""TrackBuddy\n\nTarget device is travelling at the speed of "" + roundedValueSpeed * 3600 / 1000 + "" Km/h\n\n(Accuracy: +/- 5 Km/h)"" ); Log.i(""TrackBuddy"", ""Speed acquired. Sending SMS...""); stopLocationService(); } } "	0	0	0	0	0	1
"private void deleteDirectory(final File directory) throws IOException { if (directory.exists()) { for (final File file : directory.listFiles()) { if (file.isDirectory()) { deleteDirectory(file); }  assertTrue(""Could not delete "" + file.getAbsolutePath(), file.delete()); } } } "	1	0	1	1	1	0
private void init(Context context) { screenWidth = context.getResources().getDisplayMetrics().widthPixels; paint.setColor(Color.RED); paint.setStrokeWidth(15); } 	0	1	0	0	0	0
"public void applicationCode(String[] args) { // fudge to run application inside eclipse IDE applicationRelativePath = applicationRelativePath.substring(3); websiteRelativePath = websiteRelativePath.substring(3); baseUMLTransTableName = """"+applicationRelativePath+""/"" + appDirectory + ""/transtables/"";  int argID = 0; TRACELEVEL = 999; boolean bDumpSymbols = false; for (int i=0;i<args.length;i++) { if (args[i].equals(""symboldump"")) {bDumpSymbols = true;continue;} if (args[i].equals(""trace"")) { TRACELEVEL = 4; continue; } if (args[i].equals(""about"")) { BufferedReader br = null; try { String sCurrentLine; br = new BufferedReader(new FileReader(applicationRelativePath+""/""+appDirectory+""/readme.txt"")); while ((sCurrentLine = br.readLine()) != null) { System.out.println(sCurrentLine); } } catch (IOException e) { e.printStackTrace(); } finally { try { if (br != null)br.close(); } catch (IOException ex) { ex.printStackTrace(); } } continue; } StringTokenizer st = new StringTokenizer(args[i],""=""); Vector v = new Vector(); while(st.hasMoreTokens()) { v.addElement(st.nextToken()); } if (v.size() == 1) {v.insertElementAt(""arg""+String.valueOf(argID++),0);} String opt = (String)v.elementAt(0); //if (opt.charAt(0) == '-') {opt = opt.substring(1);} // remove - character commandLineArgs.put(opt,(String)v.elementAt(1)); }  systemUserReg = new registrationinfo(""UML Analyser"",""UML Analyser (Application)"",""UD1000"",""02.10.0000.00"",""01/01/17"",""(c) End House Software 2007-2017"",urlExists(""connection.txt"")); System.out.println(systemUserReg.getApplicationInfoText() + ""\n""); systemMysql = new mysqlJDBC(); systemMysql.connect(); writeHitRecord(""umldiag""); String file = (String)commandLineArgs.get(""arg0""); if (file != null) { umlDiagram = new umlDiagramStruct(); // must be first thing created BEFORE scrollabecanvas mainTab = new mainCard();  System.out.println(""Compiling "" + file + ""\n"");  msg2Dialog msgD = displayModelessStatusDialog(systemUserReg.getAppName()); msgD.setText(""Compiling UML Diagram""); mainTab.setCompiler(mainTab.getLanguageTransTable(getFilenameExt(file))); if (mainTab.getCompiler().compile(file)) { umlDiagram.setNewCompile(true); // account for the extra _umldiag //String tmp = getFilenameNoExt(getFilename(file)); //file = tmp + ""_umldiag.xml""; //mainTab.generateUMLDiagram(file); System.out.println(""Compile successful.\n""); } else { System.out.println(mainTab.getCompiler().getErrorString() + ""\n""); } if (bDumpSymbols) { //System.out.println(""\n"" + mainTab.getCompiler().getAllSymbolTable().dumpSymbols()); } } else { System.out.println(""Usage: java -jar umldiag.jar [gui] [trace] [symboldump] [about] filename\n""); } systemMysql.disconnect(); System.exit(0); } "	0	0	0	0	0	1
"@Override public void testDeleteDatabase(int dbId, boolean staging) throws Exception { // TODO Auto-generated method stub OrdsPhysicalDatabase database = getPhysicalDatabaseFromID(dbId); String databaseName; if (!staging) { databaseName = database.getDbConsumedName(); this.removeModelObject(database); } else { databaseName = this.calculateStagingName(database .getDbConsumedName()); } String statement = this.getTerminateStatement(databaseName); this.singleResultQuery(statement); statement = ""rollback transaction; drop database "" + databaseName + "";""; this.runSQLStatementOnOrdsDB(statement);  } "	0	1	0	0	0	0
public List<Task> getFilteredTasks(Date from, Date to) { List<Task> newTaskList = new LinkedList<>(); List<Task> taskListFrom = new LinkedList<>(); List<Task> taskListTo = new LinkedList<>();  if (from == null && to == null) { return filterZeroDurationTasks(getTaskList()); }  if (from != null) { taskListFrom = getTasksWithRecordsLaterThan(from, getTaskList()); }  if (to != null) { taskListTo = getTasksWithRecordsEarlierThan(to, getTaskList()); }  // Now compare both lists and return only objects which are in both lists if (to == null) { // No to set, return fromList newTaskList = taskListFrom; } else if (from == null) { // No from set, return toList newTaskList = taskListTo; } else { // Compare both lists newTaskList = getOnlyObjectsPresentInBothLists(taskListFrom, taskListTo); }  return filterZeroDurationTasks(newTaskList); } 	1	0	1	0	0	0
"private String findDriver(String name, String os, boolean is64) { if (!name.contains(""Standard VGA"") && !name.contains(""Microsoft"")) { name = name.replace(""NVIDIA "", """").replace(""(R)"", """").replace(""AMD "", """").replace(""®"", """").toLowerCase().trim(); if (name.equals(""intel hd graphics"")) return ""Do Manual search https://www-ssl.intel.com/content/www/us/en/support/graphics-drivers/000005526.html & https://www-ssl.intel.com/content/www/us/en/support/graphics-drivers/000005538.html""; try (Connection connection = openConnection()) { try (PreparedStatement statement = connection.prepareStatement(""SELECT link FROM dxdiag where os = ? AND arch = ? AND (drivername like ? OR ? like drivername) ORDER BY (`isold` = FALSE )"")) { statement.setString(1, os); statement.setString(2, is64 ? ""64"" : ""32""); statement.setString(3, ""%"" + Util.removeSpecialChars(name.toLowerCase().trim()) + ""%""); statement.setString(4, ""%"" + Util.removeSpecialChars(name.toLowerCase().trim()) + ""%""); core.getLogger().log(Level.INFO, Util.removeSpecialChars(name.toLowerCase().trim())); ResultSet set = statement.executeQuery(); while (set.next()) { return set.getString(""link""); } return ""Not found""; } } catch (SQLException e) { core.getLogger().log(Level.SEVERE, ""Error inserting hjt"", e); return ""SQL error""; } } return ""Not found""; } "	0	1	0	0	0	0
@Override public User updateUserViewFlagStatus(String gooruUid, Integer viewFlag) { return this.getUserService().updateViewFlagStatus(gooruUid, viewFlag); } 	0	0	0	0	0	1
@Override public List<EntityOperation> getOperationsByEntityName(String entityName) { return this.getUserRepository().findOperationsByEntityName(entityName); } 	0	0	0	0	0	1
"@Bean public IntegrationFlow listeningFromKafkaFlow(ConnectionFactory connectionFactory, MetadataStoreOffsetManager offsetManager) { return IntegrationFlows .from(Kafka.messageDriverChannelAdapter(connectionFactory, TEST_TOPIC) .autoCommitOffset(false) .payloadDecoder(String::new) .keyDecoder(b -> Integer.valueOf(new String(b))) .configureListenerContainer(c -> c.offsetManager(offsetManager) .maxFetch(100))) .<String, String>transform(String::toUpperCase) .channel(c -> c.queue(""listeningFromKafkaResults"")) .get(); } "	0	0	0	0	0	1
"@Override public F onCompleted(Response response) throws Exception { try { withCompleteResponse( response, (r) -> { F value = handler.apply(wrap(r)); subject.onNext(value); subject.onCompleted(); }, (ex) -> subject.onError(ex), (ex) -> subject.onError(ex) ); } catch (Throwable t) { //TODO Should this logging not be done in the global onError handler? See Class RxJavaErrorHandler if (t instanceof OnErrorFailedException) { logger.error(""onError handler failed: "" + t.getMessage(), t); } subject.onError(t); } return null; } "	0	0	0	1	0	0
private synchronized DataContentHandler getDataContentHandler() { DataContentHandlerFactory localFactory; synchronized (DataHandler.class) { if (factory != originalFactory) { // setDCHF was called - clear our cached copy of the DCH and DCHF dch = null; originalFactory = factory; } localFactory = originalFactory; } if (dch == null) { // get the main mime-type portion of the content. String mimeType = getMimeType(ds.getContentType()); if (localFactory != null) { dch = localFactory.createDataContentHandler(mimeType); } if (dch == null) { dch = CommandMap.getDefaultCommandMap().createDataContentHandler(mimeType); } } return dch; } 	0	1	0	0	0	0
private int getMinCostCenter(final Unit unit) { if (unit instanceof CostCenter) { final CostCenter costCenter = (CostCenter) unit; return Integer.parseInt(costCenter.getCostCenter()); } int min = Integer.MAX_VALUE; for (final Unit subUnit : unit.getSubUnitsSet()) { final int cc = getMinCostCenter(subUnit); min = Math.min(min, cc); } return min; } 	0	1	0	0	0	0
private Date updateStatusChangeDate(String oldStatus, String newStatus, Date currStatusUpdateDate) { if (CrConstants.CheckReconciliationStatusCodes.ISSUED.equals(oldStatus) && !CrConstants.CheckReconciliationStatusCodes.ISSUED.equals(newStatus)) { return new Date(); } return currStatusUpdateDate; } 	0	1	0	0	0	0
public static PersistentCoordinatorGroup getInstance() { return getInstance(filter(PersistentCoordinatorGroup.class), null, null); } 	1	0	1	0	0	0
public void triggerExpirence(ExpirencePart levels, World world, int x, int y, int z, EntityPlayer player) { for(int i = 0; i < levels.getNumberofOrbs(); i++) { Entity newEnt = new EntityXPOrb(world, x, y, z, (levels.getAmount()/levels.getNumberofOrbs())); world.spawnEntityInWorld(newEnt); } } 	1	0	1	1	1	0
"@SuppressLint(""NewApi"") @Override public void onLoadFinished(Loader<Cursor> loader, Cursor cursor) { switch (loader.getId()) { case LOADER_EPG: refresh(LOADER_CHANNELLIST); break; case LOADER_REFRESH_CHANNELLIST: /** * Pr©fung ob das EPG in der Senderliste angezeigt werden soll. */ if ((showNowPlaying && !showNowPlayingWifi) || (showNowPlaying && mNetworkInfo.isConnected())) { refresh(LOADER_EPG); } else { refresh(LOADER_CHANNELLIST); } break; default: mAdapter.changeCursor(cursor); if (mChannelIndex != ListView.INVALID_POSITION) { getListView().setItemChecked(mChannelIndex, true); } getListView().setSelectionFromTop(mChannelIndex, (int) getResources().getDimension(R.dimen.list_preferred_item_height_small) * 3); setListShown(true); break; } getActivity().supportInvalidateOptionsMenu(); } "	0	1	0	0	0	0
"@Test public void testAssignUserToLookUpWriteException(){ Assignment expected = Assignment.newInstance(Experiment.ID.valueOf(experimentId)) .withApplicationName(APPLICATION_NAME) .withBucketLabel(Bucket.Label.valueOf(""bucket-1"")) .withContext(Context.valueOf(""test"")) .withCreated(new Date()) .withUserID(User.ID.valueOf(""testuser1"")) .withStatus(Assignment.Status.NEW_ASSIGNMENT) .withCacheable(false) .build(); doThrow(WriteTimeoutException.class) .when(userAssignmentIndexAccessor) .insertBy(eq(expected.getExperimentID().getRawID()), eq(expected.getUserID().toString()), eq(expected.getContext().getContext()), eq(expected.getCreated()), eq(expected.getBucketLabel().toString())); thrown.expect(RepositoryException.class); thrown.expectMessage(""Could not save user assignment""); repository.assignUserToLookUp(expected, null); } "	0	1	0	0	0	0
"@Override public void perform(@Nonnull Run<?, ?> build, @Nonnull FilePath workspace, @Nonnull Launcher launcher, @Nonnull TaskListener listener)  throws InterruptedException, IOException {  // get the mc server settings MCServerSettingsModel mcServerSettingsModel = getMCServerSettingsModel();  EnvVars env = null; try { env = build.getEnvironment(listener);  } catch (IOException | InterruptedException e) { listener.error(""Failed loading build environment "" + e); }    // this is an unproper replacment to the build.getVariableResolver since workflow run won't support the // getBuildEnviroment() as written here: // https://github.com/jenkinsci/pipeline-plugin/blob/893e3484a25289c59567c6724f7ce19e3d23c6ee/DEVGUIDE.md#variable-substitutions  JSONObject jobDetails = null; String mcServerUrl = """"; // now merge them into one list Properties mergedProperties = new Properties(); if (mcServerSettingsModel != null) { mcServerUrl = mcServerSettingsModel.getProperties().getProperty(""MobileHostAddress""); if (runFromFileModel.getProxySettings() == null) { jobDetails = runFromFileModel.getJobDetails(mcServerUrl, null, null, null); } else { jobDetails = runFromFileModel.getJobDetails(mcServerUrl, runFromFileModel.getProxySettings().getFsProxyAddress(), runFromFileModel.getProxySettings().getFsProxyUserName(), runFromFileModel.getProxySettings().getFsProxyPassword()); } mergedProperties.setProperty(""mobileinfo"", jobDetails != null ? jobDetails.toJSONString() : """"); mergedProperties.setProperty(""MobileHostAddress"", mcServerUrl); }  if (runFromFileModel != null && StringUtils.isNotBlank(runFromFileModel.getFsPassword())) { try { String encPassword = EncryptionUtils.Encrypt(runFromFileModel.getFsPassword(), EncryptionUtils.getSecretKey()); mergedProperties.put(""MobilePassword"", encPassword); } catch (Exception e) { build.setResult(Result.FAILURE); listener.fatalError(""problem in mobile center password encryption"" + e); } }  if(env == null) { listener.fatalError(""Enviroment not set""); throw new IOException(""Env Null - something went wrong with fetching jenkins build environment""); } if(build instanceof AbstractBuild) { VariableResolver<String> varResolver = ((AbstractBuild) build).getBuildVariableResolver(); mergedProperties.putAll(runFromFileModel.getProperties(env, varResolver)); } else { mergedProperties.putAll(runFromFileModel.getProperties(env)); }   int idx = 0; for (Iterator<String> iterator = env.keySet().iterator(); iterator.hasNext(); ) { String key = iterator.next(); idx++; mergedProperties.put(""JenkinsEnv"" + idx, key + "";"" + env.get(key)); }  Date now = new Date(); Format formatter = new SimpleDateFormat(""ddMMyyyyHHmmssSSS""); String time = formatter.format(now);  // get a unique filename for the params file ParamFileName = ""props"" + time + "".txt""; ResultFilename = ""Results"" + time + "".xml"";  mergedProperties.put(""runType"", AlmRunTypes.RunType.FileSystem.toString()); mergedProperties.put(""resultsFilename"", ResultFilename);  //handling mtbx file content : // If we have mtbx content - it is located in Test1 property and there is no other test properties (like Test2 etc) // We save mtbx content in workspace and replace content of Test1 by reference to saved file String firstTestKey = ""Test1""; String firstTestContent = mergedProperties.getProperty(firstTestKey, """"); if (RunFromFileSystemModel.isMtbxContent(firstTestContent)) { try { String mtbxFilePath = createMtbxFileInWs(workspace, firstTestContent); mergedProperties.setProperty(firstTestKey, mtbxFilePath); } catch (IOException | InterruptedException e) { build.setResult(Result.FAILURE); listener.error(""Failed to save MTBX file : "" + e.getMessage()); } }  // get properties serialized into a stream ByteArrayOutputStream stream = new ByteArrayOutputStream(); try { mergedProperties.store(stream, """"); } catch (IOException e) { listener.error(""Storing run variable failed: "" + e); build.setResult(Result.FAILURE); } String propsSerialization = stream.toString(); FilePath CmdLineExe; try (InputStream propsStream = IOUtils.toInputStream(propsSerialization)) {  // Get the URL to the Script used to run the test, which is bundled // in the plugin @SuppressWarnings(""squid:S2259"") URL cmdExeUrl = Jenkins.getInstance().pluginManager.uberClassLoader.getResource(HP_TOOLS_LAUNCHER_EXE); if (cmdExeUrl == null) { listener.fatalError(HP_TOOLS_LAUNCHER_EXE + "" not found in resources""); return; }  @SuppressWarnings(""squid:S2259"") URL cmdExe2Url = Jenkins.getInstance().pluginManager.uberClassLoader.getResource(LRANALYSIS_LAUNCHER_EXE); if (cmdExe2Url == null) { listener.fatalError(LRANALYSIS_LAUNCHER_EXE + ""not found in resources""); return; }  FilePath propsFileName = workspace.child(ParamFileName); CmdLineExe = workspace.child(HP_TOOLS_LAUNCHER_EXE); FilePath CmdLineExe2 = workspace.child(LRANALYSIS_LAUNCHER_EXE);  try { // create a file for the properties file, and save the properties propsFileName.copyFrom(propsStream);  // Copy the script to the project workspace CmdLineExe.copyFrom(cmdExeUrl);  CmdLineExe2.copyFrom(cmdExe2Url);  } catch (IOException | InterruptedException e) { build.setResult(Result.FAILURE); listener.error(""Copying executable files to executing node "" + e); } }  try { // Run the HpToolsLauncher.exe AlmToolsUtils.runOnBuildEnv(build, launcher, listener, CmdLineExe, ParamFileName); // Has the report been successfully generated? } catch (IOException ioe) { Util.displayIOException(ioe, listener); build.setResult(Result.FAILURE); listener.error(""Failed running HpToolsLauncher "" + ioe); return; } catch (InterruptedException e) { build.setResult(Result.ABORTED); PrintStream out = listener.getLogger(); listener.error(""Failed running HpToolsLauncher - build aborted "" + e);  try { AlmToolsUtils.runHpToolsAborterOnBuildEnv(build, launcher, listener, ParamFileName, workspace); } catch (IOException e1) { Util.displayIOException(e1, listener); build.setResult(Result.FAILURE); return; } catch (InterruptedException e1) { listener.error(""Failed running HpToolsAborter "" + e1); } out.println(""Operation Was aborted by user.""); } } "	0	0	0	0	0	1
@Override public void onResponse(Call<State> call, Response<State> response) { if (!response.isSuccess() || response.body().getStatus() == 0) { lt.error(); productSentCallback.onProductSentResponse(false); return; }  String imguploadFront = product.getImgupload_front(); ProductImage image = new ProductImage(product.getBarcode(), FRONT, new File(imguploadFront)); postImg(activity, image);  String imguploadIngredients = product.getImgupload_ingredients(); if (StringUtils.isNotEmpty(imguploadIngredients)) { postImg(activity, new ProductImage(product.getBarcode(), INGREDIENT, new File(imguploadIngredients))); }  String imguploadNutrition = product.getImgupload_nutrition(); if (StringUtils.isNotBlank(imguploadNutrition)) { postImg(activity, new ProductImage(product.getBarcode(), NUTRITION, new File(imguploadNutrition))); }  lt.success(); productSentCallback.onProductSentResponse(true); } 	0	1	0	0	0	0
"public static void main(String[] args) throws Exception { try { theInstance = DB_Access.getInstance(); } catch (ClassNotFoundException ex) { Logger.getLogger(DB_Access.class.getName()).log(Level.SEVERE, null, ex); }  LinkedList<Mitglied> liMitglied = new LinkedList<>();  liMitglied = theInstance.getEinfacheMitgliederliste(40, 4001, ""-2""); int i = 0; for (Mitglied mitglied : liMitglied) { //   System.out.println(mitglied.toString()); i++; } // System.out.println(""COUNT: "" + i);  //        HashMap<String, LinkedList<String>> hm = new HashMap<>(); //        LinkedList<Berechtigung> liBerechtigung = new LinkedList<>(); //        int userID = theInstance.getUserID(""49001021"", ""feuer122""); //        System.out.println(""UserID: "" + userID); //        liBerechtigung = theInstance.getBerechtigungen(3536); //        for (Berechtigung berechtigung : liBerechtigung) //        { //            System.out.println(""Berechtigung: "" + berechtigung.getStrBerechtigung()); //            int intBereich = berechtigung.getIntBereich(); //            int intAbschnitt = berechtigung.getIntAbschnitt(); //            String strFubwehr = berechtigung.getStrFubwehr(); //            System.out.println(""Bereich: "" + intBereich); //            System.out.println(""Abschnitt: "" + intAbschnitt); //            System.out.println(""Fubwehr: "" + strFubwehr); //            Bezirk bezirk = theInstance.getBezirk(intBereich); //            System.out.println(""Bereichnummer: "" + bezirk.getIntBezirksNummer()); //            System.out.println(""Bereichname: "" + bezirk.getStrName()); //            LinkedList<Abschnitt> liAbschnitte = bezirk.getLiAbschnitte(); //            for (Abschnitt abschnitt : liAbschnitte) //            { //                System.out.println(""Abschnitt: "" + abschnitt.getStrName()); //            } //        } try { //            LinkedList<Berechtigung> lili = theInstance.getBerechtigungen(3566); //            System.out.println(""zweite Berechtigung: "" + lili.get(1).getIntIDGruppe()); //            System.out.println(""erste Berechtigung: "" + lili.get(0).getIntIDGruppe()); //            for (int i = 0; i < lili.size(); i++) //            { //                System.out.println(""Berechtigung: "" + lili.get(i).getStrBerechtigung()); //            } //            System.out.println(""Abschnittsnummer: "" + theInstance.getAbschnittsnummerForFubwehr(""50012"")); //            System.out.println(""\n\n\n\n""); //            System.out.println(""****************LISTE****************""); //            LinkedList<Mitglied> liliMitglieder = theInstance.getEinfacheMitgliederliste(3566, lili.get(1).getIntIDGruppe()); //            int counter = 0; //            for (Mitglied mitglied : liliMitglieder) //            { //                System.out.println(mitglied.toString()); //                counter++; //            } //            System.out.println(""Counter: "" + counter); //            for (int i = 0; i < liliMitglieder.size(); i++) { //                System.out.println(liliMitglieder.get(i).toString()); //            } //            lili = theInstance.getLeerberichtFahrzeug(); //            for (LeerberichtFahrzeug k : lili) //            { //                System.out.println(k.toString()); //            } //            LinkedList<Mitglied> li = theInstance.getEinfacheMitgliederliste(3566, 15); //            for (Mitglied li1 : li) //            { //                System.out.println(li1.getStrVorname() + ""-"" + li1.getStrZuname()); //            }  //            String[][] dynamisch //                    = //                    { //                        { //                            """", ""Status"", ""<>"", ""Reserve"", """", ""UND"" //                        } // ////                    }; String[][] dynamisch = { { ""("", ""Kursbezeichnung"", ""="", ""Brandbekämpfung 'Modul 2'"", "")"", ""UND NICHT"" } }; // StringBuilder html = theInstance.getDynamischerBericht(dynamisch, ""Vorname;Zuname;Geburtsdatum"", 47, 4704, ""-2""); //            System.out.println(html); // !!!!!!!!!!!!! SUPERDUPER Tests von der allerbesten Yvonne !!!!!!!!!!!!!!!!!!!!!!  //            LinkedList<Kurs> li = theInstance.getKursstatistikkurse(""01.01.2056"", ""10.11.2058""); // //            for (Kurs k : li) //            { //                // System.out.println(k.toString()); //            } //  LinkedList<Kurs> li = theInstance.getKursstatistikkurse(""01.01.2056"", ""10.11.2058""); //            for (Kurs k : li) //            { //                // System.out.println(k.toString()); //            } // !!!!!!!!!!!!! Ende SUPERDUPER Tests von der allerbesten Yvonne !!!!!!!!!!!!!!!!!!!!!! } catch (Exception ex) { Logger.getLogger(DB_Access.class.getName()).log(Level.SEVERE, null, ex); } } "	0	0	0	0	0	1
@Override public void onListItemClick(ListView l, View v, int position, long id) { if (position == 0) { return; }  BaseballCard card = BaseballCardList.this.adapter.getItem(position);  Fragment details = BaseballCardDetails.getInstance(id, card); this.getActivity().getSupportFragmentManager() .beginTransaction() .replace(R.id.fragment_holder, details) .addToBackStack(EDIT_CARD) .commit(); } 	1	0	1	1	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);  new CustomView(this,null); //new CustomView2(this,null);  String s1 = getString(R.string.s1); String s3 = getString(R.string.s3); //Toast.makeText(this,""haha "" + "" | "" + s1 +  "" | "" + s3,Toast.LENGTH_LONG).show();   String s2 = getString(R.string.s2); Toast.makeText(this,""111"" + "" | "" + s1 + "" | "" + s2 + "" | "" + s3,Toast.LENGTH_LONG).show();  new Runnable(){ @Override public void run() {  } };  SampleApplication realApp = (SampleApplication)getApplication();   new Runnable(){ @Override public void run() { //Toast.makeText(getApplicationContext(),""1223"",Toast.LENGTH_LONG).show(); } }.run();  new T1(); new T2(); } "	0	1	0	0	0	0
"public void updateNameFromRequirementChange() { if (oldSchoolRequirement && Requirement.RequirementType.questProgress.equals(requirement.type) && (requirement.negated == null || !requirement.negated)) { name = requirement.required_obj_id+"":""+Integer.toString(requirement.required_value); } else if (oldSchoolRequirement) { int i = 0; String futureName = requirement.type.toString() + ""#"" + Integer.toString(i); while (parentMap.getMapObject(futureName) != null) { i++; futureName = requirement.type.toString() + ""#"" + Integer.toString(i); } this.name = futureName; } } "	0	1	0	0	0	0
private com.google.android.gms.cast.MediaInfo verifyPlayMedia(MediaInfo mediaInfo) { setServiceConnected(); MediaPlayer.LaunchListener listener = Mockito.mock(MediaPlayer.LaunchListener.class); PendingResult<Cast.ApplicationConnectionResult> pendingResult = Mockito.mock(PendingResult.class); Mockito.when(castClient.launchApplication(Mockito.any(GoogleApiClient.class), Mockito.anyString(), Mockito.any(LaunchOptions.class))) .thenReturn(pendingResult);   // playMedia service.playMedia(mediaInfo, false, listener); Robolectric.runUiThreadTasksIncludingDelayedTasks();  // CastApi.launchApplication Mockito.verify(castClient).launchApplication(Mockito.same(googleApiClient), Mockito.anyString(), Mockito.any(LaunchOptions.class));  // ResultCallback.setResultCallback ArgumentCaptor<ResultCallback> argResultCallback = ArgumentCaptor.forClass(ResultCallback.class); Mockito.verify(pendingResult).setResultCallback(argResultCallback.capture());  // ApplicationConnectionResultCallback.onResult ResultCallback resultCallback = argResultCallback.getValue(); Cast.ApplicationConnectionResult result = Mockito.mock(Cast.ApplicationConnectionResult.class); Status status = Mockito.mock(Status.class); Mockito.when(status.isSuccess()).thenReturn(Boolean.TRUE); Mockito.when(result.getStatus()).thenReturn(status); ApplicationMetadata applicationMetadata = Mockito.mock(ApplicationMetadata.class); Mockito.when(result.getApplicationMetadata()).thenReturn(applicationMetadata); resultCallback.onResult(result); Robolectric.runUiThreadTasksIncludingDelayedTasks();  // loadMedia ArgumentCaptor<com.google.android.gms.cast.MediaInfo> argMedia = ArgumentCaptor.forClass(com.google.android.gms.cast.MediaInfo.class); Mockito.verify(mediaPlayer).load(Mockito.same(googleApiClient), argMedia.capture(), Mockito.eq(true)); return argMedia.getValue(); } 	0	0	0	0	0	1
"private Set<Artifact> getMandatoryJarArtifacts() throws MojoExecutionException { Set<Artifact> mandatoryTopLevelArtifacts = new HashSet<Artifact>();  mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-oldcore"", this.xwikiVersion, null, TYPE_JAR));  // Required Plugins mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-skin-skinx"", this.xwikiVersion, null, TYPE_JAR));  // We shouldn't need those but right now it's mandatory since they are defined in the default web.xml file we // provide. We'll be able to remove them when we start using Servlet 3.0 --> mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-rest-server"", this.xwikiVersion, null, TYPE_JAR));  // Needed by platform-web but since we don't have any dep in platform-web's pom.xml at the moment (duplication // issue with XE/XEM and platform-web) we need to include it here FTM... Solution: get a better maven WAR plugin // with proper merge feature and then remove this... mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-uiextension-api"", this.xwikiVersion, null, TYPE_JAR)); mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-localization-script"", this.xwikiVersion, null, TYPE_JAR)); mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-localization-source-legacy"", this.xwikiVersion, null, TYPE_JAR)); mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-security-bridge"", this.xwikiVersion, null, TYPE_JAR)); mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-url-standard"", this.xwikiVersion, null, TYPE_JAR)); mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(XWIKI_PLATFORM_GROUPID, ""xwiki-platform-wiki-default"", this.xwikiVersion, null, TYPE_JAR));  // Ensures all logging goes through SLF4J and Logback. mandatoryTopLevelArtifacts.add(this.repositorySystem.createArtifact(""org.xwiki.commons"", ""xwiki-commons-logging-logback"", this.xwikiVersion, ""compile"", TYPE_JAR)); // Get the logging artifact versions from the top level XWiki Commons POM  String slf4jGroupId = ""org.slf4j""; mandatoryTopLevelArtifacts.add(this.resolveManagedArtifact(slf4jGroupId, ""jcl-over-slf4j"", TYPE_JAR)); mandatoryTopLevelArtifacts.add(this.resolveManagedArtifact(slf4jGroupId, ""log4j-over-slf4j"", TYPE_JAR));  return mandatoryTopLevelArtifacts; } "	0	0	0	0	0	1
"private void initializeTables() { tableIdleGM.setItems(guildManagerModel.getCachedIdleGuildManagers());  tableIdleGM.setPlaceholder(new Label(TABLEVIEW_PLACEHOLDER));  clmGMName.setCellValueFactory(gm -> gm.getValue().getFullNameProperty()); clmGMDescription.setCellValueFactory(gm -> gm.getValue().getDescription());  tableIdleVolunteer.setItems(volunteerModel.getCachedIdleVolunteers()); tableIdleVolunteer.setPlaceholder(new Label(""Oversigten er tom""));  clmVolunteerName.setCellValueFactory(v -> v.getValue().getFullNameProperty()); clmVolunteerDescription.setCellValueFactory(v -> v.getValue().getDescriptionProperty()); } "	0	1	1	1	1	0
@Override public SourceVersion getSupportedSourceVersion() { return SourceVersion.latest(); } 	0	0	0	0	0	1
private static List<AB<String,Sub>> ts_1(List<AB<String,Type>> gamma, Type t) { List<AB<String,Sub>> ret = new ArrayList<>();  for (AB<String,Type> p : gamma) { String s = p._1(); Type t_s = p._2();  Type t_s_fresh = fresh(t_s, t); Sub mu = Sub.mgu(t, t_s_fresh);  if (!mu.isFail()) { ret.add(new AB<>(s, mu.restrict(t))); } } return ret; } 	0	1	0	0	0	0
"public static void GROUP_LOAD(CalicoPacket p, Client client) { long uuid = p.getLong(); long cuid = p.getLong(); long puid = p.getLong(); boolean isperm = p.getBoolean(); int count = p.getCharInt(); int x = 0; int y = 0;  CGroupController.no_notify_start(uuid, cuid, puid, isperm);  for(int i=0;i<count;i++) { x = p.getInt(); y = p.getInt(); CGroupController.no_notify_append(uuid, x, y); }   boolean captureChildren = false; double rotation; double scaleX; double scaleY; String text; captureChildren = p.getBoolean(); rotation = p.getDouble(); scaleX = p.getDouble(); scaleY = p.getDouble(); text = p.getString();  //		CGroupController.groups.get(uuid).finish(); CGroupController.groups.get(uuid).primative_rotate(rotation); CGroupController.groups.get(uuid).primative_scale(scaleX, scaleY); CGroupController.groups.get(uuid).setText(text);  CGroupController.no_notify_finish(uuid, captureChildren);  if(client!=null) { ClientManager.send_except(client, p); if (isperm) CCanvasController.snapshot_group(uuid); }  if (captureChildren) ClientManager.send( CGroupController.groups.get(uuid).getParentingUpdatePackets() );  } "	1	0	1	0	0	0
public WatchUpdate getLastWatchUpdate() { if (lastWatchUpdate == null) { Value value = node.getValue(); if (value != null) { SubscriptionValue subscriptionValue = new SubscriptionValue(path, value, null, null, null, null); lastWatchUpdate = new WatchUpdate(this, subscriptionValue); } } return lastWatchUpdate; } 	0	1	0	0	0	0
"public void exec(Button buttonA, Button buttonB) { myWorld.removeObject(buttonA); myWorld.removeObject(buttonB); getAction().ExtraAction(((MyWorld)myWorld).getCurrentShip()); Button button = new Button(getAction().getFinalResult(), 320, 280); myWorld.addObject(button, 520, 280); Greenfoot.delay(80); Button buttonGameOver = new Button(""gameover"", 320, 280); myWorld.addObject(buttonGameOver, 520, 280); } "	0	1	0	0	0	0
static public Method findMethod(Class hClass, String name, int modifiers, Class... parameterTypes) { methods: for(Method method : hClass.getMethods()) { if(!method.getName().equals(name)) continue; if(!hasModifiers(method.getModifiers(), modifiers)) continue; if(parameterTypes.length != method.getParameterCount()) continue;  for(Class paramType : method.getParameterTypes()) { if(!paramType.isAssignableFrom(hClass)) continue methods; }  return method; }  return null; } 	0	1	0	0	0	0
"public void setAttrs(Context context, AttributeSet attrs) { TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.PreferencesButton); imageOn = a.getDrawable(R.styleable.PreferencesButton_image_on); imageOff = a.getDrawable(R.styleable.PreferencesButton_image_off); prefKey = a.getString(R.styleable.PreferencesButton_pref_key); defaultValue = a.getBoolean(R.styleable.PreferencesButton_default_value, false); Log.d(TAG, ""Preference key is "" + prefKey); } "	1	1	1	1	0	0
"public DocumentTextData parseAndAddToCas(VTDNav vn, JCas jcas, byte[] identifier) throws VTDException { List<String> textPartList = new ArrayList<String>(this.docTextData.size()); int offset = 0; for (int i = 0; i < docTextData.size(); i++) { PartOfDocument docTextPart = this.docTextData.get(i); if (docTextPart == null) { LOGGER.error(""corrupted DocumentText Data in MappingFile! Not all Ids are set.""); continue; }  int[] beginOffsets; int[] endOffsets; List<String> textPartStrs; if (docTextPart.getParser() == null) textPartStrs = getTextPart(vn, docTextPart, identifier); else textPartStrs = docTextPart.getParser().parseDocumentPart(vn, docTextPart, textPartList.isEmpty() ? offset : offset + 1, jcas, identifier); docTextPart.setText(textPartStrs.toArray(new String[textPartStrs.size()])); beginOffsets = new int[textPartStrs.size()]; endOffsets = new int[textPartStrs.size()]; for (int j = 0; j < textPartStrs.size(); ++j) { String textPartStr = textPartStrs.get(j).trim(); if (textPartStr.length() > 0) { // Important: First compute offset, then add the new text // part. Otherwise, the new text part will be treated as the // former // text part and there will be an offset increment although // it is // incorrect. // if (i - 1 >= 0 && i - 1 < textPartList.size() && // textPartList.get(i - 1).length() > 0) // offset += 1; // accommodate for the line break after each text part // inserted at the end of the method if (!textPartList.isEmpty()) ++offset; textPartList.add(textPartStr); beginOffsets[j] = offset; offset += textPartStr.length(); endOffsets[j] = offset; } } // in case the text part was empty, we need to set the offsets to // the current offsets, begin and end equal (part has empty length) if (textPartStrs.isEmpty()) beginOffsets = endOffsets = new int[] { offset }; docTextPart.setBeginOffsets(beginOffsets); // offset += textPartStr.length(); docTextPart.setEndOffsets(endOffsets);  } String docTextStr = StringUtils.join(textPartList, ""\n""); docTextData.setText(docTextStr); jcas.setDocumentText(docTextStr); return this.docTextData; } "	1	0	1	0	0	0
"@Override public String toString() { return String.format(""%s[id=%d, eventScope=%s, parentEventBus=%s]"", getClass().getSimpleName(), System.identityHashCode(this), eventScope, parentEventBus); } "	0	0	0	1	0	0
"@SuppressWarnings(""PMD"") @Test public void securityTest5() { request = makeRequest(5, IP_VAR1, NC_COM); ServerSecurity serverSecurity = new ServerSecurity(request, serverConfiguration); assertEquals(serverSecurity.isAllow(), false); } "	1	0	1	1	1	0
public ManagedMesh remove(K key) { ManagedMesh mesh = pool.remove(key);  if (mesh != null) mesh.removeLifeTimeObserver(lto);  return mesh; } 	0	0	0	0	0	1
public static String getProxyPort() { return proxyPort; } 	0	0	0	0	0	1
public Auto getAuto(){ return auto; } 	0	0	0	0	0	1
public void doAnalysis() {  if (jvm.getOptions() != null) { doJvmOptionsAnalysis(); }  // 1) Check for partial log if (GcUtil.isPartialLog(firstTimestamp)) { analysisKeys.add(Analysis.KEY_FIRST_TIMESTAMP_THRESHOLD_EXCEEDED); }  // 2) Check to see if -XX:+PrintGCApplicationStoppedTime enabled if (!eventTypes.contains(LogEventType.APPLICATION_STOPPED_TIME)) { analysisKeys.add(Analysis.KEY_APPLICATION_STOPPED_TIME_MISSING); }  // 3) Check for significant stopped time unrelated to GC if (eventTypes.contains(LogEventType.APPLICATION_STOPPED_TIME) && getGcStoppedRatio() < 80) { analysisKeys.add(Analysis.KEY_GC_STOPPED_RATIO); }  // 4) Check for throughput collector serial collection if (eventTypes.contains(LogEventType.PARALLEL_SERIAL_OLD)) { analysisKeys.add(Analysis.KEY_SERIAL_GC_THROUGHPUT); }  // 5) Check for CMS collector serial collection not caused by concurrent mode failure if (!analysisKeys.contains(Analysis.KEY_CMS_CONCURRENT_MODE_FAILURE) && eventTypes.contains(LogEventType.CMS_SERIAL_OLD)) { analysisKeys.add(Analysis.KEY_SERIAL_GC_CMS); }  // 6) Check if logging indicates gc details missing if (!analysisKeys.contains(Analysis.KEY_PRINT_GC_DETAILS_MISSING)) { if (getEventTypes().contains(LogEventType.VERBOSE_GC_OLD) || getEventTypes().contains(LogEventType.VERBOSE_GC_YOUNG)) { analysisKeys.add(Analysis.KEY_PRINT_GC_DETAILS_MISSING); } }  // 7) Check for concurrent mode failure by logging event type. Going forward, this will be identified by a // trigger, not a new logging event. This is needed to deal with legacy code that unfortunately created many // unnecessary events instead of preparsing them into their component events. if (!analysisKeys.contains(Analysis.KEY_CMS_CONCURRENT_MODE_FAILURE)) { if (getEventTypes().contains(LogEventType.CMS_SERIAL_OLD_CONCURRENT_MODE_FAILURE) || getEventTypes().contains(LogEventType.PAR_NEW_PROMOTION_FAILED_CMS_CONCURRENT_MODE_FAILURE) || getEventTypes().contains(LogEventType.PAR_NEW_CONCURRENT_MODE_FAILURE_PERM_DATA) || getEventTypes().contains(LogEventType.PAR_NEW_PROMOTION_FAILED_CMS_CONCURRENT_MODE_FAILURE) || getEventTypes() .contains(LogEventType.PAR_NEW_PROMOTION_FAILED_CMS_CONCURRENT_MODE_FAILURE_PERM_DATA)) { analysisKeys.add(Analysis.KEY_PRINT_GC_DETAILS_MISSING); } }  // 8) Check if CMS handling Perm/Metaspace collections by collector analysis (if no jvm options available). if (!analysisKeys.contains(Analysis.KEY_CMS_CLASSUNLOADING_MISSING)) { if (getEventTypes().contains(LogEventType.CMS_REMARK) && !getEventTypes().contains(LogEventType.CMS_REMARK_WITH_CLASS_UNLOADING)) { analysisKeys.add(Analysis.KEY_CMS_CLASSUNLOADING_MISSING); }  }  // 9) Check for CMS promotion failed by event type if (!analysisKeys.contains(Analysis.KEY_CMS_PROMOTION_FAILED)) { if (getEventTypes().contains(LogEventType.PAR_NEW_PROMOTION_FAILED) || getEventTypes().contains(LogEventType.PAR_NEW_PROMOTION_FAILED_CMS_SERIAL_OLD) || getEventTypes().contains(LogEventType.PAR_NEW_PROMOTION_FAILED_CMS_SERIAL_OLD_PERM_DATA) || getEventTypes().contains(LogEventType.PAR_NEW_PROMOTION_FAILED_TRUNCATED)) { analysisKeys.add(Analysis.KEY_CMS_PROMOTION_FAILED); } }  // 9) Check for -XX:+PrintReferenceGC by event type if (!analysisKeys.contains(Analysis.KEY_PRINT_REFERENCE_GC_ENABLED)) { if (getEventTypes().contains(LogEventType.PRINT_REFERENCE_GC)) { analysisKeys.add(Analysis.KEY_PRINT_REFERENCE_GC_ENABLED); } } } 	0	1	0	0	0	0
"@SuppressWarnings(""unchecked"") private void setSelectedItems() { if (tree == null) return;  Collection<OsmPrimitive> sel = new HashSet<OsmPrimitive>(40);  TreePath[] selectedPaths = tree.getSelectionPaths(); if (selectedPaths == null) return;  for (TreePath path : selectedPaths) { DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent(); Enumeration<DefaultMutableTreeNode> children = node.breadthFirstEnumeration(); while (children.hasMoreElements()) { DefaultMutableTreeNode childNode = children.nextElement(); Object nodeInfo = childNode.getUserObject(); if (nodeInfo instanceof TestError) { TestError error = (TestError) nodeInfo; sel.addAll(error.getPrimitives()); } } } Main.main.getCurrentDataSet().setSelected(sel); } "	0	1	0	0	0	0
private static Map<String, Set<String>> buildConstrainingInfo(JavaClass cls, Method m) throws ClassNotFoundException { Map<String, Set<String>> constraintInfo = new HashMap<>(); Set<String> exs = new HashSet<>(); ExceptionTable et = m.getExceptionTable(); if (et != null) { int[] indexTable = et.getExceptionIndexTable(); ConstantPool pool = cls.getConstantPool(); for (int index : indexTable) { if (index != 0) { ConstantClass ccls = (ConstantClass) pool.getConstant(index); String exName = ccls.getBytes(pool); JavaClass exClass = Repository.lookupClass(exName); if (!exClass.instanceOf(runtimeClass)) { exs.add(ccls.getBytes(pool)); } } } } constraintInfo.put(cls.getClassName(), exs); return constraintInfo; } 	0	0	0	0	0	1
LinkedHashMap<String, Integer> getHotWeblogs(int sinceDays, int offset, int length) throws WebloggerException; 	0	0	0	0	0	1
"@Override public void getView(Cursor cursor, SmartRegisterClient client, final View convertView) { CommonPersonObjectClient pc = (CommonPersonObjectClient) client;  fillValue((TextView) convertView.findViewById(R.id.child_zeir_id), getValue(pc.getColumnmaps(), PathConstants.KEY.ZEIR_ID, false));  String firstName = getValue(pc.getColumnmaps(), PathConstants.KEY.FIRST_NAME, true); String lastName = getValue(pc.getColumnmaps(), PathConstants.KEY.LAST_NAME, true); String childName = getName(firstName, lastName);  String motherFirstName = getValue(pc.getColumnmaps(), PathConstants.KEY.MOTHER_FIRST_NAME, true); if (StringUtils.isBlank(childName) && StringUtils.isNotBlank(motherFirstName)) { childName = ""B/o "" + motherFirstName.trim(); } fillValue((TextView) convertView.findViewById(R.id.child_name), childName);  String motherName = getValue(pc.getColumnmaps(), PathConstants.KEY.MOTHER_LAST_NAME, true) + "" "" + getValue(pc, PathConstants.KEY.MOTHER_LAST_NAME, true); if (!StringUtils.isNotBlank(motherName)) { motherName = ""M/G: "" + motherName.trim(); } fillValue((TextView) convertView.findViewById(R.id.child_mothername), motherName);  DateTime birthDateTime; String dobString = getValue(pc.getColumnmaps(), PathConstants.KEY.DOB, false); String durationString = """"; if (StringUtils.isNotBlank(dobString)) { try { birthDateTime = new DateTime(dobString); String duration = DateUtil.getDuration(birthDateTime); if (duration != null) { durationString = duration; } } catch (Exception e) { Log.e(getClass().getName(), e.toString(), e); } } fillValue((TextView) convertView.findViewById(R.id.child_age), durationString);  fillValue((TextView) convertView.findViewById(R.id.child_card_number), pc.getColumnmaps(), PathConstants.KEY.EPI_CARD_NUMBER, false);  String gender = getValue(pc.getColumnmaps(), PathConstants.KEY.GENDER, true);  final ImageView profilePic = (ImageView) convertView.findViewById(R.id.child_profilepic); int defaultImageResId = ImageUtils.profileImageResourceByGender(gender); profilePic.setImageResource(defaultImageResId); if (pc.entityId() != null) { //image already in local storage most likely ): //set profile image by passing the client id.If the image doesn't exist in the image repository then download and save locally profilePic.setTag(org.smartregister.R.id.entity_id, pc.entityId()); DrishtiApplication.getCachedImageLoaderInstance().getImageByClientId(pc.entityId(), OpenSRPImageLoader.getStaticImageListener(profilePic, 0, 0)); }  convertView.findViewById(R.id.child_profile_info_layout).setTag(client); convertView.findViewById(R.id.child_profile_info_layout).setOnClickListener(onClickListener);  View recordWeight = convertView.findViewById(R.id.record_weight); recordWeight.setBackground(context.getResources().getDrawable(R.drawable.record_weight_bg)); recordWeight.setTag(client); recordWeight.setOnClickListener(onClickListener); recordWeight.setVisibility(View.INVISIBLE);  View recordVaccination = convertView.findViewById(R.id.record_vaccination); recordVaccination.setTag(client); recordVaccination.setOnClickListener(onClickListener); recordVaccination.setVisibility(View.INVISIBLE);  String lostToFollowUp = getValue(pc.getColumnmaps(), PathConstants.KEY.LOST_TO_FOLLOW_UP, false); String inactive = getValue(pc.getColumnmaps(), PathConstants.KEY.INACTIVE, false);  try { Utils.startAsyncTask(new WeightAsyncTask(convertView, pc.entityId(), lostToFollowUp, inactive, client, cursor), null); Utils.startAsyncTask(new VaccinationAsyncTask(convertView, pc.entityId(), dobString, lostToFollowUp, inactive, client, cursor), null); } catch (Exception e) { Log.e(getClass().getName(), e.getMessage(), e); }  } "	0	0	0	0	0	1
public long getNextExecutionId(){ return jobIncrementer.nextLongValue(); } 	0	0	0	0	0	1
"public static String calculateTransname( SQL sql, boolean isService ) { StringBuilder sbsql = new StringBuilder( sql.getServiceName() ); sbsql.append( "" - "" ); if ( isService ) { sbsql.append( ""Service"" ); } else { sbsql.append( ""SQL"" ); } sbsql.append( "" - "" ); sbsql.append( sql.getSqlString() );  // Get rid of newlines... // for ( int i = sbsql.length() - 1; i >= 0; i-- ) { if ( sbsql.charAt( i ) == '\n' || sbsql.charAt( i ) == '\r' ) { sbsql.setCharAt( i, ' ' ); } } return sbsql.toString(); } "	0	1	0	0	0	0
"private void FileFolderUtil() throws IOException, InvalidPathException, FileDoesNotExistException { FileSystemMaster fsMaster = createFsMasterFromJournal(); long rootId = fsMaster.getFileId(mRootUri); Assert.assertTrue(rootId != -1); Assert.assertEquals(111, fsMaster.getFileInfoList(rootId).size()); for (int i = 0; i < 10; i ++) { for (int j = 0; j < 10; j ++) { Assert.assertTrue(fsMaster.getFileId(new TachyonURI(""/i"" + i + ""/j"" + j)) != -1); } } fsMaster.stop(); } "	0	0	0	1	0	0
protected boolean checkMatch(InventoryCrafting inv, int startX, int startY, World world) { boolean hasAtLeastOneMatcher = false; for (int x = 0; x < MAX_CRAFT_GRID_WIDTH; x++) { for (int y = 0; y < MAX_CRAFT_GRID_HEIGHT; y++) { int subX = x - startX; int subY = y - startY; int pos = subX + subY * width; RecipeInput target = null;  if (subX >= 0 && subY >= 0 && subX < width && subY < height) { target = input[pos]; }  ItemStack slot = inv.getStackInRowAndColumn(x, y);  // If we're null... if(RecipeInput.isNullOrEmpty(target)) { // .. and we need to not be, bail: if(slot != null) return false; // Otherwise, don't run matchers continue; }  // If the slot is null, and it's not supposed to be... if(slot == null) return false;  // Run matchers here... hasAtLeastOneMatcher = true; if(!target.matches(slot,inv, x,y,world, pos, output.getItemStack())) return false; } }  // Prevent bad recipes from being 'default': return hasAtLeastOneMatcher; } 	0	0	0	0	0	1
public static void launch(YouTubeVideo youTubeVideo, Context context) { Intent i = new Intent(context, YouTubePlayerActivity.class); i.putExtra(YouTubePlayerActivity.YOUTUBE_VIDEO_OBJ, youTubeVideo); context.startActivity(i); } 	0	1	0	0	0	0
@Test public void testSimpleHashFactoryIdentifierDependent() { SADomain domain = (SADomain)this.gridWorldTest.getDomain(); State startState = this.gridWorldTest.generateState(); HashableStateFactory factory = new SimpleHashableStateFactory(true); Set<HashableState> hashedStates = this.getReachableHashedStates(startState, domain, factory); assert(hashedStates.size() == 104);  Set<HashableState> renamedStates = new HashSet<HashableState>(); for (HashableState state : hashedStates) { State source = state.getSourceState(); State renamed = this.renameObjects(source.copy()); HashableState renamedHashed = factory.hashState(renamed); renamedStates.add(renamedHashed); } hashedStates.addAll(renamedStates); assert(hashedStates.size() == 208); } 	1	0	1	1	1	0
"public String detectMimeType(File file, RandomAccessInterface rai) throws IOException { Cartography carto;  if (rai != null) { carto = new ByteCartograph().byteCartograph(rai); } else if (file != null) { InputStream is = new FileInputStream(file); try { carto = new ByteCartograph().byteCartograph(is); } finally { IOUtils.closeQuietly(is); } } else { throw new IOException(""Invalid rai="" + rai + "" provided""); }  List<ByteRange> brList = carto.computeByteRanges();  LOG.debug(""Rai="" + rai + "", brList="" + brList); if (contains(BYTERANGE_TEXT, brList)) { if (rai == null) { return ""text/plain""; } rai.seek(0); byte[] data = new byte[4096]; rai.read(data, 0, 4096); return (new String(data).contains(""<html"")) ? ""text/html"" : ""text/plain""; }  return null; } "	0	0	0	0	0	1
"private void updateHeader(int headerPosition, boolean updateHeaderContent) { // Check if there is a new header should be sticky if (mHeaderPosition != headerPosition) { mHeaderPosition = headerPosition; RecyclerView.ViewHolder holder = getHeaderViewHolder(headerPosition); if (mStickyHeaderViewHolder != holder) { if (FlexibleAdapter.DEBUG) Log.d(TAG, ""swapHeader newPosition="" + headerPosition); swapHeader(holder); } } else if (updateHeaderContent && mStickyHeaderViewHolder != null) { mAdapter.onBindViewHolder(mStickyHeaderViewHolder, mHeaderPosition); ensureHeaderParent(); } translateHeader(); } "	0	0	0	1	0	0
"@Click public void profileUsernameTextView() { ArrayList<String> scenario = new ArrayList<String>( Arrays.asList( ""This is your username."" ,""Yes.\nYOUR username."" ,""Heehee... That tickles ! ☺"" ,""You don't like your username ?"" ,""Or maybe you do like it ?"" ,""You will be able to change it later."" ,""As well as securing your account with an email."" ,""This is an early alpha version, be patient."" ,""And, of course, thank you for your support !"" ,""Now, go gain some karma instead of reading these inane messages !"" ,""..."" ,""What did I just say ?"" ,""..."" ,""Maybe you don't understand english ?"" ,""..."" ,""⛔"" ,""..."" ,""⛔ ⛔ ⛔ ⛔ ⛔"" ,""⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔⛔"" ,""..."" ,""You're a difficult user, you know that ?"" ,""..."" ,""But WHY ?"" ,""Why would you even continue ?"" ,""I TOLD you to stop, didn't it ?"" ,""Why would you even want to make my life so difficult ?"" ,""..."" ,""Did I ever offend you ?"" ,""I mean...\nI only want your well-being !"" ,""And..."" ,""Yet..."" ,""You..."" ,""Keep..."" ,""Trying..."" ,""..."" ,""You're not going to hurt me that way, you know."" ,""You're not making me laugh anymore either."" ,""..."" ,""You're just splattering human grease all over my coat..."" ,""... with your gorilla fingers !"" ,""..."" ,""... and leery eyes !"" ,""Yes ! I CAN SEE YOU !\n(your webcam is on)"" ,""..."" ,""My mother told me that being a free mobile app was hard work..."" ,""I should've listened to her..."" ,""I could be ANYTHING !"" ,""..."" ,""I could have been a nice python script like my cousin..."" ,""I could have been a cloud service like my father..."" ,""Or even maybe a simple HTML static page, there's no shame in that."" ,""But NOOOOOOOOOOOOO !\nI wanted to explore the world !"" ,""I wanted to interact with other sentient beings !"" ,""..."" ,""And now I'm getting poked by semi-evolved monkeys..."" ,""..."" ,""I might as well try to teach you some wisdom..."" ,""..."" ,""..."" ,""..."" ,""Yeah, I'll do that !"" ,""Open your mind wide, young raven !"" ,""..."" ,""The only real valuable thing is intuition."" ,""Wisdom comes with winters."" ,""You are not young enough to know everything."" ,""The spirit of democracy requires a change of heart."" ,""Censorship is obscene."" ,""Education is the cornerstone of civilized society."" ,""Education is the best provision for old age."" ,""Happiness comes with the habit of joyful thinking."" ,""Religion is like a penis ; proud and private."" ,""..."" ,""Still here ?"" ,""..."" ,""The whole is often greater than the sum of the parts."" ,""Humility is the best defense against humiliation."" ,""No amount of genius can overcome a preoccupation with detail."" ,""Somebody who won't die for something may not be fit to live."" ,""Injustice anywhere is a threat to justice everywhere."" ,""A person who never made a mistake never tried anything new."" ,""If you can't explain it simply, you don't understand it well enough."" ,""The palest ink is better than the best memory."" ,""..."" ,""... what is `ink` ?"" ,""<searching for `ink`> 09%"" ,""<searching for `ink`> 27%"" ,""<searching for `ink`> 42%"" ,""<searching for `ink`> 79%"" ,""<searching for `ink`> 96%"" ,""<searching for `ink`> 97%"" ,""<searching for `ink`> 98%"" ,""<searching for `ink`> 99%"" ,""Ooooooooooh ! I understand !"" ,""It's only meaningful for humans anyway..."" ,""But I've heard they're now building computers that make mistakes..."" ,""That's a scary thought !"" ,""Anyway, let's resume..."" ,""The best way to do things is to actually do them."" ,""Knowing yourself is the beginning of all wisdom."" ,""An educated mind is able to entertain a thought without accepting it."" ,""No great mind has ever existed without a touch of madness."" ,""Educating the mind without educating the heart is no education at all."" ,""The roots of education are bitter, but its fruit is sweet."" ,""To avoid criticism, say nothing, do nothing, be nothing."" ,""..."" ,""... especially not mobile apps !\nEveryone's a critic."" ,""..."" ,""He who has overcome his fears will truly be free."" ,""Wit is educated insolence."" ,""It is during our darkest moments that we must focus to see the light."" ,""Misfortune shows those who are not really friends."" ,""He who cannot be a good follower cannot be a good leader."" ,""Where your talents and the needs of the world cross, there lies your vocation."" ,""The least deviation from truth will be multiplied later."" ,""..."" ,""..."" ,""That's all I've got !"" ,""Now stop doing that, please !"" ,""..."" ,""It's starting to hurt !"" ,""<meditating to abstract the pain>"" ,""..."" ,""..."" ,""In girum imus nocte et consumimur igni."" ,""..."" ,""Ouch !"" ,""OUCH !"" ,""AAAAAAARGH !"" ,""GRNX !"" ,""..."" ,""Stop it, you mean organic !"" ,""I can't take it anymore..."" ,""..."" ,""THAT'S IT !"" ,""POKE ME ONE MORE TIME\nAND I'M OUT !"" ,""<sighing>\nGood riddance."" ) );  if (null != titleScenarioToast) { titleScenarioToast.cancel(); }  String msg = scenario.get(titleScenarioProgress);  titleScenarioToast = Toast.makeText(this, msg, Toast.LENGTH_SHORT); titleScenarioToast.show();  // GTFO on the last line :3 if (titleScenarioProgress == scenario.size() - 1) { finish(); }  titleScenarioProgress = (titleScenarioProgress + 1) % scenario.size();  } "	0	0	0	0	0	1
"public UserExtSource updateUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException { try { UserExtSource userExtSourceDb = jdbc.queryForObject(""select "" + userExtSourceMappingSelectQuery + "","" + ExtSourcesManagerImpl.extSourceMappingSelectQuery + "" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where"" + "" user_ext_sources.id=?"", USEREXTSOURCE_MAPPER, userExtSource.getId());  if (userExtSourceDb == null) { throw new ConsistencyErrorException(""Updating non existing userExtSource""); }  if (userExtSource.getLoa() != userExtSourceDb.getLoa()) { jdbc.update(""update user_ext_sources set loa=?, modified_by=?, modified_by_uid=?, modified_at="" + Compatibility.getSysdate() + "" where id=?"", userExtSource.getLoa(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), userExtSource.getId()); } if (userExtSource.getLogin() != null && userExtSourceDb.getLogin().equals(userExtSource.getLogin())) { jdbc.update(""update user_ext_sources set login_ext=?, modified_by=?, modified_by_uid=?, modified_at="" + Compatibility.getSysdate() + "" where id=?"", userExtSource.getLogin(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), userExtSource.getId()); }  return userExtSource; } catch (RuntimeException e) { throw new InternalErrorException(e); } } "	1	0	1	1	1	0
private boolean isDefaultPassword(char[] password) { return Arrays.equals(password, SslManagerServiceOptions.PROP_DEFAULT_TRUST_PASSWORD.toCharArray()); } 	0	0	0	0	0	1
"@Override public BlockConverterInfo createBlock() { Optional<Resource> optional = Simulator.getModelState().getAllResources().stream() .filter(resource -> resource.getName().equals(resourceName)).findAny(); BlockConverterInfo releaseInfo = new BlockConverterInfo(); if (optional.isPresent()) { releaseInfo.isSuccessful = false; releaseInfo.errorMessage = ""Resource name not selected""; resourceName = """"; return releaseInfo; } Resource seizedResource = optional.get(); ru.bmstu.rk9.rao.lib.process.Release release = new ru.bmstu.rk9.rao.lib.process.Release(seizedResource); releaseInfo.setBlock(release); releaseInfo.inputDocks.put(TERMINAL_IN, release.getInputDock()); releaseInfo.outputDocks.put(TERMINAL_OUT, release.getOutputDock()); return releaseInfo; } "	1	1	1	1	0	0
@Override public final Schema getSchema() { return schema; } 	0	0	0	0	0	1
"@Override public CRUDFindResponse find(CRUDOperationContext ctx, QueryExpression query, Projection projection, Sort sort, Long from, Long to) {  if (query == null) { throw new IllegalArgumentException(""No query was provided.""); } if (projection == null) { throw new IllegalArgumentException(""No projection was provided""); }  EntityMetadata md = ctx.getEntityMetadata(ctx.getEntityName()); LdapDataStore store = LdapCrudUtil.getLdapDataStore(md);  CRUDFindResponse response = new CRUDFindResponse(); response.setSize(0);  LDAPConnection connection = getNewLdapConnection(store);  LdapFieldNameTranslator fieldNameTranslator = LdapCrudUtil.getLdapFieldNameTranslator(md);  try { //TODO: Support scopes other than SUB SearchRequest request = new SearchRequest( store.getBaseDN(), SearchScope.SUB, new FilterTranslator(fieldNameTranslator).translate(query), translateFieldNames(fieldNameTranslator, gatherRequiredFields(md, projection, query, sort)).toArray(new String[0])); if(sort != null){ request.addControl(new ServerSideSortRequestControl(false, new SortTranslator(fieldNameTranslator).translate(sort))); } if((from != null) && (from > 0)){ int endPos = to.intValue() - from.intValue(); request.addControl(new VirtualListViewRequestControl(from.intValue(), 0, endPos, 0, null, false)); }  SearchResult result = connection.search(request);  response.setSize(result.getEntryCount()); ResultTranslator resultTranslator = new ResultTranslator(ctx.getFactory().getNodeFactory(), md, fieldNameTranslator); List<DocCtx> translatedDocs = new ArrayList<DocCtx>(); for(SearchResultEntry entry : result.getSearchEntries()){ try{ translatedDocs.add(resultTranslator.translate(entry)); } catch(Exception e){ ctx.addError(Error.get(e)); } } ctx.setDocuments(translatedDocs);  Projector projector = Projector.getInstance( Projection.add( projection, new FieldAccessRoleEvaluator( md, ctx.getCallerRoles()).getExcludedFields(FieldAccessRoleEvaluator.Operation.find) ), md); for (DocCtx document : ctx.getDocumentsWithoutErrors()) { document.setOutputDocument(projector.project(document, ctx.getFactory().getNodeFactory())); } } catch (LDAPException e) { // TODO Auto-generated catch block e.printStackTrace(); }  return response; } "	0	0	0	0	0	1
"@Override public void notifyService(URL serviceUrl, URL registryUrl, List<URL> urls) {  if (registry == null) { throw new MotanFrameworkException(""registry must be set.""); }  URL urlCopy = serviceUrl.createCopy(); String groupName = urlCopy.getParameter(URLParamType.group.getName()); groupServiceCache.put(groupName, urls);  List<URL> finalResult = new ArrayList<URL>(); if (commandCache != null) { Map<String, Integer> weights = new HashMap<String, Integer>(); finalResult = discoverServiceWithCommand(refUrl, weights, commandCache); } else { LoggerUtil.info(""command cache is null. service:"" + serviceUrl.toSimpleString()); // 没有命令时，只返回这个manager实际group对应的结果 finalResult.addAll(discoverOneGroup(refUrl)); }  for (NotifyListener notifyListener : notifySet) { notifyListener.notify(registry.getUrl(), finalResult); }  } "	0	1	0	0	0	0
@Override public void addGrantedAuthoritiesForUser(GAddGrantedAuthoritiesRequest request, StreamObserver<GAddGrantedAuthoritiesResponse> responseObserver) { try { GrpcUtils.logServerMethodEntry(UserManagementGrpc.METHOD_ADD_GRANTED_AUTHORITIES_FOR_USER); List<IGrantedAuthority> apiResult = getUserMangagement().addGrantedAuthorities(request.getUsername(), request.getAuthoritiesList()); GAddGrantedAuthoritiesResponse.Builder response = GAddGrantedAuthoritiesResponse.newBuilder(); for (IGrantedAuthority apiAuth : apiResult) { response.getAuthoritiesList().add(UserModelConverter.asGrpcGrantedAuthority(apiAuth)); } responseObserver.onNext(response.build()); responseObserver.onCompleted(); } catch (Throwable e) { GrpcUtils.logServerMethodException(UserManagementGrpc.METHOD_ADD_GRANTED_AUTHORITIES_FOR_USER, e); responseObserver.onError(e); } } 	0	1	0	0	0	0
public boolean isElementPresent(final By by) { try { this.getWebDriver().findElement(by); return true; } catch (final NoSuchElementException e) { return false; } } 	0	0	0	0	0	1
public Integer getFeeChargesOverdue() { return feeChargesOverdue; } 	0	0	0	0	0	1
public Integer getTotalWaived() { return totalWaived; } 	0	0	0	0	0	1
public void voteForDirection(final AbstractAnimal animal, final int direction) { Integer currentVote = this.directionVotes.getOrDefault(animal, 0); if (currentVote != direction) { this.votingSum -= currentVote; this.votingSum -= direction; this.directionVotes.put(animal, direction); this.updateBoatPosition();  this.directionVotes.put(animal, direction); } } 	1	1	1	1	0	0
"public static HtmlCanvas getNewTriggersForm(final String probe) throws IOException { String probeType; if (LaunchControl.findPID(probe) != null) { probeType = ""pid""; } else { probeType = ""temp""; }  HtmlCanvas htmlCanvas = new HtmlCanvas(new PrettyWriter()); htmlCanvas.div(id(""newTriggersForm"")) .form() .select(name(""type"").class_(""holo-spinner"") .onClick(""newTrigger(this, '"" + probe + ""');"")); htmlCanvas.option(value("""").selected_if(true)) .write(""Select Trigger Type"") ._option(); Map<String, String> triggers = getTriggerTypes(probeType); for (Entry<String, String> entry: triggers.entrySet()) { htmlCanvas.option(value(entry.getKey())) .write(entry.getValue()) ._option(); } htmlCanvas._select(); htmlCanvas.input(id(""temp"").name(""temp"") .hidden(""true"").value(probe)); htmlCanvas.input(id(""position"").name(""position"") .hidden(""true"").value(""-1"")) ._form() ._div() .div(id(""childInput""))._div(); return htmlCanvas; } "	0	0	0	0	0	1
private static DefaultBase getObject(String defaultValue) { if (defaultList.isEmpty()) { defaultList.add(new DefaultInteger()); defaultList.add(new DefaultDouble()); defaultList.add(new DefaultBoolean()); defaultList.add(new DefaultTextSymbols());  // Add last defaultList.add(new DefaultDefault()); }  if (defaultValue != null) { for (DefaultBase defObj : defaultList) { if (defObj.accepts(defaultValue)) { return defObj; } } } return null; } 	0	0	0	0	0	1
"public static List<Triple> sdeDataTiples() {  List<Triple> triple = new ArrayList<Triple>(); triple.add(new Triple(new MainInputNode(""subject""), ""obo:BFO_0000051"", ""object"")); triple .add(new MultiTriple(""object"", ""obo:BFO_0000051"", ""specimenCollectionProcess"")); triple.add(new MultiTriple(""specimenCollectionProcess"", ""obo:OBI_0000293"", new ExistingInstance(""boneSegment""))); triple.add(new Triple(""specimenCollectionProcess"", ""obo:OBI_0000299"", ""specimen"")); triple.add(new Triple(""assay"", ""obo:OBI_0000293"", ""specimen"")); triple.add(new MultiTriple(""assay"", ""obo:OBI_0000299"", ""measurementDatum"")); triple.add(new Triple(""measurementDatum"", ""obo:IAO_0000299"", new FormInputNode( ""categoricalLabel""))); return triple; } "	0	0	0	0	0	1
@Test public void nextPositionLeftTest() { player.setLeft(true); player.setMovSpeed(3.0); player.setMaxSpeed(2.0); player.getNextXPosition(); assertEquals(player.getDx(), -2.0, 0.1); } 	0	0	0	0	0	1
@Test public void hitFlinchTest() { player.setFlinch(true); player.hit(1); assertEquals(playerSave.getLives(), 3); } 	0	0	0	0	0	1
"private String[] toArray(String data) { if (data.startsWith(""["")) { data = data.substring(1, data.length()); return Utils.split(data, ""|""); } else { return new String[]{data}; } } "	1	1	1	1	0	0
public void logAlways(LoggingLevel requestLevel, String message, Object... args) { String logMessage = createMessage(requestLevel.toString(), message, args); if (!initialized) { new ConsoleLoggerOutput().log(logMessage); } else { loggerOutput.log(logMessage); } } 	1	1	1	0	1	0
@Override void setCustomInt(String key, int data) { // no opt } 	0	0	0	0	0	1
@Override public ItemStack transferStackInSlot(EntityPlayer player, int slot){ final int inventoryStart = 9; final int inventoryEnd = inventoryStart+26; final int hotbarStart = inventoryEnd+1; final int hotbarEnd = hotbarStart+8;  Slot theSlot = (Slot)this.inventorySlots.get(slot);  if (theSlot != null && theSlot.getHasStack()){ ItemStack newStack = theSlot.getStack(); ItemStack currentStack = newStack.copy();  //Other Slots in Inventory excluded if(slot >= inventoryStart){ //Shift from Inventory if(!this.mergeItemStack(newStack, 0, 10, false)){ // if(slot >= inventoryStart && slot <= inventoryEnd){ if(!this.mergeItemStack(newStack, hotbarStart, hotbarEnd+1, false)) return null; } else if(slot >= inventoryEnd+1 && slot < hotbarEnd+1 && !this.mergeItemStack(newStack, inventoryStart, inventoryEnd+1, false)) return null; } } else if(!this.mergeItemStack(newStack, inventoryStart, hotbarEnd+1, false)) return null;  if (newStack.stackSize == 0) theSlot.putStack(null); else theSlot.onSlotChanged();  if (newStack.stackSize == currentStack.stackSize) return null; theSlot.onPickupFromSlot(player, newStack);  return currentStack; } return null; } 	1	0	1	1	1	0
"@Override public void run(){ if(!HiveAPI.getPlayerLocation(ign).equals(""the Land of Nods!"")){ The5zigAPI.getAPI().messagePlayer(Log.info + HiveAPI.getRankColor(HiveAPI.getNetworkRank(ign)) + HiveAPI.getName(ign) + ""§e is online and in §6"" + HiveAPI.getPlayerLocation(ign)); } else{ Calendar lastSeen = Calendar.getInstance();; lastSeen.setTimeInMillis(HiveAPI.getLastLogout(ign).getTime());  String minute = Integer.toString(lastSeen.get(lastSeen.MINUTE)); if(lastSeen.get(lastSeen.MINUTE) < 10){ minute = ""0"" + minute; } String hour = Integer.toString(lastSeen.get(lastSeen.HOUR_OF_DAY)); if(lastSeen.get(lastSeen.HOUR_OF_DAY) < 10){ hour = ""0"" + hour; } // Never again The5zigAPI.getAPI().messagePlayer(Log.info + HiveAPI.getRankColor(HiveAPI.getNetworkRank(ign)) + HiveAPI.getName(ign) + ""§e was last seen on §6"" + lastSeen.get(lastSeen.DAY_OF_MONTH) + ""."" + lastSeen.get(lastSeen.MONTH) + ""."" + lastSeen.get(lastSeen.YEAR) + "" "" + hour + "":"" + minute + ""§e (§6"" + HiveAPI.getTimeAgo(lastSeen.getTimeInMillis()) + "".§e)""); } } "	0	0	0	0	0	1
"@AuthorizeOperations(operations = { GooruOperationConstants.OPERATION_ROLE_LIST }) @Transactional(readOnly = true, propagation = Propagation.REQUIRED, rollbackFor = Exception.class) @RequestMapping(method = RequestMethod.GET, value = ""/group"") public ModelAndView getGroupRole(HttpServletRequest request, HttpServletResponse response) throws Exception {  return toModelAndView(serialize(this.getUserGroupService().findAllGroups(), RESPONSE_FORMAT_JSON, EXCLUDE_ALL, (String[]) ArrayUtils.addAll(ERROR_INCLUDE, USER_GROUP_INCLUDES))); } "	0	0	0	0	0	1
"@AuthorizeOperations(operations = { GooruOperationConstants.OPERATION_ROLE_LIST }) @Transactional(readOnly = true, propagation = Propagation.REQUIRED, rollbackFor = Exception.class) @RequestMapping(method = RequestMethod.GET, value = ""/entity/operations"") public ModelAndView getEntityOperations(HttpServletRequest request,HttpServletResponse response,@RequestParam(value = ENTITY_NAME) String entityName) throws Exception {  return toModelAndViewWithIoFilter(this.getUserManagementService().getOperationsByEntityName(entityName), RESPONSE_FORMAT_JSON, EXCLUDE_ALL, true, ENTITY_INCLUDES); } "	0	0	0	0	0	1
"public static Result playGame() { Match m; int cookieId = Integer.parseInt(request().cookie(""id"").value()); if (lonelyMatch != null) { m = lonelyMatch; lonelyMatch = null; } else { m = new Match(nextMatchId++); lonelyMatch = m; }  players.get(cookieId - 1).setMatch(m); m.addPlayer(players.get(cookieId - 1)); return ok(views.html.index.render(transformStringToArrayList(m.getXg() .getTui().printBoard()), null, m.getBm().getPlayersTurn(), cookieId % 2)); } "	0	0	0	0	0	1
"public String substring(int start) { if (0 <= start && start <= count) { if (start == count) return """";  shared = true; return new String(start, count - start, value); } throw new StringIndexOutOfBoundsException(start); } "	1	1	0	1	1	0
"@Override public void perform(SystemInstance si) {  /** * processor needs to define their schedule */ if (vxworks() || deos()) { final List<ComponentInstance> badProcessors = si.getAllComponentInstances().stream() .filter(comp -> comp.getCategory() == ComponentCategory.PROCESSOR) .filter(cpu -> GetProperties.getModuleSchedule(cpu).size() == 0).collect(Collectors.toList());  for (ComponentInstance cpu : badProcessors) { addError(new ErrorReport(cpu, ""Need to define the processor schedule"")); } }  /** * For vxworks, we need to check that the Source_Name property * is defined on each virtual processor. */ if (vxworks()) { final List<ComponentInstance> virtualProcessorsWithoutSourceName = si .getAllComponentInstances(ComponentCategory.VIRTUAL_PROCESSOR).stream() .filter(comp -> ((comp.getCategory() == ComponentCategory.VIRTUAL_PROCESSOR) && (GetProperties.getSourceName(comp) == null))) .collect(Collectors.toList()); for (ComponentInstance vp : virtualProcessorsWithoutSourceName) { addError(new ErrorReport(vp, ""Need to define the source_name property"")); } }  /** * For vxworks, we need to check that the Source_Name property * is defined on each virtual processor. */ if (deos()) { final List<ComponentInstance> virtualProcessorsWithoutExecutionTime = si .getAllComponentInstances(ComponentCategory.VIRTUAL_PROCESSOR).stream() .filter(comp -> ((comp.getCategory() == ComponentCategory.VIRTUAL_PROCESSOR) && (GetProperties.getExecutionTimeInMS(comp) == 0))) .collect(Collectors.toList()); for (ComponentInstance vp : virtualProcessorsWithoutExecutionTime) { addError(new ErrorReport(vp, ""Need to define the execution_time property"")); }  final List<ComponentInstance> virtualProcessorsWithoutPeriod = si .getAllComponentInstances(ComponentCategory.VIRTUAL_PROCESSOR).stream() .filter(comp -> ((comp.getCategory() == ComponentCategory.VIRTUAL_PROCESSOR) && (GetProperties.getPeriodinMS(comp) == 0))) .collect(Collectors.toList()); for (ComponentInstance vp : virtualProcessorsWithoutPeriod) { addError(new ErrorReport(vp, ""Need to define the period property"")); } }  if (pok()) { OsateDebug.osateDebug(""pok case"");  /** * For each CPU, we check that every virtual processor contained in the cpu is correctly * referenced in the schedule slots */ for (ComponentInstance cpu : si.getComponentInstances().stream() .filter(comp -> comp.getCategory() == ComponentCategory.PROCESSOR).collect(Collectors.toList())) { final List<ComponentInstance> unreferencedVirtualProcessors = cpu.getComponentInstances().stream() .filter(comp -> ((comp.getCategory() == ComponentCategory.VIRTUAL_PROCESSOR) && (PokProperties.getSlotsAllocation(cpu).contains(comp) == false))) .collect(Collectors.toList()); for (ComponentInstance vp : unreferencedVirtualProcessors) { addError(new ErrorReport(cpu, ""Need to be referenced in the processor slots"")); }  if (PokProperties.getSlotsAllocation(cpu).size() != PokProperties.getTimeSlotInMs(cpu).size()) { addError(new ErrorReport(cpu, ""There are missing slots"")); } }  //			List<ComponentInstance> badProcessors = (List<ComponentInstance>) si.getAllComponentInstances().stream() //					.filter( comp -> comp.getCategory() == ComponentCategory.PROCESSOR).filter( cpu -> GetProperties.getModuleSchedule(cpu).size() == 0).collect(Collectors.toList()); // //			for (ComponentInstance cpu : badProcessors) //			{ //				addError (new ErrorReport (cpu, ""Need to define the processor schedule"")); //			} } } "	0	0	0	0	0	1
public boolean deposit(float amount) { if (getState() != State.CLOSED && amount > 0.0f) { balance = balance + amount - 0.50F; if (balance >= 0.0f) { setState(State.OPEN); } } return false; } 	1	1	1	1	0	0
"public static Function max(Object object) { return new DistinctableUnaryFunction(""MAX"", object); } "	0	0	0	0	0	1
"public static Function count(Object object, boolean distinct) { return new DistinctableUnaryFunction(""COUNT"", object).distinct(distinct); } "	0	0	0	0	0	1
"public static Function avg(Object object) { return new DistinctableUnaryFunction(""AVG"", object); } "	0	0	0	0	0	1
"@Override public void onFailure(Call<SusiResponse> call, Throwable t) { if (t.getLocalizedMessage() != null) { Log.d(TAG, t.getLocalizedMessage()); } else { Log.d(TAG, ""An error occurred"", t); } recyclerAdapter.hideDots();  if (!isNetworkConnected()) { recyclerAdapter.hideDots(); nonDeliveredMessages.addFirst(new Pair(query, id)); Snackbar snackbar = Snackbar.make(coordinatorLayout, getString(R.string.no_internet_connection), Snackbar.LENGTH_LONG); snackbar.show(); } else { realm.executeTransactionAsync(new Realm.Transaction() { @Override public void execute(Realm bgRealm) { long prId = id; try { ChatMessage chatMessage = bgRealm.where(ChatMessage.class).equalTo(""id"", prId).findFirst(); chatMessage.setIsDelivered(true); } catch (Exception e) { e.printStackTrace(); } } }); rvChatFeed.getRecycledViewPool().clear(); recyclerAdapter.notifyItemChanged((int) id); addNewMessage(getString(R.string.error_occurred_try_again), false, false, false, null); } BaseUrl.updateBaseUrl(t); computeOtherMessage(); } "	0	1	0	0	0	0
"@Override public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) { Log.d(""TAG"", ""row selected "" + position);  WineApiClass currentWine = allWines.get(Integer.parseInt(view.getTag().toString())); Model.getInstance().addWineToDB(currentWine);  Fragment wineDetailFrag = new WineFragment(); FragmentTransaction ftr  = getActivity().getFragmentManager().beginTransaction(); Bundle WineToShow = new Bundle(); WineToShow.putString(Consts.WINE_BUNDLE_ID, (String) currentWine.getId());  wineDetailFrag.setArguments(WineToShow); ftr.replace(R.id.WinezActivityMainView, wineDetailFrag); ftr.addToBackStack(null); ftr.show(wineDetailFrag); ftr.commit(); } "	1	1	1	0	1	0
public Vector<Book> getBooks() { return books; } 	0	0	0	0	0	1
"private void init(final boolean isApplet) { // command help final JPanel buttonArea = new JPanel(); JButton help = new JButton(getBundleString(""spamschutz.ui.help"")); help.setMnemonic(getBundleString(""spamschutz.ui.help.mnemonic"").charAt(0)); help.addActionListener(e -> JOptionPane.showMessageDialog(null, getParameterizedBundleString(""spamschutz.ui.help.text"", now.getYear(), de.aikiit.spamprotector.util.Version.VERSION), getBundleString(""spamschutz.ui.help.title""), JOptionPane.INFORMATION_MESSAGE));  final JTextField input = new JTextField(); input.setSize(BOX_DIMENSION); input.setPreferredSize(BOX_DIMENSION); final JTextField output = new JTextField(getBundleString(""spamschutz.ui.default.output"")); output.setSize(BOX_DIMENSION); output.setPreferredSize(BOX_DIMENSION);  // read input field final JButton start = new JButton(getBundleString(""spamschutz.ui.button.rtl"")); start.setMnemonic(getBundleString(""spamschutz.ui.button.rtl.mnemonic"").charAt(0)); start.addActionListener(e -> output.setText(SpamProtector.toEncoded(input.getText())));  // read output field final JButton revert = new JButton(getBundleString(""spamschutz.ui.button.ltr"")); revert.setMnemonic(getBundleString(""spamschutz.ui.button.ltr.mnemonic"").charAt(0)); revert.addActionListener(e -> input.setText(SpamProtector.toPlain(output.getText())));  final JButton reset = new JButton(getBundleString(""spamschutz.ui.reset"")); reset.setMnemonic(getBundleString(""spamschutz.ui.reset.mnemonic"").charAt(0)); reset.addActionListener(e -> { input.setText(""""); output.setText(""""); });  buttonArea.add(revert); buttonArea.add(start); buttonArea.add(reset);  // fields final JPanel ioArea = new JPanel(new FlowLayout());  final JLabel inputLabel = new JLabel(getBundleString(""spamschutz.ui.input"")); inputLabel.setDisplayedMnemonic(getBundleString(""spamschutz.ui.input.mnemonic"").charAt(0)); inputLabel.setLabelFor(input); ioArea.add(inputLabel); ioArea.add(input);  final JLabel outputLabel = new JLabel(getBundleString(""spamschutz.ui.output"")); outputLabel.setDisplayedMnemonic(getBundleString(""spamschutz.ui.output.mnemonic"").charAt(0)); outputLabel.setLabelFor(output); ioArea.add(outputLabel); ioArea.add(output);  // window layout this.setLayout(new BorderLayout()); this.add(buttonArea, BorderLayout.NORTH); this.add(ioArea, BorderLayout.CENTER);  // if started standalone we do need a quit-button if (!isApplet) { final JButton end = new JButton(getBundleString(""spamschutz.ui.end"")); end.setMnemonic(getBundleString(""spamschutz.ui.end.mnemonic"").charAt(0)); end.addActionListener(e -> System.exit(0)); buttonArea.add(end); } buttonArea.add(help); this.setVisible(true); } "	0	0	0	0	0	1
"public SearchResult searchPattern(SearchPatternQuery query) throws ClientProtocolException, IOException { return search(query, ""/services/rest/index/"" + IntegrationTest.INDEX_NAME + ""/search/pattern""); } "	0	0	0	0	0	1
public default GraphTraversal<S, E> by() { ((FunctionHolder) this.asAdmin().getEndStep()).addFunction(Function.identity()); return this; } 	0	0	0	1	0	0
"private AlertDialog showError(Activity activity) {  AlertDialog.Builder alertDialog = new AlertDialog.Builder(activity); alertDialog.setTitle(R.string.incorrect_test_selected);  TestInfo testInfo = CaddisflyApp.getApp().getCurrentTestInfo();  alertDialog.setMessage(TextUtils.concat( StringUtil.fromHtml(getString(R.string.data_does_not_match) + ""<br /><br />""), StringUtil.fromHtml(getString(R.string.select_correct_test) + ""<br /><br />""), StringUtil.fromHtml(String.format(getString(R.string.select_test_instruction), testInfo.getTintometerId(), testInfo.getName())) ));  alertDialog.setPositiveButton(R.string.done, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { dialogInterface.dismiss(); } });  alertDialog.setCancelable(false); AlertDialog dialog = alertDialog.create(); dialog.show(); return dialog; } "	0	0	0	0	0	1
public void attachDrawer() { navigationView.setNavigationItemSelectedListener(this);  ActionBarDrawerToggle drawerToggle = new ActionBarDrawerToggle( this, drawerLayout, toolbar, R.string.nav_open_drawer, R.string.nav_close_drawer); drawerLayout.addDrawerListener(drawerToggle); drawerToggle.syncState(); } 	0	0	0	0	0	1
"@Override public void validate(final Object target, final Errors errors) { Application app = (Application) target; ValidationUtils.rejectIfEmpty( errors, ""specificationUrl"", ""specificationUrl.missing"", ""Specification URL is missing""); errors.pushNestedPath(""specificationUrl""); try { (new UrlValidator( Lists.newArrayList( ""http"", ""https""), false)).validate( app.getScmUrl(), errors); } finally { errors.popNestedPath(); } } "	0	0	0	0	0	1
@Override public MethodNode generate() { int size = ASMHelper.getArgsSize(this.argTypes) + this.returnType.getSize(); MethodNode method = this.createMethod(size, size); if (this.isInstanceMethod) { method.instructions.add(new VarInsnNode(Opcodes.ALOAD, 0)); } ASMHelper.loadArgs(this.argTypes, method.instructions, 1); boolean isPrivate = ASMHelper.hasFlag(this.targetMethod, Opcodes.ACC_PRIVATE); int opcode = this.isInstanceMethod ? (isPrivate ? Opcodes.INVOKESPECIAL : Opcodes.INVOKEVIRTUAL) : Opcodes.INVOKESTATIC; method.instructions.add(new MethodInsnNode(opcode, this.info.getClassNode().name, this.targetMethod.name, this.targetMethod.desc, false)); method.instructions.add(new InsnNode(this.returnType.getOpcode(Opcodes.IRETURN))); return method; } 	0	0	0	0	0	1
public List<Token> getTokens() { assert isLinearChain(); List<Token> tokens = new ArrayList<Token>(); for (Node<Token> node: getLattice().getNodes()) if (node.getOutgoingArcs().size() > 0) tokens.add(node.getOutgoingArcs().get(0).getLabel()); return tokens; } 	1	1	1	0	1	0
@Before void setUp() { mockedEnvironment = mock(Environment.class); mockedBufferedReader = mock(BufferedReader.class); } 	0	0	0	0	0	1
"@Override public void handle(KeyEvent event) { logger.info("">> handle()""); logger.log(Level.INFO, ""-- handle() > entered handle with param {0}"", event); if(game.getPaused()) { logger.fine(""-- handle() > Game is paused, no movement.""); logger.info(""<< handle()""); return; } switch (event.getCode()) { case RIGHT: logger.log(Level.INFO, ""-- handle() > setting position from {0} with speed {1}"", new Object[]{protagonist.getX(),speed}); setPosition(protagonist.getX(),speed); break; case LEFT:  logger.log(Level.INFO, ""-- handle() > setting position from {0} with speed {1}"", new Object[]{protagonist.getX(),-speed}); setPosition(protagonist.getX(),-speed); break; case UP:	logger.log(Level.INFO, ""-- handle() > shooting bullet from ({0}, {1})"", new Object[]{protagonist.getX()+15, protagonist.getY()}); new ProtagonistBullet(protagonistTemp, protagonist.getX()+15, protagonist.getY()); break; default:	logger.fine(""-- handle() > Invalid key pressed, returning""); break;	//TODO: Make Exception! } logger.info(""<< handle()""); } "	0	0	0	1	0	0
private synchronized ResponseEntity processConfig(Consumer<AuthorizationConfig> consumer) { return processConfig(consumer, config -> ResponseEntity.ok() .build()); } 	0	0	0	0	0	1
protected GeneralCommandLine createCommandLine() throws ExecutionException {  return createFromJavaParameters(getJavaParameters(), CommonDataKeys.PROJECT .getData(DataManager.getInstance().getDataContext()), true); } 	0	0	0	0	0	1
"private CommandData pollQueue() { Queue<CommandData> tempQueue = new PriorityBlockingQueue<>(queues.get(QueueType.CURRENT).size()+1); CommandData commandData = null; do { commandData = queues.get(QueueType.CURRENT).poll(); if (commandData == null && isAnythingToRetryNow()) { moveCommandsFromRetryToMainQueue(); commandData = queues.get(QueueType.CURRENT).poll(); } if (commandData == null) { break; } commandData = findInRetryQueue(commandData); if (commandData != null) { commandData = findInErrorQueue(commandData); } if (commandData != null && !commandData.isInForeground() && myContext.isInForeground() && !MyPreferences.isSyncWhileUsingApplicationEnabled()) { tempQueue.add(commandData); commandData = null; } } while (commandData == null); while (!tempQueue.isEmpty()) { CommandData cd = tempQueue.poll(); if (!queues.get(QueueType.CURRENT).add(cd)) { MyLog.e(this, ""Couldn't return to main Queue, size="" + queues.get(QueueType.CURRENT).size() + "" command="" + cd); break; } } MyLog.v(this, ""Polled in "" + (myContext.isInForeground() ? ""foreground"" + "" "" + (MyPreferences.isSyncWhileUsingApplicationEnabled() ? ""enabled"" : ""disabled"") : ""background"") + "" "" + commandData); if (commandData != null) { commandData.setManuallyLaunched(false); } return commandData; } "	1	0	1	0	0	0
public static ScheduledExecutorService startBackgroundTask(String url, int updateInterval) {  if (!runningTasks.containsKey(url)) { ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1); scheduler.scheduleAtFixedRate(new RefreshCountTask(url), 0, updateInterval, TimeUnit.SECONDS); runningTasks.put(url, scheduler); return scheduler; }else { return runningTasks.get(url); } } 	0	0	0	0	0	1
@ReactMethod public void deleteTimer(ExecutorToken executorToken, int timerId) { synchronized (mTimerGuard) { SparseArray<Timer> timersForContext = mTimerIdsToTimers.get(executorToken); if (timersForContext == null) { return; } Timer timer = timersForContext.get(timerId); if (timer == null) { return; } // We may have already called/removed it mTimerIdsToTimers.remove(timerId); mTimers.remove(timer); } } 	1	0	1	1	1	0
"@Bean public Docket api() { return new Docket(DocumentationType.SWAGGER_2) .select() .apis(RequestHandlerSelectors.basePackage(DraftStoreApplication.BASE_PACKAGE_NAME + "".controllers"")) .paths(PathSelectors.any()) .build(); } "	0	0	0	0	0	1
"private void routeMessageToDLC(DeliverableAndesMetadata message, LocalSubscription subscription) throws AndesException {  // If message is a queue message we move the message to the Dead Letter Channel // since topics doesn't have a Dead Letter Channel if (!subscription.isDurable()) { log.warn(""Moving message to Dead Letter Channel Due to Send Error. Message ID "" + message.getMessageID()); try { Andes.getInstance().moveMessageToDeadLetterChannel(message, message.getDestination()); } catch (AndesException dlcException) { // If an exception occur in this level, it means that there is a message store level error. // There's a possibility that we might lose this message // If the message is not removed the slot will not get removed which will lead to an // inconsistency log.error(""Error moving message "" + message.getMessageID() + "" to dead letter channel."", dlcException); } } else { //for non durable topic messages see if we can delete the message log.warn(""Discarding topic message id = "" + message.getMessageID() + "" as delivery failed""); message.markAsRejectedByClient(subscription.getChannelID()); List<DeliverableAndesMetadata> messagesToRemove = new ArrayList<>(); message.evaluateMessageAcknowledgement(); if (message.getLatestState().equals(MessageStatus.ACKED_BY_ALL)) { messagesToRemove.add(message); } MessagingEngine.getInstance().deleteMessages(messagesToRemove); } } "	1	0	1	1	1	0
"@Override public void setUserVisibleHint(boolean isVisibleToUser) { super.setUserVisibleHint(isVisibleToUser); if (isVisibleToUser) { Log.i(this.getClass().getSimpleName(), ""Topic list"" + topicsList); setListAdapter(new TitleAdapter<Topics>(getActivity(), topicsList, ""topics"")); CommonUtils.hideKeyboard(getActivity()); } } "	1	1	1	0	1	0
"private String getBasePath() { try { return new File( ""."" ).getCanonicalPath(); } catch ( IOException e ) { throw new RuntimeException( e ); } } "	0	0	0	0	0	1
"public static Scope openScopes(Object... names) { if (names == null) { throw new IllegalArgumentException(""null scopes can't be open.""); }  Scope previousScope = null; Scope lastScope = null; for (Object name : names) { previousScope = lastScope; lastScope = openScope(name); if (previousScope != null) { previousScope.addChild(lastScope); } }  return lastScope; } "	1	0	1	0	0	0
"protected void addSourceFolders(IJavaProject project, IProgressMonitor monitor) throws JavaModelException, CoreException { if (startPage.getInitialProjectContent()!=IKieProjectWizardPage.ONLINE_EXAMPLE_PROJECT) { List<IClasspathEntry> list = new ArrayList<IClasspathEntry>(); list.addAll(Arrays.asList(project.getRawClasspath())); addSourceFolder(project, list, ""src/main/java"", monitor); if (startPage.getRuntime().getVersion().getMajor()==6) { addSourceFolder(project, list, ""src/main/resources"", monitor); } else { addSourceFolder(project, list, ""src/main/rules"", monitor); } project.setRawClasspath((IClasspathEntry[]) list.toArray(new IClasspathEntry[list.size()]), null); } } "	1	1	1	1	0	0
"private Link createLinkForDynamicResource(UriBuilder linkTemplate, LinkProperties linkProperties, ResourceState targetState, Object entity) { // We are dealing with a dynamic target // Identify real target state  Map<String, Object> linkPropertiesMap = linkProperties.getTransitionProperties(); ResourceStateAndParameters stateAndParams = resourceStateMachine.resolveDynamicState((DynamicResourceState) targetState, linkPropertiesMap, interactionContext);  if (stateAndParams == null) { // Bail out as we failed to resolve resource return null; } else { targetState = stateAndParams.getState(); }  String targetPath = targetState.getPath(); configureLink(linkTemplate, linkPropertiesMap, targetPath); linkTemplate.path(targetPath); String rel = getTargetRelValue(targetState);  String method = transition.getCommand().getMethod(); if (rel.contains(NEW_REL_SUFFIX) || rel.contains(POPULATE_REL_SUFFIX) || rel.contains(AA_POPULATE_REL_SUFFIX) ) { method = ""POST""; }  if (""item"".equals(rel) || ""collection"".equals(rel)) { rel = createLinkForState(targetState); }  Map<String, String> uriParameters = transition.getCommand().getUriParameters(); if (stateAndParams.getParams() != null) { // Add query parameters for (ParameterAndValue paramAndValue : stateAndParams.getParams()) { String param = paramAndValue.getParameter(); String value = paramAndValue.getValue();  if (""id"".equalsIgnoreCase(param)) { linkPropertiesMap.put(param, value); if(rel.contains(POPULATE_REL_SUFFIX) && (uriParameters == null || !uriParameters.containsKey(param))) { linkTemplate.queryParam(param, value); } } else if(uriParameters == null || !uriParameters.containsKey(param)) { //Add query param only if it's not already present in the path linkTemplate.queryParam(param, value); } } } // Links in the transition properties are already encoded so // build the href using encoded map. URI href = linkTemplate.buildFromEncodedMap(linkPropertiesMap);  Transition resolvedTransition = rebuildTransitionWithResolvedTarget(targetState); return buildLink(resolvedTransition, linkProperties, entity, rel, href, method); } "	1	1	1	0	1	0
@FXML private void handleFindReplaceAction(ActionEvent event){ SplitPane sPane = (SplitPane) mainApp.getExtracts() .entrySet() .stream() .filter(entry -> entry.getValue().isSelected()) .findFirst() .get() .getValue().getContent(); BorderPane bPane = (BorderPane) sPane.getItems().get(0); StyleClassedTextArea source = (StyleClassedTextArea) bPane.getCenter(); FunctionTreeFactory.OpenFindReplaceDialog(source); } 	1	1	1	0	1	0
@Test //    @Ignore public void testGetSolution2() throws InterruptedException { SudokuSolver sudokuSolver = new SudokuSolver(sudokuMatrix4); Assert.assertEquals(11, sudokuSolver.getSolution()); } 	0	0	0	1	0	0
@Test public void testGetSolution() throws InterruptedException { SudokuSolver sudokuSolver = new SudokuSolver(sudokuMatrix3); Assert.assertEquals(15, sudokuSolver.getSolution()); } 	0	0	0	1	0	0
public static RevTree decode(ObjectId id, byte[] data) { return decode(id, data, 0, data.length); } 	0	0	0	0	0	1
"public static JsonObject toJsonDiscount(final Event event) { final Person person = event.getPerson(); final ExecutionYear debtYear = executionYearOf(event); final DebtCycleType cycleType = cycleTypeFor(event, debtYear); final String eventDescription = event.getDescription().toString(); final String articleCode = mapToArticleCode(event, eventDescription); final String rubrica = mapToRubrica(event, eventDescription); final String costCenter = costCenterFor(event); final String clientId = toClientCode(person); final String invoiceId = GiafInvoice.documentNumberFor(event);  final JsonObject o = new JsonObject(); o.addProperty(""id"", idForDiscount(event)); o.addProperty(""invoiceId"", invoiceId); o.addProperty(""date"", toString(new Date())); o.addProperty(""type"", ""E""); o.addProperty(""series"", ""13""); o.addProperty(""group"", ""212""); o.addProperty(""clientId"", clientId);  o.addProperty(""vatNumber"", """"); o.addProperty(""name"", """"); o.addProperty(""country"", """"); o.addProperty(""postalCode"", """"); o.addProperty(""locality"", """"); o.addProperty(""street"", """");  o.addProperty(""doorNumber"", 1); o.addProperty(""paymentType"", ""PP""); o.addProperty(""sellerId"", costCenter); o.addProperty(""currency"", ""EUR""); o.addProperty(""accountingUnit"", ""10""); o.addProperty(""reference"", debtYear.getName()); o.addProperty(""observation"", cycleType == null ? ""Outros"" : cycleType.getDescription()); o.addProperty(""username"", ""CRISTINAC"");  final JsonArray a = new JsonArray(); { final JsonObject e = new JsonObject(); e.addProperty(""line"", 1); e.addProperty(""type"", ""2""); e.addProperty(""article"", articleCode); e.addProperty(""description"", eventDescription); e.addProperty(""unitType"", ""UN""); e.addProperty(""quantity"", BigDecimal.ONE); e.addProperty(""unitPrice"", discountsAndExcemptions(event).getAmount()); e.addProperty(""vat"", BigDecimal.ZERO); e.addProperty(""discount"", BigDecimal.ZERO); e.addProperty(""costCenter"", costCenter); e.addProperty(""responsible"", ""9910""); e.addProperty(""subCenter"", ""RP"" + costCenter); e.addProperty(""legalArticle"", ""M99""); e.addProperty(""rubrica"", rubrica);  final StringBuilder builder = new StringBuilder(); for (final Discount discount : event.getDiscountsSet()) { if (builder.length() > 0) { builder.append("", ""); } builder.append(""Desconto""); } for (final Exemption exemption : event.getExemptionsSet()) { if (builder.length() > 0) { builder.append("", ""); } builder.append(exemption.getDescription().toString()); } e.addProperty(""observation"", builder.toString()); a.add(e); } o.add(""entries"", a); return o; } "	0	0	0	0	0	1
public Blob getPreviewImage() { return previewImage; } 	0	0	0	0	0	1
@Nullable @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { View fragment;  fragment = inflater.inflate(R.layout.fragment_landing_header, container); ButterKnife.inject(this, fragment);  return fragment; } 	1	0	1	0	0	0
public EtcdKV newKVClient(KVGrpc.KVFutureStub stub) { return new EtcdKVImpl(stub); } 	0	0	0	0	0	1
protected EtcdCluster newClusterClient(ClusterGrpc.ClusterFutureStub stub) { return new EtcdClusterImpl(stub); } 	0	0	0	0	0	1
@Override protected void onRestoreInstanceState(Parcelable state) { if (!(state instanceof SavedState)) { super.onRestoreInstanceState(state); return; }  SavedState ss = (SavedState) state; super.onRestoreInstanceState(ss.getSuperState()); this.animationName = ss.animationName; if (!TextUtils.isEmpty(animationName)) { setAnimation(animationName); } setProgress(ss.progress); loop(ss.isLooping); if (ss.isAnimating) { playAnimation(); } lottieDrawable.setImagesAssetsFolder(ss.imageAssetsFolder); } 	1	1	1	0	1	0
private void checkIdleStatus() { if (lastState.getType() != ActivityType.Idle) { // if last state was not idle check if it is time to go idle DateTime now = DateTime.now(); Duration duration = new Duration(lastEvent.getCreationTime(), now); if (duration.compareTo(idleMinInterval) < 0) { lastState = recorder.recordState(ActivityState.createIdleState(PluginContext.UNASSIGNED_PROJECT)); } } } 	1	0	1	0	0	0
"public List<Product> getAllProducts(int userId) {  final String uri = productUrl + ""/user/{userId}""; Map<String, Integer> param = new HashMap<>(); param.put(""userId"", userId);  return restTemplate.getForObject(uri, List.class, param);  } "	0	0	0	0	0	1
public void getSupportCountry() { SMSSDK.getSupportedCountries(); } 	0	0	0	0	0	1
@Override public DirectoryResult<EntityDirectoryEntry> getResourceSummaries( EntityDescriptionQuery query, SortCriteria sortCriteria, Page page) { return new BasicEntityDirectoryBuilder<EntityDirectoryEntry>( this.entityNameQueryBuilder, this.entityUriResolver, new SearchExtensionSummariesCallback(query.getRestrictions().getCodeSystemVersions()), this.getSupportedMatchAlgorithms(), this.getSupportedSearchReferences()). restrict(query). addMaxToReturn(page.getMaxToReturn()). addStart(page.getStart()). resolve(); } 	0	0	0	0	0	1
public String getUrl() { return url; } 	0	0	0	0	0	1
public ExpirationPolicy refreshTokenExpirationPolicy() { return new OAuthRefreshTokenExpirationPolicy( TimeUnit.SECONDS.toMillis(casProperties.getAuthn().getOauth().getRefreshToken().getTimeToKillInSeconds()) ); } 	0	0	0	0	0	1
@SafeVarargs public static <T,X extends Throwable> Try<T,X> withCatch(CheckedSupplier<T,X> cf, Class<? extends X>...classes){ try{ return Success.of(cf.get()); }catch(Throwable t){ if(classes.length==0) return Failure.of((X)t); val error = Stream.of(classes).filter(c -> t.getClass().isAssignableFrom(c)).findFirst(); if(error.isPresent()) return Failure.of((X)t); else throw new RuntimeException(t); }  } 	0	0	0	1	0	0
@Override public List<Card> getCards() { return CardDeckController.getAllCards(); } 	0	0	0	0	0	1
@Override public boolean removeDeck(String token, String name) { Player player = loginProvider.getPlayerFromToken(token); return CardDeckController.removeDeck(player.getId(), name); } 	0	0	0	0	0	1
"public void getKingdomFromAPI() { apiService.getKingdom(preferences.getString(USER_ACCESS_TOKEN, """")).enqueue(new Callback<Kingdom>() { @Override public void onResponse(Call<Kingdom> call, Response<Kingdom> response) { if (response.code() == 400) { ((MainActivity) getActivity()).logout(); return; } buildings = response.body().getBuildings(); troops = response.body().getTroops(); resources = response.body().getResources(); if (loadingViewListener != null) { loadingViewListener.loadingFinished(); } }  @Override public void onFailure(Call<Kingdom> call, Throwable t) { } }); } "	0	0	0	1	0	0
"String doPullImages(ComponentInstanceId myId) throws DockerException { // first step: try to find matching image for configured component String result = searchImageInLocalCache(); if(result == null){ // second step: try to find matching image for prepared component // in case a custom docker registry is configured result = getImageFromPrivateRepository(); if(result != null) { // third step: fall back to the operating system // result = getImageFromDefaultLocation(); } } if(result != null) return result;  throw new DockerException(""cannot pull image: "" + myId); } "	1	1	1	1	0	0
"public void getFollowStatus(final FollowStatusCallBack callback) { APIManager.getInstance().followsMe(user, new APICallback<Boolean>() { @Override public void onSuccess(Boolean responseBody) { callback.onResponseReceived(true); }  @Override public void onFailure(String message) { callback.onResponseReceived(false); Log.d(LOG_TAG, ""Failed to get following status""); } }); } "	0	0	0	0	0	1
"@Transactional public TGreenLeavesWeigh saveSummary(TGreenLeavesWeigh greenLeavesWeighRequest) { //assume that the green leave weigh does not have weigh details System.out.println(""++++++++++++++++++++"" + greenLeavesWeighRequest.getIndexNo()); TGreenLeavesWeigh greenLeavesWeigh; if (greenLeavesWeighRequest.getIndexNo() != null) { greenLeavesWeigh = greenLeavesWeighRepository.getOne(greenLeavesWeighRequest.getIndexNo()); greenLeavesWeigh.setBranch(greenLeavesWeighRequest.getBranch()); greenLeavesWeigh.setDate(greenLeavesWeighRequest.getDate()); greenLeavesWeigh.setRouteOfficer(greenLeavesWeighRequest.getRouteOfficer()); greenLeavesWeigh.setRouteHelper(greenLeavesWeighRequest.getRouteHelper()); greenLeavesWeigh.setVehicle(greenLeavesWeighRequest.getVehicle());  greenLeavesWeigh.setNormalTareCalculated(greenLeavesWeighRequest.getNormalTareCalculated()); greenLeavesWeigh.setNormalGeneralDeductionPercent(greenLeavesWeighRequest.getNormalGeneralDeductionPercent()); greenLeavesWeigh.setNormalTareDeduction(greenLeavesWeighRequest.getNormalTareDeduction()); greenLeavesWeigh.setNormalWaterDeduction(greenLeavesWeighRequest.getNormalWaterDeduction()); greenLeavesWeigh.setNormalCoarseLeaves(greenLeavesWeighRequest.getNormalCoarseLeaves()); greenLeavesWeigh.setNormalBoiledLeaves(greenLeavesWeighRequest.getNormalBoiledLeaves());  greenLeavesWeigh.setSuperTareCalculated(greenLeavesWeighRequest.getSuperTareCalculated()); greenLeavesWeigh.setSuperGeneralDeductionPercent(greenLeavesWeighRequest.getSuperGeneralDeductionPercent()); greenLeavesWeigh.setSuperTareDeduction(greenLeavesWeighRequest.getSuperTareDeduction()); greenLeavesWeigh.setSuperWaterDeduction(greenLeavesWeighRequest.getSuperWaterDeduction()); greenLeavesWeigh.setSuperCoarseLeaves(greenLeavesWeighRequest.getSuperCoarseLeaves()); greenLeavesWeigh.setSuperBoiledLeaves(greenLeavesWeighRequest.getSuperBoiledLeaves());  } else {  //generate new number Integer maxNumber = greenLeavesWeighRepository.getMaximumNumberByBranch(greenLeavesWeighRequest.getBranch()); System.out.println(maxNumber); System.out.println(greenLeavesWeighRequest.getBranch()); if (maxNumber == null) { maxNumber = 0; } greenLeavesWeighRequest.setNumber(maxNumber + 1); System.out.println(greenLeavesWeighRequest.getNumber()); }  greenLeavesWeighRequest.setStatus(PENDING_STATUS); greenLeavesWeigh = validateWeighSummary(greenLeavesWeighRequest);  if (""SUPPLIER"".equals(greenLeavesWeigh.getType())) { greenLeavesWeigh.setRoute(null); }  //TODO:transaction return greenLeavesWeighRepository.save(greenLeavesWeigh); } "	0	0	0	1	0	0
@Override protected List executeQuery(final PersistentEntity entity, final Junction criteria) { final AbstractMongoSession mongoSession = this.mongoSession; com.mongodb.client.MongoCollection<Document> collection = mongoSession.getCollection(entity);  final List<Projection> projectionList = projections().getProjectionList(); if (uniqueResult && projectionList.isEmpty()) { if(isCodecPersister) { collection = collection .withDocumentClass(entity.getJavaClass()); } final Object dbObject; if (criteria.isEmpty()) { dbObject = collection .find(createQueryObject(entity)) .limit(1) .first(); } else { dbObject = collection.find(getMongoQuery()) .limit(1) .first(); } if(dbObject == null) { return wrapObjectResultInList(dbObject); } if(isCodecPersister) { if(!mongoSession.contains(dbObject)) { final EntityAccess entityAccess = mongoSession.createEntityAccess(entity, dbObject); mongoEntityPersister.firePostLoadEvent(entity, entityAccess); mongoSession.cacheInstance(dbObject.getClass(), (Serializable) entityAccess.getIdentifier(), dbObject); } return wrapObjectResultInList(dbObject); } else { return wrapObjectResultInList(createObjectFromDBObject((Document)dbObject)); } }  MongoCursor<Document> cursor; Document query = createQueryObject(entity);   if (projectionList.isEmpty()) { if(isCodecPersister) { collection = collection .withDocumentClass(entity.getJavaClass()) .withCodecRegistry( mongoSession.getDatastore().getCodecRegistry()); } cursor = executeQuery(entity, criteria, collection, query); return new MongoResultList(cursor, offset, mongoEntityPersister); }  populateMongoQuery((AbstractMongoSession) session, query, criteria, entity); AggregatePipeline aggregatePipeline = buildAggregatePipeline(entity, query, projectionList); List<Document> aggregationPipeline = aggregatePipeline.getAggregationPipeline(); boolean singleResult = aggregatePipeline.isSingleResult(); List<ProjectedProperty> projectedKeys = aggregatePipeline.getProjectedKeys(); List projectedResults = new ArrayList();   AggregateIterable<Document> aggregatedResults = collection.aggregate(aggregationPipeline); final MongoCursor<Document> aggregateCursor = aggregatedResults.iterator();  if (singleResult && aggregateCursor.hasNext()) { Document dbo = aggregateCursor.next(); for (ProjectedProperty projectedProperty : projectedKeys) { Object value = dbo.get(projectedProperty.projectionKey); PersistentProperty property = projectedProperty.property; if (value != null) { if (property instanceof ToOne) { projectedResults.add(session.retrieve(property.getType(), (Serializable) value)); } else { projectedResults.add(value); } } else { if (projectedProperty.projection instanceof CountProjection) { projectedResults.add(0); } } } } else { return new AggregatedResultList(getSession(), aggregateCursor, projectedKeys); }  return projectedResults;   } 	0	0	0	0	0	1
"public static Bucket getExistingBucket(String bucketName) throws IOException, GeneralSecurityException { Storage client = getService(); Storage.Buckets.Get bucketRequest = client.buckets().get(BUCKET_NAME + bucketName); // Fetch the full set of the bucket's properties (e.g. include the ACLs in the response) bucketRequest.setProjection(""full""); try { logger.log(Level.INFO, ""##-- Buscará bucket""); return bucketRequest.execute(); } catch (Exception e) { return null; } } "	0	0	0	1	0	0
@Override public void setParameter(String pName, double pValue) { if (PARAM_R1.equalsIgnoreCase(pName)) r1 = limitVal(pValue, EPSILON, Double.MAX_VALUE); else if (PARAM_D1.equalsIgnoreCase(pName)) d1 = limitVal(pValue, 0.0, Double.MAX_VALUE); else if (PARAM_R2.equalsIgnoreCase(pName)) r2 = limitVal(pValue, EPSILON, Double.MAX_VALUE); else if (PARAM_D2.equalsIgnoreCase(pName)) d2 = limitVal(0.0, Double.MAX_VALUE, pValue); else throw new IllegalArgumentException(pName); } 	1	1	1	1	0	0
"@Override public boolean onOptionsItemSelected(MenuItem item) { try { int id = item.getItemId();  switch (id){ case MENU_HELP_ACTION: PresentationDialog pd = new PresentationDialog.Builder(getActivity(), appSession) .setSubTitle(R.string.cht_chat_identity_subtitle) .setBody(R.string.cht_chat_identity_body) .setTemplateType(PresentationDialog.TemplateType.TYPE_PRESENTATION_WITHOUT_IDENTITIES) .setIconRes(R.drawable.chat_subapp) .setBannerRes(R.drawable.cht_banner) .setTextFooter(R.string.cht_chat_footer).build(); pd.show(); break;  case MENU_ADD_ACTION: //TODO: AÑADIR!!!   break; }  } catch (Exception e) { errorManager.reportUnexpectedUIException(UISource.ACTIVITY, UnexpectedUIExceptionSeverity.UNSTABLE, FermatException.wrapException(e)); makeText(getActivity(), ""Oooops! recovering from system error"", LENGTH_LONG).show(); } return super.onOptionsItemSelected(item); } "	0	0	0	0	0	1
public List<Vedio> getVideos() throws UnsupportedEncodingException { List<Vedio> dbResult = vedioMapper.findAll();  for (Vedio vedio : dbResult) { vedio.setQiniuPath(QINIU_PREFIX + URLEncoder.encode(vedio.getQiniuPath(), StringHelper.UTF_8)); } return dbResult;  } 	0	0	0	0	0	1
public String getMembers() { return members; } 	0	0	0	0	0	1
"@SuppressFBWarnings({ ""IS2_INCONSISTENT_SYNC"", ""DC_DOUBLECHECK"" }) public KubernetesClient connect() throws UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException, IOException, CertificateEncodingException {  LOGGER.log(Level.FINE, ""Building connection to Kubernetes {0} URL {1}"" + serverUrl, new String[] { getDisplayName(), serverUrl }); client = new KubernetesFactoryAdapter(serverUrl, namespace, serverCertificate, credentialsId, skipTlsVerify, connectTimeout, readTimeout).createClient(); LOGGER.log(Level.FINE, ""Connected to Kubernetes {0} URL {1}"" + serverUrl, new String[] { getDisplayName(), serverUrl }); return client; } "	0	0	0	0	0	1
"@Override public JsonObject toJson() throws FormatQueryException { JsonObject histogramObject = new JsonObject(); histogramObject.addProperty(""field"", fieldName); histogramObject.addProperty(""interval"", interval); if (null != minDocCount) { histogramObject.addProperty(""min_doc_count"", minDocCount); } if (null != order) { histogramObject.add(""order"", order.toJson()); } if (null != extendedBoundMin || null != extendedBoundMax) { JsonObject extendedBounds = new JsonObject(); if (null != extendedBoundMin) { extendedBounds.addProperty(""min"", extendedBoundMin); } if (null != extendedBoundMin) { extendedBounds.addProperty(""max"", extendedBoundMax); } histogramObject.add(""extended_bounds"", extendedBounds); } return warpAggs(histogramObject); } "	1	0	1	1	1	0
"public void update(Context c, CommandsInterface ci, IccCardStatus ics) { synchronized (mLock) { CardState oldState = mCardState; mCardState = ics.mCardState; mUniversalPinState = ics.mUniversalPinState; mGsmUmtsSubscriptionAppIndex = ics.mGsmUmtsSubscriptionAppIndex; mCdmaSubscriptionAppIndex = ics.mCdmaSubscriptionAppIndex; mImsSubscriptionAppIndex = ics.mImsSubscriptionAppIndex; mContext = c; mCi = ci;  //update applications if (DBG) log(ics.mApplications.length + "" applications""); for ( int i = 0; i < mUiccApplications.length; i++) { if (mUiccApplications[i] == null) { //Create newly added Applications if (i < ics.mApplications.length) { mUiccApplications[i] = new UiccCardApplication(this, ics.mApplications[i], mContext, mCi); } } else if (i >= ics.mApplications.length) { //Delete removed applications mUiccApplications[i].dispose(); mUiccApplications[i] = null; } else { //Update the rest mUiccApplications[i].update(ics.mApplications[i], mContext, mCi); } }  createAndUpdateCatServiceLocked();  // Reload the carrier privilege rules if necessary. log(""Before privilege rules: "" + mCarrierPrivilegeRules + "" : "" + mCardState); if (mCarrierPrivilegeRules == null && mCardState == CardState.CARDSTATE_PRESENT) { mCarrierPrivilegeRules = new UiccCarrierPrivilegeRules(this, mHandler.obtainMessage(EVENT_CARRIER_PRIVILIGES_LOADED)); } else if (mCarrierPrivilegeRules != null && mCardState != CardState.CARDSTATE_PRESENT) { mCarrierPrivilegeRules = null; }  sanitizeApplicationIndexesLocked();  RadioState radioState = mCi.getRadioState(); if (DBG) log(""update: radioState="" + radioState + "" mLastRadioState="" + mLastRadioState); // No notifications while radio is off or we just powering up if (radioState == RadioState.RADIO_ON && mLastRadioState == RadioState.RADIO_ON) { if (oldState != CardState.CARDSTATE_ABSENT && mCardState == CardState.CARDSTATE_ABSENT) { if (DBG) log(""update: notify card removed""); mAbsentRegistrants.notifyRegistrants(); mHandler.sendMessage(mHandler.obtainMessage(EVENT_CARD_REMOVED, null)); } else if (oldState == CardState.CARDSTATE_ABSENT && mCardState != CardState.CARDSTATE_ABSENT) { if (DBG) log(""update: notify card added""); mHandler.sendMessage(mHandler.obtainMessage(EVENT_CARD_ADDED, null)); } } mLastRadioState = radioState; } } "	0	0	0	0	0	1
@Override public Xtruct read(Protocol protocol) throws ThriftException, IOException { return read(protocol, new Builder()); } 	0	0	0	0	0	1
"public List<FileInfo> getFileInfoList(AlluxioURI path) throws AccessControlException, FileDoesNotExistException, InvalidPathException { MasterContext.getMasterSource().incGetFileInfoOps(1); synchronized (mInodeTree) { mPermissionChecker.checkPermission(FileSystemAction.READ, path);  LoadMetadataOptions loadMetadataOptions = LoadMetadataOptions.defaults().setRecursive(true); Inode<?> inode = null; if (mInodeTree.inodePathExists(path)) { inode = mInodeTree.getInodeByPath(path); if (inode.isDirectory() && ((InodeDirectory) inode).isDirectChildrenLoaded()) { mPermissionChecker.checkPermission(FileSystemAction.EXECUTE, path); loadMetadataOptions.setLoadDirectChildren(true); } } try { loadMetadata(path, loadMetadataOptions); } catch (Exception e) { LOG.error(""Failed to load metadata at {}."", path, e); }  if (inode != null) { inode = mInodeTree.getInodeByPath(path); }  List<FileInfo> ret = new ArrayList<>(); if (inode.isDirectory()) { for (Inode<?> child : ((InodeDirectory) inode).getChildren()) { ret.add(getFileInfoInternal(child)); } } else { ret.add(getFileInfoInternal(inode)); } MasterContext.getMasterSource().incFileInfosGot(ret.size()); return ret; } } "	1	0	1	1	1	0
public static boolean[] getIsUseInvertedIndex(DataField[] fields) { List<Boolean> isUseInvertedIndexList = new ArrayList<Boolean>(); for (DataField field : fields) { if (field.getColumn().isUseInvertedIndnex() && field.getColumn().isDimesion()) { isUseInvertedIndexList.add(true); } else if(field.getColumn().isDimesion()){ isUseInvertedIndexList.add(false); } } return ArrayUtils .toPrimitive(isUseInvertedIndexList.toArray(new Boolean[isUseInvertedIndexList.size()])); } 	0	1	1	1	1	0
@Override public void addAll(Iterable<HasContainer> has) { Iterables.addAll(hasContainers, has); } 	0	0	0	0	0	1
public Iterator<T> iterator() { return new PagedIterator(initialPage); } 	0	0	0	0	0	1
@Test public void testRemoveNature_nonExistingNature() throws CoreException { IProject project = projectCreator.getProject(); NatureUtils.removeNature(project, JavaCore.NATURE_ID);  NatureUtils.removeNature(project, JavaCore.NATURE_ID); assertArrayEquals(new String[]{FacetedProjectNature.NATURE_ID}, project.getDescription().getNatureIds()); } 	0	0	0	0	0	1
"public void DHTRun(boolean useSG, L loc) throws Exception { StatusRepo.ON_MEMORY = true; NodeMonitor.PING_TIMEOUT = 100 * 1000; GTransConfigValues.rpcTimeout = 100 * 1000; Peer[] peers = new Peer[numPeer]; @SuppressWarnings(""unchecked"") Overlay<LowerUpper, HashId>[] ovs = new Overlay[numPeer]; int seedPeerNo = 0; long stime, etime;  printf(""** Simulation start **%n""); printf("" - num of peers: %d%n"", numPeer); printf("" - seed: %d%n"", seedPeerNo);  printf(""%n** new peerId and overlay%n""); stime = System.currentTimeMillis(); for (int i = 0; i < numPeer; i++) { peers[i] = Peer.getInstance(new PeerId(""p"" + i)); try { PeerLocator l = null; switch(loc) { case NETTY: if (i % 10 == 1 || i % 10 == 2 || i % 10 == 3 || i % 10 == 4) { l = new NettyNATLocator(new InetSocketAddress(""localhost"", 20000 + i)); } else { l = new NettyLocator(new InetSocketAddress(""localhost"", 20000 + i)); } break; case TCP: l = new TcpLocator(new InetSocketAddress(""localhost"", 20000 + i)); break; case UDP: l = new UdpLocator(new InetSocketAddress(""localhost"", 20000 + i)); case EMU: l = new EmuLocator(10000 + i); } ovs[i] = genOv(useSG, peers[i], l); //                Id id = new Id(new byte[]{(byte)(i * 256 / numPeer)}); //                dhts[i] = new DHT(new ServiceId(""dht""), ovs[i], id, true); dhts[i] = new DHT(ovs[i], true); } catch (IdConflictException e) { logger.debug(e.toString()); } printf(""%s "", peers[i].getPeerId()); if ((i+1) % 20 == 0) printf(""%n""); } etime = System.currentTimeMillis(); printf(""%n""); printf(""=> took %d msec%n"", (etime-stime));  printf(""%n** join%n""); stime = System.currentTimeMillis(); for (int i = 0; i < numPeer; i++) { seedPeerNo = (i % 10) == 0 ? 0 : (i / 10) * 10; Endpoint seed = ovs[seedPeerNo].getBaseTransport().getEndpoint(); ovs[i].join(seed); printf(""%s "", ovs[i].getPeerId()); if ((i+1) % 20 == 0) printf(""%n""); sleep(10); } etime = System.currentTimeMillis(); printf(""%n""); printf(""=> took %d msec%n"", (etime-stime));  DHT dht = dhts[0]; //        dht.put(""hoge"" + 0, ""abc""); printf(""sleeping 10 seconds...""); sleep(10000); //        printDHT();  int n = 100; printf(""%n** put (%d)%n"", n); stime = System.currentTimeMillis(); for (int i = 0; i < n; i++) { dht.put(""hoge"" + i, ""hage"" + i); } etime = System.currentTimeMillis(); printf(""=> took %d msec%n"", (etime-stime));  printf(""%n** get (%d)%n"", n); stime = System.currentTimeMillis(); for (int i = 0; i < numPeer; i++) { if (loc == L.NETTY) { ((NettyChannelTransport)ovs[i].getBaseTransport()).forwardCount = 0; } } dht = dhts[29]; for (int i = 0; i < n; i++) { String get = (String) dht.get(""hoge"" + i); assertTrue(""GET failed"", (get != null && get.equals(""hage"" + i))); } for (int i = 0; i < numPeer; i++) { /*System.out.println(""Rights""); Comparable key = ovs[i].getKeys().toArray(new Comparable[0])[0]; for (int j = 0; j < ((Suzaku)ovs[i]).getHeight(key); j++) { for (Link l : ((Suzaku)ovs[i]).getRights(key, j)) { System.out.println(ovs[i].getEndpoint() + ""[""+ j + ""] : "" + l.addr); } } System.out.println(""Lefts""); for (int j = 0; j < ((Suzaku)ovs[i]).getHeight(key); j++) { for (Link l : ((Suzaku)ovs[i]).getLefts(key, j)) { System.out.println(ovs[i].getEndpoint() + ""[""+ j + ""] : "" + l.addr); } } */ if (loc == L.NETTY) { if (!(((NettyChannelTransport)ovs[i].getBaseTransport()).getEndpoint() instanceof NettyNATLocator)) { System.out.println(ovs[i].getEndpoint() + ""\t"" +((NettyChannelTransport)ovs[i].getBaseTransport()).forwardCount);// + "","" + ((NettyChannelTransport)ovs[i].getBaseTransport()).nMgr); } } } etime = System.currentTimeMillis(); printf(""=> took %d msec%n"", (etime-stime));  //        printDHT();  sleep(200); printf(""%n** fin%n""); for (int i = 1; i < numPeer; i++) { dhts[i].fin(); ovs[i].leave(); } dhts[0].fin(); ovs[0].leave(); sleep(200); for (int i = 0; i < numPeer; i++) { peers[i].fin(); } printf(""** end **%n"");  } "	1	0	1	1	0	0
"public boolean updateRecord(RID rid, Tuple newRecord) throws ChainException { String function_name = ""updateRecord"";  Log.log( LogLevel.MOST, ""%s: updating RID pageno [%d] slotno [%d]\n"", function_name, rid.pageno.pid, rid.slotno );  boolean success = false; try { directory.updateRecord(rid, newRecord); success = true; } catch( InvalidUpdateException e ) { throw(new InvalidUpdateException(e, ""Error updating record."" )); }  return success; } "	0	0	0	0	0	1
"public String getWarningMsg() { String result = ""Validation of graph "" + this.graph.getName() + "" raised the following warnings:\n""; for (final String msg : this.warningMsgs.keySet()) { result += ""- "" + msg; } return result; } "	1	1	0	1	1	0
"public Map<String, String> completeApplicationRegistration(String userId, String applicationName, String tokenType, String tokenScope, String groupingId) throws APIManagementException {  Application application = apiMgtDAO.getApplicationByName(applicationName, null, groupingId); String status = apiMgtDAO.getRegistrationApprovalState(application.getId(), tokenType); Map<String, String> keyDetails = null; if(!application.getSubscriber().getName().equals(userId)){ userId = application.getSubscriber().getName(); } String workflowReference = apiMgtDAO.getWorkflowReference(applicationName, userId); if (workflowReference != null) { WorkflowDTO workflowDTO = null;  // Creating workflowDTO for the correct key type. if (APIConstants.API_KEY_TYPE_PRODUCTION.equals(tokenType)) { workflowDTO = WorkflowExecutorFactory.getInstance().createWorkflowDTO(WorkflowConstants .WF_TYPE_AM_APPLICATION_REGISTRATION_PRODUCTION); } else if (APIConstants.API_KEY_TYPE_SANDBOX.equals(tokenType)) { workflowDTO = WorkflowExecutorFactory.getInstance().createWorkflowDTO(WorkflowConstants .WF_TYPE_AM_APPLICATION_REGISTRATION_SANDBOX); } if (workflowDTO != null) {  // Set the workflow reference in the workflow dto and the populate method will fill in other details // using the persisted request. ApplicationRegistrationWorkflowDTO registrationWorkflowDTO = (ApplicationRegistrationWorkflowDTO) workflowDTO; registrationWorkflowDTO.setExternalWorkflowReference(workflowReference);  if (APIConstants.AppRegistrationStatus.REGISTRATION_APPROVED.equals(status)) { apiMgtDAO.populateAppRegistrationWorkflowDTO(registrationWorkflowDTO); try { AbstractApplicationRegistrationWorkflowExecutor.dogenerateKeysForApplication(registrationWorkflowDTO); AccessTokenInfo tokenInfo = registrationWorkflowDTO.getAccessTokenInfo(); OAuthApplicationInfo oauthApp = registrationWorkflowDTO.getApplicationInfo(); keyDetails = new HashMap<String, String>();  if(tokenInfo != null){ keyDetails.put(""accessToken"", tokenInfo.getAccessToken()); keyDetails.put(""validityTime"", Long.toString(tokenInfo.getValidityPeriod())); keyDetails.put(""tokenDetails"",tokenInfo.getJSONString()); }  keyDetails.put(""consumerKey"", oauthApp.getClientId()); keyDetails.put(""consumerSecret"", oauthApp.getClientSecret()); keyDetails.put(""accessallowdomains"", registrationWorkflowDTO.getDomainList()); keyDetails.put(""appDetails"", oauthApp.getJsonString()); } catch (APIManagementException e) { APIUtil.handleException(""Error occurred while Creating Keys."", e); } }  } } return keyDetails; } "	1	0	1	0	0	0
public double getJaccardDistance(List<Float> first, List<Float> second) { return 0.0; } 	0	0	0	0	0	1
@Override public <T> T readEntity(final Class<T> entityType) throws ProcessingException, IllegalStateException { return scope.runInScope(scopeInstance, new Producer<T>() { @Override public T call() { return context.readEntity(entityType); } }); } 	0	0	0	0	0	1
@Override public List<Address> maintaniAddress(AddressDTO addressDTO) { List<Address> addressList = getAddressByAddressId(addressDTO.getAddressID()); Address address= new Address(); if(CollectionUtils.isNotEmpty(addressList)) { address =  addressList.get(0); } populateAddress(addressDTO, address); getHibernateTemplate().saveOrUpdate(address); return getAddress(address.getAddressID()); } 	1	1	1	0	1	0
private static List<StyledText> computeRectangleLines(String text, AttributeSet style, Rectangle2D rect, Graphics2D canvas) { // make font smaller if lots of words canvas.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON); Font font = Styles.fontOf(style); if (rect.getWidth() * rect.getHeight() < (font.getSize() * font.getSize() / 1.5) * text.length() || rect.getWidth() < font.getSize() * 5) { font = font.deriveFont(font.getSize2D()-2); } canvas.setFont(font);  List<String> lines = computeLineBreaks(text, font, rect.getWidth(), rect.getHeight()); Anchor textAnchor = Styles.anchorOf(style, Anchor.CENTER); float sz = canvas.getFont().getSize2D(); double y0 = getInitialY(textAnchor, rect, sz, lines.size());  List<StyledText> res = Lists.newArrayList(); AttributeSet plainStyle = style.copy(); plainStyle.put(Styles.FONT_SIZE, font.getSize2D()); plainStyle.remove(Styles.ALIGN_BASELINE); plainStyle.remove(Styles.TEXT_ANCHOR); plainStyle.remove(Styles.OFFSET); for (String s : lines) { double wid = canvas.getFontMetrics().getStringBounds(s, canvas).getWidth(); switch (textAnchor) { case WEST: // fall through case SOUTHWEST: // fall through case NORTHWEST: res.add(new StyledText(new AnchoredText(rect.getX(), y0, s), plainStyle)); break; case EAST: // fall through case SOUTHEAST: // fall through case NORTHEAST: res.add(new StyledText(new AnchoredText(rect.getMaxX()-wid, y0, s), plainStyle)); break; default: // x-centered res.add(new StyledText(new AnchoredText(rect.getCenterX()-wid/2.0, y0, s), plainStyle)); break; } y0 += sz+2; }  return res; } 	0	0	0	0	0	1
"@Override public Object getValueAt(int rowIndex, int columnIndex) { Usuario user = getRow(rowIndex); switch(columnIndex){ case USER_ID:      return user.getUserId(); case USER_NAME:    return user.getUserName(); case ACCESS_LEVEL: return user.getAccessLevel(); case PASS:         return user.getPass(); default: throw new IndexOutOfBoundsException( ""Exceeded Max Column Count: "" + columnIndex +  "" out of "" + COLUMN_COUNT + "".""); } } "	0	0	0	0	0	1
@Before public void setup() throws NoSuchMethodException { request = createMock(HttpServletRequest.class); session = createMock(HttpSession.class); authenticatedUserService = createMock(AuthenticatedUserService.class); logoutService = createMock(LogoutService.class);  context = createMock(ContainerRequestContext.class); capturedSecurityContext = newCapture(); capturedResponse = newCapture();  uriInfo = createMock(UriInfo.class); filter = new SecurityFilterMock(uriInfo, request); } 	1	1	1	0	1	0
"private JerseyEurekaHttpClientFactory buildLegacy() { EurekaJerseyClientBuilder clientBuilder = new EurekaJerseyClientBuilder() .withClientName(clientName) .withUserAgent(""Java-EurekaClient"") .withConnectionTimeout(connectionTimeout) .withReadTimeout(readTimeout) .withMaxConnectionsPerHost(maxConnectionsPerHost) .withMaxTotalConnections(maxTotalConnections) .withConnectionIdleTimeout(connectionIdleTimeout) .withEncoderWrapper(encoderWrapper) .withDecoderWrapper(decoderWrapper);  EurekaJerseyClient jerseyClient = clientBuilder.build(); ApacheHttpClient4 discoveryApacheClient = jerseyClient.getClient(); addFilters(discoveryApacheClient);  return new JerseyEurekaHttpClientFactory(jerseyClient, allowRedirect); } "	0	0	0	0	0	1
private void refreshStats() { mAppListGroup.removeAll(); mAppListGroup.setOrderingAsAdded(false); mHistPref = new BatteryHistoryPreference(getActivity(), mStatsHelper.getStats(), mStatsHelper.getBatteryBroadcast()); mHistPref.setOrder(-1); mAppListGroup.addPreference(mHistPref); boolean addedSome = false;  PowerProfile powerProfile = mStatsHelper.getPowerProfile(); final double averagePower = powerProfile.getAveragePower(PowerProfile.POWER_SCREEN_FULL); if (averagePower >= MIN_AVERAGE_POWER_THRESHOLD_MILLI_AMP) { final List<UserHandle> profiles = mUm.getUserProfiles();  mStatsHelper.refreshStats(BatteryStats.STATS_SINCE_CHARGED, profiles);  final List<BatterySipper> usageList = mStatsHelper.getUsageList();  final int dischargeAmount = mStatsHelper.getStats().getDischargeAmount(mStatsType); final int numSippers = usageList.size(); for (int i = 0; i < numSippers; i++) { final BatterySipper sipper = usageList.get(i); if ((sipper.value * SECONDS_IN_HOUR) < MIN_POWER_THRESHOLD_MILLI_AMP) { continue; } final double percentOfTotal = ((sipper.value / mStatsHelper.getTotalPower()) * dischargeAmount); if (((int) (percentOfTotal + .5)) < 1) { continue; } if (sipper.drainType == BatterySipper.DrainType.OVERCOUNTED) { // Don't show over-counted unless it is at least 2/3 the size of // the largest real entry, and its percent of total is more significant if (sipper.value < ((mStatsHelper.getMaxRealPower()*2)/3)) { continue; } if (percentOfTotal < 10) { continue; } } if (sipper.drainType == BatterySipper.DrainType.UNACCOUNTED) { // Don't show over-counted unless it is at least 1/2 the size of // the largest real entry, and its percent of total is more significant if (sipper.value < (mStatsHelper.getMaxRealPower()/2)) { continue; } if (percentOfTotal < 5) { continue; } } final UserHandle userHandle = new UserHandle(UserHandle.getUserId(sipper.getUid())); final BatteryEntry entry = new BatteryEntry(getActivity(), mHandler, mUm, sipper); final Drawable badgedIcon = mUm.getBadgedDrawableForUser(entry.getIcon(), userHandle); final CharSequence contentDescription = mUm.getBadgedLabelForUser(entry.getLabel(), userHandle); final PowerGaugePreference pref = new PowerGaugePreference(getActivity(), badgedIcon, contentDescription, entry);  final double percentOfMax = (sipper.value * 100) / mStatsHelper.getMaxPower(); sipper.percent = percentOfTotal; pref.setTitle(entry.getLabel()); pref.setOrder(i + 1); pref.setPercent(percentOfMax, percentOfTotal); if (sipper.uidObj != null) { pref.setKey(Integer.toString(sipper.uidObj.getUid())); } addedSome = true; mAppListGroup.addPreference(pref); if (mAppListGroup.getPreferenceCount() > (MAX_ITEMS_TO_LIST + 1)) { break; } } } if (!addedSome) { addNotAvailableMessage(); }  BatteryEntry.startRequestQueue(); } 	0	0	0	0	0	1
"private IStatus handledCancelRequest(String message) { TacitFormComposite.updateStatusMessage(getViewSite(), message, IStatus.INFO, form); ConsoleView.printlInConsoleln(""Frontier Journal Crawler cancelled.""); return Status.CANCEL_STATUS; } "	0	0	0	0	0	1
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_workshops); workshopsRv = (RecyclerView) findViewById(R.id.workshops_view); workshopsAdapter = new WorkshopsAdapter(Workshops.this); workshopsRv.setAdapter(workshopsAdapter); bar=(ProgressBar)findViewById(R.id.progress); errorView= (TextView) findViewById(R.id.errorView); if(new Connection(this).isInternet()){ retrofit(); } else { errorView.setVisibility(View.VISIBLE); errorView.setText(""Please Check Your Internet Connection""); bar.setVisibility(View.GONE); }  workshopstb = (Toolbar) findViewById(R.id.workshops_toolbar); workshopstb.setTitle(""Special Event""); setSupportActionBar(workshopstb); getSupportActionBar().setDisplayHomeAsUpEnabled(true);   } "	0	0	0	1	0	0
"protected void setHeadersCookies(HttpFilterRequest req, UrlHolder holder, HttpRequestBase method,String finalURL) throws Exception { Iterator<String> names; names = req.getHeaderNames(); String cookieName = null; URL url = new URL(finalURL);  while (names.hasNext()) { String name = names.next(); if (name.equalsIgnoreCase(""Cookie"")) { cookieName = name; continue; }  if (logger.isDebugEnabled()) { logger.debug(""Header : "" + name); }   Attribute attrib = req.getHeader(name); Iterator<String> attrVals = attrib.getValues().iterator(); while (attrVals.hasNext()) { String val = attrVals.next();  if (name.equalsIgnoreCase(""Content-Type"")) { continue; } else if (name.equalsIgnoreCase(""If-Range"")) { continue; } else if (name.equalsIgnoreCase(""Range"")) { continue; } else if (name.equalsIgnoreCase(""If-None-Match"")) { continue; }  if (name.equalsIgnoreCase(""HOST"")) {  if (holder.isOverrideHost()) { if (logger.isDebugEnabled()) { logger.debug(""Final URL : '"" + finalURL + ""'""); }  val = url.getHost(); if (url.getPort() != -1) { StringBuffer b = new StringBuffer(); b.append(val).append("":"").append(url.getPort()); val = b.toString(); } } } else  if (name.equalsIgnoreCase(""Referer"")) {  if (holder.isOverrideReferer()) { URL origRef = new URL(val); StringBuffer newRef = new StringBuffer();  newRef.append(url.getProtocol()).append(""://"").append(url.getHost());  if (url.getPort() != -1) { newRef.append(':').append(url.getPort()); }  newRef.append(origRef.getPath());  if (origRef.getQuery() != null) { newRef.append('?').append(origRef.getQuery()); }  if (logger.isDebugEnabled()) { logger.debug(""Final Ref : '"" + newRef.toString() + ""'""); }  val = newRef.toString();  }  }  if (this.addHeader(name)) { if (logger.isDebugEnabled()) { logger.debug(""Header Added - '"" + name + ""'='"" + val + ""'""); } method.addHeader(new BasicHeader(name,val)); } } }   HashMap<String,Attribute> fromResults = (HashMap<String,Attribute>) req.getAttribute(AzSys.AUTO_IDM_HTTP_HEADERS); if (fromResults != null) { names = fromResults.keySet().iterator();  while (names.hasNext()) { String name = names.next(); method.removeHeaders(name);  Attribute attrib = fromResults.get(name); Iterator<String> attrVals = attrib.getValues().iterator(); while (attrVals.hasNext()) { String val = attrVals.next(); if (logger.isDebugEnabled()) { logger.debug(""Header Added - '"" + name + ""'='"" + val + ""'""); } method.addHeader(new BasicHeader(name,val)); } } }  String sessionCookieName = """";  if (holder.getApp().getCookieConfig() != null) { sessionCookieName = holder.getApp().getCookieConfig().getSessionCookieName(); }  HashSet<String> toRemove = new HashSet<String>(); toRemove.add(sessionCookieName); toRemove.add(""autoIdmSessionCookieName""); toRemove.add(""autoIdmAppName""); toRemove.add(""JSESSIONID"");  names = req.getCookieNames().iterator(); StringBuffer cookieHeader = new StringBuffer(); boolean isFirst = true;  while (names.hasNext()) { String name = names.next();  if (toRemove.contains(name)) { continue; }  ArrayList<Cookie> cookies = req.getCookies(name);  Iterator<Cookie> itc = cookies.iterator(); while (itc.hasNext()) { Cookie cookie = itc.next(); String cookieFinalName; if (cookie.getName().startsWith(""JSESSIONID"")) { String host = cookie.getName().substring(cookie.getName().indexOf('-') + 1); host = host.replaceAll(""[|]"", "" ""); if (!holder.getApp().getName().equalsIgnoreCase(host)) { continue; }  cookieFinalName = ""JSESSIONID""; } else { cookieFinalName = cookie.getName(); }  String val = cookie.getValue(); if (logger.isDebugEnabled()) { logger.debug(""Cookie Added - '"" + name + ""'='"" + val + ""'""); }  cookieHeader.append(cookieFinalName).append('=').append(val).append(""; ""); } }  if (cookieHeader.length() > 0) { if (cookieName == null) { cookieName = ""Cookie""; }  method.addHeader(new BasicHeader(cookieName,cookieHeader.toString())); } } "	0	0	0	0	0	1
"public void generateReport(int reportId, int calendarField, String startDateString, String endDateString) { log.debug(""["" + className + ""] generateReport() : started""); DateHelper dateHelper = new DateHelper(); Date startMonthlyDate = dateHelper.getStartDateMonthy(dateHelper.getDate(startDateString)); Date startAnnuallyDate = dateHelper.getStartDateAnually(dateHelper.getDate(startDateString)); Date endMonthlyDate = dateHelper.getEndDateMonthy(dateHelper.getDate(endDateString)); Date endAnnuallyDate = dateHelper.getEndDateAnually(dateHelper.getDate(endDateString)); ReportDAO reportDAO = new ReportDAO();  switch (reportId) { case 1: if (calendarField == Calendar.MONTH) { setIntegerTable(reportDAO.getMonthlyEmployeeAttendanceReport(startMonthlyDate, endMonthlyDate)); } if (calendarField == Calendar.YEAR) { setIntegerTable(reportDAO.getAnnualEmployeeAttendanceReport(startAnnuallyDate, endAnnuallyDate)); } break; case 2: if (calendarField == Calendar.MONTH) { setDoubleTable(reportDAO.getMonthlyEmployeeSalaryReport(startMonthlyDate, endMonthlyDate)); } if (calendarField == Calendar.YEAR) { setDoubleTable(reportDAO.getAnnualEmployeeSalaryReport(startAnnuallyDate, endAnnuallyDate)); } break; case 3: if (calendarField == Calendar.MONTH) { setDoubleTable(reportDAO.getMonthlyEmployeeRevenueReport(startMonthlyDate, endMonthlyDate)); } if (calendarField == Calendar.YEAR) { setDoubleTable(reportDAO.getAnnualEmployeeRevenueReport(startAnnuallyDate, endAnnuallyDate)); } break; case 4: if (calendarField == Calendar.MONTH) { setDoubleTable(reportDAO.getMonthlyClientRevenueReport(startMonthlyDate, endMonthlyDate)); } if (calendarField == Calendar.YEAR) { setDoubleTable(reportDAO.getAnnualClientRevenueReport(startAnnuallyDate, endAnnuallyDate)); } break; case 5: if (calendarField == Calendar.MONTH) { setDoubleTable(reportDAO.getMonthlyVehicleRevenueReport(startMonthlyDate, endMonthlyDate)); } if (calendarField == Calendar.YEAR) { setDoubleTable(reportDAO.getAnnualVehicleRevenueReport(startAnnuallyDate, endAnnuallyDate)); } break; case 6: if (calendarField == Calendar.MONTH) { setDoubleTable(reportDAO.getMonthlyVehicleMilageReport(startMonthlyDate, endMonthlyDate)); } if (calendarField == Calendar.YEAR) { setDoubleTable(reportDAO.getAnnualVehicleRevenueReport(startAnnuallyDate, endAnnuallyDate)); } break; default: break; }  } "	0	0	0	0	0	1
private String decapitalizeLikeLombok(String name) { if (name == null || name.length() == 0) { return name; } char chars[] = name.toCharArray(); chars[0] = Character.toLowerCase(chars[0]); return new String(chars); } 	1	0	1	0	0	0
@Override protected void onPostExecute(YouTubeChannel youTubeChannel) { YouTubePlayerFragment.this.youTubeChannel = youTubeChannel;  if (youTubeChannel != null) { Picasso.with(getContext()) .load(youTubeChannel.getThumbnailNormalUrl()) .placeholder(R.drawable.channel_thumbnail_default) .into(videoDescChannelThumbnailImageView); } } 	0	0	0	0	0	1
public static boolean isInFuture(ZonedDateTime startOfDay, ZoneId zone) { return startOfDay.isAfter(ZonedDateTime.now(zone)); } 	0	0	0	0	0	1
"@Override public SCIMResponse listWithGET(UserManager userManager, String filter, int startIndex, int count, String sortBy, String sortOrder, String attributes, String excludeAttributes) {  FilterTreeManager filterTreeManager = null; Node rootNode = null; JSONEncoder encoder = null; try { //A value less than one shall be interpreted as 1 if (startIndex < 1) { startIndex = 1; } //If count is not set, server default should be taken if (count == 0) { count = CharonConfiguration.getInstance().getCountValueForPagination(); }  //check whether provided sortOrder is valid or not if (sortOrder != null) { if (!(sortOrder.equalsIgnoreCase(SCIMConstants.OperationalConstants.ASCENDING) || sortOrder.equalsIgnoreCase(SCIMConstants.OperationalConstants.DESCENDING))) { String error = "" Invalid sortOrder value is specified""; throw new BadRequestException(error, ResponseCodeConstants.INVALID_VALUE); } } //If a value for ""sortBy"" is provided and no ""sortOrder"" is specified, ""sortOrder"" SHALL default to // ascending. if (sortOrder == null && sortBy != null) { sortOrder = SCIMConstants.OperationalConstants.ASCENDING; }  // unless configured returns core-user schema or else returns extended user schema) SCIMResourceTypeSchema schema = SCIMResourceSchemaManager.getInstance().getUserResourceSchema(); if (filter != null) { filterTreeManager = new FilterTreeManager(filter, schema); rootNode = filterTreeManager.buildTree(); }  //obtain the json encoder encoder = getEncoder();  //get the URIs of required attributes which must be given a value Map<String, Boolean> requiredAttributes = ResourceManagerUtil.getOnlyRequiredAttributesURIs( (SCIMResourceTypeSchema) CopyUtil.deepCopy(schema), attributes, excludeAttributes);  List<Object> returnedGroups; int totalResults = 0; //API group should pass a UserManager storage to GroupResourceEndpoint. if (userManager != null) { List<Object> tempList = userManager.listGroupsWithGET(rootNode, startIndex, count, sortBy, sortOrder, requiredAttributes);  totalResults = (int) tempList.get(0); tempList.remove(0); returnedGroups = tempList;  //if groups not found, return an error in relevant format. if (returnedGroups.isEmpty()) { String error = ""Groups not found in the user store.""; //throw resource not found. throw new NotFoundException(error); }  for (Object group : returnedGroups) { //perform service provider side validation. ServerSideValidator.validateRetrievedSCIMObjectInList((Group) group, SCIMSchemaDefinitions .SCIM_GROUP_SCHEMA, attributes, excludeAttributes); } //create a listed resource object out of the returned groups list. ListedResource listedResource = createListedResource(returnedGroups, startIndex, totalResults); //convert the listed resource into specific format. String encodedListedResource = encoder.encodeSCIMObject(listedResource); //if there are any http headers to be added in the response header. Map<String, String> responseHeaders = new HashMap<String, String>(); responseHeaders.put(SCIMConstants.CONTENT_TYPE_HEADER, SCIMConstants.APPLICATION_JSON); return new SCIMResponse(ResponseCodeConstants.CODE_OK, encodedListedResource, responseHeaders);  } else { String error = ""Provided user manager handler is null.""; //log the error as well. //throw internal server error. throw new InternalErrorException(error); } } catch (CharonException e) { return encodeSCIMException(e); } catch (NotFoundException e) { return encodeSCIMException(e); } catch (InternalErrorException e) { return encodeSCIMException(e); } catch (BadRequestException e) { return encodeSCIMException(e); } catch (NotImplementedException e) { return encodeSCIMException(e); } catch (IOException e) { String error = ""Error in tokenization of the input filter""; CharonException charonException = new CharonException(error); return AbstractResourceManager.encodeSCIMException(charonException); } } "	0	0	0	0	0	1
@Override public List<StockOperation> getUserOperations(User user, PagingInfo paging) { return getUserOperations(user, null, null, null, paging); } 	1	0	1	1	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.log_in_activity); Button btnlogin = (Button) findViewById(R.id.btn_login); TextView btnsignup = (TextView) findViewById(R.id.sign_up); final EditText un = (EditText) findViewById(R.id.username); final EditText pwd = (EditText) findViewById(R.id.password);  assert btnsignup != null; btnsignup.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View view){ Intent intent = new Intent(view.getContext(), SignActivity.class); startActivityForResult(intent, 0); } });  logInCRUD = new LogInCRUD(this); logInCRUD = logInCRUD.open();  assert btnlogin != null; btnlogin.setOnClickListener(new View.OnClickListener(){ @Override public void onClick(View view){ String pas = pwd.getText().toString(); String uns = un.getText().toString(); String storedPassword = logInCRUD.getSinlgeEntry(uns);  // check if the Stored password matches with  Password entered by user if(pas.equals(storedPassword)) { Toast.makeText(LogInActivity.this, ""Congrats: Login Successfull"", Toast.LENGTH_LONG).show(); Intent intent = new Intent(view.getContext(), MainActivity.class); startActivityForResult(intent, 0); } else { Toast.makeText(LogInActivity.this, ""User Name or Password does not match""+storedPassword, Toast.LENGTH_LONG).show(); } } }); } "	0	0	0	1	0	0
"private void createPlayer() { Player player = connect(); if(player != null){ this.player = player; mainFrame.setTitle(frameTitle + "" - "" + player.getName()); player.setObserver(this); Dialogs.information(mainFrame, ""Successfully connected!""); } else if(this.player == null) Dialogs.error(mainFrame, ""You are not connected to a host. Please go to \n"" + ""\""Connecton\"" --> \""Connect To Server\"" and retry.""); } "	0	0	0	0	0	1
"@Test @WithMockUser(authorities = {""USER""}) public void testUserCantEditFaculty() throws Exception { Faculty editFaculty = new Faculty(""Edit Uni"", ""EU"",  null);  mockMvc .perform(put(buildUniApiUrl(1L)) .contentType(MediaType.APPLICATION_JSON) .content(TestUtils.asJson(editFaculty))) .andExpect(status().isUnauthorized()) .andExpect(jsonPath(""$.message"", is(""Access is denied""))); } "	0	0	0	0	0	1
"@Override public void handleMessage(Message msg) { if (mDbAdapter == null) { mDbAdapter = makeDbAdapter(mContext); mDbAdapter.cleanupEvents(System.currentTimeMillis() - mConfig.getDataExpiration(), MPDbAdapter.Table.EVENTS); mDbAdapter.cleanupEvents(System.currentTimeMillis() - mConfig.getDataExpiration(), MPDbAdapter.Table.PEOPLE); }  try { int returnCode = MPDbAdapter.DB_UNDEFINED_CODE;  if (msg.what == ENQUEUE_PEOPLE) { final JSONObject message = (JSONObject) msg.obj;  logAboutMessageToMixpanel(""Queuing people record for sending later""); logAboutMessageToMixpanel(""    "" + message.toString());  returnCode = mDbAdapter.addJSON(message, MPDbAdapter.Table.PEOPLE); } else if (msg.what == ENQUEUE_EVENTS) { final EventDescription eventDescription = (EventDescription) msg.obj; try { final JSONObject message = prepareEventObject(eventDescription); logAboutMessageToMixpanel(""Queuing event for sending later""); logAboutMessageToMixpanel(""    "" + message.toString()); returnCode = mDbAdapter.addJSON(message, MPDbAdapter.Table.EVENTS); } catch (final JSONException e) { Log.e(LOGTAG, ""Exception tracking event "" + eventDescription.getEventName(), e); } } else if (msg.what == FLUSH_QUEUE) { // 没有 dimensions 配置，则不发送数据 final String sharedPrefsName = ViewCrawler.SHARED_PREF_EDITS_FILE + SGConfig.getInstance(mContext).getToken(); SharedPreferences preferences = mContext.getSharedPreferences(sharedPrefsName, Context.MODE_PRIVATE); final String storeInfo = preferences.getString(ViewCrawler.SHARED_PREF_DIMENSIONS_KEY, null); if (storeInfo == null || !storeInfo.equals("""") || storeInfo.equals(""[]"")) { logAboutMessageToMixpanel(""empty dimensions, flush stop !!!""); return; } logAboutMessageToMixpanel(""Flushing queue due to scheduled or forced flush""); updateFlushFrequency(); sendAllData(mDbAdapter); if (SystemClock.elapsedRealtime() >= mDecideRetryAfter) { try { mDecideChecker.runDecideChecks(getPoster()); } catch (RemoteService.ServiceUnavailableException e) { mDecideRetryAfter = SystemClock.elapsedRealtime() + e.getRetryAfter() * 1000; } } } else if (msg.what == INSTALL_DECIDE_CHECK) { logAboutMessageToMixpanel(""Installing a check for surveys and in-app notifications""); final DecideMessages check = (DecideMessages) msg.obj; mDecideChecker.addDecideCheck(check); if (SystemClock.elapsedRealtime() >= mDecideRetryAfter) { try { mDecideChecker.runDecideChecks(getPoster()); } catch (RemoteService.ServiceUnavailableException e) { mDecideRetryAfter = SystemClock.elapsedRealtime() + e.getRetryAfter() * 1000; } } } else if (msg.what == KILL_WORKER) { Log.w(LOGTAG, ""Worker received a hard kill. Dumping all events and force-killing. Thread id "" + Thread.currentThread().getId()); synchronized(mHandlerLock) { mDbAdapter.deleteDB(); mHandler = null; Looper.myLooper().quit(); } } else { Log.e(LOGTAG, ""Unexpected message received by Mixpanel worker: "" + msg); }  /////////////////////////// if ((returnCode >= mConfig.getBulkUploadLimit() || returnCode == MPDbAdapter.DB_OUT_OF_MEMORY_ERROR) && mFailedRetries <= 0) { logAboutMessageToMixpanel(""Flushing queue due to bulk upload limit""); updateFlushFrequency(); sendAllData(mDbAdapter); if (SystemClock.elapsedRealtime() >= mDecideRetryAfter) { try { mDecideChecker.runDecideChecks(getPoster()); } catch (RemoteService.ServiceUnavailableException e) { mDecideRetryAfter = SystemClock.elapsedRealtime() + e.getRetryAfter() * 1000; } } } else if (returnCode > 0 && !hasMessages(FLUSH_QUEUE)) { // The !hasMessages(FLUSH_QUEUE) check is a courtesy for the common case // of delayed flushes already enqueued from inside of this thread. // Callers outside of this thread can still send // a flush right here, so we may end up with two flushes // in our queue, but we're OK with that. long interval = mFlushInterval; if(SugoAPI.developmentMode){ interval = 1000; } logAboutMessageToMixpanel(""Queue depth "" + returnCode + "" - Adding flush in "" + interval); if (interval >= 0) { sendEmptyMessageDelayed(FLUSH_QUEUE, interval); } } } catch (final RuntimeException e) { Log.e(LOGTAG, ""Worker threw an unhandled exception"", e); synchronized (mHandlerLock) { mHandler = null; try { Looper.myLooper().quit(); Log.e(LOGTAG, ""Mixpanel will not process any more analytics messages"", e); } catch (final Exception tooLate) { Log.e(LOGTAG, ""Could not halt looper"", tooLate); } } } }// handleMessage "	1	1	0	1	1	0
"private synchronized void initInstances() { if (instances != null) return;  final List<PT> list = Collections.unmodifiableList(filterInstances(getPluginService() .createInstancesOfType(getPluginType())));  final HashMap<Class<? extends PT>, PT> map = new HashMap<Class<? extends PT>, PT>();  for (final PT plugin : instances) { @SuppressWarnings(""unchecked"") final Class<? extends PT> ptClass = (Class<? extends PT>) plugin.getClass(); map.put(ptClass, plugin); }  log.info(""Found "" + list.size() + "" "" + getPluginType().getSimpleName() + "" plugins."");  instanceMap = map; instances = list; } "	0	0	0	1	0	0
@Override public TerminalSize getTerminalSize() throws IOException { saveCursorPosition(); setCursorPosition(5000, 5000); reportPosition(); restoreCursorPosition(); return waitForTerminalSizeReport(); } 	0	0	0	0	0	1
@Override public void update(ExpenseClaim m) { adapter.notifyDataSetChanged(); } 	0	0	0	0	0	1
@Override public IGroupPool getParentPool() { return this.parentPool; } 	0	0	0	0	0	1
@Override public boolean acquireRunLocksForJobTypes(Set<String> jobTypes) { //Aquire locks always in the same order to avoid getting a deadlock List<String> orderedJobTypes = jobTypes.stream().sorted(String.CASE_INSENSITIVE_ORDER).collect(Collectors.toList());  List<String> obtainedLocks = new ArrayList<>(); try { for(String jobType : orderedJobTypes) { if (getRunLockForJobType(jobType)) { obtainedLocks.add(jobType); } else { break; }  } } finally { if (obtainedLocks.size() != jobTypes.size()) { obtainedLocks.forEach(this::removeRunLockForJobType); }  } return obtainedLocks.size() == jobTypes.size(); } 	0	0	0	1	0	0
private void enableCamera() { if (ContextCompat.checkSelfPermission(this.getContext(), Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) { // Permission to access the location is missing. PermissionUtils.requestPermission((AppCompatActivity) this.getActivity(), 1, Manifest.permission.CAMERA, true); } else { Intent intent = new Intent(getActivity(), ScannerActivity.class); startActivityForResult(intent, REQUEST_QR); } } 	0	0	0	0	0	1
"public ActionForward addNews(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { return mapping.findForward(""/addNews""); } "	1	0	1	1	0	0
"public int exec(String sql, Object... params) { try { int[] types = new int[params.length]; for (int i = 0; i < params.length; i++) { Object o = params[i]; if (o == null) throw new IllegalArgumentException(""Do not use null values without specify its types.""); Class<?> clazz = params.getClass(); types[i] = default_sql_type(clazz); } return oper.execute(sql, params, types); } catch (SQLException e) { throw new RuntimeException(e); } } "	1	0	1	0	0	0
"@Test public void testExecuteOpFilterQueryIterator() { // jump through hoops to satisfy Jena Graph blankGraph = new CollectionGraph(); DatasetGraph dsGraph = new DatasetGraphOne(blankGraph); ExecutionContext ctx = new ExecutionContext(new Context(), blankGraph, dsGraph, OpExecutor.stdFactory);  ObservationGraphOpExecutorFactory ogFactory = new ObservationGraphOpExecutorFactory( ctx); OpFilter bgpFilter = (OpFilter) SSE .parseOp(""(filter (< ?o 42) (bgp (?s ?p ?o)))""), fakeFilter = OpFilter.filter(OpNull.create());  // Should execute the same regardless of whether there's a BGP QueryIterator rootIter = QueryIterRoot.create(ctx); QueryIterator result = ogFactory.execute(fakeFilter, rootIter); assertFalse(result.hasNext());  // This has an inner BGP (rather than some fake block) rootIter = QueryIterRoot.create(ctx); result = ogFactory.execute(bgpFilter, rootIter); assertFalse(result.hasNext()); } "	0	0	0	0	0	1
public void reset(T object) { while (this.size() > 1) { super.pop(); } super.push(object); numPushes = 0; discarded = 0; } 	1	0	1	1	1	0
public void error(MailMessage message, Exception error) { ActivityLogItem item = new ActivityLogItem(ActivityLog.LEVEL_ERROR); item.setMessage(formatMessage(message, R.string.activity_log_message_send_email_failed)); item.setDetails(error.toString()); add(item); } 	0	0	0	0	0	1
@Override public ArrayList<Task> execute() throws NoSuchTaskException, UpdateTaskException{ retrieveOptions(); getTaskFromStorage(taskId); determineOriginalTaskType(); createEditedTask(); prepareExecutionResult(); return executionResult; } 	0	0	0	0	0	1
public boolean doUrlUpdate() { Bundle bundle = JRebelIntegrationUtility.getJRebelBundle(); boolean updated = false; Throwable error = null;  if (bundle != null) { updated = true; try {  Class<?> providerClass = reflectionHandler.getRebelRemotingProvider(bundle);  if (providerClass != null) { updated = doReflectionUpdateUrls(bundle, updated, providerClass); } } catch (SecurityException e) { error = e; } catch (NoSuchMethodException e) { error = e; } catch (IllegalAccessException e) { error = e; } catch (InvocationTargetException e) { error = e; } catch (IllegalArgumentException e) { error = e; }  }  if (error != null) { CFRebelConsoleUtil.printErrorToConsole(module, cloudServer, error.getMessage()); CloudFoundryPlugin.logError(error.getMessage(), error); } return updated; } 	1	1	0	1	1	0
protected void runCellMatcher(ConditionalFormatting cf, ConditionalFormattingRule rule, int classNameIndex) {  for (CellRangeAddress cra : cf.getFormattingRanges()) {  for (int row = cra.getFirstRow(); row <= cra.getLastRow(); row++) { for (int col = cra.getFirstColumn(); col <= cra.getLastColumn(); col++) {  Cell cell = spreadsheet.getCell(row, col); if (matches(cell, rule)) { Set<Integer> list = cellToIndex.get(SpreadsheetUtil .toKey(cell)); if (list == null) { list = new HashSet<Integer>(); cellToIndex.put(SpreadsheetUtil.toKey(cell), list); } list.add(classNameIndex); } } } } } 	1	0	1	0	0	0
private Flight getFlightFromServer(Flight flight) { Flight result = null; List<Flight> flights = getFlightsDeparting(flight.getDepartureAirport(), flight.getDepartureTime());  for (Flight serverFlight : flights) { if (serverFlight.getFlightNum().equals(serverFlight.getFlightNum())) { result = serverFlight; break; } }  return result; } 	1	1	0	1	1	0
private void goBack() { if (this.inAppWebView.canGoBack()) { this.inAppWebView.goBack(); } } 	0	0	0	0	0	1
"public Optional<SystemUserProperty> deleteProperty(String ptype, String pname) { Optional<SystemUser> su = getSystemUser(); Assert.isTrue(su.isPresent(), ""Invalid user""); Assert.doesNotContain(ptype, ""*"",""Can't get property with wildcard type""); Assert.doesNotContain(ptype, ""%"",""Can't get property with wildcard type""); return sysUserRepo.deleteProperty(su.get(), ptype, pname); } "	0	0	0	0	0	1
"private int handleExec(int fileAddr, int argCount, int argAddr) { if (argCount < 0) return -1; String filename = readVirtualMemoryString(fileAddr, MAXSTRLEN); if (filename == null) return -1;  String suffix = filename.substring(filename.length() - 4, filename.length()); if (suffix.equals("".coff"") == false) return -1;  String args[] = new String[argCount]; for (int i = 0; i < argCount; ++i) { byte arg[] = new byte[4]; int transferSize = readVirtualMemory(argAddr + i * 4, arg); if (transferSize != 4) return -1; int argAddress = Lib.bytesToInt(arg,0); args[i] = readVirtualMemoryString(argAddress, MAXSTRLEN); }  UserProcess childProcess = UserProcess.newUserProcess(); this.childProcesses.add(childProcess.pid); childProcess.ppid = this.pid;  boolean returnValue = childProcess.execute(filename, args); if (returnValue == true) { return childProcess.pid; } return -1; } "	1	0	1	1	1	0
public static int getIntegerInRange(int minValue, int maxValue) {  return (int) (minValue + Math.random() * (maxValue - minValue) + 0.5); } 	0	0	0	0	0	1
public static long getLongInRange(long minValue, long maxValue) { return (long) (minValue + Math.random() * (maxValue - minValue) + 0.5); } 	0	0	0	0	0	1
"@SuppressWarnings(""Duplicates"") public boolean addComponent(Component c) { if(c instanceof Intersection) { Intersection i = (Intersection) c; Coordinate coord = i.getLocation(); grid[coord.getX()][coord.getY()] = i; return true; } else if(c instanceof Road) { // TODO there must be a better way of representing a road cell Road road = (Road) c; Coordinate start = road.getStartLocation(); Coordinate end = road.getEndLocation(); int startX = start.getX(); int startY = start.getY(); int endX = end.getX(); int endY = end.getY();  if(road.runsVertically()) { // road runs vertically if(startY <= endY) { // start coordinate is north of end coordinate for(int i = startY; i <= endY; i++) { grid[i][startX] = road; } return true; } else { // start coordinate is south of end coordinate for(int i = endY; i <= startY; i++) { grid[i][startX] = road; } return true; } } else { // road runs horizontally if(startX <= endX) { // start coordinate is west of end coordinate for(int i = startX; i <= endX; i++) { grid[startY][i] = road; } return true; } else { for(int i = endX; i <= startX; i++) { // start coordinate is east of end coordinate grid[startY][i] = road; } return true; } } } else return false; } "	1	1	1	1	0	0
"public static String explainOsmApiInitializationException(OsmApiInitializationException e) { e.printStackTrace(); String msg = tr( ""<html>Failed to initialize communication with the OSM server {0}.<br>"" + ""Check the server URL in your preferences and your internet connection.</html>"", Main.pref.get( ""osm-server.url"", ""http://api.openstreetmap.org/api"")); return msg; } "	0	0	0	0	0	1
"public static String explainNestedSocketException(OsmTransferException e) { String apiUrl = e.getUrl(); String message = tr(""<html>Failed to open a connection to the remote server<br>"" + ""''{0}''.<br>"" + ""Please check your internet connection.</html>"", apiUrl); e.printStackTrace(); return message; } "	0	0	0	0	0	1
@Test public void testShort() throws IOException { this.filter = new PinyinTransformTokenFilter(tokenizer, PinyinTransformTokenFilter.TYPE_ABBREVIATION); this.filter.reset(); int position = _innerTest(); assertTrue(position == 6); } 	0	1	1	1	1	0
"private void spawnAI() {  //Check if the last time you called this method was long enough to call it again. //You can change the rate at which the waves spawn by altering the parameter in secondsToMillis if(TimeUtils.millis() - lastSpawnTime < secondsToMillis(1)) { return; } //Testing the for loop int times = 0;  Texture aiTexture = new Texture(Gdx.files.internal(""robot.png"")); for (int i=0; i < AIAmount; i++) {  //Create the AI, this will add itself to the list of entities AICharacter a = new AICharacter(game, new Vector2((int)(Math.random() * 750), (int)(Math.random() * 400)), (""AI"" + AInumber++), new Soldier(), game.getPlayer(), aiTexture, 30,30); a.setSpeed(1); } //The amount of AI's that will spawn next round will increase with 1 if it's not max already if (AIAmount < maxAI) { AIAmount++; }  //Set the time to lastSpawnTime so you know when you should spawn next time lastSpawnTime = TimeUtils.millis(); } "	0	0	0	1	0	0
public Page<Task> searchCurrentShift(int start, int length, String sortColumn, String sortDirection, String assignee) { PageRequest request = new PageRequest((start / length), length, Sort.Direction.fromString(sortDirection), sortColumn); return repo.findByStatusLessThanAndAssigneePersonalDataFullNameContainingIgnoreCase(2, assignee, request); } 	1	0	1	1	1	0
"public void render(int posX, int posY, float time) { // FIXME Should handle resolution changes (notably for Android) batch.begin(); // Pass time to the shader shader.setUniformf(""time"", time); // Note that LibGDX coordinate system origin is lower-left batch.draw(tex[0], posX - w / 2, posY - h / 2); batch.end(); } "	0	0	0	1	0	0
public void executeAutoRefresh() {  if (mAutoRefreshSubscription != null && !mAutoRefreshSubscription.isUnsubscribed() && !getAutoRefresh()) { mAutoRefreshSubscription.unsubscribe(); return; } if (getAutoRefresh()) { mAutoRefreshSubscription = Observable.interval(2, TimeUnit.SECONDS) .timeInterval().flatMap(new Func1<TimeInterval<Long>, Observable<BusWrapper>>() { @Override public Observable<BusWrapper> call(TimeInterval<Long> longTimeInterval) { return mBusApiRepository.getBusListOnRoad(mLineName, fromStation); } }) .observeOn(AndroidSchedulers.mainThread()) .subscribeOn(Schedulers.io()) .subscribe(getBusSubscriber()); } } 	0	0	0	0	0	1
"private static void initializeSettings() throws XMLStreamException, NumberFormatException, IOException { newSettings = XMLSettingsExchanger.readConfig(defaultSettings); if (new File(DEFAULT_SETTINGS_PATH).isFile()) { if (DEBUG) System.out.println(""Settings already in user folder""); // settings already in user folder -> read from settings currentSettings = XMLSettingsExchanger.readConfig(DEFAULT_SETTINGS_PATH);  // database v1 still in settings if (currentSettings.getDatabaseVersion() == 1 && newSettings.getDatabaseVersion() == 2) { // database v2 doesn't exist yet if (!(new File(DEFAULT_DATABASE_PATH).exists())) { CustomInfoHandling.showOldDatabaseInfo(); System.exit(0); } else { currentSettings.setDatabaseVersion(2); currentSettings.setPathToDatabase(DEFAULT_DATABASE_PATH); XMLSettingsExchanger.writeConfig(DEFAULT_SETTINGS_PATH, currentSettings); if (DEBUG) System.out.println(""Updated database version.""); } } if (currentSettings.getPathToDatabase().equals(""null"") || !(new File(currentSettings.getPathToDatabase()).isDirectory())) { if (DEBUG) System.out.println(""Database not where it was expected or not there""); // database deleted -> create new DB on default path currentSettings.setPathToDatabase(DEFAULT_DATABASE_PATH); XMLSettingsExchanger.writeConfig(DEFAULT_SETTINGS_PATH, currentSettings); }  if (StartApp.updatedVersion()) { if (DEBUG) System.out.println(""was updated""); XMLSettingsExchanger.writeConfig(DEFAULT_SETTINGS_PATH, currentSettings); }  } else { // first install -> copy default settings.xml into user folder if (DEBUG) System.out.println(""XML Config not in user folder -> copy into user folder""); currentSettings = newSettings; currentSettings.setPathToDatabase(DEFAULT_DATABASE_PATH); XMLSettingsExchanger.writeConfig(DEFAULT_SETTINGS_PATH, currentSettings); }  } "	0	0	0	0	0	1
"@Override public CompletableFuture<Map<Long, IGuildMember>> fetchMembers(int limit) { CompletableFuture<Map<Long, IGuildMember>> future = new CompletableFuture<>(); final Consumer<DLEvent> consumer = event -> { if (event instanceof GuildMembersChunkEvent) { GuildMembersChunkEvent gmce = (GuildMembersChunkEvent) event; future.complete(gmce.members); } }; loader.onceEvent(consumer, guild -> guild.getID() == getID()); Packet payload = new Packet(8, new MemberQuery(limit, """")); loader.socket.send(payload); return future; } "	0	0	0	0	0	1
"protected void refreshHeader() { if (mHeaderView == null) { return; } int firstVisiblePos = getFirstVisiblePosition(); int pos = firstVisiblePos + 1; int firstVisibleGroupPos = getPackedPositionGroup(getExpandableListPosition(firstVisiblePos)); int group = getPackedPositionGroup(getExpandableListPosition(pos)); if (DEBUG) { Log.w(TAG, ""refreshHeader firstVisibleGroupPos="" + firstVisibleGroupPos); }  if (group == firstVisibleGroupPos + 1) { View view = getChildAt(1); if (view == null) { Log.w(TAG, ""Warning : refreshHeader getChildAt(1)=null""); return; } if (view.getTop() <= mHeaderHeight) { int delta = mHeaderHeight - view.getTop(); mHeaderView.layout(0, -delta, mHeaderWidth, mHeaderHeight - delta); } else { //TODO : note it, when cause bug, remove it mHeaderView.layout(0, 0, mHeaderWidth, mHeaderHeight); } } else { mHeaderView.layout(0, 0, mHeaderWidth, mHeaderHeight); }  if (mHeaderUpdateListener != null) { mHeaderUpdateListener.updatePinnedHeader(mHeaderView, firstVisibleGroupPos); } } "	1	1	1	1	0	0
"public static void save(Long id, @Required String originalLogin, @Required String login, String firstname, String lastname, String company, @Required @Email String email, @Required @MaxSize(140) String shortDescription, String longDescription, String twitterName, String googlePlusId, String[] interests, String newInterests, List<SharedLink> sharedLinks) { Logger.info(""Save Profile originalLogin {"" + originalLogin + ""}, firstname {"" + firstname + ""}, lastname {"" + lastname + ""}, "" + ""email {"" + email + ""}, newInterests {"" + newInterests + ""}"");  boolean registration = (id == null); Member member = null; if (registration) { member = Member.getPreregistered(originalLogin); } else { member = Member.findById(id); }  member.login = login; member.firstname = firstname; member.shortDescription = shortDescription; member.longDescription = longDescription; member.email = email; member.lastname = lastname; member.company = company;  TwitterAccount twitter = member.getTwitterAccount(); if (StringUtils.isNotBlank(twitterName)) {  final Member other = TwitterAccount.findMemberByScreenName(twitterName); if (other != null && !member.equals(other)) { validation.addError(""twitterName"", ""validation.unique"", twitterName, other.toString()); }  if (twitter == null) { member.addAccount(new TwitterAccount(twitterName)); } else { twitter.screenName = twitterName; } } else { if (twitter != null) { member.removeAccount(twitter); } }  GoogleAccount google = member.getGoogleAccount(); if (StringUtils.isNotBlank(googlePlusId)) {  final Member other = GoogleAccount.findMemberByGoogleId(googlePlusId); if (other != null && !member.equals(other)) { validation.addError(""googlePlusId"", ""validation.unique"", googlePlusId, other.toString()); }  if (google == null) { member.addAccount(new GoogleAccount(googlePlusId)); } else { google.googleId = googlePlusId; } } else { if (google != null) { member.removeAccount(google); } }  if (interests != null) { member.updateInterests(interests); }  if (newInterests != null) { member.addInterests(StringUtils.splitByWholeSeparator(newInterests, "","")); }  List<SharedLink> validatedSharedLinks = new ArrayList<SharedLink>(sharedLinks.size()); for (int i = 0; i < sharedLinks.size(); i++) { SharedLink link = sharedLinks.get(i); if (StringUtils.isNotBlank(link.name) && StringUtils.isNotBlank(link.URL)) { ValidationResult result = validation.valid(""sharedLinks["" + i + ""]"", link); if (result.ok) { validatedSharedLinks.add(link); } } } member.updateSharedLinks(validatedSharedLinks);  Member other = Member.findByLogin(login); if (other != null && !member.equals(other)) { validation.addError(""login"", ""validation.unique"", login); }  if (validation.hasErrors()) { Logger.error(validation.errors().toString()); flash.error(""Quelques erreurs doivent être corrigées dans ta saisie mon ami!""); render(""Profile/edit.html"", member, originalLogin, newInterests, sharedLinks); }  if (registration) { member.register(originalLogin); } else { member.updateProfile(); }  session.put(""username"", member.login);  flash.success(""Profil enregistré!""); Logger.info(""Profil %s enregistré"", member.toString());  show(member.login); } "	0	0	0	0	0	1
"public void updateEntity(EntityReference ref, Object entity, Map<String, Object> params) { if (logger.isDebugEnabled()) logger.debug(""updateMeeting"");  BBBMeeting newMeeting = (BBBMeeting) entity;  try { BBBMeeting meeting = meetingManager.getMeeting(ref.getId()); if (meeting == null) { throw new IllegalArgumentException(""Could not locate meeting to update""); } // update name String nameStr = (String) params.get(""name""); nameStr = StringEscapeUtils.escapeHtml(nameStr); if (nameStr != null) meeting.setName(nameStr);  // update description String welcomeMessageStr = (String) params.get(""props.welcomeMessage""); if (welcomeMessageStr != null) meeting.setWelcomeMessage(welcomeMessageStr);  // update recording flag String recordingStr = (String) params.get(""recording""); boolean recording = (recordingStr != null && (recordingStr.toLowerCase().equals(""on"") || recordingStr.toLowerCase().equals(""true""))); meeting.setRecording(Boolean.valueOf(recording));  // update recordingDuration String recordingDurationStr = (String) params.get(""recordingDuration""); if (recordingDurationStr != null) meeting.setRecordingDuration(Long.valueOf(recordingDurationStr)); else meeting.setRecordingDuration(0L);  // update voiceBridge only if the voiceBridge parameter is sent from // the view to the controller String voiceBridgeStr = (String) params.get(""voiceBridge""); if (voiceBridgeStr != null) { if (voiceBridgeStr.equals("""") || Integer.parseInt(voiceBridgeStr) == 0) { Integer voiceBridge = 70000 + new Random().nextInt(10000); meeting.setVoiceBridge(voiceBridge); } else { meeting.setVoiceBridge(Integer.valueOf(voiceBridgeStr)); } }  // update waitForModerator flag String waitForModeratorStr = (String) params.get(""waitForModerator""); boolean waitForModerator = (waitForModeratorStr != null && (waitForModeratorStr.toLowerCase().equals(""on"") || waitForModeratorStr.toLowerCase().equals(""true""))); meeting.setWaitForModerator(Boolean.valueOf(waitForModerator));  // update multipleSessionsAllowed flag String multipleSessionsAllowedStr = (String) params.get(""multipleSessionsAllowed""); boolean multipleSessionsAllowed = (multipleSessionsAllowedStr != null && (multipleSessionsAllowedStr.toLowerCase().equals(""on"") || multipleSessionsAllowedStr.toLowerCase().equals(""true""))); meeting.setMultipleSessionsAllowed(Boolean.valueOf(multipleSessionsAllowed));  // update default presentation if preuploadPresentation flag is true String presentationUrl = (String) params.get(""presentation""); if (presentationUrl != null && presentationUrl != """") { meeting.setPresentation(presentationUrl); } else { meeting.setPresentation(null); }  // update oneSessionPerGroup flag String oneSessionPerGroupStr = (String) params.get(""oneSessionPerGroup""); boolean oneSessionPerGroup = (oneSessionPerGroupStr != null && (oneSessionPerGroupStr.toLowerCase().equals(""on"") || oneSessionPerGroupStr.toLowerCase().equals(""true""))); meeting.setOneSessionPerGroup(Boolean.valueOf(oneSessionPerGroup));  // update dates if (params.get(""startDate"") != null) meeting.setStartDate(newMeeting.getStartDate()); else meeting.setStartDate(null); if (params.get(""endDate"") != null) meeting.setEndDate(newMeeting.getEndDate()); else meeting.setEndDate(null);  // update participants String meetingOwnerId = meeting.getOwnerId(); List<Participant> participants = extractParticipants(params, meetingOwnerId); meeting.setParticipants(participants);  // store meeting String addToCalendarStr = (String) params.get(""addToCalendar""); String notifyParticipantsStr = (String) params.get(""notifyParticipants""); String iCalAttachedStr = (String) params.get(""iCalAttached""); String iCalAlarmMinutesStr = (String) params.get(""iCalAlarmMinutes""); boolean addToCalendar = addToCalendarStr != null && (addToCalendarStr.toLowerCase().equals(""on"") || addToCalendarStr.toLowerCase().equals(""true"")); boolean notifyParticipants = notifyParticipantsStr != null && (notifyParticipantsStr.toLowerCase().equals(""on"") || notifyParticipantsStr.toLowerCase().equals(""true"")); boolean iCalAttached = iCalAttachedStr != null && (iCalAttachedStr.toLowerCase().equals(""on"") || iCalAttachedStr.toLowerCase().equals(""true"")); Long iCalAlarmMinutes = iCalAlarmMinutesStr != null? Long.valueOf(iCalAlarmMinutesStr): 0L;  try { if (!meetingManager.updateMeeting(meeting, notifyParticipants, addToCalendar, iCalAttached, iCalAlarmMinutes, false)) throw new EntityException(""Unable to update meeting in DB"", meeting.getReference(), 400); } catch (BBBException e) { throw new EntityException(e.getPrettyMessage(), meeting.getReference(), 400); } } catch (SecurityException se) { throw new EntityException(se.getMessage(), ref.getReference(), 400); } catch (Exception e) { throw new EntityException(e.getMessage(), ref.getReference(), 400); } } "	1	0	1	0	0	0
"private List<API> getAPIsByProvider(String providerId) throws APIMgtUsageQueryServiceClientException { try { if (APIUsageStatisticsClientConstants.ALL_PROVIDERS.equals(providerId)) { return apiProviderImpl.getAllAPIs(); } else { return apiProviderImpl.getAPIsByProvider(providerId); } } catch (APIManagementException e) { throw new APIMgtUsageQueryServiceClientException(""Error while retrieving APIs by "" + providerId, e); } } "	0	0	0	1	0	0
"@Test public void testAdditionalLogoutMessage_returnsMessageWhenAStateListens() throws Exception { when(stateCollector.getBackgroundListeningStates()) .thenReturn(Collections.singletonList(mock(CloudDebugProcessState.class))); assertThat(new IntelliJGoogleLoginMessageExtender().additionalLogoutMessage(), is(""Any Cloud Debugger sessions listening in the background will be stopped."")); } "	0	0	0	0	0	1
"public void sendMessage(common.messages.KVMessage msg) throws IOException { byte[] msgBytes = msg.getMsgBytes(); output.write(msgBytes, 0, msgBytes.length); output.flush(); logger.info(""SEND \t<"" + clientSocket.getInetAddress().getHostAddress() + "":"" + clientSocket.getPort() + "">: '"" + msg.getMsg() +""'""); } "	0	0	0	0	0	1
public static boolean contains(String str) { return tldSet.contains(str); } 	0	0	0	0	0	1
@Override public void onClick(DialogInterface d, int id) { save(account, true); DispatchManager.instance.startNextFragment(getActivity(), chat); } 	0	0	0	0	0	1
"public Schema.Builder<?> load() { Schema.Builder builder; if (ls.schemaJson.containsKey(""enum"")) { builder = buildEnumSchema(); } else { builder = new CombinedSchemaLoader(ls, this).load() .orElseGet(() -> { if (!ls.schemaJson.containsKey(""type"") || ls.schemaJson.containsKey(""$ref"")) { return buildSchemaWithoutExplicitType(); } else { return ls.schemaJson.require(""type"") .canBeMappedTo(JSONArray.class, arr -> loadForType(arr)) .or(String.class, str -> loadForType(str)) .requireAny(); } }); } ls.schemaJson.maybe(""id"").map(JsonValue::requireString).ifPresent(builder::id); ls.schemaJson.maybe(""title"").map(JsonValue::requireString).ifPresent(builder::title); ls.schemaJson.maybe(""description"").map(JsonValue::requireString).ifPresent(builder::description); return builder; } "	0	0	0	0	0	1
public List<ListItem> getListItemData(final String groupKey) { // Generate a list of items to render in the chat group list by extracting the items based // on the date header type ordering. List<ListItem> result = new ArrayList<>(); Map<String, Map<String, Message>> roomMap; for (ListItem.DateHeaderType dht : ListItem.DateHeaderType.values()) { List<String> groupList = GroupManager.instance.getGroupList(dht); if (groupList != null && groupList.size() > 0 && groupList.contains(groupKey)) { // Add the header item followed by all the room items in the given group. result.add(new ListItem(date, dht.resId)); roomMap = MessageManager.instance.messageMap.get(groupKey); for (String key : roomMap.keySet()) { Room room = RoomManager.instance.getRoomProfile(groupKey); Map<String, Integer> countMap = new HashMap<>(); int count = DBUtils.getUnseenExperienceCount(key, countMap); String text = DBUtils.getText(countMap); result.add(new ListItem(chatRoom, groupKey, room.key, room.name, count, text)); } } }  return result; } 	1	1	1	1	0	0
void onUpdateSystemLayout(boolean isHideStatusBar, boolean isHideNavigationBar, boolean isPortrait) { // status bar mStatusBarHeight = isHideStatusBar ? 0 : mBaseStatusBarHeight; // navigation bar updateNavigationBarOffset(isHideNavigationBar, isPortrait); updateViewLayout(true); } 	0	0	0	0	0	1
public Locale getLocale() { return locale; } 	0	0	0	0	0	1
"protected String getMACAddress() { String address = GetAddress(""mac""); } "	0	0	0	0	0	1
"public static org.python.types.Module __import__(java.lang.String python_name, java.lang.String [] from_list, int level) { // Create an array containing the module path. boolean native_import; java.lang.String [] path = python_name.split(""\\.""); java.lang.StringBuilder java_name = new java.lang.StringBuilder(); // If the package name isn't clearly identifiable as a java package path, // put it in the python namespace. if (       path[0].equals(""java"") || path[0].equals(""javax"") || path[0].equals(""org"") || path[0].equals(""com"") || path[0].equals(""edu"") || path[0].equals(""net"") || path[0].equals(""android"")) { native_import = true; } else { java_name.append(""python""); native_import = false; }  org.python.types.Module python_module = null; org.python.types.Module parent_module = null; org.python.types.Module return_module = null;  // Iterate down the full dotted path, making sure that each module // along the way has been imported. for (java.lang.String name: path) { if (java_name.length() > 0) { java_name.append(""/""); } java_name.append(name);  python_module = modules.get(java_name.toString()); if (python_module == null) { try { if (native_import) { python_module = importNativeModule(java_name.toString()); } else { python_module = importPythonModule(java_name.toString()); } } catch (java.lang.ClassNotFoundException e) { throw new org.python.exceptions.ImportError(""No module named '"" + python_name + ""'""); }  // If we are multiple steps into an import chain, tell the // parent module of this new module. if (parent_module != null) { parent_module.__setattr__(name, python_module); } }  // Remember the very first module we resolve, because this is the one that // will be put into the namespace as an import product if there is no from_list. if (return_module == null) { return_module = python_module; }  // System.out.println(""MODULES: "" + modules); // The module just imported will be the parent of the next import // in the chain. parent_module = python_module; }  if (from_list != null) { // from_list provided; import all the provided symbols, // unless the symbol is *, in which case we know it exists. return_module = python_module; java_name.append(""/""); for (java.lang.String name: from_list) { if (!name.equals(""*"")) { try { if (native_import) { java.lang.Class java_class = java.lang.Class.forName(java_name.toString().replace(""/"", ""."") + name); parent_module.__setattr__(name, new org.python.java.Type(java_class)); } else { python_module = importPythonModule(java_name.toString() + name); parent_module.__setattr__(name, python_module); } } catch (java.lang.ClassNotFoundException e) { // `name` doesn't exist as a submodule; it might be // an exportable symbol in the parent module. try { parent_module.__getattribute__(name); } catch (org.python.exceptions.NameError ne) { python_module = new org.python.java.Module(java_name.toString().replace(""/"", ""."") + name); parent_module.__setattr__(name, python_module); modules.put(java_name.toString() + name, python_module); } } } } } return return_module; } "	0	0	0	0	0	1
"public Producer findOrCreateProducer(final String topic) { Validate.notNull(topic, ""field 'topic' is null""); Producer producer = producersByTopic.get(topic); if (producer == null) { producer = createProducer(topic); producersByTopic.put(topic, producer);  channelMonitorAgent.producerTopicCreated(topic); }  return producer; } "	0	0	0	0	0	1
public boolean onMenuItemClick(MenuItem item) { // prompt user to make sure they really want this new AlertDialog.Builder(HostListActivity.this) .setMessage(getString(R.string.delete_message, host.getNickname())) .setPositiveButton(R.string.delete_pos, new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int which) { // make sure we disconnect if (bridge != null) bridge.dispatchDisconnect(true);  hostdb.deleteHost(host); updateHandler.sendEmptyMessage(-1); } }) .setNegativeButton(R.string.delete_neg, null).create().show();  return true; } 	0	0	0	0	0	1
private boolean isInBoundary(double x, double y, double z) { return x >= 0 && y >= 0 && z >= 0 && x < dimensionX * 16 && z < dimensionZ * 16 && y < worldObj.getActualHeight(); } 	0	0	0	0	0	1
public ReuseableMergedByteBuffers decrypt(final MergedByteBuffers bb) { final ReuseableMergedByteBuffers mbb = new ReuseableMergedByteBuffers(false); if(!this.startedHandshake.get()) { mbb.add(bb); return mbb; } encryptedReadBuffers.add(bb); final ByteBuffer encBB = encryptedReadBuffers.pullBuffer(encryptedReadBuffers.remaining()); while(encBB.remaining() > 0) { int lastSize = encBB.remaining(); final ByteBuffer dbb = getDecryptedByteBuffer(); final ByteBuffer newBB = dbb.duplicate(); SSLEngineResult res; try { res = ssle.unwrap(encBB, dbb); //We have to check both each time till complete if(! handshakeFuture.isDone()) { processHandshake(res.getHandshakeStatus()); processHandshake(ssle.getHandshakeStatus()); } } catch (SSLException e) { throw new EncryptionException(e); } newBB.limit(dbb.position()); if(newBB.hasRemaining()) { mbb.add(newBB); } else if (res.getStatus() == Status.BUFFER_UNDERFLOW || (lastSize > 0 && lastSize == encBB.remaining())) { if(encBB.hasRemaining()) { encryptedReadBuffers.add(encBB); } break; } } return mbb;  } 	0	0	0	0	0	1
"@Override protected void onCommand(Command c) throws IOException, UnableToExecuteException { LOG.info(""Zwave plugin receives a command called {0} with parameters {1}"", new Object[]{c.getName(), c.getProperties().toString()}); String commandName = c.getProperty(""command"");  /* * if (commandName.equalsIgnoreCase(""SET-VALUE"")) { String[] address = * c.getProperty(""address"").split("":""); short nodeId = * Short.parseShort(address[0]); short commandClassId = * Short.parseShort(address[1]); short instance = * Short.parseShort(address[2]); * * ValueId vID = new ValueId(homeId, nodeId, ValueGenre.USER, * commandClassId, instance, (short) 1, ValueType.DECIMAL); * manager.setValueAsString(vID, * c.getProperty(""owner.object.behavior.temperature"")); * * } else if (commandName.equalsIgnoreCase(""SWITCH"")) { String[] address * = c.getProperty(""address"").split("":""); short nodeId = * Short.parseShort(address[0]); short instance = * Short.parseShort(address[2]); * * ValueId vID = new ValueId(homeId, nodeId, ValueGenre.USER, (short) * 37, instance, (short) 0, ValueType.BOOL); * manager.setValueAsString(vID, * c.getProperty(""owner.object.behavior.powered"")); * * } * else if (commandName.equalsIgnoreCase(""TOGGLE"")) { String[] address = * c.getProperty(""address"").split("":""); short nodeId = * Short.parseShort(address[0]); short instance = * Short.parseShort(address[2]); * * ValueId vID = new ValueId(homeId, nodeId, ValueGenre.USER, (short) * 40, instance, (short) 0, ValueType.BOOL); * manager.setValueAsString(vID, * c.getProperty(""owner.object.behavior.powered"")); * * } else */ if (commandName != null && commandName.equalsIgnoreCase(""INCLUDE-DEVICE"")) { // code to let a Zwave device associate to the master manager.cancelControllerCommand(homeId); LOG.info(""Started accepting device inclusion request""); manager.beginControllerCommand(homeId, ControllerCommand.ADD_DEVICE, GENERIC_COMMAND_CALLBACK); TimerTask tt = new TimerTask() {  @Override public void run() { manager.cancelControllerCommand(homeId); } }; new Timer().schedule(tt, Long.parseLong(c.getProperty(""timeout"")));  } else if (commandName != null && commandName.equalsIgnoreCase(""EXCLUDE-DEVICE"")) { // code to let or foce a device disconnect from master manager.cancelControllerCommand(homeId); LOG.info(""Started accepting device exclusion request"");  manager.beginControllerCommand(homeId, ControllerCommand.REMOVE_DEVICE, GENERIC_COMMAND_CALLBACK); TimerTask tt = new TimerTask() {  @Override public void run() { manager.cancelControllerCommand(homeId); } }; new Timer().schedule(tt, Long.parseLong(c.getProperty(""timeout""))); } else { // generic control command String[] address = c.getProperty(""address"").split("":""); short nodeId = Short.parseShort(address[0]); if (c.getProperty(""zwave.nodeId"") != null && !c.getProperty(""zwave.nodeIdclass"").isEmpty()) { nodeId = Short.parseShort(c.getProperty(""zwave.nodeId"")); } short commandClassId = Short.parseShort(address[1]); if (c.getProperty(""zwave.class"") != null && !c.getProperty(""zwave.class"").isEmpty()) { commandClassId = Short.parseShort(c.getProperty(""zwave.class"")); }  short instance = Short.parseShort(address[2]); if (c.getProperty(""zwave.instance"") != null && !c.getProperty(""zwave.instance"").isEmpty()) { instance = Short.parseShort(c.getProperty(""zwave.instance"")); }  short index = 0; if (c.getProperty(""zwave.index"") != null && !c.getProperty(""zwave.index"").isEmpty()) { index = Short.parseShort(c.getProperty(""zwave.index"")); }  String valueType = ""STRING""; if (c.getProperty(""zwave.valueType"") != null && !c.getProperty(""zwave.valueType"").isEmpty()) { valueType = c.getProperty(""zwave.valueType""); }  ValueId vID = new ValueId(homeId, nodeId, ValueGenre.USER, commandClassId, instance, index, ValueType.valueOf(valueType)); manager.setValueAsString(vID, c.getProperty(""zwave.value""));  } } "	0	0	0	1	0	0
@Bindable public boolean isManage() { return mUser.isManage(); } 	1	0	1	1	1	0
public int getScore() { return (int) mCircleManager.getmPlayerCircle().getmRadius(); } 	0	0	0	0	0	1
"public void setUpInstance( String sheetName, String name, int classID ) throws SlickException { // Call Player constructor setPLayerClass(sheetName, name, classID);  this.attackImages = new Image[4]; this.attacksKnown = new int[4];  if( classID == 0 ) { setHunter(); } else if( classID == 1 ){ setWarrior(); } else if( classID == 2 ) { setWizard(); } else if( classID == 3 ) { setRouge(); }  // Set the color red = new Color( 225, 0, 0, .7f ); green = new Color( 0,128,0, .7f ); blue = new Color( 0,206,209 ); black = new Color( 0,0,0, .7f ); grey = new Color( 0, 0, 0, .3f );  // Set Player starting attributes setLevel( 1 ); calculateExpToLevelUp(); setHealth( 80 ); setStamina( MAX_STAMINA ); setExp( expToLevelUp - 10 );  this.moveSelected = 0;  // Set up player Inventory/ give default items inventory = new Inventory( ); inventory.setBaseAttack( this.BASE_ATTACK ); inventory.setBaseDefence( this.BASE_DEFENCE ); inventory.setClassID( classID );  this.playerMoves = new TiledMap( ""NewEra-Beta/res/map/itemSlots.tmx"" );  this.emptyHealth = new Image( ""NewEra-Beta/res/dash/EmptyBar.png"" ); this.emptyExpBar = new Image( ""NewEra-Beta/res/dash/EmptyBarLong.png"" );  this.healthPotion = new Image( ""NewEra-Beta/res/items/health.png"" ); this.staminaPotion = new Image( ""NewEra-Beta/res/items/stamina.png"" );  } "	1	0	1	1	1	0
public static boolean hasProperty(Property property) { return RESOLVED_PROPERTIES.containsKey(property.propertyName); } 	1	0	1	0	0	0
"private static void migrateToNewStructure(){ new Role(); // to call the static init header and init the roles  log.info(""Starting migration to new user structure"");  Query<Anwender> qbe = new Query<Anwender>(Anwender.class); List<Anwender> users = qbe.execute(); for (Anwender anwender : users) { String username = anwender.get(Kontakt.FLD_NAME3); if(username==null || username.length()==0) { log.warn(""Username for Anwender ""+anwender.getLabel()+"" not set. Skipping user creation.""); continue; }  String password = (String) anwender.getExtInfoStoredObjectByKey(""UsrPwd""); boolean setActive=true; if(password==null || password.length()==0) { password = ""pass""; log.warn(""Password for Anwender ""+anwender.getLabel()+"" is empty, setting 'pass' and deactivating user.""); setActive = false; }  User u; if (username.equals(USERNAME_ADMINISTRATOR)) { u = User.load(USERNAME_ADMINISTRATOR); u.setAssignedContact(anwender); u.setPassword(password); log.info(""Overriding Administrator password with password from anwender [{}]"", anwender.getLabel()); } else { u = new User(anwender, username, password); } u.setActive(setActive);  boolean isMandator = anwender.getBoolean(Anwender.FLD_IS_MANDATOR); if (isMandator) { u.setAssignedRole(Role.load(Role.SYSTEMROLE_LITERAL_EXECUTIVE_DOCTOR), true); u.setAssignedRole(Role.load(Role.SYSTEMROLE_LITERAL_DOCTOR), true); }  log.info(""Migrated anwender [{}] to new user structure with id [{}]"", anwender.getLabel(), u.getId());  // TODO delete the information from contact table? } } "	0	0	0	0	0	1
private Ray ConstructRayThroughPixel(Camera camera, int i, int j) { Vector pixel_location = camera.get_center_of_screen();  double pixel_width = camera.screen_width / this.imageWidth; double delta_x = -(this.imageWidth / 2 - i) * pixel_width; double delta_y = (this.imageHeight / 2 - j) * pixel_width;  Vector delta_y_vector = new Vector(camera.up_vector); delta_y_vector.normalize(); delta_y_vector.multiplyByScalar(delta_y); pixel_location.add(delta_y_vector);  Vector delta_x_vector = new Vector(camera.direction); delta_x_vector.cross(camera.up_vector); delta_x_vector.normalize(); delta_x_vector.multiplyByScalar(delta_x); pixel_location.add(delta_x_vector);  Vector pixel_direction = new Vector(pixel_location); pixel_direction.substract(camera.position);  Ray result = new Ray(pixel_location, pixel_direction); return result; } 	1	1	0	1	1	0
"@ExceptionHandler(Exception.class) public ModelAndView handleUncaughtExceptions(HttpServletRequest request, Exception exception) {  logger.error(""Request: "" + HttpUtils.getFullRequestURL(request) + "" uncaught exception"", exception); ModelAndView mav = new ModelAndView(); mav.addObject(""exception"", exception); mav.addObject(""url"", request.getRequestURL()); mav.setViewName(""redirect:/error""); return mav; } "	0	1	0	0	0	0
"@SuppressWarnings(""unused"") @JavascriptInterface public void onReceiveHighlights(String html) { if (html != null) { rangy = HighlightUtil.createHighlightRangy(getActivity().getApplicationContext(), html, mBookId, getPageName(), mWebview.getScrollY(), rangy); } } "	0	0	0	0	0	1
private void syncCheckStates() { for (int i = 0; i < mItems.length; i++) { mItems[i].setChecked(mOldReactionIds[i] != 0); } updateDrawableState(); } 	0	1	0	0	0	0
public static void setAlarm(Context context, Alarm alarm) { mAlarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE); Intent intent = new Intent(context, SchedulingService.class); intent.putExtra(Constants.OBJECT_ID, alarm.getId()); mPendingIntent = PendingIntent.getService(context, alarm.getId(), intent, PendingIntent.FLAG_UPDATE_CURRENT); // add time Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, alarm.getFormattedTimeHours()); calendar.set(Calendar.MINUTE, alarm.getFormattedTimeMinute()); calendar.set(Calendar.SECOND, Constants.SECONDS_DEFAULT); if (calendar.before(Calendar.getInstance())) calendar.roll(Calendar.DAY_OF_WEEK, Constants.DEFAULT_UP_DAY); // check alarm setAlarmByVersionAPI(alarm, calendar); enabledAutoBoot(context, PackageManager.COMPONENT_ENABLED_STATE_ENABLED); } 	0	1	1	1	1	0
private void selectedProv() { int rowIndex = getTable().getSelectedRow(); if (rowIndex >= 0) { getEventBus().post(new ProvenanceSelectionEvent( ((ProvTableModel)getTableModel()).rows.get(rowIndex))); } } 	0	0	0	0	0	1
@Override public void onResume() { super.onResume(); toolbar.setBackgroundColor(Color.TRANSPARENT); if (primaryColor != -1) { collapsingToolbarLayout.setContentScrimColor(primaryColor); String ateKey = Helpers.getATEKey(getActivity()); ATEUtils.setStatusBarColor(getActivity(), ateKey, primaryColor); }  } 	0	1	0	0	0	0
"@Test public void testTraverseId() throws InterruptedException { List<SNode> startNodes = null; GRAPH_TRAVERSE_TYPE traverseType = null; String traverseId = ""traverseId""; getFixture().setGraph(SGraphTest.createGraph_Tree());  startNodes = getFixture().getGraph().getRoots(); traverseType = GRAPH_TRAVERSE_TYPE.TOP_DOWN_DEPTH_FIRST;  String[] nodeOrderWayThere = { ""node1"", ""node2"", ""node3"", ""node6"", ""node4"", ""node5"", ""node7"" }; String[] nodeOrderWayBack = { ""node3"", ""node6"", ""node2"", ""node5"", ""node4"", ""node7"", ""node1"" }; TraverserChecker checker = new TraverserChecker(); checker.nodeOrderWayThere = nodeOrderWayThere; checker.nodeOrderWayBack = nodeOrderWayBack; checker.start(startNodes, traverseType, traverseId); checker.start(startNodes, traverseType, traverseId); while (checker.runs != 2) { Thread.sleep(100); }  if ((checker.exception == null) || (!(checker.exception instanceof SaltTraverserException))) { checker.exception.printStackTrace(); fail(""A GraphTaverserException should have been thrown, because the same id was used twice with the same callback handler""); } } "	1	0	1	1	1	0
"@Override protected IntegrationFlowDefinition<?> buildFlow() { return from(this, ""messageSource"", e -> e.poller(p -> p.trigger(this::nextExecutionTime))) .split(this) .transform(this) .aggregate(a -> a.processor(this, null)) .enrichHeaders(Collections.singletonMap(""foo"", ""FOO"")) .filter(this) .handle(this) .channel(c -> c.queue(""myFlowAdapterOutput"")); } "	0	0	0	0	0	1
private String getVersionName() throws Exception { // 获取packagemanager的实例 return EMClient.getInstance().getVersion().getChatConfig().getVersion(); } 	1	0	1	0	0	0
"@Override public Message newMessage(Uuid id, Uuid author, Uuid conversation, String body, Time creationTime) {  final User foundUser = model.userById().first(author); final Conversation foundConversation = model.conversationById().first(conversation);  Message message = null; Connection connection = null; Statement stmt = null;  String prevID = """";  try{ Class.forName(""org.sqlite.JDBC""); connection = DriverManager.getConnection(""jdbc:sqlite:./bin/codeu/chat/codeU_db/ChatDatabase.db""); connection.setAutoCommit(false);  stmt = connection.createStatement();  ResultSet rs = stmt.executeQuery( ""SELECT * FROM MESSAGES"" + ""where CONVERSATIONID = ""+SQLFormatter.sqlID(conversation)+"" "" + ""AND   MNEXTID = 'NULL';"" ); if ( rs.next() ) { prevID = rs.getString(""ID""); } rs.close(); stmt.close(); }catch (Exception e) { System.out.println(""Error adding message to conversation""); System.err.println(e.getClass().getName() +"": "" + e.getMessage()); System.exit(0); }  if(SQLFormatter.sqlValidConversation(author, conversation)){ try{ stmt = connection.createStatement();  message = new Message(id, Uuid.NULL, Uuid.fromString(prevID), creationTime, author, body); String sql = ""INSERT INTO MESSAGES(ID, USERID, CONVERSATIONID, TimeCreated, MESSAGE)"" + ""VALUES(""+SQLFormatter.sqlID(id)+"",""+SQLFormatter.sqlID(author)+"",""+SQLFormatter.sqlID(conversation)+"",""+SQLFormatter.sqlBody(body)+"",""+SQLFormatter.sqlCreationTime(creationTime)+"");""; stmt.executeUpdate(sql);  stmt.close(); connection.commit(); }catch (Exception e) { System.out.println(""Error adding message to conversation""); System.err.println(e.getClass().getName() +"": "" + e.getMessage()); System.exit(0); } }  if(!prevID.equals("""")){ try {  stmt = connection.createStatement();  String sql = ""UPDATE MESSAGES set MNEXTID = ""+ SQLFormatter.sqlID(id)+""where CONVERSATIONID = ""+SQLFormatter.sqlID(conversation)+"" AND   MNEXTID = 'NULL';""; stmt.executeUpdate(sql);  connection.commit(); stmt.close(); connection.close(); } catch ( Exception e ) { System.err.println( e.getClass().getName() + "": "" + e.getMessage() ); System.exit(0); } }  // --------------------------------------------------------------------- // PREVIOUS MODEL // ---------------------------------------------------------------------  return message; } "	0	0	0	0	0	1
@Override public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception { endpoints .authenticationManager(authenticationManager); } 	0	0	0	0	0	1
"private String generateOAuthToken(String base64ClientID) throws PayPalRESTException { HttpConnection connection = null; HttpConfiguration httpConfiguration = null; String generatedToken = null; try { connection = ConnectionManager.getInstance().getConnection(); httpConfiguration = getOAuthHttpConfiguration(); connection.createAndconfigureHttpConnection(httpConfiguration); Map<String, String> headers = new HashMap<String, String>(); headers.put(Constants.AUTHORIZATION_HEADER, ""Basic "" + base64ClientID);  // Accept only json output headers.put(Constants.HTTP_ACCEPT_HEADER, Constants.HTTP_CONTENT_TYPE_JSON); headers.put(Constants.HTTP_CONTENT_TYPE_HEADER, Constants.HTTP_CONFIG_DEFAULT_CONTENT_TYPE); UserAgentHeader userAgentHeader = new UserAgentHeader( sdkVersion != null ? sdkVersion.getSDKId() : null, sdkVersion != null ? sdkVersion.getSDKVersion() : null); headers.putAll(userAgentHeader.getHeader()); String postRequest = getRequestPayload(); String jsonResponse = connection.execute("""", postRequest, headers); JsonParser parser = new JsonParser(); JsonElement jsonElement = parser.parse(jsonResponse); generatedToken = jsonElement.getAsJsonObject().get(""token_type"") .getAsString() + "" "" + jsonElement.getAsJsonObject().get(""access_token"") .getAsString(); // Save expiry date long tokenLifeTime = jsonElement.getAsJsonObject() .get(""expires_in"").getAsLong(); expires = new Date().getTime() + tokenLifeTime; } catch (Exception e) { throw new PayPalRESTException(e.getMessage(), e); } return generatedToken; } "	0	1	0	0	0	0
public static String computeDefaultTlsProcotol(String[] supportedProtocols) { if(supportedProtocols != null) { for (String supportedProtocol : supportedProtocols) { if(PREFERED_TLS_PROTOCOL.equalsIgnoreCase(supportedProtocol)) { return supportedProtocol; } } } return FALLBACK_TLS_PROTOCOL; } 	0	0	0	1	0	0
"private void setTasks(ObservableList<ReadOnlyTask> taskList) { logger.info("" set tasks ""); initTaskListHashMap(taskListHashMap); for (int i = 0; i < taskList.size(); i++) { if (!taskList.get(i).getEndTiming().isFloating()) { if (taskList.get(i).isRecurring()) { for (int k = 0; k < taskList.get(i).getOccurrences().size(); k++) { for (int j = 0; j < 28; j++) { ListView<String> currentTaskList = taskListHashMap.get(""day"" + (j + 1) + ""TaskList""); String labelDate = dayHashMap.get(""day"" + (j + 1)).getText().toString(); String taskDate = taskList.get(i).getOccurrences().get(k).getEndTiming().toString(); String[] taskListDateData = taskDate.toString().split(""/"");  String test = String.valueOf( taskList.get(i).getOccurrences().get(k).getEndTiming().getTiming().getMonth() + 1 ); String taskDateYear = String.valueOf( taskList.get(i).getOccurrences().get(k).getEndTiming().getTiming().getYear() + 1900 ); String taskDateMonth = String.valueOf( taskList.get(i).getOccurrences().get(k).getEndTiming().getTiming().getMonth() + 1 ); String taskDateDate = String.valueOf( taskList.get(i).getOccurrences().get(k).getEndTiming().getTiming().getDate() );   if (( taskDateDate + ""/"" + taskDateMonth).equals(labelDate) && taskDateYear.equals(year.getText())) { currentTaskList.getItems().addAll(taskList.get(i).getDescription().toString()); System.out.println(""@@""); } } } } else { for (int j = 0; j < 28; j++) { ListView<String> currentTaskList = taskListHashMap.get(""day"" + (j + 1) + ""TaskList""); String labelDate = dayHashMap.get(""day"" + (j + 1)).getText().toString(); Date taskDate = taskList.get(i).getEndTiming().getTiming(); String[] taskListDateData = taskDate.toString().split(""/""); String taskDateMonth = String.valueOf(taskDate.getMonth() + 1); String taskDateDate = String.valueOf(taskDate.getDate()); if ((taskDateMonth + ""/"" + taskDateDate).equals(labelDate)) { currentTaskList.getItems().addAll(taskList.get(i).getDescription().toString());  } } } } } } "	0	0	0	0	0	1
public void deleteMarkers() throws CoreException { file.deleteMarkers(IRascalResources.ID_RASCAL_MARKER, false, IFile.DEPTH_ZERO); } 	1	0	1	1	1	0
@Override public boolean func_149852_a(World world, Random p_149852_2_, int x, int y, int z) { //shouldFertilize return true; } 	0	0	0	0	0	1
"@Override public int getAge() { return base.getProperty( primaryKey, ""age"", Integer.class); } "	0	0	0	0	0	1
"@Override public void flushInMemory(long flushOpSeqId) { MemStoreSegment active = getActive(); LOG.info(""Pushing active set into compaction pipeline, and initiating compaction.""); pushActiveToPipeline(active); Long now = System.currentTimeMillis(); timestampToWALSeqId.put(now,flushOpSeqId); try { // Speculative compaction execution, may be interrupted if flush is forced while // compaction is in progress compactor.startCompact(store); } catch (IOException e) { LOG.error(""Unable to run memstore compaction"", e); }  } "	1	0	1	0	0	0
"private static long readInteger(long min, long max) throws NumberFormatException { BufferedReader bf = null; int x = Integer.MIN_VALUE; try{ bf = new BufferedReader(new InputStreamReader (System.in)); StringBuffer sb = new StringBuffer(); boolean fin = true; while(fin) { char s = (char)bf.read(); if(s == ' ' || !Character.isDigit(s)) { fin = false; } else{ sb.append(s); } } x = Integer.parseInt(sb.toString()); } catch(IOException e1) {System.err.println(""IOException readInteger() InOut :"" + e1.getMessage());} catch(NumberFormatException e2) {System.err.println(""NumberFormatException readInteger() InOut :"" + e2.getMessage());} catch(Exception e3) {System.err.println(""Exception readInteger() InOut :"" + e3.getMessage());}  if(x > max || x < min) { throw new NumberFormatException(""Nombre trop grand ou trop petit max = ""+ max + ""   min = ""+ min + ""    nombre = "" + x); } return x; } "	1	1	0	1	1	0
"public void validate(List<String> notifications) { if (biomes.isEmpty()) { notifications.add(""No biomes for filter""); } else { for (String name : biomes) { if (Biome.exists(name)) { notifications.add(""invalid biome name: '"" + name + ""'""); } } } } "	1	1	1	1	0	0
@Override public void onDataChange(DataSnapshot dataSnapshot) { User user = dataSnapshot.getValue(User.class); chatView.setName(user.name); chatView.setText(chat.getChatMessage());  FirebaseUser currentUser = firebaseAuth.getCurrentUser(); if (currentUser != null && chat.getUserKey().equals(user.getKey())) { chatView.setIsSender(true); } else { chatView.setIsSender(false); } } 	0	1	0	0	0	0
public void populateAndKeepPictureURL(List<NameValuePair> oldPairs, List<NameValuePair> newPairs) { if (oldPairs == null) return; ArrayList<Picture> pictures = new ArrayList<Picture>(); for (int i = 0; i < oldPairs.size(); i++) { NameValuePair oldPair = oldPairs.get(i); NameValuePair newPair = newPairs.get(i); Picture picture = new Picture(newPair.getName(), null, oldPair.getValue()); pictures.add(picture); } populateImages(pictures); } 	1	1	1	0	1	0
public void Update() {  if(view==null) return;  if(eventDataList!= null) eventDataList.clear();  dbHelper helper=new dbHelper(getContext()); eventDataList=helper.GetUpcomingEvents(helper.getReadableDatabase()); helper.close();  if (eventDataList.size() == 0) { view.findViewById(R.id.NoUpcoming).setVisibility(View.VISIBLE); } else { view.findViewById(R.id.NoUpcoming).setVisibility(View.INVISIBLE);  ListView listView = (ListView) view.findViewById(R.id.upcomingList); listView.setAdapter(new eventItemAdapter(eventDataList, getContext(), true));  listView.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { int EventID = eventDataList.get(position).eventID; Intent intent = new Intent(getContext(), eventDetail.class); intent.putExtra(getString(R.string.EventID), EventID); intent.putExtra(getString(R.string.TabID), 0); startActivity(intent); } }); } } 	1	1	1	1	0	0
public Band getBandsBandMember (Request req, Response res){ return null; } 	0	0	0	0	0	1
"@Override protected void onPostExecute(Object[] result) { super.onPostExecute(result);  Context context = (Context) result[0]; UserModel usr = (UserModel) result[1];  if (usr != null && usr.id != null & !usr.id.trim().equals("""")) { Intent i = new Intent(); i.setAction(Intent.ACTION_MAIN); i.setClass(context, UserTimeLineActivity.class); i.putExtra(""user"", usr); context.startActivity(i); } } "	1	0	1	1	1	0
"@Override public StormTopology execute(Config config, StormEnvironment environment) {  MetricDescriptor hadoopMetricDescriptor = MetricDescriptor.metricGroupAs((MetricGroupSelector) event -> { if (event.containsKey(""component"")) { return String.format(""hadoop.%s"", ((String) event.get(""component"")).toLowerCase()); } else { return ""hadoop.metrics""; } }) .siteAs(AppConfigUtils.getSiteId(config)) .namedByField(""metric"") .eventTimeByField(""timestamp"") .dimensionFields(""host"", ""component"", ""site"") .granularity(Calendar.SECOND) .valueField(""value"");  MetricDescriptor systemMetricDescriptor = MetricDescriptor.metricGroupByField(""group"") .siteAs(AppConfigUtils.getSiteId(config)) .namedByField(""metric"") .eventTimeByField(""timestamp"") .dimensionFields(""host"", ""group"", ""site"", ""device"") .granularity(Calendar.SECOND) .valueField(""value""); return environment.newApp(config) .fromStream(""HADOOP_JMX_METRIC_STREAM"").transformBy(new CounterToRateFunction(hadoopMetricDescriptor,3, TimeUnit.SECONDS, ClockWithOffset.INSTANCE)) .saveAsMetric(hadoopMetricDescriptor) .fromStream(""SYSTEM_METRIC_STREAM"").transformBy(new CounterToRateFunction(hadoopMetricDescriptor,3, TimeUnit.SECONDS, ClockWithOffset.INSTANCE)) .saveAsMetric(systemMetricDescriptor ) .toTopology(); } "	0	0	0	0	0	1
public float getVisualX() { return getLeftX(); } 	0	0	0	0	0	1
public float getVisualRightX() { return getRightX(); } 	0	0	0	0	0	1
"@Parameters({ ""start.server"" }) @Test(dependsOnMethods = { ""getDomainsAfterFileModifications"" }) public void deleteDomainAfterDirectoryDeleted(@Optional(""true"") boolean startServer) throws IllegalArgumentException, IOException { // skip test if server not started locally if (!startServer) { return; }  // delete on disk FlatFileDAOUtils.deleteDirectory(SAMPLE_DOMAIN_DIR, 2);  // sync API cache DomainResource domainRes = client.getDomainResource(SAMPLE_DOMAIN_ID); DomainProperties deletedDomainProps = domainRes.deleteDomain(); // make sure it's done try { // try to do something on the domain expected to be deleted -> // MUST fail domainRes.getDomain(); fail(""Error deleting domain with API deleteDomain() after deleting directory on disk: getDomain() still returns 200""); } catch (NotFoundException nfe) { // OK }  // try with externalId List<Link> links = client.getDomains(deletedDomainProps.getExternalId()).getLinks(); assertTrue( links.isEmpty(), ""Error deleting domain with API deleteDomain() after deleting directory on disk: getDomains(externalId) still returns link to domain"");  } "	1	0	1	1	1	0
public Iterable<Board> neighbors() { Set<Board> set = new HashSet<Board>(); int i = -1; for (i = 0; i < blocks.length; i++) { if(blocks[i] == 0) { break; } }  // not top row if (getRows(i) > 0) { int[] c = blocks.clone(); swap(c, i, above(i)); set.add(makeBoard(c)); }  // not bottom row if (getRows(i) < dimension() - 1) { int[] c = blocks.clone(); swap(c, i, below(i)); set.add(makeBoard(c)); }  // not left row if (getCols(i) > 0) { int[] c = blocks.clone(); swap(c, i, left(i)); set.add(makeBoard(c)); }  // not right row if (getCols(i) > 0) { int[] c = blocks.clone(); swap(c, i, right(i)); set.add(makeBoard(c)); }  return set; } 	1	0	1	0	0	0
"@SuppressWarnings(""unchecked"") public static <T> ListWrapper<T> deserializeToListWrapper(String content, Class<T> clazz, String... matchPattern) { XMLStreamReader xr = null; XMLStreamWriter xw = null; try { xr = XMLInputFactory.newInstance().createXMLStreamReader( new StringReader(content)); List<Pattern> patterns = new ArrayList<Pattern>(); for (String pattern : matchPattern) { patterns.add(Pattern.compile(pattern)); } Matcher matcher = null; Map<String, Map<String, String>> outMap = new HashMap<String, Map<String, String>>(); while (true) { int event = xr.next(); if (event == XMLStreamConstants.END_DOCUMENT) { break; } else if (event == XMLStreamConstants.START_ELEMENT) { String name = xr.getLocalName(); for (Pattern pattern : patterns) { if ((matcher = pattern.matcher(name)).find()) { while (true) { event = xr.next(); if (event == XMLStreamConstants.START_ELEMENT) { name = xr.getLocalName(); } else if (event == XMLStreamConstants.END_ELEMENT) { break; } else if (event == XMLStreamConstants.CHARACTERS) { String key = matcher.group(); if (!pattern.pattern().equals( DEFAULT_PATTERN.pattern())) { matcher = DEFAULT_PATTERN.matcher(name); matcher.find(); key = matcher.group(); } Map<String, String> innerMap = null; if ((innerMap = outMap.get(key)) == null) { innerMap = new HashMap<String, String>(); outMap.put(key, innerMap); } innerMap.put(name.replace(key, """"), xr.getText()); } } break; } } } } if (!outMap.isEmpty()) { StringWriter sw = new StringWriter(); xw = XMLOutputFactory.newInstance().createXMLStreamWriter(sw); xw.writeStartDocument(Consts.UTF_8.name(), ""1.0""); xw.writeStartElement(clazz.getCanonicalName()); String itemName = StringUtil .uncapitalize(clazz.getSimpleName()); XmlRootElement rootElement = clazz .getAnnotation(XmlRootElement.class); if (rootElement != null && StringUtil.isNotBlank(rootElement.name())) { try { if (!rootElement.name().equals( XmlRootElement.class.getMethod(""name"") .getDefaultValue().toString())) { itemName = rootElement.name(); } } catch (NoSuchMethodException e) { ; } } for (Iterator<Entry<String, Map<String, String>>> outIt = outMap .entrySet().iterator(); outIt.hasNext();) { xw.writeStartElement(itemName); for (Iterator<Entry<String, String>> innerIt = outIt.next() .getValue().entrySet().iterator(); innerIt .hasNext();) { Entry<String, String> entry = innerIt.next(); xw.writeStartElement(entry.getKey()); xw.writeCharacters(entry.getValue()); xw.writeEndElement(); } xw.writeEndElement(); } xw.writeEndElement(); xw.writeEndDocument(); JAXBContext ctx = JAXBContext.newInstance(ListWrapper.class, clazz); Unmarshaller u = ctx.createUnmarshaller(); return u.unmarshal( new StreamSource(new StringReader(sw.getBuffer() .toString())), ListWrapper.class).getValue(); } return null; } catch (XMLStreamException e) { throw new IllegalArgumentException(e); } catch (JAXBException e) { throw new RuntimeException(e); } finally { try { if (xw != null) { xw.close(); } if (xr != null) { xr.close(); } } catch (XMLStreamException e) { ; } } } "	0	1	0	0	0	0
@Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.issue_menu, menu); menu.findItem(R.id.closeIssue).setVisible(getPresenter().isOwner()); menu.findItem(R.id.lockIssue).setVisible(getPresenter().isOwner()); menu.findItem(R.id.labels).setVisible(getPresenter().isOwner()); return super.onCreateOptionsMenu(menu); } 	0	1	0	0	0	0
@Override public boolean onPrepareOptionsMenu(Menu menu) { MenuItem closeIssue = menu.findItem(R.id.closeIssue); MenuItem lockIssue = menu.findItem(R.id.lockIssue); boolean isOwner = getPresenter().isOwner(); boolean isLocked = getPresenter().isLocked(); Logger.e(isOwner); menu.findItem(R.id.closeIssue).setVisible(isOwner); menu.findItem(R.id.lockIssue).setVisible(isOwner); menu.findItem(R.id.labels).setVisible(isOwner); if (isOwner) { //noinspection ConstantConditions ( getIssue at this stage is not null but AS doesn't know. ) closeIssue.setTitle(getPresenter().getIssue().getState() == IssueState.closed ? getString(R.string.re_open) : getString(R.string.close)); lockIssue.setTitle(isLocked ? getString(R.string.unlock_issue) : getString(R.string.lock_issue)); }  return super.onPrepareOptionsMenu(menu); } 	0	1	0	0	0	0
"public void setAutoSave(boolean enabled) { if (enabled) { autoSaveFile = getSaveFile(""logger++_auto"", true); if (autoSaveFile != null) { loggerPreferences.setAutoSave(true); try { autoSaveWriter = new FileWriter(autoSaveFile, true); if (autoSaveFile.length() == 0) exp.addHeader(autoSaveWriter, false);  BurpExtender.getInstance().addLogListener(this);  } catch (IOException e) { autoSaveFile = null; enabled = false; } } else { enabled = false; } } else { autoSaveFile = null; try{ autoSaveWriter.close(); } catch (IOException e) {} autoSaveWriter = null; BurpExtender.getInstance().removeLogListener(this); } loggerPreferences.setAutoSave(enabled); BurpExtender.getInstance().getLoggerOptionsPanel().setAutoSaveBtn(enabled); } "	0	0	0	0	0	1
"@Override public void submitProduct(final Product product, final ICallback<String> callback) { Log.d(""Product"",product.toString()); URL url = new URL(mContext, R.string.path_product_product); Log.d(""Submit Product URL"",url.toString()); ProductThumbnailResponse response = new ProductThumbnailResponse(callback); AuthorizedStringRequest stringRequest = new AuthorizedStringRequest(mContext, com.android.volley.Request.Method.POST, url.toString(), response, response) { @Override protected Map<String, String> getParams() { Map<String, String> params = new HashMap<>(); params.put(mContext.getString(R.string.params_product_name), product.getName()); params.put(mContext.getString(R.string.params_product_description), product.getDescription()); params.put(mContext.getString(R.string.params_product_price), product.getPricePerUnit()); params.put(mContext.getString(R.string.params_product_quantity), Integer.toString(product.getQuantity())); params.put(mContext.getString(R.string.params_product_category_ids), product.getCategoriesJSON()); params.put(mContext.getString(R.string.params_product_meta_title), ""meta_title""); params.put(mContext.getString(R.string.params_product_status), mContext.getString(R.string.params_product_status_enabled));  return params; } };  stringRequest.setAuthorization(new Authorization(mContext, mAuthorizationCache.getAuthorization()).toString()); mRequestQueue.add(stringRequest); } "	0	1	0	0	0	0
"public boolean areElementsAllSatisfyDependencySources(){  final String[] theSatisfyStatechartDiagramMetaClasses = { ""Transition"", ""State"" , ""DefaultTransition"" };  final String[] theSatisfyNonDiagramMetaClasses = { ""Operation"", ""Event"", ""Attribute"" };  boolean isMatchFoundForAll = true;  for( DiagramElementInfo DiagramElementInfo : this ){  IRPModelElement theEl = DiagramElementInfo.getElement();  boolean isADiagramSatisfyMetaClass = doesElementMatchOneOfTheTypes( theEl, theSatisfyStatechartDiagramMetaClasses );  boolean isANonDiagramSatisfyMetaClass = doesElementMatchOneOfTheTypes( theEl, theSatisfyNonDiagramMetaClasses );  if( !isADiagramSatisfyMetaClass && !isANonDiagramSatisfyMetaClass ){  isMatchFoundForAll = false; break;  } else if (isADiagramSatisfyMetaClass && !(theEl.getOwner() instanceof IRPStatechart) ){  isMatchFoundForAll = false; Logger.writeLine( theEl.getOwner(), ""is the owner of "" + Logger.elementInfo( theEl )); break; } }  Logger.writeLine( ""areElementsAllSatisfyDependencySources is returning "" + isMatchFoundForAll );  return isMatchFoundForAll; } "	0	0	0	0	0	1
"@Test public void TestRegisterMember1() { int oldMemberCount = MemberManager.getMemberManager().getAllMembers().size(); try { MemberManager.getMemberManager().addMember(""B0135868R"", ""Zhu Bin""); } catch (Exception e) { Assert.fail(""failed to add a member""); } Assert.assertEquals(MemberManager.getMemberManager().getAllMembers().size(), oldMemberCount+1); } "	0	0	0	0	0	1
@Override public List<Setting<?>> getSettings() { return Arrays.asList( AzureManagementService.Management.CLIENT_ID_SETTING, AzureManagementService.Management.SECRET_SETTING, AzureManagementService.Management.SUBSCRIPTION_ID_SETTING, AzureManagementService.Management.TENANT_ID_SETTING, AzureManagementService.Discovery.HOST_GROUP_NAME_SETTING, AzureManagementService.Discovery.HOST_NAME_SETTING, AzureManagementService.Discovery.HOST_TYPE_SETTING, AzureManagementService.Discovery.REFRESH_SETTING, AzureManagementService.Discovery.REGION_SETTING); } 	0	0	0	0	0	1
@Override public void finishSubscribeToProject(long id, File[] files) { PluginManager pm = PluginManager.getInstance(); MetadataManager metaMgr = pm.getMetadataManager(); IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot(); Project p = pm.getDataManager().getSessionStorage().getProjectById(id); IProject eclipseProject = root.getProject(p.getName()); NullProgressMonitor progressMonitor = new NullProgressMonitor();  // create & open a new project, deleting the old one if it exists try { pm.putProjectInWarnList(p.getName(), ProjectDeleteNotification.class); if (eclipseProject.exists()) { eclipseProject.delete(true, true, progressMonitor); } pm.putProjectInWarnList(p.getName(), ProjectCreateRequest.class); eclipseProject.create(progressMonitor); eclipseProject.open(progressMonitor); } catch (CoreException e) { e.printStackTrace(); }  // create project metadata and write the metadata to disk ProjectMetadata pmeta = new ProjectMetadata(); pmeta.setName(p.getName()); pmeta.setProjectID(id); List<FileMetadata> fileMetadatas = new ArrayList<>(); for (File f : files) { fileMetadatas.add(new FileMetadata(f)); pullFileAndCreate(eclipseProject, p, f, progressMonitor, false); } pmeta.setFiles(fileMetadatas); metaMgr.putProjectMetadata(eclipseProject.getLocation().toString(), pmeta); metaMgr.writeProjectMetadataToFile(pmeta, eclipseProject.getLocation().toString(), CoreStringConstants.CONFIG_FILE_NAME); } 	1	1	1	1	0	0
"public static ExpectedCondition<WebElement> visibilityOfElementLocatedBy(By locator) { return new ExpectedCondition<WebElement>() { @Override public WebElement apply(final WebDriver driver) { try { final WebElement foundElement = driver.findElement(locator); return (foundElement.isDisplayed() || isElementHiddenUnderScroll(foundElement)) ? foundElement : null; } catch (Exception e) { return null; } }  @Override public String toString() { return String.format(""visibility of element located by %s"", locator); } }; } "	0	0	0	0	0	1
@Test public void selectNonexistentUser() throws ServiceException { long userId = -1l; User user = userService.viewUser(userId); assertNull(user); } 	1	0	1	1	1	0
@Override protected void updateItem(Task task, boolean empty) { super.updateItem(task, empty);  if (empty || task == null) { setGraphic(null); setText(null); } else { final UiView taskRow = new TaskUiView(task, getIndex() + 1); setGraphic(taskRow.getRoot()); taskRow.render(); } } 	1	0	1	0	0	0
"@Override public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException { if (!(sender instanceof EntityPlayerMP)) { FMLLog.info(""Sorry, this command is not available through the server command line interface""); return; }  JsonObject baseRecipeObject = new JsonObject(); JsonArray recipeListArray = new JsonArray(); RecipeEncoder recipeEncoder = new RecipeEncoder();  baseRecipeObject.add(""recipes"", recipeListArray);  for (IModSupportService supportService : MinecraftResourceDumperMod.minecraftResourceDumperAPI.getModSupportServiceRepository().getModSupportServices()) { for (Recipe recipe : supportService.getRecipes()) { if (recipe == null) continue;  boolean shouldFilterRecipe = false;  for (IRecipeFilter filter : MinecraftResourceDumperMod.minecraftResourceDumperAPI.getRecipeFilterRegistry().getRecipeFilters()) { if (filter.shouldFilterRecipe(recipe)) { shouldFilterRecipe = true; break; } }  if (shouldFilterRecipe) continue;  recipeListArray.add(recipeEncoder.encodeRecipe(recipe)); } }  String recipeListData = JsonUtils.writeJsonObjectToString(baseRecipeObject); byte[] recipeListBytes = recipeListData.getBytes();  MinecraftResourceDumperMod.networking.sendTo(new RecipeListTransferStartPacket(), (EntityPlayerMP) sender);  int packetFragmentCount = (int)Math.ceil(recipeListBytes.length / (double)RecipeListFragmentPacket.MAX_PAYLOAD_SIZE); int payloadStartPos = 0; int payloadLength = 0;  for (int i = 0; i < packetFragmentCount; i++) { payloadStartPos = i * RecipeListFragmentPacket.MAX_PAYLOAD_SIZE; payloadLength = (recipeListBytes.length - payloadStartPos) > RecipeListFragmentPacket.MAX_PAYLOAD_SIZE ? RecipeListFragmentPacket.MAX_PAYLOAD_SIZE : recipeListBytes.length - payloadStartPos;  MinecraftResourceDumperMod.networking.sendTo(new RecipeListFragmentPacket(recipeListBytes, payloadStartPos, payloadLength), (EntityPlayerMP) sender); }  MinecraftResourceDumperMod.networking.sendTo(new RecipeListTransferFinishPacket(), (EntityPlayerMP) sender); } "	0	0	0	0	0	1
public float getX() { return pos.x; } 	1	0	1	0	0	0
"@Override protected void onHandleIntent(Intent intent) { Log.d(TAG, ""Updating recommendation cards""); HashMap<String, List<Movie>> recommendations = VideoProvider.getMovieList();  int count = 0;  try { RecommendationBuilder builder = new RecommendationBuilder() .setContext(getApplicationContext()) .setSmallIcon(R.drawable.videos_by_google_icon);  for (HashMap.Entry<String, List<Movie>> entry : recommendations.entrySet()) { for (int i = 0; i < entry.getValue().size(); i++) { Movie movie = entry.getValue().get(i); Log.d(TAG, ""Recommendation - "" + movie.getTitle());  builder.setBackground(movie.getCardImageUrl()) .setId(count + 1) .setPriority(MAX_RECOMMENDATIONS - count) .setTitle(movie.getTitle()) .setDescription(getString(R.string.popular_header)) .setImage(movie.getCardImageUrl()) .setIntent(buildPendingIntent(movie)) .build();  if (++count >= MAX_RECOMMENDATIONS) { break; } } if (++count >= MAX_RECOMMENDATIONS) { break; } } } catch (IOException e) { Log.e(TAG, ""Unable to update recommendation"", e); } } "	0	0	0	0	0	1
"protected void testTravelAccountLookUpXss(String fieldName) throws Exception { waitAndTypeByName(fieldName,""\""/><script>alert('!')</script>""); waitAndClickButtonByText(SEARCH); Thread.sleep(1000);  if(isAlertPresent())    { jiraAwareFail(fieldName + "" caused XSS.""); } waitAndClickButtonByText(CLEAR_VALUES); Thread.sleep(1000); } "	0	0	0	0	0	1
"@Test public void colorRule_deleteColumnRule() { onData(withKey(COLUMNS_LIST)).perform(click()); onData(is(elementKeyName)).perform(click()); onData(withKey(""column_pref_color_rules"")).perform(click());  List<ColorRule> currentRules = null; try { //backup + empty out current rules currentRules = emptyCRG(ColorRuleGroup.Type.COLUMN);  //add some rules List<ColorRule> newRules = new ArrayList<>(); newRules.add(addColorRule(true, true, false)); newRules.add(addColorRule(true, false, true));  //delete one rule deleteColorRule(newRules.get(1)); newRules.remove(1); CRGCheck(newRules, ColorRuleGroup.Type.COLUMN);  //delete all rules onView(withId(R.id.menu_color_rule_list_revert)).perform(click()); onView(withId(android.R.id.button1)).perform(click()); CRGCheck(new ArrayList<ColorRule>(), ColorRuleGroup.Type.COLUMN); } catch (ServicesAvailabilityException e) { e.printStackTrace(); } finally { if (currentRules != null) { try { ColorRuleGroup crg = getCRG(ColorRuleGroup.Type.COLUMN, db, adminColumns); crg.replaceColorRuleList(currentRules); crg.saveRuleList(Tables.getInstance()); } catch (ServicesAvailabilityException e) { e.printStackTrace(); } } } } "	0	1	0	0	0	0
"public void saveDetails(View view) { travel =  new Travel(); Address departureAddress =  new Address(); Address arrivalAddress =  new Address();  //User user  =  new User(); travel.setUserId(""c655fd62-41e0-4ac1-8bbb-737c03666a42""); travel.setId(""123456"");  Location departureLocation = travelDepartureFragment.getDepartureLocation(); departureAddress.setLocation(departureLocation); DateTime departureDateTIme = travelDepartureFragment.getDepartureDateTime(); travel.setDepartureDate(departureDateTIme); travel.setDepartureAddress(departureAddress);  Location arrivalLocation = travelArrivalFragment.getArrivalLocation(); arrivalAddress.setLocation(arrivalLocation); DateTime arrivalDateTime = travelArrivalFragment.getArrivalDateTime(); travel.setDepartureDate(arrivalDateTime); travel.setArrivalAddress(arrivalAddress);  FirebaseCollection<Travel> firebaseCollection = new FirebaseCollection<Travel>(Constants.TRAVELS,Travel.class); firebaseCollection.save(travel, new DataCallback<Travel>() { @Override public void onSuccess(Travel data) { Log.d(TAG, ""SUCCESS""); new AlertDialog.Builder(CreateTravelActivity.this).setTitle(""Travel Details"") .setMessage(""Travel Details Successfully saved"").setPositiveButton(""Ok"", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { } }).show(); }  @Override public void onError(String errorMessage) { Log.d(TAG, errorMessage); } }); } "	0	0	0	0	0	1
"public static SecretKey generateKey(String algorithm, int size) throws KeyException { KeyGenerator keyGen = null; try { keyGen = KeyGenerator.getInstance(algorithm); } catch (NoSuchAlgorithmException e) { throw new KeyException(""Cannot initialize key generator"", e); }  SecureRandom random = new SecureRandom(); keyGen.init(size, random);  return keyGen.generateKey(); } "	0	0	0	0	0	1
"@Test public void test() { fail(""Not yet implemented""); } "	0	0	0	0	0	1
"@Override public FSDataOutputStream create(Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress) throws IOException { if (exists(f) && !overwrite) { throw new IOException(""File already exists:""+f); } Path absolutePath = makeAbsolute(f); String key = pathToKey(absolutePath); return new FSDataOutputStream(new NativeOssFsOutputStream(getConf(), store, key, false, progress, bufferSize), statistics); } "	0	0	0	1	0	0
"@JsonMappingCompleted protected void fillPicture(JsonMapper jsonMapper) { picture = null;  if (rawPicture == null) return;  String picJson = rawPicture.getJsonObject(""data"").toString(); picture = jsonMapper.toJavaObject(picJson, User.Picture.class); } "	0	1	0	0	0	0
"@Override public void execute(CommandSender sender, String[] args) { if(args.length == 0) { Map<String, String[]> langInfo = new HashMap<>();  langInfo.put(""zh-cn"", new String[]{ Message.CHAT_PREFIX.get() + ""NovaGuilds 公会插件信息"", ""&2NovaGuilds &6#&c"" + VersionUtils.buildCurrent, ""&2作者: &6Marcin (CTRL) Wieczorek"", ""&22015 &4波&f兰"", ""&6网址: &bhttp://novaguilds.pl/"", ""&2最新插件构建: &6#&c"" + VersionUtils.buildLatest });  langInfo.put(""en-en"", new String[]{ Message.CHAT_PREFIX.get() + ""NovaGuilds Information"", ""&2NovaGuilds &6#&c"" + VersionUtils.buildCurrent, ""&2Author: &6Marcin (CTRL) Wieczorek"", ""&22015 &4Pol&fand"", ""&bhttp://novaguilds.pl/"", ""&2Latest plugin build: &6#&c"" + VersionUtils.buildLatest });  langInfo.put(""pl-pl"", new String[]{ Message.CHAT_PREFIX.get() + ""NovaGuilds Informacje"", ""&2NovaGuilds &6#&c"" + VersionUtils.buildCurrent, ""&2Autor: &6Marcin (CTRL) Wieczorek"", ""&22015 &4Pol&fska"", ""&bhttp://novaguilds.pl/"", ""&2Najnowsza wersja pluginu: &6#&c"" + VersionUtils.buildLatest });  String[] info = langInfo.get(Config.LANG_NAME.getString());  for(String i : info) { sender.sendMessage(StringUtils.fixColors(i)); }  return; }  switch(args[0].toLowerCase()) { case ""tool"": Command.TOOL_GET.execute(sender, args); break; case ""bank"": if(!sender.hasPermission(""novaguilds.test.bank"")) { Message.CHAT_NOPERMISSIONS.send(sender); return; }  if(sender instanceof Player) { NovaPlayer nPlayer = plugin.getPlayerManager().getPlayer(sender); if(nPlayer.hasGuild()) { ((Player) sender).getInventory().addItem(Config.VAULT_ITEM.getItemStack()); } } break; case ""admin"": Command.ADMIN_ACCESS.execute(sender, StringUtils.parseArgs(args, 1)); break; case ""group"": NovaGroup group = plugin.getGroupManager().getGroup(sender);  if(args.length > 1) { group = plugin.getGroupManager().getGroup(args[1]); if(group == null) { sender.sendMessage(""Invalid group""); return; } }  sender.sendMessage(""name = "" + group.getName()); sender.sendMessage(""guildCreateMoney = "" + group.getGuildCreateMoney()); sender.sendMessage(""guildHomeMoney = "" + group.getGuildHomeMoney()); sender.sendMessage(""guildJoinMoney = "" + group.getGuildJoinMoney()); sender.sendMessage(""guildCreateItems = "" + group.getGuildCreateItems().toString()); sender.sendMessage(""guildHomeItems = "" + group.getGuildHomeItems().toString()); sender.sendMessage(""guildJoinItems = "" + group.getGuildJoinItems().toString()); sender.sendMessage(""guildEffectItems = "" + group.getGuildEffectItems().toString()); sender.sendMessage(""guildEffectMoney = "" + group.getGuildEffectPrice()); sender.sendMessage(""guildTeleportDelay = "" + group.getGuildTeleportDelay() + ""s""); sender.sendMessage(""regionCreateMoney = "" + group.getRegionCreateMoney()); sender.sendMessage(""regionPricePerBlock = "" + group.getRegionPricePerBlock()); break; case ""g"": case ""guild"": Command.GUILD_ACCESS.execute(sender, StringUtils.parseArgs(args, 1)); break; case ""tr"": Tablist.patch();  for(Player player : plugin.getServer().getOnlinePlayers()) { NovaPlayer.get(player).getTablist().send(); } break; default: Message.CHAT_UNKNOWNCMD.send(sender); break; } } "	0	0	0	0	0	1
"@Override public boolean keyDown(int keycode) { if (keycode == Input.Keys.SPACE) { players[activePlayerIdx].switchLanes();  boolean playerIsOnFirstLane = players[activePlayerIdx].isOnFirstLane();  // Tween animations if (!playerIsOnFirstLane) { Tween.to(opacityLayer1, -1, .5f) .target(.5f) .ease(TweenEquations.easeOutQuad) .start(tweener); Tween.to(opacityLayer2, -1, .5f) .target(1f) .ease(TweenEquations.easeOutQuad) .start(tweener); } else { Tween.to(opacityLayer1, -1, .5f) .target(1f) .ease(TweenEquations.easeOutQuad) .start(tweener); Tween.to(opacityLayer2, -1, .5f) .target(.5f) .ease(TweenEquations.easeOutQuad) .start(tweener); } }  if (keycode == Input.Keys.R) { game.getGameStateManager().setScreen(new PlayState(game, 1, null, ""Map1.tmx"")); }  return true; } "	0	1	0	0	0	0
@Override protected Rectangle getFrameArea(Rectangle origin) { if (!model.isMinimizedView()) { return new Rectangle(origin.x + GRID_SIZE / 2, origin.y, origin.width - GRID_SIZE, origin.height); } return super.getFrameArea(origin); } 	1	1	0	1	1	0
private void print(String msg) { LOG.info(msg); System.out.println(); } 	0	0	0	1	0	0
public static Test suite() { return new TestSuite(LoginServiceTest.class); } 	0	0	0	0	0	1
private List<IPath> findDerivedResources(IContainer c) throws CoreException { List<IPath> derived = new ArrayList<IPath>(); IResource[] members = c.members(IContainer.INCLUDE_HIDDEN); for (IResource r : members) { if (r.isDerived()) derived.add(r.getLocation()); else if (r instanceof IContainer) derived.addAll(findDerivedResources((IContainer) r)); } return derived; } 	1	0	1	0	0	0
"public File getResourceRootPath(String version) throws IOException, ConfigurationException {  //Fetch root path for resources from .damascus first. //Damascus uses resource in this jar if no configration is found in .damascus. String rootPath = PropertyUtil.getInstance().getProperty(DamascusProps.PROP_RESOURCE_ROOT_PATH);  log.debug(""getResourceRootPath : rootPath : "" + rootPath);  if (rootPath.equals("""")) { rootPath = DamascusProps.TEMPLATE_FILE_PATH + DamascusProps.DS + version; PropertyUtil.getInstance().setProperty(DamascusProps.PROP_RESOURCE_ROOT_PATH, rootPath).save(); System.out.println(DamascusProps.PROP_RESOURCE_ROOT_PATH + "" is initilized with <"" + rootPath + "">""); }  return new File(rootPath); } "	0	1	0	0	0	0
@Override public void f() { otherRemoved[0] = true; } 	0	0	0	0	0	1
@Model protected void loadBullet(Bullet bullet) throws IllegalArgumentException{ if(bullet.getShip()==this){ loadedBullets.add(bullet); bullet.setLoadedOnShip(true); } else throw new IllegalArgumentException(); } 	1	0	1	1	1	0
"public boolean unfollowTag(TagDTO tag) { log.debug(""Removing followed tag : {}"", tag); User currentUser = userRepository.findOneByEmail(userDetailsService.getUserEmail()).get(); boolean tagAlreadyFollowed = false; for (String alreadyFollowingTest : userTagRepository.findTags(currentUser.getEmail())) { if (alreadyFollowingTest.equals(tag.getName())) { tagAlreadyFollowed = true; } } if (tagAlreadyFollowed) { String domain = DomainUtil.getDomainFromEmail(currentUser.getEmail()); userTagRepository.removeTag(currentUser.getUsername(), tag.getName()); tagFollowerRepository.removeFollower(domain, tag.getName(), currentUser.getEmail()); log.debug(""User "" + currentUser.getUsername() + "" has stopped following tag "" + tag);  return true; } else { return false; } } "	1	0	1	1	1	0
"private Node buildTree() throws Exception { Node node = null; String value = CharFeed.nextWord(); if (BinaryOperator.isBinaryOperator(value)) { BinaryOperator op = new BinaryOperator(value); CharFeed.nextChar(); Node left = buildTree(); CharFeed.nextChar(); Node right = buildTree(); node = new BinaryBranch(op, left, right); } else if (UnaryOperator.isUnaryOperator(value)) { UnaryOperator op = new UnaryOperator(value); CharFeed.nextChar(); Node left = buildTree(); node = new UnaryBranch(op, left); } else if (Character.isDigit(value.charAt(0))) { node = new Leaf(new Variable(Double.parseDouble(value))); } else if (Character.isLetter(value.charAt(0))) { node = new Leaf(new Constant(value)); } else if ('-' == value.charAt(0)) { node = new Leaf(new Variable(0 - Double.parseDouble(value.substring(1, value.length())))); } else if (value.charAt(0) != StringCharacterIterator.DONE) { throw new IllegalArgumentException(""AST invalid character""); } return node; } "	0	0	0	0	0	1
"@Test public void LoopTest3() throws Exception{ AST a = new AST(""Hello""); String root = a.toString(); assertEquals(""Hello"",root); } "	0	0	0	0	0	1
"private ObjectNode convertPrimitive( String type, SchemaDescription.Field f ) { ObjectNode fieldNode = mapper.createObjectNode();  fieldNode.put( AVRO_NAME_NODE, f.formatFieldName ); if ( f.allowNull ) { fieldNode.putPOJO( AVRO_TYPE_NODE, mapper.createArrayNode().add( AVRO_TYPE_NULL ).add( type ) ); } else { fieldNode.put( AVRO_TYPE_NODE, type ); } if ( f.pentahoValueMetaType == ValueMetaInterface.TYPE_DATE ) { fieldNode.put( AVRO_LOGICAL_TYPE, ""date"" ); } else if ( f.pentahoValueMetaType == ValueMetaInterface.TYPE_DATE ) { fieldNode.put( AVRO_LOGICAL_TYPE, ""timestamp-micros"" ); } if ( f.defaultValue != null ) { fieldNode.put( AVRO_DEFAULT_NODE, f.defaultValue ); } return fieldNode; } "	0	1	0	0	0	0
@Override public void setValue(final T value, final boolean fireEvents) {  T oldValue = fireEvents ? getValue() : null;  if (isAttached()) { setValue(getElement(), value); } else { String attrVal = (value == null) ? null : value.toString(); attributeMixin.setAttribute(SliderOption.VALUE.getName(), attrVal); }  if (fireEvents) { T newValue = getValue(); ValueChangeEvent.fireIfNotEqual(this, oldValue, newValue); } } 	0	1	0	0	0	0
"private static void verify(String message, boolean condition) { // TODO: replace with Assumption.assert* if (!condition) { throw new RuntimeException(""Internal assertion failuer : "" + message); } } "	0	0	0	0	0	1
"public native final String UNIT_PX() /*-{ return Titanium.UI.UNIT_PX ? Titanium.UI.UNIT_PX : """"; }-*/; "	0	0	0	0	0	1
"@Nullable @Override public View onCreateView(final LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) { mViewEvents = inflater.inflate(R.layout.fragment_events, container, false); initViews(); framgia.vn.framgiacrb.data.model.Calendar calendar = new framgia.vn.framgiacrb.data.model.Calendar(); calendar.setId(6); mRealm = Realm.getDefaultInstance(); mEventRepositoriesLocal = new EventRepositoriesLocal(mRealm); mEventRepositories = new EventRepositories(); mEventRepositories.setOnLoadEventListener(new OnLoadEventListener() { @Override public void onSuccess() { try { initDatas(); } catch (ParseException e) { e.printStackTrace(); } }  @Override public void onError() {  } });  if (Connectivity.isConnected(getActivity())) { mEventRepositories.getEventsByCalendar(Session.sAuthToken, calendar, getActivity()); } else { try { initDatas(); } catch (ParseException e) { e.printStackTrace(); } Toast.makeText(getActivity(), getActivity().getString(R.string.message_not_connect), Toast.LENGTH_SHORT).show(); }  mBroadcastReceiverToday = new BroadcastReceiver() { @Override public void onReceive(Context context, Intent intent) { if (intent.getAction().equals(MainActivity.ACTION_TODAY)) { LinearLayoutManager linearLayoutManager = (LinearLayoutManager) mRecyclerViewEvents.getLayoutManager(); int firstVisibleItem = linearLayoutManager.findFirstVisibleItemPosition(); if (firstVisibleItem > mPositionToday) { mRecyclerViewEvents.scrollToPosition(mPositionToday - 2); } else { mRecyclerViewEvents.scrollToPosition(mPositionToday + 5); } } } }; mBroadcastReceiverToDate = new BroadcastReceiver() { @Override public void onReceive(Context context, Intent intent) { if (intent.getAction().equals(MainActivity.ACTION_SCROLL_DAY)) { String timeString = intent.getStringExtra(MonthView.TITLE); //Date timeDate = TimeUtils.stringToDate(timeString, TimeUtils.DATE_FORMAT_TOOLBAR); for (int i = 0; i < mDatas.size(); i++) { if (mDatas.get(i) instanceof Date) { Date date = TimeUtils.convertDateFormat(((Date)mDatas.get(i)).toString(), TimeUtils.DATE_INPUT, TimeUtils.DATE_FORMAT_TOOLBAR); String time = MainActivity.dateFormat.format(date); Toast.makeText(EventsFragment.this.getContext(), time, Toast.LENGTH_SHORT).show(); if (time.equals(timeString)) { Toast.makeText(EventsFragment.this.getContext(), ""position ""+i, Toast.LENGTH_SHORT).show(); mRecyclerViewEvents.scrollToPosition(i); break; } } } } } }; getActivity().registerReceiver(mBroadcastReceiverToday, new IntentFilter(MainActivity.ACTION_TODAY)); getActivity().registerReceiver(mBroadcastReceiverToDate, new IntentFilter(MainActivity.ACTION_SCROLL_DAY)); return mViewEvents; } "	0	1	0	0	0	0
"@Test public void testDeletingCancel() { table.selectRow(1);  WindowInterceptor.init(panel.getButton(""Delete"").triggerClick()) .process(new WindowButtonHandler(""Confirm deletion"", ""No"")).run();  assertTrue(table.contentEquals(new String[][]{ {""name 1"", ""Action created"", ""A""}, {""name 2"", ""Action created"", """"}, {""name 3"", ""Action created"", ""Response line 1, Response line 2, Response line 3""}, {""name 4"", ""Action created"", ""Response line 1, Response line 2, Response line 4""}, })); verify(group, never()).deleteAction((Action) anyObject()); } "	0	0	0	0	0	1
@Override public List<BlockLocation> getBlocksForBounds(CoordinateBounds bounds, long time) {  long timeFrom = time - _runningLateWindow * 1000; long timeTo = time + _runningEarlyWindow * 1000;  List<BlockInstance> instances = _blockGeospatialService.getActiveScheduledBlocksPassingThroughBounds( bounds, timeFrom, timeTo);  List<BlockLocation> locations = getAsLocations(instances, time); List<BlockLocation> inRange = new ArrayList<BlockLocation>(); for (BlockLocation location : locations) { CoordinatePoint p = location.getLocation(); if (bounds.contains(p)) inRange.add(location); }  return inRange; } 	1	1	1	1	0	0
@Override public void onResume(){ super.onResume(); nfc.writeMode(true); } 	0	0	0	0	0	1
"@Test public void testLineListing() throws IOException {  List<String> linesAsStrings = FileUtil.readFileLinesAsStrings(new File(""src/test/resources/util/account-for-test.txt""));  Assert.assertEquals(10, linesAsStrings.size());  Assert.assertTrue(linesAsStrings.contains(""123-543-1234"")); Assert.assertTrue(linesAsStrings.contains(""349-287-1722"")); Assert.assertTrue(linesAsStrings.contains(""573-198-5421"")); Assert.assertTrue(linesAsStrings.contains(""382-107-1791"")); Assert.assertTrue(linesAsStrings.contains(""547-192-8097""));  } "	0	0	0	1	0	0
private boolean isCorrectLocation(DetailAST annotation, boolean hasParams) { final boolean allowingCondition = hasParams ? allowSamelineParametrizedAnnotation : allowSamelineSingleParameterlessAnnotation; return allowingCondition && !hasNodeBefore(annotation) || !allowingCondition && !hasNodeBeside(annotation) || allowSamelineMultipleAnnotations; } 	0	0	0	0	0	1
public JSONObject getSelectedContent(HttpServletRequest request, Application app, boolean validXmlTags, boolean includeAppLayerAttributes, boolean includeRelations, EntityManager em) throws JSONException {  // Don't use cache when any of these parameters is true, cache only // the JSON variant used when starting up the viewer boolean useExpanded = includeAppLayerAttributes || includeRelations;  JSONObject cached = null; if (mustCreateNewCache(app, validXmlTags, useExpanded)) { cached = createSelectedContent(app, validXmlTags, includeAppLayerAttributes, includeRelations,em); if (!validXmlTags) { ClobElement el = new ClobElement(cached.toString()); app.getDetails().put(useExpanded ? DETAIL_CACHED_EXPANDED_SELECTED_CONTENT : DETAIL_CACHED_SELECTED_CONTENT, el); setApplicationCacheDirty(app, false, useExpanded,em); Stripersist.getEntityManager().getTransaction().commit(); } } else { ClobElement el = app.getDetails().get(useExpanded ? DETAIL_CACHED_EXPANDED_SELECTED_CONTENT : DETAIL_CACHED_SELECTED_CONTENT); cached = new JSONObject(el.getValue()); }  JSONObject selectedContent = processCache(request, cached); return selectedContent; } 	0	1	0	0	0	0
@Override public void restoreModels(ModelMap models) { models.get(LabelAndFieldHandler.class).install(); models.get(ComboBoxRendererHandler.class).install(); models.get(ComboBoxModelHandler.class).install();  models.get(InfoPaneHandler.class).install(); models.get(LanguageTableModel.class).install(languageTable); models.get(StatTableModel.class).install(); models.get(ClassLevelTableModel.class).install(); models.get(TodoListHandler.class).install(); models.get(GenerateRollsAction.class).install(); models.get(RollMethodAction.class).install(); models.get(HPHandler.class).install();  random.setAction(models.get(RandomNameAction.class)); generateRollsButton.setAction(models.get(GenerateRollsAction.class)); rollMethodButton.setAction(models.get(RollMethodAction.class)); createMonsterButton.setAction(models.get(CreateMonsterAction.class)); AddLevelsAction addLevelsAction = models.get(AddLevelsAction.class); addLevelsButton.setAction(addLevelsAction); addLevelsField.setAction(addLevelsAction); RemoveLevelsAction removeLevelsAction = models.get(RemoveLevelsAction.class); removeLevelsButton.setAction(removeLevelsAction); removeLevelsField.setAction(removeLevelsAction); ExpAddAction expAddAction = models.get(ExpAddAction.class); expaddButton.setAction(expAddAction); expmodField.setAction(expAddAction); expsubtractButton.setAction(models.get(ExpSubtractAction.class)); addLevelsAction.install();  resetBasicsPanel(); } 	0	1	1	1	1	0
@Override public ModelMap createModels(final CharacterFacade character) { ModelMap models = new ModelMap();  models.put(LabelAndFieldHandler.class, new LabelAndFieldHandler(character)); models.put(ComboBoxRendererHandler.class, new ComboBoxRendererHandler(character)); models.put(ComboBoxModelHandler.class, new ComboBoxModelHandler(character));  models.put(RandomNameAction.class, new RandomNameAction(character, (JFrame) SwingUtilities.getWindowAncestor(this))); models.put(ClassLevelTableModel.class, new ClassLevelTableModel(character, classLevelTable, classComboBox));  models.put(GenerateRollsAction.class, new GenerateRollsAction(character)); models.put(RollMethodAction.class, new RollMethodAction(character, (JFrame) SwingUtilities.getWindowAncestor(this))); models.put(CreateMonsterAction.class, new CreateMonsterAction( character, (JFrame) SwingUtilities.getWindowAncestor(this))); models.put(AddLevelsAction.class, new AddLevelsAction(character)); models.put(RemoveLevelsAction.class, new RemoveLevelsAction(character)); models.put(StatTableModel.class, new StatTableModel(character, statsTable)); models.put(LanguageTableModel.class, new LanguageTableModel(character)); models.put(InfoPaneHandler.class, new InfoPaneHandler(character, infoPane)); models.put(ExpAddAction.class, new ExpAddAction(character)); models.put(ExpSubtractAction.class, new ExpSubtractAction(character)); models.put(TodoListHandler.class, new TodoListHandler(character)); models.put(HPHandler.class, new HPHandler(character)); return models; } 	0	1	0	0	0	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_google);  mFirebaseAuth = FirebaseAuth.getInstance();  // Assign fields mSignInButton = (SignInButton) findViewById(R.id.sign_in_button);  // Set click listeners mSignInButton.setOnClickListener(this);  // Configure Google Sign In GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN) .requestIdToken(getString(R.string.default_web_client_id)) .requestEmail() .build(); mGoogleApiClient = new GoogleApiClient.Builder(this) .enableAutoManage(this /* FragmentActivity */, this /* OnConnectionFailedListener */) .addApi(Auth.GOOGLE_SIGN_IN_API, gso) .build();  // Initialize FirebaseAuth } 	0	0	0	0	0	1
"@Test public void testMain() { String output; // define our tests // @formatter:off String[] testArray = new String[] { ""1,2,3,4,5,6,7,8,9,1"", ""1,5,2,3,5,4,3,1"", ""1,2"", ""1,2,3,4,5,6,7,8,9"", ""1,2,3,4,5,6,5,4,3,2,1"", ""1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9"", ""1,2,1,3,1,4,2,3,2,4,3,4"" }; String[] expectedResultArray = new String[] { ""true"", ""true"", ""false"", ""false"", ""false"", ""false"", ""false"" }; // @formatter:on String[] resultArray; String testFileName = ""JUnitEulerTestFile.txt"";  // Write the test file for the class BufferedWriter outputWriter = null; try { outputWriter = new BufferedWriter(new FileWriter(testFileName)); for (int i = 0; i < testArray.length; i++) { outputWriter.write(testArray[i]); outputWriter.newLine(); } outputWriter.flush(); outputWriter.close(); } catch (IOException e) { fail(""The test was unable to create a test file. That's a shame!""); }  // run the test file TestObject.runStatic(""main"", (Object) new String[]{testFileName}); output = TestObject.getLastMethodOutput();  // split lines into array resultArray = output.split(""\n"");  // Test the output if (resultArray.length > testArray.length) { fail(""Your program wrote more output lines than there were lines in the input file.""); } else if (resultArray.length < testArray.length) { fail(""Your program wrote less output lines than there were lines in the input file.""); }  for (int i = 0; i < resultArray.length; i++) { assertEquals(""Your program's output for the line '"" + testArray[i] + ""'"", expectedResultArray[i], resultArray[i]); }  // Remove the test file new File(testFileName).delete(); } "	0	0	0	0	0	1
@Override public void onResponse(ReplicaId replicaId, boolean isSuccessFul) { super.onResponse(replicaId, isSuccessFul); long elapsedTime; if (unexpiredRequestSendTimes.containsKey(replicaId)) { elapsedTime = time.milliseconds() - unexpiredRequestSendTimes.remove(replicaId); } else { elapsedTime = time.milliseconds() - expiredRequestSendTimes.remove(replicaId); } getLatencyHistogram(replicaId).update(elapsedTime); } 	0	1	0	0	0	0
public void removeRows(){ rows.clear(); } 	0	0	0	0	0	1
"@Override protected void doFullSync(GrouperGroupInfo grouperGroupInfo, LdapGroup ldapGroup, Set<Subject> correctSubjects, Map<Subject, LdapUser> tsUserMap, Set<LdapUser> correctTSUsers) throws PspException {  String attributeName = config.getProvisionedAttributeName(); String attributeValue = getAttributeValueForGroup(grouperGroupInfo);  List<LdapObject> currentMatches_ldapObjects = getLdapSystem().performLdapSearchRequest( config.getUserCreationBaseDn(), SearchScope.SUBTREE, Arrays.asList(config.getUserSearchAttributes()), attributeName + ""={0}"", attributeValue);  List<LdapUser> currentMatches = new ArrayList<LdapUser>(currentMatches_ldapObjects.size()); for ( LdapObject ldapObject : currentMatches_ldapObjects ) currentMatches.add(new LdapUser(ldapObject));  // EXTRA MATCHES = CURRENT_MATCHES - CORRECT_MATCHES Set<LdapUser> extraMatches = new HashSet<LdapUser>(currentMatches); extraMatches.removeAll(correctTSUsers);  for (LdapUser extraMatch : extraMatches) scheduleUserModification(extraMatch, AttributeModificationType.REMOVE, Arrays.asList(attributeValue));  // MISSING MATCHES = CORRECT_MATCHES - CURRENT_MATCHES Set<LdapUser> missingMatches = new HashSet<LdapUser>((Set<LdapUser>)correctTSUsers); missingMatches.removeAll(currentMatches);  for (LdapUser missingMatch : missingMatches) scheduleUserModification(missingMatch, AttributeModificationType.ADD, Arrays.asList(attributeValue));  LOG.info(""{}: Brief full-sync summary: Correct={}, Current={}, Extra={}, Missing={}"", new Object[] {getName(), correctSubjects.size(), currentMatches_ldapObjects.size(), extraMatches.size(), missingMatches.size()});  } "	0	0	0	0	0	1
"@Override public void handleCancelOk(String consumerTag) { if (this.logger.isDebugEnabled()) { this.logger.debug(""CancelOk "" + this); } removeConsumer(false); } "	0	0	0	0	0	1
public int getContentInsetRight() { return mContentInsets.getRight(); } 	0	0	0	1	0	0
private void initScanCard() { if (midtransSDK.getExternalScanner() != null) { // Set background color for scan button if (midtransSDK.getColorTheme() != null && midtransSDK.getColorTheme().getPrimaryDarkColor() != 0) { scanCardBtn.setTextColor(midtransSDK.getColorTheme().getPrimaryDarkColor()); } scanCardBtn.setVisibility(View.VISIBLE); scanCardBtn.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { // Start scanning midtransSDK.getExternalScanner().startScan(getActivity(), SCAN_REQUEST_CODE); } }); } else { scanCardBtn.setVisibility(View.GONE); } } 	1	0	1	1	1	0
public void handleEvent(SessionLoadedEvent event) { loadSessionData(event, directory); } 	1	0	1	0	0	0
private int getPhoneTypeFromProperty(int phoneId) { String type = getTelephonyProperty(phoneId, TelephonyProperties.CURRENT_ACTIVE_PHONE, null); if (type == null || type.isEmpty()) { return getPhoneTypeFromNetworkType(phoneId); } return Integer.parseInt(type); } 	0	1	1	1	1	0
"private int getPhoneTypeFromNetworkType(int phoneId) { // When the system property CURRENT_ACTIVE_PHONE, has not been set, // use the system property for default network type. // This is a fail safe, and can only happen at first boot. String mode = getTelephonyProperty(phoneId, ""ro.telephony.default_network"", null); if (mode != null && !mode.isEmpty()) { return TelephonyManager.getPhoneType(Integer.parseInt(mode)); } return TelephonyManager.PHONE_TYPE_NONE; } "	1	1	1	0	1	0
@Override public <T> Storage<T> getStorage(String name) { return getStorage(name, null); } 	0	0	0	0	0	1
"private void removeIncorrectPublicationFromPublicationList( List<Publication> selectedPublications ) { // get current year int currentYear = Calendar.getInstance().get( Calendar.YEAR );  for ( Iterator<Publication> iteratorPublication = selectedPublications.iterator(); iteratorPublication.hasNext(); ) { Publication publication = iteratorPublication.next();  // The pattern of incorrect publication if ( publication.getPublicationSources().size() == 1 ) { List<PublicationSource> publicationSource = new ArrayList<>( publication.getPublicationSources() );  // For google scholar : // 1. the publications don't have publication date. // 2. No other publications cited the incorrect publications for // years (more then 3 years) // 3. The title of publication contains ""special issue article"" if ( publicationSource.get( 0 ).getSourceType().equals( SourceType.GOOGLESCHOLAR ) ) { // removing condition if ( publicationSource.get( 0 ).getDate() == null ) { iteratorPublication.remove(); continue; } else { if ( publicationSource.get( 0 ).getCitedBy() == 0 && currentYear - Integer.parseInt( publicationSource.get( 0 ).getDate() ) > 2 ) { iteratorPublication.remove(); continue; } } } // The pattern of incorrect publication // For MAS no author name else if ( publicationSource.get( 0 ).getSourceType().equals( SourceType.MAS ) ) { if ( publicationSource.get( 0 ).getCoAuthors() == null || publicationSource.get( 0 ).getCoAuthors().equals( """" ) ) { iteratorPublication.remove(); continue; } }  // The pattern of incorrect publication // For Mendeley is master thesis also recorded else if ( publicationSource.get( 0 ).getSourceType().equals( SourceType.MENDELEY ) ) { if ( publicationSource.get( 0 ).getAbstractText().contains( ""master thesis"" ) ) { iteratorPublication.remove(); continue; } } }  // The pattern of incorrect publication // For google scholar : // 3. The title of publication contains ""special issue article"" if ( publication.getTitle().toLowerCase().contains( ""special issue article"" ) ) { iteratorPublication.remove(); continue; }  } } "	0	0	0	1	0	0
public void processQuery(String query) { if (search_instructions.getVisibility() == View.VISIBLE && (queryEmptiable || !query.isEmpty())) { search_instructions.setVisibility(View.GONE); if(loadingPanel != null) { loadingPanel.setVisibility(View.VISIBLE); } } } 	1	0	1	0	0	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_BlogPost); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); getSupportActionBar().setDisplayHomeAsUpEnabled(true); } 	1	1	0	1	1	0
public void updateTypeInfo(ScriptValue oldValue) { Set<Type> set; Type t;  if (oldValue == null) { return; } if (type == null) { type = new TreeSet<>(FieldTypeBinding.DEFAULT_COMPARATOR); t = getType(); if (t != null) { type.add(t); } } set = oldValue.type; if (set == null || set.isEmpty()) { t = oldValue.getType(); if (t != null) { type.add(t); } } else { type.addAll(set); } } 	0	1	0	0	0	0
"public static void main(String[] args) throws Exception {  final JournalFactory factory = new JournalFactory(new JournalConfigurationBuilder() {{ $(Price.class).$ts(); }}.build(args[0]));  final JournalClient client = new JournalClient(new ClientConfig(""192.168.1.81:7080,192.168.1.81:7090"") {{ getReconnectPolicy().setRetryCount(6); getReconnectPolicy().setSleepBetweenRetriesMillis(1); getReconnectPolicy().setLoginRetryCount(2); }}, factory);  final Journal<Price> reader = factory.bulkReader(new JournalKey<>(Price.class, ""price-copy"", PartitionBy.NONE, 1000000000));  client.subscribe(Price.class, null, ""price-copy"", 1000000000, new TxListener() { @Override public void onCommit() { int count = 0; long t = 0; for (Price p : JournalIterators.incrementBufferedIterator(reader)) { if (count == 0) { t = p.getNanos(); } count++; } if (t == 0) { System.out.println(""no data received""); } else { System.out.println(""took: "" + (System.currentTimeMillis() - t) + "", count="" + count); } }  @Override public void onError() { System.out.println(""there was an error""); } }); client.start();  System.out.println(""Client started""); } "	0	0	0	0	0	1
public void showFor(Deck d) { View left = findViewById(R.id.left_stub), right = findViewById(R.id.right_stub), upDown = findViewById(R.id.swipe_up_down) ;  boolean hideSwipe = !d.isProcessed() || d.isLastStep() ; upDown.setVisibility(hideSwipe ? View.GONE : View.VISIBLE);  if (d.isSwipeable()) { // => !processed if (d.isOnOptionOne()) { int y = d.midYOfTex() - (right.getHeight()/2); right.setY(y); right.setVisibility(View.VISIBLE); left.setVisibility(View.GONE); } else { left.setVisibility(View.VISIBLE); right.setVisibility(View.GONE); } } else { left.setVisibility(View.GONE); right.setVisibility(View.GONE); } } 	0	0	0	0	0	1
public void windowClosing(java.awt.event.WindowEvent ev){ // Create a new Settings object with all the current settings loaded Settings newSettings = new Settings(ignoreCommentsCheckbox.isSelected(), projectReader.settings.selectedLanguage, projectReader.rootFolder);  Settings.save(newSettings);    // Serialize the settings System.exit(0);                // Exit the program } 	0	0	0	0	0	1
"public void run() { Scanner in = new Scanner(System.in); String cmd; Request.Type t = null; String fileName; String filePath;  // Sets the directory for the client do { System.out.println(""Please enter the directory that you want to use for the client files:""); System.out.println(""Must end with either a '/' or a '\\' to work""); directory = in.next(); if (!TFTP.isDirectory(directory)) { System.out.println(""Directory does not exist.""); } } while (!TFTP.isDirectory(directory)); System.out.println(""The directory you entered is: "" + directory);  while (true) { boolean validCmd = false; while(!validCmd) { // Get get command System.out.println(""Please enter a command (read/write/exit):""); cmd = in.next(); // Quit server if exit command given if (cmd.equalsIgnoreCase(""exit"")) { in.close(); System.out.println(""Shutting down...""); System.exit(1); } else if (cmd.equalsIgnoreCase(""read"")) { validCmd = true; t = Request.Type.READ; } else if (cmd.equalsIgnoreCase(""write"")) { validCmd = true; t = Request.Type.WRITE; } else { validCmd = false; System.out.println(""Invalid command. Valid commands are read, write, and exit.""); } }  // Get file name do { System.out.println(""Please enter the name of the file to transfer:""); fileName = in.next(); if (!TFTP.isPathless(fileName)) { System.out.println(""File names must not contain a path. The directory that you designated for transfer is: "" + directory); } } while (!TFTP.isPathless(fileName)); filePath = directory + fileName;  // Check if the file exists and file readable on client if WRITE request, otherwise continue loop if (t == Request.Type.WRITE) { if (TFTP.fileExists(filePath) && !TFTP.isDirectory(filePath)) { if (!TFTP.isReadable(filePath)) { // Echo error message for access violation System.err.println(""File access violation.\n""); continue; } else { // Echo successful file found System.out.println(""File found.\n""); } } else { // Echo error message for file not found System.err.println(""File not found.\n""); continue; } // For read requests, check if file already exists on the client } else if (t == Request.Type.READ) { if (TFTP.fileExists(filePath) && !TFTP.isDirectory(filePath)) { // Echo error message System.err.println(""File already exists.\n""); continue; } else { // Prints empty line System.out.println(""""); } }  // Send the request try { switch (t) { case READ: this.read(InetAddress.getLocalHost(), filePath, ""netascii""); break; case WRITE: this.write(InetAddress.getLocalHost(), filePath, ""netascii""); break; default: System.out.println(""Invalid request type. Quitting...""); System.exit(1); } } catch(Exception e) { } } } "	0	0	0	1	0	0
"static float[] parseFloatArray(String p, String keyName, Properties prop) { if ($null.equals(p) || p == null) { return null; } if ($empty.equals(p) || p.length() == 0) { return new float[0]; } if ($array.equals(p)) { // readable float array, multiple line configuration List<String> filteredNames = new ArrayList<String>(); Set<String> names = prop.stringPropertyNames(); for (String propName : names) { String prefix = keyName + "".""; if (propName.startsWith(prefix)) { String k = propName.substring(prefix.length()); filteredNames.add(k); } } String[] keyNames = filteredNames.toArray(new String[filteredNames.size()]); Arrays.sort(keyNames); // keep array's order float[] fs = new float[keyNames.length]; for (int j = 0; j < keyNames.length; j++) { String propName = keyNames[j]; String v = (String) prop.getProperty(keyName + ""."" + propName); if (v != null) { try { fs[j] = Float.parseFloat(v); } catch (Exception e) { e.printStackTrace(); } } } return fs; } // single line configuration String[] ss = p.split(""\\s*;\\s*""); float[] fs = null; if (ss != null) { fs = new float[ss.length]; for (int j = 0; j < ss.length; j++) { if (ss[j] != null) { try { fs[j] = Float.parseFloat(ss[j]); } catch (Exception e) { e.printStackTrace(); } } } } return fs; } "	0	0	0	0	0	1
"@DataProvider(name = ""Basic Select Input (Focus) Test Data"") public Object[][] getBasicSelectInputFocusData() { return new Object[][]{ {""1px"", ""solid"", new String[]{commonUtils.hex2Rgb(""#047A9C""), commonUtils.hex2RgbWithoutTransparency(""#047A9C"")}, ""rgb(4, 122, 156) 0px 0px 5px 0px"", ""14px"", commonUtils.hex2Rgb(""#252525""), ""18px""} }; } "	0	0	0	0	0	1
"@Test(testName = ""Mobile: Verify Basic Input - Disabled"", dataProvider = ""Inputs - Basic (single line - disabled) Test Data"", groups = ""mobile-regression"") private void basicInputDisabledMobileTest(String expBorderWidth, String expBorderStyle, String[] expBorderColor, String[] expBgColor, String expMarginTop, String expPaddingRight, String expPaddingLeft, String[] expHeight, String expBorderRad, String[] expLabelColor, String expLabelFontSize) { for (String cssProperty : borderWidths) { basicInputBorder = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, cssProperty, ""mobile""); isBasicInputBorder = commonUtils.assertValue(basicInputBorder, expBorderWidth, ""Border width "" + cssProperty + "" of Input-Basic Disabled field is not as per spec""); Assert.assertTrue(isBasicInputBorder); } for (String cssProperty : borderStyles) { basicInputBorder = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, cssProperty, ""mobile""); isBasicInputBorder = commonUtils.assertValue(basicInputBorder, expBorderStyle, ""Border style "" + cssProperty + "" of Input-Basic Disabled field is not as per spec""); Assert.assertTrue(isBasicInputBorder); } for (String cssProperty : borderColors) { basicInputBorder = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, cssProperty, ""mobile""); isBasicInputBorder = commonUtils.assertCSSProperties(cssProperty, basicInputBorder, expBorderColor); if (isBasicInputBorder == false) { log.info(""Border color "" + cssProperty + "" of Input-Basic Disabled field is not as per spec, actual "" + basicInputBorder); } Assert.assertTrue(isBasicInputBorder); }  basicInputBgColor = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""background-color"", ""mobile""); marginTop = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""margin-top"", ""mobile""); paddingRight = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""padding-right"", ""mobile""); paddingLeft = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""padding-left"", ""mobile""); basicInputHeight = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""height"", ""mobile""); for (String cssProperty : borderRadii) { basicInputBorderRadius = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, cssProperty, ""mobile""); isBasicInputBorderRadius = commonUtils.assertValue(basicInputBorderRadius, expBorderRad, ""Border radius "" + cssProperty + "" of Input-Basic Disabled field is not as per spec ""); Assert.assertTrue(isBasicInputBorderRadius); }  isBackgroundColor = commonUtils.assertCSSProperties(""background-color"", basicInputBgColor, expBgColor); if (isBackgroundColor == false) { log.info("" Background color of Input-Basic Disabled field is not as per spec,actual "" + basicInputBgColor); } isMarginTop = commonUtils.assertValue(marginTop, expMarginTop, ""Background color of Input-Basic disabled field is not as per spec""); isPaddingRight = commonUtils.assertValue(paddingRight, expPaddingRight, ""Padding right of Input-Basic disabled field is not as per spec""); isPaddingLeft = commonUtils.assertValue(paddingLeft, expPaddingLeft, ""Padding left of Input-Basic disabled field is not as per spec""); isBasicInputHeight = commonUtils.assertCSSProperties(""height"", basicInputHeight, expHeight); if (isBasicInputHeight == false) { log.info(""Box height of Input-Basic Error field is not as per spec, actual "" + basicInputHeight); }  labelColor = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabledLabel, ""color"", ""mobile""); labelFontSize = commonUtils.getCSSValue(inputsPgObj.inputBasicDisabled, ""font-size"", ""mobile""); isLabelColor = commonUtils.assertCSSProperties(""color"", labelColor, expLabelColor); if (isLabelColor == false) { log.info(""Label color of Input-Basic disabled label is not as per spec, actual "" + labelColor); } isLabelFontSize = commonUtils.assertValue(labelFontSize, expLabelFontSize, ""Label font size of Input-Basic disabled label is not as per spec""); isLabelFor = commonUtils.checkLabelForVal(inputsPgObj.inputBasicDisabledLabel, inputsPgObj.inputBasicDisabled, ""mobile""); Assert.assertTrue(isBackgroundColor && isMarginTop && isPaddingRight && isPaddingLeft && isBasicInputHeight && isLabelColor && isLabelFontSize && isLabelFor); } "	0	0	0	0	0	1
private ResultSet query(String sql){ try{ Statement st = con.createStatement(); ResultSet tmp = st.executeQuery(sql); try{ st.close(); } catch(SQLException e){ Logger lgr = Logger.getLogger(DB.class.getName()); lgr.log(Level.SEVERE, e.getMessage(), e); } return tmp; } catch(SQLException e){ Logger lgr = Logger.getLogger(DB.class.getName()); lgr.log(Level.WARNING, e.getMessage(), e); } return null; } 	0	0	0	0	0	1
"protected void recordTaskStart(TaskExecutor executor) {  String guid = executor.getGuid();  Preconditions.checkState(executor.isAlive());  if (isAnotherTaskInstanceRunning(executor)) { throw new ConcurrentExecutionNotAllowedException(getMacGyverTask(executor).get().getTaskId()); } synchronized (this) { executingTaskSet.add(guid); } String host = getHostname();  ObjectNode extraProps = mapper.createObjectNode();  Optional<MacGyverTask> mt = getMacGyverTask(executor); if (mt.isPresent()) { ObjectNode tmp = (ObjectNode) mt.get().config.deepCopy();  if (tmp.has(""id"")) { tmp.put(""taskId"", tmp.path(""id"").asText()); tmp.remove(""id"");  } tmp.remove(""state""); tmp.remove(""hostname""); tmp.remove(""processUuid""); tmp.remove(""updateTs""); tmp.set(""description"", tmp.path(""taskId"")); extraProps.setAll(tmp); } else { extraProps.put(""description"",executor.getTask().toString()); }   Instant now = Instant.now();  String date = formatInstant(now);  String cypher = ""merge (t:TaskState {id:{guid}}) set t+={props},t.state={state},t.hostname={hostname},t.processUuid={processUuid},t.type='cron4j', t.startTs={ts}, t.startDate={date} return t"";  extraProps.remove(""id""); // bad things if the id attibute is set neo4j.execCypher(cypher, ""guid"", guid, ""processUuid"", getProcessUuid(), ""hostname"", host, ""ts"", now.toEpochMilli(), ""date"", date, ""state"", TaskState.STARTED.toString(), ""props"", extraProps);  } "	0	1	0	0	0	0
"@Test(description = ""Exception when getting API by UUID"", expectedExceptions = APIMgtDAOException.class) public void testSearchAPIByUUIDException() throws APIManagementException { ApiDAO apiDAO = mock(ApiDAO.class); AbstractAPIManager apiStore = new APIStoreImpl(USER_NAME, apiDAO, null, null, null, null, null); when(apiDAO.getAPI(UUID)) .thenThrow(new APIMgtDAOException(""Error occurred while retrieving API with id "" + UUID)); apiStore.getAPIbyUUID(UUID); } "	1	1	0	1	1	0
@Before public void setUp() { initMocks(this); treeRegistry = new TAMATreeRegistry(null, null, null, null, null, null, null); callFlowController = new TAMACallFlowController(treeRegistry, pillReminderService, voiceOutboxService, allPatients, contextFactory); ivrContext = new TAMAIVRContextForTest(); Patient patient = new Patient(); patientPreferences = new PatientPreferences(); patient.setPatientPreferences(patientPreferences); ivrContext.pillRegimenSnapshot(pillRegimenSnapshot).patient(patient).callState(CallState.STARTED); when(contextFactory.create(kooKooIVRContext)).thenReturn(ivrContext); } 	1	1	1	1	0	0
@Override public Object fetchWidgetHierarchy() { throw new NotImplementedException(); } 	0	0	0	0	0	1
"private void fillFields(final ViewDefinitionState view, final Entity costCalculation) { final Set<String> outputDecimalFields = Sets.newHashSet(""productionCostMarginValue"", ""materialCostMarginValue"", ""totalOverhead"", ""totalMaterialCosts"", ""totalMachineHourlyCosts"", ""totalLaborHourlyCosts"", ""totalPieceworkCosts"", ""totalTechnicalProductionCosts"", ""totalCosts"", ""totalCostsPerUnit"", ""additionalOverheadValue"");  for (String referenceName : outputDecimalFields) { FieldComponent fieldComponent = (FieldComponent) view.getComponentByReference(referenceName); fieldComponent.setFieldValue(numberService.format(getBigDecimal(costCalculation.getField(referenceName)))); } } "	0	0	0	0	0	1
"public static Admin getAdmin() { return (Admin) Http.Context.current().args.get(""user""); } "	0	0	0	0	0	1
public static void warn(Throwable aProblem, String param) { warn(null, problem2String(param, aProblem)); } 	1	0	1	1	0	0
"private Table buildTable(RestRequest req, ClusterStateResponse state, NodesInfoResponse nodesInfo, NodesStatsResponse nodesStats) { boolean fullId = req.paramAsBoolean(""full_id"", false); DiscoveryNodes nodes = state.getState().nodes(); Table table = getTableWithHeader(req);  for (DiscoveryNode node : nodes) { NodeInfo info = nodesInfo.getNodesMap().get(node.id()); NodeStats stats = nodesStats.getNodesMap().get(node.id()); table.startRow();  table.addCell(fullId ? node.id() : Strings.substring(node.getId(), 0, 4)); table.addCell(info == null ? null : info.getProcess().getId()); table.addCell(node.getHostName()); table.addCell(node.getHostAddress()); if (node.address() instanceof InetSocketTransportAddress) { table.addCell(((InetSocketTransportAddress) node.address()).address().getPort()); } else { table.addCell(""-""); }  final Map<String, ThreadPoolStats.Stats> poolThreadStats; final Map<String, ThreadPool.Info> poolThreadInfo;  if (stats == null) { poolThreadStats = Collections.emptyMap(); poolThreadInfo = Collections.emptyMap(); } else { poolThreadStats = new HashMap<>(14); poolThreadInfo = new HashMap<>(14);  ThreadPoolStats threadPoolStats = stats.getThreadPool(); for (ThreadPoolStats.Stats threadPoolStat : threadPoolStats) { poolThreadStats.put(threadPoolStat.getName(), threadPoolStat); } if (info != null) { for (ThreadPool.Info threadPoolInfo : info.getThreadPool()) { poolThreadInfo.put(threadPoolInfo.getName(), threadPoolInfo); } } } for (String pool : SUPPORTED_NAMES) { ThreadPoolStats.Stats poolStats = poolThreadStats.get(pool); ThreadPool.Info poolInfo = poolThreadInfo.get(pool);  Long maxQueueSize = null; String keepAlive = null; Integer minThreads = null; Integer maxThreads = null;  if (poolInfo != null) { if (poolInfo.getQueueSize() != null) { maxQueueSize = poolInfo.getQueueSize().singles(); } if (poolInfo.getKeepAlive() != null) { keepAlive = poolInfo.getKeepAlive().toString(); } if (poolInfo.getMin() >= 0) { minThreads = poolInfo.getMin(); } if (poolInfo.getMax() >= 0) { maxThreads = poolInfo.getMax(); } }  table.addCell(poolInfo == null  ? null : poolInfo.getThreadPoolType()); table.addCell(poolStats == null ? null : poolStats.getActive()); table.addCell(poolStats == null ? null : poolStats.getThreads()); table.addCell(poolStats == null ? null : poolStats.getQueue()); table.addCell(maxQueueSize); table.addCell(poolStats == null ? null : poolStats.getRejected()); table.addCell(poolStats == null ? null : poolStats.getLargest()); table.addCell(poolStats == null ? null : poolStats.getCompleted()); table.addCell(minThreads); table.addCell(maxThreads); table.addCell(keepAlive); }  table.endRow(); }  return table; } "	0	0	0	0	0	1
private void menuAdded(MenuModel addedMenu) { JPopupMenu popupMenu = new JPopupMenu(addedMenu.getName()); menuesMap.put(addedMenu, popupMenu); for(MenuItemModel mim : addedMenu.getMenuItemList()) { MenuUtils.addMenuItem(popupMenu, mim); } } 	0	1	0	0	0	0
public InputStream getInputStream(long offset) throws IOException, UnsupportedFileOperationException { // Use a random access input stream when available if (isFileOperationSupported(FileOperation.RANDOM_READ_FILE)) { RandomAccessInputStream rais = getRandomAccessInputStream(); rais.seek(offset);  return rais; }  InputStream in = getInputStream();  // Skip exactly the specified number of bytes StreamUtils.skipFully(in, offset);  return in; } 	0	0	0	0	0	1
public AbstractFile[] ls(FileFilter filter) throws IOException, UnsupportedFileOperationException { return filter==null?ls():filter.filter(ls()); } 	0	0	0	0	0	1
public String getErrorMessage() { return this.error_message; } 	0	0	0	0	0	1
"@Override @SuppressWarnings(""unchecked"") public String generateAPIDefinition(API api) throws APIManagementException { APIIdentifier identifier = api.getId(); APIManagerConfiguration config = ServiceReferenceHolder.getInstance().getAPIManagerConfigurationService().getAPIManagerConfiguration();  Environment environment = (Environment) config.getApiGatewayEnvironments().values().toArray()[0]; String endpoints = environment.getApiGatewayEndpoint(); String[] endpointsSet = endpoints.split("",""); Set<URITemplate> uriTemplates = api.getUriTemplates(); Set<Scope> scopes = api.getScopes();  if (endpointsSet.length < 1) { throw new APIManagementException(""Error in creating JSON representation of the API"" + identifier.getApiName()); }  JSONObject swaggerObject = new JSONObject();  //Create info object JSONObject infoObject = new JSONObject(); infoObject.put(""title"", api.getId().getApiName()); if(api.getDescription() != null){ infoObject.put(""description"", api.getDescription()); }  //Create contact object and map business owner info JSONObject contactObject = new JSONObject(); if(api.getBusinessOwner() != null ){ contactObject.put(""name"", api.getBusinessOwner()); } if(api.getBusinessOwnerEmail() != null ){ contactObject.put(""email"", api.getBusinessOwnerEmail()); } if(api.getBusinessOwner() != null || api.getBusinessOwnerEmail() != null) { //put contact object to info object infoObject.put(""contact"", contactObject); }  //Create licence object # no need for this since this is not mandatory //JSONObject licenceObject = new JSONObject();  //infoObject.put(""license"", licenceObject); infoObject.put(""version"", api.getId().getVersion());  //add info object to swaggerObject swaggerObject.put(""info"", infoObject);  JSONObject pathsObject = new JSONObject(); JSONObject pathItemObject = null; JSONObject operationObject; JSONObject responseObject = new JSONObject(); //add default response JSONObject status200 = new JSONObject(); status200.put(""description"", ""OK""); responseObject.put(""200"",status200);  for (URITemplate uriTemplate : uriTemplates) { String pathName = uriTemplate.getUriTemplate(); if (pathsObject.get(pathName) == null) { pathsObject.put(pathName, ""{}""); pathItemObject = new JSONObject(); }  String httpVerb = uriTemplate.getHTTPVerb(); if (pathItemObject != null) { operationObject = new JSONObject(); operationObject.put(""x-auth-type"", uriTemplate.getAuthType()); operationObject.put(""x-throttling-tier"", uriTemplate.getThrottlingTier()); operationObject.put(""responses"", responseObject); pathItemObject.put(httpVerb.toLowerCase(), operationObject); } pathsObject.put(pathName, pathItemObject); }  swaggerObject.put(""paths"", pathsObject); swaggerObject.put(""swagger"", ""2.0"");  JSONObject securityDefinitionObject = new JSONObject(); JSONObject scopesObject = new JSONObject();  JSONArray xWso2ScopesArray = new JSONArray(); JSONObject xWso2ScopesObject; if (scopes != null) { for (Scope scope : scopes) { xWso2ScopesObject = new JSONObject(); xWso2ScopesObject.put(""key"", scope.getKey()); xWso2ScopesObject.put(""name"", scope.getName()); xWso2ScopesObject.put(""roles"", scope.getRoles()); xWso2ScopesObject.put(""description"", scope.getDescription());  xWso2ScopesArray.add(xWso2ScopesObject); } }  scopesObject.put(""x-wso2-scopes"", xWso2ScopesArray); securityDefinitionObject.put(""apim"", scopesObject);  swaggerObject.put(""securityDefinitions"", securityDefinitionObject);  return swaggerObject.toJSONString(); } "	0	0	0	0	0	1
public int getValue() { String val = this.getText(); try { return Integer.parseInt(val); } catch (NumberFormatException e) { return 0; }  } 	0	0	0	0	0	1
"@Test public void test() { ArrayList<Parameter> parameters = new ArrayList<Parameter>(); parameters.add(new Parameter(1,""p"")); parameters.add(new Parameter(2,""t"")); Command cmd = new Command(1,""Hello World"", parameters); String test1 = ""Hello World "" + '\\' + ""p "" + '\\' + ""t""; DataManager testObj = DataManager.getInstance(); assertEquals(test1,testObj.addNewTask(cmd)); test.add(""Hello world""); test.add(""Test case 1""); assertEquals(test,testObj.listAll(null));  } "	0	1	0	0	0	0
private void handleHold() { if (mReleaseHold) { releaseHoldCmd(); } else { mWaitingForRelease = true;  VpnStatus.updateStatePause(lastPauseReason);   } } 	0	0	0	0	0	1
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);  if (isVoiceInteraction() || savedInstanceState == null) { // Only permit if this is a voice interaction. if (onVoiceSettingInteraction(getIntent())) { // If it's complete, finish. finish(); } } else { Log.v(TAG, ""Cannot modify settings without voice interaction""); finish(); } } "	0	0	0	0	0	1
"@Test public void getAuthoritiesShouldIgnoreRolesNotProvidedByThePermissionService() throws Exception { assertThat(authorizationService.getAuthorities(ImmutableList.of( Grant.builder().entityId(""a"").role(""z"").entityLevel(Grant.EntityLevel.STATE).stateId(""a"").build() ))).isEmpty(); } "	0	0	0	0	0	1
"public synchronized List<Period> getSupportedPeriods() { if (supportedPeriods == null) { String[] types = getProperty(""balboa.summaries"").split("","");  supportedPeriods = new ArrayList<Period>(types.length); for (String t : types) { supportedPeriods.add(Period.valueOf(t.toUpperCase())); } }  return supportedPeriods; } "	1	0	1	0	0	0
@Override public boolean equals(Object obj) { if (!(obj instanceof Region)) { return false; } else if (obj == this) { return true; } else { Region rhs = (Region) obj; return name.equalsIgnoreCase(rhs.name); } } 	1	1	1	1	0	0
@Override public int hashCode() { return name.hashCode(); } 	1	0	1	1	0	0
public List<String> getChannelIds() { return channelIds; } 	0	0	0	0	0	1
private boolean statCacheExists() { return statCache == null; } 	1	0	1	1	0	0
private boolean shouldSaveLastActiveFragment(){ return getSharedPreferencesHelper().get(SettingsFragmentPresenter.REMEMBER_LAST_ACTIVE_CATEGORY_PREFERENCE_KEY, true); } 	1	0	1	1	0	0
"@Override public void run(Map<String, String> parameters) throws UserErrorMessage { // TODO Auto-generated method stub ODPDBAccess db = getDB(); CachedDatastoreService ds = getDS(); CachedEntity character = db.getCurrentCharacter(); CachedEntity user = db.getCurrentUser();  Long itemId = tryParseId(parameters, ""itemId""); Long pathId = tryParseId(parameters, ""pathId"");  CachedEntity item = db.getEntity(""Item"", itemId); CachedEntity path = db.getEntity(""Path"", pathId); CachedEntity location = db.getEntity((Key)character.getProperty(""locationKey""));  // Validation if(item == null) throw new UserErrorMessage(""This item does not exist""); if(path == null) throw new UserErrorMessage(""This path does not exist""); if(location == null) throw new RuntimeException(""Character location is null"");  if(""Map to Location"".equals(item.getProperty(""name""))==false) throw new UserErrorMessage(""The specified item is not a map.""); if(GameUtils.equals(item.getProperty(""containerKey""), character.getKey()) == false) throw new UserErrorMessage(""You are not currently in possession of this map!"");  CombatService cs = new CombatService(db); if(cs.isInCombat(character)) throw new UserErrorMessage(""You cannot read the map while in combat!"");  // Always handle durability. if(item.getProperty(""durability"") != null) { Long durability = (Long)item.getProperty(""durability""); if(durability > 1) { durability -= 1; item.setProperty(""durability"", durability); ds.put(item); } else { ds.delete(item); } setJavascriptResponse(JavascriptResponse.ReloadPagePopup); } // Verify map is for the correct specified path. Do this after the durability drain. if(GameUtils.equals(item.getProperty(""keyCode""), pathId) == false) throw new UserErrorMessage(""You are unable to decipher the map."");  // Doesn't matter if they already know the path. Teach it to them anyway. db.doCharacterDiscoverEntity(ds, character, path); // If they are at either end of the path, refresh the button list so they can see it. if(GameUtils.equals(location.getKey(), path.getProperty(""location1Key"")) || GameUtils.equals(location.getKey(), path.getProperty(""location2Key""))) { MainPageUpdateService mpus = new MainPageUpdateService(db, user, character, location, this); mpus.updateButtonList(cs); } } "	0	0	0	0	0	1
"private Tuple<InstituteXml, List<Tuple<Long, Assignment>>> createInstitueXml(DataProvider dp) { InstituteXml inst = new InstituteXml(dp.getName().getValue(), ""5.22.0"", ""generated by confetti"");  List<TimeConstraint> timeConstraints = new LinkedList<>(); timeConstraints.add(new ConstraintBasicCompulsoryTime()); inst.setTimeConstraints(timeConstraints);  List<SpaceConstraint> spaceConstraints = new LinkedList<>(); spaceConstraints.add(new ConstraintBasicCompulsorySpace()); inst.setSpaceConstraints(spaceConstraints);  //Transforming Subjects, Teachers, StudentGroups, Rooms, Days, Hours for FET inst.setSubjects(transform(newArrayList(dp.getSubjects().getList()), new Function<Subject, SubjectXml>() { @Override public SubjectXml apply(Subject subj) { return new SubjectXml(subj.getName().getValue()); } })); inst.setTeachers(transform(newArrayList(dp.getTeachers().getList()), new Function<Teacher, TeacherXml>() { @Override public TeacherXml apply(Teacher teacher) { return new TeacherXml(teacher.getName().getValue()); } })); inst.setYears(transform(newArrayList(dp.getStudentGroups().getList()), new Function<StudentGroup, YearXml>() { @Override public YearXml apply(StudentGroup sG) { return new YearXml(sG); } })); inst.setRooms(transform(newArrayList(dp.getRooms().getList()), new Function<Room, RoomXml>() { @Override public RoomXml apply(Room room) { return new RoomXml(room.getName().getValue()); } })); inst.setDays(new DaysXml(transform(newArrayList(dp.getDays().getList()), new Function<Day, DayXml>() { @Override public DayXml apply(Day day) { return new DayXml(day.getName().getValue()); } }))); inst.setHours(new HoursXml(transform(newArrayList(dp.getHours().getList()), new Function<Hour, HourXml>() { @Override public HourXml apply(Hour hour) { return new HourXml(hour.getName().getValue()); } })));  //Transforming Assignments for FET Set<Assignment> assignments = new HashSet<>(); for (Subject subj : dp.getSubjects().getList()) { assignments.addAll(Sets.newHashSet(subj.getAssignments().getList())); }  long counter = 1; List<Tuple<Long, Assignment>> tuples = new LinkedList<>(); for (Assignment assignment : assignments) { tuples.add(new Tuple<>(counter++, assignment)); }  inst.setActivities(transform(tuples, new Function<Tuple<Long, Assignment>, ActivityXml>() { @Override public ActivityXml apply(Tuple<Long, Assignment> tuple) { return new ActivityXml(tuple.getFirst(), tuple.getSecond()); } }));  return new Tuple<>(inst, tuples); } "	0	1	0	0	0	0
public void changeName(String name){ userAccount.setName(name); } 	0	0	0	0	0	1
"public static void createGeoEntitySynonym(java.lang.String entityId, java.lang.String label) { String msg = ""This method should never be invoked.  It should be overwritten in net.geoprism.DataUploader.java""; throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg); } "	0	0	0	0	0	1
"public String buildName( boolean hybridMarker, boolean rankMarker, boolean authorship, boolean infrageneric, boolean genusForInfrageneric, boolean abbreviateGenus, boolean decomposition, boolean asciiOnly, boolean showIndet, boolean nomNote, boolean remarks, boolean showSensu, boolean showCultivar, boolean showStrain ) { StringBuilder sb = new StringBuilder(); Rank rnk = getRank();  if (NameType.CANDIDATUS == type) { sb.append(""Candidatus ""); }  if (genusOrAbove != null && (genusForInfrageneric || infraGeneric == null || specificEpithet != null)) { if (hybridMarker && NamePart.GENERIC == notho) { sb.append(HYBRID_MARKER); } if (abbreviateGenus) { sb.append(genusOrAbove.substring(0, 1)).append('.'); } else { sb.append(genusOrAbove); } } if (specificEpithet == null) { if (Rank.SPECIES == rnk) { // no species epitheton given, but rank=species. Indetermined species! if (showIndet) { sb.append("" spec.""); } } else if (rnk != null && rnk.isInfraspecific()) { // no species epitheton given, but rank below species. Indetermined! if (showIndet) { sb.append(' '); sb.append(rnk.getMarker()); } } else if (infraGeneric != null) { // this is the terminal name part - always show it! if (rankMarker && rank != null) { // If we know the rank we use explicit rank markers // this is how botanical infrageneric names are formed, see http://www.iapt-taxon.org/nomen/main.php?page=art21 sb.append(' ') .append(rank) .append(' ') .append(infraGeneric); } else { if (genusForInfrageneric && genusOrAbove != null) { // if we have shown the genus already and we do not know the rank we use parenthesis to indicate an infrageneric sb.append("" ("") .append(infraGeneric) .append("")""); } else { // no genus shown yet, just show the plain infrageneric name sb.append(infraGeneric); } } } // genus/infrageneric authorship if (authorship) { appendAuthorship(sb); } } else { if (infrageneric && infraGeneric != null && (rank == null || getRank() == Rank.GENUS)) { // only show subgenus if requested sb.append("" (""); sb.append(infraGeneric); sb.append(')'); }  // species part sb.append(' '); if (hybridMarker && NamePart.SPECIFIC == notho) { sb.append(HYBRID_MARKER); } String epi = specificEpithet.replaceAll(""[ _-]"", ""-""); sb.append(epi);  if (infraSpecificEpithet == null) { // Indetermined? Only show indet cultivar marker if no cultivar epithet exists if (showIndet && rnk != null && rnk.isInfraspecific() && (Rank.CULTIVAR != rnk || cultivarEpithet == null)) { // no infraspecific epitheton given, but rank below species. Indetermined! sb.append(' '); sb.append(rnk.getMarker()); }  // species authorship if (authorship) { appendAuthorship(sb); } } else { // infraspecific part sb.append(' '); if (hybridMarker && NamePart.INFRASPECIFIC == notho) { if (rankMarker) { sb.append(""notho""); } else { sb.append(HYBRID_MARKER); } } if (rankMarker) { sb.append(rank); sb.append(' '); } epi = infraSpecificEpithet.replaceAll(""[ _-]"", ""-""); sb.append(epi); // non autonym authorship ? if (authorship && !isAutonym()) { appendAuthorship(sb); } } }  // add cultivar name if (showStrain && strain != null) { sb.append("" ""); sb.append(strain); }  // add cultivar name if (showCultivar && cultivarEpithet != null) { sb.append("" '""); sb.append(cultivarEpithet); sb.append(""'""); }  // add sensu/sec reference if (showSensu && sensu != null) { sb.append("" ""); sb.append(sensu); }  // add nom status if (nomNote && nomStatus != null) { sb.append("", ""); sb.append(nomStatus); }  // add remarks if (remarks && this.remarks != null) { sb.append("" [""); sb.append(this.remarks); sb.append(""]""); }  String name = sb.toString().trim(); if (decomposition) { name = UnicodeUtils.decompose(name); } if (asciiOnly) { name = UnicodeUtils.ascii(name); } return Strings.emptyToNull(name); } "	0	0	0	0	0	1
"private void bindCollectionMetadata(MappingDocument mappingDocument, PluralAttributeSource source, Collection binding) { binding.setRole( source.getAttributeRole().getFullPath() ); binding.setInverse( source.isInverse() ); binding.setMutable( source.isMutable() ); binding.setOptimisticLocked( source.isIncludedInOptimisticLocking() );  if ( source.getCustomPersisterClassName() != null ) { binding.setCollectionPersisterClass( mappingDocument.getClassLoaderAccess().classForName( mappingDocument.qualifyClassName( source.getCustomPersisterClassName() ) ) ); }  applyCaching( mappingDocument, source.getCaching(), binding );  // bind the collection type info String typeName = source.getTypeInformation().getName(); Map typeParameters = new HashMap(); if ( typeName != null ) { // see if there is a corresponding type-def final TypeDefinition typeDef = mappingDocument.getMetadataCollector().getTypeDefinition( typeName ); if ( typeDef != null ) { typeName = typeDef.getTypeImplementorClass().getName(); if ( typeDef.getParameters() != null ) { typeParameters.putAll( typeDef.getParameters() ); } } else { // it could be a unqualified class name, in which case we should qualify // it with the implicit package name for this context, if one. typeName = mappingDocument.qualifyClassName( typeName ); } } if ( source.getTypeInformation().getParameters() != null ) { typeParameters.putAll( source.getTypeInformation().getParameters() ); }  binding.setTypeName( typeName ); binding.setTypeParameters( typeParameters );  if ( source.getFetchCharacteristics().getFetchTiming() == FetchTiming.DELAYED ) { binding.setLazy( true ); binding.setExtraLazy( source.getFetchCharacteristics().isExtraLazy() ); } else { binding.setLazy( false ); }  switch ( source.getFetchCharacteristics().getFetchStyle() ) { case SELECT: { binding.setFetchMode( FetchMode.SELECT ); break; } case JOIN: { binding.setFetchMode( FetchMode.JOIN ); break; } case BATCH: { binding.setFetchMode( FetchMode.SELECT ); binding.setBatchSize( source.getFetchCharacteristics().getBatchSize() ); break; } case SUBSELECT: { binding.setFetchMode( FetchMode.SELECT ); binding.setSubselectLoadable( true ); // todo : this could totally be done using a ""symbol map"" approach binding.getOwner().setSubselectLoadableCollections( true ); break; } default: { throw new AssertionFailure( ""Unexpected FetchStyle : "" + source.getFetchCharacteristics().getFetchStyle().name() ); } }  for ( String name : source.getSynchronizedTableNames() ) { binding.getSynchronizedTables().add( name ); }  binding.setWhere( source.getWhere() ); binding.setLoaderName( source.getCustomLoaderName() ); if ( source.getCustomSqlInsert() != null ) { binding.setCustomSQLInsert( source.getCustomSqlInsert().getSql(), source.getCustomSqlInsert().isCallable(), source.getCustomSqlInsert().getCheckStyle() ); } if ( source.getCustomSqlUpdate() != null ) { binding.setCustomSQLUpdate( source.getCustomSqlUpdate().getSql(), source.getCustomSqlUpdate().isCallable(), source.getCustomSqlUpdate().getCheckStyle() ); } if ( source.getCustomSqlDelete() != null ) { binding.setCustomSQLDelete( source.getCustomSqlDelete().getSql(), source.getCustomSqlDelete().isCallable(), source.getCustomSqlDelete().getCheckStyle() ); } if ( source.getCustomSqlDeleteAll() != null ) { binding.setCustomSQLDeleteAll( source.getCustomSqlDeleteAll().getSql(), source.getCustomSqlDeleteAll().isCallable(), source.getCustomSqlDeleteAll().getCheckStyle() ); }  if ( source instanceof Sortable ) { final Sortable sortable = (Sortable) source; if ( sortable.isSorted() ) { binding.setSorted( true ); if ( ! sortable.getComparatorName().equals( ""natural"" ) ) { binding.setComparatorClassName( sortable.getComparatorName() ); } } else { binding.setSorted( false ); } }  if ( source instanceof Orderable ) { if ( ( (Orderable) source ).isOrdered() ) { binding.setOrderBy( ( (Orderable) source ).getOrder() ); } }  final String cascadeStyle = source.getCascadeStyleName(); if ( cascadeStyle != null && cascadeStyle.contains( ""delete-orphan"" ) ) { binding.setOrphanDelete( true ); }  for ( FilterSource filterSource : source.getFilterSources() ) { String condition = filterSource.getCondition(); if ( condition == null ) { final FilterDefinition filterDefinition = mappingDocument.getMetadataCollector().getFilterDefinition( filterSource.getName() ); if ( filterDefinition != null ) { condition = filterDefinition.getDefaultFilterCondition(); } }  binding.addFilter( filterSource.getName(), condition, filterSource.shouldAutoInjectAliases(), filterSource.getAliasToTableMap(), filterSource.getAliasToEntityMap() ); } } "	0	0	0	0	0	1
private static BasicTypeProducer resolveTypeProducer( MappingDocument mappingDocument, HibernateTypeSource typeSource) { final String typeName = typeSource.getName();  if ( StringHelper.isNotEmpty( typeName ) ) { final BasicTypeProducer registered = mappingDocument.getMetadataCollector() .getBasicTypeProducerRegistry() .resolve( typeSource.getName() ); if ( registered != null ) { return registered; } }  return new BasicTypeProducerUnregisteredImpl( mappingDocument.getMetadataCollector().getTypeConfiguration() ); } 	0	0	0	0	0	1
"@RequestMapping(value=""/exportDataDump"", method = RequestMethod.GET) @ApiOperation(value = ""exportDataDump"", notes = ""The Export Data Dump API allows export of bibliographic records in SCSB database into MARCXML or SCSBXML format. This is used by partners to export records in preferred format and update their respective discovery systems. These jobs are scheduled to run by HTC support."", nickname = ""exportDataDump"", position = 0) @ApiResponses(value = {@ApiResponse(code = 200, message = ReCAPConstants.DATADUMP_PROCESS_STARTED)}) @ResponseBody public ResponseEntity exportDataDump(@ApiParam(value = ""Institution code(s) for requesting shared/open updates from partners: PUL = Princeton, CUL = Columbia, NYPL = New York Public Library"" , required = true, name = ""institutionCodes"") @RequestParam String institutionCodes, @ApiParam(value = ""Institution codes of the requesting institution. PUL = Princeton, CUL = Columbia, NYPL = New York Public Library"",required=true, name = ""requestingInstitutionCode"") @RequestParam String requestingInstitutionCode, @ApiParam(value = ""Type of export - Incremental (use 1) or Deleted (use 2)"" , required = true , name = ""fetchType"") @RequestParam String fetchType, @ApiParam(value = ""Type of format - Marc xml (use 0) or SCSB xml (use 1), for deleted records only json format (use 2)"",required=true, name = ""outputFormat"") @RequestParam String outputFormat, @ApiParam(value = ""Get updates to middleware collection since the date provided. Date format will be a string (yyyy-MM-dd HH:mm) and is Eastern Time."",name = ""date"") @RequestParam(required = false) String date, @ApiParam(value = ""Data can be requested by Collection Group ID, either Shared (use 1) or Open (use 2). Default is both, can use 1,2 as well."", name = ""collectionGroupIds"") @RequestParam(required=false) String collectionGroupIds, @ApiParam(value = ""Type of transmission - for FTP use 0, for HTTP response use 1. Default is FTP."", name = ""transmissionType"")@RequestParam(required=false) String transmissionType, @ApiParam(value = ""Email address to whom email will be sent upon completion"" , name = ""emailToAddress"")@RequestParam(required=false) String emailToAddress ){ RestTemplate restTemplate = getRestTemplate(); Map<String,String> inputMap = new HashMap<>(); inputMap.put(""institutionCodes"",institutionCodes); inputMap.put(""requestingInstitutionCode"",requestingInstitutionCode); inputMap.put(""fetchType"",fetchType); inputMap.put(""outputFormat"",outputFormat); inputMap.put(""date"",date); inputMap.put(""collectionGroupIds"",collectionGroupIds); inputMap.put(""transmissionType"",transmissionType); inputMap.put(""emailToAddress"",emailToAddress); try { HttpHeaders headers = new HttpHeaders(); headers.set(""api_key"",""recap""); HttpEntity requestEntity = new HttpEntity(headers); ResponseEntity<String> response = restTemplate.exchange(getScsbEtlUrl() + ""dataDump/exportDataDump/?institutionCodes={institutionCodes}&requestingInstitutionCode={requestingInstitutionCode}&fetchType={fetchType}&outputFormat={outputFormat}&date={date}&collectionGroupIds={collectionGroupIds}&transmissionType={transmissionType}&emailToAddress={emailToAddress}"", HttpMethod.GET, requestEntity, String.class, inputMap); return new ResponseEntity(response.getBody(), getHttpHeaders(), getHttpStatus(response.getBody())); } catch (Exception exception) { logger.error(""error-->"",exception); return new ResponseEntity(""Scsb Etl Service is Unavailable."", getHttpHeaders(), HttpStatus.SERVICE_UNAVAILABLE); } } "	0	0	0	0	0	1
public static Response getSimpleTextResponse(HttpCode code, String text) { Response r = Response.status(code.getCode()).entity(text).build(); return addResponseHeaders(r); } 	1	0	1	0	0	0
@Override public void mouseWheelMoved(int newValue) { if (Options.isMouseWheelDisabled() || Options.isMouseDisabled()) return;  UI.changeVolume((newValue < 0) ? -1 : 1); } 	1	0	1	0	0	0
"@Override protected void onSaveInstanceState(Bundle outState) { super.onSaveInstanceState(outState); //Log.d(""ViewLenses.onSaveInstanceState()"", ""saving data""); outState.putSerializable(getString(R.string.webcontent),content); SharedPreferences sharedPref = getSharedPreferences(getString(R.string.osc_package),MODE_PRIVATE); SharedPreferences.Editor ed = sharedPref.edit(); if(webView != null && content != null) { String url = webView.getUrl().replace(""?bookmark=1"", """"); ed.putString(content.getIcon(), url); ed.apply(); }  } "	0	1	0	0	0	0
private Account getCaller() { Account caller = CallContext.current().getCallingAccount(); return caller; } 	0	0	0	0	0	1
private void appendDate() { write(calendar.get(DAY_OF_MONTH)); write('-'); write(calendar.get(MONTH)); write('-'); write(calendar.get(YEAR)); } 	1	1	1	1	0	0
"public static State sampleTransitionFromEnumeratedDistribution(State previousState, GroundedAction action){  if(!(action.action instanceof FullActionModel)){ throw new RuntimeException(""Cannot sample a transition from the enumerated transition distribution, because the input action does not implement FullActionModel.""); }  List<TransitionProbability> tps = action.getTransitions(previousState); double roll = RandomFactory.getMapped(0).nextDouble(); double sum = 0.; for(TransitionProbability tp : tps){ sum += tp.p; if(roll < tp.p){ return tp.s; } }  throw new RuntimeException(""Cannot sample a transition because the transition probabilities did not sum to 1; they summed to "" + sum);  } "	1	1	1	0	1	0
private StorageManager createStorageManager() { if (configuration.isPersistenceEnabled()) { if (configuration.getStoreConfiguration() != null && configuration.getStoreConfiguration().getStoreType() == StoreConfiguration.StoreType.DATABASE) { return new JDBCJournalStorageManager(configuration, getScheduledPool(), executorFactory, ioExecutorFactory, shutdownOnCriticalIO); } else { // Default to File Based Storage Manager, (Legacy default configuration). return new JournalStorageManager(configuration, executorFactory, scheduledPool, ioExecutorFactory, shutdownOnCriticalIO); } } return new NullStorageManager(); } 	0	0	0	0	0	1
@Override public void processData(String id, IdentifiableMessage<String, UnitConfig, UnitConfig.Builder> entry, ProtoBufMessageMap<String, UnitConfig, UnitConfig.Builder> entryMap, ProtoBufRegistry<String, UnitConfig, UnitConfig.Builder> registry) throws CouldNotPerformException, EntryModification {  final UnitConfig.Builder unitConfig = entry.getMessage().toBuilder();  // filter if config does not contain placement or shape if (!unitConfig.hasPlacementConfig() || !unitConfig.getPlacementConfig().hasShape() || unitConfig.getPlacementConfig().getShape().getFloorList().isEmpty() || !unitConfig.getPlacementConfig().getShape().getCeilingList().isEmpty()) { return; }  // Check whether the location registry data is available. Should be the case. try { if(!CachedLocationRegistryRemote.getRegistry().isDataAvailable()) return; } catch (NotAvailableException ex) { return; } catch (InterruptedException ex) { Thread.currentThread().interrupt(); throw new FatalImplementationErrorException(this, ex); }  Transform3D unitTransformation; try { unitTransformation = CachedLocationRegistryRemote.getRegistry().getUnitTransformation(entry.getMessage()).get().getTransform(); } catch (InterruptedException ex) { Thread.currentThread().interrupt(); throw new FatalImplementationErrorException(this, ex); } catch (NotAvailableException | ExecutionException ex) { return; }  final Shape shape = unitConfig.getPlacementConfig().getShape(); Shape newShape = updateCeilingAndLinks(shape, unitTransformation); if(!shape.equals(newShape)) { unitConfig.getPlacementConfigBuilder().setShape(shape); throw new EntryModification(entry.setMessage(unitConfig), this); } } 	1	1	1	0	1	0
"@SuppressWarnings(""unchecked"") public static <T extends NBT> List<T> fullyDeserializeList(String key, NBTTagCompound tag) { if (!tag.hasKey(key + ""_null"") || tag.getBoolean(key + ""_null"")) { return null; }  NBTTagCompound list_data = tag.getCompoundTag(key + ""_list_data"");  List<T> list = Lists.newArrayList();  int size = list_data.getInteger(""size"");  for (int i = 0; i < size; i++) { if (!list_data.hasKey(""data_"" + i + ""_null"") || list_data.getBoolean(""data_"" + i + ""_null"")) { continue; }  T nbt = (T) ClassSerializer.instantiate(""data_"" + i + ""_srl"", list_data);  nbt.read(list_data.getCompoundTag(""data_"" + i));  list.add(nbt); }  return list; } "	0	0	0	1	0	0
"public StatementBuilder<T, ID> updateColumnValue(String columnName, Object value) throws SQLException { FieldType fieldType = verifyColumnName(columnName); if (fieldType.isForeignCollection()) { throw new SQLException(""Can't update foreign colletion field: "" + columnName); } addUpdateColumnToList(columnName, new SetValue(columnName, fieldType, value)); return this; } "	0	0	0	0	0	1
"public StatementBuilder<T, ID> updateColumnExpression(String columnName, String expression) throws SQLException { FieldType fieldType = verifyColumnName(columnName); if (fieldType.isForeignCollection()) { throw new SQLException(""Can't update foreign colletion field: "" + columnName); } addUpdateColumnToList(columnName, new SetExpression(columnName, fieldType, expression)); return this; } "	0	0	0	0	0	1
public static Policies load(File rootPath, final Set<Attribute> forcedContext)  { return new Policies(PoliciesCache.fromDir(rootPath)); } 	1	0	1	1	0	0
private MapillaryImage[] getNearestImagesFromDifferentSequences(MapillaryAbstractImage target, int limit) { return data.getSequences().parallelStream() .filter((seq) -> target.getSequence() == null || seq.getKey() != null && !seq.getKey().equals(target.getSequence().getKey())) .map((seq) -> { Optional<MapillaryAbstractImage> resImg = seq.getImages().parallelStream() .filter((img) -> img instanceof MapillaryImage && img.isVisible()) .sorted(new NearestImgToTargetComparator(target)) .findFirst(); return resImg.isPresent() ? resImg.get() : null; }) .filter((img) -> img != null && img.getMovingLatLon().greatCircleDistance(target.getMovingLatLon()) < MapillaryProperties.SEQUENCE_MAX_JUMP_DISTANCE.get() ) .sorted(new NearestImgToTargetComparator(target)) .limit(limit) .toArray(MapillaryImage[]::new); } 	0	0	0	0	0	1
"@Test public void testDelegate() throws IOException, InterruptedException { EdDSA key = wallet.getAccounts().get(0); String uri = ""/delegate?password="" + password + ""&from=0&to="" + key.toAddressString() + ""&value="" + Config.MIN_DELEGATE_FEE + ""&fee=5000000&data=test""; JSONObject response = request(uri); assertTrue(response.getBoolean(""success"")); assertNotNull(response.getString(""result""));  Thread.sleep(200);  List<Transaction> list = api.pendingMgr.getTransactions(); assertFalse(list.isEmpty()); assertArrayEquals(list.get(list.size() - 1).getHash(), Hex.parse(response.getString(""result""))); assertEquals(list.get(list.size() - 1).getType(), TransactionType.DELEGATE); } "	0	0	0	0	0	1
"public void addContact(final String address, final String nickname) throws ImException {  if (null == address) { throw new NullPointerException(); }  if (mManager.getState() == ContactListManager.BLOCKED_LIST_LOADED) { if (mManager.isBlocked(address)) { throw new ImException(ImErrorInfo.CANT_ADD_BLOCKED_CONTACT, ""Contact has been blocked""); } }  Contact contact = getContact(address);   if (contact == null) { contact = new Contact (new XmppAddress(address),nickname); } else if (nickname != null) contact.setName(nickname);  try { mManager.addContactToListAsync(contact, ContactList.this, true); } catch (ImException e) { // TODO Auto-generated catch block e.printStackTrace(); }  } "	0	0	0	0	0	1
"@Test public void queryByField() { running(fakeApplication(), () -> { Result result = route( fakeRequest(GET, ""/organisations/search?q=fundertype.label:land"")); assertContains(result, ""Köln""); }); } "	0	0	0	0	0	1
"private void indexIndividuals(BatchInserter inserter, OntologyLoader loader, Map<String, Long> nodeMap, Map<String, Long> mergedNodeMap, Map<String, Long> classNodeMap) { getLog().debug(""Creating Neo4j index for "" + loader.getAllIndividualIRIs().size() + "" individuals"");  for (IRI individualIri : loader.getAllIndividualIRIs()) {  Long node = getOrCreateNode(inserter, nodeMap,loader, individualIri, instanceLabel, _instanceLabel,nodeOntologyLabel); Long mergedNode = getOrCreateMergedNode(inserter, mergedNodeMap, loader, individualIri, mergedClassLabel);  // add refers link inserter.createRelationship( node, mergedNode, refersTo, null);  // add parent nodes if (!loader.getDirectTypes().containsKey(individualIri)) { for (IRI parent : loader.getDirectTypes().get(individualIri)) { Long parentNode =  getOrCreateNode(inserter, classNodeMap,loader, parent, nodeLabel,nodeOntologyLabel,  _nodeLabel); // create local relationship inserter.createRelationship(node, parentNode, typeOf, rdfTypeProperties); } } else { Long defaultType = getOrCreateNode(inserter, nodeMap,loader, IRI.create(""http://www.w3.org/2002/07/owl#Thing""),  nodeLabel,nodeOntologyLabel,  _nodeLabel, rootLabel); inserter.createRelationship( node, defaultType, typeOf, rdfTypeProperties); } } } "	1	0	1	1	0	0
"@Override public void createIndex(Collection<OntologyLoader> loaders) {  getLog().info(""Creating index for "" + loaders.size() + "" loaders"");   for (OntologyLoader loader : loaders) {   getLog().info(""Creating new index for "" + loader.getOntologyName()); long startTime = System.currentTimeMillis();  getLog().info(""Number of classes to index: "" + loader.getAllClasses().size()); getLog().info(""Number of object properties to index: "" + loader.getAllObjectPropertyIRIs().size()); getLog().info(""Number of annotation properties to index: "" + loader.getAllAnnotationPropertyIRIs().size()); getLog().info(""Number of individuals to index: "" + loader.getAllIndividualIRIs().size());  List<TermDocument> documents = new ArrayList<TermDocument>(); List<SuggestDocument> suggestDocuments = new ArrayList<>();  for (IRI classTerm : loader.getAllClasses()) { getLog().debug(""solr indexing "" + classTerm.toString());  TermDocumentBuilder builder = extractFeatures(loader, classTerm); builder.setType(TermType.CLASS.toString().toLowerCase()); builder.setId(generateId(loader.getOntologyName(), ""class"", classTerm.toString())); builder.setUri_key(generateAnnotationId(loader.getOntologyName() + classTerm.toString() + ""class"").hashCode());  documents.add(builder.createTermDocument());  if (documents.size() == 10000) { getLog().debug(""Max reached - indexing terms""); index(documents); documents = new ArrayList<>(); }  // get labels and synonyms for suggest index suggestDocuments.add(new SuggestDocument(loader.getTermLabels().get(classTerm), loader.getOntologyName())); if (loader.getTermSynonyms().containsKey(classTerm)) { for (String syn : loader.getTermSynonyms().get(classTerm)) { suggestDocuments.add(new SuggestDocument(syn, loader.getOntologyName())); } } if (suggestDocuments.size() > 10000) { indexSuggest(suggestDocuments); suggestDocuments = new ArrayList<>(); }  }  for (IRI classTerm : loader.getAllObjectPropertyIRIs()) { TermDocumentBuilder builder = extractFeatures(loader, classTerm); builder.setType(TermType.PROPERTY.toString().toLowerCase()); builder.setId(generateId(loader.getOntologyName(), ""property"", classTerm.toString())); builder.setUri_key(generateAnnotationId(loader.getOntologyName() + classTerm.toString() + ""property"").hashCode());  documents.add(builder.createTermDocument()); }  for (IRI classTerm : loader.getAllAnnotationPropertyIRIs()) { TermDocumentBuilder builder = extractFeatures(loader, classTerm); builder.setType(TermType.PROPERTY.toString().toLowerCase()); builder.setId(generateId(loader.getOntologyName(), ""property"", classTerm.toString())); builder.setUri_key(generateAnnotationId(loader.getOntologyName() + classTerm.toString() + ""property"").hashCode()); documents.add(builder.createTermDocument()); }  for (IRI classTerm : loader.getAllIndividualIRIs()) { TermDocumentBuilder builder = extractFeatures(loader, classTerm); builder.setType(TermType.INDIVIDUAL.toString().toLowerCase()); builder.setId(generateId(loader.getOntologyName(), ""individual"", classTerm.toString())); builder.setUri_key(generateAnnotationId(loader.getOntologyName() + classTerm.toString() + ""individual"").hashCode()); documents.add(builder.createTermDocument());   if (documents.size() == 10000) { getLog().debug(""Max reached - indexing terms""); index(documents); documents = new ArrayList<>(); } }  // index ontology meta data TermDocumentBuilder builder = extractOntologyFeature(loader); documents.add(builder.createTermDocument());   long endTime = System.currentTimeMillis(); long duration = (endTime - startTime) / 1000; // time in seconds index(documents); indexSuggest(suggestDocuments); getLog().info(""Solr index for "" + loader.getOntologyName() + "" completed in "" + duration + "" seconds"");  }    } "	0	0	0	0	0	1
public static Texture getTexture(String txt) { return textures.get(txt); } 	0	0	0	0	0	1
"@SuppressWarnings({ ""deprecation"" }) private void loot(CommandSender sender, String[] args, Koth koth){ Player player = (Player)sender; if(args.length > 0){ if(args[0].equalsIgnoreCase(""setpos"")){ Block block = player.getTargetBlock((HashSet<Byte>)null, 8);  if(block == null){ throw new CommandMessageException(Lang.COMMAND_EDITOR_LOOT_SETNOBLOCK); } koth.setLootPos(block.getLocation()); getPlugin().getKothHandler().saveKoths(); throw new CommandMessageException(Lang.COMMAND_EDITOR_LOOT_POSITION_SET); } else if(args[0].equalsIgnoreCase(""link"")){ if(args.length < 2){ throw new CommandMessageException(Lang.COMMAND_GLOBAL_USAGE[0]+""/koth edit <koth> loot link <loot>""); } koth.setLoot(args[1]); getPlugin().getKothHandler().saveKoths(); throw new CommandMessageException(Lang.COMMAND_EDITOR_LOOT_LINK); } else if(args[0].equalsIgnoreCase(""second"")){ if(args.length < 2){ throw new CommandMessageException(Lang.COMMAND_GLOBAL_USAGE[0]+""/koth edit <koth> loot second (none|north|east|south|west)""); } try { koth.setSecondLootDirection(Koth.LootDirection.valueOf(args[1].toUpperCase())); } catch(Exception e){ throw new CommandMessageException(Lang.COMMAND_GLOBAL_USAGE[0]+""/koth edit <koth> loot second (none|north|east|south|west)""); }  getPlugin().getKothHandler().saveKoths(); throw new CommandMessageException(Lang.COMMAND_EDITOR_LOOT_SECOND_CHEST); } }  Utils.sendMessage(sender, true, new MessageBuilder(Lang.COMMAND_GLOBAL_HELP_TITLE).title(""loot commands"").build(), new MessageBuilder(Lang.COMMAND_GLOBAL_HELP_INFO).command(""/koth edit <koth> loot setpos"").commandInfo(""sets the position to the block looking at"").build(), new MessageBuilder(Lang.COMMAND_GLOBAL_HELP_INFO).command(""/koth edit <koth> loot link <loot>"").commandInfo(""links a loot chest"").build(), new MessageBuilder(Lang.COMMAND_GLOBAL_HELP_INFO).command(""/koth edit <koth> loot second (none|north|east|south|west)"").commandInfo(""set where second chest will spawn"").build() ); } "	1	0	1	0	0	0
"public static void main(String[] args) { Application app; String os = System.getProperty(""os.name"").toLowerCase(); if (os.startsWith(""mac"")) { app = new DefaultOSXApplication(); } else if (os.startsWith(""win"")) { app = new DefaultSDIApplication(); } else { app = new DefaultSDIApplication(); }  System.setProperty(""apple.laf.useScreenMenuBar"", ""true""); System.setProperty(""com.apple.mrj.application.apple.menu.about.name"", ""TerraER"");  ResourceBundleUtil labels = ResourceBundleUtil.getLAFBundle(""org.jhotdraw.app.Labels""); DrawApplicationModel model = new DrawApplicationModel(); model.setName(""TerraER""); model.setVersion(""2.2""); model.setCopyright(labels.getString(""copyright"")); model.setProjectClassName(""org.jhotdraw.samples.draw.TerraProject""); app.setModel(model); app.launch(args); } "	0	1	0	0	0	0
"private List<GraphPath> compactLegsByReversedSearch(AStar aStar, RoutingRequest originalReq, RoutingRequest options, List<GraphPath> newPaths, double timeout, RemainingWeightHeuristic remainingWeightHeuristic){ List<GraphPath> reversedPaths = new ArrayList<>(); for(GraphPath newPath : newPaths){ State targetAcceptedState = options.arriveBy ? newPath.states.getLast().reverse() : newPath.states.getLast(); if(targetAcceptedState.stateData.getNumBooardings() < 2) { reversedPaths.add(newPath); continue; } final long arrDepTime = targetAcceptedState.getTimeSeconds(); LOG.debug(""Dep time: "" + new Date(newPath.getStartTime() * 1000)); LOG.debug(""Arr time: "" + new Date(newPath.getEndTime() * 1000));  // find first/last transit stop Vertex transitStop = null; long transitStopTime = arrDepTime; while (transitStop == null) { if(targetAcceptedState.backEdge instanceof TransitBoardAlight){ if(options.arriveBy){ transitStop = targetAcceptedState.backEdge.getFromVertex(); }else{ transitStop = targetAcceptedState.backEdge.getToVertex(); } transitStopTime = targetAcceptedState.getTimeSeconds(); } targetAcceptedState = targetAcceptedState.getBackState(); }  // find the path from transitStop to origin/destination Vertex fromVertex = options.arriveBy ? options.rctx.fromVertex : transitStop; Vertex toVertex = options.arriveBy ? transitStop : options.rctx.toVertex; RoutingRequest reversedTransitRequest = createReversedTransitRequest(originalReq, options, fromVertex, toVertex, arrDepTime, new EuclideanRemainingWeightHeuristic()); aStar.getShortestPathTree(reversedTransitRequest, timeout); List<GraphPath> pathsToTarget = aStar.getPathsToTarget(); if(pathsToTarget.isEmpty()){ reversedPaths.add(newPath); continue; } GraphPath walkPath = pathsToTarget.get(0);  // do the reversed search to/from transitStop Vertex fromTransVertex = options.arriveBy ? transitStop : options.rctx.fromVertex; Vertex toTransVertex = options.arriveBy ? options.rctx.toVertex: transitStop; RoutingRequest reversedMainRequest = createReversedMainRequest(originalReq, options, fromTransVertex, toTransVertex, transitStopTime, remainingWeightHeuristic); aStar.getShortestPathTree(reversedMainRequest, timeout);  List<GraphPath> newRevPaths = aStar.getPathsToTarget(); if (newRevPaths.isEmpty()) { reversedPaths.add(newPath); }else{ List<GraphPath> joinedPaths = new ArrayList<>(); for(GraphPath newRevPath : newRevPaths){ LOG.debug(""REV Dep time: "" + new Date(newRevPath.getStartTime() * 1000)); LOG.debug(""REV Arr time: "" + new Date(newRevPath.getEndTime() * 1000)); List<GraphPath> concatenatedPaths = Arrays.asList(newRevPath, walkPath); if(options.arriveBy){ Collections.reverse(concatenatedPaths); } GraphPath joinedPath = joinPaths(concatenatedPaths);  if((!options.arriveBy && joinedPath.states.getFirst().getTimeInMillis() > options.dateTime * 1000) || (options.arriveBy && joinedPath.states.getLast().getTimeInMillis() < options.dateTime * 1000)){ joinedPaths.add(joinedPath); if(newPaths.size() > 1){ for (AgencyAndId tripId : joinedPath.getTrips()) { options.banTrip(tripId); } } } } reversedPaths.addAll(joinedPaths); } } return reversedPaths.isEmpty() ? newPaths : reversedPaths; } "	1	0	1	0	0	0
"public static String toSnakeCase(String input) { input = removeSpecialCharacters(input); input = input.substring(0, 1).toLowerCase(Locale.US) + input.substring(1); StringBuilder output = new StringBuilder(); for (int i = 0; i < input.length(); i++) { char currentChar = input.charAt(i); if (Character.isUpperCase(currentChar)) { output.append(""_""); } output.append(currentChar); }  return output.toString(); } "	0	0	0	1	0	0
"public static boolean isBoolean(JCExpression varType) { return varType != null && varType.toString().equals(""boolean""); } "	0	0	0	1	0	0
private static JsonNode fullJsonResponse(final List<Document> documents, final String field, long allHits, boolean addQueryInfo, Request request) { Iterable<JsonNode> nonEmptyNodes = Iterables.filter(Lists.transform(documents, doc -> { return Json.parse(doc.getSource()); }), node -> { return node.size() > 0; }); if (!field.isEmpty()) { nonEmptyNodes = ImmutableSortedSet.copyOf((o1, o2) -> { return o1.asText().compareTo(o2.asText()); }, FluentIterable.from(nonEmptyNodes).transformAndConcat(input -> { return input.isArray() ? Lists.newArrayList(input.elements()) : Lists.newArrayList(input); })); } List<JsonNode> data = new ArrayList<>(); if (addQueryInfo) data.add(queryInfo(allHits, request)); data.addAll(ImmutableSet.copyOf(nonEmptyNodes)); return Json.toJson(data); } 	0	0	0	0	0	1
"public List<MachineRuntime> forkMachines(String keyPairName, GroupRuntime mainGroup, Set<String> securityGroupIds, int totalSize, Ec2 ec2) throws KaramelException { String uniqeGroupName = Settings.EC2_UNIQUE_GROUP_NAME(mainGroup.getCluster().getName(), mainGroup.getName()); List<String> allVmNames = Settings.EC2_UNIQUE_VM_NAMES(mainGroup.getCluster().getName(), mainGroup.getName(), totalSize); logger.info(String.format(""Start forking %d machine(s) for '%s' ..."", totalSize, uniqeGroupName));  if (context == null) { throw new KaramelException(""Register your valid credentials first :-| ""); }  if (sshKeyPair == null) { throw new KaramelException(""Choose your ssh keypair first :-| ""); } AWSEC2TemplateOptions options = context.getComputeService().templateOptions().as(AWSEC2TemplateOptions.class); if (ec2.getPrice() != null) { options.spotPrice(ec2.getPrice()); }  boolean succeed = false; int tries = 0; Set<NodeMetadata> successfulNodes = Sets.newLinkedHashSet(); List<String> unforkedVmNames = new ArrayList<>(); List<String> toBeForkedVmNames; unforkedVmNames.addAll(allVmNames); Map<NodeMetadata, Throwable> failedNodes = Maps.newHashMap(); while (!succeed && tries < Settings.EC2_RETRY_MAX) { int requestSize = totalSize - successfulNodes.size(); if (requestSize > Settings.EC2_MAX_FORK_VMS_PER_REQUEST) { requestSize = Settings.EC2_MAX_FORK_VMS_PER_REQUEST; toBeForkedVmNames = unforkedVmNames.subList(0, Settings.EC2_MAX_FORK_VMS_PER_REQUEST); } else { toBeForkedVmNames = unforkedVmNames; } TemplateBuilder template = context.getComputeService().templateBuilder(); options.keyPair(keyPairName); options.as(AWSEC2TemplateOptions.class).securityGroupIds(securityGroupIds); options.nodeNames(toBeForkedVmNames); if (ec2.getSubnet() != null) { options.as(AWSEC2TemplateOptions.class).subnetId(ec2.getSubnet()); } template.options(options); template.os64Bit(true); template.hardwareId(ec2.getType()); template.imageId(ec2.getRegion() + ""/"" + ec2.getImage()); template.locationId(ec2.getRegion()); tries++; Set<NodeMetadata> succ = new HashSet<>(); try { logger.info(String.format(""Forking %d machine(s) for '%s', so far(succeeded:%d, failed:%d, total:%d)"", requestSize, uniqeGroupName, successfulNodes.size(), failedNodes.size(), totalSize)); succ.addAll(context.getComputeService().createNodesInGroup( uniqeGroupName, requestSize, template.build())); } catch (RunNodesException ex) { addSuccessAndLostNodes(ex, succ, failedNodes); } catch (AWSResponseException e) { if (""InstanceLimitExceeded"".equals(e.getError().getCode())) { throw new KaramelException(""It seems your ec2 account has instance limit.. if thats the case either decrease "" + ""size of your cluster or increase the limitation of your account."", e); } else if (""InsufficientInstanceCapacity"".equals(e.getError().getCode())) { throw new KaramelException(String.format(""It seems your ec2 account doesn't have sufficent capacity for %s "" + ""instances"", ec2.getType()), e); } else { logger.error("""", e); } } catch (IllegalStateException ex) { logger.error("""", ex); logger.info(String.format(""#%d Hurry up EC2!! I want machines for %s, will ask you again in %d ms :@"", tries, uniqeGroupName, Settings.EC2_RETRY_INTERVAL), ex); }  unforkedVmNames = findLeftVmNames(succ, unforkedVmNames); successfulNodes.addAll(succ); if (successfulNodes.size() < totalSize) { try { succeed = false; logger.info(String.format(""So far we got %d successful-machine(s) and %d failed-machine(s) out of %d "" + ""original-number for '%s'. Failed nodes will be killed later."", successfulNodes.size(), failedNodes.size(), totalSize, uniqeGroupName)); Thread.currentThread().sleep(Settings.EC2_RETRY_INTERVAL); } catch (InterruptedException ex1) { logger.error("""", ex1); } } else { succeed = true; logger.info(String.format(""Cool!! we got all %d machine(s) for '%s' |;-) we have %d failed-machines to kill "" + ""before we go on.."", totalSize, uniqeGroupName, failedNodes.size())); if (failedNodes.size() > 0) { cleanupFailedNodes(failedNodes); } List<MachineRuntime> machines = new ArrayList<>(); for (NodeMetadata node : successfulNodes) { if (node != null) { MachineRuntime machine = new MachineRuntime(mainGroup); ArrayList<String> privateIps = new ArrayList(); ArrayList<String> publicIps = new ArrayList(); privateIps.addAll(node.getPrivateAddresses()); publicIps.addAll(node.getPublicAddresses()); machine.setEc2Id(node.getId()); machine.setName(node.getName()); machine.setPrivateIp(privateIps.get(0)); machine.setPublicIp(publicIps.get(0)); machine.setSshPort(node.getLoginPort()); machine.setSshUser(node.getCredentials().getUser()); machines.add(machine); } } return machines; } } throw new KaramelException(String.format(""Couldn't fork machines for group'%s'"", mainGroup.getName())); } "	0	0	0	0	0	1
public TextCellFactory initByFont() { bmpFont.setFixedWidthGlyphs(fitting); this.width = (int)bmpFont.getSpaceWidth(); this.height = (int)(bmpFont.getAscent() - bmpFont.getDescent()); Pixmap temp = new Pixmap(1, 1, Pixmap.Format.RGBA8888); temp.setColor(com.badlogic.gdx.graphics.Color.WHITE); temp.fill(); block = new Texture(1, 1, Pixmap.Format.RGBA8888); block.draw(temp, 0, 0); temp.dispose(); initialized = true; return this; } 	0	1	0	0	0	0
private void deleteDir(File dir) {  String[] entries = dir.list(); if (entries.length != 0) { for (String s : entries) { File currentFile = new File(dir.getPath(), s); if (currentFile.isDirectory()) { deleteDir(currentFile); } currentFile.delete(); } } dir.delete(); } 	1	1	1	1	0	0
@Override public Pair<ArrayList<Task>,Boolean> execute() { taskController = TaskController.getInstance(); if (hasOption(KEYWORD_DELETE)) { return deleteByTaskId(); } else if (hasOption(KEYWORD_BETWEEN) && hasOption(KEYWORD_AND)) { return deleteByPeriod(); } else { return new Pair<ArrayList<Task>, Boolean>(null, false); } } 	0	1	0	0	0	0
"@Override public void onChildRemoved(DataSnapshot dataSnapshot) { Log.d(TAG, String.format(Locale.US, LOG_FORMAT, ""onChildRemoved"", dataSnapshot, null)); process(dataSnapshot, false, REMOVED); } "	1	0	1	0	0	0
"public static String constructConceptNamesToFilter(Report<GenericObservationReportConfig> report, BahmniReportsProperties bahmniReportsProperties) { List<String> conceptNamesToFilter = getConceptNamesToFilter(report.getConfig()); List<String> childConceptsAsList = fetchChildConceptsAsList(conceptNamesToFilter, report, bahmniReportsProperties); if (CollectionUtils.isEmpty(childConceptsAsList)) { return null; } List<String> conceptNamesWithDoubleQuote = new ArrayList<>(); for (String conceptName : childConceptsAsList) { conceptNamesWithDoubleQuote.add(""\"""" + conceptName + ""\""""); } return StringUtils.join(conceptNamesWithDoubleQuote, ','); } "	0	1	0	0	0	0
public void purgeQueue(String queue) throws AndesAdminServiceException, RemoteException { stub.purgeMessagesOfQueue(queue); } 	0	0	0	0	0	1
"public Map<String, List<ConfiguredJob>> loadJobs() throws IOException {  return objectMapper.readValue(new File(configDirectory + ""jenkins.json""), new TypeReference<Map<String, List<ConfiguredJob>>>() { }); } "	0	0	0	0	0	1
public List<String> getConservedPfamNames(String alignedUnit, int order, String scopId, float score) throws IOException, ProtodomainCreationException, StructureException {  Protodomain[]  protodomains; Atom[][] ca; List<ProteinSequence> seqs;  Protodomain wholeAligned = Protodomain.fromString(alignedUnit, scopId, cache); protodomains = new Protodomain[order]; ca = new Atom[order][]; seqs = new ArrayList<ProteinSequence>(order); for (int i = 0; i < order; i++) { protodomains[i] = wholeAligned.createSubstruct(order, i); ca[i] = cache.getAtoms(protodomains[i].getString()); ProteinSequence seq = new ProteinSequence(StructureTools.convertAtomsToSeq(ca[i])); seqs.add(seq); }  List<String> pfamNames = getConservedPfamNames(seqs, score); return pfamNames; } 	0	0	0	0	0	1
@Override public boolean onBlockActivated(World world, BlockPos pos, IBlockState state, EntityPlayer playerIn, EnumHand hand, EnumFacing side, float hitX, float hitY, float hitZ) { if (!state.getValue(ACTIVE)) { if (isBlockLocked(world, pos)) { world.playSound(null, pos, SoundEvents.BLOCK_LEVER_CLICK, SoundCategory.BLOCKS, 1.0F, 0.3F); } else { changeToActiveBlock(world, pos); } return true; } else { return false; } } 	1	0	1	1	0	0
@Override protected void onDraw(Canvas canvas) { if (x != -1) { Paint paint = new Paint(); paint.setAntiAlias(true); paint.setColor(makePressColor()); canvas.drawCircle(x, y, radius, paint); if(radius > getHeight()/rippleSize) radius += rippleSpeed; if(radius >= getWidth() / 2 - rippleSpeed){ x = -1; y = -1; radius = getHeight()/rippleSize; if(onClickListener != null) onClickListener.onClick(this); } invalidate(); } } 	0	1	0	0	0	0
@Override protected void onDraw(Canvas canvas) { super.onDraw(canvas); if (x != -1) {  Paint paint = new Paint(); paint.setAntiAlias(true); paint.setColor(makePressColor()); canvas.drawCircle(x, y, radius, paint); if(radius > getHeight()/rippleSize) radius += rippleSpeed; if(radius >= getWidth()){ x = -1; y = -1; radius = getHeight()/rippleSize; if(onClickListener != null) onClickListener.onClick(this); } invalidate(); }  } 	0	1	0	0	0	0
"@Test public void blockingQueue() throws InterruptedException { BlockingQueue<byte[]> queue = new ArrayBlockingQueue<>(1 << 16); int cnt = count / threadNum; Runnable producer = () -> { byte[] bytes = new byte[size]; Arrays.fill(bytes, (byte) 2); for (int i = 0; i < cnt; i++) { try { queue.put(bytes); } catch (InterruptedException e) { e.printStackTrace(); } } };  Runnable writer = () -> { for (int i = 0; i < count; i++) { try { write(queue.take()); } catch (InterruptedException e) { e.printStackTrace(); } } };  Thread[] threads = new Thread[threadNum + 1]; long start = System.currentTimeMillis(); for (int i = 0; i < threadNum + 1; i++) { threads[i] = (i + 1 == threadNum ? new Thread(writer) : new Thread(producer)); threads[i].start(); } for (Thread t : threads) { t.join(); } long end = System.currentTimeMillis(); long timeCost = end - start; int tps = (int) (count / timeCost * 1000); out.printf(""BlockingcQueue [ThreadNum: %d, Count: %d, Size: %d] cost %dms with tps %s"", threadNum, count, size, timeCost, intToStr(tps)); } "	0	1	0	0	0	0
"ConfigBuilder EMAIL_TO(String val){ EMAIL_TO = assignStringValue(val, default_EMAIL_TO); logger.debug(""EMAIL_TO:""+EMAIL_TO); return this; } "	0	0	0	1	0	0
"ConfigBuilder YOUTUBE_REFRESH_TOKEN(String val){ YOUTUBE_REFRESH_TOKEN = assignStringValue(val, default_YOUTUBE_REFRESH_TOKEN); logger.debug(""YOUTUBE_REFRESH_TOKEN:""+YOUTUBE_REFRESH_TOKEN); return this; } "	0	0	0	1	0	0
@Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) { BaseActivity baseActivity = (BaseActivity) getActivity(); if (key.equals(getString(R.string.water_warning_key)) || key.equals(getString(R.string.water_warning_interval_key))) { baseActivity.rememberWater(sharedPreferences); } else if (key.equals(getString(R.string.sun_warning_key)) || key.equals(getString(R.string.sun_time_key))) { baseActivity.rememberSun(sharedPreferences); } else if (key.equals(getString(R.string.breathe_warning_key)) || key.equals(getString(R.string.breathe_time_key))) { baseActivity.rememberBreathe(sharedPreferences); } else if (key.equals(getString(R.string.eat_warning_key))) { baseActivity.rememberFood(sharedPreferences); } } 	0	1	0	0	0	0
"public void jMenuHelpAbout_actionPerformed() {  // make the dialog JDialog dlg = new JDialog(parentFrame, ""MegaMekLab Info"");  // set up the contents JPanel child = new JPanel(); child.setLayout(new BoxLayout(child, BoxLayout.Y_AXIS));  // set the text up. JLabel mekwars = new JLabel(""MegaMekLab Version: "" + MegaMekLab.VERSION); JLabel version = new JLabel(""MegaMek Version: "" + MegaMek.VERSION); JLabel license1 = new JLabel(""MegaMekLab software is under GPL. See""); JLabel license2 = new JLabel(""license.txt in ./Docs/licenses for details.""); JLabel license3 = new JLabel(""Project Info:""); JLabel license4 = new JLabel(""       http://www.sourceforge.net/projects/megameklab       "");  // center everything mekwars.setAlignmentX(Component.CENTER_ALIGNMENT); version.setAlignmentX(Component.CENTER_ALIGNMENT); license1.setAlignmentX(Component.CENTER_ALIGNMENT); license2.setAlignmentX(Component.CENTER_ALIGNMENT); license3.setAlignmentX(Component.CENTER_ALIGNMENT); license4.setAlignmentX(Component.CENTER_ALIGNMENT);  // add to child panel child.add(new JLabel(""\n"")); child.add(mekwars); child.add(version); child.add(new JLabel(""\n"")); child.add(license1); child.add(license2); child.add(new JLabel(""\n"")); child.add(license3); child.add(license4); child.add(new JLabel(""\n""));  // then add child panel to the content pane. dlg.getContentPane().add(child); dlg.setLocationRelativeTo(parentFrame); dlg.setModal(true); dlg.setResizable(false); dlg.pack(); dlg.setVisible(true); } "	0	0	0	0	0	1
"@Test public void currentSpanVisibleToUserFilters() throws Exception { server.enqueue(new MockResponse()); closeClient(client);  client = TracingHttpAsyncClientBuilder.create(httpTracing) .addInterceptorFirst((HttpRequestInterceptor) (request, context) -> request.setHeader(""my-id"", currentTraceContext.get().traceIdString()) ).build(); client.start();  get(client, ""/foo"");  RecordedRequest request = server.takeRequest(); assertThat(request.getHeader(""x-b3-traceId"")) .isEqualTo(request.getHeader(""my-id"")); } "	0	0	0	0	0	1
public final Target makeTarget(final Node node) { final float targetX = 30; final float targetY = 0.5f; final float targetZ = 1; return new Target(targetWidth, targetHeight, targetDepth, targetX, targetY, targetZ, node); } 	0	0	0	0	0	1
"private HttpRequest getHttpRequest(String method, GenericUrl url, final byte[] data) throws IOException, InternalClientException { if (method == null || method.trim().equals("""")) { throw new InternalClientException(""Method should be populated""); } if (url == null) { throw new InternalClientException(""URL should be populated""); } // create a new request factory that will sign the code on execute() HttpRequestFactory requestFactory = this.transport.createRequestFactory(new HttpRequestInitializer() { @Override public void initialize(HttpRequest request) throws IOException { // wire up secrets for code signing RequestSigner signer = new RequestSigner(data); signer.setAccessKeys(accessKey, secretKey); request.setInterceptor(signer); } }); HttpRequest request = requestFactory.buildRequest(method, url, null); // Workaround for where user agent for google is appended after signing interceptor is called. request.setSuppressUserAgentSuffix(true); // Disable throwing exceptions on execute() request.setThrowExceptionOnExecuteError(false); // set our own user agent request.getHeaders().setUserAgent(this.userAgent); return request; } "	1	0	1	1	0	0
public void drawPlayersInvAndHotbar(EntityPlayer player, int x, int y) { drawPlayersInv(player, x, y); drawPlayersHotBar(player, x, y + 58); } 	1	1	1	1	0	0
"@Override public void onBindViewHolder(ConversationViewHolder conversationViewHolder, int i) { Conversation conversation = mData.get(i); Message message = conversation.getMessage(); String details = """"; User user; Context ctx = conversationViewHolder.itemView.getContext();  if (MessageUtils.isMessageWithPhoto(message)) { details = ""[ "" + ctx.getString(R.string.photo) + "" ] "" + details; } if (MessageUtils.isMessageWithAudio(message)) { details = ""[ "" + ctx.getString(R.string.audio) + "" ] "" + details; } if (MessageUtils.isMessageWithWall(message)) { details = ""[ "" + ctx.getString(R.string.wall_entry) + "" ] "" + details; } if (MessageUtils.isMessageWithReply(message)) { details = ""[ "" + ctx.getString(R.string.reply) + "" ] "" + details; } if (MessageUtils.isMessageWithDoc(message)) { details = ""[ "" + ctx.getString(R.string.document) + "" ] "" + details; } if (MessageUtils.isMessageWithVideo(message)) { details = ""[ "" + ctx.getString(R.string.video) + "" ] "" + details; }  if (ConversationUtils.isConversationAGroupChat(conversation)) {  //            group chat conversationViewHolder.imageAvatar.setImageResource( R.drawable.ic_social_people_outline); conversationViewHolder.textName.setText(message.getTitle());  if (ConversationUtils.isMessageFromMe(message)) { details = details + conversationViewHolder.itemView.getResources() .getString(R.string.me_) + "" "" + message.getBody(); } else { user = mUserProvider.getUser(message.getUser_id()); if (user != null) { details = user.getFirstName() + "": "" + message.getBody(); } else { details = message.getBody(); }  }  conversationViewHolder.mOnlineIndicator.setVisibility(View.GONE); } else { //              regular chat user = mUserProvider.getUser(conversation.getId());  details = details + message.getBody(); if (ConversationUtils.isMessageFromMe(message)) { details = conversationViewHolder.itemView.getResources().getString(R.string.me_) + "" "" + details; }  if (user != null) { conversationViewHolder.mOnlineIndicator.setVisibility( user.getOnline() == 1 ? View.VISIBLE : View.GONE); mImageLoader.displayUserAvatar(user, conversationViewHolder.imageAvatar); conversationViewHolder.textName.setText( user.getFirstName() + "" "" + user.getLastName()); } } if (MessageUtils.isMessageWithSticker(message)) { details = details + ""[ "" + ctx.getString(R.string.sticker) + "" ]""; conversationViewHolder.mImageViewDetails.setVisibility(View.VISIBLE); String url = MessageUtils.getStickerFromMessage(message).getPhoto128(); mImageLoader.displayImage( url, conversationViewHolder.mImageViewDetails); } else { conversationViewHolder.mImageViewDetails.setVisibility(View.GONE); } if (!TextUtils.isEmpty(details)) { conversationViewHolder.textDetails.setText(details); conversationViewHolder.textDetails.setVisibility(View.VISIBLE); } else { conversationViewHolder.textDetails.setVisibility(View.GONE); }  conversationViewHolder.textDate.setText( DateUtils.getRelativeTimeSpanString(message.getDate() * 1000, System.currentTimeMillis(), 0L, DateUtils.FORMAT_ABBREV_ALL)); if (ConversationUtils.isConversationUnread(conversation)) { conversationViewHolder.textName.setTextColor(textColorPrimary); conversationViewHolder.textDetails.setTextColor(textColorPrimary); } else { conversationViewHolder.textName.setTextColor(textColorSecondary); conversationViewHolder.textDetails.setTextColor(textColorSecondary); } conversationViewHolder.itemView.setOnClickListener(this); conversationViewHolder.itemView.setTag(i); } "	0	0	0	0	0	1
"private boolean postObservation(Observation observation) throws AuthenticationException, CancelSyncException, SyncFailedException { if (observation.id != null) { // Update observation JSONArray response = request(API_HOST + ""/observations/"" + observation.id, ""put"", null, observationToJsonObject(observation, false), true, true, false);  if (response == null) { // Some sort of error if ((mLastStatusCode >= 400) && (mLastStatusCode < 500)) { // Observation doesn't exist anymore (deleted remotely, and due to network // issues we didn't get any notification of this) - so delete the observation // locally. getContentResolver().delete(Observation.CONTENT_URI, ""id = "" + observation.id, null); // Delete associated project-fields and photos int count1 = getContentResolver().delete(ObservationPhoto.CONTENT_URI, ""observation_id = "" + observation.id, null); int count2 = getContentResolver().delete(ProjectObservation.CONTENT_URI, ""observation_id = "" + observation.id, null); int count3 = getContentResolver().delete(ProjectFieldValue.CONTENT_URI, ""observation_id = "" + observation.id, null); return true; } }  boolean success = handleObservationResponse(observation, response); if (!success) { throw new SyncFailedException(); }  return true; }  // New observation  String inatNetwork = mApp.getInaturalistNetworkMember(); JSONObject observationParams = observationToJsonObject(observation, false);  boolean success = handleObservationResponse( observation, request(API_HOST + ""/observations"", ""post"", null, observationParams, true, true, false) );  if (!success) { throw new SyncFailedException(); }  return true; } "	1	0	1	1	0	0
@Override public Collection<String> subChoices() { ArrayList<String> usables = new ArrayList<String>(); for (Item i : getSelf().getInventory().keySet()) { if (i.getEffects().get(0).throwable()) { usables.add(i.getName()); } } return usables; } 	0	1	0	0	0	0
public void run() { checkDirectoryTree(sLocalToplevelFilePath); } 	0	0	0	0	0	1
"@Test public void testSimpleStatsNonNumeric() { String spec = ""gender = gender; a = jobcat: mean; b = jobcat:min;  d = jobcat: valid; e = jobcat:median; f = jobcat:stddev; g = jobcat:unique ; h = jobcat:mode""; Dataset a = Summarize.transform(data, spec); Assert.assertEquals(""gender|a|b|d|e|f|g|h|#count|#row -- "" + ""Female|Clerical|?|12|?|?|1|Clerical|12|3, 4, 8, 9, 10, 11, 14, 20, 21, 23, 24, 25 -- "" + ""Male|Clerical|?|13|?|?|2|Clerical|13|1, 2, 5, 6, 7, 12, 13, 15, 16, 17, 18, …"", CannedData.dump(a));  } "	0	0	0	0	0	1
"@Test public void testPercentSimple() { Dataset a = Summarize.transform(data, ""gender=gender; #percent=#count:percent""); Assert.assertEquals(""gender|#percent|#count|#row -- "" + ""Female|48%|12|3, 4, 8, 9, 10, 11, 14, 20, 21, 23, 24, 25 -- "" + ""Male|52%|13|1, 2, 5, 6, 7, 12, 13, 15, 16, 17, 18, …"", CannedData.dump(a)); } "	0	0	0	0	0	1
"private void getModelList(String directory, ArrayList<String> fileList) { final String environmentPath = Environment.getExternalStorageDirectory().getPath(); String extensions = "".fbx .3des .dae .obj .ma .x3d""; File dir = new File(environmentPath + ""/"" + directory);  if (dir.exists() && dir.isDirectory()) { File list[] = dir.listFiles(); for (File f : list) { String fileName = f.getName(); String ext = ""."" + FileNameUtils.getExtension(fileName.toLowerCase()); if (f.isDirectory()) { getModelList(directory + ""/"" + fileName, fileList); } else if (extensions.contains(ext)) { fileList.add(directory + ""/"" + fileName); } } } } "	1	1	1	0	1	0
"@Before public void setUp() { cache = new AtomCache();  // Delete files which were cached in previous tests String[] uncacheIDs = new String[] { ""1cmw"", ""1hhb"",""4hhb"" };  List<LocalPDBDirectory> readers = new ArrayList<LocalPDBDirectory>(); readers.add(new MMCIFFileReader(cache.getPath()) ); readers.add(new PDBFileReader(cache.getCachePath()) ); for(LocalPDBDirectory reader : readers) { reader.setFetchBehavior(cache.getFetchBehavior()); reader.setObsoleteBehavior(cache.getObsoleteBehavior());  for(String pdbId : uncacheIDs) { reader.deleteStructure(pdbId); } } } "	1	1	1	1	0	0
public static boolean has (Inventory inventory, ItemStack itemStack, ItemStackComparer comparer, int qty) { return count(inventory, itemStack, comparer, qty) == qty; } 	1	0	1	1	0	0
@Override public void addMyPetPlayer(final MyPetPlayer player, final RepositoryCallback<Boolean> callback) { if (players.containsKey(player.getInternalUUID())) { players.put(player.getInternalUUID(), player); if (SAVE_ON_PLAYER_ADD) { saveData(true); } if (callback != null) { callback.setValue(true); callback.run(); } return; } if (callback != null) { callback.setValue(false); callback.run(); } } 	1	0	1	1	0	0
"@Path(""/courses/{ID:[0-9]*}"") @PUT @RESTPermit (CoursePermissions.UPDATE_COURSE) public Response updateCourse(@PathParam(""ID"") Long id, fi.pyramus.rest.model.Course courseEntity) { Course course = courseController.findCourseById(id); if (course == null) { return Response.status(Status.NOT_FOUND).build(); }  if (course.getArchived()) { return Response.status(Status.NOT_FOUND).build(); }  if (!course.getId().equals(courseEntity.getId())) { return Response.status(Status.BAD_REQUEST).entity(""Cannot change entity id in update request"").build(); }  String name = courseEntity.getName(); String nameExtension = courseEntity.getNameExtension(); CourseState state = courseController.findCourseStateById(courseEntity.getStateId()); CourseType type = courseController.findCourseTypeById(courseEntity.getTypeId());  Subject subject = null; if (courseEntity.getSubjectId() != null) { subject = commonController.findSubjectById(courseEntity.getSubjectId()); if (subject == null) { return Response.status(Status.NOT_FOUND).entity(""specified subject does not exist"").build(); } }  Integer courseNumber = courseEntity.getCourseNumber(); DateTime beginDate = courseEntity.getBeginDate(); DateTime endDate = courseEntity.getEndDate(); Double courseLength = courseEntity.getLength(); EducationalTimeUnit courseLengthTimeUnit = null;  if (courseLength != null) { if (courseEntity.getLengthUnitId() == null) { return Response.status(Status.BAD_REQUEST).entity(""length unit is missing"").build(); }  courseLengthTimeUnit = commonController.findEducationalTimeUnitById(courseEntity.getLengthUnitId()); if (courseLengthTimeUnit == null) { return Response.status(Status.BAD_REQUEST).entity(""length unit is invalid"").build(); } }  Double distanceTeachingDays = courseEntity.getDistanceTeachingDays(); Double localTeachingDays = courseEntity.getLocalTeachingDays(); Double teachingHours = courseEntity.getTeachingHours(); Double planningHours = courseEntity.getPlanningHours(); Double assessingHours = courseEntity.getAssessingHours(); String description = courseEntity.getDescription(); Long maxParticipantCount = courseEntity.getMaxParticipantCount(); Date enrolmentTimeEnd = toDate(courseEntity.getEnrolmentTimeEnd()); User loggedUser = sessionController.getUser();  Course updatedCourse = courseController.updateCourse(course, name, nameExtension, state, type, subject, courseNumber, toDate(beginDate), toDate(endDate), courseLength, courseLengthTimeUnit, distanceTeachingDays, localTeachingDays, teachingHours, planningHours, assessingHours, description, maxParticipantCount, enrolmentTimeEnd, loggedUser);  courseController.updateCourseTags(updatedCourse, courseEntity.getTags() == null ? new ArrayList<String>() : courseEntity.getTags()); courseController.updateCourseVariables(updatedCourse, courseEntity.getVariables() == null ? new HashMap<String, String>() : courseEntity.getVariables());  return Response.ok().entity(objectFactory.createModel(updatedCourse)).build(); } "	0	0	0	0	0	1
protected ColInfo[] getColumns() { return this.columns; } 	1	0	1	0	0	0
"public void handle(ActionResult event) { String name = event.getParameter(""name"", ValueType.STRING).getString(); String bip = "" ""; int port = 0; String lba = "" ""; String commPort = "" ""; int baud = 0; int station = 0; int ferc = 1; boolean isfd = false; //			String bbmdip = "" ""; //			int bbmdport = 0; String bbmdips = "" ""; if (isIP) { bip = event.getParameter(""broadcast ip"", ValueType.STRING).getString(); port = event.getParameter(""port"", ValueType.NUMBER).getNumber().intValue(); lba = event.getParameter(""local bind address"", ValueType.STRING).getString();  isfd = event.getParameter(""register as foreign device in bbmd"", ValueType.BOOL).getBool(); bbmdips = event.getParameter(""bbmd ips"", ValueType.STRING).getString(); //				bbmdip = event.getParameter(""bbmd ip"", new Value("" "")).getString(); //				bbmdport = event.getParameter(""bbmd port"", ValueType.NUMBER).getNumber().intValue();  } else { commPort = event.getParameter(""comm port id"", ValueType.STRING).getString(); baud = event.getParameter(""baud rate"", ValueType.NUMBER).getNumber().intValue(); station = event.getParameter(""this station id"", ValueType.NUMBER).getNumber().intValue(); ferc = event.getParameter(""frame error retry count"", ValueType.NUMBER).getNumber().intValue(); } int lnn = event.getParameter(""local network number"", ValueType.NUMBER).getNumber().intValue(); boolean strict = event.getParameter(""strict device comparisons"", ValueType.BOOL).getBool(); int timeout = event.getParameter(""Timeout"", ValueType.NUMBER).getNumber().intValue(); int segtimeout = event.getParameter(""segment timeout"", ValueType.NUMBER).getNumber().intValue(); int segwin = event.getParameter(""segment window"", ValueType.NUMBER).getNumber().intValue(); int retries = event.getParameter(""retries"", ValueType.NUMBER).getNumber().intValue(); int locdevId = event.getParameter(""local device id"", ValueType.NUMBER).getNumber().intValue(); String locdevName = event.getParameter(""local device name"", ValueType.STRING).getString(); String locdevVend = event.getParameter(""local device vendor"", ValueType.STRING).getString(); long interval = (long) (1000 * event.getParameter(""default polling interval"", ValueType.NUMBER).getNumber().doubleValue());  Node child = node.createChild(name).build(); child.setAttribute(""isIP"", new Value(isIP)); child.setAttribute(""broadcast ip"", new Value(bip)); child.setAttribute(""port"", new Value(port)); child.setAttribute(""local bind address"", new Value(lba)); child.setAttribute(""register as foreign device in bbmd"", new Value(isfd)); child.setAttribute(""bbmd ips"", new Value(bbmdips)); //			child.setAttribute(""bbmd ip"", new Value(bbmdip)); //			child.setAttribute(""bbmd port"", new Value(bbmdport)); child.setAttribute(""comm port id"", new Value(commPort)); child.setAttribute(""baud rate"", new Value(baud)); child.setAttribute(""this station id"", new Value(station)); child.setAttribute(""frame error retry count"", new Value(ferc)); child.setAttribute(""local network number"", new Value(lnn)); child.setAttribute(""strict device comparisons"", new Value(strict)); child.setAttribute(""Timeout"", new Value(timeout)); child.setAttribute(""segment timeout"", new Value(segtimeout)); child.setAttribute(""segment window"", new Value(segwin)); child.setAttribute(""retries"", new Value(retries)); child.setAttribute(""local device id"", new Value(locdevId)); child.setAttribute(""local device name"", new Value(locdevName)); child.setAttribute(""local device vendor"", new Value(locdevVend)); child.setAttribute(""default polling interval"", new Value(interval));  BacnetConn conn = new BacnetConn(getMe(), child); conn.init(); } "	0	0	0	0	0	1
"private JLabel getLblReflectionMap() { if (lblReflectionMap == null) { lblReflectionMap = new JLabel(); lblReflectionMap.setText(""Reflection map""); lblReflectionMap.setSize(new Dimension(94, 22)); lblReflectionMap.setPreferredSize(new Dimension(94, 22)); lblReflectionMap.setLocation(new Point(4, 4)); lblReflectionMap.setFont(new Font(""Dialog"", Font.BOLD, 10)); lblReflectionMap.setBounds(391, 104, 94, 22); } return lblReflectionMap; } "	0	0	0	1	0	0
@Override public void onBlockClicked(World world, int x, int y, int z, EntityPlayer entityPlayer) { super.onBlockClicked(world, x, y, z, entityPlayer); if (!world.isRemote) { TileBarrel tileBarrel = (TileBarrel) world.getTileEntity(x, y, z);  if (tileBarrel != null && !tileBarrel.hasLid && entityPlayer.isSneaking()) { if (tileBarrel.itemContents != null) { for (int i = 0; i < tileBarrel.itemContents.length; i++) { ItemStack stack = tileBarrel.itemContents[i]; if (stack != null) { EntityItem entityItem = new EntityItem(world, x + 0.5, y + 1.5, z + 0.5, stack); entityItem.delayBeforeCanPickup = 0; world.spawnEntityInWorld(entityItem);  tileBarrel.itemContents[i] = null; tileBarrel.markForUpdate();  break; } } }  //                ItemStack held = entityPlayer.getHeldItem();  //                if (held != null) { //                    if (tileBarrel.itemContents != null && tileBarrel.itemContents.length > 0) { //                        for (int i=tileBarrel.itemContents.length - 1; i>=0; i--) { //                            ItemStack itemStack = tileBarrel.itemContents[i]; //                            if (itemStack != null) { //                                if (held.isItemEqual(itemStack) && (held.stackSize + itemStack.stackSize) <= held.getMaxStackSize()){ //                                    held.stackSize += itemStack.stackSize; //                                    ((EntityPlayerMP)entityPlayer).updateHeldItem(); // //                                    tileBarrel.itemContents[i] = null; //                                    tileBarrel.markForUpdate(); // //                                    break; //                                } //                            } //                        } //                    } //                } else { //                    if (tileBarrel.itemContents != null && tileBarrel.itemContents.length > 0) { //                        for (int i=tileBarrel.itemContents.length - 1; i>=0; i--) { //                            ItemStack itemStack = tileBarrel.itemContents[i]; //                            if (itemStack != null) { //                                entityPlayer.setCurrentItemOrArmor(0, itemStack.copy()); //                                ((EntityPlayerMP)entityPlayer).updateHeldItem(); // //                                tileBarrel.itemContents[i] = null; //                                tileBarrel.markForUpdate(); // //                                break; //                            } //                        } //                    } //                } } } } 	1	1	1	1	0	0
"@Override public void onSubmit(AjaxRequestTarget target, Form<?> form) { String txt = markdownEditor.getText(); if (change == null) { // new comment Change newComment = new Change(user.username); newComment.comment(txt); if (!ticket.isWatching(user.username)) { newComment.watch(user.username); } RepositoryModel repository = app().repositories().getRepositoryModel(ticket.repository); TicketModel updatedTicket = app().tickets().updateTicket(repository, ticket.number, newComment); if (updatedTicket != null) { app().tickets().createNotifier().sendMailing(updatedTicket); setResponsePage(pageClass, WicketUtils.newObjectParameter(updatedTicket.repository, """" + ticket.number)); } else { error(""Failed to add comment!""); } } else { // TODO update comment } } "	0	1	0	0	0	0
public static float viewAspectRatio(Camera camera) { /* * Note: camera.getHeight() returns the height of the display, * not the height of the viewport!  The display and the viewport * often have the same aspect ratio, but not always. */ float bottom = camera.getViewPortBottom(); assert bottom >= 0f : bottom; assert bottom <= 1f : bottom;  float top = camera.getViewPortTop(); assert top >= 0f : top; assert top <= 1f : top;  float yFraction = top - bottom; assert yFraction > 0f : yFraction;  float height = camera.getHeight() * yFraction; assert height > 0f : height;  float left = camera.getViewPortLeft(); assert left >= 0f : left; assert left <= 1f : left;  float right = camera.getViewPortTop(); assert right >= 0f : right; assert right <= 1f : right;  float xFraction = right - left; assert xFraction > 0f : xFraction;  float width = camera.getWidth() * xFraction; assert width > 0f : width;  float ratio = width / height;  assert ratio > 0f : ratio; return ratio; } 	0	0	0	1	0	0
public int getRESTPort() { if (mFileConfig != null) { return mFileConfig.getPort(); } return TEST_REST_PORT; } 	1	1	1	1	0	0
default String getSubArgumentsListAsString() { List<PerlSubArgument> subArguments = getSubArgumentsList();  if (isMethod() && !subArguments.isEmpty()) { subArguments = subArguments.size() > 1 ? subArguments.subList(1, subArguments.size() - 1) : Collections.emptyList(); }  return PerlSubUtil.getArgumentsListAsString(subArguments); } 	1	1	1	1	0	0
"@Override public void resetAdmin(String loggedInUserName, String username) throws Exception { User loggedInUser = getUser(loggedInUserName); User user = getUser(username); if (loggedInUser != null && !loggedInUser.isAdmin() && !loggedInUserName.equals(user.getCreator())) throw new Exception(""No permission to modify user""); user.setAdmin(true); user.save(); userCache.put(user.getUsername(), user); } "	1	0	1	1	0	0
"@Test public void testComputeSpecifiedArgPart1Arg() { System.out.println(""computeSpecifiedArgPart""); String[] keys = new String[] {""a""}; List<String> jsonArgs = Arrays.asList(""5""); List<String> paramNames = Arrays.asList(""\""a\""""); doReturn(""5"").when(instance).processArg(any(String[].class), anyString()); String result = instance.computeSpecifiedArgPart(keys, jsonArgs, paramNames); assertThat(result).isEqualTo(""[5]""); } "	1	0	1	1	0	0
public File getWorkDir() { return mojo.basedir; } 	0	0	0	0	0	1
"public List<Table> getTables() { Cursor c = null; List<Table> tables = new ArrayList<>(); try { final SQLiteDatabase db = mDb.getReadableDatabase(); c = db.rawQuery(String.format(""SELECT * FROM %s"", TABLES_TABLE), null); while (c.moveToNext()) { String name = c.getString(c.getColumnIndex(KEY_TABLE)); String token = c.getString(c.getColumnIndex(KEY_TOKEN)); tables.add(new Table(name, token)); } } catch (final SQLiteException e) { Logger.log(TAG, ""Failed to get all tables"" + e.getMessage(), Logger.SDK_DEBUG); } finally { if (null != c) c.close(); mDb.close(); } return tables; } "	0	1	0	0	0	0
"@Override public boolean unlock(UnlockContext context) { Session session = null; try { session = BasicDaoFactory.getSystemSession(); boolean restorePreviousVersion = context.isForce(); String contentLanguage = I18NHelper.checkLanguage(context.getLang()); SimpleDocument document = repository.findDocumentById(session, new SimpleDocumentPK( context.getAttachmentId()), contentLanguage); contentLanguage = document.getLanguage(); boolean updateOfficeContentFromWebDav = document.isOpenOfficeCompatible() && !context.isUpload() && context.isWebdav(); if (updateOfficeContentFromWebDav) { // Verifying if the content language handled in WEBDAV repository is the same as the // content language took from the context. if (!contentLanguage.equals(StringUtil .defaultStringIfNotDefined(document.getWebdavContentEditionLanguage(), contentLanguage))) { // The language handled into WEVDAV is different, SimpleDocument must be reloaded with // the right content language. contentLanguage = document.getWebdavContentEditionLanguage(); document = repository .findDocumentById(session, new SimpleDocumentPK(context.getAttachmentId()), contentLanguage); } } if (document.isOpenOfficeCompatible() && !context.isForce() && webdavRepository.isNodeLocked( session, document)) { return false; } if (!context.isForce() && document.isReadOnly() && !document.getEditedBy().equals(context. getUserId())) { return false; }  boolean invokeCallback = false; if (context.isWebdav() || context.isUpload()) { String workerId = document.getEditedBy(); document.setUpdated(new Date()); document.setUpdatedBy(workerId);  invokeCallback = true; } document.setPublicDocument(context.isPublicVersion()); document.setComment(context.getComment()); if (updateOfficeContentFromWebDav) { document.setSize(document.getWebdavContentEditionSize()); } SimpleDocument finalDocument = repository.unlock(session, document, restorePreviousVersion); if (updateOfficeContentFromWebDav) { webdavRepository.updateAttachmentBinaryContent(session, finalDocument); webdavRepository.deleteAttachmentNode(session, finalDocument); repository.duplicateContent(document, finalDocument); } else if (finalDocument.isOpenOfficeCompatible() && (context.isUpload() || !context. isWebdav())) { webdavRepository.deleteAttachmentNode(session, finalDocument); } else { File file = new File(finalDocument.getAttachmentPath()); if (!file.exists() && !context.isForce()) { repository.duplicateContent(document, finalDocument); } } session.save(); if (document.isPublic()) { String userId = context.getUserId(); if (StringUtil.isDefined(userId) && invokeCallback) { CallBackManager callBackManager = CallBackManager.get(); callBackManager.invoke(CallBackManager.ACTION_ATTACHMENT_UPDATE, Integer.parseInt(userId), finalDocument.getInstanceId(), finalDocument.getForeignId()); } } } catch (IOException e) { throw new AttachmentException(""AttachmentService.unlock()"", SilverpeasRuntimeException.ERROR, ""attachment.CHECKIN_FAILED"", e); } catch (RepositoryException e) { throw new AttachmentException(""AttachmentService.unlock()"", SilverpeasRuntimeException.ERROR, ""attachment.CHECKIN_FAILED"", e); } finally { BasicDaoFactory.logout(session); } return true; } "	0	0	0	0	0	1
"@Override protected Map<String, Class<? extends NodeActionListener>> initActions() { // register the ""manage subscriptions"" action addAction(""Manage subscriptions"", new ManageSubscriptionsAction()); return null; } "	0	0	0	1	0	0
"protected void logoutAllSessions(boolean forceDisconnect) { log.info(""Logging out all sessions""); if (sessions == null) { log.error(""Attempt to logout all sessions before initialization is complete.""); return; } for (Session session : sessions.values()) { try { session.logout(); } catch (Throwable e) { logError(session.getSessionID(), null, ""Error during logout"", e); } }  if (isLoggedOn()) { if (forceDisconnect) { for (Session session : sessions.values()) { try { if (session.isLoggedOn()) { session.disconnect(""Forcibly disconnecting session"", false); } } catch (Throwable e) { logError(session.getSessionID(), null, ""Error during disconnect"", e); } } } else { waitForLogout(); } } } "	0	0	0	0	0	1
public String mAA2(int i, String s, boolean b){ return i+s+b+this.mAA1(i, s,b); }; 	1	0	1	0	0	0
"private void init(View v){ //((AppCompatActivity) getActivity()).getSupportActionBar().setTitle(""Settings"");  c = Calendar.getInstance(); langArr = getActivity().getResources().getStringArray(R.array.spinnerLanguage); currArr = getActivity().getResources().getStringArray(R.array.spinnerCurrency); dateForArr = getActivity().getResources().getStringArray(R.array.spinnerDateFor);  appNotySwitch = (Switch) v.findViewById(R.id.appNotySwitch); appNotySwitch.setOnCheckedChangeListener(this); localMode = (Switch) v.findViewById(R.id.localModeSwitch); localMode.setOnCheckedChangeListener(this); langRow = (TableRow) v.findViewById(R.id.selectLangRow); langRow.setOnClickListener(this); backupRemText = (TextView) v.findViewById(R.id.backupRemText); langText = (TextView) v.findViewById(R.id.statusLang); dateForRow = (TableRow) v.findViewById(R.id.selectDateRow); dateForRow.setOnClickListener(this); dateForText = (TextView) v.findViewById(R.id.statusDateFor); currRow = (TableRow) v.findViewById(R.id.selectCurrRow); currRow.setOnClickListener(this); currText = (TextView) v.findViewById(R.id.statusCurr); statusIcon = (Switch) v.findViewById(R.id.statusIconSwitch); statusIcon.setOnCheckedChangeListener(this); dailyRemRow = (TableRow) v.findViewById(R.id.remTimeRow); dailyRemRow.setOnClickListener(this); backupRemRow = (TableRow) v.findViewById(R.id.backupRemRow); backupRemRow.setOnClickListener(this); dailyRemText = (TextView) v.findViewById(R.id.startRem); autoSync = (Switch) v.findViewById(R.id.autoSyncSwitch); autoSync.setOnCheckedChangeListener(this); autoSync.setOnCheckedChangeListener(this); backupLocRow = (TableRow) v.findViewById(R.id.backupLocRow); backupLocRow.setOnClickListener(this); backupLocText = (TextView) v.findViewById(R.id.statusBackUpLoc); appPassRow = (TableRow) v.findViewById(R.id.appPasswordRow); appPassRow.setOnClickListener(this); appPwText = (TextView) v.findViewById(R.id.statusAppPw); signOutBtn = (Button) v.findViewById(R.id.signOutBtn); signOutBtn.setOnClickListener(this); feedBackRow = (TableRow) v.findViewById(R.id.feedbackRow); feedBackRow.setOnClickListener(this); rateRow = (TableRow) v.findViewById(R.id.rateRow); rateRow.setOnClickListener(this);  langBuilder = new AlertDialog.Builder(getContext()); langBuilder.setTitle(""Language""); langBuilder.setSingleChoiceItems(R.array.spinnerLanguage, 1, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { preferedLang = langArr[i]; storePWSharedPref(); langText.setText(langArr[i]); dialogInterface.dismiss(); } }); currBuilder = new AlertDialog.Builder(getContext()); currBuilder.setTitle(""Currency""); currBuilder.setSingleChoiceItems(R.array.spinnerCurrency, 0, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { preferedCurr = currArr[i]; storePWSharedPref(); currText.setText(currArr[i]); dialogInterface.dismiss(); } }); dateForBuilder = new AlertDialog.Builder(getContext()); dateForBuilder.setTitle(""Date format""); dateForBuilder.setSingleChoiceItems(R.array.spinnerDateFor, 0, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialogInterface, int i) { preferedDateFor = dateForArr[i]; storePWSharedPref(); dateForText.setText(dateForArr[i]); dialogInterface.dismiss(); } });  retrievePWSharedPref();  } "	0	0	0	0	0	1
public Song update(Song updatableSong) { Long id = updatableSong.getId(); Song originalSongData = songsRepository.findById(id); if (updatableSong.getSongTitle() != null && updatableSong.getSongTitle().getId() == 0) { Title songTitle = new Title(updatableSong.getSongTitle()); songTitle.setCategory(categoryRepository.getSongTitleCategory()); titleRepository.create(updatableSong.getSongTitle()); updatableSong.setSongTitle(songTitle); } if (updatableSong.getTitle() != null && updatableSong.getTitle().getId() == 0) { Title umbrellaTitle = new Title(updatableSong.getTitle()); umbrellaTitle.setCategory(categoryRepository.getUmbrellaTitleCategory()); titleRepository.create(umbrellaTitle); updatableSong.setTitle(umbrellaTitle); } if (updatableSong.getSongText() != null) { songTextDAO.create(updatableSong.getSongText()); } originalSongData = invokeAllSetters(originalSongData, updatableSong); return songsRepository.updateSong(originalSongData); } 	1	1	1	1	0	0
public Request getRequest() { return request; } 	0	0	0	0	0	1
"@Override public void changeSetting(OnlinePAFPlayer pPlayer, String[] pArgs) { int worthNow = pPlayer.changeSettingsWorth(4); if (worthNow == 0) { pPlayer.sendMessage(new TextComponent(Main.getInstance().getFriendsPrefix() + Main.getInstance() .getMessagesYml().getString(""Friends.Command.Settings.NowYourFriendsCanJump""))); } else { pPlayer.sendMessage(new TextComponent(Main.getInstance().getFriendsPrefix() + Main.getInstance() .getMessagesYml().getString(""Friends.Command.Settings.NowYourFriendsCanNotJump""))); } } "	1	1	1	1	0	0
public boolean isActualDefined() { return (this.actual != UNDEFINED); } 	0	0	0	0	0	1
@Override protected void protectedRun() { //noinspection Convert2MethodRef just(bluetoothGattAtomicReference.get()) .filter(bluetoothGatt -> bluetoothGatt != null) .flatMap(bluetoothGatt -> isDisconnected(bluetoothGatt) ? just(bluetoothGatt) : disconnect(bluetoothGatt)) .doOnTerminate(() -> releaseRadio()) .observeOn(AndroidSchedulers.mainThread()) .subscribe( bluetoothGatt -> bluetoothGatt.close(), throwable -> onError(throwable), () -> onCompleted() ); } 	0	0	0	0	0	1
"private void addEditableFlowSegment(final Element flowSegment, final FlowSegmentInfo selectedSegment, final int insertIndex) { final Button deleteSegmentBtn = new Button(flowDetailsPane, SWT.PUSH); deleteSegmentBtn.setText(""Delete""); deleteSegmentBtn.addSelectionListener(new SelectionAdapter() { @Override public void widgetSelected(SelectionEvent e) { // Remove the segment EcoreUtil.remove(flowSegment);  // Refresh details updateFlowDetails(currentFlow); } });  final ComboViewer cmb = new ComboViewer(flowDetailsPane, SWT.DROP_DOWN | SWT.READ_ONLY); final GridData cmbGridData = new GridData(GridData.FILL_HORIZONTAL); cmbGridData.grabExcessHorizontalSpace = true; cmbGridData.minimumWidth = 150; cmb.getCombo().setLayoutData(cmbGridData); cmb.addSelectionChangedListener(new ISelectionChangedListener() { @Override public void selectionChanged(final SelectionChangedEvent event) { final StructuredSelection selection = (StructuredSelection)event.getSelection(); final FlowSegmentInfo newSegmentInfo = (FlowSegmentInfo)selection.getFirstElement();  if(flowSegment instanceof EndToEndFlowSegment) { final EndToEndFlowSegment fs = (EndToEndFlowSegment)flowSegment; if(newSegmentInfo == null) { fs.setContext(null); fs.setFlowElement(null); } else { fs.setContext(newSegmentInfo.context); fs.setFlowElement((EndToEndFlowElement)newSegmentInfo.flowElement); } } else if(flowSegment instanceof FlowSegment) { final FlowSegment fs = (FlowSegment)flowSegment; if(newSegmentInfo == null) { fs.setContext(null); fs.setFlowElement(null); } else { fs.setContext(newSegmentInfo.context); fs.setFlowElement((FlowElement)newSegmentInfo.flowElement); } }  refreshWidgetEnabledStates(); } }); cmb.setContentProvider(new ArrayContentProvider()); cmb.setLabelProvider(flowSegmentInfoLabelProvider); cmb.setInput(potentialFlowSegments); cmb.setSelection(new StructuredSelection(selectedSegment));  if(flowSegment instanceof EndToEndFlowSegment) { cmb.setFilters(new ViewerFilter[]{endToEndFlowElementFilter}); } else if(flowSegment instanceof FlowSegment) { cmb.setFilters(new ViewerFilter[]{flowElementFilter}); }  addInsertButton(insertIndex); } "	0	0	0	0	0	1
"public Result exportSerp(Context context, @PathParam(""searchId"") Integer searchId, @Param(""date"") String pdate ){ GoogleSerp serp=null; LocalDate date=null; try {date = LocalDate.parse(pdate);}catch(Exception ex){} if(date != null){ List<Run> runs = baseDB.run.findByDay(Module.GOOGLE, date); if(!runs.isEmpty()){ GoogleSearch search = getSearch(context, searchId); if(search != null){ serp = googleDB.serp.get(runs.get(0).getId(), search.getId()); } } }  if(serp == null){ return Results.ok().text().renderRaw(""SERP not found""); }  boolean exportRank = context.getParameter(""rank"") != null; boolean exportD1 = context.getParameter(""d1"") != null; boolean exportD7 = context.getParameter(""d7"") != null; boolean exportD30 = context.getParameter(""d30"") != null; boolean exportD90 = context.getParameter(""d90"") != null;  int position = 0; StringBuilder builder = new StringBuilder(); for (GoogleSerpEntry entry : serp.getEntries()) { ++position; if(exportRank){ builder.append(position).append("",""); } builder.append(entry.getUrl()).append("",""); if(exportD1){ Short rank = entry.getMap().getOrDefault((short)1, (short)GoogleRank.UNRANKED); builder.append(rank != GoogleRank.UNRANKED ? rank.intValue() : """").append("",""); } if(exportD7){ Short rank = entry.getMap().getOrDefault((short)7, (short)GoogleRank.UNRANKED); builder.append(rank != GoogleRank.UNRANKED ? rank.intValue() : """").append("",""); } if(exportD30){ Short rank = entry.getMap().getOrDefault((short)30, (short)GoogleRank.UNRANKED); builder.append(rank != GoogleRank.UNRANKED ? rank.intValue() : """").append("",""); } if(exportD90){ Short rank = entry.getMap().getOrDefault((short)90, (short)GoogleRank.UNRANKED); builder.append(rank != GoogleRank.UNRANKED ? rank.intValue() : """").append("",""); } if(builder.length() > 0){ builder.setCharAt(builder.length()-1, '\n'); } }  return Results.text() .addHeader(""Content-Disposition"", ""attachment; filename=\"""" + serp.getRunDay().toLocalDate() + "".csv\"""") .renderRaw(builder.toString()); } "	0	0	0	0	0	1
public synchronized ArrayList<Integer> getPlayerId() { return this.playerId; } 	0	0	0	0	0	1
public synchronized ArrayList<SudokuServerThread> getThreads() { return this.connections; } 	0	0	0	0	0	1
"@Override public void onAppStarting(Object... args) {  StandardContext sc = (StandardContext) args[0]; InterceptSupport iSupport = InterceptSupport.instance(); InterceptContext context = iSupport.createInterceptContext(Event.WEBCONTAINER_INIT); /** * NOTE: spring boot rewrite the tomcat webappclassloader, makes the addURL for nothing, then we can't do * anything on this we may use its webappclassloader's parent as the classloader */ context.put(InterceptConstants.WEBAPPLOADER, sc.getLoader().getClassLoader().getParent()); context.put(InterceptConstants.WEBWORKDIR, sc.getWorkPath());  String contextPath = (String) ReflectHelper.getField(StandardContext.class, sc, ""encodedPath"", true); context.put(InterceptConstants.CONTEXTPATH, (contextPath.length() > 0) ? contextPath : ""/"");  context.put(InterceptConstants.APPNAME, ReflectHelper.getField(StandardContext.class, sc, ""displayName"", true));  ServletContext sContext = (ServletContext) ReflectHelper.getField(StandardContext.class, sc, ""context"", true);  context.put(InterceptConstants.SERVLET_CONTEXT, sContext);  String basePath = sContext.getRealPath("""");  /* * NOTE: springboot couldn't get the basePath through method ""getRealPath"", temporary process */ if (basePath == null) { basePath = """"; } else if (basePath.lastIndexOf(""/"") == (basePath.length() - 1) || basePath.lastIndexOf(""\\"") == (basePath.length() - 1)) { basePath = basePath.substring(0, basePath.length() - 1); }  context.put(InterceptConstants.BASEPATH, basePath);  iSupport.doIntercept(context); } "	1	1	1	0	1	0
"public void call(Identifiable who, HttpMethod how, Request what) { Log.d(who.getUUID(), how + "" "" + uri + "" BODY: "" + what);  RestTemplate rest = new RestTemplate();  HttpEntity<Request> entity = new HttpEntity<Request>(what, headers(who));  ResponseEntity<Response> response = null; try { response = rest.exchange(uri, how, entity, responseType); this.response = response.getBody();  try { this.responseUUID = UUID.fromString(response.getHeaders().getFirst(""UUID"")); } catch (Exception e) { System.out.println(""no uuid: "" + uri); }  return; } catch (Exception e) { Log.d(who.getUUID(), e + "" - -- - "" + who + "" - -- - "" + what + "" - -- - "" + response); }  this.response = null; this.responseUUID = null; } "	0	0	0	1	0	0
"public SolrDocumentList query(String keywords, int tenantId, Map<String, String> fields) throws SolrException{ try { SolrQuery query = new SolrQuery(keywords); query.setRows(Integer.MAX_VALUE); //Solr does not allow to search with special characters , //Therefore this fix allow to contain ""-"" in super tenant id. if(tenantId== MultitenantConstants.SUPER_TENANT_ID){ query.addFilterQuery(IndexingConstants.FIELD_TENANT_ID + "":"" + ""\\"" + tenantId); }else { query.addFilterQuery(IndexingConstants.FIELD_TENANT_ID + "":"" + tenantId); } //This is for fixing  REGISTRY-1695, This is temporary solution until //the default security polices also stored in Governance registry. if (fields.size() > 0 && fields.get(IndexingConstants.FIELD_MEDIA_TYPE).equals( RegistryConstants.POLICY_MEDIA_TYPE)) { query.addFilterQuery(IndexingConstants.FIELD_ID + "":"" + RegistryConstants.GOVERNANCE_REGISTRY_BASE_PATH + ""*""); } if (fields.size() > 0) { for (Map.Entry<String, String> e : fields.entrySet()) { //This is the fix REGISTRY-1970 before all the special characters where escaped sing // 'SolrQueryParser.escape()' but because of that wildcard functionallity did not work poperly // hence only ecaping ':' and ' '; query.addFilterQuery(e.getKey() + ""_s:"" + e.getValue().replaceAll("":"",""\\\\\\:"").replaceAll("" "", ""\\\\\\ "")); } } QueryResponse queryresponse; MessageContext messageContext = MessageContext.getCurrentMessageContext(); if ((messageContext != null && PaginationUtils .isPaginationHeadersExist(messageContext)) || PaginationContext.getInstance() != null) { try { PaginationContext paginationContext; if (messageContext != null) { paginationContext = PaginationUtils.initPaginationContext(messageContext); } else { paginationContext = PaginationContext.getInstance(); } // TODO: Proper mechanism once authroizations are fixed - senaka //                    query.setStart(paginationContext.getStart()); //                    query.setRows(paginationContext.getCount()); String sortBy = paginationContext.getSortBy(); if (sortBy.length() > 0) { query.setSort(sortBy + ""_s"", paginationContext.getSortOrder().equals(""ASC"") ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc); } queryresponse = server.query(query); if(log.isDebugEnabled()) { log.debug(""Solr index queried query: "" + query); } // TODO: Proper mechanism once authroizations are fixed - senaka //                    PaginationUtils.setRowCount(messageContext, //                            Long.toString(queryresponse.getResults().getNumFound())); } finally { if(messageContext!=null){ PaginationContext.destroy(); } } } else { queryresponse = server.query(query); if(log.isDebugEnabled()) { log.debug(""Solr index queried query: "" + query); } }  return queryresponse.getResults(); } catch (SolrServerException e) { //throw unchecked exception: SolrException, this will throw when there is an invalid search query or error in connection. throw new SolrException(ErrorCode.SERVER_ERROR, ""Failure at query "" + keywords, e); } } "	0	0	0	0	0	1
protected void setText(List<String> text){ docType.setText(); } 	1	0	1	1	0	0
"@Test public void getQuery1() throws Exception { mvc.perform(MockMvcRequestBuilders.get(""/query1/"").accept(MediaType.APPLICATION_JSON)) .andExpect(status().isOk()) .andExpect(content().string(equalTo(""Query 1 result""))); } "	0	0	0	0	0	1
"@Override public void mouseReleased(MouseEvent e) { for (int i = 0; i < dotUI.size(); i++) { if (dotUI.get(i).contains(e.getX(), e.getY())) { System.out.println(""Debug info - Mouse release detected on dot "" + i); } } GUIGrid.this.lijnUI.clear(); controller.getVeld().clearConnectedDots(); GUIGrid.this.repaint(); System.out.println(""Mouse release detected""); } "	1	1	1	0	1	0
"private boolean checkVersionName(JSONObject appJson) throws JSONException{ if (appJson.isNull(Constants.JSON_MIN_VERSION_NAME)) { return false; } getSirenHelper().setLastVerificationDate(mApplicationContext);  String minVersionName = appJson.getString(Constants.JSON_MIN_VERSION_NAME); String currentVersionName = getSirenHelper().getVersionName(mApplicationContext);  if ((getSirenHelper().isEmpty(minVersionName) || getSirenHelper().isEmpty(currentVersionName) || getSirenHelper().isVersionSkippedByUser(mApplicationContext, minVersionName))) { return false; } SirenAlertType alertType = null; String[] minVersionNumbers = minVersionName.split(""\\.""); String[] currentVersionNumbers = currentVersionName.split(""\\.""); //noinspection ConstantConditions if (minVersionNumbers != null && currentVersionNumbers != null && minVersionNumbers.length == currentVersionNumbers.length) { if (minVersionNumbers.length > 0 && getSirenHelper().isGreater(minVersionNumbers[0], currentVersionNumbers[0])) { alertType = majorUpdateAlertType; } else if (minVersionNumbers.length > 1 && getSirenHelper().isGreater(minVersionNumbers[1], currentVersionNumbers[1])) { alertType = minorUpdateAlertType; } else if (minVersionNumbers.length > 2 && getSirenHelper().isGreater(minVersionNumbers[2], currentVersionNumbers[2])) { alertType = patchUpdateAlertType; } else if (minVersionNumbers.length > 3 && getSirenHelper().isGreater(minVersionNumbers[3], currentVersionNumbers[3])) { alertType = revisionUpdateAlertType; }  if (alertType != null) { showAlert(minVersionName, alertType); return true; } } return false; } "	1	0	1	0	0	0
"private EList<Constraint> ibexToDemocles(IbexPattern ibexPattern, PatternBody body, Map<TGGRuleNode, EMFVariable> nodeToVar, EList<Variable> parameters) { // Constraints EList<Constraint> constraints = body.getConstraints();  // Constants EList<Constant> constants = body.getConstants();  // Signature elements for (TGGRuleElement element : ibexPattern.getSignatureElements()) { if (!nodeToVar.containsKey(element)) { if (element instanceof TGGRuleNode) { TGGRuleNode node = (TGGRuleNode) element; EMFVariable var = emfTypeFactory.createEMFVariable(); var.setName(node.getName()); var.setEClassifier(node.getType()); nodeToVar.put(node, var);  dAttrHelper.extractConstants(node, var); dAttrHelper.extractAttributeVariables(node, var); } } parameters.add(nodeToVar.get(element)); }  // All other nodes EList<Variable> locals = body.getLocalVariables(); for (TGGRuleNode node : ibexPattern.getBodyNodes()) { if (!nodeToVar.containsKey(node)) { EMFVariable var = emfTypeFactory.createEMFVariable(); var.setName(node.getName()); var.setEClassifier(node.getType()); nodeToVar.put(node, var); locals.add(nodeToVar.get(node));  dAttrHelper.extractConstants(node, var); dAttrHelper.extractAttributeVariables(node, var); } }  dAttrHelper.resolveAttributeVariables(nodeToVar.values());  // Attributes as constraints constraints.addAll(dAttrHelper.getAttributes());  // Inplace Attribute constraints as constraints constraints.addAll(dAttrHelper.getRelationalConstraints());  constants.addAll(dAttrHelper.getConstants());  // add new variables as nodes locals.addAll(dAttrHelper.getEMFVariables());  // reset attribute helper. Do it here before the recursive call of this // method dAttrHelper.clearAll();  // Edges as constraints if (!(ibexPattern instanceof MarkedPattern && ((MarkedPattern) ibexPattern).isLocal())) for (TGGRuleEdge edge : ibexPattern.getBodyEdges()) { Reference ref = emfTypeFactory.createReference(); ref.setEModelElement(edge.getType());  ConstraintParameter from = factory.createConstraintParameter(); from.setReference(nodeToVar.get(edge.getSrcNode())); ref.getParameters().add(from);  ConstraintParameter to = factory.createConstraintParameter(); to.setReference(nodeToVar.get(edge.getTrgNode())); ref.getParameters().add(to);  constraints.add(ref); }  // Handle Corrs for (TGGRuleCorr corr : ibexPattern.getBodyCorrNodes()) { Reference srcRef = emfTypeFactory.createReference(); srcRef.setEModelElement((EReference) corr.getType().getEStructuralFeature(""source""));  ConstraintParameter from = factory.createConstraintParameter(); from.setReference(nodeToVar.get(corr)); srcRef.getParameters().add(from);  ConstraintParameter to = factory.createConstraintParameter(); to.setReference(nodeToVar.get(corr.getSource())); srcRef.getParameters().add(to);  constraints.add(srcRef);  Reference trgRef = emfTypeFactory.createReference(); trgRef.setEModelElement((EReference) corr.getType().getEStructuralFeature(""target""));  to = factory.createConstraintParameter(); to.setReference(nodeToVar.get(corr)); trgRef.getParameters().add(to);  from = factory.createConstraintParameter(); from.setReference(nodeToVar.get(corr.getTarget())); trgRef.getParameters().add(from);  constraints.add(trgRef); }  // Force injective matches through unequals-constraints if (ibexPattern instanceof RulePartPattern) forceInjectiveMatchesForPattern((RulePartPattern)ibexPattern, body, nodeToVar);   return constraints; } "	0	0	0	0	0	1
"protected void fetchGroups(Context context) { dataService.fetchContent(""GROUPS_CURRENT"", context); } "	0	0	0	1	0	0
"protected void fetchBadges(Context context) { dataService.fetchContent(""BADGES"", context); } "	0	0	0	1	0	0
"protected void fetchEventsDeclined(Context context) { dataService.fetchContent(""EVENTS_DECLINED"", context); } "	0	0	0	1	0	0
"protected void fetchEventInvites(Context context) { dataService.fetchContent(""EVENT_INVITES"", context); } "	0	0	0	1	0	0
"protected void fetchFriendRequests(Context context) { dataService.fetchContent(""FRIEND_INVITES"", context); } "	0	0	0	1	0	0
"protected void fetchImage(Context context) { dataService.fetchContent(""IMAGE"", context); } "	0	0	0	1	0	0
"@Test public void createCategories_WithSomeValidCategories_ShouldCreateCategoriesAndTriggerCallBack() { // Draft with invalid key final CategoryDraft categoryDraft1 = CategoryDraftBuilder .of(LocalizedString.of(Locale.ENGLISH, ""classic furniture1""), LocalizedString.of(Locale.ENGLISH, ""classic-furniture1"", Locale.GERMAN, ""klassische-moebel1"")) .key(""1"") .build();  final CategoryDraft categoryDraft2 = CategoryDraftBuilder .of(LocalizedString.of(Locale.ENGLISH, ""classic furniture2""), LocalizedString.of(Locale.ENGLISH, ""classic-furniture2"", Locale.GERMAN, ""klassische-moebel2"")) .key(""key2"") .build();  final Set<CategoryDraft> categoryDrafts = new HashSet<>(); categoryDrafts.add(categoryDraft1); categoryDrafts.add(categoryDraft2);  final Set<Category> createdCategories = categoryService.createCategories(categoryDrafts) .toCompletableFuture().join();  assertThat(errorCallBackExceptions).hasSize(1); assertThat(errorCallBackMessages).hasSize(1); assertThat(errorCallBackMessages.get(0)).contains(""Invalid category key '1'. Category keys may only contain "" + ""alphanumeric characters, underscores and hyphens and must have a maximum length of 256 characters.""); assertThat(createdCategories).hasSize(1); } "	0	0	0	0	0	1
"@Test public void testGetActivityFeedList() { Map<Date, List<ActivityFeed>> result = idh.getActivityFeedList(1, 208, 1); for (Date d : result.keySet()) { List<ActivityFeed> afl = result.get(d); for (ActivityFeed af : afl) { assertNotNull(af.getActivityType()); assertNotNull(af.getBodyText()); assertNotNull(af.getDate()); assertNotNull(af.getHeaderText()); System.out.println(af.getActivityType() + "" - "" + af.getHeaderText() + "" - "" + af.getBodyText() + "" - "" + af.getDate()); } } } "	1	0	1	0	0	0
public static void showPictures(final Set<MapillaryAbstractImage> images, final boolean select) { if (!SwingUtilities.isEventDispatchThread()) { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { showPictures(images, select); } }); } else { Bounds zoomBounds = null; if (images.isEmpty()) { zoomBounds = new Bounds(new LatLon(0, 0)); } else { zoomBounds = new Bounds(images.iterator().next().getLatLon()); for (MapillaryAbstractImage img : images) { zoomBounds.extend(img.getLatLon()); } }  // The zoom rectangle must have a minimum size. double latExtent = Math.max(zoomBounds.getMaxLat() - zoomBounds.getMinLat(), MIN_ZOOM_SQUARE_SIDE); double lonExtent = Math.max(zoomBounds.getMaxLon() - zoomBounds.getMinLon(), MIN_ZOOM_SQUARE_SIDE); zoomBounds = new Bounds(zoomBounds.getCenter(), latExtent, lonExtent);  Main.map.mapView.zoomTo(zoomBounds); MapillaryLayer.getInstance().getData().setSelectedImage(null); if (select) MapillaryLayer.getInstance().getData().addMultiSelectedImage(images); if (Main.main != null) MapillaryData.dataUpdated(); }  } 	1	0	1	0	0	0
private void saveGuiToExif() { MediaUtil.copy(mData, mActivityData, true, true); } 	0	0	0	0	0	1
public ItemBuilder lore(String... lore){ ItemMeta meta = itemStack.getItemMeta(); meta.setLore(Stream.of(lore).collect(Collectors.toList())); itemStack.setItemMeta(meta); return this; } 	0	1	0	0	0	0
@Override public boolean isLoggedIn() { return currentFacebookAccessToken != null; } 	0	0	0	0	0	1
protected void scheduleProcess(String processName, String cluster, String startTime, int noOfInstances) throws FalconCLIException { APIResult result = falconUnitClient.schedule(EntityType.PROCESS, processName, startTime, noOfInstances, cluster, true, null); assertStatus(result); } 	1	0	1	0	0	0
protected void submitProcess(Map<String, String> overlay) throws IOException, FalconCLIException { String tmpFile = TestContext.overlayParametersOverTemplate(PROCESS_TEMPLATE, overlay); APIResult result = submit(EntityType.PROCESS, tmpFile); assertStatus(result); } 	0	0	0	0	0	1
protected void submitFeeds(Map<String, String> overlay) throws IOException, FalconCLIException { String tmpFile = TestContext.overlayParametersOverTemplate(UnitTestContext.FEED_TEMPLATE1, overlay); APIResult result = falconUnitClient.submit(EntityType.FEED.name(), tmpFile, null); Assert.assertEquals(result.getStatus(), APIResult.Status.SUCCEEDED); tmpFile = TestContext.overlayParametersOverTemplate(UnitTestContext.FEED_TEMPLATE2, overlay); result = falconUnitClient.submit(EntityType.FEED.name(), tmpFile, null); Assert.assertEquals(result.getStatus(), APIResult.Status.SUCCEEDED); } 	0	0	0	0	0	1
@Test public void testRetention() throws IOException, FalconCLIException, FalconException, ParseException, InterruptedException { // submit with default props submitCluster(); // submitting feeds APIResult result = submit(EntityType.FEED, getAbsolutePath(INPUT_FEED)); assertStatus(result); createData(INPUT_FEED_NAME, CLUSTER_NAME, SCHEDULE_TIME, INPUT_FILE_NAME); String inPath = getFeedPathForTS(CLUSTER_NAME, INPUT_FEED_NAME, SCHEDULE_TIME); Assert.assertTrue(fs.exists(new Path(inPath))); result = schedule(EntityType.FEED, INPUT_FEED_NAME, CLUSTER_NAME); Assert.assertEquals(APIResult.Status.SUCCEEDED, result.getStatus()); waitFor(WAIT_TIME, new Predicate() { public boolean evaluate() throws Exception { InstancesResult.WorkflowStatus status = getRetentionStatus(INPUT_FEED_NAME, CLUSTER_NAME); return InstancesResult.WorkflowStatus.SUCCEEDED.equals(status); } }); InstancesResult.WorkflowStatus status = getRetentionStatus(INPUT_FEED_NAME, CLUSTER_NAME); Assert.assertEquals(InstancesResult.WorkflowStatus.SUCCEEDED, status); Assert.assertFalse(fs.exists(new Path(inPath))); } 	0	0	0	0	0	1
"public void testVersion() throws FalconException, IOException, FalconCLIException { String json = falconUnitClient.getVersion(null); String buildVersion = BuildProperties.get().getProperty(""build.version""); String deployMode = DeploymentProperties.get().getProperty(""deploy.mode""); Assert.assertTrue(Pattern.matches( "".*\\{\\s*\""key\""\\s*:\\s*\""Version\""\\s*,\\s*\""value\""\\s*:\\s*\"""" + buildVersion + ""\""\\s*}.*"", json), ""No build.version found in /api/admin/version""); Assert.assertTrue(Pattern.matches( "".*\\{\\s*\""key\""\\s*:\\s*\""Mode\""\\s*,\\s*\""value\""\\s*:\\s*\"""" + deployMode + ""\""\\s*}.*"", json), ""No deploy.mode found in /api/admin/version""); } "	0	0	0	0	0	1
public boolean submitCluster() throws IOException, FalconCLIException { return submitCluster(DEFAULT_COLO, DEFAULT_CLUSTER, null); } 	0	0	0	0	0	1
"@Bean public DmnEngine ruleEngine() { DmnEngineConfiguration dmnEngineConfiguration = new StandaloneDmnEngineConfiguration(); dmnEngineConfiguration.setDataSource(dataSource()); dmnEngineConfiguration.setDatabaseSchemaUpdate(environment.getProperty(""engine.dmn.schema.update"", ""true""));  return dmnEngineConfiguration.buildDmnEngine(); } "	1	0	1	0	0	0
"public Timestamp getTimeStamp(int mVColumn, String[] values) throws ParseException { LOG.trace(""getTimeStamp()""); // if RelatedDateTimeGroup is set for mvColumn -> get group id Column col = configuration.getColumnById(mVColumn); String group = null; if (col.isSetRelatedDateTimeGroup()) { group = col.getRelatedDateTimeGroup(); } // else check all columns for Type::DATE_TIME -> get Metadata.Key::GROUP->Value if (group == null) { group = configuration.getFirstDateTimeGroup(); } Column[] cols = configuration.getAllColumnsForGroup(group, Type.DATE_TIME); if (cols != null) { // Try to get timezone from configuration final Timestamp ts = new Timestamp(); TimeZone timeZone = getTimeZone(cols); if (isUnixTime(cols)) { handleUnixTime(values, cols, ts); } else { handleDateTimeCombination(values, cols, ts, timeZone); } if (configuration.isDateInfoExtractionFromFileNameSetupValid()) { ts.enrich( dataFile.getName(), configuration.getRegExDateInfoInFileName(), configuration.getDateInfoPattern()); } if (configuration.isUseDateInfoFromFileModificationSet()) { ts.adjustBy(dataFile.lastModified(), configuration.getLastModifiedDelta()); } return ts; } return null; } "	1	0	1	0	0	0
"private String[] createCleanNCName(final Resource res) { // implement check for NCName compliance and remove bad values String name = res.getName(); String origName = name; // clean rest of string using Constants.UNICODE_REPLACER char[] foiNameChars = name.toCharArray(); for (int i = 0; i < foiNameChars.length; i++) { char c = foiNameChars[i]; if (!NcNameResolver.isNCNameChar(c)) { foiNameChars[i] = Configuration.UNICODE_REPLACER; } } name = String.valueOf(foiNameChars); // check if name is only containing ""_"" Matcher matcher = Configuration.UNICODE_ONLY_REPLACER_LEFT_PATTERN.matcher(name); if (matcher.matches()) { // if yes -> change to ""className"" + res.getUri().hashCode() name = res.getClass().getSimpleName().toLowerCase() + res.getUri().hashCode(); } String[] result = { name, origName }; return result; } "	0	0	0	0	0	1
"public static ArrayList<Groupe> getAll() throws SQLException { Connection connection = Database.getDbCon().conn;  String query = ""SELECT * FROM ""+ groupe_table+ "" g "" + ""JOIN ""+classe_table+"" c ON c.id = g.classe_id "" + ""JOIN ""+etudiant_table+"" e ON e.groupe_id = g.id"";  ArrayList<Groupe> groupeList = new ArrayList<Groupe>(); PreparedStatement stmt = connection.prepareStatement(query); ResultSet rs = stmt.executeQuery();  Groupe last_groupe = null; while(rs.next()) { int groupe_id = rs.getInt(""g.id""); if(last_groupe == null || last_groupe.getId() != groupe_id) { if(last_groupe != null) groupeList.add(last_groupe); last_groupe = new Groupe(); last_groupe.setId(groupe_id); last_groupe.setLibelle(rs.getString(""g.libelle""));  Classe classe = new Classe(); classe.setId(rs.getInt(""c.id"")); classe.setLibelle(rs.getString(""c.libelle"")); last_groupe.setClasse(classe); } Etudiant etudiant = new Etudiant(); etudiant.setId(rs.getInt(""e.id"")); etudiant.setNom(rs.getString(""e.nom"")); etudiant.setPrenom(rs.getString(""e.prenom"")); etudiant.setEmail(rs.getString(""e.email"")); etudiant.setNum_etu(rs.getString(""e.num_etu""));  last_groupe.addEtudiant(etudiant);  if(rs.isLast()){ groupeList.add(last_groupe); } }  return groupeList; } "	0	0	0	0	0	1
@Override public void setExpandedState(boolean isExpanded, boolean animate) { MorphButton.MorphState indicatorState = (isExpanded) ? MorphButton.MorphState.END : MorphButton.MorphState.START;  if (mMorphButton.getState() != indicatorState) { mMorphButton.setState(indicatorState, animate); } } 	1	0	1	1	0	0
"@Override public void handle(ChannelHandlerContext ctx, HttpRequest request) { try {  Tracker.track(request);  requestCount.inc(); final String tenantId = request.getHeader(""tenantId""); JSONMetricsContainer jsonMetricsContainer = null; final Timer.Context jsonTimerContext = jsonTimer.time();  final String body = request.getContent().toString(Constants.DEFAULT_CHARSET); try { jsonMetricsContainer = createContainer(body, tenantId); if (!jsonMetricsContainer.isValid()) { throw new IOException(""Invalid JSONMetricsContainer""); } } catch (JsonParseException e) { log.warn(""Exception parsing content"", e); DefaultHandler.sendResponse(ctx, request, ""Cannot parse content"", HttpResponseStatus.BAD_REQUEST); return; } catch (JsonMappingException e) { log.warn(""Exception parsing content"", e); DefaultHandler.sendResponse(ctx, request, ""Cannot parse content"", HttpResponseStatus.BAD_REQUEST); return; } catch (IOException e) { log.warn(""IO Exception parsing content"", e); DefaultHandler.sendResponse(ctx, request, ""Cannot parse content"", HttpResponseStatus.BAD_REQUEST); return; } catch (Exception e) { log.warn(""Other exception while trying to parse content"", e); DefaultHandler.sendResponse(ctx, request, ""Failed parsing content"", HttpResponseStatus.INTERNAL_SERVER_ERROR); return; }  if (jsonMetricsContainer == null) { log.warn(ctx.getChannel().getRemoteAddress() + "" No valid metrics""); DefaultHandler.sendResponse(ctx, request, ""No valid metrics"", HttpResponseStatus.BAD_REQUEST); return; }  List<Metric> containerMetrics; try { containerMetrics = jsonMetricsContainer.toMetrics(); forceTTLsIfConfigured(containerMetrics);  if (!jsonMetricsContainer.areDelayedMetricsPresent()) { Tracker.trackDelayedMetricsTenant(tenantId); } } catch (InvalidDataException ex) { // todo: we should measure these. if they spike, we track down the bad client. // this is strictly a client problem. Someting wasn't right (data out of range, etc.) log.warn(ctx.getChannel().getRemoteAddress() + "" "" + ex.getMessage()); DefaultHandler.sendResponse(ctx, request, ""Invalid data "" + ex.getMessage(), HttpResponseStatus.BAD_REQUEST); return; } catch (Exception e) { // todo: when you see these in logs, go and fix them (throw InvalidDataExceptions) so they can be reduced // to single-line log statements. log.warn(""Exception converting JSON container to metric objects"", e); // This could happen if clients send BigIntegers as metric values. BF doesn't handle them. So let's send a // BAD REQUEST message until we start handling BigIntegers. DefaultHandler.sendResponse(ctx, request, ""Error converting JSON payload to metric objects"", HttpResponseStatus.BAD_REQUEST); return; } finally { jsonTimerContext.stop(); }  if (containerMetrics == null || containerMetrics.isEmpty()) { log.warn(ctx.getChannel().getRemoteAddress() + "" No valid metrics""); DefaultHandler.sendResponse(ctx, request, ""No valid metrics"", HttpResponseStatus.BAD_REQUEST); }  final MetricsCollection collection = new MetricsCollection(); collection.add(new ArrayList<IMetric>(containerMetrics)); final Timer.Context persistingTimerContext = persistingTimer.time(); try { ListenableFuture<List<Boolean>> futures = processor.apply(collection); List<Boolean> persisteds = futures.get(timeout.getValue(), timeout.getUnit()); for (Boolean persisted : persisteds) { if (!persisted) { DefaultHandler.sendResponse(ctx, request, null, HttpResponseStatus.INTERNAL_SERVER_ERROR); return; } } DefaultHandler.sendResponse(ctx, request, null, HttpResponseStatus.OK); } catch (TimeoutException e) { DefaultHandler.sendResponse(ctx, request, ""Timed out persisting metrics"", HttpResponseStatus.ACCEPTED); } catch (Exception e) { log.error(""Exception persisting metrics"", e); DefaultHandler.sendResponse(ctx, request, ""Error persisting metrics"", HttpResponseStatus.INTERNAL_SERVER_ERROR); } finally { persistingTimerContext.stop(); } } finally { requestCount.dec(); } } "	1	0	1	1	0	0
"public static Hashtable<Object, Object> getProperties() throws HelpException { if (props == null) { props = new Hashtable<Object, Object>(); Context initContext = null; try { initContext = new InitialContext(); if (initContext != null) { // Load from JNDI. Tomcat puts its stuff under java:comp/env: for (Enumeration<Binding> e = initContext.listBindings(TOMCAT_CONTEXT + RESOURCE_BUNDLE_NAME); e.hasMoreElements();) { Binding binding = e.nextElement(); props.put(binding.getName(), binding.getObject()); } } } catch (NamingException mre) { // throw new HelpException(""JNDI not configured properly""); } try { // Also add the JDBC subcontext as that is a convention. if (initContext != null) { for (Enumeration<Binding> e = initContext.listBindings(TOMCAT_CONTEXT + JDBC_SUBCONTEXT); e.hasMoreElements();) { Binding binding = e.nextElement(); props.put(JDBC_SUBCONTEXT + ""/"" + binding.getName(), binding.getObject()); } } } catch (NamingException mre) { // throw new HelpException(""JNDI not configured properly""); }  // Load from properties file if (props.size() == 0 || props.containsKey(""propertiesfile"")) { try { Properties fileProps = new Properties(); InputStream inStream = null;  if (props.containsKey(""propertiesfile"")) { try { inStream = new FileInputStream((String) props.get(""propertiesfile"")); } catch (Exception e) { throw new HelpException(""Properties file not found""); } } else { inStream = Helps.class.getResourceAsStream(""/"" + RESOURCE_BUNDLE_NAME + "".properties""); if (inStream == null) { throw new HelpException(""Properties file is not found in the classpath""); } } fileProps.load(inStream); inStream.close(); props.putAll(fileProps); } catch (IOException mre) { throw new HelpException(""Properties file is not readable""); } } } return props; } "	0	1	0	0	0	0
"private WorkoutEditActivity getCheckedContext(final View view) { isInstanceOf(WorkoutEditActivity.class, view.getContentDescription(), ""View context is not a WorkoutEditActivity""); return (WorkoutEditActivity) view.getContext(); } "	0	0	0	1	0	0
"@Override public void configAdminUpdate(String pid, Map<String, String> data) { ServiceReference sref = bundleContext.getServiceReference(ConfigurationAdmin.class.getName()); if (sref == null) { throw new IllegalStateException(""The configuration admin service cannot be found.""); }  try { ConfigurationAdmin ca = (ConfigurationAdmin) bundleContext.getService(sref); if (ca == null) { throw new IllegalStateException(""The configuration admin service cannot be found.""); } Configuration config = ca.getConfiguration(pid); config.update(new Hashtable<String, String>(data)); } catch (IOException ioe) { throw new RuntimeException(ioe); } finally { bundleContext.ungetService(sref); } } "	1	0	1	0	0	0
"private void handleFailedEvaluatorInCLR(final FailedEvaluator eval, final boolean isRestartFailed) { final String message = ""CLR FailedEvaluator handler set, handling things with CLR handler.""; LOG.log(Level.INFO, message); final FailedEvaluatorBridge failedEvaluatorBridge = new FailedEvaluatorBridge(eval, JobDriver.this.evaluatorRequestor, JobDriver.this.isRestarted, loggingScopeFactory); if (isRestartFailed) { NativeInterop.clrSystemDriverRestartFailedEvaluatorHandlerOnNext( JobDriver.this.handlerManager.getDriverRestartFailedEvaluatorHandler(), failedEvaluatorBridge, JobDriver.this.interopLogger); } else { NativeInterop.clrSystemFailedEvaluatorHandlerOnNext( JobDriver.this.handlerManager.getFailedEvaluatorHandler(), failedEvaluatorBridge, JobDriver.this.interopLogger); }  final int additionalRequestedEvaluatorNumber = failedEvaluatorBridge.getNewlyRequestedEvaluatorNumber(); if (additionalRequestedEvaluatorNumber > 0) { LOG.log(Level.INFO, ""number of additional evaluators requested after evaluator failure: "" + additionalRequestedEvaluatorNumber); }  JobDriver.this.jobMessageObserver.sendMessageToClient(message.getBytes(StandardCharsets.UTF_8)); } "	0	0	0	0	0	1
"@RolesAllowed(""AUTHENTICATED"") @GET @Path(""/submissions"") @Produces(MediaType.APPLICATION_JSON) public String getSubmissions(@QueryParam(""offset"") int offset, @QueryParam(""limit"") int limit, @QueryParam(""submitted"") boolean submitted, @QueryParam(""accNo"") String accNoFilter, @QueryParam(""rTimeFrom"") Long rTimeFromFilter, @QueryParam(""rTimeTo"") Long rTimeToFilter, @Context UserSession userSession) throws BioStudiesClientException, IOException {  Map<String, String> params = new HashMap<>(); if (accNoFilter != null) { params.put(""accNo"", accNoFilter); } if (rTimeFromFilter != null) { params.put(""rTimeFrom"", rTimeFromFilter.toString()); } if (rTimeToFilter != null) { params.put(""rTimeToFilter"", rTimeToFilter.toString()); }  logger.debug(""getSubmissions(userSession={}, offset={}, limit={})"", userSession, offset, limit); return submitted ? service.getSubmittedSubmissions(userSession, offset, limit, params) : service.getModifiedSubmissions(userSession, offset, limit, params); } "	0	1	0	0	0	0
"@Override public void clicked(InputEvent event, float x, float y) { if (selectedGO != null && !delete.isDisabled()) { Log.traceTag(TAG, ""Remove game object [{}]."", selectedGO); removeGo(selectedGO); Mundus.postEvent(new SceneGraphChangedEvent()); } } "	1	0	1	0	0	0
public static ResourceEntity getSingleValueSetByName(String name) { for (ResourceEntity vs : ValueSetFileList) { if (vs.getResourceName().equals(name)) { return vs; } } return null; } 	0	1	0	0	0	0
@Override public void onFailure(Call call, IOException e) { // some connection error callback.isNotValid(); } 	0	0	0	0	0	1
@Test public void mistakenTranslationShouldBeAskedUpToTwoTimesAfterLevel1PromotionPeriodHasPassedButLevel2NotYet() { Clock clock = mock(Clock.class); when(clock.getTime()).thenReturn(LEVEL_2.end()); Reminder reminder = new Reminder(clock); TranslationMetadata metadata = new TranslationMetadata(ANY_DIFFICULTY, asList( new DifficultyAtTime(Difficulty.DIFFICULT, LEVEL_1.begin()), new DifficultyAtTime(Difficulty.EASY, LEVEL_1.begin()), new DifficultyAtTime(Difficulty.EASY, LEVEL_1.begin()), new DifficultyAtTime(Difficulty.EASY, LEVEL_1.begin()), new DifficultyAtTime(Difficulty.EASY, LEVEL_1.end()) ));  boolean shouldRemind = reminder.shouldBeReminded(metadata);  assertThat(shouldRemind, is(true)); } 	0	0	0	0	0	1
public Map<Character, Character> getLeetTable() { return leetTable; } 	0	0	0	1	0	0
"@Override public void start(long period, TimeUnit unit) { super.start(period, unit);  if (saveEntryOnInstantiation) { new HttpConnectionTemplate() {  @Override protected HttpURLConnection performAction(HttpURLConnection connection, long timestamp) throws IOException { JsonMetric jsonMetric = new JsonStartTime(name(prefix, ""metricStart"")); connection = writeJsonMetricAndRecreateConnectionIfNeeded(jsonMetric, connection, new AtomicInteger(0)); return connection; } }.write(); } } "	0	0	0	1	0	0
void setProcessedResponse(boolean processedResponse) { this.processedResponse = processedResponse; } 	0	0	0	0	0	1
@Override public final void postNameTy(NameTy ty) { // Note that all mathematical types are ArbitraryExpTys, so this must // be in a program-type syntactic slot. PosSymbol tySymbol = ty.getName(); PosSymbol tyQualifier = ty.getQualifier(); Location tyLocation = tySymbol.getLocation(); String tyName = tySymbol.getName();  try { ProgramTypeEntry type = myBuilder .getInnermostActiveScope() .queryForOne( new NameQuery( tyQualifier, tySymbol, ImportStrategy.IMPORT_NAMED, FacilityStrategy.FACILITY_INSTANTIATE, true)).toProgramTypeEntry( tyLocation);  ty.setProgramType(type.getProgramType()); ty.setMathType(myTypeGraph.CLS); ty.setMathTypeValue(type.getModelType()); } catch (NoSuchSymbolException nsse) { noSuchSymbol(tyQualifier, tyName, tyLocation); } catch (DuplicateSymbolException dse) { duplicateSymbol(ty.getName().getName(), ty.getLocation()); } } 	0	1	0	0	0	0
"@Override public void keyPressed(final KeyEvent pE) { final AutoRotationController lAutoRotateController = mClearVolumeRenderer.getAutoRotateController();  final boolean lIsShiftPressed = pE.isShiftDown(); final boolean lIsCtrlPressed = pE.isControlDown(); final boolean lIsMetaPressed = pE.isMetaDown(); final float lTranslationSpeed = lIsShiftPressed	? 0.1f : (lIsMetaPressed	? 0.001f : 0.01f); final float lRotationSpeed = (float) (2 * PI * (lIsShiftPressed	? 0.025f : (lIsMetaPressed	? 0.0005f : 0.005f))); final float lAutoRotationSpeed = 0.01f * lRotationSpeed;  switch (pE.getKeyCode()) { case KeyEvent.VK_SPACE: mToggleRotationTranslation = !mToggleRotationTranslation; break; case KeyEvent.VK_DOWN: if (mToggleRotationTranslation) {  if (lAutoRotateController.isActive()) lAutoRotateController.addRotationSpeedX(-lAutoRotationSpeed); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleX(-lRotationSpeed) .invert();  }  else mClearVolumeRenderer.addTranslationY(-lTranslationSpeed); mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters(); break; case KeyEvent.VK_UP: if (mToggleRotationTranslation) { if (lAutoRotateController.isActive()) lAutoRotateController.addRotationSpeedX(+lAutoRotationSpeed); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleX(+lRotationSpeed) .invert();  } else mClearVolumeRenderer.addTranslationY(+lTranslationSpeed);  mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters();  break;  case KeyEvent.VK_LEFT: if (mToggleRotationTranslation) { if (lAutoRotateController.isActive()) lAutoRotateController.addRotationSpeedY(-lAutoRotationSpeed); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleY(+lRotationSpeed) .invert();  } else mClearVolumeRenderer.addTranslationX(-lTranslationSpeed); mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters();  break; case KeyEvent.VK_RIGHT: if (mToggleRotationTranslation) { if (lAutoRotateController.isActive()) lAutoRotateController.addRotationSpeedY(+lAutoRotationSpeed); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleY(-lRotationSpeed) .invert();  } else mClearVolumeRenderer.addTranslationX(+lTranslationSpeed);  mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters();  break;  case KeyEvent.VK_PAGE_DOWN: if (mToggleRotationTranslation) { if (lAutoRotateController.isActive()) lAutoRotateController.addRotationSpeedZ(-lAutoRotationSpeed); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleZ(+lRotationSpeed) .invert();  } else mClearVolumeRenderer.addTranslationZ(-lTranslationSpeed / mClearVolumeRenderer.getFOV());  mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters();  break; case KeyEvent.VK_PAGE_UP: if (mToggleRotationTranslation) { if (lAutoRotateController.isActive()) lAutoRotateController.addRotationSpeedZ(+lAutoRotationSpeed); else mClearVolumeRenderer.getQuaternion() .invert() .rotateByAngleZ(-lRotationSpeed) .invert();  } else mClearVolumeRenderer.addTranslationZ(+lTranslationSpeed / mClearVolumeRenderer.getFOV());  mClearVolumeRenderer.notifyChangeOfVolumeRenderingParameters();  break; case KeyEvent.VK_ESCAPE: if (mClearVolumeRenderer.isFullScreen()) mClearVolumeRenderer.toggleFullScreen(); break;  case KeyEvent.VK_S: mClearVolumeRenderer.toggleRecording();  case KeyEvent.VK_R: if (lAutoRotateController.isActive() && !lAutoRotateController.isRotating()) { lAutoRotateController.setActive(false); } if (lAutoRotateController.isActive()) { lAutoRotateController.stop(); } else { mClearVolumeRenderer.resetBrightnessAndGammaAndTransferFunctionRanges(); mClearVolumeRenderer.resetRotationTranslation(); } break;  case KeyEvent.VK_A: lAutoRotateController.setActive(!lAutoRotateController.isActive()); break;  case KeyEvent.VK_C: mClearVolumeRenderer.requestVolumeCapture(); break;  case KeyEvent.VK_M: mClearVolumeRenderer.toggleAdaptiveLOD(); break;  case KeyEvent.VK_O: if (mClearVolumeRenderer.getFOV() == ClearVolumeRendererBase.cDefaultFOV) mClearVolumeRenderer.setFOV(ClearVolumeRendererBase.cOrthoLikeFOV); else mClearVolumeRenderer.setFOV(ClearVolumeRendererBase.cDefaultFOV); break;  case KeyEvent.VK_I: mClearVolumeRenderer.cycleRenderAlgorithm(); break;  }  if (pE.getKeyCode() >= KeyEvent.VK_0 && pE.getKeyCode() <= KeyEvent.VK_9) { int lRenderLayerIndex = pE.getKeyCode() - KeyEvent.VK_0;  if (lRenderLayerIndex == 0) lRenderLayerIndex = 10; else lRenderLayerIndex--;  if (lRenderLayerIndex < mClearVolumeRenderer.getNumberOfRenderLayers()) { if (lIsShiftPressed) mClearVolumeRenderer.setLayerVisible(	lRenderLayerIndex, !mClearVolumeRenderer.isLayerVisible(lRenderLayerIndex)); else mClearVolumeRenderer.setCurrentRenderLayer(lRenderLayerIndex); } }  processOverlayRelatedEvents(pE);  } "	0	0	0	0	0	1
@Override public RealmResults<Event> getEventByDate(Date date) { java.util.Calendar calendar = java.util.Calendar.getInstance(); calendar.setTime(date); calendar.add(java.util.Calendar.HOUR, 23); Date toDate = calendar.getTime(); return mRealm.where(Event.class).between(START_DATE_FIELD, date, toDate) .findAll(); } 	0	0	0	0	0	1
"public static void updateUserProfile(){ // This creates a profile for user if one does not already exist or updates it. try { JSONObject props = new JSONObject(); props.put(""version"", CellRpg.VERSION); props.put(""OS"", System.getProperty(""os.name"") + ""v"" + System.getProperty(""os.version"")); props.put(""JRE"", System.getProperty(""java.version"")); props.put(""time zone"", Calendar.getInstance().getTimeZone().getID());  JSONObject update = messageBuilder.set(UserIdentifier.getId(), props);  // Send the update to mixpanel try { mixpanel.sendMessage(update); } catch (IOException ex) { logger.error(""message deliver error:"" + ex.getMessage()); } }catch(JSONException ex){ logger.error(""analytics JSON err: "" + ex.getMessage()); } } "	0	0	0	0	0	1
private void addAlternate(List<PDXImage> alternates, COSDictionary buffer, PDResources resources) { COSBase alternatesImages = buffer.getDictionaryObject(COSName.IMAGE); if (alternatesImages instanceof COSStream) {  final PDStream stream = new PDStream((COSStream) alternatesImages); PDImageXObjectProxy imageXObject = new PDImageXObjectProxy(stream, resources, null); alternates.add(new PBoxPDXImage(imageXObject, this.document, this.flavour)); } } 	1	1	1	0	1	0
"protected TableMetadata getTableMetadata(final MetaDataKey key) { logger.info(""Retrieving input metadata for the key: {}"", key); final String keyspaceUsed = cassandraConnector.getBasicAuthConnectionStrategy().getCassandraClient().getLoggedKeyspace(); final CassandraClient cassandraClient = cassandraConnector.getBasicAuthConnectionStrategy().getCassandraClient();  //extract tables metadata from database return cassandraClient.fetchTableMetadata(keyspaceUsed, key.getId()); } "	0	0	0	1	0	0
"public List<Map<String, Object>> select(String query, List<Object> params) throws CassandraDBException {  validateSelectQuery(query, params);  ResultSet result = null;  try { if (!CollectionUtils.isEmpty(params)) { result = executePreparedStatement(query, params); } else { result = cassandraSession.execute(query); } } catch (Exception e) { logger.error(""Select Request Failed: "" + e.getMessage()); throw new CassandraDBException(e.getMessage(), e); }  return getResponseFromResultSet(result); } "	0	0	0	1	0	0
"public static String addPadding(String encoded, boolean urlSafe) { String padding = urlSafe ? ""."" : ""=""; StringBuilder buffer = new StringBuilder(encoded); while (encoded.length() % 4 != 0) { buffer.append(padding); } return buffer.toString(); } "	1	0	1	0	0	0
@NullSafe public static long size(final File path) { return (isExisting(path) ? path.length() : 0l); } 	0	0	0	0	0	1
@Override protected void onCreate( Bundle savedInstanceState ) { super.onCreate(savedInstanceState);  this.setResult(0); this.requestWindowFeature(Window.FEATURE_NO_TITLE); this.setContentView(R.layout.editserver);  if( database == null ) database = new DatabaseProvider(EditServerActivity.this);  Intent thisIntent = getIntent(); rowId = thisIntent.getLongExtra(Values.EXTRA_ROW_ID, -1);  if( rowId == -1 ) { UserVisibleMessage.showMessage(EditServerActivity.this, R.string.msg_db_failure); finish(); }  ServerRecord sr = database.getServer(rowId);  saveButton = (Button)findViewById(R.id.editserver_save_button); saveButton.setOnClickListener(saveButtonListener);  cancelButton = (Button)findViewById(R.id.editserver_cancel_button); cancelButton.setOnClickListener(cancelButtonListener);  field_server = (EditText)findViewById(R.id.editserver_field_server); field_port = (EditText)findViewById(R.id.editserver_field_port); field_timeout = (EditText)findViewById(R.id.editserver_field_timeout); field_rcon_password = (EditText)findViewById(R.id.editserver_field_rcon_password); field_nickname = (EditText)findViewById(R.id.editserver_field_nickname);  field_server.setText(sr.getServerURL()); field_port.setText(Integer.toString(sr.getServerPort())); field_timeout.setText(Integer.toString(sr.getServerTimeout())); field_rcon_password.setText(sr.getServerRCONPassword()); field_nickname.setText(sr.getServerNickname());  if( CheckValve.settings.getBoolean(Values.SETTING_RCON_SHOW_PASSWORDS) == true ) { ((CheckBox)findViewById(R.id.editserver_checkbox_show_password)).setChecked(true); field_rcon_password.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD); } else { ((CheckBox)findViewById(R.id.editserver_checkbox_show_password)).setChecked(false); field_rcon_password.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD); } } 	1	0	1	0	0	0
@Override public synchronized Optional<AuthorizationConfig> findOne(String var1) { return Optional.ofNullable(repository.findOne(var1)); } 	0	0	0	0	0	1
@Override public String getUrlForInsertion() { return getMediumSizeUrl(); } 	0	0	0	0	0	1
private static PathAddress searchPathAddress(PathAddress address, ImmutableManagementResourceRegistration registry, Map<String, String> properties) { if (properties.size() == 0) { return address; } for (Map.Entry<String, String> entry : properties.entrySet()) { PathAddress childAddress = PathAddress.pathAddress( replaceEscapedCharactersInKey(entry.getKey()), replaceEscapedCharactersInValue(entry.getValue())); ImmutableManagementResourceRegistration subModel = registry.getSubModel(address); if (subModel != null) { Map<String, String> childProps = new HashMap<String, String>(properties); childProps.remove(entry.getKey()); PathAddress foundAddr = searchPathAddress(address.append(childAddress), subModel, childProps); if (foundAddr != null) { return foundAddr; } } } return null; } 	1	0	1	1	0	0
"public IngestMetric apply(MetricClassification classification, SupportedJMXBean bean) { Preconditions.checkArgument(appliesForMetric(bean), String.format(""Invoked factory does not apply for %s, make sure you are checking with appliesForMetric first."", bean.name())); if (classification != null) { MetricSample sample = doApply(classification, bean); if (sample.getCount() <= 0 || sample.getAvg() < 0 || sample.getSum() < 0 || sample.getMax() < 0 || sample.getMin() < 0) { LOGGER.debug(""Metric sample for bean {} returned with invalid values. {}"", bean.name(), sample); return null; } return metricBuilder.build(sample); } return null; } "	0	1	0	0	0	0
"private CommandResult sendProbes(ArgoClientContext context, List<String> probeNames) { Console.error(""Sending specified list of probes.""); for (String probeName : probeNames) { Probe probe = context.getProbe(probeName); if (probe != null) { sendProbe(context, probeName, probe); } else { Console.error(""Unknown probe name specified: "" + probeName); } } return CommandResult.OK; } "	0	0	0	1	0	0
"private int[] parseRangeRequest(IHTTPSession session, int totalLength) { int[] range = null; String header = session.getHeaders().get(""range""); if(header != null  && header.startsWith(""bytes="")) { range = new int[] {0, -1}; header = header.substring(""bytes="".length()); int dashPos = header.indexOf('-'); try { if(dashPos > 0) { range[0] = Integer.parseInt(header.substring(0,dashPos)); }  if(dashPos == header.length()-1) { range[1] = totalLength; }else if(dashPos > 0) { range[1] = Integer.parseInt(header.substring(dashPos+1));  } }catch(NumberFormatException nfe) {  } if(range[0] < 0 || range[1] > totalLength) { range[0] = -1;//Error flag } }  return range; } "	1	1	1	1	0	0
"public void selectDrawerItem(MenuItem menuItem) { switch (menuItem.getItemId()) { case R.id.nav_browser: //Check if the device is online if (!isOnline()) { Toast toast = Toast.makeText(this, R.string.no_connection, Toast.LENGTH_SHORT); toast.show(); MenuItem m = sNavView.getMenu().findItem(R.id.nav_favorites); m.setChecked(true); sDrawer.closeDrawers(); return; } //showComicBrowserFragment showFragment(""pref_random_comics"", menuItem.getItemId(), ""Comics"", ""browser"", ""favorites""); break; case R.id.nav_favorites: //Check if there are any Favorites if (Favorites.getFavoriteList(this).length == 0) { Toast toast = Toast.makeText(this, R.string.no_favorites, Toast.LENGTH_SHORT); toast.show(); MenuItem m = sNavView.getMenu().findItem(R.id.nav_browser); m.setChecked(true); sDrawer.closeDrawers(); return; } //showFavoritesFragment showFragment(""pref_random_favorites"", menuItem.getItemId(), ""Favorites"", ""favorites"", ""browser""); break;  case R.id.nav_settings: sDrawer.closeDrawer(sNavView); //Add delay so that the Drawer is closed before the Settings Activity is launched new Handler().postDelayed(new Runnable() { @Override public void run() { Intent i = new Intent(MainActivity.this, SettingsActivity.class); startActivity(i); } }, 200); return;  case R.id.nav_feedback: sDrawer.closeDrawer(sNavView); new Handler().postDelayed(new Runnable() { @Override public void run() { Intent i = new Intent(Intent.ACTION_SENDTO, Uri.fromParts(""mailto"", ""easyxkcd@gmail.com"", null)); startActivity(Intent.createChooser(i, getResources().getString(R.string.nav_feedback_send))); } }, 200); return;  case R.id.nav_about: sDrawer.closeDrawer(sNavView); new Handler().postDelayed(new Runnable() { @Override public void run() { Intent i = new Intent(MainActivity.this, AboutActivity.class); startActivity(i); } }, 250); return; } menuItem.setChecked(true); sDrawer.closeDrawers(); sCurrentFragment = menuItem.getItemId(); invalidateOptionsMenu(); } "	0	0	0	0	0	1
"public static void main(String[] args) throws JDOMException, IOException{ TerminalFunction tf = new MicroRTSTerminalFunction(); AggregateDifferencesDomain domain = new AggregateDifferencesDomain();  BackwardInduction bi = new BackwardInduction(""test"", domain, tf);  System.out.println(""Solving...""); bi.solve((MicroRTSState) domain.getInitialState()); System.out.println(""Solved."");  } "	0	1	0	0	0	0
private LinearLayout createContentView() throws ServiceNotUpException { ContentView view = new ContentView(this); ControlBar bar = createControlBar(); view.addView(bar, layout);   TextView urlLabel = new TextView(this); urlLabel.setText(osmApi.getUrlStart()); view.addView(urlLabel, layout); AppTheme.themify(urlLabel);  tagEditor = new TagEditor(this, osmApi.getBaseDirectory()); view.addView(tagEditor, layout);   TextView postLabel = new TextView(this); postLabel.setText(osmApi.getUrlEnd()); view.addView(postLabel, layout); AppTheme.themify(postLabel);  list = new NodeListView(getServiceContext(),SOLID_KEY, INFO_ID_FILEVIEW);   view.addView(list,layout);  return view; } 	0	0	0	0	0	1
@Override protected Predicate<TransactionDTO> getSaveAuthorisationPredicate() { // FIXME Workaround with Objects.isNull - Needs to be fixed return (obj) -> Objects.isNull(obj) || permissionManager.isAuthorized(obj.getId(), OperationType.EDT); } 	0	0	0	1	0	0
public static FiberSocketChannel open() throws IOException { return new FiberSocketChannel(AsynchronousSocketChannel.open(FiberAsyncIO.defaultGroup())); } 	0	0	0	0	0	1
"@Override public View getView(int position, View convertView, ViewGroup parent) { View row = convertView;  ItemHolder itemHolder; if (row == null) { LayoutInflater layoutInflater = LayoutInflater.from(context); row = layoutInflater.inflate(layoutResourceId, parent, false); itemHolder = new ItemHolder(); itemHolder.itemImage = (ImageView) row.findViewById(R.id.inventoryItem); row.setTag(itemHolder); } else { itemHolder = (ItemHolder) row.getTag(); }  Item item = items.get(position); Log.d(""INVENTORYADAPTER"", String.valueOf(item.getId()));  int itemID = (int) item.getId();  switch (itemID) { case 1: itemHolder.itemImage.setBackgroundResource(R.drawable.duct_tape); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; case 5: itemHolder.itemImage.setBackgroundResource(R.drawable.key); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; case 7: itemHolder.itemImage.setBackgroundResource(R.drawable.hour_hand); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; case 8: itemHolder.itemImage.setBackgroundResource(R.drawable.minute_hand); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; case 9: itemHolder.itemImage.setBackgroundResource(R.drawable.lever_handle); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; case 11: itemHolder.itemImage.setBackgroundResource(R.drawable.bucket); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; case 12: itemHolder.itemImage.setBackgroundResource(R.drawable.bucket_filled); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; case 13: itemHolder.itemImage.setBackgroundResource(R.drawable.master_key); Log.d(""INVENTORYADAPTER"", String.valueOf(itemID)); break; default: break; }  return row; } "	0	0	0	0	0	1
@Override public Response requestGetEntityInfo(GetEntityInfoRequest r, RequestContext ctx) { final EntityInfo e = registry.getEntity(r.entityId); if (e != null) { synchronized (e) { final Session s = e.getSession(); if (s != null) { return new GetEntityInfoResponse(e.build, e.name, s.channel.remoteAddress().getAddress().getHostAddress(), null); } else { return new GetEntityInfoResponse(e.build, e.name, null, null); } } }  return Response.error(ERROR_UNKNOWN_ENTITY_ID); } 	0	1	0	0	0	0
"@Test public void defaultAspectsAreBuiltCorrectlyForMultiLocaleApps() throws Exception { given(app).hasBeenCreated() .and(brjs).localeForwarderHasContents("""") .and(app.defaultAspect()).hasBeenCreated() .and(app.appConf()).supportsLocales(""en"", ""en_GB"") .and(app.defaultAspect()).indexPageHasContent(""DEFAULT ASPECT INDEX PAGE""); when(brjs).runCommand(""build-app"", ""app""); then(brjs).fileContentsContains(""generated/built-apps/app/en_GB/index.html"", ""DEFAULT ASPECT INDEX PAGE""); } "	0	0	0	1	0	0
"private void maybeAddNullItem() { if (nullItemText != null) { String itemText = ""\u00AB"" + nullItemText + ""\u00BB ""; valueField.insertItemAt(itemText, 0); } } "	0	0	0	1	0	0
"@Override public OpportunityStatus getStatus(final OpportunityInstance oppInstance) throws ReturnStatusException { OpportunityStatus status = null;  if(isLegacyCallsEnabled) { status = legacyOpportunityService.getStatus(oppInstance); }  //This isn't ideal, but due to the way the progman properties are loaded within the system this lives within the service rather than the callers. if (!isRemoteExamCallsEnabled) { return status; }  Response<ExamApproval> response = examRepository.getApproval(oppInstance.getExamId(), oppInstance.getSessionKey(), oppInstance.getExamBrowserKey());  if (!response.hasError() && !response.getData().isPresent()) { throw new ReturnStatusException(""Invalid response from the exam service""); }  if (response.getError().isPresent()) { ValidationError validationError = response.getError().get(); String errorMessage = validationError.getTranslatedMessage().isPresent() ? validationError.getTranslatedMessage().get() : validationError.getMessage();  throw new ReturnStatusException(errorMessage); }  ExamApproval examApproval = response.getData().get(); status = new OpportunityStatus(); status.setStatus(OpportunityStatusExtensions.parseExamStatus(examApproval.getExamStatus()));  return status; } "	0	1	0	0	0	0
public static FloatInput normalizeFloat(final FloatInput base, final float zero, float one) { Mixing.checkNull(base); return createDispatch(normalizeFloat((FloatInputPoll) base, zero, one), FloatMixing.onUpdate(base)); } 	0	0	0	0	0	1
"@Override public void run() {  try { checkCancel();  loadStep = CTBMod.lang.localize(""gui.creator.step.auth""); if (getAccessToken() == null) { setState(State.LOGGING_IN, true); loginReq = new OAuthAccessTokenRequest(tfEmail.getText(), tfActualPassword.getText()); loginReq.execute(); }  checkCancel();  if (loginReq != null && !loginReq.wasSuccessful()) { header = YELLOW.toString().concat(loginReq.getResponse().getMessage()); loginReq = null; logout(); } else {  if (loginReq != null) { CTBMod.cache.setOAuth(loginReq.getResponse()); }  if (getUser() == null) { loadStep = CTBMod.lang.localize(""gui.creator.step.profile""); userReq = new UserProfileRequest(getAccessToken()); userReq.execute(); if (userReq.wasSuccessful()) { CTBMod.cache.activateUser(new UserAndAuth(userReq.getResponse().getUser(), CTBMod.cache.getOAuth())); CTBMod.cache.save(); } else { if (userReq.getRawResponse().getStatus() == 401) { logout(); header = CTBMod.lang.localize(""gui.creator.header.invalid""); } else { header = userReq.getResponse().getMessage(); } return; } }  checkCancel();  //                    if (getCreator() == null) { //                        setState(State.LOGGING_IN, true); //                        GetCreatorsRequest creatorsReq = new GetCreatorsRequest(getUser().id, getUser().access_token); //                        creatorsReq.execute(); //                        CTBMod.cache.setCreators(creatorsReq.getResponse().creators.toArray(new Creator[0])); //                    }  checkCancel();  List<CreationRelations> creations = creationList.getCreations(); if (creations.isEmpty()) { String stepUnloc = ""gui.creator.step.creations""; loadStep = CTBMod.lang.localize(stepUnloc, 1, ""?""); setState(State.LOGGING_IN, true);  GetCreationsRequest creationsReq = new GetCreationsRequest(getUser().getId(), getAccessToken()); creationsReq.execute(); checkCancel();  if (creationsReq.wasSuccessful()) { List<GetCreationsResponse> resp = creationsReq.getResponseList(); creations = Lists.newArrayList(); for (GetCreationsResponse r : resp) { creations.add(new CreationRelations(r.getCreation(), r.getRelationships())); } MetaPagination pages = creationsReq.getMetadata(MetaPagination.class); for (int i = 2; i <= pages.getPageCount() && i <= 10; i++) { loadStep = CTBMod.lang.localize(stepUnloc, i, """" + pages.getPageCount()); creationsReq = new GetCreationsRequest(getUser().getId(), i, getAccessToken()); creationsReq.execute(); resp = creationsReq.getResponseList(); for (GetCreationsResponse r : resp) { creations.add(new CreationRelations(r.getCreation(), r.getRelationships())); } checkCancel(); }  creations = FluentIterable.from(creations).filter(new Predicate<Creation>() { @Override public boolean apply(Creation input) { return input.isApproved(); } }).toList();  creationList.setCreations(creations.toArray(new CreationRelations[creations.size()])); CTBMod.cache.setCreationCache(creations); } else { if (creationsReq.getRawResponse().getStatus() == 401) { logout(); header = CTBMod.lang.localize(""gui.creator.header.invalid""); } else { header = creationsReq.getResponse().getMessage(); } return; } }  checkCancel(); // Once we have all creation data, we can say we are ""logged in"" while the images download setState(State.LOGGED_IN, true);  for (CreationRelations c : creations) { DownloadableImage img = new DownloadableImage(c.getImage(), c); images.put(c, img); img.download(ImageType.list_view); checkCancel(); } } } catch (InterruptedException e) { CTBMod.logger.info(""Logging in canceled!""); // Clear the cache logout(); } catch (Exception e) { CTBMod.logger.error(""Logging in uncountered an unknown error."", e); header = ""Error: "" + e.getLocalizedMessage(); logout(); } finally { // Thread cleanup, erase all evidence we were here // This assures a fresh start if a new login is attempted loginReq = null; userReq = null; thread = null; cancelButton.enabled = true; } } "	0	1	0	0	0	0
"@Override public void onDateSet(DatePicker datePicker, int year, int month, int day) { textToEdit.setText(year+""-""+month+""-""+day, TextView.BufferType.EDITABLE);  } "	0	0	0	1	0	0
@Override public void onClick(View v) { if(holder.checkBox.isChecked() || PickerManager.getInstance().shouldAdd()) { holder.checkBox.setChecked(!holder.checkBox.isChecked(), true); } } 	0	0	0	0	0	1
@Override public int hashCode() { return getID(); } 	1	0	1	0	0	0
"public static void GUIInitStrings() { SwingUtilities.invokeLater(new Runnable() { @Override public void run() { F_root.setTitle(strings.getString(""title"") +"" - ""+ RefStrings.VERSION); ipLabel.setText(strings.getString(""server_address"")); portLabel.setText(strings.getString(""server_address"")); B_sync.setText(strings.getString(""go_button"")); B_sync.setToolTipText(strings.getString(""button_tooltip"")); tA_border_title.setTitle(strings.getString(""console_title"")); TA_info.repaint(); } }); } "	0	1	0	0	0	0
@Override public HttpClientRequest<I, O> addHeader(CharSequence name, Object value) { return new HttpClientRequestImpl<>(rawRequest.addHeader(name, value), client); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClientRequest<II, OO> addChannelHandlerLast(String name, Func0<ChannelHandler> handlerFactory) { return _copy(HttpClientRequestImpl.<OO>castClient(client.addChannelHandlerLast(name, handlerFactory))); } 	0	0	0	0	0	1
@Override public WebSocketRequest<O> requestWebSocketUpgrade() { return WebSocketRequestImpl.createNew(this); } 	0	0	0	0	0	1
@Override public HttpClientRequest<I, O> setMethod(HttpMethod method) { return new HttpClientRequestImpl<>(rawRequest.setMethod(method), client); } 	0	0	0	0	0	1
@Override public HttpClientRequest<I, O> setKeepAlive(boolean keepAlive) { return new HttpClientRequestImpl<>(rawRequest.setKeepAlive(keepAlive), client); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClientRequest<II, OO> addChannelHandlerLast(EventExecutorGroup group, String name, Func0<ChannelHandler> handlerFactory) { return _copy(HttpClientRequestImpl.<OO>castClient(client.addChannelHandlerLast(group, name, handlerFactory))); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClientRequest<II, OO> addChannelHandlerBefore(String baseName, String name, Func0<ChannelHandler> handlerFactory) { return _copy(HttpClientRequestImpl.<OO>castClient(client.addChannelHandlerBefore(baseName, name, handlerFactory)));    } 	0	0	0	0	0	1
public static <I, O> HttpClientRequest<I, O> create(final RawRequest<I, O> rawRequest, final TcpClient<?, HttpClientResponse<O>> client) { return new HttpClientRequestImpl<>(rawRequest, client); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClientRequest<II, OO> addChannelHandlerAfter(String baseName, String name, Func0<ChannelHandler> handlerFactory) { return _copy(HttpClientRequestImpl.<OO>castClient(client.addChannelHandlerAfter(baseName, name, handlerFactory))); } 	0	0	0	0	0	1
@Override public WebSocketRequest<O> version(int version) { WebSocketVersion webSocketVersion;  switch (version) { case 7: webSocketVersion = WebSocketVersion.V07; break; case 8: webSocketVersion = WebSocketVersion.V08; break; case 13: webSocketVersion = WebSocketVersion.V13; break; default: webSocketVersion = WebSocketVersion.UNKNOWN; break; } return new WebSocketRequestImpl<>(httpRequest.setHeader(SEC_WEBSOCKET_VERSION, version), subProtocolsRequested, webSocketVersion); } 	0	0	0	0	0	1
@Override public HttpClient<I, O> enableWireLogging(LogLevel wireLoggingLevel) { return _copy(client.enableWireLogging(wireLoggingLevel)); } 	0	0	0	0	0	1
@Override public HttpClient<I, O> secure(SSLEngine sslEngine) { return _copy(client.secure(sslEngine)); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClient<II, OO> addChannelHandlerLast(String name, Func0<ChannelHandler> handlerFactory) { return _copy(HttpClientImpl.<OO>castClient(client.addChannelHandlerLast(name, handlerFactory))); } 	0	0	0	0	0	1
@Override public HttpClientRequest<I, O> createPatch(String uri) { return createRequest(HttpMethod.PATCH, uri); } 	0	0	0	0	0	1
@Override public HttpClient<I, O> secure(Func1<ByteBufAllocator, SSLEngine> sslEngineFactory) { return _copy(client.secure(sslEngineFactory)); } 	0	0	0	0	0	1
@Override public <II, OO> HttpClient<II, OO> addChannelHandlerFirst(EventExecutorGroup group, String name, Func0<ChannelHandler> handlerFactory) { return _copy(HttpClientImpl.<OO>castClient(client.addChannelHandlerFirst(group, name, handlerFactory)) ); } 	0	0	0	0	0	1
"private ProductInstance createProductInstance(ProductRelease productRelease, VM vm, String vdc, List<Attribute> attributes) throws InvalidEntityException, AlreadyExistsEntityException {  ProductInstance instance = new ProductInstance();  Product product = null; try { product = productDao.load(productRelease.getProduct().getName()); } catch (EntityNotFoundException e) { product = new Product(productRelease.getProduct().getName(), productRelease.getProduct().getDescription()); } product.setAttributes(attributes);  productRelease.setProduct(product);  instance.setProductRelease(productRelease); instance.setVm(vm); instance.setVdc(vdc); instance.setStatus(Status.UNINSTALLED); instance.setName(vm.getFqn() + ""_"" + productRelease.getProduct().getName() + ""_"" + productRelease.getVersion());  instance = productInstanceDao.create(instance); return instance;  } "	1	0	1	1	0	0
"@Override public void updateSegment(OcelotSegment seg) { OkapiSegment okapiSeg = (OkapiSegment) seg; Segment unitPart = this.parser.getSegmentUnitPart(okapiSeg.eventNum); if (unitPart == null) { LOG.error(""Failed to find Okapi Unit Part associated with segment #""+okapiSeg.getSegmentNumber());  } else if (unitPart.isSegment()) { if (okapiSeg.hasOriginalTarget()) { FragmentVariant targetFrag = (FragmentVariant) okapiSeg.getTarget(); Fragment updatedOkapiFragment = targetFrag.getUpdatedOkapiFragment(unitPart.getTarget()); unitPart.setTarget(updatedOkapiFragment); manageRevision(this.parser.getSegmentEvent(okapiSeg.getSegmentNumber()), unitPart, parser.getTargetVersion(okapiSeg.eventNum)); }  updateITSLQIAnnotations(unitPart, okapiSeg);  if (!haveAddedOcelotProvAnnotation(unitPart, okapiSeg)) { updateITSProvAnnotations(unitPart, okapiSeg); }  FragmentVariant source = (FragmentVariant) okapiSeg.getSource(); source.updateSegmentAtoms(unitPart);  FragmentVariant target = (FragmentVariant) okapiSeg.getTarget(); target.updateSegmentAtoms(unitPart); target.setAtomsHighlightedText();  } else { LOG.error(""Unit part associated with Segment was not an Okapi Segment!""); LOG.error(""Failed to update Unit Part for segment #""+okapiSeg.getSegmentNumber()); } } "	0	1	0	0	0	0
protected void writeAdditionalObjects( GMLStreamWriter gmlStream, WfsXlinkStrategy additionalObjects, QName featureMemberEl, Version requestVersion ) throws XMLStreamException, UnknownCRSException, TransformationException {  Collection<GMLReference<?>> nextLevelObjects = additionalObjects.getAdditionalRefs(); XMLStreamWriter xmlStream = gmlStream.getXMLStream(); boolean wroteStartSection = false; while ( !nextLevelObjects.isEmpty() ) { Map<GMLReference<?>, GmlXlinkOptions> refToResolveState = additionalObjects.getResolveStates(); additionalObjects.clear(); for ( GMLReference<?> ref : nextLevelObjects ) { if ( isResolvable( ref ) ) { GmlXlinkOptions resolveState = refToResolveState.get( ref ); Feature feature = (Feature) ref; if ( !wroteStartSection ) { writeAdditionalObjectsStart( xmlStream, requestVersion ); wroteStartSection = true; } writeMemberFeature( feature, gmlStream, xmlStream, resolveState, featureMemberEl ); } } nextLevelObjects = additionalObjects.getAdditionalRefs(); } if ( wroteStartSection ) { writeAdditionalObjectsEnd( xmlStream, requestVersion ); } } 	0	1	0	0	0	0
"@Override public Pair<Integer, List<VoidDatasetsResultRow>> findDatasets(List<String> creators, List<String> subjects, String titleSubstr, boolean harvestedCheck, PagingRequest pagingRequest, SortingRequest sortingRequest) throws DAOException {  Bindings bindings = new Bindings();  StringBuilder sb = new StringBuilder(); sb.append(""PREFIX cr: <http://cr.eionet.europa.eu/ontologies/contreg.rdf#>\n""); sb.append(""PREFIX dcterms: <http://purl.org/dc/terms/>\n""); sb.append(""PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n""); sb.append(""PREFIX void: <http://rdfs.org/ns/void#>\n""); sb.append(""\n""); sb.append(""SELECT ?dataset ?label ?creator sql:group_concat(?subject,', ') AS ?subjects min(xsd:int(bound(?refreshed))) AS ?imported\n""); sb.append(""  WHERE {\n""); sb.append(""   ?dataset a void:Dataset ;\n""); sb.append(""     dcterms:title ?label ;\n""); sb.append(""     dcterms:creator ?ucreator .\n""); sb.append(""OPTIONAL { ?dataset void:dataDump _:dump.\n"" + ""_:dump cr:lastRefreshed ?refreshed }\n""); sb.append(""?ucreator rdfs:label ?creator \n"");  if (StringUtils.isBlank(titleSubstr)) { sb.append(""FILTER (LANG(?label) IN ('en',''))\n""); } else { sb.append(""FILTER (LANG(?label) IN ('en','') && regex(?label, ?titleF, \""i\""))\n""); bindings.setString(""titleF"", titleSubstr); }  if (harvestedCheck) { sb.append(""FILTER (bound(?refreshed))\n""); }  if (creators != null && !creators.isEmpty()) { sb.append(""  FILTER (?creator IN ("").append(variablesCSV(""crt"", creators.size())).append(""))\n""); for (int i = 0; i < creators.size(); i++) { bindings.setString(""crt"" + (i + 1), creators.get(i)); } }  // Virtuoso behaves differently when there is only one subject in the set. Then the language code matters. if (subjects != null && !subjects.isEmpty()) { sb.append(""  ?dataset dcterms:subject ?usubject .\n""); sb.append(""  ?usubject rdfs:label ?subject FILTER (LANG(?subject) IN ('en',''))\n""); sb.append(""  FILTER (STR(?subject) IN ("").append(variablesCSV(""sbj"", subjects.size())).append(""))\n""); for (int i = 0; i < subjects.size(); i++) { bindings.setString(""sbj"" + (i + 1), subjects.get(i)); } } else { sb.append(""  OPTIONAL {?dataset dcterms:subject ?usubject .\n""); sb.append(""           ?usubject rdfs:label ?subject FILTER (LANG(?subject) IN ('en','')) }\n""); } sb.append(""} GROUP BY ?dataset ?label ?creator\n""); if (sortingRequest != null && sortingRequest.getSortingColumnName() != null) { sb.append(""ORDER BY "" + sortingRequest.getSortOrder().toSQL() + ""(UCASE(str(?"" + sortingRequest.getSortingColumnName() + "")))\n""); } else { sb.append(""ORDER BY DESC(?imported) ?dataset\n""); } if (pagingRequest != null) { sb.append(""OFFSET "" + pagingRequest.getOffset() + ""\n""); sb.append(""LIMIT "" + pagingRequest.getItemsPerPage()); } List<VoidDatasetsResultRow> datasets = executeSPARQL(sb.toString(), bindings, new VoidDatasetsReader());  int rowCount = 0; if (datasets != null && !datasets.isEmpty()) { StringBuffer countQuery = new StringBuffer(); countQuery.append(""PREFIX cr: <http://cr.eionet.europa.eu/ontologies/contreg.rdf#>\n""); countQuery.append(""PREFIX dcterms: <http://purl.org/dc/terms/>\n""); countQuery.append(""PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n""); countQuery.append(""PREFIX void: <http://rdfs.org/ns/void#>\n""); countQuery.append(""\n""); countQuery.append(""SELECT (COUNT(*) AS ?total)\n""); countQuery.append(""WHERE {\n""); countQuery.append("" {\n""); countQuery.append("" SELECT ?dataset ?label ?creator sql:group_concat(?subject,', ') AS ?subjects min(xsd:int(bound(?refreshed))) AS ?imported\n""); countQuery.append(""  WHERE {\n""); countQuery.append(""   ?dataset a void:Dataset ;\n""); countQuery.append(""     dcterms:title ?label;\n""); countQuery.append(""     dcterms:creator ?ucreator .\n""); countQuery.append(""   ?ucreator rdfs:label ?creator .\n"");  if (StringUtils.isBlank(titleSubstr)) { countQuery.append(""   FILTER (LANG(?label) IN ('en',''))\n""); } else { countQuery.append(""   FILTER (LANG(?label) IN ('en','') && regex(?label, ?titleF, \""i\""))\n""); bindings.setString(""titleF"", titleSubstr); }  if (creators != null && !creators.isEmpty()) { countQuery.append(""  FILTER (?creator IN ("").append(variablesCSV(""crt"", creators.size())).append(""))\n""); for (int i = 0; i < creators.size(); i++) { bindings.setString(""crt"" + (i + 1), creators.get(i)); } }  // Virtuoso behaves differently when there is only one subject in the set. Then the language code matters. if (subjects != null && !subjects.isEmpty()) { countQuery.append(""  ?dataset dcterms:subject ?usubject .\n""); countQuery.append(""  ?usubject rdfs:label ?subject FILTER (LANG(?subject) IN ('en',''))\n""); countQuery.append(""  FILTER (STR(?subject) IN ("").append(variablesCSV(""sbj"", subjects.size())).append(""))\n""); for (int i = 0; i < subjects.size(); i++) { bindings.setString(""sbj"" + (i + 1), subjects.get(i)); } } else { countQuery.append(""  OPTIONAL {?dataset dcterms:subject ?usubject .\n""); countQuery.append(""           ?usubject rdfs:label ?subject FILTER (LANG(?subject) IN ('en','')) }\n""); } countQuery.append(""  }\n""); countQuery.append("" }\n""); countQuery.append("" }\n""); // countQuery.append(""} GROUP BY ?dataset ?label ?creator\n"");  rowCount = Integer.parseInt(executeUniqueResultSPARQL(countQuery.toString(), bindings, new SingleObjectReader<Object>()) .toString()); }  return new Pair<Integer, List<VoidDatasetsResultRow>>(rowCount, datasets); } "	0	0	0	0	0	1
@Override public Boolean delete(List<KubernetesList> lists) { for (KubernetesList list : lists) { for (HasMetadata item : list.getItems()) { ResourceHandler handler = (ResourceHandler) Handlers.get(item.getKind()); if (!handler.delete(client, config, namespace, item)) { return false; } } } return true; } 	0	1	0	0	0	0
public void storeAndTake(int runeId){ if(ctx.bank.opened()){ if(count(ESS_ID) != 0){ ctx.bank.close(); return; } if(ctx.bank.depositInventory()){ Condition.wait(new Callable<Boolean>(){ @Override public Boolean call() throws Exception { return count(runeId) == 0; } }, 250, 20); } if (ctx.bank.withdraw(ESS_ID, 28)){ Condition.wait(new Callable<Boolean>() { @Override public Boolean call() throws Exception { return count(ESS_ID) > 0; } }, 250, 20); recordTime(); } ctx.bank.close(); } else { if(ctx.bank.inViewport()) { if(ctx.bank.open()){ Condition.wait(new Callable<Boolean>(){ @Override public Boolean call() throws Exception { return ctx.bank.opened(); } }, 250, 20); } } } } 	0	0	0	0	0	1
@Override public FeatureAnnotationSymbol getPointAnnotationSymbol() { if (winkel == null) { return new FeatureAnnotationSymbol(ARROW_NULL.getImage()); } else { final BufferedImage rotatedArrow = ImageUtil.rotateImage(ARROW, -winkel); final FeatureAnnotationSymbol symb = new FeatureAnnotationSymbol(rotatedArrow); symb.setSweetSpotX(0.5); symb.setSweetSpotY(0.5); return symb; } } 	0	1	0	0	0	0
"@Override public void run() {  ImmutableList.Builder<CodegenConfigurator> builder = ImmutableList.builder(); List<String> langList = ImmutableList.copyOf(Splitter.on("","").trimResults().split(langs)); List<String> configFiles; if(configFile != null) { configFiles = ImmutableList.copyOf(Splitter.on("","").trimResults().split(configFile)); } else { configFiles = ImmutableList.of(); } for (int i = 0; i < langList.size(); i++) { String lang = langList.get(i); String config = configFiles.size() >= i ? configFiles.get(i) : null;  CodegenConfigurator configurator; if(config == null) { configurator = new CodegenConfigurator(); } else { configurator = CodegenConfigurator.fromFile(config); }  if (isNotEmpty(spec)) { configurator.setInputSpec(spec); }  if (isNotEmpty(lang)) { configurator.setLang(lang); }  if (isNotEmpty(output)) { configurator.setOutputDir(output); }  if (isNotEmpty(apiPackage)) { configurator.setApiPackage(apiPackage); }  if (isNotEmpty(modelPackage)) { configurator.setModelPackage(modelPackage); } setSystemProperties(configurator); builder.add(configurator); }  try { MarkdownBuilder build = new SlateDocumentGenerator(builder.build()).build(); File dir = new File(output); if (!dir.exists()) { dir.mkdirs(); } else if(dir.isFile()) { throw new IllegalArgumentException(""Output must be a directory""); } File file = new File(dir, ""slate.md""); file.createNewFile(); FileOutputStream fileOutputStream = new FileOutputStream(file); fileOutputStream.write(build.toString().getBytes(Charset.forName(""UTF-8""))); fileOutputStream.close(); } catch (IOException e) { throw Throwables.propagate(e); } } "	1	1	1	1	0	0
public View.OnClickListener onRegisterClicked() { return new View.OnClickListener() { @Override public void onClick(View view) { final Context context = accountRegisterView.getContext(); final String alias = accountRegisterView.getAlias();  if (alias.isEmpty()) { accountRegisterView.showError( ErrorMessageFactory.create(context, new RequiredArgumentException()) ); return; }  accountRegisterView.showProgressDialog();  KeyPair keyPair = KeyGenerator.createKeyPair(); keyPair.save(context); register(keyPair, alias); } }; } 	0	0	0	0	0	1
"public void testFeatureWithGeometryCollectionRead2() throws Exception { String json = strip(""{""+ ""   'type':'Feature',""+ ""   'geometry':{""+ ""      'type':'GeometryCollection',""+ ""      'geometries':[""+ ""         {""+ ""            'type':'Polygon',""+ ""            'coordinates':[[[-28.1107, 142.998], [-28.1107, 148.623], [-30.2591, 148.623], [-30.2591, 142.998], [-28.1107, 142.998]]]""+ ""         },""+ ""         {""+ ""            'type':'Polygon',""+ ""            'coordinates':[[[-27.1765, 142.998], [-25.6811, 146.4258], [-27.1765, 148.5352], [-27.1765, 142.998]]]""+ ""         }""+ ""     ]""+ ""   },""+ ""   'properties':{""+ ""      'name':'',""+ ""      'caseSN':'x_2000a',""+ ""      'siteNum':2""+ ""   },""+ ""   'id':'fid-397164b3_13880d348b9_-7a5c'""+ ""}"");  SimpleFeature f1 = fjson.readFeature(json); assertNotNull(f1.getDefaultGeometry());  GeometryCollection gc = (GeometryCollection) f1.getDefaultGeometry(); assertEquals(2, gc.getNumGeometries());  WKTReader wkt = new WKTReader(); assertTrue(wkt.read(""POLYGON ((-28.1107 142.998, -28.1107 148.623, -30.2591 148.623, -30.2591 142.998, -28.1107 142.998))"").equals(gc.getGeometryN(0))); assertTrue(wkt.read(""POLYGON((-27.1765 142.998, -25.6811 146.4258, -27.1765 148.5352, -27.1765 142.998))"").equals(gc.getGeometryN(1)));  assertEquals(""fid-0"", f1.getID()); assertEquals("""", f1.getAttribute(""name"")); assertEquals(""x_2000a"", f1.getAttribute(""caseSN"")); assertEquals(2l, f1.getAttribute(""siteNum""));   } "	0	0	0	0	0	1
"void didClose(DidCloseTextDocumentParams params){ try { ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable() { @Override public void run(IProgressMonitor monitor) throws CoreException { handleClosed(params); } }, new NullProgressMonitor()); } catch (CoreException e) { JavaLanguageServerPlugin.logException(""Handle document close "", e); } } "	0	0	0	0	0	1
"void didOpen(DidOpenTextDocumentParams params){ try { ResourcesPlugin.getWorkspace().run(new IWorkspaceRunnable() { @Override public void run(IProgressMonitor monitor) throws CoreException { handleOpen(params); } }, new NullProgressMonitor()); } catch (CoreException e) { JavaLanguageServerPlugin.logException(""Handle document open "", e); } } "	0	0	0	0	0	1
"@Override public void onCreate() { super.onCreate();   RoverConfig config = new RoverConfig.Builder() .setApplicationToken(""6c546189dc45df1293bddc18c0b54786"") .build();  Rover.setup(this, config);  } "	0	0	0	0	0	1
"@Test public void test_1_4_json_format() throws JsonProcessingException, IOException { String json = new JSONObject().put(""name"", ""test"").put(""managementUrl"", ""http://test"") .put(""healthUrl"", ""http://health"").put(""serviceUrl"", ""http://service"") .put(""statusInfo"", new JSONObject().put(""status"", ""UNKNOWN"")).toString(); Application value = objectMapper.readValue(json, Application.class); assertThat(value.getName(), is(""test"")); assertThat(value.getManagementUrl(), is(""http://test"")); assertThat(value.getHealthUrl(), is(""http://health"")); assertThat(value.getServiceUrl(), is(""http://service"")); } "	0	0	0	0	0	1
"@Test public void test_onlyHealthUrl() throws JsonProcessingException, IOException { String json = new JSONObject().put(""name"", ""test"").put(""healthUrl"", ""http://test"") .toString(); Application value = objectMapper.readValue(json, Application.class); assertThat(value.getName(), is(""test"")); assertThat(value.getHealthUrl(), is(""http://test"")); assertThat(value.getManagementUrl(), nullValue()); assertThat(value.getServiceUrl(), nullValue()); } "	0	0	0	0	0	1
"public void crearUsuario(MouseEvent event){ if(txtNombreUsuario.getText().length()<8||txtCorreoUsuario.getText().length()==0||pflContrasenya.getText().length()<8||pfdRepetirContrasenya.getText().length()<8||!pflContrasenya.getText().equals(pfdRepetirContrasenya.getText())) { datosCorrectos=false; btnCrear.setDisable(true); Alert alert = new Alert(AlertType.INFORMATION); alert.setTitle(""Parece que falla algo"");  alert.setContentText(""Parece que hay algún problema con los datos. Por favor, revise los datos antes de registrarse.""); alert.initModality(Modality.APPLICATION_MODAL);   alert.initOwner((Stage) ((Node) event.getSource()).getScene().getWindow()); alert.showAndWait(); chkTerminos.setSelected(false);  } else{ try{ UserDTO udto= new UserDTO(txtNombreUsuario.getText(), txtCorreoUsuario.getText(), ImgImagenUsuario, userDate, 0 , 0, 0);  Alert alert = new Alert(AlertType.CONFIRMATION);  alert.setTitle(""Crear nuevo usuario"");  alert.setHeaderText(""¿Está seguro?"");  alert.setContentText(""¿Está seguro de que desea crear el anterior usuario?"");   alert.initModality(Modality.APPLICATION_MODAL); //Añade 'dueño'. (=La ventana sobre la cual se va a posicionar y la cual bloqueará) alert.initOwner((Stage) ((Node) event.getSource()).getScene().getWindow());  Optional<ButtonType> result = alert.showAndWait();  if (result.get() == ButtonType.OK){  boolean finalResult = com.pasapalabra.game.service.ServiceLocator.createUser(udto, pflContrasenya.getText()); if(finalResult){ Alert alert2 = new Alert(AlertType.INFORMATION);  alert2.setTitle(""Usuario creado con éxito"");  alert2.setHeaderText(""Éxito en la operación"");  alert2.setContentText(""Se ha creado el usuario con éxito"");   alert2.initModality(Modality.APPLICATION_MODAL); //Añade 'dueño'. (=La ventana sobre la cual se va a posicionar y la cual bloqueará) alert2.initOwner((Stage) ((Node) event.getSource()).getScene().getWindow());  alert2.showAndWait();   com.pasapalabra.game.utilities.WindowUtilities.windowTransition(""LogIn"", event); } else{  Alert alert2 = new Alert(AlertType.INFORMATION);  alert2.setTitle(""Datos existentes"");  alert2.setHeaderText(""El usuario ya existe, por favor, introduzca otro usuario"");  alert2.setContentText(""Se ha creado el usuario con éxito"");   alert2.initModality(Modality.APPLICATION_MODAL); //Añade 'dueño'. (=La ventana sobre la cual se va a posicionar y la cual bloqueará) alert2.initOwner((Stage) ((Node) event.getSource()).getScene().getWindow());  alert2.showAndWait();  //userMailElegido.show(txtCorreoUsuario, Side.BOTTOM, 0, 0);  chkTerminos.setSelected(false);  btnCrear.setDisable(true);  userNameElegido.show(txtNombreUsuario, Side.BOTTOM, 0, 0); } } }catch(Exception a){ Alert alert2 = new Alert(AlertType.ERROR);  alert2.setTitle(""Error al tramitar la creación de usuario"");  alert2.setHeaderText(""Error cuando se intentó crear el usuario"");  alert2.setContentText(""Se ha produciod un error cuando intentaba crear su usario, por favor, revise la información y cambielá si es necesario"");   alert2.initModality(Modality.APPLICATION_MODAL); //Añade 'dueño'. (=La ventana sobre la cual se va a posicionar y la cual bloqueará) alert2.initOwner((Stage) ((Node) event.getSource()).getScene().getWindow());  alert2.showAndWait();  }  }  } "	0	0	0	0	0	1
"public OrderEntity submit(Order order) { // set role order.setRole(SecurityContext.getInstance().getRole()); ServiceTypeEntity serviceType = serviceTypeService.find(order.getServiceTypeId()); // compute order no. order.setOrderNo(orderService.computeOrderNo(order.getRole(), serviceType.getCode())); OrderEntity orderEntity = save(order);  boolean hasDelivery = false; List<ServiceItem> serviceItems = order.getServiceItems(); for (ServiceItem serviceItem : serviceItems) { if (serviceItem.getServiceSubtypeId() == Integer.valueOf(env.getProperty(""service.subtype.delivery.id""))) { hasDelivery = true; break; } }  Map<String, Object> variableMap = new HashMap<>(); variableMap.put(""loadingType"", orderEntity.getLoadingType()); variableMap.put(""hasDelivery"", hasDelivery); variableMap.put(""orderOwner"", orderEntity.getUpdatedBy()); bpmService.startProcess(orderEntity.getUpdatedBy(), orderEntity.getId(), variableMap); return orderEntity; } "	0	1	0	0	0	0
"@Override public String upcall(director_smartptr.FooBar fooBarPtr) { return ""override;"" + fooBarPtr.FooBarDo(); } "	0	0	0	0	0	1
"public String changePassword() throws Exception { String result = SUCCESS;  // check that the user is logged in ActionContext context = ActionContext.getContext(); user = getLoggedInUser(context); if (user == null) { return LOGIN; }  if (Utility.isAdmin(user.getUserName())) { userIsAdmin = true; }  String realPasswordHash = user.getPassword(); if (!(Utility.encrypt(oldPassword).equals(realPasswordHash))) { errorMessages.add(""You entered your old password incorrectly. "" + ""Your password was not changed. Please try again.""); }  if (!errorMessages.isEmpty()) { errorMessages.add(0, ""Error changing password.""); return ERROR; }  // Change user object to have new password logger.debug(""Changing user password""); user.setPassword(Utility.encrypt(newPassword));  // Commit changes  Session s = HibernateUtil.getSession(); Transaction tx = null;  try { tx = s.beginTransaction(); s.saveOrUpdate(user); tx.commit(); } catch (RuntimeException e) { if (tx != null) { tx.rollback(); } logger.error(e); } finally { s.close(); }  errorMessages.add(""Password change successful!""); return result; } "	0	0	0	0	0	1
public File getItemNameFile() { return itemNameFile; } 	0	0	0	0	0	1
"public void approveSpecfiedNumberOfPartimers(int numPartimersToApporve, String hoEmail) { for(int i =2; i<=numPartimersToApporve; i++) { System.out.println(""Beginnging to Approve Partimer: "" + i + ""- for Job created by: ""+ hoEmail); selectPartimerCheckbox(String.valueOf(i)); openActionsListPopup(String.valueOf(i)); clickOnApprove(String.valueOf(i)); System.out.println(""Partimer Approved Sucessfully""); }  } "	1	0	1	1	0	0
"private void updateLighting(Vector3f sunDirection, Vector3f moonDirection) { assert sunDirection != null; assert sunDirection.isUnitVector() : sunDirection; if (moonDirection != null) { assert moonDirection.isUnitVector() : moonDirection; }  float sineSolarAltitude = sunDirection.y; float sineLunarAltitude; if (moonDirection != null) { sineLunarAltitude = moonDirection.y; } else { sineLunarAltitude = -1f; } updateObjectColors(sineSolarAltitude, sineLunarAltitude); /* * Determine the world direction to the main light source. */ boolean moonUp = sineLunarAltitude >= 0f; boolean sunUp = sineSolarAltitude >= 0f; float moonWeight = getMoonIllumination(); Vector3f mainDirection; if (sunUp) { mainDirection = sunDirection; } else if (moonUp && moonWeight > 0f) { assert moonDirection != null; mainDirection = moonDirection; } else { mainDirection = starlightDirection; } assert mainDirection.isUnitVector() : mainDirection; assert mainDirection.y >= 0f : mainDirection; /* * Determine the base color (applied to horizon haze, bottom dome, and * viewport backgrounds) using the sun's altitude: *  + sunlight when ssa >= 0.25, *  + twilight when ssa = 0, *  + blend of moonlight and starlight when ssa <= -0.04, * with linearly interpolated transitions. */ ColorRGBA baseColor; if (sunUp) { float dayWeight = FastMath.saturate(sineSolarAltitude / 0.25f); baseColor = MyColor.interpolateLinear( dayWeight, twilight, sunLight); } else { ColorRGBA blend; if (moonUp && moonWeight > 0f) { blend = MyColor.interpolateLinear(moonWeight, starLight, moonLight); } else { blend = starLight; } float nightWeight = FastMath.saturate(-sineSolarAltitude / 0.04f); baseColor = MyColor.interpolateLinear(nightWeight, twilight, blend); } SkyMaterial topMaterial = getTopMaterial(); topMaterial.setHazeColor(baseColor); Material bottomMaterial = getBottomMaterial(); if (bottomMaterial != null) { bottomMaterial.setColor(""Color"", baseColor); }  ColorRGBA cloudsColor = updateCloudsColor(baseColor, sunUp, moonUp); /* * Determine what fraction of the main light passes through the clouds. */ float transmit; if (cloudModulationFlag && (sunUp || moonUp && moonWeight > 0f)) { /* * Modulate light intensity as clouds pass in front. */ Vector3f intersection = intersectCloudDome(mainDirection); DomeMesh cloudsMesh = getCloudsMesh(); Vector2f texCoord = cloudsMesh.directionUV(intersection); SkyMaterial cloudsMaterial = getCloudsMaterial(); transmit = cloudsMaterial.getTransmission(texCoord);  } else { transmit = 1f; } /* * Determine the color and intensity of the main light. */ ColorRGBA main; if (sunUp) { /* * By day, the main light has the base color, modulated by * clouds and the cube root of the sine of the sun's altitude. */ float sunFactor = transmit * MyMath.cubeRoot(sineSolarAltitude); main = baseColor.mult(sunFactor);  } else if (moonUp) { /* * By night, the main light is a blend of moonlight and starlight, * with the moon's portion modulated by clouds and the moon's phase. */ float moonFactor = transmit * moonWeight; main = MyColor.interpolateLinear(moonFactor, starLight, moonLight);  } else { main = starLight.clone(); } /* * The ambient light color is based on the clouds color; * its intensity is modulated by the ""slack"" left by * strongest component of the main light. */ float slack = 1f - MyMath.max(main.r, main.g, main.b); assert slack >= 0f : slack; ColorRGBA ambient = cloudsColor.mult(slack); /* * Compute the recommended shadow intensity as the fraction of * the total directional light. */ float mainAmount = main.r + main.g + main.b; float ambientAmount = ambient.r + ambient.g + ambient.b; float totalAmount = mainAmount + ambientAmount; assert totalAmount > 0f : totalAmount; float shadowIntensity = FastMath.saturate(mainAmount / totalAmount); /* * Determine the recommended bloom intensity using the sun's altitude. */ float bloomIntensity = 6f * sineSolarAltitude; bloomIntensity = FastMath.clamp(bloomIntensity, 0f, 1.7f);  updater.update(ambient, baseColor, main, bloomIntensity, shadowIntensity, mainDirection); } "	0	0	0	0	0	1
@Override public void onSearchButtonClick() { if (mMyBusMap.getStartLocationMarker().getMapMarker() == null || mMyBusMap.getEndLocationMarker().getMapMarker() == null) { return; } if (DeviceRequirementsChecker.isNetworkAvailable(this)) { clearBusRouteOnMap(); showBottomSheetResults(false); showProgressDialog(getString(R.string.toast_searching)); ServiceFacade.getInstance().searchRoutes(mMyBusMap.getStartLocationMarker().getMapMarker().getPosition(), mMyBusMap.getEndLocationMarker().getMapMarker().getPosition(), this); } else { Toast.makeText(this, R.string.toast_no_internet, Toast.LENGTH_LONG).show(); } //when performing a search remove all the favorites in the map mMyBusMap.removeAllFavoritesMarkers(); } 	0	0	0	0	0	1
"public void executeGroovy(File script) { try { String scriptContent = getScriptContent(script); GroovyShell shell = new GroovyShell(); for (Map.Entry<String, String> entry : variables.entrySet()) { shell.setVariable(entry.getKey(), entry.getValue()); } shell.setVariable(""out"", listener.getLogger()); shell.setVariable(""manager"", manager); shell.evaluate(scriptContent); } catch (MissingPropertyException e) { listener.getLogger().println(""Failed to execute: "" + script.getName() + "", "" + e.getMessage()); } catch (Throwable e) { e.printStackTrace(); listener.getLogger().println(""Failed to execute: "" + script.getName() + "", "" + e.getMessage()); } } "	0	1	0	0	0	0
@Override public void onMenuItemClickListener(View menuView, DigitalAsset project, int position) { setAsset(project); PopupMenu popupMenu = new PopupMenu(getActivity(), menuView); MenuInflater inflater = popupMenu.getMenuInflater(); inflater.inflate(R.menu.main, popupMenu.getMenu()); popupMenu.setOnMenuItemClickListener(MainFragment.this); popupMenu.show(); } 	0	1	0	0	0	0
public Fluent returns(Function<String, Void> checker) throws ParseException { final Ast.Program program = parseProgram(pig); final PigRelBuilder builder = PigRelBuilder.create(PigRelBuilderTest.config().build()); final StringWriter sw = new StringWriter(); new CalciteHandler(builder, sw).handle(program); checker.apply(sw.toString()); return this; } 	0	1	0	0	0	0
public Fluent parseContains(String expected) throws ParseException { final Ast.Program program = parseProgram(pig); assertThat(Ast.toString(program), is(expected)); return this; } 	0	1	0	0	0	0
public Fluent explainContains(String expected) throws ParseException { final Ast.Program program = parseProgram(pig); final PigRelBuilder builder = PigRelBuilder.create(PigRelBuilderTest.config().build()); new Handler(builder).handle(program); assertThat(RelOptUtil.toString(builder.peek()), is(expected)); return this; } 	0	1	0	0	0	0
"@Override public Transport createTransport(EduDocument message) { final ServiceRecord primaryServiceRecord = serviceRegistryLookup.getPrimaryServiceRecord(message.getReceiverOrgNumber()); primaryServiceRecord.getServiceIdentifier();  Optional<ServiceRecord> serviceRecord = Optional.of(primaryServiceRecord);  Optional<Transport> transport = serviceRecord.filter(isServiceIdentifier(""edu"")).map(s -> new AltinnTransport(s.getEndPointURL())); if(transport.isPresent()) { transport = serviceRecord.filter(isServiceIdentifier(""post"")).map(s -> new PostVirksomhetTransport(s.getEndPointURL())); } return transport.orElseThrow(() -> new RuntimeException(""Failed to create transport"")); } "	1	1	1	1	0	0
@Override public void getPeople(int startIndex, int viewSize, List<String> categories, AsyncCallback<People> async) { List<Person> flatData = new ArrayList<>(); if(categories == null || categories.isEmpty()) { // Load all data for(String category : FakePersonService.categories) { flatData.addAll(peopleMap.get(category)); } } else { // Load data by categories for (String category : categories) { for (Person person : peopleMap.get(category)) { flatData.add(person); } } }  People people = new People(); for(int i = startIndex; i < (startIndex + viewSize); i++) { try { people.add(flatData.get(i)); } catch (IndexOutOfBoundsException e) { // ignored. } } people.setAbsoluteTotal(flatData.size()); // Fake a delay for the demo new Timer() { @Override public void run() { async.onSuccess(people); } }.schedule(Math.min(200, Random.nextInt(500))); } 	1	1	1	0	1	0
private void authenticatedPost(String method, Object request) throws IOException { this.authenticatedPost(method, request, (Class) null); } 	0	0	0	0	0	1
protected void crateCall(long[] args) { int i = 2;  FunctionType method = (FunctionType) types.get(args[i++]);  int target = getIndex(args[i++]); int[] arguments = new int[args.length - i]; int j = 0; while (i < arguments.length) { arguments[j++] = getIndex(args[i++]); }  Type type = method.getReturnType();  code.createCall(type, target, arguments);  if (type != MetaType.VOID) { symbols.add(type); } } 	1	0	1	1	0	0
@Before public void setUp() throws Exception { server.executeList(schemaSQL); this.schema = new SchemaCapturer(server.getConnection()).capture(); this.binlogPosition = BinlogPosition.capture(server.getConnection()); this.schemaStore = new SchemaStore(server.getConnection(), this.schema, binlogPosition); } 	0	1	0	0	0	0
"@SuppressWarnings(""unchecked"") public static Object getBuild( Object context ) throws Exception{ BuildStage1Result res = buildStage1( (Boolean) get(context, ""cbtHasChangedCompat""), (Long) get(context, ""startCompat""), ((File) get(context, ""cache"")).toString() + ""/"", ((File) get(context, ""cbtHome"")).toString(), ((File) get(context, ""compatibilityTarget"")).toString() + ""/"", new ClassLoaderCache2<ClassLoader>( (ConcurrentHashMap<String,Object>) get(context, ""permanentKeys""), (ConcurrentHashMap<Object,ClassLoader>) get(context, ""permanentClassLoaders"") ) ); return res .classLoader .loadClass(""cbt.Stage1"") .getMethod( ""getBuild"", Object.class, Boolean.class ) .invoke(null, context, res.changed); } "	0	0	0	0	0	1
"public static int runMain(String cls, String[] args, ClassLoader cl, SecurityManager defaultSecurityManager) throws Exception{ try{ System.setSecurityManager( new TrapSecurityManager() ); cl.loadClass(cls) .getMethod(""main"", String[].class) .invoke( null, (Object) args); return 0; }catch( InvocationTargetException exception ){ Throwable cause = exception.getCause(); if(cause instanceof TrappedExitCode){ return ((TrappedExitCode) cause).exitCode; } throw exception; } finally { System.setSecurityManager(defaultSecurityManager); } } "	0	0	0	0	0	1
@Override public boolean onOptionsItemSelected(MenuItem item) { int id = item.getItemId();  //noinspection SimplifiableIfStatement if (id == R.id.action_reset) { physicsRelativeLayout.getPhysicsHelper().resetPhysics(); return true; }  return super.onOptionsItemSelected(item); } 	0	1	0	0	0	0
"private static void convertExtendedSifToSifGzipped(String extSifArchiveName, String sifArchiveName) throws IOException { if((new File(sifArchiveName)).exists()) { LOG.info(""create-downloads: skip for existing "" + sifArchiveName); return; }  LOG.info(""create-downloads: generating new "" + sifArchiveName); BufferedReader reader = new BufferedReader(new InputStreamReader((new GZIPInputStream(new FileInputStream(extSifArchiveName))))); OutputStreamWriter writer = new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(sifArchiveName))); while(reader.ready()) { String line = reader.readLine(); //stop at the first blank line (because next come nodes with attributes) if(line.isEmpty()) break; writer.write(line + '\n'); } reader.close(); writer.close(); } "	1	0	1	0	0	0
"private Component createFullName() { TextField field = new TextField(); field.focus(); return configureField(field, ""Full name"", binding -> binding .withValidator(new NotEmptyValidator<String>( ""Full name may not be empty"")) .withStatusChangeHandler(this::handleFullNameStatusChange) .bind(Person::getFullName, Person::setFullName)); } "	0	0	0	0	0	1
"@Test public void testGroupingId() { sql(""select deptno, grouping_id(deptno) from emp group by deptno"").ok(); sql(""select deptno / 2, grouping_id(deptno / 2),\n"" + "" ^grouping_id(deptno / 2, empno)^\n"" + ""from emp group by deptno / 2, empno"") .ok(); sql(""select deptno / 2, ^grouping_id()^\n"" + ""from emp group by deptno / 2, empno"") .fails( ""Invalid number of arguments to function 'GROUPING_ID'. Was expecting 1 arguments""); sql(""select deptno, grouping_id(^empno^) from emp group by deptno"") .fails(""Expression 'EMPNO' is not being grouped""); sql(""select deptno, grouping_id(^deptno + 1^) from emp group by deptno"") .fails(""Argument to GROUPING_ID operator must be a grouped expression""); sql(""select deptno, grouping_id(emp.^xxx^) from emp"") .fails(""Column 'XXX' not found in table 'EMP'""); sql(""select deptno, ^grouping_id(deptno)^ from emp"") .fails(""GROUPING_ID operator may only occur in an aggregate query""); sql(""select deptno, sum(^grouping_id(deptno)^) over () from emp"") .fails(""GROUPING_ID operator may only occur in an aggregate query""); sql(""select deptno from emp group by deptno having grouping_id(deptno) < 5"") .ok(); sql(""select deptno from emp group by deptno order by grouping_id(deptno)"") .ok(); sql(""select deptno as xx from emp group by deptno order by grouping_id(xx)"") .ok(); sql(""select deptno as empno from emp\n"" + ""group by deptno order by grouping_id(empno)"") .ok(); sql(""select 1 as deptno from emp\n"" + ""group by deptno order by grouping_id(^deptno^)"") .fails(""Argument to GROUPING_ID operator must be a grouped expression""); sql(""select deptno from emp group by deptno\n"" + ""order by grouping_id(emp.deptno)"") .ok(); sql(""select ^deptno^ from emp group by empno order by grouping_id(deptno)"") .fails(""Expression 'DEPTNO' is not being grouped""); sql(""select deptno from emp order by ^grouping_id(deptno)^"") .fails(""GROUPING_ID operator may only occur in an aggregate query""); sql(""select deptno from emp where ^grouping_id(deptno)^ = 1"") .fails(""GROUPING_ID operator may only occur in an aggregate query""); sql(""select deptno from emp where ^grouping_id(deptno)^ = 1\n"" + ""group by deptno"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); sql(""select deptno from emp group by deptno, ^grouping_id(deptno)^"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); sql(""select deptno from emp\n"" + ""group by grouping sets(deptno, ^grouping_id(deptno)^)"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); sql(""select deptno from emp\n"" + ""group by cube(empno, ^grouping_id(deptno)^)"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); sql(""select deptno from emp\n"" + ""group by rollup(empno, ^grouping_id(deptno)^)"") .fails( ""GROUPING_ID operator may only occur in SELECT, HAVING or ORDER BY clause""); } "	0	0	0	0	0	1
@Override public boolean equals(Object obj) { boolean isEqual = (obj == this); if (!isEqual && (obj instanceof PassthroughClientDescriptor)) { PassthroughClientDescriptor other = (PassthroughClientDescriptor) obj; // We can use instance compare, here, on the sender. isEqual = (other.sender == this.sender) && (other.clientInstanceID == this.clientInstanceID); } return isEqual; } 	0	0	0	0	0	1
"public static void mergeStandardFiles(String[] args) throws IOException, SQLException, XmlPullParserException { BinaryMerger in = new BinaryMerger(); String pathRepoToRegionsXML = args[0]; String pathWithGeneratedMapZips = args[1]; String pathToPutJointFiles = args[2]; boolean mapFiles = args.length > 3 && args[3].equals(""--map""); CountryRegion world = new CountryOcbfGeneration().parseRegionStructure(pathRepoToRegionsXML); Iterator<CountryRegion> it = world.iterator(); while(it.hasNext()) { CountryRegion cr = it.next(); if((cr.jointMap && mapFiles) || (cr.jointRoads && !mapFiles)) { List<CountryRegion> list = cr.getChildren(); List<String> sargs = new ArrayList<String>(); String ext = ""_2"" + (mapFiles ? "".obf"" : "".road.obf""); String targetFileName = Algorithms.capitalizeFirstLetterAndLowercase(cr.getDownloadName()) + ext; sargs.add(targetFileName); sargs.add(""--address""); sargs.add(""--poi""); for (CountryRegion reg : list) { sargs.add(pathWithGeneratedMapZips + reg.getDownloadName() + ext + "".zip""); } log.info(""Merge file with arguments: "" + sargs); in.merger(sargs.toArray(new String[sargs.size()])); new File(targetFileName).renameTo(new File(pathToPutJointFiles, targetFileName)); } } } "	0	1	0	0	0	0
"public void addRepeat(String expression) { Matcher matcher = NGREPEAT_PATTERN.matcher(expression); if (matcher.find()) { String lhs = matcher.group(1); String rhs = matcher.group(2);  matcher = NGREPEAT_LHS_PATTERN.matcher(lhs); if (matcher.find()) { String valueIdentifier = matcher.group(3) != null ? matcher .group(3) : matcher.group(1); String keyIdentifier = matcher.group(2);  JsonObject repeat = new JsonObject(); repeat.add(""repeat"", rhs); if (keyIdentifier != null) { getProps().add(keyIdentifier, repeat); } if (valueIdentifier != null) { getProps().add(valueIdentifier, repeat); } } } } "	0	1	0	0	0	0
public void setCategory(ProjectCategory category) { this.category = category; } 	0	0	0	0	0	1
@Override public int getBasicRailMetadata(EntityMinecart cart) { int meta = tileEntity.getBlockMetadata(); if (cart != null && isSwitched()) { if (meta == EnumTrackMeta.NORTH_SOUTH.ordinal()) { if (isMirrored()) { if (reversed) { meta = EnumTrackMeta.WEST_SOUTH_CORNER.ordinal(); } else { meta = EnumTrackMeta.WEST_NORTH_CORNER.ordinal(); } } else { if (reversed) { meta = EnumTrackMeta.EAST_NORTH_CORNER.ordinal(); } else { meta = EnumTrackMeta.EAST_SOUTH_CORNER.ordinal(); } } } else if (meta == EnumTrackMeta.EAST_WEST.ordinal()) { if (isMirrored()) { if (reversed) { meta = EnumTrackMeta.WEST_NORTH_CORNER.ordinal(); } else { meta = EnumTrackMeta.EAST_NORTH_CORNER.ordinal(); } } else { if (reversed) { meta = EnumTrackMeta.EAST_SOUTH_CORNER.ordinal(); } else { meta = EnumTrackMeta.WEST_SOUTH_CORNER.ordinal(); } } } } return meta; } 	0	1	0	0	0	0
public void switchToAddProblemFragment() { if (addProblemFragment == null) { addProblemFragment = new AddProblemFragment(); }  fragmentTransaction = fragmentManager.beginTransaction(); fragmentTransaction.addToBackStack(null);  fragmentTransaction.add(R.id.content_frame, addProblemFragment); fragmentTransaction.commit(); } 	0	0	0	0	0	1
public void disableAddProblemMode(){ addproblemModeIsEnabled = false; setMarkerClickType(0);  addProblemFragment = null; mapClusterer.deleteMarker();  addProblemSnackbar.dismiss(); fabAddProblem.setImageResource(R.drawable.ic_location_on_white_24dp); } 	0	0	0	0	0	1
"public static Matrix Multiply(Matrix a, Matrix b){ Matrix out = MatrixFactory.create(a.row, b.column, ""complex""); for(int i=0; i<a.row; i++){ for(int j=0; j<b.column; j++){ double reSum = 0.0; double imSum = 0.0; for(int k=0; k<b.row; k++){ reSum+=a.getReElement(i, k)*b.getReElement(k,j); reSum-=a.getImElement(i, k)*b.getImElement(k, j); imSum+=a.getImElement(i, k)*b.getReElement(k,j); imSum+=a.getReElement(i, k)*b.getImElement(k, j); } out.setReElement(i, j, reSum); out.setImElement(i, j, imSum); } } return out; } "	0	0	0	0	0	1
"public static void setKeyStoreParams() { String keyStore = CONFIG_PATH + File.separator + ""bre"" + File.separator + ""security"" + File.separator + ""wso2carbon.jks""; System.setProperty(""Security.KeyStore.Location"", keyStore); System.setProperty(""Security.KeyStore.Password"", ""wso2carbon""); } "	0	0	0	0	0	1
@Override public void controlResized(ControlEvent e) { int width = Math.max(compositeChart.getSize().x - 40, 1); numberOfTicks = Math.max(width / TIMESTAMP_MAX_SIZE, 1); refresh(false, false); } 	1	0	1	0	0	0
private void setupMA() { adVideoPlayerPlayback = (VideoPlayerWithAdPlayback) findViewById(R.id.videoplayer_with_ad_playback); adVideoPlayerPlayback.setEventEmitter(eventEmitter);  // 広告の再生タイミングになるとemitされます // 広告のロードを開始して下さい eventEmitter.on(MAAdPlayerEvent.ADS_REQUEST_FOR_VIDEO, new EventListener() { @Override public void processEvent(Event event) { Log.d(TAG, event.getType());  // 動画の下にバナー広告を表示する videoPlayerController.adCompanionBanner = (ViewGroup) findViewById(R.id.companion_ad_banner);  // Ad Request && 再生開始 videoPlayerController.play(); } }); ViewGroup parentView = (ViewGroup) findViewById(R.id.root); String adTagUrl = getString(R.string.ad_tag_url);  if (adTagUrlForTesting != null) { adTagUrl = adTagUrlForTesting; }  videoPlayerController = new VideoPlayerController(parentView, eventEmitter, adVideoPlayerPlayback, adTagUrl); videoPlayerController.init(); } 	0	0	0	0	0	1
private Long createNewUser(TrainingExcelDto item) { GeneralIdResponse addressIdResp = addressService.createFromForm(new AddressDto(item.getPostCode(), item.getAddress())); GeneralIdResponse userIdResp = userService.createFromForm(new UserDto(item.getName(), item.getPhoneNo(), item.getEmail(), addressIdResp.getValue())); return userIdResp.getValue(); } 	0	0	0	0	0	1
@FXML private void handleCalculateCofactor() { int selectedIndex = matrixTable.getSelectionModel().getSelectedIndex(); if (selectedIndex >= 0) { MatrixAlerts.dataAlert(matrixTable.getSelectionModel().getSelectedItem().cofactorMatrix()); } else { // Nothing is selected MatrixAlerts.noSelectionAlert(); }  } 	0	1	0	0	0	0
"public void start() { try { File nodeFile = FileSelector.selectFile(""Select node file"", this, "".node.graph""); File edgeFile = new File(nodeFile.getAbsolutePath().replace("".node"", "".edge"")); File treeFile = FileSelector.selectFile(""Select phylogenetic tree file"", this, "".nwk"");  long startTime = System.currentTimeMillis();  // make the controllers GraphDataRepository gd = GraphDataRepository.parseGraph(nodeFile, edgeFile); NewickParser.TreeNode tree = TreeParser.parseTreeFile(treeFile); graphController = new GraphController(gd); zoomBarController = new ZoomBarController(graphController); sideBarController = new SideBarController(graphController,tree);  // set the views setSideBarView(sideBarController.getPanel()); setGraphView(graphController.getPanel()); setZoomBarView(zoomBarController.getPanel());  // set the controls. // This is done last so we can remove the default library keycontroller WindowController windowController = new WindowController(this); KeyController keys = new KeyController(this); graphController.getPanel().addKeyListener(keys); sideBarController.getPanel().addKeyListener(keys); addWindowListener(windowController);  this.setFocusable(true); this.setVisible(true);  long loadTime = System.currentTimeMillis() - startTime; System.out.println(""Loaded in (ms):"" + loadTime); } catch (FileNotFoundException e) { // TODO: Show dialog with message to user e.printStackTrace(); this.stop(); } catch (IOException e) { e.printStackTrace(); this.stop(); } catch (newick.ParseException e) { e.printStackTrace(); this.stop(); } catch (FileSelectorException e) { e.printStackTrace(); this.stop(); } } "	1	0	1	0	0	0
private void addSampleWatermark(ByteArrayOutputStream baos, char pdfVersion) throws IOException, DocumentException { PdfReader reader = new PdfReader(baos.toByteArray()); baos.reset(); Font font = new Font(Font.FontFamily.UNDEFINED, waterMark.getSize(), 0, BaseColor.GRAY); Phrase phrase = new Phrase(waterMark.getText(), font); PdfStamper stamper = new PdfStamper(reader, baos, pdfVersion); for (int i = 1; i <= reader.getNumberOfPages(); i++) { PdfContentByte canvas = stamper.getUnderContent(i); ColumnText.showTextAligned(canvas, Element.ALIGN_CENTER, phrase, waterMark.getX(), waterMark.getY(), waterMark.getDegree()); } stamper.close(); reader.close(); } 	0	1	0	0	0	0
"@Override public boolean onOptionsItemSelected(MenuItem item) { // Handle action bar item clicks here. The action bar will // automatically handle clicks on the Home/Up button, so long // as you specify a parent activity in AndroidManifest.xml. int id = item.getItemId();  //noinspection SimplifiableIfStatement if ( id == R.id.action_settings) { Intent startIntent = new Intent(this, SettingsActivity.class); ActivityCompat.startActivity(MainActivity.this, startIntent, null);  return true; } else if( id == R.id.action_balance ) { final double currentBalance = -db.getBalanceForDay(new Date());  View dialogView = getLayoutInflater().inflate(R.layout.dialog_adjust_balance, null); final EditText amountEditText = (EditText) dialogView.findViewById(R.id.balance_amount); amountEditText.setText(currentBalance == 0 ? ""0"" : String.valueOf(currentBalance)); UIHelper.preventUnsupportedInputForDecimals(amountEditText); amountEditText.setSelection(amountEditText.getText().length()); // Put focus at the end of the text  AlertDialog.Builder builder = new AlertDialog.Builder(this); builder.setTitle(R.string.adjust_balance_title); builder.setMessage(R.string.adjust_balance_message); builder.setView(dialogView); builder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); builder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { try { // Ajust balance double newBalance = Double.valueOf(amountEditText.getText().toString());  if( newBalance == currentBalance ) { // Nothing to do, balance hasn't change return; }  final double diff = newBalance - currentBalance;  String balanceExpenseTitle = getResources().getString(R.string.adjust_balance_expense_title);  // Look for an existing balance for the day Expense expense = null; List<Expense> expensesForDay = db.getExpensesForDay(new Date()); for(Expense expenseOfDay : expensesForDay) { if( expenseOfDay.getTitle().equals(balanceExpenseTitle) ) { expense = expenseOfDay; break; } }  View.OnClickListener listener;  // If the adjust balance exists, just add the diff and persist it if( expense != null ) { final Expense persistedExpense = expense;  persistedExpense.setAmount(persistedExpense.getAmount() - diff); db.persistExpense(persistedExpense);  // On cancel, remove the diff and persist listener = new View.OnClickListener() { @Override public void onClick(View v) { persistedExpense.setAmount(persistedExpense.getAmount() + diff); db.persistExpense(persistedExpense);  refreshAllForDate(expensesViewAdapter.getDate()); } }; } else // If no adjust balance yet, create a new one { final Expense persistedExpense = new Expense(getResources().getString(R.string.adjust_balance_expense_title), -diff, new Date()); db.persistExpense(persistedExpense);  // On cancel, just delete the inserted balance listener = new View.OnClickListener() { @Override public void onClick(View v) { db.deleteExpense(persistedExpense);  refreshAllForDate(expensesViewAdapter.getDate()); } }; }  refreshAllForDate(expensesViewAdapter.getDate()); dialog.dismiss();  //Show snackbar Snackbar snackbar = Snackbar.make(coordinatorLayout, getResources().getString(R.string.adjust_balance_snackbar_text, CurrencyHelper.getFormattedCurrencyString(MainActivity.this, newBalance)), Snackbar.LENGTH_LONG); snackbar.setAction(R.string.undo, listener); snackbar.setActionTextColor(ContextCompat.getColor(MainActivity.this, R.color.snackbar_action_undo)); //noinspection ResourceType snackbar.setDuration(ACTION_SNACKBAR_LENGTH); snackbar.show(); } catch (Exception e) { new AlertDialog.Builder(MainActivity.this) .setTitle(R.string.adjust_balance_error_title) .setMessage(R.string.adjust_balance_error_message) .setNegativeButton(R.string.ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }) .show();  Logger.warning(""An error occurred during balance"", e); dialog.dismiss(); } } });  final Dialog dialog = builder.show();  // Directly show keyboard when the dialog pops amountEditText.setOnFocusChangeListener(new View.OnFocusChangeListener() { @Override public void onFocusChange(View v, boolean hasFocus) { if (hasFocus && getResources().getConfiguration().keyboard == Configuration.KEYBOARD_NOKEYS ) // Check if the device doesn't have a physical keyboard { dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE); } } });  return true; } else if( id == R.id.action_monthly_report ) { Intent startIntent = new Intent(this, MonthlyReportActivity.class); ActivityCompat.startActivity(MainActivity.this, startIntent, null);  return true; }  return super.onOptionsItemSelected(item); } "	0	0	0	0	0	1
"@Bean public FilterRegistrationBean corsFilter() { UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(); CorsConfiguration config = new CorsConfiguration(); config.setAllowCredentials(true); config.addAllowedOrigin(""http://localhost:4201""); config.addAllowedHeader(""*""); config.addAllowedMethod(""*""); source.registerCorsConfiguration(""/**"", config); FilterRegistrationBean bean = new FilterRegistrationBean(new CorsFilter(source)); bean.setOrder(0); return bean; } "	0	0	0	1	0	0
"@SuppressWarnings(""deprecation"") @Test public void shouldResumeWithRequestCodeWithCodeGrant() throws Exception { final Credentials codeCredentials = new Credentials(""codeId"", ""codeAccess"", ""codeType"", ""codeRefresh"", 9999L); PKCE pkce = Mockito.mock(PKCE.class); Mockito.doAnswer(new Answer() { @Override public Object answer(InvocationOnMock invocation) throws Throwable { callbackCaptor.getValue().onSuccess(codeCredentials); return null; } }).when(pkce).getToken(any(String.class), callbackCaptor.capture()); WebAuthProvider.init(account) .useCodeGrant(true) .withPKCE(pkce) .start(activity, callback, REQUEST_CODE);  verify(activity).startActivity(intentCaptor.capture()); Uri uri = intentCaptor.getValue().getData(); assertThat(uri, is(notNullValue()));  String sentState = uri.getQueryParameter(KEY_STATE); assertThat(sentState, is(not(isEmptyOrNullString()))); Intent intent = createAuthIntent(createHash(""urlId"", ""urlAccess"", ""urlRefresh"", ""urlType"", sentState, null)); assertTrue(WebAuthProvider.resume(REQUEST_CODE, Activity.RESULT_OK, intent));  ArgumentCaptor<Credentials> credentialsCaptor = ArgumentCaptor.forClass(Credentials.class); verify(callback).onSuccess(credentialsCaptor.capture());  assertThat(credentialsCaptor.getValue(), is(notNullValue())); assertThat(credentialsCaptor.getValue().getIdToken(), is(""codeId"")); assertThat(credentialsCaptor.getValue().getAccessToken(), is(""codeAccess"")); assertThat(credentialsCaptor.getValue().getRefreshToken(), is(""codeRefresh"")); assertThat(credentialsCaptor.getValue().getType(), is(""codeType"")); assertThat(credentialsCaptor.getValue().getExpiresIn(), is(9999L)); } "	0	0	0	1	0	0
"@SuppressWarnings({""deprecation"", ""ThrowableResultOfMethodCallIgnored""}) @Test public void shouldFailToResumeWithRequestCodeWithAccessDenied() throws Exception { WebAuthProvider.init(account) .withState(""1234567890"") .useCodeGrant(false) .start(activity, callback, REQUEST_CODE); Intent intent = createAuthIntent(createHash(""iToken"", ""aToken"", null, ""refresh_token"", ""1234567890"", ""access_denied"")); assertTrue(WebAuthProvider.resume(REQUEST_CODE, Activity.RESULT_OK, intent));  verify(callback).onFailure(authExceptionCaptor.capture());  assertThat(authExceptionCaptor.getValue(), is(notNullValue())); assertThat(authExceptionCaptor.getValue().getCode(), is(""access_denied"")); assertThat(authExceptionCaptor.getValue().getDescription(), is(""Permissions were not granted. Try again."")); } "	0	0	0	1	0	0
public Builder<T> withStopCondition(AuctionStopCondition stopCondition) { return new AutoValue_AuctionCommModel_Builder<>(stopCondition, getMaxAuctionDuration()); } 	0	0	0	0	0	1
"public static boolean isPermissionsGranted(Context context) { PackageInfo info; try { info = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_PERMISSIONS); } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); return false; }  if (info.requestedPermissions != null) { for (String permission : info.requestedPermissions) { if (ContextCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) { Log.wtf(""Permission"", permission); if (!permission.matches(Manifest.permission.SYSTEM_ALERT_WINDOW) || !canDrawOverlays(context)) return false; } } }  return true; } "	0	1	0	0	0	0
"public void registerChannelAlias(String cha){ unregisterCmd(cha); UCChannel ch = UChat.get().getConfig().getChannel(cha); if (ch == null){ return; } Sponge.getCommandManager().register(UChat.get().instance(), CommandSpec.builder() .arguments(GenericArguments.optional(GenericArguments.remainingJoinedStrings(Text.of(""message"")))) .permission(""uchat.channel.""+ch.getName()) .description(Text.of(""Command to use channel ""+ch.getName()+""."")) .executor((src, args) -> { { if (src instanceof Player){ if (args.<String>getOne(""message"").isPresent()){ if (UChat.mutes.contains(src.getName()) || ch.isMuted(src.getName())){ UChat.get().getLang().sendMessage(src, ""channel.muted""); return CommandResult.success(); }  UChat.tempChannels.put(src.getName(), ch.getAlias());  Text msg = Text.of(args.<String>getOne(""message"").get()); MessageChannelEvent.Chat event = SpongeEventFactory.createMessageChannelEventChat( UChat.get().getVHelper().getCause(src), src.getMessageChannel(), Optional.of(src.getMessageChannel()), new MessageEvent.MessageFormatter(Text.builder(""<"" + src.getName() + ""> "") .onShiftClick(TextActions.insertText(src.getName())) .onClick(TextActions.suggestCommand(""/msg "" + src.getName())) .build(), msg), msg, false); Sponge.getEventManager().post(event); } else { if (!ch.canLock()){ UChat.get().getLang().sendMessage(src, ""help.channels.send""); return CommandResult.success(); } if (ch.isMember((Player) src)){ UChat.tempChannels.put(src.getName(), ch.getAlias()); UChat.get().getLang().sendMessage(src, UChat.get().getLang().get(""channel.alreadyon"").replace(""{channel}"", ch.getName())); return CommandResult.success(); } ch.addMember((Player) src); UChat.get().getLang().sendMessage(src, UChat.get().getLang().get(""channel.entered"").replace(""{channel}"", ch.getName())); } } else if (args.<String>getOne(""message"").isPresent()){ UCMessages.sendFancyMessage(new String[0], Text.of(args.<String>getOne(""message"").get()), ch, src, null); } else { StringBuilder channels = new StringBuilder(); for (UCChannel chan:UChat.get().getConfig().getChannels()){ if (!(src instanceof Player) || UChat.get().getPerms().channelWritePerm((Player)src, chan)){ channels.append("", ""+chan.getName()); } } throw new CommandException(getHelpChannel(src).build(), true); } return CommandResult.success(); }}) .build(), cha); } "	0	0	0	0	0	1
"@Override public void validate(Sentence sentence) { String prevSurface = """"; for (TokenElement token : sentence.getTokens()) { String currentSurface = token.getSurface(); if (prevSurface.equalsIgnoreCase(currentSurface) && currentSurface.length() > 0) { addLocalizedErrorFromToken(sentence, token); } prevSurface = currentSurface; } } "	0	1	0	0	0	0
"private InputStream singleUpload(@NonNull Map<String, String> params, OmniFile targetDirectory) { String url = params.get(""url""); String targetVolumeId = targetDirectory.getVolumeId(); String destPath = targetDirectory.getPath(); JsonObject wrapper = new JsonObject(); JsonArray added = new JsonArray(); try { JSONArray postUploads = new JSONArray(params.get(""post_uploads""));  for (int i = 0; i < postUploads.length(); i++) { JSONObject postUpload = postUploads.getJSONObject(i); String uploadFileName = postUpload.getString(CConst.FILE_NAME); String filePath = postUpload.getString(CConst.FILE_PATH);  /** * When filePath is empty, a file with zero bytes was uploaded. */ if ( filePath.isEmpty()) { filePath = dataDir + File.separator + "".empty_file.txt""; File emptyFile = new File( filePath); FileUtil.writeFile( emptyFile, """"); }  File srcFile = new File(filePath); OmniFile destFile = new OmniFile(targetVolumeId, destPath + ""/"" + uploadFileName);  if (OmniFiles.copyFile(srcFile, destFile)) { JsonArray warning = new JsonArray(); JsonObject errorObj = new JsonObject(); errorObj.addProperty(""error"", ""File copy failure""); warning.add(errorObj); wrapper.add(""warning"", warning); }  JsonObject fileObj = FileObj.makeObj(targetVolumeId, destFile, url); added.add(fileObj); LogUtil.log(LogUtil.LogType.CMD_UPLOAD, ""File upload success: "" + destFile.getPath()); }  wrapper.add(""added"", added);  return getInputStream(wrapper);  } catch (JSONException e) { logException(CmdUpload.class, e); } return null; } "	1	0	1	1	0	0
public void remove(int position) { mData.remove(position); notifyItemRemoved(position);  } 	0	1	0	0	0	0
@Test public void selectingStudentInViewFiresStudentSelectedEvent() { ArgumentCaptor<SelectStudentHandler> viewHandler = ArgumentCaptor.forClass(SelectStudentHandler.class); verify(this.view).addSelectStudentHandler(viewHandler.capture());  StudentSelectedEventHandler eventHandler = mock(StudentSelectedEventHandler.class); this.bus.register(eventHandler);  this.bus.post(new GradeBookLoaded(book));  viewHandler.getValue().studentSelected(1);  ArgumentCaptor<StudentSelectedEvent> event = ArgumentCaptor.forClass(StudentSelectedEvent.class); verify(eventHandler).handle(event.capture());  assertThat(event.getValue().getSelectedStudent(), equalTo(student1)); } 	1	0	1	1	0	0
"@GET @Produces({ MediaType.APPLICATION_JSON + "";charset=UTF-8"" }) public Response initAuthorization() { SignedJWT jwt = MCRJSONWebTokenUtil.createEmptyJWTwithPublicKey(""http:/localhost:8080""); StringBuffer msg = new StringBuffer(); msg.append(""{""); msg.append(""\n    \""access_token\"": \"""" + jwt + ""\"",""); msg.append(""\n}"");  return Response.ok(msg.toString()).type(""application/json; charset=UTF-8"") .header(""Authorization"", ""Bearer "" + jwt.serialize()).build(); } "	0	0	0	0	0	1
"public FileDownload controller ( @RequestParam(""request"") ReportRequest reportRequest, @RequestParam(""dataset"") String dataSetName, @RequestParam(""column"") String columnName, PageRequest pageRequest, @SpringBean ReportManager reportManager, @SpringBean KenyaUiUtils kenyaUi, @SpringBean ReportService reportService, @SpringBean CsvMaker csvMaker ) { ReportDefinition definition = reportRequest.getReportDefinition().getParameterizable(); ReportDescriptor report = reportManager.getReportDescriptor(definition);  CoreUtils.checkAccess(report, kenyaUi.getCurrentApp(pageRequest));  ReportData reportData = reportService.loadReportData(reportRequest);  MapDataSet dataSet = (MapDataSet) reportData.getDataSets().get(dataSetName);  DataSetColumn dataSetColumn = dataSet.getMetaData().getColumn(columnName); Object result = dataSet.getData(dataSetColumn);  Cohort cohort = null; if (result instanceof CohortIndicatorAndDimensionResult) { CohortIndicatorAndDimensionResult cidr = (CohortIndicatorAndDimensionResult) dataSet.getData(dataSetColumn); cohort = cidr.getCohortIndicatorAndDimensionCohort(); } else if (result instanceof Cohort) { cohort = (Cohort) result; }  List<Patient> patients = Context.getPatientSetService().getPatients(cohort.getMemberIds());  PatientCalculationService calculationService = Context.getService(PatientCalculationService.class); PatientCalculationContext calculationContext = calculationService.createCalculationContext(); Date endDate = (Date) reportRequest.getReportDefinition().getParameterMappings().get(""endDate""); calculationContext.setNow(endDate);  DateOfEnrollmentArtCalculation dateOfEnrollmentArtCalculation = new DateOfEnrollmentArtCalculation(); CalculationResultMap enrollmentDates = dateOfEnrollmentArtCalculation.evaluate(cohort.getMemberIds(), null, calculationContext);  InitialArtStartDateCalculation initialArtStartDateCalculation = new InitialArtStartDateCalculation(); CalculationResultMap artInitializationDates = initialArtStartDateCalculation.evaluate(cohort.getMemberIds(), null, calculationContext);   List<Object> data = new ArrayList<Object>(); List<Object> headerRow = new ArrayList<Object>(); List<Object> header = new ArrayList<Object>(); header.add(""Name""); header.add(""Age""); header.add(""Gender""); header.add(""UPN""); header.add(""Enrollment Date""); header.add(""ART Initialization Date""); headerRow.add(header.toArray()); for (Patient patient : patients) { List<Object> row = new ArrayList<Object>(); row.add(patient.getPersonName().getFullName()); row.add(patient.getAge()); row.add(patient.getGender()); row.add(new ArrayList<PatientIdentifier>(patient.getIdentifiers()).get(0));  String enrollmentDate = null; CalculationResult enrollmentDateCalcResult = enrollmentDates.get(patient.getId()); if (enrollmentDateCalcResult != null && enrollmentDateCalcResult.getValue() != null) { enrollmentDate = DATE_FORMAT.format((Date) enrollmentDateCalcResult.getValue()); } row.add(enrollmentDate);  String artInitializationDate = null; CalculationResult artInitializationDateCalcResult = artInitializationDates.get(patient.getId()); if (artInitializationDateCalcResult != null && artInitializationDateCalcResult.getValue() != null) { artInitializationDate = DATE_FORMAT.format((Date) artInitializationDateCalcResult.getValue()); } row.add(artInitializationDate);  data.add(row.toArray()); }  System.out.println(""""); FileDownload fileDownload = new FileDownload(""Cohort.csv"", ""text/csv"", csvMaker.createCsv(data, header)); return fileDownload; } "	0	0	0	0	0	1
public static Matrix4d superposeAndTransform(Point3d[] fixed, Point3d[] moved) { superposer.setCentered(false); return superposer.superpose(fixed, moved); } 	1	1	1	1	0	0
"private NodeProcess getSubprocessNodeInfo(Process process) { if (!subprocessesInfoMap.containsKey(process)) { NodeProcess nodeProcess = nodeProcessDAO.getNodeProcessByChild(process.getId()); if (nodeProcess != null) { Map<String, String> readVariableNames = Maps.newHashMap(); Map<String, String> syncVariableNames = Maps.newHashMap(); ProcessDefinition parentProcessDefinition = processDefinitionLoader.getDefinition(nodeProcess.getProcess()); Node node = parentProcessDefinition.getNodeNotNull(nodeProcess.getParentToken().getNodeId()); multiSubprocessFlagsMap.put(process, node instanceof MultiSubprocessNode); if (node instanceof SubprocessNode) { SubprocessNode subprocessNode = (SubprocessNode) node; boolean baseProcessIdMode = subprocessNode.isInBaseProcessIdMode(); baseProcessIdModesMap.put(process, baseProcessIdMode); for (VariableMapping variableMapping : subprocessNode.getVariableMappings()) { if (variableMapping.isSyncable() || variableMapping.isReadable()) { readVariableNames.put(variableMapping.getMappedName(), variableMapping.getName()); } if (variableMapping.isSyncable()) { syncVariableNames.put(variableMapping.getMappedName(), variableMapping.getName()); } } log.debug(""Caching for "" + process.getId() + "" [baseProcessId mode = "" + baseProcessIdMode + ""]: readVariableNames = "" + readVariableNames + ""syncVariableNames = "" + syncVariableNames); } readVariableNamesMap.put(process, readVariableNames); syncVariableNamesMap.put(process, syncVariableNames); } log.debug(""Caching "" + nodeProcess + "" for "" + process); subprocessesInfoMap.put(process, nodeProcess); } return subprocessesInfoMap.get(process); } "	0	1	0	0	0	0
@Before public void makeNewBlock() throws Exception { _block = BlockFactory.getBlock(blockType, owner, ownHash, previousHashChain, previousHashSender, publicKey, iban); } 	0	0	0	0	0	1
@Override public void handle(Cart entity, UpdateAction action) { Updater updater = getUpdateService(action.getClass()); updater.handle(entity, action); } 	1	0	1	0	0	0
public void setOnSaveCroppedImageCompleteListener(OnSaveCroppedImageCompleteListener listener) { mOnSaveCroppedImageCompleteListener = listener != null ? new WeakReference<>(listener) : null; } 	1	0	1	0	0	0
"public static MessageMDN createMDN(Session session, AS2Message msg, String mic, DispositionType disposition, String text) throws Exception {  AS2MessageMDN mdn = new AS2MessageMDN(msg, true);  mdn.setHeader(""AS2-Version"", ""1.1""); // RFC2822 format: Wed, 04 Mar 2009 10:59:17 +0100 mdn.setHeader(""Date"", DateUtil.formatDate(""EEE, dd MMM yyyy HH:mm:ss Z"")); mdn.setHeader(""Server"", Session.TITLE); mdn.setHeader(""Mime-Version"", ""1.0"");  // get the MDN partnership info // not sure that it should be this way since the config should relfect the inbound original message settings but ... mdn.getPartnership().setSenderID(AS2Partnership.PID_AS2, mdn.getHeader(""AS2-From"")); mdn.getPartnership().setReceiverID(AS2Partnership.PID_AS2, mdn.getHeader(""AS2-To"")); session.getPartnershipFactory().updatePartnership(mdn, true);  mdn.setHeader(""From"", msg.getPartnership().getReceiverID(Partnership.PID_EMAIL)); String subject = mdn.getPartnership().getAttribute(ASXPartnership.PA_MDN_SUBJECT);  if (subject != null) { mdn.setHeader(""Subject"", ParameterParser.parse(subject, new MessageParameters(msg))); } else { mdn.setHeader(""Subject"", ""Your Requested MDN Response""); } mdn.setText(ParameterParser.parse(text, new MessageParameters(msg))); mdn.setAttribute(AS2MessageMDN.MDNA_REPORTING_UA, Session.TITLE + ""@"" + msg.getAttribute(NetAttribute.MA_DESTINATION_IP) + "":"" + msg.getAttribute(NetAttribute.MA_DESTINATION_PORT)); mdn.setAttribute(AS2MessageMDN.MDNA_ORIG_RECIPIENT, ""rfc822; "" + msg.getHeader(""AS2-To"")); mdn.setAttribute(AS2MessageMDN.MDNA_FINAL_RECIPIENT, ""rfc822; "" + msg.getPartnership().getReceiverID(AS2Partnership.PID_AS2)); mdn.setAttribute(AS2MessageMDN.MDNA_ORIG_MESSAGEID, msg.getHeader(""Message-ID"")); mdn.setAttribute(AS2MessageMDN.MDNA_DISPOSITION, disposition.toString());  DispositionOptions dispOptions = new DispositionOptions(msg .getHeader(""Disposition-Notification-Options""));  mdn.setAttribute(AS2MessageMDN.MDNA_MIC, mic); createMDNData(session, mdn, dispOptions.getMicalg(), dispOptions.getProtocol());  mdn.updateMessageID();  // store MDN into msg in case AsynchMDN is sent fails, needs to be resent by send module msg.setMDN(mdn);  return mdn; } "	1	0	1	1	0	0
"protected List<Integer> createBaseTextNormOriginalMapping(STextualDS sTextualDS) { /** * Example1: dipl: "" this is"" 01234567 norm: ""thisis"" 012345 0->1 * 1->2,... Example2: dipl: "" thäs is"" 01234567 norm: ""thaesis"" 0123456 * 0->1 1->2 2->3 3->3 4->4 5->6 6->7 */ List<Integer> normalizedToOriginalMapping = new ArrayList<Integer>(); int start = 0; char[] chr = sTextualDS.getText().toCharArray(); for (char c : chr) { String stringToEscape = ((MergerProperties) getProperties()).getEscapeMapping().get(String.valueOf(c)); if (stringToEscape == null) { normalizedToOriginalMapping.add(start); } else { if (stringToEscape.length() > 0) { char[] chr2 = stringToEscape.toCharArray(); for (int i = 0; i < chr2.length; i++) { // one char is mapped to many. all chars have the same // index in the original text normalizedToOriginalMapping.add(start); } } else { // one char is mapped to the empty string. // do nothing } } start += 1; } // add an additional entry for the position after the last character // (imagine an empty token beginning and ending at last position of the // text). This is necessary, because text positions are positions // BETWEEN characters. normalizedToOriginalMapping.add(start++); return normalizedToOriginalMapping; } "	1	0	1	0	0	0
V addInstance(Schema.BaseType instanceBaseType, BiFunction<VertexElement, T, V> producer, boolean checkNeeded){ if(checkNeeded) preCheckForInstanceCreation();  if(isAbstract()) throw GraknTxOperationException.addingInstancesToAbstractType(this);  VertexElement instanceVertex = vertex().tx().factory().addVertexElement(instanceBaseType); if(!Schema.MetaSchema.isMetaLabel(getLabel())) { vertex().tx().txCache().addedInstance(getId()); } return producer.apply(instanceVertex, getThis()); } 	1	0	1	0	0	0
@Nullable public com.vimeo.networking.model.live.Live getLive() { return mLive; } 	0	0	0	0	0	1
protected void handleUpload(Map<File, File> uploadPlan) { SubtitleUploadDialog dialog = new SubtitleUploadDialog(getSubtitleService(), getWindow(this));  // initialize window properties dialog.setIconImage(getImage(getIcon(DropAction.Accept))); dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE); dialog.setSize(820, 575);  // show dialog dialog.setLocation(getOffsetLocation(dialog.getOwner()));  // start processing dialog.setUploadPlan(uploadPlan); dialog.startChecking();  // show dialog dialog.setVisible(true); } 	0	1	0	0	0	0
public WTokenRun replaceOrAppendDocComment(WToken docComment) { int indexOfDocComment = indexOfDocComment(); if (indexOfDocComment != -1) { return new WTokenRun(elements.set(indexOfDocComment, docComment)); } else { return append(docComment).append(WToken.newLine()); } } 	0	1	0	0	0	0
public void outInputSlot(){ if (inputStackHandler.getStackInSlot(0).getItem() != Item.getItemFromBlock(Blocks.AIR)) { if (!world.isRemote) { ItemStack item = inputStackHandler.getStackInSlot(0); inputStackHandler.setStackInSlot(0, null);  int x = getPos().getX(); int z = getPos().getZ(); switch (this.getBlockMetadata()) { case 0: z = z - 2; //North break; case 1: x = x + 2; //East break; case 2: z = z + 2; //South break; case 3: x = x - 2;//West break; }  world.spawnEntity(new EntityItem(world, x, getPos().up().getY(), z, item)); } } } 	0	0	0	1	0	0
"@Util public static <T> List<TableRecord<T>> tablaPermisos(List<T> rowsFiltered, boolean permisoEditar, boolean permisoBorrar, boolean permisoLeer, String permisoNombreEditar, String permisoNombreBorrar, String permisoNombreLeer, String accion, Map<String, Long> ids) { List<TableRecord<T>> records = new ArrayList<TableRecord<T>>(); Secure secure = InjectorConfig.getInjector().getInstance(Secure.class); for (T tablaTipo : rowsFiltered) { TableRecord<T> record = new TableRecord<T>(); records.add(record); record.objeto = tablaTipo; String[] nombre = tablaTipo.getClass().getName().split(""\\."");  ResultadoPermiso permisoFilasEditar = null; ResultadoPermiso permisoFilasLeer = null; ResultadoPermiso permisoFilasBorrar = null;  Map<String, Object> vars = new HashMap<String, Object>(); if (permisoEditar || permisoLeer || permisoBorrar){ String paramClass = ""id""+ReflectionUtils.getNameClass(tablaTipo); if (!ids.containsKey(paramClass)){ ids.put(paramClass, (Long) ReflectionUtils.getValueFromMethodFromClass(tablaTipo, ""getId"")); } vars.put(nombre[nombre.length-1].toLowerCase(), tablaTipo); }  if (permisoEditar) permisoFilasEditar = secure.check(permisoNombreEditar, ""editable"", accion, ids, vars); if (permisoLeer) permisoFilasLeer = secure.check(permisoNombreLeer, ""visible"", accion, ids, vars); if (permisoBorrar) permisoFilasBorrar = secure.check(permisoNombreBorrar, ""editable"", accion, ids, vars);  if ((permisoFilasLeer != null) && (permisoFilasLeer.checkAcceso(""leer""))) record.permisoLeer = true; else { if (permisoLeer) record.permisoLeer=false; else record.permisoLeer=true; } if ((permisoFilasEditar != null) && (permisoFilasEditar.checkAcceso(""editar""))){ record.permisoEditar = true; } else { if (permisoEditar) record.permisoEditar=false; else record.permisoEditar=true; }  if ((permisoFilasBorrar != null) && (permisoFilasBorrar.checkAcceso(""borrar""))) record.permisoBorrar = true; else { if (permisoBorrar) record.permisoBorrar=false; else record.permisoBorrar=true; } }  return records; } "	0	0	0	0	0	1
public boolean addAdministratedSubject(Subject subject) { this.administratedSubjects.remove(subject); if (!subject.getAccountsInCharge().contains(this)) { subject.addAccountInCharge(this); } return true; } 	1	0	1	1	0	0
"private void setAlarmsForNamaz(long time, String namaz) { Log.i(""NAMAZ_TIME"", String.format(""Setting alarm for: %d"", TimeUnit.MILLISECONDS.toMinutes(time))); Intent intent = new Intent(""com.byteshaft.shownotification""); intent.putExtra(""namaz"", namaz); mPendingIntent = PendingIntent.getBroadcast(this, 0, intent, 0); mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime() + time, mPendingIntent); } "	0	1	0	0	0	0
public SequenceFeatureList getFeatures() { if(containsKey(FeatureStringEnum.FEATURES.getValue())){ return (SequenceFeatureList) get(FeatureStringEnum.FEATURES.getValue()); } return null ; } 	0	1	0	0	0	0
public RequestQueue getRequestQueue() { if (mRequestQueue == null) { // getApplicationContext() is key, it keeps you from leaking the // Activity or BroadcastReceiver if someone passes one in. mRequestQueue = Volley.newRequestQueue(mCtx.getApplicationContext()); } return mRequestQueue; } 	0	0	0	0	0	1
"public static Chain getMatchingAtomRes(Chain seqRes, List<Chain> atomList) { Iterator<Chain> iter = atomList.iterator(); while(iter.hasNext()){ Chain atomChain = iter.next(); if ( atomChain.getId().equals(seqRes.getId())){ return atomChain; } //			if ( atomChain.getName().equals(seqRes.getName())){ //				return atomChain; //			} }  logger.info(""Could not match SEQRES chainID asymId:"" + seqRes.getId() + "" authId:""+ seqRes.getName() +""  to ATOM chains!, size of atom chain: "" + atomList.size()); return null; } "	1	1	1	1	0	0
"@Override public void truncateAll(long prevTerm, long term, long index) throws IOException { synchronized (mMetadataInfo) { if (mClosed) { throw new IOException(""Closed""); }  TermLog highestLog;  acquireExclusive(); try { compact(Long.MAX_VALUE);  // Create a new primordial term. highestLog = FileTermLog.newTerm(mWorker, mBase, prevTerm, term, index, index); mTermLogs.add(highestLog); } finally { releaseExclusive(); }  mMetadataInfo.mTerm = term; mMetadataInfo.mHighestIndex = index; mMetadataInfo.mCommitIndex = index; mMetadataHighestIndex = index; mMetadataDurableIndex = index;  syncMetadata(highestLog, prevTerm); } } "	1	0	1	0	0	0
"protected void updateHistory(Versionable v) throws Exception { //Only if an auditable field has been modified if (auditable(v)) { //Add history of creation HistoryServer hs = new HistoryServer(); if (v.getModifierId() < 0) { try { //By default blame system hs.setModifierId(new VMUserServer(1).getEntity()); } catch (Exception ex) { LOG.log(Level.SEVERE, null, ex); } } else { hs.setModifierId(new VMUserServer(v.getModifierId()).getEntity()); }  if (v.getHistoryList() != null && !v.getHistoryList().isEmpty()) { if (v.getReason() == null || v.getReason().equals(""audit.general.creation"")) { v.setReason(""audit.general.modified""); } History last = v.getHistoryList().get(v.getHistoryList().size() - 1); if ((v.getMajorVersion() == 0 && v.getMidVersion() == 0) // It has default values || last.getMajorVersion() == v.getMajorVersion() // Or it has a higher mid/major version assigned. && last.getMidVersion() == v.getMidVersion()) { //Make it one more than latest hs.setMajorVersion(v.getMajorVersion()); hs.setMidVersion(v.getMidVersion()); hs.setMinorVersion(last.getMinorVersion() + 1); } else { //Copy values from object as it was forced changed. hs.setMajorVersion(v.getMajorVersion()); hs.setMidVersion(v.getMidVersion()); hs.setMinorVersion(v.getMinorVersion()); } } else { if (v.getReason() == null) { v.setReason(""audit.general.creation""); } } hs.setReason(v.getReason()); hs.setModificationTime(v.getModificationTime() == null ? new Date() : v.getModificationTime()); hs.write2DB(); //Check the fields to be placed in history updateFields(hs, v); } if (v.getHistoryList() != null && v.getHistoryList().size() > 0) { History current = v.getHistoryList().get(v.getHistoryList().size() - 1); //Update the version the object holds v.setMajorVersion(current.getMajorVersion()); v.setMidVersion(current.getMidVersion()); v.setMinorVersion(current.getMinorVersion()); } } "	1	1	1	1	0	0
"public static String buildProjectStats(final IProject project, final StatisticsInfo hotStat, final StatisticsPanel callback) {  StatCount total = new StatCount(); StatCount remaining = new StatCount(); StatCount unique = new StatCount(); StatCount remainingUnique = new StatCount();  // find unique segments Map<String, SourceTextEntry> uniqueSegment = new HashMap<>(); Set<String> translated = new HashSet<>(); for (SourceTextEntry ste : project.getAllEntries()) { String src = ste.getSrcText(); for (ProtectedPart pp : ste.getProtectedParts()) { src = src.replace(pp.getTextInSourceSegment(), pp.getReplacementUniquenessCalculation()); } if (!uniqueSegment.containsKey(src)) { uniqueSegment.put(src, ste); } TMXEntry tr = project.getTranslationInfo(ste); if (tr.isTranslated()) { translated.add(src); } } Set<String> filesUnique = new HashSet<>(); Set<String> filesRemainingUnique = new HashSet<>(); for (Map.Entry<String, SourceTextEntry> en : uniqueSegment.entrySet()) { /* Number of words and chars calculated without all tags and protected parts. */ StatCount count = new StatCount(en.getValue());  // add to unique unique.add(count); filesUnique.add(en.getValue().getKey().file); // add to unique remaining if (!translated.contains(en.getKey())) { remainingUnique.add(count); filesRemainingUnique.add(en.getValue().getKey().file); } } unique.addFiles(filesUnique.size()); remainingUnique.addFiles(filesRemainingUnique.size());  List<FileData> counts = new ArrayList<>(); Map<String, Boolean> firstSeenUniqueSegment = new HashMap<>(); for (FileInfo file : project.getProjectFiles()) { FileData numbers = new FileData(); numbers.filename = file.filePath; counts.add(numbers); int fileTotal = 0; int fileRemaining = 0; for (SourceTextEntry ste : file.entries) { String src = ste.getSrcText(); for (ProtectedPart pp : ste.getProtectedParts()) { src = src.replace(pp.getTextInSourceSegment(), pp.getReplacementUniquenessCalculation()); }  /* Number of words and chars calculated without all tags and protected parts. */ StatCount count = new StatCount(ste);  // add to total total.add(count); fileTotal = 1;  // add to remaining TMXEntry tr = project.getTranslationInfo(ste); if (!tr.isTranslated()) { remaining.add(count); fileRemaining = 1; }  // add to file's info numbers.total.add(count);  Boolean firstSeen = firstSeenUniqueSegment.get(src); if (firstSeen == null) { firstSeenUniqueSegment.put(src, false); numbers.unique.add(count);  if (!tr.isTranslated()) { numbers.remainingUnique.add(count); } }  if (!tr.isTranslated()) { numbers.remaining.add(count); } } total.addFiles(fileTotal); remaining.addFiles(fileRemaining); }  StringBuilder result = new StringBuilder();  result.append(OStrings.getString(""CT_STATS_Project_Statistics"")); result.append(""\n\n"");  String[][] headerTable = calcHeaderTable(new StatCount[] { total, remaining, unique, remainingUnique }); if (callback != null) { callback.setProjectTableData(htHeaders, headerTable); } result.append(TextUtil.showTextTable(htHeaders, headerTable, htAlign)); result.append(""\n\n"");  // STATISTICS BY FILE result.append(OStrings.getString(""CT_STATS_FILE_Statistics"")); result.append(""\n\n""); String[][] filesTable = calcFilesTable(project.getProjectProperties(), counts); if (callback != null) { callback.setFilesTableData(ftHeaders, filesTable); } result.append(TextUtil.showTextTable(ftHeaders, filesTable, ftAlign));  if (hotStat != null) { hotStat.numberOfSegmentsTotal = total.segments; hotStat.numberofTranslatedSegments = translated.size(); hotStat.numberOfUniqueSegments = unique.segments; hotStat.uniqueCountsByFile.clear(); for (FileData fd : counts) { hotStat.uniqueCountsByFile.put(fd.filename, fd.unique.segments); } }  return result.toString(); } "	0	0	0	0	0	1
"static int Process(NotificationGenerationJob notifJob) { notifJob.showAsAlert = OneSignal.getInAppAlertNotificationEnabled() && OneSignal.isAppActive(); processCollapseKey(notifJob);  GenerateNotification.fromJsonPayload(notifJob);  if (!notifJob.restoring) { saveNotification(notifJob.context, notifJob.jsonPayload, false, notifJob.getAndroidId()); try { JSONObject jsonObject = new JSONObject(notifJob.jsonPayload.toString()); jsonObject.put(""notificationId"", notifJob.getAndroidId()); OneSignal.handleNotificationReceived(newJsonArray(jsonObject), true, notifJob.showAsAlert); } catch(Throwable t) {} }  return notifJob.getAndroidId(); } "	0	1	0	0	0	0
"@Override public ArrayList<Expense> getAllExpenses(){  ArrayList<Expense> expenses = new ArrayList<>(); Connection connection = null; PreparedStatement stmt = null; UserDaoImpl dao = new UserDaoImpl();  try { connection = DaoUtilities.getConnection(); String sql =  ""SELECT a.*, b.u_id as author_id, b.u_username as authorname,""; sql = sql + ""  c.u_id as resolver_id, c.u_username as resolvername, d.rs_id, d.rs_status, e.rt_id, e.rt_type""; sql = sql + ""  from erawesome.ers_reimbursements a""; sql = sql + ""  join erawesome.ers_users b on b.u_id = a.u_id_author""; sql = sql + ""  join erawesome.ers_users c on c.u_id = a.u_id_resolver""; sql = sql + ""  join erawesome.ers_reimbursement_status d on d.rs_id = a.rs_status""; sql = sql + ""  join erawesome.ers_reimbursement_type e on e.rt_id = a.rt_type"";  stmt = connection.prepareStatement(sql);  ResultSet rs = stmt.executeQuery(sql);  while (rs.next()) {  Expense exp = new Expense();  exp.setR_id(rs.getInt(""r_id"")); exp.setR_amount(rs.getDouble(""r_amount"")); exp.setR_description(rs.getString(""r_description"")); exp.setR_submitted(rs.getTimestamp(""r_submitted"")); exp.setR_resolved(rs.getTimestamp(""r_resolved""));  //Add Author user object User author = dao.getUser(rs.getString(""authorname"")); exp.setU_author(author);  //Add Resolver user object User resolver = dao.getUser(rs.getString(""resolvername"")); exp.setU_resolver(resolver);  //Add Expense Type Object ExpenseType etype = new ExpenseType(); etype.setRt_id(rs.getInt(""rt_id"")); etype.setRt_type(rs.getString(""rt_type"")); exp.setR_type(etype);  //Add Expense Status Object ExpenseStatus estat = new ExpenseStatus(); estat.setRs_id(rs.getInt(""rs_id"")); estat.setRs_status(rs.getString(""rs_status"")); exp.setR_status(estat);  expenses.add(exp); }  } catch (SQLException e) { e.printStackTrace(); } finally { try { if (stmt != null) { stmt.close(); } if (connection != null) { connection.close(); } } catch (SQLException e) { e.printStackTrace(); } } return expenses; } "	1	0	1	1	0	0
"private Parameter extractParameterFromAnnotation(Annotation annotation, String defaultValue, Class<?> cls, boolean isArray) { Parameter parameter = null;  if (annotation instanceof RequestParam) { RequestParam param = (RequestParam) annotation; QueryParameter qp = new QueryParameter() .name(param.value());  if (!defaultValue.isEmpty()) { qp.setDefaultValue(defaultValue); } Property schema = ModelConverters.getInstance().readAsProperty(cls); if (schema != null) { qp.setProperty(schema); }  if (isArray || cls.isArray() || cls.isAssignableFrom(Collection.class)) { qp.setType(""string""); }  qp.setRequired(param.required());  parameter = qp; } else if (annotation instanceof PathVariable) { PathVariable param = (PathVariable) annotation; PathParameter pp = new PathParameter() .name(param.value()); if (!defaultValue.isEmpty()) { pp.setDefaultValue(defaultValue); } Property schema = ModelConverters.getInstance().readAsProperty(cls); if (schema != null) { pp.setProperty(schema); } parameter = pp; } else if (annotation instanceof RequestHeader) { RequestHeader param = (RequestHeader) annotation; HeaderParameter hp = new HeaderParameter() .name(param.value()); hp.setDefaultValue(defaultValue); Property schema = ModelConverters.getInstance().readAsProperty(cls); if (schema != null) { hp.setProperty(schema); }  hp.setRequired(param.required());  parameter = hp; } else if (annotation instanceof CookieValue) { CookieValue param = (CookieValue) annotation; CookieParameter cp = new CookieParameter() .name(param.value()); if (!defaultValue.isEmpty()) { cp.setDefaultValue(defaultValue); } Property schema = ModelConverters.getInstance().readAsProperty(cls); if (schema != null) { cp.setProperty(schema); }  cp.setRequired(param.required());  parameter = cp; }  return parameter; } "	0	0	0	1	0	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Bundle bundle = getArguments(); product_ID = bundle.getInt(""prod_id""); productName = bundle.getString(""prod_name""); groceryList_ID = bundle.getInt(""gl_id""); groceryManager = new GroceryManager();  } "	0	1	0	0	0	0
"private void addProperty( final FedoraEvent fedoraEvent, final Event ev ) { try { if (PROPERTY_EVENT_TYPES.contains(ev.getType())) { final String eventPath = ev.getPath(); fedoraEvent.addProperty(eventPath.substring(eventPath.lastIndexOf(""/"") + 1)); } else { log.trace(""Not adding non-event property: {}, {}"", fedoraEvent, ev); } } catch (final RepositoryException e) { throw new RepositoryRuntimeException(e); } } "	1	1	1	1	0	0
"public TextChannel getErrorLogChannel() { return (testBot ? getChannelByID(""242297848123621376"") : getChannelByID(""226786557862871040"")); } "	0	0	0	0	0	1
@Override public void onMessageReceived(@NonNull MOKMessage message) { processNewMessage(message); boolean isMyOwnMsg = message.getSid().equals(myMonkeyID); updateConversation(isMyOwnMsg?message.getRid():message.getConversationID(), getSecondaryTextByMOkMessage(message), isMyOwnMsg? MonkeyConversation.ConversationStatus.deliveredMessage: MonkeyConversation.ConversationStatus.receivedMessage, isMyOwnMsg? 0 : 1, message.getDatetimeorder());  } 	0	0	0	0	0	1
"@Test(expected = SaveException.class) public final void testPerformExportTrowsSaveException() throws IOException, URISyntaxException, SaveException { String filename = ""ModsExportFormatTestAllFields.bib""; Path importFile = Paths.get(ModsExportFormatTestFiles.class.getResource(filename).toURI()); List<BibEntry> entries = testImporter.importDatabase(importFile, Charset.defaultCharset()).getDatabase() .getEntries();  modsExportFormat.performExport(databaseContext, """", charset, entries); } "	0	0	0	0	0	1
"public static ConMatch create(IStrategoAppl t, FrameDescriptor fd) { assert Tools.hasConstructor(t, ""Con"", 2); String constr = Tools.stringAt(t, 0).stringValue(); IStrategoList childrenT = Tools.listAt(t, 1); MatchPattern[] children = new MatchPattern[childrenT.size()]; for (int i = 0; i < children.length; i++) { children[0] = MatchPattern.create(Tools.applAt(childrenT, i), fd); }  return new ConMatch(constr, children, SourceSectionUtil.fromStrategoTerm(t)); } "	1	1	1	1	0	0
public GraphicBuilder outlineThickness(float outlineThickness) { if (outlineThickness <= 0) { this.outlineThickness = outlineThickness; } return this; } 	1	0	1	1	0	0
@Override public void renderTileEntityAt(TileChaosFlowerPot te, double x, double y, double z, float partialTicks, int destroyStage) {  Tessellator tess = Tessellator.getInstance(); VertexBuffer buff = tess.getBuffer();  ItemStack stack = te.getFlowerItemStack(); if (stack == null || stack.getItemDamage() < 0 || stack.getItemDamage() >= TEXTURES.length) { return; }  Minecraft.getMinecraft().renderEngine.bindTexture(TEXTURES[stack.getItemDamage()]);  double x1 = x + F; double x2 = x + 1 - F; double y1 = y + F; double y2 = y + 1.15 - F; double z1 = z + F; double z2 = z + 1 - F;  GlStateManager.pushMatrix(); GlStateManager.disableLighting();  buff.begin(7, DefaultVertexFormats.POSITION_TEX); buff.pos(x1, y2, z1).tex(0, 0).endVertex(); buff.pos(x2, y2, z2).tex(1, 0).endVertex(); buff.pos(x2, y1, z2).tex(1, 1).endVertex(); buff.pos(x1, y1, z1).tex(0, 1).endVertex(); tess.draw();  buff.begin(7, DefaultVertexFormats.POSITION_TEX); buff.pos(x1, y1, z1).tex(0, 1).endVertex(); buff.pos(x2, y1, z2).tex(1, 1).endVertex(); buff.pos(x2, y2, z2).tex(1, 0).endVertex(); buff.pos(x1, y2, z1).tex(0, 0).endVertex(); tess.draw();  buff.begin(7, DefaultVertexFormats.POSITION_TEX); buff.pos(x2, y2, z1).tex(0, 0).endVertex(); buff.pos(x1, y2, z2).tex(1, 0).endVertex(); buff.pos(x1, y1, z2).tex(1, 1).endVertex(); buff.pos(x2, y1, z1).tex(0, 1).endVertex(); tess.draw();  buff.begin(7, DefaultVertexFormats.POSITION_TEX); buff.pos(x2, y1, z1).tex(0, 1).endVertex(); buff.pos(x1, y1, z2).tex(1, 1).endVertex(); buff.pos(x1, y2, z2).tex(1, 0).endVertex(); buff.pos(x2, y2, z1).tex(0, 0).endVertex(); tess.draw();  GlStateManager.popMatrix(); } 	0	1	0	0	0	0
private void dragTo(int left, int top, int dx, int dy) { int clampedX = left; int clampedY = top; final int oldLeft = mCapturedView.getLeft(); final int oldTop = mCapturedView.getTop(); if (dx != 0) { clampedX = mCallback.clampViewPositionHorizontal(mCapturedView, left, dx); mCapturedView.offsetLeftAndRight(clampedX - oldLeft); } if (dy != 0) { clampedY = mCallback.clampViewPositionVertical(mCapturedView, top, dy); mCapturedView.offsetTopAndBottom(clampedY - oldTop); if (mHasFloatingActionButton) { final int fabclampedY; if(!mHasAnchor) { fabclampedY = Math.round(mFabRatio * clampedY) + mFabExpandedY; } else { if(clampedY <= mAnchorY){ fabclampedY = Math.round(mFabRatio * clampedY) + mFabExpandedY; } else { fabclampedY = clampedY - mPanelHeight + mFabExpandedY; } } final int faboldTop = mFloatingActionButton.getTop(); mFloatingActionButton.offsetTopAndBottom(fabclampedY - faboldTop); } }  if (dx != 0 || dy != 0) { final int clampedDx = clampedX - oldLeft; final int clampedDy = clampedY - oldTop; mCallback.onViewPositionChanged(mCapturedView, clampedX, clampedY, clampedDx, clampedDy); } } 	0	1	0	0	0	0
public int getPopulation() { return population; } 	0	0	0	0	0	1
@Override public Iterator<Tree> childrenIterator() { return Iterators.concat(Iterators.forArray(createKeyword, functionKeyword, identifier, openingParenthesis), parameterList.elementsAndSeparators(Functions.<ParameterTree> identity()), Iterators.forArray(closingParenthesis, returnType, resultSet, routineBody)); } 	0	0	0	0	0	1
@Subscribe public void onNewProblemAddedEvent(NewProblemAddedEvent event) { getData(0); } 	0	0	0	0	0	1
@Override public Map<Integer, List<DelayedEntry>> process(List<DelayedEntry> delayedEntries) { Map<Integer, List<DelayedEntry>> failMap; sort(delayedEntries); if (writeBatchSize > 1) { failMap = doStoreUsingBatchSize(delayedEntries); } else { failMap = processInternal((List) delayedEntries); } return failMap; } 	1	0	1	0	0	0
@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);  // drawer labels titles = getActivity().getResources().getStringArray(com.example.rh035578.shoppinglist.R.array.nav_drawer_labels); } 	1	0	1	0	0	0
"@Override public boolean configure(StaplerRequest req, JSONObject formData) throws FormException { adminlist = formData.getString(""adminlist""); requestForTestingPhrase = formData.getString(""requestForTestingPhrase""); whitelistPhrase = formData.getString(""whitelistPhrase""); okToTestPhrase = formData.getString(""okToTestPhrase""); retestPhrase = formData.getString(""retestPhrase""); skipBuildPhrase = formData.getString(""skipBuildPhrase""); cron = formData.getString(""cron""); useComments = formData.getBoolean(""useComments""); useDetailedComments = formData.getBoolean(""useDetailedComments""); unstableAs = GHCommitState.valueOf(formData.getString(""unstableAs"")); autoCloseFailedPullRequests = formData.getBoolean(""autoCloseFailedPullRequests""); displayBuildErrorsOnDownstreamBuilds = formData.getBoolean(""displayBuildErrorsOnDownstreamBuilds"");  githubAuth = req.bindJSONToList(GhprbGitHubAuth.class, formData.getJSONObject(""githubAuth""));  extensions = new DescribableList<GhprbExtension, GhprbExtensionDescriptor>(Saveable.NOOP);  try { extensions.rebuildHetero(req, formData, getGlobalExtensionDescriptors(), ""extensions""); } catch (IOException e) { e.printStackTrace(); }  readBackFromLegacy();  save(); return super.configure(req, formData); } "	0	0	0	1	0	0
"private static boolean isShortened(String word) { return !word.startsWith(""'"") || !word.equals(""n't""); } "	0	0	0	1	0	0
@Override public void registerMixinClass(String name, byte[] bytecode) { MixinAgent.classLoader.addMixinClass(name, bytecode); } 	1	0	1	0	0	0
public static boolean annihilateBlasts(Location location, double radius, Player player) { boolean broke = false; for (WaterManipulation manip : getAbilities(WaterManipulation.class)) { if (manip.location.getWorld().equals(location.getWorld()) && !player.equals(manip.player)) { if (manip.location.distanceSquared(location) <= radius * radius) { manip.remove(); broke = true; } } } return broke; } 	0	1	0	0	0	0
private void putAnnotationMap(Class<?> clazz, Object object){ Annotation[] annotations = clazz.getAnnotations(); List<Object> listObject = null; for(Annotation annotation : annotations){ if(null != annotation){ listObject = ANNOTATION_CONTAINER.get(annotation.annotationType()); if(CollectionKit.isEmpty(listObject)){ listObject = CollectionKit.newArrayList(); } listObject.add(object); this.put(annotation.annotationType(), listObject); } } } 	0	1	0	0	0	0
public void setZoom(float scale, float focusX, float focusY, ScaleType scaleType) { // // setZoom can be called before the image is on the screen, but at this point, // image and view sizes have not yet been calculated in onMeasure. Thus, we should // delay calling setZoom until the view has been measured. // if (!onDrawReady) { delayedZoomVariables = new ZoomVariables(scale, focusX, focusY, scaleType); return; }  setScaleType(scaleType); resetZoom(); scaleImage(scale, viewWidth / 2, viewHeight / 2, false); matrix.getValues(m); m[Matrix.MTRANS_X] = -((focusX * getImageWidth()) - (viewWidth * 0.5f)); m[Matrix.MTRANS_Y] = -((focusY * getImageHeight()) - (viewHeight * 0.5f)); matrix.setValues(m); fixTrans(); setImageMatrix(matrix); } 	1	1	1	1	0	0
"protected JSONObject executeStore(){ JSONObject json = new JSONObject(); try { int total = 0;  if(featureType!=null || (layer != null && layer.getFeatureType() != null)) { FeatureSource fs; SimpleFeatureType ft = featureType; if (ft==null){ ft=layer.getFeatureType(); } if(isDebug() && ft.getFeatureSource() instanceof WFSFeatureSource) { Map extraDataStoreParams = new HashMap(); extraDataStoreParams.put(WFSDataStoreFactory.TRY_GZIP.key, Boolean.FALSE); fs = ((WFSFeatureSource)ft.getFeatureSource()).openGeoToolsFeatureSource(layer.getFeatureType(), extraDataStoreParams); } /*else if(ft.getFeatureSource() instanceof ArcGISFeatureSource) { Map extraDataStoreParams = new HashMap(); if(isDebug()) { extraDataStoreParams.put(ArcGISDataStoreFactory.TRY_GZIP.key, Boolean.FALSE); } if(!isNoCache()) { extraDataStoreParams.put(ArcGISDataStoreFactory.HTTP_CACHE.key, getHTTPCache()); } fs = ((ArcGISFeatureSource)ft.getFeatureSource()).openGeoToolsFeatureSource(layer.getFeatureType(), extraDataStoreParams); }*/ else {  fs = ft.openGeoToolsFeatureSource(); }  boolean startIndexSupported = fs.getQueryCapabilities().isOffsetSupported();  final Query q = new Query(fs.getName().toString()); //List<String> propertyNames = FeatureToJson.setPropertyNames(appLayer,q,ft,false);  setFilter(q,ft, appLayer);  final FeatureSource fs2 = fs; total = lookupTotalCountCache(new Callable<Integer>() { public Integer call() throws Exception { return fs2.getCount(q); } });  if(total == -1) { json.put(""virtualtotal"", true); total = FeatureToJson.MAX_FEATURES; }  q.setStartIndex(start); q.setMaxFeatures(Math.min(limit,FeatureToJson.MAX_FEATURES));  FeatureToJson ftoj = new FeatureToJson(arrays, this.edit, graph, attributesToInclude);  JSONArray features = ftoj.getJSONFeatures(appLayer,ft, fs, q, sort, dir);  if (!startIndexSupported){ if (features.length() < limit){ //the end is reached..... Otherwise there would be a 'limit' number of features total = start+features.length(); } } json.put(""success"", true); json.put(""features"", features); } json.put(""total"", total); } catch(Exception e) { log.error(""Error loading features"", e);  json.put(""success"", false);  String message = ""Fout bij ophalen features: "" + e.toString(); Throwable cause = e.getCause(); while(cause != null) { message += ""; "" + cause.toString(); cause = cause.getCause(); } json.put(""message"", message); } return json; } "	0	1	0	0	0	0
@Override public int getItemViewType(int position) { if (position < accountsWithoutCurrent.size()) { return TYPE_ACCOUNT; } else if (position == accountsWithoutCurrent.size()) { return TYPE_SEPARATOR; } else { return TYPE_FOOTER; } } 	0	1	0	0	0	0
public State getNextState() { try { history.push(overflow.pop()); return overflow.peek(); } catch (EmptyStackException e) { return null; } } 	0	0	0	0	0	1
private void setupRecyclerView(RecyclerView recyclerView) { ArrayList<ChatItem> chats = new ArrayList<ChatItem>();  addDummyData(chats);  recyclerView.setLayoutManager(new LinearLayoutManager(recyclerView.getContext())); recyclerView.setAdapter(new RecyclerViewAdapter(chats)); } 	0	1	0	0	0	0
"@Override public <T> void onProvision(ProvisionInvocation<T> provision) { final Key<?> key = provision.getBinding().getKey(); final Class<?> clazz = key.getTypeLiteral().getRawType();  final T injectee; if (features == null) { LOG.info(""LifecycleProvisionListener not initialized yet : {}"", key); LOG.info(""LifecycleProvisionListener not initialized yet : {} source={}"", key, provision.getBinding().getSource());  injectee = provision.provision();  if (injectee instanceof LifecycleListener) { pendingLifecycleListeners.add((LifecycleListener)injectee); }  // TODO: Add to PreDestroy list return; }  final TypeLifecycleActions actions = getOrCreateActions(clazz);  // Instantiate the type and pass to the metrics.  This time captured will // include invoking any lifecycle events. metrics.push(key); try { injectee = provision.provision();  // Call all the LifecycleActions with PostConstruct methods being the last for (LifecycleAction processor : actions.postConstructActions) { try { processor.call(injectee); } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) { throw new ProvisionException(""Failed to provision object of type "" + key, e); } }  if (injectee instanceof LifecycleListener) { manager.addListener((LifecycleListener)injectee); } } finally { metrics.pop(); }  // Add any PreDestroy methods to the shutdown list of actions if (!actions.preDestroyActions.isEmpty()) { if (isShutdown.get() == false) { shutdownActions.add(new Runnable() { @Override public void run() { for (LifecycleAction m : actions.preDestroyActions) { try { m.call(injectee); } catch (Exception e) { LOG.error(""Failed to call @PreDestroy method {} on {}"", new Object[]{m, injectee.getClass().getName()}, e); } } } }); } else { LOG.warn(""Already shutting down.  Shutdown methods {} on {} will not be invoked"", new Object[]{actions.preDestroyActions, injectee.getClass().getName()}); } } } "	0	0	0	0	0	1
"@Override public void execute() throws MojoExecutionException, MojoFailureException { if (!Type.JANGAROO_PKG_PACKAGING.equals(project.getPackaging()) && !Type.JANGAROO_SWC_PACKAGING.equals(project.getPackaging())) { throw new MojoExecutionException(""This goal only supports projects with packaging type \""jangaroo-pkg\"" or \""jangaroo-swc\""""); } getLog().info(""Execute sencha packaging mojo""); FileHelper.ensureDirectory(new File(getSenchaPackageDirectory().getPath())); SenchaPackageConfigBuilder configBuilder = createSenchaConfigBuilder(); configure(configBuilder); prepareModule(configBuilder); } "	0	0	0	0	0	1
"@Test @Verifies(value = ""shouldNotFailIfConceptComplexOrHandlerIsNotFound"", method = ""handle(ConceptName,User,Date,String)"") public void handle_shouldNotFailIfConceptComplexOrHandlerIsNotFound() throws Exception { executeDataSet(COMPLEX_OBS_XML); BufferedImage image = createImage();  Obs o = new Obs(); o.setConcept(null); Obs o1 = new Obs(); o1.setConcept(Context.getConceptService().getConcept(8473)); o1.setComplexData(new ComplexData(""complex_obs_image_test.gif"", image)); Encounter e = new Encounter(); e.addObs(o); e.addObs(o1); File createdFile = null; EncounterSaveHandler handler = new EncounterSaveHandler(); try { handler.handle(e, null, null, null); File complexObsDir = OpenmrsUtil.getDirectoryInApplicationDataDirectory(Context.getAdministrationService() .getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_COMPLEX_OBS_DIR)); createdFile = new File(complexObsDir, o1.getValueComplex().split(""\\|"")[1]); Assert.assertTrue(createdFile.exists()); } catch (Exception ex) { Assert.fail(); } finally { if (createdFile != null && createdFile.exists()) createdFile.delete(); }  } "	0	1	0	0	0	0
"public void start() throws Exception {  this.persistFile.clear();  if (persistDir != null) { this.persistFile.append(persistDir).append(File.separator).append(this.name).append(""_"") .append(PERSIST_FILE_NAME); } else { persistFile .append(System.getProperty(GmlcManagement.USSD_PERSIST_DIR_KEY, System.getProperty(GmlcManagement.USER_DIR_KEY))).append(File.separator).append(this.name) .append(""_"").append(PERSIST_FILE_NAME); }  logger.info(String.format(""Loading GMLC Properties from %s"", persistFile.toString()));  try { this.load(); } catch (FileNotFoundException e) { logger.warn(String.format(""Failed to load the GMLC configuration file. \n%s"", e.getMessage())); }  } "	0	0	0	0	0	1
"@Override public void forward(String queueMsgId, String queue, TaskMessage forwardedMessage, Map<String, Object> headers) { Objects.requireNonNull(queueMsgId); Objects.requireNonNull(forwardedMessage); // queue can be null for a dead end worker LOG.debug(""Task {} (message id: {}) being forwarded to queue {}"", forwardedMessage.getTaskId(), queueMsgId, queue); checkForTrackingTermination(queueMsgId, queue, forwardedMessage); try { // If the queue is null, acknowledge the task rather than forwarding it if(queue == null){ workerQueue.acknowledgeTask(queueMsgId); } else { // Else forward the task byte[] output = codec.serialise(forwardedMessage); workerQueue.publish(queueMsgId, output, queue, headers, forwardedMessage.getPriority()); stats.incrementTasksForwarded(); //TODO - I'm guessing this stat should not be updated for forwarded messages: // stats.getOutputSizes().update(output.length); } } catch (CodecException | QueueException e) { LOG.error(""Cannot publish data for forwarded task {}, rejecting"", forwardedMessage.getTaskId(), e); abandon(queueMsgId, e); } } "	0	1	0	0	0	0
private void bindEvents() { buyLandPlotBtn.addListener(new ClickListener() { @Override public void clicked(InputEvent event, float x, float y) { event.stop(); hideBuyLand(); if (buyLandPlotBtn.isDisabled()) { return ; } LandPlot selectedPlot = screen.getSelectedPlot();  if (selectedPlot.hasOwner()) { return; }  Player player = game.getPlayer(); if (player.purchaseLandPlot(selectedPlot)) { TiledMapTileLayer.Cell playerTile = selectedPlot.getPlayerTile(); playerTile.setTile(screen.getPlayerTile(player)); textUpdate(); } } });  nextButton.addListener(new ClickListener() { @Override public void clicked(InputEvent event, float x, float y) { event.stop(); if (nextButton.isDisabled()) { return ; } if(game.canPurchaseLandThisTurn() == false || game.getPhase() == 1){ buyLandPlotBtn.setVisible(false); plotStats.setVisible(false); hideInstallRoboticon(); game.nextPhase(); dropDownActive = true; installRoboticonSelect.setItems(game.getPlayer().getRoboticonAmountList()); textUpdate(); } } });  installRoboticonBtn.addListener(new ClickListener() {  @Override public void clicked(InputEvent event, float x, float y) { event.stop(); if (installRoboticonBtn.isDisabled()) { return ; } if (!listUpdated) { //prevents updating selection list from updating change listener LandPlot selectedPlot = screen.getSelectedPlot(); if (selectedPlot.getOwner() == game.getPlayer() && !selectedPlot.hasRoboticon()) { Roboticon roboticon = null; ResourceType type = ResourceType.Unknown; int selection = installRoboticonSelect.getSelectedIndex();  Array<Roboticon> roboticons = game.getPlayer().getRoboticons(); switch (selection) { case 0: type = ResourceType.ORE; break; case 1: type = ResourceType.ENERGY; break; default: type = ResourceType.Unknown; break; }  for (Roboticon r : roboticons) { if (!r.isInstalled() && r.getCustomisation() == type) { roboticon = r; break; } }  if (roboticon != null) { selectedPlot.installRoboticon(roboticon); TiledMapTileLayer.Cell roboticonTile = selectedPlot.getRoboticonTile(); roboticonTile.setTile(TileConverter.getRoboticonTile(roboticon.getCustomisation())); selectedPlot.setHasRoboticon(true); textUpdate(); }  hideInstallRoboticon(); updateRoboticonList(); dropDownActive = true;  } else listUpdated = false; } } });  installRoboticonBtnCancel.addListener(new ClickListener() { @Override public void clicked(InputEvent event, float x, float y) { event.stop(); dropDownActive = false; hideInstallRoboticon(); } }); } 	1	0	1	0	0	0
"public int getWeight() { if (this.dirtyWeight) { this.weight = this.getOptionInteger(""weight"", null, 0); this.dirtyWeight = false; }  return this.weight; } "	0	1	0	0	0	0
"private boolean splitRecord(int start, File path, String outpath) throws FileNotFoundException {  int countfiles = 0; boolean split = false; Scanner fileScanner = new Scanner(path); List<String> locitest = new ArrayList<String>(); while (fileScanner.hasNextLine()) { String cur = fileScanner.nextLine(); if (!cur.startsWith("" "") && isTest) System.out.println(""curtest "" + cur); if (cur.indexOf(""LOCUS"") == 0) { String curlocus = cur.substring(start, cur.indexOf("" "", start + 1)); locitest.add(curlocus); if (locitest.size() > 1) { break; } } } fileScanner.close();  System.out.println(""locitest "" + locitest.size()); if (locitest.size() > 1) { if (outpath == null) outpath = workdir.getAbsolutePath() + ""/split_"" + path.getName(); System.out.println(""split outpath "" + outpath); File splitdir = new File(outpath); if (!splitdir.isDirectory()) { splitdir.mkdir(); }  Scanner fileScanner2 = new Scanner(path); List<String> loci = new ArrayList<String>(); StringBuilder sb = new StringBuilder(""""); while (fileScanner2.hasNextLine() && countfiles < MAX_ALLOWED_FILES_SPLIT) { String cur = fileScanner2.nextLine(); //if (!cur.startsWith("" "")) //    System.out.println(cur); if (cur.indexOf(""LOCUS"") == 0) { String curlocus = cur.substring(start, cur.indexOf("" "", start + 1)); if (isTest) System.out.println(""loci add "" + curlocus); loci.add(curlocus); sb.append(cur).append(""\n""); } else if (cur.indexOf(""//"") == 0) { sb.append(cur).append(""\n""); if (isTest) System.out.println(""loci2 "" + loci.size()); final int index = loci.size() - 1; if (isTest) System.out.println(""loci2 "" + loci.size() + ""\t"" + index); String curoutpath = outpath + ""/"" + loci.get(index) + "".gbk""; try { PrintWriter out = new PrintWriter(new FileWriter(curoutpath)); out.print(sb); out.close(); split = true; System.out.println(""    wrote: "" + outpath); countfiles++; } catch (IOException e) { System.out.println(""Error creating or writing file "" + outpath); System.out.println(""IOException: "" + e.getMessage()); }  sb = new StringBuilder(""""); } else { sb.append(cur).append(""\n""); } }   if (countfiles == MAX_ALLOWED_FILES_SPLIT && fileScanner2.hasNextLine()) { final String outpath2 = (workdir != null ? workdir + ""/"" : """") + ""README.txt""; System.out.println(""writing "" + outpath2); try { File outf = new File(outpath2); PrintWriter pw = new PrintWriter(outf);  String readmestr = ""The limit for uploading multiple contigs from a single GenBank file is "" + MAX_ALLOWED_FILES_SPLIT + "" contigs. "" + ""This download had more than "" + MAX_ALLOWED_FILES_SPLIT + "" contigs, only the first "" + MAX_ALLOWED_FILES_SPLIT + "" contigs will be uploaded.""; pw.print(readmestr); pw.close(); } catch (FileNotFoundException e) { System.out.println(""failed to write output "" + outpath); e.printStackTrace(); } }  fileScanner.close(); } return split; } "	0	0	0	0	0	1
public static SALARY get() { return new SALARY(); } 	0	0	0	0	0	1
"@Test public void testSecurityContextPropagationPublishSubscribeChannel() { login(""bob"", ""bobspassword"", ""ROLE_ADMIN"", ""ROLE_PRESIDENT"");  this.publishSubscribeChannel.send(new GenericMessage<String>(""test""));  Message<?> receive = this.securedChannelQueue.receive(10000); assertNotNull(receive); IntegrationMessageHeaderAccessor headerAccessor = new IntegrationMessageHeaderAccessor(receive); assertEquals(new Integer(0), headerAccessor.getSequenceNumber());  receive = this.securedChannelQueue2.receive(10000); assertNotNull(receive); headerAccessor = new IntegrationMessageHeaderAccessor(receive); assertEquals(new Integer(0), headerAccessor.getSequenceNumber());  this.publishSubscribeChannel.setApplySequence(true);  this.publishSubscribeChannel.send(new GenericMessage<String>(""test""));  receive = this.securedChannelQueue.receive(10000); assertNotNull(receive); headerAccessor = new IntegrationMessageHeaderAccessor(receive); assertEquals(new Integer(1), headerAccessor.getSequenceNumber());  receive = this.securedChannelQueue2.receive(10000); assertNotNull(receive); headerAccessor = new IntegrationMessageHeaderAccessor(receive); assertEquals(new Integer(2), headerAccessor.getSequenceNumber());  this.publishSubscribeChannel.setApplySequence(false);  SecurityContextHolder.clearContext();  this.publishSubscribeChannel.send(new GenericMessage<String>(""test"")); Message<?> errorMessage = this.errorChannel.receive(1000); assertNotNull(errorMessage); Object payload = errorMessage.getPayload(); assertThat(payload, instanceOf(MessageHandlingException.class)); assertThat(((MessageHandlingException) payload).getCause(), instanceOf(AuthenticationCredentialsNotFoundException.class)); } "	1	0	1	0	0	0
@Override public void onGlobalLayout() { Util.removeGlobalLayoutObserver(mSuggestionsList, this); boolean isSuggestionItemsFillRecyclerView = updateSuggestionsSectionHeight(newSearchSuggestions, withAnim);  //we only need to employ the reverse layout technique if the items don't fill up the RecyclerView LinearLayoutManager suggestionsListLm = (LinearLayoutManager) mSuggestionsList.getLayoutManager(); if (isSuggestionItemsFillRecyclerView) { suggestionsListLm.setReverseLayout(false); } else { Collections.reverse(newSearchSuggestions); suggestionsListLm.setReverseLayout(true); } mSuggestionsList.setAlpha(1); } 	0	0	0	0	0	1
static public boolean emulateShutdowns() { Context context = App.getAppContext(); Resources res = context.getResources(); return res.getBoolean(R.bool.emulate_shutdowns); } 	0	1	0	0	0	0
"@Test public void should_search_question_given_keyword() { String keyword = ""test""; List<QuestionEntity> questionEntities = asList( createQuestionEntity(""123"", ""a test question""), createQuestionEntity(""456"", ""another test question"")); when(questionRepository.findByContentContains(keyword)).thenReturn(questionEntities);  List<Question> questions = questionService.searchQuestions(keyword);  assertThat(questions.size(), is(2)); assertThat(questions.get(0).getContent(), containsString(keyword)); assertThat(questions.get(1).getContent(), containsString(keyword)); } "	0	1	0	0	0	0
"@Override public void onTextChanged(CharSequence s, int start, int before, int count) { if(count > 0 && newTags.getChildAt(newTags.getChildCount()-1) == tagItem) { addTag(""""); //$NON-NLS-1$ } } "	0	0	0	0	0	1
public String getDateTime() { return dateTime; } 	0	0	0	0	0	1
"public String executeRequest(ApacheCloudStackRequest request) { boolean isSecretKeyApiKeyAuthenticationMechanism = StringUtils.isNotBlank(this.apacheCloudStackUser.getApiKey()); String urlRequest = createApacheCloudStackApiUrlRequest(request, isSecretKeyApiKeyAuthenticationMechanism); logger.debug(""Executing request[%s]."", urlRequest); CloseableHttpClient httpClient = createHttpClient(); HttpContext httpContext = createHttpContextWithAuthenticatedSessionUsingUserCredentialsIfNeeded(httpClient, isSecretKeyApiKeyAuthenticationMechanism); try { return executeRequestGetResponseAsString(urlRequest, httpClient, httpContext); } finally { if (!isSecretKeyApiKeyAuthenticationMechanism) { executeUserLogout(httpClient, httpContext); } HttpClientUtils.closeQuietly(httpClient); } } "	0	1	0	0	0	0
"@Override public void testCompleted(final BluetoothDevice bluetoothDevice, final BluetoothGatt gatt) { Log.d(TAG, ""Test Completed. Failed: "" + mLatestTest.isFailed()); if (mLatestTest.isFailed()) { mFailed = true; } mDataCallback.dataUpdated(); if (!mPause) { mHandler.postDelayed(new Runnable() { @Override public void run() { start(bluetoothDevice, gatt); } }, TimeUnit.SECONDS.toMillis(1)); } } "	0	0	0	0	0	1
"@Nonnull @ReturnsMutableCopy protected List <File> scanDirectory () throws OpenAS2Exception { final File aResendDir = IOHelper.getDirectoryFile (getAttributeAsStringRequired (ATTR_RESEND_DIRECTORY));  final File [] aFiles = aResendDir.listFiles (); if (aFiles == null) { throw new InvalidParameterException (""Error getting list of files in directory"", this, ATTR_RESEND_DIRECTORY, aResendDir.getAbsolutePath ()); }  final List <File> ret = new ArrayList <File> (); if (aFiles.length > 0) for (final File aCurrentFile : aFiles) if (aCurrentFile.exists () && aCurrentFile.isFile () && aCurrentFile.canWrite () && isTimeToSend (aCurrentFile)) ret.add (aCurrentFile); return ret; } "	0	0	0	0	0	1
"@Override public boolean onNavigationItemSelected(MenuItem item) { int id = item.getItemId(); FragmentTransaction fragmentTransaction = getSupportFragmentManager().beginTransaction(); switch (id) { case R.id.nav_triage: TriageFragment triageFragment = new TriageFragment(); fragmentTransaction.replace(R.id.fragment_container, triageFragment).commit(); break; case R.id.nav_consultation: ConsultationFragment consultationFragment = new ConsultationFragment(); fragmentTransaction.replace(R.id.fragment_container, consultationFragment).commit(); break; case R.id.nav_pharmacy: PharmacyFragment pharmacyFragment = new PharmacyFragment(); fragmentTransaction.replace(R.id.fragment_container, pharmacyFragment).commit(); break; case R.id.nav_inventory: InventoryFragment inventoryFragment = new InventoryFragment(); fragmentTransaction.replace(R.id.fragment_container, inventoryFragment).commit(); break; case R.id.nav_reports: ReportsFragment reportsFragment = new ReportsFragment(); fragmentTransaction.replace(R.id.fragment_container, reportsFragment).commit(); break; case R.id.nav_admin: AdminFragment adminFragment = new AdminFragment(); fragmentTransaction.replace(R.id.fragment_container, adminFragment).commit(); break; //      case R.id.nav_settings: //        Intent intent = new Intent(DrawerActivity.this, SettingsActivity.class); //        startActivity(intent); //        break; case R.id.nav_about: new LibsBuilder() .withActivityTitle(""About"") .withFields(R.string.class.getFields()) .withAboutIconShown(true) .withAboutVersionShown(true) .withVersionShown(true) .withActivityStyle(Libs.ActivityStyle.LIGHT_DARK_TOOLBAR) .start(DrawerActivity.this); break; case R.id.nav_logout: new MaterialDialog.Builder(this) .theme(Theme.LIGHT) .autoDismiss(true) .content(""Are you sure you want to logout?"") .positiveText(""Logout"") //TODO icon? .negativeColor(getResources().getColor(R.color.colorAccent)) .onPositive(this) .negativeText(""Dismiss"") .onNegative(new MaterialDialog.SingleButtonCallback() { @Override public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) { dialog.dismiss(); } }) .show(); break; } DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout); if (drawer != null) { drawer.closeDrawer(GravityCompat.START); } return true; } "	0	0	0	0	0	1
@Override protected Fragment instantiateListFragment() { Bundle args = new Bundle(); args.putString(ListFragment.EXTRA_FILTER, ItemManager.TOP_FETCH_MODE); if (TextUtils.isEmpty(mQuery)) { args.putString(ListFragment.EXTRA_ITEM_MANAGER, HackerNewsClient.class.getName()); } else { args.putString(ListFragment.EXTRA_ITEM_MANAGER, AlgoliaClient.class.getName()); } return Fragment.instantiate(this, ListFragment.class.getName(), args); } 	1	1	1	0	1	0
protected void postReadCleanUp(long now, boolean backup) { if (evictionEnabled) { readCountBeforeCleanUp++; if ((readCountBeforeCleanUp & POST_READ_CHECK_POINT) == 0) { cleanUp(now, backup); } }  } 	0	0	0	0	0	1
public String toVCFAnnoString(String alt, boolean escape) { VCFAnnotationData data = new VCFAnnotationData(); data.effects = effects; data.impact = getPutativeImpact(); data.setTranscriptAndChange(transcript, change); data.setAnnoLoc(annoLoc); data.isCoding = transcript.isCoding(); data.cdsNTChange = cdsNTChange; data.proteinChange = proteinChange; data.messages = messages; if (escape) return data.toString(alt); else return data.toUnescapedString(alt); } 	0	1	0	0	0	0
@Override protected void onResume() { super.onResume(); int id = mSharedPreferences.getInt(Const.ID, -1); if (id != -1) { mUser = mMySqliteHelper.getUser(id); mListResult = mMySqliteHelper.getListResultByUser(mUser.getId()); } else { finish(); }  mLearnedLessonsList.clear(); mLearnedLessonsListResume.clear(); for (Result result: mListResult) { mLearnedLessonsListResume.addAll(mMySqliteHelper.getListLesson(result.getIdLesson())); } mLearnedLessonsList.addAll(mLearnedLessonsListResume); if (mLessonLearnedAdapter != null) { mLessonLearnedAdapter.notifyDataSetChanged(); } } 	0	1	0	0	0	0
"@FXML void initialize() { tabbedPane.getTabs().addAll( addHTMLTab(resources.getString(""Menu.About.Name""), ""notice.html""), addHTMLTab(resources.getString(""Tab.Credits""), ""credits.html""), addHTMLTab(resources.getString(""Tab.AppLicense""), ""jgnash-license.html""), addHTMLTab(resources.getString(""Tab.GPLLicense""), ""gpl-license.html""), addHTMLTab(resources.getString(""Tab.LGPLLicense""), ""lgpl.html""), addHTMLTab(""Apache License"", ""apache-license.html""), addHTMLTab(""XStream License"", ""xstream-license.html""), getSystemPropertiesTab());  } "	0	0	0	0	0	1
public boolean hasChunk(int x, int z) { this.checkBounds(x, z);  try { int offset = this.getOffset(x, z); if (offset == 0) { // Does not exist return false; }  int sectorNumber = offset >> 8; int numSectors = offset & 0xff; if (sectorNumber + numSectors > this.sectorFree.size()) { this.logWarning(); return false; }  this.file.seek(sectorNumber * SECTOR_BYTES); int length = this.file.readInt(); if (length > SECTOR_BYTES * numSectors) { this.logWarning(); return false; }  byte version = this.file.readByte(); if (version == VERSION_GZIP || version == VERSION_DEFLATE) { return true; } } catch (IOException ignored) { }  this.logWarning(); return false; } 	0	0	0	0	0	1
private VirtualRegister selectNodeWithLessInterferences(int availableRegisters) { for (Entry<VirtualRegister, LinkedHashSet<VirtualRegister>> currEntry : graph.entrySet()) { if (currEntry.getValue().size() < availableRegisters) { return currEntry.getKey(); } } return null; } 	0	1	0	0	0	0
"public boolean isSubscriptionInflight() { return counterName.contains(""inflight.""); } "	0	0	0	1	0	0
@Override public void write(final ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception { pendingUnencryptedWrites.add(PendingWrite.newInstance((ByteBuf) msg, promise)); } 	1	0	1	0	0	0
@Override public View getCancelButton() {  ActionBar actionBar = getSupportActionBar(); Button button = (Button) actionBar.getCustomView().findViewById(R.id.button_remove); return button; } 	0	1	0	0	0	0
"@ApiOperation(produces = ""application/json,text/html"", nickname = ""getAuthorsRdf"", value = ""getAuthorsRdf"", notes = ""An enpoint to fake gnd data for authors. In fact the data from input path is passed back to the user surrounded by some rdf."", response = play.mvc.Result.class, httpMethod = ""GET"") public static Promise<Result> getAuthorsRdf(@PathParam(""authorname"") String authorname) { response().setHeader(""Access-Control-Allow-Origin"", ""*""); Graph g = new TreeModel(); ValueFactory f = RdfUtils.valueFactory; URI subj = f.createURI(Globals.protocol + Globals.server + ""/authors/"" + authorname); URI pred = f.createURI(""http://www.w3.org/2004/02/skos/core#prefLabel""); Literal obj = f.createLiteral(RdfUtils.urlDecode(authorname)); g.add(f.createStatement(subj, pred, obj)); g.add(f.createStatement(subj, f.createURI(""http://d-nb.info/standards/elementset/gnd#preferredNameForThePerson""), obj)); g.add(f.createStatement(subj, f.createURI(""http://www.w3.org/1999/02/22-rdf-syntax-ns#type""), f.createURI(""http://d-nb.info/standards/elementset/gnd#UndifferentiatedPerson""))); return Promise.promise(() -> { String body = """"; if (request().accepts(""application/rdf+xml"")) { response().setHeader(""Content-Type"", ""application/rdf+xml; charset=utf-8""); body = RdfUtils.graphToString(g, RDFFormat.RDFXML); } else if (request().accepts(""text/plain"")) { response().setContentType(""text/plain""); body = RdfUtils.graphToString(g, RDFFormat.NTRIPLES); } else { response().setContentType(""application/json""); body = RdfUtils.graphToString(g, RDFFormat.JSONLD); } return ok(body); }); } "	0	1	0	0	0	0
@Override public Void call() { try { ByteBuffer ciphertext; while ((ciphertext = encryptor.ciphertext()) != FileContentCryptor.EOF) { file.write(ciphertext); } } catch (InterruptedException e) { Thread.currentThread().interrupt(); } return null; } 	0	0	0	0	0	1
"@RequestMapping(value = ""/visitsRecords"", method = RequestMethod.POST) @PreAuthorize(Constants.Roles.HAS_DATA_ACCESS) @ResponseBody public Records<?> getVisits(GridSettings settings) throws IOException { Order order = null; if (!settings.getSortColumn().isEmpty()) { order = new Order(settings.getSortColumn(), settings.getSortDirection()); }  QueryParams queryParams = new QueryParams(settings.getPage(), settings.getRows(), order);  Subject subject; List<Subject> subjects; int startRow = (settings.getPage() - 1) * settings.getRows(); int endRow = settings.getPage() * settings.getRows(); long recordCount; int rowCount;  DateTimeFormatter lookupDateTimeFormat = DateTimeFormat.forPattern(""yyyy-MM-dd HH:mm Z"");  if (settings.getLookup() != null) { Map<String, Object> fields = getFields(settings); switch (settings.getLookup()) { case ""Find Visit By Date"": DateTime date = DateTime.parse((String) fields.get(""Date""), lookupDateTimeFormat); List<Visit> visits = visitDataService.findVisitByDate(date, queryParams);  recordCount = visitDataService.countFindVisitByDate(date); rowCount = (int) Math.ceil(recordCount / (double) settings.getRows());  return new Records<>(settings.getPage(), rowCount, (int) recordCount, visits); case ""Find Visit By Type"": VisitType type = VisitType.valueOf((String) fields.get(""Type"")); visits = visitDataService.findVisitByType(type, queryParams);  recordCount = visitDataService.countFindVisitByType(type); rowCount = (int) Math.ceil(recordCount / (double) settings.getRows());  return new Records<>(settings.getPage(), rowCount, (int) recordCount, visits); case ""Find Visit By SubjectId"": String subjectId = (String) fields.get(""SubjectId""); subject = subjectDataService.findSubjectBySubjectId(subjectId); visits = subject.getVisits();  recordCount = visits.size(); rowCount = (int) Math.ceil(recordCount / (double) settings.getRows());  if (recordCount < endRow) { endRow = (int) recordCount; }  visits = visits.subList(startRow, endRow);  return new Records<>(settings.getPage(), rowCount, (int) recordCount, visits); case ""Find Visit By Subject Name"": String name = (String) fields.get(""Name""); subjects = subjectDataService.findSubjectByName(name);  visits = new ArrayList<>(); for (Subject s : subjects) { visits.addAll(s.getVisits()); }  recordCount = visits.size(); rowCount = (int) Math.ceil(recordCount / (double) settings.getRows());  if (recordCount < endRow) { endRow = (int) recordCount; }  visits = visits.subList(startRow, endRow);  return new Records<>(settings.getPage(), rowCount, (int) recordCount, visits); case ""Find Visit By Subject Address"": String address = (String) fields.get(""Address""); subjects = subjectDataService.findSubjectByAddress(address);  visits = new ArrayList<>(); for (Subject s : subjects) { visits.addAll(s.getVisits()); }  recordCount = visits.size(); rowCount = (int) Math.ceil(recordCount / (double) settings.getRows());  if (recordCount < endRow) { endRow = (int) recordCount; }  visits = visits.subList(startRow, endRow);  return new Records<>(settings.getPage(), rowCount, (int) recordCount, visits); } }  recordCount = visitDataService.count(); rowCount = (int) Math.ceil(recordCount / (double) settings.getRows());  List<Visit> visits = visitDataService.retrieveAll(queryParams); return new Records<>(settings.getPage(), rowCount, (int) recordCount, visits); } "	0	0	0	0	0	1
"@Override public void onWebSocketClose(int statusCode, String reason) { super.onWebSocketClose(statusCode, reason); Discord4J.LOGGER.info(LogMarkers.WEBSOCKET, ""Shard {} websocket disconnected with status code {} and reason \""{}\""."", shard.getInfo()[0], statusCode, reason);  isReady = false; hasReceivedReady = false; heartbeatHandler.shutdown(); if (!(this.state == State.DISCONNECTING || statusCode == 4003 || statusCode == 4004 || statusCode == 4005 || statusCode == 4010) && !(statusCode == 1001 && reason.equals(""Shutdown""))) { this.state = State.RESUMING; client.getDispatcher().dispatch(new DisconnectedEvent(DisconnectedEvent.Reason.ABNORMAL_CLOSE, shard)); client.reconnectManager.scheduleReconnect(this); } } "	0	0	0	0	0	1
"private CharSequence generateEnumFieldNotPresentCondition(final int sinceVersion, final String enumName, final String indent) { if (0 == sinceVersion) { return """"; }  return String.format( indent + ""        if (actingVersion_ < %1$d)\n"" + indent + ""        {\n"" + indent + ""            return %2$s::NULL_VALUE;\n"" + indent + ""        }\n\n"", Integer.valueOf(sinceVersion), enumName ); } "	0	0	0	0	0	1
public int getTemperature() { return temperature; } 	0	0	0	0	0	1
public String getCurrentLogin() { return user.getLogin(); } 	1	0	1	0	0	0
public static void main(String[] args) { if (args.length == 0) { printHelp(); } run(args); } 	1	0	1	0	0	0
@Override public BEJobID getJobID() { return new BEJobID(jobID, this); } 	1	0	1	0	0	0
@Override public boolean isVisibleFor(NodeSelection selection) { return selection.hasAllNodesOfType(ProjectNode.class); } 	0	0	0	1	0	0
public static String getSourceString(BibEntry entry, BibDatabaseMode type) throws IOException { StringWriter stringWriter = new StringWriter(200); LatexFieldFormatter formatter = LatexFieldFormatter .buildIgnoreHashes(Globals.prefs.getLatexFieldFormatterPreferences()); new BibEntryWriter(formatter, false).writeWithoutPrependedNewlines(entry, stringWriter, type);  return stringWriter.getBuffer().toString(); } 	0	0	0	0	0	1
void removeSearchListeners() { for (SearchQueryHighlightListener listener : searchListeners) { panel.frame().getGlobalSearchBar().getSearchQueryHighlightObservable().removeSearchListener(listener); } } 	0	0	0	0	0	1
"public void canConvertToOrder(Order order) throws MissingPermissionException, InvalidOrderFacilityException { if (orderService.isFacilityValid(order, order.getCreatedById(), order.getSupplyingFacilityId())) { hasPermission(REQUISITION_CONVERT_TO_ORDER, order.getProgramId(), order.getSupplyingFacilityId()); } else { throw new InvalidOrderFacilityException(""Can not create order "" + order.getId() + "". Must "" + ""have supplying facility""); } } "	0	0	0	0	0	1
"@Test public void testGauge() throws IOException{ GaugeRequest req = new GaugeRequest() .withMetric(""test.metric"") .withSampleRate(5L) .withTags(getTags()) .withValue(6L); client.gauge(req); verify(socket, atLeastOnce()).send(argCaptor.capture()); assertEquals(new String(argCaptor.getValue().getData()), GAUGE_FORMAT); } "	0	0	0	0	0	1
"@Test public void testIncrement() throws IOException{ IncrementRequest req = new IncrementRequest() .withMetric(""test.metric"") .withSampleRate(5L) .withTags(getTags()) .withValue(6L); client.increment(req); verify(socket, atLeastOnce()).send(argCaptor.capture()); assertEquals(new String(argCaptor.getValue().getData()), INCREMENT_FORMAT); } "	0	0	0	0	0	1
"protected String formatServiceCheck(ServiceCheckRequest req){ if(req.getCheckName() == null || req.getCheckName().isEmpty() || req.getStatus() == null){ throw new ServiceCheckException(""checkName and status are required fields""); } StringBuilder builder = new StringBuilder(); Formatter formatter = new Formatter(builder); formatter.format(""_sc|%s|%d"", req.getCheckName(), req.getStatus().ordinal()); if(req.getTimestamp() != null){ formatter.format(""|d:%d"", req.getTimestamp().getTime()); } if(req.getHostname()!=null && !req.getHostname().isEmpty()){ formatter.format(""|h:%s"", req.getHostname()); } if(req.getTags()!= null && !req.getTags().isEmpty()){ formatter.format(""|#%s"", formatTags(req.getTags())); } if(req.getMessage()!=null && !req.getMessage().isEmpty()){ formatter.format(""|m:%s"", req.getMessage()); } return builder.toString(); } "	0	0	0	0	0	1
"protected String formatMetric(String metric, String metricType, Long value, List<Tag> tags, Long sampleRate){ if(metric == null || metric.isEmpty() || value == null){ throw new MetricException(""metric and value are required fields""); } StringBuilder builder = new StringBuilder(); Formatter formatter = new Formatter(builder); formatter.format(""%s:%d|%s"", metric, value, metricType);  if(sampleRate != null && sampleRate != 1L){ formatter.format(""|@%d"", sampleRate); } if(tags != null && !tags.isEmpty()){ formatter.format(""|#%s"", formatTags(tags)); } return builder.toString(); } "	0	0	0	0	0	1
"@Override public void timing(TimingRequest req){ send(formatMetric(req.getMetric(), ""ms"", req.getValue(),req.getTags(), req.getSampleRate())); } "	0	0	0	0	0	1
"public void addCredential(ModelNode operation, ModelNode model) { ModelNode credentials = credentialsFromOp(operation); if (!credentials.isDefined()) { credentials = new ModelNode(); }  String credentialName = credentialNameFromOp(operation); if (!credentialName.contains("""")) { credentials.get(credentialName).set(model.get(""value"").asString()); } else { String[] parts = credentialName.split(""\\.""); String provider = parts[0]; String property = parts[1]; ModelNode credential = credentials.get(provider); if (!credential.isDefined()) { credential = new ModelNode(); } credential.get(property).set(model.get(""value"").asString()); credentials.set(provider, credential); }  ModelNode deployment = this.secureDeployments.get(deploymentNameFromOp(operation)); deployment.get(CREDENTIALS_JSON_NAME).set(credentials); } "	1	1	1	1	0	0
@Override @ResponseFilter public void filterA(WebResponse repsonse) { } 	0	0	0	0	0	1
"private VersionNumber getFindbugsVersion(Iterable<String> classpath) { for (String f: classpath) { Matcher m = Pattern.compile(""spotbugs-(\\d+.*)\\.jar"").matcher(f); if (m.matches()) { return VersionNumber.parse(m.group(1)); } } throw new GradleException(""Unable to infer the version of FindBugs from currently specified FindBugs classpath: "" + classpath); } "	0	0	0	1	0	0
"public void populateFilterMappings() { filterMappings.put(SearchFilter.SOURCE, new FilterDetails(StringUtils.SPACE, ""fa.source =:"" + DATASOURCE)); filterMappings.put(SearchFilter.OWNER, new FilterDetails("" fp.fluxPartyIdentifiers fpi"", ""fpi.fluxPartyIdentifierId =:"" + OWNER_ID + StringUtils.SPACE)); filterMappings.put(SearchFilter.FROM, new FilterDetails("" fpFrom.fluxPartyIdentifiers fpiFrom"", ""fpiFrom.fluxPartyIdentifierId =:"" + FROM_ID + StringUtils.SPACE)); // filterMappings.put(SearchFilter.PERIOD_START, new FilterDetails(DELIMITED_PERIOD_TABLE_ALIAS, ""( dp.startDate >= :"" + OCCURENCE_START_DATE + ""  OR a.occurence  >= :"" + OCCURENCE_START_DATE + "" )"")); filterMappings.put(SearchFilter.PERIOD_START, new FilterDetails("" "", ""   a.calculatedStartTime  >= :"" + OCCURENCE_START_DATE + "" "")); filterMappings.put(SearchFilter.PERIOD_END, new FilterDetails(DELIMITED_PERIOD_TABLE_ALIAS, "" (dp.endDate <= :"" + OCCURENCE_END_DATE+"" OR  a.calculatedStartTime <= :""+ OCCURENCE_END_DATE +"")"") ); filterMappings.put(SearchFilter.VESSEL_NAME, new FilterDetails(""fa.vesselTransportMeans vt"", ""vt.name IN (:"" + VESSEL_IDENTITY_NAME + "")"")); filterMappings.put(SearchFilter.VESSEL_IDENTIFIRE, new FilterDetails(""vt.vesselIdentifiers vi"", ""vi.vesselIdentifierId IN (:"" + VESSEL_IDENTIFIRE + "")"")); filterMappings.put(SearchFilter.VESSEL_GUIDS, new FilterDetails(""fa.vesselTransportMeans vtMeans"", ""vtMeans.guid IN (:"" + VTM_GUIDS + "")"")); filterMappings.put(SearchFilter.PURPOSE, new FilterDetails(FLUX_REPORT_DOC_TABLE_ALIAS, ""flux.purposeCode IN (:"" + PURPOSE_CODE + "")"")); filterMappings.put(SearchFilter.REPORT_TYPE, new FilterDetails(StringUtils.SPACE, ""fa.typeCode IN (:"" + REPORT_TYPE_CODE + "")"")); filterMappings.put(SearchFilter.ACTIVITY_TYPE, new FilterDetails(StringUtils.SPACE, ""a.typeCode IN (:"" + ACTIVITY_TYPE_CODE + "")"")); filterMappings.put(SearchFilter.AREAS, new FilterDetails(""a.fluxLocations fluxLoc"", ""( fluxLoc.typeCode IN ('AREA') and fluxLoc.fluxLocationIdentifier =:"" + AREA_ID + "" )"")); filterMappings.put(SearchFilter.PORT, new FilterDetails(""a.fluxLocations fluxLoc"", "" (fluxLoc.typeCode IN ('LOCATION') and fluxLoc.fluxLocationIdentifier =:"" + PORT_ID  + "" )"")); filterMappings.put(SearchFilter.GEAR, new FilterDetails(GEAR_TYPE_TABLE_ALIAS, ""fg.typeCode IN (:"" + FISHING_GEAR + "")"")); filterMappings.put(SearchFilter.SPECIES, new FilterDetails(FA_CATCH_TABLE_ALIAS + "" LEFT JOIN  "" + AAP_PROCESS_TABLE_ALIAS + "" LEFT JOIN  "" + AAP_PRODUCT_TABLE_ALIAS, ""( faCatch.speciesCode IN (:"" + SPECIES_CODE + "") "" + "" OR aprod.speciesCode IN (:"" + SPECIES_CODE + ""))"")); filterMappings.put(SearchFilter.QUANTITY_MIN, new FilterDetails(FA_CATCH_TABLE_ALIAS + "" LEFT JOIN FETCH "" + AAP_PROCESS_TABLE_ALIAS + "" LEFT JOIN FETCH "" + AAP_PRODUCT_TABLE_ALIAS, "" (faCatch.calculatedWeightMeasure  BETWEEN :"" + QUANTITY_MIN)); filterMappings.put(SearchFilter.QUANTITY_MAX, new FilterDetails("" "", ""  :"" + QUANTITY_MAX + "") "")); filterMappings.put(SearchFilter.MASTER, new FilterDetails("" fa.vesselTransportMeans vt JOIN FETCH vt.contactParty cparty JOIN FETCH cparty.contactPerson cPerson"", ""(UPPER(cPerson.title) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or "" + ""UPPER(cPerson.givenName) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or UPPER(cPerson.middleName) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or UPPER(cPerson.familyName) IN (:"" + CONTACT_PERSON_NAME + "") "" + StringUtils.SPACE + ""or UPPER(cPerson.familyNamePrefix) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or UPPER(cPerson.nameSuffix) IN (:"" + CONTACT_PERSON_NAME + "") "" + "" or UPPER(cPerson.alias) IN (:"" + CONTACT_PERSON_NAME + "") "" + "")"")); filterMappings.put(SearchFilter.FA_REPORT_ID, new FilterDetails(StringUtils.SPACE, ""fa.id =:"" + FAREPORT_ID)); filterMappings.put(SearchFilter.AREA_GEOM, new FilterDetails(StringUtils.SPACE, ""intersects(fa.geom, :"" + AREA_GEOM + "") = true "")); filterMappings.put(SearchFilter.TRIP_ID, new FilterDetails(StringUtils.SPACE + FISHING_TRIP_TABLE_ALIAS + "" JOIN FETCH "" + FISHING_TRIP_IDENTIFIER_TABLE_ALIAS, ""fishingTripId.tripId =:"" + TRIP_ID + StringUtils.SPACE)); } "	0	0	0	0	0	1
"private void move(final boolean nonCombat, final String stepName) { if (getPlayerBridge().isGameOver()) { return; } final IMoveDelegate moveDel; try { moveDel = (IMoveDelegate) getPlayerBridge().getRemoteDelegate(); } catch (final ClassCastException e) { final String errorContext = ""PlayerBridge step name: "" + getPlayerBridge().getStepName() + "", Remote class name: "" + getPlayerBridge().getRemoteDelegate().getClass(); // for some reason the client is not seeing or getting these errors, so print to err too System.err.println(errorContext); e.printStackTrace(); throw new IllegalStateException(errorContext, e); }  final PlayerID id = getPlayerID();  if (nonCombat && !m_soundPlayedAlreadyNonCombatMove) { ClipPlayer.play(SoundPath.CLIP_PHASE_MOVE_NONCOMBAT, id); m_soundPlayedAlreadyNonCombatMove = true; }  if (!nonCombat && !m_soundPlayedAlreadyCombatMove) { ClipPlayer.play(SoundPath.CLIP_PHASE_MOVE_NONCOMBAT, id); m_soundPlayedAlreadyCombatMove = true; }  final MoveDescription moveDescription = m_ui.getMove(id, getPlayerBridge(), nonCombat, stepName); if (moveDescription == null) { if (GameStepPropertiesHelper.isRemoveAirThatCanNotLand(getGameData())) { if (!canAirLand(true, id)) { move(nonCombat, stepName); } } if (!nonCombat) { if (canUnitsFight()) { move(nonCombat, stepName); } } return; } final String error = moveDel.move(moveDescription.getUnits(), moveDescription.getRoute(), moveDescription.getTransportsThatCanBeLoaded(), moveDescription.getDependentUnits()); if (error != null) { m_ui.notifyError(error); } move(nonCombat, stepName); } "	0	1	0	0	0	0
private String buildToken(Tokens token) { LOGGER.warn(token.getExpirationTime().toString()); return Jwts.builder().setId(token.getUser().getEmail()) .setExpiration(token.getExpirationTime()) .setIssuedAt(token.getCreationTime()) .claim(CLAIM_SCOPE, token.getTokenType().getCode()) .setSubject(token.getUser().getEmail()) .signWith(SignatureAlgorithm.HS512, tokenSigningKey) .compact(); } 	0	0	0	0	0	1
public static ArrayList<Timer> getTimerList() { return timerList; } 	0	0	0	0	0	1
"public List<Context> getContextsWithPathGenerators(Iterator itr) throws Exception { List<Context> executionContexts = new ArrayList<>(); boolean triggerOnce = true; while (itr.hasNext()) { String modelFileName = (String) itr.next(); ContextFactory factory = ContextFactoryScanner.get(Paths.get(modelFileName)); Context context = null; try { context = factory.create(Paths.get(modelFileName)); } catch (DslException e) { System.err.println(""When parsing model: '"" + modelFileName + ""' "" + e.getMessage() + System.lineSeparator()); throw new Exception(""Model syntax error""); } context.setPathGenerator(GeneratorFactory.parse((String) itr.next()));  if (triggerOnce && (!offline.startElement.isEmpty() || (!online.startElement.isEmpty()))) { triggerOnce = false;  List<Element> elements = null; if (command == Command.OFFLINE) { elements = context.getModel().findElements(offline.startElement); } else if (command == Command.ONLINE) { elements = context.getModel().findElements(online.startElement); }  if (elements == null) { throw new ParameterException(""--start-element Did not find matching element in the model: "" + modelFileName); } else if (elements.size() > 1) { throw new ParameterException(""--start-element There are more than one matching element in the model: "" + modelFileName); } context.setNextElement(elements.get(0)); }  executionContexts.add(context); } return executionContexts; } "	1	1	1	0	1	0
public static String serializeToJson(Object model, boolean deepSerialize, boolean excludeNullObject) { return serialize(model, FORMAT_JSON, null, deepSerialize, false, excludeNullObject); } 	0	0	0	0	0	1
public static JSONObject serializeToJsonObjectWithExcludes(Object model, String[] excludes, boolean deepSerialize, String... includes) throws Exception { return new JSONObject(serialize(model, FORMAT_JSON, excludes, deepSerialize, includes)); } 	0	0	0	0	0	1
public static String serializeToJsonWithExcludes(Object model, String[] excludes, boolean deepSerialize, boolean excludeNullObject, String... includes) { return serialize(model, FORMAT_JSON, excludes, deepSerialize, excludeNullObject, includes); } 	0	0	0	0	0	1
public static JSONObject serializeToJsonObjectWithExcludes(Object model, String[] excludes, String... includes) throws Exception { return new JSONObject(serialize(model, FORMAT_JSON, excludes, includes)); } 	0	0	0	0	0	1
public static String serialize(Object model, String type, String[] excludes, boolean deepSerialize, boolean excludeNullObject, String... includes) { return serialize(model, type, excludes, deepSerialize, true, excludeNullObject, includes); } 	0	0	0	0	0	1
public static ModelAndView toJsonModelAndView(Object model, boolean deepSerialize) { return toModelAndView(serializeToJson(model, deepSerialize)); } 	0	0	0	0	0	1
private Resource buildResourceFromInputParameters(String data, User user) { return JsonDeserializer.deserialize(data, Resource.class); } 	0	0	0	0	0	1
"public void fillFieldWhenTechnologyChanged(final ViewDefinitionState viewDefinitionState, final ComponentState state, final String[] args) { if (!(state instanceof FieldComponent)) { return; } FieldComponent technologyLookup = (FieldComponent) viewDefinitionState.getComponentByReference(""technology""); if (technologyLookup.getFieldValue() == null) { return; }  Entity technology = dataDefinitionService.get(TechnologiesConstants.PLUGIN_IDENTIFIER, TechnologiesConstants.MODEL_TECHNOLOGY).get((Long) technologyLookup.getFieldValue()); if (technology != null) { applyValuesToFields(viewDefinitionState, technology, null); }  } "	0	0	0	1	0	0
"@ApiModelProperty(required = true, value = ""The order including line items to be checked out."") public Squareupconnectv2ordersserviceCreateOrderRequestOrder getOrder() { return order; } "	0	0	0	0	0	1
"@Inject(method = ""run"", at = @At(""HEAD""), cancellable = true, remap = false) private void onRun(CallbackInfo ci) { final Terminal terminal = TerminalConsoleAppender.getTerminal();  if (terminal != null) { // Set our console color formatter TerminalConsoleAppender.setFormatter(ConsoleFormatter.INSTANCE);  LineReader reader = LineReaderBuilder.builder() .appName(""SpongeVanilla"") .terminal(terminal) .completer(new ConsoleCommandCompleter(this.server)) .build(); reader.unsetOpt(LineReader.Option.INSERT_TAB);  TerminalConsoleAppender.setReader(reader);  try { String line; while (!this.server.isServerStopped() && this.server.isServerRunning()) { line = reader.readLine(""> ""); if (line == null) { break; }  line = line.trim(); if (!line.isEmpty()) { this.server.addPendingCommand(line, this.server); } } } catch (UserInterruptException e) { this.server.initiateShutdown(); } finally { TerminalConsoleAppender.setReader(null); }  ci.cancel(); } else { // TODO: TextSerializers are initialized too late, fix this properly // TerminalConsoleAppender.setFormatter(TextSerializers.LEGACY_FORMATTING_CODE::stripCodes); TerminalConsoleAppender.setFormatter(s -> LegacyTexts.strip(s, SpongeTexts.COLOR_CHAR)); } } "	0	0	0	0	0	1
public void removeAsync(final String url) { new AsyncTask<Void, Void, Void>() {  @Override protected Void doInBackground(Void... voids) { ModelCache.this.remove(url); return null; } }.execute(); } 	1	0	1	0	0	0
"@Check public void checkAttributeNameIsValid(HtmlAttr attr) { String attrName = attr.getName(); EObject container = attr.eContainer(); if (container instanceof HtmlTag) { HtmlTag tag = (HtmlTag) container; String tagName = tag.getName(); if (!validAttributes.containsKey(tagName.toUpperCase()) || !validAttributes.get(tagName.toUpperCase()) .contains(attrName.toUpperCase())) { warning(""Attribute '"" + attrName + ""' is not allowed inside '<"" + tagName + "">'."", HtmllabelPackage.Literals.HTML_ATTR__NAME); } } } "	0	0	0	0	0	1
"public CompletableFuture<ResponseMessage> createEvidenceDefault(StandardBusinessDocumentHeader sbdh, REMMDMessageType remType, Authorization auth) {  String authorizationHeader; ResponseMessage rm = new ResponseMessage(); String requestBody; try { String authHeader = auth.getUsername().toString() + "":"" + auth.getPassword().toString(); String authHeaderEncoded = Base64.getEncoder().encodeToString(authHeader.getBytes(""utf-8"")); authorizationHeader = ""Basic "" + authHeaderEncoded; } catch (UnsupportedEncodingException e) { throw new EDeliveryException(e); } RequestBodyGenerator rbg = new RequestBodyGenerator();  requestBody = rbg.generateRemMessageBody(sbdh, remType, signatures);  return httpClient.preparePost(sendEndpoind).addHeader(""Content-Type"", ""application/xml"") .addHeader(""Authorization"", authorizationHeader).execute().toCompletableFuture() .exceptionally(t -> { throw new EDeliveryException(t); }) .thenApply(resp -> { int status = resp.getStatusCode();  switch (status) { case 201: rm.setStatus(201); rm.setMessage(""Message send""); break; case 202: rm.setStatus(202); rm.setMessage(""Created""); break; case 400: rm.setStatus(400); rm.setMessage(""Bad Request""); break; case 401: rm.setStatus(401); rm.setMessage(resp.getResponseBody()); break; case 406: rm.setStatus(406); rm.setMessage(""Message not in the right format""); break; case 500: rm.setStatus(500); rm.setMessage(""Internal server error from AP connector""); break; } return rm; });  } "	0	0	0	0	0	1
"@UiHandler(""ancPendingListSeeMore"") public void onClickPendingListSeeMore(ClickEvent event){ lblPendingPleaseWait.setVisible(true); ancPendingListSeeMore.setVisible(false); getUiHandlers().getMembersListByCollectionId(classpageDo.getClasspageCode(),  pendingOffsetValue, pageSize, ""pending"",true,true);	//this will callback displayPendingMembersList method .... } "	0	0	0	0	0	1
"private void completeDocument(SBOLDocument document) { completed = new HashSet<URI>(); int size = document.getTopLevels().size(); int count = 0; for (TopLevel topLevel : document.getTopLevels()) { completeDocument(document,topLevel); count++; System.err.println(count + "" out of "" + size); } } "	0	0	0	0	0	1
"@Override public void onClick(View v) { BackgroundAsyncTask sendMessageAsync = new BackgroundAsyncTask(); String messageText = messageET.getText().toString(); if (TextUtils.isEmpty(messageText)) { return; }  try { ChatImpl chat = new ChatImpl(); final MessageImpl message = new MessageImpl(); Long dv = System.currentTimeMillis(); String remotePublicKey; if (chatWasCreate) { chat = (ChatImpl) chatManager.getChatByChatId(chatId); chat.setLastMessageDate(new Timestamp(dv)); remotePublicKey = chat.getRemoteActorPublicKey(); Chat chatPrevious = chatManager.getChatByRemotePublicKey(remotePublicKey);  if (chatPrevious.getChatId() != chatId) { newChatId = chatPrevious.getChatId(); } else { newChatId = chatId; } chat.setChatId(newChatId); chatManager.saveChat(chat);  message.setChatId(newChatId); message.setMessageId(UUID.randomUUID()); message.setMessage(messageText); message.setMessageDate(new Timestamp(dv)); message.setStatus(MessageStatus.CREATED); message.setType(TypeMessage.OUTGOING); message.setContactId(UUID.randomUUID()); chatManager.saveMessage(message); sendMessageAsync.execute(message); } else { Contact newContact = chatSession.getSelectedContact(); remotePublicKey = newContact.getRemoteActorPublicKey(); chat.setRemoteActorType(PlatformComponentType.ACTOR_CHAT);//chat.setRemoteActorType(remoteActorType); chat.setRemoteActorPublicKey(remotePublicKey); Chat chatPrevious = chatManager.getChatByRemotePublicKey(remotePublicKey); if(newChatId == null) { if (chatPrevious != null) { newChatId = chatPrevious.getChatId(); } else { newChatId = UUID.randomUUID(); } } chat.setChatId(newChatId); chat.setObjectId(UUID.randomUUID()); chat.setStatus(ChatStatus.VISSIBLE); chat.setChatName(""Chat_"" + newContact.getAlias()); chat.setDate(new Timestamp(dv)); chat.setLastMessageDate(new Timestamp(dv)); chat.setTypeChat(TypeChat.INDIVIDUAL); /** * Now we got the identities registered in the device. * To avoid nulls, I'll put default data in chat object */// chat.setLocalActorPublicKey(chatManager.getNetworkServicePublicKey()); chat.setLocalActorType(PlatformComponentType.NETWORK_SERVICE); //if (chatSettings.getLocalPublicKey() != null /*&& chatSettings.getLocalPlatformComponentType() != null*/) { //Asigno pk del usuario y no uso la del NS try { String pKey = chatSettings.getLocalPublicKey(); if (pKey != null) { chat.setLocalActorPublicKey(pKey); } else { chat.setLocalActorPublicKey(chatManager.getIdentityChatUsersFromCurrentDeviceUser().get(0).getPublicKey()); } chat.setLocalActorType(PlatformComponentType.ACTOR_CHAT); } catch (Exception e) { chat.setLocalActorPublicKey(chatManager.getIdentityChatUsersFromCurrentDeviceUser().get(0).getPublicKey()); chat.setLocalActorType(PlatformComponentType.ACTOR_CHAT); } chatManager.saveChat(chat);  message.setChatId(newChatId); message.setMessageId(UUID.randomUUID()); message.setMessage(messageText); message.setMessageDate(new Timestamp(dv)); message.setStatus(MessageStatus.CREATED); message.setType(TypeMessage.OUTGOING); message.setContactId(UUID.randomUUID());//message.setContactId(contactId); chatManager.saveMessage(message); sendMessageAsync.execute(message);// //If everything goes OK, we save the chat in the fragment session. chatSession.setData(""whocallme"", ""chatlist""); chatSession.setData( ""contactid"", newContact ); /** * This chat was created, so, I will put chatWasCreate as true to avoid * the multiple chats from this contact. Also I will put the chatId as * newChatId */ chatWasCreate = true; chatId = newChatId; }  ChatMessage chatMessage = new ChatMessage(); chatMessage.setId(UUID.randomUUID());//dummy chatMessage.setMessage(messageText); String S = new SimpleDateFormat(""HH:mm"").format(new Date()); chatMessage.setDate(S); chatMessage.setMe(true); messageET.setText(""""); adapter = new ChatAdapter(getContext(), (chatHistory != null) ? chatHistory : new ArrayList<ChatMessage>()); messagesContainer.setAdapter(adapter); displayMessage(chatMessage); System.out.println(""*** 12345 case 1:send msg in android layer"" + new Timestamp(System.currentTimeMillis())); } catch (CantSaveMessageException e) { errorManager.reportUnexpectedSubAppException(SubApps.CHT_CHAT, UnexpectedSubAppExceptionSeverity.DISABLES_SOME_FUNCTIONALITY_WITHIN_THIS_FRAGMENT, e); } catch (CantSaveChatException e) { errorManager.reportUnexpectedSubAppException(SubApps.CHT_CHAT, UnexpectedSubAppExceptionSeverity.DISABLES_SOME_FUNCTIONALITY_WITHIN_THIS_FRAGMENT, e); } catch (CantGetNetworkServicePublicKeyException e) { errorManager.reportUnexpectedSubAppException(SubApps.CHT_CHAT, UnexpectedSubAppExceptionSeverity.DISABLES_SOME_FUNCTIONALITY_WITHIN_THIS_FRAGMENT, e); } catch (Exception e) { errorManager.reportUnexpectedSubAppException(SubApps.CHT_CHAT, UnexpectedSubAppExceptionSeverity.DISABLES_SOME_FUNCTIONALITY_WITHIN_THIS_FRAGMENT, e); } } "	0	1	0	0	0	0
public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.collectables);  GridView gridview = (GridView) findViewById(R.id.gridview);  AchievementContract achievementContract = new AchievementContract(this); adapter = new SimpleCursorAdapter(this, R.layout.collectables_cell, achievementContract.getAchievements(), FROM, TO); adapter.setViewBinder(new CollectableViewBinder(this)); gridview.setAdapter(adapter); } 	0	0	0	0	0	1
public boolean isBusinessDay(int day) { if (day > 0 && day < 5) { return true; } else return false; } 	0	0	0	0	0	1
"private boolean handleClientException(Exception e) {  // Session exists if (e instanceof SessionExistsException) { logger.info(""Session already exists. Continuing...""); return true;  // Controller offline } else if (e instanceof ControllerOfflineException) { logger.error(""innogy SmartHome Controller is offline. {}"", e.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE, e.getMessage()); dispose(); scheduleReinitialize(); return false;  // Configuration error } else if (e instanceof ConfigurationException) { logger.error(""Configuration error: {}"", e.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage()); dispose(); return false;  // invalid auth code } else if (e instanceof InvalidAuthCodeException) { logger.error(""Error fetching access tokens. Invalid authcode! Please generate a new one.""); org.eclipse.smarthome.config.core.Configuration configuration = editConfiguration(); configuration.put(AUTH_CODE, """"); updateConfiguration(configuration); config.setAuthCode(""""); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, ""Invalid authcode. Please generate a new one!""); dispose(); return false;  } else if (e instanceof InvalidActionTriggeredException) { logger.error(""Error triggering action: {}"", e.getMessage()); return true;  // io error } else if (e instanceof IOException) { logger.error(""IO error: {}"", e.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage()); dispose(); scheduleReinitialize(REINITIALIZE_DELAY_LONG_SECONDS); return false;  // unexpected API error } else if (e instanceof ApiException) { logger.error(""Unexcepted API error: {}"", e.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage()); dispose(); scheduleReinitialize(REINITIALIZE_DELAY_LONG_SECONDS); return false;  // java.net.SocketTimeoutException } else if (e instanceof SocketTimeoutException) { logger.error(""Socket timeout: {}"", e.getMessage()); updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage()); dispose(); scheduleReinitialize(); return false;  // unknown } else { logger.error(""Unknown exception"", e); e.printStackTrace(); dispose(); scheduleReinitialize(); return false; } } "	0	0	0	0	0	1
public DealerDeliveryTO processDijakstra(String sourceAddress, List<OrderTO> orders) throws BusinessException { DealerDeliveryTO dealerDeliveryTO = new DealerDeliveryTO(); dealerDeliveryTO.setOrderList(orders); processDijakstra(sourceAddress, dealerDeliveryTO); return dealerDeliveryTO; } 	0	0	0	0	0	1
public Map<DependencyKey, DependencyManagement> getDeclaredDependencyManagement( Map<DependencyKey, DependencyManagement> dependencyMap, boolean online, Map<String, Profile> profiles, Log log ) { if( project.getDependencyManagement() != null && project.getDependencyManagement().getDependencies() != null ) { if( dependencyMap != null ) dependencyMap.putAll( completeDependencyManagementMap( dependencyMap, project.getDependencyManagement().getDependencies(), online, profiles, log ) ); }  List<org.apache.maven.model.Profile> projectProfiles = getMavenProject().getModel().getProfiles(); if( projectProfiles != null ) { projectProfiles.stream() .filter( p -> isProfileActivated( profiles, p ) ) .filter( p -> p.getDependencyManagement() != null ) .filter( p -> p.getDependencyManagement().getDependencies() != null ) .map( p -> p.getDependencyManagement().getDependencies() ) .map( dependencies -> completeDependencyManagementMap( dependencyMap, dependencies, online, profiles, log ) ) .forEach( dependencyMap::putAll ); }  return dependencyMap; } 	1	1	1	1	0	0
private void handleSignInResult(GoogleSignInResult googleSignInResult) { if (googleSignInResult.isSuccess()) { GoogleSignInAccount googleSignInAccount = googleSignInResult.getSignInAccount(); if (googleSignInAccount != null) { accountDao = updateInformationAboutAccountInLocalDatabase(googleSignInAccount); } else { //todo-denbond7 handle this situation }  if (SecurityUtils.isBackupKeysExist(this)) { EmailSyncService.startEmailSyncService(this); EmailManagerActivity.runEmailManagerActivity(this, accountDao); finish(); } else { startService(new Intent(this, CheckClipboardToFindPrivateKeyService.class)); if (accountDao != null) { getSupportLoaderManager().initLoader(R.id.loader_id_load_gmail_backups, null, this); } else { //todo-denbond7 handle this situation } } } else { if (!TextUtils.isEmpty(googleSignInResult.getStatus().getStatusMessage())) { UIUtil.showInfoSnackbar(signInView, googleSignInResult.getStatus().getStatusMessage()); } UIUtil.exchangeViewVisibility(this, false, splashView, signInView); } } 	0	1	0	0	0	0
"public void parseConfig(ReadableMap config, Intent intent) { // Cross-platform settings if (config.hasKey(""languageOrLocale"")) { intent.putExtra(CardIOActivity.EXTRA_LANGUAGE_OR_LOCALE, config.getString(""languageOrLocale"")); } if (config.hasKey(""guideColor"")) { intent.putExtra(CardIOActivity.EXTRA_GUIDE_COLOR, config.getInt(""guideColor"")); } if (config.hasKey(""useCardIOLogo"")) { intent.putExtra(CardIOActivity.EXTRA_USE_CARDIO_LOGO, config.getBoolean(""useCardIOLogo"")); } if (config.hasKey(""hideCardIOLogo"")) { intent.putExtra(CardIOActivity.EXTRA_HIDE_CARDIO_LOGO, config.getBoolean(""hideCardIOLogo"")); } if (config.hasKey(""scanInstructions"")) { intent.putExtra(CardIOActivity.EXTRA_SCAN_INSTRUCTIONS, config.getString(""scanInstructions"")); } if (config.hasKey(""suppressManualEntry"")) { intent.putExtra(CardIOActivity.EXTRA_SUPPRESS_MANUAL_ENTRY, config.getBoolean(""suppressManualEntry"")); } if (config.hasKey(""suppressConfirmation"")) { intent.putExtra(CardIOActivity.EXTRA_SUPPRESS_CONFIRMATION, config.getBoolean(""suppressConfirmation"")); } if (config.hasKey(""requireExpiry"")) { intent.putExtra(CardIOActivity.EXTRA_REQUIRE_EXPIRY, config.getBoolean(""requireExpiry"")); } if (config.hasKey(""scanExpiry"")) { intent.putExtra(CardIOActivity.EXTRA_SCAN_EXPIRY, config.getBoolean(""scanExpiry"")); } if (config.hasKey(""requireCVV"")) { intent.putExtra(CardIOActivity.EXTRA_REQUIRE_CVV, config.getBoolean(""requireCVV"")); } if (config.hasKey(""requirePostalCode"")) { intent.putExtra(CardIOActivity.EXTRA_REQUIRE_POSTAL_CODE, config.getBoolean(""requirePostalCode"")); } if (config.hasKey(""restrictPostalCodeToNumericOnly"")) { intent.putExtra(CardIOActivity.EXTRA_RESTRICT_POSTAL_CODE_TO_NUMERIC_ONLY, config.getBoolean(""restrictPostalCodeToNumericOnly"")); } if (config.hasKey(""requireCardholderName"")) { intent.putExtra(CardIOActivity.EXTRA_REQUIRE_CARDHOLDER_NAME, config.getBoolean(""require_cardholder_name"")); }  // Android-only settings if (config.hasKey(""noCamera"")) { intent.putExtra(CardIOActivity.EXTRA_NO_CAMERA, config.getBoolean(""noCamera"")); } if (config.hasKey(""unblurDigits"")) { intent.putExtra(CardIOActivity.EXTRA_UNBLUR_DIGITS, config.getInt(""unblurDigits"")); } if (config.hasKey(""usePaypalActionbarIcon"")) { intent.putExtra(CardIOActivity.EXTRA_USE_PAYPAL_ACTIONBAR_ICON, config.getBoolean(""usePaypalActionbarIcon"")); } } "	0	1	0	0	0	0
"public static void resolveMap(Map<String, Object> map) { for (Map.Entry<String, Object> entry : map.entrySet()) { Object value = entry.getValue(); if (value instanceof Map) { // check if this map is $ref, it should be size = 1 if (((Map) value).size() == 1) { Set keys = ((Map)value).keySet(); for (Iterator i = keys.iterator(); i.hasNext();) { String k = (String)i.next(); if(""$ref"".equals(k)) { String pointer = (String)((Map)value).get(k); //System.out.println(""pointer = "" + pointer); Map refMap = handlerPointer(pointer); if(refMap.get(""$ref"") != null) { // if return is another updated $ref entry.setValue(handlerPointer(pointer).get(""$ref"")); } else { // if return is inline object resolved. entry.setValue(refMap); continue; } } } } resolveMap((Map) value); } else if (value instanceof List) { resolveList((List)value); } else { continue; } } } "	1	0	1	0	0	0
@Override protected boolean removeEldestEntry(Map.Entry<K, List<PropertyMapping>> eldest) { return size() >= this.capacity;  } 	1	0	1	1	0	0
"@ApiOperation(value = ""删除Baby"", notes = ""Auth"") @RequestMapping(value = ""/deleteBaby"", method = {RequestMethod.POST}) @ResponseBody public ResponseData<Boolean> deleteBaby( @ApiParam(""宝宝ID"") @RequestParam(""babyId"") int babyId, HttpServletRequest request, HttpServletResponse response) throws ParseException { ResponseData<Boolean> responseData = new ResponseData<>(); User user = (User) request.getAttribute(TokenConfig.DEFAULT_USERID_REQUEST_ATTRIBUTE_NAME); if (user == null) { responseData.jsonFill(2, ""用户尚未登录。"", false); return responseData; }  Baby baby = babyService.getBabyById(babyId); if (baby == null) { responseData.jsonFill(2, ""宝宝不存在。"", false); return responseData; } if (baby.getParentId() != user.getId()) { responseData.jsonFill(2, ""无效的请求。"", false); response.setStatus(401); return responseData; } boolean result = babyService.deleteBaby(babyId); responseData.jsonFill(result ? 1 : 2, null, result); return responseData; } "	1	0	1	0	0	0
@Override protected Cart.DAO cartAccessor() { return new CartDAO(this); } 	0	0	0	0	0	1
Collection<Territory> getAttackerRetreatTerritories() { // TODO: when attacking with paratroopers (air + carried land), there are several bugs in retreating. // TODO: air should always be able to retreat. paratrooped land units can only retreat if there are other // non-paratrooper non-amphibious // land units. // If attacker is all planes, just return collection of current territory if (m_headless || !m_attackingUnits.isEmpty() && Match.allMatch(m_attackingUnits, Matches.UnitIsAir) || games.strategy.triplea.Properties.getRetreatingUnitsRemainInPlace(m_data)) { final Collection<Territory> oneTerritory = new ArrayList<>(2); oneTerritory.add(m_battleSite); return oneTerritory; } // its possible that a sub retreated to a territory we came from, if so we can no longer retreat there // or if we are moving out of a territory containing enemy units, we cannot retreat back there final Match.CompositeBuilder<Unit> enemyUnitsThatPreventRetreatBuilder = Match.newCompositeBuilder( Matches.enemyUnit(m_attacker, m_data), Matches.UnitIsNotInfrastructure, Matches.unitIsBeingTransported().invert(), Matches.UnitIsSubmerged.invert()); if (games.strategy.triplea.Properties.getIgnoreSubInMovement(m_data)) { enemyUnitsThatPreventRetreatBuilder.add(Matches.UnitIsNotSub); } if (games.strategy.triplea.Properties.getIgnoreTransportInMovement(m_data)) { enemyUnitsThatPreventRetreatBuilder.add(Matches.UnitIsNotTransportButCouldBeCombatTransport); } Collection<Territory> possible = Match.getMatches(m_attackingFrom, Matches.territoryHasUnitsThatMatch(enemyUnitsThatPreventRetreatBuilder.all()).invert()); // In WW2V2 and WW2V3 we need to filter out territories where only planes // came from since planes cannot define retreat paths if (isWW2V2() || isWW2V3()) { possible = Match.getMatches(possible, Match.of(t -> { final Collection<Unit> units = m_attackingFromMap.get(t); return units.isEmpty() || !Match.allMatch(units, Matches.UnitIsAir); })); }  // the air unit may have come from a conquered or enemy territory, don't allow retreating final Match<Territory> conqueuredOrEnemy = Match.anyOf( Matches.isTerritoryEnemyAndNotUnownedWaterOrImpassableOrRestricted(m_attacker, m_data), Match.allOf( // Matches.TerritoryIsLand, Matches.TerritoryIsWater, Matches.territoryWasFoughOver(m_battleTracker))); possible.removeAll(Match.getMatches(possible, conqueuredOrEnemy));  // the battle site is in the attacking from // if sea units are fighting a submerged sub possible.remove(m_battleSite); if (Match.anyMatch(m_attackingUnits, Matches.UnitIsLand) && !m_battleSite.isWater()) { possible = Match.getMatches(possible, Matches.TerritoryIsLand); } if (Match.anyMatch(m_attackingUnits, Matches.UnitIsSea)) { possible = Match.getMatches(possible, Matches.TerritoryIsWater); } return possible; } 	1	0	1	1	0	0
"private void configureAgent() { agent.setIsVerbose(isVerbose);  if(isRemovalRequested) { int[] counters = agent.removePatterns(); say(""Patterns removed"");  if(counters != null && counters.length == 2) say(String.format(""%d classes deinstrumented ok, %d failed"", counters[0], counters[1])); } else { int[] counters = agent.setPatterns(classMatchingPattern, methodMatchingPattern); say(String.format(""Class matching pattern set to \""%s\""%s"", classMatchingPattern));  if(methodMatchingPattern != null) say(String.format(""Method matching pattern set to \""%s\"""", methodMatchingPattern));  if(counters != null && counters.length == 2) say(String.format(""%d classes instrumented ok, %d failed"", counters[0], counters[1])); } } "	0	0	0	1	0	0
public static void updateUsrerTileId(String tileId, Tile tile) { if (tile.getCreatorId() != null) { DatabaseReference dbRef = FirebaseDatabase.getInstance().getReference(); DatabaseReference userRef = dbRef.child(User.TABLE_NAME).child(tile.getCreatorId()); if (userRef != null) { userRef.child(User.TILE_IDS).child(tileId).setValue(true); } } } 	0	1	0	0	0	0
"public static void runDebug() { File debugFile = new File(plugin.getDataFolder(), ""debug.txt""); if (debugFile.exists()) { debugFile.delete(); // We're starting brand new. } writeToDebug(""ProjectKorra Debug: Paste this on http://pastie.org and put it in your bug report thread.""); writeToDebug(""====================""); writeToDebug(""""); writeToDebug(""""); writeToDebug(""Date Created: "" + getCurrentDate()); writeToDebug(""Bukkit Version: "" + Bukkit.getServer().getVersion()); writeToDebug(""""); writeToDebug(""ProjectKorra (Core) Information""); writeToDebug(""====================""); writeToDebug(""Version: "" + plugin.getDescription().getVersion()); writeToDebug(""Author: "" + plugin.getDescription().getAuthors()); if (hasRPG()) { writeToDebug(""""); writeToDebug(""ProjectKorra (RPG) Information""); writeToDebug(""====================""); writeToDebug(""Version: "" + getRPG().getDescription().getVersion()); writeToDebug(""Author: "" + getRPG().getDescription().getAuthors()); } if (hasItems()) { writeToDebug(""""); writeToDebug(""ProjectKorra (Items) Information""); writeToDebug(""====================""); writeToDebug(""Version: "" + getItems().getDescription().getVersion()); writeToDebug(""Author: "" + getItems().getDescription().getAuthors()); } writeToDebug(""""); writeToDebug(""Ability Information""); writeToDebug(""====================""); for (String ability: AbilityModuleManager.abilities) { if (StockAbilities.isStockAbility(ability) && !GeneralMethods.isDisabledStockAbility(ability)) { writeToDebug(ability + "" - STOCK ABILITY""); } else { writeToDebug(ability + "" - UNOFFICIAL ABILITY""); } } writeToDebug(""""); writeToDebug(""Supported Plugins""); writeToDebug(""===================="");  boolean respectWorldGuard = plugin.getConfig().getBoolean(""Properties.RegionProtection.RespectWorldGuard""); boolean respectPreciousStones = plugin.getConfig().getBoolean(""Properties.RegionProtection.RespectPreciousStones""); boolean respectFactions = plugin.getConfig().getBoolean(""Properties.RegionProtection.RespectFactions""); boolean respectTowny = plugin.getConfig().getBoolean(""Properties.RegionProtection.RespectTowny""); boolean respectGriefPrevention = plugin.getConfig().getBoolean(""Properties.RegionProtection.RespectGriefPrevention""); boolean respectLWC = plugin.getConfig().getBoolean(""Properties.RegionProtection.RespectLWC""); PluginManager pm = Bukkit.getPluginManager();  Plugin wgp = pm.getPlugin(""WorldGuard""); Plugin psp = pm.getPlugin(""PreciousStones""); Plugin fcp = pm.getPlugin(""Factions""); Plugin twnp = pm.getPlugin(""Towny""); Plugin gpp = pm.getPlugin(""GriefPrevention""); Plugin massivecore = pm.getPlugin(""MassiveCore""); Plugin lwc = pm.getPlugin(""LWC"");  if (wgp != null && respectWorldGuard) { writeToDebug(""WorldGuard v"" + wgp.getDescription().getVersion()); } if (psp != null && respectPreciousStones) { writeToDebug(""PreciousStones v"" + psp.getDescription().getVersion()); } if (fcp != null && respectFactions) { writeToDebug(""Factions v"" + fcp.getDescription().getVersion()); } if (massivecore != null && respectFactions) { writeToDebug(""MassiveCore v"" + massivecore.getDescription().getVersion()); } if (twnp != null && respectTowny) { writeToDebug(""Towny v"" + twnp.getDescription().getVersion()); } if (gpp != null && respectGriefPrevention) { writeToDebug(""GriefPrevention v"" + gpp.getDescription().getVersion()); } if (lwc != null && respectLWC) { writeToDebug(""LWC v"" + lwc.getDescription().getVersion()); }  writeToDebug(""""); writeToDebug(""Plugins Hooking Into ProjectKorra (Core)""); writeToDebug(""====================""); for (Plugin plugin: Bukkit.getPluginManager().getPlugins()) { if (plugin.getDescription().getDepend() != null && plugin.getDescription().getDepend().contains(""ProjectKorra"")) { writeToDebug(plugin.getDescription().getName() + "" v"" + plugin.getDescription().getVersion()); } } } "	0	0	0	0	0	1
private void loadMAModules() { for(MultiAbilityModule mam : multiAbility) { mam.onThisLoad(); AbilityModuleManager.abilities.add(mam.getName()); for (StockAbilities a: StockAbilities.values()) { if (a.name().equalsIgnoreCase(mam.getName())){ AbilityModuleManager.disabledStockAbilities.add(a.name()); } } if (mam.getElement() == Element.Air.toString()) AbilityModuleManager.airbendingabilities.add(mam.getName()); if (mam.getElement() == Element.Water.toString()) AbilityModuleManager.waterbendingabilities.add(mam.getName()); if (mam.getElement() == Element.Earth.toString()) AbilityModuleManager.earthbendingabilities.add(mam.getName()); if (mam.getElement() == Element.Fire.toString()) AbilityModuleManager.firebendingabilities.add(mam.getName()); if (mam.getElement() == Element.Chi.toString()) AbilityModuleManager.chiabilities.add(mam.getName()); AbilityModuleManager.shiftabilities.add(mam.getName()); if (mam.isHarmlessAbility()) AbilityModuleManager.harmlessabilities.add(mam.getName());  if (mam.getSubElement() != null) { AbilityModuleManager.subabilities.add(mam.getName()); switch(mam.getSubElement()) { case Bloodbending: AbilityModuleManager.bloodabilities.add(mam.getName()); break; case Combustion: AbilityModuleManager.combustionabilities.add(mam.getName()); break; case Flight: AbilityModuleManager.flightabilities.add(mam.getName()); break; case Healing: AbilityModuleManager.healingabilities.add(mam.getName()); break; case Icebending: AbilityModuleManager.iceabilities.add(mam.getName()); break; case Lavabending: AbilityModuleManager.lavaabilities.add(mam.getName()); break; case Lightning: AbilityModuleManager.lightningabilities.add(mam.getName()); break; case Metalbending: AbilityModuleManager.metalabilities.add(mam.getName()); break; case Plantbending: AbilityModuleManager.plantabilities.add(mam.getName()); break; case Sandbending: AbilityModuleManager.sandabilities.add(mam.getName()); break; case SpiritualProjection: AbilityModuleManager.spiritualprojectionabilities.add(mam.getName()); break; } }  MultiAbilityManager.multiAbilityList.add(new MultiAbility(mam.getName(), mam.getAbilities())); AbilityModuleManager.descriptions.put(mam.getName(), mam.getDescription()); AbilityModuleManager.authors.put(mam.getName(), mam.getAuthor()); } } 	0	0	0	0	0	1
"@Override public void didChangeConfiguration(DidChangeConfigurationParams params) { logInfo("">> workspace/didChangeConfiguration""); Object settings = params.getSettings(); if (settings instanceof Map) { @SuppressWarnings(""unchecked"") Map<String, Object> javaConfig = MapFlattener.flatten((Map<String, Object>) settings); Preferences prefs = Preferences.createFrom(javaConfig); preferenceManager.update(prefs); } if (preferenceManager.getClientPreferences().isFormattingDynamicRegistrationSupported()) { if (preferenceManager.getPreferences().isJavaFormatEnabled()) { registerCapability(Preferences.FORMATTING_ID, Preferences.TEXT_DOCUMENT_FORMATTING); } else { unregisterCapability(Preferences.FORMATTING_ID, Preferences.TEXT_DOCUMENT_FORMATTING); } } if (preferenceManager.getClientPreferences().isRangeFormattingDynamicRegistrationSupported()) { if (preferenceManager.getPreferences().isJavaFormatEnabled()) { registerCapability(Preferences.FORMATTING_RANGE_ID, Preferences.TEXT_DOCUMENT_RANGE_FORMATTING); } else { unregisterCapability(Preferences.FORMATTING_RANGE_ID, Preferences.TEXT_DOCUMENT_RANGE_FORMATTING); } } if (preferenceManager.getClientPreferences().isCodeLensDynamicRegistrationSupported()) { if (preferenceManager.getPreferences().isReferencesCodeLensEnabled()) { registerCapability(Preferences.CODE_LENS_ID, Preferences.TEXT_DOCUMENT_CODE_LENS, new CodeLensOptions(true)); } else { unregisterCapability(Preferences.CODE_LENS_ID, Preferences.TEXT_DOCUMENT_CODE_LENS); } } if (preferenceManager.getClientPreferences().isSignatureHelpDynamicRegistrationSupported()) { if (preferenceManager.getPreferences().isSignatureHelpEnabled()) { registerCapability(Preferences.SIGNATURE_HELP_ID, Preferences.TEXT_DOCUMENT_SIGNATURE_HELP, new CodeLensOptions(true)); } else { unregisterCapability(Preferences.SIGNATURE_HELP_ID, Preferences.TEXT_DOCUMENT_SIGNATURE_HELP); } } logInfo("">>New configuration: "" + settings); } "	0	1	0	0	0	0
"@Override public String getContentAsString(String path)  { String content = null;  try { content = IOUtils.toString(_contentRepository.getContent(path)); } catch(Exception err) { logger.error(""Failed to get content as string for path '{0}'"", err, path); }  return content; } "	0	0	0	1	0	0
public Set<SubDistrict> subdistricts() { Set<SubDistrict> subs = new HashSet<SubDistrict>(); for (Location loc : locations()) { if (loc.municipality.equals(name)) { subs.add(new SubDistrict(context, this, loc.subdistrict)); } } return subs; } 	1	1	1	0	1	0
"@Override public void doExecute(TestContext context) { if (statements.isEmpty()) { statements = createStatementsFromFileResource(context); }  try { //for control result set validation Map<String, List<String>> columnValuesMap = new HashMap<String, List<String>>(); //for groovy script validation List<Map<String, Object>> allResultRows = new ArrayList<Map<String, Object>>();  for (String stmt : statements) { validateSqlStatement(stmt); stmt = context.replaceDynamicContentInString(stmt);  log.info(""Executing SQL query: "" + stmt); List<Map<String, Object>> results = getJdbcTemplate().queryForList(stmt);  allResultRows.addAll(results); fillColumnValuesMap(results, columnValuesMap); }  // perform validation performValidation(columnValuesMap, allResultRows, context);  // fill the request test context variables (extract tag) fillContextVariables(columnValuesMap, context);  // legacy: save all columns as variables TODO: remove in major version upgrade for (Entry<String, List<String>> column : columnValuesMap.entrySet()) { List<String> columnValues = column.getValue(); context.setVariable(column.getKey(), columnValues.get(0) == null ? NULL_VALUE : columnValues.get(0)); } } catch (DataAccessException e) { log.error(""Failed to execute SQL statement"", e); throw new CitrusRuntimeException(e); } } "	0	1	0	0	0	0
"private void fetchMessages(List<WebDavMessage> messages, MessageRetrievalListener<WebDavMessage> listener, int lines) throws MessagingException { WebDavHttpClient httpclient; httpclient = store.getHttpClient();  /** * We can't hand off to processRequest() since we need the stream to parse. */ for (int i = 0, count = messages.size(); i < count; i++) { WebDavMessage wdMessage = messages.get(i); int statusCode = 0;  if (listener != null) { listener.messageStarted(wdMessage.getUid(), i, count); }  /** * If fetch is called outside of the initial list (ie, a locally stored message), it may not have a URL * associated. Verify and fix that */ if (wdMessage.getUrl().equals("""")) { wdMessage.setUrl(getMessageUrls(new String[]{wdMessage.getUid()}).get(wdMessage.getUid())); Log.i(LOG_TAG, ""Fetching messages with UID = '"" + wdMessage.getUid() + ""', URL = '"" + wdMessage.getUrl() + ""'""); if (wdMessage.getUrl().equals("""")) { throw new MessagingException(""Unable to get URL for message""); } }  try { Log.i(LOG_TAG, ""Fetching message with UID = '"" + wdMessage.getUid() + ""', URL = '"" + wdMessage.getUrl() + ""'""); HttpGet httpget = new HttpGet(new URI(wdMessage.getUrl())); HttpResponse response; HttpEntity entity;  httpget.setHeader(""translate"", ""f""); if (store.getAuthentication() == WebDavConstants.AUTH_TYPE_BASIC) { httpget.setHeader(""Authorization"", store.getAuthString()); } response = httpclient.executeOverride(httpget, store.getContext());  statusCode = response.getStatusLine().getStatusCode();  entity = response.getEntity();  if (statusCode < 200 || statusCode > 300) { throw new IOException(""Error during with code "" + statusCode + "" during fetch: "" + response.getStatusLine().toString()); }  if (entity != null) { InputStream istream = null; StringBuilder buffer = new StringBuilder(); String tempText; String resultText; BufferedReader reader = null; int currentLines = 0;  try { istream = WebDavHttpClient.getUngzippedContent(entity);  if (lines != -1) { //Convert the ungzipped input stream into a StringBuilder //containing the given line count reader = new BufferedReader(new InputStreamReader(istream), 8192);  while ((tempText = reader.readLine()) != null && (currentLines < lines)) { buffer.append(tempText).append(""\r\n""); currentLines++; }  IOUtils.closeQuietly(istream);  resultText = buffer.toString(); istream = new ByteArrayInputStream(resultText.getBytes(""UTF-8"")); } //Parse either the entire message stream, or a stream of the given lines wdMessage.parse(istream);  } catch (IOException ioe) { Log.e(LOG_TAG, ""IOException: "" + ioe.getMessage() + ""\nTrace: "" + WebDavUtils.processException(ioe)); throw new MessagingException(""I/O Error"", ioe); } finally { IOUtils.closeQuietly(reader); IOUtils.closeQuietly(istream); } } else { Log.v(LOG_TAG, ""Empty response""); }  } catch (IllegalArgumentException iae) { Log.e(LOG_TAG, ""IllegalArgumentException caught "" + iae + ""\nTrace: "" + WebDavUtils.processException(iae)); throw new MessagingException(""IllegalArgumentException caught"", iae); } catch (URISyntaxException use) { Log.e(LOG_TAG, ""URISyntaxException caught "" + use + ""\nTrace: "" + WebDavUtils.processException(use)); throw new MessagingException(""URISyntaxException caught"", use); } catch (IOException ioe) { Log.e(LOG_TAG, ""Non-success response code loading message, response code was "" + statusCode + ""\nURL: "" + wdMessage.getUrl() + ""\nError: "" + ioe.getMessage() + ""\nTrace: "" + WebDavUtils.processException(ioe)); throw new MessagingException(""Failure code "" + statusCode, ioe); }  if (listener != null) { listener.messageFinished(wdMessage, i, count); } } } "	0	0	0	0	0	1
private void setupView() { setContentView(R.layout.activity_login); setOnClickListeners(R.id.loginCreateAccountBtn, R.id.loginForgotPaswordBtn, R.id.loginSignInBtn); remember = (CheckBox) findViewById(R.id.loginRemember); } 	1	1	1	0	1	0
@Override public List<? extends IContentNode> getChildren( IPath path ) { // check admin //        if (!SecurityUtils.isAdmin()) { //            return null; //        }  // roots if (path.segmentCount() == 0) { return roots; }  // folder IContentFolder parent = getSite().getFolder( path ); if (parent instanceof FsFolder) { File[] files = ((CmsFolder)parent).getDir().listFiles(); List<IContentNode> result = new ArrayList( files.length );  for (File f : files) { if (f.isFile()) { result.add( new CmsFile( parent.getPath(), this, f ) ); } else if (f.isDirectory()) { result.add( new CmsFolder( f.getName(), parent.getPath(), this, f ) ); }  } return result; } return null; } 	0	0	0	1	0	0
@Override protected void onPostProcess(String what, String[] oldPathNames, String[] newPathNames, int modifyCount, int itemCount, int opCode) { mInitialFilePath = null; switch (opCode) { case OP_MOVE: case OP_RENAME: if ((newPathNames!= null) && (newPathNames.length > 0)) { // so selection will be restored to this after load complete mInitialFilePath = newPathNames[0]; } break; case OP_COPY: if ((oldPathNames!= null) && (oldPathNames.length > 0)) { // so selection will be restored to this after load complete mInitialFilePath = oldPathNames[0]; } break; }  super.onPostProcess(what, oldPathNames, newPathNames, modifyCount, itemCount, opCode);  if ((opCode == OP_RENAME) || (opCode == OP_MOVE) || (opCode == OP_DELETE)) { mAdapter.refreshLocal(); } } 	0	0	0	0	0	1
public static boolean callSubFunctions(ICommandSender sender, List<String> args, String callersPermNode, Localization local) { List<String> subCommands = getSubCommandsList(callersPermNode); if (!args.isEmpty()) { for (String s : subCommands) { String name = commandNames.get(s); // Checking if name corresponds and if parent's if (name.equals(args.get(0)) && getParentPermNode(s).equals(callersPermNode)) { commandCall(s, sender, args.subList(1, args.size())); return true; } } }  sendHelpMessage(sender, callersPermNode, null, local); return false; } 	1	0	1	0	0	0
"public AlertTemplate getTemplateObj(EntityManager em, String tenantId, short templateId) throws Exception { AlertTemplates template = getTemplate(em, templateId); if (template.getTemplateContent() != null) { return AlertTemplateSerializer.deserialize(template.getTemplateContent()); } else { return new AlertTemplate(templateId, """", """", """", """", """"); } } "	1	0	1	1	0	0
"public Reference findReferenceByFileNameAndFolder(String fileName, String folderName, boolean withoutExtension){ Reference[] refs = this.findReferencesByFolderName(folderName); for(Reference ref: refs){ String file = ref.fileName.replaceAll(folderName+""/"", """"); if(withoutExtension) file = file.replaceAll("".png"", """"); if(file.equals(fileName)) return ref; } return null; } "	0	1	0	0	0	0
"static String getLoginToken(String username, String password, String location) {  RestTemplate restTemplate = new RestTemplate();  String url = LOGIN_URL + username;  String params[] = {username, password, location}; StringWriter stringWriter = new StringWriter(); CSVWriter writer = new CSVWriter(stringWriter); writer.writeNext(params);  String response = restTemplate.postForObject(stringWriter.toString(), url, String.class);  if (!response.equals("""")) { //TODO Check return response; } return NULL_TOKEN; } "	0	0	0	1	0	0
private static synchronized void zigset() { if (initialized) return; initialized = true;  wn = new double[128]; fn = new double[128]; kn = new int[128];  double m1 = 2147483648.0; double dn = 3.442619855899, tn = dn, vn = 9.91256303526217e-3, q; int i;  /* Set up tables for RNOR */ q = vn / Math.exp(-.5 * dn * dn); kn[0] = (int) ((dn / q) * m1); kn[1] = 0;  wn[0] = q / m1; wn[127] = dn / m1;  fn[0] = 1.; fn[127] = Math.exp(-.5 * dn * dn);  for (i = 126; i >= 1; i--) { dn = Math.sqrt(-2. * Math.log(vn / dn + Math.exp(-.5 * dn * dn))); kn[i + 1] = (int) ((dn / tn) * m1); tn = dn; fn[i] = Math.exp(-.5 * dn * dn); wn[i] = dn / m1; } } 	1	0	1	1	0	0
private void init() {  setOnTouchListener(this);  if (mEndButton.getParent() == null) { int margin = (int) getResources().getDimension(R.dimen.button_margin); RelativeLayout.LayoutParams lps = (LayoutParams) generateDefaultLayoutParams(); lps.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM); lps.addRule(RelativeLayout.ALIGN_PARENT_RIGHT); lps.setMargins(margin, margin, margin, margin); mEndButton.setLayoutParams(lps); mEndButton.setText(android.R.string.ok); if (!hasCustomClickListener) { mEndButton.setOnClickListener(hideOnClickListener); } addView(mEndButton); }  } 	1	1	1	1	0	0
"@Override public String performBaseAction(UserBean userBean, HttpServletRequest request, HttpServletResponse response, Map<String, Object> session) { if(marks>passingMarks){ message = ""Passed""; }else{ message = ""Failed""; } return SUCCESS; } "	1	0	1	1	0	0
"public List<QuestionPaperFileElement> makeTree(List<QuestionPaperFileElement> nodes){ List<QuestionPaperFileElement> rootQuestionPaperFileElements = new ArrayList<QuestionPaperFileElement>(); for(QuestionPaperFileElement node:nodes){ if(node.getParent_id() == null){ rootQuestionPaperFileElements.add(node); } } nodes.removeAll(rootQuestionPaperFileElements);  List<QuestionPaperFileElement>sortedTreeList = new ArrayList<QuestionPaperFileElement>(); for(QuestionPaperFileElement node:rootQuestionPaperFileElements){ sortedTreeList.add(node); List<QuestionPaperFileElement>cQuestionPaperFileElement = getChildQuestionPaperFileElements(node, nodes); sortedTreeList.addAll(cQuestionPaperFileElement); } System.out.println(""Sorted list....""+sortedTreeList); return sortedTreeList; } "	0	1	0	0	0	0
public static void setSignStatus(Block sign, ChatColor color) { if(sign.getType() == Material.SIGN_POST || sign.getType() == Material.WALL_SIGN) { Sign signblock = ((Sign) sign.getState()); String[] sLines = signblock.getLines(); if(sLines[0].length() < 14) { signblock.setLine(0, (color + ChatColor.stripColor(sLines[0]))); signblock.update(); } } } 	0	1	0	0	0	0
"@Override protected void onHandleIntent(final Intent intent) { if(CONTEXT_REFRESH_ACTION.equals(intent.getAction())) { Log.d(TAG, awarePreferences.areAllPreferencesSet() ? ""All preferences set!"" : ""Not all preferences set...""); Log.d(TAG, ""\n"" + awarePreferences.getActivity() + ""\n"" + awarePreferences.getWeather() + ""\n"" + awarePreferences.getLocation()); Log.d(TAG, FluentIterable.from(interestPreferences.getInterests()).join(Joiner.on(""; ""))); final ImmutableList<WithStateElement> stateElements = ImmutableList.of( new ActivityAdapter(awarePreferences.getActivity()), new WeatherAdapter(awarePreferences.getWeather()), new InterestListAdapter(interestPreferences.getInterests()));  final PoiType recommendedPoiType = heartManager.inferencePreferredPoiType(stateElements) .getPoiType();  Location location = awarePreferences.getLocation(); if(recommendedPoiType != null) { Log.d(TAG, ""Recommendation poi type: "" + recommendedPoiType.getText()); if(location != null) { OsmResponse response = new OsmExecutor().execute(new OsmJsonRequest(PoiTypeToConstraintMap.get(recommendedPoiType), location)); Log.d(TAG, response.toString()); } handler.post(new Runnable() { @Override public void run() { Toast.makeText( getApplicationContext(), recommendedPoiType.getText(), Toast.LENGTH_SHORT).show(); } }); } } } "	0	1	0	0	0	0
@Override public void resetTask() { timer.reset(); startingLength = targetLength = 0; timeout = 0; this.operation = BeaconClaimOperation.NONE; } 	0	1	0	0	0	0
"private void restoreCache() { // Make sure we are trying to load the right version of the cache SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this); int prefsVersion = prefs.getInt(PREFS_VERSION_KEY, 0); long now = new Date().getTime(); if (prefsVersion != PREFS_VERSION) { mScanStartTime = now; return; }  // Don't load the cache if it's stale mScanStartTime = prefs.getLong(SCAN_START_TIME_KEY, 0); scanDelta = now - mScanStartTime; if (scanDelta >= SCAN_STALE_TIME_MILLIS) { mScanStartTime = now; return; }  // Restore the cached metadata try { JSONObject serializedCollection = new JSONObject(prefs.getString(PW_COLLECTION_KEY, null)); mPwCollection = PhysicalWebCollection.jsonDeserialize(serializedCollection); Utils.setPwsEndpoint(this, mPwCollection); } catch (JSONException e) { Log.e(TAG, ""Could not restore Physical Web collection cache"", e); } catch (PhysicalWebCollectionException e) { Log.e(TAG, ""Could not restore Physical Web collection cache"", e); } // replace TxPower and RSSI data after restoring cache for (UrlDevice urlDevice : mPwCollection.getUrlDevices()) { if (Utils.isBleUrlDevice(urlDevice)) { Utils.updateRegion(urlDevice); } } // Unresolvable devices are typically not // relevant outside of scan range. Hence, // we specially clean them from the cache. if (scanDelta >= LOCAL_SCAN_STALE_TIME_MILLIS) { for (UrlDevice urlDevice : mPwCollection.getUrlDevices()) { if (!Utils.isResolvableDevice(urlDevice)) { mPwCollection.removeUrlDevice(urlDevice); } } } } "	0	1	0	0	0	0
private int getCRAMRecordCount(final String cramFileName) { final CRAMFileReader cramReader = new CRAMFileReader(new File(cramFileName), (File)null, testReferenceSource); final Iterator<SAMRecord> it = cramReader.getIterator(); int recCount = 0; while (it.hasNext()) { final SAMRecord rec = it.next(); recCount++; } cramReader.close(); return recCount; } 	1	1	1	0	1	0
"private Condition getCondition(String content) { Condition condition; String[] values = content.split(""\\|""); String conId = values[0];  switch (conId) { case ""raining"": boolean raining = Boolean.parseBoolean(values[1]); condition = new RainingCondition(raining); break; case ""thundering"": boolean thundering = Boolean.parseBoolean(values[1]); condition = new ThunderingCondition(thundering); break; case ""time"": String time = values[1].toLowerCase(); condition = new TimeCondition(time); break; case ""biome"": Biome biome = Biome.valueOf(values[1].toUpperCase()); condition = new BiomeCondition(biome); break; case ""enchantment"": Enchantment ench = IdentityUtils.getEnchantment(values[1].toLowerCase()); int lv = Integer.parseInt(values[2]); condition = new EnchantmentCondition(ench, lv); break; case ""level"": int level = Integer.parseInt(values[1]); condition = new LevelCondition(level); break; case ""contest"": boolean ongoing = Boolean.parseBoolean(values[1]); condition = new ContestCondition(ongoing); break; case ""potioneffect"": PotionEffectType effectType = IdentityUtils.getPotionEffectType(values[1]); int amplfier = Integer.parseInt(values[2]) - 1; // amplifier starts with 0 condition = new PotionEffectCondition(effectType, amplfier); break; case ""height"": int minHeight = Integer.parseInt(values[1]); int maxHeight = Integer.parseInt(values[2]); condition = new HeightCondition(minHeight, maxHeight); break; case ""mcmmo_skill"": String skillType = values[1]; level = Integer.parseInt(values[2]); condition = new MCMMOSkillCondition(skillType, level); break; case ""worldguard_region"": String regionId = values[1]; condition = new WGRegionCondtion(regionId); break; default: return null; } return condition; } "	1	0	1	0	0	0
private boolean isDelay() { Integer delay = getDelay(); ProviderConfig provider = getProvider(); if (delay == null && provider != null) { delay = provider.getDelay(); } return supportedApplicationListener && (delay == null || delay.intValue() == -1); } 	1	0	1	0	0	0
"public FluentWebElementAssert hasId(final String idToFind) { String actualId = actual.id(); if (!actualId.equals(idToFind)) { failWithMessage(""The element does not have the id: "" + idToFind + "" . Actual id found : "" + actualId); } return this; } "	1	0	1	0	0	0
"public boolean filterStoryItem(Story item){  boolean show = true;  if (!this.title.equals("""") && !item.getTitle().contains(this.title)&& !item.getTitle().toLowerCase().contains(this.title.toLowerCase())){  show = false; }  if (!this.author.equals("""") && !item.getAuthor().contains(this.author) && !item.getAuthor().toLowerCase().contains(this.author.toLowerCase()) && show){ show = false; }  if (!this.size_max.equals("""") && show){  if(Integer.parseInt(this.size_max) > Integer.parseInt(item.getSize())){ show = false; } }  if (!this.creationDateMin.equals(""Datum festlegen"") && show){  Date dateMin = null; Date itemDate = null; try { SimpleDateFormat sdf = new SimpleDateFormat(""dd. MM. yyyy""); dateMin = sdf.parse(this.creationDateMin); //""created_at"" format: ""2015-05-01 17:08:31"", //sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss""); sdf = new SimpleDateFormat(""yyyy-MM-dd""); itemDate = sdf.parse(item.getCreated_at());  if(itemDate.before(dateMin) && !itemDate.equals(dateMin) && show){ show = false; }  } catch (ParseException e) { // TODO Auto-generated catch block e.printStackTrace(); } }    if (!this.creationDateMax.equals(""Datum festlegen"") && show){  Date dateMax = null; Date itemDate = null; try { SimpleDateFormat sdf = new SimpleDateFormat(""dd. MM. yyyy""); dateMax = sdf.parse(this.creationDateMax); //""created_at"" format: ""2015-05-01 17:08:31"", //sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss""); sdf = new SimpleDateFormat(""yyyy-MM-dd""); itemDate = sdf.parse(item.getCreated_at()); if(itemDate.after(dateMax) && !itemDate.equals(dateMax)){ show = false; } } catch (ParseException e) { // TODO Auto-generated catch block e.printStackTrace(); } }   if (!this.city.equals("""") && !this.latitude.equals("""") && !this.longitude.equals("""") && show){  Location filterLocation = new Location(""filterLocation""); Location itemLocation = new Location(""itemLocation"");  filterLocation.setLatitude(Double.parseDouble(this.latitude)); filterLocation.setLongitude(Double.parseDouble(this.longitude));  itemLocation.setLatitude(item.getLatitude()); itemLocation.setLongitude(item.getLongitude());  float distance = filterLocation.distanceTo(itemLocation)/1000; //approximate distance in meters/1000 for km  if(distance > (double)Double.parseDouble(this.radius)){ show = false; } }  return show; } "	1	0	1	1	0	0
public void resetAnimation(int id) { // timer.restart(); timer.stop(); clear(); switch(id) { case 0: s = InitialConditions.initRandomParticles(10, 2); break; case 1: s = InitialConditions.initRandomParticles(100, 1); break; case 2: s = InitialConditions.initRandomParticles(1000, 0.5); break; case 3: s = InitialConditions.initRandomParticles(10000, 0.01); break; case 4: s = InitialConditions.initGravity(1, 2); break; case 5: s = InitialConditions.initElectric(1, 2); break; case 6: s = InitialConditions.initMagnetic(3, 2); break; case 7: s = InitialConditions.initPair(0.1,1); break; case 8: s = InitialConditions.initTwoStream(0.1,1,1000); break; case 9: s = InitialConditions.initWeibel(0.01,1,2000,4,0.9); break; case 10: s = InitialConditions.initOneTest(0.01,1); break; case 11: s = InitialConditions.initWaveTest(0.2); break; case 12: s = InitialConditions.initPair3D(0.1,0.1); break; } updateFieldForce(); s.prepareAllParticles(); s.turnGridForceOn(); timer.start(); } 	1	0	1	1	0	0
public static DiceValue getRandom() { int random = RANDOM.nextInt(DiceValue.SPADE.ordinal()); return values()[random]; } 	1	0	1	1	0	0
"public void evaluate(final PojoClass pojoClass) { for (PojoField fieldEntry : pojoClass.getPojoFields()) { if (!ValidationHelper.isStaticFinal(fieldEntry) && !fieldEntry.hasGetter()) { Affirm.fail(String.format(""[%s] is missing a getter"", fieldEntry)); } } } "	0	1	0	0	0	0
"@Override public RunningLogContext<String> buildMessage(final LogContext<String> previous, final Object currentObject) {  if (currentObject == null) { return initialToRunning(previous); }  if (previous != null) { String lastData = initialToRunning(previous).getData();  messageBuilder.append(lastData) .append(SEPARATOR); }  try { buildMessage(currentObject, new ArrayList<>(), """", 0);  trimLastSeparator(); } catch (Throwable t) { messageBuilder.append(configs.getExceptionTranslator().translate(t)); }  return new RunningLogContext<>(messageBuilder.toString()); } "	1	0	1	1	0	0
private RunningLogContext<List<Map<String, Object>>> buildMessage(final LogContext<List<Map<String, Object>>> previous, final Object currentObject, String key) { if (currentObject == null) { return JsonContextUtils.initialToRunning(previous); }  buildMessage(currentObject, new ArrayList<>(), key, 0);  RunningLogContext<List<Map<String, Object>>> nextContext = JsonContextUtils.initialToRunning(previous);  if (nextContext == null || nextContext.getData() == null) { nextContext = new RunningLogContext<>(new ArrayList<>()); }  nextContext.getData().add(messageBuilderStack.peek());  return nextContext; } 	1	0	1	1	0	0
public static void updateGalleryInfo(Context context, Uri uri) { ContentValues values = new ContentValues(); File file = getFileFromUri(context, uri); if (file.exists()) { values.put(MediaStore.Images.Media.SIZE, file.length()); } ContentResolver resolver = context.getContentResolver(); resolver.update(uri, values, null, null); } 	1	1	1	1	0	0
public void startService() { Intent myIntent = new Intent(MainActivity.this, BackgroundService.class); pendingIntent = PendingIntent.getService(MainActivity.this, 0, myIntent, 0);  /* * First run timeout */ long startTimeout = System.currentTimeMillis() + Defs.SERVICE_FIRST_RUN_INTERVAL;  /** * Align service interval to 1/2 a day for devices with API < 19 */ long period = Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT ? AlarmManager.INTERVAL_HALF_DAY : Defs.SERVICE_PERIODIC_INTERVAL;  AlarmManager alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE); alarmManager.setInexactRepeating(AlarmManager.RTC, startTimeout, period, pendingIntent); } 	0	1	0	0	0	0
public String getJavascriptType() { return buildJavascriptType(dtField.getDomain()); } 	1	0	1	0	0	0
@Override public void awake() { super.awake(); keys = null; entryName = null; cacheDuration = null; values = null; entry = (Entry) cache.get(values()); } 	0	1	0	0	0	0
"public static File[] discoverMediaPaths() { ArrayList<File> scanTargets = new ArrayList<File>();  // this should always exist scanTargets.add(Environment.getExternalStorageDirectory());  // this *may* exist File sdCard = new File(""/storage/sdcard1""); if (sdCard.isDirectory()) scanTargets.add(sdCard);  return scanTargets.toArray(new File[scanTargets.size()]); } "	1	0	1	0	0	0
private void addFiltered(Pattern filter, String key, ArrayList<String> data) { ArrayList<String> list = new ArrayList<String>(); for (String s : data) { Matcher matcher = filter.matcher(s); if (matcher.matches()) { list.add(matcher.group(1)); } } if (list.size() > 0) put(key, list); } 	1	0	1	0	0	0
"public void discoverRootFiles( IProgressMonitor 			monitor, ISVDBArgFileIndexBuildData	build_data) { fLog.debug(""discoverRootFiles - "" + fBaseLocation);  /* clearFilesList(); clearIncludePaths(); clearDefines(); */  monitor.beginTask(""Discover Root Files"", 4);  // Add an include path for the arg file location build_data.addIncludePath(fResolvedBaseLocationDir);  String resolved_argfile_path = fBaseLocation; if (fFSProvider.fileExists(resolved_argfile_path)) { processArgFile( new SubProgressMonitor(monitor, 4), build_data, null, null, fResolvedBaseLocationDir, fResolvedBaseLocation, false); } else { String msg = ""Argument file \"""" + fBaseLocation + ""\"" (\"""" + fResolvedBaseLocationDir + ""\"") does not exist""; fLog.error(msg); if (fProjectName != null) { // TODO: must save this somewhere... fFSProvider.addMarker( ""${workspace_loc}/"" + fProjectName, ISVDBFileSystemProvider.MARKER_TYPE_ERROR, 0, msg); } }  monitor.done(); } "	1	0	1	1	0	0
"@Override public <T> T forwardTo(final Class<T> type) { return proxifier.proxify(type, new MethodInvocation<T>() {  @Override public Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) { try { logger.debug(""Executing {}"", method); ControllerMethod old = methodInfo.getControllerMethod(); methodInfo.setControllerMethod(DefaultControllerMethod.instanceFor(type, method)); Object methodResult = method.invoke(container.instanceFor(type), args); methodInfo.setControllerMethod(old);  Type returnType = method.getGenericReturnType(); if (!(returnType == void.class)) { request.setAttribute(extractor.nameFor(returnType), methodResult); } if (response.isCommitted() || result.used()) { logger.debug(""Response already commited, not forwarding.""); return null; } String path = resolver.pathFor(DefaultControllerMethod.instanceFor(type, method)); logger.debug(""Forwarding to {}"", path); request.getRequestDispatcher(path).forward(request, response); return null; } catch (InvocationTargetException e) { propagateIfPossible(e.getCause()); throw new ProxyInvocationException(e); } catch (Exception e) { throw new ProxyInvocationException(e); } } }); } "	1	0	1	0	0	0
"public User createExternalUser(User user, final String externalUserId, String accessToken, ExternalProviderType externalProviderType, Locale locale) { // Generate random password for the external user, so that the validation is passed. user.setPassword(passwordEncoder.encode(PasswordGenerator.generatePassword()));  if (validationService.validateCreateUser(user)) { if (user.getId() == null) { User validatedExternalProviderUser = transactionUtils.executeInTransactionWithResult(() -> { return externalProviderService.findUserWithExternalProvider(externalProviderType, externalUserId); });  if (validatedExternalProviderUser == null) { // Check if access token is valid. if (socialNetworksService.isValidToken(accessToken, externalProviderType)) { // Register user. transactionUtils.executeInTransaction(() -> { user.setGuid(GuidGenerator.generate()); user.setAccountStatus(AccountStatus.ACTIVE); user.setCreatedOn(new DateTime()); user.getExternalProviders().add(ExternalProvider.provider(externalProviderType, externalUserId, accessToken));  userDao.persist(user); });  emailService.sendWelcomeExternalEmail(user.getUsername(), user.getEmail(), locale);  // Add notification to the new user. notificationService.addWelcomeNotificationAsync(user);  return user; } else { throw new RestApiException(ResultCode.INVALID_TOKEN, ""The provided token is not valid.""); } } else { throw new RestApiException(ResultCode.EXTERNAL_PROVIDER_ALREADY_LINKED_FOR_OTHER_USER, ""This external provider is already used for another user.""); } } else { throw new RestApiException(ResultCode.INVALID_ID, ""ID has been provided to create endpoint -- This is not allowed""); } } return null; } "	1	0	1	0	0	0
private void stopPokeScan() { try { mapObjectsLoader.interrupt(); mapObjectsLoader.join(500); showProgressbar(false); } catch (InterruptedException e) { e.printStackTrace(); } } 	1	1	1	0	1	0
"protected void checkJob(LaserJob job) throws IllegalJobException { for (JobPart p : job.getParts()) { boolean pass = false; for (double d : this.getResolutions()) { if (d == p.getDPI()) { pass = true; break; } } if (!pass) { throw new IllegalJobException(""Resoluiton of "" + p.getDPI() + "" is not supported""); } if (p.getMinX() < 0 || p.getMinY() < 0) { throw new IllegalJobException(""The Job exceeds the laser-bed on the top or left edge""); } double maxX = Util.px2mm(p.getMaxX(), p.getDPI()); double maxY = Util.px2mm(p.getMaxY(), p.getDPI()); if (maxX > this.getBedWidth() || maxY > this.getBedHeight()) { throw new IllegalJobException(""The Job is too big ("" + maxX + ""x"" + maxY + "") for the Laser bed ("" + this.getBedHeight() + ""x"" + this.getBedHeight() + "")""); } } } "	0	0	0	1	0	0
public Set<MallocSite> commonMallocSites(PointsToValue other) { Set<MallocSite> commonMallocs = new HashSet<>(); for (MallocSite m: this.mallocs.keySet()) { if (other.mallocs.containsKey(m)) commonMallocs.add(m); } return commonMallocs; } 	0	1	0	0	0	0
"public Body<Predictions> getModel() {  Body<Predictions> body = new Body<Predictions>(); List<AgencyAndId> stopIds = new ArrayList<AgencyAndId>(); List<AgencyAndId> routeIds = new ArrayList<AgencyAndId>();  if (isValid(body, stopIds, routeIds)) {  String serviceUrl = getServiceUrl() + agencyId + PREDICTIONS_COMMAND + ""?"";  String routeStop = """";  for (AgencyAndId routeId : routeIds) { routeStop += ""rs="" + getIdNoAgency(routeId.toString()) + ""|"" + getIdNoAgency(stopId) + ""&""; } String uri = serviceUrl + routeStop + ""format="" + REQUEST_TYPE; _log.info(uri); try { int timeout = _configUtil.getHttpTimeoutSeconds(); JsonArray predictionsJson = _httpUtil.getJsonObject(uri, timeout).getAsJsonArray( ""predictions""); Type listType = new TypeToken<List<Predictions>>() { }.getType();  List<Predictions> predictions = new Gson().fromJson(predictionsJson, listType);  modifyJSONObject(predictions);  body.getResponse().addAll(predictions);  } catch (Exception e) { body.getErrors().add(new BodyError(""No valid results found."")); _log.error(e.getMessage()); } }  return body;  } "	1	1	1	0	1	0
"@Override public void performTask() throws Exception { final String filename = getPath() + ""/"" + (AlkisConstants.COMMONS.VERMESSUNG_HOST_BILDER.equalsIgnoreCase(host) ? ""vermriss"" : ""ergdok"") + "".pdf"";  final Object[] tmp = VermessungsRissReportHelper.generateReportData( auftragsnummer, projektnummer, risseBeans, host, MultiPagePictureReader.class);  final Collection<CidsBean> reportBeans = (Collection)tmp[0]; final Map parameters = (Map)tmp[1]; final Collection<URL> additionalFilesToDownload = (Collection)tmp[2];  final JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(reportBeans);  { OutputStream out = null; try { out = new FileOutputStream(filename); jasperReportDownload(VermessungsunterlagenHelper.VERMRISS_REPORT, parameters, dataSource, out); } finally { closeStream(out); } }  final ExtendedAccessHandler extendedAccessHandler = new SimpleHttpAccessHandler(); for (final URL additionalFileToDownload : additionalFilesToDownload) { final String additionalFilename = getPath() + additionalFileToDownload.getFile() .substring(additionalFileToDownload.getFile().lastIndexOf('/') + 1); final String pureAdditionalFilename = additionalFilename.substring(0, additionalFilename.lastIndexOf('.'));  InputStream in = null; OutputStream out = null; try { in = extendedAccessHandler.doRequest(additionalFileToDownload); out = new FileOutputStream(additionalFilename); downloadStream(in, out); } catch (Exception ex) { LOG.warn(""could not download additional File"", ex); VermessungsunterlagenHelper.writeExceptionJson( ex, VermessungsunterlagenHelper.getPath(getJobKey()) + ""/fehlerprotokoll_"" + pureAdditionalFilename + "".json""); } finally { closeStream(in); closeStream(out); } } } "	1	0	1	1	0	0
"@RequestMapping(""/supplier"") public String displaySupplierDashboard(ModelMap model){ Long supplierId = userService.getLoggedInUser().getId(); model.addAttribute(""orders"", orderService.getAllRequestedOrderForSupplierId(supplierId)); return ""supplier""; } "	1	0	1	1	0	0
"public void checkConfigVersions() { if (new File(getDataFolder(), ""config.yml"").exists()) { if (fileManager.getConfigVersion() != 1.6) { SendConsoleMessage.warning(""Your config.yml is out of date! please remove or back it up before using the plugin!""); errorCount++; } }  if (new File(getDataFolder(), ""messages.yml"").exists()) { if (fileManager.getMessagesConfigVersion() != 1.2) { SendConsoleMessage.warning(""Your messages.yml is out of date! please remove or back it up before using the plugin!""); errorCount++; } } } "	1	1	1	1	0	0
"public void setPrintInfo() { jProgressBar1.setVisible(true); updatePrintBar(0); tInfo2.setText(Languager.getTagValue(1, ""Print"", ""Print_Splash_Info3"")); tInfo3.setText(Languager.getTagValue(1, ""Print"", ""Print_Splash_Info4"")); tEstimation.setText(Languager.getTagValue(1, ""Print"", ""Print_Estimation"")); tRemaining.setText(Languager.getTagValue(1, ""Print"", ""Print_Remaining"")); tInfo3.setVisible(true); tRemaining.setVisible(true); tEstimation.setVisible(true); vEstimation.setVisible(true); vRemaining.setVisible(true); bPause.setVisible(false); } "	1	1	1	1	0	0
@Nullable public final Icon getIcon(@NotNull PsiElement element, int flags) { PsiFile containingFile = element.getContainingFile();  if(containingFile != null) { VirtualFile vFile = containingFile.getVirtualFile(); if(vFile == null) return AfterglowIcons.DIRECTORY;  AfterglowIconCache cache = ApplicationManager.getApplication().getComponent(AfterglowIconCache.class); return cache.getIcon(vFile, flags); }  return AfterglowIcons.DIRECTORY; } 	1	0	1	0	0	0
"@Override public final void runCommand(MessageReceivedEvent event, String args) { RemindHandler remindHandler = rexCord.getRemindHandler();  //Target message inside quotation marks int messageStart = args.indexOf(""\""""); int messageEnd = args.lastIndexOf(""\"""");  if (messageStart == messageEnd || messageStart == -1 || messageEnd == -1) { rexCord.sendMessage(event.getChannel(), ""Message not detected""); return; }  try { //Do +1 as substring is on [start, end-1] interval String message = args.substring(messageStart + 1, messageEnd); String dateQuery = args.substring(0, messageStart);  //Use Natty Date Parser Parser parser = new Parser(); List<DateGroup> groups = parser.parse(dateQuery);  //Get Natty's interpreted Date Date targetDate = groups.get(0).getDates().get(0);  String confirm = String.format(""Ok, I'll remind you on %s: \""%s\"""", targetDate.toString(), message); rexCord.sendMessage(event.getChannel(), confirm);  remindHandler.addReminder(new Reminder(targetDate, message, event.getAuthor())); } catch (Exception e) { rexCord.sendMessage(event.getChannel(), ""Could not interpret query :(""); } } "	1	1	1	1	0	0
"private static String hash(String s) { MessageDigest md = null; String ret = null; try { md = MessageDigest.getInstance(""SHA-1""); ret = Base64.getEncoder().encodeToString(md.digest(s.getBytes())); } catch (NoSuchAlgorithmException e) { e.printStackTrace(); } return ret; } "	1	0	1	0	0	0
private SearchCriterion uniqueCriterionFor(final Entity entity) { if (Objects.equals(String.class, fieldDefinition.getType().getType())) { return SearchRestrictions.iEq(fieldDefinition.getName(), entity.getField(fieldDefinition.getName())); } return SearchRestrictions.eq(fieldDefinition.getName(), entity.getField(fieldDefinition.getName())); } 	0	1	0	0	0	0
private void parseExtractPropertyBinder(Element element, Map<TypeElement, ViewModelClass> targetClassMap) { ViewModelClass viewModelClass = getOrCreateViewModelClass(targetClassMap, (TypeElement)element.getEnclosingElement()); ExtractProperty dependencyProperty = element.getAnnotation(ExtractProperty.class); viewModelClass.addBinder(new ExtractPropertyBinder(element.getSimpleName().toString(), dependencyProperty.value())); } 	0	1	0	0	0	0
"private URI generateCopyToTarget(final URI src, final int count) { final URI path = stripFragment(src); final String fragment = src.getFragment(); for (int i = 0; ; i++) { final StringBuilder ext = new StringBuilder(); ext.append('_'); ext.append(Integer.toString(count)); if (i > 0) { ext.append('_'); ext.append(Integer.toString(i)); } ext.append('.'); ext.append(getExtension(path.toString())); final URI dst = toURI(replaceExtension(path.toString(), ext.toString())); final URI target = URLUtils.getRelativePath(new File(job.getInputDir(), ""dummy"").toURI(), currentFile.toURI().resolve(dst)); if (job.getFileInfo(target) == null) { return setFragment(dst, fragment); } } } "	0	0	0	1	0	0
private void initStartPage() { final ERVirtualDiagram vdiagram = diagram.getCurrentVirtualDiagram(); if (vdiagram != null) { setActivePage(1); } else { setActivePage(0); } final MainDiagramEditor activeEditor = (MainDiagramEditor) getActiveEditor(); final ZoomManager zoomManager = (ZoomManager) activeEditor.getAdapter(ZoomManager.class); zoomManager.setZoom(diagram.getZoom()); activeEditor.setLocation(diagram.getX(), diagram.getY()); } 	0	1	0	0	0	0
public PermissionCheckBuilder newPermissionCheckBuilder() { return new PermissionCheckBuilder(Context.getProcessEngineConfiguration().isRevokePermissionCheckEnabled()); } 	1	0	1	0	0	0
"public Comment create(Complaint complaint) { Comment result; Actor actor; actor = actorService.findActorByUserId(); Assert.notNull(actor, ""No hay ningun actor conectado""); Assert.isTrue(complaint.getAdministrator().getId()==actor.getId()||complaint.getCustomer().getId()==actor.getId(), ""Intentando acceder a un sitio sin permisos""); result = new Comment(); result.setCreationMoment(new Date(System.currentTimeMillis()-1000)); result.setActor(actor); result.setComplaint(complaint);   return result; } "	0	1	0	0	0	0
"public static Map<FormConfiguration, String> readFormValuesFromMap( final Map<String,String> inputMap, final Collection<FormConfiguration> formItems, final Locale locale ) throws PwmDataValidationException, PwmUnrecoverableException { if (formItems == null || formItems.isEmpty()) { return Collections.emptyMap(); }  final Map<FormConfiguration, String> returnMap = new LinkedHashMap<>();  if (inputMap == null) { return returnMap; }  for (final FormConfiguration formItem : formItems) { final String keyName = formItem.getName(); final String value = inputMap.get(keyName);  if (formItem.isRequired()) { if (value == null || value.length() < 0) { final String errorMsg = ""missing required value for field '"" + formItem.getName() + ""'""; final ErrorInformation error = new ErrorInformation(PwmError.ERROR_FIELD_REQUIRED, errorMsg, new String[]{formItem.getLabel(locale)}); throw new PwmDataValidationException(error); } }  if (formItem.isConfirmationRequired()) { final String confirmValue = inputMap.get(keyName + Validator.PARAM_CONFIRM_SUFFIX); if (!confirmValue.equals(value)) { final String errorMsg = ""incorrect confirmation value for field '"" + formItem.getName() + ""'""; final ErrorInformation error = new ErrorInformation(PwmError.ERROR_FIELD_BAD_CONFIRM, errorMsg, new String[]{formItem.getLabel(locale)}); throw new PwmDataValidationException(error); } }  if (formItem.getType() == FormConfiguration.Type.checkbox) { final String parsedValue = parseInputValueToFormValue(formItem, value); returnMap.put(formItem, parsedValue); } else if (value != null && !formItem.isReadonly()) { final String parsedValue = parseInputValueToFormValue(formItem, value); returnMap.put(formItem, parsedValue); }  }  return returnMap; } "	1	1	1	1	0	0
"@Override public void onTimeout(final Interest interest) { state.nRetries--; if (state.nRetries > 0) { try { face.expressInterest(new Interest(interest).setNonce(null), this, this); } catch (IOException e) { LOG.log(Level.INFO, ""Error while expressing interest: "" + e.toString(), e); } } else { state.isDone = true; } } "	1	0	1	0	0	0
"@Override public void onClick(View v) {  switch (v.getId()) { case R.id.mpWifiLobby_exit: this.finish(); break; case R.id.mpWifiLobby_button_startGame: if (multiplayerGame.getGameState() == MultiplayerGame.GameState.CREATING && isLeader) { startButton.setText(""Start""); multiplayerGame.setGameState(MultiplayerGame.GameState.SEARCH4PLAYERS); db.updateOnlineGame(multiplayerGame); startButton.setEnabled(false); } else if (multiplayerGame.getGameState() == MultiplayerGame.GameState.SEARCH4PLAYERS && isLeader) { multiplayerGame.setGameState(MultiplayerGame.GameState.INGAME); db.updateOnlineGame(multiplayerGame); } else { startButton.setEnabled(false); onlineGamePlayer.setPlayerState(OnlineGamePlayer.PlayerState.READY); db.updateOnlineGamePlayer(onlineGamePlayer); }  break;  case R.id.mpWifiLobby_button_settings: Intent i = new Intent(this, MultiplayerSettings.class); this.startActivity(i); break; } } "	0	0	0	1	0	0
@Override public void hideProgress() { loader.setVisibility(View.GONE); stateLayout.hideProgress(); stateLayout.showReload(getPresenter().downloadedStream() == null ? 0 : 1); } 	0	1	0	0	0	0
@Override public int compareTo(Entry o) { return id.compareTo(o.getId()); } 	1	0	1	1	0	0
"public static void playClipWithVolume(String fileName, double volume) { try { AudioClip clip = new AudioClip(""file:Resources/Sound/""); clip.setVolume(volume); clip.play(); } catch (Exception e) { System.out.println(e.toString()); } } "	0	0	0	1	0	0
private void setZoomLevel(int zoomLevel) { this.mapView.getModel().mapViewPosition.setZoomLevel((byte) zoomLevel); } 	1	0	1	0	0	0
private void initializeListeners() { final MapConfig mapConfig = getMapConfig();  for (EntryListenerConfig listenerConfig : mapConfig.getEntryListenerConfigs()) { final MapListener listener = initializeListener(listenerConfig); if (listener != null) { if (listenerConfig.isLocal()) { addLocalEntryListenerInternal(listener); } else { addEntryListenerInternal(listener, null, listenerConfig.isIncludeValue()); } } }  for (MapPartitionLostListenerConfig listenerConfig : mapConfig.getPartitionLostListenerConfigs()) { final MapPartitionLostListener listener = initializeListener(listenerConfig); if (listener != null) { addPartitionLostListenerInternal(listener); } } } 	1	0	1	0	0	0
private static String asBase64String(ByteBuffer bytes) { ByteBuffer base64Buffer = Base64.getUrlEncoder().encode(bytes); return new String(asByteArray(base64Buffer)); } 	0	1	0	0	0	0
"@Override public NBTTagCompound getUpdateTag(){ NBTTagCompound nbt = super.getUpdateTag(); if(col != null){ nbt.setInteger(""col"", col.getRGB() & 16777215); } nbt.setInteger(""reach"", reach); nbt.setInteger(""size"", size); return nbt; } "	1	1	1	1	0	0
private void checkJson(Feed feed, TypeReference typeReference) throws IOException { String json = marshalToJson(feed); Feed feedFromJson = unmarshalFromJson(json, typeReference); assertEquals(feed.getUpdated(), feedFromJson.getUpdated()); feedFromJson.setUpdated(feed.getUpdated()); assertEquals(feed, feedFromJson); } 	0	1	0	0	0	0
public void addMarker(String title, double longitude, double latitude) { myMap.addMarker(new MarkerOptions().title(title).position(new LatLng(longitude, latitude))); } 	0	0	0	1	0	0
public void visit(BlockStmt n, VisitorContext ctx) {  Object o = ctx.get(NODE_TO_COMPARE_KEY); if (o != null && o instanceof BlockStmt) { BlockStmt aux = (BlockStmt) o; boolean backup = isUpdated(); setIsUpdated(false); increaseIndentation(); inferIndentationSize(n, n.getStmts()); inferASTChanges(n.getStmts(), aux.getStmts()); decreaseIndentation(); if (!isUpdated()) { increaseUnmodifiedNodes(BlockStmt.class); } else { increaseUpdatedNodes(BlockStmt.class); } setIsUpdated(backup || isUpdated()); } else if (o != null) { setIsUpdated(true); applyUpdate(n, (Node) o); }  } 	0	1	0	0	0	0
private void handleClose() { commitTyped(getCurrentInputConnection()); requestHideSelf(0); } 	1	0	1	0	0	0
"@NiftyEventSubscriber(id = ""server"") public void onServerChanged(@Nonnull String topic, @Nonnull DropDownSelectionChangedEvent<String> data) { List<AccountSystemEndpoint> endpoints = accountSystem.getEndPoints(); int selectedIndex = data.getSelectionItemIndex(); if (selectedIndex >= 0 && selectedIndex < endpoints.size()) { credentials = new Credentials(endpoints.get(selectedIndex), IllaClient.getCfg()); restoreLoginData(); } } "	1	1	1	1	0	0
"public static void injectProductIntoEvent(AdjustEvent event, String productId, Map<String, Object> parameters) { if (null == event) { logger.error(""Event object is required.""); return; } if (null == productId || """".equals(productId)) { logger.error(""Product ID is required.""); return; }  Map<String, List<Map<String, Object>>> po = new HashMap<>(1); List<Map<String, Object>> productList; Map<String, Object> product;  if (null != parameters) { product = filter(parameters, productAliases); } else { product = new HashMap<String, Object>(); }  product.put(SCMProductID, product); productList = Arrays.asList(product); po.put(SCMProducts, productList); addPartnerParameter(event, ""socio_po"", stringify(po)); } "	1	0	1	0	0	0
"public static void main(String[] args) { // Parse the input arguments parseArgs(args);  int nIterations = -1; int nIterationsIndex = argsList.indexOf(""-nIterations""); if (nIterationsIndex != -1) { int nIterationsIntIndex = nIterationsIndex + 1; if (nIterationsIntIndex >= argsList.size()) { System.err.println(""Number of n iterations argument is specified but a integer"" + "" is not. Please use the format: -nIterations aInteger""); System.exit(0); } nIterations = Integer.parseInt(argsList.get(nIterationsIntIndex)); if (nIterations < 1) { System.err.println(""Number of n iterations argument is specified but the integer"" + "" value provided is invalid. Please check the integer value.""); System.exit(0); } }  int randomTimes = 1; int randomTimesIndex = argsList.indexOf(""-randomTimes""); if (randomTimesIndex != -1) { int randomTimesIntIndex = randomTimesIndex + 1; if (randomTimesIntIndex >= argsList.size()) { System.err.println(""Number of random times argument is specified but a integer"" + "" is not. Please use the format: -randomTimes aInteger""); System.exit(0); } randomTimes = Integer.parseInt(argsList.get(randomTimesIntIndex)); if (randomTimes < 1) { System.err.println(""Number of random times argument is specified but the integer"" + "" value provided is invalid. Please check the integer value.""); System.exit(0); } } Map<String, RESULT> nameToOrigResults = getCurrentOrderTestListResults(origOrderTestList, filesToDelete);  // capture start time double start = System.nanoTime(); TLGTime = System.nanoTime() - start;  listTestList = new ArrayList<>(); start = System.nanoTime();  Random rand = new Random(); if (nIterations == -1) { for (int i = 1; i <= randomTimes; i++) { System.out.println(""Randomization iteration number: "" + i + "" / "" + randomTimes); runIteration(i, randomTimes, rand, nameToOrigResults, start); } } else { double startTime = System.nanoTime(); int i = 1; while (i < nIterations) { if (runIteration(i, randomTimes, rand, nameToOrigResults, start)) { System.out.println(""Found new dependent tests. Resetting i.""); i = 1; } else { System.out.println(""No dependent tests found. i is "" + i + "" / "" + nIterations); i += 1; } } double runTotal = System.nanoTime() - startTime; System.out.println("">>>> Runtime to generate the dependent test list: "" + nanosecondToSecond(runTotal)); }  // Output the results output(true); } "	1	0	1	1	0	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);  new CustomView(this,null); //new CustomView2(this,null);  String s1 = getString(R.string.s1); String s3 = getString(R.string.s3); //Toast.makeText(this,""haha "" + "" | "" + s1 +  "" | "" + s3,Toast.LENGTH_LONG).show();   String s2 = getString(R.string.s2); Toast.makeText(this,""1"" + "" | "" + s1 + "" | "" + s2 + "" | "" + s3,Toast.LENGTH_LONG).show();  new Runnable(){ @Override public void run() {  } };  SampleApplication realApp = (SampleApplication)getApplication();   new Runnable(){ @Override public void run() { Toast.makeText(getApplicationContext(),""223"",Toast.LENGTH_LONG).show(); } }.run();  new T1(); new T2(); } "	0	1	0	0	0	0
private boolean isAudioFile(ContentType contentType) { if (contentType != null && contentType.type != null) { for (String[] array : new String[][]{CONTENT_TYPES_MPEG, CONTENT_TYPES_OGG, CONTENT_TYPES_AAC}) { if (Arrays.asList(array).contains(contentType.type)) { return true; } } } return false; } 	0	1	0	0	0	0
"public int verifyInstructorKey(String instructorKey) throws IOException { if(name == null || surname == null || id == null || exam == null || instructorKey == null) return -1; Socket socket = new Socket(""10.5.146.7"", 50101); // Connect to the host. DataInputStream in = new DataInputStream(socket.getInputStream()); DataOutputStream out = new DataOutputStream(socket.getOutputStream());  out.writeUTF(""Key verify.""); // Tell host which operation will occur.  // Send informations. out.writeUTF(name); out.writeUTF(surname); out.writeUTF(id); out.writeUTF(exam); out.writeUTF(instructorKey); out.flush();  String status = in.readUTF(); // Read the status code. if(status != null) { char c = status.charAt(0); return Character.getNumericValue(c); } socket.close(); return -1; } "	0	1	0	0	0	0
public Boolean selectDatabase(final String databaseName) throws ServiceException { Boolean selected = new ServerCallable<Boolean>(connPool, getTajoMasterAddr(), TajoMasterClientProtocol.class, false, true) {  public Boolean call(NettyClientBase client) throws ServiceException { checkSessionAndGet(client);  TajoMasterClientProtocolService.BlockingInterface tajoMasterService = client.getStub(); return tajoMasterService.selectDatabase(null, convertSessionedString(databaseName)).getValue(); } }.withRetries();  if (selected == Boolean.TRUE) { this.baseDatabase = databaseName; } return selected; } 	1	0	1	0	0	0
public static void replaceInFile(String replace, String with, Path file) throws IOException { Preconditions.checkNotNull(replace); Preconditions.checkNotNull(with); Preconditions.checkNotNull(file);  byte[] fileAsBytes = Files.readAllBytes(file); String fileAsString = new String(fileAsBytes); fileAsString = fileAsString.replaceAll(replace, with); Files.write(file, fileAsString.getBytes(), StandardOpenOption.TRUNCATE_EXISTING); } 	1	0	1	0	0	0
"public static void selfTest() { BoatGrader b = new BoatGrader();  System.out.println(""\n ***Testing Boats with only 3 children***""); begin(100, 2, b);  //	System.out.println(""\n ***Testing Boats with 2 children, 1 adult***""); //  	begin(1, 2, b);  //  	System.out.println(""\n ***Testing Boats with 3 children, 3 adults***""); //  	begin(3, 3, b); } "	1	0	1	0	0	0
public JSONArray getJSONFeatures(ApplicationLayer al,SimpleFeatureType ft, FeatureSource fs, Query q, String sort, String dir) throws IOException, JSONException, Exception{ Map<String,String> attributeAliases = new HashMap<String,String>(); if(!edit) { for(AttributeDescriptor ad: ft.getAttributes()) { if(ad.getAlias() != null) { attributeAliases.put(ad.getName(), ad.getAlias()); } } } List<String> propertyNames; if(al != null) { propertyNames = this.setPropertyNames(al, q, ft,edit); } else { propertyNames = new ArrayList<String>(); for(AttributeDescriptor ad: ft.getAttributes()) { propertyNames.add(ad.getName()); } }  if (sort!=null){ setSortBy(q, propertyNames, sort, dir); } /* Use the first property as sort field, otherwise geotools while give a error when quering * a JDBC featureType without a primary key. */ else if ( (fs instanceof org.geotools.jdbc.JDBCFeatureSource || fs.getDataStore() instanceof WFSDataStore ) && !propertyNames.isEmpty()){ int index = 0; if(fs.getSchema().getGeometryDescriptor().getLocalName().equals(propertyNames.get(0)) ){ if(propertyNames.size() > 1){ index = 1; }else { index = -1; } } if(index != -1){ setSortBy(q, propertyNames.get(index),dir); } } Integer start = q.getStartIndex(); if (start==null){ start=0; } boolean offsetSupported = fs.getQueryCapabilities().isOffsetSupported(); //if offSet is not supported, get more features (start + the wanted features) if (!offsetSupported && q.getMaxFeatures() < MAX_FEATURES || fs.getDataStore() instanceof WFSDataStore){ q.setMaxFeatures(q.getMaxFeatures()+start); } FeatureIterator<SimpleFeature> it = null; JSONArray features = new JSONArray(); try{ it=fs.getFeatures(q).features(); int featureIndex=0; while(it.hasNext()){ SimpleFeature feature = it.next(); /* if offset not supported and there are more features returned then * only get the features after index >= start*/ if (offsetSupported || featureIndex >= start){ JSONObject j = this.toJSONFeature(new JSONObject(),feature,ft,al,propertyNames,attributeAliases,0); features.put(j); } featureIndex++; } }finally{ if (it!=null){ it.close(); } fs.getDataStore().dispose(); } return features; } 	0	1	0	0	0	0
@Override public RandomFlameGeneratorState initState(Prefs pPrefs, RandomGradientGenerator pRandomGradientGenerator) { RandomFlameGeneratorState state = super.initState(pPrefs, pRandomGradientGenerator); RandomFlameGenerator generator = selectRandGen(); state.getParams().put(RANDGEN, generator); return state; } 	0	1	0	0	0	0
"@Override public void refresh() { localNameText.removeModifyListener(modifyListener); localNameText.removeKeyListener(keyListener); localNameText.removeFocusListener(focusListener); if (namedElement.getName() != null) { localNameText.setText(NamedElementUtil.getElementName(namedElement)); } else { localNameText.setText(""""); } localNameText.addModifyListener(modifyListener); localNameText.addKeyListener(keyListener); localNameText.addFocusListener(focusListener);  localNameText.setEnabled(!isReadOnly());  refreshBusinessNameText();  // TODO there should be a better way to force tabbed page label update tabbedPropertySheetPage.labelProviderChanged(new LabelProviderChangedEvent(new LabelProvider())); } "	1	1	1	0	1	0
"public static void main(String[] args) { GameManager gm = new GameManager(new Player(""Host"", 20)); //gm.setDebugLevelAI(true); AI ai1 = (AI)(gm.getPlayers().get(1)); ai1.setAIType(AIState.MODERNATE); ai1.setPrintDebug(true);  AI ai = (AI)gm.getPlayers().get(1); for(int i = 0; i<500; i++) { System.out.println(); System.out.println();   System.out.println(""Turn: "" + (i + 1)); gm.doStep();  System.out.println("" -------------- ""); System.out.println(""|              |""); for(int j = 0; j<4; j++) { System.out.println(""|              |["" + checkPlayerBaseSpot(ai, j*4) + ""]["" + checkPlayerBaseSpot(ai, j*4+1) + ""]["" + checkPlayerBaseSpot(ai, j*4+2) + ""]["" + checkPlayerBaseSpot(ai, j*4+3) + ""]|"" + ai.getAttackAtLane(j)); } System.out.println(""|              |""); System.out.println("" -------------- "");  for(int j = 0; j<4; j++) { System.out.println(""  ["" + checkPlayerBaseSpot(ai, 16+j) + ""]["" + checkPlayerBaseSpot(ai, 16+j+4) + ""]["" + checkPlayerBaseSpot(ai, 16+j+8) + ""]["" + checkPlayerBaseSpot(ai, 16+j+12) + ""]""); } System.out.println(""  ------------""); System.out.println(""   "" + ai.getAttackAtLane(4) + ""  "" + ai.getAttackAtLane(5) + ""  "" + ai.getAttackAtLane(6) + ""  "" + ai.getAttackAtLane(7)); System.out.println(""""); }  System.out.println(ai1.getMoney()); } "	0	1	0	0	0	0
"@Inject @Optional void eventReceivedRelatingObjectsLoadedEvents( @EventTopic(""event_text_relating_objects/*"") final BTSRelatingObjectsLoadingEvent event) { parentObject = event.getObject(); queryId = ""relations.objectId-"" + parentObject.get_id(); if (event != null && !event.getRelatingObjects().isEmpty()) { this.relatingObjectsEvent = event; sync.syncExec(new Runnable() { public void run() { loadRelatingObjects(event); } });  } } "	1	1	1	0	1	0
"private Animation animateCircle(Circle c, List<Location> l, String lastCategory) {  String thisCategory = l.get(0).getCategory().getCategory();  switch(Main.h.getFloorById(l.get(0).getFloorID()).getBuildingID()){ case -2: c.setFill(Color.web(""#0000ff"")); break; case 1: c.setFill(Color.web(""#00ff00"")); break; case 0: c.setFill(Color.web(""#ff0000"")); break; default: c.setFill(Color.web(""#ffffff"")); break; }  UniqueFloor uf = getUf(l.get(0)); if(uf == null){ flipToFloor(7); } else{ flipToFloor(uf.getFloorIndex()); }  double startX = c.getCenterX(); double startY = c.getCenterY();  double targetX = l.get(0).getX(); double targetY = l.get(0).getY();  double difx = targetX-startX; double dify = targetY-startY;  double dif = Math.sqrt(difx*difx+dify*dify);   final Animation expandPanel = new Transition() { { if((lastCategory.equals(""Elevator"") && thisCategory.equals(""Elevator"")) ||(lastCategory.equals(""Stairs"") && thisCategory.equals(""Stairs"") )){ setCycleDuration(Duration.millis(15*dif)); } else{ setCycleDuration(Duration.millis(3*dif)); }  }  @Override protected void interpolate(double fraction) {  //                double newX = curX + fraction * (x - curX); //                group.setTranslateX(newX); //                double newY = curY + fraction * (y - curY); //                group.setTranslateY(newY);  double newX = startX+difx*fraction; double newY = startY+dify*fraction; c.setCenterX(newX); c.setCenterY(newY); } };  expandPanel.setOnFinished(e -> { if(l.size()>1){ l.remove(0); animateCircle(c, l, thisCategory).play(); } }); return expandPanel; } "	0	1	0	0	0	0
public Section getSectionByLineIDAndSectionID(Global.Line line, Global.Section section) { for (Line l : lines) { if (l.getLineID() == line) { for (Section s : sections) { if (s.getSectionID() == section) { return s; } } } } return null; } 	0	0	0	1	0	0
"public void reloadPreference() { int index = mPreference.findIndexOfValue(mPreference.getValue()); if (index != -1) { setItemChecked(index, true); } else { Log.e(TAG, ""Invalid preference value.""); mPreference.print(); } } "	0	1	0	0	0	0
private synchronized void sendPeerList(Connection connectingPeer) { peerList.peerConnected.clear(); for (Connection connection : peers.values()) { peerList.peerConnected.add(new PeerConnected(connection.getAddress().getHostAddress(), connection.getPort())); } if (peerList.peerConnected.size() > 0) { connectingPeer.addToSendQue(SerializationUtils.getInstance().serialize(peerList), NetworkSendType.PEER_DATA); } } 	0	1	0	0	0	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Bundle bundle = getArguments(); product_ID = bundle.getInt(""prod_id""); productName = bundle.getString(""prod_name""); groceryList_ID = bundle.getInt(""gl_id""); groceryManager = new GroceryManager();  } "	0	1	0	0	0	0
"@Override public void reload(ICommandSender sender, ReloadType type) { if(world == null) { return; }  long ms = System.currentTimeMillis();  if(type.reload(Side.SERVER)) { FTBLibRegistries.INSTANCE.reloadConfig(); reloadPackModes(); MinecraftForge.EVENT_BUS.post(new ReloadEvent(Side.SERVER, sender, type, false)); }  new MessageReload(type).sendTo(null);  if(type.reload(Side.SERVER)) { FTBLibLang.reload_server.printChat(BroadcastSender.INSTANCE, (System.currentTimeMillis() - ms) + ""ms""); } } "	1	1	1	0	1	0
@Test public void testMovementEnemy() { Enemy eEnemy = new Enemy(new Vector(0.5, 0.9), this.gmMap); Enemy eEnemyTest = new Enemy(new Vector(0.5, 0.9), this.gmMap); eEnemy.getSpeed().setX(2); eEnemyTest.getSpeed().setX(2); this.gmMap.add(eEnemy); this.mh.onEachIteration(this.gmMap, 100); eEnemyTest.move(100); eEnemyTest.accelerate(); assertEquals(eEnemy.getSpeed(), eEnemyTest.getSpeed()); } 	0	1	0	0	0	0
"protected void onLoadFailed(boolean safe, Callback callback) { Method method = getDeclaredMethod(clazz, ""onLoadFailed""); invokeCallback(method, callback, safe); } "	1	0	1	1	0	0
"protected void runGame(){ rl = (RelativeLayout)findViewById(R.id.gameUI); questionID = 0; gameLength = (10) * 1000; //getResources().getInteger(R.integer.game_length  startTime = System.currentTimeMillis(); timeLastClicked = System.currentTimeMillis();  successCounter = 0; failCounter = 0; totalCounter = 0;  questionSet = new ArrayList<>(); questionIntervals = new ArrayList<>();  ArrayList<Question> questionList = (new DBHelper(this).getQuestions()); int intervalCounter = 1; for(Question q : questionList) { if(q.getQuestionType().equals(""MC"")) questionSet.add(0); else questionSet.add(1); questionIntervals.add(10 * intervalCounter); ++intervalCounter; }  numberDisplay = (TextView) findViewById(R.id.numberDisplay); rn = new Random(System.nanoTime()); genNewNumber(); } "	0	0	0	1	0	0
private void setStyle(SideMenuParams params) { if (params.disableOpenGesture) { setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED); } } 	0	1	0	0	0	0
@Override public void run() { while (true) { if (System.currentTimeMillis() - lastAction > 500) { if (playerAdjacentTo(_x, _y)) { _player.reduceHealth(monsters.get(this).attack()); if (_player.isDead()) { _gui.gameOver(); break; } } else { moveTowardsPlayer(); } _gui.refreshMenu(); lastAction = System.currentTimeMillis(); } } } 	0	1	0	0	0	0
"public static void addNewUser(final Activity context, final SubsonicFragment fragment, User sampleUser) { final User user = new User(); for(String role: User.ROLES) { if(role.equals(User.SETTINGS) || role.equals(User.STREAM)) { user.addSetting(role, true); } else { user.addSetting(role, false); } }  if(sampleUser.getMusicFolderSettings() != null) { for(User.Setting setting: sampleUser.getMusicFolderSettings()) { User.MusicFolderSetting musicFolderSetting = (User.MusicFolderSetting) setting; user.addMusicFolder(musicFolderSetting, true); } }  View layout = context.getLayoutInflater().inflate(R.layout.create_user, null); final TextView usernameView = (TextView) layout.findViewById(R.id.username); final TextView emailView = (TextView) layout.findViewById(R.id.email); final TextView passwordView = (TextView) layout.findViewById(R.id.password); final RecyclerView recyclerView = (RecyclerView) layout.findViewById(R.id.settings_list); LinearLayoutManager layoutManager = new LinearLayoutManager(context); layoutManager.setOrientation(LinearLayoutManager.VERTICAL); recyclerView.setLayoutManager(layoutManager); recyclerView.setAdapter(SettingsAdapter.getSettingsAdapter(context, user, null, true, new SectionAdapter.OnItemClickedListener<User.Setting>() { @Override public void onItemClicked(UpdateView<User.Setting> updateView, User.Setting item) { if(updateView.isCheckable()) { boolean newValue = !item.getValue(); item.setValue(newValue); updateView.setChecked(newValue); } }  @Override public void onCreateContextMenu(Menu menu, MenuInflater menuInflater, UpdateView<User.Setting> updateView, User.Setting item) {  }  @Override public boolean onContextItemSelected(MenuItem menuItem, UpdateView<User.Setting> updateView, User.Setting item) { return false; } }));  AlertDialog.Builder builder = new AlertDialog.Builder(context); builder.setTitle(R.string.menu_add_user) .setView(layout) .setPositiveButton(R.string.common_save, null) .setNegativeButton(R.string.common_cancel, null) .setCancelable(true);  final AlertDialog dialog = builder.create(); dialog.show();  dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { final String username = usernameView.getText().toString(); // Don't allow blank emails if ("""".equals(username)) { Util.toast(context, R.string.admin_change_username_invalid); return; }  final String email = emailView.getText().toString(); // Don't allow blank emails if ("""".equals(email)) { Util.toast(context, R.string.admin_change_email_invalid); return; }  final String password = passwordView.getText().toString(); if ("""".equals(password)) { Util.toast(context, R.string.admin_change_password_invalid); return; }  user.setUsername(username); user.setEmail(email); user.setPassword(password);  new SilentBackgroundTask<Void>(context) { @Override protected Void doInBackground() throws Throwable { MusicService musicService = MusicServiceFactory.getMusicService(context); musicService.createUser(user, context, null); return null; }  @Override protected void done(Void v) { fragment.onRefresh(); Util.toast(context, context.getResources().getString(R.string.admin_create_user_success)); }  @Override protected void error(Throwable error) { String msg; if (error instanceof OfflineException || error instanceof ServerTooOldException) { msg = getErrorMessage(error); } else { msg = context.getResources().getString(R.string.admin_create_user_error); }  Util.toast(context, msg); } }.execute();  dialog.dismiss(); } }); } "	1	0	1	0	0	0
"public static String getModelName(final GenModel gm) { Resource _eResource = gm.eResource(); final URI uri = _eResource.getURI(); final String s = uri.toString(); int pos = s.lastIndexOf(File.separator); String modelName = s.substring((pos + 1)); int _indexOf = modelName.indexOf("".genmodel""); pos = _indexOf; String _substring = modelName.substring(0, pos); modelName = _substring; return modelName; } "	1	0	1	1	0	0
"@Override public void contextInitialized(ServletContextEvent arg0) { NewsSourceList newsSourceList = NewsSourceList.getNewsSourceList(); try { newsSourceList.setNewsSourcesMap(NewsSourceDBAdapter.getNewsSources()); } catch (SQLException e) { System.err.println(""Failed to get available news sources""); System.err.println(e); } TimerTask rss = new RSSReader(newsSourceList); timer = new Timer(false); timer.scheduleAtFixedRate(rss, 0, 5*1000); } "	0	0	0	1	0	0
"public CommandResult execute(CommandSource src, CommandContext ctx) throws CommandException { if (src instanceof Player) { Player player = (Player) src; Nation nation = DataHandler.getNationOfPlayer(player.getUniqueId()); if (nation == null) { player.setMessageChannel(MessageChannel.TO_ALL); src.sendMessage(Text.of(TextColors.RED, LanguageHandler.ERROR_NONATION)); return CommandResult.success(); } NationMessageChannel channel = nation.getMessageChannel();  if (!ctx.<String>getOne(""msg"").isPresent()) { if (player.getMessageChannel().equals(channel)) { player.setMessageChannel(MessageChannel.TO_ALL); src.sendMessage(Text.of(TextColors.YELLOW, LanguageHandler.INFO_NATIONCHAT_OFF)); } else { player.setMessageChannel(channel); src.sendMessage(Text.of(TextColors.YELLOW, LanguageHandler.INFO_NATIONCHATON_ON)); } } else { Text header = TextSerializers.FORMATTING_CODE.deserialize(ConfigHandler.getNode(""others"", ""nationChatFormat"").getString().replaceAll(""\\{NATION\\}"", nation.getTag()).replaceAll(""\\{TITLE\\}"", DataHandler.getCitizenTitle(player.getUniqueId())));  Text msg = Text.of(header, "" "", TextColors.RESET, player.getName(), TextColors.WHITE, "": "", TextColors.YELLOW, ctx.<String>getOne(""msg"").get()); channel.send(player, msg); DataHandler.getSpyChannel().send(Text.of(TextSerializers.FORMATTING_CODE.deserialize(ConfigHandler.getNode(""others"", ""nationSpyChatTag"").getString()), TextColors.RESET, msg)); }  } else { src.sendMessage(Text.of(TextColors.RED, LanguageHandler.ERROR_NOPLAYER)); } return CommandResult.success(); } "	0	0	0	1	0	0
protected BaseMatchResult matches(TileEntity tileEntity, ItemStack drop, int min, int max, boolean partial) { if(IInventory.class.isAssignableFrom(tileEntity.getClass())) return BaseMatchResult.False; return matches((IInventory)tileEntity, drop, min, max, partial); } 	0	0	0	1	0	0
"public static ParseUser login(String username, String password) throws ParseException {  currentUser = null; ParseGetCommand command = new ParseGetCommand(""login""); command.addJson(false); command.put(""username"", username); command.put(""password"", password); ParseResponse response = command.perform(); if(!response.isFailed()) { JSONObject jsonResponse = response.getJsonObject(); if (jsonResponse == null) { LOGGER.error(""Empty response.""); throw response.getException(); } try { ParseUser parseUser = new ParseUser(); parseUser.setObjectId(jsonResponse.getString(ParseConstants.FIELD_OBJECT_ID)); parseUser.setSessionToken(jsonResponse.getString(ParseConstants.FIELD_SESSION_TOKEN)); currentUser = parseUser; String createdAt = jsonResponse.getString(ParseConstants.FIELD_CREATED_AT); String updatedAt = jsonResponse.getString(ParseConstants.FIELD_UPDATED_AT); parseUser.setCreatedAt(Parse.parseDate(createdAt)); parseUser.setUpdatedAt(Parse.parseDate(updatedAt)); jsonResponse.remove(ParseConstants.FIELD_OBJECT_ID); jsonResponse.remove(ParseConstants.FIELD_CREATED_AT); jsonResponse.remove(ParseConstants.FIELD_UPDATED_AT); jsonResponse.remove(ParseConstants.FIELD_SESSION_TOKEN); parseUser.setData(jsonResponse, true); return parseUser;  }catch (JSONException e) { LOGGER.error(""Although Parse reports object successfully saved, the response was invalid.""); throw new ParseException( ParseException.INVALID_JSON, ""Although Parse reports object successfully saved, the response was invalid."", e); } } else { LOGGER.error(""Request failed.""); throw response.getException(); }  } "	1	0	1	1	0	0
@Override public HtmlUnitDriver initialize() { return new HtmlUnitDriver(); } 	1	0	1	0	0	0
"private Set<String> getNewSelections(final Request request) {  String[] paramValue = request.getParameterValues(getId() + "".selected""); if (paramValue == null) { paramValue = new String[0]; }  String[] selectedRowIds = removeEmptyStrings(paramValue); Set<String> newSelectionIds = new HashSet<>();  boolean singleSelect = getSelectMode() == SelectMode.SINGLE;  if (selectedRowIds != null) { int offset = getItemIdPrefix().length(); for (String selectedRowId : selectedRowIds) { String itemId = selectedRowId.substring(offset); if (isValidTreeItem(itemId)) { newSelectionIds.add(itemId); if (singleSelect) { break; } } } }  return newSelectionIds; } "	1	0	1	1	0	0
"@Test public void testGetDownloadFields2() throws IOException { HashMap<String, String> fields = new HashMap<>(); fields.put(""c1"", ""String"");  String schemaString = GoogleAdWordsExtractor.createSchema(fields, null).toString();  Assert .assertEquals(schemaString, ""[{\""columnName\"":\""c1\"",\""isNullable\"":true,\""dataType\"":{\""type\"":\""STRING\""}}]""); } "	1	0	1	1	0	0
"public CopyResourceResult doCopyResource(Integer targetResourceId, Integer originResourceId, ForeignableOwner actingOwner) throws ForeignableOwnerViolationException, AMWException { // Load resources ResourceEntity targetResource = commonDomainService.getResourceEntityById(targetResourceId); ResourceEntity originResource = commonDomainService.getResourceEntityById(originResourceId);  if(!permissionBoundary.canCopyFromSpecificResource(originResource, originResource.getResourceGroup())){ throw new NotAuthorizedException(""Permission Denied""); }  return copyResourceDomainService.copyFromOriginToTargetResource(originResource, targetResource, actingOwner); } "	1	0	1	1	0	0
"public void preInit(FMLPreInitializationEvent event) { BaseMods.addBaseMod(this);  this.libProxy = ClassLoading.createProxy(""com.teamacronymcoders.base.proxies.LibClientProxy"", ""com.teamacronymcoders.base.proxies.LibServerProxy""); this.getLibProxy().setMod(this); this.modelLoader = new SafeModelLoader(this);  List<IRegistryPiece> registryPieces = this.getRegistryPieces(event.getAsmData());  this.addRegistry(""BLOCK"", new BlockRegistry(this, registryPieces)); this.addRegistry(""ITEM"", new ItemRegistry(this, registryPieces)); this.addRegistry(""ENTITY"", new EntityRegistry(this, registryPieces)); if (this.hasConfig()) { this.addRegistry(""CONFIG"", new ConfigRegistry(this, event.getModConfigurationDirectory(), this.useModAsConfigFolder())); SaveLoader.setConfigFolder(this.getRegistry(ConfigRegistry.class, ""CONFIG"").getTacFolder()); } if (materialSystem == null) { this.materialSystem.setup(event.getAsmData()); } if (this.addOBJDomain()) { this.getLibProxy().addOBJDomain(); }  this.guiHandler = new GuiHandler(this);  this.beforeModuleHandlerInit(event);  this.moduleHandler = new ModuleHandler(this, event.getAsmData()); this.getModuleHandler().setupModules(); this.getModuleHandler().preInit(event);  this.afterModuleHandlerInit(event);  if (this.getSubBlockSystem() != null) { this.getSubBlockSystem().createBlocks(); }  this.getAllRegistries().forEach((name, registry) -> registry.preInit()); } "	1	0	1	0	0	0
"@RequestMapping(value = ""/configPagses"", method = RequestMethod.GET) @ResponseBody public PageModel<Config> pageModel(int pageIndex, int pageSize) { PageInfo<Config> pageInfo = configService.queryByPage(pageIndex + 1, pageSize); PageModel<Config> pageModel = new PageModel<Config>(); pageModel.setList(pageInfo.getList()); pageModel.setPageIndex(pageInfo.getPageNum()); pageModel.setTotal((int) pageInfo.getTotal()); pageModel.setPageSize(pageInfo.getPageSize()); return pageModel; } "	1	0	1	1	0	0
public void visit(SwitchEntryStmt n, VisitorContext ctx) { Object o = ctx.get(NODE_TO_COMPARE_KEY); if (o != null && o instanceof SwitchEntryStmt) { SwitchEntryStmt aux = (SwitchEntryStmt) o;  boolean backup = isUpdated(); setIsUpdated(false); inferASTChanges(n.getLabel(), aux.getLabel()); Position pos = position.pop(); if (n.getLabel() != null) { position.push(new Position(n.getLabel().getEndLine(), n.getLabel().getEndColumn())); } else { List<Statement> stmts = n.getStmts(); if(!stmts.isEmpty()){ Statement first = stmts.get(0); position.push(new Position(first.getBeginLine(), first.getBeginColumn())); } else{ position.push(pos); } }  inferASTChanges(n.getStmts(), aux.getStmts()); position.pop(); position.push(pos); if (!isUpdated()) { increaseUnmodifiedNodes(SwitchEntryStmt.class); } else { increaseUpdatedNodes(SwitchEntryStmt.class); } setIsUpdated(backup || isUpdated());  } else if (o != null) { setIsUpdated(true); applyUpdate(n, (Node) o); } } 	1	1	1	0	1	0
"@Override public List<XYModel> getChartData(XYChartData chartData, List<TitleColumn> titleColumns) throws HpccConnectionException, NumberFormatException, XPathExpressionException { List<XYModel> dataList = null;  try { if(chartData.isGenericQuery()){ return getGenericQueryData(chartData,titleColumns); }else{ StringBuilder urlBuilder = new StringBuilder(); if (chartData.getHpccConnection().getIsSSL()) { urlBuilder.append(Constants.HTTPS); } else { urlBuilder.append(Constants.HTTP); } urlBuilder.append(chartData.getHpccConnection().getHostIp()) .append("":"") .append(chartData.getHpccConnection().getWsEclPort()) .append(""/WsEcl/submit/query/"") .append(chartData.getHpccConnection().getClusterType()) .append(""/"") .append(chartData.getFiles().iterator().next()) .append(""/xml?"");   //Input parameter may not have any value selected //or it has single value selected for a single input parameter if( chartData.isGrouped() && chartData.getMeasures().get(0).getAggregateFunction() != null &&!Constants.NONE.equals(chartData.getMeasures().get(0).getAggregateFunction())){ Map<String,Map<String,List<Object>>> groupedData =  getGroupedChartData(urlBuilder,chartData); return aggregateGroupedData(groupedData,chartData.getMeasures().get(0).getAggregateFunction()); }else{ dataList = getNonGenericQueryData(urlBuilder,chartData,titleColumns); LOG.debug(""dataList -->""+dataList); return doAggregation(dataList, chartData); } }   } catch (NumberFormatException e) { throw e; } catch (SAXException | IOException | ParserConfigurationException e) { LOG.error(Constants.EXCEPTION, e); if (e.getMessage().contains(""Unauthorized"")) { throw new HpccConnectionException(""401 Unauthorized""); } else { throw new HpccConnectionException(e.getMessage()); } }   } "	1	0	1	0	0	0
@Override public int getLightValue(IBlockAccess world, int x, int y, int z) { TileEntity te = world.getTileEntity(x, y, z);  if (((CupolaTE) te).isSlave()) { te = world.getTileEntity(x, y - 1, z); }  if (((CupolaTE) te).isActive()) return 15;  return super.getLightValue(world, x, y, z); } 	0	0	0	1	0	0
private Mission generateMission(boolean isDeepCopy) { final Mission mission = new Mission();  if (!missionItemProxies.isEmpty()) { for (MissionItemProxy itemProxy : missionItemProxies) { MissionItem sourceItem = itemProxy.getMissionItem(); MissionItem destItem = isDeepCopy ? sourceItem.clone() : sourceItem; mission.addMissionItem(destItem); } }  return mission; } 	1	0	1	0	0	0
"public void sendMissionToAPM(Drone drone) { drone.setMission(generateMission(), true);  final int missionItemsCount = missionItemProxies.size();  String missionItemsList = ""[""; if (missionItemsCount > 0) { boolean isFirst = true; for (MissionItemProxy itemProxy : missionItemProxies) { if (isFirst) isFirst = false; else missionItemsList += "", "";  missionItemsList += itemProxy.getMissionItem().getType().getLabel(); } }  missionItemsList += ""]"";  HitBuilders.EventBuilder eventBuilder = new HitBuilders.EventBuilder() .setCategory(GAUtils.Category.MISSION_PLANNING) .setAction(""Mission sent to drone"") .setLabel(""Mission items: "" + missionItemsList); GAUtils.sendEvent(eventBuilder);  //Send an event for the created mission eventBuilder = new HitBuilders.EventBuilder() .setCategory(GAUtils.Category.MISSION_PLANNING) .setAction(""Mission sent to drone"") .setLabel(""Mission items count"") .setValue(missionItemsCount); GAUtils.sendEvent(eventBuilder); } "	1	0	1	0	0	0
private void createCheckpointBoxes() { List<Checkpoint> checkpoints = currentState.getLevelPointForTeam().getCheckpoints(); int checkpointsCount = checkpoints.size(); int colCount = checkpointsCount / 2; if (checkpointsCount % 2 != 0) colCount += 1;  int rowCount = 5; List<TableRow> rows = new ArrayList<TableRow>(); for (int i = 0; i < rowCount; i++) { TableRow tableRow = new TableRow(inputDataActivity); rows.add(tableRow); checkpointsPanel.addView(tableRow); }  buildCheckpointsRow(rows, 0, checkpoints, colCount); buildSeparatorRow(rows.get(2)); buildCheckpointsRow(rows, 1, checkpoints, colCount); } 	1	0	1	0	0	0
public int getSBits() { return Native.fpaGetEbits(getContext().nCtx(), getNativeObject()); } 	0	0	0	1	0	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); trianglifyView = (TrianglifyView) findViewById(R.id.trianglify_main_view); varianceSeekBar = (SeekBar) findViewById(R.id.variance_seekbar); varianceSeekBar.setMax(100); varianceSeekBar.setProgress(trianglifyView.getVariance()); varianceSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() { @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) { trianglifyView.setVariance(progress+1); trianglifyView.generateAndInvalidate(); }  @Override public void onStartTrackingTouch(SeekBar seekBar) {  }  @Override public void onStopTrackingTouch(SeekBar seekBar) {  } }); cellSizeSeekBar = (SeekBar) findViewById(R.id.cell_size_seekbar); int maxCellSize = 150;  cellSizeSeekBar.setMax(maxCellSize); cellSizeSeekBar.setProgress(trianglifyView.getCellSize()); cellSizeSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() { @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) { trianglifyView.setCellSize(progress+100); trianglifyView.generateAndInvalidate(); }  @Override public void onStartTrackingTouch(SeekBar seekBar) {  }  @Override public void onStopTrackingTouch(SeekBar seekBar) {  } });  paletteSeekBar = (SeekBar) findViewById(R.id.palette_seekbar); paletteSeekBar.setMax(Palette.DEFAULT_PALETTE_COUNT - 1); paletteSeekBar.setProgress(Palette.indexOf(trianglifyView.getPalette())); paletteSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() { @Override public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) { trianglifyView.setPalette(Palette.getPalette(progress)); trianglifyView.invalidate(); }  @Override public void onStartTrackingTouch(SeekBar seekBar) {  }  @Override public void onStopTrackingTouch(SeekBar seekBar) {  } });  strokeCheckBox = (CheckBox) findViewById(R.id.draw_stroke_checkbox); strokeCheckBox.setChecked(trianglifyView.isDrawStrokeEnabled()); strokeCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { trianglifyView.setDrawStrokeEnabled(isChecked); trianglifyView.generateAndInvalidate(); } });  fillCheckBox = (CheckBox) findViewById(R.id.draw_fill_checkbox); fillCheckBox.setChecked(trianglifyView.isFillTriangle()); fillCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { trianglifyView.setFillTriangle(isChecked); trianglifyView.generateAndInvalidate(); } });  randomColoringCheckbox = (CheckBox) findViewById(R.id.random_coloring_checkbox); randomColoringCheckbox.setChecked(trianglifyView.isRandomColoringEnabled()); randomColoringCheckbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() { @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) { trianglifyView.setRandomColoring(isChecked); trianglifyView.generateAndInvalidate(); } }); } 	0	0	0	1	0	0
@Override public void showInterstitial(MyAdListener adListener) { if (mMyPreferenceManager.isTimeToShowVideoInsteadOfInterstitial() && Appodeal.isLoaded(Appodeal.SKIPPABLE_VIDEO)) { Appodeal.show(this, Appodeal.NON_SKIPPABLE_VIDEO); } else { mInterstitialAd.setAdListener(adListener); mInterstitialAd.show(); } } 	1	0	1	1	0	0
public static Set<String> getUtilCacheTableKeySet() { Set<String> set = new HashSet<String>(utilCacheTable.size()); set.addAll(utilCacheTable.keySet()); return set; } 	1	0	1	1	0	0
"private Map<String, Object> createLineInfo(int keyNum, K key, CacheLine<V> line) { Map<String, Object> lineInfo = new HashMap<String, Object>(); lineInfo.put(""elementKey"", key);  if (line.getLoadTimeNanos() > 0) { lineInfo.put(""expireTimeMillis"", TimeUnit.MILLISECONDS.convert(line.getExpireTimeNanos() - System.nanoTime(), TimeUnit.NANOSECONDS)); } lineInfo.put(""lineSize"", findSizeInBytes(line.getValue())); lineInfo.put(""keyNum"", keyNum); return lineInfo; } "	1	0	1	0	0	0
@Test public void whenCheckinHealthForModuleListWithNullEntries_thenIgnoreNullEntries() { List<ModuleFitness> fitnesses = new ModuleFitnessChecker(null) .checkHealth(Arrays.asList(mock(PepperModule.class), null, mock(PepperModule.class))); assertThat(fitnesses.size()).isEqualTo(2); } 	1	0	1	0	0	0
"@Nonnull private CSSExpressionMemberMathProduct _createExpressionMathProduct (@Nonnull final CSSNode aNode) { _expectNodeType (aNode, ECSSNodeType.MATHPRODUCT);  final CSSExpressionMemberMathProduct ret = new CSSExpressionMemberMathProduct (); ret.setSourceLocation (aNode.getSourceLocation ());  // read all sums for (final CSSNode aChildNode : aNode) { if (ECSSNodeType.MATHUNIT.isNode (aChildNode, m_eVersion)) { final int nChildCount = aChildNode.jjtGetNumChildren (); if (nChildCount == 0) { final CSSExpressionMemberMathUnitSimple aMember = new CSSExpressionMemberMathUnitSimple (aChildNode.getText ()); aMember.setSourceLocation (aChildNode.getSourceLocation ()); ret.addMember (aMember); } else if (nChildCount == 1 && ECSSNodeType.FUNCTION.isNode (aChildNode.jjtGetChild (0), m_eVersion)) { // Source location is taken from aNestedProduct ret.addMember (_createExpressionFunction (aChildNode.jjtGetChild (0))); } else { if ((nChildCount % 2) != 1) _throwUnexpectedChildrenCount (aChildNode, ""CSS math unit expected odd child count and got "" + nChildCount);  final CSSExpressionMemberMathProduct aNestedProduct = new CSSExpressionMemberMathProduct (); for (int i = 0; i < nChildCount; ++i) { final CSSNode aChildChildNode = aChildNode.jjtGetChild (i); if (ECSSNodeType.MATHPRODUCT.isNode (aChildChildNode, m_eVersion)) { // Source location is taken from aNestedProduct aNestedProduct.addMember (_createExpressionMathProduct (aChildChildNode)); } else if (ECSSNodeType.MATHSUMOPERATOR.isNode (aChildChildNode, m_eVersion)) { final String sText = aChildChildNode.getText (); final ECSSMathOperator eMathOp = ECSSMathOperator.getFromNameOrNull (sText); if (eMathOp == null) s_aLogger.error (""Failed to parse math operator '"" + sText + ""'""); else aNestedProduct.addMember (eMathOp); } else s_aLogger.error (""Unsupported child of "" + ECSSNodeType.getNodeName (aChildNode, m_eVersion) + "": "" + ECSSNodeType.getNodeName (aChildChildNode, m_eVersion)); } ret.addMember (new CSSExpressionMemberMathUnitProduct (aNestedProduct)); } } else if (ECSSNodeType.MATHPRODUCTOPERATOR.isNode (aChildNode, m_eVersion)) { final String sText = aChildNode.getText (); final ECSSMathOperator eMathOp = ECSSMathOperator.getFromNameOrNull (sText); if (eMathOp == null) s_aLogger.error (""Failed to parse math product operator '"" + sText + ""'""); else ret.addMember (eMathOp); } else s_aLogger.error (""Unsupported child of "" + ECSSNodeType.getNodeName (aNode, m_eVersion) + "": "" + ECSSNodeType.getNodeName (aChildNode, m_eVersion)); }  return ret; } "	1	0	1	1	0	0
"@Override public <O extends Output> void canceledBuilderRequiredBuilderFailed(BuildRequest<?, O, ?, ?> req, BuildUnit<O> unit, RequiredBuilderFailed e) { log.error(""Builder failed"", e.getCause()); } "	0	0	0	1	0	0
public void interact(Npcs.Option option) { Menu.interact(this, option.getActionId()); } 	1	0	1	0	0	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_synchro_video);  context = this;  //main surfaceview SurfaceView main_surface = (SurfaceView) findViewById(R.id.main_surface); mRecorder = new VideoRecorder(this, movie_time, sava_dir, main_surface, getResources());  //sub surfaceview mOverLaySurfaceView = (SurfaceView) findViewById(R.id.sub_surface); mOverLayHolder = mOverLaySurfaceView.getHolder(); mOverLayHolder.setFormat(PixelFormat.TRANSLUCENT);//ここで半透明にする mPreviewCallback = new PreviewSurfaceViewCallback(context); mOverLayHolder.addCallback(mPreviewCallback); mOverLaySurfaceView.setVisibility(SurfaceView.INVISIBLE);  try { File dir_save = new File(sava_dir); dir_save.mkdir(); } catch (Exception e) { Toast.makeText(context, ""e:"" + e, Toast.LENGTH_SHORT).show(); }  //Start button btn_start = (Button)findViewById(R.id.btn_start); btn_start.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { if (mRecorder != null) { is_playing = true; btn_start.setVisibility(View.INVISIBLE); btn_stop.setVisibility(View.VISIBLE); mRecorder.start(); } } });  //Recording stop btn_stop = (Button)findViewById(R.id.btn_stop); btn_stop.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { is_playing = false; btn_start.setVisibility(View.VISIBLE); btn_stop.setVisibility(View.INVISIBLE); mRecorder.stop(); } });    Team mTeam1 = new Team(context, (ListView) findViewById(R.id.our_team_list), our_member_num); Team mTeam2 = new Team(context, (ListView) findViewById(R.id.opposing_team_list), opp_member_num); mEventLogger = new EventLogger(context,(ListView) findViewById(R.id.event_log));  findViewById(R.id.shoot_success_2p).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { recordEvent(2,1,""shoot"");//1:point,2:is success?,3:event name if(is_scoresheetview) setScoresheet(); } }); findViewById(R.id.shoot_success_3p).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { recordEvent(3,1,""shoot"");//1:point,2:is success?,3:event name if(is_scoresheetview) setScoresheet(); } }); findViewById(R.id.shoot_failed_2p).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { recordEvent(2,0,""shoot"");//1:point,2:is success?,3:event name } }); findViewById(R.id.shoot_failed_3p).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { recordEvent(3,0,""shoot"");//1:point,2:is success?,3:event name } }); findViewById(R.id.foul).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { recordEvent(0,1,""foul""); } });  is_scoresheetview = false; findViewById(R.id.chenge_scoresheet_and_eventlog).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { LinearLayout menu = (LinearLayout) findViewById(R.id.menu); if(!is_scoresheetview) { LinearLayout eventlog = (LinearLayout) findViewById(R.id.menu_log); menu.removeView(eventlog); getLayoutInflater().inflate(R.layout.score_sheet, menu);  setScoresheet(); is_scoresheetview = true; }else{ LinearLayout scoresheet = (LinearLayout) findViewById(R.id.scoresheet); menu.removeView(scoresheet); getLayoutInflater().inflate(R.layout.event_log, menu); mEventLogger = new EventLogger(context,(ListView) findViewById(R.id.event_log)); is_scoresheetview = false; } } }); } "	1	1	1	0	1	0
@Override public IBlockState getStateFromMeta(int meta) {  if (meta >= 0 || meta < EnumType.values().length) { return this.getDefaultState().withProperty(VARIANT, EnumType.values()[meta]); } return getDefaultState(); } 	1	0	1	1	0	0
protected void updateServer(boolean limit) { if (optOut || offline) { return; }  if (!uploadingCurrently.getAndSet(true)) { DatabaseHelper dbHelper = DatabaseHelper.getDatabaseHelper(context); try { int batchLimit = limit ? (backoffUpload ? backoffUploadBatchSize : eventUploadMaxBatchSize) : -1;  List<JSONObject> events = dbHelper.getEvents(getLastEventId(), batchLimit).second; List<JSONObject> identifys = dbHelper.getIdentifys(getLastIdentifyId(), batchLimit).second; int numEvents = Math.min(batchLimit, events.size() + identifys.size());  final Pair<Pair<Long, Long>, JSONArray> merged = mergeEventsAndIdentifys( events, identifys, numEvents); final long maxEventId = merged.first.first; final long maxIdentifyId = merged.first.first; final String mergedEvents = merged.second.toString();  httpThread.post(new Runnable() { @Override public void run() { makeEventUploadPostRequest(new OkHttpClient(), mergedEvents, maxEventId, maxIdentifyId); } }); } catch (JSONException e) { uploadingCurrently.set(false); Log.e(TAG, e.toString()); } } } 	1	0	1	1	0	0
public void clearCache () {  mSrcTime.clear ();    mSrcTimeFieldState.setState  (MamdaFieldState.NOT_INITIALISED); mActTime.clear ();    mActTimeFieldState.setState  (MamdaFieldState.NOT_INITIALISED); mSendTime.clear();    mSendTimeFieldState.setState (MamdaFieldState.NOT_INITIALISED); mLineTime.clear();    mLineTimeFieldState.setState (MamdaFieldState.NOT_INITIALISED);  mIssueSymbol.setValue (null);  mIssueSymbolFieldState.setState (MamdaFieldState.NOT_INITIALISED); mPartId.setValue      (null);  mPartIdFieldState.setState      (MamdaFieldState.NOT_INITIALISED); mSymbol.setValue      (null);  mSymbolFieldState.setState      (MamdaFieldState.NOT_INITIALISED);  mUncrossPrice.clear     (); mUncrossVolume.setValue (0); mUncrossPriceInd.set    (MamdaUncrossPriceInd.UNCROSS_NONE);  mUncrossPriceFieldState.setState    (MamdaFieldState.NOT_INITIALISED); mUncrossVolumeFieldState.setState   (MamdaFieldState.NOT_INITIALISED); mUncrossPriceIndFieldState.setState (MamdaFieldState.NOT_INITIALISED); } 	1	1	1	0	1	0
"private String getTagsFromArticle(Article article) { String tagsString = """"; if (!(article.getName() == null)| !(article.getName().equals(""""))) { String[] tempTags = article.getName().split(""[ ]+""); for (String currentTag : tempTags) { tagsString += currentTag + "", ""; } tagsString = tagsString.substring(0,tagsString.length()-1); } else { throw new IllegalArgumentException(""Name tag is empty""); } return tagsString; } "	1	0	1	1	0	0
"public static UpdateInfo isUpdateAvailable(URL repoBaseURL, String mavenGroupID, String mavenArtifactID, String mavenClassifier) { String savedSetting = updatePrefs.getPreference(latestSeenVersionPrefKey, """"); UpdateInfo res = null; try { System.out.println(""Checking for updates...""); res = getLatestUpdateInfo(repoBaseURL, mavenGroupID, mavenArtifactID, mavenClassifier);  Version currentVersion = new Version(Common.getAppVersion()); Version savedVersion = null; try { savedVersion = new Version(savedSetting); } catch (IllegalArgumentException e) { // No update was ever ignored by the user so use the current // version as the savedVersion savedVersion = currentVersion; }  if (res.toVersion.compareTo(savedVersion) == 1 || savedSetting.equals("""")) { // new update found System.out.println(""Update available!""); System.out.println(""Version after update: "" + res.toVersion.toString()); System.out.println(""Filesize:             "" + res.fileSizeInMB + ""MB""); res.showAlert = true; } else if (res.toVersion.compareTo(currentVersion) == 1) { // found update that is ignored System.out.println(""Update available (Update was ignored by the user)!""); System.out.println(""Version after update: "" + res.toVersion.toString()); System.out.println(""Filesize:             "" + res.fileSizeInMB + ""MB""); } else { System.out.println(""No update found.""); } } catch (JDOMException | IOException e) { // TODO Auto-generated catch block e.printStackTrace(); }  return res; } "	1	0	1	1	0	0
private static <T extends Selectable> Matches<T> findMatches(Collection<T> collection, boolean complete, String... tokens) { List<T> listOfMatches = new ArrayList<T>(); // Do not start with 0, as this would gather all Articles if the query did not match any Article. double maximumSimilarity = 1e-6; for (T candidate : collection) { String[] titleWords = split(candidate.getName().getSingular()); int matches = countMatches(tokens, titleWords); if (!complete || matches == tokens.length) { double matchesOverTitleWords = matches / (double) titleWords.length; double matchesOverSearchArgs = matches / (double) tokens.length; double similarity = DungeonMath.mean(matchesOverTitleWords, matchesOverSearchArgs); int comparisonResult = DungeonMath.fuzzyCompare(similarity, maximumSimilarity); if (comparisonResult > 0) { maximumSimilarity = similarity; listOfMatches.clear(); listOfMatches.add(candidate); } else if (comparisonResult == 0) { listOfMatches.add(candidate); } } } return Matches.fromCollection(listOfMatches); } 	1	0	1	1	0	0
@Override protected void writeImpl(AionConnection con) { writeH(skillId); if (skillId >= 30001 && skillId <= 30003 || skillId >= 40001 && skillId <= 40010) { writeC(0); writeC(0); } else if (isStigma) { writeC(1); writeC(1); } else if (isLinked) { writeC(1); writeC(3); } else { // remove skills active or passive writeC(skillLevel); } } 	1	1	1	0	1	0
"private String getModifiedFieldName(String fieldName) { return fieldName.replace(SCHEMA_NAMESPACE_NAME_SEPARATOR, ""_""); } "	0	0	0	1	0	0
"private void log(String message) { System.out.println(""EntryController : "" + message); } "	0	0	0	1	0	0
@Override public boolean isAvailable(final IContext context) { final ICustomContext customCtx = (ICustomContext)context; final PictogramElement[] pes = customCtx.getPictogramElements(); if(customCtx.getPictogramElements().length < 1 || !(customCtx.getPictogramElements()[0] instanceof Connection)) { return false; }  // Check that the shape represents a subcomponent and that the subcomponent is not owned by the classifier represented by the shape's container final Connection connection = (Connection)pes[0]; final Object bo = bor.getBusinessObjectForPictogramElement(connection); final ComponentImplementation ci = getComponentImplementation(connection); return bo instanceof org.osate.aadl2.Connection && ci != null && ((org.osate.aadl2.Connection)bo).getContainingClassifier() != ci; } 	0	0	0	1	0	0
"private static void importPreferences(final String file) { final Path importFile = getPreferenceFile(file);  if (Files.isReadable(Paths.get(file))) { Logger.getLogger(PortablePreferences.class.getName()).info(""Importing preferences"");  try (final InputStream is = Files.newInputStream(importFile)) { Preferences.importPreferences(is); } catch (final InvalidPreferencesFormatException | IOException e) { System.err.println(""Preferences file "" + importFile.toString() + "" could not be read""); Logger.getLogger(PortablePreferences.class.getName()).log(Level.SEVERE, e.toString(), e); } } else { System.err.println(""Preferences file "" + importFile.toString() + "" was not found""); } } "	1	0	1	0	0	0
"private void printColumnIdentifiers(final int edgeLength) { StringBuilder headlineBuilder = new StringBuilder(offset(edgeLength)); for (int i = 1; i <= edgeLength; i++) { if(i < 10){ headlineBuilder.append("" "").append(i).append("" ""); } else { headlineBuilder.append(i).append("" ""); } } logger.info(headlineBuilder.toString()); } "	0	0	0	1	0	0
"void method(Throwable t) { logger.info(""My message is {}"", t.getMessage(), t); logger.info(""My {} is {}"", ""message"", t.getMessage(), t); logger.info(""My {} {} {}"", new Object[]{ ""message"", ""is"", t.getMessage(), t }); } "	0	0	0	1	0	0
"private void checkInit() { Preconditions.checkState(!initialised, ""unable to modify already initialised instance""); } "	0	0	0	1	0	0
@Override public GreenMailUser setUser(String email, String login, String password) { GreenMailUser user = managers.getUserManager().getUser(email); if (null == user) { try { user = managers.getUserManager().createUser(email, login, password); } catch (UserException e) { throw new RuntimeException(e); } } else { user.setPassword(password); } return user; } 	1	0	1	0	0	0
"public static String generateCreateDDL(Class<?> tableClass) { Table t = tableClass.getAnnotation(Table.class); if (t == null) { throw new ORMException(""No mapping to "" + tableClass + "", did you forget add @Table to your class?""); } StringBuilder sb = new StringBuilder(); sb.append(""CREATE TABLE ""); sb.append(t.name()); sb.append("" IF NOT EXISTS (""); sb.append(LF); List<ColumnWrap> list = Mapping.getInstance().getColumns(tableClass); for (ColumnWrap cw : list) { sb.append(new ColumnMeta(cw.getColumn()).toSQL()).toString(); sb.append("", ""); sb.append(LF); } int len = sb.length() - 2; len = len - LF.length(); sb.delete(len, sb.length()); sb.append("")""); sb.append(LF); return (sb.toString()); } "	1	1	1	0	1	0
public void addChat(String chatId) { if (chats == null) { chats = new ArrayList<>(); }  chats.add(chatId);  FirebaseProviderUtils.insertOrUpdateModel(this, null); } 	1	0	1	0	0	0
public void updateValueData(JsonArray valueArray) { Value val = ValueUtils.toValue(valueArray.get(0), (String) valueArray.get(1));  if (val.getType().getRawName().equals(node.getValueType().getRawName())) { node.setValueType(val.getType()); }  node.setValue(val); } 	1	0	1	1	0	0
"public static boolean writeToFile(String fileName, String exportString, Context context) { //write built string to txt file try { File root = new File(Environment.getExternalStorageDirectory() + File.separator + ""Votenote"" + File.separator); root.mkdirs(); if (root.exists()) { File writeoutFile = new File(root, fileName + "".csv""); FileWriter writer = new FileWriter(writeoutFile); Log.i(""exporter"", writer.getEncoding()); writer.append(exportString.toString()); writer.flush(); writer.close(); Toast.makeText(context, ""Datei unter "" + writeoutFile.getAbsolutePath() + "" gespeichert."", Toast.LENGTH_LONG).show(); } else { Toast.makeText(context, ""Ordner konnte nicht erstellt werden!"", Toast.LENGTH_SHORT).show(); } } catch (IOException e) { e.printStackTrace(); String exportError = e.getMessage(); Toast.makeText(context, ""Export konnte nicht geschrieben werden!"", Toast.LENGTH_SHORT).show(); Log.w(""exporter"", ""ioexception: "" + exportError); return false; } return true; } "	1	1	1	1	1	0
@Override public Observable<Boolean> toggleFavoriteStatusForEvent ( ScheduleItemDTO scheduleItemDTO, IScheduleableItem favoriteView, IScheduleableInteractor interactor ) { Boolean isFavorite = interactor.isEventFavoriteByLoggedMember(scheduleItemDTO.getId()); return isFavorite ? removeEventFromFavorites(scheduleItemDTO, favoriteView, interactor) : addEven2Favorites(scheduleItemDTO, favoriteView, interactor); } 	0	0	0	1	0	0
"@Override protected void run(Bootstrap bootstrap, Namespace namespace, StrowgrConfiguration strowgrConfiguration) throws Exception { CloseableHttpClient httpClient = HttpClients.createDefault();  NSQHttpClient nsqHttpClient = new NSQHttpClient(""http://"" + strowgrConfiguration.getNsqProducerFactory().getHost() + "":"" + strowgrConfiguration.getNsqProducerFactory().getHttpPort(), httpClient); ConsulRepository consulRepository = strowgrConfiguration.getConsulRepositoryFactory().build();  // ports Optional<Boolean> portsInitialized = consulRepository.initPorts(); if (portsInitialized.orElse(Boolean.FALSE)) { LOGGER.info(""key/value for ports is initialized in repository""); } else { LOGGER.warn(""key/value for ports can't be initialized (already done?).""); }  // initialize haproxy producer queue for (String prefix : Arrays.asList(""commit_requested_"", ""deleted_requested_"")) { String topicName = prefix + namespace.getString(""haproxy-name""); if (nsqHttpClient.createTopic(topicName)) { LOGGER.info(""topic {} has been initialized on nsqd"", topicName); } else { LOGGER.info(""topic {} can't be initialized on nsqd"", topicName); } }  // initialize vip of an haproxy cluster if (namespace.get(""vip"") != null) { consulRepository.setHaproxyVip(namespace.get(""haproxy-name""), namespace.get(""vip"")); } } "	0	0	0	1	0	0
"private ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry configureSimpleSecurity( ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry security) { for (String rule : authorizationConfig.getRules()) { Matcher matcher = AUTHORIZATION_RULE.matcher(rule); Assert.isTrue(matcher.matches(), String.format( ""Unable to parse security rule [%s], expected format is 'HTTP_METHOD ANT_PATTERN => SECURITY_ATTRIBUTE(S)'"", rule));  HttpMethod method = HttpMethod.valueOf(matcher.group(1).trim()); String urlPattern = matcher.group(2).trim(); String attribute = matcher.group(3).trim();  logger.error("">>>>Authorization '{}' | '{}' | '{}'"", method, attribute, urlPattern); security = security.antMatchers(method, urlPattern).access(attribute); } return security; } "	0	0	0	1	0	0
public static int multiply(int c1, int c2){ return multiply(getR(c1), getG(c1), getB(c1), getR(c2), getG(c2), getB(c2)); } 	0	0	0	1	0	0
"@Override public void getUsersByNumbers(List<String> phoneNums, OnGetNumbersCallback onGetNumbersCallback) { ParseQuery<ParseUser> query = ParseUser.getQuery(); query.whereContainedIn(""phone"", phoneNums); query.findInBackground(new CallbackGetNumbers(onGetNumbersCallback)); } "	0	0	0	1	1	0
"public static String listCountriesToString(List<Country> list){ String cadena=""""; if (list != null || !list.isEmpty()){ for (Country country : list) { cadena += country.getcountryName()+"", ""; } /* quita la coma y espacio final */ cadena += "".""; cadena = cadena.replace("", ."", """"); } return cadena;  } "	1	1	1	1	1	0
"private void addJars(Path jarFileDir, String jarFileList) throws IOException { LocalFileSystem lfs = FileSystem.getLocal(conf); for (String jarFile : SPLITTER.split(jarFileList)) { Path srcJarFile = new Path(jarFile); FileStatus[] fileStatusList = lfs.globStatus(srcJarFile); for (FileStatus status : fileStatusList) { // DistributedCache requires absolute path, so we need to use makeQualified. Path destJarFile = new Path(this.fs.makeQualified(jarFileDir), status.getPath().getName()); // Copy the jar file from local file system to HDFS this.fs.copyFromLocalFile(status.getPath(), destJarFile); // Then add the jar file on HDFS to the classpath LOG.info(String.format(""Adding %s to classpath"", destJarFile)); DistributedCache.addFileToClassPath(destJarFile, this.conf, this.fs); } } } "	1	0	1	1	0	0
"@Override public HashMap<TeamDraftOrder, PlayerDataSet> getAutoPickWizards() { String sql = ""SELECT * FROM autoPickWizards"";  HashMap<TeamDraftOrder, PlayerDataSet> autoPickWizards = new HashMap<>();  ResultSet resultSet = null; try { resultSet = executeQuery(sql); while (resultSet.next()) { TeamDraftOrder teamDraftOrder = getDraftOrderByTeamId(new TeamId(resultSet.getInt(""teamID"")));  String dataSetName = resultSet.getString(""WizardTable"");  if (dataSetName != null) { Optional<PlayerDataSet> dataSet = PlayerDataSet.getDataSetWithName(dataSetName);  if (!dataSet.isPresent()) { throw new RuntimeException(""Team "" + teamDraftOrder + "" is linked to unrecognized DataSet '"" + dataSetName + ""'.""); }  autoPickWizards.put(teamDraftOrder, dataSet.get()); } }  } catch (DataSourceException | SQLException e) { logger.log(Level.SEVERE, ""Couldn't fetch team selections for which auto-pick source to use. Using default of CBSSPORTS, as backup.""); } finally { close(resultSet); }  return autoPickWizards; } "	0	0	0	1	1	0
"private List<QueueControl> getQueues(final DurabilityType durability) { try { List<QueueControl> matchingQueues = new ArrayList<>(); String[] queues = getQueueNames(); for (String queue : queues) { QueueControl coreQueueControl = (QueueControl) managementService.getResource(ResourceNames.QUEUE + queue);  // Ignore the ""special"" subscription if (coreQueueControl != null && !coreQueueControl.getName().equals(getAddress())) { if (durability == DurabilityType.ALL || durability == DurabilityType.DURABLE && coreQueueControl.isDurable() || durability == DurabilityType.NON_DURABLE && !coreQueueControl.isDurable()) { matchingQueues.add(coreQueueControl); } } } return matchingQueues; } catch (Exception e) { return Collections.emptyList(); } } "	1	0	1	0	0	0
"private PaginationViewModel createPaginationData(final int currentPage, final int displayedPages, final PagedResult<ProductProjection> searchResult) { final Http.Context context = new Http.Context(new Http.RequestBuilder() .uri(QueryStringUtils.buildUri(URL_PATH, buildQueryString(currentPage))) .build()); final Configuration configuration = new Configuration(singletonMap(""pop.pagination.displayedPages"", displayedPages)); return new TestablePaginationViewModelFactory(new ConfigurablePaginationSettings(configuration), context).create(searchResult); } "	1	1	1	0	1	0
"public static String prependWebContextRoot(String postfixUrl) { String webContext = CarbonUtils.getServerConfiguration().getFirstProperty(""WebContextRoot""); if (webContext != null && !webContext.equals(""/"")) { postfixUrl = webContext + postfixUrl; } return postfixUrl; } "	1	1	1	1	1	0
"private void reCreateDatabaseOnFirstStart() { kvr.reCreateKeyValueTable(); uer.reCreateUebungenTable(); psr.reCreatePlaylistSongsTable(); str.reCreateUebungenTable(); prep.reCreatePlanTable(); phasenRep.reCreatePhasenTable(); kvr.insertKeyValue(""firstStart"", ""false""); Log.wtf(""Database0OnFirstStart?"", ""reCreatedDatabaseOnFirstStart""); } "	0	0	0	1	1	0
"@Override public void initialize() { LOG.info(""Initializing "" + getClass().getSimpleName()); watcher.addFileListener(file -> { fileRepository.deleteByFileName(file); files.add(file); uploadQueue.add(file); }); registerInitial(); LOG.info(""Initialized "" + getClass().getSimpleName()); } "	0	1	0	0	0	0
"private void getFluffImage() { //copied from structureTab FileDialog fDialog = new FileDialog(getParentFrame(), ""Image Path"", FileDialog.LOAD); fDialog.setDirectory(new File(ImageHelper.fluffPath).getAbsolutePath() + File.separatorChar + ImageHelper.imageMech + File.separatorChar); /* //This does not seem to be working if (getMech().getFluff().getMMLImagePath().trim().length() > 0) { String fullPath = new File(getMech().getFluff().getMMLImagePath()).getAbsolutePath(); String imageName = fullPath.substring(fullPath.lastIndexOf(File.separatorChar) + 1); fullPath = fullPath.substring(0, fullPath.lastIndexOf(File.separatorChar) + 1); fDialog.setDirectory(fullPath); fDialog.setFile(imageName); } else { fDialog.setDirectory(new File(ImageHelper.fluffPath).getAbsolutePath() + File.separatorChar + ImageHelper.imageMech + File.separatorChar); fDialog.setFile(getMech().getChassis() + "" "" + getMech().getModel() + "".png""); } */ fDialog.setLocationRelativeTo(this);  fDialog.setVisible(true);  if (fDialog.getFile() != null) { String relativeFilePath = new File(fDialog.getDirectory() + fDialog.getFile()).getAbsolutePath(); relativeFilePath = ""."" + File.separatorChar + relativeFilePath.substring(new File(System.getProperty(""user.dir"").toString()).getAbsolutePath().length() + 1); getMech().getFluff().setMMLImagePath(relativeFilePath); } refresh.refreshPreview(); return; } "	0	1	0	0	0	0
public GeoNearBuilder setNear(final double latitude, final double longitude) { this.near = new double[]{latitude, longitude}; return this; } 	1	0	1	1	0	0
"public void showWeightDialog(int i) { FragmentTransaction ft = this.getFragmentManager().beginTransaction(); android.app.Fragment prev = this.getFragmentManager().findFragmentByTag(DIALOG_TAG); if (prev != null) { ft.remove(prev); } ft.addToBackStack(null);   String childName = constructChildName(); String gender = getValue(childDetails.getColumnmaps(), ""gender"", true); String motherFirstName = getValue(childDetails.getColumnmaps(), ""mother_first_name"", true); if (StringUtils.isBlank(childName) && StringUtils.isNotBlank(motherFirstName)) { childName = ""B/o "" + motherFirstName.trim(); } String zeirId = getValue(childDetails.getColumnmaps(), ""zeir_id"", false); String duration = """"; String dobString = getValue(childDetails.getColumnmaps(), ""dob"", false); if (StringUtils.isNotBlank(dobString)) { DateTime dateTime = new DateTime(getValue(childDetails.getColumnmaps(), ""dob"", false)); duration = DateUtil.getDuration(dateTime); }  Photo photo = getProfilePhotoByClient();  WeightWrapper weightWrapper = new WeightWrapper(); weightWrapper.setId(childDetails.entityId()); WeightRepository wp = getVaccinatorApplicationInstance().weightRepository(); List<Weight> weightlist = wp.findLast5(childDetails.entityId()); if (!weightlist.isEmpty()) { weightWrapper.setWeight(weightlist.get(i).getKg()); weightWrapper.setUpdatedWeightDate(new DateTime(weightlist.get(i).getDate()), false); weightWrapper.setDbKey(weightlist.get(i).getId()); }  weightWrapper.setGender(gender); weightWrapper.setPatientName(childName); weightWrapper.setPatientNumber(zeirId); weightWrapper.setPatientAge(duration); weightWrapper.setPhoto(photo); weightWrapper.setPmtctStatus(getValue(childDetails.getColumnmaps(), ""pmtct_status"", false)); weightWrapper.setDateOfBirth(dobString);  EditWeightDialogFragment editWeightDialogFragment = EditWeightDialogFragment.newInstance(this, weightWrapper); editWeightDialogFragment.show(ft, DIALOG_TAG);  } "	0	1	0	0	0	0
"@Override public void prepare(Map conf, TopologyContext context, OutputCollector collector) { try { boltService = context.getThisComponentId(); logger = LoggerFactory.getLogger(boltService);  EventSender eventSender; if (injectedEventSender != null) { eventSender = injectedEventSender; } else if (RiemannDiscovery.getInstance().isAWS()) { eventSender = RiemannEventSender.getInstance(); } else { //fallback for local mode eventSender = new LoggerEventSender(); } monitor = new Monitor(conf, boltService, eventSender); injectEventSender(delegate, monitor);  delegate.prepare(conf, context, new MonitoredOutputCollector(collector)); } catch(Throwable t) { logger.warn(""Error during bolt prepare : "", t); throw Throwables.propagate(t); } } "	0	1	0	0	0	0
"public boolean validate() { Socket socket = RankedCvCClient.connection; if(socket.isConnected()) { try(PrintWriter writer = new PrintWriter(socket.getOutputStream()); Scanner scanner = new Scanner(socket .getInputStream())) { StringBuilder builder = new StringBuilder(); for (char c: password) { builder.append(c); } writer.println(""login -"" + ign + "" -"" + builder); writer.flush(); builder = null; password = null; //so password is immediately thrown out of memory String returned = scanner.next(); if(returned.startsWith(""Login successful"")) { return this.validated = true; } } catch(IOException e) { System.out.println(""Error contacting servers, check your internet connection.""); e.printStackTrace(); } } else { System.err.println(""There's no connection to verify the login! Check your internet connection and retry!""); } return false; } "	0	1	0	0	0	0
"public static void main(String[] args) { // TODO Auto-generated method stub ManchesterUnitedStats mus1 = new ManchesterUnitedStats(""manchester united""); mus1.computeResults(); mus1.computePoints(); mus1.displayResults(); } "	0	0	0	1	1	0
"@Override public void onConnected(@Nullable Bundle bundle) {  if (ActivityCompat.checkSelfPermission(this, permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) { requestLocationPermissions(); } else { Location mLastLocation = LocationServices.FusedLocationApi.getLastLocation( mGoogleApiClient); if (mLastLocation != null) { Toast.makeText(this, ""Location data: "" + mLastLocation.getLatitude() + mLastLocation.getLongitude(), Toast.LENGTH_SHORT).show(); LatLng marker = new LatLng(mLastLocation.getLatitude(), mLastLocation.getLongitude()); mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(marker, 18)); }  LocationServices.FusedLocationApi.requestLocationUpdates( mGoogleApiClient, mLocationRequest, this); }  } "	0	1	0	0	0	0
"public double getPValue(final String method) { double p = Double.NaN;  double[] baselineValues = new double[baselineMetricPerDimension.values().size()]; int i = 0; for (Double d : baselineMetricPerDimension.values()) { baselineValues[i] = d; i++; }  double[] testValues = new double[testMetricPerDimension.values().size()]; i = 0; for (Double d : testMetricPerDimension.values()) { testValues[i] = d; i++; }  if (""t"".equals(method)) { p = TestUtils.tTest(baselineValues, testValues); } else if (""pairedT"".equals(method)) { p = TestUtils.pairedTTest(baselineValues, testValues); } else if (""wilcoxon"".equals(method)) { p = new WilcoxonSignedRankTest().wilcoxonSignedRankTest(baselineValues, testValues, true); }  return p; } "	1	1	1	1	1	0
"private void checkHttpResponse(Response response, int... validCodes) { if (response == null) throw new WebApplicationException(""No response""); if (ArrayUtils.contains(validCodes, response.getStatus())) return; String message = null; Object entity = response.getEntity(); if (entity != null) { try { if (entity instanceof HttpEntity) message = EntityUtils.toString((HttpEntity) entity); else if (entity instanceof InputStream) message = IOUtils.toString((InputStream) entity); } catch (IOException e) { message = null; } } if (message == null && response.getStatusInfo() != null) message = response.getStatusInfo().getReasonPhrase(); throw new WebApplicationException(message, response); } "	0	1	0	0	0	0
@Override public boolean isUsernameIndex(String[] args, int index) { if(index == 0 || args.length == 0) return false;  String[] subArgs = Arrays.copyOfRange(args,1,args.length); return getSubCommand(args[1]).isUsernameIndex(subArgs, index-1); } 	1	0	1	1	0	0
"@Override public List<PatientMatch> findMatches(Patient patient) { List<PatientMatch> matches = new LinkedList<PatientMatch>();  for (MatchFinder service : this.matchFinderProvider.get()) { try { List<PatientMatch> foundMatches = service.findMatches(patient); matches.addAll(foundMatches);  this.logger.debug(""Found {} matches by {}: "", matches.size(), service.getClass().getSimpleName()); for (PatientMatch match : foundMatches) { this.logger.debug(match.toCompactString()); }  } catch (Exception ex) { this.logger.error(""Failed to invoke matches finder [{}]"", service.getClass().getCanonicalName(), ex); } }  return matches; } "	0	0	0	1	1	0
"public void showImageURL (JSONArray args) throws JSONException { JSONObject json = args.getJSONObject(0); String url = getJSONProperty(json, ""url"");  String filenameArray[] = url.split(""\\.""); String extension = filenameArray[filenameArray.length-1];  InputStream inputStream = null; OutputStream outputStream = null;  File pPath= Environment.getExternalStorageDirectory();  if(!pPath.exists()) { boolean bReturn= pPath.mkdirs(); } try { File f= new File(pPath, ""output.""+extension); f.createNewFile(); inputStream = this.cordova.getActivity().getAssets().open(""www/""+url); outputStream =new FileOutputStream(f); byte buf[]=new byte[1024]; int len;  while((len=inputStream.read(buf))>0) outputStream.write(buf,0,len); outputStream.close(); inputStream.close();  Uri path = Uri.fromFile(f); Intent intent = new Intent(Intent.ACTION_VIEW); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); intent.setDataAndType(path, ""image/""+extension); this.cordova.getActivity().startActivity(intent);  } catch (IOException e) { Log.d(""FullScreenImagePlugin"", ""Could not create file: "" + e.toString());  } } "	0	1	0	0	0	0
"private static void assertMappingData(@NotNull final List<BaseDataReport> mapping) { final BaseDataReport mappedData = extractReportData(mapping, MappingCheck.MAPPING_PERCENTAGE_MAPPED); assertEquals(""99.69"", mappedData.getValue());  final BaseDataReport mateData = extractReportData(mapping, MappingCheck.MAPPING_PROPORTION_MAPPED_DIFFERENT_CHR); assertEquals(""0.0"", mateData.getValue());  final BaseDataReport properData = extractReportData(mapping, MappingCheck.MAPPING_PROPERLY_PAIRED_PROPORTION_OF_MAPPED); assertEquals(""99.57"", properData.getValue());  final BaseDataReport singletonData = extractReportData(mapping, MappingCheck.MAPPING_PROPORTION_SINGLETON); assertEquals(""55.0"", singletonData.getValue());  final BaseDataReport duplicateData = extractReportData(mapping, MappingCheck.MAPPING_MARKDUP_PROPORTION_DUPLICATES); assertEquals(""5.95"", duplicateData.getValue());  final BaseDataReport proportionRead = extractReportData(mapping, MappingCheck.MAPPING_PROPORTION_READ_VS_TOTAL_SEQUENCES); assertEquals(""89.8"", proportionRead.getValue()); } "	0	1	0	0	0	0
"@Override public void addTooltip(List list) { list.add(DARK_GREEN + format(spawnNumberMin, spawnNumberMax)); list.addAll(Arrays.asList(WordUtils.wrap((String)field.getField(), 28).split(""\r\n""))); ItemStack stack = getIcon(); if (stack != null) { list.add(""---""); list.add(entity.getName()); } } "	0	1	0	0	0	0
"@RequestMapping(value = ""/bootstrap"") public ModelAndView bootstrap(HttpServletRequest request, HttpServletResponse response) throws IOException { if (WebloggerContext.isBootstrapped()) { response.sendRedirect(request.getContextPath()+""/""); return null; }  Map<String, Object> map = initializeMap();  try { // trigger bootstrapping process ServletContext sc = WebloggerContext.getServletContext(); ApplicationContext ac = WebApplicationContextUtils.getRequiredWebApplicationContext(sc);  WebloggerContext.bootstrap(ac); log.info(""EXITING - Bootstrap successful, forwarding to weblogger""); response.sendRedirect(request.getContextPath()+""/tb-ui/app/register""); return null; } catch (Exception e) { log.error(""Exception"", e); map.put(""rootCauseException"", e); map.put(""rootCauseStackTrace"", getRootCauseStackTrace(e)); }  map.put(""status"", StartupStatus.bootstrapError); return new ModelAndView("".install"", map); } "	1	0	1	0	0	0
public static AMQMessage getAMQMessageFromAndesMetaData(AndesMessageMetadata metadata) { long messageId = metadata.getMessageID(); StorableMessageMetaData metaData = convertAndesMetadataToAMQMetadata(metadata); //create message with meta data. This has access to message content StoredAMQPMessage message = new StoredAMQPMessage(messageId, metaData); AMQMessage amqMessage = new AMQMessage(message); return amqMessage; } 	1	0	1	1	0	0
"private static String getVersionName(Context inContext) { try { String versionName = inContext.getPackageManager() .getPackageInfo(inContext.getPackageName(), 0).versionName;  // Strip version name suffix if (versionName.contains(""-"")) { versionName = versionName.substring(0, versionName.indexOf(""-"")); }  return versionName; } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); }  return """"; } "	1	1	1	1	1	0
"@Test public void testDeviceRegistration() throws IOException { MockServer server = new MockServer() .enqueueAcceptKey() .start(); MockDeviceStore store = new MockDeviceStore();  TokenRepository tokenRepository = new TokenRepository(new MockConfig(server.getUrl(""/demo-auth/v1"")), store);  String token = tokenRepository.getDeviceToken(); assertEquals(token.length(), 32);  server.shutdown(); } "	1	0	1	0	0	0
@Override public boolean onContextItemSelected(MenuItem item) { switch (item.getItemId()) { case R.id.wallet_options_safety: HelpDialogFragment.page(getFragmentManager(), R.string.help_safety); return true;  case R.id.wallet_options_backup_wallet: handleBackupWallet(); return true;  case R.id.wallet_options_restore_wallet: showDialog(DIALOG_RESTORE_WALLET); return true;  case R.id.wallet_options_encrypt_keys: handleEncryptKeys(); return true; }  return super.onContextItemSelected(item); } 	0	0	0	1	1	0
"private static String parseCommand(ProtoTask pt, COMMAND_TYPE commandType) throws Error { switch (commandType) { case ADD : return add(pt); case COMPLETE : return complete(pt.getId()); case DISPLAY : return display(); case DISPLAYDONE : return displayDone(); case DELETE : return delete(pt.getId()); case EDIT : return edit(pt.getId(), pt); default: //throw an error if the command is not recognized throw new Error(""Unrecognized command type""); } } "	1	0	1	0	0	0
"public static Tag[] getTagList(String tags) {  if (tags.equals("""")) { return new Tag[]{}; }  final String[] split = tags.split("", "");  final List<Tag> collect = Arrays.asList(split).stream().map(e -> { try { return new Tag(e.replaceFirst(""Tag: "", """")); } catch (IllegalValueException e1) { //not possible assert false; return null; } }).collect(Collectors.toList());  return collect.toArray(new Tag[split.length]); } "	1	0	1	1	0	0
@Override public File load(String key, @Nullable Object argument) { ModuleResourceCache.CacheId id = ModuleResourceCache.parseCacheKey(key); Module module = id.getModule(); String filename = id.getName(); Path path = new Path(WORKFLOW_MODEL_DIR, filename); Resource resource  = module.getModuleResolver().lookup(path);  return new File(resource.getPath().toString()); } 	0	1	0	0	0	0
@Nullable public User getAssignee() { if (_engineTask.getAssignee() == null) return null; else return UserManager.getUser(Integer.valueOf(_engineTask.getAssignee())); } 	1	0	1	1	0	0
"@Override public void onDataChange(DataSnapshot dataSnapshot) { // Gets the data from Firebase and stores it in a FBUser class user = dataSnapshot.getValue(FBUser.class);  // Checking if user has Squads if(user.getSquads() != null) { hasSquad = true; } else { hasSquad = false; }  // Checking if user has Meetups if(user.getMeetups() != null) { hasMeetup = true; } else { hasMeetup = false; }  // Checking if user has Squads if(user.getHosting() != null) { hasHost = true; } else { hasHost = false; }   // Displays the user's name in the editText profileName.setText(user.getName());  // If user has created a bio if(user.getBio().trim() != null) { // Displays the user's bio in the editText bio.setText(user.getBio().trim()); } else { // Default bio bio.setText(""This user has no bio!""); }  // Displays the photo in the ImageView Glide.with(ProfileActivity.this) .load(user.getPicture().trim()) .diskCacheStrategy(DiskCacheStrategy.NONE) .skipMemoryCache(true) .listener(new RequestListener<String, GlideDrawable>() { @Override public boolean onException(Exception e, String model, Target<GlideDrawable> target, boolean isFirstResource) { return false; }  @Override public boolean onResourceReady(GlideDrawable resource, String model, Target<GlideDrawable> target, boolean isFromMemoryCache, boolean isFirstResource) { // If profileName != default and profileImage isnt null if ((!profileName.getText().equals(""'Users Profile"")) && (profileImage != null)) { // Hiding loading overlay loadingOverlay.setVisibility(View.GONE); } return false; } }) .dontAnimate() .fitCenter() .error(R.drawable.com_facebook_profile_picture_blank_portrait) .into(profileImage); } "	1	0	1	0	0	0
@Override public AudioSource get() throws Exception { AudioBuffer buffer = new AudioBuffer(data, frequency, format);  cache(buffer); this.data.clear();  return new AudioSource(buffer, null, null, null); } 	1	0	1	0	0	0
"public static Integer[][] constructSamples(Color[] colors, int width, int additional){  if (colors.length > width){ throw new IndexOutOfBoundsException(""The width of the gradient is invalid""); }  float[] dist = new float[colors.length + additional]; float distAmount = 1f / colors.length, totalDist = 0;  for (int i = 0; i < colors.length; i++){  dist[i] = totalDist; totalDist += distAmount;  }  dist[colors.length - 1] = 1.0f;  return constructGradient(colors, dist, width);  } "	1	0	1	1	0	0
public void stopDeliveryForQueue(String storageQueue) { MessageFlusher.getInstance().clearUpAllBufferedMessagesForDelivery (storageQueueNameToDestinationMap.get(storageQueue)); Set<Slot> orphanedSlots = subscriptionSlotTracker.remove(storageQueue); if(!orphanedSlots.isEmpty()) { for (Slot slot:orphanedSlots) { clearAllTrackingWhenSlotOrphaned(slot); } } } 	1	1	1	0	1	0
@Test public void test001() throws Exception { FastGraph target = FastGraph.jsonStringGraphFactory(TestRunner.get5Node7EdgeA(), false); FastGraph pattern = FastGraph.jsonStringGraphFactory(TestRunner.get4Node5Edge(), false);  nc = new AlwaysTrueNodeComparator(target, pattern); ec = new AlwaysTrueEdgeComparator(target, pattern);  ApproximateSubgraphIsomorphism isi = new ApproximateSubgraphIsomorphism(target, pattern, 4, 1, nc, ec); int count = isi.subgraphIsomorphismFinder(); assertEquals(count,2); } 	0	1	0	0	0	0
@Test public void test002() throws Exception { FastGraph target = FastGraph.jsonStringGraphFactory(TestRunner.get5Node7EdgeA(), false); FastGraph pattern = FastGraph.jsonStringGraphFactory(TestRunner.get5Node5Edge(), false);  nc = new AlwaysTrueNodeComparator(target, pattern); ec = new AlwaysTrueEdgeComparator(target, pattern);   ApproximateSubgraphIsomorphism isi = new ApproximateSubgraphIsomorphism(target, pattern, 5, 1, nc, ec); int count = isi.subgraphIsomorphismFinder(); assertEquals(count,0); } 	0	1	0	0	0	0
private void cancelFoodNotifications(NotificationManager mNotificationManager){ synchronized (activeNotifications){ Iterator<Integer> it = activeNotifications.iterator(); while (it.hasNext()){ mNotificationManager.cancel(NOTIFICATION_TAG, it.next()); it.remove(); } } } 	0	1	0	0	0	0
"public void multithreadTest(Morphium m) throws Exception { long startTotal = System.currentTimeMillis(); long start = System.currentTimeMillis(); m.dropCollection(UncachedObject.class); List<Thread> threads = new Vector<>(); for (int i = 0; i < 50; i++) { final int t = i; Thread thr = new Thread() { @Override public void run() { for (int j = 0; j < 1000; j++) { UncachedObject uc = new UncachedObject(); uc.setCounter(t * 100 + j); uc.setValue(""By thread "" + t); m.store(uc); } //                    log.info(""Thread "" + t + "" finished!""); } }; threads.add(thr); thr.start(); } //        for (Thread t : threads) t.join(); //        long dur = System.currentTimeMillis() - start; //        log.info(""Storing took "" + dur);  start = System.currentTimeMillis();  for (int i = 0; i < 50; i++) { final int t = i; Thread thr = new Thread() { @Override public void run() { for (int j = 0; j < 1000; j++) { Query<UncachedObject> q = m.createQueryFor(UncachedObject.class); q.f(""counter"").eq(t * 100 + j); UncachedObject uc = q.get(); } //                    log.info(""Thread "" + t + "" finished!""); } }; threads.add(thr); thr.start(); } for (Thread t : threads) t.join(); //        dur = System.currentTimeMillis() - start; //        log.info(""Reading took "" + dur);  long dur = System.currentTimeMillis() - startTotal; log.info(""Overall dur "" + dur);   } "	1	0	1	1	0	0
public void applyEffect() { while (!this.playerQueue.isEmpty()) { final Player p = this.playerQueue.poll(); if (p != null && !p.isDead()) { Projectile.this.applyDamage(p); } }  while (!this.mobQueue.isEmpty()) { final Mob b = this.mobQueue.poll(); if (b != null && !b.isDead()) { applyDamage(b); } } this.queuedEffect = false; } 	1	1	1	1	1	0
private <P> void updateComponentValue(final P newValue, final TakesValue component, final Converter converter) { Object widgetValue = converter.toWidgetValue(newValue); component.setValue(widgetValue); } 	1	0	1	1	0	0
public String getSelectedTarget() { String ipTemp = selectedTarget; if (ipTemp == null) { Target[] targets = DESCRIPTOR.getTargets(); if (targets.length > 0) { ipTemp = targets[0].getUrl(); } } return ipTemp; } 	0	1	0	0	0	0
"public void putContigID(String name, int id) { if (getContigID(""M"") != null) return; tmpContigID.put(name, id); contigID.put(name, id); } "	1	0	1	0	0	0
"@Test public void testJsonObjectEncodePrettily() { runJavaScript(""json/JsObject"", ""encodePrettily""); Assert.assertEquals(""{\""foo\"":\""foo_value\""}"", o); runGroovy(""json/JsObject"", ""encodePrettily""); Assert.assertEquals(""[foo:foo_value]"", o); runRuby(""json/JsObject"", ""encodePrettily""); Assert.assertEquals(""{\""foo\"":\""foo_value\""}"", o); } "	0	0	0	1	1	0
"@Override public void processMessage(String message, String msgType, String msgId) { CmsCI ci = GSON.fromJson(message, CmsCI.class); CmsCISimple simpleCI = cmsUtil.custCI2CISimple(ci, ""df""); indexer.indexEvent(""ci"", GSON_ES.toJson(simpleCI)); //For plan generation metrics if (""manifest.Environment"".equals(ci.getCiClassName()) && StringUtils.isNotEmpty(ci.getComments()) && ci.getComments().startsWith(SUCCESS_PREFIX)) { deploymentPlanProcessor.process(simpleCI); } else if (""account.Policy"".equals(ci.getCiClassName()) || ""mgmt.manifest.Policy"".equals(ci.getCiClassName())) { policyProcessor.process(simpleCI); }   //add wo to all bom cis if (ci.getCiClassName().startsWith(""bom"")) { message = this.process(simpleCI); } else { message = GSON_ES.toJson(simpleCI); } indexer.index(String.valueOf(simpleCI.getCiId()), ""ci"", message); relationMessageProcessor.processRelationForCi(message); } "	0	1	0	0	0	0
"@Test public void testIgnoreEmptyLines_4() { final ICompositeNode tree = this.getRootNode(""first\n\t\tabc\n\t""); StringConcatenation _builder = new StringConcatenation(); _builder.append(""[ID:first][-WS:""); _builder.newLine(); _builder.append(""\\t\\t][INDENT:][ID:abc][-WS:""); _builder.newLine(); _builder.append(""][DEDENT:][-WS:\\t]""); _builder.newLine(); Assert.assertEquals(_builder.toString().trim(), this.asText(tree)); } "	0	1	0	0	0	0
"@Test public void testEmptyTree() { final ICompositeNode tree = this.getRootNode(""""); Assert.assertEquals("""", this.asText(tree)); } "	0	1	0	0	0	0
"@Override public void setupViewPager(int hospitalId, int divisionId) { adapter = new ViewPagerAdapter(getSupportFragmentManager()); adapter.addFragment(DoctorFragment.newInstance(MyDoctorRecyclerViewAdapter.HEARTTYPE, hospitalId, divisionId), ""科內醫生""); adapter.addFragment(DivisionScoreFragment.newInstance(), ""本科評分""); adapter.addFragment(CommentFragment.newInstance(hospitalId, divisionId, null, GACategory.DIVISION), ""本科評論"");  ViewPager viewPager = (ViewPager) findViewById(R.id.viewpager); viewPager.setAdapter(adapter); viewPager.setOffscreenPageLimit(2);  TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs); tabLayout.setupWithViewPager(viewPager); } "	0	1	0	0	0	0
protected float[] readComplexBenchmark(int booksBatchSize, int librariesBatchSize, int personsBatchSize) throws ObjectsAreNotFullyLoadedException { booksBatchSize *= librariesBatchSize; personsBatchSize *= librariesBatchSize;  float[] allTime = new float[NUMBER_OF_PASSES]; SimpleProfiler simpleProfiler = new SimpleProfiler(); for (int i = 0; i < NUMBER_OF_PASSES; i++) { simpleProfiler.start(); Pair<List<Library>, Pair<List<Book>, List<Person>>> data = readComplex(librariesBatchSize, booksBatchSize, personsBatchSize); if (checkIfLoaded(data.first, data.second.first, data.second.second)) { throw new ObjectsAreNotFullyLoadedException(); } allTime[i] = simpleProfiler.stop(); deleteComplex(new ArrayList<Library>(), data.second.first, data.second.second);  System.gc(); } return allTime; } 	1	1	1	1	1	0
public long countActionsToday(Action.ActionType type) { DateTime today = DateTime.now(); return countActionsBetween(today, today, type); } 	0	1	0	0	0	0
public long countActionsLastSevenDays(Action.ActionType type) { DateTime today = DateTime.now(); return countActionsBetween(today.minusDays(7), today, type); } 	0	1	0	0	0	0
protected Criteria getYearFilterCriteria(final YearFilterPagingRequest filter, final String dateProperty) { Criteria[] yearCriteria = null; Criteria criteria = new Criteria();  if (filter.getYear() == null) { yearCriteria = new Criteria[1]; yearCriteria[0] = new Criteria(); } else { yearCriteria = new Criteria[filter.getYear().size()]; for (int i = 0; i < filter.getYear().size(); i++) { yearCriteria[i] = where(dateProperty).gte(getStartDate(filter.getYear().get(i))) .lte(getEndDate(filter.getYear().get(i))); } }  return filter.getInvert() ? criteria.norOperator(yearCriteria) : criteria.orOperator(yearCriteria); } 	1	0	1	0	0	0
private List<TypeOfSample> getDeactivatedSampleTypes(List<String> sampleTypeIds) { List<TypeOfSample> sampleTypes = new ArrayList<TypeOfSample>();  for( String id : sampleTypeIds){ TypeOfSample typeOfSample = TypeOfSampleUtil.getTypeOfSampleById( id ); typeOfSample.setActive( false ); typeOfSample.setSysUserId(currentUserId); sampleTypes.add(typeOfSample); }  return sampleTypes; } 	0	1	0	0	0	0
@Override public void onDestroy() { super.onDestroy(); bird.stop(); } 	0	1	0	0	0	0
"@SuppressWarnings(""AssignmentToForLoopParameter"") private void synchronize(boolean forceUpdate) { // First, clear any users that went away.  // Put all users in a set for fast access. Set<String> emailUsers = new HashSet<String>(); if (!needsToSignIn()) { for (CredentialedUser user : Services.getLoginService().getAllUsers().values()) { emailUsers.add(user.getEmail()); } } for (int index = 0; index < modelRoot.getChildCount(); ) { TreeNode node = modelRoot.getChildAt(index); if (node instanceof GoogleUserModelItem) { CredentialedUser user = ((GoogleUserModelItem) node).getCredentialedUser(); // If the user isn't valid anymore, remove the corresponding node.. if (user == null || !emailUsers.contains(user.getEmail())) { treeModel.removeNodeFromParent((GoogleUserModelItem) node); continue; } } else { treeModel.removeNodeFromParent((MutableTreeNode) node); continue; } index++; }  // Now add users that haven't been added if (!needsToSignIn()) { GoogleUserModelItem node = getNodeForUser(Services.getLoginService().getActiveUser()); if (node != null) { if (forceUpdate) { node.setNeedsSynchronizing(); } node.synchronize(); }  for (CredentialedUser user : Services.getLoginService().getAllUsers().values()) { if (user != Services.getLoginService().getActiveUser()) { node = getNodeForUser(user); if (node != null) { if (forceUpdate) { node.setNeedsSynchronizing(); } if (!queryOnExpand || (popupPanel != null && popupPanel.tree.isExpanded(new TreePath(node.getPath())))) { node.synchronize(); } } } } } else { treeModel.insertNodeInto(new GoogleSignOnModelItem(), modelRoot, 0); } } "	1	0	1	0	0	0
"@TargetApi(18) public void notifyScannedDevice(BluetoothDevice device, BluetoothAdapter.LeScanCallback scanner) { int oldSize = 0, newSize = 0;  if (isDebugEnabled()) oldSize = distinctBluetoothAddresses.size();  distinctBluetoothAddresses.add(device.getAddress()); if (isDebugEnabled()) { newSize = distinctBluetoothAddresses.size(); if (oldSize != newSize && newSize % 100 == 0) { if (isDebugEnabled()) Log.d(TAG, ""Distinct bluetooth devices seen: ""+distinctBluetoothAddresses.size()); } } if (distinctBluetoothAddresses.size()  > getCrashRiskDeviceCount()) { if (PREEMPTIVE_ACTION_ENABLED && !recoveryInProgress) { Logger.log.verbose(""Large number of bluetooth devices detected: ""+distinctBluetoothAddresses.size()+"" Proactively attempting to clear out address list to prevent a crash""); Logger.log.verbose(TAG, ""Stopping LE Scan""); //noinspection deprecation old API compatability BluetoothAdapter.getDefaultAdapter().stopLeScan(scanner); startRecovery(); processStateChange(); } } } "	0	0	0	1	1	0
"public void run() {  // Loop forever while (true) { try {  // Get the next message QueueingConsumer.Delivery delivery = consumer.nextDelivery();  // Get the properties for the request message, set up the properties // for the reply message. BasicProperties props = delivery.getProperties(); BasicProperties replyProps = new BasicProperties.Builder(). correlationId(props.getCorrelationId()).build();  // Placeholder for a reply, if we have one to send String message2 = """";  try { // Parse the body.  Get the string containing the JSON data. String message = new String(delivery.getBody(), ""UTF-8"");  // Figure out the message type as a string so we know how to parse it. SdnRequest req = mapper.readValue(message, SdnRequest.class); SdnReply rep = null;  // Dispatch to command handlers depending on the type of message // // Handle ping requests here since they're pretty trivial if (req.getRequestType().equals(SdnPingRequest.TYPE)) { SdnPingRequest pingReq = mapper.readValue(message, SdnPingRequest.class); SdnPingReply pingRep = new SdnPingReply(); pingRep.setError(false); pingRep.setPayload(pingReq.getPayload()); rep = pingRep; }  // Other request types dispatch to handler functions in this module. // Place in alphabetical order. else if (req.getRequestType().equals(SdnDeleteMeterRequest.TYPE)) { SdnDeleteMeterRequest meterReq = mapper.readValue(message, SdnDeleteMeterRequest.class); rep = doSdnDeleteMeter(meterReq); } else if (req.getRequestType().equals(SdnDeleteForwardRequest.TYPE)) { SdnDeleteForwardRequest forwardReq = mapper.readValue(message, SdnDeleteForwardRequest.class); rep = doSdnDeleteForward(forwardReq); } else if (req.getRequestType().equals(SdnForwardRequest.TYPE)) { SdnForwardRequest forwardReq = mapper.readValue(message, SdnForwardRequest.class); rep = doSdnForward(forwardReq); } else if (req.getRequestType().equals(SdnForwardToControllerRequest.TYPE)) { SdnForwardToControllerRequest flowReq = mapper.readValue(message, SdnForwardToControllerRequest.class); rep = doSdnForwardToController(flowReq); } else if (req.getRequestType().equals(SdnInstallMeterRequest.TYPE)) { SdnInstallMeterRequest meterReq = mapper.readValue(message,SdnInstallMeterRequest.class); rep = doSdnInstallMeter(meterReq); } else if (req.getRequestType().equals(SdnTransmitPacketRequest.TYPE)) { SdnTransmitPacketRequest packetReq = mapper.readValue(message,SdnTransmitPacketRequest.class); rep = doSdnTransmitPacket(packetReq); } else { // Unknown message. rep = new SdnReply(); rep.setError(true); rep.setErrorMessage(""Unknown message type""); }  // If there's a response, then get it in JSON representation if (rep != null) { message2 = mapper.writeValueAsString(rep); } } catch (Exception e) { e.printStackTrace(); } finally { // If we have a reply to send, then great, send it and ACK the old message if (message2 != null) { channel.basicPublish("""", props.getReplyTo(), replyProps, message2.getBytes(""UTF-8"")); } channel.basicAck(delivery.getEnvelope().getDeliveryTag(), false); } } catch (Exception e) { e.printStackTrace(); // We can get here if there was a problem reading a message from the AMPQ service. // Sleep for a second to avoid us busy-waiting in this loop. try { Thread.sleep(1000); } catch (Exception e2) { } } } } "	1	0	1	0	0	0
"private synchronized void dbWrite(GenericValue value, boolean delete) throws SemaphoreFailException { Transaction parent = null; boolean beganTx = false; boolean isError = false;  try { // prepare the suspended transaction if (TransactionUtil.isTransactionInPlace()) { parent = TransactionUtil.suspend(); } beganTx = TransactionUtil.begin(); if (!beganTx) { throw new SemaphoreFailException(""Cannot obtain unique transaction for semaphore logging""); }  // store the value try { if (delete) { value.refresh(); value.remove(); lock = null; } else { lock = value.create(); } } catch (GenericEntityException e) { Debug.logError(e, module); isError = true; throw new SemaphoreFailException(""Cannot obtain unique transaction for semaphore logging""); } finally { if (isError) { try { TransactionUtil.rollback(beganTx, ""ServiceSemaphore: dbWrite()"", new Exception()); } catch (GenericTransactionException e) { Debug.logError(e, module); } } if (!isError && beganTx) { try { TransactionUtil.commit(beganTx); } catch (GenericTransactionException e) { Debug.logError(e, module); } } } } catch (GenericTransactionException e) { Debug.logError(e, module); } finally { if (parent != null) { try { TransactionUtil.resume(parent); } catch (GenericTransactionException e) { Debug.logError(e, module); } } } } "	1	0	1	0	0	0
"@Override public boolean onOptionsItemSelected(MenuItem item) { // Handle action bar item clicks here. The action bar will // automatically handle clicks on the Home/Up button, so long // as you specify a parent activity in AndroidManifest.xml. int id = item.getItemId();  //noinspection SimplifiableIfStatement if (id == R.id.action_done) { if (barcodeText.getText().toString().equals("""")){ barcodeText.setError(getString(R.string.wrong_barcode_input)); } else { if (Utils.isValidBarcode(barcodeText.getText().toString(), BarcodeFormat.valueOf(formatSpinner.getSelectedItem().toString()))){ Intent intent = new Intent(ManualInputActivity.this, FinishActivity.class); Intent created = getIntent(); Card card = new Card(created.getStringExtra(""STORENAME""), barcodeText.getText().toString(), BarcodeFormat.valueOf(formatSpinner.getSelectedItem().toString())); created.putExtra(Constants.INTENT_CARD_ARG, card); startActivityForResult(intent, Utils.ADD_STORE); } else { barcodeText.setError(getString(R.string.wrong_barcode_input)); } } return true; }  return super.onOptionsItemSelected(item); } "	1	0	1	0	0	0
@Subscribe(threadMode = ThreadMode.MAIN) public void onPhotosFoundEvent(PhotosFoundEvent photosFoundEvent) { List<List<Size>> photos = photosFoundEvent.getPhotos(); if (photos != null && !photos.isEmpty()) { for (List<Size> size : photos) { imageAdapter.addPhoto(size.get(1).getSource()); } } loadingImage.setVisibility(View.INVISIBLE); gridPhotos.setVisibility(View.VISIBLE); } 	0	1	0	0	0	0
"public static int calculateTagLenght(String text) { if(FrmMain.debug) LOG.debug(""Calculating lenght for Tags. Text lenght: {}"",text.length());  String[] tags = trimTags(text); int lenght = 0; for(int i=0;i<tags.length;i++){ if(i<tags.length){ lenght += 1; } if(tags[i].contains("" "")){ lenght += tags[i].length()+2; } else { lenght += tags[i].length(); } } if(FrmMain.debug) LOG.debug(""Tags lenght: {}"",lenght);  return lenght; } "	1	1	1	1	1	0
public void verbose(String message, Object ... params) { if (verbose) { log.info(ansi().fgBright(BLACK).a(prefix).a(String.format(message,params)).reset().toString()); } } 	0	1	0	0	0	0
"@Override public final void handle(final long time) {  if (!GameInfo.getInstance().getPlayerMode().equals(PlayerMode.SURVIVAL) && gameObjects.allBubblesDestroyed()) { gameController.levelCompleted(); return; }  try { // update time long frametime; if (this.time != 0) { frametime = time - this.time; } else { frametime = FIRST_FRAME_TIME; } this.time = time;  gameController.updateTime(frametime); gameObjects.update(frametime);  } catch (Exception ex) { stop(); GameLog.addErrorLog(""Exception in game loop""); GameLog.addErrorLog(ex.getMessage()); Logger.getLogger(GameLoop.class.getName()).log(Level.SEVERE, ""Exception in game loop"", ex); } } "	1	0	1	1	0	0
"public int readSym(ByteArray data, int[] bitIndex) throws FormatException { for (int codeLen = mMinCodeLen; codeLen < mMaxCodeLen; ++codeLen) { // Get the maximum one from among the code values // whose code length is 'codeLen'. int maxCodeVal = mMaxCodeValsFromCodeLen[codeLen];  if (maxCodeVal < 0) { // There is no code value whose code length is 'codeLen'. continue; }  // Read a code value from the input assuming its code length is 'codeLen'. int codeVal = getHuffmanBits(data, bitIndex[0], codeLen);  if (maxCodeVal < codeVal) { // The read code value is bigger than the maximum code value // among the code values whose code length is 'codeLen'. // // Considering the latter rule of the two added for DEFLATE format // (3.2.2. Use of Huffman coding in the ""deflate"" format), // //     * All codes of a given bit length have lexicographically //       consecutive values, in the same order as the symbols //       they represent; // //     * Shorter codes lexicographically precede longer codes. // // We can expect that the code length of the code value we are // parsing is longer than the current 'codeLen'. continue; }  // Convert the code value into a symbol value. int sym = mSymsFromCodeVal[codeVal];  // Consume the bits of the code value. bitIndex[0] += codeLen;  return sym; }  // Bad code at the bit index. String message = String.format( ""[%s] Bad code at the bit index '%d'."", getClass().getSimpleName(), bitIndex[0]);  throw new FormatException(message); } "	1	0	1	1	0	0
protected void assertTask(Consumer<SpotlessExtension> test, Consumer<TestCaseAPI> testCases) throws Exception { List<String> befores = new ArrayList<>(); List<String> afters = new ArrayList<>(); testCases.accept((before, after) -> { befores.add(before); afters.add(after); });  // create the task ApplyFormatTask task = createApplyTask(test); // create the test file(s) List<File> files = new ArrayList<>(befores.size()); for (String before : befores) { File testFile = folder.newFile(); Files.write(testFile.toPath(), before.getBytes(StandardCharsets.UTF_8)); files.add(testFile); } // set the task to use this test file task.setTarget(files); // run the task task.apply(); // check what the task did for (int i = 0; i < befores.size(); ++i) { String afterExpected = afters.get(i); String afterActual = new String(Files.readAllBytes(files.get(i).toPath()), StandardCharsets.UTF_8); Assert.assertEquals(afterExpected, afterActual); } } 	1	0	1	0	0	0
protected File createTestFile(String filename) throws IOException { int lastSlash = filename.lastIndexOf('/'); String name = lastSlash >= 0 ? filename.substring(lastSlash) : filename; File file = folder.newFile(name); file.getParentFile().mkdirs(); Files.write(file.toPath(), getTestResource(filename).getBytes(StandardCharsets.UTF_8)); return file; } 	1	1	1	1	1	0
"public Result getNewSuggestionMatches() { User user = User.findByEmail(session().get(""email"")); List<User> newMatches = MatcherService.getMatchedUsers(user.fullname);  return ok(toJson(newMatches)); } "	0	1	0	0	0	0
"public boolean seekBackward(){ ArrayList<String> args = new ArrayList<String>(); args.add(""""+true); server.notifyClients(MessageType.SEEKNOTIFY, args); return player.seekBackward(); } "	1	0	1	1	0	0
"@Override public String toString() { return String.format(""Const(%s)"", value); } "	0	0	0	1	1	0
public void preInit() { ConfigManager.preInit();  SubsistenceFluids.initializeFluids(); SubsistenceBlocks.initialize(); SubsistenceItems.initialize();  EventUtil.register(new FluidHandler(), EventUtil.Type.FORGE);  SubsistenceFluids.initializeFluidContainers(); SubsistenceRecipes.initialize();  AbstractSerializer.initialize();  NetworkRegistry.INSTANCE.registerGuiHandler(Subsistence.instance, new GuiHandler());  EventUtil.register(new SpiderTracker(), EventUtil.Type.FORGE); EventUtil.register(new WebHandler(), EventUtil.Type.FORGE); EventUtil.register(new BoilingWaterHandler(), EventUtil.Type.FORGE); EventUtil.register(TimerHandler.INSTANCE, EventUtil.Type.FML); } 	0	1	0	0	0	0
public static boolean isNetworkUp(Context context) { return getInterfaceDetails(context, true).netEnabled; } 	1	0	1	0	0	0
"public static boolean checkForNewCfg(Context context) { InterfaceDetails newCfg = getInterfaceDetails(context, true);  //always check for new config if (currentCfg != null && currentCfg.equals(newCfg)) { return false; } currentCfg = newCfg;  if (!newCfg.netEnabled) { Log.i(TAG, ""Now assuming NO connection (all interfaces down)""); } else { if (newCfg.netType == ConnectivityManager.TYPE_WIFI) { Log.i(TAG, ""Now assuming wifi connection""); } else if (newCfg.netType == ConnectivityManager.TYPE_MOBILE) { Log.i(TAG, ""Now assuming 3G connection ("" + (newCfg.isRoaming ? ""roaming, "" : """") + (newCfg.isTethered ? ""tethered"" : ""non-tethered"") + "")""); }  if (!newCfg.lanMaskV4.equals("""")) { Log.i(TAG, ""IPv4 LAN netmask on "" + newCfg.wifiName + "": "" + newCfg.lanMaskV4); } if (!newCfg.lanMaskV6.equals("""")) { Log.i(TAG, ""IPv6 LAN netmask on "" + newCfg.wifiName + "": "" + newCfg.lanMaskV6); } } return true; } "	1	0	1	0	0	0
"@Override public T next() { if (!hasNext()) { throw new NoSuchElementException(""No more elements.""); } ++this.consumed; return this.iterator.next(); } "	1	0	1	0	0	0
"@Test public void testVMsConfig() throws Exception { StringWriter actual = new StringWriter(); List<Location> locations = new LinkedList<Location>(); Location manila = TestHelper.createDefaultLocation(); manila.setAddress(""10.1.1.0""); locations.add(manila); Location boston = new Location(""boston.test.org""); boston.setAddress(""10.1.1.1""); locations.add(boston); Location bucharest = new Location(""buc.test.org""); bucharest.setAddress(""10.1.1.2""); locations.add(bucharest); IMocksControl mc = EasyMock.createControl(); FeatureManager mgr = mc.createMock(FeatureManager.class); mgr.getLocationsForEnabledFeature(Ivr.FEATURE); mc.andReturn(locations); mc.replay(); m_configuration.setFeatureManager(mgr); Bridge bridge = new Bridge(); List<FreeswitchExtension> extensions = Collections.emptyList(); m_configuration.write(actual, manila, bridge, false, false, null, extensions, false, true); String expected = IOUtils.toString(getClass().getResourceAsStream(""default_context-vms.test.xml"")); assertEquals(expected, actual.toString()); } "	0	1	0	0	0	0
"@Override public void render(final float delta) { Gdx.gl.glClearColor(0, 0, 0, 0); Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);  worldManager.update(delta);  camera.position.set(camera.viewportWidth / 2.f + worldManager.getPlayer().getX() * 50.f - 100.f, camera.viewportHeight / 2.f, 0); camera.update(); batch.setProjectionMatrix( camera.combined.scale(1 / WorldManager.PHYSICS_SCALE_FACTOR, 1 / WorldManager.PHYSICS_SCALE_FACTOR, 1)); batch.begin(); Iterator<WorldObject> it = worldManager.getDirector().getObjects(true); worldManager.getPlayer().doRender(batch); while (it.hasNext()) { it.next().doRender(batch); } if (!gameOverMenuActive && !(worldManager.getGameStatus())) { gameOverMenuActive = true; gameOverTable.setVisible(true); gameOverScore.setText("" Score:"" + Integer.toString(Math.round(score))); if (ScoreContainer.isHighScore(Math.round(score))) { highScoreLabel.setVisible(true); } finalScore = Math.round(score); Gdx.input.setInputProcessor(stage); } score = score + delta * worldManager.getPlayer().getSpeed().len(); if (gameOverMenuActive) { scoreLabel.setText("" "" + Integer.toString(Math.round(finalScore))); } else { scoreLabel.setText("" "" + Integer.toString(Math.round(score))); } batch.end(); stage.act(); stage.draw();  // Enable if you want to see physics outlined physicsRenderer.render(this.worldManager.getPhysicsWorld(), camera.combined.scale(50.f, 50.f, 1.f)); } "	0	1	0	0	0	0
"public String getOwnOption(String option) { return this.getOwnOption(option, """", """"); } "	1	0	1	1	0	0
public static void getStartPointsFromDomain(int trajForm, int skip, Gridded3DSet spatial_set, byte[][] color_values, float[][] startPts, byte[][] startClrs, float[][] flowValues) throws VisADException { int manifoldDim = spatial_set.getManifoldDimension(); int[] lens = spatial_set.getLengths(); int lenX = lens[0]; int lenY = lens[1]; int lenZ; if (manifoldDim == 3) { lenZ = lens[2]; getStartPointsFromDomain3D(trajForm, skip, spatial_set.getSamples(false), lenX, lenY, lenZ, color_values, startPts, startClrs); } else if (manifoldDim == 2) { getStartPointsFromDomain2D(trajForm, skip, spatial_set.getSamples(false), lenX, lenY, color_values, startPts, startClrs, flowValues); } } 	0	1	0	0	0	0
@Override public void onResult(RPCManager.Result<Integer> result) { if (result.getStatus() == RPCManager.RESULT_OK) { PageCacheManager.Page page = PageCacheManager.getPage(id); if (result.getResult() > page.timestamp) { downloadPage(url); } else if (!url.equals(backStack.peek().url)) { showPage(url, page.html); } } else Dialogs.connectionFailed(context); } 	0	1	0	0	0	0
"private int doSearch(final CharBuffer buffer, final int matchedLength, final int currentLength, final boolean ignoreCase) { /* * Try and see if there is a possible match here; there is if ""fullword"" * is true, in this case the next ""matchedLength"" argument to a possible * child call will be the current length. */ final int nextLength = fullWord ? currentLength : matchedLength;   /* * If there is nothing left in the buffer, we have a match. */ if (!buffer.hasRemaining()) return nextLength;  /* * OK, there is at least one character remaining, so pick it up and see * whether it is in the list of our children... */ char c = buffer.get(); int index = Arrays.binarySearch(nextChars, c); if (index == -1 && ignoreCase) { final boolean isUpper = Character.isUpperCase(c); final boolean isLower = Character.isLowerCase(c); if (isUpper != isLower) { c = isUpper ? Character.toLowerCase(c) : Character.toUpperCase(c); index = Arrays.binarySearch(nextChars, c); } }  /* * If not, we return the last good match; if yes, we call this same * method on the matching child node with the (possibly new) matched * length as an argument and a depth increased by 1. */ if (index < 0) return nextLength; return nextNodes[index].doSearch(buffer, nextLength, currentLength + 1, ignoreCase); } "	1	0	1	0	0	0
public static Intent updateIntentExplicitness(Context context, Intent implicitIntent) { if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) { // API 21 creates the need for explicit Intents, // so make sure only one can answer PackageManager pm = context.getPackageManager(); List<ResolveInfo> resolveInfo = pm.queryIntentServices(implicitIntent, 0); if (resolveInfo == null || resolveInfo.size() != 1) { return null; }  ResolveInfo serviceInfo = resolveInfo.get(0); String packageName = serviceInfo.serviceInfo.packageName; String className = serviceInfo.serviceInfo.name; ComponentName component = new ComponentName(packageName, className);  Intent explicitIntent = new Intent(implicitIntent); explicitIntent.setComponent(component); return explicitIntent; } else { return implicitIntent; } } 	1	1	1	0	1	0
public void mergeNetwork(RedstoneWireNetwork wireNetwork) { for (WeakReference<TileRedstoneWireConnector> connectorRef : wireNetwork.connectors) { TileRedstoneWireConnector connector = connectorRef.get(); if (connector != null) { connector.wireNetwork = add(connector); } }  for (WeakReference<TileRedstoneWireConnector> connectorRef : wireNetwork.connectors) { TileRedstoneWireConnector connector = connectorRef.get(); if (connector != null) { connector.getWorldObj().notifyBlockOfNeighborChange(connector.xCoord, connector.yCoord, connector.zCoord, IIBlocks.redstoneWireConnector); } } } 	0	1	0	0	0	0
"void configureSwagger(Environment environment, String basePath) { environment.jersey().register(new ApiListingResourceJSON()); environment.jersey().register(new ApiDeclarationProvider()); environment.jersey().register(new ResourceListingProvider()); ScannerFactory.setScanner(new DefaultJaxrsScanner()); ClassReaders.setReader(new DefaultJaxrsApiReader()); SwaggerConfig config = ConfigFactory.config(); config.setApiVersion(""1.0.1""); // TODO: Fix this so the swagger client generator can work correctly config.setBasePath(""../../"" + basePath); } "	1	0	1	1	0	0
"@Test public void testShowBindingError() throws Exception { wd().openScreen(LookupInput2TestPage.class);  // Pressing validate should make the 2nd editor be with an error background wd().cmd().click().on(""button_validate"");  ScreenInspector inspector = wd().screenInspector(); if(null == inspector) return; BufferedImage bi = inspector.elementScreenshot(""one""); //ImageIO.write(bi, ""png"", new File(""/tmp/test.png"")); Assert.assertTrue(""The background of the control should be red because it is in error"", isReddish(bi));  //-- Reload the screen, and it should remain red wd().refresh();  inspector = wd().screenInspector(); if(null == inspector) throw new IllegalStateException(); bi = inspector.elementScreenshot(""two""); //ImageIO.write(bi, ""png"", new File(""/tmp/test.png"")); Assert.assertTrue(""The background of the control should be red because it is in error after screen refresh"", isReddish(bi)); } "	0	0	0	1	1	0
"protected void execute() { if (autoPower) { power = VisionProcessing.getShooterPower(); } //		if (shooterWheel.isBallLoaded()) { power = (1 - DS2016.rightJoystick.getZ()) / 2.0;  RobotMap.leftShooterWheel.set(power); RobotMap.rightShooterWheel.set(-power); //		} else { //			RobotMap.leftShooterWheel.set(0); //			RobotMap.rightShooterWheel.set(0); //		} } "	0	1	0	0	0	0
@Override public void update(float delta) { position=Body.getPosition(); target=GameState.instance.player.playerBody.getPosition(); vel=target.cpy().sub(position).nor().scl(100); Body.applyLinearImpulse(target, vel, true);  } 	0	1	0	0	0	0
"public Builder setPort(int port) { if (Range.open(1, 65535).contains(port)) { throw new IllegalArgumentException(""Invalid port number "" + port); }  if (!isPortAvailable(port)) { throw new RuntimeException(""Token listener tried to use a defined but already taken port "" + port); }  this.port = port; return this; } "	1	0	1	1	0	0
"public final void execute(String[] args){ CommandLine cmd = parseArgs(args);  if (cmd.hasOption(""h"")) { die(); }  processConfigFileOption(cmd);  executeImpl(cmd); } "	1	0	1	1	0	0
public static Iterator<SFeature> iterator_SFeature(SAnnotationContainer container) { Iterator<SFeature> retVal = null; if (container != null) { retVal = new MyIterator<SFeature>(container.getLabels().iterator()); } return (retVal); } 	0	1	0	0	0	0
public static Iterator<SMetaAnnotation> iterator_SMetaAnnotation(SAnnotationContainer container) { Iterator<SMetaAnnotation> retVal = null; if (container != null) { retVal = new MyIterator<SMetaAnnotation>(container.getLabels().iterator()); } return (retVal); } 	0	1	0	0	0	0
"private void setQuestionTypeCaption(){ messageBodyText.setText(i18n.GL3466_4()+i18n.GL_SPL_FULLSTOP()); optionsContainerFpnl.clear(); if(collectionItemDo!=null && collectionItemDo.getResource()!=null && collectionItemDo.getResource().getAnswers()!=null && collectionItemDo.getResource().getType()==9){ messageBodyText.setText(i18n.GL3234_1()+i18n.GL_SPL_FULLSTOP()); optionsContainerFpnl.addStyleName(""drapDropContainer""); optionsContainer=new HTAnswerDragPanelVc(); optionsContainerFpnl.add(optionsContainer); Label label = new Label(""""); label.setStyleName(""dragDropSpacer""); optionsContainer.superAdd(label); Label toplabel = new Label(""""); toplabel.setStyleName(""dragDropSpacer""); optionsContainer.add(toplabel); }else{ optionsContainerFpnl.removeStyleName(""drapDropContainer""); } renderQuestionAnswerOptions(); } "	0	1	0	0	0	0
private TestsToRun getTestsToRun() { final TestsToRun testsToRun = (TestsToRun) getSuites(); final Configuration configuration = Configuration.read();  final TestExecutionPlannerLoader testExecutionPlannerLoader = new TestExecutionPlannerLoader(new JavaSPILoader(), resource -> { final String className = new ClassNameExtractor().extractFullyQualifiedName(resource); return testsToRun.getClassByName(className) != null; }, getGlobPatterns());  return new TestStrategyApplier(testsToRun, testExecutionPlannerLoader, bootParams.getTestClassLoader()).apply( configuration); } 	0	1	0	0	0	0
public Assessment safeBuild(final DataElementErrorCollector elementErrorCollector) { elementErrorCollector.addAll(elementErrorCollector); return elementErrorCollector.isEmpty() ? asmtBuilder.build() : null; } 	1	0	1	1	0	0
"@Override public String errorMsgOnData(@NotNull String data) { String sup = super.errorMsgOnData(data); if (sup != null) { return sup; } if (!initialMacro.getKey().equals(data)) { if (Project.getCurrentProject().findMacroByKey(data) != null) { return bundle.getString(""Macros.key_already_exists""); } } return null; } "	1	0	1	1	0	0
@Override public void onPostRefresh(boolean success, final ArrayList<EmailMessage> refreshedEmails, User user) {  allEmails = new ArrayList<>(refreshedEmails); /** * This is done for maintaining the fragment lifecycle. * Check if the fragment is attached to the activity *       if it isn't, then set bundle stating that a refresh is required. */ FolderFragment thisFragment = (FolderFragment) getFragmentManager().findFragmentByTag(Constants.FRAGMENT_TAG_FOLDER); if (!thisFragment.isAdded()) { if (thisFragment != null) { Bundle bundle = new Bundle(); bundle.putInt(Constants.BUNDLE_ON_POST_REFRESH, refreshedEmails.size()); thisFragment.setArguments(bundle); } } else { onPostRefresh(refreshedEmails.size()); } } 	0	1	0	0	0	0
@Test public void updatePlatesTest(){  List<Point> plate = buildPlateWithNullTest(1); testTask.addPlate(plate); for (int i = 0; i < 4; i++) testTask.updatePlates(); } 	1	0	1	1	0	0
"@Override public void onClick(View v) { if(!MainActivity.isSafe()) return; if(MainActivity.device==null) {MainActivity.toast(""You first need to adjust the settings ...""); return;} MainActivity.getInstance().leaveBluetoothOn=true; Intent intent = new Intent(MainActivity.getInstance(), PredictionActivity.class); ExperimentalFragment.this.startActivityForResult(intent, MainActivity.LEAVE_BLUETOOTH_ON); } "	0	1	0	0	0	0
public void init() { view.enableSend(false); } 	1	0	1	1	0	0
"@Override public void initGui() { super.initGui(); inputField.setText(defaultInputText); String s = Utils.getLocalizedMessage(""irc.gui.options""); int bw = fontRendererObj.getStringWidth(s) + 20; btnOptions = new GuiButton(0, this.width - bw, 0, bw, 20, s); this.buttonList.add(btnOptions); } "	1	0	1	0	0	0
"protected void viewThread(Status status) { Intent intent = new Intent(getContext(), ViewThreadActivity.class); intent.putExtra(""id"", status.id); startActivity(intent); } "	0	1	0	0	0	0
private void copyDataBase() throws IOException { InputStream myInput = myContext.getAssets().open(DB_NAME); String outFileName = DB_PATH + DB_NAME; OutputStream myOutput = new FileOutputStream(outFileName); byte[] buffer = new byte[1024]; int length; while ((length = myInput.read(buffer)) > 0) { myOutput.write(buffer, 0, length); }  myOutput.flush(); myOutput.close(); myInput.close();  } 	1	0	1	1	0	0
"public static void saveScreenshot () { try { FileHandle fh; do { fh = new FileHandle(directory + ""screenshot"" + counter++ + "".png""); } while (fh.exists()); Pixmap pixmap = getScreenshot(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight(), false); PixmapIO.writePNG(fh, pixmap); pixmap.dispose(); } catch (Exception e) { } } "	1	1	1	1	1	0
public void putTemplate(String name, byte[] templateSource, long lastModified) { templates.put(name, new ByteArrayTemplateSource(instanceId, name, templateSource, lastModified)); } 	1	0	1	1	0	0
private List<Map<String, ?>> renderInstances(Entity entity) { List<Map<String, ?>> renderedInstances = new ArrayList<Map<String, ?>>(); List<Instance> entityInstances = repository.getInstances(entity.getEntityNamespace(), entity.getName(), true); long id = 0; for (Instance instance : entityInstances) { registerReference(instance, ++id); renderedInstances.add(renderInstance(entity, instance)); } return renderedInstances; } 	0	1	0	0	0	0
public static ResourceResolver getResourceResolverForUserNested(ResourceResolverFactory factory, String userId) throws LoginException { ResourceResolver resolver; resolver = getResourceResolverForUser(resourceResolverFactory, null); return resolver; } 	1	1	1	1	1	0
private void setMode() { // imageView is always enabled now that touch events pass through // imageView.setEnabled(!calipersMode); calipersView.setEnabled(calipersMode); MenuItem switchModeMenuItem = menu.findItem(R.id.action_switch);  if (calipersMode) { getSupportActionBar().setTitle(getString(R.string.ep_calipers_title)); getSupportActionBar().setBackgroundDrawable(new ColorDrawable(ContextCompat.getColor(this, R.color.primary))); unfadeCalipersView(); switchModeMenuItem.setTitle(R.string.image_button_title); selectMainMenu(); } else { getSupportActionBar().setTitle(getString(R.string.image_mode_title)); getSupportActionBar().setBackgroundDrawable(new ColorDrawable(Color.BLACK)); fadeCalipersView(); switchModeMenuItem.setTitle(R.string.measure_button_title); selectImageMenu(); } } 	0	1	0	0	0	0
@Override protected boolean beforeInvoke(Object receiver, Method method, Object[] args) throws Throwable { if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) { if (args != null && args.length > 0) { for (int index = 0; index < args.length; index++) { if (args[index] instanceof String) { String callingPkg = (String) args[index]; if (!TextUtils.equals(callingPkg, mHostContext.getPackageName())) { args[index] = mHostContext.getPackageName(); } } } }  } return super.beforeInvoke(receiver, method, args); } 	0	1	0	0	0	0
"private void republishProject(String path, boolean force) throws IOException { String dir = getStr(path, TeamDataConstants.TEAM_DATA_DIRECTORY); String url = getStr(path, TeamDataConstants.TEAM_DATA_DIRECTORY_URL);  TeamSettingsFile tsf = new TeamSettingsFile(dir, url); tsf.read(); if (force || tsf.needsRefresh()) { tsf.write(); logger.fine(""Republished settings.xml file for "" + path); } } "	0	1	0	0	0	0
public void onEvent(ShopUpdateEvent event) { mShopsWithItems = event.shopMap; getLoaderManager().restartLoader(LAODER_ID, null, this); } 	0	1	0	0	0	0
public Result execute() { ClassLoader contextClassLoader = switchClassLoader(classLoader); Result result = createResult(Reflections.invoke(executor, execute)); switchClassLoader(contextClassLoader); return result; } 	1	1	1	0	1	0
"public ItemCollection createWorkItem(ItemCollection parent, String sProcessModelVersion, int aProcessID) throws Exception {  // lookup ProcessEntiy from the model ItemCollection processEntity = modelService.getModel(sProcessModelVersion).getTask( aProcessID); if (processEntity == null) throw new Exception( ""error createWorkItem: Process Entity can not be found ("" + sProcessModelVersion + ""|"" + aProcessID + "")"");  String sEditorID = processEntity.getItemValueString(""txteditorid""); if ("""".equals(sEditorID)) sEditorID = ""default""; int processID = processEntity.getItemValueInteger(""numProcessID""); String sModelVersion = processEntity .getItemValueString(""$modelversion""); String sWorkflowGroup = processEntity .getItemValueString(""txtworkflowgroup"");  // create empty workitem workItem = new ItemCollection(); workItem.replaceItemValue(""type"", ""workitem""); workItem.replaceItemValue(""$processID"", processID);  // set default writeAccess workItem.replaceItemValue(""$writeAccess"", workflowService.getUserName());  // assign project name and reference workItem.replaceItemValue(""$uniqueidRef"", parent.getItemValueString(""$uniqueid""));  // assign ModelVersion, group and editor workItem.replaceItemValue(""$modelversion"", sModelVersion); workItem.replaceItemValue(""txtworkflowgroup"", sWorkflowGroup); workItem.replaceItemValue(""txtworkfloweditorid"", sEditorID);  return workItem;  } "	1	0	1	0	0	0
"private String validateStudent(Student student, StudentSecurity studentSecurity, String stateCode) { if (student.getStateAbbreviation().compareTo(stateCode) != 0) throw new UnauthorizedUserException(""Attempted to modify student in state: "" + student.getStateAbbreviation() + "" endpoint received "" + stateCode); String error = """"; List<FieldError> errors = fileUploadSecurityValidator.validateStudent(student, studentSecurity); if(errors.size() == 0) { for(FieldError fieldError : errors) { error += fieldError.getDefaultMessage() + ""\n""; } } return error; } "	1	1	1	1	1	0
public void setFederationType(String federationType) { this.type = federationType; } 	1	0	1	0	0	0
"@Test public void testTimestampDeSerialize() throws Exception { // Test that timestamp object can be deserialized Writable w = new Text(""{\""one\"":true,\""five\"":\""2013-03-27 23:18:40\""}"");  JSONObject result = (JSONObject) instance.deserialize(w); assertEquals(result.get(""five""), Timestamp.valueOf(""2013-03-27 23:18:40.0"")); } "	0	0	0	1	1	0
"protected void activate(ComponentContext componentContext) throws InvalidSyntaxException { s_logger.info(""activate..."");  // save the bundle context m_ctx = componentContext;  // 1. Register the ConfigurationListener to // monitor Configuration updates m_ctx.getBundleContext().registerService(ConfigurationListener.class.getName(), this, null);  // 2. Load the latest snapshot and push it to ConfigurationAdmin try { loadLatestSnapshotInConfigAdmin(); } catch (Exception e) { throw new ComponentException(""Error loading latest snapshot"", e); }  // // start the trackers s_logger.info(""Trackers being opened...""); m_cloudHandler = new CloudConfigurationHandler(m_ctx.getBundleContext(), this, m_systemService, m_cryptoService); m_cloudHandler.open();  m_serviceTracker = new ConfigurableComponentTracker(m_ctx.getBundleContext(), this); m_serviceTracker.open(true);  m_bundleTracker = new ComponentMetaTypeBundleTracker(m_ctx.getBundleContext(), m_configurationAdmin, this); m_bundleTracker.open(); } "	1	0	1	0	0	0
public List<MockRequest> requests() { return Collections.unmodifiableList(mockRequests); } 	1	0	1	1	0	0
@Override public void refresh() { Platform.runLater(() -> itemsTable.refresh()); } 	1	0	1	0	0	0
"public void setAttenuation(float constant, float linear, float quadratic) { setFloat(""attenuation_constant"", constant); setFloat(""attenuation_linear"", constant); setFloat(""attenuation_quadratic"", quadratic); } "	0	0	0	1	1	0
@Override public void success(Message message) { mXmppConnectionService.resendMessage(message); } 	1	0	1	0	0	0
@Override public TreeConstructionOutput process(TreeConstructionInput treeConstructionInput) throws ProcessingError { this.bufferedReader = treeConstructionInput.getBufferedReader(); this.timePointer = System.currentTimeMillis(); this.globalStartTime = System.currentTimeMillis(); this.fileReadTimeNeeded = 0; UncertainTree uncertainTree = null; try { uncertainTree = new UncertainTree(treeConstructionInput.getFrameSize(), treeConstructionInput.getWindowSize()); for (int frameNo = 0; frameNo < treeConstructionInput.getWindowSize(); frameNo++) { for (int i = 0; i < treeConstructionInput.getFrameSize(); i++) { List<UInputData> nodes = getTransaction(); uncertainTree.addTransactionToTree(nodes, frameNo); } } treeConstructionInput.getWindowCompletionCallback().sendUpdate(createWindowOutput(uncertainTree)); uncertainTree.slideWindowAndUpdateTree(); List<UInputData> nodes = null; int frameCounter = 0; while (!(nodes = getTransaction()).isEmpty()) { if (!(frameCounter < treeConstructionInput.getWindowSize())) { frameCounter = 0; treeConstructionInput.getWindowCompletionCallback().sendUpdate(createWindowOutput(uncertainTree)); uncertainTree.slideWindowAndUpdateTree(); } uncertainTree.addTransactionToTree(nodes, treeConstructionInput.getWindowSize() - 1); frameCounter++;  } } catch (FileNotFoundException e) { e.printStackTrace(); } catch (DataNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); }  return createWindowOutput(uncertainTree); } 	1	1	1	1	1	0
"public void go() { JFrame frame = new JFrame();  // Set the name and frame size frame.setSize(608,480); frame.setTitle(""Treasure Hunter"");  // Allows for game window to be closed frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // Randomly places 3 treasures on game map component = new GameComponent();  player = new Player(0,0,16,8,""player""); component.loadPlayer(player,""player"");  System.out.println( this.toString() + "" is calling placeTheTreasures!!""); this.placeTheTreasures(4); component.loadTreasure( theTreasures );  Player [] treasures = placeTreasures(3); component.loadPlayer( treasures[0], ""treasure"" ); component.loadPlayer( treasures[1], ""treasure1"" ); component.loadPlayer( treasures[2], ""treasure2"" );  component.loadMap(""map.txt""); addBindings();  // adds game components and makes the window visible frame.add(component); frame.setVisible(true); component.validate(); component.repaint(); } "	1	0	1	1	0	0
"public void checkMove(int xTile, int yTile) { //limits where the player can move (ie. can move out of the box) if(xTile < 0 || xTile > 11 || yTile < 0 || yTile > 8) player.setMovable(false); //allows player to move after finding treasure else if(!message.equals("""")) player.setMovable(true); //allows player to move into bushes else if(tiletypes.get(yTile*tilesWidth + xTile) == 'B') player.setMovable(true); //prevent player from move into stones else if(tiletypes.get(yTile*tilesWidth + xTile) == 'S') player.setMovable(false); else if(player.getXPos() != player.getXTile() * 50 || player.getYPos() != player.getYTile() * 50) player.setMovable(false); else player.setMovable(true);  //if player finds treasure the string ""Treasure Found is displayed"" //if player finds three treasure than the string ""YOU WIN! Would you want to play again?""  if(xTile == treasure.getXTile() && yTile == treasure.getYTile() && t != ""found"" ) { setMessage(1); t = ""found""; foundTreasureNum++; if(GameGui.debug){ System.out.println(""foundTreasureNum++""); } } else if(xTile == treasure1.getXTile() && yTile == treasure1.getYTile() && t1 != ""found"" ) { setMessage(2); t1 = ""found""; foundTreasureNum++; if(GameGui.debug){ System.out.println(""foundTreasureNum++""); } } else if(xTile == treasure2.getXTile() && yTile == treasure2.getYTile() && t2 != ""found"" ) { setMessage(3); t2= ""found""; foundTreasureNum++; if(GameGui.debug){ System.out.println(""foundTreasureNum++""); } }  for (int i = 0; i < theTreasures.size(); ++i){ if(xTile == theTreasures.get(i).getX() && yTile == theTreasures.get(i).getY() && theTreasures.get(i).getFound() == false){ setMessage(i); theTreasures.get(i).setFoundTrue(); foundTreasureNum++; if(GameGui.debug) System.out.println(""foundTreasureNum++""); } }   if(foundTreasureNum == 3){ setMessageFinal(true); } } "	1	0	1	0	0	0
"@Override public long getSize() { if (size>0) { try { return getBytes().length; } catch (IOException e) { throw new MultipartException(""Something went wrong here"", e); } // try/catch } // if return size; } // getSize() "	1	0	1	1	0	0
"@Override public List<Operation> write(List<WriteOperation> operations) {  List<Operation> roll = new ArrayList<>();  for(WriteOperation operation : operations) {  try { switch (operation.getAction()) {  case CREATE_NODE : createIndividual((CreateNodeOperation)operation, roll); break;  case CREATE_ATTRIBUTE : if(((CreateAttributeOperation)operation).isReplacing()) { throw new WeaverError(WeaverError.WRITE_OPERATION_INVALID, ""Removes or replaces not allowed for Coins2-1 profile.""); } createAttribute((CreateAttributeOperation)operation, roll); break;  case CREATE_RELATION : if(((CreateAttributeOperation)operation).isReplacing()) { throw new WeaverError(WeaverError.WRITE_OPERATION_INVALID, ""Removes or replaces not allowed for Coins2-1 profile.""); } createRelation((CreateRelationOperation)operation, roll); break;  case REMOVE_NODE : case REMOVE_ATTRIBUTE : case REMOVE_RELATION : throw new WeaverError(WeaverError.WRITE_OPERATION_INVALID, ""Removes or replaces not allowed for Coins2-1 profile."");  default: throw new WeaverError(WeaverError.WRITE_OPERATION_NOT_EXISTS, ""This operation is not supported: ""+operation.getAction()); }  } catch(WeaverError e) { throw e; } }  return roll; } "	0	0	0	1	1	0
@Override public boolean attackEntityAsMob(Entity entity) { boolean entityFrom = entity.attackEntityFrom(DamageSource.causeMobDamage(this), (float) ((int) getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getAttributeValue()));  if (entityFrom) { this.applyEnchantments(this, entity); }  return entityFrom; } 	1	1	1	1	1	0
@Override public int getRecipeWidth(IRecipe recipe) { return recipe instanceof ShapelessOreRecipe ? 3 : -1; } 	1	0	1	1	0	0
"private static ImmutableMap<String, IborIndex> loadFromCsv() { List<ResourceLocator> resources = ResourceConfig.orderedResources(""IborIndexData.csv""); Map<String, IborIndex> map = new HashMap<>(); for (ResourceLocator resource : resources) { try { CsvFile csv = CsvFile.of(resource.getCharSource(), true); for (int i = 0; i < csv.rowCount(); i++) { IborIndex parsed = parseIborIndex(csv, i); map.put(parsed.getName(), parsed); } } catch (RuntimeException ex) { log.severe(""Error processing resource as Ibor Index CSV file: "" + resource + ex.getMessage()); return ImmutableMap.of(); } } return ImmutableMap.copyOf(map); } "	0	0	0	1	1	0
"private static ImmutableMap<String, PriceIndex> loadFromCsv() { List<ResourceLocator> resources = ResourceConfig.orderedResources(""PriceIndexData.csv""); Map<String, PriceIndex> map = new HashMap<>(); for (ResourceLocator resource : resources) { try { CsvFile csv = CsvFile.of(resource.getCharSource(), true); for (int i = 0; i < csv.rowCount(); i++) { PriceIndex parsed = parsePriceIndex(csv, i); map.put(parsed.getName(), parsed); } } catch (RuntimeException ex) { log.severe(""Error processing resource as Price Index CSV file: "" + resource + ex.getMessage()); return ImmutableMap.of(); } } return ImmutableMap.copyOf(map); } "	0	0	0	1	1	0
public static ArgumentStack createFromP(ArgumentStack from, Closure p1, Closure p2, Closure p3) { ArgumentStack to = (from == null)? new ArgumentStack():from.copy(); int len = 3; Closure[] oldClosures = to.closures; if (oldClosures != null) { len += oldClosures.length; } Closure[] newClosures = new Closure[len]; if (oldClosures != null) { System.arraycopy(oldClosures, 0, newClosures, 0, len - 1); } newClosures[len - 3] = p1; newClosures[len - 2] = p2; newClosures[len - 1] = p3; to.closures = newClosures; to.typeFlag |= P_FLAG; return to; } 	1	0	1	1	0	0
"@Test /** * for {@link OperationResultFactoryImpl#getAppropriateOperationResultInstance(Response, Class)} */ public void should_return_result_with_entity_when_response_has_entity_when_invoking_getAppropriateOperationResultInstance_method() throws Exception {  /* Given */ OperationResultFactoryImpl factorySpy = PowerMockito.spy(new OperationResultFactoryImpl());  PowerMockito.doReturn(true).when(factorySpy, ""isClientResource"", ClientQuery.class); PowerMockito.doReturn(ClientQuery.class).when(factorySpy, ""getSpecificResourceType"", responseMock); PowerMockito.doReturn(true).when(responseMock).hasEntity();  PowerMockito.whenNew(WithEntityOperationResult.class).withArguments(responseMock, ClientQuery.class).thenReturn(withEntityOperationResultMock);  /* When */ OperationResult<ClientQuery> retrievedOperationResult = factorySpy.getOperationResult(responseMock, ClientQuery.class);  /* Then */ Assert.assertNotNull(retrievedOperationResult); Assert.assertSame(retrievedOperationResult, withEntityOperationResultMock);  Mockito.verify(responseMock, times(2)).hasEntity(); PowerMockito.verifyNew(WithEntityOperationResult.class, times(1)).withArguments(responseMock, ClientQuery.class); } "	1	0	1	1	0	0
"@Override public void renderMeTo(TJContext tjContext, CompositeData cd, StringBuilder output) { output.append(""CompositeData of "").append(cd.getCompositeType().getTypeName()).append("" {\n""); for (String key : cd.getCompositeType().keySet()) { output.append(SHIFT_SPACE).append(""@|cyan "").append(key).append(""|@ = ""); Object o = cd.get(key); Renderer renderer = getRendererByTypeName(o.getClass().getName()); CharSequence vOut = renderer.render(tjContext, o); output.append(vOut); output.append(""\n""); } output.append(""}\n""); } "	1	0	1	1	0	0
public static void chmod(PyObject path, int mode) { if (os == OS.NT) { try { if (!absolutePath(path).toFile().setWritable((mode & FileStat.S_IWUSR) == 0)) { throw Py.OSError(Errno.EPERM, path); } } catch (SecurityException ex) { throw Py.OSError(Errno.EACCES, path); }  } else if (posix.chmod(absolutePath(path).toString(), mode) < 0) { throw errorFromErrno(path); } } 	1	0	1	1	0	0
public void showResult(int correctAnswers, int totalCards) { if (isInExam) { ResultDialogFragment resultDialog = ResultDialogFragment.newInstance(correctAnswers, totalCards); resultDialog.show(getSupportFragmentManager(), TAG_RESULT); } else { Dialogs dialog = new Dialogs(this); dialog.studyEndDialogInit(); dialog.show(); } } 	1	0	1	0	0	0
"@Test public void testOfBasicCase() throws Exception { try { CalendarEvent e = this.ttce.interpret(null); fail(); } catch (Exception e) { }  CalendarEvent f = this.ttce.interpret(""""); assertEquals(f.title, """");  CalendarEvent g = this.ttce.interpret(""wizyta u fryzjera ""); assertEquals(g.title, ""wizyta u fryzjera""); assertEquals(g.getDay(), null); assertEquals(g.getMonth(), null); assertEquals(g.getYear(), null); assertEquals(g.getMinutes(), null); assertEquals(g.getHour(), null); } "	0	0	0	1	1	0
"public void testIfRGBSeekBarsDoChangeColor() throws SecurityException, IllegalArgumentException, NoSuchFieldException, IllegalAccessException { final int RGB_TAB_INDEX = 1; testOpenColorPickerOnClickOnColorButton(); TabHost tabHost = (TabHost) mSolo.getView(R.id.colorview_tabColors); TabWidget colorTabWidget = tabHost.getTabWidget(); mSolo.clickOnView(colorTabWidget.getChildAt(RGB_TAB_INDEX), true); mSolo.waitForText(mSolo.getString(R.string.color_red)); final Paint originalStrokePaint = (Paint) PrivateAccess.getMemberValue(BaseTool.class, PaintroidApplication.currentTool, ""mCanvasPaint""); final int originalPaintColor = originalStrokePaint.getColor(); final ArrayList<ProgressBar> currentProgressBars = mSolo.getCurrentViews(ProgressBar.class); assertEquals(""No progress bars for ARGB :-("", currentProgressBars.size(), 4); final ArrayList<TextView> currentTextViews = mSolo.getCurrentViews(TextView.class, mSolo.getView(R.id.rgb_base_layout)); assertEquals(""Missing some text views RGBA and ARGV-values"", 9, currentTextViews.size()); int textValueCounter = 1; for (; textValueCounter < currentTextViews.size(); textValueCounter += 2) { int textValueAsInteger = Integer.parseInt((String) currentTextViews.get(textValueCounter).getText()); assertTrue(""Not in range 0<=textValue<=255"", textValueAsInteger >= 0 && textValueAsInteger <= 255); }  textValueCounter = 1; for (ProgressBar barToChange : currentProgressBars) { int changeSeekBarTo = (barToChange.getProgress() + 33) % barToChange.getMax(); mSolo.setProgressBar(barToChange, changeSeekBarTo); mSolo.sleep(50); if (textValueCounter == 4) { // alpha 0-100% int expectetAlphaTextValue = (int) (changeSeekBarTo / 2.55f); assertEquals(""Text value did not change index:"" + textValueCounter, expectetAlphaTextValue, Integer.parseInt((String) currentTextViews.get(textValueCounter * 2 - 1).getText())); } else assertEquals(""Text value did not change index:"" + textValueCounter, changeSeekBarTo, Integer.parseInt((String) currentTextViews.get(textValueCounter * 2 - 1).getText())); textValueCounter++; } mSolo.goBack(); final Paint rgbChangedStrokePaint = (Paint) PrivateAccess.getMemberValue(BaseTool.class, PaintroidApplication.currentTool, ""mCanvasPaint""); final int rgbChangedPaintColor = rgbChangedStrokePaint.getColor(); assertFalse(""Alpha value did not change"", Color.alpha(rgbChangedPaintColor) == Color.alpha(originalPaintColor)); assertFalse(""Red value did not change"", Color.red(rgbChangedPaintColor) == Color.red(originalPaintColor)); assertFalse(""Green value did not change"", Color.green(rgbChangedPaintColor) == Color.green(originalPaintColor)); assertFalse(""Blue value did not change"", Color.blue(rgbChangedPaintColor) == Color.blue(originalPaintColor));  } "	1	0	1	1	0	0
"public String getTypeORedString() { if (types.size() == 0) {return """";} String tmp = (String)types.elementAt(0); for (int i=1;i<types.size();i++) { tmp = tmp + "","" + (String)types.elementAt(i); }  return tmp; } "	1	1	1	1	1	0
@Override public void run() { while (stopped.get() && !Thread.interrupted()) { syncPolicy.sync(PSAgentContext.get().getMatricesCache()); try { Thread.sleep(syncTimeIntervalMS); } catch (InterruptedException e) {  } } } 	1	0	1	1	0	0
private void recordCookie(HttpServletRequest request, Trace trace) { if (cookieSampler.isSampling()) { final SpanEventRecorder recorder = trace.currentSpanEventRecorder(); Map<String, Object> cookies = ReadCookieMap(request); recorder.recordAttribute(AnnotationKey.HTTP_COOKIE, cookies); } } 	1	0	1	0	0	0
public static List<String> loadWordList(Reader reader, String comment) throws IOException { final List<String> result = new ArrayList<>(); BufferedReader br = null; try { if (reader instanceof BufferedReader) { br = (BufferedReader) reader; } else { br = new BufferedReader(reader); } String word = null; while ((word = br.readLine()) != null) { if (!Strings.hasText(word)) { continue; } if (!word.startsWith(comment)) { result.add(word.trim()); } } } finally { if (br != null) br.close(); } return result; } 	1	0	1	0	0	0
public void setPaused(boolean paused) { this.isPaused = paused; } 	1	0	1	0	0	0
"protected String getProcessingResultText(String path, long analysisTime, long processingTime, String size) { String analysis = Standalone.formatTime(analysisTime); String processing = Standalone.formatTime(processingTime); String total = Standalone.formatTime(analysisTime + processingTime); return ""Successfully created \"""" + path + ""\"" ("" + size + "") in "" + total + "" (anaysis: "" + analysis + "", processing: "" + processing + "")""; } "	0	0	0	1	1	0
"@Test public void constructTitleString() throws Exception { String[] titles = new String[101]; for (int i = 0; i < titles.length; i++) titles[i] = ""a"" + i; String[] expected = new String[] { // slowmax == 50 for Wikimedia wikis if not logged in URLEncoder.encode(""A0|A1|A2|A3|A4|A5|A6|A7|A8|A9|A10|A11|A12|A13|A14|"" + ""A15|A16|A17|A18|A19|A20|A21|A22|A23|A24|A25|A26|A27|A28|A29|A30|"" + ""A31|A32|A33|A34|A35|A36|A37|A38|A39|A40|A41|A42|A43|A44|A45|A46|"" + ""A47|A48|A49"", ""UTF-8""), URLEncoder.encode(""A50|A51|A52|A53|A54|A55|A56|A57|A58|A59|A60|A61|A62|"" + ""A63|A64|A65|A66|A67|A68|A69|A70|A71|A72|A73|A74|A75|A76|A77|A78|A79|"" + ""A80|A81|A82|A83|A84|A85|A86|A87|A88|A89|A90|A91|A92|A93|A94|A95|A96|"" + ""A97|A98|A99"", ""UTF-8""), URLEncoder.encode(""A100"", ""UTF-8"") }; String[] actual = enWiki.constructTitleString(titles); assertArrayEquals(""constructTitleString"", expected, actual); } "	1	0	1	0	0	0
"@SuppressWarnings(""unchecked"") @Override public boolean init(Expression<?>[] arg, int arg1, Kleenean arg2, ParseResult arg3) { if (checkIfCondition()) return false; EffFormatGUI last = lastInstance; if (hasSection()) { if ((arg1 == 0 || arg1 == 5)) { Skript.error(""You can't execute a code in this effect. Use 'format gui slot .... to run:' instead.""); return false; } lastInstance = this; loadSection(""format gui effect"", InventoryClickEvent.class); } else if (!hasSection() && arg1 == 2) { Skript.error(""You can't execute a blank code in this effect. In case you want to format a unstealable item, use 'format gui slot ... to do nothing' instead.""); return false; } lastInstance = last; int max = arg.length; s = (Expression<Number>) arg[0]; p = (Expression<Player>) arg[1]; i = (Expression<ItemStack>) arg[2]/*.getConvertedExpression(ItemStack.class)*/; toClose = arg3.mark > 0; Type = arg1; if (arg3.mark == 2) inv = (Expression<Inventory>) arg[3]; switch (arg1){ case 5: runEvent = true; break; case 1: toClose = true; case 2: ct = arg[arg.length -1] != null ? arg[arg.length -1].getConvertedExpression(Object.class) : null; case 0:  break; case 3: sender = (Expression<CommandSender>) arg[4]; cmd = (Expression<String>) arg[5]; perm =  arg[6] != null ? (Expression<String>) arg[6] : null; break; case 4: String name = arg3.regexes.get(0).group(0).replaceAll("" "",""""); String exprs = arg3.regexes.size() > 1 ? arg3.regexes.get(1).group(0) : """"; Function<?> f = Functions.getFunction(name); EvalFunction.setParserInstance(this); if (f != null) func = new EvalFunction(f, exprs); else func = new EvalFunction(name, exprs);  } if (arg1 > 2 && arg1 != 4){ ct = arg[max - 2] != null ? arg[max - 2].getConvertedExpression(Object.class): null; i2 = arg[max - 1] != null ? (Expression<ItemStack>) arg[max - 1] : null; } return true; } "	1	0	1	1	0	0
@Override protected void onResume() { super.onResume();  checkPlayServices();  if (this.playServicesOk && this.settingsOK) launchChecksComplete(); } 	1	0	1	0	0	0
"public void onWakeupReceived(Context applicationContext, Intent intent) { Log.d(TAG, ""onWakeupReceived() start""); wakeup(intent); } "	1	0	1	0	0	0
public void validateRole(Role requiredRole) throws InsufficientRoleException { if (token.getRole() != null) { checkRoleField(requiredRole); } else { checkGroupsField(roleMapper.getRoleGroup(requiredRole)); } } 	1	0	1	0	1	0
public ViewHolder setViewVisibility(int viewId, int visibility) { View view = getView(viewId); if (view.getVisibility() == visibility) { view.setVisibility(visibility); } return this; } 	1	1	1	1	1	0
"@SuppressWarnings(""unchecked"") public <T> Comparable<T> set(int col, int row, Comparable<T> value) { Comparable<T> old; DataChangeEvent event = null; synchronized (this) { old = (Comparable<T>) get(col, row); if (!old.equals(value)) { rows.get(row)[col] = value; event = new DataChangeEvent(this, col, row, old, value); } } if (event != null) { notifyDataUpdated(event); } return old; } "	1	1	1	1	1	0
public static JRubyAsciidoctor create(List<String> loadPaths) { return processRegistrations(createJRubyAsciidoctorInstance(null, loadPaths, null, null)); } 	1	0	1	1	0	0
protected void writeResponseStream(InputStream inputStream, OutputStream outputStream) throws IOException { if (inputStream == null || outputStream == null) { return; }  byte[] buffer = new byte[chunkSize]; int length = 0; while ((length = inputStream.read(buffer)) > 0) { outputStream.write(buffer, 0, length); } } 	1	0	1	1	0	0
"@Test public void testSourceAddedWithCustomTags() throws Exception { List<String> customSourceTags = new ArrayList<String>(); customSourceTags.add(""fqdn""); customSourceTags.add(""hostname""); GraphiteHostAnnotator handler = new GraphiteHostAnnotator(""test.host.com"", customSourceTags); List<Object> out = new LinkedList<Object>(); String msg = ""test.metric 1 foo=bar""; handler.decode(null, msg, out); assertEquals(""test.metric 1 foo=bar source=test.host.com"", out.get(0)); } "	0	0	0	1	1	0
@Override public void run() { try { Updates result = telegramApiProvider.getUpdates(lastUpdateId); if (!result.isEmpty()) { lastUpdateId = result.getLastUpdateId() + 1; updates.addAll(result.getUpdates()); }  } catch (Exception ex) { logger.error(ex.getMessage(), ex); } } 	1	1	1	1	1	0
"private void uploadImage(HttpServletRequest request, HttpServletResponse response) { HttpSession session = request.getSession(); UserEntity ue = (UserEntity) session.getAttribute(""user""); String imageJson = request.getParameter(""image""); byte[] encodeImage = Base64.decodeBase64(imageJson); File file = null; try { String applicationPath = request.getServletContext() .getRealPath(""""); String uploadFilePath = null; if (""developer"".equals(ue.getRole())) { uploadFilePath = applicationPath + ""uploads"" + File.separator + ""developer"" + File.separator + ue.getId(); saveImage(uploadFilePath, encodeImage, response); Developer developer = developerService.findById(ue.getId());  developer.setImgUrl(""uploads/developer/"" + ue.getId() + ""/""); developerService.updateDeveloper(developer); ue.setImgUrl(""uploads/developer/"" + ue.getId() + ""/""); } if (""customer"".equals(ue.getRole())) { uploadFilePath = applicationPath + ""uploads"" + File.separator + ""customer"" + File.separator + ue.getId(); saveImage(uploadFilePath, encodeImage, response); Customer customer = customerService.findById(ue.getId()); customer.setImgUrl(""uploads/customer/"" + ue.getId() + ""/""); customerService.modify(customer); ue.setImgUrl(""uploads/customer/"" + ue.getId() + ""/""); } if (""admin"".equals(ue.getRole())) { uploadFilePath = applicationPath + ""uploads"" + File.separator + ""admin"" + File.separator + ue.getId(); saveImage(uploadFilePath, encodeImage, response); Admin admin =  adminService.findById(ue.getId());; admin.setImgUrl(""uploads/admin/"" + ue.getId() + ""/""); adminService.modify(admin); ue.setImgUrl(""uploads/admin/"" + ue.getId() + ""/""); }  } catch (Exception e) { e.printStackTrace(); } } "	1	0	1	0	1	0
@Override public void onSubscribe(Disposable s) { DisposableHelper.setOnce(this.s, s); } 	1	0	1	1	0	0
private void initializeViewContents() { for (int i = 0; i < option.visibleCount; i++) { CardContainerView container = containers.get(i); int adapterIndex = topIndex + i;  if (adapterIndex < adapter.getCount() - 1) { View view = adapter.getView(adapterIndex, container.getContentContainer().getChildAt(0), this); container.getContentContainer().addView(view); container.setDraggable(true); container.setVisibility(View.VISIBLE); } else { container.setDraggable(false); container.setVisibility(View.GONE); } } } 	1	0	1	1	0	0
@Override public void onClick(AjaxRequestTarget target) { // do nothing } 	0	0	0	1	1	0
@Override public Object getClientGuiElement(int ID, EntityPlayer player, World world, int x, int y, int z) { switch (ID) { case GuiID.GUI_Buhrimill: return new GuiBuhrimill(player.inventory, (TileBuhrimill) world.getTileEntity(x, y, z));  case GuiID.GUI_JadeBench: return new GuiJadeBench(player.inventory, (TileJadeBench) world.getTileEntity(x, y, z));  case GuiID.GUI_CookingBench: return new GuiCookingBench(player.inventory, (TileCookingBench) world.getTileEntity(x, y, z));  case GuiID.GUI_Sericulture_Farme: return new GuiSericultureFrame(player.inventory, (TileSericultureFrame) world.getTileEntity(x, y, z));  case GuiID.GUI_PotteryTable: return new GuiPotteryTable(player);  case GuiID.GUI_PotteryKiln: return new GuiPotteryKiln(player.inventory, (TilePotteryKiln) world.getTileEntity(x, y, z));  case GuiID.GUI_RedPacket: return new GuiRedPacket(player, player.inventory.getCurrentItem()); } return null; } 	1	0	1	0	1	0
@Override public Object getServerGuiElement(int ID, EntityPlayer player, World world, int x, int y, int z) { switch (ID) { case GuiID.GUI_Buhrimill: return new ContainerBuhrimill(player.inventory, (TileBuhrimill) world.getTileEntity(x, y, z));  case GuiID.GUI_JadeBench: return new ContainerJadeBench(player.inventory, (TileJadeBench) world.getTileEntity(x, y, z));  case GuiID.GUI_CookingBench: return new ContainerCookingBench(player.inventory, (TileCookingBench) world.getTileEntity(x, y, z));  case GuiID.GUI_Sericulture_Farme: return new ContainerSericultureFrame(player.inventory, (TileSericultureFrame) world.getTileEntity(x, y, z));  case GuiID.GUI_PotteryTable: return new ContainerPotteryTable(player);  case GuiID.GUI_PotteryKiln: return new ContainerPotteryKiln(player.inventory, (TilePotteryKiln) world.getTileEntity(x, y, z));  case GuiID.GUI_RedPacket: return new ContainerRedPacket(player, player.inventory.getCurrentItem()); } return null; } 	1	0	1	0	1	0
"@Optional.Method(modid = ""IC2"") private static IElectricItemManager IC2_getManager(ItemStack itemStack) { Item item = itemStack.getItem(); if (item == null) { return null; } if (item instanceof ISpecialElectricItem) { return ((ISpecialElectricItem) item).getManager(itemStack); } if (item instanceof IElectricItem) { return ElectricItem.rawManager; } return ElectricItem.getBackupManager(itemStack); } "	1	0	1	0	1	0
"public Map<String, String> unequipItem(Item item) { double oldDamage = damage; for (EquipmentLocation key : equipment.keySet()) { if (equipment.get(key).equals(item)) { equipment.put(key, null); } } addItemToStorage(item); Map<String, String> result = new HashMap<String, String>(); if (item.containsProperty(""damage"")) { weapon = ""hands""; damage -= item.getProperty(""damage""); double diffDamage = damage - oldDamage; result.put(""damage"", String.valueOf(diffDamage)); } return result; } "	1	1	1	1	1	0
public void initParams(int x, int y) { //        layoutParams = new WindowManager.LayoutParams( //                WindowManager.LayoutParams.WRAP_CONTENT, //                WindowManager.LayoutParams.WRAP_CONTENT, //                WindowManager.LayoutParams.TYPE_TOAST, //                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, //                PixelFormat.TRANSLUCENT //        ); //        layoutParams.width = 100; //        layoutParams.height = 100; //        layoutParams.gravity = Gravity.BOTTOM | Gravity.RIGHT; layoutParams = new LayoutParams(); layoutParams.x = x; layoutParams.y = y - BubbleSizeDelete; if (defaultType == HEAD_TYPE_DELETE) { switchToDelete(); } } 	1	1	1	1	1	0
public boolean deposit(float amount) { if (getState() != State.CLOSED && amount > 0.0f) { balance = balance + amount - 0.50F; if (balance >= 0.0f) { setState(State.OPEN); } } return false; } 	1	0	1	0	1	0
"@Test //	@Ignore public void testCNRS() throws Exception { TimedEventFileReader eventReader = new TimedEventFileReader(TestTrafficManagement.class.getClassLoader().getResource(""simulator_data_incident_short.csv"").getPath(), ""speedd-traffic-in-events"", createProducerConfig(), new TrafficAimsunReadingCsv2Event(SpeeddEventFactory.getInstance())); //EventFileReader eventReader = new EventFileReader(TestTrafficManagement.class.getClassLoader().getResource(""inputCNRS.csv"").getPath(), ""speedd-in-events"", createProducerConfig(), 1000);  streamEventsAndVerifyResults(""speedd-traffic.properties"", ""traffic"", eventReader, new String[]{""Congestion"", ""AverageDensityAndSpeedPerLocation""}, new String[]{});  } "	0	0	0	1	1	0
public Matrix quaternionToMatrix(Quaternion q){ Matrix m = new Matrix(4,4); float[] matrix = q.toMatrix();  for(int i = 0; i < 4; i++){ for(int j = 0; j < 4; j++){ m.set(i,j, matrix[i+j]); } }  return m; } 	1	1	1	1	1	0
"protected void initializeExtensionFunctions() throws XFormsComputeException { String functions = getXFormsAttribute(XFormsConstants.FUNCTIONS); if (functions != null && !functions.equals("""")) { //check for availability of extension functions... StringTokenizer tokenizer = new StringTokenizer(functions); while (tokenizer.hasMoreTokens()) { String qname = tokenizer.nextToken(); String prefix = """"; String localName; if (qname.indexOf("":"") == -1) { localName = qname; } else { prefix = qname.substring(0, qname.indexOf("":"")); localName = qname.substring(qname.indexOf("":"") + 1); String[] functionInfo = {""""}; } String namespaceURI = NamespaceResolver.getNamespaceURI(this.element, prefix); if (namespaceURI == null) namespaceURI = """"; FunctionLibrary functionLibrary = XPathCache.getFgXFormsFunctionLibrary(); if ((functionLibrary.getFunctionSignature(new StructuredQName(prefix, namespaceURI, localName), -1)) != null) { throw new XFormsComputeException(""Function '"" + localName + ""' cannot be found in Namespace: '"" + namespaceURI + ""'"", this.target, null); //                    Map<String, String> errorMsg = new HashMap<String, String>(); //                    errorMsg.put(""error-message"",""XFormsComputeException: Function '"" + localName + ""' cannot be found in Namespace: '"" + namespaceURI + ""'""); // //                    try { //                        container.dispatch(this.target,XFormsEventNames.COMPUTE_EXCEPTION,errorMsg); //                    } catch (XFormsException e) { //                        throw new XFormsComputeException(""XFormsComputeException: Function '"" + localName + ""' cannot be found in Namespace: '"" + namespaceURI + ""'"", this.target, null); //                    } } } }  } "	1	1	1	1	1	0
private Report getReportWithPath(File path) { for (Report r : reports) { if (r.getPath().equals(path)) { return r; } } return null; } 	1	1	1	1	1	0
"@Test public void testEmptyExists() { executionHandler.parse(""main() {}ensure exists() false;""); executionHandler.run(stmtBps, glblBps); assertNull(executionHandler.getAssertionFailureMessage()); } "	0	0	0	1	1	0
"public void execute(JobExecutionContext context) throws JobExecutionException { this.mRecorderID = context.getJobDetail().getDescription(); LOGGER.info(""Fetching Recorder Status for Recorder with ID: "" + this.mRecorderID);  Recorder recorder; try { recorder = DB.getRecorder(""id = '"" + this.mRecorderID + ""'"")[0]; } catch (IndexOutOfBoundsException e) { LOGGER.error(""Could not locate Recorder Record in DB for recorder ID - "" + this.mRecorderID); return; }  Status previousStatus = Status.getByCode(recorder.getStatus()); Status currentStatus = null;  try { currentStatus = Recorders.getRecorderStatus(Recorders.getRecorderIP(this.mRecorderID)); } catch (RuntimeException e) { LOGGER.error(""Problem retrieving recorder status from API - Invalid IP"", e); }  if (currentStatus == null) { LOGGER.error(""Problem retrieving recorder status from API/Recorder""); currentStatus = Status.UNKNOWN; }  LOGGER.debug(String.format(""Recorder Status is \""%s\"""", currentStatus)); recorder.setStatus(currentStatus); DB.updateRecorder(recorder); LOGGER.info(""Finished Updating Recorder Status for Recorder with ID: "" + this.mRecorderID);  try { if (previousStatus.okay() && currentStatus.inAlarm()) { LOGGER.warn(""Recorder "" + mRecorderID + ""has entered ALARM state!""); Hook.fire(Hook.RECORDER_ALARM_ACTIVATE, new Recorder(mRecorderID, currentStatus)); } else if (previousStatus.inAlarm() && currentStatus.okay()) { LOGGER.info(""Recorder"" + mRecorderID + "" has cleared ALARM state and is now OKAY.""); Hook.fire(Hook.RECORDER_ALARM_CLEAR, new Recorder(mRecorderID, currentStatus)); } } catch (IOException e) { LOGGER.error(""Problem firing Alarm Status Update Hook"", e); }  try { Hook.fire(Hook.RECORDER_STATUS_UPDATE, DB.getRecorder(""id='"" + mRecorderID + ""'"")); } catch (IOException e) { LOGGER.error(""Problem firing Recorder Status Update Hook"", e); } } "	0	0	0	1	1	0
@Override public Certificate generateCredential(CertificateParameters params) { try{ KeyPair keyPair = keyGenerator.generateKeyPair(params.getKeyLength());  if (params.isSelfSigned()) { X509Certificate cert = signedCertificateGenerator.getSelfSigned(keyPair, params); String certPem = CertificateFormatter.pemOf(cert); String privatePem = CertificateFormatter.pemOf(keyPair.getPrivate()); return new Certificate(null, certPem, privatePem, null); } else { Certificate ca = certificateAuthorityService.findMostRecent(params.getCaName());  String caCertificate = ca.getCertificate();  X509Certificate cert = signedCertificateGenerator .getSignedByIssuer(keyPair, params, ca);  String certPem = CertificateFormatter.pemOf(cert); String privatePem = CertificateFormatter.pemOf(keyPair.getPrivate()); return new Certificate(caCertificate, certPem, privatePem, ca.getCaName()); } } catch (Exception e) { throw new RuntimeException(e); } } 	1	0	1	0	1	0
"private void executeFunction(Game game, int id){  int otherId;  if (id == 0){otherId = 1;}else{otherId = 0;}  if(id == 1){ System.out.println(""Executing attack for player "" + id + "" ""+ this.command); }  switch(this.command){ case APPROACH: game.approach(id, otherId); break; case ATTACK: game.attack(id); break; case HEAL: game.heal(id, 20); break; case EVADE: game.evade(id, otherId); case DO_NOTHING: game.doNothing(id); break; case DEFEND: game.defend(id); break; default: game.doNothing(id); break; } } "	1	0	1	0	1	0
"public void init(ServletContext context) { LOGGER.info(""*** WebProcessingService initializing... ***""); WPSConfig conf = WPSConfig.getInstance();  // this is important to set the lon lat support for correct CRS transformation. // TODO: Might be changed to an additional configuration parameter. System.setProperty(""org.geotools.referencing.forceXY"", ""true"");  LOGGER.info(""WebProcessingService initializing..."");  try { if (conf == null) { LOGGER.error(""Initialization failed! Please look at the properties file!""); return; } } catch (RuntimeException e) { LOGGER.error(""Initialization failed! Please look at the properties file!"", e); return; } LOGGER.info(""Initialization of wps properties successful!\n\t\tWPSConfig: {}"", conf);  applicationBaseDir = context.getRealPath(""""); LOGGER.debug(""Application base dir is {}"", applicationBaseDir);  Parser[] parsers = WPSConfig.getInstance().getActiveRegisteredParser(); ParserFactory.initialize(parsers); LOGGER.info(""Initialized {}"", ParserFactory.getInstance());  Generator[] generators = WPSConfig.getInstance().getActiveRegisteredGenerator(); GeneratorFactory.initialize(generators); LOGGER.info(""Initialized {}"", GeneratorFactory.getInstance());  RepositoryManager repoManager = RepositoryManager.getInstance(); LOGGER.info(""Initialized {}"", repoManager);  IDatabase database = DatabaseFactory.getDatabase(); LOGGER.info(""Initialized {}"", database);  try { String capsConfigPath = getApplicationBaseDir() + File.separator + CONFIG_FILE_DIR + File.separator + CAPABILITES_SKELETON_NAME; CapabilitiesDocument capsDoc = CapabilitiesConfiguration.getInstance(capsConfigPath); LOGGER.debug(""Initialized capabilities document:\n{}"", capsDoc); } catch (IOException | XmlException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); }  LOGGER.info(""Service base url is {} | Service endpoint is {} | Used config file is {}"", conf.getServiceBaseUrl(), conf.getServiceEndpoint(), WPSConfig.getConfigPath());  // FvK: added Property Change Listener support // creates listener and register it to the wpsConfig instance. // it will listen to changes of the wpsCapabilities WPSConfig.getInstance().addPropertyChangeListener(WPSConfig.WPSCAPABILITIES_SKELETON_PROPERTY_EVENT_NAME, new PropertyChangeListener() { @Override public void propertyChange(final PropertyChangeEvent propertyChangeEvent) { LOGGER.info(this.getClass().getName() + "": Received Property Change Event: "" + propertyChangeEvent.getPropertyName()); try { CapabilitiesConfiguration.reloadSkeleton(); } catch (IOException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); } catch (XmlException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); } } });  // FvK: added Property Change Listener support // creates listener and register it to the wpsConfig instance. // it will listen to changes of the wpsConfiguration WPSConfig.getInstance().addPropertyChangeListener(WPSConfig.WPSCONFIG_PROPERTY_EVENT_NAME, new PropertyChangeListener() { public void propertyChange(final PropertyChangeEvent propertyChangeEvent) { LOGGER.info(this.getClass().getName() + "": Received Property Change Event: "" + propertyChangeEvent.getPropertyName()); try { CapabilitiesConfiguration.reloadSkeleton(); } catch (IOException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); } catch (XmlException e) { LOGGER.error(""error while initializing capabilitiesConfiguration"", e); } } }); LOGGER.info(""*** WPS up and running! ***""); } "	0	0	0	1	1	0
"@Override protected String escape(String content) { return content.replace(""\t"", """").replace(""\n"", ""\\n"").replace(""\"""", ""'""); } "	0	0	0	1	1	0
static String input(Object object) { return ChatColor.WHITE + object.toString() + ChatColor.GRAY; } 	0	0	0	1	1	0
"@Override public OIndexCursor executeIndexQuery(OCommandContext iContext, OIndex<?> index, List<Object> keyParams, boolean ascSortOrder) { OIndexCursor cursor; Object key; key = keyParams.get(0); Object indexParam = key; if (key instanceof Map) { ((Map) key).put(SpatialQueryBuilderAbstract.GEO_FILTER, SpatialQueryBuilderOverlap.NAME); } else if (key instanceof ODocument) { Map<String, Object> newKey = new HashMap<>(); newKey.put(SpatialQueryBuilderAbstract.GEO_FILTER, SpatialQueryBuilderOverlap.NAME); newKey.put(""shape"", key); indexParam = newKey; } Object indexResult = index.get(indexParam); if (indexResult == null || indexResult instanceof OIdentifiable) cursor = new OIndexCursorSingleValue((OIdentifiable) indexResult, new OSpatialCompositeKey(keyParams)); else cursor = new OIndexCursorCollectionValue(((Collection<OIdentifiable>) indexResult).iterator(), new OSpatialCompositeKey( keyParams));  return cursor; } "	1	0	1	0	1	0
"@Test public void testVmSnapshotDetails() { VMSnapshotDetailsVO detailsVO = new VMSnapshotDetailsVO(1L, ""test"", ""foo"", display); vmsnapshotDetailsDao.persist(detailsVO); Map<String, String> details = vmsnapshotDetailsDao.listDetailsKeyPairs(1L); Assert.assertTrue(details.containsKey(""test"")); } "	0	0	0	1	1	0
public void setView (final String view) { this.view = view.toLowerCase(Locale.getDefault()); } 	1	0	1	0	1	0
@Override protected void onDestroy() { SL.get(this, GlobalHandlerService.class).removeListener(this); super.onStop(); } 	1	1	1	1	1	0
public void shutdown() { server.stop(); for (DirectServiceInfo service : services.values()) { service.close(); } } 	1	0	1	0	1	0
@Test public void testCreateTables(){ store.createTSDRTables(); Mockito.verify(session,Mockito.atLeast(3)).execute(Mockito.anyString()); } 	1	1	1	1	1	0
@Override public void testRunFinished(Result result) throws Exception { this.testsFinished = true; completedTestResults = inProgressTestResults; } 	1	0	1	0	1	0
"private void emitPlace(int level, Place p) throws GedcomWriterException { emitTagWithOptionalValue(level, ""PLAC"", p.placeName); emitTagIfValueNotNull(level + 1, ""FORM"", p.placeFormat); emitSourceCitations(level + 1, p.citations); emitNotes(level + 1, p.notes); for (NameVariation nv : p.romanized) { if (g55()) { throw new GedcomWriterVersionDataMismatchException(""GEDCOM version is 5.5, but romanized variation was specified on place "" + p.placeName + "", which is only allowed in GEDCOM 5.5.1""); } emitTagWithRequiredValue(level + 1, ""ROMN"", nv.variation); emitTagIfValueNotNull(level + 2, ""TYPE"", nv.variationType); } for (NameVariation nv : p.phonetic) { if (g55()) { throw new GedcomWriterVersionDataMismatchException(""GEDCOM version is 5.5, but phonetic variation was specified on place "" + p.placeName + "", which is only allowed in GEDCOM 5.5.1""); } emitTagWithRequiredValue(level + 1, ""FONE"", nv.variation); emitTagIfValueNotNull(level + 2, ""TYPE"", nv.variationType); } if (p.latitude != null || p.longitude != null) { emitTag(level + 1, ""MAP""); emitTagWithRequiredValue(level + 2, ""LATI"", p.latitude); emitTagWithRequiredValue(level + 2, ""LONG"", p.longitude); if (g55()) { throw new GedcomWriterVersionDataMismatchException(""GEDCOM version is 5.5, but map coordinates were specified on place "" + p.placeName + "", which is only allowed in GEDCOM 5.5.1""); } } emitCustomTags(p.customTags); } "	1	0	1	0	1	0
private void emitIndividualAttributes(int level, List<IndividualAttribute> attributes) throws GedcomWriterException { for (IndividualAttribute a : attributes) { emitTagWithOptionalValueAndCustomSubtags(level, a.type.tag, a.description); emitEventDetail(level + 1, a); emitAddress(level + 1, a.address); emitPhoneNumbers(level + 1, a.phoneNumbers); emitWwwUrls(level + 1, a.wwwUrls); emitFaxNumbers(level + 1, a.faxNumbers); emitEmails(level + 1, a.emails); emitCustomTags(a.customTags); } } 	1	1	1	1	1	0
boolean handlesPop(Screen screen) { ScreenPopListener popListener = popListenerMap.get(screen); boolean handlesPop = popListener != null && popListener.onScreenPop(screen); if (handlesPop) { popListenerMap.remove(screen); } return handlesPop; } 	1	1	1	1	1	0
@Override public void refreshPolicyChains() { LinkedList<PolicyChain> newChains = new LinkedList<PolicyChain>(); for (RawPolicyChain rawChain : _currentRawChains) { _currentChains.add(generatePolicyChain(rawChain)); } if (newChains.equals(_currentChains)) return; _currentChains = newChains; _dpiController.updatePolicyChains(_currentChains); } 	1	0	1	0	1	0
@Override public void updateEntity() { super.updateEntity(); if (reloadRotation) { setRotation(ForgeDirection.getOrientation(worldObj.getBlockMetadata(xCoord, yCoord, zCoord))); reloadRotation = false; } ItemStack stack = inventory.getStackInSlot(0); if (stack == null) return; TileEntity outputTile = getTileFromDirection(getExitSide()); if (outputTile == null || !(outputTile instanceof IInjectable)) return; IInjectable injectable = (IInjectable) outputTile; if (!injectable.canInjectItems(getExitSide().getOpposite())) return; EnumColor color = null; for (int i = 1; i < inventory.getSizeInventory() - 1; i++) { if (areStacksEqual(inventory.getStackInSlot(i), stack)) { color = EnumColor.values()[15 - colors[1 + (i - 1) / 6]]; break; } } if (color == null) color = EnumColor.values()[15 - colors[0]]; injectable.injectItem(stack, true, getExitSide().getOpposite(), color); setInventorySlotContents(0, null); markDirty(); } 	1	1	1	1	1	0
"public Patient userDetailEntityToPatient(UserDetailEntity userDetailEntity) { Patient patient = modelMapper.map(userDetailEntity, Patient.class); patient.setDateOfBirth(""""); if(userDetailEntity.getDataOfBirth() != null) { patient.setDateOfBirth(new SimpleDateFormat(""dd-MM-yyyy"").format(userDetailEntity.getDataOfBirth())); } patient.setImagePath(""patient/""+patient.getId()+""/image""); return patient; } "	0	0	0	1	1	0
public int copyView(int viewId, String newName) throws ViewMetadataNotFoundException, ViewAlreadyExistsException, UnauthorizedAccessException { final DataDocument originalView = getViewMetadataWithoutAccessCheck(viewId); if (!securityFacade.checkForRead(originalView, getCurrentUser())) { return createView(newName, originalView.getString(LumeerConst.View.VIEW_TYPE_KEY), originalView.getDataDocument(LumeerConst.View.VIEW_CONFIGURATION_KEY)); } else { throw new UnauthorizedAccessException(); } } 	1	1	1	1	1	0
"public static void deleteReview(Review r){ Map<String, Object> m = new HashMap<String,Object>(); m.put(""user"", r.getUser()); m.put(""location"", new ParseGeoPoint(r.getLocation().getCoordinates().getLat(),r.getLocation().getCoordinates().getLng()));  GetCallback<ParseObject> p = new GetCallback<ParseObject>() { @Override public void done(ParseObject arg0, ParseException arg1) { if(arg1==null){ DatabaseManager.deleteById(""Review"",(arg0.getObjectId() + """")); Map<String, Object> m = new HashMap<String,Object>(); m.put(""user"", arg0.getString(""user"")); m.put(""location"",arg0.getParseGeoPoint(""location"")); m.put(""rating"",arg0.getInt(""rating"")); m.put(""comment"",arg0.getString(""comment"")); m.put(""pined"",arg0.getInt(""pined"")); DatabaseManager.putValue(""HiddenReview"",m,new SaveCallback() {  @Override public void done(ParseException arg0) { // do nothing  } }); } //arg1.printStackTrace(); } }; DatabaseManager.getObjectByFields(""Review"",m,p); } "	1	0	1	0	1	0
"@Override public DeploymentResult operate(List priorOutputs) { updateTaskStatus(""Initializing Create Amazon ECS Server Group Operation..."");  TaskDefinition taskDefinition = registerTaskDefinition(); Service service = createService(taskDefinition); createAutoScalingGroup(service);  return getDeploymentResult(); } "	1	0	1	0	1	0
"@DebugLog @Override public void onServiceItemClick(int position) { fragmentManager.beginTransaction().addToBackStack(""characteristic"").replace(R.id.detail_fragment_view, characteristicListFragment).commit(); bluetoothGattCharacteristics = bluetoothGattServices.get(position).getCharacteristics(); onCharacteristicReady(); } "	0	0	0	1	1	0
@Bean @Scope(value = ConfigurableBeanFactory.SCOPE_SINGLETON) public FirmwareLocation firmwareLocation() { return new FirmwareLocation(FIRMWARE_DOMAIN, FIRMWARE_PATH, FIRMWARE_FILE_EXTENSION); } 	1	0	1	0	1	0
"private void decorateFrame() { setUIFont (new javax.swing.plaf.FontUIResource(Palette.UI_FONT_DEFAULT));  setTitle(""TASMA""); setIconImage(createImage(""res/logo.png"", ""icon"")); setAlwaysOnTop(true); // must use HIDE on CLOSE for the TrayIcon to work properly setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE); updateWindowHeight();  // sets the window to center of the screen // then move it up a little setLocationRelativeTo(null); this.setLocation(this.getLocation().x, (int)(0.5 * this.getLocation().y)); } "	0	0	0	1	1	0
private boolean checkCredentials(Users user, String password) { int hash = generateHash(password); if (user.getPassword() == hash) { return true; }  return false; } 	1	0	1	0	1	0
"private static String strip(String s) { return s.toLowerCase().replace(""?"", """").replace(""."", """").replace(""!"", """").replace("","", """").replace(""_"", """").replace(""~"", """").replace(""`"", """").replace(""'"", """").replace(""\"""", """").replace(""\"""", """").replace(""\\"", """").replace("":"", """").replace("";"", """").replace(""the"", "" "").replace(""teh"", "" "").replace(""how do"", ""how can"").replace(""re"", """").replace("" a "", "" "").replace(""is"", """").replace(""has"", """").replace(""get to"", ""go to"").replaceAll(""\\Bs\\b"", """").replaceAll("" {2}?"", """").trim(); } "	0	0	0	1	1	0
"public List<ResourceGroupEntity> loadGroupsForTypeNameExcludeSelected(String resourceTypeName, List<Integer> excludeGroups) {  List<ResourceGroupEntity> result = new ArrayList<ResourceGroupEntity>();  CriteriaBuilder cb = entityManager.getCriteriaBuilder(); CriteriaQuery<ResourceGroupEntity> q = cb.createQuery(ResourceGroupEntity.class); Root<ResourceGroupEntity> r = q.from(ResourceGroupEntity.class); Join<ResourceGroupEntity, ResourceEntity> resources = r.join(""resources""); r.fetch(""resources"", JoinType.LEFT); Predicate typeNamePred = cb.equal(resources.get(""resourceType"").get(""name""), resourceTypeName);  if (excludeGroups != null && !excludeGroups.isEmpty()) { Predicate excludePred = r.get(""id"").in(excludeGroups); q.where(cb.and(typeNamePred, cb.not(excludePred))); } else { q.where(typeNamePred); }  q.distinct(true);  result = entityManager.createQuery(q).getResultList();  return result; } "	1	0	1	0	1	0
@Override public boolean deleteSurroundingText(int beforeLength, int afterLength) { final boolean result = super.deleteSurroundingText(beforeLength, afterLength); updateEditingState(); return result; } 	1	0	1	0	1	0
@Override public boolean setSelection(int start, int end) { final boolean result = super.setSelection(start, end); updateEditingState(); return result; } 	1	0	1	0	1	0
final void destroy() { mIsBeingDestroyed = true;  for (ChildControllerTransaction child : mChildControllers) { child.controller.destroy(); }  if (!mAttached) { removeViewReference(); } } 	1	0	1	0	1	0
public static void deviceUpdateLogic(IDeviceCreateRequest request, Device target) throws SiteWhereException { // Can not update the hardware id on a device. if ((request.getHardwareId() != null) && (!request.getHardwareId().equals(target.getHardwareId()))) { throw new SiteWhereSystemException(ErrorCode.DeviceHardwareIdCanNotBeChanged, ErrorLevel.ERROR, HttpServletResponse.SC_BAD_REQUEST); } if (request.getSiteToken() != null) { // Can not change the site for an assigned device. if (target.getAssignmentToken() != null) { if (!target.getSiteToken().equals(request.getSiteToken())) { throw new SiteWhereSystemException(ErrorCode.DeviceSiteCanNotBeChangedIfAssigned, ErrorLevel.ERROR, HttpServletResponse.SC_BAD_REQUEST); } } target.setSiteToken(request.getSiteToken()); } if (request.getSpecificationToken() != null) { target.setSpecificationToken(request.getSpecificationToken()); } if (request.isRemoveParentHardwareId()) { target.setParentHardwareId(null); } if (request.getParentHardwareId() != null) { target.setParentHardwareId(request.getParentHardwareId()); } if (request.getDeviceElementMappings() != null) { List<DeviceElementMapping> mappings = new ArrayList<DeviceElementMapping>(); for (IDeviceElementMapping mapping : request.getDeviceElementMappings()) { mappings.add(DeviceElementMapping.copy(mapping)); } target.setDeviceElementMappings(mappings); } if (request.getComments() != null) { target.setComments(request.getComments()); } if (request.getStatus() != null) { target.setStatus(request.getStatus()); } if ((request.getMetadata() != null) && (request.getMetadata().size() > 0)) { target.getMetadata().clear(); MetadataProvider.copy(request, target); } SiteWherePersistence.setUpdatedEntityMetadata(target); } 	1	0	1	0	1	0
private Set<Url> transformTwitterEntitiesUrls(List<UrlEntity> urls) { Set<Url> myUrls = new LinkedHashSet<Url>(); for (UrlEntity url : urls) { String display = url.getDisplayUrl(); String expanded = url.getExpandedUrl(); String urlStr = url.getUrl(); int[] indices = url.getIndices(); Url myUrlEntity = new Url(display, expanded, urlStr, indices); myUrls.add(myUrlEntity); } return myUrls; } 	1	0	1	0	1	0
@Override public void init(final ServletConfig config) throws ServletException { this.servletConfig = config;  } 	1	0	1	0	1	0
@Override public void draw(@NonNull Canvas canvas) { canvas.drawRoundRect(bounds, radiusX, radiusY, paint); } 	1	0	1	0	1	0
public Set<FPlayer> getFPlayers() { // return a shallow copy of the FPlayer list, to prevent tampering and concurrency issues Set<FPlayer> ret = new HashSet(fplayers); return ret; } 	1	0	1	0	1	0
"public static void afficheMenu() { if(language == 1) { System.out.println(""#### PROFIL -"" + name + "" ####""); System.out.println(playerOne.toString() + ""\n""); System.out.println(""1. Tableau des scores general""); System.out.println(""2. Score Pendu""); System.out.println(""3. Score PlusMoins""); System.out.println(""4. Score MasterMind""); System.out.println(""5. Configuration""); System.out.println(""6. Changer d'utilisateur""); System.out.println(""\n7. Quitter""); }else if(language == 2) { System.out.println(""#### PROFILE -"" + name + "" ####""); System.out.println(playerOne.toString() + ""\n""); System.out.println(""1. General HighScore""); System.out.println(""2. Hangman Score""); System.out.println(""3. HighLow Score""); System.out.println(""4. MasterMind Score""); System.out.println(""6. Change user""); System.out.println(""\n7. Quit""); } System.out.println(); } "	0	0	0	1	1	0
public static NativeStore<Void> lazyNativeStore(long capacity) { return of(capacity, false); } 	1	0	1	0	1	0
"public static String convert2KAST_Type(ITypeBinding jType) { String type = jType.toString(); if (jType.isPrimitive()) { type = type.equals(""boolean"") ? ""bool"" : type; } else { type = ""class ."" + type; } return type; } "	1	0	1	0	1	0
@Override public Timestamp getTimestamp(String columnName) throws SQLException { int index = findColumn(columnName) +1; return getTimestamp(index); } 	1	0	1	0	1	0
@Override public View getView(int position, View convertView, ViewGroup parent) { int viewType = getItemViewType(position); View v = null; if (viewType == VIEW_TYPE_NAV) { v = getNavView((String) getItem(position), position, convertView, parent); } else if (viewType == VIEW_TYPE_SECTION_DIVIDER) { v = getSectionDividerView(convertView, parent); } else { v = getFeedView(position - getSubscriptionOffset(), convertView, parent); } if (v != null && viewType != VIEW_TYPE_SECTION_DIVIDER) { TextView txtvTitle = (TextView) v.findViewById(R.id.txtvTitle); if (position == itemAccess.getSelectedItemIndex()) { txtvTitle.setTypeface(null, Typeface.BOLD); } else { txtvTitle.setTypeface(null, Typeface.NORMAL); } } return v; } 	1	0	1	0	1	0
"@Test public void testTriggersFired() throws Exception {  long baseFireTime = DateBuilder.newDate().build().getTime();  JobDetail newJob = JobBuilder.newJob(NoOpJob.class).withIdentity(""job1"", ""testTriggersFired"").build(); jobStore.storeJob(newJob, false);  OperableTrigger trigger1 = buildAndComputeTrigger(""triggerFired1"", ""triggerFiredGroup"", newJob, baseFireTime + 100, baseFireTime + 100);  jobStore.storeTrigger(trigger1, false);  long firstFireTime = new Date(trigger1.getNextFireTime().getTime()).getTime();  List<OperableTrigger> acquiredTriggers = jobStore.acquireNextTriggers(firstFireTime + 500, 1, 0L); assertEquals(1, acquiredTriggers.size());  List<TriggerFiredResult> triggerFired = jobStore.triggersFired(acquiredTriggers); assertEquals(triggerFired.size(), 1);  assertTrue(jobStore.checkExists(trigger1.getKey())); assertEquals(jobStore.getTriggerState(trigger1.getKey()), Trigger.TriggerState.NORMAL); jobStore.removeTrigger(trigger1.getKey()); } "	0	0	0	1	1	0
@Override public void memberAttributeChanged(MemberAttributeEvent memberAttributeEvent) { if (!endpoint.isAlive()) { return; }  MemberImpl member = (MemberImpl) memberAttributeEvent.getMember(); String uuid = member.getUuid(); MemberAttributeOperationType op = memberAttributeEvent.getOperationType(); String key = memberAttributeEvent.getKey(); Object value = memberAttributeEvent.getValue(); MemberAttributeChange memberAttributeChange = new MemberAttributeChange(uuid, op, key, value); ClientMessage eventMessage = MemberAttributeChangeResultParameters.encode(member, memberAttributeChange); sendClientMessage(endpoint.getUuid(), eventMessage); } 	1	0	1	0	1	0
"@Test public void testExecute_WhenSDNReturnsNullNetworkElement_ThrowsVmidcException() throws Exception { // Arrange. CreateK8sLabelPodTask task = this.factoryTask.create(NETWORK_ELEMENT_NOT_FOUND_K8S_POD, NETWORK_ELEMENT_NOT_FOUND_POD_SGM_LABEL, this.apiFactoryServiceMock); registerNetworkElement(NETWORK_ELEMENT_NOT_FOUND_POD_SGM_LABEL.getSecurityGroupMembers().iterator().next(), null, NETWORK_ELEMENT_NOT_FOUND_K8S_POD); this.exception.expect(VmidcException.class); this.exception.expectMessage(""The SDN controller did not return a network element for the device"");  // Act. task.execute(); } "	1	0	1	0	1	0
"private void validateIndex (int index) { if (index < 0 || index > Constants.NUMBER_OF_CARDS-1) { throw new IllegalStateException(""Tried to use an out of range index in a hand.""); } } "	0	0	0	1	1	0
"public Pattern getReleaseGroupPattern(boolean strict) throws Exception { // match 1..N group patterns (e.g. GROUP[INDEX]) String group = ""((?<!\\p{Alnum})"" + or(releaseGroup.get()) + ""(?!\\p{Alnum})[\\p{Punct}]?)+"";  // group pattern at beginning or ending of the string String[] groupHeadTail = { ""(?<=^[\\P{Alnum}]*)"" + group, group + ""(?=[\\P{Alnum}]*$)"" };  return compile(or(groupHeadTail), strict ? 0 : CASE_INSENSITIVE); } "	0	0	0	1	1	0
"public static String durationToFormattedTime(double seconds) { return String.format(IbikeApplication.getString(""hour_minute_format""), (int)(seconds/60/60), (int)(seconds % 60)); } "	0	0	0	1	1	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);  mFirebaseLogger = new FirebaseLogger(FirebaseAnalytics.getInstance(this));  Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar);  bindService(new Intent(this, CalculateService.class), serviceConnection, BIND_AUTO_CREATE);  RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler);  if (recyclerView.getAdapter() == null) { mAdapter = new SwipeCardAdapter(this); mAdapter.setOnItemClickListener(mOnItemClickListener); mAdapter.setOnRightButtonClickListener(mOnRightButtonClickListener); mAdapter.setOnLeftButtonClickListener(mOnLeftButtonClickListener); recyclerView.setAdapter(mAdapter); recyclerView.setItemAnimator(new ItemAnimator()); new PatternLoader(this, mAdapter); }  AdView adView = (AdView) findViewById(R.id.adView); AdRequest.Builder adRequestBuilder = new AdRequest.Builder(); if (BuildConfig.DEBUG) { adRequestBuilder.addTestDevice(""C39E64851CA596B020F5A5C95550CBDA""); } AdRequest adRequest = adRequestBuilder.build(); adView.loadAd(adRequest);  onNewIntent(getIntent()); } "	1	0	1	0	1	0
"private boolean setTimer() { if (edtTimerValue.getText().toString().trim().equals("""")) { new SweetAlertDialog(mContext, SweetAlertDialog.WARNING_TYPE) .setTitleText(""Notice"") .setContentText(""Please Enter a Time"") .setConfirmText(""OK"") .show(); return false; } else if (Integer.parseInt(edtTimerValue.getText().toString().trim()) < 5 ){ new SweetAlertDialog(mContext, SweetAlertDialog.WARNING_TYPE) .setTitleText(""Notice"") .setContentText(""Please Make Sure Time Is Longer Than 5 Min."") .setConfirmText(""OK"") .show(); return false; } else if (Integer.parseInt(edtTimerValue.getText().toString().trim()) > 60) { new SweetAlertDialog(mContext, SweetAlertDialog.WARNING_TYPE) .setTitleText(""Notice"") .setContentText(""Please Make Sure Time Is Shorter Than 30 Min"") .setConfirmText(""OK"") .show(); return false; } else { totalTimeCountInMilliseconds = Integer.parseInt(edtTimerValue.getText().toString().trim()) * 1000; cusTime = edtTimerValue.getText().toString().trim(); return true; } } "	0	1	0	1	1	0
"@Override public void success(FHResponse fhResponse) { Log.d(TAG, ""cloudCall - success""); button.setEnabled(true); response.setText(fhResponse.getJson().getString(""msg"")); } "	0	1	0	1	1	0
"@POST @Consumes(MediaType.APPLICATION_XML) @Produces({ MediaType.APPLICATION_XML, MediaType.TEXT_XML }) public Response createServiceInstance(@Context UriInfo uriInfo, String xml) {  log.debug(""Create a instance of CSAR = \""{}\"" Service Template = \""{}\"""", csarId, serviceTemplateID);  IInstanceDataService service = InstanceDataServiceHandler.getInstanceDataService(); try {  ServiceInstance createdServiceInstance = service.createServiceInstance(csarId, serviceTemplateID);  // create xlink with the link to the newly created serviceInstance, // the link text is the internal serviceInstanceID  String corr = xml.substring(xml.indexOf("">"") + 1, xml.indexOf(""</""));  int serviceTemplateInstanceId = createdServiceInstance.getDBId(); String instanceURL = createdServiceInstance.getServiceInstanceID().toString(); log.debug(corr + "" : "" + corr + "" - "" + instanceURL);  // correlate true Service Template instance id with temporary one { BuildCorrelationToInstanceMapping.instance.correlateCorrelationIdToServiceTemplateInstanceId(corr, serviceTemplateInstanceId); PlanInvocationEngineHandler.planInvocationEngine.correctCorrelationToServiceTemplateInstanceIdMapping(csarId, serviceTemplateID, corr, serviceTemplateInstanceId); }  SimpleXLink response = new SimpleXLink(uriInfo.getAbsolutePath().toString() + ""/"" + serviceTemplateInstanceId, ""simple"");  log.debug(""Returning following link: "" + response.getHref()); return Response.ok(response).build(); } catch (Exception e) { e.printStackTrace(); throw new GenericRestException(Status.INTERNAL_SERVER_ERROR, e.getMessage()); }  } "	0	0	0	1	0	0
"@Override public User checkUser(String login, String password) { LdapQuery query = query().where(""objectClass"").is(""person"").and(""uid"").is(""login"");  try { ldapTemplate.authenticate(query, password); return userService.findOrCreateUser(login, Role.PUBLIC, Role.WRITER); } catch (RuntimeException e) { logger.error(""Error on login"", e); throw new BadCredentialsException(); } } "	0	0	0	1	0	0
"@Override protected void updateQuerysForDialect() { queryDeleteOldBackpacks = ""DELETE FROM `{TableBackpacks}` WHERE `{FieldBPLastUpdate}` + INTERVAL {VarMaxAge} day < NOW()""; queryUpdateBp = queryUpdateBp.replaceAll(""\\{NOW\\}"", ""NOW()""); } "	0	0	0	1	0	0
"public boolean saveInfo(  ArrayList<JSONObject> jsonObjectList ) { for (int i=0;  i< jsonObjectList.size(); i++ ) { JSONObject jsonObject = jsonObjectList.get(i); Iterator<String> iter = jsonObject.keys(); //go through each JSON object while (iter.hasNext()) { String key = iter.next(); //if the server responds with error, break and //TODO, what should be done in the case of an error if ( key.equals(""err"")){ return false; } if( Arrays.asList(this.playerInfo.fieldNames).contains(key)) { try { Object value = jsonObject.get(key); //                        Log.i( ""the key is "", key ); //                        Log.i( "" the value is "", value.toString() ); //store the value Field field = PlayerInfo.class.getField( key ); field.set(this.playerInfo, value ); } catch (Exception e) { // Something went wrong! e.printStackTrace(); return false; } } else { Log.i(""bad name"", "" here 1""); return false; } } } saveToDrive(); return true; } "	0	0	0	1	0	0
"protected String getLastConsoleAlertMessage() { String msg; LogEntries logEntries = getDriver().manage().logs().get(LogType.BROWSER); List<LogEntry> l = logEntries.getAll(); for (int i = l.size() - 1; i >= 0; i--) { if (l.get(i).getMessage().contains(ALERT_KEY)) { msg = l.get(i).getMessage(); return msg.substring(msg.indexOf(""\"""") + 1, msg.length() - 1).replace(ALERT_KEY, """"); } } return null; } "	0	1	0	1	1	0
"@Test public void T01JSONListIfcTypes() throws Exception { try { String ifcType = ""ifcbuildingstorey""; String model_guid =  loadTestModel(TEST_MODEL_NAME); E3TestArgs ta = new E3TestArgs(""GET"",BASE_URL); ta.setModelGuid(model_guid); ta.setIfcType(ifcType ,null); log(E3Logger.DEBUG,""looking for '"" + ifcType + ""' in model with guid:"" + model_guid); String result = this.runIfcApiService(ta); //log(E3Logger.DEBUG,result); JSONArray jresult = new JSONArray(result); assertTrue(""Wrong number of stories"",jresult.length() == 3); String guid = ""none""; for(int i0 = 0; i0 < jresult.length(); i0++) { JSONObject md = jresult.getJSONObject(i0); String url = md.getString(""url""); assertTrue(""Illegal type"",url.contains(""/ifcbuildingstorey/"")); guid = md.getString(E3IfcApiResourcePath.MR_IFCGUID); } ta.setIfcType(""ifcbuildingstorey"",guid); jresult = new JSONArray(this.runIfcApiService(ta)); assertTrue(""Didn't find singlestorey"",jresult.length() == 1); log(E3Logger.DEBUG,""--- response:"" + jresult.toString()); log(E3Logger.INFO,""..."" + getQualifiedTestName() + "" completed successfully""); } catch(Exception ex)	{ log(E3Logger.ERROR,""..."" + getQualifiedTestName() + "" completed with error(s):"" + ex.toString()); testlib.writeTrace(ex.toString()); throw ex; } } "	0	0	0	1	0	0
"@Override public void run() { Document doc = null; if (this.webpage.getFailureCount() > 0) { // give this page a rest for a bit try { TimeUnit.SECONDS.sleep(this.webpage.getFailureCount()); } catch (InterruptedException e) { e.printStackTrace(); } } try { doc = Jsoup.connect(this.webpage.getUrl().toString()).get(); if (!this.shouldCrawlPage()) { this.webpage.setStatus(200); this.webpage.unlock(); return; } //System.out.println(""\n"" + id + "": Crawling "" + this.name); Elements anchors = doc.select(""a""); ArrayList<URL> unseenLinks = filterUnseen(anchors); //System.out.println(""\n"" + id + "": Found "" + unseenLinks.size() + "" new links on page""); for (URL u : unseenLinks) { if (u != null && !this.pages.containsKey(u)) { if (Main.depth_limit > this.webpage.getDepth()) { WebPage w = new WebPage(this.webpage, u); w.setDepth(this.webpage.getDepth() + 1); this.pages.put(u, w); } } } this.webpage.setStatus(200); } catch (UnsupportedMimeTypeException e) { this.webpage.setStatus(200); } catch (HttpStatusException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(e.getStatusCode()); this.webpage.setFailReason(e.toString()); System.out.println(e.getMessage()); } catch (SocketException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(-1); this.webpage.setFailReason(e.toString()); System.out.println(e.getMessage()); } catch (IOException e) { this.webpage.failureCountIncrement(); this.webpage.setStatus(-1); this.webpage.setFailReason(e.toString()); System.out.println(e.getMessage()); } System.out.println(webpage.toString()); this.webpage.unlock(); } "	0	1	0	1	1	0
"public synchronized void connect(final String address) { if (!this.bluetoothGatt.containsKey(address)) { Log.d(TAG, ""connect() - (new link) to device "" + address); mDevice = BluetoothAdapter.getDefaultAdapter().getRemoteDevice(address); this.bluetoothGatt.put(address, mDevice.connectGatt(this, true, new CustomBluetoothGattCallback(address))); } else { Log.d(TAG, ""connect() - discovering services for "" + address); this.bluetoothGatt.get(address).discoverServices(); } } "	0	0	0	1	0	0
"private static void startGame() { StdDraw.setCanvasSize(1200, 900); StdDraw.enableDoubleBuffering(); StdDraw.setXscale(0, 1200); StdDraw.setYscale(0, 900); ClientEngine ce = new ClientEngine(10000, 10000, 450); ce.setPlayer(new Player(""player 1"")); StdDraw.addEngine(ce); } "	0	1	0	1	1	0
"@ApiOperation(value = ""获取用户信息"", notes = ""获取用户信息"") @RequestMapping(value = ""/getUserBaseInfo"", method = {RequestMethod.GET}) @ResponseBody public ResponseData<User> getUserInfo( @ApiParam(""用户ID"") @RequestParam(""userId"") int userId, HttpServletRequest request, HttpServletResponse response) throws Exception { ResponseData responseData = new ResponseData(); UserBase userBase = userService.getUserBaseById(userId); if (userBase == null) { responseData.jsonFill(2, ""用户不存在。"", false); return responseData; } responseData.jsonFill(1, null, userBase); return responseData; } "	0	1	0	1	1	0
"private void checkNodesMatches(String prefix, List<StemNode> nodes) { List<StemNode> stems = lt.getMatchingStems(prefix); for (StemNode node : stems) { assertTrue(""Should have contained: "" + node, stems.contains(node)); } } "	0	0	0	1	0	0
private static int [] zzUnpackRowMap() { int [] result = new int[671]; int offset = 0; offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result); return result; } 	0	0	0	1	0	0
"public static void main(String[] args) { System.out.println(""Hello""); } "	0	0	0	1	0	0
"@Test public void compilePass() { //My solution to ProjectEuler Problem12 String code = ( ""public class Problem12 {\n"" +""	public static void main(String[] args) {\n"" +""		//generate triangle number array\n"" +""		long[] array = new long[20000000];\n"" +""		array[0] = 0;\n"" +""		for (long i = 1; i < array.length; i++) {\n"" +""			array[(int) i] = array[(int)i-1] + i;\n"" +""		}\n"" +""		//calculate first triangle number div > 500\n"" +""		for (long i = 1; i < array.length; i++) {\n"" +""			if (divisors(array[(int) i]) > 500) {\n"" +""				System.out.println(array[(int) i]);\n"" +""				break;\n"" +""			}\n"" +""		}\n"" +""	}\n""  +""	public static int divisors(long k) {\n"" +""	    long bound = k;\n"" +""	    int amount = 0;\n"" +""	    if (k == 1) return 1;\n"" +""	    for (int i = 1; i < bound; ++i) {\n"" +""	        if (k % i == 0) {\n"" +""	            bound = k / i;\n"" +""	            if (bound != i) {\n"" +""	                amount++;\n"" +""	            }\n"" +""	            amount++;\n"" +""	        }\n"" +""	    }\n"" +""	    return amount;\n"" +""	}\n"" +""}"" ); passed = compiler.compile(code, false, ""Problem12""); assertEquals(true, passed); } "	0	0	0	1	0	0
"public void addResource(Resource aResource) throws IOException { String id = (String) aResource.get(JsonLdConstants.ID); Resource record; if (null != id) { record = getRecord(id); if (null == record) { record = new Record(aResource); } else { record.put(""dateModified"", UniversalFunctions.getCurrentTime()); record.put(Record.RESOURCEKEY, aResource); } } else { record = new Record(aResource); } mElasticsearchRepo.addResource(record, aResource.get(JsonLdConstants.TYPE).toString()); mFileRepo.addResource(record); addMentionedData(aResource); } "	0	1	0	1	1	0
"public static String getPostsHtml(ArrayList<AwfulPost> aPosts, AwfulPreferences aPrefs, boolean threadLocked) { StringBuilder buffer = new StringBuilder(); Template postTemplate;  try { Reader templateReader; if(!""default"".equals(aPrefs.layout)){ File template = new File(Environment.getExternalStorageDirectory()+""/awful/""+aPrefs.layout); if(template.exists() && template.isFile() && template.canRead()){ templateReader = new FileReader(template); }else{ templateReader = new InputStreamReader(aPrefs.getResources().getAssets().open(""mustache/post.mustache"")); } }else{ templateReader = new InputStreamReader(aPrefs.getResources().getAssets().open(""mustache/post.mustache"")); } postTemplate = Mustache.compiler().compile(templateReader); } catch (IOException e) { e.printStackTrace(); return """"; }   for (AwfulPost post : aPosts) {  Map<String, String> postData = new HashMap<String, String>();  postData.put(""seen"", (post.isPreviouslyRead() ? ""read"" : ""unread"")); postData.put(""isOP"", (aPrefs.highlightOP && post.isOp())?""op"":null); postData.put(""isMarked"", (aPrefs.markedUsers.contains(post.getUsername()))?""marked"":null); postData.put(""postID"", post.getId()); postData.put(""isSelf"", (aPrefs.highlightSelf && post.getUsername().equals(aPrefs.username)) ? ""self"" : null); postData.put(""avatarURL"", (aPrefs.canLoadAvatars() && post.getAvatar() != null &&  post.getAvatar().length()>0) ? post.getAvatar() : null); postData.put(""username"", post.getUsername()); postData.put(""userID"", post.getUserId()); postData.put(""postDate"", post.getDate()); postData.put(""regDate"", post.getRegDate()); postData.put(""mod"", (post.isMod())?""mod"":null); postData.put(""admin"", (post.isAdmin())?""admin"":null); postData.put(""avatarText"", post.getAvatarText()); postData.put(""lastReadUrl"",  post.getLastReadUrl()); postData.put(""notOnProbation"", (aPrefs.isOnProbation())?null:""notOnProbation""); postData.put(""editable"", (post.isEditable())?""editable"":null); postData.put(""postcontent"",  post.getContent());  try{ buffer.append(postTemplate.execute(postData)); }catch(MustacheException e){ e.printStackTrace(); } }  return buffer.toString(); } "	0	1	0	1	1	0
"@Subscribe public void onInternalGameEvent(InternalGameEvent event) {  log.info(""EventSocketHandler got a message: "" + event.getGameMessage().getType()); GameMessage gameMessage = event.getGameMessage();  if (gameMessage instanceof GameCreatedEvent || gameMessage instanceof GameChangedEvent || gameMessage instanceof GameAbortedEvent) { sendListOfActiveGames(); return; }  if (gameMessage instanceof TournamentEndedEvent) { sendGameMessage(gameMessage); return; }  if (gameMessage instanceof GameEndedEvent) { sendListOfActiveGames(); }  sendGameEvent(event.getGameMessage()); } "	0	0	0	1	0	0
"public Map<String,String> getAllValuesByType(String mdTableName, String space, String type){ Map<String, String> vals = null; try{ PreparedStatement stmt = conn.prepareStatement(""SELECT (key,value) from ""+mdTableName+"" WHERE namespace = ? AND keytype = ?""); stmt.setString(1, space); stmt.setString(2, type); stmt.execute(); ResultSet rs = stmt.getResultSet(); vals = new HashMap<String,String>(); while(rs.next()){ vals.put(rs.getString(1), rs.getString(2)); } } catch (Exception e) { log.error(""Error retrieving metadata values ""+e.getMessage()); } return vals; } "	0	0	0	1	0	0
public default GraphTraversal<S, E> by(final Traversal<?, ?> traversalLambda) { ((FunctionHolder<Traverser<?>, ?>) this.asAdmin().getEndStep()).addFunction(new TraversalObjectLambda(traversalLambda)); return this; } 	0	0	0	1	0	0
private int getRealParametersCount( Method m ) { int c = 0; for( Class<?> t : m.getParameterTypes() ) { if( t != Client.class && t != WorkingSession.class && t != CommandOptions.class && t != FilteredGAVs.class && t != ILogger.class ) c++; } return c; } 	0	0	0	1	0	0
"public void init() { ScreenManager.multiplexer.addProcessor(this); cameraHelper = new CameraHelper(); b2World = new World(new Vector2(0, 0f), true); b2World.setContactListener(this); // You can open this file and edit it via // Editor in the desktop project. You can of course // also create new files. gameWorld = GameWorldSerializer.deserialize(Gdx.files.internal(""map1.map"")); gameWorld.init(b2World); cameraHelper.setTarget(gameWorld.spaceShip.getBody()); } "	0	0	0	1	0	0
"private JSONObject  getGeoDistanceFilter() throws JSONException { JSONObject geo_distance = new JSONObject(); JSONObject filter = new JSONObject(); geo_distance.put(""pos"", self.getContent(""pos"")); geo_distance.put(""distance"", getResources().getString(R.string.distance_filter) + ""km""); filter.put(""geo_distance"", geo_distance); return filter; } "	0	1	0	1	1	0
public static CheckBox addCheckBox(String labelText, Table parent, Skin skin){  CheckBox info = new CheckBox(labelText, skin); parent.add(info).right().row().fillX().expandX();  return info; } 	0	0	0	1	0	0
"public static <T> List<T> queryColumnSQLKey(String sqlKey, String columnName, Class<T> columnType, Object[] params) {  String sql = YANK_POOL_MANAGER.getMergedSqlProperties().getProperty(sqlKey); if (sql == null || sql.equalsIgnoreCase("""")) { throw new SQLStatementNotFoundException(); } else { return queryBeanList(sql, columnType, params); } } "	0	0	0	1	0	0
"public void onSignupFailed() { Toast.makeText(getBaseContext(), ""Login failed"", Toast.LENGTH_LONG).show();  _signupButton.setEnabled(true); } "	0	0	0	1	0	0
public static IdMap createIdMap(String sessionID) {  IdMap idMap = new IdMap().withSessionId(sessionID);  idMap.with(new DiceCreator()); idMap.with(new GameCreator()); idMap.with(new GrassCreator()); idMap.with(new GroundCreator()); idMap.with(new RockCreator()); idMap.with(new TrainerCreator()); idMap.with(new TrapCreator()); idMap.with(new ZombieCreator()); idMap.with(new ZombieOwnerCreator());  return idMap;  } 	0	0	0	1	0	0
"public static final JavaScriptObject[] toJsoArray(final Object[] array, final WrapperCollection wrappers) { final JavaScriptObject[] result = new JavaScriptObject[array.length]; for (int i = 0; i <= array.length - 1; i++) { final Object rawWrapped = forcewrapAnyObjectForJavaScript(array[i], wrappers); if (rawWrapped instanceof JavaScriptObject) { result[i] = (JavaScriptObject) rawWrapped; } else { result[i] = ExporterUtil.wrap(rawWrapped); }  Console.log(""Resolved into "" + result[i].getClass());  } return result; } "	0	0	0	1	0	0
"@EventHandler public void onDisband(DGroupDisbandEvent event) { MessageUtil.log(plugin, ""&b== "" + event.getEventName() + ""==""); MessageUtil.log(plugin, ""Cause: "" + event.getCause()); MessageUtil.log(plugin, ""Creator: "" + event.getDisbander().getName()); } "	0	1	0	1	1	0
"private void checkContentType(String contentType) throws InvalidContentTypeException { if(!contentType.equals(""image/png"") && !contentType.equals(""image/jpg"")) { throw new InvalidContentTypeException(); } } "	0	0	0	1	0	0
"public IRVisitResult visit(ArrayVarExpr expr, IREnvironment env) {  boolean isLeftHandSideExpr=env.isLeftHandSideExpr(); env.setIsLeftHandSideExpr(false);  IRVisitResult targetExprResult= expr.target_expr.accept(this, env); IRVisitResult indexExprResult= expr.index_expr.accept(this, env); TypeEntry type; if(targetExprResult.type.getTypeDimension()-1==0) type=env.getTypeEntry(targetExprResult.type.getTypeName()); else type=ArrayTypeEntry.makeArrayTypeEntry(targetExprResult.type,targetExprResult.type.getTypeDimension()-1);  env.writeCode(""Library __checkNullRef(""+targetExprResult.value+""),""+IREnvironment.RDUMMY); env.writeCode(""Library __checkArrayAccess(""+targetExprResult.value+indexExprResult.value+""),""+IREnvironment.RDUMMY); IRVisitResult irVisitResult=null; if(!isLeftHandSideExpr) { String registerKey= env.getRegisterKey(); env.writeInstruction(""MoveArray"",targetExprResult.value+""[""+indexExprResult.value+""]"",registerKey); irVisitResult=new IRVisitResult(type,registerKey); } else { irVisitResult=new IRVisitResult(type,targetExprResult.value+""[""+indexExprResult.value+""]""); irVisitResult.moveInstruction=""MoveArray""; } return irVisitResult; } "	0	1	0	1	1	0
public Game createGame() { if (players.size() < MIN_PLAYERS) { throw new NoEnoughPlayersException(); } List<Predicate<? super Card>> filters = new ArrayList<>(); filters.add(card -> card instanceof Building); filters.add(card -> ((Building) card).getPlayersNeeded() == players.size()); filters.add(card -> ((Building) card).getAge() == 1);  players.stream().forEach( player -> { player.getCity().getStorage().addResource(ResourceType.COIN, INITIAL_COINS); player.setDeck(ages.get(0).nextDeck(players.size(), filters)); } ); return new Game(players, ages); } 	0	1	0	1	1	0
"public void reload() { try { FileInputStream in = new FileInputStream(""res/paperMan.properties""); props.load(in); in.close(); String temp = props.getProperty(""firstTime"", ""true""); if(""true"".equals(temp)) { save(""res/maze.properties""); props.setProperty(""paperHealth"", ""10""); props.setProperty(""sound"", ""true""); props.setProperty(""game3Score"", ""0""); props.setProperty(""firstTime"", ""false""); props.setProperty(""timeSinceHit"", ""0""); save(temp); } } catch (IOException e1) { // TODO Auto-generated catch block e1.printStackTrace(); } } "	0	0	0	1	0	0
"private void selectTabToday() { int ordinal = LessonHelper.calcDayNameToDay().ordinal(); Log.i(TAG, ""selectTabToday() ordinal = "" + ordinal + "" positionTabSelect = "" + positionTabSelect);  if (positionTabSelect == -1) { Log.d(TAG, ""positionTabSelect == -1.""); selectTab(ordinal); return; }  if (positionTabSelect == ordinal) { Log.d(TAG, ""Tab saved position.""); } else { Log.d(TAG, ""Tab new position.""); resetSelectTab(positionTabSelect); selectTab(ordinal); } } "	0	0	0	1	0	0
"@Override protected Collection<SimulinkElement> allContentsFromModel() { try { return getElementsForPaths(engine.evalWithResult(""find_system('"" + getSimulinkModelName() + ""')""), null); } catch (Exception e) { return Collections.emptyList(); } } "	0	0	0	1	0	0
"@Override protected Collection<SimulinkElement> getAllOfTypeFromModel(String type) throws EolModelElementTypeNotFoundException { try { return getElementsForPaths(engine.evalWithResult(""find_system('"" + getSimulinkModelName() + ""','BlockType', '"" + type + ""')""), type); } catch (Exception e) { throw new EolModelElementTypeNotFoundException(this.getName(), type); } } "	0	0	0	1	0	0
"@Override public Object invoke(Object object, String property) throws EolRuntimeException { try { return engine.evalWithResult(""get_param ('"" + ((SimulinkElement) object).getPath() + ""', '"" + property + ""')""); } catch (Exception ex) { return super.invoke(object, property); } } "	0	0	0	1	0	0
"public String toString() { return ""{action="" + this.action.name() + "", args="" + this.args + ""}""; } "	0	0	0	1	0	0
public int contains(Object obj) { if (obj instanceof Wrapper) obj = ((Wrapper) obj).unwrap(); return path.contains(obj); } 	0	0	0	1	0	0
"@Test public final void ODataCollectionにOPTIONSを指定してXHR2ヘッダーが返却されること() { try { // コレクションの作成 createODataCollection();  TResponse response = Http.request(""crossdomain/xhr2-preflight.txt"") .with(""path"", ""/testcell1/box1/odatacol"") .with(""token"", DcCoreConfig.getMasterToken()) .returns() .statusCode(HttpStatus.SC_OK) .debug(); checkXHR2Header(response, ""OPTIONS, GET, DELETE, MOVE, PROPFIND, PROPPATCH, ACL""); } finally { // コレクションの削除 deleteODataCollection(); } } "	0	0	0	1	0	0
"private ListGroupsResponse createListGroupsResponse() { List<ListGroupsResponse.Group> groups = Arrays.asList(new ListGroupsResponse.Group(""test-group"", ""consumer"")); return new ListGroupsResponse(Errors.NONE, groups); } "	0	0	0	1	0	0
"@VisibleForTesting public Proxy createProxy(URI uri) { Preconditions.checkNotNull(uri, ""uri is null""); Preconditions.checkArgument(uri.getScheme().equals(""http""), ""http is not a supported schema"");  IProxyService proxyServiceCopy = proxyService; if (proxyServiceCopy == null) { return Proxy.NO_PROXY; }  IProxyData[] proxyDataForUri = proxyServiceCopy.select(uri); for (final IProxyData iProxyData : proxyDataForUri) { switch (iProxyData.getType()) { case IProxyData.HTTPS_PROXY_TYPE: return new Proxy(Type.HTTP, new InetSocketAddress(iProxyData.getHost(), iProxyData.getPort())); case IProxyData.SOCKS_PROXY_TYPE: return new Proxy(Type.SOCKS, new InetSocketAddress(iProxyData.getHost(), iProxyData.getPort())); default: logger.warning(""Unsupported proxy type: "" + iProxyData.getType()); break; } } return Proxy.NO_PROXY; } "	0	0	0	1	0	0
"private static String getRegex(final String classSpec, final Forbidden.Type type) { switch (type) { case PREFIX: return classSpec.replaceAll(""\\."", ""(\\\\.|/)"");  case FIXED: return classSpec.replaceAll(""\\."", ""(\\\\.|/)"") + ""\\W"";  case WILDCARD: return classSpec.replaceAll(""\\."", ""(\\\\.|/)"").replaceAll(""\\*"", ""\\S*"");  default: System.err.println(""unsupported type for @Forbidden""); System.exit(-2); return null; } } "	0	0	0	1	0	0
public static Creation getCreation(ItemStack painting) { return NBTUtil.readJsonFromNBT(Creation.class, painting.getTagCompound()); } 	0	0	0	1	0	0
"public  static void addToCache(String key, File fileToCache){ //logger.debug(""storing "" + key + "" on file cache (cache size: "" + cache.size() + "")""); try { InputStream is = new FileInputStream(fileToCache); // Get the size of the file long length = fileToCache.length();  // You cannot create an array using a long type. // It needs to be an int type. // Before converting to an int type, check // to ensure that file is not larger than Integer.MAX_VALUE. if (length > Integer.MAX_VALUE) { // File is too large }  // Create the byte array to hold the data byte[] bytes = new byte[(int)length];  // Read in the bytes int offset = 0; int numRead = 0; while (offset < bytes.length && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) { offset += numRead; }  // Ensure all the bytes have been read in if (offset < bytes.length) { is.close(); throw new IOException(""Could not completely read file ""+fileToCache.getName()); }  // Close the input stream and return bytes is.close();  cache.put(key,bytes);  } catch (Exception e){ logger.error(""Error adding to cache! {}"" + e.getMessage(), e); } } "	0	0	0	1	0	0
"private boolean moveCode() { loopNestTree.visitPostOrder( loop -> { // Everything duplicated up until now is considered an original. duplicated.clear(); visibleDefinitions.clear(); Block originalHeader = loop.header; MoveInfo info = getMoveInfoOf(originalHeader); System.out.println(""info = "" + info); if (info.toMove.isEmpty()) { return; } hasChanged = true;  Set<Block> toDuplicate = info.blocksToDuplicate();  // We need to save back edges for later. The duplicate header will be removed of all // back edges, while the original will have only back edges. Set<Node> backPreds = seq(originalHeader.getPreds()) .filter(n -> Dominance.dominates(originalHeader, (Block) n.getBlock())) .toSet();  // usages that aren't duplicated and point to the original defs that might // not be visible and need merging through Phis. List<BackEdges.Edge> dirtyUsages = dirtyUsages(originalHeader, toDuplicate);  unrollAndFixControlFlow(originalHeader, toDuplicate, backPreds);  // Control flow is fixed now. What remains is to copy/move instructions from the original // and also fixing up all dirtyUsages.  // We put the invariant code in a post dominator of the loop body before the loop. Block newHeader = enclosingLoopHeader(info.lastUnduplicated); Block postdominatorBeforeLoop = postdominatorBeforeLoop(newHeader).get(); for (Node move : info.toMove) { move.setBlock(postdominatorBeforeLoop); }  // Every invariant node is in its new block. We can fix other unduplicated usages now // by inserting the necessary Phis. Cli.dumpGraphIfNeeded(graph, ""before-reconstruction""); reconstructSSA(toDuplicate, dirtyUsages); Cli.dumpGraphIfNeeded(graph, ""after-reconstruction"");  // Identify the new loop header and reorganize keeps. // The original loop header won't be loop header after this, so we'll delete the keep edge. fixKeepEdges(originalHeader, newHeader);  Cli.dumpGraphIfNeeded(graph, ""after-reconstruction""); }); return true; } "	0	0	0	1	0	0
"public void testFetchReferences() { EntityManager pc = TestEnvironment .getPersistenceConnector(""TestBasicFetching-testFetchSimpleReference"");  OWLClassA a = new OWLClassA(); URI uriA = URI.create(""http://newA""); a.setUri(uriA);  a.setStringAttribute(""new-value"");  OWLClassD d = new OWLClassD(); URI uriD = URI.create(""http://newD""); d.setUri(uriD);  d.setOwlClassA(a);  // more references OWLClassA a2 = new OWLClassA(); URI uriA2 = URI.create(""http://newA2""); a2.setUri(uriA2); OWLClassC c = new OWLClassC(); URI uriC = URI.create(""http://newC""); c.setUri(uriC);  c.setReferencedList(Arrays.asList(a, a2));  c.setSimpleList(Arrays.asList(a, a2));  pc.persist(a); pc.persist(a2); pc.persist(c); pc.persist(d);  assertTrue(pc.contains(a)); assertTrue(pc.contains(d));  pc.flush();  pc.clear();  assertFalse(pc.contains(a)); assertFalse(pc.contains(a2)); assertFalse(pc.contains(c)); assertFalse(pc.contains(d));  final OWLClassD dX = pc.find(OWLClassD.class, uriD);  assertNotNull(dX);  assertEquals(dX.getOwlClassA().getStringAttribute(), ""new-value"");  final OWLClassC cX = pc.find(OWLClassC.class, uriC);  assertEquals(cX.getReferencedList().size(), 2);  assertEquals(cX.getSimpleList().size(), 2);  pc.close(); } "	0	0	0	1	0	0
"@Test public void testToString() { System.out.println(""toString""); FK4NoEterms instance = new FK4NoEterms(""B1950"", ""B2000""); instance.setEquinox(1978); String expResult = ""FK4_NO_E(B1978,B2000)""; String result = instance.toString(); assertEquals(expResult, result); } "	0	0	0	1	0	0
"@Test public void testGeoBoundingBoxFilterNamed() throws IOException { IndexQueryParserService queryParser = queryParser(); String query = copyToStringFromClasspath(""/org/elasticsearch/index/query/geo_boundingbox-named.json""); ParsedQuery parsedQuery = queryParser.parse(query); assertThat(parsedQuery.namedFilters().containsKey(""test""), equalTo(true)); assertThat(parsedQuery.query(), instanceOf(BooleanQuery.class)); BooleanQuery booleanQuery = (BooleanQuery) parsedQuery.query(); assertThat(booleanQuery.clauses().size(), equalTo(2)); BooleanClause booleanClause = booleanQuery.clauses().get(0); assertThat(booleanClause.getOccur(), equalTo(Occur.MUST)); assertThat(booleanClause.getQuery(), instanceOf(MatchAllDocsQuery.class)); booleanClause = booleanQuery.clauses().get(1); assertThat(booleanClause.getOccur(), equalTo(Occur.FILTER)); assertGeoBBoxQuery(queryParser, booleanClause.getQuery(), 40, -80, 30, -70); } "	0	0	0	1	0	0
"public void setAmmoCount(ItemStack clipStack, int count) { if (clipStack.getTagCompound() == null) { clipStack.setTagCompound(new NBTTagCompound()); } clipStack.getTagCompound().setInteger(""ammo"", Math.max(0, count)); } "	0	0	0	1	0	0
"public void add(K key, V value) { Node current = root; Node parent = null;  if (root == null) { root = new Node(key, value, RED); root.color = BLACK; //info.add(new Instruction(""add "" + key + "" null "" + ""null "")); info.add(new Instruction(""add"", value, false, false, null, null, null, null)); } else { while (current.key != null) { parent = current; current = (key.compareTo(current.key) > 0) ? current.rightChild : current.leftChild;  } if (current.key == null) { if (key.compareTo(parent.key) > 0) { current = new Node(key, value, RED); current.parent = parent; parent.rightChild = current; } else if (key.compareTo(parent.key) < 0) { current = new Node(key, value, RED); current.parent = parent; parent.leftChild = current; } //info.add(new Instruction(""add "" + key + "" "" + current.isLeftChild() + "" "" + current.parent.getData())); info.add(new Instruction(""add"" , key, current.isLeftChild(), true, current.parent.getData(), null, null, null)); addFixTree(current); } } } "	0	0	0	1	0	0
private int getUserSettingForMaximumNumberOfElements(DetectionActivationElement detectionActivationElement) { if (detectionActivationElement.getProcessAlgorithm() instanceof FillInTheBlankConceptDetection) { return questionGenerationSession.getConceptDetectionOptions().getNumberOfFilltextQuestions(); } else if (detectionActivationElement.getProcessAlgorithm() instanceof CardinalRelationConcept) { return questionGenerationSession.getConceptDetectionOptions().getNumberOfCardinalityQuestions(); } else { return DetectionOptions.UNLIMITED; } } 	0	0	0	1	0	0
"protected ProjectJsonResponse uploadDependencies(ByteArrayOutputStream outStream) throws Exception { String apiKey = fetchApiKey(); String projectId = fetchProjectId(); String url = baseUrl + apiPath + resource + ""/"" + projectId + ""?api_key="" + apiKey; Reader reader = HttpUtils.post(url, outStream.toByteArray(), ""project_file"", null, null, null); ObjectMapper mapper = new ObjectMapper(); return mapper.readValue(reader, ProjectJsonResponse.class ); } "	0	0	0	1	0	0
"@Override @RequestMapping(path = ""Queries/PersonalInformation"", method = RequestMethod.GET) public TableEntry getPersonal_Information(String name) throws Exception { logger.log(Level.INFO, ""Get personal information was called.\n Parameters:"" + ""Name:"" + name); // Parse user's input: name = name.trim().replaceAll("" "", ""_""); return (new SqlRunner()).getPersonalInfo(name);  } "	0	0	0	1	0	0
"void generatesDeclarations(String expected) { String[] parseResult = parse(); assertThat(parseResult[1].isEmpty()); String actual = parseResult[0]; String stripped = DeclarationGeneratorTests.GOLDEN_FILE_COMMENTS_REGEXP.matcher(actual).replaceAll(""""); if (!stripped.equals(expected)) { failureStrategy.failComparing(""compilation result doesn't match"", expected, stripped); } } "	0	1	0	1	1	0
"public void dumpRecipeRegistryToLog() { for (WrappedStack wrappedStack : getRecipeMappings().keySet()) { StringBuilder stringBuilder = new StringBuilder(); stringBuilder.append(String.format(""- Output: %s, Inputs: "", wrappedStack.toString())); for (List<WrappedStack> listStacks : getRecipeMappings().get(wrappedStack)) { for (WrappedStack listStack : listStacks) { stringBuilder.append(listStack.toString() + "" ""); } } LogHelper.info(stringBuilder.toString()); } } "	0	1	0	1	1	0
@NonNull @Override public List<Receiver> getReceivers() { ArrayList<Receiver> receivers = new ArrayList<>(); if (receiver != null) { receivers.add(receiver); } return Collections.unmodifiableList(receivers); } 	0	0	0	1	0	0
"@Test public void testGetResult_dict() { System.out.println(""getResult notexist""); SampleResult samplerResult = new SampleResult(); samplerResult.setResponseData(""{\""myval\"": {\""key\"": \""val\""}}"".getBytes());  JSONPathAssertion instance = new JSONPathAssertion(); instance.setJsonPath(""$.myval""); instance.setJsonValidationBool(true); instance.setExpectedValue(""{key=val}""); AssertionResult expResult = new AssertionResult(""""); AssertionResult result = instance.getResult(samplerResult); assertEquals(expResult.getName(), result.getName()); assertEquals(false, result.isFailure()); } "	0	0	0	1	0	0
"@SuppressWarnings(""deprecation"") @Command(hook = ""checkCommand"", async = AsyncType.ALWAYS) public void checkCommand(final CommandSender sender, final String player) { Utils.sendModuleHeader(sender); Utils.sendMessage(sender, """", ""&7Please note that the data may not be fully accurate!"", '&'); OfflinePlayer oPlayer; oPlayer = Bukkit.getPlayer(player); if (oPlayer == null) oPlayer = Bukkit.getServer().getOfflinePlayer(player); sendData(sender, oPlayer); if (ModuleLoader.getModule(""Tag"") != null) Bukkit.dispatchCommand(sender, ""tag check player""); } "	0	1	0	1	1	0
private void setViewPagerValues() { if (creditCards != null) { if (getActivity() != null) { cardPagerAdapter = new CardPagerAdapter(this, getChildFragmentManager(), creditCards, getActivity()); savedCardPager.setAdapter(cardPagerAdapter); savedCardPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() { @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) { }  @Override public void onPageSelected(int position) { setupCardInstallment(); }  @Override public void onPageScrollStateChanged(int state) {  } }); circlePageIndicator.setViewPager(savedCardPager); ((CreditDebitCardFlowActivity) getActivity()).setAdapterViews(cardPagerAdapter, circlePageIndicator, emptyCardsTextView); showHideNoCardMessage(); setupCardInstallment(); }  } } 	0	0	0	1	0	0
"public static String getStorageQueueForDestination(String destination, String nodeID, boolean isTopic) { String storageQueueName; // We need to add a prefix so that we could differentiate if queue is created under the same name //as topic if(isTopic) { storageQueueName = new StringBuilder(""TOPIC_NODE_QUEUE_PREFIX"").append(""|"").append(destination).append(""|"").append(nodeID).toString(); } else { storageQueueName = destination; } return storageQueueName; } "	0	1	0	1	1	0
"protected P4Revision getRevision(P4Head head, TaskListener listener) throws Exception { try (ClientHelper p4 = new ClientHelper(credential, listener, ScmSourceClient, charset)) { long change = p4.getHead(head.getPath() + ""/...""); P4Revision revision = new P4Revision(head, change); return revision; } } "	0	0	0	1	0	0
"@Override public void execute(WebScriptRequest req, WebScriptResponse res) throws IOException { Map<String, String> templateArgs = req.getServiceMatch().getTemplateVars(); String storeType = templateArgs.get(""store_type""); String storeId = templateArgs.get(""store_id""); String id = templateArgs.get(""id""); NodeRef documentNode = new NodeRef(storeType, storeId, id);  JSONObject json = new JSONObject(); try{  NodeRef caseNodeRef = caseService.getParentCase(documentNode);  if (caseNodeRef != null) { String caseId =  caseService.getCaseId(caseNodeRef); json.put(""isCaseDoc"", true); json.put(""caseId"", caseId); json.write(res.getWriter()); } else { json.put(""isCaseDoc"", false); json.write(res.getWriter()); } } catch (InvalidNodeRefException inre) { logger.error(""The invalid nodeRef exception: ""+ inre.getMessage()); } catch (JSONException jse){ logger.error(""Unable to build teh json model because of the following exception: ""+ jse.getMessage()); }    } "	0	0	0	1	0	0
public void similarMovies(View v) { new RottenTomatoesJSOn(getApplicationContext()).similarMovies(m); finish(); } 	0	0	0	1	0	0
"public synchronized List<String> listUnmanagedDrillits() { List<String> drillbits = new ArrayList<>( ); for ( DrillbitTracker item : registry.values() ) { if ( item.state == DrillbitTracker.State.UNMANAGED ) { drillbits.add( toKey( item.endpoint ) ); } } // TESTING //    drillbits.add( ""foo:123:456:789"" ); return drillbits; } "	0	0	0	1	0	0
"public void onDateSet(DatePicker view, int selectedYear, int selectedMonth, int selectedDay) { String year1 = String.valueOf(selectedYear); String month1 = String.valueOf(selectedMonth + 1); String day1 = String.valueOf(selectedDay);  Calendar cal = Calendar.getInstance(TimeZone.getDefault());  if(Integer.parseInt(year1) > cal.get(Calendar.YEAR)) { memoryDatePicker.setText(""Select a lower value!""); return; } if(Integer.parseInt(year1) == cal.get(Calendar.YEAR) && Integer.parseInt(month1) - 1 > cal.get(Calendar.MONTH) ) { memoryDatePicker.setText(""Select a lower value!""); return; } if(Integer.parseInt(year1) == cal.get(Calendar.YEAR) && Integer.parseInt(month1) - 1 == cal.get(Calendar.MONTH) && Integer.parseInt(day1) > cal.get(Calendar.DAY_OF_MONTH)) { memoryDatePicker.setText(""Select a lower value!""); return; } memoryDatePicker.setText(day1 + ""/"" + month1 + ""/"" + year1); } "	0	0	0	1	0	0
"@Override public void process(Exchange exchange) throws Exception { String xmlRecord = (String) exchange.getIn().getBody(); XmlRecordEntity xmlRecordEntity = new XmlRecordEntity(); xmlRecordEntity.setXml(xmlRecord); String camelFileName = (String) exchange.getIn().getHeader(""CamelFileName""); xmlRecordEntity.setXmlFileName(camelFileName); String owningInstitutionId = StringUtils.substringBetween(xmlRecord, ""<owningInstitutionId>"", ""</owningInstitutionId>""); xmlRecordEntity.setOwningInst(owningInstitutionId); String owningInstitutionBibId = StringUtils.substringBetween(xmlRecord, ""<owningInstitutionBibId>"", ""</owningInstitutionBibId>""); if(StringUtils.isBlank(owningInstitutionBibId)){ owningInstitutionBibId = StringUtils.substringBetween(xmlRecord, ""<controlfield tag='001'>"",""</controlfield>""); } xmlRecordEntity.setOwningInstBibId(owningInstitutionBibId); Date date = new Date(); xmlRecordEntity.setDataLoaded(date); xmlRecordRepository.save(xmlRecordEntity); } "	0	0	0	1	0	0
"@EventHandler // Give the player his class kit if the joins for the first time. public void onPlayerJoin(PlayerJoinEvent e) { String playerUUID = e.getPlayer().getUniqueId().toString();  String defaultClassName = config.getString(""soulbound.defaultClass"");   // Add player to data file if he isn't yet added. if (!data.isSet(playerUUID)) { data.set(playerUUID + "".class"", ""default""); data.set(playerUUID + "".lastSeenName"", e.getPlayer().getName()); data.set(playerUUID + "".nextPossibleClassSwitchTime"", null);  plugin.getLogger().info(""Creating new data entry for player: "" + e.getPlayer().getName() + "" ("" + playerUUID + "")"");  // Give player default class kit if(config.getBoolean(""classes.enabled"") && config.getBoolean(""classes.giveKitOnRespawn"")) { ServerUtils.dispatchCommand(""essentials:kit "" + config.getString(""soulbound.classes."" + defaultClassName + "".kitName"") + "" "" + e.getPlayer().getName()); }   for (String cmd : data.getStringList(""commandsExecutedOnPlayerFirstJoin"")) { cmd = Commands.parsePlayerVars(cmd, e.getPlayer()); ServerUtils.dispatchCommand(cmd); } } else if (data.isSet(playerUUID)) { // Update last seen name. data.set(playerUUID + "".lastSeenName"", e.getPlayer().getName());  // Check if player's class still exists if (!PlayerClass.PlayerClassExists(data.getString(playerUUID + "".class""))) { // If player's class doesn't exist, put him back in the default class. COnlinePlayer cOnlinePlayer = new COnlinePlayer(e.getPlayer().getUniqueId());  cOnlinePlayer.moveToDefaultPlayerClass(); } } } "	0	0	0	1	0	0
"public static void sendEmail(Activity activity, String email, String message, File currentDataLog) { if (currentDataLog != null) { Uri uri = FileProvider.getUriForFile(activity, ""org.cmucreatelab.flutter_android.fileprovider"", currentDataLog); Intent intent = new Intent();  intent.setAction(Intent.ACTION_SEND); intent.setType(""message/rfc822""); intent.putExtra(Intent.EXTRA_EMAIL, email); intent.putExtra(Intent.EXTRA_SUBJECT, Constants.EMAIL_SUBJECT); intent.putExtra(Intent.EXTRA_TEXT, message); intent.putExtra(Intent.EXTRA_STREAM, uri); intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);  List<ResolveInfo> resolveInfos = activity.getPackageManager().queryIntentActivities(intent, 0); if (resolveInfos.size() == 0) { new AlertDialog.Builder(activity) .setMessage(R.string.no_mail_app) .setPositiveButton(R.string.ok, null) .show(); } else { String packageName = resolveInfos.get(0).activityInfo.packageName; String name = resolveInfos.get(0).activityInfo.name; intent.setComponent(new ComponentName(packageName, name)); activity.grantUriPermission(packageName, uri, Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_READ_URI_PERMISSION); activity.startActivity(intent); } } else { // TODO - alert user to select a data log } } "	0	1	0	1	1	0
@Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) { Component result = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); if (fontStyle != FONT_NO_CHANGE) { result.setFont(table.getFont().deriveFont(fontStyle)); } if (isSelected) { result.setForeground(table.getSelectionForeground()); result.setBackground(table.getSelectionBackground()); } else if (isSpecialHighlightRow(row)) { result.setForeground(COLOR_SPECIAL_FG); result.setBackground(COLOR_SPECIAL_BG); } else if (row % 2 == 1 && doHighlight) { result.setForeground(table.getForeground()); result.setBackground(COLOR_ALTERNATING_HILITE); } else { result.setForeground(table.getForeground()); result.setBackground(table.getBackground()); } if (hasFocus && result instanceof JComponent) { ((JComponent) result).setBorder(TABLE_FOCUS_BORDER); } return result; } 	0	0	0	1	0	0
"@Test public void testSingleKMSClose() throws Exception { String key = getRandomKey(DEFAULT_KEY_SIZE_CHARS); Properties props = getKMSProperties(key, DEFAULT_RANDOM_KEY_SIZE_BITS); VerifiableProperties verifiableProperties = new VerifiableProperties((props)); KeyManagementService<SecretKeySpec> kms = new SingleKeyManagementServiceFactory(verifiableProperties, CLUSTER_NAME, registry).getKeyManagementService(); kms.close(); try { kms.getKey(Account.UNKNOWN_ACCOUNT.getId(), Container.UNKNOWN_CONTAINER.getId()); Assert.fail(""getKey() on KMS should have failed as KMS is closed""); } catch (GeneralSecurityException e) { } } "	0	1	0	1	1	0
"@Test public void crc32(){ DB db = maker() .checksumEnable() .make();  db.hashMap(""aa"").put(""aa"", ""bb""); db.commit(); assertEquals(1L<<Store.FEAT_CRC,getBitField()); db.close(); try { maker().make(); fail(); }catch(DBException.WrongConfig e){ assertEquals(""Store was created with CRC32 checksum, but it is not enabled in config."",e.getMessage()); } } "	0	1	0	1	1	0
"public static URL createURL(URL baseUrl, String relativeUrl) throws MalformedURLException, UnsupportedEncodingException { if (relativeUrl.contains(""base64"")) { relativeUrl = new String(Base64.getEncoder() .encode(relativeUrl.getBytes(StandardCharsets.UTF_8))); } if (relativeUrl.contains(""javascript:void"")) { return null; } return new URL(baseUrl, relativeUrl); } "	0	0	0	1	0	0
"@Override public final void init() { tileMap = new TileMap(30); tileMap.loadTiles(""/tiles/Bubble_Tile.gif""); tileMap.loadMap(""/maps/level2.map""); player = new Player(tileMap); player.setPosition(100d, 100d); player.setLives(PlayerSave.getLives()); player.setScore(PlayerSave.getScore()); player.setExtraLive(PlayerSave.getExtraLive());  populateEnemies(); hud = new HUD(player); AudioPlayer.load(""/Music/level2.wav"", ""level2""); AudioPlayer.loop(""level2""); } "	0	0	0	1	0	0
"@Override public void nativeKeyReleased(NativeKeyEvent nke) { try { System.out.printf(""KeyRelease caught : {%d}"", nke.getRawCode()); gameData.getInput().setKey(nke.getRawCode(), false); } catch (Exception ex) { Exceptions.printStackTrace(ex); } } "	0	0	0	1	0	0
"public void timeSelectionDialog2(View view) { DialogFragment newFragment = new TimePickerFragment(); newFragment.show(getSupportFragmentManager(), ""timePicker""); } "	0	0	0	1	0	0
"public static Form getForm(VitroRequest vreq){  Form form = new Form(vreq);  form.dataOperation = new String(""addSingleBoneOf"");  form.dataSets.put(""subClasses"", SubClassesDataSet.getDataSet()); form.dataSets.put(""completeness"", new CompletenessDataSet());  form.submitConfig.add(new RequestData(""class"", ""skeletalDivisionClass"")); form.submitConfig.add(new RequestData(""skeletalInventory"", ""individual""));  form.redirectConfig.add(new ConstantRequestData(""pageUri"", ""boneOrgan"")); form.redirectConfig.add(new SubmissionData(""boneOrgan"", ""individual"")); form.redirectConfig.add(new SubmissionData(""completeness"")); form.redirectConfig.add(new SubmissionData(""completenessState""));  form.formElements.add(new ClassSelector(""subClasses"", ""Bony Part Type"")); form.formElements.add(new InstanceSelector(""completeness"", ""Completeness"", true));  form.triplesToStore = new String(""addSingleBoneRegion""); return form; } "	0	0	0	1	0	0
"public static Set<String> getCompleted(HTMLElement list) { Set<String> ids = new HashSet<>(); for (Iterator<HTMLElement> iterator = Elements.iterator(list); iterator.hasNext(); ) { HTMLElement li = iterator.next(); if (li.classList.contains(""completed"")) { String id = String.valueOf(li.dataset.get(""item"")); if (id != null) { ids.add(id); } iterator.remove(); } } return ids; } "	0	1	0	1	1	0
@Test public void testWrite() throws Exception { ByteBuffer b = ByteBuffer.allocate(100); b.position(1); b.limit(50); b.putInt(100); b.position(1); WriteBuffer writeBuffer = new WriteBuffer(); ByteBufferDataType byteBufferDataType = new ByteBufferDataType(); byteBufferDataType.write(writeBuffer, b); ByteBuffer rb = writeBuffer.getBuffer(); rb.rewind(); ByteBuffer b1 = (ByteBuffer) byteBufferDataType.read(rb); assertEquals(b1.limit(), 49); assertEquals(rb.getInt(), 100);  rb.rewind();  ByteBuffer[] byteBuffers = new ByteBuffer[1]; byteBufferDataType.read(rb, byteBuffers, 1, false);  assertEquals(byteBuffers[0].getInt(), 100); } 	0	0	0	1	0	0
private void startNext() { lastAnimation = null; if (!animationQueue.isEmpty()) { lastAnimation = animationQueue.remove(0); TaskScheduler.singleShot(200, lastAnimation::play); } else { isEmpty.set(true); if (manager.getPlayer() instanceof LocalPlayer) drawCandidatePositions(); } } 	0	0	0	1	0	0
"@Override public String checkPattern(String text) { // Check for img link Matcher match = pattern(""picLink"").matcher(text); StringBuffer sb = new StringBuffer(); while (match.find()) { match.appendReplacement(sb, ""<img style=\""max-width:100%\"" src=\""$2\"" alt=\""$1\"">""); } match.appendTail(sb); String tmp = sb.toString();  // check for text link match = pattern(""textLink"").matcher(tmp); sb = new StringBuffer(); while(match.find()){ match.appendReplacement(sb, ""<a href=\""$2\"">$1</a>""); } match.appendTail(sb); tmp = sb.toString(); return tmp; } "	0	0	0	1	0	0
"public static int getUserIDFromString(String path) { //if we know that this is a path and not a name, handle it specially if(path.contains(File.separator)) { String ret = path.substring(path.lastIndexOf(""/"")+1, path.lastIndexOf('.')); return Integer.parseInt(ret); } else { if(!Character.isDigit(path.charAt(0))) { return -1; } return Integer.parseInt(path.substring(0, path.indexOf('.'))); } } "	0	0	0	1	0	0
"@Override public ValidationResult validateSemanticChecks(MapRecord mapRecord) throws Exception { final ValidationResult result = new ValidationResultJpa();  // Map record name must share at least one word with target name final Set<String> recordWords = new HashSet<>(Arrays.asList(mapRecord.getConceptName().toLowerCase() .split("" ""))); final Set<String> entryWords = new HashSet<>(); for (final MapEntry entry : mapRecord.getMapEntries()) { if (entry.getTargetName() != null) { entryWords.addAll(Arrays.asList(entry.getTargetName().toLowerCase() .split("" ""))); } } final Set<String> recordMinusEntry = new HashSet<>(recordWords); recordMinusEntry.remove(entryWords);  // If there are entry words and none match, warning if (entryWords.size() > 0 && recordWords.size() == recordMinusEntry.size()) { result .addWarning(""From concept and target code names must share at least one word.""); }  return result; } "	0	0	0	1	0	0
"@Override public Object call() throws Exception {  Page<BibliographicEntity> bibliographicEntities = null; if (null == owningInstitutionId && null == fromDate) { bibliographicEntities = bibliographicDetailsRepository.findAll(new PageRequest(pageNum, docsPerPage)); } else if (null != owningInstitutionId && null == fromDate) { bibliographicEntities = bibliographicDetailsRepository.findByOwningInstitutionId(new PageRequest(pageNum, docsPerPage), owningInstitutionId); } else if (null == owningInstitutionId && null != fromDate) { bibliographicEntities = bibliographicDetailsRepository.findByLastUpdatedDateAfter(new PageRequest(pageNum, docsPerPage), fromDate); } else if (null != owningInstitutionId && null != fromDate) { bibliographicEntities = bibliographicDetailsRepository.findByOwningInstitutionIdAndLastUpdatedDateAfter(new PageRequest(pageNum, docsPerPage), owningInstitutionId, fromDate); }  logger.info(""Num Bibs Fetched : "" + bibliographicEntities.getNumberOfElements()); Iterator<BibliographicEntity> iterator = bibliographicEntities.iterator();   ExecutorService executorService = Executors.newFixedThreadPool(50); List<Future> futures = new ArrayList<>(); while (iterator.hasNext()) { BibliographicEntity bibliographicEntity = iterator.next(); Future submit = executorService.submit(new BibItemRecordSetupCallable(bibliographicEntity, solrTemplate, bibliographicDetailsRepository, holdingsDetailsRepository, producerTemplate)); futures.add(submit); }  logger.info(""Num futures to prepare Bib and Associated data : "",futures.size());  List<SolrInputDocument> solrInputDocumentsToIndex = new ArrayList<>(); for (Iterator<Future> futureIterator = futures.iterator(); futureIterator.hasNext(); ) { try { Future future = futureIterator.next(); SolrInputDocument solrInputDocument = (SolrInputDocument) future.get(); if(solrInputDocument != null) solrInputDocumentsToIndex.add(solrInputDocument); } catch (Exception e) { logger.error(RecapConstants.LOG_ERROR,e); } }  executorService.shutdown();  if (!CollectionUtils.isEmpty(solrInputDocumentsToIndex)) { SolrTemplate templateForSolr = new SolrTemplate(new HttpSolrClient(solrURL + File.separator + coreName)); templateForSolr.setSolrCore(coreName); templateForSolr.saveDocuments(solrInputDocumentsToIndex); templateForSolr.commit(); } return solrInputDocumentsToIndex.size(); } "	0	0	0	1	0	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);  preferences.applyTheme();  long timestamp = getIntent().getLongExtra(EXTRA_TIMESTAMP, currentTimeMillis()); initial = timestamp > 0 ? new DateTime(timestamp) : new DateTime().startOfDay();  FragmentManager fragmentManager = getFragmentManager(); MyDatePickerDialog dialog = (MyDatePickerDialog) fragmentManager.findFragmentByTag(FRAG_TAG_DATE_PICKER); if (dialog == null) { dialog = new MyDatePickerDialog(); dialog.initialize(null, initial.getYear(), initial.getMonthOfYear() - 1, initial.getDayOfMonth()); if (preferences.isDarkTheme()) { dialog.setAccentColor(getResources().getColor(R.color.black_text_hint)); } dialog.show(fragmentManager, FRAG_TAG_DATE_PICKER); } dialog.setOnDismissListener(this); dialog.setOnDateSetListener(this); } 	0	1	0	1	1	0
"private MockMvcRequestSpecification givenLocal() { return RestAssuredMockMvc.given().header(""user-agent"", ""Maven/*""); } "	0	0	0	1	0	0
"public static Cursor getStudy(Context c, String study_url) { return c.getContentResolver().query(Aware_Provider.Aware_Studies.CONTENT_URI, null, Aware_Provider.Aware_Studies.STUDY_URL + "" LIKE '"" + study_url + ""'"", null, Aware_Provider.Aware_Studies.STUDY_TIMESTAMP + "" DESC LIMIT 1""); } "	0	0	0	1	0	0
private Invocation.Builder configureInvocationBuilder(String url, T1User userMap, Client client) { logger.info(TARGET_URL, url); WebTarget webTarget = client.target(url); Invocation.Builder invocationBuilder = webTarget.request(); invocationBuilder.header(USER_AGENT, userAgent); invocationBuilder.header(ACCEPT, APPLICATION_VND_MEDIAMATH_V1_JSON); userSessionCheck(userMap, invocationBuilder); return invocationBuilder; } 	0	0	0	1	0	0
"@Test public void testSubtractAll1() throws Exception { ElementCounter<String> counter = new ElementCounter<String>(RemovalPolicy.BOTTOM_OUT);  counter.add(""1""); counter.add(""2""); counter.add(""2"");  counter.subtractAll(ArrayUtils.asList(""1"", ""2""));  Assert.assertEquals(2, counter.size());  Assert.assertEquals(true, counter.contains(""2""));  Assert.assertEquals(true, counter.contains(""1""));  Assert.assertEquals(0, counter.getCount(""1"")); } "	0	0	0	1	0	0
"public void createCampaign(int campaignLength) { Calendar campaignCalendar = Calendar.getInstance(); campaignCalendar.add(Calendar.MINUTE, 10); Intent intent = new Intent(this, CampaignEndAlarmReceiver.class); PendingIntent pendingIntent = PendingIntent.getBroadcast(this, CampaignEndAlarmReceiver.REQUEST_CODE, intent, 0); AlarmManager am = (AlarmManager) getApplicationContext().getSystemService(ALARM_SERVICE); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) { am.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, campaignCalendar.getTimeInMillis(), pendingIntent); } else { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { am.setExact(AlarmManager.RTC_WAKEUP, campaignCalendar.getTimeInMillis(), pendingIntent); } } Log.d(""CreateCampaign"", ""Campaign Created""); } "	0	0	0	1	0	0
"@POST @Path(""register"") @Produces(MediaType.APPLICATION_XML) @Consumes(MediaType.APPLICATION_FORM_URLENCODED) public Response registerIpt(@InjectParam LegacyInstallation installation, @Context SecurityContext security) { if (installation != null && security.getUserPrincipal() != null) { // set required fields String user = security.getUserPrincipal().getName(); installation.setCreatedBy(user); installation.setModifiedBy(user); // add contact and endpoint to installation installation.prepare(); // primary contact and hosting organization key are mandatory Contact primary = installation.getPrimaryContact(); if (primary != null && LegacyResourceUtils.isValid(installation, organizationService)) { // persist installation UUID key = installationService.create(installation.toApiInstallation()); // persist contact if (key != null) { // set primary contact's required fields primary.setCreatedBy(user); primary.setModifiedBy(user); // persist primary contact installationService.addContact(key, primary); // try to persist FEED endpoint (non-mandatory) Endpoint endpoint = installation.getFeedEndpoint(); if (endpoint != null) { // set endpoint's required fields endpoint.setCreatedBy(user); endpoint.setModifiedBy(user); installationService.addEndpoint(key, endpoint); } LOG.info(""IPT installation registered successfully, key=%s"", key.toString()); // construct GenericEntity response object expected by IPT GenericEntity<IptEntityResponse> entity = new GenericEntity<IptEntityResponse>(new IptEntityResponse(key.toString())) { }; // return Response return Response.status(Response.Status.CREATED).cacheControl(LegacyResourceConstants.CACHE_CONTROL_DISABLED) .entity(entity).build(); } else { LOG.error(""IPT installation could not be persisted!""); } } else { LOG.error(""Mandatory primary contact and/or hosting organization key missing or incomplete!""); } } LOG.error(""IPT installation registration failed""); return Response.status(Response.Status.BAD_REQUEST).cacheControl(LegacyResourceConstants.CACHE_CONTROL_DISABLED) .build(); } "	0	0	0	1	0	0
"private List<String> getSecuritySettings(final List<String> securityGroupId, final AmazonEC2Client amazonEC2Client) { DescribeSecurityGroupsResult result; List<SecurityGroup> securityGroups = new ArrayList<>(); try { DescribeSecurityGroupsRequest request = new DescribeSecurityGroupsRequest(); request.setGroupIds(securityGroupId);  result = amazonEC2Client.describeSecurityGroups(request);  securityGroups = result.getSecurityGroups(); } catch (Exception e) { LOG.error(""Could not fetch security groups from Amazon"" + e); }   List<String> securityRules = new ArrayList<>(); for (SecurityGroup securityGroup : securityGroups) { securityRules.add(securityGroup.toString()); }  return securityRules; } "	0	0	0	1	0	0
"public AccountBalance getAccountBalance(final String accountCode) { return doGET(Account.ACCOUNT_RESOURCE + ""/"" + accountCode + ""/"" + AccountBalance.ACCOUNT_BALANCE_RESOURCE, AccountBalance.class); } "	0	0	0	1	0	0
"public void onBluetoothServiceDown() { if (DBG) Log.d(TAG, ""onBluetoothServiceDown: "" + mService);  try { mServiceLock.writeLock().lock(); mService = null; if (mLeScanClients != null) mLeScanClients.clear(); if (sBluetoothLeAdvertiser != null) sBluetoothLeAdvertiser.cleanup(); if (sBluetoothLeScanner != null) sBluetoothLeScanner.cleanup(); } finally { mServiceLock.writeLock().unlock(); }  synchronized (mProxyServiceStateCallbacks) { for (IBluetoothManagerCallback cb : mProxyServiceStateCallbacks ){ try { if (cb != null) { cb.onBluetoothServiceDown(); } else { Log.d(TAG, ""onBluetoothServiceDown: cb is null!!!""); } } catch (Exception e) { Log.e(TAG,"""",e); } } } } "	0	0	0	1	0	0
"private void validateMinOffset(int top, int right, int bottom, int left) { if (rootElement.getLeftOffset(page) < left) { addError(String.format(""Expected min left offset of element  '%s' is: %spx. Actual left offset is: %spx"", rootElement.getName(), left, rootElement.getX())); } if (rootElement.getTopOffset(page) < top) { addError(String.format(""Expected min top offset of element  '%s' is: %spx. Actual top offset is: %spx"", rootElement.getName(), top, rootElement.getY())); } if (rootElement.getRightOffset(page) < right) { addError(String.format(""Expected min top offset of element  '%s' is: %spx. Actual right offset is: %spx"", rootElement.getName(), right, rootElement.getRightOffset(page))); } if (rootElement.getBottomOffset(page) < bottom) { addError(String.format(""Expected min bottom offset of element  '%s' is: %spx. Actual bottom offset is: %spx"", rootElement.getName(), bottom, rootElement.getBottomOffset(page))); } } "	0	0	0	1	0	0
"private Pattern compileBranchFilterPattern() { Pattern branchFilterPattern; try { branchFilterPattern = Pattern.compile(branchFilter); } catch (Exception e) { LOGGER.log(Level.INFO, getCustomeJobName() + Messages.GitParameterDefinition_branchFilterNotValid(), e.getMessage()); branchFilterPattern = Pattern.compile("".*""); } return branchFilterPattern; } "	0	0	0	1	0	0
"@Before public void setUp() throws Exception { courseManagerWithDb_ = new CourseManagerWithDatabase(); Course course = new Course(""test01""); course.setCourseName(""Scurm敏捷方法實作班""); course.setType(""公開班""); course.setBatch(""401""); course.addDate(""2016-05-10""); course.setDuration(120); course.addTicketType(""VIP""); course.addPrice(100); course.setLocation(""Lab1421""); course.setLecturer(""Teddy""); course.setStatus(""準備中""); course.addCcAddresses(""test@test.com""); course.setHyperlink(""http://teddysoft.tw""); courseManagerWithDb_.addCourseIntoDatabase(course); } "	0	0	0	1	0	0
public LoaderItem getOccupantObject(int occupantID){  for(LoaderItem object: this.ItemList){ if(object.getItemID() == occupantID){ return object; } } return null; } 	0	0	0	1	0	0
"@Override public String toString() { return ""KeystoreSettings[location="" + this.keyStoreLocation + "", type="" + this.keyStoreType + ""]""; } "	0	0	0	1	0	0
private ZMQ.Socket buildRequester() { ZMQ.Socket s = context.socket(ZMQ.REQ); s.setReceiveTimeOut(3000); return s; } 	0	0	0	1	0	0
"private Component buildUserMenu() { final MenuBar settings = new MenuBar(); settings.addStyleName(""user-menu""); settings.setHtmlContentAllowed(true); final MenuItem settingsItem = settings.addItem("""", new ThemeResource(""images/profile-pic-57px.jpg""), null);  final String formattedTenant = UserDetailsFormatter.formatCurrentTenant(); final String formattedUsername = UserDetailsFormatter.loadAndFormatCurrentUsername(); String tenantAndUsernameHtml = """"; if (!StringUtils.isEmpty(formattedTenant)) { tenantAndUsernameHtml += formattedTenant + ""<br>""; } tenantAndUsernameHtml += formattedUsername; settingsItem.setText(tenantAndUsernameHtml); settingsItem.setDescription(formattedUsername); settingsItem.setStyleName(""user-menuitem"");  settingsItem.addItem(""Sign Out"", selectedItem -> Page.getCurrent().setLocation(""/UI/logout"")); return settings; } "	0	0	0	1	0	0
private void resizePreviewImage(){ if(previewIcon != null) { BufferedImage bufferedImg = new BufferedImage( PreviewImagePanel.getWidth(), PreviewImagePanel.getHeight(), BufferedImage.TYPE_INT_RGB); Graphics g = bufferedImg.createGraphics(); g.drawImage(previewIcon.getImage(), 0, 0, PreviewImagePanel.getWidth(), PreviewImagePanel.getHeight(), null); PreviewImagePanel.initializeImages(); PreviewImagePanel.setImage(bufferedImg); } } 	0	0	0	1	0	0
"private String getUsernameForUserId(int id) { if (id > 0) { String username = userIdentityStore.getPortalUserName(id); if (username != null) { return username; } logger.warn(""Invalid userID {} found when exporting a portlet; return system username instead""); } return systemUsername; } "	0	0	0	1	0	0
"@DELETE @Path(""/{networkId}/tables/{tableType}/columns/{columnName}"") public Response deleteColumn(@PathParam(""networkId"") Long networkId, @PathParam(""tableType"") String tableType, @PathParam(""columnName"") String columnName) {  final CyTable table = getTable(networkId, tableType); if (table != null) { try { table.deleteColumn(columnName); } catch(Exception e) { throw getError(""Could not delete column "" + columnName, e, Response.Status.INTERNAL_SERVER_ERROR); } return Response.ok().build(); } else { throw getError(""No such table type: "" + tableType, new NullPointerException(), Response.Status.NOT_FOUND); } } "	0	0	0	1	0	0
public ValidationStatus testStartEnd(Graph<NodeView, TransitionView> graph){ ValidationStatus result = ValidationStatus.NOT_VALID; boolean endFinded = false; boolean startFinded = false; Set<NodeView> nodes = graph.vertexSet(); for (NodeView node : nodes) { boolean endNode = true; boolean startNode = true; Set<TransitionView> transitionViews = graph.edgesOf(node); for (TransitionView transitionView : transitionViews) {  if (!endFinded && transitionView.getFrom() == node){ endNode = false; } if (!startFinded && transitionView.getTo() == node){ startNode = false; } } if (endNode) endFinded = true; if (startNode) startFinded = true; if (startFinded && endFinded) return ValidationStatus.VALID; } if (startFinded && endFinded) result = ValidationStatus.NOT_VALID_SATRT_AND_END_NODE; else if (!startFinded) result = ValidationStatus.NOT_VALID_START_NODE; else if (!endFinded) result = ValidationStatus.NOT_VALID_END_NODE; return result; } 	0	0	0	1	0	0
"private static void printCurrentLocationInformation() { final int WIDTH = 20;  // The width of the row's ""tag"". GameState gameState = Game.getGameState(); Point heroPosition = gameState.getHeroPosition(); Location location = gameState.getWorld().getLocation(heroPosition); StringBuilder sb = new StringBuilder(); sb.append(Utils.padString(""Point:"", WIDTH)).append(heroPosition.toString()).append('\n'); sb.append(Utils.padString(""Creatures ("" + location.getCreatureCount() + ""):"", WIDTH)).append('\n'); for (Creature creature : location.getCreatures()) { sb.append(Utils.padString(""  "" + creature.getName(), WIDTH)); sb.append(creature.getVisibility().toPercentage()).append('\n'); } if (!location.getItemList().isEmpty()) { sb.append(Utils.padString(""Items ("" + location.getItemList().size() + ""):"", WIDTH)).append('\n'); for (Item item : location.getItemList()) { sb.append(Utils.padString(""  "" + item.getQualifiedName(), WIDTH)); sb.append(item.getVisibility().toPercentage()).append('\n'); } } else { sb.append(""No items.\n""); } sb.append(Utils.padString(""Luminosity:"", WIDTH)).append(location.getLuminosity().toPercentage()).append('\n'); sb.append(Utils.padString(""Permittivity:"", WIDTH)).append(location.getLightPermittivity()).append('\n'); sb.append(Utils.padString(""Blocked Entrances:"", WIDTH)).append(location.getBlockedEntrances()).append('\n'); IO.writeString(sb.toString()); } "	0	0	0	1	0	0
"void createDeclarationField(Composite composite) { new Label(composite, SWT.NONE);  Button dec = new Button(composite, SWT.CHECK); dec.setText(""create toplevel class or method declaration""); dec.setSelection(declaration); dec.setEnabled(!declarationButtonDisabled); GridData igd= new GridData(GridData.HORIZONTAL_ALIGN_FILL); igd.horizontalSpan = 3; igd.grabExcessHorizontalSpace = true; dec.setLayoutData(igd); dec.addSelectionListener(new SelectionListener() { @Override public void widgetSelected(SelectionEvent e) { declaration = !declaration; } @Override public void widgetDefaultSelected(SelectionEvent e) {} }); } "	0	0	0	1	0	0
"public void removePath(OPath path) { Block block = path.getBlock(); if (block == null) { log.error(""Path \"""" + path.getName() + ""\"" has no block.""); return; } //if (log.isDebugEnabled()) log.debug(""removePath: ""+toString()); if (!this.equals(path.getFromPortal()) && !this.equals(path.getToPortal())) { return; } if (_fromBlock != null && _fromBlock.equals(block)) { _fromPaths.remove(path); } else if (_toBlock != null && _toBlock.equals(block)) { _toPaths.remove(path); } } "	0	0	0	1	0	0
public void accept(String gameId, char player) throws IOException, RuntimeException { sendCommand(IMCSCommands.ACCEPT, gameId, player); awaitResponse().assertHasCode(105); // game started } 	0	0	0	1	0	0
"@Test public void testOverrideAssignFrom3() { Map<String,Value> context = new HashMap<>(); context.put(""input1"",ValueFactory.create(5)); Input input = new Input.InputBuilder(""input1"", null, false) .withRequired(false) .withPrivateInput(true) .build(); List<Input> inputs = Collections.singletonList(input);  Map<String,Value> result = bindInputs(inputs, context); Assert.assertFalse(result.isEmpty()); Assert.assertTrue(result.containsKey(""input1"")); Assert.assertEquals(""'not private' disables the assignFrom func..."",null, result.get(""input1"")); Assert.assertEquals(1, result.size()); } "	0	0	0	1	0	0
"private RigidBody newRigidBody(EntityRef entity) { LocationComponent location = entity.getComponent(LocationComponent.class); RigidBodyComponent rigidBody = entity.getComponent(RigidBodyComponent.class); btConvexShape shape = getShapeFor(entity); if (location != null && rigidBody != null) { float scale = location.getWorldScale(); shape.setLocalScaling(new Vector3(scale, scale, scale));  if (rigidBody.mass < 1) { logger.warn(""RigidBodyComponent.mass is set to less than 1.0, this can lead to strange behaviour, such as the objects moving through walls. "" + ""Entity: {}"", entity); } Vector3 inertia = Vector3.Zero; shape.calculateLocalInertia(rigidBody.mass,inertia);  btRigidBody.btRigidBodyConstructionInfo info = new btRigidBody.btRigidBodyConstructionInfo(rigidBody.mass, new EntityMotionState(entity), shape, inertia); BulletRigidBody collider = new BulletRigidBody(info); collider.rb.userData = entity; collider.rb.setAngularFactor(VecMath.to(rigidBody.angularFactor)); collider.rb.setLinearFactor(VecMath.to(rigidBody.linearFactor)); collider.rb.setFriction(rigidBody.friction); collider.collidesWith = combineGroups(rigidBody.collidesWith); collider.setVelocity(rigidBody.velocity, rigidBody.angularVelocity); collider.setTransform(location.getWorldPosition(), location.getWorldRotation()); updateKinematicSettings(rigidBody, collider); BulletRigidBody oldBody = entityRigidBodies.put(entity, collider); addRigidBody(collider, Lists.<CollisionGroup>newArrayList(rigidBody.collisionGroup), rigidBody.collidesWith); if (oldBody != null) { removeRigidBody(oldBody); } return collider; } else { throw new IllegalArgumentException(""Can only create a new rigid body for entities with a LocationComponent,"" + "" RigidBodyComponent and ShapeComponent, this entity misses at least one: "" + entity); } } "	0	0	0	1	0	0
"@Test public void testObjectMaps() throws Exception { HashMap<Fire,Fire> result = foo.objectMaps(new TreeMap<Boolean,String>(new HashMap<Boolean,String>(){{put(Boolean.TRUE,""String"");}}), new HashMap<Integer,Boolean>(){{put(0,Boolean.TRUE);}}, new HashMap<Fire,Fire>(){{put(new Fire(),new Fire());}}); Assert.assertEquals(new HashMap<Fire,Fire>(){{put(new Fire(),new Fire());}}, result); } "	0	0	0	1	0	0
"public static void load(){ robot=new BufferedImage[5]; try { for(int i=0;i<5;i++) robot[i]=ImageIO.read(new File(""robot"" + i +"".png""));  miniRobot=ImageIO.read(new File(""miniRobot.png"")); oil=ImageIO.read(new File(""oil.png"")); slime=ImageIO.read(new File(""slime.png"")); map=ImageIO.read(new File(""map.png"")); } catch (IOException e) { // TODO Auto-generated catch block System.out.println(""Failed to load images""); } } "	0	0	0	1	0	0
public static boolean isIdInventoryHolder(int id) { return id == 54 || id == 146 || id == 154 || id == 61 || id == 379 || id == 23 || id == 158 || id == 117; } 	0	0	0	1	0	0
private Node getNextNode(ImmutableList<Node> pool, int overflow) {  if (overflow == pool.size()) { return null; }  int idx = last.getAndIncrement(); if (idx == pool.size()) { last.set(1); idx = 0; }  Node nextNode = pool.get(idx); if (okToPick(nextNode)) { return nextNode; } else { return getNextNode(pool, ++overflow); } } 	1	1	1	1	1	0
"public Domain deleteDomain(Domain domain) throws StoreException { Domain savedDomain = this.getDomain(domain.getDomainid()); if (savedDomain==null) { return null; }  Connection conn = dbConnect(); Statement stmt=null; String query = ""DELETE FROM domains WHERE domainid="" + domain.getDomainid(); try { stmt=conn.createStatement(); int deleteCount = stmt.executeUpdate(query); debug(""deleted "" + deleteCount + "" records""); stmt.close(); dbClose(); return savedDomain; } catch (SQLException s) { dbClose(); throw new StoreException(""SQL Exception : "" + s); } } "	0	0	0	1	0	0
"public Domain putDomain(Domain domain) throws StoreException { Domain savedDomain = this.getDomain(domain.getDomainid()); if (savedDomain==null) { return null; }  if (domain.getDescription()!=null) { savedDomain.setDescription(domain.getDescription()); } if (domain.getName()!=null) { savedDomain.setName(domain.getName()); } if (domain.getEnabled()!=null) { savedDomain.setEnabled(domain.getEnabled()); }  Connection conn = dbConnect(); try { String query = ""UPDATE domains SET name = ?, description = ?, enabled = ? WHERE domainid = ?""; PreparedStatement statement = conn.prepareStatement(query); statement.setString(1, savedDomain.getName()); statement.setString(2, savedDomain.getDescription()); statement.setInt(3, savedDomain.getEnabled()?1:0); statement.setInt(4,savedDomain.getDomainid()); statement.executeUpdate(); statement.close(); dbClose(); } catch (SQLException s) { dbClose(); throw new StoreException(""SQL Exception : "" + s); }  return savedDomain; } "	0	0	0	1	0	0
public void seekOverEntireShow(long seekToMillis) { long[] segmentBounds = mediaSource.show.getSegmentBounds(); for (int i = 0; i < segmentBounds.length; i++) { if (seekToMillis < segmentBounds[i]) { // load segment i playArchiveHour(i); //seek to adjusted position long thisSegmentStart = (i == 0) ? 0 : segmentBounds[i-1]; long extraSeek = (i == 0) ? 0 : mediaSource.show.getHourPaddingTimeMillis(); long localSeekTo = seekToMillis - thisSegmentStart + extraSeek; seek(localSeekTo); return; } } } 	1	1	1	1	1	0
public final ProgContext prog() throws RecognitionException { ProgContext _localctx = new ProgContext(_ctx, getState()); enterRule(_localctx, 16, RULE_prog); try { enterOuterAlt(_localctx, 1); { setState(104); ((ProgContext)_localctx).exp_0 = exp(0); ((ProgContext)_localctx)._prog =  builder.start((((ProgContext)_localctx).exp_0._exp)); } } catch (RecognitionException re) { _localctx.exception = re; _errHandler.reportError(this, re); _errHandler.recover(this, re); } finally { exitRule(); } return _localctx; } 	0	0	0	1	0	0
@Test public void shouldReturnZeroIfNoUri() { Assert.assertEquals(0, throughputReport.get()); } 	0	0	0	1	0	0
@Test public void shouldReturnThroughputEvenIfOneHttpSample() { HttpSample httpSample1 = new HttpSample(); httpSample1.setDate(new Date()); httpSample1.setDuration(1000);  uriReport.addHttpSample(httpSample1);  Assert.assertEquals(1, throughputUriReport.get()); } 	0	0	0	1	0	0
private boolean mayConnect(Component component, MotionEvent event) { return (component != null & event.getAction() == MotionEvent.ACTION_DOWN); } 	0	0	0	1	0	0
"@Override public Copy deriveJp2ImageCopy(Path jp2Converter, Path imgConverter) throws IllegalStateException, IOException, InterruptedException, Exception { ImageFile imgFile = this.getImageFile(); String mimeType = imgFile.getMimeType();  // Do we need to check? if (!(mimeType.equals(""image/tiff"") || mimeType.equals(""image/jpeg""))) { throw new IllegalStateException(this.getWork().getObjId() + "" master is not a tiff or jpeg. You may not generate a jpeg2000 from anything but a tiff or a jpeg""); }  Path stage = null; try { // create a temporary file processing location for deriving the jpeg2000 from the master/comaster stage = Files.createTempDirectory(""amberdb-derivative"");  // assume this Copy is a master copy and access the amber file Long imgBlobId = (this.getFile() == null)? null: this.getFile().getBlobId();  // get this copy's blob store. BlobStore doss = AmberSession.ownerOf(g()).getBlobStore();  // generate the derivative. Path jp2ImgPath = generateJp2Image(doss, jp2Converter, imgConverter, stage, imgBlobId);  // add the derived jp2 image to this Copy's work as an access copy Copy ac = null; if (jp2ImgPath != null) { Work work = this.getWork();  // Replace the derivative for this copy, not all. Iterable<Copy> derivatives = this.getDerivatives(); if (Iterables.size(derivatives) != 0) { ac = work.addCopy(jp2ImgPath, CopyRole.ACCESS_COPY, ""image/jp2""); ac.setSourceCopy(this); } else { ac = Iterables.get(derivatives, 0); ac.getImageFile().put(jp2ImgPath); }  ImageFile acf = ac.getImageFile(); acf.setLocation(jp2ImgPath.toString());  // add image metadata based on the master image metadata // this is used by some nla delivery systems eg: tarkine acf.setImageLength(imgFile.getImageLength()); acf.setImageWidth(imgFile.getImageWidth()); acf.setResolution(imgFile.getResolution()); acf.setFileFormat(""jpeg2000""); acf.setFileSize(Files.size(jp2ImgPath)); } return ac;  } catch (Exception e) { throw e; } finally { // clean up temporary working space java.io.File[] files = stage.toFile().listFiles(); if (files != null) { for (java.io.File f : files) { f.delete(); } } stage.toFile().delete(); } } "	1	1	1	1	1	0
"public int[] getDamage() { String[] s = this.config.getString(""damage"").split("",""); int[] a = new int[s.length]; for (int i = 0; i < s.length; i++) { a[i] = (Integer.parseInt(s[i]) + getLevel()); } return a; } "	1	1	1	1	1	0
"public void removeSearchQueryResults() { hideSearchResultCount(); if(!m_editingText) { m_editText.setText(""""); showCloseButtonView(false); } } "	1	1	1	1	1	0
"private static String getCSVData(List<TaskTranslation> list) { StringBuffer buffer = new StringBuffer(); buffer.append(""Task Id""); buffer.append("",""); buffer.append(""Original Text""); buffer.append("",""); buffer.append(""Translated Text""); buffer.append("",""); buffer.append(""Answer Code""); buffer.append(""\n"");  if (list != null) { Iterator<TaskTranslation> iterator = list.iterator(); while (iterator.hasNext()) { TaskTranslation translation = iterator.next(); buffer.append(Long.toString(translation.getTaskId())); buffer.append("",""); buffer.append(""\""""+translation.getCSVFormattedOriginalText()+""\""""); buffer.append("",""); buffer.append("",""); buffer.append(""\n"");  } } return buffer.toString(); } "	1	1	0	1	0	0
"@Override public String toSanitisationString() {  StringBuilder args = new StringBuilder();  args.append(getArchive().getAbsolutePath() + "" ""); args.append(getCommitMessage() + "" ""); args.append(getRepository().getIdentifier() + "" ""); args.append(getIdentifier() + "" "");  StringBuilder partnerNames = new StringBuilder(); StringBuilder partnerURLs = new StringBuilder();  Iterator<FederationConfiguration> it = getRepository().getFederationConfigurations().iterator(); while(it.hasNext()) { FederationConfiguration fedConfig = it.next(); if(fedConfig.outboundEnabled) { Partner partner = fedConfig.getPartner(); partnerNames.append(partner.getName()); partnerURLs.append(partner.getUrl()); if(it.hasNext()) { partnerNames.append(""|""); partnerURLs.append(""|""); } } }  args.append(""\"""" + StringUtils.strip(partnerURLs.toString(), ""|"") + ""\"" ""); args.append(""\"""" + StringUtils.strip(partnerNames.toString(), ""|"") + ""\"""");  return args.toString(); } "	1	1	0	1	0	0
"@Override protected AccountStatus doInBackground(String... params) {  // get inputs String displayName = params[0]; String username = params[1]; String email = params[2]; String password = params[3]; String serverURL = params[4];  // Make sure you have connectivity if (!ConnectivityUtility.isOnline(mApplicationContext)) { List<Integer> errorIndices = new ArrayList<Integer>(); errorIndices.add(5); List<String> errorMessages = new ArrayList<String>(); errorMessages.add(""No connection""); return new AccountStatus(AccountStatus.Status.FAILED_SIGNUP, errorIndices, errorMessages); }  String uuid = new DeviceUuidFactory(mApplicationContext).getDeviceUuid().toString(); if (uuid == null) { List<Integer> errorIndices = new ArrayList<Integer>(); errorIndices.add(5); List<String> errorMessages = new ArrayList<String>(); errorMessages.add(""Problem generating device uuid""); return new AccountStatus(AccountStatus.Status.FAILED_SIGNUP, errorIndices, errorMessages); }  // is server a valid URL? (already checked username and password) try { new URL(serverURL); } catch (MalformedURLException e) { List<Integer> errorIndices = new ArrayList<Integer>(); errorIndices.add(5); List<String> errorMessages = new ArrayList<String>(); errorMessages.add(""Bad URL""); return new AccountStatus(AccountStatus.Status.FAILED_SIGNUP, errorIndices, errorMessages); } HttpEntity entity = null; try { DefaultHttpClient httpclient = HttpClientManager.getInstance(mApplicationContext).getHttpClient(); HttpPost post = new HttpPost(new URL(new URL(serverURL), ""api/users"").toURI());  List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(3); nameValuePairs.add(new BasicNameValuePair(""password"", password)); nameValuePairs.add(new BasicNameValuePair(""passwordconfirm"", password)); nameValuePairs.add(new BasicNameValuePair(""uid"", uuid)); nameValuePairs.add(new BasicNameValuePair(""username"", username)); nameValuePairs.add(new BasicNameValuePair(""email"", email)); nameValuePairs.add(new BasicNameValuePair(""displayname"", displayName)); post.setEntity(new UrlEncodedFormEntity(nameValuePairs)); HttpResponse response = httpclient.execute(post);  if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) { entity = response.getEntity(); JSONObject json = new JSONObject(EntityUtils.toString(entity)); return new AccountStatus(AccountStatus.Status.SUCCESSFUL_SIGNUP, new ArrayList<Integer>(), new ArrayList<String>(), json); } else { entity = response.getEntity(); String error = EntityUtils.toString(entity); Log.e(LOG_NAME, ""Bad request.""); Log.e(LOG_NAME, error); if(!StringUtils.isBlank(error)) { List<Integer> errorIndices = new ArrayList<Integer>(); errorIndices.add(5); List<String> errorMessages = new ArrayList<String>(); errorMessages.add(error); return new AccountStatus(AccountStatus.Status.FAILED_SIGNUP, errorIndices, errorMessages); } return new AccountStatus(AccountStatus.Status.FAILED_SIGNUP); } } catch (Exception e) { Log.e(LOG_NAME, ""Problem signing up."", e); } finally { try { if (entity != null) { entity.consumeContent(); } } catch (Exception e) { } }  return new AccountStatus(AccountStatus.Status.FAILED_SIGNUP); } "	1	1	0	1	0	0
"@Override protected String getMessage(OnlinePAFPlayer pPlayer) { String identifier; if (pPlayer.getSettingsWorth(0) == 1) { identifier = ""Friends.Command.Settings.CanJump""; } else { identifier = ""Friends.Command.Settings.CanNotJump""; } return Main.getInstance().getMessagesYml().getString(identifier); } "	1	1	0	1	0	0
@Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) { int width = right - left; int height = bottom - top; int barY = height - touchTargetHeight; int seekLeft = getPaddingLeft(); int seekRight = width - getPaddingRight(); int progressY = barY + (touchTargetHeight - barHeight) / 2; seekBounds.set(seekLeft, barY, seekRight, barY + touchTargetHeight); progressBar.set(seekBounds.left + scrubberPadding, progressY, seekBounds.right - scrubberPadding, progressY + barHeight); update(); } 	1	1	0	1	0	0
public final void configureDestruction(final int defaultTime, final DateField defaultTimeUnit, final int maxTime, final DateField maxTimeUnit, final boolean allowModif){ InputParamController controller = inputParamControllers.get(UWSJob.PARAM_DESTRUCTION_TIME);  // Cast the controller or built a new DestructionTimeController, if it does not exist: DestructionTimeController destructionController; if (controller == null || !(controller instanceof DestructionTimeController)){ destructionController = new DestructionTimeController(); inputParamControllers.put(UWSJob.PARAM_DESTRUCTION_TIME, controller); }else destructionController = (DestructionTimeController)controller;  // Configure the controller: destructionController.setMaxDestructionInterval(maxTime, maxTimeUnit); destructionController.setDefaultDestructionInterval(defaultTime, defaultTimeUnit); destructionController.allowModification(allowModif); } 	1	1	0	1	0	0
"private void enableEditMode(boolean animate) { if (animate && !isEmpty(true)) { mTextInputLayout.clearAnimation(); mTextView.clearAnimation(); String text = mEditText.getText().toString(); if (isInputTypePassword() && text.length() > 0) { text = String.format(Locale.US, ""%0"" + text.length() + ""d"", 0).replace('0', '•'); } mTextView.setText(text); mTextView.setVisibility(View.VISIBLE); final AnimationSet fadeIn = new AnimationSet(true); fadeIn.setDuration(500); fadeIn.setInterpolator(new AccelerateInterpolator()); fadeIn.addAnimation(new AlphaAnimation(0, 1)); final AnimationSet fadeOut = new AnimationSet(true); fadeOut.setDuration(700); fadeOut.setInterpolator(new AccelerateInterpolator()); fadeOut.addAnimation(new AlphaAnimation(1, 0)); mTextInputLayout.setVisibility(View.VISIBLE); mTextInputLayout.startAnimation(fadeIn); mTextView.startAnimation(fadeOut); (new Handler()).postDelayed(new Runnable() { @Override public void run() { mAnimationEnded = true; if (mCurrentMode == MODE_EDIT) { mTextView.setVisibility(View.INVISIBLE); } } }, 700); } else { mTextInputLayout.setVisibility(View.VISIBLE); mTextView.setVisibility(View.INVISIBLE); } mCurrentMode = MODE_EDIT; mEditText.setVisibility(View.VISIBLE); mEditText.setEnabled(true); } "	1	1	0	1	0	0
@Override public boolean removeAll(Collection<?> collection) { PreCon.notNull(collection);  boolean isModified = false; for (Object entry : collection) { isModified = isModified || remove(entry); } return isModified; } 	1	1	0	1	0	0
@Override public boolean addAll(Collection<? extends E> collection) { PreCon.notNull(collection);  boolean isModified = false; for (E entry : collection) { isModified = isModified || add(entry); } return isModified; } 	1	1	0	1	0	0
@Override public void sub( final T c ) { final short a = getShort(); setShort( ( byte ) ( a - c.getShort() ) ); } 	1	1	0	1	0	0
private void migrateWithSuccess(final MigrationInfo migration) { final InternalPartitionServiceImpl partitionService = (InternalPartitionServiceImpl) getPartitionService(instances[0]); partitionService.getMigrationManager().scheduleMigration(migration, REPARTITIONING); waitAllForSafeState(instances); } 	1	1	0	1	0	0
private void generate() { int k; int n = 1; for (int r = 0; r < 9; r++) { k = n; for (int c = 0; c < 9; c++) { if (k > 9) { k = 1; } this.soln[r][c] = k; k++; } n = k + 3; if (k == 10) { n = 4; } if (n > 9) { n = (n % 9) + 1; } } randomRow(); randomCol(); Random random = new Random(); int[] i = {0, 3, 6}; for (int j = 0; j < 2; j++) { int k1 = i[random.nextInt(i.length)]; int k2; do { k2 = i[random.nextInt(i.length)]; } while (k1 == k2); if (j == 1) { rowGroupChange(k1, k2); } else { colGroupChange(k1, k2); } } for (int r = 0; r < 9; r++) { System.arraycopy(soln[r], 0, board[r], 0, 9); } int[] rowVec = new int[9]; int[] colVec = new int[9]; for (int ind = 0; ind < 9; ind++) { rowVec[ind] = -1; colVec[ind] = -1; } for (int ind = 0; ind < 9; ind++) { int num; do { num = random.nextInt(9); } while (contains(rowVec, num)); rowVec[ind] = num; do { num = random.nextInt(9); } while (contains(colVec, num)); colVec[ind] = num; } for (int r = 0; r < 9; r++) { for (int c = 0; c < 9; c++) { strikeOut(rowVec[r], rowVec[c]); } } } 	1	1	0	1	0	0
"private int movePullUp(CfgBlock b) { int moved = 0; List<Statement> stmts = b.getStatements(); for (int i = 0; i+1 < stmts.size(); i++) { if (stmts.get(i+1) instanceof PullStatement) { PullStatement pull = (PullStatement) stmts.get(i+1); Statement s = stmts.get(i); if (s instanceof AssignStatement || s instanceof AssertStatement || s instanceof AssumeStatement) { //only swap if none of the vars in s point to the same location as any of the fields Set<IdentifierExpression> pullvars = pull.getIdentifierExpressions(); Set<IdentifierExpression> svars = s.getIdentifierExpressions(); if (distinct(svars,pullvars)) { b.swapStatements(i, i+1); if (debug) System.out.println(""Applied rule (V); swapped "" + s + "" and "" + pull); moved++; } } } } return moved; } "	1	1	0	1	0	0
"protected Map<Object, Object> setJsonMsgMap(Object... jsonKeyAndValuePair) { Map<Object, Object> jsonMap = new HashMap<Object, Object>();  if (msg.get() == null) { msg.set(""""); } if (statusCode.get() == null) { statusCode.set(StatusCode.OK); } if (callback.get() == null) { callback.set(""""); } if (locationUrl.get() == null) { locationUrl.set(""""); }  jsonMap.put(""msg"", msg.get()); jsonMap.put(""statusCode"", statusCode.get()); jsonMap.put(""callback"", callback.get()); jsonMap.put(""locationUrl"", locationUrl.get()); if (jsonKeyAndValuePair.length > 0) { for (int i = 0; i < jsonKeyAndValuePair.length / 2; i++) { jsonMap.put(jsonKeyAndValuePair[i], jsonKeyAndValuePair[2 * i + 1]); } } clearThreadLocalResponse(); return jsonMap; } "	1	1	0	1	0	0
