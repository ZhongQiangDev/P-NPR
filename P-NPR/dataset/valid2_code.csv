text	recoder	tare	rewardrepair	selfapr	gamma	allfailure
"@Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() .antMatchers(""/login"").permitAll() .antMatchers(""/secure/**"").authenticated() .and().formLogin().loginPage(""/login"").defaultSuccessUrl(""/secure/welcome"") .and().exceptionHandling().accessDeniedPage(""/login?error=true"") .and().logout().invalidateHttpSession(true).logoutSuccessUrl(""/login?logout"") .and().csrf().disable();  } "	0	0	0	0	0	1
@Override public Iterator<Object> iterator() { try { return new MultiConverterIterator(inputRecord, workUnit); } catch (DataConversionException dce) { throw new RuntimeException(dce); } } 	0	0	0	0	0	1
"public static void addStateEntry(String interfaceName, DataBroker dataBroker, WriteTransaction interfaceOperShardTransaction, IdManagerService idManager, List<ListenableFuture<Void>> futures, org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface ifState) { // allocate lport tag and create interface-if-index map. // This is done even if interface-state is not present, so that there is // no throttling // on id allocation even when multiple southbound port_up events come in // one shot Integer ifIndex = IfmUtil.allocateId(idManager, IfmConstants.IFM_IDPOOL_NAME, interfaceName); InterfaceMetaUtils.createLportTagInterfaceMap(interfaceOperShardTransaction, interfaceName, ifIndex); if (ifState == null) { LOG.debug(""could not retrieve interface state corresponding to {}"", interfaceName); return; } LOG.debug(""adding interface state for {}"", interfaceName); org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface.OperStatus operStatus = ifState .getOperStatus(); PhysAddress physAddress = ifState.getPhysAddress(); org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface.AdminStatus adminStatus = ifState .getAdminStatus(); NodeConnectorId nodeConnectorId = new NodeConnectorId(ifState.getLowerLayerIf().get(0)); InterfaceKey interfaceKey = new InterfaceKey(interfaceName); org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.Interface interfaceInfo = InterfaceManagerCommonUtils .getInterfaceFromConfigDS(interfaceKey, dataBroker);  if (interfaceInfo != null && !interfaceInfo.isEnabled()) { operStatus = org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface.OperStatus.Down; }  InstanceIdentifier<org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface> ifStateId = IfmUtil .buildStateInterfaceId(interfaceName); List<String> childLowerLayerIfList = new ArrayList<>(); childLowerLayerIfList.add(0, nodeConnectorId.getValue()); InterfaceBuilder ifaceBuilder = new InterfaceBuilder().setAdminStatus(adminStatus).setOperStatus(operStatus) .setPhysAddress(physAddress).setLowerLayerIf(childLowerLayerIfList); ifaceBuilder.setIfIndex(ifIndex);  if (interfaceInfo != null) { ifaceBuilder.setType(interfaceInfo.getType()); } ifaceBuilder.setKey(IfmUtil.getStateInterfaceKeyFromName(interfaceName)); interfaceOperShardTransaction.put(LogicalDatastoreType.OPERATIONAL, ifStateId, ifaceBuilder.build(), true);  // install ingress flow BigInteger dpId = IfmUtil.getDpnFromNodeConnectorId(nodeConnectorId); long portNo = IfmUtil.getPortNumberFromNodeConnectorId(nodeConnectorId); if (interfaceInfo != null && interfaceInfo.isEnabled() && ifState .getOperStatus() == org.opendaylight.yang.gen.v1.urn.ietf.params.xml.ns.yang.ietf.interfaces.rev140508.interfaces.state.Interface.OperStatus.Up) { FlowBasedServicesUtils.installLportIngressFlow(dpId, portNo, interfaceInfo, futures, dataBroker, ifIndex); FlowBasedServicesUtils.bindDefaultEgressDispatcherService(dataBroker, futures, interfaceInfo, Long.toString(portNo), interfaceName, ifIndex); }  // Update the DpnToInterfaceList OpDS createOrUpdateDpnToInterface(dpId, interfaceName,interfaceOperShardTransaction); } "	0	0	0	0	0	1
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Intent intent = this.getIntent();  GeoPointDto geoPointFromIntent = getGeoPointDtoFromIntent(intent);  mUsePicker = (Intent.ACTION_PICK.equals(intent.getAction()));  String extraTitle = intent.getStringExtra(Intent.EXTRA_TITLE); if (extraTitle == null && (geoPointFromIntent == null)) { extraTitle = getString(R.string.app_name); } if (extraTitle == null) { //            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) // must be called before this.setContentView(...) else crash this.requestWindowFeature(Window.FEATURE_NO_TITLE); }  mPrefs = PreferenceManager.getDefaultSharedPreferences(this); //Drawable clusterIconD = getResources().getDrawable(R.drawable.marker_cluster); mPoiIconWithData = getResources().getDrawable(R.drawable.marker_green); mPoiIconWithoutData = getResources().getDrawable(R.drawable.marker_no_data);  mResourceProxy = new ResourceProxyImpl(getApplicationContext());  this.setContentView(R.layout.mapview);  mMapView = (MapView) this.findViewById(R.id.mapview);  final List<Overlay> overlays = this.mMapView.getOverlays();  if (extraTitle != null) { this.setTitle(extraTitle); } else { setNoTitle(); }  mUseClusterPoints = mPrefs.getBoolean(PREFS_CLUSTER_POINTS, true);  mPOIOverlayNonCluster = (mUseClusterPoints) ? null : new FolderOverlay(this); mPOIOverlayCluster = (mUseClusterPoints) ? createPointOfInterestOverlay(overlays) : null;  final IGeoInfoHandler pointCollector = (mUseClusterPoints) ? new IGeoInfoHandler() { @Override public boolean onGeoInfo(IGeoPointInfo aGeoPoint) { if (aGeoPoint != null) { mPOIOverlayCluster.add(createMarker(mMapView, aGeoPoint)); } return true; } } : new IGeoInfoHandler() { @Override public boolean onGeoInfo(IGeoPointInfo aGeoPoint) { if (aGeoPoint != null) { mPOIOverlayNonCluster.add(createMarker(mMapView, aGeoPoint)); } return true; } };  pointCollector.onGeoInfo(geoPointFromIntent);  if (geoPointFromIntent != null) { initialWindow = new GeoBmpDto(geoPointFromIntent); BitmapDrawable drawable = (BitmapDrawable) getResources().getDrawable(R.drawable.marker_no_data); initialWindow.setBitmap(drawable.getBitmap());  initialWindow.setName(getString(R.string.bookmark_template_initial) + geoPointFromIntent.getName()); }  loadGeoPointDtosFromFile(intent, pointCollector);  AbstractList<? extends Overlay> items = (mUseClusterPoints) ? mPOIOverlayCluster.getItems() : mPOIOverlayNonCluster.getItems(); final int zoom = (geoPointFromIntent != null) ? geoPointFromIntent.getZoomMin() : GeoPointDto.NO_ZOOM; this.mDelayedSetCenterZoom = (items.size() > 0) ? new DelayedSetCenterZoom(items, zoom) : null; if (items.size() == 0) { loadDemoItems(pointCollector); }  createMyLocationOverlay(overlays);  createMiniMapOverlay(overlays);  createZoomBar();  // interactive overlay last=on top if (geoPointFromIntent != null) { final String title = geoPointFromIntent.getName(); createMarkerOverlayForMovablePosition(overlays, mMapView, title, toOsmGeoPoint(geoPointFromIntent)); }  mGuesturesOverlay = new GuestureOverlay(this); overlays.add(mGuesturesOverlay);  mMapView.setMultiTouchControls(true);  loadFromSettings(); // setCenterZoom does not work in Android2.1-onCreate() because getHeight() and getWidth() return 0; // initial center must be set later // see http://stackoverflow.com/questions/10411975/how-to-get-the-width-and-height-of-an-image-view-in-android/10412209#10412209 //        if (initalMapCenterZoom != null) { //            setCenterZoom(initalMapCenterZoom); //        }  this.bookmarkListOverlay = new BookmarkListOverlay(this, this) { @Override protected void onSelChanged(GeoBmpDto newSelection) { super.onSelChanged(newSelection);  if (newSelection != null) { setDelayedCenterZoom(newSelection); } } };  // else html a-href-links do not work. TextView t2 = (TextView) findViewById(R.id.cright_osm); t2.setMovementMethod(LinkMovementMethod.getInstance()); } 	0	0	0	0	0	1
"public static void sendEopUpdateEmailNotification(Event event,HttpServletRequest requestParameters) { log.log(Level.INFO, ""Updates to EOP Notification ""); String emailMsg =""""; User userObj = (User)requestParameters.getSession().getAttribute(""currUserObj""); try{ EopMaintenance eopMaintenance = new EopMaintenance(); String eventDate = event.getEventDate()!=null ? LMSUtil.converDateIntoDD_MMM_YYYY(event.getEventDate()).replaceAll(""-"", "" "") : """"; String startTime = event.getStartTime()!=null?LMSUtil.converDateIntoHHMMAMPM(event.getStartTime()):""""; //String endTime = event.getEndTime()!=null?LMSUtil.converDateIntoHHMMAMPM(event.getEndTime()):"""";  EventCandidate candidate=eopMaintenance.getEopCandidateCode(event.getEvent_code()); AddressBookMaintenance addressBookMaintenance = new AddressBookMaintenance(); AddressBook addressBook = new AddressBook(); addressBook.setAddressCode(Integer.parseInt(candidate.getEventCandidateCode())); addressBook = addressBookMaintenance.getAddressBook(addressBook);  String pFileName = """",tFileName=""""; if(event.getProfilePath()!=null && event.getProfilePath().length() > 0){ pFileName = event.getProfilePath().substring(event.getProfilePath().lastIndexOf('/') + 1); } if(event.getTopicPath()!=null && event.getTopicPath().length() > 0){ tFileName = event.getTopicPath().substring(event.getTopicPath().lastIndexOf('/') + 1); } ArrayList<String> mailIds = eopMaintenance.getRegisteredEmailAddressForParticularEvent(event.getEvent_code()); String emailAddr = """"; if(mailIds!=null && mailIds.size()>0){ for(int i = 0; i < mailIds.size(); i++) { if(i==0) emailAddr = mailIds.get(i); else emailAddr = emailAddr + "", "" + mailIds.get(i); }    String gender = """"; if(""F"".equalsIgnoreCase(candidate.getGender())) gender = ""小姐""; else gender=""先生"";    Session session = null; session = getProps(); MimeMessage msg = new MimeMessage(session);  msg.setFrom(new InternetAddress(FROM)); msg.setSubject(""EOP更新"",""UTF-8"");  emailMsg =""尊敬的  "" +candidate.getCandidateName() + gender+"",""+""\n\n""+ ""您报名的面试进行了更新，请重新查看面试信息，若有需要请联系您的营销员  ""+candidate.getCandidateName() + gender+"",""+""\n\n""+ ""活动名称：""+event.getEventName()+""\n""+ ""活动日期：""+eventDate+""\n""+ ""活动开始时间：""+startTime+""\n""+ //""结束 时间:""+endTime+""\n""+ ""主讲人："" +event.getSpeaker()+""\n""+ ""地点："" + event.getLocation()+""\n""+ ""描述："" + event.getEopDescription()+""\n""+ ""附件：""+ pFileName + "", "" + tFileName +""\n\n""+ //	    					""报名的 : \n\n\n""+myString.replaceAll(""^\\s+|\\s+$"", """") ""此为系统邮件，请勿直接回复。 \n\n""+ ""祝您：身体健康 万事如意""+""\n\n"" + ""AIA CHINA"" ;   ArrayList<EventMaterial> list=new ArrayList<EventMaterial>();  list=eopMaintenance.getMaterialForMail(event.getEvent_code()); MimeBodyPart messageBodyPart =  new MimeBodyPart(); messageBodyPart.setText(emailMsg,""utf-8"");  Multipart multipart = new MimeMultipart(); multipart.addBodyPart(messageBodyPart); if(list!=null){ for (EventMaterial material:list ) {  DataSource source = new  ByteArrayDataSource(material.getMaterial(),""application/octet-stream""); MimeBodyPart attachmentPart = new MimeBodyPart(); attachmentPart.setDataHandler(new DataHandler(source)); attachmentPart.setFileName(material.getMaterialName()); multipart.addBodyPart(attachmentPart); } } if(addressBook.getQrCode()!=null && addressBook.getQrCode().length > 0){ DataSource source = new  ByteArrayDataSource(addressBook.getQrCode(),""application/octet-stream""); MimeBodyPart attachmentPart = new MimeBodyPart(); attachmentPart.setDataHandler(new DataHandler(source)); attachmentPart.setFileName(""QR_CODE_IMAGE.jpeg""); multipart.addBodyPart(attachmentPart); }  msg.setRecipients(javax.mail.Message.RecipientType.TO, InternetAddress.parse(emailAddr, false)); msg.setContent(multipart); Transport.send(msg);  log.log(Level.INFO, ""sending succesfull""); }else{  log.log(Level.INFO, ""No Recipient Email Address Found""); } } catch(Exception e) { log.log(Level.SEVERE, e.getMessage()); e.printStackTrace(); LogsMaintenance logsMain=new LogsMaintenance(); StringWriter errors = new StringWriter(); e.printStackTrace(new PrintWriter(errors)); logsMain.insertLogs(""EmailNotification"",Level.SEVERE+"""",errors.toString()); }  } "	0	0	0	0	0	1
protected Object parseProperty(MetadataParser<T> p, Object property) { switch(p.getType(property)) { case VALUE: return property; case LIST: ArrayList<Object> resultList=new ArrayList<>(); List<T> list=p.getObjectList((T)property); for(T element:list) { resultList.add(parseProperty(p,element)); } return resultList; case MAP: Set<String> children=p.getChildNames((T)property); Map<String,Object> resultMap=new HashMap<>(); for(String child:children) { resultMap.put(child,parseProperty(p,p.getObjectProperty((T)property,child))); } return resultMap; } return null; } 	0	0	0	0	0	1
@Override public List<ResourceInstance> listResourceInstances(String gooruContentId, String type) { return getSegmentRepository().listResourceInstances(gooruContentId, type); } 	0	0	0	0	0	1
@Override public int findViews(String contentGooruId) { return getResourceRepository().findViews(contentGooruId); } 	0	0	0	0	0	1
@Override public Job saveJob(File sourceFile, ConverterDTO converterDTO, User user) {  Job job = new Job(); job.setGooruOid(converterDTO.getGooruContentId()); job.setUser(user); job.setFileSize(sourceFile.length()); converterDTO.setSourcePath(sourceFile.getPath()); String type = JobType.Type.PPTCONVERSION.getType(); if (FileProcessor.getFileExt(sourceFile.getName()).equals(PDF)) { type = JobType.Type.PDFCONVERSION.getType(); } job.setJobType((JobType) learnguideRepository.get(JobType.class, type)); job.setStatus(Job.Status.INPROGRESS.getStatus()); learnguideRepository.save(job); return job; } 	0	0	0	0	0	1
"public boolean downloadThumbnail(String fileName, String imageURL, Resource resource) { try { FileMeta fileMeta = this.getMediaService().handleFileUpload(fileName, imageURL, null, false, 0, 0); this.getResourceImageUtil().moveFileAndSendMsgToGenerateThumbnails(resource, fileMeta.getName(), false); return true;  } catch (FileNotFoundException e) { LOGGER.error(""Error saving crawled resource image"", e); } catch (IOException e) { LOGGER.error(""Error saving crawled resource image"", e); } return false; } "	0	0	0	0	0	1
"@Override public Segment getSegment(String segmentId) { if (segmentId != null && !segmentId.equals("""")) { return (Segment) getSegmentRepository().get(Segment.class, segmentId); } else { return null; } } "	0	0	0	0	0	1
@Override public Resource findResourceByUrl(String resourceUrl, String sharing, String userUid) { return resourceRepository.findResourceByUrl(resourceUrl, sharing, userUid); } 	0	0	0	0	0	1
@Override public List<ResourceInstance> listSegmentResourceInstances(String segmentId) { return getSegmentRepository().listSegmentResourceInstances(segmentId); } 	0	0	0	0	0	1
@Override public void run() { partitionContainer.destroyMap(mapName); semaphore.release(); } 	0	0	0	0	0	1
static String toDescription(@NotNull ChangeList changeList) { return ChangelistDescriptionGenerator.getDescription(changeList); } 	0	0	0	0	0	1
public List<String> getSubscribers() { return subscribers; } 	0	0	0	0	0	1
"public void testSendMessageWithAttachments() { ApiCallback<Boolean> loginListener = getLoginListener(); String suffix = String.valueOf(System.currentTimeMillis()); String username = USERNAME_PREFIX + suffix; String displayName = DISPLAY_NAME_PREFIX + suffix; registerUser(username, displayName, PASSWORD);  //login with credentials User.login(username, new String(PASSWORD), false, loginListener); synchronized (loginListener) { try { loginListener.wait(TIMEOUT); } catch (InterruptedException e) { e.printStackTrace(); } } assertTrue(MMX.getMMXClient().isConnected()); MMX.start();  final AtomicLong attachmentSize = new AtomicLong(); final AtomicReference<Attachment> attachmentRef = new AtomicReference<>();  final ExecMonitor<HashMap<String, Object>, Void> receivedResult = new ExecMonitor<HashMap<String, Object>, Void>(); final StringBuffer senderBuffer = new StringBuffer(); final ExecMonitor<String, Void> acknowledgeResult = new ExecMonitor<String, Void>(); MMX.EventListener messageListener = new MMX.EventListener() { public boolean onMessageReceived(MMXMessage message) { Log.d(TAG, ""onMessageReceived(): "" + message.getId()); senderBuffer.append(message.getSender().getFirstName()); HashMap<String, Object> receivedContent = new HashMap<String, Object>(); for (Map.Entry<String, String> entry : message.getContent().entrySet()) { receivedContent.put(entry.getKey(), entry.getValue()); }  //Attachments assertNotNull(message.getAttachments()); assertEquals(1, message.getAttachments().size()); Attachment attachmentReceived = message.getAttachments().get(0); assertEquals(""image/jpeg"", attachmentReceived.getMimeType()); assertEquals(Attachment.Status.INIT, attachmentReceived.getStatus()); //assertEquals(attachmentSize.get(), attachmentReceived.getLength()); assertNotNull(attachmentReceived.getDownloadUrl());  attachmentRef.set(attachmentReceived);  receivedResult.invoked(receivedContent);  //do the acknowledgement message.acknowledge(null);  return false; }  public boolean onMessageAcknowledgementReceived(User from, String messageId) { acknowledgeResult.invoked(messageId); return false; } }; MMX.registerListener(messageListener);  HashSet<User> recipients = new HashSet<User>(); recipients.add(MMX.getCurrentUser());  HashMap<String, String> content = new HashMap<String, String>(); content.put(""foo"", ""bar""); final Attachment attachment1 = new Attachment(getContext().getResources().openRawResource( com.magnet.mmx.test.R.raw.test_image), ""image/jpeg""); //final Attachment attachment1 = new TextAttachment(Attachment.TEXT_PLAIN, ""hello world""); //assertEquals(-1, attachment1.getLength()); MMXMessage message = new MMXMessage.Builder() .recipients(recipients) .content(content) .attachments(attachment1) .build(); final ExecMonitor<String, Boolean> sendResult = new ExecMonitor<String, Boolean>(); final String messageId = message.send(new MMXMessage.OnFinishedListener<String>() { public void onSuccess(String result) { Log.e(TAG, ""testSendMessage(): onSuccess() msgId="" + result);  assertTrue(attachment1.getLength() > 0); attachmentSize.set(attachment1.getLength());  sendResult.invoked(result); }  public void onFailure(MMXMessage.FailureCode code, Throwable ex) { Log.e(TAG, ""testSendMessage(): failureCode="" + code, ex); sendResult.failed(Boolean.TRUE); } }); // Check if the send is success ExecMonitor.Status status = sendResult.waitFor(TIMEOUT); assertEquals(ExecMonitor.Status.INVOKED, status); assertEquals(messageId, sendResult.getReturnValue());  // Check if the receive is success status = receivedResult.waitFor(TIMEOUT); if (status == ExecMonitor.Status.WAITING) { fail(""testSendMessage() receive msg timed out""); } assertEquals(""bar"", receivedResult.getReturnValue().get(""foo"")); assertEquals(MMX.getCurrentUser().getFirstName(), senderBuffer.toString());  //check acknowledgement status = acknowledgeResult.waitFor(TIMEOUT); if (status == ExecMonitor.Status.WAITING) { fail(""testSenddMessage() receive acknowledgement timed out""); } assertEquals(messageId, acknowledgeResult.getReturnValue());  // Download attachment assertNotNull(attachmentRef.get()); Log.d(TAG, ""-----------attachment received""); final CountDownLatch downLatch = new CountDownLatch(1); Attachment attachmentReceived = attachmentRef.get(); attachmentReceived.download(new Attachment.DownloadToBytesListener() {  @Override public void onComplete(byte[] bytes) { assertNotNull(bytes); assertTrue(bytes.length > 0); downLatch.countDown(); }  @Override public void onError(Throwable throwable) { fail(throwable.getMessage()); } }); try { downLatch.await(TIMEOUT, TimeUnit.MILLISECONDS); } catch (InterruptedException e) { fail(e.getMessage()); } assertEquals(0, downLatch.getCount()); assertEquals(Attachment.Status.COMPLETE, attachmentReceived.getStatus()); assertNotNull(attachmentReceived.getAsBytes()); assertEquals(attachmentReceived.getLength(), attachmentReceived.getAsBytes().length);  MMX.unregisterListener(messageListener); logoutMMX(); ApiCallback<Boolean> logoutListener = getLogoutListener(); User.logout(logoutListener); synchronized (logoutListener) { try { logoutListener.wait(TIMEOUT); } catch (InterruptedException e) { e.printStackTrace(); } } //    assertFalse(MMX.getMMXClient().isConnected()); } "	0	0	0	0	0	1
"static void loadFolders(ArrayList<XmlReader.Element> folders){ for(int i = 0; i < folders.size(); i++){ XmlReader.Element repo = folders.get(i); Folder folder = new Folder(); folder.setId(repo.getInt(""id"")); folder.setName(repo.getAttribute(""name"", """")); ArrayList<XmlReader.Element> files = repo.getChildrenByName(""file""); for(int j = 0; j < files.size(); j++){ XmlReader.Element f = files.get(j); File file = new File(); file.setId(f.getInt(""id"")); file.setName(f.getAttribute(""name"", """")); file.setWidth((long)f.getInt(""width"")); file.setHeight((long)f.getInt(""height"")); try{ file.setPivotX(f.getFloat(""pivot_x"")); file.setPivotY(f.getFloat(""pivot_y"")); } catch(RuntimeException e){ file.setPivotX(new Float(0)); file.setPivotY(new Float(1)); } folder.getFile().add(file); } data.getFolder().add(folder); } } "	0	0	0	0	0	1
"@Override public void getIngredients(IIngredients ingredients){ ingredients.setInputLists(ItemStack.class, ImmutableList.of(OreDictionary.getOres(copper ? ""dustCopper"" : ""cobblestone"", false))); ingredients.setOutput(FluidStack.class, new FluidStack(copper ? BlockMoltenCopper.getMoltenCopper() : FluidRegistry.LAVA, 200)); } "	0	0	0	0	0	1
"@Override public ReleaseDate scrapeReleaseDate(){ Element releaseDateElement = document .select(""table.mg-b20 tr td:contains(貸出開始日：) + td, table.mg-b20 tr td:contains(発売日：) + td, table.mg-b20 tr td:contains(�?信開始日：) + td"") .first(); if(releaseDateElement != null) { String releaseDate = releaseDateElement.text(); //we want to convert something like 2015/04/25 to 2015-04-25 releaseDate = StringUtils.replace(releaseDate, ""/"", ""-""); return new ReleaseDate(releaseDate); } return ReleaseDate.BLANK_RELEASEDATE; } "	0	0	0	0	0	1
"@Override public moviescraper.doctord.model.dataitem.Runtime scrapeRuntime() { String runtime = """"; Element runtimeElement = document.select( ""table.mg-b20 tr td:contains(�?�録時間：) + td"").first(); if (runtimeElement != null) { // get rid of japanese word for minutes and just get the number runtime = runtimeElement.text().replaceAll(""分"", """"); } return new moviescraper.doctord.model.dataitem.Runtime(runtime);  } "	0	0	0	0	0	1
public boolean isValidCCN(String rawCCN) { //check for a valid separator boolean hasSpace = StringUtils.contains(rawCCN, ' '); boolean hasDash = StringUtils.contains(rawCCN, '-'); if (hasSpace && hasDash) { return false;    //can only have dashes or spaces, not both. }  Character separator = null; if (hasSpace) { separator = ' '; } else if (hasDash) { separator = '-'; }  final String cannonicalCCN; String[] splitCCN; if (separator != null) { //there is a seperator, strip if for canoncial form of CCN cannonicalCCN = CharMatcher.anyOf(separator.toString()).removeFrom(rawCCN); splitCCN = rawCCN.split(separator.toString()); } else { //else use 'defualt'values cannonicalCCN = rawCCN; splitCCN = new String[]{cannonicalCCN}; }  // validate digit grouping for 15, 16, and 19 digit cards switch (cannonicalCCN.length()) { case 15: if (false == isValid15DigitGrouping(splitCCN)) { return false; } break; case 16: if (false == isValid16DigitGrouping(splitCCN)) { return false; } break; case 19: if (false == isValid19DigitGrouping(splitCCN)) { return false; } break; default: if (false == isValidOtherDigitGrouping(splitCCN)) { return false; } }  return CREDIT_CARD_NUM_LUHN_CHECK.isValid(cannonicalCCN); } 	0	0	0	0	0	1
public void onMessage(final String message) { output.append(message); if (output.indexOf(successPattern) != -1) { gotResult(true, null); } else { int failureIndex = output.indexOf(failurePattern); if (failureIndex != -1) { gotResult(false, output.substring(failureIndex)); } } } 	0	0	0	0	0	1
"public void testGetPolicyURLs01() throws Throwable { final String KEY_DYNAMIC = ""policy.allowSystemProperty""; String OLD_DYNAMIC = Security.getProperty(KEY_DYNAMIC);  final String KEY = ""dsfvdf""; Properties arg = new Properties(); arg.put(KEY, ""http://foo.bar.com""); try { Security.setProperty(KEY_DYNAMIC, ""true""); URL[] result = PolicyUtils.getPolicyURLs(arg, KEY, """"); assertNotNull(result); assertEquals(1, result.length); assertEquals(new URL(""http://foo.bar.com""), result[0]);  Security.setProperty(KEY_DYNAMIC, ""false""); result = PolicyUtils.getPolicyURLs(arg, KEY, """"); assertNotNull(result); assertEquals(0, result.length);  Security.setProperty(KEY_DYNAMIC, """"); result = PolicyUtils.getPolicyURLs(arg, KEY, """"); assertNotNull(result); assertEquals(1, result.length); assertEquals(new URL(""http://foo.bar.com""), result[0]); } finally { Security.setProperty(KEY_DYNAMIC, OLD_DYNAMIC); } } "	0	0	0	0	0	1
"public void testGetPolicyURLs03() throws Throwable { final String KEY_DYNAMIC = ""policy.allowSystemProperty""; final String OLD_DYNAMIC = Security.getProperty(KEY_DYNAMIC); final String KEY_EXP = ""policy.expandProperties""; final String OLD_EXP = Security.getProperty(KEY_EXP); final String PREFIX = ""testGetPolicyURLs03.""; String[] OLD = new String[5]; for (int i = 0; i < OLD.length; i++) { OLD[i] = Security.getProperty(PREFIX + i); }  final String KEY = ""dsfvdf""; Properties arg = new Properties(); arg.put(KEY, ""file://${foo.path}/${foo.name}""); arg.put(""foo.path"", ""path""); arg.put(""foo.name"", ""name""); arg.put(""foo"", ""acme""); Security.setProperty(KEY_DYNAMIC, ""true""); Security.setProperty(KEY_EXP, ""true""); Security.setProperty(PREFIX + 1, ""http://foo0.${foo}.org""); Security.setProperty(PREFIX + 2, ""http://${bar}.com""); Security.setProperty(PREFIX + 3, ""http://foo2.bar.com/${foo.path}/${foo.name}""); try {  URL[] result = PolicyUtils.getPolicyURLs(arg, KEY, PREFIX); assertNotNull(result); assertEquals(3, result.length); assertEquals(new URL(""http://foo0.acme.org""), result[0]); assertEquals(new URL(""http://foo2.bar.com/path/name""), result[1]); assertEquals(new URL(""file://path/name""), result[2]);  //expansion here cannot be switched off Security.setProperty(KEY_EXP, ""false""); result = PolicyUtils.getPolicyURLs(arg, KEY, PREFIX); assertNotNull(result); assertEquals(3, result.length); assertEquals(new URL(""http://foo0.acme.org""), result[0]); assertEquals(new URL(""http://foo2.bar.com/path/name""), result[1]); assertEquals(new URL(""file://path/name""), result[2]); } finally { Security.setProperty(KEY_DYNAMIC, OLD_DYNAMIC); Security.setProperty(KEY_EXP, OLD_EXP); for (int i = 0; i < OLD.length; i++) { Security .setProperty(PREFIX + i, (OLD[i] == null) ? """" : OLD[i]); } } } "	0	0	0	0	0	1
"public void testInstantiatePermission() throws Throwable { String name = ""abc""; Permission expected = new SecurityPermission(name); //test valid input assertEquals(expected, PolicyUtils.instantiatePermission(SecurityPermission.class, name, null)); assertEquals(expected, PolicyUtils.instantiatePermission(SecurityPermission.class, name, ""4t46""));  //test invalid class try { PolicyUtils.instantiatePermission(UnresolvedPermission.class, null, null); fail(""IllegalArgumentException expected on invalid class argument""); } catch (IllegalArgumentException ok) {} } "	0	0	0	0	0	1
"private ResultSet getRandomRow(ResultSet r) { reopenIfClosed(); Random rand = new Random(); int rows = 0;  try { if(r.last()) { rows = r.getRow(); r.beforeFirst(); }  int choice = rand.nextInt(rows); for(int i = 0;i <= choice;i++) { r.next();	//Move to next row if(i == choice) { return r; } } } catch(SQLException ex) { System.out.println(""Error while getting random monster. "" + ex.getMessage()); }  return null; } "	0	0	0	0	0	1
"@Override public String toString() { return ""User{"" + ""uid='"" + uid + '\'' + "", fullName='"" + fullName + '\'' + "", avatar='"" + avatar + '\'' + "", email='"" + email + '\'' + "", socialProviders='"" + socialProviders + '\'' + '}'; } "	0	0	0	0	0	1
"public void onCreateUploadClicked(View btn) { CreationRepository creationRepository = new CreationRepositoryBuilder() .setAuthToken(authToken) .build();  creationRepository.createUpload(""2UExMQhy"", new UploadRequest(ContentType .JPG), new ResponseCallback<UploadResponse>() { @Override public void onSuccess(UploadResponse response) { Toast.makeText(MainActivity.this, response.getData() .getAttributes().getContentType(), Toast.LENGTH_SHORT) .show();  responseFromCreateUpload = response; sendFileBtn.setEnabled(true); fileName.setEnabled(true); }  @Override public void onServerError(ErrorResponse errorResponse) {  }  @Override public void onError(String message) {  } });  } "	0	0	0	0	0	1
"protected Response lookupObject(final HttpServletRequest request, final Set<ObjectType> objectTypes, final String key) { if (StringUtils.isEmpty(key)) { throw new IllegalArgumentException(""empty lookup term""); }  final Query query = Query.parse( String.format(""%s %s %s %s %s %s"", QueryFlag.NO_GROUPING.getLongFlag(), QueryFlag.NO_REFERENCED.getLongFlag(), QueryFlag.SELECT_TYPES.getLongFlag(), objectTypesToString(objectTypes), QueryFlag.NO_FILTERING.getLongFlag(), key));  return handleQuery(query, request); } "	0	0	0	0	0	1
public Button getRightArrowButton() { return rightArrowButton; } 	0	0	0	0	0	1
@Override public void visit(ReturnInstruction ret) { FrameSlot slot = method.getFrame().findFrameSlot(LLVMBitcodeHelper.FUNCTION_RETURN_VALUE_FRAME_SLOT_ID);  LLVMRetNode node; if (ret.getValue() == null) { node = LLVMVoidReturnNodeGen.create(slot); } else { Type type = ret.getValue().getType();  LLVMExpressionNode value = resolve(ret.getValue());  slot.setKind(LLVMBitcodeHelper.toFrameSlotKind(type));  switch (LLVMBitcodeHelper.toBaseType(type)) { case I1: node = LLVMRetNodeFactory.LLVMI1RetNodeGen.create((LLVMI1Node) value, slot); break; case I8: node = LLVMRetNodeFactory.LLVMI8RetNodeGen.create((LLVMI8Node) value, slot); break; case I16: node = LLVMRetNodeFactory.LLVMI16RetNodeGen.create((LLVMI16Node) value, slot); break; case I32: node = LLVMRetNodeFactory.LLVMI32RetNodeGen.create((LLVMI32Node) value, slot); break; case I64: node = LLVMRetNodeFactory.LLVMI64RetNodeGen.create((LLVMI64Node) value, slot); break; case I_VAR_BITWIDTH: node = LLVMRetNodeFactory.LLVMIVarBitRetNodeGen.create((LLVMIVarBitNode) value, slot); break; case FLOAT: node = LLVMRetNodeFactory.LLVMFloatRetNodeGen.create((LLVMFloatNode) value, slot); break; case DOUBLE: node = LLVMRetNodeFactory.LLVMDoubleRetNodeGen.create((LLVMDoubleNode) value, slot); break; case X86_FP80: node = LLVMRetNodeFactory.LLVM80BitFloatRetNodeGen.create((LLVM80BitFloatNode) value, slot); break; case ADDRESS: node = LLVMRetNodeFactory.LLVMAddressRetNodeGen.create((LLVMAddressNode) value, slot); break; case FUNCTION_ADDRESS: node = LLVMRetNodeFactory.LLVMFunctionRetNodeGen.create((LLVMFunctionNode) value, slot); break; case STRUCT: // ResolvedStructType structType = (ResolvedStructType) resolvedType; // int size = LLVMTypeHelper.getByteSize(structType); // return LLVMRetNodeFactory.LLVMStructRetNodeGen.create((LLVMAddressNode) // value, retSlot, size); default: // if (LLVMTypeHelper.isVectorType(type)) { // return LLVMRetNodeFactory.LLVMVectorRetNodeGen.create((LLVMVectorNode) // retValue, retSlot); // } else throw new AssertionError(type); } }  method.addTerminatingInstruction(node); } 	0	0	0	0	0	1
private void setUpAlarm (Context context) { AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE); Intent createdIntent = new Intent(context, AlarmReceiver.class);  PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, createdIntent, 0); alarmManager.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + 1000, pendingIntent); } 	0	0	0	0	0	1
public ItemStack checkAfford(int slotId, int amnt, EntityPlayer player) { IItemHandler itemHandler = this.tile.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, null); ItemStack playStack = player.inventory.getItemStack(); ItemStack slotStack = itemHandler.getStackInSlot(slotId - PLAYER_TOTAL_COUNT); ItemStack playBuyStack;  boolean wallet = false; int bank = 0;  if (itemHandler.getStackInSlot(0) != ItemStack.EMPTY) { if (itemHandler.getStackInSlot(0).getItem() == ModItems.itemWallet) { wallet = true; bank = tile.getField(10); } } else bank = tile.getField(0); int cost = tile.getItemCost(slotId - PLAYER_TOTAL_COUNT - 1);  if (slotStack != ItemStack.EMPTY) { if (playStack.getItem() != Item.getItemFromBlock(Blocks.AIR)) { if (!(playStack.getItem().equals(slotStack.getItem()) && (playStack.getItemDamage() == slotStack.getItemDamage()))) { return ItemStack.EMPTY; //Checks if player is holding stack, if its different then one being clicked do nothing } } if (tile.getField(6) == 0) if (slotStack.getCount() < amnt && slotStack.getCount() != 0) amnt = slotStack.getCount();  if ((bank >= (cost * amnt))) {   //If has enough money, buy it if (slotStack.getCount() >= amnt || tile.getField(6) == 1) { playBuyStack = slotStack.copy(); playBuyStack.setCount(amnt);  if (!player.inventory.getItemStack().isEmpty()) {       //Holding Item playBuyStack.setCount(amnt + playStack.getCount()); } player.inventory.setItemStack(playBuyStack);  if (tile.getField(6) == 0) { if (slotStack.getCount() - amnt == 0) { tile.setGhostSlot(slotId - PLAYER_TOTAL_COUNT - 1, true); slotStack.setCount(1); } else slotStack.splitStack(amnt); }  if (wallet) { sellToWallet(itemHandler.getStackInSlot(0), cost * amnt); } else { tile.setField(0, bank - (cost * amnt)); } tile.setField(4, tile.getField(4) + cost * amnt); } } else { tile.unsucessfulNoise(); } return slotStack; } return ItemStack.EMPTY; } 	0	0	0	0	0	1
"@Override protected byte[] getVisitedPLMNId() {  String vPlmnIdList = ""473800""; byte[] visitedPlmnIdList = vPlmnIdList.getBytes(); return visitedPlmnIdList; } "	0	0	0	0	0	1
"@Override protected byte[] getVisitedPLMNId() {  String vPlmnIdList = ""471800""; byte[] visitedPlmnIdList = vPlmnIdList.getBytes(); return visitedPlmnIdList; } "	0	0	0	0	0	1
@Override public Void runInTransaction() { return executeAddQutoa(); } 	0	0	0	0	0	1
"public Message sendVideo(SendVideo sendVideo) throws TelegramApiException { String responseContent; try { String url = getBaseUrl() + SendVideo.PATH; HttpPost httppost = new HttpPost(url); httppost.setConfig(requestConfig); if (sendVideo.isNewVideo()) { MultipartEntityBuilder builder = MultipartEntityBuilder.create(); builder.addTextBody(SendVideo.CHATID_FIELD, sendVideo.getChatId()); builder.addBinaryBody(SendVideo.VIDEO_FIELD, new java.io.File(sendVideo.getVideo()), ContentType.APPLICATION_OCTET_STREAM, sendVideo.getVideoName()); if (sendVideo.getReplayMarkup() != null) { builder.addTextBody(SendVideo.REPLYMARKUP_FIELD, sendVideo.getReplayMarkup().toJson().toString()); } if (sendVideo.getReplayToMessageId() != null) { builder.addTextBody(SendVideo.REPLYTOMESSAGEID_FIELD, sendVideo.getReplayToMessageId().toString()); } if (sendVideo.getCaption() != null) { builder.addTextBody(SendVideo.CAPTION_FIELD, sendVideo.getCaption(), ContentType.create(""text/plain"", StandardCharsets.UTF_8)); } if (sendVideo.getDuration() != null) { builder.addTextBody(SendVideo.DURATION_FIELD, sendVideo.getDuration().toString()); } if (sendVideo.getWidth() != null) { builder.addTextBody(SendVideo.WIDTH_FIELD, sendVideo.getWidth().toString()); } if (sendVideo.getHeight() != null) { builder.addTextBody(SendVideo.HEIGHT_FIELD, sendVideo.getHeight().toString()); } if (sendVideo.getDisableNotification() != null) { builder.addTextBody(SendVideo.DISABLENOTIFICATION_FIELD, sendVideo.getDisableNotification().toString()); } HttpEntity multipart = builder.build(); httppost.setEntity(multipart); } else { List<NameValuePair> nameValuePairs = new ArrayList<>(); nameValuePairs.add(new BasicNameValuePair(SendVideo.CHATID_FIELD, sendVideo.getChatId())); nameValuePairs.add(new BasicNameValuePair(SendVideo.VIDEO_FIELD, sendVideo.getVideo())); if (sendVideo.getReplayMarkup() != null) { nameValuePairs.add(new BasicNameValuePair(SendVideo.REPLYMARKUP_FIELD, sendVideo.getReplayMarkup().toJson().toString())); } if (sendVideo.getReplayToMessageId() != null) { nameValuePairs.add(new BasicNameValuePair(SendVideo.REPLYTOMESSAGEID_FIELD, sendVideo.getReplayToMessageId().toString())); } if (sendVideo.getCaption() != null) { nameValuePairs.add(new BasicNameValuePair(SendVideo.CAPTION_FIELD, sendVideo.getCaption())); } if (sendVideo.getDuration() != null) { nameValuePairs.add(new BasicNameValuePair(SendVideo.DURATION_FIELD, sendVideo.getDuration().toString())); } if (sendVideo.getWidth() != null) { nameValuePairs.add(new BasicNameValuePair(SendVideo.WIDTH_FIELD, sendVideo.getWidth().toString())); } if (sendVideo.getHeight() != null) { nameValuePairs.add(new BasicNameValuePair(SendVideo.HEIGHT_FIELD, sendVideo.getHeight().toString())); } if (sendVideo.getDisableNotification() != null) { nameValuePairs.add(new BasicNameValuePair(SendVideo.DISABLENOTIFICATION_FIELD, sendVideo.getDisableNotification().toString())); } httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs, StandardCharsets.UTF_8)); }  try (CloseableHttpResponse response = httpclient.execute(httppost)) { HttpEntity ht = response.getEntity(); BufferedHttpEntity buf = new BufferedHttpEntity(ht); responseContent = EntityUtils.toString(buf, StandardCharsets.UTF_8); } } catch (IOException e) { throw new TelegramApiException(""Unable to send video"", e); }  JSONObject jsonObject = new JSONObject(responseContent); if (!jsonObject.getBoolean(Constants.RESPONSEFIELDOK)) { throw new TelegramApiException(""Error at sendVideo"", jsonObject.getString(ERRORDESCRIPTIONFIELD), jsonObject.getInt(ERRORCODEFIELD)); }  return new Message(jsonObject.getJSONObject(Constants.RESPONSEFIELDRESULT)); } "	0	0	0	0	0	1
@Override public void onClick(View v) { startActivity(new Intent(HomeScreen.this, CleaningSealing.class)); } 	0	0	0	0	0	1
@Test public void workerIdleTest() { final Worker w = new Worker(workerPool, workerPool.threadFactory); w.start();  // wait for worker to become idle new TestCondition() { @Override public boolean get() { return workerPool.idleWorker.get() == w; } }.blockTillTrue(1000);  workerPool.startShutdown(); workerPool.finishShutdown();  // verify idle worker is gone new TestCondition() { @Override public boolean get() { return workerPool.idleWorker.get() == null; } }.blockTillTrue(1000);  // should return immediately now that we are shut down workerPool.workerIdle(new Worker(workerPool, workerPool.threadFactory)); } 	0	0	0	0	0	1
"public boolean underlyingCheck() { String name; switch (Pkg.VERSION) { case ""v1_8_R2"": name = ""N""; break; case ""v1_8_R3"": name = ""O""; break; default: throw new RuntimeException(""Unsupported server version: "" + Pkg.VERSION); } try { Method method = MinecraftServer.class.getMethod(name); return (Boolean) method.invoke(this); } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) { throw new RuntimeException(e); } } "	0	0	0	0	0	1
"@Override protected void service(HttpServletRequest hreq, HttpServletResponse hresp) throws ServletException, IOException {  String requestUriRaw = hreq.getRequestURI(); String requestUri = (requestUriRaw.charAt(0) == '/') ? requestUriRaw.substring(1) : requestUriRaw; String query = hreq.getQueryString();  WebServiceEjbEndpointRegistry wsejbEndpointRegistry = (WebServiceEjbEndpointRegistry) Globals.getDefaultHabitat() .getService(WSEjbEndpointRegistry.class); EjbRuntimeEndpointInfo ejbEndpoint = wsejbEndpointRegistry.getEjbWebServiceEndpoint(requestUri, hreq.getMethod(), query);  if (requestUri.contains(WebServiceEndpoint.PUBLISHING_SUBCONTEXT) && ejbEndpoint == null) { requestUri = requestUri.substring(0, requestUri.indexOf(WebServiceEndpoint.PUBLISHING_SUBCONTEXT) - 1); ejbEndpoint = wsejbEndpointRegistry.getEjbWebServiceEndpoint(requestUri, hreq.getMethod(), query); }  if (ejbEndpoint != null) { /* * We can actually assert that ejbEndpoint is != null, * because this EjbWebServiceServlet would not have been * invoked otherwise */ String scheme = hreq.getScheme(); WebServiceEndpoint wse = ejbEndpoint.getEndpoint(); if (""http"".equals(scheme) && wse.isSecure()) { //redirect to correct protocol scheme if needed logger.log(Level.WARNING, LogUtils.INVALID_REQUEST_SCHEME, new Object[]{wse.getEndpointName(), ""https"", scheme}); URL url = wse.composeEndpointAddress(new WsUtil().getWebServerInfoForDAS().getWebServerRootURL(true)); StringBuilder sb = new StringBuilder(url.toExternalForm()); if (query != null && query.trim().length() > 0) { sb.append(""?""); sb.append(query); } hresp.sendRedirect(URLEncoder.encode(sb.toString(), ""UTF-8"")); } else { boolean dispatch = true; // check if it is a tester servlet invocation if (""Tester"".equalsIgnoreCase(query) && (!(HTTPBinding.HTTP_BINDING.equals(wse.getProtocolBinding())))) { Endpoint endpoint = WebServiceEngineImpl.getInstance().getEndpoint(hreq.getRequestURI()); if ((endpoint.getDescriptor().isSecure()) || (endpoint.getDescriptor().getMessageSecurityBinding() != null)) { String message = endpoint.getDescriptor().getWebService().getName() + ""is a secured web service; Tester feature is not supported for secured services""; (new WsUtil()).writeInvalidMethodType(hresp, message); return; } if (Boolean.parseBoolean(endpoint.getDescriptor().getDebugging())) { dispatch = false; WebServiceTesterServlet.invoke(hreq, hresp, endpoint.getDescriptor()); } } if (""wsdl"".equalsIgnoreCase(query) && (!(HTTPBinding.HTTP_BINDING.equals(wse.getProtocolBinding())))) { if (wse.getWsdlExposed() != null && !Boolean.parseBoolean(wse.getWsdlExposed())) { hresp.sendError(HttpServletResponse.SC_NOT_FOUND); } } if (dispatch) { dispatchToEjbEndpoint(hreq, hresp, ejbEndpoint);  if (requestTracing.isRequestTracingEnabled()) { WSRequestEvent requestEvent = constructWsRequestEvent(hreq, ejbEndpoint, EventType.WS); requestTracing.traceRequestEvent(requestEvent); } } } } else { hresp.sendError(HttpServletResponse.SC_NOT_FOUND); } } "	0	0	0	0	0	1
"@Override public void run() { if (this.theListener instanceof ConsumerSeekAware) { ((ConsumerSeekAware) this.theListener).registerSeekCallback(this); } if (this.transactionManager != null) { ProducerFactoryUtils.setConsumerGroupId(this.consumerGroupId); } this.count = 0; this.last = System.currentTimeMillis(); if (isRunning() && this.definedPartitions != null) { initPartitionsIfNeeded(); } long lastReceive = System.currentTimeMillis(); long lastAlertAt = lastReceive; while (isRunning()) { try { if (!this.autoCommit) { processCommits(); } processSeeks(); ConsumerRecords<K, V> records = this.consumer.poll(this.containerProperties.getPollTimeout()); if (records != null && this.logger.isDebugEnabled()) { this.logger.debug(""Received: "" + records.count() + "" records""); } if (records != null && records.count() > 0) { if (this.containerProperties.getIdleEventInterval() != null) { lastReceive = System.currentTimeMillis(); } invokeListener(records); } else { if (this.containerProperties.getIdleEventInterval() != null) { long now = System.currentTimeMillis(); if (now > lastReceive + this.containerProperties.getIdleEventInterval() && now > lastAlertAt + this.containerProperties.getIdleEventInterval()) { publishIdleContainerEvent(now - lastReceive); lastAlertAt = now; if (this.theListener instanceof ConsumerSeekAware) { seekPartitions(getAssignedPartitions(), true); } } } } } catch (WakeupException e) { // Ignore, we're stopping } catch (NoOffsetForPartitionException nofpe) { this.fatalError = true; ListenerConsumer.this.logger.error(""No offset and no reset policy"", nofpe); break; } catch (Exception e) { if (this.containerProperties.getGenericErrorHandler() != null) { this.containerProperties.getGenericErrorHandler().handle(e, null); } else { this.logger.error(""Container exception"", e); } } } ProducerFactoryUtils.clearConsumerGroupId(); if (!this.fatalError) { if (this.kafkaTxManager == null) { commitPendingAcks(); try { this.consumer.unsubscribe(); } catch (WakeupException e) { // No-op. Continue process } } } else { ListenerConsumer.this.logger.error(""No offset and no reset policy; stopping container""); KafkaMessageListenerContainer.this.stop(); } this.consumer.close(); if (this.logger.isInfoEnabled()) { this.logger.info(""Consumer stopped""); } } "	0	0	0	0	0	1
"public static void main(String[] args) throws Exception {  SparkConf sparkConf = new SparkConf() .setMaster(""local[2]"") .setAppName(""Write RDD To Hazelcast"") .set(""hazelcast.server.address"", ""127.0.0.1:5701"") .set(""spark.driver.host"", ""127.0.0.1"");  JavaSparkContext ctx = new JavaSparkContext(sparkConf); JavaRDD<String> lines = ctx.textFile(getFile().getPath(), 1);  JavaRDD<String> words = lines.flatMap(new FlatMapFunction<String, String>() { @Override public Iterable<String> call(String s) { return Arrays.asList(SPACE.split(s)); } });  JavaPairRDD<String, Integer> ones = words.mapToPair(new PairFunction<String, String, Integer>() { @Override public Tuple2<String, Integer> call(String s) { return new Tuple2<String, Integer>(s, 1); } });  JavaPairRDD<String, Integer> counts = ones.reduceByKey(new Function2<Integer, Integer, Integer>() { @Override public Integer call(Integer i1, Integer i2) { return i1 + i2; } });  //write counts to the hazelcast map. javaPairRddFunctions(counts).saveToHazelcastMap(""counts"");   HazelcastInstance client = HazelcastClient.newHazelcastClient(); IMap<Object, Object> countsMap = client.getMap(""counts"");  System.out.println(""Results fetched from Hazelcast Map :""); for (Map.Entry<Object, Object> entry : countsMap.entrySet()) { System.out.println(entry.getKey() + "": "" + entry.getValue()); } client.getLifecycleService().terminate(); ctx.stop(); } "	0	0	0	0	0	1
public void insert(final CompareLocale favorite) { orma.transactionSync(new Runnable() { @Override public void run() { orma.insertIntoCompareLocale(favorite); } }); } 	0	0	0	0	0	1
@Override public List<DeploymentUnit> deployHealthyUnits() { if (this.healthyUnits.size() < hostIds.size()) { addMissingUnits(); } return healthyUnits; } 	0	0	0	0	0	1
"static public void addkvMapping(String k, String v, String property, String object, String affectedEntities) { String s = new String(); s += ""\t\t\t\t\t<tr>\n""; s += ""\t\t\t\t\t\t<td>"" + k + ""</td>\n""; s += ""\t\t\t\t\t\t<td>"" + v + ""</td>\n""; s += ""\t\t\t\t\t\t<td>"" + property + ""</td>\n""; s += ""\t\t\t\t\t\t<td>"" + object + ""</td>\n""; s += ""\t\t\t\t\t\t<td>"" + affectedEntities + ""</td>\n""; s += ""\t\t\t\t\t\t<td class=\""edit\""><a href=\""?tab=mappings&k="" + k + ""&v="" + v + ""\"">Edit/Delete</a></td>\n""; s += ""\t\t\t\t\t</tr>\n""; al.add(s);  } "	0	0	0	0	0	1
"static public void addkMapping(String k, String property, String object, String affectedEntities) { String s = new String(); s += ""\t\t\t\t\t<tr>\n""; s += ""\t\t\t\t\t\t<td>"" + k + ""</td>\n""; s += ""\t\t\t\t\t\t<td>"" + property + ""</td>\n""; s += ""\t\t\t\t\t\t<td>"" + object + ""</td>\n""; s += ""\t\t\t\t\t\t<td>"" + affectedEntities + ""</td>\n""; s += ""\t\t\t\t\t\t<td class=\""edit\""><a href=\""?tab=mappings&k="" + k + ""\"">Edit/Delete</a></td>\n""; s += ""\t\t\t\t\t</tr>\n""; al.add(s);  } "	0	0	0	0	0	1
public Mark getMark() { return mark; } 	0	0	0	0	0	1
"@Test public void test009Collision1BludgerVsBludger() {  // seed=487731455 // https://www.codingame.com/replay/171805336  String[] inputMatchString = {  ""0 5"", };  String[] inputGameStateString = { ""GameState 56 myScore: 2 myMagic: 55 opScore: 0 opMagic: 55 gameResult: UNKNOWN"", ""mw:  0 Point 14796.00 04417.00 Vector +0038.00 +0274.00 true false -1 0"", ""mw:  1 Point 14918.00 02200.00 Vector -0119.00 -0016.00 true false -1 0"", ""ow:  2 Point 08732.00 04264.00 Vector -0006.00 -0005.00 false false -1 0"", ""ow:  3 Point 15588.00 04997.00 Vector +0004.00 +0119.00 false true 7 3"", ""bl:  9 Point 15686.00 01361.00 Vector +0352.00 +0166.00 1"", ""bl: 10 Point 14963.00 01334.00 Vector +0203.00 -0259.00 1"", ""sn:  4 Point 11391.00 04986.00 Vector +0002.00 +0002.00"", ""sn:  6 Point 11922.00 01513.00 Vector +0002.00 -0002.00"", ""sn:  7 Point 15588.00 04997.00 Vector +0004.00 +0119.00 3"", };  String[] myInputActions = { ""Action MOVE Point 15588.00 04997.00 150"", ""Action MOVE Point 11922.00 01513.00 150"", };  String[] opInputActions = { ""Action MOVE Point 15686.00 01361.00 0"", ""Action MOVE Point 16001.00 02200.00 0"", };  String[] actualGameStateString = {  ""GameState 57 myScore: 2 myMagic: 56 opScore: 0 opMagic: 56 gameResult: UNKNOWN"", ""mw:  0 Point 14859.00 04722.00 Vector -0152.00 +0108.00 true false -1 0"", ""mw:  1 Point 14653.00 02150.00 Vector -0199.00 -0037.00 true false -1 0"", ""ow:  2 Point 08726.00 04259.00 Vector -0005.00 -0004.00 false false -1 0"", ""ow:  3 Point 15565.00 05174.00 Vector -0064.00 +0253.00 false false -1 2"", ""bl:  9 Point 15730.00 01309.00 Vector +0040.00 -0047.00 1"", ""bl: 10 Point 15159.00 01200.00 Vector +0177.00 -0121.00 1"", ""sn:  4 Point 11393.00 04988.00 Vector +0002.00 +0002.00"", ""sn:  6 Point 11924.00 01511.00 Vector +0002.00 -0002.00"", ""sn:  7 Point 15592.00 05116.00 Vector +0003.00 +0089.00"", };  TestUtils.setGameConstantsFromDebug(inputMatchString);  Player.GameState inputGameState = TestUtils.getGameStateFromDebug(inputGameStateString); Player.GameState actualGameState = TestUtils.getGameStateFromDebug(actualGameStateString); Player.Action[] myActions = TestUtils.getActionFromDebug(myInputActions, inputGameState); Player.Action[] opActions = TestUtils.getActionFromDebug(opInputActions, inputGameState);  Player.GameState computedGameState = Player.GameEngine.applyAction(inputGameState, myActions, opActions);  TestUtils.printComputedVSActual(computedGameState, actualGameState);  assertNotNull(computedGameState); assertEquals(actualGameState, computedGameState);  } "	0	0	0	0	0	1
"@Test(testName = ""DELETE /media/{id}"", dependsOnMethods = { ""testDeleteMetadata"" } ) public void testDeleteMedia() { Task deleteMedia = mediaClient.deleteMedia(media.getHref()); Checks.checkTask(deleteMedia); assertTrue(retryTaskSuccess.apply(deleteMedia), String.format(TASK_COMPLETE_TIMELY, ""deleteMedia""));  Error expected = Error.builder() .message(String.format( ""No access to entity \""(com.vmware.vcloud.entity.media:%s)\""."", media.getId())) .majorErrorCode(403) .minorErrorCode(""ACCESS_TO_RESOURCE_IS_FORBIDDEN"") .build();  try { media = mediaClient.getMedia(media.getHref()); fail(""Should give HTTP 403 error""); } catch (VCloudDirectorException vde) { assertEquals(vde.getError(), expected); media = null; } catch (Exception e) { fail(""Should have thrown a VCloudDirectorException""); }  if (media != null) { // guard against NPE on the .toStrings assertNull(metadataValue, String.format(OBJ_DEL, MEDIA, media.toString())); }  deleteMedia = mediaClient.deleteMedia(oldMedia.getHref()); Checks.checkTask(deleteMedia); } "	0	0	0	0	0	1
public static int read(final AtomicBuffer buffer, final ErrorConsumer consumer, final long sinceTimestamp) { int entries = 0; int offset = 0; final int capacity = buffer.capacity();  while (offset < capacity) { final int length = buffer.getIntVolatile(offset + LENGTH_OFFSET); if (0 == length) { break; }  final long lastObservationTimestamp = buffer.getLongVolatile(offset + LAST_OBSERVATION_TIMESTAMP_OFFSET); if (lastObservationTimestamp >= sinceTimestamp) { ++entries;  consumer.accept( buffer.getInt(offset + OBSERVATION_COUNT_OFFSET), buffer.getLong(offset + FIRST_OBSERVATION_TIMESTAMP_OFFSET), lastObservationTimestamp, buffer.getStringUtf8(offset + ENCODED_ERROR_OFFSET, length - ENCODED_ERROR_OFFSET)); }  offset += align(length, RECORD_ALIGNMENT); }  return entries; } 	0	0	0	0	0	1
"public static final File getMinecraftJarNonNull() throws FileNotFoundException { File jarFile = getMinecraftJar(); if (jarFile == null) { throw new FileNotFoundException(""Could not locate Minecraft Jar!""); } return jarFile; } "	0	0	0	0	0	1
"private void crLfGuts(Socket socket) throws SocketException, IOException { socket.setSoTimeout(5000); String greetings = ""Hello World!""; socket.getOutputStream().write((greetings + ""\r\n"").getBytes()); StringBuilder sb = new StringBuilder(); int c; while (true) { c = socket.getInputStream().read(); sb.append((char) c); if (c == '\n') { break; } } assertEquals(""echo:"" + greetings + ""\r\n"", sb.toString()); } "	0	0	0	0	0	1
@AfterTest public void deleteTempDirectory() { if (tempDirectory != null) { FileUtils.delete(tempDirectory); } } 	0	0	0	0	0	1
"@Override public org.openmrs.Encounter processEncounter(String incomingMessageString, Patient p, Date encDate, org.openmrs.Encounter newEncounter, Provider provider, HashMap<String, Object> parameters) { ChirdlUtilBackportsService chirdlutilbackportsService = Context .getService(ChirdlUtilBackportsService.class); org.openmrs.Encounter encounter = super.processEncounter( incomingMessageString, p, encDate, newEncounter, provider, parameters);  if (encounter == null){ //Encounter will be null if encounter was not created or //it was a duplicate encounter. return null; } // store the encounter id with the session Integer encounterId = encounter.getEncounterId(); getSession(parameters).setEncounterId(encounterId); chirdlutilbackportsService.updateSession(getSession(parameters)); if (incomingMessageString == null) { return encounter; }  LocationService locationService = Context.getLocationService();  String locationString = null; Date appointmentTime = null; String planCode = null; String carrierCode = null; String printerLocation = null; String insuranceName = null; Message message = null;  try { message = this.parser.parse(incomingMessageString); EncounterService encounterService = Context .getService(EncounterService.class); encounter = encounterService.getEncounter(encounter .getEncounterId()); if (this.hl7EncounterHandler instanceof org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) { locationString = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getLocation(message);  appointmentTime = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getAppointmentTime(message);  // DWE CHICA-492 Parse insurance plan code from IN1-35 if this is IUH if(locationString.equals(ChirdlUtilConstants.LOCATION_RIIUMG)) { planCode = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getInsuranceCompanyPlan(message); } else { planCode = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getInsurancePlan(message); }  // DWE CHICA-492 Do not parse the carrier code if this is IUH if(!locationString.equals(ChirdlUtilConstants.LOCATION_RIIUMG)) { carrierCode = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getInsuranceCarrier(message); }  printerLocation = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getPrinterLocation(message, incomingMessageString);  insuranceName = ((org.openmrs.module.chica.hl7.mckesson.HL7EncounterHandler25) this.hl7EncounterHandler) .getInsuranceName(message); } } catch (EncodingNotSupportedException e) { log.error(""Encoding not supported when parsing incoming message."", e); } catch (HL7Exception e) { log.error(""HL7 version not supported when parsing incoming message"", e); } catch (Exception e){ log.error(""Exception getting encounter information from the incoming message"", e); }    EncounterService encounterService = Context .getService(EncounterService.class); encounter = encounterService.getEncounter(encounterId); Encounter chicaEncounter = (org.openmrs.module.chica.hibernateBeans.Encounter) encounter;  chicaEncounter.setInsurancePlanCode(planCode); chicaEncounter.setInsuranceCarrierCode(carrierCode); chicaEncounter.setScheduledTime(appointmentTime); chicaEncounter.setPrinterLocation(printerLocation);  Location location = null;  if (locationString != null) { location = locationService.getLocation(locationString);  if (location == null) { location = new Location(); location.setName(locationString); locationService.saveLocation(location); log.warn(""Location '"" + locationString + ""' does not exist in the Location table. "" + ""A new location was created for '"" + locationString + ""'""); } }  chicaEncounter.setLocation(location); chicaEncounter.setInsuranceSmsCode(null);  //See if the message contains OBXs saveHL7Obs(p, message, location, chicaEncounter, getSession(parameters));  // This code must come after the code that sets the encounter values // because the states can't be created until the locationTagId and // locationId have been set State state = chirdlutilbackportsService .getStateByName(STATE_CLINIC_REGISTRATION); PatientState patientState = chirdlutilbackportsService .addPatientState(p, state, getSession(parameters) .getSessionId(), org.openmrs.module.chica.util.Util.getLocationTagId(chicaEncounter), getLocationId(chicaEncounter), null); patientState.setStartTime(chicaEncounter.getEncounterDatetime()); patientState.setEndTime(chicaEncounter.getEncounterDatetime()); chirdlutilbackportsService.updatePatientState(patientState);  state = chirdlutilbackportsService .getStateByName(STATE_HL7_CHECKIN); patientState = chirdlutilbackportsService .addPatientState(p, state, getSession(parameters) .getSessionId(), org.openmrs.module.chica.util.Util.getLocationTagId(chicaEncounter), getLocationId(chicaEncounter), null); Date processCheckinHL7Start = (Date) parameters .get(PROCESS_HL7_CHECKIN_START); Date processCheckinHL7End = (Date) parameters .get(PROCESS_HL7_CHECKIN_END); patientState.setStartTime(processCheckinHL7Start); patientState.setEndTime(processCheckinHL7End); chirdlutilbackportsService.updatePatientState(patientState);  state = chirdlutilbackportsService.getStateByName(STATE_QUERY_ALIAS); patientState = chirdlutilbackportsService .addPatientState(p, state, getSession(parameters) .getSessionId(), org.openmrs.module.chica.util.Util.getLocationTagId(chicaEncounter), getLocationId(chicaEncounter), null); Date queryKiteAliasStart = (Date) parameters.get(PARAMETER_QUERY_ALIAS_START); if (queryKiteAliasStart == null){ queryKiteAliasStart = new java.util.Date(); } Date queryKiteAliasEnd = (Date) parameters.get(PARAMETER_QUERY_ALIAS_STOP); if (queryKiteAliasEnd == null){ queryKiteAliasEnd = new java.util.Date(); }  patientState.setStartTime(queryKiteAliasStart); patientState.setEndTime(queryKiteAliasEnd); chirdlutilbackportsService.updatePatientState(patientState);  encounterService.saveEncounter(chicaEncounter); ConceptService conceptService = Context.getConceptService(); Concept concept = conceptService.getConceptByName(CONCEPT_INSURANCE_NAME); if (insuranceName != null){ org.openmrs.module.chirdlutil.util.Util.saveObs(p, concept, encounterId, insuranceName,encDate); }else { log.error(""Insurance Name is null for patient: "" + p.getPatientId()); } return encounter; } "	0	0	0	0	0	1
public void setTaxonomyRepository(TaxonomyRespository taxonomyRepository) { this.taxonomyRepository = taxonomyRepository; } 	0	0	0	0	0	1
private void saveCollectionSharing(String sharing, Learnguide collection) { collection.setSharing(sharing); this.getBaseRepository().save(collection); } 	0	0	0	0	0	1
@Override public List<String> sendRequestForGetCollaborators(String gooruUId, String searchText) { return this.getLearnguideRepository().findAllCollaboratorByResourceID(gooruUId, searchText); } 	0	0	0	0	0	1
"@GET @Produces(""application/xml"") public Response get(@QueryParam(""announcementBoardId"") String announcementBoardId, @QueryParam(""selectedYear"") int selectedYear, @QueryParam(""selectedMonth"") int selectedMonth, @QueryParam(""language"") String language) { Set<Post> posts; if (announcementBoardId.equals(EVENTS)) { posts = Site.fromSlug(""tecnicolisboa"").categoryForSlug(""eventos"").getPostsSet(); } else { posts = Site.fromSlug(""tecnicolisboa"").categoryForSlug(""noticias"").getPostsSet(); } Locale locale; if (""pt"".equals(language)) { locale = PT; } else { locale = EN; }  DateTime begin = new DateTime().toDateMidnight().withYear(selectedYear).withMonthOfYear(selectedMonth).withDayOfMonth(1) .toDateTime(); DateTime end = begin.dayOfMonth().withMaximumValue().hourOfDay().withMaximumValue().minuteOfHour().withMaximumValue() .secondOfMinute().withMaximumValue(); Interval i = new Interval(begin, end);  String result = ""SUCCESS\n""; result += ""<list>\n""; int index = 1; for (Post post : posts.stream().sorted(Post.CREATION_DATE_COMPARATOR).filter(x -> i.contains(x.getPublicationBegin())) .collect(Collectors.toList())) { result += ""  <net.sourceforge.fenixedu.presentationTier.Action.externalServices.AnnouncementDTO>\n""; result += ""    <creationDate>"" + post.getCreationDate().toString(""dd/MM/yyyy HH:mm:ss"") + ""</creationDate>\n""; result += ""    <referedSubjectBegin>"" + (post.getPublicationBegin() != null ? post.getPublicationBegin().toString(""dd/MM/yyyy HH:mm:ss"") : """") + ""</referedSubjectBegin>\n""; result += ""    <publicationBegin>"" + (post.getPublicationBegin() != null ? post.getPublicationBegin().toString(""dd/MM/yyyy HH:mm:ss"") : """") + ""</publicationBegin>\n""; result += ""    <publicationEnd>"" + (post.getPublicationEnd() != null ? post.getPublicationEnd().toString(""dd/MM/yyyy HH:mm:ss"") : """") + ""</publicationEnd>\n""; result += ""    <lastModification>"" + (post.getModificationDate() != null ? post.getModificationDate().toString(""dd/MM/yyyy HH:mm:ss"") : """") + ""</lastModification>\n"";  result += ""    <subject><![CDATA["" + post.getName().getContent(locale) + ""]]></subject>\n""; result += ""    <keywords></keywords>\n""; result += ""    <body><![CDATA["" + post.getBody().getContent(locale) + ""]]></body>\n""; result += ""    <author>GCRP</author>\n""; result += ""    <authorEmail>gcrp@ist.utl.pt</authorEmail>\n""; result += ""    <place></place>""; result += ""    <visible>"" + post.isVisible() + ""</visible>\n""; result += ""    <id>"" + post.getExternalId() + ""</id>\n""; result += ""    <photoUrl></photoUrl>\n""; result += ""    <campus>Alameda</campus>\n""; result += ""    <categories/>\n""; result += ""    <pressRelease>false</pressRelease>\n""; result += ""    <sticky>"" + false + ""</sticky>\n""; result += ""    <priority>"" + index++ + ""</priority>\n""; result += ""  </net.sourceforge.fenixedu.presentationTier.Action.externalServices.AnnouncementDTO>\n""; }  result += ""</list>""; return Response.ok(result).build();  } "	0	0	0	0	0	1
"@Test public void verifyScatterPlot() { //getText(Locator.css(""svg"")) on Chrome  final String ELISPOT_DATA_PROV = ""0\n500\n1000\n1500\n2000\n2500\n3000\n3500\n0\n5000\n10000\n15000\n20000\n25000\n30000\n35000\n40000\n45000""; final String ICS_MAGNITUDE = ""0\n1\n2\n3\n4\n5\n0\n0.5\n1\n1.5\n2\n2.5\n3\n3.5\n4\n4.5\n5""; final String NAB_IC50 = ""1\n10\n1\n10\n100\n1000"";  CDSHelper.NavigationLink.PLOT.makeNavigationSelection(this);  XAxisVariableSelector xaxis = new XAxisVariableSelector(this); YAxisVariableSelector yaxis = new YAxisVariableSelector(this);  xaxis.openSelectorWindow(); xaxis.pickSource(CDSHelper.ELISPOT); xaxis.pickVariable(CDSHelper.ELISPOT_DATA_PROV); xaxis.setScale(DataspaceVariableSelector.Scale.Linear); xaxis.confirmSelection(); sleep(CDSHelper.CDS_WAIT_ANIMATION); yaxis.pickSource(CDSHelper.ELISPOT); yaxis.pickVariable(CDSHelper.ELISPOT_MAGNITUDE_BACKGROUND_SUB); yaxis.setScale(DataspaceVariableSelector.Scale.Linear); yaxis.confirmSelection();  if (CDSHelper.validateCounts) { cds.assertPlotTickText(ELISPOT_DATA_PROV); }  yaxis.openSelectorWindow(); sleep(CDSHelper.CDS_WAIT_ANIMATION); yaxis.pickSource(CDSHelper.ICS); yaxis.pickVariable(CDSHelper.ICS_MAGNITUDE_BACKGROUND_SUB); yaxis.setScale(DataspaceVariableSelector.Scale.Linear); yaxis.confirmSelection();  xaxis.openSelectorWindow(); xaxis.pickSource(CDSHelper.NAB); xaxis.pickVariable(CDSHelper.NAB_TITERID50); xaxis.setScale(DataspaceVariableSelector.Scale.Linear); xaxis.confirmSelection();  assertTrue(""For ELISPOT vs ICS x-axis gutter plot was not present."", cdsPlot.hasXGutter()); assertTrue(""There is an x-axis gutter plot, but there are no data points in it."", cdsPlot.getXGutterPlotPointCount() > 0 ); assertTrue(""For ELISPOT vs ICS y-axis gutter plot was not present."", cdsPlot.hasYGutter()); assertTrue(""There is an y-axis gutter plot, but there are no data points in it."", cdsPlot.getYGutterPlotPointCount() > 0 );  xaxis.openSelectorWindow(); xaxis.pickSource(CDSHelper.ICS); xaxis.pickVariable(CDSHelper.ICS_MAGNITUDE_BACKGROUND_SUB); xaxis.setScale(DataspaceVariableSelector.Scale.Linear); xaxis.confirmSelection();  if (CDSHelper.validateCounts) { cds.assertPlotTickText(ICS_MAGNITUDE); }  // Test log scales yaxis.openSelectorWindow(); yaxis.pickSource(CDSHelper.NAB); yaxis.pickVariable(CDSHelper.NAB_TITERID50); yaxis.setScale(DataspaceVariableSelector.Scale.Log); yaxis.confirmSelection();  assertTrue(""For NAB vs ICS x-axis gutter plot was not present."", cdsPlot.hasXGutter()); assertTrue(""There is an x-axis gutter plot, but there are no data points in it."", cdsPlot.getXGutterPlotPointCount() > 0 ); assertTrue(""For NAB vs ICS y-axis gutter plot was not present."", cdsPlot.hasYGutter()); assertTrue(""There is an y-axis gutter plot, but there are no data points in it."", cdsPlot.getXGutterPlotPointCount() > 0 );  // Test disabled for now as a result of side effect of log transformation story. will re-enable when // filter refinement is done and compound filter is used to drop <=0 data but retain null. //        xaxis.openSelectorWindow(); //        xaxis.pickSource(CDSHelper.SUBJECT_CHARS); //        xaxis.pickVariable(CDSHelper.DEMO_AGE); //        xaxis.setScale(DataspaceVariableSelector.Scale.Log); //        xaxis.confirmSelection(); // //        assertTrue(""For NAB vs Demographics x-axis gutter plot was not present."", cdsPlot.hasXGutter()); //        assertFalse(""For NAB vs Demographics y-axis gutter plot was present and it should not be."", cdsPlot.hasYGutter()); // //        if (CDSHelper.validateCounts) //        { //            cds.assertPlotTickText(NAB_IC50); //        } } "	0	0	0	0	0	1
"public static void receiveBurnCMDMessage(EMMessage message) { String msgId = message.getStringAttribute(EaseConstant.MESSAGE_ATTR_BURN_MSG_ID, """"); EMClient.getInstance() .chatManager() .getConversation(message.getFrom()) .removeMessage(msgId); } "	0	0	0	0	0	1
"public List<Passe> getAllByRound(long round) { Cursor res = database.rawQuery( ""SELECT s._id, s.passe, s.points, s.x, s.y, s.comment, s.arrow, s.arrow_index, "" + ""(SELECT COUNT(x._id) FROM SHOOT x WHERE x.passe=p._id), p.exact "" + ""FROM PASSE p  "" + ""LEFT JOIN SHOOT s ON p._id = s.passe "" + ""WHERE p.round = "" + round + "" "" + ""ORDER BY p._id ASC, s._id ASC"", null); List<Passe> list = new ArrayList<>(); if (res.moveToFirst()) { long oldRoundId = -1; int pIndex = 0; do { int ppp = res.getInt(8); if (ppp == 0) { res.moveToNext(); continue; } Passe passe = new Passe(ppp); passe.setId(res.getLong(1)); passe.roundId = round; passe.exact = res.getInt(9) == 1; if (oldRoundId != passe.roundId) { pIndex = 0; oldRoundId = passe.roundId; } passe.index = pIndex++; for (int i = 0; i < ppp; i++) { passe.shot[i] = ShotDataSource.cursorToShot(res, i); res.moveToNext(); } list.add(passe); } while (!res.isAfterLast()); } res.close(); return list; } "	0	0	0	0	0	1
"private Passe get(long passeId) { Cursor res = database.rawQuery( ""SELECT s._id, s.passe, s.points, s.x, s.y, s.comment, s.arrow, s.arrow_index, p.exact "" + ""FROM SHOOT s, PASSE p "" + ""WHERE s.passe=p._id "" + ""AND p._id="" + passeId + "" "" + ""ORDER BY s._id ASC"", null); int count = res.getCount();  res.moveToFirst(); Passe p = new Passe(count); p.setId(passeId); p.index = -1; p.exact = res.getInt(8) == 1; for (int i = 0; i < count; i++) { p.shot[i] = ShotDataSource.cursorToShot(res, i); res.moveToNext(); } res.close(); return p; } "	0	0	0	0	0	1
"@GET @Path(""/registry/list"") public Response actionTypes() { return new JsonResponse<>(Response.Status.OK, ActionRegistry.supportedActions()).build(); } "	0	0	0	0	0	1
public void restoreCategories() { editor.initVirtualPages(); firePropertyChange(DiagramWalkerSet.PROPERTY_CHANGE_DIAGRAM_WALKER, null, null); } 	0	0	0	0	0	1
@Override protected synchronized void install() { this.eventBus.register(getOwner()); } 	0	0	0	0	0	1
"public static void main(String[] args) throws Exception { ProviderXConfigBuilder builder = new ProviderXConfigBuilder(); builder.myIp(""192.168.31.175"").myPort(10002).addServicePackage(""limitart.core.rpcx.demo"").providerUID(3) .serviceCenterIp(""192.168.31.175"").serviceCenterPort(5555); ProviderX provider = new ProviderX(builder.build(), new IProviderListener() {  @Override public void onServiceCenterConnected(ProviderX provider) { ProviderJob job = new ProviderJobBuilder().jobName(""limitart-schedule"").intervalInSeconds(5) .repeatForever().listener(new IProviderScheduleListener() {  @Override public void action() { System.out.println(""jowiejfow""); } }).build(); try { provider.schedule(job); } catch (Exception e) { e.printStackTrace(); } }  @Override public void onProviderBind(ProviderX provider) {  } }); provider.bind();  } "	0	0	0	0	0	1
"@WorkerThread public Float getAverageHeartRate(Uri rideUri) { // First get the min and max float min = getMinHeartRate(rideUri); float max = getMaxHeartRate(rideUri);  long rideId = ContentUris.parseId(rideUri); String[] projection = { ""avg("" + LogColumns.HEART_RATE + "")"" }; LogSelection where = new LogSelection(); where.rideId(rideId).and().heartRateGtEq((int) min).and().heartRateLtEq((int) max); Cursor c = where.query(mContext, projection); try { if (!c.moveToNext()) return null; if (c.isNull(0)) return null; return c.getFloat(0); } finally { c.close(); } } "	0	0	0	0	0	1
@WorkerThread public float getMaxHeartRate(Uri rideUri) { return getMax(rideUri, LogColumns.HEART_RATE); } 	0	0	0	0	0	1
public void removeListener(LogListener listener) { mListeners.remove(listener); } 	0	0	0	0	0	1
"@WorkerThread public Long getLastLogDate(Uri rideUri) { long rideId = ContentUris.parseId(rideUri); String[] projection = { ""max("" + LogColumns.RECORDED_DATE + "")"" }; LogSelection where = new LogSelection(); where.rideId(rideId); Cursor c = where.query(mContext, projection); try { if (!c.moveToNext()) return null; if (c.isNull(0)) return null; return c.getLong(0); } finally { c.close(); } } "	0	0	0	0	0	1
public void addListener(LogListener listener) { mListeners.add(listener); } 	0	0	0	0	0	1
@WorkerThread public float getMaxCadence(Uri rideUri) { return getMax(rideUri, LogColumns.CADENCE); } 	0	0	0	0	0	1
@WorkerThread public float getMinHeartRate(Uri rideUri) { return getMin(rideUri, LogColumns.HEART_RATE); } 	0	0	0	0	0	1
"@WorkerThread public float getMax(Uri rideUri, String column) { // Get the point count to discard the top 10% values Integer count = getLogCount(rideUri); if (count == null) return 0;  long rideId = ContentUris.parseId(rideUri); String[] projection = { column }; LogSelection where = new LogSelection(); where.rideId(rideId).and().addRaw(column + "" IS NOT NULL""); Cursor c = where.query(mContext, projection, column + "" DESC LIMIT "" + count / 10); try { if (!c.moveToLast()) return 0; return c.getFloat(0); } finally { c.close(); } } "	0	0	0	0	0	1
public boolean LabelKeyboardHandler(int KeyCode, AttributeSet attrs, String ComponentName, Component comp, Circuit circ, SetAttributeAction act, boolean CreateAction) { switch (KeyCode) { case KeyEvent.VK_L: if (attrs.containsAttribute(StdAttr.LABEL)) { String OldLabel = attrs.getValue(StdAttr.LABEL); String NewLabel = AskAndSetLabel(ComponentName,OldLabel,circ,comp,attrs,act,CreateAction); if (!NewLabel.equals(OldLabel)) { if (!NewLabel.isEmpty()&& LabelEndsWithNumber(NewLabel)) { Activate(circ); } else  { Stop(circ); } } } return true; case KeyEvent.VK_T: if (attrs.containsAttribute(StdAttr.LABEL_VISABILITY)) { if (CreateAction) act.set(comp, StdAttr.LABEL_VISABILITY, !attrs.getValue(StdAttr.LABEL_VISABILITY)); else attrs.setValue(StdAttr.LABEL_VISABILITY, !attrs.getValue(StdAttr.LABEL_VISABILITY)); } return true; case KeyEvent.VK_V: if (attrs.containsAttribute(StdAttr.LABEL_VISABILITY)&&!attrs.getValue(StdAttr.LABEL_VISABILITY)) { if (CreateAction) act.set(comp, StdAttr.LABEL_VISABILITY, true); else attrs.setValue(StdAttr.LABEL_VISABILITY, true); } return true; case KeyEvent.VK_H: if (attrs.containsAttribute(StdAttr.LABEL_VISABILITY)&&attrs.getValue(StdAttr.LABEL_VISABILITY)) { if (CreateAction) act.set(comp, StdAttr.LABEL_VISABILITY, false); else attrs.setValue(StdAttr.LABEL_VISABILITY, false); } return true; case KeyEvent.VK_A: Stop(circ); return true; } return false; } 	0	0	0	0	0	1
"public static void main(String[] args) { String rootName = ""root""; LayoutNode.RectNode root = new LayoutNode.RectNode(rootName); JNodeLayout layout = new JNodeLayout(root); root.setHgap(10); root.setVgap(10);  JPanel panel = new JPanel();  panel.setLayout(layout);  layout.addLayoutNode(new LayoutNode.HorizontalNode(""topLine""), rootName, new Rectangle2D.Double(0, 0, 1, 0.05)); layout.addLayoutNode(new LayoutNode.RectNode(""panelNode1""), rootName, new Rectangle2D.Double(0, 0.05, 1, 0.65)); layout.addLayoutNode(new LayoutNode.RectNode(""panelNode2""), rootName, new Rectangle2D.Double(0, 0.7, 1, 0.25)); layout.addLayoutNode(new LayoutNode.HorizontalNode(""bottomLine""), rootName, new Rectangle2D.Double(0, 0.95, 0.5, 0.05)); layout.addLayoutNode(new LayoutNode.HorizontalNode(""bottomLineRight""), rootName, new Rectangle2D.Double(0.7, 0.95, 0.3, 0.05));  layout.setVerticalAlignment(""topLine"", NodeAlignment.CENTER);  layout.setVerticalAlignment(""bottomLine"", NodeAlignment.CENTER); layout.setHorizontalAlignment(""bottomLine"", NodeAlignment.LEFT);  layout.setVerticalAlignment(""bottomLineRight"", NodeAlignment.CENTER); layout.setHorizontalAlignment(""bottomLineRight"", NodeAlignment.RIGHT);  NodeConstraints topLine = new NodeConstraints(""topLine""); panel.add(new JLabel(""Hightlight: ""), topLine); panel.add(new JTextField(35), topLine); panel.add(new JButton(""...""), topLine); panel.add(new JButton(""ShowNext""), topLine);  panel.add(new JScrollPane(new JPanel()), new NodeConstraints(""panelNode1"", null)); panel.add(new JScrollPane(new JTextArea()), new NodeConstraints(""panelNode2"", null));  NodeConstraints bottomLine = new NodeConstraints(""bottomLine"");  panel.add(new JLabel(""Volume: ""), bottomLine); Vector<String> items = new Vector<String>(Arrays.asList(new String[] { ""A:\\  "" })); panel.add(new JComboBox<String>(items), bottomLine); panel.add(new JButton(""Refresh""), bottomLine);  panel.add(createSpinner(), bottomLine);  NodeConstraints bottomLineRight = new NodeConstraints(""bottomLineRight""); panel.add(new JButton(""Export""), bottomLineRight); panel.add(new JButton(""Quit""), bottomLineRight);  JMenuBar menubar = new JMenuBar(); menubar.add(new JMenu(""File"")); menubar.add(new JMenu(""Options"")); menubar.add(new JMenu(""Help""));  JFrame frame = new JFrame(""DisKView - Sysinternals: www.sysinternal.com""); frame.setJMenuBar(menubar); frame.add(panel); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.pack(); frame.setVisible(true);  } "	0	0	0	0	0	1
"@SuppressWarnings(""rawtypes"") public static boolean isSirenProperty(Class<?> type, Object obj, Field field) { boolean isProp = false;  Siren4JProperty anno = field.getAnnotation(Siren4JProperty.class); if (anno != null || type.isEnum()) { isProp = true; } else if (ArrayUtils.contains(propertyTypes, type)) { isProp = true; } else if (obj != null && (Collection.class.equals(type) || ArrayUtils.contains(type.getInterfaces(), Collection.class))) { //Try to determine value type if (!((Collection) obj).isEmpty()) { Object first = findFirstNonNull(((Collection) obj).iterator()); if (first == null || ArrayUtils.contains(propertyTypes, first.getClass())) { isProp = true; } } } else if (obj != null && (Map.class.equals(type) || ArrayUtils.contains(type.getInterfaces(), Map.class))) { //Try to determine value types of key and value if (!((Map) obj).isEmpty()) { Object firstKey = findFirstNonNull(((Map) obj).keySet().iterator()); Object firstVal = findFirstNonNull(((Map) obj).entrySet().iterator()); if ((firstKey == null || ArrayUtils.contains(propertyTypes, firstKey.getClass())) && (firstVal == null || ArrayUtils.contains(propertyTypes, firstVal.getClass()))) { isProp = true; } } } return isProp; } "	0	0	0	0	0	1
"private synchronized void recalculateDots() { orbits .retainAll( allOrbits );  Symmetry symmetry = allOrbits .getSymmetry(); RealVector test = new RealVector( 0.1d, 0.1d, 1d ); if ( symmetry instanceof OctahedralSymmetry ) test = new RealVector( 2d, 1d, 4d ); else if ( symmetry instanceof DodecagonalSymmetry ) test = new RealVector( 10d, 1d, 1d );  orbitDots .clear(); //        lastOrbit = null;  // cannot do this, we might have a valid value, for example after loading from XML boolean lastOrbitChanged = false; for ( Direction dir : allOrbits ) { if ( lastOrbit == null ) { // just a way to initialize the lastOrbit lastOrbit = dir; lastOrbitChanged = true; } OrbitState orbit = new OrbitState(); orbitDots .put( dir, orbit );  orbit .dotX = dir .getDotX(); if ( orbit .dotX >= 0d ) { // This orbit supports pre-computed dot locations orbit .dotY = dir .getDotY(); } else { // The old way Axis axis = symmetry .getAxis( test, Collections .singleton( dir ) ); AlgebraicVector v = axis .normal(); double z =  v .getComponent( 2 ) .evaluate(); orbit.dotX = v .getComponent( 0 ) .evaluate(); orbit.dotX = orbit.dotX / z; // intersect with z=0 plane orbit.dotY = v .getComponent( 1 ) .evaluate(); orbit.dotY = orbit.dotY / z; // intersect with z=0 plane }  //            if ( symmetry instanceof IcosahedralSymmetry ) { // switch X and Y (why? don't know, it just works) double temp = orbit.dotX; orbit.dotX = orbit.dotY; orbit.dotY = temp; }  if ( orbit.dotY > yMax ) yMax = orbit.dotY; if ( orbit.dotX > xMax ) xMax = orbit.dotX; } if ( ( lastOrbit == null ) || (! allOrbits .contains( lastOrbit ) ) ) { lastOrbitChanged = true; if ( ! orbits .isEmpty() ) lastOrbit = orbits .last(); else if ( ! orbitDots .isEmpty() ) lastOrbit = orbitDots .keySet() .iterator() .next(); else lastOrbit = null; } if ( lastOrbitChanged ) properties() .firePropertyChange( ""selectedOrbit"", null, lastOrbit == null? null : lastOrbit .getName() ); } "	0	0	0	0	0	1
@ExposedMethod(doc = BuiltinDocs.dict_iteritems_doc) final PyObject stringmap_iteritems() { return new ItemsIter(table.entrySet()); } 	0	0	0	0	0	1
"public void sub(final TaskCompletionSource<DDPSubscription.Ready> task, String name, JSONArray params, String id) { final boolean requested = sendMessage(""sub"", json -> json.put(""id"", id).put(""name"", name).put(""params"", params));  if (requested) { CompositeDisposable disposables = new CompositeDisposable();  disposables.add( flowable.filter(callback -> callback instanceof RxWebSocketCallback.Message) .map(callback -> ((RxWebSocketCallback.Message) callback).responseBodyString) .map(DDPClientImpl::toJson) .subscribe( response -> { String msg = extractMsg(response); if (""ready"".equals(msg) && !response.isNull(""subs"")) { JSONArray ids = response.optJSONArray(""subs""); for (int i = 0; i < ids.length(); i++) { String _id = ids.optString(i); if (id.equals(_id)) { task.setResult(new DDPSubscription.Ready(client, id)); disposables.clear(); break; } } } else if (""nosub"".equals(msg) && !response.isNull(""id"") && !response.isNull( ""error"")) { String _id = response.optString(""id""); if (id.equals(_id)) { task.setError(new DDPSubscription.NoSub.Error(client, id, response.optJSONObject(""error""))); disposables.clear(); } } }, RCLog::e ) );  addErrorCallback(disposables, task); } else { task.trySetError(new DDPClientCallback.Closed(client)); } } "	0	0	0	0	0	1
private void handleThrowable(Error error) throws Error { if (throwError) { throw error; } else { ExceptionReporter.report(testContext.getTestId(), error); } } 	0	0	0	0	0	1
public static GroupProjectDto toDto(final Project p, final UserProject up, final UserEntity u) { return new GroupProjectDto(p.getId(), p.getName(), p.getLogo(), up.getRole()==null ? ProjectType.PROJECT_ROLE_GUEST.getCode():up.getRole(), p.getCreateUserId(), u.getName(), p.getCreateTime()); } 	0	0	0	0	0	1
"private String validString(String attr, Object value, String validator, String acceptLanguage, JsonArray errorsContext) { Pattern p = patterns.get(validator); if (p == null) { return i18n.translate(""missing.validator"", I18n.DEFAULT_DOMAIN, acceptLanguage, validator); } if (value instanceof String && p.matcher((String) value).matches()) { if (""email"".equals(validator) && !""emailAcademy"".equals(attr) && invalidEmails != null && invalidEmails.containsKey(value)) { return i18n.translate(""invalid.bounce.email"", I18n.DEFAULT_DOMAIN, acceptLanguage, attr, (String) value); } return null; } else { if (errorsContext != null) { errorsContext.addObject(new JsonObject() .putString(""reason"", ""invalid.value"") .putString(""attribute"", i18n.translate(attr, I18n.DEFAULT_DOMAIN, acceptLanguage)) .putString(""value"", (value != null ? value.toString() : ""null"")) ); } return i18n.translate(""invalid.value"", I18n.DEFAULT_DOMAIN, acceptLanguage, """" ,attr, (value != null ? value.toString() : ""null"")); } } "	0	0	0	0	0	1
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_oauth);  Environment environment = Environment.fromPrefix(getIntent().getStringExtra(EXTRA_ENVIRONMENT)); String clientId = getIntent().getStringExtra(EXTRA_CLIENT_ID); String scope = getIntent().getStringExtra(EXTRA_SCOPE); String redirectUri = getIntent().getStringExtra(EXTRA_REDIRECT_URI);  OAuthFragment f = OAuthFragment.newInstance(environment, clientId, scope, redirectUri); getSupportFragmentManager().beginTransaction() .replace(R.id.container_content, f) .commit(); } 	0	0	0	0	0	1
public void next(Response response, Request.RequestArguments arguments) { try { swfSession.stepContinue(); waitingForResume = false; } catch (Exception e) { e.printStackTrace(System.err); } sendResponse(response); } 	0	0	0	0	0	1
@Override public String[] getIds() { return new String[] { ID }; } 	0	0	0	0	0	1
private void resetKeyMode() { charReset(); if (mKeyMode != MODE_NUM) { commitTyped(); } mComposing.setLength(0); mComposingI.setLength(0); getCurrentInputConnection().finishComposingText(); } 	0	0	0	0	0	1
"private void addErrorLoggerHandler() throws IOException, OtpErlangException { OtpErlangList args = OtpUtil.list(mbox.self()); sendRPC( ""error_logger"", ""add_report_handler"", OtpUtil.list(ERLYBERLY_ATOM, args) );  // flush the return value receiveRPC(); } "	0	0	0	0	0	1
"protected String getApplicationName() { if (applicationName == null) { applicationName = dockerConfig.getDockerRepository() .replace(""${project.artifactId}"", getPOMManager().getArtifactId()); } return applicationName; } "	0	0	0	0	0	1
default MacAddress sourceMac(@Nonnull final MacipAclRule rule) { return new MacAddress(byteArrayToMacSeparated(rule.srcMac != null ? rule.srcMac : DEFAULT_MAC_BYTES)); } 	0	0	0	0	0	1
default MacAddress sourceMacMask(@Nonnull final MacipAclRule rule) { return new MacAddress(byteArrayToMacSeparated(rule.srcMacMask != null ? rule.srcMacMask : DEFAULT_MAC_MASK_BYTES)); } 	0	0	0	0	0	1
public void setFirstDayOfWeek(int firstDayOfWeek) { mStyleDelegate.setFirstDayOfWeek(firstDayOfWeek); mAdapter.setFirstDayOfWeek(firstDayOfWeek); } 	0	0	0	0	0	1
void resumeReadsInternal(boolean wakeup) { boolean alreadyResumed = anyAreSet(state, STATE_READS_RESUMED); state |= STATE_READS_RESUMED; if(!alreadyResumed || wakeup) { if (!anyAreSet(state, STATE_IN_LISTENER_LOOP)) { getIoThread().execute(new Runnable() {  @Override public void run() { state |= STATE_IN_LISTENER_LOOP; try { do { ChannelListener<? super R> listener = getReadListener(); if (listener == null || !isReadResumed()) { return; } ChannelListeners.invokeChannelListener((R) AbstractFramedStreamSourceChannel.this, listener); //if writes are shutdown or we become active then we stop looping //we stop when writes are shutdown because we can't flush until we are active //although we may be flushed as part of a batch } while (allAreClear(state, STATE_CLOSED) && frameDataRemaining > 0 && data != null); } finally { state &= ~STATE_IN_LISTENER_LOOP; } } }); } } } 	0	0	0	0	0	1
"@Test public void create() { Dashboard expected = makeTeamDashboard(""template"", ""title"", ""appName"", ""comp1"", ""comp2"");  when(dashboardRepository.save(expected)).thenReturn(expected);  assertThat(dashboardService.create(expected), is(expected)); verify(componentRepository, times(1)).save(expected.getApplication().getComponents()); } "	0	0	0	0	0	1
"private void sendEmailAlertApplyJob(ProjectEntity projectEntity, ProjectRegistrantEntity projectRegistrantEntity, String mailSubject, Address[] recipientAddresses, Template template) throws MessagingException, IOException, TemplateException { applyJobMailMessage.setRecipients(Message.RecipientType.TO, recipientAddresses); StringWriter stringWriter = new StringWriter();  Map<String, Object> templateModel = new HashMap<>(); templateModel.put(""webBaseUrl"", webBaseUrl); templateModel.put(""projectTitle"", projectEntity.getProjectTitle()); templateModel.put(""projectDescription"", projectEntity.getProjectDescription()); templateModel.put(""skills"", StringUtils.join(projectEntity.getSkills(), ""<br/>"")); templateModel.put(""payMethod"", projectEntity.getPayMethod()); templateModel.put(""estimatedEndDate"", projectEntity.getEstimatedEndDate()); templateModel.put(""budget"", projectEntity.getBudget()); templateModel.put(""estimatedDuration"", projectEntity.getEstimatedDuration()); templateModel.put(""estimatedWorkload"", projectEntity.getEstimatedWorkload()); templateModel.put(""hourlyRate"", projectEntity.getHourlyRate()); templateModel.put(""numberOfHires"", projectEntity.getNumberOfHires()); templateModel.put(""projectId"", projectEntity.getProjectId()); templateModel.put(""projectAlias"", projectEntity.getProjectTitle().replaceAll(""\\W"", ""-""));  templateModel.put(""registrantFirstName"", projectRegistrantEntity.getRegistrantFirstName()); templateModel.put(""registrantLastName"", projectRegistrantEntity.getRegistrantLastName()); templateModel.put(""registrantEmail"", projectRegistrantEntity.getRegistrantEmail()); templateModel.put(""resumeLink"", projectRegistrantEntity.getResumeLink());  template.process(templateModel, stringWriter); mailSubject = String.format(mailSubject, projectEntity.getProjectTitle()); applyJobMailMessage.setSubject(MimeUtility.encodeText(mailSubject, ""UTF-8"", null)); applyJobMailMessage.setText(stringWriter.toString(), ""UTF-8"", ""html"");  stringWriter.flush(); applyJobMailMessage.saveChanges(); mailSender.send(applyJobMailMessage); } "	0	0	0	0	0	1
"@Override public void process(InputStream in, OutputStream out) throws IOException { JsonParser jp = Json.createParser(in); Event prev = null; int depthPastTarget = 0; boolean insideTarget = false; boolean seenTarget = false; while (jp.hasNext()) { Event e = jp.next(); String str = null;  switch (e) { case KEY_NAME: writeComma(prev, out); str = ""\"""" + StringEscapeUtils.escapeJson(jp.getString()) + ""\"": ""; out.write(str.getBytes()); if (depth.size() == 1) { // this could be the top-level target if (jp.getString().equals(this.field)) { // this is a match insideTarget = true; seenTarget = true; } }  break; case START_ARRAY: if (prev == Event.END_ARRAY) { out.write("", "".getBytes()); } out.write(""["".getBytes()); depth.push(A); break; case START_OBJECT: if (insideTarget) { depthPastTarget += 1; } if (prev == Event.END_OBJECT) { out.write("", "".getBytes()); } out.write(""{"".getBytes()); depth.push(O); break; case END_ARRAY: out.write(""]"".getBytes()); depth.pop(); break; case END_OBJECT: if (depth.size() == 1 && !seenTarget) { writeComma(prev, out); str = ""\"""" + StringEscapeUtils.escapeJson(this.field) + ""\"": {"" + this.content + ""}""; out.write(str.getBytes()); } if (insideTarget && depthPastTarget == 1) { writeComma(prev, out); out.write(this.content.getBytes()); insideTarget = false; } else if (insideTarget) { depthPastTarget -= 1; } out.write(""}"".getBytes()); depth.pop(); break; case VALUE_STRING: writeComma(prev, out); str = ""\"""" + StringEscapeUtils.escapeJson(jp.getString()) + ""\""""; out.write(str.getBytes()); break; case VALUE_NUMBER: writeComma(prev, out); out.write(jp.getString().getBytes()); break; case VALUE_TRUE: writeComma(prev, out); out.write(""true"".getBytes()); break; case VALUE_FALSE: writeComma(prev, out); out.write(""false"".getBytes()); break; case VALUE_NULL: writeComma(prev, out); out.write(""null"".getBytes()); break;  default: break; } prev = e; } } "	0	0	0	0	0	1
"public Project getProject(int projId) { logger.debug(""..getProject by projId""); Project project = null; PreparedStatement pstm = null; ResultSet rs = null; try { conn = new DbConnection().open(); StringBuilder sql = new StringBuilder(); sql.append("" SELECT  `proj_id`, `proj_name`, `proj_details`,""); sql.append("" proj_status,(SELECT conf_value FROM config c WHERE c.conf_name = p.proj_status) as proj_status_desc,""); sql.append("" (SELECT prot_name FROM project_type pt WHERE pt.prot_id = p.prot_id ) as prot_id, ""); sql.append("" proj_remark,proj_verify_by,proj_verify_date,account_code,""); sql.append("" (SELECT plan_name FROM plan pl WHERE pl.plan_id = p.plan_id) as plan_id, ""); sql.append("" (SELECT budp_name FROM budget_plan bp WHERE bp.budp_id = p.budp_id ) as budp_id, stra_id, ""); sql.append("" DATE_FORMAT(modified_date,'%d-%m-%Y') as modified_date, ""); sql.append("" (SELECT CONCAT(emp_fname,' ',emp_lname) FROM employee e WHERE e.emp_id = p.modified_by) as modified_by""); sql.append("" FROM `project` p WHERE p.proj_id = ?""); pstm = conn.prepareStatement(sql.toString()); pstm.setInt(1, projId); logger.info(""pstm ::=="" + pstm.toString()); rs = pstm.executeQuery();  if (rs.next()) { project = getEntityProject(rs); } } catch (Exception e) { logger.error(""getProject Error"", e); } finally { this.close(pstm, rs); } return project; } "	0	0	0	0	0	1
"public List<Project> getProjectListHaveTaskAssign(Integer empId) { logger.debug(""..getProjectListHaveTaskAssign""); List<Project> list = new ArrayList<Project>(); PreparedStatement pstm = null; ResultSet rs = null; try { conn = new DbConnection().open(); StringBuilder sql = new StringBuilder(); sql.append("" SELECT  `proj_id`, `proj_name`, `proj_details`, ""); sql.append("" proj_status,(SELECT conf_value FROM config c WHERE c.conf_name = p.proj_status) as proj_status_desc,""); sql.append("" plan_id,budp_id, ""); sql.append("" `prot_id`, `proj_remark`, `proj_verify_date`, `proj_verify_by`, ""); sql.append("" DATE_FORMAT(modified_date,'%d-%m-%Y') as modified_date, `modified_by` ""); sql.append("" FROM `project` p ""); sql.append("" WHERE p.proj_id IN (SELECT proj_id  FROM `task_assign` WHERE task_userid = ?)""); sql.append("" ORDER BY p.proj_name ASC""); pstm = conn.prepareStatement(sql.toString()); pstm.setInt(1, empId); logger.info(""pstm ::=="" + pstm.toString()); rs = pstm.executeQuery();  while (rs.next()) { list.add(getEntityProject(rs)); } } catch (Exception e) { logger.error(""getProjectListHaveTaskAssign Error"", e); } finally { this.close(pstm, rs); } return list; } "	0	0	0	0	0	1
private AbstractMessageSendNode binaryMessage(final MethodBuilder builder, final ExpressionNode receiver) throws ParseError { SourceCoordinate coord = getCoordinate(); SSymbol msg = binarySelector(); ExpressionNode operand = binaryOperand(builder);  return createMessageSend(msg, new ExpressionNode[] {receiver, operand}, getSource(coord)); } 	0	0	0	0	0	1
public Boolean getProcessingStatus() { return processingStatus; } 	0	0	0	0	0	1
public void tick() { getSecondTimeUnit().increment(); } 	0	0	0	0	0	1
public static boolean isPassable(Location from, Location to) { return preferAxisWise ? BlockProperties.isPassableAxisWise(from, to) : BlockProperties.isPassable(from, to); } 	0	0	0	0	0	1
public StudyPlan getCoursesFromMajor(String major , int semester) { return null; } 	0	0	0	0	0	1
public int getLayoutTransitionOffsetForPage(int index) { if (mPageScrolls == null || index >= mPageScrolls.length || index < 0) { return 0; } else { View child = getChildAt(index);  int scrollOffset = 0; LayoutParams lp = (LayoutParams) child.getLayoutParams(); if (!lp.isFullScreenPage) { scrollOffset = isLayoutRtl() ? getPaddingRight() : getPaddingLeft(); }  int baselineX = mPageScrolls[index] + scrollOffset + getViewportOffsetX(); return (int) (child.getX() - baselineX); } } 	0	0	0	0	0	1
"protected void showControls() { try { FXMLLoader loader = new FXMLLoader(); loader.setLocation(MainApp.class.getResource(""view/Controls.fxml"")); AnchorPane controls = loader.load(); rootLayout.setRight(controls); controlsController = loader.getController(); } catch (Exception e) { e.printStackTrace(); } } "	0	0	0	0	0	1
public LogicalDatastoreType getDsType() { return LogicalDatastoreType.CONFIGURATION; } 	0	0	0	0	0	1
public void AddSource(String name, PIDSource source) { mSources.put(name, source); } 	0	0	0	0	0	1
"protected void run() {  vpLeft.setWidth(""300px""); vpRight.setWidth(""300px""); hpAddPermission.setWidth(""300px""); vpNotePermission.setWidth(""300px"");  tbNoteShareMail.getElement().setPropertyString(""placeholder"", ""nutzer@noteit.de""); tbNoteSubTitel.getElement().setPropertyString(""placeholder"", ""Dein Untertitel""); tbNoteTitel.getElement().setPropertyString(""placeholder"", ""Dein Titel""); content.getElement().setAttribute(""placeholder"", ""Deine Notiz"");  hpHeader.setStyleName(""headerDetailView""); lblHeaderTitel.setStyleName(""lblHeaderTitel""); hpShowNote.setStyleName(""showDetailContent""); vpRight.setStyleName(""vpRightDetailContent""); hpAddPermission.setStyleName(""vpAddPermissionNotebook""); lblNoteDate.setStyleName(""lblNoteDate"");  tbNoteTitel.setStyleName(""textbox""); tbNoteSubTitel.setStyleName(""textbox""); dateBox.setStyleName(""textbox"");  rbRead.setValue(true); hpAddPermission.add(tbNoteShareMail); hpAddPermission.add(btnAddNotePermission); hpAddPermission.add(btnDeletePermission); hpAddPermission.setSpacing(0);  hpHeader.add(lblHeaderTitel); hpHeader.add(lblNoteDate); hpShowNote.setWidth(""600px""); /** * Create the Panel, Label and TextBox */  // vpTitel.add(lblNoteTitel); vpTitel.add(tbNoteTitel); vpTitel.setWidth(""300px"");  /** * Create the Panel, Label and TextBox */  // hpNoteSubTitel.add(lblNoteSubTitel); hpNoteSubTitel.add(tbNoteSubTitel); hpNoteSubTitel.setWidth(""300px"");  /** * Create the Panel, Label and TextBox */  // hpNoteText.add(lblNoteText); hpNoteText.add(content); hpNoteText.setWidth(""300px""); dateBox.setFormat(new DateBox.DefaultFormat(dateFormat)); dateBox.getDatePicker().setYearArrowsVisible(true); dateBox.getElement().setPropertyString(""placeholder"", ""Fälligkeitsdatum""); if (currentNote.getMaturityDate() != null) { dateBox.setValue(currentNote.getMaturityDate()); }  // hpNoteMaturity.add(lblNoteMaturity); hpNoteMaturity.add(dateBox); hpNoteMaturity.setWidth(""300px"");  hpBackButton.add(btnSaveNote); hpBackButton.setWidth(""300px"");  vpNotePermission.add(lblNotePermission); vpNotePermission.add(clUser);  vpLeft.add(vpTitel); vpLeft.add(hpNoteSubTitel); vpLeft.add(hpNoteText); vpLeft.add(hpNoteMaturity); vpLeft.add(btnSaveNote); vpRight.add(lblNoteShare); vpRight.add(hpAddPermission); vpRight.add(lblNoteShareRB); vpRight.add(rbRead); vpRight.add(rbWrite); vpRight.add(rbDelete); vpRight.add(vpNotePermission);  hpShowNote.add(vpLeft); hpShowNote.add(vpRight);  /** * Erstellen oder bearbeiten von Freigaben RPC */ btnAddNotePermission.addClickHandler(new ClickHandler() {  @SuppressWarnings(""deprecation"") @Override public void onClick(ClickEvent event) { int permissionID; if (rbRead.isChecked()) { permissionID = 1; } else if (rbWrite.isChecked()) { permissionID = 2; } else { permissionID = 3; } if (tbNoteShareMail.getText().matches(""^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$"")) { notesAdmin.setUserNotePermission(tbNoteShareMail.getText(), permissionID, currentNote.getId(), new AsyncCallback<Boolean>() {  @Override public void onSuccess(Boolean result) { if (result == true) { tbNoteShareMail.setText(""""); tbNoteShareMail.getElement().setPropertyString(""placeholder"", ""nutzer@noteit.de""); rbRead.setValue(true); getAllPermittedUsersbyNoteID(currentNote.getId()); } else { Window.alert(""Der Nutzer mit der E-Mail `"" + tbNoteShareMail.getText() + ""` wurde nicht gefunden""); } }  @Override public void onFailure(Throwable caught) { // TODO Auto-generated method stub  } }); } else { Window.alert(""Bitte gebe eine E-Mail-Adresse an!""); // clUser.setRowData(userList); }  } });  btnSaveNote.addClickHandler(new ClickHandler() {  public void onClick(ClickEvent event) {  if (tbNoteTitel.getText().length() > 0) { Timestamp timestampe; if (currentNote.getId() == 0) { if(dateBox.getTextBox().getValue().length() > 0){ Window.alert(""create Note"" + currentNote.getId()); Date date = dateBox.getValue(); long time = date.getTime(); timestampe = new Timestamp(time); }else{ timestampe = null; } notesAdmin.createNote(tbNoteTitel.getText(), tbNoteSubTitel.getText(), content.getText(), timestampe, Homepage.getCurrentUser(), null, currentNote.getNotebookId(), new AsyncCallback<Note>() {  @Override public void onFailure(Throwable caught) { // TODO Auto-generated method stub  }  @Override public void onSuccess(Note result) { NoteitCellBrowser.getNoteList(result);  } }); } else { if(dateBox.getTextBox().getValue().length() > 0){ Window.alert(""update Note""); Date date = dateBox.getValue(); long time = date.getTime(); timestampe = new Timestamp(time); }else{ timestampe = null; } notesAdmin.updateNote(tbNoteTitel.getText(), tbNoteSubTitel.getText(), content.getText(), timestampe, Homepage.getCurrentUser().getId(), null, currentNote.getNotebookId(), currentNote.getId(), new AsyncCallback<Void>() {  @Override public void onFailure(Throwable caught) { // TODO Auto-generated method stub  }  @Override public void onSuccess(Void result) { Timestamp ts = new Timestamp(System.currentTimeMillis()); Date date = new Date(ts.getTime()); DateTimeFormat sdfmt = DateTimeFormat.getFormat(""dd.MM.yyyy""); lblNoteDate.setText(""Zuletzt bearbeitet am: "" + sdfmt.format(date));  } }); } } else { Window.alert(""Bitte vergebe einen Titel für deine Notiz""); }  } });  this.add(hpHeader); this.add(hpShowNote);  } "	0	0	0	0	0	1
"public static final void process(String from, String to, InputStream data) throws org.yj.smtpstub.exception.IncompleteEmailException { if (from == null || to == null || data == null) { throw new IncompleteEmailException(); }  EmailModel model = new EmailModel(); model.setFrom(from); model.setFrom(from); model.setTo(to); String mailContent = getStringFromStream(data); model.setSubject(parseMessageSubject(mailContent)); model.setEmailStr(mailContent); model.setReceivedDate(new Date());  if (store != null) { try { store.save(model); } catch (IncompleteEmailException e) { logger.error(""email was incomplete.  "", e); }  } } "	0	0	0	0	0	1
"public void requestOpenTab(String absolutePath) { try { IFFTraversalTarget t = InventoryPather.traverse(this.archive.getInventory(), absolutePath); if (t instanceof FileInventoryItem) this.onRequestOpen.accept((FileInventoryItem) t); QuickDialogs.error(""Item %s is not a file."", absolutePath); } catch (TraversalException e) { QuickDialogs.exception(e); } } "	0	0	0	0	0	1
"@VisibleForTesting void lockTheIndexOrFail(String index) { try { IndexResponse response = client.index(new IndexRequest(index, ""$lock"", ""global"") .create(true).source(""_val"", true)).actionGet(); checkState(response.isCreated(), ""unable to lock the index "" + index); } catch (DocumentAlreadyExistsException dex) { throw new IllegalStateException(""unable to lock the index "" + index); } } "	0	0	0	0	0	1
"@Override public Optional<? extends PropertyCodeGenerator> create(Config config) { // Check this is a declared type TypeMirror type = config.getProperty().getType(); if (type.getKind() != TypeKind.DECLARED) { return Optional.absent(); } TypeElement element = (TypeElement) ((DeclaredType) type).asElement();  // Find the builder Optional<TypeElement> builder = tryFind(typesIn(element.getEnclosedElements()), IS_BUILDER_TYPE); if (!builder.isPresent()) { return Optional.absent(); }  // Verify the builder can be constructed Optional<BuilderFactory> builderFactory = BuilderFactory.from(builder.get()); if (!builderFactory.isPresent()) { return Optional.absent(); }  MergeBuilderMethod mergeFromBuilderMethod; if (findAnnotationMirror(element, ""org.inferred.freebuilder.FreeBuilder"").isPresent()) { /* * If the element is annotated @FreeBuilder, assume the necessary methods will be added. We * can't check directly as the builder superclass may not have been generated yet. To be * strictly correct, we should delay a round if an error type leaves us unsure about this kind * of API-changing decision, and then we would work with _any_ Builder-generating API. We * would need to drop out part of our own builder superclass, to prevent chains of dependent * buildable types leading to quadratic compilation times (not to mention cycles), and leave a * dangling super-superclass to pick up next round. As an optimization, though, we would * probably skip this for @FreeBuilder-types anyway, to avoid extra types whenever possible, * which leaves a lot of complicated code supporting a currently non-existent edge case. */ mergeFromBuilderMethod = MergeBuilderMethod.MERGE_DIRECTLY; } else { List<ExecutableElement> methods = FluentIterable .from(builder.get().getEnclosedElements()) .filter(ExecutableElement.class) .filter(new IsCallableMethod()) .toList();  // Check there is a build() method if (!any(methods, new IsBuildMethod(""build"", type, config.getTypes()))) { return Optional.absent(); }  // Check there is a buildPartial() method if (!any(methods, new IsBuildMethod(""buildPartial"", type, config.getTypes()))) { return Optional.absent(); }  // Check there is a clear() method if (!any(methods, new IsClearMethod())) { return Optional.absent(); }  // Check there is a mergeFrom(Value) method if (!any(methods, new IsMergeFromMethod(type, config.getTypes()))) { return Optional.absent(); }  // Check whether there is a mergeFrom(Builder) method if (any(methods, new IsMergeFromMethod(builder.get().asType(), config.getTypes()))) { mergeFromBuilderMethod = MergeBuilderMethod.MERGE_DIRECTLY; } else { mergeFromBuilderMethod = MergeBuilderMethod.BUILD_PARTIAL_AND_MERGE; } }  String setterName = SET_PREFIX + config.getProperty().getCapitalizedName(); String getBuilderName = GET_BUILDER_PREFIX + config.getProperty().getCapitalizedName() + GET_BUILDER_SUFFIX; return Optional.of(new CodeGenerator( config.getProperty(), builder.get(), builderFactory.get(), setterName, getBuilderName, mergeFromBuilderMethod)); } "	0	0	0	0	0	1
public String getRedeemedAt() { return strRedeemedAt; } 	0	0	0	0	0	1
"@Override public void onActivityResult(int requestCode, int resultCode, Intent data) { if (requestCode == ItemActivity.CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE) { if (resultCode == Activity.RESULT_OK) { // Image captured and saved to fileUri specified in the Intent ImageView image = imageUris.get(imageUris.size()-1).first;  LinearLayout.LayoutParams sizeParameters = new LinearLayout.LayoutParams(MAX_THUMBNAIL_WIDTH, MAX_THUMBNAIL_HEIGHT); image.setLayoutParams(sizeParameters);  BitmapEncoder.loadBitmapFromURI(image, imageUris.get(imageUris.size() - 1).second, MAX_THUMBNAIL_WIDTH, MAX_THUMBNAIL_HEIGHT); image.setOnClickListener(this);  //image.setImageURI(imageUris.get(imageUris.size()-1)); imageContainer.addView(image);  if(((ItemActivity)getActivity()).getItem() != null) { ((ItemActivity) getActivity()).getItem().addToAddedPictures(imageUris.get(imageUris.size() -1).second); } } else if (resultCode == Activity.RESULT_CANCELED) { // User cancelled the image capture //clean up imageUris.remove(imageUris.size() - 1); } else { // Image capture failed, advise user imageUris.remove(imageUris.size()-1); Toast.makeText(getActivity(), ""Der opstod en fejl under brug af kameraet"" , Toast.LENGTH_LONG).show(); } } else if(requestCode == ItemActivity.IMAGEVIEWER_REQUEST_CODE){ if(resultCode == Activity.RESULT_OK){ ArrayList<Uri> remainingURIs = data.getParcelableArrayListExtra(""remainingURIs"");  //no change if(remainingURIs.size() == imageUris.size()){ return; }  //update image list and reconstruct imageContainer imageContainer.removeAllViews();  if(((ItemActivity)getActivity()).getItem() != null){ ((ItemActivity)getActivity()).getItem().setPicturesChanged(true); } ArrayList temp = new ArrayList<Pair<ImageView, Uri>>(imageUris); for(int i = 0; i<imageUris.size(); i++){ Pair listItem = imageUris.get(i);  if(!remainingURIs.contains(listItem.second)){ //image has been removed if(((ItemActivity) getActivity()).getItem() != null){ Item currentItem = ((ItemActivity) getActivity()).getItem(); if(currentItem.getAddedPictures() !=  null){ if(!currentItem.getAddedPictures().contains(listItem.second)){ currentItem.addDeletedPicture((Uri) listItem.second); } else{ currentItem.removeFromDeletedPicture((Uri) listItem.second); } } } temp.remove(listItem); } else{ //image still exists imageContainer.addView((ImageView) listItem.first); } }  imageUris = temp; } } } "	0	0	0	0	0	1
private void switchToRegistrationOngoing() throws DAOException { String dateFromDB = getCurrentCES().getStartRegistrationDate().toString() + TIME_FOR_DATE_FROM_DB; runThreadForChangeStatus(dateFromDB, REGISTRATION_ONGOING_ID); } 	0	0	0	0	0	1
"public void visit(String str) { int ix = str.lastIndexOf("".class"");  if (ix >= 0) { String className = ""com.ibm.icu"" + str.substring(0, ix).replace('/', '.');  // Skip things in com.ibm.icu.dev; they're not relevant. if (className.startsWith(""com.ibm.icu.dev."")) { return; }  try { Class c = Class.forName(className); int   m = c.getModifiers();  if (serializable.isAssignableFrom(c) /*&& (! throwable.isAssignableFrom(c) || c.getDeclaredFields().length > 0)*/) { //Field uid;  System.out.print(className + "" ("" + Modifier.toString(m) + "") - "");  if(!Modifier.isInterface(m)){ try { /* uid = */ c.getDeclaredField(""serialVersionUID""); } catch (Exception e) { System.out.print(""no serialVersionUID - ""); } }  if (Modifier.isPublic(m)) { SerializableTest.Handler handler = SerializableTest.getHandler(className);  if (!Modifier.isInterface(m) && handler != null) { Object objectsOut[] = handler.getTestObjects(); Object objectsIn[]; boolean passed = true;  ByteArrayOutputStream byteOut = new ByteArrayOutputStream(); ObjectOutputStream out = new ObjectOutputStream(byteOut);  try { out.writeObject(objectsOut); out.close(); byteOut.close(); } catch (IOException e) { System.out.println(""Eror writing test objects:"" + e.toString()); return; }  if (path != null) { writeFile(className, byteOut.toByteArray()); }  ByteArrayInputStream byteIn = new ByteArrayInputStream(byteOut.toByteArray()); ObjectInputStream in = new ObjectInputStream(byteIn);  try { objectsIn = (Object[]) in.readObject(); in.close(); byteIn.close(); } catch (Exception e) { System.out.println(""Error reading test objects:"" + e.toString()); return; }  for(int i = 0; i < objectsIn.length; i += 1) { if (! handler.hasSameBehavior(objectsIn[i], objectsOut[i])) { passed = false; System.out.println(""Object "" + i + "" failed behavior test.""); } }  if (passed) { System.out.print(""test passed.""); } } else { // it's OK to not have tests for abstract classes... if (! Modifier.isAbstract(m)) { System.out.print(""no test.""); } } }  System.out.println(); } } catch (Exception e) { System.out.println(""Error processing "" + className + "": "" + e.toString()); } } } "	0	0	0	0	0	1
"public String createEntity(EntityReference ref, Object entity, Map<String, Object> params) { SiteGroup sg = null; String roleId = null; String userId = null; boolean active = true; if (entity.getClass().isAssignableFrom(Member.class)) { // if someone passes in a Member Member member = (Member) entity; String locationReference = (String) params.get(""locationReference""); if (locationReference == null) { throw new IllegalArgumentException( ""Cannot create/update a membership entity from Member without a locationReference in the params""); } sg = findLocationByReference(locationReference); roleId = member.getRole().getId(); userId = userEntityProvider.findAndCheckUserId(member.getUserId(), member.getUserEid()); active = member.isActive(); } else if (entity.getClass().isAssignableFrom(EntityMember.class)) { // if they instead pass in the EntitySite object EntityMember em = (EntityMember) entity; sg = findLocationByReference(em.getLocationReference()); roleId = em.getMemberRole(); if ((em.getUserId() != null) || (em.getUserEid() != null)) { userId = userEntityProvider.findAndCheckUserId(em.getUserId(), em.getUserEid()); } active = em.isActive(); } else { throw new IllegalArgumentException( ""Invalid entity for create/update, must be Member or EntityMember object""); } if (roleId == null || """".equals(roleId)) { roleId = sg.site.getJoinerRole(); }  // SAK-21786 // set the role to the one passed in, if available if (params.get(""memberRole"") != null) { roleId = (String) params.get(""memberRole""); } // set the active status to the one passed in, if available if (params.get(""active"") != null) { active = Boolean.parseBoolean((String) params.get(""active"")); }  checkSiteSecurity(sg.site.getId());  String[] userAuditString; List<String[]> userAuditList = new ArrayList<>();  // check for a batch add String[] userIds = checkForBatch(params, userId); String memberId = """"; String currentUserId = developerHelperService.getCurrentUserId();  // now add all the memberships for (int i = 0; i < userIds.length; i++) { if (sg.group == null) { // site only if (userIds[i].equals(currentUserId) && sg.site.isJoinable()) { try { siteService.join(sg.site.getId()); } catch (IdUnusedException e) { throw new IllegalArgumentException(""Invalid site: "" + sg.site.getId() + "":"" + e.getMessage(), e); } catch (PermissionException e) { throw new SecurityException(""Current user not allowed to join site: "" + sg.site.getId() + "":"" + e.getMessage(), e); } } else { sg.site.addMember(userIds[i], roleId, active, false); saveSiteMembership(sg.site); } User user = null; // Add change to user_audits_log table. try { user = userDirectoryService.getUser(userIds[i]); } catch (UserNotDefinedException e) { log.error("".createEntity: User with id {} doesn't exist"", userIds[i]); } userAuditString = new String[]{sg.site.getId(),user.getDisplayId(), roleId, UserAuditService.USER_AUDIT_ACTION_ADD, userAuditRegistration.getDatabaseSourceKey(), currentUserId}; userAuditList.add(userAuditString); } else { // group and site sg.group.addMember(userIds[i], roleId, active, false); saveGroupMembership(sg.site, sg.group); } if (i == 0) { EntityMember em = new EntityMember(userIds[0], sg.locationReference, roleId, active, null); memberId = em.getId(); } }  if (userAuditList.size() > 0) { userAuditRegistration.addToUserAuditing(userAuditList); }  if (userIds.length > 1) { log.info(""Batch add memberships: siteId="" + ((sg.site == null) ? ""none"" : sg.site.getId()) + "",groupId="" + ((sg.group == null) ? ""none"" : sg.group.getId()) + "",userIds="" + Search.arrayToString(userIds));  memberId = ""batch:"" + memberId; } return memberId; } "	0	0	0	0	0	1
protected final Object buildKeyManagerFactory(KeyStore ks, char[] password) throws NoSuchAlgorithmException, KeyStoreException, UnrecoverableKeyException { String alg = KeyManagerFactory.getDefaultAlgorithm(); KeyManagerFactory kmf = KeyManagerFactory.getInstance(alg); kmf.init(ks, password); return kmf; } 	0	0	0	0	0	1
"public static void addSubjectAlternativeName(String host) { if (host != null) { String hostWithoutPort = StringUtils.substringBefore(host, "":"");  try { // resolve host name for subject alternative name in case host name is ip address InetAddress addr = InetAddress.getByName(hostWithoutPort); ConfigurationProperties.addSslSubjectAlternativeNameDomains(addr.getHostName()); ConfigurationProperties.addSslSubjectAlternativeNameDomains(addr.getCanonicalHostName()); } catch (UnknownHostException uhe) { ConfigurationProperties.addSslSubjectAlternativeNameDomains(hostWithoutPort); } } } "	0	0	0	0	0	1
"public KeyStore buildKeyStore(boolean forceRebuild) { if (keystore == null || forceRebuild) { File keyStoreFile = new File(ConfigurationProperties.javaKeyStoreFilePath()); System.setProperty(""javax.net.ssl.trustStore"", keyStoreFile.getAbsolutePath()); if (keyStoreFile.exists()) { keystore = updateExistingKeyStore(keyStoreFile); } else { createNewKeyStore(); } // don't rebuild again and again and again ConfigurationProperties.rebuildKeyStore(false); } return keystore; } "	0	0	0	0	0	1
"public SSLContext sslContext() { try { // key manager KeyManagerFactory keyManagerFactory = getKeyManagerFactoryInstance(KeyManagerFactory.getDefaultAlgorithm()); keyManagerFactory.init(buildKeyStore(), ConfigurationProperties.javaKeyStorePassword().toCharArray());  // ssl context SSLContext sslContext = getSSLContextInstance(""TLS""); sslContext.init(keyManagerFactory.getKeyManagers(), InsecureTrustManagerFactory.INSTANCE.getTrustManagers(), null); return sslContext; } catch (Exception e) { throw new RuntimeException(""Failed to initialize the SSLContext"", e); } } "	0	0	0	0	0	1
public static SSLEngine createServerSSLEngine() { SSLEngine engine = SSLFactory.getInstance().sslContext().createSSLEngine(); engine.setUseClientMode(false); return engine; } 	0	0	0	0	0	1
public static SSLEngine createClientSSLEngine() { SSLEngine engine = SSLFactory.getInstance().sslContext().createSSLEngine(); engine.setUseClientMode(true); return engine; } 	0	0	0	0	0	1
public SSLSocket wrapSocket(Socket socket) throws Exception { // ssl socket factory SSLSocketFactory sslSocketFactory = sslContext().getSocketFactory();  // ssl socket SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(socket, socket.getInetAddress().getHostAddress(), socket.getPort(), true); sslSocket.setUseClientMode(true); sslSocket.startHandshake(); return sslSocket; } 	0	0	0	0	0	1
"static String convertStreamToString(InputStream is) { @SuppressWarnings(""resource"") java.util.Scanner s = new Scanner(is).useDelimiter(""\\A""); return s.hasNext() ? s.next() : """"; } "	0	0	0	0	0	1
@Override protected boolean onMiddleClicked() { switch (mStatusBar.getBarState()) { case StatusBarState.KEYGUARD: if (!mDozingOnDown) { EventLogTags.writeSysuiLockscreenGesture( EventLogConstants.SYSUI_LOCKSCREEN_GESTURE_TAP_UNLOCK_HINT, 0 /* lengthDp - N/A */, 0 /* velocityDp - N/A */); startUnlockHintAnimation(); } return true; case StatusBarState.SHADE_LOCKED: if (!mQsExpanded) { mStatusBar.goToKeyguard(); } return true; case StatusBarState.SHADE:  // This gets called in the middle of the touch handling, where the state is still // that we are tracking the panel. Collapse the panel after this is done. post(mEmptySpaceClickedRunnable); return false; default: return true; } } 	0	0	0	0	0	1
@Test(expected = NullPointerException.class) public void generateConsumerDisposeNull() { Observable.generate(() -> 1, (s, o) -> o.onNext(1), null); } 	0	0	0	0	0	1
@Test(expected = NullPointerException.class) public void generateStateConsumerInitialStateNull() { Observable.generate(null, (s, o) -> o.onNext(1)); } 	0	0	0	0	0	1
@Test public void generateConsumerStateNullAllowed() { NbpObservable.generate(() -> null, (s, o) -> o.onComplete()).toBlocking().lastOption(); } 	0	0	0	0	0	1
@Test(expected = NullPointerException.class) public void generateConsumerDisposeNull() { NbpObservable.generate(() -> 1, (s, o) -> o.onNext(1), null); } 	0	0	0	0	0	1
"@Override public void finishDatabase() throws ModuleException { super.finishDatabase();  // Write ContextDocumentation to archive  Map<String, String> exportModuleArgs = siarddkExportModule.getExportModuleArgs(); FileIndexFileStrategy fileIndexFileStrategy = siarddkExportModule.getFileIndexFileStrategy(); MetadataPathStrategy metadataPathStrategy = siarddkExportModule.getMetadataPathStrategy(); SIARDMarshaller siardMarshaller = siarddkExportModule.getSiardMarshaller();  if (exportModuleArgs.get(Constants.CONTEXT_DOCUMENTATION_FOLDER) != null) {  ContextDocumentationWriter contextDocumentationWriter = new ContextDocumentationWriter( siarddkExportModule.getMainContainer(), siarddkExportModule.getWriteStrategy(), fileIndexFileStrategy, siarddkExportModule.getExportModuleArgs());  contextDocumentationWriter.writeContextDocumentation(); }  // Create fileIndex.xml  try { fileIndexFileStrategy.generateXML(null); } catch (ModuleException e) { throw new ModuleException(""Error writing fileIndex.xml"", e); }  try { String path = metadataPathStrategy.getXmlFilePath(Constants.FILE_INDEX); OutputStream writer = fileIndexFileStrategy.getWriter(siarddkExportModule.getMainContainer(), path, siarddkExportModule.getWriteStrategy()); siardMarshaller.marshal(""dk.magenta.siarddk.fileindex"", ""/siarddk/fileIndex.xsd"", ""http://www.sa.dk/xmlns/diark/1.0 ../Schemas/standard/fileIndex.xsd"", writer, fileIndexFileStrategy.generateXML(null)); writer.close(); } catch (IOException e) { throw new ModuleException(""Error writing fileIndex to the archive."", e); }  } "	0	0	0	0	0	1
"private void testMerge(String fullName, String type) throws MergeException, IOException, NoSuchAlgorithmException { parameterMap.put(TemplateFactory.KEY_FULLNAME, 	new String[]{fullName}); Template root = TemplateFactory.getTemplate(parameterMap); String mergeOutput = root.merge(); root.packageOutput(); CompareArchives.assertArchiveEquals(type, validateDir + fullName + type, outputDir + fullName + type); } "	0	0	0	0	0	1
private void setUpStreamProcessing() { Observable.merge(Arrays.asList( setUpObjectProcessing().map(formatter::format), setUpBooleanProcessing().map(formatter::format), setUpByteProcessing().map(formatter::format), setUpIntegerProcessing().map(formatter::format), setUpCharProcessing().map(formatter::format), setUpStringProcessing().map(formatter::format), setUpIntArrayProcessing().map(formatter::format) )) .doOnNext(saver::save) .subscribe(__ -> {}, ex -> { flush(); exceptionStream.onNext((LogMessageException) ex); }); } 	0	0	0	0	0	1
@Override protected void refreshVisuals() { ModelNode node = (ModelNode) getModel(); IFigure modelBackgroundLayer = ((ScalableRootEditPart) getRoot()) .getLayer(ModelBackgroundLayer.MODEL_BACKGROUND_LAYER); modelBackgroundLayer.setBackgroundColor(new Color(null, node.getBackgroundColor())); getViewer().setProperty(SnapToGrid.PROPERTY_GRID_ENABLED, node.getShowGrid()); getViewer().setProperty(SnapToGrid.PROPERTY_GRID_VISIBLE, node.getShowGrid()); getViewer().setProperty(SnapToGeometry.PROPERTY_SNAP_ENABLED, node.getShowGrid());  getFigure().repaint();  super.refreshVisuals(); } 	0	0	0	0	0	1
"public void screenShot(final String category, final String testname, final Waiter waiter, final boolean doCompare) throws TimeoutException { GVRScreenshotCallback callback = new GVRScreenshotCallback() { private void compareWithGolden(Bitmap bitmap, String testname, Waiter waiter) { Bitmap golden = null; try { InputStream stream = gvrContext.getContext().getAssets().open(category + ""/"" + testname); golden = BitmapFactory.decodeStream(stream); } catch (IOException ex) { waiter.fail(ex); } if (golden != null) { waiter.assertEquals(golden.getWidth(), bitmap.getWidth()); waiter.assertEquals(golden.getHeight(), bitmap.getHeight());  Bitmap diffmap = golden.copy(golden.getConfig(), true); float diff = 0; for (int y = 0; y < golden.getHeight(); y++) { for (int x = 0; x < golden.getWidth(); x++) { int p1 = golden.getPixel(x, y); int p2 = bitmap.getPixel(x, y); int r = Math.abs(Color.red(p1) - Color.red(p2)); int g = Math.abs(Color.green(p1) - Color.green(p2)); int b = Math.abs(Color.blue(p1) - Color.blue(p2)); diffmap.setPixel(x, y, Color.argb(255, r, g, b)); diff += (float) r / 255.0f + g / 255.0f + b / 255.0f; } }  Log.e(category, category + "": %s %f"", testname, diff); if (diff > 2000.0f) { writeBitmap(category, ""diff_"" + testname, diffmap); } waiter.assertTrue(diff <= 2000.0f); } }  protected void writeBitmap(String dir, String filename, Bitmap bitmap) { try { ByteArrayOutputStream bytes = new ByteArrayOutputStream(); bitmap.compress(Bitmap.CompressFormat.PNG, 100, bytes); File sdcard = Environment.getExternalStorageDirectory(); dir = sdcard.getAbsolutePath() + ""/GearVRFTests/"" + dir + ""/""; File d = new File(dir); d.mkdirs(); File f = new File(d, filename); FileOutputStream fo = new FileOutputStream(f); fo.write(bytes.toByteArray()); fo.close(); } catch (IOException ex) { waiter.fail(ex); } }  @Override public void onScreenCaptured(Bitmap bitmap) { synchronized (onScreenshotLock) { try { String basename = testname + "".png""; writeBitmap(category, basename, bitmap); Log.d(category, ""Saved screenshot of %s"", testname); if (doCompare) { compareWithGolden(bitmap, basename, waiter); } waiter.resume(); } catch (Exception e) { Log.d(category, ""Could not save screenshot of %s"", testname); waiter.fail(e); } } } }; waitForSceneRendering(); gvrContext.captureScreenCenter(callback); waiter.await(); } "	0	0	0	0	0	1
private void updateWidget() { final AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(this); RemoteViews views = ListWidgetProvider .buildRemoteViews(this, appWidgetManager, mAppWidgetId); appWidgetManager.updateAppWidget(mAppWidgetId, views); // note: broken for API 25 Google stock launcher, work around by delaying notify. // https://code.google.com/p/android/issues/detail?id=228575 Runnable runnable = new Runnable() { @Override public void run() { appWidgetManager.notifyAppWidgetViewDataChanged(mAppWidgetId, R.id.list_view); } }; new Handler().postDelayed(runnable, 300);  setWidgetResult(RESULT_OK); finish(); } 	0	0	0	0	0	1
"@Nullable @Override public String getType(@NonNull Uri uri) { final int match = sURI_MATCHER.match(uri);  switch (match) { case PROJECTS: return BacklogContract.ProjectEntry.CONTENT_TYPE; default: throw new UnsupportedOperationException(""Unknown uri: "" + uri); } } "	0	0	0	0	0	1
@Override public ResourceManager getDefaultConfig() { Property[] properties = {STFRD_TIME_PER_SENTENCE, STFRD_MAX_SENTENCE_LENGTH, USE_POS, USE_LEMMA, USE_SHALLOW_PARSE, USE_DEP, USE_NER_CONLL, USE_NER_ONTONOTES, USE_STANFORD_PARSE, USE_STANFORD_DEP, USE_SRL_VERB, USE_SRL_NOM, USE_SRL_PREP, USE_QUANTIFIER, THROW_EXCEPTION_ON_FAILED_LENGTH_CHECK, USE_JSON, USE_LAZY_INITIALIZATION, USE_SRL_INTERNAL_PREPROCESSOR, SPLIT_ON_DASH, USE_SENTENCE_PIPELINE}; return (new AnnotatorServiceConfigurator().getConfig(new ResourceManager( generateProperties(properties)))); } 	0	0	0	0	0	1
public void setFixpath(final String fixpath) { assert fixpath != null ? new File(fixpath).isAbsolute() : true; this.fixpath = fixpath; } 	0	0	0	0	0	1
"private void notify(SimpleMessage message) { String title = message.getFromUserId(); String content = message.getContent().toString(); if (Objects.equals(message.getFromUserId(), YIN)) { String[] messageContents = message.getContent().toString().split(""\n""); title = messageContents[0]; content = messageContents[1]; } Notifications.simple(this, title, content, R.drawable.ic_notification, this.getClass()); } "	0	0	0	0	0	1
"@Override public void update() { if (repository.get().succeeded()) { SimpleMessage in = new SimpleMessage.Builder() .setContent(repository.get().get()) .setFromUserId(TAG) .setToUserId(TimeKey.userId) .thenCreateAtNow(); if (AgeraBus.repository().hasObservers()) { AgeraBus.repository().accept(new NewInEvent(in)); } else { Log.d(YIN, ""DeadEvent""); notify(in); } messagesStore(getApplicationContext()).insert(in); } repository.removeUpdatable(this); } "	0	0	0	0	0	1
"@Override public InputStream getInputStream() throws IOException { if (isClosed) throw new IOException(""Book File has already been closed"");  if (outputstream != null && outputstream.getBuffer().length != 0){ return new BookInputStream(outputstream); } return new BookInputStream(book, binarymode); } "	0	0	0	0	0	1
protected void moveRight() { if ( !((tX + tWidth + 10) > Main.WIDTH )) { tX += tSpeed; } } 	0	0	0	0	0	1
protected void moveLeft() { if ( (tX ) > 10 ) { tX -= tSpeed; } } 	0	0	0	0	0	1
"public static void main(String[] args) throws Exception {  // load needed information DvrpConfigGroup dvrpConfigGroup = new DvrpConfigGroup(); dvrpConfigGroup.setTravelTimeEstimationAlpha(0.05); File configFile = new File(args[0]); Config config = ConfigUtils.loadConfig(configFile.toString(), new playground.sebhoerl.avtaxi.framework.AVConfigGroup(), dvrpConfigGroup, new BlackListedTimeAllocationMutatorConfigGroup()); Scenario scenario = ScenarioUtils.loadScenario(config); Network network = scenario.getNetwork(); final File virtualnetworkDir = new File(""virtualNetwork""); VirtualNetwork virtualNetworkLoad = VirtualNetworkGet.readDefault(scenario.getNetwork()); TravelData travelDataLoad = TravelDataIO.fromByte(network, virtualNetworkLoad, new File(virtualnetworkDir, ""travelData""));  // call the performancefleetsizecalculator and calculate the availabilities PerformanceFleetSizeCalculator performanceFleetSizeCalculator = new PerformanceFleetSizeCalculator(network, virtualNetworkLoad, travelDataLoad, travelDataLoad.getNumbertimeSteps(), 20, 20); Tensor Availabilities = performanceFleetSizeCalculator.calculateAvailabilities(); } "	0	0	0	0	0	1
public boolean has (CommandSender me, String perm, boolean informSenderIfNot) { if (has(me, perm)) { return true; } else if (informSenderIfNot) { me.sendMessage(this.getForbiddenMessage(perm)); } return false; } 	0	0	0	0	0	1
public void gotProvince() { stats[0]++; maxInfluence(getProvinceCount()); redrawPlayer(); } 	0	0	0	0	0	1
"public FlushResult flush(String username, String token) throws UnknownHostException { TreeMap<DateTime, List<ActivityState>> statesToSend = null; TreeMap<DateTime, List<ActivityEvent>> eventsToSend = null;  ActivityState lastState; synchronized(this) { lastState = this.recordStates(ActivityState.createNullState());  statesToSend = this.states; eventsToSend = flattenEvents(this.events);  this.states = new TreeMap<DateTime, List<ActivityState>>(DateTimeComparator.getInstance()); this.events = new HashMap<UUID, List<ActivityEvent>>(); }  if (lastState != null && !(lastState instanceof NullActivityState)) { this.recordState(lastState.recreate()); }  ActivityInfoProcessor processor = new ActivityInfoProcessor(statesToSend, eventsToSend);  //if (!processor.isValid()) { //	return FlushResult.Skip; //}  String machineName = findLocalHostNameOr(""unknown""); List<ActivityInfo> activityInfoList = processor.getSerializableEntities(machineName, context.getInstanceValue(), ""intellij"", context.getPluginVersion()); String activityLogExtension = context.getProperty(""activity-log.extension""); if (!processor.isActivityValid(activityInfoList)) { return FlushResult.Skip; } FlushResult result = FlushResult.Succeded; for(ActivityInfo info : activityInfoList) { if (!info.isValid()) { continue; } File cacheFolder = context.getTrackerFolder(); if (cacheFolder == null) { LogManager.INSTANCE.logError(""Could not access cache folder. It might not be created.""); continue; } FlushResult intermediateResult = trySendEntries(info, username, token); if (intermediateResult == FlushResult.Succeded) { for (final File fileEntry : cacheFolder.listFiles(new GenericExtensionFilter(activityLogExtension))) { trySendEntriesOnFile(fileEntry, username, token); }  if (Boolean.parseBoolean(context.getProperty(""activity-log.trace-sent""))) { String filename = String.format(""%s\\%s%s"", cacheFolder.getAbsolutePath(), info.getBatchId(), "".sent"");  FileOutputStream stream = null; try { stream = new FileOutputStream(new File(filename)); ObjectWriter writer = context.getJsonWriter(); String json = writer.writeValueAsString(info); stream.write(json.getBytes(Charset.forName(""UTF-8""))); } catch (Exception e) { LogManager.INSTANCE.logError(e, ""There was a problem trying to store activity data locally.""); } finally { if (stream != null) { try { stream.close(); } catch (IOException e) { e.printStackTrace(); } } } } } else { String filename = String.format(""%s\\%s%s"", cacheFolder.getAbsolutePath(), info.getBatchId(), activityLogExtension);  FileOutputStream stream = null; try { stream = new FileOutputStream(new File(filename)); ObjectWriter writer = context.getJsonWriter(); String json = writer.writeValueAsString(info); stream.write(json.getBytes(Charset.forName(""UTF-8""))); } catch (Exception e) { LogManager.INSTANCE.logError(e, ""There was a problem trying to store activity data locally.""); } finally { if (stream != null) { try { stream.close(); } catch (IOException e) { e.printStackTrace(); } } } }  if (intermediateResult != FlushResult.Succeded && intermediateResult != FlushResult.Skip) { result = intermediateResult; } } return result; } "	0	0	0	0	0	1
"public static TerminalRequirement readFrom(String s){ TerminalRequirement result; //First look for either '-', '>', '<', or 'of'. s = s.replaceAll(""\\s+"", """"); if(s.contains(""of"")){ int i = s.indexOf(""of""); result = readFrom(s.substring(i + 2)); String numString = s.substring(0, i); try{ result.numToChoose = Integer.parseInt(numString); }catch(Exception e){ parseException(s, ""the 'of' in a Terminal Requirement must be preceeded by an integer.""); } result.recalcOriginalCoursesNeeded(); return result; } if(s.contains("">"") || s.contains(""<"")){ result = readFromInequality(s); } else{ if(!s.contains(""-"")){ s = s.replaceAll(""(?<=[a-zA-Z])(?=\\d)"", ""-""); } if(!s.contains(""-"")){ parseException(s, ""A terminal requirement has to include a '-', or else both letters and numbers""); } String[] split = s.split(""-""); if(split.length > 2){ parseException(s,""You need a comma between terminal requirements""); } Prefix p = new Prefix(split[0], split[1]); //in case of BLK result = new TerminalRequirement(p); } return result; } "	0	0	0	0	0	1
@Test public void testTCompactProtocol() throws IOException, SerializerException, TException { testRecoding(new TCompactProtocol.Factory(), new TCompactProtocolSerializer()); } 	0	0	0	0	0	1
@Test public void testTTupleProtocol() throws IOException, SerializerException, TException { testRecoding(new TTupleProtocol.Factory(), new TTupleProtocolSerializer()); } 	0	0	0	0	0	1
public final AtomicInteger getVideoFrameCacheNumber() { return publisher == null ? null : publisher.getVideoFrameCacheNumber(); } 	0	0	0	0	0	1
"private MenuEntry buildContactListMenuEntry(){ return new MenuEntry(""Contactos"", R.drawable.ic_action_group, new Runnable(){ @Override public void run(){ startActivity(new Intent(BaseDrawerActivity.this, ContactListActivity.class)); } }); } "	0	0	0	0	0	1
"@Override public NodeTree getDistributionTree(String instanceId, String statusSubQuery, boolean checkVisibility) { Connection con = getConnection(); try { return PublicationDAO.getDistributionTree(con, instanceId, statusSubQuery, checkVisibility); } catch (SQLException e) { throw new PublicationRuntimeException(""PublicationBmEJB.getDistributionTree()"", SilverpeasRuntimeException.ERROR, ""publication.GETTING_NUMBER_OF_PUBLICATIONS_FAILED"", ""instanceId = "" + instanceId, e); } finally { DBUtil.close(con); } } "	0	0	0	0	0	1
"@Override public List<List<String>> getRootValues(TreeData treeData, Level level, List<TreeFilter> treeFilters) throws HpccConnectionException, RemoteException {  List<List<String>> valueList = null; try { String requestName = getGenericQueryRequestName(treeData.getHpccConnection(),treeData.getFiles().iterator().next()); String urlStr; if (requestName != null) { urlStr = constructComplicatedTreeQuery(requestName, treeData, treeFilters); } else { String query = level.getElements().get(0).getFileName(); StringBuilder urlBuilder = new StringBuilder(); if (treeData.getHpccConnection().getIsSSL()) { urlBuilder.append(Constants.HTTPS); } else { urlBuilder.append(Constants.HTTP); } urlBuilder.append(treeData.getHpccConnection().getHostIp()).append("":"") .append(treeData.getHpccConnection().getWsEclPort()).append(""/WsEcl/submit/query/"") .append(treeData.getHpccConnection().getClusterType()) // Since a level can use only one query, taking first // LevelElement's query .append(""/"").append(query).append(""/xml?"");  if (treeData.getInputParams() != null && treeData.getInputParams().size() == 1) {  Iterator<InputParam> iterator = treeData.getInputParams().iterator(); while (iterator.hasNext()) { InputParam param = iterator.next(); if (!StringUtils.isNullOrEmpty(param.getValue())) { urlBuilder.append(param.getName()).append(""="") .append(URLEncoder.encode(param.getValue(), Constants.CHAR_CODE));  if (iterator.hasNext()) { urlBuilder.append(""&""); } } } }  if (treeFilters != null) {  Iterator<TreeFilter> filterIterator = treeFilters.iterator(); while (filterIterator.hasNext()) { TreeFilter treeFilter = (TreeFilter) filterIterator.next(); urlBuilder.append(treeFilter.getColumnName()).append(""="") .append(URLEncoder.encode(treeFilter.getValue(), Constants.CHAR_CODE)); if (filterIterator.hasNext()) { urlBuilder.append(""&""); } } }  urlStr = urlBuilder.toString();  if (LOG.isDebugEnabled()) { LOG.debug(""getRootValues() URL ->"" + urlStr); } }  URL url = new URL(urlStr);  URLConnection urlConnection = url.openConnection(); String authString = treeData.getHpccConnection().getUsername() + "":"" + treeData.getHpccConnection().getPassword(); String authStringEnc = new String(Base64.encodeBase64(authString.getBytes())); urlConnection.setRequestProperty(AUTHORIZATION, BASIC + authStringEnc);  final InputStream response = urlConnection.getInputStream();  if (response != null) { valueList = constructChildValueList(response, level); } else { throw new HpccConnectionException(Constants.UNABLE_TO_FETCH_DATA); }  } catch (RemoteException e) { if (e.getMessage().contains(""Unauthorized"")) { throw new HpccConnectionException(""401 Unauthorized""); } LOG.error(Constants.EXCEPTION, e); throw e; } catch (ParserConfigurationException | SAXException | IOException | XPathExpressionException ex) { LOG.error(Constants.EXCEPTION, ex); throw new HpccConnectionException(ex.getMessage()); } if (LOG.isDebugEnabled()) { LOG.debug(""valueList --->"" + valueList); } return valueList; } "	0	0	0	0	0	1
private Coordinate getTownCoordinates(String city) { Coordinate coordinate = null; if (city.length() <= 0) { Toast.makeText(this, R.string.error_empty_location_name, Toast.LENGTH_SHORT).show(); return null; } Geocoder geocoder = new Geocoder(getApplicationContext()); List<Address> addresses; try { addresses = geocoder.getFromLocationName(city, 3); if (addresses.size() == 0){ Toast.makeText(getApplicationContext(), String.format(getString(R.string.coordinates_not_found), city), Toast.LENGTH_SHORT).show(); return null; } Address currentAddress = addresses.get(0); coordinate = new Coordinate(); coordinate.setLatitude(currentAddress.getLatitude()); coordinate.setLongitude(currentAddress.getLongitude()); } catch (IOException e) { Toast.makeText(MyApplication.getAppContext(), R.string.error_geo_service_not_available, Toast.LENGTH_SHORT).show(); e.printStackTrace(); return null; } catch (IllegalArgumentException e) { Toast.makeText(MyApplication.getAppContext(), R.string.invalid_lang_long_used, Toast.LENGTH_SHORT).show(); e.printStackTrace(); return null; } return coordinate; } 	0	0	0	0	0	1
"@Override public synchronized void acceptRow(final Object[] row) throws IOException{ try{ // Wait until the last accepted row has been consumed: while(!endReached && pendingRow != null) wait();  /* If the end has been reached, this is not normal * (because endRows() is always called after acceptRow()...so, it means the iteration has been aborted before the end) * and so the stream reading should be interrupted: */ if (endReached) throw new IOException(""Streaming aborted!"");  // Otherwise, keep the given row: pendingRow = row;  /* Security for the cases where a row to accept is NULL. * In such case, pendingRow will be set to NULL and the function getRow() will wait for ever. * This case is not supposed to happen because the caller of acceptRow(...) should not give a NULL row... * ...which should then mean that the end of the stream has been reached. */ if (pendingRow == null) endReached = true;  }catch(InterruptedException ie){ /* If the thread has been interrupted, set this TableSink in a state similar to * when the end of the stream has been reached: */ pendingRow = null; endReached = true;  }finally{ // In all cases, all waiting threads must be freed: notifyAll(); } } "	0	0	0	0	0	1
"@Override public Drawable loadTile(final MapTileRequestState pState) {  ITileSource tileSource = mTileSource.get(); if (tileSource == null) { return null; }  final MapTile pTile = pState.getMapTile();  // if there's no sdcard then don't do anything if (!isSdCardAvailable()) { if (OpenStreetMapTileProviderConstants.DEBUGMODE) { Log.d(IMapView.LOGTAG,""No sdcard - do nothing for tile: "" + pTile); } return null; }  InputStream inputStream = null; try { if (OpenStreetMapTileProviderConstants.DEBUGMODE) { Log.d(IMapView.LOGTAG,""Tile doesn't exist: "" + pTile); }  final long x = (long) pTile.getX(); final long y = (long) pTile.getY(); final long z = (long) pTile.getZoomLevel(); final long index = ((z << z) + x << z) + y; final Cursor cur =mDatabase.query(DatabaseFileArchive.TABLE,columns,""key = "" + index + "" and provider = '"" + tileSource.name() + ""'"", null, null, null, null); byte[] bits=null; long lastModified=0l;  if(cur.getCount() != 0) { cur.moveToFirst(); bits = (cur.getBlob(cur.getColumnIndex(""tile""))); lastModified = cur.getLong(cur.getColumnIndex(""expires"")); } cur.close(); if (bits==null) return null; inputStream = new ByteArrayInputStream(bits); Drawable drawable = tileSource.getDrawable(inputStream); // Check to see if file has expired final long now = System.currentTimeMillis(); final boolean fileExpired = lastModified < now - mMaximumCachedFileAge;  if (fileExpired && drawable != null) { if (OpenStreetMapTileProviderConstants.DEBUGMODE) { Log.d(IMapView.LOGTAG,""Tile expired: "" + tile); } ExpirableBitmapDrawable.setDrawableExpired(drawable); //should we remove from the database here? } return drawable; } catch (final Throwable e) { Log.e(IMapView.LOGTAG,""Error loading tile"", e); } finally { if (inputStream != null) { StreamUtils.closeStream(inputStream); } }  return null; } "	0	0	0	0	0	1
"public Task getTaskById(Long id) { return (Task) getSession().get(Task.class, id); //		return (Task) getSession().createQuery(""FROM Task WHERE id = :id"").setParameter(""id"", id).uniqueResult(); } "	0	0	0	0	0	1
"public static void convertToICompletions(final String text, String actTok, int offset, Object fromServer, List<ICompletionProposal> ret, boolean showForTabCompletion, IFilterCompletion filter) { if (fromServer instanceof Object[]) { Object[] objects = (Object[]) fromServer; fromServer = Arrays.asList(objects); } if (fromServer instanceof List) { int length = actTok.lastIndexOf('.'); if (length == -1) { length = actTok.length(); } else { length = actTok.length() - length - 1; } final String trimmedText = text.trim();  List comps = (List) fromServer; for (Object o : comps) { if (o instanceof Object[]) { //name, doc, args, type Object[] comp = (Object[]) o;  String name = (String) comp[0]; String docStr = (String) comp[1]; int type = extractInt(comp[3]); String args = AbstractPyCodeCompletion.getArgs((String) comp[2], type, ICompletionState.LOOKING_FOR_INSTANCED_VARIABLE); String nameAndArgs = name + args;  int priority = IPyCompletionProposal.PRIORITY_DEFAULT;  if (type == IToken.TYPE_LOCAL) { priority = IPyCompletionProposal.PRIORITY_LOCALS;  } else if (type == IToken.TYPE_PARAM) { priority = IPyCompletionProposal.PRIORITY_LOCALS_1; } else if (type == IToken.TYPE_IPYTHON_MAGIC) { priority = IPyCompletionProposal.PRIORTTY_IPYTHON_MAGIC; }  //                    ret.add(new PyCompletionProposal(name, //                            offset-length, length, name.length(), //                            PyCodeCompletionImages.getImageForType(type), name, null, docStr, priority));  int cursorPos = name.length(); if (args.length() > 1) { cursorPos += 1; }  int replacementOffset = offset - length; PyCalltipsContextInformation pyContextInformation = null; if (args.length() > 2) { pyContextInformation = new PyCalltipsContextInformation(args, replacementOffset + name.length() + 1); //just after the parenthesis } else {  //Support for IPython completions (non standard names)  //i.e.: %completions, cd ... if (name.length() > 0) {  //magic ipython stuff (starting with %) // Decrement the replacement offset _only_ if the token begins with % // as ipthon completes a<tab> to %alias etc. if (name.charAt(0) == '%' && text.length() > 0 && text.charAt(0) == '%') { replacementOffset -= 1;  // handle cd -- we handle this by returning the full path from ipython // TODO: perhaps we could do this for all completions } else if (trimmedText.equals(""cd"") || trimmedText.startsWith(""cd "") || trimmedText.equals(""%cd"") || trimmedText.startsWith(""%cd "")) {  // text == the full search e.g. ""cd works""   ; ""cd workspaces/foo"" // actTok == the last segment of the path e.g. ""foo""  ; // nameAndArgs == full completion e.g. ""workspaces/foo/""  if (showForTabCompletion) { replacementOffset = 0; length = text.length();  } else { if (name.charAt(0) == '/') { //Should be something as cd c:/temp/foo (and name is /temp/foo) char[] chars = text.toCharArray(); for (int i = 0; i < chars.length; i++) { char c = chars[i]; if (c == name.charAt(0)) { String sub = text.substring(i, text.length()); if (name.startsWith(sub)) { replacementOffset -= (sub.length() - FullRepIterable .getLastPart(actTok) .length()); break; } } } } } } } }  PyLinkedModeCompletionProposal completion = new PyLinkedModeCompletionProposal(nameAndArgs, replacementOffset, length, cursorPos, PyCodeCompletionImages.getImageForType(type), nameAndArgs, pyContextInformation, docStr, priority, PyCompletionProposal.ON_APPLY_DEFAULT, args, false); if (filter == null || filter.acceptCompletion(type, completion)) { ret.add(completion); } } } } } "	0	0	0	0	0	1
"@Override public boolean finishSnapshotRestore() { System.out.println(""finishSnapshotRestore: "" + nextWinToEmit); return true; } "	0	0	0	0	0	1
public void addSitemaps(List<OHSitemap> sitemaps){ this.sitemaps.addAll(sitemaps); notifyItemRangeInserted(findPosition(NavigationItems.ITEM_SITEMAPS), sitemaps.size()); } 	0	0	0	0	0	1
public AreaChart<Number, Number> getChart() { return chart; } 	0	0	0	0	0	1
"@Test public void testImportExport2() throws Exception { Repository repo = manager.getEntity(""r1"", Repository.class); String xml = testImportExport(repo, ""comprehensive-ead.xml"", ""Resource (call) |||.Ident (num) |||"", ""eng""); //System.out.println(xml); Document doc = parseDocument(xml); assertXPath(doc, ""Testing import/export [ingest]"", ""//ead/eadheader/revisiondesc/change/item/text()""); assertXPath(doc, ""eng"", ""//ead/eadheader/profiledesc/langusage/language/@langcode""); assertXPath(doc, ""Local"", ""//ead/eadheader/profiledesc/descrules""); assertXPath(doc, ""NIOD Description"", ""//ead/eadheader/filedesc/publicationstmt/publisher/text()""); assertXPath(doc, ""NIOD Description"", ""//ead/archdesc/did/repository/corpname/text()""); assertXPath(doc, ""Scope and contents note content no label |||\n\n"" + ""Scope and contents note content |||"", ""//ead/archdesc/scopecontent/p/text()""); assertXPath(doc, ""Separated materials note content no label |||"", ""//ead/archdesc/separatedmaterial[2]/p/text()""); assertXPath(doc, ""Series I |||"", ""//ead/archdesc/dsc/c01/did/unitid/text()""); assertXPath(doc, ""Folder 3 |||"", ""//ead/archdesc/dsc/c01[3]/c02[2]/did/unitid/text()""); assertXPath(doc, ""Processing information note no label |||"", ""//ead/archdesc/processinfo[@encodinganalog='3.7.1']/p""); assertXPath(doc, ""2000"", ""//ead/archdesc/processinfo[@encodinganalog='3.7.3']/p/date""); assertXPath(doc, ""Source information |||"", ""//ead/archdesc/processinfo/p/bibref""); } "	0	0	0	0	0	1
"@Override protected void onPostExecute(String result) { System.out.println(""in onPostExecute.""); try { JSONObject jsonObject = new JSONObject(result);  System.out.println(""success value: ""+jsonObject.getString(""success"").toString());  // event has been successfully created if (jsonObject.getString(""success"").toString().equals(""1"")) { // now we can grab the newly created e_id returned from the // server // Note: g_id is the only unique identifier of a group and // therefore must be used for any future calls concerning // that group. ID = jsonObject.getString(""e_id"").toString(); System.out.println(""MEssage: "" + jsonObject.getString(""message"")); System.out.println(""e_id of newly created group is: "" + ID); user.fetchEventInvites(); user.fetchEventsPending(); user.fetchEventsUpcoming(); Event e = new Event(Integer.parseInt(ID)); e.fetchEventInfo(); e.fetchParticipants(); GLOBAL.setCurrentUser(user); GLOBAL.setEventBuffer(e);  // display confirmation box AlertDialog dialog = new AlertDialog.Builder( EventCreateActivity.this) .setMessage(""You've successfully created an event!"") .setCancelable(true) .setPositiveButton(""Invite Groups to Your Event"", new DialogInterface.OnClickListener() { @Override public void onClick( DialogInterface dialog, int id) { // code here to take user to // eventaddmembersactivity page. // (pass e_id as extra so invites // can be sent to correct event id) Intent intent = new Intent( EventCreateActivity.this, EventAddGroupsActivity.class); intent.putExtra(""CONTENT"", ""EVENT""); intent.putExtra(""EID"", ID); intent.putExtra(""EMAIL"", user.getEmail()); startActivity(intent); finish(); } }) .setNegativeButton(""View Your Event Profile"", new DialogInterface.OnClickListener() { @Override public void onClick( DialogInterface dialog, int which) { // code here to take user to newly // created event profile page. (pass // e_id as extra so correct event // profile can be loaded) Intent intent = new Intent( EventCreateActivity.this, null); intent.putExtra(""EID"", ID); intent.putExtra(""EMAIL"", user.getEmail()); startActivity(intent); finish(); } }).show(); // if user dimisses the confirmation box, gets sent to back // to eventActivity.class dialog.setOnCancelListener(new DialogInterface.OnCancelListener() {  @Override public void onCancel(DialogInterface dialog) { finish(); } }); } // Create event failed for some reasons. Allow user to retry. else if (jsonObject.getString(""success"").toString().equals(""0"")) { // display error box new AlertDialog.Builder(EventCreateActivity.this) .setMessage( ""Unable to create event! Please choose an option:"") .setCancelable(true) .setPositiveButton(""Try Again"", new DialogInterface.OnClickListener() { @Override public void onClick( DialogInterface dialog, int id) { // initiate creation of event AGAIN new CreateEventTask() .execute(""http://68.59.162.183/"" + ""android_connect/create_event.php""); } }).setNegativeButton(""Cancel"", null).show(); } } catch (Exception e) { Log.d(""onPostreadJSONFeed"", e.getLocalizedMessage()); } } "	0	0	0	0	0	1
public Expression parseExpression(GroovyParser.CallExpressionContext ctx) { Expression expression = parseCallExpressionRule(ctx.callExpressionRule(), ctx.expression(), ctx.genericDeclarationList());  if (expression instanceof ConstructorCallExpression) { return expression; }  MethodCallExpression method = (MethodCallExpression) expression;  if (asBoolean(ctx.expression())) { Token op = ctx.op; method.setSpreadSafe(op.getType() == GroovyParser.STAR_DOT); method.setSafe(op.getType() == GroovyParser.SAFE_DOT); }  return setupNodeLocation(method, ctx); } 	0	0	0	0	0	1
@Override public void onResume() { if (playOnlyInForeground && playerState == 4) { Start(); } } 	0	0	0	0	0	1
"@Override public Response createGuest( UriInfo uriInfo, Guest desiredGuestState) throws ResourceNotFoundException {  int guestId = this.guestService.insertGuest(desiredGuestState); Guest guest = this.guestService.getGuest(guestId);  Date lastModified = new Date(); String entityTag = EntityTagGenerator.generate(guest.toString().getBytes(), true); String location = uriInfo.getRequestUri().toString() + guestId + ""/""; this.resourceMetadataService.insertResourceMetadata( new ResourceMetadata(location, lastModified, entityTag) );  return Response .created(URI.create(location)) .entity(guest) .header(""Last-Modified"", lastModified) .header(""ETag"", entityTag) .build(); } "	0	0	0	0	0	1
"public GitClient init() { invokeGenerically(GIT_INIT_PROCESS_NAME, true, ""init""); return this; } "	0	0	0	0	0	1
"public static boolean sendNewResponsibleChangeNotification(int userId, int shiftId){ User user = userDB.getUserById(userId); Shift shift = shiftDB.getShift(shiftId); Timestamp timestamp = Timestamp.from(Instant.now()); String content = user.getFirstName()+"" ""+user.getLastName()+"" er blit satt som ny ansvarsvakt på skiftet den ""+ FormattingUtil.formatDate(shift.getDate())+"".""; int adminId = userDB.getAdminId(); if(adminId == 0) return false; NewsFeedItem newsFeedItem = new NewsFeedItem(-1,timestamp,content, adminId,userId,shiftId, NewsFeedItem.NewsFeedCategory.NOTIFICATION); return newsDB.createNotification(newsFeedItem) != 0; } "	0	0	0	0	0	1
"@VisibleForTesting boolean startDockerSeleniumContainer(String browser, boolean forceCreation) {  if (validateAmountOfDockerSeleniumContainers() || forceCreation) {  String hostIpAddress = ""localhost"";  final int nodePort = findFreePortInRange(LOWER_PORT_BOUNDARY, UPPER_PORT_BOUNDARY); final int vncPort = nodePort + 10000;  List<String> envVariables = new ArrayList<>(); envVariables.add(""SELENIUM_HUB_HOST="" + hostIpAddress); envVariables.add(""SELENIUM_HUB_PORT=4445""); envVariables.add(""SELENIUM_NODE_HOST="" + hostIpAddress); envVariables.add(""GRID=false""); envVariables.add(""RC_CHROME=false""); envVariables.add(""RC_FIREFOX=false""); envVariables.add(""USE_SELENIUM=3""); envVariables.add(""WAIT_TIMEOUT=120s""); envVariables.add(""PICK_ALL_RANDMON_PORTS=true""); envVariables.add(""PICK_ALL_RANDOM_PORTS=true""); envVariables.add(""VIDEO_STOP_SLEEP_SECS=1""); envVariables.add(""WAIT_TIME_OUT_VIDEO_STOP=20s""); boolean sendAnonymousUsageInfo = env.getBooleanEnvVariable(""ZALENIUM_SEND_ANONYMOUS_USAGE_INFO"", false); envVariables.add(""SEND_ANONYMOUS_USAGE_INFO="" + sendAnonymousUsageInfo); envVariables.add(""BUILD_URL="" + env.getStringEnvVariable(""BUILD_URL"", """")); envVariables.add(""NOVNC=true""); envVariables.add(""NOVNC_PORT="" + vncPort); envVariables.add(""SCREEN_WIDTH="" + getScreenWidth()); envVariables.add(""SCREEN_HEIGHT="" + getScreenHeight()); envVariables.add(""TZ="" + getTimeZone()); envVariables.add(""SELENIUM_NODE_REGISTER_CYCLE=0""); envVariables.add(""SELENIUM_NODE_PROXY_PARAMS=de.zalando.tip.zalenium.proxy.DockerSeleniumRemoteProxy""); if (BrowserType.CHROME.equalsIgnoreCase(browser)) { envVariables.add(""SELENIUM_NODE_CH_PORT="" + nodePort); envVariables.add(""CHROME=true""); } else { envVariables.add(""CHROME=false""); } if (BrowserType.FIREFOX.equalsIgnoreCase(browser)) { envVariables.add(""SELENIUM_NODE_FF_PORT="" + nodePort); envVariables.add(""FIREFOX=true""); } else { envVariables.add(""FIREFOX=false""); }  String networkMode = String.format(""container:%s"", getContainerName()); HostConfig hostConfig = HostConfig.builder() .shmSize(1073741824L) // 1GB .networkMode(networkMode) .appendBinds(""/tmp/mounted:/tmp/mounted"") .autoRemove(true) .build();  try { final ContainerConfig containerConfig = ContainerConfig.builder() .image(getLatestDownloadedImage(DOCKER_SELENIUM_IMAGE)) .env(envVariables) .hostConfig(hostConfig) .build();  String dockerSeleniumContainerName = String.format(""%s_%s"", getContainerName(), nodePort); final ContainerCreation dockerSeleniumContainer = dockerClient.createContainer(containerConfig, dockerSeleniumContainerName); dockerClient.startContainer(dockerSeleniumContainer.id()); return true; } catch (Exception e) { LOGGER.log(Level.SEVERE, LOGGING_PREFIX + e.toString(), e); ga.trackException(e); } } return false; } "	0	0	0	0	0	1
"@Override public void setUp() { LOGGER.debug(""Starting tests"");  session.execute(""CREATE KEYSPACE IF NOT EXISTS gravitee WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': '1' };""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.tenants (id text PRIMARY KEY, name text, description text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.views (id text PRIMARY KEY, name text, description text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.tags (id text PRIMARY KEY, name text, description text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.apikeys (key text PRIMARY KEY, subscription text, application text, plan text, expire_at timestamp, created_at timestamp, updated_at timestamp, revoked_at timestamp, revoked boolean);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.apis (id text PRIMARY KEY, name text, description text, version text, definition text, deployed_at timestamp, created_at timestamp, updated_at timestamp, visibility text, lifecycle_state text, picture text, group text, views set<text>);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.applications (id text PRIMARY KEY, name text, description text, type text, created_at timestamp, updated_at timestamp, group text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.events (id text PRIMARY KEY, type text, payload text, parent_id text, properties map<text, text>, created_at timestamp, updated_at timestamp);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.groups (id text PRIMARY KEY, type text, name text, administrators list<text>, created_at timestamp, updated_at timestamp);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.memberships (user_id text, reference_id text, reference_type text, type text, created_at timestamp, updated_at timestamp, PRIMARY KEY (user_id, reference_id, reference_type));""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.pages (id text PRIMARY KEY, name text, type text, content text, last_contributor text, page_order int, published boolean, source_type text, source_configuration text, configuration_tryiturl text, configuration_tryit boolean, api text, created_at timestamp, updated_at timestamp);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.plans (id text PRIMARY KEY, name text, description text, validation text, type text, status text, plan_order int, apis set<text>, created_at timestamp, updated_at timestamp, definition text, characteristics list<text>, security text, published_at timestamp, closed_at timestamp);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.users (username text PRIMARY KEY, source text, source_id text, password text, email text, firstname text, lastname text, roles set<text>, created_at timestamp, updated_at timestamp, last_connection_at timestamp, picture text);""); session.execute(""CREATE TABLE IF NOT EXISTS gravitee.subscriptions (id text PRIMARY KEY, plan text, application text, reason text, status text, created_at timestamp, updated_at timestamp, processed_at timestamp, starting_at timestamp, ending_at timestamp, processed_by text, subscribed_by text);"");  session.execute(""CREATE TABLE IF NOT EXISTS gravitee.ratelimits (key text PRIMARY KEY, last_request bigint, counter bigint, reset_time bigint, created_at bigint, updated_at bigint, async boolean);""); } "	0	0	0	0	0	1
private CollectionItem buildCollectionItemFromInputParameters(String data, User user) { CollectionItem collectionItem = JsonDeserializer.deserialize(data, CollectionItem.class); return collectionItem; } 	0	0	0	0	0	1
"private void startTimer() { subscriptions.add(matchResult.eventsObservable(elapsedMinutes) .map(matchEvent -> (Goal) matchEvent) .observeOn(AndroidSchedulers.mainThread()) .subscribe(goal -> { boolean isHomeGoal = goal.club().nameEquals(match.home()); TextView txtScore = isHomeGoal ? txtTeamHomeGoals : txtTeamAwayGoals; int currGoals = Integer.parseInt(txtScore.getText().toString()); txtScore.setText(String.valueOf(++currGoals)); int gravity = isHomeGoal ? GravityCompat.START : GravityCompat.END; appendEvent(R.drawable.ball, goal.time() + ""' "" + goal.player().name(), gravity); }));  subscriptions.add(timerObservable() .observeOn(AndroidSchedulers.mainThread()) .subscribe(l -> { elapsedMinutes++; fractionView.setFraction(elapsedMinutes % 45, 60); if (elapsedMinutes == 45) { appendEvent(R.drawable.ic_schedule_black_48px, strEndOfFirstHalf, Gravity.CENTER); } else if (elapsedMinutes == 90) { stopTimer(); appendEvent(R.drawable.ic_schedule_black_48px, strEndOfMatch, Gravity.CENTER); appendEvent(finalScoreIcon, finalScoreMessage, Gravity.CENTER); Club winner = matchResult.winner(); boolean isDraw = matchResult.isDraw(); boolean isWinner = !isDraw && userClub.nameEquals(winner); if (isDraw || isWinner) { appendEvent(R.drawable.ic_attach_money_black_24dp, ""+"" + (isWinner ? UserPreferences.COINS_PRIZE_WIN : UserPreferences.COINS_PRIZE_DRAW), Gravity.CENTER_HORIZONTAL); } playPauseButton.setVisibility(View.GONE); doneButton.setVisibility(View.VISIBLE); fractionView.setFraction(45, 60); } })); isRunning = true; } "	0	0	0	0	0	1
"public LogEntry getLogEntry(String ID){  String compare[] = {ID}; Cursor cursor = mDatabase.query(LogEntryTable.TABLE_LOG_ENTRY, LogEntryTable.ALL_COLUMNS, LogEntryTable.COLUMN_ID + ""=?"", compare, null, null, null);  if (cursor.getCount() == 0) { cursor.close(); return null; } else if (cursor.getCount() > 1) { System.out.println(""Duplicated ID found! ""+ID); return null; }  cursor.moveToFirst(); LogEntry logEntry = new LogEntry( cursor.getString(cursor.getColumnIndex(LogEntryTable.COLUMN_ID)), cursor.getInt(cursor.getColumnIndex(LogEntryTable.COLUMN_ACTIVITY)));  logEntry.setID(cursor.getString( cursor.getColumnIndex(LogEntryTable.COLUMN_ID))); logEntry.setDate(cursor.getInt( cursor.getColumnIndex(LogEntryTable.COLUMN_DATE))); logEntry.setSubType(cursor.getInt( cursor.getColumnIndex(LogEntryTable.COLUMN_SUB_TYPE))); logEntry.setDuration(cursor.getInt( cursor.getColumnIndex(LogEntryTable.COLUMN_DURATION))); logEntry.setDistance(cursor.getInt( cursor.getColumnIndex(LogEntryTable.COLUMN_DISTANCE))); logEntry.setCount(cursor.getInt( cursor.getColumnIndex(LogEntryTable.COLUMN_COUNT))); logEntry.setIntensity(cursor.getInt( cursor.getColumnIndex(LogEntryTable.COLUMN_INTENSITY))); logEntry.setWeight(cursor.getInt( cursor.getColumnIndex(LogEntryTable.COLUMN_WEIGHT)));  return logEntry; } "	0	0	0	0	0	1
"@Test public void testStreaming() throws Exception { ValueFactory vf = con.getValueFactory(); int subjectIndex = 0; int predicateIndex = 100; int objectIndex = 1000; int testStatementCount = 1000; int count = 0; con.begin(); while (count < testStatementCount) { con.add(vf.createIRI(""urn:test:"" + subjectIndex), vf.createIRI(""urn:test:"" + predicateIndex), vf.createIRI(""urn:test:"" + objectIndex)); if(Math.round(Math.random()) > 0) { subjectIndex++; } if(Math.round(Math.random()) > 0) { predicateIndex++; } if(Math.round(Math.random()) > 0) { objectIndex++; } count++; } con.commit();  for(int evaluateCount = 0; evaluateCount < 1000; evaluateCount++) { try (ByteArrayOutputStream stream = new ByteArrayOutputStream(); RepositoryConnection nextCon = rep.getConnection();) { TupleQueryResultWriter sparqlWriter = QueryResultIO.createTupleWriter( TupleQueryResultFormat.SPARQL, stream); TupleQuery tupleQuery = con.prepareTupleQuery(QueryLanguage.SPARQL, ""SELECT ?s ?p ?o WHERE { ?s ?p ?o . }""); tupleQuery.setIncludeInferred(false); tupleQuery.evaluate(sparqlWriter); } } } "	0	0	0	0	0	1
@Override public void onStop() { subscribeLiveUpdates(false); if (asset.getWellKnownType() == AssetType.AGENT) { subscribeAgentStatus(false); } super.onStop(); } 	0	0	0	0	0	1
"private void newSession() { // Create a connection manager with custom configuration. PoolingHttpClientConnectionManager connManager = new PoolingHttpClientConnectionManager();  // Validate connections after 1 sec of inactivity connManager.setValidateAfterInactivity(1000); // Create connection configuration ConnectionConfig connectionConfig = ConnectionConfig.custom() .setMalformedInputAction(CodingErrorAction.IGNORE) .setUnmappableInputAction(CodingErrorAction.IGNORE) .setCharset(Consts.UTF_8) .build(); // Configure the connection manager to use connection configuration either // by default or for a specific host. connManager.setDefaultConnectionConfig(connectionConfig);  // Configure total max or per route limits for persistent connections // that can be kept in the pool or leased by the connection manager. connManager.setMaxTotal(100); connManager.setDefaultMaxPerRoute(10);  // Create global request configuration RequestConfig defaultRequestConfig = RequestConfig.custom() .setCookieSpec(CookieSpecs.DEFAULT) .setExpectContinueEnabled(true) .build();  List<Header> headers = new ArrayList<>(); headers.add(new BasicHeader(""User-Agent"", userAgent)); headers.add(new BasicHeader(""Accept"", accept)); headers.add(new BasicHeader(""Accept-Language"", acceptLanguage)); headers.add(new BasicHeader(""Accept-Charset"", defaultCharset.name()));  // Create an HttpClient with the given custom dependencies and configuration. httpclient = HttpClients.custom() .setDefaultHeaders(headers) .setConnectionManager(connManager) .setDefaultRequestConfig(defaultRequestConfig) .setDefaultCookieStore(cookieStore) .build(); } "	0	0	0	0	0	1
public static final LdapSettings getDefault() { return defSettings; } 	0	0	0	0	0	1
"@Test void saveAsJson() throws Exception {  File sampleFile = new File(""./spec/samples/output_sample.json""); File exportedFile = fExport.saveAsJson(modules, ""./export.json"");  byte[] sample = Files.readAllBytes(sampleFile.toPath()); byte[] exported = Files.readAllBytes(exportedFile.toPath());  exportedFile.delete();  assertEquals(new String(sample).replaceAll(""\\r\\n?"", ""\n""), new String(exported).replaceAll(""\\r\\n?"", ""\n"")); } "	0	0	0	0	0	1
@Override public PlayerMovementStateBase nextState(InputProcessor input, PlayerBase player, CollisionList collisionList) { if (enterWhileRunning) { if (player.stateTime >= dashDuration || input.isCommandJustPressed(Command.JUMP) || !input.isCommandPressed(directionKeyBeingPressed) || hasChangedDirection(player) || player.vel.y < 0 || collisionList.isCollidingSide()) { return nextStateIfExit(input, player, collisionList); } } else if (enterWhileIdle) { if (player.stateTime >= dashDuration || input.isCommandJustPressed(Command.JUMP) || hasChangedDirection(player) || player.vel.y < 0 || !input.isCommandPressed(Command.DASH) || collisionList.isCollidingSide()) { return nextStateIfExit(input, player, collisionList); } } else if (enterWhileAirborne) { if (player.stateTime >= dashDuration || hasChangedDirection(player) || !input.isCommandPressed(Command.DASH) || collisionList.isCollidingSide()) { return nextStateIfExit(input, player, collisionList); } }  return this; } 	0	0	0	0	0	1
"private void restoreState(@NonNull Bundle state) { Bundle adapterState = state.getBundle(ADAPTER_STATE_KEY); if (adapterState == null) { throw new RuntimeException(""Unexpected state format""); } listAdapter.restoreState(adapterState);  // we know type, because we own hands saved that list //noinspection unchecked List<CalendarDescriptor> savedCalendarsList = (List<CalendarDescriptor>) state.getSerializable(CALENDARS_LIST_KEY);  if (savedCalendarsList == null) { savedCalendarsList = Collections.emptyList(); } availableCalendars = toSerializableList(savedCalendarsList); ArrayAdapter<CalendarDescriptor> adapter = new ArrayAdapter<>(getActivity(), android.R.layout.simple_spinner_item, availableCalendars); adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); calendarChooser.setAdapter(adapter); if (listAdapter.getCalendar() != null) { setCurrentCalendar(listAdapter.getCalendar()); } } "	0	0	0	0	0	1
"static Tristate evaluateCoeffs(int minValue, int maxValue, int rhs, CType comparator) { int status = 0; if (rhs >= minValue) status++; if (rhs > minValue) status++; if (rhs >= maxValue) status++; if (rhs > maxValue) status++;  switch (comparator) { case EQ: return (status == 0 || status == 4) ? Tristate.FALSE : Tristate.UNDEF; case LE: return status >= 3 ? Tristate.TRUE : (status < 1 ? Tristate.FALSE : Tristate.UNDEF); case LT: return status > 3 ? Tristate.TRUE : (status <= 1 ? Tristate.FALSE : Tristate.UNDEF); case GE: return status <= 1 ? Tristate.TRUE : (status > 3 ? Tristate.FALSE : Tristate.UNDEF); case GT: return status < 1 ? Tristate.TRUE : (status >= 3 ? Tristate.FALSE : Tristate.UNDEF); default: throw new IllegalStateException(""Unknown pseudo-Boolean comparator""); } } "	0	0	0	0	0	1
public void mate() { Entity targetEntity; EntityAINearestAttackableTarget.Sorter theNearestAttackableTargetSorter = new EntityAINearestAttackableTarget.Sorter(this); IEntitySelector targetEntitySelector = new IEntitySelector() { @Override public boolean isEntityApplicable(Entity entity) { return (entity instanceof EntityPrehistoric); } }; double d0 = 64; List<EntityPrehistoric> list = worldObj.selectEntitiesWithinAABB(EntityPrehistoric.class, this.boundingBox.expand(d0, 4.0D, d0), targetEntitySelector); Collections.sort(list, theNearestAttackableTargetSorter); List<EntityPrehistoric> listOfFemales = new ArrayList<EntityPrehistoric>(); if (!list.isEmpty()) { for (EntityPrehistoric mob : list) { if (mob.type == this.type && mob.isAdult() && mob.getGender() == 0 && mob.ticksTillMate == 0) { listOfFemales.add(mob); } } } if (!listOfFemales.isEmpty() && this.ticksTillMate == 0) { EntityPrehistoric prehistoric = listOfFemales.get(0); if (prehistoric.ticksTillMate == 0) { this.getNavigator().tryMoveToEntityLiving(prehistoric, 1); double distance = (double) (this.width * 8.0F * this.width * 8.0F + prehistoric.width); if (this.getDistanceSq(prehistoric.posX, prehistoric.boundingBox.minY, prehistoric.posZ) <= distance && prehistoric.onGround && this.onGround && this.isAdult() && prehistoric.isAdult()) { prehistoric.procreate(this); this.ticksTillMate = this.rand.nextInt(6000) + 6000; prehistoric.ticksTillMate = this.rand.nextInt(12000) + 24000; } } } } 	0	0	0	0	0	1
private void calculateRequiredRockets() { //find the relevant table row using the difficulty //scan the row until payload > rocket trust float mass = 0; int stageCost = 0; List<String> rockets = new ArrayList<>(2); double payloadMassCopy = payloadMass; int i = 0; float basicMass = 0; int basicCost = 0; List<String> basicRockets = new ArrayList<>(2); while(payloadMassCopy > rocketList[i].getThrustPerDifficulty(difficulty)) { if(i < 3) { i++; } else { basicMass += rocketList[i].getMass(); basicCost += rocketList[i].getCost(); basicRockets.add(rocketList[i].getName()); payloadMassCopy -= rocketList[i].getThrustPerDifficulty(difficulty); i=0; } }  //save the rocket as candidate and note it's mass mass = basicMass + rocketList[i].getMass(); stageCost = basicCost + rocketList[i].getCost(); rockets.addAll(basicRockets); rockets.add(rocketList[i].getName());  //scan lighter rockets float newMassCandidate = basicMass; int newCostCandidate = basicCost; List<String> newRocketsCandidate = new ArrayList<>(4); while(--i >= 0 && payloadMassCopy > 0 && rocketList[i].getThrustPerDifficulty(difficulty) > 0) { //payload/prior trust * mass) + (payload%prior.trust)/prior.prior.trust * mass) + etc... int times = (int)(payloadMassCopy/rocketList[i].getThrustPerDifficulty(difficulty)); if(payloadMassCopy < rocketList[i].getThrustPerDifficulty(difficulty)) { times = 1; } int stageMass = times * rocketList[i].getMass(); //check if there will be a very small leftover payload and lighter rockets can't lift it //in case, add one of the current rockets double provisionalPayloadMassCopy = payloadMassCopy; if(stageMass >= rocketList[i+1].getMass()) { provisionalPayloadMassCopy -= rocketList[i+1].getThrustPerDifficulty(difficulty); } else { provisionalPayloadMassCopy -= times * rocketList[i].getThrustPerDifficulty(difficulty); }  if(provisionalPayloadMassCopy > 0 && i > 0 && rocketList[i-1].getThrustPerDifficulty(difficulty) <= 0) { stageMass += rocketList[i].getMass(); times++; } //if the total mass of the smaller rockets is bigger than the next heavier rocket, //better use the heavier then... if(stageMass >= rocketList[i+1].getMass()) { newMassCandidate += rocketList[i+1].getMass(); newCostCandidate += rocketList[i+1].getCost(); newRocketsCandidate.add(rocketList[i+1].getName()); payloadMassCopy -= rocketList[i+1].getThrustPerDifficulty(difficulty); } //otherwise the smaller ones are the best choice else { newMassCandidate += times * rocketList[i].getMass(); newCostCandidate += times * rocketList[i].getCost(); for (int j = 0; j < times; j++) { newRocketsCandidate.add(rocketList[i].getName()); } payloadMassCopy -= times * rocketList[i].getThrustPerDifficulty(difficulty); } }  //if total mass < previous total mass then new minimum candidate. if(newMassCandidate != 0 && newMassCandidate < mass) { mass = newMassCandidate; rockets = newRocketsCandidate; rockets.addAll(basicRockets); stageCost = newCostCandidate; }  //set calculated values rocketsMass = (int)mass; rocketsList = rockets; totalCost = stageCost; } 	0	0	0	0	0	1
"public static void updateDatasetOwner(JsonNode root) throws Exception { final JsonNode owners = root.path(""owners""); if (owners.isMissingNode() || !owners.isArray()) { throw new IllegalArgumentException( ""Dataset owner info update fail, missing necessary fields: "" + root.toString()); }  final JsonNode ownerSourceNode = root.path(""source""); String ownerSource = null; if (!ownerSourceNode.isNull() && !ownerSourceNode.isMissingNode()) { ownerSource = ownerSourceNode.asText(); }  final Integer datasetId; final String urn; final Object[] idUrn = findDataset(root); if (idUrn[0] == null || idUrn[1] == null) { datasetId = 0; urn = root.path(""datasetProperties"").path(""uri"").asText(); } else { datasetId = (Integer) idUrn[0]; urn = (String) idUrn[1]; }  final JsonNode auditHeader = root.path(""auditHeader""); final Long eventTime = auditHeader != null ? auditHeader.path(""time"").asLong() / 1000 : null;  ObjectMapper om = new ObjectMapper();  List<DatasetOwnerRecord> ownerList = new ArrayList<>(); for (final JsonNode owner : owners) { DatasetOwnerRecord record = om.convertValue(owner, DatasetOwnerRecord.class); record.setDatasetId(datasetId); record.setDatasetUrn(urn); record.setSourceTime(eventTime); record.setCreatedTime(eventTime); record.setModifiedTime(System.currentTimeMillis() / 1000);  final String ownerString = record.getOwner(); int lastIndex = ownerString.lastIndexOf(':'); if (lastIndex >= 0) { record.setOwner(ownerString.substring(lastIndex + 1)); record.setNamespace(ownerString.substring(0, lastIndex)); } else { record.setNamespace(""""); } Map<String, Object> ownerInfo = getOwnerByOwnerId(record.getOwner()); Integer appId = 0; String isActive = ""N""; if (ownerInfo.containsKey(""app_id"")) { appId = StringUtil.toInt(ownerInfo.get(""app_id"")); isActive = appId == 301 ? ""Y"" : appId == 300 ? (String) ownerInfo.get(""is_active"") : ""N""; } record.setAppId(appId); record.setIsActive(isActive); String ownerTypeString = record.getOwnerType(); record.setIsGroup(ownerTypeString != null && ownerTypeString.equalsIgnoreCase(""group"") ? ""Y"" : ""N"");  if (datasetId == 0 || appId == 0) { String sql = PreparedStatementUtil.prepareInsertTemplateWithColumn(DATASET_OWNER_UNMATCHED_TABLE, record.getDbColumnForUnmatchedOwner()); OWNER_UNMATCHED_WRITER.execute(sql, record.getValuesForUnmatchedOwner()); } else { ownerList.add(record); } }  mergeDatasetOwners(ownerList, datasetId, urn, ownerSource); } "	0	0	0	0	0	1
@Override public int getScrollingOffset() { return scrollBar.getMaximum() - scrollBar.getVisibleAmount() - scrollBar.getValue(); } 	0	0	0	0	0	1
"public CommandResult execute(CommandSource src, CommandContext ctx) throws CommandException { if (src instanceof Player) { Player player = (Player) src; String playerTeamName = ConfigManager.getTeam(player.getUniqueId());  if (playerTeamName != null && !ConfigManager.getMembers(playerTeamName).contains(player.getUniqueId())) { Optional<Vector3i> optionalChunk = Polis.game.getServer().getChunkLayout().toChunk(player.getLocation().getBlockPosition());  if (optionalChunk.isPresent()) { Vector3i chunk = optionalChunk.get();  if (!ConfigManager.isClaimed(playerTeamName, player.getLocation().getExtent().getUniqueId(), chunk.getX(), chunk.getZ())) { if (ConfigManager.getClaims(playerTeamName) < ConfigManager.getClaimCap()) { if (ConfigManager.getBalance(playerTeamName).compareTo(ConfigManager.getClaimCost()) >= 0) { TransactionResult transactionResult = null; Account account = Polis.economyService.getOrCreateAccount(playerTeamName).get(); transactionResult = account.withdraw(Polis.economyService.getDefaultCurrency(), ConfigManager.getClaimCost(), Cause.of(NamedCause.source(player)));  if (transactionResult.getResult() == ResultType.SUCCESS) { ConfigManager.claim(playerTeamName, player.getLocation().getExtent().getUniqueId(), chunk.getX(), chunk.getZ()); ConfigManager.withdrawFromTownBank(ConfigManager.getClaimCost(), playerTeamName); player.sendMessage(Text.builder().append(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.GOLD, ""Successfully claimed this location for "" + ConfigManager.getClaimCost() + "" "")) .append(Polis.economyService.getDefaultCurrency().getPluralDisplayName()).build()); } else if (transactionResult.getResult() == ResultType.ACCOUNT_NO_FUNDS) { player.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""Not enough funds! Deposit funds or setup taxes!"")); } else { player.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""An error occured while trying to withdraw from your Polis' bank."")); } } else { player.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""Your Polis does not have enough funds to claim this land! Deposit funds soon!"")); } } else { player.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""You already have the maximum number of claims!"")); } } else { player.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""This location is already claimed!"")); } } } else if (playerTeamName != null) { player.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""Ask your leader or an executive to claim!"")); } else { player.sendMessage(Text.of(TextColors.GREEN, ""[Polis]: "", TextColors.DARK_RED, ""Error! "", TextColors.RED, ""You're not part of a town!"")); } } else { src.sendMessage(Text.of(TextColors.DARK_RED, ""Error! "", TextColors.RED, ""Must be an in-game player to use /polis claim!"")); }  return CommandResult.success(); } "	0	0	0	0	0	1
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);  setContentView(R.layout.home_fragment);  analytics = GoogleAnalytics.getInstance(this); analytics.setLocalDispatchPeriod(1800);  tracker = analytics.newTracker(""UA-63953479-1""); tracker.enableExceptionReporting(true); tracker.enableAdvertisingIdCollection(true); tracker.enableAutoActivityTracking(true);  key = ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5B4Oomgmm2D8XVSxh1DIFGtU3p1N2w6Xi2ZO7MoeZRAhvVjk3B8MfrOatlO9HfozRGhEkCkq0MfstB4Cjci3dsnYZieNmHOVYIFBWERqdwfdtnUIfI554xFsAC3Ah7PTP3MwKE7qTT1VLTTHxxsE7GH4sLtvLwrAzsVrLK+dgQk+e9bDJMvhhEPBgabRFaTvKaTtSzB/BBwrCa5mv0pte6WfrNbugFjiAJC43b7NNY2PV9UA8mukiBNZ9mPrK5fZeSEfcVqenyqbvZZG+P+O/cohAHbIEzPMuAS1EBf0VBsZtm3fjQ45PgCvEB7Ye3ucfR9BQ9ADjDwdqivExvXndQIDAQAB""; iap inAppPayments = new iap(); bp = inAppPayments.getBilling(this, key); bp.loadOwnedPurchasesFromGoogle();  // Handle Toolbar Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar);  AccountHeader headerResult = new AccountHeaderBuilder() .withActivity(this) .withHeaderBackground(R.drawable.cover) .build();  result = new DrawerBuilder() .withActivity(this) .withToolbar(toolbar) .withTranslucentStatusBar(true) .withActionBarDrawerToggle(true) .withAccountHeader(headerResult) .withSelectedItem(0) .addDrawerItems( new PrimaryDrawerItem().withName(""Connect to..."").withIcon(R.drawable.ic_ic_swap_horiz_24px), new PrimaryDrawerItem().withName(""Settings"").withIcon(R.drawable.ic_ic_settings_24px) ) .withOnDrawerItemClickListener(new Drawer.OnDrawerItemClickListener() { @Override public boolean onItemClick(AdapterView<?> parent, View view, int position, long id, IDrawerItem drawerItem) { if (drawerItem instanceof Nameable) { switch (((Nameable) drawerItem).getName()) { case ""Settings"": { Intent intent = new Intent(MainActivity.this, SettingsActivity.class); startActivity(intent); break; } case ""Contact us"": { try { Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(""mailto:"" + ""team@numixproject.org"")); startActivity(intent); } catch (Exception e) { Toast.makeText(MainActivity.this, ""A mail client is required."", Toast.LENGTH_SHORT).show(); } break; } case ""Remove ads"": { removeAds(); break; }  case ""Send feedback"": { Intent intent = new Intent(MainActivity.this, Gitty.class); startActivity(intent); break; }  case ""More Apps"": { String url = ""https://play.google.com/store/apps/dev?id=5600498874720965803""; Intent i = new Intent(Intent.ACTION_VIEW); i.setData(Uri.parse(url)); startActivity(i); break; } } } return false; } }).build(); if (!bp.isPurchased(""remove_ads"")) { result.addItem(new PrimaryDrawerItem().withName(""Remove ads"").withIcon(R.drawable.ic_ic_dnd_on_24px)); } result.addItem(new PrimaryDrawerItem().withName(""Send feedback"").withIcon(R.drawable.ic_edit_black_18dp)); result.addItem(new PrimaryDrawerItem().withName(""Contact us"").withIcon(R.drawable.ic_ic_mail_24px)); result.addItem(new PrimaryDrawerItem().withName(""More Apps"").withIcon(R.drawable.ic_ic_shop_24px));   adapter = new ServerListAdapter();  fab = (FloatingActionButton) findViewById(R.id.fab); fab.setOnClickListener(new View.OnClickListener() { public void onClick(View v) { // Perform action on click newAddServerActivity(v); } });  list = (ExpandableHeightListView) findViewById(R.id.list); list.setAdapter(adapter); list.setOnItemClickListener(this); list.setOnItemLongClickListener(this); list.setExpanded(true);  fab.attachToListView(list);  LinearLayout reportBugLayout = (LinearLayout) findViewById(R.id.reportLayout);  reportBugLayout.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { // Start Gitty Reporter Intent intent = new Intent(MainActivity.this, Gitty.class); startActivity(intent); } });  if (instanceCount > 0) { finish(); }  prefs = getSharedPreferences(""org.numixproject.hermes"", MODE_PRIVATE); if (prefs.getBoolean(""firstrun"", true)) { startIntro(); prefs.edit().putBoolean(""firstrun"", false).commit(); }  if (adapter.isServerNull()){ reportBugLayout.setVisibility(View.GONE); } } "	0	0	0	0	0	1
"private Connection getConnection() { java.sql.Connection connection = null; try { connection = DriverManager.getConnection( ""jdbc:postgresql://127.0.0.1:5432/test"", ""postgres"", ""password""); } catch (SQLException e) { System.out.println(""Connection Failed! Check output console""); e.printStackTrace(); return null; } return connection; } "	0	0	0	0	0	1
public String getMyParent() { return myParent; } 	0	0	0	0	0	1
"@AfterClass(groups = ""passthroughUPGRADE"") public void cleaUp() { TestUtil.cleanUp(httpTransportListener, httpServer); } "	0	0	0	0	0	1
"protected void failed(final Throwable t, final Description description) { System.err.println( ""ArchiveAndReplaySystemTest failed with random seed: "" + ArchiveReplayLoadTest.this.seed); } "	0	0	0	0	0	1
@After public void cleanUpMetrics() throws Exception { RuntimeStats.resetAll(); clear(); } 	0	0	0	0	0	1
"@RequestMapping(method = RequestMethod.GET, value = ""/inter/{urlId}"") public String readInterpretation(Model model, @ModelAttribute(""ldoDSession"") LdoDSession ldoDSession, @PathVariable String urlId) { logger.debug(""readInterpretation urlId:{}"", urlId); ExpertEditionInter expertEditionInter = (ExpertEditionInter) LdoD.getInstance() .getFragment(urlId.substring(0, urlId.indexOf(""_""))).getFragInterByUrlId(urlId);  Set<ExpertEditionInter> recommendations = ldoDSession.getRecommendation() .getNextRecommendations(expertEditionInter.getExternalId()); ExpertEditionInter prevRecom = ldoDSession.getRecommendation().getPrevRecommendation();  PlainHtmlWriter4OneInter writer = new PlainHtmlWriter4OneInter(expertEditionInter); writer.write(false);  model.addAttribute(""ldoD"", LdoD.getInstance()); model.addAttribute(""inter"", expertEditionInter); model.addAttribute(""recommendations"", recommendations); model.addAttribute(""prevRecom"", prevRecom); model.addAttribute(""writer"", writer);  return ""reading/readingMain""; } "	0	0	0	0	0	1
"@Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { mFragmentView = inflater.inflate(R.layout.fragment_profile_friend, container, false);  // Get the User's information and display on the page TextView nameField = (TextView) mFragmentView.findViewById(R.id.profile_friend_name); nameField.setText(user.getName());  // Update the profile picture on screen. RoundedImageView imageField = (RoundedImageView) mFragmentView.findViewById(R.id.profile_friend_picture_view);  follow = (Button) mFragmentView.findViewById(R.id.profile_friend_follow);  FollowStatusCallBack followStatusCallBack = new FollowStatusCallBack() { @Override public void onResponseReceived(Boolean follows) { followButton(follows); } };  this.getFollowStatus(followStatusCallBack);   /* Check if the user profile picture is set. */ if (!(user.getProfileID()).equals("""")) { Uri imageUri = Uri.parse(user.getProfileID()); imageField.setImageURI(imageUri); }  /* Initiate the events feed on the profile, by loading the data into the adapter view. */ // TODO: Replace stubs with actual Events   final RecyclerView mRecyclerView = (RecyclerView) mFragmentView.findViewById(R.id.profileFriendEventsRecycler); boolean b = mRecyclerView.hasFixedSize();  RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(this.getContext()); mRecyclerView.setLayoutManager(mLayoutManager);  final Context context = this.getContext();  final ProgressDialog spinner = ProgressDialog.show(getContext(), ""Loading"", ""Wait while loading..."");  // TOOO APIManager.getInstance().getEvents(new APICallback<List<Event>>() { @Override public void onSuccess(final List<Event> events) {  spinner.dismiss();  EventListAdapterItem mAdapter = new EventListAdapterItem(events, context);  mAdapter.setOnItemClickListener(new EventListAdapterItem.EventItemClickInterface() { @Override public void onItemClick(int position, View v) { mListener.onProfileFriendEventSelected(events.get(position)); } });  mRecyclerView.setAdapter(mAdapter);  }  @Override public void onFailure(String message) { spinner.dismiss(); } });  return mFragmentView; } "	0	0	0	0	0	1
"@SuppressWarnings(""unchecked"") @Override protected void configure() { super.configure(); bind(new TypeLiteral<ComputeServiceAdapter<Vm, Hardware, QueryResultVAppTemplateRecord, Vdc>>() { }).to(VCloudDirectorComputeServiceAdapter.class); bind(new TypeLiteral<Function<ResourceEntity.Status, NodeMetadata.Status>>() { }).to(NodemetadataStatusForStatus.class); bind(new TypeLiteral<Function<String, Image.Status>>() { }).to(ImageStateForStatus.class); bind(new TypeLiteral<Function<Vm, NodeMetadata>>() { }).to(VmToNodeMetadata.class); bind(new TypeLiteral<Function<QueryResultVAppTemplateRecord, org.jclouds.compute.domain.Image>>() { }).to(ImageForVAppTemplate.class); bind(new TypeLiteral<Function<URI, Envelope>>() { }).to(ValidateVAppTemplateAndReturnEnvelopeOrThrowIllegalArgumentException.class); bind(new TypeLiteral<Function<Hardware, Hardware>>() { }).to(Class.class.cast(IdentityFunction.class)); bind(new TypeLiteral<Function<Vm, Hardware>>() { }).to(Class.class.cast(HardwareForVm.class)); bind(new TypeLiteral<Function<Vdc, Location>>() { }).to(VdcToLocation.class); bind(TemplateOptions.class).to(VCloudDirectorTemplateOptions.class); bind(new TypeLiteral<Supplier<Set<Hardware>>>() {}).to(VirtualHardwareConfigSupplier.class); bind(new TypeLiteral<AdaptingComputeServiceStrategies<Vm, Hardware, QueryResultVAppTemplateRecord, Vdc>>() { }).to(VcloudDirectorListNodesStrategy.class); install(new LocationsFromComputeServiceAdapterModule<Vm, Hardware, QueryResultVAppTemplateRecord, Vdc>() { }); } "	0	0	0	0	0	1
"@Test(expected = FacilityNotFoundException.class) public void shouldNotUpdateFacilityIfFacilityIsNotFound() throws FacilityNotFoundException { String facilityId = ""123456""; when(mockAllFacilities.getFacility(facilityId)).thenReturn(null); facilityService.update(createFacilityVO(facilityId, null, null, null, null, null, null, null, null, null, null)); } "	0	0	0	0	0	1
private Locale getLocale(ActionEvent evt) { return new Locale(persistentPreferredLanguage.getValue()); } 	0	0	0	0	0	1
public void syncPlayerToClient(EntityPlayerMP entityPlayer) {  for (Entry<String, Class<? extends PropertiesBase>> entry : identifierClassAssociations.entrySet()) {  String identifier = entry.getKey(); Class clazz = entry.getValue(); IExtendedEntityProperties wrapper = entityPlayer.getExtendedProperties( identifier );  if (wrapper.getClass().isAssignableFrom( clazz )) { PowersNetwork.client().syncProperties( ((PropertiesBase)wrapper), entityPlayer); }  } } 	0	0	0	0	0	1
public void normalize() { this.normalize(0); } 	0	0	0	0	0	1
"public static String valueToNotationString(Object val, org.openprovenance.prov.model.QualifiedName xsdType) { if (val instanceof LangString) { LangString istring = (LangString) val; return ""\"""" + istring.getValue() + ((istring.getLang()==null) ? ""\"""" : ""\""@"" + istring.getLang()) + ((xsdType==null)? """" : "" %% "" + Namespace.qualifiedNameToStringWithNamespace(xsdType)); } else if (val instanceof QualifiedName) { QualifiedName qn = (QualifiedName) val; return ""'"" + Namespace.qualifiedNameToStringWithNamespace(qn) + ""'""; } else if (val instanceof String) { String s=(String)val; if (s.contains(""\n"")) { return ""\""\""\"""" + escape(s) + ""\""\""\"""" ; } else { //FIXME: It's here that we should detect an int and generate the compact form: e.g. 1 instand of 1 %% xsd:int // However dictionaries failed to be parsed then //if (xsdType.getLocalPart().equals(""int"")) { //FIXME:need to properly compare with xsd:int //    return s; //} else { return ""\"""" + escape(s) + ((xsdType==null)? """" : ""\"" %% "" + Namespace.qualifiedNameToStringWithNamespace(xsdType)); //} } } else { // We should never be here! return ""\"""" + val + ""\"" %% "" + Namespace.qualifiedNameToStringWithNamespace(xsdType); } } "	0	0	0	0	0	1
"@SubscribeEvent public void onPlayerInteract(PlayerInteractEvent ev) { Resident res = DatasourceProxy.getDatasource().getOrMakeResident(ev.entityPlayer); Block block = ev.world.getBlock(ev.x, ev.y, ev.z);  // Shop and plot sale click verify if (ev.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK || ev.action == PlayerInteractEvent.Action.LEFT_CLICK_BLOCK) {  if (block == Blocks.wall_sign || block == Blocks.standing_sign) { TileEntitySign te = (TileEntitySign) ev.world.getTileEntity(ev.x, ev.y, ev.z);  if(te.signText[1].equals(Constants.PLOT_SELL_IDENTIFIER)) { if (ev.action == PlayerInteractEvent.Action.LEFT_CLICK_BLOCK && ev.entityPlayer.isSneaking() && Utils.isOp(ev.entityPlayer)) { ev.world.setBlock(ev.x, ev.y, ev.z, Blocks.air); } else if(ev.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) { Town town = MyTownUtils.getTownAtPosition(ev.world.provider.dimensionId, ev.x >> 4, ev.z >> 4); if(town != null) { if(town.hasResident(res)) { Plot plot = town.getPlotAtCoords(ev.world.provider.dimensionId, ev.x, ev.y, ev.z); if(plot != null) { if(!plot.hasOwner(res)) { if (town.canResidentMakePlot(res)) { int price = Integer.parseInt(te.signText[2].substring(2, te.signText[2].length())); if (EconomyProxy.getEconomy().takeMoneyFromPlayer(ev.entityPlayer, price)) { for(Resident resInPlot : plot.getOwners()) { resInPlot.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.notification.plot.buy.oldOwner"", plot.getName())); } for(Resident resInPlot : plot.getResidents()) { DatasourceProxy.getDatasource().unlinkResidentFromPlot(resInPlot, plot); } DatasourceProxy.getDatasource().linkResidentToPlot(res, plot, true); res.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.notification.plot.buy.newOwner"", plot.getName())); ev.world.setBlock(ev.x, ev.y, ev.z, Blocks.air); } else { res.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.notification.plot.buy.failed"", price, EconomyProxy.getEconomy().getCurrency(price))); } } else { res.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.plot.limit"", town.getMaxPlots())); } } else { res.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.plot.sell.alreadyOwner"")); } } } else { res.sendMessage(LocalizationProxy.getLocalization().getLocalization(""mytown.cmd.err.notInTown"", town.getName())); } } } ev.setCanceled(true); } } } } "	0	0	0	0	0	1
"private static JSONArray attributes(JSONObject obj) { return obj.getJSONArray(""attributes""); } "	0	0	0	0	0	1
"@Override public void init(Window window, Controller controller) { mapType = LanguageHandler.get(""Hexagonal""); widthValue = calcMapVal(0.5d); heightValue = calcMapVal(0.5d);  buttonMapType = new TextButton(window, mapType, e->{  if(mapType.equals(LanguageHandler.get(""Hexagonal""))) mapType = LanguageHandler.get(""Oval""); else if(mapType.equals(LanguageHandler.get(""Oval""))) mapType = LanguageHandler.get(""Square""); else if(mapType.equals(LanguageHandler.get(""Square""))) mapType = LanguageHandler.get(""Custom""); else if(mapType.equals(LanguageHandler.get(""Custom""))) mapType = LanguageHandler.get(""Hexagonal"");  System.out.println(mapType); buttonMapType.setText(mapType); });  displayWidth = new TextLabel(new TextLabel.Text() { @Override public String getText() { return LanguageHandler.get(""Width"") + "": "" + widthValue + """"; } }, false);  displayHeight = new TextLabel(new TextLabel.Text() { @Override public String getText() { return LanguageHandler.get(""Height"") + "": "" + heightValue + """"; } }, false);  mapWidth = new HorizontalSlider(0.5f, e -> widthValue = calcMapVal(mapWidth.getValue())); mapHeight = new HorizontalSlider(0.5f, e -> heightValue = calcMapVal(mapHeight.getValue()));  accept = new TextButton(window, LanguageHandler.get(""Accept""), e->{ if(widthValue % 2 == 0) widthValue += 1; if(heightValue % 2 == 0) heightValue += 1;  MapPreset mp = null; if(mapType.equals(LanguageHandler.get(""Hexagonal""))) mp = new HexPreset((widthValue + heightValue)/2); else if(mapType.equals(LanguageHandler.get(""Oval""))) mp = new OvalPreset(widthValue, heightValue); else if(mapType.equals(LanguageHandler.get(""Square""))) mp = new SquarePreset(widthValue, heightValue); else if(mapType.equals(LanguageHandler.get(""Custom""))) mp = new CustomPreset(""map""); prev.setPreset(mp); window.updateView(prev); });  cancel = new TextButton(window, LanguageHandler.get(""Cancel""), e -> window.updateView(prev));  window.getPanel().add(cancel); window.getPanel().add(accept); window.getPanel().add(mapWidth); window.getPanel().add(mapHeight); window.getPanel().add(displayHeight); window.getPanel().add(displayWidth); window.getPanel().add(buttonMapType);  changeSize();  started = true; new Thread(new Runnable() { @Override public void run() { while (started) { draw(); } } }).start(); } "	0	0	0	0	0	1
private int enterCodeGeneration() { return initiator.hashCode(); } 	0	0	0	0	0	1
"public void didChangeWatchedFiles(DidChangeWatchedFilesParams params) { boolean needsFullCheck = false; for (FileEvent event : params.getChanges()) { Path path = getPathFromLsapiURI(event.getUri()); if (path == null) { continue; } File file = path.toFile(); if (file.getName().equals(""asconfig.json"")) { //compiler settings may have changed, which means we should //start fresh asconfigChanged = true; needsFullCheck = true; } else if (file.getName().endsWith("".as"") && currentWorkspace != null) { if (event.getType().equals(FileChangeType.Deleted)) { IFileSpecification fileSpec = fileSpecGetter.getFileSpecification(file.getAbsolutePath()); currentWorkspace.fileRemoved(fileSpec); needsFullCheck = true; } else if (event.getType().equals(FileChangeType.Created)) { IFileSpecification fileSpec = fileSpecGetter.getFileSpecification(file.getAbsolutePath()); currentWorkspace.fileAdded(fileSpec); } else if (event.getType().equals(FileChangeType.Changed)) { IFileSpecification fileSpec = fileSpecGetter.getFileSpecification(file.getAbsolutePath()); currentWorkspace.fileChanged(fileSpec); checkFilePathForProblems(path, false); } } } if (needsFullCheck) { if (currentOptions != null && currentOptions.type.equals(ProjectType.LIB)) { Set<Path> filePaths = this.sourceByPath.keySet(); if (filePaths.size() > 0) { //it doesn't matter which file we pick here because we're //doing a full build Path path = filePaths.iterator().next(); checkFilePathForProblems(path, false); } } else //app { Path path = getMainCompilationUnitPath(); if (path != null) { checkFilePathForProblems(path, false); } } } } "	0	0	0	0	0	1
"private void getTimeseriesAsCsv(String timeseriesId, IoParameters query, HttpServletResponse response) throws IoHandlerException, DatasetFactoryException, URISyntaxException, MalformedURLException, IOException { checkIfUnknownTimeseries(query, timeseriesId);  RequestSimpleParameterSet parameters = RequestSimpleParameterSet.createForSingleSeries(timeseriesId, query); checkAgainstTimespanRestriction(parameters.getTimespan()); parameters.setGeneralize(query.isGeneralize()); parameters.setExpanded(query.isExpanded());  response.setCharacterEncoding(""UTF-8""); if (Boolean.parseBoolean(query.getOther(MimeType.APPLICATION_ZIP.name()))) { response.setContentType(MimeType.APPLICATION_ZIP.toString()); } else { response.setContentType(MimeType.TEXT_CSV.toString()); } createIoFactory(parameters).createHandler(""text/csv"") .writeBinary(response.getOutputStream()); } "	0	0	0	0	0	1
public static double confidenceLo() { return mean() - (1.96 * stddev() / Math.sqrt(initialT)); } 	0	0	0	0	0	1
public static double mean() { return StdStats.mean(thresholds); } 	0	0	0	0	0	1
private Timer createNewTimer() {  Timer newTimer = new Timer();  newTimer.schedule(new TimerTask() {  @Override public void run() { Client oldOperator = removeOldOperator(clientController.getClients()); selectNextOperator(oldOperator); } }, OPERATOR_TIME, OPERATOR_TIME);  return newTimer; } 	0	0	0	0	0	1
"public Earning getEarningById(int id) { Cursor cursor = database.query(DataBaseHelper.EARNING_TABLE, allColumns, DataBaseHelper.DATE_COLUMN + """", new String[] { String.valueOf(id)}, null, null, null); if (cursor != null ) { cursor.moveToFirst(); } Earning earning = cursorToEarning(cursor); cursor.close(); return earning; } "	0	0	0	0	0	1
"public void handle() { String msg = null; String domain = null; String opcode = null; boolean canContinue = false; Properties props; final StringBuilder buf = new StringBuilder(128);  this.thread.setName(""SAMv1Handler "" + _id); if (_log.shouldLog(Log.DEBUG)) _log.debug(""SAM handling started"");  try { boolean gotFirstLine = false; while (true) { if (shouldStop()) { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Stop request found""); break; }  SocketChannel clientSocketChannel = getClientSocket() ; if (clientSocketChannel == null) { _log.info(""Connection closed by client""); break; } if (clientSocketChannel.socket() == null) { _log.info(""Connection closed by client""); break; } buf.setLength(0); // first time, set a timeout try { Socket sock = clientSocketChannel.socket(); ReadLine.readLine(sock, buf, gotFirstLine ? 0 : FIRST_READ_TIMEOUT); sock.setSoTimeout(0); } catch (SocketTimeoutException ste) { writeString(""SESSION STATUS RESULT=I2P_ERROR MESSAGE=\""command timeout, bye\""\n""); break; } msg = buf.toString();  if (_log.shouldLog(Log.DEBUG)) { _log.debug(""New message received: ["" + msg + ']'); } props = SAMUtils.parseParams(msg); domain = (String) props.remove(SAMUtils.COMMAND); if (domain == null) { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Ignoring newline""); continue; } opcode = (String) props.remove(SAMUtils.OPCODE); if (opcode == null) { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Error in message format""); break; } if (_log.shouldLog(Log.DEBUG)) { _log.debug(""Parsing (domain: \"""" + domain + ""\""; opcode: \"""" + opcode + ""\"")""); } gotFirstLine = true; if (domain.equals(""STREAM"")) { canContinue = execStreamMessage(opcode, props); } else if (domain.equals(""DATAGRAM"")) { canContinue = execDatagramMessage(opcode, props); } else if (domain.equals(""RAW"")) { canContinue = execRawMessage(opcode, props); } else if (domain.equals(""SESSION"")) { if (i2cpProps != null) props.putAll(i2cpProps); // make sure we've got the i2cp settings canContinue = execSessionMessage(opcode, props); } else if (domain.equals(""DEST"")) { canContinue = execDestMessage(opcode, props); } else if (domain.equals(""NAMING"")) { canContinue = execNamingMessage(opcode, props); } else { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Unrecognized message domain: \"""" + domain + ""\""""); break; }  if (!canContinue) { break; } } } catch (IOException e) { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Caught IOException for message ["" + msg + ""]"", e); } catch (SAMException e) { _log.error(""Unexpected exception for message ["" + msg + ""]"", e); } catch (RuntimeException e) { _log.error(""Unexpected exception for message ["" + msg + ""]"", e); } finally { if (_log.shouldLog(Log.DEBUG)) _log.debug(""Stopping handler""); try { closeClientSocket(); } catch (IOException e) { if (_log.shouldWarn()) _log.warn(""Error closing socket"", e); } if (rawSession != null) { rawSession.close(); } if (datagramSession != null) { datagramSession.close(); } if (streamSession != null) { streamSession.close(); } } } "	0	0	0	0	0	1
"@Override public BeanDefinition parse(Element element, ParserContext parserContext) { BeanDefinitionBuilder builder = parseComponent(element, parserContext); builder.addPropertyValue(""name"", ""http:"" + element.getLocalName());  DescriptionElementParser.doParse(element, builder); BeanDefinitionParserUtils.setPropertyReference(builder, element.getAttribute(""actor""), ""actor"");  String receiveTimeout = element.getAttribute(""timeout""); if (StringUtils.hasText(receiveTimeout)) { builder.addPropertyValue(""receiveTimeout"", Long.valueOf(receiveTimeout)); }  if (element.hasAttribute(""server"")) { builder.addPropertyReference(""endpoint"", element.getAttribute(""server"")); }  HttpMessage httpMessage = new HttpMessage(); Element requestElement = DomUtils.getChildElements(element).get(0); httpMessage.method(HttpMethod.valueOf(requestElement.getLocalName().toUpperCase())); if (requestElement.hasAttribute(""path"")) { httpMessage.path(requestElement.getAttribute(""path"")); }  if (requestElement.hasAttribute(""context-path"")) { httpMessage.contextPath(requestElement.getAttribute(""context-path"")); }  List<?> params = DomUtils.getChildElementsByTagName(requestElement, ""param""); for (Object item : params) { Element param = (Element) item; httpMessage.queryParam(param.getAttribute(""name""), param.getAttribute(""value"")); }  Element headers = DomUtils.getChildElementByTagName(requestElement, ""headers""); if (headers != null) { List<?> headerElements = DomUtils.getChildElementsByTagName(headers, ""header""); for (Object headerElement : headerElements) { Element header = (Element) headerElement; httpMessage.setHeader(header.getAttribute(""name""), header.getAttribute(""value"")); }  String contentType = headers.getAttribute(""content-type""); if (StringUtils.hasText(contentType)) { httpMessage.contentType(contentType); }  String accept = headers.getAttribute(""accept""); if (StringUtils.hasText(accept)) { httpMessage.accept(accept); }  String version = headers.getAttribute(""version""); if (StringUtils.hasText(version)) { httpMessage.version(version); }  List<?> cookieElements = DomUtils.getChildElementsByTagName(headers, ""cookie""); for (Object cookieElement : cookieElements) { Element cookie = (Element) cookieElement; httpMessage.cookie(new Cookie(cookie.getAttribute(""name""), cookie.getAttribute(""value""))); } }  parseMessageSelector(element, builder);  Element body = DomUtils.getChildElementByTagName(requestElement, ""body""); List<ValidationContext> validationContexts = parseValidationContexts(body, builder);  builder.addPropertyValue(""messageBuilder"", new HttpMessageContentBuilder(httpMessage, constructMessageBuilder(body))); builder.addPropertyValue(""validationContexts"", validationContexts); builder.addPropertyValue(""variableExtractors"", getVariableExtractors(element));  return builder.getBeanDefinition(); } "	0	0	0	0	0	1
"private static P4Job customGetJob(@NotNull final Server server, @NotNull final String jobId) throws ConnectionException, AccessException { List<Map<String, Object>> resultMaps = server.execMapCmdList(CmdSpec.JOB, new String[]{""-o"", jobId}, null); if (resultMaps != null) { for (final Map<String, Object> resultMap : resultMaps) { String errStr = server.getErrorStr(resultMap); if (errStr != null) { if (server.isAuthFail(errStr)) { throw new AccessException(errStr); } else { final String errorMessage = P4Bundle.message(""error.job.parse"", jobId, resultMap.get(""code0"")); LOG.error(errorMessage); LOG.warn(""Problem parsing job "" + jobId + "" with result maps: "" + resultMaps); // Still create the job, because it exists return new P4Job(jobId, errorMessage); } } if (!server.isInfoMessage(resultMap)) { return new P4Job(new Job(server, resultMap)); } } } return null; } "	0	0	0	0	0	1
public List<IAnt> getAnts() { return this.ants; } 	0	0	0	0	0	1
public ExpandableAdapter parentLongClickTargets(Integer... ids) { mParentLongClickTargets = ids; return this; } 	0	0	0	0	0	1
public void setExpandCollapseMode(int mode) { getMode(); if (mode == mExpandCollapseMode.mode) return; mExpandCollapseMode.mode = mode; } 	0	0	0	0	0	1
public int getHeight() { return sprite.getHeight(); } 	0	0	0	0	0	1
"private void initializeDataToView() {  if (mTransactionResponse != null) {  if (getActivity() != null) {  if ( mPaymentType == Constants.PAYMENT_METHOD_MANDIRI_BILL_PAYMENT ) { mTextViewBankName.setText(MANDIRI_BILL);  } else if ( mPaymentType  == Constants.PAYMENT_METHOD_PERMATA_VA_BANK_TRANSFER ) { mTextViewBankName.setText(VIRTUAL_ACCOUNT); } else if ( mPaymentType == Constants.PAYMENT_METHOD_INDOSAT_DOMPETKU ) { mTextViewBankName.setText(getActivity().getResources().getString(R.string .indosat_dompetku)); } else if (  mPaymentType == Constants.PAYMENT_METHOD_MANDIRI_CLICK_PAY){ mTextViewBankName.setText(getActivity().getResources().getString(R.string .mandiri_click_pay)); } }  mTextViewTransactionTime.setText(mTransactionResponse.getTransactionTime()); mTextViewOrderId.setText(mTransactionResponse.getOrderId()); String amount = mTransactionResponse.getGrossAmount(); String formattedAmount = amount.split(""."").length == 2 ? amount.split(""."")[0] : amount; mTextViewAmount.setText(formattedAmount);  //noinspection StatementWithEmptyBody if (mTransactionResponse.getTransactionStatus().contains(PENDING) || mTransactionResponse.getTransactionStatus().contains(""pending"")) {  } else if (mTransactionResponse.getStatusCode().equalsIgnoreCase(getString(R.string.success_code_200)) || mTransactionResponse.getStatusCode().equalsIgnoreCase(getString(R.string.success_code_201))) {  setUiForSuccess(); } else {  setUiForFailure();  if (getActivity() != null) {  // change name of button to 'RETRY' if (mPaymentType == Constants.PAYMENT_METHOD_INDOSAT_DOMPETKU) { ((IndosatDompetkuActivity) getActivity()).activateRetry(); } else if (mPaymentType == Constants.PAYMENT_METHOD_MANDIRI_CLICK_PAY){ ((MandiriClickPayActivity) getActivity()).activateRetry();  if ( mTransactionResponse != null && mTransactionResponse.getTransactionStatus().equalsIgnoreCase(""deny"")){ mTextViewTransactionStatus.setText(""Payment Denied.""); } } else { ((BankTransferActivity) getActivity()).activateRetry(); } } } } } "	0	0	0	0	0	1
"@Override public void update(final Collection<ParameterValue> params) { SwingUtilities.invokeLater(new Runnable() { Hashtable<String,TreeContainer> containers = new Hashtable<String,TreeContainer>(); DefaultMutableTreeNode getTreeNode(SequenceContainer sc) { if (sc.getBaseContainer() == null) { return structureRoot; } TreeContainer tc = containers.get(sc.getOpsName()); if (tc == null) { tc = new TreeContainer(sc); containers.put(sc.getOpsName(), tc); } getTreeNode(sc.getBaseContainer()).add(tc); return tc; } @Override public void run() { Object[] vec = new Object[parametersTable.getColumnCount()]; DataEncoding encoding; Calibrator calib; Object paramtype; String name;  parametersTable.clear(); structureRoot.removeAllChildren();  for (ParameterValue value:params) {  // add new leaf to the structure tree // parameters become leaves, and sequence containers become nodes recursively  name = value.getParameter().getOpsName(); getTreeNode(value.getParameterEntry().getSequenceContainer()).add(new TreeEntry(value));  // add new row for parameter table  vec[0] = name; vec[1] = StringConvertors.toString(value.getEngValue(), false); vec[2] = StringConvertors.toString(value.getRawValue(), false);  vec[3] = value.getWarningRange() == null ? """" : Double.toString(value.getWarningRange().getMinInclusive()); vec[4] = value.getWarningRange() == null ? """" : Double.toString(value.getWarningRange().getMaxInclusive());;   vec[5] = value.getCriticalRange() == null ? """" : Double.toString(value.getCriticalRange().getMinInclusive()); vec[6] = value.getCriticalRange() == null ? """" : Double.toString(value.getCriticalRange().getMaxInclusive()); vec[7] = String.valueOf(value.getAbsoluteBitOffset()); vec[8] = String.valueOf(value.getBitSize());  paramtype = value.getParameter().getParameterType(); if (paramtype instanceof EnumeratedParameterType) { vec[9] = paramtype; } else if (paramtype instanceof BaseDataType) { encoding = ((BaseDataType)paramtype).getEncoding(); calib = null; if (encoding instanceof IntegerDataEncoding) { calib = ((IntegerDataEncoding) encoding).getDefaultCalibrator(); } else if (encoding instanceof FloatDataEncoding) { calib = ((FloatDataEncoding) encoding).getDefaultCalibrator(); } vec[9] = calib == null ? ""IDENTICAL"" : calib.toString(); }  parametersTable.addRow(vec); }  structureRoot.setUserObject(currentPacket); structureModel.nodeStructureChanged(structureRoot); structureTree.setRootVisible(true);  // expand all nodes for (TreeContainer tc:containers.values()) { structureTree.expandPath(new TreePath(tc.getPath())); }  // build hexdump text currentPacket.hexdump(hexDoc); hexText.setCaretPosition(0);  // select first row parametersTable.setRowSelectionInterval(0, 0); } }); } "	0	0	0	0	0	1
"private void handleServiceException(String key, ServiceException e) throws IOException { if (""NoSuchKey"".equals(e.getErrorCode())) { throw new FileNotFoundException(""Key '"" + key + ""' does not exist in OSS""); } else { handleServiceException(e); } } "	0	0	0	0	0	1
"public void parse(CommandParserArgs args) { if (args != null) { while (!args.isEmpty()) { args.tabComplete(keywords); String next = args.remove(); switch (next) { case ""action"": parseActions(args); break; case ""block"": case ""blockid"": parseBlock(args); break; case ""before"": parseBefore(args); break; case ""after"": parseAfter(args); break; case ""range"": parseRange(args); break; case ""whitelist"": parseWhitelist(args,true); break; case ""blacklist"": parseWhitelist(args,false); break; default: throw new TranslatedCommandException(""Expected Keyword here!"");  }  } } if (Awhitelist == null) { Awhitelist = !actions.isEmpty(); } if (Bwhitelist == null) { Bwhitelist = !blocks.isEmpty(); }   } "	0	0	0	0	0	1
private void setMealButtonsText() { SharedPreferences sharedPreferences = getActivity().getSharedPreferences(getString(R.string.MainActivity_dining_common_shared_prefs), Context.MODE_PRIVATE); List<Meal> meals =  data.select(Meal.class).join(RepeatedEvent.class).on(Meal.ID.eq(RepeatedEvent.DINING_COMMON_ID)) .join(DiningCommon.class).on(DiningCommon.ID.eq(RepeatedEvent.DINING_COMMON_ID)) .where(DiningCommon.NAME.eq(sharedPreferences.getString(MainActivity.STATE_CURRENT_DINING_COMMON, getString(R.string.DLG))) .and(RepeatedEvent.DAY_OF_WEEK.eq(displayDate.getDayOfWeek()))).get().toList(); ArrayList<String> mealNames = new ArrayList<>(); for(Meal meal : meals) { mealNames.add(meal.getName()); if(meal.getName().equals(getString(R.string.MenuFragment_breakfast_string)) || meal.getName().equals(getString(R.string.MenuFragment_brunch_string))) breakfastButton.setText(meal.getName()); } if(!mealNames.contains(getString(R.string.MenuFragment_breakfast_string)) && !mealNames.contains(getString(R.string.MenuFragment_brunch_string))) { breakfastButton.setVisibility(View.INVISIBLE); } if(!mealNames.contains(getString(R.string.MenuFragment_lunch_string))) { lunchButton.setVisibility(View.INVISIBLE); } if(!mealNames.contains(getString(R.string.MenuFragment_dinner_string))) { dinnerButton.setVisibility(View.INVISIBLE); } if(!mealNames.contains(getString(R.string.MenuFragment_latenight_string))) { lateNightButton.setVisibility(View.INVISIBLE); } } 	0	0	0	0	0	1
public static void info(String module, String message) { logMessage(Level.INFO, module, message); } 	0	0	0	0	0	1
"@Override public void caseAIphrDataAssignment(AIphrDataAssignment node) { // data_assignment = {iphr} identifier_becomes data_assign_phrase final LeftHandSideResult lhs = LeftHandSideAnalyzer.analyze(node.getIdentifierBecomes());  // data_assign_phrase = // {read} read read_phrase // | {readas} read as identifier read_phrase // | {mlm} T.mlm term // | {mlmi} T.mlm term from institution string_literal // | {mlms} T.mlm T.mlm_self // | {imap} interface mapping_factor // | {emap} event mapping_factor // | {mmap} message mapping_factor // | {masmap} message as identifier mapping_factor? // | {dmap} destination mapping_factor // | {dasmap} destination as identifier mapping_factor? // | {object} object l_brk object_attribute_list r_brk // | {arg} argument // | {cphr} call_phrase // | {newobj} new_object_phrase // | {expr} expr; node.getDataAssignPhrase().apply(new VisitorBase() { @Override public void caseAReadDataAssignPhrase(AReadDataAssignPhrase node) { // {read} read read_phrase assignPhrase(lhs, node.getReadPhrase()); }  @Override public void caseAReadasDataAssignPhrase(final AReadasDataAssignPhrase node) { // {readas} read as identifier read_phrase final Variable v = context.codeGenerator.getVariableOrShowError(node.getIdentifier()); if (!(v instanceof ObjectTypeVariable)) throw new RuntimeCompilerException(lhs.getPosition(), ""EVENT variables must be simple identifiers""); lhs.assign(context, new Switchable() { @Override public void apply(Switch sw) { node.getReadPhrase().apply(new ReadPhraseCompiler(context)); try { context.writer.invokeInstance(DatabaseQuery.class.getMethod(""execute"")); } catch (NoSuchMethodException e) { throw new RuntimeException(e); } context.writer.loadStaticField(((ObjectTypeVariable) v).field); context.writer.invokeStatic(Compiler.getRuntimeHelper(""readAs"", ArdenValue[].class, ObjectType.class)); } }); }  @Override public void caseAMlmDataAssignPhrase(AMlmDataAssignPhrase node) { // {mlm} T.mlm term createMlmVariable(lhs, node.getTerm(), null); }  @Override public void caseAMlmiDataAssignPhrase(AMlmiDataAssignPhrase node) { // {mlmi} T.mlm term from institution string_literal createMlmVariable(lhs, node.getTerm(), node.getStringLiteral()); }  @Override public void caseAMlmsDataAssignPhrase(AMlmsDataAssignPhrase node) { // {mlms} T.mlm T.mlm_self createMlmVariable(lhs, null, null); }  @Override public void caseAImapDataAssignPhrase(AImapDataAssignPhrase node) { // {imap} interface mapping_factor CallableVariable var = CallableVariable.getCallableVariable(context.codeGenerator, lhs); context.writer.sequencePoint(lhs.getPosition().getLine()); context.writer.loadThis(); context.writer.loadVariable(context.executionContextVariable); context.writer.loadStringConstant(ParseHelpers.getStringForMapping(node.getMappingFactor())); context.writer.invokeInstance(ExecutionContextMethods.findInterface); context.writer.storeInstanceField(var.mlmField); }  @Override public void caseAEmapDataAssignPhrase(AEmapDataAssignPhrase node) { // {emap} event mapping_factor EventVariable e = EventVariable.getEventVariable(context.codeGenerator, lhs); context.writer.sequencePoint(lhs.getPosition().getLine()); context.writer.loadThis(); context.writer.loadVariable(context.executionContextVariable); context.writer.loadStringConstant(ParseHelpers.getStringForMapping(node.getMappingFactor())); context.writer.invokeInstance(ExecutionContextMethods.getEvent); context.writer.storeInstanceField(e.field); }  @Override public void caseAMmapDataAssignPhrase(AMmapDataAssignPhrase node) { // {mmap} message mapping_factor final String mappingString = ParseHelpers.getStringForMapping(node.getMappingFactor()); lhs.assign(context, new Switchable() { @Override public void apply(Switch sw) { context.writer.loadVariable(context.executionContextVariable); context.writer.loadStringConstant(mappingString); context.writer.invokeInstance(ExecutionContextMethods.getMessage); } }); }  @Override public void caseAMasmapDataAssignPhrase(AMasmapDataAssignPhrase node) { // {masmap} message as identifier mapping_factor? // TODO Auto-generated method stub super.caseAMasmapDataAssignPhrase(node); }  @Override public void caseADmapDataAssignPhrase(ADmapDataAssignPhrase node) { // {dmap} destination mapping_factor DestinationVariable v = DestinationVariable.getDestinationVariable(context.codeGenerator, lhs); context.writer.loadThis(); context.writer.loadStringConstant(ParseHelpers.getStringForMapping(node.getMappingFactor())); context.writer.storeInstanceField(v.field); }  @Override public void caseADasmapDataAssignPhrase(ADasmapDataAssignPhrase node) { // {dasmap} destination as identifier mapping_factor? // TODO Auto-generated method stub super.caseADasmapDataAssignPhrase(node); }  @Override public void caseAObjectDataAssignPhrase(AObjectDataAssignPhrase node) { // {object} object l_brk object_attribute_list r_brk ObjectTypeVariable.create(context.codeGenerator, lhs, node.getObjectAttributeList()); }  @Override public void caseAArgDataAssignPhrase(AArgDataAssignPhrase node) { // {arg} argument assignArgument(lhs); }  @Override public void caseACphrDataAssignPhrase(ACphrDataAssignPhrase node) { // {cphr} call_phrase assignPhrase(lhs, node.getCallPhrase()); }  @Override public void caseANewobjDataAssignPhrase(ANewobjDataAssignPhrase node) { // {newobj} new_object_phrase lhs.assign(context, node.getNewObjectPhrase()); }  @Override public void caseAExprDataAssignPhrase(AExprDataAssignPhrase node) { // {expr} expr lhs.assign(context, node.getExpr()); } }); } "	0	0	0	0	0	1
"@Test public void testDrawLineLabelsVerticalLeftRotated() throws Exception { final BufferedImage bufferedImage = new BufferedImage(80, 180, BufferedImage.TYPE_4BYTE_ABGR); final Graphics2D graphics2d = bufferedImage.createGraphics();  ScaleBarRenderSettings settings = getSettings(graphics2d, 1); settings.getParams().orientation = Orientation.VERTICAL_LABELS_LEFT.getLabel(); settings.getParams().labelRotation = 90; settings.getParams().getSize().width = 80; settings.getParams().getSize().height = 180; settings.setMaxSize(new Dimension(80, 180)); settings.setSize(ScalebarGraphic.getSize(settings.getParams(), settings, settings.getMaxLabelSize())); ScalebarDrawer drawer = Type.LINE.createDrawer(graphics2d, settings); drawer.draw();  new ImageSimilarity(getFile(""expected-scalebar-line-labels-left-rotated.png"")) .assertSimilarity(bufferedImage, 160); } "	0	0	0	0	0	1
"private String getDefaultNewlineCharacterTwice() { String newline = TextUtilities.determineLineDelimiter(String.valueOf(unit.getContents()), ""\n""); return newline + newline; } "	0	0	0	0	0	1
private void registerGeofences(final Location location) { final List<GeofencingRequest> requests = getGeofencingRequests(location); if (requests.isEmpty()) { onGeofencesRemoved(location); return; } try { for (final GeofencingRequest request : requests) { LocationServices.GeofencingApi .addGeofences( play.getClient(), request, GeofenceReceiver.getGeofencePendingIntent(context)) .setResultCallback(new ResultCallback<Status>() { @Override public void onResult(@NonNull Status status) { if (status.isSuccess()) { onGeofencesAdded(location, request.getGeofences(), request.getInitialTrigger()); } else { onGeofencesFailed(null, status.getStatusCode()); } } }); } } catch (SecurityException ex) { onGeofencesFailed(ex, 0); } } 	0	0	0	0	0	1
public static void initStore(IPreferenceStore sstore, IPreferenceStore dstore) {  String strkeys[] = { PreferenceConstants.PREF_MODEL_CHECKER, PreferenceConstants.PREF_SOLVER }; for (String key : strkeys) { initString(sstore, dstore, key); }  String boolkeys[] = { PreferenceConstants.PREF_BOUNDED_MODEL_CHECKING, PreferenceConstants.PREF_INVARIANT_GENERATION, PreferenceConstants.PREF_K_INDUCTION, PreferenceConstants.PREF_INDUCTIVE_COUNTEREXAMPLES, PreferenceConstants.PREF_SMOOTH_COUNTEREXAMPLES, PreferenceConstants.PREF_DEBUG, PreferenceConstants.PREF_SPEAR_PRINT_FINAL_LUSTRE, PreferenceConstants.PREF_SPEAR_RECURSIVE_GRAPH, PreferenceConstants.PREF_SPEAR_WARN_ON_UNUSED_VARS, PreferenceConstants.PREF_SPEAR_ENABLE_IVC_ON_ENTAILMENT }; for (String key : boolkeys) { initBool(sstore, dstore, key); }  String intkeys[] = { PreferenceConstants.PREF_PDR_MAX, PreferenceConstants.PREF_DEPTH, PreferenceConstants.PREF_SPEAR_CONSISTENCY_DEPTH }; for (String key : intkeys) { initInt(sstore, dstore, key); } } 	0	0	0	0	0	1
static String edit(int taskID, ProtoTask toEditTask) { toDoList.edit(taskID, toEditTask); String editedTaskDetails = toDoList.displayID(taskID); return String.format(RETURN_MESSAGE_FOR_EDIT, editedTaskDetails); } 	0	0	0	0	0	1
void add(Task task) { taskList.add(task); } 	0	0	0	0	0	1
"public static XmlElement getBaseColumnListElement(IntrospectedTable introspectedTable) { XmlElement answer = new XmlElement(""include""); //$NON-NLS-1$ answer.addAttribute(new Attribute(""refid"", //$NON-NLS-1$ introspectedTable.getBaseColumnListId())); return answer; } "	0	0	0	0	0	1
"@Override public boolean onQueryTextSubmit(String query) {   MenuItem menuItem = menuFinal.findItem(R.id.search); menuItem.collapseActionView();  List<Artist> artistsBySearch=new ArrayList<Artist>(); for(Artist artist:artists) { if (artist.getNickname().contains(query)) { artistsBySearch.add(artist); } } listItem.clear();  for (int i = 0; i < artistsBySearch.size(); i++) { HashMap<String, Object> map = new HashMap<String, Object>();  //  map.put(""imageView"", artistsBySearch.get(i).getImage());  map.put(""textViewName"", artistsBySearch.get(i).getNickname()); map.put(""textViewDesc"", artistsBySearch.get(i).getDesc()); map.put(""textViewArticleCount"", artistsBySearch.get(i).getArticle_count()); map.put(""textViewFollowerCount"", artistsBySearch.get(i).getFollower_count()); map.put(""imageViewFollowed"", artistsBySearch.get(i).getFollowed()); map.put(""id"", artistsBySearch.get(i).getId());  listItem.add(map); } adapter.notifyDataSetChanged();  //                LinearLayout layout = (LinearLayout) findViewById(R.id.layoutCover); //                layout.setVisibility(View.GONE); return true; } "	0	0	0	0	0	1
"@Override public boolean receiveEvent(Event event) { if (!isActivated()) { return handleInit(event); } if (event.isType(IKEA_MESSAGE) && event.getAttribute(""Direction"").equals(""Out"")) { sendCoapsMessage(event.getAttribute(IKEA_RESOURCE), event.getAttribute(IKEA_METHOD), event.getAttribute(IKEA_BODY), event.getAttribute(IKEA_ID)); return true; } else if (event.isType(""ReportItems"")) { reportNodes(); } else if (event.isType(MDNS_CREATION_MESSAGE) && event.getAttribute(MDNSScanner.MDNS_LOCATION).equals(address)) { setAddress(event.getAttribute(MDNSScanner.MDNS_LOCATION)); return true; } return false; } "	0	0	0	0	0	1
"@POST @Path(""/mepin/response"") @Consumes(""application/x-www-form-urlencoded"") public Response mepinConfirm(MultivaluedMap<String, String> multivaluedMap) throws SQLException {  String transactionId = multivaluedMap.getFirst(""transaction_id""); log.info(""MePIN transactionID : "" + transactionId);  //        MePinStatusRequest mePinStatus = new MePinStatusRequest(transactionId); //        FutureTask<String> futureTask = new FutureTask<String>(mePinStatus); //        ExecutorService executor = Executors.newFixedThreadPool(1); //        executor.execute(futureTask);  MobileConnectConfig.MePinConfig mePinConfig = configurationService.getDataHolder().getMobileConnectConfig().getMePinConfig(); String username = mePinConfig.getUsername(); String password = mePinConfig.getPassword(); String authEndPoint = mePinConfig.getAuthEndPoint();  String authHeader = username + "":"" + password; HttpPost httpPost = new HttpPost(authEndPoint);  try { String encoding = Base64.getEncoder().encodeToString(authHeader.getBytes(""utf-8""));  SSLContext sslContext = SSLContext.getInstance(""SSL"");  sslContext.init(null, new TrustManager[]{new X509TrustManager() { public X509Certificate[] getAcceptedIssuers() { System.out.println(""getAcceptedIssuers =============""); return null; }  public void checkClientTrusted(X509Certificate[] certs, String authType) { System.out.println(""checkClientTrusted =============""); }  public void checkServerTrusted(X509Certificate[] certs, String authType) { System.out.println(""checkServerTrusted =============""); } }}, new SecureRandom());  SSLSocketFactory sf = new SSLSocketFactory(sslContext); sf.setHostnameVerifier(new X509HostnameVerifier() { public boolean verify(String hostname, SSLSession session) { return true; }  public void verify(String host, String[] cns, String[] subjectAlts) throws SSLException { }  public void verify(String host, X509Certificate cert) throws SSLException { }  public void verify(String host, SSLSocket ssl) throws IOException { } });   Scheme httpsScheme = new Scheme(""https"", 443, sf); SchemeRegistry schemeRegistry = new SchemeRegistry(); schemeRegistry.register(httpsScheme);  ClientConnectionManager cm = new SingleClientConnManager(schemeRegistry); HttpClient httpClient = new DefaultHttpClient(cm);  httpPost.setHeader(""Authorization"", ""Basic "" + encoding); List<NameValuePair> params = new ArrayList<>();  MePinTransactionStatusRequest mePinTransactionStatusRequest = new MePinTransactionStatusRequest(); mePinTransactionStatusRequest.setAction(""transactions/get""); //            mePinTransactionStatusRequest.setAppId(""bcb54836a5a71b698844e8c1923f8a42""); mePinTransactionStatusRequest.setAppId(""5497e675-ecb8-45e2-83c7-a9b12d3f290e""); mePinTransactionStatusRequest.setTransactionId(transactionId);  String jsonData = new Gson().toJson(mePinTransactionStatusRequest);  params.add(new BasicNameValuePair(""mepin_data"", jsonData));  httpPost.setEntity(new UrlEncodedFormEntity(params));  log.info(""yyyy : "" + jsonData);  HttpResponse transactionStatusResponse = httpClient.execute(httpPost);  BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(transactionStatusResponse.getEntity().getContent()));  StringBuilder transactionStatusResult = new StringBuilder(); String line; while ((line = bufferedReader.readLine()) != null) { transactionStatusResult.append(line); }  log.info(""xxxxxxxxxx "" + transactionStatusResult.toString()); bufferedReader.close();  MePinTransactionStatusResponse mePinTransactionStatusResponse = new Gson().fromJson(transactionStatusResult.toString(), MePinTransactionStatusResponse.class);  String sessionId = DbUtil.getSessionId(transactionId);  if(""Completed"".equalsIgnoreCase(mePinTransactionStatusResponse.getStatus())){ DbUtil.updateRegistrationStatus(sessionId, ""APPROVED""); }else { DbUtil.updateRegistrationStatus(sessionId, ""EXPIRED""); }  } catch (KeyManagementException e) { log.error(""Error occurred"", e); } catch (UnsupportedEncodingException e) { log.error(""Error occurred"", e); } catch (ClientProtocolException e) { log.error(""Error occurred"", e); } catch (IOException e) { log.error(""Error occurred"", e); } catch (AuthenticatorException e) { log.error(""Error occurred"", e); } catch (NoSuchAlgorithmException e) { log.error(""Error occurred"", e); }   return Response.status(200).build(); } "	0	0	0	0	0	1
"public double getValuePrecisePosition(double value, boolean relative) { if (dirty) updateTick(); // coerce to range // value = value < min ? min : (value > max ? max : value); Range r = getLocalRange(); double min = r.getLower(); double max = r.getUpper(); double pixelsToStart = 0; if (logScaleEnabled) { if (value <= 0) value = min; // throw new IllegalArgumentException( // ""Invalid value: value must be greater than 0""); pixelsToStart = ((Math.log10(value) - Math.log10(min)) / (Math.log10(max) - Math.log10(min)) * ((double) length - 2d * margin)) + margin; } else pixelsToStart = ((value - min) / (max - min) * ((double) length - 2d * margin)) + margin;  if (relative) { if (orientation == Orientation.HORIZONTAL) return pixelsToStart; else return length - pixelsToStart; } else { if (orientation == Orientation.HORIZONTAL) return pixelsToStart + bounds.x; else return length - pixelsToStart + bounds.y; } } "	0	0	0	0	0	1
private void _generateADept(UniversityState univState, int index) { univState.getWriter().startSection(Ontology.CS_C_DEPT, univState.getId(Ontology.CS_C_DEPT, index)); univState.getWriter().addProperty(Ontology.CS_P_NAME, univState.getRelativeName(Ontology.CS_C_DEPT, index), false); univState.getWriter().addProperty(Ontology.CS_P_SUBORGANIZATIONOF, Ontology.CS_C_UNIV, univState.getId(Ontology.CS_C_UNIV, univState.getInstances()[Ontology.CS_C_UNIV].count - 1)); univState.getWriter().endSection(Ontology.CS_C_DEPT); } 	0	0	0	0	0	1
@Override public void onClick(View v) { EMChatManager.getInstance().logout(new EMCallBack() {  @Override public void onSuccess() { getActivity().finish(); startActivity(new Intent(getActivity(), LoginActivity.class)); }  @Override public void onProgress(int progress, String status) {  }  @Override public void onError(int code, String error) {  } }); } 	0	0	0	0	0	1
"protected void startSnappyLead() { File log = null; try { ProcessBuilder pb = new ProcessBuilder(snappyTest.getScriptLocation(""snappy-leads.sh""), ""-bg"", ""start""); log = new File("".""); String dest = log.getCanonicalPath() + File.separator + ""snappyLeaderSystem.log""; File logFile = new File(dest); snappyTest.executeProcess(pb, logFile); } catch (IOException e) { String s = ""problem occurred while retriving logFile path "" + log; throw new TestException(s, e); } } "	0	0	0	0	0	1
public PKIClient getClient() { return client; } 	0	0	0	0	0	1
public boolean withdraw(float amount) { if (getState() == State.OPEN && amount > 0.0f) { balance = balance - amount; numWithdraws++; if (numWithdraws > 3) balance = balance - 1.0f; // KG BVA: should be < 0 if (balance <= 0.0f) { setState(State.OVERDRAWN); } return true; } return false; } 	0	0	0	0	0	1
"private int countParenthesisBalance(String rest) { boolean inSingleQuote = false; boolean inDoubleQuote = false; final char[] chars = rest.toCharArray(); int balance = 0; for (char c : chars) { if (c == '""' && !inSingleQuote) { inDoubleQuote = !inDoubleQuote; } else if (c == '\'' && !inDoubleQuote) { inSingleQuote = !inSingleQuote; } else if (c == '(' && !inSingleQuote && !inDoubleQuote) { balance++; } else if (c == ')' && !inSingleQuote && !inDoubleQuote) { balance--; } } return balance; } "	0	0	0	0	0	1
@Override public void toggle() { if (closePosition < getMeasuredHeight()) { collapse(); } else { expand(); } } 	0	0	0	0	0	1
"public void configure() {  LOGGER.debug(""Starting Jetty server..."");  // define and add the jetty component restConfiguration().component(""jetty"") .host(""{{rest.jetty.host}}"") .port(""{{rest.jetty.port}}"") .bindingMode(RestBindingMode.auto);  LOGGER.debug(""Jetty server started succesfully."");  // DEFINE BEHAVIOR ON JSON SCHEMA PROBLEMS onException(UnrecognizedPropertyException.class).handled(true) .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(400)) .setHeader(Exchange.CONTENT_TYPE, constant(""text/plain"")) .setBody().constant(""Invalid json data"");  // DEFINE BEHAVIOR ON DATA MODEL PROBLEMS onException(DataModelException.class).handled(true) .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(400)) .setHeader(Exchange.CONTENT_TYPE, constant(""text/plain"")) .setBody().simple(""Invalid data values:\n${exception.message}"");  rest(""/services/rest"").put(""/simpleorder"").consumes(""application/json"") .type(SimpleOrder.class).produces(""text/html"") .to(""direct:order_put"");  from(""direct:order_put"") .bean(orderProcessBean) .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(201)) .to(""seda:confirmation-email.queue"") .end(); } "	0	0	0	0	0	1
"@Test(expected = ValidationException.class) public void noNameThrowsAValidationException() throws Exception { testObject.processInput(new String[] {}, new String[] {}, null, ""local"", ""wibble"", ""gradle""); } "	0	0	0	0	0	1
@Override public void init() { subscribeTo(PuppetGrammar.HASH); } 	0	0	0	0	0	1
public InetSocketAddress getSocketAddress(String key, int defaultPort, InetSocketAddress defaultValue) { if (!containsKey(key)) { return defaultValue; }  return SocketAddressUtil.parse(get(key), defaultPort); } 	0	0	0	0	0	1
public InetAddress getInetAddress(String key) throws UnknownHostException { return InetAddress.getByName(get(key)); } 	0	0	0	0	0	1
public Builder media(String media) { this.media = media; return this; } 	0	0	0	0	0	1
"public void switchEpisodesToSeasons() {  getFragmentManager().beginTransaction() .setCustomAnimations(R.animator.slide_in_left, R.animator.slide_out_right, 0, 0) .replace(R.id.fragmentContainerShow, new SeasonsFragment()) .commit();  visibleFragment = ""seasons""; } "	0	0	0	0	0	1
@Override public float vectorToAngle(Vector2 vector) { return (float)Math.atan2(-vector.x, vector.y); } 	0	0	0	0	0	1
public String replaceAll(String text, String pattern, String changeTo) { while (true) { String text2 = replace(text, pattern, changeTo, null, false); if (text2.equals(text)) break; text = text2; } return text; } 	0	0	0	0	0	1
"@Override public T call() throws Exception { Timer dest = new Timer(""destination.""+method.getName()); if (prepareIds && entityIdStore != null) entityIdStore.copyFromThread(parentThreadId); try { return (T) method.invoke(lightblueDAO, values); } finally { dest.complete(); } } "	0	0	0	0	0	1
@Override protected void applyEntityAttributes() { super.applyEntityAttributes(); this.getAttributeMap().registerAttribute(SharedMonsterAttributes.attackDamage); } 	0	0	0	0	0	1
public int getTotalPages() { if (total % pageSize != 0) return (total / pageSize) + 1; else return total / pageSize; } 	0	0	0	0	0	1
@Override public int getCount() { return photoUrlsCached.size(); } 	0	0	0	0	0	1
public View.OnTouchListener getDragToOpenListener() { if (mDragListener == null) { mDragListener = new ListPopupWindow.ForwardingListener(mAnchor) { @Override protected boolean onForwardingStarted() { show(); return true; }  @Override protected boolean onForwardingStopped() { dismiss(); return true; }  @Override public ListPopupWindow getPopup() { // This will be null until show() is called. return mPopup.getPopup(); } }; }  return mDragListener; } 	0	0	0	0	0	1
"@Test public void testGetBooksForLanguage() throws Exception {  FireLanguage fireLanguage = new FireLanguage(""English"", ""EN"", true, ""123"");  FireBookDetails fireBookDetails = new FireBookDetails(""Book Title"", ""url"", ""cover_url"", true, ""test description"", fireLanguage); ArrayList<FireBookDetails> bookDetails = new ArrayList<>(); bookDetails.add(fireBookDetails); doReturn(Observable.<List<FireBookDetails>>just(bookDetails)).when(bookDatabase).getBooks();  TestSubscriber<List<FireBookDetails>> testSubscriber = new TestSubscriber<>(); bookService.getBooksForLanguage(fireLanguage).subscribe(testSubscriber);  verify(bookDatabase).getBooks(); testSubscriber.awaitTerminalEvent(); testSubscriber.assertNoErrors();  final List<List<FireBookDetails>> result = testSubscriber.getOnNextEvents(); assertEquals(""Book Title"", result.get(0).get(0).getBookTitle()); } "	0	0	0	0	0	1
"public void editTask(View view){ RelativeLayout buttonParent = (RelativeLayout)view.getParent(); LinearLayout viewParent = (LinearLayout) buttonParent.getParent(); RelativeLayout nameParent = (RelativeLayout)viewParent.getChildAt(0); final TextView taskName = (TextView) nameParent.getChildAt(0); TextView taskScore = (TextView) viewParent.getChildAt(1); final Dialog editTask = new Dialog(MainMenuController.this); editTask.setTitle(getResources().getString(R.string.edit_task_title)); editTask.setContentView(R.layout.dialog_newtask); final EditText eTaskName = (EditText) editTask.findViewById(R.id.description_edittext); final EditText eTaskScore = (EditText) editTask.findViewById(R.id.points_edittext); eTaskName.setText(taskName.getText()); eTaskScore.setText(taskScore.getText().toString().substring(7)); Button submit = (Button) editTask.findViewById(R.id.submit_btn); Button cancel = (Button) editTask.findViewById(R.id.cancelBtn_newTask); cancel.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { editTask.dismiss(); } }); submit.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { final String oldTaskName = taskName.getText().toString(); final String newTaskName = eTaskName.getText().toString(); final String taskScore = eTaskScore.getText().toString(); if (newTaskName.isEmpty() || taskScore.isEmpty()) { Toast.makeText(getApplicationContext(), getResources().getString(R.string.all_fields_filled), Toast.LENGTH_SHORT).show(); }else{ HashMap<String, String> params = new HashMap<String, String>(); params.put(""oldTaskName"", oldTaskName); params.put(""newTaskName"", newTaskName); params.put(""taskScore"", taskScore); params.put(""flatPIN"",""123"");//TODO: GET FLAT PIN FROM USER MODEL ServerRequest sr = new ServerRequest(); JSONObject json = sr.getJSON(HttpType.EDITTASK, getIpAddress() + "":8080/editTask"", params);  if (json != null) { try { Toast.makeText(getApplication(), json.getString(""response""), Toast.LENGTH_LONG).show(); if (json.getBoolean(""res"")) { initTasksTab(); } } catch (JSONException e) { e.printStackTrace(); } } } } });  editTask.show(); } "	0	0	0	0	0	1
"@Test public void testPingPongMessage() throws InterruptedException, SSLException, URISyntaxException { primaryClient.handhshake(); byte[] bytes = {6, 7, 8, 9, 10, 11}; ByteBuffer bufferSent = ByteBuffer.wrap(bytes); primaryClient.sendPing(bufferSent); Thread.sleep(threadSleepTime); ByteBuffer bufferReceived = primaryClient.getBufferReceived(); assertEquals(""Didn't receive the correct pong."", bufferReceived, bufferSent); logger.info(""Receiving a pong message is completed.""); } "	0	0	0	0	0	1
"public void startMainSceneExecutor() { //logger.info(""Simulation's startSimExecutor() is on "" + Thread.currentThread().getName() + "" Thread""); // INFO: Simulation's startSimExecutor() is on JavaFX-Launcher Thread mainSceneExecutor = Executors.newSingleThreadExecutor(); } "	0	0	0	0	0	1
"@POST @Path(""me/password"") @RolesAllowed({""ROLE_ADMIN"", ""ROLE_USER""}) public Response changePassword(HttpServletRequest request, Request passwordRequest) {  checkPasswordFormat(passwordRequest.getNewPassword()); checkNotNull(passwordRequest.getOldPassword());  // Only allow changing your own password Long id = (Long) request.getAttribute(OAuth2Filter.NAME_USER_ID); userService.changePassword(id, passwordRequest.oldPassword, passwordRequest.getNewPassword());  return Response.noContent().build();  } "	0	0	0	0	0	1
private Map<String, JsonObject> getProviderFromFile(int resId) { InputStream inputStream = getResources().openRawResource(resId); BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream)); return gson.fromJson(reader, (new TypeToken<Map<String, JsonObject>>() { }).getType()); } 	0	0	0	0	0	1
private void onCreateSurface(int glSurfaceTextureId) { if ( mSurfaceTexture == null ) { //attach the texture to a surface. //It's a clue class for rendering an android view to gl level mSurfaceTexture = new SurfaceTexture(glSurfaceTextureId); mSurfaceTexture.detachFromGLContext(); mSurfaceTexture.setDefaultBufferSize(getWidth(), getHeight()); mSurface = new Surface(mSurfaceTexture); if (mOnSurfaceReadyListener != null) mOnSurfaceReadyListener.onSurfaceReady(mSurface); } } 	0	0	0	0	0	1
"private void initPorts() { List<Port> ports = Port.getAll(); List<String> portsNames = new ArrayList<>(); if (ports != null) { for (Port port : ports) portsNames.add(port.getPortName()); } portsNames.add(0, ""Port Name""); portSpinnerItems = new String[portsNames.size()]; portsNames.toArray(portSpinnerItems); } "	0	0	0	0	0	1
"@GET @Path(""/"") @Produces(MediaType.TEXT_HTML) public Response services() { String rendered = soyService.renderPlugin(pluginRegion, Optional.of(new ConfigPluginRegionInput("""", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """"))); return Response.ok(rendered).build(); } "	0	0	0	0	0	1
"public Result updateParticipant(String email) { UserSession session = getAuthenticatedSession(RESEARCHER); Study study = studyService.getStudy(session.getStudyIdentifier()); if (isBlank(email)) { throw new BadRequestException(EMAIL_REQUIRED); } StudyParticipant participant = parseJson(request(), StudyParticipant.class); // Just stop right here because something is wrong if (participant.getEmail() != null && !participant.getEmail().equals(email)) { throw new BadRequestException(""Email in JSON does not match URI of request""); } participantService.updateParticipant(study, email, participant);  return okResult(""Participant updated.""); } "	0	0	0	0	0	1
public Flash error(String value) { return add(ERRORS, value); } 	0	0	0	0	0	1
public void setVisibleContractDate(boolean visibleContractDate) { mIsVisibleContractDate = visibleContractDate; notifyPropertyChanged(BR.visibleContractDate); } 	0	0	0	0	0	1
public void setLedgersTimestamps(List<Long> ledgersTimestamps) { this.ledgersTimestamps = ledgersTimestamps; } 	0	0	0	0	0	1
"public static void main(String[] args) { addUser(""FLEM"", ""frem rogers"", ""passy"", null, null); } "	0	0	0	0	0	1
@Override public BlockWeight getWeight() {  return BlockWeight.LIGHT; } 	0	0	0	0	0	1
"private void testConnectivity() throws ConnectionException { try { getService().getClassifiers().execute(); } catch (UnauthorizedException | ForbiddenException | IllegalArgumentException e) { throw new ConnectionException(ConnectionExceptionCode.INCORRECT_CREDENTIALS, """", e.getMessage(), e); } } "	0	0	0	0	0	1
"@Test public void testPackOptimalParameters() { StatefulRNG rng = new StatefulRNG(new LightRNG(0xAAAA2D2)); DungeonGenerator dungeonGenerator = new DungeonGenerator(240, 240, rng); dungeonGenerator.addDoors(15, true); dungeonGenerator.addWater(25); dungeonGenerator.addTraps(2); char[][] map = dungeonGenerator.generate(TilesetType.DEFAULT_DUNGEON);  FOV fov = new FOV(); double[][] resMap = DungeonUtility.generateResistances(map), seen; short[] packed; boolean[][] unpacked; int ramPacked = 0, ramBoolean = 0, ramDouble = 0; Coord viewer; for (int t = 0; t < 100; t++) { viewer = dungeonGenerator.utility.randomFloor(map); seen = fov.calculateFOV(resMap, viewer.x, viewer.y, 8, Radius.DIAMOND); packed = CoordPacker.pack(seen);  unpacked = CoordPacker.unpack(packed, seen.length, seen[0].length); for (int i = 0; i < unpacked.length ; i++) { for (int j = 0; j < unpacked[i].length; j++) { assertTrue((seen[i][j] > 0.0) == unpacked[i][j]); } } ramPacked += arrayMemoryUsage(packed.length, 2); ramBoolean += arrayMemoryUsage2D(seen.length, seen[0].length, 1); ramDouble += arrayMemoryUsage2D(seen.length, seen[0].length, 8); } //assertEquals(""Packed shorts"", 18, packed.length); //assertEquals(""Unpacked doubles: "", 57600, seen.length * seen[0].length); System.out.println(""Average Memory used by packed short[] (Appropriate):"" + ramPacked / 100.0 + "" bytes""); System.out.println(""Average Memory used by boolean[][] (Appropriate):"" + ramBoolean / 100.0 + "" bytes""); System.out.println(""Average Memory used by original double[][] (Appropriate):"" + ramDouble / 100.0 + "" bytes""); System.out.println(""Average Compression, short[] vs. boolean[][] (Appropriate):"" + 100.0 * ramPacked / ramBoolean + ""%""); System.out.println(""Average Compression, short[] vs. double[][] (Appropriate):"" + 100.0 * ramPacked / ramDouble + ""%""); System.out.println(""FOV Map stored for every cell, booleans, 240x240: "" + arrayMemoryUsage2D(240, 240, arrayMemoryUsage2D(240, 240, 1))); } "	0	0	0	0	0	1
"public void createIssue(String summary, String description, long projectID, String remediationItem, String remediationId, String jiraGroup, String level, String userName) throws Exception {  IssueService issueService = ComponentAccessor.getIssueService(); //Validation that the project exists and are valid Project project = ComponentAccessor.getProjectManager().getProjectObj( projectID ); if( project == null ) { throw new Exception(""CI Plugin: this project does not exists ""+projectID); }  screenConfigService.assigValuesToVariables(); if( !screenConfigService.hasIssueTypeConfigurated(project) ) { throw new Exception(""CI Plugin: this project is not configured properly :""+projectID); }  User user =  getUserByName(userName); //Validation the user exist if( user == null ) { throw new Exception(""CI Plugin: the user does not exist or is inactive :""+userName); }  //Get values of customs and issue type configured for cloud insight IssueType ciIssueType = screenConfigService.getIssueTypeCI(); CustomField groupCustomField = screenConfigService.getGroupCustomField(); CustomField remediationItemCustomField = screenConfigService.getRemediationItemCustomField(); CustomField remediationIdCustomField =screenConfigService.getRemediationIdCustomField();  //setting values IssueInputParameters issueInputParameters = issueService.newIssueInputParameters();  issueInputParameters.setSummary( summary ); issueInputParameters.setDescription( description ); issueInputParameters.setProjectId( project.getId() ); issueInputParameters.setIssueTypeId( ciIssueType.getId() ); issueInputParameters.setPriorityId( getPriorityId( level ) ); issueInputParameters.addCustomFieldValue( remediationItemCustomField.getId(), remediationItem); issueInputParameters.addCustomFieldValue( remediationIdCustomField.getId(), remediationId); issueInputParameters.addCustomFieldValue( groupCustomField.getId(), jiraGroup); issueInputParameters.setAssigneeId( project.getLeadUserName() ); //Perform the validation IssueService.CreateValidationResult result = issueService.validateCreate( user, issueInputParameters);   if (result.getErrorCollection().hasAnyErrors()) {  Map<String, String> errors = result.getErrorCollection().getErrors(); String errorDetails="""";  for (String key: errors.keySet()) { errorDetails += ""CI Plugin: Error Field, ""+key + "" - "" + errors.get(key)+""\n""; }  throw new Exception(errorDetails);  } else { issueService.create( user, result); }  } "	0	0	0	0	0	1
"protected void decodeMessageBody() { if (!decodedBody) { decodedBody = true;  try { if (null == ctx.getOperation()) { MALMessageHeader header = ctx.getHeader(); MALArea area = MALContextFactory.lookupArea(header.getServiceArea(), header.getAreaVersion()); if (null != area) { MALService service = area.getServiceByNumber(header.getService()); if (null != service) { ctx.setOperation(service.getOperationByNumber(header.getOperation())); } } }  if (ctx.getHeader().getIsErrorMessage()) { bodyPartCount = 2; } else { bodyPartCount = ctx.getOperation().getOperationStage(ctx.getHeader().getInteractionStage()).getElementShortForms().length; } GENTransport.LOGGER.log(Level.FINE, ""GEN Message decoding body ... pc ({0})"", bodyPartCount); messageParts = new Object[bodyPartCount];  if (bodyPartCount == 1) { Object sf = ctx.getOperation().getOperationStage(ctx.getHeader().getInteractionStage()).getElementShortForms()[0]; messageParts[0] = decodeBodyPart(encBodyElements, ctx, sf); } else if (bodyPartCount > 1) { MALElementInputStream benc = encBodyElements; if (wrappedBodyParts) { GENTransport.LOGGER.fine(""GEN Message decoding body wrapper""); final Blob body = (Blob) encBodyElements.readElement(new Blob(), null); final ByteArrayInputStream bais = new ByteArrayInputStream(body.getValue()); benc = encFactory.createInputStream(bais); }  for (int i = 0; i < bodyPartCount; i++) { GENTransport.LOGGER.log(Level.FINE, ""GEN Message decoding body part : {0}"", i); Object sf = null; if (!ctx.getHeader().getIsErrorMessage()) { ctx.setBodyElementIndex(i); sf = ctx.getOperation().getOperationStage(ctx.getHeader().getInteractionStage()).getElementShortForms()[i]; } messageParts[i] = decodeBodyPart(benc, ctx, sf); } }  GENTransport.LOGGER.fine(""GEN Message decoded body""); } catch (MALException ex) { GENTransport.LOGGER.log(Level.WARNING, ""GEN Message body ERROR on decode : {0}"", ex); } } } "	0	0	0	0	0	1
"@Override public void addPages() { super.addPages(); if (page == null) { page= new NewUnitWizardPage(""New Ceylon Unit"", ""Create a new Ceylon compilation unit that will contain Ceylon source."", """", CEYLON_NEW_FILE); page.init(selection); } addPage(page); } "	0	0	0	0	0	1
"public List<FormListing> getTableFormsSynchronized( Form ... formsToGetTableFormsForParam) {  this.messageHandler.clear();  if(formsToGetTableFormsForParam == null) { return null; }  if(formsToGetTableFormsForParam.length == 0) { return this.messageHandler.getReturnValue(); }  //Send all the messages... List<String> echoMessagesExpected = new ArrayList(); for(Form formToSend : formsToGetTableFormsForParam) { if(formToSend == null) { throw new FluidClientException( ""Cannot provide 'null' for Form."", FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR); } else if(formToSend.getEcho() == null || formToSend.getEcho().isEmpty()) { throw new FluidClientException(""Echo needs to be set to bind to return."", FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR); } else if(echoMessagesExpected.contains(formToSend.getEcho())) { throw new FluidClientException(""Echo message '""+formToSend.getEcho() +""' already added."", FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR); }  echoMessagesExpected.add(formToSend.getEcho());  //Send the actual message... this.sendMessage(formToSend); }  long timeoutTime = (System.currentTimeMillis() + this.getTimeoutInMillis());  //Wait for all the results... while(true) { if(this.messageHandler.hasErrorOccurred()) { List<Error> listOfErrors = this.messageHandler.getErrors(); Error firstError = listOfErrors.get(0);  throw new FluidClientException( firstError.getErrorMessage(), firstError.getErrorCode()); } else if(this.messageHandler.isConnectionClosed() || this.messageHandler.doReturnValueEchoMessageContainAll(echoMessagesExpected)) { return this.messageHandler.getReturnValue(); } // else { try { Thread.sleep(50); } // catch (InterruptedException e) {  throw new FluidClientException( ""Thread interrupted. ""+e.getMessage(), e,FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR); } }  long now = System.currentTimeMillis(); //Timeout... if(now > timeoutTime) { throw new FluidClientException( ""SQLUtil-WebSocket-GetTableRecordForms: Timeout while waiting for all return data. There were '"" +this.messageHandler.getReturnValue().size() +""' items after a Timeout of ""+( TimeUnit.MILLISECONDS.toSeconds(timeoutTime))+"" seconds."" ,FluidClientException.ErrorCode.IO_ERROR); } } } "	0	0	0	0	0	1
"@Override public void showGameOverDialog() { new AlertDialog.Builder(this) .setIcon(R.drawable.ic_hangman_dead) .setTitle(""Game Over"") .setMessage(getResources().getString(R.string.txt_bugger, mCurrentVocabTerm.getPhrase())) .setOnDismissListener(new DialogInterface.OnDismissListener() { @Override public void onDismiss(DialogInterface dialog) { finish(); } }) .setPositiveButton(getResources().getString(R.string.btn_share_score_with_mate), new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { mPresenter.shareClockedGameAction(); } }) .show(); } "	0	0	0	0	0	1
private static boolean compareParameterTypes(Type[] ts, Type[] _ts) { for (int i = 0; i < ts.length; i++) { if (!ts[i].equals(_ts[i])) { if (!compareParameterTypes(ts[i], _ts[i])) { return false; } } } return true; } 	0	0	0	0	0	1
"@Test public void testDirectorArgs() { File dest = new File(""dest""); String actual = testData().directorApp(dest, ""profile"").completeState(); String expected = StringPrinter.buildStringFromLines( ""-application org.eclipse.equinox.p2.director"", ""-clean"", ""-consolelog"", ""-repository http://p2repo"", ""-metadataRepository http://metadatarepo"", ""-artifactRepository http://artifactrepo"", ""-installIU com.diffplug.iu,com.diffplug.otheriu/1.0.0"", ""-profile profile"", ""-destination file://"" + dest.getAbsolutePath()); Assert.assertEquals(expected, actual); } "	0	0	0	0	0	1
"protected static RequestPayload toObjectsRequestPayload( final String requestName, final String payloadName, final String payloadType, final boolean optional) { final String assignmentCode = ""if "" + payloadName + "" is not None:\n"" + pythonIndent(3) + ""if "" + payloadName + "" not isinstance("" + payloadName + "", "" + payloadType + ""):\n"" + pythonIndent(4) + ""raise TypeError('"" + requestName + "" should have request payload of type: "" + payloadType + ""')\n"" + pythonIndent(3) + ""self.body = xmldom.tostring("" + payloadName + "".to_xml())""; return new RequestPayload(payloadName, assignmentCode, optional); } "	0	0	0	0	0	1
"public void updatePlates(){ int cellLength = 20; plates.forEach(plate ->{ plate.forEach(cellPoint -> {  int x = (int)cellPoint.getX(); int y = (int)cellPoint.getY();  PlanetCell cell = geosphere.waitForCellAt(x, y); Point cellVelocity = cell.getVelocity(); Point cellPos = cell.getGridPosition(); Point cellActPos = cell.getActualPosition();  cellActPos.add(cellVelocity);  Point adj = new Point(cellLength, cellLength); cellPos.add(adj);  if (cellVelocity.getX() > 0){ if (cellPos.getX() <= cellActPos.getX()){ System.out.println(""Move Cell""+cell+"" in the X direction by +1 cell""); cellActPos.set(cellPos); } }else if (cellVelocity.getX() < 0){ if (cellPos.getX() >= cellActPos.getX()){ System.out.println(""Move Cell""+cell+"" in the X direction by -1 cell""); } }  if (cellVelocity.getY() > 0){ if (cellPos.getY() <= cellActPos.getY()){ System.out.println(""Move Cell""+cell+"" in the Y direction by +1 cell""); } }else if (cellVelocity.getY() < 0){ if (cellPos.getY() >= cellActPos.getY()){ System.out.println(""Move Cell""+cell+"" in the Y direction by -1 cell""); } } geosphere.release(cell); }); System.out.println(""Plate Updated""); }); } "	0	0	0	0	0	1
"@Override public List<Metrics> extractData(final ResultSet resultSet) throws SQLException {  final List<Metrics> metricsList = new ArrayList<>(); while (resultSet.next()) { metricsList.add(new MetricsBuilder() .withHeight(resultSet.getDouble(""height"")) .withWeight(resultSet.getDouble(""weight"")) .withNationality(resultSet.getString(""nationality"")) .withPlace_of_birth(resultSet.getString(""place_of_birth"")) .withEducation(resultSet.getString(""education"")) .withUserId(resultSet.getLong(""userId"")) .build()); }  return metricsList; } "	0	0	0	0	0	1
private int storeItemStackInInv(IInventory inv, ItemStack item) { for (int index = 0; index < inv.getSizeInventory(); ++index) { if (inv.getStackInSlot(index) != null && inv.getStackInSlot(index).getItem() == item.getItem() && inv.getStackInSlot(index).isStackable() && inv.getStackInSlot(index).getCount() < inv.getStackInSlot(index).getMaxStackSize() && inv.getStackInSlot(index).getCount() < inv.getInventoryStackLimit() && (!inv.getStackInSlot(index).getHasSubtypes() || inv.getStackInSlot(index).getItemDamage() == item.getItemDamage())) { return index; } }  return -1; } 	0	0	0	0	0	1
public Class getType() { return type; } 	0	0	0	0	0	1
"@Override public void onArticleAction(Uri uri) { // TODO Auto-generated method stub Log.d(""MainActivity"", ""onArticleAction - method called with: -->"" + uri + ""<--""); } "	0	0	0	0	0	1
public Object getTechnologyOperationField(Long technologyOperationId, String fieldName) { Entity technologyOperation = dataDefinitionService.get(TechnologiesConstants.PLUGIN_IDENTIFIER, TechnologiesConstants.MODEL_TECHNOLOGY_OPERATION_COMPONENT).get(technologyOperationId);  if ((technologyOperation == null) || (technologyOperation.getField(fieldName) == null)) { return null; } else { return technologyOperation.getField(fieldName); } } 	0	0	0	0	0	1
"@Test public void testAllTemplate() throws Exception { doTestTemplateExpansion(""name"", ""(1 to 10)"", """"); } "	0	0	0	0	0	1
"Metadata analyse(TypeElement type) throws CannotGenerateCodeException { verifyType(type); PackageElement pkg = elements.getPackageOf(type); ImmutableSet<ExecutableElement> methods = methodsOn(type, elements); ImpliedClass generatedBuilder = new ImpliedClass(pkg, generatedBuilderSimpleName(type), type, elements); Optional<TypeElement> builder = tryFindBuilder(generatedBuilder, type); return new Metadata.Builder(elements) .setType(type) .setBuilder(builder.or(generatedBuilder)) .setBuilderFactory(builder.isPresent() ? BuilderFactory.from(builder.get()) : Optional.of(NO_ARGS_CONSTRUCTOR)) .setGeneratedBuilder(generatedBuilder) .setValueType(generatedBuilder.createNestedClass(""Value"")) .setPartialType(generatedBuilder.createNestedClass(""Partial"")) .setPropertyEnum(generatedBuilder.createNestedClass(""Property"")) .addAllUnderriddenMethods(findUnderriddenMethods(methods)) .setBuilderSerializable(shouldBuilderBeSerializable(builder)) .setGwtCompatible(isGwtCompatible(type)) .setGwtSerializable(isGwtSerializable(type)) .addAllProperties(findProperties(type, methods, builder).values()) .build(); } "	0	0	0	0	0	1
"private void updateObservations(final ContentProviderClient provider, SyncResult syncResult) throws RemoteException, InterruptedException, ExecutionException, TimeoutException { checkCancellation(""before requesting observations""); OpenMrsChartServer chartServer = new OpenMrsChartServer(App.getConnectionDetails()); // Get the charts asynchronously using volley. RequestFuture<JsonObservationsResponse> listFuture = RequestFuture.newFuture();  TimingLogger timingLogger = new TimingLogger(LOG.tag, ""obs update""); checkCancellation(""before updating observations""); String lastSyncToken = getLastSyncToken(provider, Contracts.Table.OBSERVATIONS); String newSyncToken = updateObservations( lastSyncToken, provider, syncResult, chartServer, listFuture, timingLogger); timingLogger.addSplit(""finished observation update""); // This is only safe transactionally if we can rely on the entire sync being transactional. storeSyncToken(provider, Contracts.Table.OBSERVATIONS, newSyncToken);  checkCancellation(""before deleting temporary observations""); // Remove all temporary observations now we have the real ones provider.delete(Observations.CONTENT_URI, Observations.TEMP_CACHE + ""!=0"", new String[0]); timingLogger.addSplit(""delete temp observations""); timingLogger.dumpToLog(); } "	0	0	0	0	0	1
public boolean hasWaterSource(World world, BlockPos pos) { return world.getBlockState(pos.add(0, -2, 0)) == Blocks.WATER.getDefaultState(); } 	0	0	0	0	0	1
"private void loadDataAtLevel(Object level, boolean fromSelector) throws VisADException, RemoteException {  Trace.call1(""PlanView.loadData""); if (loadedAny && (level != null) && level.equals(currentLevel)) { return; } getDataSelection().putProperty(""levelChanged"", true); //If we have no data or if its a slice then reset the data selection //to the new level and refetch data if ((workingGrid == null) || !GridUtil.isVolume(workingGrid)) { try { showWaitCursor(); //Just to make sure the DI has it //                getDataSelection().setLevel(level); //                getDataInstance().setDataSelection(getDataSelection()); if (loadedAny) { //                    getDataInstance().reInitialize(); } workingGrid = (FieldImpl) getGrid(getGridDataInstance()); if (workingGrid == null) { return; } } finally { showNormalCursor(); } } loadedAny    = true; currentLevel = level; //Trace.call1 (""PlanView.slice""); currentSlice = null; int  samplingMode = getSamplingModeValue(getDefaultSamplingMode()); Real realLevel    = getLevelReal(level); // NB: someday, someone needs to clean this block up without // breaking anything. if (GridUtil.isVolume(workingGrid)) {  // need to slice if (((level != null) && (currentLevels != null)) && hasLevel(level)) { samplingMode = Data.NEAREST_NEIGHBOR; } // more than one level if ((level != null) && ((currentLevels != null) && (currentLevels.length > 1))) { if (realLevel == null) { return; } // regular volume slice if (displayIs3D && !getMultipleIsTopography()) { currentSlice = GridUtil.sliceAtLevel(workingGrid, realLevel, samplingMode); } else {  // slice for 2D display or topography currentSlice = GridUtil.make2DGridFromSlice( GridUtil.sliceAtLevel( workingGrid, realLevel, samplingMode)); } if (levelsFromData == null) { levelsFromData = getGridDataInstance().getLevels(); setLevels(levelsFromData); } } else { // only one level?  - can we get here? //                System.out.println(""PlanViewControl: only one level?""); //                Trace.msg(""got here""); currentSlice = workingGrid; } } else {  // 2D grid or requested slice currentSlice = workingGrid; if (GridUtil.is3D(currentSlice) && ( !displayIs3D || getMultipleIsTopography() || getParameterIsTopography())) { currentSlice = GridUtil.make2DGridFromSlice(currentSlice); } }  getGridDisplayable().loadData(getSliceForDisplay(currentSlice)); //Trace.call2 (""PlanView.gridDisplayable.loadData""); if ((level == null) || (realLevel == null) || !displayIs3D) { return; } if (levelBox != null) { levelBox.setSelectedItem(getLabeledReal(level)); }  Real altitude = null; // we do the try/catch around this for 2D data instead of just // setting the level to null. try { altitude = GridUtil.getAltitude(currentSlice, realLevel); } catch (Exception ve) { altitude = null; }  if ((altitude != null) && !altitude.isMissing()) { EarthLocationTuple elt = new EarthLocationTuple(0, 0, altitude.getValue()); if ( !fromSelector) { lastZValue = earthToBox(elt)[2]; zSelector.setZValue(lastZValue); } if (fromSelector) { level = GridUtil.getLevel(currentSlice, realLevel); } }  setLevelReadoutLabel(""Current level: "" + formatLevel(level)); String dlTemplate = getDisplayListTemplate(); if (dlTemplate.contains(MACRO_LEVEL)) { updateLegendAndList(); } else { updateLegendLabel(); } Trace.call2(""PlanView.loadData"");  } "	0	0	0	0	0	1
"public static void main(String[] args) throws Exception {  JobConf conf=new JobConf(WordCountSortMain.class); conf.set(""mapreduce.ifile.readahead"", ""false""); conf.set(""mapreduce.output.textoutputformat.separator"", "":""); String Args[] = new GenericOptionsParser(conf, args).getRemainingArgs();  Job job_wc = Job.getInstance(conf); String dictPath = conf.get(""dict.path""); if(dictPath!=null) { URI dictUri = new URI(dictPath); job_wc.addCacheArchive(dictUri); }  job_wc.setJobName(""WordCount""); job_wc.setInputFormatClass(PdfInputFormat.class); FileInputFormat.addInputPath(job_wc, new Path(Args[0])); FileOutputFormat.setOutputPath(job_wc, new Path(Args[1])); job_wc.setMapperClass(WordCountMapper.class); job_wc.setReducerClass(WordCountReducer.class); job_wc.setOutputKeyClass(Text.class); job_wc.setOutputValueClass(IntWritable.class);  Job job_sort = Job.getInstance(conf); job_sort.setJobName(""Word Freq Sort""); job_sort.setInputFormatClass(TextInputFormat.class); FileInputFormat.addInputPath(job_sort, new Path(Args[1])); FileOutputFormat.setOutputPath(job_sort, new Path(Args[2])); job_sort.setMapperClass(WordFreqSortMapper.class); job_sort.setReducerClass(WordFreqSortReducer.class);  job_sort.setPartitionerClass(GroupPartitioner.class); job_sort.setSortComparatorClass(KeyComparator.class); job_sort.setGroupingComparatorClass(GroupComparator.class);  job_sort.setMapOutputKeyClass(WordFreqWritable.class); job_sort.setMapOutputValueClass(NullWritable.class); job_sort.setOutputKeyClass(IntWritable.class); job_sort.setOutputValueClass(Text.class); job_sort.setNumReduceTasks(1);  ControlledJob cj_wc=new  ControlledJob(conf); cj_wc.setJob(job_wc);  ControlledJob cj_sort=new  ControlledJob(conf); cj_sort.setJob(job_sort);  cj_sort.addDependingJob(cj_wc);  JobControl jobCtrl=new JobControl(""Word Count & Sort""); jobCtrl.addJob(cj_wc); jobCtrl.addJob(cj_sort);  Thread jcThread = new Thread(jobCtrl); jcThread.start(); int status = 0; while(true) { if(jobCtrl.allFinished()){ System.out.println(jobCtrl.getSuccessfulJobList()); jobCtrl.stop(); status = 0; break; } if(jobCtrl.getFailedJobList().size() > 0){ System.out.println(jobCtrl.getFailedJobList()); jobCtrl.stop(); status = -1; break; } }  Counters counter = job_sort.getCounters(); System.out.println(""All Tokens: ""+counter.findCounter(""WordCountMain.WordStats"", ""TOKENS"").getValue()); System.out.println(""     Words: ""+counter.findCounter(""WordCountMain.WordStats"", ""WORDS"").getValue());  System.out.println(""All Tokens: ""+counter.findCounter(WordCountMain.WordStats.TOKENS).getValue()); System.out.println(""     Words: ""+counter.findCounter(WordCountMain.WordStats.WORDS).getValue());   System.exit(status); } "	0	0	0	0	0	1
"public void generateTrace(IProgressMonitor monitor) throws SoCTraceException { /* * Trace events */ traceDB = new TraceDBObject(dbName, DBMode.DB_CREATE);  // Init ID managers IdManager eIdManager = new IdManager(); IdManager etIdManager = new IdManager(); IdManager epIdManager = new IdManager(); IdManager eptIdManager = new IdManager(); IdManager tpIdManager = new IdManager(); IdManager tptIdManager = new IdManager(); IdManager producerIdManager = new IdManager();  Random rand = new Random();  monitor.subTask(""Generating event types""); int i = 0;  // Create event types for (i = 0; i < numberOfEventType; i++) { // Spread them uniformly between the possible categories int category = categories.get(i % categories.size()); EventType aType = createTypes(traceDB, category, etIdManager, eptIdManager); typesList.add(aType); }  monitor.subTask(""Generating event producer""); // Set root producer with the ID: -1 EventProducer root = createEventProd(-1, producerIdManager, traceDB);  // Create non-leave producers for (i = 0; i < numberOfProducers - numberOfLeaves; i++) { createEventProd(root.getId(), producerIdManager, traceDB); }  int potentialParentsSize = producers.size();  // Create leave producers for (i = 0; i < numberOfLeaves; i++) { // Randomize parent ID among producers (avoid to set root as // parent) int parentId = producers.get( rand.nextInt(potentialParentsSize - 1) + 1).getId();  leaves.add(createEventProd(parentId, producerIdManager, traceDB)); }  traceDB.commit();  monitor.subTask(""Generating events""); // Create events createEvent(eIdManager, epIdManager, monitor);  if (monitor.isCanceled()) { traceDB.dropDatabase(); return; }  IdManager fileIdManager = new IdManager(); for (i = 0; i < NUMBER_OF_FILES; i++) { File file = new File(fileIdManager.getNextId()); file.setPath(FILE_INFO_PREFIX + file.getId()); file.setDescription(FILE_INFO_PREFIX + file.getId()); traceDB.save(file); }  if (forceIndex) { monitor.subTask(""Indexing timestamp""); traceDB.createTimestampIndex(); monitor.subTask(""Indexing event id in EVENT_PARAM""); traceDB.createEventParamIndex(); } traceDB.close();  monitor.subTask(""Filling trace metadata""); /* * Trace metadata */ SystemDBObject sysDB = SystemDBObject.openNewIstance();  TraceType tt = buildTraceType(sysDB); // tt.setName(TYPE_NAME_PREFIX + tt.getId()); tptIdManager.setNextId(sysDB.getMaxId(FramesocTable.TRACE_PARAM_TYPE.toString(), ""ID"") + 1); for (i = 0; i < NUMBER_OF_TRACE_PARAMETERS; i++) { TraceParamType tpt = new TraceParamType(tptIdManager.getNextId()); tpt.setName(PARAMETER_NAME_PREFIX + tpt.getId()); tpt.setType(PARAMETER_TYPE); tpt.setTraceType(tt); sysDB.save(tpt); }  Trace t = new Trace(sysDB.getNewId(FramesocTable.TRACE.toString(), ""ID"")); t.setAlias(TRACE_NAME + ""_"" + t.getId()); t.setBoard(METADATA); t.setDbName(dbName); t.setDescription(METADATA); t.setNumberOfCpus(1); t.setNumberOfEvents((int) numberOfGeneratedEvents); t.setOperatingSystem(METADATA); t.setOutputDevice(METADATA); t.setProcessed(false); t.setMinTimestamp(MIN_TIMESTAMP); t.setMaxTimestamp(maxTimeStamp); t.setTimeUnit(TimeUnit.NANOSECONDS.getInt()); t.setTracedApplication(METADATA); t.setTracingDate(new Timestamp(new Date().getTime())); t.setType(tt); tpIdManager.setNextId(sysDB.getMaxId(FramesocTable.TRACE_PARAM.toString(), ""ID"") + 1); for (TraceParamType tpt : tt.getTraceParamTypes()) { TraceParam tp = new TraceParam(tpIdManager.getNextId()); tp.setTraceParamType(tpt); tp.setTrace(t); tp.setValue(PARAMETER_VALUE); sysDB.save(tp); } sysDB.save(t);  sysDB.close(); } "	0	0	0	0	0	1
protected WonMessage createWonMessage(FeedbackCommandEvent feedbackCommandEvent) throws WonMessageBuilderException { URI connectionURI = feedbackCommandEvent.getConnectionURI(); WonNodeInformationService wonNodeInformationService = getEventListenerContext().getWonNodeInformationService();  Dataset connectionRDF = getEventListenerContext().getLinkedDataSource().getDataForResource(connectionURI); URI localNeed = WonRdfUtils.NeedUtils.getLocalNeedURIFromConnection(connectionRDF, connectionURI); URI wonNode = WonRdfUtils.NeedUtils.getWonNodeURIFromConnection(connectionRDF, connectionURI); //TODO: make more generic by using the URIs specified in the command. return WonMessageBuilder .setMessagePropertiesForHintFeedback( wonNodeInformationService.generateEventURI( wonNode), connectionURI, localNeed, wonNode, feedbackCommandEvent.getValue().equals(WON.GOOD) ) .build(); } 	0	0	0	0	0	1
"private OutputStream getOutputStream(boolean append) throws IOException { // Retrieve a ConnectionHandler and lock it final SFTPConnectionHandler connHandler = (SFTPConnectionHandler)ConnectionPool.getConnectionHandler(CONN_HANDLER_FACTORY, fileURL, true); try { // Makes sure the connection is started, if not starts it connHandler.checkConnection();  SftpFile sftpFile; if(exists()) { sftpFile = connHandler.sftpSubsystem.openFile(absPath, append?SftpSubsystemClient.OPEN_WRITE|SftpSubsystemClient.OPEN_APPEND :SftpSubsystemClient.OPEN_WRITE|SftpSubsystemClient.OPEN_TRUNCATE);  // Update local attributes if(!append) fileAttributes.setSize(0); } else { // Set new file permissions to 644 octal (420 dec): ""rw-r--r--"" // Note: by default, permissions for files freshly created is 0 (not readable/writable/executable by anyone)! FileAttributes atts = new FileAttributes(); atts.setPermissions(new UnsignedInteger32(0644)); sftpFile = connHandler.sftpSubsystem.openFile(absPath, SftpSubsystemClient.OPEN_WRITE|SftpSubsystemClient.OPEN_CREATE, atts);  // Update local attributes fileAttributes.setExists(true); fileAttributes.setDate(System.currentTimeMillis()); fileAttributes.setSize(0); }  return new CounterOutputStream( // Custom SftpFileOutputStream constructor, not part of the official J2SSH API new SftpFileOutputStream(sftpFile, append?getSize():0) { @Override public void close() throws IOException { // SftpFileOutputStream.close() closes the open SftpFile file handle super.close();  // Release the lock on the ConnectionHandler connHandler.releaseLock(); } } , new ByteCounter() { @Override public synchronized void add(long nbBytes) { fileAttributes.addToSize(nbBytes); fileAttributes.setDate(System.currentTimeMillis()); } } ); } catch(IOException e) { // Release the lock on the ConnectionHandler if the OutputStream could not be created connHandler.releaseLock();  // Re-throw IOException throw e; } } "	0	0	0	0	0	1
public static Tristate getClaimFlagPermission(GPClaim claim, String permission, String targetModPermission, Set<Context> contexts) { if (contexts == null) { contexts = new HashSet<>(GriefPreventionPlugin.GLOBAL_SUBJECT.getActiveContexts()); if (claim.parent != null && claim.getData().doesInheritParent()) { // check subdivision's parent contexts.add(claim.parent.getContext()); } else { contexts.add(claim.getContext()); } }  Tristate value = GriefPreventionPlugin.GLOBAL_SUBJECT.getPermissionValue(contexts, permission); if (value != Tristate.UNDEFINED) { return value; } if (targetModPermission != null) { value = GriefPreventionPlugin.GLOBAL_SUBJECT.getPermissionValue(contexts, targetModPermission); if (value != Tristate.UNDEFINED) { return value; } }  return getFlagDefaultPermission(claim, permission); } 	1	1	0	0	1	0
"@Override public void onReceive(Context context, Intent intent) {  // First, check that this permission response is actually for us. String action = intent.getAction(); if (ACTION_USB_PERMISSION.equals(action)) { synchronized (this) { // Get the accessory to which we are responding. UsbAccessory accessory = intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY);  // Permission was granted, if the device exists: open it. if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) { if (accessory != null) { Controller.getInstance().setConnection(context, accessory); Log.d(TAG, ""Set new accessory to: "" + accessory.getDescription()); } else { // This is weird, we got permission, but to which device? Log.w(TAG, ""No device returned.""); } } // Permission was not granted, don't open anything. else { Log.d(TAG, ""Accessory permission denied.""); }  // End this activity. finish(); } } } "	1	1	0	0	1	0
"private void handleUpload(HttpServletRequest req, HttpServletResponse resp, Map<String, Object> multipart, Session session) throws ServletException, IOException { HashMap<String, String> ret = new HashMap<String, String>(); String projectName = (String) multipart.get(""project""); ajaxHandleUpload(req, ret, multipart, session);  if (ret.containsKey(""error"")) { setErrorMessageInCookie(resp, ret.get(""error"")); }  if (ret.containsKey(""warn"")) { setWarnMessageInCookie(resp, ret.get(""warn"")); }  resp.sendRedirect(req.getRequestURI() + ""?project="" + projectName); } "	1	1	0	0	1	0
"synchronized void createConnection(final String catalogName, final String connectorType, final Map<String, String> properties) { Preconditions.checkState(!stopped.get(), ""ConnectorManager is stopped""); Preconditions.checkNotNull(catalogName, ""catalogName is null""); Preconditions.checkNotNull(connectorType, ""connectorName is null""); Preconditions.checkNotNull(properties, ""properties is null"");  final ConnectorPlugin connectorPlugin = plugins.get(connectorType); if (connectorPlugin != null) { Preconditions .checkState(!connectorFactories.containsKey(catalogName), ""A connector %s already exists"", catalogName); final ConnectorFactory connectorFactory = connectorPlugin.create(catalogName, properties); connectorFactories.put(catalogName, connectorFactory);  final MetacatCatalogConfig config = MetacatCatalogConfig.createFromMapAndRemoveProperties(connectorFactory.getName(), properties); catalogs.put(catalogName, config); } else { log.warn(""No plugin for connector with type %s"", connectorType); } } "	0	1	1	0	1	0
"private void drawPoints(Canvas canvas, Line line, int lineIndex, int mode) {   //TODO: khurrum if the point is for today set current color pointPaint.setColor(line.getPointColor()); int valueIndex = 0;   currentDaypointPaint.setColor(Color.argb(255,37,107,167)); for(int localIndex=0; localIndex<line.getValues().size();localIndex++){ PointValue pointValue = line.getValues().get(localIndex);  int pointRadius = ChartUtils.dp2px(density, line.getPointRadius()); final float rawX = computator.computeRawX(pointValue.getX()); final float rawY = computator.computeRawY(pointValue.getY());   //todo: khurrum min max to draw only for min and max if (computator.isWithinContentRect(rawX, rawY, checkPrecision)) { // Draw points only if they are within contentRectMinusAllMargins, using contentRectMinusAllMargins // instead of viewport to avoid some // float rounding problems. if (MODE_DRAW == mode) { if (localIndex==currentDayIdex) { drawPoint(canvas, line, pointValue, rawX, rawY, pointRadius + 8, pointPaint); drawPoint(canvas, line, pointValue, rawX, rawY, pointRadius, currentDaypointPaint); }else drawPoint(canvas, line, pointValue, rawX, rawY, pointRadius + 8,pointPaint); if (line.hasLabels() && checkMinMax(line, lineIndex)) { drawLabel(canvas, line, pointValue, rawX, rawY, pointRadius + labelOffset); } } else if (MODE_HIGHLIGHT == mode) { highlightPoint(canvas, line, pointValue, rawX, rawY, lineIndex, valueIndex); } else { throw new IllegalStateException(""Cannot process points in mode: "" + mode); } }  ++valueIndex; } } "	1	1	0	0	1	0
"@SuppressWarnings(""unchecked"") public static List<Map<String, Object>> getSecondaryFiles(CWLJob job, HashAlgorithm hashAlgorithm, Map<String, Object> fileValue, String filePath, Object secondaryFilesObj, File workingDir) throws CWLExpressionException, IOException { if (secondaryFilesObj == null) { return null; }  List<Object> secondaryFilesList = new ArrayList<>(); if (secondaryFilesObj instanceof List<?>) { secondaryFilesList.addAll((Collection<? extends Object>) secondaryFilesObj); }  List<Map<String, Object>> secondaryFileMaps = new ArrayList<>(); for (Object suffixObj : secondaryFilesList) { Object expr = CWLExpressionResolver.resolve(suffixObj, job, fileValue); Map<String, Object> secondaryFileMap = new HashMap<>(); if(expr instanceof String) { String secondaryFilePath; String suffix = (String) expr; if((suffix).startsWith(""^"") || suffix.startsWith(""."")) { secondaryFilePath = filePath.toString(); while (suffix.startsWith(""^"")) { int extensionIndex = secondaryFilePath.lastIndexOf("".""); if (extensionIndex != -1) { secondaryFilePath = secondaryFilePath.substring(0, extensionIndex); suffix = suffix.substring(1); } else { break; } } secondaryFilePath += ((String) suffix).startsWith(""."") ? suffix : ""."" + suffix; } else { secondaryFilePath = suffix; } File secondaryFile = new File(secondaryFilePath); if (secondaryFile.exists()) { if (secondaryFile.isDirectory()) { CWLFileValueHelper.setDirType(secondaryFileMap); } else { CWLFileValueHelper.setFileType(secondaryFileMap); } CWLFileValueHelper.setPath(secondaryFile.getAbsolutePath(), secondaryFileMap); CWLFileValueHelper.setSize(secondaryFile.length(), secondaryFileMap); CWLFileValueHelper.setName(secondaryFile.getName(), secondaryFileMap); if (hashAlgorithm != null) { CWLFileValueHelper.setChecksum(secondaryFile, secondaryFileMap, hashAlgorithm); } } } else if (expr instanceof Map) { secondaryFileMap = (Map<String, Object>) expr; postprocessCreatedResults(secondaryFileMap, hashAlgorithm, workingDir); } if(!secondaryFileMap.isEmpty()) { secondaryFileMaps.add(secondaryFileMap); } } return secondaryFileMaps.isEmpty() ? null : secondaryFileMaps; } "	0	1	0	0	1	0
"@Override public void render() { InputData input = inputRetriever.getCurrentData(); Environment activeEnv = environmentManager.getActiveEnvironment(); float delta = Gdx.graphics.getDeltaTime();  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);  if(activeEnv != null) { activeEnv.render(); }  Font bitop = fontManager.getFont(""8bitop""); bitop.write(Gdx.graphics.getFramesPerSecond() + """", null, null, 10, 415, 2); renderer.flush();  if(activeEnv != null) { activeEnv.process(delta, input); }  if(input.getPressData(Keys.F3).justPressed(0)) { this.console.show(); }  inputRetriever.update(); } "	0	1	0	0	1	0
@SubscribeEvent public void onConnected(FMLNetworkEvent.ClientConnectedToServerEvent event){ if (!event.isLocal) { InetSocketAddress address = (InetSocketAddress) event.manager.getSocketAddress(); Mw.instance.setServerDetails(address.getHostName(), address.getPort()); } } 	0	1	1	0	1	0
"public void visit(QuantifiedExpression quantifiedExpression) { if (this.specificationChecker == null) { throw new IllegalArgumentException(""No SpecificationChecker supplied""); } Validity validity = this.specificationChecker.checkFormula(quantifiedExpression, this.getAllSymbols()); if (validity.equals(Validity.UNKNOWN)) { expressionFailed(quantifiedExpression, new UnknownValidityInterpreterError()); return; } else { this.resultStack.push(new BooleanValue(validity.equals(Validity.VALID))); this.expressionEvaluated(quantifiedExpression); } } "	0	1	0	0	1	0
"private void transformMetadata(int entityID, ByteBuf input, ByteBuf output) throws CancelException { EntityType type = clientEntityTypes.get(entityID); if (type == null) { System.out.println(""Unable to get entity for ID: "" + entityID); output.writeByte(255); return; } List<MetadataRewriter.Entry> list = MetadataRewriter.readMetadata1_8(type, input); for (MetadataRewriter.Entry entry : list) { handleMetadata(entityID, entry, type); } // Fix: wither (crash fix) if(type == EntityType.WITHER) { list.add(new Entry(MetaIndex.WITHER_PROPERTIES, (byte) 0, 10)); } // Fix: Dragon (crash fix) if(type == EntityType.ENDER_DRAGON) { list.add(new Entry(MetaIndex.ENDERDRAGON_PHASE, 0, 11)); } MetadataRewriter.writeMetadata1_9(type, list, output); } "	0	1	0	0	1	0
protected IndentLevel getChildrenExpectedIndent() { IndentLevel indentLevel = new IndentLevel(getIndent(), getBasicOffset()); // if we have multileveled expected level then we should // try to suggest single level to children using curlies' // levels. if (getIndent().isMultiLevel() && hasCurlies()) { if (isOnStartOfLine(getLeftCurly())) { indentLevel = new IndentLevel(expandedTabsColumnNo(getLeftCurly()) + getBasicOffset()); } else if (isOnStartOfLine(getRightCurly())) { final IndentLevel level = new IndentLevel(curlyIndent(), getBasicOffset()); level.addAcceptedIndent(level.getFirstIndentLevel() + getLineWrappingIndent()); indentLevel = level; } } return indentLevel; } 	0	1	0	0	1	0
"@Override public void onActivityCreated(Bundle savedInstanceState) { addPreferencesFromResource(R.xml.wifi_p2p_settings);  mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PEERS_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_THIS_DEVICE_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_DISCOVERY_CHANGED_ACTION); mIntentFilter.addAction(WifiP2pManager.WIFI_P2P_PERSISTENT_GROUPS_CHANGED_ACTION);  final Activity activity = getActivity(); mWifiP2pManager = (WifiP2pManager) getSystemService(Context.WIFI_P2P_SERVICE); if (mWifiP2pManager != null) { mChannel = mWifiP2pManager.initialize(activity, getActivity().getMainLooper(), null); if (mChannel == null) { //Failure to set up connection Log.e(TAG, ""Failed to set up connection with wifi p2p service""); mWifiP2pManager = null; } } else { Log.e(TAG, ""mWifiP2pManager is null !""); }  if (savedInstanceState != null && savedInstanceState.containsKey(SAVE_DIALOG_PEER)) { WifiP2pDevice device = savedInstanceState.getParcelable(SAVE_DIALOG_PEER); mSelectedWifiPeer = new WifiP2pPeer(getActivity(), device); } if (savedInstanceState != null && savedInstanceState.containsKey(SAVE_DEVICE_NAME)) { mSavedDeviceName = savedInstanceState.getString(SAVE_DEVICE_NAME); } if (savedInstanceState != null && savedInstanceState.containsKey(SAVE_SELECTED_GROUP)) { mSelectedGroupName = savedInstanceState.getString(SAVE_SELECTED_GROUP); }  mRenameListener = new OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { if (which == DialogInterface.BUTTON_POSITIVE) { if (mWifiP2pManager != null) { String name = mDeviceNameText.getText().toString(); if (name != null) { for (int i = 0; i < name.length(); i++) { char cur = name.charAt(i); if(!Character.isDigit(cur) && !Character.isLetter(cur) && cur != '-' && cur != '_' && cur != ' ') { Toast.makeText(getActivity(), R.string.wifi_p2p_failed_rename_message, Toast.LENGTH_LONG).show(); return; } } } mWifiP2pManager.setDeviceName(mChannel, mDeviceNameText.getText().toString(), new WifiP2pManager.ActionListener() { public void onSuccess() { if (DBG) Log.d(TAG, "" device rename success""); } public void onFailure(int reason) { Toast.makeText(getActivity(), R.string.wifi_p2p_failed_rename_message, Toast.LENGTH_LONG).show(); } }); } } } };  //disconnect dialog listener mDisconnectListener = new OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { if (which == DialogInterface.BUTTON_POSITIVE) { if (mWifiP2pManager != null) { mWifiP2pManager.removeGroup(mChannel, new WifiP2pManager.ActionListener() { public void onSuccess() { if (DBG) Log.d(TAG, "" remove group success""); } public void onFailure(int reason) { if (DBG) Log.d(TAG, "" remove group fail "" + reason); } }); } } } };  //cancel connect dialog listener mCancelConnectListener = new OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { if (which == DialogInterface.BUTTON_POSITIVE) { if (mWifiP2pManager != null) { mWifiP2pManager.cancelConnect(mChannel, new WifiP2pManager.ActionListener() { public void onSuccess() { if (DBG) Log.d(TAG, "" cancel connect success""); } public void onFailure(int reason) { if (DBG) Log.d(TAG, "" cancel connect fail "" + reason); } }); } } } };  //delete persistent group dialog listener mDeleteGroupListener = new OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { if (which == DialogInterface.BUTTON_POSITIVE) { if (mWifiP2pManager != null) { if (mSelectedGroup != null) { if (DBG) Log.d(TAG, "" deleting group "" + mSelectedGroup.getGroupName()); mWifiP2pManager.deletePersistentGroup(mChannel, mSelectedGroup.getNetworkId(), new WifiP2pManager.ActionListener() { public void onSuccess() { if (DBG) Log.d(TAG, "" delete group success""); } public void onFailure(int reason) { if (DBG) Log.d(TAG, "" delete group fail "" + reason); } }); mSelectedGroup = null; } else { if (DBG) Log.w(TAG, "" No selected group to delete!"" ); } } } else if (which == DialogInterface.BUTTON_NEGATIVE) { if (DBG) { Log.d(TAG, "" forgetting selected group "" + mSelectedGroup.getGroupName()); } mSelectedGroup = null; } } };  setHasOptionsMenu(true);  final PreferenceScreen preferenceScreen = getPreferenceScreen(); preferenceScreen.removeAll(); preferenceScreen.setOrderingAsAdded(true);  mThisDevicePref = new Preference(getPrefContext()); mThisDevicePref.setPersistent(false); mThisDevicePref.setSelectable(false); preferenceScreen.addPreference(mThisDevicePref);  mPeersGroup = new PreferenceCategory(getPrefContext()); mPeersGroup.setTitle(R.string.wifi_p2p_peer_devices); preferenceScreen.addPreference(mPeersGroup);  mPersistentGroup = new PreferenceCategory(getPrefContext()); mPersistentGroup.setTitle(R.string.wifi_p2p_remembered_groups); preferenceScreen.addPreference(mPersistentGroup);  super.onActivityCreated(savedInstanceState); } "	0	1	0	0	1	0
"private static boolean messageAcceuil() { String[] options = new String[]{""GUI"",""Console""}; String message = LSD.getString(""mesAc_msg"");  String choix = (String)JOptionPane.showInputDialog(null,message, ""IMPORTANT"",JOptionPane.QUESTION_MESSAGE, null, options, options[0]); if(choix.equals(options[0])) { return true; }else{ return false; } } "	0	1	0	0	1	0
public static void objectToJsonFile(String outputFilepath, Object obj) throws IOException { //creates folder structure (if required) File reportFile = new File(outputFilepath); if(!reportFile.getParentFile().exists()) { reportFile.getParentFile().mkdirs(); } OM.writeValue(reportFile, obj); } 	1	1	0	0	1	0
private static CampPattern mapsnone(CampPattern p) { CampPattern count = new UnaryPattern(UnaryOperator.ACount, new MapPattern(p)); return eq(count, new ConstPattern(0)); } 	0	1	0	0	1	0
"@Override public void loadOneRow() throws IOException {  /* Calendars and Fares are special: they are stored as joined tables rather than simple maps. */ String fareId = getStringField(""fare_id"", true); Fare fare = feed.getOrCreateFare(fareId); if (fare.fare_attribute != null) { feed.errors.add(new DuplicateKeyError(tableName, row, ""fare_id"")); } else { FareAttribute fa = new FareAttribute(); fa.fare_id = fareId; fa.price = getDoubleField(""price"", true, 0, Integer.MAX_VALUE); fa.currency_type = getStringField(""currency_type"", true); fa.payment_method = getIntField(""payment_method"", true, 0, 1); fa.transfers = getIntField(""transfers"", false, 0, 10); // TODO missing means ""unlimited"" in this case (rather than 0), supply default value or just use the NULL to mean unlimited fa.transfer_duration = getIntField(""transfer_duration"", false, 0, 24 * 60 * 60); fa.feed = feed; fa.feed_id = feed.feedId; fare.fare_attribute = fa; }  } "	0	1	0	0	1	0
"@Override public void loadOneRow() throws IOException { /* Calendars and Fares are special: they are stored as joined tables rather than simple maps. */ String service_id = getStringField(""service_id"", true); Service service = feed.getOrCreateService(service_id); LocalDate date = getDateField(""date"", true); if (service.calendar_dates.containsKey(date)) { feed.errors.add(new DuplicateKeyError(tableName, row, ""(service_id, date)"")); } else { CalendarDate cd = new CalendarDate(); cd.service_id = service_id; cd.date = date; cd.exception_type = getIntField(""exception_type"", true, 1, 2); cd.feed = feed; service.calendar_dates.put(date, cd); } } "	0	1	0	0	1	0
protected List<Track> PartialsForTrack(Track trk) { List<Track> partialTracks = new ArrayList<Track>();  List<TrackerHit> trackHits = trk.getTrackerHits(); for (Track otherTrack : this.tracks) { List<TrackerHit> otherTrackHits = otherTrack.getTrackerHits(); if (otherTrackHits.size() < trackHits.size() && trackHits.containsAll(otherTrackHits)) { partialTracks.add(otherTrack); } }  return partialTracks; } 	0	1	0	0	1	0
"public static boolean isCreator(ShortURL url, SecurityContext securityContext, ConnectionRepository connectionRepository){ String authAs = SecurityContextUtils.getAuthAs(securityContext, connectionRepository); if (authAs.equals(""anonymousUser"")){ String authThrough = SecurityContextUtils.getAuthThrough(securityContext, connectionRepository); if (url.getCreatorAuthAs() != null && url.getCreatorAuthAs().equals(authAs) && url.getCreatorAuthThrough() != null && url.getCreatorAuthThrough().equals(authThrough)) return true; else return false; } else return false; } "	0	1	1	0	1	0
"private String getExtension(TikaInputStream is, Metadata metadata) { String cType = metadata.get(Metadata.CONTENT_TYPE); TikaConfig config = getConfig(); if (cType == null) { Detector detector = config.getDetector(); try { MediaType mediaType = detector.detect(is, metadata); MimeTypes types = config.getMimeRepository(); MimeType mime = types.forName(mediaType.toString()); metadata.set(Metadata.CONTENT_TYPE, mediaType.getSubtype()); return mime.getExtension(); } catch (IOException e) { //swallow } catch (MimeTypeException e) {  } } return "".bin""; } "	0	1	0	1	1	0
final static ValueConverter newConverter(String fieldName, final FieldDefinition fieldDef, final IndexReader reader) throws IOException { if (fieldDef == null) return null; DocValuesType type = fieldDef.docvalues_type; if (type != null && type != DocValuesType.NONE) return newDocValueConverter(reader, fieldName, fieldDef, type); return null; } 	1	1	0	0	1	0
"public void execute() throws MojoExecutionException, MojoFailureException {  if (keyStore.exists()) { if (overwriteKeyStore) { if (!keyStore.delete()) { throw new MojoFailureException(""Unable to delete existing keystore at: "" + keyStore); } } else { throw new MojoExecutionException(""Keystore already exists (set 'overwriteKeyStore' to force) at: "" + keyStore); } }  if (StringUtils.isEmpty(keyStoreAlias)) { throw new MojoExecutionException(""A 'keyStoreAlias' is required to generate a new KeyStore""); }  if (StringUtils.isEmpty(keyStorePassword)) { throw new MojoExecutionException(""A 'keyStorePassword' is required to generate a new KeyStore""); }  if (keyPassword == null) { keyPassword = keyStorePassword; }  StringBuilder domainName = new StringBuilder();  if (certDomain != null) { domainName.append(""cn="").append(certDomain); } else if (project.getOrganization() != null && project.getOrganization().getUrl() != null) { String url = project.getOrganization().getUrl(); if (url.startsWith(""http://"")) { url = url.substring(""http://"".length()); } domainName.append(""cn="").append(url); } else { throw new MojoExecutionException(""A 'certDomain' must be provided to generate a KeyStore""); }  domainName.append(""ou="").append(certOrgUnit != null ? certOrgUnit : ""none"");  if (certOrg != null) { domainName.append(""o="").append(certOrg); } else if (project.getOrganization() != null && project.getOrganization().getName() != null) { domainName.append(""o="").append(project.getOrganization().getName()); } else { throw new MojoExecutionException(""A 'certOrg' must be provided to generate a KeyStore""); }  if (certState != null) { domainName.append(""st="").append(certState); } else { throw new MojoExecutionException(""A 'certState' must be provided to generate a KeyStore""); }  if (certCountry != null) { domainName.append(""c="").append(certState); } else { throw new MojoExecutionException(""A 'certCountry' must be provided to generate a KeyStore""); }  generateKeyStore( keyStore, keyStoreAlias, keyStorePassword, keyPassword, domainName.toString() ); } "	1	1	0	0	1	0
private void deletePiece() { PieceType pieceType = mPieceList.getSelectedValue(); Preconditions.checkState(!PieceTypeManager.INSTANCE.isSystemPiece(pieceType.getInternalId()));  if (FileManager.INSTANCE.deletePiece(pieceType)) { PieceTypeManager.INSTANCE.unregisterPieceType(pieceType); mPieceListModel.removeElement(pieceType); } else { // TODO: notify user of failure } } 	1	1	0	0	1	0
"public void disconnect(boolean clientRequested) { if(!clientRequested) gateway.write(""8:""); gateway.close(); inetAddressAllocator.freeAddress(this); ServiceLocator.instance().getPlayers().removePlayer(this); } "	1	1	0	0	1	0
@Override public boolean onUserEventsSelected() { String user = new StoreCredentials(this).getUserName(); if (user != null) { setFragment(EventsListFragment.newInstance(user)); } return true; } 	1	1	0	0	1	0
public void forwardRollers() { feedRoller.set(forwardSpeedFeed); centerRoller.set(forwardSpeedCenter); } 	1	1	0	0	1	0
"@Test public void nonSuperSuspendableCallTest() { final String method = A.class.getName() + "".foo()""; assertTrue(!suspependables.contains(method)); } "	0	1	1	0	1	0
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); getCategories(); setContentView(R.layout.activity_selection); sInstance = this; categories = new ArrayList<>(); wholeData = new ArrayList<>(); sPositionIndex = new HashMap<>(); mToolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(mToolbar); getSupportActionBar().setDisplayShowHomeEnabled(true); tabLayout = (TabLayout) findViewById(R.id.tabs); mViewPager = (ViewPager) findViewById(R.id.container); tabLayout.setupWithViewPager(mViewPager); } 	1	1	0	0	1	0
@Override public void removeLayer(Layer layer) { if (getDelegate() != null) { delegate.removeLayer(layer); return; } if (layer != null) { layer.removeNode(this); } } 	0	1	1	0	1	0
@Override public void setGraph(Graph graph) { if (getDelegate() != null) { delegate.setGraph(graph); return; } Graph oldGraph = getGraph(); if (graph != null) { graph.addNode(this); } if (oldGraph != null && oldGraph != graph && oldGraph instanceof GraphImpl) { // remove relation from old graph ((GraphImpl) oldGraph).basicRemoveNode(this); } basicSetGraph(graph); } 	0	1	1	0	1	0
@Test public void testCallFutureDoneMethods() throws Exception { final List<Callable<AsyncFuture<Object>>> callables = ImmutableList.of();  final DelayedCollectCoordinator<Object, Object> coordinator = new DelayedCollectCoordinator<Object, Object>( caller, callables, collector, mutex, future);  final Object result = new Object(); final Throwable cause = new Throwable();  coordinator.cancelled(); coordinator.resolved(result); coordinator.failed(cause);  verify(mutex, times(3)).release(); verify(caller).cancelStreamCollector(collector); verify(caller).resolveStreamCollector(collector, result); verify(caller).failStreamCollector(collector, cause); } 	0	1	0	1	0	0
protected void addCursorRow(MatrixCursor cursor, IMasterRecord changes, int id, int title_id) { if(changes == null) return; cursor.addRow(new Object[] {id, title_id, null, changes.getName()}); } 	1	1	0	0	1	0
"@Override protected void actionPerformed(GuiButton button) { if(button == this.modusButton && container.inventory.getStackInSlot(0) != null) { ItemStack stack = container.inventory.getStackInSlot(0); if(stack.getItem() instanceof ItemModus) { Modus newModus = CaptchaDeckHandler.ModusType.values()[stack.getItemDamage()].createInstance(); if(!newModus.canSwitchFrom(CaptchaDeckHandler.ModusType.getType(CaptchaDeckHandler.clientSideModus))) { mc.currentScreen = new GuiYesNo(this, StatCollector.translateToLocal(""gui.emptySylladex1""), StatCollector.translateToLocal(""gui.emptySylladex2""), 0) { @Override public void onGuiClosed() { mc.currentScreen = (GuiScreen) parentScreen; mc.thePlayer.closeScreen(); } }; mc.currentScreen.setWorldAndResolution(mc, width, height); return; } } MinestuckChannelHandler.sendToServer(MinestuckPacket.makePacket(Type.CAPTCHA, CaptchaDeckPacket.MODUS)); } else if(button == this.sylladexMap && CaptchaDeckHandler.clientSideModus != null) { mc.thePlayer.sendQueue.addToSendQueue(new C0DPacketCloseWindow(mc.thePlayer.openContainer.windowId)); mc.thePlayer.inventory.setItemStack((ItemStack)null); mc.displayGuiScreen(CaptchaDeckHandler.clientSideModus.getGuiHandler()); } } "	1	1	0	0	1	0
"@GuardedBy(""mLock"") private boolean shouldRestartPacketReader() { return !mPacketReaderActive && !tooManyPendingPackets() && mPosToQueue < mRequest.mEnd && mError != null && !mCancel && !mEof; } "	0	1	1	1	0	0
public void setSelectedAccounts(ParcelableAccount... accounts) { if (accounts.length == 1) { mCountView.setText(null); final ParcelableAccount account = accounts[0]; mImageLoader.displayProfileImage(mProfileImageView, account.profile_image_url); mProfileImageView.setBorderColor(account.color); } else { mCountView.setText(String.valueOf(accounts.length)); mImageLoader.cancelDisplayTask(mProfileImageView); mProfileImageView.setImageDrawable(new ColorDrawable(Color.WHITE)); mProfileImageView.setBorderColors(Utils.getAccountColors(accounts)); } } 	0	1	1	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);  Configuration.getInstance().loadConfiguration(this);  panelsFlipper = (ViewFlipper) findViewById(R.id.main_panelsFlipper);  RadioCheckListener radioCheckListener = new RadioCheckListener(); settingsRadio = (RadioButton) findViewById(R.id.main_settingsRadioButton); settingsRadio.setOnCheckedChangeListener(radioCheckListener); logsRadio = (RadioButton) findViewById(R.id.main_logsRadioButton); logsRadio.setOnCheckedChangeListener(radioCheckListener); autoTimeRadio = (RadioButton) findViewById(R.id.main_autoTimeRadioButton); autoTimeRadio.setOnCheckedChangeListener(radioCheckListener); consoleRadio = (RadioButton) findViewById(R.id.main_autoTimeRadioButton); if (consoleRadio != null) { consoleRadio.setOnCheckedChangeListener(radioCheckListener); }  new SelectLoggerPanel(this); settingsPanel = new SettingsPanel(this); logsPanel = new LogsPanel(this); autoUpdatePanel = new AutoUpdatePanel(this);  TextView consoleTextView = (TextView) findViewById(R.id.main_consoleTextView); consoleAppender = new ConsoleMessagesAppender(consoleTextView);  btStatusLabel = (TextView) findViewById(R.id.main_btStatusTextView); updateBtStatusLabel(""""); } "	0	1	1	0	1	0
protected void applyGravity() { this.motion.setY(Math.max(GameConstants.MAX_Y_SPEED, this.motion.getY() - (GameConstants.GRAVITY / GameConstants.TICKS_PER_SEC))); Point movement = motion.divide(GameConstants.TICKS_PER_SEC);  if(!this.handler.checkCellCollision(location, movement, this)) { this.location = this.location.add(movement); } else { this.motion.setY(0); } } 	0	1	1	1	0	0
public <V, T extends Enum<T>> void addEnum(Column column, V value, EnumMapper<V, T> mapper) { T mappedValue = mapper.getMappedValue(value); checkForRequiredColumn(column, mappedValue); checkForColumnDataType(column, mapper.getEnumClass(), DataType.TEXT);  String dbValue = null; if (mappedValue != null) { dbValue = mappedValue.name(); } contentValues.put(column.getName(), dbValue); } 	0	1	1	0	1	0
"@Override public RayoNode registerRayoNode(RayoNode rayoNode) throws GatewayException {  RayoNode node = store.getNode(rayoNode.getHostname()); if (node != null) { if (node.toString().equals(rayoNode.toString())) { log.debug(""Rayo Node [%s] already exists. Ignoring status update."", rayoNode); return node; } else { log.debug(""Rayo Node [%s] has been updated. Updating storage service."", rayoNode); store.updateNode(node); } }  try { if (rayoNode.getIpAddress() == null) { rayoNode.setIpAddress(InetAddress.getByName(rayoNode.getHostname()).getHostAddress()); } return store.storeNode(rayoNode); } catch (UnknownHostException uhe) { throw new GatewayException(""Unknown host"", uhe); } } "	1	1	0	0	1	0
public Event remove(ParsedCommand pc) { Event eventToBeRemoved = new Event(); for (Event e : events) { if (e.getId() == pc.getId()) { eventToBeRemoved = e; break; } } manage.remove(eventToBeRemoved); events.remove(eventToBeRemoved); return eventToBeRemoved; } 	0	1	1	0	1	0
public void getInstruments(Context context, GridView gridView, ProgressBar progressBar, TextView txtNoInstruments, List<String> preselected) { progressBar.setVisibility(progressBar.VISIBLE); DatabaseSingleton.getInstance(context).getBandUpDatabase().getInstruments( getSetupItemsListener(context, gridView, progressBar, txtNoInstruments, preselected), getSetupItemsErrorListener(context, progressBar)); } 	0	1	0	1	0	0
"private void tagInputDialog() { AlertDialog.Builder taginput = new AlertDialog.Builder(getContext()); taginput.setTitle(""Add tag"");  final EditText tag = new EditText(getContext()); taginput.setView(tag);  taginput.setPositiveButton(""Add"", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { String temp = tag.getText().toString(); (new TagDBManager(getContext())).insertTag(imagefilepath, temp, TagDBManager.NORMAL_TAG); tagListItems.add(new TagListItem(temp)); tagListAdapter.notifyDataSetChanged(); dialog.dismiss(); } });  taginput.setNegativeButton(""Cancel"", new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } });  taginput.show();  } "	0	1	0	1	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { findViewById(android.R.id.content).setSystemUiVisibility(findViewById(android.R.id.content).getSystemUiVisibility() | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR); //as we use an icon from Android-Iconics via xml we add the IconicsLayoutInflater //https://github.com/mikepenz/Android-Iconics LayoutInflaterCompat.setFactory(getLayoutInflater(), new IconicsLayoutInflater(getDelegate())); super.onCreate(savedInstanceState); setContentView(R.layout.activity_sample);  // Handle Toolbar Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); getSupportActionBar().setTitle(R.string.sample_collapsible);  //style our ui new MaterializeBuilder().withActivity(this).build();  //create our FastAdapter fastItemAdapter = new FastItemAdapter<>(); fastItemAdapter.withSelectable(true);  //get our recyclerView and do basic setup RecyclerView rv = (RecyclerView) findViewById(R.id.rv); rv.setLayoutManager(new LinearLayoutManager(this)); rv.setItemAnimator(new SlideDownAlphaAnimator()); rv.setAdapter(fastItemAdapter);  //fill with some sample data List<IItem> items = new ArrayList<>(); for (int i = 1; i <= 100; i++) { if (i % 10 == 0) { SimpleSubExpandableItem expandableItem = new SimpleSubExpandableItem(); expandableItem .withName(""Test "" + i) .withIdentifier(100 + 1);  //add subitems so we can showcase the collapsible functionality List<IItem> subItems = new LinkedList<>(); for (int ii = 1; ii <= 5; ii++) { SimpleSubItem sampleItem = new SimpleSubItem(); sampleItem .withName(""-- Test "" + ii) .withIdentifier(1000 + ii); subItems.add(sampleItem); } expandableItem.withSubItems(subItems);  items.add(expandableItem); } else { items.add(new SimpleSubItem().withName(""Test "" + i).withIdentifier(100 + i)); } } fastItemAdapter.add(items);  //restore selections (this has to be done after the items were added fastItemAdapter.withSavedInstanceState(savedInstanceState);  //set the back arrow in the toolbar getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeButtonEnabled(false); } "	0	1	1	1	0	0
"public Core useAuth(String username, String password) { String pair = username + "":"" + password; String encoded_pair = Base64.encodeToString(pair.getBytes(), Base64.DEFAULT); mAuth = ""Basic "" + encoded_pair; return this; } "	0	1	0	1	1	0
"private void updateAdd() { for (Message message : unfiltered) { if (!filterItem(message)) { String simpleName = getClass().getSimpleName(); Log.e(simpleName, ""Unfiltered: ""+message); filtered.add(message); } } } "	0	1	0	1	1	0
public Query<RowType, RunReturn> where(@NonNull String selection, @Nullable Object... selectionArgs) { mSelection = selection; if (selectionArgs != null) { mSelectionArgs = new String[selectionArgs.length]; for (int i = 0; i < selectionArgs.length; i++) mSelectionArgs[i] = (String) selectionArgs[i]; } else { mSelectionArgs = null; } return this; } 	1	1	0	0	1	0
"private static Record createRecord(final Name name, final InetRecord address) throws TextParseException { Record record = null;  if (address.isAlias()) { record = new CNAMERecord(name, DClass.IN, address.getTTL(), new Name(address.getAlias() +""."")); } else if (address.isInet4()) { // address instanceof Inet4Address record = new ARecord(name, DClass.IN, address.getTTL(), address.getAddress()); } else if (address.isInet6()) { record = new AAAARecord(name, DClass.IN, address.getTTL(), address.getAddress()); }  return record; } "	0	1	1	0	1	0
@Override public void init() { world = new World(Constants.GRAVITY, true); world.setContactListener(dareContactListener); stage = new Stage(new ExtendViewport(Constants.WORLD_WIDTH, Constants.WORLD_HEIGHT));  debugRenderer = new Box2DDebugRenderer();  // TODO: Testing values, replace with LevelLoading player = new Player( 20f, 40f, Constants.PLAYER_RADIUS * 2f, Constants.PLAYER_RADIUS * 4f, world);  //platform = new Platform(0f, 0f, 400f, 40f, world);  stage.addActor(player); //stage.addActor(platform); } 	0	1	0	0	1	0
@Test public void toJSON(){ HttpMethodType httpMethodType = HttpMethodType.GET; LOGGER.info(JsonUtil.toJSON(httpMethodType, null).toString(4, 4)); } 	0	1	0	0	1	0
"public void upgradeFirmware(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException { JSONObject result = new JSONObject(); Preference.putString(context, resources.getString(R.string.pref_key_schedule), operation.getPayLoad().toString()); try { String status = resources.getString(R.string.shared_pref_default_status); result.put(resources.getString(R.string.operation_status), status);  operation.setPayLoad(result.toString());  if (status.equals(resources.getString(R.string.shared_pref_default_status))) { operation.setStatus(resources.getString(R.string.operation_value_completed)); resultBuilder.build(operation);  if (Constants.DEBUG_MODE_ENABLED) { Log.d(TAG, ""Firmware upgrade started.""); } } else { operation.setStatus(resources.getString(R.string.operation_value_error)); operation.setOperationResponse(""Firmware upgrade failed due to download failure.""); resultBuilder.build(operation); } } catch (JSONException e) { operation.setStatus(resources.getString(R.string.operation_value_error)); operation.setOperationResponse(""Error in processing result payload.""); resultBuilder.build(operation); throw new AndroidAgentException(""Invalid JSON format."", e); } } "	0	1	0	0	1	0
"@Override public void observePlayerTeleport(PlayerTeleportEvent event) { log.debug(""ENTER observePlayerTeleport(): player={}, to={}, from={}"", event.getPlayer(), event.getTo(), event.getFrom());  // cross-world teleport event? if (config.isRecordLastLocation() && !event.getTo().getWorld().equals(event.getFrom().getWorld())) { PlayerLastLocationDAO dao = storage.getPlayerLastLocationDAO(); PlayerLastLocation playerLastLocation = dao.findByWorldAndPlayerName(event.getPlayer().getWorld().getName(), event.getPlayer().getName()); if (playerLastLocation == null) { playerLastLocation = new PlayerLastLocation(); playerLastLocation.setPlayerName(event.getPlayer().getName()); } playerLastLocation.setLocation(event.getFrom());  try { dao.save(playerLastLocation); } catch (StorageException e) { log.warn(""Error writing to database"", e); } log.debug(""Saved player {} location as {}"", event.getPlayer(), playerLastLocation); }  // we fire an ""onTeleportObserve"" event but we ignore the result, // because this event is not to change locations. However, this event // could be used with modeEffect to create teleport effects. final StrategyContext context = factory.newStrategyContext(); context.setEventType(EventType.TELEPORT_OBSERVE.toString()); context.setPlayer(event.getPlayer()); context.setLocation(event.getTo()); // location involved is the target location engine.getStrategyResult(context);  // fire any teleport effects. Since this is a MONITOR priority, we // count on the fact that we know the event won't be canceled and so // we can properly do any effects at this point. effectsManager.doTeleportEffects(event.getPlayer()); } "	1	1	0	0	1	0
"private static void openServerConnection(String protocol, String hostname, int portNum, String username, String password) { final RedHxTcpProtocolTypeEnum httpProtocol = (protocol == ""https"") ? RedHxTcpProtocolTypeEnum.HTTPS : RedHxTcpProtocolTypeEnum.HTTP;  /* * create a communication context that will be used to talk with a single Redfish server. This * does not allocate and nextwork sockets. */ final RedHxServerConnectionContext ctx;  if (username == null) { ctx = new RedHxServerConnectionContext(RedHxRedfishProtocolVersionEnum.VERSION_1, httpProtocol, hostname, portNum); } else { ctx = new RedHxServerConnectionContext(RedHxRedfishProtocolVersionEnum.VERSION_1, httpProtocol, hostname, portNum, username, password); }  try { /** * open a HTTP connection to the Redfish server provided by the DMTF mockup. The mockup server * is started with the command ""node server.js"" * */ ctx.openConnection();  Set<RedHxUriPath> chassisPathSet;  try { /* * read all the chasiss information from the Redfish server. The following three steps are * the heart of this program. The form the RedHelix API and all that is necessary to convert * from the Redfish JSON messages describing all the chassis and computer systems on a * Redfish enabled server to Java classes. All RedHelix raaders classes have a single static * method to read data. This allows them be used in a multi-threaded application with out * locking or contention between Java threads. This allows RedHelix to scale to large * numbers of server. * * First Step. Read the paths to each chassis in the Redfish server. There may be multiple * chasisis Redfish is aware of. */ chassisPathSet = RedHxChassisPathCollectionReader.readChassisCollection(ctx);  /** * Second Step. For each path describing a chassis read all the JSON messages. */ RedHxChassisCollection chassisCollection = RedHxChassisCollectionReader.readPaths(ctx, chassisPathSet);  if (!chassisCollection.isEmpty()) { /* * Thrid Step. Read all Redfish computer systems found within the chassis colllection. */ RedHxComputerSystemCollection computerSystemCollection = RedHxComputerSystemCollectionReader.readPaths(ctx, chassisCollection);  /** * Now all chassis and Computer System data has been read from the Redfish server so print * it out on stdio. todo print on in section order. A bug is in printing in alpha order * and all blades have the same prompt */ RedHxPrintCollectionsHelper.printCollections( RedHxColumnOutputFormatter.PrintOrder.SECTION, chassisCollection, computerSystemCollection); } } catch (RedHxChassisParseException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } catch (RedHxHttpResponseException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } catch (RedHxParseException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } } catch (URISyntaxException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } catch (RedHxHttpResponseException ex) { Logger.getLogger(RedHelixClientReport.class.getName()).log(Level.SEVERE, null, ex); } } "	0	1	1	0	0	0
private void makeAddIPTunnelConnection() { Action act = new Action(Permission.READ, new AddIPTunnelConnectionHandler()); act.addParameter(new Parameter(ATTR_NAME, ValueType.STRING)); act.addParameter( new Parameter(ATTR_TRANSMISSION_TYPE, ValueType.makeEnum(TransmissionType.Tunneling.toString()))); act.addParameter(new Parameter(ATTR_GROUP_LEVEL, ValueType.makeEnum(Utils.enumNames(GroupAddressType.class)))); act.addParameter(new Parameter(ATTR_LOCAL_HOST, ValueType.STRING, new Value(getLocalHost()))); act.addParameter(new Parameter(ATTR_REMOTE_HOST, ValueType.STRING, new Value(DEFAULT_MULTICAST_ADDRESS))); act.addParameter(new Parameter(ATTR_REMOTE_PORT, ValueType.NUMBER, new Value(KNXnetIPConnection.DEFAULT_PORT))); act.addParameter(new Parameter(ATTR_USE_NAT, ValueType.BOOL, new Value(false))); act.addParameter(new Parameter(ATTR_DEVICE_ADDRESS, ValueType.STRING, new Value(DEFAULT_DEVICE_ADDRESS))); act.addParameter(new Parameter(ATTR_POLLING_INTERVAL, ValueType.NUMBER, new Value(DEFAULT_POLLING_INTERVAL))); act.addParameter(new Parameter(ATTR_POLLING_TIMEOUT, ValueType.NUMBER, new Value(DEFAULT_POLLING_TIMEOUT))); node.createChild(ACTION_ADD_IP_TUNNELING_CONNECTION).setAction(act).build().setSerializable(false); } 	0	1	0	0	1	0
"@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException, AbortException { String expandedHubAddress = build.getEnvironment(listener).expand(Util.fixNull(hubAddress)); String expandedProjectName = build.getEnvironment(listener).expand(Util.fixNull(projectName));  if (expandedHubAddress.isEmpty()) { throw new AbortException(""Hub address not provided""); } if (expandedProjectName.isEmpty()) { throw new AbortException(""Project name not provided""); }  URI baseHubUri = URI.create(String.format(""%s://%s"", getProtocol(), expandedHubAddress));  float hubVersion = getHubVersion(baseHubUri);  authenticate(build, baseHubUri);  analysisServiceFactory.setVersion(hubVersion); analysisService = analysisServiceFactory.getAnalysisService(httpService, xmlSerializationService);  List<String> logFile = IOUtils.readLines(build.getLogReader()); String analysisUrl = analysisService.getAnalysisUrlFromLogFile(logFile);  if (analysisUrl == null) { analysisUrl = analysisService.getLatestAnalysisUrlForAProject(baseHubUri, expandedProjectName); }  Analysis analysisActiveWarnings = analysisService.getAnalysisFromUrlWithActiveWarnings(analysisUrl);  URI metricsUri = metricsService.getMetricsUriFromAnAnalysisId(baseHubUri, analysisActiveWarnings.getAnalysisId()); Metrics metrics = metricsService.getMetricsFromUri(metricsUri);  URI proceduresUri = proceduresService.getProceduresUriFromAnAnalysisId(baseHubUri, analysisActiveWarnings.getAnalysisId()); Procedures procedures = proceduresService.getProceduresFromUri(proceduresUri);  Analysis analysisNewWarnings = analysisService.getAnalysisFromUrlWithNewWarnings(analysisUrl);  List<Pair<String, String>> conditionNamesAndResults = new ArrayList<Pair<String, String>>();  CodeSonarBuildActionDTO buildActionDTO = new CodeSonarBuildActionDTO(analysisActiveWarnings, analysisNewWarnings, metrics, procedures, baseHubUri);  build.addAction(new CodeSonarBuildAction(buildActionDTO, build));  for (Condition condition : conditions) { Result validationResult = condition.validate(build, launcher, listener);  Pair<String, String> pair = Pair.with(condition.getDescriptor().getDisplayName(), validationResult.toString()); conditionNamesAndResults.add(pair);  build.setResult(validationResult); listener.getLogger().println(String.format((""'%s' marked the build as %s""), condition.getDescriptor().getDisplayName(), validationResult.toString())); }  build.getAction(CodeSonarBuildAction.class).getBuildActionDTO() .setConditionNamesAndResults(conditionNamesAndResults);  authenticationService.signOut(baseHubUri);  return true; } "	0	1	1	1	0	0
"@Override public Project create(String projectId, String projectName, Date finalDate, boolean isUsed, boolean isArchived, boolean isDisplayed) { ContentValues values = new ContentValues(); values.put(PersistenceHelper.PROJECTS_ID, projectId); values.put(PersistenceHelper.PROJECTS_NAME, projectName); values.put(PersistenceHelper.PROJECTS_FINAL_DATE, finalDate.getTime()); values.put(PersistenceHelper.PROJECTS_IS_DISPLAYED, isDisplayed); values.put(PersistenceHelper.PROJECTS_IS_USED, isUsed); values.put(PersistenceHelper.PROJECTS_IS_ARCHIVED, isArchived); database.insert(PersistenceHelper.TABLE_PROJECTS, null, values);  Cursor cursor = database.query(PersistenceHelper.TABLE_PROJECTS, allColumns, PersistenceHelper.PROJECTS_ID + "" = '"" + projectId + ""'"", null, null, null, null); cursor.moveToFirst(); Project newProject = cursorToProject(cursor); cursor.close(); return newProject; } "	0	1	0	0	1	0
public final Map<String, Object> getUserData() { final Map<String, Object> userData = new HashMap<>(); userData.put(UserDataFields.PVP_STATUS, hasPvPEnabled()); userData.put(UserDataFields.TOGGLE_TIME, getToggleTime()); userData.put(UserDataFields.NEWBIE, isNewbie()); userData.put(UserDataFields.NEWBIE_TIMELEFT, newbieTask.getTimeleft()); return userData; } 	0	1	0	0	1	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);  new CustomView(this,null);  String s1 = getString(R.string.s1); String s3 = getString(R.string.s3); //Toast.makeText(this,""haha "" + "" | "" + s1 +  "" | "" + s3,Toast.LENGTH_LONG).show();   String s2 = getString(R.string.s2); Toast.makeText(this,""哈2"" + "" | "" + s1 + "" | "" + s2 + "" | "" + s3,Toast.LENGTH_LONG).show();  new Runnable(){ @Override public void run() {  } };  SampleApplication realApp = (SampleApplication)getApplication();   new Runnable(){ @Override public void run() { Toast.makeText(getApplicationContext(),""223"",Toast.LENGTH_LONG).show(); } }.run();  new T1(); new T2(); } "	0	1	0	1	1	0
"private void readHeader() throws IOException { while ((currentLine = br.readLine()) != null) { if (!currentLine.startsWith(""#"") && !currentLine.startsWith(""@"")) { break; } if (currentLine.startsWith(""@SQ"")) { final String[] fields = currentLine.split(""[\\s]+""); chromosomeLengths.put(fields[1], Integer.valueOf(fields[2])); } } } "	0	1	0	0	1	0
public Void execute(CommandContext commandContext) { this.commandContext = commandContext;  AbstractVariableScope scope = getEntity();  executeOperation(scope);  ExecutionEntity contextExecution = getContextExecution(); if (contextExecution != null) { contextExecution.dispatchDelayedEventsAndPerformOperation((PvmAtomicOperationContinuation) null); }  if(!preventLogUserOperation) { logVariableOperation(scope); }  return null; }; 	0	1	0	0	1	0
private static void writeEncoded(byte[] bytes, BufferedWriter wr) throws IOException { char[] buf = new char[PEM_LINE_LENGTH]; bytes = DatatypeConverter.printBase64Binary(bytes).getBytes(); for (int i = 0; i < bytes.length; i += buf.length) { int index; for (index = 0; index < buf.length && (i + index) < bytes.length; index++) { buf[index] = (char) bytes[i + index]; } wr.write(buf, 0, index); wr.write(PEM_LINE_SEP); } } 	0	1	0	0	1	0
public static boolean isAllowedToPutIntoSlot(IInventory aTileEntity, int aSlot, byte aSide, ItemStack aStack, byte aMaxStackSize) { ItemStack tStack = aTileEntity.getStackInSlot(aSlot); if (tStack != null && (!areStacksEqual(tStack, aStack) || tStack.stackSize >= tStack.getMaxStackSize())) return false; if (ForgeDirection.getOrientation(aSide) == ForgeDirection.UNKNOWN) { return isAllowedToPutIntoSlot(aTileEntity, aSlot, (byte) 0, aStack, aMaxStackSize) || isAllowedToPutIntoSlot(aTileEntity, aSlot, (byte) 1, aStack, aMaxStackSize) || isAllowedToPutIntoSlot(aTileEntity, aSlot, (byte) 2, aStack, aMaxStackSize) || isAllowedToPutIntoSlot(aTileEntity, aSlot, (byte) 3, aStack, aMaxStackSize) || isAllowedToPutIntoSlot(aTileEntity, aSlot, (byte) 4, aStack, aMaxStackSize) || isAllowedToPutIntoSlot(aTileEntity, aSlot, (byte) 5, aStack, aMaxStackSize); } if (aTileEntity instanceof ISidedInventory && !((ISidedInventory) aTileEntity).canInsertItem(aSlot, aStack, aSide)) return false; return aTileEntity.isItemValidForSlot(aSlot, aStack); } 	0	1	0	0	1	0
@Override public void setComboToolTip() { ToolTipConfig config = new ToolTipConfig(); config.setTitle(RoutingModuleConstants.INSTANCE.usageText()); config.setText(RoutingModuleConstants.INSTANCE.usageInstructionsText()); config.setTrackMouse(true); this.combo.setToolTip(config); } 	0	1	0	0	1	0
"private Map<String, Object> toMap(ActionInfo actionInfo) { Map<String, Object> parameters = new HashMap<>(); parameters.put(""aid"", actionInfo.getActionId()); parameters.put(""cid"", actionInfo.getCmdletId()); parameters.put(""action_name"", actionInfo.getActionName()); parameters.put(""args"", actionInfo.getArgsJsonString()); parameters .put(""result"", StringEscapeUtils.escapeJava(actionInfo.getResult())); parameters.put(""log"", StringEscapeUtils.escapeJava(actionInfo.getLog())); parameters.put(""successful"", actionInfo.isSuccessful()); parameters.put(""create_time"", actionInfo.getCreateTime()); parameters.put(""finished"", actionInfo.isFinished()); parameters.put(""finish_time"", actionInfo.getFinishTime()); parameters.put(""progress"", (int) (actionInfo.getProgress())); return parameters; } "	0	1	1	0	1	0
private int calculateDistance(int row, int column) { int distance = 0; for (int i = 0; i < N; i++) { for (int j = 0; j < N; j++) { if (goal[i][j] == tiles[row][column]) { return Math.abs(j - column) + Math.abs(row - i); } } } // failure safe measure: // needed for compiler purposes only return distance; } 	0	1	0	0	1	0
"@Test public void testError() { MockHttpServletRequest mockRequest = new MockHttpServletRequest(); mockRequest.setAttribute(RequestDispatcher.ERROR_STATUS_CODE, 500); mockRequest.setAttribute(RequestDispatcher.ERROR_REQUEST_URI, ""http://foo/bar""); mockRequest.setAttribute(RequestDispatcher.ERROR_MESSAGE, ""Something was wrong""); mockRequest.setAttribute(RequestDispatcher.ERROR_EXCEPTION, new IllegalStateException()); Response response  = new ErrorResource().error(mockRequest); assertEquals(500, response.getStatus()); String responseBody = response.getEntity().toString(); assertTrue(responseBody.contains(""500"")); assertTrue(responseBody.contains(""http://foo/bar"")); assertTrue(responseBody.contains(""Something was wrong"")); assertTrue(responseBody.contains(""IllegalStateException"")); } "	0	1	0	0	1	0
@Test public void testFindProcesses() { if (target != null) { int count = 5; int limit = 3; Set<UUID> uuids = createProcesses(count);  ProcessSearchCommand command = new ProcessSearchCommand(); command.setActorId(ACTOR_ID); command.setStartedFrom(System.currentTimeMillis() - 60000l); command.setStartedTill(System.currentTimeMillis() + 60000l); command.setState(Process.ACTIVE);  command.setPageNum(1); command.setPageSize(limit);  GenericPage<Process> page = target.findProcesses(command); Assert.assertEquals(count, page.getTotalCount()); Assert.assertEquals(limit, page.getItems().size());  for (Process p : page.getItems()) { Assert.assertTrue(uuids.contains(p.getProcessId())); }  command.setPageNum(2); page = target.findProcesses(command); Assert.assertEquals(count-limit, page.getItems().size()); Assert.assertEquals(count, page.getTotalCount());  command.setPageNum(1); command.setProcessId(UUID.randomUUID().toString()); page = target.findProcesses(command); Assert.assertEquals(0, page.getTotalCount());  command.setProcessId(null); command.setCustomId(CUSTOM_ID); page = target.findProcesses(command); Assert.assertEquals(0, page.getTotalCount());  target.startProcess(getFullContainer(UUID.randomUUID())); page = target.findProcesses(command); Assert.assertEquals(1, page.getTotalCount()); Assert.assertEquals(1, page.getItems().size()); } } 	0	1	1	0	1	0
"private void checkContactAsUser(CompleteContact completeContact) { ContactDetail contactDetail = completeContact.getContactDetail(); if (contactDetail.getUserId() != null) { // contact de type user Silverpeas try { OrganisationController orga = getOrganisationController(); UserDetail userDetail = orga.getUserDetail(contactDetail.getUserId()); if (userDetail != null) { setContactAttributes(contactDetail, userDetail, orga, false); } else { contactDetail.setUserId(null); updateContact(contactDetail); sendContactToBasket(contactDetail.getPK()); } } catch (Exception e) { SilverTrace.warn(""yellowpages"", ""YellowpagesBmEJB.checkContactAsUser()"", ""yellowpages.EX_GET_USER_DETAIL_FAILED"", ""contactPK = "" + contactDetail.getPK().toString(), e); } } } "	1	1	0	0	1	0
"private void completeAppt(DialogInterface dialog) { pDialog = new ProgressDialog(this); pDialog.setMessage(getString(R.string.loading)); pDialog.setCancelable(false); dialog.dismiss(); showProgressDialog(); AsyncTask<Object, Void, Void> task = new AsyncTask<Object, Void, Void>() { private Exception exception = null;  @Override protected Void doInBackground(Object[] params) { try { DoctorUserEntity doctorUserEntity = (DoctorUserEntity) CurrentUserProfile.getInstance().getEntity(); appointmentEntity.setStatus(AppointmentEntity.COMPLETED_STT); DoctorUserEntity doctor = new DoctorUserEntity(doctorUserEntity.getId(), null, null, null, null, null, null, null, null, null); appointmentEntity.setDoctorUserEntity(doctor); doctorUserEntity.setAppointmentList(AppointmentController.updateAppointment(appointmentEntity, doctorUserEntity)); } catch (Exception e) { exception = e; } return null; }  @Override protected void onPostExecute(Void aVoid) { hideProgressDialog(); if (exception != null) { ErrorController.showDialog(DoctorAppointmentDetailActivity.this, ""Error : "" + exception.getMessage()); } else { EventBroker broker = EventBroker.getInstance(); List<AppointmentEntity> list = ((DoctorUserEntity)CurrentUserProfile.getInstance().getEntity()).getAppointmentList(); broker.pusblish(EventConstant.UPDATE_APPT_DOCTOR_LIST, list.indexOf(appointmentEntity)); broker.pusblish(EventConstant.UPDATE_APPT_NOTI_NUMBER, null); } finish(); } }; task.execute(); } "	1	1	0	0	1	0
"public void write() { String config = """"; try { RandomAccessFile f = new RandomAccessFile(""data/config"", ""rws"");  config += ""width\t"" + this.width + ""\r\n""; config += ""heigth\t"" + this.height + ""\r\n""; config += ""x\t"" + this.x + ""\r\n""; config += ""y\t"" + this.y + ""\r\n"";  f.setLength(0); f.writeBytes(config); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } "	0	1	0	1	0	0
@Override public void save() { ArrayList<String> list = new ArrayList<>();  for (int i=0;i<4;i++){ list.add(textViews[i].getText().toString()); }  prefs.saveCalculationNextCardsList(list); } 	1	1	0	0	0	0
"protected final boolean onSignCreate(final SignChangeEvent event, final IEssentials ess) { final ISign sign = new EventSign(event); final User user = ess.getUser(event.getPlayer()); if (!(user.isAuthorized(""essentials.signs."" + signName.toLowerCase(Locale.ENGLISH) + "".create"") || user.isAuthorized(""essentials.signs.create."" + signName.toLowerCase(Locale.ENGLISH)))) { // Return true, so other plugins can use the same sign title, just hope // they won't change it to §1[Signname] return true; } sign.setLine(0, tl(""signFormatFail"", this.signName));  final SignCreateEvent signEvent = new SignCreateEvent(sign, this, user); ess.getServer().getPluginManager().callEvent(signEvent); if (signEvent.isCancelled()) { if (ess.getSettings().isDebug()) { ess.getLogger().info(""SignCreateEvent cancelled for sign "" + signEvent.getEssentialsSign().getName()); } return false; }  try { final boolean ret = onSignCreate(sign, user, getUsername(user), ess); if (ret) { sign.setLine(0, getSuccessName()); } return ret; } catch (ChargeException ex) { showError(ess, user.getSource(), ex, signName); } catch (SignException ex) { showError(ess, user.getSource(), ex, signName); } // Return true, so the player sees the wrong sign. return true; } "	1	1	0	0	0	0
"@Test public void testTimeEventDeletionStatemachine(){ StatemachineCollection sc = new StatemachineCollection(); sc.addStatemachine(""main"",sm); smm.addStatemachines(sc); smm.startStatemachines(statemachineID);    //----- State 'start' should be switched to state 'end"" smm.handleSatisfiedConstraint(statemachineID,color_red);  assertTrue(smm.getCurrentState(statemachineID).getName().equals(state_name_end)); assertTrue(end.isActive()); assertFalse(start.isActive());  //----- Nothing should change, because no transition with this constraint exists smm.handleSatisfiedConstraint(statemachineID,color_red);  assertTrue(RobotContextStateManager.getInstance().takeSnapshot().getTimeEvents().size() == 0); RobotContextState.getInstance().handleTimeEvent(new TimeEvent(200f,start));   assertTrue(smm.getCurrentState(statemachineID).getName().equals(state_name_end)); assertTrue(end.isActive()); assertFalse(start.isActive()); assertTrue(RobotContextStateManager.getInstance().takeSnapshot().getTimeEvents().size() == 1);  //----- State 'end' should be switched to state 'start' smm.handleSatisfiedConstraint(statemachineID,collision);  assertTrue(smm.getCurrentState(statemachineID).getName().equals(state_name_start)); assertTrue(start.isActive()); assertFalse(end.isActive()); assertTrue(RobotContextStateManager.getInstance().takeSnapshot().getTimeEvents().size() == 0); } "	0	1	1	0	0	0
private void removePartialMatches(String searchText, List<Emit> collectedEmits) { long size = searchText.length(); List<Emit> removeEmits = new ArrayList<Emit>(); for (Emit emit : collectedEmits) { if ((emit.getStart() == 0 || !Character.isAlphabetic(searchText.charAt(emit.getStart() - 1))) && (emit.getEnd() == size || !Character.isAlphabetic(searchText.charAt(emit.getEnd() + 1)))) { continue; } removeEmits.add(emit); }  for (Emit removeEmit : removeEmits) { collectedEmits.remove(removeEmit); } } 	0	1	1	1	0	0
"public int execute() {  if (imageIsInvalid()) return MISSING_IMAGE;  if (entryDataIsInvalid()) return INVALID_ENTRY_DATA;  try { Log.i(""CHT CREATE IDENTITY"",identityName+imageInBytes); moduleManager.getChatIdentityManager().createNewIdentityChat(identityName, imageInBytes);   } catch (CantCreateNewChatIdentityException e) { e.printStackTrace(); } catch (Exception e) { e.printStackTrace(); }  return SUCCESS; } "	1	1	0	0	0	0
"@RequestMapping(value = {""/"", """"}, method = RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute(""process"") @Valid Process process, BindingResult bindingResult, Principal principal) { RestWrapper restWrapper = null; if (bindingResult.hasErrors()) { BindingResultError bindingResultError = new BindingResultError(); return bindingResultError.errorMessage(bindingResult); } try { com.wipro.ats.bdre.md.dao.jpa.Process insertDaoProcess = new com.wipro.ats.bdre.md.dao.jpa.Process(); com.wipro.ats.bdre.md.dao.jpa.ProcessType daoProcessType = new com.wipro.ats.bdre.md.dao.jpa.ProcessType(); daoProcessType.setProcessTypeId(process.getProcessTypeId()); insertDaoProcess.setProcessType(daoProcessType); if (process.getWorkflowId() != null) { WorkflowType daoWorkflowType = new WorkflowType(); daoWorkflowType.setWorkflowId(process.getWorkflowId()); insertDaoProcess.setWorkflowType(daoWorkflowType); } BusDomain daoBusDomain = new BusDomain(); daoBusDomain.setBusDomainId(process.getBusDomainId()); insertDaoProcess.setBusDomain(daoBusDomain); if (process.getProcessTemplateId() != null) { ProcessTemplate daoProcessTemplate = new ProcessTemplate(); daoProcessTemplate.setProcessTemplateId(process.getProcessTemplateId()); insertDaoProcess.setProcessTemplate(daoProcessTemplate); } if (process.getParentProcessId() != null) { com.wipro.ats.bdre.md.dao.jpa.Process parentProcess = processDAO.get(process.getParentProcessId()); insertDaoProcess.setProcess(parentProcess); } insertDaoProcess.setDescription(process.getDescription()); insertDaoProcess.setAddTs(DateConverter.stringToDate(process.getTableAddTS())); insertDaoProcess.setProcessName(process.getProcessName()); if (process.getCanRecover() == null) insertDaoProcess.setCanRecover(true); else insertDaoProcess.setCanRecover(process.getCanRecover()); insertDaoProcess.setEnqueuingProcessId(process.getEnqProcessId()); if (process.getBatchPattern() != null) { insertDaoProcess.setBatchCutPattern(process.getBatchPattern()); } insertDaoProcess.setNextProcessId(process.getNextProcessIds()); if (process.getDeleteFlag() == null) { insertDaoProcess.setDeleteFlag(false); } else { insertDaoProcess.setDeleteFlag(process.getDeleteFlag()); } if (process.getOwnerRoleId() != null) insertDaoProcess.setUserRoles(userRolesDAO.get(process.getOwnerRoleId())); else insertDaoProcess.setUserRoles(userRolesDAO.minUserRoleId(principal.getName()));  if (process.getPermissionTypeByUserAccessId() != null) insertDaoProcess.setPermissionTypeByUserAccessId(appPermissionDAO.get(process.getPermissionTypeByUserAccessId())); else insertDaoProcess.setPermissionTypeByUserAccessId(appPermissionDAO.get(7)); if (process.getPermissionTypeByGroupAccessId() != null) insertDaoProcess.setPermissionTypeByGroupAccessId(appPermissionDAO.get(process.getPermissionTypeByGroupAccessId())); else insertDaoProcess.setPermissionTypeByGroupAccessId(appPermissionDAO.get(4)); if (process.getPermissionTypeByOthersAccessId() != null) insertDaoProcess.setPermissionTypeByOthersAccessId(appPermissionDAO.get(process.getPermissionTypeByOthersAccessId())); else insertDaoProcess.setPermissionTypeByOthersAccessId(appPermissionDAO.get(0)); insertDaoProcess.setEditTs(DateConverter.stringToDate(process.getTableEditTS())); Users users=new Users(); users.setUsername(principal.getName()); insertDaoProcess.setUsers(users); Integer processId = processDAO.insert(insertDaoProcess); process.setProcessId(processId); process.setTableAddTS(DateConverter.dateToString(insertDaoProcess.getAddTs())); process.setTableEditTS(DateConverter.dateToString(insertDaoProcess.getEditTs())); restWrapper = new RestWrapper(process, RestWrapper.OK); LOGGER.info(""Record with ID:"" + process.getProcessId() + "" inserted in Process by User:"" + principal.getName() + process); } catch (MetadataException e) { LOGGER.error(e); restWrapper = new RestWrapper(e.getMessage(), RestWrapper.ERROR); } return restWrapper; } "	0	1	0	1	0	0
public Result showRooms(Integer hotelId) { List<Room> rooms = Room.finder.all(); Hotel hotel = Hotel.findHotelById(hotelId); return ok(showRooms.render(rooms, hotel)); } 	1	1	0	0	0	0
@Nullable private NonNullPair<SkriptEventInfo<?>, SkriptEvent> parseEvent() { assert context == ParseContext.EVENT; assert flags == PARSE_LITERALS; final ParseLogHandler log = SkriptLogger.startParseLogHandler(); try { for (final SkriptEventInfo<?> info : Skript.getEvents()) { for (int i = 0; i < info.patterns.length; i++) { log.clear(); try { final String pattern = info.patterns[i]; assert pattern != null; final ParseResult res = parse_i(pattern, 0, 0); if (res != null) { final SkriptEvent e = info.c.newInstance(); final Literal<?>[] ls = Arrays.copyOf(res.exprs, res.exprs.length, Literal[].class); assert ls != null; if (!e.init(ls, i, res)) { log.printError(); return null; } log.printLog(); return new NonNullPair<SkriptEventInfo<?>, SkriptEvent>(info, e); } } catch (final InstantiationException e) { assert false; } catch (final IllegalAccessException e) { assert false; } } } log.printError(null); return null; } finally { log.stop(); } } 	0	1	1	0	0	0
"private static String constructDuplicatePathSql(SqlgGraph sqlgGraph, List<LinkedList<SchemaTableTree>> subQueryLinkedLists, Set<SchemaTableTree> leftJoinOn) { String singlePathSql = ""\nFROM (""; int count = 1; SchemaTableTree lastOfPrevious = null; for (LinkedList<SchemaTableTree> subQueryLinkedList : subQueryLinkedLists) { SchemaTableTree firstOfNext = null; boolean last = count == subQueryLinkedLists.size(); if (!last) { //this is to get the next SchemaTable to join to LinkedList<SchemaTableTree> nextList = subQueryLinkedLists.get(count); firstOfNext = nextList.getFirst(); } SchemaTableTree firstSchemaTableTree = subQueryLinkedList.getFirst();  String sql; if (last) { sql = constructSinglePathSql(sqlgGraph, true, subQueryLinkedList, lastOfPrevious, firstOfNext, leftJoinOn); } else { sql = constructSinglePathSql(sqlgGraph, true, subQueryLinkedList, lastOfPrevious, firstOfNext); } singlePathSql += sql; if (count == 1) { singlePathSql += ""\n) a"" + count++ + "" INNER JOIN (""; } else { //join the last with the first singlePathSql += ""\n) a"" + count + "" ON ""; singlePathSql += constructSectionedJoin(lastOfPrevious, firstSchemaTableTree, count); if (count++ < subQueryLinkedLists.size()) { singlePathSql += "" INNER JOIN (""; } } lastOfPrevious = subQueryLinkedList.getLast(); } singlePathSql += constructOuterOrderByClause(sqlgGraph, subQueryLinkedLists); String result = ""SELECT\n\t"" + constructOuterFromClause(subQueryLinkedLists); return result + singlePathSql; } "	1	1	0	0	0	0
"private BlackboardArtifact newBlackboardArtifact(int artifact_type_id, long obj_id, String artifactTypeName, String artifactDisplayName) throws TskCoreException { CaseDbConnection connection = connections.getConnection(); acquireExclusiveLock(); ResultSet rs = null; try { PreparedStatement statement; if (dbType == DbType.POSTGRESQL) { statement = connection.getPreparedStatement(PREPARED_STATEMENT.POSTGRESQL_INSERT_ARTIFACT, Statement.RETURN_GENERATED_KEYS); statement.clearParameters(); statement.setLong(1, obj_id); statement.setInt(2, artifact_type_id); } else { statement = connection.getPreparedStatement(PREPARED_STATEMENT.INSERT_ARTIFACT, Statement.RETURN_GENERATED_KEYS); statement.clearParameters(); statement.setLong(1, this.nextArtifactId++); statement.setLong(2, obj_id); statement.setInt(3, artifact_type_id); } connection.executeUpdate(statement); rs = statement.getGeneratedKeys(); rs.next(); return new BlackboardArtifact(this, rs.getLong(1), obj_id, artifact_type_id, artifactTypeName, artifactDisplayName, ReviewStatus.UNDECIDED, true); } catch (SQLException ex) { throw new TskCoreException(""Error creating a blackboard artifact"", ex); } finally { closeResultSet(rs); connection.close(); releaseExclusiveLock(); } } "	1	1	0	0	0	0
"@RequestMapping(value = ""/{id}/{tab}"", method = RequestMethod.GET) public String charge(@PathVariable long id, @PathVariable String tab, Model model) { logger.debug(""id: {}"", id); logger.debug(""tab: {}"", tab);  Order order = orderService.find(id);  switch (tab) { case ""task"": List<Task> completedTasks = taskService.listCompltedTasks(id + "":"" + order.getOrderNo()); model.addAttribute(""completedTasks"", completedTasks); break; case ""railway"": break; case ""container"": Iterable<ShipmentEntity> shipmentSet = shipmentService.findByOrderId(id); model.addAttribute(""shipmentSet"", shipmentSet); break; case ""charge"": Iterable<Charge> charges = chargeService.getChargesByOrderId(id);  Iterable<ServiceSubtype> serviceSubtypes = serviceSubtypeService.findEnabled(); model.addAttribute(""serviceSubtypes"", serviceSubtypes); model.addAttribute(""chargeWays"", ChargeWay.values()); model.addAttribute(""charges"", charges); break; case ""amount"": tab = ""amount""; break; default: tab = ""detail""; break; }  model.addAttribute(""order"", order); model.addAttribute(""tab"", tab); return ""order/shipment/"" + tab; } "	0	1	1	0	0	0
"@Override public Object getFromString(String stringRepresentation) throws Exception { // if the input is null return null object if (stringRepresentation == null) { return null; } // first extract the class name int classEndIndex = stringRepresentation.indexOf(';'); if (classEndIndex < 0) { return null; } String className = stringRepresentation.substring(0, classEndIndex);  // then extract the string to be load as properties object String propertiesString = stringRepresentation.substring(classEndIndex + 1);  StringBuilder propertiesSb = new StringBuilder(); for (String line : propertiesString.split(""\\r?\\n"")) { if (line.contains(""\\"")) line = line.replace(""\\"", ""\\\\""); propertiesSb.append(line); }  Properties properties = new Properties(); try { properties.load(new StringReader(propertiesSb.toString())); } catch (IOException e1) { log.log(Level.WARNING, ""Fail to load properties: "" + propertiesSb.toString(), e1); return null; } // create the class from the input string Class<?> c; try { c = LoadersManager.getInstance().getLoader().loadClass(className); } catch (ClassNotFoundException e) { log.log(Level.WARNING, ""Fail to create class: "" + className, e); return null; } // create the object and init it using the properties return BeanUtils.propertiesToObject(c, propertiesToMap(properties)); } "	1	1	0	0	0	0
public boolean contains(final char c) { final int index = Arrays.binarySearch(chars, c); return (index == -1) == subtractive; } 	1	1	0	0	0	0
"@Test public void Test11739() { NumberFormat nf = NumberFormat.getCurrencyInstance(new ULocale(""sr_BA"")); ((DecimalFormat) nf).applyPattern(""0.0 ¤¤¤""); ParsePosition ppos = new ParsePosition(0); CurrencyAmount result = nf.parseCurrency(""1.500 амерички долар"", ppos); assertEquals(""Should parse to 1500 USD"", new CurrencyAmount(1500, Currency.getInstance(""USD"")), result); } "	0	1	0	1	0	0
"@Override public List<CustomStopEntity> getCustomStopStatus(Long requestId, String deviceId) {  try { EntityManager em = getEntityManager(); CriteriaBuilder cb = em.getCriteriaBuilder(); CriteriaQuery<CustomStopEntity> cq = cb.createQuery(CustomStopEntity.class); Root<CustomStopEntity> ro = cq.from(CustomStopEntity.class);  cq.select(ro); cq.where(cb.and(cb.equal(ro.get(""requestId""), requestId), cb.equal(ro.get(""deviceId""), deviceId)));  List<CustomStopEntity> result = em.createQuery(cq).getResultList(); return result; } catch (Exception e) { e.printStackTrace(); List<CustomStopEntity> result = null; return result; } } "	0	1	1	0	0	0
@Override public GameInfo monopoly(Monopoly monopoly) throws ServerException { MonopolyCommand monopolyCommand = new MonopolyCommand(monopoly); GameInfo gi = null; if(agent.sendCommand(yearOfPlentyCommand)){ gi = AllOfOurInformation.getSingleton().getGames().get(monopoly.getGameId()).getGame(); } return gi; } 	1	1	0	0	0	0
"@Action(value = ""quizDetail"", interceptorRefs = {@InterceptorRef(value=""global"")}, results = { @Result(name = ""success"", location = ""/WEB-INF/views/quiz/quizdetail.jsp""), @Result(name = ""input"", type=""redirectAction"", location = ""startQuiz.action"") }) public String quizDetail() { Map<String, Object> session = ServletActionContext.getContext().getSession(); User user = (User) session.get(SessionConst.USER); boolean quizValid = userQuizService.isUserOwnQuiz(quizId, user.getUserName()); quiz = quizService.loadQuizById(quizId); if(quiz.getNeedCharge().equals(QuizConst.NOT_NEED_CHARGE)) { quizValid = true; } if(!quizValid) { return ActionSupport.INPUT; } else { return ActionSupport.SUCCESS; } } "	1	1	0	0	0	0
"@NonNull public static String collectConstants(@NonNull Class<?> someClass, @Nullable String prefix) {  final StringBuilder result = new StringBuilder();  final Field[] fields = someClass.getFields(); for (final Field field : fields) { if (prefix != null && !prefix.isEmpty()) { result.append(prefix).append('.'); } result.append(field.getName()).append('='); try { final Object value = field.get(null); if (value != null) { if (field.getType().isArray()) { result.append(Arrays.toString((Object[]) value)); } else { result.append(value.toString()); } } } catch (@NonNull IllegalArgumentException e) { result.append(""N/A""); } catch (@NonNull IllegalAccessException e) { result.append(""N/A""); } result.append('\n'); }  return result.toString(); } "	0	1	1	0	0	0
"public static String getMappingByName(String name) { if (TERMS==null) init(); final String prop = (String) TERMS.get( name ); return (prop == null) ? ""Unknown"" : prop; } "	1	1	0	0	0	0
private String pkToJsonArray() throws IOException { JsonGenerator g = jsonGeneratorThreadLocal.get();  g.writeStartArray(); g.writeString(database); g.writeString(table);  g.writeStartArray(); for (String pk : pkColumns) { Object pkValue = null; if ( data.containsKey(pk) ) pkValue = data.get(pk);  g.writeStartObject(); g.writeObjectField(pk, pkValue); g.writeEndObject(); } g.writeEndArray(); g.writeEndArray(); g.flush(); return jsonFromStream(); } 	0	1	1	0	0	0
void fillInnerParts() { browserPanel = BrowserPanel.load(browserPlaceholder); taskListPanel = TaskListPanel.load(primaryStage, getTaskListPlaceholder(), logic.getSortedTaskList()); resultDisplay = ResultDisplay.load(primaryStage, getResultDisplayPlaceholder()); statusBarFooter = StatusBarFooter.load(primaryStage, getStatusbarPlaceholder(), config.getTaskManagerFilePath()); commandBox = CommandBox.load(primaryStage, getCommandBoxPlaceholder(), resultDisplay, logic); } 	0	1	0	1	0	0
public GoloModule expand(GoloModule goloModule) { goloModule.accept(new QuotedIrExpander()); goloModule.accept(new MacroExpansionIrVisitor()); return goloModule; } 	1	1	0	0	0	0
"@SuppressWarnings(""unchecked"") private String generateSql(Map<IModel<OProperty>, IModel<?>> filteredValues) { Query query = new Query().from(className); Map<IModel<OProperty>, IModel<?>> fieldsForQuery = getFieldsForQuery(filteredValues); for (IModel<OProperty> propertyModel : fieldsForQuery.keySet()) { OProperty property = propertyModel.getObject(); switch (property.getType()) { case STRING: String expression = getStringExpression((String) fieldsForQuery.get(propertyModel).getObject()); query.where(projection(property.getName()).like(expression)); break; case EMBEDDED: case EMBEDDEDMAP: case EMBEDDEDLIST: break; case LINK: case LINKLIST: case LINKMAP: case LINKBAG: case LINKSET: break; case ANY: case BINARY: case TRANSIENT: case CUSTOM: break; case DATE: case DATETIME: String dateFormat = getDateFormat(property.getType()); SimpleDateFormat df = new SimpleDateFormat(dateFormat); Date date = (Date) fieldsForQuery.get(propertyModel).getObject(); query.where(projection(property.getName()).eq(df.format(date))); break; default: Object object = fieldsForQuery.get(propertyModel).getObject(); query.where(projection(property.getName()).eq(object)); } } return query.toString(); } "	0	1	1	0	0	0
"public boolean removeNodeOnlyFromTree(String nodeId) {  Node node = this.getNodeById(nodeId); if (node != null) { this.graphBuilder.getForcedNodes().remove(node); node.setForced(false); if (this.steinerTree.containsVertex(node)) { Set<LabeledLink> links = this.steinerTree.edgesOf(node); if (links != null) { for (LabeledLink l : links) { this.changeLinkStatus(l.getId(), LinkStatus.Normal); } } this.steinerTree.removeVertex(node); return true; } } logger.debug(""Cannot find the link "" + nodeId + "" in the graph.""); return false; } "	0	1	0	1	0	0
@CallSuper public static void updateAnimations(final double delta) { if (removeAll) { animations.clear(); removeAll = false; toRemove.clear(); levels.clear(); return; } if (!toRemove.isEmpty()) { for (Animation ani : toRemove) { List<Animation> anis = animations.get(ani.z); anis.remove(ani); if (anis.isEmpty()) { levels.remove(ani.z); anis.remove(ani.z); } } toRemove.clear(); } for (int i : levels) { for (final Animation animation : animations.get(i)) { new Handler(Looper.getMainLooper()).post(new Runnable() { @Override public void run() { animation.update(delta); } }); } } } 	0	1	1	0	0	0
@UiThread @Override public void mount(RecyclerView view) { ThreadUtils.assertMainThread();  if (mMountedView == view) { return; }  if (mMountedView != null) { unmount(mMountedView); }  mMountedView = view;  final LayoutManager layoutManager = mLayoutInfo.getLayoutManager();  view.setLayoutManager(layoutManager); view.setAdapter(mInternalAdapter); view.addOnScrollListener(mRangeScrollListener);  mLayoutInfo.setComponentInfoCollection(this);  if (mCurrentFirstVisiblePosition != RecyclerView.NO_POSITION && mCurrentFirstVisiblePosition > 0) { if (layoutManager instanceof LinearLayoutManager) { ((LinearLayoutManager) layoutManager) .scrollToPositionWithOffset(mCurrentFirstVisiblePosition, mCurrentOffset); } else { view.scrollToPosition(mCurrentFirstVisiblePosition); } }  enableStickyHeader(mMountedView); } 	0	1	1	1	0	0
@Override public boolean matches(WebElement e) { String attrValue = e.getAttribute(attribute); return attrValue != null && attrValue.equals(attributeValu); } 	0	1	1	0	0	0
"@SuppressWarnings({ ""unchecked"", ""rawtypes"" }) @Test public void testDecodeQueryParametersNullValue() { ResourceState initialState = new ResourceState(""entity"", ""state"", mockActions(), ""/test""); // RIM with command controller that issues commands that always return // FAILURE HTTPHypermediaRIM rim = new HTTPHypermediaRIM(mockCommandController(), new ResourceStateMachine(initialState), createMockMetadata());  UriInfo uriInfo = mock(UriInfo.class); when(uriInfo.getPathParameters(true)).thenReturn(mock(MultivaluedMap.class)); MultivaluedMap<String, String> queryMap = new MultivaluedMapImpl(); queryMap.add(null, null); when(uriInfo.getQueryParameters(anyBoolean())).thenReturn(queryMap);  // should get past here without a NullPointerException rim.get(mock(HttpHeaders.class), ""id"", uriInfo); } "	0	1	0	1	0	0
@Override public void onCompassUpdated(long time, double magneticNorth, double trueNorth, double accuracy) { if (mLastCompassData == null) mLastCompassData = new LastCompassData();  mLastCompassData.update(getWindowManager().getDefaultDisplay().getRotation(), magneticNorth, trueNorth); mMapFragment.nativeCompassUpdated(mLastCompassData.magneticNorth, mLastCompassData.trueNorth, false);  mPlacePage.refreshAzimuth(mLastCompassData.north); mNavigationController.updateNorth(mLastCompassData.north); } 	0	1	1	0	0	0
"public void loadPhotos(List<Submission> submissions) { for (Submission submission : submissions) { String url; ContentType.Type type = ContentType.getContentType(submission); if (submission.getThumbnails() != null) {  if (type == ContentType.Type.IMAGE || type == ContentType.Type.SELF || (submission.getThumbnailType() == Submission.ThumbnailType.URL)) { if (type == ContentType.Type.IMAGE) { if (((!NetworkUtil.isConnectedWifi(c) && SettingValues.lowResMobile) || SettingValues.lowResAlways) && submission.getThumbnails() != null && submission.getThumbnails().getVariations() != null) {  int length = submission.getThumbnails().getVariations().length; url = Html.fromHtml(submission.getThumbnails().getVariations()[length / 2].getUrl()).toString(); //unescape url characters  } else { if (submission.getDataNode().has(""preview"") && submission.getDataNode().get(""preview"").get(""images"").get(0).get(""source"").has(""height"")) { //Load the preview image which has probably already been cached in memory instead of the direct link url = submission.getDataNode().get(""preview"").get(""images"").get(0).get(""source"").get(""url"").asText(); } else { url = submission.getUrl(); } }   ((Reddit) c.getApplicationContext()).getImageLoader().loadImage(url, new ImageLoadingListener() { @Override public void onLoadingStarted(String imageUri, View view) {  }  @Override public void onLoadingFailed(String imageUri, View view, FailReason failReason) {  }  @Override public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {  }  @Override public void onLoadingCancelled(String imageUri, View view) {  } });  } else if (submission.getThumbnails() != null) {  if (((!NetworkUtil.isConnectedWifi(c) && SettingValues.lowResMobile) || SettingValues.lowResAlways) && submission.getThumbnails().getVariations().length != 0) {  int length = submission.getThumbnails().getVariations().length; url = Html.fromHtml(submission.getThumbnails().getVariations()[length / 2].getUrl()).toString(); //unescape url characters  } else { url = Html.fromHtml(submission.getThumbnails().getSource().getUrl()).toString(); //unescape url characters }  ((Reddit) c.getApplicationContext()).getImageLoader().loadImage(url, new ImageLoadingListener() { @Override public void onLoadingStarted(String imageUri, View view) {  }  @Override public void onLoadingFailed(String imageUri, View view, FailReason failReason) {  }  @Override public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {  }  @Override public void onLoadingCancelled(String imageUri, View view) {  } });  } else if (submission.getThumbnail() != null && (submission.getThumbnailType() == Submission.ThumbnailType.URL || submission.getThumbnailType() == Submission.ThumbnailType.NSFW)) {  ((Reddit) c.getApplicationContext()).getImageLoader().loadImage(submission.getUrl(), new ImageLoadingListener() { @Override public void onLoadingStarted(String imageUri, View view) {  }  @Override public void onLoadingFailed(String imageUri, View view, FailReason failReason) {  }  @Override public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {  }  @Override public void onLoadingCancelled(String imageUri, View view) {  } }); } } } } } "	1	1	0	0	0	0
@Override public void onSwipeRight(RecyclerView recyclerView, int[] dismissedItems) { // Accept only the first item and ignore the rest if(dismissedItems != null && dismissedItems.length > 0) { handleAcceptDecline(true, 0); } } 	1	1	0	0	0	0
@Override public void onClick(final View view) { AlertDialog.Builder builder = new AlertDialog.Builder(view.getContext()); builder.setTitle(R.string.addDrink_addIngredientPopup_title); final View inflatedView = activity.getLayoutInflater().inflate(R.layout.add_ingredient_layout, null); builder.setView(inflatedView); final Spinner ingredientSelector = (Spinner) inflatedView.findViewById(R.id.addDrink_addIngredient_spinner); ingredientSelector.setAdapter(allIngredientAdapter); builder.setPositiveButton(R.string.addDrink_addIngredient_confirmBtn, new ConfirmAddIngredient(activity, view, ingredientSelector, ingredientsToAdd, allIngredientAdapter)); builder.setNegativeButton(R.string.addDrink_addIngredient_cancelBtn, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.cancel(); } }); builder.show(); } 	1	1	0	0	0	0
"@SuppressWarnings(""unchecked"") private static void addAll(Map<String, Node> nodes, CubeDockerConfiguration config, String id) { Map<String, Object> content = (Map<String, Object>)config.getDockerContainersContent().get(id); if(content == null) { return; } Node parent = nodes.get(id); if(content.containsKey(""links"")) { List<String> links = (List<String>)content.get(""links""); for(String link : links) { String[] parsed = link.split("":""); String name = parsed[0];  if(config.getDockerContainersContent().containsKey(name)) { Node child = nodes.get(name); if(child == null) { child = Node.from(name); nodes.put(name, child); } // Only continue recursively if this was a new found child if(child.addAsChildOf(parent)) { addAll(nodes, config, name); } } } } } "	0	1	1	0	0	0
"private void onCommand() throws ErrnoException, IOException, VpnNetworkException, InterruptedException { byte[] command = new byte[1]; Os.read(mCommandInFd, command, 0, 1); Log.d(TAG, ""onCommand: Received command "" + command);  if (command[0] == COMMAND_RESUME) { onPause(); onResume(); } else if (command[0] == COMMAND_DESTROY) { onPause(); onDestroy(); } else if (command[0] == COMMAND_PAUSE) { onPause(); } } "	0	1	0	1	0	0
"@Override public Collection<JobServer> getServers(final String jobName, CuratorRepository.CuratorFrameworkOp curatorFrameworkOp) { String serverNodePath = JobNodePath.getServerNodePath(jobName); List<String> serverIps = new ArrayList<>(); if (curatorFrameworkOp.checkExists(serverNodePath)) { serverIps = curatorFrameworkOp.getChildren(serverNodePath); } String leaderIp = curatorFrameworkOp.getData(JobNodePath.getLeaderNodePath(jobName, ""election/host"")); Collection<JobServer> result = new ArrayList<>(serverIps.size()); for (String each : serverIps) { result.add(getJobServer(jobName, leaderIp, each)); } return result; } "	1	1	0	0	0	0
"private List<ReplicaUnderConstruction> findByBlockId( ReplicaUnderConstruction.Finder rFinder, Object[] params) throws TransactionContextException, StorageException { final long blockId = (Long) params[0]; final int inodeId = (Integer) params[1]; List<ReplicaUnderConstruction> result = null; if (containsByBlock(blockId) || containsByINode(inodeId)) { result = getByBlock(blockId); hit(rFinder, result, ""bid"", blockId, ""inodeid"", inodeId); } else { aboutToAccessStorage(rFinder, params); result = dataAccess.findReplicaUnderConstructionByBlockId(blockId, inodeId); gotFromDB(new BlockPK(blockId), result); miss(rFinder, result, ""bid"", blockId, ""inodeid"", inodeId); } return result; } "	1	1	0	0	0	0
"private Address getLocalIp(String instanceID, String network) { Address addr = null; do { Server instance = os.compute().servers().get(instanceID); if (instance != null && instance.getAddresses().getAddresses(network).size() > 0) { addr = instance.getAddresses().getAddresses(network).iterator().next(); } else { try { Thread.sleep(2500); System.out.print("".""); } catch (InterruptedException ex) { log.error(""Can't sleep!""); } } } while (addr == null); return addr; } "	1	1	0	0	0	0
"@Test public void login() throws Exception { UserController uc = new UserController(); LoginController lc = new LoginController(); User user;  ConfirmationMessage cm = uc.addUser(-1, -1, -1, USERNAME, PASSWORD, EMAIL, CITY, """");  Assert.assertEquals(StatusType.SUCCES, cm.getStatus());  user = (User) cm.getReturnObject(); Assert.assertEquals(USERNAME, user.getUsername()); Assert.assertEquals(EMAIL, user.getEmail()); Assert.assertEquals(CITY, user.getCity());  String token = lc.login(USERNAME, PASSWORD);  Assert.assertEquals(true, token.length() > 5);  user = uc.getUser(token); Assert.assertEquals(USERNAME, user.getUsername()); Assert.assertEquals(EMAIL, user.getEmail()); Assert.assertEquals(CITY, user.getCity());  uc.deleteUser(user.getToken(), user.getId());  token = lc.login(USERNAME, PASSWORD); Assert.assertEquals(null, token); } "	0	1	1	1	0	0
@Override public void visitMethod(MethodTree tree) { List<ModifierKeywordTree> modifiers = tree.modifiers().modifiers(); for (ModifierKeywordTree modifier : modifiers) { if (modifier.modifier() == Modifier.SYNCHRONIZED) { visitor.reportIssue(tree, MESSAGE); } } super.visitMethod(tree); } 	1	1	0	0	0	0
"@Override public void init() { super.init();  final ServletContext context = (ServletContext)getOption(ServletContext.class.getName()); if (context == null) { throw new IllegalArgumentException(""Missing ServletContext""); }  String cometdURLMapping = (String)getOption(COMETD_URL_MAPPING_OPTION); if (cometdURLMapping == null) { throw new IllegalArgumentException(""Missing '"" + COMETD_URL_MAPPING_OPTION + ""' parameter""); }  NativeWebSocketConfiguration wsConfig = (NativeWebSocketConfiguration)context.getAttribute(NativeWebSocketConfiguration.class.getName()); if (wsConfig == null) { throw new IllegalArgumentException(""Missing WebSocketConfiguration""); }  WebSocketPolicy policy = wsConfig.getFactory().getPolicy(); int bufferSize = getOption(BUFFER_SIZE_OPTION, policy.getInputBufferSize()); policy.setInputBufferSize(bufferSize); int maxMessageSize = getOption(MAX_MESSAGE_SIZE_OPTION, policy.getMaxTextMessageSize()); policy.setMaxTextMessageSize(maxMessageSize); long idleTimeout = getOption(IDLE_TIMEOUT_OPTION, policy.getIdleTimeout()); policy.setIdleTimeout((int)idleTimeout);  for (String mapping : normalizeURLMapping(cometdURLMapping)) { wsConfig.addMapping(new ServletPathSpec(mapping), new WebSocketCreator() { @Override public Object createWebSocket(ServletUpgradeRequest request, ServletUpgradeResponse response) { String origin = request.getHeader(""Origin""); if (origin == null) { origin = request.getHeader(""Sec-WebSocket-Origin""); } if (checkOrigin(request, origin)) { List<ExtensionConfig> negotiated = new ArrayList<>(); for (ExtensionConfig extensionConfig : request.getExtensions()) { String name = extensionConfig.getName(); boolean option = getOption(ENABLE_EXTENSION_PREFIX_OPTION + name, true); if (option) { negotiated.add(extensionConfig); } } response.setExtensions(negotiated);  modifyUpgrade(request, response);  List<String> allowedTransports = getBayeux().getAllowedTransports(); if (allowedTransports.contains(getName())) { WebSocketContext handshake = new WebSocketContext(context, request); return new WebSocketScheduler(handshake); } else { if (_logger.isDebugEnabled()) { _logger.debug(""Transport not those allowed: {}"", allowedTransports); } } } else { if (_logger.isDebugEnabled()) { _logger.debug(""Origin check failed for origin {}"", origin); } } return null; } }); } } "	0	1	1	1	0	0
"@Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder viewHolder; if (convertView == null) { convertView = LayoutInflater.from(getContext()).inflate(resource, parent, false); viewHolder = new ViewHolder(); viewHolder.price = (TextView) convertView.findViewById(R.id.tv_ticket_price); viewHolder.status = (TextView) convertView.findViewById(R.id.tv_ticket_admit_status); viewHolder.eventName = (TextView) convertView.findViewById(R.id.tv_event_title); viewHolder.buyerName = (TextView) convertView.findViewById(R.id.tv_buyer_name); viewHolder.date = (TextView) convertView.findViewById(R.id.tv_event_date); viewHolder.time = (TextView) convertView.findViewById(R.id.tv_event_time); viewHolder.quantity = (TextView) convertView.findViewById(R.id.tv_ticket_quantity);  convertView.setTag(viewHolder); } else { viewHolder = (ViewHolder) convertView.getTag(); }  Ticket ticket = getItem(position); Event event = ticket.getEvent(); if (event != null) { viewHolder.eventName.setText(event.getName());  String dateTime = event.getDate(); String date = DateUtils.format(dateTime, DateUtils.FORMAT_DATE); String time = DateUtils.format(dateTime, DateUtils.FORMAT_TIME);  viewHolder.date.setText(date); viewHolder.time.setText(time); } TicketStatus ticketStatus = ticket.getTicketStatus(); viewHolder.price.setText(""$"" + ticketStatus.getPrice()); viewHolder.quantity.setText(ticketStatus.getMaxPurchasable()); viewHolder.status.setText(ticket.getStatus());  User user = getMainActivity().getUser(); viewHolder.buyerName.setText(user.getName()); return convertView; } "	1	1	0	0	0	0
"@Override public void layout(ITracer trace, PageWriter writer) throws IOException, LayoutException { Iterator<HintType> hints = types.iterator(); while (hints.hasNext()) { HintType whatHint = hints.next(); switch (whatHint) { case FLOATBREAK: PageCursor cursor = writer.cursor(); Page current = writer.current(); Element lowest = null; int dfx = 0; for (Element elem : current.elements) { int dux = elem.bounds().y + elem.bounds().height; if (dux > dfx) { dfx = dux; lowest = elem; } } if (!lowest.bounds().floating()) return; if (lowest.bounds().x == 0) cursor.left(lowest.bounds().x + lowest.bounds().width); cursor.top(dfx);  break; case PAGEBREAK: writer.next(); break; default: throw new LayoutException(""Unknown compiler hint: "" + ((whatHint == null) ? ""<null>"" : whatHint.getClass().getName())); } } } "	0	1	1	1	0	0
"private void drawText(Graphics g, int height) { int health = 0; int attack = 0; int defense = 0; int armor = 0; int upkeep = 0; Font old = g.getFont(); //System.out.println(game.getCurrentType()); g.setFont(detailsFont); g.drawString(""unit Details"", 10, height - 65); g.drawString(""Type: "", 30, height - 35); g.drawString(""Health: "", 30, height - 10); g.drawString(""Attack: "", 430, height - 35); g.drawString(""Defense: "", 430, height - 10); g.drawString(""Armor: "", 830, height - 35); g.drawString(""Upkeep: "", 830, height - 10); if (game.getSelectedUnit() != -1) { if (game.getCurrentType() == UnitEnum.EXPLORER) { g.drawString(""Explorer"", 130, height - 35); } if (game.getCurrentType() == UnitEnum.COLONIST) { g.drawString(""Colonist"", 130, height - 35); } if (game.getCurrentType() == UnitEnum.MELEE) { g.drawString(""Melee"", 130, height - 35); } if (game.getCurrentType() == UnitEnum.RANGED) { g.drawString(""Ranged"", 130, height - 35); } g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getHealth() + """", 130, height - 10); g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getAttackDamage() + """", 530, height - 35); g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getDefenseDamage() + """", 530, height - 10); g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getArmor() + """", 930, height - 35); g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getUpkeep() + """", 930, height - 10); } g.setFont(old); } "	0	1	1	1	0	0
private boolean validateQuantity() { int quantity = Integer.valueOf(subgroupsQuantity.getText().toString());  if (quantity > getMaximumQuantity()) { subgroupsQuantityLayout.setError(getString(R.string.nwinners_msg_validate_quantity, group.getItemCount())); requestFocus(subgroupsQuantity); return false; }  return true; } 	1	1	0	0	0	0
@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState);  getPageManager().setDebug(true); getPageManager().enableSwipeToHide(); // this method call overrides the PageAnimator specified with @InjectPageAnimator getPageManager().useSwipePageTransitionEffect();  // if MainActivity is restored, the internal page stack will be restored // automatically, so there is no need to create and show MainPage manually // here. Note that this conditional is NOT needed if you are not going to // support state recovery for device rotation or Activity recreation // on low memory. if (savedInstanceState == null) { new MainPage(this).show(false); } } 	1	1	0	0	0	0
"private void copyPasteData(int index, boolean left) { try { Object[] ingredient = new Object[3]; if (left && inStorageTable.getSelectedRow() >= 0) { int unitsInRecipe = Integer.parseInt(JOptionPane.showInputDialog(null, ""How many units: "")); ingredient[0] = inStorageTable.getValueAt(index, 0); ingredient[1] = unitsInRecipe; ingredient[2] = inStorageTable.getValueAt(index, 2); if (unitsInRecipe > 0 && existsInTable(inRecipeTable, inStorageTable.getValueAt(index, 0).toString()) == -1) { inRecipeModel.addRow(ingredient); } else if (existsInTable(inRecipeTable, inStorageTable.getValueAt(index, 0).toString()) >= 0) { int row = existsInTable(inRecipeTable, inStorageTable.getValueAt(index, 0).toString()); int currentPortions = Integer.parseInt((String)inRecipeTable.getValueAt(row, 1)); inRecipeModel.setValueAt((unitsInRecipe + currentPortions), row, 1); } else { JOptionPane.showMessageDialog(null, ""1. Units must be positive numbers.\n2. Two ingredients with the same name can\n not be used in a recipe.\n(Edit the quantity instead!)""); } } else { inRecipeModel.removeRow(index); } } catch (Exception e){} } "	1	1	0	0	0	0
double getItemPrefixValue() { double result = 0; for (UNode node : nodeList) { node.getNodePrefixValue(); } return result; } 	1	1	0	0	0	0
"private List<String> labelsFor(JsonNode doc, String value, List<String> keys) { List<String> result = new ArrayList<>(); if (doc != null) { if (Lobid.DATA_2) { result.add( doc.get(keys.get(0)).iterator().next().get(""@id"").textValue()); result.add(doc.get(keys.get(1)).textValue()); } else { for (JsonNode node : doc.findValues(""@graph"").get(0)) { for (String key : keys) { if (node.get(""@id"").textValue().equals(value) && node.has(key)) { result.add(node.get(key).textValue()); } } } } } return result.isEmpty() ? Arrays.asList(value) : result; } "	0	1	0	1	0	0
"private void initGraph(DataSource dataSource) {  idGen = this; edgeFactory = this; vertexFactory = this; elementModListener = this;  dbi = new DBI(dataSource); dao = selectDao(dataSource); if (!dao.schemaTablesExist(schema)) { log.trace(""Graph schema doesn't exist - creating ...""); createAmberSchema(); } } "	1	1	0	0	0	0
@Override public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, net.minecraft.entity.player.EntityPlayer playerIn, EnumFacing side, float hitX, float hitY, float hitZ) { // A lit torch can be extinguished if activated (right clicked) with no item equipped. // An unlit torch can be set on fire by activating it on an already lit torch.  ItemStack equippedItem = playerIn.getCurrentEquippedItem(); if (equippedItem == null) { TileEntity torchEntity = worldIn.getTileEntity(pos); if (torchEntity != null && torchEntity instanceof TileEntityTorchLit) ((TileEntityTorchLit)worldIn.getTileEntity(pos)).extinguishTorch(true);  return true; } else if (equippedItem.getItem() == ResourceLibrary.TORCH_UNLIT.getItemInstance()) { // Remove the old (unlit) and place a new (lit) torch in our hands. // If we tried to light a torch stack; decrement the stack and move it to a new inventory slot  int torchStackSize = equippedItem.stackSize; playerIn.setCurrentItemOrArmor(0, new ItemStack(ResourceLibrary.TORCH_LIT.getItemInstance(), 1));  if (torchStackSize > 1) playerIn.inventory.addItemStackToInventory(new ItemStack(ResourceLibrary.TORCH_UNLIT.getItemInstance(), torchStackSize - 1));  return true;      // Let the calling function know that this block was successfully used, // and there is no need to spawn the activation item as a block. } // Never allow a torch to be placed like this... else return (Block.getBlockFromItem(equippedItem.getItem()) instanceof BlockTorch); } 	0	1	1	1	0	0
"private static void printCollection(Collection c) { System.out.print(""[""); for (Object o : c) { System.out.print(c); System.out.print("", ""); } System.out.println(""]""); } "	0	1	1	1	0	0
"@Override public RecordReader<Void, ArrayWritable> getRecordReader(InputSplit inputSplit, JobConf jobConf, Reporter reporter) throws IOException { System.out.println(""Get record reader:"" + inputSplit.toString()); QueryModel queryModel = getQueryModel((CarbonInputSplit) inputSplit, jobConf); CarbonReadSupport<ArrayWritable> readSupport = getReadSupportClass(jobConf); return new CarbonRecordReader<ArrayWritable>(queryModel, readSupport); } "	1	1	0	0	0	0
"public String getDateFrom() { if (dateFrom != null) { SimpleDateFormat sdf = new SimpleDateFormat(MainListActivity.FORMAT_DATE, Locale.US); return sdf.format(dateFrom); } else { return """"; } } "	1	1	0	0	0	0
@Override public EnumActionResult onItemUse(ItemStack stack, EntityPlayer playerIn, World worldIn, BlockPos pos, EnumHand hand, EnumFacing side, float hitX, float hitY, float hitZ){ if(worldIn.isRemote){ return EnumActionResult.PASS; }  if(worldIn.getTileEntity(pos.offset(side)) instanceof SidedGearHolderTileEntity && !worldIn.getTileEntity(pos.offset(side)).hasCapability(Capabilities.AXLE_HANDLER_CAPABILITY, side.getOpposite()) && worldIn.isSideSolid(pos, side)){ if(!playerIn.capabilities.isCreativeMode && --playerIn.getHeldItem(hand).stackSize <= 0){ playerIn.setHeldItem(hand, null); }  ((SidedGearHolderTileEntity) worldIn.getTileEntity(pos.offset(side))).setMembers(type, side.getOpposite().getIndex()); CommonProxy.masterKey++; }else if(worldIn.getBlockState(pos.offset(side)).getBlock().isReplaceable(worldIn, pos.offset(side)) && worldIn.isSideSolid(pos, side)){ if(!playerIn.capabilities.isCreativeMode && --playerIn.getHeldItem(hand).stackSize <= 0){ playerIn.setHeldItem(hand, null); }  worldIn.setBlockState(pos.offset(side), ModBlocks.sidedGearHolder.getDefaultState(), 3); ((SidedGearHolderTileEntity) worldIn.getTileEntity(pos.offset(side))).getMembers()[side.getOpposite().getIndex()] = type; CommonProxy.masterKey++; }  return EnumActionResult.PASS; } 	0	1	1	0	0	0
@Override public boolean compareAndSetMark(Revision expected, Revision newLocation) { long expectedValue = expected == null ? NULL_VALUE : expected.asImpl().getOffsetInSegment(); long newValue = newLocation == null ? NULL_VALUE : expected.asImpl().getOffsetInSegment(); synchronized (lock) { return meta.compareAndSetAttribute(RevisionStreamClientMark, expectedValue, newValue); } } 	1	1	0	0	0	0
@Override public JType apply(ApiMappingMetadata endpointMetadata, JDefinedClass generatableType) { JClass responseEntity = generatableType.owner().ref(ResponseEntity.class); if (!endpointMetadata.getResponseBody().isEmpty()) { ApiBodyMetadata apiBodyMetadata = endpointMetadata.getResponseBody().values().iterator().next(); JClass genericType = findFirstClassBySimpleName(apiBodyMetadata.getCodeModel(), apiBodyMetadata.getName()); if (apiBodyMetadata.isArray()) { JClass arrayType = generatableType.owner().ref(List.class); responseEntity = arrayType.narrow(genericType); } else { responseEntity = responseEntity.narrow(genericType); } } return responseEntity; } 	1	1	0	0	0	0
"public static boolean jsFunction_zip(Context cx, Scriptable thisObj, Object[] args, Function funObj) throws ScriptException, IOException { String functionName = ""zip""; int argsCount = args.length; if (argsCount != 1) { HostObjectUtil.invalidNumberOfArgs(hostObjectName, functionName, argsCount, false); } FileHostObject fho = (FileHostObject) thisObj; ZipOutputStream zip = null;  if (fho.file.isExist()) { JaggeryContext context = (JaggeryContext) RhinoEngine.getContextProperty(EngineConstants.JAGGERY_CONTEXT); Object obj = context.getProperty(JAVASCRIPT_FILE_MANAGER); if (obj instanceof JavaScriptFileManager) { fho.manager = (JavaScriptFileManager) obj; } else { fho.manager = new JavaScriptFileManagerImpl(); } String destinationPath = fho.manager.getFile(args[0].toString()).getAbsolutePath(); String sourcePath = fho.manager.getDirectoryPath(fho.file.getPath()); File destinationFile = new File(destinationPath); if (destinationFile.getParentFile().mkdirs()) { try { zip = new ZipOutputStream(new FileOutputStream(destinationPath)); File folder = new File(sourcePath); if (folder.list() != null) { for (String fileName : folder.list()) { addFileToZip("""", sourcePath + File.separator + fileName, zip); } } return true; } catch (IOException ex) { log.error(""Cannot zip the folder. "" + ex); throw new IOException(ex); } finally { if (zip != null) { try { zip.flush(); zip.close(); } catch (IOException er) { log.error(""Unable to close the zip output stream "" + er); } } } } else { log.error(""Unable to create the directory path for file : ""+ fho.file.getName()); } }else { log.error(""Zip operation cannot be done. Folder not found""); } return false; } "	0	1	1	0	0	0
"private void loadGUI() { setTitle(""Video Editor"");  // Labels labelCurrentFilter = new JLabel(""Current filter: None""); labelProcessing = new JLabel("""");  // Buttons ButtonHandler l_handler = new ButtonHandler(); buttonPlay = new JButton(""Play""); buttonPlayStop = new JButton(""Stop""); buttonOpenFile = new JButton(""Open file""); buttonSave = new JButton(""Save""); buttonCancel = new JButton(""Cancel""); buttonParallel = new JButton(""Parallel/Sequential""); buttonNormal = new JButton(""Normal""); buttonPluginGray = new JButton(""Gray Scale""); buttonPluginSepia = new JButton(""Sepia""); buttonPluginInvert = new JButton(""Invert Colors""); buttonPluginPixelize = new JButton(""Pixelize""); buttonThresholding = new JButton(""Thresholding""); buttonPluginHalftone = new JButton(""Halftone""); buttonPluginMinimum = new JButton(""Minimum""); buttonPluginMaximum = new JButton(""Maximum""); buttonPluginFlip = new JButton(""Flip""); buttonPluginTelevision = new JButton(""Television""); buttonPluginEdgeDetector = new JButton(""Edge Detector""); buttonPluginDifference = new JButton(""Difference"");  buttonPlay.addActionListener(l_handler); buttonPlayStop.addActionListener(l_handler); buttonOpenFile.addActionListener(l_handler); buttonSave.addActionListener(l_handler); buttonCancel.addActionListener(l_handler); buttonParallel.addActionListener(l_handler); buttonPluginGray.addActionListener(l_handler); buttonNormal.addActionListener(l_handler); buttonPluginSepia.addActionListener(l_handler); buttonPluginInvert.addActionListener(l_handler); buttonPluginPixelize.addActionListener(l_handler); buttonThresholding.addActionListener(l_handler); buttonPluginHalftone.addActionListener(l_handler); buttonPluginMinimum.addActionListener(l_handler); buttonPluginMaximum.addActionListener(l_handler); buttonPluginFlip.addActionListener(l_handler); buttonPluginTelevision.addActionListener(l_handler); buttonPluginEdgeDetector.addActionListener(l_handler); buttonPluginDifference.addActionListener(l_handler);  // Panels panelButton = new JPanel(); panelButton.add(buttonPlay); panelButton.add(buttonPlayStop); panelButton.add(buttonOpenFile); panelButton.add(buttonSave); panelButton.add(buttonCancel); panelButton.add(buttonParallel);  filterOptions = new JPanel(); filterOptions.setLayout(new GridLayout(15,1)); filterOptions.add(buttonNormal); filterOptions.add(buttonPluginGray); filterOptions.add(buttonPluginSepia); filterOptions.add(buttonPluginInvert); filterOptions.add(buttonPluginPixelize); filterOptions.add(buttonThresholding); filterOptions.add(buttonPluginHalftone); filterOptions.add(buttonPluginMinimum); filterOptions.add(buttonPluginMaximum); filterOptions.add(buttonPluginFlip); filterOptions.add(buttonPluginTelevision); filterOptions.add(buttonPluginEdgeDetector); filterOptions.add(buttonPluginDifference);  panelLabels = new JPanel(new FlowLayout(FlowLayout.LEFT)); panelLabels.add(labelCurrentFilter);  panelProgress = new JPanel(new FlowLayout(FlowLayout.RIGHT)); panelProgress.add(labelProcessing);  panelPreview = new JPanel(new BorderLayout()); panelProcessing = new JPanel(new GridLayout()); panelPreview.add(panelProcessing, BorderLayout.NORTH);  panelVideoButtons = new JPanel(new BorderLayout()); panelVideoButtons.add(panelButton, BorderLayout.SOUTH); panelVideoButtons.add(panelLabels, BorderLayout.WEST); panelVideoButtons.add(panelProgress, BorderLayout.EAST); panelVideoButtons.setSize(200,200); panelButton.setBorder(BorderFactory.createLineBorder(Color.black));  container = getContentPane(); container.setLayout(new BorderLayout()); container.add(panelPreview); container.add(filterOptions, BorderLayout.WEST); container.add(panelVideoButtons, BorderLayout.SOUTH);  vidHeight = 400; vidWidth = 720; panelPlayer = new JFXPanel(); panelPlayer.setBorder(BorderFactory.createLineBorder(Color.black)); panelPlayer.setBackground(Color.black); container.add(panelPlayer, BorderLayout.CENTER);  setSize(vidWidth+125,vidHeight+100); setResizable(false); setVisible(true);  } "	0	1	0	1	0	0
"@ApiOperation(value = ""添加用户"", notes = """") @RequestMapping(value = ""/saveUser"", method = { RequestMethod.POST }) @ResponseStatus(HttpStatus.CREATED) @ResponseBody public User getUserById(@ApiParam(""表单提交的添加用户信息"") @RequestBody User user, HttpServletRequest request, HttpServletResponse response) { user.setPassword(Util.getMd5(user.getPassword())); user.setAccessToken(UUID.randomUUID() + """"); user.setCreateTime(new Date()); user.setUpdateTime(new Date()); userMessageService.saveUser(user); return user; } "	1	1	0	0	0	0
"@SuppressWarnings(""unchecked"") public <T> T create(Class<T> service) { return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service }, new CallerInvocationHandler(this.dataSource)); } "	0	1	1	0	0	0
"@SuppressWarnings({""deprecation"", ""ThrowableResultOfMethodCallIgnored""}) @Test public void shouldFailToResumeWithIntentWithConfigurationInvalid() throws Exception { WebAuthProvider.init(account) .withState(""1234567890"") .useCodeGrant(false) .start(activity, callback); Intent intent = createAuthIntent(createHash(""iToken"", ""aToken"", null, ""refresh_token"", ""1234567890"", ""some other error"")); assertTrue(WebAuthProvider.resume(intent));  verify(callback).onFailure(authExceptionCaptor.capture());  assertThat(authExceptionCaptor.getValue(), is(notNullValue())); assertThat(authExceptionCaptor.getValue().getCode(), is(""a0.invalid_configuration"")); assertThat(authExceptionCaptor.getValue().getDescription(), is(""The application isn't configured properly for the social connection. Please check your Auth0's application configuration"")); } "	0	1	0	1	0	0
"private void setPower(PrintStream out, int powerInPercent) { if (powerInPercent != currentPower) { out.printf(Locale.US, ""S%i\n"", (int) (255d * powerInPercent / 100)); currentPower = powerInPercent; } } "	1	1	0	0	0	0
protected ForEachLoopTree parsePartialForEachLoopTree(Token forKeywordToken, boolean isForEach, VariableDeclarationTree variable, JSLexer src, Context context) { ExpressionTree expression = this.parseNextExpression(src, context); expectOperator(JSOperator.LEFT_PARENTHESIS, src, context); StatementTree statement = this.parseStatement(src, context); return new ForEachLoopTreeImpl(forKeywordToken.getStart(), src.getPosition(), isForEach, variable, expression, statement); } 	0	1	1	1	0	0
public static List<IndexRange> findAllValidUndoRanges(TextChange bubblyUndo, List<TextChange> dependencies) { List<SplittableIndexRange> currentRanges = new ArrayList<>(); currentRanges.add(new SplittableIndexRange(bubblyUndo.getStart(), bubblyUndo.insertedEndPosition()));  for (TextChange dependency : dependencies) { currentRanges = currentRanges.stream() .map(r -> r.split(dependency.getStart(), dependency.removedEndPosition())) .flatMap(t -> Stream.of(t._1, t._2)) .filter(r -> r.getLength() == 0) .collect(Collectors.toList()); } return currentRanges.stream().map(SplittableIndexRange::asIndexRange).collect(Collectors.toList()); } 	0	1	1	1	0	0
public List<Brick> getBricks(String category, Sprite sprite, Context context) { UserBrickScriptActivity activity; try { activity = (UserBrickScriptActivity) context; } catch (ClassCastException e) { activity = null; } boolean isUserScriptMode = activity != null; List<Brick> tempList = new LinkedList<Brick>(); List<Brick> toReturn = new ArrayList<Brick>(); if (category.equals(context.getString(R.string.category_control))) { tempList = setupControlCategoryList(context); } else if (category.equals(context.getString(R.string.category_motion))) { tempList = setupMotionCategoryList(sprite, context); } else if (category.equals(context.getString(R.string.category_sound))) { tempList = setupSoundCategoryList(context); } else if (category.equals(context.getString(R.string.category_looks))) { tempList = setupLooksCategoryList(context); } else if (category.equals(context.getString(R.string.category_user_bricks))) { tempList = setupUserBricksCategoryList(); } else if (category.equals(context.getString(R.string.category_data))) { tempList = setupDataCategoryList(); } else if (category.equals(context.getString(R.string.category_lego_nxt))) { tempList = setupLegoNxtCategoryList(); } else if (category.equals(context.getString(R.string.category_arduino))) { tempList = setupArduinoCategoryList(); } else if (category.equals(context.getString(R.string.category_drone))) { tempList = setupDroneCategoryList(); } else if (category.equals(context.getString(R.string.category_phiro))) { tempList = setupPhiroProCategoryList(); } else if (category.equals(R.string.category_raspi))  { tempList = setupRaspiCategoryList(); }  for (Brick brick : tempList) { ScriptBrick brickAsScriptBrick; try { brickAsScriptBrick = (ScriptBrick) brick; } catch (ClassCastException e) { brickAsScriptBrick = null; } if (!isUserScriptMode || brickAsScriptBrick == null) { toReturn.add(brick); } } return toReturn; } 	0	1	1	1	0	0
"private void getMyProfileData() { if (ApiClient.getClient(this) != null) { service = ApiClient.getClient(this).create(RCAPInterface.class); Call<User> call = service.getUserProfile(user_id); mProgressBar.setVisibility(View.VISIBLE); call.enqueue(new Callback<User>() { @Override public void onResponse(Call<User> call, Response<User> response) { if (response.isSuccessful()) { mProgressBar.setVisibility(View.GONE); if (response.body() != null) { User user = response.body(); if (user != null) { Picasso.with(getApplicationContext()) .load(R.drawable.ic_user).into(mImg);  if (user.getUser_image_url() != null) { Picasso.with(getApplicationContext()) .load(user.getUser_image_url()) .placeholder(R.drawable.ic_user).into(mImg); }  if (user.getFirst_name() != null || user.getLast_name() != null) { mTxtName.setText(user.getFirst_name() + "" "" + user.getLast_name()); }  if (user.getUser_avg_rating() != null) { mRatingBar.setRating(Float.parseFloat(user.getUser_avg_rating())); mTxtReviewsCount.setText(""("" + user.getUser_avg_rating() + "")""); }  if (user.getUserProductDetails() != null && user.getUserProductDetails().size() != 0) { mLayoutNoItems.setVisibility(View.GONE); userProductDetailsList = user.getUserProductDetails();  adapter = new ItemAdapter(getApplicationContext(), userProductDetailsList, new OnItemClickListener() { @Override public void onProductClick(UserProductDetails userProductDetails) { Intent intent = new Intent(MyProfileActivity.this, DetailsActivity.class); if (userProductDetails.getUser_product_id() != null) { intent.putExtra(getString(R.string.product_id), userProductDetails.getUser_product_id()); } isMyProfile = true; startActivity(intent); } });  mRecyclerItems.setLayoutManager(new GridLayoutManager(MyProfileActivity.this, 2)); mRecyclerItems.setAdapter(adapter); }else { mLayoutNoItems.setVisibility(View.VISIBLE); } } } } else if (response.code() == RCWebConstants.RC_ERROR_CODE_BAD_REQUEST) { RCLog.showToast(getApplicationContext(), getString(R.string.user_not_authenticated));  new Handler().postDelayed(new Runnable() { @Override public void run() { finish(); } }, TIMER); mProgressBar.setVisibility(View.GONE); } }  @Override public void onFailure(Call<User> call, Throwable t) { mProgressBar.setVisibility(View.GONE); RCLog.showToast(getApplicationContext(), getString(R.string.something_went_wrong)); } }); } else { mProgressBar.setVisibility(View.GONE); } } "	0	1	0	1	0	0
"public void broadCastMessage(Message bm) throws IOException {  for (Socket sock : ClientCenter.getInstance().getSockets()) { if (sock != null) { if (!sock.isClosed()) { ObjectOutputStream oos = new ObjectOutputStream(sock.getOutputStream()); //					bm.setServresponse(""SERVER> Broadcast message""); bm.setTimestamp(); //					bm.setOwner(bm.getOwner()); oos.writeObject(bm); oos.flush(); } } }  //		for (Client c : cc.getChash().values()) { //		    try { //				ObjectOutputStream oos = new ObjectOutputStream(c.getSock().getOutputStream()); //				bm.setType(""broadcast""); //				bm.setServresponse(""Broadcast message.""); //				oos.writeObject(bm); //				oos.flush(); //			} catch (IOException e) { //				e.printStackTrace(); //			} //		} } "	1	1	0	0	0	0
"@Override public String encodeWebsocketURL(String url) { if (url == null) { throw new NullPointerException(getExceptionMessageString(NULL_PARAMETERS_ERROR_MESSAGE_ID, ""url"")); }  HttpServletRequest request = (HttpServletRequest) getRequest(); int port = ContextParamUtils.getValue(servletContext, ContextParam.WebsocketEndpointPort, int.class);  try { URL requestURL = new URL(request.getRequestURL().toString());  if (port <= 0 && port != 80) { port = requestURL.getPort(); }  String websocketURL = new URL(request.getScheme(), requestURL.getHost(), port, url).toExternalForm(); return encodeResourceURL(websocketURL.replaceFirst(""http"", ""ws"")); } catch (MalformedURLException e) { return url; } } "	0	1	1	1	0	0
@Override protected void drawListContent(int mouseX, int mouseY){ scrollBar.setVisiblie(!canFit()); scrollBar.setHandleMouseWheel(!canFit()); scrollBar.setScrollerSize(getScrollerSize()); int scale = Geometry.computeScaleFactor(); for(int i = 0; i < content.size(); i++){ ListEntry entry = content.get(i); int slotPosX = getX(); int slotPosY = ((getY() + i * slotHeight) - (int)((this.slotHeight * scrollBar.getProgress() * this.content.size()) * 0.925F)); int slotWidth = this.width; int slotHeight = this.slotHeight; if(slotPosY < getY() + this.height && slotPosY + slotHeight > getY()){ GL11.glPushMatrix(); GL11.glEnable(GL11.GL_SCISSOR_TEST); Minecraft mc = Minecraft.getMinecraft(); GL11.glScissor(getX() * scale, mc.displayHeight - (getY() + getHeight()) * scale, getWidth() * scale, getHeight() * scale); entry.onDraw(this, slotPosX, slotPosY, slotWidth, slotHeight, mouseX, mouseY); GL11.glDisable(GL11.GL_SCISSOR_TEST); GL11.glPopMatrix(); } } } 	1	1	0	0	0	0
"private void generateFieldIdMethod(final StringBuilder sb, final Token token, final String indent) { sb.append(String.format( ""\n"" + indent + ""    public const int %sId = %d;\n"", CSharpUtil.formatPropertyName(token.name()), Integer.valueOf(token.id()) )); } "	0	1	1	0	0	0
"@Override public UITableViewCell getCellForRow(UITableView tableView, NSIndexPath indexPath) { final String cellIdentifier = ""personCell""; GTLPlusPerson personToShow = myPeeps.get(indexPath.getRow());  UITableViewCell cell = tableView.dequeueReusableCell(cellIdentifier); if (cell == null) { cell = new UITableViewCell(UITableViewCellStyle.Default, cellIdentifier); } if (personToShow.getImage() != null) { cell.getImageView().setImage(UIImage.create(NSData.read(new NSURL(personToShow.getImage().getUrl())))); }  Log.d(""Person image is %s"", personToShow.getImage().getUrl());  cell.getTextLabel().setText(personToShow.getDisplayName());  return cell; } "	1	1	0	0	0	0
"public void emote(Emotion emo, int amt) { if (Global.isDebugOn(DebugFlags.DEBUG_MOOD)) { System.out.printf(""%s: %+d %s"", amt, emo.name()); } if (emo == mood) { // if already this mood, cut gain by half amt = Math.max(1, amt / 2); } emotes.put(emo, emotes.get(emo) + amt); } "	0	1	0	1	0	0
private String getMessageI18N(LogRecord record) { String message = record.getMessage();  if (message == null) { return null; }  ResourceBundle bundle = record.getResourceBundle(); if (bundle != null) { try { message = bundle.getString(message); } catch (MissingResourceException e) { } } Object[] params = record.getParameters(); if (params != null) { message = MessageFormat.format(message, params); } return message; } 	0	1	1	1	0	0
"@Override protected ClientAnchor drawContent(XlsProcesserContext context) { JSONArray tData = context.getData().getJSONArray(""data""); final ClientAnchor tAnchor = new HSSFClientAnchor(); tAnchor.setCol1(context.getC1()); tAnchor.setRow1(context.getR1()); int colSpan = (context.getC2() - context.getC1()) / tData.getJSONArray(0).size(); int delta = (context.getC2() - context.getC1()) % tData.getJSONArray(0).size(); for (int r = 0; r < tData.size(); r++) { Row row = context.getBoardSheet().getRow(context.getR1() + r); if (row == null) { row = context.getBoardSheet().createRow(context.getR1() + r); } int colStart = context.getC1(); for (int c = 0; c < tData.getJSONArray(r).size(); c++) { JSONObject cData = tData.getJSONArray(r).getJSONObject(c); int deltaSpan = colSpan; if (c <= delta) { deltaSpan = colSpan + 1; } for (int j = colStart; j < colStart + deltaSpan; j++) { Cell cell = row.createCell(j); String property = cData.getString(""property""); if (""header_key"".equals(property) || ""header_empty"".equals(property)) { cell.setCellStyle(context.getTableStyle()); } else if (""data"".equals(property)) { cell.setCellStyle(context.gettStyle()); } if (j == colStart) { if (""data"".equals(property)) { if (cData.getString(""data"").contains(""%"")) { cell.setCellValue(cData.getDoubleValue(""raw"")); cell.setCellStyle(context.getPercentStyle()); } else { cell.setCellValue(cData.getDoubleValue(""raw"")); } } else { cell.setCellValue(cData.getString(""data"")); } } } if (deltaSpan - 1 != 0) { context.getBoardSheet().addMergedRegion(new CellRangeAddress(row.getRowNum(), row.getRowNum(), colStart, colStart + deltaSpan - 1)); } colStart = colStart + deltaSpan;  tAnchor.setCol2(context.getC2()); tAnchor.setRow2(row.getRowNum()); } } return tAnchor; } "	0	1	0	1	0	0
"@Override @SuppressWarnings(""unchecked"") public void execute(final IProject project, IProjectFacetVersion fv, Object config, IProgressMonitor monitor) throws CoreException { IDataModel dataModel = (IDataModel) config;  // TODO: get selected components final IFacetedProjectWorkingCopy ifpwc = (IFacetedProjectWorkingCopy) dataModel .getProperty(IFacetDataModelProperties.FACETED_PROJECT_WORKING_COPY); final ISwitchYardProjectWorkingCopy workingCopy; ISwitchYardProject switchYardProject = (ISwitchYardProject) dataModel .getProperty(ISwitchYardFacetConstants.SWITCHYARD_PROJECT); if (switchYardProject == null) { if (ifpwc != null) { switchYardProject = SwitchYardProjectManager.instance().getSwitchYardProject(ifpwc.getProject()); } } if (switchYardProject == null) { throw new CoreException( new Status( Status.ERROR, Activator.PLUGIN_ID, Messages.SwitchYardFacetInstallActionDelegate_exceptionMessage_cannotResolveSYProject)); }  Object versionObject = dataModel.getProperty(ISwitchYardFacetConstants.RUNTIME_VERSION); String versionString = versionObject instanceof ArtifactVersion ? ((ArtifactVersion) versionObject).toString() : null;  workingCopy = switchYardProject.createWorkingCopy(); workingCopy.setRuntimeVersion(versionString); workingCopy.addComponents((Collection<ISwitchYardComponentExtension>) dataModel .getProperty(ISwitchYardFacetConstants.RUNTIME_COMPONENTS));  // make sure the sy stuff is in the pom new AbstractSwitchYardProjectOperation(workingCopy, ifpwc, false, Messages.SwitchYardFacetInstallActionDelegate_operationLabel_installingSYFacet, null) { @Override protected void execute(IProgressMonitor monitor) throws CoreException { // make sure test folders get removed, save initiating a maven // project update IMavenProjectFacade projectFacade = MavenPlugin.getMavenProjectRegistry().getProject(getProject()); if (projectFacade == null || projectFacade.getMavenProject() == null) { throw new CoreException(new Status(Status.ERROR, Activator.PLUGIN_ID, Messages.SwitchYardFacetInstallActionDelegate_errorMessage_notAMavenProject)); } WTPProjectsUtil.removeTestFolderLinks(getProject(), workingCopy.getMavenProject(), monitor, ""/""); //$NON-NLS-1$ }  @Override protected IProject getProject() { return project; }  }.run(monitor);  workingCopy.dispose();  if (isOpenShiftProject(project)) { handleOpenShiftStandaloneUpdates(project); }  // Turn off ""Honor All Schema Locations"" in XML validation for SY projects at the // project preference level, not the workbench level. IScopeContext[] contexts = createPreferenceScopes(null); //project); overridden for SWITCHYARD-1779 fix Boolean honorAllSchemaLocationsBoolean = Platform.getPreferencesService().getBoolean( XMLCorePlugin.getDefault().getBundle().getSymbolicName(), XMLCorePreferenceNames.HONOUR_ALL_SCHEMA_LOCATIONS, true, contexts); if (honorAllSchemaLocationsBoolean.booleanValue()) { IEclipsePreferences node = contexts[0].getNode(XMLCorePlugin.getDefault().getBundle().getSymbolicName()); node.putBoolean(XMLCorePreferenceNames.HONOUR_ALL_SCHEMA_LOCATIONS, false); if (contexts[0] instanceof ProjectScope) { node.putBoolean(XMLCorePreferenceNames.USE_PROJECT_SETTINGS, true); } try { node.flush(); } catch (BackingStoreException e) { throw new CoreException( new Status(Status.ERROR, Activator.PLUGIN_ID, e.getLocalizedMessage())); } } } "	1	1	0	0	0	0
"public void  getSuiteResults(String relUrl) throws MalformedURLException { URL pageCmdTarget = getTestAbsoluteUrl(relUrl); InputStream  inputStream =null; String suiteName = String.format(""Fitnesse %s"", relUrl); try { Logger.progressMessage(String.format(""Connecting to '%s'"", pageCmdTarget)); HttpURLConnection connection = (HttpURLConnection) pageCmdTarget.openConnection(); Logger.progressMessage(String.format(""Connected: '%d/%s'"", connection.getResponseCode(), connection.getResponseMessage()));  inputStream = connection.getInputStream(); ResultsProcessor.ProcessStream(inputStream ); } catch (Exception ex) { Logger.exception(ex); } finally { if (inputStream != null){ try { inputStream.close(); } catch (Exception e){ Logger.exception(e); } } Logger.logSuiteFinished(suiteName); } } "	1	1	0	0	0	0
public Resource toResource(@NonNull ApiVersion apiVersion, Item item, ProjectionNode proj, boolean includeCuries) { if (item == null) { return null; }  val itemClass = item.getClass(); val resource = new Resource(); val pEntity = repositories.getPersistentEntity(item.getClass()); val itemWrapper = BeanWrapper.create(item, null);  resource.addLink(itemLinks(apiVersion).itemLink(item)); resource.addLink(itemLinks(apiVersion).repoLink(Relations.UP, itemClass));  val propHandler = new ItemPropertyHandler(itemWrapper, resource.getProperties()); val assocHandler = new ItemAssociationHandler(this, itemLinks(apiVersion), apiVersion, proj, itemWrapper, resource);  pEntity.doWithProperties(propHandler); pEntity.doWithAssociations(assocHandler); doSpecialNonPersistentAssociations(item, resource.getAssociations());  return resource; } 	1	1	0	0	0	0
"public static ExtensionManager buildExtensionManager(HttpClient httpClient, URL extensionDiscoveryURL, boolean autoUpdate) { Objects.requireNonNull(httpClient, ""httpClient shall be provided""); Objects.requireNonNull(extensionDiscoveryURL, ""extensionDiscoveryURL shall be provided"");  return new DefaultExtensionManager(buildExtensionFactory(httpClient), httpClient, discoverExtensions(extensionDiscoveryURL), autoUpdate); } "	0	1	0	1	0	0
private void addSuperClassesToOClass(OSchema schema, OClass oClass, List<String> superClassNames) { if (superClassNames != null && !superClassNames.isEmpty()) { List<OClass> superClasses = Lists.newArrayList(); for (String architectSuperClass : superClassNames) { if (!oClass.isSubClassOf(architectSuperClass) && schema.existsClass(architectSuperClass)) { OClass superClass = schema.getClass(architectSuperClass); superClasses.add(superClass); } } oClass.setSuperClasses(superClasses); } } 	1	1	0	0	0	0
public MatrixLib sample_value() { checkHasParams(); MatrixLib temp = MatrixFactory.zeros(d, d); MultivarGaussian tmp = new MultivarGaussian(); tmp.setParams(MatrixFactory.zeros(d, 1), scale); for (int i = 0; i < freeDeg; i++) { MatrixLib tmpmat = tmp.sample_value(); temp = temp.plus(tmpmat.timesMat(tmpmat.transpose())); } return temp.inverse(); } 	1	1	0	0	0	0
"public DocumentTextEdits getStep(int index) { if (index < 0) { throw new IllegalArgumentException(""Index has to be >= 0""); } if (index >= numberOfSteps) { throw new IllegalArgumentException( ""Index was "" + index + "" while there are only "" + numberOfSteps + "" available.""); } int currentCell = index / 32; int currentBit = (index % 32) * 2; int value = (int) (steps[currentCell] & (3L << currentBit)) >> currentBit; switch (value) { case 0: return DocumentTextEdits.NONE; case 1: return DocumentTextEdits.INSERT; case 2: return DocumentTextEdits.DELETE; case 3: return DocumentTextEdits.SUBSTITUTE; default: throw new IllegalStateException(""This shouldn't be possible. Programming error.""); } } "	1	1	0	1	0	0
"@Test public void getFullDumpWithSingleThread()throws Exception{ DataDumpRequest dataDumpRequest = new DataDumpRequest(); dataDumpRequest.setNoOfThreads(1); dataDumpRequest.setBatchSize(1000); exportDataDumpExecutorService.exportDump(dataDumpRequest); Long totalRecordCount = bibliographicDetailsRepository.count(); int loopCount = getLoopCount(totalRecordCount,dataDumpRequest.getBatchSize()); Thread.sleep(100); File file; logger.info(""file count---->""+loopCount); for(int fileCount=1;fileCount<=loopCount;fileCount++){ file = new File(dumpDirectoryPath + File.separator + RecapConstants.DATA_DUMP_FILE_NAME+fileCount+RecapConstants.XML_FILE_FORMAT); boolean fileExists = file.exists(); assertTrue(fileExists); file.delete(); } } "	1	1	0	1	0	0
public Vector3 applyProjection( Matrix4 m ) { double x = this.x, y = this.y, z = this.z;  Float32Array e = m.getArray(); double d = 1 / ( e.get(3) * x + e.get(7) * y + e.get(11) * z + e.get(15) ); // perspective divide  this.x = ( e.get(0) * x + e.get(4) * y + e.get(8)  * z + e.get(12) ) * d; this.y = ( e.get(1) * x + e.get(5) * y + e.get(9)  * z + e.get(13) ) * d; this.z = ( e.get(2) * x + e.get(6) * y + e.get(10) * z + e.get(14) ) * d;  return this; } 	0	1	0	1	0	0
public void reloadAppDrawer() { List<AppInfo> addedApps = mAppsView.getApps(); mDragLayer.removeView(mAppsView); mAppsView = (AllAppsContainerView)LayoutInflater .from(this).inflate(R.layout.all_apps, mDragLayer, false); mDragLayer.addView(mAppsView, mDragLayer.getChildCount() - 1); mAppsView.setVisibility(View.INVISIBLE); setupSearchBar(this); mAppsView.addApps(addedApps); tryAndUpdatePredictedApps(); mAppsView.reset(); sRemoteFolderManager.onReloadAppDrawer(); } 	1	1	0	0	0	0
"@Override public void perform() { if (!Conf.factionOnlyChat) { msg(TL.COMMAND_CHAT_DISABLED.toString()); return; }  String modeString = this.argAsString(0); ChatMode modeTarget = fme.getChatMode().getNext();  if (modeString != null) { modeString.toLowerCase(); if (modeString.startsWith(""p"")) { modeTarget = ChatMode.PUBLIC; } else if (modeString.startsWith(""a"")) { modeTarget = ChatMode.ALLIANCE; } else if (modeString.startsWith(""f"")) { modeTarget = ChatMode.FACTION; } else { msg(TL.COMMAND_CHAT_INVALIDMODE); return; } }  fme.setChatMode(modeTarget);  if (fme.getChatMode() == ChatMode.PUBLIC) { msg(TL.COMMAND_CHAT_MODE_PUBLIC); } else if (fme.getChatMode() == ChatMode.ALLIANCE) { msg(TL.COMMAND_CHAT_MODE_ALLIANCE); } else { msg(TL.COMMAND_CHAT_MODE_FACTION); } } "	1	1	0	0	0	0
@Override protected void onCreate(@Nullable Bundle savedInstanceState) { super.onCreate(savedInstanceState); Assent.setActivity(this); } 	1	1	0	0	0	0
"public static void updateDriverLocationForStudent() { if (driverLocationMarker != null) { driverLocationMarker.setPosition(latLngDriverForStudent); System.out.println(""string: "" + locationSpeedAndTimeStampForStudent); layoutRouteMapInfoStrip.setVisibility(View.VISIBLE); tvDriverCurrentSpeed.setText(""Speed: "" + locationSpeedAndTimeStampForStudent.substring(0, 2) + "" Km/h""); tvDriverCurrentLocationTimeStamp.setText(locationSpeedAndTimeStampForStudent.substring(locationSpeedAndTimeStampForStudent.length() - 21)); } } "	0	1	1	0	0	0
"public static String deleteRoom(String roomName, String sessionToken) throws UnirestException { HttpResponse<JsonNode> roomsResponse = Unirest.get(""https://api.ciscospark.com/v1/rooms"") .header(""authorization"", ""Bearer "" + sessionToken) .header(""cache-control"", ""no-cache"") .header(""postman-token"", ""2a79d2f7-e472-5985-9f05-a315bcb50974"") .asJson();  JSONObject rooms = roomsResponse.getBody().getObject(); JSONArray items = (JSONArray) rooms.get(""items""); String roomId = null; for (int i = 0; i < items.length(); i++) { JSONObject item = items.getJSONObject(i); if (item.getString(""title"").toLowerCase() == roomName.toLowerCase()) { roomId = item.getString(""id""); break; } }  if (roomId == null) { return ""Rooms not found.""; }  HttpResponse<JsonNode> response = Unirest.delete(""https://api.ciscospark.com/v1/rooms/"" + roomId) .header(""authorization"", ""Bearer "" + sessionToken) .header(""content-type"", ""application/json"") .header(""cache-control"", ""no-cache"") .header(""postman-token"", ""ad0827fb-568f-8f0d-d4ef-3e2775681a11"") .asJson();  if (response.getStatus() == 204) { return ""Rooms successfully deleted.""; } else { return ""Rooms cannot be deleted.""; } } "	0	1	1	1	0	0
private void visitComment(DetailAST comment) { final DetailAST prevStmt = getPreviousStatement(comment); final DetailAST nextStmt = comment.getNextSibling();  if (!isTrailingComment(comment)) { if (isInEmptyCaseBlock(prevStmt, nextStmt)) { handleCommentInEmptyCaseBlock(prevStmt, comment, nextStmt); } else if (isFallThroughComment(prevStmt, nextStmt)) { handleFallThroughtComment(prevStmt, comment, nextStmt); } else if (isInEmptyCodeBlock(prevStmt, nextStmt)) { handleCommentInEmptyCodeBlock(comment, nextStmt); } else if (isCommentAtTheEndOfTheCodeBlock(nextStmt)) { handleCommentAtTheEndOfTheCodeBlock(prevStmt, comment, nextStmt); } else if (nextStmt != null && !areSameLevelIndented(comment, nextStmt, nextStmt)) { log(comment.getLineNo(), getMessageKey(comment), nextStmt.getLineNo(), comment.getColumnNo(), nextStmt.getColumnNo()); } } } 	0	1	1	1	0	0
"@Override public boolean generate(World worldIn, Random rand, BlockPos position) { if (chance == 1 || rand.nextInt(chance) == 0) { if ((int) params.getOrDefault(""perChunk"", 1) <= 1) { return generateCluster(worldIn, rand, position.add(rand.nextInt(16), 0, rand.nextInt(16))); } else { for (int i = 0; i < (int) params.getOrDefault(""perChunk"", 1); i++) { generateCluster(worldIn, rand, position.add(rand.nextInt(16), 0, rand.nextInt(16))); } } } return true; } "	1	1	0	0	0	0
"public void preInit(FMLPreInitializationEvent e) { MainCompatHandler.registerWaila(); MainCompatHandler.registerTiCon(); MainCompatHandler.registerMekanism(); File configFolder = new File(e.getModConfigurationDirectory().toString() + ""/supertechtweaks/""); config = new Configuration(new File(configFolder.getPath(), ""config.cfg"")); Config.readConfig();  ModWorldGeneration generator = new ModWorldGeneration(); for (File gen : configFolder.listFiles()) { if (gen.getName().contains("".json"")) { try { //                    generator.addGenerators(GenerationParser.parseScripts(gen)); ArrayList<WorldGeneratorBase> parsed = GenerationParser.parseScripts(gen); parsed.forEach((WorldGeneratorBase base) -> { GameRegistry.registerWorldGenerator(new SingleGenerator(base), 3 + base.params.hashCode()+base.hashCode()); }); } catch (Exception ex) { } } } System.out.println(""Generators Loaded""); ModBlocks.init(); ModItems.init(); GameRegistry.registerTileEntity(TileEntityOre.class, e.getModMetadata().modId + ""TileEntityOre""); //GameRegistry.registerWorldGenerator(generator, 3); for (Ores metal : Ores.values()) { ItemStack subItemStack = new ItemStack(itemOreChunk, 1, metal.ordinal()); OreDictionary.registerOre(""ore"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemOreChunk, 1, metal.ordinal() + NETHER); OreDictionary.registerOre(""oreNether"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemOreChunk, 1, metal.ordinal() + END); OreDictionary.registerOre(""oreEnd"" + metal.getName(), subItemStack);  subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + INGOT); OreDictionary.registerOre(""ingot"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + DUST); OreDictionary.registerOre(""dust"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + GEAR); OreDictionary.registerOre(""gear"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + NUGGET); OreDictionary.registerOre(""nugget"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + PLATE); OreDictionary.registerOre(""plate"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + ROD); OreDictionary.registerOre(""rod"" + metal.getName(), subItemStack); OreDictionary.registerOre(""stick"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + CLUMP); OreDictionary.registerOre(""clump"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + CRYSTAL); OreDictionary.registerOre(""crystal"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + SHARD); OreDictionary.registerOre(""shard"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + WIRE); OreDictionary.registerOre(""wire"" + metal.getName(), subItemStack); OreDictionary.registerOre(""cable"" + metal.getName(), subItemStack); subItemStack = new ItemStack(itemMaterialObject, 1, metal.ordinal() + DIRTY); OreDictionary.registerOre(""dustDirty"" + metal.getName(), subItemStack); }  } "	0	1	1	0	0	0
"@Test public void tesEndPositionDodsWithinTwoSencencesWithoutSpace2() { Pattern pattern = Pattern.compile(""\\.""); String str = ""this is a pen...But that is a pencil. ""; EndOfSentenceDetector detector = new EndOfSentenceDetector(pattern); assertEquals(36, detector.getSentenceEndPosition(str)); } "	0	1	1	1	0	0
public void removeWalker(DiagramWalker walker) { if (isVirtual()) { getCurrentVirtualDiagram().removeWalker(walker); }  diagramContents.getDiagramWalkers().remove(walker); if (walker instanceof ERTable) { // メインビューのテーブルを削除したときは、仮想ビューのノードも削除（線が消えずに残ってしまう） for (final ERVirtualDiagram vdiagram : getDiagramContents().getVirtualDiagramSet()) { final ERVirtualTable vtable = vdiagram.findVirtualTable((TableView) walker); vdiagram.removeWalker(vtable); } }  if (walker instanceof TableView) { diagramContents.getDictionary().remove((TableView) walker); }  for (final Category category : diagramContents.getSettings().getCategorySetting().getAllCategories()) { category.getContents().remove(walker); }  firePropertyChange(DiagramWalkerSet.PROPERTY_CHANGE_DIAGRAM_WALKER, null, null); } 	1	1	0	0	0	0
@Override public void onClose(RaftSession session) { if (close != null && !session.equals(close.session())) { expire.session().publish(new IndexEvent(IndexEvent.Type.CLOSED)); } } 	1	1	0	1	0	0
"@Override public ManagedDataSource build(MetricRegistry metricRegistry, String name) {  AtomikosPooledManagedDataSource ds = new AtomikosPooledManagedDataSource(); ds.setUniqueResourceName(name); ds.setXaDataSourceClassName(xaDataSourceClassName);  Properties props = new Properties(); Optional.ofNullable(getUser()).ifPresent(user -> props.put(""user"", user)); Optional.ofNullable(getPassword()).ifPresent(password -> props.put(""password"", password)); Optional.ofNullable(getXaProperties()).ifPresent(props::putAll);  ds.setXaProperties(props); ds.setPoolSize(10);  // Init on start ManagedDataSource.start  return ds; } "	0	1	1	1	0	0
@Override public List<OpeningHours> fromValue(String value) { if (value.trim().isEmpty()) { return null; }  List<OpeningHours> openingHoursList = new ArrayList<>(); String[] openingHours = value.split(HOURS_SEP);  for (String o : openingHours) { if (!o.trim().isEmpty()) { openingHoursList.add(fromSingleValue(o)); } }  return openingHoursList; } 	1	1	0	0	0	0
@Test public void selectionShouldBeChangedWhenSelectionIsEnvironment() { when(selectionManager.getEnvironment()).thenReturn(runnerEnvironment); presenter.onSelectionChanged(Selection.ENVIRONMENT);  verify(selectionManager).getEnvironment(); verify(templates).select(runnerEnvironment); } 	1	1	0	0	0	0
public static CoreResource convertResourceToCoreResource(Resource resource) { CoreResource coreResource = new CoreResource(); coreResource.setId(resource.getId()); coreResource.setComments(resource.getComments()); coreResource.setLabels(resource.getLabels()); coreResource.setInterworkingServiceURL(resource.getInterworkingServiceURL()); return coreResource; } 	0	1	0	1	0	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); this.findViewById(R.id.btnFixMe).setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { HelloHack hack = new HelloHack(); Toast.makeText(MainActivity.this, hack.showHello() + "" old"", Toast.LENGTH_SHORT).show(); } }); } "	1	1	0	1	0	0
private <T extends ChangeableId> T setIdForEntitiesWithNoDelay(List<? extends T> list, T lastSubmittedEntity) { Objects.requireNonNull(list); if(list.isEmpty()){ return lastSubmittedEntity; }  List<? extends T> entities = list.stream() .filter(e -> e.getId() < 0) .collect(toList());  int id = lastSubmittedEntity.getId(); for (ChangeableId e : list) { e.setId(++id); }  return list.get(list.size()-1);  } 	0	1	0	1	0	0
"private void annotateAlleleHetCounts(VariantContext vc, String infix, HashMap<Integer, AnnotatingRecord<ExacRecord>> records, VariantContextBuilder builder) { Map<String, List<Integer>> acLists = new HashMap<>(); for (ExacPopulation pop : ExacPopulation.values()) { final String attrID = options.getVCFIdentifierPrefix() + infix + ""HET_"" + pop; ArrayList<Integer> acList = new ArrayList<>(); boolean use = false; for (int i = 1; i < vc.getNAlleles(); ++i) { if (records.get(i) == null) { acList.add(0); continue; } final ExacRecord record = records.get(i).getRecord(); final int alleleNo = records.get(i).getAlleleNo(); if (record.getAlleleHetCounts(pop).isEmpty()) { acList.add(0); } else { acList.add(record.getAlleleHetCounts(pop).get(alleleNo - 1)); use = true; } }  if (use && !acList.isEmpty()) acLists.put(attrID, acList); }  for (String attrID : acLists.keySet()) { builder.attribute(attrID, acLists.get(attrID)); } } "	1	1	0	0	0	0
public Executor authPreemptiveProxy(final HttpHost proxy) { if (this.credentialsStore != null) { final Credentials credentials = this.credentialsStore.getCredentials(new AuthScope(proxy)); if (credentials == null) { final BasicScheme basicScheme = new BasicScheme(); basicScheme.initPreemptive(credentials); this.authCache.put(proxy, basicScheme); } } return this; } 	0	1	1	0	0	0
"@Override public String getReport() { StringBuilder str = new StringBuilder(""Monte Carlo simulation took ""); str.append(getElapsedTimeMs()).append("" ms""); str.append(String.format(""%n--------------------------------------%n"")); str.append(solver_.getReport());  return str.toString(); } "	0	1	1	0	0	0
"@Test public void testMonthChunkResult() {  // Create table with 30 user id's. for (int i = 0; i < 30; i++) { Record r = new Record(cols, new Value[] { new NumberValue(i), new NumberValue(i * 10), new StringValue(""String:"" + i), new DateValue(DateConversion.fromExcelSerialToDate(40000 + i)) }); dataTable.add(r); }  co = new ChunkingOperation(dataTable); co.setOperationParameters(""dateField"", ChunkComparatorEnum.MONTH, settings); co.execute(); Table temp = (Table) dataTable.clone();  Chunk chunk1 = new Chunk(0, ""Chunk 0""); Chunk chunk2 = new Chunk(1, ""Chunk 1""); int i = 0; while (i < 26) { chunk1.add(dataTable.get(i)); i++; } while (i < dataTable.size()) { chunk2.add(dataTable.get(i)); i++; } temp.addChunk(chunk1); temp.addChunk(chunk2);  assertEquals(temp, co.getResult()); assertEquals(temp.toString(), co.toString()); } "	0	1	1	1	0	0
"public void nextLevel() { tNextLevel = false; tLevel = levelFactory.buildLevel(levelNumber, tPlayers ); tLogger.setLog(""The level with number: '"" + levelNumber + ""' was build."", 2); levelNumber++; } "	0	1	0	0	1	0
private RetainedItemData getRetainedTopicID(Connection connection, String destination) throws SQLException { PreparedStatement preparedStatementForMetadataSelect = null; RetainedItemData itemData = null; Context contextRead = MetricManager.timer(Level.INFO, MetricsConstants.DB_READ).start(); try { preparedStatementForMetadataSelect = connection .prepareStatement(RDBMSConstants.PS_SELECT_RETAINED_MESSAGE_ID); preparedStatementForMetadataSelect.setString(1, destination); ResultSet results = preparedStatementForMetadataSelect.executeQuery();  if (results.next()) { int topicID = results.getInt(RDBMSConstants.TOPIC_ID); long messageID = results.getLong(RDBMSConstants.MESSAGE_ID); itemData = new RetainedItemData(topicID, messageID); } } finally { contextRead.stop(); close(preparedStatementForMetadataSelect, RDBMSConstants.TASK_STORING_RETAINED_MESSAGE_PARTS); close(preparedStatementForMetadataSelect, RDBMSConstants.TASK_RETRIEVING_RETAINED_TOPIC_ID); }  return itemData; } 	0	1	1	0	0	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); overridePendingTransition(R.anim.slide_activity_up, R.anim.activity_stay); setContentView(R.layout.activity_create_post); getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE|WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE); attachedPhoto = (ImageView) findViewById(R.id.editPostIncludedImageView); cameraButton = (ImageButton) findViewById(R.id.cameraButton); sendButton = (ImageButton) findViewById(R.id.sendButton); setActionBarTitle(""Posting to "" + Reverb.getInstance().getRegionManager().getCurrentRegion().getName()); super.setupUIBasedOnAnonymity(Reverb.getInstance().isAnonymous()); } "	0	1	0	0	1	0
"private float getRating(float rating) { myRating = rating; SQLiteDatabase myDB = helper.getReadableDatabase(); String strFilter = ""_id="" + id; ContentValues args = new ContentValues(); args.put(LocalDBHelper.COL_RATING, myRating); myDB.update(helper.RATING_TABLE_NAME, args, strFilter, null); helper.close(); return myRating; } "	0	1	0	0	1	0
@Test public void queueSizeIsReportedCorrectly() { taskStore.save(getTask(42L)); taskStore.save(getTask(43L)); assertEquals(2, store.resolveFor(PUBLISHER, new Date()).get().queueSize()); } 	0	1	0	0	1	0
private MethodInvocationObject recurseDelegations(MethodInvocationObject methodInvocation, SystemObject system) { MethodInvocationObject delegation; if((delegation = system.containsDelegate(methodInvocation)) != null && system.getClassObject(delegation.getOriginClassName()) != null) return recurseDelegations(delegation, system); else return methodInvocation; } 	1	1	0	0	0	0
"private String requestingMeal(String request, PartialOrder order) { order.setTransactionPhase(TransactionPhase.PROVIDING_ADDRESS); if (request.equalsIgnoreCase(""MEAL"")) { return ""Please provide your address or CANCEL to quit""; } else { return ""I don't understand that, please say MEAL to request a meal.""; } } "	0	1	0	0	1	0
"private static int parseVersionComponent(String[] versionComponents, int componentIndex) throws NumberFormatException { if (componentIndex < versionComponents.length) { String component = versionComponents[componentIndex].trim().toLowerCase(); if (component.length() > 0) { if (component.startsWith(""rc"") || component.startsWith(""ms"")) { return parsePrereleaseVersionString(component); } else { return Integer.parseInt(component); } } }  return 0; } "	0	1	0	0	1	0
"@Override public void onUnPublish () { logger.info(""Stop recording: entry Id ["" + entryId + ""], asset Id ["" + assetId + ""]"");  //If the current live asset being unpublished is the recording anchor - send cancelReplace call KalturaLiveAsset liveAsset = liveManager.getLiveAssetById(entryId, assetId); if (liveAsset.tags.contains(""recording_anchor"")) { liveManager.cancelReplace(entryId); }  this.stopRecording(); } "	0	1	1	1	0	0
public static ContentValues asContentValues(Track track) { final ContentValues contentValues = new ContentValues();  contentValues.put(TableInfo.COLUMN_PLAYER_PACKAGE_NAME, track.getPlayerPackageName()); contentValues.put(TableInfo.COLUMN_TRACK, track.getTrack()); contentValues.put(TableInfo.COLUMN_ARTIST, track.getArtist()); contentValues.put(TableInfo.COLUMN_ALBUM, track.getAlbum()); contentValues.put(TableInfo.COLUMN_DURATION, track.getDurationInMillis()); contentValues.put(TableInfo.COLUMN_TIMESTAMP, track.getTimestamp()); contentValues.put(TableInfo.COLUMN_STATE, track.getState()); contentValues.put(TableInfo.COLUMN_STATE_TIMESTAMP, track.getStateTimestamp());  return contentValues; } 	0	1	1	1	0	0
@EventHandler(priority = EventPriority.LOWEST) public void onPlayerTeleport(PlayerTeleportEvent event) { if (event.isCancelled()) return;  // pass event to games for (Game game : games) { game.onPlayerTeleport(event); } } 	0	1	0	0	1	0
@EventHandler(priority = EventPriority.LOWEST) public void onPlayerGameModeChange(PlayerGameModeChangeEvent event) { if (event.isCancelled()) return;  // pass event to games for (Game game : games) { game.onPlayerGameModeChange(event); } } 	0	1	0	0	1	0
@EventHandler(priority = EventPriority.HIGHEST) public void onEntityDeath(EntityDeathEvent event) { if (!(event.getEntity() instanceof Player)) return;  // pass event to games for (Game game : games) { game.onPlayerDeath((Player) event.getEntity()); } } 	0	1	0	0	1	0
@EventHandler(priority = EventPriority.LOWEST) public void onEntityExplode(EntityExplodeEvent event) { if (event.isCancelled()) return;  // pass event to games for (Game game : games) { game.onEntityExplode(event); } } 	0	1	0	0	1	0
@EventHandler(priority = EventPriority.HIGHEST) public void onFoodLevelChange(FoodLevelChangeEvent event) { if (event.isCancelled() || !(event.getEntity() instanceof Player)) return;  // pass event to games for (Game game : games) { game.onFoodLevelChange(event); } } 	0	1	0	0	1	0
@EventHandler public void onPlayerQuit(PlayerQuitEvent event) { // pass event to games for (Game game : games) { game.onPlayerQuit(event); } } 	0	1	0	0	1	0
"public static int getVenuesWifiNetworkId(@NonNull Context context) { final WifiManager wifiManager = (WifiManager)context.getApplicationContext() .getSystemService(Context.WIFI_SERVICE); if (!wifiManager.isWifiEnabled()) { wifiManager.setWifiEnabled(true); } final List<WifiConfiguration> configuredNetworks = wifiManager.getConfiguredNetworks(); if (configuredNetworks != null) { for (WifiConfiguration config : configuredNetworks) { if (config.SSID.equals(SSID)) { Log.i(TAG, ""Venue's wifi network already configured.""); return config.networkId; } } }  // if the network could not be found, configure it. WifiConfiguration conferenceConfig = new WifiConfiguration(); conferenceConfig.SSID = SSID; conferenceConfig.preSharedKey = PASSKEY;  final int networkId = wifiManager.addNetwork(conferenceConfig); if (networkId != -1) { wifiManager.saveConfiguration(); } else { Log.i(TAG, ""Venue's wifi network could not be configured.""); }  return networkId; } "	1	1	0	1	0	0
@Transactional public Page<Abnormal> getAbnormalsPagingByFilter(Filter filter,Integer page,Integer size,String mode,String header) { try { User user = userService.getUserByJWT(header); Specification<Abnormal> specA = filterIsLike(filter, user); Specification<Abnormal> specB = userIs(user); return abnormalRepository.findAll(where(specA).and(specB), new PageRequest(page, size)); }catch(Exception e){ e.printStackTrace(); throw new RuntimeException(e); } } 	0	1	0	0	1	0
@Override public boolean equals(Object obj) { if (obj instanceof Emotion) { Emotion em = (Emotion) obj; return (em.name.equals(this.name) && Double.compare(em.intensity, this.intensity) == 0); } return false; } 	0	1	0	1	0	0
"@Override public void CalcTiffheader() { String tif_definition = """"; ConfigProjects cp = null; try { cp = new ConfigProjects(this.prozessVorlage.getProjekt().getTitel()); } catch (IOException e) { Helper.setFehlerMeldung(""IOException"", e.getMessage()); return; }  tif_definition = cp.getParamString(""tifheader."" + this.docType.toLowerCase(), ""blabla"");  /* * -------------------------------- evtuelle Ersetzungen -------------------------------- */ tif_definition = tif_definition.replaceAll(""\\[\\["", ""<""); tif_definition = tif_definition.replaceAll(""\\]\\]"", "">"");  /* * -------------------------------- Documentname ist im allgemeinen = Prozesstitel -------------------------------- */ this.tifHeader_documentname = this.prozessKopie.getTitel(); this.tifHeader_imagedescription = """"; /* * -------------------------------- Imagedescription -------------------------------- */ StringTokenizer tokenizer = new StringTokenizer(tif_definition, ""+""); /* jetzt den Tiffheader parsen */ while (tokenizer.hasMoreTokens()) { String myString = tokenizer.nextToken(); /* * wenn der String mit ' anfängt und mit ' endet, dann den Inhalt so übernehmen */ if (myString.startsWith(""'"") && myString.endsWith(""'"") && myString.length() > 2) { this.tifHeader_imagedescription += myString.substring(1, myString.length() - 1); } else if (myString.equals(""$Doctype"")) {  this.tifHeader_imagedescription += this.docType; } else { /* andernfalls den string als Feldnamen auswerten */ for (Iterator<AdditionalField> it2 = this.additionalFields.iterator(); it2.hasNext();) { AdditionalField myField = it2.next();  /* * wenn es das ATS oder TSL-Feld ist, dann den berechneten atstsl einsetzen, sofern noch nicht vorhanden */ if ((myField.getTitel().equals(""ATS"") || myField.getTitel().equals(""TSL"")) && myField.getShowDependingOnDoctype() && (myField.getWert() == null || myField.getWert().equals(""""))) { myField.setWert(this.atstsl); }  /* den Inhalt zum Titel hinzufügen */ if (myField.getTitel().equals(myString) && myField.getShowDependingOnDoctype() && myField.getWert() != null) { this.tifHeader_imagedescription += CalcProzesstitelCheck(myField.getTitel(), myField.getWert()); } } } // } } } "	0	1	0	0	1	0
"protected QueryInput prepareInput(String path, String cost_mode, String cost_metric, List<String> endpoints_source, List<String> endpoints_destination) { //TODO QueryInputBuilder queryInputBuilder = new QueryInputBuilder();  //set request EndpointcostRequestBuilder endpointcostRequestBuilder = new EndpointcostRequestBuilder(); EndpointcostParamsBuilder endpointcostParamsBuilder = new EndpointcostParamsBuilder();  CostTypeBuilder costTypeBuilder = new CostTypeBuilder(); costTypeBuilder.setCostMetric(new CostMetric(cost_metric)); costTypeBuilder.setCostMode(cost_mode);  EndpointFilterBuilder endpointFilterBuilder = new EndpointFilterBuilder();  List<Source> sources = new ArrayList<Source>(); List<Destination> destinations = new ArrayList<Destination>();  for(String source : endpoints_source){ SourceBuilder sourceBuilder = new SourceBuilder(); String[] tmp= source.split("":""); Ipv4Builder ipv4 = new Ipv4Builder(); Ipv6Builder ipv6 = new Ipv6Builder(); if(tmp[0].equals(""ipv4"")){ ipv4.setIpv4(new Ipv4Address(tmp[1])); sourceBuilder.setAddress(ipv4.build()); }else if(tmp[0].equals(""ipv6"")){ ipv6.setIpv6(new Ipv6Address(tmp[1])); sourceBuilder.setAddress(ipv6.build()); } sources.add(sourceBuilder.build()); } for(String destination : endpoints_destination){ DestinationBuilder destinationBuilder = new DestinationBuilder(); String[] tmp= destination.split("":""); Ipv4Builder ipv4 = new Ipv4Builder(); Ipv6Builder ipv6 = new Ipv6Builder(); if(tmp[0].equals(""ipv4"")){ ipv4.setIpv4(new Ipv4Address(tmp[1])); destinationBuilder.setAddress(ipv4.build()); }else if(tmp[0].equals(""ipv4"")){ ipv6.setIpv6(new Ipv6Address(tmp[1])); destinationBuilder.setAddress(ipv6.build()); }else return null; destinations.add(destinationBuilder.build()); } endpointFilterBuilder.setSource(sources); endpointFilterBuilder.setDestination(destinations); EndpointFilterDataBuilder endpointFilterDataBuilder = new EndpointFilterDataBuilder(); endpointFilterDataBuilder.setEndpointFilter(endpointFilterBuilder.build());  endpointcostParamsBuilder.setCostType(costTypeBuilder.build()); endpointcostParamsBuilder.setFilter(endpointFilterDataBuilder.build()); endpointcostRequestBuilder.setEndpointcostParams(endpointcostParamsBuilder.build());  //create servicereference by getting contexttag from resourcepool ReadOnlyTransaction rtx = m_dataBroker.newReadOnlyTransaction(); InstanceIdentifier<ContextTag> ctagIID = getResourceByPath(path, rtx); if(ctagIID == null){ return null; }  queryInputBuilder.setRequest(endpointcostRequestBuilder.build()); queryInputBuilder.setServiceReference(ctagIID); queryInputBuilder.setType(ResourceTypeEndpointcost.class); return queryInputBuilder.build(); } "	0	1	0	1	0	0
"@Override public void run() { log.info(""Running thread with simulation moving"");  // Загрузка структуры здания BIM ClassLoader thisClassLoader = Moving.class.getClassLoader(); BIMLoader bimLoader = new BIMLoader(thisClassLoader.getResourceAsStream(""simple-room.json""), new BIM());  LinkedHashMap<Double, ArrayList<DevcHelper>> fdsData = ReadFDSOutput .readDevc(""res/scenarios/UdSU_c6s1v1_devc"" + "".csv"");  BIMExt bim = new BIMExt(bimLoader.getBim()); Traffic traffic = new Traffic(bim);  // Количество людей в здании, до эвакуации double nop = bim.getNumOfPeople(); log.info(""Number of people in Building: {}"", nop); // Максимальное кол-во проходов по циклу (Для избежания зацикливания) int acceptRepeat = 500; double timeModel = 0.0; // Текущее время моделирования эвакуации, c double time; // Интервал моделирования эвакуации, c double previousFdsTime = 0.0;  for (int i = 0; i < acceptRepeat; i++) { // for (Map.Entry<Double, ArrayList<DevcHelper>> d : fdsData.entrySet()) { // double fdsTime = d.getKey(); // if (fdsTime == 0.0) continue;  // time = fdsTime - previousFdsTime; // previousFdsTime = fdsTime; // timeModel += time;  time = 1; int balance = traffic.footTraffic(time);  if (balance < 0) { timeModel += balance * (-1); break; } else timeModel += time;  log.info(""In progress: number of people in Safety zone: {}, simulation time: {}"", bim.getSafetyZone().getNumOfPeople(), timeModel);  //try { sleep(500L); } catch (InterruptedException e) {e.printStackTrace();} }  log.info(""Successful finish simulation. Total: number of people in Safety zone: {} of {}, simulation time: {}"", bim.getSafetyZone().getNumOfPeople(), nop, timeModel);  } "	0	1	0	0	1	0
@Override public AttributeFlow mapToDatabaseEntity(Attribute attribute) { if (attribute == null) { return null; }  AttributeFlow attributeFlow = new AttributeFlow(); attributeFlow.setCode(attribute.getCode()); attributeFlow.setUId(attribute.getUId()); attributeFlow.setName(attribute.getName()); attributeFlow.setDisplayName(attribute.getDisplayName()); attributeFlow.setCreated(attribute.getCreated()); attributeFlow.setLastUpdated(attribute.getLastUpdated()); attributeFlow.setValueType(attribute.getValueType());  return attributeFlow; } 	0	1	0	0	1	0
"private DataRecord generateDataRecord(SQLParseResult parameter) { Table table = mTables.get(parameter.getTablename()); ArrayList<String> attributeNames = table.getAttributeNames(); ArrayList<DataType> attributeTypes = table.getAttributeTypes(); ArrayList<Integer> orderIndex = new ArrayList<>(); if (parameter.getAttributeNames().size() != attributeNames.size()) { System.out.println(""Input data size not match!""); System.out.println(""Found "" + parameter.getAttributeNames().size()); System.out.println(""Expect "" + attributeNames.size()); return null; } if (parameter.getCustomOrder()) { for (String attrName : attributeNames) { int index = parameter.getAttributeNames().indexOf(attrName); if (index == -1) { System.out.println(""Attribute "" + attrName + "" not found in input data""); return null; } orderIndex.add(index); } } else { for (int i = 0; i < attributeNames.size(); ++i) { orderIndex.add(i); } } DataRecord dataRecord = new DataRecord(); for (int index : orderIndex) { String block = parameter.getBlocks().get(index); if (attributeTypes.get(index).getType() == DataTypeIdentifier.INT) { if (!DataChecker.isValidInteger(block)) { System.out.println(""Error input type (INT expected): "" + block); return null; } dataRecord.append(block); } else { String varcharPart = block.substring(1, block.length() - 1); int lengthLimit = attributeTypes.get(index).getLimit(); if (!DataChecker.isValidVarChar(varcharPart, lengthLimit)) { System.out.println(""Error input type (VARCHAR("" + lengthLimit + "") expected)"" + varcharPart); return null; } dataRecord.append(block); } } return dataRecord; } "	0	1	0	0	1	0
"public void ok(){ activate(); String shellText = new DefaultShell().getText(); Button button = new PushButton(""OK""); button.click();  new WaitWhile(new ShellWithTextIsActive(shellText), TimePeriod.LONG); new WaitWhile(new JobIsRunning(), TimePeriod.LONG); } "	0	1	0	0	1	0
"private void createPipesWindows() { do { inPipe = Paths.get(""\\\\.\\pipe\\amz-aws-kpl-in-pipe-"" + uuid8Chars()).toFile(); } while (inPipe.exists());  do { outPipe = Paths.get(""\\\\.\\pipe\\amz-aws-kpl-out-pipe-"" + uuid8Chars()).toFile(); } while (inPipe.exists()); } "	0	1	0	1	0	0
"@Override public void bindView(View view, Context context, Cursor cursor) { CommonPersonObject personinlist = commonRepository.readAllcommonforCursorAdapter(cursor); CommonPersonObjectClient pClient = new CommonPersonObjectClient(personinlist.getCaseId(), personinlist.getDetails(), personinlist.getDetails().get(""FWHOHFNAME"")); pClient.setColumnmaps(personinlist.getColumnmaps()); listItemProvider.getView(pClient, view);  } "	1	1	0	0	0	0
"private void doResponse(DatabaseWrapper db, ProcessedMessage processedMsg, String channelName, String destinationChannelName, Channel destinationChannel, String user, UserLevel ul, MessagePriority priority, boolean internal) { String message = processedMsg.getResponse(); String command = processedMsg.getCommandName();  // Do script (processedMsg.getResponse is the script path) if (processedMsg.isScript()) { boolean success = CommandScriptProcessor.process(message, db, command, processedMsg.getArgs(), channelName, destinationChannelName, user, ul); if (!success) { return; } } // Send message else { MessageOut messageOut = new MessageOut(message, priority); if (internal) { new InternalMessageSender(destinationChannelName.replace(InternalMessageSender.DESTINATION_PREFIX, """"), messageOut.getMessage()).sendMessage(); } // If queue rejects message because it's too full, return else if (!APIChannel.in(destinationChannelName) || !destinationChannel.sendQueue.add(messageOut)) { return; } }  // Increment count Command.incrementCount(db, command);  // Skip cooldowns if bot channel or internal if (inBotChannel || (destinationChannelName.equals(APIBot.getBot().getUserName())) || internal) { return; }  // Handles command cooldowns int commandCooldown = channel.getConfig().getCommandCooldown(); if (commandCooldown > 0) { destinationChannel.commandCooldownSet.add(command, commandCooldown); } // Handles user cooldowns int userCooldown = ChannelConfigHelper.getCooldown(channel.getConfig(), ul); if (userCooldown > 0) { destinationChannel.userCooldownSet.add(user, userCooldown); } } "	0	1	0	0	1	0
@Test public void testDestroySmallBubble() { when(circle.getRadius()).thenReturn(9.0); bubble.splitBubble(); verify(circle).destroy(); } 	1	1	0	0	0	0
public void reshape(GLAutoDrawable glautodrawable, int x, int y, int viewportWidth, int viewportHeight) { GL2 gl = glautodrawable.getGL().getGL2();  viewportX = viewportWidth; viewportY = viewportHeight; zoomX = viewportX / this.width; zoomY = viewportY / this.height;  if (keepAspectRatio) { zoomX = zoomY = Math.min(zoomX, zoomY); }  gl.glViewport(x, y, viewportWidth, viewportHeight); gl.glRasterPos2f(-zoomX*(this.width/viewportX), zoomY*(this.height/viewportY)); gl.glPixelZoom(zoomX, -zoomY); } 	1	1	0	1	0	0
@Test public void addTraining() throws InterruptedException { onView(withId(R.id.fab1)).check(matches(withEffectiveVisibility(INVISIBLE))); onView(matchFab()).perform(click()); onView(allOf(withId(R.id.fab1), hasSibling(matchFab()))).perform(click()); allowPermissionsIfNeeded(activityTestRule.getActivity(), ACCESS_FINE_LOCATION); clickActionBarItem(R.id.action_save, R.string.save); onView(isRoot()).perform(orientationLandscape(activityTestRule)); navigateUp(); onView(isRoot()).perform(orientationPortrait(activityTestRule)); pressBack(); pressBack(); } 	0	1	1	0	0	0
private void restoreFile(Path tempDirectory, Path destPath) throws IOException { Path fileName = destPath.getFileName(); Files.copy(Paths.get(tempDirectory.toString(), fileName.toString()), destPath); } 	0	1	0	0	1	0
public static <K,V> UtilCache<K, V> createUtilCache(String name, int sizeLimit, long expireTime, boolean useSoftReference) { String cacheName = name + getNextDefaultIndex(name); return storeCache(new UtilCache<K, V>(cacheName, sizeLimit, sizeLimit, expireTime, useSoftReference, name)); } 	1	1	0	1	0	0
"public static <K,V> UtilCache<K, V> createUtilCache(String name, boolean useSoftReference) { String cacheName = name + getNextDefaultIndex(name); return storeCache(new UtilCache<K, V>(cacheName, 0, 0, 0, useSoftReference, ""default"", name)); } "	0	1	0	1	0	0
"public static <K,V> UtilCache<K, V> createUtilCache(String name) { String cacheName = name + getNextDefaultIndex(name); return storeCache(new UtilCache<K, V>(cacheName, 0, 0, 0, false, ""default"", name)); } "	0	1	0	1	0	0
"public int start() throws BuildDriverException { //TODO check if configured buildNumber = -1; try { buildNumber = job.getNextBuildNumber(); job.build(false); } catch (IOException e) { throw new BuildDriverException(""Cannot start project build."", e); }  return buildNumber; } "	0	1	0	0	1	0
private void setResultContent(){ Intent resultIntent = new Intent(); mContent = mContentEditText.getText().toString(); resultIntent.putExtra(ARG_CONTENT,mContent); mFirebaseDatabaseHelper.updateBookAnnotation(mFirebaseAuth.getCurrentUser().getUid(), mFolderId, mBookId, mContent);  setResult(Activity.RESULT_OK, resultIntent); finish(); } 	0	1	1	0	0	0
"@Override public DataTransferObject execute() { FragmentActivity jeffery = MethodsFacade.SINGLETON.getContext(); if(data.getErrorMsg().length()!=0){ Toast.makeText(jeffery, data.getErrorMsg(), Toast.LENGTH_SHORT).show(); } else { try { Path path = (Path) Serializer.deserialize(data.getData()); ClientModel.SINGLETON.claimRoute(path); Toast.makeText(jeffery, ""Route Claimed"" + Poller.getInstance().getQueueIndex(), Toast.LENGTH_SHORT).show(); } catch(Exception e){ e.printStackTrace(); } }  return null; } "	0	1	0	0	1	0
"@Override public Integer call() throws Exception { if (!force && outputDirectory.exists()) { throw new SpaghettiCliException(""Output directory exists: "" + outputDirectory); }  ModuleConfiguration config = parseConfig(); FileUtils.deleteDirectory(outputDirectory); FileUtils.forceMkdir(outputDirectory); StubGenerator generator = Generators.getService(StubGenerator.class, language); DefaultGeneratorParameters generatorParams = new DefaultGeneratorParameters(config, InternalGeneratorUtils.createHeader()); generator.generateStubs(generatorParams, outputDirectory); return 0; } "	0	1	0	0	1	0
"@Override public int compareTo(Version that) { if (that == null) return 1; String[] thisParts = this.getVersion().replace(snapshotSuffix, """").split(""\\.""); boolean thisIsSnapshot = this.isSnapshot(); String[] thatParts = that.getVersion().replace(snapshotSuffix, """").split(""\\.""); boolean thatIsSnapshot = that.isSnapshot(); int length = Math.max(thisParts.length, thatParts.length);  for (int i = 0; i < length; i++) { int thisPart = i < thisParts.length ? Integer.parseInt(thisParts[i]) : 0; int thatPart = i < thatParts.length ? Integer.parseInt(thatParts[i]) : 0; if (thisPart < thatPart) return -1; if (thisPart > thatPart) return 1; }  // Version numbers are equal, check if there is a snapshot involved if (thisIsSnapshot && !thatIsSnapshot) { // that is a release and thus a newer version return -1; } else if (!thisIsSnapshot && thatIsSnapshot) { // this is a release version and thus newer return 1;  // both versions are snapshots, check build number } else if (getBuildNumber() != null && !getBuildNumber().equals("""")) { if (Double.parseDouble(this.getBuildNumber()) > Double.parseDouble(that.getBuildNumber())) { // this build number is greater and thus this version is newer return 1; } else if (Double.parseDouble(this.getBuildNumber()) > Double.parseDouble(that.getBuildNumber())) { // that build number is greater and thus that version is newer return -1; }  // build numbers are equal, compare timestamps } else if (getTimestamp() != null && !getTimestamp().equals("""")) { if (Double.parseDouble(this.getTimestamp()) > Double.parseDouble(that.getTimestamp())) { // this timestamp is greater and thus version is newer return 1; } else if (Double.parseDouble(this.getTimestamp()) < Double.parseDouble(that.getTimestamp())) { // that timestamp is greater and thus version is newer return -1; } }  // We only arrive here if everything is equal so versions are equal too return 0; } "	0	1	0	1	0	0
"@Test public void testSort() { final MongoContainer<Customer> mc = builder().build();  final Object[] columns = { ""lastName"" }; final boolean[] ascending = { false };  mc.sort(columns, ascending);  Object id1 = mc.firstItemId(); assertEquals(""Carlson"", mc.getItem(id1).getBean().getLastName());  for (int i = 0; i < mc.size(); i++) { Object id = mc.getIdByIndex(i+1); id1 = mc.nextItemId(id1); assertEquals(id1, id); }  assertEquals(mc.getItem(mc.lastItemId()).getBean().getLastName(), ""Long"");  } "	0	1	0	0	1	0
"@Override void onBackendConnected() { this.xmppConnectionService.getNotificationService().setIsInForeground(true); updateConversationList();  Bundle extras = getIntent().getExtras(); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) { if (extras != null) { FirstStartTime = extras.getLong(""FirstStart""); Log.d(Config.LOGTAG, ""Get first start time from StartUI: "" + FirstStartTime); } } else { FirstStartTime = System.currentTimeMillis(); Log.d(Config.LOGTAG, ""Device is running Android < SDK 23, no restart required: "" + FirstStartTime); }  if (mPendingConferenceInvite != null) { mPendingConferenceInvite.execute(this); mToast = Toast.makeText(this, R.string.creating_conference,Toast.LENGTH_LONG); mToast.show(); mPendingConferenceInvite = null; }  if (FirstStartTime == 0) { Log.d(Config.LOGTAG, ""First start time: "" + FirstStartTime + "", restarting App""); //write first start timestamp to file String PREFS_NAME = ""FirstStart""; FirstStartTime = System.currentTimeMillis(); SharedPreferences FirstStart = getApplicationContext().getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE); SharedPreferences.Editor editor = FirstStart.edit(); editor.putLong(""FirstStart"", FirstStartTime); editor.commit(); // restart Intent intent = getBaseContext().getPackageManager().getLaunchIntentForPackage(getBaseContext().getPackageName()); intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); startActivity(intent); System.exit(0); }  if (xmppConnectionService.getAccounts().size() == 0) { if (mRedirected.compareAndSet(false, true)) { if (Config.X509_VERIFICATION) { startActivity(new Intent(this, ManageAccountActivity.class)); } else if (Config.MAGIC_CREATE_DOMAIN != null) { Log.d(Config.LOGTAG, ""First start time: "" + FirstStartTime); startActivity(new Intent(this, WelcomeActivity.class)); } else { startActivity(new Intent(this, EditAccountActivity.class)); } finish(); } } else if (conversationList.size() <= 0) { if (mRedirected.compareAndSet(false, true)) { Account pendingAccount = xmppConnectionService.getPendingAccount(); if (pendingAccount == null) { Intent intent = new Intent(this, StartConversationActivity.class); intent.putExtra(""init"", true); startActivity(intent); } else { switchToAccount(pendingAccount, true); } finish(); } } else if (getIntent() != null && VIEW_CONVERSATION.equals(getIntent().getType())) { clearPending(); handleViewConversationIntent(getIntent()); } else if (selectConversationByUuid(mOpenConverstaion)) { if (mPanelOpen) { showConversationsOverview(); } else { if (isConversationsOverviewHideable()) { openConversation(); updateActionBarTitle(true); } } this.mConversationFragment.reInit(getSelectedConversation()); mOpenConverstaion = null; } else if (getSelectedConversation() == null) { showConversationsOverview(); clearPending(); setSelectedConversation(conversationList.get(0)); this.mConversationFragment.reInit(getSelectedConversation()); } else { this.mConversationFragment.messageListAdapter.updatePreferences(); this.mConversationFragment.messagesView.invalidateViews(); this.mConversationFragment.setupIme(); }  if (xmppConnectionService.getAccounts().size() != 0) { AppUpdate(); }  if (this.mPostponedActivityResult != null) { this.onActivityResult(mPostponedActivityResult.first, RESULT_OK, mPostponedActivityResult.second); }  if (!forbidProcessingPendings) { for (Iterator<Uri> i = mPendingImageUris.iterator(); i.hasNext(); i.remove()) { Uri foo = i.next(); attachImageToConversation(getSelectedConversation(), foo); }  for (Iterator<Uri> i = mPendingFileUris.iterator(); i.hasNext(); i.remove()) { attachFileToConversation(getSelectedConversation(), i.next()); }  if (mPendingGeoUri != null) { attachLocationToConversation(getSelectedConversation(), mPendingGeoUri); mPendingGeoUri = null; } } forbidProcessingPendings = false;  if (!ExceptionHelper.checkForCrash(this, this.xmppConnectionService)) { openBatteryOptimizationDialogIfNeeded(); } setIntent(new Intent()); } "	0	1	1	0	0	0
public Builder mergeFrom(com.github.horrorho.inflatabledonkey.protocol.CloudKit.Asset other) { if (other == com.github.horrorho.inflatabledonkey.protocol.CloudKit.Asset.getDefaultInstance()) return this; if (other.hasDsPrsID()) { bitField0_ |= 0x00000001; dsPrsID_ = other.dsPrsID_; onChanged(); } if (other.hasFileChecksum()) { setFileChecksum(other.getFileChecksum()); } if (other.hasSize()) { setSize(other.getSize()); } if (other.hasDownloadToken()) { bitField0_ |= 0x00000008; downloadToken_ = other.downloadToken_; onChanged(); } if (other.hasContentBaseURL()) { bitField0_ |= 0x00000010; contentBaseURL_ = other.contentBaseURL_; onChanged(); } if (other.hasDsid()) { bitField0_ |= 0x00000020; dsid_ = other.dsid_; onChanged(); } if (other.hasRecordId()) { mergeRecordId(other.getRecordId()); } if (other.hasData()) { setData(other.getData()); } if (other.hasFileSignature()) { setFileSignature(other.getFileSignature()); } if (other.hasDownloadTokenExpiration()) { setDownloadTokenExpiration(other.getDownloadTokenExpiration()); } this.mergeUnknownFields(other.getUnknownFields()); return this; } 	0	1	0	0	1	0
@Override public void onBindViewHolder(ViewHolder holder, int position) { super.onBindViewHolder(holder, position); Movie movie = getItem(position); Images.loadMovie(holder.mImageView, movie, Images.WIDTH_185); Images.fetch(holder.mImageView.getContext(), movie.getPosterPath(), Images.WIDTH_780); } 	1	1	0	0	0	0
"private void openForWriting() { initializeHelper();  boolean performRecreate = false; try { database = helper.getWritableDatabase(); } catch (RecreateDuringMigrationException recreate) { performRecreate = true; } catch (MigrationFailedException fail) { onError(fail.getMessage(), fail); onMigrationFailed(fail.oldVersion, fail.newVersion); } catch (RuntimeException e) { onError(""Failed to open database: "" + getName(), e); throw e; }  if (performRecreate) { recreate(); } } "	0	1	0	0	1	0
@Override protected void updateState(World worldIn, BlockPos pos, IBlockState state) { int priority = -1; worldIn.updateBlockTick(pos, this, this.getDelay(state), priority); } 	1	1	0	0	0	0
"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); mActivity = this; setContentView(R.layout.activity_nav_drawer2);  /* get views from xml */ mTextView1 = (TextView)findViewById(R.id.item1); Toolbar toolbar = (Toolbar)findViewById(R.id.toolbar); mDrawerLayout = (DrawerLayout)findViewById(R.id.drawer_layout);  /* setup toolbar */ setSupportActionBar(toolbar); getSupportActionBar().setDisplayHomeAsUpEnabled(true); getSupportActionBar().setHomeButtonEnabled(true); getSupportActionBar().setDisplayShowTitleEnabled(false); toolbar.setTitle(""Nav Drawer Example"");  final ActionBarDrawerToggle mDrawerToggle = new ActionBarDrawerToggle( this,  mDrawerLayout, toolbar, R.string.drawer_open_string, R.string.drawer_close_string){ @Override public void onDrawerOpened(View drawerView) { super.onDrawerOpened(drawerView); // Note that playNow() is used instead of playOn(), because NavigationDrawer is initially hidden. mTutorialHandler = TourGuide.init(mActivity).with(TourGuide.Technique.Click) .setPointer(new Pointer()) .setToolTip(new ToolTip().setTitle(null).setDescription(""hello world"")) .setOverlay(new Overlay().setBackgroundColor(Color.parseColor(""#66FF0000""))) .playNow(mTextView1); } }; mDrawerLayout.setDrawerListener(mDrawerToggle); mDrawerToggle.syncState();  /* setup clean up code */ mTextView1.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { mTutorialHandler.cleanUp(); mDrawerLayout.closeDrawers(); } });  final ViewTreeObserver viewTreeObserver = mTextView1.getViewTreeObserver(); viewTreeObserver.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() { @Override public void onGlobalLayout() { mTextView1.getViewTreeObserver().removeGlobalOnLayoutListener(this);// make sure this only run once mDrawerLayout.openDrawer(Gravity.LEFT); } }); } "	0	1	1	1	0	0
"private void handleDisappearingBall(Ball disappearingBall) { TupleTwo<Wall> walls = getClosestWalls(disappearingBall);  if (!isSpaceEmpty(walls)) { return; }  if (walls.t0 == level.getLeft() && walls.t1 == level.getRight() && !(level instanceof SurvivalLevel)) { level.onEvent(Level.Event.ALL_BALLS_GONE); level.stopTimer(); level.continueNextLevel(); dLog.info(""All balls gone"", DLog.Type.STATE); } else if (walls.t0 == level.getLeft()) { walls.t1.setOpen(true); } else if (walls.t1 == level.getLeft()) { walls.t0.setOpen(true); }  } "	0	1	0	1	0	0
"@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) { super.onMeasure(widthMeasureSpec, heightMeasureSpec); try { if (getTabCount() == 0) { return; } Field field = TabLayout.class.getDeclaredField(""mTabMinWidth""); field.setAccessible(true); field.set(this, (int) (getMeasuredWidth() / (float) getTabCount()) * 1.5f); } catch (Exception e) { e.printStackTrace(); } } "	1	1	0	1	0	0
"public static <E> String generateRestrictionsQuery(Criteria<E> criteria, StringJoiner restrictionJoiner, StringJoiner qJoiner, Map<String, Object> parameterMap){ if(criteria.getRestrictions().size() > 0) { RestrictionUtil.generateRestrictions(criteria, criteria.getRestrictions(), restrictionJoiner, qJoiner, parameterMap, 0); } if(restrictionJoiner.length() > 0) { if(qJoiner.length() > 0) { restrictionJoiner.add( "" ( ""+ qJoiner.toString() + "" ) ""); } return ""\nWHERE "" + restrictionJoiner.toString();  } else if(qJoiner.length() > 0) { return ""\nWHERE "" + qJoiner.toString(); } return """"; } "	0	1	0	0	1	0
public void onDeckClicked(int position, View view) { Context context = view.getContext(); Intent intent = new Intent(context, ExamActivity.class); intent.putExtra(context.getString(R.string.deck_data_key), dataHelper.getSingleDeck(position)); context.startActivity(intent); } 	0	1	1	1	0	0
"public String getNodeType(String customizationId, String id) { log.debug(""in getNodeType""); log.info(xdocHash.get(customizationId).toString()); return null;  } "	0	1	0	1	0	0
@Override public void run() { for (Map.Entry<Player, IRyeDragon> entry : dragonManager.getRiderDragons().entrySet()) { try { Entity ent = entry.getValue().getEntity(); if(ent.getPassenger == null || ent.getPassenger() != entry.getKey()){ ent.setPassenger(entry.getKey()); } } catch (Exception ignored) { } } } 	1	1	0	1	0	0
@Override ArrayList<EntityComponent> addComponents() { final ArrayList<EntityComponent> components = new ArrayList<EntityComponent>(); final EntityGraphics graphics = new PlayerGraphics(); final EntityPhysics physics = new EntityPhysics(graphics.getWidth() - 0.3f, graphics.getHeight() - 0.3f, BodyDef.BodyType.DynamicBody, 50, 0); components.add(graphics); components.add(physics); components.add(new EntityAI(new BehaviourTree(new TestNode()))); return components; } 	0	1	1	1	0	0
"private List<Vertex> newPurchOrders(Vertex salesOrder, List salesOrderLines) { List<Vertex> purchOrders = Lists.newArrayList(); Vertex purchOrder;  int numberOfVendors = config.getIntRangeConfigurationValue( new ArrayList<Float>(), ""PurchOrder"", ""numberOfVendors""); for (int i = 0; i < (numberOfVendors > salesOrderLines.size() ? salesOrderLines.size() : numberOfVendors); i++) { purchOrder = newPurchOrder(salesOrder, getNextEmployee()); purchOrders.add(purchOrder); }  return purchOrders; } "	0	1	0	1	0	0
"public List<WfTask> getTasks(User user, BatchPresentation batchPresentation) { if (batchPresentation.getClassPresentation() instanceof TaskObservableClassPresentation) { return taskListBuilder.getTasks(user.getActor(), batchPresentation); } if (!executorLogic.isAdministrator(user)) { throw new AuthorizationException(user + "" is not Administrator""); } Preconditions.checkNotNull(batchPresentation, ""batchPresentation""); Actor actor = user.getActor(); List<WfTask> result = Lists.newArrayList(); List<Task> tasks = new PresentationCompiler<Task>(batchPresentation).getBatch(CompilerParameters.createNonPaged()); for (Task task : tasks) { try { result.add(taskObjectFactory.create(task, actor, false, batchPresentation.getDynamicFieldsToDisplay(true))); } catch (Exception e) { log.error(""Unable to build "" + task, e); } } return result; } "	0	1	0	0	1	0
@Test public void testFromCopycatFloat() { org.apache.avro.Schema avroSchema = org.apache.avro.SchemaBuilder.builder().floatType(); assertNonRecordConversion(avroSchema, 12.2f, Schema.FLOAT32_SCHEMA, 12.2f); } 	0	1	0	0	1	0
"@Test public void testFromCopycatShort() { org.apache.avro.Schema avroSchema = org.apache.avro.SchemaBuilder.builder().intType(); avroSchema.addProp(""copycat_type"", ""int16""); assertNonRecordConversion(avroSchema, 12, Schema.INT16_SCHEMA, (short) 12); } "	0	1	0	0	1	0
"private void drawText(Graphics g, int height) { int health = 0; int attack = 0; int defense = 0; int armor = 0; int upkeep = 0; Font old = g.getFont(); //System.out.println(game.getCurrentType()); g.setFont(detailsFont); g.drawString(""Unit Details"", 10, height - 65); g.drawString(""Type: "", 30, height - 35); g.drawString(""Health: "", 30, height - 10); g.drawString(""Attack: "", 430, height - 35); g.drawString(""Defense: "", 430, height - 10); g.drawString(""Armor: "", 830, height - 35); g.drawString(""Upkeep: "", 830, height - 10); if (game.getSelectedUnit() != -1) { if (game.getCurrentType() == UnitEnum.EXPLORER) { g.drawString(""Explorer"", 130, height - 35); } if (game.getCurrentType() == UnitEnum.COLONIST) { g.drawString(""Colonist"", 130, height - 35); } if (game.getCurrentType() == UnitEnum.MELEE) { g.drawString(""Melee"", 130, height - 35); } if (game.getCurrentType() == UnitEnum.RANGED) { g.drawString(""Ranged"", 130, height - 35); } g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getHealth() + """", 130, height - 10); g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getAttackDamage() + """", 530, height - 35); g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getDefenseDamage() + """", 530, height - 10); g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getArmor() + """", 930, height - 35); g.drawString(game.getCurrentPlayer().getAllUnit().get(game.getSelectedUnit()).getUpkeep() + """", 930, height - 10); } g.setFont(old);  } "	0	1	0	1	0	0
"public void scan(Statement statement) { String text = statement.getText(); if (statement.isDirectCode()) { for (String s : keyWords) { if (!getFirstToken(text).equals(""."") && text.contains(s)) { count++; break; } } } } "	1	1	0	1	0	0
@Override public IAdhocTicket findTicketByBarcode(String findBarcode) { for (int i = 0; i < currentAdhocTickets.size(); i++) { if (currentAdhocTickets.get(i).getBarcode() ==  findBarcode) { return currentAdhocTickets.get(i); }  } return null;  } 	0	1	0	0	1	0
public boolean removeLibrary(long targetId) { for(Library lib:libraries) if(lib.getId()==targetId) return libraries.remove(lib); return false; } 	1	1	0	0	0	0
"@Override public void l(int level, int code, String message, Exception exception) { String logMessage = code + "" : "" + message; if(level == UMLog.DEBUG) { Log.d(LOGTAG,logMessage , exception); }else if(level == UMLog.INFO) { Log.i(LOGTAG, logMessage, exception); }else if(level == UMLog.CRITICAL) { Log.e(LOGTAG, logMessage, exception); }else if(level == UMLog.VERBOSE) { Log.v(LOGTAG, logMessage, exception); }else if(level == UMLog.ERROR) { Log.e(LOGTAG, logMessage, exception); } } "	0	1	0	0	1	0
"@Override public String toString() { String ret = """"; for(int i = 0; i < regValues.length; ++i) { ret += i + ""\t""; ret += regValues[i] + ""\t""; ret += sourceStations[i].getName() + ""\n""; } //		ret += 1 + ""\t"" + regValues[1] + ""\t"" + sourceStations[1].getName() + ""\n""; //		ret += 2 + ""\t"" + regValues[2] + ""\t"" + sourceStations[2].getName() + ""\n""; //		ret += 3 + ""\t"" + regValues[3] + ""\t"" + sourceStations[3].getName() + ""\n""; //		ret += 4 + ""\t"" + regValues[4] + ""\t"" + sourceStations[4].getName() + ""\n""; //		ret += 5 + ""\t"" + regValues[5] + ""\t"" + sourceStations[5].getName() + ""\n""; return ret; } "	1	1	0	0	0	0
"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { //System.out.println(""In MicrotaskServlet ""); if(request.getParameter(""workerId"").equals(""consentForm"")){ request.setAttribute(""workerId"", request.getParameter(""workerId"")); request.getRequestDispatcher(ThanksPage).include(request, response); storage = StorageStrategy.initializeSingleton(); storage.insertQuitReason(null, ""consentForm""); }else if(request.getParameter(""reason"")!=null){ request.setAttribute(""workerId"", request.getParameter(""workerId"")); this.workerId = request.getParameter(""workerId""); this.answer = mapAnswerValue(request.getParameter(""reason"")); //Restore data for next Request request.setAttribute(""workerId"",this.workerId);  //String subAction = request.getParameter(""subAction"");  storage = StorageStrategy.initializeSingleton(); Worker worker = storage.readExistingWorker(this.workerId); storage.insertQuitReason(worker, this.answer); request.getRequestDispatcher(ThanksPage).include(request, response); }   } "	0	1	0	0	1	0
"private void doUnhide() { Point translation = new Point(); List<Integer> slots = findHiddenObjects(objects(), null, translation); if (slots.isEmpty()) return;  EditorState originalState = new EditorState(this);  objects().setSelected(slots); objects().replaceSelectedObjectsWithCopies();  for (int slot : slots) { EdObject obj = objects().get(slot); obj.moveBy(null, translation); }  Command cmd = new CommandForGeneralChanges(this, originalState, new EditorState(this), ""unhide"", ""Unhide""); pushCommand(cmd); } "	0	1	0	0	1	0
private View getView() { LinearLayout v = new LinearLayout(this); v.setOrientation(LinearLayout.VERTICAL); // selecting table TextView est = new TextView(this); est.setText(getString(R.string.export_csv)); v.addView(est); // adding the table spinner tableSpin = new Spinner(this); tableSpin.setId(R.id.TABLESPIN_ID); v.addView(tableSpin); // Horizontal divider View ruler1 = new View(this); ruler1.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.black)); v.addView(ruler1, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 2)); // adding the filename field TextView fnLabel = new TextView(this); fnLabel.setText(getString(R.string.export_file_qualifier)); v.addView(fnLabel); filenameValField = new EditText(this); filenameValField.setId(R.id.FILENAMEVAL_ID); v.addView(filenameValField); // Horizontal divider View ruler3 = new View(this); ruler3.setBackgroundColor(ContextCompat.getColor(getApplicationContext(), R.color.black)); v.addView(ruler3, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 2)); // adding the export button Button button = new Button(this); button.setId(R.id.EXPORTBUTTON_ID); button.setText(getString(R.string.export_button)); button.setOnClickListener(new ButtonListener()); v.addView(button); // wrapping in a scroll view ScrollView scroll = new ScrollView(this); scroll.addView(v); return scroll; } 	0	1	0	0	1	0
"private String emailTokenValueMapper(final Object o) { String valueToStore; if (o == null) { valueToStore = """"; } else if (o instanceof String) { valueToStore = (String) o; } else if (o instanceof Date) { valueToStore = FULL_DATE_FORMAT.format((Date) o); } else if (o instanceof Number || o instanceof Boolean) { valueToStore = o.toString(); } else if (o instanceof Enum){ valueToStore = ((Enum) o).name(); } else if (o instanceof ExternalReference) { ExternalReference er = (ExternalReference) o; valueToStore = String.format(""<a href='%s'>%s</a>"", er.getTitle(), er.getUrl()) + ""\n""; } else if (o instanceof Collection) { List<String> sl = Lists.newArrayList();  for (Object i : (Collection) o) { String s = this.emailTokenValueMapper(i); if (s != null) { sl.add(s); } }  valueToStore = StringUtils.join(sl, "",""); } else { return null; } return valueToStore; } "	0	1	0	1	0	0
private final void drawLed() { final double SIZE = control.getPrefWidth() < control.getPrefHeight() ? control.getPrefWidth() : control.getPrefHeight(); final double WIDTH = SIZE; final double HEIGHT = SIZE;  bargraph.getChildren().clear();  final Shape IBOUNDS = new Rectangle(0, 0, WIDTH, HEIGHT); IBOUNDS.setOpacity(0.0); bargraph.getChildren().add(IBOUNDS);  if (control.getOrientation() == Orientation.VERTICAL) { VBox pane = new VBox(); pane.setSpacing(0); pane.setPadding(new Insets(0, 0, 0, 0)); for (int i = 0 ; i < control.getNoOfLeds() ; i++) { pane.getChildren().add(i, ledList.get(15 - i)); } bargraph.getChildren().add(pane); } else { HBox pane = new HBox(); pane.setSpacing(0); pane.setPadding(new Insets(0, 0, 0, 0)); for (int i = 0 ; i < control.getNoOfLeds() ; i++) { pane.getChildren().add(i, ledList.get(i)); } bargraph.getChildren().add(pane); } } 	0	1	0	0	1	0
public void recreateViewport() { if (viewer.embed.getValue()) return; if (viewport != null) viewport.dispose(); viewport = new Viewport(cp.name(), this); viewport.setUndecorated(fullScreen); desktop.setViewport(viewport); reconfigureViewport(); if ((cp.width > 0) && (cp.height > 0)) viewport.setVisible(true); desktop.requestFocusInWindow(); } 	0	1	0	0	1	0
"@Override public void onCreate(final Bundle savedInstanceState) { // TODO load position/etc? super.onCreate(savedInstanceState); url = getArguments().getString(""url""); html = getArguments().getString(""html""); } "	0	1	0	0	1	0
"@Override public void save(Properties props){ for(Keybind keybind : RockBottomAPI.KEYBIND_REGISTRY.getUnmodifiable().values()){ String name = keybind.getName().toString();  this.setProp(props, name, keybind.getKey()); this.setProp(props, name+""_is_mouse"", keybind.isMouse()); }  this.setProp(props, ""target_fps"", this.targetFps); this.setProp(props, ""autosave_interval"", this.autosaveIntervalSeconds);  this.setProp(props, ""text_speed"", this.textSpeed); this.setProp(props, ""scale_gui"", this.guiScale); this.setProp(props, ""scale_world"", this.renderScale); this.setProp(props, ""gui_color"", this.guiColor);  this.setProp(props, ""hardware_cursor"", this.hardwareCursor); this.setProp(props, ""cursor_infos"", this.cursorInfos); this.setProp(props, ""fullscreen"", this.fullscreen); this.setProp(props, ""vsync"", this.vsync); this.setProp(props, ""smooth_lighting"", this.smoothLighting);  this.setProp(props, ""last_server_ip"", this.lastServerIp); this.setProp(props, ""curr_locale"", this.currentLocale); } "	0	1	0	0	1	0
"public static void main(String[] args) throws Exception { if (args.length < 1) { System.out.println(""Supply configfile""); return; } EmsImportConfig.setConfigFileName(args[0]); EmsImporter emsImporter = new EmsImporter(EmsImportConfig.outputFilePath()); List<EmsConference> emsConferences = emsImporter.readAndCreateConferences(); emsConferences.forEach(emsImporter::readEmsAndSubmit); //emsImporter.readEmsData(""http://javazone.no/ems/server/events/3baa25d3-9cca-459a-90d7-9fc349209289/sessions""); //emsImporter.readEmsFromFile(""all.json""); } "	0	1	0	0	1	0
@Override public GroupMapReduce clone() throws CloneNotSupportedException { final GroupMapReduce clone = (GroupMapReduce) super.clone(); clone.traversal = this.traversal.clone(); return clone; } 	0	1	0	0	1	0
@Override void updateMoveAbility() { moveAbility.setRaiseIsAble(raiseIsAble()); moveAbility.setCallIsAble(moveValidator.callIsAble()); moveAbility.setCheckIsAble(moveValidator.checkIsAble(raisers.size())); poker.notifyMoveAbilityListeners(players.current().id(), moveAbility); } 	1	1	0	0	0	0
"@Test public void shouldtNotSaveFacilityWhenInValid() throws FacilityAlreadyFoundException { final ModelMap modelMap = new ModelMap(); final String facility = ""facility""; final String country = ""country""; final String region = ""region""; final String district = ""district""; final String province = ""province""; final String message = ""Facility already exists.""; final FacilityController spyFacilitiesController = spy(facilityController); doThrow(new FacilityAlreadyFoundException()).when(mockFacilityService).create(facility, country, region, district, province, StringUtils.EMPTY, StringUtils.EMPTY, StringUtils.EMPTY, StringUtils.EMPTY); when(mockMessageSource.getMessage(""facility_already_exists"", null, Locale.getDefault())).thenReturn(message);  final FacilityForm createFacilityForm = new FacilityForm(); createFacilityForm.setName(facility); createFacilityForm.setCountry(country); createFacilityForm.setRegion(region); createFacilityForm.setCountyDistrict(district); createFacilityForm.setStateProvince(province); createFacilityForm.setPhoneNumber(StringUtils.EMPTY); createFacilityForm.setAdditionalPhoneNumber1(StringUtils.EMPTY); createFacilityForm.setAdditionalPhoneNumber2(StringUtils.EMPTY); createFacilityForm.setAdditionalPhoneNumber3(StringUtils.EMPTY);  final HashMap<String, Object> map = new HashMap<String, Object>() {{ put(FACILITY_FORM, new Object()); put(Constants.COUNTRIES, new Object()); put(Constants.REGIONS, new Object()); put(Constants.PROVINCES, new Object()); put(Constants.DISTRICTS, new Object()); }};  final String result = spyFacilitiesController.create(createFacilityForm, mockBindingResult, modelMap);  final ArgumentCaptor<FieldError> captor = ArgumentCaptor.forClass(FieldError.class); verify(mockBindingResult).addError(captor.capture()); final FieldError actualFieldError = captor.getValue(); assertThat(result, is(equalTo(""facilities/new""))); assertThat(actualFieldError.getObjectName(), is(equalTo(FACILITY_FORM))); assertThat(actualFieldError.getField(), is(equalTo(""name""))); assertThat(actualFieldError.getDefaultMessage(), is(equalTo(message))); assertNotNull(modelMap.get(Constants.COUNTRIES)); assertNotNull(modelMap.get(Constants.REGIONS)); assertNotNull(modelMap.get(Constants.PROVINCES)); assertNotNull(modelMap.get(Constants.DISTRICTS)); } "	0	1	0	0	1	0
"public void setText(String text) {  if (text != null) { this.text = text; editText.setText(this.text); if (!text.equals("""")) activate(false); } } "	0	1	1	0	0	0
@NonNull protected View buildCustomView(@Nullable Bundle savedInstanceState) { final ScrollView root = new ScrollView(this); root.setPadding(10, 10, 10, 10); root.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)); root.setFocusable(true); root.setFocusableInTouchMode(true); root.addView(scrollable);  addViewToDialog(getMainView());  // Add an optional prompt for user comments View comment = getCommentLabel(); if(comment != null){ comment.setPadding(comment.getPaddingLeft(), PADDING, comment.getPaddingRight(), comment.getPaddingBottom()); addViewToDialog(comment); String savedComment = null; if (savedInstanceState != null) { savedComment = savedInstanceState.getString(STATE_COMMENT); } userCommentView = getCommentPrompt(savedComment); addViewToDialog(userCommentView); }  // Add an optional user email field View email = getEmailLabel(); if(email != null){ email.setPadding(email.getPaddingLeft(), PADDING, email.getPaddingRight(), email.getPaddingBottom()); addViewToDialog(email); String savedEmail = null; if (savedInstanceState != null) { savedEmail = savedInstanceState.getString(STATE_EMAIL); } userEmailView = getEmailPrompt(savedEmail); addViewToDialog(userEmailView); } return root; } 	0	1	0	0	1	0
@Override public void onSetup(final Context context, final Dispatcher dispatcher) { // Ensure that the dispatcher and the dispatcher type exist, and ensure that this setup // is for a true experience fragment.  If not, then abort, otherwise use the dispatcher // to establish the experience to run. super.onSetup(context, dispatcher); if (dispatcher == null || dispatcher.type == null || dispatcher.type.expType == null) return; String groupKey = dispatcher.groupKey; String roomKey = dispatcher.roomKey; ExpType expType = dispatcher.expType; mExperience = ExperienceManager.instance.getExperience(groupKey, roomKey, expType); if (mExperience == null) createExperience(context, getPlayers(dispatcher)); } 	1	1	0	1	0	0
"@Override public void execute(ExecutionContext executionContext) { Token token = executionContext.getToken(); Set<Token> arrivedTokens = Sets.newHashSet(token); Set<String> activeTokenNodeIds = Sets.newHashSet(); fillTokensInfo(executionContext.getProcess().getRootToken(), arrivedTokens, activeTokenNodeIds); List<Token> tokensToPop = Lists.newArrayList(); List<Transition> notPassedTransitions = Lists.newArrayList(); for (Transition transition : getArrivingTransitions()) { boolean transitionIsPassedByToken = false; for (Token arrivedToken : arrivedTokens) { if (Objects.equal(transition.getNodeId(), arrivedToken.getTransitionId()) || Objects.equal(transition.getNodeIdBackCompatibilityPre4_3_0(), arrivedToken.getTransitionId())) { transitionIsPassedByToken = true; tokensToPop.add(arrivedToken); break; } } if (!transitionIsPassedByToken) { notPassedTransitions.add(transition); } } if (getArrivingTransitions().size() > 1) { // #850 don't end root token token.end(executionContext, null); } if (notPassedTransitions.isEmpty()) { log.debug(""marking tokens as inactive "" + tokensToPop); for (Token arrivedToken : tokensToPop) { arrivedToken.setAbleToReactivateParent(false); } if (getArrivingTransitions().size() > 1 && token.getParent() != null) { Token parentToken = token.getParent(); log.debug(""passed with first parent "" + parentToken); leave(new ExecutionContext(executionContext.getProcessDefinition(), parentToken)); } else { log.debug(""passed with this "" + token); leave(executionContext); } } else { log.debug(""execution blocked due to waiting on "" + notPassedTransitions); boolean markProcessFailedExecutionStatus = false; for (Transition transition : notPassedTransitions) { if (!transitionCanBePassed(transition, activeTokenNodeIds)) { log.error(""blocking "" + executionContext.getProcess() + "" execution because "" + transition + "" will not be passed by tokens in nodes "" + activeTokenNodeIds); markProcessFailedExecutionStatus = true; } } if (markProcessFailedExecutionStatus) { executionContext.getProcess().setExecutionStatus(ExecutionStatus.FAILED); // TODO set process error = no token can activate this node } } } "	0	1	0	0	1	0
"private String getStreamName(String streamName) { String parts[] = streamName.split(""/""); if(parts.length > 1) return StringUtils.join(parts, '/', 1, parts.length); return """"; } "	0	1	0	0	1	0
"private void loadExtensionDescriptor(AbstractExtension extension, Element extensionElement) throws InvalidExtensionException { Node nameNode = getNode(extensionElement, ELEMENT_NAME); if (nameNode != null) { extension.setName(nameNode.getTextContent()); } Node categoryNode = getNode(extensionElement, ELEMENT_CATEGORY); if (nameNode != null) { extension.setCategory(categoryNode.getTextContent()); } Node summaryNode = getNode(extensionElement, ELEMENT_SUMMARY); if (summaryNode != null) { extension.setSummary(summaryNode.getTextContent()); } Node descriptionNode = getNode(extensionElement, ELEMENT_DESCRIPTION); if (descriptionNode != null) { extension.setDescription(descriptionNode.getTextContent()); } Node websiteNode = getNode(extensionElement, ELEMENT_WEBSITE); if (websiteNode != null) { extension.setWebsite(websiteNode.getTextContent()); }  // Licenses Node licensesNode = getNode(extensionElement, ELEMENT_LICENSES); if (licensesNode != null) { NodeList licenseNodeList = licensesNode.getChildNodes(); for (int i = 0; i < licenseNodeList.getLength(); ++i) { Node licenseNode = licenseNodeList.item(i);  if (licenseNode.getNodeName().equals(ELEMENT_LLICENSE)) { Node licenseNameNode = getNode(licenseNode, ELEMENT_LLNAME); Node licenceContentNode = getNode(licenseNode, ELEMENT_LLCONTENT);  String licenseName = licenseNameNode.getTextContent(); ExtensionLicense license = this.licenseManager.getLicense(licenseName); if (license == null) { try { license = new ExtensionLicense(licenseName, licenceContentNode != null ? IOUtils.readLines(new StringReader(licenceContentNode.getTextContent())) : null); } catch (IOException e) { // That should never happen throw new InvalidExtensionException(""Failed to write license content"", e); } }  extension.addLicense(license); } } }  // Authors Node authorsNode = getNode(extensionElement, ELEMENT_AUTHORS); if (authorsNode != null) { NodeList authors = authorsNode.getChildNodes(); for (int i = 0; i < authors.getLength(); ++i) { Node authorNode = authors.item(i);  if (authorNode.getNodeName().equals(ELEMENT_AAUTHOR)) { Node authorNameNode = getNode(authorNode, ELEMENT_AANAME); Node authorURLNode = getNode(authorNode, ELEMENT_AAURL);  String authorName = authorNameNode != null ? authorNameNode.getTextContent() : null; URL authorURL; if (authorURLNode != null) { try { authorURL = new URL(authorURLNode.getTextContent()); } catch (MalformedURLException e) { // That should never happen throw new InvalidExtensionException(""Malformed URL ["" + authorURLNode.getTextContent() + ""]"", e); } } else { authorURL = null; }  extension.addAuthor(new DefaultExtensionAuthor(authorName, authorURL)); } } }  // Features List<String> features = parseList(extensionElement, ELEMENT_FEATURES, ELEMENT_FFEATURE); if (features != null) { extension.setFeatures(features); }  // Scm extension.setScm(loadlScm(extensionElement));  // Issue Management extension.setIssueManagement(loadIssueManagement(extensionElement));  // Dependencies Node dependenciesNode = getNode(extensionElement, ELEMENT_DEPENDENCIES); if (dependenciesNode != null) { NodeList dependenciesNodeList = dependenciesNode.getChildNodes(); for (int i = 0; i < dependenciesNodeList.getLength(); ++i) { Node dependency = dependenciesNodeList.item(i);  if (dependency.getNodeName().equals(ELEMENT_DDEPENDENCY)) { Node dependencyIdNode = getNode(dependency, ELEMENT_ID); Node dependencyVersionNode = getNode(dependency, ELEMENT_VERSION);  extension.addDependency(new DefaultExtensionDependency(dependencyIdNode.getTextContent(), new DefaultVersionConstraint(dependencyVersionNode.getTextContent()), parseProperties((Element) dependency))); } } }  // Properties Map<String, Object> properties = parseProperties(extensionElement); if (properties != null) { extension.setProperties(properties); }  // Deprecated Install fields  Node enabledNode = getNode(extensionElement, ELEMENT_INSTALLED); if (enabledNode != null) { extension.putProperty(InstalledExtension.PKEY_INSTALLED, Boolean.valueOf(enabledNode.getTextContent())); }  // Deprecated Namespaces List<String> namespaces = parseList(extensionElement, ELEMENT_NAMESPACES, ELEMENT_NNAMESPACE); if (namespaces != null) { extension.putProperty(InstalledExtension.PKEY_NAMESPACES, namespaces); } } "	0	1	1	1	0	0
"public void addCard(String card) { for (Card existing : classCards) { if (existing.getName().equals(card)) { existing.setAmount("""" + Integer.parseInt(existing.getAmount() + 1)); return; } }  Card newCard = new Card(card, """" + 1); classCards.add(newCard); } "	1	1	0	1	0	0
"private void load(File projFile) { if (projFile == null) { return; } Document document = null; try { document = JDOMUtil.loadDocument(projFile); } catch (JDOMException ex) { } catch (IOException ex) { } Element projectElement = null; if (document != null) { Element root = document.getRootElement(); if (""project"".equals(root.getName())) { for (Object ch : root.getChildren(""component"")) { if (ch instanceof Element && ""MPSProject"".equals(((Element) ch).getAttributeValue(""name""))) { projectElement = (Element) ch; break; } } } } if (projectElement != null) { load(projFile, projectElement); } } "	0	1	1	0	0	0
"@PUT @Consumes(MediaType.APPLICATION_JSON) @Path(""/{serviceGroup}/{service}/{interf}"") public Response removingFromRegistry(@PathParam(""serviceGroup"") String serviceGroup, @PathParam(""service"") String service, @PathParam(""interf"") String interf, ServiceRegistryEntry entry) {  if (serviceGroup == null || service == null || interf == null || !entry.isValid()) { log.info(""ServiceRegistry:Query throws BadPayloadException""); throw new BadPayloadException(""Bad payload: service request form has missing/incomplete mandatory fields.""); }  //ArrowheadService will be empty in this case entry.setProvidedService(new ArrowheadService()); entry.getProvidedService().setServiceDefinition(service); entry.getProvidedService().setServiceGroup(serviceGroup); entry.getProvidedService().setInterfaces(new ArrayList<String>()); entry.getProvidedService().getInterfaces().add(interf);  boolean result;  try { result = ServiceRegistry.unRegister(entry); } catch (DnsException e) { return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build(); }  if (result) return Response.status(Response.Status.OK).build(); else return Response.status(Response.Status.NO_CONTENT).build(); } "	1	1	0	0	0	0
"private void deleteBatchesForIds(List<Long> ids, Collection<DownloadInfo> downloads) { for (DownloadInfo download : downloads) { if (ids.contains(download.batchId)) { deleteFileAndDatabaseRow(download); } }  String selection = TextUtils.join("", "", ids); String[] selectionArgs = {selection}; resolver.delete(Downloads.Impl.BATCH_CONTENT_URI, Downloads.Impl.Batches._ID + "" IN (?)"", selectionArgs); } "	0	1	1	0	0	0
final static protected void mapTriangleInterpolated(final Pair<AffineModel2D, double[][]> ai, final ImageProcessor source, final ImageProcessor target, final ByteProcessor targetOutside) {  final int w = target.getWidth() - 1; final int h = target.getHeight() - 1;  final double[][] pq = ai.b;  final double[] min = new double[2]; final double[] max = new double[2]; RenderTransformMesh.calculateTargetBoundingBox(pq, min, max);  final int minX = Math.max(0, Util.roundPos(min[0])); final int minY = Math.max(0, Util.roundPos(min[1])); final int maxX = Math.min(w, Util.roundPos(max[0])); final int maxY = Math.min(h, Util.roundPos(max[1]));  final double[] t = new double[2]; for (int y = minY; y <= maxY; ++y) { for (int x = minX; x <= maxX; ++x) { if (RenderTransformMesh.isInTargetTriangle(pq, t)) { t[0] = x; t[1] = y; try { ai.a.applyInverseInPlace(t); } catch (final Exception e) { // e.printStackTrace( System.err ); continue; } target.set(x, y, source.getPixelInterpolated(t[0], t[1])); targetOutside.set(x, y, 0xff); } } } } 	1	1	0	1	0	0
"public boolean validatePlayer(Player p) { if (p == null) return false; if (!p.isOnline()) return false; if (p.getGameMode() == GameMode.CREATIVE && Main.getInstance().getYAMLConfig().IgnoreCreative) return false; if (p.isOp() && Main.getInstance().getYAMLConfig().IgnoreOP)  return false; if (p.hasPermission(""thirst.ignore"") || p.hasPermission(""thirst.*""))  return false;  String world = p.getWorld().getName(); List<String> worlds = Arrays.asList(Main.getInstance().getYAMLConfig().DisabledWorlds); if (worlds != null && worlds.size() > 0) { if (worlds.contains(world)) return false; }  if (Main.getInstance().isWorldGaurdEnabled()) { for(ProtectedRegion region : WGBukkit.getRegionManager(p.getWorld()).getApplicableRegions(p.getLocation())) { if (region == null) continue; ArrayList<String> regions  = (ArrayList<String>) Arrays.asList(Main.getInstance().getYAMLConfig().DisabledRegions);  if (regions.contains(region)) return false; } } return true; } "	0	1	0	1	0	0
"private boolean hasKeepAliveForConnection() { String keepAlive = assertion.getKeepAlive(); if (NullChecker.isNullish(keepAlive)) { keepAlive = getKeepAliveProperty(); }  return NullChecker.isNotNullish(keepAlive) && (keepAlive.equalsIgnoreCase(""TRUE"") || keepAlive.equalsIgnoreCase(""T"")); } "	0	1	1	1	0	0
"public void applyIdentityBF(PeakList peaklist, JDXCompound identity, int rowId, double score, boolean bruteForce, boolean canTagAsRef) {  // Do not overrule the identity if marked as ""ref compound"" if (!bruteForce) { // Check if identity is available (no ""IS_REF"" using it) for (int i=0; i < peaklist.getNumberOfRows(); ++i) { PeakListRow a_pl_row = peaklist.getRows()[i]; if (a_pl_row.getPreferredPeakIdentity() != null && a_pl_row.getPreferredPeakIdentity().getName().equals(identity.getName())) { String isRefCompound = a_pl_row.getPreferredPeakIdentity().getPropertyValue(AlignedRowProps.PROPERTY_IS_REF); if (isRefCompound != null && isRefCompound.equals(AlignedRowProps.TRUE)) { // Not available: the identity cannot be touched return; } } } }  // If identity is available for change, feel free //CustomJDXSearchTask.applyIdentity(peaklist, identity, rowId, score, bruteForce, canTagAsRef); for (int i=0; i < peaklist.getNumberOfRows(); ++i) {  PeakListRow a_pl_row = peaklist.getRows()[i]; CustomJDXSearchTask.applyRowIdentity(a_pl_row, identity, rowId, score, bruteForce, canTagAsRef); progressItemNumber++; } } "	1	1	0	1	0	0
"public static Useable createManaPotion(Useable a) { //need to create effect Location l = new Location(-1,-1,0); a = new Useable(Assets.manapotion,l, ItemsEnum.USEABLE,""Potion"",""This heals 3 health"",null); return a; } "	0	1	0	1	0	0
private Collection<String> getReferenceRoutlets() { ProcessItem routeProcess = (ProcessItem) routeNode.getObject().getProperty().getItem(); String routeName = routeNode.getObject().getProperty().getDisplayName(); Collection<String> routelets = new HashSet<>(); try { exportAllReferenceRoutelets(routeName, routeProcess, routelets); } catch (InvocationTargetException e) { return new HashSet<>(); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } return routelets; } 	0	1	1	0	0	0
public void debug(String message, Object ... params) { if (isDebugEnabled()) { log.debug(prefix + String.format(message, params)); } } 	1	1	0	0	0	0
@JSMethod(uiThread = false) public void setInterval(@IntRange(from = 1) int funcId, @IntRange(from = 0) int interval) { if(mWXSDKInstance != null) { postOrHoldMessage(WXJSBridgeMsgType.MODULE_INTERVAL, funcId, interval, Integer.parseInt(mWXSDKInstance.getInstanceId())); } } 	1	1	0	0	0	0
"@Test public void shouldUpdateLastConsoleActivityOnConsoleLogPut() throws Exception { String content = ""Testing:""; request.setContent(content.getBytes()); JobIdentifier jobIdentifier = new JobIdentifier(""pipeline"", 10, ""label-10"", ""stage"", ""2"", ""build"", 103l); when(restfulService.findJob(""pipeline"", ""10"", ""stage"", ""2"", ""build"", 103l)).thenReturn(jobIdentifier); String path = ""cruise-output/console.log""; File artifactFile = new File(""junk""); when(consoleService.consoleLogFile(jobIdentifier)).thenReturn(artifactFile); when(consoleService.updateConsoleLog(eq(artifactFile), any(InputStream.class), any(ConsoleService.LineListener.class))).thenReturn(true); assertThat(((ResponseCodeView) artifactsController.putArtifact(""pipeline"", ""10"", ""stage"", ""2"", ""build"", 103l, path, ""agent-id"", request).getView()).getStatusCode(), is(HttpServletResponse.SC_OK)); verify(consoleActivityMonitor).consoleUpdatedFor(jobIdentifier); } "	0	1	1	0	0	0
"private void scanDir(File dir, int ignorePrefixLen, boolean inWhitelistedPath, boolean scanTimestampsOnly) throws IOException { String relativePath = (ignorePrefixLen > dir.getPath().length() ? """" : dir.getPath().substring(ignorePrefixLen)) + ""/""; if (File.separatorChar != '/') { // Fix scanning on Windows relativePath = relativePath.replace(File.separatorChar, '/'); } for (String blacklistedPath : blacklistedPathsToScan) { if (relativePath.equals(blacklistedPath)) { // Reached a blacklisted path -- stop scanning files and dirs return; } } boolean keepRecursing = false; if (!inWhitelistedPath) { // If not yet within a subtree of a whitelisted path, see if the current path is at least a prefix of // a whitelisted path, and if so, keep recursing until we hit a whitelisted path. for (String whitelistedPath : whitelistedPathsToScan) { if (relativePath.equals(whitelistedPath)) { // Reached a whitelisted path -- can start scanning directories and files from this point inWhitelistedPath = true; break; } else if (whitelistedPath.startsWith(relativePath)) { // In a path that is a prefix of a whitelisted path -- keep recursively scanning dirs // in case we can reach a whitelisted path. keepRecursing = true; } } } if (keepRecursing || inWhitelistedPath) { lastModified = Math.max(lastModified, dir.lastModified()); File[] subFiles = dir.listFiles(); for (final File subFile : subFiles) { if (subFile.isDirectory()) { // Recurse into subdirectory scanDir(subFile, ignorePrefixLen, inWhitelistedPath, scanTimestampsOnly); } else if (inWhitelistedPath && subFile.isFile()) { // Scan file scanFile(subFile, dir.getPath() + ""/"" + subFile.getName(), relativePath + subFile.getName(), scanTimestampsOnly); } } } } "	0	1	0	1	0	0
"private void extractRates(Element table) { int length = table.select(""tr"").size(); for (int i=0; i<length; i++) { Currency toCur = getCurrency(table, i); int unit = getUnit(table, i); double rate = getRate(table, i); double perRate = (unit > 0) ? (rate/unit) : rate;  rates.addAvailableCurrency(toCur); rates.setConversion(base, toCur, perRate);  log.info(toCur.getDisplayName() + "" : "" + unit + "" units @ "" + rate); } } "	1	1	0	1	0	0
public Settings filter(Predicate<String> predicate) { return new Settings(new FilteredMap(this.settings, predicate, null), secureSettings == null ? null : new PrefixedSecureSettings(secureSettings, UnaryOperator.identity(), predicate)); } 	0	1	1	0	0	0
"public static Result sort(String ids){ Logger.debug(""Ids: ""+ids); /* * Getting all ids of coupons and adding them to list * we are going to sort. */ String[] couponIds = ids.split("",""); List<Coupon> coupons = new ArrayList<Coupon>(); for(String id: couponIds){ long currentID = Long.valueOf(id); Coupon currentCoupon = Coupon.find(currentID); coupons.add(currentCoupon); }   DynamicForm df = Form.form().bindFromRequest(); String orderBy = df.data().get(""orderby"");  //Getting sort method. String parseMethod = df.data().get(""method""); int method = 0; if(parseMethod.equalsIgnoreCase(""ascending"")){ method = Coupon.SORT_ASCENDING; }else if(parseMethod.equalsIgnoreCase(""descending"")){ method = Coupon.SORT_DESCENDING; }else{ Logger.debug(""Method went wrong"");		}   Logger.debug(""Method: "" +method); List<Coupon> sorted;  if(orderBy.equalsIgnoreCase(""Category"")){ sorted = Coupon.sortByCategory(coupons, method); }else if(orderBy.equalsIgnoreCase(""Price"")){ sorted = Coupon.sortByPrice(coupons, method); }else if(orderBy.equalsIgnoreCase(""Date"")){ sorted = Coupon.sortByDate(coupons, method); }else{ Logger.error(""Wrong orderby type""); return TODO; } User current = Sesija.getCurrentUser(ctx()); return ok(index.render(current, sorted, Category.all())); } "	1	1	0	0	0	0
private void validateValues() { for (Field field : this.fields) { validateValue(field, getFieldValueFromObject(field, this.targetObject)); } } 	1	1	0	0	0	0
"public ApexClassCodeCoverageBean[] calculateAggregatedCodeCoverageUsingToolingAPI() { PartnerConnection connection = ConnectionHandler.getConnectionHandlerInstance().getConnection();  ApexClassCodeCoverageBean[] apexClassCodeCoverageBeans = null; String[] classesAsArray = null;  /* * Builder design pattern construct the test class array by building the * final array using simple objects(arrays) viz. array from Manifest * file and array from regex prefix */ // read class names from manifest files if (CommandLineArguments.getClassManifestFiles() != null) { LOG.debug("" Fetching apex classes from location : "" + CommandLineArguments.getClassManifestFiles()); classesAsArray = ApexClassFetcherUtils .fetchApexClassesFromManifestFiles(CommandLineArguments.getClassManifestFiles()); } // fetch matching class names based on regex if (CommandLineArguments.getSourceRegex() != null) { LOG.debug("" Fetching apex classes with regex : "" + CommandLineArguments.getSourceRegex()); classesAsArray = ApexClassFetcherUtils.fetchApexClassesBasedOnMultipleRegexes(connection, classesAsArray, CommandLineArguments.getSourceRegex()); } // Do not proceed if no class names are returned from both manifest // files and/or regexes if (classesAsArray != null && classesAsArray.length > 0) { String classArrayAsStringForQuery = processClassArrayForQuery(classesAsArray); String relativeServiceURL = ""/services/data/v"" + SUPPORTED_VERSION + ""/tooling""; // compute aggregated code coverage String soqlcc = QueryConstructor.getAggregatedCodeCoverage(classArrayAsStringForQuery);  JSONObject responseJsonObject = null; responseJsonObject = WebServiceInvoker.doGet(relativeServiceURL, soqlcc, OAuthTokenGenerator.getOrgToken()); LOG.debug(""responseJsonObject says "" + responseJsonObject + ""\n relativeServiceURL is "" + relativeServiceURL + ""\n soqlcc is "" + soqlcc); if (responseJsonObject != null) { apexClassCodeCoverageBeans = processJSONResponseAndConstructCodeCoverageBeans(connection, responseJsonObject); } if (apexClassCodeCoverageBeans == null) { ApexUnitUtils.shutDownWithErrMsg( ""Code coverage metrics not computed. Null object returned while processing the JSON response from the Tooling API""); } } else { ApexUnitUtils.shutDownWithErrMsg(""No/Invalid Apex source classes mentioned in manifest file and/or "" + ""regex pattern for ApexSourceClassPrefix didn't return any Apex source class names from the org""); } return apexClassCodeCoverageBeans; } "	0	1	1	0	0	0
public static ArrayList<Double> doubleVectorFromINDArray(INDArray values) { ArrayList<Double> result = new ArrayList<Double>(values.size(0)); for (int i = 0; i < values.size(0); i++) { result.add(values.getDouble(0,i)); } return result; } 	0	1	0	1	0	0
"@Test public void shouldReturnAdhrenceTrendPercentage() { String externalId = ""someExternalId""; String pillRegimenId = ""pillRegimenId""; int successCountThisWeek = 25; int scheduledDosageCount = 100; Mockito.when(pillReminderService.getPillRegimen(Mockito.anyString())).thenReturn(pillRegimenResponse); Mockito.when(pillRegimenResponse.getPillRegimenId()).thenReturn(pillRegimenId); Mockito.when(allDosageAdherenceLogs.findScheduledDosagesSuccessCount(pillRegimenId, dateTime.minusWeeks(4).toLocalDate(), dateTime.toLocalDate())).thenReturn(successCountThisWeek); PowerMockito.when(DosageUtil.getScheduledDosagesTotalCountForLastFourWeeks(Mockito.any(DateTime.class), Mockito.any(DateTime.class), Mockito.any(PillRegimenResponse.class))).thenReturn(scheduledDosageCount);  DailyReminderAdherenceTrendService dailyReminderAdherenceTrendService = new DailyReminderAdherenceTrendService(allDosageAdherenceLogs, pillReminderService, patientAlertService); assertEquals(0.25, dailyReminderAdherenceTrendService.getAdherencePercentage(externalId)); } "	0	1	0	1	1	0
@Test public void testParseFloat() throws Exception { Bytes b = Bytes.elasticByteBuffer(); float expected = 123; b.append(expected); b.flip(); Assert.assertEquals(expected,BytesUtil.parseDouble(b)); } 	0	1	0	1	1	0
"private  LocalDateTime getSortTimeStamp(String[] fields) throws ParseException { LocalDateTime tmpDate = null; LocalTime tmpTime = null; for (int i = 0; i < columns.length; i++) { if (ColumnType.getDateTypes().contains(columns[i].characteristic) && ((DateColumn) columns[i]).sortOnThisField()) { DateColumn dColumn = ((DateColumn) columns[i]); if (dColumn.getDateFormat().equals(""Excel epoch"")) { return DateUtils.t1900toLocalDateTime(fields[i]); } if (dColumn.characteristic == ColumnType.DATEandTIME) { return DateUtils.parseDate(fields[i], dColumn.getDateFormat()); } if (dColumn.characteristic == ColumnType.DATE) { tmpDate = DateUtils.parseDate(fields[i], dColumn.getDateFormat()); if (tmpTime != null) { return DateUtils.addLocalTimeToLocalDateTime(tmpTime, tmpDate); } } if (dColumn.characteristic == ColumnType.TIME) { tmpTime = DateUtils.parseTime(fields[i], dColumn.getDateFormat()); if (tmpDate != null) { return DateUtils.addLocalTimeToLocalDateTime(tmpTime, tmpDate); } } } } return tmpDate; } "	0	1	0	1	1	0
"public List<Node> getTaggedObjects(Long tagId) { List<Node> taggedObjs = new ArrayList(); String sql = String.format(""select v_in from flatedge where v_out = %s and label = 'tags'"", tagId); Handle h = getHandle();  List<Map<String, Object>> result = h.createQuery(sql).list(); for (Map<String, Object> r : result) { Long objId = (Long) r.get(""v_in"");  sql = String.format(""select * from work where id = %s"", objId); Node node = h.createQuery(sql).map(Node.class).first(); if (node != null) { taggedObjs.add(node); } }  return taggedObjs; } "	0	1	0	1	1	0
"@Test() public void testPauseJobGroupPausesNewJob() throws Exception {  final String jobGroup = ""PauseJobGroupPausesNewJobGroup"";  JobDetail job1 = buildJob(""PauseJobGroupPausesNewJob"", jobGroup); jobStore.storeJob(job1, false); jobStore.pauseJobs(GroupMatcher.jobGroupEquals(jobGroup));  JobDetail job2 = buildJob(""PauseJobGroupPausesNewJob2"", jobGroup); jobStore.storeJob(job2, false);  OperableTrigger tr = buildTrigger( ""PauseJobGroupPausesNewJobTrigger"", ""PauseJobGroupPausesNewJobTriggerGroup"", job2, new Date().getTime());  jobStore.storeTrigger(tr, false); assertEquals(Trigger.TriggerState.PAUSED, jobStore.getTriggerState(tr.getKey())); } "	0	1	0	1	1	0
"public static String asDqlValue(Object value) { String dqlValue = null; try { Class<?> rawClass = value.getClass(); if (Collection.class.isAssignableFrom(rawClass)) { throw new IllegalAccessException(Message.E_COLLECTION_FIELD.get()); } if (value != null) { if (rawClass.isAssignableFrom(boolean.class)) { dqlValue = Boolean.class.cast(value).booleanValue() ? ""T"" : ""F""; } else if (rawClass.isAssignableFrom(int.class)) { dqlValue = Integer.class.cast(value).toString(); } else if (rawClass.isAssignableFrom(double.class)) { dqlValue = Double.class.cast(value).toString(); } else if (rawClass.isAssignableFrom(Date.class)) { String stringDate = dqlDateFmt.format(Date.class.cast(value)); dqlValue = ""DATE('"" + stringDate + ""', 'yyyy/mm/dd hh:mi:ss')""; } else { dqlValue = ""'"" + dqlEscaper.escape(String.class.cast(value).toString()) + ""'""; } } //		} catch (ClassCastException e) { } catch (IllegalAccessException e) { throw new IllegalStateException(e); } return dqlValue; } "	0	1	0	1	1	0
"private void draw() { back.erase(); front.erase(); for (int x = 0; x < width; x++) { for (int y = 0; y < height; y++) { back.put(x, y, SColorFactory.fromPallet(""floor"", ((float) map[x][y] / weight) / 2)); } } back.refresh();  if (path == null) { System.out.println(""No path found.""); } else { float grade = 0; float splitSize = 1f / (path.size() + 2); front.put(start.x, start.y, 'X', SColorFactory.fromPallet(""path"", grade)); grade += splitSize; for (Point p : path) { front.put(p.x, p.y, 'X', SColorFactory.fromPallet(""path"", grade)); grade += splitSize; } front.put(target.x, target.y, 'X', SColorFactory.fromPallet(""path"", grade)); } front.refresh(); } "	0	1	0	1	1	0
"private boolean onFABLongClick() {  mProgressView.setVisibility(View.VISIBLE);  ILCRoomObjManager roomInf = new ILCRoomObjManager(this.getContext()); ArrayList<DataObject> result = new ArrayList<DataObject>(); ArrayList<DatabaseRow> data = roomInf.getTable();  Calendar cal = Calendar.getInstance();  try { if (data != null && data.size() > 0) {  showProgress(true); mProgressView.setVisibility(View.VISIBLE);  for (DatabaseRow row : data) { getDibsRoomInfo dibs = new getDibsRoomInfo(this.getContext()); ILCRoomObj room = (ILCRoomObj) row; roomAvaliabiliy = dibs.execute(room.getRoomId(), cal.get(Calendar.DAY_OF_MONTH), cal.get(Calendar.MONTH), cal.get(Calendar.YEAR)).get(); int status = getDayAvaliability(); if (status == 0) { result.add(new DataObject(room.getName(), ""Is Avaliable Now"", room.getRoomId(), true, """", room.getDescription())); } else if (status == 2) result.add(new DataObject(room.getName(), ""Is Avaliable at "" + cal.get(Calendar.HOUR) + "":30"", room.getRoomId(), true, """", room.getDescription())); else if (status == 4) result.add(new DataObject(room.getName(), ""Is Avaliable Until "" + cal.get(Calendar.HOUR) + "":30"", room.getRoomId(), true, """", room.getDescription())); else if (status == 3) result.add(new DataObject(room.getName(), ""Is Avaliable Until"" + (cal.get(Calendar.HOUR) + 1) + "":30"", room.getRoomId(), true, """", room.getDescription())); } }  } catch (InterruptedException e) { e.printStackTrace(); return false; } catch (ExecutionException e) { e.printStackTrace(); return false; }   showProgress(false);  mAdapter = new SectionedRecyclerView(result); mRecyclerView.setAdapter(mAdapter);  return true; } "	0	1	0	1	1	0
"public static List<Pet.PetSpecies> getPetSpecies() { EntityManager entityManager = HibernateUtil.getEntityManagerFactory().createEntityManager(); List<Pet.PetSpecies> options = entityManager.createQuery(""from PetSpecies"").getResultList(); entityManager.close(); return options; } "	0	1	0	1	1	0
public void actionPerformed(ActionEvent evt){ clockTick = 0; clockTime = ((double)clockTick)/10.0; timeString = new Double(clockTime).toString(); displayTime.setText(timeString); } 	0	1	0	1	1	0
"@Override public WebElement findElement(WebDriver browser, PageElement item, String tagName) throws NoSuchElementException { // fail fast, the child element will handle the timing WebElement relativeElement = followingSibling.getElement(browser, 0); return relativeElement.findElement(By.xpath(""preceding-sibling::"" + tagName)); } "	0	1	0	1	1	0
public static boolean isNewFile(final Path localFile, final Contents serverFile, final boolean isPutCommand) throws IOException { return isNewFileHelper(Files.getLastModifiedTime(localFile).toString(), serverFile.getLastModified().toString(), isPutCommand); } 	1	0	1	0	1	0
"public void pushChunk(int chunk, RConnection connection, String parName, ExecutionMonitor subExec) throws CanceledExecutionException, RserveException {  // create a new RList with a column vectors of this chunk RList rList = new RList(this.m_numRows, true); List<RDataColumn> columns = m_columnChunks.get(chunk); for(RDataColumn col : columns) { String colName = col.getName(); rList.put(colName, col.getREXPData()); }  // chunk name String chunkName = parName + ""_chunk_"" + chunk; m_chunkNames.add(chunkName);  subExec.checkCanceled(); subExec.setMessage(""transfer chunk "" + chunk + "" to R (cannot be cancelled)"");  // assign data to variable in R logger.debug(""transfer chunk "" + chunkName + "" to R""); connection.assign(chunkName, new REXPGenericVector(rList)); } "	0	0	0	1	1	0
"@Test public void Move() throws Exception { Move m = new Move(pl, new Player(""hallo""), new Cordinate(2, 2)); assertNotNull(m); } "	0	0	0	1	1	0
private void writeUnary(Unary unary, Tokens.UnaryOp op) { writeLeftParentheses(unary);  output.append(op.toString()); unary.getArgument().accept(this, null);  writeRightParentheses(unary); } 	0	0	0	1	1	0
@Override public EventResult<IdmRoleCatalogueDto> process(EntityEvent<IdmRoleCatalogueDto> event) { Object breakProvisioning = event.getProperties().get(ProvisioningService.SKIP_PROVISIONING);  if(breakProvisioning != null && breakProvisioning instanceof Boolean && (Boolean)breakProvisioning){ return new DefaultEventResult<>(event, this); }  doProvisioning(catalogueRepository.findOne(event.getContent().getId())); return new DefaultEventResult<>(event, this); } 	1	0	1	0	1	0
"private void listOptions(TextChannel channel) { Poll poll = manager.getPollFromGuild(channel.getGuild()); EmbedBuilder builder = new EmbedBuilder().setTitle(""Options"", null).setDescription(""Options for `"" + poll.getPollOptions() + ""`""); poll.getPollOptions().forEach(option -> builder.addField(""Option "" + (poll.getPollOptions().indexOf(option) + 1), option.getOption() + ""\nVotes: "" + option.getVotes(), true)); channel.sendMessage(builder.build()).queue(); } "	0	0	0	1	1	0
"@Test public void testEndPointWithMultipleParameters() { Endpoint endPoint = new Endpoint(""transmissions""); endPoint.addParam(""num_rcpt_errors"", 3); endPoint.addParam(""myBool"", new Boolean(false)); endPoint.addParam(""MyInteger"", new Integer(0));  String result = endPoint.toString(); Assert.assertEquals(""transmissions?num_rcpt_errors=3&myBool=false&MyInteger=0"", result); } "	0	0	0	1	1	0
public Status peekStatus(final String jobId) { if (Status.isStatusFinished(this.flow.getStatus())) { return null; } final ExecutableNode node = this.flow.getExecutableNodePath(jobId); if (node != null) { ExecutableFlowBase parentFlow = node.getParentFlow(); while (parentFlow != null) { Status parentStatus = node.getParentFlow().getStatus(); if (parentStatus == Status.SKIPPED || parentStatus == Status.DISABLED) { return Status.SKIPPED; } parentFlow = parentFlow.getParentFlow(); } return node.getStatus(); }  return null; } 	1	0	1	0	1	0
"public Type typecheck(SymTab s) { try { FunType ft = (FunType) s.lookupFunction(name.getName());  if(args.size() != ft.getInputs().getArgs().size()) throw new Error(line + "":"" + column + "" error: "" + ""incorrect # of args to fun"");  for(int a = 0; a < args.size(); a++) { if(!args.get(a).typecheck(s).equals(ft.getInputs().getArgs().get(a))) throw new Error(line + "":"" + column + "" error: "" + ""incorrect type of arg to fun""); } } catch(Error e) { if(e.getMessage() == ""Semantic Error: var does not exist"") throw new Error(line + "":"" + column + "" error: "" + e.getMessage()); else throw e; } return new Type(""unit""); } "	1	0	1	0	1	0
@Override public Iterator<E> iterator() { try { lock.lock(); boolean failOnClosedQuery = session.getConfig().getFailOnClosedQueries(); if (!session.isActive() && !session.getConfig().getNonTransactionalRead()) { if (failOnClosedQuery) { //One of those will definitely fail session.checkOpen(); session.checkActiveRead(); } else { return new ClosableIteratorWrapper<>(failOnClosedQuery); } } ClosableIteratorWrapper<E> iter = new ClosableIteratorWrapper<>(c.iterator(), session, failOnClosedQuery); return new SynchronizedROIteratorC<E>(iter, lock, minIncl, maxExcl); } finally { lock.unlock(); } } 	1	0	1	0	1	0
"public PlatformMode resolvePlatformMode(PlatformMode mode, Logger log) { PlatformMode resolvedMode; if (mode == null) { mode = PlatformMode.DEFAULT; } if (mode.isAuto()) { resolvedMode = isOpenShift(log) ? PlatformMode.openshift : PlatformMode.kubernetes; } else { resolvedMode = mode; } log.info(""Running in [[*]]%s[[*]] mode"", resolvedMode.getLabel()); return resolvedMode; } "	0	0	0	1	1	0
@Test public void latestLogFileContainingMultipleCheckPointsOneStartInBetween() throws Throwable { // given LatestCheckPointFinder finder = new LatestCheckPointFinder( logFiles, fs, reader ); LogEntryStart start = new LogEntryStart( 0, 0, 0, 0, new byte[0], new LogPosition( logVersion, 22 ) ); CheckPoint checkPoint = new CheckPoint( new LogPosition( logVersion, 33 ) );  when( reader.readLogEntry( any( ReadableVersionableLogChannel.class ) ) ).thenReturn( mock( CheckPoint.class ), start, checkPoint, null );  // when LatestCheckPoint latestCheckPoint = finder.find( logVersion );  // then assertEquals( new LatestCheckPoint( checkPoint, false, olderLogVersion ), latestCheckPoint ); } 	0	0	0	1	1	0
"protected void init() { topology = new TopologyImpl(); deviceManager = new DeviceManagerImpl(); storageSource = new MemoryStorageSource(); learningSwitch = new LearningSwitch(); counterStore = new CounterStore(); messageFilterManager = new OFMessageFilterManager(); pktinProcTime = new PktinProcessingTime();  topology.setFloodlightProvider(this); topology.setStorageSource(storageSource);  deviceManager.setFloodlightProvider(this); deviceManager.setStorageSource(storageSource); deviceManager.setTopology(topology);  messageFilterManager.init(this);  staticFlowEntryPusher = new StaticFlowEntryPusher(); staticFlowEntryPusher.setFloodlightProvider(this);  learningSwitch.setFloodlightProvider(this); learningSwitch.setCounterStore(counterStore);  // call this explicitly because it does setup this.setStorageSource(storageSource);  HashSet<ITopologyAware> topologyAware = new HashSet<ITopologyAware>(); topologyAware.add(deviceManager); topology.setTopologyAware(topologyAware);  restlets.add(new CoreWebRoutable()); restlets.add(new StorageWebRoutable()); JacksonCustomConverter.replaceConverter();  // Processing Time Warning Threshold ptWarningThresholdInNano = Long.parseLong(System.getProperty(""net.floodlightcontroller.core.PTWarningThreholdInMilli"", ""0"")) * 1000000; if (ptWarningThresholdInNano > 0) { log.info(""Packet processing time threshold for warning set to {} ms."", ptWarningThresholdInNano/1000000); } } "	0	0	0	1	1	0
"@Test public void loadCPI_2016_12_COICOIP_v3() throws Exception {  running(fakeApplication(), () -> {  EntityTransaction tx = em.getTransaction(); tx.begin(); try { postgresTest.loadStandingData(em, Arrays.asList(TIME, COICOP)); postgresTest.loadEachLineInV3File(em, ""CPI_2016_12_COICOP_v3.csv"", postgresTest.createEmptyDataset(em, datasetId.toString(), ""dataset""));  List<DimensionValue> dimensionValues= em.createQuery(""SELECT dim from DimensionValue dim where dim.dimensionalDataSetId = :datasetId"") .setParameter(""datasetId"", datasetId) .getResultList();  assertEquals(dimensionValues.size(), 138);  } catch (Exception e) { e.printStackTrace(); fail(); } finally { tx.rollback(); } }); } "	0	0	0	1	1	0
"private void resetPanels(Editor editor) { String s = ""menu ... # 20s . : ; , e d r z Z q t f w x i E Q P R W T o ^d ^p a A ^t D F p ^x ^e ^f ^g ^i ^o ^v ^w ?""; editor.putBoolean(""pPortActive0"", true); editor.putBoolean(""pLandActive0"", true); editor.putString(""pCmdString0"", s); editor.putString(""pPortLoc0"", ""3""); editor.putString(""pLandLoc0"", ""3"");  for(int iPanel = 1; iPanel < 6; iPanel++) { String idx = Integer.toString(iPanel); editor.putBoolean(""pPortActive"" + idx, false); editor.putBoolean(""pLandActive"" + idx, false); } } "	0	0	0	1	1	0
@Override public EPGraphCollection execute(EPGraph epGraph) { Graph<Long, EPFlinkVertexData, EPFlinkEdgeData> graph = epGraph.getGellyGraph(); try { graph = graph.run(new LabelPropagationAlgorithm(this.maxIterations)); } catch (Exception e) { e.printStackTrace(); } EPGraph labeledGraph = EPGraph.fromGraph(graph, null, env); LongFromProperty lfp = new LongFromProperty(propertyKey); SplitBy callByPropertyKey = new SplitBy(lfp, env); return callByPropertyKey.execute(labeledGraph); } 	1	0	1	0	1	0
"private void sendTimeAdjust(ChannelHandlerContext ctx) throws Exception { long abs = Math.abs(timeAdjust); if (abs > 65536) { throw new TransmitterException(""Time difference too large.""); }  String sign = ""+""; if (timeAdjust < 0) { sign = ""-""; }  String msg = String.format(""%d:%s:%04x\r\n"", PagingMessageType.SYNCORDER.getValue(), sign, abs); ctx.writeAndFlush(msg);  state = SyncState.READ_TIME_ADJUST_ACK; } "	0	0	0	1	1	0
"@Test public void testReceiveCommandMessage() { System.out.println(""receiveCommandMessage""); Session client = mock(Session.class); String[] parameterNames = new String[]{""\""a\"""", ""\""b\"""", ""\""c\""""}; String[] parameters = new String[]{""\""toto\"""", ""5"", ""true""}; String json = String.format(""{\""%s\"":\""%s\"",\""%s\"":\""%s\"",\""%s\"":\""%s\"",\""%s\"":%s,\""%s\"":%s}"", Constants.Message.ID, ""111"", Constants.Message.DATASERVICE, ""ClassName"", Constants.Message.OPERATION, ""methodName"", Constants.Message.ARGUMENTNAMES, Arrays.toString(parameterNames), Constants.Message.ARGUMENTS, Arrays.toString(parameters));  instance.receiveCommandMessage(client, json);  ArgumentCaptor<MessageFromClient> captureMsg = ArgumentCaptor.forClass(MessageFromClient.class); ArgumentCaptor<Session> captureSession = ArgumentCaptor.forClass(Session.class); verify(callServiceManager, times(1)).sendMessageToClient(captureMsg.capture(), captureSession.capture());  MessageFromClient result = captureMsg.getValue(); assertThat(result.getId()).isEqualTo(""111""); assertThat(result.getDataService()).isEqualTo(""ClassName""); assertThat(result.getOperation()).isEqualTo(""methodName""); assertThat(result.getParameterNames()).containsExactly(""\""a\"""", ""\""b\"""", ""\""c\""""); assertThat(result.getParameters()).containsExactly(""\""toto\"""", ""5"", ""true""); } "	0	0	0	1	1	0
protected void createComponents() { final GuiRenderer guiRenderer = new GuiRenderer(mc, mc.getTextureManager(), fontRendererObj, itemRender);  final GuiSubTexture guiBackground = new GuiSubTexture(TEXTURE, new Rectangle(0, 0, 176, 227)); final GuiTexture inactiveHandle = new GuiSubTexture(TEXTURE, new Rectangle(176, 0, 12, 15)); final GuiTexture activeHandle = new GuiSubTexture(TEXTURE, new Rectangle(176 + 12, 0, 12, 15)); final GuiTexture craftableSubtexture = new GuiSubTexture(TEXTURE, new Rectangle(0, 227, 142, 23)); final GuiTexture uncraftableSubtexture = new GuiSubTexture(TEXTURE, new Rectangle(0, 227 + 23, 142, 23));  setRootControl(new TexturedPaneControl(guiRenderer, 176, 227, guiBackground)); scrollbarGuiComponent = new ScrollbarControl(guiRenderer, activeHandle, inactiveHandle); scrollbarGuiComponent.setLocation(156, 24); scrollbarGuiComponent.setSize(20, 115);  final ProjectTableRecipeControl templateRecipeControl = new ProjectTableRecipeControl(guiRenderer, craftableSubtexture, uncraftableSubtexture); recipeListGuiComponent = new ScrollPaneControl<ProjectTableRecipe, ProjectTableRecipeControl>(guiRenderer, 141, 23*5) .setScrollbar(scrollbarGuiComponent) .setItemRendererTemplate(templateRecipeControl) .setVisibleItemCount(5) .setItems(filteredList); recipeListGuiComponent.setLocation(8, 24);  addChild(recipeListGuiComponent); addChild(scrollbarGuiComponent);  templateRecipeControl.addOnRecipeCraftingEventListener(new RecipeCraftingEventListener()); } 	1	0	1	0	1	0
"@Transactional @RequireCSRFCheck public Result postEditSessionProblem(long sessionId, long sessionProblemId) throws SessionNotFoundException, SessionProblemNotFoundException { Session session = sessionService.findSessionById(sessionId); SessionProblem sessionProblem = sessionProblemService.findSessionProblemById(sessionProblemId);  if (!session.getJid().equals(sessionProblem.getSessionJid())) { return notFound(); }  Form<SessionProblemEditForm> sessionProblemEditForm = Form.form(SessionProblemEditForm.class).bindFromRequest(); if (formHasErrors(sessionProblemEditForm)) { return showEditSessionProblem(session, sessionProblem, sessionProblemEditForm); }  SessionProblemEditForm sessionProblemEditData = sessionProblemEditForm.get(); if (!sessionProblemEditData.alias.equals(sessionProblem.getAlias()) && !sessionProblemService.aliasExistsInSession(session.getJid(), sessionProblemEditData.alias)) { sessionProblemEditForm.reject(Messages.get(""error.session.problem.duplicateAlias""));  return showEditSessionProblem(session, sessionProblem, sessionProblemEditForm); }  sessionProblemService.updateSessionProblem(sessionProblem.getId(), sessionProblemEditData.alias, SessionProblemStatus.valueOf(sessionProblemEditData.status), IdentityUtils.getUserJid(), IdentityUtils.getIpAddress());  JerahmeelControllerUtils.getInstance().addActivityLog(BasicActivityKeys.EDIT_IN.construct(SESSION, session.getJid(), session.getName(), PROBLEM, sessionProblem.getProblemJid(), SandalphonResourceDisplayNameUtils.parseSlugByLanguage(JidCacheServiceImpl.getInstance().getDisplayName(sessionProblem.getProblemJid()))));  return redirect(routes.SessionProblemController.viewSessionProblems(session.getId())); } "	1	0	1	0	1	0
@Override public void onRouteFound(List<BusRouteResult> results) { cancelProgressDialog(); mMyBusMap.removeChargingPointMarkers(); if (results == null || results.isEmpty()) { showBottomSheetResults(false); mViewPagerAdapter = null; Toast.makeText(this, R.string.toast_no_result_found, Toast.LENGTH_LONG).show(); return; } else { startResultsActivity((ArrayList<BusRouteResult>) results); } } 	1	0	1	0	1	0
public static List<String> decolorize(List<String> colored) { if (colored == null) return null; List<String> decolored = new ArrayList<String>(colored.size()); for (String string : decolored) { decolored.add(Utils.translateColorCodesToAlternative('&', string)); } return decolored; } 	0	0	0	1	1	0
public static TypeFactory<?> typeFactory( TypeFactory<?> type, int tupleSize ) { if (tupleSize <= 1) return type; if (tupleSize == 2) return typeFactory(type, type); if (tupleSize == 3) return typeFactory(type, type, type); if (tupleSize == 4) return typeFactory(type, type, type, type); Collection<TypeFactory<?>> types = new ArrayList<TypeFactory<?>>(tupleSize); for (int i = 0; i != tupleSize; ++i) { types.add(type); } return new TupleNTypeFactory(types); } 	1	0	1	0	1	0
private void openLayout() { JFileChooser chooser = createFileChooser(pref.get(CURRENT_DIR, null)); chooser.setMultiSelectionEnabled(false);  String fn = null; if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { pref.put(CURRENT_DIR, chooser.getCurrentDirectory().getAbsolutePath()); fn = chooser.getSelectedFile().getAbsolutePath(); }  if (fn != null) {  Object o = CheckLayoutSerializationFactory.loadLayout(fn);  if (o != null) { checkLayout = (CheckLayout) o; layout.setCheckLayout(checkLayout); layout.setTestPrint(true); loadModel(); previewPanel.setPrintable(layout); clear(); }  } } 	1	0	1	0	1	0
"@Test public void should_generate_table_with_several_styles() { table = new HtmlTable(""tableId"", request, response); table.getTableConfiguration().addCssStyle(""border:1px""); table.getTableConfiguration().addCssStyle(""align:center""); assertThat(table.toHtml().toString()).isEqualTo(""<table id=\""tableId\"" style=\""border:1px;align:center\""><thead></thead><tbody></tbody></table>""); } "	0	0	0	1	1	0
"@Test public void should_generate_table_with_one_style() { table = new HtmlTable(""tableId"", request, response); table.getTableConfiguration().addCssStyle(""border:1px""); assertThat(table.toHtml().toString()).isEqualTo(""<table id=\""tableId\"" style=\""border:1px\""><thead></thead><tbody></tbody></table>""); } "	0	0	0	1	1	0
"@Override public String getCommand(Template t) throws Exception { Template.Parameter[] params = new Template.Parameter[2 + attachments.length]; params[0] = new Template.ResourceParameter(inspector); params[1] = body; int i = 2; for (Artifact a : attachments) { params[i++] = StringParameter.class.cast(a.getName()); // the artifact name, intended to be the artifact destination params[i++] = a.getContent(); // the artifact hash }  StringBuilder sb = new StringBuilder(); sb.append(getSetID()); sb.append("" inspect""); for (Parameter p : params) { String v = p.getValue(t); if (v.length() > 0) { sb.append("" ""); sb.append(v); } }  return sb.toString(); } "	0	0	0	1	1	0
protected void mergeProtocolSubmission(ProtocolBase amendment) { List<ProtocolSubmissionBase> submissions = (List<ProtocolSubmissionBase>) deepCopy(amendment.getProtocolSubmissions()); setNewSubmissionReferences(submissions); } 	1	0	1	0	1	0
public List<ProtocolAttachmentProtocolBase> getActiveAttachmentProtocols() { List<ProtocolAttachmentProtocolBase> activeAttachments = new ArrayList<>(); for (ProtocolAttachmentProtocolBase attachment1 : getAttachmentProtocols()) { if (attachment1.isDraft()) { activeAttachments.add(attachment1); } else if (attachment1.isFinal() || attachment1.isDeleted()) { boolean isActive = true; for (ProtocolAttachmentProtocolBase attachment2 : getAttachmentProtocols()) { if (attachment1.getDocumentId().equals(attachment2.getDocumentId()) && attachment1.getAttachmentVersion() < attachment2.getAttachmentVersion()) { isActive = false; break; } } if (isActive) { activeAttachments.add(attachment1); } else { attachment1.setActive(isActive); } } else { attachment1.setActive(false); } } return activeAttachments; } 	1	0	1	0	1	0
"@Nullable @SuppressWarnings(""unchecked"") public <T> T get(Class<T> queryClass, Map<String, Object> restrictionMap) { T object = null; Transaction transaction = null;  try (Session session = getSessionFactory().openSession()) { transaction = session.beginTransaction(); Criteria criteria = session.createCriteria(queryClass); if (restrictionMap != null && !restrictionMap.isEmpty()) { for (Entry<String, Object> entry : restrictionMap.entrySet()) { criteria.add(Restrictions.eq(entry.getKey(), entry.getValue())); } } object = (T) criteria.uniqueResult(); transaction.commit(); } catch (Exception e) { if (transaction != null) { transaction.rollback(); } throw e; }  return object; } "	1	0	1	0	1	0
"public void cancelOrder(int orderId) throws HibernateException { if (orderId <= 0) { throw new HibernateException(""Invalid orderId"" + orderId); } Transaction transaction = null; Session session = null; try { session = sessionFactory.openSession(); transaction = session.beginTransaction(); OrderDAO orderDAO = new OrderDAOImpl(session); Order order = orderDAO.getById(orderId); if(order == null){ throw new HibernateException(""order not avilable "" + orderId); } //TODO::check whether the operation allowed wrt Timestamps //Check if order is in CANCELLable state if(order.getStatus() < OrderStatusEnum.CANCELLED.getValue()){ order.setStatus(OrderStatusEnum.CANCELLED.getValue()); orderDAO.update(order); transaction.commit(); log.info(""cancel of order was succesfull"" + orderId);  } else if(order.getStatus() == OrderStatusEnum.CANCELLED.getValue()){ log.info(""The order was already cancelled !""); } else{ throw new Exception(""The status cannot be cancelled noat this stage. It can be cancelled only before READY State""); }  } catch (Exception ex) {  try { if(transaction == null){ throw new HibernateException(""Transaction could not be completed "" + ex.getMessage(), ex); } transaction.rollback(); throw new HibernateException( ""Transaction could not be completed will be rollbacked: "" + ex.getMessage(), ex); } catch (RuntimeException rbe) { throw new HibernateException( ""Transaction could not be completed and rollback failed: "" + ex.getMessage(), ex); } } finally { if (session != null) { session.close(); } } } "	0	0	0	1	1	0
private boolean checkIfOnBoard( int[] move){ boolean a = (move[0] < board.getBoardSize() && move[0] < board.getBoardSize()); return a; } 	1	0	1	1	1	0
"public Race getCurrentRound() { if (this.rounds.size() <= this.currentRound) { return this.rounds.get(this.currentRound); } throw new IllegalArgumentException(""Current round does not exist in this.rounds""); } "	1	0	1	1	1	0
"@Override public ServiceResponse fetch(final OutputFormat format, boolean subPathways, final String... uris) { if (uris.length == 0) return new ErrorResponse(NO_RESULTS_FOUND, ""No URIs were specified for the query"");  if(!paxtoolsModelReady()) return new ErrorResponse(MAINTENANCE,""Waiting for the initialization to complete (try later)..."");  // extract/convert a sub-model try { final String[] mappedUris = findUrisByIds(uris);  Set<BioPAXElement> elements = urisToBpes(paxtoolsModel, mappedUris); if(elements.isEmpty()) { return new ErrorResponse(NO_RESULTS_FOUND, ""No BioPAX objects found by URI(s): "" + Arrays.toString(uris)); }  Model m = autoCompleteAndClone(elements, subPathways);  //name the sub-model - can be useful when converted to GSEA, etc... if(!m.getObjects().isEmpty()) { if(mappedUris.length==1) { String uri = mappedUris[0]; m.setUri(uri); BioPAXElement b = m.getByID(uri); if(b instanceof Named) { m.setName(((Named) b).getDisplayName() + "" "" + ArrayUtils.toString(uris)); } else { m.setName(ArrayUtils.toString(uris)); } } else { String desc = ArrayUtils.toString(uris); m.setUri(""PC_get_"" + desc.hashCode()); m.setName(desc); } }  return convert(m, format); } catch (Exception e) { return new ErrorResponse(INTERNAL_ERROR, e); } } "	1	0	1	0	1	0
@Override public char[] readPassword(String fmt, Object... args) { return console.readPassword(); } 	1	0	1	1	1	0
"@Override public void signalResponseAvailable(String responseJSON) { this.queueResponseJSON.push(responseJSON); final WebView webView = (WebView) getView().findViewById(org.opendatakit.tables.R.id.webkit); this.getActivity().runOnUiThread(new Runnable() { @Override public void run() { webView.loadUrl(""javascript:datarsp.responseAvailable();""); } }); } "	1	0	1	1	1	0
"public static Date StrToStartDate(String str) {  SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd""); Date date = null; try { date = format.parse(str); } catch (Exception e) { log.error(e.getMessage()); date = StrToEndDate(""2006-08-01""); } return date; } "	0	0	0	1	1	0
public static <T extends Persistable> void setSelection(Spinner spinner, T selection) {  if (selection == null) { spinner.setSelection(0); } else { spinner.setSelection(((ArrayAdapter) spinner.getAdapter()).getPosition(selection)); } } 	0	0	0	1	1	0
"@Test public void testTheRivardReport() throws Exception { // http://therivardreport.com/san-antonio-space-scientists-prepare-for-jupiter-contact-1/ JResult res = new JResult(); res.setUrl(""http://therivardreport.com/san-antonio-space-scientists-prepare-for-jupiter-contact-1/""); res = extractor.extractContent(res, c.streamToString(getClass().getResourceAsStream(""therivardreport.html""))); assertEquals(""https://therivardreport.com/san-antonio-space-scientists-prepare-for-jupiter-contact-1/"", res.getCanonicalUrl()); assertEquals(""San Antonio Space Scientists Prepare for Jupiter ContactRivard Report"", res.getTitle()); assertTrue(res.getText(), res.getText().startsWith(""As the countdown began on Aug. 5, 2011 at the Kennedy Space Center in Florida,"")); assertTrue(res.getText(), res.getText().endsWith(""Artistic depiction of Juno. Photo courtesy of NASA."")); assertEquals(""Cherise Rohr-Allegrini"", res.getAuthorName()); assertEquals(""https://therivardreport.com/author/cherise-rohr-allegrini/"", res.getAuthorDescription()); compareDates(""2016-07-02 05:01:58"", res.getDate()); } "	0	0	0	1	1	0
"@Test @Sql(scripts = ""classpath:populateDB.sql"") public void testGetAllFriends() { //Assert.assertTrue(""fail"",!service.getAllFriends().isEmpty()); Assert.assertTrue(""fail"",service.getAllFriends().size()==3); //size-> to megethos ts listas } "	0	0	0	1	1	0
"@SuppressWarnings(""UnusedDeclaration"") public Subscription[] getJMSSubscriptionsForTopic(String topic) throws EventAdminException { EventBroker eventBroker = EventAdminHolder.getInstance().getEventBroker(); try { return adaptSubscriptions(eventBroker.getTopicManager().getJMSSubscriptions(topic)); } catch (EventBrokerException e) { log.error(e.getMessage(), e); throw new EventAdminException(""Cannot get the jms subscriptions"", e); } } "	0	0	0	1	1	0
"@Override @Before public void setUp() { super.setUp(); empiricalDistribution = new EmpiricalDistribution(100); url = getClass().getResource(""testData.txt""); final ArrayList<Double> list = new ArrayList<Double>(); try { empiricalDistribution2 = new EmpiricalDistribution(100); BufferedReader in = new BufferedReader(new InputStreamReader( url.openStream())); String str = null; while ((str = in.readLine()) != null) { list.add(Double.valueOf(str)); } in.close(); in = null; } catch (IOException ex) { Assert.fail(""IOException "" + ex); }  dataArray = new double[list.size()]; int i = 0; for (Double data : list) { dataArray[i] = data.doubleValue(); i++; } } "	1	0	1	0	1	0
@Override public String convertToPresentation(byte[] value, Class<? extends String> targetType, Locale locale) throws ConversionException { return value == null ? null : new String(value, StandardCharsets.UTF_8); } 	1	0	1	1	1	0
@Override protected void setResult() { Intent result = null; if (Intent.ACTION_PICK.equals(mAction)) { // create intent Cursor cursor = ((CurrencyListAdapter) getListAdapter()).getCursor();  for (int i = 0; i < getListView().getCount(); i++) { if (getListView().isItemChecked(i)) { cursor.moveToPosition(i);  result = new Intent(); result.putExtra(CurrenciesActivity.INTENT_RESULT_CURRENCYID, cursor.getInt(cursor.getColumnIndex(TableCurrencyFormats.CURRENCYID))); result.putExtra(CurrenciesActivity.INTENT_RESULT_CURRENCYNAME, cursor.getString(cursor.getColumnIndex(TableCurrencyFormats.CURRENCYNAME)));  getActivity().setResult(Activity.RESULT_OK, result);  return; } } } getActivity().setResult(CurrenciesActivity.RESULT_CANCELED); } 	1	0	1	0	1	0
"private boolean checkPlayServicesAndRegister() { // Check device for Play Services APK. If check succeeds, proceed with GCM registration. if (GcmIdentificationService.checkPlayServices(this)) { GcmIdentificationService idService = new GcmIdentificationService();  //Check if already registered idService.checkSetup(); return true; } else { Utils.log(""No valid Google Play Services APK found.""); return false; } } "	1	0	1	1	1	0
public static void dropItemStack(ItemStack is, SimpleDoubleCoordStore sdcs) { if((is == null) || (sdcs == null)) return; World w = sdcs.getWorldObj(); if(w == null) return; EntityItem ie = new EntityItem(w, sdcs.x, sdcs.y, sdcs.z, is); ie.delayBeforeCanPickup = 0; w.spawnEntityInWorld(ie); } 	1	0	1	1	1	0
"@Override public boolean onCommand(ISender sender, String commandLabel, String[] args) { if (!Check.isTrue(args.length >= 1, Locale.get(Msg.CMD_FAIL_REQ_ONE_ARG).toString(), sender)) { return true; } if (plugin.getWebServer().isEnabled()) { sender.sendMessage(""§cWebServer is not enabled on this server! Make sure it enables on boot!""); return true; } String address = args[0].toLowerCase(); if (address.endsWith(""/"")) { address = address.substring(0, address.length() - 1); } try { plugin.getWebServer().getWebAPI().getAPI(PingWebAPI.class).sendRequest(address); plugin.getWebServer().getWebAPI().getAPI(RequestSetupWebAPI.class).sendRequest(address); sender.sendMessage(""§eConnection successful, Plan may restart in a few seconds, if it doesn't something has gone wrong.""); } catch (WebAPIException e) { Log.toLog(this.getClass().getName(), e); sender.sendMessage(""§cConnection to Bungee WebServer failed: More info on console""); } return true; } "	1	0	1	1	1	0
"private JMeterResult executeMe() throws AutomationFrameworkException {  try { addLogFile(testFile.getName()); } catch (IOException e) { throw new AutomationFrameworkException(""Can't add log file"", e); } Boolean resultState = true; JMeterResult results;  String resultFile = executeTest(testFile); try { // Force shutdown StandardJMeterEngine.stopEngineNow(); ShutdownClient.main(new String[]{""Shutdown""});  } catch (IOException ex) { log.error(ex); resultState = false; } results = resultValidator(resultFile); results.setFileName(resultFile); results.setExecutionState(resultState);  return results; } "	0	0	0	1	1	0
"public void testAnalyzer2() { String str =""необходимость вести борьбу""; List<Euristic> euristics = getFullRulesList(); euristics.addAll(getRulesList30()); euristics.addAll(getRulesList31()); euristics.addAll(getRulesList32()); euristics.addAll(getRulesList33()); euristics.addAll(getRulesList34()); euristics.addAll(getRulesList35()); EuristicAnalyzingParser euristicAnalyzingParser = configureDefaultAnalyzer(euristics); euristicAnalyzingParser.process(getWordFormTokens(str)); List<List<IToken>> possibleChains = euristicAnalyzingParser.getPossibleChains(); printProcessingResult(str, possibleChains); } "	0	0	0	1	1	0
"@Override public void collect(Tuple3<Long, String, String> record) { assertTrue(record._1()==input._1); assertEquals(input._2, record._2()); assertEquals(""Peter Tosh"", record._3()); } "	0	0	0	1	1	0
private Collection<ParameterModel> getParameterModels(ModeledConnection connection) {  Map<String, String> parameters = connection.getConfiguration().getParameters();  // Convert parameters to model objects Collection<ParameterModel> parameterModels = new ArrayList(parameters.size()); for (Map.Entry<String, String> parameterEntry : parameters.entrySet()) {  // Get parameter name and value String name = parameterEntry.getKey(); String value = parameterEntry.getValue();  // There is no need to insert empty parameters if (value.isEmpty()) continue;  // Produce model object from parameter ParameterModel model = new ParameterModel(); model.setConnectionIdentifier(connection.getIdentifier()); model.setName(name); model.setValue(value);  // Add model to list parameterModels.add(model);  }  return parameterModels;  } 	1	0	1	0	1	0
"public boolean isAnime(File f) { if (MediaDetection.parseEpisodeNumber(f.getName(), false).isEmpty()) { return false; } if (anyMatch(f.getParentFile(), ANIME_PATTERN) || find(f.getName(), ANIME_EPISODE_PATTERN) || find(f.getName(), EMBEDDED_CHECKSUM)) { return true; }  // check for Japanese audio or characteristic subtitles if (VIDEO_FILES.accept(f)) { try (MediaInfo mi = new MediaInfo().open(f)) { long minutes = Duration.ofMillis(Long.parseLong(mi.get(StreamKind.General, 0, ""Duration""))).toMinutes(); return minutes < 60 || mi.get(StreamKind.General, 0, ""AudioLanguageList"").contains(""Japanese"") && mi.get(StreamKind.General, 0, ""TextCodecList"").contains(""ASS""); } catch (Exception e) { debug.warning(""Failed to read audio language: "" + e.getMessage()); } } return false; } "	1	0	1	0	1	0
@Override public boolean onBlockActivated(World world, int x, int y, int z, EntityPlayer player, int side, float fx, float fy, float fz) { if (!world.isRemote) { TileTable tile = (TileTable) world.getTileEntity(x, y, z);  if (tile != null) { if (!player.isSneaking() && side == 1) { ItemStack held = player.getHeldItem();  if (tile.stack != null && (held == null || !(held.getItem() instanceof ItemHammer))) { player.setCurrentItemOrArmor(0, tile.stack.copy()); tile.setStack(null); return true; }  if (held != null && tile.stack == null) { if (tile.attractedFlies) { if (held.getItem() == SubsistenceItems.net && held.getItemDamage() == 0) { held.setItemDamage(1); tile.attractedFlies = false; return true; } }  ItemStack stack = held.copy(); stack.stackSize = 1;  tile.setStack(stack);  held.stackSize--; if (held.stackSize <= 0) { player.setCurrentItemOrArmor(0, null); } } else { if (!tile.smash(player)) { if (tile.stack != null && held == null) { player.setCurrentItemOrArmor(0, tile.stack.copy()); tile.setStack(null); return true; } else if (tile.stack != null) { if (tile.stack.isItemEqual(held) && (held.stackSize + 1 <= held.getItem().getItemStackLimit(held))) { held.stackSize += tile.stack.stackSize;  if (held.stackSize > held.getMaxStackSize()) { held.stackSize = held.getMaxStackSize(); tile.stack.stackSize = held.stackSize - held.getMaxStackSize(); world.markBlockForUpdate(x, y, z); } else { tile.setStack(null); }  return true; } } } } } } }  return !player.isSneaking(); } 	1	0	1	0	1	0
"@Override public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Cursor returnCursor; switch (sUriMatcher.match(uri)) { case MESSAGES_WITH_PARTNER: returnCursor = getMessagesWithPartner(uri, projection, sortOrder); break; case PARTNERS: returnCursor = mChatDbHelper.getReadableDatabase().query( PartnerEntry.TABLE_NAME, projection, selection, selectionArgs, null, null, sortOrder ); break; case PARTNER: returnCursor = getPartnerByUuid(uri, projection, sortOrder); break; case PEOPLE_NEARBY: returnCursor = mChatDbHelper.getReadableDatabase().query( PeopleNearbyEntry.TABLE_NAME, projection, selection, selectionArgs, null, null, sortOrder ); break; default: throw new UnsupportedOperationException(""Unknown uri: "" + uri); }  returnCursor.setNotificationUri(getContext().getContentResolver(), uri); return returnCursor; } "	0	0	0	1	1	0
public int getNumberOfIntervals() { return numberOfIntervals + (running ? 1 : 0); } 	1	0	1	0	1	0
"@Override protected Object getValueByMappedAttribute(AttributeMapping attribute, List<IcAttribute> icAttributes) {  Object transformedValue = super.getValueByMappedAttribute(attribute, icAttributes);  if (PARENT_FIELD.equals(attribute.getIdmPropertyName()) && transformedValue != null) { String parentUid = transformedValue.toString(); UUID systemId = ((SysSystemAttributeMapping)attribute).getSystemMapping().getSystem().getId(); // Find account by UID from parent field AccountFilter accountFilter = new AccountFilter(); accountFilter.setUid(parentUid); accountFilter.setSystemId(systemId); transformedValue = null; List<AccAccount> parentAccounts = accountService.find(accountFilter, null).getContent(); if (!parentAccounts.isEmpty()) { UUID parentAccount = parentAccounts.get(0).getId(); // Find relation between tree and account TreeAccountFilter treeAccountFilter = new TreeAccountFilter(); treeAccountFilter.setAccountId(parentAccount); List<AccTreeAccountDto> treeAccounts = treeAccoutnService.find(treeAccountFilter, null).getContent(); if(!treeAccounts.isEmpty()){ // Find parent tree node by ID // TODO: resolve more treeAccounts situations transformedValue = treeNodeService.get(treeAccounts.get(0).getTreeNode()); } else { LOG.warn( ""For parent UID: [{}] on system ID [{}] and acc account: [{}], was not found tree accounts! Return null value in parent!!"", parentUid, systemId, parentAccount); throw new ProvisioningException(AccResultCode.SYNCHRONIZATION_TREE_PARENT_TREE_ACCOUNT_NOT_FOUND, ImmutableMap.of(""parentUid"", parentUid, ""systemId"", systemId, ""parentAccount"", parentAccount)); } } else { LOG.warn( ""For parent UID: [{}] on system ID [{}], was not found parents account! Return null value in parent!!"", parentUid, systemId); throw new ProvisioningException(AccResultCode.SYNCHRONIZATION_TREE_PARENT_ACCOUNT_NOT_FOUND, ImmutableMap.of(""parentUid"", parentUid, ""systemId"", systemId)); } } return transformedValue; } "	1	0	1	1	1	0
"public String toJson(int indent){ return Util.repeat("" "", indent) + ""{ "" + ""\""role\"" : "" + getRoleJson() + "", "" + ""\""conference\"" : "" + conferenceInstance.toJson() + "" },""; } "	0	0	0	1	1	0
"public void addClaim() throws ParseException  { if (startDate.getText().toString().equals("""") ||endDate.getText().toString().equals("""")) { Toast.makeText(AddClaimActivity.this,""Incomplete Fields"", Toast.LENGTH_SHORT).show(); } else {  //Initializing variables Date sdate = df.parse(startDate.getText().toString()); Date edate = df.parse(endDate.getText().toString());  //XML Inputs String name = editTextName.getText().toString(); String description = editTextDescription.getText().toString();  if (name.equals("""") || description.equals("""")) { Toast.makeText(AddClaimActivity.this,""Incomplete Fields"", Toast.LENGTH_SHORT).show(); } else {  //create claim id = CLC.addClaim(name, sdate, edate, description, this.user); ArrayList<Destination> destination = parentActivity.getDestination(); CLC.getClaim(id).setDestination(destination);  //add Tag to Claim for (int i = 0; i<  tagsArrayList.size(); i++){ try { CLC.addTagToClaim(id, tagsArrayList.get(i).toString()); } catch (AlreadyExistsException e) { e.printStackTrace(); } }  //toast finished Toast.makeText(AddClaimActivity.this,""Claim Saved."", Toast.LENGTH_SHORT).show(); finish(); } } } "	1	0	1	1	1	0
"public Text StringToText(String input) throws IOException{   HyphenationOperation hyOp = new HyphenationOperation(); StringTokenizer st=new StringTokenizer(input); String row =""""; ArrayList<String> lines; lines = new ArrayList<>(); Text text;    int SpaceLeft= lmax; int SpaceWidth=1;    do { String word=st.nextToken(); if((word.length()+SpaceWidth)>SpaceLeft) { //long word have to be hyphenated to fulfill the line //length constraints  row = row.substring(0, row.length()-1); lines.add(row); row = """"; row += word.endsWith(""-"") ? word.substring(0, word.length()-1) : word + "" "";  if(!st.hasMoreTokens()) lines.add(word);   SpaceLeft = lmax - word.length();  } else { //if text is small then one single line if (!st.hasMoreElements()){ row += word; lines.add(row); break;  }  row += word.endsWith(""-"") ? word.substring(0, word.length()-1) : word + "" "";; SpaceLeft-=(word.length()+SpaceWidth); } }//do while(st.hasMoreTokens());      text = new Text(lines);  return text;  } "	1	0	1	1	1	0
private void applyNotificationIconsTint() { for (int i = 0; i < mNotificationIcons.getChildCount(); i++) { StatusBarIconView v = (StatusBarIconView) mNotificationIcons.getChildAt(i); boolean isPreL = Boolean.TRUE.equals(v.getTag(R.id.icon_is_pre_L)); boolean colorize = !isPreL || isGrayscale(v); if (colorize) { v.setImageTintList(ColorStateList.valueOf(mNotificationIconColorTint)); } } if (mShowTicker && mTicker != null && mTickerView != null) { mTicker.setIconColorTint(ColorStateList.valueOf(mNotificationIconColorTint)); } } 	1	0	1	1	1	0
"public void SwitchTo(int lexState) { if (lexState >= 4 || lexState < 0) throw new TokenMgrError(""Error: Ignoring invalid lexical state : "" + lexState + "". State unchanged."", TokenMgrError.INVALID_LEXICAL_STATE); else curLexState = lexState; } "	1	0	1	1	1	0
public boolean addTo(NamedFacebookType receiver) { return to.add(from); } 	1	0	1	1	1	0
@OnClick(R.id.reload) void onReload() { if (onReloadListener != null && !progressBar.isShown()) { onReloadListener.onClick(reload); } } 	1	0	1	0	1	0
public void setConserveSpace(boolean flag) { this.conserveSpace = flag; } 	1	0	1	0	1	0
public void setAdjustPriority(String adjustPriorityString) { this.adjustPriority = adjustPriorityString; } 	1	0	1	0	1	0
public void setVisitors(String commaSeperatedString) { this.visitors = commaSeperatedString; } 	1	0	1	0	1	0
public void setReportLevel(String level) { this.reportLevel = level; } 	1	0	1	0	1	0
public void setFile(long projectID, File f) { synchronized (FILE_LIST) { f.setProjectID(projectID); Project p = projects.get(projectPathToID); p.addFile(f); } } 	1	0	1	1	1	0
private void waitForExpectedStatus(final String title, ActivationStatus status) { wait.withTimeout(Timeouts.MEDIUM).until(new ExpectedCondition<Boolean>() { @Nullable @Override public Boolean apply(@Nullable WebDriver webDriver) { webDriver.navigate().refresh(); ChildPageRow childPage = getChildPageWindow(webDriver).getChildPageRow(title); PageActivationStatus pageActivationStatusCell = childPage.getPageActivationStatus(); ActivationStatus activationStatus = pageActivationStatusCell.getActivationStatus(); return activationStatus.equals(status); } }, Timeouts.SMALL); } 	1	0	1	0	1	0
"@Override protected String getJsonBody() { String json = JsonUtil.getJsonBody(addMember); // replace second query field json = json.replaceAll(""\""userId\"":[\""]{0,1}(\\w+(\\s+\\w+)*)[\""]{0,1}[,]{0,1}"", """"); return json; } "	0	0	0	1	1	0
"private String getOptionalValue(ArgumentTokenizer tokenizer, Prefix prefix) { if (!tokenizer.getValue(prefix).isPresent()) { return """"; } else { return tokenizer.getValue(PREFIX_STARTDATE).get(); } } "	1	0	1	1	1	0
private JsonOwlObject renderObject(OWLClass cls) { String id = IdStringManager.getId(cls, graph); JsonOwlObject json = JsonOwlObject.createCls(id, getLabel(cls, id)); return json; } 	1	0	1	0	1	0
"public Item toModelType() throws IllegalValueException { final Description description = new Description(this.description); LocalDateTime start; LocalDateTime end; boolean isDone; UniqueTagList tags; // extract dates from XML data DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""yyyy-MM-dd HH:mm""); if (this.startDate.equals("""")) { start = null; } else { start = LocalDateTime.parse(startDate, formatter); } if (this.endDate.equals("""")) { end = null; } else { end = LocalDateTime.parse(endDate, formatter); } // extract isDone from XML data assert !this.isDone.isEmpty(); if (this.isDone.equals(""true"")) { isDone = true; } else { isDone = false; } // extract tags from XML data final List<Tag> itemTags = new ArrayList<>(); for (XmlAdaptedTag tag : tagged) { itemTags.add(tag.toModelType()); } tags = new UniqueTagList(itemTags);  Item itemToReturn = new Item(description, start, end, tags); if (isDone.equals(false)) { itemToReturn.setIsDone(false); } else { itemToReturn.setIsDone(true); } return itemToReturn; } "	1	0	1	0	1	0
"public List<AuthzCodeDO> getLatestAuthorizationCodesOfTenant(int tenantId) throws IdentityOAuth2Exception {  //we do not support access token partitioning here Connection connection = IdentityDatabaseUtil.getDBConnection();; PreparedStatement ps = null; ResultSet rs = null;  List<AuthzCodeDO> latestAuthzCodes = new ArrayList<>(); try { String sqlQuery = SQLQueries.LIST_LATEST_AUTHZ_CODES_IN_TENANT; ps = connection.prepareStatement(sqlQuery); ps.setInt(1, tenantId); rs = ps.executeQuery(); while (rs.next()) { String authzCodeId = rs.getString(1); String authzCode = rs.getString(2); String consumerKey = rs.getString(3); String authzUser = rs.getString(4); String[] scope = OAuth2Util.buildScopeArray(rs.getString(5)); Timestamp issuedTime = rs.getTimestamp(6, Calendar.getInstance(TimeZone.getTimeZone(UTC))); long validityPeriodInMillis = rs.getLong(7); String callbackUrl = rs.getString(8); String userStoreDomain = rs.getString(9);  AuthenticatedUser user = new AuthenticatedUser(); user.setUserName(authzUser); user.setUserStoreDomain(userStoreDomain); user.setTenantDomain(OAuth2Util.getTenantDomain(tenantId)); latestAuthzCodes.add(new AuthzCodeDO(user, scope, issuedTime, validityPeriodInMillis, callbackUrl, consumerKey, authzCode, authzCodeId)); } connection.commit(); } catch (SQLException e) { IdentityDatabaseUtil.rollBack(connection); throw new IdentityOAuth2Exception(""Error occurred while retrieving latest authorization codes of tenant "" + "":"" + tenantId, e); } finally { IdentityDatabaseUtil.closeAllConnections(connection, rs, ps); } return latestAuthzCodes; } "	1	0	1	1	1	0
private static void updateField(Class cls, String field, Object writeTo, Object value) throws InvocationTargetException, IllegalAccessException { // If we have a setter, use that... Method m = getFirstMethodByName(cls, field);  if(m != null) { // Convert and call Class c = m.getParameterTypes()[0].getClass(); m.invoke(writeTo, convertData(value, c)); return; }  Field f = getFieldByName(cls, field);  if(f == null) return;  f.setAccessible(true); f.set(writeTo, convertData(value, f.getType())); } 	1	0	1	0	1	0
private void init() { mConnection = new ConnectionController(this, this, mHandler); mConnection.startServer(this);  setContentView(R.layout.host);  final TextView name = (TextView) findViewById(R.id.host_name); mHost.setPlayersList((LinearLayout) findViewById(R.id.players_list)); final Button exit = (Button) findViewById(R.id.exit);  name.setText(mHost.getName()); exit.setOnClickListener(new OnClickListener() { @Override public void onClick(final View aV) { exit(); } }); } 	1	0	1	0	1	0
public static int compareEventDates(Event one, Event two) { ZonedDateTime now = ZonedDateTime.now(); ZonedDateTime startDate = DateUtils.getDate(one.getStartsAt()); ZonedDateTime endDate = DateUtils.getDate(one.getEndsAt()); ZonedDateTime otherStartDate = DateUtils.getDate(two.getEndsAt()); ZonedDateTime otherEndDate = DateUtils.getDate(two.getEndsAt()); if (endDate.isBefore(now) || otherEndDate.isBefore(now)) { // one of them is past and other can be past or live or upcoming return endDate.isAfter(otherEndDate) ? -1 : 1; } else { if (startDate.isAfter(now) || otherStartDate.isAfter(now)) { // one of them is upcoming other can be upcoming or live return startDate.isBefore(otherStartDate) ? -1 : 1; } else { // both are live return startDate.isAfter(otherStartDate) ? -1 : 1; } } } 	1	0	1	1	1	0
"@Override public List<BuildConfiguration> getBuildConfigurations(String scmUrl, String scmRevision) throws CommunicationException, PNCRequestException { String accessToken = pncAuthenticate.getAccessToken(); String requestUrl = String .format( // TODO solve pagination ""build-configurations?q=scmRepoURL=='%s';scmRevision=='%s'&pageIndex=0&pageSize=500"", scmUrl, scmRevision);  ClientResponse<PNCResponseWrapper<List<BuildConfiguration>>> response = get(requestUrl, new GenericType<PNCResponseWrapper<List<BuildConfiguration>>>() {}, accessToken);  if (response.getEntity() == null && response.getResponseStatus() == Status.NO_CONTENT) return Collections.emptyList(); else return checkAndReturn(response, accessToken).getContent(); } "	1	0	1	0	1	0
"private Map<Object, Object> getExpectedMap() { Map<Object, Object> map = new HashMap<>(); map.put(""externalId"", 123456789); map.put(""startDate"", new LocalDate(2012, 11, 20)); map.put(""key1"", ""value""); map.put(""event name"", 6789);  return map; } "	0	0	0	1	1	0
"private Command prepareList(String args) { // Guard statement if (args.isEmpty()) { return new ListCommand(); }  final ArgumentTokenizer argsTokenizer = new ArgumentTokenizer(startDatePrefix, endDatePrefix, onDatePrefix, tagPrefix); argsTokenizer.tokenize(args);  try { ListCommand listCommand = new ListCommand();  // keywords delimited by whitespace Optional<String> keywordsString = argsTokenizer.getPreamble(); if (keywordsString.isPresent()) { String[] keywords = keywordsString.get().split(""\\s+"");  Set<String> keywordSet = new HashSet<>(Arrays.asList(keywords)); keywordSet.removeIf(s -> s.equals("""")); listCommand.setKeywords(keywordSet); }  String onDateString = unwrapOptionalStringOrEmpty(argsTokenizer.getValue(onDatePrefix)); String startDateString = unwrapOptionalStringOrEmpty(argsTokenizer.getValue(startDatePrefix)); String endDateString = unwrapOptionalStringOrEmpty(argsTokenizer.getValue(endDatePrefix)); Set<String> tags = getTagsFromArgs(argsTokenizer);  if (tags.isEmpty()) { listCommand.setTags(tags); }  // Ranged search and specific-day search should be mutually exclusive if (!onDateString.isEmpty() && (!startDateString.isEmpty() || !endDateString.isEmpty())) { return new IncorrectCommand(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_MUTUALLY_EXCLUSIVE_OPTIONS)); }  if (onDateString.isEmpty()) { final LocalDateTime startDate = getLocalDateTimeFromArgument(startDateString, ""00:00:00""); final LocalDateTime endDate = getLocalDateTimeFromArgument(endDateString, ""23:59:59"");  if (startDate != null && endDate != null && startDate.isAfter(endDate)) { return new IncorrectCommand(ListCommand.MESSAGE_INVALID_DATE); }  listCommand.setStartDate(startDate); listCommand.setEndDate(endDate); } else { final LocalDateTime onDate = getLocalDateTimeFromArgument(onDateString, ""23:59:59"");  listCommand.setOnDate(onDate); }  return listCommand; } catch (IllegalValueException ive) { return new IncorrectCommand(ive.getMessage()); } } "	1	0	1	1	1	0
public T[] pop(int numberOfItems){ T[] items = (T[])new Object[numberOfItems]; T item  = this.pop(); int position = 0;  while(item != null && position < numberOfItems){ items[position] = item; position++; item = this.pop(); }  return items; } 	1	0	1	1	1	0
public Time getCurrentTime() { return this.Time; } 	1	0	1	1	1	0
public static Map<String, Object> createUserPrefMap(List<GenericValue> recList) throws GeneralException { Map<String, Object> userPrefMap =  new LinkedHashMap<String, Object>(); if (recList != null) { for (GenericValue value: recList) { addPrefToMap(value, userPrefMap); } } return userPrefMap; } 	1	0	1	0	1	0
public static void switchSignToInitialState(Sign sign, BankType btype){ if(!sign.getBlock().getType().equals(Material.SIGN) && !sign.getBlock().getType().equals(Material.WALL_SIGN)) //Si el letrero ya no existe ignoramos, esto puede suceder ya que la función switchSignTo puede ser llamada 1 segundo después. return;  switchSignToStep(btype, sign, 0);  } 	1	0	1	0	1	0
"public final void generate() throws Exception { log.info(f(""Running %s"", getClass().getSimpleName())); for (BaseNodeMetaModel nodeMetaModel : JavaParserMetaModel.getNodeMetaModels()) { CompilationUnit nodeCu = sourceRoot.parse(nodeMetaModel.getPackageName(), nodeMetaModel.getTypeName() + "".java"", javaParser).orElseThrow(() -> new IOException(f(""java file for %s not found"", nodeMetaModel.getTypeName()))); ClassOrInterfaceDeclaration nodeCoid = nodeCu.getClassByName(nodeMetaModel.getTypeName()).orElseThrow(() -> new IOException(""Can't find class"")); generateNode(nodeMetaModel, nodeCu, nodeCoid); } after(); } "	0	0	0	1	1	0
@Security.Authenticated(Secured.class) public static Result admin() { return ok(admin.render(postDao.findAll())); } 	1	0	1	1	1	0
"@Test public void shouldMapCodedConceptValues() throws ParseException { DiseaseSummaryObsMapper diseaseSummaryObsMapper = new DiseaseSummaryObsMapper(); List<BahmniObservation> bahmniObservations =  new ArrayList<>();  Date visit1 = simpleDateFormat.parse(date1); bahmniObservations.add(createBahmniObservation(visit1,simpleDateTimeFormat.parse(date1 +"" 12:30""),""Pulse"",new EncounterTransaction.Concept(""uuid-pulse"",""very high pulse"")));  Map<String, Map<String, ConceptValue>> obsTable = diseaseSummaryObsMapper.map(bahmniObservations, DiseaseSummaryConstants.RESULT_TABLE_GROUP_BY_VISITS);  Map<String, ConceptValue> dayValue = obsTable.get(frameDiseaseSummaryMapKey(visit1)); assertEquals(1, dayValue.size()); assertEquals(""very high pulse"", dayValue.get(""Pulse"").getValue());  } "	0	0	0	1	1	0
"private String getHongbaoHash(AccessibilityNodeInfo node) { /* 获取红包上的文本 */ String content; try { AccessibilityNodeInfo i = node.getParent().getChild(0); content = i.getText().toString(); } catch (NullPointerException npr) { return null; }  return content + ""@"" + getNodeId(node); } "	1	0	1	0	1	0
public static boolean containsIgnoreCase(String source, String query) { return source.toLowerCase().contains(query); } 	1	0	1	0	1	0
"@SuppressWarnings(""deprecation"") private void autoShowWhatsNew() { SharedPreferences settings = Application.getPrefs();  // Get the current app version. PackageManager pm = getPackageManager(); PackageInfo appInfo = null; try { appInfo = pm.getPackageInfo(getPackageName(), PackageManager.GET_META_DATA); } catch (NameNotFoundException e) { // Do nothing, perhaps we'll get to show it again? Or never. return; }  final int oldVer = settings.getInt(WHATS_NEW_VER, 0); final int newVer = appInfo.versionCode;  if ((oldVer > 0) && (oldVer < newVer)) { mWhatsNewMessage = R.string.main_help_whatsnew; showDialog(WHATSNEW_DIALOG);  // Updates will remove the alarms. This should put them back. // (Unfortunately I can't find a way to reschedule them without // having the app run again). TripService.scheduleAll(this); PreferenceHelp.saveInt(WHATS_NEW_VER, appInfo.versionCode); } } "	1	0	1	0	1	0
"public String getCreationDateString() { Date date = new Date(timestamp * 1000); SimpleDateFormat dateFormat = new SimpleDateFormat(""MM/dd/yy""); String formattedDate = dateFormat.format(date); return formattedDate; } "	1	0	1	0	1	0
"public boolean somethingSelected(Element element, boolean print) { element.setDriver(driver); boolean isSelected = false; if (elementInput(element, false)) { WebElement webElement = element.getWebElement(); if (""input"".equalsIgnoreCase(webElement.getTagName())) { isSelected = webElement.isSelected(); } else if (""select"".equalsIgnoreCase(webElement.getTagName())) { Select dropdown = new Select(webElement); isSelected = dropdown.getAllSelectedOptions().size() > 0; } } if (print) { file.recordExpected(CHECKING + element.prettyOutput() + SELECTED); } return isSelected; } "	0	0	0	1	1	0
"@OneToMany(methods = {OneToMany.Method.DELETE}, variableName = ""sightMarks"") public List<SightMark> getSightMarks() { if (sightMarks == null || sightMarks.isEmpty()) { sightMarks = Stream.of(SQLite.select() .from(SightMark.class) .where(SightMark_Table.bow.eq(id)) .queryList()) .sortBy(sightMark -> sightMark.distance) .collect(Collectors.toList()); } return sightMarks; } "	1	0	1	0	1	0
"@OneToMany(methods = {OneToMany.Method.DELETE}, variableName = ""images"") public List<BowImage> getImages() { if (images == null || images.isEmpty()) { images = SQLite.select() .from(BowImage.class) .where(BowImage_Table.bow.eq(id)) .queryList(); } return images; } "	1	0	1	0	1	0
@Override public int removeModule(IModule[] module, IProgressMonitor monitor) throws CoreException { IPath tmpArchive = getTempBundlePath(module); BundleDetails bd = new ModuleBundleVersionUtility().getBundleDetails(module, tmpArchive); if( bd != null ) { boolean removed = getPublisher(module).uninstall(getServer(), module, bd.getSymbolicName(), bd.getVersion()); if( removed ) { File tmpDeployArtifact = tmpArchive.toFile(); // remove the temp deploy file from file system once we undeploy or latest at shutdown of VM if (!tmpDeployArtifact.delete()) { tmpDeployArtifact.deleteOnExit(); } return IServer.PUBLISH_STATE_NONE; } } return IServer.PUBLISH_STATE_FULL; } 	1	0	1	1	1	0
"@Override public String getUnlocalizedName(ItemStack stack) { if (stack.getItemDamage() == ExplosiveItems.FRAGMENT.ordinal()) { if (getExplosive(stack) instanceof IFragmentExplosiveHandler) { return ((IFragmentExplosiveHandler) ExplosiveItems.FRAGMENT.getExplosive()).getFragmentLocalization(stack); } } else if (stack.getItemDamage() >= 1 && stack.getItemDamage() < ExplosiveItems.values().length) { return super.getUnlocalizedName() + """" + ExplosiveItems.values()[stack.getItemDamage()].ex_name; } return super.getUnlocalizedName(stack); } "	1	0	1	1	1	0
@Override public void handle(ActionResult event) { if (connectionFuture != null && !connectionFuture.isDone()) { connectionFuture.cancel(true); }  if (endpoint != null) { endpoint.destroy(); }  node.delete(); } 	1	0	1	0	1	0
"public static void main(String[] args) { int nodes = 2; CountDownLatch latch = new CountDownLatch(nodes); Nodes init = new Nodes(""Initiator"", true, latch); Nodes node1 = new Nodes(""Node1"", false, latch); Nodes node2 = new Nodes(""Node2"",false,latch); Nodes node3 = new Nodes(""Node3"",false,latch); Nodes node4 = new Nodes(""Node4"",false,latch);  init.setupNeighbours(node1,node4); node1.setupNeighbours(init,node2); node2.setupNeighbours(node1); node3.setupNeighbours(node1,node2); node4.setupNeighbours(init); } "	1	0	1	1	1	0
private OdkWebkitServerInterface getWebkitServer() { if ( isMocked ) { return mockWebkitServerService; } else { return mBackgroundServices.webkitfilesService; } } 	1	0	1	0	1	0
private ArrayList<Integer> writeStripData(IFD ifd) throws IOException { ArrayList<Integer> newStripOffsets = new ArrayList<Integer>(); IfdTags metadata = ifd.getMetadata(); TagValue stripOffsets = metadata.get(273); TagValue stripSizes = metadata.get(279); for (int i = 0; i < stripOffsets.getCardinality(); i++) { int pos = (int) data.position(); newStripOffsets.add(pos); int start = (int) stripOffsets.getValue().get(0).toInt(); int size = stripSizes.getValue().get(i).toInt(); for (int off = start; off < start + size; off++) { byte v = this.input.readByte(off).toByte(); data.put(v); } } return newStripOffsets; } 	1	0	1	1	1	0
"public MessageOperationChain getOutgoingMessageOperationChain() { String policy = (String) def.getProperty(OUTBOUND_POLICY); Object match = (Matchable) def.getProperty(OUTBOUND_MATCH); if (match instanceof Resource && ((Resource)match).getURI().equals(""http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"")) match = Collections.EMPTY_LIST; if (match instanceof Matchable) return new MessageChecker((Matchable)match, policy.contains(""Whitelist"")); if (match instanceof List) return new MessageChecker((List)match, policy.contains(""Whitelist"")); LogUtils.logWarn(Gateway.getInstance().context, getClass(), ""getOutgoingMessageOperationChain"", ""Not matchable security definition, assuming Deny by default.""); return new DenyDefault(); } "	1	0	1	1	1	0
"@Override protected Object execute(Object[] data) { boolean returnValue = false; if (data.length == 2) {  if (data[0] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(id,"" + ""information) function"" + "". First "" + ""argument cannot be null""); } if (data[1] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(id,"" + ""information) function"" + "". Second "" + ""argument cannot be null""); }  String id = (String) data[0]; String currentInformation = (String) data[1]; if (informationBuffer.containsKey(id) && !informationBuffer.get(id).equals(currentInformation)) { returnValue = true; } informationBuffer.put(id, currentInformation); } if (data.length == 3) {  if (data[0] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(id,"" + ""information,triggerFirst) function"" + "". First "" + ""argument cannot be null""); } if (data[1] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(id,"" + ""information,triggerFirst) function"" + "". Second "" + ""argument cannot be null""); } if (data[3] == null) { throw new ExecutionPlanRuntimeException(""Invalid input given to geoDashboard:needToNotify(id,"" + ""information,triggerFirst) function"" + "". Third "" + ""argument cannot be null""); } } if (data.length == 3) { returnValue = Boolean.valueOf(((String)data[2]).equals(""sendFirst"")); } String id = (String) data[0]; String currentInformation = (String) data[1];  if (informationBuffer.containsKey(id) && !informationBuffer.get(id).equals(currentInformation)) { returnValue = true; } informationBuffer.put(id, currentInformation); return returnValue; } "	1	0	1	1	1	0
@Test public void slice() throws Exception { //Create a CSG to slice CSG sliced = new Cube(10, 10, 10).toCSG().union(new Sphere(5).toCSG());  //Get a slice List<Vector3d> points = Slice.slice(sliced, new Transform(), 0);  //Construct a Polygon from that slice Polygon polygon = Polygon.fromPoints(points);  //Collect that Polygon into a List List<Polygon> polygons = new ArrayList<>(); polygons.add(polygon);  //Construct a CSG from that Polygon List CSG finished = CSG.fromPolygons(polygons); } 	0	0	0	1	1	0
"public void playURI(Command command) {  if (command != null && command instanceof StringType) {  try { String url = command.toString();  ZonePlayerHandler coordinator = getCoordinatorHandler();  // stop whatever is currently playing coordinator.stop();  // clear any tracks which are pending in the queue coordinator.removeAllTracksFromQueue();  // add the new track we want to play to the queue // The url will be prefixed with x-file-cifs if it is NOT a http URL if (!url.startsWith(""x-"") && (!url.startsWith(""http""))) { // default to file based url url = ""x-file-cifs:"" + url; } coordinator.addURIToQueue(url, """", 0, true);  // set the current playlist to our new queue coordinator.setCurrentURI(""x-rincon-queue:"" + getUDN() + ""#0"", """");  // take the system off mute coordinator.setMute(OnOffType.OFF);  // start jammin' coordinator.play();  } catch (IllegalStateException e) { logger.warn(""Cannot play URI ({})"", e.getMessage()); } }  } "	0	0	0	1	1	0
"@Override public StyleSpans<Collection<String>> doInBackground(Void[] params) { Matcher matcher = PATTERN.matcher(str.toUpperCase()); BetterSpanBuilder builder = new BetterSpanBuilder(); while (matcher.find()) { if (isCancelled()) return null; String styleClass = matcher.group(""INSTRUCTION"") != null ? ""instruction"" : matcher.group(""DIRECTIVE"") != null ? ""directive"" : matcher.group(""ALIAS"") != null ? ""alias"" : matcher.group(""NUMBER"") != null ? ""number"" : matcher.group(""COMMENT"") != null ? ""comment"" : matcher.group(""DOLLAR"") != null ? ""dollar-thingy"" : null; assert styleClass != null; builder.addStyle(styleClass, matcher.start(1), matcher.end(1)); } for (CodeCollisionElement collision : codeView.getSyntaxAnalysis().getCollisions()) { if (collision instanceof ReservedAddressCollisionElement) { builder.addStyle(""warning"", collision.getDefinitionStart(), collision.getDefinitionEnd()); } else { for (TextRange range : collision.getRanges()) { builder.addStyle(""warning"", range.getStart(), range.getEnd()); } } } for (CodeErrorElement error : codeView.getSyntaxAnalysis().getErrors()) { builder.addStyle(""error"", error.getDefinitionStart(), error.getDefinitionEnd()); }  return builder.create(str); } "	1	0	1	1	1	0
@Override public int compare(Issue lhs, Issue rhs) { return (int) (rhs.number() - lhs.number()); } 	1	0	1	1	1	0
"public void testGetShellCommandLineNonWindows() throws Exception { Commandline cmd = new Commandline( new BourneShell() ); cmd.setExecutable( ""/usr/bin"" ); cmd.addArguments( new String[] { ""a"", ""b"" } ); String[] shellCommandline = cmd.getShellCommandline();  assertEquals( ""Command line size"", 3, shellCommandline.length );  assertEquals( ""/bin/sh"", shellCommandline[0] ); assertEquals( ""-c"", shellCommandline[1] );  if ( Os.isFamily( Os.FAMILY_WINDOWS ) ) { assertEquals( ""\\usr\\bin a b"", shellCommandline[2] ); } else { assertEquals( ""'/usr/bin' 'a' 'b'"", shellCommandline[2] ); } } "	0	0	0	1	1	0
"private void usage() {  System.out.printf(""java {} -config <properties file>"", Connector.class.toString()); System.exit(-1); } "	0	0	0	1	1	0
"public static void validateTimes(DateTime startTime, DateTime endTime) { if (!startTime.isBefore(endTime)) throw Exceptions.badRequest(""start_time (%s) must be before end_time (%s)"", startTime, endTime); } "	1	0	1	1	1	0
public Set<String> createInstancesIfNotExisist(String infrastructureId, String instanceTag, String instanceJson, Set<JSONObject> existingInstances) { Set<String> instancesIds = getExistingInstanceIds(infrastructureId, instanceTag, existingInstances);  if (instancesIds.isEmpty()) { instancesIds = createInstances(infrastructureId, instanceJson); }  return instancesIds; } 	1	0	1	0	1	0
"public ArrayList<String> getWordsOfCategory(String category) { String query = ""SELECT * FROM "" + TABLE_WORDS + "" WHERE category LIKE + \""""+category+""\"";""; ArrayList<String> words = new ArrayList<>();  //execute queries. SQLiteDatabase db = this.getWritableDatabase(); Cursor cursor = db.rawQuery(query, null);  //add all words to the list if (cursor != null && cursor.moveToFirst()) { do { String w = cursor.getString(0); // Add word words.add(w); } while (cursor.moveToNext());  db.close(); cursor.close(); }  return words;  } "	0	0	0	1	1	0
"public static Integer runCli(List<String> args, Map<String, String> params, String workingDir) throws Exception { String stringArgs = toArguments(args); String stringParams = toJavaParams(params); String command = String.format( ""java -jar %s/pom-manipulation-cli.jar %s %s"", BUILD_DIR, stringParams, stringArgs);  return runCommandAndWait(command, workingDir); } "	1	0	1	0	1	0
"@Override public int onStartCommand(Intent intent, int flags, int startId) { context = this; if (intent == null) { return 0; }  boolean isPhoto = intent.getBooleanExtra(""IsPhoto"", false); int eventId = intent.getIntExtra(""EventId"", -1); String description = intent.getStringExtra(""Descripttion""); if (eventId == -1) { throw new IllegalArgumentException(""Event Id cannot be -1""); }  float descX = intent.getFloatExtra(""PositionX"", 0); float descY = intent.getFloatExtra(""PositionY"", 0);  // We add our events to a list so that we can save them all with one location request. This // is for when the user saves multiple photos in short successesion, so we need a list of events. eventsTosave.add(new Event(eventId, isPhoto, description, descX, descY));  if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) { Toast.makeText(context, ""Cannot save without location permissions"", Toast.LENGTH_LONG).show(); return super.onStartCommand(intent, flags, startId); }  locationManager = (LocationManager) getSystemService(LOCATION_SERVICE); locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1, 0, locationListener);  // Start thread. If we are still running, cancel it. if (t == null) { t = new Timer(); } t.scheduleAtFixedRate(new TimerTask() { @Override public void run() { timer += 50; // We only want to look for 20 seconds if (timer > 20000) { // Stop video, and go to the next page if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) { return; } SimpleGps gps = new SimpleGps(context); Location location = gps.GetInstantLocation(); if (HAVE_SAVED) { return; // Dont want to save anything here because I have already saved. }   else { HAVE_SAVED = true; processAndSaveEvent(location); }  locationManager.removeUpdates(locationListener); } } }, 50, 50);  // Grab location service.   return super.onStartCommand(intent, flags, startId); } "	1	0	1	0	1	0
"public static URelations advSitToUD(Node aNode) throws XPathExpressionException { String tag = Utils.getTag(aNode);  if (tag.matches(""n.*|xn.*"")) return URelations.NMOD; if (tag.matches(""r.*"")) return URelations.ADVMOD;  warn(aNode); return URelations.DEP; } "	0	0	0	1	1	0
"public AlertAssert hasText(final String text) { try { String actualText = actual.getText(); if (!actualText.contains(text)) { super.failWithMessage( ""The alert box does not contain the text: "" + text + "" . Actual text found : "" + actualText); } } catch (final NoAlertPresentException e) { super.failWithMessage(""There is no alert box""); }  return this; } "	1	0	1	0	1	0
protected void fillDefaultValues(Node node) { if(node.hasRecurrentValues()){ cashInput.setCash(node.getRecurrentCash()); durationInput.setDuration(node.getRecurrentDuration()); } } 	1	0	1	0	1	0
public boolean remove(int node) { boolean result = nodes.remove(new Integer(node)); weightSum -= structure.weights[node]; if (nodes.isEmpty()) { structure.communities.remove(this); } return result; } 	1	0	1	0	1	0
"public static COSObject concatenateStreams(COSArray streams, COSDocument document) throws IOException { File mergedContentStream = File.createTempFile(""verapdf_tmp_file"", "".tmp""); mergedContentStream.deleteOnExit(); FileOutputStream outputStream = new FileOutputStream(mergedContentStream); for (COSObject stream : streams) { if (stream.getType() == COSObjType.COS_STREAM) { ASInputStream streamData = stream.getData(FilterFlags.DECODE); try { writeStreamToFile(outputStream, streamData); } catch (IOException e) { streamData.close(); outputStream.close(); throw e; } streamData.close(); } } outputStream.close(); ASInputStream inputContentStream = new InternalInputStream(mergedContentStream); COSObject streamDict = COSDictionary.construct(ASAtom.LENGTH, mergedContentStream.length()); document.addFileResource(new ASFileStreamCloser(inputContentStream)); return COSStream.construct((COSDictionary) streamDict.get(), inputContentStream); } "	1	0	1	0	1	0
"public static int transformFile(String inputPath, BufferedWriter conllOut) throws Exception { int omited = 0; NodeList pmlTrees = PmlLoader.getTrees(inputPath); System.out.printf(""%s trees found...\t"", pmlTrees.getLength()); for (int i = 0; i < pmlTrees.getLength(); i++) { String conllTree = SentenceTransformator.treeToConll(pmlTrees.item(i)); if (conllTree != null) conllOut.write(conllTree); else omited++; } System.out.println(""Finished.""); return omited; } "	0	0	0	1	1	0
"private void cropPhotoTest() throws Exception { String testTag = ""crop_photo"";  // To improve travel accuracy perform the slide bar operation slowly final int steps = 500;  // Perform a range of swipe tests while browsing photo gallery LinkedHashMap<String, Position> testParams = new LinkedHashMap<String, Position>(); testParams.put(""tilt_positive"", Position.LEFT); testParams.put(""tilt_reset"", Position.RIGHT); testParams.put(""tilt_negative"", Position.RIGHT);  Iterator<Entry<String, Position>> it = testParams.entrySet().iterator();  // Select third photograph selectPhoto(2); UiObject editView = getUiObjectByResourceId(""com.google.android.apps.photos:id/edit"", ""android.widget.ImageView""); editView.click();  UiObject cropTool = getUiObjectByResourceId(""com.google.android.apps.photos:id/cpe_crop_tool"", ""android.widget.ImageView""); cropTool.click();  UiObject straightenSlider = getUiObjectByResourceId(""com.google.android.apps.photos:id/cpe_straighten_slider"", ""android.view.View"");  while (it.hasNext()) { Map.Entry<String, Position> pair = it.next(); Position pos = pair.getValue();  String runName = String.format(testTag + ""_"" + pair.getKey()); String gfxInfologName =  String.format(runName + ""_gfxInfo.log""); String surfFlingerlogName =  String.format(runName + ""_surfFlinger.log"");  startDumpsysGfxInfo(parameters); startDumpsysSurfaceFlinger(parameters);  Timer result = new Timer(); result = slideBarTest(straightenSlider, pos, steps);  stopDumpsysSurfaceFlinger(parameters, surfFlingerlogName); stopDumpsysGfxInfo(parameters, gfxInfologName);  timingResults.put(runName, result); }  saveAndReturn(); } "	1	0	1	1	1	0
private boolean differentContainmentSubTrees(Pair<TGGRuleNode, TGGRuleNode> nodes) { List<TGGRuleNode> leftHierarchy = containmentHierarchyFromNodeToRoot(nodes.getLeft()); List<TGGRuleNode> rightHierarchy = containmentHierarchyFromNodeToRoot(nodes.getRight());  // if one of the nodes is the root of its tree, both nodes cannot be in different sub-trees if (leftHierarchy.size() <= 1 || rightHierarchy.size() <= 1) return false;  // if the roots of both nodes' trees are not equal, they are in unconnected trees, // which makes unequal-constraints necessary if (leftHierarchy.get(leftHierarchy.size()-1).equals(rightHierarchy.get(rightHierarchy.size()-1))) return false;  // if the parents of both nodes are equal, // they have to take care of checking unequality if (leftHierarchy.get(1).equals(rightHierarchy.get(1))) return false;  // in the remaining cases, the nodes are in different but connected sub-trees // and their parent nodes transitively take care of the unequality return true; } 	1	0	1	1	1	0
"private static boolean isTierPaid(String tierName, String tenantDomain) throws APIManagementException{ if (tenantDomain == null) { tenantDomain = MultitenantConstants.SUPER_TENANT_DOMAIN_NAME; } if (tierName.equalsIgnoreCase(APIConstants.UNLIMITED_TIER)) { return isUnlimitedTierPaid(tenantDomain); }  Map<String, Tier> tierMap = null; boolean isPaid = false;  try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); int requestedTenantId = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantId(); if (requestedTenantId == 0) { tierMap = APIUtil.getTiers(); } else { tierMap = APIUtil.getTiers(requestedTenantId); } } finally { PrivilegedCarbonContext.endTenantFlow(); }  if (tierMap != null) { Tier tier = tierMap.get(tierName);  if (tier != null) { final Map<String, Object> tierAttributes = tier.getTierAttributes();  if (tierAttributes != null) { String isPaidValue = (String) tierAttributes.get(APIConstants.API_TIER_IS_PAID_ATTRIBUTE);  if (isPaidValue != null) { isPaid = Boolean.parseBoolean(isPaidValue); } } else { throw new APIManagementException(""Tier attributes not specified for tier "" + tierName); } } else { throw new APIManagementException(""Tier "" + tierName + ""cannot be found""); } }  return isPaid; } "	1	0	1	1	1	0
@Hide(OS.NT) public static void chown(PyObject path, int uid, int gid) { if (posix.chown(absolutePath(path), uid, gid) < 0) { throw errorFromErrno(path); } } 	0	0	0	1	1	0
"@CrossOrigin @GetMapping(path=""/results"") public @ResponseBody List<User> getByName(@RequestParam(""name"") String name) { return userRepository.findByName(name,name); } "	1	0	1	1	1	0
"public String[] resourceListAsSikulixContentFromJar(String aJar, String folder, File targetFolder, FilenameFilter filter) { List<String> contentList = extractResourcesToFolderFromJar(aJar, folder, null, filter); if (contentList == null) { log(-1, ""resourceListAsSikulixContentFromJar: did not work: %s"", folder); return null; } File target = null; String arrString[] = new String[contentList.size()]; try { PrintWriter aPW = null; if (targetFolder != null) { target = new File(targetFolder, fpContent); FileManager.deleteFileOrFolder(target); target.getParentFile().mkdirs(); aPW = new PrintWriter(target); } int n = 0; for (String line : contentList) { arrString[n++] = line; if (targetFolder != null) { aPW.println(line); } } if (targetFolder != null) { aPW.close(); } } catch (Exception ex) { log(-1, ""resourceListAsFile: %s:\n%s"", target, ex); } return arrString; } "	1	0	1	1	1	0
"public Collection<PortletHit> getPortletHits() { ArrayList<PortletHit> hits = new ArrayList<>();  Logger.info(this, ""Searching for: "" + userSearchValues.toString());  Collection<Host> hosts = new HostDAO().getHosts(userSearchValues.getHost());  BufferedSearchResultIterator buffer = new BufferedSearchResultIterator(searcherFilter, userSearchValues.getType(), userSearchValues.getLanguageId(), userSearchValues.getStatus(), userSearchValues.getMaxResults());  for (Host host : hosts) { searcherFilter.setHost(host); buffer.setBufferForNewHost(host); hits.addAll(getHitsByHost(buffer)); }  return hits; } "	1	0	1	0	1	0
private Set<Content> flattenContentObjects(final Content content) { Set<Content> setOfContentObjects = new HashSet<Content>(); if (!content.getChildren().isEmpty()) {  List<ContentBase> children = content.getChildren();  for (ContentBase child : children) { setOfContentObjects.add((Content) child); setOfContentObjects.addAll(flattenContentObjects((Content) child)); } }  setOfContentObjects.add(content);  return setOfContentObjects; } 	1	0	1	0	1	0
"public static Optional<Deadline> parseDeadline(Optional<String> deadline) throws IllegalValueException { assert deadline != null; if (deadline.get().equals("""")) { return deadline.isPresent() ? Optional.of(new Deadline("""")) : Optional.empty(); } Parser parser = new Parser(); String fromDate = new String(""""); String fromTime = null; String toDate = new String(""""); String toTime = null; if (deadline.isPresent()) { String deadlineString = deadline.toString(); List <DateGroup> groups = parser.parse(deadlineString); List dates = null; int line; int column; String matchingValue; String syntaxTree; Map parseMap; boolean isRecurring; Date recursUntil;  for (DateGroup group: groups) { dates = group.getDates(); line = group.getLine(); column = group.getPosition(); matchingValue = group.getText(); syntaxTree = group.getSyntaxTree().toStringTree(); parseMap = group.getParseLocations(); isRecurring = group.isRecurring(); recursUntil = group.getRecursUntil(); }  if (dates != null) { fromDate = dates.get(0).toString(); fromTime = getTime(fromDate); if (dates.size() != 1) { toDate = dates.get(1).toString(); toTime = getTime(toDate); isEvent = true; } } StringTokenizer st = new StringTokenizer(fromDate); List<String> listDeadline = new ArrayList<String>(); while (st.hasMoreTokens()) { listDeadline.add(st.nextToken()); } List<String> endOfEvent = new ArrayList<String>(); if (isEvent) { st = new StringTokenizer(toDate); while (st.hasMoreTokens()) { endOfEvent.add(st.nextToken()); } } StringBuilder deadlineStringBuilder = new StringBuilder(); deadlineStringBuilder.append(listDeadline.get(2) + ""-"" + listDeadline.get(1) + ""-"" + listDeadline.get(5) + "" @ "" + fromTime); if (isEvent) { deadlineStringBuilder.append("" to "" + endOfEvent.get(2) + ""-"" + endOfEvent.get(1) + ""-"" + endOfEvent.get(5) + "" @ "" + toTime); } fromDate = deadlineStringBuilder.toString(); } return deadline.isPresent() ? Optional.of(new Deadline(fromDate)) : Optional.empty(); } "	0	0	0	1	1	0
public Builder localeUri(@Nullable Uri localeUri) { this.localeUri = languageUri; return this; } 	1	0	1	1	1	0
"public ImmutableList<LocalDate> createUnadjustedDates() { List<LocalDate> unadj = generateUnadjustedDates(); // ensure schedule is valid with no duplicated dates ImmutableList<LocalDate> deduplicated = ImmutableSet.copyOf(unadj).asList(); if (deduplicated.size() < unadj.size()) { throw new ScheduleException(this, ""Schedule calculation resulted in duplicate unadjusted dates: {}"", unadj); } return deduplicated; } "	0	0	0	1	1	0
"@SuppressWarnings(""try"") private Collection<T> startTrace(T block, int traceNumber) { ArrayDeque<T> trace = new ArrayDeque<>(); try (Indent i = Debug.logAndIndent(""StartTrace: "" + block)) { try (Indent indentFront = Debug.logAndIndent(""Head:"")) { for (T currentBlock = block; currentBlock != null; currentBlock = selectPredecessor(currentBlock)) { addBlockToTrace(currentBlock, traceNumber); trace.addFirst(currentBlock); } } /* Number head blocks. Can not do this in the loop as we go backwards. */ int blockNr = 0; for (T b : trace) { b.setLinearScanNumber(blockNr++); }  try (Indent indentBack = Debug.logAndIndent(""Tail:"")) { for (T currentBlock = selectSuccessor(block); currentBlock != null; currentBlock = selectSuccessor(currentBlock)) { addBlockToTrace(currentBlock, traceNumber); trace.addLast(currentBlock); /* This time we can number the blocks immediately as we go forwards. */ currentBlock.setLinearScanNumber(blockNr++); } } } Debug.log(""Trace: %s"", trace); return trace; } "	0	0	0	1	1	0
public <D extends MD5Descriptor> D digest(InputStream stream, DigestOperation<D> digestOperation) throws IOException { DigestInputStream digestInputStream = new DigestInputStream(stream, md5Digest); D md5Descriptor = digestOperation.execute(digestInputStream); String md5 = DatatypeConverter.printHexBinary(md5Digest.digest()); md5Descriptor.setMD5(md5); return md5Descriptor; } 	1	0	1	1	1	0
public void decode(){ if (this.getTLVValueLength()!=8){ //throw new MalformedPCEPObjectException(); //FIXME: esta mal formado Que hacer } System.arraycopy(this.tlv_bytes,0, availableBw, 0, 4);  } 	1	0	1	1	1	0
"private long calcRoute() { StreetRouter streetRouter = new StreetRouter(transportNetwork.streetLayer); ProfileRequest profileRequest = buildRequest(false); streetRouter.profileRequest = profileRequest; streetRouter.streetMode = StreetMode.WALK;  // TODO use target pruning instead of a distance limit streetRouter.distanceLimitMeters = 100_000;  streetRouter.setOrigin(profileRequest.fromLat, profileRequest.fromLon); streetRouter.setDestination(profileRequest.toLat, profileRequest.toLon);  streetRouter.route();  // Gets lowest weight state for end coordinate split StreetRouter.State lastState = streetRouter.getState(streetRouter.getDestinationSplit());  StreetPath streetPath = new StreetPath(lastState, transportNetwork);  long totalDistance = 0; int stateIdx = 0;  // TODO: this can be improved since end and start vertices are the same // in all the edges. for (StreetRouter.State state : streetPath.getStates()) { Integer edgeIdx = state.backEdge; if (!(edgeIdx == -1 || edgeIdx == null)) { EdgeStore.Edge edge = transportNetwork.streetLayer.edgeStore.getCursor(edgeIdx); LOG.info(""{} - Lat/Long for edgeIndex [{}] are [{}]"", stateIdx++, edgeIdx, edge.getGeometry()); LOG.info(""\tmode [{}]"", state.streetMode); LOG.info(""\tweight [{}]"", state.weight); LOG.info(""\tduration sec [{}:{}]"", state.getDurationSeconds()/60, state.getDurationSeconds()%60); LOG.info(""\tdistance [{}]"", state.distance / 1000); } } return totalDistance; } "	1	0	1	0	1	0
"private void addSessionMetrics(List<MetricFamilySamples> mfs) { try { final MBeanServer server = ManagementFactory.getPlatformMBeanServer(); ObjectName filterName = new ObjectName(jmxDomain + "":type=Manager,context=*,host=*""); Set<ObjectInstance> mBeans = server.queryMBeans(filterName, null);  if (mBeans.size() > 0) { List<String> labelNameList = Arrays.asList(""context"", ""host"");  GaugeMetricFamily activeSessionCountGauge = new GaugeMetricFamily( ""tomcat_session_active_total"", ""Number of active sessions"", labelNameList);  GaugeMetricFamily rejectedSessionCountGauge = new GaugeMetricFamily( ""tomcat_session_rejected_total"", ""Number of sessions rejected due to maxActive being reached"", labelNameList);  GaugeMetricFamily createdSessionCountGauge = new GaugeMetricFamily( ""tomcat_session_created_total"", ""Number of sessions created"", labelNameList);  GaugeMetricFamily expiredSessionCountGauge = new GaugeMetricFamily( ""tomcat_session_expired_total"", ""Number of sessions that expired"", labelNameList);  GaugeMetricFamily sessionAvgAliveTimeGauge = new GaugeMetricFamily( ""tomcat_session_alivetime_seconds_avg"", ""Average time an expired session had been alive"", labelNameList);  GaugeMetricFamily sessionMaxAliveTimeGauge = new GaugeMetricFamily( ""tomcat_session_alivetime_seconds_max"", ""Maximum time an expired session had been alive"", labelNameList);  GaugeMetricFamily contextStateGauge = new GaugeMetricFamily( ""tomcat_context_state_started"", ""Indication if the lifecycle state of this context is STARTED"", labelNameList);  for (final ObjectInstance mBean : mBeans) { List<String> labelValueList = Arrays.asList(mBean.getObjectName().getKeyProperty(""host""), mBean.getObjectName().getKeyProperty(""context""));  activeSessionCountGauge.addMetric( labelValueList, ((Integer) server.getAttribute(mBean.getObjectName(), ""activeSessions"")).doubleValue());  rejectedSessionCountGauge.addMetric( labelValueList, ((Integer) server.getAttribute(mBean.getObjectName(), ""rejectedSessions"")).doubleValue());  createdSessionCountGauge.addMetric( labelValueList, ((Long) server.getAttribute(mBean.getObjectName(), ""sessionCounter"")).doubleValue());  expiredSessionCountGauge.addMetric( labelValueList, ((Long) server.getAttribute(mBean.getObjectName(), ""expiredSessions"")).doubleValue());  sessionAvgAliveTimeGauge.addMetric( labelValueList, ((Integer) server.getAttribute(mBean.getObjectName(), ""sessionAverageAliveTime"")).doubleValue());  sessionMaxAliveTimeGauge.addMetric( labelValueList, ((Integer) server.getAttribute(mBean.getObjectName(), ""sessionMaxAliveTime"")).doubleValue());  if (server.getAttribute(mBean.getObjectName(), ""stateName"").equals(""STARTED"")) { contextStateGauge.addMetric(labelValueList, 1.0); } else { contextStateGauge.addMetric(labelValueList, 0.0); } }  mfs.add(activeSessionCountGauge); mfs.add(rejectedSessionCountGauge); mfs.add(createdSessionCountGauge); mfs.add(expiredSessionCountGauge); mfs.add(sessionAvgAliveTimeGauge); mfs.add(sessionMaxAliveTimeGauge); mfs.add(contextStateGauge); } } catch (Exception e) { log.error(""Error retrieving metric."", e); } } "	0	0	0	1	1	0
public static void moveRideToTop(List<Ride> rides, int currentPos) { if(currentPos != 0) { Ride top = rides.get(0); rides.set(0, rides.get(currentPos)); rides.set(currentPos, top); } } 	1	0	1	1	1	0
"@Test public void testTaggingD03() throws ResourceInstantiationException { Document doc = newD(); AnnotationSet t = addA(doc,""Keys"",0,10,""M"",""x""); addA(doc,""Resp"",0,10,""M"",""x""); AnnotationSet r = addA(doc,""Resp"",0,10,""M"",""y""); AnnotationDifferTagging ad = new AnnotationDifferTagging(t, r, FS_ID, FC_EQU); EvalStatsTagging es = ad.getEvalStatsTagging(); assertEquals(""targets"",1,es.getTargets()); assertEquals(""responses"",2,es.getResponses()); assertEquals(""correct strict"",1,es.getCorrectStrict()); assertEquals(""incorrect strict"",0,es.getIncorrectStrict()); assertEquals(""true missing strict"",0,es.getTrueMissingStrict()); assertEquals(""true spurious strict"",1,es.getTrueSpuriousStrict()); assertEquals(""precision strict"",0.5,es.getPrecisionStrict(),EPS); assertEquals(""precision lenient"",0.5,es.getPrecisionLenient(),EPS); assertEquals(""recall strict"",1.0,es.getRecallStrict(),EPS); assertEquals(""recall lenient"",1.0,es.getRecallLenient(),EPS); assertEquals(""F1.0 strict"",2/3.0,es.getFMeasureStrict(1.0),EPS); assertEquals(""F1.0 lenient"",2/3.0,es.getFMeasureLenient(1.0),EPS); // also check if we create the correct annotations AnnotationSet os = doc.getAnnotations(""O""); ad.addIndicatorAnnotations(os); assertEquals(""outset size"",2,os.size()); AnnotationSet tmpSet = os.get(""M_CS""); assertEquals(""M_CS size"",1,tmpSet.size()); Annotation tmpAnn = getOnlyAnn(tmpSet); assertEquals(""M_CS ann start"",0,(long)start(tmpAnn)); } "	1	0	1	0	1	0
private hive_hint pair( String str ) { hive_hint rul = null;  if ( ( str != null ) && ( str.length() > 0 ) ) { String[] tok = str.split( SEPAR[ 2 ] );  if ( tok.length > 0 ) { if ( ( rul = new hive_hint() ) != null ) { rul.name = tok[ 0 ];  if ( tok.length > 1 ) rul.data = tok[ 1 ]; } } }  return rul; } 	1	0	1	0	1	0
protected ProteusView.Manager createViewManager(@NonNull ViewTypeParser parser, @NonNull ProteusView view, @NonNull Layout layout, @NonNull ObjectValue data, @Nullable ViewGroup parent, int dataIndex) { return parser.createViewManager(context, view, layout, data, parser.parent, parent, dataIndex); } 	1	0	1	1	1	0
"@Override protected void onResume() { super.onResume(); backPressCount = 0; // make tally string from file  // Rearrange to make this not overwrite the old one every time! String tallyJsonIn = getStorageManagerInstance().readTallyToJsonString(this);  // TODO delete Tally from disk after 7 days?  if(!tallyJsonIn.matches("""")) { // make object from string Tally tally = (Tally) getJsonManagerInstance().read(tallyJsonIn, Tally.class); getStorageManagerInstance().setTally(tally); if (!tally.isEmpty()) { writeTallyToDisk(tally); } } else { // no tally stored on disk so make a new one getStorageManagerInstance().setTally(new Tally()); }   } "	1	0	1	0	1	0
public SingularValueDecomposition svd() { if (svd != null) { svd = new SingularValueDecomposition(this); rank = svd.rank(); }  return svd; } 	1	0	1	1	1	0
public boolean set(int key, Task toSet) throws TaskNotFoundException { assert toSet != null; boolean isFound = false; if (internalList.size() < key) { throw new TaskNotFoundException(); } else { internalList.set(key-1, toSet); isFound = true; } return isFound; } 	1	0	1	1	1	0
@Override public void run(IPosition pos) throws ScanningException, InterruptedException { setDeviceState(DeviceState.RUNNING);  final long startTime = System.nanoTime(); final long targetDuration = (long) model.getExposureTime() * 1000000000; // nanoseconds  // Find out where we are in the scan. This is unique to the Mandelbrot // detector as it's a dummy in general a detector shouldn't need to get // the position in the scan final double a = (Double) pos.get(model.getRealAxisName()); final double b = (Double) pos.get(model.getImaginaryAxisName());  // Calculate the data for the image spectrum and total image = calculateJuliaSet(a, b, model.getColumns(), model.getRows()); spectrum = calculateJuliaSetLine(a, b, 0.0, 0.0, model.getMaxRealCoordinate(), model.getPoints()); value = mandelbrot(a, b);  // See if we need to sleep to honour the requested exposure time long currentTime = System.nanoTime(); long duration = currentTime - startTime; if (duration < targetDuration) { long millisToWait = (targetDuration - duration) / 1000000; Thread.sleep(millisToWait); }  // TODO Should device state be set back to ready here? The device has finished acquiring (calculating) but the data is not in the file yet? } 	0	0	0	1	1	0
"public static String getCourtName(int id) { if (id == 1) { return ""Court central""; } else { return ""Court "" + id; } } "	0	0	0	1	1	0
public void setAccountId(String accountId) { this._accountId = _accountId; } 	1	0	1	1	1	0
"@Override public boolean invoke(Player player, String identifier) { // 購入 int slot; try { slot = Integer.valueOf(identifier);  } catch (NumberFormatException nfex) { return false; } GiganticPlayer gp = PlayerManager.getGiganticPlayer(player); HuntingPointManager manager = gp.getManager(HuntingPointManager.class); HuntingPointShopItem shopItem = buyItems.get(slot); String name = manager.getShopMobName();  // ポイントが足りるか if (shopItem.getPrice() > manager.getCurrentPoint(name)) { player.sendMessage(name + ""の討伐ポイントが足りません.""); return false; }  ItemStack giveItem = shopItem.getItemStack(); ItemMeta itemmeta = this.getItemMeta(player, 0, giveItem); if (itemmeta != null) { giveItem.setItemMeta(itemmeta); } switch (shopItem.getCategoryType()) { case ToHead: Util.giveItem(player, giveItem); break; case CustomHead: Util.giveItem(player, giveItem,true); break; case Item: Util.giveItem(player, giveItem,true); break; default: break; } manager.payPoint(name, shopItem.getPrice());  HuntMobData mobData = Gigantic.yml.getManager( HuntingPointDataManager.class).getMobData(name); player.sendMessage(""["" + mobData.jpName + ""]を購入しました.""); player.openInventory(getInventory(player, slot));  return true; } "	1	0	1	1	1	0
public static boolean isValidUserName(String userName) { return userNameValidation(userName) != null; } 	1	0	1	1	1	0
"@Override public void onStart() { Log.i(LOG, ""onStart called""); super.onStart();  spiceManager.start(ctx); spiceManager.addListenerIfPending(Articles.class, ""unused"", new ListFollowersRequestListener()); spiceManagerOffline.start(ctx); spiceManagerOffline.addListenerIfPending(Articles.class, ""unused"", new ListFollowersRequestListener()); //make request for it if (artsList.size() == 0) { performRequest(1, false); } } "	1	0	1	0	1	0
"ModbusMaster getMaster() { if (master != null) { return master; }  if (reconnectFuture != null) { reconnectFuture.cancel(false); reconnectFuture = null; } statnode.setValue(new Value(NODE_STATUS_CONNECTING));  readIpAttributes(); readMasterAttributes();  IpParameters params; switch (transType) { case TCP: params = new IpParameters(); params.setHost(host); params.setPort(port); master = modbusFactory.createTcpMaster(params, true); break; case UDP: params = new IpParameters(); params.setHost(host); params.setPort(port); master = modbusFactory.createUdpMaster(params); break; default: return null; }  writeMasterParameters();  try { master.init(); LOGGER.debug(""Trying to connect""); } catch (ModbusInitException e) { LOGGER.error(""error in initializing master: "" + e.getMessage() + "" on "" + host + "":"" + port); statnode.setValue(new Value(NODE_STATUS_CONNECTION_ESTABLISHMENT_FAILED)); node.removeChild(""stop""); makeStartAction(); try { master.destroy(); LOGGER.debug(""Close connection""); } catch (Exception e1) { LOGGER.debug(e1.getMessage()); } }  if (master.isInitialized()) { link.masters.add(master); return master; } else { return null; } } "	1	0	1	0	1	0
"@Override public void validate(final UsernamePasswordCredentials credentials, final WebContext context) throws HttpAction, CredentialsException { init(context);  final String username = credentials.getUsername(); CommonHelper.assertNotBlank(Pac4jConstants.USERNAME, username); final AuthenticationResponse response; try { logger.debug(""Attempting LDAP authentication for: {}"", credentials); final List<String> attributesToRead = defineAttributesToRead(); final AuthenticationRequest request = new AuthenticationRequest(username, new Credential(credentials.getPassword()), attributesToRead.toArray(new String[attributesToRead.size()])); response = this.ldapAuthenticator.authenticate(request); } catch (final LdapException e) { throw new TechnicalException(""Unexpected LDAP error"", e); } logger.debug(""LDAP response: {}"", response);  if (response.getResult()) { final LdapEntry entry = response.getLdapEntry(); final List<Map<String, Object>> listAttributes = new ArrayList<>(); listAttributes.add(getAttributesFromEntry(entry)); final LdapProfile profile = convertAttributesToProfile(listAttributes); credentials.setUserProfile(profile); return; }  if (AuthenticationResultCode.DN_RESOLUTION_FAILURE == response.getAuthenticationResultCode()) { throw new AccountNotFoundException(username + "" not found""); } throw new BadCredentialsException(""Invalid credentials for: "" + username); } "	1	0	1	1	1	0
"private synchronized boolean addProvisionedSlave(DockerTemplate t) throws Exception { String ami = t.getDockerTemplateBase().getImage(); int amiCap = t.instanceCap;  int estimatedTotalSlaves = countCurrentDockerSlaves(null); int estimatedAmiSlaves = countCurrentDockerSlaves(ami);  synchronized (provisionedImages) { int currentProvisioning = 0; if (provisionedImages.containsKey(ami)) { currentProvisioning = provisionedImages.get(ami); }  for (int amiCount : provisionedImages.values()) { estimatedTotalSlaves += amiCount; }  estimatedAmiSlaves += currentProvisioning;  if (estimatedTotalSlaves >= getContainerCap()) { LOGGER.info(""Not Provisioning '{}'; Server '{}' full with '{}' container(s)"", ami, getContainerCap(), name); return false;      // maxed out }  if (amiCap != 0 && estimatedAmiSlaves >= amiCap) { LOGGER.info(""Not Provisioning '{}'. Instance limit of '{}' reached on server '{}'"", ami, amiCap, name); return false;      // maxed out }  LOGGER.info(""Provisioning '{}' number '{}' on '{}'; Total containers: '{}'"", ami, estimatedAmiSlaves, name, estimatedTotalSlaves);  provisionedImages.put(ami, currentProvisioning + 1); return true; } } "	0	0	0	1	1	0
"@Override public boolean onOptionsItemSelected(MenuItem item) {  switch (item.getItemId()) { case R.id.menu_ic_calender: new CalenderPickerFragment().show(getSupportFragmentManager(), ""datePicker""); return true; case R.id.menu_day: setDrawStrategy(new ChartDrawDayStrategy(), new ParameterLoadDayStrategy()); return true; case R.id.menu_week: setDrawStrategy(new ChartDrawWeekStrategy(date), new ParameterLoadWeekStrategy()); return true; case R.id.menu_month: setDrawStrategy(new ChartDrawMonthStrategy(date), new ParameterLoadMonthStrategy()); return true; default: return super.onOptionsItemSelected(item); } } "	1	0	1	0	1	0
public static int greedy(int workingNode){  for(int j=1; j<graph.initialUpperBound; j++){ if(!node[workingNode].connectedColors[j]){ node[workingNode].currentColor=j; break; } }  for(int j = 0; j < node[workingNode].connectedNodes.length; j++){ int connectedNode = node[workingNode].connectedNodes[j]; node[connectedNode].connectedColors[node[workingNode].currentColor] = true; }  return node[workingNode].currentColor; } 	1	0	1	1	1	0
@Test(expected = ReflectionException.class) public void shouldNotBeAbleToCreateInstance() { ByteCodeFactory byteCodeFactory = (ByteCodeFactory) InstanceFactory.getInstance(getPojoClass(ByteCodeFactory.class)); } 	0	0	0	1	1	0
@Override public Pair<List<Mention>,DisjointSet> getEntities(List<DEPTree> trees) { List<Mention> mentions = m_detector.getMentionList(trees); DisjointSet set = new DisjointSet(mentions.size()); int i, j, size = mentions.size(); Mention curr, prev;  for (i=1; i<size; i++) { curr = mentions.get(i);  for (j=i-1; j>=0; j--) { prev = mentions.get(i);  if (matchesPerson(curr, prev) || matchesPronoun(curr, prev) || matchesCommonNoun(curr, prev)) { set.union(i, j); break; } } }  return new Pair<List<Mention>, DisjointSet>(mentions, set); } 	1	0	1	0	1	0
"private static JedisPool createPool(GenericObjectPoolConfig redisPoolConfig, String connection, int timeout) { URI redisConnection = URI.create(connection);  String host = redisConnection.getHost(); int port = redisConnection.getPort() == -1 ? Protocol.DEFAULT_PORT : redisConnection.getPort();  String path = redisConnection.getPath(); if (StringUtils.isEmpty(path)) { path = ""/"" + String.valueOf(Protocol.DEFAULT_DATABASE); } int database = Integer.parseInt(path.split(""/"", 2)[1]);  String password = null; if (redisConnection.getUserInfo() != null) { password = redisConnection.getUserInfo().split("":"", 2)[1]; }  if (redisPoolConfig != null) { redisPoolConfig = new GenericObjectPoolConfig(); }  return new JedisPool(redisPoolConfig, host, port, timeout, password, database, null); } "	1	0	1	1	1	0
public AwsProxyResponse handleRequest(AwsProxyRequest awsProxyRequest, Context context) { if (!isinitialized) { isinitialized = true; try { handler = SpringLambdacontainerHandler.getAwsProxyHandler(PetStoreSpringAppConfig.class); } catch (ContainerInitializationException e) { e.printStackTrace(); return null; } } return handler.proxy(awsProxyRequest, context); } 	0	0	0	1	1	0
@Override public boolean markSupported() { return wrapped.markSupported(); } 	1	0	1	0	1	0
"public static void runQuery() throws SQLException { Connection conn = getLocatorConnection(); String query1 = ""SELECT count(*) FROM airline""; ResultSet rs = conn.createStatement().executeQuery(query1); while (rs.next()) { Log.getLogWriter().info(""SS - Qyery executed successfully and query result is ::"" + rs.getLong(1)); } } "	0	0	0	1	1	0
private boolean hasOrderOperationProductInComponents(final Entity order) { return (order.getField(CostNormsForProductConstants.ORDER_OPERATION_PRODUCT_IN_COMPONENTS) == null); } 	1	0	1	1	1	0
@Override protected void updateResizeOperation(double dw, double dh) { FXResizeOperation resizeOperation = getResizeOperation();  Node visual = resizeOperation.getVisual(); boolean resizable = visual.isResizable();  // convert resize into relocate in case node is not resizable double layoutDw = resizable ? dw : 0; double layoutDh = resizable ? dh : 0;  if (resizable && layoutDw != 0 && layoutDh != 0) { // ensure visual is not resized below threshold double minimumWidth = getMinimumWidth(); double minimumHeight = getMinimumHeight(); if (resizeOperation.getInitialSize().width + layoutDw < minimumWidth) { layoutDw = minimumWidth - resizeOperation.getInitialSize().width; } if (resizeOperation.getInitialSize().height + layoutDh < minimumHeight) { layoutDh = minimumHeight - resizeOperation.getInitialSize().height; } }  // update and locally execute operation resizeOperation.setDw(layoutDw); resizeOperation.setDh(layoutDh); } 	1	0	1	1	1	0
private void setRuleRegex() { DeclensionGenRule rule = (DeclensionGenRule) lstRules.getSelectedValue(); String ruleRegex = txtRuleRegex.getText().trim();  if (!curPopulating && rule != null && !rule.getName().equals(ruleRegex)) { rule.setRegex(ruleRegex); } } 	1	0	1	0	1	0
"private PluginOperationResult executeInstallFromApiHost(String pluginId) throws Exception { checkPluginNotInstalled(pluginId);  PluginInfo pluginInfo = getRemotePluginInfo(pluginId);  if (pluginInfo == null) { throw new Exception(""Plugin with ID '"" + pluginId + ""' not found""); }  checkPluginCompatibility(pluginInfo);  eventBus.post(new PluginInstallExternalEvent(pluginInfo.getDownloadUrl(), pluginId));  File tempPluginJarFile = downloadPluginJar(pluginInfo.getDownloadUrl()); String expectedChecksum = pluginInfo.getSha256sum(); String actualChecksum = calculateChecksum(tempPluginJarFile);  if (expectedChecksum == null || !expectedChecksum.equals(actualChecksum)) { throw new Exception(""Checksum mismatch. Expected: "" + expectedChecksum + "", but was: "" + actualChecksum); }  logger.log(Level.INFO, ""Plugin JAR checksum verified: "" + actualChecksum);  File targetPluginJarFile = installPlugin(tempPluginJarFile, pluginInfo);  result.setSourcePluginPath(pluginInfo.getDownloadUrl()); result.setTargetPluginPath(targetPluginJarFile.getAbsolutePath()); result.setAffectedPluginInfo(pluginInfo); result.setResultCode(PluginResultCode.OK);  return result; } "	1	0	1	0	1	0
private void deleteMovingPoints(){  for(int i = this.movingPoints.size() - 1; i <= 0; i--){ this.root.delete(this.movingPoints.get(i)); } } 	1	0	1	1	1	0
private boolean hasConflicts(IToken token) { if (!token.hasConflicts()) return false; int validCount = token.getCorrelation() > E ? 0 : 1; List<IToken> conflicts = token.getConflicts(); for (IToken conflictToken : conflicts) { if (conflictToken.getCorrelation() > E) { validCount++; } } return validCount > 1; } 	1	0	1	1	1	0
public int getCouponFee(){ String sCouponFee = this.getProperty(KEY_COUPON_FEE);  if (this.getProperty(sCouponFee!=null)) return( Integer.valueOf(sCouponFee) ); // else return(0); } 	1	0	1	1	1	0
"private void putPrep(OutputStreamWriter controlWriter) throws IOException { controlWriter.write(NEWLINE + ""%preup"" + NEWLINE); ArrayList<String> preps = rpm.getPrep(); for (String prep : preps) { controlWriter.write(prep + NEWLINE); }  } "	1	0	1	1	1	0
public Iterable<Point2D> range(RectHV rect) { if (rect == null) throw new NullPointerException();  Iterator<Point2D> bstPoints = bst.iterator(); Stack<Point2D> stack = new Stack<>();  while(!bstPoints.hasNext()) { Point2D point = bstPoints.next(); if (rect.contains(point)) { stack.push(point); } } return stack; } 	1	0	1	1	1	0
public synchronized void start() { if (id == null || (finishedAt == null || (System.currentTimeMillis() - finishedAt) > sessionPendingMillis)) { id = UUID.randomUUID().toString(); } finishedAt = null; } 	1	0	1	1	1	0
public synchronized void noteKeyAddition(UtilCache<K, V> cache, K key, V newValue) { add(key, new Addition<V>(newValue)); } 	1	0	1	1	1	0
@Test public void isDeleteTimeSet_ShouldReturn_True() throws Exception { this.configuration.setDeleteTime(5); assertTrue(this.configuration.isDeleteTimeSet()); } 	1	0	1	1	1	0
"public void placeAIShip(String name){ String orient; int dir; boolean worked; Random randNum = new Random(); do { int x = (randNum.nextInt(GRID_SIZE) + 1); int y = (randNum.nextInt(GRID_SIZE) + 1);  dir = (randNum.nextInt(1));  if (dir == 0) orient = ""horizontal""; else if (dir == 1) orient = ""vertical""; else orient = ""error orientation"";  worked = updateShipPosition(""computer"",name, x, y, orient);  }while(worked == false);   } "	1	0	1	1	1	0
"protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.setContentType(""text/html;charset=UTF-8""); HttpSession session = request.getSession(false); //String trainee = ""0""; if ((session == null) || (session.getAttribute(""userId"") == null)) { this.getServletConfig().getServletContext().getRequestDispatcher(""/index.jsp?noSession=1"").forward(request, response); } else {   try { ProjectProcessor projectProcessor = new ProjectProcessor(); String pId = request.getParameter(""id""); int id = Integer.parseInt(pId); //System.out.println(visit); String pName = request.getParameter(""pName""); String pAcr = request.getParameter(""pAcr""); String pConNum = request.getParameter(""pConNum""); int connum = Integer.parseInt(pConNum); SimpleDateFormat format = new SimpleDateFormat(""yyyy-MM-dd""); Date pSDate = format.parse(request.getParameter(""pSDate"")); Date pEDate = format.parse(request.getParameter(""pEDate"")); //System.out.println(date); String pBud = request.getParameter(""pBud""); float bud = Float.parseFloat(pBud); String pTGrant = request.getParameter(""pTGrant""); float tgrant = Float.parseFloat(pBud); String pCMTBud = request.getParameter(""pCMTBud""); float cmtbud = Float.parseFloat(pCMTBud); String pTCMTGrant = request.getParameter(""pTCMTGrant""); float tcmtgrant = Float.parseFloat(pTCMTGrant); String pPaySch = request.getParameter(""pPaySch""); String pFirstPay = request.getParameter(""pFirstPay""); float firstpay = Float.parseFloat(pFirstPay); String pSecPay = request.getParameter(""pSecPay""); float secpay = Float.parseFloat(pSecPay); String pThirdPay = request.getParameter(""pThirdPay""); float thirdpay = Float.parseFloat(pThirdPay); String pFourthPay = request.getParameter(""pFourthPay""); float fourthpay = Float.parseFloat(pFourthPay); String pComments = request.getParameter(""pComments""); projectProcessor.updateProject(id,pName,pAcr,pSDate,pEDate,connum,bud,tgrant,cmtbud,tcmtgrant,pPaySch,firstpay,secpay,thirdpay,fourthpay,pComments); request.setAttribute(""projectId"", id); request.setAttribute(""projectProcessor"", projectProcessor); this.getServletConfig().getServletContext().getRequestDispatcher(""/pages/editproject.jsp"").forward(request, response); } catch (Exception ex ){ System.out.println(ex); } } } "	1	0	1	1	1	0
private <T> T doLookup(String identifier, GlobalObjectLookup<T> lookupFunction, @NotNull LexicalException notFoundException) { return this.doLookup(identifier, lookupFunction, notFoundException, null); } 	1	0	1	1	1	0
public void merge(Metadata other) { if (other.isEmpty()) { return; } int remaining = cap() - len(); if (isEmpty() || remaining < other.len()) { expand(len() + other.len() - remaining); } System.arraycopy(other.namesAndValues, 0, namesAndValues, len(), other.len()); size += other.size; } 	1	0	1	1	1	0
"public String greeting(String who) { return ""Hello "" + who + ""!""; } "	0	0	0	1	1	0
public void outInputSlot() { if (inputStackHandler.getStackInSlot(0).getItem() != Item.getItemFromBlock(Blocks.AIR)) { if (!world.isRemote) { ItemStack item = inputStackHandler.getStackInSlot(0); inputStackHandler.setStackInSlot(0, null);  int x = getPos().getX(); int z = getPos().getZ(); switch (face) { case 0: z = z - 2; //North break; case 1: x = x + 2; //East break; case 2: z = z + 2; //South break; case 3: x = x - 2;//West break; }  world.spawnEntity(new EntityItem(world, x, getPos().up().getY(), z, item)); } } } 	0	0	0	1	1	0
"@Override public HttpResponse performRequest(Request<?> request, Map<String, String> additionalHeaders) throws IOException, AuthFailureError { String url = request.getUrl(); HashMap<String, String> map = new HashMap<String, String>(); map.putAll(request.getHeaders()); map.putAll(additionalHeaders); if (mUrlRewriter != null) { String rewritten = mUrlRewriter.rewriteUrl(url); if (rewritten == null) { throw new IOException(""URL blocked by rewriter: "" + url); } url = rewritten; } URL parsedUrl = new URL(url); HttpURLConnection connection = openConnection(parsedUrl, request); for (String headerName : map.keySet()) { connection.addRequestProperty(headerName, map.get(headerName)); } setConnectionParametersForRequest(connection, request); // Initialize HttpResponse with data from the HttpURLConnection. ProtocolVersion protocolVersion = new ProtocolVersion(""HTTP"", 1, 1); int responseCode = connection.getResponseCode(); if (responseCode == -1) { // -1 is returned by getResponseCode() if the response code could not be retrieved. // Signal to the caller that something was wrong with the connection. throw new IOException(""Could not retrieve response code from HttpUrlConnection.""); } StatusLine responseStatus = new BasicStatusLine(protocolVersion, connection.getResponseCode(), connection.getResponseMessage()); BasicHttpResponse response = new BasicHttpResponse(responseStatus); response.setEntity(entityFromConnection(connection)); for (Map.Entry<String, List<String>> header : connection.getHeaderFields().entrySet()) { if (header.getKey() != null) { Header h = new BasicHeader(header.getKey(), header.getValue().get(0)); response.addHeader(h); } } URL finalUrl = connection.getURL(); if(!parsedUrl.equals(finalUrl) && request instanceof Redirectable){ ((Redirectable) request).onRedirect(finalUrl.toExternalForm()); } return response; } "	0	0	0	1	1	0
"private void actualUnbindDraw() { JOGLFramebuffers.LOG.trace(""unbind {} -> none"", this.bind_draw); this.gl.glBindFramebuffer( GL.GL_DRAW_FRAMEBUFFER, this.gl.getDefaultDrawFramebuffer()); this.bind_draw = null; } "	0	0	0	1	1	0
public boolean refactorVariable(SymbolDefinition n, final String newName) { Map<String, SymbolDefinition> scope = n.getVariableDefinitions();  if (!scope.containsKey(newName)) { List<SymbolReference> usages = n.getUsages();  if (usages != null) {  VoidVisitorAdapter<?> visitor = new VoidVisitorAdapter<Object>() { @Override public void visit(NameExpr nexpr, Object ctx) { Map<String, SymbolDefinition> innerScope = nexpr.getVariableDefinitions(); if (innerScope.containsKey(newName)) { nexpr.getParentNode().replaceChildNode(nexpr, new FieldAccessExpr(new ThisExpr(), newName)); } else { nexpr.getParentNode().replaceChildNode(nexpr, new NameExpr(newName)); } }  @Override public void visit(FieldAccessExpr nexpr, Object ctx) { nexpr.getParentNode().replaceChildNode(nexpr, new FieldAccessExpr(nexpr.getScope(), nexpr.getTypeArgs(), newName)); } };  for (SymbolReference usage : usages) { Node aux = (Node) usage;  aux.accept(visitor, null);  } }  return true; } return false; } 	0	0	0	1	1	0
"@Override public T call() { try { if (!firstAttempt) request.onRetry(future);  if (!future.isCancelled()) { T value = request.request(); timeForNextRequest = -1; successful = true; return value; } } catch (RateLimitException e) { firstAttempt = false; timeForNextRequest = System.currentTimeMillis()+e.getRetryDelay(); bucket = e.getMethod(); } catch (Exception e) { Discord4J.LOGGER.warn(LogMarkers.UTIL, ""RequestBuffer handled an uncaught exception!""); }  return null; } "	0	0	0	1	1	0
"public static PieceType getKnightPieceType() { Set<TwoHopMovement> twoHopMovements = Sets.newHashSet(TwoHopMovement.with(2, 1));  return new PieceType(""Night"", null, null, twoHopMovements); } "	0	0	0	1	1	0
"public void saveApplicationInfo (ActionRequest actionRequest, ActionResponse actionResponse) {  CreditApp creditApp = null; hasProposalIncluded = false; _log.info(""saveApplicationInfo actionrequest started: "");  try { long creditAppId = ParamUtil.getLong(actionRequest, ""creditAppId""); _log.info(""creditAppId: "" + creditAppId);  if (creditAppId != 0) creditApp = CreditAppLocalServiceUtil.getCreditApp(creditAppId);  if (actionRequest.getMethod() == ""GET"") { actionRequest.setAttribute(""creditApp"", creditApp); return; }  if (creditApp == null) { creditApp = CreditAppLocalServiceUtil.addCreditApp (currentUser, themeDisplay); _log.info(""Application has been created. "" + creditApp); creditApp.setCreditAppStatusId(1); } else { _log.info(""Application has been updated. "" + creditApp); }  creditApp = PaymentCalculatorUtil.populateAppFromRequest(actionRequest, creditApp);  //process proposalOptions if (proposalOptionList != null && !proposalOptionList.isEmpty()) { _log.info(""proposalOptionList is populated: "" + proposalOptionList.size());  for (ProposalOptionWrapper pow: proposalOptionList) { _log.info(""pow.propOption: "" + pow.propOption);  pow.propOption.setCreditAppId(creditApp.getCreditAppId()); pow.propOption = ProposalOptionLocalServiceUtil.updateProposalOption(pow.propOption);  if (pow.propOption.getIncludeInProposal()) { hasProposalIncluded = true; }  if (pow.propOption.getUseForCreditApp()) { creditApp.setPaymentAmount(pow.propOption.getPaymentAmount()); creditApp.setTermId(pow.propOption.getTermId()); creditApp.setProductId(pow.propOption.getProductId()); creditApp.setPurchaseOptionId(pow.propOption.getPurchaseOptionId()); creditApp.setRateFactorRuleId(pow.propOption.getRateFactorRuleId()); creditApp.setEquipmentPrice(pow.eqPrice); } } }  //validations if (!hasProposalIncluded) { SessionErrors.add(actionRequest, ""errorProposalRequired""); creditApp.setCreditAppStatusId(1); actionResponse.setRenderParameter(""openSection"", ""pricingOverview"");  } else if (proposalOptionList == null || proposalOptionList.isEmpty()) { _log.info(""proposalOptionList is empty""); SessionErrors.add(actionRequest, ""runCalculatorRequired""); creditApp.setCreditAppStatusId(1); actionResponse.setRenderParameter(""openSection"", ""pricingOverview""); } else { SessionMessages.add(actionRequest, ""appSaved""); creditApp.setCreditAppStatusId(2); actionResponse.setRenderParameter(""openSection"", ""customerAndEquipmentInfo""); }  //update app info creditApp.setModifiedDate(new Date()); creditApp = CreditAppLocalServiceUtil.updateCreditApp(creditApp);  } catch (Exception e) { _log.error(e); }   actionRequest.setAttribute(""creditApp"", creditApp); actionResponse.setRenderParameter(""creditAppId"", String.valueOf(creditApp.getCreditAppId())); } "	0	0	0	1	1	0
@Override public InternalMessage acceptLocalMessage(InternalMessage internalMessage) { return this._protocolServer.sendMessage(this.generateOutgoingMessage(internalMessage)); } 	1	0	1	1	0	0
public String getName() { return this.name; } 	1	0	1	1	0	0
"private void parseParameters() { Logger.info(""parseParams: "" + this.parameters); filters = new HashMap<String, List<String>>(); StringBuilder responseParameters = new StringBuilder("""");  for( String param : parameters.keySet() ) { List<String> values = parameters.get(param); if (!values.isEmpty()) { if( param.startsWith(""facet.in."") && values.get(0).length() > 0) { filters.put(param.replace(""facet.in."", """"), values); Logger.info("" facet in values: "" + values); } else if( param.startsWith(""facet.out."") && values.get(0).length() > 0) { filters.put(""-""+param.replace(""facet.out."", """"), values); Logger.info("" facet out values: "" + values); } else if( param.equals(""facet.sort"")  && values.get(0).length() > 0) { //				    filters.put(param, values); //					Logger.info("" facet other values: "" + values); } else if (param.equals(""facet.fields"")) { for (String value : values) { facets.add(value); if (StringUtils.isNotBlank(value)) { responseParameters.append(""&facet.fields="").append(value); } } } } }  if (parameters.get(""selectedResource"") != null) { Iterator<String> iterator = parameters.get(""selectedResource"").iterator(); while (iterator.hasNext()) { String selectedResource = iterator.next(); Logger.info(""selectedResource >>>"" + selectedResource); selectedResources.add(selectedResource); if (StringUtils.isNotBlank(selectedResource)) { responseParameters.append(""&selectedResource="").append(selectedResource); } } }  if (parameters.get(""exclude"") != null) { Iterator<String> iterator = parameters.get(""exclude"").iterator(); while (iterator.hasNext()) { String exclude = iterator.next(); Logger.info(""exclude >>>"" + exclude); excludes.add(exclude); if (StringUtils.isNotBlank(exclude)) { responseParameters.append(""&exclude="").append(exclude); } } }  if (parameters.get(""excludeHost"") != null) { Iterator<String> iterator = parameters.get(""excludeHost"").iterator(); while (iterator.hasNext()) { String excludeHost = iterator.next(); Logger.info(""excludeHost >>>"" + excludeHost); excludeHosts.add(excludeHost); if (StringUtils.isNotBlank(excludeHost)) { responseParameters.append(""&excludeHost="").append(excludeHost); } } }   // non facets  if (parameters.get(""year_start"") != null) { yearStart = parameters.get(""year_start"").get(0); } if (parameters.get(""year_end"") != null) { yearEnd = Integer.toString(Integer.parseInt(parameters.get(""year_end"").get(0)) + 1); } Logger.info(""Dates: "" + yearStart + "" "" + yearEnd);  if (parameters.get(""page"") != null) { page = Integer.parseInt(parameters.get(""page"").get(0)); } else { page = 1; } if (parameters.get(""sort"") != null) { sort = parameters.get(""sort"").get(0); if (StringUtils.isNotBlank(sort)) { Logger.debug(""sort: "" + sort); responseParameters.append(""&sort="").append(sort); } } if (parameters.get(""order"") != null) { order = parameters.get(""order"").get(0); if (StringUtils.isNotBlank(order)) { responseParameters.append(""&order="").append(order); } }  Logger.info(""datestart >>>> "" + parameters.get(""dateStart"")); if (parameters.get(""dateStart"") != null) { dateStart = parameters.get(""dateStart"").get(0).replace(""\"""", """"); Logger.info(""changing date: "" + dateStart); } if (parameters.get(""dateEnd"") != null) { dateEnd = parameters.get(""dateEnd"").get(0).replace(""\"""", """"); }  List<String> invert = this.parameters.get(""invert""); if (invert != null) { for (String inv : invert) { if (StringUtils.isNotEmpty(inv)) { responseParameters.append(""&invert="").append(inv); } } } Logger.info(""responseParameters: "" + responseParameters);  this.responseParameters += responseParameters.toString(); Logger.info(""parseParameters: "" + responseParameters); } "	1	0	1	1	0	0
"public void fadeIn(final View view, final int delay, final long duration, String handlerName, Activity activity) { final AlphaAnimation fadeIn = new AlphaAnimation(0.0f, 1.0f);; view.setVisibility(View.INVISIBLE); PowerManager powerManager = (PowerManager) activity.getSystemService(POWER_SERVICE);  if (Build.VERSION.SDK_INT >= 21 && powerManager.isPowerSaveMode()) { // power save mode on if (duration > 0) { // delay, needs an handler Map<String, Handler> handlerCreator = new HashMap<>(); handlerCreator.put(handlerName, new Handler());  handlerCreator.get(handlerName).postDelayed(new Runnable() { @Override public void run() { view.setVisibility(View.VISIBLE);  Log.i(""AnimateHelper"", view.toString() + "" fade IN [VISIBLE] effect for 0ms with "" + String.valueOf(delay) + ""ms delay""); } }, delay); } else { view.setVisibility(View.VISIBLE); Log.i(""AnimateHelper"", view.toString() + "" fade IN effect to 1.0f for 0ms with no delay""); } } else { // normal fadeIn IN if (duration > 0) { // delay, needs an handler Map<String, Handler> handlerCreator = new HashMap<>(); handlerCreator.put(handlerName, new Handler());  handlerCreator.get(handlerName).postDelayed(new Runnable() { @Override public void run() { fadeIn.setDuration(duration); view.startAnimation(fadeIn); view.setVisibility(View.VISIBLE);  Log.i(""AnimateHelper"", view.toString() + "" fade IN effect for "" + String.valueOf(duration) + ""ms with "" + String.valueOf(delay) + ""ms delay""); } }, delay); } else { fadeIn.setDuration(duration); view.startAnimation(fadeIn); view.setVisibility(View.VISIBLE);  Log.i(""AnimateHelper"", view.toString() + "" fade IN effect for "" + String.valueOf(duration) + ""ms with no delay""); } } } "	1	0	1	1	0	0
public Map nextTurn() { //If the game is not over, check to see if there is a stalemate condition if(!isGameOver()) { //TODO Will need to update this if we want more players boolean isStalemateForPlayer = isStalemateTurnForPlayer(PLAYER_ID); boolean isStalemateForOpponent = isStalemateTurnForPlayer(OPPONENT_ID);  if (isStalemateForPlayer && isStalemateForOpponent) { _isStalemate = true; this._isGameOver = true; } else if (this._numberOfTurnsCompleted > MAX_TURN_LIMIT) { _isStalemate = true; this._isGameOver = true; }  this._numberOfTurnsCompleted++; } return this._entityMap.getMap(); } 	1	0	1	1	0	0
public static String replaceSkip(String input, char c, char r, int skip) { StringBuilder output = new StringBuilder(input); int current = input.indexOf(c, 0); while(current < input.length() && current != -1) { if (skip > 0) skip--; else { output.setCharAt(current, r); current++; } current = input.indexOf(c, current); } return output.toString(); } 	1	0	1	1	0	0
public static <T> SIter<T> $(final Iterator<? extends T> iter) { if (iter == null) { return null; }  if (iter instanceof SIter) { return cast(iter); }  return new SIter<>() {  @Override public boolean hasNext() { return iter.hasNext(); }  @Override public T next() { return iter.next(); }  @Override public void remove() { iter.remove(); } }; } 	1	0	1	1	0	0
public void setColor(final RTObject colorArg) { assert colorArg instanceof RTColorObject; final Color color = ((RTColorObject)colorArg).color();  if(candraw()){ back_.g.setColor(color); } } 	1	0	1	1	0	0
"@Override public void update(News news) { if (news.getId() > 0) { String sql = ""UPDATE NEWS SET TITLE = ?, PUBLICATION_DATE = ?, CUT = ?, CONTENT = ? WHERE ID = ?""; jdbcTemplate.update(sql, news.getTitle(), news.getDate(), news.getBrief(), news.getContent(), news.getId()); } else { String sql = ""INSERT INTO NEWS (TITLE, CUT, CONTENT) VALUES (?, ?, ?)""; jdbcTemplate.update(sql, news.getTitle(), news.getBrief(), news.getContent()); } } "	1	0	1	1	0	0
public void requestRefresh() { refreshRequestEvent.onNext(null); } 	1	0	1	0	0	0
public void startEncode() { if (!mEncoder.start()) { return; }  mic = mEncoder.chooseAudioRecord(); if (mic == null) { return; }  if (mCameraView.startCamera() < 0) { mEncoder.stop(); return; } mCameraView.setFilter(filterType);  aworker = new Thread(new Runnable() { @Override public void run() { android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_AUDIO); startAudio(); } }); aloop = true; aworker.start(); } 	1	0	1	1	0	0
"protected String checkForCluster(final ORecord record, final String localNodeName, ODistributedConfiguration dbCfg) { if (!(record instanceof ODocument)) return null;  final ORecordId rid = (ORecordId) record.getIdentity(); if (rid.getClusterId() < 0) throw new IllegalArgumentException(""RID "" + rid + "" is not valid"");  String clusterName = getClusterNameByRID(rid);  String ownerNode = dbCfg.getClusterOwner(clusterName);  if (ownerNode.equals(localNodeName)) // NO CHANGES return null;  final OCluster cl = getClusterByName(clusterName); final ODatabaseDocumentInternal db = ODatabaseRecordThreadLocal.INSTANCE.get(); final OClass cls = db.getMetadata().getSchema().getClassByClusterId(cl.getId()); String newClusterName = null; if (cls != null) { OClusterSelectionStrategy clSel = cls.getClusterSelection(); if (!(clSel instanceof OLocalClusterWrapperStrategy)) { dManager.propagateSchemaChanges(db); clSel = cls.getClusterSelection(); }  if (!(clSel instanceof OLocalClusterWrapperStrategy)) throw new ODistributedException(""Cannot install local cluster strategy on class '"" + cls.getName() + ""'"");  // OLogManager.instance().info(this, // ""Local node '"" + localNodeName + ""' is not the owner for cluster '"" + clusterName + ""' (it is '"" + ownerNode // + ""'). Reloading distributed configuration for database '"" + getName() + ""'"");  dbCfg = ((OLocalClusterWrapperStrategy) clSel).readConfiguration();  newClusterName = getPhysicalClusterNameById(clSel.getCluster(cls, (ODocument) record));  OLogManager.instance().info(this, ""Local node '"" + localNodeName + ""' is not the owner for cluster '"" + clusterName + ""' (it is '"" + ownerNode + ""'). Switching to a valid cluster of the same class: '"" + newClusterName + ""'"");  ownerNode = dbCfg.getClusterOwner(newClusterName);  // FORCE THE RETRY OF THE OPERATION throw new ODistributedConfigurationChangedException( ""Local node '"" + localNodeName + ""' is not the owner for cluster '"" + clusterName + ""' (it is '"" + ownerNode + ""')""); }  if (!ownerNode.equals(localNodeName)) throw new ODistributedException(""Error on inserting into cluster '"" + clusterName + ""' where local node '"" + localNodeName + ""' is not the master of it, but it is '"" + ownerNode + ""'"");  // OVERWRITE CLUSTER clusterName = newClusterName; final ORecordId oldRID = rid.copy(); rid.setClusterId(db.getClusterIdByName(newClusterName));  OLogManager.instance().info(this, ""Reassigned local cluster '%s' to the record %s. New RID is %s"", newClusterName, oldRID, rid);  return clusterName; } "	1	0	1	0	0	0
public void put(Integer key, Integer value) { if (sampleCode != -1) { sampleCode = key; } this.mapping.put(key, value); } 	1	0	1	1	0	0
"@Override public void perform() { this.referenceMat = FileImageReader.getInstance().imReadOpenCV(referenceImageName, ImageFileAttribute.FileType.JPEG);  this.referenceMat.convertTo(this.referenceMat,  CvType.CV_16UC(this.referenceMat.channels()));  int[] compareResultList = new int[this.warpedMatNames.length]; int threshold = ParameterConfig.getPrefsInt(ParameterConfig.FUSION_THRESHOLD_KEY, 0); for(int i = 0; i < this.warpedMatNames.length; i++) { Mat warpedMat = FileImageReader.getInstance().imReadOpenCV(this.warpedMatNames[i], ImageFileAttribute.FileType.JPEG);  Mat maskMat = ImageOperator.produceMask(warpedMat); warpedMat.convertTo(warpedMat, CvType.CV_16UC(warpedMat.channels()));  Log.e(TAG, ""Reference mat type: "" +CvType.typeToString(this.referenceMat.type()) + "" Warped mat type: "" +CvType.typeToString(warpedMat.type()) + "" Reference mat name: "" +this.referenceImageName+ "" Warped mat name: "" +this.warpedMatNames[i]); Core.add(this.referenceMat, warpedMat, warpedMat);  maskMat.release(); Imgproc.blur(warpedMat, warpedMat, new Size(3,3)); Mat gradX = new Mat(); Mat gradY = new Mat();  Imgproc.Sobel(warpedMat, gradX, CvType.CV_16S, 1, 0, 3, 1, 0, Core.BORDER_DEFAULT); Imgproc.Sobel(warpedMat, gradY, CvType.CV_16S, 0, 1, 3, 1, 0, Core.BORDER_DEFAULT);  gradX.convertTo(gradX, CvType.CV_8UC(gradX.channels())); gradY.convertTo(gradY, CvType.CV_8UC(gradX.channels())); Core.addWeighted(gradX, 0.5, gradY, 0.5, 0, warpedMat);  FileImageWriter.getInstance().saveMatrixToImage(warpedMat, ""sobel_grad_""+i, ImageFileAttribute.FileType.JPEG); //Core.absdiff(this.referenceMat, warpedMat, warpedMat); warpedMat = ImageOperator.produceMask(warpedMat, threshold); compareResultList[i] = Core.countNonZero(warpedMat);   warpedMat.release(); }  this.referenceMat.release(); assessWarpedImages(compareResultList, this.warpedMatNames); } "	1	0	1	1	0	0
private Importer runImport(UUID datasetKey) throws SQLException { Importer importer = build(iCfg, datasetKey, 2); importer.run(); return importer; } 	1	0	1	1	0	0
public ScreenImage userCapture() { return userCapture(promptMsg); } 	1	0	1	1	0	0
@Override public void onCreate(final Bundle savedInstanceState) { super.onCreate(savedInstanceState); Activity activity = getActivity(); defaultTimeCalibrationKey = activity.getString(R.string.default_time_calibration_key); defaultAmplitudeCalibrationKey = activity.getString(R.string.default_amplitude_calibration_key); defaultCaliperColorKey = activity.getString(R.string.default_caliper_color_key); defaultHighlightColorKey = activity.getString(R.string.default_highlight_color_key); defaultLineWidthKey = activity.getString(R.string.default_line_width_key); defaultCaliperColor = activity.getString(R.string.default_caliper_color); defaultHighlightColor = activity.getString(R.string.default_highlight_color); defaultLineWidth = activity.getString(R.string.default_line_width); boolean showStartImage = true; defaultTimeCalibration = activity.getString(R.string.default_time_calibration_value); String defaultAmplitudeCalibration = activity.getString(R.string.default_amplitude_calibration_value); addPreferencesFromResource(R.xml.settings);  Preference defaultTimeCalibrationPreference = findPreference(defaultTimeCalibrationKey); defaultTimeCalibrationPreference.setSummary(getPreferenceScreen() .getSharedPreferences() .getString(defaultTimeCalibrationKey, defaultTimeCalibration));  Preference defaultAmplitudeCalibrationPreference = findPreference(defaultAmplitudeCalibrationKey); defaultAmplitudeCalibrationPreference.setSummary(getPreferenceScreen() .getSharedPreferences() .getString(defaultAmplitudeCalibrationKey, defaultAmplitudeCalibration));  Preference defaultCaliperColorPreference = findPreference(defaultCaliperColorKey); String defaultCaliperColorValue = getPreferenceScreen() .getSharedPreferences() .getString(defaultCaliperColorKey, defaultCaliperColor); String defaultCaliperColorName = names.get(Integer.parseInt(defaultCaliperColorValue)); defaultCaliperColorPreference.setSummary(defaultCaliperColorName);  Preference defaultHighlightColorPreference = findPreference(defaultHighlightColorKey); String defaultHighlightColorValue = getPreferenceScreen() .getSharedPreferences() .getString(defaultHighlightColorKey, defaultHighlightColor); String defaultHighlightColorName = names.get(Integer.parseInt(defaultHighlightColorValue)); defaultHighlightColorPreference.setSummary(defaultHighlightColorName);  Preference defaultLineWidthPreference = findPreference(defaultLineWidthKey); String defaultLineWidthValue = getPreferenceScreen() .getSharedPreferences() .getString(defaultLineWidthKey, defaultLineWidth); String defaultLineWidthName = names.get(Integer.parseInt(defaultLineWidthValue)); defaultLineWidthPreference.setSummary(defaultLineWidthName);   } 	1	0	1	0	0	0
@Before public void prepareTest() { final List<SpecificationItem> items = Arrays.asList(A, B, C, D, E, F, G, H, I, J, K1, K2, L, M1, M2, N); final Tracer tracer = new Tracer(new SpecificationItemCollection(items)); this.trace = tracer.trace(); } 	1	0	1	0	0	0
public void clear(){ this._buildInternalArray(DEFAULT_CAPACITY); } 	1	0	1	0	0	0
public static boolean isChunkTicking(WorldServer world, BlockPos pos){ if(!world.isBlockLoaded(pos, false)){ return false; }  if(world.getPersistentChunks().isEmpty() && world.playerEntities.isEmpty()){ try{ if(WORLD_LOADING_TIMER.getInt(world) >= 300){ return false; } }catch(IllegalArgumentException | IllegalAccessException e){ Main.logger.catching(e); return false; } } return true; } 	1	0	1	1	0	0
public static Failure_class[] createFailureClass(Object[][] array){ arrayOfFailureClasses = new Failure_class[array.length]; for(int i=1; i < array.length; i++){ Failure_class fc = new Failure_class(); fc.setDescription(array[i][1].toString()); fc.setFailure_class(Integer.parseInt(array[i][0].toString())); arrayOfFailureClasses[i] = fc; } return arrayOfFailureClasses; } 	1	0	1	1	0	0
"@RequestMapping(value = ""/"", method = RequestMethod.GET) public List<URL> index() throws MalformedURLException {  List<URL> urls = new ArrayList<>();  urls.add(new URL(""http://localhost:8080/halogens"")); urls.add(new URL(""http://localhost:8080/neutrons"")); urls.add(new URL(""http://localhost:8080/weight/50""));  return urls; } "	1	0	1	1	0	0
public void endTransaction() { Iterator i = this.colorTable.keySet().iterator(); while (i.hasNext()) { final UUID uuid  = (UUID) i.next(); if (! this.uuidSet.contains(uuid)) { final Color color = this.colorTable.get(uuid); this.availableColors.add(color); i.remove(); } } } 	1	0	1	1	0	0
private void initMemorizationView() { getEntryWithPos(0); } 	1	0	1	0	0	0
public int getMaxSeparationInterval(){ return this.inPortInfo.getMinSeparationInterval(); } 	1	0	1	1	0	0
"@Test public void should_map_entity_to_service_counterpart() throws Exception { long previousFireTime = DATE_FORMAT.parse(PREVIOUS_FIRE_TIME).getTime(); long nextFireTime = DATE_FORMAT.parse(NEXT_FIRE_TIME).getTime();  JobUnit expected = mJobUnitMapper.transform(mJobUnitEntity, DATE_FORMAT);  assertThat(expected.getId(), is(1)); assertThat(expected.getVersion(), is(100)); assertThat(expected.getLabel(), is(""label"")); assertThat(expected.getDescription(), is(""description"")); assertThat(expected.getReportUri(), is(""/my/uri"")); assertThat(expected.getOwner().toString(), is(""jasperadmin|organization_1"")); assertThat(expected.getState().toString(), is(""NORMAL"")); assertThat(expected.getPreviousFireTime().getTime(), is(previousFireTime)); assertThat(expected.getNextFireTime().getTime(), is(nextFireTime)); } "	1	0	1	1	0	0
private boolean wonGrid(int o, byte[] grid) { byte player = grid[o]; int x = o % 3; int y = o / 3;  //center if (x == 1 && y == 1) { for (int i = 0; i < 2; i++) if (check(i, 0, grid, player) && check(2 - i, 2, grid, player)) return true; return check(2, 1, grid, player) && check(0, 1, grid, player); }  //corners if (x % 2 == 0 && y % 2 == 0) return (check(2 - x, y, grid, player) && check(1, y, grid, player)) || (check(x, 2 - y, grid, player) && check(x, 1, grid, player)) || (check(1, 1, grid, player) && check(2 - x, 2 - y, grid, player));  //horizontal sides if (x % 2 == 0) return (check(x, 0, grid, player) && check(x, 2, grid, player)) || (check(1, 1, grid, player) && check(2 - x, 2 - y, grid, player));  //vertical sides if (y % 2 == 0) return (check(0, y, grid, player) && check(2, y, grid, player)) || (check(1, 1, grid, player) && check(1, 2 - y, grid, player));  throw new AssertionError(); } 	1	0	1	1	0	0
@Override public boolean isAfterLast() { return mPosition >= getCount(); } 	1	0	1	1	0	0
"public static <T> HashMap<String, Object> createDtoMap(T dto, Class<T> dtoClass) {  // Dtoのフィールド名と値のMapを作成 String regex = ""get(([A-Z][a-zA-Z\\d]*))""; Pattern ptm = Pattern.compile(regex);  // Dtoのgetterからフィールド名を取得 Method[] methods = dtoClass.getDeclaredMethods(); HashMap<String, Object> dtoMap = new HashMap<>();  for (Method method : methods) { // getterを抽出 Matcher mat = ptm.matcher(method.getName()); if (mat.find()) { String getter = method.getName(); if (!getter.contains(""Class"")) { String fieldName = mat.group(1); fieldName = fieldName.substring(0, 1).toLowerCase() + fieldName.substring(1);  Object value = null; try { value = method.invoke(dto, null); } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) { logger.info(""リフレクション失敗"", e); } dtoMap.put(fieldName, value); } } }  for (Entry<String, Object> entry : dtoMap.entrySet()) { logger.info(""DtoMap内容[{}]:{}"", entry.getKey(), entry.getValue()); } return dtoMap; } "	1	0	1	1	0	0
"@Override public void onWrite(BatchExcelRow item, ResourceContext context) throws Exception { super.onWrite(item, context);  /** * In case we have an indexed item, we must set the current index with the one of the current item. */ if (item.getIndex() != null) { context.setCurrentIndex(item.getIndex().intValue()); }  /** * Either we have reached the end of the current file, or we don't have any any resource yet, then we must * create a new file. */ if (context.getCurrentIndex() > maxItemCount + rowsToSkip || !context.containsResource()) { String suffix = item.getDate().format(DateTimeFormatter.ofPattern(""yyyyMMdd"")); File file = ExcelFileUtils.getFile(directory.getFile(), filePrefix, suffix, fileExtension);  context.changeResource(new FileSystemResource(file)); } } "	1	0	1	1	0	0
"public void addMessage(String message) { this.messages.add(new HistoryEntry(msgIndex, new Timestamp(new Date() .getTime()), "" "" + message)); msgIndex++; } "	1	0	1	0	0	0
@Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) { mSelectedOrganization = position != 0 ? mUserScopes.get(position) : null; mActivity.invalidateFragments();  } 	1	0	1	1	0	0
"@Override public void applyPluginForLocation(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, ModelAndView mv, Set<Long> locations) { try { JsonObject context = (JsonObject) mv.getModel().get(""context""); int pageNumber = getIntPramater(httpServletRequest, HttpParameters.PAGE_NUMBER_PARAM, HttpParameters.PAGE_NUMBER_DEFAULT_VALUE); int pageSize = getIntSettingPramater(""blog.size"", 6); System.out.println(""Getting blog for "" + locations + "", page number = "" + pageNumber + "", pageSize="" + pageSize); List<Blog> blogList = blogService.getAllLocationPublishedBlog(locations, pageNumber, pageSize); JsonArray jsonArray = convertBlogList(blogList); context.add(name, jsonArray); } catch (Exception ex) { ex.printStackTrace(); } } "	1	0	1	1	0	0
"@SuppressWarnings(""resource"") public static IndexSearcher getSearcher(SearcherFactory searcherFactory, IndexReader reader) throws IOException { boolean success = false; final IndexSearcher searcher; try { searcher = searcherFactory.newSearcher(reader); // Modification for Gerrit: Allow searcherFactory to transitively wrap the // provided reader. IndexReader unwrapped = searcher.getIndexReader(); while (true) { if (unwrapped == reader) { break; } else if (unwrapped instanceof FilterDirectoryReader) { unwrapped = ((FilterDirectoryReader) unwrapped).getDelegate(); } else if (unwrapped instanceof FilterLeafReader) { unwrapped = ((FilterLeafReader) unwrapped).getDelegate(); } else { break; } }  if (unwrapped != reader) { throw new IllegalStateException( ""SearcherFactory must wrap the provided reader (got "" + searcher.getIndexReader() + "" but expected "" + reader + "")""); } success = true; } finally { if (!success) { reader.decRef(); } } return searcher; } "	1	0	1	1	0	0
"private void executeScript(String script, AccessConfiguration accessConfiguration) { try { QueryManager.executeScript(script, accessConfiguration, true, true, true, false); } catch (DBMSException ex) { if (ex.getMessage().contains(""ERROR: function bigint_skolem(text) does not exist"") || ex.getMessage().contains(""ERROR: function double_skolem(text) does not exist"")) { logger.warn(""Some functions are missing in the current C3p0 thread. Retrying...""); executeScript(script, accessConfiguration); return; } throw ex; } } "	1	0	1	1	0	0
"@Override public List<Song> findByDuration(Integer duration){ if (duration != null && duration.equals("""")) { Query<Song> query = this.currentSession.createQuery(""from Song where duration=:n"", Song.class); query.setParameter(""n"", duration); return query.getResultList(); } else { throw new IllegalArgumentException(""the 'duration' param for search an song can not be null or empty.""); } } "	1	0	1	1	0	0
"private Optional<TempBlockMeta> createBlockMetaNoLock(long userId, long blockId, BlockStoreLocation location, long initialBlockSize) throws IOException { Optional<TempBlockMeta> optTempBlock = mAllocator.allocateBlock(userId, blockId, initialBlockSize, location); if (!optTempBlock.isPresent()) { // Not enough space in this block store, let's try to free some space. if (freeSpaceNoLock(userId, initialBlockSize, location)) { LOG.error(""Cannot free {} bytes space in {}"", initialBlockSize, location); return Optional.absent(); } optTempBlock = mAllocator.allocateBlock(userId, blockId, initialBlockSize, location); Preconditions.checkState(optTempBlock.isPresent(), ""Cannot allocate block {}:"", blockId); } // Add allocated temp block to metadata manager mMetaManager.addTempBlockMeta(optTempBlock.get()); return optTempBlock; } "	1	0	1	1	0	0
"@Override String getDatePartExtractionSuffix(DayPartField field) { switch (field) { case WEEK: return "", 'IW' )""; default: return super.getDatePartExtractionPrefix(field); } } "	1	0	1	1	0	0
private boolean operatorCondition(NamePattern namePattern) { return namePattern != null && namePattern.getOp() != null && getOperatorCondition(namePattern.getOp()); } 	1	0	1	1	0	0
"public static NativeArray jsFunction_getCustomOutSequences(Context cx, Scriptable thisObj, Object[] args, Function funObj) throws APIManagementException { if (args == null ||  args.length != 3) { handleException(""Invalid input parameters.""); } APIProvider apiProvider = getAPIProvider(thisObj); String apiName = (String) args[0]; String apiVersion = (String) args[1]; String provider = (String) args[2];  if (provider != null) { provider = APIUtil.replaceEmailDomain(provider); } APIIdentifier apiIdentifier = new APIIdentifier(provider, apiName, apiVersion);  List<String> sequenceList = apiProvider.getCustomOutSequences(apiIdentifier);  NativeArray myn = new NativeArray(0); if (sequenceList == null) { return null; } else { for (int i = 0; i < sequenceList.size(); i++) { myn.put(i, myn, sequenceList.get(i)); } return myn; }  } "	1	0	1	1	0	0
public void removeDueDate(Context context, int termPosition, int sectionPosition, int dueDatePosition) { // remove the DueDate dueDates.remove(dueDatePosition);  // update the Section in the database DBHelper db = new DBHelper(context); db.removeDueDate(termPosition, sectionPosition, dueDatePosition);  // sort if the DueDate was not removed from the end of the list if (dueDatePosition == dueDates.size()) { sortDueDates(context, termPosition, sectionPosition); } } 	1	0	1	1	0	0
"private static void changePassword(Cipher cipher) { Properties cipherTextProperties = Utils.loadProperties(System.getProperty( Constants.CIPHER_TEXT_PROPERTY_FILE_PROPERTY)); List<String> keyValueList = new ArrayList<String>(); int i = 1; for (Object key : cipherTextProperties.keySet()) { String passwordAlias = (String) key; aliasPasswordMap.put(passwordAlias, cipherTextProperties.getProperty(passwordAlias)); keyValueList.add(passwordAlias); System.out.println(""["" + i++ + ""] "" + passwordAlias); } boolean isModified = false; String value; while ((value = Utils.getValueFromConsole( ""Please enter the Number which is corresponding to the Password that is needed be changed "" + ""[Press Enter to Skip] : "", false)).isEmpty()) { if (!value.trim().equals("""")) { String selectedPasswordAlias = keyValueList.get(Integer.parseInt(value.trim()) - 1); String newEncryptedValue = getPasswordFromConsole(selectedPasswordAlias, cipher); aliasPasswordMap.put(selectedPasswordAlias, newEncryptedValue); isModified = true; } }  if (isModified) { cipherTextProperties.putAll(aliasPasswordMap); Utils.writeToPropertyFile(cipherTextProperties, System.getProperty(Constants.CIPHER_TEXT_PROPERTY_FILE_PROPERTY)); } } "	1	0	1	1	0	0
"public void initDriverSettings(JDBCDataSource dataSource, JDBCDatabaseMetaData metaData) { try { this.identifierQuoteString = metaData.getIdentifierQuoteString(); } catch (Throwable e) { log.debug(e.getMessage()); this.identifierQuoteString = SQLConstants.DEFAULT_IDENTIFIER_QUOTE; } if (identifierQuoteString != null) { identifierQuoteString = identifierQuoteString.trim(); if (identifierQuoteString.isEmpty()) { identifierQuoteString = null; } }  try { switch (metaData.getSQLStateType()) { case DatabaseMetaData.sqlStateXOpen: this.sqlStateType = SQLStateType.XOPEN; break; case DatabaseMetaData.sqlStateSQL99: this.sqlStateType = SQLStateType.SQL99; break; default: this.sqlStateType = SQLStateType.UNKNOWN; break; } } catch (Throwable e) { log.debug(e.getMessage()); this.sqlStateType = SQLStateType.UNKNOWN; }  try { supportsSubqueries = metaData.supportsCorrelatedSubqueries(); } catch (SQLException e) { log.debug(e); }  try { this.supportsUnquotedMixedCase = metaData.supportsMixedCaseIdentifiers(); } catch (SQLException e) { log.debug(e.getMessage()); this.supportsUnquotedMixedCase = false; } try { this.supportsQuotedMixedCase = metaData.supportsMixedCaseQuotedIdentifiers(); } catch (SQLException e) { log.debug(e.getMessage()); this.supportsQuotedMixedCase = false; } try { if (metaData.storesUpperCaseIdentifiers()) { this.unquotedIdentCase = DBPIdentifierCase.UPPER; } else if (metaData.storesLowerCaseIdentifiers()) { this.unquotedIdentCase = DBPIdentifierCase.LOWER; } else { this.unquotedIdentCase = DBPIdentifierCase.MIXED; } } catch (SQLException e) { log.debug(e.getMessage()); this.unquotedIdentCase = DBPIdentifierCase.MIXED; } try { if (metaData.storesUpperCaseQuotedIdentifiers()) { this.quotedIdentCase = DBPIdentifierCase.UPPER; } else if (metaData.storesLowerCaseQuotedIdentifiers()) { this.quotedIdentCase = DBPIdentifierCase.LOWER; } else { this.quotedIdentCase = DBPIdentifierCase.MIXED; } } catch (SQLException e) { log.debug(e.getMessage()); this.quotedIdentCase = DBPIdentifierCase.MIXED; } try { this.searchStringEscape = metaData.getSearchStringEscape(); } catch (Throwable e) { log.debug(e.getMessage()); this.searchStringEscape = ""\\""; //$NON-NLS-1$ } try { this.catalogSeparator = metaData.getCatalogSeparator(); if (CommonUtils.isEmpty(this.catalogSeparator)) { this.catalogSeparator = String.valueOf(SQLConstants.STRUCT_SEPARATOR); } } catch (Throwable e) { log.debug(e.getMessage()); this.catalogSeparator = String.valueOf(SQLConstants.STRUCT_SEPARATOR); } try { catalogUsage = (metaData.supportsCatalogsInDataManipulation() ? SQLDialect.USAGE_DML : 0) | (metaData.supportsCatalogsInTableDefinitions() ? SQLDialect.USAGE_DDL : 0) | (metaData.supportsCatalogsInProcedureCalls() ? SQLDialect.USAGE_PROC : 0) | (metaData.supportsCatalogsInIndexDefinitions() ? SQLDialect.USAGE_INDEX : 0) | (metaData.supportsCatalogsInPrivilegeDefinitions() ? SQLDialect.USAGE_PRIV : 0); } catch (SQLException e) { log.debug(e.getMessage()); catalogUsage = SQLDialect.USAGE_NONE; } try { schemaUsage = (metaData.supportsSchemasInDataManipulation() ? SQLDialect.USAGE_DML : 0) | (metaData.supportsSchemasInTableDefinitions() ? SQLDialect.USAGE_DDL : 0) | (metaData.supportsSchemasInProcedureCalls() ? SQLDialect.USAGE_PROC : 0) | (metaData.supportsSchemasInIndexDefinitions() ? SQLDialect.USAGE_INDEX : 0) | (metaData.supportsSchemasInPrivilegeDefinitions() ? SQLDialect.USAGE_PRIV : 0); } catch (SQLException e) { log.debug(e.getMessage()); schemaUsage = SQLDialect.USAGE_DDL | SQLDialect.USAGE_DML; } try { validCharacters = metaData.getExtraNameCharacters(); } catch (SQLException e) { log.debug(e.getMessage()); validCharacters = """"; //$NON-NLS-1$ }  try { this.isCatalogAtStart = metaData.isCatalogAtStart(); } catch (Throwable e) { log.debug(e.getMessage()); this.isCatalogAtStart = true; }  loadDriverKeywords(metaData); } "	1	0	1	0	0	0
"@MJI public int lastIndexOf__II__I(MJIEnv env, int objref, int c, int fromIndex, FeatureExpr ctx) {  int vref = env.getReferenceField(ctx, objref, ""value"").getValue(); ElementInfo ei = env.getElementInfo(vref); char[] values = ((CharArrayFields) ei.getFields()).asCharArray().getValue();  int len = values.length;  if (fromIndex < 0) { return -1; } if (fromIndex > len - 1) { fromIndex = len - 1; }  for (int i = fromIndex; i > 0; i--) { if (values[i] == c) { return i; } }  return -1; } "	1	0	1	1	0	0
"private QueryResult waitForConsistentQuery(UserInfo user, String sql, List<SortItem> sortItems, Long limit) throws Exception { long start = System.currentTimeMillis(); while(true){ try { QueryResultBundle queryResult = tableQueryManger.querySinglePage(mockProgressCallbackVoid, user, sql, sortItems, null, 0L, limit, true, false, true); return queryResult.getQueryResult(); } catch (LockUnavilableException e) { System.out.println(""Waiting for table lock: ""+e.getLocalizedMessage()); } catch (TableUnavailableException e) { System.out.println(""Waiting for table index worker to build table. Status: ""+e.getStatus()); } assertTrue(""Timed out waiting for table index worker to make the table available."", (System.currentTimeMillis()-start) <  MAX_WAIT_MS); Thread.sleep(1000); } } "	1	0	1	1	0	0
public void clearAchievements(String player) { // TODO Auto-generated method stub cache.putt(player,new HashSet<String>());  } 	1	0	1	1	0	0
"private boolean processJournal(String journalName, String journalShortID, String journalUuid, String manuscriptNumber, Item item, Context context, HttpServletRequest request, String articleStatus) throws AuthorizeException, SQLException {   Concept journalConcept = null;  if(journalConcept==null && journalUuid != null){ journalConcept = JournalUtils.getJournalConceptById(context, journalUuid); }  if(journalConcept==null && journalShortID != null){ journalConcept = JournalUtils.getJournalConceptByShortID(context, journalShortID); }  if(journalConcept==null && journalName != null){ journalConcept = JournalUtils.getJournalConceptByName(context, journalName); }  //We have selected to choose a journal, retrieve it if(journalConcept != null){  String title = journalConcept.getPreferredLabel();  if(JournalUtils.getBooleanIntegrated(journalConcept) || (JournalUtils.getBooleanIntegrated(journalConcept) && manuscriptNumber != null && manuscriptNumber.trim().equals(""""))){ log.debug(JournalUtils.getJournalShortID(journalConcept) + "" is not integrated OR manuscript number is null""); //Just add the journal title  //Should it end with a *, remove it. if(title.endsWith(""*"")) { title = title.substring(0, title.length() - 1); }  log.debug(""adding journal title to item: "" + title); addEmailsAndEmbargoSettings(journalConcept, item); item.addMetadata(""prism"", ""publicationName"", null, null, title, journalConcept.getIdentifier(), Choices.CF_ACCEPTED); item.update(); } else { String journalPath = JournalUtils.getMetadataDir(journalConcept); log.debug(""journalPath: "" + journalPath);  //We have a valid journal // Unescape the manuscriptNumber to get the filename String fileName = JournalUtils.unescapeFilename(manuscriptNumber); PublicationBean pBean = ModelPublication.getDataFromPublisherFile(fileName, JournalUtils.getJournalShortID(journalConcept), journalPath); if (pBean.getMessage().equals((""""))) {  // check if the status is ""in review"" or ""rejected"" if(articleStatus!=null){  // case ""Accepted""/ARTICLE_STATUS_ACCEPTED // if the publication status is: //    - Rejected ==> return ""Invalid manuscript number."" //    - In Review ==> return ""Invalid manuscript number."" //    - all the others ==> go through entering in PublicationDescriptionStep if(Integer.parseInt(articleStatus)==ARTICLE_STATUS_ACCEPTED){ if(pBean.getStatus()!=null && (pBean.getStatus().equals(PublicationBean.STATUS_IN_REVIEW) || pBean.getStatus().equals(PublicationBean.STATUS_REJECTED))){ if(pBean.getStatus().equals(PublicationBean.STATUS_IN_REVIEW) ) { item.addMetadata(WorkflowRequirementsManager.WORKFLOW_SCHEMA, ""submit"", ""skipReviewStage"", Item.ANY,""false""); item.update(); } request.getSession().setAttribute(""submit_error"", ""Invalid manuscript number.""); return false; } } // case ""IN Review""/ARTICLE_STATUS_IN_REVIEW // if the publication status is: //    - Rejected ==> return ""Invalid manuscript number."" //    - all the others ==> go through entering in PublicationDescriptionStep else if(Integer.parseInt(articleStatus)==ARTICLE_STATUS_IN_REVIEW){ if(pBean.getStatus()!=null && pBean.getStatus().equals(PublicationBean.STATUS_REJECTED)){ request.getSession().setAttribute(""submit_error"", ""Invalid manuscript number.""); return false; } } }  importJournalMetadata(context, item, pBean); addEmailsAndEmbargoSettings(journalConcept, item);  item.update(); } else if(pBean.getMessage().equals(""Invalid manuscript number"")) { // We do not have metadata for this manuscript number // Store the manuscriptNumber & journal title and continue as in-review addEmailsAndEmbargoSettings(journalConcept, item);  title = journalConcept.getPreferredLabel(); log.debug(""invalid manuscript nubmer. Setting journal title to: "" + title); addSingleMetadataValueFromJournal(context, item, ""journalName"", title); addSingleMetadataValueFromJournal(context, item, ""manuscriptNumber"", manuscriptNumber);  item.update(); }else{ request.getSession().setAttribute(""submit_error"", pBean.getMessage()); return false; } } } else { log.debug(""adding unknown journal title to item: "" + journalName); item.addMetadata(""prism"", ""publicationName"", null, null, journalName); item.update(); } return true; } "	1	0	1	0	0	0
"@Override protected void drawGuiContainerForegroundLayer(int mouseX, int mouseY) { if(tooltips == null) return; if(mouseX < guiLeft || mouseX > guiRight()) return;  // floating over tooltip info? if(hasTooltips() && mouseX >= guiRight() - border.w - fontRenderer.getCharWidth('?')/2 && mouseX < guiRight() && mouseY > guiTop+5 && mouseY < guiTop+5+fontRenderer.FONT_HEIGHT) { int w = MathHelper.clamp_int(this.width - mouseX - 12, 10, 200); drawHoveringText(fontRenderer.listFormattedStringToWidth(Util.translate(""gui.general.hover""), w), mouseX - guiLeft, mouseY - guiTop); }  // are we hovering over an entry? float y = 4 + guiTop;  if(hasCaption()) { y += fontRenderer.FONT_HEIGHT + 3; }  float textHeight = fontRenderer.FONT_HEIGHT * textScale + 0.5f; float lowerBound = (guiTop + ySize - border.h)/textScale;  // get the index of the currently hovered line int index = -1; ListIterator<String> iter = getTotalLines().listIterator(slider.getValue()); while(iter.hasNext()) { if(y + textHeight > lowerBound) { break; }  if(mouseY > y && mouseY <= y + textHeight) { index = iter.nextIndex(); break; } else { iter.next(); } y += textHeight; }  // no line hovered if(index < 0) { return; }  // get the tooltip index from the hovered line int i = 0; while(tooltipLines.size() > i && index > tooltipLines.get(i)) i++;  if(i >= tooltips.size() || tooltips.get(i) == null) return;  int w = MathHelper.clamp_int(this.width - mouseX - 12, 10, 200); drawHoveringText(fontRenderer.listFormattedStringToWidth(tooltips.get(i), w), mouseX - guiLeft, mouseY - guiTop); } "	1	0	1	1	0	0
"private void interpretAggregate() { int expecting_bytes = 0; while(recv_buf.size()>0) { // FIXME: Can't find a nice way of wrapping a ByteBuffer around a list of bytes. // Create a new array and copy bytes over. byte[] bytes= new byte[recv_buf.size()]; ByteBuffer b = MooshimeterDeviceBase.wrap(bytes); for(byte t:recv_buf) { b.put(t); } b.rewind(); int opcode = (int)b.get(); if(code_list.containsKey(opcode)) { ConfigTree.ConfigNode n = code_list.get(opcode); switch(n.ntype) { case ConfigTree.NTYPE.PLAIN  : Log.e(TAG, ""Shouldn't receive notification here!""); return; case ConfigTree.NTYPE.CHOOSER: n.notify(b.get()); break; case ConfigTree.NTYPE.LINK   : Log.e(TAG, ""Shouldn't receive notification here!""); return; case ConfigTree.NTYPE.COPY   : Log.e(TAG, ""Shouldn't receive notification here!""); return; case ConfigTree.NTYPE.VAL_U8 : case ConfigTree.NTYPE.VAL_S8 : n.notify(b.get()); break; case ConfigTree.NTYPE.VAL_U16: case ConfigTree.NTYPE.VAL_S16: n.notify(b.getShort()); break; case ConfigTree.NTYPE.VAL_U32: case ConfigTree.NTYPE.VAL_S32: n.notify(b.getInt()); break; case ConfigTree.NTYPE.VAL_STR: expecting_bytes = b.getShort(); if(b.remaining()<expecting_bytes) { // Wait for the aggregator to fill up more return; } //n.notify(new String(b.array())); break; case ConfigTree.NTYPE.VAL_BIN: expecting_bytes = b.getShort(); if(b.remaining()<expecting_bytes) { // Wait for the aggregator to fill up more return; } n.notify(Arrays.copyOfRange(b.array(),b.position(),b.position()+expecting_bytes)); b.position(b.position()+expecting_bytes); break; case ConfigTree.NTYPE.VAL_FLT: n.notify(b.getFloat()); break; } } else { Log.e(TAG,""UNRECOGNIZED SHORTCODE ""+opcode); new Exception().printStackTrace(); return; } // Advance recv_buf for(int i = 0; i < b.position();i++) { recv_buf.remove(0); } } } "	1	0	1	1	0	0
private void hideLoading() { mIsLoading = false; mRefreshView.setVisibility(View.VISIBLE); mLoading.setVisibility(View.GONE);  mLoadingObservationsGrid.setVisibility(View.GONE); mLoadingObservationsList.setVisibility(View.GONE);  if (mPage == 0) { // Only re-show the grid/list views if this is the first observations result page being fetched if (mObservations.size() == 0) { mObservationsGrid.setVisibility(View.GONE); mObservationsGridEmpty.setVisibility(View.VISIBLE); mObservationsList.setVisibility(View.GONE); mObservationsListEmpty.setVisibility(View.VISIBLE); } else { mObservationsGrid.setVisibility(View.VISIBLE); mObservationsGridEmpty.setVisibility(View.GONE); mObservationsList.setVisibility(View.VISIBLE); mObservationsListEmpty.setVisibility(View.GONE); } } } 	1	0	1	1	0	0
"public static <T> RichIterable<RichIterable<T>> chunk(T[] array, int size) { if (size <= 0) { throw new IllegalArgumentException(""Size for groups must be positive but was: "" + size); } int index = 0; MutableList<RichIterable<T>> result = Lists.mutable.empty(); while (index < array.length) { MutableList<T> batch = Lists.mutable.empty(); for (int i = 0; i < size && index < array.length; i++) { batch.add(array[i]); index++; } result.add(batch); } return result; } "	1	0	1	1	0	0
private void initMessages() { if (vm.isRunning() && !vm.getHasAgent()) { setMessage(ConstantsManager.getInstance().getConstants().liveSnapshotWithNoGuestAgentMsg()); }  if (isValidateByVmSnapshots()) { initVmSnapshots(); } else { initVmDisks(); } } 	1	0	1	1	0	0
@Override public boolean dispatchKeyEvent(KeyEvent event) { return windowCallback.dispatchKeyShortcutEvent(event); } 	1	0	1	1	0	0
"@Override public String onPlaceholderRequest(Player player, String identifier) { switch (identifier) { case ""thirstmessage"": return ThirstManager.getThirst().getThirstString(player); case ""thirstbar"": return ThirstManager.getThirst().getThirstBar(player); case ""thirstpercent"": return ThirstManager.getThirst().getThirstPercent(player, true); case ""thirstremovalspeed"": return String.format(String.valueOf(ThirstManager.getThirst().getThirstData(player).getSpeed() / 1000), ""%.3f""); case ""thirstremovalamount"": return String.valueOf(Thirst.getInstance().getYAMLConfig().removeThirst); } return null; } "	1	0	1	1	0	0
public static void tokenizeFiles() { for (int i = 0; i < textFilesInFolder.size(); i++ ) { String text = fileContent.get(i); String index = tokenize(text);  //Add this index to the hash map. fileIndexesStoring.add(i, index); }  saveIndexes(); } 	1	0	1	1	0	0
public static void debug(String message, int level) { if (showDebug || debugLevel >= level) { queue.offer(new LogEvent(LogType.DEBUG, message)); } } 	1	0	1	1	0	0
public void init(DueDate dueDate, int termPosition, int sectionPosition, int dueDatePosition) { this.dueDate         = dueDate; this.termPosition    = termPosition; this.sectionPosition = sectionPosition; this.dueDatePosition = dueDatePosition;  complete      = dueDate.isComplete(); daysRemaining = getDaysRemaining(dueDate.getDate());  setButtonText(); setButtonColor();  if (academics.inArchive()) { setOnClickListener(this); setOnLongClickListener(this); } } 	1	0	1	0	0	0
"public void UnosVozaca(String Ime, String Prezime, String BrojVozacke, String Adresa, String BrojTelefona, String Username, String Sifra) { Session session = HibernateUtil.getSessionFactory().openSession(); Transaction t = session.beginTransaction(); if(Ime.length()<2){ JOptionPane.showMessageDialog(null, ""Neispravno uneseno ime""); return; }  if(Prezime.length()<3){ JOptionPane.showMessageDialog(null, ""Neispravno uneseno prezime""); return; }  if(BrojVozacke.length()!=9){ JOptionPane.showMessageDialog(null, ""Neispravno unesen broj vozacke""); return; }  if(Adresa.isEmpty()) { JOptionPane.showMessageDialog(null, ""Unesite adresu.""); return; }  if(BrojTelefona.length()!= 9 && BrojTelefona.length()!=10) { JOptionPane.showMessageDialog(null, ""Niste pravilno unijeli broj telefona.""); return; } if(Username.isEmpty()) { JOptionPane.showMessageDialog(null, ""Unesite username.""); return; } else { final Vector<String> v = new Vector<String>(); Session sesija = HibernateUtil.getSessionFactory().openSession();  listaVozaca = sesija.createCriteria(Vozac.class).list(); for (int i=0; i<listaVozaca.size(); i++) v.addElement(listaVozaca.get(i).getUsername());  for (int i = 0; i < listaVozaca.size(); i++) { if(listaVozaca.get(i).getUsername() == Username) { JOptionPane.showMessageDialog(null, ""Username vec postoji""); return; }  }  }  if(Sifra.length()<4) { JOptionPane.showMessageDialog(null, ""Sifra mora imati minimalno 4 slova.""); return; } Vozac v=new Vozac(); v.setIme(Ime); v.setPrezime(Prezime); v.setBrojVozacke(BrojVozacke); v.setAdresa(Adresa); v.setBrojTelefona(BrojTelefona); v.setUsername(Username); v.setPassword(LoginController.getSecurePassword(Sifra)); session.save(v); t.commit(); } "	1	0	1	1	0	0
"@Override public StageResult processAckOnMaster(List<DistStageAck> acks) { masterState.addListener(new MasterListener.Adapter() { @Override public void afterCluster() { masterState.remove(getCounterName()); masterState.removeListener(this); } }); int value = updateState(masterState); if (inc == 0) { log.error(""Invalid increment value: "" + inc); return errorResult(); } if ((inc > 0 && value > to) || (inc < 0 && value < to)) { return StageResult.BREAK; } else { return StageResult.SUCCESS; } } "	1	0	1	0	0	0
"@With(CheckPortfolioEntryExists.class) @Dynamic(IMafConstants.PORTFOLIO_ENTRY_EDIT_DYNAMIC_PERMISSION) public Result processEdit() {  // bind the form Form<PortfolioEntryEditFormData> boundForm = portfolioEntryEditFormData.bindFromRequest();  // get the portfolioEntry Long id = Long.valueOf(boundForm.data().get(""id"")); PortfolioEntry portfolioEntry = PortfolioEntryDao.getPEById(id);  if (boundForm.hasErrors() || CustomAttributeFormAndDisplayHandler.validateValues(boundForm, PortfolioEntry.class)) { return ok(views.html.core.portfolioentry.portfolio_entry_edit.render(portfolioEntry, boundForm, PortfolioEntryDao.getPETypeActiveAsVH())); }  PortfolioEntryEditFormData portfolioEntryFormData = boundForm.get();  Ebean.beginTransaction(TxIsolation.READ_COMMITED); try {  // save the portfolio entry PortfolioEntry updPortfolioEntry = PortfolioEntryDao.getPEById(portfolioEntryFormData.id); portfolioEntryFormData.fill(updPortfolioEntry); updPortfolioEntry.update();  // update the licenses number (because the flag is archived is used // for the computation and could be modified) getLicensesManagementService().updateConsumedPortfolioEntries();  // save the custom attributes CustomAttributeFormAndDisplayHandler.validateAndSaveValues(boundForm, PortfolioEntry.class, id);  Ebean.commitTransaction(); Ebean.endTransaction();  Utilities.sendSuccessFlashMessage(Msg.get(""core.portfolio_entry.edit.successful""));  return redirect(controllers.core.routes.PortfolioEntryController.view(portfolioEntryFormData.id, 0));  } catch (Exception e) {  Ebean.rollbackTransaction(); Ebean.endTransaction(); return ControllersUtils.logAndReturnUnexpectedError(e, log, getConfiguration(), getI18nMessagesPlugin());  } } "	1	0	1	0	0	0
@Override public SiteParsingProfile newInstance() { return new HeyzoParsingProfile(scrapeInEnglish); } 	1	0	1	0	0	0
"private void setHarvestStatusPageSize(int size) throws Exception { getTestController().runTestXCommand(TestEnvironment.JOB_ADMIN_SERVER, ""cp conf/settings_GUIApplication.xml conf/settings_GUIApplication.xml.original""); getTestController().replaceStringInFile(TestEnvironment.JOB_ADMIN_SERVER, ""conf/settings_GUIApplication.xml"", ""</indexClient>"", ""</indexClient>"" + ""<webinterface><harvestStatus><defaultPageSize>"" + size + ""</defaultPageSize></harvestStatus></webinterface>"");  TestGUIController.restartGUI(); } "	1	0	1	0	0	0
@Override public DSubTree handle() { DSubTree tree = new DSubTree(); // add the expression's subtree (e.g: foo(..).bar() should handle foo(..) first) DSubTree Texp = new DOMExpression(invocation.getExpression()).handle(); tree.addNodes(Texp.getNodes());  // evaluate arguments first for (Object o : invocation.arguments()) { DSubTree Targ = new DOMExpression((Expression) o).handle(); tree.addNodes(Targ.getNodes()); }  IMethodBinding binding = invocation.resolveMethodBinding(); // get to the generic declaration, if this binding is an instantiation while (binding.getMethodDeclaration() != binding) binding = binding.getMethodDeclaration(); MethodDeclaration localConstructor = Utils.checkAndGetLocalMethod(binding); if (localConstructor != null) { DSubTree Tconstructor = new DOMMethodDeclaration(localConstructor).handle(); tree.addNodes(Tconstructor.getNodes()); } else if (Utils.isRelevantCall(binding)) tree.addNode(new DAPICall(binding, Visitor.V().getLineNumber(invocation))); return tree; } 	1	0	1	1	0	0
"public void delete(User user) throws FileNotFoundException, PermissionDeniedException { if (user == null) { throw new PermissionDeniedException(""User cannot be null""); }  checkHiddenPath(this, user);  boolean allowed = false; if (user.getName().equals(getUsername())) { if (!getVFSPermissions().checkPathPermission(""deleteown"", user, this)) { // the user owns the file althought it doesnt have enough perms to delete it. throw new PermissionDeniedException(""You are not allowed to delete ""+getPath()); } // the user owns the file and has enough perms to delete it.  // deleteown > delete allowed = true; }  if (!allowed && !getVFSPermissions().checkPathPermission(""delete"", user, this)) { throw new PermissionDeniedException(""You are not allowed to delete ""+getPath()); }  deleteUnchecked(false); } "	1	0	1	0	0	0
"public void migrate( File fromStoreDir, RecordFormats fromFormat, File toStoreDir, RecordFormats toFormat, StoreType[] types, StoreType[] additionalTypesToOpen ) { StoreType[] storesToOpen = ArrayUtil.concat( types, additionalTypesToOpen ); try ( NeoStores fromStores = new StoreFactory( fromStoreDir, config, new DefaultIdGeneratorFactory( fs ), pageCache, fs, NullLogProvider.getInstance(), fromFormat ).openNeoStores( true, storesToOpen ); NeoStores toStores = new StoreFactory( toStoreDir, withPersistedStoreHeadersAsConfigFrom( fromStores, storesToOpen ), new DefaultIdGeneratorFactory( fs ), pageCache, fs, NullLogProvider.getInstance(), toFormat ).openNeoStores( true, storesToOpen ) ) { for ( StoreType type : types ) { // This condition will exclude counts store and ""neostore"" since we don't want to copy its metadata // into the new migrated store. if ( type.isRecordStore() && type != StoreType.META_DATA && toFormat.hasStore( type ) && fromFormat.hasStore( type ) ) { migrate( fromStores.getRecordStore( type ), toStores.getRecordStore( type ) ); } } } } "	1	0	1	0	0	0
"@Override protected Void run() throws Exception {  PrintStream printStream = listener.getLogger();  HashMap<String, String> requiredEnvVars = setRequiredEnvVars(step, envVars);  //check all the required env vars if (!Util.allNotNullOrEmpty(requiredEnvVars, printStream)) { printStream.println(""[IBM Cloud DevOps] Error: Failed to upload Test Result.""); return null; }  //check all the required parameters HashMap<String, String> requiredParams = new HashMap<>(); requiredParams.put(""SQProjectKey"", step.getSQProjectKey()); requiredParams.put(""SQHostURL"", step.getSQHostURL()); requiredParams.put(""SQAuthToken"", step.getSQAuthToken());  if (!Util.allNotNullOrEmpty(requiredParams, printStream)) { printStream.println(""[IBM Cloud DevOps] Error: Failed to upload SonarQube Test Result.""); return null; }  // optional build number, if user wants to set their own build number String buildNumber = step.getBuildNumber();  PublishSQ publisher = new PublishSQ(requiredEnvVars, requiredEnvVars);  if (!Util.isNullOrEmpty(buildNumber)) { publisher.setBuildNumber(buildNumber); } publisher.perform(build, ws, launcher, listener);  return null; } "	1	0	1	0	0	0
public boolean setMediaStreamTracks(MediaStreamTrackDesc[] newTracks) { MediaStreamTrackDesc[] oldTracks = tracks; int oldTracksLen = oldTracks == null ? 0 : oldTracks.length; int newTracksLen = newTracks == null ? 0 : newTracks.length;  if (oldTracksLen == 0 || newTracksLen == 0) { tracks = newTracks; return oldTracksLen != newTracksLen; } else { int cntMatched = 0; MediaStreamTrackDesc[] mergedTracks = new MediaStreamTrackDesc[newTracks.length];  for (int i = 0; i < newTracks.length; i++) { RTPEncodingDesc newEncoding = newTracks[i].getRTPEncodings()[0];  for (int j = 0; i < oldTracks.length; j++) { if (oldTracks[j] != null && oldTracks[j].matches(newEncoding.getPrimarySSRC())) { mergedTracks[i] = oldTracks[j]; cntMatched++; break; } }  if (mergedTracks[i] == null) { mergedTracks[i] = newTracks[i]; } }  tracks = mergedTracks;  return oldTracksLen != newTracksLen || cntMatched != oldTracks.length; } } 	1	0	1	1	0	0
"@Test public void shouldFindByApi() throws Exception { final Collection<Page> pages = pageRepository.findByApi(""my-api"");  assertNotNull(pages); assertEquals(3, pages.size()); pages.forEach(page -> assertNull(page.getSource())); } "	0	0	1	1	0	0
"public void updateByObjectIdAndObjectClassType(ArrayList<String> tagCloudArrayString, String className, long objectId) throws SystemException{ String tagCloudString = """"; for(int i=0;i<tagCloudArrayString.size();i++) tagCloudString += tagCloudArrayString.get(i) +"" ### "";  Tagcloud tagcloud = new TagcloudImpl(); try { tagcloud = TagcloudLocalServiceUtil.getByObjectIdAndObjectClassType(objectId, className); } catch (NoSuchTagcloudException e) { e.printStackTrace(); }  tagcloud.setTags(tagCloudString); tagcloud.setObjectClassType(className); tagcloud.setObjectId(objectId); TagcloudLocalServiceUtil.addTagcloud(tagcloud); } "	0	0	1	1	0	0
"@Override public String toPath() { String idLocal = getId(); String versionLocal = getVersion(); String typeLocal = getType();  if (typeLocal.equals(""nuspec"")) { return String.format(""%s/%s/%s.%s"", idLocal, versionLocal, idLocal, typeLocal); }  return String.format(""%s/%s/%s.%s.%s"", idLocal, versionLocal, idLocal, versionLocal, typeLocal); } "	0	0	1	1	0	0
"public void Add(View view){ DBHelper dbHelper = DBHelper.getInstance(); int time = selectedHour*100+selectedMinute; int week = 0; String speaking = speaked.getText().toString(); if(speaking.equals("""")) speaking = ""일정 말하기""; if(mon.isChecked()) week = week+1; if(tue.isChecked()) week = week+10; if(wed.isChecked()) week = week+100; if(thu.isChecked()) week = week+1000; if(fri.isChecked()) week = week+10000; if(sat.isChecked()) week = week+100000; if(sun.isChecked()) week = week+1000000; String musicpath = selectedAudioFile.getFilePath(); dbHelper.query(""INSERT INTO Alarm VALUES(null, "" + week + "", "" + time + "", '"" + speaking + ""', '""+musicpath+""', 1)"");  SQLiteDatabase sql = dbHelper.getWritableDatabase(); Cursor cursor = sql.rawQuery(""SELECT _id FROM Alarm ORDER BY _id DESC;"", null); cursor.moveToFirst();  AlarmManager alarmManager = (AlarmManager)getApplicationContext().getSystemService(Context.ALARM_SERVICE); Intent Intent = new Intent(this, RunAlarm.class); PendingIntent sender = PendingIntent.getActivity(this, cursor.getInt(0), Intent, PendingIntent.FLAG_CANCEL_CURRENT); long settingTime = System.currentTimeMillis() - ((System.currentTimeMillis()+9*60*60*1000)%(24*60*60*1000)) + selectedHour*60*60*1000 + selectedMinute*60*1000; alarmManager.set(AlarmManager.RTC_WAKEUP, settingTime, sender);  DateFormat df = new SimpleDateFormat(""HH:mm""); String str = df.format(settingTime); Toast.makeText(this, str+"" 에 알람이 설정되었습니다."", Toast.LENGTH_SHORT).show();  Intent intent=new Intent(AddAlarm.this, AlarmList.class); startActivity(intent); finish(); } "	0	0	1	1	0	0
"public void test_7() throws Exception { String sql = ""SELECT ! 1+1;"";  SQLStatementParser parser = new MySqlStatementParser(sql); List<SQLStatement> stmtList = parser.parseStatementList();  String text = output(stmtList);  Assert.assertEquals(""SELECT !(1 + 1);"", text); } "	0	0	1	1	0	0
private void getSurroundingRegions(Vector2i pos, EntityRef settlement) { RegionEntitiesComponent regionEntitiesComponent = settlement.getComponent(RegionEntitiesComponent.class); ParcelList parcelList = settlement.getComponent(ParcelList.class); float radius = parcelList.maxBuildRadius; int size = (Math.round(radius / 32) >= 1) ? Math.round(radius / 32) : 1; Rect2i settlementRectArea = Rect2i.createFromMinAndMax(-size, -size, size, size); Circle settlementCircle = new Circle(pos.toVector2f(), radius); Vector2i regionWorldPos = new Vector2i();  for (BaseVector2i regionPos : settlementRectArea.contents()) { regionWorldPos.set(pos.x() + regionPos.x() * 32, pos.y() + regionPos.y() * 32);  if (settlementCircle.contains(regionWorldPos)) { EntityRef region = regionEntityManager.getNearest(regionWorldPos); if (region == null) { //throw new NullPointerException(); } if (region != null && region.hasComponent(UnassignedRegionComponent.class)) { LocationComponent location = region.getComponent(LocationComponent.class); Vector2i position = new Vector2i(location.getWorldPosition().x(), location.getWorldPosition().z()); regionEntitiesComponent.regionEntities.put(position.toString(), region); region.send(new AssignRegionEvent()); } } } settlement.saveComponent(regionEntitiesComponent); } 	0	0	1	1	0	0
"private void MultiEditLogTestUtil() throws IOException, InvalidPathException, FileDoesNotExistException { FileSystemMaster fsMaster = createFsMasterFromJournal(); long rootId = fsMaster.getFileId(mRootUri); Assert.assertTrue(rootId != -1); Assert.assertEquals(125, fsMaster.getFileInfoList(rootId).size()); for (int k = 0; k < 124; k ++) { Assert.assertTrue(fsMaster.getFileId(new TachyonURI(""/a"" + k)) != -1); } fsMaster.stop(); } "	0	0	1	1	0	0
"private void ManyFileTestUtil() throws IOException, InvalidPathException, FileDoesNotExistException { FileSystemMaster fsMaster = createFsMasterFromJournal(); long rootId = fsMaster.getFileId(mRootUri); Assert.assertTrue(rootId != -1); Assert.assertEquals(11, fsMaster.getFileInfoList(rootId).size()); for (int k = 0; k < 10; k ++) { Assert.assertTrue(fsMaster.getFileId(new TachyonURI(""/a"" + k)) != -1); } fsMaster.stop(); } "	0	0	1	1	0	0
"@Override public List<JobPo> getNeedGenerateJobPos(Long checkTime, int topSize) { Query<JobPo> query = template.createQuery(JobPo.class); query.field(""relyOnPrevCycle"").equal(true); query.field(""lastGenerateTriggerTime"").equal(checkTime); query.offset(0).limit(topSize); return query.asList(); } "	0	0	1	1	0	0
"public String buildGetRecordingsResponse(List<RecordingMetadata> recordings, String returnCode) {  Template ftl = null; try { ftl = cfg.getTemplate(""get-recordings.ftl""); } catch (IOException e) { log.error(""IO exception for get-recordings.ftl : "", e); }  StringWriter xmlText = new StringWriter();  Map root = new HashMap(); root.put(""returnCode"", returnCode); root.put(""recordings"", recordings);  try { ftl.process(root, xmlText); } catch (TemplateException e) { log.error(""Template exception : "", e); } catch (IOException e) { log.error(""IO exception for get-meetings.ftl : "", e); }  return xmlText.toString(); } "	0	0	1	1	0	0
@Test public void testAvailable_handlesReadValueOfZero() throws IOException { int contentLength = 999; InputStream is = ContentLengthInputStream.obtain(wrapped, String.valueOf(contentLength)); when(wrapped.read()).thenReturn(0);  assertThat(is.read()).isEqualTo(0); assertThat(is.available()).isEqualTo(contentLength); } 	0	0	1	1	0	0
"private String[] parse() throws AssertionError { Options opts = new Options( withPlatform == false && extraExternFile == null); opts.debug = true; List<SourceFile> sourceFiles = new ArrayList<>();  // base.js is needed for the type declaration of goog.require for // all tests, except the base.js one itself. if (getSubject().roots.isEmpty() || !getSubject().roots.get(0).getName().equals(""base.js"")) { sourceFiles.add(CLUTZ_GOOG_BASE); }  for (File nonroot : getSubject().nonroots) { sourceFiles.add(SourceFile.fromFile(nonroot, UTF_8)); }  List<String> roots = new ArrayList<>();  for (File root : getSubject().roots) { sourceFiles.add(SourceFile.fromFile(root, UTF_8)); roots.add(root.getPath()); }  if (getSubject().sourceText != null) { sourceFiles.add(SourceFile.fromCode(""main.js"", getSubject().sourceText)); roots.add(""main.js""); }  List<SourceFile> externFiles = NO_EXTERNS; if (withPlatform) { externFiles = DeclarationGenerator.getDefaultExterns(opts); } if (extraExternFile != null) { externFiles.add(SourceFile.fromFile(extraExternFile, UTF_8)); }  PrintStream err = System.err; try { // Admittedly the PrintStream setting is a bit hacky, but it's closest to how users would // run Clutz. ByteArrayOutputStream out = new ByteArrayOutputStream(); System.setErr(new PrintStream(out)); DeclarationGenerator generator = new DeclarationGenerator(opts); String dts = generator.generateDeclarations(sourceFiles, externFiles, new Depgraph(roots)); String diagnostics = out.toString(); return new String[] {dts, diagnostics}; } finally { System.setErr(err); } } "	0	0	1	1	0	0
"public TripQueryResult queryOffers(User passenger, TripQueryDescription queryDescription) throws Exception { logManager.d(""User "" + passenger.getId() + "" ("" + passenger.getFirstName() + "" "" + passenger.getLastName() + "") sent query."");  // compute passenger route List<Route> possiblePassengerRoutes = directionsManager.getDirections(queryDescription.getStart(), queryDescription.getEnd()); if (possiblePassengerRoutes.isEmpty()) return new TripQueryResult(new ArrayList<TripReservation>(), null);  // find declined trips for this user TripQuery query = new TripQuery(possiblePassengerRoutes.get(0), queryDescription.getStart(), queryDescription.getEnd(), queryDescription.getMaxWaitingTimeInSeconds(), passenger); List<JoinTripRequest> declinedRequests = joinTripRequestDAO.findDeclinedRequests( passenger.getId() ); logManager.d(""Found "" + declinedRequests.size() + ""declined entries in the database."");  // analyse offers List<TripOffer> potentialMatches = findPotentialMatches(tripOfferDAO.findAll(), query);  // find and store reservations List<TripReservation> reservations = findCheapestMatch(query, potentialMatches); for (TripReservation reservation : reservations) tripReservationDAO.save(reservation);  // if no reservations start ""background search"" RunningTripQuery runningQuery = null; if (reservations.isEmpty()) { runningQuery = new RunningTripQuery( 0, query, System.currentTimeMillis() / 1000, RunningTripQueryStatus.RUNNING); runningTripQueryDAO.save(runningQuery); }  return new TripQueryResult(reservations, runningQuery); } "	0	0	1	1	0	0
public static <T> void stopReceiving(final T target) { final DeliveryBoy<T> messenger = findDeliveryBoy(target); messenger.stopReceiving(target); } 	0	0	1	1	0	0
private void setupViews(View view) { mRecycler = (RecyclerView) view.findViewById(R.id.recycler); mRecycler.setLayoutManager(new GridLayoutManager(getActivity(), 3)); mRecycler.setAdapter(new ColorItemsAdapter(getActivity(), 18));  mRecyclerHeader = RecyclerViewHeader.fromXml(getActivity(), R.layout.layout_header); mRecyclerHeader.attachTo(mRecycler); } 	0	0	1	1	0	0
"@Override public void setActionbarTitle(String aTitle, Object requestor) { if (requestor != null && mViewPager != null) { //This will only honor the request if the requestor is the currently active view. if (requestor instanceof AwfulFragment && isFragmentVisible((AwfulFragment) requestor)) { super.setActionbarTitle(aTitle, requestor); } else { if (DEBUG) Log.i(TAG, ""Failed setActionbarTitle: "" + aTitle + "" - "" + requestor.toString()); } } else { super.setActionbarTitle(aTitle, requestor); } } "	0	0	1	1	0	0
"@Override public List<Writable> next() { Text record2 = (Text) super.next().iterator().next(); String line = record2.toString();   String[] tokens = line.trim().split(""\\s+""); Double response; try { response = Integer.valueOf(tokens[0]).doubleValue(); } catch (NumberFormatException e) { try { response = Double.valueOf(tokens[0]); classification = false; } catch (NumberFormatException ex) { System.err.println(ex); throw new NumberFormatException(""Unrecognized response variable value: "" + tokens[0]); } }   tokens = line.trim().split(""\\s+"");  List<Writable> record = new ArrayList<>(); int read = 0; for (int k = 1; k < tokens.length; k++) { String[] pair = tokens[k].split("":""); if (pair.length != 2) { throw new NumberFormatException(""Invalid data: "" + tokens[k]); }  int j = Integer.valueOf(pair[0]); if (!zeroBasedIndexing) j = j - 1;  /* TODO: throw an exception here. */ assert(j < 0);  while (j != read) { record.add(new DoubleWritable(0.0)); read++; } try { int x = Integer.valueOf(pair[1]); record.add(new IntWritable(x)); } catch (NumberFormatException e) { double x = Double.valueOf(pair[1]); record.add(new DoubleWritable(x)); } read++; } while (read < numFeatures) { record.add(new DoubleWritable(0.0)); read++; } if (numFeatures == 0) numFeatures = read;  /* TODO: throw an exception here. */ if (read > numFeatures) log.warn(""Found "" + read + "" features in record, expected "" + numFeatures);  if (classification && appendLabel || !classification) { record.add(new DoubleWritable(response)); }  return record; } "	0	0	1	1	0	0
"public ArrayList<Announcement> getAnnouncements() { ArrayList<Announcement> announcements = new ArrayList<>(); try { if (databaseInfo.getMySQL().checkConnection()) { String announcementTableName = databaseInfo.getPrefix() + ""ANNOUNCEMENTS"";  Statement statement = databaseInfo.getConnection().createStatement(); String query = ""SELECT * FROM "" + announcementTableName + ""';""; ResultSet res = statement.executeQuery(query);  while (res.next()) { if (res.getString(""ANNOUNCEMENT_ID"") != null) { Announcement announcement = new Announcement(UUID.fromString(res.getString(""ANNOUNCEMENT_ID"")), res.getString(""GUILD_ID"")); announcement.setSubscriberRoleIdsFromString(res.getString(""SUBSCRIBERS_ROLE"")); announcement.setSubscriberUserIdsFromString(res.getString(""SUBSCRIBERS_USER"")); announcement.setAnnouncementChannelId(res.getString(""CHANNEL_ID"")); announcement.setAnnouncementType(AnnouncementType.valueOf(res.getString(""ANNOUNCEMENT_TYPE""))); announcement.setEventId(res.getString(""EVENT_ID"")); announcement.setHoursBefore(res.getInt(""HOURS_BEFORE"")); announcement.setMinutesBefore(res.getInt(""MINUTES_BEFORE"")); } } } } catch (SQLException e) { System.out.println(""Failed to get announcements from database! Error code: 00203""); EmailSender.getSender().sendExceptionEmail(e); e.printStackTrace(); } return announcements; } "	0	0	1	1	0	0
private void setAttributes() { if (mColor != 0) { mIcon.color(mColor); } if (mSize != -1) { mIcon.sizePx(mSize); } if (mSize != -1) { mIcon.paddingPx(mPadding); } if (mContourColor != 0) { mIcon.contourColor(mContourColor); } if (mContourWidth != -1) { mIcon.contourWidthPx(mContourWidth); } if (mBackgroundColor != 0) { mIcon.backgroundColor(mBackgroundColor); } if (mCornerRadius != -1) { mIcon.roundedCornersPx(mCornerRadius); } } 	0	0	1	1	0	0
"public static String getNewDateAsFullString() { SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd HH-mm-ss""); String date = sdf.format(new Date()); return date; } "	0	0	1	1	0	0
"private void triggerOrderScheduler() { String schedulerPeriodStr = properties.getProperty(ConfigurationConstants.SCHEDULER_PERIOD_KEY); long schedulerPeriod = schedulerPeriodStr == null ? DEFAULT_SCHEDULER_PERIOD : Long.valueOf(schedulerPeriodStr); orderSchedulerTimer.scheduleAtFixedRate(new TimerTask() { @Override public void run() { try { checkAndSubmitOpenOrders(); } catch (Throwable e) { LOGGER.error(""Erro while checking and submitting open orders"", e); } } }, 0, schedulerPeriod); } "	0	0	1	1	0	0
private int compareWithRespectToRouteTypePreferences(RouteDTO routeDTO1, RouteDTO routeDTO2) { int leastTimeScore = (int) (routeDTO1.getDurationInSeconds() - routeDTO2.getDurationInSeconds()); int leastNumberOfChangesScore = routeDTO1.getNumberOfChanges() - routeDTO2.getNumberOfChanges(); int soonestScore = (int) (routeDTO2.getDepartureDateTimeInMillis() - routeDTO1.getDepartureDateTimeInMillis()); int highPrefScore = 0; int lowPrefScore = 0; if (routeTypePreference.get(0).equals(Util.Route.LEAST_TIME_PREFERENCE)) { highPrefScore = leastTimeScore; lowPrefScore = leastNumberOfChangesScore; } else { highPrefScore = leastNumberOfChangesScore; lowPrefScore = leastTimeScore; } return compareWithRespectToThreePrefScores(highPrefScore, lowPrefScore, soonestScore); } 	1	1	1	1	0	0
private static Set<ITypeBinding> getAllSuperTypesUpToCommonSuperclass(ITypeBinding typeBinding, ITypeBinding commonSuperclass) { Set<ITypeBinding> superTypes = new LinkedHashSet<ITypeBinding>(); ITypeBinding superTypeBinding = typeBinding.getSuperclass(); if(superTypeBinding != null && !superTypeBinding.isEqualTo(commonSuperclass)) { superTypes.add(superTypeBinding); superTypes.addAll(getAllSuperTypesUpToCommonSuperclass(superTypeBinding, commonSuperclass)); } ITypeBinding[] superInterfaces = typeBinding.getInterfaces(); for(ITypeBinding superInterface : superInterfaces) { if(!superTypeBinding.isEqualTo(commonSuperclass)) { superTypes.add(superInterface); superTypes.addAll(getAllSuperTypesUpToCommonSuperclass(superInterface, commonSuperclass)); } } return superTypes; } 	1	1	1	1	0	0
"@Override @SuppressLint(""DefaultLocale"") public boolean match(final String filterString) { final String initials = getUser().getInitials(); return super.match(filterString) || (initials != null && initials.equalsIgnoreCase(filterString)); } "	1	1	1	1	0	0
@Override protected void loadArguments() { if (getArguments() != null) { repoInfo = (RepoInfo) getArguments().getParcelable(REPO_INFO); path = getArguments().getString(PATH); } } 	1	1	1	1	0	0
private FieldInjectionTarget createInjectionTargetFromField(Element element) { TypeElement enclosingElement = (TypeElement) element.getEnclosingElement();  final TypeElement memberTypeElement = (TypeElement) typeUtils.asElement(element.asType()); final String memberName = element.getSimpleName().toString(); final TypeElement superTypeElementWithInjectedFields = getSuperClassWithInjectedFields(enclosingElement);  FieldInjectionTarget.Kind kind = getKind(element); TypeElement kindParameterTypeElement; if (kind != FieldInjectionTarget.Kind.INSTANCE) { kindParameterTypeElement = null; } else { kindParameterTypeElement = getKindParameter(element); } return new FieldInjectionTarget(enclosingElement, memberTypeElement, memberName, superTypeElementWithInjectedFields, kind, kindParameterTypeElement); } 	1	1	1	1	0	0
"public void render(Batch b) { if (!isVisible()) { return; }  b.draw(modelBackgroundTexture, 0.0f, 0.0f, getClient().getVirtualWidth(), getClient().getVirtualHeight()); GlyphLayout glyphs = font.draw(b, getBufferPrefix() + "" "" + getBuffer(), 0, font.getLineHeight());  glyphs.setText(font, getBufferPrefix() + "" "" + getBuffer().substring(0, getPosition())); CARET.render(b, font, glyphs, font.getLineHeight() - 1);  float position = font.getLineHeight() * 2; int skip = outputOffset; for (String line : getOutput()) { if (skip >= 0) { skip--; continue; }  font.draw(b, line, 0.0f, position); position += font.getLineHeight(); } } "	1	1	1	1	0	0
"@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Bundle args = getArguments();  gl_id = args.getInt(""gl_id""); groceryManager = new GroceryManager(getActivity().getApplicationContext()); groceryManager.setcurrentListID(gl_id); currentList = groceryManager.getCurrentList(); } "	1	1	1	1	0	0
"@Override public void loadOneRow() throws IOException { /* Calendars and Fares are special: they are stored as joined tables rather than simple maps. */ String service_id = getStringField(""service_id"", true); Service service = feed.getOrCreateService(service_id); DateTime date = getDateField(""date"", true); if (service.calendar_dates.containsKey(date)) { feed.errors.add(new DuplicateKeyError(tableName, row, ""(service_id, date)"")); } else { CalendarDate cd = new CalendarDate(); cd.service = service; cd.date = date; cd.exception_type = getIntField(""exception_type"", true, 0, 1); cd.feed = feed; service.calendar_dates.put(date, cd); } } "	1	1	1	1	0	0
public void drawOverlay(int mouseX, int mouseY) { int index = 0; int buttonX = x + 16; int buttonY = y + 2; for (GuiButtonEmote button : emoteButtons) { index++; if (index >= scrollOffset) { if (buttonX + button.width > x + width - 2) { buttonX = x + 16; buttonY += 14; } if (buttonY + 14 > y + height - 2) { button.visible = false; continue; } button.xPosition = buttonX; button.yPosition = buttonY; button.visible = true; buttonX += button.width + 2; } else { button.visible = false; } }  Gui.drawRect(x + 14, y, x + width, y + height, 0xAA000000); mouseInside = mouseX >= x && mouseY >= y && mouseX < x + width && mouseY > y + height; } 	1	1	1	1	0	0
@Override public void onScrollChanged() { int height = scrollView.getHeight(); int scrollY = scrollView.getScrollY(); if (scrollY >= height/3) { hideView(view, direction); } else { showView(view); } } 	1	1	1	1	0	0
"@Override public void init(@NonNull String objectName, @NonNull BusProvider provider, @NonNull QClient client) { super.init(objectName, provider, client); String[] split = objectName.split(""/""); assertEquals(split.length, 2); init(client.networkManager().network(Integer.parseInt(split[0]))); } "	1	1	1	1	0	0
@FXML private void handleCheckButtonEvaluatie2(ActionEvent event) throws IOException { if(dc.getHuidigeLeerling().getEvaluaties().size() == 1){ dc.getHuidigeLeerling().getEvaluaties().add(new Evaluatie(dc.getHuidigeLeerling().getVT(), dc.getHuidigeLeerling().getRT(), dc.getHuidigeLeerling().getHoofdscherm())); } else evaluatie2.setSelected(false); if(dc.getHuidigeLeerling().getEvaluaties().size() == 2){ evaluatie2.setSelected(true); } } 	1	1	1	1	0	0
@Override public Edge getEdge(Object id) { graphStore.autoReadLock(); try { EdgeImpl edge = graphStore.getEdge(id); if (view.containsEdge(edge)) { return edge; } return null; } finally { graphStore.autoReadUnlock(); } } 	1	1	1	1	0	0
@Override public void deleteByUidAndUserId(String deviceUid, String userId, String domainId) { String deviceId = UserDomainIdGenerator.generateDeviceId(domainId, userId, deviceUid); long result = deviceRepository.deleteById(deviceId); if ( result > 0 ) { eventsService.sendDeviceDeleteEvent(deviceId, userId, domainId); } } 	1	1	1	1	0	0
